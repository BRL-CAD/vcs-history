head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 a:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2006.09.27.02.23.06;  author butler;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.09.27.02.23.06;  author butler;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@
/* Generated by Together */

package numerics;

import java.io.Serializable;
import numerics.Point;
import numerics.Vector3;

/**
 * Ray.
 *
 * <p>
 * <b>Source:</b>
 *
 * <pre>
 *  The U. S. Army Research Laboratory Aberdeen Proving Ground, Maryland 21005 USA
 * </pre>
 *
 *
 * <p>
 * <b>Copyright Notice:</b>
 *
 * <pre>
 *  This software is Copyright (C) 2004 by the United States Army. All rights reserved.
 * </pre>
 *
 *
 * <p>
 * <b>Responsibilities:</b>
 * <ul> <li>Represents a 3D ray.</li>
 * </ul>
 * <p>
 * <b>Collaboration:</b>
 * <ul> <li>Uses a Point and Vector3.</li>
 * </ul>
 *
 */

/*
 * $Header: /cvs/brlcadJava/numerics/Ray.java,v 1.2 2005/01/31 02:38:59 jra Exp $
 */

public class Ray implements Serializable
{
    private Point start;
    private Vector3 direction;

    /**
     * Construct a Ray from a Point and a Vector3
     * @@param s	The starting Point of the Ray
     * @@param d	The direction vector of the Ray
     */
    public Ray (Point s, Vector3 d)
    {
	start = s;
	direction = d;
    }
	
	public Ray( Ray ray )
	{
		this.start = new Point( ray.getStart() );
		this.direction = new Vector3( ray.getDirection() );
	}

	/**
	 * Produce a String representation of the Ray of the form "start: (x, y, z), direction: (x, y, z)"
	 */
    public String toString ()
    {
	return "start: " + start + ", direction: " + direction;
    }

	/**
	 * Get the start point of this Ray
	 * @@return The start Point of this Ray
	 */
    public Point getStart ()
    {
	return (start);
    }

	/**
	 * Get the direction vector for this Ray
	 * @@return	The direction Vector3 for this Ray
	 */
    public Vector3 getDirection ()
    {
	return (direction);
    }

	/**
	 * Test equality of rays.
	 * @@param r Ray to compare against.
	 * @@return if they're equal.
	 */
    public boolean isEqual (Ray r)
    {
	return (start.isEqual (r.getStart ())
		&& direction.isEqual (r.getDirection ()));
    }

	/**
	 * Test equality of rays.
	 * @@param p1 A ray.
	 * @@param p2 The ray to compare p1 against.
	 * @@return if they're equal.
	 */
    public static boolean isEqual (Ray p1, Ray p2)
    {
	return p1.isEqual (p2);
    }
}
@


1.1.1.1
log
@Original
@
text
@@
