head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 a:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2006.09.27.02.23.06;  author butler;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2006.09.27.02.23.06;  author butler;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@package samples;
/**
 * Pure Java console application.
 * This application demonstrates console I/O.
 *
 * This file was automatically generated by
 * Omnicore CodeGuide.
 */


import geometry.BrlcadDb;
import geometry.Partition;
import geometry.SimpleOverlapHandler;

import java.util.SortedSet;

import numerics.Point;
import numerics.Ray;
import numerics.Vector3;
import spacePartition.PreppedDb;

public class BrlcadJava
{
	/**
	 * This method is called after start up.
	 *
	 * @@param args   The command-line arguments.
	 *               They can be changed in the
	 *               "Project Settings" dialog in CodeGuide.
	 */
	public static void main(String[] args)
	{
		// Print application prompt to console.
		System.out.println("brlcadJava");
		
		// Print available command-line arguments to console.
		printArguments(args);
		
		if( args.length < 1 )
		{
			System.err.println( "no BRL-CAD database specified" );
			System.err.println( "on the command line, specify a BRL-CAD database and optional object names" );
		}
		
		try
		{
			BrlcadDb brlcadDb = new BrlcadDb( args[0] );
			for( int i=1 ; i<args.length ; i++ )
			{
				System.out.println( brlcadDb.describe( args[i] ) );
			}
			PreppedDb prepped = new PreppedDb( brlcadDb, args[1] );
			System.out.println( "BoundingBox: " + prepped.getBoundingBox() );
			Point start = new Point( 10000.0, 0.0, 0.0 );
			Vector3 dir = new Vector3( -1.0, 0.0, 0.0 );
			Ray ray = new Ray( start, dir );
			SortedSet<Partition> parts = prepped.shootRay( ray, new SimpleOverlapHandler() );
			System.out.println( "partitions (" + parts.size() + "):");
			for( Partition part : parts ) {
				System.out.println( "Partition:" + part);
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			System.exit( 1 );
		}
	}
	
	/**
	 * This method prints available command-line arguments
	 * to the console.
	 */
	private static void printArguments(String[] args)
	{
		for (int i = 0; i < args.length; i++)
		{
			System.out.print("Argument " + i + ": ");
			System.out.println(args[i]);
		}
		
	}
}
@


1.1.1.1
log
@Original
@
text
@@
