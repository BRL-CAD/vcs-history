head	11.9;
access;
symbols
	rel-4-5:11.7
	ctj-4-5-post:11.5
	ctj-4-5-pre:11.5
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1
	rt-2:2.1;
locks; strict;
comment	@ * @;


11.9
date	98.09.22.01.43.10;	author mike;	state dead;
branches;
next	11.8;

11.8
date	98.06.30.22.54.17;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	97.12.31.09.01.40;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	97.11.25.22.16.43;	author butler;	state Exp;
branches;
next	11.5;

11.5
date	96.08.31.08.46.01;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	96.08.31.08.29.28;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	96.08.30.00.08.21;	author butler;	state Exp;
branches;
next	11.2;

11.2
date	95.10.20.04.43.53;	author butler;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.01.03;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.11.02.20.20;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.42.06;	author mike;	state Rel4_0;
branches;
next	9.7;

9.7
date	91.07.06.00.35.17;	author mike;	state Exp;
branches;
next	9.6;

9.6
date	91.02.17.20.15.50;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	91.01.05.03.09.08;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	90.12.12.16.20.10;	author butler;	state Exp;
branches;
next	9.3;

9.3
date	90.12.08.08.57.42;	author butler;	state Exp;
branches;
next	9.2;

9.2
date	90.12.08.07.15.19;	author butler;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.59.30;	author mike;	state Rel3_5;
branches;
next	8.5;

8.5
date	89.04.28.02.48.47;	author phil;	state Exp;
branches;
next	8.4;

8.4
date	89.04.27.22.23.14;	author phil;	state Exp;
branches;
next	8.3;

8.3
date	89.04.04.05.01.40;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.27.16.33.31;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.32.34;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.05.14.02.26.38;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.35.52;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.58.09;	author mike;	state Rel;
branches;
next	5.3;

5.3
date	87.06.27.06.46.01;	author phil;	state Exp;
branches;
next	5.2;

5.2
date	87.06.26.05.57.50;	author mike;	state Exp;
branches;
next	5.1;

5.1
date	87.06.24.22.14.09;	author mike;	state Rel;
branches;
next	4.3;

4.3
date	87.03.23.23.48.38;	author mike;	state Exp;
branches;
next	4.2;

4.2
date	87.02.13.00.01.18;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.48.07;	author mike;	state Rel1;
branches;
next	3.8;

3.8
date	86.12.18.16.00.32;	author mike;	state Exp;
branches;
next	3.7;

3.7
date	86.11.25.03.28.35;	author mike;	state Exp;
branches;
next	3.6;

3.6
date	86.11.07.02.45.24;	author mike;	state Exp;
branches;
next	3.5;

3.5
date	86.08.12.05.50.02;	author mike;	state Exp;
branches;
next	3.4;

3.4
date	86.07.29.20.21.43;	author mike;	state Exp;
branches;
next	3.3;

3.3
date	86.07.24.06.03.56;	author mike;	state Exp;
branches;
next	3.2;

3.2
date	86.07.17.18.30.03;	author mike;	state Exp;
branches;
next	3.1;

3.1
date	86.06.11.00.12.53;	author mike;	state Exp;
branches;
next	3.0;

3.0
date	86.06.10.01.32.10;	author mike;	state Exp;
branches;
next	2.1;

2.1
date	85.08.31.06.03.27;	author mike;	state Exp;
branches;
next	;


desc
@Routines for implementing cloud textures.
@


11.9
log
@Moved sh_*.c shaders from rt/ to liboptical/ directory.
Moved and split rt/material.h into h/shadefuncs.h and h/shadework.h
Changed calling sequence of mlib_setup() to get shader list head explicitly.
Initialization of shader library is now via optical_shader_init().

Note that the "proper" location of shade.c, material.c, and refract.c
(presently in the rt/ directory) are a bit muddled, as they will be
shared with libmultispectral/ shader functions, but aren't quite
wholesome and pure yet.  To minimize impact to Lee's ongoing shader
developments, they haven't been changed.
@
text
@/*
 *			C L O U D . C
 *
 * An attempt at 2D Geoffrey Gardner style cloud texture map
 *
 *
 *  Author -
 *	Phillip Dykstra
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static char RCScloud[] = "@@(#)$Header: /c/CVS/brlcad/rt/sh_cloud.c,v 11.8 1998/06/30 22:54:17 mike Exp mike $ (BRL)";
#endif

#include "conf.h"

#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "./material.h"
#include "./mathtab.h"
#include "./rdebug.h"

struct cloud_specific {
	fastf_t	cl_thresh;
	fastf_t	cl_range;
};
#define CL_NULL	((struct cloud_specific *)0)
#define CL_O(m)	offsetof(struct cloud_specific, m)

struct bu_structparse cloud_parse[] = {
	{"%f",	1, "thresh",	CL_O(cl_thresh),	FUNC_NULL },
	{"%f",	1, "range",	CL_O(cl_range),		FUNC_NULL },
	{"",	0, (char *)0,	0,			FUNC_NULL }
};

HIDDEN int	cloud_setup(), cloud_render();
HIDDEN void	cloud_print(), cloud_free();

struct mfuncs cloud_mfuncs[] = {
	{MF_MAGIC,	"cloud",	0,		MFI_UV,		0,
	cloud_setup,	cloud_render,	cloud_print,	cloud_free },

	{0,		(char *)0,	0,		0,		0,
	0,		0,		0,		0 }
};

#define	NUMSINES	4

/*
 *			C L O U D _ T E X T U R E
 *
 * Returns the texture value for a plane point
 */
double
cloud_texture(x,y,Contrast,initFx,initFy)
register fastf_t x, y;
fastf_t Contrast, initFx, initFy;
{
	register int	i;
	FAST fastf_t	Px, Py, Fx, Fy, C;
	FAST fastf_t	t1, t2, k;

	t1 = t2 = 0;

	/*
	 * Compute initial Phases and Frequencies
	 * Freq "1" goes through 2Pi as x or y go thru 0.0 -> 1.0
	 */
	Fx = rt_twopi * initFx;
	Fy = rt_twopi * initFy;
	Px = rt_halfpi * tab_sin( 0.5 * Fy * y );
	Py = rt_halfpi * tab_sin( 0.5 * Fx * x );
	C = 1.0;	/* ??? */

	for( i = 0; i < NUMSINES; i++ ) {
		/*
		 * Compute one term of each summation.
		 */
		t1 += C * tab_sin( Fx * x + Px ) + Contrast;
		t2 += C * tab_sin( Fy * y + Py ) + Contrast;

		/*
		 * Compute the new phases and frequencies.
		 * N.B. The phases shouldn't vary the same way!
		 */
		Px = rt_halfpi * tab_sin( Fy * y );
		Py = rt_halfpi * tab_sin( Fx * x );
		Fx *= 2.0;
		Fy *= 2.0;
		C  *= 0.707;
	}

	/* Choose a magic k! */
	/* Compute max possible summation */
	k =  NUMSINES * 2 * NUMSINES;

	return( t1 * t2 / k );
}

/*
 *			C L O U D _ S E T U P
 */
HIDDEN int
cloud_setup( rp, matparm, dpp, mfp, rtip )
register struct region *rp;
struct rt_vls	*matparm;
char	**dpp;
struct mfuncs	*mfp;
struct rt_i	*rtip;
{
	register struct cloud_specific *cp;

	RT_VLS_CHECK( matparm );
	GETSTRUCT( cp, cloud_specific );
	*dpp = (char *)cp;

	cp->cl_thresh = 0.35;
	cp->cl_range = 0.3;
	if( bu_struct_parse( matparm, cloud_parse, (char *)cp ) < 0 )
		return(-1);

	return(1);
}

/*
 *			C L O U D _ P R I N T
 */
HIDDEN void
cloud_print( rp, dp )
register struct region *rp;
char	*dp;
{
	bu_struct_print( rp->reg_name, cloud_parse, (char *)dp );
}

/*
 *			C L O U D _ F R E E
 */
HIDDEN void
cloud_free( cp )
char *cp;
{
	rt_free( cp, "cloud_specific" );
}

/*
 *			C L O U D _ R E N D E R
 *
 * Return a sky color with translucency control.
 *  Threshold is the intensity below which it is completely translucent.
 *  Range in the range on intensities over which translucence varies
 *   from 0 to 1.
 *  thresh=0.35, range=0.3 for decent clouds.
 */
int
cloud_render( ap, pp, swp, dp )
struct application	*ap;
struct partition	*pp;
struct shadework	*swp;
char	*dp;
{
	register struct cloud_specific *cp =
		(struct cloud_specific *)dp;
	double intensity;
	FAST fastf_t	TR;

	intensity = cloud_texture( swp->sw_uv.uv_u, swp->sw_uv.uv_v,
		1.0, 2.0, 1.0 );

	/* Intensity is normalized - check bounds */
	if( intensity > 1.0 )
		intensity = 1.0;
	else if( intensity < 0.0 )
		intensity = 0.0;

	/* Compute Translucency Function */
	TR = 1.0 - ( intensity - cp->cl_thresh ) / cp->cl_range;
	if (TR < 0.0)
		TR = 0.0;
	else if (TR > 1.0)
		TR = 1.0;

	swp->sw_color[0] = ((1-TR) * intensity + (TR * .31));	/* Red */
	swp->sw_color[1] = ((1-TR) * intensity + (TR * .31));	/* Green */
	swp->sw_color[2] = ((1-TR) * intensity + (TR * .78));	/* Blue */
	return(1);
}
@


11.8
log
@Can't make "struct mfuncs" a CONST, because the forward link needs
to be filled in at runtime, and some compilers put CONST data into
read-only pages (like FreeBSD).
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /c/CVS/brlcad/rt/sh_cloud.c,v 11.7 1997/12/31 09:01:40 mike Exp $ (BRL)";
@


11.7
log
@Required magic number to be first in mfunc table,
consistent with all other BRL-CAD magic numbers.
Required magic number to be initialized at compile time.
Added code to check the magic numbers.
Made the xxx_mfunc arrays CONST, so they can't get trashed by
runtime runaway pointer problems.
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 11.6 1997/11/25 22:16:43 butler Exp mike $ (BRL)";
d50 1
a50 1
CONST struct mfuncs cloud_mfuncs[] = {
@


11.6
log
@updated all shaders so that _setup had mfp and rtip parameters
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 11.5 1996/08/31 08:46:01 butler Exp butler $ (BRL)";
d50 2
a51 2
struct mfuncs cloud_mfuncs[] = {
	{"cloud",	0,		0,		MFI_UV,		0,
d54 1
a54 1
	{(char *)0,	0,		0,		0,		0,
@


11.5
log
@bu_struct_print
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 11.4 1996/08/31 08:29:28 butler Exp butler $ (BRL)";
d115 1
a115 1
cloud_setup( rp, matparm, dpp )
d119 2
@


11.4
log
@bu_struct_parse
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 11.3 1996/08/30 00:08:21 butler Exp butler $ (BRL)";
d142 1
a142 1
	bu_structprint( rp->reg_name, cloud_parse, (char *)dp );
@


11.3
log
@structparse moved to libbu
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 11.2 1995/10/20 04:43:53 butler Exp butler $ (BRL)";
d128 1
a128 1
	if( bu_structparse( matparm, cloud_parse, (char *)cp ) < 0 )
@


11.2
log
@edited mfuncs table to account for new "mf_flags" element in struct mfuncs.
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 11.1 1995/01/04 10:01:03 mike Rel4_4 butler $ (BRL)";
d41 1
a41 1
struct structparse cloud_parse[] = {
d128 1
a128 1
	if( rt_structparse( matparm, cloud_parse, (char *)cp ) < 0 )
d142 1
a142 1
	rt_structprint( rp->reg_name, cloud_parse, (char *)dp );
@


11.1
log
@Release_4.4
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 10.2 94/08/11 02:20:20 gdurf Exp $ (BRL)";
d51 1
a51 1
	{"cloud",	0,		0,		MFI_UV,
d54 1
a54 1
	{(char *)0,	0,		0,		0,
@


10.2
log
@Added include of conf.h
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 10.1 1991/10/12 06:42:06 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 9.7 91/07/06 00:35:17 mike Exp $ (BRL)";
d22 2
@


9.7
log
@ANSI structure initialization
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 9.6 91/02/17 20:15:50 mike Exp $ (BRL)";
@


9.6
log
@Check return code from rt_structparse()
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 9.5 91/01/05 03:09:08 mike Exp $ (BRL)";
d40 3
a42 3
	"%f",	1, "thresh",	CL_O(cl_thresh),	FUNC_NULL,
	"%f",	1, "range",	CL_O(cl_range),		FUNC_NULL,
	"",	0, (char *)0,	0,			FUNC_NULL
d49 2
a50 2
	"cloud",	0,		0,		MFI_UV,
	cloud_setup,	cloud_render,	cloud_print,	cloud_free,
d52 2
a53 2
	(char *)0,	0,		0,		0,
	0,		0,		0,		0
@


9.5
log
@Converted to new format for fmt entry in structparse
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 9.4 90/12/12 16:20:10 butler Exp $ (BRL)";
d126 2
a127 1
	rt_structparse( matparm, cloud_parse, (char *)cp );
@


9.4
log
@modified to reflect changes in structparse format
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 9.3 90/12/08 08:57:42 butler Exp $ (BRL)";
d42 1
a42 1
	(char *)0, 0, (char *)0,0,			FUNC_NULL
@


9.3
log
@changed material property parameter to be struct rt_vls
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 9.2 90/12/08 07:15:19 butler Exp $ (BRL)";
d40 3
a42 3
	"%f",	"thresh",	CL_O(cl_thresh),	FUNC_NULL,
	"%f",	"range",	CL_O(cl_range),		FUNC_NULL,
	(char *)0,(char *)0,	0,			FUNC_NULL
@


9.2
log
@changed rt_structparse call to use vls
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: /m/cad/rt/RCS/sh_cloud.c,v 9.1 89/05/19 05:59:30 mike Rel3_5 $ (BRL)";
d115 1
a115 1
char	*matparm;
a118 1
	struct rt_vls vls;
d120 1
a121 3
	rt_vls_init( &vls);
	rt_vls_strcat( &vls, matparm );

d126 2
a127 2
	rt_structparse( &vls, cloud_parse, (char *)cp );
	rt_vls_free( &vls );
@


9.1
log
@Release_3.5
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: sh_cloud.c,v 8.5 89/04/28 02:48:47 phil Exp $ (BRL)";
d119 1
d122 3
d129 2
a130 1
	rt_structparse( matparm, cloud_parse, (char *)cp );
@


8.5
log
@made structparse %f arguments fastf_t's
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: sh_cloud.c,v 8.4 89/04/27 22:23:14 phil Locked $ (BRL)";
@


8.4
log
@Now use rt_pi, rt_twopi, rt_halfpi from librt
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: sh_cloud.c,v 8.3 89/04/04 05:01:40 phil Locked $ (BRL)";
d33 2
a34 2
	float	cl_thresh;
	float	cl_range;
d65 2
a66 2
register float x, y;
float Contrast, initFx, initFy;
@


8.3
log
@Converted to new way of representing structure offsets.
@
text
@d8 1
a8 1
 *	Philip Dykstra
d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 8.2 88/12/27 16:33:31 mike Locked $ (BRL)";
d78 4
a81 4
	Fx = twopi * initFx;
	Fy = twopi * initFy;
	Px = halfpi * tab_sin( 0.5 * Fy * y );
	Py = halfpi * tab_sin( 0.5 * Fx * x );
d95 2
a96 2
		Px = halfpi * tab_sin( Fy * y );
		Py = halfpi * tab_sin( Fx * x );
@


8.2
log
@Converted matparse --> structparse
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 8.1 88/10/05 00:32:34 mike Locked $ (BRL)";
d37 1
d40 3
a42 3
	"%f",	"thresh",	(stroff_t)&(CL_NULL->cl_thresh),	FUNC_NULL,
	"%f",	"range",	(stroff_t)&(CL_NULL->cl_range),		FUNC_NULL,
	(char *)0,(char *)0,	(stroff_t)0,				FUNC_NULL
d125 1
a125 1
	rt_structparse( matparm, cloud_parse, (stroff_t)cp );
d137 1
a137 1
	rt_structprint( rp->reg_name, cloud_parse, (stroff_t)dp );
@


8.1
log
@Release_3.0
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 7.2 88/05/14 02:26:38 mike Exp $ (BRL)";
d38 4
a41 4
struct matparse cloud_parse[] = {
	"thresh",	(mp_off_ty)&(CL_NULL->cl_thresh),	"%f",
	"range",	(mp_off_ty)&(CL_NULL->cl_range),	"%f",
	(char *)0,	(mp_off_ty)0,				(char *)0
d124 1
a124 1
	mlib_parse( matparm, cloud_parse, (mp_off_ty)cp );
d136 1
a136 1
	mlib_print( rp->reg_name, cloud_parse, (mp_off_ty)dp );
@


7.2
log
@lint fixes
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 7.1 87/11/02 23:35:52 mike Locked $ (BRL)";
@


7.1
log
@Release 2.3
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 6.1 87/07/11 07:58:09 mike Rel $ (BRL)";
d44 2
a45 1
HIDDEN int cloud_setup(), cloud_render(), cloud_print(), cloud_free();
d131 1
a131 1
HIDDEN int
d142 1
a142 1
HIDDEN int
d158 1
d189 1
@


6.1
log
@Release 2.0
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 5.3 87/06/27 06:46:01 phil Exp $ (BRL)";
@


5.3
log
@rendering parameter changes
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 5.2 87/06/26 05:57:50 phil Locked $ (BRL)";
@


5.2
log
@Added struct shadework support, separated shaders from
reflect/refract code, allowed stacking of shaders.
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 5.1 87/06/24 22:14:09 mike Locked $ (BRL)";
d111 1
a111 1
cloud_setup( rp )
d113 2
d119 1
a119 1
	rp->reg_udata = (char *)cp;
d123 1
a123 1
	mlib_parse( rp->reg_mater.ma_matparm, cloud_parse, (mp_off_ty)cp );
d131 1
a131 1
cloud_print( rp )
d133 1
d135 1
a135 1
	mlib_print( rp->reg_name, cloud_parse, (mp_off_ty)rp->reg_udata );
d157 1
a157 1
cloud_render( ap, pp, swp )
d161 1
d164 1
a164 1
		(struct cloud_specific *)pp->pt_regionp->reg_udata;
@


5.1
log
@Release 1.24
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 4.3 87/03/23 23:48:38 mike Exp $ (BRL)";
d47 1
a47 1
	"cloud",	0,		0,
d50 1
a50 1
	(char *)0,	0,		0,
d154 4
a157 3
cloud_render( ap, pp )
register struct application *ap;
register struct partition *pp;
a160 1
	auto struct uvcoord uv;
d164 2
a165 5
	VJOIN1( pp->pt_inhit->hit_point, ap->a_ray.r_pt,
		pp->pt_inhit->hit_dist, ap->a_ray.r_dir );
	rt_functab[pp->pt_inseg->seg_stp->st_id].ft_uv(
		ap, pp->pt_inseg->seg_stp, pp->pt_inhit, &uv );
	intensity = cloud_texture( uv.uv_u, uv.uv_v, 1.0, 2.0, 1.0 );
d180 3
a182 3
	ap->a_color[0] = ((1-TR) * intensity + (TR * .31));	/* Red */
	ap->a_color[1] = ((1-TR) * intensity + (TR * .31));	/* Green */
	ap->a_color[2] = ((1-TR) * intensity + (TR * .78));	/* Blue */
@


4.3
log
@Revised for new material property interface.
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 4.2 87/02/13 00:01:18 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 4.1 86/12/29 03:48:07 mike Rel1 $ (BRL)";
d44 1
d46 8
d107 4
a110 3
extern cloud_render();

int
a116 1
	rp->reg_ufunc = cloud_render;
a121 2
	if(rdebug&RDEBUG_MATERIAL)
		mlib_print(rp->reg_name, cloud_parse, (mp_off_ty)cp);
d125 19
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 3.8 86/12/18 16:00:32 mike Locked $ (BRL)";
@


3.8
log
@rdebug.h separated from librt/debug.h
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 3.7 86/11/25 03:28:35 mike Locked $ (BRL)";
@


3.7
log
@Changed to use twopi and halfpi.
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 3.6 86/11/07 02:45:24 mike Locked $ (BRL)";
d30 1
d39 3
a41 3
	"thresh",	(int)&(CL_NULL->cl_thresh),	"%f",
	"range",	(int)&(CL_NULL->cl_range),	"%f",
	(char *)0,	0,				(char *)0
d54 1
a54 1
double x, y;
a56 2
	LOCAL float	t1, t2, k;
	LOCAL double	Px, Py, Fx, Fy, C;
d58 2
d112 3
a114 1
	mlib_parse( rp->reg_mater.ma_matparm, cloud_parse, (char *)cp );
@


3.6
log
@Changed so that computation of hit_point and hit_norm is done
in the individual material routines, and only as much as needed.
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 3.5 86/08/12 05:50:02 mike Exp $ (BRL)";
a43 2
#define	PI	3.1415926535898
#define	TWOPI	6.283185307179
d66 4
a69 4
	Fx = TWOPI * initFx;
	Fy = TWOPI * initFy;
	Px = PI * 0.5 * tab_sin( 0.5 * Fy * y );
	Py = PI * 0.5 * tab_sin( 0.5 * Fx * x );
d83 2
a84 2
		Px = PI / 2.0 * tab_sin( Fy * y );
		Py = PI / 2.0 * tab_sin( Fx * x );
@


3.5
log
@Changed to find #include files with CC -I../h
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 3.4 86/07/29 20:21:43 mike Exp $ (BRL)";
d137 2
@


3.4
log
@Switched to mathlib.c
@
text
@d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 3.3 86/07/24 06:03:56 mike Exp $ (BRL)";
d25 5
a29 5
#include "../h/machine.h"
#include "../h/vmath.h"
#include "../h/raytrace.h"
#include "material.h"
#include "mathtab.h"
@


3.3
log
@Added uvcoord code, conical ray divergance.
@
text
@a5 2
 *  Notes -
 *	Uses sin() table for speed.
d20 1
a20 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 3.2 86/07/17 18:30:03 mike Exp $ (BRL)";
d29 1
a48 27
 *	S I N E
 *
 * Table lookup sine function.
 */
double
sine(angle)
double angle;
{
#define	TABSIZE	512

	static	int	init = 0;
	static	double	table[TABSIZE];
	register int	i;

	if (init == 0) {
		for( i = 0; i < TABSIZE; i++ )
			table[i] = sin( TWOPI * i / TABSIZE );
		init++;
	}

	if (angle > 0)
		return( table[(int)((angle / TWOPI) * TABSIZE + 0.5) % TABSIZE] );
	else
		return( -table[(int)((-angle / TWOPI) * TABSIZE + 0.5) % TABSIZE] );
}

/*
d70 2
a71 2
	Px = PI * 0.5 * sine( 0.5 * Fy * y );
	Py = PI * 0.5 * sine( 0.5 * Fx * x );
d78 2
a79 2
		t1 += C * sine( Fx * x + Px ) + Contrast;
		t2 += C * sine( Fy * y + Py ) + Contrast;
d85 2
a86 2
		Px = PI / 2.0 * sine( Fy * y );
		Py = PI / 2.0 * sine( Fx * x );
@


3.2
log
@Names shortened for non-FLEXNAMES systems (cray),
and converted to using stdio for all I/O.
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header: cloud.c,v 3.1 86/06/11 00:12:53 mike Exp $ (BRL)";
d161 1
a161 1
	auto fastf_t uv[2];
d166 2
a167 2
		pp->pt_inseg->seg_stp, pp->pt_inhit, uv );
	intensity = cloud_texture( uv[0], uv[1], 1.0, 2.0, 1.0 );
@


3.1
log
@New somewhat object-oriented material-property version
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: cloud.c,v 3.0 86/06/10 01:32:10 mike Exp $ (BRL)";
d141 1
a141 1
	matlib_parse( rp->reg_mater.ma_matparm, cloud_parse, (char *)cp );
@


3.0
log
@rt/ and librt/ separated,
global datastructures simplified.
@
text
@d2 1
a2 1
 *		C L O U D T E X T . C
d22 1
a22 1
static char RCSid[] = "@@(#)$Header: cloud.c,v 2.1 85/08/31 06:03:27 mike Exp $ (BRL)";
d29 2
d32 13
d77 1
a77 1
 *	T E X T U R E
d82 1
a82 1
texture(x,y,Contrast,initFx,initFy)
d127 19
d147 1
a147 1
 *	S K Y C O L O R
d153 1
d155 3
a157 5
long
skycolor( intensity, color, thresh, range )
double intensity;
vect_t color;
double thresh, range;
d159 4
d165 4
d176 1
a176 1
	TR = 1.0 - ( intensity - thresh ) / range;
d182 3
a184 3
	color[0] = ((1-TR) * intensity + (TR * .31));		/* Red */
	color[1] = ((1-TR) * intensity + (TR * .31));		/* Green */
	color[2] = ((1-TR) * intensity + (TR * .78));		/* Blue */
@


2.1
log
@Version 2 of RT
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@
