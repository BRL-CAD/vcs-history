head	11.15;
access;
symbols
	ansi-20040405-merged:11.10.2.2
	postmerge-20040405-ansi:11.13
	premerge-20040404-ansi:11.12
	postmerge-autoconf:11.12
	autoconf-freeze:11.11.2.2
	premerge-autoconf:11.12
	postmerge-20040315-windows:11.12
	premerge-20040315-windows:11.12
	windows-20040315-freeze:11.10.4.1
	autoconf-20031203:11.11
	autoconf-20031202:11.11
	autoconf-branch:11.11.0.2
	phong-branch:11.10.0.8
	photonmap-branch:11.10.0.6
	rel-6-1-DP:11.10
	windows-branch:11.10.0.4
	rel-6-0-2:11.8
	ansi-branch:11.10.0.2
	rel-6-0-1-branch:11.8.0.2
	hartley-6-0-post:11.9
	hartley-6-0-pre:11.8
	rel-6-0-1:11.8
	rel-6-0:11.8
	rel-5-4:11.6
	offsite-5-3-pre:11.8
	rel-5-3:11.6
	rel-5-2:11.6
	rel-5-1-branch:11.6.0.2
	rel-5-1:11.6
	rel-5-0:11.6
	rel-5-0-beta:11.5
	rel-4-5:11.4
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.15
date	2004.05.21.17.31.10;	author morrison;	state dead;
branches;
next	11.14;

11.14
date	2004.05.10.15.30.49;	author erikg;	state Exp;
branches;
next	11.13;

11.13
date	2004.04.05.05.45.59;	author morrison;	state Exp;
branches;
next	11.12;

11.12
date	2004.02.02.17.39.39;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2003.09.27.01.11.25;	author morrison;	state Exp;
branches
	11.11.2.1;
next	11.10;

11.10
date	2002.08.20.17.08.40;	author jra;	state Exp;
branches
	11.10.2.1
	11.10.4.1;
next	11.9;

11.9
date	2002.08.15.20.55.51;	author hartley;	state Exp;
branches;
next	11.8;

11.8
date	2000.08.17.02.41.42;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	2000.07.25.16.39.49;	author butler;	state Exp;
branches;
next	11.6;

11.6
date	99.07.02.22.19.47;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	99.05.28.01.19.31;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	97.12.16.00.20.11;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.08.30.00.08.21;	author butler;	state Exp;
branches;
next	11.2;

11.2
date	95.12.06.17.57.53;	author pjt;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.01.33;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.11.02.48.04;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.42.26;	author mike;	state Rel4_0;
branches;
next	1.8;

1.8
date	91.09.25.02.42.22;	author butler;	state Exp;
branches;
next	1.7;

1.7
date	91.07.06.00.35.34;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	91.07.02.22.21.56;	author butler;	state Exp;
branches;
next	1.5;

1.5
date	91.02.20.00.51.36;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	91.01.05.03.09.30;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	90.12.12.16.35.23;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	90.12.11.02.07.44;	author phil;	state Exp;
branches;
next	1.1;

1.1
date	90.12.10.19.13.42;	author phil;	state Exp;
branches;
next	;

11.10.2.1
date	2002.09.19.18.02.17;	author morrison;	state Exp;
branches;
next	11.10.2.2;

11.10.2.2
date	2004.03.17.21.23.02;	author morrison;	state Exp;
branches;
next	;

11.10.4.1
date	2004.03.11.23.48.08;	author morrison;	state Exp;
branches;
next	;

11.11.2.1
date	2004.02.12.19.37.14;	author erikg;	state Exp;
branches;
next	11.11.2.2;

11.11.2.2
date	2004.03.15.14.08.08;	author erikg;	state Exp;
branches;
next	;


desc
@Poor man's X-Ray simulator.
@


11.15
log
@moved to src/rt/
@
text
@/*
 *			V I E W X R A Y . C
 *
 *  Ray Tracing program RTXRAY bottom half.
 *
 *  This module produces pseudo XRAY images of models by adding
 *  up ray path lengths.  By default it will scale these lengths
 *  by the max model RPP length and write a grey scale BW file.
 *  The alternate lighting model outputs "doubles" containing the
 *  actual lengths for post processing.
 *
 *  A better version of this would know something about material
 *  densities.
 *
 *  Author -
 *	Phillip Dykstra
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSviewxray[] = "@@(#)$Header: /n/xoff/cvs/brlcad/rt/viewxray.c,v 11.14 2004/05/10 15:30:49 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "rtprivate.h"
#include "fb.h"

int	use_air = 0;			/* Handling of air in librt */
int	using_mlib = 0;			/* Material routines NOT used */

extern	FBIO	*fbp;
extern	FILE	*outfp;
extern	fastf_t	viewsize;
extern	int	lightmodel;
extern	double	AmbientIntensity;	/* XXX - temp hack for contrast! */
extern	int	width, height;

static	unsigned char *scanbuf;
static	int pixsize = 0;		/* bytes per pixel in scanbuf */
static	double	contrast_boost = 2.0;

static int xrayhit(register struct application *ap, struct partition *PartHeadp);
static int xraymiss(register struct application *ap, struct partition *PartHeadp);

/* Viewing module specific "set" variables */
struct bu_structparse view_parse[] = {
	{"",	0, (char *)0,	0,	BU_STRUCTPARSE_FUNC_NULL }
};

char usage[] = "\
Usage: rtxray [options] model.g objects... >stuff\n\
Options:\n\
 -s #		Grid size in pixels, default 512\n\
 -a Az		Azimuth in degrees	(conflicts with -M)\n\
 -e Elev	Elevation in degrees	(conflicts with -M)\n\
 -M		Read model2view matrix on stdin (conflicts with -a, -e)\n\
 -o file.bw	Output file name, else frame buffer\n\
 -A #		Contrast boost (default 2.0), may clip if > 1\n\
 -x #		Set librt debug flags\n\
 -l 0		line buffered B&W X-Rays (default)\n\
 -l 1		Floating point X-Rays (path lengths in doubles)\n\
";

/* lighting models */
#define	LGT_BW		0
#define	LGT_FLOAT	1

/*
 *  Called at the start of a run.
 *  Returns 1 if framebuffer should be opened, else 0.
 */
int
view_init(register struct application *ap, char *file, char *obj, int minus_o)
{
	/*
	 *  We need to work to get the output pixels and scanlines
	 *  in order before we can run in parallel.  Something like
	 *  view.c does in its dynamic buffering mode.
	 */
	if (rt_g.rtg_parallel) {
		rt_g.rtg_parallel = 0;
		bu_log("rtxray: Can't do parallel yet, using one CPU\n");
	}

	if( lightmodel == LGT_BW ) {
		if( minus_o )
			pixsize = 1;		/* BW file */
		else
			pixsize = 3;		/* Frame buffer */
	} else {
		/* XXX - Floating output uses no buffer */
		pixsize = 0;
	}
	if( pixsize ) {
		scanbuf = (unsigned char *)
			bu_malloc( width*pixsize, "scanline buffer" );
	}

	if( minus_o ) {
		/* output is to a file */
		return(0);		/* don't open frame buffer */
	}

	if( lightmodel == LGT_FLOAT ) {
		bu_log("rtxray: Can't do floating point mode to frame buffer, use -o\n");
		exit(1);
	}
	return(1);		/* we need a framebuffer */
}

/* beginning of a frame */
void
view_2init(struct application *ap, char *framename)
{
	/*
	 *  This is a dangerous hack to allow us to use -A #
	 *  as a way of passing in a contrast_boost factor.
	 *  We need a way for view modules to add their own
	 *  flags to the command line arguments.
	 */
	if (AmbientIntensity > 1.0)
		contrast_boost = AmbientIntensity;
	bu_log("Contrast Boost = %5.2f\n", contrast_boost);

	ap->a_hit = xrayhit;
	ap->a_miss = xraymiss;
	ap->a_onehit = 0;
}

/* end of each pixel */
void
view_pixel(register struct application *ap)
{
}

/* end of each line */
void
view_eol(register struct application *ap)
{
	if( lightmodel == LGT_BW ) {
		bu_semaphore_acquire( BU_SEM_SYSCALL );
		if( outfp != NULL )
			fwrite( scanbuf, pixsize, width, outfp );
		else if( fbp != FBIO_NULL )
			fb_write( fbp, 0, ap->a_y, scanbuf, width );
		bu_semaphore_release( BU_SEM_SYSCALL );
	}
}

void	view_setup(void) {}
/* end of a frame, called after rt_clean() */
void	view_cleanup(void) {}

/* end of each frame */
void
view_end(void)
{

}

static int
xrayhit(register struct application *ap, struct partition *PartHeadp)
{
	register struct partition *pp;
	register struct hit *hitp;
	fastf_t	totdist;
	fastf_t	fvalue;
	unsigned char value;

	for( pp=PartHeadp->pt_forw; pp != PartHeadp; pp = pp->pt_forw )
		if( pp->pt_outhit->hit_dist >= 0.0 )  break;
	if( pp == PartHeadp )  {
		bu_log("xrayhit:  no hit out front?\n");
		return(0);
	}

	if(R_DEBUG&RDEBUG_HITS)  {
		rt_pr_pt( ap->a_rt_i, pp );
	}

	hitp = pp->pt_inhit;
	if( hitp->hit_dist >= INFINITY )  {
		bu_log("xrayhit:  entry beyond infinity\n");
		return(1);
	}
	/* Check to see if eye is "inside" the solid */
	if( hitp->hit_dist < 0.0 )  {
		/* XXX */
		bu_log("xrayhit:  Eye inside solid (%g)\n", hitp->hit_dist );
		for( pp=PartHeadp->pt_forw; pp != PartHeadp; pp = pp->pt_forw )
			rt_pr_pt( ap->a_rt_i, pp );
		return(0);
	}

	/* Finally! We are ready to walk the partition chain */

	/* Compute the total thickness */
	totdist = 0;
	while( pp != PartHeadp ) {
		double	dist;

		dist = pp->pt_outhit->hit_dist - pp->pt_inhit->hit_dist;
		totdist += dist;

		pp = pp->pt_forw;
	}

	switch( lightmodel ) {
	case LGT_FLOAT:
		bu_semaphore_acquire( BU_SEM_SYSCALL );
		fwrite( &totdist, sizeof(totdist), 1, outfp );
		bu_semaphore_release( BU_SEM_SYSCALL );
		break;
	case LGT_BW:
		fvalue = 1.0 - contrast_boost*totdist/viewsize;
		if( fvalue > 1.0 ) fvalue = 1.0;
		else if( fvalue <= 0.0 ) fvalue = 0.0;
		value = 1.0 + 254.99 * fvalue;
		bu_semaphore_acquire( RT_SEM_RESULTS );
		if( pixsize == 1 ) {
			scanbuf[ap->a_x] = value;
		} else {
			scanbuf[ap->a_x*3+RED] = value;
			scanbuf[ap->a_x*3+GRN] = value;
			scanbuf[ap->a_x*3+BLU] = value;
		}
		bu_semaphore_release( RT_SEM_RESULTS );
		break;
	}

	return(1);	/* report hit to main routine */
}

static int
xraymiss(register struct application *ap, struct partition *PartHeadp)
{
	static	double	zero = 0;

	switch( lightmodel ) {
	case LGT_BW:
		bu_semaphore_acquire( RT_SEM_RESULTS );
		if( pixsize == 1 ) {
			scanbuf[ap->a_x] = 0;
		} else {
			scanbuf[ap->a_x*3+RED] = 0;
			scanbuf[ap->a_x*3+GRN] = 0;
			scanbuf[ap->a_x*3+BLU] = 0;
		}
		bu_semaphore_release( RT_SEM_RESULTS );
		break;
	case LGT_FLOAT:
		bu_semaphore_acquire( BU_SEM_SYSCALL );
		fwrite( &zero, sizeof(zero), 1, outfp );
		bu_semaphore_release( BU_SEM_SYSCALL );
		break;
	default:
		bu_log( "xraymiss: Bad lighting model %d\n", lightmodel );
		break;
	}

	return(0);	/* report miss to main routine */
}

void application_init (void) {}
@


11.14
log
@change conf.h to a wrapped config.h
@
text
@d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /cvs/brlcad/rt/viewxray.c,v 11.13 2004/04/05 05:45:59 morrison Exp $ (BRL)";
@


11.13
log
@merge of ansi-6-0-branch into head
@
text
@d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header$ (BRL)";
d31 5
a35 1
#include "conf.h"
@


11.12
log
@update copyright to include span through 2003
@
text
@d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.11 2003/09/27 01:11:25 morrison Exp $ (BRL)";
d54 2
a55 2
static int xrayhit();
static int xraymiss();
d85 1
a85 4
view_init( ap, file, obj, minus_o )
register struct application *ap;
char *file, *obj;
int minus_o;
d125 1
a125 3
view_2init( ap, framename )
struct application *ap;
char *framename;
d144 1
a144 2
view_pixel( ap )
register struct application *ap;
d150 1
a150 2
view_eol( ap )
register struct application *ap;
d162 1
a162 1
void	view_setup() {}
d164 1
a164 1
void	view_cleanup() {}
d168 1
a168 1
view_end()
d174 1
a174 3
xrayhit( ap, PartHeadp )
register struct application *ap;
struct partition *PartHeadp;
d247 1
a247 3
xraymiss( ap, PartHeadp )
register struct application *ap;
struct partition *PartHeadp;
d276 1
a276 1
void application_init () {}
@


11.11
log
@updated rdebug var usages to the R_DEBUG define for performance during production builds; moved certain shared globals to liboptical
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1990 by the United States Army.
d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.10 2002/08/20 17:08:40 jra Exp $ (BRL)";
@


11.11.2.1
log
@merge from HEAD
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.12 2004/02/02 17:39:39 morrison Exp $ (BRL)";
@


11.11.2.2
log
@merge from head
@
text
@d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.11.2.1 2004/02/12 19:37:14 erikg Exp $ (BRL)";
@


11.10
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.8 2000/08/17 02:41:42 mike Exp $ (BRL)";
d198 1
a198 1
	if(rdebug&RDEBUG_HITS)  {
@


11.10.4.1
log
@sync to HEAD...
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/rt/viewxray.c,v 11.12 2004/02/02 17:39:39 morrison Exp $ (BRL)";
d198 1
a198 1
	if(R_DEBUG&RDEBUG_HITS)  {
@


11.10.2.1
log
@Initial ANSIfication
@
text
@d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.10 2002/08/20 17:08:40 jra Exp $ (BRL)";
d54 2
a55 2
static int xrayhit(register struct application *ap, struct partition *PartHeadp);
static int xraymiss(register struct application *ap, struct partition *PartHeadp);
d85 4
a88 1
view_init(register struct application *ap, char *file, char *obj, int minus_o)
d128 3
a130 1
view_2init(struct application *ap, char *framename)
d149 2
a150 1
view_pixel(register struct application *ap)
d156 2
a157 1
view_eol(register struct application *ap)
d169 1
a169 1
void	view_setup(void) {}
d171 1
a171 1
void	view_cleanup(void) {}
d175 1
a175 1
view_end(void)
d181 3
a183 1
xrayhit(register struct application *ap, struct partition *PartHeadp)
d256 3
a258 1
xraymiss(register struct application *ap, struct partition *PartHeadp)
d287 1
a287 1
void application_init (void) {}
@


11.10.2.2
log
@sync branch with HEAD
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header$ (BRL)";
d189 1
a189 1
	if(R_DEBUG&RDEBUG_HITS)  {
@


11.9
log
@Converted from K&R to ANSI C - RFH
@
text
@d54 2
a55 2
static int xrayhit(register struct application *ap, struct partition *PartHeadp);
static int xraymiss(register struct application *ap, struct partition *PartHeadp);
d85 4
a88 1
view_init(register struct application *ap, char *file, char *obj, int minus_o)
d128 3
a130 1
view_2init(struct application *ap, char *framename)
d149 2
a150 1
view_pixel(register struct application *ap)
d156 2
a157 1
view_eol(register struct application *ap)
d169 1
a169 1
void	view_setup(void) {}
d171 1
a171 1
void	view_cleanup(void) {}
d175 1
a175 1
view_end(void)
d181 3
a183 1
xrayhit(register struct application *ap, struct partition *PartHeadp)
d256 3
a258 1
xraymiss(register struct application *ap, struct partition *PartHeadp)
d287 1
a287 1
void application_init (void) {}
@


11.8
log
@
Added "const" to RCSid, to quiet Gnu C compilers.
@
text
@d28 1
a28 1
static const char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.7 2000/07/25 16:39:49 butler Exp $ (BRL)";
d54 2
a55 2
static int xrayhit();
static int xraymiss();
d85 1
a85 4
view_init( ap, file, obj, minus_o )
register struct application *ap;
char *file, *obj;
int minus_o;
d125 1
a125 3
view_2init( ap, framename )
struct application *ap;
char *framename;
d144 1
a144 2
view_pixel( ap )
register struct application *ap;
d150 1
a150 2
view_eol( ap )
register struct application *ap;
d162 1
a162 1
void	view_setup() {}
d164 1
a164 1
void	view_cleanup() {}
d168 1
a168 1
view_end()
d174 1
a174 3
xrayhit( ap, PartHeadp )
register struct application *ap;
struct partition *PartHeadp;
d247 1
a247 3
xraymiss( ap, PartHeadp )
register struct application *ap;
struct partition *PartHeadp;
d276 1
a276 1
void application_init () {}
@


11.7
log
@Many patches for warning-free compilation on Linux.
Moved rdebug.h to h/rtprivate.h
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.6 1999/07/02 22:19:47 mike Exp $ (BRL)";
@


11.6
log
@
Removed dependence on compat4.h
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.5 1999/05/28 01:19:31 mike Exp $ (BRL)";
d37 1
a37 1
#include "./rdebug.h"
d174 1
a174 1
int
d177 1
a177 1
	return	0;		/* OK */
@


11.5
log
@
sed4
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewxray.c,v 11.4 1997/12/16 00:20:11 mike Exp $ (BRL)";
d59 1
a59 1
	{"",	0, (char *)0,	0,	FUNC_NULL }
@


11.4
log
@Converted to bu_semaphore_acquire()
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 11.3 1996/08/30 00:08:21 butler Exp mike $ (BRL)";
d97 1
a97 1
		rt_log("rtxray: Can't do parallel yet, using one CPU\n");
d111 1
a111 1
			rt_malloc( width*pixsize, "scanline buffer" );
d120 1
a120 1
		rt_log("rtxray: Can't do floating point mode to frame buffer, use -o\n");
d140 1
a140 1
	rt_log("Contrast Boost = %5.2f\n", contrast_boost);
d194 1
a194 1
		rt_log("xrayhit:  no hit out front?\n");
d204 1
a204 1
		rt_log("xrayhit:  entry beyond infinity\n");
d210 1
a210 1
		rt_log("xrayhit:  Eye inside solid (%g)\n", hitp->hit_dist );
d280 1
a280 1
		rt_log( "xraymiss: Bad lighting model %d\n", lightmodel );
@


11.3
log
@structparse moved to libbu
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 11.2 1995/12/06 17:57:53 pjt Exp butler $ (BRL)";
d160 1
a160 1
		RES_ACQUIRE( &rt_g.res_syscall );
d165 1
a165 1
		RES_RELEASE( &rt_g.res_syscall );
d231 1
a231 1
		RES_ACQUIRE( &rt_g.res_syscall );
d233 1
a233 1
		RES_RELEASE( &rt_g.res_syscall );
d240 1
a240 1
		RES_ACQUIRE( &rt_g.res_results );
d248 1
a248 1
		RES_RELEASE( &rt_g.res_results );
d264 1
a264 1
		RES_ACQUIRE( &rt_g.res_results );
d272 1
a272 1
		RES_RELEASE( &rt_g.res_results );
d275 1
a275 1
		RES_ACQUIRE( &rt_g.res_syscall );
d277 1
a277 1
		RES_RELEASE( &rt_g.res_syscall );
@


11.2
log
@Added a stub for application_init()
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 11.1 1995/01/04 10:01:33 mike Rel4_4 pjt $ (BRL)";
d58 1
a58 1
struct structparse view_parse[] = {
@


11.1
log
@Release_4.4
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 10.2 94/08/11 02:48:04 gdurf Exp $ (BRL)";
d286 2
@


10.2
log
@Added include of conf.h
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 10.1 1991/10/12 06:42:26 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 1.8 91/09/25 02:42:22 butler Exp $ (BRL)";
d30 2
@


1.8
log
@fixed assignment that was trying to use "=="
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 1.7 91/07/06 00:35:34 mike Exp Locker: butler $ (BRL)";
@


1.7
log
@ANSI structure initialization
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 1.6 91/07/02 22:21:56 butler Exp $ (BRL)";
d235 1
a235 1
		if( fvalue > 1.0 ) fvalue == 1.0;
@


1.6
log
@cast return value of rt_malloc to appropriate data type for assignment.
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /n/wolf/m/cad/rt/RCS/viewxray.c,v 1.5 91/02/20 00:51:36 mike Exp $ (BRL)";
d57 1
a57 1
	"",	0, (char *)0,	0,	FUNC_NULL
@


1.5
log
@Added new view-module interface called view_setup() which is used
for initializing material properties, lights, etc.
It compliments view_cleanup(), and finally removed knowledge of
the view.c materials (and all the shaders) from the RT "top half".
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 1.4 91/01/05 03:09:30 mike Exp $ (BRL)";
d108 2
a109 1
		scanbuf = rt_malloc( width*pixsize, "scanline buffer" );
@


1.4
log
@Converted to new format for fmt entry in structparse
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 1.3 90/12/12 16:35:23 butler Exp $ (BRL)";
d166 1
d168 1
a168 1
void view_cleanup() {}
@


1.3
log
@modified to reflect changes in structparse format
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 1.2 90/12/11 02:07:44 phil Exp $ (BRL)";
d57 1
a57 1
	(char *)0, 0, (char *)0,	0,	FUNC_NULL
@


1.2
log
@Fixed up.  Still to do: output buffer management so it can run in
parallel, buffer floating point output, handle material properties.
@
text
@d28 1
a28 1
static char RCSviewxray[] = "@@(#)$Header: /m/cad/rt/RCS/viewxray.c,v 9.2 90/11/14 15:43:42 mike Exp $ (BRL)";
d57 1
a57 1
	(char *)0,(char *)0,	0,			FUNC_NULL
@


1.1
log
@Old viewgrid module
@
text
@d2 1
a2 1
 *			V I E W G R I D . C
d4 22
a25 1
 *  Ray Tracing program RTGRID bottom half.
d27 3
d35 2
a36 2
#include "../rt/rdebug.h"
#include <brlcad/fb.h>
d38 3
a42 1
extern	mat_t	view2model;
d45 2
a46 1
extern	double	AmbientIntensity;	/* XXX - temp hack for max ref! */
d48 3
a50 5
/* firing grid model */
extern	point_t	viewbase_model;		/* lower_left of viewing plane */
extern	vect_t	dx_model;
extern	vect_t	dy_model;
extern	point_t	eye_model;		/* ray origin for perspective */
d52 2
a53 2
extern	int	width, height;
extern	double	azimuth, elevation;
d55 4
a58 3
static	unsigned char scanbuf[1024*3];	/* CRAY hack */
static	int	gridline[1024];
static	double	volume;
a59 4
/* Pacify RT */
mlib_setup() { return(1); }
mlib_free() {}

d61 1
a61 1
Usage: rtgrid [options] model.g objects... >stuff\n\
d67 2
a68 1
 -o file.rad	Output file name, else stdout\n\
d70 2
a71 4
 -l 0		line buffered B&W X-rays (default)\n\
 -l 1		Uniform grid output (LOTS of data!)\n\
 -l 2		Floating point X-rays\n\
 -l ?		Center of Mass, Moments of Inertia?\n\
d75 2
a76 3
#define	LBWXRAY	0
#define	LCUBES	1
#define	LFXRAY	2
d82 1
d86 1
d88 33
a120 4
	if( lightmodel == LBWXRAY )
		return(1);		/* we need a framebuffer */
	else
		return(0);		/* no framebuffer needed */
a122 3
static int gridhit();
static int gridmiss();

d124 2
a125 1
view_2init( ap )
d127 1
d129 9
a137 6
#ifdef save_model_rpp
	struct rt_i *rtip = ap.a_rt_i;
	if( lightmodel == LGRID ) {
		rtip->mdl_min[X], rtip->mdl_max[X], etc.
	}
#endif
d139 2
a140 5
	rt_log( "Cube size: %f x %f x ? mm\n",
		viewsize/width, viewsize/height );

	ap->a_hit = gridhit;
	ap->a_miss = gridmiss;
d145 3
a147 1
view_pixel()
a148 2
	if( lightmodel == LCUBES )
		fwrite( gridline, sizeof(*gridline), width, outfp );
d152 1
d156 7
a162 2
	if( lightmodel == LBWXRAY ) {
		fb_write( fbp, 0, ap->a_y, scanbuf, width );
d166 3
d170 1
d173 1
a173 4
	volume *= (viewsize/width)*(viewsize/height);
	volume *= 1.0e-9;
	rt_log( "Volume = %f m^3\n", volume );
	volume = 0;
d177 1
a177 1
gridhit( ap, PartHeadp )
a182 1
	static RGBpixel color = { 255, 255, 255 };
d190 1
a190 1
		rt_log("radhit:  no hit out front?\n");
d200 1
a200 1
		rt_log("radhit:  entry beyond infinity\n");
d206 1
a206 1
		rt_log("radhit:  GAK, eye inside solid (%g)\n", hitp->hit_dist );
a212 3
	if( lightmodel == LCUBES ) {
		cubeout( pp, PartHeadp );
	}
d226 2
a227 1
	case LFXRAY:
d229 1
d231 14
a244 8
	case LBWXRAY:
		fvalue = 255.0 * (1.0 - 1.4*totdist/viewsize);
		if( fvalue > 255 ) value == 255;
		else if( fvalue < 0 ) value = 0;
		else value = fvalue;
		scanbuf[ap->a_x*3+RED] = value;
		scanbuf[ap->a_x*3+GRN] = value;
		scanbuf[ap->a_x*3+BLU] = value;
a247 9
	/*
	 *  Mass = SUM density(x,y,z)
	 *
	 *  C.G. = SUM(x * density(x,y,z))/Mass,  etc.
	 *
	 *  M.I. = SUM(y^2+z^2 * density(x,y,z))/Mass,  etc.
	 */
	volume += totdist;

d252 1
a252 1
gridmiss( ap, PartHeadp )
d259 10
a268 2
	case LCUBES:
		cubeout( ap, ap );	/* XXX - HACK! */
d270 2
a271 6
	case LBWXRAY:
		scanbuf[ap->a_x*3+RED] = 0;
		scanbuf[ap->a_x*3+GRN] = 0;
		scanbuf[ap->a_x*3+BLU] = 0;
		break;
	case LFXRAY:
d273 1
d276 1
a276 1
		rt_log( "gridmiss: Bad lighting model %d\n", lightmodel );
a280 39
}

cubeout( pp, PartHeadp )
register struct partition *pp;
struct partition *PartHeadp;
{
	int	i;
	double	z1, z2;
	double	DELTA;

	DELTA = viewsize/width;

	for( i = 0; i < width; i++ ) {
		gridline[i] = 0;
	}

	if( pp == PartHeadp )
		return;

	for( i = 0; i < width; i++ ) {
		z1 = i * DELTA;		/* start of cell */
		z2 = (i+1) * DELTA;	/* end of cell */
checkagain:
		if( z2 < pp->pt_inhit->hit_dist ) {
			/* haven't gotten there yet */
			continue;
		} else if( z1 < pp->pt_outhit->hit_dist ) {
			/* inside region */
			gridline[i] = pp->pt_regionp->reg_regionid;
		} else {
			/* we are beyond the current partition */
			while( pp->pt_inhit->hit_dist < z1 ) {
				pp = pp->pt_forw;
				if( pp == PartHeadp )
					return;
			}
			goto checkagain;
		}
	}
@
