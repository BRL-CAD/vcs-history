head	11.15;
access;
symbols
	ansi-20040405-merged:11.11.2.2
	postmerge-20040405-ansi:11.13
	premerge-20040404-ansi:11.12
	postmerge-autoconf:11.12
	autoconf-freeze:11.11.10.2
	premerge-autoconf:11.12
	postmerge-20040315-windows:11.12
	premerge-20040315-windows:11.12
	windows-20040315-freeze:11.11.4.1
	autoconf-20031203:11.11
	autoconf-20031202:11.11
	autoconf-branch:11.11.0.10
	phong-branch:11.11.0.8
	photonmap-branch:11.11.0.6
	rel-6-1-DP:11.11
	windows-branch:11.11.0.4
	rel-6-0-2:11.9
	ansi-branch:11.11.0.2
	rel-6-0-1-branch:11.9.0.2
	hartley-6-0-post:11.10
	hartley-6-0-pre:11.9
	rel-6-0-1:11.9
	rel-6-0:11.9
	rel-5-4:11.6
	offsite-5-3-pre:11.9
	rel-5-3:11.6
	rel-5-2:11.6
	rel-5-1-branch:11.6.0.2
	rel-5-1:11.6
	rel-5-0:11.6
	rel-5-0-beta:11.5
	rel-4-5:11.3
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.15
date	2004.05.21.17.31.10;	author morrison;	state dead;
branches;
next	11.14;

11.14
date	2004.05.10.15.30.49;	author erikg;	state Exp;
branches;
next	11.13;

11.13
date	2004.04.05.05.45.59;	author morrison;	state Exp;
branches;
next	11.12;

11.12
date	2004.02.02.17.39.39;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2002.08.20.17.08.40;	author jra;	state Exp;
branches
	11.11.2.1
	11.11.4.1
	11.11.10.1;
next	11.10;

11.10
date	2002.08.15.20.55.50;	author hartley;	state Exp;
branches;
next	11.9;

11.9
date	2000.08.17.02.41.41;	author mike;	state Exp;
branches;
next	11.8;

11.8
date	2000.07.27.19.32.53;	author butler;	state Exp;
branches;
next	11.7;

11.7
date	2000.07.25.16.39.48;	author butler;	state Exp;
branches;
next	11.6;

11.6
date	99.07.02.22.19.46;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	99.05.28.01.19.30;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	98.09.22.00.20.29;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.08.30.00.08.21;	author butler;	state Exp;
branches;
next	11.2;

11.2
date	95.12.06.17.57.53;	author pjt;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.01.30;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.11.05.03.08.27;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.11.02.47.20;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.42.23;	author mike;	state Rel4_0;
branches;
next	1.5;

1.5
date	91.07.22.13.56.58;	author sue;	state Exp;
branches;
next	1.4;

1.4
date	91.07.06.00.35.32;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	91.06.05.15.07.49;	author sue;	state Exp;
branches;
next	1.2;

1.2
date	91.05.28.01.34.17;	author sue;	state Exp;
branches;
next	1.1;

1.1
date	91.05.28.01.07.00;	author sue;	state Exp;
branches;
next	;

11.11.2.1
date	2002.09.19.18.02.17;	author morrison;	state Exp;
branches;
next	11.11.2.2;

11.11.2.2
date	2004.03.17.21.23.01;	author morrison;	state Exp;
branches;
next	;

11.11.4.1
date	2004.03.11.23.48.08;	author morrison;	state Exp;
branches;
next	;

11.11.10.1
date	2004.02.12.19.37.14;	author erikg;	state Exp;
branches;
next	11.11.10.2;

11.11.10.2
date	2004.03.15.14.08.08;	author erikg;	state Exp;
branches;
next	;


desc
@This program plots range data using LIBRT and LIBPLOT3.
It plots all hit-points on the model.
@


11.15
log
@moved to src/rt/
@
text
@/*
 *			V I E W R A N G E
 *
 *  RT-View-Module for visualizing range data.  The output is a
 *  UNIX-Plot file.  Direction vectors are preserved so that
 *  perspective is theoretically possible.
 *  The algorithm is based on plotting all the hit distances for all
 *  the pixels ray-traced.
 *
 *  Author -
 *	Susanne L. Muuss, J.D.
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1991-2004 by the United States Army.
 *	All rights reserved.
 */


#ifndef lint
static const char RCSrayrange[] = "@@(#)$Header: /n/xoff/cvs/brlcad/rt/viewrange.c,v 11.14 2004/05/10 15:30:49 erikg Exp $";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "./ext.h"
#include "rtprivate.h"
#include "plot3.h"

#define CELLNULL ( (struct cell *) 0)

struct cell {
	float	c_dist;			/* distance from emanation plane to in_hit */
	point_t	c_hit;			/* 3-space hit point of ray */
};

extern	int	width;			/* # of pixels in X; picture width */
extern int	npsw;			/* number of worker PSWs to run */
float		max_dist;
struct cell	*cellp;

int		use_air = 0;		/* Internal air recognition is off */

int		using_mlib = 0;		/* Material routines NOT used */

/* Viewing module specific "set" variables */
struct bu_structparse view_parse[] = {
	{"",	0, (char *)0,	0,	BU_STRUCTPARSE_FUNC_NULL }
};


char usage[] = "\
Usage:  rtrange [options] model.g objects... >file.ray\n\
Options:\n\
 -s #		Grid size in pixels, default 512\n\
 -a Az		Azimuth in degrees	(conflicts with -M)\n\
 -e Elev	Elevation in degrees	(conflicts with -M)\n\
 -M		Read model2view matrix on stdin (conflicts with -a, -e)\n\
 -o model.g	Specify output file (default=stdout)\n\
 -U #		Set use_air boolean to # (default=1)\n\
 -x #		Set librt debug flags\n\
";

int	rayhit(register struct application *ap, struct partition *PartHeadp), raymiss(register struct application *ap);

/*
 *  			V I E W _ I N I T
 *
 *  This routine is called by main().  It initializes the entire run, i.e.,
 *  it does things such as opening files, etc., which must be done before
 *  any other computations take place.  It is called only once per run.
 *  Pointers to rayhit() and raymiss() are set up and are later called from
 *  do_run().
 */

int
view_init(register struct application *ap, char *file, char *obj, int minus_o)
{

	ap->a_hit = rayhit;
	ap->a_miss = raymiss;
	ap->a_onehit = 1;

	output_is_binary = 1;		/* output is binary */

	return(0);			/* No framebuffer needed */
}

/*
 *			V I E W _ 2 I N I T
 *
 *  A null-function.
 *  View_2init is called by do_frame(), which in turn is called by
 *  main() in rt.c.  This routine is called once per frame.  Static
 *  images only have one frame.  Animations have MANY frames, and bounding
 *  boxes, for example, need to be computed once per frame.
 *  Never preclude a new and nifty animation: rule: if it's a variable, it can
 *  change from frame to frame ( frame/picture width; angle between surface
 *  normals triggering shading.... etc).
 */

void
view_2init(struct application *ap)
{
	if( outfp == NULL )
		rt_bomb("outfp is NULL\n");

	/*
	 *  For now, RTRANGE does not operate in parallel, while ray-tracing.
	 *  However, not dropping out of parallel mode until here permits
	 *  tree walking and database prepping to still be done in parallel.
	 */
	if( npsw >= 1 )  {
		bu_log("Note: changing from %d cpus to 1 cpu\n", npsw );
		npsw = 1;		/* Disable parallel processing */
	}


	/* malloc() a buffer that has room for as many struct cell 's
	 * as the incoming file is wide (width).
	 * Rather than using malloc(), though, bu_malloc() is used.  This
	 * has the advantage of inbuild error-checking and automatic aborting
	 * if there is no memory.  Also, bu_malloc() takes a string as its
	 * final parameter: this tells the user exactly where memory ran out.
	 */


	cellp = (struct cell *)bu_malloc(sizeof(struct cell) * width,
		"cell buffer" );


	/* Obtain the maximun distance within the model to use as the
	 * background distance.  Also get the coordinates of the model's
	 * bounding box and feed them to 
	 * pdv_3space.  This will allow the image to appear in the plot
	 * starting with the same size as the model.
	 */

	pdv_3space(outfp, ap->a_rt_i->rti_pmin, ap->a_rt_i->rti_pmax);

	/* Find the max dist fron emantion plane to end of model
	 * space.  This can be twice the radius of the bounding
	 * sphere.
	 */

	max_dist = 2 * (ap->a_rt_i->rti_radius);
}


/*
 *			R A Y M I S S
 *
 *  This function is called by rt_shootray(), which is called by
 *  do_frame(). Records coordinates where a miss is detected.
 */

int
raymiss(register struct application *ap)
{

	struct	cell	*posp;		/* store the current cell position */

	/* Getting defensive.... just in case. */
	if(ap->a_x > width)  {
		rt_bomb("raymiss: pixels exceed width\n");
	}

	posp = &(cellp[ap->a_x]);

	/* Find the hit point for the miss. */

	VJOIN1(posp->c_hit, ap->a_ray.r_pt, max_dist, ap->a_ray.r_dir);
	posp->c_dist = max_dist;

	return(0);
}

/*
 *			V I E W _ P I X E L
 *
 *  This routine is called from do_run(), and in this case does nothing.
 */

void
view_pixel(void)
{
	return;
}

void view_setup(void) {}
void view_cleanup(void) {}


/*
 *			R A Y H I T
 *
 *  Rayhit() is called by rt_shootray() when a hit is detected.  It
 *  computes the hit distance, the distance traveled by the
 *  ray, and the direction vector.
 *  
 */

int
rayhit(struct application *ap, register struct partition *PartHeadp)
{
	register struct partition *pp = PartHeadp->pt_forw;
	struct	cell	*posp;		/* stores current cell position */


	if( pp == PartHeadp )
		return(0);		/* nothing was actually hit?? */


	/* Getting defensive.... just in case. */
	if(ap->a_x > width)  {
		rt_bomb("rayhit: pixels exceed width\n");
	}

	posp = &(cellp[ap->a_x]);

	/* Calculate the hit distance and the direction vector.  This is done
	 * by VJOIN1(hitp->hit_point, rp->r_pt, hitp->hit_dist, rp->r_dir).
	 */

	VJOIN1(pp->pt_inhit->hit_point, ap->a_ray.r_pt,
		pp->pt_inhit->hit_dist, ap->a_ray.r_dir);

	/* Now store the distance and the direction vector as appropriate.
	 * Output the ray data: screen plane (pixel) coordinates
	 * for x and y positions of a ray, region_id, and hit_distance.
	 * The x and y positions are represented by ap->a_x and ap->a_y.
	 *
	 *  Assume all rays are parallel.
	 */

	posp->c_dist = pp->pt_inhit->hit_dist;
	VMOVE(posp->c_hit, pp->pt_inhit->hit_point);

	return(0);
}

/*
 *			V I E W _ E O L
 *
 *  View_eol() is called by rt_shootray() in do_run().
 *  This routine is called by worker.c whenever there is a full scanline.
 *  worker.c figures out what is a full scanline.  Whenever there
 *  is a full buffer in memory, the hit distances ar plotted.
 */

void	view_eol(struct application *ap)
{
	struct cell	*posp;
	int		i;
	int		cont;		/* continue flag */

	posp = &(cellp[0]);
	cont = 0;

	/* Plot the starting point and set cont to 0.  Then
	 * march along the entire array and continue to plot the
	 * hit points based on their distance from the emanation
	 * plane. When consecutive hit-points with identical distances
	 * are found, cont is set to one so that the entire sequence
	 * of like-distanced hit-points can be plotted together.
	 */

	pdv_3move( outfp, posp->c_hit );

	for( i = 0; i < width-1; i++, posp++ )  {
		if( posp->c_dist == (posp+1)->c_dist )  {
			cont = 1;
			continue;
		} else  {
			if(cont)  {
				pdv_3cont(outfp, posp->c_hit);
				cont = 0;
			}
			pdv_3cont(outfp, (posp+1)->c_hit);
		}
	}

	/* Catch the boundary condition if the last couple of cells
	 * heve the same distance.
	 */

	pdv_3cont(outfp, posp->c_hit);
}


/*
 *			V I E W _ E N D
 *
 *  View_end() is called by rt_shootray in do_run().
 */

void
view_end(struct application *ap)
{

	fflush(outfp);
}



void application_init (void) {}
@


11.14
log
@change conf.h to a wrapped config.h
@
text
@d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header: /cvs/brlcad/rt/viewrange.c,v 11.13 2004/04/05 05:45:59 morrison Exp $";
@


11.13
log
@merge of ansi-6-0-branch into head
@
text
@d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header$";
d28 5
a32 1
#include "conf.h"
@


11.12
log
@update copyright to include span through 2003
@
text
@d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.11 2002/08/20 17:08:40 jra Exp $";
d74 1
a74 1
int	rayhit(), raymiss();
d87 1
a87 3
view_init( ap, file, obj, minus_o )
register struct application *ap;
char *file, *obj;
d113 1
a113 2
view_2init( ap )
struct application	*ap;
d168 1
a168 2
raymiss( ap )
register struct application	*ap;
d195 1
a195 1
view_pixel()
d200 2
a201 2
void view_setup() {}
void view_cleanup() {}
d214 1
a214 3
rayhit( ap, PartHeadp )
struct application *ap;
register struct partition *PartHeadp;
d261 1
a261 3
void	view_eol(ap)
struct application *ap;

d308 1
a308 2
view_end(ap)
struct application *ap;
d316 1
a316 1
void application_init () {}
@


11.11
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1991 by the United States Army.
d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.9 2000/08/17 02:41:41 mike Exp $";
@


11.11.4.1
log
@sync to HEAD...
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/rt/viewrange.c,v 11.12 2004/02/02 17:39:39 morrison Exp $";
@


11.11.10.1
log
@merge from HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.12 2004/02/02 17:39:39 morrison Exp $";
@


11.11.10.2
log
@merge from head
@
text
@d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.11.10.1 2004/02/12 19:37:14 erikg Exp $";
@


11.11.2.1
log
@Initial ANSIfication
@
text
@d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.11 2002/08/20 17:08:40 jra Exp $";
d74 1
a74 1
int	rayhit(register struct application *ap, struct partition *PartHeadp), raymiss(register struct application *ap);
d87 3
a89 1
view_init(register struct application *ap, char *file, char *obj, int minus_o)
d115 2
a116 1
view_2init(struct application *ap)
d171 2
a172 1
raymiss(register struct application *ap)
d199 1
a199 1
view_pixel(void)
d204 2
a205 2
void view_setup(void) {}
void view_cleanup(void) {}
d218 3
a220 1
rayhit(struct application *ap, register struct partition *PartHeadp)
d267 3
a269 1
void	view_eol(struct application *ap)
d316 2
a317 1
view_end(struct application *ap)
d325 1
a325 1
void application_init (void) {}
@


11.11.2.2
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header$";
@


11.10
log
@Converted from K&R to ANSI C - RFH
@
text
@d74 1
a74 1
int	rayhit(register struct application *ap, struct partition *PartHeadp), raymiss(register struct application *ap);
d87 3
a89 1
view_init(register struct application *ap, char *file, char *obj, int minus_o)
d115 2
a116 1
view_2init(struct application *ap)
d171 2
a172 1
raymiss(register struct application *ap)
d199 1
a199 1
view_pixel(void)
d204 2
a205 2
void view_setup(void) {}
void view_cleanup(void) {}
d218 3
a220 1
rayhit(struct application *ap, register struct partition *PartHeadp)
d267 3
a269 1
void	view_eol(struct application *ap)
d316 2
a317 1
view_end(struct application *ap)
d325 1
a325 1
void application_init (void) {}
@


11.9
log
@
Added "const" to RCSid, to quiet Gnu C compilers.
@
text
@d25 1
a25 1
static const char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.8 2000/07/27 19:32:53 butler Exp $";
d74 1
a74 1
int	rayhit(), raymiss();
d87 1
a87 3
view_init( ap, file, obj, minus_o )
register struct application *ap;
char *file, *obj;
d113 1
a113 2
view_2init( ap )
struct application	*ap;
d168 1
a168 2
raymiss( ap )
register struct application	*ap;
d195 1
a195 1
view_pixel()
d200 2
a201 2
void view_setup() {}
void view_cleanup() {}
d214 1
a214 3
rayhit( ap, PartHeadp )
struct application *ap;
register struct partition *PartHeadp;
d261 1
a261 3
void	view_eol(ap)
struct application *ap;

d308 1
a308 2
view_end(ap)
struct application *ap;
d316 1
a316 1
void application_init () {}
@


11.8
log
@Added -Q flag to rt, misc compilation warning fixes
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.7 2000/07/25 16:39:48 butler Exp $";
@


11.7
log
@Many patches for warning-free compilation on Linux.
Moved rdebug.h to h/rtprivate.h
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.6 1999/07/02 22:19:46 mike Exp $";
d38 1
@


11.6
log
@
Removed dependence on compat4.h
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.5 1999/05/28 01:19:30 mike Exp $";
d37 1
a37 1
#include "./rdebug.h"
@


11.5
log
@
sed4
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.4 1998/09/22 00:20:29 mike Exp $";
d57 1
a57 1
	{"",	0, (char *)0,	0,	FUNC_NULL }
@


11.4
log
@Doesn't need material.h
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrange.c,v 11.3 1996/08/30 00:08:21 butler Exp $";
d126 1
a126 1
		rt_log("Note: changing from %d cpus to 1 cpu\n", npsw );
d133 1
a133 1
	 * Rather than using malloc(), though, rt_malloc() is used.  This
d135 1
a135 1
	 * if there is no memory.  Also, rt_malloc() takes a string as its
d140 1
a140 1
	cellp = (struct cell *)rt_malloc(sizeof(struct cell) * width,
@


11.3
log
@structparse moved to libbu
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 11.2 1995/12/06 17:57:53 pjt Exp butler $";
a35 1
#include "./material.h"
d37 1
a37 1
#include "rdebug.h"
@


11.2
log
@Added a stub for application_init()
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 11.1 1995/01/04 10:01:30 mike Rel4_4 pjt $";
d57 1
a57 1
struct structparse view_parse[] = {
@


11.1
log
@Release_4.4
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 10.3 94/11/05 03:08:27 mike Exp $";
d324 2
@


10.3
log
@Irix 6
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 10.2 94/08/11 02:47:20 gdurf Exp Locker: mike $";
@


10.2
log
@Added include of conf.h
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 10.1 1991/10/12 06:42:23 mike Rel4_0 gdurf $";
a223 1
	fastf_t		dist;   	/* ray distance */
@


10.1
log
@Release_4.0
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 1.5 91/07/22 13:56:58 sue Exp $";
d27 2
@


1.5
log
@Changed some comments only.
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 1.4 91/07/06 00:35:32 mike Exp $";
@


1.4
log
@ANSI structure initialization
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 1.3 91/06/05 15:07:49 sue Exp $";
d120 1
a120 1
	 *  For now, RTHIDE does not operate in parallel, while ray-tracing.
d135 1
a135 1
	 * final parameter: this tells the usr exactly where memory ran out.
@


1.3
log
@Removed the -A option from the usage message --- it does not apply to viewrange.c
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: /m/cad/rt/RCS/viewrange.c,v 1.2 91/05/28 01:34:17 sue Exp $";
d56 1
a56 1
	"",	0, (char *)0,	0,	FUNC_NULL
@


1.2
log
@Added a continue flag so that less vectors will be plotted
@
text
@d25 1
a25 1
static char RCSrayrange[] = "@@(#)$Header: $";
a63 1
 -A angle	Angle between surface normals (default=5degrees)\n\
@


1.1
log
@Initial revision
@
text
@d273 1
d276 1
d278 1
a278 2
	/* Use an implicite state machine to facilitate this: make
	 * the starting point and move to it.  Having plotted it,
d280 4
a283 3
	 * distances.  Since all distances will be plotted,
	 * this is a viable approach.  Just the
	 * hit-points are plotted.
d289 2
a290 2
#ifdef
		if( posp->c_dist == (posp+1)->c_dist )
d292 6
a297 5
		else if( posp->c_dist != (posp+1)->c_dist )  {
			/* Make an ending point, plot it, and make the
			 * the stopping point the new stating point.
			 */
			pdv_3cont( outfp, (posp+1)->c_hit );
a298 2
#endif
		pdv_3cont( outfp, posp->c_hit );
d300 1
d304 1
@
