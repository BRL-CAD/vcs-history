head	1.14;
access;
symbols
	rel-4-5:1.12
	ctj-4-5-post:1.11
	ctj-4-5-pre:1.11;
locks; strict;
comment	@ * @;


1.14
date	98.09.22.01.43.11;	author mike;	state dead;
branches;
next	1.13;

1.13
date	98.06.30.22.54.19;	author mike;	state Exp;
branches;
next	1.12;

1.12
date	97.12.31.09.01.40;	author mike;	state Exp;
branches;
next	1.11;

1.11
date	97.07.02.21.15.29;	author butler;	state Exp;
branches;
next	1.10;

1.10
date	97.04.22.23.58.26;	author butler;	state Exp;
branches;
next	1.9;

1.9
date	97.03.04.08.20.30;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	96.08.31.08.46.01;	author butler;	state Exp;
branches;
next	1.7;

1.7
date	96.08.31.08.29.28;	author butler;	state Exp;
branches;
next	1.6;

1.6
date	96.08.30.00.08.21;	author butler;	state Exp;
branches;
next	1.5;

1.5
date	96.05.07.19.26.36;	author jra;	state Exp;
branches;
next	1.4;

1.4
date	95.12.27.17.31.49;	author butler;	state Exp;
branches;
next	1.3;

1.3
date	95.10.20.04.43.53;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	95.09.21.00.34.40;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	95.09.20.16.39.37;	author butler;	state Exp;
branches;
next	;


desc
@solid clouds from noise
@


1.14
log
@Moved sh_*.c shaders from rt/ to liboptical/ directory.
Moved and split rt/material.h into h/shadefuncs.h and h/shadework.h
Changed calling sequence of mlib_setup() to get shader list head explicitly.
Initialization of shader library is now via optical_shader_init().

Note that the "proper" location of shade.c, material.c, and refract.c
(presently in the rt/ directory) are a bit muddled, as they will be
shared with libmultispectral/ shader functions, but aren't quite
wholesome and pure yet.  To minimize impact to Lee's ongoing shader
developments, they haven't been changed.
@
text
@/*
 *	S H _ S C L O U D . C
 *
 *	A 3D "solid" cloud shader
 */
#include "conf.h"

#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "./material.h"
#include "./light.h"
#include "./mathtab.h"
#include "./rdebug.h"
#define M_PI            3.14159265358979323846

#define CLAMP(_x,_a,_b)	(_x < _a ? _a : (_x > _b ? _b : _x))
#define FLOOR(x)	(  (int)(x) - (  (x) < 0 && (x) != (int)(x)  )  )
#define CEIL(x)		(  (int)(x) + (  (x) > 0 && (x) != (int)(x)  )  )

struct scloud_specific {
	double	lacunarity;
	double	h_val;
	double	octaves;
	double	scale;	/* scale coordinate space */
	vect_t	delta;	/* xlatd in noise space (where interesting noise is)*/
	double	max_d_p_mm;	/* maximum density per millimeter */
	mat_t	xform;
};

static struct scloud_specific scloud_defaults = {
	2.1753974,	/* lacunarity */
	1.0,		/* h_val */
	4.0,		/* octaves */
	1.0,		/* scale */
	{ 0.0, 0.0, 0.0 },	/* delta */
	0.01			/* max_d_p_mm */
	};

#define SHDR_NULL	((struct scloud_specific *)0)
#define SHDR_O(m)	offsetof(struct scloud_specific, m)
#define SHDR_AO(m)	offsetofarray(struct scloud_specific, m)

struct bu_structparse scloud_pr[] = {
	{"%f",	1, "lacunarity",	SHDR_O(lacunarity),	FUNC_NULL },
	{"%f",	1, "H", 		SHDR_O(h_val),	FUNC_NULL },
	{"%f",	1, "octaves", 		SHDR_O(octaves),	FUNC_NULL },
	{"%f",  1, "scale",		SHDR_O(scale),	FUNC_NULL },
	{"%f",  3, "delta",		SHDR_AO(delta),	FUNC_NULL },
	{"",	0, (char *)0,		0,			FUNC_NULL }
};
struct bu_structparse scloud_parse[] = {
	{"%f",	1, "lacunarity",	SHDR_O(lacunarity),	FUNC_NULL },
	{"%f",	1, "H", 		SHDR_O(h_val),	FUNC_NULL },
	{"%f",	1, "octaves", 		SHDR_O(octaves),	FUNC_NULL },
	{"%f",  1, "scale",		SHDR_O(scale),	FUNC_NULL },
	{"%f",  3, "delta",		SHDR_AO(delta),	FUNC_NULL },
	{"%f",	1, "l",			SHDR_O(lacunarity),	FUNC_NULL },
	{"%f",	1, "m", 		SHDR_O(max_d_p_mm),	FUNC_NULL },
	{"%f",	1, "o", 		SHDR_O(octaves),	FUNC_NULL },
	{"%f",  1, "s",			SHDR_O(scale),	FUNC_NULL },
	{"%f",  3, "d",			SHDR_AO(delta),	FUNC_NULL },
	{"",	0, (char *)0,		0,			FUNC_NULL }
};

HIDDEN int	scloud_setup(), scloud_render(), tsplat_render();
HIDDEN void	scloud_print(), scloud_free();

struct mfuncs scloud_mfuncs[] = {
	{MF_MAGIC,	"scloud",	0,	MFI_HIT, MFF_PROC,
	scloud_setup,	scloud_render,	scloud_print,	scloud_free },

	{MF_MAGIC,	"tsplat",	0,	MFI_HIT, MFF_PROC,
	scloud_setup,	tsplat_render,	scloud_print,	scloud_free },

	{0,		(char *)0,	0,		0, 0,
	0,		0,		0,		0 }
};



/*
 *	S C L O U D _ S E T U P
 */
HIDDEN int
scloud_setup( rp, matparm, dpp, mfp, rtip )
register struct region *rp;
struct rt_vls	*matparm;
char	**dpp;	/* pointer to reg_udata in *rp */
struct mfuncs		*mfp;
struct rt_i		*rtip;
{
	register struct scloud_specific *scloud;
	struct db_full_path full_path;
	mat_t	region_to_model;
	mat_t	model_to_region;
	mat_t	tmp;

	RT_VLS_CHECK( matparm );
	GETSTRUCT( scloud, scloud_specific );
	*dpp = (char *)scloud;

	memcpy(scloud, &scloud_defaults, sizeof(struct scloud_specific) );
	if( rdebug&RDEBUG_SHADE)
		rt_log("scloud_setup\n");

	if( bu_struct_parse( matparm, scloud_parse, (char *)scloud ) < 0 )
		return(-1);

	if( rdebug&RDEBUG_SHADE)
		(void)bu_struct_print( rp->reg_name, scloud_parse, (char *)scloud );

	/* get transformation between world and "region" coordinates */
	if (db_string_to_path( &full_path, rtip->rti_dbip, rp->reg_name) ) {
		/* bad thing */
		rt_bomb("db_string_to_path() error");
	}
	if(! db_path_to_mat(rtip->rti_dbip, &full_path, region_to_model, 0)) {
		/* bad thing */
		rt_bomb("db_path_to_mat() error");
	}

	/* get matrix to map points from model (world) space
	 * to "region" space
	 */
	mat_inv(model_to_region, region_to_model);


	/* add the noise-space scaling */
	mat_idn(tmp);
	tmp[0] = 1. / scloud->scale;
	tmp[5] = 1. / scloud->scale;
	tmp[10] =  1. / scloud->scale;

	mat_mul(scloud->xform, tmp, model_to_region);

	/* add the translation within noise space */
	mat_idn(tmp);
	tmp[MDX] = scloud->delta[0];
	tmp[MDY] = scloud->delta[1];
	tmp[MDZ] = scloud->delta[2];
	mat_mul2(tmp, scloud->xform);

	return(1);
}

/*
 *	S C L O U D _ P R I N T
 */
HIDDEN void
scloud_print( rp, dp )
register struct region *rp;
char	*dp;
{
	(void)bu_struct_print( rp->reg_name, scloud_pr, (char *)dp );
}

/*
 *	S C L O U D _ F R E E
 */
HIDDEN void
scloud_free( cp )
char *cp;
{
	rt_free( cp, "scloud_specific" );
}



/*
 *	T C L O U D _ R E N D E R
 *
 *	Sort of a surface spot transparency shader.  Picks transparency
 *	based upon noise value of surface spot.
 */
int
tsplat_render( ap, pp, swp, dp )
struct application	*ap;
struct partition	*pp;
struct shadework	*swp;
char	*dp;
{
	register struct scloud_specific *scloud_sp =
		(struct scloud_specific *)dp;
	point_t in_pt;	/* point where ray enters scloud solid */
	double  val;

	RT_CHECK_PT(pp);
	RT_AP_CHECK(ap);
	RT_CK_REGION(pp->pt_regionp);


	/* just shade the surface with a transparency */
	MAT4X3PNT(in_pt, scloud_sp->xform, swp->sw_hit.hit_point);
	val = noise_fbm(in_pt, scloud_sp->h_val,
			scloud_sp->lacunarity, scloud_sp->octaves );
	swp->sw_transmit = 1.0 - CLAMP(val, 0.0, 1.0);


	if( swp->sw_reflect > 0 || swp->sw_transmit > 0 )
		(void)rr_render( ap, pp, swp );

	return 1;
}



/*
 *	S C L O U D _ R E N D E R
 */
int
scloud_render( ap, pp, swp, dp )
struct application	*ap;
struct partition	*pp;
struct shadework	*swp;
char	*dp;
{
	register struct scloud_specific *scloud_sp =
		(struct scloud_specific *)dp;
	point_t in_pt;	/* point where ray enters scloud solid */
	point_t out_pt; /* point where ray leaves scloud solid */
	point_t pt;
	vect_t	v_cloud;/* vector representing ray/solid intersection */
	double	thickness; /* magnitude of v_cloud (distance through solid) */
	int	steps;	   /* # of samples along ray/solid intersection */
	double	step_delta;/* distance between sample points, texture space */
	fastf_t	model_step; /* distance between sample points, model space */
	int	i;
	double  val;
	double	trans;
	double	sum;
	point_t	incident_light;

	RT_CHECK_PT(pp);
	RT_AP_CHECK(ap);
	RT_CK_REGION(pp->pt_regionp);

	/* compute the ray/solid in and out points,
	 * and transform them into "shader space" coordinates 
	 */
	VJOIN1(pt, ap->a_ray.r_pt, pp->pt_inhit->hit_dist, ap->a_ray.r_dir);
	MAT4X3PNT(in_pt, scloud_sp->xform, pt);

	VJOIN1(pt, ap->a_ray.r_pt, pp->pt_outhit->hit_dist, ap->a_ray.r_dir);
	MAT4X3PNT(out_pt, scloud_sp->xform, pt);


	/* get ray/solid intersection vector (in noise space)
	 * and compute thickness of solid (in noise space) along ray path
	 */
	VSUB2(v_cloud, out_pt, in_pt);
	thickness = MAGNITUDE(v_cloud);

	/* The noise field used by the noise_turb and noise_fbm routines
	 * has a maximum frequency of about 1 cycle per integer step in
	 * noise space.  Each octave increases this frequency by the
	 * "lacunarity" factor.  To sample this space adequately we need 
	 *
	 *	4 samples per integer step for the first octave,
	 *	lacunarity * 4 samples/step for the second octave,
	 * 	lacunarity^2 * 4 samples/step for the third octave,
	 * 	lacunarity^3 * 4 samples/step for the forth octave,
	 *
	 * so for a computation with 4 octaves we need something on the
	 * order of lacunarity^3 * 4 samples per integer step in noise space.
	 */

	steps = pow(scloud_sp->lacunarity, scloud_sp->octaves-1) * 4;
	step_delta = thickness / (double)steps;
	model_step = (pp->pt_outhit->hit_dist - pp->pt_inhit->hit_dist) /
		(double)steps;

	if( rdebug&RDEBUG_SHADE)
		rt_log("steps=%d  delta=%g  thickness=%g\n",
			steps, step_delta, thickness);

	VUNITIZE(v_cloud);
	VMOVE(pt, in_pt);
	trans = 1.0;
	for (i=0 ; i < steps ; i++ ) {
		/* compute the next point in the cloud space */
		VJOIN1(pt, in_pt, i*step_delta, v_cloud);

		val = noise_turb(pt, scloud_sp->h_val, 
			scloud_sp->lacunarity, scloud_sp->octaves );

		val -= .5;
		val = CLAMP(val, 0.0, 1.0);
		val *= 2.0;

		val = exp( - val * scloud_sp->max_d_p_mm * step_delta);
		trans *= val;
	}

	/* scloud is basically a white object with partial transparency */
	swp->sw_transmit = trans;
	if( swp->sw_xmitonly )  return 1;


	/*
	 *  At the point of maximum opacity, check light visibility
	 *  for light color and cloud shadowing.
	 *  OOPS:  Don't use an interior point, or light_visibility()
	 *  will see an attenuated light source.
	 */
	swp->sw_hit.hit_dist = pp->pt_inhit->hit_dist;
	VJOIN1(swp->sw_hit.hit_point, ap->a_ray.r_pt, swp->sw_hit.hit_dist,
 		ap->a_ray.r_dir);
	VREVERSE( swp->sw_hit.hit_normal, ap->a_ray.r_dir );
	swp->sw_inputs |= MFI_HIT | MFI_NORMAL;
	light_visibility( ap, swp, swp->sw_inputs );
	VSETALL(incident_light, 0 );
	for( i=ap->a_rt_i->rti_nlights-1; i>=0; i-- )  {
		struct light_specific	*lp;
		if( (lp = (struct light_specific *)swp->sw_visible[i]) == LIGHT_NULL )
			continue;
		/* XXX don't have a macro for this */
		incident_light[0] += swp->sw_intensity[3*i+0] * lp->lt_color[0];
		incident_light[1] += swp->sw_intensity[3*i+1] * lp->lt_color[1];
		incident_light[2] += swp->sw_intensity[3*i+2] * lp->lt_color[2];
	}
	VELMUL( swp->sw_color, swp->sw_color, incident_light );


	if( rdebug&RDEBUG_SHADE ) {
		pr_shadework( "scloud: after light vis, before rr_render", swp);
	}

	if( swp->sw_reflect > 0 || swp->sw_transmit > 0 )
		(void)rr_render( ap, pp, swp );

	return(1);
}




@


1.13
log
@Can't make "struct mfuncs" a CONST, because the forward link needs
to be filled in at runtime, and some compilers put CONST data into
read-only pages (like FreeBSD).
@
text
@@


1.12
log
@Required magic number to be first in mfunc table,
consistent with all other BRL-CAD magic numbers.
Required magic number to be initialized at compile time.
Added code to check the magic numbers.
Made the xxx_mfunc arrays CONST, so they can't get trashed by
runtime runaway pointer problems.
@
text
@d71 1
a71 1
CONST struct mfuncs scloud_mfuncs[] = {
@


1.11
log
@checkpoint
@
text
@d71 2
a72 2
struct mfuncs scloud_mfuncs[] = {
	{"scloud",	0,		0,	MFI_HIT, MFF_PROC,
d75 1
a75 1
	{"tsplat",	0,		0,	MFI_HIT, MFF_PROC,
d78 1
a78 1
	{(char *)0,	0,		0,		0, 0,
@


1.10
log
@made tsplat shader
@
text
@d68 1
a68 1
HIDDEN int	scloud_setup(), scloud_render();
d76 1
a76 1
	scloud_setup,	tcloud_render,	scloud_print,	scloud_free },
d179 1
a179 1
tcloud_render( ap, pp, swp, dp )
a234 4
#if SEEK_MINVAL
	double	minval = 1;
	int	min_i;
#endif
a281 4
#if SEEK_MINVAL
	minval = 1;
	min_i = 0;
#endif
a294 6
#if SEEK_MINVAL
		if( val < minval )  {
			minval = val;
			min_i = i;
		}
#endif
d301 1
a301 1
#if 1
a307 3
# if SEEK_MINVAL
	swp->sw_hit.hit_dist = pp->pt_inhit->hit_dist + min_i * model_step;
# else
a308 1
# endif
d325 2
a326 12
#else
	/*  Rather than assume the cloud is white, use the color of
	 *  the first light source.  This is a hack.
	 */
	{
		struct light_specific	*lp;
		if( BU_LIST_NON_EMPTY(&LightHead.l) )  {
			lp = BU_LIST_FIRST(light_specific, &LightHead.l);
			VELMUL( swp->sw_color, swp->sw_color, lp->lt_color );
		}
	}
#endif
@


1.9
log
@Added code to check clouds for light visibility & light color.
@
text
@d75 3
a111 2
	(void)bu_struct_print( rp->reg_name, scloud_pr, (char *)scloud );

d170 40
a243 14
#if 0
	/* just shade the surface with a transparency */
	MAT4X3PNT(in_pt, scloud_sp->xform, swp->sw_hit.hit_point);
	val = noise_fbm(in_pt, scloud_sp->h_val,
			scloud_sp->lacunarity, scloud_sp->octaves );
	swp->sw_transmit = 1.0 - CLAMP(val, 0.0, 1.0);

/* 	VSET(swp->sw_color, val, val, val); */

	if( swp->sw_reflect > 0 || swp->sw_transmit > 0 )
		(void)rr_render( ap, pp, swp );

	return 1;
#endif
a259 9
#if 0
	/* shade with a transparency proportional to the thickness */
	swp->sw_transmit = exp( - scloud_sp->max_d_p_mm * thickness );
	swp->sw_transmit = CLAMP(swp->sw_transmit, 0.0, 1.0);
	if( swp->sw_reflect > 0 || swp->sw_transmit > 0 )
		(void)rr_render( ap, pp, swp );
	return 1;
#endif

d279 4
a282 4
#ifdef LEELOG
	rt_log("steps=%d  delta=%g  thickness=%g\n",
		steps, step_delta, thickness);
#endif
d364 4
@


1.8
log
@bu_struct_print
@
text
@d14 1
d187 2
a188 1
	double	step_delta;/* distance between sample points */
d193 5
d258 2
d268 4
d283 8
a290 1
		trans *=  exp( - val * scloud_sp->max_d_p_mm * step_delta);
d292 2
a293 1
	
d295 45
@


1.7
log
@bu_struct_parse
@
text
@d108 1
a108 1
	(void)bu_structprint( rp->reg_name, scloud_pr, (char *)scloud );
d111 1
a111 1
		(void)bu_structprint( rp->reg_name, scloud_parse, (char *)scloud );
d155 1
a155 1
	(void)bu_structprint( rp->reg_name, scloud_pr, (char *)dp );
@


1.6
log
@structparse moved to libbu
@
text
@d105 1
a105 1
	if( bu_structparse( matparm, scloud_parse, (char *)scloud ) < 0 )
@


1.5
log
@Individual shaders now call rr_render() directly.
@
text
@d45 1
a45 1
struct structparse scloud_pr[] = {
d53 1
a53 1
struct structparse scloud_parse[] = {
d105 1
a105 1
	if( rt_structparse( matparm, scloud_parse, (char *)scloud ) < 0 )
d108 1
a108 1
	rt_structprint( rp->reg_name, scloud_pr, (char *)scloud );
d111 1
a111 1
		rt_structprint( rp->reg_name, scloud_parse, (char *)scloud );
d155 1
a155 1
	rt_structprint( rp->reg_name, scloud_pr, (char *)dp );
@


1.4
log
@restricted inputs to just "HIT", and added "MFF_PROC" to mfuncs declaration
@
text
@d204 4
d230 2
d274 3
@


1.3
log
@edited mfuncs table to account for new "mf_flags" element in struct mfuncs.
@
text
@d71 1
a71 1
	{"scloud",	0,		0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
@


1.2
log
@first passable "solid clouds"
@
text
@d26 1
a27 1
	point_t	scale;	/* scale coordinate space */
d36 1
a37 1
	{ 1.0, 1.0, 1.0 },	/* scale */
d49 1
a49 1
	{"%f",  3, "scale",		SHDR_AO(scale),	FUNC_NULL },
d57 1
a57 1
	{"%f",  3, "scale",		SHDR_AO(scale),	FUNC_NULL },
d62 1
a62 1
	{"%f",  3, "s",			SHDR_AO(scale),	FUNC_NULL },
d71 1
a71 1
	{"scloud",	0,		0,		MFI_NORMAL|MFI_HIT|MFI_UV,
d74 1
a74 1
	{(char *)0,	0,		0,		0,
d108 2
d131 3
a133 3
	tmp[0] = 1. / scloud->scale[0];
	tmp[5] = 1. / scloud->scale[1];
	tmp[10] =  1. / scloud->scale[2];
d206 5
a210 2
	VJOIN1(in_pt, ap->a_ray.r_pt, pp->pt_inhit->hit_dist, ap->a_ray.r_dir);
	VJOIN1(out_pt, ap->a_ray.r_pt, pp->pt_outhit->hit_dist, ap->a_ray.r_dir);
d212 2
a213 3
	/* transform points into "noise-space coordinates" */
	MAT4X3PNT(in_pt, scloud_sp->xform, in_pt);
	MAT4X3PNT(out_pt, scloud_sp->xform, out_pt);
d215 3
a217 2
	/* get ray/solid intersection vector and compute thickness of
	 * solid along ray path
d229 13
a241 2
	if (thickness < 3.0) steps = 3;
	else steps = (int)thickness;
d243 1
d246 4
@


1.1
log
@Initial revision
@
text
@d26 1
a26 2
	double	thresh;
	vect_t	delta;
d28 1
a35 1
	1.0,		/* threshold for opacity */
d38 1
a48 1
	{"%f",	1, "thresh",		SHDR_O(thresh),	FUNC_NULL },
a56 1
	{"%f",	1, "thresh",		SHDR_O(thresh),	FUNC_NULL },
d60 1
a61 1
	{"%f",	1, "t",			SHDR_O(thresh),	FUNC_NULL },
d178 7
a184 5
	point_t in_pt, out_pt, pt;
	vect_t	v_cloud;
	double	thickness;
	int	steps;
	double	step_delta;
d187 2
a188 1
	double	transmission;
d195 1
d197 1
a197 1
		val = noise_fbm(in_pt, scloud_sp->h_val, 
d199 3
a201 1
 	VSET(swp->sw_color, val, val, val);
d207 1
a207 1
	/* transform point into "noise-space coordinates" */
d211 3
d216 7
a222 1
	steps = (int)(thickness * 3.0);
d224 3
a229 1

d231 1
a231 1
	transmission = 1.0;
d236 1
a236 1
		val = noise_fbm(pt, scloud_sp->h_val, 
d239 3
a241 3
		val = (val+1.) * .5;

		if (val > scloud_sp->thresh) {
d243 1
a243 6
			transmission -= 1-val;
			if (transmission < 0.000001) {
				transmission = 0.;
				break;
			}
		}
d245 2
a246 6

	transmission = CLAMP(transmission, 0.0, 1.0);

	swp->sw_transmit = transmission;

/* 	VSET(swp->sw_color, transmission, transmission, transmission); */
@
