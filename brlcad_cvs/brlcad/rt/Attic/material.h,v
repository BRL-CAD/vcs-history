head	11.8;
access;
symbols
	rel-4-5:11.7
	ctj-4-5-post:11.5
	ctj-4-5-pre:11.5
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.8
date	98.09.22.01.43.10;	author mike;	state dead;
branches;
next	11.7;

11.7
date	97.12.31.09.20.43;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	97.12.31.09.01.40;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	96.06.24.21.03.58;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	95.10.20.04.49.43;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	95.08.19.05.03.32;	author butler;	state Exp;
branches;
next	11.2;

11.2
date	95.03.31.22.42.03;	author butler;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.00.42;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.41.47;	author mike;	state Rel4_0;
branches;
next	9.1;

9.1
date	89.05.19.05.58.58;	author mike;	state Rel3_5;
branches;
next	8.3;

8.3
date	89.04.28.04.03.01;	author phil;	state Exp;
branches;
next	8.2;

8.2
date	89.01.02.18.26.56;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.32.50;	author mike;	state Rel3_0;
branches;
next	7.6;

7.6
date	88.10.01.00.30.00;	author mike;	state Exp;
branches;
next	7.5;

7.5
date	88.09.17.06.48.55;	author mike;	state Exp;
branches;
next	7.4;

7.4
date	88.05.14.01.35.45;	author mike;	state Exp;
branches;
next	7.3;

7.3
date	88.01.26.05.24.46;	author phil;	state Exp;
branches;
next	7.2;

7.2
date	88.01.20.04.13.45;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.54.05;	author mike;	state Rel;
branches;
next	6.3;

6.3
date	87.10.15.16.58.52;	author mike;	state Exp;
branches;
next	6.2;

6.2
date	87.09.10.07.10.38;	author mike;	state Exp;
branches;
next	6.1;

6.1
date	87.07.11.07.58.34;	author mike;	state Rel;
branches;
next	5.3;

5.3
date	87.07.11.02.42.02;	author mike;	state Exp;
branches;
next	5.2;

5.2
date	87.06.26.05.53.35;	author mike;	state Exp;
branches;
next	5.1;

5.1
date	87.06.24.22.14.33;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.13.00.01.25;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.48.15;	author mike;	state Rel1;
branches;
next	1.3;

1.3
date	86.12.24.04.26.55;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.12.14.21.12.15;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.06.11.00.12.30;	author mike;	state Exp;
branches;
next	;


desc
@Definitions for processing material information
.,
@


11.8
log
@Moved sh_*.c shaders from rt/ to liboptical/ directory.
Moved and split rt/material.h into h/shadefuncs.h and h/shadework.h
Changed calling sequence of mlib_setup() to get shader list head explicitly.
Initialization of shader library is now via optical_shader_init().

Note that the "proper" location of shade.c, material.c, and refract.c
(presently in the rt/ directory) are a bit muddled, as they will be
shared with libmultispectral/ shader functions, but aren't quite
wholesome and pure yet.  To minimize impact to Lee's ongoing shader
developments, they haven't been changed.
@
text
@/*
 *			M A T E R I A L . H
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 *  $Header: /c/CVS/brlcad/rt/material.h,v 11.7 1997/12/31 09:20:43 mike Exp mike $
 */

/*
 *			M F U N C S
 *
 *  The interface to the various material property & texture routines.
 */
struct mfuncs {
	long		mf_magic;	/* To validate structure */
	char		*mf_name;	/* Keyword for material */
	struct mfuncs	*mf_forw;	/* Forward link */
	int		mf_inputs;	/* shadework inputs needed */
	int		mf_flags;	/* Flags describing shader */
	int		(*mf_setup)();	/* Routine for preparing */
	int		(*mf_render)();	/* Routine for rendering */
	void		(*mf_print)();	/* Routine for printing */
	void		(*mf_free)();	/* Routine for releasing storage */
};
#define MF_MAGIC	0x55968058
#define MF_NULL		((struct mfuncs *)0)
#define RT_CK_MF(_p)	BU_CKMAG(_p, MF_MAGIC, "mfuncs")

/*
 *  mf_inputs lists what optional shadework fields are needed.
 *  dist, point, color, & default(trans,reflect,ri) are always provided
 */
#define MFI_NORMAL	0x01		/* Need normal */
#define MFI_UV		0x02		/* Need uv */
#define MFI_LIGHT	0x04		/* Need light visibility */
#define MFI_HIT		0x08		/* Need just hit point */


/* mf_flags lists important details about individual shaders */
#define MFF_PROC	0x01		/* shader is procedural, computes tr/re/hits */

#define SW_NLIGHTS	16		/* Max # of light sources */

/*
 *			S H A D E W O R K
 */
struct shadework {
	fastf_t		sw_transmit;	/* 0.0 -> 1.0 */
	fastf_t		sw_reflect;	/* 0.0 -> 1.0 */
	fastf_t		sw_refrac_index;
	fastf_t		sw_extinction;	/* extinction coeff, mm^-1 */
	fastf_t		sw_color[3];	/* shaded color */
	fastf_t		sw_basecolor[3]; /* base color */
	struct hit	sw_hit;		/* ray hit (dist,point,normal) */
	struct uvcoord	sw_uv;
	fastf_t		sw_intensity[3*SW_NLIGHTS]; /* light intensities */
	fastf_t		sw_tolight[3*SW_NLIGHTS];   /* light directions */
	char		*sw_visible[SW_NLIGHTS]; /* visibility flags/ptrs */
	int		sw_xmitonly;	/* flag: need sw_transmit only */
	int		sw_inputs;	/* fields from mf_inputs actually filled */
	int		sw_frame;	/* # of current frame */
	fastf_t		sw_frametime;	/* frame time delta off 1st frame */
	fastf_t		sw_pixeltime;	/* pixel time delta off 1st pixel of 1st frame */
	struct seg	*sw_segs;	/* segs which made partition */
};

extern void pr_shadework();
@


11.7
log
@Oops, these days, magic numbers are supposed to be type "long",
and the m4i64 machines really do care about this!
@
text
@d9 1
a9 1
 *  $Header: /m/cad/rt/RCS/material.h,v 11.6 1997/12/31 09:01:40 mike Exp mike $
@


11.6
log
@Required magic number to be first in mfunc table,
consistent with all other BRL-CAD magic numbers.
Required magic number to be initialized at compile time.
Added code to check the magic numbers.
Made the xxx_mfunc arrays CONST, so they can't get trashed by
runtime runaway pointer problems.
@
text
@d9 1
a9 1
 *  $Header: /m/cad/rt/RCS/material.h,v 11.5 1996/06/24 21:03:58 butler Exp mike $
d18 1
a18 1
	int		mf_magic;	/* To validate structure */
@


11.5
log
@added sw_segs which indicates the segments which contributed to this
partition.  Useful for "non-solid" regions.
@
text
@d9 1
a9 1
 *  $Header: /m/cad/rt/RCS/material.h,v 11.4 1995/10/20 04:49:43 butler Exp butler $
d18 1
a19 1
	int		mf_magic;	/* To validate structure */
d30 1
@


11.4
log
@added mf_flags variable to struct mfuncs.
@
text
@d9 1
a9 1
 *  $Header: /m/cad/rt/RCS/material.h,v 11.3 1995/08/19 05:03:32 butler Exp butler $
d66 1
@


11.3
log
@added sw_frametime and sw_pixeltime to the shadework structure
@
text
@d9 1
a9 1
 *  $Header: /m/cad/rt/RCS/material.h,v 11.2 1995/03/31 22:42:03 butler Exp butler $
d22 1
d40 3
@


11.2
log
@comments on transmit/reflect bounds
@
text
@d9 1
a9 1
 *  $Header: /m/cad/rt/RCS/material.h,v 11.1 1995/01/04 10:00:42 mike Rel4_4 butler $
d59 3
@


11.1
log
@Release_4.4
@
text
@d9 1
a9 1
 *  $Header: /m/cad/rt/RCS/material.h,v 10.1 91/10/12 06:41:47 mike Rel4_0 $
d46 2
a47 2
	fastf_t		sw_transmit;
	fastf_t		sw_reflect;
@


10.1
log
@Release_4.0
@
text
@d9 1
a9 1
 *  $Header: material.h,v 9.1 89/05/19 05:58:58 mike Rel3_5 $
@


9.1
log
@Release_3.5
@
text
@d9 1
a9 1
 *  $Header: material.h,v 8.3 89/04/28 04:03:01 phil Exp $
@


8.3
log
@added pr_shadework()
@
text
@d9 1
a9 1
 *  $Header: material.h,v 8.3 89/04/28 03:59:42 phil Exp $
@


8.2
log
@local matparse moved to raytrace.h as structparse
@
text
@d9 1
a9 1
 *  $Header: raytrace.h,v 8.7 88/12/15 01:34:18 mike Locked $
d60 2
@


8.1
log
@Release_3.0
@
text
@d3 7
a10 24

#if defined(CRAY)
	/*
	 * CRAY machines have a problem taking the address of an arbitrary
	 * character within a structure.  int pointers have to be used.
	 * There is some matching hackery in the invididual tables.
	 */
	typedef int	*mp_off_ty;
#else
#	ifdef __STDC__
		typedef void	*mp_off_ty;
#	else
		typedef char	*mp_off_ty;
#	endif
#endif

/*
 *			M A T P A R S E
 */
struct matparse {
	char		*mp_name;
	mp_off_ty	mp_offset;
	char		*mp_fmt;
};
@


7.6
log
@Cray isn't quite all better yet!
@
text
@@


7.5
log
@Cray is starting to get better...
@
text
@d5 1
a5 1
#if 0
d7 1
a7 1
	 * CRAY used to have a problem taking the address of an arbitrary
@


7.4
log
@lint
@
text
@d5 7
a11 7
#ifdef cray
/*
 * Cray has a problem taking the address of an arbitrary character within
 * a structure.  int pointers have to be used instead.
 * There is some matching hackery in the invididual tables.
 */
typedef int	*mp_off_ty;
d13 5
a17 1
typedef char	*mp_off_ty;
@


7.3
log
@added extinction coefficient and tolight vector array
@
text
@d37 2
a38 2
	int		(*mf_print)();	/* Routine for printing */
	int		(*mf_free)();	/* Routine for releasing storage */
@


7.2
log
@Added sw_inputs
@
text
@d62 1
d68 1
@


7.1
log
@Release 2.3
@
text
@d69 1
@


6.3
log
@Added MFI_HIT, for handling just hit point.
@
text
@@


6.2
log
@Added light visibility information to shadework structure
For now, the maximum number of lights is SW_NLIGHTS.
Sorry, its not dynamic.
@
text
@d50 1
@


6.1
log
@Release 2.0
@
text
@d49 1
d51 3
d58 2
a59 2
	fastf_t		sw_transmit;	/* Moss "transparency" */
	fastf_t		sw_reflect;	/* Moss "transmission" */
d65 3
@


5.3
log
@Added sw_basecolor
@
text
@@


5.2
log
@Accepted mfuncs from raytrace.h, added shadework struct.
@
text
@d57 2
a58 1
	fastf_t		sw_color[9];	/* color */
@


5.1
log
@Release 1.24
@
text
@d16 3
d23 37
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@@


1.3
log
@Typedefs needed for the Cray.
@
text
@@


1.2
log
@Changed from char* to int* for Cray.
@
text
@d4 12
d17 3
a19 3
	char	*mp_name;
	int	*mp_offset;
	char	*mp_fmt;
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
	int	mp_offset;
@
