head	11.23;
access;
symbols
	ansi-20040405-merged:11.18.2.2
	postmerge-20040405-ansi:11.21
	premerge-20040404-ansi:11.20
	postmerge-autoconf:11.20
	autoconf-freeze:11.19.2.2
	premerge-autoconf:11.20
	postmerge-20040315-windows:11.20
	premerge-20040315-windows:11.20
	windows-20040315-freeze:11.18.4.1
	autoconf-20031203:11.19
	autoconf-20031202:11.19
	autoconf-branch:11.19.0.2
	phong-branch:11.18.0.8
	photonmap-branch:11.18.0.6
	rel-6-1-DP:11.18
	windows-branch:11.18.0.4
	rel-6-0-2:11.16
	ansi-branch:11.18.0.2
	rel-6-0-1-branch:11.16.0.2
	hartley-6-0-post:11.17
	hartley-6-0-pre:11.16
	rel-6-0-1:11.16
	rel-6-0:11.16
	rel-5-4:11.11
	offsite-5-3-pre:11.14
	rel-5-3:11.11
	rel-5-2:11.11
	rel-5-1-branch:11.11.0.2
	rel-5-1:11.11
	rel-5-0:11.11
	rel-5-0-beta:11.10
	rel-4-5:11.7
	ctj-4-5-post:11.7
	ctj-4-5-pre:11.7
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1;
locks; strict;
comment	@ * @;


11.23
date	2004.05.21.17.31.10;	author morrison;	state dead;
branches;
next	11.22;

11.22
date	2004.05.10.15.30.49;	author erikg;	state Exp;
branches;
next	11.21;

11.21
date	2004.04.05.05.45.59;	author morrison;	state Exp;
branches;
next	11.20;

11.20
date	2004.02.02.17.39.39;	author morrison;	state Exp;
branches;
next	11.19;

11.19
date	2003.09.27.01.11.25;	author morrison;	state Exp;
branches
	11.19.2.1;
next	11.18;

11.18
date	2002.08.20.17.08.39;	author jra;	state Exp;
branches
	11.18.2.1
	11.18.4.1;
next	11.17;

11.17
date	2002.08.15.20.55.50;	author hartley;	state Exp;
branches;
next	11.16;

11.16
date	2001.05.16.21.38.19;	author morrison;	state Exp;
branches;
next	11.15;

11.15
date	2001.04.05.19.36.04;	author morrison;	state Exp;
branches;
next	11.14;

11.14
date	2000.08.17.02.41.40;	author mike;	state Exp;
branches;
next	11.13;

11.13
date	2000.07.27.19.32.53;	author butler;	state Exp;
branches;
next	11.12;

11.12
date	2000.07.25.16.39.48;	author butler;	state Exp;
branches;
next	11.11;

11.11
date	99.07.02.22.19.46;	author mike;	state Exp;
branches;
next	11.10;

11.10
date	99.05.28.01.19.30;	author mike;	state Exp;
branches;
next	11.9;

11.9
date	98.09.22.00.21.02;	author mike;	state Exp;
branches;
next	11.8;

11.8
date	98.03.19.04.03.22;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	97.01.07.23.48.26;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	96.08.30.00.08.21;	author butler;	state Exp;
branches;
next	11.5;

11.5
date	96.07.22.20.34.18;	author jra;	state Exp;
branches;
next	11.4;

11.4
date	96.03.29.23.20.55;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.03.29.21.55.48;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.12.06.17.57.53;	author pjt;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.01.29;	author mike;	state Rel4_4;
branches;
next	10.4;

10.4
date	94.12.30.01.02.56;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	94.11.08.04.14.36;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.11.02.47.12;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.42.22;	author mike;	state Rel4_0;
branches;
next	9.6;

9.6
date	91.07.06.00.35.31;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	91.02.20.00.51.34;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	91.01.05.03.09.28;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	90.12.12.16.35.21;	author butler;	state Exp;
branches;
next	9.2;

9.2
date	90.11.14.15.43.42;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.00.01;	author mike;	state Rel3_5;
branches;
next	8.5;

8.5
date	89.04.11.07.43.45;	author phil;	state Exp;
branches;
next	8.4;

8.4
date	89.04.11.07.34.18;	author phil;	state Exp;
branches;
next	8.3;

8.3
date	88.12.27.16.37.10;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.15.03.31.17;	author phil;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.33.41;	author mike;	state Rel3_0;
branches;
next	7.7;

7.7
date	88.08.23.02.34.02;	author mike;	state Exp;
branches;
next	7.6;

7.6
date	88.06.16.02.47.09;	author phil;	state Exp;
branches;
next	7.5;

7.5
date	88.05.20.03.22.58;	author mike;	state Exp;
branches;
next	7.4;

7.4
date	88.05.14.02.28.38;	author mike;	state Exp;
branches;
next	7.3;

7.3
date	88.02.12.00.58.08;	author phil;	state Exp;
branches;
next	7.2;

7.2
date	88.02.11.17.49.12;	author phil;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.56.53;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.59.41;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.15.46;	author mike;	state Rel;
branches;
next	1.6;

1.6
date	87.05.30.07.04.37;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	87.05.30.04.58.13;	author phil;	state Exp;
branches;
next	1.4;

1.4
date	87.04.28.00.59.50;	author phil;	state Exp;
branches;
next	1.3;

1.3
date	87.04.07.22.12.52;	author phil;	state Exp;
branches;
next	1.2;

1.2
date	87.03.24.01.00.13;	author phil;	state Exp;
branches;
next	1.1;

1.1
date	87.03.16.17.04.15;	author phil;	state Exp;
branches;
next	;

11.18.2.1
date	2002.09.19.18.02.17;	author morrison;	state Exp;
branches;
next	11.18.2.2;

11.18.2.2
date	2004.03.17.21.23.01;	author morrison;	state Exp;
branches;
next	;

11.18.4.1
date	2004.03.11.23.48.08;	author morrison;	state Exp;
branches;
next	;

11.19.2.1
date	2004.02.12.19.37.14;	author erikg;	state Exp;
branches;
next	11.19.2.2;

11.19.2.2
date	2004.03.15.14.08.08;	author erikg;	state Exp;
branches;
next	;


desc
@radsim (radar simulator) rad file producer
rtrad back end
@


11.23
log
@moved to src/rt/
@
text
@/*
 *			V I E W R A D
 *
 *  Ray Tracing program RTRAD bottom half.
 *
 *  This module takes the first hit from rt_shootray(), and produces
 *  a GIFT/SRIM format Radar file.  It tracks specular direction
 *  reflections.
 *
 *  Author -
 *	Phillip Dykstra
 *	From viewpp.c and viewray.c by
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSppview[] = "@@(#)$Header: /n/xoff/cvs/brlcad/rt/viewrad.c,v 11.22 2004/05/10 15:30:49 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <string.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "rtprivate.h"
#include "./rad.h"

#define	MAXREFLECT	16
#define	DEFAULTREFLECT	8

int		use_air = 0;		/* Handling of air in librt */
int		using_mlib = 0;		/* Material routines NOT used */

static struct rayinfo {
	int	sight;
	vect_t	ip;		/* intersection point */
	vect_t	norm;		/* normal vector */
	vect_t	spec;		/* specular direction */
	struct	curvature curvature;
	fastf_t	dist;
	int	reg, sol, surf;
} rayinfo[MAXREFLECT], *rayp;


extern	FILE	*outfp;
extern	point_t	viewbase_model;		/* lower_left of viewing plane */
extern	mat_t	view2model;
extern	fastf_t	viewsize;

extern	int	width;
extern	int	height;

int	numreflect = DEFAULTREFLECT;	/* max number of reflections */

/* Viewing module specific "set" variables */
struct bu_structparse view_parse[] = {
#if !defined(__alpha)   /* XXX Alpha does not support this initialization! */

	{"%d",	1, "maxreflect",	bu_byteoffset(numreflect),	BU_STRUCTPARSE_FUNC_NULL },
#endif
	{"",	0, (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};

void		dumpray(struct rayinfo *rp);
void		dumpall(struct application *ap, int depth);
static int	isvisible(struct application *ap, struct hit *hitp, const fastf_t *norm);

char usage[] = "\
Usage:  rtrad [options] model.g objects... >file.rad\n\
Options:\n\
 -s #		Grid size in pixels, default 512\n\
 -a Az		Azimuth in degrees\n\
 -e Elev	Elevation in degrees\n\
 -M		Read matrix, cmds on stdin\n\
 -o file.rad	Output file name, else stdout\n\
 -x #		Set librt debug flags\n\
";

static struct xray firstray;

/*
 *  Yucky Fortran/SRIM style I/O
 */
static char	physrec[256*sizeof(union radrec)];
static int	precindex = 0;
static int	precnum = 0;	/* number of physical records written */
static int	recnum = 0;	/* number of (useful) records written */

static int radhit(register struct application *ap, struct partition *PartHeadp, struct seg *segHeadp);
static int radmiss(struct application *ap);

/*
 *  			V I E W _ I N I T
 *
 *  Called at the start of a run.
 *  Returns 1 if framebuffer should be opened, else 0.
 */
int view_init( register struct application *ap,
	       char *file, 
	       char *obj,
	       int minus_o)
{
	ap->a_hit = radhit;
	ap->a_miss = radmiss;
	ap->a_onehit = 1;

	return(0);		/* no framebuffer needed */
}
/*
 *  Output a physical record (256 logical records)
 *
 *  Turns on -1 flags in unused logical records
 */
int
writephysrec(FILE *fp)
{
	union radrec	skiprec;
	long	length;
static int totbuf = 0;
int buf = 0;

	/* Pad out the record if not full */
	memset( (char *)&skiprec, 0, sizeof(skiprec) );
	skiprec.p.pad[16] = -1;
	while( precindex < 256 ) {
		bcopy( &skiprec, &physrec[precindex*sizeof(union radrec)], sizeof(skiprec) );
		precindex++;
buf++;
	}

	length = sizeof(physrec);
	fwrite( &length, sizeof(length), 1, fp );
	if( fwrite( physrec, sizeof(physrec), 1, fp ) != 1 ) {
		bu_log( "writephysrec: error writing physical record\n" );
		return( 0 );
	}
	fwrite( &length, sizeof(length), 1, fp );

	memset( (char *)physrec, 0, sizeof(physrec) );	/* paranoia */
	precindex = 0;
	precnum++;

totbuf += buf;
/*fprintf( stderr, "PREC %d, buf = %d, totbuf = %d\n", precnum, buf, totbuf );*/

	return( 1 );
}

/*
 *  Write a logical record
 *
 *  Outputs the current physical record if full.
 */
int
writerec(union radrec *rp, FILE *fp)
{
	if( precindex >= 256 ) {
		if( writephysrec( fp ) == 0 )
			return( 0 );
	}
	bcopy( rp, &physrec[precindex*sizeof(*rp)], sizeof(*rp) );

	precindex++;
	recnum++;

	if( precindex >= 256 ) {
		if( writephysrec( fp ) == 0 )
			return( 0 );
	}
	return( 1 );
}

/* beginning of a frame */
void
view_2init(struct application *ap)
{
	extern double azimuth, elevation;
	vect_t temp, aimpt;
	union radrec r;

	if( numreflect > MAXREFLECT ) {
		bu_log("Warning: maxreflect too large (%d), using %d\n",
			numreflect, MAXREFLECT );
		numreflect = MAXREFLECT;
	}

	bu_log( "Ray Spacing: %f rays/cm\n", 10.0*(width/viewsize) );

	/* Header Record */
	memset( (char *)&r, 0, sizeof(r) );

	/*XXX*/
	r.h.head[0] = 'h'; r.h.head[1] = 'e';
	r.h.head[2] = 'a'; r.h.head[3] = 'd';

	r.h.id = 1;
	r.h.iview = 1;
	r.h.miview = - r.h.iview;
	VSET( temp, 0.0, 0.0, -1.414 );	/* Point we are looking at */
	MAT4X3PNT( aimpt, view2model, temp );
	r.h.cx = aimpt[0];		/* aimpoint */
	r.h.cy = aimpt[1];
	r.h.cz = aimpt[2];
	r.h.back = 1.414*viewsize/2.0;	/* backoff */
	r.h.e = elevation;
	r.h.a = azimuth;
	r.h.vert = viewsize;
	r.h.horz = viewsize;
	r.h.nvert = height;
	r.h.nhorz = width;
	r.h.maxrfl = numreflect;

	writerec( &r, outfp );

	/* XXX - write extra header records */
	memset( (char *)&r, 0, sizeof(r) );
	writerec( &r, outfp );
	writerec( &r, outfp );
}

/* end of each pixel */
void	view_pixel(void) {}

/* end of each line */
void	view_eol(void) {}

void	view_setup(void) {}
void	view_cleanup(void) {}

/* end of a frame */
void
view_end(void)
{
	/* flush any partial output record */
	if( precindex > 0 ) {
		writephysrec( outfp );
	}

	bu_log( "view_end: %d physical records, (%d/%d) logical\n",
		precnum, recnum, precnum*256 );
}

static int
radhit(register struct application *ap, struct partition *PartHeadp, struct seg *segHeadp)
{
	register struct partition *pp;
	register struct hit *hitp;
	struct application sub_ap;
	LOCAL fastf_t	f;
	LOCAL vect_t	to_eye, work;
	LOCAL int	depth;

	for( pp=PartHeadp->pt_forw; pp != PartHeadp; pp = pp->pt_forw )
		if( pp->pt_outhit->hit_dist >= 0.0 )  break;
	if( pp == PartHeadp )  {
		bu_log("radhit:  no hit out front?\n");
		return(0);
	}

	if(R_DEBUG&RDEBUG_HITS)  {
		rt_pr_pt( ap->a_rt_i, pp );
	}

	hitp = pp->pt_inhit;
	if( hitp->hit_dist >= INFINITY )  {
		bu_log("radhit:  entry beyond infinity\n");
		return(1);
	}
	/* Check to see if eye is "inside" the solid */
	if( hitp->hit_dist < 0 )  {
		/* XXX */
		bu_log("radhit:  GAK, eye inside solid (%g)\n", hitp->hit_dist );
		for( pp=PartHeadp->pt_forw; pp != PartHeadp; pp = pp->pt_forw )
			rt_pr_pt( ap->a_rt_i, pp );
		return(0);
	}

	rayp = &rayinfo[ ap->a_level ];

	RT_HIT_NORMAL( rayp->norm, hitp, pp->pt_inseg->seg_stp, &(ap->a_ray), pp->pt_inflip );

	if(R_DEBUG&RDEBUG_HITS)  {
		rt_pr_hit( " In", hitp );
	}

	rayp->dist = hitp->hit_dist;
	rayp->reg = pp->pt_regionp->reg_regionid;
	rayp->sol = pp->pt_inseg->seg_stp->st_id;
	rayp->surf = hitp->hit_surfno;
	RT_CURVATURE( &(rayp->curvature), hitp, pp->pt_inflip, pp->pt_inseg->seg_stp );
	if( VDOT( rayp->norm, ap->a_ray.r_dir ) < 0 ) {
		bu_log(" debug: flipping curvature\n");
		rayp->curvature.crv_c1 = - rayp->curvature.crv_c1;
		rayp->curvature.crv_c2 = - rayp->curvature.crv_c2;
	}
	VMOVE( rayp->ip, hitp->hit_point );

	/* Compute the specular direction */
	VREVERSE( to_eye, ap->a_ray.r_dir );
	f = 2 * VDOT( to_eye, rayp->norm );
	VSCALE( work, rayp->norm, f );
	/* I have been told this has unit length */
	VSUB2( rayp->spec, work, to_eye );

	/* Save info for 1st ray */
	if( ap->a_level == 0 ) {
		firstray = ap->a_ray;	/* struct copy */
		rayp->sight = 1;	/* the 1st intersect is always visible */
	} else {
		/* Check for visibility */
		rayp->sight = isvisible( ap, hitp, rayp->norm );
	}

	/*
	 * Shoot another ray in the specular direction.
	 */
	if( ap->a_level < numreflect-1 ) {
		sub_ap = *ap;	/* struct copy */
		sub_ap.a_level = ap->a_level+1;
		VMOVE( sub_ap.a_ray.r_pt, hitp->hit_point );
		VMOVE( sub_ap.a_ray.r_dir, rayp->spec );
		depth = rt_shootray( &sub_ap );
	} else {
		bu_log( "radhit:  max reflections exceeded [%d %d]\n",
			ap->a_x, ap->a_y );
		depth = 0;
	}

	if( ap->a_level == 0 ) {
		/* We're the 1st ray, output the raylist */
		dumpall( ap, depth+1 );
	}
	return(depth+1);	/* report hit to main routine */
}

static int
radmiss(struct application *ap)
{
	return(0);
}

/*********** Eye Visibility Routines ************/
/*
 *  True if the intersection distance is >= distance back to the
 *  origin of the first ray in a chain.
 *  Called via isvisible on a hit.
 */
static int
hiteye(struct application *ap, struct partition *PartHeadp, struct seg *segHeadp)
{
	register struct partition *pp;
	register struct hit *hitp;
	LOCAL vect_t work;

	for( pp=PartHeadp->pt_forw; pp != PartHeadp; pp = pp->pt_forw )
		if( pp->pt_outhit->hit_dist > 0 )  break;
	if( pp == PartHeadp )  {
		bu_log("hiteye:  no hit out front?\n");
		return(1);
	}
	hitp = pp->pt_inhit;
	if( hitp->hit_dist >= INFINITY )  {
		bu_log("hiteye:  entry beyond infinity\n");
		return(1);
	}
	/* The current ray segment exits "in front" of me,
	 * find out where it went in.
	 * Check to see if eye is "inside" of the solid.
	 */
	if( hitp->hit_dist < -1.0e-10 )  {
		/*
		 * If we are under 1.0 units inside of a solid, we pushed
		 * into it ourselves in trying to get away from the surface.
		 * Otherwise, its hard to tell how we got in here!
		 */
		if( hitp->hit_dist < -1.001 ) {
			bu_log("hiteye: *** GAK2, eye inside solid (%g) ***\n", hitp->hit_dist );
			for( pp=PartHeadp->pt_forw; pp != PartHeadp; pp = pp->pt_forw )
				rt_pr_pt( ap->a_rt_i, pp );
		}
		return(0);
	}

	VSUB2( work, firstray.r_pt, ap->a_ray.r_pt );
	if( hitp->hit_dist * hitp->hit_dist > MAGSQ(work) )
		return(1);
	else
		return(0);
}

/*
 *  Always true
 *  Called via isvisible on a miss.
 */
static int
hittrue(struct application *ap)
{
	return(1);
}

/*
 *  Determine whether the current hitpoint along a series of
 *  reflections is visible from the origin of the ray.
 *  (which is the location of our "point" eye for now)
 *
 *  Strategy: we shoot back toward the origin of the ray
 *   If we don't hit anything (i.e. miss) we made it.
 *   If we hit something we made it if that distance is greater
 *   than the distance back to the eye.
 */
static int
isvisible(struct application *ap, struct hit *hitp, const fastf_t *norm)
{
	struct application sub_ap;
	vect_t	rdir;

	/* compute the ray direction */
	VSUB2( rdir, firstray.r_pt, hitp->hit_point );
	VUNITIZE( rdir );
	if( VDOT(rdir, norm) < 0 )
		return( 0 );	/* backfacing */

	sub_ap = *ap;	/* struct copy */
	sub_ap.a_level = ap->a_level+1;
	sub_ap.a_onehit = 1;
	sub_ap.a_hit = hiteye;
	sub_ap.a_miss = hittrue;
	/*
	 * New origin is one unit in the ray direction in
	 * order to get away from the surface we intersected.
	 */
	VADD2( sub_ap.a_ray.r_pt, hitp->hit_point, rdir );
	VMOVE( sub_ap.a_ray.r_dir, rdir );

	return( rt_shootray( &sub_ap ) );
}

/************** Output Routines ***************/
void
dumpall(struct application *ap, int depth)
{
	int	i;
	union radrec r;

	if( depth > numreflect ) {
		bu_log( "dumpall: %d reflections!\n", depth );
	}

	/* Firing record */
	/*printf( "Ray [%d %d], depth = %d\n", ap->a_x, ap->a_y, depth );*/

	memset( (char *)&r, 0, sizeof(r) );

	/*XXX*/
	r.f.head[0] = 'f'; r.f.head[1] = 'i';
	r.f.head[2] = 'r'; r.f.head[3] = 'e';

	/*
	 * Make sure there's enough space in
	 * the physical record.
	 */
	i = 1 + depth;
	if( depth < numreflect )
		i++;	/* escape */
	if( precindex + i > 256 )
		writephysrec( outfp );

	r.f.irf = i-1;			/* num recs in ray, not counting fire */
	r.f.ox = ap->a_ray.r_pt[0];	/* ray origin */
	r.f.oy = ap->a_ray.r_pt[1];
	r.f.oz = ap->a_ray.r_pt[2];
	r.f.h = (ap->a_x - width/2) * viewsize/width;
	r.f.v = (ap->a_y - height/2) * viewsize/height;
	r.f.ih = ap->a_x + 1;		/* Radsim counts from 1 */
	r.f.iv = ap->a_y + 1;
	writerec( &r, outfp );

	for( i = 0; i < depth; i++ ) {
		dumpray( &rayinfo[i] );
	}

	if( depth == numreflect )
		return;			/* no escape */

	/* Escape record */
	memset( (char *)&r, 0, sizeof(r) );

	/*XXX*/
	r.e.head[0] = 'e'; r.e.head[1] = 's';
	r.e.head[2] = 'c'; r.e.head[3] = 'p';

	r.e.sight = -3;			/* XXX line of sight for escape? */
	r.e.dx = rayinfo[depth-1].spec[0];	/* escape direction */
	r.e.dy = rayinfo[depth-1].spec[1];
	r.e.dz = rayinfo[depth-1].spec[2];
	writerec( &r, outfp );
}

void
dumpray(struct rayinfo *rp)
{
	union radrec r;

#ifdef DEBUG1
	printf( " visible = %d\n", rp->sight );
	printf( " i = (%f %f %f)\n", rp->ip[0], rp->ip[1], rp->ip[2] );
	printf( " n = (%f %f %f)\n", rp->norm[0], rp->norm[1], rp->norm[2] );
	printf( " p = (%f %f %f)\n", rp->spec[0], rp->spec[1], rp->spec[2] );
#endif

	/* Reflection record */
	memset( (char *)&r, 0, sizeof(r) );

	/*XXX*/
	r.r.head[0] = 'r'; r.r.head[1] = 'e';
	r.r.head[2] = 'l'; r.r.head[3] = 'f';

	r.r.packedid = 12345;
	r.r.sight = rp->sight;
	r.r.ix = rp->ip[0];		/* intersection */
	r.r.iy = rp->ip[1];
	r.r.iz = rp->ip[2];
	r.r.nx = rp->norm[0];		/* normal */
	r.r.ny = rp->norm[1];
	r.r.nz = rp->norm[2];
	r.r.px = rp->curvature.crv_pdir[0];	/* principle plane */
	r.r.py = rp->curvature.crv_pdir[1];
	r.r.pz = rp->curvature.crv_pdir[2];
	r.r.rc1 = rp->curvature.crv_c1;
	r.r.rc2 = rp->curvature.crv_c2;
	r.r.dfirst = rp->dist;
	r.r.ireg = rp->reg;
	r.r.isol = rp->sol;
	r.r.isurf = rp->surf;

	writerec( &r, outfp );
}



void application_init (void) {}
@


11.22
log
@change conf.h to a wrapped config.h
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /cvs/brlcad/rt/viewrad.c,v 11.21 2004/04/05 05:45:59 morrison Exp $ (BRL)";
@


11.21
log
@merge of ansi-6-0-branch into head
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header$ (BRL)";
d28 5
a32 1
#include "conf.h"
@


11.20
log
@update copyright to include span through 2003
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.19 2003/09/27 01:11:25 morrison Exp $ (BRL)";
d44 11
d74 3
a76 3
void		dumpray();
void		dumpall();
static int	isvisible();
a88 9
static struct rayinfo {
	int	sight;
	vect_t	ip;		/* intersection point */
	vect_t	norm;		/* normal vector */
	vect_t	spec;		/* specular direction */
	struct	curvature curvature;
	fastf_t	dist;
	int	reg, sol, surf;
} rayinfo[MAXREFLECT], *rayp;
d99 2
a100 2
static int radhit();
static int radmiss();
d125 1
a125 2
writephysrec( fp )
FILE *fp;
d165 1
a165 3
writerec( rp, fp )
union radrec *rp;
FILE *fp;
d185 1
a185 2
view_2init( ap )
struct application *ap;
d232 1
a232 1
void	view_pixel() {}
d235 1
a235 1
void	view_eol() {}
d237 2
a238 2
void	view_setup() {}
void	view_cleanup() {}
d242 1
a242 1
view_end()
d254 1
a254 4
radhit( ap, PartHeadp, segHeadp )
register struct application *ap;
struct partition *PartHeadp;
struct seg	*segHeadp;
d347 1
a347 2
radmiss(ap)
struct application *ap;
d359 1
a359 4
hiteye( ap, PartHeadp, segHeadp )
struct application *ap;
struct partition *PartHeadp;
struct seg	*segHeadp;
d406 1
a406 2
hittrue( ap )
struct application *ap;
d422 1
a422 4
isvisible( ap, hitp, norm )
struct application *ap;
struct hit *hitp;
const vect_t	norm;
d450 1
a450 3
dumpall( ap, depth )
struct application *ap;
int depth;
d510 1
a510 2
dumpray( rp )
struct rayinfo *rp;
d551 1
a551 1
void application_init () {}
@


11.19
log
@updated rdebug var usages to the R_DEBUG define for performance during production builds; moved certain shared globals to liboptical
@
text
@d21 1
a21 1
 *	This software is Copyright (C) 1985 by the United States Army.
d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.18 2002/08/20 17:08:39 jra Exp $ (BRL)";
@


11.19.2.1
log
@merge from HEAD
@
text
@d21 1
a21 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.20 2004/02/02 17:39:39 morrison Exp $ (BRL)";
@


11.19.2.2
log
@merge from head
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.19.2.1 2004/02/12 19:37:14 erikg Exp $ (BRL)";
@


11.18
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.16 2001/05/16 21:38:19 morrison Exp $ (BRL)";
d275 1
a275 1
	if(rdebug&RDEBUG_HITS)  {
d297 1
a297 1
	if(rdebug&RDEBUG_HITS)  {
@


11.18.4.1
log
@sync to HEAD...
@
text
@d21 1
a21 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/rt/viewrad.c,v 11.20 2004/02/02 17:39:39 morrison Exp $ (BRL)";
d275 1
a275 1
	if(R_DEBUG&RDEBUG_HITS)  {
d297 1
a297 1
	if(R_DEBUG&RDEBUG_HITS)  {
@


11.18.2.1
log
@Initial ANSIfication
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.18 2002/08/20 17:08:39 jra Exp $ (BRL)";
a43 11
static struct rayinfo {
	int	sight;
	vect_t	ip;		/* intersection point */
	vect_t	norm;		/* normal vector */
	vect_t	spec;		/* specular direction */
	struct	curvature curvature;
	fastf_t	dist;
	int	reg, sol, surf;
} rayinfo[MAXREFLECT], *rayp;


d63 3
a65 3
void		dumpray(struct rayinfo *rp);
void		dumpall(struct application *ap, int depth);
static int	isvisible(struct application *ap, struct hit *hitp, const fastf_t *norm);
d78 9
d97 2
a98 2
static int radhit(register struct application *ap, struct partition *PartHeadp, struct seg *segHeadp);
static int radmiss(struct application *ap);
d123 2
a124 1
writephysrec(FILE *fp)
d164 3
a166 1
writerec(union radrec *rp, FILE *fp)
d186 2
a187 1
view_2init(struct application *ap)
d234 1
a234 1
void	view_pixel(void) {}
d237 1
a237 1
void	view_eol(void) {}
d239 2
a240 2
void	view_setup(void) {}
void	view_cleanup(void) {}
d244 1
a244 1
view_end(void)
d256 4
a259 1
radhit(register struct application *ap, struct partition *PartHeadp, struct seg *segHeadp)
d352 2
a353 1
radmiss(struct application *ap)
d365 4
a368 1
hiteye(struct application *ap, struct partition *PartHeadp, struct seg *segHeadp)
d415 2
a416 1
hittrue(struct application *ap)
d432 4
a435 1
isvisible(struct application *ap, struct hit *hitp, const fastf_t *norm)
d463 3
a465 1
dumpall(struct application *ap, int depth)
d525 2
a526 1
dumpray(struct rayinfo *rp)
d567 1
a567 1
void application_init (void) {}
@


11.18.2.2
log
@sync branch with HEAD
@
text
@d21 1
a21 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header$ (BRL)";
d270 1
a270 1
	if(R_DEBUG&RDEBUG_HITS)  {
d292 1
a292 1
	if(R_DEBUG&RDEBUG_HITS)  {
@


11.17
log
@Converted from K&R to ANSI C - RFH
@
text
@a43 11
static struct rayinfo {
	int	sight;
	vect_t	ip;		/* intersection point */
	vect_t	norm;		/* normal vector */
	vect_t	spec;		/* specular direction */
	struct	curvature curvature;
	fastf_t	dist;
	int	reg, sol, surf;
} rayinfo[MAXREFLECT], *rayp;


d63 3
a65 3
void		dumpray(struct rayinfo *rp);
void		dumpall(struct application *ap, int depth);
static int	isvisible(struct application *ap, struct hit *hitp, const fastf_t *norm);
d78 9
d97 2
a98 2
static int radhit(register struct application *ap, struct partition *PartHeadp, struct seg *segHeadp);
static int radmiss(struct application *ap);
d123 2
a124 1
writephysrec(FILE *fp)
d164 3
a166 1
writerec(union radrec *rp, FILE *fp)
d186 2
a187 1
view_2init(struct application *ap)
d234 1
a234 1
void	view_pixel(void) {}
d237 1
a237 1
void	view_eol(void) {}
d239 2
a240 2
void	view_setup(void) {}
void	view_cleanup(void) {}
d244 1
a244 1
view_end(void)
d256 4
a259 1
radhit(register struct application *ap, struct partition *PartHeadp, struct seg *segHeadp)
d352 2
a353 1
radmiss(struct application *ap)
d365 4
a368 1
hiteye(struct application *ap, struct partition *PartHeadp, struct seg *segHeadp)
d415 2
a416 1
hittrue(struct application *ap)
d432 4
a435 1
isvisible(struct application *ap, struct hit *hitp, const fastf_t *norm)
d463 3
a465 1
dumpall(struct application *ap, int depth)
d525 2
a526 1
dumpray(struct rayinfo *rp)
d567 1
a567 1
void application_init (void) {}
@


11.16
log
@PRODUCTION optimizations
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.15 2001/04/05 19:36:04 morrison Exp $ (BRL)";
d44 11
d74 3
a76 3
void		dumpray();
void		dumpall();
static int	isvisible();
a88 9
static struct rayinfo {
	int	sight;
	vect_t	ip;		/* intersection point */
	vect_t	norm;		/* normal vector */
	vect_t	spec;		/* specular direction */
	struct	curvature curvature;
	fastf_t	dist;
	int	reg, sol, surf;
} rayinfo[MAXREFLECT], *rayp;
d99 2
a100 2
static int radhit();
static int radmiss();
d125 1
a125 2
writephysrec( fp )
FILE *fp;
d165 1
a165 3
writerec( rp, fp )
union radrec *rp;
FILE *fp;
d185 1
a185 2
view_2init( ap )
struct application *ap;
d232 1
a232 1
void	view_pixel() {}
d235 1
a235 1
void	view_eol() {}
d237 2
a238 2
void	view_setup() {}
void	view_cleanup() {}
d242 1
a242 1
view_end()
d254 1
a254 4
radhit( ap, PartHeadp, segHeadp )
register struct application *ap;
struct partition *PartHeadp;
struct seg	*segHeadp;
d347 1
a347 2
radmiss(ap)
struct application *ap;
d359 1
a359 4
hiteye( ap, PartHeadp, segHeadp )
struct application *ap;
struct partition *PartHeadp;
struct seg	*segHeadp;
d406 1
a406 2
hittrue( ap )
struct application *ap;
d422 1
a422 4
isvisible( ap, hitp, norm )
struct application *ap;
struct hit *hitp;
const vect_t	norm;
d450 1
a450 3
dumpall( ap, depth )
struct application *ap;
int depth;
d510 1
a510 2
dumpray( rp )
struct rayinfo *rp;
d551 1
a551 1
void application_init () {}
@


11.15
log
@updated SIGNED to signed
updated CONST to const
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.14 2000/08/17 02:41:40 mike Exp $ (BRL)";
d132 1
a132 1
	bzero( (char *)&skiprec, sizeof(skiprec) );
d148 1
a148 1
	bzero( (char *)physrec, sizeof(physrec) );	/* paranoia */
d202 1
a202 1
	bzero( (char *)&r, sizeof(r) );
d228 1
a228 1
	bzero( (char *)&r, sizeof(r) );
d477 1
a477 1
	bzero( (char *)&r, sizeof(r) );
d511 1
a511 1
	bzero( (char *)&r, sizeof(r) );
d538 1
a538 1
	bzero( (char *)&r, sizeof(r) );
@


11.14
log
@
Added "const" to RCSid, to quiet Gnu C compilers.
@
text
@d25 1
a25 1
static const char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.13 2000/07/27 19:32:53 butler Exp $ (BRL)";
d435 1
a435 1
CONST vect_t	norm;
@


11.13
log
@Added -Q flag to rt, misc compilation warning fixes
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.12 2000/07/25 16:39:48 butler Exp $ (BRL)";
@


11.12
log
@Many patches for warning-free compilation on Linux.
Moved rdebug.h to h/rtprivate.h
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.11 1999/07/02 22:19:46 mike Exp $ (BRL)";
d117 66
a564 15
/*
 *  Write a logical record
 *
 *  Outputs the current physical record if full.
 */
int
writerec( rp, fp )
union radrec *rp;
FILE *fp;
{
	if( precindex >= 256 ) {
		if( writephysrec( fp ) == 0 )
			return( 0 );
	}
	bcopy( rp, &physrec[precindex*sizeof(*rp)], sizeof(*rp) );
a565 50
	precindex++;
	recnum++;

	if( precindex >= 256 ) {
		if( writephysrec( fp ) == 0 )
			return( 0 );
	}
	return( 1 );
}

/*
 *  Output a physical record (256 logical records)
 *
 *  Turns on -1 flags in unused logical records
 */
int
writephysrec( fp )
FILE *fp;
{
	union radrec	skiprec;
	long	length;
static int totbuf = 0;
int buf = 0;

	/* Pad out the record if not full */
	bzero( (char *)&skiprec, sizeof(skiprec) );
	skiprec.p.pad[16] = -1;
	while( precindex < 256 ) {
		bcopy( &skiprec, &physrec[precindex*sizeof(union radrec)], sizeof(skiprec) );
		precindex++;
buf++;
	}

	length = sizeof(physrec);
	fwrite( &length, sizeof(length), 1, fp );
	if( fwrite( physrec, sizeof(physrec), 1, fp ) != 1 ) {
		bu_log( "writephysrec: error writing physical record\n" );
		return( 0 );
	}
	fwrite( &length, sizeof(length), 1, fp );

	bzero( (char *)physrec, sizeof(physrec) );	/* paranoia */
	precindex = 0;
	precnum++;

totbuf += buf;
/*fprintf( stderr, "PREC %d, buf = %d, totbuf = %d\n", precnum, buf, totbuf );*/

	return( 1 );
}
@


11.11
log
@
Removed dependence on compat4.h
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.10 1999/05/28 01:19:30 mike Exp $ (BRL)";
d31 1
d35 1
a35 1
#include "./rdebug.h"
d106 4
a109 3
view_init( ap, file, obj, minus_o )
register struct application *ap;
char *file, *obj;
@


11.10
log
@
sed4
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.9 1998/09/22 00:21:02 mike Exp $ (BRL)";
d57 1
a57 1
	{"%d",	1, "maxreflect",	bu_byteoffset(numreflect),	FUNC_NULL },
d59 1
a59 1
	{"",	0, (char *)0,		0,			FUNC_NULL }
@


11.9
log
@Doesn't need material.h
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewrad.c,v 11.8 1998/03/19 04:03:22 mike Exp $ (BRL)";
d126 1
a126 1
		rt_log("Warning: maxreflect too large (%d), using %d\n",
d131 1
a131 1
	rt_log( "Ray Spacing: %f rays/cm\n", 10.0*(width/viewsize) );
d183 1
a183 1
	rt_log( "view_end: %d physical records, (%d/%d) logical\n",
d203 1
a203 1
		rt_log("radhit:  no hit out front?\n");
d213 1
a213 1
		rt_log("radhit:  entry beyond infinity\n");
d219 1
a219 1
		rt_log("radhit:  GAK, eye inside solid (%g)\n", hitp->hit_dist );
d239 1
a239 1
		rt_log(" debug: flipping curvature\n");
d271 1
a271 1
		rt_log( "radhit:  max reflections exceeded [%d %d]\n",
d309 1
a309 1
		rt_log("hiteye:  no hit out front?\n");
d314 1
a314 1
		rt_log("hiteye:  entry beyond infinity\n");
d328 1
a328 1
			rt_log("hiteye: *** GAK2, eye inside solid (%g) ***\n", hitp->hit_dist );
d403 1
a403 1
		rt_log( "dumpall: %d reflections!\n", depth );
d549 1
a549 1
		rt_log( "writephysrec: error writing physical record\n" );
@


11.8
log
@a_hit and a_miss args fixed
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 11.7 1997/01/07 23:48:26 mike Exp mike $ (BRL)";
a33 1
#include "./material.h"
@


11.7
log
@Changed to bu_byteoffset
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 11.6 1996/08/30 00:08:21 butler Exp mike $ (BRL)";
d189 1
a189 1
radhit( ap, PartHeadp )
d192 1
d285 3
a287 1
radmiss()  {
d298 1
a298 1
hiteye( ap, PartHeadp )
d301 1
d348 1
a348 1
hittrue( ap, PartHeadp )
a349 1
struct partition *PartHeadp;
@


11.6
log
@structparse moved to libbu
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 11.5 1996/07/22 20:34:18 jra Exp butler $ (BRL)";
a53 15
#if CRAY
#	define byteoffset(_i)	(((int)&(_i)))	/* actually a word offset */
#else
#  if IRIX > 5
#	define byteoffset(_i)	((size_t)__INTADDR__(&(_i)))
#  else
#    if sgi || __convexc__ || ultrix || _HPUX_SOURCE
	/* "Lazy" way.  Works on reasonable machines with byte addressing */
#	define byteoffset(_i)	((int)((char *)&(_i)))
#    else
	/* "Conservative" way of finding # bytes as diff of 2 char ptrs */
#	define byteoffset(_i)	((int)(((char *)&(_i))-((char *)0)))
#    endif
#  endif
#endif
d58 1
a58 1
	{"%d",	1, "maxreflect",	byteoffset(numreflect),	FUNC_NULL },
@


11.5
log
@Minor Mods for IRIX 6.2
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 11.4 1996/03/29 23:20:55 mike Exp jra $ (BRL)";
d70 1
a70 1
struct structparse view_parse[] = {
@


11.4
log
@Changed from RT_HIT_NORM() to RT_HIT_NORMAL().
Now pt_inflip stuff is always handled correctly.
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 11.3 1996/03/29 21:55:48 mike Exp mike $ (BRL)";
d54 15
d71 4
a74 1
	{"%d",	1, "maxreflect",	(long)&numreflect,	FUNC_NULL },
@


11.3
log
@Changed to use new curvature macro.
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 11.2 1995/12/06 17:57:53 pjt Exp mike $ (BRL)";
d222 3
a224 4
	RT_HIT_NORM( hitp, pp->pt_inseg->seg_stp, &(ap->a_ray) );
	if( pp->pt_inflip ) {
		VREVERSE( hitp->hit_normal, hitp->hit_normal );
	}
a229 1
	rayp = &rayinfo[ ap->a_level ];
d235 1
a235 1
	if( VDOT( hitp->hit_normal, ap->a_ray.r_dir ) < 0 ) {
a240 1
	VMOVE( rayp->norm, hitp->hit_normal );
d244 2
a245 2
	f = 2 * VDOT( to_eye, hitp->hit_normal );
	VSCALE( work, hitp->hit_normal, f );
d255 1
a255 1
		rayp->sight = isvisible( ap, hitp );
d359 1
a359 1
isvisible( ap, hitp )
d362 1
d370 1
a370 1
	if( VDOT(rdir, hitp->hit_normal) < 0 )
@


11.2
log
@Added a stub for application_init()
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 11.1 1995/01/04 10:01:29 mike Rel4_4 pjt $ (BRL)";
a224 1
		pp->pt_inflip = 0;
d235 2
a236 2
	rayp->surf = 1;	/* XXX no surface numbers in RT */
	RT_CURVE( &(rayp->curvature), hitp, pp->pt_inseg->seg_stp );
d238 1
@


11.1
log
@Release_4.4
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 10.4 94/12/30 01:02:56 mike Exp $ (BRL)";
d560 2
@


10.4
log
@DEC Alpha
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 10.3 94/11/08 04:14:36 mike Exp Locker: mike $ (BRL)";
@


10.3
log
@Irix 6
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 10.2 94/08/11 02:47:12 gdurf Exp Locker: mike $ (BRL)";
d132 1
a132 1
	bzero( &r, sizeof(r) );
d158 1
a158 1
	bzero( &r, sizeof(r) );
d406 1
a406 1
	bzero( &r, sizeof(r) );
d440 1
a440 1
	bzero( &r, sizeof(r) );
d467 1
a467 1
	bzero( &r, sizeof(r) );
d535 1
a535 1
	bzero( &skiprec, sizeof(skiprec) );
d551 1
a551 1
	bzero( physrec, sizeof(physrec) );	/* paranoia */
@


10.2
log
@Added include of conf.h
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 10.1 1991/10/12 06:42:22 mike Rel4_0 gdurf $ (BRL)";
d56 1
a56 1
	{"%d",	1, "maxreflect",	(int)&numreflect,	FUNC_NULL },
@


10.1
log
@Release_4.0
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 9.6 91/07/06 00:35:31 mike Exp $ (BRL)";
d27 2
@


9.6
log
@ANSI structure initialization
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 9.5 91/02/20 00:51:34 mike Exp $ (BRL)";
@


9.5
log
@Added new view-module interface called view_setup() which is used
for initializing material properties, lights, etc.
It compliments view_cleanup(), and finally removed knowledge of
the view.c materials (and all the shaders) from the RT "top half".
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 9.4 91/01/05 03:09:28 mike Exp $ (BRL)";
d54 2
a55 2
	"%d",	1, "maxreflect",	(int)&numreflect,	FUNC_NULL,
	"",	0, (char *)0,		0,			FUNC_NULL
@


9.4
log
@Converted to new format for fmt entry in structparse
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 9.3 90/12/12 16:35:21 butler Exp $ (BRL)";
d167 1
@


9.3
log
@modified to reflect changes in structparse format
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 9.2 90/11/14 15:43:42 mike Exp $ (BRL)";
d55 1
a55 1
	(char *)0, 0, (char *)0,	0,			FUNC_NULL
@


9.2
log
@As part of "clean" command, call "view_cleanup()", to allow
viewing module the opportunity to clean up things like implicit
light sources, etc.
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: /m/cad/rt/RCS/viewrad.c,v 9.1 89/05/19 06:00:01 mike Rel3_5 $ (BRL)";
d54 2
a55 2
	"%d",	"maxreflect",	(int)&numreflect,	FUNC_NULL,
	(char *)0,(char *)0,	0,			FUNC_NULL
@


9.1
log
@Release_3.5
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 8.5 89/04/11 07:43:45 phil Exp $ (BRL)";
d166 2
@


8.5
log
@new structparse type
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 8.4 89/04/11 07:34:18 phil Locked $ (BRL)";
@


8.4
log
@No longer a stroff_t type
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 8.3 88/12/27 16:37:10 phil Locked $ (BRL)";
d54 1
a54 1
	"%d",	"maxreflect",	&numreflect,		FUNC_NULL,
@


8.3
log
@Converted matparse --> structparse
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 8.2 88/12/15 03:31:17 mike Locked $ (BRL)";
d54 2
a55 2
	"%d",	"maxreflect",	(stroff_t)&numreflect,			FUNC_NULL,
	(char *)0,(char *)0,	(stroff_t)0,				FUNC_NULL
@


8.2
log
@removed ireflect, maxbounce stubs.  put in view_parse stub instead.
made maxreflect a "set"able parameter.
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 8.1 88/10/05 00:33:41 phil Locked $ (BRL)";
d53 3
a55 3
struct matparse view_parse[] = {
	"maxreflect",	(mp_off_ty)&numreflect,			"%d",
	(char *)0,	(mp_off_ty)0,				(char *)0
@


8.1
log
@Release_3.0
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 7.7 88/08/23 02:34:02 mike Exp $ (BRL)";
d32 1
d36 2
a37 1
#define	MAXREFLECT	8	/* XXX - should become command line arg */
a39 1

a40 2
int		max_bounces;		/* stub for "set" cmd */
int		max_ireflect;		/* stub for "set" cmd */
d50 8
d121 6
d151 1
a151 1
	r.h.maxrfl = MAXREFLECT;
d259 1
a259 1
	if( ap->a_level < MAXREFLECT-1 ) {
d394 1
a394 1
	if( depth > MAXREFLECT ) {
d412 1
a412 1
	if( depth < MAXREFLECT )
d431 1
a431 1
	if( depth == MAXREFLECT )
@


7.7
log
@Added declarations of using_mlib=0,
added max_bounces stub variables, to keep "set" command happy,
deleted stub mlib_setup(), mlib_free() stubs.
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 7.6 88/06/16 02:47:09 mike Locked $ (BRL)";
@


7.6
log
@changed az el signs, tweaked usage[]
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 7.5 88/05/20 03:22:58 phil Locked $ (BRL)";
d39 4
a49 4

/* Pacify RT */
int	mlib_setup() { return(1); }
void	mlib_free() {}
@


7.5
log
@Added use_air variable.
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 7.4 88/05/14 02:28:38 mike Locked $ (BRL)";
d59 3
a61 3
 -a Az		Azimuth in degrees	(conflicts with -M)\n\
 -e Elev	Elevation in degrees	(conflicts with -M)\n\
 -M		Read model2view matrix on stdin (conflicts with -a, -e)\n\
d132 2
a133 2
	r.h.e = - elevation;		/* RT and GIFT/SRIM are backward XXX */
	r.h.a = - azimuth;
@


7.4
log
@lint fixes
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 7.3 88/02/12 00:58:08 mike Locked $ (BRL)";
d36 2
@


7.3
log
@no functional changes, just reorganizing a bit
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 7.2 88/02/11 17:49:12 phil Locked $ (BRL)";
d46 2
a47 2
mlib_setup() { return(1); }
mlib_free() {}
d49 4
d104 1
d147 1
a147 1
view_pixel() {}
d150 1
a150 1
view_eol() {}
d153 1
d371 1
d433 1
d479 1
d505 1
@


7.2
log
@eye inside solid cleanup
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 7.1 87/11/02 23:56:53 phil Locked $ (BRL)";
d41 1
a41 5
#ifdef never
extern	point_t	eye_model;		/* ray origin for perspective */
extern	point_t	dx_model;
extern	point_t	dy_model;
#endif never
d45 4
d79 63
d144 16
a159 1
int
d257 1
a257 1
int
a261 75
view_eol()
{
}

/*
 *  Called when the picture is finally done.
 */
view_end()
{
	/* flush any partial output record */
	if( precindex > 0 ) {
		writephysrec( outfp );
	}

	rt_log( "view_end: %d physical records, (%d/%d) logical\n",
		precnum, recnum, precnum*256 );
}

/*
 *  			V I E W _ I N I T
 */
view_init( ap, file, obj, minus_o )
register struct application *ap;
char *file, *obj;
{
	ap->a_hit = radhit;
	ap->a_miss = radmiss;
	ap->a_onehit = 1;

	return(0);		/* no framebuffer needed */
}

view_2init( ap )
struct application *ap;
{
	extern double azimuth, elevation;
	vect_t temp, aimpt;
	union radrec r;

	rt_log( "Ray Spacing: %f rays/cm\n", 10.0*(width/viewsize) );

	/* Header Record */
	bzero( &r, sizeof(r) );

	/*XXX*/
	r.h.head[0] = 'h'; r.h.head[1] = 'e';
	r.h.head[2] = 'a'; r.h.head[3] = 'd';

	r.h.id = 1;
	r.h.iview = 1;
	r.h.miview = - r.h.iview;
	VSET( temp, 0.0, 0.0, -1.414 );	/* Point we are looking at */
	MAT4X3PNT( aimpt, view2model, temp );
	r.h.cx = aimpt[0];		/* aimpoint */
	r.h.cy = aimpt[1];
	r.h.cz = aimpt[2];
	r.h.back = 1.414*viewsize/2.0;	/* backoff */
	r.h.e = - elevation;		/* RT and GIFT/SRIM are backward XXX */
	r.h.a = - azimuth;
	r.h.vert = viewsize;
	r.h.horz = viewsize;
	r.h.nvert = height;
	r.h.nhorz = width;
	r.h.maxrfl = MAXREFLECT;

	writerec( &r, outfp );

	/* XXX - write extra header records */
	bzero( &r, sizeof(r) );
	writerec( &r, outfp );
	writerec( &r, outfp );
}

mlib_setup() { return(1); }

a529 2

mlib_free() { ; }
@


7.1
log
@Release 2.3
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 6.1 87/07/11 07:59:41 mike Rel $ (BRL)";
d52 1
a52 1
 -f #		Grid size in pixels, default 512\n\
a78 3
/* Null function -- handle a miss */
raymiss() { ; }

d110 1
a110 1
	if( hitp->hit_dist < -1.0e-10 )  {
d275 1
a275 1
		if( pp->pt_outhit->hit_dist >= 1.0e-10 )  break;
d285 4
a288 1
	/* Check to see if eye is "inside" the solid */
d290 10
a299 4
		/* XXX */
		rt_log("hiteye:  GAK2, eye inside solid (%g)\n", hitp->hit_dist );
		for( pp=PartHeadp->pt_forw; pp != PartHeadp; pp = pp->pt_forw )
			rt_pr_pt( ap->a_rt_i, pp );
a301 1
	/*RT_HIT_NORM( hitp, pp->pt_inseg->seg_stp, &(ap->a_ray) );*/
d338 1
d340 6
d351 7
a357 3
	VMOVE( sub_ap.a_ray.r_pt, hitp->hit_point );
	VSUB2( sub_ap.a_ray.r_dir, firstray.r_pt, hitp->hit_point );
	VUNITIZE( sub_ap.a_ray.r_dir );
d523 1
a523 1
fprintf( stderr, "PREC %d, buf = %d, totbuf = %d\n", precnum, buf, totbuf );
@


6.1
log
@Release 2.0
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 5.1 87/06/24 22:15:46 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 1.6 87/05/30 07:04:37 mike Exp $ (BRL)";
@


1.6
log
@Added code for non-square views, single pixel (-b) debugging.
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 1.5 87/05/30 04:58:13 mike Locked $ (BRL)";
@


1.5
log
@Tolerance change
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 1.4 87/04/28 00:59:50 phil Locked $ (BRL)";
d46 2
a47 1
extern	int	npts;
a69 1
static int numpts;
d208 1
a208 1
view_init( ap, file, obj, npts, minus_o )
a215 7
	numpts = npts;		/* hang on to this for header */

	/* RT should do this for us... */
	if( minus_o == 0 ) {
		outfp = stdout;
	}

d226 1
a226 1
	rt_log( "Ray Spacing: %f rays/cm\n", 10.0*(npts/viewsize) );
d248 2
a249 2
	r.h.nvert = numpts;
	r.h.nhorz = numpts;
d380 2
a381 2
	r.f.h = (ap->a_x - npts/2) * viewsize/npts;
	r.f.v = (ap->a_y - npts/2) * viewsize/npts;
@


1.4
log
@changed curvature sign convention
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 1.5 87/04/28 00:56:25 phil Exp $ (BRL)";
d113 1
a113 1
	if( hitp->hit_dist < 0.0 )  {
@


1.3
log
@changed to new rt_pr_pt arg lists
@
text
@d7 1
a7 1
 *  a GIFT/SRIM format Radar file.  It tracks principle direction
d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 1.2 87/03/24 01:00:13 phil Locked $ (BRL)";
d63 1
a63 1
	vect_t	prin;		/* principle direction */
d136 5
a140 1
	RT_CURVE( &(rayp->curvature), hitp, pp->pt_inseg->seg_stp, &(ap->a_ray) );
d144 1
a144 1
	/* Compute the principal (specular) direction */
d149 1
a149 1
	VSUB2( rayp->prin, work, to_eye );
d161 1
a161 1
	 * Shoot another ray in the principle direction.
d167 1
a167 1
		VMOVE( sub_ap.a_ray.r_dir, rayp->prin );
d408 3
a410 3
	r.e.dx = rayinfo[depth-1].prin[0];	/* escape direction */
	r.e.dy = rayinfo[depth-1].prin[1];
	r.e.dz = rayinfo[depth-1].prin[2];
d423 1
a423 1
	printf( " p = (%f %f %f)\n", rp->prin[0], rp->prin[1], rp->prin[2] );
@


1.2
log
@fixed up eye in solid conditions
added new stub
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 1.1 87/03/16 17:04:15 phil Locked $ (BRL)";
d104 1
a104 1
		rt_pr_pt(pp);
d117 1
a117 1
			rt_pr_pt(pp);
d296 1
a296 1
			rt_pr_pt(pp);
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
static char RCSppview[] = "@@(#)$Header: viewrad.c,v 1.1 87/02/13 00:03:04 mike Exp $ (BRL)";
d115 3
a117 1
		rt_log("radhit:  GAK, eye inside solid\n");
d229 2
d281 1
a281 1
		if( pp->pt_outhit->hit_dist >= 0.0 )  break;
d283 2
a284 2
		rt_log("radhit:  no hit out front?\n");
		return(0);
d292 1
a292 1
	if( hitp->hit_dist < 0.0 )  {
d294 3
a296 1
		rt_log("hiteye:  GAK, eye inside solid\n");
d299 1
a299 1
	RT_HIT_NORM( hitp, pp->pt_inseg->seg_stp, &(ap->a_ray) );
d514 2
@
