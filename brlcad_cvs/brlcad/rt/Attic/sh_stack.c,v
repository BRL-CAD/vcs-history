head	11.13;
access;
symbols
	rel-4-5:11.11
	ctj-4-5-post:11.7
	ctj-4-5-pre:11.7
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1;
locks; strict;
comment	@ * @;


11.13
date	98.09.22.01.43.11;	author mike;	state dead;
branches;
next	11.12;

11.12
date	98.06.30.22.54.19;	author mike;	state Exp;
branches;
next	11.11;

11.11
date	97.12.31.09.01.40;	author mike;	state Exp;
branches;
next	11.10;

11.10
date	97.12.31.06.30.48;	author butler;	state Exp;
branches;
next	11.9;

11.9
date	97.12.09.04.46.14;	author butler;	state Exp;
branches;
next	11.8;

11.8
date	97.11.25.22.16.43;	author butler;	state Exp;
branches;
next	11.7;

11.7
date	96.08.31.08.29.28;	author butler;	state Exp;
branches;
next	11.6;

11.6
date	96.08.30.00.08.21;	author butler;	state Exp;
branches;
next	11.5;

11.5
date	95.10.20.04.43.53;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	95.09.16.00.13.47;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	95.06.03.00.44.31;	author butler;	state Exp;
branches;
next	11.2;

11.2
date	95.03.11.02.24.12;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.01.11;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.11.02.27.43;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.42.12;	author mike;	state Rel4_0;
branches;
next	9.8;

9.8
date	91.07.06.00.35.23;	author mike;	state Exp;
branches;
next	9.7;

9.7
date	91.02.17.18.50.32;	author mike;	state Exp;
branches;
next	9.6;

9.6
date	91.01.05.03.09.16;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	90.12.12.16.35.10;	author butler;	state Exp;
branches;
next	9.4;

9.4
date	90.12.10.21.16.21;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	90.12.08.08.58.16;	author butler;	state Exp;
branches;
next	9.2;

9.2
date	90.11.01.11.18.32;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.59.42;	author mike;	state Rel3_5;
branches;
next	8.3;

8.3
date	89.04.04.05.02.08;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.27.16.35.12;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.33.28;	author mike;	state Rel3_0;
branches;
next	7.3;

7.3
date	88.09.17.07.20.50;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	88.05.14.02.28.26;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.56.37;	author mike;	state Rel;
branches;
next	6.2;

6.2
date	87.09.16.04.29.00;	author mike;	state Exp;
branches;
next	6.1;

6.1
date	87.07.11.07.59.24;	author mike;	state Rel;
branches;
next	1.2;

1.2
date	87.07.02.04.14.56;	author phil;	state Exp;
branches;
next	1.1;

1.1
date	87.07.01.03.20.44;	author mike;	state Exp;
branches;
next	;


desc
@Routines for stacking material properties.
@


11.13
log
@Moved sh_*.c shaders from rt/ to liboptical/ directory.
Moved and split rt/material.h into h/shadefuncs.h and h/shadework.h
Changed calling sequence of mlib_setup() to get shader list head explicitly.
Initialization of shader library is now via optical_shader_init().

Note that the "proper" location of shade.c, material.c, and refract.c
(presently in the rt/ directory) are a bit muddled, as they will be
shared with libmultispectral/ shader functions, but aren't quite
wholesome and pure yet.  To minimize impact to Lee's ongoing shader
developments, they haven't been changed.
@
text
@/*
 *			S T A C K . C
 *
 *  Stack multiple material modules together
 *
 *  Author -
 *	Phillip Dykstra
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/rt/sh_stack.c,v 11.12 1998/06/30 22:54:19 mike Exp mike $ (BRL)";
#endif

#include "conf.h"

#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "./material.h"
#include "./rdebug.h"

HIDDEN int	stk_setup(), stk_render();
HIDDEN void	stk_print(), stk_free();

struct mfuncs stk_mfuncs[] = {
	{MF_MAGIC,	"stack",	0,		0,	0,
	stk_setup,	stk_render,	stk_print,	stk_free},

	{0,		(char *)0,	0,		0,	0,
	0,		0,		0,		0}
};

struct stk_specific {
	struct	mfuncs	*mfuncs[16];
	char	*udata[16];
};
#define STK_NULL	((struct stk_specific *)0)
#define STK_O(m)	offsetof(struct stk_specific, m)

struct bu_structparse stk_parse[] = {
	{"",	0,	(char *)0,	0,			FUNC_NULL }
};

/*
 *			S T K _ S E T U P
 *
 *  Returns 0 on failure, 1 on success.
 */
HIDDEN int
stk_setup( rp, matparm, dpp, mf_p, rtip )
register struct region *rp;
struct rt_vls	*matparm;	/* parameter string */
char		**dpp;		/* pointer to user data pointer */
struct mfuncs	*mf_p;
struct rt_i	*rtip;
{
	register struct stk_specific *sp;
	char	*cp, *start;
	int	i;
	int	inputs = 0;
	struct mfuncs *mfp;

	RT_VLS_CHECK( matparm );
	RT_CK_RTI(rtip);

	GETSTRUCT( sp, stk_specific );
	*dpp = (char *)sp;

	/*bu_struct_parse( matparm, stk_parse, (char *)sp );*/

	if(rdebug&RDEBUG_MATERIAL)
		rt_log( "stk_setup called with \"%s\"\n", RT_VLS_ADDR(matparm) );
	i = 0;
	start = cp = RT_VLS_ADDR(matparm);
	while( *cp != '\0' ) {
		if( *cp == ';' ) {
			*cp = '\0';
			if( i >= 16 ) {
				rt_log( "stk_setup: max levels exceeded\n" );
				return( 0 );
			}
			/* add one */
			if( dosetup(start, rp, &sp->udata[i], &sp->mfuncs[i],
				rtip) == 0 )  {
				inputs |= sp->mfuncs[i]->mf_inputs;
				i++;
			} else {
				/* XXX else clear entry? */
				rt_log("stk_setup problem\n");
			}
			start = ++cp;
		} else {
			cp++;
		}
	}
	if( start != cp ) {
		if( i >= 16 ) {
			rt_log( "stk_setup: max levels exceeded\n" );
			return( 0 );
		}
		/* add one */
		if( dosetup(start, rp, &sp->udata[i], &sp->mfuncs[i],
		    rtip ) == 0 )  {
			inputs |= sp->mfuncs[i]->mf_inputs;
			i++;
		} else {
			/* XXX else clear entry? */
		}
	}

	/* Request only those input bits needed by subordinate shaders */
	GETSTRUCT( mfp, mfuncs );
	bcopy( (char *)rp->reg_mfuncs, (char *)mfp, sizeof(*mfp) );
	mfp->mf_inputs = inputs;
	rp->reg_mfuncs = (genptr_t)mfp;
	return( 1 );
}

/*
 *  			S T K _ R E N D E R
 *  
 *  Evaluate all of the rendering functions in the stack.
 *
 *  Returns:
 *	0	stack processing aborted
 *	1	stack processed to completion
 */
HIDDEN
stk_render( ap, pp, swp, dp )
struct application	*ap;
struct partition	*pp;
struct shadework	*swp;
char	*dp;
{
	register struct stk_specific *sp =
		(struct stk_specific *)dp;
	int	i;
	int	ret_status;
	char	tmp[128];

	for( i = 0; i < 16 && sp->mfuncs[i] != NULL; i++ ) {
		if( rdebug&RDEBUG_SHADE)  {
			sprintf(tmp, "before stacked \"%s\" shader", sp->mfuncs[i]->mf_name);

			pr_shadework( tmp, swp );
		}

		ret_status = sp->mfuncs[i]->mf_render( ap, pp, swp,
			sp->udata[i] );

		if ( ! ret_status ) return ret_status;

	}
	return(1);
}

/*
 *			S T K _ P R I N T
 */
HIDDEN void
stk_print( rp, dp )
register struct region *rp;
char	*dp;
{
	register struct stk_specific *sp =
		(struct stk_specific *)dp;
	int	i;

	rt_log("~~~~starting stack print\n");

	for( i = 0; i < 16 && sp->mfuncs[i] != NULL; i++ ) {
		rt_log("~~~~stack entry %d:\n", i);
		sp->mfuncs[i]->mf_print( rp, sp->udata[i] );
	}

	rt_log("~~~~ending stack print\n");
}

/*
 *			S T K _ F R E E
 */
HIDDEN void
stk_free( cp )
char *cp;
{
	register struct stk_specific *sp =
		(struct stk_specific *)cp;
	int	i;

	for( i = 0; i < 16 && sp->mfuncs[i] != NULL; i++ ) {
		sp->mfuncs[i]->mf_free( sp->udata[i] );
	}

	rt_free( cp, "stk_specific" );
}

extern struct mfuncs *mfHead;	/* Head of list of materials */

dosetup( cp, rp, dpp, mpp, rtip )
char	*cp;
struct region	*rp;
char	**dpp;		/* udata pointer address */
char	**mpp;		/* mfuncs pointer address */
struct rt_i	*rtip;
{
	register struct mfuncs *mfp;
	struct rt_vls	arg;
	char	matname[32];
	int	i;

	RT_CK_RTI(rtip);

	if(rdebug&RDEBUG_MATERIAL)
		rt_log( "...starting \"%s\"\n", cp );

	/* skip leading white space */
	while( *cp == ' ' || *cp == '\t' )
		cp++;

	for( i = 0; i < 31 && *cp != '\0'; i++, cp++ ) {
		if( *cp == ' ' || *cp == '\t' ) {
			matname[i++] = '\0';
			break;
		} else
			matname[i] = *cp;
	}
	matname[i] = '\0';	/* ensure null termination */

	for( mfp=mfHead; mfp != MF_NULL; mfp = mfp->mf_forw )  {
		if( matname[0] != mfp->mf_name[0]  ||
		    strcmp( matname, mfp->mf_name ) != 0 )
			continue;
		goto found;
	}
	rt_log("stack_setup(%s):  material not known\n",
		matname );
	return(-1);

found:
	*mpp = (char *)mfp;
	*dpp = (char *)0;
	RT_VLS_INIT( &arg );
	rt_vls_strcat( &arg, cp );
	if( mfp->mf_setup( rp, &arg, dpp, mfp, rtip ) < 0 )  {
		/* What to do if setup fails? */
		return(-1);		/* BAD */
	}
	rt_vls_free( &arg );
	return(0);			/* OK */
}
@


11.12
log
@Can't make "struct mfuncs" a CONST, because the forward link needs
to be filled in at runtime, and some compilers put CONST data into
read-only pages (like FreeBSD).
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/rt/sh_stack.c,v 11.11 1997/12/31 09:01:40 mike Exp $ (BRL)";
@


11.11
log
@Required magic number to be first in mfunc table,
consistent with all other BRL-CAD magic numbers.
Required magic number to be initialized at compile time.
Added code to check the magic numbers.
Made the xxx_mfunc arrays CONST, so they can't get trashed by
runtime runaway pointer problems.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.10 1997/12/31 06:30:48 butler Exp mike $ (BRL)";
d34 1
a34 1
CONST struct mfuncs stk_mfuncs[] = {
@


11.10
log
@enhanced debugging message
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.9 1997/12/09 04:46:14 butler Exp butler $ (BRL)";
d34 3
a36 3
struct mfuncs stk_mfuncs[] = {
	"stack",	0,		0,		0,	0,
	stk_setup,	stk_render,	stk_print,	stk_free,
d38 2
a39 2
	(char *)0,	0,		0,		0,	0,
	0,		0,		0,		0
@


11.9
log
@zero return status causes stack to terminate early
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.8 1997/11/25 22:16:43 butler Exp butler $ (BRL)";
d148 1
d151 4
a154 2
		if( rdebug&RDEBUG_SHADE && i > 0 )  {
			pr_shadework( "before next stacked mf_render", swp );
@


11.8
log
@updated all shaders so that _setup had mfp and rtip parameters
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.7 1996/08/31 08:29:28 butler Exp butler $ (BRL)";
d132 4
d147 1
d153 6
a158 2
		if (!(sp->mfuncs[i]->mf_render( ap, pp, swp, sp->udata[i] )))
			break; 
@


11.7
log
@bu_struct_parse
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.6 1996/08/30 00:08:21 butler Exp butler $ (BRL)";
d148 2
a149 1
		(void)(sp->mfuncs[i]->mf_render( ap, pp, swp, sp->udata[i] ));
@


11.6
log
@structparse moved to libbu
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.5 1995/10/20 04:43:53 butler Exp butler $ (BRL)";
d78 1
a78 1
	/*bu_structparse( matparm, stk_parse, (char *)sp );*/
@


11.5
log
@edited mfuncs table to account for new "mf_flags" element in struct mfuncs.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.4 1995/09/16 00:13:47 mike Exp butler $ (BRL)";
d49 1
a49 1
struct structparse stk_parse[] = {
d78 1
a78 1
	/*rt_structparse( matparm, stk_parse, (char *)sp );*/
@


11.4
log
@Added more goodies.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /n/wolf/m/cad/rt/RCS/sh_stack.c,v 11.3 1995/06/03 00:44:31 butler Exp mike $ (BRL)";
d35 1
a35 1
	"stack",	0,		0,		0,
d38 1
a38 1
	(char *)0,	0,		0,		0,
@


11.3
log
@added new parameter to stk_setup
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.2 1995/03/11 02:24:12 mike Exp butler $ (BRL)";
d73 2
d206 2
@


11.2
log
@Added mfp parameter to mf_setup() call.
This allows the shader setup routine to know what name it was invoked by.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 11.1 95/01/04 10:01:11 mike Rel4_4 Locker: mike $ (BRL)";
d59 1
a59 1
stk_setup( rp, matparm, dpp )
d62 3
a64 1
char	**dpp;		/* pointer to user data pointer */
d90 2
a91 1
			if( dosetup(start, rp, &sp->udata[i], &sp->mfuncs[i]) == 0 )  {
d109 2
a110 1
		if( dosetup(start, rp, &sp->udata[i], &sp->mfuncs[i]) == 0 )  {
d193 1
a193 1
dosetup( cp, rp, dpp, mpp )
d198 1
d236 1
a236 1
	if( mfp->mf_setup( rp, &arg, dpp, mfp ) < 0 )  {
@


11.1
log
@Release_4.4
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 10.2 94/08/11 02:27:43 gdurf Exp $ (BRL)";
d231 1
a231 1
	if( mfp->mf_setup( rp, &arg, dpp ) < 0 )  {
@


10.2
log
@Added include of conf.h
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 10.1 1991/10/12 06:42:12 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 9.8 91/07/06 00:35:23 mike Exp $ (BRL)";
d21 2
@


9.8
log
@ANSI structure initialization
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 9.7 91/02/17 18:50:32 mike Exp $ (BRL)";
@


9.7
log
@(Belatedly) changed to call mlib_setup with VLS args
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 9.6 91/01/05 03:09:16 mike Exp $ (BRL)";
d48 1
a48 1
	"",	0,	(char *)0,	0,			FUNC_NULL
@


9.6
log
@Converted to new format for fmt entry in structparse
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 9.5 90/12/12 16:35:10 butler Exp $ (BRL)";
d194 1
d227 3
a229 1
	if( mfp->mf_setup( rp, cp, dpp ) < 0 )  {
d233 1
@


9.5
log
@modified to reflect changes in structparse format
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 9.4 90/12/10 21:16:21 mike Exp $ (BRL)";
d48 1
a48 1
	(char *)0, 0,(char *)0,	0,			FUNC_NULL
@


9.4
log
@'\0', not NULL, for characters.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 9.3 90/12/08 08:58:16 butler Exp $ (BRL)";
d48 1
a48 1
	(char *)0,(char *)0,	0,			FUNC_NULL
@


9.3
log
@changed material property parameter to be struct rt_vls
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 9.2 90/11/01 11:18:32 mike Exp $ (BRL)";
d78 1
a78 1
	while( *cp != NULL ) {
d80 1
a80 1
			*cp = NULL;
d204 1
a204 1
	for( i = 0; i < 31 && *cp != NULL; i++, cp++ ) {
@


9.2
log
@Improved printing and debugging.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/rt/RCS/sh_stack.c,v 9.1 89/05/19 05:59:42 mike Rel3_5 $ (BRL)";
d59 1
a59 1
char	*matparm;	/* parameter string */
d68 1
d75 1
a75 1
		rt_log( "stk_setup called with \"%s\"\n", matparm );
d77 1
a77 1
	start = cp = matparm;
@


9.1
log
@Release_3.5
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: sh_stack.c,v 8.3 89/04/04 05:02:08 mike Exp $ (BRL)";
a40 1
	char	st_file[128];	/* Filename */
a47 1
	"%s",	"file",		offsetofarray(struct stk_specific, st_file),		FUNC_NULL,
a70 1
	sp->st_file[0] = '\0';
d113 1
a113 1
	bcopy( rp->reg_mfuncs, (char *)mfp, sizeof(*mfp) );
d115 1
a115 1
	rp->reg_mfuncs = (char *)mfp;
d136 3
d152 12
a163 1
	rt_structprint(rp->reg_name, stk_parse, (char *)dp);
d188 1
a188 1
char	*rp;
@


8.3
log
@Converted to new way of representing structure offsets.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: stack.c,v 8.2 88/12/27 16:35:12 mike Locked $ (BRL)";
@


8.2
log
@Converted matparse --> structparse
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: stack.c,v 8.1 88/10/05 00:33:28 mike Locked $ (BRL)";
d46 1
d49 2
a50 2
	"%s",	"file",		(stroff_t)(STK_NULL->st_file),		FUNC_NULL,
	(char *)0,(char *)0,	(stroff_t)0,				FUNC_NULL
d74 1
a74 1
	/*rt_structparse( matparm, stk_parse, (stroff_t)sp );*/
d152 1
a152 1
	rt_structprint(rp->reg_name, stk_parse, (stroff_t)dp);
@


8.1
log
@Release_3.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: stack.c,v 7.3 88/09/17 07:20:50 mike Exp $ (BRL)";
d47 3
a49 3
struct matparse stk_parse[] = {
	"file",		(mp_off_ty)(STK_NULL->st_file),	"%s",
	(char *)0,	(mp_off_ty)0,			(char *)0
d73 1
a73 1
	/*mlib_parse( matparm, stk_parse, (mp_off_ty)sp );*/
d92 1
d151 1
a151 1
	mlib_print(rp->reg_name, stk_parse, (mp_off_ty)dp);
@


7.3
log
@The Cray C compilers are now better, so the #ifdef cray code
has been removed.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: stack.c,v 7.2 88/05/14 02:28:26 mike Locked $ (BRL)";
@


7.2
log
@lint fixes
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: stack.c,v 7.1 87/11/02 23:56:37 mike Locked $ (BRL)";
a47 1
#ifndef cray
a48 3
#else
	"file",		(mp_off_ty)1,			"%s",
#endif
@


7.1
log
@Release 2.3
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: stack.c,v 6.2 87/09/16 04:29:00 mike Exp $ (BRL)";
d29 2
a30 1
HIDDEN int stk_setup(), stk_render(), stk_print(), stk_free();
d141 1
a141 1
		sp->mfuncs[i]->mf_render( ap, pp, swp, sp->udata[i] );
d143 1
d149 1
a149 1
HIDDEN int
d160 1
a160 1
HIDDEN int
@


6.2
log
@Stacker allocates a new struct mfuncs for each stack,
with individually OR'ed together input bit-vectors.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: stack.c,v 6.1 87/07/11 07:59:24 mike Locked $ (BRL)";
@


6.1
log
@Release 2.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: stack.c,v 1.2 87/07/02 04:14:56 phil Exp $ (BRL)";
d32 1
a32 1
	"stack",	0,		0,		MFI_UV|MFI_NORMAL,
d69 2
d90 6
a95 2
			if( dosetup(start, rp, &sp->udata[i], &sp->mfuncs[i]) == 0 )
				i++;	/* XXX else clear entry? */
d107 6
a112 2
		if( dosetup(start, rp, &sp->udata[i], &sp->mfuncs[i]) == 0 )
			i++;	/* XXX else clear entry? */
d115 5
@


1.2
log
@cleaned up a bit
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@


1.1
log
@Initial revision
@
text
@d1 21
d76 2
a77 1
fprintf( stderr, "stk_setup called with \"%s\"\n", matparm );
d84 2
a85 2
				fprintf( stderr, "stk_setup: max levels exceeded\n" );
				break;
d88 1
a88 1
			if( dosetup(start, sp, i, rp, &sp->udata[i]) == 0 )
d95 9
d160 2
a161 4
dosetup( string, sp, n, rp, dpp )
char	*string;
register struct stk_specific *sp;
int	n;
d163 2
a164 1
char	**dpp;
d170 9
a178 3
fprintf( stderr, "...starting \"%s\"\n", string );
	for( i = 0; i < 31 && string[i] != NULL; i++ ) {
		if( string[i] == ' ' ) {
d182 1
a182 1
			matname[i] = string[i];
d197 3
a199 3
	sp->mfuncs[n] = mfp;
	sp->udata[n] = (char *)0;
	if( mfp->mf_setup( rp, &string[i], &sp->udata[n] ) < 0 )  {
@
