head	11.12;
access;
symbols
	ansi-20040405-merged:11.9.2.1
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.9
	premerge-autoconf:11.9
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.9
	autoconf-20031203:11.9
	autoconf-20031202:11.9
	autoconf-branch:11.9.0.10
	phong-branch:11.9.0.8
	photonmap-branch:11.9.0.6
	rel-6-1-DP:11.9
	windows-branch:11.9.0.4
	rel-6-0-2:11.7
	ansi-branch:11.9.0.2
	rel-6-0-1-branch:11.7.0.2
	hartley-6-0-post:11.8
	hartley-6-0-pre:11.7
	rel-6-0-1:11.7
	rel-6-0:11.7
	rel-5-4:11.5
	offsite-5-3-pre:11.7
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.5
	rel-5-0-beta:11.4
	rel-4-5:11.3
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1;
locks; strict;
comment	@ * @;


11.12
date	2004.05.21.17.31.09;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2004.05.10.15.30.49;	author erikg;	state Exp;
branches;
next	11.10;

11.10
date	2004.04.05.05.45.59;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2002.08.20.17.08.39;	author jra;	state Exp;
branches
	11.9.2.1;
next	11.8;

11.8
date	2002.08.15.20.55.50;	author hartley;	state Exp;
branches;
next	11.7;

11.7
date	2000.08.17.02.41.39;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	2000.07.25.16.39.48;	author butler;	state Exp;
branches;
next	11.5;

11.5
date	99.07.02.22.19.46;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	99.05.28.01.19.29;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.08.30.00.08.21;	author butler;	state Exp;
branches;
next	11.2;

11.2
date	95.12.06.17.57.53;	author pjt;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.01.25;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.11.02.45.40;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.42.18;	author mike;	state Rel4_0;
branches;
next	9.6;

9.6
date	91.05.16.14.49.21;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	91.02.20.00.51.32;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	91.01.05.03.09.23;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	90.12.12.16.35.16;	author butler;	state Exp;
branches;
next	9.2;

9.2
date	90.11.14.15.43.38;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.59.54;	author mike;	state Rel3_5;
branches;
next	1.2;

1.2
date	89.04.13.05.17.28;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	89.04.04.05.02.18;	author mike;	state Exp;
branches;
next	;

11.9.2.1
date	2002.09.19.18.02.16;	author morrison;	state Exp;
branches;
next	;


desc
@
Dummy (example) RT "view" module.
@


11.12
log
@moved to src/rt/
@
text
@/*
 *			V I E W D U M M Y . C
 *
 *  A dummy or example "view" module.
 *  This code may be used as a prototype for building a new application
 *  to the RT User-Interface (RTUIF) specification.
 *
 *  For more details, see:
 *  S. Muuss, ``Rapid Creation of Analysis Codes Using BRL-CAD:
 *  The RT View-Module Interface'', in the Proceedings of the
 *  BRL-CAD Symposium 1991.
 *
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 */
#ifndef lint
static const char RCSview[] = "@@(#)$Header: /n/xoff/cvs/brlcad/rt/viewdummy.c,v 11.11 2004/05/10 15:30:49 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"

#include "rtprivate.h"

/*
 *  If this variable is set to zero, then "air" solids in the model
 *  will be entirely discarded.
 *  If this variable is set non-zero, then "air" solids will be
 *  retained, and can be expected to show up in the partition lists.
 */
int	use_air = 0;		/* Handling of air in librt */

/*
 *  Viewing module specific "set" variables.
 *  Any additional variables that the user may be allowed to change
 *  should be listed here.
 *  They can then be accessed via a "set" command, either from
 *  the command line, or from within an animation script.
 */
struct bu_structparse view_parse[] = {
	"",	0, (char *)0,	0,	BU_STRUCTPARSE_FUNC_NULL
};

/*
 *  The usage message for this application.
 */
char usage[] = "\
Usage:  rtdummy [options] model.g objects... >file.rad\n\
Options:\n\
 -s #		Grid size in pixels, default 512\n\
 -a Az		Azimuth in degrees\n\
 -e Elev	Elevation in degrees\n\
 -M		Read matrix, cmds on stdin\n\
 -o file.rad	Output file name, else stdout\n\
 -x #		Set librt debug flags\n\
";

int	rayhit(register struct application *ap, struct partition *PartHeadp);
int	raymiss(register struct application *ap);

/*
 *  			V I E W _ I N I T
 *
 *  Called by main() at the start of a run.
 *  Returns 1 if framebuffer should be opened, else 0.
 */
view_init(register struct application *ap, char *file, char *obj, int minus_o)
{
	return(0);		/* no framebuffer needed */
}

/*
 *			V I E W _ 2 I N I T
 *
 *  The beginning of a frame.
 *  Called by do_frame() just before raytracing starts.
 */
void
view_2init(struct application *ap)
{
	ap->a_hit = rayhit;
	ap->a_miss = raymiss;
	ap->a_onehit = 1;
}

/*
 *			V I E W _ P I X E L
 *
 *  Called by worker() after the end of proccessing for each pixel.
 */
void
view_pixel(register struct application *ap)
{
}

/*
 *			V I E W _ E O L
 *
 *  Called by worker() at the end of each line.  Depricated.
 *  Any end-of-line processing should be done in view_pixel().
 */
void
view_eol(register struct application *ap)
{
}

/*
 *			V I E W _ E N D
 *
 *  Called in do_frame() at the end of a frame,
 *  just after raytracing completes.
 */
void
view_end(register struct application *ap)
{
}

/*
 *			V I E W _ S E T U P 
 *
 *  Called by do_prep(), just before rt_prep() is called, in do.c
 *  This allows the lighting model to get set up for this frame,
 *  e.g., generate lights, associate materials routines, etc.
 */
void
view_setup(struct rt_i *rtip)
{
}

/*
 *			V I E W _ C L E A N U P
 *
 *  Called by "clean" command, just before rt_clean() is called, in do.c
 */
void
view_cleanup(struct rt_i *rtip)
{
}

/*
 *			R A Y H I T
 *
 *  Called via a_hit linkage from rt_shootray() when ray hits.
 */
int
rayhit(register struct application *ap, struct partition *PartHeadp)
{
	bu_log("hit: 0x%x\n", ap->a_resource);

	return(1);	/* report hit to main routine */
}

/*
 *			R A Y M I S S
 *
 *  Called via a_miss linkage from rt_shootray() when ray misses.
 */
int
raymiss(register struct application *ap)
{
	bu_log("miss: 0x%x\n", ap->a_resource);

	return(0);
}

void application_init (void) {}
@


11.11
log
@change conf.h to a wrapped config.h
@
text
@d20 1
a20 1
static const char RCSview[] = "@@(#)$Header: /cvs/brlcad/rt/viewdummy.c,v 11.10 2004/04/05 05:45:59 morrison Exp $ (BRL)";
@


11.10
log
@merge of ansi-6-0-branch into head
@
text
@d20 1
a20 1
static const char RCSview[] = "@@(#)$Header$ (BRL)";
d23 5
a27 1
#include "conf.h"
@


11.9
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d20 1
a20 1
static const char RCSview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewdummy.c,v 11.7 2000/08/17 02:41:39 mike Exp $ (BRL)";
d65 2
a66 2
int	rayhit();
int	raymiss();
d74 1
a74 5
view_init( ap, file, obj, minus_o )
register struct application *ap;
char	*file;
char	*obj;
int	minus_o;
d86 1
a86 2
view_2init( ap )
struct application *ap;
d99 1
a99 2
view_pixel( ap )
register struct application *ap;
d110 1
a110 2
view_eol( ap )
register struct application *ap;
d121 1
a121 2
view_end( ap )
register struct application	*ap;
d133 1
a133 2
view_setup( rtip )
struct rt_i	*rtip;
d143 1
a143 2
view_cleanup( rtip )
struct rt_i	*rtip;
d153 1
a153 3
rayhit( ap, PartHeadp )
register struct application *ap;
struct partition *PartHeadp;
d166 1
a166 2
raymiss( ap )
register struct application *ap;
d173 1
a173 1
void application_init () {}
@


11.9.2.1
log
@Initial ANSIfication
@
text
@d20 1
a20 1
static const char RCSview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewdummy.c,v 11.9 2002/08/20 17:08:39 jra Exp $ (BRL)";
d65 2
a66 2
int	rayhit(register struct application *ap, struct partition *PartHeadp);
int	raymiss(register struct application *ap);
d74 5
a78 1
view_init(register struct application *ap, char *file, char *obj, int minus_o)
d90 2
a91 1
view_2init(struct application *ap)
d104 2
a105 1
view_pixel(register struct application *ap)
d116 2
a117 1
view_eol(register struct application *ap)
d128 2
a129 1
view_end(register struct application *ap)
d141 2
a142 1
view_setup(struct rt_i *rtip)
d152 2
a153 1
view_cleanup(struct rt_i *rtip)
d163 3
a165 1
rayhit(register struct application *ap, struct partition *PartHeadp)
d178 2
a179 1
raymiss(register struct application *ap)
d186 1
a186 1
void application_init (void) {}
@


11.8
log
@Converted from K&R to ANSI C - RFH
@
text
@d65 2
a66 2
int	rayhit(register struct application *ap, struct partition *PartHeadp);
int	raymiss(register struct application *ap);
d74 5
a78 1
view_init(register struct application *ap, char *file, char *obj, int minus_o)
d90 2
a91 1
view_2init(struct application *ap)
d104 2
a105 1
view_pixel(register struct application *ap)
d116 2
a117 1
view_eol(register struct application *ap)
d128 2
a129 1
view_end(register struct application *ap)
d141 2
a142 1
view_setup(struct rt_i *rtip)
d152 2
a153 1
view_cleanup(struct rt_i *rtip)
d163 3
a165 1
rayhit(register struct application *ap, struct partition *PartHeadp)
d178 2
a179 1
raymiss(register struct application *ap)
d186 1
a186 1
void application_init (void) {}
@


11.7
log
@
Added "const" to RCSid, to quiet Gnu C compilers.
@
text
@d20 1
a20 1
static const char RCSview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewdummy.c,v 11.6 2000/07/25 16:39:48 butler Exp $ (BRL)";
d65 2
a66 2
int	rayhit();
int	raymiss();
d74 1
a74 5
view_init( ap, file, obj, minus_o )
register struct application *ap;
char	*file;
char	*obj;
int	minus_o;
d86 1
a86 2
view_2init( ap )
struct application *ap;
d99 1
a99 2
view_pixel( ap )
register struct application *ap;
d110 1
a110 2
view_eol( ap )
register struct application *ap;
d121 1
a121 2
view_end( ap )
register struct application	*ap;
d133 1
a133 2
view_setup( rtip )
struct rt_i	*rtip;
d143 1
a143 2
view_cleanup( rtip )
struct rt_i	*rtip;
d153 1
a153 3
rayhit( ap, PartHeadp )
register struct application *ap;
struct partition *PartHeadp;
d166 1
a166 2
raymiss( ap )
register struct application *ap;
d173 1
a173 1
void application_init () {}
@


11.6
log
@Many patches for warning-free compilation on Linux.
Moved rdebug.h to h/rtprivate.h
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewdummy.c,v 11.5 1999/07/02 22:19:46 mike Exp $ (BRL)";
@


11.5
log
@
Removed dependence on compat4.h
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewdummy.c,v 11.4 1999/05/28 01:19:29 mike Exp $ (BRL)";
d30 1
a30 1
#include "./rdebug.h"
@


11.4
log
@
sed4
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /c/CVS/brlcad/rt/viewdummy.c,v 11.3 1996/08/30 00:08:21 butler Exp $ (BRL)";
d48 1
a48 1
	"",	0, (char *)0,	0,	FUNC_NULL
@


11.3
log
@structparse moved to libbu
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /m/cad/rt/RCS/viewdummy.c,v 11.2 1995/12/06 17:57:53 pjt Exp butler $ (BRL)";
d167 1
a167 1
	rt_log("hit: 0x%x\n", ap->a_resource);
d181 1
a181 1
	rt_log("miss: 0x%x\n", ap->a_resource);
@


11.2
log
@Added a stub for application_init()
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /m/cad/rt/RCS/viewdummy.c,v 11.1 1995/01/04 10:01:25 mike Rel4_4 pjt $ (BRL)";
d47 1
a47 1
struct structparse view_parse[] = {
@


11.1
log
@Release_4.4
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /m/cad/rt/RCS/viewdummy.c,v 10.2 94/08/11 02:45:40 gdurf Exp $ (BRL)";
d185 2
@


10.2
log
@Added include of conf.h
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /m/cad/rt/RCS/viewdummy.c,v 10.1 1991/10/12 06:42:18 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /m/cad/rt/RCS/viewdummy.c,v 9.6 91/05/16 14:49:21 mike Exp $ (BRL)";
d22 2
@


9.6
log
@Added comments
@
text
@d20 1
a20 1
static char RCSview[] = "@@(#)$Header: /m/cad/rt/RCS/view.c,v 9.16 91/03/13 21:15:41 mike Exp $ (BRL)";
@


9.5
log
@Added new view-module interface called view_setup() which is used
for initializing material properties, lights, etc.
It compliments view_cleanup(), and finally removed knowledge of
the view.c materials (and all the shaders) from the RT "top half".
@
text
@d1 21
a21 1
/* dummy view module */
d27 1
a27 1
#include "./material.h"
d30 6
a35 2
extern struct resource resource[];

a36 1
int	using_mlib = 0;		/* Material routines NOT used */
d38 7
a44 1
/* Viewing module specific "set" variables */
d49 3
d63 2
a64 2
int	dummyhit();
int	dummymiss();
d69 1
a69 1
 *  Called at the start of a run.
d74 3
a76 1
char *file, *obj;
a77 4
	ap->a_hit = dummyhit;
	ap->a_miss = dummymiss;
	ap->a_onehit = 1;

d81 6
a86 1
/* beginning of a frame */
d91 3
d96 7
a102 2
/* end of each pixel */
void	view_pixel(ap)
d107 8
a114 2
/* end of each line */
void	view_eol(ap)
d119 11
a129 2
/* end of a frame */
void	view_end() {}
d131 12
a142 1
void	view_setup() {}
d144 10
a153 2
/* Associated with "clean" command, before new tree is loaded  */
void	view_cleanup() {}
d155 5
d161 1
a161 1
dummyhit( ap, PartHeadp )
d170 5
d176 1
a176 1
dummymiss( ap )
@


9.4
log
@Converted to new format for fmt entry in structparse
@
text
@d73 2
@


9.3
log
@modified to reflect changes in structparse format
@
text
@d17 1
a17 1
	(char *)0, 0, (char *)0,	0,	FUNC_NULL
@


9.2
log
@As part of "clean" command, call "view_cleanup()", to allow
viewing module the opportunity to clean up things like implicit
light sources, etc.
@
text
@d17 1
a17 1
	(char *)0,(char *)0,	0,			FUNC_NULL
@


9.1
log
@Release_3.5
@
text
@d73 3
@


1.2
log
@Clean version that "works"
@
text
@@


1.1
log
@Initial revision
@
text
@a47 6
	printf("\n");
	printf("view_init: ap->a_resource = 0x%x\n", ap->a_resource );
	printf("view_init: &resource[0] = 0x%x\n", &resource[0] );
		ap->a_resource = &resource[0];
	printf("\n");

a55 2
	printf("\n");
	printf("view_2init: ap->a_resource = 0x%x\n", ap->a_resource );
d59 4
a62 1
void	view_pixel() {}
d65 4
a68 1
void	view_eol() {}
d78 1
a78 1
	printf("hit: 0x%x\n", ap->a_resource);
d84 1
a84 1
dummymiss( ap, PartHeadp )
a85 1
struct partition *PartHeadp;
d87 1
a87 1
	/*printf("miss: 0x%x\n", ap->a_resource);*/
@
