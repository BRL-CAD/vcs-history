head	11.20;
access;
symbols
	ansi-20040405-merged:11.16.2.2
	postmerge-20040405-ansi:11.18
	premerge-20040404-ansi:11.17
	postmerge-autoconf:11.17
	autoconf-freeze:11.16.10.2
	premerge-autoconf:11.17
	postmerge-20040315-windows:11.17
	premerge-20040315-windows:11.17
	windows-20040315-freeze:11.16.4.1
	autoconf-20031203:11.16
	autoconf-20031202:11.16
	autoconf-branch:11.16.0.10
	phong-branch:11.16.0.8
	photonmap-branch:11.16.0.6
	rel-6-1-DP:11.16
	windows-branch:11.16.0.4
	rel-6-0-2:11.14
	ansi-branch:11.16.0.2
	rel-6-0-1-branch:11.14.0.2
	hartley-6-0-post:11.15
	hartley-6-0-pre:11.14
	rel-6-0-1:11.14
	rel-6-0:11.14
	rel-5-4:11.6.2.1
	offsite-5-3-pre:11.13
	rel-5-3:11.6
	rel-5-2:11.6
	rel-5-1-branch:11.6.0.2
	rel-5-1:11.6
	rel-5-0:11.6
	rel-5-0-beta:11.4
	rel-4-5:11.3
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.20
date	2004.05.21.18.07.38;	author morrison;	state dead;
branches;
next	11.19;

11.19
date	2004.05.10.15.30.47;	author erikg;	state Exp;
branches;
next	11.18;

11.18
date	2004.04.05.07.40.23;	author morrison;	state Exp;
branches;
next	11.17;

11.17
date	2004.02.02.17.39.30;	author morrison;	state Exp;
branches;
next	11.16;

11.16
date	2002.08.20.17.08.20;	author jra;	state Exp;
branches
	11.16.2.1
	11.16.4.1
	11.16.10.1;
next	11.15;

11.15
date	2002.08.15.20.55.30;	author hartley;	state Exp;
branches;
next	11.14;

11.14
date	2001.06.14.13.23.43;	author jra;	state Exp;
branches;
next	11.13;

11.13
date	2000.07.25.17.25.28;	author butler;	state Exp;
branches;
next	11.12;

11.12
date	2000.07.25.16.49.31;	author butler;	state Exp;
branches;
next	11.11;

11.11
date	2000.07.24.22.22.11;	author mike;	state Exp;
branches;
next	11.10;

11.10
date	2000.07.24.19.27.31;	author mike;	state Exp;
branches;
next	11.9;

11.9
date	2000.07.12.21.58.03;	author mike;	state Exp;
branches;
next	11.8;

11.8
date	2000.07.08.04.01.10;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	2000.07.08.01.41.21;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	99.07.27.17.04.28;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	99.07.02.19.18.31;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	98.07.02.20.55.06;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	96.08.31.11.12.44;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.07.28.20.33.21;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.51.38;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.09.19.55.45;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	93.03.05.21.52.14;	author butler;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.36.49;	author mike;	state Rel4_0;
branches;
next	1.5;

1.5
date	91.02.08.22.43.32;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	90.10.17.16.50.59;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	90.10.16.11.19.13;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	90.10.11.06.08.25;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	90.10.11.02.16.12;	author mike;	state Exp;
branches;
next	;

11.6.2.1
date	2001.07.11.12.32.07;	author jra;	state Exp;
branches;
next	;

11.16.2.1
date	2002.09.19.18.01.58;	author morrison;	state Exp;
branches;
next	11.16.2.2;

11.16.2.2
date	2004.03.17.21.21.48;	author morrison;	state Exp;
branches;
next	;

11.16.4.1
date	2004.03.11.23.45.47;	author morrison;	state Exp;
branches;
next	;

11.16.10.1
date	2004.02.12.19.41.24;	author erikg;	state Exp;
branches;
next	11.16.10.2;

11.16.10.2
date	2004.03.15.14.07.33;	author erikg;	state Exp;
branches;
next	;


desc
@libwdb support for writing pipes and particles.
@


11.20
log
@moved to src/
@
text
@/*
 *			P I P E . C
 *
 *  Support for particles and pipes.
 *  Library for writing geometry databases from arbitrary procedures.
 *
 *  Note that routines which are passed point_t or vect_t or mat_t
 *  parameters (which are call-by-address) must be VERY careful to
 *  leave those parameters unmodified (eg, by scaling), so that the
 *  calling routine is not surprised.
 *
 *  Return codes of 0 are OK, -1 signal an error.
 *
 *  Authors -
 *	Michael John Muuss
 *	Susanne L. Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char part_RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libwdb/pipe.c,v 11.19 2004/05/10 15:30:47 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "wdb.h"


extern int rt_pipe_ck( const struct bu_list *headp );


/*
 *			M K _ P A R T I C L E
 *
 *
 *  Returns -
 *	0	OK
 *	<0	failure
 */
int
mk_particle(struct rt_wdb *fp, const char *name, fastf_t *vertex, fastf_t *height, double vradius, double hradius)
{
	struct rt_part_internal	*part;

	BU_GETSTRUCT( part, rt_part_internal );
	part->part_magic = RT_PART_INTERNAL_MAGIC;
	VMOVE( part->part_V, vertex );
	VMOVE( part->part_H, height );
	part->part_vrad = vradius;
	part->part_hrad = hradius;
	part->part_type = 0;		/* sanity, unused */

	return wdb_export( fp, name, (genptr_t)part, ID_PARTICLE, mk_conv2mm );
}


/*
 *			M K _ P I P E
 *
 *  Note that the linked list of pipe segments headed by 'headp'
 *  must be freed by the caller.  mk_pipe_free() can be used.
 *
 *  Returns -
 *	0	OK
 *	<0	failure
 */
int
mk_pipe(struct rt_wdb *fp, const char *name, struct bu_list *headp)
{
	struct rt_pipe_internal		*pipe;
	int				ret;

	if( rt_pipe_ck( headp ) )
	{
		bu_log( "mk_pipe: BAD PIPE SOLID (%s)\n" , name );
		return( 1 );
	}

	BU_GETSTRUCT( pipe, rt_pipe_internal );
	pipe->pipe_magic = RT_PIPE_INTERNAL_MAGIC;
	BU_LIST_INIT( &pipe->pipe_segs_head );
	/* "borrow" linked list from caller */
	BU_LIST_APPEND_LIST( &pipe->pipe_segs_head, headp );

	ret = wdb_export( fp, name, (genptr_t)pipe, ID_PIPE, mk_conv2mm );

	/* "return" linked list to caller */
	BU_LIST_APPEND_LIST( headp, &pipe->pipe_segs_head );
	return ret;
}

/*
 *			M K _ P I P E _ F R E E
 *
 *  Release the storage from a list of pipe segments.
 *  The head is left in initialized state (ie, forward & back point to head).
 */
void
mk_pipe_free( struct bu_list *headp )
{
	register struct wdb_pipept	*wp;

	while( BU_LIST_WHILE( wp, wdb_pipept, headp ) )  {
		BU_LIST_DEQUEUE( &wp->l );
		bu_free( (char *)wp, "mk_pipe_free" );
	}
}


/*
 *		M K _ A D D _ P I P E _ P T
 *
 *	Add another pipe segment to the linked list of pipe segents
 *
 */
void
mk_add_pipe_pt(
	struct bu_list *headp,
	const point_t coord,
	double od,
	double id,
	double bendradius )
{
	struct wdb_pipept *new;

	BU_CKMAG( headp, WDB_PIPESEG_MAGIC, "pipe point" )

	BU_GETSTRUCT( new, wdb_pipept );
	new->l.magic = WDB_PIPESEG_MAGIC;
	new->pp_od = od;
	new->pp_id = id;
	new->pp_bendradius = bendradius;
	VMOVE( new->pp_coord, coord );
	BU_LIST_INSERT( headp, &new->l );
}

/*
 *	M K _ P I P E _ I N I T
 *
 *	initialize a linked list of pipe segments with the first segment
 */
void
mk_pipe_init( struct bu_list *headp )
{
	BU_LIST_INIT( headp );
	headp->magic = WDB_PIPESEG_MAGIC;
}
@


11.19
log
@change conf.h to a wrapped config.h
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /cvs/brlcad/libwdb/pipe.c,v 11.18 2004/04/05 07:40:23 morrison Exp $ (BRL)";
@


11.18
log
@merge of ansi-6-0-branch into HEAD
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header$ (BRL)";
d31 5
a35 1
#include "conf.h"
@


11.17
log
@update copyright to include span through 2003
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.16 2002/08/20 17:08:20 jra Exp $ (BRL)";
d56 1
a56 7
mk_particle( fp, name, vertex, height, vradius, hradius )
struct rt_wdb	*fp;
const char	*name;
point_t	vertex;
vect_t	height;
double	vradius;
double	hradius;
d83 1
a83 4
mk_pipe( fp, name, headp )
struct rt_wdb		*fp;
const char			*name;
struct bu_list	*headp;
@


11.16
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1990 by the United States Army.
d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.14 2001/06/14 13:23:43 jra Exp $ (BRL)";
@


11.16.4.1
log
@sync to HEAD...
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/libwdb/pipe.c,v 11.17 2004/02/02 17:39:30 morrison Exp $ (BRL)";
@


11.16.10.1
log
@merge from HEAD
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.17 2004/02/02 17:39:30 morrison Exp $ (BRL)";
@


11.16.10.2
log
@merge from head
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.16.10.1 2004/02/12 19:41:24 erikg Exp $ (BRL)";
@


11.16.2.1
log
@Initial ANSIfication
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.16 2002/08/20 17:08:20 jra Exp $ (BRL)";
d56 7
a62 1
mk_particle(struct rt_wdb *fp, const char *name, fastf_t *vertex, fastf_t *height, double vradius, double hradius)
d89 4
a92 1
mk_pipe(struct rt_wdb *fp, const char *name, struct bu_list *headp)
@


11.16.2.2
log
@sync branch with HEAD
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header$ (BRL)";
@


11.15
log
@Converted from K&R to ANSI C - RFH
@
text
@d56 7
a62 1
mk_particle(struct rt_wdb *fp, const char *name, fastf_t *vertex, fastf_t *height, double vradius, double hradius)
d89 4
a92 1
mk_pipe(struct rt_wdb *fp, const char *name, struct bu_list *headp)
@


11.14
log
@mk_pipe() was passing bogus argument to wdb_export()
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.13 2000/07/25 17:25:28 butler Exp $ (BRL)";
d56 1
a56 7
mk_particle( fp, name, vertex, height, vradius, hradius )
struct rt_wdb	*fp;
const char	*name;
point_t	vertex;
vect_t	height;
double	vradius;
double	hradius;
d83 1
a83 4
mk_pipe( fp, name, headp )
struct rt_wdb		*fp;
const char			*name;
struct bu_list	*headp;
@


11.13
log
@Syncronized extern with other changes
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.12 2000/07/25 16:49:31 butler Exp $ (BRL)";
d109 1
a109 1
	ret = wdb_export( fp, name, (genptr_t)&pipe, ID_PIPE, mk_conv2mm );
@


11.12
log
@Better structure for #if code in nmg.c, added needed extern in pipe.c
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.11 2000/07/24 22:22:11 mike Exp $ (BRL)";
d43 2
a44 1
extern int rt_pipe_ck( struct wdb_pipept *headp);
@


11.11
log
@
More new-libwdb-related cleanups
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.10 2000/07/24 19:27:31 mike Exp $ (BRL)";
d42 3
@


11.10
log
@
Changed mged/typin.c to start using libwdb interfaces.
Which means mged/ged.c now also opens a libwdb interface.
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.9 2000/07/12 21:58:03 mike Exp $ (BRL)";
d88 1
a88 1
struct wdb_pipept	*headp;
d103 1
a103 1
	BU_LIST_APPEND_LIST( &pipe->pipe_segs_head, &headp->l );
d108 1
a108 1
	BU_LIST_APPEND_LIST( &headp->l, &pipe->pipe_segs_head );
d119 1
a119 1
mk_pipe_free( struct wdb_pipept *headp )
d123 1
a123 1
	while( BU_LIST_WHILE( wp, wdb_pipept, &headp->l ) )  {
d138 1
a138 1
	struct wdb_pipept *headp,
d154 1
a154 1
	BU_LIST_INSERT( &headp->l, &new->l );
d163 1
a163 1
mk_pipe_init( struct wdb_pipept *head )
d165 2
a166 2
	BU_LIST_INIT( &head->l );
	head->l.magic = WDB_PIPESEG_MAGIC;
a167 1

@


11.9
log
@
New version of LIBWDB which takes a (struct rt_wdb *) rather than a
(FILE *) as the first parameter.
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.8 2000/07/08 04:01:10 mike Exp $ (BRL)";
d54 1
a54 1
char	*name;
d87 1
a87 1
char			*name;
@


11.8
log
@
Modified to allow mk_fwrite_internal() to free the objects.
Added flag variable mk_version to indicate what database version to be written.
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.7 2000/07/08 01:41:21 mike Exp $ (BRL)";
d53 1
a53 1
FILE	*fp;
d70 1
a70 1
	return mk_export_fwrite( fp, name, (genptr_t)part, ID_PARTICLE );
d86 1
a86 1
FILE			*fp;
d105 1
a105 1
	ret = mk_export_fwrite( fp, name, (genptr_t)&pipe, ID_PIPE );
d119 1
a119 2
mk_pipe_free( headp )
register struct wdb_pipept	*headp;
d137 6
a142 4
mk_add_pipe_pt( headp, coord, od, id, bendradius )
struct wdb_pipept *headp;
point_t coord;
fastf_t od, id, bendradius;
d163 1
a163 2
mk_pipe_init( head )
struct wdb_pipept *head;
@


11.7
log
@
const RCSid
@
text
@d28 1
a28 1
static const char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.6 1999/07/27 17:04:28 jra Exp $ (BRL)";
d60 1
a60 1
	struct rt_part_internal	part;
d62 7
a68 6
	part.part_magic = RT_PART_INTERNAL_MAGIC;
	VMOVE( part.part_V, vertex );
	VMOVE( part.part_H, height );
	part.part_vrad = vradius;
	part.part_hrad = hradius;
	part.part_type = 0;		/* sanity, unused */
d70 1
a70 1
	return mk_export_fwrite( fp, name, (genptr_t)&part, ID_PARTICLE );
d90 1
a90 1
	struct rt_pipe_internal		pipe;
d99 3
a101 2
	pipe.pipe_magic = RT_PIPE_INTERNAL_MAGIC;
	BU_LIST_INIT( &pipe.pipe_segs_head );
d103 1
a103 1
	BU_LIST_APPEND_LIST( &pipe.pipe_segs_head, &headp->l );
d108 1
a108 1
	BU_LIST_APPEND_LIST( &headp->l, &pipe.pipe_segs_head );
@


11.6
log
@mk_pipe_init() had excess parameters.
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.5 1999/07/02 19:18:31 mike Exp $ (BRL)";
@


11.6.2.1
log
@Backporting bug fixes for release 5.4
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.6 1999/07/27 17:04:28 jra Exp $ (BRL)";
d89 1
a89 1
	struct rt_pipe_internal		*pipe;
d98 2
a99 3
	BU_GETSTRUCT( pipe, rt_pipe_internal );
	pipe->pipe_magic = RT_PIPE_INTERNAL_MAGIC;
	BU_LIST_INIT( &pipe->pipe_segs_head );
d101 1
a101 1
	BU_LIST_APPEND_LIST( &pipe->pipe_segs_head, &headp->l );
d103 1
a103 1
	ret = mk_export_fwrite( fp, name, (genptr_t)pipe, ID_PIPE );
d106 1
a106 1
	BU_LIST_APPEND_LIST( &headp->l, &pipe->pipe_segs_head );
@


11.5
log
@
Eliminated dependency on compat4.h
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.4 1998/07/02 20:55:06 jra Exp $ (BRL)";
d160 1
a160 1
mk_pipe_init( head, coord, od, id, bendradius )
a161 2
point_t coord;
fastf_t od, id, bendradius;
a164 4
	head->pp_od = od;
	head->pp_id = id;
	head->pp_bendradius = bendradius;
	VMOVE( head->pp_coord, coord );
@


11.4
log
@Added mk_add_pipe_pt() and mk_pipe_init().
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/pipe.c,v 11.3 1996/08/31 11:12:44 mike Exp $ (BRL)";
d94 1
a94 1
		rt_log( "mk_pipe: BAD PIPE SOLID (%s)\n" , name );
d99 1
a99 1
	RT_LIST_INIT( &pipe.pipe_segs_head );
d101 1
a101 1
	RT_LIST_APPEND_LIST( &pipe.pipe_segs_head, &headp->l );
d106 1
a106 1
	RT_LIST_APPEND_LIST( &headp->l, &pipe.pipe_segs_head );
d122 3
a124 3
	while( RT_LIST_WHILE( wp, wdb_pipept, &headp->l ) )  {
		RT_LIST_DEQUEUE( &wp->l );
		rt_free( (char *)wp, "mk_pipe_free" );
@


11.3
log
@bu.h
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 11.2 1995/07/28 20:33:21 jra Exp mike $ (BRL)";
d127 46
@


11.2
log
@mods for new definition of pipe solid.
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 11.1 1995/01/04 09:51:38 mike Rel4_4 jra $ (BRL)";
d36 1
d38 1
a38 1
#include "rtlist.h"
@


11.1
log
@Release_4.4
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 10.3 94/08/09 19:55:45 gdurf Exp $ (BRL)";
d86 1
a86 1
struct wdb_pipeseg	*headp;
d91 6
d117 1
a117 1
register struct wdb_pipeseg	*headp;
d119 1
a119 1
	register struct wdb_pipeseg	*wp;
d121 1
a121 1
	while( RT_LIST_WHILE( wp, wdb_pipeseg, &headp->l ) )  {
@


10.3
log
@Added include of conf.h
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 10.2 1993/03/05 21:52:14 butler Exp gdurf $ (BRL)";
@


10.2
log
@changed bogus call to RT_LIST_LOOP to RT_LIST_WHILE
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 10.1 91/10/12 06:36:49 mike Rel4_0 Locker: butler $ (BRL)";
d31 1
@


10.1
log
@Release_4.0
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 1.5 91/02/08 22:43:32 mike Exp $ (BRL)";
d114 1
a114 1
	while( RT_LIST_LOOP( wp, wdb_pipeseg, &headp->l ) )  {
@


1.5
log
@Converted to new LIBRT import/export interface
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 1.4 90/10/17 16:50:59 mike Exp $ (BRL)";
@


1.4
log
@Used wrong rtlist macro
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 1.3 90/10/16 11:19:13 mike Exp $ (BRL)";
a34 1
#include "db.h"
d37 2
d58 1
a58 5
	union record	rec;
	point_t		vert;
	vect_t		hi;
	fastf_t		vrad;
	fastf_t		hrad;
d60 6
a65 5
	/* Convert from user units to mm */
	VSCALE( vert, vertex, mk_conv2mm );
	VSCALE( hi, height, mk_conv2mm );
	vrad = vradius * mk_conv2mm;
	hrad = hradius * mk_conv2mm;
d67 1
a67 12
	bzero( (char *)&rec, sizeof(rec) );
	rec.part.p_id = DBID_PARTICLE;
	NAMEMOVE(name,rec.part.p_name);

	htond( rec.part.p_v, vert, 3 );
	htond( rec.part.p_h, hi, 3 );
	htond( rec.part.p_vrad, &vrad, 1 );
	htond( rec.part.p_hrad, &hrad, 1 );

	if( fwrite( (char *) &rec, sizeof(rec), 1, fp) != 1 )
		return(-1);
	return(0);
d87 2
a88 7
	register struct exported_pipeseg *ep;
	register struct wdb_pipeseg	*psp;
	struct wdb_pipeseg		tmp;
	int		count;
	int		ngran;
	int		nbytes;
	union record	*rec;
d90 4
a93 20
	/* Count number of segments, verify that last seg is an END seg */
	count = 0;
	for( RT_LIST( psp, wdb_pipeseg, &headp->l ) )  {
		count++;
		switch( psp->ps_type )  {
		case WDB_PIPESEG_TYPE_END:
			if( RT_LIST_NEXT_NOT_HEAD( psp, &headp->l ) )
				return(-1);	/* Inconsistency in list */
			break;
		case WDB_PIPESEG_TYPE_LINEAR:
		case WDB_PIPESEG_TYPE_BEND:
			if( RT_LIST_NEXT_IS_HEAD( psp, &headp->l ) )
				return(-2);	/* List ends w/o TYPE_END */
			break;
		default:
			return(-3);		/* unknown segment type */
		}
	}
	if( count <= 1 )
		return(-4);			/* Not enough for 1 pipe! */
d95 1
a95 9
	/* Determine how many whole granules will be required */
	nbytes = sizeof(struct pipe_wire_rec) -
		sizeof(struct exported_pipeseg) +
		count * sizeof(struct exported_pipeseg);
	ngran = (nbytes + sizeof(union record) - 1) / sizeof(union record);
	nbytes = ngran * sizeof(union record);
	if( (rec = (union record *)malloc( nbytes )) == (union record *)0 )
		return(-5);
	bzero( (char *)rec, nbytes );
d97 3
a99 26
	rec->pw.pw_id = DBID_PIPE;
	NAMEMOVE( name, rec->pw.pw_name );
	rec->pw.pw_count = ngran;

	/* Convert the pipe segments to external form */
	ep = &rec->pw.pw_data[0];
	for( RT_LIST( psp, wdb_pipeseg, &headp->l ), ep++ )  {
		/* Avoid need for htonl() here */
		ep->eps_type[0] = (char)psp->ps_type;
		/* Convert from user units to mm */
		VSCALE( tmp.ps_start, psp->ps_start, mk_conv2mm );
		VSCALE( tmp.ps_bendcenter, psp->ps_bendcenter, mk_conv2mm );
		tmp.ps_id = psp->ps_id * mk_conv2mm;
		tmp.ps_od = psp->ps_od * mk_conv2mm;
		htond( ep->eps_start, tmp.ps_start, 3 );
		htond( ep->eps_bendcenter, tmp.ps_bendcenter, 3 );
		htond( ep->eps_id, &tmp.ps_id, 1 );
		htond( ep->eps_od, &tmp.ps_od, 1 );
	}

	if( fwrite( (char *) rec, nbytes, 1, fp) != 1 )  {
		free( (char *)rec );
		return(-10);
	}
	free( (char *)rec );
	return(0);
d116 1
a116 1
		free( (char *)wp );
@


1.3
log
@Changed to using rtlist.h
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/pipe.c,v 1.2 90/10/11 06:08:25 mike Exp $ (BRL)";
d114 1
a114 1
			if( RT_LIST_MORE( psp, wdb_pipeseg, &headp->l ) )
d119 1
a119 1
			if( !RT_LIST_MORE( psp, wdb_pipeseg, &headp->l ) )
@


1.2
log
@Oops, forgot units conversion on pipe solid.
@
text
@d28 1
a28 1
static char part_RCSid[] = "@@(#)$Header: part.c,v 9.6 90/03/05 20:51:10 mike Exp $ (BRL)";
d37 1
d87 2
a88 2
 *  Note that it is the caller's responsibility to free up the linked
 *  list of pipe segments pointed to by psptr.
d95 1
a95 1
mk_pipe( fp, name, psptr )
d98 1
a98 1
struct wdb_pipeseg	*psptr;
d101 1
a101 1
	register struct wdb_pipeseg	*psp = psptr;
d110 1
a110 1
	while( psp != WDB_PIPESEG_NULL )  {
d114 1
a114 1
			if( psp->ps_next != WDB_PIPESEG_NULL )
d119 1
a119 1
			if( psp->ps_next == WDB_PIPESEG_NULL )
a124 1
		psp = psp->ps_next;
d145 1
a145 1
	for( psp = psptr; psp != WDB_PIPESEG_NULL; psp = psp->ps_next, ep++ )  {
d165 18
@


1.1
log
@Initial revision
@
text
@d101 1
d148 9
a156 4
		htond( ep->eps_start, psp->ps_start, 3 );
		htond( ep->eps_bendcenter, psp->ps_bendcenter, 3 );
		htond( ep->eps_id, &psp->ps_id, 1 );
		htond( ep->eps_od, &psp->ps_od, 1 );
@
