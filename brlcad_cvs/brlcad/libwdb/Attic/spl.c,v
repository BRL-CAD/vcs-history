head	11.9;
access;
symbols
	ansi-20040405-merged:11.6.4.1
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.7
	postmerge-autoconf:11.7
	autoconf-freeze:11.6.12.2
	premerge-autoconf:11.7
	postmerge-20040315-windows:11.7
	premerge-20040315-windows:11.7
	windows-20040315-freeze:11.6.6.1
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.12
	phong-branch:11.6.0.10
	photonmap-branch:11.6.0.8
	rel-6-1-DP:11.6
	windows-branch:11.6.0.6
	rel-6-0-2:11.6
	ansi-branch:11.6.0.4
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.3
	offsite-5-3-pre:11.6
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.3
	rel-5-0-beta:11.3
	rel-4-5:11.3
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.21.18.07.38;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.47;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.02.02.17.39.30;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2000.07.12.00.13.52;	author cjohnson;	state Exp;
branches
	11.6.4.1
	11.6.6.1
	11.6.12.1;
next	11.5;

11.5
date	2000.07.08.04.01.11;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.07.08.01.41.22;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.08.31.11.12.44;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.12.01.05.17.32;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.51.40;	author mike;	state Rel4_4;
branches;
next	10.4;

10.4
date	94.08.09.19.52.53;	author gdurf;	state Exp;
branches;
next	10.3;

10.3
date	92.05.29.01.23.18;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	92.05.29.00.58.29;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.36.51;	author mike;	state Rel4_0;
branches;
next	9.7;

9.7
date	91.06.18.21.15.05;	author butler;	state Exp;
branches;
next	9.6;

9.6
date	91.06.14.09.55.00;	author stay;	state Exp;
branches;
next	9.5;

9.5
date	90.12.05.05.27.48;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	90.12.02.11.10.27;	author cjohnson;	state Exp;
branches;
next	9.3;

9.3
date	90.03.05.20.50.44;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	90.02.08.01.53.02;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.50.12;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.29.00;	author mike;	state Rel3_0;
branches;
next	1.2;

1.2
date	88.05.13.22.47.54;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	87.12.30.05.58.05;	author mike;	state Exp;
branches;
next	;

11.6.4.1
date	2004.03.17.21.21.48;	author morrison;	state Exp;
branches;
next	;

11.6.6.1
date	2004.03.11.23.45.48;	author morrison;	state Exp;
branches;
next	;

11.6.12.1
date	2004.02.12.19.41.24;	author erikg;	state Exp;
branches;
next	11.6.12.2;

11.6.12.2
date	2004.03.15.14.07.34;	author erikg;	state Exp;
branches;
next	;


desc
@Support for writing splines
@


11.9
log
@moved to src/
@
text
@/*
 *			S P L . C
 *
 *  Library for writing spline objects into
 *  MGED databases from arbitrary procedures.
 *
 *  It is expected that this library will grow as experience is gained.
 *
 *  Authors -
 *	Michael John Muuss
 *	Paul R. Stay
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1987-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libwdb/spl.c,v 11.8 2004/05/10 15:30:47 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "bu.h"
#include "db.h"
#include "vmath.h"
#include "bn.h"

#include "nurb.h"
#define B_SPLINE_DEFINED 1		/* currently wdb.h needs this */

#include "wdb.h"

/*
 *			M K _ B S O L I D
 *
 *  Write the header record for a B-spline solid, which is
 *  composed of several B-spline surfaces.
 *  The call to this routine must be immediately followed by
 *  the appropriate number of calls to mk_bsurf().
 */
int
mk_bsolid( fp, name, nsurf, res )
FILE	*fp;
char	*name;
int	nsurf;
double	res;
{
	union record rec;

	/* if caller has an rt_nurb_internal struct, should use mk_export_fwrite or mk_fwrite_internal */
	BU_ASSERT_LONG( mk_version, <=, 4 );

	bzero( (char *)&rec, sizeof(rec) );
	rec.d.d_id = ID_BSOLID;
	NAMEMOVE( name, rec.B.B_name );
	rec.B.B_nsurf = nsurf;
	rec.B.B_resolution = res;

	if( fwrite( (char *)&rec, sizeof(rec), 1, fp ) != 1 )
		return(-1);
	return(0);
}

/*
 *			M K _ B S U R F
 *
 *  Write the external MGED description of a single B-spline surface
 *  given it's internal form from b_spline.h
 */

int
mk_bsurf( filep, srf )
FILE	* filep;
struct face_g_snurb * srf;
{
	union record rec;
	dbfloat_t	*kp;		/* knot vector area */
	dbfloat_t	*mp;		/* mesh area */
	register dbfloat_t	*dbp;
	register fastf_t	*fp;
	register int	i;
	int		n;

	/* if caller has an rt_nurb_internal struct, should use mk_export_fwrite or mk_fwrite_internal */
	BU_ASSERT_LONG( mk_version, <=, 4 );

	if( srf->u.k_size != srf->s_size[RT_NURB_SPLIT_COL] + srf->order[0] ||
	    srf->v.k_size != srf->s_size[RT_NURB_SPLIT_ROW] + srf->order[1]) {
	    	fprintf(stderr,"mk_bsurf:  mis-matched knot/mesh/order\n");
	    	return(-1);
	}

	bzero( (char *)&rec, sizeof(rec) );
	rec.d.d_id = ID_BSURF;

	n = srf->u.k_size + srf->v.k_size;
	n = ((n * sizeof(dbfloat_t)) + sizeof(rec)-1) / sizeof(rec);
	kp = (dbfloat_t *)malloc(n*sizeof(rec));
	bzero( (char *)kp, n*sizeof(rec) );
	rec.d.d_nknots = n;
	rec.d.d_order[RT_NURB_SPLIT_ROW] = srf->order[RT_NURB_SPLIT_ROW];	/* [0] */
	rec.d.d_order[RT_NURB_SPLIT_COL] = srf->order[RT_NURB_SPLIT_COL];	/* [1] */
	rec.d.d_kv_size[RT_NURB_SPLIT_ROW] = srf->u.k_size;
	rec.d.d_kv_size[RT_NURB_SPLIT_COL] = srf->v.k_size;

	n = srf->s_size[RT_NURB_SPLIT_ROW] * srf->s_size[RT_NURB_SPLIT_COL] *
	    RT_NURB_EXTRACT_COORDS(srf->pt_type);
	n = ((n * sizeof(dbfloat_t)) + sizeof(rec)-1) / sizeof(rec);
	mp = (dbfloat_t *)malloc(n*sizeof(rec));
	bzero( (char *)mp, n*sizeof(rec) );
	rec.d.d_nctls = n;
	rec.d.d_geom_type = RT_NURB_EXTRACT_COORDS(srf->pt_type);
	rec.d.d_ctl_size[RT_NURB_SPLIT_ROW] = srf->s_size[RT_NURB_SPLIT_ROW];
	rec.d.d_ctl_size[RT_NURB_SPLIT_COL] = srf->s_size[RT_NURB_SPLIT_COL];

	/* Reformat the knot vectors */
	dbp = kp;
	for( i=0; i<srf->u.k_size; i++ )
		*dbp++ = srf->u.knots[i];
	for( i=0; i<srf->v.k_size; i++ )
		*dbp++ = srf->v.knots[i];

	/* Reformat the mesh */
	dbp = mp;
	fp = srf->ctl_points;
	i = srf->s_size[RT_NURB_SPLIT_ROW] * srf->s_size[RT_NURB_SPLIT_COL] *
	    RT_NURB_EXTRACT_COORDS(srf->pt_type);	/* # floats/point */
	for( ; i>0; i-- )
		*dbp++ = *fp++ * mk_conv2mm;

	if( fwrite( (char *)&rec, sizeof(rec), 1, filep ) != 1 ||
	    fwrite( (char *)kp, sizeof(rec), rec.d.d_nknots, filep ) != rec.d.d_nknots ||
	    fwrite( (char *)mp, sizeof(rec), rec.d.d_nctls, filep ) != rec.d.d_nctls )  {
		free( (char *)kp );
		free( (char *)mp );
	    	return(-1);
	}

	free( (char *)kp );
	free( (char *)mp );
	return(0);
}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libwdb/spl.c,v 11.7 2004/02/02 17:39:30 morrison Exp $ (BRL)";
@


11.7
log
@update copyright to include span through 2003
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/spl.c,v 11.6 2000/07/12 00:13:52 cjohnson Exp $ (BRL)";
d26 5
a30 1
#include "conf.h"
@


11.6
log
@LINT picking from gcc -Wall
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1987 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/spl.c,v 11.5 2000/07/08 04:01:11 mike Exp $ (BRL)";
@


11.6.4.1
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1987-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.6.6.1
log
@sync to HEAD...
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1987-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/libwdb/spl.c,v 11.7 2004/02/02 17:39:30 morrison Exp $ (BRL)";
@


11.6.12.1
log
@merge from HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1987-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/spl.c,v 11.7 2004/02/02 17:39:30 morrison Exp $ (BRL)";
@


11.6.12.2
log
@merge from head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/spl.c,v 11.6.12.1 2004/02/12 19:41:24 erikg Exp $ (BRL)";
@


11.5
log
@
Modified to allow mk_fwrite_internal() to free the objects.
Added flag variable mk_version to indicate what database version to be written.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/spl.c,v 11.4 2000/07/08 01:41:22 mike Exp $ (BRL)";
d30 6
@


11.4
log
@
const RCSid
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libwdb/spl.c,v 11.3 1996/08/31 11:12:44 mike Exp $ (BRL)";
d58 3
d91 3
@


11.3
log
@bu.h
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 11.2 1995/12/01 05:17:32 mike Exp mike $ (BRL)";
@


11.2
log
@New NURBS stuff
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 11.1 95/01/04 09:51:40 mike Rel4_4 $ (BRL)";
d31 1
d34 1
@


11.1
log
@Release_4.4
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 10.4 94/08/09 19:52:53 gdurf Exp $ (BRL)";
d77 1
a77 1
struct snurb * srf;
d87 2
a88 2
	if( srf->u_knots.k_size != srf->s_size[RT_NURB_SPLIT_COL] + srf->order[0] ||
	    srf->v_knots.k_size != srf->s_size[RT_NURB_SPLIT_ROW] + srf->order[1]) {
d96 1
a96 1
	n = srf->u_knots.k_size + srf->v_knots.k_size;
d103 2
a104 2
	rec.d.d_kv_size[RT_NURB_SPLIT_ROW] = srf->u_knots.k_size;
	rec.d.d_kv_size[RT_NURB_SPLIT_COL] = srf->v_knots.k_size;
d118 4
a121 4
	for( i=0; i<srf->u_knots.k_size; i++ )
		*dbp++ = srf->u_knots.knots[i];
	for( i=0; i<srf->v_knots.k_size; i++ )
		*dbp++ = srf->v_knots.knots[i];
@


10.4
log
@Added include of conf.h
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 10.3 1992/05/29 01:23:18 mike Exp gdurf $ (BRL)";
@


10.3
log
@New data structures
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 10.2 92/05/29 00:58:29 mike Exp Locker: mike $ (BRL)";
d26 2
a37 5

#ifdef SYSV
#define bzero(str,n)		memset( str, '\0', n )
#define bcopy(from,to,count)	memcpy( to, from, count )
#endif
@


10.2
log
@Modified to track data structure changes.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 10.1 91/10/12 06:36:51 mike Rel4_0 Locker: mike $ (BRL)";
d90 2
a91 2
	if( srf->u_knots.k_size != srf->mesh.s_size[RT_NURB_SPLIT_COL] + srf->order[0] ||
	    srf->v_knots.k_size != srf->mesh.s_size[RT_NURB_SPLIT_ROW] + srf->order[1]) {
d109 2
a110 2
	n = srf->mesh.s_size[RT_NURB_SPLIT_ROW] * srf->mesh.s_size[RT_NURB_SPLIT_COL] *
	    RT_NURB_EXTRACT_COORDS(srf->mesh.pt_type);
d115 3
a117 3
	rec.d.d_geom_type = RT_NURB_EXTRACT_COORDS(srf->mesh.pt_type);
	rec.d.d_ctl_size[RT_NURB_SPLIT_ROW] = srf->mesh.s_size[RT_NURB_SPLIT_ROW];
	rec.d.d_ctl_size[RT_NURB_SPLIT_COL] = srf->mesh.s_size[RT_NURB_SPLIT_COL];
d128 3
a130 3
	fp = srf->mesh.ctl_points;
	i = srf->mesh.s_size[RT_NURB_SPLIT_ROW] * srf->mesh.s_size[RT_NURB_SPLIT_COL] *
	    RT_NURB_EXTRACT_COORDS(srf->mesh.pt_type);	/* # floats/point */
@


10.1
log
@Release_4.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 9.7 91/06/18 21:15:05 butler Exp $ (BRL)";
d90 2
a91 2
	if( srf->u_knots->k_size != srf->mesh->s_size[COL] + srf->order[0] ||
	    srf->v_knots->k_size != srf->mesh->s_size[ROW] + srf->order[1]) {
d99 1
a99 1
	n = srf->u_knots->k_size + srf->v_knots->k_size;
d104 4
a107 4
	rec.d.d_order[ROW] = srf->order[ROW];	/* [0] */
	rec.d.d_order[COL] = srf->order[COL];	/* [1] */
	rec.d.d_kv_size[ROW] = srf->u_knots->k_size;
	rec.d.d_kv_size[COL] = srf->v_knots->k_size;
d109 2
a110 2
	n = srf->mesh->s_size[ROW] * srf->mesh->s_size[COL] *
	    EXTRACT_COORDS(srf->mesh->pt_type);
d115 3
a117 3
	rec.d.d_geom_type = EXTRACT_COORDS(srf->mesh->pt_type);
	rec.d.d_ctl_size[ROW] = srf->mesh->s_size[ROW];
	rec.d.d_ctl_size[COL] = srf->mesh->s_size[COL];
d121 4
a124 4
	for( i=0; i<srf->u_knots->k_size; i++ )
		*dbp++ = srf->u_knots->knots[i];
	for( i=0; i<srf->v_knots->k_size; i++ )
		*dbp++ = srf->v_knots->knots[i];
d128 3
a130 3
	fp = srf->mesh->ctl_points;
	i = srf->mesh->s_size[ROW] * srf->mesh->s_size[COL] *
	    EXTRACT_COORDS(srf->mesh->pt_type);	/* # floats/point */
@


9.7
log
@changed to include "nurb.h" instead of "../libnurb/nurb.h"
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 9.6 91/06/14 09:55:00 stay Exp $ (BRL)";
@


9.6
log
@converted to the new spline library.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 9.5 90/12/05 05:27:48 mike Exp $ (BRL)";
d32 1
a32 1
#include "../libnurb/nurb.h"
@


9.5
log
@Changed static to automatic.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/libwdb/RCS/spl.c,v 9.4 90/12/02 11:10:27 cjohnson Exp $ (BRL)";
d32 3
a34 1
#include "../libspl/b_spline.h"
d76 1
d78 3
a80 3
mk_bsurf( filep, bp )
FILE	*filep;
struct b_spline *bp;
d90 2
a91 2
	if( bp->u_kv->k_size != bp->ctl_mesh->mesh_size[COL] + bp->order[0] ||
	    bp->v_kv->k_size != bp->ctl_mesh->mesh_size[ROW] + bp->order[1]) {
d99 1
a99 1
	n = bp->u_kv->k_size + bp->v_kv->k_size;
d104 4
a107 4
	rec.d.d_order[ROW] = bp->order[ROW];	/* [0] */
	rec.d.d_order[COL] = bp->order[COL];	/* [1] */
	rec.d.d_kv_size[ROW] = bp->u_kv->k_size;
	rec.d.d_kv_size[COL] = bp->v_kv->k_size;
d109 2
a110 2
	n = bp->ctl_mesh->mesh_size[ROW] * bp->ctl_mesh->mesh_size[COL] *
	    bp->ctl_mesh->pt_type;
d115 3
a117 3
	rec.d.d_geom_type = bp->ctl_mesh->pt_type;
	rec.d.d_ctl_size[ROW] = bp->ctl_mesh->mesh_size[ROW];
	rec.d.d_ctl_size[COL] = bp->ctl_mesh->mesh_size[COL];
d121 4
a124 4
	for( i=0; i<bp->u_kv->k_size; i++ )
		*dbp++ = bp->u_kv->knots[i];
	for( i=0; i<bp->v_kv->k_size; i++ )
		*dbp++ = bp->v_kv->knots[i];
d128 3
a130 3
	fp = bp->ctl_mesh->mesh;
	i = bp->ctl_mesh->mesh_size[ROW] * bp->ctl_mesh->mesh_size[COL] *
	    bp->ctl_mesh->pt_type;	/* # floats/point */
@


9.4
log
@Change the order of include files to define b_spline structure
before it is used in wdb.h (STDC code)
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: spl.c,v 9.3 90/03/05 20:50:44 mike Exp $ (BRL)";
d55 1
a55 1
	static union record rec;
d79 1
a79 1
	static union record rec;
@


9.3
log
@Modified to check for write errors
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: spl.c,v 9.2 90/02/08 01:53:02 mike Locked $ (BRL)";
a30 1
#include "wdb.h"
d33 1
@


9.2
log
@Modified to perform units conversion.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: spl.c,v 9.1 89/05/19 05:50:12 mike Locked $ (BRL)";
d63 2
a64 1
	fwrite( (char *)&rec, sizeof(rec), 1, fp );
d131 7
a137 3
	fwrite( (char *)&rec, sizeof(rec), 1, filep );
	fwrite( (char *)kp, sizeof(rec), rec.d.d_nknots, filep );
	fwrite( (char *)mp, sizeof(rec), rec.d.d_nctls, filep );
@


9.1
log
@Release_3.5
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: spl.c,v 8.1 88/10/05 00:29:00 mike Rel3_0 $ (BRL)";
d128 1
a128 1
		*dbp++ = *fp++;
@


8.1
log
@Release_3.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: spl.c,v 1.2 88/05/13 22:47:54 mike Exp $ (BRL)";
@


1.2
log
@lint fixes
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: spl.c,v 1.1 87/12/30 05:58:05 mike Locked $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: wdb.c,v 7.1 87/11/02 23:29:01 mike Rel $ (BRL)";
d48 1
d64 1
d73 1
d89 1
a89 1
	    	return;
d136 1
@
