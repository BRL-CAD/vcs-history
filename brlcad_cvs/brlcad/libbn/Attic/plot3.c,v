head	11.11;
access;
symbols
	ansi-20040405-merged:11.8.2.1
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.8
	premerge-autoconf:11.8
	ansi-20040316-freeze:11.8.2.1
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.8
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.4
	offsite-5-3-pre:11.5
	rel-5-3:11.4
	rel-5-2:11.4
	rel-5-1-branch:11.4.0.2
	rel-5-1:11.4
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.18.06.22;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.43;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.07.46.41;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.07.36;	author jra;	state Exp;
branches
	11.8.2.1;
next	11.7;

11.7
date	2002.08.15.20.54.48;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2001.04.20.22.29.01;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2000.07.11.23.30.39;	author cjohnson;	state Exp;
branches;
next	11.4;

11.4
date	2000.03.29.18.57.16;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	99.11.26.22.16.22;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	99.01.13.22.03.52;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.51.18;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.12.19.19.14;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.36.37;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	91.07.18.14.09.18;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	91.01.12.08.42.34;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.49.25;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.28.33;	author mike;	state Rel3_0;
branches;
next	7.5;

7.5
date	88.09.17.00.16.41;	author mike;	state Exp;
branches;
next	7.4;

7.4
date	88.02.08.20.04.43;	author phil;	state Exp;
branches;
next	7.3;

7.3
date	88.02.06.04.21.46;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	88.01.29.22.47.55;	author phil;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.28.22;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.52.51;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.21.52.59;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.12.22.08.42;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.02.50.05;	author mike;	state Rel1;
branches;
next	1.1;

1.1
date	86.09.24.04.04.31;	author mike;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.01.09;	author morrison;	state Exp;
branches;
next	;


desc
@2-D and 3-D Public Domain library for generating UNIX-Plot output
@


11.11
log
@moved to src/
@
text
@/*
 *			L I B P L O T 3 . C
 *
 *  A public-domain UNIX plot library, for 2-D and 3-D plotting in
 *  16-bit VAX signed integer spaces, or 64-bit IEEE floating point.
 *
 *  These routines generate "UNIX plot" output (with the addition
 *  of 3-D commands).  They behave almost exactly like the regular
 *  libplot routines, except:
 *
 *  (1) These all take a stdio file pointer, and can thus be used to
 *      create multiple plot files simultaneously.
 *  (2) There are 3-D versions of most commands.
 *  (3) There are IEEE floating point versions of the commands.
 *  (4) The names have been changed.
 *
 *  The 3-D extensions are those of Doug Gwyn, from his System V extensions.
 *
 *  Author -
 *	Phillip Dykstra
 *	24 Sep 1986
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libbn/plot3.c,v 11.10 2004/05/10 15:30:43 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#include "machine.h"
#include "vmath.h"
#include "externs.h"
#include "plot3.h"

/* For the sake of efficiency, we trust putc() to write only one byte */
/*#define putsi(a)	putc(a&0377,plotfp); putc((a>>8)&0377,plotfp)*/
#define putsi(a)	putc(a,plotfp); putc((a>>8),plotfp)


/*
 *  These interfaces provide the standard UNIX-Plot functionality
 */

void
pl_point(register FILE *plotfp, int x, int y)
{
	putc( 'p', plotfp );
	putsi( x );
	putsi( y );
}

void
pl_line(register FILE *plotfp, int x1, int y1, int x2, int y2)
{
	putc( 'l', plotfp );
	putsi( x1 );
	putsi( y1 );
	putsi( x2 );
	putsi( y2 );
}

void
pl_linmod(register FILE *plotfp, register char *s)
{
	putc( 'f', plotfp );
	while( *s )
		putc( *s++, plotfp );
	putc( '\n', plotfp );
}

void
pl_move(register FILE *plotfp, int x, int y)
{
	putc( 'm', plotfp );
	putsi( x );
	putsi( y );
}

void
pl_cont(register FILE *plotfp, int x, int y)
{
	putc( 'n', plotfp );
	putsi( x );
	putsi( y );
}

void
pl_label(register FILE *plotfp, register char *s)
{
	putc( 't', plotfp );
	while( *s )
		putc( *s++, plotfp );
	putc( '\n', plotfp );
}

void
pl_space(register FILE *plotfp, int x1, int y1, int x2, int y2)
{
	putc( 's', plotfp );
	putsi( x1 );
	putsi( y1 );
	putsi( x2 );
	putsi( y2 );
}

void
pl_erase(register FILE *plotfp)
{
	putc( 'e', plotfp );
}

void
pl_circle(register FILE *plotfp, int x, int y, int r)
{
	putc( 'c', plotfp );
	putsi( x );
	putsi( y );
	putsi( r );
}

void
pl_arc(register FILE *plotfp, int xc, int yc, int x1, int y1, int x2, int y2)
{
	putc( 'a', plotfp );
	putsi( xc );
	putsi( yc );
	putsi( x1 );
	putsi( y1 );
	putsi( x2 );
	putsi( y2 );
}

void
pl_box(register FILE *plotfp, int x1, int y1, int x2, int y2)
{
	pl_move( plotfp, x1, y1 );
	pl_cont( plotfp, x1, y2 );
	pl_cont( plotfp, x2, y2 );
	pl_cont( plotfp, x2, y1 );
	pl_cont( plotfp, x1, y1 );
	pl_move( plotfp, x2, y2 );
}

/*
 * Here lie the BRL 3-D extensions.
 */

/* Warning: r, g, b are ints.  The output is chars. */
void
pl_color(register FILE *plotfp, int r, int g, int b)
{
	putc( 'C', plotfp );
	putc( r, plotfp );
	putc( g, plotfp );
	putc( b, plotfp );
}

void
pl_flush(register FILE *plotfp)
{
	putc( 'F', plotfp );
	fflush( plotfp );
}

void
pl_3space(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
{
	putc( 'S', plotfp );
	putsi( x1 );
	putsi( y1 );
	putsi( z1 );
	putsi( x2 );
	putsi( y2 );
	putsi( z2 );
}

void
pl_3point(register FILE *plotfp, int x, int y, int z)
{
	putc( 'P', plotfp );
	putsi( x );
	putsi( y );
	putsi( z );
}

void
pl_3move(register FILE *plotfp, int x, int y, int z)
{
	putc( 'M', plotfp );
	putsi( x );
	putsi( y );
	putsi( z );
}

void
pl_3cont(register FILE *plotfp, int x, int y, int z)
{
	putc( 'N', plotfp );
	putsi( x );
	putsi( y );
	putsi( z );
}

void
pl_3line(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
{
	putc( 'L', plotfp );
	putsi( x1 );
	putsi( y1 );
	putsi( z1 );
	putsi( x2 );
	putsi( y2 );
	putsi( z2 );
}

void
pl_3box(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
{
	pl_3move( plotfp, x1, y1, z1 );
	/* first side */
	pl_3cont( plotfp, x1, y2, z1 );
	pl_3cont( plotfp, x1, y2, z2 );
	pl_3cont( plotfp, x1, y1, z2 );
	pl_3cont( plotfp, x1, y1, z1 );
	/* across */
	pl_3cont( plotfp, x2, y1, z1 );
	/* second side */
	pl_3cont( plotfp, x2, y2, z1 );
	pl_3cont( plotfp, x2, y2, z2 );
	pl_3cont( plotfp, x2, y1, z2 );
	pl_3cont( plotfp, x2, y1, z1 );
	/* front edge */
	pl_3move( plotfp, x1, y2, z1 );
	pl_3cont( plotfp, x2, y2, z1 );
	/* bottom back */
	pl_3move( plotfp, x1, y1, z2 );
	pl_3cont( plotfp, x2, y1, z2 );
	/* top back */
	pl_3move( plotfp, x1, y2, z2 );
	pl_3cont( plotfp, x2, y2, z2 );
}

/*
 * Double floating point versions
 */

void
pd_point(register FILE *plotfp, double x, double y)
{
	double	in[2];
	unsigned char	out[2*8+1];

	in[0] = x;
	in[1] = y;
	htond( &out[1], (unsigned char *)in, 2 );

	out[0] = 'x';
	fwrite( out, 1, 2*8+1, plotfp );
}

void
pd_line(register FILE *plotfp, double x1, double y1, double x2, double y2)
{
	double	in[4];
	unsigned char	out[4*8+1];

	in[0] = x1;
	in[1] = y1;
	in[2] = x2;
	in[3] = y2;
	htond( &out[1], (unsigned char *)in, 4 );

	out[0] = 'v';
	fwrite( out, 1, 4*8+1, plotfp );
}

/* Note: no pd_linmod(), just use pl_linmod() */

void
pd_move(register FILE *plotfp, double x, double y)
{
	double	in[2];
	unsigned char	out[2*8+1];

	in[0] = x;
	in[1] = y;
	htond( &out[1], (unsigned char *)in, 2 );

	out[0] = 'o';
	fwrite( out, 1, 2*8+1, plotfp );
}

void
pd_cont(register FILE *plotfp, double x, double y)
{
	double	in[2];
	unsigned char	out[2*8+1];

	in[0] = x;
	in[1] = y;
	htond( &out[1], (unsigned char *)in, 2 );

	out[0] = 'q';
	fwrite( out, 1, 2*8+1, plotfp );
}

void
pd_space(register FILE *plotfp, double x1, double y1, double x2, double y2)
{
	double	in[4];
	unsigned char	out[4*8+1];

	in[0] = x1;
	in[1] = y1;
	in[2] = x2;
	in[3] = y2;
	htond( &out[1], (unsigned char *)in, 4 );

	out[0] = 'w';
	fwrite( out, 1, 4*8+1, plotfp );
}

void
pd_circle(register FILE *plotfp, double x, double y, double r)
{
	double	in[3];
	unsigned char	out[3*8+1];

	in[0] = x;
	in[1] = y;
	in[2] = r;
	htond( &out[1], (unsigned char *)in, 3 );

	out[0] = 'i';
	fwrite( out, 1, 3*8+1, plotfp );
}

void
pd_arc(register FILE *plotfp, double xc, double yc, double x1, double y1, double x2, double y2)
{
	double	in[6];
	unsigned char	out[6*8+1];

	in[0] = xc;
	in[1] = yc;
	in[2] = x1;
	in[3] = y1;
	in[4] = x2;
	in[5] = y2;
	htond( &out[1], (unsigned char *)in, 6 );

	out[0] = 'r';
	fwrite( out, 1, 6*8+1, plotfp );
}

void
pd_box(register FILE *plotfp, double x1, double y1, double x2, double y2)
{
	pd_move( plotfp, x1, y1 );
	pd_cont( plotfp, x1, y2 );
	pd_cont( plotfp, x2, y2 );
	pd_cont( plotfp, x2, y1 );
	pd_cont( plotfp, x1, y1 );
	pd_move( plotfp, x2, y2 );
}

/* Double 3-D, both in vector and enumerated versions */
void
pdv_3space(register FILE *plotfp, const fastf_t *min, const fastf_t *max)
{
	unsigned char	out[6*8+1];

	htond( &out[1], (unsigned char *)min, 3 );
	htond( &out[3*8+1], (unsigned char *)max, 3 );

	out[0] = 'W';
	fwrite( out, 1, 6*8+1, plotfp );
}

void
pd_3space(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
{
	double	in[6];
	unsigned char	out[6*8+1];

	in[0] = x1;
	in[1] = y1;
	in[2] = z1;
	in[3] = x2;
	in[4] = y2;
	in[5] = z2;
	htond( &out[1], (unsigned char *)in, 6 );

	out[0] = 'W';
	fwrite( out, 1, 6*8+1, plotfp );
}

void
pdv_3point(register FILE *plotfp, const fastf_t *pt)
{
	unsigned char	out[3*8+1];

	htond( &out[1], (unsigned char *)pt, 3 );

	out[0] = 'X';
	fwrite( out, 1, 3*8+1, plotfp );
}

void
pd_3point(register FILE *plotfp, double x, double y, double z)
{
	double	in[3];
	unsigned char	out[3*8+1];

	in[0] = x;
	in[1] = y;
	in[2] = z;
	htond( &out[1], (unsigned char *)in, 3 );

	out[0] = 'X';
	fwrite( out, 1, 3*8+1, plotfp );
}

void
pdv_3move(register FILE *plotfp, const fastf_t *pt)
{
	unsigned char	out[3*8+1];

	htond( &out[1], (unsigned char *)pt, 3 );

	out[0] = 'O';
	fwrite( out, 1, 3*8+1, plotfp );
}

void
pd_3move(register FILE *plotfp, double x, double y, double z)
{
	double	in[3];
	unsigned char	out[3*8+1];

	in[0] = x;
	in[1] = y;
	in[2] = z;
	htond( &out[1], (unsigned char *)in, 3 );

	out[0] = 'O';
	fwrite( out, 1, 3*8+1, plotfp );
}

void
pdv_3cont(register FILE *plotfp, const fastf_t *pt)
{
	unsigned char	out[3*8+1];

	htond( &out[1], (unsigned char *)pt, 3 );

	out[0] = 'Q';
	fwrite( out, 1, 3*8+1, plotfp );
}

void
pd_3cont(register FILE *plotfp, double x, double y, double z)
{
	double	in[3];
	unsigned char	out[3*8+1];

	in[0] = x;
	in[1] = y;
	in[2] = z;
	htond( &out[1], (unsigned char *)in, 3 );

	out[0] = 'Q';
	fwrite( out, 1, 3*8+1, plotfp );
}

void
pdv_3line(register FILE *plotfp, const fastf_t *a, const fastf_t *b)
{
	unsigned char	out[6*8+1];

	htond( &out[1], (unsigned char *)a, 3 );
	htond( &out[3*8+1], (unsigned char *)b, 3 );

	out[0] = 'V';
	fwrite( out, 1, 6*8+1, plotfp );
}

void
pd_3line(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
{
	double	in[6];
	unsigned char	out[6*8+1];

	in[0] = x1;
	in[1] = y1;
	in[2] = z1;
	in[3] = x2;
	in[4] = y2;
	in[5] = z2;
	htond( &out[1], (unsigned char *)in, 6 );

	out[0] = 'V';
	fwrite( out, 1, 6*8+1, plotfp );
}

void
pdv_3box(register FILE *plotfp, const fastf_t *a, const fastf_t *b)
{
	pd_3move( plotfp, a[X], a[Y], a[Z] );
	/* first side */
	pd_3cont( plotfp, a[X], b[Y], a[Z] );
	pd_3cont( plotfp, a[X], b[Y], b[Z] );
	pd_3cont( plotfp, a[X], a[Y], b[Z] );
	pd_3cont( plotfp, a[X], a[Y], a[Z] );
	/* across */
	pd_3cont( plotfp, b[X], a[Y], a[Z] );
	/* second side */
	pd_3cont( plotfp, b[X], b[Y], a[Z] );
	pd_3cont( plotfp, b[X], b[Y], b[Z] );
	pd_3cont( plotfp, b[X], a[Y], b[Z] );
	pd_3cont( plotfp, b[X], a[Y], a[Z] );
	/* front edge */
	pd_3move( plotfp, a[X], b[Y], a[Z] );
	pd_3cont( plotfp, b[X], b[Y], a[Z] );
	/* bottom back */
	pd_3move( plotfp, a[X], a[Y], b[Z] );
	pd_3cont( plotfp, b[X], a[Y], b[Z] );
	/* top back */
	pd_3move( plotfp, a[X], b[Y], b[Z] );
	pd_3cont( plotfp, b[X], b[Y], b[Z] );
}

void
pd_3box(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
{
	pd_3move( plotfp, x1, y1, z1 );
	/* first side */
	pd_3cont( plotfp, x1, y2, z1 );
	pd_3cont( plotfp, x1, y2, z2 );
	pd_3cont( plotfp, x1, y1, z2 );
	pd_3cont( plotfp, x1, y1, z1 );
	/* across */
	pd_3cont( plotfp, x2, y1, z1 );
	/* second side */
	pd_3cont( plotfp, x2, y2, z1 );
	pd_3cont( plotfp, x2, y2, z2 );
	pd_3cont( plotfp, x2, y1, z2 );
	pd_3cont( plotfp, x2, y1, z1 );
	/* front edge */
	pd_3move( plotfp, x1, y2, z1 );
	pd_3cont( plotfp, x2, y2, z1 );
	/* bottom back */
	pd_3move( plotfp, x1, y1, z2 );
	pd_3cont( plotfp, x2, y1, z2 );
	/* top back */
	pd_3move( plotfp, x1, y2, z2 );
	pd_3cont( plotfp, x2, y2, z2 );
}

/*
 *  Draw a ray
 */
void
pdv_3ray(FILE *fp, const fastf_t *pt, const fastf_t *dir, double t)
{
	point_t	tip;

	VJOIN1( tip, pt, t, dir );
	pdv_3move( fp, pt );
	pdv_3cont( fp, tip );
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libbn/plot3.c,v 11.9 2004/04/05 07:46:41 morrison Exp $ (BRL)";
@


11.9
log
@merge of ansi-6-0-branch into HEAD
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d35 5
a39 1
#include "conf.h"
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/plot3.c,v 11.6 2001/04/20 22:29:01 morrison Exp $ (BRL)";
d54 1
a54 3
pl_point( plotfp, x, y )
register FILE *plotfp;
int x, y;
d62 1
a62 3
pl_line( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
int x1, y1, x2, y2;
d72 1
a72 3
pl_linmod( plotfp, s )
register FILE *plotfp;
register char *s;
d81 1
a81 3
pl_move( plotfp, x, y )
register FILE *plotfp;
int x, y;
d89 1
a89 3
pl_cont( plotfp, x, y )
register FILE *plotfp;
int x, y;
d97 1
a97 3
pl_label( plotfp, s )
register FILE *plotfp;
register char *s;
d106 1
a106 3
pl_space( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
int x1, y1, x2, y2;
d116 1
a116 2
pl_erase( plotfp )
register FILE *plotfp;
d122 1
a122 3
pl_circle( plotfp, x, y, r )
register FILE *plotfp;
int x, y, r;
d131 1
a131 3
pl_arc( plotfp, xc, yc, x1, y1, x2, y2 )
register FILE *plotfp;
int xc, yc, x1, y1, x2, y2;
d143 1
a143 3
pl_box( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
int x1, y1, x2, y2;
d159 1
a159 3
pl_color( plotfp, r, g, b )
register FILE *plotfp;
int r, g, b;
d168 1
a168 2
pl_flush( plotfp )
register FILE *plotfp;
d175 1
a175 3
pl_3space( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
int x1, y1, z1, x2, y2, z2;
d187 1
a187 3
pl_3point( plotfp, x, y, z )
register FILE *plotfp;
int x, y, z;
d196 1
a196 3
pl_3move( plotfp, x, y, z )
register FILE *plotfp;
int x, y, z;
d205 1
a205 3
pl_3cont( plotfp, x, y, z )
register FILE *plotfp;
int x, y, z;
d214 1
a214 3
pl_3line( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
int x1, y1, z1, x2, y2, z2;
d226 1
a226 3
pl_3box( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
int x1, y1, z1, x2, y2, z2;
d257 1
a257 3
pd_point( plotfp, x, y )
register FILE *plotfp;
double x, y;
d271 1
a271 3
pd_line( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
double x1, y1, x2, y2;
d289 1
a289 3
pd_move( plotfp, x, y )
register FILE *plotfp;
double x, y;
d303 1
a303 3
pd_cont( plotfp, x, y )
register FILE *plotfp;
double x, y;
d317 1
a317 3
pd_space( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
double x1, y1, x2, y2;
d333 1
a333 3
pd_circle( plotfp, x, y, r )
register FILE *plotfp;
double x, y, r;
d348 1
a348 3
pd_arc( plotfp, xc, yc, x1, y1, x2, y2 )
register FILE *plotfp;
double xc, yc, x1, y1, x2, y2;
d366 1
a366 3
pd_box( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
double x1, y1, x2, y2;
d378 1
a378 4
pdv_3space( plotfp, min, max )
register FILE *plotfp;
const vect_t	min;
const vect_t	max;
d390 1
a390 3
pd_3space( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
double x1, y1, z1, x2, y2, z2;
d408 1
a408 3
pdv_3point( plotfp, pt )
register FILE *plotfp;
const vect_t	pt;
d419 1
a419 3
pd_3point( plotfp, x, y, z )
register FILE *plotfp;
double x, y, z;
d434 1
a434 3
pdv_3move( plotfp, pt )
register FILE *plotfp;
const vect_t	pt;
d445 1
a445 3
pd_3move( plotfp, x, y, z )
register FILE *plotfp;
double x, y, z;
d460 1
a460 3
pdv_3cont( plotfp, pt )
register FILE *plotfp;
const vect_t	pt;
d471 1
a471 3
pd_3cont( plotfp, x, y, z )
register FILE *plotfp;
double x, y, z;
d486 1
a486 3
pdv_3line( plotfp, a, b )
register FILE *plotfp;
const vect_t	a, b;
d498 1
a498 3
pd_3line( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
double x1, y1, z1, x2, y2, z2;
d516 1
a516 3
pdv_3box( plotfp, a, b )
register FILE *plotfp;
const vect_t	a, b;
d543 1
a543 3
pd_3box( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
double x1, y1, z1, x2, y2, z2;
d573 1
a573 5
pdv_3ray( fp, pt, dir, t )
FILE		*fp;
const point_t	pt;
const vect_t	dir;
double		t;
@


11.8.2.1
log
@Initial ANSIfication
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/plot3.c,v 11.8 2002/08/20 17:07:36 jra Exp $ (BRL)";
d54 3
a56 1
pl_point(register FILE *plotfp, int x, int y)
d64 3
a66 1
pl_line(register FILE *plotfp, int x1, int y1, int x2, int y2)
d76 3
a78 1
pl_linmod(register FILE *plotfp, register char *s)
d87 3
a89 1
pl_move(register FILE *plotfp, int x, int y)
d97 3
a99 1
pl_cont(register FILE *plotfp, int x, int y)
d107 3
a109 1
pl_label(register FILE *plotfp, register char *s)
d118 3
a120 1
pl_space(register FILE *plotfp, int x1, int y1, int x2, int y2)
d130 2
a131 1
pl_erase(register FILE *plotfp)
d137 3
a139 1
pl_circle(register FILE *plotfp, int x, int y, int r)
d148 3
a150 1
pl_arc(register FILE *plotfp, int xc, int yc, int x1, int y1, int x2, int y2)
d162 3
a164 1
pl_box(register FILE *plotfp, int x1, int y1, int x2, int y2)
d180 3
a182 1
pl_color(register FILE *plotfp, int r, int g, int b)
d191 2
a192 1
pl_flush(register FILE *plotfp)
d199 3
a201 1
pl_3space(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
d213 3
a215 1
pl_3point(register FILE *plotfp, int x, int y, int z)
d224 3
a226 1
pl_3move(register FILE *plotfp, int x, int y, int z)
d235 3
a237 1
pl_3cont(register FILE *plotfp, int x, int y, int z)
d246 3
a248 1
pl_3line(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
d260 3
a262 1
pl_3box(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
d293 3
a295 1
pd_point(register FILE *plotfp, double x, double y)
d309 3
a311 1
pd_line(register FILE *plotfp, double x1, double y1, double x2, double y2)
d329 3
a331 1
pd_move(register FILE *plotfp, double x, double y)
d345 3
a347 1
pd_cont(register FILE *plotfp, double x, double y)
d361 3
a363 1
pd_space(register FILE *plotfp, double x1, double y1, double x2, double y2)
d379 3
a381 1
pd_circle(register FILE *plotfp, double x, double y, double r)
d396 3
a398 1
pd_arc(register FILE *plotfp, double xc, double yc, double x1, double y1, double x2, double y2)
d416 3
a418 1
pd_box(register FILE *plotfp, double x1, double y1, double x2, double y2)
d430 4
a433 1
pdv_3space(register FILE *plotfp, const fastf_t *min, const fastf_t *max)
d445 3
a447 1
pd_3space(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
d465 3
a467 1
pdv_3point(register FILE *plotfp, const fastf_t *pt)
d478 3
a480 1
pd_3point(register FILE *plotfp, double x, double y, double z)
d495 3
a497 1
pdv_3move(register FILE *plotfp, const fastf_t *pt)
d508 3
a510 1
pd_3move(register FILE *plotfp, double x, double y, double z)
d525 3
a527 1
pdv_3cont(register FILE *plotfp, const fastf_t *pt)
d538 3
a540 1
pd_3cont(register FILE *plotfp, double x, double y, double z)
d555 3
a557 1
pdv_3line(register FILE *plotfp, const fastf_t *a, const fastf_t *b)
d569 3
a571 1
pd_3line(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
d589 3
a591 1
pdv_3box(register FILE *plotfp, const fastf_t *a, const fastf_t *b)
d618 3
a620 1
pd_3box(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
d650 5
a654 1
pdv_3ray(FILE *fp, const fastf_t *pt, const fastf_t *dir, double t)
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d54 3
a56 1
pl_point(register FILE *plotfp, int x, int y)
d64 3
a66 1
pl_line(register FILE *plotfp, int x1, int y1, int x2, int y2)
d76 3
a78 1
pl_linmod(register FILE *plotfp, register char *s)
d87 3
a89 1
pl_move(register FILE *plotfp, int x, int y)
d97 3
a99 1
pl_cont(register FILE *plotfp, int x, int y)
d107 3
a109 1
pl_label(register FILE *plotfp, register char *s)
d118 3
a120 1
pl_space(register FILE *plotfp, int x1, int y1, int x2, int y2)
d130 2
a131 1
pl_erase(register FILE *plotfp)
d137 3
a139 1
pl_circle(register FILE *plotfp, int x, int y, int r)
d148 3
a150 1
pl_arc(register FILE *plotfp, int xc, int yc, int x1, int y1, int x2, int y2)
d162 3
a164 1
pl_box(register FILE *plotfp, int x1, int y1, int x2, int y2)
d180 3
a182 1
pl_color(register FILE *plotfp, int r, int g, int b)
d191 2
a192 1
pl_flush(register FILE *plotfp)
d199 3
a201 1
pl_3space(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
d213 3
a215 1
pl_3point(register FILE *plotfp, int x, int y, int z)
d224 3
a226 1
pl_3move(register FILE *plotfp, int x, int y, int z)
d235 3
a237 1
pl_3cont(register FILE *plotfp, int x, int y, int z)
d246 3
a248 1
pl_3line(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
d260 3
a262 1
pl_3box(register FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2)
d293 3
a295 1
pd_point(register FILE *plotfp, double x, double y)
d309 3
a311 1
pd_line(register FILE *plotfp, double x1, double y1, double x2, double y2)
d329 3
a331 1
pd_move(register FILE *plotfp, double x, double y)
d345 3
a347 1
pd_cont(register FILE *plotfp, double x, double y)
d361 3
a363 1
pd_space(register FILE *plotfp, double x1, double y1, double x2, double y2)
d379 3
a381 1
pd_circle(register FILE *plotfp, double x, double y, double r)
d396 3
a398 1
pd_arc(register FILE *plotfp, double xc, double yc, double x1, double y1, double x2, double y2)
d416 3
a418 1
pd_box(register FILE *plotfp, double x1, double y1, double x2, double y2)
d430 4
a433 1
pdv_3space(register FILE *plotfp, const fastf_t *min, const fastf_t *max)
d445 3
a447 1
pd_3space(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
d465 3
a467 1
pdv_3point(register FILE *plotfp, const fastf_t *pt)
d478 3
a480 1
pd_3point(register FILE *plotfp, double x, double y, double z)
d495 3
a497 1
pdv_3move(register FILE *plotfp, const fastf_t *pt)
d508 3
a510 1
pd_3move(register FILE *plotfp, double x, double y, double z)
d525 3
a527 1
pdv_3cont(register FILE *plotfp, const fastf_t *pt)
d538 3
a540 1
pd_3cont(register FILE *plotfp, double x, double y, double z)
d555 3
a557 1
pdv_3line(register FILE *plotfp, const fastf_t *a, const fastf_t *b)
d569 3
a571 1
pd_3line(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
d589 3
a591 1
pdv_3box(register FILE *plotfp, const fastf_t *a, const fastf_t *b)
d618 3
a620 1
pd_3box(register FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2)
d650 5
a654 1
pdv_3ray(FILE *fp, const fastf_t *pt, const fastf_t *dir, double t)
@


11.6
log
@CONST to const
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/plot3.c,v 11.5 2000/07/11 23:30:39 cjohnson Exp $ (BRL)";
d54 1
a54 3
pl_point( plotfp, x, y )
register FILE *plotfp;
int x, y;
d62 1
a62 3
pl_line( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
int x1, y1, x2, y2;
d72 1
a72 3
pl_linmod( plotfp, s )
register FILE *plotfp;
register char *s;
d81 1
a81 3
pl_move( plotfp, x, y )
register FILE *plotfp;
int x, y;
d89 1
a89 3
pl_cont( plotfp, x, y )
register FILE *plotfp;
int x, y;
d97 1
a97 3
pl_label( plotfp, s )
register FILE *plotfp;
register char *s;
d106 1
a106 3
pl_space( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
int x1, y1, x2, y2;
d116 1
a116 2
pl_erase( plotfp )
register FILE *plotfp;
d122 1
a122 3
pl_circle( plotfp, x, y, r )
register FILE *plotfp;
int x, y, r;
d131 1
a131 3
pl_arc( plotfp, xc, yc, x1, y1, x2, y2 )
register FILE *plotfp;
int xc, yc, x1, y1, x2, y2;
d143 1
a143 3
pl_box( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
int x1, y1, x2, y2;
d159 1
a159 3
pl_color( plotfp, r, g, b )
register FILE *plotfp;
int r, g, b;
d168 1
a168 2
pl_flush( plotfp )
register FILE *plotfp;
d175 1
a175 3
pl_3space( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
int x1, y1, z1, x2, y2, z2;
d187 1
a187 3
pl_3point( plotfp, x, y, z )
register FILE *plotfp;
int x, y, z;
d196 1
a196 3
pl_3move( plotfp, x, y, z )
register FILE *plotfp;
int x, y, z;
d205 1
a205 3
pl_3cont( plotfp, x, y, z )
register FILE *plotfp;
int x, y, z;
d214 1
a214 3
pl_3line( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
int x1, y1, z1, x2, y2, z2;
d226 1
a226 3
pl_3box( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
int x1, y1, z1, x2, y2, z2;
d257 1
a257 3
pd_point( plotfp, x, y )
register FILE *plotfp;
double x, y;
d271 1
a271 3
pd_line( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
double x1, y1, x2, y2;
d289 1
a289 3
pd_move( plotfp, x, y )
register FILE *plotfp;
double x, y;
d303 1
a303 3
pd_cont( plotfp, x, y )
register FILE *plotfp;
double x, y;
d317 1
a317 3
pd_space( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
double x1, y1, x2, y2;
d333 1
a333 3
pd_circle( plotfp, x, y, r )
register FILE *plotfp;
double x, y, r;
d348 1
a348 3
pd_arc( plotfp, xc, yc, x1, y1, x2, y2 )
register FILE *plotfp;
double xc, yc, x1, y1, x2, y2;
d366 1
a366 3
pd_box( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
double x1, y1, x2, y2;
d378 1
a378 4
pdv_3space( plotfp, min, max )
register FILE *plotfp;
const vect_t	min;
const vect_t	max;
d390 1
a390 3
pd_3space( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
double x1, y1, z1, x2, y2, z2;
d408 1
a408 3
pdv_3point( plotfp, pt )
register FILE *plotfp;
const vect_t	pt;
d419 1
a419 3
pd_3point( plotfp, x, y, z )
register FILE *plotfp;
double x, y, z;
d434 1
a434 3
pdv_3move( plotfp, pt )
register FILE *plotfp;
const vect_t	pt;
d445 1
a445 3
pd_3move( plotfp, x, y, z )
register FILE *plotfp;
double x, y, z;
d460 1
a460 3
pdv_3cont( plotfp, pt )
register FILE *plotfp;
const vect_t	pt;
d471 1
a471 3
pd_3cont( plotfp, x, y, z )
register FILE *plotfp;
double x, y, z;
d486 1
a486 3
pdv_3line( plotfp, a, b )
register FILE *plotfp;
const vect_t	a, b;
d498 1
a498 3
pd_3line( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
double x1, y1, z1, x2, y2, z2;
d516 1
a516 3
pdv_3box( plotfp, a, b )
register FILE *plotfp;
const vect_t	a, b;
d543 1
a543 3
pd_3box( plotfp, x1, y1, z1, x2, y2, z2 )
register FILE *plotfp;
double x1, y1, z1, x2, y2, z2;
d573 1
a573 5
pdv_3ray( fp, pt, dir, t )
FILE		*fp;
const point_t	pt;
const vect_t	dir;
double		t;
@


11.5
log
@LINT picking.  Missing includes and static const for RCSids
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/plot3.c,v 11.4 2000/03/29 18:57:16 mike Exp $ (BRL)";
d432 2
a433 2
CONST vect_t	min;
CONST vect_t	max;
d467 1
a467 1
CONST vect_t	pt;
d497 1
a497 1
CONST vect_t	pt;
d527 1
a527 1
CONST vect_t	pt;
d557 1
a557 1
CONST vect_t	a, b;
d591 1
a591 1
CONST vect_t	a, b;
d652 2
a653 2
CONST point_t	pt;
CONST vect_t	dir;
@


11.4
log
@
Added pdv_3ray
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/plot3.c,v 11.3 1999/11/26 22:16:22 mike Exp $ (BRL)";
@


11.3
log
@
Proper CONST typeing
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/plot3.c,v 11.2 1999/01/13 22:03:52 mike Exp $ (BRL)";
d644 17
@


11.2
log
@Fixed arg types to htond()
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/plot3.c,v 11.1 1995/01/04 09:51:18 mike Rel4_4 $ (BRL)";
d432 2
a433 2
vect_t	min;
vect_t	max;
d467 1
a467 1
vect_t	pt;
d497 1
a497 1
vect_t	pt;
d527 1
a527 1
vect_t	pt;
d557 1
a557 1
vect_t	a, b;
d591 1
a591 1
vect_t	a, b;
@


11.1
log
@Release_4.4
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/plot3.c,v 10.2 94/08/12 19:19:14 gdurf Exp $ (BRL)";
d298 1
a298 1
	char	out[2*8+1];
d302 1
a302 1
	htond( &out[1], in, 2 );
d314 1
a314 1
	char	out[4*8+1];
d320 1
a320 1
	htond( &out[1], in, 4 );
d334 1
a334 1
	char	out[2*8+1];
d338 1
a338 1
	htond( &out[1], in, 2 );
d350 1
a350 1
	char	out[2*8+1];
d354 1
a354 1
	htond( &out[1], in, 2 );
d366 1
a366 1
	char	out[4*8+1];
d372 1
a372 1
	htond( &out[1], in, 4 );
d384 1
a384 1
	char	out[3*8+1];
d389 1
a389 1
	htond( &out[1], in, 3 );
d401 1
a401 1
	char	out[6*8+1];
d409 1
a409 1
	htond( &out[1], in, 6 );
d435 1
a435 1
	char	out[6*8+1];
d437 2
a438 2
	htond( &out[1], min, 3 );
	htond( &out[3*8+1], max, 3 );
d450 1
a450 1
	char	out[6*8+1];
d458 1
a458 1
	htond( &out[1], in, 6 );
d469 1
a469 1
	char	out[3*8+1];
d471 1
a471 1
	htond( &out[1], pt, 3 );
d483 1
a483 1
	char	out[3*8+1];
d488 1
a488 1
	htond( &out[1], in, 3 );
d499 1
a499 1
	char	out[3*8+1];
d501 1
a501 1
	htond( &out[1], pt, 3 );
d513 1
a513 1
	char	out[3*8+1];
d518 1
a518 1
	htond( &out[1], in, 3 );
d529 1
a529 1
	char	out[3*8+1];
d531 1
a531 1
	htond( &out[1], pt, 3 );
d543 1
a543 1
	char	out[3*8+1];
d548 1
a548 1
	htond( &out[1], in, 3 );
d559 1
a559 1
	char	out[6*8+1];
d561 2
a562 2
	htond( &out[1], a, 3 );
	htond( &out[3*8+1], b, 3 );
d574 1
a574 1
	char	out[6*8+1];
d582 1
a582 1
	htond( &out[1], in, 6 );
@


10.2
log
@Added include of conf.h
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/plot3.c,v 10.1 1991/10/12 06:36:37 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/plot3.c,v 9.3 91/07/18 14:09:18 mike Exp $ (BRL)";
d34 2
@


9.3
log
@lint
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/plot3.c,v 9.2 91/01/12 08:42:34 mike Exp $ (BRL)";
@


9.2
log
@Added plot3.h
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/plot3.c,v 9.1 89/05/19 05:49:25 mike Rel3_5 $ (BRL)";
d79 1
a79 1
	while( *s != NULL )
d110 1
a110 1
	while( *s != NULL )
@


9.1
log
@Release_3.5
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 8.1 88/10/05 00:28:33 mike Rel3_0 $ (BRL)";
d39 2
@


8.1
log
@Release_3.0
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 7.5 88/09/17 00:16:41 mike Exp $ (BRL)";
@


7.5
log
@made all functions type void
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 7.4 88/02/08 20:04:43 mike Locked $ (BRL)";
@


7.4
log
@Added pl_flush()
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 7.3 88/02/06 04:21:46 phil Locked $ (BRL)";
d49 1
d59 1
d71 1
d82 1
d92 1
d102 1
d113 1
d125 1
d132 1
d143 1
d157 1
d175 1
d186 1
d194 1
d208 1
d219 1
d230 1
d241 1
d255 1
d288 1
d304 1
d324 1
d340 1
d356 1
d374 1
d391 1
d411 1
d425 1
d440 1
d460 1
d473 1
d490 1
d503 1
d520 1
d533 1
d550 1
d564 1
d584 1
d613 1
@


7.3
log
@Added vector form of pd_ routines as pdv_
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 7.2 88/01/29 22:47:55 mike Locked $ (BRL)";
d44 5
d108 1
a108 1
FILE *plotfp;
d119 1
a119 1
FILE *plotfp;
d125 1
a125 1
FILE *plotfp;
d174 7
d301 1
a301 1
/* no pd_linmod! */
@


7.2
log
@added new floating point routines
@
text
@d32 1
a32 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 7.1 87/11/02 23:28:22 phil Locked $ (BRL)";
d37 3
d385 7
a391 1
/* Double 3-D */
d393 7
d419 12
d447 12
d475 12
d503 13
d533 28
@


7.1
log
@Release 2.3
@
text
@d4 2
a5 2
 * A public-domain UNIX plot library, for 2-D and 3-D plotting
 * in 16-bit signed integer spaces.
d7 3
a9 3
 * These routines generate "UNIX plot" output (with the addition
 * of 3-D commands).  They behave almost exactly like the regular
 * libplot routines, except:
d14 2
a15 1
 *  (3) The names have been changed.
d17 1
a17 1
 * The 3-D extensions are those of Doug Gwyn, from his System V extensions.
d32 1
a32 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 6.1 87/07/11 07:52:51 mike Rel $ (BRL)";
a125 12
pl_box( plotfp, x1, y1, x2, y2 )
register FILE *plotfp;
int x1, y1, x2, y2;
{
	pl_move( plotfp, x1, y1 );
	pl_cont( plotfp, x1, y2 );
	pl_cont( plotfp, x2, y2 );
	pl_cont( plotfp, x2, y1 );
	pl_cont( plotfp, x1, y1 );
	pl_move( plotfp, x2, y2 );
}

d139 12
d155 11
a221 13
/*
 * XXX Warning: r, g, b are ints.  The output is chars.
 */
pl_color( plotfp, r, g, b )
register FILE *plotfp;
int r, g, b;
{
	putc( 'C', plotfp );
	putc( r, plotfp );
	putc( g, plotfp );
	putc( b, plotfp );
}

d248 248
@


6.1
log
@Release 2.0
@
text
@d31 1
a31 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 5.1 87/06/24 21:52:59 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d31 1
a31 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 4.2 87/02/12 22:08:42 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d31 1
a31 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 4.1 86/12/29 02:50:05 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d31 1
a31 1
static char RCSid[] = "@@(#)$Header: libplot3.c,v 1.1 86/09/24 04:04:31 mike Exp $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@
