head	11.9;
access;
symbols
	ansi-20040405-merged:11.6.2.1
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.6
	premerge-autoconf:11.6
	ansi-20040316-freeze:11.6.2.1
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.6
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.2
	offsite-5-3-pre:11.3
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:1.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.21.18.06.23;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.43;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.07.46.41;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.07.37;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	2002.08.15.20.54.49;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.03.31.01.56.49;	author morrison;	state Exp;
branches;
next	11.3;

11.3
date	2000.07.11.23.30.40;	author cjohnson;	state Exp;
branches;
next	11.2;

11.2
date	97.01.08.03.55.58;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.51.20;	author mike;	state Rel4_4;
branches;
next	10.7;

10.7
date	95.01.03.09.36.22;	author jra;	state Exp;
branches;
next	10.6;

10.6
date	94.11.04.04.48.23;	author mike;	state Exp;
branches;
next	10.5;

10.5
date	94.11.04.04.48.03;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.08.12.19.20.13;	author gdurf;	state Exp;
branches;
next	10.3;

10.3
date	94.05.05.18.34.50;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.01.12.18.00.49;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.36.39;	author mike;	state Rel4_0;
branches;
next	9.9;

9.9
date	91.09.21.03.10.47;	author mike;	state Exp;
branches;
next	9.8;

9.8
date	91.08.28.00.30.21;	author mike;	state Exp;
branches;
next	9.7;

9.7
date	91.07.02.04.14.08;	author mike;	state Exp;
branches;
next	9.6;

9.6
date	91.07.02.01.14.57;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	91.05.31.11.26.05;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	91.05.17.08.56.14;	author sue;	state Exp;
branches;
next	9.3;

9.3
date	91.05.09.22.15.11;	author sue;	state Exp;
branches;
next	9.2;

9.2
date	90.11.25.11.42.33;	author cjohnson;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.49.53;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.28.47;	author mike;	state Rel3_0;
branches;
next	7.7;

7.7
date	88.09.16.02.53.58;	author mike;	state Exp;
branches;
next	7.6;

7.6
date	88.08.15.23.49.26;	author mike;	state Exp;
branches;
next	7.5;

7.5
date	88.05.13.22.39.53;	author mike;	state Exp;
branches;
next	7.4;

7.4
date	88.02.08.23.41.41;	author mike;	state Exp;
branches;
next	7.3;

7.3
date	88.02.05.07.06.45;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	88.02.04.21.51.57;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.28.47;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.53.14;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.21.53.21;	author mike;	state Rel;
branches;
next	1.1;

1.1
date	87.01.12.18.59.36;	author mike;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.01.10;	author morrison;	state Exp;
branches;
next	;


desc
@unix-tig pack
write a string, using built-in symbols
@


11.9
log
@moved to src/
@
text
@/*
 *			T P _ S Y M B O L
 *
 *	Terminal Independant Graphics Display Package
 *		Mike Muuss  July 31, 1978
 *
 *	This routine is used to plot a string of ASCII symbols
 *  on the plot being generated, using a built-in set of fonts
 *  drawn as vector lists.
 * 
 *	Internally, the basic font resides in a 10x10 unit square.
 *  Externally, each character can be thought to occupy one square
 *  plotting unit;  the 'scale'
 *  parameter allows this to be changed as desired, although scale
 *  factors less than 10.0 are unlikely to be legible.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libbn/symbol.c,v 11.8 2004/05/10 15:30:43 erikg Exp $ (ARL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "plot3.h"
#include "vectfont.h"

/*
 *			T P _ 3 S Y M B O L
 */
void
tp_3symbol(FILE *fp, char *string, fastf_t *origin, fastf_t *rot, double scale)
    	    
    	        		/* string of chars to be plotted */
       	       			/* lower left corner of 1st char */
     	    			/* Transform matrix (WARNING: may xlate) */
      	      			/* scale factor to change 1x1 char sz */
{
	register unsigned char *cp;
	double	offset;			/* offset of char from given x,y */
	int	ysign;			/* sign of y motion, either +1 or -1 */
	vect_t	temp;
	vect_t	loc;
	mat_t	xlate_to_origin;
	mat_t	mat;

	if( string == NULL || *string == '\0' )
		return;			/* done before begun! */

	/*
	 *  The point "origin" will be the center of the axis rotation.
	 *  The text is located in a local coordinate system with the
	 *  lower left corner of the first character at (0,0,0), with
	 *  the text proceeding onward towards +X.
	 *  We need to rotate the text around it's local (0,0,0),
	 *  and then translate to the user's designated "origin".
	 *  If the user provided translation or
	 *  scaling in his matrix, it will *also* be applied.
	 */
	MAT_IDN( xlate_to_origin );
	MAT_DELTAS( xlate_to_origin,	origin[X], origin[Y], origin[Z] );
	bn_mat_mul( mat, xlate_to_origin, rot );

	/* Check to see if initialization is needed */
	if( tp_cindex[040] == 0 )  tp_setup();

	/* Draw each character in the input string */
	offset = 0;
	for( cp = (unsigned char *)string ; *cp; cp++, offset += scale )  {
		register TINY	*p;	/* pointer to stroke table */
		register int	stroke;

		VSET( temp, offset, 0, 0 );
		MAT4X3PNT( loc, mat, temp );
		pdv_3move( fp, loc );

		for( p = tp_cindex[*cp]; (stroke= *p) != LAST; p++ )  {
			int	draw;

			if( stroke==NEGY )  {
				ysign = (-1);
				stroke = *++p;
			} else
				ysign = 1;

			/* Detect & process pen control */
			if( stroke < 0 )  {
				stroke = -stroke;
				draw = 0;
			} else
				draw = 1;

			/* stroke co-ordinates in string coord system */
			VSET( temp, (stroke/11) * 0.1 * scale + offset,
				   (ysign * (stroke%11)) * 0.1 * scale, 0 );
			MAT4X3PNT( loc, mat, temp );
			if( draw )
				pdv_3cont( fp, loc );
			else
				pdv_3move( fp, loc );
		}
	}
}


/*
 *			T P _ 2 S Y M B O L
 */
void
tp_2symbol(FILE *fp, char *string, double x, double y, double scale, double theta)
    	    
    	        		/* string of chars to be plotted */
      	  			/* x,y of lower left corner of 1st char */
      	  
      	      			/* scale factor to change 1x1 char sz */
      	      			/* degrees ccw from X-axis */
{
	mat_t	mat;
	vect_t	p;

	bn_mat_angles( mat, 0.0, 0.0, theta );
	VSET( p, x, y, 0 );
	tp_3symbol( fp, string, p, mat, scale );
}

/*
 *  This FORTRAN interface expects REAL args (single precision).
 */
void
PL_FORTRAN(f2symb, F2SYMB)( fp, string, x, y, scale, theta )
FILE	**fp;
char	*string;
float	*x;
float	*y;
float	*scale;
float	*theta;
{
	char buf[128];

	strncpy( buf, string, sizeof(buf)-1 );
	buf[sizeof(buf)-1] = '\0';
	tp_2symbol( *fp, buf, *x, *y, *scale, *theta );
}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libbn/symbol.c,v 11.7 2004/04/05 07:46:41 morrison Exp $ (ARL)";
@


11.7
log
@merge of ansi-6-0-branch into HEAD
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d31 5
a35 1
#include "conf.h"
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/symbol.c,v 11.4 2001/03/31 01:56:49 morrison Exp $ (ARL)";
d50 6
a55 6
tp_3symbol( fp, string, origin, rot, scale )
FILE	*fp;
char	*string;		/* string of chars to be plotted */
point_t	origin;			/* lower left corner of 1st char */
mat_t	rot;			/* Transform matrix (WARNING: may xlate) */
double	scale;			/* scale factor to change 1x1 char sz */
d128 7
a134 7
tp_2symbol( fp, string, x, y, scale, theta )
FILE	*fp;
char	*string;		/* string of chars to be plotted */
double	x;			/* x,y of lower left corner of 1st char */
double	y;
double	scale;			/* scale factor to change 1x1 char sz */
double	theta;			/* degrees ccw from X-axis */
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/symbol.c,v 11.6 2002/08/20 17:07:37 jra Exp $ (ARL)";
d50 6
a55 6
tp_3symbol(FILE *fp, char *string, fastf_t *origin, fastf_t *rot, double scale)
    	    
    	        		/* string of chars to be plotted */
       	       			/* lower left corner of 1st char */
     	    			/* Transform matrix (WARNING: may xlate) */
      	      			/* scale factor to change 1x1 char sz */
d128 7
a134 7
tp_2symbol(FILE *fp, char *string, double x, double y, double scale, double theta)
    	    
    	        		/* string of chars to be plotted */
      	  			/* x,y of lower left corner of 1st char */
      	  
      	      			/* scale factor to change 1x1 char sz */
      	      			/* degrees ccw from X-axis */
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d50 6
a55 6
tp_3symbol(FILE *fp, char *string, fastf_t *origin, fastf_t *rot, double scale)
    	    
    	        		/* string of chars to be plotted */
       	       			/* lower left corner of 1st char */
     	    			/* Transform matrix (WARNING: may xlate) */
      	      			/* scale factor to change 1x1 char sz */
d128 7
a134 7
tp_2symbol(FILE *fp, char *string, double x, double y, double scale, double theta)
    	    
    	        		/* string of chars to be plotted */
      	  			/* x,y of lower left corner of 1st char */
      	  
      	      			/* scale factor to change 1x1 char sz */
      	      			/* degrees ccw from X-axis */
@


11.4
log
@Deprecated bn_mat_idn() and bn_mat_zero(), updated calls to h/vmath.h's MAT_IDN() and MAT_ZERO() performance improved macros.
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/symbol.c,v 11.3 2000/07/11 23:30:40 cjohnson Exp $ (ARL)";
d50 6
a55 6
tp_3symbol( fp, string, origin, rot, scale )
FILE	*fp;
char	*string;		/* string of chars to be plotted */
point_t	origin;			/* lower left corner of 1st char */
mat_t	rot;			/* Transform matrix (WARNING: may xlate) */
double	scale;			/* scale factor to change 1x1 char sz */
d128 7
a134 7
tp_2symbol( fp, string, x, y, scale, theta )
FILE	*fp;
char	*string;		/* string of chars to be plotted */
double	x;			/* x,y of lower left corner of 1st char */
double	y;
double	scale;			/* scale factor to change 1x1 char sz */
double	theta;			/* degrees ccw from X-axis */
@


11.3
log
@LINT picking.  Missing includes and static const for RCSids
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/symbol.c,v 11.2 1997/01/08 03:55:58 mike Exp $ (ARL)";
d78 1
a78 1
	bn_mat_idn( xlate_to_origin );
@


11.2
log
@Changed pl_mat_* to bn_mat_*
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/libbn/RCS/symbol.c,v 11.1 1995/01/04 09:51:20 mike Rel4_4 mike $ (ARL)";
d34 1
a34 1
#ifdef USE_STRING_H
@


11.1
log
@Release_4.4
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/symbol.c,v 10.7 95/01/03 09:36:22 jra Exp $ (ARL)";
d78 1
a78 1
	pl_mat_idn( xlate_to_origin );
d80 1
a80 1
	pl_mat_mul( mat, xlate_to_origin, rot );
d139 1
a139 1
	pl_mat_angles( mat, 0.0, 0.0, theta );
@


10.7
log
@*** empty log message ***
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/symbol.c,v 10.6 94/11/04 04:48:23 mike Exp Locker: jra $ (ARL)";
@


10.6
log
@mtemp unused.
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/symbol.c,v 10.5 94/11/04 04:48:03 mike Exp Locker: mike $ (ARL)";
d95 1
a95 1
		for( p = tp_cindex[*cp]; ((stroke= *p)&0xFF) != LAST; p++ )  {
d98 1
a98 1
			if( (stroke&0xFF)==NEGY )  {
@


10.5
log
@header
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header$ (ARL)";
a62 1
	mat_t	mtemp;
@


10.4
log
@Factored ifdefs
@
text
@d17 9
d27 4
@


10.3
log
@vectfont.h is now a BRL-CAD general header file.
@
text
@d18 2
d21 5
@


10.2
log
@Moved stroke table off to vectfont.c
@
text
@d24 1
a24 2

#include "./vectfont.h"
@


10.1
log
@Release_4.0
@
text
@d25 1
a25 11
/*
 *	Motion encoding macros
 *
 * All characters reference absolute points within a 10 x 10 square
 */
#define	brt(x,y)	(11*x+y)
#define drk(x,y)	-(11*x+y)
#define	LAST		-128		/* 0200 Marks end of stroke list */
#define	NEGY		-127		/* 0201 Denotes negative y stroke */
#define bneg(x,y)	NEGY, brt(x,y)
#define dneg(x,y)	NEGY, drk(x,y)
a26 9
#if defined(CRAY1) || defined(CRAY2) || defined(mips)
#define TINY	int
#else
#define TINY	char		/* must be signed */
#endif

static TINY	*tp_cindex[256];	/* index to stroke tokens */
extern TINY	tp_ctable[];	/* table of strokes */

a27 24
 *  Once-only setup routine
 */
static void
tp_setup()
{
	register TINY	*p;	/* pointer to stroke table */
	register int i;

	p = tp_ctable;		/* pointer to stroke list */

	/* Store start addrs of each stroke list */
	for( i=040-5; i<128; i++)  {
		tp_cindex[i+128] = tp_cindex[i] = p;
		while( (*p++) != LAST );
	}
	for( i=6; i<040; i++ )  {
		tp_cindex[i+128] = tp_cindex[i] = tp_cindex['?'];
	}
	for( i=1; i<6; i++ )  {
		tp_cindex[i+128] = tp_cindex[i] = tp_cindex[040-1+i];
	}
}

/*
a124 984

/*	tables for markers	*/

TINY	tp_ctable[] = {

/*	+	*/
	drk(0, 5),
	brt(8, 5),
	drk(4, 8),
	brt(4, 2),
	LAST,

/*	x	*/
	drk(0, 2),
	brt(8, 8),
	drk(0, 8),
	brt(8, 2),
	LAST,

/*	triangle	*/
	drk(0, 2),
	brt(4, 8),
	brt(8, 2),
	brt(0, 2),
	LAST,

/*	square	*/
	drk(0, 2),
	brt(0, 8),
	brt(8, 8),
	brt(8, 2),
	brt(0, 2),
	LAST,

/*	hourglass	*/
	drk(0, 2),
	brt(8, 8),
	brt(0, 8),
	brt(8, 2),
	brt(0, 2),
	LAST,

/*	table for ascii 040, ' '	*/
	LAST,

/*	table for !	*/
	drk(3, 0),
	brt(5, 2),
	brt(5, 0),
	brt(3, 2),
	brt(3, 0),
	drk(4, 4),
	brt(3, 10),
	brt(5, 10),
	brt(4, 4),
	brt(4, 10),
	LAST,

/*	table for "	*/
	drk(1, 10),
	brt(3, 10),
	brt(2, 7),
	brt(1, 10 ),
	drk(5, 10),
	brt(7, 10),
	brt(6, 7),
	brt(5, 10),
	LAST,

/*	table for #	*/
	drk(1, 0),
	brt(3, 9),
	drk(6, 9),
	brt(4, 0),
	drk(6, 3),
	brt(0, 3),
	drk(1, 6),
	brt(7, 6),
	LAST,

/*	table for $	*/
	drk(1, 2),
	brt(1, 1),
	brt(7, 1),
	brt(7, 5),
	brt(1, 5),
	brt(1, 9),
	brt(7, 9),
	brt(7, 8),
	drk(4, 10),
	brt(4, 0),
	LAST,

/*	table for %	*/
	drk(3, 10),
	brt(3, 7),
	brt(0, 7),
	brt(0, 10),
	brt(8, 10),
	brt(0, 0),
	drk(8, 0),
	brt(5, 0),
	brt(5, 3),
	brt(8, 3),
	brt(8, 0),
	LAST,

/*	table for &	*/
	drk(7, 3),
	brt(4, 0),
	brt(1, 0),
	brt(0, 3),
	brt(5, 8),
	brt(4, 10),
	brt(3, 10),
	brt(1, 8),
	brt(8, 0),
	LAST,

/*	table for '	*/
	drk(4, 6),
	brt(5, 10),
	brt(6, 10),
	brt(4, 6),
	LAST,

/*	table for (	*/
	drk(5, 0 ),
	brt(3, 1 ),
	brt(2, 4 ),
	brt(2, 6 ),
	brt(3, 9 ),
	brt(5, 10 ),
	LAST,

/*	table for )	*/
	drk(3, 0 ),
	brt(5, 1 ),
	brt(6, 4 ),
	brt(6, 6 ),
	brt(5, 9 ),
	brt(3, 10 ),
	LAST,

/*	table for *	*/
	drk(4, 2 ),
	brt(4, 8 ),
	drk(6, 7 ),
	brt(2, 3 ),
	drk(6, 3 ),
	brt(2, 7 ),
	drk(1, 5 ),
	brt(7, 5 ),
	LAST,

/*	table for +	*/
	drk(1, 5 ),
	brt(7, 5 ),
	drk(4, 8 ),
	brt(4, 2 ),
	LAST,

/*	table for, 	*/
	drk(5, 0 ),
	brt(3, 2 ),
	brt(3, 0 ),
	brt(5, 2 ),
	brt(5, 0 ),
	bneg(2, 2 ),
	brt(4, 0 ),
	LAST,

/*	table for -	*/
	drk(1, 5 ),
	brt(7, 5 ),
	LAST,

/*	table for .	*/
	drk(5, 0 ),
	brt(3, 2 ),
	brt(3, 0 ),
	brt(5, 2 ),
	brt(5, 0 ),
	LAST,

/*	table for /	*/
	brt(8, 10 ),
	LAST,

/*	table for 0	*/
	drk(8, 10),
	brt(0, 0),
	brt(0, 10),
	brt(8, 10),
	brt(8, 0),
	brt(0, 0),
	LAST,

/*	table for 1	*/
	drk(4, 0 ),
	brt(4, 10 ),
	brt(2, 8 ),
	LAST,

/*	table for 2	*/
	drk(0, 6 ),
	brt(0, 8 ),
	brt(3, 10 ),
	brt(5, 10 ),
	brt(8, 8 ),
	brt(8, 7 ),
	brt(0, 2 ),
	brt(0, 0 ),
	brt(8, 0 ),
	LAST,

/*	table for 3	*/
	drk(0, 10 ),
	brt(8, 10 ),
	brt(8, 5 ),
	brt(0, 5 ),
	brt(8, 5 ),
	brt(8, 0 ),
	brt(0, 0 ),
	LAST,

/*	table for 4	*/
	drk(0, 10 ),
	brt(0, 5 ),
	brt(8, 5 ),
	drk(8, 10 ),
	brt(8, 0 ),
	LAST,

/*	table for 5	*/
	drk(8, 10 ),
	brt(0, 10 ),
	brt(0, 5 ),
	brt(8, 5 ),
	brt(8, 0 ),
	brt(0, 0 ),
	LAST,

/*	table for 6	*/
	drk(0, 10 ),
	brt(0, 0 ),
	brt(8, 0 ),
	brt(8, 5 ),
	brt(0, 5 ),
	LAST,

/*	table for 7	*/
	drk(0, 10 ),
	brt(8, 10 ),
	brt(6, 0 ),
	LAST,

/*	table for 8	*/
	drk(0, 5 ),
	brt(0, 0 ),
	brt(8, 0 ),
	brt(8, 5 ),
	brt(0, 5 ),
	brt(0, 10 ),
	brt(8, 10 ),
	brt(8, 5 ),
	LAST,

/*	table for 9	*/
	drk(8, 5 ),
	brt(0, 5 ),
	brt(0, 10 ),
	brt(8, 10 ),
	brt(8, 0 ),
	LAST,

/*	table for :	*/
	drk(5, 6 ),
	brt(3, 8 ),
	brt(3, 6 ),
	brt(5, 8 ),
	brt(5, 6 ),
	drk(5, 0 ),
	brt(3, 2 ),
	brt(3, 0 ),
	brt(5, 2 ),
	brt(5, 0 ),
	LAST,

/*	table for ;	*/
	drk(5, 6 ),
	brt(3, 8 ),
	brt(3, 6 ),
	brt(5, 8 ),
	brt(5, 6 ),
	drk(5, 0 ),
	brt(3, 2 ),
	brt(3, 0 ),
	brt(5, 2 ),
	brt(5, 0 ),
	bneg(2, 2 ),
	brt(4, 0 ),
	LAST,

/*	table for <	*/
	drk(8, 8 ),
	brt(0, 5 ),
	brt(8, 2 ),
	LAST,

/*	table for =	*/
	drk(0, 7 ),
	brt(8, 7 ),
	drk(0, 3 ),
	brt(8, 3 ),
	LAST,

/*	table for >	*/
	drk(0, 8 ),
	brt(8, 5 ),
	brt(0, 2 ),
	LAST,

/*	table for ?	*/
	drk(3, 0 ),
	brt(5, 2 ),
	brt(5, 0 ),
	brt(3, 2 ),
	brt(3, 0 ),
	drk(1, 7 ),
	brt(1, 9 ),
	brt(3, 10 ),
	brt(5, 10 ),
	brt(7, 9 ),
	brt(7, 7 ),
	brt(4, 5 ),
	brt(4, 3 ),
	LAST,

/*	table for @@	*/
	drk(0, 8 ),
	brt(2, 10 ),
	brt(6, 10 ),
	brt(8, 8 ),
	brt(8, 2 ),
	brt(6, 0 ),
	brt(2, 0 ),
	brt(1, 1 ),
	brt(1, 4 ),
	brt(2, 5 ),
	brt(4, 5 ),
	brt(5, 4 ),
	brt(5, 0 ),
	LAST,

/*	table for A	*/
	brt(0, 8 ),
	brt(2, 10 ),
	brt(6, 10 ),
	brt(8, 8 ),
	brt(8, 0 ),
	drk(0, 5 ),
	brt(8, 5 ),
	LAST,

/*	table for B	*/
	brt(0, 10 ),
	brt(5, 10 ),
	brt(8, 9 ),
	brt(8, 6 ),
	brt(5, 5 ),
	brt(0, 5 ),
	brt(5, 5 ),
	brt(8, 4 ),
	brt(8, 1 ),
	brt(5, 0 ),
	brt(0, 0 ),
	LAST,

/*	table for C	*/
	drk(8, 2 ),
	brt(6, 0 ),
	brt(2, 0 ),
	brt(0, 2 ),
	brt(0, 8 ),
	brt(2, 10 ),
	brt(6, 10 ),
	brt(8, 8 ),
	LAST,

/*	table for D	*/
	brt(0, 10 ),
	brt(5, 10 ),
	brt(8, 8 ),
	brt(8, 2 ),
	brt(5, 0 ),
	brt(0, 0 ),
	LAST,

/*	table for E	*/
	drk(8, 0 ),
	brt(0, 0 ),
	brt(0, 10 ),
	brt(8, 10 ),
	drk(0, 5 ),
	brt(5, 5 ),
	LAST,

/*	table for F	*/
	brt(0, 10 ),
	brt(8, 10 ),
	drk(0, 5 ),
	brt(5, 5 ),
	LAST,

/*	table for G	*/
	drk(5, 5 ),
	brt(8, 5 ),
	brt(8, 2 ),
	brt(6, 0 ),
	brt(2, 0 ),
	brt(0, 2 ),
	brt(0, 8 ),
	brt(2, 10 ),
	brt(6, 10 ),
	brt(8, 8 ),
	LAST,

/*	table for H	*/
	brt(0, 10 ),
	drk(8, 10 ),
	brt(8, 0 ),
	drk(0, 6 ),
	brt(8, 6 ),
	LAST,

/*	table for I	*/
	drk(4, 0 ),
	brt(6, 0 ),
	drk(5, 0 ),
	brt(5, 10 ),
	brt(4, 10 ),
	brt(6, 10 ),
	LAST,

/*	table for J	*/
	drk(0, 2 ),
	brt(2, 0 ),
	brt(5, 0 ),
	brt(7, 2 ),
	brt(7, 10 ),
	brt(6, 10 ),
	brt(8, 10 ),
	LAST,

/*	table for K	*/
	brt(0, 10 ),
	drk(0, 5 ),
	brt(8, 10 ),
	drk(3, 7 ),
	brt(8, 0 ),
	LAST,

/*	table for L	*/
	drk(8, 0 ),
	brt(0, 0 ),
	brt(0, 10 ),
	LAST,

/*	table for M	*/
	brt(0, 10 ),
	brt(4, 5 ),
	brt(8, 10 ),
	brt(8, 10 ),
	brt(8, 0 ),
	LAST,

/*	table for N	*/
	brt(0, 10 ),
	brt(8, 0 ),
	brt(8, 10 ),
	LAST,

/*	table for O	*/
	drk(0, 2 ),
	brt(0, 8 ),
	brt(2, 10 ),
	brt(6, 10 ),
	brt(8, 8 ),
	brt(8, 2 ),
	brt(6, 0 ),
	brt(2, 0 ),
	brt(0, 2 ),
	LAST,

/*	table for P	*/
	brt(0, 10 ),
	brt(6, 10 ),
	brt(8, 9 ),
	brt(8, 6 ),
	brt(6, 5 ),
	brt(0, 5 ),
	LAST,

/*	table for Q	*/
	drk(0, 2 ),
	brt(0, 8 ),
	brt(2, 10 ),
	brt(6, 10 ),
	brt(8, 8 ),
	brt(8, 2 ),
	brt(6, 0 ),
	brt(2, 0 ),
	brt(0, 2 ),
	drk(5, 3 ),
	brt(8, 0 ),
	LAST,

/*	table for R	*/
	brt(0, 10 ),
	brt(6, 10 ),
	brt(8, 8 ),
	brt(8, 6 ),
	brt(6, 5 ),
	brt(0, 5 ),
	drk(5, 5 ),
	brt(8, 0 ),
	LAST,

/*	table for S	*/
	drk(0, 1 ),
	brt(1, 0 ),
	brt(6, 0 ),
	brt(8, 2 ),
	brt(8, 4 ),
	brt(6, 6 ),
	brt(2, 6 ),
	brt(0, 7 ),
	brt(0, 9 ),
	brt(1, 10 ),
	brt(7, 10 ),
	brt(8, 9 ),
	LAST,

/*	table for T	*/
	drk(4, 0 ),
	brt(4, 10 ),
	drk(0, 10 ),
	brt(8, 10 ),
	LAST,

/*	table for U	*/
	drk(0, 10 ),
	brt(0, 2 ),
	brt(2, 0 ),
	brt(6, 0 ),
	brt(8, 2 ),
	brt(8, 10 ),
	LAST,

/*	table for V	*/
	drk(0, 10 ),
	brt(4, 0 ),
	brt(8, 10 ),
	LAST,

/*	table for W	*/
	drk(0, 10 ),
	brt(1, 0 ),
	brt(4, 4 ),
	brt(7, 0 ),
	brt(8, 10 ),
	LAST,

/*	table for X	*/
	brt(8, 10 ),
	drk(0, 10 ),
	brt(8, 0 ),
	LAST,

/*	table for Y	*/
	drk(0, 10 ),
	brt(4, 4 ),
	brt(8, 10 ),
	drk(4, 4 ),
	brt(4, 0 ),
	LAST,

/*	table for Z	*/
	drk(0, 10 ),
	brt(8, 10 ),
	brt(0, 0 ),
	brt(8, 0 ),
	LAST,

/*	table for [	*/
	drk(6, 0 ),
	brt(4, 0 ),
	brt(4, 10 ),
	brt(6, 10 ),
	LAST,

/*	table for \	*/
	drk(0, 10 ),
	brt(8, 0 ),
	LAST,

/*	table for ]	*/
	drk(2, 0 ),
	brt(4, 0 ),
	brt(4, 10 ),
	brt(2, 10 ),
	LAST,

/*	table for ^	*/
	drk(4, 0 ),
	brt(4, 10 ),
	drk(2, 8 ),
	brt(4, 10 ),
	brt(6, 8 ),
	LAST,

/*	table for _	*/
	dneg(0, 1),
	bneg(11, 1),
	LAST,

/*	table for ascii 96: accent	*/
	drk(3, 10),
	brt(5, 6),
	brt(4, 10),
	brt(3, 10),
	LAST,

/*	table for a	*/
	drk(0, 5),
	brt(1, 6),
	brt(6, 6),
	brt(7, 5),
	brt(7, 1),
	brt(8, 0),
	drk(7, 1),
	brt(6, 0),
	brt(1, 0),
	brt(0, 1),
	brt(0, 2),
	brt(1, 3),
	brt(6, 3),
	brt(7, 2),
	LAST,

/*	table for b	*/
	brt(0, 10),
	drk(8, 3),
	brt(7, 5),
	brt(4, 6),
	brt(1, 5),
	brt(0, 3),
	brt(1, 1),
	brt(4, 0),
	brt(7, 1),
	brt(8, 3),
	LAST,

/*	table for c	*/
	drk(8, 5),
	brt(7, 6),
	brt(2, 6),
	brt(0, 4),
	brt(0, 4),
	brt(0, 2),
	brt(2, 0),
	brt(7, 0),
	brt(8, 1),
	LAST,

/*	table for d	*/
	drk(8, 0),
	brt(8, 10),
	drk(8, 3),
	brt(7, 5),
	brt(4, 6),
	brt(1, 5),
	brt(0, 3),
	brt(1, 1),
	brt(4, 0),
	brt(7, 1),
	brt(8, 3),
	LAST,

/*	table for e	*/
	drk(0, 4),
	brt(1, 3),
	brt(7, 3),
	brt(8, 4),
	brt(8, 5),
	brt(7, 6),
	brt(1, 6),
	brt(0, 5),
	brt(0, 1),
	brt(1, 0),
	brt(7, 0),
	brt(8, 1),
	LAST,

/*	table for f	*/
	drk(2, 0),
	brt(2, 9),
	brt(3, 10),
	brt(5, 10),
	brt(6, 9),
	drk(1, 5),
	brt(4, 5),
	LAST,

/*	table for g	*/
	drk(8, 6),
	drk(8, 3),
	brt(7, 5),
	brt(4, 6),
	brt(1, 5),
	brt(0, 3),
	brt(1, 1),
	brt(4, 0),
	brt(7, 1),
	brt(8, 3),
	bneg(8, 2),
	bneg(7, 3),
	bneg(1, 3),
	bneg(0, 2),
	LAST,

/*	table for h	*/
	brt(0, 10),
	drk(0, 4),
	brt(2, 6),
	brt(6, 6),
	brt(8, 4),
	brt(8, 0),
	LAST,

/*	table for i	*/
	drk(4, 0),
	brt(4, 6),
	brt(3, 6),
	drk(4, 9),
	brt(4, 8),
	drk(3, 0),
	brt(5, 0),
	LAST,

/*	table for j	*/
	drk(5, 6),
	brt(6, 6),
	bneg(6, 2),
	bneg(5, 3),
	bneg(3, 3),
	bneg(2, 2),
	LAST,

/*	table for k	*/
	brt(2, 0),
	brt(2, 10),
	brt(0, 10),
	drk(2, 4),
	brt(4, 4),
	brt(8, 6),
	drk(4, 4),
	brt(8, 0),
	LAST,

/*	table for l	*/
	drk(3, 10),
	brt(4, 10),
	brt(4, 2),
	brt(5, 0),
	LAST,

/*	table for m	*/
	brt(0, 6),
	drk(0, 5),
	brt(1, 6),
	brt(3, 6),
	brt(4, 5),
	brt(4, 0),
	drk(4, 5),
	brt(5, 6),
	brt(7, 6),
	brt(8, 5),
	brt(8, 0),
	LAST,

/*	table for n	*/
	brt(0, 6),
	drk(0, 4),
	brt(2, 6),
	brt(6, 6),
	brt(8, 4),
	brt(8, 0),
	LAST,

/*	table for o	*/
	drk(8, 3),
	brt(7, 5),
	brt(4, 6),
	brt(1, 5),
	brt(0, 3),
	brt(1, 1),
	brt(4, 0),
	brt(7, 1),
	brt(8, 3),
	LAST,

/*	table for p	*/
	drk(0, 6),
	bneg(0, 3),
	drk(8, 3),
	brt(7, 5),
	brt(4, 6),
	brt(1, 5),
	brt(0, 3),
	brt(1, 1),
	brt(4, 0),
	brt(7, 1),
	brt(8, 3),
	LAST,

/*	table for q	*/
	drk(8, 6),
	drk(8, 3),
	brt(7, 5),
	brt(4, 6),
	brt(1, 5),
	brt(0, 3),
	brt(1, 1),
	brt(4, 0),
	brt(7, 1),
	brt(8, 3),
	bneg(8, 3),
	bneg(9, 3),
	LAST,

/*	table for r	*/
	brt(1, 0),
	brt(1, 6),
	brt(0, 6),
	drk(1, 4),
	brt(3, 6),
	brt(6, 6),
	brt(8, 4),
	LAST,

/*	table for s	*/
	drk(0, 1),
	brt(1, 0),
	brt(7, 0),
	brt(8, 1),
	brt(7, 2),
	brt(1, 4),
	brt(0, 5),
	brt(1, 6),
	brt(7, 6),
	brt(8, 5),
	LAST,

/*	table for t	*/
	drk(7, 1),
	brt(6, 0),
	brt(4, 0),
	brt(3, 1),
	brt(3, 10),
	brt(2, 10),
	drk(1, 5),
	brt(5, 5),
	LAST,

/*	table for u	*/
	drk(0, 6),
	brt(1, 6),
	brt(1, 1),
	brt(2, 0),
	brt(6, 0),
	brt(7, 1),
	brt(7, 6),
	drk(7, 1),
	brt(8, 0),
	LAST,

/*	table for v	*/
	drk(0, 6),
	brt(4, 0),
	brt(8, 6),
	LAST,

/*	table for w	*/
	drk(0, 6),
	brt(0, 5),
	brt(2, 0),
	brt(4, 5),
	brt(6, 0),
	brt(8, 5),
	brt(8, 6),
	LAST,

/*	table for x	*/
	brt(8, 6),
	drk(0, 6),
	brt(8, 0),
	LAST,

/*	table for y	*/
	drk(0, 6),
	brt(0, 1),
	brt(1, 0),
	brt(7, 0),
	brt(8, 1),
	drk(8, 6),
	bneg(8, 2),
	bneg(7, 3),
	bneg(1, 3),
	bneg(0, 2),
	LAST,

/*	table for z	*/
	drk(0, 6),
	brt(8, 6),
	brt(0, 0),
	brt(8, 0),
	LAST,

/*	table for ascii 123, left brace	*/
	drk(6, 10),
	brt(5, 10),
	brt(4, 9),
	brt(4, 6),
	brt(3, 5),
	brt(4, 4),
	brt(4, 1),
	brt(5, 0),
	brt(6, 0),
	LAST,

/*	table for ascii 124, vertical bar	*/
	drk(4, 4),
	brt(4, 0),
	brt(5, 0),
	brt(5, 4),
	brt(4, 4),
	drk(4, 6),
	brt(4, 10),
	brt(5, 10),
	brt(5, 6),
	brt(4, 6),
	LAST,

/*	table for ascii 125, right brace	*/
	drk(2, 0),
	brt(3, 0),
	brt(4, 1),
	brt(4, 4),
	brt(5, 5),
	brt(4, 6),
	brt(4, 9),
	brt(3, 10),
	brt(2, 10),
	LAST,

/*	table for ascii 126, tilde	*/
	drk(0, 5),
	brt(1, 6),
	brt(3, 6),
	brt(5, 4),
	brt(7, 4),
	brt(8, 5),
	LAST,

/*	table for ascii 127, rubout	*/
	drk(0, 2),
	brt(0, 8),
	brt(8, 8),
	brt(8, 2),
	brt(0, 2),
	LAST
};
@


9.9
log
@TINY is signed, don't strip off sign extention
@
text
@@


9.8
log
@Stardent pointed out problem with 0200 being used as initializer for
a signed char - changed to -128.
@
text
@d60 1
a60 1
		while( (*p++ & 0377) != LAST );
@


9.7
log
@Modified libplot3 to have private version of LIBRT's matrix library,
by running SED over the source to librt/mat.c to create, e.g., pl_mat_inv
so that LIBRT didn't need to be linked in, just to do plotting.
@
text
@d32 2
a33 2
#define	LAST		0200		/* Marks end of stroke list */
#define	NEGY		0201		/* Denotes negative y stroke */
@


9.6
log
@TIG-Pack is now part of libplot3
@
text
@d103 1
a103 1
	mat_idn( xlate_to_origin );
d105 1
a105 1
	mat_mul( mat, xlate_to_origin, rot );
d164 1
a164 1
	mat_angles( mat, 0.0, 0.0, theta );
@


9.5
log
@ANSI prototypes
@
text
@a23 1
#include "./tig.h"
@


9.4
log
@Corrected the ommision of the declaration of the file pointer paramenter
for tp_2symbol() and tp_3symbol().  Also changed the declartion for
"origin" in the parameter list to tp_3symbol() from vect_t to point_t...
no functional difference, but aesthetics and accuracy demanded this.
@
text
@d23 1
a46 2
void		tp_3symbol();

d72 1
a72 1
 *			T P _ S Y M B O L
a74 16
tp_2symbol( fp, string, x, y, scale, theta )
FILE	*fp;
char	*string;		/* string of chars to be plotted */
double	x, y;			/* x,y of lower left corner of 1st char */
double	scale;			/* scale factor to change 1x1 char sz */
double	theta;			/* degrees ccw from X-axis */
{
	mat_t	mat;
	vect_t	p;

	mat_angles( mat, 0.0, 0.0, theta );
	VSET( p, x, y, 0 );
	tp_3symbol( fp, string, p, mat, scale );
}

void
d150 20
d1158 1
a1158 1
F(f2symb, F2SYMB)( fp, string, x, y, scale, theta )
d1161 2
a1162 1
float	*x, *y;
@


9.3
log
@Changed from pl_strncpy() [which didn't exist] to strncpy().
@
text
@d77 1
d93 1
d95 1
a95 1
vect_t	origin;			/* lower left corner of 1st char */
@


9.2
log
@Change the fortran routines to use the F macro from
libplot3/fortran.c to generate subroutine names. (case and trailing 
underscore)
@
text
@d1162 2
a1163 1
	pl_strncpy( buf, string, sizeof(buf) );
@


9.1
log
@Release_3.5
@
text
@d23 1
d1153 1
a1153 1
F2SYMB( fp, string, x, y, scale, theta )
@


8.1
log
@Release_3.0
@
text
@@


7.7
log
@cray --> CRAY1
@
text
@@


7.6
log
@MIPS chars are not signed.
@
text
@d36 1
a36 1
#if defined(cray) || defined(CRAY2) || defined(mips)
@


7.5
log
@lint fix
@
text
@d36 1
a36 1
#if defined(cray) || defined(CRAY2)
@


7.4
log
@Latest round of cleanups and name changes.
@
text
@d42 2
a43 2
static TINY	*ppindex[256];	/* index to stroke tokens */
extern TINY	pptable[];	/* table of strokes */
d45 2
d50 2
a51 1
static tp_setup()
d56 1
a56 1
	p = pptable;		/* pointer to stroke list */
d60 1
a60 1
		ppindex[i+128] = ppindex[i] = p;
d64 1
a64 1
		ppindex[i+128] = ppindex[i] = ppindex['?'];
d67 1
a67 1
		ppindex[i+128] = ppindex[i] = ppindex[040-1+i];
d74 1
d89 1
d123 1
a123 1
	if( ppindex[040] == 0 )  tp_setup();
d135 1
a135 1
		for( p = ppindex[*cp]; ((stroke= *p)&0xFF) != LAST; p++ )  {
d166 1
a166 1
static TINY	pptable[] = {
d1151 1
@


7.3
log
@More 3D work, new calling sequences
@
text
@d71 1
a71 1
tp_symbol( fp, string, x, y, scale, theta )
d1146 1
a1146 1
FSYMBOL( fp, string, x, y, scale, theta )
d1155 2
a1156 21
	tp_strncpy( buf, string, sizeof(buf) );
	tp_symbol( *fp, buf, *x, *y, *scale, *theta );
}

/*
 *			T P _ S T R N C P Y
 *
 *  Make null-terminated copy of a string in output buffer,
 *  being careful not to exceed indicated buffer size
 *  Accept "$" as alternate string-terminator for FORTRAN Holerith constants.
 */
tp_strncpy( out, in, sz )
register char *out;
register char *in;
register int sz;
{
	register int c;

	while( --sz > 0 && (c = *in++) != '\0' && c != '$' )
		*out++ = c;
	*out++ = '\0';
@


7.2
log
@Beginning of new version for floating point.
@
text
@d21 3
d77 14
a91 1
	double	xrot, yrot;		/* x and y rotation factors */
a92 2
	double	x2, y2;			/* char pos in local coord system */
	double	x3, y3;			/* char pos after rotation */
d94 5
d103 14
a119 4
	/* Apply rotation */
	xrot = cos( 0.0174533 * theta );
	yrot = sin( 0.0174533 * theta );

d126 3
a128 1
		pd_move( fp, x+offset*xrot, y+offset*yrot );
d147 3
a149 6
			x2 = (stroke/11) * 0.1 * scale + offset;
			y2 = (ysign * (stroke%11)) * 0.1 * scale;

			/* Plot this stroke */
			x3 = x + x2*xrot - y2*yrot;
			y3 = y + x2*yrot + y2*xrot;
d151 1
a151 1
				pd_cont( fp, x3, y3 );
d153 1
a153 1
				pd_move( fp, x3, y3 );
d157 1
@


7.1
log
@Release 2.3
@
text
@d33 5
a37 1
static char		*ppindex[256];	/* index to stroke tokens */
d39 29
d70 2
a71 2
int	x, y;			/* x,y of lower left corner of 1st char */
double	scale;			/* scale factor to change 10x10 char sz */
d78 1
a78 1
	int	x3, y3;			/* more work areas */
a79 1
	extern char	pptable[];	/* table of strokes */
d85 1
a85 3
	if( ppindex[040] == 0 )  {
		register char	*p;	/* pointer to stroke table */
		register int i;
a86 14
		p = pptable;		/* pointer to stroke list */
		/* Store start addrs of each stroke list */
		for( i=040-5; i<128; i++)  {
			ppindex[i+128] = ppindex[i] = p;
			while( (*p++ & 0377) != LAST );
		}
		for( i=6; i<040; i++ )  {
			ppindex[i+128] = ppindex[i] = ppindex['?'];
		}
		for( i=1; i<6; i++ )  {
			ppindex[i+128] = ppindex[i] = ppindex[040-1+i];
		}
	}

d94 1
a94 1
		register char	*p;	/* pointer to stroke table */
d97 1
a97 1
		pl_move( fp, (int)(x+offset*xrot), (int)(y+offset*yrot) );
d123 1
a123 1
				pl_cont( fp, x3, y3 );
d125 1
a125 1
				pl_move( fp, x3, y3 );
d132 1
a132 1
static char	pptable[] = {
a1113 1

d1115 1
a1115 1
 *	CULC FORTRAN-IV PLUS Interface Entry
d1117 2
a1118 3

fsymbol( fp, string, x, y, scale, theta )
FILE	*fp;
d1120 2
a1121 1
int	*x, *y, *scale;
d1124 23
a1146 1
	tp_symbol( fp, string, *x, *y, *scale, *theta );
@


6.1
log
@Release 2.0
@
text
@@


5.1
log
@Release 1.24
@
text
@@


1.1
log
@Initial revision
@
text
@@
