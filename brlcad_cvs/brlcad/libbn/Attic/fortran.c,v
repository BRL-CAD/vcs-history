head	11.8;
access;
symbols
	ansi-20040405-merged:11.5.2.1
	postmerge-20040405-ansi:11.6
	premerge-20040404-ansi:11.5
	postmerge-autoconf:11.5
	autoconf-freeze:11.5
	premerge-autoconf:11.5
	ansi-20040316-freeze:11.5.2.1
	postmerge-20040315-windows:11.5
	premerge-20040315-windows:11.5
	windows-20040315-freeze:11.5
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.2
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.2
	offsite-5-3-pre:11.3
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1;
locks; strict;
comment	@ * @;


11.8
date	2004.05.21.18.06.22;	author morrison;	state dead;
branches;
next	11.7;

11.7
date	2004.05.10.15.30.43;	author erikg;	state Exp;
branches;
next	11.6;

11.6
date	2004.04.05.07.46.41;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.07.36;	author jra;	state Exp;
branches
	11.5.2.1;
next	11.4;

11.4
date	2002.08.15.20.54.48;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	2000.07.11.23.30.38;	author cjohnson;	state Exp;
branches;
next	11.2;

11.2
date	96.07.11.14.46.21;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.51.11;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.11.13.20.50;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.36.32;	author mike;	state Rel4_0;
branches;
next	9.5;

9.5
date	91.08.30.20.41.15;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	90.12.07.00.25.00;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	90.11.25.11.08.33;	author cjohnson;	state Exp;
branches;
next	9.2;

9.2
date	89.07.28.05.36.01;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.49.10;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.28.26;	author mike;	state Rel3_0;
branches;
next	1.2;

1.2
date	88.05.13.22.18.32;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	88.02.08.20.04.05;	author mike;	state Exp;
branches;
next	;

11.5.2.1
date	2002.09.19.18.01.08;	author morrison;	state Exp;
branches;
next	;


desc
@FORTRAN interfaces for plot3.c
@


11.8
log
@moved to src/
@
text
@/*
 *			F O R T R A N . C
 *
 *  A FORTRAN-callable interface to libplot3, which is
 *  a public-domain UNIX plot library, for 2-D and 3-D plotting in
 *  16-bit signed integer spaces, and in floating point.
 *
 *  Note that all routines which expect floating point parameters
 *  currently expect them to be of
 *  type "float" (single precision) so that all FORTRAN constants
 *  can be written normally, rather than having to insist on
 *  FORTRAN "double precision" parameters.
 *  This is at odds with the C routines and the meta-file format,
 *  which both operate in "C double" precision.
 *
 *  Note that on machines like the Cray,
 *	(C float == C double == FORTRAN REAL) != FORTRAN DOUBLE PRECISION
 *
 *  Also note that on the Cray, the only interface provision required
 *  is that the subroutine name be in all upper case.  Other systems
 *  may have different requirements, such as adding a leading underscore.
 *  It is not clear how to handle this in a general way.
 *
 *  Note that due to the 6-character name space required to be
 *  generally useful in the FORTRAN environment, the names have been
 *  shortened.  At the same time, a consistency of naming has been
 *  implemented;  the first character or two giving a clue as to
 *  the purpose of the subroutine:
 *
 *	I	General routines, and integer-parameter routines
 *	I2	Routines with enumerated 2-D integer parameters
 *	I3	Routines with enumerated 3-D integer parameters
 *	F2	Routines with enumerated 2-D float parameters
 *	F3	Routines with enumerated 3-D float parameters
 *	A3	Routines with arrays of 3-D float parameters
 *
 *  This name space leaves the door open for a double-precision
 *  family of routines, D, D2, and D3.
 *
 *
 *  Author -
 *	Mike Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libbn/fortran.c,v 11.7 2004/05/10 15:30:43 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#include "machine.h"
#include "externs.h"
#include "plot3.h"
/*
 *			P L _ S T R N C P Y
 *
 *  Make null-terminated copy of a string in output buffer,
 *  being careful not to exceed indicated buffer size
 *  Accept "$" as alternate string-terminator for FORTRAN Holerith constants,
 *  because getting FORTRAN to null-terminate strings is to painful
 *  (and non-portable) to contemplate.
 */
void
pl_strncpy(register char *out, register char *in, register int sz)
{
	register int c = '\0';

	while( --sz > 0 && (c = *in++) != '\0' && c != '$' )
		*out++ = c;
	*out++ = '\0';
}

/*
 *  Macro 'F' is used to take the 'C' function name,
 *  and convert it to the convention used for a particular system.
 *  Both lower-case and upper-case alternatives have to be provided
 *  because there is no way to get the C preprocessor to change the
 *  case of a token.
 */
#if CRAY
#	define	F(lc,uc)	uc
#endif
#if defined(apollo) || defined(mips) || defined(aux)
	/* Lower case, with a trailing underscore */
#ifdef __STDC__
#	define	F(lc,uc)	lc ## _
#else
#	define	F(lc,uc)	lc/**/_
#endif
#endif
#if !defined(F)
#	define	F(lc,uc)	lc
#endif

/*
 *  These interfaces provide necessary access to C library routines
 *  from the FORTRAN environment
 */

/*
 *			I F D O P E
 *
 *  Open a file descriptor for plotting.
 */
void
F(ifdopn,IFDOPN)( plotfp, fd )
FILE	**plotfp;
int	*fd;
{
	if( (*plotfp = fdopen(*fd, "w")) == NULL )
		perror("IFDOPN/fdopen");
}

/*
 *			I F O P E N
 *
 *  Open a file (by name) for plotting.
 */
void
F(ifopen,IFOPEN)( plotfp, name )
FILE	**plotfp;
char	*name;
{
	char	buf[128];

	pl_strncpy( buf, name, (int)sizeof(buf) );
	if( (*plotfp = fopen(buf, "w")) == NULL )
		perror(buf);
}

/*
 *  These interfaces provide the standard UNIX-Plot functionality
 */

void
F(i2pnt,I2PNT)( plotfp, x, y )
FILE	**plotfp;
int	*x, *y;
{
	pl_point( *plotfp, *x, *y );
}

void
F(i2line,I2LINE)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
int	*x1, *y1, *x2, *y2;
{
	pl_line( *plotfp, *x1, *y1, *x2, *y2 );
}

void
F(ilinmd,ILINMD)( plotfp, s )
FILE	**plotfp;
char *s;
{
	char buf[32];
	pl_strncpy( buf, s, (int)sizeof(buf) );
	pl_linmod( *plotfp, buf );
}

void
F(i2move,I2MOVE)( plotfp, x, y )
FILE	**plotfp;
int	*x, *y;
{
	pl_move( *plotfp, *x, *y );
}

void
F(i2cont,I2CONT)( plotfp, x, y )
FILE	**plotfp;
int	*x, *y;
{
	pl_cont( *plotfp, *x, *y );
}

void
F(i2labl,I2LABL)( plotfp, s )
FILE	**plotfp;
char *s;
{
	char	buf[256];
	pl_strncpy( buf, s, (int)sizeof(buf) );
	pl_label( *plotfp, buf );
}

void
F(i2spac,I2SPAC)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
int	*x1, *y1, *x2, *y2;
{
	pl_space( *plotfp, *x1, *y1, *x2, *y2 );
}

void
F(ierase,IERASE)( plotfp )
FILE	**plotfp;
{
	pl_erase( *plotfp );
}

void
F(i2circ,I2CIRC)( plotfp, x, y, r )
FILE	**plotfp;
int	*x, *y, *r;
{
	pl_circle( *plotfp, *x, *y, *r );
}

void
F(i2arc,I2ARC)( plotfp, xc, yc, x1, y1, x2, y2 )
FILE	**plotfp;
int	*xc, *yc, *x1, *y1, *x2, *y2;
{
	pl_arc( *plotfp, *xc, *yc, *x1, *y1, *x2, *y2 );
}

void
F(i2box,I2BOX)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
int	*x1, *y1, *x2, *y2;
{
	pl_box( *plotfp, *x1, *y1, *x2, *y2 );
}

/*
 * Here lie the BRL 3-D extensions.
 */

/* Warning: r, g, b are ints.  The output is chars. */
void
F(icolor,ICOLOR)( plotfp, r, g, b )
FILE	**plotfp;
int	*r, *g, *b;
{
	pl_color( *plotfp, *r, *g, *b );
}

void
F(iflush,IFLUSH)( plotfp )
FILE	**plotfp;
{
	pl_flush( *plotfp );
}

void
F(i3spac,I3SPAC)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
int	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pl_3space( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

void
F(i3pnt,I3PNT)( plotfp, x, y, z )
FILE	**plotfp;
int	*x, *y, *z;
{
	pl_3point( *plotfp, *x, *y, *z );

}

void
F(i3move,I3MOVE)( plotfp, x, y, z )
FILE	**plotfp;
int	*x, *y, *z;
{
	pl_3move( *plotfp, *x, *y, *z );
}

void
F(i3cont,I3CONT)( plotfp, x, y, z )
FILE	**plotfp;
int	*x, *y, *z;
{
	pl_3cont( *plotfp, *x, *y, *z );
}

void
F(i3line,I3LINE)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
int	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pl_3line( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

void
F(i3box,I3BOX)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
int	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pl_3box( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

/*
 *  Floating point routines.
 *
 *
 */

void
F(f2pnt,F2PNT)( plotfp, x, y )
FILE	**plotfp;
float	*x, *y;
{
	pd_point( *plotfp, *x, *y );
}

void
F(f2line,F2LINE)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
float	*x1, *y1, *x2, *y2;
{
	pd_line( *plotfp, *x1, *y1, *x2, *y2 );
}

void
F(f2move,F2MOVE)( plotfp, x, y )
FILE	**plotfp;
float	*x, *y;
{
	pd_move( *plotfp, *x, *y );
}

void
F(f2cont,F2CONT)( plotfp, x, y )
FILE	**plotfp;
float	*x, *y;
{
	pd_cont( *plotfp, *x, *y );
}

void
F(f2spac,F2SPAC)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
float	*x1, *y1, *x2, *y2;
{
	pd_space( *plotfp, *x1, *y1, *x2, *y2 );
}

void
F(f2circ,F2CIRC)( plotfp, x, y, r )
FILE	**plotfp;
float	*x, *y, *r;
{
	pd_circle( *plotfp, *x, *y, *r );
}

void
F(f2arc,F2ARC)( plotfp, xc, yc, x1, y1, x2, y2 )
FILE	**plotfp;
float	*xc, *yc, *x1, *y1, *x2, *y2;
{
	pd_arc( *plotfp, *xc, *yc, *x1, *y1, *x2, *y2 );
}

void
F(f2box,F2BOX)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
float	*x1, *y1, *x2, *y2;
{
	pd_box( *plotfp, *x1, *y1, *x2, *y2 );
}

/*
 *  Floating-point 3-D, both in array (vector) and enumerated versions.
 *  The same remarks about float/double apply as above.
 */

void
F(a2spac,A3SPAC)( plotfp, min, max )
FILE	**plotfp;
float	min[3];
float	max[3];
{
	pd_3space( *plotfp, min[0], min[1], min[2], max[0], max[1], max[2] );
}

void
F(f3spac,F3SPAC)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
float	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pd_3space( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

void
F(a3pnt,A3PNT)( plotfp, pt )
FILE	**plotfp;
float	pt[3];
{
	pd_3point( *plotfp, pt[0], pt[1], pt[2] );
}

void
F(f3pnt,F3PNT)( plotfp, x, y, z )
FILE	**plotfp;
float	*x, *y, *z;
{
	pd_3point( *plotfp, *x, *y, *z );
}

void
F(a3move,A3MOVE)( plotfp, pt )
FILE	**plotfp;
float	pt[3];
{
	pd_3move( *plotfp, pt[0], pt[1], pt[2] );
}

void
F(f3move,F3MOVE)( plotfp, x, y, z )
FILE	**plotfp;
float	*x, *y, *z;
{
	pd_3move( *plotfp, *x, *y, *z );
}

void
F(a3cont,A3CONT)( plotfp, pt )
FILE	**plotfp;
float	pt[3];
{
	pd_3cont( *plotfp, pt[0], pt[1], pt[2] );
}

void
F(f3cont,F3CONT)( plotfp, x, y, z )
FILE	**plotfp;
float	*x, *y, *z;
{
	pd_3cont( *plotfp, *x, *y, *z );
}

void
F(a3line,A3LINE)( plotfp, a, b )
FILE	**plotfp;
float	a[3], b[3];
{
	pd_3line( *plotfp, a[0], a[1], a[2], b[0], b[1], b[2] );
}

void
F(f3line,F3LINE)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
float	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pd_3line( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

void
F(a3box,A3BOX)( plotfp, a, b )
FILE	**plotfp;
float	a[3], b[3];
{
	pd_3box( *plotfp, a[0], a[1], a[2], b[0], b[1], b[2] );
}

void
F(f3box,F3BOX)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
float	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pd_3box( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}
@


11.7
log
@change conf.h to a wrapped config.h
@
text
@d53 1
a53 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libbn/fortran.c,v 11.6 2004/04/05 07:46:41 morrison Exp $ (BRL)";
@


11.6
log
@merge of ansi-6-0-branch into HEAD
@
text
@d53 1
a53 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d56 5
a60 1
#include "conf.h"
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d53 1
a53 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/fortran.c,v 11.3 2000/07/11 23:30:38 cjohnson Exp $ (BRL)";
d73 1
a73 4
pl_strncpy( out, in, sz )
register char *out;
register char *in;
register int sz;
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d53 1
a53 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/fortran.c,v 11.5 2002/08/20 17:07:36 jra Exp $ (BRL)";
d73 4
a76 1
pl_strncpy(register char *out, register char *in, register int sz)
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d73 4
a76 1
pl_strncpy(register char *out, register char *in, register int sz)
@


11.3
log
@LINT picking.  Missing includes and static const for RCSids
@
text
@d53 1
a53 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbn/fortran.c,v 11.2 1996/07/11 14:46:21 jra Exp $ (BRL)";
d73 1
a73 4
pl_strncpy( out, in, sz )
register char *out;
register char *in;
register int sz;
@


11.2
log
@Minor mods for IRIX 6.2
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/fortran.c,v 11.1 1995/01/04 09:51:11 mike Rel4_4 jra $ (BRL)";
d62 1
a62 1

@


11.1
log
@Release_4.4
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/fortran.c,v 10.2 94/08/11 13:20:50 gdurf Exp $ (BRL)";
d138 1
a138 1
	pl_strncpy( buf, name, sizeof(buf) );
d169 1
a169 1
	pl_strncpy( buf, s, sizeof(buf) );
d195 1
a195 1
	pl_strncpy( buf, s, sizeof(buf) );
@


10.2
log
@Added include of conf.h
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/fortran.c,v 10.1 1991/10/12 06:36:32 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/fortran.c,v 9.5 91/08/30 20:41:15 mike Exp $ (BRL)";
d55 2
@


9.5
log
@Added externs.h
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/fortran.c,v 9.4 90/12/07 00:25:00 mike Exp $ (BRL)";
@


9.4
log
@lint
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/fortran.c,v 9.3 90/11/25 11:08:33 cjohnson Exp $ (BRL)";
d59 1
@


9.3
log
@Add mips and aux to the list of machines that need underscores.
Add test for Standard C to concat underscore token.
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: /m/cad/libplot3/RCS/fortran.c,v 9.2 89/07/28 05:36:01 mike Exp $ (BRL)";
d75 1
a75 1
	register int c;
@


9.2
log
@More flexible FORTRAN interface
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: fortran.c,v 9.1 89/05/19 05:49:10 mike Rel3_5 $ (BRL)";
d92 1
a92 1
#if apollo
d94 3
d98 1
@


9.1
log
@Release_3.5
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: fortran.c,v 8.1 88/10/05 00:28:26 mike Rel3_0 $ (BRL)";
d83 18
d105 5
d111 1
a111 1
IFDOPN( plotfp, fd )
d119 5
d125 1
a125 1
IFOPEN( plotfp, name )
d141 1
a141 1
I2PNT( plotfp, x, y )
d149 1
a149 1
I2LINE( plotfp, x1, y1, x2, y2 )
d157 1
a157 1
ILINMD( plotfp, s )
d167 1
a167 1
I2MOVE( plotfp, x, y )
d175 1
a175 1
I2CONT( plotfp, x, y )
d183 1
a183 1
I2LABL( plotfp, s )
d193 1
a193 1
I2SPAC( plotfp, x1, y1, x2, y2 )
d201 1
a201 1
IERASE( plotfp )
d208 1
a208 1
I2CIRC( plotfp, x, y, r )
d216 1
a216 1
I2ARC( plotfp, xc, yc, x1, y1, x2, y2 )
d224 1
a224 1
I2BOX( plotfp, x1, y1, x2, y2 )
d237 1
a237 1
ICOLOR( plotfp, r, g, b )
d245 1
a245 1
IFLUSH( plotfp )
d252 1
a252 1
I3SPAC( plotfp, x1, y1, z1, x2, y2, z2 )
d260 1
a260 1
I3PNT( plotfp, x, y, z )
d269 1
a269 1
I3MOVE( plotfp, x, y, z )
d277 1
a277 1
I3CONT( plotfp, x, y, z )
d285 1
a285 1
I3LINE( plotfp, x1, y1, z1, x2, y2, z2 )
d293 1
a293 1
I3BOX( plotfp, x1, y1, z1, x2, y2, z2 )
d307 1
a307 1
F2PNT( plotfp, x, y )
d315 1
a315 1
F2LINE( plotfp, x1, y1, x2, y2 )
d323 1
a323 1
F2MOVE( plotfp, x, y )
d331 1
a331 1
F2CONT( plotfp, x, y )
d339 1
a339 1
F2SPAC( plotfp, x1, y1, x2, y2 )
d347 1
a347 1
F2CIRC( plotfp, x, y, r )
d355 1
a355 1
F2ARC( plotfp, xc, yc, x1, y1, x2, y2 )
d363 1
a363 1
F2BOX( plotfp, x1, y1, x2, y2 )
d376 1
a376 1
A3SPAC( plotfp, min, max )
d385 1
a385 1
F3SPAC( plotfp, x1, y1, z1, x2, y2, z2 )
d393 1
a393 1
A3PNT( plotfp, pt )
d401 1
a401 1
F3PNT( plotfp, x, y, z )
d409 1
a409 1
A3MOVE( plotfp, pt )
d417 1
a417 1
F3MOVE( plotfp, x, y, z )
d425 1
a425 1
A3CONT( plotfp, pt )
d433 1
a433 1
F3CONT( plotfp, x, y, z )
d441 1
a441 1
A3LINE( plotfp, a, b )
d449 1
a449 1
F3LINE( plotfp, x1, y1, z1, x2, y2, z2 )
d457 1
a457 1
A3BOX( plotfp, a, b )
d465 1
a465 1
F3BOX( plotfp, x1, y1, z1, x2, y2, z2 )
@


8.1
log
@Release_3.0
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: fortran.c,v 1.2 88/05/13 22:18:32 mike Exp $ (BRL)";
@


1.2
log
@lint fix
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: fortran.c,v 1.1 88/02/08 20:04:05 mike Locked $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d53 1
a53 1
static char RCSid[] = "@@(#)$Header: plot3.c,v 7.3 88/02/06 04:21:46 phil Locked $ (BRL)";
d61 22
d87 1
d96 1
a108 21
 *			P L _ S T R N C P Y
 *
 *  Make null-terminated copy of a string in output buffer,
 *  being careful not to exceed indicated buffer size
 *  Accept "$" as alternate string-terminator for FORTRAN Holerith constants,
 *  because getting FORTRAN to null-terminate strings is to painful
 *  (and non-portable) to contemplate.
 */
pl_strncpy( out, in, sz )
register char *out;
register char *in;
register int sz;
{
	register int c;

	while( --sz > 0 && (c = *in++) != '\0' && c != '$' )
		*out++ = c;
	*out++ = '\0';
}

/*
d112 1
d120 1
d128 1
d138 1
d146 1
d154 1
d164 1
d172 1
d179 1
d187 1
d195 1
d208 1
d216 1
d223 1
d231 1
d240 1
d248 1
d256 1
d264 1
d278 1
d286 1
d294 1
d302 1
d310 1
d318 1
d326 1
d334 1
d347 1
d356 1
d364 1
d372 1
d380 1
d388 1
d396 1
d404 1
d412 1
d420 1
d428 1
d436 1
@
