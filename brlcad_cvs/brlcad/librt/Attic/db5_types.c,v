head	1.10;
access;
symbols
	ansi-20040405-merged:1.7.4.1
	postmerge-20040405-ansi:1.8
	premerge-20040404-ansi:1.8
	postmerge-autoconf:1.8
	autoconf-freeze:1.7.12.2
	premerge-autoconf:1.8
	ansi-20040316-freeze:1.7
	postmerge-20040315-windows:1.8
	premerge-20040315-windows:1.8
	windows-20040315-freeze:1.7.6.1
	autoconf-20031203:1.7
	autoconf-20031202:1.7
	autoconf-branch:1.7.0.12
	phong-branch:1.7.0.10
	photonmap-branch:1.7.0.8
	rel-6-1-DP:1.7
	windows-branch:1.7.0.6
	rel-6-0-2:1.7
	ansi-branch:1.7.0.4
	rel-6-0-1-branch:1.7.0.2
	hartley-6-0-post:1.7
	hartley-6-0-pre:1.7
	rel-6-0-1:1.7
	rel-6-0:1.7
	offsite-5-3-pre:1.5;
locks; strict;
comment	@ * @;


1.10
date	2004.05.21.18.07.29;	author morrison;	state dead;
branches;
next	1.9;

1.9
date	2004.05.10.15.30.46;	author erikg;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.02.17.39.15;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.20.22.29.41;	author morrison;	state Exp;
branches
	1.7.4.1
	1.7.6.1
	1.7.12.1;
next	1.6;

1.6
date	2001.03.20.21.54.41;	author pjt;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.18.18.10.34;	author butler;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.21.02.02.29;	author butler;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.08.01.21.55;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.30.20.22.33;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.30.15.18.59;	author pjt;	state Exp;
branches;
next	;

1.7.4.1
date	2004.03.17.21.18.43;	author morrison;	state Exp;
branches;
next	;

1.7.6.1
date	2004.03.11.23.43.35;	author morrison;	state Exp;
branches;
next	;

1.7.12.1
date	2004.02.12.18.37.38;	author erikg;	state Exp;
branches;
next	1.7.12.2;

1.7.12.2
date	2004.03.15.14.07.17;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@moved to src/
@
text
@/*
 *			D B 5 _ T Y P E S . C
 *
 *  Purpose -
 *	Map between Major_Types/Minor_Types and ASCII strings
 *
 *  Author -
 *	Paul J. Tanenbaum
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 2000-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSell[] = "@@(#)$Header: /n/xoff/cvs/brlcad/librt/db5_types.c,v 1.9 2004/05/10 15:30:46 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#include <math.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "db5.h"
#include "nmg.h"
#include "raytrace.h"

struct db5_type {
    int		major_code;
    int		minor_code;
    int		heed_minor;
    char	*tag;
    char	*description;
};

/*
 *	In order to support looking up Major_Types
 *	as well as (Major_Type, Minor_Type) pairs,
 *	every Major_Type needs an entry with heed_minor==0
 *	and it must occur below any of its entries that
 *	have heed_minor==1.
 */
const static struct db5_type type_table[] = {
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_TOR, 1, "tor", "torus"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_TGC, 1, "tgc", "truncated general cone"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_ELL, 1, "ell", "ellipsoid"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_ARB8, 1, "arb8", "arb8"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_ARS, 1, "ars", "waterline"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_HALF, 1, "half", "halfspace"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_REC, 1, "rec", "right elliptical cylinder"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_BSPLINE, 1, "bspline", "B-spline"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_SPH, 1, "sph", "sphere"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_NMG, 1, "nmg", "nmg"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_EBM, 1, "ebm", "extruded bitmap"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_VOL, 1, "vol", "voxels"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_ARBN, 1, "arbn", "arbn"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_PIPE, 1, "pipe", "pipe"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_PARTICLE, 1, "particle", "particle"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_RPC, 1, "rpc", "right parabolic cylinder"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_RHC, 1, "rhc", "right hyperbolic cylinder"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_EPA, 1, "epa", "elliptical paraboloid"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_EHY, 1, "ehy", "elliptical hyperboloid"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_ETO, 1, "eto", "elliptical torus"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_GRIP, 1, "grip", "grip"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_JOINT, 1, "joint", "joint"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_DSP, 1, "dsp", "displacement map (height field)"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_SKETCH, 1, "sketch", "sketch"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_EXTRUDE, 1, "extrude", "extrusion"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_SUBMODEL, 1, "submodel", "submodel"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_CLINE, 1, "cline", "cline"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_BOT, 1, "bot", "bag of triangles"
    },
    {
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_COMBINATION, 1, "combination", "combination"
    },
    {
	DB5_MAJORTYPE_BRLCAD, 0, 0, "brlcad", "BRL-CAD geometry"
    },
    {
	DB5_MAJORTYPE_ATTRIBUTE_ONLY, 0, 0, "attribonly", "attribute only"
    },
    {
	DB5_MAJORTYPE_BINARY_EXPM, 0, 0, "binexpm", "experimental binary"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_FLOAT, 1, "float", "array of floats"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_FLOAT, 1, "f", "array of floats"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_DOUBLE, 1, "double", "array of doubles"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_DOUBLE, 1, "d", "array of doubles"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_8BITINT_U, 1, "u8", "array of unsigned 8-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_16BITINT_U, 1, "u16", "array of unsigned 16-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_32BITINT_U, 1, "u32", "array of unsigned 32-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_32BITINT_U, 1, "uint", "array of unsigned 32-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_32BITINT_U, 1, "ui", "array of unsigned 32-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_64BITINT_U, 1, "u64", "array of unsigned 64-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_8BITINT, 1, "8", "array of 8-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_16BITINT, 1, "16", "array of 16-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_32BITINT, 1, "32", "array of 32-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_32BITINT, 1, "int", "array of 32-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_32BITINT, 1, "i", "array of 32-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_64BITINT, 1, "64", "array of 64-bit ints"
    },
    {
	DB5_MAJORTYPE_BINARY_UNIF, 0, 0, "binunif", "uniform-array binary"
    },
    {
	DB5_MAJORTYPE_BINARY_MIME, 0, 0, "binmime", "MIME-typed binary"
    },
    /*
     *	Following entry must be at end of table
     */
    {
	DB5_MAJORTYPE_RESERVED, 0, 0, 0, 0
    },
};

int
db5_type_tag_from_major( char **tag, const int major ) {
    register struct db5_type	*tp;

    for (tp = (struct db5_type *) type_table;
	    tp -> major_code != DB5_MAJORTYPE_RESERVED;
	    ++tp) {
	if ((tp -> major_code == major) && !(tp -> heed_minor)) {
	    *tag = tp -> tag;
	    return 0;
	}
    }
    return 1;
}

int
db5_type_descrip_from_major( char **descrip, const int major ) {
    register struct db5_type	*tp;

    for (tp = (struct db5_type *) type_table;
	    tp -> major_code != DB5_MAJORTYPE_RESERVED;
	    ++tp) {
	if ((tp -> major_code == major) && !(tp -> heed_minor)) {
	    *descrip = tp -> description;
	    return 0;
	}
    }
    return 1;
}

int
db5_type_tag_from_codes( char **tag, const int major, const int minor ) {
    register struct db5_type	*tp;
    register int		found_minors = 0;

    for (tp = (struct db5_type *) type_table;
	    tp -> major_code != DB5_MAJORTYPE_RESERVED;
	    ++tp) {
	if (tp -> major_code == major) {
	    if (tp -> heed_minor)
		found_minors = 1;
	    if ((tp -> minor_code == minor) || !found_minors) {
		*tag = tp -> tag;
		return 0;
	    }
	}
    }
    return 1;
}

int
db5_type_descrip_from_codes( char **descrip, const int major,
			    const int minor ) {
    register struct db5_type	*tp;
    register int		found_minors = 0;

    for (tp = (struct db5_type *) type_table;
	    tp -> major_code != DB5_MAJORTYPE_RESERVED;
	    ++tp) {
	if (tp -> major_code == major) {
	    if (tp -> heed_minor)
		found_minors = 1;
	    if ((tp -> minor_code == minor) || !found_minors) {
		*descrip = tp -> description;
		return 0;
	    }
	}
    }
    return 1;
}

int
db5_type_codes_from_tag( int *major, int *minor, const char *tag ) {
    register struct db5_type	*tp;


    for (tp = (struct db5_type *) type_table;
	    tp -> major_code != DB5_MAJORTYPE_RESERVED;
	    ++tp) {
	if ((*(tp -> tag) == *tag) && (strcmp(tp -> tag, tag) == 0)) {
	    *major = tp -> major_code;
	    *minor = tp -> minor_code;
	    return 0;
	}
    }
    return 1;
}

int
db5_type_codes_from_descrip( int *major, int *minor, const char *descrip ) {
    register struct db5_type	*tp;


    for (tp = (struct db5_type *) type_table;
	    tp -> major_code != DB5_MAJORTYPE_RESERVED;
	    ++tp) {
	if ((*(tp -> description) == *descrip)
	 && (strcmp(tp -> description, descrip) == 0)) {
	    *major = tp -> major_code;
	    *minor = tp -> minor_code;
	    return 0;
	}
    }
    return 1;
}

size_t
db5_type_sizeof_h_binu( const int minor ) {
    switch ( minor ) {
	case DB5_MINORTYPE_BINU_FLOAT:
	    return sizeof(float);
	case DB5_MINORTYPE_BINU_DOUBLE:
	    return sizeof(double);
	case DB5_MINORTYPE_BINU_8BITINT:
	case DB5_MINORTYPE_BINU_8BITINT_U:
	    return (size_t) 1;
	case DB5_MINORTYPE_BINU_16BITINT:
	case DB5_MINORTYPE_BINU_16BITINT_U:
	    return (size_t) 2;
	case DB5_MINORTYPE_BINU_32BITINT:
	case DB5_MINORTYPE_BINU_32BITINT_U:
	    return (size_t) 4;
	case DB5_MINORTYPE_BINU_64BITINT:
	case DB5_MINORTYPE_BINU_64BITINT_U:
	    return (size_t) 8;
    }
    return 0;
}

size_t
db5_type_sizeof_n_binu( const int minor ) {
    switch ( minor ) {
	case DB5_MINORTYPE_BINU_FLOAT:
	    return (size_t) SIZEOF_NETWORK_FLOAT;
	case DB5_MINORTYPE_BINU_DOUBLE:
	    return (size_t) SIZEOF_NETWORK_DOUBLE;
	case DB5_MINORTYPE_BINU_8BITINT:
	case DB5_MINORTYPE_BINU_8BITINT_U:
	    return (size_t) 1;
	case DB5_MINORTYPE_BINU_16BITINT:
	case DB5_MINORTYPE_BINU_16BITINT_U:
	    return (size_t) 2;
	case DB5_MINORTYPE_BINU_32BITINT:
	case DB5_MINORTYPE_BINU_32BITINT_U:
	    return (size_t) 4;
	case DB5_MINORTYPE_BINU_64BITINT:
	case DB5_MINORTYPE_BINU_64BITINT_U:
	    return (size_t) 8;
    }
    return 0;
}
@


1.9
log
@change conf.h to a wrapped config.h
@
text
@d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /cvs/brlcad/librt/db5_types.c,v 1.8 2004/02/02 17:39:15 morrison Exp $ (BRL)";
@


1.8
log
@update copyright to include span through 2003
@
text
@d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/db5_types.c,v 1.7 2001/04/20 22:29:41 morrison Exp $ (BRL)";
d22 5
a26 1
#include "conf.h"
@


1.7
log
@CONST to const
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 2000 by the United States Army.
d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/db5_types.c,v 1.6 2001/03/20 21:54:41 pjt Exp $ (BRL)";
@


1.7.4.1
log
@sync branch with HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 2000-2004 by the United States Army.
d19 1
a19 1
static const char RCSell[] = "@@(#)$Header$ (BRL)";
@


1.7.6.1
log
@sync to HEAD...
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 2000-2004 by the United States Army.
d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/librt/db5_types.c,v 1.8 2004/02/02 17:39:15 morrison Exp $ (BRL)";
@


1.7.12.1
log
@merge from HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 2000-2004 by the United States Army.
d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/db5_types.c,v 1.8 2004/02/02 17:39:15 morrison Exp $ (BRL)";
@


1.7.12.2
log
@merge from head
@
text
@d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/db5_types.c,v 1.7.12.1 2004/02/12 18:37:38 erikg Exp $ (BRL)";
@


1.6
log
@COB 20 Mar 2001
@
text
@d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /d/CVS/brlcad/librt/db5_types.c,v 1.5 2000/10/18 18:10:34 butler Exp $ (BRL)";
d51 1
a51 1
CONST static struct db5_type type_table[] = {
d211 1
a211 1
db5_type_tag_from_major( char **tag, CONST int major ) {
d226 1
a226 1
db5_type_descrip_from_major( char **descrip, CONST int major ) {
d241 1
a241 1
db5_type_tag_from_codes( char **tag, CONST int major, CONST int minor ) {
d261 2
a262 2
db5_type_descrip_from_codes( char **descrip, CONST int major,
			    CONST int minor ) {
d282 1
a282 1
db5_type_codes_from_tag( int *major, int *minor, CONST char *tag ) {
d299 1
a299 1
db5_type_codes_from_descrip( int *major, int *minor, CONST char *descrip ) {
d317 1
a317 1
db5_type_sizeof_h_binu( CONST int minor ) {
d340 1
a340 1
db5_type_sizeof_n_binu( CONST int minor ) {
@


1.5
log
@Patches for compiling under RedHat 7.0
@
text
@d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/db5_types.c,v 1.4 2000/08/21 02:02:29 butler Exp $ (BRL)";
d37 5
a41 5
    unsigned char	major_code;
    unsigned char	minor_code;
    unsigned char	heed_minor;
    char		*tag;
    char		*description;
d149 1
a149 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_FLOAT, 1, "bin_float", "array of floats"
d152 1
a152 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_DOUBLE, 1, "bin_double", "array of doubles"
d155 1
a155 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_8BITINT_U, 1, "bin_8u", "array of unsigned 8-bit ints"
d158 1
a158 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_16BITINT_U, 1, "bin_16u", "array of unsigned 16-bit ints"
d161 1
a161 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_32BITINT_U, 1, "bin_32u", "array of unsigned 32-bit ints"
d164 1
a164 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_64BITINT_U, 1, "bin_64u", "array of unsigned 64-bit ints"
d167 1
a167 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_8BITINT, 1, "bin_8", "array of 8-bit ints"
d170 1
a170 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_16BITINT, 1, "bin_16", "array of 16-bit ints"
d173 1
a173 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_32BITINT, 1, "bin_32", "array of 32-bit ints"
d176 19
a194 1
	DB5_MAJORTYPE_BINARY_UNIF, DB5_MINORTYPE_BINU_64BITINT, 1, "bin_64", "array of 64-bit ints"
d211 1
a211 1
db5_type_tag_from_major( char **tag, CONST unsigned char major ) {
d226 1
a226 1
db5_type_descrip_from_major( char **descrip, CONST unsigned char major ) {
d241 1
a241 2
db5_type_tag_from_codes( char **tag, CONST unsigned char major,
			CONST unsigned char minor ) {
d261 2
a262 2
db5_type_descrip_from_codes( char **descrip, CONST unsigned char major,
			    CONST unsigned char minor ) {
d282 1
a282 2
db5_type_codes_from_tag( unsigned char *major, unsigned char *minor,
			CONST char *tag ) {
d299 1
a299 2
db5_type_codes_from_descrip( unsigned char *major, unsigned char *minor,
			    CONST char *descrip ) {
d317 1
a317 1
db5_type_sizeof_h_binu( CONST unsigned char minor ) {
d340 1
a340 1
db5_type_sizeof_n_binu( CONST unsigned char minor ) {
@


1.4
log
@Massive compilation warnings eliminated
@
text
@d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/db5_types.c,v 1.3 2000/07/08 01:21:55 mike Exp $ (BRL)";
d25 3
@


1.3
log
@
Removed lint
@
text
@d19 1
a19 1
static const char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/db5_types.c,v 1.2 2000/06/30 20:22:33 pjt Exp $ (BRL)";
d265 1
a265 1
    register int		found_minors = 0;
d283 1
a283 1
    register int		found_minors = 0;
@


1.2
log
@changes
@
text
@d9 1
d19 1
a19 1
static char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/db5_types.c,v 1.1 2000/06/30 15:18:59 pjt Exp $ (BRL)";
d318 1
d341 1
@


1.1
log
@Convert between object Major_Type/Minor_Type pairs and text strings
@
text
@d18 1
a18 1
static char RCSell[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_ell.c,v 11.20 2000/06/27 14:44:55 mike Exp $ (BRL)";
d100 1
a100 1
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_EPA, 1, "epa", "elliptic paraboloid"
d103 1
a103 1
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_EHY, 1, "ehy", "elliptic hyperboloid"
d106 1
a106 1
	DB5_MAJORTYPE_BRLCAD, DB5_MINORTYPE_BRLCAD_ETO, 1, "eto", "elliptic torus"
d145 30
a283 1
    bu_log("codes_from_descrip(%s)...\n", descrip);
a286 3
	bu_log("(%d, %d, %d, %s, %s)\n",
	    tp -> major_code, tp -> minor_code, tp -> heed_minor,
	    tp -> tag, tp -> description);
a288 1
	    bu_log("Found it!\n");
d295 44
@

