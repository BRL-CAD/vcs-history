head	11.16;
access;
symbols
	ansi-20040405-merged:11.11.2.2
	postmerge-20040405-ansi:11.14
	premerge-20040404-ansi:11.13
	postmerge-autoconf:11.13
	autoconf-freeze:11.11.10.3
	premerge-autoconf:11.13
	ansi-20040316-freeze:11.11.2.1
	postmerge-20040315-windows:11.13
	premerge-20040315-windows:11.13
	windows-20040315-freeze:11.11.4.1
	autoconf-20031203:11.11.10.1
	autoconf-20031202:11.11
	autoconf-branch:11.11.0.10
	phong-branch:11.11.0.8
	photonmap-branch:11.11.0.6
	rel-6-1-DP:11.11
	windows-branch:11.11.0.4
	rel-6-0-2:11.8
	ansi-branch:11.11.0.2
	rel-6-0-1-branch:11.8.0.2
	hartley-6-0-post:11.10
	hartley-6-0-pre:11.9
	rel-6-0-1:11.8
	rel-6-0:11.8
	rel-5-4:11.5
	offsite-5-3-pre:11.8
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.5
	rel-5-0-beta:11.4
	rel-4-5:11.3
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1;
locks; strict;
comment	@ * @;


11.16
date	2004.05.21.18.07.29;	author morrison;	state dead;
branches;
next	11.15;

11.15
date	2004.05.10.15.30.45;	author erikg;	state Exp;
branches;
next	11.14;

11.14
date	2004.04.05.08.48.56;	author morrison;	state Exp;
branches;
next	11.13;

11.13
date	2004.02.02.17.39.15;	author morrison;	state Exp;
branches;
next	11.12;

11.12
date	2003.11.20.07.19.49;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2002.08.20.17.07.56;	author jra;	state Exp;
branches
	11.11.2.1
	11.11.4.1
	11.11.10.1;
next	11.10;

11.10
date	2002.08.15.20.55.07;	author hartley;	state Exp;
branches;
next	11.9;

11.9
date	2002.08.11.02.03.23;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2000.09.01.02.53.04;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	2000.08.21.02.02.28;	author butler;	state Exp;
branches;
next	11.6;

11.6
date	2000.07.10.23.01.26;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	99.07.02.22.19.22;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	99.05.27.18.52.55;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	98.01.12.13.42.27;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.11.07.14.32.02;	author adam;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.56.09;	author mike;	state Rel4_4;
branches;
next	10.7;

10.7
date	94.08.10.15.21.59;	author gdurf;	state Exp;
branches;
next	10.6;

10.6
date	94.08.09.19.13.28;	author mike;	state Exp;
branches;
next	10.5;

10.5
date	94.08.03.22.26.51;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.05.05.22.08.55;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	93.06.30.15.51.56;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	93.04.07.03.21.38;	author phil;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.39.56;	author mike;	state Rel4_0;
branches;
next	9.2;

9.2
date	91.07.06.00.52.49;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.53.52;	author mike;	state Rel3_5;
branches;
next	8.6;

8.6
date	89.04.11.12.26.46;	author phil;	state Exp;
branches;
next	8.5;

8.5
date	89.01.11.07.48.47;	author mike;	state Exp;
branches;
next	8.4;

8.4
date	88.12.30.09.05.45;	author mike;	state Exp;
branches;
next	8.3;

8.3
date	88.12.30.07.37.05;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.30.06.26.34;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.32.37;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.08.20.07.15.18;	author phil;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.35.57;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.58.12;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.14.12;	author mike;	state Rel;
branches;
next	1.4;

1.4
date	87.03.19.05.01.42;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	87.03.19.03.06.16;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	87.03.19.01.23.27;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	87.03.17.20.19.57;	author mike;	state Exp;
branches;
next	;

11.11.2.1
date	2002.09.19.18.01.29;	author morrison;	state Exp;
branches;
next	11.11.2.2;

11.11.2.2
date	2004.03.17.21.18.41;	author morrison;	state Exp;
branches;
next	;

11.11.4.1
date	2004.03.11.23.43.34;	author morrison;	state Exp;
branches;
next	;

11.11.10.1
date	2003.12.03.16.24.06;	author erikg;	state Exp;
branches;
next	11.11.10.2;

11.11.10.2
date	2004.02.12.18.37.38;	author erikg;	state Exp;
branches;
next	11.11.10.3;

11.11.10.3
date	2004.03.15.14.07.16;	author erikg;	state Exp;
branches;
next	;


desc
@Table-driven command parser.
@


11.16
log
@moved to src/
@
text
@/*
 *			C M D . C
 *
 *  Read and parse a viewpoint-control command stream.
 *  This module is intended to be common to all programs which
 *  read this type of command stream;  the routines to handle
 *  the various keywords should go in application-specific modules.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1987-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCScmd[] = "@@(#)$Header: /n/xoff/cvs/brlcad/librt/cmd.c,v 11.15 2004/05/10 15:30:45 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <ctype.h>
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"

/*
 *			R T _ R E A D _ C M D
 *
 *  Read one semi-colon terminated string of arbitrary length from
 *  the given file into a dynamicly allocated buffer.
 *  Various commenting and escaping conventions are implemented here.
 *
 *  Returns:
 *	NULL	On EOF
 *	char *	On good read
 */
char *
rt_read_cmd(register FILE *fp)
{
	register int	c;
	register char	*buf;
	register int	curpos;
	register int	curlen;

	curpos = 0;
	curlen = 400;
	buf = bu_malloc( curlen, "rt_read_cmd command buffer" );

	do  {
		c = fgetc(fp);
		if( c == EOF )  {
			c = '\0';
		} else if( c == '#' )  {
			/* All comments run to the end of the line */
			while( (c = fgetc(fp)) != EOF && c != '\n' )  ;
			continue;
		} else if( c == '\n' )  {
			c = ' ';
		} else if( c == ';' )  {
			c = '\0';
		} else if( c == '\\' )  {
			/*  Backslash takes next character literally.
			 *  EOF detection here is not a problem, next
			 *  pass will detect it.
			 */
			c = fgetc(fp);
		} else if( !isascii(c) )  {
			c = '?';
		}
		if( c != '\0' && curpos == 0 && isspace(c) )  {
			/*  Dispose of leading white space.
			 *  Necessary to slurp up what newlines turn into.
			 */
			continue;
		}
		if( curpos >= curlen )  {
			curlen *= 2;
			buf = bu_realloc( buf, curlen, "rt_read_cmd command buffer" );
		}
		buf[curpos++] = c;
	} while( c != '\0' );
	if( curpos <= 1 )  {
		bu_free( buf, "rt_read_cmd command buffer (EOF)" );
		return( (char *)0 );		/* EOF */
	}
	return( buf );				/* OK */
}

#define MAXWORDS	4096	/* Max # of args per command */

/*
 *			R T _ S P L I T _ C M D
 *
 *  Build argv[] array from input buffer, by splitting whitespace
 *  separated "words" into null terminated strings.
 *  The input buffer is altered by this process.
 *
 *  Returns -
 *	 0	no words in input
 *	nwords	number of words of input, now in argv[]
 */
int
rt_split_cmd(char **argv, int lim, register char *lp)
{
	register int	nwords;			/* number of words seen */
	register char	*lp1;

	argv[0] = "_NIL_";		/* sanity */

	while( *lp != '\0' && isspace( *lp ) )
		lp++;

	if( *lp == '\0' )
		return(0);		/* No words */

#ifdef HAVE_SHELL_ESCAPE
	/* Handle "!" shell escape char so the shell can parse the line */
	if( *lp == '!' )  {
		int	ret;
		ret = system( lp+1 );
		if( ret != 0 )  {
			perror("system(3)");
			bu_log("rt_split_cmd() FAILED: !%s\n", lp);
		}
		return(0);		/* No words */
	}
#endif

	/* some non-space string has been seen, argv[0] is set */
	nwords = 1;
	argv[0] = lp;

	for( ; *lp != '\0'; lp++ )  {
		if( !isspace( *lp ) )
			continue;	/* skip over current word */

		*lp = '\0';		/* terminate current word */
		lp1 = lp + 1;
		if( *lp1 != '\0' && !isspace( *lp1 ) )  {
			/* Begin next word */
			if( nwords >= lim-1 )
				break;	/* argv[] full */

			argv[nwords++] = lp1;
		}
	}
	argv[nwords] = (char *)0;	/* safety */
	return( nwords );
}

/*
 *			R T _ D O _ C M D
 *
 *  Slice up input buffer into whitespace separated "words",
 *  look up the first word as a command, and if it has the
 *  correct number of args, call that function.
 *  The input buffer is altered in the process.
 *
 *  Expected to return -1 to halt command processing loop.
 *
 *  Based heavily on mged/cmd.c by Chuck Kennedy.
 */
int
rt_do_cmd(struct rt_i *rtip, register char *lp, register const struct command_tab *tp)
           		      			/* FUTURE:  for globbing */
             		    
                                 	    
{
	register int	nwords;			/* number of words seen */
	char		*cmd_args[MAXWORDS+1];	/* array of ptrs to args */

	nwords = rt_split_cmd( cmd_args, MAXWORDS, lp );
	if( nwords <= 0 )
		return(0);	/* No command to process */


	for( ; tp->ct_cmd != (char *)0; tp++ )  {
		if( cmd_args[0][0] != tp->ct_cmd[0] ||
				/* the length of "n" is not significant, just needs to be big enough */
		    strncmp( cmd_args[0], tp->ct_cmd, MAXWORDS ) != 0 )
			continue;
		if( (nwords >= tp->ct_min) &&
		    (nwords <= tp->ct_max) )  {
			return( tp->ct_func( nwords, cmd_args ) );
		}
		bu_log("rt_do_cmd Usage: %s %s\n\t%s\n",
			tp->ct_cmd, tp->ct_parms, tp->ct_comment );
		return(-1);		/* ERROR */
	}
	bu_log("rt_do_cmd(%s):  command not found\n", cmd_args[0]);
	return(-1);			/* ERROR */
}
@


11.15
log
@change conf.h to a wrapped config.h
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/librt/cmd.c,v 11.14 2004/04/05 08:48:56 morrison Exp $ (BRL)";
@


11.14
log
@merge of ansi-6-0-branch into HEAD
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header$ (BRL)";
d25 5
a29 1
#include "conf.h"
@


11.13
log
@update copyright to include span through 2003
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.12 2003/11/20 07:19:49 morrison Exp $ (BRL)";
d50 1
a50 1
rt_read_cmd( register FILE *fp )
d115 1
a115 4
rt_split_cmd( argv, lim, lp )
char		**argv;
int		lim;
register char	*lp;
d176 4
a179 4
rt_do_cmd( rtip, lp, tp )
struct rt_i		*rtip;			/* FUTURE:  for globbing */
register char		*lp;
register const struct command_tab	*tp;
@


11.12
log
@testing e-mail commits some more
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1987 by the United States Army.
d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.11 2002/08/20 17:07:56 jra Exp $ (BRL)";
@


11.11
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.9 2002/08/11 02:03:23 morrison Exp $ (BRL)";
d50 1
a50 2
rt_read_cmd( fp )
register FILE	*fp;
@


11.11.4.1
log
@sync to HEAD...
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1987-2004 by the United States Army.
d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/librt/cmd.c,v 11.13 2004/02/02 17:39:15 morrison Exp $ (BRL)";
d50 2
a51 1
rt_read_cmd( register FILE *fp )
@


11.11.10.1
log
@updates from HEAD, part 1
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.12 2003/11/20 07:19:49 morrison Exp $ (BRL)";
d50 2
a51 1
rt_read_cmd( register FILE *fp )
@


11.11.10.2
log
@merge from HEAD
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1987-2004 by the United States Army.
d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.13 2004/02/02 17:39:15 morrison Exp $ (BRL)";
@


11.11.10.3
log
@merge from head
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.11.10.2 2004/02/12 18:37:38 erikg Exp $ (BRL)";
@


11.11.2.1
log
@Initial ANSIfication
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.11 2002/08/20 17:07:56 jra Exp $ (BRL)";
d50 2
a51 1
rt_read_cmd(register FILE *fp)
d116 4
a119 1
rt_split_cmd(char **argv, int lim, register char *lp)
d180 4
a183 4
rt_do_cmd(struct rt_i *rtip, register char *lp, register const struct command_tab *tp)
           		      			/* FUTURE:  for globbing */
             		    
                                 	    
@


11.11.2.2
log
@sync branch with HEAD
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1987-2004 by the United States Army.
d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header$ (BRL)";
@


11.10
log
@Converted from K&R to ANSI C - RFH
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.8 2000/09/01 02:53:04 mike Exp $ (BRL)";
d50 2
a51 1
rt_read_cmd(register FILE *fp)
d116 4
a119 1
rt_split_cmd(char **argv, int lim, register char *lp)
d180 4
a183 4
rt_do_cmd(struct rt_i *rtip, register char *lp, register const struct command_tab *tp)
           		      			/* FUTURE:  for globbing */
             		    
                                 	    
d192 1
d195 2
a196 1
		    strcmp( cmd_args[0], tp->ct_cmd ) != 0 )
@


11.9
log
@converted strcmp to strncmp usage to protect potential overrun or bad pointer
@
text
@d50 1
a50 2
rt_read_cmd( fp )
register FILE	*fp;
d115 1
a115 4
rt_split_cmd( argv, lim, lp )
char		**argv;
int		lim;
register char	*lp;
d176 4
a179 4
rt_do_cmd( rtip, lp, tp )
struct rt_i		*rtip;			/* FUTURE:  for globbing */
register char		*lp;
register const struct command_tab	*tp;
a187 1

d190 1
a190 2
				/* the length of "n" is not significant, just needs to be big enough */
		    strncmp( cmd_args[0], tp->ct_cmd, MAXWORDS ) != 0 )
@


11.8
log
@
Added cmd.c externs
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.7 2000/08/21 02:02:28 butler Exp $ (BRL)";
d192 1
d195 2
a196 1
		    strcmp( cmd_args[0], tp->ct_cmd ) != 0 )
@


11.7
log
@Massive compilation warnings eliminated
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.6 2000/07/10 23:01:26 mike Exp $ (BRL)";
d183 1
a183 1
register struct command_tab	*tp;
a206 4




@


11.6
log
@
Added "const" to RCSid string, to silence warnings of unused variable
on GCC compilers
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.5 1999/07/02 22:19:22 mike Exp $ (BRL)";
a104 41
 *			R T _ D O _ C M D
 *
 *  Slice up input buffer into whitespace separated "words",
 *  look up the first word as a command, and if it has the
 *  correct number of args, call that function.
 *  The input buffer is altered in the process.
 *
 *  Expected to return -1 to halt command processing loop.
 *
 *  Based heavily on mged/cmd.c by Chuck Kennedy.
 */
int
rt_do_cmd( rtip, lp, tp )
struct rt_i		*rtip;			/* FUTURE:  for globbing */
register char		*lp;
register struct command_tab	*tp;
{
	register int	nwords;			/* number of words seen */
	char		*cmd_args[MAXWORDS+1];	/* array of ptrs to args */

	nwords = rt_split_cmd( cmd_args, MAXWORDS, lp );
	if( nwords <= 0 )
		return(0);	/* No command to process */

	for( ; tp->ct_cmd != (char *)0; tp++ )  {
		if( cmd_args[0][0] != tp->ct_cmd[0] ||
		    strcmp( cmd_args[0], tp->ct_cmd ) != 0 )
			continue;
		if( (nwords >= tp->ct_min) &&
		    (nwords <= tp->ct_max) )  {
			return( tp->ct_func( nwords, cmd_args ) );
		}
		bu_log("rt_do_cmd Usage: %s %s\n\t%s\n",
			tp->ct_cmd, tp->ct_parms, tp->ct_comment );
		return(-1);		/* ERROR */
	}
	bu_log("rt_do_cmd(%s):  command not found\n", cmd_args[0]);
	return(-1);			/* ERROR */
}

/*
d166 45
@


11.5
log
@
Removed dependence on compat4.h
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.4 1999/05/27 18:52:55 mike Exp $ (BRL)";
@


11.4
log
@
sed4
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /c/CVS/brlcad/librt/cmd.c,v 11.3 1998/01/12 13:42:27 mike Exp $ (BRL)";
d91 1
a91 1
			buf = rt_realloc( buf, curlen, "rt_read_cmd command buffer" );
@


11.3
log
@Prevented infinite loop
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 11.2 1995/11/07 14:32:02 adam Exp mike $ (BRL)";
d60 1
a60 1
	buf = rt_malloc( curlen, "rt_read_cmd command buffer" );
d96 1
a96 1
		rt_free( buf, "rt_read_cmd command buffer (EOF)" );
d137 1
a137 1
		rt_log("rt_do_cmd Usage: %s %s\n\t%s\n",
d141 1
a141 1
	rt_log("rt_do_cmd(%s):  command not found\n", cmd_args[0]);
d180 1
a180 1
			rt_log("rt_split_cmd() FAILED: !%s\n", lp);
@


11.2
log
@Matching malloc and free messages -- rt_read_cmd command buffer
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 11.1 1995/01/04 09:56:09 mike Rel4_4 adam $ (BRL)";
d83 1
a83 1
		if( curpos == 0 && isspace(c) )  {
@


11.1
log
@Release_4.4
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 10.7 94/08/10 15:21:59 gdurf Exp $ (BRL)";
d60 1
a60 1
	buf = rt_malloc( curlen, "rt_read_cmd buffer" );
d91 1
a91 1
			buf = rt_realloc( buf, curlen, "rt_read_cmd buffer" );
d96 1
a96 1
		rt_free( buf, "rt_read_cmd buffer (EOF)" );
@


10.7
log
@factored ifdefs
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 10.6 1994/08/09 19:13:28 mike Exp gdurf $ (BRL)";
@


10.6
log
@If system() ("!") fails, print an explanatory message.
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 10.5 94/08/03 22:26:51 mike Exp Locker: mike $ (BRL)";
d25 2
d29 3
a31 1
#ifdef BSD
a32 2
#else
#include <string.h>
d173 1
a173 1
#if defined(unix) || defined(__unix)
@


10.5
log
@Fixed small memory leak on EOF in rt_read_cmd()
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 10.4 94/05/05 22:08:55 mike Exp Locker: mike $ (BRL)";
d174 6
a179 1
		(void)system( lp+1 );
@


10.4
log
@Added sanity check.
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 10.3 93/06/30 15:51:56 mike Exp Locker: mike $ (BRL)";
d93 2
a94 1
	if( curpos <= 1 )
d96 1
@


10.3
log
@Removed stray printf.
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 10.2 93/04/07 03:21:38 phil Exp Locker: mike $ (BRL)";
d160 2
@


10.2
log
@Scripts make the old limit of 64 args silly.  Now 4096.
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 10.1 1991/10/12 06:39:56 mike Rel4_0 phil $ (BRL)";
d137 1
a137 1
	fprintf(stderr,"rt_do_cmd(%s):  command not found\n", cmd_args[0]);
@


10.1
log
@Release_4.0
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 9.2 91/07/06 00:52:49 mike Exp $ (BRL)";
d98 1
a98 1
#define MAXWORDS		64	/* Max # of args per command */
@


9.2
log
@More careful about defined() checking
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: /m/cad/librt/RCS/cmd.c,v 9.1 89/05/19 05:53:52 mike Rel3_5 $ (BRL)";
@


9.1
log
@Release_3.5
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: cmd.c,v 8.6 89/04/11 12:26:46 phil Exp $ (BRL)";
d167 1
a167 1
#ifdef unix
@


8.6
log
@include string[s].h
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: cmd.c,v 8.5 89/01/11 07:48:47 phil Locked $ (BRL)";
@


8.5
log
@Have leading white space deleted
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: cmd.c,v 8.4 88/12/30 09:05:45 mike Locked $ (BRL)";
d27 5
d35 1
@


8.4
log
@Split out rt_split_cmd()
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: cmd.c,v 8.3 88/12/30 07:37:05 mike Locked $ (BRL)";
d74 6
@


8.3
log
@Fixed "!" shell-escape handling
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: cmd.c,v 8.2 88/12/30 06:26:34 mike Locked $ (BRL)";
d101 1
a101 1
rt_do_cmd( rtip, lp, ctp )
d104 1
a104 1
register struct command_tab	*ctp;
a106 1
	register struct command_tab *tp;
d109 40
d153 1
a153 1
		return(0);		/* No command */
d159 1
a159 1
		return(0);		/* No command */
d163 1
a163 1
	/* some non-space string has been seen, cmd_args[0] is set */
d165 1
a165 1
	cmd_args[0] = lp;
a167 2
		register char	*lp1;

d175 2
a176 10
			if( nwords >= MAXWORDS-1 )  {
				rt_log(
					"rt_do_cmd: More than %d arguments, aborting\n",
					MAXWORDS);
				return(-1);	/* ERROR */
			}
			cmd_args[nwords++] = lp1;
		}
	}
	cmd_args[nwords] = (char *)0;	/* safety */
d178 1
a178 10
	if( nwords <= 0 )
		return(0);	/* No command to process */

	for( tp = ctp; tp->ct_cmd != (char *)0; tp++ )  {
		if( cmd_args[0][0] != tp->ct_cmd[0] ||
		    strcmp( cmd_args[0], tp->ct_cmd ) != 0 )
			continue;
		if( (nwords >= tp->ct_min) &&
		    (nwords <= tp->ct_max) )  {
			return( tp->ct_func( nwords, cmd_args ) );
a179 3
		rt_log("rt_do_cmd Usage: %s %s\n\t%s\n",
			tp->ct_cmd, tp->ct_parms, tp->ct_comment );
		return(-1);		/* ERROR */
d181 2
a182 2
	fprintf(stderr,"rt_do_cmd(%s):  command not found\n", cmd_args[0]);
	return(-1);			/* ERROR */
@


8.2
log
@Moved this module from rt/ to librt/, made more generic.
command_tab structure moved to raytrace.h
@
text
@d22 1
a22 1
static char RCScmd[] = "@@(#)$Header: cmd.c,v 8.1 88/10/05 00:32:37 mike Locked $ (BRL)";
d86 1
a86 1
#define MAXWORDS		32	/* Maximum number of args per command */
d110 2
a111 2
	nwords = 0;
	cmd_args[0] = lp;
d113 1
a113 1
	if( *lp == '\n' )
d116 1
d122 1
d124 3
a126 2
	if( *lp != '\0' && !isspace( *lp ) )
		nwords++;		/* some arg will be seen, [0] set */
d138 3
a140 3
			if( nwords >= MAXWORDS )  {
				(void)fprintf(stderr,
					"rt: More than %d arguments, excess flushed\n",
a141 1
				cmd_args[MAXWORDS] = (char *)0;
d160 2
a161 2
		(void)fprintf(stderr, "rt cmd Usage: %s %s\n",
			tp->ct_cmd, tp->ct_parms);
d164 1
a164 1
	fprintf(stderr,"do_cmd(%s):  unknown command\n", cmd_args[0]);
@


8.1
log
@Release_3.0
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header: cmd.c,v 7.2 88/08/20 07:15:18 phil Exp $ (BRL)";
d27 3
a29 1

d31 1
a31 1
 *			R E A D _ C M D
d33 7
a39 1
 *  Returns -1 on EOF, 0 on good read.
d41 2
a42 1
read_cmd( fp, buf, len )
a43 2
char	*buf;
int	len;
d46 3
a48 2
	register char	*pos;
	register char	*epos;
d50 3
a52 3
	pos = buf;
	epos = buf+len;
	*pos = '\0';
d54 6
a59 3
	while( (c = fgetc(fp)) != EOF )  {
		/* All comments run to the end of the line */
		if( c == '#' )  {
d62 12
d75 3
a77 7
		if( c == '\n' )  {
			*pos++ = ' ';
			if( pos >= epos )  {
				fprintf(stderr, "read_cmd:  buffer overrun\n");
				return(-1);	/* EOF */
			}
			continue;
d79 5
a83 19
		if( c == ';' )  {
			*pos++ = '\0';
			return(0);	/* OK */
		}
		if( !isascii(c) )  {
			fprintf(stderr, "read_cmd:  non-ASCII char read\n");
			return(-1);	/* EOF */
		}
		*pos++ = c;
		if( pos >= epos )  {
			fprintf(stderr, "read_cmd:  buffer overrun\n");
			return(-1);	/* EOF */
		}
	}
	if( pos > buf )  {
		*pos++ = '\0';
		return(0);		/* OK */
	}
	return(-1);			/* EOF */
a85 11
extern int	cm_start();
extern int	cm_vsize();
extern int	cm_eyept();
extern int	cm_vrot();
extern int	cm_end();
extern int	cm_multiview();
extern int	cm_anim();
extern int	cm_tree();
extern int	cm_clean();
extern int	cm_set();

a87 21
struct cmd_tab {
	char	*ct_cmd;
	char	*ct_parms;
	int	(*ct_func)();
	int	ct_min;		/* min number of words in cmd */
	int	ct_max;		/* max number of words in cmd */
};
static struct cmd_tab cmdtab[] = {
	"start",	"frame number",	cm_start,	2, 2,
	"viewsize",	"size in mm",	cm_vsize,	2, 2,
	"eye_pt",	"xyz of eye",	cm_eyept,	4, 4,
	"viewrot",	"4x4 matrix",	cm_vrot,	17,17,
	"end",		"",		cm_end,		1, 1,
	"multiview",	"",		cm_multiview,	1, 1,
	"anim",		"path type args", cm_anim,	4, MAXWORDS,
	"tree",		"treetop(s)",	cm_tree,	1, MAXWORDS,
	"clean",	"",		cm_clean,	1, 1,
	"set",		"",		cm_set,		1, MAXWORDS,
	(char *)0,	(char *)0,	0,		0, 0	/* END */
};

d89 1
a89 1
 *			D O _ C M D
d101 4
a104 2
do_cmd( lp )
register char *lp;
d107 1
a107 1
	register struct cmd_tab *tp;
d150 1
a150 1
	for( tp = cmdtab; tp->ct_cmd != (char *)0; tp++ )  {
@


7.2
log
@added "set" command
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header: cmd.c,v 7.1 87/11/02 23:35:57 phil Locked $ (BRL)";
@


7.1
log
@Release 2.3
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header: cmd.c,v 6.1 87/07/11 07:58:12 mike Rel $ (BRL)";
d90 1
d111 1
@


6.1
log
@Release 2.0
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header: cmd.c,v 5.1 87/06/24 22:14:12 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header: cmd.c,v 1.4 87/03/19 05:01:42 mike Exp $ (BRL)";
@


1.4
log
@Added "clean" command.
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header: cmd.c,v 1.3 87/03/19 03:06:16 mike Exp $ (BRL)";
@


1.3
log
@First version with working animation, driven from command file.
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header: cmd.c,v 1.1 87/03/17 20:19:57 mike Exp $ (BRL)";
d89 1
d109 1
@


1.2
log
@Rearranged command parsing to be better,
more preparations for animation.
@
text
@d107 1
a107 1
	"tree",		"treetop(s)",	cm_tree,	2, MAXWORDS,
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
static char RCScloud[] = "@@(#)$Header$ (BRL)";
d52 8
d87 2
d90 2
d94 1
d96 2
d100 9
a108 7
	"start",	cm_start,
	"viewsize",	cm_vsize,
	"eye_pt",	cm_eyept,
	"viewrot",	cm_vrot,
	"end",		cm_end,
	"multiview",	cm_multiview,
	(char *)0,	0		/* END */
d113 9
d124 2
a125 2
do_cmd( buf )
register char *buf;
d127 1
d129 1
a129 1
	register char *cmd;
d131 2
a132 3
	/* Strip leading spaces */
	while( *buf && isspace(*buf) )  buf++;
	cmd = buf;
d134 7
a140 6
	/* Find end of first keyword */
	while( *buf && !isspace(*buf) ) buf++;
	if( *buf != '\0' )  {
		*buf++ = '\0';
		/* Skip any leading spaces on arg string */
		while( *buf && isspace(*buf) )  buf++;
a141 2
	if( *cmd == '\0' )
		return(0);		/* null command, OK */
d143 28
d172 2
a173 2
		if( cmd[0] != tp->ct_cmd[0] ||
		    strcmp( cmd, tp->ct_cmd ) != 0 )
d175 7
a181 1
		return( tp->ct_func( cmd, buf ) );
d183 2
a184 1
	fprintf(stderr,"do_cmd(%s):  unknown command\n", cmd);
@
