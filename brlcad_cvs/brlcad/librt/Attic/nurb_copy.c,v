head	11.12;
access;
symbols
	ansi-20040405-merged:11.8.2.2
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.8.10.1
	premerge-autoconf:11.9
	ansi-20040316-freeze:11.8.2.1
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.8.4.1
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.5
	offsite-5-3-pre:11.5
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.5
	rel-5-0-beta:11.5
	rel-4-5:11.5
	ctj-4-5-post:11.4
	ctj-4-5-pre:11.4
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.12
date	2004.05.21.18.07.34;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2004.05.10.15.30.46;	author erikg;	state Exp;
branches;
next	11.10;

11.10
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2004.02.02.17.39.28;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.08.06;	author jra;	state Exp;
branches
	11.8.2.1
	11.8.4.1
	11.8.10.1;
next	11.7;

11.7
date	2002.08.15.20.55.19;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2001.04.20.22.29.54;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	97.09.18.20.32.45;	author jra;	state Exp;
branches;
next	11.4;

11.4
date	96.12.31.00.51.30;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.04.01.15.26.17;	author stay;	state Exp;
branches;
next	11.2;

11.2
date	95.12.01.02.49.33;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.53.44;	author mike;	state Rel4_4;
branches
	11.1.1.1;
next	10.6;

10.6
date	94.08.11.01.10.42;	author gdurf;	state Exp;
branches;
next	10.5;

10.5
date	92.06.02.22.51.06;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	92.05.29.01.20.00;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	92.05.29.00.52.20;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	92.05.28.22.12.05;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.39.06;	author mike;	state Rel4_0;
branches;
next	1.2;

1.2
date	91.06.14.09.42.10;	author stay;	state Exp;
branches;
next	1.1;

1.1
date	91.05.18.02.35.17;	author stay;	state Exp;
branches;
next	;

11.1.1.1
date	98.01.29.06.43.38;	author mike;	state Rel4_5;
branches;
next	;

11.8.2.1
date	2002.09.19.18.01.42;	author morrison;	state Exp;
branches;
next	11.8.2.2;

11.8.2.2
date	2004.03.17.21.18.55;	author morrison;	state Exp;
branches;
next	;

11.8.4.1
date	2004.03.11.23.43.44;	author morrison;	state Exp;
branches;
next	;

11.8.10.1
date	2004.02.12.18.37.46;	author erikg;	state Exp;
branches;
next	;


desc
@Surface copy
@


11.12
log
@moved to src/
@
text
@/*	N U R B _ C O P Y . C
 *
 *  Function -
 *	duplicate the nurb surface.
 *  Author -
 *	Paul Randal Stay
 * 
 *  Source -
 * 	SECAD/VLD Computing Consortium, Bldg 394
 *	The U.S. Army Ballistic Research Laboratory
 * 	Aberdeen Proving Ground, Maryland 21005
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1991-2004 by the United States Army.
 *	All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"
#include "nurb.h"

struct face_g_snurb *
rt_nurb_scopy(const struct face_g_snurb *srf, struct resource *res)
{
	register struct face_g_snurb * n;
	int i;

	NMG_CK_SNURB(srf);

	n = (struct face_g_snurb *) rt_nurb_new_snurb( srf->order[0], srf->order[1],
		srf->u.k_size, srf->v.k_size, 
		srf->s_size[0],srf->s_size[1],
		srf->pt_type, res);

	for( i = 0; i < srf->u.k_size; i++)
		n->u.knots[i] =  srf->u.knots[i];

	for( i = 0; i < srf->v.k_size; i++)
		n->v.knots[i] =  srf->v.knots[i];

	for ( i = 0; i <  srf->s_size[0] * srf->s_size[1] * 
		RT_NURB_EXTRACT_COORDS(srf->pt_type); i++)
	{

		n->ctl_points[i] = srf->ctl_points[i];
	}

	return (struct face_g_snurb *) n;
}

struct edge_g_cnurb *
rt_nurb_crv_copy(const struct edge_g_cnurb *crv)
{
	register struct edge_g_cnurb * n;
	int i;

	NMG_CK_CNURB( crv );

	n = (struct edge_g_cnurb *) rt_nurb_new_cnurb( crv->order, 
		crv->k.k_size, crv->c_size, crv->pt_type);

	for( i = 0; i < crv->k.k_size; i++)
		n->k.knots[i] = crv->k.knots[i];

	for( i = 0; i < crv->c_size * 
		RT_NURB_EXTRACT_COORDS(crv->pt_type); i++)
		n->ctl_points[i] = crv->ctl_points[i];

	return (struct edge_g_cnurb *) n;
}
@


11.11
log
@change conf.h to a wrapped config.h
@
text
@@


11.10
log
@merge of ansi-6-0-branch into HEAD
@
text
@d18 5
a22 1
#include "conf.h"
@


11.9
log
@update copyright to include span through 2003
@
text
@d28 1
a28 3
rt_nurb_scopy( srf, res )
const struct face_g_snurb * srf;
struct resource *res;
d57 1
a57 2
rt_nurb_crv_copy( crv )
const struct edge_g_cnurb * crv;
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d14 1
a14 1
 *	This software is Copyright (C) 1991 by the United States Army.
@


11.8.4.1
log
@sync to HEAD...
@
text
@d14 1
a14 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
@


11.8.10.1
log
@merge from HEAD
@
text
@d14 1
a14 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
@


11.8.2.1
log
@Initial ANSIfication
@
text
@d28 3
a30 1
rt_nurb_scopy(const struct face_g_snurb *srf, struct resource *res)
d59 2
a60 1
rt_nurb_crv_copy(const struct edge_g_cnurb *crv)
@


11.8.2.2
log
@sync branch with HEAD
@
text
@d14 1
a14 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d28 3
a30 1
rt_nurb_scopy(const struct face_g_snurb *srf, struct resource *res)
d59 2
a60 1
rt_nurb_crv_copy(const struct edge_g_cnurb *crv)
@


11.6
log
@CONST to const
@
text
@d28 1
a28 3
rt_nurb_scopy( srf, res )
const struct face_g_snurb * srf;
struct resource *res;
d57 1
a57 2
rt_nurb_crv_copy( crv )
const struct edge_g_cnurb * crv;
@


11.5
log
@Mods for use of pmalloc in TNURB raytracing.
@
text
@d29 1
a29 1
CONST struct face_g_snurb * srf;
d60 1
a60 1
CONST struct edge_g_cnurb * crv;
@


11.4
log
@Stay typo fix
@
text
@d28 1
a28 1
rt_nurb_scopy( srf )
d30 1
d40 1
a40 1
		srf->pt_type);
@


11.3
log
@added opy curve routine
@
text
@d73 1
a73 1
		RT_NRUB_EXTRACT_COORDS(crv->pt_type); i++)
@


11.2
log
@LIBNURB data structures have been fully merged withNMG data structures.
@
text
@d56 22
@


11.1
log
@Release_4.4
@
text
@d27 1
a27 1
struct snurb *
d29 1
a29 1
CONST struct snurb * srf;
d31 1
a31 1
	register struct snurb * n;
d36 2
a37 2
	n = (struct snurb *) rt_nurb_new_snurb( srf->order[0], srf->order[1],
		srf->u_knots.k_size, srf->v_knots.k_size, 
d41 2
a42 2
	for( i = 0; i < srf->u_knots.k_size; i++)
		n->u_knots.knots[i] =  srf->u_knots.knots[i];
d44 2
a45 2
	for( i = 0; i < srf->v_knots.k_size; i++)
		n->v_knots.knots[i] =  srf->v_knots.knots[i];
d54 1
a54 1
	return (struct snurb *) n;
@


11.1.1.1
log
@Release_4.5
@
text
@d27 3
a29 4
struct face_g_snurb *
rt_nurb_scopy( srf, res )
CONST struct face_g_snurb * srf;
struct resource *res;
d31 1
a31 1
	register struct face_g_snurb * n;
d36 2
a37 2
	n = (struct face_g_snurb *) rt_nurb_new_snurb( srf->order[0], srf->order[1],
		srf->u.k_size, srf->v.k_size, 
d39 1
a39 1
		srf->pt_type, res);
d41 2
a42 2
	for( i = 0; i < srf->u.k_size; i++)
		n->u.knots[i] =  srf->u.knots[i];
d44 2
a45 2
	for( i = 0; i < srf->v.k_size; i++)
		n->v.knots[i] =  srf->v.knots[i];
d54 1
a54 23
	return (struct face_g_snurb *) n;
}

struct edge_g_cnurb *
rt_nurb_crv_copy( crv )
CONST struct edge_g_cnurb * crv;
{
	register struct edge_g_cnurb * n;
	int i;

	NMG_CK_CNURB( crv );

	n = (struct edge_g_cnurb *) rt_nurb_new_cnurb( crv->order, 
		crv->k.k_size, crv->c_size, crv->pt_type);

	for( i = 0; i < crv->k.k_size; i++)
		n->k.knots[i] = crv->k.knots[i];

	for( i = 0; i < crv->c_size * 
		RT_NURB_EXTRACT_COORDS(crv->pt_type); i++)
		n->ctl_points[i] = crv->ctl_points[i];

	return (struct edge_g_cnurb *) n;
@


10.6
log
@Added include of conf.h
@
text
@@


10.5
log
@Changed lists to use rt_list structures
Made some args CONST where appropriate
Switched to GET_CNURB() macros
Added calls to NMG_CK_SNURB()
@
text
@d18 2
@


10.4
log
@Control polygon/mesh is now just part of the cnurb/snurb structures,
rather than being a separate structure of their own.
@
text
@d21 2
d27 1
a27 1
struct snurb * srf;
d31 2
@


10.3
log
@Modifications due to data structure revisions:  mesh and knots are no
longer pointers, but in-place structures.
@
text
@d32 2
a33 2
		srf->mesh.s_size[0],srf->mesh.s_size[1],
		srf->mesh.pt_type);
d41 2
a42 2
	for ( i = 0; i <  srf->mesh.s_size[0] * srf->mesh.s_size[1] * 
		RT_NURB_EXTRACT_COORDS(srf->mesh.pt_type); i++)
d45 1
a45 1
		n->mesh.ctl_points[i] = srf->mesh.ctl_points[i];
@


10.2
log
@Expanded names of manifest constants
@
text
@d31 3
a33 3
		srf->u_knots->k_size, srf->v_knots->k_size, 
		srf->mesh->s_size[0],srf->mesh->s_size[1],
		srf->mesh->pt_type);
d35 2
a36 2
	for( i = 0; i < srf->u_knots->k_size; i++)
		n->u_knots->knots[i] =  srf->u_knots->knots[i];
d38 2
a39 2
	for( i = 0; i < srf->v_knots->k_size; i++)
		n->v_knots->knots[i] =  srf->v_knots->knots[i];
d41 2
a42 2
	for ( i = 0; i <  srf->mesh->s_size[0] * srf->mesh->s_size[1] * 
		RT_NURB_EXTRACT_COORDS(srf->mesh->pt_type); i++)
d45 1
a45 1
		n->mesh->ctl_points[i] = srf->mesh->ctl_points[i];
@


10.1
log
@Release_4.0
@
text
@d42 1
a42 1
		EXTRACT_COORDS(srf->mesh->pt_type); i++)
@


1.2
log
@fixed nurb.h
@
text
@@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
#include "./nurb.h"
@
