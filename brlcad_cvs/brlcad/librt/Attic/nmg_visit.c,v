head	11.12;
access;
symbols
	ansi-20040405-merged:11.8.2.2
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.8.10.2
	premerge-autoconf:11.9
	ansi-20040316-freeze:11.8.2.1
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.8.4.1
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.4
	offsite-5-3-pre:11.5
	rel-5-3:11.4
	rel-5-2:11.4
	rel-5-1-branch:11.4.0.2
	rel-5-1:11.4
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.12
date	2004.05.21.18.07.34;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2004.05.10.15.30.46;	author erikg;	state Exp;
branches;
next	11.10;

11.10
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2004.02.02.17.39.28;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.08.06;	author jra;	state Exp;
branches
	11.8.2.1
	11.8.4.1
	11.8.10.1;
next	11.7;

11.7
date	2002.08.15.20.55.19;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2001.04.20.22.29.53;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2000.07.10.23.01.46;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.04.01.02.18.53;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	99.11.24.21.44.30;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.09.27.08.27.30;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.58.21;	author mike;	state Rel4_4;
branches;
next	1.9;

1.9
date	94.09.21.03.50.17;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	94.09.10.04.37.21;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	94.09.02.19.07.53;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	94.09.02.17.58.28;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	94.09.02.00.32.48;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	94.08.24.20.57.47;	author butler;	state Exp;
branches;
next	1.3;

1.3
date	94.08.09.19.38.33;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	93.07.20.21.23.02;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	93.01.23.02.30.21;	author mike;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.01.42;	author morrison;	state Exp;
branches;
next	11.8.2.2;

11.8.2.2
date	2004.03.17.21.18.55;	author morrison;	state Exp;
branches;
next	;

11.8.4.1
date	2004.03.11.23.43.43;	author morrison;	state Exp;
branches;
next	;

11.8.10.1
date	2004.02.12.18.37.46;	author erikg;	state Exp;
branches;
next	11.8.10.2;

11.8.10.2
date	2004.03.15.14.07.28;	author erikg;	state Exp;
branches;
next	;


desc
@Module to visit arbitrary chunks of the NMG hierarchy of data structures
@


11.12
log
@moved to src/
@
text
@/*
 *			N M G _ V I S I T . C
 *
 *  A generalized, object-oriented subroutine family to
 *  visit all the data structures "below" a given structure.
 *
 *  The caller provides a pointer to the structure to start at,
 *  a table of "handlers" for each kind of strucuture,
 *  and a generic pointer for private state which will be sent along
 *  to the user's handlers.
 *  For non-leaf structures, there are two handlers, one called
 *  before any recursion starts, and the other called when
 *  recursion is finished.  Either or both may be omitted.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1993-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/librt/nmg_visit.c,v 11.11 2004/05/10 15:30:46 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#include <stdio.h>
#include <math.h>
#include "externs.h"
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"

const struct nmg_visit_handlers	nmg_visit_handlers_null;

/*
 *			N M G _ V I S I T _ V E R T E X
 */
void
nmg_visit_vertex(struct vertex *v, const struct nmg_visit_handlers *htab, genptr_t *state)
             			   
                               	      
        			       		/* Handler's private state */
{
	NMG_CK_VERTEX(v);

	if(htab->vis_vertex) htab->vis_vertex( (long *)v, state, 0 );

	if(htab->vis_vertex_g && v->vg_p)
		htab->vis_vertex_g( (long *)v->vg_p, state, 0 );
}

/*
 *			N M G _ V I S I T _ V E R T E X U S E
 */
void
nmg_visit_vertexuse(struct vertexuse *vu, const struct nmg_visit_handlers *htab, genptr_t *state)
                		    
                               	      
        			       		/* Handler's private state */
{
	NMG_CK_VERTEXUSE(vu);

	if(htab->bef_vertexuse) htab->bef_vertexuse( (long *)vu, state, 0 );

	nmg_visit_vertex( vu->v_p, htab, state );

	if(htab->vis_vertexuse_a && vu->a.magic_p)
		htab->vis_vertexuse_a( vu->a.magic_p, state, 0 );

	if(htab->aft_vertexuse) htab->aft_vertexuse( (long *)vu, state, 1 );
}

/*
 *			N M G _ V I S I T _ E D G E
 */
void
nmg_visit_edge(struct edge *e, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
{
	NMG_CK_EDGE( e );

	if(htab->vis_edge) htab->vis_edge( (long *)e, state, 0 );
}

/*
 *			N M G _ V I S I T _ E D G E U S E
 */
void
nmg_visit_edgeuse(struct edgeuse *eu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
{
	NMG_CK_EDGEUSE(eu);

	if(htab->bef_edgeuse) htab->bef_edgeuse( (long *)eu, state, 0 );

	nmg_visit_vertexuse( eu->vu_p, htab, state );
	nmg_visit_edge( eu->e_p, htab, state );

	if(htab->vis_edge_g && eu->g.magic_p)
		htab->vis_edge_g( eu->g.magic_p, state, 0 );

	if(htab->aft_edgeuse) htab->aft_edgeuse( (long *)eu, state, 1 );
}

/*
 *			N M G _ V I S I T _ L O O P
 */
void
nmg_visit_loop(struct loop *l, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
{
	NMG_CK_LOOP(l);

	if(htab->vis_loop) htab->vis_loop( (long *)l, state, 0 );

	if(htab->vis_loop_g && l->lg_p)
		htab->vis_loop_g( (long *)l->lg_p, state, 0 );
}

/*
 *			N M G _ V I S I T _ L O O P U S E
 */
void
nmg_visit_loopuse(struct loopuse *lu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
{
	NMG_CK_LOOPUSE( lu );

	if(htab->bef_loopuse) htab->bef_loopuse( (long *)lu, state, 0 );

	if( BU_LIST_FIRST_MAGIC(&lu->down_hd) == NMG_VERTEXUSE_MAGIC )  {
		struct vertexuse	*vu;
		vu = BU_LIST_FIRST(vertexuse, &lu->down_hd);
		nmg_visit_vertexuse( vu, htab, state );
	} else {
		struct edgeuse		*eu;
		for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) )  {
			nmg_visit_edgeuse( eu, htab, state );
		}
	}
	nmg_visit_loop( lu->l_p, htab, state );

	if(htab->aft_loopuse) htab->aft_loopuse( (long *)lu, state, 1 );
}

/*
 *			N M G _ V I S I T _ F A C E
 */
void
nmg_visit_face(struct face *f, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
{

	if(htab->vis_face) htab->vis_face( (long *)f, state, 0 );

	if(htab->vis_face_g && f->g.plane_p)
		htab->vis_face_g( (long *)f->g.plane_p, state, 0 );
}

/*
 *			N M G _ V I S I T _ F A C E U S E
 */
void
nmg_visit_faceuse(struct faceuse *fu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
{
	struct loopuse	*lu;

	NMG_CK_FACEUSE(fu);

	if(htab->bef_faceuse) htab->bef_faceuse( (long *)fu, state, 0 );

	for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) )  {
		nmg_visit_loopuse( lu, htab, state );
	}

	nmg_visit_face( fu->f_p, htab, state );

	if(htab->aft_faceuse) htab->aft_faceuse( (long *)fu, state, 1 );
}

/*
 *			N M G _ V I S I T _ S H E L L
 */
void
nmg_visit_shell(struct shell *s, const struct nmg_visit_handlers *htab, genptr_t *state)
            			   
                               	      
        			       		/* Handler's private state */
{
	struct faceuse	*fu;
	struct loopuse	*lu;
	struct edgeuse	*eu;

	NMG_CK_SHELL(s);

	if(htab->bef_shell) htab->bef_shell( (long *)s, state, 0 );

	for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) )  {
		nmg_visit_faceuse( fu, htab, state );
	}
	for( BU_LIST_FOR( lu, loopuse, &s->lu_hd ) )  {
		nmg_visit_loopuse( lu, htab, state );
	}
	for( BU_LIST_FOR( eu, edgeuse, &s->eu_hd ) )  {
		nmg_visit_edgeuse( eu, htab, state );
	}
	if( s->vu_p )  nmg_visit_vertexuse( s->vu_p, htab, state );
	if(htab->vis_shell_a && s->sa_p)
		htab->vis_shell_a( (long *)s->sa_p, state, 0 );

	if(htab->aft_shell) htab->aft_shell( (long *)s, state, 1 );
}

/*
 *			N M G _ V I S I T _ R E G I O N
 */
void
nmg_visit_region(struct nmgregion *r, const struct nmg_visit_handlers *htab, genptr_t *state)
                		   
                               	      
        			       		/* Handler's private state */
{
	struct shell		*s;

	NMG_CK_REGION(r);

	if(htab->bef_region) htab->bef_region( (long *)r, state, 0 );

	for( BU_LIST_FOR( s, shell, &r->s_hd ) )  {
		nmg_visit_shell( s, htab, state );
	}
	if(htab->vis_region_a && r->ra_p)
		htab->vis_region_a( (long *)r->ra_p, state, 0 );

	if(htab->aft_region) htab->aft_region( (long *)r, state, 1 );
}
/*
 *			N M G _ V I S I T _ M O D E L
 */
void
nmg_visit_model(struct model *model, const struct nmg_visit_handlers *htab, genptr_t *state)
            			       
                               	      
        			       		/* Handler's private state */
{
	struct nmgregion *r;

	NMG_CK_MODEL(model);

	if(htab->bef_model) htab->bef_model( (long *)model, state, 0 );

	for( BU_LIST_FOR( r, nmgregion, &model->r_hd ) )  {
		nmg_visit_region( r, htab, state );
	}

	if(htab->aft_model) htab->aft_model( (long *)model, state, 1 );
}

/*
 *			N M G _ V I S I T
 */
void
nmg_visit(const long int *magicp, const struct nmg_visit_handlers *htab, genptr_t *state)
          			        
                               	      
        			       		/* Handler's private state */
{
	switch( *magicp )  {
	default:
		bu_log("nmg_visit() Can't visit %s directly\n", bu_identify_magic( *magicp ));
		rt_bomb("nmg_visit()\n");
		/* NOTREACHED */
	case NMG_MODEL_MAGIC:
		nmg_visit_model( (struct model *)magicp, htab, state );
		break;
	case NMG_REGION_MAGIC:
		nmg_visit_region( (struct nmgregion *)magicp, htab, state );
		break;
	case NMG_SHELL_MAGIC:
		nmg_visit_shell( (struct shell *)magicp, htab, state );
		break;
	case NMG_FACEUSE_MAGIC:
		nmg_visit_faceuse( (struct faceuse *)magicp, htab, state );
		break;
	case NMG_LOOPUSE_MAGIC:
		nmg_visit_loopuse( (struct loopuse *)magicp, htab, state );
		break;
	case NMG_EDGEUSE_MAGIC:
		nmg_visit_edgeuse( (struct edgeuse *)magicp, htab, state );
		break;
	case NMG_VERTEXUSE_MAGIC:
		nmg_visit_vertexuse( (struct vertexuse *)magicp, htab, state );
		break;
	}
}
@


11.11
log
@change conf.h to a wrapped config.h
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/nmg_visit.c,v 11.10 2004/04/05 08:48:58 morrison Exp $ (BRL)";
@


11.10
log
@merge of ansi-6-0-branch into HEAD
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d30 5
a34 1
#include "conf.h"
@


11.9
log
@update copyright to include span through 2003
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.8 2002/08/20 17:08:06 jra Exp $ (BRL)";
d45 4
a48 4
nmg_visit_vertex( v, htab, state )
struct vertex			*v;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d62 4
a65 4
nmg_visit_vertexuse( vu, htab, state )
struct vertexuse		*vu;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d83 4
a86 4
nmg_visit_edge( e, htab, state )
struct edge			*e;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d97 4
a100 4
nmg_visit_edgeuse( eu, htab, state )
struct edgeuse			*eu;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d119 4
a122 4
nmg_visit_loop( l, htab, state )
struct loop			*l;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d136 4
a139 4
nmg_visit_loopuse( lu, htab, state )
struct loopuse			*lu;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d164 4
a167 4
nmg_visit_face( f, htab, state )
struct face			*f;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d180 4
a183 4
nmg_visit_faceuse( fu, htab, state )
struct faceuse			*fu;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d204 4
a207 4
nmg_visit_shell( s, htab, state )
struct shell			*s;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d237 4
a240 4
nmg_visit_region( r, htab, state )
struct nmgregion		*r;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d260 4
a263 4
nmg_visit_model( model, htab, state )
struct model			*model;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d282 4
a285 4
nmg_visit( magicp, htab, state )
const long			*magicp;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d23 1
a23 1
 *	This software is Copyright (C) 1993 by the United States Army.
d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.6 2001/04/20 22:29:53 morrison Exp $ (BRL)";
@


11.8.4.1
log
@sync to HEAD...
@
text
@d23 1
a23 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/librt/nmg_visit.c,v 11.9 2004/02/02 17:39:28 morrison Exp $ (BRL)";
@


11.8.10.1
log
@merge from HEAD
@
text
@d23 1
a23 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.9 2004/02/02 17:39:28 morrison Exp $ (BRL)";
@


11.8.10.2
log
@merge from head
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.8.10.1 2004/02/12 18:37:46 erikg Exp $ (BRL)";
@


11.8.2.1
log
@Initial ANSIfication
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.8 2002/08/20 17:08:06 jra Exp $ (BRL)";
d45 4
a48 4
nmg_visit_vertex(struct vertex *v, const struct nmg_visit_handlers *htab, genptr_t *state)
             			   
                               	      
        			       		/* Handler's private state */
d62 4
a65 4
nmg_visit_vertexuse(struct vertexuse *vu, const struct nmg_visit_handlers *htab, genptr_t *state)
                		    
                               	      
        			       		/* Handler's private state */
d83 4
a86 4
nmg_visit_edge(struct edge *e, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
d97 4
a100 4
nmg_visit_edgeuse(struct edgeuse *eu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
d119 4
a122 4
nmg_visit_loop(struct loop *l, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
d136 4
a139 4
nmg_visit_loopuse(struct loopuse *lu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
d164 4
a167 4
nmg_visit_face(struct face *f, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
d180 4
a183 4
nmg_visit_faceuse(struct faceuse *fu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
d204 4
a207 4
nmg_visit_shell(struct shell *s, const struct nmg_visit_handlers *htab, genptr_t *state)
            			   
                               	      
        			       		/* Handler's private state */
d237 4
a240 4
nmg_visit_region(struct nmgregion *r, const struct nmg_visit_handlers *htab, genptr_t *state)
                		   
                               	      
        			       		/* Handler's private state */
d260 4
a263 4
nmg_visit_model(struct model *model, const struct nmg_visit_handlers *htab, genptr_t *state)
            			       
                               	      
        			       		/* Handler's private state */
d282 4
a285 4
nmg_visit(const long int *magicp, const struct nmg_visit_handlers *htab, genptr_t *state)
          			        
                               	      
        			       		/* Handler's private state */
@


11.8.2.2
log
@sync branch with HEAD
@
text
@d23 1
a23 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
d27 1
a27 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d45 4
a48 4
nmg_visit_vertex(struct vertex *v, const struct nmg_visit_handlers *htab, genptr_t *state)
             			   
                               	      
        			       		/* Handler's private state */
d62 4
a65 4
nmg_visit_vertexuse(struct vertexuse *vu, const struct nmg_visit_handlers *htab, genptr_t *state)
                		    
                               	      
        			       		/* Handler's private state */
d83 4
a86 4
nmg_visit_edge(struct edge *e, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
d97 4
a100 4
nmg_visit_edgeuse(struct edgeuse *eu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
d119 4
a122 4
nmg_visit_loop(struct loop *l, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
d136 4
a139 4
nmg_visit_loopuse(struct loopuse *lu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
d164 4
a167 4
nmg_visit_face(struct face *f, const struct nmg_visit_handlers *htab, genptr_t *state)
           			   
                               	      
        			       		/* Handler's private state */
d180 4
a183 4
nmg_visit_faceuse(struct faceuse *fu, const struct nmg_visit_handlers *htab, genptr_t *state)
              			    
                               	      
        			       		/* Handler's private state */
d204 4
a207 4
nmg_visit_shell(struct shell *s, const struct nmg_visit_handlers *htab, genptr_t *state)
            			   
                               	      
        			       		/* Handler's private state */
d237 4
a240 4
nmg_visit_region(struct nmgregion *r, const struct nmg_visit_handlers *htab, genptr_t *state)
                		   
                               	      
        			       		/* Handler's private state */
d260 4
a263 4
nmg_visit_model(struct model *model, const struct nmg_visit_handlers *htab, genptr_t *state)
            			       
                               	      
        			       		/* Handler's private state */
d282 4
a285 4
nmg_visit(const long int *magicp, const struct nmg_visit_handlers *htab, genptr_t *state)
          			        
                               	      
        			       		/* Handler's private state */
@


11.6
log
@CONST to const
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.5 2000/07/10 23:01:46 mike Exp $ (BRL)";
d45 4
a48 4
nmg_visit_vertex( v, htab, state )
struct vertex			*v;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d62 4
a65 4
nmg_visit_vertexuse( vu, htab, state )
struct vertexuse		*vu;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d83 4
a86 4
nmg_visit_edge( e, htab, state )
struct edge			*e;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d97 4
a100 4
nmg_visit_edgeuse( eu, htab, state )
struct edgeuse			*eu;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d119 4
a122 4
nmg_visit_loop( l, htab, state )
struct loop			*l;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d136 4
a139 4
nmg_visit_loopuse( lu, htab, state )
struct loopuse			*lu;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d164 4
a167 4
nmg_visit_face( f, htab, state )
struct face			*f;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d180 4
a183 4
nmg_visit_faceuse( fu, htab, state )
struct faceuse			*fu;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d204 4
a207 4
nmg_visit_shell( s, htab, state )
struct shell			*s;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d237 4
a240 4
nmg_visit_region( r, htab, state )
struct nmgregion		*r;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d260 4
a263 4
nmg_visit_model( model, htab, state )
struct model			*model;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
d282 4
a285 4
nmg_visit( magicp, htab, state )
const long			*magicp;
const struct nmg_visit_handlers	*htab;
genptr_t			*state;		/* Handler's private state */
@


11.5
log
@
Added "const" to RCSid string, to silence warnings of unused variable
on GCC compilers
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.4 2000/04/01 02:18:53 mike Exp $ (BRL)";
d39 1
a39 1
CONST struct nmg_visit_handlers	nmg_visit_handlers_null;
d47 1
a47 1
CONST struct nmg_visit_handlers	*htab;
d64 1
a64 1
CONST struct nmg_visit_handlers	*htab;
d85 1
a85 1
CONST struct nmg_visit_handlers	*htab;
d99 1
a99 1
CONST struct nmg_visit_handlers	*htab;
d121 1
a121 1
CONST struct nmg_visit_handlers	*htab;
d138 1
a138 1
CONST struct nmg_visit_handlers	*htab;
d166 1
a166 1
CONST struct nmg_visit_handlers	*htab;
d182 1
a182 1
CONST struct nmg_visit_handlers	*htab;
d206 1
a206 1
CONST struct nmg_visit_handlers	*htab;
d239 1
a239 1
CONST struct nmg_visit_handlers	*htab;
d262 1
a262 1
CONST struct nmg_visit_handlers	*htab;
d283 2
a284 2
CONST long			*magicp;
CONST struct nmg_visit_handlers	*htab;
@


11.4
log
@
CONSTing in nmg_visit*
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.3 1999/11/24 21:44:30 mike Exp $ (BRL)";
@


11.3
log
@
Removed includes of compat header files rtstring.h and rtlist.h
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/librt/nmg_visit.c,v 11.2 1996/09/27 08:27:30 mike Exp $ (BRL)";
d47 1
a47 1
struct nmg_visit_handlers	*htab;
d64 1
a64 1
struct nmg_visit_handlers	*htab;
d85 1
a85 1
struct nmg_visit_handlers	*htab;
d99 1
a99 1
struct nmg_visit_handlers	*htab;
d121 1
a121 1
struct nmg_visit_handlers	*htab;
d138 1
a138 1
struct nmg_visit_handlers	*htab;
d166 1
a166 1
struct nmg_visit_handlers	*htab;
d182 1
a182 1
struct nmg_visit_handlers	*htab;
d206 1
a206 1
struct nmg_visit_handlers	*htab;
d239 1
a239 1
struct nmg_visit_handlers	*htab;
d262 1
a262 1
struct nmg_visit_handlers	*htab;
d283 2
a284 2
long				*magicp;
struct nmg_visit_handlers	*htab;
@


11.2
log
@Converted to using proper routine names for LIBBU and LIBBN routines.
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 11.1 1995/01/04 09:58:21 mike Rel4_4 mike $ (BRL)";
a35 1
#include "rtlist.h"
@


11.1
log
@Release_4.4
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.9 94/09/21 03:50:17 mike Exp $ (BRL)";
d146 1
a146 1
	if( RT_LIST_FIRST_MAGIC(&lu->down_hd) == NMG_VERTEXUSE_MAGIC )  {
d148 1
a148 1
		vu = RT_LIST_FIRST(vertexuse, &lu->down_hd);
d152 1
a152 1
		for( RT_LIST_FOR( eu, edgeuse, &lu->down_hd ) )  {
d192 1
a192 1
	for( RT_LIST_FOR( lu, loopuse, &fu->lu_hd ) )  {
d218 1
a218 1
	for( RT_LIST_FOR( fu, faceuse, &s->fu_hd ) )  {
d221 1
a221 1
	for( RT_LIST_FOR( lu, loopuse, &s->lu_hd ) )  {
d224 1
a224 1
	for( RT_LIST_FOR( eu, edgeuse, &s->eu_hd ) )  {
d249 1
a249 1
	for( RT_LIST_FOR( s, shell, &r->s_hd ) )  {
d272 1
a272 1
	for( RT_LIST_FOR( r, nmgregion, &model->r_hd ) )  {
d290 1
a290 1
		rt_log("nmg_visit() Can't visit %s directly\n", rt_identify_magic( *magicp ));
@


1.9
log
@Eliminated model_a structure
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.8 94/09/10 04:37:21 mike Exp Locker: mike $ (BRL)";
@


1.8
log
@Converted NMG data structures to have edge_g pointer in edgeuse, not edge.
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.7 94/09/02 19:07:53 mike Exp $ (BRL)";
a274 2
	if(htab->vis_model_a && model->ma_p)
		htab->vis_model_a( (long *)model->ma_p, state, 0 );
@


1.7
log
@vertexuse_a is now vertexuse_a_plane and vertexuse_a_cnurb
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.6 94/09/02 17:58:28 mike Exp Locker: mike $ (BRL)";
a91 3

	if(htab->vis_edge_g && e->eg_p)
		htab->vis_edge_g( (long *)e->eg_p, state, 0 );
d109 3
@


1.6
log
@faceuse_a, loopuse_a, and edgeuse_a have been eliminated.
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.5 94/09/02 00:32:48 mike Exp Locker: mike $ (BRL)";
d74 2
a75 2
	if(htab->vis_vertexuse_a && vu->vua_p)
		htab->vis_vertexuse_a( (long *)vu->vua_p, state, 0 );
@


1.5
log
@Changed to new face geometry pointers (g.plane_p)
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.4 94/08/24 20:57:47 butler Exp Locker: mike $ (BRL)";
a112 3
	if(htab->vis_edgeuse_a && eu->eua_p)
		htab->vis_edgeuse_a( (long *)eu->eua_p, state, 0 );

a156 2
	if(htab->vis_loopuse_a && lu->lua_p)
		htab->vis_loopuse_a( (long *)lu->lua_p, state, 0 );
a196 2
	if(htab->vis_faceuse_a && fu->fua_p)
		htab->vis_faceuse_a( (long *)fu->fua_p, state, 0 );
@


1.4
log
@Moved declaration of nmg_visit_handlers_null to nmg_visit.c from nmg_info.c
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.3 94/08/09 19:38:33 mike Exp Locker: butler $ (BRL)";
d178 2
a179 2
	if(htab->vis_face_g && f->fg_p)
		htab->vis_face_g( (long *)f->fg_p, state, 0 );
@


1.3
log
@Added GDurf's new "conf.h"
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.2 93/07/20 21:23:02 mike Exp Locker: mike $ (BRL)";
d39 2
@


1.2
log
@nmgregion, stupid.
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/nmg_visit.c,v 1.1 93/01/23 02:30:21 mike Exp Locker: mike $ (BRL)";
d30 1
@


1.1
log
@Initial revision
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d303 1
a303 1
		nmg_visit_region( (struct region *)magicp, htab, state );
@
