head	11.6;
access;
symbols
	ansi-20040405-merged:11.4.2.1
	postmerge-20040405-ansi:11.5
	premerge-20040404-ansi:11.4
	postmerge-autoconf:11.4
	autoconf-freeze:11.4
	premerge-autoconf:11.4
	ansi-20040316-freeze:11.4.2.1
	postmerge-20040315-windows:11.4
	premerge-20040315-windows:11.4
	windows-20040315-freeze:11.4
	autoconf-20031203:11.4
	autoconf-20031202:11.4
	autoconf-branch:11.4.0.10
	phong-branch:11.4.0.8
	photonmap-branch:11.4.0.6
	rel-6-1-DP:11.4
	windows-branch:11.4.0.4
	rel-6-0-2:11.2
	ansi-branch:11.4.0.2
	rel-6-0-1-branch:11.2.0.2
	hartley-6-0-post:11.3
	hartley-6-0-pre:11.2
	rel-6-0-1:11.2
	rel-6-0:11.2
	rel-5-4:11.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1
	rt-2:2.1;
locks; strict;
comment	@ * @;


11.6
date	2004.05.21.18.07.35;	author morrison;	state dead;
branches;
next	11.5;

11.5
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	11.4;

11.4
date	2002.08.20.17.08.10;	author jra;	state Exp;
branches
	11.4.2.1;
next	11.3;

11.3
date	2002.08.15.20.55.22;	author hartley;	state Exp;
branches;
next	11.2;

11.2
date	2000.07.10.23.01.50;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.58.48;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.41.07;	author mike;	state Rel4_0;
branches;
next	9.1;

9.1
date	89.05.19.05.57.29;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.31.59;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.09.09.21.19.46;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.34.50;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.57.05;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.13.05;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.12.22.12.23;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.46.31;	author mike;	state Rel1;
branches;
next	3.2;

3.2
date	86.07.23.23.06.41;	author mike;	state Exp;
branches;
next	3.1;

3.1
date	86.07.11.01.33.21;	author mike;	state Exp;
branches;
next	3.0;

3.0
date	86.06.10.01.34.25;	author mike;	state Exp;
branches;
next	2.3;

2.3
date	85.09.12.02.08.06;	author mike;	state Exp;
branches;
next	2.2;

2.2
date	85.09.11.19.56.56;	author mike;	state Exp;
branches;
next	2.1;

2.1
date	85.08.31.06.07.42;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	85.06.05.00.26.31;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	85.06.05.00.08.18;	author mike;	state Exp;
branches;
next	;

11.4.2.1
date	2002.09.19.18.01.47;	author morrison;	state Exp;
branches;
next	;


desc
@Time and statistics gathering routine for the HEP.
@


11.6
log
@moved to src/
@
text
@/*
 *			T I M E R H E P . C
 *
 * Function -
 *	To provide timing information for RT.
 *	THIS VERSION FOR Denelcor HEP/UPX (System III-like)
 */
#ifndef lint
static const char RCShep[] = "@@(#)$Header: /n/xoff/cvs/brlcad/librt/timerhep.c,v 11.5 2004/04/05 08:48:58 morrison Exp $ (BRL)";
#endif

#include <stdio.h>

/* Standard System V stuff */
extern long time(time_t *);
static long time0;


/*
 *			P R E P _ T I M E R
 */
void
rt_prep_timer(void)
{
	(void)time(&time0);
	(void)intime_();
}


/*
 *			R E A D _ T I M E R
 * 
 */
double
rt_read_timer(char *str, int len)
{
	long now;
	double usert;
	long htime[6];
	char line[132];

	(void)stats_(htime);
	(void)time(&now);
	usert = ((double)htime[0]) / 10000000.0;
	if( usert < 0.00001 )  usert = 0.00001;
	sprintf(line,"%f secs: %ld wave, %ld fp, %ld dmem, %ld other",
		usert,
		htime[0], htime[1], htime[2], htime[3], htime[4] );
	(void)strncpy( str, line, len );
	return( usert );
}
@


11.5
log
@merge of ansi-6-0-branch into HEAD
@
text
@d9 1
a9 1
static const char RCShep[] = "@@(#)$Header$ (BRL)";
@


11.4
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d9 1
a9 1
static const char RCShep[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerhep.c,v 11.2 2000/07/10 23:01:50 mike Exp $ (BRL)";
d15 1
a15 1
extern long time();
d23 1
a23 1
rt_prep_timer()
d35 1
a35 2
rt_read_timer(str,len)
char *str;
@


11.4.2.1
log
@Initial ANSIfication
@
text
@d9 1
a9 1
static const char RCShep[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerhep.c,v 11.4 2002/08/20 17:08:10 jra Exp $ (BRL)";
d15 1
a15 1
extern long time(time_t *);
d23 1
a23 1
rt_prep_timer(void)
d35 2
a36 1
rt_read_timer(char *str, int len)
@


11.3
log
@Converted from K&R to ANSI C - RFH
@
text
@d15 1
a15 1
extern long time(time_t *);
d23 1
a23 1
rt_prep_timer(void)
d35 2
a36 1
rt_read_timer(char *str, int len)
@


11.2
log
@
Added "const" to RCSid string, to silence warnings of unused variable
on GCC compilers
@
text
@d9 1
a9 1
static const char RCShep[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerhep.c,v 11.1 1995/01/04 09:58:48 mike Rel4_4 $ (BRL)";
d15 1
a15 1
extern long time();
d23 1
a23 1
rt_prep_timer()
d35 1
a35 2
rt_read_timer(str,len)
char *str;
@


11.1
log
@Release_4.4
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: /m/cad/librt/RCS/timerhep.c,v 10.1 91/10/12 06:41:07 mike Rel4_0 $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 9.1 89/05/19 05:57:29 mike Rel3_5 $ (BRL)";
@


9.1
log
@Release_3.5
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 8.1 88/10/05 00:31:59 mike Rel3_0 $ (BRL)";
@


8.1
log
@Release_3.0
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 7.2 88/09/09 21:19:46 mike Exp $ (BRL)";
@


7.2
log
@Eliminated bzero() and bcopy() definitions
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 7.1 87/11/02 23:34:50 mike Locked $ (BRL)";
@


7.1
log
@Release 2.3
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 6.1 87/07/11 07:57:05 mike Rel $ (BRL)";
a51 18
}

/* Memory clearing routine */
bzero( str, n )
register char *str;
register int n;
{
	while( n-- > 0 )
		*str++ = 0;
}

bcopy(from, to, count)		/* not efficient */
register char *from;
register char *to;
register int count;
{
	while( count-- > 0 )
		*to++ = *from++;
@


6.1
log
@Release 2.0
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 5.1 87/06/24 22:13:05 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 4.2 87/02/12 22:12:23 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 4.1 86/12/29 03:46:31 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 3.2 86/07/23 23:06:41 mike Exp $ (BRL)";
@


3.2
log
@resource locks moved to raytrace.h
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 3.1 86/07/11 01:33:21 mike Exp $ (BRL)";
@


3.1
log
@Cleanups inspired by the crummy compiler on the Cray XMP
@
text
@d9 1
a9 1
static char RCShep[] = "@@(#)$Header: timerhep.c,v 3.0 86/06/10 01:34:25 mike Exp $ (BRL)";
a12 6

/* Resource locks */
int	rt_g.res_pt;
int	rt_g.res_seg;
int	rt_g.res_malloc;
int	rt_g.res_printf;
@


3.0
log
@rt/ and librt/ separated,
global datastructures simplified.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: timerhep.c,v 2.3 85/09/12 02:08:06 mike Exp $ (BRL)";
@


2.3
log
@Removed accidental newline.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: timerhep.c,v 2.2 85/09/11 19:56:56 mike Exp $ (BRL)";
d15 4
a18 4
int	res_pt;
int	res_seg;
int	res_malloc;
int	res_printf;
d29 1
a29 1
prep_timer()
d41 1
a41 1
read_timer(str,len)
@


2.2
log
@Changed pr_timer to read_timer, which formats into a user supplied buffer,
so that user handles I/O of string as desired.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: timerhep.c,v 2.1 85/08/31 06:07:42 mike Exp $ (BRL)";
d53 1
a53 1
	sprintf(line,"%f secs: %ld wave, %ld fp, %ld dmem, %ld other\n",
@


2.1
log
@Version 2 of RT
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: timerhep.c,v 1.2 85/06/05 00:26:31 mike Exp $ (BRL)";
a19 9
/* Memory clearing routine */
bzero( str, n )
register char *str;
register int n;
{
	while( n-- > 0 )
		*str++ = 0;
}

d37 1
a37 1
 *			P R _ T I M E R
d41 1
a41 1
pr_timer(str)
d47 1
d52 3
a54 2
	fprintf(stderr,"%s: %f secs, ", str, usert);
	fprintf(stderr,"%ld waves, %ld fp, %ld dm, %ld other\n",
d56 1
d58 9
@


1.2
log
@timer_print, timer_prep changed to prep_timer, pr_timer
to accomodate compilers that only look at the first 8 chars.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: timerhep.c,v 1.1 85/06/05 00:08:18 mike Exp $ (BRL)";
d55 1
a55 1
	long hep[6];
d57 1
a57 1
	(void)stats_(hep);
d59 4
a62 4
	usert = ((double)hep[0]) / 10000000.0;
	fprintf(stderr,"%s: %f secs\n", str, usert);
	fprintf(stderr,"HEP %ld clocks, %ld waves, %ld fp, %ld dm, %ld other\n",
		hep[0], hep[1], hep[2], hep[3], hep[4] );
d64 9
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d35 1
a35 1
 *			T I M E R _ P R E P
d38 1
a38 1
time_start()
d46 1
a46 1
 *			T I M E R _ P R I N T
d50 1
a50 1
timer_print(str)
@
