head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.2
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.1
	premerge-autoconf:11.8
	ansi-20040316-freeze:11.7.2.1
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.4
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.5
	offsite-5-3-pre:11.5
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.5
	rel-5-0-beta:11.4
	rel-4-5:11.4
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.18.07.34;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.46;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.03.05.22.30.08;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.09;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.55.20;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	99.06.03.01.39.15;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	97.09.18.20.32.45;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	96.12.31.01.09.27;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.12.01.02.49.33;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.53.55;	author mike;	state Rel4_4;
branches
	11.1.1.1;
next	10.8;

10.8
date	94.11.04.05.37.08;	author mike;	state Exp;
branches;
next	10.7;

10.7
date	94.08.11.01.19.38;	author gdurf;	state Exp;
branches;
next	10.6;

10.6
date	92.06.02.22.52.09;	author mike;	state Exp;
branches;
next	10.5;

10.5
date	92.05.29.08.09.25;	author stay;	state Exp;
branches;
next	10.4;

10.4
date	92.05.29.01.20.12;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	92.05.29.00.52.31;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	92.05.28.22.12.17;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.39.14;	author mike;	state Rel4_0;
branches;
next	1.3;

1.3
date	91.07.02.02.58.21;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	91.06.14.09.42.25;	author stay;	state Exp;
branches;
next	1.1;

1.1
date	91.05.18.02.36.08;	author stay;	state Exp;
branches;
next	;

11.1.1.1
date	98.01.29.06.43.38;	author mike;	state Rel4_5;
branches;
next	;

11.7.2.1
date	2002.09.19.18.01.46;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.18.56;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.43.44;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.03.10.14.00.51;	author erikg;	state Exp;
branches;
next	;


desc
@X Splitter
@


11.11
log
@moved to src/
@
text
@/*
 *			N U R B _ S P L I T . C
 *
 * Function -
 * 	Subdivide a nurb surface by inserting a multiple knot of
 * 	of the surface order in a given direction and return the 
 *	resulting surfaces.
 *
 * Author-
 *	Paul Randal Stay
 *
 * Source
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The US Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland 21005
 *
 *
 * Copyright Notice -
 * 	This software if Copyright (C) 1990-2004 by the United States Army.
 *	All Rights Reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"
#include "nurb.h"

/* Algorithm
 *
 * 	Given a parametric direction (u or v) look at the direction 
 * knot vector and insert a multiple knot of parametric direction surface
 * order. This is somewhat different than rt_nurb_split in that the surface is 
 * give a parametric value at which to split the surface. 
 * rt_nurb_kvmult does the right thing in inserting a multiple knot with the 
 * correct amount. Separate the surface and return the two resulting surface.
 */

struct face_g_snurb *
rt_nurb_s_xsplit(struct face_g_snurb *srf, fastf_t param, int dir)
{
	struct knot_vector new_kv;
	struct oslo_mat * oslo;
	int i;
	int k_index;
	struct face_g_snurb * srf1, * srf2;

	NMG_CK_SNURB(srf);

	if ( dir == RT_NURB_SPLIT_ROW )
	{
		rt_nurb_kvmult(&new_kv, &srf->u, srf->order[0], param, (struct resource *)NULL);

		k_index = srf->order[0];

		oslo = ( struct oslo_mat *) 
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_ROW], &srf->u, &new_kv, (struct resource *)NULL);

		GET_SNURB(srf1);
		srf1->order[0]  = srf->order[0];
		srf1->order[1]  = srf->order[1];
		srf1->dir = RT_NURB_SPLIT_ROW;
		rt_nurb_kvextract(&srf1->u, &new_kv, 0, k_index + srf1->order[0], (struct resource *)NULL);
		rt_nurb_kvcopy(&srf1->v, &srf->v, (struct resource *)NULL);
		
		srf1->pt_type = srf->pt_type;
		srf1->s_size[0] = srf1->v.k_size - 
			srf1->order[1];
		srf1->s_size[1] = srf1->u.k_size - 
			srf1->order[0];

		srf1->ctl_points = (fastf_t *)
			bu_malloc( sizeof(fastf_t) * srf1->s_size[0] *
				srf1->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->pt_type),
				"rt_nurb_s_xsplit: srf1 row mesh control points");

		GET_SNURB(srf2);
		srf2->order[0]  = srf->order[0];
		srf2->order[1]  = srf->order[1];
		srf2->dir = RT_NURB_SPLIT_ROW;
		rt_nurb_kvextract(&srf2->u, &new_kv, k_index, new_kv.k_size, (struct resource *)NULL);
		rt_nurb_kvcopy(&srf2->v, &srf->v, (struct resource *)NULL);
		
		srf2->pt_type = srf->pt_type;
		srf2->s_size[0] = srf2->v.k_size - 
			srf2->order[1];
		srf2->s_size[1] = srf2->u.k_size - 
			srf2->order[0];

		srf2->ctl_points = (fastf_t *)
			bu_malloc( sizeof(fastf_t) * srf2->s_size[0] *
				srf2->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->pt_type),
				"rt_nurb_s_xsplit: srf2 row mesh control points");

		for( i = 0; i < srf->s_size[0]; i++)
		{
			fastf_t * old_mesh_ptr;
			fastf_t * new_mesh_ptr;

			old_mesh_ptr = &srf->ctl_points[
				i * srf->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf->pt_type)];
			new_mesh_ptr = &srf1->ctl_points[
				i * srf1->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->pt_type)];
			rt_nurb_map_oslo( oslo, old_mesh_ptr, new_mesh_ptr,
				RT_NURB_EXTRACT_COORDS( srf->pt_type ),
				RT_NURB_EXTRACT_COORDS( srf1->pt_type ),
				0, k_index, srf1->pt_type);
			new_mesh_ptr = &srf2->ctl_points[
				i * srf2->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->pt_type)];
			rt_nurb_map_oslo( oslo, old_mesh_ptr, new_mesh_ptr,
				RT_NURB_EXTRACT_COORDS( srf->pt_type ),
				RT_NURB_EXTRACT_COORDS( srf2->pt_type ),
				k_index, new_kv.k_size - srf2->order[0], 
				srf2->pt_type);
		}
	}
	else 
	{
		rt_nurb_kvmult(&new_kv, &srf->v, srf->order[RT_NURB_SPLIT_COL], param, (struct resource *)NULL);

		k_index = srf->order[1];

		oslo = ( struct oslo_mat *) 
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_COL], &srf->v, &new_kv, (struct resource *)NULL);

		GET_SNURB(srf1);
		srf1->order[0]  = srf->order[0];
		srf1->order[1]  = srf->order[1];
		srf1->dir = RT_NURB_SPLIT_COL;
		rt_nurb_kvextract(&srf1->v, &new_kv, 0, k_index + srf1->order[RT_NURB_SPLIT_COL], (struct resource *)NULL);
		rt_nurb_kvcopy(&srf1->u, &srf->u, (struct resource *)NULL);
		
		srf1->pt_type = srf->pt_type;
		srf1->s_size[0] = srf1->v.k_size - 
			srf1->order[1];
		srf1->s_size[1] = srf1->u.k_size - 
			srf1->order[0];

		srf1->ctl_points = (fastf_t *)
			bu_malloc( sizeof(fastf_t) * srf1->s_size[0] *
				srf1->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->pt_type),
				"rt_nurb_split: srf1 row mesh control points");

		GET_SNURB(srf2);
		srf2->order[0]  = srf->order[0];
		srf2->order[1]  = srf->order[1];
		srf2->dir = RT_NURB_SPLIT_COL;
		rt_nurb_kvextract(&srf2->v, &new_kv, k_index, new_kv.k_size, (struct resource *)NULL);
		rt_nurb_kvcopy(&srf2->u, &srf->u, (struct resource *)NULL);
		
		srf2->pt_type = srf->pt_type;
		srf2->s_size[0] = srf2->v.k_size - 
			srf2->order[1];
		srf2->s_size[1] = srf2->u.k_size - 
			srf2->order[0];

		srf2->ctl_points = (fastf_t *)
			bu_malloc( sizeof(fastf_t) * srf2->s_size[0] *
				srf2->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->pt_type),
				"rt_nurb_s_xsplit: srf2 row mesh control points");

		for( i = 0; i < srf->s_size[1]; i++)
		{
			fastf_t * old_mesh_ptr;
			fastf_t * new_mesh_ptr;

			old_mesh_ptr = &srf->ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf->pt_type)];
			new_mesh_ptr = &srf1->ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf1->pt_type)];
			rt_nurb_map_oslo( oslo, old_mesh_ptr, new_mesh_ptr,
				srf->s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf->pt_type ),
				srf1->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->pt_type ),
				0, k_index, srf1->pt_type);
			new_mesh_ptr = &srf2->ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf2->pt_type)];
			rt_nurb_map_oslo( oslo, old_mesh_ptr, new_mesh_ptr,
				srf->s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf->pt_type ),
				srf2->s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf2->pt_type ),
				k_index, new_kv.k_size - srf2->order[1], 
				srf2->pt_type);
		}
	}
	
	BU_LIST_APPEND( &srf1->l, &srf2->l );

	bu_free( (char *) new_kv.knots, "rt_nurb_s_xsplit: new_kv.knots");

	rt_nurb_free_oslo(oslo, (struct resource *)NULL);

	return srf1;
}

/* rt_nurb_c_xsplit()
 * Split a NURB curve by inserting a multiple knot and return
 * the result of the two curves.
 *
 * Algorithm
 *
 * Insert a multiple knot of the curve order. A parameter is give for the
 * knot value for which the curve will be split.
 */

struct edge_g_cnurb *
rt_nurb_c_xsplit(struct edge_g_cnurb *crv, fastf_t param)
{
	struct knot_vector new_kv;
	struct oslo_mat * oslo;
	int k_index;
	struct edge_g_cnurb * crv1, * crv2;
	int coords;

	NMG_CK_CNURB(crv);

	coords = RT_NURB_EXTRACT_COORDS( crv->pt_type ),

	k_index = crv->order;
	rt_nurb_kvmult(&new_kv, &crv->k, crv->order, param, (struct resource *)NULL);

	oslo = ( struct oslo_mat *) 
		rt_nurb_calc_oslo( crv->order, &crv->k, &new_kv, (struct resource *)NULL);

	GET_CNURB(crv1);
	crv1->order  = crv->order;
	rt_nurb_kvextract(&crv1->k, &new_kv, 0, k_index + crv->order, (struct resource *)NULL);
	crv1->pt_type = crv->pt_type;
	crv1->c_size = crv1->k.k_size - crv1->order;
	crv1->ctl_points = (fastf_t *)
		bu_malloc( sizeof(fastf_t) * crv1->c_size *
			RT_NURB_EXTRACT_COORDS( crv1->pt_type),
			"rt_nurb_c_xsplit: crv1 control points");

	GET_CNURB(crv2);
	crv2->order  = crv->order;
	rt_nurb_kvextract(&crv2->k, &new_kv, k_index, new_kv.k_size, (struct resource *)NULL);
	crv2->pt_type = crv->pt_type;
	crv2->c_size = crv2->k.k_size - crv2->order;
	crv2->ctl_points = (fastf_t *)
		bu_malloc( sizeof(fastf_t) * crv2->c_size *
			RT_NURB_EXTRACT_COORDS( crv2->pt_type),
			"rt_nurb_c_xsplit: crv2 row mesh control points");

	rt_nurb_map_oslo( oslo, crv->ctl_points, crv1->ctl_points,
		coords, coords, 0, k_index, crv->pt_type );

	rt_nurb_map_oslo( oslo, crv->ctl_points, crv2->ctl_points,
		coords, coords, k_index, new_kv.k_size - crv2->order, 
		crv2->pt_type );

	rt_nurb_free_oslo( oslo, (struct resource *)NULL );

	bu_free( (char *) new_kv.knots, "rt_nurb_c_xsplit: new_kv.knots");

	BU_LIST_APPEND( &crv1->l, &crv2->l );
	return crv1;
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@@


11.9
log
@merge of ansi-6-0-branch into HEAD
@
text
@d23 5
a27 1
#include "conf.h"
@


11.8
log
@copyright
@
text
@d43 1
a43 4
rt_nurb_s_xsplit( srf, param, dir)
struct face_g_snurb * srf;
fastf_t param;
int dir;
d219 1
a219 3
rt_nurb_c_xsplit( crv, param)
struct edge_g_cnurb * crv;
fastf_t param;
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
 * 	This software if Copyright (C) 1990 by the United States Arym.
@


11.7.4.1
log
@sync to HEAD...
@
text
@d19 1
a19 1
 * 	This software if Copyright (C) 1990-2004 by the United States Army.
@


11.7.10.1
log
@merge from head
@
text
@d19 1
a19 1
 * 	This software if Copyright (C) 1990-2004 by the United States Army.
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d43 4
a46 1
rt_nurb_s_xsplit(struct face_g_snurb *srf, fastf_t param, int dir)
d222 3
a224 1
rt_nurb_c_xsplit(struct edge_g_cnurb *crv, fastf_t param)
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 * 	This software if Copyright (C) 1990-2004 by the United States Army.
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d43 4
a46 1
rt_nurb_s_xsplit(struct face_g_snurb *srf, fastf_t param, int dir)
d222 3
a224 1
rt_nurb_c_xsplit(struct edge_g_cnurb *crv, fastf_t param)
@


11.5
log
@
sed4
@
text
@d43 1
a43 4
rt_nurb_s_xsplit( srf, param, dir)
struct face_g_snurb * srf;
fastf_t param;
int dir;
d219 1
a219 3
rt_nurb_c_xsplit( crv, param)
struct edge_g_cnurb * crv;
fastf_t param;
@


11.4
log
@Mods for use of pmalloc in TNURB raytracing.
@
text
@d79 1
a79 1
			rt_malloc( sizeof(fastf_t) * srf1->s_size[0] *
d98 1
a98 1
			rt_malloc( sizeof(fastf_t) * srf2->s_size[0] *
d151 1
a151 1
			rt_malloc( sizeof(fastf_t) * srf1->s_size[0] *
d170 1
a170 1
			rt_malloc( sizeof(fastf_t) * srf2->s_size[0] *
d204 1
a204 1
	rt_free( (char *) new_kv.knots, "rt_nurb_s_xsplit: new_kv.knots");
d248 1
a248 1
		rt_malloc( sizeof(fastf_t) * crv1->c_size *
d258 1
a258 1
		rt_malloc( sizeof(fastf_t) * crv2->c_size *
d271 1
a271 1
	rt_free( (char *) new_kv.knots, "rt_nurb_c_xsplit: new_kv.knots");
@


11.3
log
@libbu
@
text
@d58 1
a58 1
		rt_nurb_kvmult(&new_kv, &srf->u, srf->order[0], param);
d63 1
a63 1
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_ROW], &srf->u, &new_kv);
d69 2
a70 2
		rt_nurb_kvextract(&srf1->u, &new_kv, 0, k_index + srf1->order[0]);
		rt_nurb_kvcopy(&srf1->v, &srf->v);
d88 2
a89 2
		rt_nurb_kvextract(&srf2->u, &new_kv, k_index, new_kv.k_size);
		rt_nurb_kvcopy(&srf2->v, &srf->v);
d130 1
a130 1
		rt_nurb_kvmult(&new_kv, &srf->v, srf->order[RT_NURB_SPLIT_COL], param);
d135 1
a135 1
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_COL], &srf->v, &new_kv);
d141 2
a142 2
		rt_nurb_kvextract(&srf1->v, &new_kv, 0, k_index + srf1->order[RT_NURB_SPLIT_COL]);
		rt_nurb_kvcopy(&srf1->u, &srf->u);
d160 2
a161 2
		rt_nurb_kvextract(&srf2->v, &new_kv, k_index, new_kv.k_size);
		rt_nurb_kvcopy(&srf2->u, &srf->u);
d206 1
a206 1
	rt_nurb_free_oslo(oslo);
d237 1
a237 1
	rt_nurb_kvmult(&new_kv, &crv->k, crv->order, param);
d240 1
a240 1
		rt_nurb_calc_oslo( crv->order, &crv->k, &new_kv);
d244 1
a244 1
	rt_nurb_kvextract(&crv1->k, &new_kv, 0, k_index + crv->order);
d254 1
a254 1
	rt_nurb_kvextract(&crv2->k, &new_kv, k_index, new_kv.k_size);
d269 1
a269 1
	rt_nurb_free_oslo( oslo );
@


11.2
log
@LIBNURB data structures have been fully merged withNMG data structures.
@
text
@d202 1
a202 1
	RT_LIST_APPEND( &srf1->l, &srf2->l );
d273 1
a273 1
	RT_LIST_APPEND( &crv1->l, &crv2->l );
@


11.1
log
@Release_4.4
@
text
@d42 1
a42 1
struct snurb *
d44 1
a44 1
struct snurb * srf;
d52 1
a52 1
	struct snurb * srf1, * srf2;
d58 1
a58 1
		rt_nurb_kvmult(&new_kv, &srf->u_knots, srf->order[0], param);
d63 1
a63 1
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_ROW], &srf->u_knots, &new_kv);
d69 2
a70 2
		rt_nurb_kvextract(&srf1->u_knots, &new_kv, 0, k_index + srf1->order[0]);
		rt_nurb_kvcopy(&srf1->v_knots, &srf->v_knots);
d73 1
a73 1
		srf1->s_size[0] = srf1->v_knots.k_size - 
d75 1
a75 1
		srf1->s_size[1] = srf1->u_knots.k_size - 
d88 2
a89 2
		rt_nurb_kvextract(&srf2->u_knots, &new_kv, k_index, new_kv.k_size);
		rt_nurb_kvcopy(&srf2->v_knots, &srf->v_knots);
d92 1
a92 1
		srf2->s_size[0] = srf2->v_knots.k_size - 
d94 1
a94 1
		srf2->s_size[1] = srf2->u_knots.k_size - 
d130 1
a130 1
		rt_nurb_kvmult(&new_kv, &srf->v_knots, srf->order[RT_NURB_SPLIT_COL], param);
d135 1
a135 1
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_COL], &srf->v_knots, &new_kv);
d141 2
a142 2
		rt_nurb_kvextract(&srf1->v_knots, &new_kv, 0, k_index + srf1->order[RT_NURB_SPLIT_COL]);
		rt_nurb_kvcopy(&srf1->u_knots, &srf->u_knots);
d145 1
a145 1
		srf1->s_size[0] = srf1->v_knots.k_size - 
d147 1
a147 1
		srf1->s_size[1] = srf1->u_knots.k_size - 
d160 2
a161 2
		rt_nurb_kvextract(&srf2->v_knots, &new_kv, k_index, new_kv.k_size);
		rt_nurb_kvcopy(&srf2->u_knots, &srf->u_knots);
d164 1
a164 1
		srf2->s_size[0] = srf2->v_knots.k_size - 
d166 1
a166 1
		srf2->s_size[1] = srf2->u_knots.k_size - 
d221 1
a221 1
struct cnurb *
d223 1
a223 1
struct cnurb * crv;
d229 1
a229 1
	struct cnurb * crv1, * crv2;
d237 1
a237 1
	rt_nurb_kvmult(&new_kv, &crv->knot, crv->order, param);
d240 1
a240 1
		rt_nurb_calc_oslo( crv->order, &crv->knot, &new_kv);
d244 1
a244 1
	rt_nurb_kvextract(&crv1->knot, &new_kv, 0, k_index + crv->order);
d246 1
a246 1
	crv1->c_size = crv1->knot.k_size - crv1->order;
d254 1
a254 1
	rt_nurb_kvextract(&crv2->knot, &new_kv, k_index, new_kv.k_size);
d256 1
a256 1
	crv2->c_size = crv2->knot.k_size - crv2->order;
@


11.1.1.1
log
@Release_4.5
@
text
@d42 1
a42 1
struct face_g_snurb *
d44 1
a44 1
struct face_g_snurb * srf;
d52 1
a52 1
	struct face_g_snurb * srf1, * srf2;
d58 1
a58 1
		rt_nurb_kvmult(&new_kv, &srf->u, srf->order[0], param, (struct resource *)NULL);
d63 1
a63 1
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_ROW], &srf->u, &new_kv, (struct resource *)NULL);
d69 2
a70 2
		rt_nurb_kvextract(&srf1->u, &new_kv, 0, k_index + srf1->order[0], (struct resource *)NULL);
		rt_nurb_kvcopy(&srf1->v, &srf->v, (struct resource *)NULL);
d73 1
a73 1
		srf1->s_size[0] = srf1->v.k_size - 
d75 1
a75 1
		srf1->s_size[1] = srf1->u.k_size - 
d88 2
a89 2
		rt_nurb_kvextract(&srf2->u, &new_kv, k_index, new_kv.k_size, (struct resource *)NULL);
		rt_nurb_kvcopy(&srf2->v, &srf->v, (struct resource *)NULL);
d92 1
a92 1
		srf2->s_size[0] = srf2->v.k_size - 
d94 1
a94 1
		srf2->s_size[1] = srf2->u.k_size - 
d130 1
a130 1
		rt_nurb_kvmult(&new_kv, &srf->v, srf->order[RT_NURB_SPLIT_COL], param, (struct resource *)NULL);
d135 1
a135 1
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_COL], &srf->v, &new_kv, (struct resource *)NULL);
d141 2
a142 2
		rt_nurb_kvextract(&srf1->v, &new_kv, 0, k_index + srf1->order[RT_NURB_SPLIT_COL], (struct resource *)NULL);
		rt_nurb_kvcopy(&srf1->u, &srf->u, (struct resource *)NULL);
d145 1
a145 1
		srf1->s_size[0] = srf1->v.k_size - 
d147 1
a147 1
		srf1->s_size[1] = srf1->u.k_size - 
d160 2
a161 2
		rt_nurb_kvextract(&srf2->v, &new_kv, k_index, new_kv.k_size, (struct resource *)NULL);
		rt_nurb_kvcopy(&srf2->u, &srf->u, (struct resource *)NULL);
d164 1
a164 1
		srf2->s_size[0] = srf2->v.k_size - 
d166 1
a166 1
		srf2->s_size[1] = srf2->u.k_size - 
d202 1
a202 1
	BU_LIST_APPEND( &srf1->l, &srf2->l );
d206 1
a206 1
	rt_nurb_free_oslo(oslo, (struct resource *)NULL);
d221 1
a221 1
struct edge_g_cnurb *
d223 1
a223 1
struct edge_g_cnurb * crv;
d229 1
a229 1
	struct edge_g_cnurb * crv1, * crv2;
d237 1
a237 1
	rt_nurb_kvmult(&new_kv, &crv->k, crv->order, param, (struct resource *)NULL);
d240 1
a240 1
		rt_nurb_calc_oslo( crv->order, &crv->k, &new_kv, (struct resource *)NULL);
d244 1
a244 1
	rt_nurb_kvextract(&crv1->k, &new_kv, 0, k_index + crv->order, (struct resource *)NULL);
d246 1
a246 1
	crv1->c_size = crv1->k.k_size - crv1->order;
d254 1
a254 1
	rt_nurb_kvextract(&crv2->k, &new_kv, k_index, new_kv.k_size, (struct resource *)NULL);
d256 1
a256 1
	crv2->c_size = crv2->k.k_size - crv2->order;
d269 1
a269 1
	rt_nurb_free_oslo( oslo, (struct resource *)NULL );
d273 1
a273 1
	BU_LIST_APPEND( &crv1->l, &crv2->l );
@


10.8
log
@Irix 6
@
text
@@


10.7
log
@Added include of conf.h
@
text
@a48 1
	fastf_t value;
a226 1
	fastf_t value;
a227 1
	int i;
@


10.6
log
@Changed lists to use rt_list structures
Made some args CONST where appropriate
Switched to GET_CNURB() macros
Added calls to NMG_CK_SNURB()
@
text
@d23 2
@


10.5
log
@fixed memory leak that was pointed out by mike.
@
text
@d1 2
a2 1
/*	 	N U R B _ S P L I T . C
d26 2
d41 1
a41 1
rt_nurb_s_xsplit( srf,param, dir)
d53 2
d64 1
a64 2
		srf1 = (struct snurb *) rt_malloc( sizeof( struct snurb),
			"rt_nurb_s_xsplit: row snurb struct");
d83 1
a83 2
		srf2 = (struct snurb *) rt_malloc( sizeof( struct snurb),
			"rt_nurb_s_xsplit: row snurb struct");
d136 1
a136 2
		srf1 = (struct snurb *) rt_malloc( sizeof( struct snurb),
			"rt_nurb_s_xsplit: row snurb struct");
d155 1
a155 2
		srf2 = (struct snurb *) rt_malloc( sizeof( struct snurb),
			"rt_nurb_split: row snurb struct");
d201 1
a201 1
	srf1->next = srf2;
d207 1
a207 1
	return (struct snurb *) srf1;
d233 2
d243 1
a243 4
	crv1 = (struct cnurb *) rt_malloc( sizeof( struct cnurb),
		"rt_nurb_c_xsplit: cnurb struct");

	crv1->next = (struct cnurb *)0;
d253 1
a253 4
	crv2 = (struct cnurb *) rt_malloc( sizeof( struct cnurb),
		"rt_nurb_c_xsplit: crv2 cnurb struct");

	crv2->next = (struct cnurb *)0;
d274 2
a275 2
	crv1->next = crv2;
	return (struct cnurb *) crv1;
@


10.4
log
@Control polygon/mesh is now just part of the cnurb/snurb structures,
rather than being a separate structure of their own.
@
text
@d202 1
a202 1
	/* XXX Who frees new_kv.knots ? */
d275 1
a275 1
	/* XXX Who frees new_kv.knots ? */
@


10.3
log
@Modifications due to data structure revisions:  mesh and knots are no
longer pointers, but in-place structures.
@
text
@d67 2
a68 2
		srf1->mesh.pt_type = srf->mesh.pt_type;
		srf1->mesh.s_size[0] = srf1->v_knots.k_size - 
d70 1
a70 1
		srf1->mesh.s_size[1] = srf1->u_knots.k_size - 
d73 4
a76 4
		srf1->mesh.ctl_points = (fastf_t *)
			rt_malloc( sizeof(fastf_t) * srf1->mesh.s_size[0] *
				srf1->mesh.s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->mesh.pt_type),
d87 2
a88 2
		srf2->mesh.pt_type = srf->mesh.pt_type;
		srf2->mesh.s_size[0] = srf2->v_knots.k_size - 
d90 1
a90 1
		srf2->mesh.s_size[1] = srf2->u_knots.k_size - 
d93 4
a96 4
		srf2->mesh.ctl_points = (fastf_t *)
			rt_malloc( sizeof(fastf_t) * srf2->mesh.s_size[0] *
				srf2->mesh.s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->mesh.pt_type),
d99 1
a99 1
		for( i = 0; i < srf->mesh.s_size[0]; i++)
d104 6
a109 6
			old_mesh_ptr = &srf->mesh.ctl_points[
				i * srf->mesh.s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf->mesh.pt_type)];
			new_mesh_ptr = &srf1->mesh.ctl_points[
				i * srf1->mesh.s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->mesh.pt_type)];
d111 6
a116 6
				RT_NURB_EXTRACT_COORDS( srf->mesh.pt_type ),
				RT_NURB_EXTRACT_COORDS( srf1->mesh.pt_type ),
				0, k_index, srf1->mesh.pt_type);
			new_mesh_ptr = &srf2->mesh.ctl_points[
				i * srf2->mesh.s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->mesh.pt_type)];
d118 2
a119 2
				RT_NURB_EXTRACT_COORDS( srf->mesh.pt_type ),
				RT_NURB_EXTRACT_COORDS( srf2->mesh.pt_type ),
d121 1
a121 1
				srf2->mesh.pt_type);
d141 2
a142 2
		srf1->mesh.pt_type = srf->mesh.pt_type;
		srf1->mesh.s_size[0] = srf1->v_knots.k_size - 
d144 1
a144 1
		srf1->mesh.s_size[1] = srf1->u_knots.k_size - 
d147 4
a150 4
		srf1->mesh.ctl_points = (fastf_t *)
			rt_malloc( sizeof(fastf_t) * srf1->mesh.s_size[0] *
				srf1->mesh.s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->mesh.pt_type),
d161 2
a162 2
		srf2->mesh.pt_type = srf->mesh.pt_type;
		srf2->mesh.s_size[0] = srf2->v_knots.k_size - 
d164 1
a164 1
		srf2->mesh.s_size[1] = srf2->u_knots.k_size - 
d167 4
a170 4
		srf2->mesh.ctl_points = (fastf_t *)
			rt_malloc( sizeof(fastf_t) * srf2->mesh.s_size[0] *
				srf2->mesh.s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->mesh.pt_type),
d173 1
a173 1
		for( i = 0; i < srf->mesh.s_size[1]; i++)
d178 4
a181 4
			old_mesh_ptr = &srf->mesh.ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf->mesh.pt_type)];
			new_mesh_ptr = &srf1->mesh.ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf1->mesh.pt_type)];
d183 7
a189 7
				srf->mesh.s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf->mesh.pt_type ),
				srf1->mesh.s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->mesh.pt_type ),
				0, k_index, srf1->mesh.pt_type);
			new_mesh_ptr = &srf2->mesh.ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf2->mesh.pt_type)];
d191 4
a194 4
				srf->mesh.s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf->mesh.pt_type ),
				srf2->mesh.s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf2->mesh.pt_type ),
d196 1
a196 1
				srf2->mesh.pt_type);
d202 1
a202 1
	/* XXX Who frees new_kv? */
d232 1
a232 1
	coords = RT_NURB_EXTRACT_COORDS( crv->mesh.pt_type ),
d246 5
a250 5
	crv1->mesh.pt_type = crv->mesh.pt_type;
	crv1->mesh.c_size = crv1->knot.k_size - crv1->order;
	crv1->mesh.ctl_points = (fastf_t *)
		rt_malloc( sizeof(fastf_t) * crv1->mesh.c_size *
			RT_NURB_EXTRACT_COORDS( crv1->mesh.pt_type),
d259 5
a263 5
	crv2->mesh.pt_type = crv->mesh.pt_type;
	crv2->mesh.c_size = crv2->knot.k_size - crv2->order;
	crv2->mesh.ctl_points = (fastf_t *)
		rt_malloc( sizeof(fastf_t) * crv2->mesh.c_size *
			RT_NURB_EXTRACT_COORDS( crv2->mesh.pt_type),
d266 2
a267 2
	rt_nurb_map_oslo( oslo, crv->mesh.ctl_points, crv1->mesh.ctl_points,
		coords, coords, 0, k_index, crv->mesh.pt_type );
d269 1
a269 1
	rt_nurb_map_oslo( oslo, crv->mesh.ctl_points, crv2->mesh.ctl_points,
d271 1
a271 1
		crv2->mesh.pt_type );
d275 1
a275 1
	/* XXX Who frees new_kv ? */
@


10.2
log
@Expanded names of manifest constants
@
text
@d43 1
a43 1
	struct knot_vector *new_kv;
d52 1
a52 2
		new_kv = (struct knot_vector *) 
			rt_nurb_kvmult(srf->u_knots, srf->order[0], param);
d57 1
a57 1
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_ROW], srf->u_knots, new_kv);
d64 2
a65 4
		srf1->u_knots = (struct knot_vector *) 
			rt_nurb_kvextract(new_kv, 0, k_index + srf1->order[0]);
		srf1->v_knots = (struct knot_vector *) 
			rt_nurb_kvcopy(srf->v_knots);
d67 2
a68 5
		srf1->mesh = (struct s_mesh *) rt_malloc( 
			sizeof( struct s_mesh),	"rt_nurb_s_xsplit: srf1 s_mesh");

		srf1->mesh->pt_type = srf->mesh->pt_type;
		srf1->mesh->s_size[0] = srf1->v_knots->k_size - 
d70 1
a70 1
		srf1->mesh->s_size[1] = srf1->u_knots->k_size - 
d73 4
a76 4
		srf1->mesh->ctl_points = (fastf_t *)
			rt_malloc( sizeof(fastf_t) * srf1->mesh->s_size[0] *
				srf1->mesh->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->mesh->pt_type),
d84 2
a85 4
		srf2->u_knots = (struct knot_vector *) 
			rt_nurb_kvextract(new_kv, k_index, new_kv->k_size);
		srf2->v_knots = (struct knot_vector *) 
			rt_nurb_kvcopy(srf->v_knots);
d87 2
a88 5
		srf2->mesh = (struct s_mesh *) rt_malloc( sizeof( struct s_mesh),
			"rt_nurb_s_xsplit: srf2 s_mesh");

		srf2->mesh->pt_type = srf->mesh->pt_type;
		srf2->mesh->s_size[0] = srf2->v_knots->k_size - 
d90 1
a90 1
		srf2->mesh->s_size[1] = srf2->u_knots->k_size - 
d93 4
a96 4
		srf2->mesh->ctl_points = (fastf_t *)
			rt_malloc( sizeof(fastf_t) * srf2->mesh->s_size[0] *
				srf2->mesh->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->mesh->pt_type),
d99 1
a99 1
		for( i = 0; i < srf->mesh->s_size[0]; i++)
d104 6
a109 6
			old_mesh_ptr = &srf->mesh->ctl_points[
				i * srf->mesh->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf->mesh->pt_type)];
			new_mesh_ptr = &srf1->mesh->ctl_points[
				i * srf1->mesh->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->mesh->pt_type)];
d111 6
a116 6
				RT_NURB_EXTRACT_COORDS( srf->mesh->pt_type ),
				RT_NURB_EXTRACT_COORDS( srf1->mesh->pt_type ),
				0, k_index, srf1->mesh->pt_type);
			new_mesh_ptr = &srf2->mesh->ctl_points[
				i * srf2->mesh->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->mesh->pt_type)];
d118 4
a121 4
				RT_NURB_EXTRACT_COORDS( srf->mesh->pt_type ),
				RT_NURB_EXTRACT_COORDS( srf2->mesh->pt_type ),
				k_index, new_kv->k_size - srf2->order[0], 
				srf2->mesh->pt_type);
d126 1
a126 2
		new_kv = (struct knot_vector *) 
			rt_nurb_kvmult(srf->v_knots, srf->order[RT_NURB_SPLIT_COL], param);
d131 1
a131 1
			rt_nurb_calc_oslo( srf->order[RT_NURB_SPLIT_COL], srf->v_knots, new_kv);
d138 2
a139 4
		srf1->v_knots = (struct knot_vector *) 
			rt_nurb_kvextract(new_kv, 0, k_index + srf1->order[RT_NURB_SPLIT_COL]);
		srf1->u_knots = (struct knot_vector *) 
			rt_nurb_kvcopy(srf->u_knots);
d141 2
a142 6
		srf1->mesh = (struct s_mesh *) 
			rt_malloc( sizeof( struct s_mesh),
			"rt_nurb_split: srf1 s_mesh");

		srf1->mesh->pt_type = srf->mesh->pt_type;
		srf1->mesh->s_size[0] = srf1->v_knots->k_size - 
d144 1
a144 1
		srf1->mesh->s_size[1] = srf1->u_knots->k_size - 
d147 4
a150 4
		srf1->mesh->ctl_points = (fastf_t *)
			rt_malloc( sizeof(fastf_t) * srf1->mesh->s_size[0] *
				srf1->mesh->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->mesh->pt_type),
d158 2
a159 4
		srf2->v_knots = (struct knot_vector *) 
			rt_nurb_kvextract(new_kv, k_index, new_kv->k_size);
		srf2->u_knots = (struct knot_vector *) 
			rt_nurb_kvcopy(srf->u_knots);
d161 2
a162 6
		srf2->mesh = (struct s_mesh *) 
			rt_malloc( sizeof( struct s_mesh),
			"rt_nurb_s_xsplit: srf2 s_mesh");

		srf2->mesh->pt_type = srf->mesh->pt_type;
		srf2->mesh->s_size[0] = srf2->v_knots->k_size - 
d164 1
a164 1
		srf2->mesh->s_size[1] = srf2->u_knots->k_size - 
d167 4
a170 4
		srf2->mesh->ctl_points = (fastf_t *)
			rt_malloc( sizeof(fastf_t) * srf2->mesh->s_size[0] *
				srf2->mesh->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf2->mesh->pt_type),
d173 1
a173 1
		for( i = 0; i < srf->mesh->s_size[1]; i++)
d178 4
a181 4
			old_mesh_ptr = &srf->mesh->ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf->mesh->pt_type)];
			new_mesh_ptr = &srf1->mesh->ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf1->mesh->pt_type)];
d183 7
a189 7
				srf->mesh->s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf->mesh->pt_type ),
				srf1->mesh->s_size[1] * 
				RT_NURB_EXTRACT_COORDS( srf1->mesh->pt_type ),
				0, k_index, srf1->mesh->pt_type);
			new_mesh_ptr = &srf2->mesh->ctl_points[
				i * RT_NURB_EXTRACT_COORDS( srf2->mesh->pt_type)];
d191 6
a196 6
				srf->mesh->s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf->mesh->pt_type ),
				srf2->mesh->s_size[1] *
				RT_NURB_EXTRACT_COORDS( srf2->mesh->pt_type ),
				k_index, new_kv->k_size - srf2->order[1], 
				srf2->mesh->pt_type);
d202 2
d224 1
a224 1
	struct knot_vector *new_kv;
d232 1
a232 1
	coords = RT_NURB_EXTRACT_COORDS( crv->mesh->pt_type ),
d235 1
a235 2
	new_kv = (struct knot_vector *) 
		rt_nurb_kvmult(crv->knot, crv->order, param);
d238 1
a238 1
		rt_nurb_calc_oslo( crv->order, crv->knot, new_kv);
d245 6
a250 9
	crv1->knot = (struct knot_vector *) 
		rt_nurb_kvextract(new_kv, 0, k_index + crv->order);
	crv1->mesh = (struct c_mesh *) rt_malloc( sizeof( struct c_mesh),
		"rt_nurb_c_xsplit: crv1 c_mesh");
	crv1->mesh->pt_type = crv->mesh->pt_type;
	crv1->mesh->c_size = crv1->knot->k_size - crv1->order;
	crv1->mesh->ctl_points = (fastf_t *)
		rt_malloc( sizeof(fastf_t) * crv1->mesh->c_size *
			RT_NURB_EXTRACT_COORDS( crv1->mesh->pt_type),
d258 6
a263 9
	crv2->knot = (struct knot_vector *) 
		rt_nurb_kvextract(new_kv, k_index, new_kv->k_size);
	crv2->mesh = (struct c_mesh *) rt_malloc( sizeof( struct c_mesh),
		"rt_nurb_c_xsplit: crv2 s_mesh");
	crv2->mesh->pt_type = crv->mesh->pt_type;
	crv2->mesh->c_size = crv2->knot->k_size - crv2->order;
	crv2->mesh->ctl_points = (fastf_t *)
		rt_malloc( sizeof(fastf_t) * crv2->mesh->c_size *
			RT_NURB_EXTRACT_COORDS( crv2->mesh->pt_type),
d266 2
a267 2
	rt_nurb_map_oslo( oslo, crv->mesh->ctl_points, crv1->mesh->ctl_points,
		coords, coords, 0, k_index, crv->mesh->pt_type );
d269 3
a271 3
	rt_nurb_map_oslo( oslo, crv->mesh->ctl_points, crv2->mesh->ctl_points,
		coords, coords, k_index, new_kv->k_size - crv2->order, 
		crv2->mesh->pt_type );
d274 2
@


10.1
log
@Release_4.0
@
text
@d50 1
a50 1
	if ( dir == ROW )
d58 1
a58 1
			rt_nurb_calc_oslo( srf->order[ROW], srf->u_knots, new_kv);
d64 1
a64 1
		srf1->dir = ROW;
d82 1
a82 1
				EXTRACT_COORDS( srf1->mesh->pt_type),
d89 1
a89 1
		srf2->dir = ROW;
d107 1
a107 1
				EXTRACT_COORDS( srf2->mesh->pt_type),
d117 1
a117 1
				EXTRACT_COORDS( srf->mesh->pt_type)];
d120 1
a120 1
				EXTRACT_COORDS( srf1->mesh->pt_type)];
d122 2
a123 2
				EXTRACT_COORDS( srf->mesh->pt_type ),
				EXTRACT_COORDS( srf1->mesh->pt_type ),
d127 1
a127 1
				EXTRACT_COORDS( srf2->mesh->pt_type)];
d129 2
a130 2
				EXTRACT_COORDS( srf->mesh->pt_type ),
				EXTRACT_COORDS( srf2->mesh->pt_type ),
d138 1
a138 1
			rt_nurb_kvmult(srf->v_knots, srf->order[COL], param);
d143 1
a143 1
			rt_nurb_calc_oslo( srf->order[COL], srf->v_knots, new_kv);
d149 1
a149 1
		srf1->dir = COL;
d151 1
a151 1
			rt_nurb_kvextract(new_kv, 0, k_index + srf1->order[COL]);
d168 1
a168 1
				EXTRACT_COORDS( srf1->mesh->pt_type),
d175 1
a175 1
		srf2->dir = COL;
d194 1
a194 1
				EXTRACT_COORDS( srf2->mesh->pt_type),
d203 1
a203 1
				i * EXTRACT_COORDS( srf->mesh->pt_type)];
d205 1
a205 1
				i * EXTRACT_COORDS( srf1->mesh->pt_type)];
d208 1
a208 1
				EXTRACT_COORDS( srf->mesh->pt_type ),
d210 1
a210 1
				EXTRACT_COORDS( srf1->mesh->pt_type ),
d213 1
a213 1
				i * EXTRACT_COORDS( srf2->mesh->pt_type)];
d216 1
a216 1
				EXTRACT_COORDS( srf->mesh->pt_type ),
d218 1
a218 1
				EXTRACT_COORDS( srf2->mesh->pt_type ),
d254 1
a254 1
	coords = EXTRACT_COORDS( crv->mesh->pt_type ),
d276 1
a276 1
			EXTRACT_COORDS( crv1->mesh->pt_type),
d292 1
a292 1
			EXTRACT_COORDS( crv2->mesh->pt_type),
@


1.3
log
@Changed rt_nurb_maposlo to the actual name, rt_nurb_map_oslo.
@
text
@@


1.2
log
@fixed nurb.h
@
text
@d121 1
a121 1
			rt_nurb_maposlo( oslo, old_mesh_ptr, new_mesh_ptr,
d128 1
a128 1
			rt_nurb_maposlo( oslo, old_mesh_ptr, new_mesh_ptr,
d206 1
a206 1
			rt_nurb_maposlo( oslo, old_mesh_ptr, new_mesh_ptr,
d214 1
a214 1
			rt_nurb_maposlo( oslo, old_mesh_ptr, new_mesh_ptr,
d295 1
a295 1
	rt_nurb_maposlo( oslo, crv->mesh->ctl_points, crv1->mesh->ctl_points,
d298 1
a298 1
	rt_nurb_maposlo( oslo, crv->mesh->ctl_points, crv2->mesh->ctl_points,
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
#include "./nurb.h"
@
