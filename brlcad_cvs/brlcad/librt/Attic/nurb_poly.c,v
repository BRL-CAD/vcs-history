head	11.9;
access;
symbols
	ansi-20040405-merged:11.5.2.2
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.5.10.1
	premerge-autoconf:11.6
	ansi-20040316-freeze:11.5.2.1
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.5.4.1
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.4
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.3
	offsite-5-3-pre:11.3
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.3
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.21.18.07.34;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.46;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2004.02.02.17.39.28;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.08.07;	author jra;	state Exp;
branches
	11.5.2.1
	11.5.4.1
	11.5.10.1;
next	11.4;

11.4
date	2002.08.15.20.55.19;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	99.06.03.01.39.15;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.12.01.02.49.33;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.53.50;	author mike;	state Rel4_4;
branches
	11.1.1.1;
next	10.6;

10.6
date	94.08.11.01.16.35;	author gdurf;	state Exp;
branches;
next	10.5;

10.5
date	94.04.15.14.47.48;	author stay;	state Exp;
branches;
next	10.4;

10.4
date	92.05.29.01.20.06;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	92.05.29.00.52.26;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	92.05.28.22.12.12;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.39.10;	author mike;	state Rel4_0;
branches;
next	1.3;

1.3
date	91.06.23.03.42.21;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	91.06.14.09.42.18;	author stay;	state Exp;
branches;
next	1.1;

1.1
date	91.05.18.02.35.44;	author stay;	state Exp;
branches;
next	;

11.1.1.1
date	98.01.29.06.43.38;	author mike;	state Rel4_5;
branches;
next	;

11.5.2.1
date	2002.09.19.18.01.45;	author morrison;	state Exp;
branches;
next	11.5.2.2;

11.5.2.2
date	2004.03.17.21.18.56;	author morrison;	state Exp;
branches;
next	;

11.5.4.1
date	2004.03.11.23.43.44;	author morrison;	state Exp;
branches;
next	;

11.5.10.1
date	2004.02.12.18.37.46;	author erikg;	state Exp;
branches;
next	;


desc
@Polys
@


11.9
log
@moved to src/
@
text
@/* 
 *      N U R B _ T O _P O L Y . C
 *
 * Function -
 *     Returns two polygons from a NURB surface.
 *     Asumes that the surface is flat.
 * 
 * Author -
 *     Paul R. Stay
 *
 * Source -
 *     SECAD/VLD Computing Consortium, Bldg 394
 *     The U.S. Army Ballistic Research Laboratory
 *     Aberdeen Proving Ground, Maryland 21005
 *
 * Copyright Notice -
 *     This software is Copyright (C) 1990-2004 by the United States Army.
 *     All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "nurb.h"

/* Algorithm -
 * From the four corners of the surface, return the two parts split by the
 * diagonal from the first and third corner point making sure Homogeneous
 * points are divided. 
 */

struct rt_nurb_poly *
rt_nurb_to_poly(struct face_g_snurb *srf)
{
	int	coords = srf->pt_type;
	fastf_t 	 * p1, *p2, *p3, *p4;
	fastf_t 	uv1[2], uv2[2], uv3[2], uv4[2];
	struct rt_nurb_poly *p, *p_head;

	/* Extract the four corners from the mesh */

	p1 = srf->ctl_points;
	p2 = srf->ctl_points + coords * srf->s_size[1];
	p3 = srf->ctl_points + (coords * srf->s_size[1] * 
	    (srf->s_size[0] - 1)) + 
	    ((srf->s_size[1] - 1) * coords);
	p4 = srf->ctl_points + (coords * srf->s_size[1] * 
	    (srf->s_size[0] - 1));

	/* If the point is rational then divide out the w component */
	if ( RT_NURB_IS_PT_RATIONAL(srf->pt_type)) {
		int	w_index;

		if ( RT_NURB_EXTRACT_PT_TYPE( srf->pt_type) == RT_NURB_PT_XY)
			w_index = 2;
		else if ( RT_NURB_EXTRACT_PT_TYPE( srf->pt_type) == RT_NURB_PT_UV)
			w_index = 2;
		else if ( RT_NURB_EXTRACT_PT_TYPE( srf->pt_type) == RT_NURB_PT_XYZ)
			w_index = 3;
		else /* assume the forth coordinate */
			w_index = 3;

		p1[0] = p1[0] / p1[w_index];
		p2[0] = p2[0] / p1[w_index];
		p3[0] = p3[0] / p1[w_index];
		p4[0] = p4[0] / p1[w_index];
	}

	uv1[0] = srf->u.knots[0];
	uv1[1] = srf->v.knots[0];

	uv2[0] = srf->u.knots[srf->u.k_size -1];
	uv2[1] = srf->v.knots[0];

	uv3[0] = srf->u.knots[srf->u.k_size -1];
	uv3[1] = srf->v.knots[srf->v.k_size -1];

	uv4[0] = srf->u.knots[0];
	uv4[1] = srf->v.knots[srf->v.k_size -1];

	p = rt_nurb_mk_poly(p1, p2, p3, uv1, uv2, uv3 ); 
	p_head = p;
	p = rt_nurb_mk_poly(p3, p4, p1, uv3, uv4, uv1 ); 
	p->next = p_head; 
	p_head = p;

	return p_head;
}


struct rt_nurb_poly *
rt_nurb_mk_poly(fastf_t *v1, fastf_t *v2, fastf_t *v3, fastf_t *uv1, fastf_t *uv2, fastf_t *uv3)
{
	struct rt_nurb_poly *p;

	p = (struct rt_nurb_poly *) bu_malloc( sizeof( struct rt_nurb_poly ),
	    "rt_nurb_mk_poly: rt_nurb_poly struct" );

	p->next = (struct rt_nurb_poly *) 0;

	VMOVE( p->ply[0], v1);
	VMOVE( p->ply[1], v2);
	VMOVE( p->ply[2], v3);

	p->uv[0][0] = uv1[0];
	p->uv[0][1] = uv1[1];
	p->uv[1][0] = uv2[0];
	p->uv[1][1] = uv2[1];
	p->uv[2][0] = uv3[0];
	p->uv[2][1] = uv3[1];

	return p;
}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@@


11.7
log
@merge of ansi-6-0-branch into HEAD
@
text
@d21 5
a25 1
#include "conf.h"
@


11.6
log
@update copyright to include span through 2003
@
text
@d37 1
a37 2
rt_nurb_to_poly( srf )
struct face_g_snurb *srf;
d96 1
a96 3
rt_nurb_mk_poly( v1, v2, v3, uv1, uv2, uv3 )
fastf_t * v1, *v2, *v3;
fastf_t uv1[2], uv2[2], uv3[2];
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d17 1
a17 1
 *     This software is Copyright (C) 1990 by the United States Army.
@


11.5.4.1
log
@sync to HEAD...
@
text
@d17 1
a17 1
 *     This software is Copyright (C) 1990-2004 by the United States Army.
@


11.5.10.1
log
@merge from HEAD
@
text
@d17 1
a17 1
 *     This software is Copyright (C) 1990-2004 by the United States Army.
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d37 2
a38 1
rt_nurb_to_poly(struct face_g_snurb *srf)
d97 3
a99 1
rt_nurb_mk_poly(fastf_t *v1, fastf_t *v2, fastf_t *v3, fastf_t *uv1, fastf_t *uv2, fastf_t *uv3)
@


11.5.2.2
log
@sync branch with HEAD
@
text
@d17 1
a17 1
 *     This software is Copyright (C) 1990-2004 by the United States Army.
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d37 2
a38 1
rt_nurb_to_poly(struct face_g_snurb *srf)
d97 3
a99 1
rt_nurb_mk_poly(fastf_t *v1, fastf_t *v2, fastf_t *v3, fastf_t *uv1, fastf_t *uv2, fastf_t *uv3)
@


11.3
log
@
sed4
@
text
@d37 1
a37 2
rt_nurb_to_poly( srf )
struct face_g_snurb *srf;
d96 1
a96 3
rt_nurb_mk_poly( v1, v2, v3, uv1, uv2, uv3 )
fastf_t * v1, *v2, *v3;
fastf_t uv1[2], uv2[2], uv3[2];
@


11.2
log
@LIBNURB data structures have been fully merged withNMG data structures.
@
text
@d103 1
a103 1
	p = (struct rt_nurb_poly *) rt_malloc( sizeof( struct rt_nurb_poly ),
@


11.1
log
@Release_4.4
@
text
@d38 1
a38 1
struct snurb *srf;
d74 2
a75 2
	uv1[0] = srf->u_knots.knots[0];
	uv1[1] = srf->v_knots.knots[0];
d77 2
a78 2
	uv2[0] = srf->u_knots.knots[srf->u_knots.k_size -1];
	uv2[1] = srf->v_knots.knots[0];
d80 2
a81 2
	uv3[0] = srf->u_knots.knots[srf->u_knots.k_size -1];
	uv3[1] = srf->v_knots.knots[srf->v_knots.k_size -1];
d83 2
a84 2
	uv4[0] = srf->u_knots.knots[0];
	uv4[1] = srf->v_knots.knots[srf->v_knots.k_size -1];
@


11.1.1.1
log
@Release_4.5
@
text
@d38 1
a38 1
struct face_g_snurb *srf;
d74 2
a75 2
	uv1[0] = srf->u.knots[0];
	uv1[1] = srf->v.knots[0];
d77 2
a78 2
	uv2[0] = srf->u.knots[srf->u.k_size -1];
	uv2[1] = srf->v.knots[0];
d80 2
a81 2
	uv3[0] = srf->u.knots[srf->u.k_size -1];
	uv3[1] = srf->v.knots[srf->v.k_size -1];
d83 2
a84 2
	uv4[0] = srf->u.knots[0];
	uv4[1] = srf->v.knots[srf->v.k_size -1];
@


10.6
log
@Added includes
@
text
@@


10.5
log
@fixed typo
@
text
@d21 4
d27 1
@


10.4
log
@Control polygon/mesh is now just part of the cnurb/snurb structures,
rather than being a separate structure of their own.
@
text
@d27 1
a27 1
 * diagonal from the first and thrid corner point making sure Homogeneous
@


10.3
log
@Modifications due to data structure revisions:  mesh and knots are no
longer pointers, but in-place structures.
@
text
@d35 1
a35 1
	int	coords = srf->mesh.pt_type;
d42 7
a48 7
	p1 = srf->mesh.ctl_points;
	p2 = srf->mesh.ctl_points + coords * srf->mesh.s_size[1];
	p3 = srf->mesh.ctl_points + (coords * srf->mesh.s_size[1] * 
	    (srf->mesh.s_size[0] - 1)) + 
	    ((srf->mesh.s_size[1] - 1) * coords);
	p4 = srf->mesh.ctl_points + (coords * srf->mesh.s_size[1] * 
	    (srf->mesh.s_size[0] - 1));
d51 1
a51 1
	if ( RT_NURB_IS_PT_RATIONAL(srf->mesh.pt_type)) {
d54 1
a54 1
		if ( RT_NURB_EXTRACT_PT_TYPE( srf->mesh.pt_type) == RT_NURB_PT_XY)
d56 1
a56 1
		else if ( RT_NURB_EXTRACT_PT_TYPE( srf->mesh.pt_type) == RT_NURB_PT_UV)
d58 1
a58 1
		else if ( RT_NURB_EXTRACT_PT_TYPE( srf->mesh.pt_type) == RT_NURB_PT_XYZ)
@


10.2
log
@Expanded names of manifest constants
@
text
@d35 1
a35 1
	int	coords = srf->mesh->pt_type;
d42 7
a48 7
	p1 = srf->mesh->ctl_points;
	p2 = srf->mesh->ctl_points + coords * srf->mesh->s_size[1];
	p3 = srf->mesh->ctl_points + (coords * srf->mesh->s_size[1] * 
	    (srf->mesh->s_size[0] - 1)) + 
	    ((srf->mesh->s_size[1] - 1) * coords);
	p4 = srf->mesh->ctl_points + (coords * srf->mesh->s_size[1] * 
	    (srf->mesh->s_size[0] - 1));
d51 1
a51 1
	if ( RT_NURB_IS_PT_RATIONAL(srf->mesh->pt_type)) {
d54 1
a54 1
		if ( RT_NURB_EXTRACT_PT_TYPE( srf->mesh->pt_type) == RT_NURB_PT_XY)
d56 1
a56 1
		else if ( RT_NURB_EXTRACT_PT_TYPE( srf->mesh->pt_type) == RT_NURB_PT_UV)
d58 1
a58 1
		else if ( RT_NURB_EXTRACT_PT_TYPE( srf->mesh->pt_type) == RT_NURB_RT_NURB_PT_XYZ)
d69 2
a70 2
	uv1[0] = srf->u_knots->knots[0];
	uv1[1] = srf->v_knots->knots[0];
d72 2
a73 2
	uv2[0] = srf->u_knots->knots[srf->u_knots->k_size -1];
	uv2[1] = srf->v_knots->knots[0];
d75 2
a76 2
	uv3[0] = srf->u_knots->knots[srf->u_knots->k_size -1];
	uv3[1] = srf->v_knots->knots[srf->v_knots->k_size -1];
d78 2
a79 2
	uv4[0] = srf->u_knots->knots[0];
	uv4[1] = srf->v_knots->knots[srf->v_knots->k_size -1];
@


10.1
log
@Release_4.0
@
text
@d51 1
a51 1
	if ( EXTRACT_RAT(srf->mesh->pt_type)) {
d54 1
a54 1
		if ( EXTRACT_PT_TYPE( srf->mesh->pt_type) == PT_XY)
d56 1
a56 1
		else if ( EXTRACT_PT_TYPE( srf->mesh->pt_type) == PT_UV)
d58 1
a58 1
		else if ( EXTRACT_PT_TYPE( srf->mesh->pt_type) == PT_XYZ)
@


1.3
log
@minor lint
@
text
@@


1.2
log
@fixed nurb.h
@
text
@a30 2
struct rt_nurb_poly *rt_nurb_mk_poly();

d38 1
a38 1
	struct rt_nurb_poly *p, *p_head, *rt_nurb_mk_poly();
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
#include "./nurb.h"
@
