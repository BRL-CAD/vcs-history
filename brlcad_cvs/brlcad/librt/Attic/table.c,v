head	11.115;
access;
symbols
	ansi-20040405-merged:11.107.2.3
	postmerge-20040405-ansi:11.113
	premerge-20040404-ansi:11.112
	postmerge-autoconf:11.112
	autoconf-freeze:11.111.2.2
	premerge-autoconf:11.112
	ansi-20040316-freeze:11.107.2.2
	postmerge-20040315-windows:11.112
	premerge-20040315-windows:11.112
	windows-20040315-freeze:11.107.4.1
	autoconf-20031203:11.111
	autoconf-20031202:11.111
	autoconf-branch:11.111.0.2
	phong-branch:11.110.0.2
	photonmap-branch:11.107.0.6
	rel-6-1-DP:11.107
	windows-branch:11.107.0.4
	rel-6-0-2:11.104
	ansi-branch:11.107.0.2
	rel-6-0-1-branch:11.104.0.2
	hartley-6-0-post:11.105
	hartley-6-0-pre:11.104
	rel-6-0-1:11.104
	rel-6-0:11.103
	rel-5-4:11.37.2.2
	offsite-5-3-pre:11.79
	rel-5-3:11.37.2.2
	rel-5-2:11.37
	rel-5-1-branch:11.37.0.2
	rel-5-1:11.37
	rel-5-0:11.14
	rel-5-0-beta:11.12
	rel-4-5:11.10
	ctj-4-5-post:11.10
	ctj-4-5-pre:11.10
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1;
locks; strict;
comment	@ * @;


11.115
date	2004.05.21.18.07.35;	author morrison;	state dead;
branches;
next	11.114;

11.114
date	2004.05.10.15.30.47;	author erikg;	state Exp;
branches;
next	11.113;

11.113
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	11.112;

11.112
date	2004.02.02.17.39.29;	author morrison;	state Exp;
branches;
next	11.111;

11.111
date	2003.09.25.17.37.49;	author morrison;	state Exp;
branches
	11.111.2.1;
next	11.110;

11.110
date	2003.09.10.14.06.30;	author jra;	state Exp;
branches;
next	11.109;

11.109
date	2003.09.10.13.03.59;	author jra;	state Exp;
branches;
next	11.108;

11.108
date	2003.09.09.20.51.20;	author jra;	state Exp;
branches;
next	11.107;

11.107
date	2002.09.05.04.10.30;	author butler;	state Exp;
branches
	11.107.2.1
	11.107.4.1;
next	11.106;

11.106
date	2002.08.20.17.08.10;	author jra;	state Exp;
branches;
next	11.105;

11.105
date	2002.08.15.20.55.21;	author hartley;	state Exp;
branches;
next	11.104;

11.104
date	2002.05.09.19.01.03;	author jra;	state Exp;
branches;
next	11.103;

11.103
date	2002.02.22.05.09.21;	author morrison;	state Exp;
branches;
next	11.102;

11.102
date	2001.11.19.19.32.06;	author butler;	state Exp;
branches;
next	11.101;

11.101
date	2001.11.07.19.35.37;	author butler;	state Exp;
branches;
next	11.100;

11.100
date	2001.11.02.05.03.06;	author butler;	state Exp;
branches;
next	11.99;

11.99
date	2001.11.02.01.50.42;	author butler;	state Exp;
branches;
next	11.98;

11.98
date	2001.11.01.22.04.33;	author butler;	state Exp;
branches;
next	11.97;

11.97
date	2001.10.31.23.01.00;	author butler;	state Exp;
branches;
next	11.96;

11.96
date	2001.10.15.15.24.27;	author bparker;	state Exp;
branches;
next	11.95;

11.95
date	2001.10.02.17.57.15;	author jra;	state Exp;
branches;
next	11.94;

11.94
date	2001.10.01.20.12.08;	author jra;	state Exp;
branches;
next	11.93;

11.93
date	2001.08.10.21.21.58;	author morrison;	state Exp;
branches;
next	11.92;

11.92
date	2001.07.17.13.19.22;	author jra;	state Exp;
branches;
next	11.91;

11.91
date	2001.06.27.13.23.13;	author jra;	state Exp;
branches;
next	11.90;

11.90
date	2001.06.21.20.35.31;	author jra;	state Exp;
branches;
next	11.89;

11.89
date	2001.06.21.20.14.30;	author jra;	state Exp;
branches;
next	11.88;

11.88
date	2001.06.21.18.07.25;	author jra;	state Exp;
branches;
next	11.87;

11.87
date	2001.06.15.14.53.20;	author jra;	state Exp;
branches;
next	11.86;

11.86
date	2001.04.13.15.13.30;	author jra;	state Exp;
branches;
next	11.85;

11.85
date	2001.04.13.15.03.54;	author jra;	state Exp;
branches;
next	11.84;

11.84
date	2001.04.13.14.13.45;	author jra;	state Exp;
branches;
next	11.83;

11.83
date	2001.04.05.19.35.36;	author morrison;	state Exp;
branches;
next	11.82;

11.82
date	2001.03.20.16.09.07;	author jra;	state Exp;
branches;
next	11.81;

11.81
date	2001.03.20.15.57.11;	author bparker;	state Exp;
branches;
next	11.80;

11.80
date	2001.03.19.22.19.58;	author butler;	state Exp;
branches;
next	11.79;

11.79
date	2000.11.01.06.46.13;	author mike;	state Exp;
branches;
next	11.78;

11.78
date	2000.10.24.18.11.13;	author mike;	state Exp;
branches;
next	11.77;

11.77
date	2000.10.19.19.19.46;	author butler;	state Exp;
branches;
next	11.76;

11.76
date	2000.10.18.18.10.35;	author butler;	state Exp;
branches;
next	11.75;

11.75
date	2000.09.09.04.30.47;	author mike;	state Exp;
branches;
next	11.74;

11.74
date	2000.09.08.05.54.42;	author mike;	state Exp;
branches;
next	11.73;

11.73
date	2000.08.24.02.14.46;	author mike;	state Exp;
branches;
next	11.72;

11.72
date	2000.08.18.03.40.13;	author cjohnson;	state Exp;
branches;
next	11.71;

11.71
date	2000.07.10.23.01.49;	author mike;	state Exp;
branches;
next	11.70;

11.70
date	2000.07.06.22.44.52;	author mike;	state Exp;
branches;
next	11.69;

11.69
date	2000.07.05.21.20.45;	author mike;	state Exp;
branches;
next	11.68;

11.68
date	2000.06.30.21.39.18;	author cjohnson;	state Exp;
branches;
next	11.67;

11.67
date	2000.06.30.20.25.50;	author jra;	state Exp;
branches;
next	11.66;

11.66
date	2000.06.30.20.03.46;	author jra;	state Exp;
branches;
next	11.65;

11.65
date	2000.06.30.19.43.51;	author jra;	state Exp;
branches;
next	11.64;

11.64
date	2000.06.30.19.14.30;	author jra;	state Exp;
branches;
next	11.63;

11.63
date	2000.06.30.18.15.19;	author mike;	state Exp;
branches;
next	11.62;

11.62
date	2000.06.30.17.41.04;	author jra;	state Exp;
branches;
next	11.61;

11.61
date	2000.06.30.15.42.41;	author pjt;	state Exp;
branches;
next	11.60;

11.60
date	2000.06.30.15.26.36;	author pjt;	state Exp;
branches;
next	11.59;

11.59
date	2000.06.29.20.21.00;	author jra;	state Exp;
branches;
next	11.58;

11.58
date	2000.06.29.19.50.57;	author butler;	state Exp;
branches;
next	11.57;

11.57
date	2000.06.29.18.23.40;	author bparker;	state Exp;
branches;
next	11.56;

11.56
date	2000.06.29.18.20.56;	author mike;	state Exp;
branches;
next	11.55;

11.55
date	2000.06.29.17.54.47;	author jra;	state Exp;
branches;
next	11.54;

11.54
date	2000.06.29.17.14.14;	author bparker;	state Exp;
branches;
next	11.53;

11.53
date	2000.06.29.15.02.28;	author mike;	state Exp;
branches;
next	11.52;

11.52
date	2000.06.29.14.00.44;	author bparker;	state Exp;
branches;
next	11.51;

11.51
date	2000.06.28.21.00.40;	author bparker;	state Exp;
branches;
next	11.50;

11.50
date	2000.06.28.18.22.20;	author jra;	state Exp;
branches;
next	11.49;

11.49
date	2000.06.27.21.05.57;	author mike;	state Exp;
branches;
next	11.48;

11.48
date	2000.06.27.15.01.35;	author bparker;	state Exp;
branches;
next	11.47;

11.47
date	2000.06.27.14.33.29;	author bparker;	state Exp;
branches;
next	11.46;

11.46
date	2000.06.27.13.34.35;	author bparker;	state Exp;
branches;
next	11.45;

11.45
date	2000.06.27.03.53.46;	author cjohnson;	state Exp;
branches;
next	11.44;

11.44
date	2000.06.26.21.23.53;	author bparker;	state Exp;
branches;
next	11.43;

11.43
date	2000.06.26.21.01.38;	author bparker;	state Exp;
branches;
next	11.42;

11.42
date	2000.06.26.20.41.37;	author bparker;	state Exp;
branches;
next	11.41;

11.41
date	2000.06.26.20.21.29;	author bparker;	state Exp;
branches;
next	11.40;

11.40
date	2000.06.26.20.10.20;	author cjohnson;	state Exp;
branches;
next	11.39;

11.39
date	2000.06.26.19.46.50;	author bparker;	state Exp;
branches;
next	11.38;

11.38
date	2000.06.26.17.46.41;	author mike;	state Exp;
branches;
next	11.37;

11.37
date	2000.05.24.01.00.25;	author mike;	state Exp;
branches
	11.37.2.1;
next	11.36;

11.36
date	2000.05.08.20.46.56;	author mike;	state Exp;
branches;
next	11.35;

11.35
date	2000.05.02.01.37.30;	author mike;	state Exp;
branches;
next	11.34;

11.34
date	2000.03.03.18.17.10;	author jra;	state Exp;
branches;
next	11.33;

11.33
date	2000.03.02.14.47.28;	author jra;	state Exp;
branches;
next	11.32;

11.32
date	2000.02.10.19.47.46;	author jra;	state Exp;
branches;
next	11.31;

11.31
date	2000.01.31.13.40.50;	author jra;	state Exp;
branches;
next	11.30;

11.30
date	2000.01.11.20.37.50;	author mike;	state Exp;
branches;
next	11.29;

11.29
date	2000.01.06.04.37.46;	author mike;	state Exp;
branches;
next	11.28;

11.28
date	99.12.30.19.43.31;	author mike;	state Exp;
branches;
next	11.27;

11.27
date	99.12.22.02.18.01;	author mike;	state Exp;
branches;
next	11.26;

11.26
date	99.12.06.20.17.37;	author jra;	state Exp;
branches;
next	11.25;

11.25
date	99.12.03.20.38.54;	author mike;	state Exp;
branches;
next	11.24;

11.24
date	99.11.26.21.46.50;	author mike;	state Exp;
branches;
next	11.23;

11.23
date	99.11.19.02.34.14;	author mike;	state Exp;
branches;
next	11.22;

11.22
date	99.11.19.01.52.00;	author mike;	state Exp;
branches;
next	11.21;

11.21
date	99.11.18.03.21.26;	author mike;	state Exp;
branches;
next	11.20;

11.20
date	99.11.17.04.39.20;	author mike;	state Exp;
branches;
next	11.19;

11.19
date	99.11.17.03.44.41;	author mike;	state Exp;
branches;
next	11.18;

11.18
date	99.11.17.03.22.07;	author mike;	state Exp;
branches;
next	11.17;

11.17
date	99.11.17.02.42.04;	author mike;	state Exp;
branches;
next	11.16;

11.16
date	99.11.08.15.10.00;	author jra;	state Exp;
branches;
next	11.15;

11.15
date	99.10.12.13.58.13;	author jra;	state Exp;
branches;
next	11.14;

11.14
date	99.06.03.01.39.16;	author mike;	state Exp;
branches;
next	11.13;

11.13
date	99.06.03.01.21.30;	author mike;	state Exp;
branches;
next	11.12;

11.12
date	98.04.03.00.41.56;	author mike;	state Exp;
branches;
next	11.11;

11.11
date	98.04.03.00.19.18;	author mike;	state Exp;
branches;
next	11.10;

11.10
date	97.05.22.09.29.51;	author butler;	state Exp;
branches;
next	11.9;

11.9
date	97.05.19.17.04.32;	author butler;	state Exp;
branches;
next	11.8;

11.8
date	97.04.27.08.00.45;	author butler;	state Exp;
branches;
next	11.7;

11.7
date	97.04.25.06.05.15;	author butler;	state Exp;
branches;
next	11.6;

11.6
date	97.01.30.01.45.12;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	95.12.02.03.25.15;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	95.11.29.23.50.45;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	95.11.29.21.15.54;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.11.29.02.15.02;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.58.43;	author mike;	state Rel4_4;
branches;
next	10.12;

10.12
date	94.11.03.14.33.32;	author cjohnson;	state Exp;
branches;
next	10.11;

10.11
date	94.10.25.22.53.34;	author mike;	state Exp;
branches;
next	10.10;

10.10
date	94.09.01.16.30.22;	author jra;	state Exp;
branches;
next	10.9;

10.9
date	94.08.10.20.16.06;	author gdurf;	state Exp;
branches;
next	10.8;

10.8
date	94.03.11.06.59.27;	author cjohnson;	state Exp;
branches;
next	10.7;

10.7
date	93.11.12.23.34.37;	author mike;	state Exp;
branches;
next	10.6;

10.6
date	93.11.10.04.04.16;	author cjohnson;	state Exp;
branches;
next	10.5;

10.5
date	93.11.10.00.56.31;	author cjohnson;	state Exp;
branches;
next	10.4;

10.4
date	93.04.03.04.39.29;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	92.07.22.03.55.20;	author butler;	state Exp;
branches;
next	10.2;

10.2
date	92.02.14.15.29.42;	author mmark;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.41.04;	author mike;	state Rel4_0;
branches;
next	9.41;

9.41
date	91.10.01.02.49.29;	author butler;	state Exp;
branches;
next	9.40;

9.40
date	91.08.29.22.12.18;	author mike;	state Exp;
branches;
next	9.39;

9.39
date	91.06.29.22.14.13;	author mike;	state Exp;
branches;
next	9.38;

9.38
date	91.06.22.22.30.51;	author mike;	state Exp;
branches;
next	9.37;

9.37
date	91.06.14.06.26.57;	author mike;	state Exp;
branches;
next	9.36;

9.36
date	91.05.18.03.03.42;	author mike;	state Exp;
branches;
next	9.35;

9.35
date	91.03.30.01.46.53;	author butler;	state Exp;
branches;
next	9.34;

9.34
date	91.02.06.22.30.57;	author mike;	state Exp;
branches;
next	9.33;

9.33
date	91.02.06.22.29.49;	author stay;	state Exp;
branches;
next	9.32;

9.32
date	91.01.28.23.56.39;	author mike;	state Exp;
branches;
next	9.31;

9.31
date	91.01.26.03.14.27;	author mike;	state Exp;
branches;
next	9.30;

9.30
date	91.01.26.02.53.25;	author mike;	state Exp;
branches;
next	9.29;

9.29
date	91.01.25.21.19.46;	author mike;	state Exp;
branches;
next	9.28;

9.28
date	91.01.25.16.06.55;	author mike;	state Exp;
branches;
next	9.27;

9.27
date	91.01.23.22.35.25;	author mike;	state Exp;
branches;
next	9.26;

9.26
date	91.01.19.04.56.01;	author mike;	state Exp;
branches;
next	9.25;

9.25
date	91.01.15.23.38.43;	author mike;	state Exp;
branches;
next	9.24;

9.24
date	91.01.15.01.37.14;	author mike;	state Exp;
branches;
next	9.23;

9.23
date	91.01.14.22.42.40;	author mike;	state Exp;
branches;
next	9.22;

9.22
date	91.01.12.07.25.54;	author mike;	state Exp;
branches;
next	9.21;

9.21
date	91.01.12.04.41.27;	author mike;	state Exp;
branches;
next	9.20;

9.20
date	91.01.11.06.18.04;	author mike;	state Exp;
branches;
next	9.19;

9.19
date	91.01.11.06.11.10;	author mike;	state Exp;
branches;
next	9.18;

9.18
date	90.12.21.14.40.35;	author mike;	state Exp;
branches;
next	9.17;

9.17
date	90.10.11.02.40.05;	author mike;	state Exp;
branches;
next	9.16;

9.16
date	90.10.06.02.05.45;	author mike;	state Exp;
branches;
next	9.15;

9.15
date	90.05.04.08.10.53;	author mike;	state Exp;
branches;
next	9.14;

9.14
date	90.05.03.09.34.28;	author mike;	state Exp;
branches;
next	9.13;

9.13
date	90.05.01.05.14.26;	author mike;	state Exp;
branches;
next	9.12;

9.12
date	90.05.01.04.58.47;	author mike;	state Exp;
branches;
next	9.11;

9.11
date	90.04.28.03.31.02;	author mike;	state Exp;
branches;
next	9.10;

9.10
date	90.04.24.05.06.22;	author mike;	state Exp;
branches;
next	9.9;

9.9
date	90.03.15.02.08.03;	author mike;	state Exp;
branches;
next	9.8;

9.8
date	90.03.14.22.37.26;	author mike;	state Exp;
branches;
next	9.7;

9.7
date	90.03.03.05.49.25;	author mike;	state Exp;
branches;
next	9.6;

9.6
date	89.12.29.21.06.31;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	89.12.08.23.04.41;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	89.12.08.05.59.57;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	89.10.13.20.37.46;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	89.10.10.16.13.58;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.57.19;	author mike;	state Rel3_5;
branches;
next	1.3;

1.3
date	89.04.14.03.11.04;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	89.04.08.06.00.57;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	89.03.15.15.45.56;	author mike;	state Exp;
branches;
next	;

11.37.2.1
date	2000.11.01.18.43.54;	author jra;	state Exp;
branches;
next	11.37.2.2;

11.37.2.2
date	2000.11.04.02.43.17;	author jra;	state Exp;
branches;
next	;

11.107.2.1
date	2002.09.19.18.01.47;	author morrison;	state Exp;
branches;
next	11.107.2.2;

11.107.2.2
date	2003.01.31.00.11.54;	author morrison;	state Exp;
branches;
next	11.107.2.3;

11.107.2.3
date	2004.03.17.21.19.00;	author morrison;	state Exp;
branches;
next	;

11.107.4.1
date	2004.03.11.23.43.46;	author morrison;	state Exp;
branches;
next	;

11.111.2.1
date	2004.02.12.18.37.47;	author erikg;	state Exp;
branches;
next	11.111.2.2;

11.111.2.2
date	2004.03.15.14.07.29;	author erikg;	state Exp;
branches;
next	;


desc
@Tables for librt
@


11.115
log
@moved to src/
@
text
@/*
 *			T A B L E . C
 *
 *  Tables for the BRL-CAD Package ray-tracing library "librt".
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1989-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCStree[] = "@@(#)$Header: /n/xoff/cvs/brlcad/librt/table.c,v 11.114 2004/05/10 15:30:47 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#include <math.h>

#include "tcl.h"

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "db.h"
#include "nmg.h"
#include "raytrace.h"
#include "rtgeom.h"
#include "./debug.h"


const struct bu_structparse rt_nul_parse[] = {
	{""}
};

#if __STDC__ && !defined(alliant)
# define RT_DECLARE_INTERFACE(name)	\
	BU_EXTERN(int rt_##name##_prep, (struct soltab *stp, \
			struct rt_db_internal *ip, struct rt_i *rtip )); \
	BU_EXTERN(int rt_##name##_shot, (struct soltab *stp,\
			register struct xray *rp, \
			struct application *ap, struct seg *seghead )); \
	BU_EXTERN(int rt_##name##_piece_shot, (\
			struct rt_piecestate *psp, \
			struct rt_piecelist *plp, \
			double dist_corr, \
			register struct xray *rp, \
			struct application *ap, \
			struct seg *seghead )); \
	BU_EXTERN(void rt_##name##_piece_hitsegs, (\
			struct rt_piecestate *psp, \
			struct seg *seghead, \
			struct application *ap)); \
	BU_EXTERN(void rt_##name##_print, (const struct soltab *stp)); \
	BU_EXTERN(void rt_##name##_norm, (struct hit *hitp, \
			struct soltab *stp, struct xray *rp)); \
	BU_EXTERN(void rt_##name##_uv, (struct application *ap, \
			struct soltab *stp, struct hit *hitp, \
			struct uvcoord *uvp)); \
	BU_EXTERN(void rt_##name##_curve, (struct curvature *cvp, \
			struct hit *hitp, struct soltab *stp)); \
	BU_EXTERN(int rt_##name##_class, ()); \
	BU_EXTERN(void rt_##name##_free, (struct soltab *stp)); \
	BU_EXTERN(int rt_##name##_plot, (struct bu_list *vhead, \
			struct rt_db_internal *ip, \
			const struct rt_tess_tol *ttol, \
			const struct bn_tol *tol)); \
	BU_EXTERN(void rt_##name##_vshot, (struct soltab *stp[], \
			struct xray *rp[], \
			struct seg segp[], int n, struct application *ap )); \
	BU_EXTERN(int rt_##name##_tess, (struct nmgregion **r, \
			struct model *m, struct rt_db_internal *ip, \
			const struct rt_tess_tol *ttol, \
			const struct bn_tol *tol)); \
	BU_EXTERN(int rt_##name##_tnurb, (struct nmgregion **r, \
			struct model *m, struct rt_db_internal *ip, \
			const struct bn_tol *tol)); \
	BU_EXTERN(int rt_##name##_import5, (struct rt_db_internal *ip, \
			const struct bu_external *ep, const mat_t mat, \
			const struct db_i *dbip, struct resource *resp, const int minor_type )); \
	BU_EXTERN(int rt_##name##_export5, (struct bu_external *ep, \
			const struct rt_db_internal *ip, \
			double local2mm, const struct db_i *dbip, \
			struct resource *resp, \
			const int minor_type)); \
	BU_EXTERN(int rt_##name##_import, (struct rt_db_internal *ip, \
			const struct bu_external *ep, const mat_t mat, \
			const struct db_i *dbip, struct resource *resp )); \
	BU_EXTERN(int rt_##name##_export, (struct bu_external *ep, \
			const struct rt_db_internal *ip, \
			double local2mm, const struct db_i *dbip, \
			struct resource *resp )); \
	BU_EXTERN(void rt_##name##_ifree, (struct rt_db_internal *ip, \
			struct resource *resp)); \
	BU_EXTERN(int rt_##name##_describe, (struct bu_vls *str, \
			const struct rt_db_internal *ip, \
		        int verbose, \
			double mm2local, \
			struct resource *resp, \
			struct db_i *db_i)); \
	BU_EXTERN(int rt_##name##_xform, (struct rt_db_internal *op, \
			const mat_t mat, struct rt_db_internal *ip, \
			int free, struct db_i *dbip, \
			struct resource *resp)); \
	extern const struct bu_structparse rt_##name##_parse[];
#else
# define RT_DECLARE_INTERFACE(name)	\
	BU_EXTERN(int rt_/**/name/**/_prep, (struct soltab *stp, \
			struct rt_db_internal *ip, struct rt_i *rtip )); \
	BU_EXTERN(int rt_/**/name/**/_shot, (struct soltab *stp, struct xray *rp, \
			struct application *ap, struct seg *seghead )); \
	BU_EXTERN(int rt_/**/name/**/_piece_shot, (\
			struct rt_piecestate *psp, \
			struct rt_piecelist *plp, \
			struct soltab *stp, struct xray *rp, \
			struct application *ap, \
			struct seg *seghead )); \
	BU_EXTERN(void rt_/**/name/**/_piece_hitsegs, (\
			struct rt_piecestate *psp, \
			struct seg *seghead, \
			struct application *ap)); \
	BU_EXTERN(void rt_/**/name/**/_print, (const struct soltab *stp)); \
	BU_EXTERN(void rt_/**/name/**/_norm, (struct hit *hitp, \
			struct soltab *stp, struct xray *rp)); \
	BU_EXTERN(void rt_/**/name/**/_uv, (struct application *ap, \
			struct soltab *stp, struct hit *hitp, \
			struct uvcoord *uvp)); \
	BU_EXTERN(void rt_/**/name/**/_curve, (struct curvature *cvp, \
			struct hit *hitp, struct soltab *stp)); \
	BU_EXTERN(int rt_/**/name/**/_class, ()); \
	BU_EXTERN(void rt_/**/name/**/_free, (struct soltab *stp)); \
	BU_EXTERN(int rt_/**/name/**/_plot, (struct bu_list *vhead, \
			struct rt_db_internal *ip, \
			const struct rt_tess_tol *ttol, \
			const struct bn_tol *tol)); \
	BU_EXTERN(void rt_/**/name/**/_vshot, (struct soltab *stp[], \
			struct xray *rp[], \
			struct seg segp[], int n, struct application *ap )); \
	BU_EXTERN(int rt_/**/name/**/_tess, (struct nmgregion **r, \
			struct model *m, struct rt_db_internal *ip, \
			const struct rt_tess_tol *ttol, \
			const struct bn_tol *tol)); \
	BU_EXTERN(int rt_/**/name/**/_tnurb, (struct nmgregion **r, \
			struct model *m, struct rt_db_internal *ip, \
			const struct bn_tol *tol)); \
	BU_EXTERN(int rt_/**/name/**/_import5, (struct rt_db_internal *ip, \
			const struct bu_external *ep, const mat_t mat, const struct db_i *dbip, const int minor_type )); \
	BU_EXTERN(int rt_/**/name/**/_export5, (struct bu_external *ep, \
			const struct rt_db_internal *ip, \
			double local2mm, const struct db_i *dbip, const int minor_type )); \
	BU_EXTERN(int rt_/**/name/**/_import, (struct rt_db_internal *ip, \
			const struct bu_external *ep, const mat_t mat, const struct db_i *dbip )); \
	BU_EXTERN(int rt_/**/name/**/_export, (struct bu_external *ep, \
			const struct rt_db_internal *ip, \
			double local2mm, const struct db_i *dbip )); \
	BU_EXTERN(void rt_/**/name/**/_ifree, (struct rt_db_internal *ip, \
			struct resource *resp)); \
	BU_EXTERN(int rt_/**/name/**/_describe, (struct bu_vls *str, \
			const struct rt_db_internal *ip, int verbose, \
			double mm2local, struct resource *resp, \
						 struct db_i *db_i)); \
	BU_EXTERN(int rt_/**/name/**/_xform, (struct rt_db_internal *op, \
			const mat_t mat, struct rt_db_internal *ip, \
			int free, struct db_i *dbip, \
			struct resource *resp)); \
	extern const struct bu_structparse rt_/**/name/**/_parse[];
#endif

/* Note:  no semi-colons at the end of these, please */	
RT_DECLARE_INTERFACE(nul)

#define rt_tor_xform rt_generic_xform
RT_DECLARE_INTERFACE(tor)

#define rt_tgc_xform rt_generic_xform
RT_DECLARE_INTERFACE(tgc)

#define rt_ell_xform rt_generic_xform
RT_DECLARE_INTERFACE(ell)

#define rt_arb_xform rt_generic_xform
RT_DECLARE_INTERFACE(arb)

#define rt_ars_xform rt_generic_xform
RT_DECLARE_INTERFACE(ars)

RT_DECLARE_INTERFACE(hlf)

#define rt_rec_xform rt_generic_xform
RT_DECLARE_INTERFACE(rec)

#define rt_pg_xform rt_generic_xform
RT_DECLARE_INTERFACE(pg)

#define rt_nurb_xform rt_generic_xform
RT_DECLARE_INTERFACE(nurb)

#define rt_sph_xform rt_generic_xform
RT_DECLARE_INTERFACE(sph)

#define rt_ebm_xform rt_generic_xform
RT_DECLARE_INTERFACE(ebm)

#define rt_vol_xform rt_generic_xform
RT_DECLARE_INTERFACE(vol)

#define rt_arbn_xform rt_generic_xform
RT_DECLARE_INTERFACE(arbn)

#define rt_pipe_xform rt_generic_xform
RT_DECLARE_INTERFACE(pipe)

#define rt_part_xform rt_generic_xform
RT_DECLARE_INTERFACE(part)

#define rt_nmg_xform rt_generic_xform
RT_DECLARE_INTERFACE(nmg)

#define rt_rpc_xform rt_generic_xform
RT_DECLARE_INTERFACE(rpc)

#define rt_rhc_xform rt_generic_xform
RT_DECLARE_INTERFACE(rhc)

#define rt_epa_xform rt_generic_xform
RT_DECLARE_INTERFACE(epa)

#define rt_ehy_xform rt_generic_xform
RT_DECLARE_INTERFACE(ehy)

#define rt_eto_xform rt_generic_xform
RT_DECLARE_INTERFACE(eto)

#define rt_grp_xform rt_generic_xform
RT_DECLARE_INTERFACE(grp)

#define rt_hf_xform rt_generic_xform
RT_DECLARE_INTERFACE(hf)

#define rt_dsp_xform rt_generic_xform
RT_DECLARE_INTERFACE(dsp)

#define rt_sketch_xform rt_generic_xform
RT_DECLARE_INTERFACE(sketch)

RT_DECLARE_INTERFACE(extrude)

#define rt_submodel_xform rt_generic_xform
RT_DECLARE_INTERFACE(submodel)

#define rt_cline_xform rt_generic_xform
RT_DECLARE_INTERFACE(cline)

RT_DECLARE_INTERFACE(bot)

#define rt_superell_xform rt_generic_xform
RT_DECLARE_INTERFACE(superell)

/* from db5_comb.c */
int rt_comb_export5(
	struct bu_external		*ep,
	const struct rt_db_internal	*ip,
	double				local2mm,
	const struct db_i		*dbip,
	struct resource			*resp,
	const int			minor_type);
int rt_comb_import5(
	struct rt_db_internal	*ip,
	const struct bu_external *ep,
	const mat_t		mat,
	const struct db_i	*dbip,
	struct resource		*resp,
	const int		minor_type);

/* from db5_bin.c */
BU_EXTERN(int rt_binexpm_import5, (struct rt_db_internal * ip,
 			const struct bu_external *ep,
 			const mat_t mat,
			const struct db_i *dbip,
			      struct resource *resp,
			const int minor_type));
BU_EXTERN(int rt_binunif_import5, (struct rt_db_internal * ip,
 			const struct bu_external *ep,
 			const mat_t mat,
			const struct db_i *dbip,
			      struct resource *resp,
			const int minor_type));
BU_EXTERN(int rt_binmime_import5, (struct rt_db_internal * ip,
 			const struct bu_external *ep,
 			const mat_t mat,
			const struct db_i *dbip,
			      struct resource *resp,
			const int minor_type));

BU_EXTERN(int rt_binexpm_export5, (struct bu_external *ep,
			const struct rt_db_internal *ip,
			double local2mm,
			const struct db_i *dbip,
			struct resource *resp,
			const int minor_type));

BU_EXTERN(int rt_binunif_export5, (struct bu_external *ep,
			const struct rt_db_internal *ip,
			double local2mm,
			const struct db_i *dbip,
			struct resource *resp,
			const int minor_type));

BU_EXTERN(void rt_binunif_free, (struct rt_db_internal *ip));
BU_EXTERN(void rt_binunif_ifree, (struct rt_db_internal *ip,
		struct resource *resp));
BU_EXTERN(int rt_binunif_describe, (struct bu_vls *str,
		const struct rt_db_internal *ip, int verbose,
		double mm2local, struct resource *resp, struct db_i *db_i));
BU_EXTERN( void rt_binunif_make, (const struct rt_functab *ftp,
				  struct rt_db_internal	*intern,
				  double diameter ) );
BU_EXTERN( int rt_binunif_tclget, (Tcl_Interp *interp,
				   const struct rt_db_internal *intern,
				   const char *attr ) );
BU_EXTERN(int rt_binunif_tcladjust, (Tcl_Interp *interp,
				     struct rt_db_internal *intern,
				     int argc,
				     char **argv,
				     struct resource *resp ) );

/* from tcl.c */
BU_EXTERN(int rt_comb_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char	*item));
BU_EXTERN(int rt_comb_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));
BU_EXTERN(int rt_comb_tclform, (const struct rt_functab *ftp,
		Tcl_Interp *interp));
BU_EXTERN(void rt_comb_make, (const struct rt_functab *ftp,
		struct rt_db_internal *intern, double diameter));

/* generics for solid */
BU_EXTERN(int rt_parsetab_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_parsetab_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *));
BU_EXTERN(int rt_parsetab_tclform, (const struct rt_functab *ftp,
		Tcl_Interp *interp));
BU_EXTERN(void rt_generic_make, (const struct rt_functab *ftp,
		struct rt_db_internal *intern, double diameter));

/* EBM solid */
BU_EXTERN(int rt_ebm_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_ebm_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));
BU_EXTERN(int rt_ebm_tclform, (const struct rt_functab *ftp,
		Tcl_Interp *interp));
BU_EXTERN(void rt_ebm_make, (const struct rt_functab *,	struct rt_db_internal *,
			     double /*diameter*/));

/* ARBN solid */
BU_EXTERN(int rt_arbn_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_arbn_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));

/* ARS solid */
BU_EXTERN(int rt_ars_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_ars_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));

/* DSP solid */
extern int rt_dsp_tclget(Tcl_Interp *interp,
			 const struct rt_db_internal *intern,
			 const char		     *attr);

extern int rt_dsp_tcladjust(Tcl_Interp *interp,
			    struct rt_db_internal *intern,
			    int		argc,
			    char	**argv,
			    struct resource *resp);
BU_EXTERN(void rt_dsp_make, (const struct rt_functab *,	struct rt_db_internal *,
			     double /*diameter*/));

/* PIPE solid */
BU_EXTERN(int rt_pipe_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_pipe_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));

/* BSPLINE solid */
BU_EXTERN(int rt_nurb_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_nurb_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));

/* NMG solid */
BU_EXTERN(int rt_nmg_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_nmg_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));
BU_EXTERN(void rt_nmg_make, (const struct rt_functab *,	struct rt_db_internal *,
			     double /*diameter*/));

/* BOT solid */
BU_EXTERN(int rt_bot_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_bot_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));
BU_EXTERN(int rt_bot_tclform, (const struct rt_functab *ftp, Tcl_Interp *interp));

/* SKETCH */
BU_EXTERN(int rt_sketch_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_sketch_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));
BU_EXTERN(int rt_sketch_tclform, (const struct rt_functab *ftp, Tcl_Interp *interp));

/* CLINE */
BU_EXTERN(int rt_cline_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_cline_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));
BU_EXTERN(int rt_cline_tclform, (const struct rt_functab *ftp, Tcl_Interp *interp));

/* EXTRUSION */
BU_EXTERN(int rt_extrude_tclget, (Tcl_Interp *interp,
		const struct rt_db_internal *intern, const char *attr));
BU_EXTERN(int rt_extrude_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv,
		struct resource *resp));
BU_EXTERN(int rt_extrude_tclform, (const struct rt_functab *ftp, Tcl_Interp *interp));

/* XXX from shoot.c / vshoot.c */
BU_EXTERN(void rt_vstub, (struct soltab *stp[], struct xray *rp[],
	struct seg segp[], int n, struct application *ap ));

/* From here in table.c */
BU_EXTERN(int rt_generic_xform, (struct rt_db_internal *op, 
	const mat_t mat, struct rt_db_internal *ip,
	int free, struct db_i *dbip, struct resource *resp));

/* Stub Tcl interfaces */
#if __STDC__
int rt_nul_tclget(Tcl_Interp *interp, const struct rt_db_internal *intern, const char *attr)  {
	Tcl_AppendResult(interp, "rt_nul_tclget", (char *)NULL);
	return TCL_ERROR;
}
int rt_nul_tcladjust(Tcl_Interp *interp, struct rt_db_internal *intern, int argc, char **argv, struct resource *resp)  {
	RT_CK_RESOURCE(resp);
	Tcl_AppendResult(interp, "rt_nul_tcladjust", (char *)NULL);
	return TCL_ERROR;
}
int rt_nul_tclform(const struct rt_functab *ftp, Tcl_Interp *interp) {
	Tcl_AppendResult(interp, "rt_nul_tclform", (char *)NULL);
	return TCL_ERROR;
}
void rt_nul_make(const struct rt_functab *ftp, struct rt_db_internal *intern, double diameter) {
	bu_bomb("rt_nul_make invoked\n");
}
#else
int rt_nul_tclget(interp, intern, attr)
Tcl_Interp *interp;
const struct rt_db_internal *intern;
const char *attr;
{
	Tcl_AppendResult(interp, "rt_nul_tclget", (char *)NULL);
	return TCL_ERROR;
}
int rt_nul_tcladjust(interp, intern, argc, argv)
Tcl_Interp *interp;
struct rt_db_internal *intern;
int argc;
char **argv;
{
	Tcl_AppendResult(interp, "rt_nul_tcladjust", (char *)NULL);
	return TCL_ERROR;
}
int rt_nul_tclform(ftp, interp)
const struct rt_functab *ftp;
Tcl_Interp *interp;
{
	Tcl_AppendResult(interp, "rt_nul_tclform", (char *)NULL);
	return TCL_ERROR;
}
void rt_nul_make(ftp, intern, diameter)
const struct rt_functab *ftp;
struct rt_db_internal *intern;
double diameter;
{
	bu_bomb("rt_nul_make invoked\n");
}
#endif

const struct rt_functab rt_functab[] = {
	{RT_FUNCTAB_MAGIC, "ID_NULL", "NULL",
		0,		/* 0: unused, for sanity checking. */
		rt_nul_prep,	rt_nul_shot,	rt_nul_print, 	rt_nul_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
	 	rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,	rt_nul_tnurb,
		rt_nul_import5, rt_nul_export5,
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,rt_nul_xform,	rt_nul_parse,
		0,				0,
		rt_nul_tclget,	rt_nul_tcladjust, rt_nul_tclform,
		rt_nul_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_TOR", "tor",
		1,		/* 1 */
		rt_tor_prep,	rt_tor_shot,	rt_tor_print,	rt_tor_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_tor_uv,	rt_tor_curve,	rt_tor_class,	rt_tor_free,
		rt_tor_plot,	rt_tor_vshot,	rt_tor_tess,	rt_nul_tnurb,
		rt_tor_import5, rt_tor_export5,
		rt_tor_import,	rt_tor_export,	rt_tor_ifree,
		rt_tor_describe,rt_tor_xform,	rt_tor_parse,
		sizeof(struct rt_tor_internal),	RT_TOR_INTERNAL_MAGIC,	
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_TGC", "tgc",
		1,		/* 2 */
		rt_tgc_prep,	rt_tgc_shot,	rt_tgc_print,	rt_tgc_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_tgc_uv,	rt_tgc_curve,	rt_tgc_class,	rt_tgc_free,
		rt_tgc_plot,	rt_tgc_vshot,	rt_tgc_tess,	rt_tgc_tnurb,
		rt_tgc_import5, rt_tgc_export5,
		rt_tgc_import,	rt_tgc_export,	rt_tgc_ifree,
		rt_tgc_describe,rt_tgc_xform,	rt_tgc_parse,
		sizeof(struct rt_tgc_internal), RT_TGC_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_ELL", "ell",
		1,		/* 3 */
		rt_ell_prep,	rt_ell_shot,	rt_ell_print,	rt_ell_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_ell_uv,	rt_ell_curve,	rt_ell_class,	rt_ell_free,
		rt_ell_plot,	rt_ell_vshot,	rt_ell_tess,	rt_ell_tnurb,
		rt_ell_import5, rt_ell_export5,
		rt_ell_import,	rt_ell_export,	rt_ell_ifree,
		rt_ell_describe,rt_ell_xform,	rt_ell_parse,
		sizeof(struct rt_ell_internal), RT_ELL_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_ARB8", "arb8",
		0,		/* 4 */
		rt_arb_prep,	rt_arb_shot,	rt_arb_print,	rt_arb_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_arb_uv,	rt_arb_curve,	rt_arb_class,	rt_arb_free,
		rt_arb_plot,	rt_arb_vshot,	rt_arb_tess,	rt_arb_tnurb,
		rt_arb_import5, rt_arb_export5,
		rt_arb_import,	rt_arb_export,	rt_arb_ifree,
		rt_arb_describe,rt_arb_xform,	rt_arb_parse,
		sizeof(struct rt_arb_internal), RT_ARB_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_ARS", "ars",
		1,		/* 5 */
		rt_ars_prep,	rt_bot_shot,	rt_ars_print,	rt_bot_norm,
		rt_bot_piece_shot, rt_bot_piece_hitsegs,
		rt_ars_uv,	rt_bot_curve,	rt_bot_class,	rt_bot_free,
		rt_ars_plot,	rt_vstub,	rt_ars_tess,	rt_nul_tnurb,
		rt_ars_import5, rt_ars_export5,
		rt_ars_import,	rt_ars_export,	rt_ars_ifree,
		rt_ars_describe,rt_ars_xform,	NULL,
		sizeof(struct rt_ars_internal), RT_ARS_INTERNAL_MAGIC,
		rt_ars_tclget, rt_ars_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_HALF", "half",
		0,		/* 6 */
		rt_hlf_prep,	rt_hlf_shot,	rt_hlf_print,	rt_hlf_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_hlf_uv,	rt_hlf_curve,	rt_hlf_class,	rt_hlf_free,
		rt_hlf_plot,	rt_hlf_vshot,	rt_hlf_tess,	rt_nul_tnurb,
		rt_hlf_import5, rt_hlf_export5,
		rt_hlf_import,	rt_hlf_export,	rt_hlf_ifree,
		rt_hlf_describe,rt_generic_xform, rt_hlf_parse,
		sizeof(struct rt_half_internal), RT_HALF_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_REC", "rec",
		1,		/* 7 */
		rt_rec_prep,	rt_rec_shot,	rt_rec_print,	rt_rec_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_rec_uv,	rt_rec_curve,	rt_rec_class,	rt_rec_free,
		rt_tgc_plot,	rt_rec_vshot,	rt_tgc_tess,	rt_nul_tnurb,
		rt_tgc_import5, rt_tgc_export5,
		rt_tgc_import,	rt_tgc_export,	rt_tgc_ifree,
		rt_tgc_describe,rt_rec_xform,	rt_tgc_parse,
		sizeof(struct rt_tgc_internal), RT_TGC_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_POLY", "poly",
		1,		/* 8 */
		rt_pg_prep,	rt_pg_shot,	rt_pg_print,	rt_pg_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_pg_uv,	rt_pg_curve,	rt_pg_class,	rt_pg_free,
		rt_pg_plot,	rt_vstub,	rt_pg_tess,	rt_nul_tnurb,
		rt_nul_import5, rt_nul_export5,
		rt_pg_import,	rt_pg_export,	rt_pg_ifree,
		rt_pg_describe, rt_pg_xform,	NULL,
		sizeof(struct rt_pg_internal), RT_PG_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_BSPLINE", "bspline",
		1,		/* 9 */
		rt_nurb_prep,	rt_nurb_shot,	rt_nurb_print,	rt_nurb_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_nurb_uv,	rt_nurb_curve,	rt_nurb_class,	rt_nurb_free,
		rt_nurb_plot,	rt_vstub,	rt_nurb_tess,	rt_nul_tnurb,
		rt_nurb_import5, rt_nurb_export5,
		rt_nurb_import,	rt_nurb_export,	rt_nurb_ifree,
		rt_nurb_describe,rt_nurb_xform,	NULL,
		sizeof(struct rt_nurb_internal), RT_NURB_INTERNAL_MAGIC,
		rt_nurb_tclget, rt_nurb_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_SPH", "sph",
		0,		/* 10 */
		rt_sph_prep,	rt_sph_shot,	rt_sph_print,	rt_sph_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_sph_uv,	rt_sph_curve,	rt_sph_class,	rt_sph_free,
		rt_ell_plot,	rt_sph_vshot,	rt_ell_tess,	rt_ell_tnurb,
		rt_ell_import5, rt_ell_export5,
		rt_ell_import,	rt_ell_export,	rt_ell_ifree,
		rt_ell_describe,rt_sph_xform,	rt_ell_parse,
		sizeof(struct rt_ell_internal), RT_ELL_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_NMG", "nmg",
		1,		/* 11 */
		rt_nmg_prep,	rt_nmg_shot,	rt_nmg_print,	rt_nmg_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_nmg_uv,	rt_nmg_curve,	rt_nmg_class,	rt_nmg_free,
		rt_nmg_plot,	rt_nmg_vshot,	rt_nmg_tess,	rt_nul_tnurb,
		rt_nmg_import5, rt_nmg_export5,
		rt_nmg_import,	rt_nmg_export,	rt_nmg_ifree,
		rt_nmg_describe,rt_nmg_xform,	NULL,
		sizeof(struct model), NMG_MODEL_MAGIC,
		rt_nmg_tclget, rt_nmg_tcladjust, rt_parsetab_tclform,
		rt_nmg_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_EBM", "ebm",
		1,		/* 12 */
		rt_ebm_prep,	rt_ebm_shot,	rt_ebm_print,	rt_ebm_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_ebm_uv,	rt_ebm_curve,	rt_ebm_class,	rt_ebm_free,
		rt_ebm_plot,	rt_vstub,	rt_ebm_tess,	rt_nul_tnurb,
		rt_ebm_import5, rt_ebm_export5,
		rt_ebm_import,	rt_ebm_export,	rt_ebm_ifree,
		rt_ebm_describe,rt_ebm_xform,	rt_ebm_parse,
		sizeof(struct rt_ebm_internal), RT_EBM_INTERNAL_MAGIC,
		rt_ebm_tclget, rt_ebm_tcladjust, rt_ebm_tclform,
		rt_ebm_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_VOL", "vol",
		1,		/* 13 */
		rt_vol_prep,	rt_vol_shot,	rt_vol_print,	rt_vol_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_vol_uv,	rt_vol_curve,	rt_vol_class,	rt_vol_free,
		rt_vol_plot,	rt_vstub,	rt_vol_tess,	rt_nul_tnurb,
		rt_vol_import5, rt_vol_export5,
		rt_vol_import,	rt_vol_export,	rt_vol_ifree,
		rt_vol_describe,rt_vol_xform,	rt_vol_parse,
		sizeof(struct rt_vol_internal), RT_VOL_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_ARBN", "arbn",
		0,		/* 14 */
		rt_arbn_prep,	rt_arbn_shot,	rt_arbn_print,	rt_arbn_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_arbn_uv,	rt_arbn_curve,	rt_arbn_class,	rt_arbn_free,
		rt_arbn_plot,	rt_arbn_vshot,	rt_arbn_tess,	rt_nul_tnurb,
		rt_arbn_import5, rt_arbn_export5,
		rt_arbn_import,	rt_arbn_export,	rt_arbn_ifree,
		rt_arbn_describe,rt_arbn_xform,	NULL,
		sizeof(struct rt_arbn_internal), RT_ARBN_INTERNAL_MAGIC,
		rt_arbn_tclget, rt_arbn_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_PIPE", "pipe",
		1,		/* 15 */
		rt_pipe_prep,	rt_pipe_shot,	rt_pipe_print,	rt_pipe_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_pipe_uv,	rt_pipe_curve,	rt_pipe_class,	rt_pipe_free,
		rt_pipe_plot,	rt_pipe_vshot,	rt_pipe_tess,	rt_nul_tnurb,
		rt_pipe_import5, rt_pipe_export5,
		rt_pipe_import,	rt_pipe_export,	rt_pipe_ifree,
		rt_pipe_describe,rt_pipe_xform,	NULL,
		sizeof(struct rt_pipe_internal), RT_PIPE_INTERNAL_MAGIC,
		rt_pipe_tclget,
		rt_pipe_tcladjust,
		rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_PARTICLE", "part",
		0,		/* 16 */
		rt_part_prep,	rt_part_shot,	rt_part_print,	rt_part_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_part_uv,	rt_part_curve,	rt_part_class,	rt_part_free,
		rt_part_plot,	rt_part_vshot,	rt_part_tess,	rt_nul_tnurb,
		rt_part_import5, rt_part_export5,
		rt_part_import,	rt_part_export,	rt_part_ifree,
		rt_part_describe,rt_part_xform,	rt_part_parse,
		sizeof(struct rt_part_internal), RT_PART_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_RPC", "rpc",
		0,		/* 17 */
		rt_rpc_prep,	rt_rpc_shot,	rt_rpc_print,	rt_rpc_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_rpc_uv,	rt_rpc_curve,	rt_rpc_class,	rt_rpc_free,
		rt_rpc_plot,	rt_rpc_vshot,	rt_rpc_tess,	rt_nul_tnurb,
		rt_rpc_import5, rt_rpc_export5,
		rt_rpc_import,	rt_rpc_export,	rt_rpc_ifree,
		rt_rpc_describe,rt_rpc_xform,	rt_rpc_parse,
		sizeof(struct rt_rpc_internal), RT_RPC_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_RHC", "rhc",
		0,		/* 18 */
		rt_rhc_prep,	rt_rhc_shot,	rt_rhc_print,	rt_rhc_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_rhc_uv,	rt_rhc_curve,	rt_rhc_class,	rt_rhc_free,
		rt_rhc_plot,	rt_rhc_vshot,	rt_rhc_tess,	rt_nul_tnurb,
		rt_rhc_import5, rt_rhc_export5,
		rt_rhc_import,	rt_rhc_export,	rt_rhc_ifree,
		rt_rhc_describe,rt_rhc_xform,	rt_rhc_parse,
		sizeof(struct rt_rhc_internal), RT_RHC_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_EPA", "epa",
		0,		/* 19 */
		rt_epa_prep,	rt_epa_shot,	rt_epa_print,	rt_epa_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_epa_uv,	rt_epa_curve,	rt_epa_class,	rt_epa_free,
		rt_epa_plot,	rt_epa_vshot,	rt_epa_tess,	rt_nul_tnurb,
		rt_epa_import5, rt_epa_export5,
		rt_epa_import,	rt_epa_export,	rt_epa_ifree,
		rt_epa_describe,rt_epa_xform,	rt_epa_parse,
		sizeof(struct rt_epa_internal), RT_EPA_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_EHY", "ehy",
		0,		/* 20 */
		rt_ehy_prep,	rt_ehy_shot,	rt_ehy_print,	rt_ehy_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_ehy_uv,	rt_ehy_curve,	rt_ehy_class,	rt_ehy_free,
		rt_ehy_plot,	rt_ehy_vshot,	rt_ehy_tess,	rt_nul_tnurb,
		rt_ehy_import5, rt_ehy_export5,
		rt_ehy_import,	rt_ehy_export,	rt_ehy_ifree,
		rt_ehy_describe,rt_ehy_xform,	rt_ehy_parse,
		sizeof(struct rt_ehy_internal), RT_EHY_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_ETO", "eto",
		1,		/* 21 */
		rt_eto_prep,	rt_eto_shot,	rt_eto_print,	rt_eto_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_eto_uv,	rt_eto_curve,	rt_eto_class,	rt_eto_free,
		rt_eto_plot,	rt_eto_vshot,	rt_eto_tess,	rt_nul_tnurb,
		rt_eto_import5, rt_eto_export5,
		rt_eto_import,	rt_eto_export,	rt_eto_ifree,
		rt_eto_describe,rt_eto_xform,	rt_eto_parse,
		sizeof(struct rt_eto_internal), RT_ETO_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_GRIP", "grip",
		1,		/* 22 */
		rt_grp_prep,	rt_grp_shot,	rt_grp_print,	rt_grp_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_grp_uv,	rt_grp_curve,	rt_grp_class,	rt_grp_free,
		rt_grp_plot,	rt_grp_vshot,	rt_grp_tess,	rt_nul_tnurb,
		rt_grp_import5, rt_grp_export5,
		rt_grp_import,	rt_grp_export,	rt_grp_ifree,
		rt_grp_describe,rt_grp_xform,	rt_grp_parse,
		sizeof(struct rt_grip_internal), RT_GRIP_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
	        NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_JOINT", "joint",
		0,		/* 23 -- XXX unimplemented */
		rt_nul_prep,	rt_nul_shot,	rt_nul_print,	rt_nul_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,	rt_nul_tnurb,
		rt_nul_import5, rt_nul_export5,
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,rt_nul_xform,	NULL,
		0,				0,
		rt_nul_tclget,	rt_nul_tcladjust, rt_nul_tclform,
		rt_nul_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_HF", "hf",
		0,		/* 24 */
		rt_hf_prep,	rt_hf_shot,	rt_hf_print,	rt_hf_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_hf_uv,	rt_hf_curve,	rt_hf_class,	rt_hf_free,
		rt_hf_plot,	rt_vstub,	rt_hf_tess,	rt_nul_tnurb,
		rt_hf_import5,	rt_hf_export5,
		rt_hf_import,	rt_hf_export,	rt_hf_ifree,
		rt_hf_describe,rt_hf_xform,	rt_hf_parse,
		sizeof(struct rt_hf_internal), RT_HF_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_DSP", "dsp",
		1,		/* 25 Displacement Map (alt. height field) */
		rt_dsp_prep,	rt_dsp_shot,	rt_dsp_print,	rt_dsp_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_dsp_uv,	rt_dsp_curve,	rt_dsp_class,	rt_dsp_free,
		rt_dsp_plot,	rt_vstub,	rt_nul_tess,	rt_nul_tnurb,
		rt_dsp_import5, rt_dsp_export5,
		rt_dsp_import,	rt_dsp_export,	rt_dsp_ifree,
		rt_dsp_describe,rt_dsp_xform,	rt_dsp_parse,
		sizeof(struct rt_dsp_internal), RT_DSP_INTERNAL_MAGIC,
	        rt_dsp_tclget,  rt_dsp_tcladjust, rt_nul_tclform, 
	        rt_dsp_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_SKETCH", "sketch",
		0,		/* 26 2D sketch */
		rt_sketch_prep,	rt_sketch_shot,	rt_sketch_print, rt_sketch_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_sketch_uv,	rt_sketch_curve, rt_sketch_class,rt_sketch_free,
		rt_sketch_plot,	rt_vstub,	rt_nul_tess,	rt_nul_tnurb,
		rt_sketch_import5, rt_sketch_export5,
		rt_sketch_import, rt_sketch_export, rt_sketch_ifree,
		rt_sketch_describe,rt_sketch_xform, NULL,
		sizeof(struct rt_sketch_internal), RT_SKETCH_INTERNAL_MAGIC,
		rt_sketch_tclget, rt_sketch_tcladjust, rt_sketch_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_EXTRUDE", "extrude",
		1,		/* 27 Solid of extrusion */
		rt_extrude_prep,	rt_extrude_shot,	rt_extrude_print,	rt_extrude_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_extrude_uv,		rt_extrude_curve,	rt_extrude_class,	rt_extrude_free,
		rt_extrude_plot,	rt_extrude_vshot,	rt_extrude_tess,	rt_nul_tnurb,
		rt_extrude_import5, rt_extrude_export5,
		rt_extrude_import,	rt_extrude_export,	rt_extrude_ifree,
		rt_extrude_describe,rt_extrude_xform, NULL,
		sizeof(struct rt_extrude_internal), RT_EXTRUDE_INTERNAL_MAGIC,
		rt_extrude_tclget, rt_extrude_tcladjust, rt_extrude_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_SUBMODEL", "submodel",
		1,		/* 28 Instanced submodel */
		rt_submodel_prep,	rt_submodel_shot,	rt_submodel_print,	rt_submodel_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_submodel_uv,		rt_submodel_curve,	rt_submodel_class,	rt_submodel_free,
		rt_submodel_plot,	rt_vstub,		rt_submodel_tess,	rt_nul_tnurb,
		rt_submodel_import5, rt_submodel_export5,
		rt_submodel_import,	rt_submodel_export,	rt_submodel_ifree,
		rt_submodel_describe,	rt_submodel_xform,	rt_submodel_parse,
		sizeof(struct rt_submodel_internal), RT_SUBMODEL_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_CLINE", "cline",
		0,		/* 29 Fastgen cline solid */
		rt_cline_prep,	rt_cline_shot,	rt_cline_print,	rt_cline_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_cline_uv,	rt_cline_curve,	rt_cline_class,	rt_cline_free,
		rt_cline_plot,	rt_cline_vshot,	rt_cline_tess,	rt_cline_tnurb,
		rt_cline_import5, rt_cline_export5,
		rt_cline_import,	rt_cline_export,	rt_cline_ifree,
		rt_cline_describe,rt_cline_xform,	rt_cline_parse,
		sizeof(struct rt_cline_internal), RT_CLINE_INTERNAL_MAGIC,
		rt_cline_tclget, rt_cline_tcladjust, rt_cline_tclform,
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_BOT", "bot",
		0,		/* 30  Bag o' Triangles */
		rt_bot_prep,	rt_bot_shot,	rt_bot_print,	rt_bot_norm,
		rt_bot_piece_shot, rt_bot_piece_hitsegs,
		rt_bot_uv,	rt_bot_curve,	rt_bot_class,	rt_bot_free,
		rt_bot_plot,	rt_bot_vshot,	rt_bot_tess,	rt_bot_tnurb,
		rt_bot_import5, rt_bot_export5,
		rt_bot_import,	rt_bot_export,	rt_bot_ifree,
		rt_bot_describe,rt_bot_xform,	NULL,
		sizeof(struct rt_bot_internal), RT_BOT_INTERNAL_MAGIC,
		rt_bot_tclget, rt_bot_tcladjust, rt_bot_tclform,
		NULL,
	},

	/* ID_MAX_SOLID.  Add new solids _above_ this point */

	{RT_FUNCTAB_MAGIC, "ID_COMBINATION", "comb",
		0,
		rt_nul_prep,	rt_nul_shot,	rt_nul_print,	rt_nul_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,	rt_nul_tnurb,
		rt_comb_import5, rt_comb_export5,
		rt_comb_import4, rt_comb_export4, rt_comb_ifree,
		rt_comb_describe,rt_generic_xform, NULL,
		0,				0,
		rt_comb_tclget,	rt_comb_tcladjust, rt_comb_tclform,
		rt_comb_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_BINEXPM", "binexpm",
		0,
		rt_nul_prep,	rt_nul_shot,	rt_nul_print,	rt_nul_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,	rt_nul_tnurb,
		rt_binexpm_import5,
	 rt_nul_export5,
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,rt_generic_xform, NULL,
		0,				0,
		rt_nul_tclget,	rt_nul_tcladjust, rt_nul_tclform,
		rt_nul_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_BINUNIF", "binunif",
		0,
		rt_nul_prep,	rt_nul_shot,	rt_nul_print,	rt_nul_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,	rt_nul_tnurb,
		rt_binunif_import5,
	 rt_binunif_export5,
		rt_nul_import,	rt_nul_export,	rt_binunif_ifree,
		rt_binunif_describe, rt_generic_xform, NULL,
		0,				0,
		rt_binunif_tclget,	rt_binunif_tcladjust, rt_nul_tclform,
		rt_binunif_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_BINMIME", "binmime",
		0,
		rt_nul_prep,	rt_nul_shot,	rt_nul_print,	rt_nul_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,	rt_nul_tnurb,
		rt_binmime_import5, rt_nul_export5,
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,rt_generic_xform, NULL,
		0,				0,
		rt_nul_tclget,	rt_nul_tcladjust, rt_nul_tclform,
		rt_nul_make,
	},

	{RT_FUNCTAB_MAGIC, "ID_SUPERELL", "superell",
		1,		/* 35 but "should" be 31 Superquadratic Ellipsoid  */
		rt_superell_prep,	rt_superell_shot,	rt_superell_print,	rt_superell_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_superell_uv,	rt_superell_curve,	rt_superell_class,	rt_superell_free,
		rt_superell_plot,	rt_superell_vshot,	rt_superell_tess,	rt_superell_tnurb,
		rt_superell_import5, rt_superell_export5,
		rt_superell_import,	rt_superell_export,	rt_superell_ifree,
		rt_superell_describe,rt_superell_xform,	rt_superell_parse,
		sizeof(struct rt_superell_internal), RT_SUPERELL_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
	},

	{0L, ">ID_MAXIMUM", ">id_max",
		0,		/* this entry for sanity only */
		rt_nul_prep,	rt_nul_shot,	rt_nul_print,	rt_nul_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,	rt_nul_tnurb,
		rt_nul_import5, rt_nul_export5,
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,rt_nul_xform,	NULL,
		0,				0,
		rt_nul_tclget,	rt_nul_tcladjust, rt_nul_tclform,
		rt_nul_make,
	}
};
const int rt_nfunctab = sizeof(rt_functab)/sizeof(struct rt_functab);

/*
 *  Hooks for unimplemented routines
 */
#if __STDC__
#define DEF(func,args)	func BU_ARGS(args) { \
	bu_log(#func " unimplemented\n"); return; }
#define IDEF(func,args)	func BU_ARGS(args) { \
	bu_log(#func " unimplemented\n"); return(0); }
#define NDEF(func,args)	func BU_ARGS(args) { \
	bu_log(#func " unimplemented\n"); return(-1); }
#else
#define DEF(func,args)	func BU_ARGS(args) { \
	bu_log("func unimplemented\n"); return; }
#define IDEF(func,args)	func BU_ARGS(args) { \
	bu_log("func unimplemented\n"); return(0); }
#define NDEF(func,args)	func BU_ARGS(args) { \
	bu_log("func unimplemented\n"); return(-1); }
#endif

int IDEF(rt_nul_prep,(struct soltab *stp,
			struct rt_db_internal *ip,
			struct rt_i *rtip))
int IDEF(rt_nul_shot,(struct soltab *stp,
			struct xray *rp,
			struct application *ap,
			struct seg *seghead))
int IDEF(rt_nul_piece_shot,(struct rt_piecestate *psp,
			struct rt_piecelist *plp,
			double dist_corr,
			struct xray *rp,
			struct application *ap,
			struct seg *seghead))
void DEF(rt_nul_piece_hitsegs,(struct rt_piecestate *psp,
			struct seg *seghead,
			struct application *ap))
void DEF(rt_nul_print,(const struct soltab *stp))
void DEF(rt_nul_norm,(struct hit *hitp,
			struct soltab *stp,
			struct xray *rp))
void DEF(rt_nul_uv,(struct application *ap,
			struct soltab *stp,
			struct hit *hitp,
			struct uvcoord *uvp))
void DEF(rt_nul_curve,(struct curvature *cvp,
			struct hit *hitp,
			struct soltab *stp))
int IDEF(rt_nul_class,())
void DEF(rt_nul_free,(struct soltab *stp))
int NDEF(rt_nul_plot,(struct bu_list *vhead,
			struct rt_db_internal *ip,
			const struct rt_tess_tol *ttol,
			const struct bn_tol *tol))
void DEF(rt_nul_vshot,(struct soltab *stp[],
			struct xray *rp[],
			struct seg segp[], int n,
			struct application *ap))
int NDEF(rt_nul_tess,(struct nmgregion **r,
			struct model *m,
			struct rt_db_internal *ip,
			const struct rt_tess_tol *ttol,
			const struct bn_tol *tol))
int NDEF(rt_nul_tnurb,(struct nmgregion **r,
			struct model *m,
			struct rt_db_internal *ip,
			const struct bn_tol *tol))
int NDEF(rt_nul_import5,(struct rt_db_internal *ip,
			const struct bu_external *ep,
			const mat_t mat, const struct db_i *dbip,
			struct resource *resp,
			 const int minot_type))
int NDEF(rt_nul_export5,(struct bu_external *ep,
			const struct rt_db_internal *ip,
			double local2mm, const struct db_i *dbip,
			struct resource *resp,
			const int minor_type ))
int NDEF(rt_nul_import,(struct rt_db_internal *ip,
			const struct bu_external *ep,
			const mat_t mat, const struct db_i *dbip,
			struct resource *resp ))
int NDEF(rt_nul_export,(struct bu_external *ep,
			const struct rt_db_internal *ip,
			double local2mm, const struct db_i *dbip,
			struct resource *resp ))
void DEF(rt_nul_ifree,(struct rt_db_internal *ip, struct resource *resp))
int NDEF(rt_nul_describe,(struct bu_vls *str,
			const struct rt_db_internal *ip,
			int verbose, double mm2local, struct resource *resp,
			  struct db_i *db_i))
int NDEF(rt_nul_xform, (struct rt_db_internal *op,
			const mat_t mat, struct rt_db_internal *ip,
			int free, struct db_i *dbip, struct resource *resp))

/* Map for database solidrec objects to internal objects */
static char idmap[] = {
	ID_NULL,	/* undefined, 0 */
	ID_NULL,	/* RPP	1 axis-aligned rectangular parallelopiped */
	ID_NULL,	/* BOX	2 arbitrary rectangular parallelopiped */
	ID_NULL,	/* RAW	3 right-angle wedge */
	ID_NULL,	/* ARB4	4 tetrahedron */
	ID_NULL,	/* ARB5	5 pyramid */
	ID_NULL,	/* ARB6	6 extruded triangle */
	ID_NULL,	/* ARB7	7 weird 7-vertex shape */
	ID_NULL,	/* ARB8	8 hexahedron */
	ID_NULL,	/* ELL	9 ellipsoid */
	ID_NULL,	/* ELL1	10 another ellipsoid ? */
	ID_NULL,	/* SPH	11 sphere */
	ID_NULL,	/* RCC	12 right circular cylinder */
	ID_NULL,	/* REC	13 right elliptic cylinder */
	ID_NULL,	/* TRC	14 truncated regular cone */
	ID_NULL,	/* TEC	15 truncated elliptic cone */
	ID_TOR,		/* TOR	16 toroid */
	ID_NULL,	/* TGC	17 truncated general cone */
	ID_TGC,		/* GENTGC 18 supergeneralized TGC; internal form */
	ID_ELL,		/* GENELL 19: V,A,B,C */
	ID_ARB8,	/* GENARB8 20:  V, and 7 other vectors */
	ID_NULL,	/* HACK: ARS 21: arbitrary triangular-surfaced polyhedron */
	ID_NULL,	/* HACK: ARSCONT 22: extension record type for ARS solid */
	ID_NULL,	/* ELLG 23:  gift-only */
	ID_HALF,	/* HALFSPACE 24:  halfspace */
	ID_NULL,	/* HACK: SPLINE 25 */
	ID_RPC,		/* HACK: RPC 26: right parabolic cylinder */
	ID_RHC,		/* HACK: RHC 27: right hyperbolic cylinder */
	ID_EPA,		/* HACK: EPA 28: elliptical paraboloid */
	ID_EHY,		/* HACK: EHY 29: elliptical hyperboloid */
	ID_ETO,		/* HACK: ETO 29: elliptical torus */
	ID_GRIP,	/* HACK: GRP 30: grip pseudo solid */
	ID_NULL		/* n+1 */
};

/*
 *			R T _ I D _ S O L I D
 *
 *  Given a database record, determine the proper rt_functab subscript.
 *  Used by MGED as well as internally to librt.
 *
 *  Returns ID_xxx if successful, or ID_NULL upon failure.
 */
int
rt_id_solid(struct bu_external *ep)
{
	register union record *rec;
	register int id;

	BU_CK_EXTERNAL( ep );
	rec = (union record *)ep->ext_buf;

	switch( rec->u_id )  {
	case ID_SOLID:
		id = idmap[(int)(rec->s.s_type)];
		break;
	case ID_ARS_A:
		id = ID_ARS;
		break;
	case ID_P_HEAD:
		id = ID_POLY;
		break;
	case ID_BSOLID:
		id = ID_BSPLINE;
		break;
	case DBID_STRSOL:
		/* XXX This really needs to be some kind of table */
		if( strcmp( rec->ss.ss_keyword, "ebm" ) == 0 )  {
			id = ID_EBM;
			break;
		} else if( strcmp( rec->ss.ss_keyword, "vol" ) == 0 )  {
			id = ID_VOL;
			break;
		} else if( strcmp( rec->ss.ss_keyword, "hf" ) == 0 )  {
			id = ID_HF;
			break;
		} else if( strcmp( rec->ss.ss_keyword, "dsp" ) == 0 )  {
			id = ID_DSP;
			break;
		} else if( strcmp( rec->ss.ss_keyword, "submodel" ) == 0 )  {
			id = ID_SUBMODEL;
			break;
		}
		bu_log("rt_id_solid(%s):  String solid type '%s' unknown\n",
			rec->ss.ss_name, rec->ss.ss_keyword );
		id = ID_NULL;		/* BAD */
		break;
	case DBID_ARBN:
		id = ID_ARBN;
		break;
	case DBID_PIPE:
		id = ID_PIPE;
		break;
	case DBID_PARTICLE:
		id = ID_PARTICLE;
		break;
	case DBID_NMG:
		id = ID_NMG;
		break;
	case DBID_SKETCH:
		id = ID_SKETCH;
		break;
	case DBID_EXTR:
		id = ID_EXTRUDE;
		break;
	case DBID_CLINE:
		id = ID_CLINE;
		break;
	case DBID_BOT:
		id = ID_BOT;
		break;
	default:
		bu_log("rt_id_solid:  u_id=x%x unknown\n", rec->u_id);
		id = ID_NULL;		/* BAD */
		break;
	}
	if( id < ID_NULL || id > ID_MAX_SOLID )  {
		bu_log("rt_id_solid: internal error, id=%d?\n", id);
		id = ID_NULL;		/* very BAD */
	}
	return(id);
}

/*
 *		R T _ G E T _ F U N C T A B _ B Y _ L A B E L
 *
 *  Given the Tcl 'label' for a given solid type,
 *  find the appropriate entry in rt_functab[].
 */
const struct rt_functab *
rt_get_functab_by_label(const char *label)
{
	register const struct rt_functab	*ftp;

	for( ftp = rt_functab; ftp->magic != 0; ftp++ )  {
		if( strncmp( label, ftp->ft_label, 8 ) == 0 )
			return ftp;
	}
	return NULL;
}

/*
 *			R T _ G E N E R I C _ X F O R M
 *
 *  Apply a 4x4 transformation matrix to the internal form of a solid.
 *
 *  If "free" flag is non-zero, storage for the original solid is released.
 *  If "os" is same as "is", storage for the original solid is
 *  overwritten with the new, transformed solid.
 *
 *
 *  Returns -
 *	-1	FAIL
 *	 0	OK
 */
int
rt_generic_xform(
	struct rt_db_internal	*op,
	const mat_t		mat,
	struct rt_db_internal	*ip,
	int			free,
	struct db_i		*dbip,
	struct resource		*resp)
{
	struct bu_external	ext;
	int			id;
	struct bu_attribute_value_set avs;


	RT_CK_DB_INTERNAL( ip );
	RT_CK_DBI(dbip);
	RT_CK_RESOURCE(resp);

	id = ip->idb_type;
	BU_INIT_EXTERNAL(&ext);
	/* Scale change on export is 1.0 -- no change */
	switch (dbip->dbi_version) {
	case 4:
	    if( rt_functab[id].ft_export( &ext, ip, 1.0, dbip, resp ) < 0 )  {
		bu_log("rt_generic_xform():  %s export failure\n",
			rt_functab[id].ft_name);
		return -1;			/* FAIL */
	    }
	    if( (free || op == ip) )  rt_db_free_internal(ip, resp);

	    RT_INIT_DB_INTERNAL(op);
	    if( rt_functab[id].ft_import( op, &ext, mat, dbip, resp ) < 0 )  {
		bu_log("rt_generic_xform():  solid import failure\n");
		return -1;			/* FAIL */
	    }
	    break;
	case 5:
	    avs.magic = -1;

	    if( rt_functab[id].ft_export5( &ext, ip, 1.0, dbip, resp, 0 ) < 0 )  {
		bu_log("rt_generic_xform():  %s export failure\n",
			rt_functab[id].ft_name);
		return -1;			/* FAIL */
	    }

	    if( (free || op == ip) ) {
		    if( ip->idb_avs.magic == BU_AVS_MAGIC ) {
			    /* grab the attributes before they are lost
			     * by rt_db_free_internal or RT_INIT_DB_INTERNAL
			     */
			    bu_avs_init( &avs, ip->idb_avs.count, "avs" );
			    bu_avs_merge( &avs, &ip->idb_avs );
		    }
		    rt_db_free_internal(ip, resp);
	    }

	    RT_INIT_DB_INTERNAL(op);

	    if( !free && op != ip ) {
		    /* just copy the attributes from ip to op */
		    if( ip->idb_avs.magic == BU_AVS_MAGIC ) {
			    bu_avs_init( &op->idb_avs, ip->idb_avs.count, "avs" );
			    bu_avs_merge( &op->idb_avs, &ip->idb_avs );
		    }
	    } else if( avs.magic == BU_AVS_MAGIC ) {
		    /* put the saved attributes in the output */
		    bu_avs_init( &op->idb_avs, avs.count, "avs" );
		    bu_avs_merge( &op->idb_avs, &avs );
		    bu_avs_free( &avs );
	    }

	    if( rt_functab[id].ft_import5( op, &ext, mat, dbip, resp, 0 ) < 0 )  {
		bu_log("rt_generic_xform():  solid import failure\n");
		return -1;			/* FAIL */
	    }
	    break;
	}

	bu_free_external( &ext );

	RT_CK_DB_INTERNAL( op );
	return 0;				/* OK */
}
@


11.114
log
@change conf.h to a wrapped config.h
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /cvs/brlcad/librt/table.c,v 11.113 2004/04/05 08:48:58 morrison Exp $ (BRL)";
@


11.113
log
@merge of ansi-6-0-branch into HEAD
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header$ (BRL)";
d22 5
a26 1
#include "conf.h"
@


11.112
log
@update copyright to include span through 2003
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.111 2003/09/25 17:37:49 morrison Exp $ (BRL)";
d266 3
d1010 14
d1178 1
a1178 2
rt_id_solid( ep )
struct bu_external	*ep;
d1264 1
a1264 2
rt_get_functab_by_label( label )
const char *label;
@


11.111
log
@proxy commit for cjohnson: The size of a label in in rt_functab is 8 bytes. The "submodel" is eight bytes.  No terminating null byte means that the server never finds submodels.  Affects "db put" and likely "in"
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1989 by the United States Army.
d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.110 2003/09/10 14:06:30 jra Exp $ (BRL)";
@


11.111.2.1
log
@merge from HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.112 2004/02/02 17:39:29 morrison Exp $ (BRL)";
@


11.111.2.2
log
@merge from head
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.111.2.1 2004/02/12 18:37:47 erikg Exp $ (BRL)";
@


11.110
log
@A little more care was required when handling attributes in rt_generic_xform
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.109 2003/09/10 13:03:59 jra Exp $ (BRL)";
d1254 1
a1254 1
		if( strcmp( label, ftp->ft_label ) == 0 )
@


11.109
log
@adjusted rt_generic_xform to handle ALL cases
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.108 2003/09/09 20:51:20 jra Exp $ (BRL)";
d1311 2
d1334 5
a1338 3
		    bu_avs_init( &op->idb_avs, ip->idb_avs.count, "avs" );
		    bu_avs_merge( &op->idb_avs, &ip->idb_avs );
	    } else {
@


11.108
log
@rt_generic_xform() was losing attributes
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.107 2002/09/05 04:10:30 butler Exp $ (BRL)";
a1291 2
	avs.magic = -1;

d1319 3
a1321 1
			    /* grab the attributes before freeing */
d1330 6
a1335 2
	    if( avs.magic == BU_AVS_MAGIC ) {
		    /* put the attributes in the output */
@


11.107
log
@Changes to be able to "make" a dsp.  Basically, if the data is missing,
we pretend to access /dev/null.  This is mostly interesting so that we
can do a "db put" of a dsp object
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.106 2002/08/20 17:08:10 jra Exp $ (BRL)";
d1285 2
d1292 2
d1319 8
a1326 1
	    if( (free || op == ip) )  rt_db_free_internal(ip, resp);
d1329 8
@


11.107.4.1
log
@sync to HEAD...
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/librt/table.c,v 11.112 2004/02/02 17:39:29 morrison Exp $ (BRL)";
d1254 1
a1254 1
		if( strncmp( label, ftp->ft_label, 8 ) == 0 )
a1284 2
	struct bu_attribute_value_set avs;

a1308 2
	    avs.magic = -1;

d1315 1
a1315 10
	    if( (free || op == ip) ) {
		    if( ip->idb_avs.magic == BU_AVS_MAGIC ) {
			    /* grab the attributes before they are lost
			     * by rt_db_free_internal or RT_INIT_DB_INTERNAL
			     */
			    bu_avs_init( &avs, ip->idb_avs.count, "avs" );
			    bu_avs_merge( &avs, &ip->idb_avs );
		    }
		    rt_db_free_internal(ip, resp);
	    }
a1317 14

	    if( !free && op != ip ) {
		    /* just copy the attributes from ip to op */
		    if( ip->idb_avs.magic == BU_AVS_MAGIC ) {
			    bu_avs_init( &op->idb_avs, ip->idb_avs.count, "avs" );
			    bu_avs_merge( &op->idb_avs, &ip->idb_avs );
		    }
	    } else if( avs.magic == BU_AVS_MAGIC ) {
		    /* put the saved attributes in the output */
		    bu_avs_init( &op->idb_avs, avs.count, "avs" );
		    bu_avs_merge( &op->idb_avs, &avs );
		    bu_avs_free( &avs );
	    }

@


11.107.2.1
log
@Initial ANSIfication
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.107 2002/09/05 04:10:30 butler Exp $ (BRL)";
d1161 2
a1162 1
rt_id_solid(struct bu_external *ep)
d1248 2
a1249 1
rt_get_functab_by_label(const char *label)
@


11.107.2.2
log
@Added initial stubbed support for a new primitive -- a superquadric ellipsoid.  The primitive may be created in mged, but it has the same guts as the ellipsoid
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.107.2.1 2002/09/19 18:01:47 morrison Exp $ (BRL)";
a265 3
#define rt_superell_xform rt_generic_xform
RT_DECLARE_INTERFACE(superell)

a943 14
		NULL,
	},

	{RT_FUNCTAB_MAGIC, "ID_SUPERELL", "superell",
		1,		/* 31 Superquadratic Ellipsoid  */
		rt_superell_prep,	rt_superell_shot,	rt_superell_print,	rt_superell_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_superell_uv,	rt_superell_curve,	rt_superell_class,	rt_superell_free,
		rt_superell_plot,	rt_superell_vshot,	rt_superell_tess,	rt_superell_tnurb,
		rt_superell_import5, rt_superell_export5,
		rt_superell_import,	rt_superell_export,	rt_superell_ifree,
		rt_superell_describe,rt_superell_xform,	rt_superell_parse,
		sizeof(struct rt_superell_internal), RT_SUPERELL_INTERNAL_MAGIC,
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.107.2.3
log
@sync branch with HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d19 1
a19 1
static const char RCStree[] = "@@(#)$Header$ (BRL)";
d1269 1
a1269 1
		if( strncmp( label, ftp->ft_label, 8 ) == 0 )
a1299 2
	struct bu_attribute_value_set avs;

a1323 2
	    avs.magic = -1;

d1330 1
a1330 10
	    if( (free || op == ip) ) {
		    if( ip->idb_avs.magic == BU_AVS_MAGIC ) {
			    /* grab the attributes before they are lost
			     * by rt_db_free_internal or RT_INIT_DB_INTERNAL
			     */
			    bu_avs_init( &avs, ip->idb_avs.count, "avs" );
			    bu_avs_merge( &avs, &ip->idb_avs );
		    }
		    rt_db_free_internal(ip, resp);
	    }
a1332 14

	    if( !free && op != ip ) {
		    /* just copy the attributes from ip to op */
		    if( ip->idb_avs.magic == BU_AVS_MAGIC ) {
			    bu_avs_init( &op->idb_avs, ip->idb_avs.count, "avs" );
			    bu_avs_merge( &op->idb_avs, &ip->idb_avs );
		    }
	    } else if( avs.magic == BU_AVS_MAGIC ) {
		    /* put the saved attributes in the output */
		    bu_avs_init( &op->idb_avs, avs.count, "avs" );
		    bu_avs_merge( &op->idb_avs, &avs );
		    bu_avs_free( &avs );
	    }

@


11.106
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.104 2002/05/09 19:01:03 jra Exp $ (BRL)";
d391 2
d874 1
a874 1
	        rt_nul_make,
@


11.105
log
@Converted from K&R to ANSI C - RFH
@
text
@d1159 2
a1160 1
rt_id_solid(struct bu_external *ep)
d1246 2
a1247 1
rt_get_functab_by_label(const char *label)
@


11.104
log
@Added tcl adjust abd tclget support for binary objects
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.103 2002/02/22 05:09:21 morrison Exp $ (BRL)";
d1159 1
a1159 2
rt_id_solid( ep )
struct bu_external	*ep;
d1245 1
a1245 2
rt_get_functab_by_label( label )
const char *label;
@


11.103
log
@added extern symbol for new rt_binunif_free() call
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.102 2001/11/19 19:32:06 butler Exp $ (BRL)";
d325 8
d987 1
a987 1
		rt_nul_tclget,	rt_nul_tcladjust, rt_nul_tclform,
@


11.102
log
@rt_generic_xform wasn't paying attention to the database format being used.
It now does the proper export for the database version.  This showed up as
a bug when a DSP using an internal binary object was imported as a V5,
exported as a V4 and imported again.
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.101 2001/11/07 19:35:37 butler Exp $ (BRL)";
d316 1
@


11.101
log
@Changes to have the ARS use the BOT ray intersection code.
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.100 2001/11/02 05:03:06 butler Exp $ (BRL)";
d1282 3
a1284 1
	if( rt_functab[id].ft_export( &ext, ip, 1.0, dbip, resp ) < 0 )  {
d1288 17
a1304 2
	}
	if( (free || op == ip) )  rt_db_free_internal(ip, resp);
d1306 2
a1307 2
	RT_INIT_DB_INTERNAL(op);
	if( rt_functab[id].ft_import( op, &ext, mat, dbip, resp ) < 0 )  {
d1310 2
@


11.100
log
@DSP gets rt_nul_make
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.99 2001/11/02 01:50:42 butler Exp $ (BRL)";
d572 3
a574 3
		rt_ars_prep,	rt_ars_shot,	rt_ars_print,	rt_ars_norm,
		rt_nul_piece_shot, rt_nul_piece_hitsegs,
		rt_ars_uv,	rt_ars_curve,	rt_ars_class,	rt_ars_free,
@


11.99
log
@Sean points out that we missed the non-ANSI function declaration when we
updated the _describe() function to include a db_i parameter
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.98 2001/11/01 22:04:33 butler Exp $ (BRL)";
d862 2
a863 4
	        rt_dsp_tclget,
	 rt_dsp_tcladjust,
	 rt_nul_tclform,
		NULL,
@


11.98
log
@modifications to the ft_describe declaration
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.97 2001/10/31 23:01:00 butler Exp $ (BRL)";
a40 8
extern int rt_dsp_tclget(Tcl_Interp *interp,
			 const struct rt_db_internal *intern,
			 const char		     *attr);

extern int rt_dsp_tcladjust(Tcl_Interp *interp,
			    struct rt_db_internal *intern,
			    int		argc,
			    char	**argv);
d170 2
a171 1
			double mm2local, struct resource *resp)); \
d320 1
a320 1
		double mm2local, struct resource *resp));
d372 11
d862 3
a864 1
	        rt_dsp_tclget, rt_dsp_tcladjust, 0,
d978 1
a978 1
		rt_binunif_describe,rt_generic_xform, NULL,
d1100 2
a1101 1
			int verbose, double mm2local, struct resource *resp))
@


11.97
log
@Changes to make db get work on DSP
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.96 2001/10/15 15:24:27 bparker Exp $ (BRL)";
d114 5
a118 2
			const struct rt_db_internal *ip, int verbose, \
			double mm2local, struct resource *resp)); \
@


11.96
log
@*- fixed syntax error
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.95 2001/10/02 17:57:15 jra Exp $ (BRL)";
d41 9
d855 1
a855 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.95
log
@Added rt_binunif_make() routine
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.94 2001/10/01 20:12:08 jra Exp $ (BRL)";
a167 1

@


11.94
log
@Added minimal tcl support for nurb solid (BSPLINE)
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.93 2001/08/10 21:21:58 morrison Exp $ (BRL)";
d317 3
d964 1
a964 1
		rt_nul_make,
@


11.93
log
@sun5 warning handling
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.92 2001/07/17 13:19:22 jra Exp $ (BRL)";
d372 7
d618 1
a618 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.92
log
@Added tclget and tcladjust for NMGs
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.91 2001/06/27 13:23:13 jra Exp $ (BRL)";
d168 1
@


11.91
log
@Added a structparse for the grip solid
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.90 2001/06/21 20:35:31 jra Exp $ (BRL)";
d371 9
d638 2
a639 2
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
		NULL,
@


11.90
log
@Added rt_ebm_make() to initialize matrix
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.89 2001/06/21 20:14:30 jra Exp $ (BRL)";
d783 1
a783 1
		rt_grp_describe,rt_grp_xform,	NULL,
d786 1
a786 1
		NULL,
@


11.89
log
@Added tclget and tcladjust routines for EBM
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.88 2001/06/21 18:07:25 jra Exp $ (BRL)";
d347 2
d644 1
a644 1
		NULL,
@


11.88
log
@Continueing to add tcladjust and tclget support
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.87 2001/06/15 14:53:20 jra Exp $ (BRL)";
d339 9
d641 1
a641 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.87
log
@Added tcl_get and tcl_adjust routines for ARBN solids
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.86 2001/04/13 15:13:30 jra Exp $ (BRL)";
d346 7
d534 1
a534 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.86
log
@Added tclform for cline and extrude solids
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.85 2001/04/13 15:03:54 jra Exp $ (BRL)";
d339 7
d653 1
a653 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.85
log
@Added tclform for sketch
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.84 2001/04/13 14:13:45 jra Exp $ (BRL)";
d368 1
d376 1
d830 1
a830 1
		rt_extrude_tclget, rt_extrude_tcladjust, rt_parsetab_tclform,
d858 1
a858 1
		rt_cline_tclget, rt_cline_tcladjust, rt_parsetab_tclform,
@


11.84
log
@Added tclform for BoT solid
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.83 2001/04/05 19:35:36 morrison Exp $ (BRL)";
d360 2
d814 1
a814 1
		rt_sketch_tclget, rt_sketch_tcladjust, rt_parsetab_tclform,
@


11.83
log
@updated SIGNED to signed
updated CONST to const
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.82 2001/03/20 16:09:07 jra Exp $ (BRL)";
d352 1
d868 1
a868 1
		rt_bot_tclget, rt_bot_tcladjust, rt_parsetab_tclform,
@


11.82
log
@ft_import5() and ft_export5() now have a const int minor_type argument
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /d/CVS/brlcad/librt/table.c,v 11.81 2001/03/20 15:57:11 bparker Exp $ (BRL)";
d41 1
a41 1
CONST struct bu_structparse rt_nul_parse[] = {
d63 1
a63 1
	BU_EXTERN(void rt_##name##_print, (CONST struct soltab *stp)); \
d75 2
a76 2
			CONST struct rt_tess_tol *ttol, \
			CONST struct bn_tol *tol)); \
d82 2
a83 2
			CONST struct rt_tess_tol *ttol, \
			CONST struct bn_tol *tol)); \
d86 1
a86 1
			CONST struct bn_tol *tol)); \
d88 2
a89 2
			CONST struct bu_external *ep, CONST mat_t mat, \
			CONST struct db_i *dbip, struct resource *resp, CONST int minor_type )); \
d91 2
a92 2
			CONST struct rt_db_internal *ip, \
			double local2mm, CONST struct db_i *dbip, \
d94 1
a94 1
			CONST int minor_type)); \
d96 2
a97 2
			CONST struct bu_external *ep, CONST mat_t mat, \
			CONST struct db_i *dbip, struct resource *resp )); \
d99 2
a100 2
			CONST struct rt_db_internal *ip, \
			double local2mm, CONST struct db_i *dbip, \
d105 1
a105 1
			CONST struct rt_db_internal *ip, int verbose, \
d108 1
a108 1
			CONST mat_t mat, struct rt_db_internal *ip, \
d111 1
a111 1
	extern CONST struct bu_structparse rt_##name##_parse[];
d128 1
a128 1
	BU_EXTERN(void rt_/**/name/**/_print, (CONST struct soltab *stp)); \
d140 2
a141 2
			CONST struct rt_tess_tol *ttol, \
			CONST struct bn_tol *tol)); \
d147 2
a148 2
			CONST struct rt_tess_tol *ttol, \
			CONST struct bn_tol *tol)); \
d151 1
a151 1
			CONST struct bn_tol *tol)); \
d153 1
a153 1
			CONST struct bu_external *ep, CONST mat_t mat, CONST struct db_i *dbip, CONST int minor_type )); \
d155 2
a156 2
			CONST struct rt_db_internal *ip, \
			double local2mm, CONST struct db_i *dbip, CONST int minor_type )); \
d158 1
a158 1
			CONST struct bu_external *ep, CONST mat_t mat, CONST struct db_i *dbip )); \
d160 2
a161 2
			CONST struct rt_db_internal *ip, \
			double local2mm, CONST struct db_i *dbip )); \
d165 1
a165 1
			CONST struct rt_db_internal *ip, int verbose, \
d168 1
a168 1
			CONST mat_t mat, struct rt_db_internal *ip, \
d171 1
a171 1
	extern CONST struct bu_structparse rt_/**/name/**/_parse[];
d279 3
a281 3
 			CONST struct bu_external *ep,
 			CONST mat_t mat,
			CONST struct db_i *dbip,
d283 1
a283 1
			CONST int minor_type));
d285 3
a287 3
 			CONST struct bu_external *ep,
 			CONST mat_t mat,
			CONST struct db_i *dbip,
d289 1
a289 1
			CONST int minor_type));
d291 3
a293 3
 			CONST struct bu_external *ep,
 			CONST mat_t mat,
			CONST struct db_i *dbip,
d295 1
a295 1
			CONST int minor_type));
d298 1
a298 1
			CONST struct rt_db_internal *ip,
d300 1
a300 1
			CONST struct db_i *dbip,
d302 1
a302 1
			CONST int minor_type));
d305 1
a305 1
			CONST struct rt_db_internal *ip,
d307 1
a307 1
			CONST struct db_i *dbip,
d309 1
a309 1
			CONST int minor_type));
d314 1
a314 1
		CONST struct rt_db_internal *ip, int verbose,
d319 1
a319 1
		CONST struct rt_db_internal *intern, CONST char	*item));
d323 1
a323 1
BU_EXTERN(int rt_comb_tclform, (CONST struct rt_functab *ftp,
d325 1
a325 1
BU_EXTERN(void rt_comb_make, (CONST struct rt_functab *ftp,
d330 1
a330 1
		CONST struct rt_db_internal *intern, CONST char *attr));
d334 1
a334 1
BU_EXTERN(int rt_parsetab_tclform, (CONST struct rt_functab *ftp,
d336 1
a336 1
BU_EXTERN(void rt_generic_make, (CONST struct rt_functab *ftp,
d341 1
a341 1
		CONST struct rt_db_internal *intern, CONST char *attr));
d348 1
a348 1
		CONST struct rt_db_internal *intern, CONST char *attr));
d355 1
a355 1
		CONST struct rt_db_internal *intern, CONST char *attr));
d361 1
a361 1
		CONST struct rt_db_internal *intern, CONST char *attr));
d368 1
a368 1
		CONST struct rt_db_internal *intern, CONST char *attr));
d379 1
a379 1
	CONST mat_t mat, struct rt_db_internal *ip,
d384 1
a384 1
int rt_nul_tclget(Tcl_Interp *interp, CONST struct rt_db_internal *intern, CONST char *attr)  {
d393 1
a393 1
int rt_nul_tclform(CONST struct rt_functab *ftp, Tcl_Interp *interp) {
d397 1
a397 1
void rt_nul_make(CONST struct rt_functab *ftp, struct rt_db_internal *intern, double diameter) {
d403 2
a404 2
CONST struct rt_db_internal *intern;
CONST char *attr;
d419 1
a419 1
CONST struct rt_functab *ftp;
d426 1
a426 1
CONST struct rt_functab *ftp;
d434 1
a434 1
CONST struct rt_functab rt_functab[] = {
d945 1
a945 1
CONST int rt_nfunctab = sizeof(rt_functab)/sizeof(struct rt_functab);
d982 1
a982 1
void DEF(rt_nul_print,(CONST struct soltab *stp))
d997 2
a998 2
			CONST struct rt_tess_tol *ttol,
			CONST struct bn_tol *tol))
d1006 2
a1007 2
			CONST struct rt_tess_tol *ttol,
			CONST struct bn_tol *tol))
d1011 1
a1011 1
			CONST struct bn_tol *tol))
d1013 2
a1014 2
			CONST struct bu_external *ep,
			CONST mat_t mat, CONST struct db_i *dbip,
d1016 1
a1016 1
			 CONST int minot_type))
d1018 2
a1019 2
			CONST struct rt_db_internal *ip,
			double local2mm, CONST struct db_i *dbip,
d1021 1
a1021 1
			CONST int minor_type ))
d1023 2
a1024 2
			CONST struct bu_external *ep,
			CONST mat_t mat, CONST struct db_i *dbip,
d1027 2
a1028 2
			CONST struct rt_db_internal *ip,
			double local2mm, CONST struct db_i *dbip,
d1032 1
a1032 1
			CONST struct rt_db_internal *ip,
d1035 1
a1035 1
			CONST mat_t mat, struct rt_db_internal *ip,
d1170 1
a1170 1
CONST struct rt_functab *
d1172 1
a1172 1
CONST char *label;
d1174 1
a1174 1
	register CONST struct rt_functab	*ftp;
@


11.81
log
@*- added import5 and export5 routines
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /d/CVS/brlcad/librt/table.c,v 11.80 2001/03/19 22:19:58 butler Exp $ (BRL)";
d89 1
a89 1
			CONST struct db_i *dbip, struct resource *resp )); \
d93 2
a94 1
			struct resource *resp )); \
d153 1
a153 1
			CONST struct bu_external *ep, CONST mat_t mat, CONST struct db_i *dbip )); \
d156 1
a156 1
			double local2mm, CONST struct db_i *dbip )); \
d267 2
a268 1
	struct resource			*resp);
d274 2
a275 1
	struct resource		*resp);
d278 1
a278 1
BU_EXTERN(int rt_bin_expm_import5, (struct rt_db_internal * ip,
d282 3
a284 2
			      struct resource *resp));
BU_EXTERN(int rt_bin_unif_import5, (struct rt_db_internal * ip,
d288 3
a290 2
			      struct resource *resp));
BU_EXTERN(int rt_bin_mime_import5, (struct rt_db_internal * ip,
d294 2
a295 1
			      struct resource *resp));
d297 1
a297 1
BU_EXTERN(int rt_bin_expm_export5, (struct bu_external *ep,
d301 2
a302 1
			struct resource *resp));
d304 1
a304 1
BU_EXTERN(int rt_bin_unif_export5, (struct bu_external *ep,
d308 2
a309 2
			struct resource *resp));

a310 11

BU_EXTERN(int rt_binexpm_import5, (struct rt_db_internal *ip,
		CONST unsigned char minor_type,
		CONST struct bu_external *ep,
		   CONST struct db_i *dbip ));
BU_EXTERN(int rt_binmime_import5, (struct rt_db_internal *ip,
		CONST unsigned char minor_type,
		CONST struct bu_external *ep, CONST struct db_i *dbip ));
BU_EXTERN(int rt_binunif_export5, (struct bu_external *ep,
		CONST struct rt_db_internal *ip,
		CONST struct db_i *dbip ));
d893 1
a893 1
		rt_bin_expm_import5,
d908 2
a909 2
		rt_bin_unif_import5,
	 rt_bin_unif_export5,
d923 1
a923 1
		rt_bin_mime_import5, rt_nul_export5,
d1015 2
a1016 1
			struct resource *resp ))
d1020 2
a1021 1
			struct resource *resp ))
@


11.80
log
@patches to merge 5.3 into 6.0
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /d/CVS/brlcad/librt/table.c,v 11.79 2000/11/01 06:46:13 mike Exp $ (BRL)";
d755 1
a755 1
		rt_nul_import5, rt_nul_export5,
@


11.79
log
@
Needed seghead paramater to ft_piece_shot() to properly handle
PLATE-mode intersections, where one hit yeilds two hits
and a complete segment, all at once.
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.78 2000/10/24 18:11:13 mike Exp $ (BRL)";
d343 7
d659 3
a661 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.78
log
@
Added extern from table.c to raytrace.h
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.77 2000/10/19 19:19:46 butler Exp $ (BRL)";
d57 2
a58 1
			struct application *ap )); \
d121 2
a122 1
			struct application *ap )); \
d972 2
a973 1
			struct application *ap))
@


11.77
log
@Changes to compile under RedHat 7.0
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.76 2000/10/18 18:10:35 butler Exp $ (BRL)";
d1188 7
a1194 7
rt_generic_xform(op, mat, ip, free, dbip, resp)
struct rt_db_internal	*op;
CONST mat_t		mat;
struct rt_db_internal	*ip;
int			free;
struct db_i		*dbip;
struct resource		*resp;
@


11.76
log
@Patches for compiling under RedHat 7.0
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.75 2000/09/09 04:30:47 mike Exp $ (BRL)";
d273 30
d305 2
a306 4
		CONST struct bu_external *ep, CONST struct db_i *dbip ));
BU_EXTERN(int rt_binunif_import5, (struct rt_db_internal *ip,
		CONST unsigned char minor_type,
		CONST struct bu_external *ep, CONST struct db_i *dbip ));
d886 2
a887 1
		rt_binexpm_import5, rt_nul_export5,
d901 2
a902 1
		rt_binunif_import5, rt_binunif_export5,
d916 1
a916 1
		rt_binmime_import5, rt_nul_export5,
@


11.75
log
@
Struct db_tree_state finally got a magic number. Added resource argument
to ft_describe(), db_region_mat(), db_shader_mat(),
db_init_db_tree_state(), and db_path_to_mat().
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.74 2000/09/08 05:54:42 mike Exp $ (BRL)";
d25 3
@


11.74
log
@
Modified tree routines to take resource pointer.
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.73 2000/08/24 02:14:46 mike Exp $ (BRL)";
d101 1
a101 1
			double mm2local)); \
d160 1
a160 1
			double mm2local)); \
d255 13
a267 6
/* from db_comb.c */
BU_EXTERN(int rt_comb_import5, (struct rt_db_internal *ip,
		CONST struct bu_external *ep, CONST mat_t mat, CONST struct db_i *dbip ));
BU_EXTERN(int rt_comb_export5, (struct bu_external *ep,
		CONST struct rt_db_internal *ip,
		double local2mm, CONST struct db_i *dbip ));
d286 1
a286 1
		double mm2local));
d990 1
a990 1
			int verbose, double mm2local))
@


11.73
log
@
Some externs moved to raytrace.h
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.72 2000/08/18 03:40:13 cjohnson Exp $ (BRL)";
d84 2
a85 1
			CONST struct bu_external *ep, CONST mat_t mat, CONST struct db_i *dbip)); \
d88 2
a89 1
			double local2mm, CONST struct db_i *dbip )); \
d91 2
a92 1
			CONST struct bu_external *ep, CONST mat_t mat, CONST struct db_i *dbip)); \
d95 4
a98 2
			double local2mm, CONST struct db_i *dbip )); \
	BU_EXTERN(void rt_##name##_ifree, (struct rt_db_internal *ip)); \
d104 2
a105 1
			int free, struct db_i *dbip)); \
d156 2
a157 1
	BU_EXTERN(void rt_/**/name/**/_ifree, (struct rt_db_internal *ip)); \
d163 2
a164 1
			int free, struct db_i *dbip)); \
d275 2
a276 1
BU_EXTERN(void rt_binunif_ifree, (struct rt_db_internal *ip));
d285 2
a286 1
		struct rt_db_internal *intern, int argc, char **argv));
d296 2
a297 1
		struct rt_db_internal *intern, int argc, char **argv));
d307 2
a308 1
		struct rt_db_internal *intern, int argc, char **argv));
d314 2
a315 1
		struct rt_db_internal *intern, int argc, char **argv));
d320 2
a321 1
		struct rt_db_internal *intern, int argc, char **argv));
d327 2
a328 1
		struct rt_db_internal *intern, int argc, char **argv));
d337 1
a337 1
	int free, struct db_i *dbip));
d345 2
a346 1
int rt_nul_tcladjust(Tcl_Interp *interp, struct rt_db_internal *intern, int argc, char **argv)  {
d966 2
a967 1
			CONST mat_t mat, CONST struct db_i *dbip ))
d970 2
a971 1
			double local2mm, CONST struct db_i *dbip ))
d974 2
a975 1
			CONST mat_t mat, CONST struct db_i *dbip ))
d978 3
a980 2
			double local2mm, CONST struct db_i *dbip ))
void DEF(rt_nul_ifree,(struct rt_db_internal *ip))
d986 1
a986 1
			int free, struct db_i *dbip))
d1148 1
a1148 1
rt_generic_xform(op, mat, ip, free, dbip)
d1154 1
d1161 1
d1166 1
a1166 1
	if( rt_functab[id].ft_export( &ext, ip, 1.0, dbip ) < 0 )  {
d1171 1
a1171 1
	if( (free || op == ip) )  rt_db_free_internal(ip);
d1174 1
a1174 1
	if( rt_functab[id].ft_import( op, &ext, mat, dbip ) < 0 )  {
@


11.72
log
@Use librt's rpp check on the DSP.  It is a bit faster.
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.71 2000/07/10 23:01:49 mike Exp $ (BRL)";
a252 9
BU_EXTERN(int rt_comb_import4, (struct rt_db_internal *ip,
		CONST struct bu_external *ep, CONST mat_t mat, CONST struct db_i *dbip ));
BU_EXTERN(int rt_comb_export4, (struct bu_external *ep,
		CONST struct rt_db_internal *ip,
		double local2mm, CONST struct db_i *dbip ));
BU_EXTERN(void rt_comb_ifree, (struct rt_db_internal *ip));
BU_EXTERN(int rt_comb_describe, (struct bu_vls *str,
		CONST struct rt_db_internal *ip, int verbose,
		double mm2local));
@


11.71
log
@
Added "const" to RCSid string, to silence warnings of unused variable
on GCC compilers
@
text
@d19 1
a19 1
static const char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.70 2000/07/06 22:44:52 mike Exp $ (BRL)";
d736 1
a736 1
		0,		/* 25 Displacement Map (alt. height field) */
@


11.70
log
@*** empty log message ***
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.69 2000/07/05 21:20:45 mike Exp $ (BRL)";
@


11.69
log
@
ft_export expects initialized arg.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.68 2000/06/30 21:39:18 cjohnson Exp $ (BRL)";
d727 1
a727 1
		rt_nul_import5, rt_nul_export5,
@


11.68
log
@Let the world know that nmgs are DB5 ready.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.67 2000/06/30 20:25:50 jra Exp $ (BRL)";
d1034 1
a1034 1
		id = idmap[rec->s.s_type];
d1160 1
@


11.67
log
@Added database v5 support
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.66 2000/06/30 20:03:46 jra Exp $ (BRL)";
d545 1
a545 1
		rt_nul_import5, rt_nul_export5,
@


11.66
log
@Added database v5 support
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.65 2000/06/30 19:43:51 jra Exp $ (BRL)";
d783 1
a783 1
		rt_nul_import5, rt_nul_export5,
@


11.65
log
@Added database v5 support
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.64 2000/06/30 19:14:30 jra Exp $ (BRL)";
d573 1
a573 1
		rt_nul_import5, rt_nul_export5,
@


11.64
log
@Added database v5 support
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.63 2000/06/30 18:15:19 mike Exp $ (BRL)";
d559 1
a559 1
		rt_nul_import5, rt_nul_export5,
@


11.63
log
@
changed v4 comb import/export to rt_comb_import4/rt_comb_export4
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.62 2000/06/30 17:41:04 jra Exp $ (BRL)";
d461 1
a461 1
		rt_nul_import5, rt_nul_export5,
@


11.62
log
@Added support for database v5
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.61 2000/06/30 15:42:41 pjt Exp $ (BRL)";
d253 1
a253 1
BU_EXTERN(int rt_comb_import, (struct rt_db_internal *ip,
d255 1
a255 1
BU_EXTERN(int rt_comb_export, (struct bu_external *ep,
d828 1
a828 1
		rt_comb_import,	rt_comb_export,	rt_comb_ifree,
@


11.61
log
@Added entries for experimental and MIME-typed binary objects
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.60 2000/06/30 15:26:36 pjt Exp $ (BRL)";
d517 1
a517 1
		rt_nul_import5, rt_nul_export5,
@


11.60
log
@Added bulk binary objects
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.59 2000/06/29 20:21:00 jra Exp $ (BRL)";
d835 14
d863 13
@


11.59
log
@Added database v5 support
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.58 2000/06/29 19:50:57 butler Exp $ (BRL)";
d262 19
d384 1
a384 1
CONST struct rt_functab rt_functab[ID_MAXIMUM+3] = {
d819 1
a819 1
	/* ID_MAXIMUM.  Add new solids _above_ this point */
d835 14
d1069 1
a1069 1
	if( id < ID_NULL || id > ID_MAXIMUM )  {
@


11.58
log
@Added dsp V5 database routines
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.57 2000/06/29 18:23:40 bparker Exp $ (BRL)";
d750 1
a750 1
		rt_nul_import5, rt_nul_export5,
@


11.57
log
@Reference rt_cline_import5 and rt_cline_export5 routines.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.56 2000/06/29 18:20:56 mike Exp $ (BRL)";
d722 1
a722 1
		rt_nul_import5, rt_nul_export5,
@


11.56
log
@
Changed from db_free_external() to bu_free_external()
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.55 2000/06/29 17:54:47 jra Exp $ (BRL)";
d778 1
a778 1
		rt_nul_import5, rt_nul_export5,
@


11.55
log
@Added database v5 support
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.54 2000/06/29 17:14:14 bparker Exp $ (BRL)";
d1105 1
a1105 1
	db_free_external( &ext );
@


11.54
log
@Add rt_arbn_import5 and rt_arbn_export5 routines.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.53 2000/06/29 15:02:28 mike Exp $ (BRL)";
d736 1
a736 1
		rt_nul_import5, rt_nul_export5,
@


11.53
log
@
rt_db_free_internal
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.52 2000/06/29 14:00:44 bparker Exp $ (BRL)";
d568 1
a568 1
		rt_nul_import5, rt_nul_export5,
@


11.52
log
@Add rt_eto_import5 and rt_eto_export5 routines.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.51 2000/06/28 21:00:40 bparker Exp $ (BRL)";
d1098 1
a1098 4
	if( (free || op == ip) && ip->idb_ptr )  {
		rt_functab[id].ft_ifree( ip );
    		ip->idb_ptr = (genptr_t)0;
    	}
@


11.51
log
@Reference rt_pipe_import5 and rt_pipe_export5.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.50 2000/06/28 18:22:20 jra Exp $ (BRL)";
d666 1
a666 1
		rt_nul_import5, rt_nul_export5,
@


11.50
log
@Added some v5 database suport
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.49 2000/06/27 21:05:57 mike Exp $ (BRL)";
d582 1
a582 1
		rt_nul_import5, rt_nul_export5,
@


11.49
log
@
Added rt_comb_import5/export5
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.48 2000/06/27 15:01:35 bparker Exp $ (BRL)";
d456 1
a456 1
		rt_nul_import5, rt_nul_export5,
d792 1
a792 1
		rt_nul_import5, rt_nul_export5,
@


11.48
log
@Reference rt_tgc_import5 and rt_tgc_export5 from
rec section of rt_functab.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.47 2000/06/27 14:33:29 bparker Exp $ (BRL)";
d248 5
d808 1
a808 1
		rt_nul_import5, rt_nul_export5,
@


11.47
log
@Reference rt_part_import5 and rt_part_export5.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.46 2000/06/27 13:34:35 bparker Exp $ (BRL)";
d465 1
a465 1
		rt_nul_import5, rt_nul_export5,
@


11.46
log
@Reference rt_ell_import5 and rt_ell_export5 from sph section
of rt_functab.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.45 2000/06/27 03:53:46 cjohnson Exp $ (BRL)";
d591 1
a591 1
		rt_nul_import5, rt_nul_export5,
@


11.45
log
@Add import/export routines for the DB5 database format.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.44 2000/06/26 21:23:53 bparker Exp $ (BRL)";
d507 1
a507 1
		rt_nul_import5, rt_nul_export5,
@


11.44
log
@Reference rt_rpc_import5 and rt_rpc_export5.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.43 2000/06/26 21:01:38 bparker Exp $ (BRL)";
d381 1
a381 1
		rt_nul_import5, rt_nul_export5,
@


11.43
log
@Reference rt_rhc_import5 and rt_rhc_export5.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.42 2000/06/26 20:41:37 bparker Exp $ (BRL)";
d605 1
a605 1
		rt_nul_import5, rt_nul_export5,
@


11.42
log
@Reference rt_epa_import5 and rt_epa_export5.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.41 2000/06/26 20:21:29 bparker Exp $ (BRL)";
d619 1
a619 1
		rt_nul_import5, rt_nul_export5,
@


11.41
log
@Reference rt_ehy_import5 and rt_ehy_export5.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.40 2000/06/26 20:10:20 cjohnson Exp $ (BRL)";
d633 1
a633 1
		rt_nul_import5, rt_nul_export5,
@


11.40
log
@Add import/export support for db5.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.39 2000/06/26 19:46:50 bparker Exp $ (BRL)";
d647 1
a647 1
		rt_nul_import5, rt_nul_export5,
@


11.39
log
@Reference rt_tgc_import5 and rt_tgc_export5 in rt_functab.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.38 2000/06/26 17:46:41 mike Exp $ (BRL)";
d423 1
a423 1
		rt_nul_import5, rt_nul_export5,
@


11.38
log
@
Added import5 and export5 methods to the function table.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.37 2000/05/24 01:00:25 mike Exp $ (BRL)";
d395 1
a395 1
		rt_nul_import5, rt_nul_export5,
@


11.37
log
@
Revised how 'solid pieces' state is managed from cell to cell.
Added new method to rt_functab, ft_piece_hitsegs.
Changed args to method ft_piece_shot (removed unnecessary args).
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.36 2000/05/08 20:46:56 mike Exp $ (BRL)";
d83 5
d140 5
d367 1
d381 1
d395 1
d409 1
d423 1
d437 1
d451 1
d465 1
d479 1
d493 1
d507 1
d521 1
d535 1
d549 1
d563 1
d577 1
d591 1
d605 1
d619 1
d633 1
d647 1
d661 1
d675 1
d689 1
d703 1
d717 1
d731 1
d745 1
d759 1
d773 1
d787 1
d803 1
d818 1
d892 6
@


11.37.2.1
log
@Mike's changes to handle plate mode BOTS in renderings
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.37 2000/05/24 01:00:25 mike Exp $ (BRL)";
d54 1
a54 2
			struct application *ap, \
			struct seg *seghead )); \
d106 1
a106 2
			struct application *ap, \
			struct seg *seghead )); \
d815 1
a815 2
			struct application *ap,
			struct seg *seghead))
@


11.37.2.2
log
@Added tclget and tcladjust routines
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.37.2.1 2000/11/01 18:43:54 jra Exp $ (BRL)";
a268 6
/* PIPE solid */
BU_EXTERN(int rt_pipe_tclget, (Tcl_Interp *interp,
		CONST struct rt_db_internal *intern, CONST char *attr));
BU_EXTERN(int rt_pipe_tcladjust, (Tcl_Interp *interp,
		struct rt_db_internal *intern, int argc, char **argv));

d557 1
a557 1
		rt_pipe_tclget, rt_pipe_tcladjust, rt_parsetab_tclform,
@


11.36
log
@
Further progress in implementing solid "pieces"
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.35 2000/05/02 01:37:30 mike Exp $ (BRL)";
d52 1
d54 5
a58 2
			struct application *ap, struct seg *seghead, \
			struct resource *resp )); \
d106 5
a110 2
			struct application *ap, struct seg *seghead, \
			struct resource *resp )); \
d354 1
a354 1
		rt_nul_piece_shot,
d367 1
a367 1
		rt_nul_piece_shot,
d380 1
a380 1
		rt_nul_piece_shot,
d393 1
a393 1
		rt_nul_piece_shot,
d406 1
a406 1
		rt_nul_piece_shot,
d419 1
a419 1
		rt_nul_piece_shot,
d432 1
a432 1
		rt_nul_piece_shot,
d445 1
a445 1
		rt_nul_piece_shot,
d458 1
a458 1
		rt_nul_piece_shot,
d471 1
a471 1
		rt_nul_piece_shot,
d484 1
a484 1
		rt_nul_piece_shot,
d497 1
a497 1
		rt_nul_piece_shot,
d510 1
a510 1
		rt_nul_piece_shot,
d523 1
a523 1
		rt_nul_piece_shot,
d536 1
a536 1
		rt_nul_piece_shot,
d549 1
a549 1
		rt_nul_piece_shot,
d562 1
a562 1
		rt_nul_piece_shot,
d575 1
a575 1
		rt_nul_piece_shot,
d588 1
a588 1
		rt_nul_piece_shot,
d601 1
a601 1
		rt_nul_piece_shot,
d614 1
a614 1
		rt_nul_piece_shot,
d627 1
a627 1
		rt_nul_piece_shot,
d640 1
a640 1
		rt_nul_piece_shot,
d653 1
a653 1
		rt_nul_piece_shot,
d666 1
a666 1
		rt_nul_piece_shot,
d679 1
a679 1
		rt_nul_piece_shot,
d692 1
a692 1
		rt_nul_piece_shot,
d705 1
a705 1
		rt_nul_piece_shot,
d718 1
a718 1
		rt_nul_piece_shot,
d731 1
a731 1
		rt_nul_piece_shot,
d744 1
a744 1
		rt_bot_piece_shot,
d759 1
a759 1
		rt_nul_piece_shot,
d773 1
a773 1
		rt_nul_piece_shot,
d813 1
d815 2
a816 1
			struct application *ap,
d818 1
a818 1
			struct resource *resp))
@


11.35
log
@
Changed from RT_ to BU_ macros
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.34 2000/03/03 18:17:10 jra Exp $ (BRL)";
d49 6
d98 6
d347 1
d360 1
d373 1
d386 1
d399 1
d412 1
d425 1
d438 1
d451 1
d464 1
d477 1
d490 1
d503 1
d516 1
d529 1
d542 1
d555 1
d568 1
d581 1
d594 1
d607 1
d620 1
d633 1
d646 1
d659 1
d672 1
d685 1
d698 1
d711 1
d724 1
d737 1
d752 1
d766 1
d804 6
@


11.34
log
@Added CLINE tclget and put routines
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.33 2000/03/02 14:47:28 jra Exp $ (BRL)";
d44 1
a44 1
	RT_EXTERN(int rt_##name##_prep, (struct soltab *stp, \
d46 1
a46 1
	RT_EXTERN(int rt_##name##_shot, (struct soltab *stp,\
d49 2
a50 2
	RT_EXTERN(void rt_##name##_print, (CONST struct soltab *stp)); \
	RT_EXTERN(void rt_##name##_norm, (struct hit *hitp, \
d52 1
a52 1
	RT_EXTERN(void rt_##name##_uv, (struct application *ap, \
d55 1
a55 1
	RT_EXTERN(void rt_##name##_curve, (struct curvature *cvp, \
d57 3
a59 3
	RT_EXTERN(int rt_##name##_class, ()); \
	RT_EXTERN(void rt_##name##_free, (struct soltab *stp)); \
	RT_EXTERN(int rt_##name##_plot, (struct bu_list *vhead, \
d63 1
a63 1
	RT_EXTERN(void rt_##name##_vshot, (struct soltab *stp[], \
d66 1
a66 1
	RT_EXTERN(int rt_##name##_tess, (struct nmgregion **r, \
d70 1
a70 1
	RT_EXTERN(int rt_##name##_tnurb, (struct nmgregion **r, \
d73 1
a73 1
	RT_EXTERN(int rt_##name##_import, (struct rt_db_internal *ip, \
d75 1
a75 1
	RT_EXTERN(int rt_##name##_export, (struct bu_external *ep, \
d78 2
a79 2
	RT_EXTERN(void rt_##name##_ifree, (struct rt_db_internal *ip)); \
	RT_EXTERN(int rt_##name##_describe, (struct bu_vls *str, \
d82 1
a82 1
	RT_EXTERN(int rt_##name##_xform, (struct rt_db_internal *op, \
d88 1
a88 1
	RT_EXTERN(int rt_/**/name/**/_prep, (struct soltab *stp, \
d90 1
a90 1
	RT_EXTERN(int rt_/**/name/**/_shot, (struct soltab *stp, struct xray *rp, \
d92 2
a93 2
	RT_EXTERN(void rt_/**/name/**/_print, (CONST struct soltab *stp)); \
	RT_EXTERN(void rt_/**/name/**/_norm, (struct hit *hitp, \
d95 1
a95 1
	RT_EXTERN(void rt_/**/name/**/_uv, (struct application *ap, \
d98 1
a98 1
	RT_EXTERN(void rt_/**/name/**/_curve, (struct curvature *cvp, \
d100 3
a102 3
	RT_EXTERN(int rt_/**/name/**/_class, ()); \
	RT_EXTERN(void rt_/**/name/**/_free, (struct soltab *stp)); \
	RT_EXTERN(int rt_/**/name/**/_plot, (struct bu_list *vhead, \
d106 1
a106 1
	RT_EXTERN(void rt_/**/name/**/_vshot, (struct soltab *stp[], \
d109 1
a109 1
	RT_EXTERN(int rt_/**/name/**/_tess, (struct nmgregion **r, \
d113 1
a113 1
	RT_EXTERN(int rt_/**/name/**/_tnurb, (struct nmgregion **r, \
d116 1
a116 1
	RT_EXTERN(int rt_/**/name/**/_import, (struct rt_db_internal *ip, \
d118 1
a118 1
	RT_EXTERN(int rt_/**/name/**/_export, (struct bu_external *ep, \
d121 2
a122 2
	RT_EXTERN(void rt_/**/name/**/_ifree, (struct rt_db_internal *ip)); \
	RT_EXTERN(int rt_/**/name/**/_describe, (struct bu_vls *str, \
d125 1
a125 1
	RT_EXTERN(int rt_/**/name/**/_xform, (struct rt_db_internal *op, \
d219 1
a219 1
RT_EXTERN(int rt_comb_import, (struct rt_db_internal *ip,
d221 1
a221 1
RT_EXTERN(int rt_comb_export, (struct bu_external *ep,
d224 2
a225 2
RT_EXTERN(void rt_comb_ifree, (struct rt_db_internal *ip));
RT_EXTERN(int rt_comb_describe, (struct bu_vls *str,
d272 1
a272 1
RT_EXTERN(void rt_vstub, (struct soltab *stp[], struct xray *rp[],
d276 1
a276 1
RT_EXTERN(int rt_generic_xform, (struct rt_db_internal *op, 
d737 1
a737 1
#define DEF(func,args)	func RT_ARGS(args) { \
d739 1
a739 1
#define IDEF(func,args)	func RT_ARGS(args) { \
d741 1
a741 1
#define NDEF(func,args)	func RT_ARGS(args) { \
d744 1
a744 1
#define DEF(func,args)	func RT_ARGS(args) { \
d746 1
a746 1
#define IDEF(func,args)	func RT_ARGS(args) { \
d748 1
a748 1
#define NDEF(func,args)	func RT_ARGS(args) { \
@


11.33
log
@Eliminated FGP solid and added cline solid
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.32 2000/02/10 19:47:46 jra Exp $ (BRL)";
d259 5
d688 1
a688 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.32
log
@Added extrusion and sketch tclget and tcladjust routines
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.31 2000/01/31 13:40:50 jra Exp $ (BRL)";
d213 2
a214 1
RT_DECLARE_INTERFACE(fgp)
d675 8
a682 8
	{RT_FUNCTAB_MAGIC, "ID_FGP", "fgp",
		0,		/* 29 Fastgen plate mode solid */
		rt_fgp_prep,	rt_fgp_shot,	rt_fgp_print,	rt_fgp_norm,
		rt_fgp_uv,	rt_fgp_curve,	rt_fgp_class,	rt_fgp_free,
		rt_fgp_plot,	rt_fgp_vshot,	rt_fgp_tess,	rt_fgp_tnurb,
		rt_fgp_import,	rt_fgp_export,	rt_fgp_ifree,
		rt_fgp_describe,rt_fgp_xform,	rt_fgp_parse,
		sizeof(struct rt_fgp_internal), RT_FGP_INTERNAL_MAGIC,
d906 2
a907 2
	case DBID_FGP:
		id = ID_FGP;
@


11.31
log
@Getting the extrusion and sketch to work - not quite finished
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.30 2000/01/11 20:37:50 mike Exp $ (BRL)";
d256 8
d646 1
a646 1
		rt_sketch_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
d658 1
a658 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.30
log
@
Submodel should use bounding RPP
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.29 2000/01/06 04:37:46 mike Exp $ (BRL)";
d253 4
d638 1
a638 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
d643 1
a643 1
		0,		/* 27 Solid of extrusion */
@


11.29
log
@
ft_xform really needed a dbip parameter so it could pass it along to
ft_export and ft_import
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.28 1999/12/30 19:43:31 mike Exp $ (BRL)";
d651 1
a651 1
		0,		/* 28 Instanced submodel */
@


11.28
log
@
Magic number needs to be a long, not a NULL
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.27 1999/12/22 02:18:01 mike Exp $ (BRL)";
d84 1
a84 1
			int free)); \
d127 1
a127 1
			int free)); \
d256 2
d260 1
a260 1
	int free));
d783 1
a783 1
			int free))
d945 1
a945 1
rt_generic_xform(op, mat, ip, free)
d950 1
d956 2
d961 1
a961 1
	if( rt_functab[id].ft_export( &ext, ip, 1.0, DBI_NULL ) < 0 )  {
d971 1
a971 1
	if( rt_functab[id].ft_import( op, &ext, mat, DBI_NULL ) < 0 )  {
@


11.27
log
@
Eliminated dead vars
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.26 1999/12/06 20:17:37 jra Exp $ (BRL)";
d699 1
a699 1
	{NULL, ">ID_MAXIMUM", ">id_max",
@


11.26
log
@
Start of Tcl interface to the BOT solid.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.25 1999/12/03 20:38:54 mike Exp $ (BRL)";
a918 1
	register int				i;
@


11.25
log
@
Set ft_use_rpp for a few more solids.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.24 1999/11/26 21:46:50 mike Exp $ (BRL)";
d247 5
d680 1
a680 1
		rt_parsetab_tclget, rt_parsetab_tcladjust, rt_parsetab_tclform,
@


11.24
log
@
Lint cleanups
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.23 1999/11/19 02:34:14 mike Exp $ (BRL)";
d428 1
a428 1
		1,		/* 10 */
d452 1
a452 1
		0,		/* 12 */
d464 1
a464 1
		0,		/* 13 */
d488 1
a488 1
		0,		/* 15 */
d560 1
a560 1
		0,		/* 21 */
d572 1
a572 1
		0,		/* 22 */
@


11.23
log
@
Fully committed to ft_tclget() et.al.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.22 1999/11/19 01:52:00 mike Exp $ (BRL)";
d80 1
a80 1
			struct rt_db_internal *ip, int verbose, \
d123 1
a123 1
			struct rt_db_internal *ip, int verbose, \
d225 1
a225 1
		struct rt_db_internal *ip, int verbose,
d772 1
a772 1
			struct rt_db_internal *ip,
@


11.22
log
@
Very initial support for ft_tclget / ft_tcladjust / ft_tclform / ft_make
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.21 1999/11/18 03:21:26 mike Exp $ (BRL)";
d237 11
d255 51
d315 2
d327 2
d339 2
d351 2
d363 2
d375 2
d387 2
d399 2
d411 2
d423 2
d435 2
d447 2
d459 2
d471 2
d483 2
d495 2
d507 2
d519 2
d531 2
d543 2
d555 2
d567 2
d579 2
d591 2
d603 2
d615 2
d627 2
d639 2
d651 2
d663 2
d675 2
d702 2
@


11.21
log
@
Wrote rt_get_functab_by_label()
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.20 1999/11/17 04:39:20 mike Exp $ (BRL)";
d26 3
d227 9
d565 2
@


11.20
log
@
Added 3 new fields to rt_functab, in order to better support the TCL
interface to db get and db put.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.19 1999/11/17 03:44:41 mike Exp $ (BRL)";
d762 20
@


11.19
log
@
Added "label" field to rt_functab, made it CONST.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.18 1999/11/17 03:22:07 mike Exp $ (BRL)";
d27 1
d32 1
d35 4
d81 2
a82 1
			int free));
d124 2
a125 1
			int free));
d130 1
d133 1
d136 1
d139 1
d142 1
d145 1
d147 1
d150 1
d153 1
d156 1
d159 1
d162 1
d165 1
d168 1
d171 1
d174 1
d177 1
d180 1
d183 1
d186 1
d189 1
d192 1
d195 1
d198 1
d201 1
d204 1
d206 1
d209 1
d211 1
d239 2
a240 1
		rt_nul_describe,rt_nul_xform,
d249 2
a250 1
		rt_tor_describe,rt_tor_xform,
d259 2
a260 1
		rt_tgc_describe,rt_tgc_xform,
d269 2
a270 1
		rt_ell_describe,rt_ell_xform,
d279 2
a280 1
		rt_arb_describe,rt_arb_xform,
d289 2
a290 1
		rt_ars_describe,rt_ars_xform,
d299 2
a300 1
		rt_hlf_describe,rt_generic_xform,
d309 2
a310 1
		rt_tgc_describe,rt_rec_xform,
d319 2
a320 1
		rt_pg_describe, rt_pg_xform,
d329 2
a330 1
		rt_nurb_describe,rt_nurb_xform,
d339 2
a340 1
		rt_ell_describe,rt_sph_xform,
d349 2
a350 1
		rt_nmg_describe,rt_nmg_xform,
d359 2
a360 1
		rt_ebm_describe,rt_ebm_xform,
d369 2
a370 1
		rt_vol_describe,rt_vol_xform,
d379 2
a380 1
		rt_arbn_describe,rt_arbn_xform,
d389 2
a390 1
		rt_pipe_describe,rt_pipe_xform,
d399 2
a400 1
		rt_part_describe,rt_part_xform,
d409 2
a410 1
		rt_rpc_describe,rt_rpc_xform,
d419 2
a420 1
		rt_rhc_describe,rt_rhc_xform,
d429 2
a430 1
		rt_epa_describe,rt_epa_xform,
d439 2
a440 1
		rt_ehy_describe,rt_ehy_xform,
d449 2
a450 1
		rt_eto_describe,rt_eto_xform,
d459 2
a460 1
		rt_grp_describe,rt_grp_xform,
d469 2
a470 1
		rt_nul_describe,rt_nul_xform,
d479 2
a480 1
		rt_hf_describe,rt_hf_xform,
d489 2
a490 1
		rt_dsp_describe,rt_dsp_xform,
d495 2
a496 2
		rt_sketch_prep,	rt_sketch_shot,	rt_sketch_print,	rt_sketch_norm,
		rt_sketch_uv,	rt_sketch_curve,	rt_sketch_class,	rt_sketch_free,
d498 3
a500 2
		rt_sketch_import,	rt_sketch_export,	rt_sketch_ifree,
		rt_sketch_describe,rt_sketch_xform,
d506 1
a506 1
		rt_extrude_uv,	rt_extrude_curve,	rt_extrude_class,	rt_extrude_free,
d509 2
a510 1
		rt_extrude_describe,rt_extrude_xform,
d519 2
a520 1
		rt_submodel_describe,	rt_submodel_xform,
d529 2
a530 1
		rt_fgp_describe,rt_fgp_xform,
d539 2
a540 1
		rt_bot_describe,rt_bot_xform,
d551 2
a552 1
		rt_comb_describe,rt_generic_xform,
d562 2
a563 1
		rt_nul_describe,rt_nul_xform
@


11.18
log
@
Added curley braces.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.17 1999/11/17 02:42:04 mike Exp $ (BRL)";
d195 3
a197 2
struct rt_functab rt_functab[ID_MAXIMUM+3] = {
	{RT_FUNCTAB_MAGIC, "ID_NULL",	0,		/* 0 */
d205 2
a206 1
	{RT_FUNCTAB_MAGIC, "ID_TOR",	1,		/* 1 */
d214 2
a215 1
	{RT_FUNCTAB_MAGIC, "ID_TGC",	1,		/* 2 */
d223 2
a224 1
	{RT_FUNCTAB_MAGIC, "ID_ELL",	1,		/* 3 */
d232 2
a233 1
	{RT_FUNCTAB_MAGIC, "ID_ARB8",	0,		/* 4 */
d241 2
a242 1
	{RT_FUNCTAB_MAGIC, "ID_ARS",	1,		/* 5 */
d250 2
a251 1
	{RT_FUNCTAB_MAGIC, "ID_HALF",	0,		/* 6 */
d259 2
a260 1
	{RT_FUNCTAB_MAGIC, "ID_REC",	1,		/* 7 */
d268 2
a269 1
	{RT_FUNCTAB_MAGIC, "ID_POLY",	1,		/* 8 */
d277 2
a278 1
	{RT_FUNCTAB_MAGIC, "ID_BSPLINE",	1,		/* 9 */
d286 2
a287 1
	{RT_FUNCTAB_MAGIC, "ID_SPH",	1,		/* 10 */
d295 2
a296 1
	{RT_FUNCTAB_MAGIC, "ID_NMG",	1,		/* 11 */
d304 2
a305 1
	{RT_FUNCTAB_MAGIC, "ID_EBM",	0,		/* 12 */
d313 2
a314 1
	{RT_FUNCTAB_MAGIC, "ID_VOL",	0,		/* 13 */
d322 2
a323 1
	{RT_FUNCTAB_MAGIC, "ID_ARBN",	0,		/* 14 */
d331 2
a332 1
	{RT_FUNCTAB_MAGIC, "ID_PIPE",	0,		/* 15 */
d340 2
a341 1
	{RT_FUNCTAB_MAGIC, "ID_PARTICLE",	0,		/* 16 */
d349 2
a350 1
	{RT_FUNCTAB_MAGIC, "ID_RPC",	0,		/* 17 */
d358 2
a359 1
	{RT_FUNCTAB_MAGIC, "ID_RHC",	0,		/* 18 */
d367 2
a368 1
	{RT_FUNCTAB_MAGIC, "ID_EPA",	0,		/* 19 */
d376 2
a377 1
	{RT_FUNCTAB_MAGIC, "ID_EHY",	0,		/* 20 */
d385 2
a386 1
	{RT_FUNCTAB_MAGIC, "ID_ETO",	0,		/* 21 */
d394 2
a395 1
	{RT_FUNCTAB_MAGIC, "ID_GRIP",	0,		/* 22 */
d403 2
a404 1
	{RT_FUNCTAB_MAGIC, "ID_JOINT",	0,		/* 23 -- XXX unimplemented */
d412 2
a413 1
	{RT_FUNCTAB_MAGIC, "ID_HF",	0,		/* 24 */
d421 2
a422 1
	{RT_FUNCTAB_MAGIC, "ID_DSP",	0,		/* 25 Displacement Map (alt. height field) */
d430 2
a431 1
	{RT_FUNCTAB_MAGIC, "ID_SKETCH",	0,		/* 26 2D sketch */
d439 2
a440 1
	{RT_FUNCTAB_MAGIC, "ID_EXTRUDE",	0,		/* 27 Solid of extrusion */
d448 2
a449 1
	{RT_FUNCTAB_MAGIC, "ID_SUBMODEL",	0,		/* 28 Instanced submodel */
d457 2
a458 1
	{RT_FUNCTAB_MAGIC, "ID_FGP",	0,		/* 29 Fastgen plate mode solid */
d466 2
a467 1
	{RT_FUNCTAB_MAGIC, "ID_BOT",	0,		/* 30  Bag o' Triangles */
d477 2
a478 1
	{RT_FUNCTAB_MAGIC, "ID_COMBINATION",	0,
d487 2
a488 1
	{NULL, ">ID_MAXIMUM",	0,
d496 1
a496 1
int rt_nfunctab = sizeof(rt_functab)/sizeof(struct rt_functab);
@


11.17
log
@
Added idb_meth and st_meth pointers to allow direct access to per-solid
methods, C++ style.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.16 1999/11/08 15:10:00 jra Exp $ (BRL)";
d196 1
a196 1
	RT_FUNCTAB_MAGIC, "ID_NULL",	0,		/* 0 */
d202 3
a204 2
		
	RT_FUNCTAB_MAGIC, "ID_TOR",	1,		/* 1 */
d210 1
d212 1
a212 1
	RT_FUNCTAB_MAGIC, "ID_TGC",	1,		/* 2 */
d218 1
d220 1
a220 1
	RT_FUNCTAB_MAGIC, "ID_ELL",	1,		/* 3 */
d226 1
d228 1
a228 1
	RT_FUNCTAB_MAGIC, "ID_ARB8",	0,		/* 4 */
d234 1
d236 1
a236 1
	RT_FUNCTAB_MAGIC, "ID_ARS",	1,		/* 5 */
d242 1
d244 1
a244 1
	RT_FUNCTAB_MAGIC, "ID_HALF",	0,		/* 6 */
d250 1
d252 1
a252 1
	RT_FUNCTAB_MAGIC, "ID_REC",	1,		/* 7 */
d258 1
d260 1
a260 1
	RT_FUNCTAB_MAGIC, "ID_POLY",	1,		/* 8 */
d266 1
d268 1
a268 1
	RT_FUNCTAB_MAGIC, "ID_BSPLINE",	1,		/* 9 */
d274 1
d276 1
a276 1
	RT_FUNCTAB_MAGIC, "ID_SPH",	1,		/* 10 */
d282 1
d284 1
a284 1
	RT_FUNCTAB_MAGIC, "ID_NMG",	1,		/* 11 */
d290 1
d292 1
a292 1
	RT_FUNCTAB_MAGIC, "ID_EBM",	0,		/* 12 */
d298 1
d300 1
a300 1
	RT_FUNCTAB_MAGIC, "ID_VOL",	0,		/* 13 */
d306 1
d308 1
a308 1
	RT_FUNCTAB_MAGIC, "ID_ARBN",	0,		/* 14 */
d314 1
d316 1
a316 1
	RT_FUNCTAB_MAGIC, "ID_PIPE",	0,		/* 15 */
d322 1
d324 1
a324 1
	RT_FUNCTAB_MAGIC, "ID_PARTICLE",	0,		/* 16 */
d330 1
d332 1
a332 1
	RT_FUNCTAB_MAGIC, "ID_RPC",	0,		/* 17 */
d338 1
d340 1
a340 1
	RT_FUNCTAB_MAGIC, "ID_RHC",	0,		/* 18 */
d346 1
d348 1
a348 1
	RT_FUNCTAB_MAGIC, "ID_EPA",	0,		/* 19 */
d354 1
d356 1
a356 1
	RT_FUNCTAB_MAGIC, "ID_EHY",	0,		/* 20 */
d362 1
d364 1
a364 1
	RT_FUNCTAB_MAGIC, "ID_ETO",	0,		/* 21 */
d370 1
d372 1
a372 1
	RT_FUNCTAB_MAGIC, "ID_GRIP",	0,		/* 22 */
d378 1
d380 1
a380 1
	RT_FUNCTAB_MAGIC, "ID_JOINT",	0,		/* 23 -- XXX unimplemented */
d386 1
d388 1
a388 1
	RT_FUNCTAB_MAGIC, "ID_HF",	0,		/* 24 */
d394 1
d396 1
a396 1
	RT_FUNCTAB_MAGIC, "ID_DSP",	0,		/* 25 Displacement Map (alt. height field) */
d402 1
d404 1
a404 1
	RT_FUNCTAB_MAGIC, "ID_SKETCH",	0,		/* 26 2D sketch */
d410 1
d412 1
a412 1
	RT_FUNCTAB_MAGIC, "ID_EXTRUDE",	0,		/* 27 Solid of extrusion */
d418 1
d420 1
a420 1
	RT_FUNCTAB_MAGIC, "ID_SUBMODEL",	0,		/* 28 Instanced submodel */
d426 1
d428 1
a428 1
	RT_FUNCTAB_MAGIC, "ID_FGP",	0,		/* 29 Fastgen plate mode solid */
d434 1
d436 1
a436 1
	RT_FUNCTAB_MAGIC, "ID_BOT",	0,		/* 30  Bag o' Triangles */
d442 1
d446 1
a446 1
	RT_FUNCTAB_MAGIC, "ID_COMBINATION",	0,
d452 1
d455 1
a455 1
	NULL, ">ID_MAXIMUM",	0,
d461 1
@


11.16
log
@
Added BOT solid.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.15 1999/10/12 13:58:13 jra Exp $ (BRL)";
d196 1
a196 1
	"ID_NULL",	0,		/* 0 */
d203 1
a203 1
	"ID_TOR",	1,		/* 1 */
d210 1
a210 1
	"ID_TGC",	1,		/* 2 */
d217 1
a217 1
	"ID_ELL",	1,		/* 3 */
d224 1
a224 1
	"ID_ARB8",	0,		/* 4 */
d231 1
a231 1
	"ID_ARS",	1,		/* 5 */
d238 1
a238 1
	"ID_HALF",	0,		/* 6 */
d245 1
a245 1
	"ID_REC",	1,		/* 7 */
d252 1
a252 1
	"ID_POLY",	1,		/* 8 */
d259 1
a259 1
	"ID_BSPLINE",	1,		/* 9 */
d266 1
a266 1
	"ID_SPH",	1,		/* 10 */
d273 1
a273 1
	"ID_NMG",	1,		/* 11 */
d280 1
a280 1
	"ID_EBM",	0,		/* 12 */
d287 1
a287 1
	"ID_VOL",	0,		/* 13 */
d294 1
a294 1
	"ID_ARBN",	0,		/* 14 */
d301 1
a301 1
	"ID_PIPE",	0,		/* 15 */
d308 1
a308 1
	"ID_PARTICLE",	0,		/* 16 */
d315 1
a315 1
	"ID_RPC",	0,		/* 17 */
d322 1
a322 1
	"ID_RHC",	0,		/* 18 */
d329 1
a329 1
	"ID_EPA",	0,		/* 19 */
d336 1
a336 1
	"ID_EHY",	0,		/* 20 */
d343 1
a343 1
	"ID_ETO",	0,		/* 21 */
d350 1
a350 1
	"ID_GRIP",	0,		/* 22 */
d357 1
a357 1
	"ID_JOINT",	0,		/* 23 -- XXX unimplemented */
d364 1
a364 1
	"ID_HF",	0,		/* 24 */
d371 1
a371 1
	"ID_DSP",	0,		/* 25 Displacement Map (alt. height field) */
d378 1
a378 1
	"ID_SKETCH",	0,		/* 26 2D sketch */
d385 1
a385 1
	"ID_EXTRUDE",	0,		/* 27 Solid of extrusion */
d392 1
a392 1
	"ID_SUBMODEL",	0,		/* 28 Instanced submodel */
d399 1
a399 1
	"ID_FGP",	0,		/* 29 Fastgen plate mode solid */
d406 1
a406 1
	"ID_BOT",	0,		/* 30  Bag o' Triangles */
d415 1
a415 1
	"ID_COMBINATION",	0,
d423 1
a423 1
	">ID_MAXIMUM",	0,
@


11.15
log
@Added fgp solid (FastGen Plate mode)
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.14 1999/06/03 01:39:16 mike Exp $ (BRL)";
d175 1
d399 1
a399 1
	"ID_FGP",	0,		/* 19 */
d406 7
d612 3
@


11.14
log
@
sed4
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.13 1999/06/03 01:21:30 mike Exp $ (BRL)";
d174 1
d398 7
d601 3
@


11.13
log
@
sed4
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /c/CVS/brlcad/librt/table.c,v 11.12 1998/04/03 00:41:56 mike Exp $ (BRL)";
d308 1
a308 1
		rt_part_uv,	rt_part_curve,	rt_part_class,	rt_pabu_free,
@


11.12
log
@Added submodel object.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.11 1998/04/03 00:19:18 mike Exp mike $ (BRL)";
d50 1
a50 1
	RT_EXTERN(int rt_##name##_plot, (struct rt_list *vhead, \
d53 1
a53 1
			CONST struct rt_tol *tol)); \
d60 1
a60 1
			CONST struct rt_tol *tol)); \
d63 1
a63 1
			CONST struct rt_tol *tol)); \
d65 2
a66 2
			CONST struct rt_external *ep, CONST mat_t mat, CONST struct db_i *dbip)); \
	RT_EXTERN(int rt_##name##_export, (struct rt_external *ep, \
d70 1
a70 1
	RT_EXTERN(int rt_##name##_describe, (struct rt_vls *str, \
d92 1
a92 1
	RT_EXTERN(int rt_/**/name/**/_plot, (struct rt_list *vhead, \
d95 1
a95 1
			CONST struct rt_tol *tol)); \
d102 1
a102 1
			CONST struct rt_tol *tol)); \
d105 1
a105 1
			CONST struct rt_tol *tol)); \
d107 2
a108 2
			CONST struct rt_external *ep, CONST mat_t mat, CONST struct db_i *dbip )); \
	RT_EXTERN(int rt_/**/name/**/_export, (struct rt_external *ep, \
d112 1
a112 1
	RT_EXTERN(int rt_/**/name/**/_describe, (struct rt_vls *str, \
d177 2
a178 2
		CONST struct rt_external *ep, CONST mat_t mat, CONST struct db_i *dbip ));
RT_EXTERN(int rt_comb_export, (struct rt_external *ep,
d182 1
a182 1
RT_EXTERN(int rt_comb_describe, (struct rt_vls *str,
d308 1
a308 1
		rt_part_uv,	rt_part_curve,	rt_part_class,	rt_part_free,
d421 1
a421 1
	rt_log(#func " unimplemented\n"); return; }
d423 1
a423 1
	rt_log(#func " unimplemented\n"); return(0); }
d425 1
a425 1
	rt_log(#func " unimplemented\n"); return(-1); }
d428 1
a428 1
	rt_log("func unimplemented\n"); return; }
d430 1
a430 1
	rt_log("func unimplemented\n"); return(0); }
d432 1
a432 1
	rt_log("func unimplemented\n"); return(-1); }
d455 1
a455 1
int NDEF(rt_nul_plot,(struct rt_list *vhead,
d458 1
a458 1
			CONST struct rt_tol *tol))
d467 1
a467 1
			CONST struct rt_tol *tol))
d471 1
a471 1
			CONST struct rt_tol *tol))
d473 1
a473 1
			CONST struct rt_external *ep,
d475 1
a475 1
int NDEF(rt_nul_export,(struct rt_external *ep,
d479 1
a479 1
int NDEF(rt_nul_describe,(struct rt_vls *str,
d533 1
a533 1
struct rt_external	*ep;
d538 1
a538 1
	RT_CK_EXTERNAL( ep );
d572 1
a572 1
		rt_log("rt_id_solid(%s):  String solid type '%s' unknown\n",
d595 1
a595 1
		rt_log("rt_id_solid:  u_id=x%x unknown\n", rec->u_id);
d600 1
a600 1
		rt_log("rt_id_solid: internal error, id=%d?\n", id);
d627 1
a627 1
	struct rt_external	ext;
d632 1
a632 1
	RT_INIT_EXTERNAL(&ext);
d635 1
a635 1
		rt_log("rt_generic_xform():  %s export failure\n",
d645 1
a645 1
		rt_log("rt_generic_xform():  solid import failure\n");
@


11.11
log
@JRA additions to add parameter to ft_import and ft_export.
Also added SKETCH and EXTRUDE geometry types.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.10 1997/05/22 09:29:51 butler Exp jra $ (BRL)";
d172 2
d390 7
d567 3
@


11.10
log
@added dsp solid
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.9 1997/05/19 17:04:32 butler Exp butler $ (BRL)";
d65 1
a65 1
			CONST struct rt_external *ep, CONST mat_t mat)); \
d68 1
a68 1
			double local2mm)); \
d107 1
a107 1
			CONST struct rt_external *ep, CONST mat_t mat)); \
d110 1
a110 1
			double local2mm)); \
d169 3
d175 1
a175 1
		CONST struct rt_external *ep, CONST mat_t mat));
d178 1
a178 1
		double local2mm));
d367 1
a367 1
	"ID_DSP",	0,		/* 25 In development */
d374 14
d465 1
a465 1
			CONST mat_t mat))
d468 1
a468 1
			double local2mm))
d576 6
d622 1
a622 1
	if( rt_functab[id].ft_export( &ext, ip, 1.0 ) < 0 )  {
d632 1
a632 1
	if( rt_functab[id].ft_import( op, &ext, mat ) < 0 )  {
@


11.9
log
@deleted FBM solid
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.8 1997/04/27 08:00:45 butler Exp butler $ (BRL)";
d167 2
a168 2
#define rt_fbm_xform rt_generic_xform
RT_DECLARE_INTERFACE(fbm)
d364 6
d538 3
@


11.8
log
@removed FBM
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.7 1997/04/25 06:05:15 butler Exp butler $ (BRL)";
a487 1
	ID_FBM,		/* HACK: FBM 32: fBm sphere solid */
@


11.7
log
@added g_fbm.c support
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.6 1997/01/30 01:45:12 mike Exp butler $ (BRL)";
a363 6
	"ID_FBM",	0,		/* 25  */
		rt_nul_prep,	rt_nul_shot,	rt_nul_print,	rt_nul_norm,
		rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,	rt_nul_tnurb,
		rt_fbm_import,	rt_fbm_export,	rt_fbm_ifree,
		rt_nul_describe,rt_nul_xform,
@


11.6
log
@Added ID_COMBINATION as a "full" member of the table.
Always at the end.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.5 1995/12/02 03:25:15 mike Exp mike $ (BRL)";
d167 2
d364 7
d494 1
@


11.5
log
@*** empty log message ***
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.2 1995/11/29 02:15:02 mike Exp $ (BRL)";
d168 11
d186 1
a186 1
struct rt_functab rt_functab[ID_MAXIMUM+2] = {
d361 10
@


11.4
log
@Added ellipsoid and sphere tnurb tiling/tesselation.
@
text
@d193 1
a193 1
		rt_tgc_plot,	rt_tgc_vshot,	rt_tgc_tess,	rt_nul_tnurb,
@


11.3
log
@Added ARB "tile" / tesselator.
@
text
@d200 1
a200 1
		rt_ell_plot,	rt_ell_vshot,	rt_ell_tess,	rt_nul_tnurb,
d249 1
a249 1
		rt_ell_plot,	rt_sph_vshot,	rt_ell_tess,	rt_nul_tnurb,
@


11.2
log
@Added _tnurb interface.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 11.1 95/01/04 09:58:43 mike Rel4_4 $ (BRL)";
d207 1
a207 1
		rt_arb_plot,	rt_arb_vshot,	rt_arb_tess,	rt_nul_tnurb,
@


11.1
log
@Release_4.4
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.12 94/11/03 14:33:32 cjohnson Exp $ (BRL)";
d61 3
d103 3
d179 1
a179 1
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,
d186 1
a186 1
		rt_tor_plot,	rt_tor_vshot,	rt_tor_tess,
d193 1
a193 1
		rt_tgc_plot,	rt_tgc_vshot,	rt_tgc_tess,
d200 1
a200 1
		rt_ell_plot,	rt_ell_vshot,	rt_ell_tess,
d207 1
a207 1
		rt_arb_plot,	rt_arb_vshot,	rt_arb_tess,
d214 1
a214 1
		rt_ars_plot,	rt_vstub,	rt_ars_tess,
d221 1
a221 1
		rt_hlf_plot,	rt_hlf_vshot,	rt_hlf_tess,
d228 1
a228 1
		rt_tgc_plot,	rt_rec_vshot,	rt_tgc_tess,
d235 1
a235 1
		rt_pg_plot,	rt_vstub,	rt_pg_tess,
d242 1
a242 1
		rt_nurb_plot,	rt_vstub,	rt_nurb_tess,
d249 1
a249 1
		rt_ell_plot,	rt_sph_vshot,	rt_ell_tess,
d256 1
a256 1
		rt_nmg_plot,	rt_nmg_vshot,	rt_nmg_tess,
d263 1
a263 1
		rt_ebm_plot,	rt_vstub,	rt_ebm_tess,
d270 1
a270 1
		rt_vol_plot,	rt_vstub,	rt_vol_tess,
d277 1
a277 1
		rt_arbn_plot,	rt_arbn_vshot,	rt_arbn_tess,
d284 1
a284 1
		rt_pipe_plot,	rt_pipe_vshot,	rt_pipe_tess,
d291 1
a291 1
		rt_part_plot,	rt_part_vshot,	rt_part_tess,
d298 1
a298 1
		rt_rpc_plot,	rt_rpc_vshot,	rt_rpc_tess,
d305 1
a305 1
		rt_rhc_plot,	rt_rhc_vshot,	rt_rhc_tess,
d312 1
a312 1
		rt_epa_plot,	rt_epa_vshot,	rt_epa_tess,
d319 1
a319 1
		rt_ehy_plot,	rt_ehy_vshot,	rt_ehy_tess,
d326 1
a326 1
		rt_eto_plot,	rt_eto_vshot,	rt_eto_tess,
d333 1
a333 1
		rt_grp_plot,	rt_grp_vshot,	rt_grp_tess,
d340 1
a340 1
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,
d347 1
a347 1
		rt_hf_plot,	rt_vstub,	rt_hf_tess,
d354 1
a354 1
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,
d411 4
@


10.12
log
@Change strncmp() to strcmp() with in rt_id_solid()
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.11 1994/10/25 22:53:34 mike Exp cjohnson $ (BRL)";
@


10.11
log
@Fixed Chris's omitting ID_JOINT table entry (Grrr).
Added Height Field.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.10 94/09/01 16:30:22 jra Exp Locker: mike $ (BRL)";
d490 1
a490 1
		if( strncmp( rec->ss.ss_keyword, "ebm", 3 ) == 0 )  {
d493 1
a493 1
		} else if( strncmp( rec->ss.ss_keyword, "vol", 3 ) == 0 )  {
d496 1
a496 1
		} else if( strncmp( rec->ss.ss_keyword, "hf", 2 ) == 0 )  {
@


10.10
log
@Added a call to db_free_external to rt_generic_xform.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.9 94/08/10 20:16:06 gdurf Exp Locker: jra $ (BRL)";
d159 2
d170 1
a170 1
	"ID_NULL",	0,
d177 1
a177 1
	"ID_TOR",	1,
d184 1
a184 1
	"ID_TGC",	1,
d191 1
a191 1
	"ID_ELL",	1,
d198 1
a198 1
	"ID_ARB8",	0,
d205 1
a205 1
	"ID_ARS",	1,
d212 1
a212 1
	"ID_HALF",	0,
d219 1
a219 1
	"ID_REC",	1,
d226 1
a226 1
	"ID_POLY",	1,
d233 1
a233 1
	"ID_BSPLINE",	1,
d240 1
a240 1
	"ID_SPH",	1,
d247 1
a247 1
	"ID_NMG",	1,
d254 1
a254 1
	"ID_EBM",	0,
d261 1
a261 1
	"ID_VOL",	0,
d268 1
a268 1
	"ID_ARBN",	0,
d275 1
a275 1
	"ID_PIPE",	0,
d282 1
a282 1
	"ID_PARTICLE",	0,
d289 1
a289 1
	"ID_RPC",	0,
d296 1
a296 1
	"ID_RHC",	0,
d303 1
a303 1
	"ID_EPA",	0,
d310 1
a310 1
	"ID_EHY",	0,
d317 1
a317 1
	"ID_ETO",	0,
d324 1
a324 1
	"ID_GRIP",	0,
d331 14
d495 3
@


10.9
log
@Factored ifdefs
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.8 1994/03/11 06:59:27 cjohnson Exp gdurf $ (BRL)";
d551 3
@


10.8
log
@Add references to new pseudo solid "grip"
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.6 1994/03/07 18:19:16 cjohnson Exp $ (BRL)";
d22 2
d33 1
a33 1
#if (__STDC__ || defined(__convexc__) ) && !alliant && !apollo
@


10.7
log
@ANSI lint
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.6 93/11/10 04:04:16 cjohnson Exp Locker: mike $ (BRL)";
d155 2
d320 7
d435 1
@


10.6
log
@The generic xform is working and all soilds call rt_generic_xform
or have transform code in the g_XXX.c modual.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.5 1993/11/10 00:56:31 cjohnson Exp cjohnson $ (BRL)";
d516 1
a516 1
CONST int		free;
@


10.5
log
@Add xform to the function tables.  For the time being rt_XXX_xform calls
a generic xformation routine which uses export/import to do the
transformation.  As each solid is worked on, the new routine should
be fixed.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.4 1993/04/03 04:39:29 mike Exp cjohnson $ (BRL)";
d70 1
a70 1
			int free, CONST char *name));
d109 1
a109 1
			int free, CONST char *name));
d161 1
a161 1
	int free, CONST char *name));
d211 1
a211 1
		rt_hlf_describe,rt_hlf_xform,
d391 1
a391 1
			int free, CONST char *name))
d512 1
a512 1
rt_generic_xform(op, mat, ip, free, name)
d516 1
a516 2
int			free;
CONST char		*name;
d526 2
a527 2
		rt_log("rt_generic_xform(%s):  %s export failure\n",
			name, rt_functab[id].ft_name);
d536 1
a536 2
		rt_log("rt_generic_xform(%s):  solid import failure\n",
			name);
@


10.4
log
@tol args are now CONST
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.3 92/07/22 03:55:20 butler Exp Locker: mike $ (BRL)";
d67 4
a70 1
			double mm2local));
d106 4
a109 1
			double mm2local));
d114 1
d116 1
d118 1
d120 1
d122 1
d125 1
d127 1
d129 1
d131 1
d133 1
d135 1
d137 1
d139 1
d141 1
d143 1
d145 1
d147 1
d149 1
d151 1
d153 1
d159 3
d169 1
a169 1
		rt_nul_describe,
d176 1
a176 1
		rt_tor_describe,
d183 1
a183 1
		rt_tgc_describe,
d190 1
a190 1
		rt_ell_describe,
d197 1
a197 1
		rt_arb_describe,
d204 1
a204 1
		rt_ars_describe,
d211 1
a211 1
		rt_hlf_describe,
d218 1
a218 1
		rt_tgc_describe,
d225 1
a225 1
		rt_pg_describe,
d232 1
a232 1
		rt_nurb_describe,
d239 1
a239 1
		rt_ell_describe,
d246 1
a246 1
		rt_nmg_describe,
d253 1
a253 1
		rt_ebm_describe,
d260 1
a260 1
		rt_vol_describe,
d267 1
a267 1
		rt_arbn_describe,
d274 1
a274 1
		rt_pipe_describe,
d281 1
a281 1
		rt_part_describe,
d288 1
a288 1
		rt_rpc_describe,
d295 1
a295 1
		rt_rhc_describe,
d302 1
a302 1
		rt_epa_describe,
d309 1
a309 1
		rt_ehy_describe,
d316 1
a316 1
		rt_eto_describe,
d323 1
a323 1
		rt_nul_describe
d389 3
d497 47
@


10.3
log
@tried to fix SGI compiler bug with different function prototype.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.2 92/02/14 15:29:42 mmark Exp Locker: butler $ (BRL)";
d51 1
a51 1
			struct rt_tol *tol)); \
d58 1
a58 1
			struct rt_tol *tol)); \
d87 1
a87 1
			struct rt_tol *tol)); \
d94 1
a94 1
			struct rt_tol *tol)); \
d340 1
a340 1
			struct rt_tol *tol))
d349 1
a349 1
			struct rt_tol *tol))
@


10.2
log
@added erim solids
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 10.1 91/10/12 06:41:04 mike Rel4_0 Locker: mmark $ (BRL)";
d35 2
a36 1
	RT_EXTERN(int rt_##name##_shot, (struct soltab *stp, struct xray *rp, \
@


10.1
log
@Release_4.0
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.41 91/10/01 02:49:29 butler Exp $ (BRL)";
d123 5
d253 35
d388 5
@


9.41
log
@added convex to a '#if'
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.40 91/08/29 22:12:18 mike Exp $ (BRL)";
@


9.40
log
@ANSI #defines
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.39 91/06/29 22:14:13 mike Exp $ (BRL)";
d31 1
a31 1
#if __STDC__ && !alliant && !apollo
@


9.39
log
@ANSI lint
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.38 91/06/22 22:30:51 mike Exp $ (BRL)";
d260 1
d262 7
d274 1
@


9.38
log
@Tolerance can be had from ap->a_rt_i->rti_tol, so it is no longer
passed as a parameter on ft_prep, ft_shot, or ft_vshot.
ft_vshot calling sequence also changed to use application structure.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.37 91/06/14 06:26:57 mike Exp $ (BRL)";
d37 1
a37 1
	RT_EXTERN(void rt_##name##_print, (struct soltab *stp)); \
d59 1
a59 1
			struct rt_external *ep, mat_t mat)); \
d61 1
a61 1
			struct rt_db_internal *ip, \
d73 1
a73 1
	RT_EXTERN(void rt_/**/name/**/_print, (struct soltab *stp)); \
d95 1
a95 1
			struct rt_external *ep, mat_t mat)); \
d97 1
a97 1
			struct rt_db_internal *ip, \
d274 1
a274 1
void DEF(rt_nul_print,(struct soltab *stp))
d301 2
a302 2
			struct rt_external *ep,
			mat_t mat))
d304 1
a304 1
			struct rt_db_internal *ip,
@


9.37
log
@Modified for new string solid database record.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.36 91/05/18 03:03:42 mike Exp $ (BRL)";
d34 1
a34 2
			struct rt_db_internal *ip, struct rt_i *rtip, \
			CONST struct rt_tol *tol)); \
d36 1
a36 2
			struct application *ap, struct seg *seghead, \
			CONST struct rt_tol *tol)); \
d53 1
a53 2
			struct seg segp[], int n, struct resource *resp, \
			CONST struct rt_tol *tol)); \
d70 1
a70 2
			struct rt_db_internal *ip, struct rt_i *rtip, \
			CONST struct rt_tol *)); \
d72 1
a72 2
			struct application *ap, struct seg *seghead, \
			CONST struct rt_tol *tol)); \
d89 1
a89 2
			struct seg segp[], int n, struct resource *resp, \
			CONST struct rt_tol *tol)); \
d124 3
a126 1
extern void	rt_vstub();	/* XXX vshoot.c */
d269 1
a269 2
			struct rt_i *rtip,
			CONST struct rt_tol *tol))
d273 1
a273 2
			struct seg *seghead,
			CONST struct rt_tol *tol))
d294 1
a294 2
			struct resource *resp,
			CONST struct rt_tol *tol))
@


9.36
log
@Converted to new tolerance interface
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.35 91/03/30 01:46:53 butler Exp $ (BRL)";
d382 1
a382 1
		if( strncmp( rec->ss.ss_str, "ebm", 3 ) == 0 )  {
d385 1
a385 1
		} else if( strncmp( rec->ss.ss_str, "vol", 3 ) == 0 )  {
d390 1
a390 1
			rec->ss.ss_name, rec->ss.ss_str );
@


9.35
log
@set ft_use_rpp in rt_functab for NMG's
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.34 91/02/06 22:30:57 mike Exp $ (BRL)";
d34 2
a35 1
			struct rt_db_internal *ip, struct rt_i *rtip)); \
d37 2
a38 1
			struct application *ap, struct seg *seghead)); \
d51 2
a52 1
			double abs_tol, double rel_tol, double norm_tol)); \
d55 2
a56 1
			struct seg segp[], int n, struct resource *resp)); \
d59 2
a60 1
			double abs_tol, double rel_tol, double norm_tol)); \
d73 2
a74 1
			struct rt_db_internal *ip, struct rt_i *rtip)); \
d76 2
a77 1
			struct application *ap, struct seg *seghead)); \
d90 2
a91 1
			double abs_tol, double rel_tol, double norm_tol)); \
d94 2
a95 1
			struct seg segp[], int n, struct resource *resp)); \
d98 2
a99 1
			double abs_tol, double rel_tol, double norm_tol)); \
d273 2
a274 1
			struct rt_i *rtip))
d278 2
a279 1
			struct seg *seghead))
d295 2
a296 1
			double abs_tol, double rel_tol, double norm_tol))
d300 2
a301 1
			struct resource *resp))
d305 2
a306 1
			double abs_tol, double rel_tol, double norm_tol))
@


9.34
log
@Added NMGs
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.33 91/02/06 22:29:49 stay Exp $ (BRL)";
d200 1
a200 1
	"ID_NMG",	0,
@


9.33
log
@Changed from SPL to NURB
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.32 91/01/28 23:56:39 mike Exp $ (BRL)";
d118 1
d201 5
a205 5
		rt_nul_prep,	rt_nul_shot,	rt_nul_print,	rt_nul_norm,
		rt_nul_uv,	rt_nul_curve,	rt_nul_class,	rt_nul_free,
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess,
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
d386 3
@


9.32
log
@Converted to new struct rt_vlist
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.31 91/01/26 03:14:27 mike Exp $ (BRL)";
d111 1
a111 1
RT_DECLARE_INTERFACE(spl)
d186 5
a190 5
		rt_spl_prep,	rt_spl_shot,	rt_spl_print,	rt_spl_norm,
		rt_spl_uv,	rt_spl_curve,	rt_spl_class,	rt_spl_free,
		rt_spl_plot,	rt_vstub,	rt_spl_tess,
		rt_spl_import,	rt_spl_export,	rt_spl_ifree,
		rt_spl_describe,
d397 1
@


9.31
log
@Eliminated mat parameter on ft_plot and ft_tess
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.30 91/01/26 02:53:25 mike Exp $ (BRL)";
d47 1
a47 1
	RT_EXTERN(int rt_##name##_plot, (struct vlhead *vhead, \
d81 1
a81 1
	RT_EXTERN(int rt_/**/name/**/_plot, (struct vlhead *vhead, \
d280 1
a280 1
int NDEF(rt_nul_plot,(struct vlhead *vhead,
@


9.30
log
@Changed calling sequence of rt_id_solid
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.29 91/01/25 21:19:46 mike Exp $ (BRL)";
d48 1
a48 1
			mat_t mat, struct rt_db_internal *ip, \
a54 1
			mat_t mat, \
d82 1
a82 1
			mat_t mat, struct rt_db_internal *ip, \
a88 1
			mat_t mat, \
a280 1
			mat_t mat,
a289 1
			mat_t mat,
@


9.29
log
@Converted to new function switch table interface,
using separation between internal and external forms of geometry.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.28 91/01/25 16:06:55 mike Exp $ (BRL)";
d346 2
a347 2
rt_id_solid( rec )
register union record *rec;
d349 1
d351 3
@


9.28
log
@ELL converted to new interface.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.27 91/01/23 22:35:25 mike Exp $ (BRL)";
d34 1
a34 1
			union record *rec, struct rt_i *rtip)); \
d47 2
a48 2
	RT_EXTERN(int rt_##name##_plot, (union record *rp, mat_t mat, \
			struct vlhead *vhead, struct directory *dp, \
d54 2
a55 2
			struct model *m, union record *rp, \
			mat_t mat, struct directory *dp, \
d69 1
a69 1
			union record *rec, struct rt_i *rtip)); \
d82 2
a83 2
	RT_EXTERN(int rt_/**/name/**/_plot, (union record *rp, mat_t mat, \
			struct vlhead *vhead, struct directory *dp, \
d89 2
a90 2
			struct model *m, union record *rp, \
			mat_t mat, struct directory *dp, \
d211 3
a213 3
		rt_ebm_plot,	rt_vstub,	rt_nul_tess,
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
d218 3
a220 3
		rt_vol_plot,	rt_vstub,	rt_nul_tess,
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
d262 3
a264 1
int IDEF(rt_nul_prep,(struct soltab *stp,union record *rec,struct rt_i *rtip))
d282 1
a282 1
int NDEF(rt_nul_plot,(union record *rec,
d284 1
a284 2
			struct vlhead *vhead,
			struct directory *dp,
d292 1
a292 1
			union record *rec,
a293 1
			struct directory *dp,
@


9.27
log
@Converted ARB over
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.26 91/01/19 04:56:01 mike Exp $ (BRL)";
d149 2
a150 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
@


9.26
log
@Splines changed to new import/export interface
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.25 91/01/15 23:38:43 mike Exp $ (BRL)";
d156 2
a157 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
@


9.25
log
@torus and pg import/export routines added.
sphere and rec vectored to ell and tgc import/export routines
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.24 91/01/15 01:37:14 mike Exp $ (BRL)";
d191 2
a192 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
@


9.24
log
@Fixed string solid.
Made entry for NMG solid
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.23 91/01/14 22:42:40 mike Exp $ (BRL)";
d135 2
a136 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
d177 2
a178 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
d184 2
a185 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
d198 2
a199 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
@


9.23
log
@Added ARS support.
Added units conversion parameters to export, describe
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.22 91/01/12 07:25:54 mike Exp $ (BRL)";
d201 1
a201 1
	"ID_STRINGSOL",	0,
d364 1
a364 1
	case ID_STRSOL:
@


9.22
log
@Added halfspace,
fixed lint with the NUL routines
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.21 91/01/12 04:41:27 mike Exp $ (BRL)";
d60 2
a61 1
			struct rt_db_internal *ip)); \
d64 2
a65 1
			struct rt_db_internal *ip, int verbose));
d95 2
a96 1
			struct rt_db_internal *ip)); \
d99 2
a100 1
			struct rt_db_internal *ip, int verbose));
d163 2
a164 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
d299 2
a300 1
			struct rt_db_internal *ip))
d304 1
a304 1
			int verbose))
@


9.21
log
@Removed unnecessary semicolons
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.20 91/01/11 06:18:04 mike Exp $ (BRL)";
d26 2
a28 1
#include "db.h"
d166 2
a167 2
		rt_nul_import,	rt_nul_export,	rt_nul_ifree,
		rt_nul_describe,
d251 6
a256 3
#define DEF(func)	func() { rt_log("func unimplemented\n"); return; }
#define IDEF(func)	func() { rt_log("func unimplemented\n"); return(0); }
#define NDEF(func)	func() { rt_log("func unimplemented\n"); return(-1); }
d258 42
a299 15
int IDEF(rt_nul_prep)
int	 IDEF(rt_nul_shot)
void DEF(rt_nul_print)
void DEF(rt_nul_norm)
void DEF(rt_nul_uv)
void DEF(rt_nul_curve)
int IDEF(rt_nul_class)
void DEF(rt_nul_free)
int NDEF(rt_nul_plot)
void DEF(rt_nul_vshot)
int NDEF(rt_nul_tess)
int NDEF(rt_nul_import)
int NDEF(rt_nul_export)
void DEF(rt_nul_ifree)
int NDEF(rt_nul_describe)
@


9.20
log
@Modified to include entries for new import/export routines.
arbn, tgc, pipe, and particle are already implemented.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.19 91/01/11 06:11:10 mike Exp $ (BRL)";
d98 17
a114 17
		
RT_DECLARE_INTERFACE(nul);
RT_DECLARE_INTERFACE(tor);
RT_DECLARE_INTERFACE(tgc);
RT_DECLARE_INTERFACE(ell);
RT_DECLARE_INTERFACE(arb);
RT_DECLARE_INTERFACE(ars);
RT_DECLARE_INTERFACE(hlf);
RT_DECLARE_INTERFACE(rec);
RT_DECLARE_INTERFACE(pg);
RT_DECLARE_INTERFACE(spl);
RT_DECLARE_INTERFACE(sph);
RT_DECLARE_INTERFACE(ebm);
RT_DECLARE_INTERFACE(vol);
RT_DECLARE_INTERFACE(arbn);
RT_DECLARE_INTERFACE(pipe);
RT_DECLARE_INTERFACE(part);
@


9.19
log
@Changed to using macros for external declarations.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.18 90/12/21 14:40:35 mike Exp $ (BRL)";
d55 8
a62 1
			double abs_tol, double rel_tol, double norm_tol));
d88 8
a95 1
			double abs_tol, double rel_tol, double norm_tol));
d123 2
d130 2
d137 2
d144 2
d151 2
d158 2
d165 2
d172 2
d179 2
d186 2
d193 2
d200 2
d207 2
d214 2
d221 2
d228 2
d235 2
d241 3
a243 1
		rt_nul_plot,	rt_nul_vshot,	rt_nul_tess
d265 4
@


9.18
log
@vol and ebm got rt_ prefix.
rt_g moved to file global.c
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.17 90/10/11 02:40:05 mike Exp $ (BRL)";
d30 53
a82 16
extern int	rt_nul_prep(), rt_nul_class();
extern int	rt_tor_prep(), rt_tor_class();
extern int	rt_tgc_prep(), rt_tgc_class();
extern int	rt_ell_prep(), rt_ell_class();
extern int	rt_arb_prep(), rt_arb_class();
extern int	rt_hlf_prep(), rt_hlf_class();
extern int	rt_ars_prep(), rt_ars_class();
extern int	rt_rec_prep(), rt_rec_class();
extern int	rt_pg_prep(), rt_pg_class();
extern int	rt_spl_prep(), rt_spl_class();
extern int	rt_sph_prep(), rt_sph_class();
extern int	rt_ebm_prep(), rt_ebm_class();
extern int	rt_vol_prep(), rt_vol_class();
extern int	rt_arbn_prep(), rt_arbn_class();
extern int	rt_part_prep(), rt_part_class();
extern int	rt_pipe_prep(), rt_pipe_class();
d84 17
a100 16
extern void	rt_nul_print(), rt_nul_norm(), rt_nul_uv();
extern void	rt_tor_print(), rt_tor_norm(), rt_tor_uv();
extern void	rt_tgc_print(), rt_tgc_norm(), rt_tgc_uv();
extern void	rt_ell_print(), rt_ell_norm(), rt_ell_uv();
extern void	rt_arb_print(), rt_arb_norm(), rt_arb_uv();
extern void	rt_hlf_print(), rt_hlf_norm(), rt_hlf_uv();
extern void	rt_ars_print(), rt_ars_norm(), rt_ars_uv();
extern void	rt_rec_print(), rt_rec_norm(), rt_rec_uv();
extern void	rt_pg_print(),  rt_pg_norm(),  rt_pg_uv();
extern void	rt_spl_print(), rt_spl_norm(), rt_spl_uv();
extern void	rt_sph_print(), rt_sph_norm(), rt_sph_uv();
extern void	rt_ebm_print(), rt_ebm_norm(), rt_ebm_uv();
extern void	rt_vol_print(), rt_vol_norm(), rt_vol_uv();
extern void	rt_arbn_print(), rt_arbn_norm(), rt_arbn_uv();
extern void	rt_part_print(), rt_part_norm(), rt_part_uv();
extern void	rt_pipe_print(), rt_pipe_norm(), rt_pipe_uv();
a101 60
extern void	rt_nul_curve(), rt_nul_free();
extern void	rt_tor_curve(), rt_tor_free();
extern void	rt_tgc_curve(), rt_tgc_free();
extern void	rt_ell_curve(), rt_ell_free();
extern void	rt_arb_curve(), rt_arb_free();
extern void	rt_hlf_curve(), rt_hlf_free();
extern void	rt_ars_curve(), rt_ars_free();
extern void	rt_rec_curve(), rt_rec_free();
extern void	rt_pg_curve(),  rt_pg_free();
extern void	rt_spl_curve(), rt_spl_free();
extern void	rt_sph_curve(), rt_sph_free();
extern void	rt_ebm_curve(), rt_ebm_free();
extern void	rt_vol_curve(), rt_vol_free();
extern void	rt_arbn_curve(), rt_arbn_free();
extern void	rt_part_curve(), rt_part_free();
extern void	rt_pipe_curve(), rt_pipe_free();

extern int	rt_nul_plot();
extern int	rt_tor_plot();
extern int	rt_tgc_plot();
extern int	rt_ell_plot();
extern int	rt_arb_plot();
extern int	rt_hlf_plot();
extern int	rt_ars_plot();
extern int	rt_pg_plot();
extern int	rt_spl_plot();
extern int	rt_ebm_plot();
extern int	rt_vol_plot();
extern int	rt_arbn_plot();
extern int	rt_part_plot();
extern int	rt_pipe_plot();

extern int	rt_nul_shot();
extern int	rt_tor_shot();
extern int	rt_tgc_shot();
extern int	rt_ell_shot();
extern int	rt_arb_shot();
extern int	rt_ars_shot();
extern int	rt_hlf_shot();
extern int	rt_rec_shot();
extern int	rt_pg_shot();
extern int	rt_spl_shot();
extern int	rt_sph_shot();
extern int	rt_ebm_shot();
extern int	rt_vol_shot();
extern int	rt_arbn_shot();
extern int	rt_part_shot();
extern int	rt_pipe_shot();

extern void	rt_nul_vshot();
extern void	rt_ell_vshot();
extern void	rt_sph_vshot();
extern void	rt_hlf_vshot();
extern void	rt_rec_vshot();
extern void	rt_arb_vshot();
extern void	rt_tgc_vshot();
extern void	rt_tor_vshot();
extern void	rt_arbn_vshot();
extern void	rt_part_vshot();
extern void	rt_pipe_vshot();
a102 17

extern int	rt_nul_tess();
extern int	rt_ell_tess();
extern int	rt_arb_tess();
extern int	rt_tgc_tess();
extern int	rt_tor_tess();
extern int	rt_pg_tess();
extern int	rt_hlf_tess();
extern int	rt_ars_tess();
extern int	rt_spl_tess();
#if 0
extern int	rt_ebm_tess();
extern int	rt_vol_tess();
#endif
extern int	rt_arbn_tess();
extern int	rt_part_tess();
extern int	rt_pipe_tess();
@


9.17
log
@Added pipes and particles
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /m/cad/librt/RCS/table.c,v 9.16 90/10/06 02:05:45 mike Exp $ (BRL)";
a29 2
struct rt_g rt_g;				/* All global state */

d41 2
a42 2
extern int	ebm_prep(), ebm_class();
extern int	vol_prep(), vol_class();
d58 2
a59 2
extern void	ebm_print(), ebm_norm(), ebm_uv();
extern void	vol_print(), vol_norm(), vol_uv();
d75 2
a76 2
extern void	ebm_curve(), ebm_free();
extern void	vol_curve(), vol_free();
d90 2
a91 2
extern int	ebm_plot();
extern int	vol_plot();
d107 2
a108 2
extern int	ebm_shot();
extern int	vol_shot();
d136 2
a137 2
extern int	ebm_tess();
extern int	vol_tess();
d205 3
a207 3
		ebm_prep,	ebm_shot,	ebm_print,	ebm_norm,
		ebm_uv,		ebm_curve,	ebm_class,	ebm_free,
		ebm_plot,	rt_vstub,	rt_nul_tess,
d210 3
a212 3
		vol_prep,	vol_shot,	vol_print,	vol_norm,
		vol_uv,		vol_curve,	vol_class,	vol_free,
		vol_plot,	rt_vstub,	rt_nul_tess,
@


9.16
log
@Converted seg structures to use doubly linked lists.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: /n/wolf/m/cad/librt/RCS/table.c,v 9.15 90/05/04 08:10:53 mike Exp $ (BRL)";
d46 2
d63 2
d80 2
d95 2
d112 2
d124 2
d142 2
d221 10
d330 6
@


9.15
log
@Half, TGC, REC, and SPL routines got rt_ prefixes.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.14 90/05/03 09:34:28 mike Locked $ (BRL)";
d90 14
a103 14
extern struct seg *rt_nul_shot();
extern struct seg *rt_tor_shot();
extern struct seg *rt_tgc_shot();
extern struct seg *rt_ell_shot();
extern struct seg *rt_arb_shot();
extern struct seg *rt_ars_shot();
extern struct seg *rt_hlf_shot();
extern struct seg *rt_rec_shot();
extern struct seg *rt_pg_shot();
extern struct seg *rt_spl_shot();
extern struct seg *rt_sph_shot();
extern struct seg *ebm_shot();
extern struct seg *vol_shot();
extern struct seg *rt_arbn_shot();
d222 1
a222 1
struct seg * IDEF(rt_nul_shot)
@


9.14
log
@The arb routines got the rt_ prefix
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.13 90/05/01 05:14:26 mike Locked $ (BRL)";
d34 1
a34 1
extern int	tgc_prep(), tgc_class();
d37 3
a39 3
extern int	hlf_prep(), hlf_class();
extern int	ars_prep(), ars_class();
extern int	rec_prep(), rec_class();
d41 1
a41 1
extern int	spl_prep(), spl_class();
d49 1
a49 1
extern void	tgc_print(), tgc_norm(), tgc_uv();
d52 3
a54 3
extern void	hlf_print(), hlf_norm(), hlf_uv();
extern void	ars_print(), ars_norm(), ars_uv();
extern void	rec_print(), rec_norm(), rec_uv();
d56 1
a56 1
extern void	spl_print(), spl_norm(), spl_uv();
d64 1
a64 1
extern void	tgc_curve(), tgc_free();
d67 3
a69 3
extern void	hlf_curve(), hlf_free();
extern void	ars_curve(), ars_free();
extern void	rec_curve(), rec_free();
d71 1
a71 1
extern void	spl_curve(), spl_free();
d79 1
a79 1
extern int	tgc_plot();
d82 2
a83 3
extern int	hlf_plot();
extern int	ars_plot();
extern int	rec_plot();
d85 1
a85 1
extern int	spl_plot();
d92 1
a92 1
extern struct seg *tgc_shot();
d95 3
a97 3
extern struct seg *ars_shot();
extern struct seg *hlf_shot();
extern struct seg *rec_shot();
d99 1
a99 1
extern struct seg *spl_shot();
d108 2
a109 2
extern void	hlf_vshot();
extern void	rec_vshot();
d111 1
a111 1
extern void	tgc_vshot();
d119 1
a119 1
extern int	tgc_tess();
d122 3
a125 2
extern int	hlf_tess();
extern int	rec_tess();
d143 3
a145 3
		tgc_prep,	tgc_shot,	tgc_print,	tgc_norm,
		tgc_uv,		tgc_curve,	tgc_class,	tgc_free,
		tgc_plot,	tgc_vshot,	tgc_tess,
d158 3
a160 3
		ars_prep,	ars_shot,	ars_print,	ars_norm,
		ars_uv,		ars_curve,	ars_class,	ars_free,
		ars_plot,	rt_vstub,	rt_nul_tess,
d163 3
a165 3
		hlf_prep,	hlf_shot,	hlf_print,	hlf_norm,
		hlf_uv,		hlf_curve,	hlf_class,	hlf_free,
		hlf_plot,	hlf_vshot,	rt_nul_tess,
d168 3
a170 3
		rec_prep,	rec_shot,	rec_print,	rec_norm,
		rec_uv,		rec_curve,	rec_class,	rec_free,
		tgc_plot,	rec_vshot,	rt_nul_tess,
d178 3
a180 3
		spl_prep,	spl_shot,	spl_print,	spl_norm,
		spl_uv,		spl_curve,	spl_class,	spl_free,
		spl_plot,	rt_vstub,	rt_nul_tess,
@


9.13
log
@SPH routines got the rt_ prefix
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.12 90/05/01 04:58:47 mike Locked $ (BRL)";
d36 1
a36 1
extern int	arb_prep(), arb_class();
d51 1
a51 1
extern void	arb_print(), arb_norm(), arb_uv();
d66 1
a66 1
extern void	arb_curve(), arb_free();
d81 1
a81 1
extern int	arb_plot();
d95 1
a95 1
extern struct seg *arb_shot();
d111 1
a111 1
extern void	arb_vshot();
d119 1
a119 1
extern int	arb_tess();
d153 3
a155 3
		arb_prep,	arb_shot,	arb_print,	arb_norm,
		arb_uv,		arb_curve,	arb_class,	arb_free,
		arb_plot,	arb_vshot,	arb_tess,
@


9.12
log
@ELL routines got rt_ prefix
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.11 90/04/28 03:31:02 mike Locked $ (BRL)";
d42 1
a42 1
extern int	sph_prep(), sph_class();
d57 1
a57 1
extern void	sph_print(), sph_norm(), sph_uv();
d72 1
a72 1
extern void	sph_curve(), sph_free();
a86 1
extern int	sph_plot();
d101 1
a101 1
extern struct seg *sph_shot();
d108 1
a108 1
extern void	sph_vshot();
a118 1
extern int	sph_tess();
d183 3
a185 3
		sph_prep,	sph_shot,	sph_print,	sph_norm,
		sph_uv,		sph_curve,	sph_class,	sph_free,
		rt_ell_plot,	sph_vshot,	sph_tess,
@


9.11
log
@Added rt_pg_tess().  Added rt_ prefix to pg_ routines.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.10 90/04/24 05:06:22 mike Locked $ (BRL)";
d35 1
a35 1
extern int	ell_prep(), ell_class();
d50 1
a50 1
extern void	ell_print(), ell_norm(), ell_uv();
d65 1
a65 1
extern void	ell_curve(), ell_free();
d80 1
a80 1
extern int	ell_plot();
d95 1
a95 1
extern struct seg *ell_shot();
d108 1
a108 1
extern void	ell_vshot();
d119 1
a119 1
extern int	ell_tess();
d150 3
a152 3
		ell_prep,	ell_shot,	ell_print,	ell_norm,
		ell_uv,		ell_curve,	ell_class,	ell_free,
		ell_plot,	ell_vshot,	ell_tess,
d187 1
a187 1
		ell_plot,	sph_vshot,	sph_tess,
@


9.10
log
@Added "rt_" prefix to arbn and tor_ routines.
Added rt_tor_tess.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.9 90/03/15 02:08:03 mike Locked $ (BRL)";
d40 1
a40 1
extern int	pg_prep(), pg_class();
d55 1
a55 1
extern void	pg_print(),  pg_norm(),  pg_uv();
d70 1
a70 1
extern void	pg_curve(),  pg_free();
d85 1
a85 1
extern int	pg_plot();
d100 1
a100 1
extern struct seg *pg_shot();
a120 4
#if 0
extern int	hlf_tess();
extern int	rec_tess();
#endif
d124 1
d126 2
d175 3
a177 3
		pg_prep,	pg_shot,	pg_print,	pg_norm,
		pg_uv,		pg_curve,	pg_class,	pg_free,
		pg_plot,	rt_vstub,	rt_nul_tess,
@


9.9
log
@Added an NDEF for null functions that need negative returns to indicate
failure.
(tess and plot).
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.8 90/03/14 22:37:26 mike Locked $ (BRL)";
d32 2
a33 2
extern int	nul_prep(), nul_class();
extern int	tor_prep(), tor_class();
d45 1
a45 1
extern int	arbn_prep(), arbn_class();
d47 2
a48 2
extern void	nul_print(), nul_norm(), nul_uv();
extern void	tor_print(), tor_norm(), tor_uv();
d60 1
a60 1
extern void	arbn_print(), arbn_norm(), arbn_uv();
d62 2
a63 2
extern void	nul_curve(), nul_free();
extern void	tor_curve(), tor_free();
d75 1
a75 1
extern void	arbn_curve(), arbn_free();
d77 2
a78 2
extern int	nul_plot();
extern int	tor_plot();
d90 1
a90 1
extern int	arbn_plot();
d92 2
a93 2
extern struct seg *nul_shot();
extern struct seg *tor_shot();
d105 1
a105 1
extern struct seg *arbn_shot();
d107 1
a107 1
extern void	nul_vshot();
d114 2
a115 2
extern void	tor_vshot();
extern void	arbn_vshot();
d118 1
a118 1
extern int	nul_tess();
d127 1
a128 1
extern int	tor_tess();
d132 1
a132 1
extern int	arbn_tess();
d136 3
a138 3
		nul_prep,	nul_shot,	nul_print, 	nul_norm,
	 	nul_uv,		nul_curve,	nul_class,	nul_free,
		nul_plot,	nul_vshot,	nul_tess,
d141 3
a143 3
		tor_prep,	tor_shot,	tor_print,	tor_norm,
		tor_uv,		tor_curve,	tor_class,	tor_free,
		tor_plot,	tor_vshot,	nul_tess,
d163 1
a163 1
		ars_plot,	rt_vstub,	nul_tess,
d168 1
a168 1
		hlf_plot,	hlf_vshot,	nul_tess,
d173 1
a173 1
		tgc_plot,	rec_vshot,	nul_tess,
d178 1
a178 1
		pg_plot,	rt_vstub,	nul_tess,
d183 1
a183 1
		spl_plot,	rt_vstub,	nul_tess,
d191 3
a193 3
		nul_prep,	nul_shot,	nul_print,	nul_norm,
		nul_uv,		nul_curve,	nul_class,	nul_free,
		nul_plot,	nul_vshot,	nul_tess,
d198 1
a198 1
		ebm_plot,	rt_vstub,	nul_tess,
d203 1
a203 1
		vol_plot,	rt_vstub,	nul_tess,
d206 3
a208 3
		arbn_prep,	arbn_shot,	arbn_print,	arbn_norm,
		arbn_uv,	arbn_curve,	arbn_class,	arbn_free,
		arbn_plot,	arbn_vshot,	arbn_tess,
d211 3
a213 3
		nul_prep,	nul_shot,	nul_print,	nul_norm,
		nul_uv,		nul_curve,	nul_class,	nul_free,
		nul_plot,	nul_vshot,	nul_tess
d224 11
a234 11
int IDEF(nul_prep)
struct seg * IDEF(nul_shot)
void DEF(nul_print)
void DEF(nul_norm)
void DEF(nul_uv)
void DEF(nul_curve)
int IDEF(nul_class)
void DEF(nul_free)
int NDEF(nul_plot)
void DEF(nul_vshot)
int NDEF(nul_tess)
@


9.8
log
@Changed plot and tess interfaces to return INT rather than VOID
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.7 90/03/03 05:49:25 mike Locked $ (BRL)";
d222 1
d232 1
a232 1
int IDEF(nul_plot)
d234 1
a234 1
int IDEF(nul_tess)
@


9.7
log
@Added calls to sph_tess and ell_tess
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.6 89/12/29 21:06:31 mike Locked $ (BRL)";
d62 14
a75 14
extern void	nul_curve(), nul_free(), nul_plot();
extern void	tor_curve(), tor_free(), tor_plot();
extern void	tgc_curve(), tgc_free(), tgc_plot();
extern void	ell_curve(), ell_free(), ell_plot();
extern void	arb_curve(), arb_free(), arb_plot();
extern void	hlf_curve(), hlf_free(), hlf_plot();
extern void	ars_curve(), ars_free(), ars_plot();
extern void	rec_curve(), rec_free(), rec_plot();
extern void	pg_curve(),  pg_free(),  pg_plot();
extern void	spl_curve(), spl_free(), spl_plot();
extern void	sph_curve(), sph_free(), sph_plot();
extern void	ebm_curve(), ebm_free(), ebm_plot();
extern void	vol_curve(), vol_free(), vol_plot();
extern void	arbn_curve(), arbn_free(), arbn_plot();
d77 15
d118 3
a120 3
extern void	nul_tess();
extern void	ell_tess();
extern void	sph_tess();
d122 2
a123 2
extern void	hlf_tess();
extern void	rec_tess();
d125 2
a126 2
extern void	arb_tess();
extern void	tgc_tess();
d128 3
a130 3
extern void	tor_tess();
extern void	ebm_tess();
extern void	vol_tess();
d132 1
a132 1
extern void	arbn_tess();
d231 1
a231 1
void DEF(nul_plot)
d233 1
a233 1
void DEF(nul_tess)
@


9.6
log
@Removed stray semi-colon
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.5 89/12/08 23:04:41 mike Locked $ (BRL)";
a103 1
#if 0
d106 1
d138 1
a138 1
		ell_plot,	ell_vshot,	nul_tess,
d173 1
a173 1
		ell_plot,	sph_vshot,	nul_tess,
@


9.5
log
@Oops!  ARBN, not ARB8.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.4 89/12/08 05:59:57 mike Locked $ (BRL)";
d218 1
a218 1
void DEF(nul_tess);
@


9.4
log
@Added ARBN entry.
Absorbed rt_id_solid()
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.3 89/10/13 20:37:46 mike Locked $ (BRL)";
d292 1
a292 1
		id = ID_ARB8;
@


9.3
log
@Added support for ID_VOL
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.2 89/10/10 16:13:58 mike Exp $ (BRL)";
d27 1
d45 1
d60 1
d75 1
d90 1
d100 1
d117 1
d190 5
d219 86
@


9.2
log
@Added tessellation entries.
Changed sph_plot -> ell_plot, rec_plot -> tgc_plot
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 9.1 89/05/19 05:57:19 mike Rel3_5 $ (BRL)";
d43 1
d57 1
d71 1
d85 1
d108 2
d173 1
a173 1
	"ID_EBM",	1,
d178 6
a183 1
	">ID_NULL",	0,
@


9.1
log
@Release_3.5
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 1.3 89/04/14 03:11:04 mike Exp $ (BRL)";
d93 13
d110 1
a110 1
		nul_plot,	nul_vshot,
d115 1
a115 1
		tor_plot,	tor_vshot,
d120 1
a120 1
		tgc_plot,	tgc_vshot,
d125 1
a125 1
		ell_plot,	ell_vshot,
d130 1
a130 1
		arb_plot,	arb_vshot,
d135 1
a135 1
		ars_plot,	rt_vstub,
d140 1
a140 1
		hlf_plot,	hlf_vshot,
d145 1
a145 1
		rec_plot,	rec_vshot,
d150 1
a150 1
		pg_plot,	rt_vstub,
d155 1
a155 1
		spl_plot,	rt_vstub,
d160 1
a160 1
		sph_plot,	sph_vshot,
d165 1
a165 1
		nul_plot,	nul_vshot,
d170 1
a170 1
		ebm_plot,	rt_vstub,
d175 1
a175 1
		nul_plot,	nul_vshot
d195 1
@


1.3
log
@There are now working vector routines for tgc and torus.
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 1.2 89/04/08 06:00:57 mike Locked $ (BRL)";
@


1.2
log
@Added initial hooks for vectorization
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: table.c,v 1.1 89/03/15 15:45:56 mike Locked $ (BRL)";
d89 2
d102 1
a102 1
		tor_plot,	rt_vstub,
d107 1
a107 1
		tgc_plot,	rt_vstub,
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char RCStree[] = "@@(#)$Header: tree.c,v 8.6 89/01/11 09:03:00 mike Locked $ (BRL)";
d83 9
a91 1
struct rt_functab rt_functab[] = {
d95 1
a95 1
		nul_plot,
d100 1
a100 1
		tor_plot,
d105 1
a105 1
		tgc_plot,
d110 1
a110 1
		ell_plot,
d115 1
a115 1
		arb_plot,
d120 1
a120 1
		ars_plot,
d125 1
a125 1
		hlf_plot,
d130 1
a130 1
		rec_plot,
d135 1
a135 1
		pg_plot,
d140 1
a140 1
		spl_plot,
d145 1
a145 1
		sph_plot,
d150 1
a150 1
		nul_plot,
d155 1
a155 1
		ebm_plot,
d160 1
a160 1
		nul_plot
d179 1
@
