head	11.29;
access;
symbols
	ansi-20040405-merged:11.25.2.2
	postmerge-20040405-ansi:11.27
	premerge-20040404-ansi:11.26
	postmerge-autoconf:11.26
	autoconf-freeze:11.25.10.2
	premerge-autoconf:11.26
	ansi-20040316-freeze:11.25.2.1
	postmerge-20040315-windows:11.26
	premerge-20040315-windows:11.26
	windows-20040315-freeze:11.25.4.1
	autoconf-20031203:11.25
	autoconf-20031202:11.25
	autoconf-branch:11.25.0.10
	phong-branch:11.25.0.8
	photonmap-branch:11.25.0.6
	rel-6-1-DP:11.25
	windows-branch:11.25.0.4
	rel-6-0-2:11.23
	ansi-branch:11.25.0.2
	rel-6-0-1-branch:11.23.0.2
	hartley-6-0-post:11.24
	hartley-6-0-pre:11.23
	rel-6-0-1:11.23
	rel-6-0:11.23
	rel-5-4:11.12
	offsite-5-3-pre:11.19
	rel-5-3:11.12
	rel-5-2:11.12
	rel-5-1-branch:11.12.0.2
	rel-5-1:11.12
	rel-5-0:11.5
	rel-5-0-beta:11.4
	rel-4-5:11.3
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.29
date	2004.05.21.18.07.31;	author morrison;	state dead;
branches;
next	11.28;

11.28
date	2004.05.10.15.30.46;	author erikg;	state Exp;
branches;
next	11.27;

11.27
date	2004.04.05.08.48.57;	author morrison;	state Exp;
branches;
next	11.26;

11.26
date	2004.02.02.17.39.21;	author morrison;	state Exp;
branches;
next	11.25;

11.25
date	2002.08.20.17.08.01;	author jra;	state Exp;
branches
	11.25.2.1
	11.25.4.1
	11.25.10.1;
next	11.24;

11.24
date	2002.08.15.20.55.13;	author hartley;	state Exp;
branches;
next	11.23;

11.23
date	2001.12.04.23.56.40;	author morrison;	state Exp;
branches;
next	11.22;

11.22
date	2001.10.02.19.24.30;	author jra;	state Exp;
branches;
next	11.21;

11.21
date	2001.04.20.22.29.47;	author morrison;	state Exp;
branches;
next	11.20;

11.20
date	2001.03.31.01.57.09;	author morrison;	state Exp;
branches;
next	11.19;

11.19
date	2000.10.18.18.10.35;	author butler;	state Exp;
branches;
next	11.18;

11.18
date	2000.08.21.02.02.31;	author butler;	state Exp;
branches;
next	11.17;

11.17
date	2000.07.10.23.01.34;	author mike;	state Exp;
branches;
next	11.16;

11.16
date	2000.06.30.15.38.03;	author mike;	state Exp;
branches;
next	11.15;

11.15
date	2000.06.30.15.31.15;	author mike;	state Exp;
branches;
next	11.14;

11.14
date	2000.06.27.15.33.31;	author bparker;	state Exp;
branches;
next	11.13;

11.13
date	2000.06.26.21.24.43;	author bparker;	state Exp;
branches;
next	11.12;

11.12
date	2000.04.12.02.34.35;	author mike;	state Exp;
branches;
next	11.11;

11.11
date	2000.03.29.02.43.10;	author mike;	state Exp;
branches;
next	11.10;

11.10
date	2000.03.28.20.43.29;	author mike;	state Exp;
branches;
next	11.9;

11.9
date	99.11.26.21.46.48;	author mike;	state Exp;
branches;
next	11.8;

11.8
date	99.11.24.23.12.09;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	99.11.17.02.42.01;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	99.10.30.03.53.27;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	99.07.02.22.19.24;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	99.05.27.19.10.41;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	97.06.17.19.30.38;	author gdurf;	state Exp;
branches;
next	11.2;

11.2
date	96.10.21.19.11.33;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.56.58;	author mike;	state Rel4_4;
branches;
next	1.13;

1.13
date	94.11.08.02.55.02;	author mike;	state Exp;
branches;
next	1.12;

1.12
date	94.09.22.12.19.24;	author jra;	state Exp;
branches;
next	1.11;

1.11
date	94.09.13.15.53.32;	author jra;	state Exp;
branches;
next	1.10;

1.10
date	94.09.08.16.28.23;	author jra;	state Exp;
branches;
next	1.9;

1.9
date	94.09.02.16.03.36;	author jra;	state Exp;
branches;
next	1.8;

1.8
date	94.08.10.18.39.04;	author gdurf;	state Exp;
branches;
next	1.7;

1.7
date	93.11.18.01.44.09;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	93.07.20.22.47.54;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	93.07.20.16.09.37;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	92.03.27.12.58.49;	author mmark;	state Exp;
branches;
next	1.3;

1.3
date	92.03.25.15.52.36;	author mmark;	state Exp;
branches;
next	1.2;

1.2
date	92.03.24.14.33.39;	author mmark;	state Exp;
branches;
next	1.1;

1.1
date	92.02.14.15.31.28;	author mmark;	state Exp;
branches;
next	;

11.25.2.1
date	2002.09.19.18.01.35;	author morrison;	state Exp;
branches;
next	11.25.2.2;

11.25.2.2
date	2004.03.17.21.18.47;	author morrison;	state Exp;
branches;
next	;

11.25.4.1
date	2004.03.11.23.43.39;	author morrison;	state Exp;
branches;
next	;

11.25.10.1
date	2004.02.12.18.37.42;	author erikg;	state Exp;
branches;
next	11.25.10.2;

11.25.10.2
date	2004.03.15.14.07.20;	author erikg;	state Exp;
branches;
next	;


desc
@right parabolic cylinder
@


11.29
log
@moved to src/
@
text
@
/*
 *			G _ R P C . C
 *
 *  Purpose -
 *	Intersect a ray with a Right Parabolic Cylinder.
 *
 *  Algorithm -
 *  
 *  Given V, H, R, and B, there is a set of points on this rpc
 *  
 *  { (x,y,z) | (x,y,z) is on rpc }
 *  
 *  Through a series of Affine Transformations, this set of points will be
 *  transformed into a set of points on an rpc located at the origin
 *  with a rectangular halfwidth R of 1 along the Y axis, a height H of +1
 *  along the -X axis, a distance B of 1 along the -Z axis between the
 *  vertex V and the tip of the parabola.
 *  
 *  
 *  { (x',y',z') | (x',y',z') is on rpc at origin }
 *
 *  The transformation from X to X' is accomplished by:
 *  
 *  X' = S(R( X - V ))
 *  
 *  where R(X) =  ( H/(-|H|) )
 *  		 (  R/( |R|)  ) . X
 *  		  ( B/(-|B|) )
 *  
 *  and S(X) =	 (  1/|H|   0     0   )
 *  		(    0    1/|R|   0    ) . X
 *  		 (   0      0   1/|B| )
 *  
 *  To find the intersection of a line with the surface of the rpc,
 *  consider the parametric line L:
 *  
 *  	L : { P(n) | P + t(n) . D }
 *  
 *  Call W the actual point of intersection between L and the rpc.
 *  Let W' be the point of intersection between L' and the unit rpc.
 *  
 *  	L' : { P'(n) | P' + t(n) . D' }
 *  
 *  W = invR( invS( W' ) ) + V
 *  
 *  Where W' = k D' + P'.
 *  
 *  If Dy' and Dz' are both 0, then there is no hit on the rpc;
 *  but the end plates need checking.  If there is now only 1 hit
 *  point, the top plate needs to be checked as well.
 *
 *  Line L' hits the infinitely long canonical rpc at W' when
 *
 *	A * k**2 + B * k + C = 0
 *
 *  where
 *
 *  A = Dy'**2
 *  B = (2 * Dy' * Py') - Dz'
 *  C = Py'**2 - Pz' - 1
 *  b = |Breadth| = 1.0
 *  h = |Height| = 1.0
 *  r = 1.0
 *  
 *  The quadratic formula yields k (which is constant):
 *
 *  k = [ -B +/- sqrt( B**2 - 4*A*C )] / (2*A)
 *  
 *  Now, D' = S( R( D ) )
 *  and  P' = S( R( P - V ) )
 *  
 *  Substituting,
 *  
 *  W = V + invR( invS[ k *( S( R( D ) ) ) + S( R( P - V ) ) ] )
 *    = V + invR( ( k * R( D ) ) + R( P - V ) )
 *    = V + k * D + P - V
 *    = k * D + P
 *  
 *  Note that ``k'' is constant, and is the same in the formulations
 *  for both W and W'.
 *
 *  The hit at ``k'' is a hit on the canonical rpc IFF
 *  -1 <= Wx' <= 0 and -1 <= Wz' <= 0.
 *
 *  NORMALS.  Given the point W on the surface of the rpc,
 *  what is the vector normal to the tangent plane at that point?
 *  
 *  Map W onto the unit rpc, ie:  W' = S( R( W - V ) ).
 *  
 *  Plane on unit rpc at W' has a normal vector N' where
 *
 *  N' = <0, Wy', -.5>.
 *  
 *  The plane transforms back to the tangent plane at W, and this
 *  new plane (on the original rpc) has a normal vector of N, viz:
 *  
 *  N = inverse[ transpose( inverse[ S o R ] ) ] ( N' )
 *
 *  because if H is perpendicular to plane Q, and matrix M maps from
 *  Q to Q', then inverse[ transpose(M) ] (H) is perpendicular to Q'.
 *  Here, H and Q are in "prime space" with the unit sphere.
 *  [Somehow, the notation here is backwards].
 *  So, the mapping matrix M = inverse( S o R ), because
 *  S o R maps from normal space to the unit sphere.
 *
 *  N = inverse[ transpose( inverse[ S o R ] ) ] ( N' )
 *    = inverse[ transpose(invR o invS) ] ( N' )
 *    = inverse[ transpose(invS) o transpose(invR) ] ( N' )
 *    = inverse[ inverse(S) o R ] ( N' )
 *    = invR o S ( N' )
 *
 *  because inverse(R) = transpose(R), so R = transpose( invR ),
 *  and S = transpose( S ).
 *
 *  Note that the normal vector produced above will not have unit length.
 *
 *  THE TOP AND END PLATES.
 *
 *  If Dz' == 0, line L' is parallel to the top plate, so there is no
 *  hit on the top plate.  Otherwise, rays intersect the top plate
 *  with k = (0 - Pz')/Dz'.  The solution is within the top plate
 *  IFF  -1 <= Wx' <= 0 and -1 <= Wy' <= 1.
 *
 *  If Dx' == 0, line L' is parallel to the end plates, so there is no
 *  hit on the end plates.  Otherwise, rays intersect the front plate
 *  with k = (0 - Px') / Dx' and the back plate with k = (-1 - Px') / Dx'.
 *
 *  The solution W' is within an end plate IFF
 *
 *	Wy'**2 + Wz' <= 1.0  and  Wz' <= 1.0
 *
 *  The normal for a hit on the top plate is -Bunit.
 *  The normal for a hit on the front plate is -Hunit, and
 *  the normal for a hit on the back plate is +Hunit.
 *
 *  Authors -
 *	Michael J. Markowski
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSrpc[] = "@@(#)$Header: /n/xoff/cvs/brlcad/librt/g_rpc.c,v 11.28 2004/05/10 15:30:46 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "db.h"
#include "nmg.h"
#include "raytrace.h"
#include "rtgeom.h"
#include "./debug.h"

struct rpc_specific {
	point_t	rpc_V;		/* vector to rpc origin */
	vect_t	rpc_Bunit;	/* unit B vector */
	vect_t	rpc_Hunit;	/* unit H vector */
	vect_t	rpc_Runit;	/* unit vector, B x H */
	fastf_t	rpc_b;		/* |B| */
	fastf_t	rpc_inv_rsq;	/* 1/(r * r) */
	mat_t	rpc_SoR;	/* Scale(Rot(vect)) */
	mat_t	rpc_invRoS;	/* invRot(Scale(vect)) */
};

const struct bu_structparse rt_rpc_parse[] = {
    { "%f", 3, "V", offsetof(struct rt_rpc_internal, rpc_V[X]), BU_STRUCTPARSE_FUNC_NULL },
    { "%f", 3, "H", offsetof(struct rt_rpc_internal, rpc_H[X]), BU_STRUCTPARSE_FUNC_NULL },
    { "%f", 3, "B", offsetof(struct rt_rpc_internal, rpc_B[X]), BU_STRUCTPARSE_FUNC_NULL },
    { "%f", 1, "r", offsetof(struct rt_rpc_internal, rpc_r),    BU_STRUCTPARSE_FUNC_NULL },
    { {'\0','\0','\0','\0'}, 0, (char *)NULL, 0, BU_STRUCTPARSE_FUNC_NULL }
 };
	    
/*
 *  			R T _ R P C _ P R E P
 *  
 *  Given a pointer to a GED database record, and a transformation matrix,
 *  determine if this is a valid RPC, and if so, precompute various
 *  terms of the formula.
 *  
 *  Returns -
 *  	0	RPC is OK
 *  	!0	Error in description
 *  
 *  Implicit return -
 *  	A struct rpc_specific is created, and it's address is stored in
 *  	stp->st_specific for use by rpc_shot().
 */
int
rt_rpc_prep(struct soltab *stp, struct rt_db_internal *ip, struct rt_i *rtip)
{
	struct rt_rpc_internal		*xip;
	register struct rpc_specific	*rpc;
#ifndef NO_BOMBING_MACROS
	const struct bn_tol		*tol = &rtip->rti_tol;  /* only used to check a if tolerance is valid */
#endif
	LOCAL fastf_t	magsq_b, magsq_h, magsq_r;
	LOCAL fastf_t	mag_b, mag_h, mag_r;
	LOCAL fastf_t	f;
	LOCAL mat_t	R;
	LOCAL mat_t	Rinv;
	LOCAL mat_t	S;
	LOCAL vect_t	invsq;	/* [ 1/(|H|**2), 1/(|R|**2), 1/(|B|**2) ] */

	RT_CK_DB_INTERNAL(ip);
	BN_CK_TOL(tol);
	xip = (struct rt_rpc_internal *)ip->idb_ptr;
	RT_RPC_CK_MAGIC(xip);

	/* compute |B| |H| */
	mag_b = sqrt( magsq_b = MAGSQ( xip->rpc_B ) );
	mag_h = sqrt( magsq_h = MAGSQ( xip->rpc_H ) );
	mag_r = xip->rpc_r;
	magsq_r = mag_r * mag_r;

	/* Check for |H| > 0, |B| > 0, |R| > 0 */
	if( NEAR_ZERO(mag_h, RT_LEN_TOL) || NEAR_ZERO(mag_b, RT_LEN_TOL)
	 || NEAR_ZERO(mag_r, RT_LEN_TOL) )  {
		return(1);		/* BAD, too small */
	}

	/* Check for B.H == 0 */
	f = VDOT( xip->rpc_B, xip->rpc_H ) / (mag_b * mag_h);
	if( ! NEAR_ZERO(f, RT_DOT_TOL) )  {
		return(1);		/* BAD */
	}

	/*
	 *  RPC is ok
	 */
	stp->st_id = ID_RPC;		/* set soltab ID */
	stp->st_meth = &rt_functab[ID_RPC];

	BU_GETSTRUCT( rpc, rpc_specific );
	stp->st_specific = (genptr_t)rpc;
	rpc->rpc_b = mag_b;
	rpc->rpc_inv_rsq = 1 / magsq_r;

	/* make unit vectors in B, H, and BxH directions */
	VMOVE(    rpc->rpc_Hunit, xip->rpc_H );
	VUNITIZE( rpc->rpc_Hunit );
	VMOVE(    rpc->rpc_Bunit, xip->rpc_B );
	VUNITIZE( rpc->rpc_Bunit );
	VCROSS(   rpc->rpc_Runit, rpc->rpc_Bunit, rpc->rpc_Hunit );

	VMOVE( rpc->rpc_V, xip->rpc_V );

	/* Compute R and Rinv matrices */
	MAT_IDN( R );
	VREVERSE( &R[0], rpc->rpc_Hunit );
	VMOVE(    &R[4], rpc->rpc_Runit );
	VREVERSE( &R[8], rpc->rpc_Bunit );
	bn_mat_trn( Rinv, R );			/* inv of rot mat is trn */

	/* Compute S */
	VSET( invsq, 1.0/magsq_h, 1.0/magsq_r, 1.0/magsq_b );
	MAT_IDN( S );
	S[ 0] = sqrt( invsq[0] );
	S[ 5] = sqrt( invsq[1] );
	S[10] = sqrt( invsq[2] );

	/* Compute SoR and invRoS */
	bn_mat_mul( rpc->rpc_SoR, S, R );
	bn_mat_mul( rpc->rpc_invRoS, Rinv, S );

	/* Compute bounding sphere and RPP */
	/* bounding sphere center */
	VJOIN2( stp->st_center,	rpc->rpc_V,
		mag_h / 2.0,	rpc->rpc_Hunit,
		mag_b / 2.0,	rpc->rpc_Bunit );
	/* bounding radius */
	stp->st_bradius = 0.5 * sqrt(magsq_h + 4.0*magsq_r + magsq_b);
	/* approximate bounding radius */
	stp->st_aradius = stp->st_bradius;
	
	/* cheat, make bounding RPP by enclosing bounding sphere */
	stp->st_min[X] = stp->st_center[X] - stp->st_bradius;
	stp->st_max[X] = stp->st_center[X] + stp->st_bradius;
	stp->st_min[Y] = stp->st_center[Y] - stp->st_bradius;
	stp->st_max[Y] = stp->st_center[Y] + stp->st_bradius;
	stp->st_min[Z] = stp->st_center[Z] - stp->st_bradius;
	stp->st_max[Z] = stp->st_center[Z] + stp->st_bradius;

	return(0);			/* OK */
}

/*
 *			R T _ R P C _ P R I N T
 */
void
rt_rpc_print(register const struct soltab *stp)
{
	register const struct rpc_specific *rpc =
		(struct rpc_specific *)stp->st_specific;

	VPRINT("V", rpc->rpc_V);
	VPRINT("Bunit", rpc->rpc_Bunit);
	VPRINT("Hunit", rpc->rpc_Hunit);
	VPRINT("Runit", rpc->rpc_Runit);
	bn_mat_print("S o R", rpc->rpc_SoR );
	bn_mat_print("invR o S", rpc->rpc_invRoS );
}

/* hit_surfno is set to one of these */
#define	RPC_NORM_BODY	(1)		/* compute normal */
#define	RPC_NORM_TOP	(2)		/* copy tgc_N */
#define	RPC_NORM_FRT	(3)		/* copy reverse tgc_N */
#define RPC_NORM_BACK	(4)

/*
 *  			R T _ R P C _ S H O T
 *  
 *  Intersect a ray with a rpc.
 *  If an intersection occurs, a struct seg will be acquired
 *  and filled in.
 *  
 *  Returns -
 *  	0	MISS
 *	>0	HIT
 */
int
rt_rpc_shot(struct soltab *stp, register struct xray *rp, struct application *ap, struct seg *seghead)
{
	register struct rpc_specific *rpc =
		(struct rpc_specific *)stp->st_specific;
	LOCAL vect_t	dprime;		/* D' */
	LOCAL vect_t	pprime;		/* P' */
	LOCAL fastf_t	k1, k2;		/* distance constants of solution */
	LOCAL vect_t	xlated;		/* translated vector */
	LOCAL struct hit hits[3];	/* 2 potential hit points */
	register struct hit *hitp;	/* pointer to hit point */
/*?????	const struct bn_tol	*tol = &rtip->rti_tol; ?????*/

	hitp = &hits[0];

	/* out, Mat, vect */
	MAT4X3VEC( dprime, rpc->rpc_SoR, rp->r_dir );
	VSUB2( xlated, rp->r_pt, rpc->rpc_V );
	MAT4X3VEC( pprime, rpc->rpc_SoR, xlated );

	/* Find roots of the equation, using formula for quadratic */
	if ( !NEAR_ZERO(dprime[Y], RT_PCOEF_TOL) ) {
		FAST fastf_t	a, b, c;	/* coeffs of polynomial */
		FAST fastf_t	disc;		/* disc of radical */

		a = dprime[Y] * dprime[Y];
		b = 2.0 * dprime[Y] * pprime[Y] - dprime[Z];
		c = pprime[Y] * pprime[Y] - pprime[Z] - 1;
		disc = b*b - 4 * a * c;
		if (disc <= 0)
			goto check_plates;
		disc = sqrt(disc);

		k1 = (-b + disc) / (2.0 * a);
		k2 = (-b - disc) / (2.0 * a);

		/*
		 *  k1 and k2 are potential solutions to intersection with
		 *  side.  See if they fall in range.
		 */
		VJOIN1( hitp->hit_vpriv, pprime, k1, dprime );	/* hit' */
		if( hitp->hit_vpriv[X] >= -1.0 && hitp->hit_vpriv[X] <= 0.0
			&& hitp->hit_vpriv[Z] <= 0.0 ) {
			hitp->hit_magic = RT_HIT_MAGIC;
			hitp->hit_dist = k1;
			hitp->hit_surfno = RPC_NORM_BODY;	/* compute N */
			hitp++;
		}

		VJOIN1( hitp->hit_vpriv, pprime, k2, dprime );	/* hit' */
		if( hitp->hit_vpriv[X] >= -1.0 && hitp->hit_vpriv[X] <= 0.0
			&& hitp->hit_vpriv[Z] <= 0.0 ) {
			hitp->hit_magic = RT_HIT_MAGIC;
			hitp->hit_dist = k2;
			hitp->hit_surfno = RPC_NORM_BODY;	/* compute N */
			hitp++;
		}
	} else if ( !NEAR_ZERO(dprime[Z], RT_PCOEF_TOL) ) {
		k1 = (pprime[Y] * pprime[Y] - pprime[Z] - 1.0) / dprime[Z];
		VJOIN1( hitp->hit_vpriv, pprime, k1, dprime );	/* hit' */
		if( hitp->hit_vpriv[X] >= -1.0 && hitp->hit_vpriv[X] <= 0.0
			&& hitp->hit_vpriv[Z] <= 0.0 ) {
			hitp->hit_magic = RT_HIT_MAGIC;
			hitp->hit_dist = k1;
			hitp->hit_surfno = RPC_NORM_BODY;	/* compute N */
			hitp++;
		}
	}

	/*
	 * Check for hitting the end plates.
	 */

check_plates:
	/* check front and back plates */
	if( hitp < &hits[2]  &&  !NEAR_ZERO(dprime[X], RT_PCOEF_TOL) )  {
		/* 0 or 1 hits so far, this is worthwhile */
		k1 = -pprime[X] / dprime[X];		/* front plate */
		k2 = (-1.0 - pprime[X]) / dprime[X];	/* back plate */

		VJOIN1( hitp->hit_vpriv, pprime, k1, dprime );	/* hit' */
		if( hitp->hit_vpriv[Y] * hitp->hit_vpriv[Y]
			- hitp->hit_vpriv[Z] <= 1.0
			&& hitp->hit_vpriv[Z] <= 0.0)  {
			hitp->hit_magic = RT_HIT_MAGIC;
			hitp->hit_dist = k1;
			hitp->hit_surfno = RPC_NORM_FRT;	/* -H */
			hitp++;
		}

		VJOIN1( hitp->hit_vpriv, pprime, k2, dprime );	/* hit' */
		if( hitp->hit_vpriv[Y] * hitp->hit_vpriv[Y]
			- hitp->hit_vpriv[Z] <= 1.0
			&& hitp->hit_vpriv[Z] <= 0.0)  {
			hitp->hit_magic = RT_HIT_MAGIC;
			hitp->hit_dist = k2;
			hitp->hit_surfno = RPC_NORM_BACK;	/* +H */
			hitp++;
		}
	}
	
	/* check top plate */
	if( hitp == &hits[1]  &&  !NEAR_ZERO(dprime[Z], RT_PCOEF_TOL) )  {
		/* 1 hit so far, this is worthwhile */
		k1 = -pprime[Z] / dprime[Z];		/* top plate */

		VJOIN1( hitp->hit_vpriv, pprime, k1, dprime );	/* hit' */
		if( hitp->hit_vpriv[X] >= -1.0 &&  hitp->hit_vpriv[X] <= 0.0
			&& hitp->hit_vpriv[Y] >= -1.0
			&& hitp->hit_vpriv[Y] <= 1.0 ) {
			hitp->hit_magic = RT_HIT_MAGIC;
			hitp->hit_dist = k1;
			hitp->hit_surfno = RPC_NORM_TOP;	/* -B */
			hitp++;
		}
	}
	
	if( hitp != &hits[2] )
		return(0);	/* MISS */

	if( hits[0].hit_dist < hits[1].hit_dist )  {
		/* entry is [0], exit is [1] */
		register struct seg *segp;

		RT_GET_SEG(segp, ap->a_resource);
		segp->seg_stp = stp;
		segp->seg_in = hits[0];		/* struct copy */
		segp->seg_out = hits[1];	/* struct copy */
		BU_LIST_INSERT( &(seghead->l), &(segp->l) );
	} else {
		/* entry is [1], exit is [0] */
		register struct seg *segp;

		RT_GET_SEG(segp, ap->a_resource);
		segp->seg_stp = stp;
		segp->seg_in = hits[1];		/* struct copy */
		segp->seg_out = hits[0];	/* struct copy */
		BU_LIST_INSERT( &(seghead->l), &(segp->l) );
	}
	return(2);			/* HIT */
}

#define RT_RPC_SEG_MISS(SEG)	(SEG).seg_stp=RT_SOLTAB_NULL

/*
 *			R T _ R P C _ V S H O T
 *
 *  Vectorized version.
 */
void
rt_rpc_vshot(struct soltab **stp, struct xray **rp, struct seg *segp, int n, struct application *ap)
             	               /* An array of solid pointers */
           		       /* An array of ray pointers */
                               /* array of segs (results returned) */
   		  	       /* Number of ray/object pairs */
                  	    
{
	rt_vstub( stp, rp, segp, n, ap );
}

/*
 *  			R T _ R P C _ N O R M	
 *  
 *  Given ONE ray distance, return the normal and entry/exit point.
 */
void
rt_rpc_norm(register struct hit *hitp, struct soltab *stp, register struct xray *rp)
{
	vect_t can_normal;	/* normal to canonical rpc */
	register struct rpc_specific *rpc =
		(struct rpc_specific *)stp->st_specific;

	VJOIN1( hitp->hit_point, rp->r_pt, hitp->hit_dist, rp->r_dir );
	switch( hitp->hit_surfno )  {
	case RPC_NORM_BODY:
		VSET( can_normal, 0.0, hitp->hit_vpriv[Y], -0.5 );
		MAT4X3VEC( hitp->hit_normal, rpc->rpc_invRoS, can_normal );
		VUNITIZE( hitp->hit_normal );
		break;
	case RPC_NORM_TOP:
		VREVERSE( hitp->hit_normal, rpc->rpc_Bunit );
		break;
	case RPC_NORM_FRT:
		VREVERSE( hitp->hit_normal, rpc->rpc_Hunit );
		break;
	case RPC_NORM_BACK:
		VMOVE( hitp->hit_normal, rpc->rpc_Hunit );
		break;
	default:
		bu_log("rt_rpc_norm: surfno=%d bad\n", hitp->hit_surfno);
		break;
	}
}

/*
 *			R T _ R P C _ C U R V E
 *
 *  Return the curvature of the rpc.
 */
void
rt_rpc_curve(register struct curvature *cvp, register struct hit *hitp, struct soltab *stp)
{
	fastf_t	zp1, zp2;	/* 1st & 2nd derivatives */
	register struct rpc_specific *rpc =
		(struct rpc_specific *)stp->st_specific;

	switch( hitp->hit_surfno )  {
	case RPC_NORM_BODY:
		/* most nearly flat direction */
		VMOVE( cvp->crv_pdir, rpc->rpc_Hunit );
		cvp->crv_c1 = 0;
		/* k = z'' / (1 + z'^2) ^ 3/2 */
		zp2 = 2 * rpc->rpc_b * rpc->rpc_inv_rsq;
		zp1 = zp2 * hitp->hit_point[Y];
		cvp->crv_c2 = zp2 / pow( (1 + zp1*zp1), 1.5);
		break;
	case RPC_NORM_BACK:
	case RPC_NORM_FRT:
	case RPC_NORM_TOP:
		/* any tangent direction */
	 	bn_vec_ortho( cvp->crv_pdir, hitp->hit_normal );
	 	cvp->crv_c1 = cvp->crv_c2 = 0;
		break;
	}
}

/*
 *  			R T _ R P C _ U V
 *  
 *  For a hit on the surface of an rpc, return the (u,v) coordinates
 *  of the hit point, 0 <= u,v <= 1.
 *  u = azimuth
 *  v = elevation
 */
void
rt_rpc_uv(struct application *ap, struct soltab *stp, register struct hit *hitp, register struct uvcoord *uvp)
{
	register struct rpc_specific *rpc =
		(struct rpc_specific *)stp->st_specific;
	LOCAL vect_t work;
	LOCAL vect_t pprime;
	FAST fastf_t len;

	/*
	 * hit_point is on surface;  project back to unit rpc,
	 * creating a vector from vertex to hit point.
	 */
	VSUB2( work, hitp->hit_point, rpc->rpc_V );
	MAT4X3VEC( pprime, rpc->rpc_SoR, work );

	switch( hitp->hit_surfno )  {
	case RPC_NORM_BODY:
		/* Skin.  x,y coordinates define rotation.  radius = 1 */
		len = sqrt(pprime[Y]*pprime[Y] + pprime[Z]*pprime[Z]);
		uvp->uv_u = acos(pprime[Y]/len) * bn_invpi;
		uvp->uv_v = -pprime[X];		/* height */
		break;
	case RPC_NORM_FRT:
	case RPC_NORM_BACK:
		/* end plates - circular mapping, not seamless w/body, top */
		len = sqrt(pprime[Y]*pprime[Y] + pprime[Z]*pprime[Z]);
		uvp->uv_u = acos(pprime[Y]/len) * bn_invpi;
		uvp->uv_v = len;	/* rim v = 1 for both plates */
		break;
	case RPC_NORM_TOP:
		uvp->uv_u = 1.0 - (pprime[Y] + 1.0)/2.0;
		uvp->uv_v = -pprime[X];		/* height */
		break;
	}

	/* uv_du should be relative to rotation, uv_dv relative to height */
	uvp->uv_du = uvp->uv_dv = 0;
}

/*
 *		R T _ R P C _ F R E E
 */
void
rt_rpc_free(register struct soltab *stp)
{
	register struct rpc_specific *rpc =
		(struct rpc_specific *)stp->st_specific;

	bu_free( (char *)rpc, "rpc_specific" );
}

/*
 *			R T _ R P C _ C L A S S
 */
int
rt_rpc_class(void)
{
	return(0);
}

/*
 *			R T _ R P C _ P L O T
 */
int
rt_rpc_plot(struct bu_list *vhead, struct rt_db_internal *ip, const struct rt_tess_tol *ttol, const struct bn_tol *tol)
{
	LOCAL struct rt_rpc_internal	*xip;
        fastf_t *front;
	fastf_t *back;
	fastf_t b, dtol, f, h, ntol, rh;
	int	i, n;
	LOCAL mat_t	R;
	LOCAL mat_t	invR;
	struct rt_pt_node	*old, *pos, *pts;
	vect_t	Bu, Hu, Ru;

	RT_CK_DB_INTERNAL(ip);
	xip = (struct rt_rpc_internal *)ip->idb_ptr;
	RT_RPC_CK_MAGIC(xip);

	/* compute |B| |H| */
	b = MAGNITUDE( xip->rpc_B );	/* breadth */
	rh = xip->rpc_r;		/* rectangular halfwidth */
	h = MAGNITUDE( xip->rpc_H );	/* height */

	/* Check for |H| > 0, |B| > 0, |R| > 0 */
	if( NEAR_ZERO(h, RT_LEN_TOL) || NEAR_ZERO(b, RT_LEN_TOL)
	 || NEAR_ZERO(rh, RT_LEN_TOL) )  {
		bu_log("rt_rpc_plot():  zero length H, B, or rh\n");
		return(-2);		/* BAD */
	}

	/* Check for B.H == 0 */
	f = VDOT( xip->rpc_B, xip->rpc_H ) / (b * h);
	if( ! NEAR_ZERO(f, RT_DOT_TOL) )  {
		bu_log("rt_rpc_plot(): B not perpendicular to H, f=%f\n", f);
		return(-3);		/* BAD */
	}

	/* make unit vectors in B, H, and BxH directions */
	VMOVE(    Hu, xip->rpc_H );
	VUNITIZE( Hu );
	VMOVE(    Bu, xip->rpc_B );
	VUNITIZE( Bu );
	VCROSS(   Ru, Bu, Hu );

	/* Compute R and Rinv matrices */
	MAT_IDN( R );
	VREVERSE( &R[0], Hu );
	VMOVE(    &R[4], Ru );
	VREVERSE( &R[8], Bu );
	bn_mat_trn( invR, R );			/* inv of rot mat is trn */

	/*
	 *  Establish tolerances
	 */
	if( ttol->rel <= 0.0 || ttol->rel >= 1.0 )  {
		dtol = 0.0;		/* none */
	} else {
		/* Convert rel to absolute by scaling by smallest side */
		if (rh < b)
			dtol = ttol->rel * 2 * rh;
		else
			dtol = ttol->rel * 2 * b;
	}
	if( ttol->abs <= 0.0 )  {
		if( dtol <= 0.0 )  {
			/* No tolerance given, use a default */
			if (rh < b)
				dtol = 2 * 0.10 * rh;	/* 10% */
			else
				dtol = 2 * 0.10 * b;	/* 10% */
		} else {
			/* Use absolute-ized relative tolerance */
		}
	} else {
		/* Absolute tolerance was given, pick smaller */
		if( ttol->rel <= 0.0 || dtol > ttol->abs )
			dtol = ttol->abs;
	}

	/* To ensure normal tolerance, remain below this angle */
	if( ttol->norm > 0.0 )
		ntol = ttol->norm;
	else
		/* tolerate everything */
		ntol = bn_pi;

#if 1
	/* initial parabola approximation is a single segment */
	pts = rt_ptalloc();
	pts->next = rt_ptalloc();
	pts->next->next = NULL;
	VSET( pts->p,       0, -rh, 0);
	VSET( pts->next->p, 0,  rh, 0);
	/* 2 endpoints in 1st approximation */
	n = 2;
	/* recursively break segment 'til within error tolerances */
	n += rt_mk_parabola( pts, rh, b, dtol, ntol );

	/* get mem for arrays */
	front = (fastf_t *)bu_malloc(3*n * sizeof(fastf_t), "fastf_t");
	back  = (fastf_t *)bu_malloc(3*n * sizeof(fastf_t), "fastf_t");

	/* generate front & back plates in world coordinates */
	pos = pts;
	i = 0;
	while (pos) {
		/* rotate back to original position */
		MAT4X3VEC( &front[i], invR, pos->p );
		/* move to origin vertex origin */
		VADD2( &front[i], &front[i], xip->rpc_V );
		/* extrude front to create back plate */
		VADD2( &back[i], &front[i], xip->rpc_H );
		i += 3;
		old = pos;
		pos = pos->next;
		bu_free( (char *)old, "rt_pt_node" );
	}
#else
	/* initial parabola approximation is a single segment */
	pts = rt_ptalloc();
	pts->next = rt_ptalloc();
	pts->next->next = NULL;
	VSET( pts->p,       0,   0, -b);
	VSET( pts->next->p, 0,  rh,  0);
	/* 2 endpoints in 1st approximation */
	n = 2;
	/* recursively break segment 'til within error tolerances */
	n += rt_mk_parabola( pts, rh, b, dtol, ntol );

	/* get mem for arrays */
	front = (fastf_t *)bu_malloc((2*3*n-1) * sizeof(fastf_t), "fastf_t");
	back  = (fastf_t *)bu_malloc((2*3*n-1) * sizeof(fastf_t), "fastf_t");

	/* generate front & back plates in world coordinates */
	pos = pts;
	i = 0;
	while (pos) {
		/* rotate back to original position */
		MAT4X3VEC( &front[i], invR, pos->p );
		/* move to origin vertex origin */
		VADD2( &front[i], &front[i], xip->rpc_V );
		/* extrude front to create back plate */
		VADD2( &back[i], &front[i], xip->rpc_H );
		i += 3;
		old = pos;
		pos = pos->next;
		bu_free( (char *)old, "rt_pt_node" );
	}
	for (i = 3*n; i < 6*n-3; i+=3) {
		VMOVE( &front[i], &front[6*n-i-6] );
		front[i+1] = -front[i+1];
		VMOVE( &back[i], &back[6*n-i-6] );
		back[i+1] = -back[i+1];
	}
	n = 2*n - 1;
#endif

	/* Draw the front */
	RT_ADD_VLIST( vhead, &front[(n-1)*ELEMENTS_PER_VECT],
		BN_VLIST_LINE_MOVE );
	for( i = 0; i < n; i++ )  {
		RT_ADD_VLIST( vhead, &front[i*ELEMENTS_PER_VECT], BN_VLIST_LINE_DRAW );
	}

	/* Draw the back */
	RT_ADD_VLIST( vhead, &back[(n-1)*ELEMENTS_PER_VECT], BN_VLIST_LINE_MOVE );
	for( i = 0; i < n; i++ )  {
		RT_ADD_VLIST( vhead, &back[i*ELEMENTS_PER_VECT], BN_VLIST_LINE_DRAW );
	}

	/* Draw connections */
	for( i = 0; i < n; i++ )  {
		RT_ADD_VLIST( vhead, &front[i*ELEMENTS_PER_VECT], BN_VLIST_LINE_MOVE );
		RT_ADD_VLIST( vhead, &back[i*ELEMENTS_PER_VECT], BN_VLIST_LINE_DRAW );
	}
	
	bu_free( (char *)front, "fastf_t" );
	bu_free( (char *)back,  "fastf_t" );
                                                                                                        
	return(0);
}

/*
 *	R T _ M K _ P A R A B O L A
 *
 *	Approximate a parabola with line segments.  The initial single
 *	segment is broken at the point farthest from the parabola if
 *	that point is not aleady within the distance and normal error
 *	tolerances.  The two resulting segments are passed recursively
 *	to this routine until each segment is within tolerance.
 */
int
rt_mk_parabola(struct rt_pt_node *pts, fastf_t r, fastf_t b, fastf_t dtol, fastf_t ntol)
{
	fastf_t	dist, intr, m, theta0, theta1;
	int	n;
	point_t	mpt, p0, p1;
	vect_t	norm_line, norm_parab;
	struct rt_pt_node *new, *rt_ptalloc(void);
	
#define RPC_TOL .0001
	/* endpoints of segment approximating parabola */
	VMOVE( p0, pts->p );
	VMOVE( p1, pts->next->p );
	/* slope and intercept of segment */
	m = ( p1[Z] - p0[Z] ) / ( p1[Y] - p0[Y] );
	intr = p0[Z] - m * p0[Y];
	/* point on parabola with max dist between parabola and line */
	mpt[X] = 0;
	mpt[Y] = (r * r * m) / (2 * b);
	if (NEAR_ZERO( mpt[Y], RPC_TOL))
		mpt[Y] = 0.;
	mpt[Z] = (mpt[Y] * m / 2) - b;
	if (NEAR_ZERO( mpt[Z], RPC_TOL))
		mpt[Z] = 0.;
	/* max distance between that point and line */
	dist = fabs( mpt[Z] + b + b + intr ) / sqrt( m * m + 1 );
	/* angles between normal of line and of parabola at line endpoints */
	VSET( norm_line, m, -1., 0.);
	VSET( norm_parab, 2. * b / (r * r) * p0[Y], -1., 0.);
	VUNITIZE( norm_line );
	VUNITIZE( norm_parab );
	theta0 = fabs( acos( VDOT( norm_line, norm_parab )));
	VSET( norm_parab, 2. * b / (r * r) * p1[Y], -1., 0.);
	VUNITIZE( norm_parab );
	theta1 = fabs( acos( VDOT( norm_line, norm_parab )));
	/* split segment at widest point if not within error tolerances */
	if ( dist > dtol || theta0 > ntol || theta1 > ntol ) {
		/* split segment */
		new = rt_ptalloc();
		VMOVE( new->p, mpt );
		new->next = pts->next;
		pts->next = new;
		/* keep track of number of pts added */
		n = 1;
		/* recurse on first new segment */
		n += rt_mk_parabola( pts, r, b, dtol, ntol );
		/* recurse on second new segment */
		n += rt_mk_parabola( new, r, b, dtol, ntol );
	} else
		n  = 0;
	return( n );
}

/*
 *			R T _ P T A L L O C
 */
struct rt_pt_node *
rt_ptalloc(void)
{
	struct rt_pt_node *mem;
	
	mem = (struct rt_pt_node *)bu_malloc(sizeof(struct rt_pt_node), "rt_pt_node");
	if (!mem) {
		fprintf(stderr, "rt_ptalloc: no more memory!\n");
		exit(-1);
	}
	return(mem);
}

/*
 *			R T _ R P C _ T E S S
 *
 *  Returns -
 *	-1	failure
 *	 0	OK.  *r points to nmgregion that holds this tessellation.
 */
int
rt_rpc_tess(struct nmgregion **r, struct model *m, struct rt_db_internal *ip, const struct rt_tess_tol *ttol, const struct bn_tol *tol)
{
	int		i, j, n;
	fastf_t		b, *back, f, *front, h, rh;
	fastf_t		dtol, ntol;
	vect_t		Bu, Hu, Ru;
	LOCAL mat_t	R;
	LOCAL mat_t	invR;
	LOCAL struct rt_rpc_internal	*xip;
	struct rt_pt_node	*old, *pos, *pts;
	struct shell	*s;
	struct faceuse	**outfaceuses;
	struct vertex	**vfront, **vback, **vtemp, *vertlist[4];
	vect_t		*norms;
	fastf_t		r_sq_over_b;

	NMG_CK_MODEL( m );
	BN_CK_TOL( tol );
	RT_CK_TESS_TOL( ttol );

	RT_CK_DB_INTERNAL(ip);
	xip = (struct rt_rpc_internal *)ip->idb_ptr;
	RT_RPC_CK_MAGIC(xip);

	/* compute |B| |H| */
	b = MAGNITUDE( xip->rpc_B );	/* breadth */
	rh = xip->rpc_r;		/* rectangular halfwidth */
	h = MAGNITUDE( xip->rpc_H );	/* height */

	/* Check for |H| > 0, |B| > 0, |R| > 0 */
	if( NEAR_ZERO(h, RT_LEN_TOL) || NEAR_ZERO(b, RT_LEN_TOL)
	 || NEAR_ZERO(rh, RT_LEN_TOL) )  {
		bu_log("rt_rpc_tess():  zero length H, B, or rh\n");
		return(-2);		/* BAD */
	}

	/* Check for B.H == 0 */
	f = VDOT( xip->rpc_B, xip->rpc_H ) / (b * h);
	if( ! NEAR_ZERO(f, RT_DOT_TOL) )  {
		bu_log("rt_rpc_tess(): B not perpendicular to H, f=%f\n", f);
		return(-3);		/* BAD */
	}

	/* make unit vectors in B, H, and BxH directions */
	VMOVE(    Hu, xip->rpc_H );
	VUNITIZE( Hu );
	VMOVE(    Bu, xip->rpc_B );
	VUNITIZE( Bu );
	VCROSS(   Ru, Bu, Hu );

	/* Compute R and Rinv matrices */
	MAT_IDN( R );
	VREVERSE( &R[0], Hu );
	VMOVE(    &R[4], Ru );
	VREVERSE( &R[8], Bu );
	bn_mat_trn( invR, R );			/* inv of rot mat is trn */

	/*
	 *  Establish tolerances
	 */
	if( ttol->rel <= 0.0 || ttol->rel >= 1.0 )  {
		dtol = 0.0;		/* none */
	} else {
		/* Convert rel to absolute by scaling by smallest side */
		if (rh < b)
			dtol = ttol->rel * 2 * rh;
		else
			dtol = ttol->rel * 2 * b;
	}
	if( ttol->abs <= 0.0 )  {
		if( dtol <= 0.0 )  {
			/* No tolerance given, use a default */
			if (rh < b)
				dtol = 2 * 0.10 * rh;	/* 10% */
			else
				dtol = 2 * 0.10 * b;	/* 10% */
		} else {
			/* Use absolute-ized relative tolerance */
		}
	} else {
		/* Absolute tolerance was given, pick smaller */
		if( ttol->rel <= 0.0 || dtol > ttol->abs )
			dtol = ttol->abs;
	}

	/* To ensure normal tolerance, remain below this angle */
	if( ttol->norm > 0.0 )
		ntol = ttol->norm;
	else
		/* tolerate everything */
		ntol = bn_pi;

	/* initial parabola approximation is a single segment */
	pts = rt_ptalloc();
	pts->next = rt_ptalloc();
	pts->next->next = NULL;
	VSET( pts->p,       0, -rh, 0);
	VSET( pts->next->p, 0,  rh, 0);
	/* 2 endpoints in 1st approximation */
	n = 2;
	/* recursively break segment 'til within error tolerances */
	n += rt_mk_parabola( pts, rh, b, dtol, ntol );

	/* get mem for arrays */
	front = (fastf_t *)bu_malloc(3*n * sizeof(fastf_t), "fastf_t");
	back  = (fastf_t *)bu_malloc(3*n * sizeof(fastf_t), "fastf_t");
	norms = (vect_t *)bu_calloc( n , sizeof( vect_t ) , "rt_rpc_tess: norms" );
	vfront = (struct vertex **)bu_malloc((n+1) * sizeof(struct vertex *), "vertex *");
	vback = (struct vertex **)bu_malloc((n+1) * sizeof(struct vertex *), "vertex *");
	vtemp = (struct vertex **)bu_malloc((n+1) * sizeof(struct vertex *), "vertex *");
	outfaceuses =
		(struct faceuse **)bu_malloc((n+2) * sizeof(struct faceuse *), "faceuse *");
	if (!front || !back || !vfront || !vback || !vtemp || !outfaceuses) {
		fprintf(stderr, "rt_rpc_tess: no memory!\n");
		exit(-1);
	}
	
	/* generate front & back plates in world coordinates */
	r_sq_over_b = rh * rh / b;
	pos = pts;
	i = 0;
	j = 0;
	while (pos) {
		vect_t tmp_norm;

		VSET( tmp_norm , 0.0 , 2.0 * pos->p[Y] , -r_sq_over_b );
		MAT4X3VEC( norms[j] , invR , tmp_norm );
		VUNITIZE( norms[j] );
		/* rotate back to original position */
		MAT4X3VEC( &front[i], invR, pos->p );
		/* move to origin vertex origin */
		VADD2( &front[i], &front[i], xip->rpc_V );
		/* extrude front to create back plate */
		VADD2( &back[i], &front[i], xip->rpc_H );
		i += 3;
		j++;
		old = pos;
		pos = pos->next;
		bu_free( (char *)old, "rt_pt_node" );
	}

	*r = nmg_mrsv( m );	/* Make region, empty shell, vertex */
	s = BU_LIST_FIRST(shell, &(*r)->s_hd);

	for( i=0; i<n; i++ )  {
		vfront[i] = vtemp[i] = (struct vertex *)0;
	}

	/* Front face topology.  Verts are considered to go CCW */
	outfaceuses[0] = nmg_cface(s, vfront, n);

	(void)nmg_mark_edges_real( &outfaceuses[0]->l.magic );

	/* Back face topology.  Verts must go in opposite dir (CW) */
	outfaceuses[1] = nmg_cface(s, vtemp, n);

	(void)nmg_mark_edges_real( &outfaceuses[1]->l.magic );

	for( i=0; i<n; i++ )  vback[i] = vtemp[n-1-i];

	/* Duplicate [0] as [n] to handle loop end condition, below */
	vfront[n] = vfront[0];
	vback[n] = vback[0];

	/* Build topology for all the rectangular side faces (n of them)
	 * connecting the front and back faces.
	 * increasing indices go towards counter-clockwise (CCW).
	 */
	for( i=0; i<n; i++ )  {
		vertlist[0] = vfront[i];	/* from top, */
		vertlist[1] = vback[i];		/* straight down, */
		vertlist[2] = vback[i+1];	/* to left, */
		vertlist[3] = vfront[i+1];	/* straight up. */
		outfaceuses[2+i] = nmg_cface(s, vertlist, 4);
	}

	(void)nmg_mark_edges_real( &outfaceuses[n+1]->l.magic );

	for( i=0; i<n; i++ )  {
		NMG_CK_VERTEX(vfront[i]);
		NMG_CK_VERTEX(vback[i]);
	}

	/* Associate the vertex geometry, CCW */
	for( i=0; i<n; i++ )  {
		nmg_vertex_gv( vfront[i], &front[3*(i)] );
	}
	for( i=0; i<n; i++ )  {
		nmg_vertex_gv( vback[i], &back[3*(i)] );
	}

	/* Associate the face geometry */
	for (i=0 ; i < n+2 ; i++) {
		if( nmg_fu_planeeqn( outfaceuses[i], tol ) < 0 )
		{
			/* free mem */
			bu_free( (char *)front, "fastf_t");
			bu_free( (char *)back, "fastf_t");
			bu_free( (char*)vfront, "vertex *");
			bu_free( (char*)vback, "vertex *");
			bu_free( (char*)vtemp, "vertex *");
			bu_free( (char*)outfaceuses, "faceuse *");

			return(-1);		/* FAIL */
		}
	}

	/* Associate vertexuse normals */
	for( i=0 ; i<n ; i++ )
	{
		struct vertexuse *vu;
		struct faceuse *fu;
		vect_t rev_norm;

		VREVERSE( rev_norm , norms[i] );

		/* do "front" vertices */
		NMG_CK_VERTEX( vfront[i] );
		for( BU_LIST_FOR( vu , vertexuse , &vfront[i]->vu_hd ) )
		{
			NMG_CK_VERTEXUSE( vu );
			fu = nmg_find_fu_of_vu( vu );
			NMG_CK_FACEUSE( fu );
			if( fu->f_p == outfaceuses[0]->f_p ||
			    fu->f_p == outfaceuses[1]->f_p ||
			    fu->f_p == outfaceuses[n+1]->f_p )
					continue;	/* skip flat faces */

			if( fu->orientation == OT_SAME )
				nmg_vertexuse_nv( vu , norms[i] );
			else if( fu->orientation == OT_OPPOSITE )
				nmg_vertexuse_nv( vu , rev_norm );
		}

		/* and "back" vertices */
		NMG_CK_VERTEX( vback[i] );
		for( BU_LIST_FOR( vu , vertexuse , &vback[i]->vu_hd ) )
		{
			NMG_CK_VERTEXUSE( vu );
			fu = nmg_find_fu_of_vu( vu );
			NMG_CK_FACEUSE( fu );
			if( fu->f_p == outfaceuses[0]->f_p ||
			    fu->f_p == outfaceuses[1]->f_p ||
			    fu->f_p == outfaceuses[n+1]->f_p )
					continue;	/* skip flat faces */

			if( fu->orientation == OT_SAME )
				nmg_vertexuse_nv( vu , norms[i] );
			else if( fu->orientation == OT_OPPOSITE )
				nmg_vertexuse_nv( vu , rev_norm );
		}
	}

	/* Glue the edges of different outward pointing face uses together */
	nmg_gluefaces( outfaceuses, n+2, tol );

	/* Compute "geometry" for region and shell */
	nmg_region_a( *r, tol );
	
	/* free mem */
	bu_free( (char *)front, "fastf_t");
	bu_free( (char *)back, "fastf_t");
	bu_free( (char*)vfront, "vertex *");
	bu_free( (char*)vback, "vertex *");
	bu_free( (char*)vtemp, "vertex *");
	bu_free( (char*)outfaceuses, "faceuse *");

	return(0);
}

/*
 *			R T _ R P C _ I M P O R T
 *
 *  Import an RPC from the database format to the internal format.
 *  Apply modeling transformations as well.
 */
int
rt_rpc_import(struct rt_db_internal *ip, const struct bu_external *ep, register const fastf_t *mat, const struct db_i *dbip)
{
	LOCAL struct rt_rpc_internal	*xip;
	union record			*rp;

	BU_CK_EXTERNAL( ep );
	rp = (union record *)ep->ext_buf;
	/* Check record type */
	if( rp->u_id != ID_SOLID )  {
		bu_log("rt_rpc_import: defective record\n");
		return(-1);
	}

	RT_CK_DB_INTERNAL( ip );
	ip->idb_major_type = DB5_MAJORTYPE_BRLCAD;
	ip->idb_type = ID_RPC;
	ip->idb_meth = &rt_functab[ID_RPC];
	ip->idb_ptr = bu_malloc( sizeof(struct rt_rpc_internal), "rt_rpc_internal");
	xip = (struct rt_rpc_internal *)ip->idb_ptr;
	xip->rpc_magic = RT_RPC_INTERNAL_MAGIC;

	/* Warning:  type conversion */
	MAT4X3PNT( xip->rpc_V, mat, &rp->s.s_values[0*3] );
	MAT4X3VEC( xip->rpc_H, mat, &rp->s.s_values[1*3] );
	MAT4X3VEC( xip->rpc_B, mat, &rp->s.s_values[2*3] );
	xip->rpc_r = rp->s.s_values[3*3] / mat[15];

	if( xip->rpc_r < SMALL_FASTF )
	{
		bu_log( "rt_rpc_import: r is zero\n" );
		bu_free( (char *)ip->idb_ptr , "rt_rpc_import: ip->idp_ptr" );
		return( -1 );
	}

	return(0);			/* OK */
}

/*
 *			R T _ R P C _ E X P O R T
 *
 *  The name is added by the caller, in the usual place.
 */
int
rt_rpc_export(struct bu_external *ep, const struct rt_db_internal *ip, double local2mm, const struct db_i *dbip)
{
	struct rt_rpc_internal	*xip;
	union record		*rpc;
	fastf_t			f,mag_b,mag_h;

	RT_CK_DB_INTERNAL(ip);
	if( ip->idb_type != ID_RPC )  return(-1);
	xip = (struct rt_rpc_internal *)ip->idb_ptr;
	RT_RPC_CK_MAGIC(xip);

	BU_CK_EXTERNAL(ep);
	ep->ext_nbytes = sizeof(union record);
	ep->ext_buf = (genptr_t)bu_calloc( 1, ep->ext_nbytes, "rpc external");
	rpc = (union record *)ep->ext_buf;

	rpc->s.s_id = ID_SOLID;
	rpc->s.s_type = RPC;

	mag_b = MAGNITUDE( xip->rpc_B );
	mag_h = MAGNITUDE( xip->rpc_H );
	
	if( mag_b < RT_LEN_TOL || mag_h < RT_LEN_TOL || xip->rpc_r < RT_LEN_TOL) {
		bu_log("rt_rpc_export: not all dimensions positive!\n");
		return(-1);
	}

	f = VDOT(xip->rpc_B, xip->rpc_H) / (mag_b * mag_h );
	if ( !NEAR_ZERO( f , RT_DOT_TOL) ) {
		bu_log("rt_rpc_export: B and H are not perpendicular! (dot = %g)\n",f );
		return(-1);
	}

	/* Warning:  type conversion */
	VSCALE( &rpc->s.s_values[0*3], xip->rpc_V, local2mm );
	VSCALE( &rpc->s.s_values[1*3], xip->rpc_H, local2mm );
	VSCALE( &rpc->s.s_values[2*3], xip->rpc_B, local2mm );
	rpc->s.s_values[3*3] = xip->rpc_r * local2mm;

	return(0);
}

/*
 *			R T _ R P C _ I M P O R T 5
 *
 *  Import an RPC from the database format to the internal format.
 *  Apply modeling transformations as well.
 */
int
rt_rpc_import5(struct rt_db_internal *ip, const struct bu_external *ep, register const fastf_t *mat, const struct db_i *dbip)
{
	struct rt_rpc_internal	*xip;
	fastf_t			vec[10];

	BU_CK_EXTERNAL( ep );

	BU_ASSERT_LONG( ep->ext_nbytes, ==, SIZEOF_NETWORK_DOUBLE * 10 );

	RT_CK_DB_INTERNAL( ip );
	ip->idb_major_type = DB5_MAJORTYPE_BRLCAD;
	ip->idb_type = ID_RPC;
	ip->idb_meth = &rt_functab[ID_RPC];
	ip->idb_ptr = bu_malloc( sizeof(struct rt_rpc_internal), "rt_rpc_internal");

	xip = (struct rt_rpc_internal *)ip->idb_ptr;
	xip->rpc_magic = RT_RPC_INTERNAL_MAGIC;

	/* Convert from database (network) to internal (host) format */
	ntohd( (unsigned char *)vec, ep->ext_buf, 10 );

	/* Apply modeling transformations */
	MAT4X3PNT( xip->rpc_V, mat, &vec[0*3] );
	MAT4X3VEC( xip->rpc_H, mat, &vec[1*3] );
	MAT4X3VEC( xip->rpc_B, mat, &vec[2*3] );
	xip->rpc_r = vec[3*3] / mat[15];

	if( xip->rpc_r < SMALL_FASTF )
	{
		bu_log( "rt_rpc_import: r is zero\n" );
		bu_free( (char *)ip->idb_ptr , "rt_rpc_import: ip->idp_ptr" );
		return( -1 );
	}

	return(0);			/* OK */
}

/*
 *			R T _ R P C _ E X P O R T 5
 *
 *  The name is added by the caller, in the usual place.
 */
int
rt_rpc_export5(struct bu_external *ep, const struct rt_db_internal *ip, double local2mm, const struct db_i *dbip)
{
	struct rt_rpc_internal	*xip;
	fastf_t			vec[10];
	fastf_t			f,mag_b,mag_h;

	RT_CK_DB_INTERNAL(ip);
	if( ip->idb_type != ID_RPC )  return(-1);
	xip = (struct rt_rpc_internal *)ip->idb_ptr;
	RT_RPC_CK_MAGIC(xip);

	BU_CK_EXTERNAL(ep);
	ep->ext_nbytes = SIZEOF_NETWORK_DOUBLE * 10;
	ep->ext_buf = (genptr_t)bu_malloc( ep->ext_nbytes, "rpc external");

	mag_b = MAGNITUDE( xip->rpc_B );
	mag_h = MAGNITUDE( xip->rpc_H );
	
	if( mag_b < RT_LEN_TOL || mag_h < RT_LEN_TOL || xip->rpc_r < RT_LEN_TOL) {
		bu_log("rt_rpc_export: not all dimensions positive!\n");
		return(-1);
	}

	f = VDOT(xip->rpc_B, xip->rpc_H) / (mag_b * mag_h );
	if ( !NEAR_ZERO( f , RT_DOT_TOL) ) {
		bu_log("rt_rpc_export: B and H are not perpendicular! (dot = %g)\n",f );
		return(-1);
	}

	/* scale 'em into local buffer */
	VSCALE( &vec[0*3], xip->rpc_V, local2mm );
	VSCALE( &vec[1*3], xip->rpc_H, local2mm );
	VSCALE( &vec[2*3], xip->rpc_B, local2mm );
	vec[3*3] = xip->rpc_r * local2mm;

	/* Convert from internal (host) to database (network) format */
	htond( ep->ext_buf, (unsigned char *)vec, 10 );

	return(0);
}

/*
 *			R T _ R P C _ D E S C R I B E
 *
 *  Make human-readable formatted presentation of this solid.
 *  First line describes type of solid.
 *  Additional lines are indented one tab, and give parameter values.
 */
int
rt_rpc_describe(struct bu_vls *str, const struct rt_db_internal *ip, int verbose, double mm2local)
{
	register struct rt_rpc_internal	*xip =
		(struct rt_rpc_internal *)ip->idb_ptr;
	char	buf[256];

	RT_RPC_CK_MAGIC(xip);
	bu_vls_strcat( str, "Right Parabolic Cylinder (RPC)\n");

	sprintf(buf, "\tV (%g, %g, %g)\n",
		xip->rpc_V[X] * mm2local,
		xip->rpc_V[Y] * mm2local,
		xip->rpc_V[Z] * mm2local );
	bu_vls_strcat( str, buf );

	sprintf(buf, "\tB (%g, %g, %g) mag=%g\n",
		xip->rpc_B[X] * mm2local,
		xip->rpc_B[Y] * mm2local,
		xip->rpc_B[Z] * mm2local,
		MAGNITUDE(xip->rpc_B) * mm2local);
	bu_vls_strcat( str, buf );

	sprintf(buf, "\tH (%g, %g, %g) mag=%g\n",
		xip->rpc_H[X] * mm2local,
		xip->rpc_H[Y] * mm2local,
		xip->rpc_H[Z] * mm2local,
		MAGNITUDE(xip->rpc_H) * mm2local);
	bu_vls_strcat( str, buf );
	
	sprintf(buf, "\tr=%g\n", xip->rpc_r * mm2local);
	bu_vls_strcat( str, buf );

	return(0);
}

/*
 *			R T _ R P C _ I F R E E
 *
 *  Free the storage associated with the rt_db_internal version of this solid.
 */
void
rt_rpc_ifree(struct rt_db_internal *ip)
{
	register struct rt_rpc_internal	*xip;

	RT_CK_DB_INTERNAL(ip);
	xip = (struct rt_rpc_internal *)ip->idb_ptr;
	RT_RPC_CK_MAGIC(xip);
	xip->rpc_magic = 0;		/* sanity */

	bu_free( (char *)xip, "rpc ifree" );
	ip->idb_ptr = GENPTR_NULL;	/* sanity */
}
@


11.28
log
@change conf.h to a wrapped config.h
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /cvs/brlcad/librt/g_rpc.c,v 11.27 2004/04/05 08:48:57 morrison Exp $ (BRL)";
@


11.27
log
@merge of ansi-6-0-branch into HEAD
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header$ (BRL)";
d153 5
a157 1
#include "conf.h"
@


11.26
log
@update copyright to include span through 2003
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.25 2002/08/20 17:08:01 jra Exp $ (BRL)";
d203 1
a203 4
rt_rpc_prep( stp, ip, rtip )
struct soltab		*stp;
struct rt_db_internal	*ip;
struct rt_i		*rtip;
d304 1
a304 2
rt_rpc_print( stp )
register const struct soltab *stp;
d335 1
a335 5
rt_rpc_shot( stp, rp, ap, seghead )
struct soltab		*stp;
register struct xray	*rp;
struct application	*ap;
struct seg		*seghead;
d484 6
a489 6
rt_rpc_vshot( stp, rp, segp, n, ap )
struct soltab	       *stp[]; /* An array of solid pointers */
struct xray		*rp[]; /* An array of ray pointers */
struct  seg            segp[]; /* array of segs (results returned) */
int		  	    n; /* Number of ray/object pairs */
struct application	*ap;
d500 1
a500 4
rt_rpc_norm( hitp, stp, rp )
register struct hit	*hitp;
struct soltab		*stp;
register struct xray	*rp;
d534 1
a534 4
rt_rpc_curve( cvp, hitp, stp )
register struct curvature *cvp;
register struct hit	*hitp;
struct soltab		*stp;
d569 1
a569 5
rt_rpc_uv( ap, stp, hitp, uvp )
struct application	*ap;
struct soltab		*stp;
register struct hit	*hitp;
register struct uvcoord	*uvp;
d612 1
a612 2
rt_rpc_free( stp )
register struct soltab *stp;
d624 1
a624 1
rt_rpc_class()
d633 1
a633 5
rt_rpc_plot( vhead, ip, ttol, tol )
struct bu_list		*vhead;
struct rt_db_internal	*ip;
const struct rt_tess_tol *ttol;
const struct bn_tol		*tol;
d823 1
a823 3
rt_mk_parabola( pts, r, b, dtol, ntol )
struct rt_pt_node *pts;
fastf_t	r, b, dtol, ntol;
d829 1
a829 1
	struct rt_pt_node *new, *rt_ptalloc();
d879 1
a879 1
rt_ptalloc()
d899 1
a899 6
rt_rpc_tess( r, m, ip, ttol, tol )
struct nmgregion	**r;
struct model		*m;
struct rt_db_internal	*ip;
const struct rt_tess_tol *ttol;
const struct bn_tol	*tol;
d1176 1
a1176 5
rt_rpc_import( ip, ep, mat, dbip )
struct rt_db_internal		*ip;
const struct bu_external	*ep;
register const mat_t		mat;
const struct db_i		*dbip;
d1219 1
a1219 5
rt_rpc_export( ep, ip, local2mm, dbip )
struct bu_external		*ep;
const struct rt_db_internal	*ip;
double				local2mm;
const struct db_i		*dbip;
d1268 1
a1268 5
rt_rpc_import5( ip, ep, mat, dbip )
struct rt_db_internal		*ip;
const struct bu_external	*ep;
register const mat_t		mat;
const struct db_i		*dbip;
d1311 1
a1311 5
rt_rpc_export5( ep, ip, local2mm, dbip )
struct bu_external		*ep;
const struct rt_db_internal	*ip;
double				local2mm;
const struct db_i		*dbip;
d1360 1
a1360 5
rt_rpc_describe( str, ip, verbose, mm2local )
struct bu_vls		*str;
const struct rt_db_internal	*ip;
int			verbose;
double			mm2local;
d1401 1
a1401 2
rt_rpc_ifree( ip )
struct rt_db_internal	*ip;
@


11.25
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d146 1
a146 1
 *	This software is Copyright (C) 1990 by the United States Army.
d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.23 2001/12/04 23:56:40 morrison Exp $ (BRL)";
@


11.25.4.1
log
@sync to HEAD...
@
text
@d146 1
a146 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/librt/g_rpc.c,v 11.26 2004/02/02 17:39:21 morrison Exp $ (BRL)";
@


11.25.10.1
log
@merge from HEAD
@
text
@d146 1
a146 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.26 2004/02/02 17:39:21 morrison Exp $ (BRL)";
@


11.25.10.2
log
@merge from head
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.25.10.1 2004/02/12 18:37:42 erikg Exp $ (BRL)";
@


11.25.2.1
log
@Initial ANSIfication
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.25 2002/08/20 17:08:01 jra Exp $ (BRL)";
d203 4
a206 1
rt_rpc_prep(struct soltab *stp, struct rt_db_internal *ip, struct rt_i *rtip)
d307 2
a308 1
rt_rpc_print(register const struct soltab *stp)
d339 5
a343 1
rt_rpc_shot(struct soltab *stp, register struct xray *rp, struct application *ap, struct seg *seghead)
d492 6
a497 6
rt_rpc_vshot(struct soltab **stp, struct xray **rp, struct seg *segp, int n, struct application *ap)
             	               /* An array of solid pointers */
           		       /* An array of ray pointers */
                               /* array of segs (results returned) */
   		  	       /* Number of ray/object pairs */
                  	    
d508 4
a511 1
rt_rpc_norm(register struct hit *hitp, struct soltab *stp, register struct xray *rp)
d545 4
a548 1
rt_rpc_curve(register struct curvature *cvp, register struct hit *hitp, struct soltab *stp)
d583 5
a587 1
rt_rpc_uv(struct application *ap, struct soltab *stp, register struct hit *hitp, register struct uvcoord *uvp)
d630 2
a631 1
rt_rpc_free(register struct soltab *stp)
d643 1
a643 1
rt_rpc_class(void)
d652 5
a656 1
rt_rpc_plot(struct bu_list *vhead, struct rt_db_internal *ip, const struct rt_tess_tol *ttol, const struct bn_tol *tol)
d846 3
a848 1
rt_mk_parabola(struct rt_pt_node *pts, fastf_t r, fastf_t b, fastf_t dtol, fastf_t ntol)
d854 1
a854 1
	struct rt_pt_node *new, *rt_ptalloc(void);
d904 1
a904 1
rt_ptalloc(void)
d924 6
a929 1
rt_rpc_tess(struct nmgregion **r, struct model *m, struct rt_db_internal *ip, const struct rt_tess_tol *ttol, const struct bn_tol *tol)
d1206 5
a1210 1
rt_rpc_import(struct rt_db_internal *ip, const struct bu_external *ep, register const fastf_t *mat, const struct db_i *dbip)
d1253 5
a1257 1
rt_rpc_export(struct bu_external *ep, const struct rt_db_internal *ip, double local2mm, const struct db_i *dbip)
d1306 5
a1310 1
rt_rpc_import5(struct rt_db_internal *ip, const struct bu_external *ep, register const fastf_t *mat, const struct db_i *dbip)
d1353 5
a1357 1
rt_rpc_export5(struct bu_external *ep, const struct rt_db_internal *ip, double local2mm, const struct db_i *dbip)
d1406 5
a1410 1
rt_rpc_describe(struct bu_vls *str, const struct rt_db_internal *ip, int verbose, double mm2local)
d1451 2
a1452 1
rt_rpc_ifree(struct rt_db_internal *ip)
@


11.25.2.2
log
@sync branch with HEAD
@
text
@d146 1
a146 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header$ (BRL)";
@


11.24
log
@Converted from K&R to ANSI C - RFH
@
text
@d203 4
a206 1
rt_rpc_prep(struct soltab *stp, struct rt_db_internal *ip, struct rt_i *rtip)
d307 2
a308 1
rt_rpc_print(register const struct soltab *stp)
d339 5
a343 1
rt_rpc_shot(struct soltab *stp, register struct xray *rp, struct application *ap, struct seg *seghead)
d492 6
a497 6
rt_rpc_vshot(struct soltab **stp, struct xray **rp, struct seg *segp, int n, struct application *ap)
             	               /* An array of solid pointers */
           		       /* An array of ray pointers */
                               /* array of segs (results returned) */
   		  	       /* Number of ray/object pairs */
                  	    
d508 4
a511 1
rt_rpc_norm(register struct hit *hitp, struct soltab *stp, register struct xray *rp)
d545 4
a548 1
rt_rpc_curve(register struct curvature *cvp, register struct hit *hitp, struct soltab *stp)
d583 5
a587 1
rt_rpc_uv(struct application *ap, struct soltab *stp, register struct hit *hitp, register struct uvcoord *uvp)
d630 2
a631 1
rt_rpc_free(register struct soltab *stp)
d643 1
a643 1
rt_rpc_class(void)
d652 5
a656 1
rt_rpc_plot(struct bu_list *vhead, struct rt_db_internal *ip, const struct rt_tess_tol *ttol, const struct bn_tol *tol)
d846 3
a848 1
rt_mk_parabola(struct rt_pt_node *pts, fastf_t r, fastf_t b, fastf_t dtol, fastf_t ntol)
d854 1
a854 1
	struct rt_pt_node *new, *rt_ptalloc(void);
d904 1
a904 1
rt_ptalloc(void)
d924 6
a929 1
rt_rpc_tess(struct nmgregion **r, struct model *m, struct rt_db_internal *ip, const struct rt_tess_tol *ttol, const struct bn_tol *tol)
d1206 5
a1210 1
rt_rpc_import(struct rt_db_internal *ip, const struct bu_external *ep, register const fastf_t *mat, const struct db_i *dbip)
d1253 5
a1257 1
rt_rpc_export(struct bu_external *ep, const struct rt_db_internal *ip, double local2mm, const struct db_i *dbip)
d1306 5
a1310 1
rt_rpc_import5(struct rt_db_internal *ip, const struct bu_external *ep, register const fastf_t *mat, const struct db_i *dbip)
d1353 5
a1357 1
rt_rpc_export5(struct bu_external *ep, const struct rt_db_internal *ip, double local2mm, const struct db_i *dbip)
d1406 5
a1410 1
rt_rpc_describe(struct bu_vls *str, const struct rt_db_internal *ip, int verbose, double mm2local)
d1451 2
a1452 1
rt_rpc_ifree(struct rt_db_internal *ip)
@


11.23
log
@added no_bombing_macros define around a variable only used in a bombing macro
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.22 2001/10/02 19:24:30 jra Exp $ (BRL)";
d203 1
a203 4
rt_rpc_prep( stp, ip, rtip )
struct soltab		*stp;
struct rt_db_internal	*ip;
struct rt_i		*rtip;
d304 1
a304 2
rt_rpc_print( stp )
register const struct soltab *stp;
d335 1
a335 5
rt_rpc_shot( stp, rp, ap, seghead )
struct soltab		*stp;
register struct xray	*rp;
struct application	*ap;
struct seg		*seghead;
d484 6
a489 6
rt_rpc_vshot( stp, rp, segp, n, ap )
struct soltab	       *stp[]; /* An array of solid pointers */
struct xray		*rp[]; /* An array of ray pointers */
struct  seg            segp[]; /* array of segs (results returned) */
int		  	    n; /* Number of ray/object pairs */
struct application	*ap;
d500 1
a500 4
rt_rpc_norm( hitp, stp, rp )
register struct hit	*hitp;
struct soltab		*stp;
register struct xray	*rp;
d534 1
a534 4
rt_rpc_curve( cvp, hitp, stp )
register struct curvature *cvp;
register struct hit	*hitp;
struct soltab		*stp;
d569 1
a569 5
rt_rpc_uv( ap, stp, hitp, uvp )
struct application	*ap;
struct soltab		*stp;
register struct hit	*hitp;
register struct uvcoord	*uvp;
d612 1
a612 2
rt_rpc_free( stp )
register struct soltab *stp;
d624 1
a624 1
rt_rpc_class()
d633 1
a633 5
rt_rpc_plot( vhead, ip, ttol, tol )
struct bu_list		*vhead;
struct rt_db_internal	*ip;
const struct rt_tess_tol *ttol;
const struct bn_tol		*tol;
d823 1
a823 3
rt_mk_parabola( pts, r, b, dtol, ntol )
struct rt_pt_node *pts;
fastf_t	r, b, dtol, ntol;
d829 1
a829 1
	struct rt_pt_node *new, *rt_ptalloc();
d879 1
a879 1
rt_ptalloc()
d899 1
a899 6
rt_rpc_tess( r, m, ip, ttol, tol )
struct nmgregion	**r;
struct model		*m;
struct rt_db_internal	*ip;
const struct rt_tess_tol *ttol;
const struct bn_tol	*tol;
d1176 1
a1176 5
rt_rpc_import( ip, ep, mat, dbip )
struct rt_db_internal		*ip;
const struct bu_external	*ep;
register const mat_t		mat;
const struct db_i		*dbip;
d1219 1
a1219 5
rt_rpc_export( ep, ip, local2mm, dbip )
struct bu_external		*ep;
const struct rt_db_internal	*ip;
double				local2mm;
const struct db_i		*dbip;
d1268 1
a1268 5
rt_rpc_import5( ip, ep, mat, dbip )
struct rt_db_internal		*ip;
const struct bu_external	*ep;
register const mat_t		mat;
const struct db_i		*dbip;
d1311 1
a1311 5
rt_rpc_export5( ep, ip, local2mm, dbip )
struct bu_external		*ep;
const struct rt_db_internal	*ip;
double				local2mm;
const struct db_i		*dbip;
d1360 1
a1360 5
rt_rpc_describe( str, ip, verbose, mm2local )
struct bu_vls		*str;
const struct rt_db_internal	*ip;
int			verbose;
double			mm2local;
d1401 1
a1401 2
rt_rpc_ifree( ip )
struct rt_db_internal	*ip;
@


11.22
log
@Routines were not setting idb_major_type in the internal structure
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.21 2001/04/20 22:29:47 morrison Exp $ (BRL)";
d210 3
a212 1
	const struct bn_tol		*tol = &rtip->rti_tol;
@


11.21
log
@CONST to const
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.20 2001/03/31 01:57:09 morrison Exp $ (BRL)";
d1222 1
d1318 1
@


11.20
log
@Deprecated bn_mat_idn() and bn_mat_zero(), updated calls to h/vmath.h's MAT_IDN() and MAT_ZERO() performance improved macros.
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.19 2000/10/18 18:10:35 butler Exp $ (BRL)";
d179 1
a179 1
CONST struct bu_structparse rt_rpc_parse[] = {
d210 1
a210 1
	CONST struct bn_tol		*tol = &rtip->rti_tol;
d306 1
a306 1
register CONST struct soltab *stp;
d308 1
a308 1
	register CONST struct rpc_specific *rpc =
d351 1
a351 1
/*?????	CONST struct bn_tol	*tol = &rtip->rti_tol; ?????*/
d653 2
a654 2
CONST struct rt_tess_tol *ttol;
CONST struct bn_tol		*tol;
d926 2
a927 2
CONST struct rt_tess_tol *ttol;
CONST struct bn_tol	*tol;
d1206 3
a1208 3
CONST struct bu_external	*ep;
register CONST mat_t		mat;
CONST struct db_i		*dbip;
d1252 1
a1252 1
CONST struct rt_db_internal	*ip;
d1254 1
a1254 1
CONST struct db_i		*dbip;
d1305 3
a1307 3
CONST struct bu_external	*ep;
register CONST mat_t		mat;
CONST struct db_i		*dbip;
d1351 1
a1351 1
CONST struct rt_db_internal	*ip;
d1353 1
a1353 1
CONST struct db_i		*dbip;
d1404 1
a1404 1
CONST struct rt_db_internal	*ip;
@


11.19
log
@Patches for compiling under RedHat 7.0
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.18 2000/08/21 02:02:31 butler Exp $ (BRL)";
d263 1
a263 1
	bn_mat_idn( R );
d271 1
a271 1
	bn_mat_idn( S );
d697 1
a697 1
	bn_mat_idn( R );
d978 1
a978 1
	bn_mat_idn( R );
@


11.18
log
@Massive compilation warnings eliminated
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.17 2000/07/10 23:01:34 mike Exp $ (BRL)";
d156 3
@


11.17
log
@
Added "const" to RCSid string, to silence warnings of unused variable
on GCC compilers
@
text
@d150 1
a150 1
static const char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.16 2000/06/30 15:38:03 mike Exp $ (BRL)";
d181 2
a182 1
    {0} };
@


11.16
log
@
export methods should not init the external structure, just check them.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.15 2000/06/30 15:31:15 mike Exp $ (BRL)";
@


11.15
log
@
The import/export and import5/export5 methods must NOT
re-initialize their rt_db_internal* pointer, they should just check it.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.14 2000/06/27 15:33:31 bparker Exp $ (BRL)";
d1261 1
a1261 1
	BU_INIT_EXTERNAL(ep);
d1360 1
a1360 1
	BU_INIT_EXTERNAL(ep);
@


11.14
log
@Call BU_ASSERT_LONG.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.13 2000/06/26 21:24:43 bparker Exp $ (BRL)";
d1217 1
a1217 1
	RT_INIT_DB_INTERNAL( ip );
d1312 1
a1312 1
	RT_INIT_DB_INTERNAL( ip );
@


11.13
log
@Add rt_rpc_import5 and rt_rpc_export5 routines.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.12 2000/04/12 02:34:35 mike Exp $ (BRL)";
d1309 2
@


11.12
log
@
NT port, non-compat4
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.11 2000/03/29 02:43:10 mike Exp $ (BRL)";
d1288 96
@


11.11
log
@
Fixed invocation of nmg_mark_edges_real()
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.10 2000/03/28 20:43:29 mike Exp $ (BRL)";
d562 1
a562 1
	 	vec_ortho( cvp->crv_pdir, hitp->hit_normal );
@


11.10
log
@
Renamed conflicting defines
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.9 1999/11/26 21:46:48 mike Exp $ (BRL)";
d1074 1
a1074 1
	(void)nmg_mark_edges_real( &outfaceuses[0]->l );
d1079 1
a1079 1
	(void)nmg_mark_edges_real( &outfaceuses[1]->l );
d1099 1
a1099 1
	(void)nmg_mark_edges_real( &outfaceuses[n+1]->l );
@


11.9
log
@
Lint cleanups
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.8 1999/11/24 23:12:09 mike Exp $ (BRL)";
d850 1
a850 1
#define MIKE_TOL .0001
d860 1
a860 1
	if (NEAR_ZERO( mpt[Y], MIKE_TOL))
d863 1
a863 1
	if (NEAR_ZERO( mpt[Z], MIKE_TOL))
@


11.8
log
@
Made structparse tables CONST
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.7 1999/11/17 02:42:01 mike Exp $ (BRL)";
a175 5
struct pt_node {
	point_t		p;	/* a point */
	struct pt_node	*next;	/* ptr to next pt */
};

d650 1
a650 1
struct bn_tol		*tol;
d659 1
a659 1
	struct pt_node	*old, *pos, *pts, *rt_ptalloc();
d763 1
a763 1
		bu_free( (char *)old, "pt_node" );
d794 1
a794 1
		bu_free( (char *)old, "pt_node" );
d841 1
a842 1
struct pt_node *pts;
d848 1
a848 1
	struct pt_node *new, *rt_ptalloc();
d894 4
a897 1
struct pt_node *
d900 1
a900 1
	struct pt_node *mem;
d902 1
a902 1
	mem = (struct pt_node *)bu_malloc(sizeof(struct pt_node), "pt_node");
d932 1
a932 1
	struct pt_node	*old, *pos, *pts;
d1061 1
a1061 1
		bu_free( (char *)old, "pt_node" );
d1200 1
a1200 1
rt_rpc_import( ip, ep, mat )
d1204 1
d1246 1
a1246 1
rt_rpc_export( ep, ip, local2mm )
d1250 1
d1302 1
a1302 1
struct rt_db_internal	*ip;
@


11.7
log
@
Added idb_meth and st_meth pointers to allow direct access to per-solid
methods, C++ style.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.6 1999/10/30 03:53:27 mike Exp $ (BRL)";
d181 1
a181 1
struct bu_structparse rt_rpc_parse[] = {
@


11.6
log
@
Added magic numbers for ray, hit, and application structures.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.5 1999/07/02 22:19:24 mike Exp $ (BRL)";
d247 1
d1220 1
@


11.5
log
@
Removed dependence on compat4.h
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.4 1999/05/27 19:10:41 mike Exp $ (BRL)";
d383 1
d392 1
d402 1
d424 1
d434 1
d450 1
@


11.4
log
@
sed4
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /c/CVS/brlcad/librt/g_rpc.c,v 11.3 1997/06/17 19:30:38 gdurf Exp $ (BRL)";
d805 1
a805 1
		RT_VLIST_LINE_MOVE );
d807 1
a807 1
		RT_ADD_VLIST( vhead, &front[i*ELEMENTS_PER_VECT], RT_VLIST_LINE_DRAW );
d811 1
a811 1
	RT_ADD_VLIST( vhead, &back[(n-1)*ELEMENTS_PER_VECT], RT_VLIST_LINE_MOVE );
d813 1
a813 1
		RT_ADD_VLIST( vhead, &back[i*ELEMENTS_PER_VECT], RT_VLIST_LINE_DRAW );
d818 2
a819 2
		RT_ADD_VLIST( vhead, &front[i*ELEMENTS_PER_VECT], RT_VLIST_LINE_MOVE );
		RT_ADD_VLIST( vhead, &back[i*ELEMENTS_PER_VECT], RT_VLIST_LINE_DRAW );
@


11.3
log
@Added bu_structparse
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 11.2 1996/10/21 19:11:33 jra Exp gdurf $ (BRL)";
d211 1
a211 1
	CONST struct rt_tol		*tol = &rtip->rti_tol;
d221 1
a221 1
	RT_CK_TOL(tol);
d248 1
a248 1
	GETSTRUCT( rpc, rpc_specific );
d263 1
a263 1
	mat_idn( R );
d267 1
a267 1
	mat_trn( Rinv, R );			/* inv of rot mat is trn */
d271 1
a271 1
	mat_idn( S );
d277 2
a278 2
	mat_mul( rpc->rpc_SoR, S, R );
	mat_mul( rpc->rpc_invRoS, Rinv, S );
d315 2
a316 2
	mat_print("S o R", rpc->rpc_SoR );
	mat_print("invR o S", rpc->rpc_invRoS );
d351 1
a351 1
/*?????	CONST struct rt_tol	*tol = &rtip->rti_tol; ?????*/
d462 1
a462 1
		RT_LIST_INSERT( &(seghead->l), &(segp->l) );
d471 1
a471 1
		RT_LIST_INSERT( &(seghead->l), &(segp->l) );
d526 1
a526 1
		rt_log("rt_rpc_norm: surfno=%d bad\n", hitp->hit_surfno);
d598 1
a598 1
		uvp->uv_u = acos(pprime[Y]/len) * rt_invpi;
d605 1
a605 1
		uvp->uv_u = acos(pprime[Y]/len) * rt_invpi;
d628 1
a628 1
	rt_free( (char *)rpc, "rpc_specific" );
d645 1
a645 1
struct rt_list		*vhead;
d648 1
a648 1
struct rt_tol		*tol;
d672 1
a672 1
		rt_log("rt_rpc_plot():  zero length H, B, or rh\n");
d679 1
a679 1
		rt_log("rt_rpc_plot(): B not perpendicular to H, f=%f\n", f);
d691 1
a691 1
	mat_idn( R );
d695 1
a695 1
	mat_trn( invR, R );			/* inv of rot mat is trn */
d730 1
a730 1
		ntol = rt_pi;
d745 2
a746 2
	front = (fastf_t *)rt_malloc(3*n * sizeof(fastf_t), "fastf_t");
	back  = (fastf_t *)rt_malloc(3*n * sizeof(fastf_t), "fastf_t");
d761 1
a761 1
		rt_free( (char *)old, "pt_node" );
d776 2
a777 2
	front = (fastf_t *)rt_malloc((2*3*n-1) * sizeof(fastf_t), "fastf_t");
	back  = (fastf_t *)rt_malloc((2*3*n-1) * sizeof(fastf_t), "fastf_t");
d792 1
a792 1
		rt_free( (char *)old, "pt_node" );
d822 2
a823 2
	rt_free( (char *)front, "fastf_t" );
	rt_free( (char *)back,  "fastf_t" );
d897 1
a897 1
	mem = (struct pt_node *)rt_malloc(sizeof(struct pt_node), "pt_node");
d918 1
a918 1
CONST struct rt_tol	*tol;
d935 1
a935 1
	RT_CK_TOL( tol );
d950 1
a950 1
		rt_log("rt_rpc_tess():  zero length H, B, or rh\n");
d957 1
a957 1
		rt_log("rt_rpc_tess(): B not perpendicular to H, f=%f\n", f);
d969 1
a969 1
	mat_idn( R );
d973 1
a973 1
	mat_trn( invR, R );			/* inv of rot mat is trn */
d1008 1
a1008 1
		ntol = rt_pi;
d1022 6
a1027 6
	front = (fastf_t *)rt_malloc(3*n * sizeof(fastf_t), "fastf_t");
	back  = (fastf_t *)rt_malloc(3*n * sizeof(fastf_t), "fastf_t");
	norms = (vect_t *)rt_calloc( n , sizeof( vect_t ) , "rt_rpc_tess: norms" );
	vfront = (struct vertex **)rt_malloc((n+1) * sizeof(struct vertex *), "vertex *");
	vback = (struct vertex **)rt_malloc((n+1) * sizeof(struct vertex *), "vertex *");
	vtemp = (struct vertex **)rt_malloc((n+1) * sizeof(struct vertex *), "vertex *");
d1029 1
a1029 1
		(struct faceuse **)rt_malloc((n+2) * sizeof(struct faceuse *), "faceuse *");
d1056 1
a1056 1
		rt_free( (char *)old, "pt_node" );
d1060 1
a1060 1
	s = RT_LIST_FIRST(shell, &(*r)->s_hd);
d1114 6
a1119 6
			rt_free( (char *)front, "fastf_t");
			rt_free( (char *)back, "fastf_t");
			rt_free( (char*)vfront, "vertex *");
			rt_free( (char*)vback, "vertex *");
			rt_free( (char*)vtemp, "vertex *");
			rt_free( (char*)outfaceuses, "faceuse *");
d1136 1
a1136 1
		for( RT_LIST_FOR( vu , vertexuse , &vfront[i]->vu_hd ) )
d1154 1
a1154 1
		for( RT_LIST_FOR( vu , vertexuse , &vback[i]->vu_hd ) )
d1178 6
a1183 6
	rt_free( (char *)front, "fastf_t");
	rt_free( (char *)back, "fastf_t");
	rt_free( (char*)vfront, "vertex *");
	rt_free( (char*)vback, "vertex *");
	rt_free( (char*)vtemp, "vertex *");
	rt_free( (char*)outfaceuses, "faceuse *");
d1197 1
a1197 1
CONST struct rt_external	*ep;
d1203 1
a1203 1
	RT_CK_EXTERNAL( ep );
d1207 1
a1207 1
		rt_log("rt_rpc_import: defective record\n");
d1213 1
a1213 1
	ip->idb_ptr = rt_malloc( sizeof(struct rt_rpc_internal), "rt_rpc_internal");
d1225 2
a1226 2
		rt_log( "rt_rpc_import: r is zero\n" );
		rt_free( (char *)ip->idb_ptr , "rt_rpc_import: ip->idp_ptr" );
d1240 1
a1240 1
struct rt_external		*ep;
d1253 1
a1253 1
	RT_INIT_EXTERNAL(ep);
d1255 1
a1255 1
	ep->ext_buf = (genptr_t)rt_calloc( 1, ep->ext_nbytes, "rpc external");
d1265 1
a1265 1
		rt_log("rt_rpc_export: not all dimensions positive!\n");
d1271 1
a1271 1
		rt_log("rt_rpc_export: B and H are not perpendicular! (dot = %g)\n",f );
d1293 1
a1293 1
struct rt_vls		*str;
d1303 1
a1303 1
	rt_vls_strcat( str, "Right Parabolic Cylinder (RPC)\n");
d1309 1
a1309 1
	rt_vls_strcat( str, buf );
d1316 1
a1316 1
	rt_vls_strcat( str, buf );
d1323 1
a1323 1
	rt_vls_strcat( str, buf );
d1326 1
a1326 1
	rt_vls_strcat( str, buf );
d1347 1
a1347 1
	rt_free( (char *)xip, "rpc ifree" );
@


11.2
log
@Mod to nmg_gluefaces() call.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 11.1 1995/01/04 09:56:58 mike Rel4_4 jra $ (BRL)";
d181 7
@


11.1
log
@Release_4.4
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.13 94/11/08 02:55:02 mike Exp $ (BRL)";
d911 1
a911 1
struct rt_tol		*tol;
d1165 1
a1165 1
	nmg_gluefaces( outfaceuses, n+2 );
@


1.13
log
@Irix 6
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.12 94/09/22 12:19:24 jra Exp Locker: mike $ (BRL)";
@


1.12
log
@Added vertexuse normals to tessellator.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.11 94/09/13 15:53:32 jra Exp Locker: jra $ (BRL)";
a207 1
	LOCAL mat_t	mtemp;
a210 1
	LOCAL mat_t	SS;
d214 1
a915 1
	point_t 	p1, p2;
a925 1
	struct edgeuse	*eu, *eu2;
@


1.11
log
@Added calls to nmg_mark_edges_real.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.10 94/09/08 16:28:23 jra Exp Locker: jra $ (BRL)";
d914 1
a914 1
	int		i, n;
d926 2
d930 3
d1020 1
d1032 1
d1035 1
d1037 5
d1049 1
d1118 46
@


1.10
log
@Fixed bug in rpc_export. Vector normal check didn't use unit vectors.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.9 94/09/02 16:03:36 jra Exp Locker: jra $ (BRL)";
d1051 2
d1055 3
d1076 2
d1094 9
d1104 1
@


1.9
log
@Added scaling for scalar values on import where needed.
Added conversion to mm for scalar values where needed.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.8 94/08/10 18:39:04 gdurf Exp Locker: jra $ (BRL)";
d1165 1
d1179 3
d1183 1
a1183 3
	if (MAGNITUDE(xip->rpc_B) < RT_LEN_TOL
		|| MAGNITUDE(xip->rpc_H) < RT_LEN_TOL
		|| xip->rpc_r < RT_LEN_TOL) {
d1187 4
a1190 4
	
	if ( !NEAR_ZERO( VDOT(xip->rpc_B, xip->rpc_H), RT_DOT_TOL) ) {
		rt_log("rt_rpc_export: B and H are not perpendicular! (dot = %g)\n",
				VDOT(xip->rpc_B, xip->rpc_H));
@


1.8
log
@Added include of conf.h
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.7 1993/11/18 01:44:09 mike Exp gdurf $ (BRL)";
d1140 1
a1140 1
	xip->rpc_r = rp->s.s_values[3*3];
d1142 7
d1187 2
a1188 1
		rt_log("rt_rpc_export: B and H are not perpendicular!\n");
@


1.7
log
@Added tol arg to bounding box routines
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.6 93/07/20 22:47:54 mike Exp $ (BRL)";
d152 2
@


1.6
log
@Pointer used before storage allocated
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.5 93/07/20 16:09:37 mike Exp Locker: mike $ (BRL)";
d1092 1
a1092 1
	nmg_region_a( *r );
@


1.5
log
@A pointed was de-referenced before being initialized.
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.4 92/03/27 12:58:49 mmark Exp Locker: mike $ (BRL)";
a221 1
	rpc->rpc_inv_rsq = 1 / magsq_r;
d243 1
@


1.4
log
@added matrix multiply to import()
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.3 92/03/25 15:52:36 mmark Exp Locker: mmark $ (BRL)";
d218 1
a218 1
	mag_b = rpc->rpc_b = sqrt( magsq_b = MAGSQ( xip->rpc_B ) );
d243 1
@


1.3
log
@added error checking to import
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.2 92/03/24 14:33:39 mmark Exp Locker: mmark $ (BRL)";
d663 1
a663 1
		rt_log("rt_rpc_tess():  zero length H, B, or rh\n");
d670 1
a670 1
		rt_log("rt_rpc_tess(): B not perpendicular to H, f=%f\n", f);
d1134 3
a1136 3
	VMOVE( xip->rpc_V, &rp->s.s_values[0*3] );
	VMOVE( xip->rpc_H, &rp->s.s_values[1*3] );
	VMOVE( xip->rpc_B, &rp->s.s_values[2*3] );
@


1.2
log
@fixed import bug
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /m/cad/librt/RCS/g_rpc.c,v 1.1 92/02/14 15:31:28 mmark Exp $ (BRL)";
d1168 12
@


1.1
log
@Initial revision
@
text
@d150 1
a150 1
static char RCSrpc[] = "@@(#)$Header: /vld/mmark/cad/librt/RCS/g_rpc.c,v 1.1 92/02/10 15:02:01 mmark Exp $ (BRL)";
d642 8
a649 5
        fastf_t front[9*3];
	fastf_t back[9*3];
	fastf_t b, n, r, y, z;
	int	i, j;
	vect_t	Bunit, Hunit, Runit;
d654 11
a664 15
	
	VMOVE( Hunit, xip->rpc_H );
	VUNITIZE( Hunit );
	VREVERSE( Bunit, xip->rpc_B );	/* make B positive z axis */
	VUNITIZE( Bunit );
	VCROSS( Runit, Bunit, Hunit );	/* make R positive y axis */
	b = sqrt(MAGSQ(xip->rpc_B));
	n = b / (xip->rpc_r * xip->rpc_r);
	for (i = 0; i < 9; i++) {
		y = xip->rpc_r * (i * 0.25 - 1);	/* 9 pts on y axis */
		z = n * y * y - b;
		j = i * 3;
		VBLEND2(front+j, y, Runit, z, Bunit);
		VADD2(front+j, front+j, xip->rpc_V);
		VADD2(back+j,  front+j, xip->rpc_H);
d667 127
d795 3
a797 2
	RT_ADD_VLIST( vhead, &front[8*ELEMENTS_PER_VECT], RT_VLIST_LINE_MOVE );
	for( i = 0; i < 9; i++ )  {
d802 2
a803 2
	RT_ADD_VLIST( vhead, &back[8*ELEMENTS_PER_VECT], RT_VLIST_LINE_MOVE );
	for( i = 0; i < 9; i++ )  {
d808 1
a808 1
	for( i = 0; i < 9; i += 4 )  {
d812 3
d839 1
d849 2
d852 2
d996 1
a996 1
		ntol = 3.1416;
d1170 4
a1173 4
	VMOVE( &rpc->s.s_values[0*3], xip->rpc_V );
	VMOVE( &rpc->s.s_values[1*3], xip->rpc_H );
	VMOVE( &rpc->s.s_values[2*3], xip->rpc_B );
	rpc->s.s_values[3*3] = xip->rpc_r;
d1219 1
a1219 1
	sprintf(buf, "\tr=%g\n", xip->rpc_r);
@
