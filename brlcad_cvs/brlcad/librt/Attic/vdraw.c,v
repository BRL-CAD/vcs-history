head	1.14;
access;
symbols
	ansi-20040405-merged:1.11.2.1
	postmerge-20040405-ansi:1.12
	premerge-20040404-ansi:1.11
	postmerge-autoconf:1.11
	autoconf-freeze:1.11
	premerge-autoconf:1.11
	ansi-20040316-freeze:1.11.2.1
	postmerge-20040315-windows:1.11
	premerge-20040315-windows:1.11
	windows-20040315-freeze:1.11
	autoconf-20031203:1.11
	autoconf-20031202:1.11
	autoconf-branch:1.11.0.10
	phong-branch:1.11.0.8
	photonmap-branch:1.11.0.6
	rel-6-1-DP:1.11
	windows-branch:1.11.0.4
	rel-6-0-2:1.9
	ansi-branch:1.11.0.2
	rel-6-0-1-branch:1.9.0.2
	hartley-6-0-post:1.10
	hartley-6-0-pre:1.9
	rel-6-0-1:1.9
	rel-6-0:1.9
	rel-5-4:1.5.2.1
	offsite-5-3-pre:1.7
	rel-5-3:1.5.2.1
	rel-5-2:1.5.2.1
	rel-5-1-branch:1.5.0.2
	rel-5-1:1.5;
locks; strict;
comment	@ * @;


1.14
date	2004.05.21.18.07.35;	author morrison;	state dead;
branches;
next	1.13;

1.13
date	2004.05.10.15.30.47;	author erikg;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.20.17.08.10;	author jra;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2002.08.15.20.55.22;	author hartley;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.11.13.16.51;	author butler;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.01.17.37.25;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.09.21.54.48;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.11.23.39.33;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.31.15.01.28;	author jra;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.01.03.21.42.49;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	99.12.29.21.48.14;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	99.12.28.15.41.03;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	99.12.27.20.50.46;	author bparker;	state Exp;
branches;
next	;

1.5.2.1
date	2000.08.30.17.30.11;	author bparker;	state Exp;
branches;
next	;

1.11.2.1
date	2002.09.19.18.01.48;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.14
log
@moved to src/
@
text
@/*******************************************************************

CMD_VDRAW - edit vector lists and display them as pseudosolids

OPEN COMMAND
vdraw	open			- with no argument, asks if there is
	  			  an open vlist (1 yes, 0 no)

		name		- opens the specified vlist
				  returns 1 if creating new vlist
				          0 if opening an existing vlist
	
EDITING COMMANDS - no return value

vdraw	write	i	c x y z	- write params into i-th vector
		next	c x y z	- write params to end of vector list

vdraw	insert	i	c x y z	- insert params in front of i-th vector

vdraw	delete 	i		- delete i-th vector
		last		- delete last vector on list
		all		- delete all vectors on list

PARAMETER SETTING COMMAND - no return value
vdraw	params	color		- set the current color with 6 hex digits
				  representing rrggbb
		name		- change the name of the current vlist

QUERY COMMAND
vdraw	read	i		- returns contents of i-th vector "c x y z"
		color		- return the current color in hex
		length		- return number of vectors in list
		name		- return name of current vlist

DISPLAY COMMAND - 
vdraw	send			- send the current vlist to the display
				  returns 0 on success, -1 if the name
				  conflicts with an existing true solid

CURVE COMMANDS
vdraw	vlist	list		- return list of all existing vlists
		delete	name	- delete the named vlist

All textual arguments can be replaced by their first letter.
(e.g. "vdraw d a" instead of "vdraw delete all"

In the above listing:
"i" refers to an integer 
"c" is an integer representing one of the following rt_vlist commands:
	 RT_VLIST_LINE_MOVE	0	/ begin new line /
	 RT_VLIST_LINE_DRAW	1	/ draw line /
	 RT_VLIST_POLY_START	2	/ pt[] has surface normal /
	 RT_VLIST_POLY_MOVE	3	/ move to first poly vertex /
	 RT_VLIST_POLY_DRAW	4	/ subsequent poly vertex /
	 RT_VLIST_POLY_END	5	/ last vert (repeats 1st), draw poly /
	 RT_VLIST_POLY_VERTNORM	6	/ per-vertex normal, for interpolation /

"x y z" refer to floating point values which represent a point or normal
	vector. For commands 0,1,3,4, and 5, they represent a point, while
	for commands 2 and 6 they represent normal vectors

author - Carl Nuzman

Example Use -
	vdraw open rays
	vdraw delete all
	foreach partition $ray {
		...stuff...
		vdraw write next 0 $inpt
		vdraw write next 1 $outpt
	}
	vdraw send

Acknowledgements:
  Modifications by Bob Parker:
        *- adapt for use in LIBRT's "Drawable Geometry" object
	*- build separate vdraw commands

********************************************************************/
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <math.h>
#include <signal.h>
#include "tcl.h"
#if 0
#include "tk.h"
#endif

#include "machine.h"
#include "externs.h"
#include "cmd.h"
#include "vmath.h"
#include "mater.h"
#include "nmg.h"
#include "raytrace.h"


#ifndef M_SQRT2
#define M_SQRT2		1.41421356237309504880
#endif

#define REV_BU_LIST_FOR(p,structure,hp)	\
	(p)=BU_LIST_LAST(structure,hp);	\
	BU_LIST_NOT_HEAD(p,hp);		\
	(p)=BU_LIST_PLAST(structure,p)

/* defined in librt/dg_obj.c */
extern int dgo_invent_solid(struct dg_obj *dgop, Tcl_Interp *interp, char *name, struct bu_list *vhead, long int rgb, int copy);
extern void dgo_notify(struct dg_obj *dgop, Tcl_Interp *interp);

static int vdraw_write_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_insert_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_delete_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_read_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_send_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_params_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_open_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_vlist_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);

struct bu_cmdtab vdraw_cmds[] = {
	{"write",		vdraw_write_tcl},
	{"insert",		vdraw_insert_tcl},
	{"delete",		vdraw_delete_tcl},
	{"read",		vdraw_read_tcl},
	{"send",		vdraw_send_tcl},
	{"params",		vdraw_params_tcl},
	{"open",		vdraw_open_tcl},
	{"vlist",		vdraw_vlist_tcl},
	{(char *)0,		(int (*)())0 }
};

/*
 * Usage:
 *        write i|next c x y z
 */
static int
vdraw_write_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct dg_obj *dgop = (struct dg_obj *)clientData;
	int index, uind;
	struct rt_vlist *vp, *cp;

	if (!dgop->dgo_currVHead) {
		Tcl_AppendResult(interp, "vdraw write: no vlist is currently open.", (char *)NULL);
		return TCL_ERROR;
	}
	if (argc < 4) {
		Tcl_AppendResult(interp, "vdraw write: not enough args\n", (char *)NULL);
		return TCL_ERROR;
	}
	if (argv[1][0] == 'n') { /* next */
		for (REV_BU_LIST_FOR(vp, rt_vlist, &(dgop->dgo_currVHead->vdc_vhd))) {
			if (vp->nused > 0) {
				break;
			}
		}
		if (BU_LIST_IS_HEAD(vp,&(dgop->dgo_currVHead->vdc_vhd))) {
				/* we went all the way through */
			vp = BU_LIST_PNEXT(rt_vlist, vp);
			if (BU_LIST_IS_HEAD(vp,&(dgop->dgo_currVHead->vdc_vhd))) {
				RT_GET_VLIST(vp);
				BU_LIST_INSERT(&(dgop->dgo_currVHead->vdc_vhd), &(vp->l));
			}
		}
		if (vp->nused >= RT_VLIST_CHUNK) {
			vp = BU_LIST_PNEXT(rt_vlist, vp);
			if (BU_LIST_IS_HEAD(vp,&(dgop->dgo_currVHead->vdc_vhd))) {
				RT_GET_VLIST(vp);
				BU_LIST_INSERT(&(dgop->dgo_currVHead->vdc_vhd),&(vp->l));
			}
		}
		cp = vp;
		index = vp->nused;
	} else if (sscanf(argv[1], "%d", &uind) < 1) {
		Tcl_AppendResult(interp, "vdraw: write index not an integer\n", (char *)NULL);
		return TCL_ERROR;
	} else {
		/* uind holds user-specified index */
		/* only allow one past the end */

		for (BU_LIST_FOR(vp, rt_vlist, &(dgop->dgo_currVHead->vdc_vhd))) {
			if (uind < RT_VLIST_CHUNK){
				/* this is the right vlist */
				break;
			}
			if (vp->nused == 0){
				break;
			}
			uind -= vp->nused;
		}

		if (BU_LIST_IS_HEAD(vp,&(dgop->dgo_currVHead->vdc_vhd))) {
			if (uind > 0) {
				Tcl_AppendResult(interp, "vdraw: write out of range\n", (char *)NULL);
				return TCL_ERROR;
			}
			RT_GET_VLIST(vp);
			BU_LIST_INSERT(&(dgop->dgo_currVHead->vdc_vhd),&(vp->l));
		}
		if (uind > vp->nused) {
			Tcl_AppendResult(interp, "vdraw: write out of range\n", (char *)NULL);
			return TCL_ERROR;
		}
		cp = vp;
		index = uind;
	}

	if (sscanf(argv[2],"%d",&(cp->cmd[index])) < 1) {
		Tcl_AppendResult(interp, "vdraw: cmd not an integer\n", (char *)NULL);
		return TCL_ERROR;
	}
	if (argc == 6) {
		cp->pt[index][0] = atof(argv[3]);
		cp->pt[index][1] = atof(argv[4]);
		cp->pt[index][2] = atof(argv[5]);
	} else {
		if (argc != 4 ||
		    bn_decode_vect(cp->pt[index], argv[3]) != 3) {
			Tcl_AppendResult(interp,
					 "vdraw write: wrong # args, need either x y z or {x y z}\n", (char *)NULL);
			return TCL_ERROR;
		}
	}
	/* increment counter only if writing onto end */
	if (index == cp->nused)
		cp->nused++;

	return TCL_OK;
}

/*
 * Usage:
 *        insert i c x y z
 */
int
vdraw_insert_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct dg_obj *dgop = (struct dg_obj *)clientData;
	struct rt_vlist *vp, *cp, *wp;
	int i;
	int index;
	int uind;

	if (!dgop->dgo_currVHead) {
		Tcl_AppendResult(interp, "vdraw: no vlist is currently open.", (char *)NULL);
		return TCL_ERROR;
	}
	if (argc < 6) {
		Tcl_AppendResult(interp, "vdraw: not enough args", (char *)NULL);
		return TCL_ERROR;
	}
	if (sscanf(argv[2], "%d", &uind) < 1) {
		Tcl_AppendResult(interp, "vdraw: insert index not an integer\n", (char *)NULL);
		return TCL_ERROR;
	} 

	/* uinds hold user specified index */
	for (BU_LIST_FOR(vp, rt_vlist, &(dgop->dgo_currVHead->vdc_vhd))) {
		if (uind < RT_VLIST_CHUNK) {
				/* this is the right vlist */
			break;
		}
		if (vp->nused == 0){
			break;
		}
		uind -= vp->nused;
	}

	if (BU_LIST_IS_HEAD(vp,&(dgop->dgo_currVHead->vdc_vhd))) {
		if (uind > 0) {
			Tcl_AppendResult(interp, "vdraw: insert out of range\n", (char *)NULL);
			return TCL_ERROR;
		}
		RT_GET_VLIST(vp);
		BU_LIST_INSERT(&(dgop->dgo_currVHead->vdc_vhd),&(vp->l));
	}
	if (uind > vp->nused) {
		Tcl_AppendResult(interp, "vdraw: insert out of range\n", (char *)NULL);
		return TCL_ERROR;
	}


	cp = vp;
	index = uind;

	vp = BU_LIST_LAST(rt_vlist, &(dgop->dgo_currVHead->vdc_vhd));
	vp->nused++;

	while (vp != cp) {
		for (i = vp->nused-1; i > 0; i--) {
			vp->cmd[i] = vp->cmd[i-1];
			VMOVE(vp->pt[i],vp->pt[i-1]);
		}
		wp = BU_LIST_PLAST(rt_vlist,vp);
		vp->cmd[0] = wp->cmd[RT_VLIST_CHUNK-1];
		VMOVE(vp->pt[0],wp->pt[RT_VLIST_CHUNK-1]);
		vp = wp;
	} 
		
	for (i=vp->nused-1; i>index; i--) {
		vp->cmd[i] = vp->cmd[i-1];
		VMOVE(vp->pt[i],vp->pt[i-1]);
	}
	if (sscanf(argv[2],"%d",&(vp->cmd[index])) < 1) {
		Tcl_AppendResult(interp, "vdraw: cmd not an integer\n", (char *)NULL);
		return TCL_ERROR;
	}
	vp->pt[index][0] = atof(argv[3]);
	vp->pt[index][1] = atof(argv[4]);
	vp->pt[index][2] = atof(argv[5]);

	return TCL_OK;
}

/*
 * Usage:
 *        delete i|last|all
 */
int
vdraw_delete_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct dg_obj *dgop = (struct dg_obj *)clientData;
	struct rt_vlist *vp, *wp;
	int i;
	int uind;

	if (!dgop->dgo_currVHead) {
		Tcl_AppendResult(interp, "vdraw: no vlist is currently open.", (char *)NULL);
		return TCL_ERROR;
	}
	if (argc < 2) {
		Tcl_AppendResult(interp, "vdraw: not enough args\n", (char *)NULL);
		return TCL_ERROR;
	}
	if (argv[1][0] == 'a') {
		/* delete all */
		for (BU_LIST_FOR(vp, rt_vlist, &(dgop->dgo_currVHead->vdc_vhd))) {
			vp->nused = 0;
		}
		return TCL_OK;
	} 
	if (argv[1][0] == 'l') {
		/* delete last */
		for (REV_BU_LIST_FOR(vp, rt_vlist, &(dgop->dgo_currVHead->vdc_vhd))) {
			if (vp->nused > 0) {
				vp->nused--;
				break;
			}
		}
		return TCL_OK;
	}
	if (sscanf(argv[1], "%d", &uind) < 1) {
		Tcl_AppendResult(interp, "vdraw: delete index not an integer\n", (char *)NULL);
		return TCL_ERROR;
	}  

	for (BU_LIST_FOR(vp, rt_vlist, &(dgop->dgo_currVHead->vdc_vhd))) {
		if (uind < RT_VLIST_CHUNK) {
				/* this is the right vlist */
			break;
		}
		if ( vp->nused == 0) {
				/* no point going further */
			break;
		}
		uind -= vp->nused;
	}
		
	if (uind >= vp->nused) {
		Tcl_AppendResult(interp, "vdraw: delete out of range\n", (char *)NULL);
		return TCL_ERROR;
	}

	for (i = uind; i < vp->nused - 1; i++) {
		vp->cmd[i] = vp->cmd[i+1];
		VMOVE(vp->pt[i],vp->pt[i+1]);
	}
		
	wp = BU_LIST_PNEXT(rt_vlist, vp);
	while (BU_LIST_NOT_HEAD(wp, &(dgop->dgo_currVHead->vdc_vhd))) {
		if (wp->nused == 0) {
			break;
		}

		vp->cmd[RT_VLIST_CHUNK-1] = wp->cmd[0];
		VMOVE(vp->pt[RT_VLIST_CHUNK-1],wp->pt[0]);

		for (i=0; i< wp->nused - 1; i++) {
			wp->cmd[i] = wp->cmd[i+1];
			VMOVE(wp->pt[i],wp->pt[i+1]);
		}
		vp = wp;
		wp = BU_LIST_PNEXT(rt_vlist, vp);
	}

	if (vp->nused <= 0) {
		/* this shouldn't happen */
		Tcl_AppendResult(interp, "vdraw: vlist corrupt", (char *)NULL);
		return TCL_ERROR;
	}
	vp->nused--;

	return TCL_OK;
}

/*
 * Usage:
 *        read i|color|length|name
 */
static int
vdraw_read_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct dg_obj *dgop = (struct dg_obj *)clientData;
	struct rt_vlist *vp;
	struct bu_vls vls;
	int uind;
	int length;

	if (!dgop->dgo_currVHead) {
		Tcl_AppendResult(interp, "vdraw: no vlist is currently open.", (char *)NULL);
		return TCL_ERROR;
	}
	if (argc < 2) {
		Tcl_AppendResult(interp, "vdraw: need index to read\n", (char *)NULL);
		return TCL_ERROR;
	}
	if (argv[1][0] == 'c') {
		/* read color of current solid */
		bu_vls_init(&vls);
		bu_vls_printf(&vls, "%.6lx", dgop->dgo_currVHead->vdc_rgb);
		Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
		bu_vls_free(&vls);
		return TCL_OK;
	}
	if (argv[1][0] == 'n') {
		/*read name of currently open solid*/
		bu_vls_init(&vls);
		bu_vls_printf(&vls, "%.89s", dgop->dgo_currVHead->vdc_name);
		Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
		bu_vls_free(&vls);
		return TCL_OK;
	}
	if (argv[1][0] == 'l') {
		/* return lenght of list */
		length = 0;
		vp = BU_LIST_FIRST(rt_vlist, &(dgop->dgo_currVHead->vdc_vhd));
		while (!BU_LIST_IS_HEAD(vp, &(dgop->dgo_currVHead->vdc_vhd))) {
			length += vp->nused;
			vp = BU_LIST_PNEXT(rt_vlist, vp);
		}
		bu_vls_init(&vls);
		bu_vls_printf(&vls, "%d", length);
		Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
		bu_vls_free(&vls);
		return TCL_OK;
	}
	if (sscanf(argv[1], "%d", &uind) < 1) {
		Tcl_AppendResult(interp, "vdraw: read index not an integer\n", (char *)NULL);
		return TCL_ERROR;
	}

	for (BU_LIST_FOR(vp, rt_vlist, &(dgop->dgo_currVHead->vdc_vhd))) {
		if (uind < RT_VLIST_CHUNK) {
				/* this is the right vlist */
			break;
		}
		if ( vp->nused == 0) {
				/* no point going further */
			break;
		}
		uind -= vp->nused;
	}
		
	if (uind >= vp->nused) {
		Tcl_AppendResult(interp, "vdraw: read out of range\n", (char *)NULL);
		return TCL_ERROR;
	}

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "%d %.12e %.12e %.12e", 
		vp->cmd[uind], vp->pt[uind][0],
		vp->pt[uind][1],vp->pt[uind][2]);
	Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
	bu_vls_free(&vls);

	return TCL_OK;
}

/*
 * Usage:
 *        send
 */
static int
vdraw_send_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct dg_obj *dgop = (struct dg_obj *)clientData;
	struct directory *dp;
	struct bu_vls vls;
	char solid_name [RT_VDRW_MAXNAME+RT_VDRW_PREFIX_LEN+1];
	int index;
	int real_flag;

	if (!dgop->dgo_currVHead) {
		Tcl_AppendResult(interp, "vdraw: no vlist is currently open.", (char *)NULL);
		return TCL_ERROR;
	}

	sprintf(solid_name, RT_VDRW_PREFIX);
	strncat(solid_name, dgop->dgo_currVHead->vdc_name, RT_VDRW_MAXNAME);
	if ((dp = db_lookup(dgop->dgo_wdbp->dbip, solid_name, LOOKUP_QUIET)) == DIR_NULL) {
		real_flag = 0;
	} else {
		real_flag = (dp->d_addr == RT_DIR_PHONY_ADDR) ? 0 : 1;
	}

	if (real_flag) {
		/* solid exists - don't kill */
		Tcl_AppendResult(interp, "-1", (char *)NULL);
		return TCL_OK;
	}

#if 0
	{
		char *av[4];

		av[0] = "kill";
		av[1] = "-f";
		av[2] = solid_name;
		av[3] = NULL;

		(void)f_kill(clientData, interp, 3, av);
	}
#endif

	/* 0 means OK, -1 means conflict with real solid name */
	index = dgo_invent_solid(dgop,
				 interp,
				 solid_name,
				 &(dgop->dgo_currVHead->vdc_vhd),
				 dgop->dgo_currVHead->vdc_rgb,
				 1);
	dgo_notify(dgop, interp);

	bu_vls_init(&vls);
	bu_vls_printf(&vls,"%d",index);
	Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
	bu_vls_free(&vls);

	return TCL_OK;
}

/*
 * Usage:
 *        params color|name
 */
static int
vdraw_params_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct dg_obj *dgop = (struct dg_obj *)clientData;
	struct vd_curve *rcp;
	unsigned long rgb;

	if (!dgop->dgo_currVHead) {
		Tcl_AppendResult(interp, "vdraw: no vlist is currently open.", (char *)NULL);
		return TCL_ERROR;
	}
	if (argc < 3) {
		Tcl_AppendResult(interp, "vdraw: need params to set\n", (char *)NULL);
		return TCL_ERROR;
	}
	if (argv[1][0] == 'c') {
		if (sscanf(argv[2],"%lx", &rgb)>0)
			dgop->dgo_currVHead->vdc_rgb = rgb;
		return TCL_OK;
	}
	if (argv[1][0] == 'n') {
		/* check for conflicts with existing vlists*/
		for (BU_LIST_FOR(rcp, vd_curve, &dgop->dgo_headVDraw)) {
			if (!strncmp( rcp->vdc_name, argv[1], RT_VDRW_MAXNAME)) {
				struct bu_vls vls;

				bu_vls_init(&vls);
				bu_vls_printf(&vls, "vdraw: name %.40s is already in use\n", argv[1]);
				Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
				return TCL_ERROR;
			}
		}
		/* otherwise name not yet used */
		strncpy(dgop->dgo_currVHead->vdc_name, argv[2], RT_VDRW_MAXNAME);
		dgop->dgo_currVHead->vdc_name[RT_VDRW_MAXNAME] = (char) NULL;
		Tcl_AppendResult(interp,"0",(char *)NULL);
		return TCL_OK;
	}

	return TCL_OK;
}

/*
 * Usage:
 *        open [name]
 */
static int
vdraw_open_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct dg_obj *dgop = (struct dg_obj *)clientData;
	struct vd_curve *rcp;
	struct rt_vlist *vp;
	char temp_name[RT_VDRW_MAXNAME+1];

	if (argc < 1 || 2 < argc) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib vdraw_open");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);

		return TCL_ERROR;
	}

	if (argc == 1) {
		if (dgop->dgo_currVHead) {
			Tcl_AppendResult(interp, "1", (char *)NULL);
			return TCL_OK;
		} else {
			Tcl_AppendResult(interp, "0", (char *)NULL);
			return TCL_OK;
		}
	}

	strncpy(temp_name, argv[1], RT_VDRW_MAXNAME);
	temp_name[RT_VDRW_MAXNAME] = (char) NULL;
	dgop->dgo_currVHead = (struct vd_curve *) NULL;
	for (BU_LIST_FOR(rcp, vd_curve, &dgop->dgo_headVDraw)) {
		if (!strncmp(rcp->vdc_name, temp_name, RT_VDRW_MAXNAME)) {
			dgop->dgo_currVHead = rcp;
			break;
		}
	}

	if (!dgop->dgo_currVHead) { /* create new entry */
		BU_GETSTRUCT(rcp, vd_curve);
		BU_LIST_APPEND(&dgop->dgo_headVDraw, &(rcp->l));
		strcpy(rcp->vdc_name, temp_name);
		rcp->vdc_name[RT_VDRW_MAXNAME] = (char) NULL;
		rcp->vdc_rgb = RT_VDRW_DEF_COLOR;
		BU_LIST_INIT(&(rcp->vdc_vhd));
		RT_GET_VLIST(vp);
		BU_LIST_APPEND(&(rcp->vdc_vhd), &(vp->l));
		dgop->dgo_currVHead = rcp;
		/* 1 means new entry */
		Tcl_AppendResult(interp, "1", (char *)NULL);
		return TCL_OK;
	} else { /* entry already existed */
		if (BU_LIST_IS_EMPTY(&(dgop->dgo_currVHead->vdc_vhd))) {
			RT_GET_VLIST(vp);
			BU_LIST_APPEND(&(dgop->dgo_currVHead->vdc_vhd), &(vp->l));
		}
		dgop->dgo_currVHead->vdc_name[RT_VDRW_MAXNAME] = (char) NULL; /*safety*/
		/* 0 means entry already existed*/
		Tcl_AppendResult(interp, "0", (char *)NULL);
		return TCL_OK;
	}
}

/*
 * Usage:
 *        vlist list
 *        vlist delete name
 */
static int
vdraw_vlist_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct dg_obj *dgop = (struct dg_obj *)clientData;
	struct vd_curve *rcp, *rcp2;
	struct bu_vls vls;

	if (argc < 2) {
		Tcl_AppendResult(interp,"vdraw: need more args",(char *)NULL);
		return TCL_ERROR;
	}

	switch  (argv[1][0]) {
	case 'l':
		bu_vls_init(&vls);
		for (BU_LIST_FOR(rcp, vd_curve, &dgop->dgo_headVDraw)) {
			bu_vls_strcat(&vls, rcp->vdc_name);
			bu_vls_strcat(&vls, " ");
		}

		Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
		bu_vls_free(&vls);
		return TCL_OK;
	case 'd':
		if (argc < 3) {
			Tcl_AppendResult(interp,"vdraw: need name of vlist to delete", (char *)NULL);
			return TCL_ERROR;
		}
		rcp2 = (struct vd_curve *)NULL;
		for (BU_LIST_FOR(rcp, vd_curve, &dgop->dgo_headVDraw)) {
			if (!strncmp(rcp->vdc_name,argv[2],RT_VDRW_MAXNAME)) {
				rcp2 = rcp;
				break;
			}
		}
		if (!rcp2) {
			bu_vls_init(&vls);
			bu_vls_printf(&vls, "vdraw: vlist %.40s not found", argv[2]);
			Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
			bu_vls_free(&vls);
			return TCL_ERROR;
		}
		BU_LIST_DEQUEUE(&(rcp2->l));
		if (dgop->dgo_currVHead == rcp2) {
			if (BU_LIST_IS_EMPTY(&dgop->dgo_headVDraw)) {
				dgop->dgo_currVHead = (struct vd_curve *)NULL;
			} else {
				dgop->dgo_currVHead = BU_LIST_LAST(vd_curve,&dgop->dgo_headVDraw);
			}
		}
		RT_FREE_VLIST(&(rcp2->vdc_vhd));
		bu_free((genptr_t) rcp2, "vd_curve");
		return TCL_OK;
	default:
		Tcl_AppendResult(interp,"vdraw: unknown option to vdraw vlist", (char *)NULL);
		return TCL_ERROR;
	}
}
@


1.13
log
@change conf.h to a wrapped config.h
@
text
@@


1.12
log
@merge of ansi-6-0-branch into HEAD
@
text
@d80 5
a84 1
#include "conf.h"
@


1.11
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d114 2
a115 2
extern int dgo_invent_solid();
extern void dgo_notify();
d117 8
a124 8
static int vdraw_write_tcl();
static int vdraw_insert_tcl();
static int vdraw_delete_tcl();
static int vdraw_read_tcl();
static int vdraw_send_tcl();
static int vdraw_params_tcl();
static int vdraw_open_tcl();
static int vdraw_vlist_tcl();
d143 1
a143 5
vdraw_write_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d242 1
a242 5
vdraw_insert_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d326 1
a326 5
vdraw_delete_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d417 1
a417 5
vdraw_read_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d500 1
a500 5
vdraw_send_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d563 1
a563 5
vdraw_params_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d609 1
a609 5
vdraw_open_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d678 1
a678 5
vdraw_vlist_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
@


1.11.2.1
log
@Initial ANSIfication
@
text
@d114 2
a115 2
extern int dgo_invent_solid(struct dg_obj *dgop, Tcl_Interp *interp, char *name, struct bu_list *vhead, long int rgb, int copy);
extern void dgo_notify(struct dg_obj *dgop, Tcl_Interp *interp);
d117 8
a124 8
static int vdraw_write_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_insert_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_delete_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_read_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_send_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_params_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_open_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_vlist_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
d143 5
a147 1
vdraw_write_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d246 5
a250 1
vdraw_insert_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d334 5
a338 1
vdraw_delete_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d429 5
a433 1
vdraw_read_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d516 5
a520 1
vdraw_send_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d583 5
a587 1
vdraw_params_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d633 5
a637 1
vdraw_open_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d706 5
a710 1
vdraw_vlist_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


1.10
log
@Converted from K&R to ANSI C - RFH
@
text
@d114 2
a115 2
extern int dgo_invent_solid(struct dg_obj *dgop, Tcl_Interp *interp, char *name, struct bu_list *vhead, long int rgb, int copy);
extern void dgo_notify(struct dg_obj *dgop, Tcl_Interp *interp);
d117 8
a124 8
static int vdraw_write_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_insert_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_delete_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_read_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_send_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_params_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_open_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int vdraw_vlist_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
d143 5
a147 1
vdraw_write_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d246 5
a250 1
vdraw_insert_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d334 5
a338 1
vdraw_delete_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d429 5
a433 1
vdraw_read_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d516 5
a520 1
vdraw_send_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d583 5
a587 1
vdraw_params_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d633 5
a637 1
vdraw_open_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d706 5
a710 1
vdraw_vlist_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


1.9
log
@Misc compiler warning changes, massive changes to DSP
@
text
@d114 2
a115 2
extern int dgo_invent_solid();
extern void dgo_notify();
d117 8
a124 8
static int vdraw_write_tcl();
static int vdraw_insert_tcl();
static int vdraw_delete_tcl();
static int vdraw_read_tcl();
static int vdraw_send_tcl();
static int vdraw_params_tcl();
static int vdraw_open_tcl();
static int vdraw_vlist_tcl();
d143 1
a143 5
vdraw_write_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d242 1
a242 5
vdraw_insert_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d326 1
a326 5
vdraw_delete_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d417 1
a417 5
vdraw_read_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d500 1
a500 5
vdraw_send_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d563 1
a563 5
vdraw_params_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d609 1
a609 5
vdraw_open_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d678 1
a678 5
vdraw_vlist_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
@


1.8
log
@*- mods to reflect changes to argv
@
text
@d591 1
a591 1
	long rgb;
@


1.7
log
@Added missing parameters to call to dgo_invent_solid.
@
text
@d77 1
a77 1
	*- build seperate vdraw commands
d140 1
a140 1
 *        procname vdraw write
d157 1
a157 1
	if (argc < 6) {
d161 1
a161 1
	if (argv[3][0] == 'n') { /* next */
d184 1
a184 1
	} else if (sscanf(argv[3], "%d", &uind) < 1) {
d218 1
a218 1
	if (sscanf(argv[4],"%d",&(cp->cmd[index])) < 1) {
d222 4
a225 4
	if (argc == 8) {
		cp->pt[index][0] = atof(argv[5]);
		cp->pt[index][1] = atof(argv[6]);
		cp->pt[index][2] = atof(argv[7]);
d227 2
a228 2
		if (argc != 6 ||
		    bn_decode_vect(cp->pt[index], argv[5]) != 3) {
d243 1
a243 1
 *        procname vdraw insert
d262 1
a262 1
	if (argc < 8) {
d266 1
a266 1
	if (sscanf(argv[3], "%d", &uind) < 1) {
d318 1
a318 1
	if (sscanf(argv[4],"%d",&(vp->cmd[index])) < 1) {
d322 3
a324 3
	vp->pt[index][0] = atof(argv[5]);
	vp->pt[index][1] = atof(argv[6]);
	vp->pt[index][2] = atof(argv[7]);
d331 1
a331 1
 *        procname vdraw delete
d349 1
a349 1
	if (argc < 4) {
d353 1
a353 1
	if (argv[3][0] == 'a') {
d360 1
a360 1
	if (argv[3][0] == 'l') {
d370 1
a370 1
	if (sscanf(argv[3], "%d", &uind) < 1) {
d426 1
a426 1
 *        procname vdraw read
d445 1
a445 1
	if (argc < 4) {
d449 1
a449 1
	if (argv[3][0] == 'c') {
d457 1
a457 1
	if (argv[3][0] == 'n') {
d465 1
a465 1
	if (argv[3][0] == 'l') {
d479 1
a479 1
	if (sscanf(argv[3], "%d", &uind) < 1) {
d513 1
a513 1
 *        procname vdraw send
d580 1
a580 1
 *        procname vdraw params
d597 1
a597 1
	if (argc < 5) {
d601 2
a602 2
	if (argv[3][0] == 'c') {
		if (sscanf(argv[4],"%lx", &rgb)>0)
d606 1
a606 1
	if (argv[3][0] == 'n') {
d609 1
a609 1
			if (!strncmp( rcp->vdc_name, argv[3], RT_VDRW_MAXNAME)) {
d613 1
a613 1
				bu_vls_printf(&vls, "vdraw: name %.40s is already in use\n", argv[3]);
d619 1
a619 1
		strncpy(dgop->dgo_currVHead->vdc_name, argv[4], RT_VDRW_MAXNAME);
d630 1
a630 1
 *        procname vdraw open [name]
d644 1
a644 1
	if (argc < 3 || 4 < argc) {
d655 1
a655 1
	if (argc == 3) {
d665 1
a665 1
	strncpy(temp_name, argv[3], RT_VDRW_MAXNAME);
d702 2
a703 1
 *        procname vdraw vlist
d716 1
a716 1
	if (argc < 4) {
d721 1
a721 1
	switch  (argv[3][0]) {
d733 1
a733 1
		if (argc < 5) {
d739 1
a739 1
			if (!strncmp(rcp->vdc_name,argv[4],RT_VDRW_MAXNAME)) {
d746 1
a746 1
			bu_vls_printf(&vls, "vdraw: vlist %.40s not found", argv[4]);
@


1.6
log
@
lint
@
text
@d115 1
d562 3
a564 1
	index = dgo_invent_solid(solid_name,
d568 1
@


1.5
log
@Eliminnated some unused variables
@
text
@d83 5
d96 1
a101 1
#include "externs.h"
a102 1
#include "../librt/debug.h"	/* XXX */
d126 9
a134 9
	"write",		vdraw_write_tcl,
	"insert",		vdraw_insert_tcl,
	"delete",		vdraw_delete_tcl,
	"read",			vdraw_read_tcl,
	"send",			vdraw_send_tcl,
	"params",		vdraw_params_tcl,
	"open",			vdraw_open_tcl,
	"vlist",		vdraw_vlist_tcl,
	(char *)0,		(int (*)())0
@


1.5.2.1
log
@Fixed typo in use of dgo_invent_solid().
Call dgo_notify() after dgo_invent_solid().
@
text
@a110 1
extern void dgo_notify();
d557 1
a557 3
	index = dgo_invent_solid(dgop,
				 interp,
				 solid_name,
a560 1
	dgo_notify(dgop, interp);
@


1.4
log
@*- merged "struct wdb_obj" into "struct rt_wdb"
@
text
@d145 1
a145 1
	int i, index, uind;
@


1.3
log
@*- change HIDDEN to static
@
text
@d531 1
a531 1
	if ((dp = db_lookup(dgop->dgo_wdbop->wdb_wp->dbip, solid_name, LOOKUP_QUIET)) == DIR_NULL) {
@


1.2
log
@*- clean up
@
text
@d109 11
a119 8
HIDDEN int vdraw_write_tcl();
HIDDEN int vdraw_insert_tcl();
HIDDEN int vdraw_delete_tcl();
HIDDEN int vdraw_read_tcl();
HIDDEN int vdraw_send_tcl();
HIDDEN int vdraw_params_tcl();
HIDDEN int vdraw_open_tcl();
HIDDEN int vdraw_vlist_tcl();
d137 1
a137 1
int
d423 1
a423 1
int
d510 1
a510 1
int
d574 1
a574 1
int
d624 1
a624 1
int
d696 1
a696 1
int
@


1.1
log
@Carl's VDRAW stuff.
@
text
@a686 2

	return TCL_OK;
a753 59

	return TCL_OK;
}

#if 0
int
cmd_vdraw(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
{
	char *str;
	static struct vd_curve *dgop->dgo_currVHead;
	static int initialized = 0;
	struct rt_vlist *vp, *cp, *wp;
	struct directory *dp;
	char result_string[90]; /* make sure there's room */
	char temp_name[RT_VDRW_MAXNAME+1];

	if(argc < 2 || 7 < argc){
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "help vdraw");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	if (!initialized){
		if (BU_LIST_UNINITIALIZED( &rt_g.rtg_vlfree ))
			BU_LIST_INIT( &rt_g.rtg_vlfree );
		BU_LIST_INIT( &dgop->dgo_headVDraw );
		dgop->dgo_currVHead = (struct vd_curve *) NULL;
		initialized = 1;
	}

	switch ( argv[1][0] ) {
	case 'w': /*write*/
		return TCL_OK;
	case 'i': /*insert*/
		return TCL_OK;
	case 'd': /*delete*/
		return TCL_OK;
	case 'r': /*read*/
		return TCL_OK;
	case 's': /*send*/
		return TCL_OK;
	case 'p':  /* params */
		break;
	case 'o': /* open */
	case 'v':
	default:
		Tcl_AppendResult(interp, "vdraw: see vdraw.c for help\n", (char *)NULL);
		return TCL_ERROR;
	}
		
	return TCL_OK;
a754 1
#endif
@

