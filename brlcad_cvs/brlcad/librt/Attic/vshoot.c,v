head	11.10;
access;
symbols
	ansi-20040405-merged:11.7.4.1
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.12.2
	premerge-autoconf:11.8
	ansi-20040316-freeze:11.7
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.6.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.12
	phong-branch:11.7.0.10
	photonmap-branch:11.7.0.8
	rel-6-1-DP:11.7
	windows-branch:11.7.0.6
	rel-6-0-2:11.7
	ansi-branch:11.7.0.4
	rel-6-0-1-branch:11.7.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.7
	rel-6-0-1:11.7
	rel-6-0:11.7
	rel-5-4:11.3
	offsite-5-3-pre:11.5
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.2
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1;
locks; strict;
comment	@ * @;


11.10
date	2004.05.21.18.07.36;	author morrison;	state dead;
branches;
next	11.9;

11.9
date	2004.05.10.15.30.47;	author erikg;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.29;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.01.10.18.12.41;	author butler;	state Exp;
branches
	11.7.4.1
	11.7.6.1
	11.7.12.1;
next	11.6;

11.6
date	2001.05.17.20.05.26;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2000.07.10.23.01.51;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.06.30.15.27.09;	author pjt;	state Exp;
branches;
next	11.3;

11.3
date	2000.03.29.18.28.04;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	99.06.03.01.21.54;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.58.57;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.10.20.23.18;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.41.11;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	90.01.06.04.52.35;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	90.01.06.04.17.32;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.57.41;	author mike;	state Rel3_5;
branches;
next	1.5;

1.5
date	89.05.12.21.22.40;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	89.04.14.03.12.24;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	89.04.13.05.22.04;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	89.04.08.02.50.11;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	89.04.08.01.05.22;	author mike;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.17.21.19.00;	author morrison;	state Exp;
branches;
next	;

11.7.6.1
date	2004.03.11.23.43.47;	author morrison;	state Exp;
branches;
next	;

11.7.12.1
date	2004.02.12.18.37.48;	author erikg;	state Exp;
branches;
next	11.7.12.2;

11.7.12.2
date	2004.03.15.14.07.30;	author erikg;	state Exp;
branches;
next	;


desc
@Experimental vector version of shootray
@


11.10
log
@moved to src/
@
text
@/*
 *			V S H O O T . C
 *
 *  EXPERIMENTAL vector version of the
 * Ray Tracing program shot coordinator.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSshoot[] = "@@(#)$Header: /n/xoff/cvs/brlcad/librt/vshoot.c,v 11.9 2004/05/10 15:30:47 erikg Exp $ (BRL)";
#endif

char CopyRight_Notice[] = "@@(#) Copyright (C) 1985-2004 by the United States Army";

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "./debug.h"

struct resource rt_uniresource;		/* Resources for uniprocessor */

/*
 *			R T _ S H O O T R A Y
 *  
 *  Given a ray, shoot it at all the relevant parts of the model,
 *  (building the HeadSeg chain), and then call rt_boolregions()
 *  to build and evaluate the partition chain.
 *  If the ray actually hit anything, call the application's
 *  a_hit() routine with a pointer to the partition chain,
 *  otherwise, call the application's a_miss() routine.
 *
 *  It is important to note that rays extend infinitely only in the
 *  positive direction.  The ray is composed of all points P, where
 *
 *	P = r_pt + K * r_dir
 *
 *  for K ranging from 0 to +infinity.  There is no looking backwards.
 *
 *  It is also important to note that the direction vector r_dir
 *  must have unit length;  this is mandatory, and is not ordinarily checked,
 *  in the name of efficiency.
 *
 *  Input:  Pointer to an application structure, with these mandatory fields:
 *	a_ray.r_pt	Starting point of ray to be fired
 *	a_ray.r_dir	UNIT VECTOR with direction to fire in (dir cosines)
 *	a_hit		Routine to call when something is hit
 *	a_miss		Routine to call when ray misses everything
 *
 *  Calls user's a_miss() or a_hit() routine as appropriate.
 *  Passes a_hit() routine list of partitions, with only hit_dist
 *  fields valid.  Normal computation deferred to user code,
 *  to avoid needless computation here.
 *
 *  Returns: whatever the application function returns (an int).
 *
 *  NOTE:  The appliction functions may call rt_shootray() recursively.
 *	Thus, none of the local variables may be static.
 *
 *  An open issue for execution in a PARALLEL environment is locking
 *  of the statistics variables.
 */
int
rt_shootray( ap )
register struct application *ap;
{
	struct seg		*HeadSeg;
	int		ret;
	auto vect_t		inv_dir;	/* inverses of ap->a_ray.r_dir */
	union bitv_elem	*solidbits;	/* bits for all solids shot so far */
	bitv_t		*regionbits;	/* bits for all involved regions */
	char		*status;
	auto struct partition	InitialPart;	/* Head of Initial Partitions */
	auto struct partition	FinalPart;	/* Head of Final Partitions */
	int			nrays = 1;	/* for now */
	int			vlen;
	int			id;
	int			i;
	struct soltab		**ary_stp;	/* array of pointers */
	struct xray		**ary_rp;	/* array of pointers */
	struct seg		*ary_seg;	/* array of structures */
	struct rt_i		*rtip;

#define BACKING_DIST	(-2.0)		/* mm to look behind start point */
	rtip = ap->a_rt_i;
	RT_AP_CHECK(ap);
	if( ap->a_resource == RESOURCE_NULL )  {
		ap->a_resource = &rt_uniresource;
		rt_uniresource.re_magic = RESOURCE_MAGIC;
	}
	RT_RESOURCE_CHECK(ap->a_resource);

	if(RT_G_DEBUG&(DEBUG_ALLRAYS|DEBUG_SHOOT|DEBUG_PARTITION)) {
		rt_g.rtg_logindent += 2;
		bu_log("\n**********mshootray cpu=%d  %d,%d lvl=%d (%s)\n",
			ap->a_resource->re_cpu,
			ap->a_x, ap->a_y,
			ap->a_level,
			ap->a_purpose != (char *)0 ? ap->a_purpose : "?" );
		VPRINT("Pnt", ap->a_ray.r_pt);
		VPRINT("Dir", ap->a_ray.r_dir);
	}

	rtip->rti_nrays++;
	if( rtip->needprep )
		rt_prep(rtip);

	/* Allocate dynamic memory */
	vlen = nrays * rtip->rti_maxsol_by_type;
	ary_stp = (struct soltab **)bu_calloc( vlen, sizeof(struct soltab *),
		"*ary_stp[]" );
	ary_rp = (struct xray **)bu_calloc( vlen, sizeof(struct xray *),
		"*ary_rp[]" );
	ary_seg = (struct seg *)bu_calloc( vlen, sizeof(struct seg),
		"ary_seg[]" );

	/**** for each ray, do this ****/

	InitialPart.pt_forw = InitialPart.pt_back = &InitialPart;
	FinalPart.pt_forw = FinalPart.pt_back = &FinalPart;

	HeadSeg = SEG_NULL;
	
	GET_BITV( rtip, solidbits, ap->a_resource );	/* see rt_get_bitv() for details */
	bzero( (char *)solidbits, rtip->rti_bv_bytes );
	regionbits = &solidbits->be_v[
		2+RT_BITV_BITS2WORDS(ap->a_rt_i->nsolids)];

	/* Compute the inverse of the direction cosines */
	if( !NEAR_ZERO( ap->a_ray.r_dir[X], SQRT_SMALL_FASTF ) )  {
		inv_dir[X]=1.0/ap->a_ray.r_dir[X];
	} else {
		inv_dir[X] = INFINITY;
		ap->a_ray.r_dir[X] = 0.0;
	}
	if( !NEAR_ZERO( ap->a_ray.r_dir[Y], SQRT_SMALL_FASTF ) )  {
		inv_dir[Y]=1.0/ap->a_ray.r_dir[Y];
	} else {
		inv_dir[Y] = INFINITY;
		ap->a_ray.r_dir[Y] = 0.0;
	}
	if( !NEAR_ZERO( ap->a_ray.r_dir[Z], SQRT_SMALL_FASTF ) )  {
		inv_dir[Z]=1.0/ap->a_ray.r_dir[Z];
	} else {
		inv_dir[Z] = INFINITY;
		ap->a_ray.r_dir[Z] = 0.0;
	}

	/*
	 *  XXX handle infinite solids here, later.
	 */

	/*
	 *  If ray does not enter the model RPP, skip on.
	 *  If ray ends exactly at the model RPP, trace it.
	 */
	if( !rt_in_rpp( &ap->a_ray, inv_dir, rtip->mdl_min, rtip->mdl_max )  ||
	    ap->a_ray.r_max < 0.0 )  {
		rtip->nmiss_model++;
		ret = ap->a_miss( ap );
		status = "MISS model";
		goto out;
	}

	/* For each type of solid to be shot at, assemble the vectors */
	for( id = 1; id <= ID_MAX_SOLID; id++ )  {
		register int	nsol;

		if( (nsol = rtip->rti_nsol_by_type[id]) <= 0 )  continue;

		/* For each instance of this solid type */
		for( i = nsol-1; i >= 0; i-- )  {
			ary_stp[i] = rtip->rti_sol_by_type[id][i];
			ary_rp[i] = &(ap->a_ray);	/* XXX, sb [ray] */
			ary_seg[i].seg_stp = SOLTAB_NULL;
			ary_seg[i].seg_next = SEG_NULL;
		}
		/* bounding box check */
		/* bit vector per ray check */
		/* mark elements to be skipped with ary_stp[] = SOLTAB_NULL */
		ap->a_rt_i->nshots += nsol;	/* later: skipped ones */
		rt_functab[id].ft_vshot(
			ary_stp, ary_rp, ary_seg,
			nsol, ap->a_resource );

		/* set bits for all solids shot at for each ray */

		/* append resulting seg list to input for boolweave */
		for( i = nsol-1; i >= 0; i-- )  {
			register struct seg	*seg2;

			if( ary_seg[i].seg_stp == SOLTAB_NULL )  {
				/* MISS */
				ap->a_rt_i->nmiss++;
				continue;
			}
			ap->a_rt_i->nhits++;

			/* For now, do it the slow way.  sb [ray] */
			/* MUST dup it -- all segs have to live till after a_hit() */
			GET_SEG( seg2, ap->a_resource );
			*seg2 = ary_seg[i];	/* struct copy */
			rt_boolweave( seg2, &InitialPart, ap );

			/* Add seg chain to list of used segs awaiting reclaim */
			{
				register struct seg *seg3 = seg2;
				while( seg3->seg_next != SEG_NULL )
					seg3 = seg3->seg_next;
				seg3->seg_next = HeadSeg;
				HeadSeg = seg2;
			}
		}

		/* OR in regionbits */
		for( i = nsol-1; i >= 0; i-- )  {
			register int words;
			register bitv_t *in = ary_stp[i]->st_regions;
			register bitv_t *out = regionbits;	/* XXX sb [ray] */

			words = RT_BITV_BITS2WORDS(ary_stp[i]->st_maxreg);
#			include "noalias.h"
			for( --words; words >= 0; words-- )
				regionbits[words] |= in[words];
		}
	}
 
	/*
	 *  Ray has finally left known space.
	 */
	if( InitialPart.pt_forw == &InitialPart )  {
		ret = ap->a_miss( ap );
		status = "MISSed all primitives";
		goto freeup;
	}

	/*
	 *  All intersections of the ray with the model have
	 *  been computed.  Evaluate the boolean trees over each partition.
	 */
	rt_boolfinal( &InitialPart, &FinalPart, BACKING_DIST,
		INFINITY,
		regionbits, ap);

	if( FinalPart.pt_forw == &FinalPart )  {
		ret = ap->a_miss( ap );
		status = "MISS bool";
		goto freeup;
	}

	/*
	 *  Ray/model intersections exist.  Pass the list to the
	 *  user's a_hit() routine.  Note that only the hit_dist
	 *  elements of pt_inhit and pt_outhit have been computed yet.
	 *  To compute both hit_point and hit_normal, use the
	 *
	 *  	RT_HIT_NORM( hitp, stp, rayp )
	 *
	 *  macro.  To compute just hit_point, use
	 *
	 *  VJOIN1( hitp->hit_point, rp->r_pt, hitp->hit_dist, rp->r_dir );
	 */
hitit:
	if(RT_G_DEBUG&DEBUG_SHOOT)  rt_pr_partitions(rtip,&FinalPart,"a_hit()");

	ret = ap->a_hit( ap, &FinalPart );
	status = "HIT";

	/*
	 * Processing of this ray is complete.  Free dynamic resources.
	 */
freeup:
	{
		register struct partition *pp;

		/* Free up initial partition list */
		for( pp = InitialPart.pt_forw; pp != &InitialPart;  )  {
			register struct partition *newpp;
			newpp = pp;
			pp = pp->pt_forw;
			FREE_PT(newpp, ap->a_resource);
		}
		/* Free up final partition list */
		for( pp = FinalPart.pt_forw; pp != &FinalPart;  )  {
			register struct partition *newpp;
			newpp = pp;
			pp = pp->pt_forw;
			FREE_PT(newpp, ap->a_resource);
		}
	}
	/* Segs can't be freed until after a_hit() has returned */
	{
		register struct seg *segp;

		while( HeadSeg != SEG_NULL )  {
			segp = HeadSeg->seg_next;
			FREE_SEG( HeadSeg, ap->a_resource );
			HeadSeg = segp;
		}
	}

out:
	bu_free( (char *)ary_stp, "*ary_stp[]" );
	bu_free( (char *)ary_rp, "*ary_rp[]" );
	bu_free( (char *)ary_seg, "ary_seg[]" );

	if( solidbits != BITV_NULL)  {
		FREE_BITV( solidbits, ap->a_resource );
	}
	if(RT_G_DEBUG&(DEBUG_ALLRAYS|DEBUG_SHOOT|DEBUG_PARTITION))  {
		if( rt_g.rtg_logindent > 0 )
			rt_g.rtg_logindent -= 2;
		else
			rt_g.rtg_logindent = 0;
		bu_log("----------mshootray cpu=%d  %d,%d lvl=%d (%s) %s ret=%d\n",
			ap->a_resource->re_cpu,
			ap->a_x, ap->a_y,
			ap->a_level,
			ap->a_purpose != (char *)0 ? ap->a_purpose : "?",
			status, ret);
	}
	return( ret );
}

#define SEG_MISS(SEG)		(SEG).seg_stp=(struct soltab *) 0;	

/* Stub function which will "similate" a call to a vector shot routine */
/*void*/
rt_vstub( stp, rp, segp, n, resp )
struct soltab	       *stp[]; /* An array of solid pointers */
struct xray		*rp[]; /* An array of ray pointers */
struct  seg            segp[]; /* array of segs (results returned) */
int		  	    n; /* Number of ray/object pairs */
struct resource		*resp;
{
	register int    i;
	register struct seg *tmp_seg;

	/* go through each ray/solid pair and call a scalar function */
	for (i = 0; i < n; i++) {
		if (stp[i] != 0){ /* skip call if solid table pointer is NULL */
			/* do scalar call */
			tmp_seg = rt_functab[stp[i]->st_id].ft_shot(
				stp[i], rp[i], resp);

			/* place results in segp array */
			if ( tmp_seg == 0) {
				SEG_MISS(segp[i]);
			}
			else {
				segp[i] = *tmp_seg; /* structure copy */
				FREE_SEG(tmp_seg, resp);
			}
		}
	}
}

/*
 *			R T _ I N _ R P P
 *
 *  Compute the intersections of a ray with a rectangular parallelpiped (RPP)
 *  that has faces parallel to the coordinate planes
 *
 *  The algorithm here was developed by Gary Kuehl for GIFT.
 *  A good description of the approach used can be found in
 *  "??" by XYZZY and Barsky,
 *  ACM Transactions on Graphics, Vol 3 No 1, January 1984.
 *
 * Note -
 *  The computation of entry and exit distance is mandatory, as the final
 *  test catches the majority of misses.
 *
 *  Returns -
 *	 0  if ray does not hit RPP,
 *	!0  if ray hits RPP.
 *
 *  Implicit return -
 *	rp->r_min = dist from start of ray to point at which ray ENTERS solid
 *	rp->r_max = dist from start of ray to point at which ray LEAVES solid
 */
rt_in_rpp( rp, invdir, min, max )
register struct xray *rp;
register fastf_t *invdir;	/* inverses of rp->r_dir[] */
register fastf_t *min;
register fastf_t *max;
{
	register fastf_t *pt = &rp->r_pt[0];
	FAST fastf_t sv;
#define st sv			/* reuse the register */

	/* Start with infinite ray, and trim it down */
	rp->r_min = -INFINITY;
	rp->r_max = INFINITY;

	/* X axis */
	if( rp->r_dir[X] < 0.0 )  {
		/* Heading towards smaller numbers */
		/* if( *min > *pt )  miss */
		if( (sv = (*min - *pt) * *invdir) < 0.0 )
			return(0);	/* MISS */
		if(rp->r_max > sv)
			rp->r_max = sv;
		if( rp->r_min < (st = (*max - *pt) * *invdir) )
			rp->r_min = st;
	}  else if( rp->r_dir[X] > 0.0 )  {
		/* Heading towards larger numbers */
		/* if( *max < *pt )  miss */
		if( (st = (*max - *pt) * *invdir) < 0.0 )
			return(0);	/* MISS */
		if(rp->r_max > st)
			rp->r_max = st;
		if( rp->r_min < ((sv = (*min - *pt) * *invdir)) )
			rp->r_min = sv;
	}  else  {
		/*
		 *  Direction cosines along this axis is NEAR 0,
		 *  which implies that the ray is perpendicular to the axis,
		 *  so merely check position against the boundaries.
		 */
		if( (*min > *pt) || (*max < *pt) )
			return(0);	/* MISS */
	}

	/* Y axis */
	pt++; invdir++; max++; min++;
	if( rp->r_dir[Y] < 0.0 )  {
		if( (sv = (*min - *pt) * *invdir) < 0.0 )
			return(0);	/* MISS */
		if(rp->r_max > sv)
			rp->r_max = sv;
		if( rp->r_min < (st = (*max - *pt) * *invdir) )
			rp->r_min = st;
	}  else if( rp->r_dir[Y] > 0.0 )  {
		if( (st = (*max - *pt) * *invdir) < 0.0 )
			return(0);	/* MISS */
		if(rp->r_max > st)
			rp->r_max = st;
		if( rp->r_min < ((sv = (*min - *pt) * *invdir)) )
			rp->r_min = sv;
	}  else  {
		if( (*min > *pt) || (*max < *pt) )
			return(0);	/* MISS */
	}

	/* Z axis */
	pt++; invdir++; max++; min++;
	if( rp->r_dir[Z] < 0.0 )  {
		if( (sv = (*min - *pt) * *invdir) < 0.0 )
			return(0);	/* MISS */
		if(rp->r_max > sv)
			rp->r_max = sv;
		if( rp->r_min < (st = (*max - *pt) * *invdir) )
			rp->r_min = st;
	}  else if( rp->r_dir[Z] > 0.0 )  {
		if( (st = (*max - *pt) * *invdir) < 0.0 )
			return(0);	/* MISS */
		if(rp->r_max > st)
			rp->r_max = st;
		if( rp->r_min < ((sv = (*min - *pt) * *invdir)) )
			rp->r_min = sv;
	}  else  {
		if( (*min > *pt) || (*max < *pt) )
			return(0);	/* MISS */
	}

	/* If equal, RPP is actually a plane */
	if( rp->r_min > rp->r_max )
		return(0);	/* MISS */
	return(1);		/* HIT */
}

/*
 *			R T _ B I T V _ O R
 */
void
rt_bitv_or( out, in, nbits )
register bitv_t *out;
register bitv_t *in;
int nbits;
{
	register int words;

	words = RT_BITV_BITS2WORDS(nbits);
#ifdef VECTORIZE
#	include "noalias.h"
	for( --words; words >= 0; words-- )
		out[words] |= in[words];
#else
	while( words-- > 0 )
		*out++ |= *in++;
#endif
}

/*
 *  			R T _ G E T _ B I T V
 *  
 *  This routine is called by the GET_BITV macro when the freelist
 *  is exhausted.  Rather than simply getting one additional structure,
 *  we get a whole batch, saving overhead.  When this routine is called,
 *  the bitv resource must already be locked.
 *  malloc() locking is done in bu_malloc.
 *
 *  Also note that there is a bit of trickery going on here:
 *  the *real* size of be_v[] array is determined at runtime, here.
 */
void
rt_get_bitv(rtip, res)
struct rt_i		*rtip;
register struct resource *res;
{
	register char *cp;
	register int bytes;
	register int size;		/* size of structure to really get */

	size = rtip->rti_bv_bytes;
	size = (size+sizeof(long)-1) & ~(sizeof(long)-1);
	bytes = bu_malloc_len_roundup(16*size);
	if( (cp = bu_malloc(bytes, "rt_get_bitv")) == (char *)0 )  {
		bu_log("rt_get_bitv: malloc failure\n");
		exit(17);
	}
	while( bytes >= size )  {
		((union bitv_elem *)cp)->be_next = res->re_bitv;
		res->re_bitv = (union bitv_elem *)cp;
		res->re_bitvlen++;
		cp += size;
		bytes -= size;
	}
}
@


11.9
log
@change conf.h to a wrapped config.h
@
text
@d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header: /cvs/brlcad/librt/vshoot.c,v 11.8 2004/02/02 17:39:29 morrison Exp $ (BRL)";
@


11.8
log
@update copyright to include span through 2003
@
text
@d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.7 2002/01/10 18:12:41 butler Exp $ (BRL)";
d25 5
a29 1
#include "conf.h"
@


11.7
log
@Changed word "solids" to indicate "prims" or primitives"
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1985 by the United States Army.
d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.6 2001/05/17 20:05:26 morrison Exp $ (BRL)";
d23 1
a23 1
char CopyRight_Notice[] = "@@(#) Copyright (C) 1985 by the United States Army";
@


11.7.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header$ (BRL)";
d23 1
a23 1
char CopyRight_Notice[] = "@@(#) Copyright (C) 1985-2004 by the United States Army";
@


11.7.6.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/librt/vshoot.c,v 11.8 2004/02/02 17:39:29 morrison Exp $ (BRL)";
d23 1
a23 1
char CopyRight_Notice[] = "@@(#) Copyright (C) 1985-2004 by the United States Army";
@


11.7.12.1
log
@merge from HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.8 2004/02/02 17:39:29 morrison Exp $ (BRL)";
d23 1
a23 1
char CopyRight_Notice[] = "@@(#) Copyright (C) 1985-2004 by the United States Army";
@


11.7.12.2
log
@merge from head
@
text
@d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.7.12.1 2004/02/12 18:37:48 erikg Exp $ (BRL)";
@


11.6
log
@rt_g.debug -> RT_G_DEBUG
@
text
@d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.5 2000/07/10 23:01:51 mike Exp $ (BRL)";
d246 1
a246 1
		status = "MISSed all solids";
@


11.5
log
@
Added "const" to RCSid string, to silence warnings of unused variable
on GCC compilers
@
text
@d20 1
a20 1
static const char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.4 2000/06/30 15:27:09 pjt Exp $ (BRL)";
d106 1
a106 1
	if(rt_g.debug&(DEBUG_ALLRAYS|DEBUG_SHOOT|DEBUG_PARTITION)) {
d277 1
a277 1
	if(rt_g.debug&DEBUG_SHOOT)  rt_pr_partitions(rtip,&FinalPart,"a_hit()");
d323 1
a323 1
	if(rt_g.debug&(DEBUG_ALLRAYS|DEBUG_SHOOT|DEBUG_PARTITION))  {
@


11.4
log
@Changed ID_MAXIMUM to ID_MAX_SOLID
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.3 2000/03/29 18:28:04 mike Exp $ (BRL)";
@


11.3
log
@
Got rid of AUTO define
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.2 1999/06/03 01:21:54 mike Exp $ (BRL)";
d179 1
a179 1
	for( id = 1; id <= ID_MAXIMUM; id++ )  {
@


11.2
log
@
sed4
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: /c/CVS/brlcad/librt/vshoot.c,v 11.1 1995/01/04 09:58:57 mike Rel4_4 $ (BRL)";
a35 6
#ifdef cray
#define AUTO register
#else
#define AUTO auto
#endif

d80 2
a81 2
	AUTO struct seg		*HeadSeg;
	AUTO int		ret;
d83 3
a85 3
	AUTO union bitv_elem	*solidbits;	/* bits for all solids shot so far */
	AUTO bitv_t		*regionbits;	/* bits for all involved regions */
	AUTO char		*status;
@


11.1
log
@Release_4.4
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: /m/cad/librt/RCS/vshoot.c,v 10.2 94/08/10 20:23:18 gdurf Exp $ (BRL)";
d114 1
a114 1
		rt_log("\n**********mshootray cpu=%d  %d,%d lvl=%d (%s)\n",
d129 1
a129 1
	ary_stp = (struct soltab **)rt_calloc( vlen, sizeof(struct soltab *),
d131 1
a131 1
	ary_rp = (struct xray **)rt_calloc( vlen, sizeof(struct xray *),
d133 1
a133 1
	ary_seg = (struct seg *)rt_calloc( vlen, sizeof(struct seg),
d322 3
a324 3
	rt_free( (char *)ary_stp, "*ary_stp[]" );
	rt_free( (char *)ary_rp, "*ary_rp[]" );
	rt_free( (char *)ary_seg, "ary_seg[]" );
d334 1
a334 1
		rt_log("----------mshootray cpu=%d  %d,%d lvl=%d (%s) %s ret=%d\n",
d520 1
a520 1
 *  malloc() locking is done in rt_malloc.
d536 3
a538 3
	bytes = rt_byte_roundup(16*size);
	if( (cp = rt_malloc(bytes, "rt_get_bitv")) == (char *)0 )  {
		rt_log("rt_get_bitv: malloc failure\n");
@


10.2
log
@Added include of conf.h
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: /m/cad/librt/RCS/vshoot.c,v 10.1 1991/10/12 06:41:11 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: /m/cad/librt/RCS/vshoot.c,v 9.3 90/01/06 04:52:35 mike Exp $ (BRL)";
d24 2
@


9.3
log
@Went back to having 4 words of padding;
2 after solid bit vector, 2 more after region bit vector.
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: vshoot.c,v 9.2 90/01/06 04:17:32 mike Locked $ (BRL)";
@


9.2
log
@Changed to use RT_BITV_BITS2WORDS(), tweak to rt_bitv_or().
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: vshoot.c,v 9.1 89/05/19 05:57:41 mike Locked $ (BRL)";
d144 1
a144 1
		1+RT_BITV_BITS2WORDS(ap->a_rt_i->nsolids)];
@


9.1
log
@Release_3.5
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: vshoot.c,v 1.5 89/05/12 21:22:40 mike Exp $ (BRL)";
a140 1
	/* XXX WARNING this needs attention for multiple rt_i sizes */
d143 2
a144 1
	regionbits = &solidbits->be_v[2+(BITS2BYTES(rtip->nsolids)/sizeof(bitv_t))];
d238 1
a238 2
			/* BITS2BYTES() / sizeof(bitv_t) */
			words = (ary_stp[i]->st_maxreg+BITV_MASK)>>BITV_SHIFT;
d240 2
a241 2
			for( ; words > 0; words-- )
				regionbits[words-1] |= in[words-1];
d500 1
a500 1
	words = (nbits+BITV_MASK)>>BITV_SHIFT;/*BITS2BYTES()/sizeof(bitv_t)*/
d503 2
a504 2
	for( ; words > 0; words-- )
		out[words-1] |= in[words-1];
@


1.5
log
@Added some event counting.
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: vshoot.c,v 1.4 89/04/14 03:12:24 mike Locked $ (BRL)";
@


1.4
log
@xxx_vshoot() takes a resource pointer as it's last arg.
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: vshoot.c,v 1.3 89/04/13 05:22:04 mike Locked $ (BRL)";
d196 1
a196 1
		/* bit vector check */
d198 1
d201 1
a201 1
			rtip->rti_nsol_by_type[id], ap->a_resource );
d203 1
a203 1
		/* set bits for all solids shot at */
d209 6
a214 1
			if( ary_seg[i].seg_stp == SOLTAB_NULL )  continue;	/* MISS */
@


1.3
log
@Added RESOURCE_MAGIC initialization
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: vshoot.c,v 1.2 89/04/08 02:50:11 mike Locked $ (BRL)";
d200 1
a200 1
			rtip->rti_nsol_by_type[id], ap );
d341 1
a341 1
rt_vstub( stp, rp, segp, n, ap)
d346 1
a346 1
struct application        *ap; /* pointer to an application */
d355 2
a356 2
			tmp_seg =
			    rt_functab[stp[i]->st_id].ft_shot(stp[i], rp[i], ap);
d364 1
a364 1
				FREE_SEG(tmp_seg, ap->a_resource);
@


1.2
log
@This version seems to "work".
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: vshoot.c,v 1.1 89/04/08 01:05:22 mike Locked $ (BRL)";
d104 1
a104 1
	if( ap->a_resource == RESOURCE_NULL )
d106 3
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
static char RCSshoot[] = "@@(#)$Header: shoot.c,v 8.2 89/04/03 21:38:29 mike Exp $ (BRL)";
d181 4
d186 1
a186 1
		for( i = rtip->rti_nsol_by_type[id]-1; i >= 0; i-- )  {
a194 1
#if 0
a195 3
#else
		stub(
#endif
d202 1
a202 1
		for( i = rtip->rti_nsol_by_type[id]-1; i >= 0; i-- )  {
d224 1
a224 1
		for( i = rtip->rti_nsol_by_type[id]-1; i >= 0; i-- )  {
d338 1
a338 1
stub( stp, rp, segp, n, ap)
@
