head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.2
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.2
	premerge-autoconf:11.8
	ansi-20040316-freeze:11.7.2.1
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.4
	offsite-5-3-pre:11.5
	rel-5-3:11.4
	rel-5-2:11.4
	rel-5-1-branch:11.4.0.2
	rel-5-1:11.4
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1
	rt-2:2.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.18.07.35;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.47;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.29;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.10;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.55.22;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2000.07.10.23.01.51;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.05.25.02.12.06;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.05.25.02.09.21;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.08.27.03.26.34;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.58.48;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.10.20.21.00;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	92.04.04.00.10.34;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.41.07;	author mike;	state Rel4_0;
branches;
next	9.1;

9.1
date	89.05.19.05.57.32;	author mike;	state Rel3_5;
branches;
next	8.4;

8.4
date	89.03.15.15.50.17;	author mike;	state Exp;
branches;
next	8.3;

8.3
date	88.12.13.21.59.30;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.06.15.56.01;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.32.01;	author mike;	state Rel3_0;
branches;
next	7.4;

7.4
date	88.09.19.15.43.12;	author stay;	state Exp;
branches;
next	7.3;

7.3
date	88.09.17.02.50.56;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	88.09.09.21.19.47;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.34.52;	author mike;	state Rel;
branches;
next	6.2;

6.2
date	87.09.03.01.48.27;	author mike;	state Exp;
branches;
next	6.1;

6.1
date	87.07.11.07.57.07;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.13.07;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.12.22.12.25;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.46.34;	author mike;	state Rel1;
branches;
next	3.4;

3.4
date	86.11.05.23.27.54;	author mike;	state Exp;
branches;
next	3.3;

3.3
date	86.11.05.23.22.20;	author mike;	state Exp;
branches;
next	3.2;

3.2
date	86.09.23.15.59.31;	author mike;	state Exp;
branches;
next	3.1;

3.1
date	86.07.11.01.33.16;	author mike;	state Exp;
branches;
next	3.0;

3.0
date	86.06.10.01.34.20;	author mike;	state Exp;
branches;
next	2.2;

2.2
date	85.09.11.19.56.47;	author mike;	state Exp;
branches;
next	2.1;

2.1
date	85.08.31.06.07.35;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	85.06.05.00.26.25;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	85.03.25.11.47.25;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	84.11.29.07.33.42;	author mike;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.01.47;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.19.00;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.43.46;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.02.12.18.37.47;	author erikg;	state Exp;
branches;
next	11.7.10.2;

11.7.10.2
date	2004.03.15.14.07.30;	author erikg;	state Exp;
branches;
next	;


desc
@This version for straight System V Release 2.
@


11.11
log
@moved to src/
@
text
@/*
 *			T I M E R U N I X . C
 *
 * Function -
 *	To provide timing information for RT.
 *	This version for any non-BSD UNIX system, including
 *	System III, Vr1, Vr2.
 *	Version 6 & 7 should also be able to use this (untested).
 *	The time() and times() sys-calls are used for all timing.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCStimer[] = "@@(#)$Header: /n/xoff/cvs/brlcad/librt/timerunix.c,v 11.10 2004/05/10 15:30:47 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_MEMORY_H
#include <memory.h>
#endif
#include <sys/types.h>
#include <sys/times.h>
#include <sys/param.h>

#ifdef HAVE_SYS_MACHD_H
# include <sys/machd.h>
#endif

#ifndef HZ
	/* It's not always in sys/param.h;  if not, guess */
#	define	HZ		60
#	define	DEFAULT_HZ	yes
#endif

#include "machine.h"
#include "externs.h"
#include "bu.h"

/* Standard System V stuff */
static long time0;
static struct tms tms0;

/*
 *			R T _ P R E P _ T I M E R
 */
void
rt_prep_timer(void)
{
	(void)time(&time0);
	(void)times(&tms0);
}

/*
 *			R T _ G E T _ T I M E R
 *
 *  Reports on the passage of time, since rt_prep_timer() was called.
 *  Explicit return is number of CPU seconds.
 *  String return is descriptive.
 *  If "elapsed" pointer is non-null, number of elapsed seconds are returned.
 *  Times returned will never be zero.
 */
double
rt_get_timer(struct bu_vls *vp, double *elapsed)
{
	long	now;
	double	user_cpu_secs;
	double	sys_cpu_secs;
	double	elapsed_secs;
	double	percent;
	struct tms tmsnow;

	/* Real time.  1 second resolution. */
	(void)time(&now);
	elapsed_secs = now-time0;

	/* CPU time */
	(void)times(&tmsnow);
	user_cpu_secs = (tmsnow.tms_utime + tmsnow.tms_cutime) - 
		(tms0.tms_utime + tms0.tms_cutime );
	user_cpu_secs /= HZ;
	sys_cpu_secs = (tmsnow.tms_stime + tmsnow.tms_cstime) - 
		(tms0.tms_stime + tms0.tms_cstime );
	sys_cpu_secs /= HZ;
	if( user_cpu_secs < 0.00001 )  user_cpu_secs = 0.00001;
	if( elapsed_secs < 0.00001 )  elapsed_secs = user_cpu_secs;	/* It can't be any less! */

	if( elapsed )  *elapsed = elapsed_secs;

	if( vp )  {
		percent = user_cpu_secs/elapsed_secs*100.0;
		BU_CK_VLS(vp);
#ifdef DEFAULT_HZ
		bu_vls_printf( vp,
"%g user + %g sys in %g elapsed secs (%g%%) WARNING: HZ=60 assumed, fix librt/timerunix.c",
			user_cpu_secs, sys_cpu_secs, elapsed_secs, percent );
#else
		bu_vls_printf( vp,
			"%g user + %g sys in %g elapsed secs (%g%%)",
			user_cpu_secs, sys_cpu_secs, elapsed_secs, percent );
#endif
	}
	return( user_cpu_secs );
}

/*
 *			R T _ R E A D _ T I M E R
 * 
 *  Compatability routine
 */
double
rt_read_timer(char *str, int len)
{
	struct bu_vls	vls;
	double		cpu;
	int		todo;

	if( !str )  return  rt_get_timer( (struct bu_vls *)0, (double *)0 );

	bu_vls_init( &vls );
	cpu = rt_get_timer( &vls, (double *)0 );
	todo = bu_vls_strlen( &vls );
	if( todo > len )  todo = len-1;
	strncpy( str, bu_vls_addr(&vls), todo );
	str[todo] = '\0';
	return cpu;
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header: /cvs/brlcad/librt/timerunix.c,v 11.9 2004/04/05 08:48:58 morrison Exp $ (BRL)";
@


11.9
log
@merge of ansi-6-0-branch into HEAD
@
text
@d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header$ (BRL)";
d27 5
a31 1
#include "conf.h"
@


11.8
log
@update copyright to include span through 2003
@
text
@d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerunix.c,v 11.7 2002/08/20 17:08:10 jra Exp $ (BRL)";
d59 1
a59 1
rt_prep_timer()
d75 1
a75 3
rt_get_timer( vp, elapsed )
struct bu_vls	*vp;
double		*elapsed;
d123 1
a123 2
rt_read_timer(str,len)
char *str;
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1985 by the United States Army.
d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerunix.c,v 11.5 2000/07/10 23:01:51 mike Exp $ (BRL)";
@


11.7.4.1
log
@sync to HEAD...
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/librt/timerunix.c,v 11.8 2004/02/02 17:39:29 morrison Exp $ (BRL)";
@


11.7.10.1
log
@merge from HEAD
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerunix.c,v 11.8 2004/02/02 17:39:29 morrison Exp $ (BRL)";
@


11.7.10.2
log
@merge from head
@
text
@d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerunix.c,v 11.7.10.1 2004/02/12 18:37:47 erikg Exp $ (BRL)";
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerunix.c,v 11.7 2002/08/20 17:08:10 jra Exp $ (BRL)";
d59 1
a59 1
rt_prep_timer(void)
d75 3
a77 1
rt_get_timer(struct bu_vls *vp, double *elapsed)
d125 2
a126 1
rt_read_timer(char *str, int len)
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header$ (BRL)";
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d59 1
a59 1
rt_prep_timer(void)
d75 3
a77 1
rt_get_timer(struct bu_vls *vp, double *elapsed)
d125 2
a126 1
rt_read_timer(char *str, int len)
@


11.5
log
@
Added "const" to RCSid string, to silence warnings of unused variable
on GCC compilers
@
text
@d24 1
a24 1
static const char RCStimer[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerunix.c,v 11.4 2000/05/25 02:12:06 mike Exp $ (BRL)";
d59 1
a59 1
rt_prep_timer()
d75 1
a75 3
rt_get_timer( vp, elapsed )
struct bu_vls	*vp;
double		*elapsed;
d123 1
a123 2
rt_read_timer(str,len)
char *str;
@


11.4
log
@
New name.
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerunix.c,v 11.3 2000/05/25 02:09:21 mike Exp $ (BRL)";
@


11.3
log
@
sed5
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /c/CVS/brlcad/librt/timerunix.c,v 11.2 1996/08/27 03:26:34 mike Exp $ (BRL)";
d105 1
a105 1
		BU_VLS_CHECK(vp);
@


11.2
log
@bu.h
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /m/cad/librt/RCS/timerunix.c,v 11.1 1995/01/04 09:58:48 mike Rel4_4 mike $ (BRL)";
d105 1
a105 1
		RT_VLS_CHECK(vp);
@


11.1
log
@Release_4.4
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /m/cad/librt/RCS/timerunix.c,v 10.3 94/08/10 20:21:00 gdurf Exp $ (BRL)";
d49 1
a49 1
#include "rtstring.h"
d76 1
a76 1
struct rt_vls	*vp;
d107 1
a107 1
		rt_vls_printf( vp,
d111 1
a111 1
		rt_vls_printf( vp,
d128 1
a128 1
	struct rt_vls	vls;
d132 1
a132 1
	if( !str )  return  rt_get_timer( (struct rt_vls *)0, (double *)0 );
d134 1
a134 1
	rt_vls_init( &vls );
d136 1
a136 1
	todo = rt_vls_strlen( &vls );
d138 1
a138 1
	strncpy( str, rt_vls_addr(&vls), todo );
@


10.3
log
@Factored ifdefs
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /m/cad/librt/RCS/timerunix.c,v 10.2 92/04/04 00:10:34 mike Exp $ (BRL)";
@


10.2
log
@Changed primary interface to rt_get_timer(), which gives
elapsed time, and an rt_vls description of resource use.
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /m/cad/librt/RCS/timerunix.c,v 10.1 91/10/12 06:41:07 mike Rel4_0 Locker: mike $ (BRL)";
d27 2
d30 1
d32 1
d37 2
a38 2
#ifdef CRAY1
# include <sys/machd.h>		/* XMP only, for HZ */
d48 1
a51 1
extern long time();
@


10.1
log
@Release_4.0
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 9.1 89/05/19 05:57:32 mike Rel3_5 $ (BRL)";
d43 3
d52 1
a52 1
 *			P R E P _ T I M E R
a60 1

d62 7
a68 2
 *			R E A D _ T I M E R
 * 
d71 3
a73 2
rt_read_timer(str,len)
char *str;
d75 4
a78 4
	long now;
	double usert;
	double syst;
	double realt;
a80 1
	char line[256];
d82 1
a82 1
	/* Real time */
d84 1
a84 1
	realt = now-time0;
d88 1
a88 1
	usert = (tmsnow.tms_utime + tmsnow.tms_cutime) - 
d90 2
a91 2
	usert /= HZ;
	syst = (tmsnow.tms_stime + tmsnow.tms_cstime) - 
d93 9
a101 4
	syst /= HZ;
	if( usert < 0.00001 )  usert = 0.00001;
	if( realt < 0.00001 )  realt = usert;
	percent = usert/realt*100.0;
d103 3
a105 3
	sprintf(line,
		"%g user + %g sys in %g elapsed secs (%g%%) WARNING: HZ=60 assumed, fix librt/timerunix.c",
		usert, syst, realt, percent );
d107 3
a109 2
	sprintf(line,"%g user + %g sys in %g elapsed secs (%g%%)",
		usert, syst, realt, percent );
d111 26
a136 2
	(void)strncpy( str, line, len );
	return( usert );
@


9.1
log
@Release_3.5
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 8.4 89/03/15 15:50:17 mike Exp $ (BRL)";
@


8.4
log
@Enhanced, so that XMP no longer needs special timer module.
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 8.3 88/12/13 21:59:30 mike Locked $ (BRL)";
@


8.3
log
@Fixed bad printf descriptor
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 8.2 88/12/06 15:56:01 mike Locked $ (BRL)";
d33 4
d75 1
d78 2
d87 1
a87 1
	if( usert < 0.00001 )  usert = 0.01;
@


8.2
log
@Now print out system time too, although they don't figure into
the time returned.
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /n/spark/m/cad/librt/RCS/timerunix.c,v 8.1 88/10/05 00:32:01 mike Rel3_0 $ (BRL)";
d88 1
a88 1
	sprintf(line,"%g user + %s sys in %g elapsed secs (%g%%)",
@


8.1
log
@Release_3.0
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /n/m/cad/librt/RCS/timerunix.c,v 7.4 88/09/19 15:43:12 stay Exp $ (BRL)";
d65 1
d69 1
a69 1
	char line[132];
d77 3
d85 2
a86 2
		"%g CPU secs in %g elapsed secs (%g%%) WARNING: HZ=60 assumed, fix librt/timerunix.c",
		usert, realt, percent );
d88 2
a89 2
	sprintf(line,"%g CPU secs in %g elapsed secs (%g%%)",
		usert, realt, percent );
@


7.4
log
@added child user time for use with parallel processing to
get correct timing results...
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: /n/m/cad/librt/RCS/timerunix.c,v 7.3 88/09/17 02:50:56 mike Exp $ (BRL)";
@


7.3
log
@Added code to handle having to SWAG the value of HZ.
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 7.2 88/09/09 21:19:47 mike Locked $ (BRL)";
d73 2
a74 1
	usert = tmsnow.tms_utime - tms0.tms_utime;
@


7.2
log
@Eliminated bzero() and bcopy() definitions
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 7.1 87/11/02 23:34:52 mike Locked $ (BRL)";
d34 3
a36 2
/* It's not always in sys/param.h */
#define HZ	60
d66 1
d77 6
d84 2
a85 2
		usert, realt,
		usert/realt*100 );
@


7.1
log
@Release 2.3
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 6.2 87/09/03 01:48:27 mike Exp $ (BRL)";
a35 11
#endif

#if !defined(cray)
bzero( str, n )
{
	memset( str, '\0', n );
}

bcopy(from, to, count)  {
	memcpy( to, from, count );
}
@


6.2
log
@made bzero/bcopy defs conditional on not being a Cray
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 6.1 87/07/11 07:57:07 mike Locked $ (BRL)";
@


6.1
log
@Release 2.0
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 5.1 87/06/24 22:13:07 mike Rel $ (BRL)";
d38 1
d47 1
@


5.1
log
@Release 1.24
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 4.2 87/02/12 22:12:25 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 4.1 86/12/29 03:46:34 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header: timerunix.c,v 3.4 86/11/05 23:27:54 mike Exp $ (BRL)";
@


3.4
log
@Trying for a working RCSid
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header$ (BRL)";
@


3.3
log
@Changed from timer52 to timerunix.
@
text
@d24 1
a24 1
static char RCStimer[] = "@@(#)$Header $ (BRL)";
@


3.2
log
@Updated to include times() sys-call.
@
text
@d2 1
a2 1
 *			T I M E R 5 2 . C
d6 4
a9 2
 *	This version for System V, Release TWO.
 *	(This merely determines elapsed time, not CPU time, alas)
d43 4
a88 4
}

bcopy(from, to, count)  {
	memcpy( to, from, count );
@


3.1
log
@Cleanups inspired by the crummy compiler on the Cray XMP
@
text
@d27 3
d31 5
d44 1
a45 1

d53 1
d67 2
d72 9
a80 3
	sprintf(line,"%ld clock seconds", (long)now-time0);
	usert = now-time0;
	if( usert < 0.00001 )  usert = 0.00001;
@


3.0
log
@rt/ and librt/ separated,
global datastructures simplified.
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header $ (BRL)";
@


2.2
log
@Changed pr_timer to read_timer, which formats into a user supplied buffer,
so that user handles I/O of string as desired.
@
text
@d42 1
a42 1
prep_timer()
d53 1
a53 1
read_timer(str,len)
d61 1
a61 1
	sprintf(line,"%ld clock seconds\n", (long)now-time0);
@


2.1
log
@Version 2 of RT
@
text
@d49 1
a49 1
 *			P R _ T I M E R
d53 1
a53 1
pr_timer(str)
d58 1
d61 1
a61 1
	fprintf(stderr,"%s: %ld secs\n", str, (long)now-time0);
d63 2
@


1.3
log
@timer_print, timer_prep changed to prep_timer, pr_timer
to accomodate compilers that only look at the first 8 chars.
@
text
@d64 4
@


1.2
log
@Housekeeping
@
text
@d39 1
a39 1
 *			T I M E R _ P R E P
d42 1
a42 1
timer_prep()
d49 1
a49 1
 *			T I M E R _ P R I N T
d53 1
a53 1
timer_print(str)
@


1.1
log
@Initial revision
@
text
@d6 2
a7 1
 *	THIS VERSION FOR System FIVE, Release TWO.
d9 11
a19 1
 * $Revision: 1.2 $
@
