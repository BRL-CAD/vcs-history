head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.2
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.1
	premerge-autoconf:11.8
	ansi-20040316-freeze:11.7.2.1
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.4
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.5
	offsite-5-3-pre:11.5
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.5
	rel-5-0-beta:11.4
	rel-4-5:11.4
	ctj-4-5-post:11.4
	ctj-4-5-pre:11.4
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.18.07.34;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.46;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.08.48.58;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.28;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.07;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.55.20;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	99.06.03.01.39.15;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	96.07.10.20.15.50;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	95.12.01.02.49.33;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.09.29.15.32.13;	author stay;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.53.52;	author mike;	state Rel4_4;
branches
	11.1.1.1;
next	1.3;

1.3
date	94.11.08.01.45.05;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	94.08.24.15.16.20;	author stay;	state Exp;
branches;
next	1.1;

1.1
date	94.08.24.15.01.18;	author stay;	state Exp;
branches;
next	;

11.1.1.1
date	98.01.29.06.43.38;	author mike;	state Rel4_5;
branches;
next	;

11.7.2.1
date	2002.09.19.18.01.45;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.18.56;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.43.44;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.02.12.18.37.46;	author erikg;	state Exp;
branches;
next	;


desc
@reverse the direction of the normal for the surface
by transposing the elements of the control mesh
@


11.11
log
@moved to src/
@
text
@/*		N U R B _ R E V E R S E . C
 *
 *  Function-
 *  	Reverse the direction of a nurb surface
 *	by transposing the control points
 *
 *  Author -
 *	Paul R. Stay
 *
 *  Source -
 *     SECAD/VLD Computing Consortium, Bldg 394
 *     The U.S. Army Ballistic Research Laboratory
 *     Aberdeen Proving Ground, Maryland 21005
 *
 * Copyright Notice -
 *     This software is Copyright (C) 1991-2004 by the United States Army.
 *     All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"
#include "nurb.h"

void
rt_nurb_reverse_srf(struct face_g_snurb *srf)
{

	int i,j,k;
	int coords;
	int row, col;
	fastf_t * p_ptr;
	fastf_t * tmp;
	fastf_t * ptr2;

        p_ptr = srf->ctl_points;
        coords = RT_NURB_EXTRACT_COORDS(srf->pt_type);

	row = srf->s_size[0];
	col = srf->s_size[1];

	tmp = (fastf_t *) bu_malloc(sizeof(fastf_t) * coords * 
		row * col, "nurb_reverse:temp");

	ptr2 = tmp;

	for(i = 0; i < row; i++)
	for(j = 0; j < col; j++)
	{
                for( k = 0; k < coords; k++)
 	               *ptr2++ = srf->ctl_points[ (j * col + i) * coords + k];
 	}

	for( i = 0; i < row * col * coords; i++)
		p_ptr[i] = tmp[i];

	srf->s_size[0] = col;
	srf->s_size[1] = row;

	i = srf->u.k_size;
	srf->u.k_size = srf->v.k_size;
	srf->v.k_size = i;

	p_ptr = srf->u.knots;
	srf->u.knots = srf->v.knots;
	srf->v.knots = p_ptr;

	bu_free((char *) tmp, "temporary storage for transpose");
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@@


11.9
log
@merge of ansi-6-0-branch into HEAD
@
text
@d20 5
a24 1
#include "conf.h"
@


11.8
log
@update copyright to include span through 2003
@
text
@d30 1
a30 2
rt_nurb_reverse_srf( srf )
struct face_g_snurb * srf;
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d16 1
a16 1
 *     This software is Copyright (C) 1991 by the United States Army.
@


11.7.4.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
 *     This software is Copyright (C) 1991-2004 by the United States Army.
@


11.7.10.1
log
@merge from HEAD
@
text
@d16 1
a16 1
 *     This software is Copyright (C) 1991-2004 by the United States Army.
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d30 2
a31 1
rt_nurb_reverse_srf(struct face_g_snurb *srf)
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d16 1
a16 1
 *     This software is Copyright (C) 1991-2004 by the United States Army.
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d30 2
a31 1
rt_nurb_reverse_srf(struct face_g_snurb *srf)
@


11.5
log
@
sed4
@
text
@d30 1
a30 2
rt_nurb_reverse_srf( srf )
struct face_g_snurb * srf;
@


11.4
log
@Fixed declaration problems for IRIX 6.2
@
text
@d47 1
a47 1
	tmp = (fastf_t *) rt_malloc(sizeof(fastf_t) * coords * 
d73 1
a73 1
	rt_free((char *) tmp, "temporary storage for transpose");
@


11.3
log
@LIBNURB data structures have been fully merged withNMG data structures.
@
text
@d29 1
@


11.2
log
@fixed problem with non rectangular surfaces
@
text
@d30 1
a30 1
struct snurb * srf;
d64 7
a70 7
	i = srf->u_knots.k_size;
	srf->u_knots.k_size = srf->v_knots.k_size;
	srf->v_knots.k_size = i;

	p_ptr = srf->u_knots.knots;
	srf->u_knots.knots = srf->v_knots.knots;
	srf->v_knots.knots = p_ptr;
@


11.1
log
@Release_4.4
@
text
@d38 1
d49 2
d54 3
a56 9
		int tmp_index, p_index;

		tmp_index = j * col * coords + i * coords;
		p_index   = i * row * coords + j * coords;

		for(k= 0; k < coords; k++)
			tmp[tmp_index +k] = p_ptr[p_index + k];

	}
@


11.1.1.1
log
@Release_4.5
@
text
@a28 1
void
d30 1
a30 1
struct face_g_snurb * srf;
a37 1
	fastf_t * ptr2;
a47 2
	ptr2 = tmp;

d51 9
a59 3
                for( k = 0; k < coords; k++)
 	               *ptr2++ = srf->ctl_points[ (j * col + i) * coords + k];
 	}
d67 7
a73 7
	i = srf->u.k_size;
	srf->u.k_size = srf->v.k_size;
	srf->v.k_size = i;

	p_ptr = srf->u.knots;
	srf->u.knots = srf->v.knots;
	srf->v.knots = p_ptr;
@


1.3
log
@Added rt_ prefix
@
text
@@


1.2
log
@added conf.h and fixed the rt_free call
,.
@
text
@d29 1
a29 1
nurb_reverse_srf( srf )
@


1.1
log
@Initial revision
@
text
@d20 2
d75 1
a75 1
	rt_free(tmp);
@
