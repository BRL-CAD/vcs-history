head	1.2;
access;
symbols
	ansi-20040316-freeze:1.1.1.1
	rel-6-1-DP:1.1.1.1
	rel-6-0-2:1.1.1.1
	rel-6-0-1-branch:1.1.1.1.0.4
	hartley-6-0-post:1.1.1.1
	hartley-6-0-pre:1.1.1.1
	rel-6-0-1:1.1.1.1
	rel-6-0:1.1.1.1
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	windows-6-0-branch:1.1.1.1.0.8
	ansi-6-0-branch:1.1.1.1.0.6
	tcl8-3:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@.\" @;


1.2
date	2003.03.13.19.09.32;	author jra;	state dead;
branches;
next	1.1;

1.1
date	2000.12.06.21.33.16;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.33.16;	author bparker;	state Exp;
branches
	1.1.1.1.6.1
	1.1.1.1.8.1;
next	;

1.1.1.1.6.1
date	2004.03.17.07.14.05;	author morrison;	state dead;
branches;
next	;

1.1.1.1.8.1
date	2004.03.15.17.34.33;	author morrison;	state dead;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@'\"
'\" Copyright (c) 1995-1996 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @@(#) $Id: Alloc.3,v 1.1 2000/12/06 21:33:16 bparker Exp $
'\" 
.so man.macros
.TH Tcl_Alloc 3 7.5 Tcl "Tcl Library Procedures"
.BS
.SH NAME
Tcl_Alloc, Tcl_Free, Tcl_Realloc \- allocate or free heap memory
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
char *
\fBTcl_Alloc\fR(\fIsize\fR)
.sp
\fBTcl_Free\fR(\fIptr\fR)
.sp
char *
\fBTcl_Realloc\fR(\fIptr, size\fR)
.SH ARGUMENTS
.AS char *size
.AP int size in
Size in bytes of the memory block to allocate.
.AP char *ptr in
Pointer to memory block to free or realloc.
.BE

.SH DESCRIPTION
.PP
These procedures provide a platform and compiler independent interface
for memory allocation.  Programs that need to transfer ownership of
memory blocks between Tcl and other modules should use these routines
rather than the native \fBmalloc()\fR and \fBfree()\fR routines
provided by the C run-time library.
.PP
\fBTcl_Alloc\fR returns a pointer to a block of at least \fIsize\fR
bytes suitably aligned for any use.
.PP
\fBTcl_Free\fR makes the space referred to by \fIptr\fR available for
further allocation.
.PP
\fBTcl_Realloc\fR changes the size of the block pointed to by
\fIptr\fR to \fIsize\fR bytes and returns a pointer to the new block.
The contents will be unchanged up to the lesser of the new and old
sizes.  The returned location may be different from \fIptr\fR.
.SH KEYWORDS
alloc, allocation, free, malloc, memory, realloc
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
'\" RCS: @@(#) $Id: Alloc.3,v 1.2 1998/09/14 18:39:45 stanton Exp $
@


1.1.1.1
log
@Import tcl8.3
@
text
@@


1.1.1.1.6.1
log
@sync branch with HEAD
@
text
@d7 1
a7 1
'\" RCS: @@(#) $Id: Alloc.3,v 1.1.1.1 2000/12/06 21:33:16 bparker Exp $
@


1.1.1.1.8.1
log
@sync with HEAD -- libtcl8.3 is now libtcl8.4
@
text
@d7 1
a7 1
'\" RCS: @@(#) $Id: Alloc.3,v 1.1.1.1 2000/12/06 21:33:16 bparker Exp $
@

