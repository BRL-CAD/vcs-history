head	1.3;
access;
symbols
	ansi-20040316-freeze:1.2
	rel-6-1-DP:1.2
	rel-6-0-2:1.2
	rel-6-0-1-branch:1.2.0.2
	hartley-6-0-post:1.2
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	windows-6-0-branch:1.2.0.6
	ansi-6-0-branch:1.2.0.4
	tcl8-3:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.03.13.19.10.02;	author jra;	state dead;
branches;
next	1.2;

1.2
date	2001.07.03.01.30.01;	author butler;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2000.12.06.21.33.20;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.33.20;	author bparker;	state Exp;
branches;
next	;

1.2.4.1
date	2004.03.17.07.14.21;	author morrison;	state dead;
branches;
next	;

1.2.6.1
date	2004.03.11.23.44.11;	author morrison;	state dead;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/* 
 * tclLoadNone.c --
 *
 *	This procedure provides a version of the TclLoadFile for use
 *	in systems that don't support dynamic loading; it just returns
 *	an error.
 *
 * Copyright (c) 1995-1997 Sun Microsystems, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tclLoadNone.c,v 1.2 2001/07/03 01:30:01 butler Exp $
 */

#include "tclInt.h"

/*
 *----------------------------------------------------------------------
 *
 * TclpLoadFile --
 *
 *	This procedure is called to carry out dynamic loading of binary
 *	code;  it is intended for use only on systems that don't support
 *	dynamic loading (it returns an error).
 *
 * Results:
 *	The result is TCL_ERROR, and an error message is left in
 *	the interp's result.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

int
TclpLoadFile(interp, fileName, sym1, sym2, proc1Ptr, proc2Ptr, clientDataPtr)
    Tcl_Interp *interp;		/* Used for error reporting. */
    char *fileName;		/* Name of the file containing the desired
				 * code. */
    char *sym1, *sym2;		/* Names of two procedures to look up in
				 * the file's symbol table. */
    Tcl_PackageInitProc **proc1Ptr, **proc2Ptr;
				/* Where to return the addresses corresponding
				 * to sym1 and sym2. */
    ClientData *clientDataPtr;	/* Filled with token for dynamically loaded
				 * file which will be passed back to 
				 * TclpUnloadFile() to unload the file. */
{
    Tcl_SetResult(interp,
	    "dynamic loading is not currently available on this system",
	    TCL_STATIC);
    return TCL_ERROR;
}

/*
 *----------------------------------------------------------------------
 *
 * TclGuessPackageName --
 *
 *	If the "load" command is invoked without providing a package
 *	name, this procedure is invoked to try to figure it out.
 *
 * Results:
 *	Always returns 0 to indicate that we couldn't figure out a
 *	package name;  generic code will then try to guess the package
 *	from the file name.  A return value of 1 would have meant that
 *	we figured out the package name and put it in bufPtr.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

int
TclGuessPackageName(fileName, bufPtr)
    char *fileName;		/* Name of file containing package (already
				 * translated to local form if needed). */
    Tcl_DString *bufPtr;	/* Initialized empty dstring.  Append
				 * package name to this if possible. */
{
    return 0;
}

/*
 *----------------------------------------------------------------------
 *
 * TclpUnloadFile --
 *
 *    This procedure is called to carry out dynamic unloading of binary
 *    code;  it is intended for use only on systems that don't support
 *    dynamic loading (it does nothing).
 *
 * Results:
 *    None.
 *
 * Side effects:
 *    None.
 *
 *----------------------------------------------------------------------
 */

void
TclpUnloadFile(clientData)
    ClientData clientData;    /* ClientData returned by a previous call
			       * to TclpLoadFile().  The clientData is 
			       * a token that represents the loaded 
			       * file. */
{
}

@


1.2
log
@forcing the timestamps.
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclLoadNone.c,v 1.1.1.1 2000/12/06 21:33:20 bparker Exp $
@


1.2.4.1
log
@sync branch with HEAD
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclLoadNone.c,v 1.2 2001/07/03 01:30:01 butler Exp $
@


1.2.6.1
log
@sync to HEAD...
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclLoadNone.c,v 1.2 2001/07/03 01:30:01 butler Exp $
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclLoadNone.c,v 1.4 1999/05/07 20:07:40 stanton Exp $
d113 1
@


1.1.1.1
log
@Import tcl8.3
@
text
@@
