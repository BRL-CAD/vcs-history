head	1.3;
access;
symbols
	ansi-20040316-freeze:1.2
	rel-6-1-DP:1.2
	rel-6-0-2:1.2
	rel-6-0-1-branch:1.2.0.2
	hartley-6-0-post:1.2
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	windows-6-0-branch:1.2.0.6
	ansi-6-0-branch:1.2.0.4
	tcl8-3:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.03.13.19.09.31;	author jra;	state dead;
branches;
next	1.2;

1.2
date	2001.04.20.22.30.04;	author morrison;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2000.12.06.21.33.21;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.33.21;	author bparker;	state Exp;
branches;
next	;

1.2.4.1
date	2004.03.17.07.14.04;	author morrison;	state dead;
branches;
next	;

1.2.6.1
date	2004.03.11.23.44.03;	author morrison;	state dead;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/* 
 * memcmp.c --
 *
 *	Source code for the "memcmp" library routine.
 *
 * Copyright (c) 1998 Sun Microsystems, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * SCCS: @@(#) memcmp.c 1.2 98/01/19 10:48:58
 */

#include "tcl.h"
#include "tclPort.h"

/*
 * Here is the prototype just in case it is not included
 * in tclPort.h.
 */

int		memcmp _ANSI_ARGS_((const VOID *s1,
			    const VOID *s2, size_t n));

/*
 *----------------------------------------------------------------------
 *
 * memcmp --
 *
 *	Compares two bytes sequences.
 *
 * Results:
 *     compares  its  arguments, looking at the first n
 *     bytes (each interpreted as an unsigned char), and  returns
 *     an integer less than, equal to, or greater than 0, accord-
 *     ing as s1 is less  than,  equal  to,  or
 *     greater than s2 when taken to be unsigned 8 bit numbers.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

int
memcmp(s1, s2, n)
    const VOID *s1;			/* First string. */
    const VOID *s2;			/* Second string. */
    size_t      n;                      /* Length to compare. */
{
    unsigned char u1, u2;

    for ( ; n-- ; s1++, s2++) {
	u1 = * (unsigned char *) s1;
	u2 = * (unsigned char *) s2;
	if ( u1 != u2) {
	    return (u1-u2);
	}
    }
    return 0;
}
@


1.2
log
@CONST to const
@
text
@@


1.2.4.1
log
@sync branch with HEAD
@
text
@@


1.2.6.1
log
@sync to HEAD...
@
text
@@


1.1
log
@Initial revision
@
text
@d22 2
a23 2
int		memcmp _ANSI_ARGS_((CONST VOID *s1,
			    CONST VOID *s2, size_t n));
d47 2
a48 2
    CONST VOID *s1;			/* First string. */
    CONST VOID *s2;			/* Second string. */
@


1.1.1.1
log
@Import tcl8.3
@
text
@@
