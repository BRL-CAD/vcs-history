head	11.5;
access;
symbols
	ansi-20040405-merged:11.3.2.1
	postmerge-20040405-ansi:11.4
	premerge-20040404-ansi:11.3
	postmerge-autoconf:11.3
	autoconf-freeze:11.3
	premerge-autoconf:11.3
	ansi-20040316-freeze:11.3.2.1
	postmerge-20040315-windows:11.3
	premerge-20040315-windows:11.3
	windows-20040315-freeze:11.3
	autoconf-20031203:11.3
	autoconf-20031202:11.3
	autoconf-branch:11.3.0.10
	phong-branch:11.3.0.8
	photonmap-branch:11.3.0.6
	rel-6-1-DP:11.3
	windows-branch:11.3.0.4
	rel-6-0-2:11.1
	ansi-branch:11.3.0.2
	rel-6-0-1-branch:11.1.0.4
	hartley-6-0-post:11.2
	hartley-6-0-pre:11.1
	rel-6-0-1:11.1
	rel-6-0:11.1
	rel-5-4:11.1
	offsite-5-3-pre:11.1
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:1.2;
locks; strict;
comment	@ * @;


11.5
date	2004.05.24.04.16.29;	author morrison;	state dead;
branches;
next	11.4;

11.4
date	2004.04.05.07.49.44;	author morrison;	state Exp;
branches;
next	11.3;

11.3
date	2002.08.20.17.07.20;	author jra;	state Exp;
branches
	11.3.2.1;
next	11.2;

11.2
date	2002.08.15.20.54.32;	author hartley;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.06.49;	author mike;	state Rel4_4;
branches;
next	1.2;

1.2
date	89.11.02.23.07.43;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	89.10.31.15.16.36;	author mike;	state Exp;
branches;
next	;

11.3.2.1
date	2002.09.19.18.00.33;	author morrison;	state Exp;
branches;
next	;


desc
@f2a.c
@


11.5
log
@moved to src/comgeom-g
@
text
@/* F 2 A () ====  convert float to ascii  w.df format.	No leading blanks */
f2a(float f, char *s, int w, int d)
     	  		/* INPUT	===*/
    	       		/* OUTPUT	===*/
   		     	/* length	===*/
{ int	c, i, j;
  long	n, sign;
	if( w <= d + 2 )
	{	printf( "ftoascii: incorrect format  need w.df\n");
		printf( "w must be at least 2 bigger then d.\n" );
		printf( "w= %f\t d= %f\n", w, d );
		printf( "STOP\n");
		exit( 10 );
	}
	for( i = 1; i <= d; i++ ) f = f * 10.0;	/* shift left.*/
	if( f < 0.0 )	f -= 0.5;		/* round up */
	else		f += 0.5;
	n = f;					/* truncate.*/
	if( (sign = n) < 0 )	n = -n;		/* get sign.*/
	i = 0;			/* CONVERT to ASCII.*/
	do {	s[i++] = n % 10 + '0';
		if( i == d )	s[i++] = '.';
	} while( (n /= 10) > 0 );
	if( i < d )		/* zero fill the d field if (f < 1).*/
	{	for( j = i; j < d; j++ )	s[j] = '0';
		s[j++] = '.';
		i = j;
	}
	if( sign < 0 )	s[i++] = '-';		/* apply sign.*/
	if( i > w )	printf("ftoascii: field length too small\n");
	w = i;					/* do not blank fill.*/
	for ( j = i; j < w; j++ ) s[j] = ' ';	/* blank fill.*/
	s[w] = '\0';
	for(	i = 0,	j = w - 1;		/* reverse the array.*/
		i < j;
		i++,	j-- )
	{	c    = s[i];	s[i] = s[j];	s[j] =    c;	}
}
@


11.4
log
@merge of ansi-6-0-branch into HEAD
@
text
@@


11.3
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d2 4
a5 4
f2a(	f, s,	w, d )
float	f;		/* INPUT	===*/
char	   s[];		/* OUTPUT	===*/
int		w, d;	/* length	===*/
@


11.3.2.1
log
@Initial ANSIfication
@
text
@d2 4
a5 4
f2a(float f, char *s, int w, int d)
     	  		/* INPUT	===*/
    	       		/* OUTPUT	===*/
   		     	/* length	===*/
@


11.2
log
@Converted from K&R to ANSI C - RFH
@
text
@d2 4
a5 4
f2a(float f, char *s, int w, int d)
     	  		/* INPUT	===*/
    	       		/* OUTPUT	===*/
   		     	/* length	===*/
@


11.1
log
@Release_4.4
@
text
@d2 4
a5 4
f2a(	f, s,	w, d )
float	f;		/* INPUT	===*/
char	   s[];		/* OUTPUT	===*/
int		w, d;	/* length	===*/
@


1.2
log
@Progress is being made
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 4
/* NOTE: the difference between f2a and f2ascii is that f2a has
not leading blanks.*/

/* F 2 A () ====  convert float to ascii  w.df format.	*/
a31 37
	for ( j = i; j < w; j++ ) s[j] = ' ';	/* blank fill.*/
	s[w] = '\0';
	for(	i = 0,	j = w - 1;		/* reverse the array.*/
		i < j;
		i++,	j-- )
	{	c    = s[i];	s[i] = s[j];	s[j] =    c;	}
}
/* F 2 A S C I I  () ====  convert float to ascii  w.df format.	*/
f2ascii(	f, s,	w, d )
float	f;		/* INPUT	===*/
char	   s[];		/* OUTPUT	===*/
int		w, d;	/* length	===*/
{ int	c, i, j;
  long	n, sign;
	if( w <= d + 2 )
	{	printf( "ftoascii: incorrect format  need w.df\n");
		printf( "w must be at least 2 bigger then d.\n" );
		printf( "w= %f\t d= %f\n", w, d );
		printf( "STOP\n");
		exit( 10 );
	}
	for( i = 1; i <= d; i++ ) f = f * 10.0;	/* shift left.*/
	if( f < 0.0 )	f -= 0.5;		/* round up */
	else		f += 0.5;
	n = f;					/* truncate.*/
	if( (sign = n) < 0 )	n = -n;		/* get sign.*/
	i = 0;			/* CONVERT to ASCII.*/
	do {	s[i++] = n % 10 + '0';
		if( i == d )	s[i++] = '.';
	} while( (n /= 10) > 0 );
	if( i < d )		/* zero fill the d field if (f < 1).*/
	{	for( j = i; j < d; j++ )	s[j] = '0';
		s[j++] = '.';
		i = j;
	}
	if( sign < 0 )	s[i++] = '-';		/* apply sign.*/
	if( i > w )	printf("ftoascii: field length too small\n");
@
