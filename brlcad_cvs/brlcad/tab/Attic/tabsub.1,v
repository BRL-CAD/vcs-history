head	11.6;
access;
symbols
	ansi-20040405-merged:11.4.6.1
	postmerge-20040405-ansi:11.5
	premerge-20040404-ansi:11.5
	postmerge-autoconf:11.5
	autoconf-freeze:11.5
	premerge-autoconf:11.5
	postmerge-20040315-windows:11.5
	premerge-20040315-windows:11.5
	windows-20040315-freeze:11.4.8.1
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.6
	phong-branch:11.5.0.4
	photonmap-branch:11.5.0.2
	rel-6-1-DP:11.4
	windows-branch:11.4.0.8
	rel-6-0-2:11.4
	ansi-branch:11.4.0.6
	rel-6-0-1-branch:11.4.0.4
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.4
	offsite-5-3-pre:11.4
	rel-5-3:11.4
	rel-5-2:11.4
	rel-5-1-branch:11.4.0.2
	rel-5-1:11.4
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1;
locks; strict;


11.6
date	2004.05.21.16.43.12;	author morrison;	state dead;
branches;
next	11.5;

11.5
date	2003.01.07.13.37.13;	author jra;	state Exp;
branches;
next	11.4;

11.4
date	2000.02.08.04.55.58;	author mike;	state Exp;
branches
	11.4.6.1
	11.4.8.1;
next	11.3;

11.3
date	2000.01.20.00.04.04;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	99.05.21.04.59.15;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.19.32;	author mike;	state Rel4_4;
branches;
next	1.4;

1.4
date	92.11.20.21.33.53;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	92.11.20.21.23.01;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	92.11.20.21.11.29;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	92.11.20.20.42.45;	author mike;	state Exp;
branches;
next	;

11.4.6.1
date	2004.03.17.21.23.03;	author morrison;	state Exp;
branches;
next	;

11.4.8.1
date	2004.03.11.23.48.35;	author morrison;	state Exp;
branches;
next	;


desc
@Manual page for tabsub
@


11.6
log
@moved to src/tab/
@
text
@.\" $Header: /n/xoff/cvs/brlcad/tab/tabsub.1,v 11.5 2003/01/07 13:37:13 jra Exp $
.TH TABSUB 1 BRL-CAD
.SH NAME
tabsub \- macro expand an input table into an animation script
.SH SYNOPSIS
.B tabsub
.B template_file
.B <table.final
.B >>script
.SH DESCRIPTION
.I tabsub
takes as input a data table on standard input
(such as might have been produced by
.IR tabinterp (1)
or similar tool),
and a template file named on the command line.
For each row (line) of the input table, one complete copy of
the template file is output on standard output.
As the template is output,
any macro invocations in the template file are replaced with
the data values from the input table's current row.
In the input table, any blank lines or lines with a pound sign ('#')
as the first character are ignored, allowing comments to be
added to the input table.
.PP
Macro invocations in the template file all begin with an at-sign ('@@').
In order to send an at-sign through to the output, a second at-sign
must immediately follow it, \fIe.g.\fR when '@@@@' is encountered in the
template, a single '@@' is output.
To output the data value found in a given channel in the current
input row of the data table, the at-sign is followed by the channel
number, \fIe.g.\fR to output the value in channel four, specify '@@4',
and to output the value in channel 42, specify '@@42'.
In some circumstances it my be desirable to highlight the difference
between channel value substitution, and literal numeric values.
To facilitate this, the channel number may be enclosed in parenthesis
to explicitly delimit the macro invocation.  For example, channel
four could also be specified as '@@(4)', and channel 42 as '@@(42)'.
This second notation is generally preferred.
.PP
The
.I tabsub
program is intended primarily for creating scripts relating to animation.
To facilitate this, a variety of more complex macros also exist.
.sp .5
   @@(line)
.sp .5
will output the row (line) number of the input table which is currently
being processed, with the first line being numbered zero.
This is useful for creating frame numbers, or other sequence tags
in the output.
.sp .5
   @@(time)
.sp .5
will output the time value which is always found in the left-most column
of the current row.
.PP
The more complex macros can also take arguments.
If the first character of an argument is an at-sign ('@@')
(or percent-sign ('%'), for backwards compatibility), then
the number that follows signifies an input channel substitution
as before.  Otherwise the value is taken literally.
.PP
The
.B rot
macro is used to convert three Euler angles given in degrees
into a rotation expressed as a
4x4 homogeneous transformation matrix.
.sp .5
   @@(rot x_angle y_angle z_angle)
.sp .5
The arguments may be either numeric constants, column value macros,
or a combination of both.
The matrix is generated by calling the
.IR libbn (3)
routine
.B bn_mat_angles
which performs the rotation around the Z axis first, then Y, then X.
For example, the macro
.sp .5
   @@(rot 0 0 45)
.sp .5
creates the following matrix, a 45 degree rotation about Z:
.sp .5
.nf
.ne 4
7.071067812e-01 -7.071067812e-01 0.000000000e+00 0.000000000e+00
7.071067812e-01 7.071067812e-01 -0.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 1.000000000e+00 0.000000000e+00
0.000000000e+00 0.000000000e+00 0.000000000e+00 1.000000000e+00
.fi
.sp .5
Similarly, the macro
.sp .5
   @@(rot @@4 @@5 90)
.sp .5
creates a rotation matrix where the angle of rotation around X is
taken from input channel four, the Y angle is taken from input channel five,
and the Z angle is fixed at 90 degrees.
.PP
The
.B xlate
macro converts three distances (which must be
specified in millimeters if the output script is destined for
processing by
.IR rt (1)
or
.IR mged (1))
into a translation expressed as a
4x4 homogeneous transformation matrix.
.sp .5
   @@(xlate dx dy dz)
.sp .5
The matrix is generated by invoking the C macro
.B MAT_DELTAS
found in h/vmath.h.
For example, the macro
.sp .5
   @@(xlate 100 -20 300)
creates the following matrix:
.sp .5
.nf
1.000000000e+00 0.000000000e+00 0.000000000e+00 1.000000000e+02
0.000000000e+00 1.000000000e+00 0.000000000e+00 -2.000000000e+01
0.000000000e+00 0.000000000e+00 1.000000000e+00 3.000000000e+02
0.000000000e+00 0.000000000e+00 0.000000000e+00 1.000000000e+00
.fi
.sp .5
Similarly, the macro
.sp .5
  @@(xlate 13 @@7 0)
.sp .5
creates a matrix where the origin is translated 13 units (mm) in X,
and the number of units found in input channel 7 in Y.
No translation occurs in Z.
.PP
The
.B orient
macro combines the operation of the
.B rot
zand
.B xlate
macros, and also offers optional scaling.
The invocation is one of:
.sp .5
   @@(orient tx ty tz rx ry rz)
.br
   @@(orient tx ty tz rx ry rz scale)
.sp .5
where all rotation is done first, then the translation,
and then the scaling (if given).
.PP
The
.B ae
command converts
.IR mged (1)
style azimuth and elevation angle given in degrees
into a rotation expressed as a
4x4 homogeneous transformation matrix.
.sp .5
   @@(ae azimuth elevation)
.sp .5
The matrix is generated by calling the
.IR libbn (3)
routine
.B bn_mat_ae
.PP
The
.B arb_rot_pt
command generates an arbitrary rotation matrix, expressed
as a center of rotation, a second point defining the axis of
rotation, and an angle of rotation expressed as an angle in degrees
into a rotation expressed as a
4x4 homogeneous transformation matrix.
.sp .5
   @@(arb_rot_pt p1[x] p1[y] p1[z] p2[x] p2[x] p2[z] ang)
.sp .5
The matrix is generated by calling the
.IR libbn (3)
routine
.B bn_mat_arb_rot
.PP
The
.B arb_rot_dir
command generates an arbitrary rotation matrix, expressed
as a center of rotation, a direction vector defining the axis of rotation,
and an angle of rotation expressed as an angle in degrees
into a rotation expressed as a
4x4 homogeneous transformation matrix.
The direction vector need not be unit length.
.sp .5
   @@(arb_rot_pt pt[x] pt[y] pt[z] dir[x] dir[x] dir[z] ang)
.sp .5
The matrix is generated by calling the
.IR libbn (3)
routine
.B bn_mat_arb_rot
.PP
The
.B quat
command converts a quaternion into a
4x4 homogeneous transformation matrix.
.sp .5
   @@(quat x y z w)
.sp .5
.PP
The
.B fromto
command is used to rotate the given axis to point in the same direction
as the vector formed by subtracting the 'next' point from the 'cur' point.
.sp .5
   @@(fromto axis cur_x cur_y cur_z next_x next_y next_z)
.sp .5
The
.I axis
argument must be one of these six strings:
\fI+X, -X, +Y, -Y, +Z, -Z\fR,
where the axis letter is capitalized.
The matrix is generated by calling the
.IR libbn (3)
routine
.B bn_mat_fromto
where the 'from' argument is derived from the
.I axis
given, and the 'to' argument is the unit-length difference 'next'-'cur'.
.SH "RT SCRIPT-LANGUAGE BUILT-INS"
.PP
It is worth noting that the "anim" command in the
.IR rt (1)
animation scripting language
also offers some of these capabilities via built-in shortcuts.
In addition to being able to provide the full 4x4 matrix as an
argument to the "anim ... matrix" command, there are special
keywords:
"xlate", "translate" which take 3 arguments
and pass them to the macro MAT_DELTAS,
"rot" which takes 3 arguments and passes them to bn_mat_angles(),
"scale" which takes one argument as a uniform scale factor
(e.g. a value of 2 makes the subtree twice as large, scaled around
the origin)
and
"scale_about" which passes 4 arguments (point and scale factor)
and calls bn_mat_scale_about_pt().
An example of making an ellipse 1/5th the original size looks like this:
.sp .5
   anim ellipse.r/ellipse.s matrix rarc
      scale_about 16.1309 46.6556 -3.72252    0.2;
.sp .5
.SH EXAMPLE1
.PP
Based upon the example started in the manual page for
.IR tabinterp (1),
here is a Bourne shell script which will generate the
necessary template file using a ``here document'',
and then process the 8-channel output table
left in the file "table.final".
.sp .5
.nf
#!/bin/sh
# This template will be instantiated once for each frame to be made.
cat << EOF > template

start @@(line);
clean;
lookat_pt @@(3) @@(4) @@(5);
viewsize @@(7);
anim all.g/actor.g matrix rmul
 @@(xlate @@0 @@1 @@2);
anim all.g/light.r material rparam 
 inten=@@(6) angle=70 invisible=1;
end;
! framedone.sh actor.pix.@@(line);

EOF
# This is the start of the animation script, which will be appended to below.
cat << EOF > script
viewsize 3000;
eye_pt -4.429280979044739e+03 -1.633722950749571e+03 -1.624787858562220e+03;
orientation 5.435778713738288e-01 4.980973490458696e-01 4.564221286261679e-01 4.980973490458693e-01;
#frame data follows
EOF
# Append the data for each frame
tabsub ./template < table.final >> script
.fi
.sp .5
.PP
The frame number is taken from the input table line number,
and substituted into the
.I start
command.
The main actor position is taken from channels 0,1,2 and applied
(as an "articulation") to the matrix located along the arc between
"all.g" and "actor.g" in the
.I mged
database.
The camera (eye) position stays fixed for this animation, but the
camera orientation is changed by substituting channels 3,4,5 into the
.I lookat_pt
command, and the viewsize (zoom lens setting) is changed by substituting
channel 7 into the
.I viewsize
command.
The argument to the light region's material property string
is replaced with a new string that spells out the current light parameters.
After the
.I end
command, a
.IR rt (1)
shell escape is constructed, which will run a script called
"framedone.sh" with the given argument (which has been arranged
to be the file name of the
.IR pix (5)
file that
.IR rt (1)
just wrote, so that it can be post-processed, compressed,
sent to a video recorder, etc.
.PP
Try clipping this example out of the manual page
(usually found in /usr/brlcad/man/man1/tabsub.1)
and running it.
.SH EXAMPLE2
.PP
In the
.IR tabinterp (1)
manual page, mention was made of animating the flight of a rocket.
This partial example outlines how that might be accomplished.
.sp .5
.nf
tabinterp << EOF > rocket.final
# Channel allocations:
#   0,1,2	position of base of rocket
#   3,4,5	next position of base of rocket
#
# Input table column allocations:  time, X, Y, Z
file rocket.table 0 1 2;
#
times 0 4 60;
#
# Assign interpolators to output channels
interp spline 0 1 2;
#
# Get +1 "look ahead" on values, for auto-guidance
next 3 0 1;
next 4 1 1;
next 5 2 1;
EOF
cat << EOF > rocket.template

start @@(line);
clean;
anim all.g/rot.g matrix rmul
 @@(xlate @@0 @@1 @@2);
anim rot.g/rocket.g matrix rmul
  @@(fromto +Z @@0 @@1 @@2 @@3 @@4 @@5);
end;
EOF
tabsub ./rocket.template < rocket.final >> script
.fi
.sp .5
.PP
The items worthy of note are the use of the
.IR tabinterp (1)
.B next
command to place the position look-ahead into channels 3,4,5
and the matching use of the
.I tabsub
.B fromto
macro to convert the current and next positions into an
appropriate rotation.
In this case, the central axis of the rocket as found in the
.IR mged (1)
database rises up the +Z axis.
Translating the rocket into position is handled one matrix
higher up the tree, using the
.B xlate
macro.
.SH "POST PROCESSING"
.PP
.I rt
style animation scripts can be processed by
.IR rt (1)
and
.IR remrt (1)
by giving the
.B \-M
option on the command line, and providing the script on standard input.
For example, the rocket animation might be run like this:
.sp .5
rt -M -V4:3 -w1440 -n972 -p90 -o rocket.pix rocket.g all.g < script
.sp .5
to produce images in NTSC ("Academy" 4:3) aspect ratio at double the
normal resolution, suitable for later processing by
.IR pixhalve (1).
.PP
The same animation can be previewed in near real-time using
.IR mged (1).
For this example,
.IR mged (1)
would be started with
.sp .5
   mged rocket.g
.sp .5
followed by attaching to an appropriate display device.
Then, these commands would be given:
.sp .5
   e all.g
   preview script
.sp .5
.IR mged (1)
will process each frame as fast as it can, and update the screen.
.SH "SEE ALSO"
tabinterp(1), xyz-pl(1), txyz-pl(1), cut(1), paste(1), rt(1), mged(1)
.SH BUGS
There is presently a compiled-in
limit of 1023 channels in the input table.
.SH AUTHOR
Michael John Muuss
.SH SOURCE
The U. S. Army Research Laboratory
.br
Aberdeen Proving Ground, Maryland  21005
.SH "BUG REPORTS"
Reports of bugs or problems should be submitted via electronic
mail to <CAD@@ARL.ARMY.MIL>.
@


11.5
log
@Corrected email address
@
text
@d1 1
a1 1
.\" $Header: /c/CVS/brlcad/tab/tabsub.1,v 11.4 2000/02/08 04:55:58 mike Exp $
@


11.4
log
@
Added documentation on "anim scale" directive
@
text
@d1 1
a1 1
.\" $Header: /c/CVS/brlcad/tab/tabsub.1,v 11.3 2000/01/20 00:04:04 mike Exp $
d424 1
a424 1
mail to <CAD@@BRL.MIL>.
@


11.4.6.1
log
@sync branch with HEAD
@
text
@d1 1
a1 1
.\" $Header$
d424 1
a424 1
mail to <CAD@@ARL.ARMY.MIL>.
@


11.4.8.1
log
@sync to HEAD...
@
text
@d1 1
a1 1
.\" $Header: /n/cad/c/CVS/brlcad/tab/tabsub.1,v 11.5 2003/01/07 13:37:13 jra Exp $
d424 1
a424 1
mail to <CAD@@ARL.ARMY.MIL>.
@


11.3
log
@
Added notes about the script language built-ins.
@
text
@d1 1
a1 1
.\" $Header: /c/CVS/brlcad/tab/tabsub.1,v 11.2 1999/05/21 04:59:15 mike Exp $
d238 3
d244 1
a244 1
An example looks like this:
@


11.2
log
@
Added two new commands to tabsub, mirroring the routine bn_mat_arb_rot().
@
text
@d1 1
a1 1
.\" $Header: /c/CVS/brlcad/tab/tabsub.1,v 11.1 1995/01/04 10:19:32 mike Rel4_4 $
d226 20
@


11.1
log
@Release_4.4
@
text
@d1 1
a1 1
.\" $Header: /m/cad/tab/RCS/tabsub.1,v 1.4 92/11/20 21:33:53 mike Exp $
d75 1
a75 1
.IR librt (3)
d77 1
a77 1
.B mat_angles
d164 1
a164 1
.IR librt (3)
d166 32
a197 1
.B mat_ae
d220 1
a220 1
.IR librt (3)
d222 1
a222 1
.B mat_fromto
@


1.4
log
@Added missing animation for channel 6.
@
text
@d1 1
a1 1
.\" $Header: /m/cad/tab/RCS/tabsub.1,v 1.3 92/11/20 21:23:01 mike Exp Locker: mike $
@


1.3
log
@Minor typos fixed
@
text
@d1 1
a1 1
.\" $Header: /m/cad/tab/RCS/tabsub.1,v 1.2 92/11/20 21:11:29 mike Exp Locker: mike $
d215 2
d249 2
@


1.2
log
@First pass
@
text
@d1 1
a1 1
.\" $Header: /m/cad/tab/RCS/tabsub.1,v 1.1 92/11/20 20:42:45 mike Exp Locker: mike $
d36 1
a36 1
To facilitate this, the channel number may be enclosed in parenthesies
d60 1
a60 1
(or percent-sign ('%'), for backwards compatability), then
d82 1
d86 1
d104 1
a104 1
specified in milimeters if the output script is destined for
d134 1
a134 1
the numeber of units found in input channel 7 in Y.
d194 1
a194 2
given, and the 'to' argument is the unit-length difference
'next'-'cur'.
d303 1
a303 1
The items worty of note are the use of the
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\" $Header: /m/cad/tab/RCS/tabsub.1,v 1.4 92/11/20 19:16:27 mike Exp $
d229 1
d258 4
d263 26
d290 62
a351 1

a353 6
.SH DIAGNOSTICS
In it's present form, the program is a bit verbose, reporting
on the progress of each command on standard error.
This behavior will probably be placed under control of a
.B \-v
flag in a future version.
d355 2
a356 3
You can't
.I grep
dead trees.
@
