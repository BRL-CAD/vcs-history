head	11.8;
access;
symbols
	ansi-20040405-merged:11.5.2.1
	postmerge-20040405-ansi:11.6
	premerge-20040404-ansi:11.5
	postmerge-autoconf:11.5
	autoconf-freeze:11.5
	premerge-autoconf:11.5
	ansi-20040316-freeze:11.5.2.1
	postmerge-20040315-windows:11.5
	premerge-20040315-windows:11.5
	windows-20040315-freeze:11.5
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.2
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.2
	offsite-5-3-pre:11.3
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.8
date	2004.05.21.18.07.25;	author morrison;	state dead;
branches;
next	11.7;

11.7
date	2004.05.10.15.30.45;	author erikg;	state Exp;
branches;
next	11.6;

11.6
date	2004.04.05.07.44.42;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.07.46;	author jra;	state Exp;
branches
	11.5.2.1;
next	11.4;

11.4
date	2002.08.15.20.55.00;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	2000.07.12.01.33.30;	author cjohnson;	state Exp;
branches;
next	11.2;

11.2
date	98.06.27.04.29.16;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.52.52;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.12.20.24.57;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.37.24;	author mike;	state Rel4_0;
branches;
next	9.6;

9.6
date	91.07.26.22.41.02;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	91.07.18.16.30.31;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	91.01.03.02.53.18;	author phil;	state Exp;
branches;
next	9.3;

9.3
date	90.12.11.22.18.56;	author phil;	state Exp;
branches;
next	9.2;

9.2
date	89.09.01.01.39.25;	author phil;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.47.53;	author mike;	state Rel3_5;
branches;
next	8.2;

8.2
date	89.03.03.05.54.28;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.27.31;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.09.09.23.00.34;	author phil;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.26.28;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.51.25;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.21.51.27;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.12.22.06.30;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.42.43;	author mike;	state Rel1;
branches;
next	1.8;

1.8
date	86.11.28.20.21.22;	author phil;	state Exp;
branches;
next	1.7;

1.7
date	86.11.14.04.35.59;	author phil;	state Exp;
branches;
next	1.6;

1.6
date	86.11.12.16.08.31;	author phil;	state Exp;
branches;
next	1.5;

1.5
date	86.10.29.02.51.35;	author phil;	state Exp;
branches;
next	1.4;

1.4
date	86.10.25.10.50.40;	author phil;	state Exp;
branches;
next	1.3;

1.3
date	86.10.24.03.36.50;	author phil;	state Exp;
branches;
next	1.2;

1.2
date	86.10.06.22.39.56;	author phil;	state Exp;
branches;
next	1.1;

1.1
date	86.10.02.02.17.44;	author mike;	state Exp;
branches;
next	;

11.5.2.1
date	2002.09.19.18.01.19;	author morrison;	state Exp;
branches;
next	;


desc
@Debugging interface
@


11.8
log
@moved to src/
@
text
@/*
 *		I F _ D E B U G
 *
 *  Reports all calls to fb_log().
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libfb/if_debug.c,v 11.7 2004/05/10 15:30:45 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <ctype.h>

#include "machine.h"
#include "fb.h"
#include "./fblocal.h"

_LOCAL_ int	deb_open(FBIO *ifp, char *file, int width, int height),
		deb_close(FBIO *ifp),
		deb_clear(FBIO *ifp, RGBpixel (*pp)),
		deb_read(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count),
		deb_write(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count),
		deb_rmap(FBIO *ifp, ColorMap *cmp),
		deb_wmap(FBIO *ifp, ColorMap *cmp),
		deb_view(FBIO *ifp, int xcenter, int ycenter, int xzoom, int yzoom),
		deb_getview(FBIO *ifp, int *xcenter, int *ycenter, int *xzoom, int *yzoom),
		deb_setcursor(FBIO *ifp, unsigned char *bits, int xbits, int ybits, int xorig, int yorig),
		deb_cursor(FBIO *ifp, int mode, int x, int y),
		deb_getcursor(FBIO *ifp, int *mode, int *x, int *y),
		deb_readrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_writerect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_bwreadrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_bwwriterect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_poll(FBIO *ifp),
		deb_flush(FBIO *ifp),
		deb_free(FBIO *ifp),
		deb_help(FBIO *ifp);

/* This is the ONLY thing that we "export" */
FBIO debug_interface = {
	0,
	deb_open,
	deb_close,
	deb_clear,
	deb_read,
	deb_write,
	deb_rmap,
	deb_wmap,
	deb_view,
	deb_getview,
	deb_setcursor,
	deb_cursor,
	deb_getcursor,
	deb_readrect,
	deb_writerect,
	deb_bwreadrect,
	deb_bwwriterect,
	deb_poll,
	deb_flush,
	deb_free,
	deb_help,
	"Debugging Interface",
	32*1024,		/* max width */
	32*1024,		/* max height */
	"/dev/debug",
	512,			/* current/default width */
	512,			/* current/default height */
	-1,			/* select fd */
	-1,			/* file descriptor */
	1, 1,			/* zoom */
	256, 256,		/* window center */
	0, 0, 0,		/* cursor */
	PIXEL_NULL,		/* page_base */
	PIXEL_NULL,		/* page_curp */
	PIXEL_NULL,		/* page_endp */
	-1,			/* page_no */
	0,			/* page_ref */
	0L,			/* page_curpos */
	0L,			/* page_pixels */
	0			/* debug */
};

_LOCAL_ int
deb_open(FBIO *ifp, char *file, int width, int height)
{
	FB_CK_FBIO(ifp);
	if( file == (char *)NULL )
		fb_log( "fb_open( 0x%lx, NULL, %d, %d )\n",
			(unsigned long)ifp, width, height );
	else
		fb_log( "fb_open( 0x%lx, \"%s\", %d, %d )\n",
			(unsigned long)ifp, file, width, height );

	/* check for default size */
	if( width <= 0 )
		width = ifp->if_width;
	if( height <= 0 )
		height = ifp->if_height;

	/* set debug bit vector */
	if( file != NULL ) {
		char *cp;
		for( cp = file; *cp != '\0' && !isdigit(*cp); cp++ ) ;
		sscanf( cp, "%d", &ifp->if_debug );
	} else {
		ifp->if_debug = 0;
	}

	/* Give the user whatever width was asked for */
	ifp->if_width = width;
	ifp->if_height = height;

	return	0;
}

_LOCAL_ int
deb_close(FBIO *ifp)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_close( 0x%lx )\n", (unsigned long)ifp );
	return	0;
}

_LOCAL_ int
deb_clear(FBIO *ifp, RGBpixel (*pp))
{
	FB_CK_FBIO(ifp);
	if( pp == 0 )
		fb_log( "fb_clear( 0x%lx, NULL )\n", (unsigned long)ifp );
	else
		fb_log( "fb_clear( 0x%lx, &[%d %d %d] )\n",
			(unsigned long)ifp,
			(int)((*pp)[RED]), (int)((*pp)[GRN]),
			(int)((*pp)[BLU]) );
	return	0;
}

_LOCAL_ int
deb_read(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_read( 0x%lx,%4d,%4d, 0x%lx, %d )\n",
		(unsigned long)ifp, x, y,
		(unsigned long)pixelp, count );
	return	count;
}

_LOCAL_ int
deb_write(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count)
{
	int	i;

	FB_CK_FBIO(ifp);
	fb_log( "fb_write( 0x%lx,%4d,%4d, 0x%lx, %d )\n",
		(unsigned long)ifp, x, y,
		(unsigned long)pixelp, count );

	/* write them out, four per line */
	if( ifp->if_debug & FB_DEBUG_RW ) {
		for( i = 0; i < count; i++ ) {
			if( i % 4 == 0 )
				fb_log( "%4d:", i );
			fb_log( "  [%3d,%3d,%3d]", pixelp[i][RED],
				pixelp[i][GRN], pixelp[i][BLU] );
			if( i % 4 == 3 )
				fb_log( "\n" );
		}
		if( i % 4 != 0 )
			fb_log( "\n" );
	}

	return	count;
}

_LOCAL_ int
deb_rmap(FBIO *ifp, ColorMap *cmp)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_rmap( 0x%lx, 0x%lx )\n",
		(unsigned long)ifp, (unsigned long)cmp );
	return	0;
}

_LOCAL_ int
deb_wmap(FBIO *ifp, ColorMap *cmp)
{
	int	i;

	FB_CK_FBIO(ifp);
	if( cmp == NULL )
		fb_log( "fb_wmap( 0x%lx, NULL )\n",
			(unsigned long)ifp );
	else
		fb_log( "fb_wmap( 0x%lx, 0x%lx )\n",
			(unsigned long)ifp, (unsigned long)cmp );

	if( ifp->if_debug & FB_DEBUG_CMAP && cmp != NULL ) {
		for( i = 0; i < 256; i++ ) {
			fb_log( "%3d: [ 0x%4lx, 0x%4lx, 0x%4lx ]\n",
				i,
				(unsigned long)cmp->cm_red[i],
				(unsigned long)cmp->cm_green[i],
				(unsigned long)cmp->cm_blue[i] );
		}
	}

	return	0;
}

_LOCAL_ int
deb_view(FBIO *ifp, int xcenter, int ycenter, int xzoom, int yzoom)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_view( 0x%lx,%4d,%4d,%4d,%4d )\n",
		(unsigned long)ifp, xcenter, ycenter, xzoom, yzoom );
	fb_sim_view( ifp, xcenter, ycenter, xzoom, yzoom );
	return	0;
}

_LOCAL_ int
deb_getview(FBIO *ifp, int *xcenter, int *ycenter, int *xzoom, int *yzoom)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_getview( 0x%lx, 0x%x, 0x%x, 0x%x, 0x%x )\n",
		(unsigned long)ifp, xcenter, ycenter, xzoom, yzoom );
	fb_sim_getview( ifp, xcenter, ycenter, xzoom, yzoom );
	fb_log( " <= %d %d %d %d\n",
		*xcenter, *ycenter, *xzoom, *yzoom );
	return	0;
}

_LOCAL_ int
deb_setcursor(FBIO *ifp, unsigned char *bits, int xbits, int ybits, int xorig, int yorig)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_setcursor( 0x%lx, 0x%lx, %d, %d, %d, %d )\n",
		(unsigned long)ifp, bits, xbits, ybits, xorig, yorig );
	return	0;
}

_LOCAL_ int
deb_cursor(FBIO *ifp, int mode, int x, int y)
{
	fb_log( "fb_cursor( 0x%lx, %d,%4d,%4d )\n",
		(unsigned long)ifp, mode, x, y );
	fb_sim_cursor( ifp, mode, x, y );
	return	0;
}

_LOCAL_ int
deb_getcursor(FBIO *ifp, int *mode, int *x, int *y)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_getcursor( 0x%lx, 0x%x,0x%x,0x%x )\n",
		(unsigned long)ifp, mode, x, y );
	fb_sim_getcursor( ifp, mode, x, y );
	fb_log( " <= %d %d %d\n", *mode, *x, *y );
	return	0;
}

_LOCAL_ int
deb_readrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_readrect( 0x%lx, (%4d,%4d), %4d,%4d, 0x%lx )\n",
		(unsigned long)ifp, xmin, ymin, width, height,
		(unsigned long)pp );
	return( width*height );
}

_LOCAL_ int
deb_writerect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_writerect( 0x%lx,%4d,%4d,%4d,%4d, 0x%lx )\n",
		(unsigned long)ifp, xmin, ymin, width, height,
		(unsigned long)pp );
	return( width*height );
}

_LOCAL_ int
deb_bwreadrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_bwreadrect( 0x%lx, (%4d,%4d), %4d,%4d, 0x%lx )\n",
		(unsigned long)ifp, xmin, ymin, width, height,
		(unsigned long)pp );
	return( width*height );
}

_LOCAL_ int
deb_bwwriterect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_bwwriterect( 0x%lx,%4d,%4d,%4d,%4d, 0x%lx )\n",
		(unsigned long)ifp, xmin, ymin, width, height,
		(unsigned long)pp );
	return( width*height );
}

_LOCAL_ int
deb_poll(FBIO *ifp)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_poll( 0x%lx )\n", (unsigned long)ifp );
	return	0;
}

_LOCAL_ int
deb_flush(FBIO *ifp)
{
	FB_CK_FBIO(ifp);
	fb_log( "if_flush( 0x%lx )\n", (unsigned long)ifp );
	return	0;
}

_LOCAL_ int
deb_free(FBIO *ifp)
{
	FB_CK_FBIO(ifp);
	fb_log( "fb_free( 0x%lx )\n", (unsigned long)ifp );
	return	0;
}

/*ARGSUSED*/
_LOCAL_ int
deb_help(FBIO *ifp)
{
	FB_CK_FBIO(ifp);
	fb_log( "Description: %s\n", debug_interface.if_type );
	fb_log( "Device: %s\n", ifp->if_name );
	fb_log( "Max width/height: %d %d\n",
		debug_interface.if_max_width,
		debug_interface.if_max_height );
	fb_log( "Default width/height: %d %d\n",
		debug_interface.if_width,
		debug_interface.if_height );
	fb_log( "\
Usage: /dev/debug[#]\n\
  where # is a optional bit vector from:\n\
    1    debug buffered I/O calls\n\
    2    show colormap entries in rmap/wmap calls\n\
    4    show actual pixel values in read/write calls\n" );
	/*8    buffered read/write values - ifdef'd out*/

	return	0;
}
@


11.7
log
@change conf.h to a wrapped config.h
@
text
@d7 1
a7 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libfb/if_debug.c,v 11.6 2004/04/05 07:44:42 morrison Exp $ (BRL)";
@


11.6
log
@merge of ansi-6-0-branch into HEAD
@
text
@d7 1
a7 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d10 5
a14 1
#include "conf.h"
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d7 1
a7 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libfb/if_debug.c,v 11.3 2000/07/12 01:33:30 cjohnson Exp $ (BRL)";
d19 20
a38 20
_LOCAL_ int	deb_open(),
		deb_close(),
		deb_clear(),
		deb_read(),
		deb_write(),
		deb_rmap(),
		deb_wmap(),
		deb_view(),
		deb_getview(),
		deb_setcursor(),
		deb_cursor(),
		deb_getcursor(),
		deb_readrect(),
		deb_writerect(),
		deb_bwreadrect(),
		deb_bwwriterect(),
		deb_poll(),
		deb_flush(),
		deb_free(),
		deb_help();
d85 1
a85 4
deb_open( ifp, file, width, height )
FBIO	*ifp;
char	*file;
int	width, height;
d118 1
a118 2
deb_close( ifp )
FBIO	*ifp;
d126 1
a126 3
deb_clear( ifp, pp )
FBIO	*ifp;
RGBpixel	*pp;
d140 1
a140 5
deb_read( ifp, x, y, pixelp, count )
FBIO	*ifp;
int	x, y;
RGBpixel	*pixelp;
int	count;
d150 1
a150 5
deb_write( ifp, x, y, pixelp, count )
FBIO	*ifp;
int	x, y;
RGBpixel	*pixelp;
int	count;
d177 1
a177 3
deb_rmap( ifp, cmp )
FBIO	*ifp;
ColorMap	*cmp;
d186 1
a186 3
deb_wmap( ifp, cmp )
FBIO	*ifp;
ColorMap	*cmp;
d212 1
a212 4
deb_view( ifp, xcenter, ycenter, xzoom, yzoom )
FBIO	*ifp;
int	xcenter, ycenter;
int	xzoom, yzoom;
d222 1
a222 4
deb_getview( ifp, xcenter, ycenter, xzoom, yzoom )
FBIO	*ifp;
int	*xcenter, *ycenter;
int	*xzoom, *yzoom;
d234 1
a234 5
deb_setcursor( ifp, bits, xbits, ybits, xorig, yorig )
FBIO	*ifp;
unsigned char *bits;
int	xbits, ybits;
int	xorig, yorig;
d243 1
a243 4
deb_cursor( ifp, mode, x, y )
FBIO	*ifp;
int	mode;
int	x, y;
d252 1
a252 4
deb_getcursor( ifp, mode, x, y )
FBIO	*ifp;
int	*mode;
int	*x, *y;
d263 1
a263 5
deb_readrect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
d273 1
a273 5
deb_writerect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
d283 1
a283 5
deb_bwreadrect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
d293 1
a293 5
deb_bwwriterect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
d303 1
a303 2
deb_poll( ifp )
FBIO	*ifp;
d311 1
a311 2
deb_flush( ifp )
FBIO	*ifp;
d319 1
a319 2
deb_free( ifp )
FBIO	*ifp;
d328 1
a328 2
deb_help( ifp )
FBIO	*ifp;
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d7 1
a7 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libfb/if_debug.c,v 11.5 2002/08/20 17:07:46 jra Exp $ (BRL)";
d19 20
a38 20
_LOCAL_ int	deb_open(FBIO *ifp, char *file, int width, int height),
		deb_close(FBIO *ifp),
		deb_clear(FBIO *ifp, RGBpixel (*pp)),
		deb_read(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count),
		deb_write(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count),
		deb_rmap(FBIO *ifp, ColorMap *cmp),
		deb_wmap(FBIO *ifp, ColorMap *cmp),
		deb_view(FBIO *ifp, int xcenter, int ycenter, int xzoom, int yzoom),
		deb_getview(FBIO *ifp, int *xcenter, int *ycenter, int *xzoom, int *yzoom),
		deb_setcursor(FBIO *ifp, unsigned char *bits, int xbits, int ybits, int xorig, int yorig),
		deb_cursor(FBIO *ifp, int mode, int x, int y),
		deb_getcursor(FBIO *ifp, int *mode, int *x, int *y),
		deb_readrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_writerect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_bwreadrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_bwwriterect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_poll(FBIO *ifp),
		deb_flush(FBIO *ifp),
		deb_free(FBIO *ifp),
		deb_help(FBIO *ifp);
d85 4
a88 1
deb_open(FBIO *ifp, char *file, int width, int height)
d121 2
a122 1
deb_close(FBIO *ifp)
d130 3
a132 1
deb_clear(FBIO *ifp, RGBpixel (*pp))
d146 5
a150 1
deb_read(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count)
d160 5
a164 1
deb_write(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count)
d191 3
a193 1
deb_rmap(FBIO *ifp, ColorMap *cmp)
d202 3
a204 1
deb_wmap(FBIO *ifp, ColorMap *cmp)
d230 4
a233 1
deb_view(FBIO *ifp, int xcenter, int ycenter, int xzoom, int yzoom)
d243 4
a246 1
deb_getview(FBIO *ifp, int *xcenter, int *ycenter, int *xzoom, int *yzoom)
d258 5
a262 1
deb_setcursor(FBIO *ifp, unsigned char *bits, int xbits, int ybits, int xorig, int yorig)
d271 4
a274 1
deb_cursor(FBIO *ifp, int mode, int x, int y)
d283 4
a286 1
deb_getcursor(FBIO *ifp, int *mode, int *x, int *y)
d297 5
a301 1
deb_readrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
d311 5
a315 1
deb_writerect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
d325 5
a329 1
deb_bwreadrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
d339 5
a343 1
deb_bwwriterect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
d353 2
a354 1
deb_poll(FBIO *ifp)
d362 2
a363 1
deb_flush(FBIO *ifp)
d371 2
a372 1
deb_free(FBIO *ifp)
d381 2
a382 1
deb_help(FBIO *ifp)
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d19 20
a38 20
_LOCAL_ int	deb_open(FBIO *ifp, char *file, int width, int height),
		deb_close(FBIO *ifp),
		deb_clear(FBIO *ifp, RGBpixel (*pp)),
		deb_read(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count),
		deb_write(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count),
		deb_rmap(FBIO *ifp, ColorMap *cmp),
		deb_wmap(FBIO *ifp, ColorMap *cmp),
		deb_view(FBIO *ifp, int xcenter, int ycenter, int xzoom, int yzoom),
		deb_getview(FBIO *ifp, int *xcenter, int *ycenter, int *xzoom, int *yzoom),
		deb_setcursor(FBIO *ifp, unsigned char *bits, int xbits, int ybits, int xorig, int yorig),
		deb_cursor(FBIO *ifp, int mode, int x, int y),
		deb_getcursor(FBIO *ifp, int *mode, int *x, int *y),
		deb_readrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_writerect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_bwreadrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_bwwriterect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp)),
		deb_poll(FBIO *ifp),
		deb_flush(FBIO *ifp),
		deb_free(FBIO *ifp),
		deb_help(FBIO *ifp);
d85 4
a88 1
deb_open(FBIO *ifp, char *file, int width, int height)
d121 2
a122 1
deb_close(FBIO *ifp)
d130 3
a132 1
deb_clear(FBIO *ifp, RGBpixel (*pp))
d146 5
a150 1
deb_read(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count)
d160 5
a164 1
deb_write(FBIO *ifp, int x, int y, RGBpixel (*pixelp), int count)
d191 3
a193 1
deb_rmap(FBIO *ifp, ColorMap *cmp)
d202 3
a204 1
deb_wmap(FBIO *ifp, ColorMap *cmp)
d230 4
a233 1
deb_view(FBIO *ifp, int xcenter, int ycenter, int xzoom, int yzoom)
d243 4
a246 1
deb_getview(FBIO *ifp, int *xcenter, int *ycenter, int *xzoom, int *yzoom)
d258 5
a262 1
deb_setcursor(FBIO *ifp, unsigned char *bits, int xbits, int ybits, int xorig, int yorig)
d271 4
a274 1
deb_cursor(FBIO *ifp, int mode, int x, int y)
d283 4
a286 1
deb_getcursor(FBIO *ifp, int *mode, int *x, int *y)
d297 5
a301 1
deb_readrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
d311 5
a315 1
deb_writerect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
d325 5
a329 1
deb_bwreadrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
d339 5
a343 1
deb_bwwriterect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel (*pp))
d353 2
a354 1
deb_poll(FBIO *ifp)
d362 2
a363 1
deb_flush(FBIO *ifp)
d371 2
a372 1
deb_free(FBIO *ifp)
d381 2
a382 1
deb_help(FBIO *ifp)
@


11.3
log
@LINT from gcc -Wall.  Including some mods to h/pkg.h
@
text
@d7 1
a7 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libfb/if_debug.c,v 11.2 1998/06/27 04:29:16 mike Exp $ (BRL)";
d19 20
a38 20
_LOCAL_ int	deb_open(),
		deb_close(),
		deb_clear(),
		deb_read(),
		deb_write(),
		deb_rmap(),
		deb_wmap(),
		deb_view(),
		deb_getview(),
		deb_setcursor(),
		deb_cursor(),
		deb_getcursor(),
		deb_readrect(),
		deb_writerect(),
		deb_bwreadrect(),
		deb_bwwriterect(),
		deb_poll(),
		deb_flush(),
		deb_free(),
		deb_help();
d85 1
a85 4
deb_open( ifp, file, width, height )
FBIO	*ifp;
char	*file;
int	width, height;
d118 1
a118 2
deb_close( ifp )
FBIO	*ifp;
d126 1
a126 3
deb_clear( ifp, pp )
FBIO	*ifp;
RGBpixel	*pp;
d140 1
a140 5
deb_read( ifp, x, y, pixelp, count )
FBIO	*ifp;
int	x, y;
RGBpixel	*pixelp;
int	count;
d150 1
a150 5
deb_write( ifp, x, y, pixelp, count )
FBIO	*ifp;
int	x, y;
RGBpixel	*pixelp;
int	count;
d177 1
a177 3
deb_rmap( ifp, cmp )
FBIO	*ifp;
ColorMap	*cmp;
d186 1
a186 3
deb_wmap( ifp, cmp )
FBIO	*ifp;
ColorMap	*cmp;
d212 1
a212 4
deb_view( ifp, xcenter, ycenter, xzoom, yzoom )
FBIO	*ifp;
int	xcenter, ycenter;
int	xzoom, yzoom;
d222 1
a222 4
deb_getview( ifp, xcenter, ycenter, xzoom, yzoom )
FBIO	*ifp;
int	*xcenter, *ycenter;
int	*xzoom, *yzoom;
d234 1
a234 5
deb_setcursor( ifp, bits, xbits, ybits, xorig, yorig )
FBIO	*ifp;
unsigned char *bits;
int	xbits, ybits;
int	xorig, yorig;
d243 1
a243 4
deb_cursor( ifp, mode, x, y )
FBIO	*ifp;
int	mode;
int	x, y;
d252 1
a252 4
deb_getcursor( ifp, mode, x, y )
FBIO	*ifp;
int	*mode;
int	*x, *y;
d263 1
a263 5
deb_readrect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
d273 1
a273 5
deb_writerect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
d283 1
a283 5
deb_bwreadrect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
d293 1
a293 5
deb_bwwriterect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
d303 1
a303 2
deb_poll( ifp )
FBIO	*ifp;
d311 1
a311 2
deb_flush( ifp )
FBIO	*ifp;
d319 1
a319 2
deb_free( ifp )
FBIO	*ifp;
d328 1
a328 2
deb_help( ifp )
FBIO	*ifp;
@


11.2
log
@Additions to LIBFB interface and remote framebuffer protocol to
read and write monochrome rectangles.
Particularly important for sending thermal images at high speed.
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libfb/if_debug.c,v 11.1 1995/01/04 09:52:52 mike Rel4_4 $ (BRL)";
@


11.1
log
@Release_4.4
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: /m/cad/libfb/RCS/if_debug.c,v 10.2 94/08/12 20:24:57 gdurf Exp $ (BRL)";
d33 2
d57 2
d319 28
@


10.2
log
@Added includes
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: /m/cad/libfb/RCS/if_debug.c,v 10.1 1991/10/12 06:37:24 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: /m/cad/libfb/RCS/if_debug.c,v 9.6 91/07/26 22:41:02 mike Exp $ (BRL)";
d10 2
d14 2
@


9.6
log
@Added if_magic field, and FB_CK_FBIO() macro, to allow checking
FBIO pointers
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: /m/cad/libfb/RCS/if_debug.c,v 9.5 91/07/18 16:30:31 mike Exp $ (BRL)";
@


9.5
log
@lint
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: /m/cad/libfb/RCS/if_debug.c,v 9.4 91/01/03 02:53:18 phil Exp $ (BRL)";
d36 1
d82 1
d116 1
d126 1
d144 1
d160 1
d187 1
d200 1
d227 1
d240 1
d256 1
d280 1
d295 1
d309 1
d320 1
d329 1
d338 1
d348 1
@


9.4
log
@Minor error check.
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: /m/cad/libfb/RCS/if_debug.c,v 9.3 90/12/11 22:18:56 phil Exp $ (BRL)";
d97 1
a97 1
		for( cp = file; *cp != NULL && !isdigit(*cp); cp++ ) ;
@


9.3
log
@if_ struct changes.  See fb.h.
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: /m/cad/libfb/RCS/if_debug.c,v 9.2 89/09/01 01:39:25 phil Exp $ (BRL)";
d89 1
a89 1
	if( width == 0 )
d91 1
a91 1
	if( height == 0 )
d103 1
a103 1
	/* Give the user whatever with was asked for */
@


9.2
log
@fb_flush and fb_free.  Name change cleanup.
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 9.1 89/05/19 05:47:53 phil Locked $ (BRL)";
a16 1
		deb_reset(),
d22 2
a23 3
		deb_viewport(),
		deb_window(),
		deb_zoom(),
d26 1
a26 1
		deb_scursor(),
d29 1
a37 1
	deb_reset,
d43 2
a44 3
	deb_viewport,
	deb_window,
	deb_zoom,
d47 1
a47 1
	deb_scursor,
d50 1
d60 1
d62 3
a118 8
deb_reset( ifp )
FBIO	*ifp;
{
	fb_log( "fb_reset( 0x%lx )\n", (unsigned long)ifp );
	return	0;
}

_LOCAL_ int
d214 1
a214 1
deb_viewport( ifp, left, top, right, bottom )
d216 2
a217 1
int	left, top, right, bottom;
d219 3
a221 2
	fb_log( "fb_viewport( 0x%lx,%4d,%4d,%4d,%4d )\n",
		(unsigned long)ifp, left, top, right, bottom );
d226 1
a226 1
deb_window( ifp, x, y )
d228 2
a229 1
int	x, y;
d231 5
a235 2
	fb_log( "fb_window( 0x%lx,%4d,%4d )\n",
		(unsigned long)ifp, x, y );
a239 10
deb_zoom( ifp, x, y )
FBIO	*ifp;
int	x, y;
{
	fb_log( "fb_zoom( 0x%lx, %d, %d )\n",
		(unsigned long)ifp, x, y );
	return	0;
}

_LOCAL_ int
d259 1
d264 1
a264 1
deb_scursor( ifp, mode, x, y )
d266 2
a267 2
int	mode;
int	x, y;
d269 1
a269 1
	fb_log( "fb_scursor( 0x%lx, %d,%4d,%4d )\n",
d271 2
d300 8
@


9.1
log
@Release_3.5
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 8.2 89/03/03 05:54:28 mike Exp $ (BRL)";
d15 14
a28 14
_LOCAL_ int	deb_dopen(),
		deb_dclose(),
		deb_dreset(),
		deb_dclear(),
		deb_bread(),
		deb_bwrite(),
		deb_cmread(),
		deb_cmwrite(),
		deb_viewport_set(),
		deb_window_set(),
		deb_zoom_set(),
		deb_curs_set(),
		deb_cmemory_addr(),
		deb_cscreen_addr(),
d31 2
d36 36
a71 35
FBIO debug_interface =
		{
		deb_dopen,
		deb_dclose,
		deb_dreset,
		deb_dclear,
		deb_bread,
		deb_bwrite,
		deb_cmread,
		deb_cmwrite,
		deb_viewport_set,
		deb_window_set,
		deb_zoom_set,
		deb_curs_set,
		deb_cmemory_addr,
		deb_cscreen_addr,
		deb_readrect,
		deb_writerect,
		deb_help,
		"Debugging Interface",
		8*1024,			/* max width */
		8*1024,			/* max height */
		"/dev/debug",
		512,			/* current width (init 0) */
		512,			/* current height (init 0) */
		-1,			/* file descriptor */
		PIXEL_NULL,		/* page_base */
		PIXEL_NULL,		/* page_curp */
		PIXEL_NULL,		/* page_endp */
		-1,			/* page_no */
		0,			/* page_ref */
		0L,			/* page_curpos */
		0L,			/* page_pixels */
		0			/* debug */
		};
d74 1
a74 1
deb_dopen( ifp, file, width, height )
d109 1
a109 1
deb_dclose( ifp )
d117 1
a117 1
deb_dreset( ifp )
d125 1
a125 1
deb_dclear( ifp, pp )
d140 1
a140 1
deb_bread( ifp, x, y, pixelp, count )
d153 1
a153 1
deb_bwrite( ifp, x, y, pixelp, count )
d183 1
a183 1
deb_cmread( ifp, cmp )
d193 1
a193 1
deb_cmwrite( ifp, cmp )
d220 1
a220 1
deb_viewport_set( ifp, left, top, right, bottom )
d230 1
a230 1
deb_window_set( ifp, x, y )
d240 1
a240 1
deb_zoom_set( ifp, x, y )
d250 1
a250 1
deb_curs_set( ifp, bits, xbits, ybits, xorig, yorig )
d262 1
a262 1
deb_cmemory_addr( ifp, mode, x, y )
d273 1
a273 1
deb_cscreen_addr( ifp, mode, x, y )
d307 16
@


8.2
log
@Added support for fb_readrect() and fb_writerect().
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 8.1 88/10/05 00:27:31 mike Locked $ (BRL)";
@


8.1
log
@Release_3.0
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 7.2 88/09/09 23:00:34 phil Exp $ (BRL)";
d29 2
d50 2
d278 26
@


7.2
log
@help function, also fixed return values to 0 (success)
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 7.1 87/11/02 23:26:28 phil Locked $ (BRL)";
@


7.1
log
@Release 2.3
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 6.1 87/07/11 07:51:25 mike Rel $ (BRL)";
d28 2
a29 1
		deb_cscreen_addr();
d48 1
d98 1
a98 1
	return( 1 );
d106 1
a106 1
	return	1;
d114 1
a114 1
	return	1;
d129 1
a129 1
	return	1;
d182 1
a182 1
	return	1;
d209 1
a209 1
	return	1;
d219 1
a219 1
	return	1;
d229 1
a229 1
	return	1;
d239 1
a239 1
	return	1;
d251 1
a251 1
	return	1;
d262 1
a262 1
	return	1;
d273 25
a297 1
	return	1;
@


6.1
log
@Release 2.0
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 5.1 87/06/24 21:51:27 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 4.2 87/02/12 22:06:30 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 4.1 86/12/29 03:42:43 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 1.8 86/11/28 20:21:22 phil Exp $ (BRL)";
@


1.8
log
@default open size code
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 1.7 86/11/14 04:35:59 phil Locked $ (BRL)";
@


1.7
log
@curs_set change.
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 1.6 86/11/12 16:08:31 phil Locked $ (BRL)";
d76 6
@


1.6
log
@Made default size 512; upped max size to 8K.
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 1.5 86/10/29 02:51:35 phil Locked $ (BRL)";
d26 1
a26 1
		deb_cinit_bitmap(),
d44 1
a44 1
		deb_cinit_bitmap,
d235 1
a235 1
deb_cinit_bitmap( ifp, bitmap )
d237 3
a239 1
long	*bitmap;
d241 2
a242 2
	fb_log( "fb_setcursor( 0x%lx, 0x%lx )\n",
		(unsigned long)ifp, bitmap );
@


1.5
log
@debug bit vector.  more verbose output.
@
text
@d7 1
a7 1
static char RCSid[] = "@@(#)$Header: if_debug.c,v 1.4 86/10/25 10:50:40 phil Locked $ (BRL)";
d48 2
a49 2
		1024,			/* max width */
		1024,			/* max height */
d51 2
a52 2
		0,			/* current width (init 0) */
		0,			/* current height (init 0) */
@


1.4
log
@RGBpixel conversion
@
text
@d2 1
a2 1
 *	I F _ D E B U G
d7 1
a7 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d11 1
d60 2
a61 2
		0L,			/* page_bytes */
		0L			/* page_pixels */
d71 2
a72 2
		fb_log( "fb_open( fp, 0, %d, %d )\n",
			width, height );
d74 2
a75 2
		fb_log( "fb_open( fp, \"%s\", %d, %d )\n",
			file, width, height );
d77 9
d97 1
a97 1
	fb_log( "fb_close( fp )\n" );
d105 1
a105 1
	fb_log( "fb_reset( fp )\n" );
d115 1
a115 1
		fb_log( "fb_clear( fp, 0 )\n" );
d117 2
a118 1
		fb_log( "fb_clear( fp, &[%d %d %d] )\n",
d131 3
a133 2
	fb_log( "fb_read( fp,%4d,%4d, 0x%x, %d )\n",
		x, y, pixelp, count );
d144 20
a163 2
	fb_log( "fb_write( fp,%4d,%4d, 0x%x, %d )\n",
		x, y, pixelp, count );
d172 2
a173 1
	fb_log( "fb_rmap( fp, 0x%x )\n", cmp );
d182 19
a200 1
	fb_log( "fb_wmap( fp, 0x%x )\n", cmp );
d209 2
a210 2
	fb_log( "fb_viewport( fp,%4d,%4d,%4d,%4d )\n",
		left, top, right, bottom );
d219 2
a220 1
	fb_log( "fb_window( fp,%4d,%4d )\n", x, y );
d229 2
a230 1
	fb_log( "fb_zoom( fp, %d, %d )\n", x, y );
d239 2
a240 1
	fb_log( "fb_setcursor( fp, 0x%x )\n", bitmap );
d250 2
a251 1
	fb_log( "fb_cursor( fp, %d,%4d,%4d )\n", mode, x, y );
d261 2
a262 1
	fb_log( "fb_scursor( fp, %d,%4d,%4d )\n", mode, x, y );
@


1.3
log
@flexname name changes.
cleaned up return codes.
@
text
@d3 2
d6 3
d102 1
a102 1
Pixel	*pp;
d107 3
a109 3
		fb_log( "fb_clear( fp, &[%d %d %d %d] )\n",
			(int)pp->red, (int)pp->green,
			(int)pp->blue, (int)pp->spare );
d117 1
a117 1
Pixel	*pixelp;
d129 1
a129 1
Pixel	*pixelp;
@


1.2
log
@Added /dev/name convention.
@
text
@d9 14
a22 15
_LOCAL_ int	debug_device_open(),
		debug_device_close(),
		debug_device_reset(),
		debug_device_clear(),
		debug_buffer_read(),
		debug_buffer_write(),
		debug_colormap_read(),
		debug_colormap_write(),
		debug_viewport_set(),
		debug_window_set(),
		debug_zoom_set(),
		debug_cinit_bitmap(),
		debug_cmemory_addr(),
		debug_cscreen_addr(),
		debug_animate();
d27 14
a40 14
		debug_device_open,
		debug_device_close,
		debug_device_reset,
		debug_device_clear,
		debug_buffer_read,
		debug_buffer_write,
		debug_colormap_read,
		debug_colormap_write,
		debug_viewport_set,
		debug_window_set,
		debug_zoom_set,
		debug_cinit_bitmap,
		debug_cmemory_addr,
		debug_cscreen_addr,
d59 1
a59 1
debug_device_open( ifp, file, width, height )
d65 1
a65 1
		fprintf( stderr, "fb_open( fp, 0, %d, %d )\n",
d68 1
a68 1
		fprintf( stderr, "fb_open( fp, \"%s\", %d, %d )\n",
d79 1
a79 1
debug_device_close( ifp )
d82 2
a83 1
	fprintf( stderr, "fb_close( fp )\n" );
d87 1
a87 1
debug_device_reset( ifp )
d90 2
a91 1
	fprintf( stderr, "fb_reset( fp )\n" );
d95 1
a95 1
debug_device_clear( ifp, pp )
d100 1
a100 1
		fprintf( stderr, "fb_clear( fp, 0 )\n" );
d102 1
a102 1
		fprintf( stderr, "fb_clear( fp, &[%d %d %d %d] )\n",
d105 1
d109 1
a109 1
debug_buffer_read( ifp, x, y, pixelp, count )
d115 1
a115 1
	fprintf( stderr, "fb_read( fp,%4d,%4d, 0x%x, %d )\n",
d117 1
d121 1
a121 1
debug_buffer_write( ifp, x, y, pixelp, count )
d127 1
a127 1
	fprintf( stderr, "fb_write( fp,%4d,%4d, 0x%x, %d )\n",
d129 1
d133 1
a133 1
debug_colormap_read( ifp, cmp )
d137 2
a138 1
	fprintf( stderr, "fb_rmap( fp, 0x%x )\n", cmp );
d142 1
a142 1
debug_colormap_write( ifp, cmp )
d146 2
a147 1
	fprintf( stderr, "fb_wmap( fp, 0x%x )\n", cmp );
d151 1
a151 1
debug_viewport_set( ifp, left, top, right, bottom )
d155 1
a155 1
	fprintf( stderr, "fb_viewport( fp,%4d,%4d,%4d,%4d )\n",
d157 1
d161 1
a161 1
debug_window_set( ifp, x, y )
d165 2
a166 1
	fprintf( stderr, "fb_window( fp,%4d,%4d )\n", x, y );
d170 1
a170 1
debug_zoom_set( ifp, x, y )
d174 2
a175 1
	fprintf( stderr, "fb_zoom( fp, %d, %d )\n", x, y );
d179 1
a179 1
debug_cinit_bitmap( ifp, bitmap )
d183 2
a184 1
	fprintf( stderr, "fb_setcursor( fp, 0x%x )\n", bitmap );
d188 1
a188 1
debug_cmemory_addr( ifp, mode, x, y )
d193 2
a194 1
	fprintf( stderr, "fb_cursor( fp, %d,%4d,%4d )\n", mode, x, y );
d198 1
a198 1
debug_cscreen_addr( ifp, mode, x, y )
d203 2
a204 10
	fprintf( stderr, "fb_scursor( fp, %d,%4d,%4d )\n", mode, x, y );
}

_LOCAL_ int
debug_animate( ifp, nframes, size, fps )
FBIO	*ifp;
int	nframes, size, fps;
{
	fprintf( stderr, "fb_animate( fp, %d, %d, %d )\n",
			nframes, size, fps );
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1
		"debug",
@
