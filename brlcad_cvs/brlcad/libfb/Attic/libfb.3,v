head	11.4;
access;
symbols
	ansi-20040405-merged:11.2.6.1
	postmerge-20040405-ansi:11.3
	premerge-20040404-ansi:11.3
	postmerge-autoconf:11.3
	autoconf-freeze:11.3
	premerge-autoconf:11.3
	ansi-20040316-freeze:11.2
	postmerge-20040315-windows:11.3
	premerge-20040315-windows:11.3
	windows-20040315-freeze:11.2.8.1
	autoconf-20031203:11.3
	autoconf-20031202:11.3
	autoconf-branch:11.3.0.6
	phong-branch:11.3.0.4
	photonmap-branch:11.3.0.2
	rel-6-1-DP:11.2
	windows-branch:11.2.0.8
	rel-6-0-2:11.2
	ansi-branch:11.2.0.6
	rel-6-0-1-branch:11.2.0.4
	hartley-6-0-post:11.2
	hartley-6-0-pre:11.2
	rel-6-0-1:11.2
	rel-6-0:11.2
	rel-5-4:11.2
	offsite-5-3-pre:11.2
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:1.5
	rel-1-10:1.2;
locks; strict;


11.4
date	2004.05.21.18.07.25;	author morrison;	state dead;
branches;
next	11.3;

11.3
date	2003.01.07.13.42.35;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	2000.02.11.21.46.27;	author mike;	state Exp;
branches
	11.2.6.1
	11.2.8.1;
next	11.1;

11.1
date	95.01.04.09.53.11;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.37.34;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	91.08.07.13.20.19;	author mmark;	state Exp;
branches;
next	9.2;

9.2
date	91.07.11.17.22.28;	author butler;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.48.20;	author mike;	state Rel3_5;
branches;
next	8.2;

8.2
date	89.01.06.20.55.59;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.27.52;	author mike;	state Rel3_0;
branches;
next	7.4;

7.4
date	88.09.02.17.08.42;	author merritt;	state Exp;
branches;
next	7.3;

7.3
date	88.08.30.15.15.53;	author steveb;	state Exp;
branches;
next	7.2;

7.2
date	88.01.05.22.22.16;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.27.15;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.51.54;	author mike;	state Rel;
branches;
next	5.2;

5.2
date	87.06.25.02.10.00;	author phil;	state Exp;
branches;
next	5.1;

5.1
date	87.06.24.21.52.04;	author mike;	state Rel;
branches;
next	1.7;

1.7
date	87.06.12.16.42.31;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	87.04.22.15.04.01;	author phil;	state Exp;
branches;
next	1.5;

1.5
date	87.02.12.22.06.53;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	87.01.28.22.48.54;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	87.01.28.22.46.35;	author phil;	state Exp;
branches;
next	1.2;

1.2
date	86.10.24.09.20.04;	author phil;	state Exp;
branches;
next	1.1;

1.1
date	86.10.03.19.45.22;	author mike;	state Exp;
branches;
next	;

11.2.6.1
date	2004.03.17.21.17.02;	author morrison;	state Exp;
branches;
next	;

11.2.8.1
date	2004.03.11.23.42.08;	author morrison;	state Exp;
branches;
next	;


desc
@Manual page for libfb
@


11.4
log
@moved to src/
@
text
@.TH LIBFB 3 BRL-CAD
.SH NAME
libfb \- multiple device, generic frame buffer library
.SH SYNOPSIS
.nf
.B #include <fb.h>
.PP
/* Generic frame buffer routines: */
.PP
.B FBIO "*fb_open(fbfile, width, height)"
.B char *fbfile;
.PP
.B int fb_close(fbp)
.B FBIO *fbp;
.PP
.B int "fb_read(fbp, x, y, addr, count)"
.B FBIO *fbp;
.B RGBpixel *addr;
.B long count;
.PP
.B int "fb_write(fbp, x, y, addr, count)"
.B FBIO *fbp;
.B RGBpixel *addr;
.B long count;
.PP
.B int fb_rmap(fbp, cmap)
.B FBIO *fbp;
.B ColorMap *cmap;
.PP
.B int fb_wmap(fbp, cmap)
.B FBIO *fbp;
.B ColorMap *cmap;
.PP
.B int fb_clear(fbp, colorp)
.B FBIO *fbp;
.B RGBpixel *colorp;
.PP
.B char *fb_gettype(fbp)
.B FBIO *fbp;
.PP
.B int fb_getwidth(fbp)
.B FBIO *fbp;
.PP
.B int fb_getheight(fbp)
.B FBIO *fbp;
.PP
/* Hardware specific frame buffer routines: */
.PP
.B int fb_cursor(fbp, mode, x, y)
.B FBIO *fbp;
.PP
.B int fb_scursor(fbp, mode, x, y)
.B FBIO *fbp;
.PP
.B int "fb_setcursor(fbp, bits, xbits, ybits, xorig, yorig)"
.B FBIO *fbp;
.B unsigned char bits[];
.B int xbits, ybits;
.B int xorig, yorig;
.PP
.B int fb_window(fbp, x, y)
.B FBIO *fbp;
.PP
.B int fb_zoom(fbp, x, y)
.B FBIO *fbp;
.PP
/* Buffered frame buffer I/O: */
.PP
.B int fb_ioinit(fbp)
.B FBIO *fbp;
.PP
.B int fb_seek(fbp, x, y)
.B FBIO *fbp;
.PP
.B void fb_tell(fbp, xp, yp)
.B FBIO *fbp;
.B int *xp, *yp;
.PP
.B int fb_rpixel(fbp, pixelp)
.B FBIO *fbp;
.B RGBpixel *pixelp;
.PP
.B int fb_wpixel(fbp, pixelp)
.B FBIO *fbp;
.B RGBpixel *pixelp;
.PP
.B int fb_flush(fbp)
.B FBIO *fbp;
.PP
.B void "fb_log(format [, arg ] ... )"
.B char *format;
.SH DESCRIPTION
These routines are designed to provide a device-independent
method of using frame buffers or files containing frame buffer
images.
The coordinate system used is first-quadrant (0..width-1, 0..height-1),
with integer addressing.  Translation to hardware coordinate systems
is handled by the library.
.PP
This version of the library assumes that red, green, and blue
intensities are described by unsigned 8-bit bytes in the range (0..255).
The library interface uses arrays of
.BR RGBpixel s,
which is a typedef for an array of three unsigned chars (this was
done to avoid structure padding).  Note that a pointer to an
.B RGBpixel
is thus the name of the
.B RGBpixel
itself, i.e. no ampersand is needed.
.PP
The exact interpretation of color maps tends to be somewhat device
specific.
The three ColorMap arrays each have 256 entries of unsigned 16-bit values.
In order to accomodate color maps with differing amounts of output
resolution, the color map entries are fixed-point fractions
in the range (0.0..1.0).  In integer notation, the range is (0..65525).
For devices with less than 16 bits of output from their color maps,
the left-most portion of each entry is used.
.PP
.I Fb_open\^
is used to open a frame buffer file
.IR fbfile\^ .
The file may be either the name of a supported frame buffer interface,
referenced as "/dev/interface",
or the name of a UNIX file.
The routine will try to determine if the file opened was
a real frame buffer by examining the name,
and if so will perform
whatever initialization actions are necessary.
If the value of
.I fbfile\^
is
.B
.SM NULL
and the environment variable
.B
.SM FB_FILE
is set, then the value of
.SM FB_FILE
is used;
otherwise the default frame buffer device for the system is used.
See below for more details.
The
.I width\^
and
.I height\^
parameters specify the initial size of display desired.
If these are zero the default sizes for that device will be used.
On a successful open,
the frame buffer I/O (FBIO) structure pointer is returned.
This structure contains size you were actually given, as well
as the maximum possible size for the selected device.
A return of FBIO_NULL indicates failure.
.PP
.I Fb_close\^
simply closes the frame buffer.
.PP
.I Fb_read\^
reads
.I count\^
pixels from the frame buffer starting at the location specified by
.I x\^
and
.IR y\^ ,
and places them at program memory address specified
by
.IR addr\^ .
.I Fb_read\^
returns the number of pixels actually read, or -1 on error.
.PP
.I Fb_write\^
writes
.I count\^
pixels from program address
.I addr\^
into the frame buffer starting at the location
specified
by
.I x\^
and
.IR y\^ .
.I Fb_write\^
returns the number of pixels actually written, or
-1 on error.
.PP
.I Fb_rmap\^
reads in the color map from the frame buffer and
leaves at the location pointed to by
.IR cmap\^ .
.PP
.I Fb_wmap\^
writes the color map pointed to by
.I cmap\^
into the frame buffer.  If the value of
.I cmap\^
is
.B
.SM NULL
then a linear color map is used as the default.
.PP
.I Fb_clear\^
erases the frame buffer by setting all pixels to the given
color.
If the color pointer is NULL, black will be used.
On a UNIX file, this entails writing the entire file,
which is an expensive operation, whereas on most
frame buffer displays
this can be done in less than a second by a special command.
.PP
.I Fb_gettype\^
returns a pointer to a string describing the frame buffer
specified by the FBIO pointer.
.PP
.I Fb_getwidth\^
and
.I Fb_getheight\^
returns the current size of the FBIO frame buffer.
.PP
The following routines work in conjunction with those described above
to provide functions which only apply if the frame buffer
file is actually a hardware frame buffer display.
.PP
.I Fb_cursor\^
places the cursor at the image space coordinates given by
.I x\^
and
.IR y\^ .
If the mode is non-zero, the cursor is made visible, and
if mode is zero, the cursor is turned off.
.PP
.I Fb_scursor\^
is the same as
.I fb_cursor\^
except that it
places the cursor at the
.B screen
space coordinates given by
.I x\^
and
.IR y\^ .
.PP
.I Fb_setcursor\^
allows the user to set the bitmap used to represent the cursor,
thereby changing the cursor shape.
This is not necessarily supported
by all hardware.
The argument
.I bits\^
is a pointer to an array
of unsigned chars containing the bits of the cursor.
The arguments
.I xbits
and
.I ybits
specify the size of the cursor bitmap.  The number of bytes in the
.I bits
array will be the width rounded up to a mutiple of
eight (so that the cursor "scanlines" are byte aligned) times the
height.
.IR bits [0]
is the lower left corner,
.IR bits [1]
is to the right of it, etc.  The next line of the
.I bits
array goes above the current one.  Within a byte the most significant
bit is the leftmost.  The values
.I xorig
and
.I yorig
specify which bit in the bitmap actually gets placed at the location
specified in the cursor move routines.  Again, a first quadrant coordinate
system is used.
.PP
.I Fb_window\^
sets the frame buffer window center position to the image space coordinates
given by
.I x\^
and
.IR y\^ .
This command is usually used in conjunction with the
.I fb_zoom\^
routine.
.PP
.I Fb_zoom\^
sets the zoom factor for the X coordinate
to
.I x\^
and the zoom factor for the Y coordinate
to
.IR y\^ .
Zooming is generally done
by pixel replication in hardware.
.PP
The following routines work in conjunction with those described above
to provide buffered reading and writing of frame buffer images
either to a real frame buffer or a UNIX file.
The routines use a simple paging strategy to hold ``bands'' of
the image in core.
Since horizontal bands are buffered, the
ideal motion is to scan left to right, then bottom to top.
.PP
.I Fb_ioinit\^
should be called before using any of the other buffered I/O routines and
repeated whenever the frame buffer is reopened.
.PP
.I Fb_seek\^
is used to position the current read/write pointer to
the location to the next position to be read or written.
It is not necessary to do a
.I fb_seek\^
after every read or write since both
.I fb_rpixel\^
and
.I fb_wpixel\^
imply an automatic move to the next pixel.
If you read or write the last pixel on a scan line,
the pointer will automatically move to the beginning
of the following scan line.
.PP
.I Fb_tell\^
returns the current location of the read write pointer
in terms of (X,Y) coordinates on the frame buffer.
The X and Y values are returned into the integers pointed to
by
.I xp\^
and
.IR yp\^ .
.PP
.I Fb_rpixel\^
reads the pixel at the current frame buffer location
and returns it into the location specifed
by
.IR pixelp\^ .
.PP
.I Fb_wpixel\^
writes the pixel pointed to by
.I pixelp\^
at the current frame buffer location.
.PP
.I Fb_flush\^
caused any current buffered frame buffer pages to be written out.
Unnecessary writes are avoided by the use of page reference bits.
.PP
The following is a printing routine which this library uses to
indicate errors.
.PP
.I Fb_log\^
will convert, format and print its
.I args\^
under control of
.I format\^
to the standard error output.
For more detailed information on the specification of the control string,
see
.IR printf\^ (3S).
This function may be supplied by the application if different behavior
is desired.
.SH "FB_FILE DEVICES"
The following devices are supported by the library; not all may
be available on any given system.  New device support can be
incorporated by the addition of a single module to the library.
.TP
.BI /dev/debug [num]
The "/dev/debug" interface prints one line to logs each call
to the frame buffer library.
.br
.I num
is a bitvector indicating the levels of verbosity of the output.  See
.B fb.h
for the bit definitions.
.TP
.I filename
Disk file interface
.TP
.BI /dev/ik [num] [opt]
Adage RDS-3000 ("Ikonas")
.br
.I Num
indicates the device number.
.br
.I Opt
is a single character which indicates optional mode modification.
The letter ``v'' is to select NTSC video with internal sync.
The letter ``e'' is to select NTSC video with external sync.
The letter ``n'' is to select no frame-buffer controller (FBC) re-init
upon open;  the default is to reprogram the FBC on each open.
.TP
.BI /dev/sgi [num]
Silicon Graphics IRIS Workstation
.br
When the display is running the window-manager MEX, the default
is to open a window in 12-bit mode, with RGB converted to
a 10x10x10 color-cube approximation.
A non-zero
.I num
will select a dynamically allocated colormap, which is slower but sometimes of
higher quality.
When MEX is not running, the full 24-bits of color are used
on systems with that deep a display.
Regardless of mode, the full 24-bits of color are
stored in a shared memory segment, allowing it to be operated on in
the "frame buffer" in MEX mode without loss of color accuracy when
the image is read back.
To release the shared memory segment, open /dev/sgi99.
.TP
.B /dev/rat
RasterTek 1/80 (untested)
.B /dev/sun
Sun PixWin interface.  On monochrome displays, a dither pattern is used
to create the impression of shading.  On 8-bit color displays, a simple
3x3x2 color-cube approximation is used.  At present, there is no ability
to read back pixels from the Sun display, making it less useful for
serious image manipulation, but being able to ``brouse'' through
images even on a monochrome workstation makes this still a very
useful capability.
.TP
.BI hostname: [devicename]
TCP-based network links to a remote framebuffer, where
.I devicename
is any from this list, for example,
brl-vgr.mil:/dev/ik0 or video.brl.mil:/dev/sgi.
A
.B hostname
with a null
.I devicename
will select the default display device on that host.
If explicitly specifying a remote device,
be careful not to omit the colon between the host and device name,
or you will be specifying a local disk file as the result.
Note that for security reasons, it is not permitted to access a
disk file via the remote interface.
.SH EXAMPLE
.I Libfb\^
can be loaded with any
C
program:
.PP
.RS
$ \|\fI/bin/cc \|program.c \|-lfb -l\<system-library...\>\fP
.RE
.sp
where
.I <system-library>
denotes specific libraries necesary on a particular machine.  All machines
with networking will require the "-lpkg" option.  Machines which support the
X Windows(tm) system will require the "-lX11" option. In addition, the following
table lists architectures and libraries above and beyond the pkg and X11
libraries.
.PP
 Architecture         Libraries
 SGI 3030       -lbsd -ldbm -lgl2
 SGI 4d         -lgl_s
 Sun            -lsuntool -lsunwindow -lpixrect
 Sun+TS         -lsuntool -lsunwindow -lpixrect -lgds
.sp
.SH FILES
fb.h
.br
/usr/brl/lib/libfb.a
.SH "SEE ALSO"
brlcad(1).
.SH "RETURN VALUES"
.IR fb_close\^ ,
.IR fb_write\^ ,
.IR fb_read\^ ,
.IR fb_wmap\^ ,
.IR fb_rmap\^ ,
.IR fb_clear\^ ,
.IR fb_cursor\^ ,
.IR fb_scursor\^ ,
.IR fb_setcursor\^ ,
.IR fb_window\^ ,
.IR fb_zoom\^ ,
.IR fb_ioinit\^ ,
.IR fb_seek\^ ,
.IR fb_wpixel\^ ,
.I fb_rpixel\^
and
.I fb_flush\^
return \-1 to indicate failure.
.I Fb_open\^
returns FBIO_NULL to indicate failure, and a non-null FBIO structure pointer
upon success.
.IR fb_read\^ ,
and
.IR fb_write\^
return the number of pixels actually read or written.
.IR fb_gettype\^
returns a pointer to a NULL terminated description string.
.SH AUTHORS
Gary S. Moss
.br
Phillip Dykstra
.br
Mike J. Muuss
.br
Douglas P. Kingston III
.SH BUGS
Vertical scanning will incur the most overhead, making it almost
impractical.
Due to the way memory is organized
in frame buffers and UNIX files, vertical scanning will never
be easy unless the image can be rotated.
.SH SOURCE
SECAD/VLD Computing Consortium, Bldg 394
.br
The U. S. Army Ballistic Research Laboratory
.br
Aberdeen Proving Ground, Maryland  21005
.SH "BUG REPORTS"
Reports of bugs or problems should be submitted via electronic
mail to <CAD@@ARL.ARMY.MIL>.
@


11.3
log
@Corrected email address
@
text
@@


11.2
log
@
Fixed e-mail
@
text
@d512 1
a512 1
mail to <CAD@@ARL.MIL>.
@


11.2.6.1
log
@sync branch with HEAD
@
text
@d512 1
a512 1
mail to <CAD@@ARL.ARMY.MIL>.
@


11.2.8.1
log
@sync to HEAD...
@
text
@d512 1
a512 1
mail to <CAD@@ARL.ARMY.MIL>.
@


11.1
log
@Release_4.4
@
text
@d1 1
a1 1
.TH LIBFB 3 BRL/CAD
d512 1
a512 1
mail to <CAD@@BRL.MIL>.
@


10.1
log
@Release_4.0
@
text
@@


9.3
log
@fixed email addr
@
text
@@


9.2
log
@changed to reflect that libfb is no longer all-inclusive.
@
text
@d421 1
a421 1
brl-vgr.arpa:/dev/ik0 or video.brl.mil:/dev/sgi.
@


9.1
log
@Release_3.5
@
text
@d439 1
a439 1
$ \|\fI/bin/cc \|program.c \|-lfb\fP
d441 15
@


8.2
log
@Added ik2v
@
text
@@


8.1
log
@Release_3.0
@
text
@d383 2
a384 1
The letter ``v'' is to select NTSC video with external sync.
@


7.4
log
@changed .ARPA to .MIL
@
text
@@


7.3
log
@*** empty log message ***
@
text
@d496 1
a496 1
mail to <CAD@@BRL.ARPA>.
@


7.2
log
@Added "v" and "n" option description for Adage
@
text
@d168 2
a181 2
.I Fb_read\^
and
d183 1
a183 1
both return the number of pixels actually read or written, or
@


7.1
log
@Release 2.3
@
text
@d375 1
a375 1
.BI /dev/ik [num]
d380 6
@


6.1
log
@Release 2.0
@
text
@@


5.2
log
@fixed fb_ioinit type, added RGBpixel comment
@
text
@@


5.1
log
@Release 1.24
@
text
@d69 1
a69 1
.B void fb_ioinit(fbp)
d102 8
d452 1
@


1.7
log
@Added Sun info, and more details about remote interfaces.
@
text
@@


1.6
log
@trivial fix
@
text
@d133 2
a134 5
otherwise a default
frame buffer device is used.
A "/dev/debug" interface exists which just logs all calls to the library.
If the remote interface is available, remote devices can be accessed
as "hostname:/dev/device".
d350 1
a350 1
.SH DEVICES
d356 2
a357 1
Debug interface
d393 8
d402 1
a402 1
.BI hostname: devicename
d412 5
a416 1
(Be careful not to omit the colon, or a disk file will result).
@


1.5
log
@Release 1.20 -- First Formal Release
@
text
@d448 1
a448 1
returns a pointer to NULL terminated a description string.
@


1.4
log
@More details about SGI and network interfaces.
@
text
@@


1.3
log
@Major upgrade
@
text
@d378 3
d383 9
a391 4
will select the pre-allocated colormap.  The default is to dynamically
allocate the colors of the colormap, which is slower but usually of
higher quality.  Note that both forms of colormapping occur only in
window mode, not RGB mode.
d399 8
a406 1
is any from this list.
@


1.2
log
@update to track library.
@
text
@d1 1
a1 3
.TH LIBMFB 3 BRL/CAD
'\"	last edit:	%E%	G S Moss
'\"	SCCS ID:	%W%
d3 1
a3 1
libmfb \- multiple device, generic frame buffer library
d6 2
a7 2
.B #include <fbm.h>
.P
d9 2
a10 2
.P
.B FBIO *fb_open(fbfile, width, height);
d12 7
a18 7
.P
.B int fb_close(fbiop);
.B FBIO *fbiop;
.P
.B int fb_read(fbiop, x, y, addr, count);
.B FBIO *fbiop;
.B Pixel *addr;
d20 4
a23 4
.P
.B int fb_write(fbiop, x, y, addr, count);
.B FBIO *fbiop;
.B Pixel *addr;
d25 3
a27 3
.P
.B int fb_rmap(fbiop, cmap);
.B FBIO *fbiop;
d29 3
a31 3
.P
.B int fb_wmap(fbiop, cmap);
.B FBIO *fbiop;
d33 14
a46 14
.P
.B int fb_clear(fbiop, colorp);
.B FBIO *fbiop;
.B Pixel *colorp;
.P
.B char *fb_gettype(fbiop);
.B FBIO *fbiop;
.P
.B int fb_getwidth(fbiop);
.B FBIO *fbiop;
.P
.B int fb_getheight(fbiop);
.B FBIO *fbiop;
.P
d48 19
a66 17
.P
.B int fb_cursor(fbiop, mode, x, y);
.B FBIO *fbiop;
.P
.B int fb_scursor(fbiop, mode, x, y);
.B FBIO *fbiop;
.P
.B int fb_setcursor(fbiop, bitmap);
.B FBIO *fbiop;
.B long bitmap[32];
.P
.B int fb_window(fbiop, x, y);
.B FBIO *fbiop;
.P
.B int fb_zoom(fbiop, x, y);
.B FBIO *fbiop;
.P
d68 9
a76 9
.P
.B void fb_ioinit(fbiop);
.B FBIO *fbiop;
.P
.B int fb_seek(fbiop, x, y);
.B FBIO *fbiop;
.P
.B void fb_tell(fbiop, xp, yp);
.B FBIO *fbiop;
d78 13
a90 13
.P
.B int fb_rpixel(fbiop, pixelp);
.B FBIO *fbiop;
.B Pixel *pixelp;
.P
.B int fb_wpixel(fbiop, pixelp);
.B FBIO *fbiop;
.B Pixel *pixelp;
.P
.B int fb_flush(fbiop);
.B FBIO *fbiop;
.P
.B void fb_log(format [, arg ] ... );
d96 1
a96 1
The coordinate system used is first-quadrant (0..width, 0..height),
d99 1
a99 3
For unfortuante historical reasons, multi-line transfers proceed towards
lower numbered scanlines.
.P
d102 1
a102 1
.P
d111 1
a111 1
.P
d143 1
d149 1
a149 1
.P
d152 1
a152 1
.P
d163 1
a163 1
.P
d180 1
a180 1
.P
d185 1
a185 1
.P
d195 1
a195 1
.P
d204 1
a204 1
.P
d208 1
a208 1
.P
d213 1
a213 1
.P
d217 1
a217 1
.P
d225 1
a225 1
.P
d236 1
a236 1
.P
d243 1
a243 1
.I bitmap\^
d245 24
a268 2
of 32 32-bit integers.
.P
d278 1
a278 1
.P
d286 1
a286 1
Zooming is by powers of two and is generally done
d288 1
a288 1
.P
d295 2
a296 2
ideal motion is to scan left to right, then top to bottom.
.P
d300 1
a300 1
.P
d314 1
a314 1
.P
d323 1
a323 1
.P
d329 1
a329 1
.P
d334 1
a334 1
.P
d338 1
a338 1
.P
d341 1
a341 1
.P
d354 1
a354 1
The following devices are supported by the library;  not all may
d357 13
a369 5
.P
debug
.P
disk file
.P
d371 5
a375 1
.P
d377 9
a385 1
.P
d387 5
a391 2
.P
TCP-based network links to a remote frame-buffer
d393 1
a393 1
.I Libmfb\^
d397 1
a397 1
.P
d399 1
a399 1
$ \|\fI/bin/cc \|program.c \|-lmfb\fP
d402 1
a402 1
fbm.h
d404 1
a404 1
/usr/local/lib/libmfb.a
d406 1
a406 1
ik(4B), fb(5B), rle(5B).
d435 1
a435 1
Gary S. Moss, BRL/VLD-VMB
d437 1
a437 1
Mike J. Muuss, BRL/SECAD-CSMB
d439 1
a439 1
Douglas P. Kingston III, BRL/SECAD-CSMB
d441 1
a441 1
Phil Dykstra, BRL/SECAD-CSMB
d448 9
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
.B int fb_clear(fbiop);
d38 1
d40 1
a40 1
.B int fb_gettype(fbiop);
d43 1
a43 1
.B int fb_getsize(fbiop);
d46 1
a46 3
.B void fb_setsize(size);
.P
.B void fb_setbackground(fbiop, pixelp);
a47 1
.B Pixel *pixelp;
d99 2
d118 1
d137 3
a139 1
A "debug" interface exists which just logs all calls to the library.
d147 2
d176 5
d198 1
a198 1
erases the frame buffer by setting all pixels to the background
d200 1
a200 1
The default is black.
d207 2
a208 4
returns the type of the frame buffer specified by the FBIO pointer.
The
valid values are defined in
.BR fbm.h .
d210 4
a213 13
.I Fb_setsize\^
should be used to specify the size of the frame buffer in pixels per side.
Typically this is either 512 or 1024 (the frame buffer is
assumed to be square).
.I Fb_setsize\^
should be used before
.I fb_open\^
if the frame buffer size is not the default, 512.
.I Fb_getsize\^
returns the current size of the frame buffer.
Regardless of whether a high or low resolution device name was provided to
.IR fb_open\^ ,
that device name will be altered to reflect the current frame buffer size.
a214 8
.I Fb_setbackground\^
sets the desired background color
as specified by the pixel pointed to
by
.IR pixelp\^ .
.I Fb_clear\^
will attempt to clear the frame buffer to this color.
.P
d349 1
a349 1
.I Libfb\^
d355 1
a355 1
$ \|\fI/bin/cc \|program.c \|-lfb\fP
d360 1
a360 1
/usr/local/lib/libfb.a
d384 6
@
