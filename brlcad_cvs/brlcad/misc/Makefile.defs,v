head	1.10;
access;
symbols
	rel-7-10-4:1.10
	STABLE:1.10.0.2
	rel-7-10-2:1.10
	rel-7-10-0:1.8
	rel-7-8-4:1.5
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.3.0.4
	help:1.3
	temp_tag:1.3
	bobWinPort-20051223-freeze:1.1
	postmerge-20051223-bobWinPort:1.3
	premerge-20051223-bobWinPort:1.3
	rel-7-6-6:1.3
	rel-7-6-4:1.3
	rel-7-6-2:1.3
	rel-7-6-branch:1.3.0.2
	rel-7-6-0:1.3
	rel-7-4-2:1.1
	rel-7-4-branch:1.1.0.4
	bobWinPort:1.1.0.2
	rel-7-4-0:1.1;
locks; strict;
comment	@# @;


1.10
date	2007.07.26.14.35.59;	author erikgreenwald;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.04.22.38.31;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.11.16.46.30;	author erikgreenwald;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.11.15.54.53;	author erikgreenwald;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.07.19.53.52;	author erikgreenwald;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.16.08.00.14;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.08.18.22.32;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.27.23.00.49;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.21.18.08.54;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.23.17.35.05;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.10
log
@pass make flags in depends targets
@
text
@
.PHONY: fast fast-am fast-recursive noprod prodclean prodclean-recursive depends

#
# compile all sources first, then link on a second pass.  requires 2x
# disk space to account for uncertainty on whether the objects are for
# a library or an executable.
#
fast: fast-recursive

fast-am: $(FAST_OBJECTS) all-am

fast-recursive:
	@@list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) fast); \
	done
	@@$(MAKE) $(AM_MAKEFLAGS) fast-am

#
# remove all of the build targets (binaries and libraries)
#
noprod: prodclean

prodclean: prodclean-recursive
	@@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo "rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
	@@list='$(noinst_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo "rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
	@@list='$(EXTRA_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo "rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
	@@if test ! -z "$(lib_LTLIBRARIES)" ; then echo rm -f $(lib_LTLIBRARIES) && rm -f $(lib_LTLIBRARIES) ; fi
	@@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test -z "$dir" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
	@@if test ! -z "$(noinst_LTLIBRARIES)" ; then echo rm -f $(noinst_LTLIBRARIES) && rm -f $(noinst_LTLIBRARIES) ; fi
	@@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test -z "$dir" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
	@@if test ! -z "$(lib_LIBRARIES)" ; then echo rm -f $(lib_LIBRARIES) && rm -f $(lib_LIBRARIES) ; fi
	@@if test ! -z "$(noinst_LIBRARIES)" ; then echo rm -f $(noinst_LIBRARIES) && rm -f $(noinst_LIBRARIES) ; fi

prodclean-recursive:
	@@list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) prodclean); \
	done

depends:
	for dep in ${DEPS} ${DEPENDS} ; do (cd ${top_builddir}/$$dep && $(MAKE) $(AM_MAKEFLAGS) depends all) ; done

install-depends:
	for dep in ${DEPS} ${DEPENDS} ; do (cd ${top_builddir}/$$dep && $(MAKE) $(AM_MAKEFLAGS) install-depends install) ; done
@


1.9
log
@remove EXTRA_PROGRAMS too on prodclean
@
text
@d63 1
a63 1
	for dep in ${DEPS} ${DEPENDS} ; do (cd ${top_builddir}/$$dep && $(MAKE) depends all) ; done
d66 1
a66 1
	for dep in ${DEPS} ${DEPENDS} ; do (cd ${top_builddir}/$$dep && $(MAKE) install-depends install) ; done
@


1.8
log
@install-depends should install the dependancies, not just make them... oops.
@
text
@d35 5
@


1.7
log
@recursive dep install target
@
text
@d61 1
a61 1
	for dep in ${DEPS} ${DEPENDS} ; do (cd ${top_builddir}/$$dep && $(MAKE) depends install) ; done
@


1.6
log
@punty "depends" target
@
text
@d59 3
@


1.5
log
@rework the noprod logic for issue encountered on netbsd on vax where the shell is invoking with a different precedence on &&/||, so be more explicit
@
text
@d2 1
a2 1
.PHONY: fast fast-am fast-recursive noprod prodclean prodclean-recursive
d56 3
@


1.4
log
@be sure to delete static and other 'regular' or noinst libraries during a make noprod
@
text
@d35 1
a35 1
	@@test -z "$(lib_LTLIBRARIES)" || echo rm -f $(lib_LTLIBRARIES) && rm -f $(lib_LTLIBRARIES)
d42 1
a42 1
	@@test -z "$(noinst_LTLIBRARIES)" || echo rm -f $(noinst_LTLIBRARIES) && rm -f $(noinst_LTLIBRARIES)
d49 2
a50 2
	@@test -z "$(lib_LIBRARIES)" || echo rm -f $(lib_LIBRARIES) && rm -f $(lib_LIBRARIES)
	@@test -z "$(noinst_LIBRARIES)" || echo rm -f $(noinst_LIBRARIES) && rm -f $(noinst_LIBRARIES)
@


1.3
log
@fix the recursion traversal order so that subdirectories are fully processed before attempting to link/compile in a directory.
@
text
@d27 1
a27 1
	  echo " rm -f $$p $$f"; \
d32 1
a32 1
	  echo " rm -f $$p $$f"; \
d49 2
@


1.2
log
@add a 'noprod' or 'prodclean' make target to remove all the built binaries/libraries
@
text
@d2 1
a2 1
.PHONY: fast fast-recursive noprod prodclean prodclean-recursive
d9 3
a11 1
fast: $(FAST_OBJECTS) fast-recursive all-am
d17 1
@


1.1
log
@initial Makefile.defs for providing a global build options to all the Makefile.am files.  presently includes a 'fast' target that will link targets in parallel when the Makefile.am includes a FAST_OBJECTS directive
@
text
@d1 4
d8 1
a8 3

.PHONY: fast fast-recursive

d15 36
@

