head	11.8;
access;
symbols
	ansi-20040405-merged:11.5.2.1
	postmerge-20040405-ansi:11.6
	premerge-20040404-ansi:11.5
	postmerge-autoconf:11.5
	autoconf-freeze:11.5
	premerge-autoconf:11.5
	postmerge-20040315-windows:11.5
	premerge-20040315-windows:11.5
	windows-20040315-freeze:11.5
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.2
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.8
date	2004.05.21.17.59.47;	author morrison;	state dead;
branches;
next	11.7;

11.7
date	2004.05.10.15.30.47;	author erikg;	state Exp;
branches;
next	11.6;

11.6
date	2004.04.05.07.40.44;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.08.18;	author jra;	state Exp;
branches
	11.5.2.1;
next	11.4;

11.4
date	2002.08.15.20.55.29;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	2001.04.20.22.31.07;	author morrison;	state Exp;
branches;
next	11.2;

11.2
date	2000.09.01.19.19.11;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.05.24;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.12.19.16.25.07;	author jra;	state Exp;
branches;
next	10.2;

10.2
date	94.08.10.23.20.25;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.38.38;	author mike;	state Rel4_0;
branches;
next	1.2;

1.2
date	91.01.09.03.32.29;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	91.01.03.17.30.57;	author butler;	state Exp;
branches;
next	;

11.5.2.1
date	2002.09.19.18.01.56;	author morrison;	state Exp;
branches;
next	;


desc
@Dist 3.0 patchlevel 2 installation
@


11.8
log
@moved from top-level to src/other/.
@
text
@/*
 * This software is copyrighted as noted below.  It may be freely copied,
 * modified, and redistributed, provided that the copyright notice is 
 * preserved on all copies.
 * 
 * There is no warranty or other guarantee of fitness for this software,
 * it is provided solely "as is".  Bug reports or fixes may be sent
 * to the author, who may or may not act on them as he desires.
 *
 * You may not include this software in a program or other software product
 * without supplying the source, or without informing the end-user that the 
 * source is available for no extra charge.
 *
 * If you modify this software, you should include a notice giving the
 * name of the person performing the modification, the date of modification,
 * and the reason for such modification.
 */
/* 
 * rle_putcom.c - Add a picture comment to the header struct.
 * 
 * Author:	Spencer W. Thomas
 * 		Computer Science Dept.
 * 		University of Utah
 * Date:	Mon Feb  2 1987
 * Copyright (c) 1987, University of Utah
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#include "machine.h"
#include "externs.h"
#include "rle.h"

/*****************************************************************
 * TAG( match )
 * 
 * Match a name against a test string for "name=value" or "name".
 * If it matches name=value, return pointer to value part, if just
 * name, return pointer to NUL at end of string.  If no match, return NULL.
 *
 * Inputs:
 * 	n:	Name to match.  May also be "name=value" to make it easier
 *		to replace comments.
 *	v:	Test string.
 * Outputs:
 * 	Returns pointer as above.
 * Assumptions:
 *	[None]
 * Algorithm:
 *	[None]
 */
static char *
match(const char *n, const char *v)
{
    for ( ; *n != '\0' && *n != '=' && *n == *v; n++, v++ )
	;
    if (*n == '\0' || *n == '=')
    {
	if ( *v == '\0' )
	    return((char *) v);
	else if ( *v == '=' )
	    return( (char *) ++v);
    }
    return NULL;
}

/*****************************************************************
 * TAG( rle_putcom )
 * 
 * Put a comment into the header struct.
 * Inputs:
 * 	value:		Value to add to comments.
 *	the_hdr:	Header struct to add to.
 * Outputs:
 * 	the_hdr:	Modified header struct.
 *	Returns previous value;
 * Assumptions:
 * 	value pointer can be used as is (data is NOT copied).
 * Algorithm:
 * 	Find match if any, else add at end (realloc to make bigger).
 */
const char *
rle_putcom(const char *value, rle_hdr *the_hdr)
{
    register const char ** cp, ** old_comments;
    const char * v;
    int i;

    if ( the_hdr->comments == NULL )
    {
	the_hdr->comments = (const char **)malloc( 2 * sizeof(char *) );
	the_hdr->comments[0] = value;
	the_hdr->comments[1] = NULL;
    }
    else
    {
	for ( i = 2, cp = the_hdr->comments; *cp != NULL; i++, cp++ )
	    if ( match( value, *cp ) != NULL )
	    {
		v = *cp;
		*cp = value;
		return v;
	    }
	/* Not found */
	/* Can't realloc because somebody else might be pointing to this
	 * comments block.  Of course, if this were true, then the
	 * assignment above would change the comments for two headers.
	 * But at least, that won't crash the program.  Realloc will.
	 * This would work a lot better in C++, where hdr1 = hdr2
	 * could copy the pointers, too.
	 */
	old_comments = the_hdr->comments;
	the_hdr->comments = (const char **)malloc(i * sizeof(char *) );
	the_hdr->comments[--i] = NULL;
	the_hdr->comments[--i] = value;
	for ( i--; i >= 0; i-- )
	    the_hdr->comments[i] = old_comments[i];
    }

    return NULL;
}

/*****************************************************************
 * TAG( rle_delcom )
 * 
 * Delete a comment from header struct.
 * Inputs:
 * 	name:		Name of comment to delete.
 *	the_hdr:	Header to delete comment from.
 * Outputs:
 * 	the_hdr:	Modified header struct.
 *	Returns original comment value.
 * Assumptions:
 *	[None]
 * Algorithm:
 *	[None]
 */
const char *
rle_delcom(const char *name, rle_hdr *the_hdr)
{
    register const char ** cp;
    const char * v = NULL;

    if ( the_hdr->comments == NULL )
	return NULL;
    else
    {
	for ( cp = the_hdr->comments; *cp != NULL; cp++ )
	    if ( match( name, *cp ) != NULL )
	    {
		v = *cp;
		for ( ; *cp != NULL; cp++ )
		    *cp = cp[1];
		break;
	    }
	/* Not found */
    }

    if ( *the_hdr->comments == NULL )
	the_hdr->comments = NULL;

    return v;
}
@


11.7
log
@change conf.h to a wrapped config.h
@
text
@@


11.6
log
@merge of ansi-6-0-branch into HEAD
@
text
@d28 5
a32 1
#include "conf.h"
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d55 1
a55 3
match( n, v )
const char *n;
const char *v;
d85 1
a85 3
rle_putcom( value, the_hdr )
const char * value;
rle_hdr * the_hdr;
d141 1
a141 3
rle_delcom( name, the_hdr )
const char * name;
rle_hdr *the_hdr ;
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d55 3
a57 1
match(const char *n, const char *v)
d87 3
a89 1
rle_putcom(const char *value, rle_hdr *the_hdr)
d145 3
a147 1
rle_delcom(const char *name, rle_hdr *the_hdr)
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d55 3
a57 1
match(const char *n, const char *v)
d87 3
a89 1
rle_putcom(const char *value, rle_hdr *the_hdr)
d145 3
a147 1
rle_delcom(const char *name, rle_hdr *the_hdr)
@


11.3
log
@CONST to const
@
text
@d55 1
a55 3
match( n, v )
const char *n;
const char *v;
d85 1
a85 3
rle_putcom( value, the_hdr )
const char * value;
rle_hdr * the_hdr;
d141 1
a141 3
rle_delcom( name, the_hdr )
const char * name;
rle_hdr *the_hdr ;
@


11.2
log
@
lint
@
text
@d56 2
a57 2
CONST char *n;
CONST char *v;
d86 1
a86 1
CONST char *
d88 1
a88 1
CONST char * value;
d91 2
a92 2
    register CONST char ** cp, ** old_comments;
    CONST char * v;
d97 1
a97 1
	the_hdr->comments = (CONST char **)malloc( 2 * sizeof(char *) );
d119 1
a119 1
	the_hdr->comments = (CONST char **)malloc(i * sizeof(char *) );
d144 1
a144 1
CONST char *
d146 1
a146 1
CONST char * name;
d149 2
a150 2
    register CONST char ** cp;
    CONST char * v = NULL;
@


11.1
log
@Release_4.4
@
text
@d62 1
d67 1
a67 1

@


10.3
log
@Mods for CRAY.
@
text
@@


10.2
log
@Altered #defines and #includes to conform to BRL-CAD standards
@
text
@d56 2
a57 2
register char *n;
register char *v;
d63 1
a63 1
	    return v;
d65 1
a65 1
	    return ++v;
@


10.1
log
@Release_4.0
@
text
@d28 2
d31 3
a34 5
#ifdef VOID_STAR
void *malloc();
#else
char *malloc();
#endif
d85 1
a85 1
CONST_DECL char *
d87 1
a87 1
CONST_DECL char * value;
d90 2
a91 2
    register CONST_DECL char ** cp, ** old_comments;
    CONST_DECL char * v;
d96 1
a96 1
	the_hdr->comments = (CONST_DECL char **)malloc( 2 * sizeof(char *) );
d118 1
a118 1
	the_hdr->comments = (CONST_DECL char **)malloc(i * sizeof(char *) );
d143 1
a143 1
CONST_DECL char *
d145 1
a145 1
CONST_DECL char * name;
d148 2
a149 2
    register CONST_DECL char ** cp;
    CONST_DECL char * v = NULL;
@


1.2
log
@changed include of rle*.h files to use quotes instead of <>
@
text
@@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
#include <rle.h>
@
