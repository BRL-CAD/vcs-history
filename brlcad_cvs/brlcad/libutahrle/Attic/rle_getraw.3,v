head	11.2;
access;
symbols
	ansi-20040405-merged:11.1
	postmerge-20040405-ansi:11.1
	premerge-20040404-ansi:11.1
	postmerge-autoconf:11.1
	autoconf-freeze:11.1
	premerge-autoconf:11.1
	postmerge-20040315-windows:11.1
	premerge-20040315-windows:11.1
	windows-20040315-freeze:11.1
	autoconf-20031203:11.1
	autoconf-20031202:11.1
	autoconf-branch:11.1.0.14
	phong-branch:11.1.0.12
	photonmap-branch:11.1.0.10
	rel-6-1-DP:11.1
	windows-branch:11.1.0.8
	rel-6-0-2:11.1
	ansi-branch:11.1.0.6
	rel-6-0-1-branch:11.1.0.4
	hartley-6-0-post:11.1
	hartley-6-0-pre:11.1
	rel-6-0-1:11.1
	rel-6-0:11.1
	rel-5-4:11.1
	offsite-5-3-pre:11.1
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;


11.2
date	2004.05.21.17.59.44;	author morrison;	state dead;
branches;
next	11.1;

11.1
date	95.01.04.10.05.14;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.38.28;	author mike;	state Rel4_0;
branches;
next	1.1;

1.1
date	91.01.05.02.16.53;	author butler;	state Exp;
branches;
next	;


desc
@Utah Raster Toolkit Release 3 patchlevel 2 distribution
@


11.2
log
@moved from top-level to src/other/.
@
text
@.\" Copyright (c) 1986, 1987, University of Utah
.TH RLE_GETRAW 3 2/2/87 3
.UC 4 

.SH NAME
rle_getraw \- Read run length encoded data from an RLE file.
.br
rle_freeraw \- Free pixel storage allocated by rle_getraw.
.SH SYNOPSIS
.B
#include <rle.h>
.br
.B
#include <rle_raw.h>
.sp
.B
unsigned int rle_getraw( the_hdr, scanraw, nraw )
.br
.B
rle_hdr * the_hdr;
.br
.B
rle_op ** scanraw;
.br
.B
int * nraw;
.sp
.B
void rle_freeraw( the_hdr, scanraw, nraw );
.br
.B
rle_hdr * the_hdr;
.br
.B
rle_op ** scanraw;
.br
.B
int * nraw;
.SH DESCRIPTION
.I Rle_getraw
can be used to read information from an RLE file in the "raw" form.

The
.IR scanraw
argument is an array of pointers to arrays of 
.IR rle_op (3)
structures.  Each
.I rle_op
structure specifies a run or sequence of pixel values.  The array
.I nraw
gives the number of 
.I rle_op
structures for each channel.  I.e.,
.I nraw[i]
is the length of the array pointed to by
.IR scanraw[i] .
.PP
Return value is the current scanline number.  Returns 32768 at EOF.
.PP
Sufficient space must be allocated in the arrays of 
.I rle_op
structures to hold the data read from the file.  A function,
.IR rle_raw_alloc (3),
is provided to make this easier.  The storage required by any pixel
sequences in the input will be dynamically allocated by
.IR rle_getraw .

The pixel storage allocated dynamically by
.IR rle_getraw (3)
must be freed to avoid memory leaks.  This is most easily accomplished
by calling 
.IR rle_freeraw .
The argument
.I scanraw
points to an array of 
.I rle_op
structures, with
.I nraw
indicating the number of structures in each channel.  All pixel data
arrays will be freed by the call to
.IR rle_freeraw .  
.SH EXAMPLE
The usual code looks something like
.nf
	rle_hdr in_hdr, out_hdr;
	rle_op **raw;
	int *nraw;
	while ( rle_getraw( &in_hdr, raw, nraw ) != 32768 )
	{
		/* Process data. */
		rle_putraw( &out_hdr, raw, nraw );
		rle_freeraw( &in_hdr, raw, nraw );
	}
.fi
.SH SEE ALSO
.na
.IR rle_hdr (3),
.IR rle_op (3),
.IR rle_putraw (3),
.IR rle_raw_alloc (3),
.IR rle_raw_free (3),
.IR rle_getrow (3),
.IR rle_getskip (3),
.IR librle (3),
.IR RLE (5).
.ad b
.SH AUTHOR
Spencer W. Thomas
.br
University of Utah

@


11.1
log
@Release_4.4
@
text
@@


10.1
log
@Release_4.0
@
text
@@


1.1
log
@Initial revision
@
text
@@
