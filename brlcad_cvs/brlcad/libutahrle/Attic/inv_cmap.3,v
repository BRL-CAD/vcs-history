head	11.2;
access;
symbols
	ansi-20040405-merged:11.1
	postmerge-20040405-ansi:11.1
	premerge-20040404-ansi:11.1
	postmerge-autoconf:11.1
	autoconf-freeze:11.1
	premerge-autoconf:11.1
	postmerge-20040315-windows:11.1
	premerge-20040315-windows:11.1
	windows-20040315-freeze:11.1
	autoconf-20031203:11.1
	autoconf-20031202:11.1
	autoconf-branch:11.1.0.14
	phong-branch:11.1.0.12
	photonmap-branch:11.1.0.10
	rel-6-1-DP:11.1
	windows-branch:11.1.0.8
	rel-6-0-2:11.1
	ansi-branch:11.1.0.6
	rel-6-0-1-branch:11.1.0.4
	hartley-6-0-post:11.1
	hartley-6-0-pre:11.1
	rel-6-0-1:11.1
	rel-6-0:11.1
	rel-5-4:11.1
	offsite-5-3-pre:11.1
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;


11.2
date	2004.05.21.17.59.41;	author morrison;	state dead;
branches;
next	11.1;

11.1
date	95.01.04.10.05.03;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.38.19;	author mike;	state Rel4_0;
branches;
next	1.1;

1.1
date	91.01.05.02.16.40;	author butler;	state Exp;
branches;
next	;


desc
@Utah Raster Toolkit Release 3 patchlevel 2 distribution
@


11.2
log
@moved from top-level to src/other/.
@
text
@.\" -*- Text -*-
.\" Copyright (c) 1990, University of Michigan
.\" Template man page.  
.TH INV_CMAP 3 "Month DD, YYYY" 1
.UC 4 
.SH NAME
inv_cmap \- efficiently compute an inverse colormap
.SH SYNOPSIS
.HP
.B
void inv_cmap( colors, colormap, bits, dist_buf, rgbmap )
.LP
.B
int colors, bits;
.br
.B
unsigned char *colormap[3], *rgbmap;
.br
.B
unsigned long *dist_buf;
.SH DESCRIPTION
.I Inv_cmap
computes an inverse colormap to translate an RGB color to the nearest
color in the given \fIcolormap\fP.  The arguments are
.TP
.I colors
The number of colors in the input colormap.  Must be \(le 256.
.TP
.I colormap
The input colormap.  The \fIi\fPth color is (\fIColormap[0][i]\fP,
\fIColormap[1][i]\fP, \fIColormap[2][i]\fP).
.TP
.I bits
Controls the size and precision of the inverse colormap.  The
resulting colormap will be a cube \fI2^bits\fP on a side, and will
therefore contain \fI2^(3*bits)\fP entries.  RGB colors must be
quantized to \fIbits\fP bits before using the inverse colormap.
.TP
.I dist_buf
Temporary storage used by \fIinv_cmap\fP.  It should contain at least
\fI2^(3*bits)\fP elements.
.TP
.I rgbmap
The inverse colormap.  Should be allocated with at least
\fI2^(3*bits)\fP elements.  After calling \fIinv_cmap\fP, an RGB color
(r,g,b) can be mapped to its closest representative in \fIcolormap\fP
by evaluating
.br
#define quantize(p) ((p)>>(8-bits))
.br
rgbmap[ (((quantize(r) << bits) | quantize(g)) << bits) | quantize(b) ]
.PP
Predicted performance is \fIO(2^(3*bits)*log(colors))\fP.  The
measured performance is sublinear (but not as good as \fIlog\fP) in
the number of input colors and also in the size of the output inverse
colormap. (I.e., it goes up more slowly than \fI2^(3*bits)\fP.)
.SH SEE ALSO
.IR colorquant (3).
.SH AUTHOR
Spencer W. Thomas
@


11.1
log
@Release_4.4
@
text
@@


10.1
log
@Release_4.0
@
text
@@


1.1
log
@Initial revision
@
text
@@
