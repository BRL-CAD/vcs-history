head	1.12;
access;
symbols
	ansi-20040405-merged:1.8.2.2
	postmerge-20040405-ansi:1.10
	premerge-20040404-ansi:1.9
	postmerge-autoconf:1.9
	autoconf-freeze:1.8.10.2
	premerge-autoconf:1.9
	postmerge-20040315-windows:1.9
	premerge-20040315-windows:1.9
	windows-20040315-freeze:1.8.4.1
	autoconf-20031203:1.8
	autoconf-20031202:1.8
	autoconf-branch:1.8.0.10
	phong-branch:1.8.0.8
	photonmap-branch:1.8.0.6
	rel-6-1-DP:1.8
	windows-branch:1.8.0.4
	rel-6-0-2:1.6
	ansi-branch:1.8.0.2
	rel-6-0-1-branch:1.6.0.2
	hartley-6-0-post:1.7
	hartley-6-0-pre:1.6
	rel-6-0-1:1.6
	rel-6-0:1.6
	rel-5-4:1.4
	offsite-5-3-pre:1.5
	rel-5-3:1.4
	rel-5-2:1.4
	rel-5-1-branch:1.4.0.2
	rel-5-1:1.4
	rel-5-0:1.3
	rel-5-0-beta:1.3
	rel-4-5:1.1
	ctj-4-5-post:1.1
	ctj-4-5-pre:1.1;
locks; strict;
comment	@ * @;


1.12
date	2004.05.21.14.57.51;	author morrison;	state dead;
branches;
next	1.11;

1.11
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.02.17.39.46;	author morrison;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.20.17.09.02;	author jra;	state Exp;
branches
	1.8.2.1
	1.8.4.1
	1.8.10.1;
next	1.7;

1.7
date	2002.08.15.20.56.13;	author hartley;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.10.20.57.06;	author butler;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.23.19.04.45;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.31.16.03.09;	author jra;	state Exp;
branches;
next	1.3;

1.3
date	98.06.25.07.17.25;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	98.06.01.20.03.43;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	97.03.21.18.58.40;	author pjt;	state Exp;
branches;
next	;

1.8.2.1
date	2002.09.19.18.02.40;	author morrison;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2004.03.17.21.23.29;	author morrison;	state Exp;
branches;
next	;

1.8.4.1
date	2004.03.11.23.52.32;	author morrison;	state Exp;
branches;
next	;

1.8.10.1
date	2004.02.12.19.43.10;	author erikg;	state Exp;
branches;
next	1.8.10.2;

1.8.10.2
date	2004.03.15.14.08.13;	author erikg;	state Exp;
branches;
next	;


desc
@     Quantize the colors in a pix(5) stream
@


1.12
log
@moved to src/util/
@
text
@/*
 *			P I X C L U M P . C
 *
 *	Quantize the color values in a PIX(5) stream to
 *	a set of specified values
 *
 *  Author -
 *	Paul J. Tanenbaum
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1997-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/pixclump.c,v 1.11 2004/05/10 15:30:50 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "externs.h"		/* For getopt(), etc. */
#include "bu.h"
#include "vmath.h"

#define	RED			0
#define	GRN			1
#define	BLU			2

/*
 *	Global variables
 */
unsigned char	(*color_tbl)[3];	/* Table of quantized colors */
int		color_tbl_size;		/* Capacity of table */
int		next_color;		/* Number of colors now in table */
static int	debug = 0;
#define	PC_DEBUG_TABLE		0x01
#define	PC_DEBUG_MATCH		0x02
#define	PC_DEBUG_OUTPUT		0x04

static char usage[] = "\
Usage: 'pixclump [-c R/G/B] [-f color_file] [-x debug_flags]\n\
		 [infile.pix [outfile.pix]]'\n";
#define OPT_STRING	"c:f:x:?"

static void print_usage (void)
{
    (void) bu_log("%s", usage);
}

static void print_debug_usage (void)
{
    static char	*flag_denotation[] =
		{
		    "",
		    "color table",
		    "finding best pixel match",
		    "writing the pixels out",
		    0
		};
    int		i;

    bu_log("Debug bits and their meanings...\n");
    for (i = 1; (flag_denotation[i]) != 0; ++i)
	bu_log("0x%04x	%s\n", 1 << (i-1), flag_denotation[i]);
}

static void add_to_table (unsigned char *rgb)
{
    /*
     *	Ensure that the color table can accomodate the new entry
     */
    if (next_color == color_tbl_size)
    {
	color_tbl_size *= 2;
	color_tbl = (unsigned char (*)[3])
	    bu_realloc((genptr_t) color_tbl,
			color_tbl_size * 3 * sizeof(unsigned char),
			"color table");
    }
    VMOVE(color_tbl[next_color], rgb);
    ++next_color;
}

static void fill_table (char *f_name)
{
    char		*bp;
    FILE		*fp;
    int			line_nm;
    unsigned char	rgb[3];
    struct bu_vls	v;

    if ((fp = fopen(f_name, "r")) == NULL)
    {
	bu_log ("Cannot open color file '%s'\n", optarg);
	exit (1);
    }

    bu_vls_init(&v);
    for (line_nm = 1; bu_vls_gets(&v, fp) != -1;
	++line_nm, bu_vls_trunc(&v, 0))
    {
	for (bp = bu_vls_addr(&v); (*bp == ' ') || (*bp == '\t'); ++bp)
	    ;
	if ((*bp == '#') || (*bp == '\0'))
	    continue;
	if (! bu_str_to_rgb(bp, rgb))
	{
	    bu_log("Illegal color: '%s' on line %d of file '%s'\n",
		bp, line_nm, f_name);
	    exit (1);
	}
	add_to_table(rgb);
    }
}

static void print_table (void)
{
    int	i;

    printf("-----------\nColor Table\n-----------\n");
    for (i = 0; i < next_color; ++i)
	printf("%3d %3d %3d\n",
	    color_tbl[i][RED], color_tbl[i][GRN], color_tbl[i][BLU]);
    printf("-----------\n");
}

/*
 *		C O L O R _ D I F F ( )
 *
 *	Returns the square of the Euclidean distance in RGB space
 *	between a specified pixel (R/G/B triple) and a specified
 *	entry in the color table.
 */
static int color_diff (unsigned char *pix, int i)
{
    unsigned char	*cte;	/* The specified entry in the color table */

    cte = color_tbl[i];

    return (
	(pix[RED] - cte[RED]) * (pix[RED] - cte[RED]) +
	(pix[GRN] - cte[GRN]) * (pix[GRN] - cte[GRN]) +
	(pix[BLU] - cte[BLU]) * (pix[BLU] - cte[BLU])
    );
}

int
main (int argc, char **argv)
{
    char		*cf_name = 0;	/* name of color file */
    char		*inf_name;	/* name of input stream */
    char		*outf_name = NULL;	/*  "   "  output   "   */
    unsigned char	pixbuf[3];	/* the current input pixel */
    FILE		*infp = NULL;	/* input stream */
    FILE		*outfp = NULL;	/* output   "   */
    int			ch;		/* current char in command line */
    int			i;		/* dummy loop indices */
    unsigned char	rgb[3];		/* Specified color */
    int			best_color;	/* index of best match to pixbuf */
    int			best_diff;	/* error in best match */
    int			this_diff;	/* pixel-color_tbl difference */

    extern int	optind;			/* index from getopt(3C) */
    extern char	*optarg;		/* argument from getopt(3C) */

    /*
     *	Initialize the color table
     */
    color_tbl_size = 8;
    color_tbl = (unsigned char (*)[3])
	bu_malloc(color_tbl_size * 3 * sizeof(unsigned char), "color table");
    next_color = 0;

    /*
     *	Process the command line
     */
    while ((ch = getopt(argc, argv, OPT_STRING)) != EOF)
	switch (ch)
	{
	    case 'c':
		if (! bu_str_to_rgb(optarg, rgb))
		{
		    bu_log("Illegal color: '%s'\n", optarg);
		    print_usage();
		    exit (1);
		}
		add_to_table(rgb);
		cf_name = 0;
		break;
	    case 'f':
		cf_name = optarg;
		next_color = 0;
		break;
	    case 'x':
		if (sscanf(optarg, "%x", (unsigned int *) &debug) != 1)
		{
		    bu_log("Invalid debug-flag value: '%s'\n", optarg);
		    print_usage();
		    print_debug_usage();
		    exit (1);
		}
		break;
	    case '?':
	    default:
		print_usage();
		exit (ch != '?');
	}
    switch (argc - optind)
    {
	case 0:
	    inf_name = "stdin";
	    infp = stdin;
	    /* Break intentionally missing */
	case 1:
	    outf_name = "stdout";
	    outfp = stdout;
	    /* Break intentionally missing */
	case 2:
	    break;
	default:
	    print_usage();
	    exit (1);
    }

    /*
     *	Open input and output files, as necessary
     */
    if (infp == NULL)
    {
	inf_name = argv[optind];
	if ((infp = fopen(inf_name, "r")) == NULL)
	{
	    bu_log ("Cannot open input file '%s'\n", inf_name);
	    exit (1);
	}
	if (outfp == NULL)
	{
	    outf_name = argv[++optind];
	    if ((outfp = fopen(outf_name, "w")) == NULL)
	    {
		bu_log ("Cannot open output file '%s'\n", outf_name);
		exit (1);
	    }
	}
    }

    /*
     *	Ensure that infp is kosher,
     */
    if (infp == stdin)
    {
	if (isatty(fileno(stdin)))
	{
	    bu_log("FATAL: pixclump reads only from file or pipe\n");
	    print_usage();
	    exit (1);
	}
    }

    /*
     *	Ensure that the color table is nonempty
     */
    if (cf_name != 0)
	fill_table(cf_name);
    if (next_color == 0)
    {
	bu_log("pixclump: No colors specified\n");
	print_usage();
	exit (1);
    }
    if (debug & PC_DEBUG_TABLE)
	print_table();

    while (fread((void *) pixbuf, 3 * sizeof(unsigned char), 1, infp) == 1)
    {
	best_color = 0;
	best_diff = color_diff(pixbuf, 0);
	for (i = 1; i < next_color; ++i)
	{
	    if ((this_diff = color_diff(pixbuf, i)) < best_diff)
	    {
		best_color = i;
		best_diff = this_diff;
	    }
	    if (debug & PC_DEBUG_MATCH)
		bu_log("p=%3d/%3d/%3d, t=%d %3d/%3d/%3d,  b=%d, %3d/%3d/%3d\n",
		    pixbuf[RED], pixbuf[GRN], pixbuf[BLU],
		    i,
		    color_tbl[i][RED],
		    color_tbl[i][GRN],
		    color_tbl[i][BLU],
		    best_color,
		    color_tbl[best_color][RED],
		    color_tbl[best_color][GRN],
		    color_tbl[best_color][BLU]);
	}
	if (fwrite((genptr_t) color_tbl[best_color],
		    3 * sizeof(unsigned char), 1, outfp) != 1)
	{
	    bu_log("pixclump:  Error writing pixel to file '%s'\n", outf_name);
	    exit (1);
	}
    }
    return 0;
}
@


1.11
log
@change conf.h to a wrapped config.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pixclump.c,v 1.10 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


1.10
log
@merge of ansi-6-0-branch into head
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d22 5
a26 1
#include "conf.h"
@


1.9
log
@update copyright to include span through 2003
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.8 2002/08/20 17:09:02 jra Exp $ (BRL)";
d50 1
a50 1
static void print_usage ()
d55 1
a55 1
static void print_debug_usage ()
d72 1
a72 4
static void add_to_table (rgb)

unsigned char	*rgb;

d89 1
a89 4
static void fill_table (f_name)

char	*f_name;

d121 1
a121 2
static void print_table ()

d139 1
a139 5
static int color_diff (pix, i)

unsigned char	*pix;
int		i;

d153 1
a153 5
main (argc, argv)

int	argc;
char	*argv[];

@


1.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1997 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.6 2001/08/10 20:57:06 butler Exp $ (BRL)";
@


1.8.4.1
log
@sync to HEAD...
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1997-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/pixclump.c,v 1.9 2004/02/02 17:39:46 morrison Exp $ (BRL)";
@


1.8.10.1
log
@merge from HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1997-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.9 2004/02/02 17:39:46 morrison Exp $ (BRL)";
@


1.8.10.2
log
@merge from head
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.8.10.1 2004/02/12 19:43:10 erikg Exp $ (BRL)";
@


1.8.2.1
log
@Initial ANSIfication
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.8 2002/08/20 17:09:02 jra Exp $ (BRL)";
d50 1
a50 1
static void print_usage (void)
d55 1
a55 1
static void print_debug_usage (void)
d72 4
a75 1
static void add_to_table (unsigned char *rgb)
d92 4
a95 1
static void fill_table (char *f_name)
d127 2
a128 1
static void print_table (void)
d146 5
a150 1
static int color_diff (unsigned char *pix, int i)
d164 5
a168 1
main (int argc, char **argv)
@


1.8.2.2
log
@sync branch with HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1997-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


1.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d50 1
a50 1
static void print_usage (void)
d55 1
a55 1
static void print_debug_usage (void)
d72 4
a75 1
static void add_to_table (unsigned char *rgb)
d92 4
a95 1
static void fill_table (char *f_name)
d127 2
a128 1
static void print_table (void)
d146 5
a150 1
static int color_diff (unsigned char *pix, int i)
d164 5
a168 1
main (int argc, char **argv)
@


1.6
log
@Misc compiler warnings eliminated
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.5 2000/08/23 19:04:45 mike Exp $ (BRL)";
d50 1
a50 1
static void print_usage ()
d55 1
a55 1
static void print_debug_usage ()
d72 1
a72 4
static void add_to_table (rgb)

unsigned char	*rgb;

d89 1
a89 4
static void fill_table (f_name)

char	*f_name;

d121 1
a121 2
static void print_table ()

d139 1
a139 5
static int color_diff (pix, i)

unsigned char	*pix;
int		i;

d153 1
a153 5
main (argc, argv)

int	argc;
char	*argv[];

@


1.5
log
@
const RCSid
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.4 2000/01/31 16:03:09 jra Exp $ (BRL)";
d163 1
d172 1
a172 1
    char		*outf_name;	/*  "   "  output   "   */
d215 1
a215 1
		if (sscanf(optarg, "%x", &debug) != 1)
d324 1
@


1.4
log
@Eliminated some unused variables
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.3 1998/06/25 07:17:25 mike Exp $ (BRL)";
@


1.3
log
@Mods for compiling on sun4
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixclump.c,v 1.2 1998/06/01 20:03:43 pjt Exp $ (BRL)";
a100 1
    int			len;
d176 1
a176 1
    int			i, j;		/* dummy loop indices */
@


1.2
log
@Converted to use bu_str_to_rgb()
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixclump.c,v 1.1 1997/03/21 18:58:40 pjt Exp $ (BRL)";
d55 1
a55 1
static void print_debug_usage (void)
d317 1
a317 1
	if (fwrite((const void *) color_tbl[best_color],
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/pixweight/RCS/pixweight.c,v 1.1 1995/09/21 18:24:11 pjt Exp pjt $ (BRL)";
d28 1
d72 1
a72 1
static void add_to_table (red, grn, blu)
d74 1
a74 3
int	red;
int	grn;
int	blu;
d88 1
a88 3
    color_tbl[next_color][RED] = red;
    color_tbl[next_color][GRN] = grn;
    color_tbl[next_color][BLU] = blu;
d100 1
a100 3
    int 		red;
    int			grn;
    int			blu;
d118 1
a118 1
	if (sscanf(bp, "%d%d%d", &red, &grn, &blu) != 3)
d120 1
a120 1
	    bu_log("Invalid color: '%s' on line %d of file '%s'\n",
d124 1
a124 8
	if ((red <   0) || (grn <   0) || (blu <   0)
	 || (red > 255) || (grn > 255) || (blu > 255))
	{
	    bu_log("Illegal color: %d %d %d on line %d of file '%s'\n",
		red, grn, blu, line_nm, f_name);
	    exit (1);
	}
	add_to_table(red, grn, blu);
d178 1
a178 1
    int			red, grn, blu;	/* Specified color */
d201 1
a201 8
		if (sscanf(optarg, "%d/%d/%d", &red, &grn, &blu) != 3)
		{
		    bu_log("Invalid color: '%s'\n", optarg);
		    print_usage();
		    exit (1);
		}
		if ((red <   0) || (grn <   0) || (blu <   0)
		 || (red > 255) || (grn > 255) || (blu > 255))
d207 1
a207 1
		add_to_table(red, grn, blu);
@
