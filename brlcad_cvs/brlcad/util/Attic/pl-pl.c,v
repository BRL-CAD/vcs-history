head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.2
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.2
	premerge-autoconf:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.1
	offsite-5-3-pre:11.3
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.14.57.59;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.51;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.50;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.09.05;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.56.16;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2001.08.10.20.57.08;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.07.20.27.59;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	2000.09.01.03.24.02;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.23.19.05.00;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.13.11;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.49.06;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	91.07.22.23.25.35;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	91.06.19.10.07.20;	author mmark;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.11.09;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.43.43;	author mike;	state Rel3_0;
branches;
next	1.3;

1.3
date	88.09.07.16.50.02;	author phil;	state Exp;
branches;
next	1.2;

1.2
date	88.09.02.01.30.14;	author phil;	state Exp;
branches;
next	1.1;

1.1
date	88.07.09.23.16.46;	author phil;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.43;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.23.35;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.52.35;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.02.12.19.43.11;	author erikg;	state Exp;
branches;
next	11.7.10.2;

11.7.10.2
date	2004.03.15.14.08.20;	author erikg;	state Exp;
branches;
next	;


desc
@extended unix plot compressor
@


11.11
log
@moved to src/util/
@
text
@/*
 *			P L - P L . C
 *
 *  Plot smasher.
 *  Gets rid of (floating point, flush, 3D, color, text).
 *
 *  Author -
 *	Phillip Dykstra
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1988-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/pl-pl.c,v 11.10 2004/05/10 15:30:51 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <unistd.h>

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#include "machine.h"
#include "bu.h"

struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};

void	putshort(short int s);
void    putieee(double d);
void    getstring(void);
void	putargs(struct uplot *up);
void    getargs(struct uplot *up);
void	doscale(void);

#define	TBAD	0	/* no such command */
#define TNONE	1	/* no arguments */
#define TSHORT	2	/* Vax 16-bit short */
#define	TIEEE	3	/* IEEE 64-bit floating */
#define	TCHAR	4	/* unsigned chars */
#define	TSTRING	5	/* linefeed terminated string */

struct uplot uerror = { 0, 0, 0 };
struct uplot letters[] = {
/*A*/	{ 0, 0, 0, 0 },
/*B*/	{ 0, 0, 0, 0 },
/*C*/	{ TCHAR, 3, "color", 0 },
/*D*/	{ 0, 0, 0, 0 },
/*E*/	{ 0, 0, 0, 0 },
/*F*/	{ TNONE, 0, "flush", 0 },
/*G*/	{ 0, 0, 0, 0 },
/*H*/	{ 0, 0, 0, 0 },
/*I*/	{ 0, 0, 0, 0 },
/*J*/	{ 0, 0, 0, 0 },
/*K*/	{ 0, 0, 0, 0 },
/*L*/	{ TSHORT, 6, "3line", 1 },
/*M*/	{ TSHORT, 3, "3move", 1 },
/*N*/	{ TSHORT, 3, "3cont", 1 },
/*O*/	{ TIEEE, 3, "d_3move", 1 },
/*P*/	{ TSHORT, 3, "3point", 1 },
/*Q*/	{ TIEEE, 3, "d_3cont", 1 },
/*R*/	{ 0, 0, 0, 0 },
/*S*/	{ TSHORT, 6, "3space", 1 },
/*T*/	{ 0, 0, 0, 0 },
/*U*/	{ 0, 0, 0, 0 },
/*V*/	{ TIEEE, 6, "d_3line", 1 },
/*W*/	{ TIEEE, 6, "d_3space", 1 },
/*X*/	{ TIEEE, 3, "d_3point", 1 },
/*Y*/	{ 0, 0, 0, 0 },
/*Z*/	{ 0, 0, 0, 0 },
/*[*/	{ 0, 0, 0, 0 },
/*\*/	{ 0, 0, 0, 0 },
/*]*/	{ 0, 0, 0, 0 },
/*^*/	{ 0, 0, 0, 0 },
/*_*/	{ 0, 0, 0, 0 },
/*`*/	{ 0, 0, 0, 0 },
/*a*/	{ TSHORT, 6, "arc", 0 },
/*b*/	{ 0, 0, 0, 0 },
/*c*/	{ TSHORT, 3, "circle", 0 },
/*d*/	{ 0, 0, 0, 0 },
/*e*/	{ TNONE, 0, "erase", 0 },
/*f*/	{ TSTRING, 1, "linmod", 0 },
/*g*/	{ 0, 0, 0, 0 },
/*h*/	{ 0, 0, 0, 0 },
/*i*/	{ TIEEE, 3, "d_circle", 0 },
/*j*/	{ 0, 0, 0, 0 },
/*k*/	{ 0, 0, 0, 0 },
/*l*/	{ TSHORT, 4, "line", 0 },
/*m*/	{ TSHORT, 2, "move", 0 },
/*n*/	{ TSHORT, 2, "cont", 0 },
/*o*/	{ TIEEE, 2, "d_move", 0 },
/*p*/	{ TSHORT, 2, "point", 0 },
/*q*/	{ TIEEE, 2, "d_cont", 0 },
/*r*/	{ TIEEE, 6, "d_arc", 0 },
/*s*/	{ TSHORT, 4, "space", 0 },
/*t*/	{ TSTRING, 1, "label", 0 },
/*u*/	{ 0, 0, 0, 0 },
/*v*/	{ TIEEE, 4, "d_line", 0 },
/*w*/	{ TIEEE, 4, "d_space", 0 },
/*x*/	{ TIEEE, 2, "d_point", 0 },
/*y*/	{ 0, 0, 0, 0 },
/*z*/	{ 0, 0, 0, 0 }
};

double	getieee(void);
int	verbose;
double	arg[6];			/* parsed plot command arguments */
double	sp[6];			/* space command */
char	strarg[512];		/* string buffer */
double	cx, cy, cz;		/* center */
double	scale = 0;
int	seenscale = 0;

int	nofloat = 1;
int	noflush = 1;
int	nocolor = 1;
int	no3d = 1;

static char usage[] = "\
Usage: pl-pl [-v] [-S] < unix_plot > unix_plot\n";

int
main(int argc, char **argv)
{
	register int	c;
	struct	uplot *up;

	while( argc > 1 ) {
		if( strcmp(argv[1], "-v") == 0 ) {
			verbose++;
		} else if( strcmp(argv[1], "-S") == 0 ) {
			scale = 1;
		} else
			break;

		argc--;
		argv++;
	}
	if( isatty(fileno(stdin)) ) {
		fprintf( stderr, usage );
		exit( 1 );
	}

	/* Assume default space, in case one is not provided */
	sp[0] = sp[1] = sp[2] = -32767;
	sp[3] = sp[4] = sp[5] = 32767;
	if( scale )
		doscale();

	while( (c = getchar()) != EOF ) {
		/* look it up */
		if( c < 'A' || c > 'z' ) {
			up = &uerror;
		} else {
			up = &letters[ c - 'A' ];
		}

		if( up->targ == TBAD ) {
			fprintf( stderr, "Bad command '%c' (0x%02x)\n", c, c );
			continue;
		}

		if( up->narg > 0 )
			getargs( up );

		/* check for space command */
		switch( c ) {
		case 's':
		case 'w':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = 0;
			sp[3] = arg[2];
			sp[4] = arg[3];
			sp[5] = 0;
			if( scale )
				doscale();
			seenscale++;
			break;
		case 'S':
		case 'W':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = arg[2];
			sp[3] = arg[3];
			sp[4] = arg[4];
			sp[5] = arg[5];
			if( scale )
				doscale();
			seenscale++;
			break;
		}

		/* do it */
		switch( c ) {
		case 's':
		case 'm':
		case 'n':
		case 'p':
		case 'l':
		case 'c':
		case 'a':
		case 'f':
		case 'e':
			/* The are as generic as unix plot gets */
			putchar( c );
			putargs( up );
			break;

		case 't': /* XXX vector lists */
			putchar( c );
			putargs( up );
			break;

		case 'C':
			if( nocolor == 0 ) {
				putchar( c );
				putargs( up );
			}
			break;

		case 'F':
			if( noflush == 0 ) {
				putchar( c );
				putargs( up );
			}
			break;

		case 'S':
		case 'M':
		case 'N':
		case 'P':
		case 'L':
			if( no3d )
				putchar( c + 'a' - 'A' );
			else
				putchar( c );
			putargs( up );
			break;

		case 'w':
		case 'o':
		case 'q':
		case 'x':
		case 'v':
		case 'i':
		case 'r':
			/* 2d floating */
			if( nofloat ) {
				/* to 2d integer */
				if( c == 'w' )
					putchar( 's' );
				else if( c == 'o' )
					putchar( 'm' );
				else if( c == 'q' )
					putchar( 'n' );
				else if( c == 'x' )
					putchar( 'p' );
				else if( c == 'v' )
					putchar( 'l' );
				else if( c == 'i' )
					putchar( 'c' );
				else if( c == 'r' )
					putchar( 'a' );
			} else {
				putchar( c );
			}
			putargs( up );
			break;

		case 'W':
		case 'O':
		case 'Q':
		case 'X':
		case 'V':
			/* 3d floating */
			if( nofloat ) {
				if( no3d ) {
					/* to 2d integer */
					if( c == 'W' )
						putchar( 's' );
					else if( c == 'O' )
						putchar( 'm' );
					else if( c == 'Q' )
						putchar( 'n' );
					else if( c == 'X' )
						putchar( 'p' );
					else if( c == 'V' )
						putchar( 'l' );
				} else {
					/* to 3d integer */
					if( c == 'W' )
						putchar( 'S' );
					else if( c == 'O' )
						putchar( 'M' );
					else if( c == 'Q' )
						putchar( 'N' );
					else if( c == 'X' )
						putchar( 'P' );
					else if( c == 'V' )
						putchar( 'L' );
				}
			} else {
				if( no3d ) {
					/* to 2d floating */
					putchar( c + 'a' - 'A' );
				} else {
					/* to 3d floating */
					putchar( c );
				}
			}
			putargs( up );
			break;
		}

		if( verbose )
			printf( "%s\n", up->desc );
	}

	if( scale && !seenscale ) {
		fprintf( stderr, "pl-pl: WARNING no space command in file, defaulting to +/-32k\n" );
	} else if( !scale && seenscale ) {
		fprintf( stderr, "pl-pl: WARNING space command(s) ignored, use -S to apply them.\n" );
	}

	return(0);
}


void
getstring(void)
{
	int	c;
	char	*cp;

	cp = strarg;
	while( (c = getchar()) != '\n' && c != EOF )
		*cp++ = c;
	*cp = 0;
}

short
getshort(void)
{
	register long	v, w;

	v = getchar();
	v |= (getchar()<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}

double
getieee(void)
{
	char	in[8];
	double	d;

	fread( in, 8, 1, stdin );
	ntohd( (unsigned char *)&d, (unsigned char *)in, 1 );
	return	d;
}

/*** Input args ***/

void
getargs(struct uplot *up)
{
	int	i;

	for( i = 0; i < up->narg; i++ ) {
		switch( up->targ ) {
			case TSHORT:
				arg[i] = getshort();
				break;
			case TIEEE:
				arg[i] = getieee();
				break;
			case TSTRING:
				getstring();
				break;
			case TCHAR:
				arg[i] = getchar();
				break;
			case TNONE:
			default:
				arg[i] = 0;	/* ? */
				break;
		}
	}
}
/*** Output args ***/

void
putargs(struct uplot *up)
{
	int	i;

	for( i = 0; i < up->narg; i++ ) {
		if( no3d && ((i % 3) == 2) && up->t3d )
			continue;	/* skip z coordinate */
		/* gag me with a spoon... */
		if( scale && (up->targ == TSHORT || up->targ == TIEEE) ) {
			if( up->t3d ) {
				if( i % 3 == 0 )
					arg[i] = (arg[i] - cx) * scale;
				else if( i % 3 == 1 )
					arg[i] = (arg[i] - cy) * scale;
				else
					arg[i] = (arg[i] - cz) * scale;
			} else {
				if( i % 2 == 0 )
					arg[i] = (arg[i] - cx) * scale;
				else
					arg[i] = (arg[i] - cy) * scale;
			}
		}
		switch( up->targ ) {
			case TSHORT:
				if( arg[i] > 32767 ) arg[i] = 32767;
				if( arg[i] < -32767 ) arg[i] = -32767;
				putshort( (short)arg[i] );
				break;
			case TIEEE:
				if( nofloat ) {
					if( arg[i] > 32767 ) arg[i] = 32767;
					if( arg[i] < -32767 ) arg[i] = -32767;
					putshort( (short)arg[i] );
				} else
					putieee( arg[i] );
				break;
			case TSTRING:
				printf( "%s\n", strarg );
				break;
			case TCHAR:
				putchar( arg[i] );
				break;
			case TNONE:
			default:
				break;
		}
	}
}

void
putshort(short int s)
{
	/* For the sake of efficiency, we trust putc()
	 * to write only one byte
	 */
	putchar( s );
	putchar( s>>8 );
}

void
putieee(double d)
{
	unsigned char	out[8];

	htond( out, (unsigned char *)&d, 1 );
	fwrite( out, 1, 8, stdout );
}

void
doscale(void)
{
	double	dx, dy, dz;
	double	max;

	cx = (sp[3] + sp[0]) / 2.0;
	cy = (sp[4] + sp[1]) / 2.0;
	cz = (sp[5] + sp[2]) / 2.0;

	dx = (sp[3] - sp[0]) / 2.0;
	dy = (sp[4] - sp[1]) / 2.0;
	dz = (sp[5] - sp[2]) / 2.0;

	max = dx;
	if( dy > max ) max = dy;
	if( dz > max ) max = dz;

	scale = 32767.0 / max;
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pl-pl.c,v 11.9 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.9
log
@merge of ansi-6-0-branch into head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d23 5
a27 1
#include "conf.h"
d37 5
a41 1
#include "conf.h"
@


11.8
log
@update copyright to include span through 2003
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.7 2002/08/20 17:09:05 jra Exp $ (BRL)";
d37 13
a49 3
void	putshort(), putieee(), getstring();
void	putargs(), getargs();
void	doscale();
a57 6
struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};
d120 1
a120 1
double	getieee();
d138 1
a138 3
main( argc, argv )
int	argc;
char	**argv;
d346 1
a346 1
getstring()
d358 1
a358 1
getshort()
d373 1
a373 1
getieee()
d386 1
a386 2
getargs( up )
struct uplot *up;
d414 1
a414 2
putargs( up )
struct uplot *up;
d465 1
a465 2
putshort( s )
short s;
d475 1
a475 2
putieee( d )
double	d;
d484 1
a484 1
doscale()
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1988 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.5 2001/08/10 20:57:08 butler Exp $ (BRL)";
@


11.7.4.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1988-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/pl-pl.c,v 11.8 2004/02/02 17:39:50 morrison Exp $ (BRL)";
@


11.7.10.1
log
@merge from HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1988-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.8 2004/02/02 17:39:50 morrison Exp $ (BRL)";
@


11.7.10.2
log
@merge from head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.7.10.1 2004/02/12 19:43:11 erikg Exp $ (BRL)";
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.7 2002/08/20 17:09:05 jra Exp $ (BRL)";
d37 3
a39 13
struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};

void	putshort(short int s);
void    putieee(double d);
void    getstring(void);
void	putargs(struct uplot *up);
void    getargs(struct uplot *up);
void	doscale(void);
d48 6
d116 1
a116 1
double	getieee(void);
d134 3
a136 1
main(int argc, char **argv)
d344 1
a344 1
getstring(void)
d356 1
a356 1
getshort(void)
d371 1
a371 1
getieee(void)
d384 2
a385 1
getargs(struct uplot *up)
d413 2
a414 1
putargs(struct uplot *up)
d465 2
a466 1
putshort(short int s)
d476 2
a477 1
putieee(double d)
d486 1
a486 1
doscale(void)
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1988-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d37 3
a39 13
struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};

void	putshort(short int s);
void    putieee(double d);
void    getstring(void);
void	putargs(struct uplot *up);
void    getargs(struct uplot *up);
void	doscale(void);
d48 6
d116 1
a116 1
double	getieee(void);
d134 3
a136 1
main(int argc, char **argv)
d344 1
a344 1
getstring(void)
d356 1
a356 1
getshort(void)
d371 1
a371 1
getieee(void)
d384 2
a385 1
getargs(struct uplot *up)
d413 2
a414 1
putargs(struct uplot *up)
d465 2
a466 1
putshort(short int s)
d476 2
a477 1
putieee(double d)
d486 1
a486 1
doscale(void)
@


11.5
log
@Misc compiler warnings eliminated
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.4 2001/08/07 20:27:59 butler Exp $ (BRL)";
d37 13
a49 3
void	putshort(), putieee(), getstring();
void	putargs(), getargs();
void	doscale();
a57 6
struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};
d120 1
a120 1
double	getieee();
d138 1
a138 3
main( argc, argv )
int	argc;
char	**argv;
d346 1
a346 1
getstring()
d358 1
a358 1
getshort()
d373 1
a373 1
getieee()
d386 1
a386 2
getargs( up )
struct uplot *up;
d414 1
a414 2
putargs( up )
struct uplot *up;
d465 1
a465 2
putshort( s )
short s;
d475 1
a475 2
putieee( d )
double	d;
d484 1
a484 1
doscale()
@


11.4
log
@Misc warnings eliminated
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.3 2000/09/01 03:24:02 mike Exp $ (BRL)";
d23 2
d26 5
@


11.3
log
@
Lint fix
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.2 2000/08/23 19:05:00 mike Exp $ (BRL)";
d24 5
a334 29
/*** Input args ***/

void
getargs( up )
struct uplot *up;
{
	int	i;

	for( i = 0; i < up->narg; i++ ) {
		switch( up->targ ) {
			case TSHORT:
				arg[i] = getshort();
				break;
			case TIEEE:
				arg[i] = getieee();
				break;
			case TSTRING:
				getstring();
				break;
			case TCHAR:
				arg[i] = getchar();
				break;
			case TNONE:
			default:
				arg[i] = 0;	/* ? */
				break;
		}
	}
}
d348 1
d370 1
a370 1
	ntohd( &d, in, 1 );
d374 29
d472 1
a472 1
	char	out[8];
d474 1
a474 1
	htond( out, &d, 1 );
@


11.2
log
@
const RCSid
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-pl.c,v 11.1 1995/01/04 10:13:11 mike Rel4_4 $ (BRL)";
d121 1
@


11.1
log
@Release_4.4
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-pl.c,v 10.1 91/10/12 06:49:06 mike Rel4_0 $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-pl.c,v 9.3 91/07/22 23:25:35 mike Exp $ (BRL)";
@


9.3
log
@Clarified warning messages
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-pl.c,v 9.2 91/06/19 10:07:20 mmark Exp $ (BRL)";
@


9.2
log
@fixed usage msg

@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-pl.c,v 9.1 89/05/19 06:11:09 mike Rel3_5 $ (BRL)";
d144 6
d178 1
d190 1
d320 4
a323 2
	if( !seenscale ) {
		fprintf( stderr, "pl-pl: warning no space command\n" );
a489 2

	seenscale++;
@


9.1
log
@Release_3.5
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pl-pl.c,v 8.1 88/10/05 00:43:43 mike Rel3_0 $ (BRL)";
d119 1
a119 1
Usage: pl-pl [-S] < unix_plot > unix_plot\n";
@


8.1
log
@Release_3.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pl-pl.c,v 1.3 88/09/07 16:50:02 phil Exp $ (BRL)";
@


1.3
log
@arc and d_arc has the wrong number of args in the plot table
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pl-pl.c,v 1.2 88/09/02 01:30:14 phil Locked $ (BRL)";
@


1.2
log
@added warning message is no space command is given
a couple of lint fixes
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pl-pl.c,v 1.1 88/07/09 23:16:46 phil Locked $ (BRL)";
d76 1
a76 1
/*a*/	{ TSHORT, 3, "arc", 0 },
d93 1
a93 1
/*r*/	{ TIEEE, 3, "d_arc", 0 },
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pix-fb.c,v 7.2 88/05/22 23:51:55 mike Exp $ (BRL)";
d25 4
d111 1
a126 1
	int	i;
d311 6
d321 1
d349 1
d388 1
d440 1
d451 1
d461 1
d480 2
@
