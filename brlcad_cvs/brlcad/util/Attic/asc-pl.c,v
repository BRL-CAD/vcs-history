head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.2
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.2
	premerge-autoconf:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.1
	offsite-5-3-pre:11.4
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.14.57.31;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.05.46.01;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.44;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.54;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.56.06;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2001.08.10.20.57.05;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	2000.09.01.03.23.43;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.24.03.53.17;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.23.19.04.09;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.11.24;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.22.20.16.05;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	92.03.16.21.54.13;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.47.40;	author mike;	state Rel4_0;
branches;
next	1.6;

1.6
date	91.07.25.15.43.41;	author pjt;	state Exp;
branches;
next	1.5;

1.5
date	91.07.24.01.16.39;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	91.07.18.16.20.40;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	91.07.11.22.31.55;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	91.07.02.01.53.12;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	91.06.28.11.13.31;	author pjt;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.34;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.23.19;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.52.28;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.02.12.19.43.09;	author erikg;	state Exp;
branches;
next	11.7.10.2;

11.7.10.2
date	2004.03.15.14.08.10;	author erikg;	state Exp;
branches;
next	;


desc
@ASCII to Plot3(5) converter
Handy for keyboard production of plot data on the fly.
Also the exact inverse of pl-asc.
@


11.11
log
@moved to src/util/
@
text
@/*
 *			A S C - P L . C
 *
 *	Produce UNIX plot commands in PLOT3(5) format
 *	from ASCII representation.
 *
 *  Author -
 *	Paul Tanenbaum
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/asc-pl.c,v 11.10 2004/05/10 15:30:50 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <ctype.h>
#include "machine.h"
#include "externs.h"

#include "plot3.h"

#define		BUF_LEN		512
#define		FP_IN		0
#define		FP_OUT		1

static char	*usage = "asc-pl [file.in [file.pl]]\n";

static void	printusage(void);
static int	check_syntax(char cmd, int needed, int got, int line);

int
main (int argc, char **argv)
{
    char	*bp;
    char	buf[BUF_LEN];
    char	sarg[BUF_LEN];
    static char	*fm[] = { "r", "w" };
    double	darg[6];
    static FILE	*fp[2];
    int		i;
    int		iarg[6];
    int		line_nm;
    int		nm_args = 0;

    /* Handle command-line syntax */
    if (argc > 3)
    {
	printusage();
	exit (1);
    }
    fp[0] = stdin;
    fp[1] = stdout;
    for (i = 0; (i < 2) && (--argc > 0); ++i)
    {
	if ((**++argv == '-') && (*(*argv + 1) == '\0'))
	    continue;
	if ((fp[i] = fopen(*argv, fm[i])) == NULL)
	{
	    (void) fprintf(stderr, "Cannot open file '%s'\n", *argv);
	    printusage();
	    exit (1);
	}
    }
    if (isatty(fileno(fp[FP_OUT])))
    {
	(void) fputs("asc-pl: Will not write to a TTY\n", stderr);
	exit (1);
    }

    for (line_nm = 1; fgets(buf, BUF_LEN - 1, fp[FP_IN]) != NULL; ++line_nm)
    {
	for (bp = buf; *bp != '\0'; ++bp)
	    ;
	*bp = '\n';
	*(bp + 1) = '\0';
	for (bp = buf; (*bp == ' ') || (*bp == '\t'); ++bp)
	    ;
	if (*bp == '\n')
	    continue;
	if (strchr("aclmnpsCLMNPS", *bp))
	    nm_args = sscanf(bp + 1, "%d%d%d%d%d%d",
				&iarg[0], &iarg[1], &iarg[2], 
				&iarg[3], &iarg[4], &iarg[5]);
	else if (strchr("ioqrvwxOQVWX", *bp))
	    nm_args = sscanf(bp + 1, "%lf%lf%lf%lf%lf%lf",
				&darg[0], &darg[1], &darg[2], 
				&darg[3], &darg[4], &darg[5]);
	else if (strchr("ft", *bp))
	    nm_args = sscanf(bp, "%*[^\"]\"%[^\"]\"", sarg);

	switch (*bp)
	{
	    case '#':
		break;
	    case 'a':
		if (check_syntax(*bp, 6, nm_args, line_nm))
		    pl_arc(fp[FP_OUT], iarg[0], iarg[1], iarg[2], iarg[3],
			iarg[4], iarg[5]);
		break;
	    case 'c':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pl_circle(fp[FP_OUT], iarg[0], iarg[1], iarg[2]);
		break;
	    case 'l':
		if (check_syntax(*bp, 4, nm_args, line_nm))
		    pl_line(fp[FP_OUT], iarg[0], iarg[1], iarg[2], iarg[3]);
		break;
	    case 'm':
		if (check_syntax(*bp, 2, nm_args, line_nm))
		    pl_move(fp[FP_OUT], iarg[0], iarg[1]);
		break;
	    case 'n':
		if (check_syntax(*bp, 2, nm_args, line_nm))
		    pl_cont(fp[FP_OUT], iarg[0], iarg[1]);
		break;
	    case 'p':
		if (check_syntax(*bp, 2, nm_args, line_nm))
		    pl_point(fp[FP_OUT], iarg[0], iarg[1]);
		break;
	    case 's':
		if (check_syntax(*bp, 4, nm_args, line_nm))
		    pl_space(fp[FP_OUT], iarg[0], iarg[1], iarg[2], iarg[3]);
		break;
	    case 'C':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pl_color(fp[FP_OUT], iarg[0], iarg[1], iarg[2]);
		break;
	    case 'L':
		if (check_syntax(*bp, 6, nm_args, line_nm))
		    pl_3line(fp[FP_OUT], iarg[0], iarg[1], iarg[2], iarg[3],
			iarg[4], iarg[5]);
		break;
	    case 'M':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pl_3move(fp[FP_OUT], iarg[0], iarg[1], iarg[2]);
		break;
	    case 'N':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pl_3cont(fp[FP_OUT], iarg[0], iarg[1], iarg[2]);
		break;
	    case 'P':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pl_3point(fp[FP_OUT], iarg[0], iarg[1], iarg[2]);
		break;
	    case 'S':
		if (check_syntax(*bp, 6, nm_args, line_nm))
		    pl_3space(fp[FP_OUT], iarg[0], iarg[1], iarg[2], iarg[3],
			iarg[4], iarg[5]);
	    case 'i':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pd_circle(fp[FP_OUT], darg[0], darg[1], darg[2]);
		break;
	    case 'o':
		if (check_syntax(*bp, 2, nm_args, line_nm))
		    pd_move(fp[FP_OUT], darg[0], darg[1]);
		break;
	    case 'q':
		if (check_syntax(*bp, 2, nm_args, line_nm))
		    pd_cont(fp[FP_OUT], darg[0], darg[1]);
		break;
	    case 'r':
		if (check_syntax(*bp, 6, nm_args, line_nm))
		    pd_arc(fp[FP_OUT], darg[0], darg[1], darg[2], darg[3],
			darg[4], darg[5]);
		break;
	    case 'v':
		if (check_syntax(*bp, 4, nm_args, line_nm))
		    pd_line(fp[FP_OUT], darg[0], darg[1], darg[2], darg[3]);
		break;
	    case 'w':
		if (check_syntax(*bp, 4, nm_args, line_nm))
		    pd_space(fp[FP_OUT], darg[0], darg[1], darg[2], darg[3]);
		break;
	    case 'x':
		if (check_syntax(*bp, 2, nm_args, line_nm))
		    pd_point(fp[FP_OUT], darg[0], darg[1]);
		break;
	    case 'O':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pd_3move(fp[FP_OUT], darg[0], darg[1], darg[2]);
		break;
	    case 'Q':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pd_3cont(fp[FP_OUT], darg[0], darg[1], darg[2]);
		break;
	    case 'V':
		if (check_syntax(*bp, 6, nm_args, line_nm))
		    pd_3line(fp[FP_OUT], darg[0], darg[1], darg[2], darg[3],
			darg[4], darg[5]);
		break;
	    case 'W':
		if (check_syntax(*bp, 6, nm_args, line_nm))
		    pd_3space(fp[FP_OUT], darg[0], darg[1], darg[2], darg[3],
			darg[4], darg[5]);
	    case 'X':
		if (check_syntax(*bp, 3, nm_args, line_nm))
		    pd_3point(fp[FP_OUT], darg[0], darg[1], darg[2]);
		break;
	    case 'F':
		pl_flush(fp[FP_OUT]);
		break;
	    case 'e':
		pl_erase(fp[FP_OUT]);
		break;
	    case 'f':
		if (check_syntax(*bp, 1, nm_args, line_nm))
		    pl_linmod(fp[FP_OUT], sarg);
		break;
	    case 't':
		if (check_syntax(*bp, 1, nm_args, line_nm))
		    pl_label(fp[FP_OUT], sarg);
		break;
	    default:
		(void) fprintf(stderr,
		    "Unknown PLOT3 command: '%c' (o%o) on line %d\n",
		    *bp, *bp, line_nm);
		exit (1);
	}
    }
    return 0;
}

static void printusage (void)
{
    (void) fputs(usage, stderr);
}

static int check_syntax (char cmd, int needed, int got, int line)
{
    if (got < needed)
    {
	(void) fprintf(stderr,
	    "Too few arguments for '%c' command on line %d\n", cmd, line);
	exit (1);
    }
    return (1);
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/asc-pl.c,v 11.9 2004/04/05 05:46:01 morrison Exp $ (BRL)";
@


11.9
log
@merge of ansi-6-0-branch into head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d23 5
a27 1
#include "conf.h"
@


11.8
log
@update copyright to include span through 2003
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.7 2002/08/20 17:08:54 jra Exp $ (BRL)";
d43 2
a44 2
static void	printusage();
static int	check_syntax();
d47 1
a47 4
main (argc, argv)
int	argc;
char	*argv[];

d238 1
a238 1
static void printusage ()
d243 1
a243 7
static int check_syntax (cmd, needed, got, line)

char	cmd;
int	needed;
int	got;
int	line;

@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1990 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.5 2001/08/10 20:57:05 butler Exp $ (BRL)";
@


11.7.4.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/asc-pl.c,v 11.8 2004/02/02 17:39:44 morrison Exp $ (BRL)";
@


11.7.10.1
log
@merge from HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.8 2004/02/02 17:39:44 morrison Exp $ (BRL)";
@


11.7.10.2
log
@merge from head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.7.10.1 2004/02/12 19:43:09 erikg Exp $ (BRL)";
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.7 2002/08/20 17:08:54 jra Exp $ (BRL)";
d43 2
a44 2
static void	printusage(void);
static int	check_syntax(char cmd, int needed, int got, int line);
d47 4
a50 1
main (int argc, char **argv)
d241 1
a241 1
static void printusage (void)
d246 7
a252 1
static int check_syntax (char cmd, int needed, int got, int line)
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d43 2
a44 2
static void	printusage(void);
static int	check_syntax(char cmd, int needed, int got, int line);
d47 4
a50 1
main (int argc, char **argv)
d241 1
a241 1
static void printusage (void)
d246 7
a252 1
static int check_syntax (char cmd, int needed, int got, int line)
@


11.5
log
@Misc compiler warnings eliminated
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.4 2000/09/01 03:23:43 mike Exp $ (BRL)";
d43 2
a44 2
static void	printusage();
static int	check_syntax();
d47 1
a47 4
main (argc, argv)
int	argc;
char	*argv[];

d238 1
a238 1
static void printusage ()
d243 1
a243 7
static int check_syntax (cmd, needed, got, line)

char	cmd;
int	needed;
int	got;
int	line;

@


11.4
log
@
Lint fix
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.3 2000/08/24 03:53:17 mike Exp $ (BRL)";
d26 1
a26 1
#ifdef USE_STRING_H
@


11.3
log
@
lint
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.2 2000/08/23 19:04:09 mike Exp $ (BRL)";
d61 1
a61 1
    int		nm_args;
@


11.2
log
@
const RCSid
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/asc-pl.c,v 11.1 1995/01/04 10:11:24 mike Rel4_4 $ (BRL)";
d26 5
d33 3
d46 1
a47 1

d238 1
@


11.1
log
@Release_4.4
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/asc-pl.c,v 10.3 94/08/22 20:16:05 gdurf Exp $ (BRL)";
@


10.3
log
@Added include of conf.h
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/asc-pl.c,v 10.2 1992/03/16 21:54:13 mike Exp gdurf $ (BRL)";
@


10.2
log
@IRIX 4.0.1
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/asc-pl.c,v 10.1 91/10/12 06:47:40 mike Rel4_0 Locker: mike $ (BRL)";
d22 2
@


10.1
log
@Release_4.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/asc-pl.c,v 1.6 91/07/25 15:43:41 pjt Exp $ (BRL)";
d47 1
a47 1
    static FILE	*fp[] = { stdin, stdout };
d59 2
@


1.6
log
@Fixed handling of 'f' and 't' commands (added char sarg[BUF_LEN])
and changed string in usage line from "ascii-pl" to "asc-pl"
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /n/wolf/m/cad/util/RCS/asc-pl.c,v 1.5 91/07/24 01:16:39 mike Exp $ (BRL)";
@


1.5
log
@ANSI lint
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /n/wolf/m/cad/util/RCS/asc-pl.c,v 1.4 91/07/18 16:20:40 mike Exp Locker: mike $ (BRL)";
d31 1
a31 1
static char	*usage = "ascii-pl [file.in [file.pl]]\n";
d44 1
d72 1
a72 1
	(void) fputs("ascii-pl: Will not write to a TTY\n", stderr);
d94 2
d212 2
a213 1
		pl_linmod(fp[FP_OUT], bp + 1);
d216 2
a217 1
		pl_label(fp[FP_OUT], bp + 1);
@


1.4
log
@Bad cpp control.
Changed to using machine.h instead
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/asc-pl.c,v 1.3 91/07/11 22:31:55 butler Exp $ (BRL)";
d34 1
@


1.3
log
@added macro definition for strchr for BSD < 43
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/asc-pl.c,v 1.2 91/07/02 01:53:12 mike Exp $ (BRL)";
d25 1
a25 4

#if !defined(SYSV) && defined(BSD) && BSD < 43
#defined strchr index
#endif
@


1.2
log
@Fixed comment.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/asc-pl.c,v 1.1 91/06/28 11:13:31 pjt Exp $ (BRL)";
d25 4
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 *	Produce UNIX plot commands in LIBPLOT(3) format
d20 1
a20 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@
