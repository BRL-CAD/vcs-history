head	11.12;
access;
symbols
	ansi-20040405-merged:11.8.2.3
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.8.10.2
	premerge-autoconf:11.9
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.8.4.1
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.3
	offsite-5-3-pre:11.5
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1;
locks; strict;
comment	@ * @;


11.12
date	2004.05.21.14.57.59;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2004.05.10.15.30.51;	author erikg;	state Exp;
branches;
next	11.10;

11.10
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2004.02.02.17.39.50;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.09.05;	author jra;	state Exp;
branches
	11.8.2.1
	11.8.4.1
	11.8.10.1;
next	11.7;

11.7
date	2002.08.15.20.56.16;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2001.08.10.20.57.08;	author butler;	state Exp;
branches;
next	11.5;

11.5
date	2000.09.01.03.24.02;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.08.23.19.05.01;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.01.31.16.03.09;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	96.07.16.22.56.03;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.13.12;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.12.30.01.23.44;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.23.15.06.07;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.49.07;	author mike;	state Rel4_0;
branches;
next	9.4;

9.4
date	91.01.12.08.54.55;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	89.12.29.22.18.08;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	89.08.22.23.56.39;	author phil;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.11.12;	author mike;	state Rel3_5;
branches;
next	1.2;

1.2
date	89.04.23.06.15.30;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	89.04.23.05.28.52;	author mike;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.02.44;	author morrison;	state Exp;
branches;
next	11.8.2.2;

11.8.2.2
date	2002.09.25.19.39.26;	author morrison;	state Exp;
branches;
next	11.8.2.3;

11.8.2.3
date	2004.03.17.21.23.35;	author morrison;	state Exp;
branches;
next	;

11.8.4.1
date	2004.03.11.23.52.35;	author morrison;	state Exp;
branches;
next	;

11.8.10.1
date	2004.02.12.19.43.11;	author erikg;	state Exp;
branches;
next	11.8.10.2;

11.8.10.2
date	2004.03.15.14.08.20;	author erikg;	state Exp;
branches;
next	;


desc
@Program to convert UNIX-plot to PostScript
@


11.12
log
@moved to src/util/
@
text
@/*
 *			P L - P S . C
 *
 *  Display plot3(5) as PostScript.
 *  Based on pl-X.c and bw-ps.c
 *
 *  Authors -
 *	Michael John Muuss
 *	Phillip Dykstra
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1989-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/pl-ps.c,v 11.11 2004/05/10 15:30:51 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <math.h>
#include <time.h>

#include "machine.h"
#include "bu.h"

#include "externs.h"

#define	TBAD	0	/* no such command */
#define TNONE	1	/* no arguments */
#define TSHORT	2	/* Vax 16-bit short */
#define	TIEEE	3	/* IEEE 64-bit floating */
#define	TCHAR	4	/* unsigned chars */
#define	TSTRING	5	/* linefeed terminated string */

struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
};
struct uplot uerror = { 0, 0, 0 };
struct uplot letters[] = {
/*A*/	{ 0, 0, 0 },
/*B*/	{ 0, 0, 0 },
/*C*/	{ TCHAR, 3, "color" },
/*D*/	{ 0, 0, 0 },
/*E*/	{ 0, 0, 0 },
/*F*/	{ TNONE, 0, "flush" },
/*G*/	{ 0, 0, 0 },
/*H*/	{ 0, 0, 0 },
/*I*/	{ 0, 0, 0 },
/*J*/	{ 0, 0, 0 },
/*K*/	{ 0, 0, 0 },
/*L*/	{ TSHORT, 6, "3line" },
/*M*/	{ TSHORT, 3, "3move" },
/*N*/	{ TSHORT, 3, "3cont" },
/*O*/	{ TIEEE, 3, "d_3move" },
/*P*/	{ TSHORT, 3, "3point" },
/*Q*/	{ TIEEE, 3, "d_3cont" },
/*R*/	{ 0, 0, 0 },
/*S*/	{ TSHORT, 6, "3space" },
/*T*/	{ 0, 0, 0 },
/*U*/	{ 0, 0, 0 },
/*V*/	{ TIEEE, 6, "d_3line" },
/*W*/	{ TIEEE, 6, "d_3space" },
/*X*/	{ TIEEE, 3, "d_3point" },
/*Y*/	{ 0, 0, 0 },
/*Z*/	{ 0, 0, 0 },
/*[*/	{ 0, 0, 0 },
/*\*/	{ 0, 0, 0 },
/*]*/	{ 0, 0, 0 },
/*^*/	{ 0, 0, 0 },
/*_*/	{ 0, 0, 0 },
/*`*/	{ 0, 0, 0 },
/*a*/	{ TSHORT, 6, "arc" },
/*b*/	{ 0, 0, 0 },
/*c*/	{ TSHORT, 3, "circle" },
/*d*/	{ 0, 0, 0 },
/*e*/	{ TNONE, 0, "erase" },
/*f*/	{ TSTRING, 1, "linmod" },
/*g*/	{ 0, 0, 0 },
/*h*/	{ 0, 0, 0 },
/*i*/	{ TIEEE, 3, "d_circle" },
/*j*/	{ 0, 0, 0 },
/*k*/	{ 0, 0, 0 },
/*l*/	{ TSHORT, 4, "line" },
/*m*/	{ TSHORT, 2, "move" },
/*n*/	{ TSHORT, 2, "cont" },
/*o*/	{ TIEEE, 2, "d_move" },
/*p*/	{ TSHORT, 2, "point" },
/*q*/	{ TIEEE, 2, "d_cont" },
/*r*/	{ TIEEE, 6, "d_arc" },
/*s*/	{ TSHORT, 4, "space" },
/*t*/	{ TSTRING, 1, "label" },
/*u*/	{ 0, 0, 0 },
/*v*/	{ TIEEE, 4, "d_line" },
/*w*/	{ TIEEE, 4, "d_space" },
/*x*/	{ TIEEE, 2, "d_point" },
/*y*/	{ 0, 0, 0 },
/*z*/	{ 0, 0, 0 }
};

void	getargs(struct uplot *up);
void	getstring(void);
void	draw(double x1, double y1, double z1, double x2, double y2, double z2);
void	label(double x, double y, char *str);
void	prolog(FILE *fp, char *name, int width, int height);
void	scaleinfo(FILE *fp, int width, int height), postlog(FILE *fp);
double	getieee(void);

int	verbose;
double	cx, cy, cz;		/* current x, y, z, point */
double	arg[6];			/* parsed plot command arguments */
double	sp[6];			/* space command */
char	strarg[512];		/* string buffer */

#define	DEFAULT_SIZE	6.75	/* default output size in inches */

extern char	*optarg;
extern int	optind;

int	encapsulated = 0;	/* encapsulated postscript */
int	center = 0;		/* center output on 8.5 x 11 page */
int	width = 4096;		/* Our integer plotting space */
int	height = 4096;
double	outwidth;		/* output plot size in inches */
double	outheight;
int	xpoints;		/* output plot size in points */
int	ypoints;
int	page_dirty = 0;		/* to skip extra erases */

static char	*file_name;
static FILE	*infp;

static char usage[] = "\
Usage: pl-ps [-e] [-c] [-S inches_square]\n\
        [-W width_inches] [-N height_inches] [file.pl]\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = getopt( argc, argv, "ecs:w:n:S:W:N:" )) != EOF )  {
		switch( c )  {
		case 'e':
			/* Encapsulated PostScript */
			encapsulated++;
			break;
		case 'c':
			center = 1;
			break;
		case 'S':
		case 's':
			/* square file size */
			outheight = outwidth = atof(optarg);
			break;
		case 'W':
		case 'w':
			outwidth = atof(optarg);
			break;
		case 'N':
		case 'n':
			outheight = atof(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "[stdin]";
		infp = stdin;
	} else {
		file_name = argv[optind];
		if( (infp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"pl-ps: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
		/*fileinput++;*/
	}

	if ( argc > ++optind )
		(void)fprintf( stderr, "pl-ps: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	register int	c;
	struct	uplot *up;

	outwidth = outheight = DEFAULT_SIZE;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	/* Default space */
	sp[0] = sp[1] = sp[2] = 0.0;	/* minimum */
	sp[3] = sp[4] = sp[5] = 4096.0;	/* max */

	if( encapsulated ) {
		xpoints = width;
		ypoints = height;
	} else {
		xpoints = outwidth * 72 + 0.5;
		ypoints = outheight * 72 + 0.5;
	}
	prolog(stdout, file_name, xpoints, ypoints);

	while( (c = getc(infp)) != EOF ) {
		/* look it up */
		if( c < 'A' || c > 'z' ) {
			up = &uerror;
		} else {
			up = &letters[ c - 'A' ];
		}

		if( up->targ == TBAD ) {
			fprintf( stderr, "Bad command '%c' (0x%02x)\n", c, c );
			continue;
		}

		if( up->narg > 0 )
			getargs( up );

		switch( c ) {
		case 's':
		case 'w':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = 0;
			sp[3] = arg[2];
			sp[4] = arg[3];
			sp[5] = 0;
			break;
		case 'S':
		case 'W':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = arg[2];
			sp[3] = arg[3];
			sp[4] = arg[4];
			sp[5] = arg[5];
			break;
		case 'm':
		case 'o':
			cx = arg[0];
			cy = arg[1];
			cz = 0;
			break;
		case 'M':
		case 'O':
			cx = arg[0];
			cy = arg[1];
			cz = arg[2];
			break;
		case 'n':
		case 'q':
			draw( cx, cy, cz, arg[0], arg[1], 0.0 );
			break;
		case 'N':
		case 'Q':
			draw( cx, cy, cz, arg[0], arg[1], arg[2] );
			break;
		case 'l':
		case 'v':
			draw( arg[0], arg[1], 0.0, arg[2], arg[3], 0.0 );
			break;
		case 'L':
		case 'V':
			draw( arg[0], arg[1], arg[2], arg[3], arg[4], arg[5] );
			break;
		case 'p':
		case 'x':
			draw( arg[0], arg[1], 0.0, arg[0], arg[1], 0.0 );
			break;
		case 'P':
		case 'X':
			draw( arg[0], arg[1], arg[2], arg[0], arg[1], arg[2] );
			break;
		case 't':
			label( cx, cy, strarg );
			break;
		case 'F':
			/* Flush */
			break;
		case 'e':
			/* New page */
			if( page_dirty ) {
				printf("showpage\n");
				/* Recenter and rescale! */
				scaleinfo(stdout, xpoints, ypoints);
				page_dirty = 0;
			}
			break;
		case 'f':
			/* linmod */
			if( strcmp( strarg, "solid" ) == 0 )  {
				printf("NV ");
			} else if( strcmp( strarg, "dotted" ) == 0 )  {
				printf("DV ");
			} else if( strcmp( strarg, "longdashed" ) == 0 )  {
				printf("LDV ");
			} else if( strcmp( strarg, "shortdashed" ) == 0 )  {
				printf("SDV ");
			} else if( strcmp( strarg, "dotdashed" ) == 0 )  {
				printf("DDV ");
			} else {
				fprintf(stderr,"linmod %s unknown\n", strarg);
			}
			break;
		}

		if( verbose )
			fprintf( stderr, "%s\n", up->desc );
	}

	postlog( stdout );
	exit(0);
}

int
getshort(void)
{
	register long	v, w;

	v = getc(infp);
	v |= (getc(infp)<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}

void
getargs(struct uplot *up)
{
	int	i;

	for( i = 0; i < up->narg; i++ ) {
		switch( up->targ ){
			case TSHORT:
				arg[i] = getshort();
				break;
			case TIEEE:
				arg[i] = getieee();
				break;
			case TSTRING:
				getstring();
				break;
			case TCHAR:
				arg[i] = getc(infp);
				break;
			case TNONE:
			default:
				arg[i] = 0;	/* ? */
				break;
		}
	}
}

void
getstring(void)
{
	int	c;
	char	*cp;

	cp = strarg;
	while( (c = getc(infp)) != '\n' && c != EOF )
		*cp++ = c;
	*cp = 0;
}


double
getieee(void)
{
	unsigned char	in[8];
	double	d;

	fread( in, 8, 1, infp );
	ntohd( (unsigned char *)&d, in, 1 );
	return	d;
}

void
draw(double x1, double y1, double z1, double x2, double y2, double z2)
      	           	/* from point */
      	           	/* to point */
{
	int	sx1, sy1, sx2, sy2;

	sx1 = (x1 - sp[0]) / (sp[3] - sp[0]) * width;
	sy1 = (y1 - sp[1]) / (sp[4] - sp[1]) * height;
	sx2 = (x2 - sp[0]) / (sp[3] - sp[0]) * width;
	sy2 = (y2 - sp[1]) / (sp[4] - sp[1]) * height;

#if 0
	if( sx1 == sx2 && sy1 == sy2 )
		XDrawPoint( dpy, win, gc, sx1, sy1 );
	else
#endif
	printf("newpath %d %d moveto %d %d lineto stroke\n",
		sx1, sy1, sx2, sy2 );

	cx = x2;
	cy = y2;
	cz = z2;

	page_dirty = 1;
}

void
label(double x, double y, char *str)
{
	int	sx, sy;
	static int lastx = -1;
	static int lasty = -1;

	sx = (x - sp[0]) / (sp[3] - sp[0]) * width;
	sy = (y - sp[1]) / (sp[4] - sp[1]) * height;

	/* HACK for "continued text", i.e. more text
	 * without a move command in between.  We
	 * really need a better solution. - XXX
	 */
	if( lastx == x && lasty == y ) {
		printf("DFntM (%s) show\n", str );

	} else {
		printf("DFntM (%s) %d %d moveto show\n",
			str, sx, sy );
		lastx = x;
		lasty = y;
	}

	page_dirty = 1;
}

char boilerplate[] = "\
4 setlinewidth\n\
\n\
% Sizes, made functions to avoid scaling if not needed\n\
/FntH /Courier findfont 80 scalefont def\n\
/DFntL { /FntL /Courier findfont 73.4 scalefont def } def\n\
/DFntM { /FntM /Courier findfont 50.2 scalefont def } def\n\
/DFntS { /FntS /Courier findfont 44 scalefont def } def\n\
\n\
% line styles\n\
/NV { [] 0 setdash } def		% normal vectors\n\
/DV { [8] 0 setdash } def		% dotted vectors\n\
/DDV { [8 8 32 8] 0 setdash } def	% dot-dash vectors\n\
/SDV { [32 8] 0 setdash } def		% short-dash vectors\n\
/LDV { [64 8] 0 setdash } def		% long-dash vectors\n\
\n\
FntH  setfont\n\
NV\n\
% Begin Plot Data\n\
";

void
prolog(FILE *fp, char *name, int width, int height)
    	    
    	      
   	              		/* in points */
{
	time_t	ltime;

	ltime = time(0);

	if( encapsulated ) {
		fputs( "%!PS-Adobe-2.0 EPSF-1.2\n", fp );
		fputs( "%%Creator: BRL-CAD pl-ps\n", fp );
		fprintf(fp, "%%%%CreationDate: %s", ctime(&ltime) );
		fprintf(fp, "%%%%Title: %s\n", name );
		fputs( "%%Pages: 0\n", fp );
	} else {
		fputs( "%!PS-Adobe-1.0\n", fp );
		fputs( "%begin(plot)\n", fp );
		fputs( "%%DocumentFonts:  Courier\n", fp );
		fprintf(fp, "%%%%Title: %s\n", name );
		fputs( "%%Creator: BRL-CAD pl-ps\n", fp );
		fprintf(fp, "%%%%CreationDate: %s", ctime(&ltime) );
	}
	fprintf(fp, "%%%%BoundingBox: 0 0 %d %d\n", width, height );
	fputs( "%%EndComments\n\n", fp );

	scaleinfo(fp, xpoints, ypoints);
	fputs( boilerplate, fp );
}

void
scaleinfo(FILE *fp, int width, int height)
    	    
   	              		/* in points */
{
	/*
	 * About this PostScript scaling issue...
	 * A "unit" in postscript with no scaling is 1/72 of an inch
	 * (i.e. one point).  Thus below, 8.5 x 11 inches is converted
	 * to POINTS (*72).  The width and height are already given
	 * in points.
	 * All of our UnixPlot commands are scaled to a first quadrant
	 * space from 0-4096 x 0-4096.  We thus calculate a scale
	 * command to bring this space down to our width and height.
	 */
	if( !encapsulated && center ) {
		int	xtrans, ytrans;
		xtrans = (8.5*72 - width)/2.0;
		ytrans = (11*72 - height)/2.0;
		fprintf( fp, "%d %d translate\n", xtrans, ytrans );
	}
	fprintf( fp, "%f %f scale\n", width/4096.0, height/4096.0 );
}

void
postlog(FILE *fp)
{
	fputs( "\n", fp );
	if( !encapsulated )
		fputs( "%end(plot)\n", fp );
	/*
	 * I believe the Adobe spec says that even Encapsulated
	 * PostScript files can end with a showpage.
	 */
	fputs( "showpage\n", fp );
}
@


11.11
log
@change conf.h to a wrapped config.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pl-ps.c,v 11.10 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.10
log
@merge of ansi-6-0-branch into head
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d24 5
a28 1
#include "conf.h"
@


11.9
log
@update copyright to include span through 2003
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.8 2002/08/20 17:09:05 jra Exp $ (BRL)";
d114 8
a121 2
void	getargs(), getstring(), draw(), label(), prolog(), scaleinfo(), postlog();
double	getieee();
a129 1
extern int	getopt();
d151 1
a151 2
get_args( argc, argv )
register char **argv;
d206 1
a206 3
main( argc, argv )
int	argc;
char	**argv;
d344 1
a344 1
getshort()
d359 1
a359 2
getargs( up )
struct uplot *up;
d386 1
a386 1
getstring()
d399 1
a399 1
getieee()
d410 3
a412 3
draw( x1, y1, z1, x2, y2, z2 )
double	x1, y1, z1;	/* from point */
double	x2, y2, z2;	/* to point */
d437 1
a437 3
label( x, y, str )
double	x, y;
char	*str;
d485 4
a488 4
prolog( fp, name, width, height )
FILE	*fp;
char	*name;
int	width, height;		/* in points */
d516 3
a518 3
scaleinfo( fp, width, height )
FILE	*fp;
int	width, height;		/* in points */
d540 1
a540 2
postlog( fp )
FILE	*fp;
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1989 by the United States Army.
d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.6 2001/08/10 20:57:08 butler Exp $ (BRL)";
@


11.8.4.1
log
@sync to HEAD...
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/pl-ps.c,v 11.9 2004/02/02 17:39:50 morrison Exp $ (BRL)";
@


11.8.10.1
log
@merge from HEAD
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.9 2004/02/02 17:39:50 morrison Exp $ (BRL)";
@


11.8.10.2
log
@merge from head
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.8.10.1 2004/02/12 19:43:11 erikg Exp $ (BRL)";
@


11.8.2.1
log
@Initial ANSIfication
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.8 2002/08/20 17:09:05 jra Exp $ (BRL)";
d114 2
a115 2
void	getargs(struct uplot *up), getstring(void), draw(double x1, double y1, double z1, double x2, double y2, double z2), label(double x, double y, char *str), prolog(FILE *fp, char *name, int width, int height), scaleinfo(FILE *fp, int width, int height), postlog(FILE *fp);
double	getieee(void);
d124 1
a124 1
extern int	getopt(int, char *const *, const char *);
d146 2
a147 1
get_args(int argc, register char **argv)
d202 3
a204 1
main(int argc, char **argv)
d342 1
a342 1
getshort(void)
d357 2
a358 1
getargs(struct uplot *up)
d385 1
a385 1
getstring(void)
d398 1
a398 1
getieee(void)
d409 3
a411 3
draw(double x1, double y1, double z1, double x2, double y2, double z2)
      	           	/* from point */
      	           	/* to point */
d436 3
a438 1
label(double x, double y, char *str)
d486 4
a489 4
prolog(FILE *fp, char *name, int width, int height)
    	    
    	      
   	              		/* in points */
d517 3
a519 3
scaleinfo(FILE *fp, int width, int height)
    	    
   	              		/* in points */
d541 2
a542 1
postlog(FILE *fp)
@


11.8.2.2
log
@fixed compiler type consistency errors being reported
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.8.2.1 2002/09/19 18:02:44 morrison Exp $ (BRL)";
d124 1
@


11.8.2.3
log
@sync branch with HEAD
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d114 2
a115 2
void	getargs(struct uplot *up), getstring(void), draw(double x1, double y1, double z1, double x2, double y2, double z2), label(double x, double y, char *str), prolog(FILE *fp, char *name, int width, int height), scaleinfo(FILE *fp, int width, int height), postlog(FILE *fp);
double	getieee(void);
d124 1
a124 1
extern int	getopt(int, char *const *, const char *);
d146 2
a147 1
get_args(int argc, register char **argv)
d202 3
a204 1
main(int argc, char **argv)
d342 1
a342 1
getshort(void)
d357 2
a358 1
getargs(struct uplot *up)
d385 1
a385 1
getstring(void)
d398 1
a398 1
getieee(void)
d409 3
a411 3
draw(double x1, double y1, double z1, double x2, double y2, double z2)
      	           	/* from point */
      	           	/* to point */
d436 3
a438 1
label(double x, double y, char *str)
d486 4
a489 4
prolog(FILE *fp, char *name, int width, int height)
    	    
    	      
   	              		/* in points */
d517 3
a519 3
scaleinfo(FILE *fp, int width, int height)
    	    
   	              		/* in points */
d541 2
a542 1
postlog(FILE *fp)
@


11.6
log
@Misc compiler warnings eliminated
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.5 2000/09/01 03:24:02 mike Exp $ (BRL)";
d114 2
a115 2
void	getargs(), getstring(), draw(), label(), prolog(), scaleinfo(), postlog();
double	getieee();
d124 1
a124 1
extern int	getopt();
d146 1
a146 2
get_args( argc, argv )
register char **argv;
d201 1
a201 3
main( argc, argv )
int	argc;
char	**argv;
d339 1
a339 1
getshort()
d354 1
a354 2
getargs( up )
struct uplot *up;
d381 1
a381 1
getstring()
d394 1
a394 1
getieee()
d405 3
a407 3
draw( x1, y1, z1, x2, y2, z2 )
double	x1, y1, z1;	/* from point */
double	x2, y2, z2;	/* to point */
d432 1
a432 3
label( x, y, str )
double	x, y;
char	*str;
d480 4
a483 4
prolog( fp, name, width, height )
FILE	*fp;
char	*name;
int	width, height;		/* in points */
d511 3
a513 3
scaleinfo( fp, width, height )
FILE	*fp;
int	width, height;		/* in points */
d535 1
a535 2
postlog( fp )
FILE	*fp;
@


11.5
log
@
Lint fix
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.4 2000/08/23 19:05:01 mike Exp $ (BRL)";
d27 5
d33 1
d36 2
d341 15
a395 13
getshort()
{
	register long	v, w;

	v = getc(infp);
	v |= (getc(infp)<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}
d400 1
a400 1
	char	in[8];
d404 1
a404 1
	ntohd( &d, in, 1 );
@


11.4
log
@
const RCSid
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.3 2000/01/31 16:03:09 jra Exp $ (BRL)";
d193 1
@


11.3
log
@Eliminated some unused variables
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-ps.c,v 11.2 1996/07/16 22:56:03 jra Exp $ (BRL)";
@


11.2
log
@Minor mods for IRIX 6.2
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-ps.c,v 11.1 1995/01/04 10:13:12 mike Rel4_4 jra $ (BRL)";
a198 1
	int	i;
@


11.1
log
@Release_4.4
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-ps.c,v 10.3 94/12/30 01:23:44 mike Exp $ (BRL)";
d106 1
d137 1
d333 1
d361 1
d398 1
d425 1
d475 1
d506 1
d530 1
@


10.3
log
@DEC Alpha
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-ps.c,v 10.2 94/08/23 15:06:07 gdurf Exp Locker: mike $ (BRL)";
@


10.2
log
@Factored ifdefs
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-ps.c,v 10.1 1991/10/12 06:49:07 mike Rel4_0 gdurf $ (BRL)";
d474 1
a474 1
	long	ltime;
@


10.1
log
@Release_4.0
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-ps.c,v 9.4 91/01/12 08:54:55 mike Exp $ (BRL)";
d24 2
d28 2
@


9.4
log
@externs.h
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-ps.c,v 9.3 89/12/29 22:18:08 mike Exp $ (BRL)";
@


9.3
log
@Added "externs.h" for atof().
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: pl-ps.c,v 9.2 89/08/22 23:56:39 mike Locked $ (BRL)";
a26 2

extern	char	*getenv();
@


9.2
log
@Hacked it to be much more generally useful.  Moved a lot of code in
from bw-ps.c.  We may still want a "no showpage" directive if TeX
insertion macros can't ignore them (they should be able to since
Adobe says they are allowed).
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: pl-ps.c,v 9.1 89/05/19 06:11:12 phil Locked $ (BRL)";
d26 1
@


9.1
log
@Release_3.5
@
text
@d5 1
a5 1
 *  Based on pl-X.c
d21 1
a21 1
static char RCSid[] = "@@(#)$Header: pl-ps.c,v 1.2 89/04/23 06:15:30 mike Exp $ (BRL)";
d25 1
d109 10
a118 1
int	width = 4096;
d120 5
d126 3
d130 2
a131 1
Usage: pl-ps [-v] < unix_plot\n";
d133 4
d138 50
d196 1
a196 5
	while( argc > 1 ) {
		if( strcmp(argv[1], "-v") == 0 ) {
			verbose++;
		} else
			break;
d198 2
a199 7
		argc--;
		argv++;
	}

	/* Input file will be binary */
	if( isatty(fileno(stdin)) ) {
		fprintf( stderr, usage );
d207 8
a214 4
	/* Postscript prolog */
	fputs( "%!PS-Adobe-1.0\n\
%begin(plot)\n\
%%DocumentFonts:  Courier\n", stdout );
d216 1
a216 34
	printf("%%%%Title: Converted BRL unix-plot file\n" );

	fputs( "\
%%Creator: BRL-CAD pl-ps.c\n\
%%BoundingBox: 0 0 324 324	% 4.5in square, for TeX\n\
%%EndComments\n\
\n", stdout );

	fputs( "\
4 setlinewidth\n\
\n\
% Sizes, made functions to avoid scaling if not needed\n\
/FntH /Courier findfont 80 scalefont def\n\
/DFntL { /FntL /Courier findfont 73.4 scalefont def } def\n\
/DFntM { /FntM /Courier findfont 50.2 scalefont def } def\n\
/DFntS { /FntS /Courier findfont 44 scalefont def } def\n\
\n\
% line styles\n\
/NV { [] 0 setdash } def	% normal vectors\n\
/DV { [8] 0 setdash } def	% dotted vectors\n\
/DDV { [8 8 32 8] 0 setdash } def	% dot-dash vectors\n\
/SDV { [32 8] 0 setdash } def	% short-dash vectors\n\
/LDV { [64 8] 0 setdash } def	% long-dash vectors\n\
\n\
/NEWPG {\n\
	.0791 .0791 scale	% 0-4096 to 324 units (4.5 inches)\n\
} def\n\
\n\
FntH  setfont\n\
NV\n\
NEWPG\n\
", stdout);

	while( (c = getchar()) != EOF ) {
d295 6
a300 1
			printf("NEWPG\n");
d324 1
d345 1
a345 1
				arg[i] = getchar();
d361 1
a361 1
	while( (c = getchar()) != '\n' && c != EOF )
d370 2
a371 2
	v = getchar();
	v |= (getchar()<<8);	/* order is important! */
d386 1
a386 1
	fread( in, 8, 1, stdin );
d413 2
d422 2
d428 102
a529 2
	printf("DFntM (%s) %d %d moveto show\n",
		str, sx, sy );
@


1.2
log
@set default line type, added new page handler
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: pl-ps.c,v 1.1 89/04/23 05:28:52 mike Locked $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: pl-X.c,v 8.1 88/10/05 00:43:27 mike Rel3_0 $ (BRL)";
d177 1
d260 1
a260 1
			/* XXX */
@
