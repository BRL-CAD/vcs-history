head	11.17;
access;
symbols
	ansi-20040405-merged:11.13.2.2
	postmerge-20040405-ansi:11.15
	premerge-20040404-ansi:11.14
	postmerge-autoconf:11.14
	autoconf-freeze:11.13.10.2
	premerge-autoconf:11.14
	postmerge-20040315-windows:11.14
	premerge-20040315-windows:11.14
	windows-20040315-freeze:11.13.4.1
	autoconf-20031203:11.13
	autoconf-20031202:11.13
	autoconf-branch:11.13.0.10
	phong-branch:11.13.0.8
	photonmap-branch:11.13.0.6
	rel-6-1-DP:11.13
	windows-branch:11.13.0.4
	rel-6-0-2:11.11
	ansi-branch:11.13.0.2
	rel-6-0-1-branch:11.11.0.2
	hartley-6-0-post:11.12
	hartley-6-0-pre:11.11
	rel-6-0-1:11.11
	rel-6-0:11.11
	rel-5-4:11.5
	offsite-5-3-pre:11.7
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.4
	rel-5-0-beta:11.4
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1;
locks; strict;
comment	@ * @;


11.17
date	2004.05.21.14.58.01;	author morrison;	state dead;
branches;
next	11.16;

11.16
date	2004.05.10.15.30.51;	author erikg;	state Exp;
branches;
next	11.15;

11.15
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.14;

11.14
date	2004.02.02.17.39.52;	author morrison;	state Exp;
branches;
next	11.13;

11.13
date	2002.08.20.17.09.06;	author jra;	state Exp;
branches
	11.13.2.1
	11.13.4.1
	11.13.10.1;
next	11.12;

11.12
date	2002.08.15.20.56.17;	author hartley;	state Exp;
branches;
next	11.11;

11.11
date	2001.08.10.20.57.08;	author butler;	state Exp;
branches;
next	11.10;

11.10
date	2001.04.05.19.36.10;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2001.04.02.21.38.36;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2001.03.31.01.57.40;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2000.09.01.03.24.04;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	2000.08.23.19.05.06;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	2000.03.31.03.11.48;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	99.01.13.22.11.13;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	98.09.14.15.59.25;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	96.10.03.00.25.12;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.13.23;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.11.30.09.16.19;	author jra;	state Exp;
branches;
next	10.2;

10.2
date	94.08.23.15.06.08;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.49.18;	author mike;	state Rel4_0;
branches;
next	9.11;

9.11
date	91.07.26.23.00.34;	author mike;	state Exp;
branches;
next	9.10;

9.10
date	91.06.19.10.37.00;	author mmark;	state Exp;
branches;
next	9.9;

9.9
date	91.06.19.10.18.03;	author mmark;	state Exp;
branches;
next	9.8;

9.8
date	91.05.31.22.08.30;	author mike;	state Exp;
branches;
next	9.7;

9.7
date	91.05.31.21.38.00;	author mike;	state Exp;
branches;
next	9.6;

9.6
date	91.05.31.19.31.29;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	91.05.17.21.30.54;	author sue;	state Exp;
branches;
next	9.4;

9.4
date	91.05.15.14.43.51;	author sue;	state Exp;
branches;
next	9.3;

9.3
date	91.05.14.21.28.37;	author sue;	state Exp;
branches;
next	9.2;

9.2
date	89.12.29.22.17.21;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.11.30;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.44.18;	author mike;	state Rel3_0;
branches;
next	1.4;

1.4
date	88.09.17.03.36.26;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	88.06.21.05.48.06;	author phil;	state Exp;
branches;
next	1.2;

1.2
date	88.05.16.00.07.05;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	88.02.13.03.13.01;	author phil;	state Exp;
branches;
next	;

11.13.2.1
date	2002.09.19.18.02.45;	author morrison;	state Exp;
branches;
next	11.13.2.2;

11.13.2.2
date	2004.03.17.21.23.36;	author morrison;	state Exp;
branches;
next	;

11.13.4.1
date	2004.03.11.23.52.36;	author morrison;	state Exp;
branches;
next	;

11.13.10.1
date	2004.02.12.19.43.12;	author erikg;	state Exp;
branches;
next	11.13.10.2;

11.13.10.2
date	2004.03.15.14.08.20;	author erikg;	state Exp;
branches;
next	;


desc
@unix plot rotate translate scale program
@


11.17
log
@moved to src/util/
@
text
@/*
 *  			P L R O T . C
 *  
 *  Rotate, Translate, and Scale a Unixplot file.
 *
 *  Authors -
 *	Phillip Dykstra
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/plrot.c,v 11.16 2004/05/10 15:30:51 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <ctype.h>
#include <math.h>

#include "machine.h"
#include "externs.h"			/* For getopt() */
#include "bu.h"
#include "vmath.h"
#include "plot3.h"
#include "bn.h"

#define	UPPER_CASE(c)	((c)-32)
#define	COPY(n)	{fread(cbuf,1,n,fp); fwrite(cbuf,1,n,stdout);}
#define	SKIP(n)	{fread(cbuf,1,n,fp);}
#define LEN 265

#define	putsi(s) {putchar(s); putchar((s)>>8);}

double	getdouble(FILE *fp);

char	cbuf[48];		/* COPY and SKIP macro buffer */

mat_t	rmat;			/* rotation matrix to be applied */
double	scale;			/* scale factor to be applied */

int	verbose;

int	space_set;		/* current space has been explicitly set */
point_t	space_min, space_max;	/* Current space */

int	forced_space;		/* space is being forced */
point_t	forced_space_min, forced_space_max;	/* forced space */

int	rpp;			/* flag: compute new center values */
int	Mflag;			/* flag: don't rebound space rpp */

void	dofile(FILE *fp);
void	copy_string(FILE *fp);
void	two_coord_out(FILE *fp, fastf_t *m);
void	three_coord_out(FILE *fp, fastf_t *m);
void	two_dcoord_out(FILE *fp, fastf_t *m);
void	three_dcoord_out(FILE *fp, fastf_t *m);

static char usage[] = "\
Usage: plrot [options] [file1 ... fileN] > file.plot\n\
   -x# -y# -z#    Rotation about axis in degrees\n\
   -X# -Y# -Z#    Translation along axis\n\
   -s#            Scale factor\n\
   -a# -e#        Azimuth/Elevation from front view\n\
                  (usually first, in this order, implies -M)\n\
   -g             MGED front view to display coordinates (usually last)\n\
   -M             Autoscale space command like RT model RPP\n\
   -m#            Takes a 4X4 matrix as an argument\n\
   -v             Verbose\n\
   -S#            Space: takes a quoted string of six floats\n";

/*
 *			M O D E L _ R P P
 *
 *  Process a space command.
 *  Behavior depends on setting of several flags.
 *
 *  Implicit Returns -
 *	In all cases, sets space_min and space_max.
 */
int
model_rpp(const fastf_t *min, const fastf_t *max)
{

	if( space_set )  {
		fprintf(stderr, "plrot:  additional SPACE command ignored\n");
		fprintf(stderr, "got: space (%g, %g, %g) (%g, %g, %g)\n",
			V3ARGS(min), V3ARGS(max) );
		fprintf(stderr, "still using: space (%g, %g, %g) (%g, %g, %g)\n",
			V3ARGS(space_min), V3ARGS(space_max) );
		return 0;
	}

	if( rpp )  {
		point_t	rot_center;		/* center of rotation */
		mat_t	xlate;
		mat_t	resize;
		mat_t	t1, t2;

		VADD2SCALE( rot_center, min, max, 0.5 );

		/* Create the matrix which encodes this */
		MAT_IDN( xlate );
		MAT_DELTAS( xlate, -rot_center[X], -rot_center[Y], -rot_center[Z] );
		MAT_IDN( resize );
		resize[15] = 1/scale;
		bn_mat_mul( t1, resize, xlate );
		bn_mat_mul( t2, rmat, t1 );
		MAT_COPY( rmat, t2 );
		if( verbose )  {
			bn_mat_print("rmat", rmat);
		}

		if( Mflag )  {
			/*  Don't rebound, just expand size of space
			 *  around center point.
			 *  Has advantage of the output space() not being
			 *  affected by changes in rotation,
			 *  which may be significant for animation scripts.
			 */
			vect_t	diag;
			double	v;

			VSUB2( diag, max, min );
			v = MAGNITUDE(diag)*0.5 + 0.5;
			VSET( space_min, -v, -v, -v );
			VSET( space_max,  v,  v,  v );
		} else {
			/* re-bound the space() rpp with a tighter one
			 * after rotating & scaling it.
			 */
			bn_rotate_bbox( space_min, space_max, rmat, min, max );
		}
		space_set = 1;
	} else {
		VMOVE( space_min, min );
		VMOVE( space_max, max );
		space_set = 1;
	}

	if( forced_space )  {
		/* Put forced space back */
		VMOVE( space_min, forced_space_min );
		VMOVE( space_max, forced_space_max );
		space_set = 1;
	}

	if( verbose )  {
		fprintf(stderr, "got: space (%g, %g, %g) (%g, %g, %g)\n",
			V3ARGS(min), V3ARGS(max) );
		fprintf(stderr, "put: space (%g, %g, %g) (%g, %g, %g)\n",
			V3ARGS(space_min), V3ARGS(space_max) );
	}

	return( 1 );
}


int
getshort(FILE *fp)
{
	register long	v, w;

	v = getc(fp);
	v |= (getc(fp)<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}



int
get_args(int argc, register char **argv)
{
	register int c;
	mat_t	tmp, m;
	int	i, num;
	double	mtmp[16];

	MAT_IDN( rmat );
	scale = 1.0;

	while ( (c = getopt( argc, argv, "S:m:vMga:e:x:y:z:X:Y:Z:s:" )) != EOF )  {
		switch( c )  {
		case 'M':
			/* take model RPP from space() command */
			rpp++;
			Mflag = 1;		/* don't rebound */
			break;
		case 'g':
			bn_mat_angles( tmp, -90.0, 0.0, -90.0 );
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			break;
		case 'a':
			bn_mat_angles( tmp, 0.0, 0.0, -atof(optarg) );
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			rpp++;
			break;
		case 'e':
			bn_mat_angles( tmp, 0.0, -atof(optarg), 0.0 );
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			rpp++;
			break;
		case 'x':
			bn_mat_angles( tmp, atof(optarg), 0.0, 0.0 );
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			break;
		case 'y':
			bn_mat_angles( tmp, 0.0, atof(optarg), 0.0 );
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			break;
		case 'z':
			bn_mat_angles( tmp, 0.0, 0.0, atof(optarg) );
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			break;
		case 'm':
			num = sscanf(&optarg[0], "%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf", 
				&mtmp[0], &mtmp[1], &mtmp[2], &mtmp[3],
				&mtmp[4], &mtmp[5], &mtmp[6], &mtmp[7],
				&mtmp[8], &mtmp[9], &mtmp[10], &mtmp[11],
				&mtmp[12], &mtmp[13], &mtmp[14], &mtmp[15]);

			if( num != 16)  {
				fprintf(stderr, "Num of arguments to -m only %d, should be 16\n", num);
				exit(1);
			}

			/* Now copy the array of doubles into mat. */
			for(i=0; i < 16; i++ )  {
				rmat[i] = mtmp[i];
			}
			break;
		case 'X':
			MAT_IDN( tmp );
			tmp[MDX] = atof(optarg);
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			break;
		case 'Y':
			MAT_IDN( tmp );
			tmp[MDY] = atof(optarg);
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			break;
		case 'Z':
			MAT_IDN( tmp );
			tmp[MDZ] = atof(optarg);
			MAT_COPY( m, rmat );
			bn_mat_mul( rmat, tmp, m );
			break;
		case 's':
			scale *= atof(optarg);
			/*
			 *  If rpp flag has already been set, defer
			 *  application of scale until after the
			 *  xlate to space-center, in model_rpp().
			 *  Otherwise, do it here, in the sequence
			 *  seen in the arg list.
			 */
			if( !rpp )  {
				MAT_IDN( tmp );
				tmp[15] = 1/scale;
				MAT_COPY( m, rmat );
				bn_mat_mul( rmat, tmp, m );
				scale = 1.0;
			}
			break;
		case 'v':
			verbose++;
			break;
		case 'S':
			num = sscanf(optarg, "%lf %lf %lf %lf %lf %lf",
				&mtmp[0], &mtmp[1], &mtmp[2],
				&mtmp[3], &mtmp[4], &mtmp[5]);
			VSET(forced_space_min, mtmp[0], mtmp[1], mtmp[2]);
			VSET(forced_space_max, mtmp[3], mtmp[4], mtmp[5]);

			/* Write it now, in case input does not have one */
			pdv_3space( stdout, forced_space_min, forced_space_max );
			forced_space = 1;
			break;
		default:		/* '?' */
			return(0);	/* Bad */
		}
	}


	if( isatty(fileno(stdout))
	  || (isatty(fileno(stdin)) && (optind >= argc)) )  {
		return(0);	/* Bad */
	}

	return(1);		/* OK */
}


/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	FILE	*fp=NULL;

	if( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1);
	}

	if( verbose )  {
		bn_mat_print("rmat", rmat);
	}

	if( optind < argc ) {
		while( optind < argc ) {
			if( fp != NULL && fp != stdin )
				fclose( fp );
			if( strcmp(argv[optind], "-") == 0 )
				fp = stdin;
			else if( (fp = fopen(argv[optind],"r")) == NULL ) {
				fprintf( stderr, "plrot: can't open \"%s\"\n", argv[optind] );
				continue;
			}
			dofile( fp );
			optind++;
		}
	} else {
		dofile( stdin );
	}
	return 0;
}

/*
 *			D O F I L E
 */
void
dofile(FILE *fp)
{
	register int	c;

	while( (c = getc(fp)) != EOF ) {
		switch( c ) {
		/* One of a kind functions */
		case 'e':
		case 'F':
			putchar( c );
			break;
		case 'f':
		case 't':
			putchar( c );
			copy_string( fp );
			break;
		case 'C':
			putchar( c );
			COPY(3);
			break;
		case 'c':	/* map x, y? */
			putchar( c );
			COPY(6);
			break;
		case 'a':	/* map points? */
			putchar( c );
			COPY(12);
			break;
		case 'p':
		case 'm':
		case 'n':
			/* Two coordinates in, three out. Change command. */
			putchar( UPPER_CASE(c) );
			two_coord_out( fp, rmat );
			break;
		case 'l':
			putchar( 'L' );
			two_coord_out( fp, rmat );
			two_coord_out( fp, rmat );
			break;
		case 'P':
		case 'M':
		case 'N':
			putchar( c );
			three_coord_out( fp, rmat );
			break;
		case 'L':
			putchar( c );
			three_coord_out( fp, rmat );
			three_coord_out( fp, rmat );
			break;
		case 's':
			{
				/*  2-D integer SPACE command.
				 *  This is the only AT&T compatible space
				 *  command;  be certain to only output
				 *  with pl_space(), to ensure that output
				 *  file is AT&T style if input was.
				 */
				long	minx, miny, maxx, maxy;
				point_t	min, max;

				minx = getshort(fp);
				miny = getshort(fp);
				maxx = getshort(fp);
				maxy = getshort(fp);

				VSET( min, minx, miny, -1 );
				VSET( max, maxx, maxy, -1 );
				model_rpp( min, max );

				minx = (long)floor( space_min[X] );
				miny = (long)floor( space_min[Y] );
				maxx = (long)ceil( space_max[X] );
				maxy = (long)ceil( space_max[Y] );
				if( minx < -32768 )  minx = -32768;
				if( miny < -32768 )  miny = -32768;
				if( maxx > 32767 )  maxx = 32767;
				if( maxy > 32767 )  maxy = 32767;

				pl_space( stdout, minx, miny, maxx, maxy );
			}
			break;
		case 'S':
			{
				/* BRL-extended 3-D integer SPACE command */
				point_t	min, max;

				min[X] = getshort(fp);
				min[Y] = getshort(fp);
				min[Z] = getshort(fp);
				max[X] = getshort(fp);
				max[Y] = getshort(fp);
				max[Z] = getshort(fp);

				model_rpp( min, max );

				pdv_3space( stdout, space_min, space_max );
			}
			break;
		/* 2D and 3D IEEE */
		case 'w':
			{
				/* BRL 2-D floating point SPACE command */
				point_t	min, max;

				min[X] = getdouble(fp);
				min[Y] = getdouble(fp);
				min[Z] = -1.0;
				max[X] = getdouble(fp);
				max[Y] = getdouble(fp);
				max[Z] = 1.0;

				model_rpp( min, max );

				pdv_3space( stdout, space_min, space_max );
			}
			break;
		case 'W':
			{
				/* BRL 3-D floating point SPACE command */
				point_t	min, max;

				min[X] = getdouble(fp);
				min[Y] = getdouble(fp);
				min[Z] = getdouble(fp);
				max[X] = getdouble(fp);
				max[Y] = getdouble(fp);
				max[Z] = getdouble(fp);

				model_rpp( min, max );

				pdv_3space( stdout, space_min, space_max );
			}
			break;
		case 'i':
			putchar(c);
			COPY(3*8);
			break;
		case 'r':
			putchar(c);
			COPY(6*8);
			break;
		case 'x':
		case 'o':
		case 'q':
			/* Two coordinates in, three out.  Change command. */
			putchar( UPPER_CASE(c) );
			two_dcoord_out( fp, rmat );
			break;
		case 'v':
			/* Two coordinates in, three out.  Change command. */
			putchar( 'V' );
			two_dcoord_out( fp, rmat );
			two_dcoord_out( fp, rmat );
			break;
		case 'X':
		case 'O':
		case 'Q':
			putchar( c );
			three_dcoord_out( fp, rmat );
			break;
		case 'V':
			putchar( c );
			three_dcoord_out( fp, rmat );
			three_dcoord_out( fp, rmat );
			break;
		default:
			fprintf( stderr, "plrot: unrecognized command '%c' (0x%x)\n",
				(isascii(c) && isprint(c)) ? c : '?',
				c );
			fprintf( stderr, "plrot: ftell = %ld\n", ftell(fp) );
			putchar( c );
			break;
		}
	}
}

/*
 *			C O P Y _ S T R I N G
 */
void
copy_string(FILE *fp)
{
	int	c;

	while( (c = putchar(getc(fp))) != '\n' && c != EOF )
		;
}


/******* Coordinate Transforms / Output *******/

void
two_coord_out(FILE *fp, fastf_t *m)
{
	point_t	p1;
	short	p2[3];

	p1[0] = getshort(fp);	/* get X */
	p1[1] = getshort(fp);	/* and Y */
	p1[2] = 0;		/* no Z  */

	MAT4X3PNT( p2, m, p1 );

	putsi(p2[0]);		/* put X */
	putsi(p2[1]);		/* and Y */
	putsi(p2[2]);		/* and Z */
}

void
three_coord_out(FILE *fp, fastf_t *m)
{
	point_t	p1;
	short	p2[3];

	p1[0] = getshort(fp);	/* get X */
	p1[1] = getshort(fp);	/* and Y */
	p1[2] = getshort(fp);	/* and Z */

	MAT4X3PNT( p2, m, p1 );

	putsi(p2[0]);		/* put X */
	putsi(p2[1]);		/* and Y */
	putsi(p2[2]);		/* and Z */
}

void
two_dcoord_out(FILE *fp, fastf_t *m)
{
	unsigned char	buf[2*8];
	double	p1[3];
	double	p2[3];

	fread( buf, 1, 2*8, fp );
	ntohd( (unsigned char *)p1, buf, 2 );
	p1[2] = 0;		/* no Z  */

	MAT4X3PNT( p2, m, p1 );

	htond( buf, (unsigned char *)p2, 3 );
	fwrite( buf, 1, 3*8, stdout );
}

void
three_dcoord_out(FILE *fp, fastf_t *m)
{
	unsigned char	buf[3*8];
	double	p1[3];
	double	p2[3];

	fread( buf, 1, 3*8, fp );
	ntohd( (unsigned char *)p1, buf, 3 );

	MAT4X3PNT( p2, m, p1 );

	htond( buf, (unsigned char *)p2, 3 );
	fwrite( buf, 1, 3*8, stdout );
}


double
getdouble(FILE *fp)
{
	double	d;
	unsigned char	buf[8];
	fread( buf, 8, 1, fp );
	ntohd( (unsigned char *)&d, buf, 1 );
	return( d );
}
@


11.16
log
@change conf.h to a wrapped config.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/plrot.c,v 11.15 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.15
log
@merge of ansi-6-0-branch into head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d23 5
a27 1
#include "conf.h"
@


11.14
log
@update copyright to include span through 2003
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.13 2002/08/20 17:09:06 jra Exp $ (BRL)";
d48 1
a48 1
double	getdouble();
d66 6
a71 3
void	dofile(), copy_string();
void	two_coord_out(), three_coord_out();
void	two_dcoord_out(), three_dcoord_out();
d96 1
a96 2
model_rpp( min, max )
const point_t	min, max;
d174 1
a174 2
getshort( fp )
FILE	*fp;
d191 1
a191 2
get_args( argc, argv )
register char **argv;
d325 1
a325 3
main( argc, argv )
int	argc;
char	**argv;
d361 1
a361 2
dofile( fp )
FILE	*fp;
d543 1
a543 2
copy_string( fp )
FILE	*fp;
d555 1
a555 3
two_coord_out( fp, m )
FILE	*fp;
mat_t	m;
d572 1
a572 3
three_coord_out( fp, m )
FILE	*fp;
mat_t	m;
d589 1
a589 3
two_dcoord_out( fp, m )
FILE	*fp;
mat_t	m;
d606 1
a606 3
three_dcoord_out( fp, m )
FILE	*fp;
mat_t	m;
d623 1
a623 2
getdouble( fp )
FILE	*fp;
@


11.13
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.11 2001/08/10 20:57:08 butler Exp $ (BRL)";
@


11.13.4.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/plrot.c,v 11.14 2004/02/02 17:39:52 morrison Exp $ (BRL)";
@


11.13.10.1
log
@merge from HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.14 2004/02/02 17:39:52 morrison Exp $ (BRL)";
@


11.13.10.2
log
@merge from head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.13.10.1 2004/02/12 19:43:12 erikg Exp $ (BRL)";
@


11.13.2.1
log
@Initial ANSIfication
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.13 2002/08/20 17:09:06 jra Exp $ (BRL)";
d48 1
a48 1
double	getdouble(FILE *fp);
d66 3
a68 3
void	dofile(FILE *fp), copy_string(FILE *fp);
void	two_coord_out(FILE *fp, fastf_t *m), three_coord_out(FILE *fp, fastf_t *m);
void	two_dcoord_out(FILE *fp, fastf_t *m), three_dcoord_out(FILE *fp, fastf_t *m);
d93 2
a94 1
model_rpp(const fastf_t *min, const fastf_t *max)
d172 2
a173 1
getshort(FILE *fp)
d190 2
a191 1
get_args(int argc, register char **argv)
d325 3
a327 1
main(int argc, char **argv)
d363 2
a364 1
dofile(FILE *fp)
d546 2
a547 1
copy_string(FILE *fp)
d559 3
a561 1
two_coord_out(FILE *fp, fastf_t *m)
d578 3
a580 1
three_coord_out(FILE *fp, fastf_t *m)
d597 3
a599 1
two_dcoord_out(FILE *fp, fastf_t *m)
d616 3
a618 1
three_dcoord_out(FILE *fp, fastf_t *m)
d635 2
a636 1
getdouble(FILE *fp)
@


11.13.2.2
log
@sync branch with HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.12
log
@Converted from K&R to ANSI C - RFH
@
text
@d48 1
a48 1
double	getdouble(FILE *fp);
d66 3
a68 3
void	dofile(FILE *fp), copy_string(FILE *fp);
void	two_coord_out(FILE *fp, fastf_t *m), three_coord_out(FILE *fp, fastf_t *m);
void	two_dcoord_out(FILE *fp, fastf_t *m), three_dcoord_out(FILE *fp, fastf_t *m);
d93 2
a94 1
model_rpp(const fastf_t *min, const fastf_t *max)
d172 2
a173 1
getshort(FILE *fp)
d190 2
a191 1
get_args(int argc, register char **argv)
d325 3
a327 1
main(int argc, char **argv)
d363 2
a364 1
dofile(FILE *fp)
d546 2
a547 1
copy_string(FILE *fp)
d559 3
a561 1
two_coord_out(FILE *fp, fastf_t *m)
d578 3
a580 1
three_coord_out(FILE *fp, fastf_t *m)
d597 3
a599 1
two_dcoord_out(FILE *fp, fastf_t *m)
d616 3
a618 1
three_dcoord_out(FILE *fp, fastf_t *m)
d635 2
a636 1
getdouble(FILE *fp)
@


11.11
log
@Misc compiler warnings eliminated
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.10 2001/04/05 19:36:10 morrison Exp $ (BRL)";
d48 1
a48 1
double	getdouble();
d66 3
a68 3
void	dofile(), copy_string();
void	two_coord_out(), three_coord_out();
void	two_dcoord_out(), three_dcoord_out();
d93 1
a93 2
model_rpp( min, max )
const point_t	min, max;
d171 1
a171 2
getshort( fp )
FILE	*fp;
d188 1
a188 2
get_args( argc, argv )
register char **argv;
d322 1
a322 3
main( argc, argv )
int	argc;
char	**argv;
d358 1
a358 2
dofile( fp )
FILE	*fp;
d540 1
a540 2
copy_string( fp )
FILE	*fp;
d552 1
a552 3
two_coord_out( fp, m )
FILE	*fp;
mat_t	m;
d569 1
a569 3
three_coord_out( fp, m )
FILE	*fp;
mat_t	m;
d586 1
a586 3
two_dcoord_out( fp, m )
FILE	*fp;
mat_t	m;
d603 1
a603 3
three_dcoord_out( fp, m )
FILE	*fp;
mat_t	m;
d620 1
a620 2
getdouble( fp )
FILE	*fp;
@


11.10
log
@updated SIGNED to signed
updated CONST to const
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.9 2001/04/02 21:38:36 morrison Exp $ (BRL)";
d26 5
d38 1
d83 107
d320 1
d356 1
a554 86
/*
 *			M O D E L _ R P P
 *
 *  Process a space command.
 *  Behavior depends on setting of several flags.
 *
 *  Implicit Returns -
 *	In all cases, sets space_min and space_max.
 */
int
model_rpp( min, max )
const point_t	min, max;
{

	if( space_set )  {
		fprintf(stderr, "plrot:  additional SPACE command ignored\n");
		fprintf(stderr, "got: space (%g, %g, %g) (%g, %g, %g)\n",
			V3ARGS(min), V3ARGS(max) );
		fprintf(stderr, "still using: space (%g, %g, %g) (%g, %g, %g)\n",
			V3ARGS(space_min), V3ARGS(space_max) );
		return 0;
	}

	if( rpp )  {
		point_t	rot_center;		/* center of rotation */
		mat_t	xlate;
		mat_t	resize;
		mat_t	t1, t2;

		VADD2SCALE( rot_center, min, max, 0.5 );

		/* Create the matrix which encodes this */
		MAT_IDN( xlate );
		MAT_DELTAS( xlate, -rot_center[X], -rot_center[Y], -rot_center[Z] );
		MAT_IDN( resize );
		resize[15] = 1/scale;
		bn_mat_mul( t1, resize, xlate );
		bn_mat_mul( t2, rmat, t1 );
		MAT_COPY( rmat, t2 );
		if( verbose )  {
			bn_mat_print("rmat", rmat);
		}

		if( Mflag )  {
			/*  Don't rebound, just expand size of space
			 *  around center point.
			 *  Has advantage of the output space() not being
			 *  affected by changes in rotation,
			 *  which may be significant for animation scripts.
			 */
			vect_t	diag;
			double	v;

			VSUB2( diag, max, min );
			v = MAGNITUDE(diag)*0.5 + 0.5;
			VSET( space_min, -v, -v, -v );
			VSET( space_max,  v,  v,  v );
		} else {
			/* re-bound the space() rpp with a tighter one
			 * after rotating & scaling it.
			 */
			bn_rotate_bbox( space_min, space_max, rmat, min, max );
		}
		space_set = 1;
	} else {
		VMOVE( space_min, min );
		VMOVE( space_max, max );
		space_set = 1;
	}

	if( forced_space )  {
		/* Put forced space back */
		VMOVE( space_min, forced_space_min );
		VMOVE( space_max, forced_space_max );
		space_set = 1;
	}

	if( verbose )  {
		fprintf(stderr, "got: space (%g, %g, %g) (%g, %g, %g)\n",
			V3ARGS(min), V3ARGS(max) );
		fprintf(stderr, "put: space (%g, %g, %g) (%g, %g, %g)\n",
			V3ARGS(space_min), V3ARGS(space_max) );
	}

	return( 1 );
}
a632 14
getshort( fp )
FILE	*fp;
{
	register long	v, w;

	v = getc(fp);
	v |= (getc(fp)<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}
@


11.9
log
@Deprecated bn_mat_copy() for new performance version of MAT_COPY() macro in h/vmath.h.
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.8 2001/03/31 01:57:40 morrison Exp $ (BRL)";
d451 1
a451 1
CONST point_t	min, max;
@


11.8
log
@Deprecated bn_mat_idn() and bn_mat_zero(), updated calls to h/vmath.h's MAT_IDN() and MAT_ZERO() performance improved macros.
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.7 2000/09/01 03:24:04 mike Exp $ (BRL)";
d97 1
a97 1
			bn_mat_copy( m, rmat );
d102 1
a102 1
			bn_mat_copy( m, rmat );
d108 1
a108 1
			bn_mat_copy( m, rmat );
d114 1
a114 1
			bn_mat_copy( m, rmat );
d119 1
a119 1
			bn_mat_copy( m, rmat );
d124 1
a124 1
			bn_mat_copy( m, rmat );
d147 1
a147 1
			bn_mat_copy( m, rmat );
d153 1
a153 1
			bn_mat_copy( m, rmat );
d159 1
a159 1
			bn_mat_copy( m, rmat );
d174 1
a174 1
				bn_mat_copy( m, rmat );
d478 1
a478 1
		bn_mat_copy( rmat, t2 );
@


11.7
log
@
Lint fix
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.6 2000/08/23 19:05:06 mike Exp $ (BRL)";
d85 1
a85 1
	bn_mat_idn( rmat );
d145 1
a145 1
			bn_mat_idn( tmp );
d151 1
a151 1
			bn_mat_idn( tmp );
d157 1
a157 1
			bn_mat_idn( tmp );
d172 1
a172 1
				bn_mat_idn( tmp );
d472 1
a472 1
		bn_mat_idn( xlate );
d474 1
a474 1
		bn_mat_idn( resize );
@


11.6
log
@
const RCSid
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.5 2000/03/31 03:11:48 mike Exp $ (BRL)";
d210 1
@


11.5
log
@
sed4
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.4 1999/01/13 22:11:13 mike Exp $ (BRL)";
@


11.4
log
@Fixed htond() arg types.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.3 1998/09/14 15:59:25 bparker Exp $ (BRL)";
d85 1
a85 1
	mat_idn( rmat );
d96 3
a98 3
			mat_angles( tmp, -90.0, 0.0, -90.0 );
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d101 3
a103 3
			mat_angles( tmp, 0.0, 0.0, -atof(optarg) );
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d107 3
a109 3
			mat_angles( tmp, 0.0, -atof(optarg), 0.0 );
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d113 3
a115 3
			mat_angles( tmp, atof(optarg), 0.0, 0.0 );
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d118 3
a120 3
			mat_angles( tmp, 0.0, atof(optarg), 0.0 );
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d123 3
a125 3
			mat_angles( tmp, 0.0, 0.0, atof(optarg) );
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d145 1
a145 1
			mat_idn( tmp );
d147 2
a148 2
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d151 1
a151 1
			mat_idn( tmp );
d153 2
a154 2
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d157 1
a157 1
			mat_idn( tmp );
d159 2
a160 2
			mat_copy( m, rmat );
			mat_mul( rmat, tmp, m );
d172 1
a172 1
				mat_idn( tmp );
d174 2
a175 2
				mat_copy( m, rmat );
				mat_mul( rmat, tmp, m );
d222 1
a222 1
		mat_print("rmat", rmat);
d471 1
a471 1
		mat_idn( xlate );
d473 1
a473 1
		mat_idn( resize );
d475 3
a477 3
		mat_mul( t1, resize, xlate );
		mat_mul( t2, rmat, t1 );
		mat_copy( rmat, t2 );
d479 1
a479 1
			mat_print("rmat", rmat);
d500 1
a500 1
			rt_rotate_bbox( space_min, space_max, rmat, min, max );
@


11.3
log
@*- fix typos
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/plrot.c,v 11.2 1996/10/03 00:25:12 mike Exp $ (BRL)";
d571 1
a571 1
	char	buf[2*8];
d576 1
a576 1
	ntohd( p1, buf, 2 );
d581 1
a581 1
	htond( buf, p2, 3 );
d590 1
a590 1
	char	buf[3*8];
d595 1
a595 1
	ntohd( p1, buf, 3 );
d599 1
a599 1
	htond( buf, p2, 3 );
d623 1
a623 1
	char	buf[8];
d625 1
a625 1
	ntohd( &d, buf, 1 );
@


11.2
log
@bn.h
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 11.1 1995/01/04 10:13:23 mike Rel4_4 mike $ (BRL)";
d419 1
a419 1
			fprintf( stderr, "plrot: ftell = %d\n", ftell(fp) );
@


11.1
log
@Release_4.4
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 10.3 94/11/30 09:16:19 jra Exp $ (BRL)";
d31 1
d33 1
@


10.3
log
@INitialized fp to NULL and removed an unused variable.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 10.2 94/08/23 15:06:08 gdurf Exp Locker: jra $ (BRL)";
@


10.2
log
@Factored ifdefs
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 10.1 1991/10/12 06:49:18 mike Rel4_0 gdurf $ (BRL)";
d212 1
a212 1
	FILE	*fp;
a248 1
	int		num;
@


10.1
log
@Release_4.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.11 91/07/26 23:00:34 mike Exp $ (BRL)";
d23 2
d28 1
a28 1
#include "externs.h"
d30 1
a38 4

extern int	getopt();
extern char	*optarg;
extern int	optind;
@


9.11
log
@There was a bug in the space min/max rebounding.
Changed to useing working routine, from LIBRT.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.10 91/06/19 10:37:00 mmark Exp $ (BRL)";
@


9.10
log
@refixed usage msg
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.9 91/06/19 10:18:03 mmark Exp $ (BRL)";
a439 48
 *			R O T A T E _ B B O X
 *
 *  Transform a bounding box (RPP) by the given 4x4 matrix.
 *  There are 8 corners to the bounding RPP.
 *  Each one needs to be transformed and min/max'ed.
 *  This is not minimal, but does fully contain any internal object,
 *  using an axis-aligned RPP.
 */
void
rotate_bbox( omin, omax, mat, imin, imax )
point_t		omin;
point_t		omax;
CONST mat_t	mat;
CONST point_t	imin;
CONST point_t	imax;
{
	point_t		rmin, rmax;
	point_t		pt;

	MAT4X3PNT( rmin, mat, imin );
	MAT4X3PNT( rmax, mat, imax );

	VSET( omin, rmin[X], rmin[Y], rmin[Z] );
	VMOVE( omax, omin );

	VSET( pt, rmax[X], rmin[Y], rmin[Z] );
	VMINMAX( omin, omax, pt );

	VSET( pt, rmin[X], rmax[Y], rmin[Z] );
	VMINMAX( omin, omax, pt );

	VSET( pt, rmax[X], rmax[Y], rmin[Z] );
	VMINMAX( omin, omax, pt );

	VSET( pt, rmin[X], rmin[Y], rmax[Z] );
	VMINMAX( omin, omax, pt );

	VSET( pt, rmax[X], rmin[Y], rmax[Z] );
	VMINMAX( omin, omax, pt );

	VSET( pt, rmin[X], rmax[Y], rmax[Z] );
	VMINMAX( omin, omax, pt );

	VSET( pt, rmax[X], rmax[Y], rmax[Z] );
	VMINMAX( omin, omax, pt );
}

/*
d448 1
d500 1
a500 1
			rotate_bbox( space_min, space_max, rmat, min, max );
@


9.9
log
@fixed synopsis
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.8 91/05/31 22:08:30 mike Exp $ (BRL)";
d65 4
a68 4
   -x # -y # -z # Rotation about axis in degrees\n\
   -X # -Y # -Z # Translation along axis\n\
   -s #           Scale factor\n\
   -a # -e #      Azimuth/Elevation from front view\n\
d72 1
a72 1
   -m #           Takes a 4X4 matrix as an argument\n\
d74 1
a74 1
   -S #           Space: takes a quoted string of six floats\n";
@


9.8
log
@After reviewing the man page, it was clear that functionality
was lost.
So, 'rpp' flag triggers re-centering.
(from -a, -e, -M).
If -M is explicitly given, then old "expanding sphere" space()
is performed, otherwise, space() is re-bounded to account for rotation.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.7 91/05/31 21:38:00 mike Exp $ (BRL)";
d65 4
a68 4
   -x# -y# -z#    Rotation about axis in degrees\n\
   -X# -Y# -Z#    Translation along axis\n\
   -s#            Scale factor\n\
   -a# -e#        Azimuth/Elevation from front view\n\
d70 1
a70 1
   -g		  MGED front view to display coordinates (usually last)\n\
d72 3
a74 3
   -m#		  Takes a 4X4 matrix as an argument\n\
   -v		  Verbose\n\
   -S#		  Space: takes a quoted string of four integers\n";
@


9.7
log
@Modified to perform all transformations via "rmat" matrix.
In "rpp" mode, re-bound the space() rpp after rotating it,
so that vectors that were within the space() rpp before rotation
will still be within the new space rpp after rotation.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.6 91/05/31 19:31:29 mike Exp $ (BRL)";
d56 2
a57 1
int	rpp;			/* flag: indicates new center and space values */
d92 1
d529 20
a548 2
		/* re-bound the space() rpp after rotating & scaling it */
		rotate_bbox( space_min, space_max, rmat, min, max );
@


9.6
log
@Changed variable names
@
text
@d6 1
a6 1
 *  Author -
d8 1
d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.5 91/05/17 21:30:54 sue Exp $ (BRL)";
d24 1
d47 1
a47 1
int	doscale;
a48 2
int	forced_space;			/* take center and space values from space option */
point_t	forced_space_min, forced_space_max;	/* min and max coordinates */
d50 2
a51 3
int	rpp;			/* indicates new center and space values */
double	centx, centy, centz;	/* new center of rotation values */
double	viewsize = 2.0;
d53 5
d89 1
a89 1
			/* model RPP! */
a139 3
fprintf(stderr, "rmat[0]=%g, rmat[1]=%g, rmat[3]=%g\n", rmat[0], rmat[1], rmat[3]);

mat_print("rmat", rmat);
d161 14
a174 1
			doscale++;
d185 4
a188 1
			forced_space++;
d195 1
d204 3
a219 1
		fprintf(stderr, "scale=%g\n", scale);
d240 3
d299 8
a306 2
				/* SPACE transform */
				int	minx, miny, minz, maxx, maxy, maxz;
a308 1

a311 4
				minz = -1;
				maxz = 1;
				if( rpp ) {
					short	v;
d313 3
a315 2
					model_rpp( (double)minx, (double)miny, (double)minz,
						(double)maxx, (double)maxy, (double)maxz );
d317 10
a326 8
					/* output viewsize cube */
					v = viewsize/2.0 + 0.5;
					pl_3space( stdout, -v, -v, -v, v, v, v );
				} else if (forced_space)  {
					pdv_3space(stdout, forced_space_min, forced_space_max);
				} else {
					pl_3space( stdout, minx, miny, -1, maxx, maxy, 1 );
				}
d330 3
a332 3
			if( rpp ) {
				int	minx, miny, minz, maxx, maxy, maxz;
				short	v;
d334 6
a339 6
				minx = getshort(fp);
				miny = getshort(fp);
				minz = getshort(fp);
				maxx = getshort(fp);
				maxy = getshort(fp);
				maxz = getshort(fp);
d341 1
a341 2
				model_rpp( (double)minx, (double)miny, (double)minz,
					(double)maxx, (double)maxy, (double)maxz );
d343 1
a343 10
				/* output viewsize cube */
				v = viewsize/2.0 + 0.5;
				pl_3space( stdout, -v, -v, -v, v, v, v );
			} else if (forced_space)  {
				SKIP(6*2);
				pdv_3space(stdout, forced_space_min, forced_space_max);
			} else {
				/* leave it unchanged */
				putchar(c);
				COPY(6*2);
a344 2
			/* Third option: rotate and rebound? */
			/* 4th, universal space? */
d349 2
a350 2
				/* SPACE transform */
				double	minx, miny, minz, maxx, maxy, maxz;
d352 6
a357 8
				minx = getdouble(fp);
				miny = getdouble(fp);
				maxx = getdouble(fp);
				maxy = getdouble(fp);
				minz = -1.0;
				maxz = 1.0;
				if( rpp ) {
					double	v;
d359 1
a359 2
					model_rpp( minx, miny, minz,
						maxx, maxy, maxz );
d361 1
a361 8
					/* output viewsize cube */
					v = viewsize/2.0;
					pd_3space( stdout, -v, -v, -v, v, v, v );
				} else if (forced_space)  {
					pdv_3space(stdout, forced_space_min, forced_space_max);
				} else {
					pd_3space( stdout, minx, miny, -1.0, maxx, maxy, 1.0 );
				}
d365 3
a367 3
			if( rpp ) {
				double	minx, miny, minz, maxx, maxy, maxz;
				double	v;
d369 6
a374 6
				minx = getdouble(fp);
				miny = getdouble(fp);
				minz = getdouble(fp);
				maxx = getdouble(fp);
				maxy = getdouble(fp);
				maxz = getdouble(fp);
d376 1
a376 2
				model_rpp( minx, miny, minz,
					maxx, maxy, maxz );
d378 1
a378 10
				/* output viewsize cube */
				v = viewsize/2.0;
				pd_3space( stdout, -v, -v, -v, v, v, v );
			} else if (forced_space)  {
				SKIP(6*8);
				pdv_3space(stdout, forced_space_min, forced_space_max);
			} else {
				/* leave it unchanged */
				putchar(c);
				COPY(6*8);
d414 3
a416 1
			fprintf( stderr, "plrot: unrecognized command '%c' (0x%x)\n", c, c );
d424 3
d437 16
a452 2
model_rpp( minx, miny, minz, maxx, maxy, maxz )
double	minx, miny, minz, maxx, maxy, maxz;
d454 2
a455 1
	double	dx, dy, dz;
d457 2
a458 3
	centx = (maxx + minx) / 2.0;
	centy = (maxy + miny) / 2.0;
	centz = (maxz + minz) / 2.0;
d460 2
a461 4
	dx = maxx - minx;
	dy = maxy - miny;
	dz = maxz - minz;
	viewsize = sqrt( dx*dx + dy*dy + dz*dz );
d463 80
d544 4
a547 5
		fprintf(stderr, "space (%g, %g, %g) (%g, %g, %g)\n",
			minx, miny, minz,
			maxx, maxy, maxz);
		fprintf(stderr, "  center=(%g, %g, %g), size=%g\n",
			centx, centy, centz, viewsize);
a549 2
	doscale++;

a566 6
	if( doscale ) {
		p1[0] = (p1[0] - centx) * scale;
		p1[1] = (p1[1] - centy) * scale;
		p1[2] = (p1[2] - centz) * scale;
	}

a585 6
	if( doscale ) {
		p1[0] = (p1[0] - centx) * scale;
		p1[1] = (p1[1] - centy) * scale;
		p1[2] = (p1[2] - centz) * scale;
	}

a605 6
	if( doscale ) {
		p1[0] = (p1[0] - centx) * scale;
		p1[1] = (p1[1] - centy) * scale;
		p1[2] = (p1[2] - centz) * scale;
	}

a623 7
/*fprintf( stderr, "Before [%g %g %g %g]\n", p1[0], p1[1], p1[2], p1[3] );*/
	if( doscale ) {
		p1[0] = (p1[0] - centx) * scale;
		p1[1] = (p1[1] - centy) * scale;
		p1[2] = (p1[2] - centz) * scale;
	}

a625 1
/*fprintf( stderr, "After [%g %g %g %g]\n", p2[0], p2[1], p2[2], p2[3] );*/
a654 1

@


9.5
log
@Added the alternate space command (the one that goes with the
matrix from the registration program).
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.4 91/05/15 14:43:51 sue Exp $ (BRL)";
d47 2
a48 2
int	space;			/* take center and space values from space option */
point_t	space_min, space_max;	/* min and max coordinates */
d169 3
a171 6
			VSET(space_min, mtmp[0], mtmp[1], mtmp[2]);
			VSET(space_max, mtmp[3], mtmp[4], mtmp[5]);
VPRINT("space_min", space_min);
VPRINT("space_max", space_max);

			space++;
d295 2
a296 2
				} else if (space)  {
					pdv_3space(stdout, space_min, space_max);
d320 1
a320 1
			} else if (space)  {
d322 1
a322 1
				pdv_3space(stdout, space_min, space_max);
d352 2
a353 2
				} else if (space)  {
					pdv_3space(stdout, space_min, space_max);
d377 1
a377 1
			} else if (space)  {
d379 1
a379 3
				pdv_3space(stdout, space_min, space_max);
VPRINT("space_min", space_min);
VPRINT("space_max", space_max);
d440 1
a440 1
	float	dx, dy, dz;
@


9.4
log
@Corrected a typo and put a place-holder in for reading the imcomming
matrix.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.3 91/05/14 21:28:37 sue Exp $ (BRL)";
d31 1
d47 2
d68 2
a69 1
   -v		  Verbose\n";
d76 2
d82 1
a82 1
	while ( (c = getopt( argc, argv, "m:vMga:e:x:y:z:X:Y:Z:s:" )) != EOF )  {
d121 18
a138 1
			fprintf(stderr, "Planning to load input into rmat\n");
d165 11
d228 1
d298 2
d323 3
d355 2
d380 5
d460 1
a460 1
		fprintf(stderr, "  center=(%g, %g, %g, size=%g)\n",
d527 1
a527 1
	point_t	p1; 
d552 1
a552 1
	point_t	p1;
d597 1
@


9.3
log
@Added a verbose flag in anticipation of adding a -m# option
for reading in a registration matrix.  Likewise changed
P1[4] to point_t and P2[4] to P2[3], as well as MAT4X4PNT
to MAT4X3PNT.  Finally, I added some comments.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/plrot.c,v 9.2 89/12/29 22:17:21 mike Exp $ (BRL)";
d114 3
d413 1
a413 1
		fprintf(stderr, "  center=(%g, %g, %g, size=%g\n",
@


9.2
log
@Added "externs.h" for atof().
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: plrot.c,v 9.1 89/05/19 06:11:30 mike Locked $ (BRL)";
d45 1
d63 3
a65 1
   -M             Autoscale space command like RT model RPP\n";
d76 1
a76 1
	while ( (c = getopt( argc, argv, "Mga:e:x:y:z:X:Y:Z:s:" )) != EOF )  {
d116 1
a116 1
			tmp[3] = atof(optarg);
d122 1
a122 1
			tmp[7] = atof(optarg);
d128 1
a128 1
			tmp[11] = atof(optarg);
d136 3
d163 5
d219 1
d352 1
d357 1
d406 8
d426 2
a427 2
	double	p1[4];
	short	p2[4];
a431 1
	p1[3] = 1.0;
d439 1
a439 1
	MAT4X4PNT( p2, m, p1 );
d451 2
a452 2
	double	p1[4];
	short	p2[4];
a456 1
	p1[3] = 1.0;
d464 1
a464 1
	MAT4X4PNT( p2, m, p1 );
d477 2
a478 1
	double	p1[4], p2[4];
a482 1
	p1[3] = 1.0;
d490 1
a490 1
	MAT4X4PNT( p2, m, p1 );
d502 2
a503 1
	double	p1[4], p2[4];
a506 1
	p1[3] = 1.0;
d515 1
a515 1
	MAT4X4PNT( p2, m, p1 );
@


9.1
log
@Release_3.5
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: plrot.c,v 8.1 88/10/05 00:44:18 mike Rel3_0 $ (BRL)";
d24 1
@


8.1
log
@Release_3.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: plrot.c,v 1.4 88/09/17 03:36:26 mike Exp $ (BRL)";
@


1.4
log
@bzero() define in SYSV case moved to machine.h
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: plrot.c,v 1.3 88/06/21 05:48:06 mike Locked $ (BRL)";
@


1.3
log
@Changed -a to new rt convention (eye motion rather than model motion)
Somehow, -e already got this way.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: plrot.c,v 1.2 88/05/16 00:07:05 phil Locked $ (BRL)";
a25 4

#ifdef SYSV
#define bzero(p,cnt)	memset(p,'\0',cnt);
#endif
@


1.2
log
@lint fixes
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: plrot.c,v 1.1 88/02/13 03:13:01 mike Locked $ (BRL)";
d88 1
a88 1
			mat_angles( tmp, 0.0, 0.0, atof(optarg) );
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: plrot.c,v 7.1 87/11/03 00:09:15 mike Rel $ (BRL)";
d53 4
d178 1
d371 1
d402 1
d428 1
d454 1
d479 1
@
