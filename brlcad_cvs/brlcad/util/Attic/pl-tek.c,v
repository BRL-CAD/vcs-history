head	11.10;
access;
symbols
	ansi-20040405-merged:11.6.2.2
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.7
	postmerge-autoconf:11.7
	autoconf-freeze:11.6.10.2
	premerge-autoconf:11.7
	postmerge-20040315-windows:11.7
	premerge-20040315-windows:11.7
	windows-20040315-freeze:11.6.4.1
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.1
	offsite-5-3-pre:11.3
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.10
date	2004.05.21.14.58.00;	author morrison;	state dead;
branches;
next	11.9;

11.9
date	2004.05.10.15.30.51;	author erikg;	state Exp;
branches;
next	11.8;

11.8
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2004.02.02.17.39.51;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.09.05;	author jra;	state Exp;
branches
	11.6.2.1
	11.6.4.1
	11.6.10.1;
next	11.5;

11.5
date	2002.08.15.20.56.16;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.10.20.57.08;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	2000.09.01.03.24.03;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.23.19.05.03;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.13.17;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.49.12;	author mike;	state Rel4_0;
branches;
next	1.1;

1.1
date	91.07.23.02.01.07;	author mike;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.02.44;	author morrison;	state Exp;
branches;
next	11.6.2.2;

11.6.2.2
date	2004.03.17.21.23.35;	author morrison;	state Exp;
branches;
next	;

11.6.4.1
date	2004.03.11.23.52.35;	author morrison;	state Exp;
branches;
next	;

11.6.10.1
date	2004.02.12.19.43.12;	author erikg;	state Exp;
branches;
next	11.6.10.2;

11.6.10.2
date	2004.03.15.14.08.20;	author erikg;	state Exp;
branches;
next	;


desc
@Convert extended UNIX-plot to Tektronix 4014 language
@


11.10
log
@moved to src/util/
@
text
@/*
 *			P L - T E K . C
 *
 *  Convert 3-D color extended UNIX-plot file to Tektronix 4014 plot.
 *  Gets rid of (floating point, flush, 3D, color, text).
 *
 *  Authors -
 *	Michael John Muss
 *	Phillip Dykstra
 * 
 *  Based heavily on pl-pl.c
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1991-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/pl-tek.c,v 11.9 2004/05/10 15:30:51 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <unistd.h>
#include <stdlib.h>

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"

struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};

void	getstring(void);
void	getargs(struct uplot *up);
double	getieee(void);
void	doscale(void);

static void	tekmove(int xi, int yi);
static void	tekcont(register int x, register int y);
static void	tekerase(void);
static void	teklabel(register char *s);
static void	teklinemod(register char *s);
static void	tekpoint(int xi, int yi);

#define BELL	007
#define	FF	014
#define SUB	032		/* Turn on graphics cursor */
#define GS	035		/* Enter Graphics Mode (1st vec dark) */
#define ESC	033
#define US	037		/* Enter Alpha Mode */

#define	TBAD	0	/* no such command */
#define TNONE	1	/* no arguments */
#define TSHORT	2	/* Vax 16-bit short */
#define	TIEEE	3	/* IEEE 64-bit floating */
#define	TCHAR	4	/* unsigned chars */
#define	TSTRING	5	/* linefeed terminated string */

struct uplot uerror = { 0, 0, 0 };
struct uplot letters[] = {
/*A*/	{ 0, 0, 0, 0 },
/*B*/	{ 0, 0, 0, 0 },
/*C*/	{ TCHAR, 3, "color", 0 },
/*D*/	{ 0, 0, 0, 0 },
/*E*/	{ 0, 0, 0, 0 },
/*F*/	{ TNONE, 0, "flush", 0 },
/*G*/	{ 0, 0, 0, 0 },
/*H*/	{ 0, 0, 0, 0 },
/*I*/	{ 0, 0, 0, 0 },
/*J*/	{ 0, 0, 0, 0 },
/*K*/	{ 0, 0, 0, 0 },
/*L*/	{ TSHORT, 6, "3line", 1 },
/*M*/	{ TSHORT, 3, "3move", 1 },
/*N*/	{ TSHORT, 3, "3cont", 1 },
/*O*/	{ TIEEE, 3, "d_3move", 1 },
/*P*/	{ TSHORT, 3, "3point", 1 },
/*Q*/	{ TIEEE, 3, "d_3cont", 1 },
/*R*/	{ 0, 0, 0, 0 },
/*S*/	{ TSHORT, 6, "3space", 1 },
/*T*/	{ 0, 0, 0, 0 },
/*U*/	{ 0, 0, 0, 0 },
/*V*/	{ TIEEE, 6, "d_3line", 1 },
/*W*/	{ TIEEE, 6, "d_3space", 1 },
/*X*/	{ TIEEE, 3, "d_3point", 1 },
/*Y*/	{ 0, 0, 0, 0 },
/*Z*/	{ 0, 0, 0, 0 },
/*[*/	{ 0, 0, 0, 0 },
/*\*/	{ 0, 0, 0, 0 },
/*]*/	{ 0, 0, 0, 0 },
/*^*/	{ 0, 0, 0, 0 },
/*_*/	{ 0, 0, 0, 0 },
/*`*/	{ 0, 0, 0, 0 },
/*a*/	{ TSHORT, 6, "arc", 0 },
/*b*/	{ 0, 0, 0, 0 },
/*c*/	{ TSHORT, 3, "circle", 0 },
/*d*/	{ 0, 0, 0, 0 },
/*e*/	{ TNONE, 0, "erase", 0 },
/*f*/	{ TSTRING, 1, "linmod", 0 },
/*g*/	{ 0, 0, 0, 0 },
/*h*/	{ 0, 0, 0, 0 },
/*i*/	{ TIEEE, 3, "d_circle", 0 },
/*j*/	{ 0, 0, 0, 0 },
/*k*/	{ 0, 0, 0, 0 },
/*l*/	{ TSHORT, 4, "line", 0 },
/*m*/	{ TSHORT, 2, "move", 0 },
/*n*/	{ TSHORT, 2, "cont", 0 },
/*o*/	{ TIEEE, 2, "d_move", 0 },
/*p*/	{ TSHORT, 2, "point", 0 },
/*q*/	{ TIEEE, 2, "d_cont", 0 },
/*r*/	{ TIEEE, 6, "d_arc", 0 },
/*s*/	{ TSHORT, 4, "space", 0 },
/*t*/	{ TSTRING, 1, "label", 0 },
/*u*/	{ 0, 0, 0, 0 },
/*v*/	{ TIEEE, 4, "d_line", 0 },
/*w*/	{ TIEEE, 4, "d_space", 0 },
/*x*/	{ TIEEE, 2, "d_point", 0 },
/*y*/	{ 0, 0, 0, 0 },
/*z*/	{ 0, 0, 0, 0 }
};

int	verbose;
double	arg[6];			/* parsed plot command arguments */
double	sp[6];			/* space command */
double	scale;			/* rescale factor */
char	strarg[512];		/* string buffer */
int	seenscale = 0;
int	expand_it = 0;		/* expand plot to 4k, beyond what will fit on real Tek screen */

static char usage[] = "\
Usage: pl-tek [-e] [-v] < file.pl > file.tek\n";

int
main(int argc, char **argv)
{
	register int	c;
	struct	uplot *up;

	while( argc > 1 ) {
		if( strcmp(argv[1], "-v") == 0 ) {
			verbose++;
		} else if( strcmp( argv[1], "-e" ) == 0 )  {
			expand_it = 1;
		} else {
			fprintf(stderr, "pl-tek: argument '%s' ignored\n", argv[1]);
			break;
		}

		argc--;
		argv++;
	}
	/* Stdout may be a genuine Tektronix! */
	if( isatty(fileno(stdin)) ) {
		fprintf( stderr, usage );
		exit( 1 );
	}

	/* Assume default space, in case one is not provided */
	sp[0] = sp[1] = sp[2] = -32767;
	sp[3] = sp[4] = sp[5] = 32767;
	doscale();

	/* Initialize the Tektronix */
	(void)putc(ESC,stdout);
	(void)putc(';',stdout);		/* Miniature typeface */
	(void)putc(US,stdout);

	while( (c = getchar()) != EOF ) {
		/* look it up */
		if( c < 'A' || c > 'z' ) {
			up = &uerror;
		} else {
			up = &letters[ c - 'A' ];
		}

		if( up->targ == TBAD ) {
			fprintf( stderr, "Bad command '%c' (0x%02x)\n", c, c );
			continue;
		}

		if( up->narg > 0 )
			getargs( up );

		if( verbose )  {
			register int	i;
			fprintf( stderr, "%s", up->desc );
			switch( up->targ )  {
			case TCHAR:
			case TSHORT:
			case TIEEE:
				for( i=0; i < up->narg; i++ )
					fprintf( stderr, " %g", arg[i] );
				break;
			case TSTRING:
				fprintf( stderr, " '%s'", strarg );
				break;
			}
			fprintf( stderr, "\n");
		}

		/* check for space command */
		switch( c ) {
		case 's':		/* space */
		case 'w':		/* d_space */
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = 0;
			sp[3] = arg[2];
			sp[4] = arg[3];
			sp[5] = 0;
			doscale();
			seenscale++;
			continue;
		case 'S':		/* 3space */
		case 'W':		/* d_3space */
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = arg[2];
			sp[3] = arg[3];
			sp[4] = arg[4];
			sp[5] = arg[5];
			doscale();
			seenscale++;
			continue;
		}

		/* do it */
		switch( c ) {
		case 'm':	/* 2-d move */
		case 'M':	/* 3move */
		case 'o':	/* d_move */
		case 'O':	/* d_3move */
			tekmove( (int)((arg[0] - sp[0]) * scale),
				 (int)((arg[1] - sp[1]) * scale) );
			break;

		case 'n':	/* 2-d continue */
		case 'N':	/* 3cont */
		case 'q':	/* d_cont */
		case 'Q':	/* d_3cont */
			tekcont( (int)((arg[0] - sp[0]) * scale),
				 (int)((arg[1] - sp[1]) * scale) );
			break;

		case 'p':	/* 2-d point */
		case 'P':	/* 3point */
		case 'x':	/* d_point */
		case 'X':	/* d_3point */
			tekpoint( (int)((arg[0] - sp[0]) * scale),
				 (int)((arg[1] - sp[1]) * scale) );
			break;

		case 'l':	/* 2-d line */
		case 'v':	/* d_line */
			tekmove( (int)((arg[0] - sp[0]) * scale),
				 (int)((arg[1] - sp[1]) * scale) );
			tekcont( (int)((arg[2] - sp[0]) * scale),
				 (int)((arg[3] - sp[1]) * scale) );
			break;

		case 'L':	/* 3line */
		case 'V':	/* d_3line */
			tekmove( (int)((arg[0] - sp[0]) * scale),
				 (int)((arg[1] - sp[1]) * scale) );
			tekcont( (int)((arg[3] - sp[0]) * scale),
				 (int)((arg[4] - sp[1]) * scale) );
			break;

		case 'c':	/* circle */
		case 'i':	/* d_circle */
			fprintf(stderr,"pl-tek: circle unimplemented\n");
			break;

		case 'a':	/* arc */
		case 'r':	/* d_arc */
			fprintf(stderr,"pl-tek: arc unimplemented\n");
			break;

		case 'f':	/* linmod */
			teklinemod( strarg );
			break;

		case 'e':	/* erase */
			tekerase();
			break;

		case 't': 	/* text label */
			teklabel( strarg );
			break;

		case 'C':	/* set color */
			break;

		case 'F':	/* flush buffer */
			break;

		default:
			fprintf(stderr, "pl-tek: unknown command byte x%x\n", c );
		}
	}

	if( !seenscale ) {
		fprintf( stderr, "pl-tek: WARNING no space command in file, defaulting to +/-32k\n" );
	}

	return(0);
}

/*** Input args ***/

int
getshort(void)
{
	register long	v, w;

	v = getchar();
	v |= (getchar()<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}

void
getargs(struct uplot *up)
{
	int	i;

	for( i = 0; i < up->narg; i++ ) {
		switch( up->targ ) {
			case TSHORT:
				arg[i] = getshort();
				break;
			case TIEEE:
				arg[i] = getieee();
				break;
			case TSTRING:
				getstring();
				break;
			case TCHAR:
				arg[i] = getchar();
				break;
			case TNONE:
			default:
				arg[i] = 0;	/* ? */
				break;
		}
	}
}

void
getstring(void)
{
	int	c;
	char	*cp;

	cp = strarg;
	while( (c = getchar()) != '\n' && c != EOF )
		*cp++ = c;
	*cp = 0;
}


double
getieee(void)
{
	unsigned char	in[8];
	double	d;

	fread( in, 8, 1, stdin );
	ntohd( (unsigned char *)&d, in, 1 );
	return	d;
}

/*
 * Establish display coordinate conversion:
 *  Input ranges from min=(sp[0], sp[1]) to max=(sp[3], sp[4]).
 *  Tektronix is using 0..4096, but not all is visible.
 *  So, use a little less.
 *  To convert, subtract the min val, and multiply by 'scale'.
 *  Out of range detection is converters problem.
 */
void
doscale(void)
{
	double	dx, dy, dz;
	double	max;

	dx = (sp[3] - sp[0]);
	dy = (sp[4] - sp[1]);
	dz = (sp[5] - sp[2]);

	max = dx;
	if( dy > max ) max = dy;
	if( dz > max ) max = dz;

	if( expand_it )
		scale = 4096 / max;
	else
		scale = (4096-1000) / max;
	if( verbose )  {
		fprintf( stderr, "doscale: min=(%g, %g), max=(%g, %g), scale=%g\n",
			sp[0], sp[1],
			sp[3], sp[4],
			scale );
	}
}

/*
 * Perform the interface functions
 * for the Tektronix 4014-1 with Extended Graphics Option.
 * The Extended Graphics Option makes available a field of
 * 10 inches vertical, and 14 inches horizontal, with a resolution
 * of 287 points per inch.
 *
 * The Tektronix is Quadrant I, 4096x4096 (not all visible).
 */
static int oloy = -1;
static int ohiy = -1;
static int ohix = -1;
static int oextra = -1;

/* Continue motion from last position */
static void
tekcont(register int x, register int y)
{
	int hix,hiy,lox,loy,extra;
	int n;

	if( verbose ) fprintf(stderr," tekcont(%d,%d)\n", x, y );
	hix=(x>>7) & 037;
	hiy=(y>>7) & 037;
	lox = (x>>2)&037;
	loy=(y>>2)&037;
	extra = (x & 03) + ((y<<2) & 014);
	n = (abs(hix-ohix) + abs(hiy-ohiy) + 6) / 12;
	if(hiy != ohiy){
		(void)putc(hiy|040,stdout);
		ohiy=hiy;
	}
	if(hix != ohix) {
		if(extra != oextra) {
			(void)putc(extra|0140,stdout);
			oextra=extra;
		}
		(void)putc(loy|0140,stdout);
		(void)putc(hix|040,stdout);
		ohix=hix;
		oloy=loy;
	} else {
		if(extra != oextra) {
			(void)putc(extra|0140,stdout);
			(void)putc(loy|0140,stdout);
			oextra=extra;
			oloy=loy;
		} else if(loy != oloy) {
			(void)putc(loy|0140,stdout);
			oloy=loy;
		}
	}
	(void)putc(lox|0100,stdout);
	while(n--)
		(void)putc(0,stdout);
}

static void
tekmove(int xi, int yi)
{
	(void)putc(GS,stdout);			/* Next vector blank */
	tekcont(xi,yi);
}

static void
tekerase(void)
{
	extern unsigned sleep(unsigned int);	/* DAG -- was missing */

	(void)putc(ESC,stdout);
	(void)putc(FF,stdout);
	ohix = ohiy = oloy = oextra = -1;
	(void)fflush(stdout);

	(void)sleep(3);
}

static void
teklabel(register char *s)
{
	(void)putc(US,stdout);
	for( ; *s; s++ )
		(void)putc(*s,stdout);
	ohix = ohiy = oloy = oextra = -1;
}

static void
teklinemod(register char *s)
{
	register int c;				/* DAG -- was char */

	(void)putc(ESC,stdout);
	switch(s[0]){
	case 'l':	
		c = 'd';
		break;
	case 'd':	
		if(s[3] != 'd')c='a';
		else c='b';
		break;
	case 's':
		if(s[5] != '\0')c='c';
		else c='`';
		break;
	default:			/* DAG -- added support for colors */
		c = '`';
		break;
	}
	(void)putc(c,stdout);
}

static void
tekpoint(int xi, int yi) {
	tekmove(xi,yi);
	tekcont(xi,yi);
}
@


11.9
log
@change conf.h to a wrapped config.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pl-tek.c,v 11.8 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.8
log
@merge of ansi-6-0-branch into head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d26 5
a30 1
#include "conf.h"
d41 5
a45 1
#include "conf.h"
@


11.7
log
@update copyright to include span through 2003
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-tek.c,v 11.6 2002/08/20 17:09:05 jra Exp $ (BRL)";
d43 6
a48 4
void	getstring();
void	getargs();
double	getieee();
void	doscale();
d50 11
a60 2
static void	tekmove(), tekcont(), tekerase();
static void	teklabel(), teklinemod(), tekpoint();
a75 6
struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};
d150 1
a150 3
main( argc, argv )
int	argc;
char	**argv;
d328 1
a328 1
getshort()
d343 1
a343 2
getargs( up )
struct uplot *up;
d370 1
a370 1
getstring()
d383 1
a383 1
getieee()
d402 1
a402 1
doscale()
d443 1
a443 2
tekcont(x,y)
register int x,y;
d485 1
a485 1
tekmove(xi,yi)
d492 1
a492 1
tekerase()
d494 1
a494 1
	extern unsigned sleep();	/* DAG -- was missing */
d505 1
a505 2
teklabel(s)
register char *s;
d514 1
a514 2
teklinemod(s)
register char *s;
d539 1
a539 1
tekpoint(xi,yi){
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1991 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-tek.c,v 11.4 2001/08/10 20:57:08 butler Exp $ (BRL)";
@


11.6.4.1
log
@sync to HEAD...
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/pl-tek.c,v 11.7 2004/02/02 17:39:51 morrison Exp $ (BRL)";
@


11.6.10.1
log
@merge from HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-tek.c,v 11.7 2004/02/02 17:39:51 morrison Exp $ (BRL)";
@


11.6.10.2
log
@merge from head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-tek.c,v 11.6.10.1 2004/02/12 19:43:12 erikg Exp $ (BRL)";
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-tek.c,v 11.6 2002/08/20 17:09:05 jra Exp $ (BRL)";
d43 4
a46 11
struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};

void	getstring(void);
void	getargs(struct uplot *up);
double	getieee(void);
void	doscale(void);
d48 2
a49 2
static void	tekmove(int xi, int yi), tekcont(register int x, register int y), tekerase(void);
static void	teklabel(register char *s), teklinemod(register char *s), tekpoint(int xi, int yi);
d65 6
d145 3
a147 1
main(int argc, char **argv)
d325 1
a325 1
getshort(void)
d340 2
a341 1
getargs(struct uplot *up)
d368 1
a368 1
getstring(void)
d381 1
a381 1
getieee(void)
d400 1
a400 1
doscale(void)
d441 2
a442 1
tekcont(register int x, register int y)
d484 1
a484 1
tekmove(int xi, int yi)
d491 1
a491 1
tekerase(void)
d493 1
a493 1
	extern unsigned sleep(unsigned int);	/* DAG -- was missing */
d504 2
a505 1
teklabel(register char *s)
d514 2
a515 1
teklinemod(register char *s)
d540 1
a540 1
tekpoint(int xi, int yi) {
@


11.6.2.2
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1991-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d43 4
a46 11
struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};

void	getstring(void);
void	getargs(struct uplot *up);
double	getieee(void);
void	doscale(void);
d48 2
a49 2
static void	tekmove(int xi, int yi), tekcont(register int x, register int y), tekerase(void);
static void	teklabel(register char *s), teklinemod(register char *s), tekpoint(int xi, int yi);
d65 6
d145 3
a147 1
main(int argc, char **argv)
d325 1
a325 1
getshort(void)
d340 2
a341 1
getargs(struct uplot *up)
d368 1
a368 1
getstring(void)
d381 1
a381 1
getieee(void)
d400 1
a400 1
doscale(void)
d441 2
a442 1
tekcont(register int x, register int y)
d484 1
a484 1
tekmove(int xi, int yi)
d491 1
a491 1
tekerase(void)
d493 1
a493 1
	extern unsigned sleep(unsigned int);	/* DAG -- was missing */
d504 2
a505 1
teklabel(register char *s)
d514 2
a515 1
teklinemod(register char *s)
d540 1
a540 1
tekpoint(int xi, int yi) {
@


11.4
log
@Misc compiler warnings eliminated
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-tek.c,v 11.3 2000/09/01 03:24:03 mike Exp $ (BRL)";
d43 11
a53 4
void	getstring();
void	getargs();
double	getieee();
void	doscale();
d55 2
a56 2
static void	tekmove(), tekcont(), tekerase();
static void	teklabel(), teklinemod(), tekpoint();
a71 6
struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
	int	t3d;	/* non-zero if 3D */
};
d146 1
a146 3
main( argc, argv )
int	argc;
char	**argv;
d324 1
a324 1
getshort()
d339 1
a339 2
getargs( up )
struct uplot *up;
d366 1
a366 1
getstring()
d379 1
a379 1
getieee()
d398 1
a398 1
doscale()
d439 1
a439 2
tekcont(x,y)
register int x,y;
d481 1
a481 1
tekmove(xi,yi)
d488 1
a488 1
tekerase()
d490 1
a490 1
	extern unsigned sleep();	/* DAG -- was missing */
d501 1
a501 2
teklabel(s)
register char *s;
d510 1
a510 2
teklinemod(s)
register char *s;
d535 1
a535 1
tekpoint(xi,yi){
@


11.3
log
@
Lint fix
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-tek.c,v 11.2 2000/08/23 19:05:03 mike Exp $ (BRL)";
d26 2
d29 13
d324 15
a378 13
getshort()
{
	register long	v, w;

	v = getchar();
	v |= (getchar()<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}
d383 1
a383 1
	char	in[8];
d387 1
a387 1
	ntohd( &d, in, 1 );
d452 1
a452 1
	extra=x&03+(y<<2)&014;
@


11.2
log
@
const RCSid
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pl-tek.c,v 11.1 1995/01/04 10:13:17 mike Rel4_4 $ (BRL)";
d129 1
@


11.1
log
@Release_4.4
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-tek.c,v 10.1 91/10/12 06:49:12 mike Rel4_0 $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-tek.c,v 1.1 91/07/23 02:01:07 mike Exp $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pl-tek.c,v 9.3 91/07/22 23:25:35 mike Exp $ (BRL)";
@
