head	11.18;
access;
symbols
	ansi-20040405-merged:11.16.2.1
	postmerge-20040405-ansi:11.17
	premerge-20040404-ansi:11.16
	postmerge-autoconf:11.16
	autoconf-freeze:11.16
	premerge-autoconf:11.16
	postmerge-20040315-windows:11.16
	premerge-20040315-windows:11.16
	windows-20040315-freeze:11.16
	autoconf-20031203:11.16
	autoconf-20031202:11.16
	autoconf-branch:11.16.0.10
	phong-branch:11.16.0.8
	photonmap-branch:11.16.0.6
	rel-6-1-DP:11.16
	windows-branch:11.16.0.4
	rel-6-0-2:11.13.2.1
	ansi-branch:11.16.0.2
	rel-6-0-1-branch:11.13.0.2
	hartley-6-0-post:11.14
	hartley-6-0-pre:11.13
	rel-6-0-1:11.13
	rel-6-0:11.13
	offsite-5-3-pre:11.7;
locks; strict;
comment	@ * @;


11.18
date	2004.05.21.14.58.05;	author morrison;	state dead;
branches;
next	11.17;

11.17
date	2004.04.05.05.46.03;	author morrison;	state Exp;
branches;
next	11.16;

11.16
date	2002.09.09.18.14.24;	author jra;	state Exp;
branches
	11.16.2.1;
next	11.15;

11.15
date	2002.08.20.17.09.07;	author jra;	state Exp;
branches;
next	11.14;

11.14
date	2002.08.15.20.56.18;	author hartley;	state Exp;
branches;
next	11.13;

11.13
date	2001.10.24.00.49.03;	author morrison;	state Exp;
branches
	11.13.2.1;
next	11.12;

11.12
date	2001.10.17.07.40.07;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2001.04.27.21.17.09;	author morrison;	state Exp;
branches;
next	11.10;

11.10
date	2001.04.27.21.16.25;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2001.04.27.20.16.46;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2001.03.28.18.44.17;	author butler;	state Exp;
branches;
next	11.7;

11.7
date	2000.10.19.20.32.53;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	2000.08.15.02.37.03;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	2000.08.15.02.33.35;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.07.26.15.26.47;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.06.30.15.02.30;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.06.27.15.53.18;	author butler;	state Exp;
branches;
next	11.1;

11.1
date	2000.06.27.13.36.50;	author butler;	state Exp;
branches;
next	;

11.13.2.1
date	2002.09.14.23.58.06;	author jra;	state Exp;
branches;
next	;

11.16.2.1
date	2002.09.19.18.02.46;	author morrison;	state Exp;
branches;
next	;


desc
@@


11.18
log
@moved to src/util/
@
text
@/*
 *	T T C P . C
 *
 * Test TCP connection.  Makes a connection on port 2000
 * and transfers zero buffers or data copied from stdin.
 *
 * Usable on 4.2, 4.3, and 4.1a systems by defining one of
 * BSD42 BSD43 (BSD41a)
 *
 * Modified for operation under 4.2BSD, 18 Dec 84
 *      T.C. Slattery, USNA
 * Minor improvements, Mike Muuss and Terry Slattery, 16-Oct-85.
 *
 * Mike Muuss and Terry Slattery have released this code to the Public Domain.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/ttcp.c,v 11.17 2004/04/05 05:46:03 morrison Exp $ (BRL)";
#endif

#define BSD43
/* #define BSD42 */
/* #define BSD41a */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/time.h>		/* struct timeval */

#ifdef BSD
#  define __BSDbackup BSD
#  undef BSD
#endif
#include <netdb.h>
#ifdef __BSDbackup
#  define BSD __BSDbackup
#  undef __BSDbackup
#endif

#ifdef SYSV
#include <sys/times.h>
#include <sys/param.h>
#else
#include <sys/resource.h>
#endif

#if IRIX == 5
/* we need a struct timeval */
struct timeval {
        long    tv_sec;         /* seconds */
        long    tv_usec;        /* and microseconds */
};
#endif

struct sockaddr_in sinme;
struct sockaddr_in sinhim;
struct sockaddr_in sindum;
struct sockaddr_in frominet;

int domain, fromlen;
int fd;				/* fd of network socket */

int buflen = 1024;		/* length of buffer */
char *buf;			/* ptr to dynamic buffer */
int nbuf = 1024;		/* number of buffers to send in sinkmode */

int udp = 0;			/* 0 = tcp, !0 = udp */
int options = 0;		/* socket options */
int one = 1;                    /* for 4.3 BSD style setsockopt() */
short port = 2000;		/* TCP port number */
char *host;			/* ptr to name of host */
int trans;			/* 0=receive, !0=transmit mode */
int sinkmode;			/* 0=normal I/O, !0=sink/source mode */

struct hostent *addr;
extern int errno;

char Usage[] = "\
Usage: ttcp -t [-options] host <in\n\
	-l##	length of bufs written to network (default 1024)\n\
	-s	source a pattern to network\n\
	-n##	number of bufs written to network (-s only, default 1024)\n\
	-p##	port number to send to (default 2000)\n\
	-u	use UDP instead of TCP\n\
Usage: ttcp -r [-options] >out\n\
	-l##	length of network read buf (default 1024)\n\
	-s	sink (discard) all data from network\n\
	-p##	port number to listen at (default 2000)\n\
	-B	Only output full blocks, as specified in -l## (for TAR)\n\
	-u	use UDP instead of TCP\n\
";	

char stats[128];
double t;			/* transmission time */
long nbytes;			/* bytes on net */
int b_flag = 0;			/* use mread() */

double cput, realt;		/* user, real time (seconds) */

/*
 *			M R E A D
 *
 * This function performs the function of a read(II) but will
 * call read(II) multiple times in order to get the requested
 * number of characters.  This can be necessary because
 * network connections don't deliver data with the same
 * grouping as it is written with.  Written by Robert S. Miles, BRL.
 */
int
mread(int		fd,
      register char	*bufp,
      unsigned		n)
{
	register unsigned	count = 0;
	register int		nread;

	do {
		nread = read(fd, bufp, n-count);
		if(nread < 0)  {
			perror("ttcp_mread");
			return(-1);
		}
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);

	return((int)count);
}

static void
err(char *s)
{
	fprintf(stderr,"ttcp%s: ", trans?"-t":"-r");
	perror(s);
	fprintf(stderr,"errno=%d\n",errno);
	exit(1);
}

void
mes(char *s)
{
	fprintf(stderr,"ttcp%s: %s\n", trans?"-t":"-r", s);
}

void
pattern(register char *cp, register int cnt)
{
	register char c;
	c = 0;
	while( cnt-- > 0 )  {
		while( !isprint((c&0x7F)) )  c++;
		*cp++ = (c++&0x7F);
	}
}

/******* timing *********/

#ifdef SYSV
/* was long instead of time_t */
extern time_t time(time_t *);
static time_t time0;
static struct tms tms0;
#else
static struct	timeval time0;	/* Time at which timeing started */
static struct	rusage ru0;	/* Resource utilization at the start */

static void prusage(register struct rusage *r0, register struct rusage *r1, struct timeval *e, struct timeval *b, char *outp);
static void tvadd(struct timeval *tsum, struct timeval *t0, struct timeval *t1);
static void tvsub(struct timeval *tdiff, struct timeval *t1, struct timeval *t0);
static void psecs(long int l, register char *cp);
#endif

/*
 *			P R E P _ T I M E R
 */
void
prep_timer(void)
{
#ifdef SYSV
	(void)time(&time0);
	(void)times(&tms0);
#else
	gettimeofday(&time0, (struct timezone *)0);
	getrusage(RUSAGE_SELF, &ru0);
#endif
}

/*
 *			R E A D _ T I M E R
 * 
 */
double
read_timer(char *str, int len)
{
#ifdef SYSV
	time_t now;
	struct tms tmsnow;
	char line[132];

	(void)time(&now);
	realt = now-time0;
	(void)times(&tmsnow);
	cput = tmsnow.tms_utime - tms0.tms_utime;
	cput /= HZ;
	if( cput < 0.00001 )  cput = 0.01;
	if( realt < 0.00001 )  realt = cput;
	sprintf(line,"%g CPU secs in %g elapsed secs (%g%%)",
		cput, realt,
		cput/realt*100 );
	(void)strncpy( str, line, len );
	return( cput );
#else
	/* BSD */
	struct timeval timedol;
	struct rusage ru1;
	struct timeval td;
	struct timeval tend, tstart;
	char line[132];

	getrusage(RUSAGE_SELF, &ru1);
	gettimeofday(&timedol, (struct timezone *)0);
	prusage(&ru0, &ru1, &timedol, &time0, line);
	(void)strncpy( str, line, len );

	/* Get real time */
	tvsub( &td, &timedol, &time0 );
	realt = td.tv_sec + ((double)td.tv_usec) / 1000000;

	/* Get CPU time (user+sys) */
	tvadd( &tend, &ru1.ru_utime, &ru1.ru_stime );
	tvadd( &tstart, &ru0.ru_utime, &ru0.ru_stime );
	tvsub( &td, &tend, &tstart );
	cput = td.tv_sec + ((double)td.tv_usec) / 1000000;
	if( cput < 0.00001 )  cput = 0.00001;
	return( cput );
#endif
}

#ifndef SYSV
static void
prusage(register struct rusage *r0, 
	register struct rusage *r1,
	struct timeval *e,
	struct timeval *b,
	char *outp)
{
	struct timeval tdiff;
	register time_t t;
	register char *cp;
	register int i;
	int ms;

	t = (r1->ru_utime.tv_sec-r0->ru_utime.tv_sec)*100+
	    (r1->ru_utime.tv_usec-r0->ru_utime.tv_usec)/10000+
	    (r1->ru_stime.tv_sec-r0->ru_stime.tv_sec)*100+
	    (r1->ru_stime.tv_usec-r0->ru_stime.tv_usec)/10000;
	ms =  (e->tv_sec-b->tv_sec)*100 + (e->tv_usec-b->tv_usec)/10000;

#define END(x)	{while(*x) x++;}
	cp = "%Uuser %Ssys %Ereal %P %Xi+%Dd %Mmaxrss %F+%Rpf %Ccsw";
	for (; *cp; cp++)  {
		if (*cp != '%')
			*outp++ = *cp;
		else if (cp[1]) switch(*++cp) {

		case 'U':
			tvsub(&tdiff, &r1->ru_utime, &r0->ru_utime);
			sprintf(outp,"%ld.%01ld", (long int)tdiff.tv_sec,
				(long int)tdiff.tv_usec/100000L);
			END(outp);
			break;

		case 'S':
			tvsub(&tdiff, &r1->ru_stime, &r0->ru_stime);
			sprintf(outp,"%ld.%01ld", (long int)tdiff.tv_sec, (long int)tdiff.tv_usec/100000L);
			END(outp);
			break;

		case 'E':
			psecs(ms / 100, outp);
			END(outp);
			break;

		case 'P':
			sprintf(outp,"%d%%", (int) (t*100 / ((ms ? ms : 1))));
			END(outp);
			break;

		case 'W':
			i = r1->ru_nswap - r0->ru_nswap;
			sprintf(outp,"%d", i);
			END(outp);
			break;

		case 'X':
			sprintf(outp,"%ld", t == 0 ? 0 : (r1->ru_ixrss-r0->ru_ixrss)/t);
			END(outp);
			break;

		case 'D':
			sprintf(outp,"%ld", t == 0 ? 0 :
			    (r1->ru_idrss+r1->ru_isrss-(r0->ru_idrss+r0->ru_isrss))/t);
			END(outp);
			break;

		case 'K':
			sprintf(outp,"%ld", t == 0 ? 0 :
			    ((r1->ru_ixrss+r1->ru_isrss+r1->ru_idrss) -
			    (r0->ru_ixrss+r0->ru_idrss+r0->ru_isrss))/t);
			END(outp);
			break;

		case 'M':
			sprintf(outp,"%ld", r1->ru_maxrss/2);
			END(outp);
			break;

		case 'F':
			sprintf(outp,"%ld", r1->ru_majflt-r0->ru_majflt);
			END(outp);
			break;

		case 'R':
			sprintf(outp,"%ld", r1->ru_minflt-r0->ru_minflt);
			END(outp);
			break;

		case 'I':
			sprintf(outp,"%ld", r1->ru_inblock-r0->ru_inblock);
			END(outp);
			break;

		case 'O':
			sprintf(outp,"%ld", r1->ru_oublock-r0->ru_oublock);
			END(outp);
			break;
		case 'C':
			sprintf(outp,"%ld+%ld", r1->ru_nvcsw-r0->ru_nvcsw,
				r1->ru_nivcsw-r0->ru_nivcsw );
			END(outp);
			break;
		}
	}
	*outp = '\0';
}

static void
tvadd( struct timeval *tsum, struct timeval *t0, struct timeval *t1)
{

	tsum->tv_sec = t0->tv_sec + t1->tv_sec;
	tsum->tv_usec = t0->tv_usec + t1->tv_usec;
	if (tsum->tv_usec > 1000000)
		tsum->tv_sec++, tsum->tv_usec -= 1000000;
}

static void
tvsub(struct timeval *tdiff, struct timeval *t1, struct timeval *t0)
{

	tdiff->tv_sec = t1->tv_sec - t0->tv_sec;
	tdiff->tv_usec = t1->tv_usec - t0->tv_usec;
	if (tdiff->tv_usec < 0)
		tdiff->tv_sec--, tdiff->tv_usec += 1000000;
}

static void
psecs(long l, register char *cp)
{
	register int i;

	i = l / 3600;
	if (i) {
		sprintf(cp,"%d:", i);
		END(cp);
		i = l % 3600;
		sprintf(cp,"%d%d", (i/60) / 10, (i/60) % 10);
		END(cp);
	} else {
		i = l;
		sprintf(cp,"%d", i / 60);
		END(cp);
	}
	i %= 60;
	*cp++ = ':';
	sprintf(cp,"%d%d", i / 10, i % 10);
}
#endif

/*
 *			N R E A D
 */
int
Nread(int fd, char *buf, int count )
{
	struct sockaddr_in from;
	int len = sizeof(from);
	register int cnt;

	if( udp )  {
		cnt = recvfrom( fd,
				(void *)buf,
				(size_t)count,
				0, 
				(struct sockaddr *)&from,
				&len );
	} else {
		if( b_flag )
			cnt = mread( fd, buf, count );	/* fill buf */
		else
			cnt = read( fd, buf, count );
	}
	return(cnt);
}

int
delay(int us)
{
	struct timeval tv;

	tv.tv_sec = 0;
	tv.tv_usec = us;
	(void)select( 1, (fd_set *)0, (fd_set *)0, (fd_set *)0, &tv );
	return(1);
}



/*
 *			N W R I T E
 */
int
Nwrite(int fd, char *buf, int count )
{
	register int cnt;
	if( udp )  {
again:
		cnt = sendto( fd, (const void *)buf, (size_t) count, 0, 
			      (const struct sockaddr *)&sinhim, 
			      sizeof(sinhim) );
		if( cnt<0 && errno == ENOBUFS )  {
			delay(18000);
			errno = 0;
			goto again;
		}
	} else {
		cnt = write( fd, buf, count );
	}
	return(cnt);
}



int
main(int argc, char **argv)
{
	unsigned long addr_tmp;

	if (argc < 2) goto usage;

	argv++; argc--;
	while( argc>0 && argv[0][0] == '-' )  {
		switch (argv[0][1]) {

		case 'B':
			b_flag = 1;
			break;
		case 't':
			trans = 1;
			break;
		case 'r':
			trans = 0;
			break;
		case 'd':
			options |= SO_DEBUG;
			break;
		case 'n':
			nbuf = atoi(&argv[0][2]);
			break;
		case 'l':
			buflen = atoi(&argv[0][2]);
			break;
		case 's':
			sinkmode = 1;	/* source or sink, really */
			break;
		case 'p':
			port = atoi(&argv[0][2]);
			break;
		case 'u':
			udp = 1;
			break;
		default:
			goto usage;
		}
		argv++; argc--;
	}
	if(trans)  {
		/* xmitr */
		if (argc != 1) goto usage;
		bzero((char *)&sinhim, sizeof(sinhim));
		host = argv[0];
		if (atoi(host) > 0 )  {
			/* Numeric */
			sinhim.sin_family = AF_INET;
#ifdef cray
			addr_tmp = inet_addr(host);
			sinhim.sin_addr = addr_tmp;
#else
			sinhim.sin_addr.s_addr = inet_addr(host);
#endif
		} else {
			if ((addr=(struct hostent *)gethostbyname(host)) == NULL)
				err("bad hostname");
			sinhim.sin_family = addr->h_addrtype;
			bcopy(addr->h_addr,(char*)&addr_tmp, addr->h_length);
#ifdef cray
			sinhim.sin_addr = addr_tmp;
#else
			sinhim.sin_addr.s_addr = addr_tmp;
#endif /* cray */
		}
		sinhim.sin_port = htons(port);
		sinme.sin_port = 0;		/* free choice */
	} else {
		/* rcvr */
		sinme.sin_port =  htons(port);
	}

	if( (buf = (char *)malloc(buflen)) == (char *)NULL)
		err("malloc");
	fprintf(stderr,"ttcp%s: nbuf=%d, buflen=%d, port=%d\n",
		trans?"-t":"-r",
		nbuf, buflen, port);

	if ((fd = socket(AF_INET, udp?SOCK_DGRAM:SOCK_STREAM, 0)) < 0)
		err("socket");
	mes("socket");

	if (bind(fd, (const struct sockaddr *)&sinme, sizeof(sinme)) < 0)
		err("bind");

	if (!udp)  {
	    if (trans) {
		/* We are the client if transmitting */
		if(options)  {
#ifdef BSD42
			if( setsockopt(fd, SOL_SOCKET, options, 0, 0) < 0)
#else /* BSD43 */
			if( setsockopt(fd, SOL_SOCKET, options, &one, sizeof(one)) < 0)
#endif
				err("setsockopt");
		}
		if(connect(fd, (const struct sockaddr *)&sinhim, sizeof(sinhim) ) < 0)
			err("connect");
		mes("connect");
	    } else {
		/* otherwise, we are the server and 
	         * should listen for the connections
	         */
		listen(fd,0);   /* allow a queue of 0 */
		if(options)  {
#ifdef BSD42
			if( setsockopt(fd, SOL_SOCKET, options, 0, 0) < 0)
#else /* BSD43 */
			if( setsockopt(fd, SOL_SOCKET, options, &one, sizeof(one)) < 0)
#endif
				err("setsockopt");
		}
		fromlen = sizeof(frominet);
		domain = AF_INET;
		if((fd=accept(fd, (struct sockaddr *)&frominet, &fromlen) ) < 0)
			err("accept");
		mes("accept");
	    }
	}
	prep_timer();
	errno = 0;
	if (sinkmode) {      
		register int cnt;
		if (trans)  {
			pattern( buf, buflen );
			if(udp)  (void)Nwrite( fd, buf, 4 ); /* rcvr start */
			while (nbuf-- && Nwrite(fd,buf,buflen) == buflen)
				nbytes += buflen;
			if(udp)  (void)Nwrite( fd, buf, 4 ); /* rcvr end */
		} else {
			while ((cnt=Nread(fd,buf,buflen)) > 0)  {
				static int going = 0;
				if( cnt <= 4 )  {
					if( going )
						break;	/* "EOF" */
					going = 1;
					prep_timer();
				} else
					nbytes += cnt;
			}
		}
	} else {
		register int cnt;
		if (trans)  {
			while((cnt=read(0,buf,buflen)) > 0 &&
			    Nwrite(fd,buf,cnt) == cnt)
				nbytes += cnt;
		}  else  {
			while((cnt=Nread(fd,buf,buflen)) > 0 &&
			    write(1,buf,cnt) == cnt)
				nbytes += cnt;
		}
	}
	if(errno) err("IO");
	(void)read_timer(stats,sizeof(stats));
	if(udp&&trans)  {
		(void)Nwrite( fd, buf, 4 ); /* rcvr end */
		(void)Nwrite( fd, buf, 4 ); /* rcvr end */
		(void)Nwrite( fd, buf, 4 ); /* rcvr end */
		(void)Nwrite( fd, buf, 4 ); /* rcvr end */
	}
	fprintf(stderr,"ttcp%s: %s\n", trans?"-t":"-r", stats);
	if( cput <= 0.0 )  cput = 0.001;
	if( realt <= 0.0 )  realt = 0.001;
	fprintf(stderr,"ttcp%s: %ld bytes processed\n",
		trans?"-t":"-r", nbytes );
	fprintf(stderr,"ttcp%s: %9g CPU sec  = %9g KB/cpu sec,  %9g Kbits/cpu sec\n",
		trans?"-t":"-r",
		cput,
		((double)nbytes)/cput/1024,
		((double)nbytes)*8/cput/1024 );
	fprintf(stderr,"ttcp%s: %9g real sec = %9g KB/real sec, %9g Kbits/sec\n",
		trans?"-t":"-r",
		realt,
		((double)nbytes)/realt/1024,
		((double)nbytes)*8/realt/1024 );
	exit(0);

usage:
	fprintf(stderr,Usage);
	exit(1);
}
@


11.17
log
@merge of ansi-6-0-branch into head
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.16
log
@IRIX 5 needs a struct timeval
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.15 2002/08/20 17:09:07 jra Exp $ (BRL)";
d175 4
a178 4
static void prusage();
static void tvadd();
static void tvsub();
static void psecs();
d185 1
a185 1
prep_timer()
@


11.16.2.1
log
@Initial ANSIfication
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.16 2002/09/09 18:14:24 jra Exp $ (BRL)";
d175 4
a178 4
static void prusage(register struct rusage *r0, register struct rusage *r1, struct timeval *e, struct timeval *b, char *outp);
static void tvadd(struct timeval *tsum, struct timeval *t0, struct timeval *t1);
static void tvsub(struct timeval *tdiff, struct timeval *t1, struct timeval *t0);
static void psecs(long int l, register char *cp);
d185 1
a185 1
prep_timer(void)
@


11.15
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.13 2001/10/24 00:49:03 morrison Exp $ (BRL)";
d51 8
@


11.14
log
@Converted from K&R to ANSI C - RFH
@
text
@d167 4
a170 4
static void prusage(register struct rusage *r0, register struct rusage *r1, struct timeval *e, struct timeval *b, char *outp);
static void tvadd(struct timeval *tsum, struct timeval *t0, struct timeval *t1);
static void tvsub(struct timeval *tdiff, struct timeval *t1, struct timeval *t0);
static void psecs(long int l, register char *cp);
d177 1
a177 1
prep_timer(void)
@


11.13
log
@#include mishap fixed
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.12 2001/10/17 07:40:07 morrison Exp $ (BRL)";
d167 4
a170 4
static void prusage();
static void tvadd();
static void tvsub();
static void psecs();
d177 1
a177 1
prep_timer()
@


11.13.2.1
log
@IRIX5 needed a struct timeval definition
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.13 2001/10/24 00:49:03 morrison Exp $ (BRL)";
a50 8
#endif

#if IRIX == 5
/* need a timeval struct */
struct timeval {
        long    tv_sec;         /* seconds */
        long    tv_usec;        /* and microseconds */
};
@


11.12
log
@Mac OS X warning and error fixes for non-production build
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.11 2001/04/27 21:17:09 morrison Exp $ (BRL)";
d39 3
a41 2
#  include <netdb.h>
#  undef BSD
d43 1
d512 1
a512 1
			if ((addr=gethostbyname(host)) == NULL)
@


11.11
log
@comment
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.9 2001/04/27 20:16:46 morrison Exp $ (BRL)";
a33 1
#include <netdb.h>
d36 8
d128 1
a128 1
void
d266 2
a267 2
			sprintf(outp,"%ld.%01ld", tdiff.tv_sec,
				tdiff.tv_usec/100000);
d273 1
a273 1
			sprintf(outp,"%ld.%01ld", tdiff.tv_sec, tdiff.tv_usec/100000);
@


11.10
log
@removed typedef, assuming time_t is defined properly
@
text
@d150 1
@


11.9
log
@changed time() to return time_t value instead of long
and typedef'd time_t to be long if undefined (when using system time())
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.8 2001/03/28 18:44:17 butler Exp $ (BRL)";
a148 4
#ifndef _TIME_H
typedef long	time_t;
#endif

d150 1
a150 1
extern time_t time();
@


11.8
log
@Converted from pcc style C to ANSI C
Removed compiler warnings on FreeBSD and Irix
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: ttcp.c,v 1.11 90/11/04 04:05:51 reschly Exp $ (BRL)";
d149 4
d154 2
a155 2
extern long time();
static long time0;
d190 1
a190 1
	long now;
@


11.7
log
@
Fixed so that it works on IRIX64 machines.
@
text
@d13 2
a14 1
 * Minor syntax and parameter fixes, Lee A. Butler 14-Dec-99.
d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.6 2000/08/15 02:37:03 mike Exp $ (BRL)";
d20 1
a20 4
#if __STDC__
#	define BSD43
#	undef SYSV
#endif
d26 2
a28 1
#include <ctype.h>
a35 1
#include <strings.h>
a86 2
void prep_timer();
double read_timer();
d88 32
a119 1
int delay(int us);
d122 1
a122 2
err(s)
char *s;
d131 1
a131 2
mes(s)
char *s;
d135 1
d137 1
a137 3
pattern( cp, cnt )
register char *cp;
register int cnt;
a146 5





d183 1
a183 3
read_timer(str,len)
char *str;
unsigned long len;
d231 5
a235 4
prusage(r0, r1, e, b, outp)
	register struct rusage *r0, *r1;
	struct timeval *e, *b;
	char *outp;
d258 2
a259 3
			sprintf(outp,"%ld.%01ld",
				(long)tdiff.tv_sec,
				(long)(tdiff.tv_usec/100000));
d265 1
a265 3
			sprintf(outp,"%ld.%01ld",
				(long)tdiff.tv_sec,
				(long)(tdiff.tv_usec/100000));
d286 1
a286 2
			sprintf(outp,"%ld", (t == 0) ? 0L :
				(long)((r1->ru_ixrss-r0->ru_ixrss)/t));
d291 2
a292 3
			sprintf(outp,"%ld", (t == 0) ? 0L :
			    (long)((r1->ru_idrss+r1->ru_isrss -
			    (r0->ru_idrss+r0->ru_isrss))/t));
d297 3
a299 3
			sprintf(outp,"%ld", (t == 0) ? 0L :
			    (long)(((r1->ru_ixrss+r1->ru_isrss+r1->ru_idrss) -
			    (r0->ru_ixrss+r0->ru_idrss+r0->ru_isrss))/t));
d304 1
a304 1
			sprintf(outp,"%ld", (long)(r1->ru_maxrss/2));
d309 1
a309 1
			sprintf(outp,"%ld", (long)r1->ru_majflt-r0->ru_majflt);
d314 1
a314 1
			sprintf(outp,"%ld", (long)r1->ru_minflt-r0->ru_minflt);
d319 1
a319 1
			sprintf(outp,"%ld", (long)r1->ru_inblock-r0->ru_inblock);
d324 1
a324 1
			sprintf(outp,"%ld", (long)r1->ru_oublock-r0->ru_oublock);
d328 2
a329 3
			sprintf(outp,"%ld+%ld",
				(long)(r1->ru_nvcsw-r0->ru_nvcsw),
				(long)(r1->ru_nivcsw-r0->ru_nivcsw) );
d338 1
a338 2
tvadd(tsum, t0, t1)
	struct timeval *tsum, *t0, *t1;
d348 1
a348 2
tvsub(tdiff, t1, t0)
	struct timeval *tdiff, *t1, *t0;
d358 1
a358 3
psecs(l,cp)
long l;
register char *cp;
a380 33
 *			M R E A D
 *
 * This function performs the function of a read(II) but will
 * call read(II) multiple times in order to get the requested
 * number of characters.  This can be necessary because
 * network connections don't deliver data with the same
 * grouping as it is written with.  Written by Robert S. Miles, BRL.
 */
int
mread(fd, bufp, n)
int fd;
register char	*bufp;
unsigned	n;
{
	register unsigned	count = 0;
	register int		nread;

	do {
		nread = read(fd, bufp, n-count);
		if(nread < 0)  {
			perror("ttcp_mread");
			return(-1);
		}
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);

	return((int)count);
}

/*
d384 1
a384 4
Nread( fd, buf, count )
int fd;
char *buf;
int count;
d389 1
d391 6
a396 1
		cnt = recvfrom( fd, (void *)buf, count, 0, (struct sockaddr *)&from, &len );
d406 13
d423 1
a423 4
Nwrite( fd, buf, count )
int fd;
char *buf;
int count;
d428 3
a430 1
		cnt = sendto( fd, (void *)buf, count, 0, (struct sockaddr *)&sinhim, sizeof(sinhim) );
a441 16
int
delay(int us)
{
	struct timeval tv;

	tv.tv_sec = 0;
	tv.tv_usec = us;
#if 1
	(void)select( 1, (fd_set *)0, (fd_set *)0, (fd_set *)0, &tv );
#else
	(void)select( 1, (char *)0, (char *)0, (char *)0, &tv );
#endif
	return(1);
}


d445 1
a445 3
main(argc,argv)
int argc;
char **argv;
a446 1
#ifdef cray
a447 1
#endif
d505 1
a506 1
			bcopy(addr->h_addr,(char*)&addr_tmp, addr->h_length);
d509 1
a509 1
			bcopy(addr->h_addr,(char*)&sinhim.sin_addr.s_addr, addr->h_length);
d529 1
a529 1
	if (bind(fd, (struct sockaddr *)&sinme, sizeof(sinme)) < 0)
d543 1
a543 1
		if(connect(fd, (struct sockaddr *)&sinhim, sizeof(sinhim) ) < 0)
d623 1
a623 1
	return 0;
d627 1
a627 1
	return 1;
@


11.6
log
@
lint fixes
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.5 2000/08/15 02:33:35 mike Exp $ (BRL)";
d475 1
d477 1
d535 1
a536 1
#ifdef cray
d539 1
a539 1
			sinhim.sin_addr.s_addr = addr_tmp;
@


11.5
log
@
lint stuff.
Making sprintf() args match up with format, on a variety of machines.
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.4 2000/07/26 15:26:47 mike Exp $ (BRL)";
d418 1
a418 1
		cnt = recvfrom( fd, (void *)buf, count, 0, &from, &len );
d440 1
a440 1
		cnt = sendto( fd, (void *)buf, count, 0, &sinhim, sizeof(sinhim) );
d557 1
a557 1
	if (bind(fd, &sinme, sizeof(sinme)) < 0)
d571 1
a571 1
		if(connect(fd, &sinhim, sizeof(sinhim) ) < 0)
d589 1
a589 1
		if((fd=accept(fd, &frominet, &fromlen) ) < 0)
@


11.4
log
@
lint
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.3 2000/06/30 15:02:30 mike Exp $ (BRL)";
d92 1
d166 1
a166 1
int len;
d240 3
a242 1
			sprintf(outp,"%d.%01d", tdiff.tv_sec, tdiff.tv_usec/100000);
d248 3
a250 1
			sprintf(outp,"%d.%01d", tdiff.tv_sec, tdiff.tv_usec/100000);
d271 2
a272 1
			sprintf(outp,"%d", t == 0 ? 0 : (r1->ru_ixrss-r0->ru_ixrss)/t);
d277 3
a279 2
			sprintf(outp,"%d", t == 0 ? 0 :
			    (r1->ru_idrss+r1->ru_isrss-(r0->ru_idrss+r0->ru_isrss))/t);
d284 3
a286 3
			sprintf(outp,"%d", t == 0 ? 0 :
			    ((r1->ru_ixrss+r1->ru_isrss+r1->ru_idrss) -
			    (r0->ru_ixrss+r0->ru_idrss+r0->ru_isrss))/t);
d291 1
a291 1
			sprintf(outp,"%d", r1->ru_maxrss/2);
d296 1
a296 1
			sprintf(outp,"%d", r1->ru_majflt-r0->ru_majflt);
d301 1
a301 1
			sprintf(outp,"%d", r1->ru_minflt-r0->ru_minflt);
d306 1
a306 1
			sprintf(outp,"%d", r1->ru_inblock-r0->ru_inblock);
d311 1
a311 1
			sprintf(outp,"%d", r1->ru_oublock-r0->ru_oublock);
d315 3
a317 2
			sprintf(outp,"%d+%d", r1->ru_nvcsw-r0->ru_nvcsw,
				r1->ru_nivcsw-r0->ru_nivcsw );
d453 1
a453 1
delay(us)
@


11.3
log
@
Fixed to compile on Irix64.
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.2 2000/06/27 15:53:18 butler Exp $ (BRL)";
d165 1
d400 1
d423 1
d444 1
d462 1
a462 1

@


11.2
log
@Fixed default select datatypes in ttcp.c, added man page for terrain
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/ttcp.c,v 11.1 2000/06/27 13:36:50 butler Exp $ (BRL)";
d19 4
a22 1
#define BSD43
@


11.1
log
@Added ttcp
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: ttcp.c,v 1.10 87/09/02 23:26:36 mike Exp $ (BRL)";
d444 1
a444 1
#ifdef __sgi
@

