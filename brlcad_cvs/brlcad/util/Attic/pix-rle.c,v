head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.3
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.2
	premerge-autoconf:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.1
	offsite-5-3-pre:11.3
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.14.57.47;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.45;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.09.01;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.56.12;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2001.08.10.20.57.06;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	2001.04.05.19.36.10;	author morrison;	state Exp;
branches;
next	11.3;

11.3
date	2000.09.01.03.23.53;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.23.19.04.40;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.12.26;	author mike;	state Rel4_4;
branches;
next	10.5;

10.5
date	94.11.08.04.33.01;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.08.23.15.05.47;	author gdurf;	state Exp;
branches;
next	10.3;

10.3
date	94.08.11.19.47.13;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	92.03.16.21.54.19;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.48.28;	author mike;	state Rel4_0;
branches;
next	9.4;

9.4
date	91.08.30.00.06.04;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	91.07.05.14.36.34;	author mmark;	state Exp;
branches;
next	9.2;

9.2
date	91.01.12.08.54.52;	author butler;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.10.02;	author mike;	state Rel3_5;
branches;
next	8.2;

8.2
date	88.12.01.17.30.12;	author tcs;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.42.37;	author mike;	state Rel3_0;
branches;
next	1.2;

1.2
date	88.09.20.02.14.02;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	88.09.08.01.12.55;	author mike;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.40;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.23.27;	author morrison;	state Exp;
branches;
next	11.7.2.3;

11.7.2.3
date	2004.04.04.20.46.47;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.52.31;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.02.12.19.43.10;	author erikg;	state Exp;
branches;
next	11.7.10.2;

11.7.10.2
date	2004.03.15.14.08.12;	author erikg;	state Exp;
branches;
next	;


desc
@pix(5) to Utah-Raster-Toolkit RLE format encoder.
@


11.11
log
@moved to src/util/
@
text
@/*
 *			P I X - R L E . C
 *
 *  Encode a .pix file using the Utah Raster Toolkit RLE library
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.10 2004/05/10 15:30:50 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <time.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "externs.h"		/* For malloc, getenv, strdup, ... */
#include "fb.h"
#include "rle.h"

static rle_hdr	outrle;
#define		outfp		outrle.rle_file
static char			comment[128];
#if HAVE_GETHOSTNAME
static char			host[128];
#endif
static rle_pixel		**rows;
static time_t			now;
static char			*who;
extern char			*getenv(const char *);

static FILE	*infp;
static char	*infile;

static int	background[3];

static int	file_width = 512;
static int	file_height = 512;

static char	usage[] = "\
Usage: pix-rle [-h] [-s squarefilesize]  [-C r/g/b]\n\
	[-w file_width] [-n file_height] [file.pix] [file.rle]\n\
\n\
If omitted, the .pix file is taken from stdin\n\
and the .rle file is written to stdout\n";


/*
 *			G E T _ A R G S
 */
static int
get_args(int argc, register char **argv)
{
	register int	c;

	while( (c = getopt( argc, argv, "hs:w:n:C:" )) != EOF )  {
		switch( c )  {
		case 'h':
			/* high-res */
			file_height = file_width = 1024;
			break;
		case 's':
			/* square file size */
			file_height = file_width = atoi(optarg);
			break;
		case 'w':
			file_width = atoi(optarg);
			break;
		case 'n':
			file_height = atoi(optarg);
			break;
		case 'C':
			{
				register char *cp = optarg;
				register int *conp = background;

				/* premature null => atoi gives zeros */
				for( c=0; c < 3; c++ )  {
					*conp++ = atoi(cp);
					while( *cp && *cp++ != '/' ) ;
				}
			}
			break;
		default:
		case '?':
			return	0;
		}
	}
	if( argv[optind] != NULL )  {
		if( (infp = fopen( (infile=argv[optind]), "r" )) == NULL )  {
			perror(infile);
			return	0;
		}
		optind++;
	} else {
		infile = "-";
	}
	if( argv[optind] != NULL )  {
		if( access( argv[optind], 0 ) == 0 )  {
			(void) fprintf( stderr,
				"\"%s\" already exists.\n",
				argv[optind] );
			exit( 1 );
		}
		if( (outfp = fopen( argv[optind], "w" )) == NULL )  {
			perror(argv[optind]);
			return	0;
		}
	}
	if( argc > ++optind )
		(void) fprintf( stderr, "pix-rle: Excess arguments ignored\n" );

	if( isatty(fileno(infp)) || isatty(fileno(outfp)) )
		return 0;
	return	1;
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register RGBpixel *scan_buf;
	register int	y;

	infp = stdin;
	outfp = stdout;
	if( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}
	scan_buf = (RGBpixel *)malloc( sizeof(RGBpixel) * file_width );

	outrle.ncolors = 3;
	RLE_SET_BIT(outrle, RLE_RED);
	RLE_SET_BIT(outrle, RLE_GREEN);
	RLE_SET_BIT(outrle, RLE_BLUE);
	outrle.background = 2;		/* use background */
	outrle.bg_color = background;
	outrle.alpha = 0;		/* no alpha channel */
	outrle.ncmap = 0;		/* no color map */
	outrle.cmaplen = 0;
	outrle.cmap = (rle_map *)0;
	outrle.xmin = outrle.ymin = 0;
	outrle.xmax = file_width-1;
	outrle.ymax = file_height-1;
	outrle.comments = (const char **)0;

	/* Add comments to the header file, since we have one */
	sprintf( comment, "converted_from=%s", infile );
	rle_putcom( strdup(comment), &outrle );
	now = time(0);
	sprintf( comment, "converted_date=%24.24s", ctime(&now) );
	rle_putcom( strdup(comment), &outrle );
	if( (who = getenv("USER")) != (char *)0 ) {
		sprintf( comment, "converted_by=%s", who);
		rle_putcom( strdup(comment), &outrle );
	} else {
		if( (who = getenv("LOGNAME")) != (char *)0 ) {
			sprintf( comment, "converted_by=%s", who);
			rle_putcom( strdup(comment), &outrle );
		}
	}
#ifdef HAVE_GETHOSTNAME
	gethostname( host, sizeof(host) );
	sprintf( comment, "converted_host=%s", host);
	rle_putcom( strdup(comment), &outrle );
#endif

	rle_put_setup( &outrle );
	rle_row_alloc( &outrle, &rows );

	/* Read image a scanline at a time, and encode it */
	for( y = 0; y < file_height; y++ )  {
		if( fread( (char *)scan_buf, sizeof(RGBpixel), (size_t)file_width, infp ) != file_width)  {
			(void) fprintf(	stderr,
				"pix-rle: read of %d pixels on line %d failed!\n",
				file_width, y );
			exit(1);
		}

		/* Grumble, convert to Utah layout */
		{
			register unsigned char	*pp = (unsigned char *)scan_buf;
			register rle_pixel	*rp = rows[0];
			register rle_pixel	*gp = rows[1];
			register rle_pixel	*bp = rows[2];
			register int		i;

			for( i=0; i<file_width; i++ )  {
				*rp++ = *pp++;
				*gp++ = *pp++;
				*bp++ = *pp++;
			}
		}
		rle_putrow( rows, file_width, &outrle );
	}
	rle_puteof( &outrle );

	fclose( infp );
	fclose( outfp );
	exit(0);
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.9 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.9
log
@merge of ansi-6-0-branch into head
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d22 5
a26 1
#include "conf.h"
@


11.8
log
@update copyright to include span through 2003
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.7 2002/08/20 17:09:01 jra Exp $ (BRL)";
d46 1
a46 1
extern char			*getenv();
d68 1
a68 2
get_args( argc, argv )
register char	**argv;
d138 1
a138 3
main( argc, argv )
int	argc;
char	*argv[];
d192 1
a192 1
		if( fread( (char *)scan_buf, sizeof(RGBpixel), file_width, infp ) != file_width)  {
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1986 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.5 2001/08/10 20:57:06 butler Exp $ (BRL)";
@


11.7.4.1
log
@sync to HEAD...
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.8 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.7.10.1
log
@merge from HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.8 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.7.10.2
log
@merge from head
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.7.10.1 2004/02/12 19:43:10 erikg Exp $ (BRL)";
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.7 2002/08/20 17:09:01 jra Exp $ (BRL)";
d46 1
a46 1
extern char			*getenv(const char *);
d68 2
a69 1
get_args(int argc, register char **argv)
d139 3
a141 1
main(int argc, char **argv)
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
@


11.7.2.3
log
@quell warnings
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.7.2.2 2004/03/17 21:23:27 morrison Exp $ (BRL)";
d192 1
a192 1
		if( fread( (char *)scan_buf, sizeof(RGBpixel), (size_t)file_width, infp ) != file_width)  {
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d46 1
a46 1
extern char			*getenv(const char *);
d68 2
a69 1
get_args(int argc, register char **argv)
d139 3
a141 1
main(int argc, char **argv)
@


11.5
log
@Misc compiler warnings eliminated
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.4 2001/04/05 19:36:10 morrison Exp $ (BRL)";
d46 1
a46 1
extern char			*getenv();
d68 1
a68 2
get_args( argc, argv )
register char	**argv;
d138 1
a138 3
main( argc, argv )
int	argc;
char	*argv[];
@


11.4
log
@updated SIGNED to signed
updated CONST to const
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.3 2000/09/01 03:23:53 mike Exp $ (BRL)";
d26 1
a26 1
#ifdef USE_STRING_H
@


11.3
log
@
Lint fix
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.2 2000/08/23 19:04:40 mike Exp $ (BRL)";
d167 1
a167 1
	outrle.comments = (CONST char **)0;
@


11.2
log
@
const RCSid
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: pix-rle.c,v 11.1 1995/01/04 10:12:26 mike Rel4_4 $ (BRL)";
d138 1
@


11.1
log
@Release_4.4
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Id: pix-rle.c,v 10.5 94/11/08 04:33:01 mike Exp $ (BRL)";
@


10.5
log
@Irix 6
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Id: pix-rle.c,v 10.4 94/08/23 15:05:47 gdurf Exp Locker: mike $ (BRL)";
@


10.4
log
@Factored ifdefs
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Id: pix-rle.c,v 10.3 1994/08/11 19:47:13 gdurf Exp gdurf $ (BRL)";
d40 1
d42 1
d44 1
a44 1
static long			now;
@


10.3
log
@Added includes
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Id: pix-rle.c,v 10.2 1992/03/16 21:54:19 mike Exp gdurf $ (BRL)";
d22 2
d26 5
d181 1
a181 1
#	ifdef BSD
d185 1
a185 1
#	endif
@


10.2
log
@IRIX 4.0.1
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Id: pix-rle.c,v 10.1 91/10/12 06:48:28 mike Rel4_0 Locker: mike $ (BRL)";
d25 2
a38 3
extern char	*malloc();
extern char	*strdup();

a62 2
	extern int	optind;
	extern char	*optarg;
d157 1
a157 1
	outrle.comments = (CONST_DECL char **)0;
@


10.1
log
@Release_4.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Id: /f/cad/util/RCS/pix-rle.c,v 1.1 91/01/03 23:11:41 butler Exp $ (BRL)";
d40 1
a40 1
static FILE	*infp = stdin;
@


9.4
log
@Stardent ANSI c
@
text
@@


9.3
log
@fixed usage msg
@
text
@d160 1
a160 1
	outrle.comments = (char **)0;
@


9.2
log
@changes in names to work with Rel. 3 of URT library
@
text
@d49 1
a49 1
Usage: pix-rle [-h -d] [-s squarefilesize]  [-C r/g/b]\n\
@


9.1
log
@Release_3.5
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: pix-rle.c,v 8.2 88/12/01 17:30:12 tcs Exp $ (BRL)";
d26 1
a26 1
#include "svfb_global.h"
d28 2
a29 2
static struct sv_globals	outrle;
#define		outfp		outrle.svfb_fd
d147 14
a160 14
	outrle.sv_ncolors = 3;
	SV_SET_BIT(outrle, SV_RED);
	SV_SET_BIT(outrle, SV_GREEN);
	SV_SET_BIT(outrle, SV_BLUE);
	outrle.sv_background = 2;		/* use background */
	outrle.sv_bg_color = background;
	outrle.sv_alpha = 0;		/* no alpha channel */
	outrle.sv_ncmap = 0;		/* no color map */
	outrle.sv_cmaplen = 0;
	outrle.sv_cmap = (rle_map *)0;
	outrle.sv_xmin = outrle.sv_ymin = 0;
	outrle.sv_xmax = file_width-1;
	outrle.sv_ymax = file_height-1;
	outrle.sv_comments = (char **)0;
d183 1
a183 1
	sv_setup( RUN_DISPATCH, &outrle );
d209 1
a209 1
		sv_putrow( rows, file_width, &outrle );
d211 1
a211 1
	sv_puteof( &outrle );
@


8.2
log
@Added getenv("LOGNAME") to the comment string for Sys V machines.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: pix-rle.c,v 8.1 88/10/05 00:42:37 mike Rel3_0 $ (BRL)";
@


8.1
log
@Release_3.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: pix-rle.c,v 1.2 88/09/20 02:14:02 mike Exp $ (BRL)";
d171 5
@


1.2
log
@Switched to using strdup() from external module.
Enhanced error messages
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: pix-rle.c,v 1.1 88/09/08 01:12:55 mike Locked $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: pix-rle.c,v 7.1 87/11/03 00:08:17 mike Locked $ (BRL)";
d38 1
d49 1
a49 1
Usage: pix-rle [-h -d -v] [-s squarefilesize]  [-C r/g/b]\n\
a56 25
 *			S T R D U P
 *
 * Given a string, allocate enough memory to hold it using malloc(),
 * duplicate the strings, returns a pointer to the new string.
 */
char *
strdup( cp )
register char *cp;
{
	register char	*base;
	register int	len;

	len = strlen( cp )+2;
	if( (base = malloc( len )) == (char *)0 )
		return( (char *)0 );

#ifdef BSD
	bcopy( cp, base, len );
#else
	memcpy( base, cp, len );
#endif
	return(base);
}

/*
d95 1
d122 1
a122 1
		(void) fprintf( stderr, "Excess arguments ignored\n" );
d185 1
a185 1
				"read of %d pixels on line %d failed!\n",
d187 1
a187 1
				return	1;
d210 1
a210 1
	return	0;
@
