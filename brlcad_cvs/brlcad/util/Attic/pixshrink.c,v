head	11.9;
access;
symbols
	ansi-20040405-merged:11.6.2.1
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.6
	premerge-autoconf:11.6
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.6
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.2
	offsite-5-3-pre:11.3
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.21.14.57.56;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.51;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.09.04;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	2002.08.15.20.56.16;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.10.20.57.07;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.23.19.04.57;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.07.16.22.56.03;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.13.00;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.23.15.06.03;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.48.56;	author mike;	state Rel4_0;
branches;
next	1.8;

1.8
date	91.07.16.21.02.06;	author butler;	state Exp;
branches;
next	1.7;

1.7
date	91.07.11.22.59.14;	author butler;	state Exp;
branches;
next	1.6;

1.6
date	91.07.08.16.24.59;	author butler;	state Exp;
branches;
next	1.5;

1.5
date	91.06.12.22.37.38;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	90.12.07.01.32.39;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	90.11.03.14.48.18;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	90.10.12.07.34.50;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	90.10.12.07.03.57;	author butler;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.02.42;	author morrison;	state Exp;
branches;
next	;


desc
@program to shrink pix files
@


11.9
log
@moved to src/util/
@
text
@/*
 *			P I X S H R I N K . C
 *
 *	scale down a picture by a uniform factor.
 *
 *	Options
 *	h	help
 *
 *  Author -
 *	Lee A. Butler
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/pixshrink.c,v 11.8 2004/05/10 15:30:51 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "externs.h"

#define UCHAR unsigned char

/* declarations to support use of getopt() system call */
char *options = "uhs:w:n:f:";

char *progname = "(noname)";
char *filename = "(stdin)";

void shrink_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor), usample_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor);

/*	R E A D _ I M A G E
 *
 *	read image into memory
 */
UCHAR *read_image(int scanlen, int Width, int Height, unsigned char *buffer)
{
	int total_bytes, in_bytes;
	int	count = 0;

	if (!buffer &&
	    (buffer=(UCHAR *)malloc(scanlen * Height)) == (UCHAR *)NULL) {
		(void)fprintf(stderr, "%s: cannot allocate input buffer\n", 
			progname);
		exit(-1);
	}

	total_bytes = Width * Height * 3;
	in_bytes = 0;
	while (in_bytes < total_bytes && 
	    (count=read(0, (char *)&buffer[in_bytes], (unsigned)(total_bytes-in_bytes))) >= 0)
		in_bytes += count;

	if (count < 0) {
		perror(filename);
		exit(-1);
	}

	return(buffer);
}

/*	W R I T E _ I M A G E
 *
 *
 */
void write_image(int Width, int Height, unsigned char *buffer)
{
	int	count = 0;
	int	out_bytes, total_bytes;
	
	total_bytes = Width * Height * 3;
	out_bytes = 0;

	while (out_bytes < total_bytes &&
	    (count=write(1, (char *)&buffer[out_bytes], total_bytes-out_bytes)) >= 0)
		out_bytes += count;

	if (count < 0) {
		perror("stdout");
		exit(-1);
	}
}

/*	S H R I N K _ I M A G E
 *
 *	
 */
void
shrink_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor)
{
	UCHAR *pixelp, *finalpixel;
	unsigned int p[3];
	int facsq, x, y, px, py;

	facsq = Factor * Factor;
	finalpixel = buffer;

	for (y=0 ; y < Height ; y += Factor)
		for (x=0 ; x < Width ; x += Factor) {

			/* average factor by factor pixels */

			for (py = 0 ; py < 3 ; ++py)
				p[py] = 0;

			for (py = 0 ; py < Factor ; py++) {

				/* get first pixel in scanline */
				pixelp = &buffer[y*scanlen+x*3];

				/* add pixels from scanline to average */
				for (px = 0 ; px < Factor ; px++) {
					p[0] += *pixelp++;
					p[1] += *pixelp++;
					p[2] += *pixelp++;
				}
			}
			
			/* store resultant pixel back in buffer */
			for (py = 0 ; py < 3 ; ++py)
				*finalpixel++ = p[py] / facsq;
		}
}

/*
 *	Undersample image pixels
 */
void
usample_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor)
{
	register int t, x, y;

	UCHAR *p;

	p = buffer;

	for (y=0 ; y < Height ; y += Factor)
		for (x=0 ; x < Width ; x += Factor, p += 3) {
			t = x*3 + y*scanlen;
			p[0] = buffer[t];
			p[1] = buffer[t+1];
			p[2] = buffer[t+2];
		}
}


int width = 512;
int height = 512;
int scanlen;
int factor = 2;

#define METH_BOXCAR 1
#define METH_UNDERSAMPLE 2
int method = METH_BOXCAR;

/*
 *	U S A G E --- tell user how to invoke this program, then exit
 */
void usage(void)
{
	(void) fprintf(stderr,
"Usage: %s [-u] [-h] [-w width] [-n scanlines] [-s squaresize]\n\
[-f shrink_factor] [pixfile] > pixfile\n", progname);
	exit(1);
}


/*
 *	P A R S E _ A R G S --- Parse through command line flags
 */
void parse_args(int ac, char **av)
{
	int  c;

	if (!(progname = strrchr(*av, '/')))
		progname = *av;
	
	/* Turn off getopt's error messages */
	opterr = 0;

	/* get all the option flags from the command line */
	while ((c=getopt(ac,av,options)) != EOF)
		switch (c) {
		case 'f'	: if ((c = atoi(optarg)) > 1)
					factor = c;
				  break;
		case 'h'	: width = height = 1024; break;
		case 'n'	: if ((c=atoi(optarg)) > 0)
					height = c;
				  break;
		case 'w'	: if ((c=atoi(optarg)) > 0)
					width = c;
				  break;
		case 's'	: if ((c=atoi(optarg)) > 0)
					height = width = c;
				  break;
		case 'u'	: method = METH_UNDERSAMPLE; break; 
		case '?'	:
		default		: usage(); break;
		}

	if (optind >= ac) {
		if (isatty(fileno(stdout)) )
			usage();
	}
	if (optind < ac) {
		if (freopen(av[optind], "r", stdin) == (FILE *)NULL) {
			perror(av[optind]);
			exit(-1);
		} else
			filename = av[optind];
	}
	if (optind+1 < ac)
		(void)fprintf(stderr, "%s: Excess arguments ignored\n", progname);

}




/*
 *	M A I N
 *
 *	Call parse_args to handle command line arguments first, then
 *	process input.
 */
int main(int ac, char **av)
{
	UCHAR *buffer = (UCHAR *)NULL;

	(void)parse_args(ac, av);
	if (isatty(fileno(stdin))) usage();

	/* process stdin */
	scanlen = width * 3;
	buffer = read_image(scanlen, width, height, buffer);

	switch (method) {
	case METH_BOXCAR : shrink_image(scanlen, width, height, buffer, factor); break;
	case METH_UNDERSAMPLE : usample_image(scanlen, width, height, buffer, factor);
				break;
	default: return(-1);
	}

	write_image(width/factor, height/factor, buffer);
	return(0);
}


@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pixshrink.c,v 11.7 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.7
log
@merge of ansi-6-0-branch into head
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d24 5
a28 1
#include "conf.h"
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixshrink.c,v 11.4 2001/08/10 20:57:07 butler Exp $ (BRL)";
d44 1
a44 1
void shrink_image(), usample_image();
d50 1
a50 3
UCHAR *read_image(scanlen, Width, Height, buffer)
int scanlen, Width, Height;
UCHAR *buffer;
d80 1
a80 3
void write_image(Width, Height, buffer)
int Width, Height;
UCHAR *buffer;
d103 1
a103 3
shrink_image(scanlen, Width, Height, buffer, Factor)
UCHAR *buffer;
int scanlen, Factor, Width, Height;
d143 1
a143 3
usample_image(scanlen, Width, Height, buffer, Factor)
UCHAR *buffer;
int scanlen, Factor, Width, Height;
d173 1
a173 1
void usage()
d185 1
a185 3
void parse_args(ac, av)
int ac;
char *av[];
d241 1
a241 3
int main(ac,av)
int ac;
char *av[];
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixshrink.c,v 11.6 2002/08/20 17:09:04 jra Exp $ (BRL)";
d44 1
a44 1
void shrink_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor), usample_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor);
d50 3
a52 1
UCHAR *read_image(int scanlen, int Width, int Height, unsigned char *buffer)
d82 3
a84 1
void write_image(int Width, int Height, unsigned char *buffer)
d107 3
a109 1
shrink_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor)
d149 3
a151 1
usample_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor)
d181 1
a181 1
void usage(void)
d193 3
a195 1
void parse_args(int ac, char **av)
d251 3
a253 1
int main(int ac, char **av)
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d44 1
a44 1
void shrink_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor), usample_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor);
d50 3
a52 1
UCHAR *read_image(int scanlen, int Width, int Height, unsigned char *buffer)
d82 3
a84 1
void write_image(int Width, int Height, unsigned char *buffer)
d107 3
a109 1
shrink_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor)
d149 3
a151 1
usample_image(int scanlen, int Width, int Height, unsigned char *buffer, int Factor)
d181 1
a181 1
void usage(void)
d193 3
a195 1
void parse_args(int ac, char **av)
d251 3
a253 1
int main(int ac, char **av)
@


11.4
log
@Misc compiler warnings eliminated
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixshrink.c,v 11.3 2000/08/23 19:04:57 mike Exp $ (BRL)";
d44 1
a44 1
void shrink_image(), usample_image();
d50 1
a50 3
UCHAR *read_image(scanlen, Width, Height, buffer)
int scanlen, Width, Height;
UCHAR *buffer;
d80 1
a80 3
void write_image(Width, Height, buffer)
int Width, Height;
UCHAR *buffer;
d103 1
a103 3
shrink_image(scanlen, Width, Height, buffer, Factor)
UCHAR *buffer;
int scanlen, Factor, Width, Height;
d143 1
a143 3
usample_image(scanlen, Width, Height, buffer, Factor)
UCHAR *buffer;
int scanlen, Factor, Width, Height;
d173 1
a173 1
void usage()
d185 1
a185 3
void parse_args(ac, av)
int ac;
char *av[];
d241 1
a241 3
int main(ac,av)
int ac;
char *av[];
@


11.3
log
@
const RCSid
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixshrink.c,v 11.2 1996/07/16 22:56:03 jra Exp $ (BRL)";
d27 1
a27 1
#ifdef USE_STRING_H
@


11.2
log
@Minor mods for IRIX 6.2
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixshrink.c,v 11.1 1995/01/04 10:13:00 mike Rel4_4 jra $ (BRL)";
@


11.1
log
@Release_4.4
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixshrink.c,v 10.2 94/08/23 15:06:03 gdurf Exp $ (BRL)";
d44 2
d106 1
d148 1
@


10.2
log
@Factored ifdefs
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixshrink.c,v 10.1 1991/10/12 06:48:56 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixshrink.c,v 1.8 91/07/16 21:02:06 butler Exp $ (BRL)";
d24 2
d27 3
a29 1
#ifdef BSD
d32 1
a32 3
#ifdef SYSV
#include <string.h>
#endif
@


1.8
log
@removed declaration of strrchr which is now in externs.h
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixshrink.c,v 1.7 91/07/11 22:59:14 butler Exp $ (BRL)";
@


1.7
log
@added declaration of strrchr before first use
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixshrink.c,v 1.6 91/07/08 16:24:59 butler Exp $ (BRL)";
a191 1
	char *strrchr();
@


1.6
log
@added cast to call to malloc()
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixshrink.c,v 1.5 91/06/12 22:37:38 mike Exp $ (BRL)";
d192 2
a193 1
	
@


1.5
log
@lint
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d53 2
a54 1
	if (!buffer && (buffer=malloc(scanlen * Height)) == (UCHAR *)NULL) {
@


1.4
log
@lint
@
text
@d1 2
a2 1
/*	P I X S H R I N K . C
d8 11
d20 4
d31 2
a37 2
extern char *optarg;
extern int optind, opterr, getopt();
a51 1
	UCHAR *malloc();
a189 1
	char *strrchr();
a190 1

@


1.3
log
@Added undersampling support
@
text
@d34 2
a35 1
	int total_bytes, in_bytes, count;
d66 2
a67 1
	int count, out_bytes, total_bytes;
@


1.2
log
@fixed usage message
@
text
@d16 2
d19 1
a19 1
char *options = "hs:w:n:f:";
a25 72
int width = 512;
int height = 512;
int scanlen;
int factor = 2;

/*
 *	U S A G E --- tell user how to invoke this program, then exit
 */
void usage()
{
	(void) fprintf(stderr,
"Usage: %s [-h] [-w width] [-n scanlines] [-s squaresize]\n\
[-f shrink_factor] [pixfile] > pixfile\n", progname);
	exit(1);
}


/*
 *	P A R S E _ A R G S --- Parse through command line flags
 */
void parse_args(ac, av)
int ac;
char *av[];
{
	char *strrchr();
	int  c;

	
	if (!(progname = strrchr(*av, '/')))
		progname = *av;
	
	/* Turn off getopt's error messages */
	opterr = 0;

	/* get all the option flags from the command line */
	while ((c=getopt(ac,av,options)) != EOF)
		switch (c) {
		case 'f'	: if ((c = atoi(optarg)) > 1)
					factor = c;
				  break;
		case 'h'	: width = height = 1024; break;
		case 'n'	: if ((c=atoi(optarg)) > 0)
					height = c;
				  break;
		case 'w'	: if ((c=atoi(optarg)) > 0)
					width = c;
				  break;
		case 's'	: if ((c=atoi(optarg)) > 0)
					height = width = c;
				  break;
		case '?'	: 
		default		: usage(); break;
		}

	if (optind >= ac) {
		if (isatty(fileno(stdout)) )
			usage();
	}
	if (optind < ac) {
		if (freopen(av[optind], "r", stdin) == (FILE *)NULL) {
			perror(av[optind]);
			exit(-1);
		} else
			filename = av[optind];
	}
	if (optind+1 < ac)
		(void)fprintf(stderr, "%s: Excess arguments ignored\n", progname);

}



d30 3
a32 3
unsigned char *read_image(Width, Height, buffer)
int Width, Height;
unsigned char *buffer;
d35 1
a35 1
	unsigned char *malloc();
d37 1
a37 2
	scanlen = Width * 3;
	if (!buffer && (buffer=malloc(scanlen * Height)) == (unsigned char *)NULL) {
d63 1
a63 1
unsigned char *buffer;
d84 3
a86 3
shrink_image(Width, Height, buffer, Factor)
unsigned char *buffer;
int Factor, Width, Height;
d88 1
a88 1
	unsigned char *pixelp, *finalpixel;
d95 2
a96 2
	for (y=0 ; y < Height ; y += factor)
		for (x=0 ; x < Width ; x += factor) {
d103 1
a103 1
			for (py = 0 ; py < factor ; py++) {
d109 1
a109 1
				for (px = 0 ; px < factor ; px++) {
d123 101
d233 1
a233 1
	unsigned char *buffer = (char *)NULL;
d239 2
a240 1
	buffer = read_image(width, height, buffer);
d242 6
a247 1
	shrink_image(width, height, buffer, factor);
@


1.1
log
@Initial revision
@
text
@d9 6
d34 3
a36 2
	(void) fprintf(stderr, "Usage: %s [ -%s ] [ < infile > outfile]\n",
			progname, options);
d48 1
d51 3
a53 1
	progname = *av;
@
