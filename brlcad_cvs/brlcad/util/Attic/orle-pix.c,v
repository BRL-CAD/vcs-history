head	11.12;
access;
symbols
	ansi-20040405-merged:11.8.2.2
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.8.10.2
	premerge-autoconf:11.9
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.8.4.1
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.2
	offsite-5-3-pre:11.4
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:5.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.12
date	2004.05.21.14.57.44;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.10;

11.10
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2004.02.02.17.39.45;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.08.59;	author jra;	state Exp;
branches
	11.8.2.1
	11.8.4.1
	11.8.10.1;
next	11.7;

11.7
date	2002.08.15.20.56.11;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2001.08.10.20.57.06;	author butler;	state Exp;
branches;
next	11.5;

11.5
date	2001.08.08.03.28.15;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	2000.09.01.03.23.50;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.23.19.04.36;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.01.31.16.03.08;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.12.11;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.23.15.05.43;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	92.03.16.21.54.17;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.48.20;	author mike;	state Rel4_0;
branches;
next	9.4;

9.4
date	91.07.22.21.49.40;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	91.07.02.01.57.55;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	91.01.12.08.53.53;	author butler;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.09.46;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.42.19;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.09.19.23.37.03;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.09.40;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.13.06;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.44.05;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.13.00.51.13;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.14.16;	author mike;	state Rel1;
branches;
next	1.4;

1.4
date	86.10.27.04.47.03;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	86.10.03.04.52.51;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.09.09.20.10.19;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.09.09.20.04.43;	author mike;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.02.38;	author morrison;	state Exp;
branches;
next	11.8.2.2;

11.8.2.2
date	2004.03.17.21.23.27;	author morrison;	state Exp;
branches;
next	;

11.8.4.1
date	2004.03.11.23.52.30;	author morrison;	state Exp;
branches;
next	;

11.8.10.1
date	2004.02.12.19.43.10;	author erikg;	state Exp;
branches;
next	11.8.10.2;

11.8.10.2
date	2004.03.15.14.08.12;	author erikg;	state Exp;
branches;
next	;


desc
@COnvert RLE file to .pix file
@


11.12
log
@moved to src/util/
@
text
@/*
 *			R L E - P I X . C
 *
 *  Author -
 *	Gary S. Moss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.11 2004/05/10 15:30:50 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <unistd.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include "machine.h"
#include "fb.h"		/* For Pixel typedef */
#include "orle.h"

static char	*usage[] =
	{
"Usage: rle-pix [-dv] [-b (rgbBG)] [file.rle]",
"",
"If no rle file is specifed, rle-pix will read its standard input.",
"Pix(5B) format is written to the standard output.",
0
	};

static FILE	*fp;
static RGBpixel	bgpixel;
static int	bgflag = 0;
static int	pars_Argv(int argc, register char **argv);
static int	xpos, ypos;
static int	xlen = -1, ylen = -1;
static void	prnt_Cmap(ColorMap *cmap);
static void	prnt_Usage(void);
static int	non_linear_cmap = 0;

/*	m a i n ( )							*/
int
main(int argc, char **argv)
{	
	register int	scan_ln;
	register int	fb_size = 512;
	static RGBpixel	scanbuf[1025];
	static RGBpixel	bg_scan[1025];
	static ColorMap	cmap;
	int		get_flags;
	int		scan_bytes;

	fp = stdin;
	if( ! pars_Argv( argc, argv ) || isatty(fileno(stdout)) )  {
		prnt_Usage();
		return	1;
	}
	if( rle_rhdr( fp, &get_flags, bgflag ? NULL : bgpixel ) == -1 )
		return	1;

	rle_rlen( &xlen, &ylen );
	rle_rpos( &xpos, &ypos );

	/* Automatic selection of high res. device.			*/
	if( xpos + xlen > 512 || ypos + ylen > 512 )
		fb_size = 1024;
	if( xpos + xlen > fb_size )
		xlen = fb_size - xpos;
	if( ypos + ylen > fb_size )
		ylen = fb_size - ypos;
	rle_wlen( xlen, ylen, 0 );

	scan_bytes = fb_size * sizeof(RGBpixel);

	if( rle_verbose )
		(void) fprintf( stderr,
		"Background is %d %d %d\n",
		bgpixel[RED], bgpixel[GRN], bgpixel[BLU]
		    );

	/* If color map provided, use it, else go with standard map. */
	if( ! (get_flags & NO_COLORMAP) )  {
		if( rle_verbose )
			(void) fprintf( stderr,
			"Reading color map from file\n"
			    );
		if( rle_rmap( fp, &cmap ) == -1 )
			return	1;
		if( rle_verbose )
			prnt_Cmap( &cmap );
		if( fb_is_linear_cmap( &cmap ) )
			non_linear_cmap = 0;
		else
			non_linear_cmap = 1;
	}  else  {
		/* Standard linear colormap */
		non_linear_cmap = 0;
	}
	if( rle_verbose )  (void)fprintf(stderr, "Using %s colormap\n",
		non_linear_cmap ? "stored" : "linear" );

	/* Fill buffer with background.	*/
	if( (get_flags & NO_BOX_SAVE) )  {
		register int	i;
		register RGBpixel	*to;

		to = bg_scan;
		for( i = 0; i < fb_size; i++,to++ )  {
			COPYRGB( *to, bgpixel );
		}
	}

	{	
		for( scan_ln = fb_size-1; scan_ln >= 0; scan_ln-- )  {	
			static int	touched = 1;
			register int	pix;
			if( touched && (get_flags & NO_BOX_SAVE) )  {
				bcopy( (char *)bg_scan, (char *)scanbuf, scan_bytes );
			}
			if( (touched = rle_decode_ln( fp, scanbuf )) == -1 )
				return	1;
			if( non_linear_cmap )  {
				for( pix = 0; pix < fb_size; pix++ )  {
					(void) putchar( cmap.cm_red[scanbuf[pix][RED]]>>8 );
					(void) putchar( cmap.cm_green[scanbuf[pix][GRN]]>>8 );
					(void) putchar( cmap.cm_blue[scanbuf[pix][BLU]]>>8 );
				}
			} else {
				/* .pix files are streams of RGBpixels */
				write( 1, scanbuf, fb_size*sizeof(RGBpixel) );
			}
		} /* end for */
	} /* end block */
	return	0;
}

/*	p a r s _ A r g v ( )						*/
static int
pars_Argv(int argc, register char **argv)
{	register int	c;
		extern int	optind;
		extern char	*optarg;
	/* Parse options.						*/
	while( (c = getopt( argc, argv, "b:dv" )) != EOF )
		{
		switch( c )
			{
		case 'b' : /* User-specified background.		*/
			bgflag = optarg[0];
			switch( bgflag )
				{
			case 'r':
				bgpixel[RED] = 255;
				break;
			case 'g':
				bgpixel[GRN] = 255;
				break;
			case 'b':
				bgpixel[BLU] = 255;
				break;
			case 'w':
				bgpixel[RED] =
				bgpixel[GRN] =
				bgpixel[BLU] = 255;
				break;
			case 'B':		/* Black */
				break;
			case 'G':		/* 18% grey, for alignments */
				bgpixel[RED] =
				bgpixel[GRN] =
				bgpixel[BLU] = 255.0 * 0.18;
				break;
			default:
				(void) fprintf( stderr,
						"Background '%c' unknown\n",
						bgflag
						);
				bgflag = 0;
				break;
				} /* End switch */
			break;
		case 'd' :
			rle_debug = 1;
			break;
		case 'v' :
			rle_verbose = 1;
			break;
		case '?' :
			return	0;
			} /* end switch */
		} /* end while */

	if( argv[optind] != NULL )
		if( (fp = fopen( argv[optind], "r" )) == NULL )
			{
			(void) fprintf( stderr,
					"Can't open %s for reading!\n",
					argv[optind]
					);
			return	0;
			}
	if( argc > ++optind )
		{
		(void) fprintf( stderr, "Too many arguments!\n" );
		return	0;
		}
	return	1;
	}

/*	p r n t _ U s a g e ( )
	Print usage message.
 */
static void
prnt_Usage(void)
{	register char	**p = usage;
	while( *p )
		(void) fprintf( stderr, "%s\n", *p++ );
	return;
	}

static void
prnt_Cmap(ColorMap *cmap)
{	register unsigned short	*cp;
		register int	i;
	(void) fprintf( stderr, "\t\t\t_________ Color map __________\n" );
	(void) fprintf( stderr, "Red segment :\n" );
	for( i = 0, cp = cmap->cm_red; i < 16; ++i, cp += 16 )
		{
		(void) fprintf( stderr,
	"%4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x\n",
	/* 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 */
				cp[0],
				cp[1],
				cp[2],
				cp[3],
				cp[4],
				cp[5],
				cp[6],
				cp[7],
				cp[8],
				cp[9],
				cp[10],
				cp[11],
				cp[12],
				cp[13],
				cp[14],
				cp[15]
				);
		}
	(void) fprintf( stderr, "Green segment :\n" );
	for( i = 0, cp = cmap->cm_green; i < 16; ++i, cp += 16 )
		{
		(void) fprintf( stderr, 
	"%4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x\n",
	/* 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 */
				cp[0],
				cp[1],
				cp[2],
				cp[3],
				cp[4],
				cp[5],
				cp[6],
				cp[7],
				cp[8],
				cp[9],
				cp[10],
				cp[11],
				cp[12],
				cp[13],
				cp[14],
				cp[15]
				);
		}
	(void) fprintf( stderr, "Blue segment :\n" );
	for( i = 0, cp = cmap->cm_blue; i < 16; ++i, cp += 16 )
		{
		(void) fprintf( stderr,
	"%4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x %4x\n",
	/* 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 */
				cp[0],
				cp[1],
				cp[2],
				cp[3],
				cp[4],
				cp[5],
				cp[6],
				cp[7],
				cp[8],
				cp[9],
				cp[10],
				cp[11],
				cp[12],
				cp[13],
				cp[14],
				cp[15]
				);
		}
	return;
	}
@


11.11
log
@change conf.h to a wrapped config.h
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.10 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.10
log
@merge of ansi-6-0-branch into head
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d20 5
a24 1
#include "conf.h"
@


11.9
log
@update copyright to include span through 2003
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.8 2002/08/20 17:08:59 jra Exp $ (BRL)";
d45 1
a45 1
static int	pars_Argv();
d48 2
a49 2
static void	prnt_Cmap();
static void	prnt_Usage();
d54 1
a54 3
main( argc, argv )
int	argc;
char	*argv[];
d150 2
a151 3
pars_Argv( argc, argv )
register char	**argv;
	{	register int	c;
d225 2
a226 2
prnt_Usage()
	{	register char	**p = usage;
d233 2
a234 3
prnt_Cmap( cmap )
ColorMap	*cmap;
	{	register unsigned short	*cp;
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1986 by the United States Army.
d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.6 2001/08/10 20:57:06 butler Exp $ (BRL)";
@


11.8.4.1
log
@sync to HEAD...
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.9 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.8.10.1
log
@merge from HEAD
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.9 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.8.10.2
log
@merge from head
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.8.10.1 2004/02/12 19:43:10 erikg Exp $ (BRL)";
@


11.8.2.1
log
@Initial ANSIfication
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.8 2002/08/20 17:08:59 jra Exp $ (BRL)";
d45 1
a45 1
static int	pars_Argv(int argc, register char **argv);
d48 2
a49 2
static void	prnt_Cmap(ColorMap *cmap);
static void	prnt_Usage(void);
d54 3
a56 1
main(int argc, char **argv)
d152 3
a154 2
pars_Argv(int argc, register char **argv)
{	register int	c;
d228 2
a229 2
prnt_Usage(void)
{	register char	**p = usage;
d236 3
a238 2
prnt_Cmap(ColorMap *cmap)
{	register unsigned short	*cp;
@


11.8.2.2
log
@sync branch with HEAD
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d17 1
a17 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d45 1
a45 1
static int	pars_Argv(int argc, register char **argv);
d48 2
a49 2
static void	prnt_Cmap(ColorMap *cmap);
static void	prnt_Usage(void);
d54 3
a56 1
main(int argc, char **argv)
d152 3
a154 2
pars_Argv(int argc, register char **argv)
{	register int	c;
d228 2
a229 2
prnt_Usage(void)
{	register char	**p = usage;
d236 3
a238 2
prnt_Cmap(ColorMap *cmap)
{	register unsigned short	*cp;
@


11.6
log
@Misc compiler warnings eliminated
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.5 2001/08/08 03:28:15 butler Exp $ (BRL)";
d45 1
a45 1
static int	pars_Argv();
d48 2
a49 2
static void	prnt_Cmap();
static void	prnt_Usage();
d54 1
a54 3
main( argc, argv )
int	argc;
char	*argv[];
d150 2
a151 3
pars_Argv( argc, argv )
register char	**argv;
	{	register int	c;
d225 2
a226 2
prnt_Usage()
	{	register char	**p = usage;
d233 2
a234 3
prnt_Cmap( cmap )
ColorMap	*cmap;
	{	register unsigned short	*cp;
@


11.5
log
@Misc compiler warnings eliminated
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.4 2000/09/01 03:23:50 mike Exp $ (BRL)";
d24 1
a24 1
#ifdef USE_STRING_H
@


11.4
log
@
Lint fix
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.3 2000/08/23 19:04:36 mike Exp $ (BRL)";
d23 6
a28 1

@


11.3
log
@
const RCSid
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.2 2000/01/31 16:03:08 jra Exp $ (BRL)";
d48 1
@


11.2
log
@Eliminated some unused variables
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Id: orle-pix.c,v 11.1 1995/01/04 10:12:11 mike Rel4_4 $ (BRL)";
@


11.1
log
@Release_4.4
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Id: orle-pix.c,v 10.3 94/08/23 15:05:43 gdurf Exp $ (BRL)";
a120 1
		register int	by = fb_size;
@


10.3
log
@Factored ifdefs
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Id: orle-pix.c,v 10.2 1992/03/16 21:54:17 mike Exp gdurf $ (BRL)";
@


10.2
log
@IRIX 4.0.1
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Id: orle-pix.c,v 10.1 91/10/12 06:48:20 mike Rel4_0 Locker: mike $ (BRL)";
d20 2
d23 2
a125 1
#ifdef BSD
a126 3
#else
				memcpy( (char *)scanbuf, (char *)bg_scan, scan_bytes );
#endif
@


10.1
log
@Release_4.0
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Id: /f/cad/util/RCS/orle-pix.c,v 1.1 91/01/03 23:11:38 butler Exp $ (BRL)";
d33 1
a33 1
static FILE	*fp = stdin;
d56 1
@


9.4
log
@Removed unneeded u_char typedef, it bugged the IBM
@
text
@@


9.3
log
@changed to fb_is_linear_cmap
@
text
@a23 1
typedef unsigned char	u_char;
@


9.2
log
@changed include of rle.h to include of orle.h
@
text
@d94 1
a94 1
		if( is_linear_cmap( &cmap ) )
@


9.1
log
@Release_3.5
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: orle-pix.c,v 8.1 88/10/05 00:42:19 mike Rel3_0 $ (BRL)";
d22 1
a22 1
#include "rle.h"
@


8.1
log
@Release_3.0
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: orle-pix.c,v 7.2 88/09/19 23:37:03 mike Exp $ (BRL)";
@


7.2
log
@Moved function is_linear_cmap() into linear-cmap.c
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: orle-pix.c,v 7.1 87/11/03 00:09:40 mike Locked $ (BRL)";
@


7.1
log
@Release 2.3
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 6.1 87/07/11 08:13:06 mike Rel $ (BRL)";
a309 20

/*
 *  Check for a color map being linear in R, G, and B.
 *  Returns 1 for linear map, 0 for non-linear map
 *  (ie, non-identity map).
 */
is_linear_cmap( cmap )
register ColorMap *cmap;
{
	register int i;
	unsigned short v;

	for( i=0; i<256; i++ )  {
		v = (unsigned short)(i<<8);
		if( cmap->cm_red[i] != v )  return(0);
		if( cmap->cm_green[i] != v )  return(0);
		if( cmap->cm_blue[i] != v )  return(0);
	}
	return(1);
}
@


6.1
log
@Release 2.0
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 5.1 87/06/24 22:44:05 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 4.2 87/02/13 00:51:13 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 4.1 86/12/29 03:14:16 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 1.4 86/10/27 04:47:03 mike Exp $ (BRL)";
@


1.4
log
@Converted to RGBpixel
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 1.3 86/10/03 04:52:51 mike Locked $ (BRL)";
@


1.3
log
@Modified for new libfb calling sequences.
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 1.2 86/09/09 20:10:19 mike Locked $ (BRL)";
d27 1
a28 4
"rle-pix (%I%)",
"",
"Usage: rle-pix [-dv][-b (rgbBG)][file.rle]",
"",
d35 1
a35 1
static Pixel	bgpixel = { 0, 0, 0, 0 };
d51 2
a52 2
	static Pixel	scanbuf[1025];
	static Pixel	bg_scan[1025];
d61 1
a61 1
	if( rle_rhdr( fp, &get_flags, bgflag ? NULL : &bgpixel ) == -1 )
d76 1
a76 1
	scan_bytes = fb_size * sizeof(Pixel);
d81 1
a81 1
		bgpixel.red, bgpixel.green, bgpixel.blue
d108 2
a109 2
		register Pixel	*to;
		register Pixel	*from;
d111 3
a113 3
		from = &bgpixel;
		for( i = 0; i < fb_size; i++ )
			*to++ = *from;
d132 3
a134 3
					(void) putchar( cmap.cm_red[scanbuf[pix].red]>>8 );
					(void) putchar( cmap.cm_green[scanbuf[pix].green]>>8 );
					(void) putchar( cmap.cm_blue[scanbuf[pix].blue]>>8 );
d137 2
a138 5
				for( pix = 0; pix < fb_size; pix++ )  {
					(void) putchar( scanbuf[pix].red );
					(void) putchar( scanbuf[pix].green );
					(void) putchar( scanbuf[pix].blue );
				}
d162 1
a162 1
				bgpixel.red = 255;
d165 1
a165 1
				bgpixel.green = 255;
d168 1
a168 1
				bgpixel.blue = 255;
d171 3
a173 3
				bgpixel.red =
				bgpixel.green =
				bgpixel.blue = 255;
d178 3
a180 3
				bgpixel.red =
				bgpixel.green =
				bgpixel.blue = 255.0 * 0.18;
@


1.2
log
@Added check for stdout being a tty.
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 1.1 86/09/09 20:04:43 mike Exp $ (BRL)";
d45 1
d51 8
a58 7
	{	register int	scan_ln;
		register int	fb_size = 512;
		static Pixel	scanbuf[1025];
		static Pixel	bg_scan[1025];
		static ColorMap	cmap;
		int		get_flags;
		int		scan_bytes;
d60 1
a60 2
	if( ! pars_Argv( argc, argv ) || isatty(fileno(stdout)) )
		{
d63 1
a63 1
		}
d83 3
a85 3
				"Background is %d %d %d\n",
				bgpixel.red, bgpixel.green, bgpixel.blue
				);
d88 1
a88 2
	if( ! (get_flags & NO_COLORMAP) )
		{
d91 2
a92 2
					"Loading saved color map from file\n"
					);
d97 10
a106 1
		}
d108 5
a112 5
	/* Fill buffer with background.					*/
	if( (get_flags & NO_BOX_SAVE) )
		{	register int	i;
			register Pixel	*to;
			register Pixel	*from;
d117 1
a117 1
		}
d119 4
a122 3
	{	register int	by = fb_size;
	for( scan_ln = fb_size-1; scan_ln >= 0; scan_ln-- )
		{	static int	touched = 1;
d124 6
a129 13
		if( touched && (get_flags & NO_BOX_SAVE) )
			fill_Buffer(	(char *) scanbuf,
					(char *) bg_scan,
					scan_bytes,
					1
					);
		if( (touched = rle_decode_ln( fp, scanbuf )) == -1 )
			return	1;
		for( pix = 0; pix < fb_size; pix++ )
			{
			(void) putchar( scanbuf[pix].red );
			(void) putchar( scanbuf[pix].green );
			(void) putchar( scanbuf[pix].blue );
d131 15
d149 1
a149 1
	}
a150 22
/*	f i l l _ B u f f e r ( )
	Fill cluster buffer from scanline (as fast as possible).
 */
fill_Buffer( buff_p, scan_p, scan_bytes, scan_lines )
register char	*buff_p;	/* On VAX, known to be R11 */
register char	*scan_p;	/* VAX R10 */
register int	scan_bytes;	/* VAX R9 */
register int	scan_lines;
	{	register int	i;
	for( i = 0; i < scan_lines; ++i )
		{
#if ! defined( vax ) || defined( lint )
		(void) strncpy( buff_p, scan_p, scan_bytes );
#else
		/* Pardon the efficiency.  movc3 len,src,dest */
		asm("	movc3	r9,(r10),(r11)");
#endif
		buff_p += scan_bytes;
		}
	return;
	}

d239 1
a239 1
	{	register u_char	*cp;
d246 1
a246 1
	"%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n",
d270 1
a270 1
	"%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n",
d294 1
a294 1
	"%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n",
d316 20
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d58 1
a58 1
	if( ! pars_Argv( argc, argv ) )
@
