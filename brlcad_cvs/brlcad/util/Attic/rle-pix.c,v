head	11.9;
access;
symbols
	ansi-20040405-merged:11.6.2.2
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.6
	premerge-autoconf:11.6
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.6
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.1
	offsite-5-3-pre:11.3
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.21.14.58.04;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.51;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.09.06;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	2002.08.15.20.56.18;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.10.20.57.08;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	2000.09.01.03.24.06;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.23.19.05.11;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.13.27;	author mike;	state Rel4_4;
branches;
next	10.5;

10.5
date	94.12.30.01.24.38;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.11.14.23.17.00;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	94.08.23.15.06.10;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	92.03.16.21.54.20;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.49.22;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	91.09.05.20.05.26;	author butler;	state Exp;
branches;
next	9.2;

9.2
date	91.01.12.08.55.31;	author butler;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.11.39;	author mike;	state Rel3_5;
branches;
next	8.2;

8.2
date	89.02.19.16.51.30;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.44.30;	author mike;	state Rel3_0;
branches;
next	1.2;

1.2
date	88.09.30.10.23.10;	author stay;	state Exp;
branches;
next	1.1;

1.1
date	88.09.20.04.31.56;	author mike;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.02.45;	author morrison;	state Exp;
branches;
next	11.6.2.2;

11.6.2.2
date	2004.04.04.20.46.47;	author morrison;	state Exp;
branches;
next	;


desc
@Convert Utah Raster Toolkit RLE file to a PIX file
@


11.9
log
@moved to src/util/
@
text
@/*
 *			R L E - P I X . C
 *
 *  Decode a Utah Raster Toolkit RLE image, and output as a pix(5) file.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.8 2004/05/10 15:30:51 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "externs.h"			/* For getopt and malloc and getenv */
#include "fb.h"
#include "rle.h"

static FILE	*infp;
static char	*infile;
static FILE	*outfp;

static int	background[3];
static int	override_background;

unsigned char	*rows[4];		/* Character pointers for rle_getrow */
	
static RGBpixel	*scan_buf;		/* single scanline buffer */
static RGBpixel	*bg_buf;		/* single scanline of background */
static ColorMap	cmap;

static int	screen_width = 0;
static int	screen_height = 0;

static int	crunch;
static int	r_debug;
static int	hflag;			/* print header only */

static char	usage[] = "\
Usage: rle-pix [-c -d -h -H] [-C r/g/b]\n\
	[-s|S squareoutsize] [-w|W out_width] [-n|N out_height]\n\
	[file.rle [file.pix]]\n\
";

/*
 *			G E T _ A R G S
 */
static int
get_args(int argc, register char **argv)
{
	register int	c;

	while( (c = getopt( argc, argv, "cdhHs:S:w:W:n:N:C:" )) != EOF )  {
		switch( c )  {
		case 'd':
			r_debug = 1;
			break;
		case 'c':
			crunch = 1;
			break;
		case 'H':
			hflag = 1;
			break;
		case 'h':
			/* high-res */
			screen_height = screen_width = 1024;
			break;
		case 'S':
		case 's':
			/* square screen size */
			screen_height = screen_width = atoi(optarg);
			break;
		case 'W':
		case 'w':
			screen_width = atoi(optarg);
			break;
		case 'N':
		case 'n':
			screen_height = atoi(optarg);
			break;
		case 'C':
			{
				register char *cp = optarg;
				register int *conp = background;

				/* premature null => atoi gives zeros */
				for( c=0; c < 3; c++ )  {
					*conp++ = atoi(cp);
					while( *cp && *cp++ != '/' ) ;
				}
				override_background = 1;
			}
			break;
		default:
		case '?':
			return	0;
		}
	}
	if( argv[optind] != NULL )  {
		if( (infp = fopen( (infile=argv[optind]), "r" )) == NULL )  {
			perror(infile);
			return	0;
		}
		optind++;
	} else {
		infile = "-";
	}
	if( argv[optind] != NULL )  {
		if( access( argv[optind], 0 ) == 0 )  {
			(void) fprintf( stderr,
				"rle-pix: \"%s\" already exists.\n",
				argv[optind] );
			exit( 1 );
		}
		if( (outfp = fopen( argv[optind], "w" )) == NULL )  {
			perror(argv[optind]);
			return	0;
		}
	}
	if( argc > ++optind )
		(void) fprintf( stderr, "rle-pix:  excess arguments ignored\n" );

	if( isatty(fileno(infp)) )
		return(0);
	if( !hflag && isatty(fileno(outfp)) )
		return(0);
	return(1);				/* OK */
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register int i;
	int	file_width;		/* unclipped width of rectangle */
	int	file_skiplen;		/* # of pixels to skip on l.h.s. */
	int	screen_xbase;		/* screen X of l.h.s. of rectangle */
	int	screen_xlen;		/* clipped len of rectangle */
	int	ncolors;

	infp = stdin;
	outfp = stdout;
	if( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	rle_dflt_hdr.rle_file = infp;
	if( rle_get_setup( &rle_dflt_hdr ) < 0 )  {
		fprintf(stderr, "rle-pix: Error reading setup information\n");
		exit(1);
	}

	if (r_debug)  {
		fprintf( stderr,"Image bounds\n\tmin %d %d\n\tmax %d %d\n",
			rle_dflt_hdr.xmin, rle_dflt_hdr.ymin,
			rle_dflt_hdr.xmax, rle_dflt_hdr.ymax );
		fprintf(stderr, "%d color channels\n", rle_dflt_hdr.ncolors);
		fprintf(stderr,"%d color map channels\n", rle_dflt_hdr.ncmap);
		if ( rle_dflt_hdr.alpha )
			fprintf( stderr, "Alpha Channel present in input, ignored.\n");
		for( i=0; i < rle_dflt_hdr.ncolors; i++ )
			fprintf(stderr,"Background channel %d = %d\n",
				i, rle_dflt_hdr.bg_color[i] );
		rle_debug(1);
	}

	if( rle_dflt_hdr.ncmap == 0 )
		crunch = 0;

	/* Only interested in R, G, & B */
	RLE_CLR_BIT(rle_dflt_hdr, RLE_ALPHA);
	for (i = 3; i < rle_dflt_hdr.ncolors; i++)
		RLE_CLR_BIT(rle_dflt_hdr, i);
	ncolors = rle_dflt_hdr.ncolors > 3 ? 3 : rle_dflt_hdr.ncolors;

	/* Optional background color override */
	if( override_background )  {
		for( i=0; i<ncolors; i++ )
			rle_dflt_hdr.bg_color[i] = background[i];
	}

	file_width = rle_dflt_hdr.xmax - rle_dflt_hdr.xmin + 1;

	/* Default screen (output) size tracks input rectangle upper right corner */
	if( screen_width == 0 )  {
	    	screen_width = rle_dflt_hdr.xmax + 1;
	}
	if( screen_height == 0 )  {
	    	screen_height = rle_dflt_hdr.ymax + 1;
	}

	/* Report screen (output) size given image size & other options */
	if( hflag )  {
		printf("-w%d -n%d\n",
			screen_width, screen_height );
		exit(0);
	}

	/* Discard any scanlines which exceed screen height */
	if( rle_dflt_hdr.ymax > screen_height-1 )
		rle_dflt_hdr.ymax = screen_height-1;

	/* Clip left edge */
	screen_xbase = rle_dflt_hdr.xmin;
	screen_xlen = screen_width;
	file_skiplen = 0;
	if( screen_xbase < 0 )  {
		file_skiplen = -screen_xbase;
		screen_xbase = 0;
		screen_xlen -= file_skiplen;
	}
	/* Clip right edge */
	if( screen_xbase + screen_xlen > screen_width )
		screen_xlen = screen_width - screen_xbase;

	if( screen_xlen <= 0 ||
	    rle_dflt_hdr.ymin > screen_height ||
	    rle_dflt_hdr.ymax < 0 )  {
	    	fprintf(stderr,
		"rle-pix:  Warning:  RLE image rectangle entirely off screen\n");
		goto done;
	}

	/* NOTE:  This code can't do repositioning very well.
	 * background flooding on the edges is needed, at a minimum.
 	 */

	scan_buf = (RGBpixel *)malloc( sizeof(RGBpixel) * screen_width );
	bg_buf = (RGBpixel *)malloc( sizeof(RGBpixel) * screen_width );

	/* Fill in background buffer */
	if (!rle_dflt_hdr.bg_color) {
		(void)bzero((char *)bg_buf, sizeof(RGBpixel) * screen_width);
	} else {
		for( i=0; i<screen_xlen; i++ )  {
			bg_buf[i][0] = rle_dflt_hdr.bg_color[0];
			bg_buf[i][1] = rle_dflt_hdr.bg_color[1];
			bg_buf[i][2] = rle_dflt_hdr.bg_color[2];
		}
	}

	for( i=0; i < ncolors; i++ )
		rows[i] = (unsigned char *)malloc((size_t)file_width);
	for( ; i < 3; i++ )
		rows[i] = rows[0];	/* handle monochrome images */

	/*
	 *  Import Utah color map, converting to libfb format.
	 *  Check for old format color maps, where high 8 bits
	 *  were zero, and correct them.
	 *  XXX need to handle < 3 channels of color map, by replication.
	 */
	if( crunch && rle_dflt_hdr.ncmap > 0 )  {
		register int maplen = (1 << rle_dflt_hdr.cmaplen);
		register int all = 0;
		for( i=0; i<256; i++ )  {
			cmap.cm_red[i] = rle_dflt_hdr.cmap[i];
			cmap.cm_green[i] = rle_dflt_hdr.cmap[i+maplen];
			cmap.cm_blue[i] = rle_dflt_hdr.cmap[i+2*maplen];
			all |= cmap.cm_red[i] | cmap.cm_green[i] |
				cmap.cm_blue[i];
		}
		if( (all & 0xFF00) == 0 && (all & 0x00FF) != 0 )  {
			/*  This is an old (Edition 2) color map.
			 *  Correct by shifting it left 8 bits.
			 */
			for( i=0; i<256; i++ )  {
				cmap.cm_red[i] <<= 8;
				cmap.cm_green[i] <<= 8;
				cmap.cm_blue[i] <<= 8;
			}
			fprintf(stderr,
				"rle-pix: correcting for old style colormap\n");
		}
	}

	/* Handle any lines below zero in y.  Decode and discard. */
	for( i = rle_dflt_hdr.ymin; i < 0; i++ )
		rle_getrow( &rle_dflt_hdr, rows );

	/* Background-fill any lines above 0, below ymin */
	for( i=0; i < rle_dflt_hdr.ymin; i++ )
		fwrite( (char *)bg_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );

	for( ; i <= rle_dflt_hdr.ymax; i++)  {
		register unsigned char	*pp = (unsigned char *)scan_buf;
		register rle_pixel	*rp = &(rows[0][file_skiplen]);
		register rle_pixel	*gp = &(rows[1][file_skiplen]);
		register rle_pixel	*bp = &(rows[2][file_skiplen]);
		register int		j;

		rle_getrow(&rle_dflt_hdr, rows );

		/* Grumble, convert from Utah layout */
		if( !crunch )  {
			for( j = 0; j < screen_xlen; j++)  {
				*pp++ = *rp++;
				*pp++ = *gp++;
				*pp++ = *bp++;
			}
		} else {
			for( j = 0; j < screen_xlen; j++)  {
				*pp++ = cmap.cm_red[*rp++]>>8;
				*pp++ = cmap.cm_green[*gp++]>>8;
				*pp++ = cmap.cm_blue[*bp++]>>8;
			}
		}
		fwrite( (char *)scan_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );
	}

	/* Background-fill any lines above ymax, below screen_height */
	for( ; i < screen_height; i++ )
		fwrite( (char *)bg_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );
done:
	fclose( outfp );
	exit(0);
}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.7 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.7
log
@merge of ansi-6-0-branch into head
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d21 5
a25 1
#include "conf.h"
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.4 2001/08/10 20:57:08 butler Exp $ (BRL)";
d65 1
a65 2
get_args( argc, argv )
register char	**argv;
d150 1
a150 3
main( argc, argv)
int argc;
char ** argv;
d262 1
a262 1
		rows[i] = (unsigned char *)malloc(file_width);
d302 1
a302 1
		fwrite( (char *)bg_buf, sizeof(RGBpixel), screen_xlen, outfp );
d327 1
a327 1
		fwrite( (char *)scan_buf, sizeof(RGBpixel), screen_xlen, outfp );
d332 1
a332 1
		fwrite( (char *)bg_buf, sizeof(RGBpixel), screen_xlen, outfp );
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.6 2002/08/20 17:09:06 jra Exp $ (BRL)";
d65 2
a66 1
get_args(int argc, register char **argv)
d151 3
a153 1
main(int argc, char **argv)
@


11.6.2.2
log
@quell warnings
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.6.2.1 2002/09/19 18:02:45 morrison Exp $ (BRL)";
d262 1
a262 1
		rows[i] = (unsigned char *)malloc((size_t)file_width);
d302 1
a302 1
		fwrite( (char *)bg_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );
d327 1
a327 1
		fwrite( (char *)scan_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );
d332 1
a332 1
		fwrite( (char *)bg_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d65 2
a66 1
get_args(int argc, register char **argv)
d151 3
a153 1
main(int argc, char **argv)
@


11.4
log
@Misc compiler warnings eliminated
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.3 2000/09/01 03:24:06 mike Exp $ (BRL)";
d65 1
a65 2
get_args( argc, argv )
register char	**argv;
d150 1
a150 3
main( argc, argv)
int argc;
char ** argv;
@


11.3
log
@
Lint fix
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.2 2000/08/23 19:05:11 mike Exp $ (BRL)";
d24 5
@


11.2
log
@
const RCSid
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.1 1995/01/04 10:13:27 mike Rel4_4 $ (BRL)";
d145 1
@


11.1
log
@Release_4.4
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Id: rle-pix.c,v 10.5 94/12/30 01:24:38 mike Exp $ (BRL)";
@


10.5
log
@DEC Alpha
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Id: rle-pix.c,v 10.4 94/11/14 23:17:00 mike Exp Locker: mike $ (BRL)";
@


10.4
log
@Irix 6
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Id: rle-pix.c,v 10.3 94/08/23 15:06:10 gdurf Exp Locker: mike $ (BRL)";
d249 1
a249 1
		(void)bzero(bg_buf, sizeof(RGBpixel) * screen_width);
@


10.3
log
@Factored ifdefs
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Id: rle-pix.c,v 10.2 1992/03/16 21:54:20 mike Exp gdurf $ (BRL)";
a148 1
	FBIO	*fbp;
@


10.2
log
@IRIX 4.0.1
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Id: rle-pix.c,v 10.1 91/10/12 06:49:22 mike Rel4_0 Locker: mike $ (BRL)";
d21 2
d24 3
a28 6

extern int	optind;
extern char	*optarg;
extern char	*getenv();

extern char	*malloc();
@


10.1
log
@Release_4.0
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Id: /f/cad/util/RCS/rle-pix.c,v 1.1 91/01/03 23:11:47 butler Exp $ (BRL)";
d31 1
a31 1
static FILE	*infp = stdin;
d33 1
a33 1
static FILE	*outfp = stdout;
d158 2
@


9.3
log
@If there was no background color, the rle_startup() routine made the
background color pointer nil.  When rle-pix referenced this, it blew out with
an address violation.  We now check to see if there is a valid background
color first.
@
text
@@


9.2
log
@changes in names to work with Rel 3 of URT library
@
text
@d248 8
a255 4
	for( i=0; i<screen_xlen; i++ )  {
		bg_buf[i][0] = rle_dflt_hdr.bg_color[0];
		bg_buf[i][1] = rle_dflt_hdr.bg_color[1];
		bg_buf[i][2] = rle_dflt_hdr.bg_color[2];
@


9.1
log
@Release_3.5
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 8.2 89/02/19 16:51:30 mike Exp $ (BRL)";
d23 1
a23 1
#include "svfb_global.h"
d163 2
a164 2
	sv_globals.svfb_fd = infp;
	if( rle_get_setup( &sv_globals ) < 0 )  {
d171 5
a175 5
			sv_globals.sv_xmin, sv_globals.sv_ymin,
			sv_globals.sv_xmax, sv_globals.sv_ymax );
		fprintf(stderr, "%d color channels\n", sv_globals.sv_ncolors);
		fprintf(stderr,"%d color map channels\n", sv_globals.sv_ncmap);
		if ( sv_globals.sv_alpha )
d177 1
a177 1
		for( i=0; i < sv_globals.sv_ncolors; i++ )
d179 1
a179 1
				i, sv_globals.sv_bg_color[i] );
d183 1
a183 1
	if( sv_globals.sv_ncmap == 0 )
d187 4
a190 4
	SV_CLR_BIT(sv_globals, SV_ALPHA);
	for (i = 3; i < sv_globals.sv_ncolors; i++)
		SV_CLR_BIT(sv_globals, i);
	ncolors = sv_globals.sv_ncolors > 3 ? 3 : sv_globals.sv_ncolors;
d195 1
a195 1
			sv_globals.sv_bg_color[i] = background[i];
d198 1
a198 1
	file_width = sv_globals.sv_xmax - sv_globals.sv_xmin + 1;
d202 1
a202 1
	    	screen_width = sv_globals.sv_xmax + 1;
d205 1
a205 1
	    	screen_height = sv_globals.sv_ymax + 1;
d216 2
a217 2
	if( sv_globals.sv_ymax > screen_height-1 )
		sv_globals.sv_ymax = screen_height-1;
d220 1
a220 1
	screen_xbase = sv_globals.sv_xmin;
d233 2
a234 2
	    sv_globals.sv_ymin > screen_height ||
	    sv_globals.sv_ymax < 0 )  {
d249 3
a251 3
		bg_buf[i][0] = sv_globals.sv_bg_color[0];
		bg_buf[i][1] = sv_globals.sv_bg_color[1];
		bg_buf[i][2] = sv_globals.sv_bg_color[2];
d265 2
a266 2
	if( crunch && sv_globals.sv_ncmap > 0 )  {
		register int maplen = (1 << sv_globals.sv_cmaplen);
d269 3
a271 3
			cmap.cm_red[i] = sv_globals.sv_cmap[i];
			cmap.cm_green[i] = sv_globals.sv_cmap[i+maplen];
			cmap.cm_blue[i] = sv_globals.sv_cmap[i+2*maplen];
d290 2
a291 2
	for( i = sv_globals.sv_ymin; i < 0; i++ )
		rle_getrow( &sv_globals, rows );
d294 1
a294 1
	for( i=0; i < sv_globals.sv_ymin; i++ )
d297 1
a297 1
	for( ; i <= sv_globals.sv_ymax; i++)  {
d304 1
a304 1
		rle_getrow(&sv_globals, rows );
@


8.2
log
@added -H flag, and some extra documentation
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 8.1 88/10/05 00:44:30 mike Locked $ (BRL)";
@


8.1
log
@Release_3.0
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 1.2 88/09/30 10:23:10 stay Exp $ (BRL)";
d49 1
d52 2
a53 1
Usage: rle-pix [-c -d -h] [-C r/g/b]\n\
d66 1
a66 1
	while( (c = getopt( argc, argv, "cdhs:S:w:W:n:N:C:" )) != EOF )  {
d74 3
d136 5
a140 3
	if( isatty(fileno(infp)) || isatty(fileno(outfp)) )
		return 0;
	return	1;
d206 7
@


1.2
log
@Problem with subscripting the background buffer fixed
so it won't core dump...
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Header: rle-pix.c,v 1.1 88/09/20 04:31:56 stay Locked $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Header: rle-fb.c,v 1.8 88/09/20 02:14:35 mike Exp $ (BRL)";
d234 1
a234 1
	for( i=0; i<screen_xlen*3; i+=3 )  {
@
