head	11.11;
access;
symbols
	ansi-20040405-merged:11.8.2.2
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.8.10.2
	premerge-autoconf:11.9
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.8.4.1
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.3
	offsite-5-3-pre:11.5
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.3
	rel-5-0-beta:11.3
	rel-4-5:11.3
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:5.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.14.57.56;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2004.02.02.17.39.49;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.09.03;	author jra;	state Exp;
branches
	11.8.2.1
	11.8.4.1
	11.8.10.1;
next	11.7;

11.7
date	2002.08.15.20.56.15;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2001.08.10.20.57.07;	author butler;	state Exp;
branches;
next	11.5;

11.5
date	2000.09.01.03.23.59;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.08.23.19.04.55;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.08.30.12.47.08;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	96.08.30.01.02.35;	author butler;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.12.57;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	92.10.21.01.08.57;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.48.52;	author mike;	state Rel4_0;
branches;
next	9.1;

9.1
date	89.05.19.06.10.46;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.43.10;	author mike;	state Rel3_0;
branches;
next	7.4;

7.4
date	88.06.23.03.28.38;	author phil;	state Exp;
branches;
next	7.3;

7.3
date	88.06.23.03.17.14;	author phil;	state Exp;
branches;
next	7.2;

7.2
date	88.05.16.00.06.54;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.09.02;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.12.25;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.43.14;	author mike;	state Rel;
branches;
next	4.3;

4.3
date	87.05.28.02.25.00;	author phil;	state Exp;
branches;
next	4.2;

4.2
date	87.02.13.00.45.44;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.13.48;	author mike;	state Rel1;
branches;
next	1.2;

1.2
date	86.10.03.07.15.17;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.09.24.01.19.19;	author phil;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.02.42;	author morrison;	state Exp;
branches;
next	11.8.2.2;

11.8.2.2
date	2004.03.17.21.23.32;	author morrison;	state Exp;
branches;
next	;

11.8.4.1
date	2004.03.11.23.52.34;	author morrison;	state Exp;
branches;
next	;

11.8.10.1
date	2004.02.12.19.43.11;	author erikg;	state Exp;
branches;
next	11.8.10.2;

11.8.10.2
date	2004.03.15.14.08.19;	author erikg;	state Exp;
branches;
next	;


desc
@Rotate, Reverse, or Invert a .pix file.
@


11.11
log
@moved to src/util/
@
text
@/*
 *			P I X R O T . C
 *
 *  Rotate, Invert, and/or Reverse the pixels in a RGB (.pix) file.
 *
 *  The rotation logic was worked out for data ordered with
 *  "upper left" first.  It is being used on files in first
 *  quadrant order (lower left first).  Thus the "forward",
 *  "backward" flags are reversed.
 *
 *  This is a generalization of bwrot and can in fact handle
 *  "pixels" of any size.  Thus this routine could be used
 *  to say, rotate a matix of floating point values, etc.
 *
 *  Author -
 *	Phillip Dykstra
 *	24 Sep 1986
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/pixrot.c,v 11.10 2004/04/05 05:46:02 morrison Exp $ (BRL)";
#endif

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

extern int	getopt(int, char *const *, const char *);
extern char	*optarg;
extern int	optind;

/* 4 times bigger than typ. screen */
/*#define	MAXBUFBYTES	(1280*1024*3*4) */
#define	MAXBUFBYTES	(12288*16384*2)
int	buflines, scanbytes;
int	firsty = -1;	/* first "y" scanline in buffer */
int	lasty = -1;	/* last "y" scanline in buffer */
unsigned char *buffer;
unsigned char *bp;
unsigned char *obuf;
unsigned char *obp;

int	nxin = 512;
int	nyin = 512;
int	yin, xout, yout;
int	plus90, minus90, reverse, invert;
int	pixbytes = 3;

static	char usage[] = "\
Usage: pixrot [-f -b -r -i -#bytes] [-s squaresize]\n\
	[-w width] [-n height] [file.pix] > file.pix\n";

void	fill_buffer(void);
void    reverse_buffer(void);

static char	*file_name;
FILE	*ifp, *ofp;

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = getopt( argc, argv, "fbrih#:s:w:n:S:W:N:" )) != EOF )  {
		switch( c )  {
		case 'f':
			minus90++;
			break;
		case 'b':
			plus90++;
			break;
		case 'r':
			reverse++;
			break;
		case 'i':
			invert++;
			break;
		case '#':
			pixbytes = atoi(optarg);
			break;
		case 'h':
			/* high-res */
			nxin = nyin = 1024;
			break;
		case 'S':
		case 's':
			/* square size */
			nxin = nyin = atoi(optarg);
			break;
		case 'W':
		case 'w':
			nxin = atoi(optarg);
			break;
		case 'N':
		case 'n':
			nyin = atoi(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	/* XXX - backward compatability hack */
	if( optind+2 == argc ) {
		nxin = atoi(argv[optind++]);
		nyin = atoi(argv[optind++]);
	}
	if( optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "-";
		ifp = stdin;
	} else {
		file_name = argv[optind];
		if( (ifp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"pixrot: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
	}

	if ( argc > ++optind )
		(void)fprintf( stderr, "pixrot: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	int	x, y, j;
	long	outbyte, outplace;

	if ( !get_args( argc, argv ) || isatty(fileno(stdout)) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	ofp = stdout;

	scanbytes = nxin * pixbytes;
	buflines = MAXBUFBYTES / scanbytes;
	if( buflines <= 0 ) {
		fprintf( stderr, "pixrot: I'm not compiled to do a scanline that long!\n" );
		exit( 2 );
	}
	if( buflines > nyin ) buflines = nyin;
	buffer = malloc( buflines * scanbytes );
	obuf = (nyin > nxin) ? malloc( nyin * pixbytes ) : malloc( nxin * pixbytes );
	if( buffer == (unsigned char *)0 || obuf == (unsigned char *)0 ) {
		fprintf( stderr, "pixrot: malloc failed\n" );
		exit( 3 );
	}

	/*
	 * Clear our "file pointer."  We need to maintain this
	 * In order to tell if seeking is required.  ftell() always
	 * fails on pipes, so we can't use it.
	 */
	outplace = 0;

	yin = 0;
	while( yin < nyin ) {
		/* Fill buffer */
		fill_buffer();
		if( reverse )
			reverse_buffer();
		if( plus90 ) {
			for( x = 0; x < nxin; x++ ) {
				obp = obuf;
				bp = &buffer[ (lasty-firsty)*scanbytes + x*pixbytes ];
				for( y = lasty; y >= yin; y-- ) { /* firsty? */
					for( j = 0; j < pixbytes; j++ )
						*obp++ = *bp++;
					bp = bp - scanbytes - pixbytes;
				}
				yout = x;
				xout = (nyin - 1) - lasty;
				outbyte = ((yout * nyin) + xout) * pixbytes;
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "pixrot: Can't seek on output, yet I need to!\n" );
						exit( 3 );
					}
					outplace = outbyte;
				}
				fwrite( obuf, pixbytes, buflines, ofp );
				outplace += (pixbytes * buflines);
			}
		} else if( minus90 ) {
			for( x = nxin-1; x >= 0; x-- ) {
				obp = obuf;
				bp = &buffer[ x*pixbytes ];
				for( y = firsty; y <= lasty; y++ ) {
					for( j = 0; j < pixbytes; j++ )
						*obp++ = *bp++;
					bp = bp + scanbytes - pixbytes;
				}
				yout = (nxin - 1) - x;
				xout = yin;
				outbyte = ((yout * nyin) + xout) * pixbytes;
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "pixrot: Can't seek on output, yet I need to!\n" );
						exit( 3 );
					}
					outplace = outbyte;
				}
				fwrite( obuf, pixbytes, buflines, ofp );
				outplace += (pixbytes * buflines);
			}
		} else if( invert ) {
			for( y = lasty; y >= firsty; y-- ) {
				yout = (nyin - 1) - y;
				outbyte = yout * scanbytes; 
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "pixrot: Can't seek on output, yet I need to!\n" );
						exit( 3 );
					}
					outplace = outbyte;
				}
				fwrite( &buffer[(y-firsty)*scanbytes], 1, scanbytes, ofp );
				outplace += scanbytes;
			}
		} else {
			/* Reverse only */
			for( y = 0; y < buflines; y++ ) {
				fwrite( &buffer[y*scanbytes], 1, scanbytes, ofp );
			}
		}

		yin += buflines;
	}
	return 0;
}

void
fill_buffer(void)
{
	buflines = fread( buffer, scanbytes, buflines, ifp );

	firsty = lasty + 1;
	lasty = firsty + (buflines - 1);
}

void
reverse_buffer(void)
{
	int	i, j;
	unsigned char *p1, *p2, temp;

	for( i = 0; i < buflines; i++ ) {
		p1 = &buffer[ i * scanbytes ];
		p2 = p1 + (scanbytes - pixbytes);
		while( p1 < p2 ) {
			for( j = 0; j < pixbytes; j++ ) {
				temp = *p1;
				*p1++ = *p2;
				*p2++ = temp;
			}
			p2 -= 2*pixbytes;
		}
	}
}
@


11.10
log
@merge of ansi-6-0-branch into head
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.9
log
@update copyright to include span through 2003
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixrot.c,v 11.8 2002/08/20 17:09:03 jra Exp $ (BRL)";
d36 1
a36 1
extern int	getopt();
d61 2
a62 1
void	fill_buffer(), reverse_buffer();
d68 1
a68 2
get_args( argc, argv )
register char **argv;
d139 1
a139 2
main( argc, argv )
int argc; char **argv;
d249 1
a249 1
fill_buffer()
d258 1
a258 1
reverse_buffer()
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d25 1
a25 1
 *	This software is Copyright (C) 1986 by the United States Army.
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixrot.c,v 11.6 2001/08/10 20:57:07 butler Exp $ (BRL)";
@


11.8.4.1
log
@sync to HEAD...
@
text
@d25 1
a25 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/pixrot.c,v 11.9 2004/02/02 17:39:49 morrison Exp $ (BRL)";
@


11.8.10.1
log
@merge from HEAD
@
text
@d25 1
a25 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixrot.c,v 11.9 2004/02/02 17:39:49 morrison Exp $ (BRL)";
@


11.8.10.2
log
@merge from head
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixrot.c,v 11.8.10.1 2004/02/12 19:43:11 erikg Exp $ (BRL)";
@


11.8.2.1
log
@Initial ANSIfication
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixrot.c,v 11.8 2002/08/20 17:09:03 jra Exp $ (BRL)";
d36 1
a36 1
extern int	getopt(int, char *const *, const char *);
d61 1
a61 2
void	fill_buffer(void);
void    reverse_buffer(void);
d67 2
a68 1
get_args(int argc, register char **argv)
d139 2
a140 1
main(int argc, char **argv)
d250 1
a250 1
fill_buffer(void)
d259 1
a259 1
reverse_buffer(void)
@


11.8.2.2
log
@sync branch with HEAD
@
text
@d25 1
a25 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d36 1
a36 1
extern int	getopt(int, char *const *, const char *);
d61 1
a61 2
void	fill_buffer(void);
void    reverse_buffer(void);
d67 2
a68 1
get_args(int argc, register char **argv)
d139 2
a140 1
main(int argc, char **argv)
d250 1
a250 1
fill_buffer(void)
d259 1
a259 1
reverse_buffer(void)
@


11.6
log
@Misc compiler warnings eliminated
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixrot.c,v 11.5 2000/09/01 03:23:59 mike Exp $ (BRL)";
d36 1
a36 1
extern int	getopt();
d61 2
a62 1
void	fill_buffer(), reverse_buffer();
d68 1
a68 2
get_args( argc, argv )
register char **argv;
d139 1
a139 2
main( argc, argv )
int argc; char **argv;
d249 1
a249 1
fill_buffer()
d258 1
a258 1
reverse_buffer()
@


11.5
log
@
Lint fix
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixrot.c,v 11.4 2000/08/23 19:04:55 mike Exp $ (BRL)";
d33 2
a38 1
extern unsigned char *malloc();
d66 1
d246 1
@


11.4
log
@
const RCSid
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixrot.c,v 11.3 1996/08/30 12:47:08 jra Exp $ (BRL)";
d136 1
@


11.3
log
@Minor mod for Irix 6.2.
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixrot.c,v 11.2 1996/08/30 01:02:35 butler Exp jra $ (BRL)";
@


11.2
log
@needed to make MAXBUFBYTES much bigger
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixrot.c,v 11.1 1995/01/04 10:12:57 mike Rel4_4 butler $ (BRL)";
d39 2
a40 1
/*#define	MAXBUFBYTES	(1280*1024*3*4)	/* 4 times bigger than typ. screen */
@


11.1
log
@Release_4.4
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixrot.c,v 10.2 92/10/21 01:08:57 mike Exp $ (BRL)";
d39 2
a40 2
#define	MAXBUFBYTES	(1280*1024*3*4)	/* 4 times bigger than typ. screen */

@


10.2
log
@Increased buffer size
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixrot.c,v 10.1 91/10/12 06:48:52 mike Rel4_0 Locker: mike $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixrot.c,v 9.1 89/05/19 06:10:46 mike Rel3_5 $ (BRL)";
d39 1
a39 1
#define	MAXBUFBYTES	(1280*1024*3)
@


9.1
log
@Release_3.5
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 8.1 88/10/05 00:43:10 mike Rel3_0 $ (BRL)";
@


8.1
log
@Release_3.0
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 7.4 88/06/23 03:28:38 phil Exp $ (BRL)";
@


7.4
log
@more generous buffer size (4MB now)
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 7.3 88/06/23 03:17:14 phil Locked $ (BRL)";
@


7.3
log
@modernized argument format (still accepts old)
fixed buffering bug!
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 7.2 88/05/16 00:06:54 phil Locked $ (BRL)";
d39 1
a39 1
#define	MAXBUFBYTES	(1024*1024)
@


7.2
log
@lint fixes
@
text
@d2 1
a2 1
 *		P I X R O T . C
d4 1
a4 1
 * Rotate, Invert, and/or Reverse the pixels in a RGB (.pix) file.
d6 1
a6 1
 * The rotation logic was worked out for data ordered with
d11 1
a11 1
 * This is a generalization of bwrot and can in fact handle
d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 7.1 87/11/03 00:09:02 mike Locked $ (BRL)";
d34 4
a37 1
unsigned char *malloc();
d49 3
a51 1
int	xin, yin, xout, yout, nxin, nyin;
d55 4
d61 1
a61 2
static	char *Usage = "usage: pixrot [-f -b -r -i -#bytes] nx ny < file.pix > file.pix\n";

d64 2
a65 2
main( argc, argv )
int argc; char **argv;
d67 1
a67 2
	int	x, y, j;
	int	outbyte, outplace;
d69 2
a70 6
	/* Check for flags */
	while( argc > 1 && argv[1][0] == '-' )  {
		switch( argv[1][1] )  {
		case '#':
			pixbytes = atoi( &argv[1][2] );
			break;
d83 23
a105 4
		default:
			fprintf( stderr, "pixrot: unrecognized flag '%s'\n", argv[1] );
			fprintf( stderr, Usage );
			exit( 1 );
a106 2
		argc--;
		argv++;
d109 4
a112 3
	if( argc != 3 ) {
		fprintf( stderr, Usage );
		exit( 2 );
d114 14
d129 2
a130 2
	nxin = atoi( argv[1] );
	nyin = atoi( argv[2] );
d132 14
a145 1
	ifp = stdin;
d152 1
a152 1
		exit( 1 );
d156 5
a160 1
	obuf = malloc( nyin * pixbytes );
d188 1
a188 1
					if( fseek( ofp, outbyte, 0L ) < 0 ) {
d210 1
a210 1
					if( fseek( ofp, outbyte, 0L ) < 0 ) {
d224 1
a224 1
					if( fseek( ofp, outbyte, 0L ) < 0 ) {
d247 2
a250 2

	fread( buffer, 1, scanbytes * buflines, ifp );
@


7.1
log
@Release 2.3
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 6.1 87/07/11 08:12:25 mike Rel $ (BRL)";
d50 2
d192 1
d201 1
@


6.1
log
@Release 2.0
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 5.1 87/06/24 22:43:14 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 4.3 87/05/28 02:25:00 phil Exp $ (BRL)";
@


4.3
log
@fixed uninitialized flag bug
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 4.2 87/02/13 00:45:44 phil Locked $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 4.1 86/12/29 03:13:48 mike Rel1 $ (BRL)";
d47 1
a58 1
	int	plus90, minus90, reverse, invert;
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 1.2 86/10/03 07:15:17 mike Exp $ (BRL)";
@


1.2
log
@Minor argc bug
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: pixrot.c,v 1.1 86/09/24 01:19:19 phil Exp $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d61 1
a61 1
	while( argv[1][0] == '-' )  {
@
