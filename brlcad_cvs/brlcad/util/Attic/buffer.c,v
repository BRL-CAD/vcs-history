head	11.8;
access;
symbols
	ansi-20040405-merged:11.6.2.1
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.6
	premerge-autoconf:11.6
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.6
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.1
	offsite-5-3-pre:11.3
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1;
locks; strict;
comment	@ * @;


11.8
date	2004.05.21.14.57.32;	author morrison;	state dead;
branches;
next	11.7;

11.7
date	2004.04.05.05.46.01;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.08.54;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	2002.08.15.20.56.06;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.10.11.23.14.04;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	2000.09.01.03.23.44;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.23.19.04.12;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.11.28;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.47.44;	author mike;	state Rel4_0;
branches;
next	9.1;

9.1
date	89.05.19.06.07.17;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.40.06;	author mike;	state Rel3_0;
branches;
next	1.1;

1.1
date	88.08.13.21.20.48;	author mike;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.02.34;	author morrison;	state Exp;
branches;
next	;


desc
@Program to buffer all of stdin, and then regurgitate it on stdout.
@


11.8
log
@moved to src/util/
@
text
@/*
 *			B U F F E R . C
 *
 *  This program is intended to be use as part of a complex pipeline.
 *  It serves somewhat the same purpose as the Prolog "cut" operator.
 *  Data from stdin is read and buffered until EOF is detected, and then
 *  all the buffered data is written to stdout.  An arbitrary amount of
 *  data may need to be buffered, so a combination of a 1 Mbyte memory buffer
 *  and a temporary file is used.
 *
 *  The use of read() and write() is prefered over fread() and fwrite()
 *  for reasons of efficiency, given the large buffer size in use.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/buffer.c,v 11.7 2004/04/05 05:46:01 morrison Exp $ (BRL)";
#endif

#include "conf.h"	/* optional */

#include <stdio.h>

#include "externs.h"	/* optional */

int mread(int fd, char *bufp, int n );

char	template[] = "/usr/tmp/bufferXXXXXX";

#define	SIZE	(1024*1024)

char	buf[SIZE];

int
main(void)
{
	register int	count;
	register int	tfd;

	if( (count = mread(0, buf, sizeof(buf))) < sizeof(buf) )  {
		if( count < 0 )  {
			perror("buffer: mem read");
			exit(1);
		}
		/* Entire input sequence fit into buf */
		if( write(1, buf, count) != count )  {
			perror("buffer: stdout write 1");
			exit(1);
		}
		exit(0);
	}

	/* Create temporary file to hold data, get r/w file descriptor */
	(void)mkstemp( template );
	if( (tfd = creat( template, 0600 )) < 0 )  {
		perror(template);
		exit(1);
	}
	(void)close(tfd);
	if( (tfd = open( template, 2 )) < 0 )  {
		perror(template);
		goto err;
	}

	/* Stash away first buffer full */
	if( write(tfd, buf, count) != count )  {
		perror("buffer: tmp write1");
		goto err;
	}

	/* Continue reading and writing additional buffer loads to temp file */
	while( (count = mread(0, buf, sizeof(buf))) > 0 )  {
		if( write(tfd, buf, count) != count )  {
			perror("buffer: tmp write2");
			goto err;
		}
	}
	if( count < 0 )  {
		perror("buffer: read");
		goto err;
	}

	/* All input read, regurgitate it all on stdout */
	if( lseek( tfd, 0L, 0 ) < 0 )  {
		perror("buffer: lseek");
		goto err;
	}
	while( (count = mread(tfd, buf, sizeof(buf))) > 0 )  {
		if( write(1, buf, count) != count )  {
			perror("buffer: stdout write 2");
			goto err;
		}
	}
	if( count < 0 )  {
		perror("buffer: tmp read");
		goto err;
	}
	(void)unlink(template);
	exit(0);

err:
	(void)unlink(template);
	exit(1);
}

/*
 *			M R E A D
 *
 * This function performs the function of a read(II) but will
 * call read(II) multiple times in order to get the requested
 * number of characters.  This can be necessary because pipes
 * and network connections don't deliver data with the same
 * grouping as it is written with.  Written by Robert S. Miles, BRL.
 */
int
mread(int fd, register char *bufp, int n)
{
	register int	count = 0;
	register int	nread;

	do {
		nread = read(fd, bufp, (unsigned)n-count);
		if(nread < 0)  {
			perror("buffer: mread");
			return(-1);
		}
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);

	return((int)count);
}
@


11.7
log
@merge of ansi-6-0-branch into head
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/buffer.c,v 11.4 2001/10/11 23:14:04 butler Exp $ (BRL)";
d44 1
a44 1
main()
d125 1
a125 4
mread(fd, bufp, n)
int	fd;
register char	*bufp;
int	n;
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/buffer.c,v 11.6 2002/08/20 17:08:54 jra Exp $ (BRL)";
d44 1
a44 1
main(void)
d125 4
a128 1
mread(int fd, register char *bufp, int n)
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d44 1
a44 1
main(void)
d125 4
a128 1
mread(int fd, register char *bufp, int n)
@


11.4
log
@changed mktemp call to mkstemp
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/buffer.c,v 11.3 2000/09/01 03:23:44 mike Exp $ (BRL)";
d44 1
a44 1
main()
d125 1
a125 4
mread(fd, bufp, n)
int	fd;
register char	*bufp;
int	n;
@


11.3
log
@
Lint fix
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/buffer.c,v 11.2 2000/08/23 19:04:12 mike Exp $ (BRL)";
d63 1
a63 1
	(void)mktemp( template );
@


11.2
log
@
const RCSid
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/buffer.c,v 11.1 1995/01/04 10:11:28 mike Rel4_4 $ (BRL)";
d29 2
d33 4
d43 1
@


11.1
log
@Release_4.4
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/buffer.c,v 10.1 91/10/12 06:47:44 mike Rel4_0 $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/buffer.c,v 9.1 89/05/19 06:07:17 mike Rel3_5 $ (BRL)";
@


9.1
log
@Release_3.5
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header: buffer.c,v 8.1 88/10/05 00:40:06 mike Rel3_0 $ (BRL)";
@


8.1
log
@Release_3.0
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header: buffer.c,v 1.1 88/08/13 21:20:48 mike Exp $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@
