head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.2
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.2
	premerge-autoconf:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.3
	offsite-5-3-pre:11.5
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.3
	rel-5-0-beta:11.3
	rel-4-5:11.3
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.14.57.37;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.05.46.01;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.45;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.55;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.56.09;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2000.09.01.03.23.46;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.08.23.19.04.25;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	97.06.18.12.41.09;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	96.07.16.22.56.03;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.11.45;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.23.15.05.35;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.48.00;	author mike;	state Rel4_0;
branches;
next	9.5;

9.5
date	91.06.17.09.37.03;	author mmark;	state Exp;
branches;
next	9.4;

9.4
date	90.12.05.06.02.22;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	89.12.29.22.16.20;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	89.11.07.23.09.41;	author phil;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.07.51;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.40.37;	author mike;	state Rel3_0;
branches;
next	7.4;

7.4
date	88.06.23.03.26.04;	author phil;	state Exp;
branches;
next	7.3;

7.3
date	88.06.23.01.35.08;	author phil;	state Exp;
branches;
next	7.2;

7.2
date	88.05.16.00.06.21;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.05.50;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.09.15;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.37.04;	author mike;	state Rel;
branches;
next	4.3;

4.3
date	87.05.28.02.24.01;	author phil;	state Exp;
branches;
next	4.2;

4.2
date	87.02.13.00.39.05;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.12.12;	author mike;	state Rel1;
branches;
next	1.2;

1.2
date	86.10.03.08.12.28;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.09.24.01.20.02;	author phil;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.35;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.23.22;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.52.29;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.02.12.19.43.09;	author erikg;	state Exp;
branches;
next	11.7.10.2;

11.7.10.2
date	2004.03.15.14.08.11;	author erikg;	state Exp;
branches;
next	;


desc
@Rotate, Reverse, or Invert a .bw file.
@


11.11
log
@moved to src/util/
@
text
@/*
 *			B W R O T . C
 *
 *  Rotate, Invert, and/or Reverse the pixels in a Black
 *  and White (.bw) file.
 *
 *  The rotation logic was worked out for data ordered with
 *  "upper left" first.  It is being used on files in first
 *  quadrant order (lower left first).  Thus the "forward",
 *  "backward" flags are reversed.
 *
 *  The code was designed to never need to seek on the input,
 *  while it *may* need to seek on output (if the max buffer
 *  is too small).  It would be nice if we could handle the
 *  reverse case also (e.g. pipe on stdout).
 *
 *  Note that this program can be applied to any collection
 *  of single byte entities.
 *
 *  Author -
 *	Phillip Dykstra
 *	24 Sep 1986
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/bwrot.c,v 11.10 2004/05/10 15:30:50 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "externs.h"		/* For getopt */

#define	MAXBUFBYTES	(1280*1024)

int	buflines, scanbytes;
int	firsty = -1;	/* first "y" scanline in buffer */
int	lasty = -1;	/* last "y" scanline in buffer */
unsigned char *buffer;
unsigned char *bp;
unsigned char *obuf;
unsigned char *obp;

int	nxin = 512;
int	nyin = 512;
int	yin, xout, yout;
int	plus90, minus90, reverse, invert;
double	angle;

static	char usage[] = "\
Usage: bwrot [-f -b -r -i] [-s squaresize]\n\
	[-w width] [-n height] [file.bw] > file.bw\n\
  or   bwrot -a angle [-s squaresize]\n\
	[-w width] [-n height] [file.bw] > file.bw\n";

void	fill_buffer(void), reverse_buffer(void), arbrot(double a);

static char	*file_name;
FILE	*ifp, *ofp;

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = getopt( argc, argv, "fbrihs:w:n:S:W:N:a:" )) != EOF )  {
		switch( c )  {
		case 'f':
			minus90++;
			break;
		case 'b':
			plus90++;
			break;
		case 'r':
			reverse++;
			break;
		case 'i':
			invert++;
			break;
		case 'h':
			/* high-res */
			nxin = nyin = 1024;
			break;
		case 'S':
		case 's':
			/* square size */
			nxin = nyin = atoi(optarg);
			break;
		case 'W':
		case 'w':
			nxin = atoi(optarg);
			break;
		case 'N':
		case 'n':
			nyin = atoi(optarg);
			break;
		case 'a':
			angle = atof(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	/* XXX - backward compatability hack */
	if( optind+2 == argc ) {
		nxin = atoi(argv[optind++]);
		nyin = atoi(argv[optind++]);
	}
	if( optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "-";
		ifp = stdin;
	} else {
		file_name = argv[optind];
		if( (ifp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"bwrot: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
	}

	if ( argc > ++optind )
		(void)fprintf( stderr, "bwrot: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	int	x, y;
	long	outbyte, outplace;

	if ( !get_args( argc, argv ) || isatty(fileno(stdout)) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	ofp = stdout;

	scanbytes = nxin;
	buflines = MAXBUFBYTES / scanbytes;
	if( buflines <= 0 ) {
		fprintf( stderr, "bwrot: I'm not compiled to do a scanline that long!\n" );
		exit( 1 );
	}
	if( buflines > nyin ) buflines = nyin;
	buffer = (unsigned char *)malloc( buflines * scanbytes );
	obuf = (unsigned char *)malloc( (nyin > nxin) ? nyin : nxin );
	if( buffer == (unsigned char *)0 || obuf == (unsigned char *)0 ) {
		fprintf( stderr, "bwrot: malloc failed\n" );
		exit( 3 );
	}

	/*
	 * Break out to added arbitrary angle routine
	 */
	if( angle ) {
		arbrot( angle );
		exit( 0 );
	}

	/*
	 * Clear our "file pointer."  We need to maintain this
	 * In order to tell if seeking is required.  ftell() always
	 * fails on pipes, so we can't use it.
	 */
	outplace = 0;

	yin = 0;
	while( yin < nyin ) {
		/* Fill buffer */
		fill_buffer();
		if( !buflines )
			break;
		if( reverse )
			reverse_buffer();
		if( plus90 ) {
			for( x = 0; x < nxin; x++ ) {
				obp = obuf;
				bp = &buffer[ (lasty-firsty)*scanbytes + x ];
				for( y = lasty; y >= yin; y-- ) { /* firsty? */
					*obp++ = *bp;
					bp -= scanbytes;
				}
				yout = x;
				xout = (nyin - 1) - lasty;
				outbyte = ((yout * nyin) + xout);
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "bwrot: Can't seek on output, yet I need to!\n" );
						exit( 3 );
					}
					outplace = outbyte;
				}
				fwrite( obuf, 1, buflines, ofp );
				outplace += buflines;
			}
		} else if( minus90 ) {
			for( x = nxin-1; x >= 0; x-- ) {
				obp = obuf;
				bp = &buffer[ x ];
				for( y = firsty; y <= lasty; y++ ) {
					*obp++ = *bp;
					bp += scanbytes;
				}
				yout = (nxin - 1) - x;
				xout = yin;
				outbyte = ((yout * nyin) + xout);
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "bwrot: Can't seek on output, yet I need to!\n" );
						exit( 3 );
					}
					outplace = outbyte;
				}
				fwrite( obuf, 1, buflines, ofp );
				outplace += buflines;
			}
		} else if( invert ) {
			for( y = lasty; y >= firsty; y-- ) {
				yout = (nyin - 1) - y;
				outbyte = yout * scanbytes; 
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "bwrot: Can't seek on output, yet I need to!\n" );
						exit( 3 );
					}
					outplace = outbyte;
				}
				fwrite( &buffer[(y-firsty)*scanbytes], 1, scanbytes, ofp );
				outplace += scanbytes;
			}
		} else {
			/* Reverse only */
			for( y = 0; y < buflines; y++ ) {
				fwrite( &buffer[y*scanbytes], 1, scanbytes, ofp );
			}
		}

		yin += buflines;
	}
	return 0;
}

void
fill_buffer(void)
{
	buflines = fread( buffer, scanbytes, buflines, ifp );

	firsty = lasty + 1;
	lasty = firsty + (buflines - 1);
}

void
reverse_buffer(void)
{
	int	i;
	unsigned char *p1, *p2, temp;

	for( i = 0; i < buflines; i++ ) {
		p1 = &buffer[ i * scanbytes ];
		p2 = p1 + (scanbytes - 1);
		while( p1 < p2 ) {
			temp = *p1;
			*p1++ = *p2;
			*p2-- = temp;
		}
	}
}

/*
 *  Arbitrary angle rotation.
 *  Currently this needs to be able to buffer the entire image
 *  in memory at one time.
 *
 *  To rotate a point (x,y) CCW about the origin:
 *    x' = x cos(a) - y sin(a)
 *    y' = x sin(a) + y cos(a)
 *  To rotate it about a point (xc,yc):
 *    x' = (x-xc) cos(a) - (y-yc) sin(a) + xc
 *       = x cos(a) - y sin(a) + [xc - xc cos(a) + yc sin(a)]
 *    y' = (x-xc) sin(a) + (y-yc) cos(a) + yc
 *	 = x sin(a) + y cos(a) + [yc - yc cos(a) - xc sin(a)]
 *  So, to take one step in x:
 *    dx' = cos(a)
 *    dy' = sin(a)
 *  or one step in y:
 *    dx' = -sin(a)
 *    dy' = cos(a)
 */
#ifndef M_PI
#define	PI	3.1415926535898
#else
#define PI M_PI
#endif
#define	DtoR(x)	((x)*PI/180.0)

void
arbrot(double a)
      	  	/* rotation angle */
{
	int	x, y;				/* working coord */
	double	x2, y2;				/* its rotated position */
	double	xc, yc;				/* rotation origin */
	int	x_min, y_min, x_max, y_max;	/* area to rotate */
	double	x_goop, y_goop;
	double	sina, cosa;

	if( buflines != nyin ) {
		/* I won't all fit in the buffer */
		fprintf(stderr,"bwrot: Sorry but I can't do an arbitrary rotate of an image this large\n");
		exit(1);
	}
	if( buflines > nyin ) buflines = nyin;
	fill_buffer();

	/*
	 * Convert rotation angle to radians.
	 * Because we "pull down" the pixel from their rotated positions
	 * to their standard ones, the sign of the rotation is reversed.
	 */
	a = -DtoR(a);
	sina = sin(a);
	cosa = cos(a);

	/* XXX - Let the user pick the rotation origin? */
	xc = nxin / 2.0;
	yc = nyin / 2.0;

	x_goop = xc - xc * cosa + yc * sina;
	y_goop = yc - yc * cosa - xc * sina;

	x_min = 0;
	y_min = 0;
	x_max = nxin;
	y_max = nyin;

	for( y = y_min; y < y_max; y++ ) {
		x2 = x_min * cosa - y * sina + x_goop;
		y2 = x_min * sina + y * cosa + y_goop;
		for( x = x_min; x < x_max; x++ ) {
			/* check for in bounds */
			if( x2 >= 0 && x2 < nxin && y2 >= 0 && y2 < nyin )
				putchar(buffer[(int)y2*nyin + (int)x2]);
			else
				putchar(0);	/* XXX - setable color? */
			/* "forward difference" our coordinates */
			x2 += cosa;
			y2 += sina;
		}
	}
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/bwrot.c,v 11.9 2004/04/05 05:46:01 morrison Exp $ (BRL)";
@


11.9
log
@merge of ansi-6-0-branch into head
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d37 5
a41 1
#include "conf.h"
@


11.8
log
@update copyright to include span through 2003
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwrot.c,v 11.7 2002/08/20 17:08:55 jra Exp $ (BRL)";
d67 1
a67 1
void	fill_buffer(), reverse_buffer(), arbrot();
d73 1
a73 2
get_args( argc, argv )
register char **argv;
d144 1
a144 2
main( argc, argv )
int argc; char **argv;
d262 1
a262 1
fill_buffer()
d271 1
a271 1
reverse_buffer()
d315 2
a316 2
arbrot( a )
double	a;	/* rotation angle */
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d30 1
a30 1
 *	This software is Copyright (C) 1986 by the United States Army.
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwrot.c,v 11.5 2000/09/01 03:23:46 mike Exp $ (BRL)";
@


11.7.4.1
log
@sync to HEAD...
@
text
@d30 1
a30 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/bwrot.c,v 11.8 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.7.10.1
log
@merge from HEAD
@
text
@d30 1
a30 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwrot.c,v 11.8 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.7.10.2
log
@merge from head
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwrot.c,v 11.7.10.1 2004/02/12 19:43:09 erikg Exp $ (BRL)";
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwrot.c,v 11.7 2002/08/20 17:08:55 jra Exp $ (BRL)";
d67 1
a67 1
void	fill_buffer(void), reverse_buffer(void), arbrot(double a);
d73 2
a74 1
get_args(int argc, register char **argv)
d145 2
a146 1
main(int argc, char **argv)
d264 1
a264 1
fill_buffer(void)
d273 1
a273 1
reverse_buffer(void)
d317 2
a318 2
arbrot(double a)
      	  	/* rotation angle */
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d30 1
a30 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d67 1
a67 1
void	fill_buffer(void), reverse_buffer(void), arbrot(double a);
d73 2
a74 1
get_args(int argc, register char **argv)
d145 2
a146 1
main(int argc, char **argv)
d264 1
a264 1
fill_buffer(void)
d273 1
a273 1
reverse_buffer(void)
d317 2
a318 2
arbrot(double a)
      	  	/* rotation angle */
@


11.5
log
@
Lint fix
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwrot.c,v 11.4 2000/08/23 19:04:25 mike Exp $ (BRL)";
d67 1
a67 1
void	fill_buffer(), reverse_buffer(), arbrot();
d73 1
a73 2
get_args( argc, argv )
register char **argv;
d144 1
a144 2
main( argc, argv )
int argc; char **argv;
d262 1
a262 1
fill_buffer()
d271 1
a271 1
reverse_buffer()
d315 2
a316 2
arbrot( a )
double	a;	/* rotation angle */
@


11.4
log
@
const RCSid
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwrot.c,v 11.3 1997/06/18 12:41:09 jra Exp $ (BRL)";
d72 1
d144 1
d260 1
@


11.3
log
@Added check for running out of input.
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwrot.c,v 11.2 1996/07/16 22:56:03 jra Exp jra $ (BRL)";
@


11.2
log
@Minor mods for IRIX 6.2
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwrot.c,v 11.1 1995/01/04 10:11:45 mike Rel4_4 jra $ (BRL)";
d189 2
@


11.1
log
@Release_4.4
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwrot.c,v 10.2 94/08/23 15:05:35 gdurf Exp $ (BRL)";
a44 2
int	arbrot();

d67 1
a67 1
void	fill_buffer(), reverse_buffer();
d311 1
@


10.2
log
@Factored ifdefs
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwrot.c,v 10.1 1991/10/12 06:48:00 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwrot.c,v 9.5 91/06/17 09:37:03 mmark Exp $ (BRL)";
d37 2
a40 1
#include "externs.h"
d42 2
a43 3
extern int	getopt();
extern char	*optarg;
extern int	optind;
d306 1
d308 3
@


9.5
log
@fixed usage
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwrot.c,v 9.4 90/12/05 06:02:22 mike Exp $ (BRL)";
@


9.4
log
@lint
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwrot.c,v 9.3 89/12/29 22:16:20 mike Exp $ (BRL)";
@


9.3
log
@Added "externs.h" for atof().
Removed incorrect malloc() declaration.
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 9.2 89/11/07 23:09:41 mike Locked $ (BRL)";
d165 2
a166 2
	buffer = malloc( buflines * scanbytes );
	obuf = (nyin > nxin) ? malloc( nyin ) : malloc( nxin );
@


9.2
log
@Added an arbitrary angle rotater.
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 9.1 89/05/19 06:07:51 phil Locked $ (BRL)";
d39 1
a43 1
extern unsigned char *malloc();
@


9.1
log
@Release_3.5
@
text
@d5 1
a5 1
 *  and white (.bw) file.
d12 5
d34 1
a34 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 8.1 88/10/05 00:40:37 mike Rel3_0 $ (BRL)";
d38 1
d45 2
d61 1
d65 2
d79 1
a79 1
	while ( (c = getopt( argc, argv, "fbrihs:w:n:S:W:N:" )) != EOF )  {
d110 3
d173 8
d282 78
@


8.1
log
@Release_3.0
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 7.4 88/06/23 03:26:04 phil Exp $ (BRL)";
@


7.4
log
@Fixed buffering bug.  [Actually this one was okay, but I made it
the same as pixrot which did, until moments ago, have a bug.]
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 7.3 88/06/23 01:35:08 phil Locked $ (BRL)";
@


7.3
log
@modernized argument format (will still accept old one)
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 7.2 88/05/16 00:06:21 phil Locked $ (BRL)";
d39 1
a39 1
#define	MAXBUFBYTES	(1024*1024)
d135 1
a135 1
	int	outbyte, outplace;
d152 5
a156 1
	obuf = malloc( nyin );
d183 1
a183 1
					if( fseek( ofp, outbyte, 0L ) < 0 ) {
d204 1
a204 1
					if( fseek( ofp, outbyte, 0L ) < 0 ) {
d218 1
a218 1
					if( fseek( ofp, outbyte, 0L ) < 0 ) {
d241 2
a244 6
	if( lasty > (nyin-1) ) {
		lasty = nyin - 1;
		buflines = lasty - firsty + 1;
	}

	fread( buffer, 1, scanbytes * buflines, ifp );
@


7.2
log
@lint fixes
@
text
@d2 1
a2 1
 *		B W R O T . C
d4 2
a5 2
 * Rotate, Invert, and/or Reverse the pixels in a Black
 * and white (.bw) file.
d7 1
a7 1
 * The rotation logic was worked out for data ordered with
d12 1
a12 1
 * Note that this program can be applied to any collection
d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 7.1 87/11/03 00:05:50 mike Locked $ (BRL)";
d34 4
a37 1
unsigned char *malloc();
d49 3
a51 1
int	xin, yin, xout, yout, nxin, nyin;
d54 3
a56 1
static	char *Usage = "usage: bwrot [-f -b -r -i] nx ny < file.bw > file.bw\n";
d60 1
d63 2
a64 2
main( argc, argv )
int argc; char **argv;
d66 1
a66 2
	int	x, y;
	int	outbyte, outplace;
d68 2
a69 3
	/* Check for flags */
	while( argc > 1 && argv[1][0] == '-' )  {
		switch( argv[1][1] )  {
d82 20
a101 4
		default:
			fprintf( stderr, "bwrot: unrecognized flag '%s'\n", argv[1] );
			fprintf( stderr, Usage );
			exit( 1 );
a102 2
		argc--;
		argv++;
d105 34
a138 2
	if( argc != 3 ) {
		fprintf( stderr, Usage );
a141 4
	nxin = atoi( argv[1] );
	nyin = atoi( argv[2] );

	ifp = stdin;
@


7.1
log
@Release 2.3
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 6.1 87/07/11 08:09:15 mike Rel $ (BRL)";
d51 2
d186 1
d199 1
@


6.1
log
@Release 2.0
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 5.1 87/06/24 22:37:04 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 4.3 87/05/28 02:24:01 phil Exp $ (BRL)";
@


4.3
log
@fixed uninitialized flags bug
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 4.2 87/02/13 00:39:05 phil Locked $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 4.1 86/12/29 03:12:12 mike Rel1 $ (BRL)";
d47 1
a57 1
	int	plus90, minus90, reverse, invert;
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 1.2 86/10/03 08:12:28 mike Exp $ (BRL)";
@


1.2
log
@argc bug
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: bwrot.c,v 1.1 86/09/24 01:20:02 phil Exp $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d60 1
a60 1
	while( argv[1][0] == '-' )  {
@
