head	11.14;
access;
symbols
	ansi-20040405-merged:11.10.2.2
	postmerge-20040405-ansi:11.12
	premerge-20040404-ansi:11.11
	postmerge-autoconf:11.11
	autoconf-freeze:11.10.10.2
	premerge-autoconf:11.11
	postmerge-20040315-windows:11.11
	premerge-20040315-windows:11.11
	windows-20040315-freeze:11.10.4.1
	autoconf-20031203:11.10
	autoconf-20031202:11.10
	autoconf-branch:11.10.0.10
	phong-branch:11.10.0.8
	photonmap-branch:11.10.0.6
	rel-6-1-DP:11.10
	windows-branch:11.10.0.4
	rel-6-0-2:11.8
	ansi-branch:11.10.0.2
	rel-6-0-1-branch:11.8.0.2
	hartley-6-0-post:11.9
	hartley-6-0-pre:11.8
	rel-6-0-1:11.8
	rel-6-0:11.8
	rel-5-4:11.4
	offsite-5-3-pre:11.6
	rel-5-3:11.4
	rel-5-2:11.4
	rel-5-1-branch:11.4.0.2
	rel-5-1:11.4
	rel-5-0:11.3
	rel-5-0-beta:11.3
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.14
date	2004.05.21.14.57.37;	author morrison;	state dead;
branches;
next	11.13;

11.13
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.12;

11.12
date	2004.04.05.05.46.01;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2004.02.02.17.39.45;	author morrison;	state Exp;
branches;
next	11.10;

11.10
date	2002.08.20.17.08.55;	author jra;	state Exp;
branches
	11.10.2.1
	11.10.4.1
	11.10.10.1;
next	11.9;

11.9
date	2002.08.15.20.56.09;	author hartley;	state Exp;
branches;
next	11.8;

11.8
date	2001.08.10.20.57.05;	author butler;	state Exp;
branches;
next	11.7;

11.7
date	2001.08.07.21.00.31;	author butler;	state Exp;
branches;
next	11.6;

11.6
date	2000.09.01.03.23.46;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	2000.08.23.19.04.25;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.01.31.16.03.08;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	99.04.07.13.17.33;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	97.05.19.17.14.27;	author butler;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.11.47;	author mike;	state Rel4_4;
branches;
next	10.5;

10.5
date	94.12.30.01.22.04;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.08.22.20.24.16;	author gdurf;	state Exp;
branches;
next	10.3;

10.3
date	92.07.16.22.19.54;	author phil;	state Exp;
branches;
next	10.2;

10.2
date	92.03.16.21.45.57;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.48.02;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	91.10.11.11.15.34;	author butler;	state Exp;
branches;
next	9.2;

9.2
date	91.06.17.10.51.18;	author mmark;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.07.54;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.40.39;	author mike;	state Rel3_0;
branches;
next	7.3;

7.3
date	88.09.26.22.59.07;	author phil;	state Exp;
branches;
next	7.2;

7.2
date	88.05.16.00.06.22;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.05.56;	author mike;	state Rel;
branches;
next	6.2;

6.2
date	87.11.02.15.54.01;	author phil;	state Exp;
branches;
next	6.1;

6.1
date	87.07.11.08.09.20;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.37.09;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.13.00.39.11;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.12.15;	author mike;	state Rel1;
branches;
next	1.3;

1.3
date	86.11.25.01.50.19;	author phil;	state Exp;
branches;
next	1.2;

1.2
date	86.10.30.19.45.59;	author phil;	state Exp;
branches;
next	1.1;

1.1
date	86.08.14.21.52.38;	author mike;	state Exp;
branches;
next	;

11.10.2.1
date	2002.09.19.18.02.35;	author morrison;	state Exp;
branches;
next	11.10.2.2;

11.10.2.2
date	2004.03.17.21.23.22;	author morrison;	state Exp;
branches;
next	;

11.10.4.1
date	2004.03.11.23.52.29;	author morrison;	state Exp;
branches;
next	;

11.10.10.1
date	2004.02.12.19.43.09;	author erikg;	state Exp;
branches;
next	11.10.10.2;

11.10.10.2
date	2004.03.15.14.08.11;	author erikg;	state Exp;
branches;
next	;


desc
@Scale parts of a BW image
@


11.14
log
@moved to src/util/
@
text
@/*
 *		B W S C A L E . C
 *
 *  Scale a black and white picture.
 *
 *  To scale up, we use bilinear interpolation.
 *  To scale down, we assume "square pixels" and preserve the
 *  amount of light energy per unit area.
 *
 *  This is a buffered version that can handle files of
 *  almost arbitrary size.
 *  Note: this buffer code also appears in bwcrop.c
 *
 *  Author -
 *	Phillip Dykstra
 *	16 June 1986
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/bwscale.c,v 11.13 2004/05/10 15:30:50 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include "machine.h"
#include "externs.h"

#if 0
#define	MAXBUFBYTES	1024*1024	/* max bytes to malloc in buffer space */
#else
#define	MAXBUFBYTES	4096*4096	/* max bytes to malloc in buffer space */
#endif
unsigned char	*outbuf;
unsigned char	*buffer;
int	scanlen;			/* length of infile (and buffer) scanlines */
int	buflines;			/* Number of lines held in buffer */
int	buf_start = -1000;		/* First line in buffer */

int	bufy;				/* y coordinate in buffer */
FILE	*buffp;
static char	*file_name;

int	rflag = 0;
int	inx = 512;
int	iny = 512;
int	outx = 512;
int	outy = 512;

void	init_buffer(int scanlen), fill_buffer(int y), binterp(FILE *ofp, int ix, int iy, int ox, int oy), ninterp(FILE *ofp, int ix, int iy, int ox, int oy);

static	char usage[] = "\
Usage: bwscale [-h] [-r] [-s squareinsize] [-w inwidth] [-n inheight]\n\
	[-S squareoutsize] [-W outwidth] [-N outheight] [in.bw] > out.bw\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = getopt( argc, argv, "rhs:w:n:S:W:N:" )) != EOF )  {
		switch( c )  {
		case 'r':
			/* pixel replication */
			rflag = 1;
			break;
		case 'h':
			/* high-res */
			inx = iny = 1024;
			break;
		case 'S':
			/* square size */
			outx = outy = atoi(optarg);
			break;
		case 's':
			/* square size */
			inx = iny = atoi(optarg);
			break;
		case 'W':
			outx = atoi(optarg);
			break;
		case 'w':
			inx = atoi(optarg);
			break;
		case 'N':
			outy = atoi(optarg);
			break;
		case 'n':
			iny = atoi(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	/* XXX - backward compatability hack */
	if( optind+5 == argc ) {
		file_name = argv[optind++];
		if( (buffp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"bwscale: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
		inx = atoi(argv[optind++]);
		iny = atoi(argv[optind++]);
		outx = atoi(argv[optind++]);
		outy = atoi(argv[optind++]);
		return(1);
	}
	if( optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "-";
		buffp = stdin;
	} else {
		file_name = argv[optind];
		if( (buffp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"bwscale: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
	}

	if ( argc > ++optind )
		(void)fprintf( stderr, "bwscale: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

/****** THIS PROBABLY SHOULD BE ELSEWHERE *******/

/* ceiling and floor functions for positive numbers */
#define	CEILING(x)	(((x) > (int)(x)) ? (int)(x)+1 : (int)(x))
#define	FLOOR(x)	((int)(x))
#define	MIN(x,y)	(((x) > (y)) ? (y) : (x))

/*
 * Scale a file of pixels to a different size.
 *
 * To scale down we make a square pixel assumption.
 * We will preserve the amount of light energy per unit area.
 * To scale up we use bilinear interpolation.
 */
int
scale(FILE *ofp, int ix, int iy, int ox, int oy)
{
	int	i, j, k, l;
	double	pxlen, pylen;			/* # old pixels per new pixel */
	double	xstart, xend, ystart, yend;	/* edges of new pixel in old coordinates */
	double	xdist, ydist;			/* length of new pixel sides in old coord */
	double	sum;
	unsigned char *op;

	pxlen = (double)ix / (double)ox;
	pylen = (double)iy / (double)oy;
	if ( (pxlen < 1.0 && pylen > 1.0) || (pxlen > 1.0 && pylen < 1.0) ) {
		fprintf( stderr, "bwscale: can't stretch one way and compress another!\n" );
		return( -1 );
	}
	if( pxlen < 1.0 || pylen < 1.0 ) {
		/* scale up */
		if( rflag ) {
			/* nearest neighbor interpolate */
			ninterp( ofp, ix, iy, ox, oy );
		} else {
			/* bilinear interpolate */
			binterp( ofp, ix, iy, ox, oy );
		}
		return( 0 );
	}

	/* for each output pixel */
	for( j = 0; j < oy ; j++ ) {
		ystart = j * pylen;
		yend = ystart + pylen;
		op = outbuf;
		for( i = 0; i < ox; i++ ) {
			xstart = i * pxlen;
			xend = xstart + pxlen;
			sum = 0.0;
			/*
			 * For each pixel of the original falling
			 *  inside this new pixel.
			 */
			for( l = FLOOR(ystart); l < CEILING(yend); l++ ) {

				/* Make sure we have this row in the buffer */
				bufy = l - buf_start;
				if( bufy < 0 || bufy >= buflines ) {
					fill_buffer( l );
					bufy = l - buf_start;
				}

				/* Compute height of this row */
				if( (double)l < ystart )
					ydist = CEILING(ystart) - ystart;
				else
					ydist = MIN( 1.0, yend - (double)l );

				for( k = FLOOR(xstart); k < CEILING(xend); k++ ) {
					/* Compute width of column */
					if( (double)k < xstart )
						xdist = CEILING(xstart) - xstart;
					else
						xdist = MIN( 1.0, xend - (double)k );

					/* Add this pixels contribution */
					/* sum += old[l][k] * xdist * ydist; */
					sum += buffer[bufy * scanlen + k] * xdist * ydist;
				}
			}
			*op++ = (int)(sum / (pxlen * pylen));
			if (op > (outbuf+scanlen))
				abort();
		}
		(void) fwrite( outbuf, 1, ox, ofp );
	}
	return( 1 );
}



int
main(int argc, char **argv)
{
	int i;

	if ( !get_args( argc, argv ) || isatty(fileno(stdout)) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	if( inx <= 0 || iny <= 0 || outx <= 0 || outy <= 0 ) {
		fprintf( stderr, "bwscale: bad size\n" );
		exit( 2 );
	}

	/* See how many lines we can buffer */
	scanlen = inx;
	init_buffer( scanlen );

	if (inx < outx) i = outx;
	else i = inx;

	if( (outbuf = (unsigned char *)malloc(i)) == (unsigned char *)NULL )
		exit( 4 );

	/* Here we go */
	i = scale( stdout, inx, iny, outx, outy );

	free( outbuf );
	free( buffer );
	return(0);
}

/*
 * Determine max number of lines to buffer.
 *  and malloc space for it.
 *  XXX - CHECK FILE SIZE
 */
void
init_buffer(int scanlen)
{
	int	max;

	/* See how many we could buffer */
	max = MAXBUFBYTES / scanlen;

	/*
	 * XXX We really should see how big
	 * the input file is to decide if we should buffer
	 * less than our max.
	 */
	if( max > 4096) max = 4096;

	buflines = max;
	buf_start = (-buflines);
	if ((buffer = (unsigned char *)malloc( buflines * scanlen ))
	  == (unsigned char *)NULL) {
		fprintf(stderr, "Cannot allocate buffer\n");
		exit(-1);
	} else {
		bzero((char *)buffer, buflines * scanlen);
	}
}

/*
 * Load the buffer with scan lines centered around
 * the given y coordinate.
 */
void
fill_buffer(int y)
{
	buf_start = y - buflines/2;
	if( buf_start < 0 ) buf_start = 0;

	if( fseek( buffp, buf_start * scanlen, 0 ) < 0 ) {
		fprintf( stderr, "bwscale: Can't seek to input pixel!\n" );
/*		exit( 3 ); */
	}
	fread( buffer, scanlen, buflines, buffp );
}


/*
 * Bilinear Interpolate a file of pixels.
 *
 * This version preserves the outside pixels and interps inside only.
 */
void
binterp(FILE *ofp, int ix, int iy, int ox, int oy)
{
	int	i, j;
	double	x, y, dx, dy, mid1, mid2;
	double	xstep, ystep;
	unsigned char *op, *up, *lp;

	xstep = (double)(ix - 1) / (double)ox - 1.0e-6;
	ystep = (double)(iy - 1) / (double)oy - 1.0e-6;

	/* For each output pixel */
	for( j = 0; j < oy; j++ ) {
		y = j * ystep;
		/*
		 * Make sure we have this row (and the one after it)
		 * in the buffer
		 */
		bufy = (int)y - buf_start;
		if( bufy < 0 || bufy >= buflines-1 ) {
			fill_buffer( (int)y );
			bufy = (int)y - buf_start;
		}

		op = outbuf;

		for( i = 0; i < ox; i++ ) {
			x = i * xstep;
			dx = x - (int)x;
			dy = y - (int)y;

			/* Note: (1-a)*foo + a*bar = foo + a*(bar-foo) */

			lp = &buffer[bufy*scanlen+(int)x];
			up = &buffer[(bufy+1)*scanlen+(int)x];

			mid1 = lp[0] + dx * ((double)lp[1] - (double)lp[0]);
			mid2 = up[0] + dx * ((double)up[1] - (double)up[0]);

			*op++ = mid1 + dy * (mid2 - mid1);
		}

		(void) fwrite( outbuf, 1, ox, ofp );
	}
}

/*
 * Nearest Neighbor Interpolate a file of pixels.
 *
 * This version preserves the outside pixels and interps inside only.
 */
void
ninterp(FILE *ofp, int ix, int iy, int ox, int oy)
{
	int	i, j;
	double	x, y;
	double	xstep, ystep;
	unsigned char *op, *lp;

	xstep = (double)(ix - 1) / (double)ox - 1.0e-6;
	ystep = (double)(iy - 1) / (double)oy - 1.0e-6;

	/* For each output pixel */
	for( j = 0; j < oy; j++ ) {
		y = j * ystep;
		/*
		 * Make sure we have this row (and the one after it)
		 * in the buffer
		 */
		bufy = (int)y - buf_start;
		if( bufy < 0 || bufy >= buflines-1 ) {
			fill_buffer( (int)y );
			bufy = (int)y - buf_start;
		}

		op = outbuf;

		for( i = 0; i < ox; i++ ) {
			x = i * xstep;
			lp = &buffer[bufy*scanlen+(int)x];
			*op++ = lp[0];
		}

		(void) fwrite( outbuf, 1, ox, ofp );
	}
}
@


11.13
log
@change conf.h to a wrapped config.h
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/bwscale.c,v 11.12 2004/04/05 05:46:01 morrison Exp $ (BRL)";
@


11.12
log
@merge of ansi-6-0-branch into head
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d31 5
a35 1
#include "conf.h"
@


11.11
log
@update copyright to include span through 2003
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.10 2002/08/20 17:08:55 jra Exp $ (BRL)";
d63 1
a63 1
void	init_buffer(), fill_buffer(), binterp(), ninterp();
d70 1
a70 2
get_args( argc, argv )
register char **argv;
d161 1
a161 3
scale( ofp, ix, iy, ox, oy )
FILE	*ofp;
int	ix, iy, ox, oy;
d240 1
a240 2
main( argc, argv )
int argc; char **argv;
d278 1
a278 2
init_buffer( scanlen )
int scanlen;
d308 1
a308 2
fill_buffer( y )
int y;
d327 1
a327 3
binterp( ofp, ix, iy, ox, oy )
FILE	*ofp;
int	ix, iy, ox, oy;
d378 1
a378 3
ninterp( ofp, ix, iy, ox, oy )
FILE	*ofp;
int	ix, iy, ox, oy;
@


11.10
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1986 by the United States Army.
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.8 2001/08/10 20:57:05 butler Exp $ (BRL)";
@


11.10.4.1
log
@sync to HEAD...
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/bwscale.c,v 11.11 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.10.10.1
log
@merge from HEAD
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.11 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.10.10.2
log
@merge from head
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.10.10.1 2004/02/12 19:43:09 erikg Exp $ (BRL)";
@


11.10.2.1
log
@Initial ANSIfication
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.10 2002/08/20 17:08:55 jra Exp $ (BRL)";
d63 1
a63 1
void	init_buffer(int scanlen), fill_buffer(int y), binterp(FILE *ofp, int ix, int iy, int ox, int oy), ninterp(FILE *ofp, int ix, int iy, int ox, int oy);
d70 2
a71 1
get_args(int argc, register char **argv)
d162 3
a164 1
scale(FILE *ofp, int ix, int iy, int ox, int oy)
d243 2
a244 1
main(int argc, char **argv)
d282 2
a283 1
init_buffer(int scanlen)
d313 2
a314 1
fill_buffer(int y)
d333 3
a335 1
binterp(FILE *ofp, int ix, int iy, int ox, int oy)
d386 3
a388 1
ninterp(FILE *ofp, int ix, int iy, int ox, int oy)
@


11.10.2.2
log
@sync branch with HEAD
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.9
log
@Converted from K&R to ANSI C - RFH
@
text
@d63 1
a63 1
void	init_buffer(int scanlen), fill_buffer(int y), binterp(FILE *ofp, int ix, int iy, int ox, int oy), ninterp(FILE *ofp, int ix, int iy, int ox, int oy);
d70 2
a71 1
get_args(int argc, register char **argv)
d162 3
a164 1
scale(FILE *ofp, int ix, int iy, int ox, int oy)
d243 2
a244 1
main(int argc, char **argv)
d282 2
a283 1
init_buffer(int scanlen)
d313 2
a314 1
fill_buffer(int y)
d333 3
a335 1
binterp(FILE *ofp, int ix, int iy, int ox, int oy)
d386 3
a388 1
ninterp(FILE *ofp, int ix, int iy, int ox, int oy)
@


11.8
log
@Misc compiler warnings eliminated
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.7 2001/08/07 21:00:31 butler Exp $ (BRL)";
d63 1
a63 1
void	init_buffer(), fill_buffer(), binterp(), ninterp();
d70 1
a70 2
get_args( argc, argv )
register char **argv;
d161 1
a161 3
scale( ofp, ix, iy, ox, oy )
FILE	*ofp;
int	ix, iy, ox, oy;
d240 1
a240 2
main( argc, argv )
int argc; char **argv;
d278 1
a278 2
init_buffer( scanlen )
int scanlen;
d308 1
a308 2
fill_buffer( y )
int y;
d327 1
a327 3
binterp( ofp, ix, iy, ox, oy )
FILE	*ofp;
int	ix, iy, ox, oy;
d378 1
a378 3
ninterp( ofp, ix, iy, ox, oy )
FILE	*ofp;
int	ix, iy, ox, oy;
@


11.7
log
@Misc compiler warning fixes
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.6 2000/09/01 03:23:46 mike Exp $ (BRL)";
d34 1
a34 1
#ifdef USE_STRING_H
@


11.6
log
@
Lint fix
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.5 2000/08/23 19:04:25 mike Exp $ (BRL)";
d34 5
a146 84
int
main( argc, argv )
int argc; char **argv;
{
	int i;

	if ( !get_args( argc, argv ) || isatty(fileno(stdout)) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	if( inx <= 0 || iny <= 0 || outx <= 0 || outy <= 0 ) {
		fprintf( stderr, "bwscale: bad size\n" );
		exit( 2 );
	}

	/* See how many lines we can buffer */
	scanlen = inx;
	init_buffer( scanlen );

	if (inx < outx) i = outx;
	else i = inx;

	if( (outbuf = (unsigned char *)malloc(i)) == (unsigned char *)NULL )
		exit( 4 );

	/* Here we go */
	i = scale( stdout, inx, iny, outx, outy );

	free( outbuf );
	free( buffer );
	return(0);
}

/*
 * Determine max number of lines to buffer.
 *  and malloc space for it.
 *  XXX - CHECK FILE SIZE
 */
void
init_buffer( scanlen )
int scanlen;
{
	int	max;

	/* See how many we could buffer */
	max = MAXBUFBYTES / scanlen;

	/*
	 * XXX We really should see how big
	 * the input file is to decide if we should buffer
	 * less than our max.
	 */
	if( max > 4096) max = 4096;

	buflines = max;
	buf_start = (-buflines);
	if ((buffer = (unsigned char *)malloc( buflines * scanlen ))
	  == (unsigned char *)NULL) {
		fprintf(stderr, "Cannot allocate buffer\n");
		exit(-1);
	} else {
		bzero((char *)buffer, buflines * scanlen);
	}
}

/*
 * Load the buffer with scan lines centered around
 * the given y coordinate.
 */
void
fill_buffer( y )
int y;
{
	buf_start = y - buflines/2;
	if( buf_start < 0 ) buf_start = 0;

	if( fseek( buffp, buf_start * scanlen, 0 ) < 0 ) {
		fprintf( stderr, "bwscale: Can't seek to input pixel!\n" );
/*		exit( 3 ); */
	}
	fread( buffer, scanlen, buflines, buffp );
}

d239 87
@


11.5
log
@
const RCSid
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.4 2000/01/31 16:03:08 jra Exp $ (BRL)";
d64 1
d142 1
d240 1
@


11.4
log
@Eliminated some unused variables
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.3 1999/04/07 13:17:33 jra Exp $ (BRL)";
@


11.3
log
@Needed to correct initialization due to increased buffer size.
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/bwscale.c,v 11.2 1997/05/19 17:14:27 butler Exp $ (BRL)";
d380 1
a380 1
	double	x, y, dx, dy, mid1, mid2;
d382 1
a382 1
	unsigned char *op, *up, *lp;
@


11.2
log
@buffer size now 4096*4096
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 11.1 1995/01/04 10:11:47 mike Rel4_4 butler $ (BRL)";
d196 1
@


11.1
log
@Release_4.4
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 10.5 94/12/30 01:22:04 mike Exp $ (BRL)";
d37 1
d39 3
a41 1

d189 1
a189 1
	 * Do a max of 512.  We really should see how big
d193 1
a193 1
	if( max > 512 ) max = 512;
d218 1
a218 1
		exit( 3 );
@


10.5
log
@DEC Alpha
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 10.4 94/08/22 20:24:16 gdurf Exp Locker: mike $ (BRL)";
@


10.4
log
@Added include of conf.h
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 10.3 1992/07/16 22:19:54 phil Exp gdurf $ (BRL)";
d198 1
a198 1
		bzero(buffer, buflines * scanlen);
@


10.3
log
@malloc cast to (unsigned char *)
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 10.2 92/03/16 21:45:57 mike Exp Locker: phil $ (BRL)";
d30 2
@


10.2
log
@IRIX 4.0.1
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 10.1 91/10/12 06:48:02 mike Rel4_0 Locker: mike $ (BRL)";
d158 1
a158 1
	if( (outbuf = malloc(i)) == NULL )
d191 2
a192 1
	if ((buffer = malloc( buflines * scanlen )) == (unsigned char *)NULL) {
@


10.1
log
@Release_4.0
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 9.3 91/10/11 11:15:34 butler Exp $ (BRL)";
d32 2
a34 5
extern int	getopt();
extern char	*optarg;
extern int	optind;
extern unsigned char *malloc();

d191 1
a191 1
	if ((buffer = malloc( buflines * scanlen )) == (char *)NULL) {
@


9.3
log
@fixed so that output buffer is large enough to hold output
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 9.2 91/06/17 10:51:18 mmark Exp Locker: butler $ (BRL)";
@


9.2
log
@fixed usage msg
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/bwscale.c,v 9.1 89/05/19 06:07:54 mike Rel3_5 $ (BRL)";
d142 2
d157 5
a161 1
	if( (outbuf = malloc(scanlen)) == NULL )
d165 5
a169 1
	scale( stdout, inx, iny, outx, outy );
d194 6
a199 1
	buffer = malloc( buflines * scanlen );
d252 1
d264 1
a264 1
	for( j = 0; j < oy; j++ ) {
d304 2
d357 1
@


9.1
log
@Release_3.5
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 8.1 88/10/05 00:40:39 mike Rel3_0 $ (BRL)";
d59 1
a59 1
Usage: bwscale [-r] [-s squareinsize] [-w inwidth] [-n inheight]\n\
@


8.1
log
@Release_3.0
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 7.3 88/09/26 22:59:07 phil Exp $ (BRL)";
@


7.3
log
@getopt, modern argument format, -n became -r for pixel replication
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 7.2 88/05/16 00:06:22 phil Locked $ (BRL)";
@


7.2
log
@lint fixes
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 7.1 87/11/03 00:05:56 mike Locked $ (BRL)";
d33 4
a36 1
unsigned char *malloc();
d48 1
a48 1
int	nflag = 0;
d50 6
d58 3
a60 2
static char usage[] = "\
Usage: bwscale [-n] infile.bw inx iny outx outy >out.bw\n";
d62 2
a63 2
main( argc, argv )
int argc; char **argv;
d65 1
a65 1
	int	inx, iny, outx, outy;
d67 5
a71 4
	while( argc > 1 ) {
		if( strcmp(argv[1],"-n") == 0 ) {
			nflag++;
		} else
d73 28
a100 2
		argc--;
		argv++;
d103 41
a143 2
	if( argc != 6 ) {
		fprintf( stderr, usage );
d146 1
a146 4
	inx = atoi( argv[2] );
	iny = atoi( argv[3] );
	outx = atoi( argv[4] );
	outy = atoi( argv[5] );
a151 5
	if( (buffp = fopen( argv[1], "r" )) == NULL ) {
		fprintf( stderr, "bwscale: can't open \"%s\"\n", argv[1] );
		exit( 3 );
	}

d198 4
a201 1
	fseek( buffp, buf_start * scanlen, 0 );
d237 1
a237 1
		if( nflag ) {
@


7.1
log
@Release 2.3
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 6.2 87/11/02 15:54:01 phil Exp $ (BRL)";
d47 2
d99 1
d123 1
d228 1
d280 1
@


6.2
log
@Added -n flag for nearest neighbor interpolation;
default is bilinear interpolation.
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 6.1 87/07/11 08:09:20 phil Locked $ (BRL)";
@


6.1
log
@Release 2.0
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 5.1 87/06/24 22:37:09 mike Rel $ (BRL)";
d45 1
d47 2
a48 1
char	*Usage = "usage: bwscale infile.bw inx iny outx outy >out.bw\n";
d55 9
d65 1
a65 1
		fprintf( stderr, Usage );
d162 7
a168 2
		/* bilinear interpolate */
		binterp( ofp, ix, iy, ox, oy );
d264 42
@


5.1
log
@Release 1.24
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 4.2 87/02/13 00:39:11 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 4.1 86/12/29 03:12:15 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 1.3 86/11/25 01:50:19 phil Exp $ (BRL)";
@


1.3
log
@optimized interpolation a bit
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 1.2 86/10/30 19:45:59 phil Locked $ (BRL)";
@


1.2
log
@added size arg check, removed some lint.
@
text
@d4 1
a4 1
 * Scale a black and white picture.
d6 3
a8 3
 * To scale up, we use bilinear interpolation.
 * To scale down, we assume "square pixels" and preserve the
 * amount of light energy per unit area.
d10 3
a12 3
 * This is a buffered version that can handle files of
 * almost arbitrary size.
 * Note: this buffer code also appears in bwcrop.c
d28 1
a28 1
static char RCSid[] = "@@(#)$Header: bwscale.c,v 1.1 86/08/14 21:52:38 phil Locked $ (BRL)";
d37 1
d74 2
d142 1
a142 1
	unsigned char outpixel;
d160 1
d196 1
a196 2
			outpixel = (int)(sum / (pxlen * pylen));
			fwrite( &outpixel, sizeof(outpixel), 1, ofp );
d198 1
d215 1
a215 1
	unsigned char outpixel;
d233 2
d242 6
a247 4
			mid1 = (1.0 - dx) * buffer[bufy*scanlen+(int)x] + dx * buffer[bufy*scanlen+(int)(x+1)];
			mid2 = (1.0 - dx) * buffer[(bufy+1)*scanlen+(int)x] + dx * buffer[(bufy+1)*scanlen+(int)(x+1)];
			outpixel = (1.0 - dy) * mid1 + dy * mid2;
			fwrite( &outpixel, sizeof(outpixel), 1, ofp );
d249 2
@


1.1
log
@Initial revision
@
text
@d28 1
a28 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
a49 1
	int	i, j;
a50 1
	unsigned char linebuf[512];
d60 4
d67 1
a67 1
		exit( 2 );
d75 1
a75 1
	scale( stdin, inx, iny, stdout, outx, outy );
a108 2
	int	i;

d130 2
a131 2
scale( ifp, ix, iy, ofp, ox, oy )
FILE *ifp, *ofp;
d149 1
a149 1
		binterp( ifp, ix, iy, ofp, ox, oy );
d204 2
a205 2
binterp( ifp, ix, iy, ofp, ox, oy )
FILE *ifp, *ofp;
@
