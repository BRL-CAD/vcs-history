head	1.17;
access;
symbols
	ansi-20040405-merged:1.13.2.2
	postmerge-20040405-ansi:1.15
	premerge-20040404-ansi:1.14
	postmerge-autoconf:1.14
	autoconf-freeze:1.13.10.2
	premerge-autoconf:1.14
	postmerge-20040315-windows:1.14
	premerge-20040315-windows:1.14
	windows-20040315-freeze:1.13.4.1
	autoconf-20031203:1.13
	autoconf-20031202:1.13
	autoconf-branch:1.13.0.10
	phong-branch:1.13.0.8
	photonmap-branch:1.13.0.6
	rel-6-1-DP:1.13
	windows-branch:1.13.0.4
	rel-6-0-2:1.11
	ansi-branch:1.13.0.2
	rel-6-0-1-branch:1.11.0.2
	hartley-6-0-post:1.12
	hartley-6-0-pre:1.11
	rel-6-0-1:1.11
	rel-6-0:1.11
	rel-5-4:1.9
	offsite-5-3-pre:1.10
	rel-5-3:1.9
	rel-5-2:1.9
	rel-5-1-branch:1.9.0.2
	rel-5-1:1.9
	rel-5-0:1.8
	rel-5-0-beta:1.8
	rel-4-5:1.7
	ctj-4-5-post:1.7
	ctj-4-5-pre:1.7;
locks; strict;
comment	@ * @;


1.17
date	2004.05.21.14.57.50;	author morrison;	state dead;
branches;
next	1.16;

1.16
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.02.17.39.46;	author morrison;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.20.17.09.02;	author jra;	state Exp;
branches
	1.13.2.1
	1.13.4.1
	1.13.10.1;
next	1.12;

1.12
date	2002.08.15.20.56.13;	author hartley;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.10.20.57.06;	author butler;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.23.19.04.44;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.31.16.03.09;	author jra;	state Exp;
branches;
next	1.8;

1.8
date	98.06.01.19.56.24;	author pjt;	state Exp;
branches;
next	1.7;

1.7
date	96.12.23.13.59.58;	author jra;	state Exp;
branches;
next	1.6;

1.6
date	96.12.13.15.05.51;	author jra;	state Exp;
branches;
next	1.5;

1.5
date	96.07.22.17.38.51;	author pjt;	state Exp;
branches;
next	1.4;

1.4
date	96.03.01.17.26.10;	author pjt;	state Exp;
branches;
next	1.3;

1.3
date	96.01.26.21.16.32;	author pjt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.26.18.35.57;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	96.01.24.21.39.58;	author pjt;	state Exp;
branches;
next	;

1.13.2.1
date	2002.09.19.18.02.40;	author morrison;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2004.03.17.21.23.28;	author morrison;	state Exp;
branches;
next	;

1.13.4.1
date	2004.03.11.23.52.31;	author morrison;	state Exp;
branches;
next	;

1.13.10.1
date	2004.02.12.19.43.10;	author erikg;	state Exp;
branches;
next	1.13.10.2;

1.13.10.2
date	2004.03.15.14.08.13;	author erikg;	state Exp;
branches;
next	;


desc
@     add a 1-pixel-wide border to regions of a specified color
@


1.17
log
@moved to src/util/
@
text
@/*
 *			P I X B O R D E R . C
 *
 *	Add a 1-pixel-wide border to regions of a specified color.
 *
 *  Author -
 *	Paul J. Tanenbaum
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1996-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/pixborder.c,v 1.16 2004/05/10 15:30:50 erikg Exp $ (ARL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "externs.h"		/* For getopt, etc */
#include "vmath.h"
#include "bu.h"
#include "bn.h"
#include "fb.h"

#define	ACHROMATIC	-1.0
#define	HUE		0
#define	SAT		1
#define	VAL		2

static char		*file_name;
static FILE		*infp;

static int		fileinput = 0;	/* Is input a file (not stdin)? */
static int		autosize = 0;	/* Try to guess input dimensions? */
static int		tol_using_rgb = 1; /* Compare via RGB, not HSV? */

static int		file_width = 512;
static int		file_height = 512;

static int		left_edge = -1;
static int		right_edge = -1;
static int		bottom_edge = -1;
static int		top_edge = -1;

#define	COLORS_NEITHER	0
#define	COLORS_INTERIOR	1
#define	COLORS_EXTERIOR	2
#define	COLORS_BOTH	(COLORS_INTERIOR | COLORS_EXTERIOR)
static int		colors_specified = COLORS_NEITHER;

static unsigned char	border_rgb[3];
static unsigned char	exterior_rgb[3];
static unsigned char	interior_rgb[3];
static unsigned char	rgb_tol[3];

fastf_t			border_hsv[3];
fastf_t			exterior_hsv[3];
fastf_t			interior_hsv[3];
fastf_t			hsv_tol[3];

#define	OPT_STRING	"ab:e:hi:n:s:t:w:x:y:B:E:I:T:X:Y:?"

static char usage[] = "\
Usage: pixborder [-b 'R G B'] [-e 'R G B'] [-i 'R G B'] [-t 'R G B']\n\
                 [-B 'H S V'] [-E 'H S V'] [-I 'H S V'] [-T 'H S V']\n\
		 [-x left_edge]  [-y bottom_edge]\n\
		 [-X right_edge] [-Y top_edge]\n\
                 [-ah] [-s squaresize] [-w file_width] [-n file_height]\n\
                 [file.pix]\n";

/*
 *		    R E A D _ H S V ( )
 *
 *	Read in an HSV triple.
 */
static int read_hsv (fastf_t *hsvp, char *buf)
{
    double	tmp[3];

    if (sscanf(buf, "%lf %lf %lf", tmp, tmp + 1, tmp + 2) != 3)
	return (0);
    if ((tmp[HUE] < 0.0) || (tmp[HUE] > 360.0)
     || (tmp[SAT] < 0.0) || (tmp[SAT] >   1.0)
     || (tmp[VAL] < 0.0) || (tmp[VAL] >   1.0))
	    return (0);
    if (tmp[SAT] == 0.0)
	tmp[HUE] = ACHROMATIC;
    VMOVE(hsvp, tmp);
    return (1);
}

/*
 *		    R E A D _ R O W ( )
 */
static int read_row (unsigned char *rp, int file_width, FILE *infp)
{
    if (fread(rp + 3, 3, file_width, infp) != file_width)
	return (0);
    *(rp + RED) = *(rp + GRN) = *(rp + BLU) = 0;
    *(rp + 3 * (file_width + 1) + RED) =
    *(rp + 3 * (file_width + 1) + GRN) =
    *(rp + 3 * (file_width + 1) + BLU) = 0;
    return (1);
}

/*
 *		Convert between RGB and HSV color models
 *
 *	R, G, and B are in {0, 1, ..., 255},
 *	H is in [0.0, 360.0), and S and V are in [0.0, 1.0],
 *	unless S = 0.0, in which case H = ACHROMATIC.
 *
 *	These two routines are adapted from
 *	pp. 592-3 of J.D. Foley, A. van Dam, S.K. Feiner, and J.F. Hughes,
 *	_Computer graphics: principles and practice_, 2nd ed., Addison-Wesley,
 *	Reading, MA, 1990.
 */

/*
 *		R G B _ T O _ H S V ( )
 */
static void rgb_to_hsv (unsigned char *rgb, fastf_t *hsv)
{
    fastf_t	red, grn, blu;
    fastf_t	*hue = &hsv[HUE];
    fastf_t	*sat = &hsv[SAT];
    fastf_t	*val = &hsv[VAL];
    fastf_t	max, min;
    fastf_t	delta;

    /*
     *	Compute value
     */
    max = min = red = (fastf_t)rgb[RED] / 255.0;

    grn = (fastf_t)rgb[GRN] / 255.0;
    if (grn < min)
	min = grn;
    else if (grn > max)
	max = grn;

    blu = (fastf_t)rgb[BLU] / 255.0;
    if (blu < min)
	min = blu;
    else if (blu > max)
	max = blu;

    *val = max;

    /*
     *	Compute saturation
     */
    delta = max - min;
    if (max > 0.0)
	*sat = delta / max;
    else
	*sat = 0.0;
    
    /*
     *	Compute hue
     */
    if (*sat == 0.0)
	*hue = ACHROMATIC;
    else
    {
	if (red == max)
	    *hue = (grn - blu) / delta;
	else if (grn == max)
	    *hue = 2.0 + (blu - red) / delta;
	else if (blu == max)
	    *hue = 4.0 + (red - grn) / delta;

	/*
	 *	Convert hue to degrees
	 */
	*hue *= 60.0;
	if (*hue < 0.0)
	    *hue += 360.0;
    }
}

/*
 *		H S V _ T O _ R G B ( )
 */
int hsv_to_rgb (fastf_t *hsv, unsigned char *rgb)
{
    fastf_t	float_rgb[3];
    fastf_t	hue, sat, val;
    fastf_t	hue_frac;
    fastf_t	p, q, t;
    int		hue_int;

    hue = hsv[HUE];
    sat = hsv[SAT];
    val = hsv[VAL];

    if (sat == 0.0)
	if (hue == ACHROMATIC)
	    VSETALL(float_rgb, val)
	else
	{
	    (void) fprintf(stderr, "Illegal HSV (%g, %g, %g)\n",
		    V3ARGS(hsv));
	    return (0);
	}
    else
    {
	if (hue == 360.0)
	    hue = 0.0;
	hue /= 60.0;
	hue_int = floor((double) hue);
	hue_frac = hue - hue_int;
	p = val * (1.0 - sat);
	q = val * (1.0 - (sat * hue_frac));
	t = val * (1.0 - (sat * (1.0 - hue_frac)));
	switch (hue_int)
	{
	    case 0: VSET(float_rgb, val, t, p); break;
	    case 1: VSET(float_rgb, q, val, p); break;
	    case 2: VSET(float_rgb, p, val, t); break;
	    case 3: VSET(float_rgb, p, q, val); break;
	    case 4: VSET(float_rgb, t, p, val); break;
	    case 5: VSET(float_rgb, val, p, q); break;
	    default:
		(void) fprintf(stderr, "%s:%d: This shouldn't happen\n",
		    __FILE__, __LINE__);
		exit (1);
	}
    }

    rgb[RED] = float_rgb[RED] * 255;
    rgb[GRN] = float_rgb[GRN] * 255;
    rgb[BLU] = float_rgb[BLU] * 255;

    return (1);
}

/*
 *		    S A M E _ R G B ( )
 */
static int same_rgb (unsigned char *color1, unsigned char *color2)
{
    return ((abs(color1[RED] - color2[RED]) <= (int) rgb_tol[RED]) &&
	    (abs(color1[GRN] - color2[GRN]) <= (int) rgb_tol[GRN]) &&
	    (abs(color1[BLU] - color2[BLU]) <= (int) rgb_tol[BLU]));
}

/*
 *		    S A M E _ H S V ( )
 */
static int same_hsv (fastf_t *color1, fastf_t *color2)
{
    return ((fabs(color1[HUE] - color2[HUE]) <= hsv_tol[HUE]) &&
	    (fabs(color1[SAT] - color2[SAT]) <= hsv_tol[SAT]) &&
	    (fabs(color1[VAL] - color2[VAL]) <= hsv_tol[VAL]));
}

/*
 *			I S _ I N T E R I O R ( )
 */
static int is_interior (unsigned char *pix_rgb)
{
    if (tol_using_rgb)
	return ((colors_specified == COLORS_EXTERIOR)	?
		(! same_rgb(pix_rgb, exterior_rgb))	:
		   same_rgb(pix_rgb, interior_rgb));
    else
    {
	fastf_t	pix_hsv[3];

	rgb_to_hsv(pix_rgb, pix_hsv);
	return ((colors_specified == COLORS_EXTERIOR)	?
		(! same_hsv(pix_hsv, exterior_hsv))	:
		   same_hsv(pix_hsv, interior_hsv));
    }
}

/*
 *			I S _ E X T E R I O R ( )
 */
static int is_exterior (unsigned char *pix_rgb)
{
    if (tol_using_rgb)
	return ((colors_specified == COLORS_INTERIOR)	?
		(! same_rgb(pix_rgb, interior_rgb))	:
		   same_rgb(pix_rgb, exterior_rgb));
    else
    {
	fastf_t	pix_hsv[3];

	rgb_to_hsv(pix_rgb, pix_hsv);
	return ((colors_specified == COLORS_INTERIOR)	?
		(! same_hsv(pix_hsv, interior_hsv))	:
		   same_hsv(pix_hsv, exterior_hsv));
    }
}

/*
 *		    I S _ B O R D E R ( )
 */
static int is_border (unsigned char *prp, unsigned char *trp, unsigned char *nrp, int col_nm)

             	     		/* Previous row */
             	     		/* Current (this) row */
             	     		/* Next row */
   		       		/* Current column */

{
    unsigned char	pix_rgb[3];

    VMOVE(pix_rgb, trp + (col_nm + 1) * 3);

    /*
     *	Ensure that this pixel is in a region of interest
     */
    if (! is_interior(pix_rgb))
	return (0);

    /*
     *	Check its left and right neighbors
     */
    VMOVE(pix_rgb, trp + (col_nm + 0) * 3);
    if (is_exterior(pix_rgb))
	return (1);
    VMOVE(pix_rgb, trp + (col_nm + 2) * 3);
    if (is_exterior(pix_rgb))
	return (1);

    /*
     *	Check its upper and lower neighbors
     */
    VMOVE(pix_rgb, nrp + (col_nm + 1) * 3);
    if (is_exterior(pix_rgb))
	return (1);
    VMOVE(pix_rgb, prp + (col_nm + 1) * 3);
    if (is_exterior(pix_rgb))
	return (1);
    
    /*
     *	All four of its neighbors are also in the region
     */
    return (0);
}

/*
 *		    G E T _ A R G S ( )
 */
static int
get_args (int argc, register char **argv)
{
    register int c;

    while ((c = getopt( argc, argv, OPT_STRING)) != EOF)
    {
	switch (c)
	{
	    case 'a':
		autosize = 1;
		break;
	    case 'b':
		if (! bu_str_to_rgb(optarg, border_rgb))
		{
		    (void) fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		break;
	    case 'e':
		if (! bu_str_to_rgb(optarg, exterior_rgb))
		{
		    (void) fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		rgb_to_hsv(exterior_rgb, exterior_hsv);
		colors_specified |= COLORS_EXTERIOR;
		break;
	    case 'h':
		file_height = file_width = 1024;
		autosize = 0;
		break;
	    case 'i':
		if (! bu_str_to_rgb(optarg, interior_rgb))
		{
		    (void) fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		rgb_to_hsv(interior_rgb, interior_hsv);
		colors_specified |= COLORS_INTERIOR;
		break;
	    case 'n':
		file_height = atoi(optarg);
		autosize = 0;
		break;
	    case 's':
		file_height = file_width = atoi(optarg);
		autosize = 0;
		break;
	    case 't':
		if (! bu_str_to_rgb(optarg, rgb_tol))
		{
		    (void) fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		tol_using_rgb = 1;
		break;
	    case 'w':
		file_width = atoi(optarg);
		autosize = 0;
		break;
	    case 'x':
		left_edge = atoi(optarg);
		break;
	    case 'y':
		bottom_edge = atoi(optarg);
		break;
	    case 'B':
		if (! read_hsv(border_hsv, optarg))
		{
		    (void) fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		hsv_to_rgb(border_hsv, border_rgb);
		break;
	    case 'E':
		if (! read_hsv(exterior_hsv, optarg))
		{
		    (void) fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		hsv_to_rgb(exterior_hsv, exterior_rgb);
		colors_specified |= COLORS_EXTERIOR;
		break;
	    case 'I':
		if (! read_hsv(interior_hsv, optarg))
		{
		    (void) fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		hsv_to_rgb(interior_hsv, interior_rgb);
		colors_specified |= COLORS_INTERIOR;
		break;
	    case 'T':
		if (! read_hsv(hsv_tol, optarg))
		{
		    (void) fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		tol_using_rgb = 0;
		break;
	    case 'X':
		right_edge = atoi(optarg);
		break;
	    case 'Y':
		top_edge = atoi(optarg);
		break;
	    case '?':
		(void) fputs(usage, stderr);
		exit (0);
	    default:
		return (0);
	}
    }

    if (optind >= argc)
    {
	if(isatty(fileno(stdin)))
	    return(0);
	file_name = "stdin";
	infp = stdin;
    }
    else
    {
	file_name = argv[optind];
	if ((infp = fopen(file_name, "r")) == NULL)
	{
	    perror(file_name);
	    (void) fprintf(stderr, "Cannot open file '%s'\n", file_name);
	    return (0);
	}
	++fileinput;
    }

    if (argc > ++optind)
	(void) fprintf(stderr, "pixborder: excess argument(s) ignored\n");

    if (left_edge == -1)
	left_edge = 0;
    if (right_edge == -1)
	right_edge = file_width - 1;
    if (bottom_edge == -1)
	bottom_edge = 0;
    if (top_edge == -1)
	top_edge = file_height - 1;
    return (1);
}

/*
 *			M A I N ( )
 */
int
main (int argc, char **argv)
{
    char		*outbuf;
    unsigned char	*inrow[3];
    int			col_nm;
    int			i;
    int			next_row;
    int			prev_row;
    int			row_nm;
    int			this_row;

    VSETALL(border_rgb,     1);
    rgb_to_hsv(border_rgb, border_hsv);
    VSETALL(exterior_rgb,   1);
    rgb_to_hsv(exterior_rgb, exterior_hsv);
    VSETALL(interior_rgb, 255);
    rgb_to_hsv(interior_rgb, interior_hsv);
    VSETALL(rgb_tol,        0);

    if (!get_args( argc, argv ))
    {
	(void) fputs(usage, stderr);
	exit (1);
    }

#if 0
    (void) fprintf(stderr,
	"We'll put a border of %d/%d/%d around regions of %d/%d/%d\n",
	V3ARGS(border_rgb), V3ARGS(interior_rgb));
    if (tol_using_rgb)
	(void) fprintf(stderr, "With an RGB tol of %d/%d/%d\n",
	V3ARGS(rgb_tol));
    else
	(void) fprintf(stderr, "With an HSV tol of %g/%g/%g\n",
	V3ARGS(hsv_tol));
#endif

    /*
     *	Autosize the input if appropriate
     */
    if (fileinput && autosize)
    {
	int	w, h;

	if (bn_common_file_size(&w, &h, file_name, 3))
	{
	    file_width = w;
	    file_height = h;
	}
	else
	    (void) fprintf(stderr, "pixborder: unable to autosize\n");
    }

    /*
     *	Allocate a 1-scanline output buffer
     *	and a circular input buffer of 3 scanlines
     */
    outbuf = malloc(3*file_width);
    for (i = 0; i < 3; ++i)
	inrow[i] = malloc(3*(file_width + 2));
    prev_row = 0;
    this_row = 1;
    next_row = 2;

    /*
     *	Initialize previous-row buffer
     */
    for (i = 0; i < 3 * (file_width + 2); ++i)
	*(inrow[prev_row] + i) = 0;

    /*
     *	Initialize current- and next-row buffers
     */
    if ((! read_row(inrow[this_row], file_width, infp))
     || (! read_row(inrow[next_row], file_width, infp)))
    {
	perror(file_name);
	(void) fprintf(stderr, "pixborder:  fread() error\n");
	exit(1);
    }

    /*
     *		Do the filtering
     */
    for (row_nm = 0; row_nm < file_height; ++row_nm)
    {
	/*
	 *	Fill the output-scanline buffer
	 */
	if ((row_nm < bottom_edge) || (row_nm > top_edge))
	{
	    if (fwrite(inrow[this_row] + 3, 3, file_width, stdout)
		!= file_width)
	    {
		perror("stdout");
		exit(2);
	    }
	}
	else
	{
	    for (col_nm = 0; col_nm < file_width; ++col_nm)
	    {
		unsigned char	*color_ptr;

		if ((col_nm >= left_edge) && (col_nm <= right_edge)
		 && is_border(inrow[prev_row], inrow[this_row],
			    inrow[next_row], col_nm))
		    color_ptr = border_rgb;
		else
		    color_ptr = inrow[this_row] + (col_nm + 1) * 3;

		VMOVE(outbuf + col_nm * 3, color_ptr);
	    }

	    /*
	     *	Write the output scanline
	     */
	    if (fwrite(outbuf, 3, file_width, stdout) != file_width)
	    {
		perror("stdout");
		exit(2);
	    }
	}

	/*
	 *	Advance the circular input buffer
	 */
	prev_row = this_row;
	this_row = next_row;
	next_row = ++next_row % 3;

	/*
	 *	Grab the next input scanline
	 */
	if (row_nm < file_height - 2)
	{
	    if (! read_row(inrow[next_row], file_width, infp))
	    {
		perror(file_name);
		(void) fprintf(stderr, "pixborder:  fread() error\n");
		exit(1);
	    }
	}
	else
	    for (i = 0; i < 3 * (file_width + 2); ++i)
		*(inrow[next_row] + i) = 0;
    }

    exit (1);
}
@


1.16
log
@change conf.h to a wrapped config.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pixborder.c,v 1.15 2004/04/05 05:46:02 morrison Exp $ (ARL)";
@


1.15
log
@merge of ansi-6-0-branch into head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d26 5
a30 1
#include "conf.h"
@


1.14
log
@update copyright to include span through 2003
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixborder.c,v 1.13 2002/08/20 17:09:02 jra Exp $ (ARL)";
d89 1
a89 5
static int read_hsv (hsvp, buf)

fastf_t *hsvp;
char	*buf;

d108 1
a108 6
static int read_row (rp, file_width, infp)

unsigned char	*rp;
int		file_width;
FILE		*infp;

d135 1
a135 5
static void rgb_to_hsv (rgb, hsv)

unsigned char	*rgb;
fastf_t		*hsv;

d198 1
a198 5
int hsv_to_rgb (hsv, rgb)

fastf_t		*hsv;
unsigned char	*rgb;

d254 1
a254 5
static int same_rgb (color1, color2)

unsigned char	*color1;
unsigned char	*color2;

d264 1
a264 5
static int same_hsv (color1, color2)

fastf_t	*color1;
fastf_t	*color2;

d274 1
a274 4
static int is_interior (pix_rgb)

unsigned char	*pix_rgb;

d294 1
a294 4
static int is_exterior (pix_rgb)

unsigned char	*pix_rgb;

d314 1
a314 1
static int is_border (prp, trp, nrp, col_nm)
d316 4
a319 4
unsigned char	*prp;		/* Previous row */
unsigned char	*trp;		/* Current (this) row */
unsigned char	*nrp;		/* Next row */
int		col_nm;		/* Current column */
d362 1
a362 5
get_args (argc, argv)

int		argc;
register char **argv;

d513 1
a513 5
main (argc, argv)

int	argc;
char	*argv[];

@


1.13
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1996 by the United States Army
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixborder.c,v 1.11 2001/08/10 20:57:06 butler Exp $ (ARL)";
@


1.13.4.1
log
@sync to HEAD...
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1996-2004 by the United States Army
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/pixborder.c,v 1.14 2004/02/02 17:39:46 morrison Exp $ (ARL)";
@


1.13.10.1
log
@merge from HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1996-2004 by the United States Army
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixborder.c,v 1.14 2004/02/02 17:39:46 morrison Exp $ (ARL)";
@


1.13.10.2
log
@merge from head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixborder.c,v 1.13.10.1 2004/02/12 19:43:10 erikg Exp $ (ARL)";
@


1.13.2.1
log
@Initial ANSIfication
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixborder.c,v 1.13 2002/08/20 17:09:02 jra Exp $ (ARL)";
d89 5
a93 1
static int read_hsv (fastf_t *hsvp, char *buf)
d112 6
a117 1
static int read_row (unsigned char *rp, int file_width, FILE *infp)
d144 5
a148 1
static void rgb_to_hsv (unsigned char *rgb, fastf_t *hsv)
d211 5
a215 1
int hsv_to_rgb (fastf_t *hsv, unsigned char *rgb)
d271 5
a275 1
static int same_rgb (unsigned char *color1, unsigned char *color2)
d285 5
a289 1
static int same_hsv (fastf_t *color1, fastf_t *color2)
d299 4
a302 1
static int is_interior (unsigned char *pix_rgb)
d322 4
a325 1
static int is_exterior (unsigned char *pix_rgb)
d345 1
a345 1
static int is_border (unsigned char *prp, unsigned char *trp, unsigned char *nrp, int col_nm)
d347 4
a350 4
             	     		/* Previous row */
             	     		/* Current (this) row */
             	     		/* Next row */
   		       		/* Current column */
d393 5
a397 1
get_args (int argc, register char **argv)
d548 5
a552 1
main (int argc, char **argv)
@


1.13.2.2
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1996-2004 by the United States Army
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
@


1.12
log
@Converted from K&R to ANSI C - RFH
@
text
@d89 5
a93 1
static int read_hsv (fastf_t *hsvp, char *buf)
d112 6
a117 1
static int read_row (unsigned char *rp, int file_width, FILE *infp)
d144 5
a148 1
static void rgb_to_hsv (unsigned char *rgb, fastf_t *hsv)
d211 5
a215 1
int hsv_to_rgb (fastf_t *hsv, unsigned char *rgb)
d271 5
a275 1
static int same_rgb (unsigned char *color1, unsigned char *color2)
d285 5
a289 1
static int same_hsv (fastf_t *color1, fastf_t *color2)
d299 4
a302 1
static int is_interior (unsigned char *pix_rgb)
d322 4
a325 1
static int is_exterior (unsigned char *pix_rgb)
d345 1
a345 1
static int is_border (unsigned char *prp, unsigned char *trp, unsigned char *nrp, int col_nm)
d347 4
a350 4
             	     		/* Previous row */
             	     		/* Current (this) row */
             	     		/* Next row */
   		       		/* Current column */
d393 5
a397 1
get_args (int argc, register char **argv)
d548 5
a552 1
main (int argc, char **argv)
@


1.11
log
@Misc compiler warnings eliminated
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixborder.c,v 1.10 2000/08/23 19:04:44 mike Exp $ (ARL)";
d89 1
a89 5
static int read_hsv (hsvp, buf)

fastf_t *hsvp;
char	*buf;

d108 1
a108 6
static int read_row (rp, file_width, infp)

unsigned char	*rp;
int		file_width;
FILE		*infp;

d135 1
a135 5
static void rgb_to_hsv (rgb, hsv)

unsigned char	*rgb;
fastf_t		*hsv;

d198 1
a198 5
int hsv_to_rgb (hsv, rgb)

fastf_t		*hsv;
unsigned char	*rgb;

d254 1
a254 5
static int same_rgb (color1, color2)

unsigned char	*color1;
unsigned char	*color2;

d264 1
a264 5
static int same_hsv (color1, color2)

fastf_t	*color1;
fastf_t	*color2;

d274 1
a274 4
static int is_interior (pix_rgb)

unsigned char	*pix_rgb;

d294 1
a294 4
static int is_exterior (pix_rgb)

unsigned char	*pix_rgb;

d314 1
a314 1
static int is_border (prp, trp, nrp, col_nm)
d316 4
a319 4
unsigned char	*prp;		/* Previous row */
unsigned char	*trp;		/* Current (this) row */
unsigned char	*nrp;		/* Next row */
int		col_nm;		/* Current column */
d362 1
a362 5
get_args (argc, argv)

int		argc;
register char **argv;

d513 1
a513 5
main (argc, argv)

int	argc;
char	*argv[];

@


1.10
log
@
const RCSid
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixborder.c,v 1.9 2000/01/31 16:03:09 jra Exp $ (ARL)";
d35 1
d392 2
a393 1
static get_args (argc, argv)
d547 1
@


1.9
log
@Eliminated some unused variables
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixborder.c,v 1.8 1998/06/01 19:56:24 pjt Exp $ (ARL)";
@


1.8
log
@Converted to use bu_str_to_rgb()
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /n/vapor/m/cad/util/RCS/pixborder.c,v 1.7 1996/12/23 13:59:58 jra Exp pjt $ (ARL)";
a94 1
    int		i;
a352 1
    fastf_t		pix_hsv[3];
@


1.7
log
@Added cast to rgb[*]/255.0 (ANSI C wants it).
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixborder.c,v 1.6 1996/12/13 15:05:51 jra Exp jra $ (ARL)";
d34 1
a74 3
#define	made_it()	(void) fprintf(stderr, "Made it to %s:%d\n",	\
				__FILE__, __LINE__);			\
				fflush(stderr)
a83 24
 *		    R E A D _ R G B ( )
 *
 *	Read in an RGB triple as ints and then (implicitly)
 *	cast them as unsigned chars.
 */
static int read_rgb (rgbp, buf)

unsigned char	*rgbp;
char		*buf;

{
    int		tmp[3];
    int		i;

    if (sscanf(buf, "%d %d %d", tmp, tmp + 1, tmp + 2) != 3)
	return (0);
    for (i = 0; i < 3; ++i)
	if ((tmp[i] < 0) || (tmp[i] > 255))
	    return (0);
    VMOVE(rgbp, tmp);
    return (1);
}

/*
d409 1
a409 1
		if (! read_rgb(border_rgb, optarg))
d416 1
a416 1
		if (! read_rgb(exterior_rgb, optarg))
d429 1
a429 1
		if (! read_rgb(interior_rgb, optarg))
d446 1
a446 1
		if (! read_rgb(rgb_tol, optarg))
@


1.6
log
@Mods to account for asize routines now in libbn.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixborder.c,v 1.5 1996/07/22 17:38:51 pjt Exp jra $ (ARL)";
d186 1
a186 1
    max = min = red = rgb[RED] / 255.0;
d188 1
a188 1
    grn = rgb[GRN] / 255.0;
d194 1
a194 1
    blu = rgb[BLU] / 255.0;
@


1.5
log
@Commented out some diagnostic print statements
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixborder.c,v 1.4 1996/03/01 17:26:10 pjt Exp pjt $ (ARL)";
d621 1
a621 1
	if (fb_common_file_size(&w, &h, file_name, 3))
@


1.4
log
@Implemented -e and -E options
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixborder.c,v 1.3 1996/01/26 21:16:32 pjt Exp pjt $ (ARL)";
d74 2
a75 2
#define	made_it()	fprintf(stderr, "Made it to %s:%d\n",	\
				__FILE__, __LINE__);		\
d281 1
a281 1
		fprintf(stderr, "%s:%d: This shouldn't happen\n",
d437 1
a437 1
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
d444 1
a444 1
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
d457 1
a457 1
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
d474 1
a474 1
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
d492 1
a492 1
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
d500 1
a500 1
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
d509 1
a509 1
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
d518 1
a518 1
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
d602 2
a603 1
    fprintf(stderr,
d607 2
a608 1
	fprintf(stderr, "With an RGB tol of %d/%d/%d\n", V3ARGS(rgb_tol));
d610 3
a612 1
	fprintf(stderr, "With an HSV tol of %g/%g/%g\n", V3ARGS(hsv_tol));
d627 1
a627 1
	    fprintf(stderr, "pixhalve: unable to autosize\n");
d654 1
a654 1
	fprintf(stderr, "pixborder:  fread() error\n");
d716 1
a716 1
		fprintf(stderr, "pixborder:  fread() error\n");
@


1.3
log
@Implemented the -x, -y, -X, and -Y options
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixborder.c,v 1.2 1996/01/26 18:35:57 pjt Exp pjt $ (ARL)";
d56 6
d63 2
a64 1
static unsigned char	region_rgb[3];
d68 2
a69 1
fastf_t			region_hsv[3];
d72 1
a72 1
#define	OPT_STRING	"ab:hi:n:s:t:w:x:y:B:I:T:X:Y:?"
d78 3
a80 3
Usage: pixborder [-b 'R G B'] [-i 'R G B'] [-t 'R G B']\n\
                 [-B 'H S V'] [-I 'H S V'] [-T 'H S V']\n\
		 [-x left_edge] [-y bottom_edge]\n\
a135 133
 *		    G E T _ A R G S ( )
 */
static get_args (argc, argv)

int		argc;
register char **argv;

{
    register int c;

    while ((c = getopt( argc, argv, OPT_STRING)) != EOF)
    {
	switch (c)
	{
	    case 'a':
		autosize = 1;
		break;
	    case 'b':
		if (! read_rgb(border_rgb, optarg))
		{
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		break;
	    case 'h':
		file_height = file_width = 1024;
		autosize = 0;
		break;
	    case 'i':
		if (! read_rgb(region_rgb, optarg))
		{
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		break;
	    case 'n':
		file_height = atoi(optarg);
		autosize = 0;
		break;
	    case 's':
		file_height = file_width = atoi(optarg);
		autosize = 0;
		break;
	    case 't':
		if (! read_rgb(rgb_tol, optarg))
		{
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		tol_using_rgb = 1;
		break;
	    case 'w':
		file_width = atoi(optarg);
		autosize = 0;
		break;
	    case 'x':
		left_edge = atoi(optarg);
		break;
	    case 'y':
		bottom_edge = atoi(optarg);
		break;
	    case 'B':
		if (! read_hsv(border_hsv, optarg))
		{
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		hsv_to_rgb(border_hsv, border_rgb);
		break;
	    case 'I':
		if (! read_hsv(region_hsv, optarg))
		{
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		hsv_to_rgb(region_hsv, region_rgb);
		break;
	    case 'T':
		if (! read_hsv(hsv_tol, optarg))
		{
		    fprintf(stderr, "Illegal color: '%s'\n", optarg);
		    return (0);
		}
		tol_using_rgb = 0;
		break;
	    case 'X':
		right_edge = atoi(optarg);
		break;
	    case 'Y':
		top_edge = atoi(optarg);
		break;
	    case '?':
		(void) fputs(usage, stderr);
		exit (0);
	    default:
		return (0);
	}
    }

    if (optind >= argc)
    {
	if(isatty(fileno(stdin)))
	    return(0);
	file_name = "stdin";
	infp = stdin;
    }
    else
    {
	file_name = argv[optind];
	if ((infp = fopen(file_name, "r")) == NULL)
	{
	    perror(file_name);
	    (void) fprintf(stderr, "Cannot open file '%s'\n", file_name);
	    return (0);
	}
	++fileinput;
    }

    if (argc > ++optind)
	(void) fprintf(stderr, "pixborder: excess argument(s) ignored\n");

    if (left_edge == -1)
	left_edge = 0;
    if (right_edge == -1)
	right_edge = file_width - 1;
    if (bottom_edge == -1)
	bottom_edge = 0;
    if (top_edge == -1)
	top_edge = file_height - 1;
    return (1);
}

/*
d323 46
d371 1
a371 1
static int is_border (prp, trp, nrp, col_nm, use_rgb)
a376 1
int		use_rgb;	/* Instead of HSV? */
d384 154
a537 1
    if (use_rgb)
d539 4
a542 25
	/*
	 *	Ensure that this pixel is in a region of interest
	 */
	if (! same_rgb(pix_rgb, region_rgb))
	    return (0);
	
	/*
	 *	Check its left and right neighbors
	 */
	 VMOVE(pix_rgb, trp + (col_nm + 0) * 3);
	 if (! same_rgb(pix_rgb, region_rgb))
	    return (1);
	 VMOVE(pix_rgb, trp + (col_nm + 2) * 3);
	 if (! same_rgb(pix_rgb, region_rgb))
	    return (1);
	
	/*
	 *	Check its upper and lower neighbors
	 */
	 VMOVE(pix_rgb, prp + (col_nm + 1) * 3);
	 if (! same_rgb(pix_rgb, region_rgb))
	    return (1);
	 VMOVE(pix_rgb, nrp + (col_nm + 1) * 3);
	 if (! same_rgb(pix_rgb, region_rgb))
	    return (1);
d546 5
a550 5
	/*
	 *	Ensure that this pixel is in a region of interest
	 */
	rgb_to_hsv(pix_rgb, pix_hsv);
	if (! same_hsv(pix_hsv, region_hsv))
d552 2
a553 24
	
	/*
	 *	Check its left and right neighbors
	 */
	VMOVE(pix_rgb, trp + (col_nm + 0) * 3);
	rgb_to_hsv(pix_rgb, pix_hsv);
	if (! same_hsv(pix_hsv, region_hsv))
	    return (1);
	VMOVE(pix_rgb, trp + (col_nm + 2) * 3);
	rgb_to_hsv(pix_rgb, pix_hsv);
	if (! same_hsv(pix_hsv, region_hsv))
	    return (1);
	
	/*
	 *	Check its upper and lower neighbors
	 */
	VMOVE(pix_rgb, prp + (col_nm + 1) * 3);
	rgb_to_hsv(pix_rgb, pix_hsv);
	if (! same_hsv(pix_hsv, region_hsv))
	    return (1);
	VMOVE(pix_rgb, nrp + (col_nm + 1) * 3);
	rgb_to_hsv(pix_rgb, pix_hsv);
	if (! same_hsv(pix_hsv, region_hsv))
	    return (1);
d555 13
a567 5
    
    /*
     *	All four of its neighbors are also in the region
     */
     return (0);
d588 7
a594 3
    VSETALL(border_rgb, 1);
    VSETALL(region_rgb, 255);
    VSETALL(rgb_tol, 0);
d604 1
a604 1
	V3ARGS(border_rgb), V3ARGS(region_rgb));
d679 1
a679 1
			    inrow[next_row], col_nm, tol_using_rgb))
@


1.2
log
@1. Added support for HSV color model (-B, -I, and -T options)
2. Fixed a bug in the actual filtering
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixborder.c,v 1.1 1996/01/24 21:39:58 pjt Exp pjt $ (ARL)";
d51 5
d64 1
a64 1
#define	OPT_STRING	"ab:hi:s:t:w:n:B:I:T:?"
d72 2
d183 6
d213 6
a220 1
		made_it();
a222 1
		made_it();
d249 8
a556 1
	made_it();
d620 1
a620 1
	for (col_nm = 0; col_nm < file_width; ++col_nm)
d622 6
a627 8
	    unsigned char	*color_ptr;

	    color_ptr = is_border(inrow[prev_row], inrow[this_row],
				    inrow[next_row], col_nm, tol_using_rgb)
		    ? border_rgb
		    : inrow[this_row] + (col_nm + 1) * 3;

	    VMOVE(outbuf + col_nm * 3, color_ptr);
d629 1
a629 5

	/*
	 *	Write the output scanline
	 */
	if (fwrite(outbuf, 3, file_width, stdout) != file_width)
d631 22
a652 2
	    perror("stdout");
	    exit(2);
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header$ (ARL)";
d36 5
d46 1
d51 7
a57 3
static unsigned char	border_color[3];
static unsigned char	region_color[3];
static unsigned char	color_tol[3];
d59 1
a59 1
#define	OPT_STRING	"ab:hi:s:t:w:n:?"
d66 3
a68 1
	[-ah] [-s squaresize] [-w file_width] [-n file_height] [file.pix]\n";
d73 1
a73 1
 *	Read in an R/G/B triple as ints and then (implicitly)
d78 2
a79 2
unsigned char *rgbp;
char *buf;
d95 26
d139 1
a139 1
		if (! read_rgb(border_color, optarg))
d150 1
a150 1
		if (! read_rgb(region_color, optarg))
d165 1
a165 1
		if (! read_rgb(color_tol, optarg))
d170 1
d176 24
d201 3
d205 2
a206 1
		return (c == '?');
d255 141
a395 1
 *		    S A M E _ C O L O R ( )
d397 1
a397 1
same_color (color1, color2)
d403 17
a419 3
    return ((abs(*(color1 + RED) - *(color2 + RED)) <= (int) color_tol[RED]) &&
	    (abs(*(color1 + GRN) - *(color2 + GRN)) <= (int) color_tol[GRN]) &&
	    (abs(*(color1 + BLU) - *(color2 + BLU)) <= (int) color_tol[BLU]));
d425 1
a425 1
static int is_border (prp, trp, nrp, col_nm, interior_color)
d427 5
a431 5
unsigned char	*prp;	/* Previous row */
unsigned char	*trp;	/* Current (this) row */
unsigned char	*nrp;	/* Next row */
int		col_nm;
unsigned char	*interior_color;
d434 2
a435 1
    unsigned char	pixel[3];
d437 1
a437 1
    VMOVE(pixel, trp + (col_nm + 1) * 3);
d439 61
a499 5
    /*
     *	Ensure that this pixel is in a region of interest
     */
    if (! same_color(pixel, interior_color))
	return (0);
a501 20
     *	Check its left and right neighbors
     */
     VMOVE(pixel, trp + (col_nm + 0) * 3);
     if (! same_color(pixel, interior_color))
	return (1);
     VMOVE(pixel, trp + (col_nm + 2) * 3);
     if (! same_color(pixel, interior_color))
	return (1);
    
    /*
     *	Check its upper and lower neighbors
     */
     VMOVE(pixel, prp + (col_nm + 1) * 3);
     if (! same_color(pixel, interior_color))
	return (1);
     VMOVE(pixel, nrp + (col_nm + 1) * 3);
     if (! same_color(pixel, interior_color))
	return (1);
    
    /*
d525 3
a527 3
    border_color[RED] = border_color[GRN] = border_color[BLU] = 1;
    region_color[RED] = region_color[GRN] = region_color[BLU] = 255;
    color_tol[RED] = color_tol[GRN] = color_tol[BLU] = 0;
d532 1
a535 2
    fprintf(stderr, "OK, file '%s' has size %d by %d\n",
	file_name, file_width, file_height);
d538 5
a542 2
	border_color[RED], border_color[GRN], border_color[BLU],
	region_color[RED], region_color[GRN], region_color[BLU]);
d601 3
a603 3
				    inrow[next_row], col_nm, region_color)
		    ? border_color
		    : inrow[this_row] + col_nm * 3;
@
