head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.2
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.2
	premerge-autoconf:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.1
	offsite-5-3-pre:11.3
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.3
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.14.57.39;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.05.46.01;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.45;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.58;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.56.10;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2001.08.10.20.57.05;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.08.03.28.15;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	2000.09.01.03.23.48;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.23.19.04.30;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.11.58;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.48.09;	author mike;	state Rel4_0;
branches;
next	9.1;

9.1
date	89.05.19.06.08.09;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.40.51;	author mike;	state Rel3_0;
branches;
next	7.3;

7.3
date	88.09.10.05.37.20;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	88.05.17.03.25.57;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.06.14;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.09.33;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.37.25;	author mike;	state Rel;
branches;
next	4.4;

4.4
date	87.06.20.05.53.25;	author mike;	state Exp;
branches;
next	4.3;

4.3
date	87.02.13.00.39.42;	author mike;	state Exp;
branches;
next	4.2;

4.2
date	87.01.04.01.27.03;	author mike;	state Rel1;
branches;
next	4.1;

4.1
date	86.12.29.03.12.21;	author mike;	state Rel1;
branches;
next	1.4;

1.4
date	86.08.13.04.40.38;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	86.06.16.23.51.18;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.06.16.23.01.11;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.06.16.22.24.29;	author mike;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.36;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.23.23;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.52.30;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.02.12.19.43.09;	author erikg;	state Exp;
branches;
next	11.7.10.2;

11.7.10.2
date	2004.03.15.14.08.11;	author erikg;	state Exp;
branches;
next	;


desc
@Dunn Camera exposure control
@


11.11
log
@moved to src/util/
@
text
@/*
 *			D U N N C O L O R . C				
 *
 *	Sets the exposure values in the Dunn camera to the
 *	specified arguments.
 *
 *	dunncolor baseval redval greenval blueval
 *
 *  Author -
 *	Don Merritt
 *	August 1985
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/dunncolor.c,v 11.10 2004/05/10 15:30:50 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <stdlib.h>

extern int	fd;
extern char	cmd;
extern int	polaroid;

extern void dunnopen(void);
extern int ready(int nsecs);
extern void getexposure(char *title);
extern int dunnsend(char color, int val);


int
main(int argc, char **argv)
{

	dunnopen();

	if(!ready(5)) {
		printf("dunncolor:  camera not ready\n");
		exit(50);
	}

	if( argc > 2 && strcmp( argv[1], "-p" ) == 0 )  {
		/* Polaroid rather than external camera */
		polaroid = 1;
		argc--; argv++;
	}
	getexposure("old");
	if(!ready(5)) {
		printf("dunncolor:  camera not ready\n");
		exit(50);
	}

	/* check argument */
	if ( argc != 5 && argc != 6 ) {
		printf("usage: dunncolor [-p] baseval redval greenval blueval\n"); 
		exit(25);
	}

	dunnsend('A',atoi(*++argv));
	dunnsend('R',atoi(*++argv));
	dunnsend('G',atoi(*++argv));
	dunnsend('B',atoi(*++argv));

	getexposure("new");

	if(!ready(5)) {
		printf("dunncolor:  camera not ready\n");
		exit(50);
	}
	return 0;
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/dunncolor.c,v 11.9 2004/04/05 05:46:01 morrison Exp $ (BRL)";
@


11.9
log
@merge of ansi-6-0-branch into head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d26 5
a30 1
#include "conf.h"
@


11.8
log
@update copyright to include span through 2003
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.7 2002/08/20 17:08:58 jra Exp $ (BRL)";
d40 1
a40 1
extern void dunnopen();
d47 1
a47 3
main(argc, argv)
int argc;
char **argv;
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1986 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.5 2001/08/10 20:57:05 butler Exp $ (BRL)";
@


11.7.4.1
log
@sync to HEAD...
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/dunncolor.c,v 11.8 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.7.10.1
log
@merge from HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.8 2004/02/02 17:39:45 morrison Exp $ (BRL)";
@


11.7.10.2
log
@merge from head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.7.10.1 2004/02/12 19:43:09 erikg Exp $ (BRL)";
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.7 2002/08/20 17:08:58 jra Exp $ (BRL)";
d40 1
a40 1
extern void dunnopen(void);
d47 3
a49 1
main(int argc, char **argv)
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d40 1
a40 1
extern void dunnopen(void);
d47 3
a49 1
main(int argc, char **argv)
@


11.5
log
@Misc compiler warnings eliminated
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.4 2001/08/08 03:28:15 butler Exp $ (BRL)";
d40 1
a40 1
extern void dunnopen();
d47 1
a47 3
main(argc, argv)
int argc;
char **argv;
@


11.4
log
@Misc compiler warnings eliminated
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.3 2000/09/01 03:23:48 mike Exp $ (BRL)";
d26 2
d29 5
@


11.3
log
@
Lint fix
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.2 2000/08/23 19:04:30 mike Exp $ (BRL)";
d27 1
d33 6
d80 1
@


11.2
log
@
const RCSid
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/dunncolor.c,v 11.1 1995/01/04 10:11:58 mike Rel4_4 $ (BRL)";
d32 1
@


11.1
log
@Release_4.4
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/dunncolor.c,v 10.1 91/10/12 06:48:09 mike Rel4_0 $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/dunncolor.c,v 9.1 89/05/19 06:08:09 mike Rel3_5 $ (BRL)";
@


9.1
log
@Release_3.5
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 8.1 88/10/05 00:40:51 mike Rel3_0 $ (BRL)";
@


8.1
log
@Release_3.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 7.3 88/09/10 05:37:20 mike Exp $ (BRL)";
@


7.3
log
@Changed send() to dunnsend() to avoid name conflict with
BSD sys-call.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 7.2 88/05/17 03:25:57 mike Locked $ (BRL)";
@


7.2
log
@Modifications for working on big-endian SysV.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 7.1 87/11/03 00:06:14 mike Locked $ (BRL)";
d61 4
a64 4
	send('A',atoi(*++argv));
	send('R',atoi(*++argv));
	send('G',atoi(*++argv));
	send('B',atoi(*++argv));
@


7.1
log
@Release 2.3
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 6.1 87/07/11 08:09:33 mike Rel $ (BRL)";
d39 5
d50 4
a60 5
	if(!ready(20)) {
		printf("dunncolor:  camera not ready\n");
		exit(50);
	}

d67 5
@


6.1
log
@Release 2.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 5.1 87/06/24 22:37:25 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 4.4 87/06/20 05:53:25 mike Exp $ (BRL)";
@


4.4
log
@Modified to use dunncomm.c
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 4.3 87/02/13 00:39:42 mike Locked $ (BRL)";
@


4.3
log
@Release 1.20 -- First Formal Release
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 4.2 87/01/04 01:27:03 mike Rel1 $ (BRL)";
a26 1
#include <sgtty.h>
d28 3
a30 4
#ifdef BSD
#include <sys/time.h>
#include <sys/file.h>
#endif
a31 8
struct	sgttyb	tty;
int fd;
char cmd;
unsigned char status[4], values[21];
int readfds, xcptfd;

int polaroid = 0;		/* 0 = aux camera, 1 = Polaroid 8x10 */

a35 1
	struct timeval waittime;
d37 1
a37 2
	waittime.tv_sec = 20;
	waittime.tv_usec = 0;
a38 18
	/* open the camera device */

	if( (fd = open("/dev/camera", O_RDWR | O_NDELAY)) < 0 
	     || ioctl(fd, TIOCGETP, &tty) < 0) {
	     	printf("\007dunncolor: can't open /dev/camera\n");
		close(fd);
		exit(10);
	}
	
	/* set up the camera device */

	tty.sg_ispeed = tty.sg_ospeed = B9600;
	tty.sg_flags = RAW | EVENP | ODDP | XTABS;
	if( ioctl(fd,TIOCSETP,&tty) < 0 ) {
		printf("\007dunncolor: error on /dev/camera setup\n");
		exit(20);
	}

a62 180
}

/*
 *			S E N D
 *
 */
send(color,val)
char color;
int val;
{
	int digit;

	if(val < 0 || val > 255) {
		printf("dunncolor: bad value %d\n",val);
		exit(75);
	}

	if(!ready(20)) {
		printf("dunncolor: 80 camera not ready\n");
		exit(80);
	}

	if( polaroid )
		cmd = 'K';	/* set 8x10 exposure values */
	else
		cmd = 'L';	/* set AUX exposure values */
	write(fd, &cmd, 1);
	hangten();
	write(fd, &color, 1);
	hangten();
	digit = (val/100 + 0x30)&0x7f;
	write(fd, &digit, 1);
	hangten();
	val = val%100;
	digit = (val/10 + 0x30)&0x7f;
	write(fd, &digit, 1);
	hangten();
	digit = (val%10 + 0x30)&0x7f;
	write(fd, &digit,1);
}

/*
 *			M R E A D
 *
 * This function performs the function of a read(II) but will
 * call read(II) multiple times in order to get the requested
 * number of characters.  This can be necessary because pipes
 * and network connections don't deliver data with the same
 * grouping as it is written with.
 */
static int
mread(fd, bufp, n)
int fd;
register char	*bufp;
unsigned	n;
{
	register unsigned	count = 0;
	register int		nread;

	do {
		nread = read(fd, bufp, n-count);
		if(nread == -1)
			return(nread);
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);

	return((int)count);
}

/*
 *			G E T E X P O S U R E
 *
 *  Get and print the current exposure
 */
getexposure(title)
char *title;
{
	struct timeval waittime;

	waittime.tv_sec = 20;
	waittime.tv_usec = 0;

	if(!ready(20)) {
		printf("dunncolor: (getexposure) camera not ready\n");
		exit(60);
	}

	if(polaroid)
		cmd = '<';	/* req 8x10 exposure values */
	else
		cmd = '=';	/* request AUX exposure values */
	write(fd, &cmd, 1);
	readfds = 1<<fd;
	select(fd+1, &readfds, (int *)0, &xcptfd, &waittime);
	if( (readfds&(1<<fd)) != 0) {
		mread(fd, values, 20);
		values[20] = '\0';
		printf("dunncolor: %s = %s\n", title, values);
	} else {
		printf("dunncolor:\007 %s request exposure value cmd: timed out\n", title);
		exit(40);
	}
}

/*
 *			G O O D S T A T U S
 *
 *	Checks the status of the Dunn camera and returns 1 for good status
 *	and 0 for bad status.
 *
 */

goodstatus()
{
	struct timeval waittime;
	
	waittime.tv_sec = 10;
	waittime.tv_usec = 0;
	
	cmd = ';';	/* status request cmd */
	write(fd, &cmd, 1);	
	readfds = 1<<fd;
	select(fd+1, &readfds, (int *)0, &xcptfd, &waittime);
	if( (readfds & (1<<fd)) !=0) {
		mread(fd, status, 4);
		if ((status[0]&0xf) == 0 &&
		    (status[1]&0x3) == 0x0 )
			return 1;	/* status is ok */
		else {
			printf("\007dunncolor: status error from camera\n");
			printf("status[0]= 0x%x [1]= 0x%x [2]= 0x%x [3]= 0x%x\n",status[0]&0xf,status[1]&0xf,
				status[2]&0x3,status[3]&0x7f);
		}
	} else
		printf("\007dunncolor: status request timed out\n");
	return 0;	/* status is bad or request timed out */
}

/*
 *			H A N G T E N 
 *
 *	Provides a 10 millisecond delay when called
 *
 */
hangten()
{
	static struct timeval delaytime = { 0, 10000}; /* set timeout to 10mS*/

	select(0, (int *)0, (int *)0, (int *)0, &delaytime);
}

/*
 *			R E A D Y
 *
 *	Sends a ready test command to the Dunn camera and returns 1 if the
 *	camera is ready or 0 if the camera is not ready after waiting the
 *	number of seconds specified by the argument.
 *
 */
ready(nsecs)
int nsecs;
{
	struct timeval waittime;

	waittime.tv_sec = nsecs;
	waittime.tv_usec = 0;
	
	cmd = ':';	/* ready test command */
	write(fd, &cmd, 1);
	readfds = 1<<fd;
	select(fd+1, &readfds, (int *)0, &xcptfd, &waittime);
	if ((readfds & (1<<fd)) != 0) {
		mread(fd, status, 2);
		if((status[0]&0x7f) == 'R')
			return 1;	/* camera is ready */
	}
	return 0;	/* camera is not ready or timeout after n secs */
@


4.2
log
@Release 1.12 -- fixed status checking
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 4.1 86/12/29 03:12:21 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: dunncolor.c,v 1.4 86/08/13 04:40:38 mike Exp $ (BRL)";
d222 1
a222 2
		    (status[1]&0xf) == 0x8 &&
		    (status[2]&0x3) == 0x3)
@


1.4
log
@Cleanup for distribution
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@


1.3
log
@Added ability to just look at exposure
@
text
@d4 1
a4 1
 *	Sets the AUX exposure values in the Dunn camera to the
d9 1
d12 9
a20 1
 *
d22 8
a30 1
#include <sgtty.h>
d32 1
@


1.2
log
@Revised to handle 8x10 Polaroid exposure settings with
the -p commandline option.
@
text
@d52 1
a52 6
	/* check argument */
	if ( argc != 5 && argc != 6 ) {
		printf("usage: dunncolor [-p] baseval redval greenval blueval\n"); 
		exit(25);
	}
	if( strcmp( argv[1], "-p" ) == 0 )  {
d57 1
d59 4
a62 3
	if (!ready(1)) {
		printf("dunncolor: 30 camera not ready\n");
		exit(30);
a63 2
		
	getexposure("old");
a74 5
	if(!ready(20)) {
		printf("dunncolor: 60 camera not ready\n");
		exit(60);
	}

d160 5
@


1.1
log
@Initial revision
@
text
@a12 2


d16 1
d23 2
d29 1
a29 4
	struct timeval waittime, *timeout;
	timeout = &waittime;
	timeout->tv_sec = 20;
	timeout->tv_usec = 0;
d31 2
d53 2
a54 3

	if ( argc != 5) {
		printf("usage: dunncolor baseval redval greenval blueval\n"); 
d57 5
a62 1

d68 1
a68 13
	cmd = '=';	/* request AUX exposure values command */
	write(fd, &cmd, 1);
	readfds = 1<<fd;
	select(fd+1, &readfds, (int *)0, &xcptfd, timeout);
	if( (readfds&(1<<fd)) != 0) {
		mread(fd, values, 20);
		values[20] = '\0';
		printf("dunncolor: current values= %s\n",values);
	}
	else {
		printf("dunncolor:\007request values cmd timed out\n");
		exit(40);
	}
a69 1

d71 1
a71 1
		printf("dunncolor: 50 camera not ready\n");
d85 1
a85 13
	cmd = '=';	/* request AUX exposure values command */
	write(fd, &cmd, 1);
	readfds = 1<<fd;
	select(fd+1, &readfds, (int *)0, &xcptfd, timeout);
	if( (readfds&(1<<fd)) != 0) {
		mread(fd, values, 20);
		values[20] = '\0';
		printf("dunncolor: new values= %s\n",values);
	}
	else {
		printf("dunncolor:\007request values cmd timed out\n");
		exit(70);
	}
d108 4
a111 1
	cmd = 'L';	/* set AUX exposure values */
d159 30
d198 1
a198 1
	struct timeval waittime, *timeout;
d200 2
a201 3
	timeout = &waittime;
	timeout->tv_sec = 10;
	timeout->tv_usec = 0;
d206 1
a206 1
	select(fd+1, &readfds, (int *)0, &xcptfd, timeout);
d247 4
a250 4
	struct timeval waittime, *timeout;
	timeout = &waittime;
	timeout->tv_sec = nsecs;
	timeout->tv_usec = 0;
d255 1
a255 1
	select(fd+1, &readfds, (int *)0, &xcptfd, timeout);
@
