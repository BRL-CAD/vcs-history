head	11.11;
access;
symbols
	ansi-20040405-merged:11.7.2.2
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.10.2
	premerge-autoconf:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.4.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.2
	offsite-5-3-pre:11.4
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.14.57.55;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.51;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.05.46.02;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.48;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.09.03;	author jra;	state Exp;
branches
	11.7.2.1
	11.7.4.1
	11.7.10.1;
next	11.6;

11.6
date	2002.08.15.20.56.15;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2001.08.10.20.57.07;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	2000.08.25.03.18.24;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.23.19.04.54;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	98.09.14.15.59.24;	author bparker;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.12.52;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.23.15.06.00;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	94.02.16.22.46.54;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.48.48;	author mike;	state Rel4_0;
branches;
next	1.3;

1.3
date	91.07.12.16.35.42;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	90.12.07.01.31.35;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	89.08.11.02.42.41;	author mike;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.42;	author morrison;	state Exp;
branches;
next	11.7.2.2;

11.7.2.2
date	2004.03.17.21.23.31;	author morrison;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.11.23.52.34;	author morrison;	state Exp;
branches;
next	;

11.7.10.1
date	2004.02.12.19.43.11;	author erikg;	state Exp;
branches;
next	11.7.10.2;

11.7.10.2
date	2004.03.15.14.08.14;	author erikg;	state Exp;
branches;
next	;


desc
@Program to composite two images.
@


11.11
log
@moved to src/util/
@
text
@/*
 *  			P I X M A T T E . C
 *  
 *  Given four streams of data elements,
 *  where element is of arbitrary width,
 *  typically pix(5) or bw(5) images,
 *  output a stream of the same number of data elements.
 *  The value of the output stream is determined element-by-element,
 *  by comparing the
 *  first (foreground) input stream with the
 *  the second (background, or matte) input stream.
 *  If the formula holds true, the element from the
 *  true-output stream is written,
 *  otherwise, the element from the false-output stream is written.
 *  Each of these streams comes from a file, or is given as a constant.
 *  A particular file may be used to feed more than one stream,
 *  and the name '-' specifies stdin.
 *  For example, the forground file may also be the true-output file.
 *
 *  This routine operates on an element-by-element basis, and thus
 *  is independent of the resolution of the image.
 *  
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1989-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/util/pixmatte.c,v 11.10 2004/05/10 15:30:51 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "externs.h"			/* For malloc and getopt */

#define NFILES		4		/* Two in, two out */
#define EL_WIDTH	32		/* Max width of one element */
#define CHUNK		(32*1024)	/* # elements per I/O */

static int		width = 3;

static char		*file_name[NFILES];
static FILE		*fp[NFILES];	/* NULL => use f_const */
static unsigned char	f_const[NFILES][EL_WIDTH];
static char		*buf[NFILES];	/* I/O buffers, size width*CHUNK */
static char		*obuf;		/* output buffer */

#define LT		1
#define EQ		2
#define GT		4
#define NE		8
#define APPROX		16
static int		wanted;		/* LT|EQ|GT conditions */

static long		true_cnt = 0;
static long		false_cnt = 0;


static char usage_msg[] = "\
Usage: pixmatte [-w bytes_wide] {-g -l -e -n -a}\n\
	in1 in2 true_out false_out > output\n\
\n\
where each of the 4 streams is either a file name, a constant of the\n\
form =r/g/b with each byte specified in decimal, or '-' for stdin.\n\
The default width is 3 bytes, suitable for processing .pix files.\n\
";

void
usage(char *s, int n)
{
	if (s && *s) (void)fputs(s, stderr);
	
	(void)fputs(usage_msg, stderr);
	exit(n);
}

/*
 *			O P E N _ F I L E
 */
int
open_file(int i, char *name)
{
	if( name[0] == '=' )  {
		/* Parse constant */
		register char		*cp = name+1;
		register unsigned char	*conp = &f_const[i][0];
		register int		j;

		/* premature null => atoi gives zeros */
		for( j=0; j < width; j++ )  {
			*conp++ = atoi(cp);
			while( *cp && *cp++ != '/' ) ;
		}

		file_name[i] = name+1;	/* skip '=' */
		fp[i] = NULL;
		buf[i] = NULL;
		return(0);		/* OK */
	}

	file_name[i] = name;
	if( strcmp( name, "-" ) == 0 )  {
		fp[i] = stdin;
		if( isatty(fileno(stdin)) )
			return(-1);	/* FAIL */
		/* XXX No checking for multiple uses of stdin */
	}  else if( (fp[i] = fopen(name, "r")) == NULL )  {
		perror(name);
		(void)fprintf( stderr,
			"pixmatte: cannot open \"%s\" for reading\n",
			name );
		return(-1);		/* FAIL */
	}

	/* Obtain buffer */
	if( (buf[i] = malloc( width*CHUNK )) == (char *)0 )  {
	    	fprintf(stderr, "pixmatte:  input buffer malloc failure\n");
	    	exit(3);
	}

	return(0);			/* OK */
}

/*
 *			G E T _ A R G S
 */
void
get_args(int argc, register char **argv)
{
	register int	c;
	register int	seen_formula = 0;
	register int	i;

	while ( (c = getopt( argc, argv, "glenaw:" )) != EOF )  {
		switch( c )  {
		case 'g':
			wanted |= GT;
			seen_formula = 1;
			break;
		case 'l':
			wanted |= LT;
			seen_formula = 1;
			break;
		case 'e':
			wanted |= EQ;
			seen_formula = 1;
			break;
		case 'n':
			wanted |= NE;
			seen_formula = 1;
			break;
		case 'a':
			wanted |= APPROX;
			/* Formula not seen */
			break;
		case 'w':
			c = atoi(optarg);
			if( c >= 1 && c < EL_WIDTH )
				width = c;
			else
				usage("Illegal width specified\n", 1);
			break;
		default:		/* '?' */
			usage("unknown option\n", 1);
			break;
		}
	}

	if( !seen_formula )  
		usage("No formula specified\n", 1);


	if( optind+NFILES > argc )
		usage("insufficient number of input/output channels\n", 1);


	for( i=0; i < NFILES; i++ )  {
		if( open_file( i, argv[optind++] ) < 0 )
			usage((char *)NULL, 1);
	}

	if ( argc > optind )
		(void)fprintf( stderr, "pixmatte: excess argument(s) ignored\n" );

}

int
main(int argc, char **argv)
{

	get_args(argc, argv);

	if ( isatty(fileno(stdout)) )
		usage( "Cannot write image to tty\n", 1);


	fprintf(stderr, "pixmatte:\tif( %s ", file_name[0] );
	if( wanted & LT )  {
		if( wanted & EQ )
			fputs( "<=", stderr );
		else
			fputs( "<", stderr );
	}
	if( wanted & GT )  {
		if( wanted & EQ )
			fputs( ">=", stderr );
		else
			fputs( ">", stderr );
	}
	if( wanted & APPROX )  {
		if( wanted & EQ )  fputs( "~~==", stderr );
		if( wanted & NE )  fputs( "~~!=", stderr );
	} else {
		if( wanted & EQ )  fputs( "==", stderr );
		if( wanted & NE )  fputs( "!=", stderr );
	}
	fprintf(stderr, " %s )\n", file_name[1] );
	fprintf(stderr, "pixmatte:\t\tthen output %s\n", file_name[2] );
	fprintf(stderr, "pixmatte:\t\telse output %s\n", file_name[3] );

	if( (obuf = malloc( width*CHUNK )) == (char *)0 ) {
	    	fprintf(stderr, "pixmatte:  obuf malloc failure\n");
	    	exit(3);
	}

	while(1)  {
		unsigned char	*cb0, *cb1;	/* current input buf ptrs */
		unsigned char	*cb2, *cb3;
		register unsigned char	*obp; 	/* current output buf ptr */
		unsigned char	*ebuf;		/* end ptr in buf[0] */
		int		len;
		register int	i;

		len = CHUNK;
		for( i=0; i<NFILES; i++ )  {
			register int	got;

			if( fp[i] == NULL )  continue;
			got = fread( buf[i], width, CHUNK, fp[i] );
			if( got < len )  len = got;
		}
		if( len <= 0 )
			break;

		cb0 = (unsigned char *)buf[0];
		cb1 = (unsigned char *)buf[1];
		cb2 = (unsigned char *)buf[2];
		cb3 = (unsigned char *)buf[3];
		obp = (unsigned char *)obuf;
		ebuf = cb0 + width*len;
		for( ; cb0 < ebuf;
		    cb0 += width, cb1 += width, cb2 += width, cb3 += width )  {
			/*
			 * Stated condition must hold for all input bytes
			 * to select the foreground for output
			 */
			register unsigned char	*ap, *bp;
			register unsigned char	*ep;		/* end ptr */

			if( buf[0] != NULL )
				ap = cb0;
			else
				ap = &f_const[0][0];

			if( buf[1] != NULL )
				bp = cb1;
			else
				bp = &f_const[1][0];
						
			if( wanted == NE )  {
				for( ep = ap+width; ap < ep; )  {
					if( *ap++ != *bp++ )
						goto success;
				}
				goto fail;
			} else if( wanted & APPROX )  {
				if( wanted & NE )  {
					/* Want not even approx equal */
					for( ep = ap+width; ap < ep; )  {
						if( (i= *ap++ - *bp++) < -1 ||
						    i > 1 )
							goto success;
					}
					goto fail;
				} else {
					/* Want approx equal */
					for( ep = ap+width; ap < ep; )  {
						if( (i= *ap++ - *bp++) < -1 ||
						    i > 1 )
							goto fail;
					}
					goto success;
				}
			} else {
				for( ep = ap+width; ap < ep; ap++,bp++ )  {
					if( *ap > *bp )  {
						if( !(GT & wanted) )
							goto fail;
					} else if( *ap == *bp )  {
						if( !(EQ & wanted) )
							goto fail;
					} else  {
						if( !(LT & wanted) )
							goto fail;
					}
				}
			}
success:
			if( buf[2] != NULL )
				ap = cb2;
			else
				ap = &f_const[2][0];

			for( i=0; i<width; i++ )
				*obp++ = *ap++;

			true_cnt++;
			continue;
fail:
			if( buf[3] != NULL )
				bp = cb3;
			else
				bp = &f_const[3][0];

			for( i=0; i<width; i++ )
				*obp++ = *bp++;

			false_cnt++;
		}
		if( fwrite( obuf, width, len, stdout ) != len )  {
			perror("fwrite");
			fprintf( stderr, "pixmatte:  write error\n");
			exit(1);
		}
	}
	fprintf( stderr, "pixmatte: %ld element comparisons true, %ld false (width=%d)\n",
		true_cnt, false_cnt, width );
	return(0);
}
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pixmatte.c,v 11.9 2004/04/05 05:46:02 morrison Exp $ (BRL)";
@


11.9
log
@merge of ansi-6-0-branch into head
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d39 5
a43 1
#include "conf.h"
@


11.8
log
@update copyright to include span through 2003
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.7 2002/08/20 17:09:03 jra Exp $ (BRL)";
d84 1
a84 2
usage(s, n)
char *s;
d96 1
a96 3
open_file( i, name )
int	i;
char	*name;
d143 1
a143 2
get_args( argc, argv )
register char	**argv;
d203 1
a203 3
main(argc, argv)
int argc;
char **argv;
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d32 1
a32 1
 *	This software is Copyright (C) 1989 by the United States Army.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.5 2001/08/10 20:57:07 butler Exp $ (BRL)";
@


11.7.4.1
log
@sync to HEAD...
@
text
@d32 1
a32 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/util/pixmatte.c,v 11.8 2004/02/02 17:39:48 morrison Exp $ (BRL)";
@


11.7.10.1
log
@merge from HEAD
@
text
@d32 1
a32 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.8 2004/02/02 17:39:48 morrison Exp $ (BRL)";
@


11.7.10.2
log
@merge from head
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.7.10.1 2004/02/12 19:43:11 erikg Exp $ (BRL)";
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.7 2002/08/20 17:09:03 jra Exp $ (BRL)";
d84 2
a85 1
usage(char *s, int n)
d97 3
a99 1
open_file(int i, char *name)
d146 2
a147 1
get_args(int argc, register char **argv)
d207 3
a209 1
main(int argc, char **argv)
@


11.7.2.2
log
@sync branch with HEAD
@
text
@d32 1
a32 1
 *	This software is Copyright (C) 1989-2004 by the United States Army.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d84 2
a85 1
usage(char *s, int n)
d97 3
a99 1
open_file(int i, char *name)
d146 2
a147 1
get_args(int argc, register char **argv)
d207 3
a209 1
main(int argc, char **argv)
@


11.5
log
@Misc compiler warnings eliminated
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.4 2000/08/25 03:18:24 mike Exp $ (BRL)";
d84 1
a84 2
usage(s, n)
char *s;
d96 1
a96 3
open_file( i, name )
int	i;
char	*name;
d143 1
a143 2
get_args( argc, argv )
register char	**argv;
d203 1
a203 3
main(argc, argv)
int argc;
char **argv;
@


11.4
log
@
Lint
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.3 2000/08/23 19:04:54 mike Exp $ (BRL)";
d42 5
@


11.3
log
@
const RCSid
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.2 1998/09/14 15:59:24 bparker Exp $ (BRL)";
a50 1
static unsigned char	pconst[EL_WIDTH];	/* XXX */
d172 1
a172 1
			if( c >= 1 && c < sizeof(pconst) )
@


11.2
log
@*- fix typos
@
text
@d36 1
a36 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/util/pixmatte.c,v 11.1 1995/01/04 10:12:52 mike Rel4_4 $ (BRL)";
@


11.1
log
@Release_4.4
@
text
@d36 1
a36 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixmatte.c,v 10.3 94/08/23 15:06:00 gdurf Exp $ (BRL)";
d353 1
a353 1
	fprintf( stderr, "pixmatte: %d element comparisons true, %d false (width=%d)\n",
@


10.3
log
@Factored ifdefs
@
text
@d36 1
a36 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixmatte.c,v 10.2 1994/02/16 22:46:54 mike Exp gdurf $ (BRL)";
@


10.2
log
@Fixed option processing bug so that -w1 will work.
@
text
@d36 1
a36 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixmatte.c,v 10.1 91/10/12 06:48:48 mike Rel4_0 Locker: mike $ (BRL)";
d39 2
d43 2
a44 5
extern int	getopt();
extern char	*optarg;
extern int	optind;

extern char	*malloc();
@


10.1
log
@Release_4.0
@
text
@d36 1
a36 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixmatte.c,v 1.3 91/07/12 16:35:42 butler Exp $ (BRL)";
d174 1
a174 1
			if( c > 1 && c < sizeof(pconst) )
d176 2
d354 2
a355 2
	fprintf( stderr, "pixmatte: %d element comparisons true, %d false\n",
		true_cnt, false_cnt );
@


1.3
log
@improved error handling & messages.
@
text
@d36 1
a36 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixmatte.c,v 1.2 90/12/07 01:31:35 mike Exp $ (BRL)";
@


1.2
log
@lint
@
text
@d36 1
a36 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/pixmatte.c,v 1.1 89/08/11 02:42:41 mike Exp $ (BRL)";
d70 2
a71 1
static char usage[] = "\
d80 10
d142 1
a142 1
int
d178 2
a179 1
			return(0);	/* FAIL */
d183 2
a184 1
	if( !seen_formula )  return(0);	/* FAIL */
d186 1
d188 1
a188 1
		return(0);		/* FAIL */
d190 1
d193 1
a193 1
			return(0);	/* FAIL */
a198 1
	return(1);			/* OK */
d201 1
d207 1
a207 4
	if ( !get_args( argc, argv ) || isatty(fileno(stdout)) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}
d209 4
d354 1
a354 1
	exit(0);
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
static char RCSid[] = "@@(#)$Header: pixmerge.c,v 9.1 89/05/19 06:10:39 mike Rel3_5 $ (BRL)";
d136 1
a136 1
	register int	seen_formula;
@
