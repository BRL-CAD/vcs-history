head	11.7;
access;
symbols
	ansi-20040405-merged:11.4.2.1
	postmerge-20040405-ansi:11.5
	premerge-20040404-ansi:11.4
	postmerge-autoconf:11.4
	autoconf-freeze:11.4
	premerge-autoconf:11.4
	ansi-20040316-freeze:11.4.2.1
	postmerge-20040315-windows:11.4
	premerge-20040315-windows:11.4
	windows-20040315-freeze:11.4
	autoconf-20031203:11.4
	autoconf-20031202:11.4
	autoconf-branch:11.4.0.10
	phong-branch:11.4.0.8
	photonmap-branch:11.4.0.6
	rel-6-1-DP:11.4
	windows-branch:11.4.0.4
	rel-6-0-2:11.2
	ansi-branch:11.4.0.2
	rel-6-0-1-branch:11.2.0.2
	hartley-6-0-post:11.3
	hartley-6-0-pre:11.2
	rel-6-0-1:11.2
	rel-6-0:11.2
	rel-5-4:11.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:5.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.7
date	2004.05.24.04.13.10;	author morrison;	state dead;
branches;
next	11.6;

11.6
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.5;

11.5
date	2004.04.05.07.52.17;	author morrison;	state Exp;
branches;
next	11.4;

11.4
date	2002.08.20.17.07.27;	author jra;	state Exp;
branches
	11.4.2.1;
next	11.3;

11.3
date	2002.08.15.20.54.40;	author hartley;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.24.22.55.35;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.13.48;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.23.19.46.42;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	93.10.26.02.58.32;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.49.34;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	91.06.12.22.47.31;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	90.11.26.11.17.05;	author moss;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.12.04;	author mike;	state Rel3_5;
branches;
next	8.6;

8.6
date	89.03.17.14.49.32;	author moss;	state Exp;
branches;
next	8.5;

8.5
date	89.03.08.09.49.16;	author moss;	state Exp;
branches;
next	8.4;

8.4
date	89.03.07.12.17.07;	author moss;	state Exp;
branches;
next	8.3;

8.3
date	89.03.07.12.11.18;	author moss;	state Exp;
branches;
next	8.2;

8.2
date	88.10.05.08.53.33;	author moss;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.50.04;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.09.17.06.50.03;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.10.25;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.13.52;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.44.55;	author mike;	state Rel;
branches;
next	4.3;

4.3
date	87.06.22.14.51.50;	author moss;	state Exp;
branches;
next	4.2;

4.2
date	87.02.13.00.52.12;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.02.51.23;	author mike;	state Rel1;
branches;
next	1.3;

1.3
date	86.12.26.22.36.33;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.11.12.23.04.03;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.11.10.23.10.33;	author mike;	state Exp;
branches;
next	;

11.4.2.1
date	2002.09.19.18.00.49;	author morrison;	state Exp;
branches;
next	;


desc
@Gary Moss' Original Version
@


11.7
log
@moved to src/fbed/
@
text
@/*
	Author:		Gary S. Moss
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066
			(301)278-6651 or DSN 298-6651
*/
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/fbed/execshell.c,v 11.6 2004/05/10 15:30:42 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <signal.h>
#include <fcntl.h>

#include "machine.h"
#include "externs.h"
#include "fb.h"

#include "./std.h"
#include "./ascii.h"
#include "./font.h"
#include "./try.h"
#include "./extern.h"

#define DFL_SHELL	"/bin/sh"

/*	e x e c _ S h e l l ( )
	If args[0] is NULL, spawn a shell, otherwise execute the specified
	command line.
	Return the exit status of the program, or -1 if wait() or fork()
	return an error.
 */
int
exec_Shell(char **args)
{
	register int child_pid;

	if( args[0] == NULL )
		{ char *arg_sh = getenv( "SHELL" );
		/* $SHELL, if set, DFL_SHELL otherwise. */
		if( arg_sh == NULL )
			arg_sh = DFL_SHELL;
		args[0] = arg_sh;
		args[1] = NULL;
		}
	switch( child_pid = fork() )
		{
		case -1 :
			fb_log( "\"%s\" (%d) could not fork.\n",
				__FILE__, __LINE__
				);
			return -1;
		case  0 : /* Child process - execute. */
			sleep( 2 );
			(void) execvp( args[0], args );
			fb_log( "%s : could not execute.\n", args[0] );
			exit( 1 );
		default :
			{	register int pid;
				int stat_loc;
#if STD_SIGNAL_DECLS
				register void (*istat)(), (*qstat)(), (*cstat)();
#else
				register int (*istat)(), (*qstat)(), (*cstat)();
#endif
#if !defined(SIGCLD) && defined(SIGCHLD)
#	define SIGCLD	SIGCHLD		/* BSD and POSIX name */
#endif
			istat = signal(SIGINT, SIG_IGN);
			qstat = signal(SIGQUIT, SIG_IGN);
			cstat = signal(SIGCLD, SIG_DFL);
			while(	(pid = wait( &stat_loc )) != -1
			     && pid != child_pid
				)
				;
			(void) signal(SIGINT, istat);
			(void) signal(SIGQUIT, qstat);
			(void) signal(SIGCLD, cstat);
			if( pid == -1 )
				{
				fb_log( "\"%s\" (%d) wait failed : no children.\n",
					__FILE__, __LINE__
					);
				return -1;
				}
			switch( stat_loc & 0377 )
				{
				case 0177 : /* Child stopped. */
					fb_log( "Child stopped.\n" );
					return (stat_loc >> 8) & 0377;
				case 0 :    /* Child exited. */
					return (stat_loc >> 8) & 0377;
				default :   /* Child terminated. */
					fb_log( "Child terminated.\n" );
					return 1;
				}
			}
		}
	}
@


11.6
log
@change conf.h to a wrapped config.h
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fbed/execshell.c,v 11.5 2004/04/05 07:52:17 morrison Exp $ (BRL)";
@


11.5
log
@merge of ansi-6-0-branch into HEAD
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d12 5
a16 1
#include "conf.h"
@


11.4
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fbed/execshell.c,v 11.2 2000/08/24 22:55:35 mike Exp $ (BRL)";
d37 2
a38 3
exec_Shell( args )
char *args[];
	{
@


11.4.2.1
log
@Initial ANSIfication
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fbed/execshell.c,v 11.4 2002/08/20 17:07:27 jra Exp $ (BRL)";
d37 3
a39 2
exec_Shell(char **args)
{
@


11.3
log
@Converted from K&R to ANSI C - RFH
@
text
@d37 3
a39 2
exec_Shell(char **args)
{
@


11.2
log
@
RCSid
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fbed/execshell.c,v 11.1 1995/01/04 10:13:48 mike Rel4_4 $ (BRL)";
d37 2
a38 3
exec_Shell( args )
char *args[];
	{
@


11.1
log
@Release_4.4
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/execshell.c,v 10.3 94/08/23 19:46:42 gdurf Exp $ (BRL)";
@


10.3
log
@Made includes explicit
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/execshell.c,v 10.2 1993/10/26 02:58:32 mike Exp gdurf $ (BRL)";
@


10.2
log
@POSIX
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/execshell.c,v 10.1 91/10/12 06:49:34 mike Rel4_0 Locker: mike $ (BRL)";
d12 2
d17 1
d20 6
@


10.1
log
@Release_4.0
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/execshell.c,v 9.3 91/06/12 22:47:31 mike Exp $ (BRL)";
d59 1
a59 2
#ifndef SIGCLD
#define SIGCLD	SIGCHLD
d61 2
a62 1
				register int (*istat)(), (*qstat)(), (*cstat)();
@


9.3
log
@lint
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/execshell.c,v 9.2 90/11/26 11:17:05 moss Exp $ (BRL)";
@


9.2
log
@Just checking in sources in preparation for release 4.0.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: execshell.c,v 9.1 89/05/19 06:12:04 moss Locked $ (BRL)";
d15 2
a20 4
extern void perror(), exit();
extern char *getenv();
extern int errno;

d52 1
a52 1
			exit( errno );
@


9.1
log
@Release_3.5
@
text
@d6 1
a6 1
			(301)278-6651 or AV-298-6651
d9 1
a9 1
static char RCSid[] = "@@(#)$Header: execshell.c,v 8.6 89/03/17 14:49:32 moss Exp $ (BRL)";
d19 3
a21 3
extern void		perror(), exit();
extern char		*getenv();
extern int		errno;
d31 1
a31 1
char	*args[];
d33 1
a33 1
	register int	child_pid;
d36 2
a37 2
		{ char	*arg_sh = getenv( "SHELL" );
		/* $SHELL, if set, DFL_SHELL otherwise.			*/
d49 2
a50 2
			return	-1;
		case  0 : /* Child process - execute.		*/
d56 2
a57 2
			{	register int	pid;
				int		stat_loc;
d81 1
a81 1
				return	-1;
d85 1
a85 1
				case 0177 : /* Child stopped.		*/
d87 4
a90 4
					return	(stat_loc >> 8) & 0377;
				case 0 :    /* Child exited.		*/
					return	(stat_loc >> 8) & 0377;
				default :   /* Child terminated.	*/
d92 1
a92 1
					return	1;
@


8.6
log
@Fixed signal declaration pre-processor switches.
Modified general signal handler to ignore SIGALRM (seems to be generated
	on the Sun 3/50 3.2, probably by the select call).
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: execshell.c,v 8.5 89/03/08 09:49:16 moss Locked $ (BRL)";
@


8.5
log
@Fixed preprocessor switches for decls of signal handlers.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: execshell.c,v 8.4 89/03/07 12:17:07 moss Locked $ (BRL)";
d58 1
a58 1
#if __STDC__ || defined( SYSV )
@


8.4
log
@Fixed pre-processor switch for signal handler defs.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: execshell.c,v 8.3 89/03/07 12:11:18 moss Locked $ (BRL)";
d58 2
a59 2
#if __STDC__ || defined( SYSV ) || defined( mips )
				register void	(*istat)(), (*qstat)(), (*cstat)();
d64 1
a64 1
				register int	(*istat)(), (*qstat)(), (*cstat)();
@


8.3
log
@Changed pre-processor switches for declaration of signal handlers to
accommodate __STDC__ define for ANSI C compilers.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d58 1
a58 1
#if __STDC__ || defined( SYSV )
@


8.2
log
@Fixed declaration of istat, qstat and cstat since the SGI 4D's use
	void signal handlers rather than int like the 3D's.
@
text
@a1 5
	SCCS id:	@@(#) execshell.c	2.1
	Modified: 	12/9/86 at 15:55:07
	Retrieved: 	12/26/86 at 21:54:03
	SCCS archive:	/vld/moss/src/fbed/s.execshell.c

d6 1
a6 1
			(301)278-6647 or AV-298-6647
d8 2
a9 3
#if ! defined( lint )
static
char	sccsTag[] = "@@(#) execshell.c 2.1, modified 12/9/86 at 15:55:07, archive /vld/moss/src/fbed/s.execshell.c";
d58 3
a60 1
#if defined( BSD ) || (defined( sgi ) && ! defined( mips )) || defined( CRAY )
a64 2
#else
				register void	(*istat)(), (*qstat)(), (*cstat)();
@


8.1
log
@Release_3.0
@
text
@d64 1
a64 1
#if defined( BSD ) || defined( sgi ) || defined( CRAY )
@


7.2
log
@cray-->CRAY
@
text
@@


7.1
log
@Release 2.3
@
text
@d64 1
a64 1
#if defined( BSD ) || defined( sgi ) || defined( cray )
@


6.1
log
@Release 2.0
@
text
@@


5.1
log
@Release 1.24
@
text
@@


4.3
log
@Cray portability bugs fixed.
@
text
@@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d64 1
a64 1
#if defined( BSD ) || defined( sgi )
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@@


1.3
log
@Latest version from Gary Moss
@
text
@@


1.2
log
@First version that compiles
@
text
@d2 4
a5 4
	SCCS id:	%Z% %M%	%I%
	Last edit: 	%G% at %U%	G S M
	Retrieved: 	%H% at %T%
	SCCS archive:	%P%
d10 4
a13 4
			Maryland 21005
			(301)278-6647 or AV-283-6647
 */
#ifndef lint
d15 2
a16 2
char	sccsTag[] = "%Z% %M%	%I%	last edit %G% at %U%";
#endif lint
d52 3
a54 1
			prnt_Debug( "exec_Shell() could not fork" );
d59 1
a59 1
			prnt_Debug( "%s : could not execute", args[0] );
d64 1
a64 1
#if defined( BSD )
d84 3
a86 1
				prnt_Debug( "wait failed : no children" );
d92 1
a92 1
					prnt_Debug( "Child stopped" );
d97 1
a97 1
					prnt_Debug( "Child terminated" );
@


1.1
log
@Initial revision
@
text
@d17 1
d22 1
d24 1
d63 1
d65 1
@
