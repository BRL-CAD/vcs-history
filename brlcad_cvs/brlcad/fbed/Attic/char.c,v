head	11.9;
access;
symbols
	ansi-20040405-merged:11.6.2.1
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.6
	premerge-autoconf:11.6
	ansi-20040316-freeze:11.6.2.1
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.6
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.2
	offsite-5-3-pre:11.3
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:5.1
	rel-1-24:5.1
	rel-1-20:4.3
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.24.04.13.10;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.07.52.17;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.07.27;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	2002.08.15.20.54.40;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.09.17.45.24;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.24.22.55.35;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.01.31.16.05.01;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.13.46;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.23.19.46.51;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	93.10.26.02.55.39;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.49.33;	author mike;	state Rel4_0;
branches;
next	9.2;

9.2
date	90.11.26.11.16.46;	author moss;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.12.01;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.44.57;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.10.04.20.09.29;	author moss;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.10.20;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.13.46;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.44.50;	author mike;	state Rel;
branches;
next	4.4;

4.4
date	87.06.19.09.23.37;	author moss;	state Exp;
branches;
next	4.3;

4.3
date	87.02.13.00.52.04;	author mike;	state Exp;
branches;
next	4.2;

4.2
date	86.12.31.16.13.12;	author moss;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.02.51.16;	author mike;	state Rel1;
branches;
next	1.4;

1.4
date	86.12.26.22.36.27;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	86.11.13.03.27.54;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.11.12.23.03.57;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.11.10.23.10.30;	author mike;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.00.45;	author morrison;	state Exp;
branches;
next	;


desc
@Gary Moss' Original Version
@


11.9
log
@moved to src/fbed/
@
text
@/*
	Author:		Gary S. Moss
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066
			(301)278-6651 or DSN 298-6651
*/
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/fbed/char.c,v 11.8 2004/05/10 15:30:42 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "externs.h"
#include "fb.h"

#include "./std.h"
#include "./font.h"
#include "./ascii.h"
#include "./try.h"
#include "./extern.h"

#define DEBUG_STRINGS	false

/* 
	char.c - routines for displaying a string on a frame buffer.
 */
extern void fudge_Pixel();
extern void fill_buf(register int wid, register int *buf), clear_buf(int wid, register int *buf);
extern void squash(register int *buf0, register int *buf1, register int *buf2, register float *ret_buf, register int n);

STATIC void do_Char(int c, int xpos, int ypos, int odd);
void menu_char(int x_adjust, int menu_wid, int odd, register unsigned char *menu_border);

void
do_line(int xpos, int ypos, register char *line, RGBpixel (*menu_border))
               
                    
                       /* Menu outline color, if NULL, do filtering. */
	{	register int    currx;
		register int    char_count, char_id;
		register int len = strlen( line );
#if DEBUG_STRINGS
	fb_log( "do_line: xpos=%d ypos=%d line=\"%s\" menu_border=0x%x\n",
		xpos, ypos, line, (int) menu_border );
#endif
	if( ffdes == NULL )
		{
		fb_log( "ERROR: must read font first.\n" );
		return;
		}
	currx = xpos;

	for( char_count = 0; char_count < len; char_count++ )
		{
		char_id = (int) line[char_count] & 0377;

		/* locate the bitmap for the character in the file */
		if( fseek( ffdes, (long)(SWABV(dir[char_id].addr)+offset), 0 )
			== EOF
			)
			{
			fb_log( "fseek() to %ld failed.\n",
				(long)(SWABV(dir[char_id].addr) + offset)
				);
			return;
			}

		/* Read in the dimensions for the character */
		width = SignedChar(dir[char_id].right) +
				SignedChar(dir[char_id].left);
		height = SignedChar(dir[char_id].up) +
				SignedChar(dir[char_id].down);

#if DEBUG_STRINGS
		fb_log( "do_line: right=%d left=%d up=%d down=%d\n",
			SignedChar(dir[char_id].right),
			SignedChar(dir[char_id].left),
			SignedChar(dir[char_id].up),
			SignedChar(dir[char_id].down)
			);
		fb_log( "do_line: width=%d height=%d\n", width, height );
#endif

		if( currx + width > fb_getwidth(fbp) - 1 )
			break;		/* won't fit on screen */

		if( menu_border == (RGBpixel *)RGBPIXEL_NULL )
			do_Char( char_id, currx, ypos,
				SignedChar(dir[char_id].down)%2 );
		else
			menu_char(	currx,
					ypos,
					SignedChar(dir[char_id].down) % 2,
					(unsigned char*)menu_border
					);
		currx += SWABV(dir[char_id].width) + 2;
    		}
	return;
	}

/* Shared by do_Char() and menu_char(). */
static int filterbuf[FONTBUFSZ][FONTBUFSZ];

STATIC void
do_Char(int c, int xpos, int ypos, int odd)
{	register int    i, j;
		int base;
		int     	totwid = width;
		int     	down;
		static float	resbuf[FONTBUFSZ];
		static RGBpixel fbline[FONTBUFSZ];
#if DEBUG_STRINGS
	fb_log( "do_Char: c='%c' xpos=%d ypos=%d odd=%d\n",
		c, xpos, ypos, odd );
#endif

	/* read in character bit map, with two blank lines on each end */
	for (i = 0; i < 2; i++)
		clear_buf (totwid, filterbuf[i]);
	for (i = height + 1; i >= 2; i--)
		fill_buf (width, filterbuf[i]);
	for (i = height + 2; i < height + 4; i++)
		clear_buf (totwid, filterbuf[i]);

	(void)SignedChar( dir[c].up );
	down = SignedChar( dir[c].down );

	/* Initial base line for filtering depends on odd flag. */
	base = (odd ? 1 : 2);


	/* Produce a RGBpixel buffer from a description of the character and
	 	the read back data from the frame buffer for anti-aliasing.
	 */
	for (i = height + base; i >= base; i--)
		{
		squash(	filterbuf[i - 1],	/* filter info */
			filterbuf[i],
			filterbuf[i + 1],
			resbuf,
			totwid + 4
			);
		fb_read( fbp, xpos, ypos - down + i, (unsigned char *)fbline, totwid+3);
		for (j = 0; j < (totwid + 3) - 1; j++)
			{	register int tmp;
			/* EDITOR'S NOTE : do not rearrange this code,
				the SUN compiler can't handle more
				complex expressions. */
			tmp = fbline[j][RED] & 0377;
			fbline[j][RED] =
				(int)(paint[RED]*resbuf[j]+(1-resbuf[j])*tmp);
			fbline[j][RED] &= 0377;
			tmp = fbline[j][GRN] & 0377;
			fbline[j][GRN] =
				(int)(paint[GRN]*resbuf[j]+(1-resbuf[j])*tmp);
			fbline[j][GRN] &= 0377;
			tmp = fbline[j][BLU] & 0377;
			fbline[j][BLU] =
				(int)(paint[BLU]*resbuf[j]+(1-resbuf[j])*tmp);
			fbline[j][BLU] &= 0377;
			}
		fb_write( fbp, xpos, ypos - down + i, (unsigned char *)fbline,  totwid+3 );
		}
	return;
	}

void
menu_char(int x_adjust, int menu_wid, int odd, register unsigned char *menu_border)
{	register int    i, j, k;
		int embold = 1;
		int base;
		int totwid = width;
	/* Read in the character bit map, with two blank lines on each end. */
	for (i = 0; i < 2; i++)
		clear_buf (totwid, filterbuf[i]);
	for (i = height + 1; i >= 2; i--)
		fill_buf (width, filterbuf[i]);
	for (i = height + 2; i < height + 4; i++)
		clear_buf (totwid, filterbuf[i]);

	for (k=0; k<embold; k++)
		for (i=2; i<height+2; i++)
			for (j=totwid+1; j>=2; j--)
		  		filterbuf[i][j+1] |= filterbuf[i][j];
 
	/* Initial base line for filtering depends on odd flag. */
	base = (odd ? 1 : 2);

	/* Change bits in menu that correspond to character bitmap. */
	for (i = height + base, k = 0; i >= base; i--, k++)
		{	register RGBpixel *menu;
		menu = menu_addr + k * menu_wid + x_adjust;
		for (j = 0; j < (totwid + 3) - 1; j++, menu++ )
			if( filterbuf[i][j] )
				{
				COPYRGB(*menu, menu_border);
				}
		}
	return;
	}

/*	b i t x ( )
	Extract a bit field from a bit string.
 */
int
bitx(register char *bitstring, register int posn)
{
#if 0 /* Was #ifdef vax , but doesn't work on 4.3BSD */
   	register field;

   	asm("extzv	r10,$1,(r11),r8");
	return field;
#else
	for( ; posn >= 8; posn -= 8, bitstring++ )
		;
#if defined( CANT_DO_ZERO_SHIFT )
	if( posn == 0 )
		return (int)(*bitstring) & 1;
	else
#endif
	return (int)(*bitstring) & (1<<posn);
#endif
	}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fbed/char.c,v 11.7 2004/04/05 07:52:17 morrison Exp $ (BRL)";
@


11.7
log
@merge of ansi-6-0-branch into HEAD
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d12 5
a16 1
#include "conf.h"
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fbed/char.c,v 11.4 2001/08/09 17:45:24 jra Exp $ (BRL)";
d38 2
a39 2
extern void fill_buf(), clear_buf();
extern void squash();
d41 2
a42 2
STATIC void do_Char();
void menu_char();
d45 4
a48 4
do_line( xpos, ypos, line, menu_border )
int xpos, ypos;
register char *line;
RGBpixel *menu_border; /* Menu outline color, if NULL, do filtering. */
d104 1
a104 1
					menu_border
d115 2
a116 4
do_Char( c, xpos, ypos, odd )
int c;
int xpos, ypos, odd;
	{	register int    i, j;
d178 2
a179 5
menu_char( x_adjust, menu_wid, odd, menu_border )
int x_adjust, menu_wid, odd;
register
RGBpixel menu_border;
	{	register int    i, j, k;
d216 2
a217 4
bitx( bitstring, posn )
register char *bitstring;
register int posn;
	{
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fbed/char.c,v 11.6 2002/08/20 17:07:27 jra Exp $ (BRL)";
d38 2
a39 2
extern void fill_buf(register int wid, register int *buf), clear_buf(int wid, register int *buf);
extern void squash(register int *buf0, register int *buf1, register int *buf2, register float *ret_buf, register int n);
d41 2
a42 2
STATIC void do_Char(int c, int xpos, int ypos, int odd);
void menu_char(int x_adjust, int menu_wid, int odd, register unsigned char *menu_border);
d45 4
a48 4
do_line(int xpos, int ypos, register char *line, RGBpixel (*menu_border))
               
                    
                       /* Menu outline color, if NULL, do filtering. */
d104 1
a104 1
					(unsigned char*)menu_border
d115 4
a118 2
do_Char(int c, int xpos, int ypos, int odd)
{	register int    i, j;
d180 5
a184 2
menu_char(int x_adjust, int menu_wid, int odd, register unsigned char *menu_border)
{	register int    i, j, k;
d221 4
a224 2
bitx(register char *bitstring, register int posn)
{
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d38 2
a39 2
extern void fill_buf(register int wid, register int *buf), clear_buf(int wid, register int *buf);
extern void squash(register int *buf0, register int *buf1, register int *buf2, register float *ret_buf, register int n);
d41 2
a42 2
STATIC void do_Char(int c, int xpos, int ypos, int odd);
void menu_char(int x_adjust, int menu_wid, int odd, register unsigned char *menu_border);
d45 4
a48 4
do_line(int xpos, int ypos, register char *line, RGBpixel (*menu_border))
               
                    
                       /* Menu outline color, if NULL, do filtering. */
d104 1
a104 1
					(unsigned char*)menu_border
d115 4
a118 2
do_Char(int c, int xpos, int ypos, int odd)
{	register int    i, j;
d180 5
a184 2
menu_char(int x_adjust, int menu_wid, int odd, register unsigned char *menu_border)
{	register int    i, j, k;
d221 4
a224 2
bitx(register char *bitstring, register int posn)
{
@


11.4
log
@Lint
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fbed/char.c,v 11.3 2000/08/24 22:55:35 mike Exp $ (BRL)";
d38 2
a39 2
extern void fill_buf(), clear_buf();
extern void squash();
d41 2
a42 2
STATIC void do_Char();
void menu_char();
d45 4
a48 4
do_line( xpos, ypos, line, menu_border )
int xpos, ypos;
register char *line;
RGBpixel *menu_border; /* Menu outline color, if NULL, do filtering. */
d104 1
a104 1
					menu_border
d115 2
a116 4
do_Char( c, xpos, ypos, odd )
int c;
int xpos, ypos, odd;
	{	register int    i, j;
d178 2
a179 5
menu_char( x_adjust, menu_wid, odd, menu_border )
int x_adjust, menu_wid, odd;
register
RGBpixel menu_border;
	{	register int    i, j, k;
d216 2
a217 4
bitx( bitstring, posn )
register char *bitstring;
register int posn;
	{
@


11.3
log
@
RCSid
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fbed/char.c,v 11.2 2000/01/31 16:05:01 jra Exp $ (BRL)";
d15 6
@


11.2
log
@Eliminated some unused variables
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fbed/char.c,v 11.1 1995/01/04 10:13:46 mike Rel4_4 $ (BRL)";
@


11.1
log
@Release_4.4
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/char.c,v 10.3 94/08/23 19:46:51 gdurf Exp $ (BRL)";
d115 1
a115 1
		int     	up, down;
d131 1
a131 1
	up = SignedChar( dir[c].up );
@


10.3
log
@Made includes explicit
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/char.c,v 10.2 1993/10/26 02:55:39 mike Exp gdurf $ (BRL)";
@


10.2
log
@New fb.h
POSIX
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/char.c,v 10.1 91/10/12 06:49:33 mike Rel4_0 Locker: mike $ (BRL)";
d11 3
d15 5
d22 2
d25 1
@


10.1
log
@Release_4.0
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: /m/cad/fbed/RCS/char.c,v 9.2 90/11/26 11:16:46 moss Exp $ (BRL)";
d80 1
a80 1
		if( menu_border == RGBPIXEL_NULL )
d138 1
a138 1
		fb_read( fbp, xpos, ypos - down + i, fbline, totwid+3);
d157 1
a157 1
		fb_write( fbp, xpos, ypos - down + i, fbline,  totwid+3 );
@


9.2
log
@Just checking in sources in preparation for release 4.0.
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: char.c,v 9.1 89/05/19 06:12:01 moss Locked $ (BRL)";
@


9.1
log
@Release_3.5
@
text
@d6 1
a6 1
			(301)278-6651 or AV-298-6651
d9 1
a9 1
static char RCSid[] = "@@(#)$Header: char.c,v 8.1 88/10/05 00:44:57 mike Rel3_0 $ (BRL)";
d20 3
a22 3
extern void	fudge_Pixel();
extern void	fill_buf(), clear_buf();
extern void	squash();
d24 2
a25 2
_LOCAL_ void	do_Char();
void		menu_char();
d29 3
a31 3
int		xpos, ypos;
register char	*line;
RGBpixel	*menu_border; /* Menu outline color, if NULL, do filtering. */
d34 1
a34 1
		register int	len = strlen( line );
d94 2
a95 2
/* Shared by do_Char() and menu_char().					*/
static int		filterbuf[FONTBUFSZ][FONTBUFSZ];
d97 1
a97 1
_LOCAL_ void
d102 1
a102 1
		int		base;
d106 1
a106 1
		static RGBpixel	fbline[FONTBUFSZ];
d140 1
a140 1
			{	register int	tmp;
d143 1
a143 1
				complex expressions.			*/
d166 1
a166 1
RGBpixel	menu_border;
d168 3
a170 3
		int		embold = 1;
		int		base;
		int		totwid = width;
d187 1
a187 1
	/* Change bits in menu that correspond to character bitmap.	*/
d189 1
a189 1
		{	register RGBpixel	*menu;
d218 1
a218 1
		return	(int)(*bitstring) & 1;
d221 1
a221 1
	return	(int)(*bitstring) & (1<<posn);
@


8.1
log
@Release_3.0
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header: char.c,v 7.2 88/10/04 20:09:29 moss Exp $ (BRL)";
@


7.2
log
@Recent revisions
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@


7.1
log
@Release 2.3
@
text
@d2 1
a2 9
	SCCS id:	@@(#) char.c	2.3
	Modified: 	12/31/86 at 16:09:47
	Retrieved: 	12/31/86 at 16:09:54
	SCCS archive:	/vld/moss/src/fbed/s.char.c

	Authors:	Paul R. Stay
			Gary S. Moss
			Doug A. Gwyn

d6 1
a6 1
			(301)278-6647 or AV-298-6647
d8 2
a9 3
#if ! defined( lint )
static
char	sccsTag[] = "@@(#) char.c 2.3, modified 12/31/86 at 16:09:47, archive /vld/moss/src/fbed/s.char.c";
a10 1

d12 2
d15 2
d31 1
a31 1
RGBpixel		*menu_border; /* Menu outline color, if NULL, do filtering. */
d35 4
d41 1
a41 1
		fb_log( "ERROR: do_line() called before get_Font().\n" );
d62 4
a65 2
		width = dir[char_id].right + dir[char_id].left;
		height = dir[char_id].up + dir[char_id].down;
d67 10
d81 2
a82 1
			do_Char( char_id, currx, ypos, dir[char_id].down%2 );
d86 1
a86 1
					dir[char_id].down % 2,
d107 4
d112 1
a112 1
	/* Read in the character bit map, with two blank lines on each end. */
d120 2
a121 2
	up = dir[c].up;
	down = dir[c].down;
@


6.1
log
@Release 2.0
@
text
@@


5.1
log
@Release 1.24
@
text
@@


4.4
log
@bitx() was static, now global.
@
text
@@


4.3
log
@Release 1.20 -- First Formal Release
@
text
@d188 1
a188 1
_LOCAL_ int
@


4.2
log
@Simplified code in loop around line 129, see EDITOR's NOTE.
It confused the SUN compiler.
@
text
@@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d2 3
a4 3
	SCCS id:	@@(#) char.c	2.1
	Modified: 	12/9/86 at 15:54:38
	Retrieved: 	12/26/86 at 21:53:56
d18 1
a18 1
char	sccsTag[] = "@@(#) char.c 2.1, modified 12/9/86 at 15:54:38, archive /vld/moss/src/fbed/s.char.c";
d125 5
a129 1
			{
d131 3
a133 3
				(int)(paint[RED]*resbuf[j]+(1-resbuf[j]) *
		    		(fbline[j][RED] & 0377))
			 	& 0377;
d135 3
a137 3
				(int)(paint[GRN]*resbuf[j]+(1-resbuf[j]) *
				(fbline[j][GRN] & 0377))
				& 0377;
d139 2
a140 3
				(int)(paint[BLU]*resbuf[j]+(1-resbuf[j]) *
				(fbline[j][BLU] & 0377))
				& 0377;
@


1.4
log
@Latest version from Gary Moss
@
text
@@


1.3
log
@
Working version with new libfb
@
text
@d2 3
a4 3
	SCCS id:	@@(#) char.c	1.13
	Modified: 	5/6/86 at 15:33:30 Gary S. Moss
	Retrieved: 	8/6/86 at 13:35:23
d6 9
d18 1
a18 1
char	sccsTag[] = "@@(#) char.c 1.13, modified 5/6/86 at 15:33:30, archive /vld/moss/src/fbed/s.char.c";
d21 2
d24 1
a24 6
 * char.c - display a character on the ikonas frambuffer
 * 
 * Author:	Paul R. Stay
 * 		Ballistics Research Labratory
 * 		APG, Md.
 * Date:	Tue Jan  8 1985
a25 6
#include <stdio.h>
#include "fb.h"
#include "./font.h"
#include "./popup.h"
#include "./extern.h"

d30 2
a31 1
void		dochar(), menu_char();
a40 1
		int		curry;
d42 2
d45 1
a46 1
	curry = ypos;
d53 9
a61 1
		(void) fseek( ffdes, (long)(dir[char_id].addr+offset), 0 );
d64 1
a64 1
		width = dir[char_id].left + dir[char_id].right;
d71 1
a71 1
			dochar( char_id, currx, curry, dir[char_id].down%2 );
d74 1
a74 1
					curry,
d78 1
a78 1
		currx += dir[char_id].width;
d83 2
a84 2
/* Shared by dochar() and menu_char().					*/
static int		filterbuf[BUFFSIZ][BUFFSIZ];
d86 2
a87 2
void
dochar( c, xpos, ypos, odd )
d90 6
a95 7
	{
	register int    i, j;
	int		base;
	int     	totwid = width;
	int     	up, down;
	static float	resbuf[BUFFSIZ];
	static RGBpixel	fbline[BUFFSIZ];
d180 25
@


1.2
log
@First version that compiles
@
text
@d81 1
a81 1
	register int    i, j, k;
d86 1
a86 2
	static RGBpixel	fbline[BUFFSIZ * BUFFSIZ / 4],
			fbbuff[BUFFSIZ * BUFFSIZ / 4];
a101 7
	/* Read in the area of the Frame Buffer for filtering */
	fbbget(	xpos,
		xpos + (totwid + 3) - 2,
		ypos - up,
		ypos + down + 3,
		fbbuff
		);
d106 1
a106 1
	for (i = height + base, k = 0; i >= base; i--, k++)
d114 1
d116 2
a117 2
			{	register int	h = (k*((totwid+3)-1))+j;
			fbline[h][RED] =
d119 1
a119 1
		    		(fbbuff[h][RED] & 0377))
d121 1
a121 1
			fbline[h][GRN] =
d123 1
a123 1
				(fbbuff[h][GRN] & 0377))
d125 1
a125 1
			fbline[h][BLU] =
d127 1
a127 1
				(fbbuff[h][BLU] & 0377))
d130 1
a131 7
	/* Send the character data back to be read into the frame buffer */
	fbbput( xpos,
		xpos + (totwid + 3) - 2,
		ypos - up,
		ypos - up + k - 1,
		fbline
		);
@


1.1
log
@Initial revision
@
text
@d11 1
d21 1
a21 1
#include <fb.h>
d25 1
d36 1
a36 1
Pixel		*menu_border; /* Menu outline color, if NULL, do filtering. */
d57 1
a57 1
		if( currx + width > _fbsize - 1 )
d60 1
a60 1
		if( menu_border == (Pixel *) NULL )
d86 1
a86 1
	static Pixel	fbline[BUFFSIZ * BUFFSIZ / 4],
d111 1
a111 1
	/* Produce a Pixel buffer from a description of the character and
d124 3
a126 3
			fbline[h].red =
				(int)(paint.red*resbuf[j]+(1-resbuf[j]) *
		    		(fbbuff[h].red & 0377))
d128 3
a130 3
			fbline[h].green =
				(int)(paint.green*resbuf[j]+(1-resbuf[j]) *
				(fbbuff[h].green & 0377))
d132 3
a134 3
			fbline[h].blue =
				(int)(paint.blue*resbuf[j]+(1-resbuf[j]) *
				(fbbuff[h].blue & 0377))
d152 1
a152 1
Pixel	*menu_border;
d175 1
a175 1
		{	register Pixel	*menu;
d179 3
a181 1
				*menu = *menu_border;
@
