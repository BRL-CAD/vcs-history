head	14.10;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.4
	rel-7-10-2:14.9
	rel-7-10-0:14.9
	rel-7-8-4:14.9
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.2
	rel-7-6-0:14.7
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.2
	ansi-20040405-merged:1.12
	postmerge-20040405-ansi:1.12
	premerge-20040404-ansi:1.12
	postmerge-autoconf:1.12
	autoconf-freeze:1.12
	premerge-autoconf:1.12
	postmerge-20040315-windows:1.12
	premerge-20040315-windows:1.12
	windows-20040315-freeze:1.12
	autoconf-20031203:1.12
	autoconf-20031202:1.12
	autoconf-branch:1.12.0.12
	phong-branch:1.12.0.10
	photonmap-branch:1.12.0.8
	rel-6-1-DP:1.12
	windows-branch:1.12.0.6
	rel-6-0-2:1.12
	ansi-branch:1.12.0.4
	rel-6-0-1-branch:1.12.0.2
	hartley-6-0-post:1.12
	hartley-6-0-pre:1.12
	rel-6-0-1:1.12
	rel-6-0:1.12;
locks; strict;
comment	@# @;


14.10
date	2007.10.22.04.36.20;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.12.18.00.29.04;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.27;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.29.20.43.43;	author lbutler;	state Exp;
branches
	14.7.2.1;
next	14.6;

14.6
date	2005.08.25.18.40.45;	author lbutler;	state Exp;
branches;
next	14.5;

14.5
date	2005.08.24.12.46.15;	author lbutler;	state Exp;
branches;
next	14.4;

14.4
date	2005.08.22.21.24.07;	author lbutler;	state Exp;
branches;
next	14.3;

14.3
date	2005.05.12.22.23.42;	author lbutler;	state Exp;
branches;
next	14.2;

14.2
date	2005.05.09.22.42.49;	author lbutler;	state Exp;
branches;
next	14.1;

14.1
date	2005.05.09.20.03.20;	author lbutler;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.19.19.16.08;	author morrison;	state dead;
branches;
next	1.12;

1.12
date	2001.09.19.08.47.32;	author morrison;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.06.21.46.46;	author morrison;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.06.01.35.05;	author morrison;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.30.16.00.52;	author morrison;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.30.15.57.58;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.30.15.53.20;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.30.02.55.19;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.30.02.54.01;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.30.02.47.33;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.28.19.54.24;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.28.15.59.23;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.28.15.43.36;	author morrison;	state Exp;
branches;
next	;

14.7.2.1
date	2005.11.13.13.46.10;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.10
log
@more consistent echo output
@
text
@#!/bin/sh

HOSTS="wopr liu amdws2 vast cocoa"
MASTERHOST="wopr"

export MYNAME=`hostname | awk -F '.' '{print $1}'`
export START_TIME=`date "+%y%m%d%H%M"`
export LOG_FILE=`pwd`/${MYNAME}_${START_TIME}.log

#
# if we are the master host, get things set up
#
if [ X$MYNAME == X$MASTERHOST ] ; then
    echo "fetching archive"

    # Delete any leftovers
    rm -rf $HOSTS
    rm -rf  brlcad

    # Fetch a clean copy of the repository
    CVS_RSH=ssh
    export CVS_RSH
    cvs  -z3 -d:ext:lbutler@@cvs.sf.net:/cvsroot/brlcad co -P brlcad > $LOG_FILE 2>&1

    if [ ! -d brlcad ] ; then
	echo "unable to extract source from CVS repository"
	exit 1
    fi


    # Process the checkout we just got
    cd brlcad

    # extract New release numbers from README
    eval `awk '/Release/ {print $2}' < README | \
	awk -F. '{print "export MAJOR=" $1  "\nexport MINOR=" $2 "\nexport PATCH=" $3}'`

    # Extract old release numbers from configure.ac
    OLD_MAJOR=`awk -F\= '/^MAJOR_VERSION/ {print $2}' < configure.ac`
    OLD_MINOR=`awk -F\= '/^MINOR_VERSION/ {print $2}' < configure.ac`
    OLD_PATCH=`awk -F\= '/^PATCH_VERSION/ {print $2}' < configure.ac`


    # Update configure.ac with the release we found in README
    echo "update configure"
    if [ ! -f configure.ac.orig ] ; then
	mv configure.ac configure.ac.orig
    fi

    sed -e "s/$OLD_MAJOR\.$OLD_MINOR\.$OLD_PATCH/$MAJOR\.$MINOR\.$PATCH/" \
	-e "s/MAJOR_VERSION=$OLD_MAJOR/MAJOR_VERSION=$MAJOR/" \
	-e "s/MINOR_VERSION=$OLD_MINOR/MINOR_VERSION=$MINOR/" \
	-e "s/^PATCH_VERSION=$OLD_PATCH/PATCH_VERSION=$PATCH/" \
	< configure.ac.orig > configure.ac

    # get a build environment so we can "make dist"
    echo "autogen"
    sh ./autogen.sh >> $LOG_FILE 2>&1

    echo "configure"
    ./configure >> $LOG_FILE 2>&1

    # Prepare a source distribution
    echo "making dist"
    make dist >> $LOG_FILE 2>&1
    cd ..

    # create the source tree that all machine will build from
    tar xzf brlcad/brlcad-$MAJOR.$MINOR.$PATCH.tar.gz

    # Let the other regression hosts start doing their work
    echo "semaphores"
    for i in $HOSTS ; do
	echo "$MAJOR.$MINOR.$PATCH" > $i
    done
fi

# wait to be told we can proceed

while [ ! -f $MYNAME ] ; do

    NOW=`date "+%y%m%d%H%M"`
    DELTA=`expr $START_TIME - $NOW`

    if [ $DELTA -gt 300 ] ; then
	# we should log something here
	echo "$MYNAME giving up at $NOW" >> $LOG_FILE

	exit 1
    fi

    sleep 10
done

echo "Starting build"

VERSION=`cat $MYNAME`
rm $MYNAME
# start the build
case $MYNAME in
wopr)
    export CONF_FLAGS="" ;
    export MAKE_CMD="make" ;
    export MAKE_OPTS="-j11" ;;
liu)
    export CONF_FLAGS="" ;
    export MAKE_CMD="make" ;
    export MAKE_OPTS="-j2" ;;

amdws2)
    export CONF_FLAGS="" ;
    export MAKE_CMD="make" ;
    export MAKE_OPTS="-j2" ;;

vast)
    export CONF_FLAGS="CC=cc CFLAGS=-64 LDFLAGS=-64 --enable-64bit-build" ;
    export MAKE_CMD="/usr/gnu/bin/make" ;
    export MAKE_OPTS="-j5" ;;
cocoa)
    export CONF_FLAGS="" ;
    export MAKE_CMD="make" ;
    export MAKE_OPTS="-j2" ;;
*)
    echo "hostname \"$MYNAME\" not recognized"
    exit 1
esac

BUILD_DIR=`pwd`/${MYNAME}_${START_TIME}.dir
rm -f $BUILD_DIR
mkdir $BUILD_DIR
if [ ! -d $BUILD_DIR ] ; then
    echo "Creation of $BUILD_DIR failed"
    exit 1
fi

cd $BUILD_DIR

echo ../brlcad-$VERSION/configure \
    $CONF_FLAGS \
    --prefix=/usr/brlcad/rel-$VERSION \
    >> $LOG_FILE 2>&1

../brlcad-$VERSION/configure \
    $CONF_FLAGS \
    --prefix=/usr/brlcad/rel-$VERSION \
    >> $LOG_FILE 2>&1

echo "runnig: $MAKE_CMD $MAKE_OPTS" >> $LOG_FILE 2>&1

$MAKE_CMD $MAKE_OPTS > build.log 2>&1
STATUS=$?
if [ $STATUS != 0 ] ; then
    echo "Build failed with status $STATUS"
    exit 1
fi
if [ -s build.log ] ; then
    cd regress
    make test > test.log 2>&1
else
    echo "Build failed, zero length log file"
    exit 1
fi
@


14.9
log
@negative numbers are not valid exit codes.  they're 8 bit unsigned values, so just exit 1 instead to indicate the error.
@
text
@d14 1
a14 1
    /bin/echo fetching archive
d26 1
a26 1
	/bin/echo "unable to extract source from CVS repository"
d45 1
a45 1
    /bin/echo update configure
d57 2
a58 2
    /bin/echo autogen
    /bin/sh ./autogen.sh >> $LOG_FILE 2>&1
d60 1
a60 1
    /bin/echo configure
d64 1
a64 1
    /bin/echo making dist
d72 1
a72 1
    /bin/echo semaphores
d74 1
a74 1
	echo $MAJOR.$MINOR.$PATCH > $i
d87 1
a87 1
	/bin/echo $MYNAME giving up at $NOW >> $LOG_FILE
d95 1
a95 1
/bin/echo "Starting build"
d124 1
a124 1
    echo hostname \"$MYNAME\" not recognized
d132 1
a132 1
    echo create $BUILD_DIR failed
d148 1
a148 1
echo runnig: $MAKE_CMD $MAKE_OPTS >> $LOG_FILE 2>&1
d153 1
a153 1
    echo build failed status $STATUS
d160 1
a160 1
    echo build failed zero length log
@


14.8
log
@trailing ws
@
text
@d27 1
a27 1
	exit -1
d89 1
a89 1
	exit
d125 1
a125 1
    exit
d133 1
a133 1
    exit -1
d154 1
a154 1
    exit -1
d161 1
a161 1
    exit -1
@


14.7
log
@Added checks for host not known, and build failure
@
text
@d85 1
a85 1
    if [ $DELTA -gt 300 ] ; then 
d100 1
a100 1
case $MYNAME in 
@


14.7.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d85 1
a85 1
    if [ $DELTA -gt 300 ] ; then
d100 1
a100 1
case $MYNAME in
@


14.6
log
@Getting the nightly tests to work.
Making the scripts report an exit code when things go wrong.
@
text
@d3 2
a4 2
HOSTS="wopr liu amdws2 vast"
MASTERHOST="woprr"
d119 7
d131 5
d148 2
d151 12
a162 4

cd regress
make test > test.log 2>&1

@


14.5
log
@Added cocoa to the list of hosts
@
text
@d3 2
a4 2
HOSTS="wopr liu amdws2 vast cocoa"
MASTERHOST="wopr"
d10 3
d14 3
a16 1
	/bin/echo fetching archive
d19 4
a22 1
    export CVS_RSH=ssh
d29 3
d34 1
a34 1
    # extract existing release numbers, old an new
d38 1
d44 1
a44 1
    # Update configure.ac with the release we find in README
d56 1
a56 1
    # get a build environment
d66 4
a72 4
    ln brlcad-*.tar.gz ../
    cd ..
    tar xzf brlcad-$MAJOR.$MINOR.$PATCH.tar.gz

d128 1
a128 1
    --prefix=/usr/brlcad/rel-$MAJOR.$MINOR.$PATCH \
d133 1
a133 1
    --prefix=/usr/brlcad/rel-$MAJOR.$MINOR.$PATCH \
d137 1
a137 1
make install >& install.log 2>&1
d139 2
a140 1
make test > test.log 2>&1@


14.4
log
@Trying to get nightly smoke to run again
@
text
@d3 1
a3 1
HOSTS="wopr liu amdws2 vast"
d12 2
a13 1
    rm -rf $HOSTS brlcad
d15 1
a15 1
    cvs  -z3 -d:pserver:anonymous@@cvs.sf.net:/cvsroot/brlcad co -P brlcad > $LOG_FILE 2>&1
d32 1
a32 1
    # Update configure.ac
d44 1
d48 8
d57 1
d59 2
d62 1
a62 1
	touch $i
d84 44
a127 1
/bin/sh brlcad/regress/main.sh
@


14.3
log
@converted back to anonymous checkout
@
text
@d7 1
a7 1
export START_TIME=`date "+%y%m%H%M"`
d16 4
d21 23
d46 1
d57 1
a57 1
    NOW=`date "+%y%m%H%M"`
d70 1
a70 1

@


14.2
log
@now we track the release number and do the regression test
@
text
@d4 1
a4 1
MASTERHOST="1234"
d14 1
a14 1
    cvs  -z3 -d:ext:lbutler@@cvs.sf.net:/cvsroot/brlcad co -P brlcad > $LOG_FILE 2>&1
@


14.1
log
@Updates for running regression test from remote directory when build tree
and source tree are different.

Added nightly.sh and main.sh which are the foundation for the nightly runs.
More to come in these two.
@
text
@d4 1
a4 1
MASTERHOST="void"
d10 2
a11 1
if [ X`hostname` == X$MASTERHOST ] ; then
d13 2
a14 1
    cvs  -z3 -d:pserver:anonymous@@cvs.sf.net:/cvsroot/brlcad co -P brlcad > $LOG_FILE 2>&1
d17 1
a17 1
    /bin/sh ./autogen.sh > $LOG_FILE 2>&1
d43 1
a43 1
/bin/sh brlcad/regress/main.sh@


1.13
log
@The old regression test scripts are being replaced by something else.  Likely it'll be Corredor with some unit test framework.  The old scripts are so far out of sync and so inadequate that it's simply not worth it any more.
@
text
@d2 33
a34 44
#
###
#
# This script intended for internal use.  It verifies that there is a current
# checkout of the regression suite available in the current working directory
# and then will either invoke the master script or the status script.
#
###
#
# crontab entries for running the master scripts
#
#   0 5 * * * ~/nightly.sh master
#   0 8 * * * ~/nightly.sh status
#
# crontab entries for running the client scripts with nfs or local disk access
#
#   30 5 * * * ~/brlcad/regress/client_wait.sh -d /c/regress
#
###############################################################################

case $1 in
master)
    TASK=master
    echo "RUNNING MASTER"
    ;;
status)
    TASK=status
    echo "CHECKING STATUS"
    ;;
*)
    echo 'must specify "master" or "status" argument'
    exit 1
    ;;
esac

CVS=cvs
if [ ! -x "`which $CVS`" ] ; then
    CVS=/usr/gnu/bin/cvs
    if [ ! -x "`which $CVS`" ] ; then
        CVS=/usr/bin/cvs
        if [ ! -x "`which $CVS`" ] ; then
            echo "unable to find cvs!"
            exit 1
        fi
a35 4
fi
echo CVS=$CVS
echo PATH=$PATH
echo TIME=`date`
d37 3
a39 17
if [ -d brlcad/regress ] ; then 
    rm -rf brlcad/regress
fi
$CVS -q -d /c/CVS export -D today -N brlcad/regress
cd brlcad/regress
cp nightly.sh ../..

if [ "x$TASK" = "xmaster" ] ; then
    ./master.sh -C -d /c/regress -c /usr/gnu/bin/cvs -r /c/CVS
    echo "DONE RUNNING MASTER"
elif [ "x$TASK" = "xstatus" ] ; then
    ./status.sh -d /c/regress -a lamas@@arl.army.mil
    echo "DONE CHECKING STATUS"
else
    echo "INTERNAL ERROR -- not master or status"
    exit 1
fi
d41 1
a41 1
exit 0
@


1.12
log
@changed output from morrison to lamas
@
text
@@


1.11
log
@included full path to cvs
@
text
@d63 1
a63 1
    ./status.sh -d /c/regress -a morrison@@arl.army.mil
@


1.10
log
@added -C option to clobber the regression directory prior to starting
@
text
@d60 1
a60 1
    ./master.sh -C -d /c/regress -r /c/CVS
@


1.9
log
@*** empty log message ***
@
text
@d60 1
a60 1
    ./master.sh -d /c/regress -r /c/CVS
@


1.8
log
@added log messages to see what cvs was used, the path, and the time
@
text
@d41 5
a45 5
	CVS=/usr/bin/cvs
	if [ ! -x "`which $CVS`" ] ; then
	    echo "unable to find cvs!"
	    exit 1
	fi
@


1.7
log
@added 'check' to find cvs if not in path
@
text
@d49 3
a51 1
exit
@


1.6
log
@*** empty log message ***
@
text
@d37 13
d53 1
a53 1
cvs -q -d /c/CVS export -D today -N brlcad/regress
@


1.5
log
@*** empty log message ***
@
text
@d47 1
a47 1
elif [ "x#TASK" = "xstatus" ] ; then
@


1.4
log
@*** empty log message ***
@
text
@d32 2
a33 2
    /bin/echo 'must specify "master" or "status" argument'
    exit -1
d37 3
d52 1
a52 1
    exit -1
@


1.3
log
@added section comments for logging
@
text
@d24 1
a25 8
    if [ ! -x brlcad/regress/master.sh ] ; then
	cvs -q -d /c/CVS export -D today -N brlcad/regress
    else 
	cvs -d /c/CVS update brlcad
    fi
    cd brlcad/regress
    ./master.sh -d /c/regress -r /c/CVS
    echo "DONE RUNNING MASTER"
d28 1
a29 8
    if [ ! -x brlcad/regress/master.sh ] ; then
	cvs -q -d /c/CVS export -D today -N brlcad/regress
    else
	cvs -d /c/CVS update brlcad
    fi
    cd brlcad/regress
    ./status.sh -d /c/regress -a lamas@@arl.army.mil
    echo "DONE CHECKING STATUS"
d33 1
d35 18
a52 1
esac@


1.2
log
@added crontab entries and comments about this file's utility
@
text
@d24 1
d27 2
a29 1
    cvs update brlcad
d32 1
d35 1
d38 2
a40 1
    cvs update brlcad
d43 1
@


1.1
log
@initial nightly script that will checkout and run the master or status script for internal use
@
text
@d2 19
@

