head	1.3;
access;
symbols
	ansi-20040405-merged:1.2
	postmerge-20040405-ansi:1.2
	premerge-20040404-ansi:1.2
	postmerge-autoconf:1.2
	autoconf-freeze:1.2
	premerge-autoconf:1.2
	postmerge-20040315-windows:1.2
	premerge-20040315-windows:1.2
	windows-20040315-freeze:1.2
	autoconf-20031203:1.2
	autoconf-20031202:1.2
	autoconf-branch:1.2.0.12
	phong-branch:1.2.0.10
	photonmap-branch:1.2.0.8
	rel-6-1-DP:1.2
	windows-branch:1.2.0.6
	rel-6-0-2:1.2
	ansi-branch:1.2.0.4
	rel-6-0-1-branch:1.2.0.2
	hartley-6-0-post:1.2
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2;
locks; strict;
comment	@# @;


1.3
date	2004.05.19.19.16.08;	author morrison;	state dead;
branches;
next	1.2;

1.2
date	2001.10.12.23.32.32;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.05.19.28.11;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.3
log
@The old regression test scripts are being replaced by something else.  Likely it'll be Corredor with some unit test framework.  The old scripts are so far out of sync and so inadequate that it's simply not worth it any more.
@
text
@#
# t e s t s . d
#
###
# Introduction
#
# The scripts in this directory are intended to be used in conjunction with 
# the regression suite.  More specifically, these scripts are normally
# invoked by a 'regression' tool in the '..' directory.  These tests may,
# however, be run by themselves as well (perhaps with a little massaging).
#
# For most tests, running './TESTNAME start' should be enough to get the test
# to begin working.  Some tests, however, are dependant upon others or may
# rely on certain variables to be settable prior to running.
#
# If a test is waiting for some other test to complete, create the
# appropriate semaphore file that it is waiting for and it should continue
# normally.  If the test is dependant upon variables being set, it should 
# complain and/or give an error message -- see the file for details on what
# and appropriate value will be.
#
###
# Creating new tests
#
# All new tests must implement at least one principal function, namely the
# start ( ) function.  More correctly, every test must run when it's first
# argument is "start".  In addition to start, there is a stop and status
# function that may be defined to complement or override the default behaviour.
#
# By default status returns only whether a script has 1) started,
# 2) completed and failed, or 3) completed and succeeded.  No return message
# is given if the test never ran.
#
# By default the stop command will attempt to interrupt and kill any 
# presently running test it finds.  When tests begin running, they register
# themselves using lock variables.  These lock variables make a note of the
# locking process' PID that may be later killed.  The lock also serves to 
# prevent multple invokations of the same tests in the same directory
# (which could cause clobbering of temporary files).
#
# Two other optional commands that may be added to the tests are restart
# and clean.  Restart is, by default, simply a call to the stop and start
# commands.  Clean should be set up to remove any files that get created by 
# a start command.  
#
###
# Conventions
#
# There are a few conventions to consider to maintain consistency and common
# behaviour with other test scripts.  When creating files, they should be
# created in the current directory (whatever that may be) or a subdirectory
# therein (that the script tests for and creates (and cleans out later..)).
# All output should go to stdout and not logged to any particular file.
# Fatal errors and unexpected or bad behaviour should call bomb.  Caution
# messages should be logged using warn.  Echo and the library's log function
# are equivalent, though the latter is preferred for consistency (and for
# escape support detection).  Clean should remove any and all files that the
# script generates.  Any and all files generated should be prefixed with a
# '$TEST.' (e.g. geometry.output.log from the geometry test) where $TEST is
# the name of the test being run.
# 
###@


1.2
log
@*** empty log message ***
@
text
@@


1.1
log
@readme addition -- talks about how to add new tests, conventions, etc
@
text
@d10 1
a10 1
# however, be run by themselves with a little massaging.
d12 1
a12 1
# For most tests, running './test start' should be enough to get the test
d14 1
a14 1
# rely on certain variables to be set prior to running.
d17 4
a20 3
# appropriate semaphore file and it should continue normally.  If the test
# is dependant upon variables being set, it should complain and/or give
# an error message.
d26 3
a28 3
# start ( ) function.  In addition to the start function, there is a stop
# and status function that may be defined to complement or override the
# default behaviour.
d62 1
@

