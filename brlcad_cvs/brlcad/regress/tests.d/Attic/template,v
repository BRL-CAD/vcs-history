head	1.5;
access;
symbols
	ansi-20040405-merged:1.4
	postmerge-20040405-ansi:1.4
	premerge-20040404-ansi:1.4
	postmerge-autoconf:1.4
	autoconf-freeze:1.4
	premerge-autoconf:1.4
	postmerge-20040315-windows:1.4
	premerge-20040315-windows:1.4
	windows-20040315-freeze:1.4
	autoconf-20031203:1.4
	autoconf-20031202:1.4
	autoconf-branch:1.4.0.12
	phong-branch:1.4.0.10
	photonmap-branch:1.4.0.8
	rel-6-1-DP:1.4
	windows-branch:1.4.0.6
	rel-6-0-2:1.4
	ansi-branch:1.4.0.4
	rel-6-0-1-branch:1.4.0.2
	hartley-6-0-post:1.4
	hartley-6-0-pre:1.4
	rel-6-0-1:1.4
	rel-6-0:1.4;
locks; strict;
comment	@# @;


1.5
date	2004.05.19.19.16.08;	author morrison;	state dead;
branches;
next	1.4;

1.4
date	2001.10.24.01.00.56;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.23.16.15.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.12.23.11.21;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.04.18.26.18;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.5
log
@The old regression test scripts are being replaced by something else.  Likely it'll be Corredor with some unit test framework.  The old scripts are so far out of sync and so inadequate that it's simply not worth it any more.
@
text
@#!/bin/sh
#
# t e m p l a t e
#
# This is a test template that does nothing of utility.  There is a stub for
# the start function, which is the only function that must be defined.
#
###
# Source function library
. `dirname $0`/library

# see library for a list of variables available for use in your script


start ( ) {
    log "This is the $TEST test.  It does nothing of utility."
    for i in 1 2 3 4 5 6 7 8 9 ; do
        log "Sleeping $i seconds"
        sleep $i
    done
    log "Done with template test"
    return 0
}

regress $1

exit $?
@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@finally completed default regress behaviour
@
text
@d4 3
a6 3
# 
# This is the BRL-CAD build test script.  It take a given source of brlcad
# and builds it.
d12 3
d16 2
a17 3

    log "Starting template test"
    for i in 1 2 3 4 5 6 7 8 ; do
d27 1
a27 1
exit $?@


1.2
log
@*** empty log message ***
@
text
@d4 3
a6 3
#
# This is a test template that does nothing.  There is a stub for the 
# start function, which is the only function that must be defined.
d12 1
a12 1
# see library for a list of variables available for use in your script
d14 6
a19 3

start ( ) {
    log "This is the $TEST test.  It does nothing."
d25 1
a25 1
exit $?
@


1.1
log
@added new test scripts
@
text
@d3 1
a3 1
# This is the initial brlcad test template
d5 4
a8 1

d12 1
a12 17
# initialize some variables, if not already set, to expected brlcadish values
initializeVariable PACKAGE_NAME brlcad
if [ "x$REGRESS_DIR" = "x" ] ; then
    if [ -d "$LPWD/../../$PACKAGE_NAME" ] ; then
        initializeVariable REGRESS_DIR "$LPWD/../.."
    elif [ -d "$LPWD/../$PACKAGE_NAME" ] ; then
        initializeVariable REGRESS_DIR "$LPWD/.."
    elif [ -d "$LPWD/$PACKAGE_NAME" ] ; then
        initializeVariable REGRESS_DIR "$LPWD"
    else
        bomb "Unable to locate $PACKAGE_NAME"
    fi
fi
__ARCH="$ARCH"
initializeVariable ARCH `${REGRESS_DIR}/brlcad/sh/machinetype.sh`
initializeVariable ARCH "$__ARCH"
initializeVariable BRLCAD_ROOT "${REGRESS_DIR}/${PACKAGE_NAME}.${ARCH}"
d16 1
a16 6
    
    return 0
}

stop ( ) {
    bomb "stop unimplemented"
d20 1
a20 24
status ( ) {
    bomb "status unimplemented"
    return 0
}


case "$1" in
    start )
        start
        ;;
    stop )
        stop
        ;;
    restart )
        stop
        start
        ;;
    status )
        status
        ;;
    * )
        log "Usage: $0 {start|stop|restart|status}"
        exit 1
esac
@

