head	11.12;
access;
symbols
	ansi-20040405-merged:11.8.2.2
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.8.10.3
	premerge-autoconf:11.9
	ansi-20040316-freeze:11.8.2.1
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.8.4.1
	autoconf-20031203:11.8.10.1
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.3
	offsite-5-3-pre:11.4
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.3
	rel-5-0-beta:11.3
	rel-4-5:11.3
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.12
date	2004.05.21.17.49.01;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2004.05.10.15.30.43;	author erikg;	state Exp;
branches;
next	11.10;

11.10
date	2004.04.05.07.47.38;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2003.11.06.19.31.53;	author jra;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.07.32;	author jra;	state Exp;
branches
	11.8.2.1
	11.8.4.1
	11.8.10.1;
next	11.7;

11.7
date	2002.08.15.20.54.45;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2001.04.12.14.24.15;	author bparker;	state Exp;
branches;
next	11.5;

11.5
date	2001.04.05.19.35.21;	author morrison;	state Exp;
branches;
next	11.4;

11.4
date	2000.08.24.04.55.34;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.07.15.18.22.14;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	95.04.27.20.12.03;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.06.26;	author mike;	state Rel4_4;
branches;
next	1.7;

1.7
date	94.12.19.18.04.36;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	94.12.13.11.48.18;	author jehunt;	state Exp;
branches;
next	1.5;

1.5
date	94.11.22.14.49.23;	author jra;	state Exp;
branches;
next	1.4;

1.4
date	94.11.08.04.25.49;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	93.12.03.03.03.33;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	92.12.14.15.42.08;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	92.11.10.22.39.46;	author mm;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.01.01;	author morrison;	state Exp;
branches;
next	11.8.2.2;

11.8.2.2
date	2004.03.17.21.16.40;	author morrison;	state Exp;
branches;
next	;

11.8.4.1
date	2004.03.11.23.41.27;	author morrison;	state Exp;
branches;
next	;

11.8.10.1
date	2003.12.03.17.44.54;	author erikg;	state Exp;
branches;
next	11.8.10.2;

11.8.10.2
date	2004.02.12.19.51.26;	author erikg;	state Exp;
branches;
next	11.8.10.3;

11.8.10.3
date	2004.03.15.14.06.14;	author erikg;	state Exp;
branches;
next	;


desc
@JACK Psurf to BRL-CAD converter
@


11.12
log
@moved to src/jack/
@
text
@/*
 *			J A C K - G . C
 *
 *  Program to convert JACK Psurf file into a BRL-CAD NMG object.
 *
 *  Author -
 *	Michael John Markowski
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/jack/jack-g.c,v 11.11 2004/05/10 15:30:43 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include "machine.h"
#include "externs.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "nmg.h"
#include "raytrace.h"
#include "rtgeom.h"
#include "wdb.h"
#include "../librt/debug.h"

#define		MAX_NUM_PTS	15360

struct vlist {
	fastf_t		pt[3*MAX_NUM_PTS];
	struct vertex	*vt[MAX_NUM_PTS];
};

static struct rt_tol	tol;

static char	usage[] = "Usage: %s [-r region] [-g group] [jack_db] [brlcad_db]\n";

RT_EXTERN( fastf_t nmg_loop_plane_area, (const struct loopuse *lu, plane_t pl ) );

int	psurf_to_nmg(struct model *m, FILE *fp, char *jfile);
int	create_brlcad_db(struct rt_wdb *fpout, struct model *m, char *reg_name, char *grp_name);
void	jack_to_brlcad(FILE *fpin, FILE *fpout, char *reg_name, char *grp_name, char *jfile, char *bfile);

int
main(int argc, char **argv)
{
	char		*base, *bfile, *grp_name, *jfile, *reg_name;
	FILE		*fpin;
	struct rt_wdb	*fpout;
	int		doti;
	register int	c;

	grp_name = reg_name = NULL;

	/* Get command line arguments. */
	while ((c = getopt(argc, argv, "g:r:")) != EOF) {
		switch (c) {
		case 'g':
			grp_name = optarg;
			/* BRL-CAD group to add psurf to. */
			break;
		case 'r':
			/* BRL-CAD region name for psurf. */
			reg_name = optarg;
			break;
		default:
			fprintf(stderr, usage, argv[0]);
			exit(1);
			break;
		}
	}

	/* Get Jack psurf input file name. */
	if (optind >= argc) {
		jfile = "-";
		fpin = stdin;
	} else {
		jfile = argv[optind];
		if ((fpin = fopen(jfile, "r")) == NULL) {
			fprintf(stderr,
				"%s: cannot open %s for reading\n",
				argv[0], jfile);
			exit(1);
		}
	}

	/* Get BRL-CAD output data base name. */
	optind++;
	if (optind >= argc) {
		bfile = "-";
		fprintf(stderr, usage, argv[0]);
		exit(1);
	} else {
		bfile = argv[optind];
		if ((fpout = wdb_fopen(bfile)) == NULL) {
			fprintf(stderr,
				"%s: cannot open %s for writing\n",
				argv[0], bfile);
			exit(1);
		}
	}

	/* Output BRL-CAD database header.  No problem if more than one. */
	mk_id(fpout, jfile);

	/* Make default region name if none given. */
	if (!reg_name) {
		/* Ignore leading path info. */
		base = strrchr(argv[1], '/');
		if (!base)
			base = argv[1];
		else
			base++;
		reg_name = malloc(sizeof(base)+1);
		strcpy(reg_name, base);
		/* Ignore .pss extension if it's there. */
		doti = strlen(reg_name) - 4;
		if (doti > 0 && !strcmp(".pss", reg_name+doti))
			reg_name[doti] = '\0';
	}

	jack_to_brlcad(fpin, fpout, reg_name, grp_name, jfile, bfile);
	fclose(fpin);
	wdb_close(fpout);
	return 0;
}

/*
 *	J A C K _ T O _ B R L C A D
 *
 *	Convert a UPenn Jack data base into a BRL-CAD data base.
 */
void
jack_to_brlcad(FILE *fpin, FILE *fpout, char *reg_name, char *grp_name, char *jfile, char *bfile)
{
	struct model	*m;

	m = nmg_mm();			/* Make nmg model. */
	psurf_to_nmg(m, fpin, jfile);	/* Convert psurf model to nmg. */
	create_brlcad_db(fpout, m, reg_name, grp_name);	/* Put in db. */
	nmg_km(m);			/* Destroy the nmg model. */
}

/*
 *	R E A D _ P S U R F _ V E R T I C E S
 *
 *	Read in vertices from a psurf file and store them in an
 *	array of nmg vertex structures.
 *
 *	Fix this!  Only allows set max of points and assumes
 *	no errors during reading...
 */
int
read_psurf_vertices(FILE *fp, struct vlist *vert)
    		    	/* Psurf file pointer. */
            	      	/* Array of read in vertices. */
{
	fastf_t	x, y, z;
	int	i;
	int	bomb=0;

	/* Read vertices. */
	for (i = 0; fscanf(fp, "%lf %lf %lf", &x, &y, &z) == 3; i++) {
		if( i >= MAX_NUM_PTS )
			bomb = 1;
		else
		{
			vert->pt[3*i+0] = x * 10.;	/* Convert cm to mm. */
			vert->pt[3*i+1] = y * 10.;
			vert->pt[3*i+2] = z * 10.;
			vert->vt[i] = (struct vertex *)0;
		}
		fscanf(fp, "%*[^\n]");
	}
	fscanf(fp, ";;");

	if( bomb )
	{
		rt_log( "Dataset contains %d data points, code is dimensioned for %d\n", i, MAX_NUM_PTS );
		rt_bomb( "jack-g\n" );
	}

	return(i);
}

/*
 *	R E A D _ P S U R F _ F A C E
 *
 *	Read in the vertexes describing a face of a psurf.
 */
int
read_psurf_face(FILE *fp, int *lst)
{
	int	i, n;

	for (i = 0; fscanf(fp, "%d", &n) == 1; i++)
		lst[i] = n;
	fscanf(fp, "%*[^\n]");
	return(i);
}

/*
 *	P S U R F _ T O _ N M G
 *
 */
int
psurf_to_nmg(struct model *m, FILE *fp, char *jfile)
            	   	/* Input/output, nmg model. */
    		    	/* Input, pointer to psurf data file. */
    		       	/* Name of Jack data base file. */
{
	int		face, fail, i, lst[MAX_NUM_PTS], nf, nv;
	struct faceuse	*outfaceuses[MAX_NUM_PTS];
	struct nmgregion *r;
	struct shell	*s;
	struct vertex	*vertlist[MAX_NUM_PTS];
	struct vlist	vert;

	/* Copied from proc-db/nmgmodel.c */
	tol.magic = RT_TOL_MAGIC;
	tol.dist = 0.01;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 0.001;
	tol.para = 0.999;

	face = 0;
	r = nmg_mrsv(m);	/* Make region, empty shell, vertex. */
	s = RT_LIST_FIRST(shell, &r->s_hd);

	while ( (nv = read_psurf_vertices(fp, &vert)) != 0 ) {
		while ( (nf = read_psurf_face(fp, lst)) != 0 ) {

			/* Make face out of vertices in lst (ccw ordered). */
			for (i = 0; i < nf; i++)
				vertlist[i] = vert.vt[lst[i]-1];
			outfaceuses[face] = nmg_cface(s, vertlist, nf);
			face++;

			/* Save (possibly) newly created vertex structs. */
			for (i = 0; i < nf; i++)
				vert.vt[lst[i]-1] = vertlist[i];
		}
		fscanf(fp, ";;");

		/* Associate the vertex geometry, ccw. */
		for (i = 0; i < nv; i++)
			if (vert.vt[i])
				nmg_vertex_gv(vert.vt[i], &vert.pt[3*i]);
			else
				fprintf(stderr, "%s, vertex %d is unused\n",
					jfile, i+1);
	}

	nmg_model_vertex_fuse( m, &tol );

	/* Associate the face geometry. */
	for (i = 0, fail = 0; i < face; i++)
	{
		struct loopuse *lu;
		plane_t pl;

		lu = RT_LIST_FIRST( loopuse , &outfaceuses[i]->lu_hd );
		if( nmg_loop_plane_area( lu , pl ) < 0.0 )
		{
			fail = 1;
			nmg_kfu( outfaceuses[i] );
		}
		else
			nmg_face_g( outfaceuses[i] , pl );
	}
	if (fail)
		return(-1);

	if( face )
	{
		nmg_kill_zero_length_edgeuses( m );

		/* Compute "geometry" for region and shell */
		nmg_region_a(r, &tol);

		nmg_model_break_e_on_v( m, &tol );
		nmg_kill_zero_length_edgeuses( m );

		/* Glue edges of outward pointing face uses together. */
		nmg_model_edge_fuse( m, &tol );
	}

	return(0);
}

/*
 *	C R E A T E _ B R L C A D _ D B
 *
 *	Write the nmg to a brl-cad style data base.
 */
int
create_brlcad_db(struct rt_wdb *fpout, struct model *m, char *reg_name, char *grp_name)
{
	char	*rname, *sname;
	struct shell *s;
	struct nmgregion *r;

	rname = malloc(sizeof(reg_name) + 3);	/* Region name. */
	sname = malloc(sizeof(reg_name) + 3);	/* Solid name. */

	sprintf(sname, "s.%s", reg_name);
	nmg_kill_zero_length_edgeuses( m );
	nmg_rebound( m, &tol );
	r = BU_LIST_FIRST( nmgregion, &m->r_hd);
	s = BU_LIST_FIRST( shell, &r->s_hd );
	mk_bot_from_nmg(fpout, sname,  s);		/* Make BOT object. */
	sprintf(rname, "r.%s", reg_name);
	mk_comb1(fpout, rname, sname, 1);	/* Put object in a region. */
	if (grp_name) {
		mk_comb1(fpout, grp_name, rname, 1);	/* Region in group. */
	}
	return 0;
}
@


11.11
log
@change conf.h to a wrapped config.h
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/jack/jack-g.c,v 11.10 2004/04/05 07:47:38 morrison Exp $ (BRL)";
@


11.10
log
@merge of ansi-6-0-branch into HEAD
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d20 5
a24 1
#include "conf.h"
@


11.9
log
@Now makes BOT primitives instead of NMG's
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/jack/jack-g.c,v 11.8 2002/08/20 17:07:32 jra Exp $ (BRL)";
d53 3
a55 3
int	psurf_to_nmg();
int	create_brlcad_db();
void	jack_to_brlcad();
d58 1
a58 3
main(argc, argv)
int	argc;
char	*argv[];
d147 1
a147 3
jack_to_brlcad(fpin, fpout, reg_name, grp_name, jfile, bfile)
FILE	*fpin, *fpout;
char	*reg_name, *grp_name, *jfile, *bfile;
d167 3
a169 3
read_psurf_vertices(fp, vert)
FILE		*fp;	/* Psurf file pointer. */
struct vlist	*vert;	/* Array of read in vertices. */
d205 1
a205 3
read_psurf_face(fp, lst)
FILE	*fp;
int	*lst;
d220 4
a223 4
psurf_to_nmg(m, fp, jfile)
struct model	*m;	/* Input/output, nmg model. */
FILE		*fp;	/* Input, pointer to psurf data file. */
char		*jfile;	/* Name of Jack data base file. */
d310 1
a310 4
create_brlcad_db(fpout, m, reg_name, grp_name)
struct rt_wdb	*fpout;
char		*grp_name, *reg_name;
struct model	*m;
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/jack/jack-g.c,v 11.6 2001/04/12 14:24:15 bparker Exp $ (BRL)";
d322 2
d331 3
a333 1
	mk_nmg(fpout, sname,  m);		/* Make nmg object. */
@


11.8.4.1
log
@sync to HEAD...
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/jack/jack-g.c,v 11.9 2003/11/06 19:31:53 jra Exp $ (BRL)";
a321 2
	struct shell *s;
	struct nmgregion *r;
d329 1
a329 3
	r = BU_LIST_FIRST( nmgregion, &m->r_hd);
	s = BU_LIST_FIRST( shell, &r->s_hd );
	mk_bot_from_nmg(fpout, sname,  s);		/* Make BOT object. */
@


11.8.10.1
log
@updates from HEAD
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/jack/jack-g.c,v 11.9 2003/11/06 19:31:53 jra Exp $ (BRL)";
a321 2
	struct shell *s;
	struct nmgregion *r;
d329 1
a329 3
	r = BU_LIST_FIRST( nmgregion, &m->r_hd);
	s = BU_LIST_FIRST( shell, &r->s_hd );
	mk_bot_from_nmg(fpout, sname,  s);		/* Make BOT object. */
@


11.8.10.2
log
@merge from HEAD
@
text
@@


11.8.10.3
log
@merge from head
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/jack/jack-g.c,v 11.8.10.2 2004/02/12 19:51:26 erikg Exp $ (BRL)";
@


11.8.2.1
log
@Initial ANSIfication
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/jack/jack-g.c,v 11.8 2002/08/20 17:07:32 jra Exp $ (BRL)";
d53 3
a55 3
int	psurf_to_nmg(struct model *m, FILE *fp, char *jfile);
int	create_brlcad_db(struct rt_wdb *fpout, struct model *m, char *reg_name, char *grp_name);
void	jack_to_brlcad(FILE *fpin, FILE *fpout, char *reg_name, char *grp_name, char *jfile, char *bfile);
d58 3
a60 1
main(int argc, char **argv)
d149 3
a151 1
jack_to_brlcad(FILE *fpin, FILE *fpout, char *reg_name, char *grp_name, char *jfile, char *bfile)
d171 3
a173 3
read_psurf_vertices(FILE *fp, struct vlist *vert)
    		    	/* Psurf file pointer. */
            	      	/* Array of read in vertices. */
d209 3
a211 1
read_psurf_face(FILE *fp, int *lst)
d226 4
a229 4
psurf_to_nmg(struct model *m, FILE *fp, char *jfile)
            	   	/* Input/output, nmg model. */
    		    	/* Input, pointer to psurf data file. */
    		       	/* Name of Jack data base file. */
d316 4
a319 1
create_brlcad_db(struct rt_wdb *fpout, struct model *m, char *reg_name, char *grp_name)
@


11.8.2.2
log
@sync branch with HEAD
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a312 2
	struct shell *s;
	struct nmgregion *r;
d320 1
a320 3
	r = BU_LIST_FIRST( nmgregion, &m->r_hd);
	s = BU_LIST_FIRST( shell, &r->s_hd );
	mk_bot_from_nmg(fpout, sname,  s);		/* Make BOT object. */
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d53 3
a55 3
int	psurf_to_nmg(struct model *m, FILE *fp, char *jfile);
int	create_brlcad_db(struct rt_wdb *fpout, struct model *m, char *reg_name, char *grp_name);
void	jack_to_brlcad(FILE *fpin, FILE *fpout, char *reg_name, char *grp_name, char *jfile, char *bfile);
d58 3
a60 1
main(int argc, char **argv)
d149 3
a151 1
jack_to_brlcad(FILE *fpin, FILE *fpout, char *reg_name, char *grp_name, char *jfile, char *bfile)
d171 3
a173 3
read_psurf_vertices(FILE *fp, struct vlist *vert)
    		    	/* Psurf file pointer. */
            	      	/* Array of read in vertices. */
d209 3
a211 1
read_psurf_face(FILE *fp, int *lst)
d226 4
a229 4
psurf_to_nmg(struct model *m, FILE *fp, char *jfile)
            	   	/* Input/output, nmg model. */
    		    	/* Input, pointer to psurf data file. */
    		       	/* Name of Jack data base file. */
d316 4
a319 1
create_brlcad_db(struct rt_wdb *fpout, struct model *m, char *reg_name, char *grp_name)
@


11.6
log
@*- declare the following functions:
   psurf_to_nmg, create_brlcad_db
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/jack/jack-g.c,v 11.5 2001/04/05 19:35:21 morrison Exp $ (BRL)";
d53 3
a55 3
int	psurf_to_nmg();
int	create_brlcad_db();
void	jack_to_brlcad();
d58 1
a58 3
main(argc, argv)
int	argc;
char	*argv[];
d147 1
a147 3
jack_to_brlcad(fpin, fpout, reg_name, grp_name, jfile, bfile)
FILE	*fpin, *fpout;
char	*reg_name, *grp_name, *jfile, *bfile;
d167 3
a169 3
read_psurf_vertices(fp, vert)
FILE		*fp;	/* Psurf file pointer. */
struct vlist	*vert;	/* Array of read in vertices. */
d205 1
a205 3
read_psurf_face(fp, lst)
FILE	*fp;
int	*lst;
d220 4
a223 4
psurf_to_nmg(m, fp, jfile)
struct model	*m;	/* Input/output, nmg model. */
FILE		*fp;	/* Input, pointer to psurf data file. */
char		*jfile;	/* Name of Jack data base file. */
d310 1
a310 4
create_brlcad_db(fpout, m, reg_name, grp_name)
struct rt_wdb	*fpout;
char		*grp_name, *reg_name;
struct model	*m;
@


11.5
log
@updated SIGNED to signed
updated CONST to const
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/jack/jack-g.c,v 11.4 2000/08/24 04:55:34 mike Exp $ (BRL)";
d53 2
@


11.4
log
@
lint
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/jack/jack-g.c,v 11.3 1996/07/15 18:22:14 jra Exp $ (BRL)";
d51 1
a51 1
RT_EXTERN( fastf_t nmg_loop_plane_area, (CONST struct loopuse *lu, plane_t pl ) );
@


11.3
log
@Minor mods for IRIX 6.2
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 11.2 1995/04/27 20:12:03 jra Exp jra $ (BRL)";
d31 1
d33 1
d37 1
a37 1
#include "rtlist.h"
d55 1
d61 2
a62 1
	FILE		*fpin, *fpout;
d104 2
a105 1
		fpout = stdout;
d108 5
a112 15
		if ((fpout = fopen(bfile, "r")) == NULL) {
			if ((fpout = fopen(bfile, "w")) == NULL) {
				fprintf(stderr,
					"%s: cannot open %s for writing\n",
					argv[0], bfile);
				exit(1);
			}
		} else {
			fclose(fpout);
			if ((fpout = fopen(bfile, "a")) == NULL) {
				fprintf(stderr,
					"%s: cannot open %s for appending\n",
					argv[0], bfile);
				exit(1);
			}
d137 2
a138 1
	fclose(fpout);
d247 2
a248 2
	while (nv = read_psurf_vertices(fp, &vert)) {
		while (nf = read_psurf_face(fp, lst)) {
d315 1
a315 1
FILE		*fpout;
@


11.2
log
@Increased dimensions, replaced nmg_gluefaces with nmg_model_edge_fuse, added calls to nmg_model_vertex_fuse()
nmg_model_break_e_on_v(), and nmg_kill_zero_length_edgeuses().
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 11.1 1995/01/04 10:06:26 mike Rel4_4 jra $ (BRL)";
d51 2
d150 1
@


11.1
log
@Release_4.4
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 1.7 94/12/19 18:04:36 mike Exp $ (BRL)";
d38 2
d41 2
a42 2
	fastf_t		pt[3*1024];
	struct vertex	*vt[1024];
d45 2
d176 1
d180 9
a188 4
		vert->pt[3*i+0] = x * 10.;	/* Convert cm to mm. */
		vert->pt[3*i+1] = y * 10.;
		vert->pt[3*i+2] = z * 10.;
		vert->vt[i] = (struct vertex *)0;
d192 7
d230 2
a231 2
	int		face, fail, i, lst[256], nf, nv;
	struct faceuse	*outfaceuses[1024];
a232 1
	struct rt_tol	tol;
d234 1
a234 1
	struct vertex	*vertlist[1024];
d272 2
d282 1
d284 2
d292 9
a300 2
	/* Glue edges of outward pointing face uses together. */
	nmg_gluefaces(outfaceuses, face);
d302 3
a304 2
	/* Compute "geometry" for region and shell */
	nmg_region_a(r, &tol);
d326 2
@


1.7
log
@Linux fix
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 1.6 94/12/13 11:48:18 jehunt Exp Locker: mike $ (BRL)";
@


1.6
log
@Linux
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 1.5 94/11/22 14:49:23 jra Exp $ (BRL)";
d20 2
d24 1
d26 3
d131 1
a131 1
		reg_name[doti] = '\0';
@


1.5
log
@Replaced a call to nmg_fu_planeeqn with nmg_loop_plane_area.
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 1.4 94/11/08 04:25:49 mike Exp Locker: jra $ (BRL)";
d125 1
a125 1
		reg_name[doti] = NULL;
@


1.4
log
@Irix 6
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 1.3 93/12/03 03:03:33 mike Exp Locker: mike $ (BRL)";
d39 2
d252 6
a257 1
		if (nmg_fu_planeeqn(outfaceuses[i], &tol) < 0)
d259 3
@


1.3
log
@nmg_region_a() now takes a tol struct
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 1.2 92/12/14 15:42:08 mike Exp Locker: mike $ (BRL)";
a186 1
	char	line[2048];
d287 1
@


1.2
log
@Always output a BRL-CAD database header.
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header: /m/cad/jack/RCS/jack-g.c,v 1.1 92/11/10 22:39:46 mm Exp Locker: mike $ (BRL)";
d260 1
a260 1
	nmg_region_a(r);
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
a95 2
			/* Create db. */
			mk_id(fpout, "Jack NMG");	/* Db name. */
d106 3
@
