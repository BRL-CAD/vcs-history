head	1.2;
access;
symbols
	ansi-20040405-merged:1.1.6.1
	postmerge-20040405-ansi:1.1
	premerge-20040404-ansi:1.1
	postmerge-autoconf:1.1
	autoconf-freeze:1.1.4.1
	premerge-autoconf:1.1
	postmerge-20040315-windows:1.1
	premerge-20040315-windows:1.1
	windows-20040315-freeze:1.1.2.1
	autoconf-branch:1.1.0.4
	windows-branch:1.1.0.2
	ansi-branch:1.1.0.6;
locks; strict;
comment	@ * @;


1.2
date	2004.05.21.18.06.08;	author morrison;	state dead;
branches;
next	1.1;

1.1
date	2004.03.09.20.49.06;	author morrison;	state Exp;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2004.03.12.09.58.06;	author morrison;	state Exp;
branches;
next	;

1.1.4.1
date	2004.03.15.14.06.45;	author erikg;	state Exp;
branches;
next	;

1.1.6.1
date	2004.03.17.21.18.05;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@moved from top-level to src/other/.
@
text
@/*
 * itkDecls.h --
 *
 *	Declarations of functions in the platform independent public Itk API.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: $Id: itkDecls.h,v 1.1 2004/03/09 20:49:06 morrison Exp $
 */

#ifndef _ITKDECLS
#define _ITKDECLS

#ifdef BUILD_itk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tk.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifndef Itk_Init_TCL_DECLARED
#define Itk_Init_TCL_DECLARED
/* 0 */
TCL_EXTERN(int)		Itk_Init _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_SafeInit_TCL_DECLARED
#define Itk_SafeInit_TCL_DECLARED
/* 1 */
TCL_EXTERN(int)		Itk_SafeInit _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_ConfigBodyCmd_TCL_DECLARED
#define Itk_ConfigBodyCmd_TCL_DECLARED
/* 2 */
TCL_EXTERN(int)		Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_UsualCmd_TCL_DECLARED
#define Itk_UsualCmd_TCL_DECLARED
/* 3 */
TCL_EXTERN(int)		Itk_UsualCmd _ANSI_ARGS_((ClientData cdata, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionDefineCmd_TCL_DECLARED
#define Itk_ClassOptionDefineCmd_TCL_DECLARED
/* 4 */
TCL_EXTERN(int)		Itk_ClassOptionDefineCmd _ANSI_ARGS_((
				ClientData cdata, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionIllegalCmd_TCL_DECLARED
#define Itk_ClassOptionIllegalCmd_TCL_DECLARED
/* 5 */
TCL_EXTERN(int)		Itk_ClassOptionIllegalCmd _ANSI_ARGS_((
				ClientData cdata, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ConfigClassOption_TCL_DECLARED
#define Itk_ConfigClassOption_TCL_DECLARED
/* 6 */
TCL_EXTERN(int)		Itk_ConfigClassOption _ANSI_ARGS_((
				Tcl_Interp * interp, ItclObject * contextObj, 
				ClientData cdata, CONST char* newVal));
#endif
#ifndef Itk_CreateClassOptTable_TCL_DECLARED
#define Itk_CreateClassOptTable_TCL_DECLARED
/* 7 */
TCL_EXTERN(ItkClassOptTable*) Itk_CreateClassOptTable _ANSI_ARGS_((
				Tcl_Interp * interp, ItclClass * cdefn));
#endif
#ifndef Itk_FindClassOptTable_TCL_DECLARED
#define Itk_FindClassOptTable_TCL_DECLARED
/* 8 */
TCL_EXTERN(ItkClassOptTable*) Itk_FindClassOptTable _ANSI_ARGS_((
				ItclClass * cdefn));
#endif
/* Slot 9 is reserved */
#ifndef Itk_CreateClassOption_TCL_DECLARED
#define Itk_CreateClassOption_TCL_DECLARED
/* 10 */
TCL_EXTERN(int)		Itk_CreateClassOption _ANSI_ARGS_((
				Tcl_Interp * interp, ItclClass * cdefn, 
				char * switchName, char * resName, 
				char * resClass, char * defVal, 
				char * config, ItkClassOption ** optPtr));
#endif
#ifndef Itk_FindClassOption_TCL_DECLARED
#define Itk_FindClassOption_TCL_DECLARED
/* 11 */
TCL_EXTERN(ItkClassOption*) Itk_FindClassOption _ANSI_ARGS_((
				ItclClass * cdefn, char * switchName));
#endif
#ifndef Itk_DelClassOption_TCL_DECLARED
#define Itk_DelClassOption_TCL_DECLARED
/* 12 */
TCL_EXTERN(void)	Itk_DelClassOption _ANSI_ARGS_((ItkClassOption * opt));
#endif
#ifndef Itk_ArchetypeInit_TCL_DECLARED
#define Itk_ArchetypeInit_TCL_DECLARED
/* 13 */
TCL_EXTERN(int)		Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
#endif
#ifndef Itk_OptListInit_TCL_DECLARED
#define Itk_OptListInit_TCL_DECLARED
/* 14 */
TCL_EXTERN(void)	Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist, 
				Tcl_HashTable * options));
#endif
#ifndef Itk_OptListFree_TCL_DECLARED
#define Itk_OptListFree_TCL_DECLARED
/* 15 */
TCL_EXTERN(void)	Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));
#endif
#ifndef Itk_OptListAdd_TCL_DECLARED
#define Itk_OptListAdd_TCL_DECLARED
/* 16 */
TCL_EXTERN(void)	Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist, 
				Tcl_HashEntry * entry));
#endif
#ifndef Itk_OptListRemove_TCL_DECLARED
#define Itk_OptListRemove_TCL_DECLARED
/* 17 */
TCL_EXTERN(void)	Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist, 
				Tcl_HashEntry * entry));
#endif

typedef struct ItkStubs {
    int magic;
    struct ItkStubHooks *hooks;

    int (*itk_Init) _ANSI_ARGS_((Tcl_Interp * interp)); /* 0 */
    int (*itk_SafeInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 1 */
    int (*itk_ConfigBodyCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 2 */
    int (*itk_UsualCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 3 */
    int (*itk_ClassOptionDefineCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 4 */
    int (*itk_ClassOptionIllegalCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 5 */
    int (*itk_ConfigClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, ClientData cdata, CONST char* newVal)); /* 6 */
    ItkClassOptTable* (*itk_CreateClassOptTable) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass * cdefn)); /* 7 */
    ItkClassOptTable* (*itk_FindClassOptTable) _ANSI_ARGS_((ItclClass * cdefn)); /* 8 */
    void *reserved9;
    int (*itk_CreateClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass * cdefn, char * switchName, char * resName, char * resClass, char * defVal, char * config, ItkClassOption ** optPtr)); /* 10 */
    ItkClassOption* (*itk_FindClassOption) _ANSI_ARGS_((ItclClass * cdefn, char * switchName)); /* 11 */
    void (*itk_DelClassOption) _ANSI_ARGS_((ItkClassOption * opt)); /* 12 */
    int (*itk_ArchetypeInit) _ANSI_ARGS_((Tcl_Interp* interp)); /* 13 */
    void (*itk_OptListInit) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashTable * options)); /* 14 */
    void (*itk_OptListFree) _ANSI_ARGS_((ItkOptList* olist)); /* 15 */
    void (*itk_OptListAdd) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashEntry * entry)); /* 16 */
    void (*itk_OptListRemove) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashEntry * entry)); /* 17 */
} ItkStubs;

TCL_EXTERNC ItkStubs *itkStubsPtr;

#if defined(USE_ITK_STUBS) && !defined(USE_ITK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifndef Itk_Init
#define Itk_Init \
	(itkStubsPtr->itk_Init) /* 0 */
#endif
#ifndef Itk_SafeInit
#define Itk_SafeInit \
	(itkStubsPtr->itk_SafeInit) /* 1 */
#endif
#ifndef Itk_ConfigBodyCmd
#define Itk_ConfigBodyCmd \
	(itkStubsPtr->itk_ConfigBodyCmd) /* 2 */
#endif
#ifndef Itk_UsualCmd
#define Itk_UsualCmd \
	(itkStubsPtr->itk_UsualCmd) /* 3 */
#endif
#ifndef Itk_ClassOptionDefineCmd
#define Itk_ClassOptionDefineCmd \
	(itkStubsPtr->itk_ClassOptionDefineCmd) /* 4 */
#endif
#ifndef Itk_ClassOptionIllegalCmd
#define Itk_ClassOptionIllegalCmd \
	(itkStubsPtr->itk_ClassOptionIllegalCmd) /* 5 */
#endif
#ifndef Itk_ConfigClassOption
#define Itk_ConfigClassOption \
	(itkStubsPtr->itk_ConfigClassOption) /* 6 */
#endif
#ifndef Itk_CreateClassOptTable
#define Itk_CreateClassOptTable \
	(itkStubsPtr->itk_CreateClassOptTable) /* 7 */
#endif
#ifndef Itk_FindClassOptTable
#define Itk_FindClassOptTable \
	(itkStubsPtr->itk_FindClassOptTable) /* 8 */
#endif
/* Slot 9 is reserved */
#ifndef Itk_CreateClassOption
#define Itk_CreateClassOption \
	(itkStubsPtr->itk_CreateClassOption) /* 10 */
#endif
#ifndef Itk_FindClassOption
#define Itk_FindClassOption \
	(itkStubsPtr->itk_FindClassOption) /* 11 */
#endif
#ifndef Itk_DelClassOption
#define Itk_DelClassOption \
	(itkStubsPtr->itk_DelClassOption) /* 12 */
#endif
#ifndef Itk_ArchetypeInit
#define Itk_ArchetypeInit \
	(itkStubsPtr->itk_ArchetypeInit) /* 13 */
#endif
#ifndef Itk_OptListInit
#define Itk_OptListInit \
	(itkStubsPtr->itk_OptListInit) /* 14 */
#endif
#ifndef Itk_OptListFree
#define Itk_OptListFree \
	(itkStubsPtr->itk_OptListFree) /* 15 */
#endif
#ifndef Itk_OptListAdd
#define Itk_OptListAdd \
	(itkStubsPtr->itk_OptListAdd) /* 16 */
#endif
#ifndef Itk_OptListRemove
#define Itk_OptListRemove \
	(itkStubsPtr->itk_OptListRemove) /* 17 */
#endif

#endif /* defined(USE_ITK_STUBS) && !defined(USE_ITK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _ITKDECLS */

@


1.1
log
@initial addition of libitcl synced to current itcl cvs (3.3 development)
@
text
@d9 1
a9 1
 * RCS: $Id: itkDecls.h,v 1.8 2003/12/23 05:22:45 davygrvy Exp $
@


1.1.6.1
log
@sync branch with HEAD
@
text
@d9 1
a9 1
 * RCS: $Id$
@


1.1.4.1
log
@merge from head
@
text
@d9 1
a9 1
 * RCS: $Id: itkDecls.h,v 1.1 2004/03/09 20:49:06 morrison Exp $
@


1.1.2.1
log
@merge from HEAD
@
text
@d9 1
a9 1
 * RCS: $Id$
@

