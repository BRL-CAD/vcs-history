head	1.2;
access;
symbols
	ansi-20040405-merged:1.1.6.1
	postmerge-20040405-ansi:1.1
	premerge-20040404-ansi:1.1
	postmerge-autoconf:1.1
	autoconf-freeze:1.1.4.1
	premerge-autoconf:1.1
	postmerge-20040315-windows:1.1
	premerge-20040315-windows:1.1
	windows-20040315-freeze:1.1.2.1
	autoconf-branch:1.1.0.4
	windows-branch:1.1.0.2
	ansi-branch:1.1.0.6;
locks; strict;
comment	@# @;


1.2
date	2004.05.21.18.06.08;	author morrison;	state dead;
branches;
next	1.1;

1.1
date	2004.03.09.20.49.06;	author morrison;	state Exp;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2004.03.12.09.58.06;	author morrison;	state Exp;
branches;
next	;

1.1.4.1
date	2004.03.15.14.06.45;	author erikg;	state Exp;
branches;
next	;

1.1.6.1
date	2004.03.17.21.18.05;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@moved from top-level to src/other/.
@
text
@# itk.decls --
#
#	This file contains the declarations for all supported public
#	functions that are exported by the Itk library via the stubs table.
#	This file is used to generate the itkDecls.h file.
#	
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# RCS: $Id: itk.decls,v 1.1 2004/03/09 20:49:06 morrison Exp $

library itk
interface itk

# Declare each of the functions in the public Itk interface.  Note that
# the an index should never be reused for a different function in order
# to preserve backwards compatibility.


#
#  Exported functions:
#

declare 0 generic {
    int Itk_Init (Tcl_Interp *interp)
}
declare 1 generic {
    int Itk_SafeInit (Tcl_Interp *interp)
}


#
#  Functions used internally by this package:
#

declare 2 generic {
    int Itk_ConfigBodyCmd (ClientData cdata, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 3 generic {
    int Itk_UsualCmd (ClientData cdata, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}


#
#  Functions for managing options included in class definitions:
#

declare 4 generic {
    int Itk_ClassOptionDefineCmd (ClientData cdata, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 5 generic {
    int Itk_ClassOptionIllegalCmd (ClientData cdata, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 6 generic {
    int Itk_ConfigClassOption (Tcl_Interp *interp, ItclObject *contextObj, \
        ClientData cdata, CONST char* newVal)
}
declare 7 generic {
    ItkClassOptTable* Itk_CreateClassOptTable( Tcl_Interp *interp, \
        ItclClass *cdefn)
}
declare 8 generic {
    ItkClassOptTable* Itk_FindClassOptTable (ItclClass *cdefn)
}
#declare 9 generic {
#    void Itk_DeleteClassOptTable (Tcl_Interp *interp, ItclClass *cdefn)
#}
declare 10 generic {
    int Itk_CreateClassOption (Tcl_Interp *interp, ItclClass *cdefn, \
        char *switchName, char *resName, char *resClass, char *defVal, \
        char *config, ItkClassOption **optPtr)
}
declare 11 generic {
    ItkClassOption* Itk_FindClassOption (ItclClass *cdefn, char *switchName)
}
declare 12 generic {
    void Itk_DelClassOption (ItkClassOption *opt)
}


#
#  Functions needed for the Archetype base class:
#

declare 13 generic {
    int Itk_ArchetypeInit (Tcl_Interp* interp)
}


#
#  Functions for maintaining the ordered option list:
#

declare 14 generic {
    void Itk_OptListInit (ItkOptList* olist, Tcl_HashTable *options)
}
declare 15 generic {
    void Itk_OptListFree (ItkOptList* olist)
}
declare 16 generic {
    void Itk_OptListAdd (ItkOptList* olist, Tcl_HashEntry *entry)
}
declare 17 generic {
    void Itk_OptListRemove (ItkOptList* olist, Tcl_HashEntry *entry)
}
@


1.1
log
@initial addition of libitcl synced to current itcl cvs (3.3 development)
@
text
@d10 1
a10 1
# RCS: $Id: itk.decls,v 1.5 2002/03/03 01:57:11 andreas_kupries Exp $
@


1.1.6.1
log
@sync branch with HEAD
@
text
@d10 1
a10 1
# RCS: $Id$
@


1.1.4.1
log
@merge from head
@
text
@d10 1
a10 1
# RCS: $Id: itk.decls,v 1.1 2004/03/09 20:49:06 morrison Exp $
@


1.1.2.1
log
@merge from HEAD
@
text
@d10 1
a10 1
# RCS: $Id$
@

