head	1.21;
access;
symbols
	rel-7-10-4:1.19
	STABLE:1.19.0.2
	rel-7-10-2:1.19
	rel-7-10-0:1.12;
locks; strict;
comment	@ * @;


1.21
date	2007.12.31.20.25.12;	author brlcad;	state Exp;
branches;
next	1.20;

1.20
date	2007.09.14.15.21.00;	author erikgreenwald;	state Exp;
branches;
next	1.19;

1.19
date	2007.07.13.20.22.58;	author jlowenz;	state Exp;
branches;
next	1.18;

1.18
date	2007.07.09.21.11.36;	author jlowenz;	state Exp;
branches;
next	1.17;

1.17
date	2007.07.03.20.43.55;	author jlowenz;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.28.16.54.01;	author jlowenz;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.26.21.20.27;	author jlowenz;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.29.20.34.48;	author jlowenz;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.26.01.45.01;	author brlcad;	state Exp;
branches;
next	1.12;

1.12
date	2007.03.27.21.57.49;	author jlowenz;	state Exp;
branches;
next	1.11;

1.11
date	2007.03.23.20.13.23;	author jlowenz;	state Exp;
branches;
next	1.10;

1.10
date	2007.03.15.20.15.34;	author jlowenz;	state Exp;
branches;
next	1.9;

1.9
date	2007.03.09.20.44.05;	author jlowenz;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.28.16.08.08;	author jlowenz;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.27.19.42.58;	author jlowenz;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.15.21.19.09;	author jlowenz;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.27.01.01.39;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.19;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.21.04.45.40;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.16.12.42.48;	author d_rossberg;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.12.18.47.09;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


1.21
log
@header cleanup, more address removal
@
text
@/*                       B R E P . H
 * BRL-CAD
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup nurb */
/** @@{ */
/** @@file on_nurb.h
 *
 * @@brief
 *	Define surface and curve structures for
 * 	Non Rational Uniform B-Spline (NURBS)
 *	curves and surfaces. Uses openNURBS library.
 *
 * @@author	Jason Owens
 *
 */

#ifndef BREP_H
#define BREP_H


#ifdef __cplusplus
extern "C++" {
/* XXX ack. a hack. */
#undef X
#undef Y
#undef Z
#undef W
#undef H
#include "opennurbs.h"
#include "opennurbs_ext.h"
#include <iostream>
#include <fstream>

}
extern "C" {
#endif

#include "machine.h"
#include "vmath.h"
#include "bu.h"

#ifndef __cplusplus
typedef struct _on_brep_placeholder {
    int dummy; /* MS Visual C hack which can be removed if the struct contains something meaningful */
} ON_Brep;
#endif


    /* Maximum number of newton iterations on root finding */
#define BREP_MAX_ITERATIONS 100
    /* Root finding threshold */
#define BREP_INTERSECTION_ROOT_EPSILON 1e-6
    /* Jungle Gym epsilon */
#define BREP_EDGE_MISS_TOLERANCE 5e-4
#define BREP_SAME_POINT_TOLERANCE 1e-3
    /* Use vector operations? For debugging */
#define DO_VECTOR 1


#ifndef __cplusplus
typedef struct _bounding_volume_placeholder {
    int dummy;
} BrepBoundingVolume;
#else
/* namespace brlcad { */
/*     class BBNode; */
/* }; */
typedef brlcad::BBNode BrepBoundingVolume;
#endif

typedef struct _brep_cdbitem {
    int dummy; /* MS Visual C hack which can be removed if the struct contains something meaningful */
} brep_cdbitem;

/**
 * The b-rep specific data structure for caching the prepared
 * acceleration data structure.
 */
struct brep_specific {
    ON_Brep* brep;
    BrepBoundingVolume* bvh;
};

#ifdef __cplusplus
}
#endif

#endif  /* BREP_H */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.20
log
@removed trailing whitespace
@
text
@a30 4
 * @@par Source
 * 	SECAD/VLD Computing Consortium, Bldg 394
 *@@n	The U.S. Army Ballistic Research Laboratory
 *@@n 	Aberdeen Proving Ground, Maryland 21005
@


1.19
log
@Muck with tolerances a bit (they may not be the problem right now - i'm currently thinking its a trimming issue)
@
text
@d68 1
a68 1
    
d78 1
a78 1
    
d84 1
a84 1
#else 
@


1.18
log
@try a smaller larger tolerance for edge hits
@
text
@d74 2
a75 1
#define BREP_EDGE_MISS_TOLERANCE 1e-6
@


1.17
log
@debugging closeTo(); changed edge miss tolerance
@
text
@d74 1
a74 1
#define BREP_EDGE_MISS_TOLERANCE 1e-8
@


1.16
log
@increase the number of iterations to converge when tracing, and tighten up the tolerance on convergence
@
text
@d51 3
d74 1
a74 1
#define BREP_EDGE_MISS_TOLERANCE 1e-5
a102 2


@


1.15
log
@Increase root finding iterations and added edge miss tolerance
@
text
@d67 1
a67 1
#define BREP_MAX_ITERATIONS 15
d69 1
a69 1
#define BREP_INTERSECTION_ROOT_EPSILON 0.00001
@


1.14
log
@Switch in support for new opennurb_ext bounding volumes (still in development)
@
text
@d67 1
a67 1
#define BREP_MAX_ITERATIONS 10
d70 2
@


1.13
log
@get rid of RCS variables from the public header files.  this is done in part to reduce recompilation during interface changes, but also to move towards not relying on or publishing the information contained in the variables interface-wise. (they're fine for c sources and private headers)
@
text
@d50 1
a65 4
    /* Maximum per-surface BVH depth */
#define BREP_MAX_FT_DEPTH 8
    /* Surface flatness parameter, Abert says between 0.8-0.9 */
#define BREP_SURFACE_FLATNESS 0.8
d79 4
a82 4
namespace brep {
    class BoundingVolume;
};
typedef class brep::BoundingVolume BrepBoundingVolume;
d98 2
@


1.12
log
@need to cache brep in specific structure, since internal goes away
@
text
@a34 2
 *
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.11 2007/03/23 20:13:23 jlowenz Exp $
@


1.11
log
@add constants for ray-brep intersection routine (may need to be adjusted)
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.10 2007/03/15 20:15:34 jlowenz Exp $
d99 1
@


1.10
log
@implement the bounding volumes in C++, and move the definition to g_nurb.cpp
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.9 2007/03/09 20:44:05 jlowenz Exp $
d71 4
@


1.9
log
@rename brep_hbv to more appropriate brep_bv
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.8 2007/02/28 16:08:08 jlowenz Exp $
d66 2
d69 5
d75 10
a84 12
/**
 * Bounding volume used as an acceleration data structure. It's
 * implemented here as an axis-aligned bounding box containing the
 * parametric bounds of the surface enclosed by the box.
 */
typedef struct _brep_bv { /* b-rep hierarchical bounding volume */
    struct bu_list l;
    point_t min;
    point_t max;
    fastf_t umin, umax, vmin, vmax;
    struct bu_list children;
} brep_bv;
d95 1
a95 1
    brep_bv* bvh;
@


1.8
log
@Do not include vector.h in brep.h, since it generates multiply defined symbols across libraries (i.e. librt/libwdb)
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.7 2007/02/27 19:42:58 jlowenz Exp $
d66 1
d73 1
a73 1
typedef struct _brep_hbv { /* b-rep hierarchical bounding volume */
d79 1
a79 1
} brep_hbv;
d90 1
a90 1
    brep_hbv* hbv;
@


1.7
log
@Include vector class for use by brep intersection routines
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.6 2007/02/15 21:19:09 jlowenz Exp $
a92 1
#include "vector.h"
@


1.6
log
@Fix some compilation errors w.r.t. opennurbs library and mixed c/c++ compilation.
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.5 2007/01/27 01:01:39 brlcad Exp $
d66 1
d93 1
@


1.5
log
@ws, test three
@
text
@d26 1
a26 1
 * 	Non Rational Uniform B-Spline (NURB)
d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.4 2007/01/23 01:13:19 brlcad Exp $
d42 1
d44 7
d52 1
a52 7
#else
typedef struct _on_brep_placeholder {
    int dummy; /* MS Visual C hack which can be removed if the struct contains something meaningful */
} ON_Brep;
#endif

#ifdef __cplusplus
d60 6
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.3 2007/01/21 04:45:40 brlcad Exp $
d48 1
a48 1
#endif 
@


1.3
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.2 2007/01/16 12:42:48 d_rossberg Exp $
@


1.2
log
@MS Visual C doesn't like empty structs (known bug)
@
text
@d22 1
a22 1
/*@@{*/
d37 1
a37 1
 *  $Header: /cvsroot/brlcad/brlcad/include/brep.h,v 1.1 2007/01/12 18:47:09 jlowenz Exp $
@


1.1
log
@Renamed on_nurb.h header to brep.h for clarity.
@
text
@d37 1
a37 1
 *  $Header: /cvsroot/brlcad/brlcad/include/on_nurb.h,v 1.2 2007/01/10 03:20:31 brlcad Exp $
d46 3
a48 1
typedef struct _on_brep_placeholder {} ON_Brep;
d73 1
a73 1

@

