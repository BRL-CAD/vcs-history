head	14.16;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.5
	rel-7-10-2:14.15
	rel-7-10-0:14.13
	rel-7-8-4:14.9
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@ * @;


14.16
date	2007.12.31.20.25.13;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.05.26.02.08.01;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.05.26.01.45.04;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.27.01.01.40;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.20;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.21.04.45.40;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.40;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.09.18.05.24.07;	author lbutler;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.10;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2005.10.23.04.44.26;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.19.17.33.37;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.03.24.16.38.39;	author bob1961;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2005.01.30.20.30.10;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.06.23.18;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.06.06.39;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.10;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.24.04.10.50;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.10;	author brlcad;	state Exp;
branches;
next	;

14.8.2.1
date	2006.03.13.15.24.57;	author jlowenz;	state Exp;
branches;
next	14.8.2.2;

14.8.2.2
date	2006.03.13.22.21.39;	author jlowenz;	state Exp;
branches;
next	14.8.2.3;

14.8.2.3
date	2006.03.14.22.20.42;	author jlowenz;	state Exp;
branches;
next	14.8.2.4;

14.8.2.4
date	2006.03.20.22.30.00;	author jlowenz;	state Exp;
branches;
next	14.8.2.5;

14.8.2.5
date	2006.03.22.21.05.16;	author jlowenz;	state Exp;
branches;
next	14.8.2.6;

14.8.2.6
date	2006.04.07.13.25.53;	author jlowenz;	state Exp;
branches;
next	14.8.2.7;

14.8.2.7
date	2006.04.20.12.30.38;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.16
log
@header cleanup, more address removal
@
text
@/*                          N U R B . H
 * BRL-CAD
 *
 * Copyright (c) 1991-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup nurb */
/** @@{ */
/** @@file nurb.h
 *
 * @@brief
 *	Define surface and curve structures for
 * 	Non Rational Uniform B-Spline (NURB)
 *	curves and surfaces.
 *
 *
 *  @@author	Paul Randal Stay
 *
 */

#ifndef __NURB_H__
#define __NURB_H__

#include "common.h"

/* make sure all the prerequisite include files have been included
 */
#ifndef MACHINE_H
# include "machine.h"
#endif

#ifndef VMATH_H
# include "vmath.h"
#endif

#include "nmg.h"

#ifndef RAYTRACE_H
# include "raytrace.h"
#endif

/* Define parametric directions for splitting. */

#define RT_NURB_SPLIT_ROW 0
#define RT_NURB_SPLIT_COL 1
#define RT_NURB_SPLIT_FLAT 2

/* Definition of NURB point types and coordinates
 * Bit:	  8765 4321 0
 *       |nnnn|tttt|h
 *			h     - 1 if Homogeneous
 *			tttt  - point type
 *				1 = XY
 *				2 = XYZ
 *				3 = UV
 *				4 = Random data
 *				5 = Projected surface
 *			nnnnn - number of coordinates per point
 *				includes the rational coordinate
 */

/* point types */
#define RT_NURB_PT_XY 	1			/**< @@brief x,y coordintes */
#define RT_NURB_PT_XYZ	2			/**< @@brief x,y,z coordinates */
#define RT_NURB_PT_UV	3			/**< @@brief trim u,v parameter space */
#define RT_NURB_PT_DATA 4			/**< @@brief random data */
#define RT_NURB_PT_PROJ	5			/**< @@brief Projected Surface */

#define RT_NURB_PT_RATIONAL	1
#define RT_NURB_PT_NONRAT 	0

#define RT_NURB_MAKE_PT_TYPE(n,t,h)	((n<<5) | (t<<1) | h)
#define RT_NURB_EXTRACT_COORDS(pt)	(pt>>5)
#define RT_NURB_EXTRACT_PT_TYPE(pt)		((pt>>1) & 0x0f)
#define RT_NURB_IS_PT_RATIONAL(pt)		(pt & 0x1)
#define RT_NURB_STRIDE(pt)		(RT_NURB_EXTRACT_COORDS(pt) * sizeof( fastf_t))

/* macros to check/validate a structure pointer
 */
#define NMG_CK_KNOT(_p)		BU_CKMAG(_p, RT_KNOT_VECTOR_MAGIC, "knot_vector")
#define NMG_CK_CNURB(_p)	BU_CKMAG(_p, RT_CNURB_MAGIC, "cnurb")
#define NMG_CK_SNURB(_p)	BU_CKMAG(_p, RT_SNURB_MAGIC, "snurb")

#define GET_CNURB(p/*,m*/) 		{BU_GETSTRUCT(p, edge_g_cnurb); \
	/* NMG_INCR_INDEX(p,m); */ \
	BU_LIST_INIT( &(p)->l ); (p)->l.magic = NMG_EDGE_G_CNURB_MAGIC; }
#define GET_SNURB(p/*,m*/) 		{BU_GETSTRUCT(p, face_g_snurb); \
	/* NMG_INCR_INDEX(p,m); */ \
	BU_LIST_INIT( &(p)->l ); (p)->l.magic = NMG_FACE_G_SNURB_MAGIC; }

#define RT_CNURB_MAGIC	0x636e7262

#define RT_SNURB_MAGIC	0x736e7262

/* ----- Internal structures ----- */

struct rt_nurb_poly {
	struct rt_nurb_poly * next;
	point_t		ply[3];		/**< @@brief Vertices */
	fastf_t		uv[3][2];	/**< @@brief U,V parametric values */
};

struct rt_nurb_uv_hit {
	struct rt_nurb_uv_hit * next;
	int		sub;
	fastf_t		u;
	fastf_t		v;
};


struct oslo_mat {
	struct oslo_mat * next;
	int		offset;
	int		osize;
	fastf_t		* o_vec;
};

#if !defined(MAX)
# define MAX(i,j)    ( (i) > (j) ? (i) : (j) )
#endif
#if !defined(MIN)
# define MIN(i,j)    ( (i) < (j) ? (i) : (j) )
#endif

/* --- new way */

struct bezier_2d_list {
	struct bu_list	l;
	point2d_t	*ctl;
};

/* nurb_basis.c */
RT_EXPORT BU_EXTERN(fastf_t rt_nurb_basis_eval, (struct knot_vector *knts, int interval,
			int order, fastf_t mu));

/* nurb_bezier.c */
RT_EXPORT BU_EXTERN(int rt_nurb_bezier, (struct bu_list *bezier_hd,
			const struct face_g_snurb * srf, struct resource *res));
RT_EXPORT BU_EXTERN(int rt_bez_check, (const struct face_g_snurb * srf));

/* nurb_bound.c */
RT_EXPORT BU_EXTERN(int rt_nurb_s_bound, (struct face_g_snurb *srf, point_t bmin, point_t bmax));
RT_EXPORT BU_EXTERN(int rt_nurb_c_bound, (struct edge_g_cnurb *crv, point_t bmin, point_t bmax));
RT_EXPORT BU_EXTERN(int rt_nurb_s_check, (struct face_g_snurb *srf));
RT_EXPORT BU_EXTERN(int rt_nurb_c_check, (struct edge_g_cnurb *crv));

/* nurb_copy.c */
RT_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_scopy, (const struct face_g_snurb *srf, struct resource *res));

/* nurb_diff.c */
RT_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_s_diff, (const struct face_g_snurb *srf, int dir));
RT_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_diff, (const struct edge_g_cnurb *crv));
RT_EXPORT BU_EXTERN(void rt_nurb_mesh_diff, (int order, const fastf_t *o_pts,
			fastf_t *n_pts,
			const fastf_t *knots, int o_stride, int n_stride,
			int o_size, int pt_type));

/* nurb_eval.c */
RT_EXPORT BU_EXTERN(void rt_nurb_s_eval, (const struct face_g_snurb *srf, fastf_t u, fastf_t v, fastf_t * final_value));
RT_EXPORT BU_EXTERN(void rt_nurb_c_eval, (const struct edge_g_cnurb *crv, fastf_t param, fastf_t * final_value));
RT_EXPORT BU_EXTERN(fastf_t *rt_nurb_eval_crv, (fastf_t *crv, int order,
			fastf_t param,
			const struct knot_vector *k_vec, int k_index, int coords));
RT_EXPORT BU_EXTERN(void rt_nurb_pr_crv, (fastf_t *crv, int c_size, int coords));

/* nurb_flat.c */
RT_EXPORT BU_EXTERN(int rt_nurb_s_flat, (struct face_g_snurb *srf, fastf_t epsilon));
RT_EXPORT BU_EXTERN(fastf_t rt_nurb_crv_flat, (fastf_t *crv, int	size, int pt_type));

/* nurb_knot.c */
RT_EXPORT BU_EXTERN(void rt_nurb_kvknot, (struct knot_vector *new_knots, int order,
			fastf_t lower, fastf_t upper, int num, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_kvmult, (struct knot_vector *new_kv,
			const struct knot_vector *kv,
			int num, fastf_t val, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_kvgen, (struct knot_vector *kv,
			fastf_t lower, fastf_t upper, int num, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_kvmerge, (struct knot_vector *new_knots,
			const struct knot_vector *kv1,
			const struct knot_vector *kv2, struct resource *res));
RT_EXPORT BU_EXTERN(int rt_nurb_kvcheck, (fastf_t val, const struct knot_vector *kv));
RT_EXPORT BU_EXTERN(void rt_nurb_kvextract, (struct knot_vector *new_kv,
			const struct knot_vector *kv,
			int lower, int upper, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_kvcopy, (struct knot_vector *new_kv,
			const struct knot_vector *old_kv, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_kvnorm, (struct knot_vector *kv));
RT_EXPORT BU_EXTERN(int rt_knot_index, (const struct knot_vector *kv, fastf_t k_value,
			int order));
RT_EXPORT BU_EXTERN(void rt_nurb_gen_knot_vector, (struct knot_vector *new_knots,
			int order, fastf_t lower, fastf_t upper, struct resource *res));

/* nurb_norm.c */
RT_EXPORT BU_EXTERN(void rt_nurb_s_norm, (struct face_g_snurb *srf, fastf_t u, fastf_t v, fastf_t * norm));

/* nurb_c2.c */
RT_EXPORT BU_EXTERN(void rt_nurb_curvature, (struct curvature *cvp,
			const struct face_g_snurb *srf, fastf_t u, fastf_t v));

/* nurb_plot.c */
RT_EXPORT BU_EXTERN(void rt_nurb_plot_snurb, (FILE *fp, const struct face_g_snurb *srf));
RT_EXPORT BU_EXTERN(void rt_nurb_plot_cnurb, (FILE *fp, const struct edge_g_cnurb *crv));
RT_EXPORT BU_EXTERN(void rt_nurb_s_plot, (const struct face_g_snurb *srf) );

/* nurb_interp.c */
RT_EXPORT BU_EXTERN(void rt_nurb_cinterp, (struct edge_g_cnurb *crv, int order,
			const fastf_t *data, int n));
RT_EXPORT BU_EXTERN(void rt_nurb_sinterp, (struct face_g_snurb *srf, int order,
			const fastf_t *data, int ymax, int xmax));

/* nurb_poly.c */
RT_EXPORT BU_EXTERN(struct rt_nurb_poly *rt_nurb_to_poly, (struct face_g_snurb *srf));
RT_EXPORT BU_EXTERN(struct rt_nurb_poly *rt_nurb_mk_poly,
			(fastf_t *v1, fastf_t *v2, fastf_t *v3,
			fastf_t uv1[2], fastf_t uv2[2], fastf_t uv3[2]));

/* nurb_ray.c */
RT_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_project_srf, (const struct face_g_snurb *srf,
			plane_t plane1, plane_t plane2, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_clip_srf, (const struct face_g_snurb *srf,
			int dir, fastf_t *min, fastf_t *max));
RT_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_region_from_srf, (const struct face_g_snurb *srf,
			int dir, fastf_t param1, fastf_t param2, struct resource *res));
RT_EXPORT BU_EXTERN(struct rt_nurb_uv_hit *rt_nurb_intersect, (const struct face_g_snurb * srf,
			plane_t plane1, plane_t plane2, double uv_tol, struct resource *res));

/* nurb_refine.c */
RT_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_s_refine, (const struct face_g_snurb *srf,
			int dir, struct knot_vector *kv, struct resource *res));
RT_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_refine, (const struct edge_g_cnurb * crv,
			struct knot_vector *kv));

/* nurb_solve.c */
RT_EXPORT BU_EXTERN(void rt_nurb_solve, (fastf_t *mat_1, fastf_t *mat_2,
			fastf_t *solution, int dim, int coords));
RT_EXPORT BU_EXTERN(void rt_nurb_doolittle, (fastf_t *mat_1, fastf_t *mat_2,
			int row, int coords));
RT_EXPORT BU_EXTERN(void rt_nurb_forw_solve, (const fastf_t *lu, const fastf_t *b,
			fastf_t *y, int n));
RT_EXPORT BU_EXTERN(void rt_nurb_back_solve, (const fastf_t *lu, const fastf_t *y,
			fastf_t *x, int n));
RT_EXPORT BU_EXTERN(void rt_nurb_p_mat, (const fastf_t * mat, int dim));

/* nurb_split.c */
RT_EXPORT BU_EXTERN(void rt_nurb_s_split, (struct bu_list *split_hd, const struct face_g_snurb *srf,
			int dir, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_c_split, (struct bu_list *split_hd, const struct edge_g_cnurb *crv));

/* nurb_util.c */
RT_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_new_snurb, (int u_order, int v_order,
			int n_u_knots, int n_v_knots,
			int n_rows, int n_cols, int pt_type, struct resource *res));
RT_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_new_cnurb, (int order, int n_knots,
			int n_pts, int pt_type));
RT_EXPORT BU_EXTERN(void rt_nurb_free_snurb, (struct face_g_snurb *srf, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_free_cnurb, (struct edge_g_cnurb * crv));
RT_EXPORT BU_EXTERN(void rt_nurb_c_print, (const struct edge_g_cnurb *crv));
RT_EXPORT BU_EXTERN(void rt_nurb_s_print, (char *c, const struct face_g_snurb *srf));
RT_EXPORT BU_EXTERN(void rt_nurb_pr_kv, (const struct knot_vector *kv));
RT_EXPORT BU_EXTERN(void rt_nurb_pr_mesh, (const struct face_g_snurb *m));
RT_EXPORT BU_EXTERN(void rt_nurb_print_pt_type, (int c));

/* nurb_xsplit.c */
RT_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_s_xsplit, (struct face_g_snurb *srf,
			fastf_t param, int dir));
RT_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_xsplit, (struct edge_g_cnurb *crv, fastf_t param));

/* oslo_calc.c */
RT_EXPORT BU_EXTERN(struct oslo_mat *rt_nurb_calc_oslo, (int order,
			const struct knot_vector *tau_kv,
			struct knot_vector *t_kv, struct resource *res));
RT_EXPORT BU_EXTERN(void rt_nurb_pr_oslo, (struct oslo_mat *om));
RT_EXPORT BU_EXTERN(void rt_nurb_free_oslo, (struct oslo_mat *om, struct resource *res));

/* oslo_map.c */
RT_EXPORT BU_EXTERN(void rt_nurb_map_oslo, (struct oslo_mat *oslo,
			fastf_t *old_pts, fastf_t *new_pts,
			int o_stride, int n_stride,
			int lower, int upper, int pt_type));

/* bezier_2d_isect.c */
RT_EXPORT BU_EXTERN( int CrossingCount, (point2d_t *V, int degree, point2d_t ray_start,
			       point2d_t ray_dir, point2d_t ray_perp ) );
RT_EXPORT BU_EXTERN( int ControlPolygonFlatEnough, (point2d_t *V, int degree, fastf_t epsilon ) );
RT_EXPORT BU_EXTERN( void Bezier, (point2d_t *V, int degree, double t,
			 point2d_t *Left, point2d_t *Right, point2d_t eval_pt, point2d_t normal ) );
RT_EXPORT BU_EXTERN( int FindRoots, (point2d_t *w, int degree, point2d_t **intercept, point2d_t **normal,
			   point2d_t ray_start, point2d_t ray_dir, point2d_t ray_perp,
			   int depth, fastf_t epsilon) );
RT_EXPORT BU_EXTERN( struct bezier_2d_list *subdivide_bezier, (struct bezier_2d_list *bezier_hd, int degree,
							fastf_t epsilon, int depth) );
#endif /* __NURB_H__ */

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@clean up the header protections so that they are all now more consistent with one another via use of __HEADER_H__ for the define names.
@
text
@a31 4
 *  @@par Source
 * 	SECAD/VLD Computing Consortium, Bldg 394
 *@@n	The U.S. Army Ballistic Research Laboratory
 *@@n 	Aberdeen Proving Ground, Maryland 21005
@


14.14
log
@get rid of RCS variables from the public header files.  this is done in part to reduce recompilation during interface changes, but also to move towards not relying on or publishing the information contained in the variables interface-wise. (they're fine for c sources and private headers)
@
text
@d38 2
a39 2
#ifndef NURB_H
#define NURB_H seen
d309 1
a309 1
#endif
@


14.13
log
@ws, test three
@
text
@a35 2
 *
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.12 2007/01/23 01:13:20 brlcad Exp $
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.11 2007/01/21 04:45:40 brlcad Exp $
a322 1

@


14.11
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d37 1
a37 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.10 2007/01/20 14:36:40 brlcad Exp $
@


14.10
log
@update copyright to 2007
@
text
@d22 1
a22 1
/*@@{*/
d38 1
a38 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.9 2006/09/18 05:24:07 lbutler Exp $
d314 1
a314 1
/*@@}*/
@


14.9
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1991-2006 United States Government as represented by
d38 1
a38 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.8 2006/01/18 06:46:10 brlcad Exp $
@


14.8
log
@update copyright to 2006
@
text
@d21 2
d25 1
a25 1
 *  Function -
a29 2
 *  Author -
 *	Paul Randal Stay
d31 3
a33 1
 *  Source -
d35 2
a36 2
 *	The U.S. Army Ballistic Research Laboratory
 * 	Aberdeen Proving Ground, Maryland 21005
d38 1
a38 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.7 2005/10/23 04:44:26 brlcad Exp $
d83 5
a87 5
#define RT_NURB_PT_XY 	1			/* x,y coordintes */
#define RT_NURB_PT_XYZ	2			/* x,y,z coordinates */
#define RT_NURB_PT_UV	3			/* trim u,v parameter space */
#define RT_NURB_PT_DATA 4			/* random data */
#define RT_NURB_PT_PROJ	5			/* Projected Surface */
d119 2
a120 2
	point_t		ply[3];		/* Vertices */
	fastf_t		uv[3][2];	/* U,V parametric values */
d314 1
a314 1

d324 1
@


14.8.2.1
log
@Added nurb-related structures from nmg.h. removed dependency on raytrace.h, replaced with dependency on rt.h. Added function declarations removed from raytrace.h.
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.8 2006/01/18 06:46:10 brlcad Exp $
d46 12
a57 14
#include "machine.h"
#include "vmath.h"
#include "rt.h"

#ifndef NURB_EXPORT
#  if defined(_WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#    ifdef NURB_EXPORT_DLL
#      define NURB_EXPORT __declspec(dllexport)
#    else
#      define NURB_EXPORT __declspec(dllimport)
#    endif
#  else
#    define NURB_EXPORT
#  endif
d98 1
a98 1
#define NURB_CK_KNOT(_p)		BU_CKMAG(_p, RT_KNOT_VECTOR_MAGIC, "knot_vector")
d110 1
a112 68
/*
 *			K N O T _ V E C T O R
 *
 *  Definition of a knot vector.
 *  Not found independently, but used in the cnurb and snurb structures.
 *  (Exactly the same as the definition in nurb.h)
 */
struct knot_vector {
	int		magic;
	int		k_size;		/* knot vector size */
	fastf_t		* knots;	/* pointer to knot vector  */
};
#define RT_KNOT_VECTOR_MAGIC	0x6b6e6f74	/* aka RT_KNOT_VECTOR_MAGIC */


/* 
 * 		       E D G E _ G _ C N U R B
 *   
 *  The ctl_points on this curve are (u,v) values on the face's surface.
 *  As a storage and performance efficiency measure, if order <= 0,
 *  then the cnurb is a straight line segment in parameter space,
 *  and the k.knots and ctl_points pointers will be NULL.
 *  In this case, the vertexuse_a_cnurb's at both ends of the edgeuse define
 *  the path through parameter space.
 */
struct edge_g_cnurb {
	struct bu_list		l;	/* NOTICE:  l.forw & l.back *not* stored in database.  For LIBNURB internal use only. */
	struct bu_list		eu_hd2;	/* heads l2 list of edgeuses on this curve */
	int			order;	/* Curve Order */
	struct knot_vector	k;	/* curve knot vector */
	/* curve control polygon */
	int			c_size;	/* number of ctl points */
	int			pt_type;/* curve point type */
	fastf_t			*ctl_points; /* array [c_size] */
	long			index;	/* struct # in this model */
};


/*
 *                    F A C E _ G _ S N U R B
 *
 * Definition of a single NURBS patch. Pulled back into nurb.h from
 * nmg.h. Contains detritus from having inappropriately participated
 * in NMG stuff.
 * 
 * TODO: remove NMG-related stuff. Recreate the NMG face structure
 *       *using* the nurb patch structure.
 */
struct face_g_snurb {
	/* NOTICE:  l.forw & l.back *not* stored in database.  For LIBNURB internal use only. */
	struct bu_list		l;
	struct bu_list		f_hd;	/* list of faces sharing this surface */
	int			order[2]; /* surface order [0] = u, [1] = v */
	struct knot_vector	u;	/* surface knot vectors */
	struct knot_vector	v;	/* surface knot vectors */
	/* surface control points */
	int			s_size[2]; /* mesh size, u,v */
	int			pt_type; /* surface point type */
	fastf_t			*ctl_points; /* array [size[0]*size[1]] */
	/* START OF ITEMS VALID IN-MEMORY ONLY -- NOT STORED ON DISK */
	int			dir;	/* direction of last refinement */
	point_t			min_pt;	/* min corner of bounding box */
	point_t			max_pt;	/* max corner of bounding box */
	/*   END OF ITEMS VALID IN-MEMORY ONLY -- NOT STORED ON DISK */
	long			index;	/* struct # in this model */
};


a149 2


d151 1
a151 1
NURB_EXPORT BU_EXTERN(fastf_t rt_nurb_basis_eval, (struct knot_vector *knts, int interval,
d155 1
a155 1
NURB_EXPORT BU_EXTERN(int rt_nurb_bezier, (struct bu_list *bezier_hd,
d157 1
a157 6
NURB_EXPORT BU_EXTERN(int rt_bez_check, (const struct face_g_snurb * srf));
NURB_EXPORT BU_EXTERN(int nurb_crv_is_bezier,
		    (const struct edge_g_cnurb *crv));
NURB_EXPORT BU_EXTERN(void nurb_c_to_bezier,
		    (struct bu_list *clist,
		     struct edge_g_cnurb *crv));
d160 4
a163 4
NURB_EXPORT BU_EXTERN(int rt_nurb_s_bound, (struct face_g_snurb *srf, point_t bmin, point_t bmax));
NURB_EXPORT BU_EXTERN(int rt_nurb_c_bound, (struct edge_g_cnurb *crv, point_t bmin, point_t bmax));
NURB_EXPORT BU_EXTERN(int rt_nurb_s_check, (struct face_g_snurb *srf));
NURB_EXPORT BU_EXTERN(int rt_nurb_c_check, (struct edge_g_cnurb *crv));
d166 1
a166 2
NURB_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_scopy, (const struct face_g_snurb * srf, struct resource *res));
NURB_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_crv_copy, (const struct edge_g_cnurb * crv));
d169 3
a171 3
NURB_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_s_diff, (const struct face_g_snurb *srf, int dir));
NURB_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_diff, (const struct edge_g_cnurb *crv));
NURB_EXPORT BU_EXTERN(void rt_nurb_mesh_diff, (int order, const fastf_t *o_pts,
d177 3
a179 3
NURB_EXPORT BU_EXTERN(void rt_nurb_s_eval, (const struct face_g_snurb *srf, fastf_t u, fastf_t v, fastf_t * final_value));
NURB_EXPORT BU_EXTERN(void rt_nurb_c_eval, (const struct edge_g_cnurb *crv, fastf_t param, fastf_t * final_value));
NURB_EXPORT BU_EXTERN(fastf_t *rt_nurb_eval_crv, (fastf_t *crv, int order,
d182 1
a182 1
NURB_EXPORT BU_EXTERN(void rt_nurb_pr_crv, (fastf_t *crv, int c_size, int coords));
d185 2
a186 2
NURB_EXPORT BU_EXTERN(int rt_nurb_s_flat, (struct face_g_snurb *srf, fastf_t epsilon));
NURB_EXPORT BU_EXTERN(fastf_t rt_nurb_crv_flat, (fastf_t *crv, int	size, int pt_type));
d189 1
a189 1
NURB_EXPORT BU_EXTERN(void rt_nurb_kvknot, (struct knot_vector *new_knots, int order,
d191 1
a191 1
NURB_EXPORT BU_EXTERN(void rt_nurb_kvmult, (struct knot_vector *new_kv,
d194 1
a194 1
NURB_EXPORT BU_EXTERN(void rt_nurb_kvgen, (struct knot_vector *kv,
d196 1
a196 1
NURB_EXPORT BU_EXTERN(void rt_nurb_kvmerge, (struct knot_vector *new_knots,
d199 2
a200 2
NURB_EXPORT BU_EXTERN(int rt_nurb_kvcheck, (fastf_t val, const struct knot_vector *kv));
NURB_EXPORT BU_EXTERN(void rt_nurb_kvextract, (struct knot_vector *new_kv,
d203 1
a203 1
NURB_EXPORT BU_EXTERN(void rt_nurb_kvcopy, (struct knot_vector *new_kv,
d205 2
a206 2
NURB_EXPORT BU_EXTERN(void rt_nurb_kvnorm, (struct knot_vector *kv));
NURB_EXPORT BU_EXTERN(int rt_knot_index, (const struct knot_vector *kv, fastf_t k_value,
d208 1
a208 1
NURB_EXPORT BU_EXTERN(void rt_nurb_gen_knot_vector, (struct knot_vector *new_knots,
a209 1
NURB_EXPORT BU_EXTERN(int rt_nurb_knot_index, (const struct knot_vector *kv, fastf_t k_value, int	order));
d212 1
a212 1
NURB_EXPORT BU_EXTERN(void rt_nurb_s_norm, (struct face_g_snurb *srf, fastf_t u, fastf_t v, fastf_t * norm));
d215 1
a215 1
NURB_EXPORT BU_EXTERN(void rt_nurb_curvature, (struct curvature *cvp,
d219 3
a221 3
NURB_EXPORT BU_EXTERN(void rt_nurb_plot_snurb, (FILE *fp, const struct face_g_snurb *srf));
NURB_EXPORT BU_EXTERN(void rt_nurb_plot_cnurb, (FILE *fp, const struct edge_g_cnurb *crv));
NURB_EXPORT BU_EXTERN(void rt_nurb_s_plot, (const struct face_g_snurb *srf) );
d224 1
a224 1
NURB_EXPORT BU_EXTERN(void rt_nurb_cinterp, (struct edge_g_cnurb *crv, int order,
d226 1
a226 1
NURB_EXPORT BU_EXTERN(void rt_nurb_sinterp, (struct face_g_snurb *srf, int order,
d230 2
a231 2
NURB_EXPORT BU_EXTERN(struct rt_nurb_poly *rt_nurb_to_poly, (struct face_g_snurb *srf));
NURB_EXPORT BU_EXTERN(struct rt_nurb_poly *rt_nurb_mk_poly,
d236 1
a236 1
NURB_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_project_srf, (const struct face_g_snurb *srf,
d238 1
a238 1
NURB_EXPORT BU_EXTERN(void rt_nurb_clip_srf, (const struct face_g_snurb *srf,
d240 1
a240 1
NURB_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_region_from_srf, (const struct face_g_snurb *srf,
d242 1
a242 1
NURB_EXPORT BU_EXTERN(struct rt_nurb_uv_hit *rt_nurb_intersect, (const struct face_g_snurb * srf,
d246 1
a246 1
NURB_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_s_refine, (const struct face_g_snurb *srf,
d248 1
a248 1
NURB_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_refine, (const struct edge_g_cnurb * crv,
d252 1
a252 1
NURB_EXPORT BU_EXTERN(void rt_nurb_solve, (fastf_t *mat_1, fastf_t *mat_2,
d254 1
a254 1
NURB_EXPORT BU_EXTERN(void rt_nurb_doolittle, (fastf_t *mat_1, fastf_t *mat_2,
d256 1
a256 1
NURB_EXPORT BU_EXTERN(void rt_nurb_forw_solve, (const fastf_t *lu, const fastf_t *b,
d258 1
a258 1
NURB_EXPORT BU_EXTERN(void rt_nurb_back_solve, (const fastf_t *lu, const fastf_t *y,
d260 1
a260 1
NURB_EXPORT BU_EXTERN(void rt_nurb_p_mat, (const fastf_t * mat, int dim));
d263 1
a263 1
NURB_EXPORT BU_EXTERN(void rt_nurb_s_split, (struct bu_list *split_hd, const struct face_g_snurb *srf,
d265 1
a265 1
NURB_EXPORT BU_EXTERN(void rt_nurb_c_split, (struct bu_list *split_hd, const struct edge_g_cnurb *crv));
d268 1
a268 1
NURB_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_new_snurb, (int u_order, int v_order,
d271 1
a271 1
NURB_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_new_cnurb, (int order, int n_knots,
d273 7
a279 8
NURB_EXPORT BU_EXTERN(void rt_nurb_free_snurb, (struct face_g_snurb *srf, struct resource *res));
NURB_EXPORT BU_EXTERN(void rt_nurb_free_cnurb, (struct edge_g_cnurb * crv));
NURB_EXPORT BU_EXTERN(void rt_nurb_c_print, (const struct edge_g_cnurb *crv));
NURB_EXPORT BU_EXTERN(void rt_nurb_s_print, (char *c, const struct face_g_snurb *srf));
NURB_EXPORT BU_EXTERN(void rt_nurb_pr_kv, (const struct knot_vector *kv));
NURB_EXPORT BU_EXTERN(void rt_nurb_pr_mesh, (const struct face_g_snurb *m));
NURB_EXPORT BU_EXTERN(void rt_nurb_print_pt_type, (int c));
NURB_EXPORT BU_EXTERN(void rt_nurb_clean_cnurb, (struct edge_g_cnurb * crv));
d282 1
a282 1
NURB_EXPORT BU_EXTERN(struct face_g_snurb *rt_nurb_s_xsplit, (struct face_g_snurb *srf,
d284 1
a284 1
NURB_EXPORT BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_xsplit, (struct edge_g_cnurb *crv, fastf_t param));
d287 1
a287 1
NURB_EXPORT BU_EXTERN(struct oslo_mat *rt_nurb_calc_oslo, (int order,
d290 2
a291 2
NURB_EXPORT BU_EXTERN(void rt_nurb_pr_oslo, (struct oslo_mat *om));
NURB_EXPORT BU_EXTERN(void rt_nurb_free_oslo, (struct oslo_mat *om, struct resource *res));
d294 1
a294 1
NURB_EXPORT BU_EXTERN(void rt_nurb_map_oslo, (struct oslo_mat *oslo,
d300 1
a300 1
NURB_EXPORT BU_EXTERN( int CrossingCount, (point2d_t *V, int degree, point2d_t ray_start,
d302 2
a303 2
NURB_EXPORT BU_EXTERN( int ControlPolygonFlatEnough, (point2d_t *V, int degree, fastf_t epsilon ) );
NURB_EXPORT BU_EXTERN( void Bezier, (point2d_t *V, int degree, double t,
d305 1
a305 1
NURB_EXPORT BU_EXTERN( int FindRoots, (point2d_t *w, int degree, point2d_t **intercept, point2d_t **normal,
d308 1
a308 1
NURB_EXPORT BU_EXTERN( struct bezier_2d_list *subdivide_bezier, (struct bezier_2d_list *bezier_hd, int degree,
@


14.8.2.2
log
@ws and support for trimming curves on a nurb surface.
@
text
@d36 1
a36 1
 *  $Header$
a137 3
 *
 *  TODO: remove NMG-related stuff. Recreate an NMG edge structure
 *        *using* this curve structure.
d140 9
a148 9
    struct bu_list     	l;	/* NOTICE:  l.forw & l.back *not* stored in database.  For LIBNURB internal use only. */
    struct bu_list     	eu_hd2;	/* heads l2 list of edgeuses on this curve */
    int			order;	/* Curve Order */
    struct knot_vector	k;	/* curve knot vector */
    /* curve control polygon */
    int			c_size;	/* number of ctl points */
    int			pt_type;/* curve point type */
    fastf_t	       	*ctl_points; /* array [c_size] */
    long	       	index;	/* struct # in this model */
d163 16
a178 21
    /* NOTICE:  l.forw & l.back *not* stored in database.  For LIBNURB internal use only. */
    struct bu_list	l;
    struct bu_list    	f_hd;	/* list of faces sharing this surface */
    int			order[2]; /* surface order [0] = u, [1] = v */
    struct knot_vector	u;	/* surface knot vectors */
    struct knot_vector	v;	/* surface knot vectors */
    /* surface control points */
    int			s_size[2]; /* mesh size, u,v */
    int			pt_type; /* surface point type */
    fastf_t	       	*ctl_points; /* array [size[0]*size[1]] */
    
    /* a list of trimming curves contained on this face */
    int                 trims_count;
    struct bu_list      trims_hd; /* contains: struct edge_g_cnurb */
    
    /* START OF ITEMS VALID IN-MEMORY ONLY -- NOT STORED ON DISK */
    int			dir;	/* direction of last refinement */
    point_t	       	min_pt;	/* min corner of bounding box */
    point_t	       	max_pt;	/* max corner of bounding box */
    /*   END OF ITEMS VALID IN-MEMORY ONLY -- NOT STORED ON DISK */
    long	       	index;	/* struct # in this model */
d185 3
a187 3
    struct rt_nurb_poly * next;
    point_t		ply[3];		/* Vertices */
    fastf_t		uv[3][2];	/* U,V parametric values */
@


14.8.2.3
log
@oops, add support for lists of trim_contours (essentially a list of curves) since any given trim contour may be composed of multiple curves.
@
text
@a97 9

/* 
 * MAGIC 
 */
#define RT_CNURB_MAGIC	           0x636e7262
#define RT_SNURB_MAGIC	           0x736e7262
#define RT_NURB_TRIM_CONTOUR_MAGIC 0x836e7262
#define RT_KNOT_VECTOR_MAGIC	   0x6b6e6f74	/* aka RT_KNOT_VECTOR_MAGIC */

d100 1
a100 1
#define NURB_CK_KNOT(_p)	BU_CKMAG(_p, RT_KNOT_VECTOR_MAGIC, "knot_vector")
d104 10
d119 1
d126 1
a132 7
 *  
 *  When used as nurbs curve: 
 *  If order <= 0, then the cnurb is a line,
 *  and the first two control points define the end points of the
 *  line. The knot vector will be empty. 
 * 
 *  When used as NMG edge (TO BE REMOVED):
a144 1
    
a153 4
#define GET_CNURB(p/*,m*/) 		{BU_GETSTRUCT(p, edge_g_cnurb); \
	/* NMG_INCR_INDEX(p,m); */ \
	BU_LIST_INIT( &(p)->l ); (p)->l.magic = RT_CNURB_MAGIC; }

d156 1
a156 18
 *                     T R I M _ C O N T O U R
 *
 * To make it easier to represent a complex trimming shape, a trim
 * contour is actually represented as a list of curve segments which
 * may be composed of different types of curves (i.e. b-splines,
 * lines, etc...)
 */
struct trim_contour {
    struct bu_list l;
    int curve_count;
    struct bu_list curve_hd; /* contains: struct edge_g_cnurb */
};
#define GET_TRIM_CONTOUR(p) { BU_GETSTRUCT(p, trim_contour); \
        BU_LIST_INIT( &(p)->l; ); (p)->l.magic = RT_NURB_TRIM_CONTOUR_MAGIC; }


/*
 *                     F A C E _ G _ S N U R B
d177 1
a177 1
    /* a list of trimming contours contained on this face */
d179 1
a179 1
    struct bu_list      trims_hd; /* type: struct trim_contour */
a187 3
#define GET_SNURB(p/*,m*/) 		{BU_GETSTRUCT(p, face_g_snurb); \
	/* NMG_INCR_INDEX(p,m); */ \
	BU_LIST_INIT( &(p)->l ); (p)->l.magic = RT_SNURB_MAGIC; }
@


14.8.2.4
log
@added new nurbs function declarations
@
text
@d178 1
a178 1
        BU_LIST_INIT( &(p)->l ); (p)->l.magic = RT_NURB_TRIM_CONTOUR_MAGIC; }
a387 5
NURB_EXPORT BU_EXTERN(struct edge_g_cnurb* rt_nurb_new_cnurb_line, ());
NURB_EXPORT BU_EXTERN(struct trim_contour* rt_nurb_new_trim_contour, ());
NURB_EXPORT BU_EXTERN(void rt_nurb_add_trim_curve, (struct trim_contour* trim, struct edge_g_cnurb* edge));
NURB_EXPORT BU_EXTERN(void rt_nurb_add_trim_contour, (struct face_g_snurb* surf, struct trim_contour* trim));
NURB_EXPORT BU_EXTERN(void rt_nurb_free_trim_contour, (struct trim_contour* trim));
@


14.8.2.5
log
@Added magic check for trim_contour struct.
@
text
@a178 1
#define RT_CK_TRIMCONTOUR(_p)  BU_CKMAG(_p, RT_NURB_TRIM_CONTOUR_MAGIC, "trim_contour")
@


14.8.2.6
log
@ws; changed oslo matrix vector to be statically allocated and added support for oslo matrix pools (structure and accessors for struct oslo_mat). dynamic allocation of olso_mats were a serious bottleneck in profiling results.
@
text
@d173 3
a175 3
    struct bu_list      l;
    int                 curve_count;
    struct edge_g_cnurb curve_hd; /* contains: struct edge_g_cnurb */
d206 1
a206 1
    struct trim_contour trims_hd; /* type: struct trim_contour */
d229 4
a232 4
    struct rt_nurb_uv_hit * next;
    int		sub;
    fastf_t		u;
    fastf_t		v;
d235 1
a235 1
#define MAX_OSLO_VEC_SIZE 128 /* TODO: look at some heuristics for this size */
d237 4
a240 15
    struct oslo_mat * next;
    int	    offset;
    int	    osize;
    fastf_t o_vec[MAX_OSLO_VEC_SIZE]; 
};

/*
 * instead of dynamically allocating/releasing oslo_mat structures
 * for each hit per ray, keep a pool per processor
 */
#define OSLO_MAT_POOL_GROWSIZE 32
struct oslo_mat_pool {
    struct oslo_mat* available; /* head of dynamically sized available list */
    int size;                   /* the size of the pool; sized in blocks of 32 */
    int available_size;         /* the available mats */
a401 2
NURB_EXPORT BU_EXTERN(struct oslo_mat* rt_nurb_new_oslo, ());
NURB_EXPORT BU_EXTERN(void rt_nurb_free_oslo, (struct oslo_mat* mat));
d413 1
a431 5

/* nurb_trim.c */
NURB_EXPORT BU_EXTERN( int rt_nurb_uv_trimmed, (struct face_g_snurb* srf, fastf_t u, fastf_t v) );


@


14.8.2.7
log
@Added declaration for trim-to-bezier curve conversion routine, and updated uv in trim test function to accept a list of trims instead of a surface (since the trims are preprocessed.
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.8.2.6 2006/04/07 13:25:53 jlowenz Exp $
a276 1
NURB_EXPORT BU_EXTERN(void rt_nurb_trims_to_bezier, (struct bu_list* trims, struct face_g_snurb* srf));
d446 1
a446 1
NURB_EXPORT BU_EXTERN( int rt_nurb_uv_trimmed, (struct bu_list* trims, fastf_t u, fastf_t v) );
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1991-2005 United States Government as represented by
d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.6 2005/09/19 17:33:37 brlcad Exp $
@


14.6
log
@nmg.h wraps itself now, so just include it
@
text
@d25 2
a26 2
 * 	Non Rational Uniform B-Spline (NURB) 
 *	curves and surfaces. 
d30 1
a30 1
 * 
d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.5 2005/03/24 16:38:39 bob1961 Exp $
d66 1
a66 1
/* Definition of NURB point types and coordinates 
d71 1
a71 1
 *				1 = XY 
@


14.5
log
@Use RT_EXPORT to potentially export functions (i.e. for WINDOWS dll)
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.4 2005/01/30 20:30:10 brlcad Exp $
d42 2
d54 1
a54 3
#ifndef NMG_H
# include "nmg.h"
#endif
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d25 2
a26 2
 * 	Non Rational Uniform B-Spline (NURB)
 *	curves and surfaces.
d30 1
a30 1
 *
d36 1
a36 1
 *  $Header$
a41 2
#include "common.h"

d52 3
a54 1
#include "nmg.h"
d66 1
a66 1
/* Definition of NURB point types and coordinates
d71 1
a71 1
 *				1 = XY
@


14.4
log
@update copyright to 2005
@
text
@d36 1
a36 1
 *  $Header: /cvsroot/brlcad/brlcad/include/nurb.h,v 14.3 2004/12/21 06:23:18 morrison Exp $
d151 1
a151 1
BU_EXTERN(fastf_t rt_nurb_basis_eval, (struct knot_vector *knts, int interval,
d155 1
a155 1
BU_EXTERN(int rt_nurb_bezier, (struct bu_list *bezier_hd,
d157 1
a157 1
BU_EXTERN(int rt_bez_check, (const struct face_g_snurb * srf));
d160 4
a163 4
BU_EXTERN(int rt_nurb_s_bound, (struct face_g_snurb *srf, point_t bmin, point_t bmax));
BU_EXTERN(int rt_nurb_c_bound, (struct edge_g_cnurb *crv, point_t bmin, point_t bmax));
BU_EXTERN(int rt_nurb_s_check, (struct face_g_snurb *srf));
BU_EXTERN(int rt_nurb_c_check, (struct edge_g_cnurb *crv));
d166 1
a166 1
BU_EXTERN(struct face_g_snurb *rt_nurb_scopy, (const struct face_g_snurb *srf, struct resource *res));
d169 3
a171 3
BU_EXTERN(struct face_g_snurb *rt_nurb_s_diff, (const struct face_g_snurb *srf, int dir));
BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_diff, (const struct edge_g_cnurb *crv));
BU_EXTERN(void rt_nurb_mesh_diff, (int order, const fastf_t *o_pts,
d177 3
a179 3
BU_EXTERN(void rt_nurb_s_eval, (const struct face_g_snurb *srf, fastf_t u, fastf_t v, fastf_t * final_value));
BU_EXTERN(void rt_nurb_c_eval, (const struct edge_g_cnurb *crv, fastf_t param, fastf_t * final_value));
BU_EXTERN(fastf_t *rt_nurb_eval_crv, (fastf_t *crv, int order,
d182 1
a182 1
BU_EXTERN(void rt_nurb_pr_crv, (fastf_t *crv, int c_size, int coords));
d185 2
a186 2
BU_EXTERN(int rt_nurb_s_flat, (struct face_g_snurb *srf, fastf_t epsilon));
BU_EXTERN(fastf_t rt_nurb_crv_flat, (fastf_t *crv, int	size, int pt_type));
d189 1
a189 1
BU_EXTERN(void rt_nurb_kvknot, (struct knot_vector *new_knots, int order,
d191 1
a191 1
BU_EXTERN(void rt_nurb_kvmult, (struct knot_vector *new_kv,
d194 1
a194 1
BU_EXTERN(void rt_nurb_kvgen, (struct knot_vector *kv,
d196 1
a196 1
BU_EXTERN(void rt_nurb_kvmerge, (struct knot_vector *new_knots,
d199 2
a200 2
BU_EXTERN(int rt_nurb_kvcheck, (fastf_t val, const struct knot_vector *kv));
BU_EXTERN(void rt_nurb_kvextract, (struct knot_vector *new_kv,
d203 1
a203 1
BU_EXTERN(void rt_nurb_kvcopy, (struct knot_vector *new_kv,
d205 2
a206 2
BU_EXTERN(void rt_nurb_kvnorm, (struct knot_vector *kv));
BU_EXTERN(int rt_knot_index, (const struct knot_vector *kv, fastf_t k_value,
d208 1
a208 1
BU_EXTERN(void rt_nurb_gen_knot_vector, (struct knot_vector *new_knots,
d212 1
a212 1
BU_EXTERN(void rt_nurb_s_norm, (struct face_g_snurb *srf, fastf_t u, fastf_t v, fastf_t * norm));
d215 1
a215 1
BU_EXTERN(void rt_nurb_curvature, (struct curvature *cvp,
d219 3
a221 3
BU_EXTERN(void rt_nurb_plot_snurb, (FILE *fp, const struct face_g_snurb *srf));
BU_EXTERN(void rt_nurb_plot_cnurb, (FILE *fp, const struct edge_g_cnurb *crv));
BU_EXTERN(void rt_nurb_s_plot, (const struct face_g_snurb *srf) );
d224 1
a224 1
BU_EXTERN(void rt_nurb_cinterp, (struct edge_g_cnurb *crv, int order,
d226 1
a226 1
BU_EXTERN(void rt_nurb_sinterp, (struct face_g_snurb *srf, int order,
d230 2
a231 2
BU_EXTERN(struct rt_nurb_poly *rt_nurb_to_poly, (struct face_g_snurb *srf));
BU_EXTERN(struct rt_nurb_poly *rt_nurb_mk_poly,
d236 1
a236 1
BU_EXTERN(struct face_g_snurb *rt_nurb_project_srf, (const struct face_g_snurb *srf,
d238 1
a238 1
BU_EXTERN(void rt_nurb_clip_srf, (const struct face_g_snurb *srf,
d240 1
a240 1
BU_EXTERN(struct face_g_snurb *rt_nurb_region_from_srf, (const struct face_g_snurb *srf,
d242 1
a242 1
BU_EXTERN(struct rt_nurb_uv_hit *rt_nurb_intersect, (const struct face_g_snurb * srf,
d246 1
a246 1
BU_EXTERN(struct face_g_snurb *rt_nurb_s_refine, (const struct face_g_snurb *srf,
d248 1
a248 1
BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_refine, (const struct edge_g_cnurb * crv,
d252 1
a252 1
BU_EXTERN(void rt_nurb_solve, (fastf_t *mat_1, fastf_t *mat_2,
d254 1
a254 1
BU_EXTERN(void rt_nurb_doolittle, (fastf_t *mat_1, fastf_t *mat_2,
d256 1
a256 1
BU_EXTERN(void rt_nurb_forw_solve, (const fastf_t *lu, const fastf_t *b,
d258 1
a258 1
BU_EXTERN(void rt_nurb_back_solve, (const fastf_t *lu, const fastf_t *y,
d260 1
a260 1
BU_EXTERN(void rt_nurb_p_mat, (const fastf_t * mat, int dim));
d263 1
a263 1
BU_EXTERN(void rt_nurb_s_split, (struct bu_list *split_hd, const struct face_g_snurb *srf,
d265 1
a265 1
BU_EXTERN(void rt_nurb_c_split, (struct bu_list *split_hd, const struct edge_g_cnurb *crv));
d268 1
a268 1
BU_EXTERN(struct face_g_snurb *rt_nurb_new_snurb, (int u_order, int v_order,
d271 1
a271 1
BU_EXTERN(struct edge_g_cnurb *rt_nurb_new_cnurb, (int order, int n_knots,
d273 7
a279 7
BU_EXTERN(void rt_nurb_free_snurb, (struct face_g_snurb *srf, struct resource *res));
BU_EXTERN(void rt_nurb_free_cnurb, (struct edge_g_cnurb * crv));
BU_EXTERN(void rt_nurb_c_print, (const struct edge_g_cnurb *crv));
BU_EXTERN(void rt_nurb_s_print, (char *c, const struct face_g_snurb *srf));
BU_EXTERN(void rt_nurb_pr_kv, (const struct knot_vector *kv));
BU_EXTERN(void rt_nurb_pr_mesh, (const struct face_g_snurb *m));
BU_EXTERN(void rt_nurb_print_pt_type, (int c));
d282 1
a282 1
BU_EXTERN(struct face_g_snurb *rt_nurb_s_xsplit, (struct face_g_snurb *srf,
d284 1
a284 1
BU_EXTERN(struct edge_g_cnurb *rt_nurb_c_xsplit, (struct edge_g_cnurb *crv, fastf_t param));
d287 1
a287 1
BU_EXTERN(struct oslo_mat *rt_nurb_calc_oslo, (int order,
d290 2
a291 2
BU_EXTERN(void rt_nurb_pr_oslo, (struct oslo_mat *om));
BU_EXTERN(void rt_nurb_free_oslo, (struct oslo_mat *om, struct resource *res));
d294 1
a294 1
BU_EXTERN(void rt_nurb_map_oslo, (struct oslo_mat *oslo,
d300 1
a300 1
BU_EXTERN( int CrossingCount, (point2d_t *V, int degree, point2d_t ray_start,
d302 2
a303 2
BU_EXTERN( int ControlPolygonFlatEnough, (point2d_t *V, int degree, fastf_t epsilon ) );
BU_EXTERN( void Bezier, (point2d_t *V, int degree, double t,
d305 1
a305 1
BU_EXTERN( int FindRoots, (point2d_t *w, int degree, point2d_t **intercept, point2d_t **normal,
d308 1
a308 1
BU_EXTERN( struct bezier_2d_list *subdivide_bezier, (struct bezier_2d_list *bezier_hd, int degree,
@


14.3
log
@use perl to M-q format wrapping
@
text
@d4 1
a4 1
 * Copyright (c) 1991-2004 United States Government as represented by
d36 1
a36 1
 *  $Header: /cvs/brlcad/include/nurb.h,v 14.2 2004/12/21 06:06:39 butler Exp $
@


14.2
log
@LGPL license changes
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU Lesser General Public License
 * along with this file; see the file named COPYING for more
d36 1
a36 1
 *  $Header: /cvs/brlcad/include/nurb.h,v 14.1 2004/11/16 19:42:10 morrison Exp $
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			N U R B . H
d36 1
a36 5
 *  Copyright Notice -
 *	This software is Copyright (C) 1991-2004 by the United States Army.
 *	All rights reserved.
 *
 *  $Header: /cvs/brlcad/include/nurb.h,v 1.1 2004/05/24 04:10:50 morrison Exp $
@


1.1
log
@moved/renamed from top-level h/ to top-level include/
@
text
@d21 1
a21 1
 *  $Header$
d297 10
@

