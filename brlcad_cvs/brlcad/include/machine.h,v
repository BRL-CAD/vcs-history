head	14.37;
access;
symbols
	rel-7-10-4:14.29
	STABLE:14.29.0.2
	stable-branch:14.6
	rel-7-10-2:14.29
	rel-7-10-0:14.26
	rel-7-8-4:14.20
	rel-7-8-2:14.15
	rel-7-8-0:14.15
	trimnurbs-branch:14.15.0.2
	help:14.15
	temp_tag:14.14
	bobWinPort-20051223-freeze:14.10
	postmerge-20051223-bobWinPort:14.14
	premerge-20051223-bobWinPort:14.14
	rel-7-6-6:14.14
	rel-7-6-4:14.14
	rel-7-6-2:14.10
	rel-7-6-branch:14.10.0.4
	rel-7-6-0:14.10
	rel-7-4-2:14.9.2.1
	rel-7-4-branch:14.9.0.2
	bobWinPort:14.10.0.2
	rel-7-4-0:14.9
	rel-7-2-6:14.9
	rel-7-2-4:14.8
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.9
	rel-7-0-branch:1.9.0.2
	rel-7-0:1.9;
locks; strict;
comment	@ * @;


14.37
date	2007.12.31.17.34.41;	author brlcad;	state Exp;
branches;
next	14.36;

14.36
date	2007.12.17.07.54.11;	author brlcad;	state Exp;
branches;
next	14.35;

14.35
date	2007.12.17.02.16.53;	author brlcad;	state Exp;
branches;
next	14.34;

14.34
date	2007.12.17.01.42.31;	author brlcad;	state Exp;
branches;
next	14.33;

14.33
date	2007.12.16.16.02.04;	author brlcad;	state Exp;
branches;
next	14.32;

14.32
date	2007.12.16.15.31.45;	author brlcad;	state Exp;
branches;
next	14.31;

14.31
date	2007.11.27.21.47.32;	author brlcad;	state Exp;
branches;
next	14.30;

14.30
date	2007.10.22.20.59.55;	author brlcad;	state Exp;
branches;
next	14.29;

14.29
date	2007.05.26.02.08.01;	author brlcad;	state Exp;
branches;
next	14.28;

14.28
date	2007.05.26.01.45.04;	author brlcad;	state Exp;
branches;
next	14.27;

14.27
date	2007.05.14.16.39.14;	author brlcad;	state Exp;
branches;
next	14.26;

14.26
date	2007.01.27.01.01.40;	author brlcad;	state Exp;
branches;
next	14.25;

14.25
date	2007.01.23.01.13.20;	author brlcad;	state Exp;
branches;
next	14.24;

14.24
date	2007.01.21.04.45.40;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.01.20.14.36.40;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2006.12.29.05.12.03;	author lbutler;	state Exp;
branches;
next	14.21;

14.21
date	2006.11.14.18.05.07;	author erikgreenwald;	state Exp;
branches;
next	14.20;

14.20
date	2006.09.18.05.24.07;	author lbutler;	state Exp;
branches;
next	14.19;

14.19
date	2006.08.31.04.41.19;	author lbutler;	state Exp;
branches;
next	14.18;

14.18
date	2006.08.02.18.48.59;	author erikgreenwald;	state Exp;
branches;
next	14.17;

14.17
date	2006.07.29.21.49.18;	author lbutler;	state Exp;
branches;
next	14.16;

14.16
date	2006.07.10.19.06.22;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2006.01.18.06.46.10;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2005.10.21.14.35.58;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2005.10.21.14.16.38;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2005.10.13.14.38.11;	author d_rossberg;	state Exp;
branches;
next	14.11;

14.11
date	2005.09.15.03.40.09;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.07.29.16.53.31;	author d_rossberg;	state Exp;
branches
	14.10.4.1;
next	14.9;

14.9
date	2005.05.28.02.14.49;	author brlcad;	state Exp;
branches
	14.9.2.1;
next	14.8;

14.8
date	2005.04.26.20.21.36;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.04.26.07.41.11;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.04.11.18.32.26;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.30.10;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.07.18.56;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.06.23.18;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.06.06.38;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.10;	author morrison;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.20.19.36.47;	author morrison;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.16.15.02.49;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.15.14.39.09;	author kermit;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.15.13.48.20;	author kermit;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.15.13.44.08;	author kermit;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.03.20.42.29;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.25.04.09.17;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.30.45;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.24.04.10.50;	author morrison;	state Exp;
branches;
next	;

14.9.2.1
date	2005.08.16.21.03.44;	author brlcad;	state Exp;
branches;
next	;

14.10.4.1
date	2005.11.13.13.46.10;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.37
log
@c89 is assumed, remove the \!__STDC__ protections/sections
@
text
@/*                       M A C H I N E . H
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup fixme */
/** @@{ */
/** @@file machine.h
 *
 * @@brief
 *  This header file defines all the
 *	fundamental data types (lower case names, created with "typedef")
 *  and
 *	fundamental manifest constants (upper case, created with "#define")
 *  used throughout the BRL-CAD Package.  Virtually all other BRL-CAD
 *  header files depend on this header file being included first.
 *
 *  Many of these fundamental data types are machine (vendor) dependent.
 *  Some may assume different values on the same machine, depending on
 *  which version of the compiler is being used.
 *
 *  Additions will need to be made here when porting BRL-CAD to a new machine
 *  which is anything but a 32-bit big-endian uniprocessor.
 *
 *  General Symbols and Types Defined -
 *
 *      genptr_t - A portable way of declaring a "generic" pointer
 *      that is wide enough to point to anything, which can be used on
 *      both *ANSI C and K&R C environments.  On some machines,
 *      pointers to *functions can be wider than pointers to data
 *      bytes, so a declaration of "char*" isn't generic enough.
 *      DEPRECATED: use void* and char* pointers
 *
 *	fastf_t - Intended to be the fastest floating point data type
 *	on the current machine, with at least 64 bits of precision.
 *	On 16 and 32 bit machine, this is typically "double", but on
 *	64 bit machines, it is often "float".  Virtually all floating
 *	point variables (and more complicated data types, like vect_t
 *	and mat_t) are defined as fastf_t.  The one exception is when
 *	a subroutine return is a floating point value; that is always
 *	declared as "double".
 *      TODO: If used pervasively, it should eventually be possible to
 *      make fastf_t a GMP C++ type for fixed-precision computations.
 *
 *	HIDDEN - Functions intended to be local to one module should
 *	be declared HIDDEN.  For production use, and lint, it will be
 *	defined as "static", but for debugging it can be defined as
 *	NIL, so that the routine names can be made available to the
 *	debugger.
 *
 *	MAX_FASTF - Very close to the largest value that can be held
 *	by a fastf_t without overflow.  Typically specified as an
 *	integer power of ten, to make the value easy to spot when
 *	printed.
 *      TODO: macro function syntax instead of constant, move to libbn
 *      (DEPRECATED)
 *
 *	SQRT_MAX_FASTF - sqrt(MAX_FASTF), or slightly smaller.  Any
 *	number larger than this, if squared, can be expected to
 *	produce an overflow.
 *      TODO: macro function syntax instead of constant (DEPRECATED)
 *
 *	SMALL_FASTF - Very close to the smallest value that can be
 *	represented while still being greater than zero.  Any number
 *	smaller than this (and non-negative) can be considered to be
 *	zero; dividing by such a number can be expected to produce a
 *	divide-by-zero error.  All divisors should be checked against
 *	this value before actual division is performed.
 *      TODO: macro function sytax instead of constant (DEPRECATED)
 *
 *	SQRT_SMALL_FASTF -sqrt(SMALL_FASTF), or slightly larger.  The
 *	value of this is quite a lot larger than that of SMALL_FASTF.
 *	Any number smaller than this, when squared, can be expected to
 *	produce a zero result.
 *      TODO: macro function syntax instead of constant (DEPRECATED)
 *
 *	bitv_t - The widest fast integer type available, used to
 *	implement bit vectors.  On most machines, this is "long", but
 *	on some machines a vendor-specific type such as "long long"
 *	can give access to wider integers.
 *
 *	BITV_SHIFT - log2( bits_wide(bitv_t) ).  Used to determine how
 *	many bits of a bit-vector subscript are index-of-bit in bitv_t
 *	word, and how many bits of the subscript are for word index.
 *	On a 32-bit machine, BITV_SHIFT is 5.
 *      DEPRECATED: needs to be detected at run-time
 *
 *	XXX The BYTE_ORDER handling needs to change to match the POSIX
 *	XXX recommendations.
 *
 *  Parallel Computation Symbols -
 *
 *    These are used only for applications linked with LIBRT and
 *    LIBBU.  XXX These are likely to get new, more descriptive names
 *    sometime, consider them all DEPRECATED.
 *
 *	PARALLEL -
 *		When defined, the code is being compiled for a parallel processor.
 *		This has implications for signal handling, math library
 *		exception handling, etc.
 *
 *	MAX_PSW -
 *		The maximum number of processors that can be expected on
 *		this hardware.  Used to allocate application-specific
 *		per-processor tables.
 *		The actual number of processors is found at runtime by calling
 *		rt_avail_cpus().
 *              TODO: moving to a libbu function (DEPRECATED)
 *
 *	DEFAULT_PSW -
 *		The number of processors to use when the user has not
 *		specifically indicated the number of processors desired.
 *		On some machines like the Alliant, this should be MAX_PSW,
 *		because the parallel complex is allocated as a unit.
 *		On timesharing machines like the Cray, this should be 1,
 *		because running multi-tasking consumes special resources
 *		(and sometimes requires special queues/privs), so ordinary
 *		runs should just stay serial.
 *              TODO: moving to a libbu function (DEPRECATED)
 *
 *	MALLOC_NOT_MP_SAFE -
 *		Defined when the system malloc() routine can not be
 *		safely used in a multi-processor (MP) execution.
 *		If defined, LIBBU will protect with BU_SEM_SYSCALL.
 *              TODO: move to a configure test (DEPRECATED)
 */

#ifndef __MACHINE_H__
#define __MACHINE_H__

#include "common.h"

/* needed for FOPEN_MAX */
#include <stdio.h>


/*
 * Figure out the maximum number of files that can simultaneously be open
 * by a process.
 */

#if !defined(FOPEN_MAX) && defined(_NFILE)
#	define FOPEN_MAX	_NFILE
#endif
#if !defined(FOPEN_MAX) && defined(NOFILE)
#	define FOPEN_MAX	NOFILE
#endif
#if !defined(FOPEN_MAX) && defined(OPEN_MAX)
#	define FOPEN_MAX	OPEN_MAX
#endif
#if !defined(FOPEN_MAX) && defined(_SYS_OPEN)
#	define FOPEN_MAX	_SYS_OPEN
#endif
#if !defined(FOPEN_MAX)
#	define FOPEN_MAX	32
#endif

/**********************************
 *                                *
 *  Machine specific definitions  *
 *  Choose for maximum speed      *
 *				  *
 **********************************/


#ifdef _WIN32
/********************************
 *				*
 *  Windows Windows		*
 *				*
 ********************************/
typedef double fastf_t;
typedef long bitv_t;
#define BITV_SHIFT	5
/* assume only one processor for now */
#define MAX_PSW	4
#define DEFAULT_PSW	1
#define MALLOC_NOT_MP_SAFE 1

#endif /* _WIN32 */


#ifdef HEP
/********************************
 *				*
 *  Denelcor HEP H-1000		*
 *				*
 ********************************/
#define IBM_FLOAT 1		/* Uses IBM style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		128	/* Max number of process streams */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1
#endif


#if defined(__alpha)
/********************************
 *				*
 *	  DEC Alpha (AXP)	*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
#if !defined(LITTLE_ENDIAN)
	/* Often defined in <alpha/endian.h> */
#	define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
#endif
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#endif


#if defined(alliant) && !defined(i860)
/********************************
 *				*
 *	Alliant FX/8		*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		8	/* Max number of processors */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif


#if defined(alliant) && defined(i860)
/********************************
 *				*
 *	Alliant FX/2800		*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
#define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		28	/* Max number of processors */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif


#ifdef CRAY
/********************************
 *				*
 *  Cray-X/MP, COS or UNICOS	*
 *  Cray-2 under "UNICOS"	*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* Max number of processors */
#define DEFAULT_PSW	1
#define PARALLEL	1
#endif /* CRAY */

#if defined(convex) || defined(__convex__)
/********************************
 *				*
 *  Convex C1 & C2		*
 *				*
 ********************************/
typedef double		fastf_t;/* double|float, "Fastest" float type */
#if 1
typedef long long	bitv_t;	/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
#else
typedef long		bitv_t;
#define BITV_SHIFT	5
#endif

#define MAX_PSW		4	/* Max number of processors */
#define DEFAULT_PSW	1	/* for now */
#define PARALLEL	1
#endif

#ifdef ardent
/********************************
 *				*
 *  Stardent (formerly Ardent) 	*
 *  "Titan" Workstation		*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* # processors, max */
#define DEFAULT_PSW	1
#define PARALLEL	1
#endif

#ifdef __stardent
/********************************
 *				*
 *  Stardent VISTRA Workstation	*
 *  based on Intel i860 chip	*
 *				*
 ********************************/
#define __unix	1		/* It really is unix */
#define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#endif

#if	(defined(__sgi) && defined(__mips))
/* Strict ANSI C does not define CPP symbols that don't start with __ */
#	define sgi	1
#	define mips	1
#endif
#if	(defined(sgi) && defined(mips))
/********************************
 *				*
 *  SGI 4D, multi-processor	*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#if defined( _MIPS_SZLONG ) && _MIPS_SZLONG == 64
#  define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
#else
#  define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */
#endif
#define MAX_PSW		1024
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif

#ifdef apollo
/********************************
 *				*
 *  Apollo			*
 *  with SR 10			*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#define MALLOC_NOT_MP_SAFE 1

#endif


#ifdef n16
/********************************
 *				*
 *     Encore Multi-Max		*
 *				*
 ********************************/
#define IEEE_FLOAT	1	/* Uses IEEE style floating point */
#define LITTLE_ENDIAN	1	/* Under the influence of National Semiconductor */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		32	/* This number is uncertain */
#define DEFAULT_PSW	1
#define PARALLEL	1
#define MALLOC_NOT_MP_SAFE 1
#endif


#if defined(SUNOS) && SUNOS >= 50
/********************************
 *				*
 *   Sun Running Solaris 2.X    *
 *   aka SunOS 5.X              *
 *				*
 ********************************/

#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		256	/* need to increase this for Super Dragon? */
#define DEFAULT_PSW	bu_avail_cpus()
#define PARALLEL	1

#endif

#if defined(hppa)
/********************************
 *				*
 *   HP 9000/700                *
 *   Running HP-UX 9.1          *
 *				*
 ********************************/

#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */
#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#define MALLOC_NOT_MP_SAFE 1

#endif

#ifdef __APPLE__
#ifdef __ppc__
/********************************
 *                              *
 *      Macintosh PowerPC       *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
typedef long    bitv_t;         /* could use long long */
#define BITV_SHIFT      5       /* log2( bits_wide(bitv_t) ) */
#define MAX_PSW         512       /* Unused, but useful for thread debugging */
#define DEFAULT_PSW     bu_avail_cpus()	/* use as many as we can */
#define PARALLEL        1
/* #define MALLOC_NOT_MP_SAFE 1 -- not confirmed */
#endif
#if defined(__i686__) || defined(__i386__)
#define IEEE_FLOAT      1      /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
typedef long    bitv_t;         /* could use long long */
#define BITV_SHIFT      5      /* log2( bits_wide(bitv_t) ) */
#define MAX_PSW         512       /* Unused, but useful for thread debugging */
#define DEFAULT_PSW     bu_avail_cpus()	/* use as many as we can */
#define PARALLEL        1
#endif

#endif

#ifdef __sp3__
/********************************
 *                              *
 *      IBM SP3                 *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#if 1	/* Multi-CPU SP3 build */
#	define MAX_PSW		32     	/* they can go 32-way per single image */
#	define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are configured by default */
#	define	PARALLEL	1
#	define	MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */
#else	/* 1 CPU SP3 build */
#	define MAX_PSW		1	/* only one processor, max */
#	define DEFAULT_PSW	1
#endif

#endif

#ifdef __ia64__
/********************************
 *                              *
 *      SGI Altix               *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#if 1	/* Multi-CPU Altix build */
#	define DEFAULT_PSW	bu_avail_cpus()
#	define MAX_PSW		256
#	define	PARALLEL	1
#	define MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */
#else	/* 1 CPU Altix build */
#	define MAX_PSW		1	/* only one processor, max */
#	define DEFAULT_PSW	1
#	define MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */
#endif

#endif

/* TODO: should this be looking for solaris/sunos tags? */
#if defined(__sparc64__) && !defined(__FreeBSD__)
/********************************
 *                              *
 *      Sparc 64       		*
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
#define DEFAULT_PSW	bu_avail_cpus()
#define MAX_PSW		256
#define	PARALLEL	1
#define MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */

#endif


#if defined(linux) && defined(__x86_64__)
/********************************
 *                              *
 *      AMD Opteron Linux       *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
#define DEFAULT_PSW	bu_avail_cpus()
#define MAX_PSW		256
#define	PARALLEL	1
#define MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */

#endif

#if defined (linux) && !defined(__ia64__) && !defined(__x86_64__) && !defined(__sparc64__)
/********************************
 *                              *
 *        Linux on IA32         *
 *                              *
 ********************************/
#define IEEE_FLOAT      1      /* Uses IEEE style floating point */
#define BITV_SHIFT      5      /* log2( bits_wide(bitv_t) ) */

typedef double fastf_t;       /* double|float, "Fastest" float type */
typedef long bitv_t;          /* could use long long */

/*
 * Note that by default a Linux installation supports parallel using
 * pthreads. For a 1 cpu installation, toggle these blocks
 */
# if 1 /* multi-cpu linux build */

# define MAX_PSW         16
# define DEFAULT_PSW     bu_avail_cpus()	/* use as many processors as are available */
# define PARALLEL        1
# define MALLOC_NOT_MP_SAFE 1   /* uncertain, but this is safer for now */

# else  /* 1 CPU Linux build */

# define MAX_PSW        1	/* only one processor, max */
# define DEFAULT_PSW	1

# endif
#endif /* linux */


/********************************
 *                              *
 *    FreeBSD/NetBSD/OpenBSD    *
 *                              *
 ********************************/
#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
typedef double		fastf_t;	/* double|float, "Fastest" float type */
typedef long		bitv_t;		/* largest integer type */
# define IEEE_FLOAT	1		/* Uses IEEE style floating point */
# define DEFAULT_PSW	bu_avail_cpus()
# define	PARALLEL	1
# define MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */

/* amd64 */
# if defined(__x86_64__) || defined(__sparc64__) || defined(__ia64__)
#  define BITV_SHIFT	6
#  define MAX_PSW		256
/* ia32 */
# else
#  define BITV_SHIFT	5
#  define MAX_PSW	16
# endif
#endif /* BSD */

#ifndef BITV_SHIFT
/********************************
 *				*
 * Default 32-bit uniprocessor	*
 *  VAX, Gould, SUN, SGI	*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* allow for a dual core dual */
#define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are available by default */

#endif

/*
 *  Definitions for big-endian -vs- little-endian.
 *	BIG_ENDIAN:	Byte [0] is on left side of word (msb).
 *	LITTLE_ENDIAN:	Byte [0] is on right side of word (lsb).
 */
#ifdef vax
# define LITTLE_ENDIAN	1
#endif

#if !defined(BIG_ENDIAN) && !defined(LITTLE_ENDIAN)
# define BIG_ENDIAN	1	/* The common case */
#endif

/*  Bit vector mask */
#define BITV_MASK	((1<<BITV_SHIFT)-1)

/*
 * Definitions about limits of floating point representation
 * Eventually, should be tied to type of hardware (IEEE, IBM, Cray)
 * used to implement the fastf_t type.
 */
#if defined(vax) || (defined(sgi) && !defined(mips))
	/* DEC VAX "D" format, the most restrictive */
#define MAX_FASTF		1.0e37	/* Very close to the largest number */
#define SQRT_MAX_FASTF		1.0e18	/* This squared just avoids overflow */
#define SMALL_FASTF		1.0e-37	/* Anything smaller is zero */
#define SQRT_SMALL_FASTF	1.0e-18	/* This squared gives zero */
#else
	/* IBM format, being the next most restrictive format */
#define MAX_FASTF		1.0e73	/* Very close to the largest number */
#define SQRT_MAX_FASTF		1.0e36	/* This squared just avoids overflow */
#define SMALL_FASTF		1.0e-77	/* Anything smaller is zero */
#if defined(aux)
#  define SQRT_SMALL_FASTF	1.0e-40 /* _doprnt error in libc */
#else
#  define SQRT_SMALL_FASTF	1.0e-39	/* This squared gives zero */
#endif
#endif
#define SMALL			SQRT_SMALL_FASTF

/*
 *  Definition of a "generic" pointer that can hold a pointer to anything.
 *  According to tradition, a (char *) was generic, but the ANSI folks
 *  worry about machines where (int *) might be wider than (char *),
 *  so here is the clean way of handling it.
 */
#if !defined(GENPTR_NULL)
typedef void *genptr_t;
#  define GENPTR_NULL	((genptr_t)0)
#endif


/* Functions local to one file should be declared HIDDEN:  (nil)|static */
/* To aid in using ADB, generally leave this as nil. */
#if !defined(HIDDEN)
#  if defined(lint)
#    define HIDDEN	static
#  else
#    define HIDDEN	/***/
#  endif
#endif


/*
 *  ANSI and POSIX do not seem to have prototypes for the hypot() routine,
 *  but several vendors include it in their -lm math library.
 */
#if defined(_POSIX_SOURCE) && !defined(__USE_MISC)
	/* But the sgi -lm does have a hypot routine so lets use it */
#if defined(__sgi) || defined(__convexc__)
	extern double hypot(double, double);
#else
#  include <math.h>
#  define hypot(x,y)      sqrt( (x)*(x)+(y)*(y) )
#endif
#endif

#if defined(SUNOS) && SUNOS >= 52
#  include <math.h>
	extern double hypot(double, double);
#endif

#endif  /* __MACHINE_H__ */

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.36
log
@poof, make LOCAL go away entirely.  the deprecation instruction was wrong/bad -- LOCAL shouldn't go to static, it just goes away (so we get auto).
@
text
@d355 1
a355 1
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
d357 1
a357 1
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */
a358 2
#define const	const

a371 5
#if __STDC__
#define const	/**/		/* Does not support const keyword */
#define const	/**/		/* Does not support const keyword */
#endif

a400 11
#ifdef ipsc860
/********************************
 *				*
 *   Intel iPSC/860 Hypercube	*
 *				*
 ********************************/
/* icc compiler gets confused on const typedefs */
#define	const	/**/
#define	const	/**/
#define MALLOC_NOT_MP_SAFE 1
#endif
a432 4

#define const   /**/            /* Does not support const keyword */
#define const   /**/            /* Does not support const keyword */

d669 1
a669 5
#  if __STDC__
	typedef void	*genptr_t;
#  else
	typedef char	*genptr_t;
#  endif
d677 5
a681 5
# if defined(lint)
#	define HIDDEN	static
# else
#	define HIDDEN	/***/
# endif
@


14.35
log
@removal of the FAST declaration throughout.  now using register or letting the compiler sort things out.
@
text
@a58 6
 *	LOCAL - The fastest storage class for local variables within a
 *	subroutine.  On parallel machines, this needs to be "auto",
 *	but on serial machines there can sometimes be a performance
 *	advantage to using "static".
 *      DEPRECATED: use static
 *
a186 1
#define LOCAL auto
a204 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a225 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a241 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a260 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a278 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a293 1
#define LOCAL		auto	/* static|auto, for serial|parallel cpu */
a314 1
#define LOCAL	auto		/* for parallel cpus */
a332 1
#define LOCAL	auto		/* for parallel cpus */
a352 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a379 1
#define LOCAL	static		/* static|auto, for serial|parallel cpu */
a398 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a429 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a448 1
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
a469 1
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
a479 1
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
a496 1
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
a519 1
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
a544 1
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
a562 1
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
a589 1
# define LOCAL auto             /* static|auto, for serial|parallel cpu */
a596 1
# define LOCAL static		/* static|auto, for serial|parallel cpu */
a615 1
# define LOCAL		auto		/* static|auto, for serial|parallel cpu */
d628 1
a628 1
#ifndef LOCAL
a635 1
#define LOCAL	static		/* static|auto, for serial|parallel cpu */
@


14.34
log
@BOOL_T isn't even used any more
@
text
@d45 2
a46 2
 *      bytes, so a declaration *of "char *" isn't generic enough.
 *      DEPRECATED: use void/char *pointers
a64 8
 *	FAST - The fastest storage class for fastf_t variables.  On
 *	most machines with abundant registers, this is "register", but
 *	on machines like the VAX with only 3 "register double"s
 *	available to C programmers, it is set to LOCAL.  Thus,
 *	declaring a fast temporary fastf_t variable is done like: FAST
 *	fastf_t var;
 *      DEPRECATED: use register or leave it up to compiler
 *
a193 1
#define FAST register
a212 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a234 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a251 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a271 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a290 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a306 1
#define FAST		register /* LOCAL|register, for fastest floats */
a328 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a347 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a368 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a396 1
#define FAST	LOCAL		/* LOCAL|register, for fastest floats */
a416 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a448 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a468 1
#define FAST	register	/* LOCAL|register, for fastest floats */
a490 1
#define FAST    register        /* LOCAL|register, for fastest floats */
a501 1
#define FAST    register        /* LOCAL|register, for fastest floats */
a519 1
#define FAST    register        /* LOCAL|register, for fastest floats */
a543 1
#define FAST    register        /* LOCAL|register, for fastest floats */
a569 1
#define FAST    register        /* LOCAL|register, for fastest floats */
a588 1
#define FAST    register        /* LOCAL|register, for fastest floats */
a616 1
# define FAST register          /* LOCAL|register, for fastest floats */
a624 1
# define FAST LOCAL		/* LOCAL|register, for fastest floats */
a640 1
# define FAST		register	/* LOCAL|register, for fastest floats */
a665 1
#define FAST	LOCAL		/* LOCAL|register, for fastest floats */
@


14.33
log
@fully remove the bzero/bcopy section
@
text
@a761 6
/* Even in C++ not all compilers know the "bool" keyword yet */
#if !defined(BOOL_T)
#  define BOOL_T int
#endif


@


14.32
log
@bzero is POSIX.1, memset is c90 -- pick the latter for now and remove bzero from machine.h
@
text
@a104 5
 *	bcopy(from,to,n) - Defined to be the fastest system-specific
 *	method for copying a block of 'n' bytes, where both the "from"
 *	and "to" pointers have arbitrary byte alignment.
 *      DEPRECATED: use memcpy, make sure they don't overlap(!)
 *
a767 6
/** provide bzero and bcopy */
#if !defined(bzero) && !defined(HAVE_BZERO)
#  include <string.h>
#  define bcopy(from,to,count)	memcpy( to, from, count )
#endif

d778 1
@


14.31
log
@comment on the extensive DEPRECATED nature of the defines, types, and values provided by this file indicating whether it's a symbols that's going away, turning into a compile- or run-time check, or simply moving somewhere else.  ultimately, this entire header should get absorbed into other headers (particularly those of libbu), though the method differs for each symbol.
@
text
@a104 5
 *	bzero(ptr,n) - Defined to be the fasted system-specific method
 *	for zeroing a block of 'n' bytes, where the pointer has
 *	arbitrary byte alignment.
 *      DEPRECATED: use memset
 *
a775 1
#  define bzero(str,n)		memset( str, 0, n )
@


14.30
log
@the old cray cos and unicos code for the cray xmp and friends finally became a burden to maintain while resolving various flawfinder issues.  remove the old code, particularly that which wasn't __STDC__.  however, intentionally leave the code for calculating byteoffsets and converting float formats to/from network order .. could still come in handy at some point down the road.
@
text
@d41 84
a124 85
 *      genptr_t -
 *		A portable way of declaring a "generic" pointer that is
 *		wide enough to point to anything, which can be used on
 *		both ANSI C and K&R C environments.
 *		On some machines, pointers to functions can be wider than
 *		pointers to data bytes, so a declaration of "char *"
 *		isn't generic enough.
 *
 *	fastf_t -
 *		Intended to be the fastest floating point data type on
 *		the current machine, with at least 64 bits of precision.
 *		On 16 and 32 bit machine, this is typically "double",
 *		but on 64 bit machines, it is often "float".
 *		Virtually all floating point variables (and more complicated
 *		data types, like vect_t and mat_t) are defined as fastf_t.
 *		The one exception is when a subroutine return is a floating
 *		point value;  that is always declared as "double".
 *
 *	LOCAL -
 *		The fastest storage class for local variables within a
 *		subroutine.  On parallel machines, this needs to be "auto",
 *		but on serial machines there can sometimes be a performance
 *		advantage to using "static".
 *
 *	FAST -
 *		The fastest storage class for fastf_t variables.
 *		On most machines with abundant registers, this is "register",
 *		but on machines like the VAX with only 3 "register double"s
 *		available to C programmers, it is set to LOCAL.
 *		Thus, declaring a fast temporary fastf_t variable is done like:
 *			FAST fastf_t var;
 *
 *	HIDDEN -
 *		Functions intended to be local to one module should be
 *		declared HIDDEN.  For production use, and lint, it will
 *		be defined as "static", but for debugging it can be defined
 *		as NIL, so that the routine names can be made available
 *		to the debugger.
 *
 *	MAX_FASTF -
 *		Very close to the largest value that can be held by a
 *		fastf_t without overflow.  Typically specified as an
 *		integer power of ten, to make the value easy to spot when
 *		printed.
 *
 *	SQRT_MAX_FASTF -
 *		sqrt(MAX_FASTF), or slightly smaller.  Any number larger than
 *		this, if squared, can be expected to produce an overflow.
 *
 *	SMALL_FASTF -
 *		Very close to the smallest value that can be represented
 *		while still being greater than zero.  Any number smaller
 *		than this (and non-negative) can be considered to be
 *		zero;  dividing by such a number can be expected to produce
 *		a divide-by-zero error.
 *		All divisors should be checked against this value before
 *		actual division is performed.
 *
 *	SQRT_SMALL_FASTF -
 *		sqrt(SMALL_FASTF), or slightly larger.  The value of this
 *		is quite a lot larger than that of SMALL_FASTF.
 *		Any number smaller than this, when squared, can be expected
 *		to produce a zero result.
 *
 *	bzero(ptr,n) -
 *		Defined to be the fasted system-specific method for
 *		zeroing a block of 'n' bytes, where the pointer has
 *		arbitrary byte alignment.
 *
 *	bcopy(from,to,n) -
 *		Defined to be the fastest system-specific method for
 *		copying a block of 'n' bytes, where both the "from" and
 *		"to" pointers have arbitrary byte alignment.
 *
 *	bitv_t -
 *		The widest fast integer type available, used to implement bit
 *		vectors.  On most machines, this is "long", but on some
 *		machines a vendor-specific type such as "long long" can
 *		give access to wider integers.
 *
 *	BITV_SHIFT -
 *		log2( bits_wide(bitv_t) ).  Used to determine how many
 *		bits of a bit-vector subscript are index-of-bit in bitv_t
 *		word, and how many bits of the subscript are for word index.
 *		On a 32-bit machine, BITV_SHIFT is 5.
d129 5
a133 4
 *  PARALLEL Symbols Defined -
 *    These are used only for applications linked with LIBRT,
 *    and interact heavily with the support routines in librt/machine.c
 *    XXX These are likely to get new, more descriptive names sometime.
d146 1
d157 1
d163 1
a163 10
 *
 *  @@author
 *	Michael John Muuss
 *
 *  @@par Source
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 *  Libraries Used -
 *	LIBBU LIBBU_LIBES -lm -lc
@


14.29
log
@clean up the header protections so that they are all now more consistent with one another via use of __HEADER_H__ for the define names.
@
text
@d328 1
a328 5

#  if 0
#	define CRAY_COS	1	/* Running on Cray under COS w/bugs */
#  endif
#endif
@


14.28
log
@get rid of RCS variables from the public header files.  this is done in part to reduce recompilation during interface changes, but also to move towards not relying on or publishing the information contained in the variables interface-wise. (they're fine for c sources and private headers)
@
text
@d173 2
a174 2
#ifndef MACHINE_H
#define MACHINE_H seen
d825 2
a826 1
#endif  /* MACHINE_H */
@


14.27
log
@rtlist.h and rtstring.h are no longer relevant -- warn that they are obsolete (to be removed in a future minor rev)
@
text
@a170 2
 *
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.26 2007/01/27 01:01:40 brlcad Exp $
@


14.26
log
@ws, test three
@
text
@a168 5
 *
 *  Include Sequencing -
 *	# include "machine.h"
 *@@n	# include "bu.h"
 *
d172 1
a172 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.25 2007/01/23 01:13:20 brlcad Exp $
@


14.25
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d177 1
a177 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.24 2007/01/21 04:45:40 brlcad Exp $
d695 1
a695 1
#if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) 
d820 1
a820 1
        extern double hypot(double, double);
d829 1
a829 1
        extern double hypot(double, double);
a842 1

@


14.24
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d177 1
a177 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.23 2007/01/20 14:36:40 brlcad Exp $
@


14.23
log
@update copyright to 2007
@
text
@d22 1
a22 1
/*@@{*/
d24 2
a25 1
 *@@brief
d178 1
a178 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.22 2006/12/29 05:12:03 lbutler Exp $
d834 1
a834 1
/*@@}*/
@


14.22
log
@raytrace and bu got comment updates
machine.h now supports dual cpu's on Intel based Mac machines
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d177 1
a177 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.21 2006/11/14 18:05:07 erikgreenwald Exp $
@


14.21
log
@fix for fbsd7/sparc64 (hopefully)
@
text
@d177 1
a177 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.20 2006/09/18 05:24:07 lbutler Exp $
d549 1
a549 1
#ifdef __i686__
@


14.20
log
@Doxygen updates
@
text
@d177 1
a177 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.19 2006/08/31 04:41:19 lbutler Exp $
d614 2
a615 1
#if defined(__sparc64__)
d706 1
a706 1
# if defined(__x86_64__)
d710 1
a710 1
# elif !defined(__ia64__) && !defined(__x86_64__) && !defined(__sparc64__)
@


14.19
log
@miscelaneous changes to support doxygen
@
text
@d21 2
d24 1
a24 1
 *
a25 1
 *
a26 1
 *
a27 1
 *
a28 1
 *
d41 1
a41 1
 *	genptr_t -
d162 1
a162 1
 *  Author -
d165 1
a165 1
 *  Source -
d172 1
a172 1
 *	# include "bu.h"
d177 1
a177 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.18 2006/08/02 18:48:59 erikgreenwald Exp $
d832 1
a832 1

d842 1
@


14.18
log
@adding {free,open,net}bsd to the ugly hackery
@
text
@d173 2
a174 2
 *	#include "machine.h"
 *	#include "bu.h"
d179 1
a179 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.17 2006/07/29 21:49:18 lbutler Exp $
@


14.17
log
@changes to support Intel Mac parallel code
@
text
@d179 1
a179 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.16 2006/07/10 19:06:22 brlcad Exp $
d690 27
@


14.16
log
@refactor away the old BSD block defines among other simple cleanup
@
text
@d179 1
a179 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.15 2006/01/18 06:46:10 brlcad Exp $
d533 1
d551 13
@


14.15
log
@update copyright to 2006
@
text
@d110 1
a110 1
 *		arbitrary byte alignment.  BSD semantics.
d115 1
a115 1
 *		"to" pointers have arbitrary byte alignment.  BSD semantics.
d179 1
a179 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.14 2005/10/21 14:35:58 brlcad Exp $
a748 5
/* A portable way of handling pre-ANSI C: remove const and signed keyword */
#if !defined(__STDC__)
#  define	const	/**/
#  define	signed	/**/
#endif
d752 1
a752 1
# define BOOL_T	int
d756 2
a757 4
/*
 *  Some very common BSD --> SYSV conversion aids
 */
#if defined(SYSV) && !defined(bzero) && !defined(HAVE_BZERO)
@


14.14
log
@needed for FOPEN_MAX
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d179 1
a179 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.13 2005/10/21 14:16:38 brlcad Exp $
@


14.13
log
@machine.h apparently requires stdio.h so migrate towards self-describing headers (even though machine.h is going away soon)
@
text
@a172 2
 *	#include <stdio.h>
 *	#include <math.h>
d179 1
a179 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.12 2005/10/13 14:38:11 d_rossberg Exp $
d187 1
a187 1
/* reportedly needed, but not clear why */
@


14.12
log
@_SYS_OPEN is an anchestor of FOPEN_MAX too
@
text
@d181 1
a181 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.11 2005/09/15 03:40:09 brlcad Exp $
d187 6
d767 3
a769 2
#	define bzero(str,n)		memset( str, 0, n )
#	define bcopy(from,to,count)	memcpy( to, from, count )
d791 2
a792 1
#	define hypot(x,y)      sqrt( (x)*(x)+(y)*(y) )
d797 1
@


14.11
log
@remove the deprecated CONST and SIGNED defines
@
text
@d181 1
a181 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.10 2005/07/29 16:53:31 d_rossberg Exp $
d201 3
@


14.10
log
@if you don't wont PARALLEL do not define it
@
text
@a42 4
 *	CONST  - deprecated - (use const)
 *		A portable way of indicating that the ANSI C "const"
 *		keyword is desired, when compiling on an ANSI compiler.
 *
a50 5
 *	SIGNED - deprecated - (use signed)
 *		A portable way of declaring a signed variable, since
 *		the "signed" keyword is not known in K&R compilers.  e.g.:
 *			register SIGNED int twoway;
 *
d181 1
a181 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.9 2005/05/28 02:14:49 brlcad Exp $
d742 1
a742 1
/* A portable way of handling pre-ANSI C: remove const keyword */
d745 1
a746 4
#if defined(CONST)
#  undef  CONST
#endif
#define CONST deprecated
a752 8
/* A portable way of handling pre-ANSI C: remove signed keyword */
#if !defined(__STDC__)
#  define	signed	/**/
#endif
#if defined(SIGNED)
#  undef SIGNED
#endif
#define SIGNED deprecated
@


14.10.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d43 4
d55 5
d182 2
d190 1
a190 1
 *  $Header$
a195 6
#include "common.h"

/* needed for FOPEN_MAX */
#include <stdio.h>


a209 3
#if !defined(FOPEN_MAX) && defined(_SYS_OPEN)
#	define FOPEN_MAX	_SYS_OPEN
#endif
d751 1
a751 1
/* A portable way of handling pre-ANSI C: remove const and signed keyword */
a753 1
#  define	signed	/**/
d755 4
d765 8
d778 2
a779 3
#  include <string.h>
#  define bzero(str,n)		memset( str, 0, n )
#  define bcopy(from,to,count)	memcpy( to, from, count )
d801 1
a801 2
#  include <math.h>
#  define hypot(x,y)      sqrt( (x)*(x)+(y)*(y) )
a805 1
#  include <math.h>
@


14.9
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d179 1
a179 1
 *  
d190 1
a190 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.8 2005/04/26 20:21:36 brlcad Exp $
d197 1
a197 1
 * Figure out the maximum number of files that can simultaneously be open 
d228 4
a231 4
typedef double fastf_t;	
#define LOCAL auto	
#define FAST register	
typedef long bitv_t;	
a235 1
#define PARALLEL	0
d511 1
a511 1
#if defined(hppa) 
d692 1
a692 1
#define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are available by default */ 
@


14.9.2.1
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@d179 1
a179 1
 *
d190 1
a190 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.10 2005/07/29 16:53:31 d_rossberg Exp $
d197 1
a197 1
 * Figure out the maximum number of files that can simultaneously be open
d228 4
a231 4
typedef double fastf_t;
#define LOCAL auto
#define FAST register
typedef long bitv_t;
d236 1
d512 1
a512 1
#if defined(hppa)
d693 1
a693 1
#define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are available by default */
@


14.8
log
@disable PARALLEL on windows again until the appropriate win32 calls can be added to parallel.c/semaphore.c in libbu, not enough to rely on cygwin's pthreading wrapping
@
text
@d190 1
a190 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.7 2005/04/26 07:41:11 brlcad Exp $
d222 1
a222 1
#ifdef WIN32
d239 1
a239 1
#endif /* WIN32 */
@


14.7
log
@Turn on SMP support for Windows, get rid of the cruft
@
text
@d190 1
a190 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.6 2005/04/11 18:32:26 brlcad Exp $
d236 1
a236 1
#define PARALLEL	1
@


14.6
log
@add explicit build support for sparc64
@
text
@d190 1
a190 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.5 2005/01/30 20:30:10 brlcad Exp $
a235 1
#if 0
a236 1
#endif
d239 1
a239 13
#if 0
#define const const
#define CONST const	 
#define IEEE_FLOAT 	1
#define LITTLE_ENDIAN	1
#define MAX_FASTF	1.00E+74
#define SQRT_MAX_FASTF	1.00E+37
#define SMALL_FASTF	1.00E-74
#define SQRT_SMALL_FASTF	1.00E-37
#define SMALL SQRT_SMALL_FASTF
#define hypot _hypot
#endif
#endif
@


14.5
log
@update copyright to 2005
@
text
@d190 1
a190 1
 *  $Header: /cvsroot/brlcad/brlcad/include/machine.h,v 14.4 2004/12/21 07:18:56 morrison Exp $
d619 20
d658 1
a658 1
#if defined (linux) && !defined(__ia64__) && !defined(__x86_64__)
@


14.4
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d190 1
a190 1
 *  $Header: /cvs/brlcad/include/machine.h,v 14.3 2004/12/21 06:23:18 morrison Exp $
@


14.3
log
@use perl to M-q format wrapping
@
text
@a179 2
 *  Distribution Status -
 *	This file is public domain, distribution unlimited.
d190 1
a190 1
 *  $Header: /cvs/brlcad/include/machine.h,v 14.2 2004/12/21 06:06:38 butler Exp $
@


14.2
log
@LGPL license changes
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU Lesser General Public License
 * along with this file; see the file named COPYING for more
d192 1
a192 1
 *  $Header: /cvs/brlcad/include/machine.h,v 14.1 2004/11/16 19:42:10 morrison Exp $
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			M A C H I N E . H
d192 1
a192 1
 *  $Header: /cvs/brlcad/include/machine.h,v 1.9 2004/09/20 19:36:47 morrison Exp $
@


1.9
log
@add the linux on an amd opteron
@
text
@d173 1
a173 1
 *  $Header: /cvs/brlcad/include/machine.h,v 1.8 2004/09/16 15:02:49 morrison Exp $
d788 10
@


1.8
log
@make the altix crashes stop: altix is a 64-bit box, so it needs to 6 bits for the BITV_SHIFT.  not sure about malloc so just disable for now.
@
text
@d173 1
a173 1
 *  $Header: /cvs/brlcad/include/machine.h,v 1.7 2004/09/15 14:39:09 kermit Exp $
d602 20
a621 1
#if defined (linux) && !defined(__ia64__)
@


1.7
log
@Added check to linux section to differentiate it from ia64 on Altix.
@
text
@d173 1
a173 1
 *  $Header: /cvs/brlcad/include/machine.h,v 1.6 2004/09/15 13:48:20 kermit Exp $
d587 1
a587 1
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */
d589 2
a590 1
#if 0	/* Multi-CPU Altix build */
d593 1
a593 1
#	define	MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */
d597 1
@


1.6
log
@Use actual Altix cpp define (cake is no more).
@
text
@d173 1
a173 1
 *  $Header: /cvs/brlcad/include/machine.h,v 1.5 2004/09/15 13:44:08 kermit Exp $
d600 1
a600 1
#ifdef linux
@


1.5
log
@Preliminary machine block for SGI Altix.
@
text
@d173 1
a173 1
 *  $Header: /cvs/brlcad/include/machine.h,v 1.4 2004/08/03 20:42:29 morrison Exp $
d576 1
a576 1
#ifdef __altix__
@


1.4
log
@apply Bob's provided patches from 20040630.  this includes itcl namespace scoping, windows DLL exporting, and wdb arb edit support
@
text
@d173 1
a173 1
 *  $Header: /cvs/brlcad/include/machine.h,v 1.2 2004/06/08 19:30:45 morrison Exp $
d570 24
@


1.3
log
@remove the horrible and temporary hack now
@
text
@d173 1
a173 1
 *  $Header: /n/xoff/cvs/brlcad/include/machine.h,v 1.2 2004/06/08 19:30:45 morrison Exp $
d216 1
a216 1
// assume only one processor for now
d219 1
d221 1
d223 13
@


1.2
log
@HAS_POSIX_THREADS define is no more
@
text
@a0 4
#ifndef CONF_H
#include "conf.h"  /* Horrible but temporary hack to get things to compile */
#endif

d173 1
a173 1
 *  $Header: /n/xoff/cvs/brlcad/include/machine.h,v 1.1 2004/05/24 04:10:50 morrison Exp $
@


1.1
log
@moved/renamed from top-level h/ to top-level include/
@
text
@d177 1
a177 1
 *  $Header$
a556 1
#	define	HAS_POSIX_THREADS	1
a587 1
# define HAS_POSIX_THREADS 1    /* formerly in conf.h */
@

