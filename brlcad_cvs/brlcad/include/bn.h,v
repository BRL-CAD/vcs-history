head	14.33;
access;
symbols
	rel-7-10-4:14.31
	STABLE:14.31.0.2
	stable-branch:14.6
	rel-7-10-2:14.29
	rel-7-10-0:14.24
	rel-7-8-4:14.20
	rel-7-8-2:14.12
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.6
	rel-7-6-0:14.9
	rel-7-4-2:14.9
	rel-7-4-branch:14.9.0.4
	bobWinPort:14.9.0.2
	rel-7-4-0:14.9
	rel-7-2-6:14.9
	rel-7-2-4:14.8
	rel-7-2-2:14.6
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.6
	rel-7-0-branch:1.6.0.2
	rel-7-0:1.6;
locks; strict;
comment	@ * @;


14.33
date	2007.12.17.02.16.53;	author brlcad;	state Exp;
branches;
next	14.32;

14.32
date	2007.12.13.20.01.11;	author brlcad;	state Exp;
branches;
next	14.31;

14.31
date	2007.09.07.21.04.31;	author erikgreenwald;	state Exp;
branches;
next	14.30;

14.30
date	2007.08.30.18.44.26;	author erikgreenwald;	state Exp;
branches;
next	14.29;

14.29
date	2007.06.28.15.48.21;	author brlcad;	state Exp;
branches;
next	14.28;

14.28
date	2007.05.26.02.07.59;	author brlcad;	state Exp;
branches;
next	14.27;

14.27
date	2007.05.26.01.45.01;	author brlcad;	state Exp;
branches;
next	14.26;

14.26
date	2007.05.19.00.46.19;	author brlcad;	state Exp;
branches;
next	14.25;

14.25
date	2007.04.16.21.15.35;	author brlcad;	state Exp;
branches;
next	14.24;

14.24
date	2007.01.27.01.01.39;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.01.23.01.13.19;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.01.21.04.45.40;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.01.20.14.36.40;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2006.09.26.00.10.44;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2006.09.18.05.24.07;	author lbutler;	state Exp;
branches;
next	14.18;

14.18
date	2006.09.07.01.19.17;	author lbutler;	state Exp;
branches;
next	14.17;

14.17
date	2006.09.04.04.43.31;	author lbutler;	state Exp;
branches;
next	14.16;

14.16
date	2006.09.03.15.16.20;	author lbutler;	state Exp;
branches;
next	14.15;

14.15
date	2006.08.31.04.41.19;	author lbutler;	state Exp;
branches;
next	14.14;

14.14
date	2006.08.01.15.02.54;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.07.06.19.35.17;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.06.07.15.02.02;	author d_rossberg;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.10;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.26;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.05.28.02.14.49;	author brlcad;	state Exp;
branches
	14.9.6.1;
next	14.8;

14.8
date	2005.05.08.05.27.57;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.05.04.04.05.59;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.03.28.05.17.14;	author bob1961;	state Exp;
branches;
next	14.5;

14.5
date	2005.03.24.16.25.41;	author bob1961;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.30.10;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.06.23.18;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.06.06.38;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.10;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.04.14.00.44;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.03.20.42.29;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.09.51;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.25.04.12.21;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.09.14.19.56;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.24.04.10.49;	author morrison;	state Exp;
branches;
next	;

14.9.6.1
date	2005.11.13.13.46.09;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.33
log
@removal of the FAST declaration throughout.  now using register or letting the compiler sort things out.
@
text
@/*                            B N . H
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup libbn */
/** @@{ */
/** @@file bn.h
 *
 *  Header file for the BRL-CAD Numerical Computation Library, LIBBN.
 *
 *  The library provides a broad assortment of numerical algorithms
 *  and computational routines, including random number generation,
 *  vector math, matrix math, quaternion math, complex math,
 *  synthetic division, root finding, etc.
 *
 *  Include Sequencing -
@@code
	# include "common.h"
	# include <stdio.h>
	# include <math.h>
	# include "machine.h"	/_* For fastf_t definition on this machine *_/
	# include "bn.h"
@@endcode
 *
 */

#ifndef __BN_H__
#define __BN_H__

#include "common.h"

__BEGIN_DECLS

/* interface headers */
#include "machine.h"	/* required for fastf_t */
#include "bu.h"		/* required for BU_EXTERN, BU_CKMAG */
#include "vmath.h"	/* required for mat_t, vect_t */


#ifndef BN_EXPORT
#  if defined(_WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#    ifdef BN_EXPORT_DLL
#      define BN_EXPORT __declspec(dllexport)
#    else
#      define BN_EXPORT __declspec(dllimport)
#    endif
#  else
#    define BN_EXPORT
#  endif
#endif

#define BN_AZIMUTH 0
#define BN_ELEVATION 1
#define BN_TWIST 2
/** @@} */

/** @@addtogroup tol */
/** @@{ */
/**			B N _ T O L
 *
 * @@brief Support for uniform tolerances
 *
 *  A handy way of passing around the tolerance information needed to
 *  perform approximate floating-point calculations on geometry.
 *
 *  dist & dist_sq establish the distance tolerance.
 *
 *	If two points are closer together than dist, then they are to
 *	be considered the same point.
 *	For example:
@@code
		point_t	a,b;
		vect_t	diff;
		VSUB2( diff, a, b );
		if( MAGNITUDE(diff) < tol->dist )	a & b are the same.
	or, more efficiently:
		if( MAQSQ(diff) < tol->dist_sq )
@@endcode
 *  perp & para establish the angular tolerance.
 *
 *	If two rays emanate from the same point, and their dot product
 *	is nearly one, then the two rays are the same, while if their
 *	dot product is nearly zero, then they are perpendicular.
 *	For example:
@@code
		vect_t	a,b;
		if( fabs(VDOT(a,b)) >= tol->para )	a & b are parallel
		if( fabs(VDOT(a,b)) <= tol->perp )	a & b are perpendicular
@@endcode
 *
 *  @@note
 *	tol->dist_sq = tol->dist * tol->dist;
 *@@n	tol->para = 1 - tol->perp;
 */
struct bn_tol {
	unsigned long	magic;
	double		dist;			/**< @@brief >= 0 */
	double		dist_sq;		/**< @@brief dist * dist */
	double		perp;			/**< @@brief nearly 0 */
	double		para;			/**< @@brief nearly 1 */
};
#define BN_TOL_MAGIC	0x98c734bb
#define BN_CK_TOL(_p)	BU_CKMAG(_p, BN_TOL_MAGIC, "bn_tol")

#define	BN_VECT_ARE_PARALLEL(_dot,_tol)		\
	(((_dot) < 0) ? ((-(_dot))>=(_tol)->para) : ((_dot) >= (_tol)->para))
#define BN_VECT_ARE_PERP(_dot,_tol)		\
	(((_dot) < 0) ? ((-(_dot))<=(_tol)->perp) : ((_dot) <= (_tol)->perp))

#define BN_APPROXEQUAL(_a, _b, _tol) (fabs( (_a) - (_b) ) <= _tol->dist)
/** @@} */
/*----------------------------------------------------------------------*/
/* anim.c */
/** @@addtogroup anim */
/** @@{ */
/* XXX These should all have bn_ prefixes */
BN_EXPORT BU_EXTERN(void anim_v_permute,
		    (mat_t m));
BN_EXPORT BU_EXTERN(void anim_v_unpermute,
		    (mat_t m));
BN_EXPORT BU_EXTERN(void anim_tran,
		    (mat_t m));
BN_EXPORT BU_EXTERN(int anim_mat2zyx,
		    (const mat_t viewrot,
		     vect_t angle));
BN_EXPORT BU_EXTERN(int anim_mat2ypr,
		    (mat_t viewrot,
		     vect_t angle));
BN_EXPORT BU_EXTERN(int anim_mat2quat,
		    (quat_t quat,
		     const mat_t viewrot));
BN_EXPORT BU_EXTERN(void anim_ypr2mat,
		    (mat_t m,
		     const vect_t a));
BN_EXPORT BU_EXTERN(void anim_ypr2vmat,
		    (mat_t m,
		     const vect_t a));
BN_EXPORT BU_EXTERN(void anim_y_p_r2mat,
		    (mat_t m,
		     double y,
		     double p,
		     double r));
BN_EXPORT BU_EXTERN(void anim_dy_p_r2mat,
		    (mat_t m,
		     double y,
		     double p,
		     double r));
BN_EXPORT BU_EXTERN(void anim_dy_p_r2vmat,
		    (mat_t m,
		     double yaw,
		     double pch,
		     double rll));
BN_EXPORT BU_EXTERN(void anim_x_y_z2mat,
		    (mat_t m,
		     double x,
		     double y,
		     double z));
BN_EXPORT BU_EXTERN(void anim_dx_y_z2mat,
		    (mat_t m,
		     double x,
		     double y,
		     double z));
BN_EXPORT BU_EXTERN(void anim_zyx2mat,
		    (mat_t m,
		     const vect_t a));
BN_EXPORT BU_EXTERN(void anim_z_y_x2mat,
		    (mat_t m,
		     double x,
		     double y,
		     double z));
BN_EXPORT BU_EXTERN(void anim_dz_y_x2mat,
		    (mat_t m,
		     double x,
		     double y,
		     double z));
BN_EXPORT BU_EXTERN(void anim_quat2mat,
		    (mat_t m,
		     const quat_t qq));
BN_EXPORT BU_EXTERN(void anim_dir2mat,
		    (mat_t m,
		     const vect_t d,
		     const vect_t d2));
BN_EXPORT BU_EXTERN(void anim_dirn2mat,
		    (mat_t m,
		     const vect_t dx,
		     const vect_t dn));
BN_EXPORT BU_EXTERN(int anim_steer_mat,
		    (mat_t  mat,
		     vect_t point,
		     int end));
BN_EXPORT BU_EXTERN(void anim_add_trans,
		    (mat_t m,
		     const vect_t post,
		     const vect_t pre));
BN_EXPORT BU_EXTERN(void anim_rotatez,
		    (fastf_t a,
		     vect_t d));
BN_EXPORT BU_EXTERN(void anim_mat_print,
		    (FILE *fp,
		     const mat_t m,
		     int s_colon));
BN_EXPORT BU_EXTERN(void anim_mat_printf,
		    (FILE *fp,
		     const mat_t m,
		     const char *formstr,
		     const char *linestr,
		     const char *endstr));
BN_EXPORT BU_EXTERN(void anim_view_rev,
		    (mat_t m));


/*----------------------------------------------------------------------*/
/* bn_tcl.c */
BN_EXPORT BU_EXTERN(int bn_decode_mat,
		    (mat_t m,
		     const char *str));
BN_EXPORT BU_EXTERN(int bn_decode_quat,
		    (quat_t q,
		     const char *str));
BN_EXPORT BU_EXTERN(int bn_decode_vect,
		    (vect_t v,
		     const char *str));
BN_EXPORT BU_EXTERN(int bn_decode_hvect,
		    (hvect_t v,
		     const char *str));
BN_EXPORT BU_EXTERN(void bn_encode_mat,
		    (struct bu_vls *vp,
		     const mat_t m));
BN_EXPORT BU_EXTERN(void bn_encode_quat,
		    (struct bu_vls *vp,
		     const quat_t q));
BN_EXPORT BU_EXTERN(void bn_encode_vect,
		    (struct bu_vls *vp,
		     const vect_t v));
BN_EXPORT BU_EXTERN(void bn_encode_hvect,
		    (struct bu_vls *vp,
		     const hvect_t v));

/* The presence of Tcl_Interp as an arg prevents giving arg list */
BN_EXPORT BU_EXTERN(void bn_tcl_setup,
		    ());
#ifdef BRLCAD_DEBUG
BN_EXPORT BU_EXTERN(int Bn_d_Init,
		    ());
#else
BN_EXPORT BU_EXTERN(int Bn_Init,
		    ());
#endif
BN_EXPORT BU_EXTERN(void bn_tcl_mat_print,
		    ());
/** @@} */

/*----------------------------------------------------------------------*/
/* complex.c */
/** @@addtogroup complex */
/** @@{ */
/*
 *  Complex numbers
 */

/* "complex number" data type: */
typedef struct bn_complex {
	double		re;		/**< @@brief real part */
	double		im;		/**< @@brief imaginary part */
}  bn_complex_t;

/* functions that are efficiently done as macros: */

#define	bn_cx_copy( ap, bp )		{*(ap) = *(bp);}
#define	bn_cx_neg( cp )			{ (cp)->re = -((cp)->re);(cp)->im = -((cp)->im);}
#define	bn_cx_real( cp )		(cp)->re
#define	bn_cx_imag( cp )		(cp)->im

#define bn_cx_add( ap, bp )		{ (ap)->re += (bp)->re; (ap)->im += (bp)->im;}
#define bn_cx_ampl( cp )		hypot( (cp)->re, (cp)->im )
#define bn_cx_amplsq( cp )		( (cp)->re * (cp)->re + (cp)->im * (cp)->im )
#define bn_cx_conj( cp )		{ (cp)->im = -(cp)->im; }
#define bn_cx_cons( cp, r, i )		{ (cp)->re = r; (cp)->im = i; }
#define bn_cx_phas( cp )		atan2( (cp)->im, (cp)->re )
#define bn_cx_scal( cp, s )		{ (cp)->re *= (s); (cp)->im *= (s); }
#define bn_cx_sub( ap, bp )		{ (ap)->re -= (bp)->re; (ap)->im -= (bp)->im;}

#define bn_cx_mul( ap, bp )	 	\
	{ register fastf_t a__re, b__re; \
	(ap)->re = ((a__re=(ap)->re)*(b__re=(bp)->re)) - (ap)->im*(bp)->im; \
	(ap)->im = a__re*(bp)->im + (ap)->im*b__re; }

/* Output variable "ap" is different from input variables "bp" or "cp" */
#define bn_cx_mul2( ap, bp, cp )	{ \
	(ap)->re = (cp)->re * (bp)->re - (cp)->im * (bp)->im; \
	(ap)->im = (cp)->re * (bp)->im + (cp)->im * (bp)->re; }

BN_EXPORT BU_EXTERN(void bn_cx_div,
		    (bn_complex_t *ap,
		     const bn_complex_t *bp));
BN_EXPORT BU_EXTERN(void bn_cx_sqrt,
		    (bn_complex_t *op,
		     const bn_complex_t *ip));
/** @@} */
/*----------------------------------------------------------------------*/
/* mat.c */
/*
 * 4x4 Matrix math
 */
BN_EXPORT extern const mat_t 	bn_mat_identity;

BN_EXPORT BU_EXTERN(void bn_mat_print,
		    (const char *title,
		     const mat_t m));
BN_EXPORT BU_EXTERN(void bn_mat_print_guts,
		    (const char *title,
		     const mat_t m,
		     char *buf,
		     int buflen));
BN_EXPORT BU_EXTERN(double bn_atan2,
		    (double x, double y));

#define bn_mat_zero( _m )	{ \
	bu_log("%s:%d bn_mat_zero() is deprecated, use MAT_ZERO()\n", \
			__FILE__, __LINE__); \
	(_m)[0] = (_m)[1] = (_m)[2] = (_m)[3] = \
	(_m)[4] = (_m)[5] = (_m)[6] = (_m)[7] = \
	(_m)[8] = (_m)[9] = (_m)[10] = (_m)[11] = \
	(_m)[12] = (_m)[13] = (_m)[14] = (_m)[15] = 0.0; }
  /*
#define	bn_mat_zero( _m )	(void)memset( (void *)_m, 0, sizeof(mat_t))
  */
#define bn_mat_idn( _m )	{ \
	bu_log("%s:%d bn_mat_idn() is deprecated, use MAT_IDN()\n", \
			__FILE__, __LINE__); \
	(_m)[1] = (_m)[2] = (_m)[3] = (_m)[4] = \
	(_m)[6] = (_m)[7] = (_m)[8] = (_m)[9] = \
	(_m)[11] = (_m)[12] = (_m)[13] = (_m)[14] = 0.0; \
	(_m)[0] = (_m)[5] = (_m)[10] = (_m)[15] = 1.0; }
  /*
#define bn_mat_idn( _m )	(void)memcpy( (void *)_m, (const void *)bn_mat_identity, sizeof(mat_t))
  */

#define bn_mat_copy( _d, _s )	{ \
	bu_log("%s:%d bn_mat_copy() is deprecated, use MAT_COPY()\n", \
			__FILE__, __LINE__); \
	(_d)[0] = (_s)[0];\
	(_d)[1] = (_s)[1];\
	(_d)[2] = (_s)[2];\
	(_d)[3] = (_s)[3];\
	(_d)[4] = (_s)[4];\
	(_d)[5] = (_s)[5];\
	(_d)[6] = (_s)[6];\
	(_d)[7] = (_s)[7];\
	(_d)[8] = (_s)[8];\
	(_d)[9] = (_s)[9];\
	(_d)[10] = (_s)[10];\
	(_d)[11] = (_s)[11];\
	(_d)[12] = (_s)[12];\
	(_d)[13] = (_s)[13];\
	(_d)[14] = (_s)[14];\
	(_d)[15] = (_s)[15]; }
  /*
#define bn_mat_copy(_d,_s)	(void)memcpy( (void *)_d, (const void *)(_s), sizeof(mat_t))
  */


BN_EXPORT BU_EXTERN(void bn_mat_mul,
		    (register mat_t o,
		     register const mat_t a,
		     register const mat_t b));
BN_EXPORT BU_EXTERN(void bn_mat_mul2,
		    (register const mat_t i,
		     register mat_t o));
BN_EXPORT BU_EXTERN(void bn_mat_mul3,
		    (mat_t o,
		     const mat_t a,
		     const mat_t b,
		     const mat_t c));
BN_EXPORT BU_EXTERN(void bn_mat_mul4,
		    (mat_t		o,
		     const mat_t	a,
		     const mat_t	b,
		     const mat_t	c,
		     const mat_t	d));
BN_EXPORT BU_EXTERN(void bn_matXvec,
		    (register hvect_t ov,
		     register const mat_t im,
		     register const hvect_t iv));
BN_EXPORT BU_EXTERN(void bn_mat_inv,
		    (register mat_t output,
		     const mat_t input));
BN_EXPORT BU_EXTERN(int bn_mat_inverse,
		    (register mat_t output,
		     const mat_t input));
BN_EXPORT BU_EXTERN(void bn_vtoh_move,
		    (register vect_t h,
		     register const vect_t v));
BN_EXPORT BU_EXTERN(void bn_htov_move,
		    (register vect_t v,
		     register const vect_t h));
BN_EXPORT BU_EXTERN(void bn_mat_trn,
		    (mat_t om,
		     register const mat_t im));
BN_EXPORT BU_EXTERN(void bn_mat_ae,
		    (register mat_t m,
		     double azimuth,
		     double elev));
BN_EXPORT BU_EXTERN(void bn_ae_vec,
		    (fastf_t *azp,
		     fastf_t *elp,
		     const vect_t v));
BN_EXPORT BU_EXTERN(void  bn_aet_vec,
		    (fastf_t *az,
		     fastf_t *el,
		     fastf_t *twist,
		     vect_t vec_ae,
		     vect_t vec_twist,
		     fastf_t accuracy));

BN_EXPORT BU_EXTERN(void bn_mat_angles,
		    (register mat_t mat,
		     double alpha,
		     double beta, double ggamma));
BN_EXPORT BU_EXTERN(void bn_mat_angles_rad,
		    (register mat_t mat,
		     double alpha,
		     double beta,
		     double ggamma));

BN_EXPORT BU_EXTERN(void bn_eigen2x2,
		    (fastf_t *val1,
		     fastf_t *val2,
		     vect_t vec1,
		     vect_t vec2,
		     fastf_t a,
		     fastf_t b,
		     fastf_t c));

BN_EXPORT BU_EXTERN(void bn_vec_perp,
		    (vect_t new_vec,
		     const vect_t old_vec));
BN_EXPORT BU_EXTERN(void bn_mat_fromto,
		    (mat_t m,
		     const vect_t from,
		     const vect_t to));
BN_EXPORT BU_EXTERN(void bn_mat_xrot,
		    (mat_t m,
		     double sinx,
		     double cosx));
BN_EXPORT BU_EXTERN(void bn_mat_yrot,
		    (mat_t m,
		     double siny,
		     double cosy));
BN_EXPORT BU_EXTERN(void bn_mat_zrot,
		    (mat_t m,
		     double sinz,
		     double cosz));
BN_EXPORT BU_EXTERN(void bn_mat_lookat,
		    (mat_t rot,
		     const vect_t dir,
		     int yflip));
BN_EXPORT BU_EXTERN(void bn_vec_ortho,
		    (register vect_t out,
		     register const vect_t in));
BN_EXPORT BU_EXTERN(int bn_mat_scale_about_pt,
		    (mat_t mat,
		     const point_t pt,
		     const double scale));
BN_EXPORT BU_EXTERN(void bn_mat_xform_about_pt,
		    (mat_t mat,
		     const mat_t xform,
		     const point_t pt));
BN_EXPORT BU_EXTERN(int bn_mat_is_equal,
		    (const mat_t a,
		     const mat_t b,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_mat_is_identity,
		    (const mat_t m));
BN_EXPORT BU_EXTERN(void bn_mat_arb_rot,
		    (mat_t m,
		     const point_t pt,
		     const vect_t dir,
		     const fastf_t ang));
BN_EXPORT BU_EXTERN(matp_t bn_mat_dup,
		    (const mat_t in));
BN_EXPORT BU_EXTERN(int bn_mat_ck,
		    (const char *title,
		     const mat_t m));
BN_EXPORT BU_EXTERN(fastf_t bn_mat_det3,
		    (const mat_t m));
BN_EXPORT BU_EXTERN(fastf_t bn_mat_determinant,
		    (const mat_t m));

BN_EXPORT BU_EXTERN(int bn_mat_is_non_unif,
		    (const mat_t m));
/*----------------------------------------------------------------------*/
/* msr.c */
/** @@addtogroup msr */
/** @@{ */
/*
 * Define data structures and constants for the "MSR" random number package.
 *
 * Also define a set of macros to access the random number tables
 * and to limit the area/volume that a set of random numbers inhabit.
 */

struct bn_unif {
	long	magic;
	long	msr_seed;
	int	msr_double_ptr;
	double	*msr_doubles;
	int	msr_long_ptr;
	long	*msr_longs;
};

#define BN_UNIF_MAGIC	12481632
#define BN_GAUSS_MAGIC 512256128

#define BN_CK_UNIF(_p) BU_CKMAG(_p, BN_UNIF_MAGIC, "bn_unif")
#define BN_CK_GAUSS(_p) BU_CKMAG(_p, BN_GAUSS_MAGIC, "bn_gauss")


/**
 * NOTE!!! The order of msr_gauss and msr_unif MUST match in the
 * first three entries as msr_gauss is passed as a msr_unif in
 * msr_gauss_fill.
 */
struct bn_gauss {
	long	magic;
	long	msr_gauss_seed;
	int	msr_gauss_dbl_ptr;
	double	*msr_gauss_doubles;
	int	msr_gauss_ptr;
	double	*msr_gausses;
};

BN_EXPORT BU_EXTERN(struct bn_unif *bn_unif_init,
		    (long setseed,
		     int method));
BN_EXPORT BU_EXTERN(void bn_unif_free,
		    (struct bn_unif *p));
BN_EXPORT BU_EXTERN(long bn_unif_long_fill,
		    (struct bn_unif *p));
BN_EXPORT BU_EXTERN(double bn_unif_double_fill,
		    (struct bn_unif *p));
BN_EXPORT BU_EXTERN(struct bn_gauss *bn_gauss_init,
		    (long setseed,
		     int method));
BN_EXPORT BU_EXTERN(void bn_gauss_free,
		    (struct bn_gauss *p));
BN_EXPORT BU_EXTERN(double bn_gauss_fill,
		    (struct bn_gauss *p));

#define	BN_UNIF_LONG(_p)	\
	 (((_p)->msr_long_ptr ) ? \
		(_p)->msr_longs[--(_p)->msr_long_ptr] : \
		bn_unif_long_fill(_p))
#define BN_UNIF_DOUBLE(_p)	\
	(((_p)->msr_double_ptr) ? \
		(_p)->msr_doubles[--(_p)->msr_double_ptr] : \
		bn_unif_double_fill(_p))

#define BN_UNIF_CIRCLE(_p,_x,_y,_r) { \
	do { \
		(_x) = 2.0*BN_UNIF_DOUBLE((_p)); \
		(_y) = 2.0*BN_UNIF_DOUBLE((_p)); \
		(_r) = (_x)*(_x)+(_y)*(_y); \
	} while ((_r) >= 1.0);  }

#define	BN_UNIF_SPHERE(_p,_x,_y,_z,_r) { \
	do { \
		(_x) = 2.0*BN_UNIF_DOUBLE(_p); \
		(_y) = 2.0*BN_UNIF_DOUBLE(_p); \
		(_z) = 2.0*BN_UNIF_DOUBLE(_p); \
		(_r) = (_x)*(_x)+(_y)*(_y)+(_z)*(_z);\
	} while ((_r) >= 1.0) }

#define	BN_GAUSS_DOUBLE(_p)	\
	(((_p)->msr_gauss_ptr) ? \
		(_p)->msr_gausses[--(_p)->msr_gauss_ptr] : \
		bn_gauss_fill(_p))

/** @@} */
/*----------------------------------------------------------------------*/
/* noise.c */
/* @@addtogroup noise */
/** @@{ */
/*
 * fractal noise support
 */

BN_EXPORT BU_EXTERN(void bn_noise_init,
		    ());
BN_EXPORT BU_EXTERN(double bn_noise_perlin,
		    (point_t pt));
/* XXX Why isn't the result listed first? */
BN_EXPORT BU_EXTERN(void bn_noise_vec,
		    (point_t point,
		     point_t result));
BN_EXPORT BU_EXTERN(double bn_noise_fbm,
		    (point_t point,
		     double h_val,
		     double lacunarity,
		     double octaves));
BN_EXPORT BU_EXTERN(double bn_noise_turb,
		    (point_t point,
		     double h_val,
		     double lacunarity,
		     double octaves));
BN_EXPORT BU_EXTERN(double bn_noise_mf,
		    (point_t point,
		     double h_val,
		     double lacunarity,
		     double octaves,
		     double offset));
BN_EXPORT BU_EXTERN(double bn_noise_ridged,
		    (point_t point,
		     double h_val,
		     double lacunarity,
		     double octaves,
		     double offset));
/** @@} */
/*----------------------------------------------------------------------*/
/* plane.c */
/*
 * Plane/line/point calculations
 */


BN_EXPORT BU_EXTERN(int bn_distsq_line3_line3,
		    (fastf_t dist[3],
		     point_t P,
		     vect_t d,
		     point_t Q,
		     vect_t e,
		     point_t pt1,
		     point_t pt2));

BN_EXPORT BU_EXTERN(int bn_dist_pt3_lseg3,
		    (fastf_t *dist,
		     point_t pca,
		     const point_t a,
		     const point_t b,
		     const point_t p,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_3pts_collinear,
		    (point_t a,
		     point_t b,
		     point_t c,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_pt3_pt3_equal,
		    ( const point_t a,
		      const point_t b,
		      const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_dist_pt2_lseg2,
		    (fastf_t *dist_sq,
		     fastf_t pca[2],
		     const point_t a,
		     const point_t b,
		     const point_t p,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_lseg3_lseg3,
		    (fastf_t *dist,
		     const point_t p, const vect_t pdir,
		     const point_t q, const vect_t qdir,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_line3_line3,
		    (fastf_t *t, fastf_t *u,
		     const point_t p,
		     const vect_t d,
		     const point_t a,
		     const vect_t c,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_2line3_colinear,
		    (const point_t p1,
		     const vect_t d1,
		     const point_t p2,
		     const vect_t d2,
		     double range,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_pt2_lseg2,
		    (fastf_t *dist,
		     const point_t a,
		     const point_t b,
		     const point_t p,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_line2_lseg2,
		    (fastf_t *dist,
		     const point_t p,
		     const vect_t d,
		     const point_t a,
		     const vect_t c,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_lseg2_lseg2,
		    (fastf_t *dist,
		     const point_t p,
		     const vect_t pdir,
		     const point_t q,
		     const vect_t qdir,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_line2_line2,
		    (fastf_t *dist,
		     const point_t p,
		     const vect_t d,
		     const point_t a,
		     const vect_t c,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(double bn_dist_pt3_pt3,
		    (const point_t a,
		     const point_t b));
BN_EXPORT BU_EXTERN(int bn_3pts_distinct,
		    (const point_t a,
		     const point_t b,
		     const point_t c,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_mk_plane_3pts,
		    (plane_t plane,
		     const point_t a,
		     const point_t b,
		     const point_t c,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_mkpoint_3planes,
		    (point_t pt,
		     const plane_t a,
		     const plane_t b,
		     const plane_t c));
BN_EXPORT BU_EXTERN(int bn_isect_line3_plane,
		    (fastf_t *dist,
		     const point_t pt,
		     const vect_t dir,
		     const plane_t plane,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_2planes,
		    (point_t pt,
		     vect_t dir,
		     const plane_t a,
		     const plane_t b,
		     const vect_t rpp_min,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_2lines,
		    (fastf_t *t,
		     fastf_t *u,
		     const point_t p,
		     const vect_t d,
		     const point_t a,
		     const vect_t c,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_isect_line_lseg,
		    (fastf_t *t, const point_t p,
		     const vect_t d,
		     const point_t a,
		     const point_t b,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(double bn_dist_line3_pt3,
		    (const point_t pt,
		     const vect_t dir,
		     const point_t a));
BN_EXPORT BU_EXTERN(double bn_distsq_line3_pt3,
		    (const point_t pt,
		     const vect_t dir,
		     const point_t a));
BN_EXPORT BU_EXTERN(double bn_dist_line_origin,
		    (const point_t pt,
		     const vect_t dir));
BN_EXPORT BU_EXTERN(double bn_dist_line2_point2,
		    (const point_t pt,
		     const vect_t dir,
		     const point_t a));
BN_EXPORT BU_EXTERN(double bn_distsq_line2_point2,
		    (const point_t pt,
		     const vect_t dir,
		     const point_t a));
BN_EXPORT BU_EXTERN(double bn_area_of_triangle,
		    (const point_t a,
		     const point_t b,
		     const point_t c));
BN_EXPORT BU_EXTERN(int bn_isect_pt_lseg,
		    (fastf_t *dist,
		     const point_t a,
		     const point_t b,
		     const point_t p,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(double bn_dist_pt_lseg,
		    (point_t pca,
		     const point_t a,
		     const point_t b,
		     const point_t p,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(void bn_rotate_bbox,
		    (point_t omin,
		     point_t omax,
		     const mat_t mat,
		     const point_t imin,
		     const point_t imax));
BN_EXPORT BU_EXTERN(void bn_rotate_plane,
		    (plane_t oplane,
		     const mat_t mat,
		     const plane_t iplane));
BN_EXPORT BU_EXTERN(int bn_coplanar,
		    (const plane_t a,
		     const plane_t b,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(double bn_angle_measure,
		    (vect_t vec,
		     const vect_t x_dir,
		     const vect_t y_dir));
BN_EXPORT BU_EXTERN(double bn_dist_pt3_along_line3,
		    (const point_t	p,
		     const vect_t d,
		     const point_t x));
BN_EXPORT BU_EXTERN(double bn_dist_pt2_along_line2,
		    (const point_t p,
		     const vect_t d,
		     const point_t x));
BN_EXPORT BU_EXTERN(int bn_between,
		    (double left,
		     double mid,
		     double right,
		     const struct bn_tol *tol));
BN_EXPORT BU_EXTERN(int bn_does_ray_isect_tri,
		    (const point_t pt,
		     const vect_t dir,
		     const point_t V,
		     const point_t A,
		     const point_t B,
		     point_t	inter));
BN_EXPORT BU_EXTERN(int bn_hlf_class,
		    (const plane_t half_eqn,
		     const vect_t min, const vect_t max,
		     const struct bn_tol *tol));

#define BN_CLASSIFY_UNIMPLEMENTED	0x0000
#define BN_CLASSIFY_OVERLAPPING		0x0002
#define BN_CLASSIFY_INSIDE		0x0001
#define BN_CLASSIFY_OUTSIDE		0x0003

BN_EXPORT BU_EXTERN(int bn_isect_planes,
		    (point_t pt,
		     const plane_t planes[],
		     const int pl_count));

/*----------------------------------------------------------------------*/
/* poly.c */
/** @@addtogroup poly */
/** @@{ */

			/* This could be larger, or even dynamic... */
#define BN_MAX_POLY_DEGREE	4	/* Maximum Poly Order */
/**
 *  Polynomial data type
 */
typedef  struct bn_poly {
	long		magic;
	int		dgr;
	double		cf[BN_MAX_POLY_DEGREE+1];
}  bn_poly_t;
#define BN_POLY_MAGIC	0x506f4c79	/* 'PoLy' */
#define BN_CK_POLY(_p)	BU_CKMAG(_p, BN_POLY_MAGIC, "struct bn_poly")
#define BN_POLY_NULL	((struct bn_poly *)NULL)

BN_EXPORT BU_EXTERN(struct bn_poly *bn_poly_mul,
		    (struct bn_poly *product,
		     const struct bn_poly *m1,
		     const struct bn_poly *m2));
BN_EXPORT BU_EXTERN(struct bn_poly *bn_poly_scale,
		    (struct bn_poly *eqn,
		     double factor));
BN_EXPORT BU_EXTERN(struct bn_poly *bn_poly_add,
		    (struct bn_poly *sum,
		     const struct bn_poly *poly1,
		     const struct bn_poly *poly2));
BN_EXPORT BU_EXTERN(struct bn_poly *bn_poly_sub,
		    (struct bn_poly *diff,
		     const struct bn_poly	*poly1,
		     const struct bn_poly	*poly2));
BN_EXPORT BU_EXTERN(void bn_poly_synthetic_division,
		    (struct bn_poly *quo,
		     struct bn_poly *rem,
		     const struct bn_poly	*dvdend,
		     const struct bn_poly	*dvsor));
BN_EXPORT BU_EXTERN(int bn_poly_quadratic_roots,
		    (struct bn_complex	roots[],
		     const struct bn_poly	*quadrat));
BN_EXPORT BU_EXTERN(int bn_poly_cubic_roots,
		    (struct bn_complex	roots[],
		     const struct bn_poly	*eqn));
BN_EXPORT BU_EXTERN(int bn_poly_quartic_roots,
		    (struct bn_complex	roots[],
		     const struct bn_poly	*eqn));
BN_EXPORT BU_EXTERN(void bn_pr_poly,
		    (const char *title,
		     const struct bn_poly	*eqn));
BN_EXPORT BU_EXTERN(void bn_pr_roots,
		    (const char *title,
		     const struct bn_complex roots[],
		     int n));
/** @@} */
/*----------------------------------------------------------------------*/
/* qmath.c */
/** @@addtogroup mat */
/** @@{ */
/*
 * Quaternion support
 */

BN_EXPORT BU_EXTERN(void quat_mat2quat,
		    (quat_t quat,
		     const mat_t mat));
BN_EXPORT BU_EXTERN(void quat_quat2mat,
		    (mat_t mat,
		     const quat_t quat));
BN_EXPORT BU_EXTERN(double quat_distance,
		    (const quat_t q1,
		     const quat_t q2));
BN_EXPORT BU_EXTERN(void quat_double,
		    (quat_t qout,
		     const quat_t q1,
		     const quat_t q2));
BN_EXPORT BU_EXTERN(void quat_bisect,
		    (quat_t qout,
		     const quat_t q1,
		     const quat_t q2));
BN_EXPORT BU_EXTERN(void quat_slerp,
		    (quat_t qout,
		     const quat_t q1,
		     const quat_t q2,
		     double f));
BN_EXPORT BU_EXTERN(void quat_sberp,
		    (quat_t qout,
		     const quat_t q1,
		     const quat_t qa,
		     const quat_t qb,
		     const quat_t q2,
		     double f));
BN_EXPORT BU_EXTERN(void quat_make_nearest,
		    (quat_t q1,
		     const quat_t q2));
BN_EXPORT BU_EXTERN(void quat_print,
		    (const char *title,
		     const quat_t quat));
BN_EXPORT BU_EXTERN(void quat_exp,
		    (quat_t out,
		     const quat_t in));
BN_EXPORT BU_EXTERN(void quat_log,
		    (quat_t out,
		     const quat_t in));
/** @@} */
/*----------------------------------------------------------------------*/
/* rand.c */
/** @@addtogroup rnd */
/** @@{ */
/*  A supply of fast pseudo-random numbers from table in bn/rand.c.
 *  The values are in the open interval (i.e. exclusive) of 0.0 to 1.0
 *  range with a period of 4096.
 *
 * @@par Usage:
@@code
	unsigned idx;
	float f;

	BN_RANDSEED( idx, integer_seed );

	while (NEED_MORE_RAND_NUMBERS) {
		f = BN_RANDOM( idx );
	}
@@endcode
 * Note that the values from bn_rand_half() become all 0.0 when the benchmark
 * flag is set (bn_rand_halftab is set to all 0's).  The numbers from
 * bn_rand_table do not change, because the procedural noise would cease to
 * exist.
 */
#define BN_RAND_TABSIZE 4096
#define BN_RAND_TABMASK 0xfff
#define BN_RANDSEED( _i, _seed )  _i = ((unsigned)_seed) % BN_RAND_TABSIZE
BN_EXPORT extern const float bn_rand_table[BN_RAND_TABSIZE];

/** BN_RANDOM always gives numbers between the open interval 0.0 to 1.0 */
#define BN_RANDOM( _i )	bn_rand_table[ _i = (_i+1) % BN_RAND_TABSIZE ]

/** BN_RANDHALF always gives numbers between the open interval -0.5 and 0.5 */
#define BN_RANDHALF( _i ) (bn_rand_table[ _i = (_i+1) % BN_RAND_TABSIZE ]-0.5)
#define BN_RANDHALF_INIT(_p) _p = bn_rand_table

#define BN_RANDHALFTABSIZE	16535	/* Powers of two give streaking */
BN_EXPORT extern int bn_randhalftabsize;
BN_EXPORT extern float bn_rand_halftab[BN_RANDHALFTABSIZE];

/**
 * random numbers between the closed interval -0.5 to 0.5 inclusive,
 * except when benchmark flag is set, when this becomes a constant 0.0
 */
#define bn_rand_half(_p)	\
	( (++(_p) >= &bn_rand_halftab[bn_randhalftabsize] || \
	     (_p) < bn_rand_halftab) ? \
		*((_p) = bn_rand_halftab) : *(_p))

/**
 * initialize the seed for the large random number table (halftab)
 */
#define bn_rand_init(_p, _seed)	\
	(_p) = &bn_rand_halftab[ \
		(int)( \
		      (bn_rand_halftab[(_seed)%bn_randhalftabsize] + 0.5) * \
		      (bn_randhalftabsize-1)) ]

/**
 * random numbers in the closed interval 0.0 to 1.0 range (inclusive)
 * except when benchmarking, when this is always 0.5
 */
#define bn_rand0to1(_q)	(bn_rand_half(_q)+0.5)

#define	BN_SINTABSIZE		2048
BN_EXPORT extern double bn_sin_scale;
#define bn_tab_sin(_a)	(((_a) > 0) ? \
	( bn_sin_table[(int)((0.5+ (_a)*bn_sin_scale))&(BN_SINTABSIZE-1)] ) :\
	(-bn_sin_table[(int)((0.5- (_a)*bn_sin_scale))&(BN_SINTABSIZE-1)] ))
BN_EXPORT extern const float bn_sin_table[BN_SINTABSIZE];

BN_EXPORT extern void bn_mathtab_constant();

/** @@} */

/*----------------------------------------------------------------------*/
/* wavelet.c */

#define CK_POW_2(dimen) { register unsigned long j; register int ok;\
	for (ok=0, j=0 ; j < sizeof(unsigned long) * 8 ; j++) { \
		if ( (unsigned long)(1<<j) == dimen) { ok = 1;  break; } \
	} \
	if ( ! ok ) { \
		bu_log("%s:%d value %d should be power of 2 (2^%d)\n", \
			__FILE__, __LINE__, dimen, j); \
		bu_bomb("CK_POW_2"); \
	}\
}

BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_double_decompose,
		    (double *tbuf,
		     double *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_double_reconstruct,
		    (double *tbuf,
		     double *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_float_decompose,
		    (float *tbuf,
		     float *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_float_reconstruct,
		    (float *tbuf,
		     float *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_char_decompose,
		    (char *tbuf,
		     char *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_char_reconstruct,
		    (char *tbuf, char *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_short_decompose,
		    (short *tbuf, short *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_short_reconstruct,
		    (short *tbuf, short *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_int_decompose,
		    (int *tbuf, int *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_int_reconstruct,
		    (int *tbuf,
		     int *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_long_decompose,
		    (long *tbuf, long *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_1d_long_reconstruct,
		    (long *tbuf, long *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));


BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_double_decompose,
		    (double *tbuf,
		     double *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_double_reconstruct,
		    (double *tbuf,
		     double *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_float_decompose,
		    (float *tbuf,
		     float *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_float_reconstruct,
		    (float *tbuf,
		     float *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_char_decompose,
		    (char *tbuf,
		     char *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_char_reconstruct,
		    (char *tbuf,
		     char *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_short_decompose,
		    (short *tbuf,
		     short *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_short_reconstruct,
		    (short *tbuf,
		     short *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_int_decompose,
		    (int *tbuf,
		     int *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_int_reconstruct,
		    (int *tbuf,
		     int *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_long_decompose,
		    (long *tbuf,
		     long *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_long_reconstruct,
		    (long *tbuf,
		     long *buf,
		     unsigned long dimen,
		     unsigned long depth,
		     unsigned long subimage_size,
		     unsigned long limit));


BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_double_decompose2,
		    (double *tbuf,
		     double *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_double_reconstruct2,
		    (double *tbuf,
		     double *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_float_decompose2,
		    (float *tbuf,
		     float *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_float_reconstruct2,
		    (float *tbuf,
		     float *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_char_decompose2,
		    (char *tbuf,
		     char *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_char_reconstruct2,
		    (char *tbuf,
		     char *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_short_decompose2,
		    (short *tbuf,
		     short *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_short_reconstruct2,
		    (short *tbuf,
		     short *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_int_decompose2,
		    (int *tbuf,
		     int *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_int_reconstruct2,
		    (int *tbuf,
		     int *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long subimage_size,
		     unsigned long limit));

BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_long_decompose2,
		    (long *tbuf,
		     long *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long limit));
BN_EXPORT BU_EXTERN(void bn_wlt_haar_2d_long_reconstruct2,
		    (long *tbuf,
		     long *buf,
		     unsigned long dimen,
		     unsigned long width,
		     unsigned long height,
		     unsigned long subimage_size,
		     unsigned long limit));


/*----------------------------------------------------------------------*/
/* const.c */
BN_EXPORT extern const double bn_pi;
BN_EXPORT extern const double bn_twopi;
BN_EXPORT extern const double bn_halfpi;
BN_EXPORT extern const double bn_invpi;
BN_EXPORT extern const double bn_inv2pi;
BN_EXPORT extern const double bn_inv255;
BN_EXPORT extern const double bn_degtorad;
BN_EXPORT extern const double bn_radtodeg;

/*----------------------------------------------------------------------*/
/* tabdata.c */
/**
 *			T A B D A T A
 *
 *  Data structures to assist with
 *  recording many sets of data sampled along the same set of independent
 *  variables.
 *  The overall notion is that each sample should be
 *  as compact as possible (an array of measurements),
 *  with all the context stored in one place.
 *
 *  These structures and support routines apply to
 *  any measured "curve" or "function" or "table" with one independent
 *  variable and one or more scalar dependent variable(s).
 *
 *  The context is kept in an 'bn_table' structure, and
 *  the data for one particular sample are kept in an 'bn_tabdata'
 *  structure.
 *
 *  The contents of the sample in val[j] are interpreted
 *  in the interval (wavel[j]..wavel[j+1]).
 *  This value could be power, albedo, absorption, refractive index,
 *  or any other wavelength-specific parameter.
 *
 *  For example, if the val[] array contains power values, then
 *  val[j] contains the integral of the power from wavel[j] to wavel[j+1]
 *
 *  As an exmple, assume nwave=2, wavel[0]=500, wavel[1]=600, wavel[2]=700.
 *  Then val[0] would contain data for the 500 to 600nm interval,
 *  and val[1] would contain data for the 600 to 700nm interval.
 *  There would be no storage allocated for val[2] -- don't use it!
 *  There are several interpretations of this:
 *	1)  val[j] stores the total (integral, area) value for the interval, or
 *	2)  val[j] stores the average value across the interval.
 *
 *  The intervals need not be uniformly spaced; it is acceptable to
 *  increase wavelength sampling density around "important" frequencies.
 *
 *  See Also -
 *	spectrum.h, spectrum.c
 */
struct bn_table {
	long		magic;
	int		nx;
	fastf_t		x[1];	/**< @@brief array of nx+1 wavelengths, dynamically sized */
};
#define BN_TABLE_MAGIC	0x53706374
#define BN_CK_TABLE(_p)	BU_CKMAG(_p, BN_TABLE_MAGIC, "bn_table")
#define BN_TABLE_NULL	((struct bn_table *)NULL)

/* Gets an bn_table, with x[] having size _nx+1 */
#ifndef NO_BOMBING_MACROS
#  define BN_GET_TABLE(_table, _nx)  { \
	if( (_nx) < 1 )  bu_bomb("RT_GET_TABLE() _nx < 1\n"); \
	_table = (struct bn_table *)bu_calloc( 1, \
		sizeof(struct bn_table) + sizeof(fastf_t)*(_nx), \
		"struct bn_table" ); \
	_table->magic = BN_TABLE_MAGIC; \
	_table->nx = (_nx);  }
#else
#  define BN_GET_TABLE(_table, _nx)  { \
	_table = (struct bn_table *)bu_calloc( 1, \
		sizeof(struct bn_table) + sizeof(fastf_t)*(_nx), \
		"struct bn_table" ); \
	_table->magic = BN_TABLE_MAGIC; \
	_table->nx = (_nx);  }
#endif

struct bn_tabdata {
	long		magic;
	int		ny;
	const struct bn_table *table;	/**< @@brief Up pointer to definition of X axis */
	fastf_t		y[1];		/**< @@brief array of ny samples, dynamically sized */
};
#define BN_TABDATA_MAGIC	0x53736d70
#define BN_CK_TABDATA(_p)	BU_CKMAG(_p, BN_TABDATA_MAGIC, "bn_tabdata")
#define BN_TABDATA_NULL		((struct bn_tabdata *)NULL)

#define BN_SIZEOF_TABDATA_Y(_tabdata)	sizeof(fastf_t)*((_tabdata)->ny)
#define BN_SIZEOF_TABDATA(_table)	( sizeof(struct bn_tabdata) + \
			sizeof(fastf_t)*((_table)->nx-1))

/* Gets an bn_tabdata, with y[] having size _ny */
#define BN_GET_TABDATA(_data, _table)  { \
	BN_CK_TABLE(_table);\
	_data = (struct bn_tabdata *)bu_calloc( 1, \
		BN_SIZEOF_TABDATA(_table), "struct bn_tabdata" ); \
	_data->magic = BN_TABDATA_MAGIC; \
	_data->ny = (_table)->nx; \
	_data->table = (_table); }

/*
 * Routines
 */

BN_EXPORT BU_EXTERN(void bn_table_free,
		    (struct bn_table *tabp));
BN_EXPORT BU_EXTERN(void bn_tabdata_free,
		    (struct bn_tabdata *data));
BN_EXPORT BU_EXTERN(void bn_ck_table,
		    (const struct bn_table *tabp));
BN_EXPORT BU_EXTERN(struct bn_table *bn_table_make_uniform,
		    (int num,
		     double first,
		     double last));
BN_EXPORT BU_EXTERN(void bn_tabdata_add,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in1,
		     const struct bn_tabdata *in2));
BN_EXPORT BU_EXTERN(void bn_tabdata_mul,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in1,
		     const struct bn_tabdata *in2));
BN_EXPORT BU_EXTERN(void bn_tabdata_mul3,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in1,
		     const struct bn_tabdata *in2,
		     const struct bn_tabdata *in3));
BN_EXPORT BU_EXTERN(void bn_tabdata_incr_mul3_scale,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in1,
		     const struct bn_tabdata *in2,
		     const struct bn_tabdata *in3,
		     double scale));
BN_EXPORT BU_EXTERN(void bn_tabdata_incr_mul2_scale,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in1,
		     const struct bn_tabdata *in2,
		     double scale));
BN_EXPORT BU_EXTERN(void bn_tabdata_scale,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in1,
		     double scale));
BN_EXPORT BU_EXTERN(void bn_table_scale,
		    (struct bn_table *tabp,
		     double scale));
BN_EXPORT BU_EXTERN(void bn_tabdata_join1,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in1,
		     double scale,
		     const struct bn_tabdata *in2));
BN_EXPORT BU_EXTERN(void bn_tabdata_join2,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in1,
		     double scale2,
		     const struct bn_tabdata *in2,
		     double scale3,
		     const struct bn_tabdata *in3));
BN_EXPORT BU_EXTERN(void bn_tabdata_blend2,
		    (struct bn_tabdata *out,
		     double scale1,
		     const struct bn_tabdata *in1,
		     double scale2,
		     const struct bn_tabdata *in2));
BN_EXPORT BU_EXTERN(void bn_tabdata_blend3,
		    (struct bn_tabdata *out,
		     double scale1,
		     const struct bn_tabdata *in1,
		     double scale2,
		     const struct bn_tabdata *in2,
		     double scale3,
		     const struct bn_tabdata *in3));
BN_EXPORT BU_EXTERN(double bn_tabdata_area1,
		    (const struct bn_tabdata *in));
BN_EXPORT BU_EXTERN(double bn_tabdata_area2,
		    (const struct bn_tabdata *in));
BN_EXPORT BU_EXTERN(double bn_tabdata_mul_area1,
		    (const struct bn_tabdata *in1,
		     const struct bn_tabdata *in2));
BN_EXPORT BU_EXTERN(double bn_tabdata_mul_area2,
		    (const struct bn_tabdata *in1,
		     const struct bn_tabdata *in2));
BN_EXPORT BU_EXTERN(fastf_t bn_table_lin_interp,
		    (const struct bn_tabdata *samp,
		     double wl));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_tabdata_resample_max,
		    (const struct bn_table *newtable,
		     const struct bn_tabdata *olddata));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_tabdata_resample_avg,
		    (const struct bn_table *newtable,
		     const struct bn_tabdata *olddata));
BN_EXPORT BU_EXTERN(int bn_table_write,
		    (const char *filename,
		     const struct bn_table *tabp));
BN_EXPORT BU_EXTERN(struct bn_table *bn_table_read,
		    (const char *filename));
BN_EXPORT BU_EXTERN(void bn_pr_table,
		    (const char *title,
		     const struct bn_table *tabp));
BN_EXPORT BU_EXTERN(void bn_pr_tabdata,
		    (const char *title,
		     const struct bn_tabdata *data));
BN_EXPORT BU_EXTERN(int bn_print_table_and_tabdata,
		    (const char *filename,
		     const struct bn_tabdata *data));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_read_table_and_tabdata,
		    (const char *filename));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_tabdata_binary_read,
		    (const char *filename,
		     int num,
		     const struct bn_table *tabp));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_tabdata_malloc_array,
		    (const struct bn_table *tabp,
		     int num));
BN_EXPORT BU_EXTERN(void bn_tabdata_copy,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_tabdata_dup,
		    (const struct bn_tabdata *in));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_tabdata_get_constval,
		    (double val,
		     const struct bn_table *tabp));
BN_EXPORT BU_EXTERN(void bn_tabdata_constval,
		    (struct bn_tabdata *data,
		     double val));
BN_EXPORT BU_EXTERN(void bn_tabdata_to_tcl,
		    (struct bu_vls *vp,
		     const struct bn_tabdata *data));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_tabdata_from_array,
		    (const double *array));
BN_EXPORT BU_EXTERN(void bn_tabdata_freq_shift,
		    (struct bn_tabdata *out,
		     const struct bn_tabdata *in,
		     double offset));
BN_EXPORT BU_EXTERN(int bn_table_interval_num_samples,
		    (const struct bn_table *tabp,
		     double low,
		     double hi));
BN_EXPORT BU_EXTERN(int bn_table_delete_sample_pts,
		    (struct bn_table *tabp,
		     int i,
		     int j));
BN_EXPORT BU_EXTERN(struct bn_table *bn_table_merge2,
		    (const struct bn_table *a,
		     const struct bn_table *b));
BN_EXPORT BU_EXTERN(struct bn_tabdata *bn_tabdata_mk_linear_filter,
		    (const struct bn_table *spectrum,
		     double lower_wavelen,
		     double upper_wavelen));

/*----------------------------------------------------------------------*/
/* vlist.c */
#define BN_VLIST_CHUNK	35		/**< @@brief  32-bit mach => just less than 1k */
/*
 *			B N _ V L I S T
 *
 *  Definitions for handling lists of vectors (really verticies, or points)
 *  and polygons in 3-space.
 *  Intented for common handling of wireframe display information,
 *  in the full resolution that is calculated in.
 *
 *  On 32-bit machines, BN_VLIST_CHUNK of 35 results in bn_vlist structures
 *  just less than 1k bytes.
 *
 *  The head of the doubly linked list can be just a "struct bu_list" head.
 *
 *  To visit all the elements in the vlist:
 *	for( BU_LIST_FOR( vp, rt_vlist, hp ) )  {
 *		register int	i;
 *		register int	nused = vp->nused;
 *		register int	*cmd = vp->cmd;
 *		register point_t *pt = vp->pt;
 *		for( i = 0; i < nused; i++,cmd++,pt++ )  {
 *			access( *cmd, *pt );
 *			access( vp->cmd[i], vp->pt[i] );
 *		}
 *	}
 */
struct bn_vlist  {
	struct bu_list	l;			/**< @@brief  magic, forw, back */
	int		nused;			/**< @@brief  elements 0..nused active */
	int		cmd[BN_VLIST_CHUNK];	/**< @@brief  VL_CMD_* */
	point_t		pt[BN_VLIST_CHUNK];	/**< @@brief  associated 3-point/vect */
};
#define BN_VLIST_NULL	((struct bn_vlist *)0)
#define BN_VLIST_MAGIC	0x98237474
#define BN_CK_VLIST(_p) BU_CKMAG((_p), BN_VLIST_MAGIC, "bn_vlist")
#define BN_CK_VLIST_TCL(_interp,_p) BU_CKMAG_TCL(_interp,(_p), BN_VLIST_MAGIC, "bn_vlist")

/* Values for cmd[] */
#define BN_VLIST_LINE_MOVE	0
#define BN_VLIST_LINE_DRAW	1
#define BN_VLIST_POLY_START	2	/**< @@brief  pt[] has surface normal */
#define BN_VLIST_POLY_MOVE	3	/**< @@brief  move to first poly vertex */
#define BN_VLIST_POLY_DRAW	4	/**< @@brief  subsequent poly vertex */
#define BN_VLIST_POLY_END	5	/**< @@brief  last vert (repeats 1st), draw poly */
#define BN_VLIST_POLY_VERTNORM	6	/**< @@brief  per-vertex normal, for interpoloation */

/**
 *  Applications that are going to use BN_ADD_VLIST and BN_GET_VLIST
 *  are required to execute this macro once, on their _free_hd:
 *		BU_LIST_INIT( &_free_hd );
 *
 * Note that BN_GET_VLIST and BN_FREE_VLIST are non-PARALLEL.
 */
#define BN_GET_VLIST(_free_hd,p) {\
		(p) = BU_LIST_FIRST( bn_vlist, (_free_hd) ); \
		if( BU_LIST_IS_HEAD( (p), (_free_hd) ) )  { \
			(p) = (struct bn_vlist *)bu_malloc(sizeof(struct bn_vlist), "bn_vlist"); \
			(p)->l.magic = BN_VLIST_MAGIC; \
		} else { \
			BU_LIST_DEQUEUE( &((p)->l) ); \
		} \
		(p)->nused = 0; \
	}

/** Place an entire chain of bn_vlist structs on the freelist _free_hd */
#define BN_FREE_VLIST(_free_hd,hd)	{ \
	BU_CK_LIST_HEAD( (hd) ); \
	BU_LIST_APPEND_LIST( (_free_hd), (hd) ); \
	}

#define BN_ADD_VLIST(_free_hd,_dest_hd,pnt,draw)  { \
	register struct bn_vlist *_vp; \
	BU_CK_LIST_HEAD( _dest_hd ); \
	_vp = BU_LIST_LAST( bn_vlist, (_dest_hd) ); \
	if( BU_LIST_IS_HEAD( _vp, (_dest_hd) ) || _vp->nused >= BN_VLIST_CHUNK )  { \
		BN_GET_VLIST(_free_hd, _vp); \
		BU_LIST_INSERT( (_dest_hd), &(_vp->l) ); \
	} \
	VMOVE( _vp->pt[_vp->nused], (pnt) ); \
	_vp->cmd[_vp->nused++] = (draw); \
	}

/**
 *			B N _ V L B L O C K
 *
 *  For plotting, a way of separating plots into separate color vlists:
 *  blocks of vlists, each with an associated color.
 */
struct bn_vlblock {
	long		magic;
	int		nused;
	int		max;
	long		*rgb;		/**< @@brief  rgb[max] variable size array */
	struct bu_list	*head;		/**< @@brief  head[max] variable size array */
	struct bu_list	*free_vlist_hd;	/**< @@brief  where to get/put free vlists */
};
#define BN_VLBLOCK_MAGIC	0x981bd112
#define BN_CK_VLBLOCK(_p)	BU_CKMAG((_p), BN_VLBLOCK_MAGIC, "bn_vlblock")

BN_EXPORT BU_EXTERN(void bn_vlist_3string,
		    (struct bu_list *vhead,
		     struct bu_list *free_hd,
		     const char *string,
		     const point_t origin,
		     const mat_t rot,
		     double scale));
BN_EXPORT BU_EXTERN(void bn_vlist_2string,
		    (struct bu_list *vhead,
		     struct bu_list *free_hd,
		     const char *string,
		     double x,
		     double y,
		     double scale,
		     double theta));


/*----------------------------------------------------------------------*/
/* vert_tree.c */
/*
 * vertex tree support
 */
/**
 *  packaging structure
 * holds all the required info for a single vertex tree
 */
struct vert_root {
	long magic;
	int tree_type;			/**< @@brief  vertices or vertices with normals */
	union vert_tree *the_tree;	/**< @@brief  the actual vertex tree */
	fastf_t *the_array;		/**< @@brief  the array of vertices */
	unsigned long curr_vert;	/**< @@brief  the number of vertices currently in the array */
	unsigned long max_vert;		/**< @@brief  the current maximum capacity of the array */
};

#define TREE_TYPE_VERTS			1
#define TREE_TYPE_VERTS_AND_NORMS	2

#define VERT_BLOCK 512			/**< @@brief  number of vertices to malloc per call when building the array */

#define VERT_TREE_MAGIC	0x56455254	/**< @@brief  "VERT" */
#define BN_CK_VERT_TREE(_p)	BU_CKMAG(_p, VERT_TREE_MAGIC, "vert_tree")

BN_EXPORT BU_EXTERN(struct vert_root *create_vert_tree,
		    ());
BN_EXPORT BU_EXTERN(struct vert_root *create_vert_tree_w_norms,
		    ());
BN_EXPORT BU_EXTERN(void free_vert_tree,
		    (struct vert_root *tree_root));
BN_EXPORT BU_EXTERN(int Add_vert,
		    (double x,
		     double y,
		     double z,
		     struct vert_root *tree_root,
		     fastf_t local_tol_sq));
BN_EXPORT BU_EXTERN(int Add_vert_and_norm,
		    (double x,
		     double y,
		     double z,
		     double nx,
		     double ny,
		     double nz,
		     struct vert_root *tree_root,
		     fastf_t local_tol_sq));
BN_EXPORT BU_EXTERN(void clean_vert_tree,
		    (struct vert_root *tree_root));

/*----------------------------------------------------------------------*/
/* vectfont.c */
BN_EXPORT BU_EXTERN(void tp_setup,
		    ());

/**
 * report version information about LIBBN
 */
BN_EXPORT BU_EXTERN(const char *bn_version, (void));

__END_DECLS

/*----------------------------------------------------------------------*/
/*
 * plane structures (from src/librt/plane.h)
 */
/**
 *  Plane structures
 * holds all the required info for geometric planes.
 */

/* from src/librt/plane.h. */

#define MAXPTS	4			/* All we need are 4 points */
#define pl_A	pl_points[0]		/* Synonym for A point */

struct plane_specific  {
	int	pl_npts;		/* number of points on plane */
	point_t	pl_points[MAXPTS];	/* Actual points on plane */
	vect_t	pl_Xbasis;		/* X (B-A) vector (for 2d coords) */
	vect_t	pl_Ybasis;		/* Y (C-A) vector (for 2d coords) */
	vect_t	pl_N;			/* Unit-length Normal (outward) */
	fastf_t	pl_NdotA;		/* Normal dot A */
	fastf_t	pl_2d_x[MAXPTS];	/* X 2d-projection of points */
	fastf_t	pl_2d_y[MAXPTS];	/* Y 2d-projection of points */
	fastf_t	pl_2d_com[MAXPTS];	/* pre-computed common-term */
	struct plane_specific *pl_forw;	/* Forward link */
	char	pl_code[MAXPTS+1];	/* Face code string.  Decorative. */
};

/*
 *  Describe the tri_specific structure.
 */
struct tri_specific  {
	point_t	tri_A;			/* triangle vertex (A) */
	vect_t	tri_BA;			/* B - A (second point) */
	vect_t	tri_CA;			/* C - A (third point) */
	vect_t	tri_wn;			/* facet normal (non-unit) */
	vect_t	tri_N;			/* unit normal vector */
	fastf_t *tri_normals;		/* unit vertex normals A, B, C  (this is malloced storage) */
	int	tri_surfno;		/* solid specific surface number */
	struct tri_specific *tri_forw;	/* Next facet */
};

typedef struct tri_specific tri_specific_double;

/*
 *	A more memory conservative version
 */
struct tri_float_specific  {
	float	tri_A[3];			/* triangle vertex (A) */
	float	tri_BA[3];			/* B - A (second point) */
	float	tri_CA[3];			/* C - A (third point) */
	float	tri_wn[3];			/* facet normal (non-unit) */
	float	tri_N[3];			/* unit normal vector */
	signed char *tri_normals;		/* unit vertex normals A, B, C  (this is malloced storage) */
	int	tri_surfno;		/* solid specific surface number */
	struct tri_float_specific *tri_forw;	/* Next facet */
};

typedef struct tri_float_specific tri_specific_float;



#endif /* __BN_H__ */

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.32
log
@remove authorship/origin info from header, innaccurately documents what is already tracked by version control
@
text
@d299 1
a299 1
	{ FAST fastf_t a__re, b__re; \
@


14.31
log
@migrated the contents of src/librt/plane.r to include/bn.h
@
text
@a30 16
 * @@li This header file depends on vmath.h
 * @@li This header file depends on bu.h and LIBBU;  it is safe to use
 *      bu.h macros (e.g. BU_EXTERN) here.
 *
 *  @@author	Michael John Muuss
 *  @@author	Lee A Butler
 *  @@author	Douglas A Gwyn
 *  @@author	Jeff Hanes
 *
 *  @@par Modifications & Additions
 *      Christopher Sean Morrison
 *
 *  @@par Source -
 *	The U. S. Army Research Laboratory
 *@@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
a36 2
	# include "bu.h"
	# include "vmath.h"
a39 2
 *  @@par Libraries Used -
 *	-lm -lc
d1045 1
a1045 1
		}\
@


14.30
log
@various minor fixes from "flawfinder" and compiler warnings
@
text
@a34 5
 *  ??Should complex.h and plane.h and polyno.h get absorbed in here??
 *	??absorbed/included??
 *
 *
 *
d1761 62
@


14.29
log
@document more explicitly which random number tables are open intervals and which are closed -- the smaller table is open, the big table (halfrand) is closed.
@
text
@d353 2
a354 1
		     char *buf));
d1064 1
a1064 1
		if ( (1<<j) == dimen) { ok = 1;  break; } \
@


14.28
log
@clean up the header protections so that they are all now more consistent with one another via use of __HEADER_H__ for the define names.
@
text
@d988 2
a989 1
 *  The values are in the range 0..1
d1012 1
a1012 1
/** BN_RANDOM always gives numbers between 0.0 and 1.0 */
d1015 1
a1015 1
/** BN_RANDHALF always gives numbers between -0.5 and 0.5 */
a1018 8
/* XXX This should move to compat4 */
/* # define rand_half bn_rand_half */
/* #define rand_init bn_rand_init */
/* #define rand0to1  bn_rand0to1 */

/* random numbers between -0.5 and 0.5, except when benchmark flag is set,
 * when this becomes a constant 0.0
 */
d1023 4
d1032 3
d1041 4
a1044 1
/** random numbers 0..1 except when benchmarking, when this is always 0.5 */
@


14.27
log
@get rid of RCS variables from the public header files.  this is done in part to reduce recompilation during interface changes, but also to move towards not relying on or publishing the information contained in the variables interface-wise. (they're fine for c sources and private headers)
@
text
@d66 1
d1762 2
a1763 1
#endif /* SEEN_BN_H */
@


14.26
log
@remove dead macros (already marked for deprecation)
@
text
@a64 2
 *
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.25 2007/04/16 21:15:35 brlcad Exp $
a90 3
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.25 2007/04/16 21:15:35 brlcad Exp $ (BRL)"


@


14.25
log
@revamp BRL-CAD's versioning setup.  no longer rely upon the vers.sh script, allowing for a more unified cross-platform configuration.  instead of globals, provide per-library functions that return the version string.  the version numbers are now stored in files in include/conf/.
@
text
@d66 1
a66 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.24 2007/01/27 01:01:39 brlcad Exp $
d93 1
a93 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.24 2007/01/27 01:01:39 brlcad Exp $ (BRL)"
a360 9
#if 0 /* deprecated for macros below (which were deprecated for vmath.h) */
BN_EXPORT BU_EXTERN(void bn_mat_zero,
		    (mat_t m));
BN_EXPORT BU_EXTERN(void bn_mat_idn,
		    (mat_t m));
BN_EXPORT BU_EXTERN(void bn_mat_copy,
		    (register mat_t dest,
		     register const mat_t src));
#else
d404 1
a404 1
#endif /* deprecated */
@


14.24
log
@ws, test three
@
text
@d66 1
a66 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.23 2007/01/23 01:13:19 brlcad Exp $
d93 1
a93 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.23 2007/01/23 01:13:19 brlcad Exp $ (BRL)"
d1768 4
a1771 5

/*----------------------------------------------------------------------*/
/* vers.c */
BN_EXPORT extern const char		bn_version[];
/*----------------------------------------------------------------------*/
@


14.23
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d54 7
a60 7
 	# include "common.h"
 	# include <stdio.h>
 	# include <math.h>
 	# include "machine.h"	/_* For fastf_t definition on this machine *_/
 	# include "bu.h"
 	# include "vmath.h"
 	# include "bn.h"
d66 1
a66 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.22 2007/01/21 04:45:40 brlcad Exp $
d93 1
a93 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.22 2007/01/21 04:45:40 brlcad Exp $ (BRL)"
d116 7
a122 7
 		point_t	a,b;
 		vect_t	diff;
 		VSUB2( diff, a, b );
 		if( MAGNITUDE(diff) < tol->dist )	a & b are the same.
 	or, more efficiently:
 		if( MAQSQ(diff) < tol->dist_sq )
@@endcode 
d130 3
a132 3
 		vect_t	a,b;
 		if( fabs(VDOT(a,b)) >= tol->para )	a & b are parallel
 		if( fabs(VDOT(a,b)) <= tol->perp )	a & b are perpendicular
a570 1

a1160 1

a1245 1

a1786 1

@


14.22
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d66 1
a66 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.21 2007/01/20 14:36:40 brlcad Exp $
d93 1
a93 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.21 2007/01/20 14:36:40 brlcad Exp $ (BRL)"
@


14.21
log
@update copyright to 2007
@
text
@d22 1
a22 2
/*@@{*/

d67 1
a67 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.20 2006/09/26 00:10:44 brlcad Exp $
d94 1
a94 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.20 2006/09/26 00:10:44 brlcad Exp $ (BRL)"
d100 1
a100 1
/*@@}*/
d103 1
a103 1
/*@@{*/
d156 1
a156 1
/*@@}*/
d160 1
a160 1
/*@@{*/
d296 1
a296 1
/*@@}*/
d301 1
a301 1
/*@@{*/
d344 1
a344 1
/*@@}*/
d548 1
a548 1
/*@@{*/
d633 1
a633 1
/*@@}*/
d637 1
a637 1
/*@@{*/
d672 1
a672 1
/*@@}*/
d895 1
a895 1
/*@@{*/
d947 1
a947 1
/*@@}*/
d951 1
a951 1
/*@@{*/
d997 1
a997 1
/*@@}*/
d1001 1
a1001 1
/*@@{*/
d1068 1
a1068 1
/*@@}*/
d1781 1
a1781 1
/*@@}*/
@


14.20
log
@have the headers include the headers they respectively require
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d68 1
a68 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.19 2006/09/18 05:24:07 lbutler Exp $
d95 1
a95 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.19 2006/09/18 05:24:07 lbutler Exp $ (BRL)"
@


14.19
log
@Doxygen updates
@
text
@d68 1
a68 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.18 2006/09/07 01:19:17 lbutler Exp $
a69 2


d73 2
d77 6
d95 1
a95 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.18 2006/09/07 01:19:17 lbutler Exp $ (BRL)"
a96 2
/* interface headers */
#include "vmath.h"
@


14.18
log
@Doxygen updates
@
text
@d68 1
a68 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.17 2006/09/04 04:43:31 lbutler Exp $
d89 1
a89 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.17 2006/09/04 04:43:31 lbutler Exp $ (BRL)"
d570 1
a570 1
/*
a892 3
/*
 *  Polynomial data type
 */
d896 3
d1002 11
a1012 10
 * Usage:
 *	unsigned idx;
 *	float f;
 *
 *	BN_RANDSEED( idx, integer_seed );
 *
 *	while (NEED_MORE_RAND_NUMBERS) {
 *		f = BN_RANDOM( idx );
 *	}
 *
d1023 1
a1023 1
/* BN_RANDOM always gives numbers between 0.0 and 1.0 */
d1026 1
a1026 1
/* BN_RANDHALF always gives numbers between -0.5 and 0.5 */
d1031 1
a1031 1
/* #define rand_half bn_rand_half */
d1053 1
a1053 1
/* random numbers 0..1 except when benchmarking, when this is always 0.5 */
d1357 1
a1357 1
/*
d1598 1
a1623 1
#define BN_VLIST_CHUNK	35		/* 32-bit mach => just less than 1k */
d1625 4
a1628 4
	struct bu_list	l;			/* magic, forw, back */
	int		nused;			/* elements 0..nused active */
	int		cmd[BN_VLIST_CHUNK];	/* VL_CMD_* */
	point_t		pt[BN_VLIST_CHUNK];	/* associated 3-point/vect */
d1638 5
a1642 5
#define BN_VLIST_POLY_START	2	/* pt[] has surface normal */
#define BN_VLIST_POLY_MOVE	3	/* move to first poly vertex */
#define BN_VLIST_POLY_DRAW	4	/* subsequent poly vertex */
#define BN_VLIST_POLY_END	5	/* last vert (repeats 1st), draw poly */
#define BN_VLIST_POLY_VERTNORM	6	/* per-vertex normal, for interpoloation */
d1644 1
a1644 1
/*
d1662 1
a1662 1
/* Place an entire chain of bn_vlist structs on the freelist _free_hd */
d1680 1
a1680 1
/*
d1690 3
a1692 3
	long		*rgb;		/* rgb[max] variable size array */
	struct bu_list	*head;		/* head[max] variable size array */
	struct bu_list	*free_vlist_hd;	/* where to get/put free vlists */
d1719 2
a1720 1
/* packaging structure
d1725 5
a1729 5
	int tree_type;			/* vertices or vertices with normals */
	union vert_tree *the_tree;	/* the actual vertex tree */
	fastf_t *the_array;		/* the array of vertices */
	unsigned long curr_vert;	/* the number of vertices currently in the array */
	unsigned long max_vert;		/* the current maximum capacity of the array */
d1735 1
a1735 1
#define VERT_BLOCK 512			/* number of vertices to malloc per call when building the array */
d1737 1
a1737 1
#define VERT_TREE_MAGIC	0x56455254	/* "VERT" */
d1788 1
@


14.17
log
@Doxygen updates
@
text
@d68 1
a68 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.16 2006/09/03 15:16:20 lbutler Exp $
d89 1
a89 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.16 2006/09/03 15:16:20 lbutler Exp $ (BRL)"
d947 1
a947 1
/** @@addtogroup quat */
@


14.16
log
@Doxygen updates
@
text
@d68 1
a68 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.15 2006/08/31 04:41:19 lbutler Exp $
d89 1
a89 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.15 2006/08/31 04:41:19 lbutler Exp $ (BRL)"
d544 1
a544 1
/** @@addtogroup rnd */
@


14.15
log
@miscelaneous changes to support doxygen
@
text
@d21 2
a22 1
/** 
d25 1
a25 1
 *@@addtogroup libbn
d33 3
a35 3
 *  This header file depends on vmath.h
 *  This header file depends on bu.h and LIBBU;  it is safe to use
 *  bu.h macros (e.g. BU_EXTERN) here.
a40 5
 *  Authors -
 *	Michael John Muuss
 *	Lee A Butler
 *	Douglas A Gwyn
 *	Jeff Hanes
d42 6
a47 1
 *  Modifications & Additions -
d50 1
a50 1
 *  Source -
d52 1
a52 1
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
d55 9
a63 7
 *	# include "common.h"
 *	# include <stdio.h>
 *	# include <math.h>
 *	# include "machine.h"	/_* For fastf_t definition on this machine *_/
 *	# include "bu.h"
 *	# include "vmath.h"
 *	# include "bn.h"
d65 1
a65 1
 *  Libraries Used -
d68 1
a68 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.14 2006/08/01 15:02:54 brlcad Exp $
d70 1
a70 1
/*@@{*/
d89 1
a89 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.14 2006/08/01 15:02:54 brlcad Exp $ (BRL)"
d101 3
a103 1
/*			B N _ T O L
d113 8
a120 7
 *		point_t	a,b;
 *		vect_t	diff;
 *		VSUB2( diff, a, b );
 *		if( MAGNITUDE(diff) < tol->dist )	a & b are the same.
 *	or, more efficiently:
 *		if( MAQSQ(diff) < tol->dist_sq )
 *
d127 5
a131 3
 *		vect_t	a,b;
 *		if( fabs(VDOT(a,b)) >= tol->para )	a & b are parallel
 *		if( fabs(VDOT(a,b)) <= tol->perp )	a & b are perpendicular
d133 1
a133 1
 *  Note:
d135 1
a135 1
 *	tol->para = 1 - tol->perp;
d139 4
a142 4
	double		dist;			/* >= 0 */
	double		dist_sq;		/* dist * dist */
	double		perp;			/* nearly 0 */
	double		para;			/* nearly 1 */
d305 2
a306 2
	double		re;		/* real part */
	double		im;		/* imaginary part */
d1399 1
a1399 1
	fastf_t		x[1];	/* array of nx+1 wavelengths, dynamically sized */
d1426 2
a1427 2
	const struct bn_table *table;	/* Up pointer to definition of X axis */
	fastf_t		y[1];		/* array of ny samples, dynamically sized */
@


14.14
log
@refactor the three asize.c implementations (libbn, libfb, & canon) into just one.  libbn had the most comprehensive and updated version, but the logic belongs in libfb.  so, the bn_common autosizing functions are now consolidated to libfb, refactoring accordingly.
@
text
@d21 2
d24 1
a24 1
 *
d54 7
a60 7
 *	#include "common.h"
 *	#include <stdio.h>
 *	#include <math.h>
 *	#include "machine.h"	/_* For fastf_t definition on this machine *_/
 *	#include "bu.h"
 *	#include "vmath.h"
 *	#include "bn.h"
d65 1
a65 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.13 2006/07/06 19:35:17 brlcad Exp $
d67 1
d86 1
a86 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.13 2006/07/06 19:35:17 brlcad Exp $ (BRL)"
d94 1
d96 2
d145 1
a145 1

d148 2
d285 1
a285 1

d289 2
d333 1
a333 1

d536 2
a544 6
#define BN_UNIF_MAGIC	12481632
#define BN_GAUSS_MAGIC 512256128

#define BN_CK_UNIF(_p) BU_CKMAG(_p, BN_UNIF_MAGIC, "bn_unif")
#define BN_CK_GAUSS(_p) BU_CKMAG(_p, BN_GAUSS_MAGIC, "bn_gauss")

d553 9
d622 1
a622 1

d625 2
d661 1
a661 1

d883 2
d936 1
a936 1

d939 2
d986 1
d989 2
a990 1

d1056 1
a1056 1

d1768 1
a1768 1

@


14.13
log
@follow erik's lead, obliterate the other references to Cakefiles
@
text
@d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.12 2006/06/07 15:02:02 d_rossberg Exp $
d83 1
a83 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.12 2006/06/07 15:02:02 d_rossberg Exp $ (BRL)"
a139 15
/* asize.c */
BN_EXPORT BU_EXTERN(int bn_common_file_size,
		    (unsigned long int *width,
		     unsigned long int *height,
		     const char *filename,
		     int pixel_size));
BN_EXPORT BU_EXTERN(int bn_common_name_size,
		    (unsigned long int *width,
		     unsigned long int *height,
		     const char *name));
BN_EXPORT BU_EXTERN(int bn_common_image_size,
		    (unsigned long int *width,
		     unsigned long int *height,
		     unsigned long int num_pixels));

@


14.12
log
@provide with bn_mat_inverse a less rigorous function to invert a 4-by-4 matrix,
it is almost impossible to decide in advance if a matrix is singular
@
text
@d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.11 2006/01/18 06:46:10 brlcad Exp $
d83 1
a83 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.11 2006/01/18 06:46:10 brlcad Exp $ (BRL)"
d1753 1
a1753 1
/* vers.c (created by the Cakefile) */
@


14.11
log
@update copyright to 2006
@
text
@d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.10 2005/10/23 04:44:26 brlcad Exp $
d83 1
a83 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.10 2005/10/23 04:44:26 brlcad Exp $ (BRL)"
d435 3
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.9 2005/05/28 02:14:49 brlcad Exp $
d83 1
a83 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.9 2005/05/28 02:14:49 brlcad Exp $ (BRL)"
@


14.9
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d46 1
a46 1
 *  
d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.8 2005/05/08 05:27:57 brlcad Exp $
d83 1
a83 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.8 2005/05/08 05:27:57 brlcad Exp $ (BRL)"
d436 1
a436 1
		    (register vect_t h, 
d439 1
a439 1
		    (register vect_t v, 
d450 1
a450 1
		     fastf_t *elp, 
d454 1
a454 1
		     fastf_t *el, 
d503 1
a503 1
		    (register vect_t out, 
d510 1
a510 1
		    (mat_t mat, 
d515 1
a515 1
		     const mat_t b, 
d690 1
a690 1
		    (fastf_t *dist_sq, 
d702 1
a702 1
		    (fastf_t *t, fastf_t *u, 	
d778 1
a778 1
		     const vect_t d, 
d933 1
a933 1
 * Quaternion support 
d994 1
a994 1
 * flag is set (bn_rand_halftab is set to all 0's).  The numbers from 
d1015 1
a1015 1
/* random numbers between -0.5 and 0.5, except when benchmark flag is set, 
d1071 1
a1071 1
		     unsigned long depth, 
d1077 1
a1077 1
		     float *buf, 
d1079 1
a1079 1
		     unsigned long depth, 
d1083 1
a1083 1
		     float *buf, 
d1085 1
a1085 1
		     unsigned long depth, 
d1091 1
a1091 1
		     char *buf, 
d1093 1
a1093 1
		     unsigned long depth, 
d1096 1
a1096 1
		    (char *tbuf, char *buf, 
d1098 1
a1098 1
		     unsigned long depth, 
d1103 1
a1103 1
		    (short *tbuf, short *buf, 
d1105 1
a1105 1
		     unsigned long depth, 
d1108 1
a1108 1
		    (short *tbuf, short *buf, 
d1110 1
a1110 1
		     unsigned long depth, 
d1115 1
a1115 1
		    (int *tbuf, int *buf, 
d1117 1
a1117 1
		     unsigned long depth, 
d1121 1
a1121 1
		     int *buf, 
d1123 1
a1123 1
		     unsigned long depth, 
d1128 1
a1128 1
		    (long *tbuf, long *buf, 
d1130 1
a1130 1
		     unsigned long depth, 
d1133 1
a1133 1
		    (long *tbuf, long *buf, 
d1135 1
a1135 1
		     unsigned long depth, 
d1143 1
a1143 1
		     double *buf, 
d1145 1
a1145 1
		     unsigned long depth, 
d1149 1
a1149 1
		     double *buf, 
d1151 1
a1151 1
		     unsigned long depth, 
d1157 1
a1157 1
		     float *buf, 
d1159 1
a1159 1
		     unsigned long depth, 
d1163 1
a1163 1
		     float *buf, 
d1165 1
a1165 1
		     unsigned long depth, 
d1171 1
a1171 1
		     char *buf, 
d1173 1
a1173 1
		     unsigned long depth, 
d1177 1
a1177 1
		     char *buf, 
d1179 1
a1179 1
		     unsigned long depth, 
d1185 1
a1185 1
		     short *buf, 
d1187 1
a1187 1
		     unsigned long depth, 
d1191 1
a1191 1
		     short *buf, 
d1193 1
a1193 1
		     unsigned long depth, 
d1199 1
a1199 1
		     int *buf, 
d1201 1
a1201 1
		     unsigned long depth, 
d1205 1
a1205 1
		     int *buf, 
d1207 1
a1207 1
		     unsigned long depth, 
d1213 1
a1213 1
		     long *buf, 
d1215 1
a1215 1
		     unsigned long depth, 
d1219 1
a1219 1
		     long *buf, 
d1221 1
a1221 1
		     unsigned long depth, 
d1229 1
a1229 1
		     double *buf, 
d1231 1
a1231 1
		     unsigned long width, 
d1236 1
a1236 1
		     double *buf, 
d1238 1
a1238 1
		     unsigned long width, 
d1240 1
a1240 1
		     unsigned long subimage_size, 
d1245 1
a1245 1
		     float *buf, 
d1247 1
a1247 1
		     unsigned long width, 
d1252 1
a1252 1
		     float *buf, 
d1254 1
a1254 1
		     unsigned long width, 
d1256 1
a1256 1
		     unsigned long subimage_size, 
d1261 1
a1261 1
		     char *buf, 
d1263 1
a1263 1
		     unsigned long width, 
d1268 1
a1268 1
		     char *buf, 
d1270 1
a1270 1
		     unsigned long width, 
d1272 1
a1272 1
		     unsigned long subimage_size, 
d1277 1
a1277 1
		     short *buf, 
d1279 1
a1279 1
		     unsigned long width, 
d1284 1
a1284 1
		     short *buf, 
d1286 1
a1286 1
		     unsigned long width, 
d1288 1
a1288 1
		     unsigned long subimage_size, 
d1293 1
a1293 1
		     int *buf, 
d1295 1
a1295 1
		     unsigned long width, 
d1300 1
a1300 1
		     int *buf, 
d1302 1
a1302 1
		     unsigned long width, 
d1304 1
a1304 1
		     unsigned long subimage_size, 
d1309 1
a1309 1
		     long *buf, 
d1311 1
a1311 1
		     unsigned long width, 
d1316 1
a1316 1
		     long *buf, 
d1318 1
a1318 1
		     unsigned long width, 
d1320 1
a1320 1
		     unsigned long subimage_size, 
@


14.9.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d46 1
a46 1
 *
d63 1
a63 1
 *  $Header$
d83 1
a83 1
#define BN_H_VERSION	"@@(#)$Header$ (BRL)"
d436 1
a436 1
		    (register vect_t h,
d439 1
a439 1
		    (register vect_t v,
d450 1
a450 1
		     fastf_t *elp,
d454 1
a454 1
		     fastf_t *el,
d503 1
a503 1
		    (register vect_t out,
d510 1
a510 1
		    (mat_t mat,
d515 1
a515 1
		     const mat_t b,
d690 1
a690 1
		    (fastf_t *dist_sq,
d702 1
a702 1
		    (fastf_t *t, fastf_t *u,
d778 1
a778 1
		     const vect_t d,
d933 1
a933 1
 * Quaternion support
d994 1
a994 1
 * flag is set (bn_rand_halftab is set to all 0's).  The numbers from
d1015 1
a1015 1
/* random numbers between -0.5 and 0.5, except when benchmark flag is set,
d1071 1
a1071 1
		     unsigned long depth,
d1077 1
a1077 1
		     float *buf,
d1079 1
a1079 1
		     unsigned long depth,
d1083 1
a1083 1
		     float *buf,
d1085 1
a1085 1
		     unsigned long depth,
d1091 1
a1091 1
		     char *buf,
d1093 1
a1093 1
		     unsigned long depth,
d1096 1
a1096 1
		    (char *tbuf, char *buf,
d1098 1
a1098 1
		     unsigned long depth,
d1103 1
a1103 1
		    (short *tbuf, short *buf,
d1105 1
a1105 1
		     unsigned long depth,
d1108 1
a1108 1
		    (short *tbuf, short *buf,
d1110 1
a1110 1
		     unsigned long depth,
d1115 1
a1115 1
		    (int *tbuf, int *buf,
d1117 1
a1117 1
		     unsigned long depth,
d1121 1
a1121 1
		     int *buf,
d1123 1
a1123 1
		     unsigned long depth,
d1128 1
a1128 1
		    (long *tbuf, long *buf,
d1130 1
a1130 1
		     unsigned long depth,
d1133 1
a1133 1
		    (long *tbuf, long *buf,
d1135 1
a1135 1
		     unsigned long depth,
d1143 1
a1143 1
		     double *buf,
d1145 1
a1145 1
		     unsigned long depth,
d1149 1
a1149 1
		     double *buf,
d1151 1
a1151 1
		     unsigned long depth,
d1157 1
a1157 1
		     float *buf,
d1159 1
a1159 1
		     unsigned long depth,
d1163 1
a1163 1
		     float *buf,
d1165 1
a1165 1
		     unsigned long depth,
d1171 1
a1171 1
		     char *buf,
d1173 1
a1173 1
		     unsigned long depth,
d1177 1
a1177 1
		     char *buf,
d1179 1
a1179 1
		     unsigned long depth,
d1185 1
a1185 1
		     short *buf,
d1187 1
a1187 1
		     unsigned long depth,
d1191 1
a1191 1
		     short *buf,
d1193 1
a1193 1
		     unsigned long depth,
d1199 1
a1199 1
		     int *buf,
d1201 1
a1201 1
		     unsigned long depth,
d1205 1
a1205 1
		     int *buf,
d1207 1
a1207 1
		     unsigned long depth,
d1213 1
a1213 1
		     long *buf,
d1215 1
a1215 1
		     unsigned long depth,
d1219 1
a1219 1
		     long *buf,
d1221 1
a1221 1
		     unsigned long depth,
d1229 1
a1229 1
		     double *buf,
d1231 1
a1231 1
		     unsigned long width,
d1236 1
a1236 1
		     double *buf,
d1238 1
a1238 1
		     unsigned long width,
d1240 1
a1240 1
		     unsigned long subimage_size,
d1245 1
a1245 1
		     float *buf,
d1247 1
a1247 1
		     unsigned long width,
d1252 1
a1252 1
		     float *buf,
d1254 1
a1254 1
		     unsigned long width,
d1256 1
a1256 1
		     unsigned long subimage_size,
d1261 1
a1261 1
		     char *buf,
d1263 1
a1263 1
		     unsigned long width,
d1268 1
a1268 1
		     char *buf,
d1270 1
a1270 1
		     unsigned long width,
d1272 1
a1272 1
		     unsigned long subimage_size,
d1277 1
a1277 1
		     short *buf,
d1279 1
a1279 1
		     unsigned long width,
d1284 1
a1284 1
		     short *buf,
d1286 1
a1286 1
		     unsigned long width,
d1288 1
a1288 1
		     unsigned long subimage_size,
d1293 1
a1293 1
		     int *buf,
d1295 1
a1295 1
		     unsigned long width,
d1300 1
a1300 1
		     int *buf,
d1302 1
a1302 1
		     unsigned long width,
d1304 1
a1304 1
		     unsigned long subimage_size,
d1309 1
a1309 1
		     long *buf,
d1311 1
a1311 1
		     unsigned long width,
d1316 1
a1316 1
		     long *buf,
d1318 1
a1318 1
		     unsigned long width,
d1320 1
a1320 1
		     unsigned long subimage_size,
@


14.8
log
@consolidate the __cplusplus external declaration sections that protect C functions from C++ name mangling by using the same __BEGIN_DECLS and __END_DECLS macros in our headers (3rd party are mostly left alone).  works indentation a little too.
@
text
@d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.7 2005/05/04 04:05:59 brlcad Exp $
d72 1
a72 1
#  if defined(WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
d83 1
a83 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.7 2005/05/04 04:05:59 brlcad Exp $ (BRL)"
@


14.7
log
@make sure the prototype matches the new usage of unsigned long image dimensions
@
text
@d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.6 2005/03/28 05:17:14 bob1961 Exp $
d66 4
a69 5
#ifndef SEEN_BN_H
#define SEEN_BN_H seen
#ifdef __cplusplus
extern "C" {
#endif
d72 9
a80 9
#if defined(WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#ifdef BN_EXPORT_DLL
#define BN_EXPORT __declspec(dllexport)
#else
#define BN_EXPORT __declspec(dllimport)
#endif
#else
#define BN_EXPORT
#endif
d83 1
a83 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.6 2005/03/28 05:17:14 bob1961 Exp $ (BRL)"
d1754 2
a1755 3
#ifdef __cplusplus
}
#endif
@


14.6
log
@Modify bn_common_name_size declaration: add "const" specifier to "name" parameter
@
text
@d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.5 2005/03/24 16:25:41 bob1961 Exp $
d84 1
a84 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.5 2005/03/24 16:25:41 bob1961 Exp $ (BRL)"
d143 2
a144 2
		    (int *width,
		     int *height,
d148 2
a149 2
		    (int *width,
		     int *height,
d152 3
a154 3
		    (int *width,
		     int *height,
		     int num_pixels));
@


14.5
log
@Add another condition for deciding how to define BN_EXPORT (allows for static compile); Declare Bn_d_Init
@
text
@d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.4 2005/01/30 20:30:10 brlcad Exp $
d84 1
a84 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.4 2005/01/30 20:30:10 brlcad Exp $ (BRL)"
d150 1
a150 1
		     char *name));
@


14.4
log
@update copyright to 2005
@
text
@d63 1
a63 1
 *  $Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.3 2004/12/21 06:23:18 morrison Exp $
d72 2
a73 1
#if defined(WIN32) && !defined(__CYGWIN__)
d82 1
d84 1
a84 1
#define BN_H_VERSION	"@@(#)$Header: /cvsroot/brlcad/brlcad/include/bn.h,v 14.3 2004/12/21 06:23:18 morrison Exp $ (BRL)"
d284 4
d290 1
@


14.3
log
@use perl to M-q format wrapping
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d63 1
a63 1
 *  $Header: /cvs/brlcad/include/bn.h,v 14.2 2004/12/21 06:06:38 butler Exp $
d82 1
a82 1
#define BN_H_VERSION	"@@(#)$Header: /cvs/brlcad/include/bn.h,v 14.2 2004/12/21 06:06:38 butler Exp $ (BRL)"
@


14.2
log
@LGPL license changes
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU Lesser General Public License
 * along with this file; see the file named COPYING for more
d63 1
a63 1
 *  $Header: /cvs/brlcad/include/bn.h,v 14.1 2004/11/16 19:42:10 morrison Exp $
d82 1
a82 1
#define BN_H_VERSION	"@@(#)$Header: /cvs/brlcad/include/bn.h,v 14.1 2004/11/16 19:42:10 morrison Exp $ (BRL)"
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			B N . H
a49 3
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d63 1
a63 1
 *  $Header: /cvs/brlcad/include/bn.h,v 1.6 2004/10/04 14:00:44 morrison Exp $
d82 1
a82 1
#define BN_H_VERSION	"@@(#)$Header: /cvs/brlcad/include/bn.h,v 1.6 2004/10/04 14:00:44 morrison Exp $ (BRL)"
@


1.6
log
@lets not talk about the previous h/ header directory any more
@
text
@d47 1
a47 1
 *  $Header: /cvs/brlcad/include/bn.h,v 1.5 2004/08/03 20:42:29 morrison Exp $
d66 1
a66 1
#define BN_H_VERSION	"@@(#)$Header: /cvs/brlcad/include/bn.h,v 1.5 2004/08/03 20:42:29 morrison Exp $ (BRL)"
d1736 10
@


1.5
log
@apply Bob's provided patches from 20040630.  this includes itcl namespace scoping, windows DLL exporting, and wdb arb edit support
@
text
@d47 1
a47 1
 *  $Header: /cvs/brlcad/include/bn.h,v 1.2 2004/06/09 14:19:56 morrison Exp $
d66 1
a66 1
#define BN_H_VERSION	"@@(#)$Header: /cvs/brlcad/include/bn.h,v 1.2 2004/06/09 14:19:56 morrison Exp $ (BRL)"
d1353 1
a1353 1
 *	h/spectrum.h, spectrum.c
@


1.4
log
@refer to the common.h header now instead of config.h
@
text
@d47 1
a47 1
 *  $Header: /cvs/brlcad/include/bn.h,v 1.3 2004/07/25 04:12:21 morrison Exp $
d56 11
a66 1
#define BN_H_VERSION	"@@(#)$Header: /cvs/brlcad/include/bn.h,v 1.3 2004/07/25 04:12:21 morrison Exp $ (BRL)"
d124 13
a136 10
BU_EXTERN(int			bn_common_file_size, (int *width,
						      int *height,
						      const char *filename,
						      int pixel_size));
BU_EXTERN(int			bn_common_name_size, (int *width,
						      int *height,
						      char *name));
BU_EXTERN(int			bn_common_image_size, (int *width,
						      int *height,
						      int num_pixels));
d141 93
a233 30
void anim_v_permute(mat_t m);
void anim_v_unpermute(mat_t m);
void anim_tran(mat_t m);
int anim_mat2zyx(const mat_t viewrot, vect_t angle);
int anim_mat2ypr(mat_t viewrot, vect_t angle);
int anim_mat2quat(quat_t quat, const mat_t viewrot);
void anim_ypr2mat(mat_t m, const vect_t a);
void anim_ypr2vmat(mat_t m, const vect_t a);
void anim_y_p_r2mat(mat_t m, double y, double p, double r);
void anim_dy_p_r2mat(mat_t m, double y, double p, double r);
void anim_dy_p_r2vmat(mat_t m, double yaw, double pch, double rll);
void anim_x_y_z2mat(mat_t m, double x, double y, double z);
void anim_dx_y_z2mat(mat_t m, double x, double y, double z);
void anim_zyx2mat(mat_t m, const vect_t a);
void anim_z_y_x2mat(mat_t m, double x, double y, double z);
void anim_dz_y_x2mat(mat_t m, double x, double y, double z);
void anim_quat2mat(mat_t m, const quat_t qq);
void anim_dir2mat(mat_t m, const vect_t d, const vect_t d2);
void anim_dirn2mat(mat_t m, const vect_t dx, const vect_t dn);
int anim_steer_mat(mat_t  mat, vect_t point, int end);
void anim_add_trans(mat_t m, const vect_t post, const vect_t pre);
void anim_rotatez(fastf_t a, vect_t d);
void anim_mat_print(FILE *fp, const mat_t m, int s_colon);
void anim_mat_printf(
	FILE *fp,
	const mat_t m,
	const char *formstr,
	const char *linestr,
	const char *endstr);
void anim_view_rev(mat_t m);
d238 24
a261 8
int bn_decode_mat(mat_t m, const char *str);
int bn_decode_quat(quat_t q, const char *str);
int bn_decode_vect( vect_t v, const char *str );
int bn_decode_hvect(hvect_t v, const char *str);
void bn_encode_mat(struct bu_vls *vp, const mat_t m);
void bn_encode_quat(struct bu_vls *vp, const quat_t q);
void bn_encode_vect(struct bu_vls *vp, const vect_t v);
void bn_encode_hvect(struct bu_vls *vp, const hvect_t v);
d264 6
a269 3
extern void bn_tcl_setup();
extern int Bn_Init();
extern void bn_tcl_mat_print();
d310 6
a315 2
BU_EXTERN(void			bn_cx_div, (bn_complex_t *ap, const bn_complex_t *bp) );
BU_EXTERN(void			bn_cx_sqrt, (bn_complex_t *op, const bn_complex_t *ip) );
d322 1
a322 1
extern const mat_t 	bn_mat_identity;
d324 9
a332 3
BU_EXTERN(void		bn_mat_print, (const char *title, const mat_t m));
BU_EXTERN(void		bn_mat_print_guts, (const char *title, const mat_t m, char *buf));
BU_EXTERN(double	bn_atan2, (double x, double y));
d335 7
a341 3
BU_EXTERN(void		bn_mat_zero, (mat_t m));
BU_EXTERN(void		bn_mat_idn, (mat_t m));
BU_EXTERN(void		bn_mat_copy, (register mat_t dest,register const mat_t src));
d388 123
a510 60
BU_EXTERN(void		bn_mat_mul, (register mat_t o, register const mat_t a,
					register const mat_t b));
BU_EXTERN(void		bn_mat_mul2, (register const mat_t i, register mat_t o));
BU_EXTERN(void		bn_mat_mul3, (mat_t o, const mat_t a, const mat_t b,
					const mat_t c));
void			bn_mat_mul4(
				mat_t		o,
				const mat_t	a,
				const mat_t	b,
				const mat_t	c,
				const mat_t	d);
BU_EXTERN(void		bn_matXvec, (register hvect_t ov,
					register const mat_t im,
					register const hvect_t iv));
BU_EXTERN(void		bn_mat_inv, (register mat_t output, const mat_t input));
BU_EXTERN(void		bn_vtoh_move, (register vect_t h, 
					register const vect_t v));
BU_EXTERN(void		bn_htov_move, (register vect_t v, 
					register const vect_t h));
BU_EXTERN(void		bn_mat_trn, (mat_t om, register const mat_t im));
BU_EXTERN(void		bn_mat_ae, (register mat_t m, double azimuth,
					double elev));
BU_EXTERN(void		bn_ae_vec, (fastf_t *azp, fastf_t *elp, 
					const vect_t v));
BU_EXTERN(void 		bn_aet_vec, ( fastf_t *az, fastf_t *el, 
					fastf_t *twist, vect_t vec_ae,
					vect_t vec_twist, fastf_t accuracy));

BU_EXTERN(void		bn_mat_angles, (register mat_t mat, double alpha,
					double beta, double ggamma ));
BU_EXTERN(void		bn_mat_angles_rad, (register mat_t mat, double alpha,
					    double beta, double ggamma ));

BU_EXTERN(void		bn_eigen2x2, ( fastf_t	*val1, fastf_t *val2,
					vect_t	vec1, vect_t vec2, fastf_t a,
					fastf_t b, fastf_t c) );

BU_EXTERN(void		bn_vec_perp, (vect_t new_vec, const vect_t old_vec));
BU_EXTERN(void		bn_mat_fromto, ( mat_t m, const vect_t from,
					const vect_t to));
BU_EXTERN(void		bn_mat_xrot, (mat_t m, double sinx, double cosx));
BU_EXTERN(void		bn_mat_yrot, (mat_t m, double siny, double cosy));
BU_EXTERN(void		bn_mat_zrot, (mat_t m, double sinz, double cosz));
BU_EXTERN(void		bn_mat_lookat, (mat_t rot, const vect_t dir, int yflip));
BU_EXTERN(void		bn_vec_ortho, (register vect_t out, 
					register const vect_t in));
BU_EXTERN(int		bn_mat_scale_about_pt, (mat_t mat, const point_t pt,
					const double scale));
BU_EXTERN(void		bn_mat_xform_about_pt, (mat_t mat, 
					const mat_t xform,
					const point_t pt));
BU_EXTERN(int		bn_mat_is_equal, (const mat_t a, const mat_t b, 
					const struct bn_tol *tol));
BU_EXTERN(int		bn_mat_is_identity, (const mat_t m));
BU_EXTERN(void		bn_mat_arb_rot, ( mat_t m, const point_t pt,
					const vect_t dir, const fastf_t ang));
BU_EXTERN(matp_t	bn_mat_dup, (const mat_t in));
BU_EXTERN(int		bn_mat_ck, (const char *title, const mat_t m));
BU_EXTERN(fastf_t	bn_mat_det3, (const mat_t m));
BU_EXTERN(fastf_t	bn_mat_determinant, (const mat_t m));
d512 2
a513 1
BU_EXTERN(int		bn_mat_is_non_unif, (const mat_t m));
d551 16
a566 7
BU_EXTERN(struct bn_unif *	bn_unif_init, (long setseed, int method));
BU_EXTERN(void			bn_unif_free, (struct bn_unif *p));
BU_EXTERN(long			bn_unif_long_fill, (struct bn_unif *p));
BU_EXTERN(double		bn_unif_double_fill, (struct bn_unif *p));
BU_EXTERN(struct bn_gauss *	bn_gauss_init, (long setseed, int method));
BU_EXTERN(void			bn_gauss_free, (struct bn_gauss *p));
BU_EXTERN(double		bn_gauss_fill, (struct bn_gauss *p));
d604 4
a607 2
BU_EXTERN(void		bn_noise_init, () );
BU_EXTERN(double	bn_noise_perlin, (point_t pt) );
d609 25
a633 11
BU_EXTERN(void		bn_noise_vec, (point_t point, point_t result) );
BU_EXTERN(double	bn_noise_fbm, (point_t point, double h_val,
				double lacunarity, double octaves) );
BU_EXTERN(double	bn_noise_turb, (point_t point, double h_val,
				double lacunarity, double octaves ) );
BU_EXTERN(double	bn_noise_mf, (point_t point, double h_val,
				double lacunarity, double octaves,
				double offset) );
BU_EXTERN(double	bn_noise_ridged, (point_t point, double h_val,
				double lacunarity, double octaves,
				double offset) );
d642 201
a842 111
extern int bn_distsq_line3_line3(fastf_t dist[3],
				 point_t P,
				 vect_t d,
				 point_t Q,
				 vect_t e,
				 point_t pt1,
				 point_t pt2);

BU_EXTERN(int		bn_dist_pt3_lseg3, (fastf_t *dist, point_t pca,
				const point_t a, const point_t b,
				const point_t p, const struct bn_tol *tol));
BU_EXTERN(int		bn_3pts_collinear, ( point_t a, point_t b, point_t c,
				const struct bn_tol *tol));
BU_EXTERN(int		bn_pt3_pt3_equal, ( const point_t a, const point_t b,
				const struct bn_tol *tol));
BU_EXTERN(int		bn_dist_pt2_lseg2, ( fastf_t *dist_sq, 
				fastf_t pca[2], const point_t a,
				const point_t b, const point_t p,
				const struct bn_tol *tol));
BU_EXTERN(int		bn_isect_lseg3_lseg3, ( fastf_t *dist,
				const point_t p, const vect_t pdir,
				const point_t q, const vect_t qdir,
				const struct bn_tol *tol));
BU_EXTERN(int		bn_isect_line3_line3, (fastf_t *t, fastf_t *u, 	
				const point_t p, const vect_t d,
				const point_t a, const vect_t c,
				const struct bn_tol *tol));
BU_EXTERN(int		bn_2line3_colinear, ( const point_t p1,
				const vect_t d1, const point_t p2,
				const vect_t d2, double range,
				const struct bn_tol *tol));
BU_EXTERN(int		bn_isect_pt2_lseg2, ( fastf_t *dist, const point_t a,
				const point_t b, const point_t p,
				const struct bn_tol *tol));
BU_EXTERN(int		bn_isect_line2_lseg2, (fastf_t *dist, const point_t p,
				const vect_t d, const point_t a,
				const vect_t c, const struct bn_tol *tol));
BU_EXTERN(int		bn_isect_lseg2_lseg2, (fastf_t *dist, const point_t p,
				const vect_t pdir, const point_t q,
				const vect_t qdir, const struct bn_tol *tol));
BU_EXTERN(int		bn_isect_line2_line2, ( fastf_t *dist,
				const point_t p, const vect_t d,
				const point_t a, const vect_t c,
				const struct bn_tol *tol));
BU_EXTERN(double	bn_dist_pt3_pt3, (const point_t a, const point_t b));
BU_EXTERN(int		bn_3pts_distinct, (const point_t a, const point_t b,
				const point_t c, const struct bn_tol *tol) );
BU_EXTERN(int		bn_mk_plane_3pts, (plane_t plane, const point_t a,
				const point_t b, const point_t c,
				const struct bn_tol *tol) );
BU_EXTERN(int		bn_mkpoint_3planes, (point_t pt, const plane_t a,
				const plane_t b, const plane_t c) );
BU_EXTERN(int		bn_isect_line3_plane, (fastf_t *dist,
				const point_t pt,
				const vect_t dir,
				const plane_t plane,
				const struct bn_tol *tol) );
BU_EXTERN(int		bn_isect_2planes, (point_t pt, vect_t dir,
				const plane_t a, const plane_t b,
				const vect_t rpp_min,
				const struct bn_tol *tol) );
BU_EXTERN(int		bn_isect_2lines, (fastf_t *t, fastf_t *u,
				const point_t p, const vect_t d, 
				const point_t a, const vect_t c,
				const struct bn_tol *tol) );
BU_EXTERN(int		bn_isect_line_lseg, (fastf_t *t, const point_t p,
				const vect_t d, const point_t a,
				const point_t b, const struct bn_tol *tol) );
BU_EXTERN(double	bn_dist_line3_pt3, (const point_t pt,
				const vect_t dir, const point_t a) );
BU_EXTERN(double	bn_distsq_line3_pt3, (const point_t pt,
				const vect_t dir, const point_t a));
BU_EXTERN(double	bn_dist_line_origin, (const point_t pt,
				const vect_t dir) );
BU_EXTERN(double	bn_dist_line2_point2, (const point_t pt,
				const vect_t dir, const point_t a));
BU_EXTERN(double	bn_distsq_line2_point2, (const point_t pt,
				const vect_t dir, const point_t a));
BU_EXTERN(double	bn_area_of_triangle, (const point_t a,
				const point_t b, const point_t c) );
BU_EXTERN(int		bn_isect_pt_lseg, (fastf_t *dist, const point_t a,
				const point_t b, const point_t p,
				const struct bn_tol *tol) );
BU_EXTERN(double	bn_dist_pt_lseg, (point_t pca, const point_t a,
				const point_t b, const point_t p,
				const struct bn_tol *tol) );
BU_EXTERN(void		bn_rotate_bbox, (point_t omin, point_t omax,
				const mat_t mat, const point_t imin,
				const point_t imax));
BU_EXTERN(void		bn_rotate_plane, (plane_t oplane, const mat_t mat,
				const plane_t iplane));
BU_EXTERN(int		bn_coplanar, (const plane_t a, const plane_t b,
				const struct bn_tol *tol));
BU_EXTERN(double	bn_angle_measure, (vect_t vec, const vect_t x_dir,
				const vect_t y_dir));
BU_EXTERN(double	bn_dist_pt3_along_line3, (const point_t	p,
				const vect_t d, const point_t x));
BU_EXTERN(double	bn_dist_pt2_along_line2, (const point_t p,
				const vect_t d, const point_t x));
BU_EXTERN(int		bn_between, (double left, double mid,
				double right, const struct bn_tol *tol));
int bn_does_ray_isect_tri(
	const point_t pt,
	const vect_t dir,
	const point_t V,
	const point_t A,
	const point_t B,
	point_t	inter);
BU_EXTERN(int		bn_hlf_class, (const plane_t half_eqn,
				       const vect_t min, const vect_t max,
				       const struct bn_tol *tol));
d849 4
a852 2
BU_EXTERN(int			bn_isect_planes, (point_t pt,
				const plane_t planes[], const int pl_count));
d871 36
a906 26
BU_EXTERN(struct bn_poly *	bn_poly_mul, (struct bn_poly *product,
				const struct bn_poly *m1, const struct bn_poly *m2));
BU_EXTERN(struct bn_poly *	bn_poly_scale, (struct bn_poly *eqn,
				double factor));
BU_EXTERN(struct bn_poly *	bn_poly_add, (struct bn_poly *sum,
				const struct bn_poly *poly1, const struct bn_poly *poly2));
BU_EXTERN(struct bn_poly *	bn_poly_sub, (struct bn_poly *diff,
				const struct bn_poly	*poly1,
				const struct bn_poly	*poly2));
BU_EXTERN(void			bn_poly_synthetic_division, (
				struct bn_poly *quo, struct bn_poly *rem,
				const struct bn_poly	*dvdend,
				const struct bn_poly	*dvsor));
BU_EXTERN(int			bn_poly_quadratic_roots, (
				struct bn_complex	roots[],
				const struct bn_poly	*quadrat));
BU_EXTERN(int			bn_poly_cubic_roots, (
				struct bn_complex	roots[],
				const struct bn_poly	*eqn));
BU_EXTERN(int			bn_poly_quartic_roots, (
				struct bn_complex	roots[],
				const struct bn_poly	*eqn));
BU_EXTERN(void			bn_pr_poly, (const char *title,
				const struct bn_poly	*eqn));
BU_EXTERN(void			bn_pr_roots, (const char *title,
				const struct bn_complex	roots[], int n));
d914 41
a954 12
BU_EXTERN(void quat_mat2quat, (quat_t quat, const mat_t mat));
BU_EXTERN(void quat_quat2mat, (mat_t mat, const quat_t quat));
BU_EXTERN(double quat_distance, (const quat_t q1, const quat_t q2));
BU_EXTERN(void quat_double, (quat_t qout, const quat_t q1, const quat_t q2));
BU_EXTERN(void quat_bisect, (quat_t qout, const quat_t q1, const quat_t q2));
BU_EXTERN(void quat_slerp, (quat_t qout, const quat_t q1, const quat_t q2, double f));
BU_EXTERN(void quat_sberp, (quat_t qout, const quat_t q1, const quat_t qa, const quat_t qb,
			    const quat_t q2, double f));
BU_EXTERN(void quat_make_nearest, (quat_t q1, const quat_t q2));
BU_EXTERN(void quat_print, (const char *title, const quat_t quat));
BU_EXTERN(void quat_exp, (quat_t out, const quat_t in));
BU_EXTERN(void quat_log, (quat_t out, const quat_t in));
d979 1
a979 1
extern const float bn_rand_table[BN_RAND_TABSIZE];
d997 2
a998 2
extern int bn_randhalftabsize;
extern float bn_rand_halftab[BN_RANDHALFTABSIZE];
d1009 1
a1009 1
		      (bn_randhalftabsize-1) ) ]
d1015 1
a1015 1
extern double bn_sin_scale;
d1018 2
a1019 2
	(-bn_sin_table[(int)((0.5- (_a)*bn_sin_scale))&(BN_SINTABSIZE-1)] ) )
extern const float bn_sin_table[BN_SINTABSIZE];
d1021 1
a1021 1
extern void bn_mathtab_constant();
d1039 261
a1299 135
BU_EXTERN(void	bn_wlt_haar_1d_double_decompose, (double *tbuf, double *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_1d_double_reconstruct, (double *tbuf, double *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_1d_float_decompose, (float *tbuf, float *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_1d_float_reconstruct, (float *tbuf, float *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_1d_char_decompose, (char *tbuf, char *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_1d_char_reconstruct, (char *tbuf, char *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_1d_short_decompose, (short *tbuf, short *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_1d_short_reconstruct, (short *tbuf, short *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_1d_int_decompose, (int *tbuf, int *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_1d_int_reconstruct, (int *tbuf, int *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_1d_long_decompose, (long *tbuf, long *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_1d_long_reconstruct, (long *tbuf, long *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));



BU_EXTERN(void	bn_wlt_haar_2d_double_decompose, (double *tbuf, double *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_double_reconstruct, (double *tbuf, double *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_float_decompose, (float *tbuf, float *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_float_reconstruct, (float *tbuf, float *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_char_decompose, (char *tbuf, char *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_char_reconstruct, (char *tbuf, char *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_short_decompose, (short *tbuf, short *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_short_reconstruct, (short *tbuf, short *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_int_decompose, (int *tbuf, int *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_int_reconstruct, (int *tbuf, int *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_long_decompose, (long *tbuf, long *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_long_reconstruct, (long *tbuf, long *buf, \
			unsigned long dimen, unsigned long depth, \
			unsigned long subimage_size, unsigned long limit ));



BU_EXTERN(void	bn_wlt_haar_2d_double_decompose2, (double *tbuf, double *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_double_reconstruct2, (double *tbuf, double *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long subimage_size, \
                        unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_float_decompose2, (float *tbuf, float *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_float_reconstruct2, (float *tbuf, float *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long subimage_size, \
                        unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_char_decompose2, (char *tbuf, char *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_char_reconstruct2, (char *tbuf, char *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long subimage_size, \
                        unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_short_decompose2, (short *tbuf, short *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_short_reconstruct2, (short *tbuf, short *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long subimage_size, \
		        unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_int_decompose2, (int *tbuf, int *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_int_reconstruct2, (int *tbuf, int *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long subimage_size, \
                        unsigned long limit ));

BU_EXTERN(void	bn_wlt_haar_2d_long_decompose2, (long *tbuf, long *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long limit ));
BU_EXTERN(void	bn_wlt_haar_2d_long_reconstruct2, (long *tbuf, long *buf, \
			unsigned long dimen, unsigned long width, \
			unsigned long height, unsigned long subimage_size, \
			unsigned long limit ));
d1304 8
a1311 8
extern const double bn_pi;
extern const double bn_twopi;
extern const double bn_halfpi;
extern const double bn_invpi;
extern const double bn_inv2pi;
extern const double bn_inv255;
extern const double bn_degtorad;
extern const double bn_radtodeg;
d1394 1
a1394 1
			sizeof(fastf_t)*((_table)->nx-1) )
d1409 144
a1552 107
BU_EXTERN( void			bn_table_free, (struct bn_table	*tabp));
BU_EXTERN( void			bn_tabdata_free, (struct bn_tabdata *data));
BU_EXTERN( void			bn_ck_table, (const struct bn_table *tabp));
BU_EXTERN( struct bn_table	*bn_table_make_uniform, (int num, double first,
					double last));
BU_EXTERN( void			bn_tabdata_add, (struct bn_tabdata *out,
					const struct bn_tabdata *in1,
					const struct bn_tabdata *in2));
BU_EXTERN( void			bn_tabdata_mul, (struct bn_tabdata *out,
					const struct bn_tabdata *in1,
					const struct bn_tabdata *in2));
BU_EXTERN( void			bn_tabdata_mul3, (struct bn_tabdata *out,
					const struct bn_tabdata	*in1,
					const struct bn_tabdata	*in2,
					const struct bn_tabdata	*in3));
BU_EXTERN( void			bn_tabdata_incr_mul3_scale,
					(struct bn_tabdata *out,
					const struct bn_tabdata	*in1,
					const struct bn_tabdata	*in2,
					const struct bn_tabdata	*in3,
					double scale));
BU_EXTERN( void			bn_tabdata_incr_mul2_scale,
					(struct bn_tabdata *out,
					const struct bn_tabdata	*in1,
					const struct bn_tabdata	*in2,
					double scale));
BU_EXTERN( void			bn_tabdata_scale, (struct bn_tabdata *out,
					const struct bn_tabdata *in1,
					double scale));
BU_EXTERN( void			bn_table_scale, (struct bn_table *tabp,
					double scale));
BU_EXTERN( void			bn_tabdata_join1, (struct bn_tabdata *out,
					const struct bn_tabdata *in1,
					double scale,
					const struct bn_tabdata *in2));
BU_EXTERN( void			bn_tabdata_join2, (struct bn_tabdata *out,
					const struct bn_tabdata *in1,
					double scale2,
					const struct bn_tabdata *in2,
					double scale3,
					const struct bn_tabdata *in3));
BU_EXTERN( void			bn_tabdata_blend2, (struct bn_tabdata *out,
					double scale1,
					const struct bn_tabdata *in1,
					double scale2,
					const struct bn_tabdata *in2));
BU_EXTERN( void			bn_tabdata_blend3, (struct bn_tabdata *out,
					double scale1,
					const struct bn_tabdata *in1,
					double scale2,
					const struct bn_tabdata *in2,
					double scale3,
					const struct bn_tabdata *in3));
BU_EXTERN( double		bn_tabdata_area1, (const struct bn_tabdata *in));
BU_EXTERN( double		bn_tabdata_area2, (const struct bn_tabdata *in));
BU_EXTERN( double		bn_tabdata_mul_area1, (const struct bn_tabdata *in1,
					const struct bn_tabdata	*in2));
BU_EXTERN( double		bn_tabdata_mul_area2, (const struct bn_tabdata *in1,
					const struct bn_tabdata	*in2));
BU_EXTERN( fastf_t		bn_table_lin_interp, (const struct bn_tabdata *samp,
					double wl));
BU_EXTERN( struct bn_tabdata	*bn_tabdata_resample_max, (
					const struct bn_table *newtable,
					const struct bn_tabdata *olddata));
BU_EXTERN( struct bn_tabdata	*bn_tabdata_resample_avg, (
					const struct bn_table *newtable,
					const struct bn_tabdata *olddata));
BU_EXTERN( int			bn_table_write, (const char *filename,
					const struct bn_table *tabp));
BU_EXTERN( struct bn_table	*bn_table_read, (const char *filename));
BU_EXTERN( void			bn_pr_table, (const char *title,
					const struct bn_table *tabp));
BU_EXTERN( void			bn_pr_tabdata, (const char *title,
					const struct bn_tabdata	*data));
BU_EXTERN( int			bn_print_table_and_tabdata, (const char *filename,
					const struct bn_tabdata *data));
BU_EXTERN( struct bn_tabdata	*bn_read_table_and_tabdata, (
					const char *filename));
BU_EXTERN( struct bn_tabdata	*bn_tabdata_binary_read, (const char *filename,
					int num,
					const struct bn_table *tabp));
BU_EXTERN( struct bn_tabdata	*bn_tabdata_malloc_array, (
					const struct bn_table *tabp,
					int num));
BU_EXTERN( void			bn_tabdata_copy, (struct bn_tabdata *out,
					const struct bn_tabdata *in));
BU_EXTERN(struct bn_tabdata	*bn_tabdata_dup, (const struct bn_tabdata *in));
BU_EXTERN(struct bn_tabdata	*bn_tabdata_get_constval, (double val,
					const struct bn_table	*tabp));
BU_EXTERN(void			bn_tabdata_constval, (struct bn_tabdata	*data, double val));
BU_EXTERN( void			bn_tabdata_to_tcl, (struct bu_vls *vp,
					const struct bn_tabdata	*data));
BU_EXTERN(struct bn_tabdata	*bn_tabdata_from_array, (const double *array));
BU_EXTERN( void			bn_tabdata_freq_shift, (struct bn_tabdata *out,
					const struct bn_tabdata *in,
					double offset));
BU_EXTERN( int			bn_table_interval_num_samples,
					(const struct bn_table *tabp,
					double	low, double	hi));
BU_EXTERN( int			bn_table_delete_sample_pts,
					(struct bn_table *tabp,
					int	i, int	j));
BU_EXTERN(struct bn_table	*bn_table_merge2, (const struct bn_table *a,
				const struct bn_table *b));
BU_EXTERN(struct bn_tabdata	*bn_tabdata_mk_linear_filter,
					(const struct bn_table *spectrum,
					double lower_wavelen, double upper_wavelen));
d1655 15
a1669 7
BU_EXTERN(void	bn_vlist_3string, (struct bu_list *vhead,
				struct bu_list *free_hd, const char *string,
				const point_t origin, const mat_t rot,
				double scale));
BU_EXTERN(void	bn_vlist_2string, (struct bu_list *vhead,
				struct bu_list *free_hd, const char *string,
				double x, double y, double scale, double theta));
d1697 23
a1719 9
extern struct vert_root *create_vert_tree();
extern struct vert_root *create_vert_tree_w_norms();
extern void free_vert_tree( struct vert_root *tree_root );
extern int Add_vert( double x, double y, double z, struct vert_root *tree_root, fastf_t local_tol_sq );
extern int Add_vert_and_norm( double x, double y, double z,
			      double nx, double ny, double nz,
			      struct vert_root *tree_root,
			      fastf_t local_tol_sq );
extern void clean_vert_tree( struct vert_root *tree_root );
d1723 2
a1724 1
extern void tp_setup();
d1729 1
a1729 1
extern const char		bn_version[];
@


1.3
log
@replace conf.h with new config.h
@
text
@d36 1
a36 1
 *	#include "config.h"
d47 1
a47 1
 *  $Header: /n/xoff/cvs/brlcad/include/bn.h,v 1.2 2004/06/09 14:19:56 morrison Exp $
d56 1
a56 1
#define BN_H_VERSION	"@@(#)$Header: /n/xoff/cvs/brlcad/include/bn.h,v 1.2 2004/06/09 14:19:56 morrison Exp $ (BRL)"
@


1.2
log
@start making headers include the headers they require
@
text
@d36 1
a36 1
 *	#include "conf.h"
d47 1
a47 1
 *  $Header: /n/xoff/cvs/brlcad/include/bn.h,v 1.1 2004/05/24 04:10:49 morrison Exp $
d56 1
a56 1
#define BN_H_VERSION	"@@(#)$Header: /n/xoff/cvs/brlcad/include/bn.h,v 1.1 2004/05/24 04:10:49 morrison Exp $ (BRL)"
@


1.1
log
@moved/renamed from top-level h/ to top-level include/
@
text
@d47 1
a47 1
 *  $Header$
d56 4
a59 1
#define BN_H_VERSION	"@@(#)$Header$ (BRL)"
@

