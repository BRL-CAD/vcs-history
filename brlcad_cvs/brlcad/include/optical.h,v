head	14.16;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.2
	rel-7-10-2:14.15
	rel-7-10-0:14.13
	rel-7-8-4:14.9
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.5
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.3
	rel-7-2-2:14.2;
locks; strict;
comment	@ * @;


14.16
date	2007.12.31.20.25.13;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.05.26.02.08.01;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.04.16.23.46.45;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.27.01.01.40;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.20;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.21.04.45.40;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.40;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.09.18.05.24.07;	author lbutler;	state Exp;
branches;
next	14.8;

14.8
date	2006.08.31.04.41.19;	author lbutler;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.10;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.11.13.18.22.28;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.26;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.05.28.02.14.49;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2005.05.08.05.27.57;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2005.03.28.15.39.27;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2005.03.28.06.31.27;	author bob1961;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.10;	author brlcad;	state Exp;
branches;
next	14.4.6.2;

14.4.6.2
date	2005.11.13.17.44.59;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.16
log
@header cleanup, more address removal
@
text
@/*                            O P T I C A L . H
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup liboptical */
/** @@{ */
/** @@file optical.h
 *
 * @@brief
 *  Header file for the BRL-CAD Optical Library, LIBOPTICAL.
 *
 */

#ifndef __OPTICAL_H__
#define __OPTICAL_H__

#include "common.h"

#include "bu.h"
#include "shadefuncs.h"
#include "shadework.h"

__BEGIN_DECLS

#ifndef OPTICAL_EXPORT
#  if defined(_WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#    ifdef OPTICAL_EXPORT_DLL
#      define OPTICAL_EXPORT __declspec(dllexport)
#    else
#      define OPTICAL_EXPORT __declspec(dllimport)
#    endif
#  else
#    define OPTICAL_EXPORT
#  endif
#endif


/* defined in init.c */
OPTICAL_EXPORT extern void optical_shader_init(struct mfuncs **headp);

/* stub functions useful for debugging */
/* defined in sh_text.c */
OPTICAL_EXPORT extern int mlib_zero();
OPTICAL_EXPORT extern int mlib_one();
OPTICAL_EXPORT extern void mlib_void();


/* defined in refract.c */
OPTICAL_EXPORT extern int
rr_render(register struct application *ap, struct partition *pp, struct shadework *swp);

/* defined in shade.c */
OPTICAL_EXPORT extern void
shade_inputs(struct application	*ap, const struct partition *pp, struct shadework *swp, int want);

/* defined in wray.c */
OPTICAL_EXPORT extern void
wray(register struct partition *pp, register struct application *ap, FILE *fp, const vect_t inormal);

OPTICAL_EXPORT extern void
wraypts(vect_t in, vect_t inorm, vect_t out, int id, struct application *ap, FILE *fp);

OPTICAL_EXPORT extern void
wraypaint(vect_t start, vect_t norm, int paint, struct application *ap, FILE *fp);

/* defined in shade.c */
OPTICAL_EXPORT extern int
viewshade(struct application *ap, register const struct partition *pp, register struct shadework *swp);

/* defined in vers.c */
OPTICAL_EXPORT extern const char *optical_version(void);


OPTICAL_EXPORT extern int	rdebug;

/* When in production mode, no debug checking is performed, hence the
 * R_DEBUG define causes sections of debug code to go "poof"
 */
#ifdef NO_DEBUG_CHECKING
#	define	R_DEBUG	0
#else
#	define	R_DEBUG	rdebug
#endif

/*
 *
 *
 *  Debugging flags for thr RT program itself.
 *  These flags follow the "-X" (cap X) option to the RT program.
 *  librt debugging is separately controlled.
 *
 *  @@author
 *	Michael John Muuss
 *
 */

/* These definitions are each for one bit */
/* Should be reogranized to put most useful ones first */
#define RDEBUG_HITS	0x00000001	/* 1 Print hits used by view() */
#define RDEBUG_MATERIAL	0x00000002	/* 2 Material properties */
#define RDEBUG_SHOWERR	0x00000004	/* 3 Colorful markers on errors */
#define RDEBUG_RTMEM	0x00000008	/* 4 Debug librt mem after startup */
#define RDEBUG_SHADE	0x00000010	/* 5 Shading calculation */
#define RDEBUG_PARSE	0x00000020	/* 6 Command parsing */
#define RDEBUG_LIGHT	0x00000040	/* 7 Debug lighting */
#define RDEBUG_REFRACT	0x00000080	/* 8 Debug reflection & refraction */

#define RDEBUG_STATS	0x00000200	/* 10 Print more statistics */
#define RDEBUG_RTMEM_END 0x00000400	/* 11 Print librt mem use on 'clean' */

/* These will cause binary debugging output */
#define RDEBUG_MISSPLOT	0x20000000	/* 30 plot(5) missed rays to stdout */
#define RDEBUG_RAYWRITE	0x40000000	/* 31 Ray(5V) view rays to stdout */
#define RDEBUG_RAYPLOT	0x80000000	/* 32 plot(5) rays to stdout */

/* Format string for rt_printb() */
#define RDEBUG_FORMAT	\
"\020\040RAYPLOT\037RAYWRITE\036MISSPLOT\
\013RTMEM_END\
\012STATS\010REFRACT\
\7LIGHT\6PARSE\5SHADE\4RTMEM\3SHOWERR\2MATERIAL\1HITS"


/*
 *	A Bit vector to determine how much stuff rt prints when not in
 *	debugging mode.
 *
 */
OPTICAL_EXPORT extern int	rt_verbosity;
/*	   flag_name		value		prints */
#define VERBOSE_LIBVERSIONS  0x00000001	/* Library version strings */
#define VERBOSE_MODELTITLE   0x00000002	/* model title */
#define VERBOSE_TOLERANCE    0x00000004	/* model tolerance */
#define VERBOSE_STATS	     0x00000008	/* stats about rt_gettrees() */
#define VERBOSE_FRAMENUMBER  0x00000010	/* current frame number */
#define VERBOSE_VIEWDETAIL   0x00000020	/* view specifications */
#define VERBOSE_LIGHTINFO    0x00000040	/* scene lights */
#define VERBOSE_INCREMENTAL  0x00000080	/* progressive/incremental state */
#define VERBOSE_MULTICPU     0x00000100	/* #  of CPU's to be used */
#define VERBOSE_OUTPUTFILE   0x00000200	/* name of output image */

#define VERBOSE_FORMAT \
"\012OUTPUTFILE\011MULTICPU\010INCREMENTAL\7LIGHTINFO\6VIEWDETAIL\
\5FRAMENUMBER\4STATS\3TOLERANCE\2MODELTITLE\1LIBVERSIONS"

OPTICAL_EXPORT extern double AmbientIntensity;
#ifdef RT_MULTISPECTRAL
OPTICAL_EXPORT extern struct bn_tabdata *background;
#else
OPTICAL_EXPORT extern vect_t background;
#endif

#if 0
OPTICAL_EXPORT
OPTICAL_EXPORT extern
#endif
/* defined in sh_text.c */
OPTICAL_EXPORT extern struct region env_region; /* environment map region */

/* defined in refract.c */
OPTICAL_EXPORT extern int max_bounces;
OPTICAL_EXPORT extern int max_ireflect;

struct floatpixel {
	double	ff_dist;		/**< @@brief range to ff_hitpt[], <-INFINITY for miss */
	float	ff_hitpt[3];
	struct region *ff_regp;
	int	ff_frame;		/**< @@brief >= 0 means pixel was reprojected */
	short	ff_x;			/**< @@brief screen x,y coords of first location */
	short	ff_y;
	char	ff_color[3];
};

__END_DECLS

#endif /* __OPTICAL_H__ */

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@clean up the header protections so that they are all now more consistent with one another via use of __HEADER_H__ for the define names.
@
text
@a109 4
 *  @@par Source
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
@


14.14
log
@update to the new version management routines, replace the liboptical_version global with a optical_version() call
@
text
@d29 2
a30 2
#ifndef SEEN_OPTICAL_H
#define SEEN_OPTICAL_H seen
d195 2
a196 1
#endif /* SEEN_OPTICAL_H */
@


14.13
log
@ws, test three
@
text
@d52 1
d54 1
a54 1
OPTICAL_EXPORT extern void optical_shader_init(struct mfuncs	**headp);
d58 3
a60 2
OPTICAL_EXPORT extern int mlib_zero(), mlib_one();
OPTICAL_EXPORT extern void	mlib_void();
d65 1
a65 3
rr_render(register struct application *ap,
	  struct partition	*pp,
	  struct shadework	*swp);
d69 1
a69 4
shade_inputs(struct application		*ap,
	     const struct partition	*pp,
	     struct shadework		*swp,
	     int			want);
d73 1
a73 4
wray(register struct partition *pp,
     register struct application *ap,
     FILE *fp,
     const vect_t	inormal);
d76 1
a76 6
wraypts(vect_t	in,
	vect_t	inorm,
	vect_t	out,
	int		id,
	struct application *ap,
	FILE	*fp);
d78 2
a79 6
OPTICAL_EXPORT extern
void wraypaint(vect_t start,
	       vect_t norm,
	       int paint,
	       struct application *ap,
	       FILE *fp);
d81 1
a81 1
/* shade.c */
d83 4
a86 3
viewshade(struct application *ap,
	  register const struct partition *pp,
	  register struct shadework *swp);
a182 3
/* defined in vers.c */
OPTICAL_EXPORT extern const char liboptical_version[];

@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a222 1

@


14.11
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.10
log
@update copyright to 2007
@
text
@d22 1
a22 1
/*@@{*/
d24 2
a25 1
 *@@brief
d214 1
a214 1
/*@@}*/
@


14.9
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.8
log
@miscelaneous changes to support doxygen
@
text
@d21 2
d24 1
a24 1
 *
d121 1
a121 1
 *  Author -
d124 1
a124 1
 *  Source -
d172 1
a172 1
#define VERBOSE_MULTICPU     0x00000100	/* # of CPU's to be used */
d201 1
a201 1
	double	ff_dist;		/* range to ff_hitpt[], <-INFINITY for miss */
d204 2
a205 2
	int	ff_frame;		/* >= 0 means pixel was reprojected */
	short	ff_x;			/* screen x,y coords of first location */
d213 1
a213 1

d223 1
@


14.7
log
@update copyright to 2006
@
text
@d21 1
a21 1
/** @@file bu.h
@


14.6
log
@merge the rel-7-6-branch merging removals of some of the rcs vars that don't seem so useful right now
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.5
log
@trailing ws
@
text
@a125 3
 *
 *
 *  $Revision: 14.4 $
@


14.4
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d67 1
a67 1
shade_inputs(struct application		*ap, 
d90 1
a90 1
	       int paint, 
d103 1
a103 1
/* When in production mode, no debug checking is performed, hence the 
d114 1
a114 1
 *  
d118 1
a118 1
 *  
d121 1
a121 1
 *  
d126 3
a128 3
 *  
 *  
 *  $Revision: 14.3 $
d188 2
a189 2
OPTICAL_EXPORT 
OPTICAL_EXPORT extern 
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d67 1
a67 1
shade_inputs(struct application		*ap,
d90 1
a90 1
	       int paint,
d103 1
a103 1
/* When in production mode, no debug checking is performed, hence the
d114 1
a114 1
 *
d118 1
a118 1
 *
d121 1
a121 1
 *
d126 3
a128 3
 *
 *
 *  $Revision$
d188 2
a189 2
OPTICAL_EXPORT
OPTICAL_EXPORT extern
@


14.4.6.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@d126 3
@


14.3
log
@consolidate the __cplusplus external declaration sections that protect C functions from C++ name mangling by using the same __BEGIN_DECLS and __END_DECLS macros in our headers (3rd party are mostly left alone).  works indentation a little too.
@
text
@d39 1
a39 1
#  if defined(WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
d128 1
a128 1
 *  $Revision: 14.2 $
@


14.2
log
@remove \r carriage returns, should only be \n.  editor/studio/.net should be set to never create \n\r line endings on windows for new or existing files -- causes obscure problems.
@
text
@d30 2
d36 1
a36 3
#ifdef __cplusplus
extern "C" {
#endif
d39 9
a47 9
#   if defined(WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#      ifdef OPTICAL_EXPORT_DLL
#         define OPTICAL_EXPORT __declspec(dllexport)
#      else
#         define OPTICAL_EXPORT __declspec(dllimport)
#      endif
#   else
#      define OPTICAL_EXPORT
#   endif
d128 1
a128 1
 *  $Revision: 14.1 $
d211 2
a212 3
#ifdef __cplusplus
}
#endif
@


14.1
log
@Add code to allow liboptical to be a Windows DLL
@
text
@d1 224
a224 224
/*                            O P T I C A L . H
 * BRL-CAD
 *
 * Copyright (C) 2004-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file bu.h
 *
 *  Header file for the BRL-CAD Optical Library, LIBOPTICAL.
 *
 */

#ifndef SEEN_OPTICAL_H
#define SEEN_OPTICAL_H seen

#include "bu.h"
#include "shadefuncs.h"
#include "shadework.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifndef OPTICAL_EXPORT
#   if defined(WIN32) && !defined(__CYGWIN__) && defined(BRLCAD_DLL)
#      ifdef OPTICAL_EXPORT_DLL
#         define OPTICAL_EXPORT __declspec(dllexport)
#      else
#         define OPTICAL_EXPORT __declspec(dllimport)
#      endif
#   else
#      define OPTICAL_EXPORT
#   endif
#endif

/* defined in init.c */
OPTICAL_EXPORT extern void optical_shader_init(struct mfuncs	**headp);

/* stub functions useful for debugging */
/* defined in sh_text.c */
OPTICAL_EXPORT extern int mlib_zero(), mlib_one();
OPTICAL_EXPORT extern void	mlib_void();


/* defined in refract.c */
OPTICAL_EXPORT extern int
rr_render(register struct application *ap,
	  struct partition	*pp,
	  struct shadework	*swp);

/* defined in shade.c */
OPTICAL_EXPORT extern void
shade_inputs(struct application		*ap, 
	     const struct partition	*pp,
	     struct shadework		*swp,
	     int			want);

/* defined in wray.c */
OPTICAL_EXPORT extern void
wray(register struct partition *pp,
     register struct application *ap,
     FILE *fp,
     const vect_t	inormal);

OPTICAL_EXPORT extern void
wraypts(vect_t	in,
	vect_t	inorm,
	vect_t	out,
	int		id,
	struct application *ap,
	FILE	*fp);

OPTICAL_EXPORT extern
void wraypaint(vect_t start,
	       vect_t norm,
	       int paint, 
	       struct application *ap,
	       FILE *fp);

/* shade.c */
OPTICAL_EXPORT extern int
viewshade(struct application *ap,
	  register const struct partition *pp,
	  register struct shadework *swp);


OPTICAL_EXPORT extern int	rdebug;

/* When in production mode, no debug checking is performed, hence the 
 * R_DEBUG define causes sections of debug code to go "poof"
 */
#ifdef NO_DEBUG_CHECKING
#	define	R_DEBUG	0
#else
#	define	R_DEBUG	rdebug
#endif

/*
 *
 *  
 *  Debugging flags for thr RT program itself.
 *  These flags follow the "-X" (cap X) option to the RT program.
 *  librt debugging is separately controlled.
 *  
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  
 *  $Revision: 14.5 $
 */

/* These definitions are each for one bit */
/* Should be reogranized to put most useful ones first */
#define RDEBUG_HITS	0x00000001	/* 1 Print hits used by view() */
#define RDEBUG_MATERIAL	0x00000002	/* 2 Material properties */
#define RDEBUG_SHOWERR	0x00000004	/* 3 Colorful markers on errors */
#define RDEBUG_RTMEM	0x00000008	/* 4 Debug librt mem after startup */
#define RDEBUG_SHADE	0x00000010	/* 5 Shading calculation */
#define RDEBUG_PARSE	0x00000020	/* 6 Command parsing */
#define RDEBUG_LIGHT	0x00000040	/* 7 Debug lighting */
#define RDEBUG_REFRACT	0x00000080	/* 8 Debug reflection & refraction */

#define RDEBUG_STATS	0x00000200	/* 10 Print more statistics */
#define RDEBUG_RTMEM_END 0x00000400	/* 11 Print librt mem use on 'clean' */

/* These will cause binary debugging output */
#define RDEBUG_MISSPLOT	0x20000000	/* 30 plot(5) missed rays to stdout */
#define RDEBUG_RAYWRITE	0x40000000	/* 31 Ray(5V) view rays to stdout */
#define RDEBUG_RAYPLOT	0x80000000	/* 32 plot(5) rays to stdout */

/* Format string for rt_printb() */
#define RDEBUG_FORMAT	\
"\020\040RAYPLOT\037RAYWRITE\036MISSPLOT\
\013RTMEM_END\
\012STATS\010REFRACT\
\7LIGHT\6PARSE\5SHADE\4RTMEM\3SHOWERR\2MATERIAL\1HITS"


/*
 *	A Bit vector to determine how much stuff rt prints when not in
 *	debugging mode.
 *
 */
OPTICAL_EXPORT extern int	rt_verbosity;
/*	   flag_name		value		prints */
#define VERBOSE_LIBVERSIONS  0x00000001	/* Library version strings */
#define VERBOSE_MODELTITLE   0x00000002	/* model title */
#define VERBOSE_TOLERANCE    0x00000004	/* model tolerance */
#define VERBOSE_STATS	     0x00000008	/* stats about rt_gettrees() */
#define VERBOSE_FRAMENUMBER  0x00000010	/* current frame number */
#define VERBOSE_VIEWDETAIL   0x00000020	/* view specifications */
#define VERBOSE_LIGHTINFO    0x00000040	/* scene lights */
#define VERBOSE_INCREMENTAL  0x00000080	/* progressive/incremental state */
#define VERBOSE_MULTICPU     0x00000100	/* # of CPU's to be used */
#define VERBOSE_OUTPUTFILE   0x00000200	/* name of output image */

#define VERBOSE_FORMAT \
"\012OUTPUTFILE\011MULTICPU\010INCREMENTAL\7LIGHTINFO\6VIEWDETAIL\
\5FRAMENUMBER\4STATS\3TOLERANCE\2MODELTITLE\1LIBVERSIONS"

OPTICAL_EXPORT extern double AmbientIntensity;
#ifdef RT_MULTISPECTRAL
OPTICAL_EXPORT extern struct bn_tabdata *background;
#else
OPTICAL_EXPORT extern vect_t background;
#endif

#if 0
OPTICAL_EXPORT 
OPTICAL_EXPORT extern 
#endif
/* defined in sh_text.c */
OPTICAL_EXPORT extern struct region env_region; /* environment map region */

/* defined in refract.c */
OPTICAL_EXPORT extern int max_bounces;
OPTICAL_EXPORT extern int max_ireflect;

/* defined in vers.c */
OPTICAL_EXPORT extern const char liboptical_version[];

struct floatpixel {
	double	ff_dist;		/* range to ff_hitpt[], <-INFINITY for miss */
	float	ff_hitpt[3];
	struct region *ff_regp;
	int	ff_frame;		/* >= 0 means pixel was reprojected */
	short	ff_x;			/* screen x,y coords of first location */
	short	ff_y;
	char	ff_color[3];
};

#ifdef __cplusplus
}
#endif
#endif /* SEEN_OPTICAL_H */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@

