head	14.3;
access;
symbols
	stable-branch:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.3
date	2007.02.03.08.43.48;	author brlcad;	state dead;
branches;
next	14.2;

14.2
date	2007.01.27.01.01.39;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.10;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.06.47.17;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.03.11.57;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.24.04.10.50;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.3
log
@remove the itcl/itk header files from our include/ directory, moving them back up to src/other/incrTcl.  utilize the new ITCL_CPPFLAGS and ITK_CPPFLAGS accordingly.
@
text
@/*
 * itkDecls.h --
 *
 *	Declarations of functions in the platform independent public Itk API.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: $Id: itkDecls.h,v 14.2 2007/01/27 01:01:39 brlcad Exp $
 */

#ifndef _ITKDECLS
#define _ITKDECLS

#ifdef BUILD_itk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tk.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifndef Itk_Init_TCL_DECLARED
#define Itk_Init_TCL_DECLARED
/* 0 */
TCL_EXTERN(int)		Itk_Init _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_SafeInit_TCL_DECLARED
#define Itk_SafeInit_TCL_DECLARED
/* 1 */
TCL_EXTERN(int)		Itk_SafeInit _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_ConfigBodyCmd_TCL_DECLARED
#define Itk_ConfigBodyCmd_TCL_DECLARED
/* 2 */
TCL_EXTERN(int)		Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata,
				Tcl_Interp * interp, int objc,
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_UsualCmd_TCL_DECLARED
#define Itk_UsualCmd_TCL_DECLARED
/* 3 */
TCL_EXTERN(int)		Itk_UsualCmd _ANSI_ARGS_((ClientData cdata,
				Tcl_Interp * interp, int objc,
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionDefineCmd_TCL_DECLARED
#define Itk_ClassOptionDefineCmd_TCL_DECLARED
/* 4 */
TCL_EXTERN(int)		Itk_ClassOptionDefineCmd _ANSI_ARGS_((
				ClientData cdata, Tcl_Interp * interp,
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionIllegalCmd_TCL_DECLARED
#define Itk_ClassOptionIllegalCmd_TCL_DECLARED
/* 5 */
TCL_EXTERN(int)		Itk_ClassOptionIllegalCmd _ANSI_ARGS_((
				ClientData cdata, Tcl_Interp * interp,
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ConfigClassOption_TCL_DECLARED
#define Itk_ConfigClassOption_TCL_DECLARED
/* 6 */
TCL_EXTERN(int)		Itk_ConfigClassOption _ANSI_ARGS_((
				Tcl_Interp * interp, ItclObject * contextObj,
				ClientData cdata, CONST char* newVal));
#endif
#ifndef Itk_CreateClassOptTable_TCL_DECLARED
#define Itk_CreateClassOptTable_TCL_DECLARED
/* 7 */
TCL_EXTERN(ItkClassOptTable*) Itk_CreateClassOptTable _ANSI_ARGS_((
				Tcl_Interp * interp, ItclClass * cdefn));
#endif
#ifndef Itk_FindClassOptTable_TCL_DECLARED
#define Itk_FindClassOptTable_TCL_DECLARED
/* 8 */
TCL_EXTERN(ItkClassOptTable*) Itk_FindClassOptTable _ANSI_ARGS_((
				ItclClass * cdefn));
#endif
/* Slot 9 is reserved */
#ifndef Itk_CreateClassOption_TCL_DECLARED
#define Itk_CreateClassOption_TCL_DECLARED
/* 10 */
TCL_EXTERN(int)		Itk_CreateClassOption _ANSI_ARGS_((
				Tcl_Interp * interp, ItclClass * cdefn,
				char * switchName, char * resName,
				char * resClass, char * defVal,
				char * config, ItkClassOption ** optPtr));
#endif
#ifndef Itk_FindClassOption_TCL_DECLARED
#define Itk_FindClassOption_TCL_DECLARED
/* 11 */
TCL_EXTERN(ItkClassOption*) Itk_FindClassOption _ANSI_ARGS_((
				ItclClass * cdefn, char * switchName));
#endif
#ifndef Itk_DelClassOption_TCL_DECLARED
#define Itk_DelClassOption_TCL_DECLARED
/* 12 */
TCL_EXTERN(void)	Itk_DelClassOption _ANSI_ARGS_((ItkClassOption * opt));
#endif
#ifndef Itk_ArchetypeInit_TCL_DECLARED
#define Itk_ArchetypeInit_TCL_DECLARED
/* 13 */
TCL_EXTERN(int)		Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
#endif
#ifndef Itk_OptListInit_TCL_DECLARED
#define Itk_OptListInit_TCL_DECLARED
/* 14 */
TCL_EXTERN(void)	Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist,
				Tcl_HashTable * options));
#endif
#ifndef Itk_OptListFree_TCL_DECLARED
#define Itk_OptListFree_TCL_DECLARED
/* 15 */
TCL_EXTERN(void)	Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));
#endif
#ifndef Itk_OptListAdd_TCL_DECLARED
#define Itk_OptListAdd_TCL_DECLARED
/* 16 */
TCL_EXTERN(void)	Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist,
				Tcl_HashEntry * entry));
#endif
#ifndef Itk_OptListRemove_TCL_DECLARED
#define Itk_OptListRemove_TCL_DECLARED
/* 17 */
TCL_EXTERN(void)	Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist,
				Tcl_HashEntry * entry));
#endif

typedef struct ItkStubs {
    int magic;
    struct ItkStubHooks *hooks;

    int (*itk_Init) _ANSI_ARGS_((Tcl_Interp * interp)); /* 0 */
    int (*itk_SafeInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 1 */
    int (*itk_ConfigBodyCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 2 */
    int (*itk_UsualCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 3 */
    int (*itk_ClassOptionDefineCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 4 */
    int (*itk_ClassOptionIllegalCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 5 */
    int (*itk_ConfigClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, ClientData cdata, CONST char* newVal)); /* 6 */
    ItkClassOptTable* (*itk_CreateClassOptTable) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass * cdefn)); /* 7 */
    ItkClassOptTable* (*itk_FindClassOptTable) _ANSI_ARGS_((ItclClass * cdefn)); /* 8 */
    void *reserved9;
    int (*itk_CreateClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass * cdefn, char * switchName, char * resName, char * resClass, char * defVal, char * config, ItkClassOption ** optPtr)); /* 10 */
    ItkClassOption* (*itk_FindClassOption) _ANSI_ARGS_((ItclClass * cdefn, char * switchName)); /* 11 */
    void (*itk_DelClassOption) _ANSI_ARGS_((ItkClassOption * opt)); /* 12 */
    int (*itk_ArchetypeInit) _ANSI_ARGS_((Tcl_Interp* interp)); /* 13 */
    void (*itk_OptListInit) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashTable * options)); /* 14 */
    void (*itk_OptListFree) _ANSI_ARGS_((ItkOptList* olist)); /* 15 */
    void (*itk_OptListAdd) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashEntry * entry)); /* 16 */
    void (*itk_OptListRemove) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashEntry * entry)); /* 17 */
} ItkStubs;

TCL_EXTERNC ItkStubs *itkStubsPtr;

#if defined(USE_ITK_STUBS) && !defined(USE_ITK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifndef Itk_Init
#define Itk_Init \
	(itkStubsPtr->itk_Init) /* 0 */
#endif
#ifndef Itk_SafeInit
#define Itk_SafeInit \
	(itkStubsPtr->itk_SafeInit) /* 1 */
#endif
#ifndef Itk_ConfigBodyCmd
#define Itk_ConfigBodyCmd \
	(itkStubsPtr->itk_ConfigBodyCmd) /* 2 */
#endif
#ifndef Itk_UsualCmd
#define Itk_UsualCmd \
	(itkStubsPtr->itk_UsualCmd) /* 3 */
#endif
#ifndef Itk_ClassOptionDefineCmd
#define Itk_ClassOptionDefineCmd \
	(itkStubsPtr->itk_ClassOptionDefineCmd) /* 4 */
#endif
#ifndef Itk_ClassOptionIllegalCmd
#define Itk_ClassOptionIllegalCmd \
	(itkStubsPtr->itk_ClassOptionIllegalCmd) /* 5 */
#endif
#ifndef Itk_ConfigClassOption
#define Itk_ConfigClassOption \
	(itkStubsPtr->itk_ConfigClassOption) /* 6 */
#endif
#ifndef Itk_CreateClassOptTable
#define Itk_CreateClassOptTable \
	(itkStubsPtr->itk_CreateClassOptTable) /* 7 */
#endif
#ifndef Itk_FindClassOptTable
#define Itk_FindClassOptTable \
	(itkStubsPtr->itk_FindClassOptTable) /* 8 */
#endif
/* Slot 9 is reserved */
#ifndef Itk_CreateClassOption
#define Itk_CreateClassOption \
	(itkStubsPtr->itk_CreateClassOption) /* 10 */
#endif
#ifndef Itk_FindClassOption
#define Itk_FindClassOption \
	(itkStubsPtr->itk_FindClassOption) /* 11 */
#endif
#ifndef Itk_DelClassOption
#define Itk_DelClassOption \
	(itkStubsPtr->itk_DelClassOption) /* 12 */
#endif
#ifndef Itk_ArchetypeInit
#define Itk_ArchetypeInit \
	(itkStubsPtr->itk_ArchetypeInit) /* 13 */
#endif
#ifndef Itk_OptListInit
#define Itk_OptListInit \
	(itkStubsPtr->itk_OptListInit) /* 14 */
#endif
#ifndef Itk_OptListFree
#define Itk_OptListFree \
	(itkStubsPtr->itk_OptListFree) /* 15 */
#endif
#ifndef Itk_OptListAdd
#define Itk_OptListAdd \
	(itkStubsPtr->itk_OptListAdd) /* 16 */
#endif
#ifndef Itk_OptListRemove
#define Itk_OptListRemove \
	(itkStubsPtr->itk_OptListRemove) /* 17 */
#endif

#endif /* defined(USE_ITK_STUBS) && !defined(USE_ITK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _ITKDECLS */


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.2
log
@ws, test three
@
text
@d9 1
a9 1
 * RCS: $Id: itkDecls.h,v 14.1 2004/11/16 19:42:10 morrison Exp $
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d9 1
a9 1
 * RCS: $Id: itkDecls.h,v 1.3 2004/08/02 06:47:17 morrison Exp $
d45 2
a46 2
TCL_EXTERN(int)		Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata, 
				Tcl_Interp * interp, int objc, 
d52 2
a53 2
TCL_EXTERN(int)		Itk_UsualCmd _ANSI_ARGS_((ClientData cdata, 
				Tcl_Interp * interp, int objc, 
d60 1
a60 1
				ClientData cdata, Tcl_Interp * interp, 
d67 1
a67 1
				ClientData cdata, Tcl_Interp * interp, 
d74 1
a74 1
				Tcl_Interp * interp, ItclObject * contextObj, 
d94 3
a96 3
				Tcl_Interp * interp, ItclClass * cdefn, 
				char * switchName, char * resName, 
				char * resClass, char * defVal, 
d118 1
a118 1
TCL_EXTERN(void)	Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist, 
d129 1
a129 1
TCL_EXTERN(void)	Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist, 
d135 1
a135 1
TCL_EXTERN(void)	Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist, 
@


1.3
log
@replace automake variables with make variables and other minor cleanups
@
text
@d9 1
a9 1
 * RCS: $Id: itkDecls.h,v 1.1 2004/06/10 16:51:50 morrison Exp $
d250 10
@


1.2
log
@have tcl headers include the brlcad config.h for build symbols
@
text
@@


1.1
log
@moved/renamed from top-level h/ to top-level include/
@
text
@d9 1
a9 1
 * RCS: $Id$
@

