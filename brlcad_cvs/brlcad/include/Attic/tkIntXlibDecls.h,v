head	14.3;
access;
symbols
	stable-branch:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@ * @;


14.3
date	2007.02.03.20.06.54;	author brlcad;	state dead;
branches;
next	14.2;

14.2
date	2007.01.27.01.01.40;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.10;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.24.04.10.51;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.3
log
@last one, remove the tk headers from our include/ directory.  use the TK_CPPFLAGS automake variable instead, pointing to the headers in src/other/libtk/generic/ dir
@
text
@/*
 * tkIntXlibDecls.h --
 *
 *	This file contains the declarations for all platform dependent
 *	unsupported functions that are exported by the Tk library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 * All rights reserved.
 *
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 14.2 2007/01/27 01:01:40 brlcad Exp $
 */

#ifndef _TKINTXLIBDECLS
#define _TKINTXLIBDECLS

#ifdef MAC_TCL
#include "Xutil.h"
#else
#include "X11/Xutil.h"
#endif

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tkInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifdef __WIN32__
/* 0 */
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc,
				int dash_offset, _Xconst char* dash_list,
				int n));
/* 1 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v,
				unsigned int ui1, int i1, int i2, char* cp,
				unsigned int ui2, unsigned int ui3, int i3,
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w,
				Visual* v, int i));
/* 7 */
EXTERN Cursor		XCreatePixmapCursor _ANSI_ARGS_((Display* d,
				Pixmap p1, Pixmap p2, XColor* x1, XColor* x2,
				unsigned int ui1, unsigned int ui2));
/* 8 */
EXTERN Cursor		XCreateGlyphCursor _ANSI_ARGS_((Display* d, Font f1,
				Font f2, unsigned int ui1, unsigned int ui2,
				XColor* x1, XColor* x2));
/* 9 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 10 */
EXTERN XHostAddress *	XListHosts _ANSI_ARGS_((Display* d, int* i, Bool* b));
/* 11 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d,
				unsigned int k, int i));
/* 12 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 13 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 14 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 15 */
EXTERN Status		XIconifyWindow _ANSI_ARGS_((Display* d, Window w,
				int i));
/* 16 */
EXTERN Status		XWithdrawWindow _ANSI_ARGS_((Display* d, Window w,
				int i));
/* 17 */
EXTERN Status		XGetWMColormapWindows _ANSI_ARGS_((Display* d,
				Window w, Window** wpp, int* ip));
/* 18 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c,
				XColor* xp));
/* 19 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 20 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w,
				Atom a1, Atom a2, int i1, int i2,
				_Xconst unsigned char* c, int i3));
/* 21 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d,
				Window w, unsigned long ul,
				XSetWindowAttributes* x));
/* 22 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display* d, Window w));
/* 23 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w,
				unsigned int i, XWindowChanges* x));
/* 24 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4));
/* 25 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4, unsigned long ul));
/* 26 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display,
				Drawable d, _Xconst char* data,
				unsigned int width, unsigned int height));
/* 27 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w,
				Cursor c));
/* 28 */
EXTERN void		XDeleteProperty _ANSI_ARGS_((Display* d, Window w,
				Atom a));
/* 29 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 30 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 31 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XPoint* x, int i1, int i2));
/* 32 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 33 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 34 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XPoint* x, int i1, int i2, int i3));
/* 35 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XRectangle* x, int i));
/* 36 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* d, int i));
/* 37 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 38 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c,
				unsigned long* ulp, int i, unsigned long ul));
/* 39 */
EXTERN void		XFreeCursor _ANSI_ARGS_((Display* d, Cursor c));
/* 40 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 41 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr,
				Window* w, int* i1, int* i2,
				unsigned int* ui1, unsigned int* ui2,
				unsigned int* ui3, unsigned int* ui4));
/* 42 */
EXTERN void		XGetInputFocus _ANSI_ARGS_((Display* d, Window* w,
				int* i));
/* 43 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w,
				Atom a1, long l1, long l2, Bool b, Atom a2,
				Atom* ap, int* ip, unsigned long* ulp1,
				unsigned long* ulp2, unsigned char** cpp));
/* 44 */
EXTERN Status		XGetWindowAttributes _ANSI_ARGS_((Display* d,
				Window w, XWindowAttributes* x));
/* 45 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w,
				Bool b, int i1, int i2, Time t));
/* 46 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1,
				Bool b, unsigned int ui, int i1, int i2,
				Window w2, Cursor c, Time t));
/* 47 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 48 */
EXTERN Status		XLookupColor _ANSI_ARGS_((Display* d, Colormap c1,
				_Xconst char* c2, XColor* x1, XColor* x2));
/* 49 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 50 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 51 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w,
				int i1, int i2));
/* 52 */
EXTERN void		XNextEvent _ANSI_ARGS_((Display* d, XEvent* x));
/* 53 */
EXTERN void		XPutBackEvent _ANSI_ARGS_((Display* d, XEvent* x));
/* 54 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display* d, Colormap c,
				XColor* x, int i));
/* 55 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1,
				Window* w2, Window* w3, int* i1, int* i2,
				int* i3, int* i4, unsigned int* ui));
/* 56 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1,
				Window* w2, Window* w3, Window** w4,
				unsigned int* ui));
/* 57 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 58 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 59 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w,
				unsigned int ui1, unsigned int ui2));
/* 60 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w,
				long l));
/* 61 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b,
				long l, XEvent* x));
/* 62 */
EXTERN void		XSetCommand _ANSI_ARGS_((Display* d, Window w,
				CONST char** c, int i));
/* 63 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w,
				_Xconst char* c));
/* 64 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w,
				int i, Time t));
/* 65 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a,
				Window w, Time t));
/* 66 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d,
				Window w, unsigned long ul));
/* 67 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d,
				Window w, Pixmap p));
/* 68 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w,
				unsigned long ul));
/* 69 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d,
				Window w, Pixmap p));
/* 70 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d,
				Window w, unsigned int ui));
/* 71 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w,
				Colormap c));
/* 72 */
EXTERN Bool		XTranslateCoordinates _ANSI_ARGS_((Display* d,
				Window w1, Window w2, int i1, int i2,
				int* i3, int* i4, Window* w3));
/* 73 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 74 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 75 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 76 */
EXTERN void		XWindowEvent _ANSI_ARGS_((Display* d, Window w,
				long l, XEvent* x));
/* 77 */
EXTERN void		XDestroyIC _ANSI_ARGS_((XIC x));
/* 78 */
EXTERN Bool		XFilterEvent _ANSI_ARGS_((XEvent* x, Window w));
/* 79 */
EXTERN int		XmbLookupString _ANSI_ARGS_((XIC xi,
				XKeyPressedEvent* xk, char* c, int i,
				KeySym* k, Status* s));
/* 80 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors,
				int ncolors, Display* display, Drawable d,
				GC gc, XImage* image, int src_x, int src_y,
				int dest_x, int dest_y, unsigned int width,
				unsigned int height));
/* Slot 81 is reserved */
/* 82 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display,
				Colormap map, _Xconst char* spec,
				XColor * colorPtr));
/* 83 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d,
				unsigned long valuemask, XGCValues* values));
/* 84 */
EXTERN void		XFreeGC _ANSI_ARGS_((Display* display, GC gc));
/* 85 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display,
				_Xconst char* atom_name, Bool only_if_exists));
/* 86 */
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc,
				unsigned long foreground));
/* 87 */
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc,
				unsigned long foreground));
/* 88 */
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc,
				Pixmap pixmap));
/* 89 */
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc,
				int clip_x_origin, int clip_y_origin));
/* 90 */
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc,
				int ts_x_origin, int ts_y_origin));
/* 91 */
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc,
				unsigned long mask, XGCValues * values));
/* 92 */
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc,
				Font font));
/* 93 */
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc,
				int arc_mode));
/* 94 */
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc,
				Pixmap stipple));
/* 95 */
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc,
				int fill_rule));
/* 96 */
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc,
				int fill_style));
/* 97 */
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc,
				int function));
/* 98 */
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display,
				GC gc, unsigned int line_width,
				int line_style, int cap_style,
				int join_style));
/* 99 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
/* 100 */
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
/* 101 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display,
				long vinfo_mask, XVisualInfo* vinfo_template,
				int* nitems_return));
/* 102 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display,
				Window w, XTextProperty* text_prop));
/* 103 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list,
				int count, XTextProperty* text_prop_return));
/* 104 */
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int x1, int y1, int x2, int y2));
/* 105 */
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* d, Window s,
				Window dw, int sx, int sy, unsigned int sw,
				unsigned int sh, int dx, int dy));
/* 106 */
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display,
				Drawable d, GC gc, int x, int y,
				unsigned int width, unsigned int height));
#endif /* __WIN32__ */
#ifdef MAC_TCL
/* 0 */
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc,
				int dash_offset, _Xconst char* dash_list,
				int n));
/* 1 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v,
				unsigned int ui1, int i1, int i2, char* cp,
				unsigned int ui2, unsigned int ui3, int i3,
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w,
				Visual* v, int i));
/* 7 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 8 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, KeyCode k,
				int i));
/* 9 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 10 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 11 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 12 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c,
				XColor* xp));
/* 13 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 14 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w,
				Atom a1, Atom a2, int i1, int i2,
				_Xconst unsigned char* c, int i3));
/* 15 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d,
				Window w, unsigned long ul,
				XSetWindowAttributes* x));
/* 16 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w,
				unsigned int i, XWindowChanges* x));
/* 17 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4));
/* 18 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4, unsigned long ul));
/* 19 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display,
				Drawable d, _Xconst char* data,
				unsigned int width, unsigned int height));
/* 20 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w,
				Cursor c));
/* 21 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 22 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 23 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XPoint* x, int i1, int i2));
/* 24 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 25 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 26 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XPoint* x, int i1, int i2, int i3));
/* 27 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XRectangle* x, int i));
/* 28 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 29 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c,
				unsigned long* ulp, int i, unsigned long ul));
/* 30 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 31 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr,
				Window* w, int* i1, int* i2,
				unsigned int* ui1, unsigned int* ui2,
				unsigned int* ui3, unsigned int* ui4));
/* 32 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w,
				Atom a1, long l1, long l2, Bool b, Atom a2,
				Atom* ap, int* ip, unsigned long* ulp1,
				unsigned long* ulp2, unsigned char** cpp));
/* 33 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w,
				Bool b, int i1, int i2, Time t));
/* 34 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1,
				Bool b, unsigned int ui, int i1, int i2,
				Window w2, Cursor c, Time t));
/* 35 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 36 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 37 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 38 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w,
				int i1, int i2));
/* 39 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1,
				Window* w2, Window* w3, int* i1, int* i2,
				int* i3, int* i4, unsigned int* ui));
/* 40 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 41 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 42 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w,
				unsigned int ui1, unsigned int ui2));
/* 43 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w,
				long l));
/* 44 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b,
				long l, XEvent* x));
/* 45 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w,
				_Xconst char* c));
/* 46 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w,
				int i, Time t));
/* 47 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a,
				Window w, Time t));
/* 48 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d,
				Window w, unsigned long ul));
/* 49 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d,
				Window w, Pixmap p));
/* 50 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w,
				unsigned long ul));
/* 51 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d,
				Window w, Pixmap p));
/* 52 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d,
				Window w, unsigned int ui));
/* 53 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w,
				Colormap c));
/* 54 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 55 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 56 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 57 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors,
				int ncolors, Display* display, Drawable d,
				GC gc, XImage* image, int src_x, int src_y,
				int dest_x, int dest_y, unsigned int width,
				unsigned int height));
/* 58 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display,
				Colormap map, _Xconst char* spec,
				XColor * colorPtr));
/* 59 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d,
				unsigned long valuemask, XGCValues* values));
/* 60 */
EXTERN void		XFreeGC _ANSI_ARGS_((Display* display, GC gc));
/* 61 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display,
				_Xconst char* atom_name, Bool only_if_exists));
/* 62 */
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc,
				unsigned long foreground));
/* 63 */
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc,
				unsigned long foreground));
/* 64 */
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc,
				Pixmap pixmap));
/* 65 */
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc,
				int clip_x_origin, int clip_y_origin));
/* 66 */
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc,
				int ts_x_origin, int ts_y_origin));
/* 67 */
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc,
				unsigned long mask, XGCValues * values));
/* 68 */
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc,
				Font font));
/* 69 */
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc,
				int arc_mode));
/* 70 */
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc,
				Pixmap stipple));
/* 71 */
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc,
				int fill_rule));
/* 72 */
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc,
				int fill_style));
/* 73 */
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc,
				int function));
/* 74 */
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display,
				GC gc, unsigned int line_width,
				int line_style, int cap_style,
				int join_style));
/* 75 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
/* 76 */
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
/* 77 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display,
				long vinfo_mask, XVisualInfo* vinfo_template,
				int* nitems_return));
/* 78 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display,
				Window w, XTextProperty* text_prop));
/* 79 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list,
				int count, XTextProperty* text_prop_return));
/* 80 */
EXTERN void		XDrawSegments _ANSI_ARGS_((Display * display,
				Drawable d, GC gc, XSegment * segments,
				int nsegments));
/* 81 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* display,
				int mode));
/* 82 */
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int x1, int y1, int x2, int y2));
/* 83 */
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display,
				Drawable d, GC gc, int x, int y,
				unsigned int width, unsigned int height));
/* 84 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display* d, Window w));
/* 85 */
EXTERN void		XDrawPoint _ANSI_ARGS_((Display* display, Drawable d,
				GC gc, int x, int y));
/* 86 */
EXTERN void		XDrawPoints _ANSI_ARGS_((Display* display,
				Drawable d, GC gc, XPoint * points,
				int npoints, int mode));
/* 87 */
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* display,
				Window src_w, Window dest_w, int src_x,
				int src_y, unsigned int src_width,
				unsigned int src_height, int dest_x,
				int dest_y));
/* 88 */
EXTERN void		XQueryColor _ANSI_ARGS_((Display * display,
				Colormap colormap, XColor * def_in_out));
/* 89 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display * display,
				Colormap colormap, XColor * defs_in_out,
				int ncolors));
/* 90 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1,
				Window* w2, Window* w3, Window** w4,
				unsigned int* ui));
#endif /* MAC_TCL */
#ifdef MAC_OSX_TK
/* 0 */
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc,
				int dash_offset, _Xconst char* dash_list,
				int n));
/* 1 */
EXTERN XModifierKeymap*	 XGetModifierMapping _ANSI_ARGS_((Display* d));
/* 2 */
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v,
				unsigned int ui1, int i1, int i2, char* cp,
				unsigned int ui2, unsigned int ui3, int i3,
				int i4));
/* 3 */
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, unsigned long ul, int i3));
/* 4 */
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display* d, Atom a));
/* 5 */
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
/* 6 */
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w,
				Visual* v, int i));
/* 7 */
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
/* 8 */
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, KeyCode k,
				int i));
/* 9 */
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char* c));
/* 10 */
EXTERN Window		XRootWindow _ANSI_ARGS_((Display* d, int i));
/* 11 */
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
/* 12 */
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c,
				XColor* xp));
/* 13 */
EXTERN void		XBell _ANSI_ARGS_((Display* d, int i));
/* 14 */
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w,
				Atom a1, Atom a2, int i1, int i2,
				_Xconst unsigned char* c, int i3));
/* 15 */
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d,
				Window w, unsigned long ul,
				XSetWindowAttributes* x));
/* 16 */
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w,
				unsigned int i, XWindowChanges* x));
/* 17 */
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4));
/* 18 */
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1,
				Drawable dr2, GC g, int i1, int i2,
				unsigned int ui1, unsigned int ui2, int i3,
				int i4, unsigned long ul));
/* 19 */
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display,
				Drawable d, _Xconst char* data,
				unsigned int width, unsigned int height));
/* 20 */
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w,
				Cursor c));
/* 21 */
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display* d, Window w));
/* 22 */
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 23 */
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XPoint* x, int i1, int i2));
/* 24 */
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 25 */
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4));
/* 26 */
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XPoint* x, int i1, int i2, int i3));
/* 27 */
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr,
				GC g, XRectangle* x, int i));
/* 28 */
EXTERN void		XFreeColormap _ANSI_ARGS_((Display* d, Colormap c));
/* 29 */
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c,
				unsigned long* ulp, int i, unsigned long ul));
/* 30 */
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap* x));
/* 31 */
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr,
				Window* w, int* i1, int* i2,
				unsigned int* ui1, unsigned int* ui2,
				unsigned int* ui3, unsigned int* ui4));
/* 32 */
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w,
				Atom a1, long l1, long l2, Bool b, Atom a2,
				Atom* ap, int* ip, unsigned long* ulp1,
				unsigned long* ulp2, unsigned char** cpp));
/* 33 */
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w,
				Bool b, int i1, int i2, Time t));
/* 34 */
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1,
				Bool b, unsigned int ui, int i1, int i2,
				Window w2, Cursor c, Time t));
/* 35 */
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display* d, KeySym k));
/* 36 */
EXTERN void		XMapWindow _ANSI_ARGS_((Display* d, Window w));
/* 37 */
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w,
				int i1, int i2, unsigned int ui1,
				unsigned int ui2));
/* 38 */
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w,
				int i1, int i2));
/* 39 */
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1,
				Window* w2, Window* w3, int* i1, int* i2,
				int* i3, int* i4, unsigned int* ui));
/* 40 */
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display* d, Window w));
/* 41 */
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent* x));
/* 42 */
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w,
				unsigned int ui1, unsigned int ui2));
/* 43 */
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w,
				long l));
/* 44 */
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b,
				long l, XEvent* x));
/* 45 */
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w,
				_Xconst char* c));
/* 46 */
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w,
				int i, Time t));
/* 47 */
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a,
				Window w, Time t));
/* 48 */
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d,
				Window w, unsigned long ul));
/* 49 */
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d,
				Window w, Pixmap p));
/* 50 */
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w,
				unsigned long ul));
/* 51 */
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d,
				Window w, Pixmap p));
/* 52 */
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d,
				Window w, unsigned int ui));
/* 53 */
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w,
				Colormap c));
/* 54 */
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display* d, Time t));
/* 55 */
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display* d, Time t));
/* 56 */
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display* d, Window w));
/* 57 */
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors,
				int ncolors, Display* display, Drawable d,
				GC gc, XImage* image, int src_x, int src_y,
				int dest_x, int dest_y, unsigned int width,
				unsigned int height));
/* 58 */
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display,
				Colormap map, _Xconst char* spec,
				XColor * colorPtr));
/* 59 */
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d,
				unsigned long valuemask, XGCValues* values));
/* 60 */
EXTERN void		XFreeGC _ANSI_ARGS_((Display* display, GC gc));
/* 61 */
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display,
				_Xconst char* atom_name, Bool only_if_exists));
/* 62 */
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc,
				unsigned long foreground));
/* 63 */
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc,
				unsigned long foreground));
/* 64 */
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc,
				Pixmap pixmap));
/* 65 */
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc,
				int clip_x_origin, int clip_y_origin));
/* 66 */
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc,
				int ts_x_origin, int ts_y_origin));
/* 67 */
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc,
				unsigned long mask, XGCValues * values));
/* 68 */
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc,
				Font font));
/* 69 */
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc,
				int arc_mode));
/* 70 */
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc,
				Pixmap stipple));
/* 71 */
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc,
				int fill_rule));
/* 72 */
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc,
				int fill_style));
/* 73 */
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc,
				int function));
/* 74 */
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display,
				GC gc, unsigned int line_width,
				int line_style, int cap_style,
				int join_style));
/* 75 */
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
/* 76 */
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
/* 77 */
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display,
				long vinfo_mask, XVisualInfo* vinfo_template,
				int* nitems_return));
/* 78 */
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display,
				Window w, XTextProperty* text_prop));
/* 79 */
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list,
				int count, XTextProperty* text_prop_return));
/* 80 */
EXTERN void		XDrawSegments _ANSI_ARGS_((Display * display,
				Drawable d, GC gc, XSegment * segments,
				int nsegments));
/* 81 */
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* display,
				int mode));
/* 82 */
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g,
				int x1, int y1, int x2, int y2));
/* 83 */
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display,
				Drawable d, GC gc, int x, int y,
				unsigned int width, unsigned int height));
/* 84 */
EXTERN void		XClearWindow _ANSI_ARGS_((Display* d, Window w));
/* 85 */
EXTERN void		XDrawPoint _ANSI_ARGS_((Display* display, Drawable d,
				GC gc, int x, int y));
/* 86 */
EXTERN void		XDrawPoints _ANSI_ARGS_((Display* display,
				Drawable d, GC gc, XPoint * points,
				int npoints, int mode));
/* 87 */
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* display,
				Window src_w, Window dest_w, int src_x,
				int src_y, unsigned int src_width,
				unsigned int src_height, int dest_x,
				int dest_y));
/* 88 */
EXTERN void		XQueryColor _ANSI_ARGS_((Display * display,
				Colormap colormap, XColor * def_in_out));
/* 89 */
EXTERN void		XQueryColors _ANSI_ARGS_((Display * display,
				Colormap colormap, XColor * defs_in_out,
				int ncolors));
/* 90 */
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1,
				Window* w2, Window* w3, Window** w4,
				unsigned int* ui));
#endif /* MAC_OSX_TK */

typedef struct TkIntXlibStubs {
    int magic;
    struct TkIntXlibStubHooks *hooks;

#ifdef __WIN32__
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    Cursor (*xCreatePixmapCursor) _ANSI_ARGS_((Display* d, Pixmap p1, Pixmap p2, XColor* x1, XColor* x2, unsigned int ui1, unsigned int ui2)); /* 7 */
    Cursor (*xCreateGlyphCursor) _ANSI_ARGS_((Display* d, Font f1, Font f2, unsigned int ui1, unsigned int ui2, XColor* x1, XColor* x2)); /* 8 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 9 */
    XHostAddress * (*xListHosts) _ANSI_ARGS_((Display* d, int* i, Bool* b)); /* 10 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, unsigned int k, int i)); /* 11 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 12 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 14 */
    Status (*xIconifyWindow) _ANSI_ARGS_((Display* d, Window w, int i)); /* 15 */
    Status (*xWithdrawWindow) _ANSI_ARGS_((Display* d, Window w, int i)); /* 16 */
    Status (*xGetWMColormapWindows) _ANSI_ARGS_((Display* d, Window w, Window** wpp, int* ip)); /* 17 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 18 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 19 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 20 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 21 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 22 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 23 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 24 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 25 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 26 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 27 */
    void (*xDeleteProperty) _ANSI_ARGS_((Display* d, Window w, Atom a)); /* 28 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 29 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 30 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 31 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 32 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 33 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 34 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 35 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* d, int i)); /* 36 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 37 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 38 */
    void (*xFreeCursor) _ANSI_ARGS_((Display* d, Cursor c)); /* 39 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 40 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 41 */
    void (*xGetInputFocus) _ANSI_ARGS_((Display* d, Window* w, int* i)); /* 42 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 43 */
    Status (*xGetWindowAttributes) _ANSI_ARGS_((Display* d, Window w, XWindowAttributes* x)); /* 44 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 45 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 46 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 47 */
    Status (*xLookupColor) _ANSI_ARGS_((Display* d, Colormap c1, _Xconst char* c2, XColor* x1, XColor* x2)); /* 48 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 49 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 50 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 51 */
    void (*xNextEvent) _ANSI_ARGS_((Display* d, XEvent* x)); /* 52 */
    void (*xPutBackEvent) _ANSI_ARGS_((Display* d, XEvent* x)); /* 53 */
    void (*xQueryColors) _ANSI_ARGS_((Display* d, Colormap c, XColor* x, int i)); /* 54 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 55 */
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 56 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 57 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 58 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 59 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 60 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 61 */
    void (*xSetCommand) _ANSI_ARGS_((Display* d, Window w, CONST char** c, int i)); /* 62 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 63 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 64 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 65 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 66 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 67 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 68 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 69 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 70 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 71 */
    Bool (*xTranslateCoordinates) _ANSI_ARGS_((Display* d, Window w1, Window w2, int i1, int i2, int* i3, int* i4, Window* w3)); /* 72 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 73 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 74 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 75 */
    void (*xWindowEvent) _ANSI_ARGS_((Display* d, Window w, long l, XEvent* x)); /* 76 */
    void (*xDestroyIC) _ANSI_ARGS_((XIC x)); /* 77 */
    Bool (*xFilterEvent) _ANSI_ARGS_((XEvent* x, Window w)); /* 78 */
    int (*xmbLookupString) _ANSI_ARGS_((XIC xi, XKeyPressedEvent* xk, char* c, int i, KeySym* k, Status* s)); /* 79 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 80 */
    void *reserved81;
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 82 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 83 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 84 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 85 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 86 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 87 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 88 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 89 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 90 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 91 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 92 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 93 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 94 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 95 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 96 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 97 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 98 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 99 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 100 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 101 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 102 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 103 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 104 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* d, Window s, Window dw, int sx, int sy, unsigned int sw, unsigned int sh, int dx, int dy)); /* 105 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 106 */
#endif /* __WIN32__ */
#ifdef MAC_TCL
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 7 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, KeyCode k, int i)); /* 8 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 9 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 10 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 11 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 12 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 14 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 15 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 16 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 17 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 18 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 19 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 20 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 21 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 22 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 23 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 24 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 25 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 26 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 27 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 28 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 29 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 30 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 31 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 32 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 33 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 34 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 35 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 36 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 37 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 38 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 39 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 40 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 41 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 42 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 43 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 44 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 45 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 46 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 47 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 50 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 51 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 52 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 53 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 54 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 55 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 56 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 57 */
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 58 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 59 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 60 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 61 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 62 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 63 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 64 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 65 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 66 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 67 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 68 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 69 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 70 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 71 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 72 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 73 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 74 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 75 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 76 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 77 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 78 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 79 */
    void (*xDrawSegments) _ANSI_ARGS_((Display * display, Drawable d, GC gc, XSegment * segments, int nsegments)); /* 80 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* display, int mode)); /* 81 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 82 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 83 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 84 */
    void (*xDrawPoint) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y)); /* 85 */
    void (*xDrawPoints) _ANSI_ARGS_((Display* display, Drawable d, GC gc, XPoint * points, int npoints, int mode)); /* 86 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y)); /* 87 */
    void (*xQueryColor) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * def_in_out)); /* 88 */
    void (*xQueryColors) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * defs_in_out, int ncolors)); /* 89 */
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 90 */
#endif /* MAC_TCL */
#ifdef MAC_OSX_TK
    void (*xSetDashes) _ANSI_ARGS_((Display* display, GC gc, int dash_offset, _Xconst char* dash_list, int n)); /* 0 */
    XModifierKeymap* (*xGetModifierMapping) _ANSI_ARGS_((Display* d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display* d, Visual* v, unsigned int ui1, int i1, int i2, char* cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display* d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display* d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display* d, Window w, Visual* v, int i)); /* 6 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 7 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display* d, KeyCode k, int i)); /* 8 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char* c)); /* 9 */
    Window (*xRootWindow) _ANSI_ARGS_((Display* d, int i)); /* 10 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 11 */
    Status (*xAllocColor) _ANSI_ARGS_((Display* d, Colormap c, XColor* xp)); /* 12 */
    void (*xBell) _ANSI_ARGS_((Display* d, int i)); /* 13 */
    void (*xChangeProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char* c, int i3)); /* 14 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display* d, Window w, unsigned long ul, XSetWindowAttributes* x)); /* 15 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int i, XWindowChanges* x)); /* 16 */
    void (*xCopyArea) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 17 */
    void (*xCopyPlane) _ANSI_ARGS_((Display* d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 18 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display* display, Drawable d, _Xconst char* data, unsigned int width, unsigned int height)); /* 19 */
    void (*xDefineCursor) _ANSI_ARGS_((Display* d, Window w, Cursor c)); /* 20 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display* d, Window w)); /* 21 */
    void (*xDrawArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 22 */
    void (*xDrawLines) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2)); /* 23 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 24 */
    void (*xFillArc) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 25 */
    void (*xFillPolygon) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XPoint* x, int i1, int i2, int i3)); /* 26 */
    void (*xFillRectangles) _ANSI_ARGS_((Display* d, Drawable dr, GC g, XRectangle* x, int i)); /* 27 */
    void (*xFreeColormap) _ANSI_ARGS_((Display* d, Colormap c)); /* 28 */
    void (*xFreeColors) _ANSI_ARGS_((Display* d, Colormap c, unsigned long* ulp, int i, unsigned long ul)); /* 29 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap* x)); /* 30 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display* d, Drawable dr, Window* w, int* i1, int* i2, unsigned int* ui1, unsigned int* ui2, unsigned int* ui3, unsigned int* ui4)); /* 31 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display* d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom* ap, int* ip, unsigned long* ulp1, unsigned long* ulp2, unsigned char** cpp)); /* 32 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display* d, Window w, Bool b, int i1, int i2, Time t)); /* 33 */
    int (*xGrabPointer) _ANSI_ARGS_((Display* d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 34 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display* d, KeySym k)); /* 35 */
    void (*xMapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 36 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 37 */
    void (*xMoveWindow) _ANSI_ARGS_((Display* d, Window w, int i1, int i2)); /* 38 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, int* i1, int* i2, int* i3, int* i4, unsigned int* ui)); /* 39 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display* d, Window w)); /* 40 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent* x)); /* 41 */
    void (*xResizeWindow) _ANSI_ARGS_((Display* d, Window w, unsigned int ui1, unsigned int ui2)); /* 42 */
    void (*xSelectInput) _ANSI_ARGS_((Display* d, Window w, long l)); /* 43 */
    Status (*xSendEvent) _ANSI_ARGS_((Display* d, Window w, Bool b, long l, XEvent* x)); /* 44 */
    void (*xSetIconName) _ANSI_ARGS_((Display* d, Window w, _Xconst char* c)); /* 45 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display* d, Window w, int i, Time t)); /* 46 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display* d, Atom a, Window w, Time t)); /* 47 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display* d, Window w, unsigned long ul)); /* 50 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display* d, Window w, Pixmap p)); /* 51 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display* d, Window w, unsigned int ui)); /* 52 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display* d, Window w, Colormap c)); /* 53 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display* d, Time t)); /* 54 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display* d, Time t)); /* 55 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display* d, Window w)); /* 56 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display* display, Drawable d, GC gc, XImage* image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 57 */
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char* spec, XColor * colorPtr)); /* 58 */
    GC (*xCreateGC) _ANSI_ARGS_((Display* display, Drawable d, unsigned long valuemask, XGCValues* values)); /* 59 */
    void (*xFreeGC) _ANSI_ARGS_((Display* display, GC gc)); /* 60 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display* display, _Xconst char* atom_name, Bool only_if_exists)); /* 61 */
    void (*xSetBackground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 62 */
    void (*xSetForeground) _ANSI_ARGS_((Display* display, GC gc, unsigned long foreground)); /* 63 */
    void (*xSetClipMask) _ANSI_ARGS_((Display* display, GC gc, Pixmap pixmap)); /* 64 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display* display, GC gc, int clip_x_origin, int clip_y_origin)); /* 65 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display* display, GC gc, int ts_x_origin, int ts_y_origin)); /* 66 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 67 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 68 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 69 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 70 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 71 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 72 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 73 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 74 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 75 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 76 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display* display, long vinfo_mask, XVisualInfo* vinfo_template, int* nitems_return)); /* 77 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display* display, Window w, XTextProperty* text_prop)); /* 78 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char** list, int count, XTextProperty* text_prop_return)); /* 79 */
    void (*xDrawSegments) _ANSI_ARGS_((Display * display, Drawable d, GC gc, XSegment * segments, int nsegments)); /* 80 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display* display, int mode)); /* 81 */
    void (*xDrawLine) _ANSI_ARGS_((Display* d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 82 */
    void (*xFillRectangle) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 83 */
    void (*xClearWindow) _ANSI_ARGS_((Display* d, Window w)); /* 84 */
    void (*xDrawPoint) _ANSI_ARGS_((Display* display, Drawable d, GC gc, int x, int y)); /* 85 */
    void (*xDrawPoints) _ANSI_ARGS_((Display* display, Drawable d, GC gc, XPoint * points, int npoints, int mode)); /* 86 */
    void (*xWarpPointer) _ANSI_ARGS_((Display* display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y)); /* 87 */
    void (*xQueryColor) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * def_in_out)); /* 88 */
    void (*xQueryColors) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * defs_in_out, int ncolors)); /* 89 */
    Status (*xQueryTree) _ANSI_ARGS_((Display* d, Window w1, Window* w2, Window* w3, Window** w4, unsigned int* ui)); /* 90 */
#endif /* MAC_OSX_TK */
} TkIntXlibStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern TkIntXlibStubs *tkIntXlibStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifdef __WIN32__
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XCreatePixmapCursor
#define XCreatePixmapCursor \
	(tkIntXlibStubsPtr->xCreatePixmapCursor) /* 7 */
#endif
#ifndef XCreateGlyphCursor
#define XCreateGlyphCursor \
	(tkIntXlibStubsPtr->xCreateGlyphCursor) /* 8 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 9 */
#endif
#ifndef XListHosts
#define XListHosts \
	(tkIntXlibStubsPtr->xListHosts) /* 10 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 11 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 12 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 13 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 14 */
#endif
#ifndef XIconifyWindow
#define XIconifyWindow \
	(tkIntXlibStubsPtr->xIconifyWindow) /* 15 */
#endif
#ifndef XWithdrawWindow
#define XWithdrawWindow \
	(tkIntXlibStubsPtr->xWithdrawWindow) /* 16 */
#endif
#ifndef XGetWMColormapWindows
#define XGetWMColormapWindows \
	(tkIntXlibStubsPtr->xGetWMColormapWindows) /* 17 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 18 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 19 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 20 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 21 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 22 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 23 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 24 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 25 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 26 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 27 */
#endif
#ifndef XDeleteProperty
#define XDeleteProperty \
	(tkIntXlibStubsPtr->xDeleteProperty) /* 28 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 29 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 30 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 31 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 32 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 33 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 34 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 35 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 36 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 37 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 38 */
#endif
#ifndef XFreeCursor
#define XFreeCursor \
	(tkIntXlibStubsPtr->xFreeCursor) /* 39 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 40 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 41 */
#endif
#ifndef XGetInputFocus
#define XGetInputFocus \
	(tkIntXlibStubsPtr->xGetInputFocus) /* 42 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 43 */
#endif
#ifndef XGetWindowAttributes
#define XGetWindowAttributes \
	(tkIntXlibStubsPtr->xGetWindowAttributes) /* 44 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 45 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 46 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 47 */
#endif
#ifndef XLookupColor
#define XLookupColor \
	(tkIntXlibStubsPtr->xLookupColor) /* 48 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 49 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 50 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 51 */
#endif
#ifndef XNextEvent
#define XNextEvent \
	(tkIntXlibStubsPtr->xNextEvent) /* 52 */
#endif
#ifndef XPutBackEvent
#define XPutBackEvent \
	(tkIntXlibStubsPtr->xPutBackEvent) /* 53 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 54 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 55 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 56 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 57 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 58 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 59 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 60 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 61 */
#endif
#ifndef XSetCommand
#define XSetCommand \
	(tkIntXlibStubsPtr->xSetCommand) /* 62 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 63 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 64 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 65 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 66 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 67 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 68 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 69 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 70 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 71 */
#endif
#ifndef XTranslateCoordinates
#define XTranslateCoordinates \
	(tkIntXlibStubsPtr->xTranslateCoordinates) /* 72 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 73 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 74 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 75 */
#endif
#ifndef XWindowEvent
#define XWindowEvent \
	(tkIntXlibStubsPtr->xWindowEvent) /* 76 */
#endif
#ifndef XDestroyIC
#define XDestroyIC \
	(tkIntXlibStubsPtr->xDestroyIC) /* 77 */
#endif
#ifndef XFilterEvent
#define XFilterEvent \
	(tkIntXlibStubsPtr->xFilterEvent) /* 78 */
#endif
#ifndef XmbLookupString
#define XmbLookupString \
	(tkIntXlibStubsPtr->xmbLookupString) /* 79 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 80 */
#endif
/* Slot 81 is reserved */
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 82 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 83 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 84 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 85 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 86 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 87 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 88 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 89 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 90 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 91 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 92 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 93 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 94 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 95 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 96 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 97 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 98 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 99 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 100 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 101 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 102 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 103 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 104 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 105 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 106 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_TCL
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 7 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 8 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 9 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 10 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 11 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 12 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 13 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 14 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 15 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 16 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 17 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 18 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 19 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 20 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 21 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 22 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 23 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 24 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 25 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 26 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 27 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 28 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 29 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 30 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 31 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 32 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 33 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 34 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 35 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 36 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 37 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 38 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 39 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 40 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 41 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 42 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 43 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 44 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 45 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 46 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 47 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 48 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 49 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 50 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 51 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 52 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 53 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 54 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 55 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 56 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 57 */
#endif
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 58 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 59 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 60 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 61 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 62 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 63 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 64 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 65 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 66 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 67 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 68 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 69 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 70 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 71 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 72 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 73 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 74 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 75 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 76 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 77 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 78 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 79 */
#endif
#ifndef XDrawSegments
#define XDrawSegments \
	(tkIntXlibStubsPtr->xDrawSegments) /* 80 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 81 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 82 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 83 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 84 */
#endif
#ifndef XDrawPoint
#define XDrawPoint \
	(tkIntXlibStubsPtr->xDrawPoint) /* 85 */
#endif
#ifndef XDrawPoints
#define XDrawPoints \
	(tkIntXlibStubsPtr->xDrawPoints) /* 86 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 87 */
#endif
#ifndef XQueryColor
#define XQueryColor \
	(tkIntXlibStubsPtr->xQueryColor) /* 88 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 89 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 90 */
#endif
#endif /* MAC_TCL */
#ifdef MAC_OSX_TK
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 7 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 8 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 9 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 10 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 11 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 12 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 13 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 14 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 15 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 16 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 17 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 18 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 19 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 20 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 21 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 22 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 23 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 24 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 25 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 26 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 27 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 28 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 29 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 30 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 31 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 32 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 33 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 34 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 35 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 36 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 37 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 38 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 39 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 40 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 41 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 42 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 43 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 44 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 45 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 46 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 47 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 48 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 49 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 50 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 51 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 52 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 53 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 54 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 55 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 56 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 57 */
#endif
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 58 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 59 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 60 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 61 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 62 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 63 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 64 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 65 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 66 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 67 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 68 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 69 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 70 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 71 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 72 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 73 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 74 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 75 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 76 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 77 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 78 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 79 */
#endif
#ifndef XDrawSegments
#define XDrawSegments \
	(tkIntXlibStubsPtr->xDrawSegments) /* 80 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 81 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 82 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 83 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 84 */
#endif
#ifndef XDrawPoint
#define XDrawPoint \
	(tkIntXlibStubsPtr->xDrawPoint) /* 85 */
#endif
#ifndef XDrawPoints
#define XDrawPoints \
	(tkIntXlibStubsPtr->xDrawPoints) /* 86 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 87 */
#endif
#ifndef XQueryColor
#define XQueryColor \
	(tkIntXlibStubsPtr->xQueryColor) /* 88 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 89 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 90 */
#endif
#endif /* MAC_OSX_TK */

#endif /* defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TKINTXLIBDECLS */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.2
log
@ws, test three
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 14.1 2004/11/16 19:42:10 morrison Exp $
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.1 2004/05/24 04:10:51 morrison Exp $
d43 2
a44 2
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc, 
				int dash_offset, _Xconst char* dash_list, 
d49 3
a51 3
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
d54 2
a55 2
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
d62 1
a62 1
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
d65 2
a66 2
EXTERN Cursor		XCreatePixmapCursor _ANSI_ARGS_((Display* d, 
				Pixmap p1, Pixmap p2, XColor* x1, XColor* x2, 
d69 2
a70 2
EXTERN Cursor		XCreateGlyphCursor _ANSI_ARGS_((Display* d, Font f1, 
				Font f2, unsigned int ui1, unsigned int ui2, 
d77 1
a77 1
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, 
d86 1
a86 1
EXTERN Status		XIconifyWindow _ANSI_ARGS_((Display* d, Window w, 
d89 1
a89 1
EXTERN Status		XWithdrawWindow _ANSI_ARGS_((Display* d, Window w, 
d92 1
a92 1
EXTERN Status		XGetWMColormapWindows _ANSI_ARGS_((Display* d, 
d95 1
a95 1
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
d100 2
a101 2
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
d104 2
a105 2
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
d110 1
a110 1
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
d113 3
a115 3
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
d118 3
a120 3
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
d123 2
a124 2
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display, 
				Drawable d, _Xconst char* data, 
d127 1
a127 1
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
d130 1
a130 1
EXTERN void		XDeleteProperty _ANSI_ARGS_((Display* d, Window w, 
d135 2
a136 2
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
d139 1
a139 1
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
d142 2
a143 2
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
d146 2
a147 2
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
d150 1
a150 1
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
d153 1
a153 1
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
d160 1
a160 1
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
d167 3
a169 3
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
d172 1
a172 1
EXTERN void		XGetInputFocus _ANSI_ARGS_((Display* d, Window* w, 
d175 3
a177 3
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
d180 1
a180 1
EXTERN Status		XGetWindowAttributes _ANSI_ARGS_((Display* d, 
d183 1
a183 1
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
d186 2
a187 2
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
d192 1
a192 1
EXTERN Status		XLookupColor _ANSI_ARGS_((Display* d, Colormap c1, 
d197 2
a198 2
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
d201 1
a201 1
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
d208 1
a208 1
EXTERN void		XQueryColors _ANSI_ARGS_((Display* d, Colormap c, 
d211 2
a212 2
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
d215 2
a216 2
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
d224 1
a224 1
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
d227 1
a227 1
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
d230 1
a230 1
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
d233 1
a233 1
EXTERN void		XSetCommand _ANSI_ARGS_((Display* d, Window w, 
d236 1
a236 1
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
d239 1
a239 1
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
d242 1
a242 1
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
d245 1
a245 1
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
d248 1
a248 1
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
d251 1
a251 1
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
d254 1
a254 1
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
d257 1
a257 1
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
d260 1
a260 1
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
d263 2
a264 2
EXTERN Bool		XTranslateCoordinates _ANSI_ARGS_((Display* d, 
				Window w1, Window w2, int i1, int i2, 
d273 1
a273 1
EXTERN void		XWindowEvent _ANSI_ARGS_((Display* d, Window w, 
d280 2
a281 2
EXTERN int		XmbLookupString _ANSI_ARGS_((XIC xi, 
				XKeyPressedEvent* xk, char* c, int i, 
d284 4
a287 4
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
d291 2
a292 2
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char* spec, 
d295 1
a295 1
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d, 
d300 1
a300 1
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display, 
d303 1
a303 1
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc, 
d306 1
a306 1
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc, 
d309 1
a309 1
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc, 
d312 1
a312 1
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc, 
d315 1
a315 1
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc, 
d318 1
a318 1
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
d321 1
a321 1
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
d324 1
a324 1
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
d327 1
a327 1
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
d330 1
a330 1
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
d333 1
a333 1
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
d336 1
a336 1
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
d339 3
a341 3
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
d348 2
a349 2
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display, 
				long vinfo_mask, XVisualInfo* vinfo_template, 
d352 1
a352 1
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display, 
d355 1
a355 1
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list, 
d358 1
a358 1
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
d361 2
a362 2
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* d, Window s, 
				Window dw, int sx, int sy, unsigned int sw, 
d365 2
a366 2
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, int x, int y, 
d371 2
a372 2
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc, 
				int dash_offset, _Xconst char* dash_list, 
d377 3
a379 3
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
d382 2
a383 2
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
d390 1
a390 1
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
d395 1
a395 1
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, KeyCode k, 
d404 1
a404 1
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
d409 2
a410 2
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
d413 2
a414 2
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
d417 1
a417 1
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
d420 3
a422 3
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
d425 3
a427 3
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
d430 2
a431 2
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display, 
				Drawable d, _Xconst char* data, 
d434 1
a434 1
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
d439 2
a440 2
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
d443 1
a443 1
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
d446 2
a447 2
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
d450 2
a451 2
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
d454 1
a454 1
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
d457 1
a457 1
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
d462 1
a462 1
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
d467 3
a469 3
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
d472 3
a474 3
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
d477 1
a477 1
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
d480 2
a481 2
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
d488 2
a489 2
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
d492 1
a492 1
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
d495 2
a496 2
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
d504 1
a504 1
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
d507 1
a507 1
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
d510 1
a510 1
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
d513 1
a513 1
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
d516 1
a516 1
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
d519 1
a519 1
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
d522 1
a522 1
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
d525 1
a525 1
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
d528 1
a528 1
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
d531 1
a531 1
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
d534 1
a534 1
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
d537 1
a537 1
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
d546 4
a549 4
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
d552 2
a553 2
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char* spec, 
d556 1
a556 1
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d, 
d561 1
a561 1
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display, 
d564 1
a564 1
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc, 
d567 1
a567 1
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc, 
d570 1
a570 1
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc, 
d573 1
a573 1
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc, 
d576 1
a576 1
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc, 
d579 1
a579 1
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
d582 1
a582 1
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
d585 1
a585 1
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
d588 1
a588 1
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
d591 1
a591 1
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
d594 1
a594 1
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
d597 1
a597 1
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
d600 3
a602 3
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
d609 2
a610 2
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display, 
				long vinfo_mask, XVisualInfo* vinfo_template, 
d613 1
a613 1
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display, 
d616 1
a616 1
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list, 
d619 2
a620 2
EXTERN void		XDrawSegments _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, XSegment * segments, 
d623 1
a623 1
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* display, 
d626 1
a626 1
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
d629 2
a630 2
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, int x, int y, 
d635 1
a635 1
EXTERN void		XDrawPoint _ANSI_ARGS_((Display* display, Drawable d, 
d638 2
a639 2
EXTERN void		XDrawPoints _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, XPoint * points, 
d642 4
a645 4
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* display, 
				Window src_w, Window dest_w, int src_x, 
				int src_y, unsigned int src_width, 
				unsigned int src_height, int dest_x, 
d648 1
a648 1
EXTERN void		XQueryColor _ANSI_ARGS_((Display * display, 
d651 2
a652 2
EXTERN void		XQueryColors _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * defs_in_out, 
d655 2
a656 2
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
d661 2
a662 2
EXTERN void		XSetDashes _ANSI_ARGS_((Display* display, GC gc, 
				int dash_offset, _Xconst char* dash_list, 
d667 3
a669 3
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display* d, Visual* v, 
				unsigned int ui1, int i1, int i2, char* cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
d672 2
a673 2
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display* d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
d680 1
a680 1
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display* d, Window w, 
d685 1
a685 1
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display* d, KeyCode k, 
d694 1
a694 1
EXTERN Status		XAllocColor _ANSI_ARGS_((Display* d, Colormap c, 
d699 2
a700 2
EXTERN void		XChangeProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
d703 2
a704 2
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display* d, 
				Window w, unsigned long ul, 
d707 1
a707 1
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display* d, Window w, 
d710 3
a712 3
EXTERN void		XCopyArea _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
d715 3
a717 3
EXTERN void		XCopyPlane _ANSI_ARGS_((Display* d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
d720 2
a721 2
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display* display, 
				Drawable d, _Xconst char* data, 
d724 1
a724 1
EXTERN void		XDefineCursor _ANSI_ARGS_((Display* d, Window w, 
d729 2
a730 2
EXTERN void		XDrawArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
d733 1
a733 1
EXTERN void		XDrawLines _ANSI_ARGS_((Display* d, Drawable dr, 
d736 2
a737 2
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display* d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
d740 2
a741 2
EXTERN void		XFillArc _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
d744 1
a744 1
EXTERN void		XFillPolygon _ANSI_ARGS_((Display* d, Drawable dr, 
d747 1
a747 1
EXTERN void		XFillRectangles _ANSI_ARGS_((Display* d, Drawable dr, 
d752 1
a752 1
EXTERN void		XFreeColors _ANSI_ARGS_((Display* d, Colormap c, 
d757 3
a759 3
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display* d, Drawable dr, 
				Window* w, int* i1, int* i2, 
				unsigned int* ui1, unsigned int* ui2, 
d762 3
a764 3
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display* d, Window w, 
				Atom a1, long l1, long l2, Bool b, Atom a2, 
				Atom* ap, int* ip, unsigned long* ulp1, 
d767 1
a767 1
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display* d, Window w, 
d770 2
a771 2
EXTERN int		XGrabPointer _ANSI_ARGS_((Display* d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
d778 2
a779 2
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display* d, Window w, 
				int i1, int i2, unsigned int ui1, 
d782 1
a782 1
EXTERN void		XMoveWindow _ANSI_ARGS_((Display* d, Window w, 
d785 2
a786 2
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, int* i1, int* i2, 
d794 1
a794 1
EXTERN void		XResizeWindow _ANSI_ARGS_((Display* d, Window w, 
d797 1
a797 1
EXTERN void		XSelectInput _ANSI_ARGS_((Display* d, Window w, 
d800 1
a800 1
EXTERN Status		XSendEvent _ANSI_ARGS_((Display* d, Window w, Bool b, 
d803 1
a803 1
EXTERN void		XSetIconName _ANSI_ARGS_((Display* d, Window w, 
d806 1
a806 1
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display* d, Window w, 
d809 1
a809 1
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display* d, Atom a, 
d812 1
a812 1
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display* d, 
d815 1
a815 1
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display* d, 
d818 1
a818 1
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display* d, Window w, 
d821 1
a821 1
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display* d, 
d824 1
a824 1
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display* d, 
d827 1
a827 1
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display* d, Window w, 
d836 4
a839 4
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display* display, Drawable d, 
				GC gc, XImage* image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
d842 2
a843 2
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char* spec, 
d846 1
a846 1
EXTERN GC		XCreateGC _ANSI_ARGS_((Display* display, Drawable d, 
d851 1
a851 1
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display* display, 
d854 1
a854 1
EXTERN void		XSetBackground _ANSI_ARGS_((Display* display, GC gc, 
d857 1
a857 1
EXTERN void		XSetForeground _ANSI_ARGS_((Display* display, GC gc, 
d860 1
a860 1
EXTERN void		XSetClipMask _ANSI_ARGS_((Display* display, GC gc, 
d863 1
a863 1
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display* display, GC gc, 
d866 1
a866 1
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display* display, GC gc, 
d869 1
a869 1
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
d872 1
a872 1
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
d875 1
a875 1
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
d878 1
a878 1
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
d881 1
a881 1
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
d884 1
a884 1
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
d887 1
a887 1
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
d890 3
a892 3
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
d899 2
a900 2
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display* display, 
				long vinfo_mask, XVisualInfo* vinfo_template, 
d903 1
a903 1
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display* display, 
d906 1
a906 1
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char** list, 
d909 2
a910 2
EXTERN void		XDrawSegments _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, XSegment * segments, 
d913 1
a913 1
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display* display, 
d916 1
a916 1
EXTERN void		XDrawLine _ANSI_ARGS_((Display* d, Drawable dr, GC g, 
d919 2
a920 2
EXTERN void		XFillRectangle _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, int x, int y, 
d925 1
a925 1
EXTERN void		XDrawPoint _ANSI_ARGS_((Display* display, Drawable d, 
d928 2
a929 2
EXTERN void		XDrawPoints _ANSI_ARGS_((Display* display, 
				Drawable d, GC gc, XPoint * points, 
d932 4
a935 4
EXTERN void		XWarpPointer _ANSI_ARGS_((Display* display, 
				Window src_w, Window dest_w, int src_x, 
				int src_y, unsigned int src_width, 
				unsigned int src_height, int dest_x, 
d938 1
a938 1
EXTERN void		XQueryColor _ANSI_ARGS_((Display * display, 
d941 2
a942 2
EXTERN void		XQueryColors _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * defs_in_out, 
d945 2
a946 2
EXTERN Status		XQueryTree _ANSI_ARGS_((Display* d, Window w1, 
				Window* w2, Window* w3, Window** w4, 
@


1.1
log
@moved/renamed from top-level h/ to top-level include/
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id$
d2433 10
@

