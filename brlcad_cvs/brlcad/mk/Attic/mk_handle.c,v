head	11.11;
access;
symbols
	ansi-20040405-merged:11.8.2.1
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.8
	premerge-autoconf:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.8
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.5
	rel-5-4:11.2
	offsite-5-3-pre:11.5
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.17.47.19;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.07.39.54;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.08.29;	author jra;	state Exp;
branches
	11.8.2.1;
next	11.7;

11.7
date	2002.08.15.20.55.42;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2002.05.17.12.55.43;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2000.08.24.04.05.24;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.07.12.21.58.31;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.07.12.03.59.20;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.03.29.18.29.25;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.06.35;	author mike;	state Rel4_4;
branches;
next	1.5;

1.5
date	94.10.31.23.24.00;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	94.08.09.19.19.38;	author gdurf;	state Exp;
branches;
next	1.3;

1.3
date	94.08.09.19.13.57;	author gdurf;	state Exp;
branches;
next	1.2;

1.2
date	92.09.17.09.38.15;	author scoates;	state Exp;
branches;
next	1.1;

1.1
date	92.09.15.09.52.08;	author scoates;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.02.09;	author morrison;	state Exp;
branches;
next	;


desc
@Program to create an mged data base of handles of like dimensions
@


11.11
log
@moved to src/mk/
@
text
@
/*  File:  mk_handle.c  */
/*  S.Coates - 26 August 1992  */
/*  To compile for use separately:  */
/*  cc mk_handle.c /usr/brlcad/lib/libwdb.a /usr/brlcad/lib/librt.a  */
/*	-lmpc -lm -o mk_handle  */

/*  Program to make a handle using libwdb.  The objects will be  */
/*  in millimeters.  This handle will be constructed using three  */
/*  cylinders, two tori, and two arb8s.  The base of the handle  */
/*  will be centered at (0,0,0) and the height of the handle  */
/*  will extend in the positive z-direction.  */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <math.h>

#include "machine.h"
#include "db.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"

#ifdef M_PI
#define PI M_PI
#else
#define PI 3.141592653589793
#endif

int
main(int argc, char **argv)
{							/*  START # 1  */
   struct rt_wdb *fpw;			/*  File to be written to.  */
   char filemged[26];		/*  Mged file create.  */
   double hgt,len;		/*  Height & length of handle.  */
   double r1,r2;		/*  Radius of tori & radius of cylinders.  */
   point_t pts[8];		/*  Eight points of arb8.  */
   point_t bs;			/*  Base of rcc.  */
   vect_t ht;			/*  Height of rcc.  */
   fastf_t rad;			/*  Radius of rcc.  */
   point_t cent;		/*  Center of torus.  */
   vect_t norm;			/*  Normal of torus.  */
   double rad1,rad2;		/*  R1 and r2 of torus.  */
   char *temp;			/*  Temporary character string.  */
   char temp1[16];		/*  Temporary character string.  */

   char solnam[8];		/*  Solid name.  */
   char regnam[8];		/*  Region name.  */
   char grpnam[5];		/*  Group name.  */
   int numhan;			/*  Number of handles to be created (<=26).  */

   struct wmember comb;		/*  Used to make regions.  */
   struct wmember comb1;	/*  Used to make groups.  */

   int i,j,k;			/*  Loop counters.  */

   /*  Set up solid, region, and group names.  */
   solnam[0] = 's';
   solnam[1] = '.';
   solnam[2] = 'h';
   solnam[3] = 'a';
   solnam[4] = 'n';
   solnam[5] = ' ';
   solnam[6] = '#';
   solnam[7] = '\0';
   regnam[0] = 'r';
   regnam[1] = '.';
   regnam[2] = 'h';
   regnam[3] = 'a';
   regnam[4] = 'n';
   regnam[5] = ' ';
   regnam[6] = '#';
   regnam[7] = '\0';
   grpnam[0] = 'h';
   grpnam[1] = 'a';
   grpnam[2] = 'n';
   grpnam[3] = ' ';
   grpnam[4] = '\0';

   /*  If there are no arguments ask questions.  */
   if(argc == 1)
   {							/*  START # 3  */

   /*  Explain makings of handle.  */
   (void)printf("\nThis program constructs a handle with the base centered\n");
   (void)printf("at (0,0,0) and the height extending in the positive z-\n");
   (void)printf("direction.  The handle will be composed of 3 cylinders,\n");
   (void)printf("2 tori, and 2 arb8s.\n\n");
   (void)fflush(stdout);

   /*  Find name of mged file to create.  */
   (void)printf("Enter the name of the mged file to be created ");
   (void)printf("(25 char max).\n\t");
   (void)fflush(stdout);
   (void)scanf("%s",filemged);

   /*  Find number of handles to create (<=26).  */
   (void)printf("Enter number of handles to create (26 max).\n\t");
   (void)fflush(stdout);
   (void)scanf("%d",&numhan);
   if(numhan > 26) numhan = 26;

   /*  Find dimensions of handle.  */
   (void)printf("Enter the length and height of handle in mm.\n\t");
   (void)fflush(stdout);
   (void)scanf("%lf %lf",&len,&hgt);

   (void)printf("Enter the radius of the tori in mm.\n\t");
   (void)fflush(stdout);
   (void)scanf("%lf",&r1);

   (void)printf("Enter the radius of the cylinders in mm.\n\t");
   (void)fflush(stdout);
   (void)scanf("%lf",&r2);

   }							/*  END # 3  */

   /*  if there are arguments get the answers from the arguments.  */
   else
   {							/*  START # 4  */
	/*  List of options.  */
	/*	-fname - name = name of .g file.  */
	/*	-n# - # = number of handles.  */
	/*	-l# - # = length of handle in mm.  */
	/*	-h# - # = height of handle in mm.  */
	/*	-r1# - # = r1 radius of torus.  */
	/*	-r2# - # = r2 radius of torus & cylinder.  */

	for(i=1; i<argc; i++)
	{						/*  START # 5  */
	   /*  Put argument into temporary character string.  */
	   temp = argv[i];

	   /*  -f - mged file name.  */
	   if(temp[1] == 'f')
	   {						/*  START # 6  */
		j = 2;
		k = 0;
		while( (temp[j] != '\0') && (k < 25) )
		{					/*  START # 7  */
		   filemged[k] = temp[j];
		   j++;
		   k++;
		}					/*  END # 7  */
		filemged[k] = '\0';
	   }						/*  END # 6  */

	   /*  -n - # of handles to be created.  */
	   else if(temp[1] == 'n')
	   {						/*  START # 8  */
		/*  Set up temporary character string.  */
		j = 2;
		k = 0;
		while( (temp[j] != '\0') && (k < 15) )
		{					/*  START # 9  */
		   temp1[k] = temp[j];
		   j++;
		   k++;
		}					/*  END # 9  */
		temp1[k] = '\0';
		(void)sscanf(temp1,"%d",&numhan);
		if(numhan > 26) numhan = 26;
	   }						/*  END # 8  */

	   /*  -l or -h - length and height of handle in mm.  */
	   else if( (temp[1] == 'l') || (temp[1] == 'h') )
	   {						/*  START # 10  */
		/*  Set up temporary character string.  */
		j = 2;
		k = 0;
		while( (temp[j] != '\0') && (k < 15) )
		{					/*  START # 11  */
		   temp1[k] = temp[j];
		   j++;
		   k++;
		}					/*  END # 11  */
		temp1[k] = '\0';
		if(temp[1] == 'l') (void)sscanf(temp1,"%lf",&len);
		else if(temp[1] == 'h') (void)sscanf(temp1,"%lf",&hgt);
	   }						/*  END # 10  */

	   /*  -r1 or -r2 - radii for torus.  */
	   else if(temp[1] == 'r')
	   {						/*  START # 12  */
		/*  Set up temporary character string.  */
		j = 3;
		k = 0;
		while( (temp[j] != '\0') && (k < 15) )
		{					/*  START # 13  */
		   temp1[k] = temp[j];
		   j++;
		   k++;
		}					/*  END # 13  */
		temp1[k] = '\0';
		if(temp[2] == '1') (void)sscanf(temp1,"%lf",&r1);
		else if(temp[2] == '2') (void)sscanf(temp1,"%lf",&r2);
	   }						/*  END # 12  */
	}						/*  END # 5  */
   }							/*  END # 4  */

   /*  Print out dimensions of the handle.  */
   (void)printf("\nmged file name:  %s\n",filemged);
   (void)printf("length:  %f mm\n",len);
   (void)printf("height:  %f mm\n",hgt);
   (void)printf("radius of tori:  %f mm\n",r1);
   (void)printf("radius of cylinders:  %f mm\n",r2);
   (void)printf("number of handles:  %d\n\n",numhan);
   (void)fflush(stdout);

   /*  Open mged file for writing to.  */
   fpw = wdb_fopen(filemged);

   /*  Write ident record.  */
   mk_id(fpw,"handles");

   for(i=0; i<numhan; i++)
   {							/*  START # 2  */

   /*  Create solids for handle.  */

   /*  Create top cylinder.  */
   bs[0] = (fastf_t)0.;
   bs[1] = (fastf_t) (len / 2. - r1 - r2);
   bs[2] = (fastf_t) (hgt - r2);
   ht[0] = (fastf_t)0.;
   ht[1] = (fastf_t) (r1 + r1 + r2 + r2 - len);
   ht[2] = (fastf_t)0.;
   rad = (fastf_t)r2;
   solnam[5] = 97 + i;
   solnam[6] = '1';
   mk_rcc(fpw,solnam,bs,ht,rad);

   /*  Create right cylinder.  */
   bs[0] = (fastf_t)0.;
   bs[1] = (fastf_t) (len / 2. - r2);
   bs[2] = (fastf_t)0.;
   ht[0] = (fastf_t)0.;
   ht[1] = (fastf_t)0.;
   ht[2] = (fastf_t) (hgt - r1 - r2);
   rad = (fastf_t)r2;
   solnam[6] = '2';
   mk_rcc(fpw,solnam,bs,ht,rad);

   /*  Create left cylinder.  */
   bs[1] = (-bs[1]);
   solnam[6] = '3';
   mk_rcc(fpw,solnam,bs,ht,rad);

   /*  Create right torus.  */
   cent[0] = (fastf_t)0.;
   cent[1] = (fastf_t) (len / 2. -r1 - r2);
   cent[2] = (fastf_t) (hgt - r1 -r2);
   norm[0] = (fastf_t)1.;
   norm[1] = (fastf_t)0.;
   norm[2] = (fastf_t)0.;
   rad1 = r1;
   rad2 = r2;
   solnam[6] = '4';
   mk_tor(fpw,solnam,cent,norm,rad1,rad2);

   /*  Create left torus.  */
   cent[1] = (-cent[1]);
   solnam[6] = '5';
   mk_tor(fpw,solnam,cent,norm,rad1,rad2);

   /*  Create right arb8.  */
   pts[0][0] = (fastf_t)r2;
   pts[0][1] = (fastf_t) (len / 2. - r1 - r2);
   pts[0][2] = (fastf_t)hgt;
   pts[1][0] = (fastf_t)r2;
   pts[1][1] = (fastf_t) (len / 2.);
   pts[1][2] = (fastf_t)hgt;
   pts[2][0] = (fastf_t)r2;
   pts[2][1] = (fastf_t) (len / 2.);
   pts[2][2] = (fastf_t) (hgt -r1 - r2);
   pts[3][0] = (fastf_t)r2;
   pts[3][1] = (fastf_t) (len / 2. - r1 - r2);
   pts[3][2] = (fastf_t) (hgt -r1 - r2);
   pts[4][0] = (fastf_t)(-r2);
   pts[4][1] = (fastf_t) (len / 2. - r1 - r2);
   pts[4][2] = (fastf_t)hgt;
   pts[5][0] = (fastf_t)(-r2);
   pts[5][1] = (fastf_t) (len / 2.);
   pts[5][2] = (fastf_t)hgt;
   pts[6][0] = (fastf_t)(-r2);
   pts[6][1] = (fastf_t) (len / 2.);
   pts[6][2] = (fastf_t) (hgt -r1 - r2);
   pts[7][0] = (fastf_t)(-r2);
   pts[7][1] = (fastf_t) (len / 2. - r1 - r2);
   pts[7][2] = (fastf_t) (hgt -r1 - r2);
   solnam[6] ='6';
   mk_arb8(fpw,solnam, &pts[0][X]);

   /*  Create left arb8.  */
   pts[0][1] = (-pts[0][1]);
   pts[1][1] = (-pts[1][1]);
   pts[2][1] = (-pts[2][1]);
   pts[3][1] = (-pts[3][1]);
   pts[4][1] = (-pts[4][1]);
   pts[5][1] = (-pts[5][1]);
   pts[6][1] = (-pts[6][1]);
   pts[7][1] = (-pts[7][1]);
   solnam[6] = '7';
   mk_arb8(fpw,solnam, &pts[0][X]);

   /*  Create all regions.  */

   /*  Initialize list.  */
   BU_LIST_INIT(&comb.l);

   solnam[6] = '1';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
   regnam[5] = 97 + i;
   regnam[6] = '1';
   mk_lfcomb(fpw,regnam,&comb,1);

   solnam[6] = '2';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
   regnam[6] = '2';
   mk_lfcomb(fpw,regnam,&comb,1);

   solnam[6] = '3';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
   regnam[6] = '3';
   mk_lfcomb(fpw,regnam,&comb,1);

   solnam[6] = '4';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
   solnam[6] = '6';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
   solnam[6] = '1';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
   solnam[6] = '2';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
   regnam[6] = '4';
   mk_lfcomb(fpw,regnam,&comb,1);

   solnam[6] = '5';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
   solnam[6] = '7';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
   solnam[6] = '1';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
   solnam[6] = '3';
   (void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
   regnam[6] = '5';
   mk_lfcomb(fpw,regnam,&comb,1);

   /*  Create a group.  */

   /*  Initialize list.  */
   BU_LIST_INIT(&comb1.l);

   regnam[6] = '1';
   (void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
   regnam[6] = '2';
   (void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
   regnam[6] = '3';
   (void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
   regnam[6] = '4';
   (void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
   regnam[6] = '5';
   (void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
   grpnam[3] = 97 + i;
   mk_lfcomb(fpw,grpnam,&comb1,0);

   }							/*  END # 2  */

   /*  Close mged file.  */
   wdb_close(fpw);
   return 0;

}							/*  END # 1  */
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@@


11.9
log
@merge of ansi-6-0-branch into HEAD
@
text
@d14 5
a18 1
#include "conf.h"
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d40 1
a40 5
main(argc,argv)

int argc;
char *argv[];

@


11.8.2.1
log
@Initial ANSIfication
@
text
@d40 5
a44 1
main(int argc, char **argv)
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d40 5
a44 1
main(int argc, char **argv)
@


11.6
log
@added matrix parameter to mk_addmember()
@
text
@d40 1
a40 5
main(argc,argv)

int argc;
char *argv[];

@


11.5
log
@
mk_addmember()
@
text
@d325 1
a325 1
   (void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d331 1
a331 1
   (void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d336 1
a336 1
   (void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d341 1
a341 1
   (void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d343 1
a343 1
   (void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d345 1
a345 1
   (void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d347 1
a347 1
   (void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d352 1
a352 1
   (void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d354 1
a354 1
   (void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d356 1
a356 1
   (void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d358 1
a358 1
   (void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d368 1
a368 1
   (void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d370 1
a370 1
   (void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d372 1
a372 1
   (void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d374 1
a374 1
   (void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d376 1
a376 1
   (void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
@


11.4
log
@
Converted to use new version of LIBWDB.
@
text
@d325 1
a325 1
   (void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d331 1
a331 1
   (void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d336 1
a336 1
   (void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d341 1
a341 1
   (void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d343 1
a343 1
   (void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d345 1
a345 1
   (void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d347 1
a347 1
   (void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d352 1
a352 1
   (void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d354 1
a354 1
   (void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d356 1
a356 1
   (void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d358 1
a358 1
   (void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d368 1
a368 1
   (void)mk_addmember(regnam,&comb1,WMOP_UNION);
d370 1
a370 1
   (void)mk_addmember(regnam,&comb1,WMOP_UNION);
d372 1
a372 1
   (void)mk_addmember(regnam,&comb1,WMOP_UNION);
d374 1
a374 1
   (void)mk_addmember(regnam,&comb1,WMOP_UNION);
d376 1
a376 1
   (void)mk_addmember(regnam,&comb1,WMOP_UNION);
@


11.3
log
@
Now need raytrace.h for wdb.h
@
text
@d46 1
a46 1
   FILE *fpw;			/*  File to be written to.  */
d224 1
a224 1
   fpw = fopen(filemged,"w");
d383 1
a383 1
   (void)fclose(fpw);
@


11.2
log
@
RT_LIST to BU_LIST
@
text
@d30 1
@


11.1
log
@Release_4.4
@
text
@d321 1
a321 1
   RT_LIST_INIT(&comb.l);
d364 1
a364 1
   RT_LIST_INIT(&comb1.l);
@


1.5
log
@Changed to match new function prototype of mk_arb8().
@
text
@@


1.4
log
@factored ifdefs
@
text
@d304 1
a304 1
   mk_arb8(fpw,solnam,pts);
d316 1
a316 1
   mk_arb8(fpw,solnam,pts);
@


1.3
log
@Added include of conf.h
@
text
@d17 1
d19 2
d22 3
@


1.2
log
@Remove path names from include statements.
@
text
@d14 2
d26 3
d30 1
d32 1
d377 1
@


1.1
log
@Initial revision
@
text
@d19 4
a22 4
#include "/usr/brlcad/include/machine.h"
#include "/usr/brlcad/include/db.h"
#include "/usr/brlcad/include/vmath.h"
#include "/usr/brlcad/include/wdb.h"
@
