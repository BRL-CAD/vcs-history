head	11.11;
access;
symbols
	ansi-20040405-merged:11.8.2.1
	postmerge-20040405-ansi:11.9
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.8
	premerge-autoconf:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.8
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.5
	rel-5-4:11.2
	offsite-5-3-pre:11.5
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.11
date	2004.05.21.17.47.20;	author morrison;	state dead;
branches;
next	11.10;

11.10
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	11.9;

11.9
date	2004.04.05.07.39.54;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.08.29;	author jra;	state Exp;
branches
	11.8.2.1;
next	11.7;

11.7
date	2002.08.15.20.55.42;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2002.05.17.12.55.43;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2000.08.24.04.05.24;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.07.12.21.58.31;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.07.12.03.59.20;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.03.29.18.29.26;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.06.38;	author mike;	state Rel4_4;
branches;
next	1.5;

1.5
date	94.10.31.23.24.02;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	94.08.09.19.20.10;	author gdurf;	state Exp;
branches;
next	1.3;

1.3
date	94.08.09.19.15.38;	author gdurf;	state Exp;
branches;
next	1.2;

1.2
date	92.09.17.09.44.17;	author scoates;	state Exp;
branches;
next	1.1;

1.1
date	92.09.15.10.02.11;	author scoates;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.02.09;	author morrison;	state Exp;
branches;
next	;


desc
@Program to create window frames with rounded corners.  There are
slight problems when raytracing, some dots appear that should not
appear.
@


11.11
log
@moved to src/mk/
@
text
@
/*  File:  mk_winfrm.c  */
/*  S.Coates - 26 August 1992  */
/*  To compile for use separately:  */
/*  cc mk_winfrm.c /usr/brlcad/lib/libwdb.a /usr/brlcad/lib/librt.a  */
/*	-lmpc -lm -o mk_winfrm  */

/*  Program to make a window frame using libwdb.  The objects will be  */
/*  in millimeters.  The window frames are composed of four arb8s and  */
/*  eight cylinders.  The front of the window frame is centered at  */
/*  (0,0,0) and extends in the negative x-direction the depth of the  */
/*  window frame.  */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <math.h>

#include "machine.h"
#include "db.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"

#ifdef M_PI
#define PI M_PI
#else
#define PI 3.141592653589793
#endif

int
main(int argc, char **argv)
{							/*  START # 1  */
   struct rt_wdb *fpw;		/*  File to be written to.  */
   char filemged[26];		/*  Mged file create.  */
   double hgt,wid,dpt;		/*  Height, width, & depth of outside window  */
				/*  frame.  */
   double rds;			/*  Radius of the corner of window frame.  */
   double isw;			/*  Width of frame itself.  */
   point_t pts[8];		/*  Eight points of arb8.  */
   point_t bs;			/*  Base of rcc.  */
   vect_t ht;			/*  Height of rcc.  */
   fastf_t rad;			/*  Radius of rcc.  */
   char *temp;			/*  Temporary character string.  */
   char temp1[16];		/*  Temporary character string.  */

   char solnam[9];		/*  Solid name.  */
   char regnam[8];		/*  Region name.  */
   char grpnam[5];		/*  Group name.  */
   int numwin;			/*  Number of windows to be created (<=26).  */

   struct wmember comb;		/*  Used to make regions.  */
   struct wmember comb1;	/*  Used to make groups.  */

   int i,j,k;			/*  Loop counters.  */

   /*  Set up solid, region, and group names.  */
   solnam[0] = 's';
   solnam[1] = '.';
   solnam[2] = 'w';
   solnam[3] = 'f';
   solnam[4] = 'r';
   solnam[5] = ' ';
   solnam[6] = '#';
   solnam[7] = '#';
   solnam[8] = '\0';
   regnam[0] = 'r';
   regnam[1] = '.';
   regnam[2] = 'w';
   regnam[3] = 'f';
   regnam[4] = 'r';
   regnam[5] = ' ';
   regnam[6] = '#';
   regnam[7] = '\0';
   grpnam[0] = 'w';
   grpnam[1] = 'f';
   grpnam[2] = 'r';
   grpnam[3] = ' ';
   grpnam[4] = '\0';

   /*  If there are no arguments ask questions.  */
   if(argc == 1)
   {							/*  START # 3  */

   /*  Print info about the window.  */
   (void)printf("\nThe window frames are composed of 4 arb8s and 8\n");
   (void)printf("cylinders.  The front of the window frame is centered\n");
   (void)printf("at (0,0,0) and extends in the negative x-direction\n");
   (void)printf("the depth of the window frame.\n\n");

   /*  Find name of mged file to be created.  */
   (void)printf("Enter the mged file to be created (25 char max).\n\t");
   (void)fflush(stdout);
   (void)scanf("%s",filemged);

   /*  Find the number of window frames to create.  */
   (void)printf("Enter the number of window frames to create (26 max).\n\t");
   (void)fflush(stdout);
   (void)scanf("%d",&numwin);

   /*  Find the dimensions of the window frames.  */
   (void)printf("Enter the height, width, and depth of the window frame.\n\t");
   (void)fflush(stdout);
   (void)scanf("%lf %lf %lf",&hgt,&wid,&dpt);
   (void)printf("Enter the radius of the corner.\n\t");
   (void)fflush(stdout);
   (void)scanf("%lf",&rds);
   (void)printf("Enter the actual width of the window frame.\n\t");
   (void)fflush(stdout);
   (void)scanf("%lf",&isw);

   }							/*  END # 3  */

   /*  If there are arguments get answers from arguments.  */
   else
   {							/*  START # 4  */
	/*  List options.  */
	/*	-fname - name = mged file name.  */
	/*	-n# - # = number of window frames.  */
	/*	-h# - # = height of window frame in mm.  */
	/*	-w# - # = width of window frame in mm.  */
	/*	-d# - # = depth of window frame in mm.  */
	/*	-r# - # = radius of window frame corner in mm.  */
	/*	-i# - # = width of frame itself in mm.  */

	for(i=1; i<argc; i++)
	{						/*  START # 5  */
	   /*  Put argument in temporary character string.  */
	   temp = argv[i];

	   /*  -f - mged file.  */
	   if(temp[1] == 'f')
	   {						/*  START # 6  */
		j = 2;
		k = 0;
		while( (temp[j] != '\0') && (k < 25) )
		{					/*  START # 7  */
		   filemged[k] = temp[j];
		   j++;
		   k++;
		}					/*  END # 7  */
		filemged[k] = '\0';
	   }						/*  END # 6  */

	   /*  All other options.  */
	   else
	   {						/*  START # 8  */
		/*  Set up temporary character string.  */
		j = 2;
		k = 0;
		while( (temp[j] != '\0') && (k < 15) )
		{					/*  START # 9  */
		   temp1[k] = temp[j];
		   j++;
		   k++;
		}					/*  END # 9  */
		temp1[k] = '\0';
		if(temp[1] == 'n')
		{
		   (void)sscanf(temp1,"%d",&numwin);
		   if(numwin > 26) numwin = 26;
		}
		else if(temp[1] == 'h') (void)sscanf(temp1,"%lf",&hgt);
		else if(temp[1] == 'w') (void)sscanf(temp1,"%lf",&wid);
		else if(temp[1] == 'd') (void)sscanf(temp1,"%lf",&dpt);
		else if(temp[1] == 'r') (void)sscanf(temp1,"%lf",&rds);
		else if(temp[1] == 'i') (void)sscanf(temp1,"%lf",&isw);
	   }						/*  END # 8  */
	}						/*  END # 5  */
   }							/*  END # 4  */

   /*  Print out all info.  */
   (void)printf("\nmged file:  %s\n",filemged);
   (void)printf("height of window frame:  %f mm\n",hgt);
   (void)printf("width of window frame:  %f mm\n",wid);
   (void)printf("depth of window frame:  %f mm\n",dpt);
   (void)printf("radius of corner:  %f mm\n",rds);
   (void)printf("width of frame:  %f mm\n",isw);
   (void)printf("number of window frames:  %d\n\n",numwin);
   (void)fflush(stdout);

   /*  Open mged file.  */
   fpw = wdb_fopen(filemged);

   /*  Write ident record.  */
   mk_id(fpw,"window frames");

   for(i=0; i<numwin; i++)
   {							/*  START # 2  */
	/*  Create first arb8.  */
	pts[0][0] = (fastf_t)0.;
	pts[0][1] = (fastf_t) (wid / 2. - rds);
	pts[0][2] = (fastf_t) (hgt / 2.);
	pts[1][0] = (fastf_t)0.;
	pts[1][1] = (fastf_t) (wid / 2. - rds);
	pts[1][2] = (fastf_t) ((-hgt) / 2.);
	pts[2][0] = (fastf_t)0.;
	pts[2][1] = (fastf_t) (rds - wid / 2.);
	pts[2][2] = (fastf_t) ((-hgt) / 2.);
	pts[3][0] = (fastf_t)0.;
	pts[3][1] = (fastf_t) (rds - wid / 2.);
	pts[3][2] = (fastf_t) (hgt / 2.);
	pts[4][0] = (fastf_t)(-dpt);
	pts[4][1] = (fastf_t) (wid / 2. - rds);
	pts[4][2] = (fastf_t) (hgt / 2.);
	pts[5][0] = (fastf_t)(-dpt);
	pts[5][1] = (fastf_t) (wid / 2. - rds);
	pts[5][2] = (fastf_t) ((-hgt) / 2.);
	pts[6][0] = (fastf_t)(-dpt);
	pts[6][1] = (fastf_t) (rds - wid / 2.);
	pts[6][2] = (fastf_t) ((-hgt) / 2.);
	pts[7][0] = (fastf_t)(-dpt);
	pts[7][1] = (fastf_t) (rds - wid / 2.);
	pts[7][2] = (fastf_t) (hgt / 2.);
	solnam[5] = 97 + i;
	solnam[6] = '0';
	solnam[7] = '1';
	mk_arb8(fpw,solnam, &pts[0][X]);

	/*  Create second arb8.  */
	pts[0][1] = (fastf_t) (wid / 2.);
	pts[0][2] = (fastf_t) (hgt / 2. - rds);
	pts[1][1] = (fastf_t) (wid / 2.);
	pts[1][2] = (fastf_t) (rds - hgt / 2.);
	pts[2][1] = (fastf_t) ((-wid) / 2.);
	pts[2][2] = (fastf_t) (rds - hgt / 2.);
	pts[3][1] = (fastf_t) ((-wid) / 2.);
	pts[3][2] = (fastf_t) (hgt / 2. - rds);
	pts[4][1] = (fastf_t) (wid / 2.);
	pts[4][2] = (fastf_t) (hgt / 2. - rds);
	pts[5][1] = (fastf_t) (wid / 2.);
	pts[5][2] = (fastf_t) (rds - hgt / 2.);
	pts[6][1] = (fastf_t) ((-wid) / 2.);
	pts[6][2] = (fastf_t) (rds - hgt / 2.);
	pts[7][1] = (fastf_t) ((-wid) / 2.);
	pts[7][2] = (fastf_t) (hgt / 2. - rds);
	solnam[7] = '2';
	mk_arb8(fpw,solnam, &pts[0][X]);

	/*  Create cylinder 1.  */
	bs[0] = (fastf_t)0.;
	bs[1] = (fastf_t) (wid / 2. - rds);
	bs[2] = (fastf_t) (hgt / 2. - rds);
	ht[0] = (fastf_t)(-dpt);
	ht[1] = (fastf_t)0.;
	ht[2] = (fastf_t)0.;
	rad = (fastf_t)rds;
	solnam[7] = '3';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Create cylinder 2.  */
	bs[2] = (-bs[2]);
	solnam[7] = '4';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Create cylinder 3.  */
	bs[1] = (-bs[1]);
	solnam[7] = '5';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Create cylinder 4.  */
	bs[2] = (-bs[2]);
	solnam[7] = '6';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Create all inside solids.  */
	/*  Create arb8 3.  */
	pts[0][0] = (fastf_t)0.;
	pts[0][1] = (fastf_t) (wid / 2. - rds);
	pts[0][2] = (fastf_t) (hgt / 2. - isw);
	pts[1][0] = (fastf_t)0.;
	pts[1][1] = (fastf_t) (wid / 2. - rds);
	pts[1][2] = (fastf_t) ((-hgt) / 2. + isw);
	pts[2][0] = (fastf_t)0.;
	pts[2][1] = (fastf_t) (rds - wid / 2.);
	pts[2][2] = (fastf_t) ((-hgt) / 2. + isw);
	pts[3][0] = (fastf_t)0.;
	pts[3][1] = (fastf_t) (rds - wid / 2.);
	pts[3][2] = (fastf_t) (hgt / 2. - isw);
	pts[4][0] = (fastf_t)(-dpt);
	pts[4][1] = (fastf_t) (wid / 2. - rds);
	pts[4][2] = (fastf_t) (hgt / 2. - isw);
	pts[5][0] = (fastf_t)(-dpt);
	pts[5][1] = (fastf_t) (wid / 2. - rds);
	pts[5][2] = (fastf_t) ((-hgt) / 2. + isw);
	pts[6][0] = (fastf_t)(-dpt);
	pts[6][1] = (fastf_t) (rds - wid / 2.);
	pts[6][2] = (fastf_t) ((-hgt) / 2. + isw);
	pts[7][0] = (fastf_t)(-dpt);
	pts[7][1] = (fastf_t) (rds - wid / 2.);
	pts[7][2] = (fastf_t) (hgt / 2. - isw);
	solnam[7] = '7';
	mk_arb8(fpw,solnam, &pts[0][X]);

	/*  Create arb8 4.  */
	pts[0][1] = (fastf_t) (wid / 2. - isw);
	pts[0][2] = (fastf_t) (hgt / 2. - rds);
	pts[1][1] = (fastf_t) (wid / 2. - isw);
	pts[1][2] = (fastf_t) (rds - hgt / 2.);
	pts[2][1] = (fastf_t) ((-wid) / 2. + isw);
	pts[2][2] = (fastf_t) (rds - hgt / 2.);
	pts[3][1] = (fastf_t) ((-wid) / 2. + isw);
	pts[3][2] = (fastf_t) (hgt / 2. - rds);
	pts[4][1] = (fastf_t) (wid / 2. - isw);
	pts[4][2] = (fastf_t) (hgt / 2. - rds);
	pts[5][1] = (fastf_t) (wid / 2. - isw);
	pts[5][2] = (fastf_t) (rds - hgt / 2.);
	pts[6][1] = (fastf_t) ((-wid) / 2. + isw);
	pts[6][2] = (fastf_t) (rds - hgt / 2.);
	pts[7][1] = (fastf_t) ((-wid) / 2. + isw);
	pts[7][2] = (fastf_t) (hgt / 2. - rds);
	solnam[7] = '8';
	mk_arb8(fpw,solnam, &pts[0][X]);

	/*  Create cylinder 5.  */
	bs[0] = (fastf_t)0.;
	bs[1] = (fastf_t) (wid / 2. - rds);
	bs[2] = (fastf_t) (hgt / 2. - rds);
	ht[0] = (fastf_t)(-dpt);
	ht[1] = (fastf_t)0.;
	ht[2] = (fastf_t)0.;
	rad = (fastf_t) (rds - isw);
	solnam[7] = '9';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Create cylinder 6.  */
	bs[2] = (-bs[2]);
	solnam[6] = '1';
	solnam[7] = '0';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Create cylinder 7.  */
	bs[1] = (-bs[1]);
	solnam[7] = '1';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Create cylinder 8.  */
	bs[2] = (-bs[2]);
	solnam[7] = '2';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Make all regions.  */

	/*  Initialize list.  */
	BU_LIST_INIT(&comb.l);

	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[7] = '7';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	regnam[5] = 97 + i;
	regnam[6] = '1';
	mk_lfcomb(fpw,regnam,&comb,1);

	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
	solnam[7] = '8';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	regnam[6] = '2';
	mk_lfcomb(fpw,regnam,&comb,1);

	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[7] = '9';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	regnam[6] = '3';
	mk_lfcomb(fpw,regnam,&comb,1);

	solnam[7] = '4';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[6] = '1';
	solnam[7] = '0';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	regnam[6] = '4';
	mk_lfcomb(fpw,regnam,&comb,1);

	solnam[6] = '0';
	solnam[7] = '5';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[6] = '1';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	regnam[6] = '5';
	mk_lfcomb(fpw,regnam,&comb,1);

	solnam[6] = '0';
	solnam[7] = '6';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_INTERSECT);
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	solnam[6] = '1';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l, NULL, WMOP_SUBTRACT);
	regnam[6] = '6';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Create group.  */

	/*  Initialize list.  */
	BU_LIST_INIT(&comb1.l);

	regnam[6] = '1';
	(void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
	regnam[6] = '2';
	(void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
	regnam[6] = '3';
	(void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
	regnam[6] = '4';
	(void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
	regnam[6] = '5';
	(void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);
	regnam[6] = '6';
	(void)mk_addmember(regnam,&comb1.l, NULL, WMOP_UNION);

	grpnam[3] = 97 + i;
	mk_lfcomb(fpw,grpnam,&comb1,0);
   }							/*  START # 2  */

   /*  Close file.  */
   wdb_close(fpw);
   return 0;
}							/*  END # 1  */
@


11.10
log
@change conf.h to a wrapped config.h
@
text
@@


11.9
log
@merge of ansi-6-0-branch into HEAD
@
text
@d14 5
a18 1
#include "conf.h"
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d40 1
a40 5
main(argc,argv)

int argc;
char *argv[];

@


11.8.2.1
log
@Initial ANSIfication
@
text
@d40 5
a44 1
main(int argc, char **argv)
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d40 5
a44 1
main(int argc, char **argv)
@


11.6
log
@added matrix parameter to mk_addmember()
@
text
@d40 1
a40 5
main(argc,argv)

int argc;
char *argv[];

@


11.5
log
@
mk_addmember()
@
text
@d361 1
a361 1
	(void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d363 1
a363 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d365 1
a365 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d371 1
a371 1
	(void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d373 1
a373 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d378 1
a378 1
	(void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d380 1
a380 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d382 1
a382 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d384 1
a384 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d389 1
a389 1
	(void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d391 1
a391 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d393 1
a393 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d396 1
a396 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d402 1
a402 1
	(void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d404 1
a404 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d406 1
a406 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d409 1
a409 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d415 1
a415 1
	(void)mk_addmember(solnam,&comb.l,WMOP_INTERSECT);
d417 1
a417 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d419 1
a419 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d422 1
a422 1
	(void)mk_addmember(solnam,&comb.l,WMOP_SUBTRACT);
d432 1
a432 1
	(void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d434 1
a434 1
	(void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d436 1
a436 1
	(void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d438 1
a438 1
	(void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d440 1
a440 1
	(void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
d442 1
a442 1
	(void)mk_addmember(regnam,&comb1.l,WMOP_UNION);
@


11.4
log
@
Converted to use new version of LIBWDB.
@
text
@d361 1
a361 1
	(void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d363 1
a363 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d365 1
a365 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d371 1
a371 1
	(void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d373 1
a373 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d378 1
a378 1
	(void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d380 1
a380 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d382 1
a382 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d384 1
a384 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d389 1
a389 1
	(void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d391 1
a391 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d393 1
a393 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d396 1
a396 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d402 1
a402 1
	(void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d404 1
a404 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d406 1
a406 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d409 1
a409 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d415 1
a415 1
	(void)mk_addmember(solnam,&comb,WMOP_INTERSECT);
d417 1
a417 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d419 1
a419 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d422 1
a422 1
	(void)mk_addmember(solnam,&comb,WMOP_SUBTRACT);
d432 1
a432 1
	(void)mk_addmember(regnam,&comb1,WMOP_UNION);
d434 1
a434 1
	(void)mk_addmember(regnam,&comb1,WMOP_UNION);
d436 1
a436 1
	(void)mk_addmember(regnam,&comb1,WMOP_UNION);
d438 1
a438 1
	(void)mk_addmember(regnam,&comb1,WMOP_UNION);
d440 1
a440 1
	(void)mk_addmember(regnam,&comb1,WMOP_UNION);
d442 1
a442 1
	(void)mk_addmember(regnam,&comb1,WMOP_UNION);
@


11.3
log
@
Now need raytrace.h for wdb.h
@
text
@d46 1
a46 1
   FILE *fpw;			/*  File to be written to.  */
d195 1
a195 1
   fpw = fopen(filemged,"w");
d449 1
a449 1
   (void)fclose(fpw);
@


11.2
log
@
RT_LIST to BU_LIST
@
text
@d30 1
@


11.1
log
@Release_4.4
@
text
@d356 1
a356 1
	RT_LIST_INIT(&comb.l);
d428 1
a428 1
	RT_LIST_INIT(&comb1.l);
@


1.5
log
@Changed to match new function prototype of mk_arb8().
@
text
@@


1.4
log
@factored ifdef
@
text
@d229 1
a229 1
	mk_arb8(fpw,solnam,pts);
d249 1
a249 1
	mk_arb8(fpw,solnam,pts);
d304 1
a304 1
	mk_arb8(fpw,solnam,pts);
d324 1
a324 1
	mk_arb8(fpw,solnam,pts);
@


1.3
log
@Factored ifdefs.
@
text
@d17 1
d19 1
@


1.2
log
@Remove path name from include statements.
@
text
@d14 2
d18 1
d20 3
d30 3
d34 1
d36 1
d447 1
a447 1

@


1.1
log
@Initial revision
@
text
@d19 4
a22 4
#include "/usr/brlcad/include/machine.h"
#include "/usr/brlcad/include/db.h"
#include "/usr/brlcad/include/vmath.h"
#include "/usr/brlcad/include/wdb.h"
@
