head	1.4;
access;
symbols
	ansi-20040405-merged:1.2.4.1
	postmerge-20040405-ansi:1.3
	premerge-20040404-ansi:1.3
	postmerge-autoconf:1.3
	autoconf-freeze:1.3
	premerge-autoconf:1.3
	ansi-20040316-freeze:1.2
	postmerge-20040315-windows:1.3
	premerge-20040315-windows:1.3
	windows-20040315-freeze:1.2.6.1
	autoconf-20031203:1.3
	autoconf-20031202:1.3
	autoconf-branch:1.3.0.6
	phong-branch:1.3.0.4
	photonmap-branch:1.3.0.2
	rel-6-1-DP:1.2
	windows-branch:1.2.0.6
	rel-6-0-2:1.2
	ansi-branch:1.2.0.4
	rel-6-0-1-branch:1.2.0.2
	hartley-6-0-post:1.2
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2
	rel-5-4:1.1
	offsite-5-3-pre:1.1
	rel-5-3:1.1
	rel-5-2:1.1
	rel-5-1-branch:1.1.0.2
	rel-5-1:1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.05.24.04.11.55;	author morrison;	state dead;
branches;
next	1.3;

1.3
date	2003.03.13.19.30.34;	author jra;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.05.19.35.12;	author morrison;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	99.12.17.16.17.25;	author bparker;	state Exp;
branches;
next	;

1.2.4.1
date	2004.03.17.21.16.18;	author morrison;	state Exp;
branches;
next	;

1.2.6.1
date	2004.03.11.23.40.56;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@moved/renamed from top-level h/ to top-level include/
@
text
@/*
 * unistd.h --
 *
 *      Macros, CONSTants and prototypes for Posix conformance.
 *
 * Copyright 1989 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * RCS: @@(#) $Id: unistd.h,v 1.3 2003/03/13 19:30:34 jra Exp $
 */

#ifndef _UNISTD
#define _UNISTD

#include <sys/types.h>
#ifndef _TCL
#   include "tcl.h"
#endif

#ifndef NULL
#define NULL    0
#endif

/* 
 * Strict POSIX stuff goes here.  Extensions go down below, in the 
 * ifndef _POSIX_SOURCE section.
 */

extern void _exit _ANSI_ARGS_((int status));
extern int access _ANSI_ARGS_((CONST char *path, int mode));
extern int chdir _ANSI_ARGS_((CONST char *path));
extern int chown _ANSI_ARGS_((CONST char *path, uid_t owner, gid_t group));
extern int close _ANSI_ARGS_((int fd));
extern int dup _ANSI_ARGS_((int oldfd));
extern int dup2 _ANSI_ARGS_((int oldfd, int newfd));
extern int execl _ANSI_ARGS_((CONST char *path, ...));
extern int execle _ANSI_ARGS_((CONST char *path, ...));
extern int execlp _ANSI_ARGS_((CONST char *file, ...));
extern int execv _ANSI_ARGS_((CONST char *path, char **argv));
extern int execve _ANSI_ARGS_((CONST char *path, char **argv, char **envp));
extern int execvp _ANSI_ARGS_((CONST char *file, char **argv));
extern pid_t fork _ANSI_ARGS_((void));
extern char *getcwd _ANSI_ARGS_((char *buf, size_t size));
extern gid_t getegid _ANSI_ARGS_((void));
extern uid_t geteuid _ANSI_ARGS_((void));
extern gid_t getgid _ANSI_ARGS_((void));
extern int getgroups _ANSI_ARGS_((int bufSize, int *buffer));
extern pid_t getpid _ANSI_ARGS_((void));
extern uid_t getuid _ANSI_ARGS_((void));
extern int isatty _ANSI_ARGS_((int fd));
extern long lseek _ANSI_ARGS_((int fd, long offset, int whence));
extern int pipe _ANSI_ARGS_((int *fildes));
extern int read _ANSI_ARGS_((int fd, char *buf, size_t size));
extern int setgid _ANSI_ARGS_((gid_t group));
extern int setuid _ANSI_ARGS_((uid_t user));
extern unsigned sleep _ANSI_ARGS_ ((unsigned seconds));
extern char *ttyname _ANSI_ARGS_((int fd));
extern int unlink _ANSI_ARGS_((CONST char *path));
extern int write _ANSI_ARGS_((int fd, CONST char *buf, size_t size));

#ifndef	_POSIX_SOURCE
extern char *crypt _ANSI_ARGS_((CONST char *, CONST char *));
extern int fchown _ANSI_ARGS_((int fd, uid_t owner, gid_t group));
extern int flock _ANSI_ARGS_((int fd, int operation));
extern int ftruncate _ANSI_ARGS_((int fd, unsigned long length));
extern int ioctl _ANSI_ARGS_((int fd, int request, ...));
extern int readlink _ANSI_ARGS_((CONST char *path, char *buf, int bufsize));
extern int setegid _ANSI_ARGS_((gid_t group));
extern int seteuid _ANSI_ARGS_((uid_t user));
extern int setreuid _ANSI_ARGS_((int ruid, int euid));
extern int symlink _ANSI_ARGS_((CONST char *, CONST char *));
extern int ttyslot _ANSI_ARGS_((void));
extern int truncate _ANSI_ARGS_((CONST char *path, unsigned long length));
extern int vfork _ANSI_ARGS_((void));
#endif /* _POSIX_SOURCE */

#endif /* _UNISTD */

@


1.3
log
@Update to tcl/tk 8.4
@
text
@d15 1
a15 1
 * RCS: @@(#) $Id: unistd.h,v 1.2 1998/09/14 18:39:45 stanton Exp $
@


1.2
log
@updated SIGNED to signed
updated CONST to const
@
text
@d4 1
a4 1
 *      Macros, constants and prototypes for Posix conformance.
d15 1
a15 1
 * RCS: @@(#) $Id: unistd.h,v 1.1 1999/12/17 16:17:25 bparker Exp $
d36 3
a38 3
extern int access _ANSI_ARGS_((const char *path, int mode));
extern int chdir _ANSI_ARGS_((const char *path));
extern int chown _ANSI_ARGS_((const char *path, uid_t owner, gid_t group));
d42 6
a47 6
extern int execl _ANSI_ARGS_((const char *path, ...));
extern int execle _ANSI_ARGS_((const char *path, ...));
extern int execlp _ANSI_ARGS_((const char *file, ...));
extern int execv _ANSI_ARGS_((const char *path, char **argv));
extern int execve _ANSI_ARGS_((const char *path, char **argv, char **envp));
extern int execvp _ANSI_ARGS_((const char *file, char **argv));
d64 2
a65 2
extern int unlink _ANSI_ARGS_((const char *path));
extern int write _ANSI_ARGS_((int fd, const char *buf, size_t size));
d68 1
a68 1
extern char *crypt _ANSI_ARGS_((const char *, const char *));
d73 1
a73 1
extern int readlink _ANSI_ARGS_((const char *path, char *buf, int bufsize));
d77 1
a77 1
extern int symlink _ANSI_ARGS_((const char *, const char *));
d79 1
a79 1
extern int truncate _ANSI_ARGS_((const char *path, unsigned long length));
@


1.2.4.1
log
@sync branch with HEAD
@
text
@d4 1
a4 1
 *      Macros, CONSTants and prototypes for Posix conformance.
d15 1
a15 1
 * RCS: @@(#) $Id$
d36 3
a38 3
extern int access _ANSI_ARGS_((CONST char *path, int mode));
extern int chdir _ANSI_ARGS_((CONST char *path));
extern int chown _ANSI_ARGS_((CONST char *path, uid_t owner, gid_t group));
d42 6
a47 6
extern int execl _ANSI_ARGS_((CONST char *path, ...));
extern int execle _ANSI_ARGS_((CONST char *path, ...));
extern int execlp _ANSI_ARGS_((CONST char *file, ...));
extern int execv _ANSI_ARGS_((CONST char *path, char **argv));
extern int execve _ANSI_ARGS_((CONST char *path, char **argv, char **envp));
extern int execvp _ANSI_ARGS_((CONST char *file, char **argv));
d64 2
a65 2
extern int unlink _ANSI_ARGS_((CONST char *path));
extern int write _ANSI_ARGS_((int fd, CONST char *buf, size_t size));
d68 1
a68 1
extern char *crypt _ANSI_ARGS_((CONST char *, CONST char *));
d73 1
a73 1
extern int readlink _ANSI_ARGS_((CONST char *path, char *buf, int bufsize));
d77 1
a77 1
extern int symlink _ANSI_ARGS_((CONST char *, CONST char *));
d79 1
a79 1
extern int truncate _ANSI_ARGS_((CONST char *path, unsigned long length));
@


1.2.6.1
log
@sync to HEAD...
@
text
@d4 1
a4 1
 *      Macros, CONSTants and prototypes for Posix conformance.
d15 1
a15 1
 * RCS: @@(#) $Id: unistd.h,v 1.3 2003/03/13 19:30:34 jra Exp $
d36 3
a38 3
extern int access _ANSI_ARGS_((CONST char *path, int mode));
extern int chdir _ANSI_ARGS_((CONST char *path));
extern int chown _ANSI_ARGS_((CONST char *path, uid_t owner, gid_t group));
d42 6
a47 6
extern int execl _ANSI_ARGS_((CONST char *path, ...));
extern int execle _ANSI_ARGS_((CONST char *path, ...));
extern int execlp _ANSI_ARGS_((CONST char *file, ...));
extern int execv _ANSI_ARGS_((CONST char *path, char **argv));
extern int execve _ANSI_ARGS_((CONST char *path, char **argv, char **envp));
extern int execvp _ANSI_ARGS_((CONST char *file, char **argv));
d64 2
a65 2
extern int unlink _ANSI_ARGS_((CONST char *path));
extern int write _ANSI_ARGS_((int fd, CONST char *buf, size_t size));
d68 1
a68 1
extern char *crypt _ANSI_ARGS_((CONST char *, CONST char *));
d73 1
a73 1
extern int readlink _ANSI_ARGS_((CONST char *path, char *buf, int bufsize));
d77 1
a77 1
extern int symlink _ANSI_ARGS_((CONST char *, CONST char *));
d79 1
a79 1
extern int truncate _ANSI_ARGS_((CONST char *path, unsigned long length));
@


1.1
log
@*- header files that are provided by Tcl in case
   the system does not
@
text
@d4 1
a4 1
 *      Macros, CONSTants and prototypes for Posix conformance.
d15 1
a15 1
 * RCS: @@(#) $Id: unistd.h,v 1.2 1999/10/19 19:35:32 jra Exp $
d36 3
a38 3
extern int access _ANSI_ARGS_((CONST char *path, int mode));
extern int chdir _ANSI_ARGS_((CONST char *path));
extern int chown _ANSI_ARGS_((CONST char *path, uid_t owner, gid_t group));
d42 6
a47 6
extern int execl _ANSI_ARGS_((CONST char *path, ...));
extern int execle _ANSI_ARGS_((CONST char *path, ...));
extern int execlp _ANSI_ARGS_((CONST char *file, ...));
extern int execv _ANSI_ARGS_((CONST char *path, char **argv));
extern int execve _ANSI_ARGS_((CONST char *path, char **argv, char **envp));
extern int execvp _ANSI_ARGS_((CONST char *file, char **argv));
d64 2
a65 2
extern int unlink _ANSI_ARGS_((CONST char *path));
extern int write _ANSI_ARGS_((int fd, CONST char *buf, size_t size));
d68 1
a68 1
extern char *crypt _ANSI_ARGS_((CONST char *, CONST char *));
d73 1
a73 1
extern int readlink _ANSI_ARGS_((CONST char *path, char *buf, int bufsize));
d77 1
a77 1
extern int symlink _ANSI_ARGS_((CONST char *, CONST char *));
d79 1
a79 1
extern int truncate _ANSI_ARGS_((CONST char *path, unsigned long length));
@

