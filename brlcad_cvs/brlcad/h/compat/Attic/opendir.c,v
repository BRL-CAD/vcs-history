head	1.2;
access;
symbols
	ansi-20040405-merged:1.1.10.1
	postmerge-20040405-ansi:1.1
	premerge-20040404-ansi:1.1
	postmerge-autoconf:1.1
	autoconf-freeze:1.1
	premerge-autoconf:1.1
	postmerge-20040315-windows:1.1
	premerge-20040315-windows:1.1
	windows-20040315-freeze:1.1.8.1
	autoconf-20031203:1.1
	autoconf-20031202:1.1
	autoconf-branch:1.1.0.6
	phong-branch:1.1.0.4
	photonmap-branch:1.1.0.2
	windows-branch:1.1.0.8
	ansi-branch:1.1.0.10;
locks; strict;
comment	@ * @;


1.2
date	2004.05.24.04.11.55;	author morrison;	state dead;
branches;
next	1.1;

1.1
date	2003.03.13.19.30.33;	author jra;	state Exp;
branches
	1.1.8.1
	1.1.10.1;
next	;

1.1.8.1
date	2004.03.11.23.40.54;	author morrison;	state Exp;
branches;
next	;

1.1.10.1
date	2004.03.17.21.16.17;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@moved/renamed from top-level h/ to top-level include/
@
text
@/* 
 * opendir.c --
 *
 *	This file provides dirent-style directory-reading procedures
 *	for V7 Unix systems that don't have such procedures.  The
 *	origin of this code is unclear, but it seems to have come
 *	originally from Larry Wall.
 *
 *
 * RCS: @@(#) $Id: opendir.c,v 1.1 2003/03/13 19:30:33 jra Exp $
 */

#include "tclInt.h"
#include "tclPort.h"

#undef DIRSIZ
#define DIRSIZ(dp) \
    ((sizeof (struct dirent) - (MAXNAMLEN+1)) + (((dp)->d_namlen+1 + 3) &~ 3))

/*
 * open a directory.
 */
DIR *
opendir(name)
char *name;
{
	register DIR *dirp;
	register int fd;
	char *myname;

	myname = ((*name == '\0') ? "." : name);
	if ((fd = open(myname, 0, 0)) == -1)
		return NULL;
	if ((dirp = (DIR *)ckalloc(sizeof(DIR))) == NULL) {
		close (fd);
		return NULL;
	}
	dirp->dd_fd = fd;
	dirp->dd_loc = 0;
	return dirp;
}

/*
 * read an old style directory entry and present it as a new one
 */
#ifndef pyr
#define	ODIRSIZ	14

struct	olddirect {
	ino_t	od_ino;
	char	od_name[ODIRSIZ];
};
#else	/* a Pyramid in the ATT universe */
#define	ODIRSIZ	248

struct	olddirect {
	long	od_ino;
	short	od_fill1, od_fill2;
	char	od_name[ODIRSIZ];
};
#endif

/*
 * get next entry in a directory.
 */
struct dirent *
readdir(dirp)
register DIR *dirp;
{
	register struct olddirect *dp;
	static struct dirent dir;

	for (;;) {
		if (dirp->dd_loc == 0) {
			dirp->dd_size = read(dirp->dd_fd, dirp->dd_buf,
			    DIRBLKSIZ);
			if (dirp->dd_size <= 0)
				return NULL;
		}
		if (dirp->dd_loc >= dirp->dd_size) {
			dirp->dd_loc = 0;
			continue;
		}
		dp = (struct olddirect *)(dirp->dd_buf + dirp->dd_loc);
		dirp->dd_loc += sizeof(struct olddirect);
		if (dp->od_ino == 0)
			continue;
		dir.d_ino = dp->od_ino;
		strncpy(dir.d_name, dp->od_name, ODIRSIZ);
		dir.d_name[ODIRSIZ] = '\0'; /* insure null termination */
		dir.d_namlen = strlen(dir.d_name);
		dir.d_reclen = DIRSIZ(&dir);
		return (&dir);
	}
}

/*
 * close a directory.
 */
void
closedir(dirp)
register DIR *dirp;
{
	close(dirp->dd_fd);
	dirp->dd_fd = -1;
	dirp->dd_loc = 0;
	ckfree((char *) dirp);
}
@


1.1
log
@Update to tcl/tk 8.4
@
text
@d10 1
a10 1
 * RCS: @@(#) $Id: opendir.c,v 1.2 1998/09/14 18:39:44 stanton Exp $
@


1.1.10.1
log
@sync branch with HEAD
@
text
@d10 1
a10 1
 * RCS: @@(#) $Id$
@


1.1.8.1
log
@sync to HEAD...
@
text
@d10 1
a10 1
 * RCS: @@(#) $Id: opendir.c,v 1.1 2003/03/13 19:30:33 jra Exp $
@

