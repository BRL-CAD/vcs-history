head	11.30;
access;
symbols
	ansi-20040405-merged:11.23.4.1
	postmerge-20040405-ansi:11.29
	premerge-20040404-ansi:11.29
	postmerge-autoconf:11.29
	autoconf-freeze:11.26.2.5
	premerge-autoconf:11.29
	ansi-20040316-freeze:11.23
	postmerge-20040315-windows:11.29
	premerge-20040315-windows:11.28
	windows-20040315-freeze:11.23.6.5
	autoconf-20031203:11.26
	autoconf-20031202:11.26
	autoconf-branch:11.26.0.2
	phong-branch:11.25.0.2
	photonmap-branch:11.24.0.2
	rel-6-1-DP:11.24
	windows-branch:11.23.0.6
	rel-6-0-2:11.23
	ansi-branch:11.23.0.4
	rel-6-0-1-branch:11.23.0.2
	hartley-6-0-post:11.23
	hartley-6-0-pre:11.23
	rel-6-0-1:11.23
	rel-6-0:11.23
	rel-5-4:11.11
	offsite-5-3-pre:11.14
	rel-5-3:11.11
	rel-5-2:11.11
	rel-5-1-branch:11.11.0.2
	rel-5-1:11.11
	rel-5-0:11.7
	rel-5-0-beta:11.7
	rel-4-5:11.4
	ctj-4-5-post:11.4
	ctj-4-5-pre:11.4
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.30
date	2004.05.24.04.11.52;	author morrison;	state dead;
branches;
next	11.29;

11.29
date	2004.03.16.14.10.47;	author morrison;	state Exp;
branches;
next	11.28;

11.28
date	2004.03.03.19.38.22;	author morrison;	state Exp;
branches;
next	11.27;

11.27
date	2004.01.08.14.50.43;	author jra;	state Exp;
branches;
next	11.26;

11.26
date	2003.10.06.15.42.34;	author morrison;	state Exp;
branches
	11.26.2.1;
next	11.25;

11.25
date	2003.05.17.00.45.36;	author morrison;	state Exp;
branches;
next	11.24;

11.24
date	2002.10.11.08.30.56;	author kermit;	state Exp;
branches
	11.24.2.1;
next	11.23;

11.23
date	2002.03.13.19.56.59;	author morrison;	state Exp;
branches
	11.23.4.1
	11.23.6.1;
next	11.22;

11.22
date	2002.01.24.21.44.27;	author rbowers;	state Exp;
branches;
next	11.21;

11.21
date	2001.10.15.20.17.27;	author morrison;	state Exp;
branches;
next	11.20;

11.20
date	2001.10.15.20.06.32;	author morrison;	state Exp;
branches;
next	11.19;

11.19
date	2001.10.15.19.58.03;	author morrison;	state Exp;
branches;
next	11.18;

11.18
date	2001.05.16.21.37.43;	author morrison;	state Exp;
branches;
next	11.17;

11.17
date	2001.04.27.14.18.53;	author morrison;	state Exp;
branches;
next	11.16;

11.16
date	2001.04.20.22.28.53;	author morrison;	state Exp;
branches;
next	11.15;

11.15
date	2001.04.05.19.35.07;	author morrison;	state Exp;
branches;
next	11.14;

11.14
date	2000.09.28.22.56.15;	author butler;	state Exp;
branches;
next	11.13;

11.13
date	2000.09.28.22.42.18;	author butler;	state Exp;
branches;
next	11.12;

11.12
date	2000.09.28.21.03.19;	author butler;	state Exp;
branches;
next	11.11;

11.11
date	2000.04.25.14.27.40;	author butler;	state Exp;
branches;
next	11.10;

11.10
date	2000.02.02.19.17.59;	author mike;	state Exp;
branches;
next	11.9;

11.9
date	2000.01.28.22.17.51;	author butler;	state Exp;
branches;
next	11.8;

11.8
date	99.11.02.18.36.06;	author jra;	state Exp;
branches;
next	11.7;

11.7
date	99.01.21.02.19.20;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	99.01.15.10.27.11;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	99.01.15.04.57.45;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	97.07.15.18.58.10;	author gdurf;	state Exp;
branches;
next	11.3;

11.3
date	97.03.07.05.38.20;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.08.27.06.56.16;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.48.23;	author mike;	state Rel4_4;
branches;
next	10.11;

10.11
date	94.12.30.00.31.47;	author mike;	state Exp;
branches;
next	10.10;

10.10
date	94.12.22.00.22.06;	author mike;	state Exp;
branches;
next	10.9;

10.9
date	94.12.06.17.03.39;	author mike;	state Exp;
branches;
next	10.8;

10.8
date	94.10.11.16.44.23;	author mike;	state Exp;
branches;
next	10.7;

10.7
date	94.09.30.17.51.29;	author mike;	state Exp;
branches;
next	10.6;

10.6
date	94.08.25.14.54.22;	author gdurf;	state Exp;
branches;
next	10.5;

10.5
date	94.05.07.21.16.44;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	93.12.22.06.20.39;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	93.04.01.03.54.22;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	92.07.23.05.13.15;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.35.22;	author mike;	state Rel4_0;
branches;
next	9.29;

9.29
date	91.10.10.00.34.16;	author mike;	state Exp;
branches;
next	9.28;

9.28
date	91.09.27.21.39.35;	author phil;	state Exp;
branches;
next	9.27;

9.27
date	91.09.25.02.33.33;	author butler;	state Exp;
branches;
next	9.26;

9.26
date	91.09.21.00.07.56;	author mike;	state Exp;
branches;
next	9.25;

9.25
date	91.09.10.14.34.29;	author stay;	state Exp;
branches;
next	9.24;

9.24
date	91.08.31.02.43.08;	author mike;	state Exp;
branches;
next	9.23;

9.23
date	91.08.30.00.23.27;	author mike;	state Exp;
branches;
next	9.22;

9.22
date	91.08.29.23.50.01;	author mike;	state Exp;
branches;
next	9.21;

9.21
date	91.08.29.19.34.33;	author mike;	state Exp;
branches;
next	9.20;

9.20
date	91.08.28.02.41.13;	author mike;	state Exp;
branches;
next	9.19;

9.19
date	91.07.10.03.44.34;	author butler;	state Exp;
branches;
next	9.18;

9.18
date	91.07.09.22.28.59;	author butler;	state Exp;
branches;
next	9.17;

9.17
date	91.07.09.22.14.59;	author butler;	state Exp;
branches;
next	9.16;

9.16
date	91.07.02.22.39.31;	author mike;	state Exp;
branches;
next	9.15;

9.15
date	91.06.04.20.41.31;	author mike;	state Exp;
branches;
next	9.14;

9.14
date	91.03.13.13.45.46;	author mike;	state Exp;
branches;
next	9.13;

9.13
date	91.01.14.23.13.46;	author mike;	state Exp;
branches;
next	9.12;

9.12
date	91.01.12.07.50.47;	author butler;	state Exp;
branches;
next	9.11;

9.11
date	91.01.05.02.24.15;	author butler;	state Exp;
branches;
next	9.10;

9.10
date	91.01.04.00.58.03;	author mike;	state Exp;
branches;
next	9.9;

9.9
date	90.11.27.13.35.12;	author mike;	state Exp;
branches;
next	9.8;

9.8
date	90.11.27.00.30.01;	author mike;	state Exp;
branches;
next	9.7;

9.7
date	90.11.22.04.59.01;	author mike;	state Exp;
branches;
next	9.6;

9.6
date	90.11.22.04.47.06;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	90.11.18.12.47.29;	author cjohnson;	state Exp;
branches;
next	9.4;

9.4
date	90.03.09.15.11.30;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	90.03.09.15.02.24;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	89.07.28.03.37.23;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.44.08;	author mike;	state Rel3_5;
branches;
next	8.5;

8.5
date	89.02.14.00.24.19;	author mike;	state Exp;
branches;
next	8.4;

8.4
date	88.12.13.00.58.06;	author mike;	state Exp;
branches;
next	8.3;

8.3
date	88.12.12.17.02.21;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.10.06.05.45.32;	author mike;	state Rel3_0;
branches;
next	8.1;

8.1
date	88.10.05.00.23.38;	author mike;	state Rel3_0;
branches;
next	7.11;

7.11
date	88.09.30.23.58.13;	author kermit;	state Exp;
branches;
next	7.10;

7.10
date	88.09.21.01.44.36;	author mike;	state Exp;
branches;
next	7.9;

7.9
date	88.09.21.01.29.14;	author stay;	state Exp;
branches;
next	7.8;

7.8
date	88.09.20.20.41.19;	author stay;	state Exp;
branches;
next	7.7;

7.7
date	88.09.19.15.42.36;	author stay;	state Exp;
branches;
next	7.6;

7.6
date	88.09.17.08.36.37;	author mike;	state Exp;
branches;
next	7.5;

7.5
date	88.09.17.08.10.24;	author mike;	state Exp;
branches;
next	7.4;

7.4
date	88.09.17.06.43.48;	author mike;	state Exp;
branches;
next	7.3;

7.3
date	88.09.17.06.37.59;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	88.09.09.21.04.26;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.22.31;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.48.19;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.21.47.15;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.12.22.00.20;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.02.45.59;	author mike;	state Rel1;
branches;
next	1.11;

1.11
date	86.12.13.05.51.33;	author mike;	state Exp;
branches;
next	1.10;

1.10
date	86.10.29.00.24.02;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	86.10.28.23.01.21;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	86.10.12.02.59.33;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	86.10.11.00.14.36;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	86.09.23.14.52.12;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	86.08.08.06.24.22;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	86.08.06.19.50.22;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	86.07.17.18.16.07;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.07.11.01.30.03;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	85.10.26.01.31.02;	author mike;	state Exp;
branches;
next	;

11.23.4.1
date	2004.03.17.21.16.11;	author morrison;	state Exp;
branches;
next	;

11.23.6.1
date	2002.09.26.23.03.45;	author morrison;	state Exp;
branches;
next	11.23.6.2;

11.23.6.2
date	2002.09.27.01.22.57;	author morrison;	state Exp;
branches;
next	11.23.6.3;

11.23.6.3
date	2004.03.11.23.40.46;	author morrison;	state Exp;
branches;
next	11.23.6.4;

11.23.6.4
date	2004.03.12.09.57.09;	author morrison;	state Exp;
branches;
next	11.23.6.5;

11.23.6.5
date	2004.03.12.14.13.59;	author morrison;	state Exp;
branches;
next	;

11.24.2.1
date	2003.08.26.13.59.17;	author justin;	state Exp;
branches;
next	;

11.26.2.1
date	2004.01.20.18.56.28;	author erikg;	state Exp;
branches;
next	11.26.2.2;

11.26.2.2
date	2004.02.12.18.32.35;	author erikg;	state Exp;
branches;
next	11.26.2.3;

11.26.2.3
date	2004.03.10.13.24.59;	author erikg;	state Exp;
branches;
next	11.26.2.4;

11.26.2.4
date	2004.03.15.14.06.10;	author erikg;	state Exp;
branches;
next	11.26.2.5;

11.26.2.5
date	2004.03.18.18.00.45;	author erikg;	state Exp;
branches;
next	;


desc
@Machine-specific definitions
@


11.30
log
@moved/renamed from top-level h/ to top-level include/
@
text
@#ifndef CONF_H
#include "conf.h"  /* Horrible but temporary hack to get things to compile */
#endif

/*
 *			M A C H I N E . H
 *
 *  This header file defines all the
 *
 *	fundamental data types (lower case names, created with "typedef")
 *
 *  and
 *
 *	fundamental manifest constants (upper case, created with "#define")
 *
 *  used throughout the BRL-CAD Package.  Virtually all other BRL-CAD
 *  header files depend on this header file being included first.
 *
 *  Many of these fundamental data types are machine (vendor) dependent.
 *  Some may assume different values on the same machine, depending on
 *  which version of the compiler is being used.
 *
 *  Additions will need to be made here when porting BRL-CAD to a new machine
 *  which is anything but a 32-bit big-endian uniprocessor.
 *
 *  General Symbols and Types Defined -
 *
 *	CONST  - deprecated - (use const)
 *		A portable way of indicating that the ANSI C "const"
 *		keyword is desired, when compiling on an ANSI compiler.
 *
 *	genptr_t -
 *		A portable way of declaring a "generic" pointer that is
 *		wide enough to point to anything, which can be used on
 *		both ANSI C and K&R C environments.
 *		On some machines, pointers to functions can be wider than
 *		pointers to data bytes, so a declaration of "char *"
 *		isn't generic enough.
 *
 *	SIGNED - deprecated - (use signed)
 *		A portable way of declaring a signed variable, since
 *		the "signed" keyword is not known in K&R compilers.  e.g.:
 *			register SIGNED int twoway;
 *
 *	fastf_t -
 *		Intended to be the fastest floating point data type on
 *		the current machine, with at least 64 bits of precision.
 *		On 16 and 32 bit machine, this is typically "double",
 *		but on 64 bit machines, it is often "float".
 *		Virtually all floating point variables (and more complicated
 *		data types, like vect_t and mat_t) are defined as fastf_t.
 *		The one exception is when a subroutine return is a floating
 *		point value;  that is always declared as "double".
 *
 *	LOCAL -
 *		The fastest storage class for local variables within a
 *		subroutine.  On parallel machines, this needs to be "auto",
 *		but on serial machines there can sometimes be a performance
 *		advantage to using "static".
 *
 *	FAST -
 *		The fastest storage class for fastf_t variables.
 *		On most machines with abundant registers, this is "register",
 *		but on machines like the VAX with only 3 "register double"s
 *		available to C programmers, it is set to LOCAL.
 *		Thus, declaring a fast temporary fastf_t variable is done like:
 *			FAST fastf_t var;
 *
 *	HIDDEN -
 *		Functions intended to be local to one module should be
 *		declared HIDDEN.  For production use, and lint, it will
 *		be defined as "static", but for debugging it can be defined
 *		as NIL, so that the routine names can be made available
 *		to the debugger.
 *
 *	MAX_FASTF -
 *		Very close to the largest value that can be held by a
 *		fastf_t without overflow.  Typically specified as an
 *		integer power of ten, to make the value easy to spot when
 *		printed.
 *
 *	SQRT_MAX_FASTF -
 *		sqrt(MAX_FASTF), or slightly smaller.  Any number larger than
 *		this, if squared, can be expected to produce an overflow.
 *
 *	SMALL_FASTF -
 *		Very close to the smallest value that can be represented
 *		while still being greater than zero.  Any number smaller
 *		than this (and non-negative) can be considered to be
 *		zero;  dividing by such a number can be expected to produce
 *		a divide-by-zero error.
 *		All divisors should be checked against this value before
 *		actual division is performed.
 *
 *	SQRT_SMALL_FASTF -
 *		sqrt(SMALL_FASTF), or slightly larger.  The value of this
 *		is quite a lot larger than that of SMALL_FASTF.
 *		Any number smaller than this, when squared, can be expected
 *		to produce a zero result.
 *
 *	bzero(ptr,n) -
 *		Defined to be the fasted system-specific method for
 *		zeroing a block of 'n' bytes, where the pointer has
 *		arbitrary byte alignment.  BSD semantics.
 *
 *	bcopy(from,to,n) -
 *		Defined to be the fastest system-specific method for
 *		copying a block of 'n' bytes, where both the "from" and
 *		"to" pointers have arbitrary byte alignment.  BSD semantics.
 *
 *	bitv_t -
 *		The widest fast integer type available, used to implement bit
 *		vectors.  On most machines, this is "long", but on some
 *		machines a vendor-specific type such as "long long" can
 *		give access to wider integers.
 *
 *	BITV_SHIFT -
 *		log2( bits_wide(bitv_t) ).  Used to determine how many
 *		bits of a bit-vector subscript are index-of-bit in bitv_t
 *		word, and how many bits of the subscript are for word index.
 *		On a 32-bit machine, BITV_SHIFT is 5.
 *
 *	XXX The BYTE_ORDER handling needs to change to match the POSIX
 *	XXX recommendations.
 *
 *  PARALLEL Symbols Defined -
 *    These are used only for applications linked with LIBRT,
 *    and interact heavily with the support routines in librt/machine.c
 *    XXX These are likely to get new, more descriptive names sometime.
 *
 *	PARALLEL -
 *		When defined, the code is being compiled for a parallel processor.
 *		This has implications for signal handling, math library
 *		exception handling, etc.
 *
 *	MAX_PSW -
 *		The maximum number of processors that can be expected on
 *		this hardware.  Used to allocate application-specific
 *		per-processor tables.
 *		The actual number of processors is found at runtime by calling
 *		rt_avail_cpus().
 *
 *	DEFAULT_PSW -
 *		The number of processors to use when the user has not
 *		specifically indicated the number of processors desired.
 *		On some machines like the Alliant, this should be MAX_PSW,
 *		because the parallel complex is allocated as a unit.
 *		On timesharing machines like the Cray, this should be 1,
 *		because running multi-tasking consumes special resources
 *		(and sometimes requires special queues/privs), so ordinary
 *		runs should just stay serial.
 *
 *	MALLOC_NOT_MP_SAFE -
 *		Defined when the system malloc() routine can not be
 *		safely used in a multi-processor (MP) execution.
 *		If defined, LIBBU will protect with BU_SEM_SYSCALL.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Distribution Status -
 *	This file is public domain, distribution unlimited.
 *
 *  Include Sequencing -
 *	#include <stdio.h>
 *	#include <math.h>
 *	#include "machine.h"
 *	#include "bu.h"
 *
 *  Libraries Used -
 *	LIBBU LIBBU_LIBES -lm -lc
 *
 *  $Header: /n/xoff/cvs/brlcad/h/machine.h,v 11.29 2004/03/16 14:10:47 morrison Exp $
 */

#ifndef MACHINE_H
#define MACHINE_H seen

/*
 * Figure out the maximum number of files that can simultaneously be open 
 * by a process.
 */

#if !defined(FOPEN_MAX) && defined(_NFILE)
#	define FOPEN_MAX	_NFILE
#endif
#if !defined(FOPEN_MAX) && defined(NOFILE)
#	define FOPEN_MAX	NOFILE
#endif
#if !defined(FOPEN_MAX) && defined(OPEN_MAX)
#	define FOPEN_MAX	OPEN_MAX
#endif
#if !defined(FOPEN_MAX)
#	define FOPEN_MAX	32
#endif

/**********************************
 *                                *
 *  Machine specific definitions  *
 *  Choose for maximum speed      *
 *				  *
 **********************************/


#ifdef WIN32
/********************************
 *				*
 *  Windows Windows		*
 *				*
 ********************************/
typedef double fastf_t;	
#define LOCAL auto	
#define FAST register	
typedef long bitv_t;	
#define BITV_SHIFT	5
// assume only one processor for now
#define MAX_PSW	4
#define DEFAULT_PSW	1
#define PARALLEL	1
#define MALLOC_NOT_MP_SAFE 1
#endif


#ifdef HEP
/********************************
 *				*
 *  Denelcor HEP H-1000		*
 *				*
 ********************************/
#define IBM_FLOAT 1		/* Uses IBM style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		128	/* Max number of process streams */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1
#endif


#if defined(__alpha)
/********************************
 *				*
 *	  DEC Alpha (AXP)	*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
#if !defined(LITTLE_ENDIAN)
	/* Often defined in <alpha/endian.h> */
#	define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
#endif
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#endif


#if defined(alliant) && !defined(i860)
/********************************
 *				*
 *	Alliant FX/8		*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		8	/* Max number of processors */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif


#if defined(alliant) && defined(i860)
/********************************
 *				*
 *	Alliant FX/2800		*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
#define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		28	/* Max number of processors */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif


#ifdef CRAY
/********************************
 *				*
 *  Cray-X/MP, COS or UNICOS	*
 *  Cray-2 under "UNICOS"	*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* Max number of processors */
#define DEFAULT_PSW	1
#define PARALLEL	1

#  if 0
#	define CRAY_COS	1	/* Running on Cray under COS w/bugs */
#  endif
#endif

#if defined(convex) || defined(__convex__)
/********************************
 *				*
 *  Convex C1 & C2		*
 *				*
 ********************************/
typedef double		fastf_t;/* double|float, "Fastest" float type */
#define LOCAL		auto	/* static|auto, for serial|parallel cpu */
#define FAST		register /* LOCAL|register, for fastest floats */
#if 1
typedef long long	bitv_t;	/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
#else
typedef long		bitv_t;
#define BITV_SHIFT	5
#endif

#define MAX_PSW		4	/* Max number of processors */
#define DEFAULT_PSW	1	/* for now */
#define PARALLEL	1
#endif

#ifdef ardent
/********************************
 *				*
 *  Stardent (formerly Ardent) 	*
 *  "Titan" Workstation		*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* for parallel cpus */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* # processors, max */
#define DEFAULT_PSW	1
#define PARALLEL	1
#endif

#ifdef __stardent
/********************************
 *				*
 *  Stardent VISTRA Workstation	*
 *  based on Intel i860 chip	*
 *				*
 ********************************/
#define __unix	1		/* It really is unix */
#define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* for parallel cpus */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#endif

#if	(defined(__sgi) && defined(__mips))
/* Strict ANSI C does not define CPP symbols that don't start with __ */
#	define sgi	1
#	define mips	1
#endif
#if	(defined(sgi) && defined(mips))
/********************************
 *				*
 *  SGI 4D, multi-processor	*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#if defined( _MIPS_SZLONG ) && _MIPS_SZLONG == 64
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
#else
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */
#endif
#define const	const

#define MAX_PSW		1024
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif

#ifdef apollo
/********************************
 *				*
 *  Apollo			*
 *  with SR 10			*
 *				*
 ********************************/
#if __STDC__
#define const	/**/		/* Does not support const keyword */
#define const	/**/		/* Does not support const keyword */
#endif

typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	static		/* static|auto, for serial|parallel cpu */
#define FAST	LOCAL		/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#define MALLOC_NOT_MP_SAFE 1

#endif


#ifdef n16
/********************************
 *				*
 *     Encore Multi-Max		*
 *				*
 ********************************/
#define IEEE_FLOAT	1	/* Uses IEEE style floating point */
#define LITTLE_ENDIAN	1	/* Under the influence of National Semiconductor */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		32	/* This number is uncertain */
#define DEFAULT_PSW	1
#define PARALLEL	1
#define MALLOC_NOT_MP_SAFE 1
#endif

#ifdef ipsc860
/********************************
 *				*
 *   Intel iPSC/860 Hypercube	*
 *				*
 ********************************/
/* icc compiler gets confused on const typedefs */
#define	const	/**/
#define	const	/**/
#define MALLOC_NOT_MP_SAFE 1
#endif

#if defined(SUNOS) && SUNOS >= 50
/********************************
 *				*
 *   Sun Running Solaris 2.X    *
 *   aka SunOS 5.X              *
 *				*
 ********************************/

#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		256	/* need to increase this for Super Dragon? */
#define DEFAULT_PSW	bu_avail_cpus()
#define PARALLEL	1

#endif

#if defined(hppa) 
/********************************
 *				*
 *   HP 9000/700                *
 *   Running HP-UX 9.1          *
 *				*
 ********************************/

#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define const   /**/            /* Does not support const keyword */
#define const   /**/            /* Does not support const keyword */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#define MALLOC_NOT_MP_SAFE 1

#endif

#ifdef __ppc__
/********************************
 *                              *
 *      Macintosh PowerPC       *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
#define FAST    register        /* LOCAL|register, for fastest floats */
typedef long    bitv_t;         /* could use long long */
#define BITV_SHIFT      5       /* log2( bits_wide(bitv_t) ) */
#define MAX_PSW         512       /* Unused, but useful for thread debugging */
#define DEFAULT_PSW     bu_avail_cpus()	/* use as many as we can */
#define PARALLEL        1
/* #define MALLOC_NOT_MP_SAFE 1 -- not confirmed */
#endif

#ifdef __sp3__
/********************************
 *                              *
 *      IBM SP3                 *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
#define FAST    register        /* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#if 1	/* Multi-CPU SP3 build */
#	define MAX_PSW		32     	/* they can go 32-way per single image */
#	define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are configured by default */
#	define	PARALLEL	1
#	define	HAS_POSIX_THREADS	1
#	define	MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */
#else	/* 1 CPU SP3 build */
#	define MAX_PSW		1	/* only one processor, max */
#	define DEFAULT_PSW	1
#endif

#endif

#ifdef linux
/********************************
 *                              *
 *        Linux on IA32         *
 *                              *
 ********************************/
#define IEEE_FLOAT      1      /* Uses IEEE style floating point */
#define BITV_SHIFT      5      /* log2( bits_wide(bitv_t) ) */

typedef double fastf_t;       /* double|float, "Fastest" float type */
typedef long bitv_t;          /* could use long long */

/*
 * Note that by default a Linux installation supports parallel using
 * pthreads. For a 1 cpu installation, toggle these blocks
 */
# if 1 /* multi-cpu linux build */

# define LOCAL auto             /* static|auto, for serial|parallel cpu */
# define FAST register          /* LOCAL|register, for fastest floats */
# define MAX_PSW         16
# define DEFAULT_PSW     bu_avail_cpus()	/* use as many processors as are available */
# define PARALLEL        1
# define HAS_POSIX_THREADS 1    /* formerly in conf.h */
# define MALLOC_NOT_MP_SAFE 1   /* uncertain, but this is safer for now */

# else  /* 1 CPU Linux build */

# define LOCAL static		/* static|auto, for serial|parallel cpu */
# define FAST LOCAL		/* LOCAL|register, for fastest floats */
# define MAX_PSW        1	/* only one processor, max */
# define DEFAULT_PSW	1

# endif
#endif /* linux */

#ifndef LOCAL
/********************************
 *				*
 * Default 32-bit uniprocessor	*
 *  VAX, Gould, SUN, SGI	*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	static		/* static|auto, for serial|parallel cpu */
#define FAST	LOCAL		/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* allow for a dual core dual */
#define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are available by default */ 

#endif

/*
 *  Definitions for big-endian -vs- little-endian.
 *	BIG_ENDIAN:	Byte [0] is on left side of word (msb).
 *	LITTLE_ENDIAN:	Byte [0] is on right side of word (lsb).
 */
#ifdef vax
# define LITTLE_ENDIAN	1
#endif

#if !defined(BIG_ENDIAN) && !defined(LITTLE_ENDIAN)
# define BIG_ENDIAN	1	/* The common case */
#endif

/*  Bit vector mask */
#define BITV_MASK	((1<<BITV_SHIFT)-1)

/*
 * Definitions about limits of floating point representation
 * Eventually, should be tied to type of hardware (IEEE, IBM, Cray)
 * used to implement the fastf_t type.
 */
#if defined(vax) || (defined(sgi) && !defined(mips))
	/* DEC VAX "D" format, the most restrictive */
#define MAX_FASTF		1.0e37	/* Very close to the largest number */
#define SQRT_MAX_FASTF		1.0e18	/* This squared just avoids overflow */
#define SMALL_FASTF		1.0e-37	/* Anything smaller is zero */
#define SQRT_SMALL_FASTF	1.0e-18	/* This squared gives zero */
#else
	/* IBM format, being the next most restrictive format */
#define MAX_FASTF		1.0e73	/* Very close to the largest number */
#define SQRT_MAX_FASTF		1.0e36	/* This squared just avoids overflow */
#define SMALL_FASTF		1.0e-77	/* Anything smaller is zero */
#if defined(aux)
#  define SQRT_SMALL_FASTF	1.0e-40 /* _doprnt error in libc */
#else
#  define SQRT_SMALL_FASTF	1.0e-39	/* This squared gives zero */
#endif
#endif
#define SMALL			SQRT_SMALL_FASTF

/*
 *  Definition of a "generic" pointer that can hold a pointer to anything.
 *  According to tradition, a (char *) was generic, but the ANSI folks
 *  worry about machines where (int *) might be wider than (char *),
 *  so here is the clean way of handling it.
 */
#if !defined(GENPTR_NULL)
#  if __STDC__
	typedef void	*genptr_t;
#  else
	typedef char	*genptr_t;
#  endif
#  define GENPTR_NULL	((genptr_t)0)
#endif

/* A portable way of handling pre-ANSI C: remove const keyword */
#if !defined(__STDC__)
#  define	const	/**/
#endif
#if defined(CONST)
#  undef  CONST
#endif
#define CONST deprecated

/* Even in C++ not all compilers know the "bool" keyword yet */
#if !defined(BOOL_T)
# define BOOL_T	int
#endif

/* A portable way of handling pre-ANSI C: remove signed keyword */
#if !defined(__STDC__)
#  define	signed	/**/
#endif
#if defined(SIGNED)
#  undef SIGNED
#endif
#define SIGNED deprecated

/*
 *  Some very common BSD --> SYSV conversion aids
 */
#if defined(SYSV) && !defined(bzero) && !defined(HAVE_BZERO)
#	define bzero(str,n)		memset( str, 0, n )
#	define bcopy(from,to,count)	memcpy( to, from, count )
#endif

/* Functions local to one file should be declared HIDDEN:  (nil)|static */
/* To aid in using ADB, generally leave this as nil. */
#if !defined(HIDDEN)
# if defined(lint)
#	define HIDDEN	static
# else
#	define HIDDEN	/***/
# endif
#endif

/*
 *  ANSI and POSIX do not seem to have prototypes for the hypot() routine,
 *  but several vendors include it in their -lm math library.
 */
#if defined(_POSIX_SOURCE) && !defined(__USE_MISC)
	/* But the sgi -lm does have a hypot routine so lets use it */
#if defined(__sgi) || defined(__convexc__)
        extern double hypot(double, double);
#else
#	define hypot(x,y)      sqrt( (x)*(x)+(y)*(y) )
#endif
#endif

#if defined(SUNOS) && SUNOS >= 52
        extern double hypot(double, double);
#endif

#endif  /* MACHINE_H */
@


11.29
log
@merge of windows-6-0-branch into head
@
text
@d177 1
a177 1
 *  $Header$
@


11.28
log
@quell warnings where undefined preprocessor symbols are used as values
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.27 2004/01/08 14:50:43 jra Exp $
d208 17
a224 2
#if defined(_WIN32) && defined(_MSC_VER) && defined(_M_IX86)
#define const const
a705 1

d733 1
a733 1
#endif
@


11.27
log
@Fixed a typo
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.26 2003/10/06 15:42:34 morrison Exp $
d462 1
a462 1
#if SUNOS >= 50
d715 1
a715 1
#if SUNOS >= 52
@


11.26
log
@make the default number of cpus be the number of availabel cpus via bu_avail_cpus()
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.25 2003/05/17 00:45:36 morrison Exp $
d478 1
a478 1
#define DEFAULT_PSW	bu_avail_cpu()
@


11.26.2.1
log
@merge from head
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.27 2004/01/08 14:50:43 jra Exp $
d478 1
a478 1
#define DEFAULT_PSW	bu_avail_cpus()
@


11.26.2.2
log
@merge from HEAD
@
text
@@


11.26.2.3
log
@merge from head
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.28 2004/03/03 19:38:22 morrison Exp $
d462 1
a462 1
#if defined(SUNOS) && SUNOS >= 50
d715 1
a715 1
#if defined(SUNOS) && SUNOS >= 52
@


11.26.2.4
log
@merge from head
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.26.2.3 2004/03/10 13:24:59 erikg Exp $
@


11.26.2.5
log
@merge from head...
@
text
@d177 1
a177 1
 *  $Header$
d208 2
a209 17

#ifdef WIN32
/********************************
 *				*
 *  Windows Windows		*
 *				*
 ********************************/
typedef double fastf_t;	
#define LOCAL auto	
#define FAST register	
typedef long bitv_t;	
#define BITV_SHIFT	5
// assume only one processor for now
#define MAX_PSW	4
#define DEFAULT_PSW	1
#define PARALLEL	1
#define MALLOC_NOT_MP_SAFE 1
d691 1
d719 1
a719 1
#endif  /* MACHINE_H */
@


11.25
log
@whitespace
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.24 2002/10/11 08:30:56 kermit Exp $
d478 1
a478 1
#define DEFAULT_PSW	64
d519 2
a520 8

#define MAX_PSW         4       /* Unused, I actually pull from posix */
#define DEFAULT_PSW     2       /* Using 2 allows rt to use both cpus
                                 * on a dual box without the user requesting
                                 * -P 2. Does not adversely affect usage
                                 * on 1 cpu box because bu_avail_cpus will
                                 * return 1. */
			        
d539 2
a540 2
#	define MAX_PSW		16
#	define DEFAULT_PSW	1
d571 2
a572 6
# define MAX_PSW         4
# define DEFAULT_PSW     2      /* Using 2 allows rt to use both cpus
				 * on a dual box without the user spec'ing
				 * -P 2. Does not adversely affect usage
				 * on 1 cpu box because bu_avail_cpus will
				 * return 1. */
d600 2
a601 2
#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
@


11.24
log
@Added initial support for IBM SP "Scalable Parallel" system running AIX.
Static build fully functional, still needs more work on shared build.
OpenGL support works, but there are issues communicatiing with mged.
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.23 2002/03/13 19:56:59 morrison Exp $
d522 4
a525 4
				 * on a dual box without the user spec'ing
				 * -P 2. Does not adversely affect usage
				 * on 1 cpu box because bu_avail_cpus will
				 * return 1. */
@


11.24.2.1
log
@updated for merging
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.25 2003/05/17 00:45:36 morrison Exp $
d522 4
a525 4
                                 * on a dual box without the user requesting
                                 * -P 2. Does not adversely affect usage
                                 * on 1 cpu box because bu_avail_cpus will
                                 * return 1. */
@


11.23
log
@up'd SGI MAX_PSW to 1024
@
text
@d177 1
a177 1
 *  $Header: /n/cad/c/CVS/brlcad/h/machine.h,v 11.22 2002/01/24 21:44:27 rbowers Exp $
d529 26
@


11.23.4.1
log
@sync branch with HEAD
@
text
@d177 1
a177 1
 *  $Header$
d208 2
a209 17

#ifdef WIN32
/********************************
 *				*
 *  Windows Windows		*
 *				*
 ********************************/
typedef double fastf_t;	
#define LOCAL auto	
#define FAST register	
typedef long bitv_t;	
#define BITV_SHIFT	5
// assume only one processor for now
#define MAX_PSW	4
#define DEFAULT_PSW	1
#define PARALLEL	1
#define MALLOC_NOT_MP_SAFE 1
d462 1
a462 1
#if defined(SUNOS) && SUNOS >= 50
d478 1
a478 1
#define DEFAULT_PSW	bu_avail_cpus()
d519 8
a526 2
#define MAX_PSW         512       /* Unused, but useful for thread debugging */
#define DEFAULT_PSW     bu_avail_cpus()	/* use as many as we can */
a530 26
#ifdef __sp3__
/********************************
 *                              *
 *      IBM SP3                 *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
#define FAST    register        /* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#if 1	/* Multi-CPU SP3 build */
#	define MAX_PSW		32     	/* they can go 32-way per single image */
#	define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are configured by default */
#	define	PARALLEL	1
#	define	HAS_POSIX_THREADS	1
#	define	MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */
#else	/* 1 CPU SP3 build */
#	define MAX_PSW		1	/* only one processor, max */
#	define DEFAULT_PSW	1
#endif

#endif

d551 6
a556 2
# define MAX_PSW         16
# define DEFAULT_PSW     bu_avail_cpus()	/* use as many processors as are available */
d584 2
a585 2
#define MAX_PSW		4	/* allow for a dual core dual */
#define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are available by default */ 
d675 1
d699 1
a699 1
#if defined(SUNOS) && SUNOS >= 52
d703 1
a703 1
#endif  /* MACHINE_H */
@


11.23.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.23 2002/03/13 19:56:59 morrison Exp $
d208 123
a330 6
#ifdef WIN32
typedef double fastf_t;	
#define LOCAL auto	
#define FAST register	
typedef long bitv_t;	
#define CONST const	 
d332 253
a584 2
// assume only one processor for now
#define MAX_PSW	4
d586 1
a586 8
//#define PARALLEL	0
#define IEEE_FLOAT 	1
#define LITTLE_ENDIAN	1
#define MAX_FASTF	1.00E+74
#define SQRT_MAX_FASTF	1.00E+37
#define SMALL_FASTF	1.00E-74
#define SQRT_SMALL_FASTF	1.00E-37
#define SMALL SQRT_SMALL_FASTF
d588 1
d593 8
d606 24
d644 6
a649 7
/* A portable way of handling the ANSI C const keyword: use CONST */
#if !defined(CONST)
# if __STDC__
#	define	CONST	const
# else
#	define	CONST	/**/
# endif
d651 1
d658 15
a672 7
/* A portable way of dealing with pre-ANSI C.  Assume signed variables */
#if !defined(SIGNED)
# if __STDC__
#	define SIGNED	signed
# else
#	define SIGNED	/**/
# endif
d675 1
d686 11
a696 2
#if defined(WIN32)
#	define hypot _hypot
d699 5
a703 1
#endif@


11.23.6.2
log
@removed comment embedded in comment and added trailing newline to file that got lost
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.23.6.1 2002/09/26 23:03:45 morrison Exp $
a226 1

d232 1
a232 1
 *  Bit vector mask */
d287 1
a287 1
#endif
@


11.23.6.3
log
@sync to HEAD...
@
text
@d177 1
a177 1
 *  $Header: /n/cad/c/CVS/brlcad/h/machine.h,v 11.23.6.2 2002/09/27 01:22:57 morrison Exp $
d218 8
a225 157
#define PARALLEL	1
#define MALLOC_NOT_MP_SAFE 1
#endif

#ifdef ipsc860
/********************************
 *				*
 *   Intel iPSC/860 Hypercube	*
 *				*
 ********************************/
/* icc compiler gets confused on const typedefs */
#define	const	/**/
#define	const	/**/
#define MALLOC_NOT_MP_SAFE 1
#endif

#if defined(SUNOS) && SUNOS >= 50
/********************************
 *				*
 *   Sun Running Solaris 2.X    *
 *   aka SunOS 5.X              *
 *				*
 ********************************/

#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		256	/* need to increase this for Super Dragon? */
#define DEFAULT_PSW	bu_avail_cpus()
#define PARALLEL	1

#endif

#if defined(hppa) 
/********************************
 *				*
 *   HP 9000/700                *
 *   Running HP-UX 9.1          *
 *				*
 ********************************/

#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define const   /**/            /* Does not support const keyword */
#define const   /**/            /* Does not support const keyword */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#define MALLOC_NOT_MP_SAFE 1

#endif

#ifdef __ppc__
/********************************
 *                              *
 *      Macintosh PowerPC       *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
#define FAST    register        /* LOCAL|register, for fastest floats */
typedef long    bitv_t;         /* could use long long */
#define BITV_SHIFT      5       /* log2( bits_wide(bitv_t) ) */
#define MAX_PSW         512       /* Unused, but useful for thread debugging */
#define DEFAULT_PSW     bu_avail_cpus()	/* use as many as we can */
#define PARALLEL        1
/* #define MALLOC_NOT_MP_SAFE 1 -- not confirmed */
#endif

#ifdef __sp3__
/********************************
 *                              *
 *      IBM SP3                 *
 *                              *
 ********************************/
#define IEEE_FLOAT      1       /* Uses IEEE style floating point */
typedef double  fastf_t;        /* double|float, "Fastest" float type */
#define LOCAL   auto            /* static|auto, for serial|parallel cpu */
#define FAST    register        /* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#if 1	/* Multi-CPU SP3 build */
#	define MAX_PSW		32     	/* they can go 32-way per single image */
#	define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are configured by default */
#	define	PARALLEL	1
#	define	HAS_POSIX_THREADS	1
#	define	MALLOC_NOT_MP_SAFE	1	/* XXX Not sure about this */
#else	/* 1 CPU SP3 build */
#	define MAX_PSW		1	/* only one processor, max */
#	define DEFAULT_PSW	1
#endif

#endif

#ifdef linux
/********************************
 *                              *
 *        Linux on IA32         *
 *                              *
 ********************************/
#define IEEE_FLOAT      1      /* Uses IEEE style floating point */
#define BITV_SHIFT      5      /* log2( bits_wide(bitv_t) ) */

typedef double fastf_t;       /* double|float, "Fastest" float type */
typedef long bitv_t;          /* could use long long */

/*
 * Note that by default a Linux installation supports parallel using
 * pthreads. For a 1 cpu installation, toggle these blocks
 */
# if 1 /* multi-cpu linux build */

# define LOCAL auto             /* static|auto, for serial|parallel cpu */
# define FAST register          /* LOCAL|register, for fastest floats */
# define MAX_PSW         16
# define DEFAULT_PSW     bu_avail_cpus()	/* use as many processors as are available */
# define PARALLEL        1
# define HAS_POSIX_THREADS 1    /* formerly in conf.h */
# define MALLOC_NOT_MP_SAFE 1   /* uncertain, but this is safer for now */

# else  /* 1 CPU Linux build */

# define LOCAL static		/* static|auto, for serial|parallel cpu */
# define FAST LOCAL		/* LOCAL|register, for fastest floats */
# define MAX_PSW        1	/* only one processor, max */
# define DEFAULT_PSW	1

# endif
#endif /* linux */

#ifndef LOCAL
/********************************
 *				*
 * Default 32-bit uniprocessor	*
 *  VAX, Gould, SUN, SGI	*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	static		/* static|auto, for serial|parallel cpu */
#define FAST	LOCAL		/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* allow for a dual core dual */
#define DEFAULT_PSW	bu_avail_cpus()	/* use as many as are available by default */ 

a285 3
#endif
#if defined(SUNOS) && SUNOS >= 52
        extern double hypot(double, double);
@


11.23.6.4
log
@merge from HEAD
@
text
@d177 1
a177 1
 *  $Header$
a435 1

d440 1
a440 1
#endif  /* MACHINE_H */
@


11.23.6.5
log
@unsnafu machine defines that were obliterated
@
text
@a207 1

a208 5
/********************************
 *				*
 *  Windows Windows		*
 *				*
 ********************************/
d213 1
a221 238

#ifdef HEP
/********************************
 *				*
 *  Denelcor HEP H-1000		*
 *				*
 ********************************/
#define IBM_FLOAT 1		/* Uses IBM style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		128	/* Max number of process streams */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1
#endif


#if defined(__alpha)
/********************************
 *				*
 *	  DEC Alpha (AXP)	*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
#if !defined(LITTLE_ENDIAN)
	/* Often defined in <alpha/endian.h> */
#	define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
#endif
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#endif


#if defined(alliant) && !defined(i860)
/********************************
 *				*
 *	Alliant FX/8		*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		8	/* Max number of processors */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif


#if defined(alliant) && defined(i860)
/********************************
 *				*
 *	Alliant FX/2800		*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
#define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		28	/* Max number of processors */
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif


#ifdef CRAY
/********************************
 *				*
 *  Cray-X/MP, COS or UNICOS	*
 *  Cray-2 under "UNICOS"	*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* Max number of processors */
#define DEFAULT_PSW	1
#define PARALLEL	1

#  if 0
#	define CRAY_COS	1	/* Running on Cray under COS w/bugs */
#  endif
#endif

#if defined(convex) || defined(__convex__)
/********************************
 *				*
 *  Convex C1 & C2		*
 *				*
 ********************************/
typedef double		fastf_t;/* double|float, "Fastest" float type */
#define LOCAL		auto	/* static|auto, for serial|parallel cpu */
#define FAST		register /* LOCAL|register, for fastest floats */
#if 1
typedef long long	bitv_t;	/* largest integer type */
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
#else
typedef long		bitv_t;
#define BITV_SHIFT	5
#endif

#define MAX_PSW		4	/* Max number of processors */
#define DEFAULT_PSW	1	/* for now */
#define PARALLEL	1
#endif

#ifdef ardent
/********************************
 *				*
 *  Stardent (formerly Ardent) 	*
 *  "Titan" Workstation		*
 *				*
 ********************************/
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* for parallel cpus */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		4	/* # processors, max */
#define DEFAULT_PSW	1
#define PARALLEL	1
#endif

#ifdef __stardent
/********************************
 *				*
 *  Stardent VISTRA Workstation	*
 *  based on Intel i860 chip	*
 *				*
 ********************************/
#define __unix	1		/* It really is unix */
#define LITTLE_ENDIAN	1	/* Under the influence of Intel Corp */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* for parallel cpus */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#endif

#if	(defined(__sgi) && defined(__mips))
/* Strict ANSI C does not define CPP symbols that don't start with __ */
#	define sgi	1
#	define mips	1
#endif
#if	(defined(sgi) && defined(mips))
/********************************
 *				*
 *  SGI 4D, multi-processor	*
 *				*
 ********************************/
#define IEEE_FLOAT 1		/* Uses IEEE style floating point */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#if defined( _MIPS_SZLONG ) && _MIPS_SZLONG == 64
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
#else
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */
#endif
#define const	const

#define MAX_PSW		1024
#define DEFAULT_PSW	MAX_PSW
#define PARALLEL	1

#endif

#ifdef apollo
/********************************
 *				*
 *  Apollo			*
 *  with SR 10			*
 *				*
 ********************************/
#if __STDC__
#define const	/**/		/* Does not support const keyword */
#define const	/**/		/* Does not support const keyword */
#endif

typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	static		/* static|auto, for serial|parallel cpu */
#define FAST	LOCAL		/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		1	/* only one processor, max */
#define DEFAULT_PSW	1
#define MALLOC_NOT_MP_SAFE 1

#endif


#ifdef n16
/********************************
 *				*
 *     Encore Multi-Max		*
 *				*
 ********************************/
#define IEEE_FLOAT	1	/* Uses IEEE style floating point */
#define LITTLE_ENDIAN	1	/* Under the influence of National Semiconductor */
typedef double	fastf_t;	/* double|float, "Fastest" float type */
#define LOCAL	auto		/* static|auto, for serial|parallel cpu */
#define FAST	register	/* LOCAL|register, for fastest floats */
typedef long	bitv_t;		/* largest integer type */
#define BITV_SHIFT	5	/* log2( bits_wide(bitv_t) ) */

#define MAX_PSW		32	/* This number is uncertain */
#define DEFAULT_PSW	1
#define PARALLEL	1
#define MALLOC_NOT_MP_SAFE 1
#endif

a380 4
 */
#ifdef vax
# define LITTLE_ENDIAN	1
#endif
d382 1
a382 5
#if !defined(BIG_ENDIAN) && !defined(LITTLE_ENDIAN)
# define BIG_ENDIAN	1	/* The common case */
#endif

/*  Bit vector mask */
a385 24
 * Definitions about limits of floating point representation
 * Eventually, should be tied to type of hardware (IEEE, IBM, Cray)
 * used to implement the fastf_t type.
 */
#if defined(vax) || (defined(sgi) && !defined(mips))
	/* DEC VAX "D" format, the most restrictive */
#define MAX_FASTF		1.0e37	/* Very close to the largest number */
#define SQRT_MAX_FASTF		1.0e18	/* This squared just avoids overflow */
#define SMALL_FASTF		1.0e-37	/* Anything smaller is zero */
#define SQRT_SMALL_FASTF	1.0e-18	/* This squared gives zero */
#else
	/* IBM format, being the next most restrictive format */
#define MAX_FASTF		1.0e73	/* Very close to the largest number */
#define SQRT_MAX_FASTF		1.0e36	/* This squared just avoids overflow */
#define SMALL_FASTF		1.0e-77	/* Anything smaller is zero */
#if defined(aux)
#  define SQRT_SMALL_FASTF	1.0e-40 /* _doprnt error in libc */
#else
#  define SQRT_SMALL_FASTF	1.0e-39	/* This squared gives zero */
#endif
#endif
#define SMALL			SQRT_SMALL_FASTF

/*
d400 7
a406 3
/* A portable way of handling pre-ANSI C: remove const keyword */
#if !defined(__STDC__)
#  define	const	/**/
a407 4
#if defined(CONST)
#  undef  CONST
#endif
#define CONST deprecated
d414 7
a420 15
/* A portable way of handling pre-ANSI C: remove signed keyword */
#if !defined(__STDC__)
#  define	signed	/**/
#endif
#if defined(SIGNED)
#  undef SIGNED
#endif
#define SIGNED deprecated

/*
 *  Some very common BSD --> SYSV conversion aids
 */
#if defined(SYSV) && !defined(bzero) && !defined(HAVE_BZERO)
#	define bzero(str,n)		memset( str, 0, n )
#	define bcopy(from,to,count)	memcpy( to, from, count )
d433 2
a434 11
/*
 *  ANSI and POSIX do not seem to have prototypes for the hypot() routine,
 *  but several vendors include it in their -lm math library.
 */
#if defined(_POSIX_SOURCE) && !defined(__USE_MISC)
	/* But the sgi -lm does have a hypot routine so lets use it */
#if defined(__sgi) || defined(__convexc__)
        extern double hypot(double, double);
#else
#	define hypot(x,y)      sqrt( (x)*(x)+(y)*(y) )
#endif
@


11.22
log
@-* modified to support both parallel and single-threaded linux
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.21 2001/10/15 20:17:27 morrison Exp $
d399 1
a399 1
#define MAX_PSW		256
@


11.21
log
@bool to bool_t
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.20 2001/10/15 20:06:32 morrison Exp $
d521 6
a526 1
#define DEFAULT_PSW     1
d530 40
@


11.20
log
@fixed typo
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.19 2001/10/15 19:58:03 morrison Exp $
d609 2
a610 2
#if !defined(BOOL)
# define BOOL	int
@


11.19
log
@Added "Darwin on Power Macintosh" support (finally)
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.18 2001/05/16 21:37:43 morrison Exp $
d524 1
a524 1
#endif#ifdef __ppc__
@


11.18
log
@PRODUCTION optimizations
included a section in conf.h that controls how most optimization settings are used
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.17 2001/04/27 14:18:53 morrison Exp $
d507 19
d609 2
a610 2
#if !defined(BOOL_T)
# define BOOL_T	int
@


11.17
log
@updated const and signed to be deprecated
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.16 2001/04/20 22:28:53 morrison Exp $
d607 1
a607 1
#	define bzero(str,n)		memset( str, '\0', n )
@


11.16
log
@CONST to const
@
text
@d28 1
a28 1
 *	const -
d40 1
a40 1
 *	SIGNED - deprecated -
d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.15 2001/04/05 19:35:07 morrison Exp $
d580 3
a582 7
/* A portable way of handling the ANSI C const keyword: use const */
#if !defined(const)
# if __STDC__
#	define	const	const
# else
#	define	const	/**/
# endif
d584 4
a587 2
#undef const
#define const const
d594 6
a599 7
/* A portable way of dealing with pre-ANSI C.  Assume signed variables */
#if !defined(SIGNED)
# if __STDC__
#	define SIGNED	signed
# else
#	define SIGNED	/**/
# endif
a600 1
#undef SIGNED
@


11.15
log
@updated SIGNED to signed
updated CONST to const
@
text
@d28 1
a28 1
 *	CONST -
d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.14 2000/09/28 22:56:15 butler Exp $
d209 1
a209 1
#define CONST const
d397 1
a397 1
#define CONST	const
d414 1
a414 1
#define CONST	/**/		/* Does not support const keyword */
d457 1
a457 1
#define	CONST	/**/
d499 1
a499 1
#define CONST   /**/            /* Does not support const keyword */
d580 2
a581 2
/* A portable way of handling the ANSI C const keyword: use CONST */
#if !defined(CONST)
d583 1
a583 1
#	define	CONST	const
d585 1
a585 1
#	define	CONST	/**/
d588 2
a589 2
#undef CONST
#define CONST const
@


11.14
log
@Reorder defines (I don't know why)
@
text
@d40 1
a40 1
 *	SIGNED -
d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.13 2000/09/28 22:42:18 butler Exp $
d588 2
d604 2
@


11.13
log
@added defined(_WIN32) to make sure we're under Windows
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.12 2000/09/28 21:03:19 butler Exp $
d208 1
a208 1
#if defined(_MSC_VER) && defined(_M_IX86) && defined(_WIN32)
@


11.12
log
@Mods for MS Visual C++
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.11 2000/04/25 14:27:40 butler Exp $
d208 1
a208 1
#if defined(_MSC_VER) && defined(_M_IX86)
@


11.11
log
@Suns can now have much more than 20 CPUs
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.10 2000/02/02 19:17:59 mike Exp $
d208 5
d428 1
@


11.10
log
@
Added a new symbol.
@
text
@d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.9 2000/01/28 22:17:51 butler Exp $
d471 2
a472 2
#define MAX_PSW		20	/* need to increase this for Super Dragon? */
#define DEFAULT_PSW	20
@


11.9
log
@increased MAX_PSW on the SGI's to take advantage of big systems
@
text
@d153 5
d177 1
a177 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.8 1999/11/02 18:36:06 jra Exp $
d420 1
d441 1
d453 1
d497 1
@


11.8
log
@now correctly sets BITV_SHIFT based on length of "long" for SGI's
@
text
@d172 1
a172 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.7 1999/01/21 02:19:20 mike Exp $
d389 1
a389 1
#define MAX_PSW		64
@


11.7
log
@On Linux, hypot() is defined for us when __USE_MISC is defined.
Part of the more common POSIX extensions.
@
text
@d172 1
a172 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.6 1999/01/15 10:27:11 mike Exp $
d382 3
d386 1
@


11.6
log
@Hopefully BOOL_T is less objectionable than BOOL.
@
text
@d172 1
a172 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.5 1999/01/15 04:57:45 mike Exp $
d607 1
a607 1
#if defined(_POSIX_SOURCE)
@


11.5
log
@Added BOOL data type
@
text
@d172 1
a172 1
 *  $Header: /c/CVS/brlcad/h/machine.h,v 11.4 1997/07/15 18:58:10 gdurf Exp $
d571 2
a572 2
#if !defined(BOOL)
# define BOOL	int
@


11.4
log
@Many SYSV machines have bzero().
It would be a great optimization to *not* have bzero automatically defined
to be memset.
Added a check for HAVE_BZERO to see whether or not to define bzero() in terms
of memset.
@
text
@d172 1
a172 1
 *  $Header: /m/cad/h/RCS/machine.h,v 11.3 1997/03/07 05:38:20 mike Exp gdurf $
d568 5
@


11.3
log
@Increased MAX_PSW on SGI to 64
@
text
@d172 1
a172 1
 *  $Header: /m/cad/h/RCS/machine.h,v 11.2 1996/08/27 06:56:16 mike Exp mike $
d582 1
a582 1
#if defined(SYSV) && !defined(bzero)
@


11.2
log
@Eliminated RES_INIT, RES_ACQUIRE, RES_RELEASE macros,
in favor of new subroutines found in LIBBU and bu.h
@
text
@d172 1
a172 1
 *  $Header: /m/cad/h/RCS/machine.h,v 11.1 1995/01/04 09:48:23 mike Rel4_4 mike $
d385 1
a385 1
#define MAX_PSW		32
@


11.1
log
@Release_4.4
@
text
@a152 29
 *	RES_INIT() -
 *		Macro to initialize a semaphore.
 *		For now, the semaphore *must* be given as the address of
 *		one of these five variables from raytrace.h:
 *			rt_g.res_syscall
 *			rt_g.res_worker
 *			rt_g.res_stats
 *			rt_g.res_results
 *			rt_g.res_model
 *		This is a historical limitation that will be removed when
 *		the macro names are changed.
 *
 *	RES_ACQUIRE() -
 *		Macro to acquire exclusive use of a semaphore, entering
 *		a (1 processor only) critical section.  If another processor
 *		already has exclusive use of this semaphore, it will be
 *		forced to wait, either in a spin-lock, or by relinquishing
 *		it's CPU.
 *
 *	RES_RELEASE() -
 *		Macro to release a semaphore, ending a critical section.
 *		Uses of RES_ACQUIRE() and RES_RELEASE() need to be carefully
 *		paired.  No more than a few lines of code should exist
 *		between them, to keep the critical (non-parallel) sections
 *		as brief as possible.  The frequency and duration of
 *		critical sections determines the asymptotic performance
 *		of a parallel application as the number of processors
 *		is made large.
 *
d167 1
d170 1
a170 2
 *	-lm -lc				(serial-only applications)
 *	LIBRT LIBRT_LIBES -lm -lc	(parallel applications)
d172 1
a172 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.11 94/12/30 00:31:47 mike Exp $
a215 4
/* full means resource free, empty means resource busy */
#define RES_INIT(ptr)		RES_RELEASE(ptr)
#define	RES_ACQUIRE(ptr)	(void)Daread(ptr)	/* wait full set empty */
#define RES_RELEASE(ptr)	(void)Daset(ptr,3)	/* set full */
a238 3
#define RES_INIT(ptr)		;
#define RES_ACQUIRE(ptr)	;
#define RES_RELEASE(ptr)	;
a256 5
/* All FX/8's have parallel capability -- compile the locking in always */
#define RES_INIT(ptr)		RES_RELEASE(ptr)
/* RES_ACQUIRE is a function */
#define RES_RELEASE(ptr)	*(ptr)=0;

a277 3
/* All Alliant machines have parallel capability */
/* RES_INIT, RES_ACQUIRE, and RES_RELASE are all subroutines */

a323 5

#define RES_INIT(ptr)		RES_RELEASE(ptr)
/* RES_ACQUIRE is a function in machine.c, using tas instruction */
#define RES_RELEASE(ptr)	*(ptr)=0;

a341 1
/* RES_INIT, RES_ACQUIRE, RES_RELEASE are subroutines, for now */
a361 3
#define RES_INIT(ptr)		;
#define RES_ACQUIRE(ptr)	;
#define RES_RELEASE(ptr)	;
a384 1
/* RES_INIT, RES_ACQUIRE, RES_RELEASE are subroutines */
a408 3
#define RES_INIT(ptr)		;
#define RES_ACQUIRE(ptr)	;
#define RES_RELEASE(ptr)	;
a458 1
/* RES_INIT, RES_ACQUIRE, RES_RELEASE are subroutines */
a482 3
#define RES_INIT(ptr)		;
#define RES_ACQUIRE(ptr)	;
#define RES_RELEASE(ptr)	;
a500 3
#define RES_INIT(ptr)		;
#define RES_ACQUIRE(ptr)	;
#define RES_RELEASE(ptr)	;
a585 11

/* XXX Soon BRL-CAD will convert to sources written using the SYSV names,
 * XXX with defines back to the old UNIX V6 names for antique systems.
 */
#if !defined(HAVE_STRCHR)
#	define strchr(sp,c)	index(sp,c)
#	define strrchr(sp,c)	rindex(sp,c)
	extern char *index();
	extern char *rindex();
#endif

@


10.11
log
@Added DEC Alpha (AXP)
@
text
@d201 1
a201 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.10 94/12/22 00:22:06 mike Exp Locker: mike $
@


10.10
log
@Added HP support
From: Ingbert Graf <graf@@conmuc.de.convex.com>
@
text
@d201 1
a201 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.9 94/12/06 17:03:39 mike Exp Locker: mike $
d252 25
@


10.9
log
@Eliminated #elif, that's ANSI-only.
@
text
@d201 1
a201 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.8 94/10/11 16:44:23 mike Exp Locker: mike $
d495 26
@


10.8
log
@Bug report 110 -- SunOS includes but does not declare hypot() in
ANSI C mode.
@
text
@d201 1
a201 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.7 94/09/30 17:51:29 mike Exp Locker: mike $
d212 9
d222 1
a222 9
#	if defined(_NFILE)
#		define FOPEN_MAX	_NFILE
#	elif defined(NOFILE)
#		define FOPEN_MAX	NOFILE
#	elif defined(OPEN_MAX)
#		define FOPEN_MAX	OPEN_MAX
#	else
#		define FOPEN_MAX	32
#	endif
@


10.7
log
@SUNOS is the new SUNOS symbol.
@
text
@d201 1
a201 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.6 94/08/25 14:54:22 gdurf Exp Locker: mike $
d621 4
a624 1
/* POSIX (or at least the SGI versions does not define hypot) */
d634 2
d638 1
@


10.6
log
@Removed some machine-specific #ifdefs
@
text
@d201 1
a201 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.5 1994/05/07 21:16:44 mike Exp gdurf $
d475 1
a475 1
#if defined(sparc) && defined(SYSV)
a493 6

# if __STDC__ == 0
	/* == 0 -Xt in partial ANSI (transition) mode */
#	undef __STDC__
#	define __STDC__	1
# endif
@


10.5
log
@SGI has more CPUs now.
@
text
@d1 4
a44 18
 *	USE_PROTOTYPES -
 *		When defined, this compiler will accept ANSI-C function
 *		prototypes, even if it isn't a full ANSI compiler.
 *		Used mostly to build more sophisticated macros.
 *
 *	USE_STRING_H -
 *		When defined, use <string.h>, not <strings.h>
 *		XXX A better way of handling this is needed.
 *		Most code does this based on the BSD flag instead, which
 *		isn't always the best idea, viz:
 *			#include <stdio.h>
 *			#ifdef BSD
 *			#	include <strings.h>
 *			#else
 *			#	include <string.h>
 *			#endif
 *			#include <math.h>
 *
d201 1
a201 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.4 93/12/22 06:20:39 mike Exp Locker: mike $
d207 15
a221 2
#ifdef SYSV
#	define	USE_STRING_H	1	/* use <string.h>, not <strings.h> */
d334 1
d337 5
a415 1
#define USE_PROTOTYPES	1	/* not ANSI, but prototypes supported */
d608 1
a608 1
#if defined(BSD) && !defined(SYSV) && (BSD <= 43)
a626 6
/* Some non-ANSI C compilers can take advantage of prototypes.  See above */
#if __STDC__ && !defined(USE_PROTOTYPES)
#	define USE_PROTOTYPES 1
#endif


d637 1
a638 1
#endif
@


10.4
log
@Added Solaris changes
@
text
@d215 1
a215 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.3 93/04/01 03:54:22 mike Exp Locker: mike $
d408 1
a408 1
#define MAX_PSW		8
@


10.3
log
@Added #include sequencing.
Added monster comment on the front to describe all the goodies in here.
@
text
@d215 1
a215 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.2 92/07/23 05:13:15 mike Exp Locker: mike $
d469 28
@


10.2
log
@Intergraph C compiler does not like "/*" inside comments !?!
@
text
@a2 4
 *  
 *  This header file defines the types of various machine-related
 *  objects.  These should be changed for each target machine,
 *  as appropriate.
d4 192
d200 1
a200 2
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
d202 3
d206 10
a215 1
 *  $Header: /m/cad/h/RCS/machine.h,v 10.1 91/10/12 06:35:22 mike Rel4_0 Locker: mike $
d573 3
@


10.1
log
@Release_4.0
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.29 91/10/10 00:34:16 mike Exp $
d122 3
a124 1
/**#define CRAY_COS	1	/* Running on Cray under COS w/bugs */
d326 1
a326 1
#define SQRT_SMALL_FASTF	1.0e-40 /* _doprnt error in libc */
d328 1
a328 1
#define SQRT_SMALL_FASTF	1.0e-39	/* This squared gives zero */
@


9.29
log
@Changed Ardent/Stardent entry to only use 1 CPU by default.
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.28 91/09/27 21:39:35 phil Exp Locker: mike $
@


9.28
log
@Don't use "const" with iPSC/860 icc cross compiler.
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.27 91/09/25 02:33:33 butler Exp Locker: phil $
d149 2
a150 1
 *  Ardent Workstation		*
d161 1
a161 1
#define DEFAULT_PSW	MAX_PSW
@


9.27
log
@convex also has hypot() under posix
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.26 91/09/21 00:07:56 mike Exp Locker: butler $
d256 11
@


9.26
log
@sqrt() only has one argument.
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.25 91/09/10 14:34:29 stay Exp $
d388 1
a388 1
#if defined(__sgi)
@


9.25
log
@added define for hypot for POSIX and ansi (at least for sgi's
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.24 91/08/31 02:43:08 mike Exp $
d391 1
a391 1
#define hypot(x,y)      (double) sqrt( x*x, y*y)
@


9.24
log
@Stardent is little endian
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.23 91/08/30 00:23:27 mike Exp $
d383 12
@


9.23
log
@Added Stardent entry
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.22 91/08/29 23:50:01 mike Exp $
d172 1
@


9.22
log
@Improved strchr to index mapping for BSD <= 43 machines
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.22 91/08/29 23:34:24 mike Exp $
d162 21
@


9.21
log
@Added USE_STRING auto-definition for SysV
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.20 91/08/28 02:41:13 mike Exp $
d338 2
a339 1
#if defined(BSD) && !defined(SYSV) && (BSD < 43)
d341 2
a342 1
#	define strchr(sp,c)	index(sp,c)
@


9.20
log
@Neatened up BSD<43 definitions of strrchr and strchr
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.19 91/07/10 03:44:34 butler Exp $
d22 4
a121 1
#define USE_STRING_H
@


9.19
log
@removed arguments from str(r)chr macros to make unprototyped extern
easier to get right.
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.18 91/07/09 22:28:59 butler Exp $
d335 3
a337 3
#if defined(BSD) && !defined(SYSV) && BSD < 43
#	define strrchr		rindex
#	define strchr		index
@


9.18
log
@fixed embarassing error in definition of strchr for BSD 4.2 systems
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.17 91/07/09 22:14:59 butler Exp $
d336 2
a337 2
#	define strrchr(a, b)		rindex(a, b)
#	define strchr(a, b)		index(a, b)
@


9.17
log
@added defines for strchr,strrchr for BSD machines < 4.3
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.16 91/07/02 22:39:31 mike Exp $
d337 1
a337 1
#	define strchr(a, b)		rindex(a, b)
@


9.16
log
@/* A portable way of dealing with pre-ANSI C.  Assume signed variables */
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.15 91/06/04 20:41:31 mike Exp $
d334 7
@


9.15
log
@Mods for SGI ANSI C
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.14 91/03/13 13:45:46 mike Exp $
d315 9
@


9.14
log
@Added SQRT_MAX_FASTF
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.13 91/01/14 23:13:46 mike Exp $
d161 5
@


9.13
log
@A bit of polish
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.12 91/01/12 07:50:47 butler Exp $
d273 1
d279 1
@


9.12
log
@moved CONST_DECL and SYS_TIME_H to rle_config.h, and
set up USE_PROTOTYPES macro 
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.11 91/01/05 02:24:15 butler Exp $
d173 1
d302 3
a304 2
/* A portable way of handling the ANSI C const keyword */
#if (__STDC__ || (sgi && mips)) && !defined(CONST)
d306 1
a306 1
#else
d308 1
d319 8
a326 5
/* To aid in using ADB, for now */
#ifdef lint
#define HIDDEN	static		/* (nil)|static, for func's local to 1 file */
#else
#define HIDDEN	/***/		/* (nil)|static, for func's local to 1 file */
d329 1
a329 1
/* some stuff the Utah Raster Toolkit wants */
@


9.11
log
@added some macros to support Utah Raster Toolkit Release 3
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.10 91/01/04 00:58:03 mike Exp $
d118 1
d178 1
a178 1
#define USE_PROTOTYPES	/**/	/* not ANSI, but prototypes supported */
d292 1
a292 1
#if !defined(GENPTR_H_SEEN)
a294 1
#	define VOID_STAR		/* for the Utah Raster Toolkit */
d302 1
a302 1
#if __STDC__ && !defined(CONST)
d324 2
a325 3
#define CONST_DECL CONST
#ifdef __STDC__
#define USE_PROTOTYPES
a326 4
#if BSD && !SYSV
#  define SYS_TIME_H	/* time_t is defined through sys/time.h not time.h */
#endif

@


9.10
log
@Added GENPTR_NULL
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.9 90/11/27 13:35:12 mike Exp $
d177 2
d294 1
d322 10
@


9.9
log
@New convex symbol
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.8 90/11/27 00:30:01 mike Exp $
d295 1
@


9.8
log
@Initial support for Encore MultiMax
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.7 90/11/22 04:59:01 mike Exp $
d121 1
a121 1
#ifdef convex
@


9.7
log
@Absorbed BIG_ENDIAN and LITTLE_ENDIAN definitions which
used to be burried in rle.h
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.6 90/11/22 04:47:06 mike Exp $
d203 19
@


9.6
log
@Added Alliant FX/2800.
@
text
@d16 1
a16 1
 *  $Header: /m/cad/h/RCS/machine.h,v 9.5 90/11/18 12:47:29 cjohnson Exp $
d84 1
d224 13
@


9.5
log
@Workaround for doprnt error in libc under A/UX 1.1
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 9.4 90/03/09 15:11:30 cjohnson Locked $
d52 1
a52 1
#ifdef alliant
d67 1
a67 1
/* RES_ACQUIRE is a function in rt.c, using tas instruction */
d77 23
d159 1
a159 1
#if	(defined(sgi) && defined(mips) && !defined(SGI4D_Rel2))
d174 1
a174 1
#define DEFAULT_PSW	1	/* until libgl runs in parallel */
@


9.4
log
@Moved CONST definition here from raytrace.h
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 9.3 90/03/09 15:02:24 mike Locked $
d219 3
d223 1
@


9.3
log
@Added genptr_t
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 9.2 89/07/28 03:37:23 mike Locked $
d163 2
a164 1
#define const	/**/		/* Does not support this keyword */
d235 7
@


9.2
log
@Modifications for the Apollo
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 9.1 89/05/19 05:44:08 mike Rel3_5 $
d201 1
d221 14
@


9.1
log
@Release_3.5
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 8.5 89/02/14 00:24:19 mike Exp $
d155 24
@


8.5
log
@Minor SGI change
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 8.4 88/12/13 00:58:06 mike Locked $
@


8.4
log
@sgi nit.
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 8.4 88/12/12 17:30:36 mike Exp $
d150 2
a151 2
#define MAX_PSW		4
#define DEFAULT_PSW	1
@


8.3
log
@Expanded ranges for floating point formats with more
dyanmic range than the VAX.
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 8.2 88/10/06 05:45:32 mike Locked $
d184 1
a184 1
#ifdef vax
@


8.2
log
@Having DEFAULT_PSW=4 was over-ambitious for the new SGI multi-processors.
New default is 1.
really Release 3.0
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 8.1 88/10/05 00:23:38 mike Locked $
d184 2
d189 6
@


8.1
log
@Release_3.0
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 7.11 88/09/30 23:58:13 kermit Exp $
d112 1
d151 1
a151 1
#define DEFAULT_PSW	MAX_PSW
@


7.11
log
@Added support for parallel Convex machines.
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 7.10 88/09/21 01:44:36 kermit Locked $
@


7.10
log
@SGI 4D, Rel 3, is always setup for PARALLEL
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 7.9 88/09/21 01:29:14 mike Locked $
a96 1

d100 1
a100 1
 *  Convex C1			*
d109 6
a114 5
#define RES_INIT(ptr)		;
#define RES_ACQUIRE(ptr)	;
#define RES_RELEASE(ptr)	;
#define MAX_PSW	1		/* only one processor, max */

@


7.9
log
@Added SGI 4D Multiprocessing support
@
text
@d16 1
a16 1
 *  $Header: /n/spark/m/cad/h/RCS/machine.h,v 7.8 88/09/20 20:41:19 stay Exp $
d138 1
a138 1
 *	SGI 4D, multi-processor	*
d148 4
a151 6
#ifdef PARALLEL
# define MAX_PSW		4	/* Max number of processors */
#else
# define RES_RELEASE(ptr)	;
# define RES_ACQUIRE(ptr)	;
# define MAX_PSW		1
a152 3

#define DEFAULT_PSW		MAX_PSW
#endif SGI4D
@


7.8
log
@Deleted the includes from the SGI4D section and included them
in the librt/machine.c where they are applicable.
@
text
@d16 1
a16 1
 *  $Header: /n/spark/m/cad/h/RCS/machine.h,v 7.7 88/09/19 15:42:36 stay Exp $
d135 1
a135 1
#ifdef SGI4D
d138 1
a138 1
 *	SGI 4D102GTX		*
a149 1
# define DEFAULT_PSW	MAX_PSW
a153 1
# define DEFAULT_PSW	MAX_PSW
d156 1
@


7.7
log
@Added parallel support for SGI 4D/GTX and future products
@
text
@d16 1
a16 1
 *  $Header: /n/m/cad/h/RCS/machine.h,v 7.6 88/09/17 08:36:37 mike Exp $
a140 4
# include <sys/types.h>
# include <sys/prctl.h>
# include <ulocks.h>

a148 2
# define RES_RELEASE(ptr)	usunsetlock((ulock_t) *(ptr))
# define RES_ACQUIRE(ptr)	ussetlock((ulock_t) *(ptr))
d152 2
a153 2
# define RES_RELEASE(ptr)
# define RES_ACQUIRE(ptr)
@


7.6
log
@Added DEFAULT_PSW
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 7.5 88/09/17 08:10:24 mike Locked $
d134 31
@


7.5
log
@Always define PARALLEL on Crays now.
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 7.4 88/09/17 06:43:48 mike Locked $
d47 1
d49 1
a50 1
#endif HEP
a51 1

d71 1
d91 1
d131 1
d152 2
a153 1
#define MAX_PSW	1		/* only one processor, max */
d184 1
a184 1
#endif MACHINE_H
@


7.4
log
@Changed cray-->CRAY, neatness
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 7.3 88/09/17 06:37:59 mike Locked $
d90 1
@


7.3
log
@added support for multitasking on the Ardent
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 7.2 88/09/09 21:04:26 mike Locked $
d73 1
a73 1
#endif alliant
d76 1
a76 1
#ifdef cray
d92 1
a93 1
#endif cray
a94 1

d127 2
a128 2
#define MAX_PSW	4		/* # processors, max */

@


7.2
log
@Made bzero() and bcopy() defines for SYSV,
added added Convex
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 7.1 87/11/02 23:22:31 mike Locked $
d112 17
@


7.1
log
@Release 2.3
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 6.1 87/07/11 07:48:19 mike Rel $
d79 1
a79 1
 *  Cray-X/MP under COS		*
a88 6
/**
#define RES_INIT(ptr)		LOCKASGN(ptr);
#define RES_ACQUIRE(ptr)	LOCKON(ptr);
#define RES_RELEASE(ptr)	LOCKOFF(ptr);
**/

a90 3
/**buggy #define bzero(str,n)		memset( str, '\0', n ) ***/
#define bcopy(from,to,count)	memcpy( to, from, count )

d96 20
d147 8
@


6.1
log
@Release 2.0
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 5.1 87/06/24 21:47:15 mike Rel $
@


5.1
log
@Release 1.24
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 4.2 87/02/12 22:00:20 mike Exp $
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 4.1 86/12/29 02:45:59 mike Rel1 $
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.11 86/12/13 05:51:33 mike Exp $
@


1.11
log
@Changed Cray parallel defines,
Added machine epsilon constants.
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.10 86/10/29 00:24:02 mike Locked $
@


1.10
log
@MAX_PSW cleanup
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.9 86/10/28 23:01:21 mike Locked $
d26 1
d28 1
d30 6
a35 3
/*
 *  Denelcor HEP H-1000
 */
d47 1
d53 6
a58 3
/*
 *  Alliant FX/8
 */
d77 6
a82 4
/*
 *  Cray-X/MP under COS, on Cray-2 under "UNICOS"
 *  To date, only on 1 processor.
 */
d89 1
a89 6
#ifndef PARALLEL
#define RES_INIT(ptr)		;
#define RES_ACQUIRE(ptr)	;
#define RES_RELEASE(ptr)	;
#else
/* Cray multi-tasking routines */
d93 2
a94 1
#endif
d106 6
a111 3
/*
 * Default 32-bit uniprocessor configuration:  VAX, Gould, SUN
 */
d126 10
@


1.9
log
@Added MAX_PSW defines
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.8 86/10/12 02:59:33 mike Locked $
d60 1
d62 1
d111 2
a113 1
#define MAX_PSW	1		/* only one processor, max */
@


1.8
log
@Changed Alliant defs
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.7 86/10/11 00:14:36 mike Locked $
d41 1
d60 1
d86 1
d110 1
a110 1

@


1.7
log
@Added PARALLEL define to Alliant case
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.6 86/09/23 14:52:12 mike Locked $
d53 1
a53 1
#define BITV_SHIFT	6	/* log2( bits_wide(bitv_t) ) */
d55 1
a55 6

#ifndef PARALLEL
#define RES_INIT(ptr)		;
#define RES_ACQUIRE(ptr)	;
#define RES_RELEASE(ptr)	;
#else
a58 1
#endif
@


1.6
log
@Cray parallelism defines
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.5 86/08/08 06:24:22 mike Exp $
d55 7
d64 1
@


1.5
log
@COS memset() is buggy.
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.4 86/08/06 19:50:22 mike Exp $
d38 1
d72 2
d76 6
d86 1
a86 1
#define CRAY_COS	1	/* Running on Cray under COS w/bugs */
d101 1
@


1.4
log
@Moved Cray definitions for bzero & bcopy inline

@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.3 86/07/17 18:16:07 mike Exp $
d74 1
a74 1
#define bzero(str,n)		memset( str, '\0', n )
@


1.3
log
@Includes better parameterization
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.2 86/07/11 01:30:03 mike Exp $
d40 1
d43 1
d56 1
d59 1
d73 6
d81 1
d95 1
@


1.2
log
@Minor cleanups inspired by the Cray
@
text
@d16 1
a16 1
 *  $Header: machine.h,v 1.1 85/10/26 01:31:02 mike Exp $
d22 6
d29 1
a29 1
 *  Machine specific definitions, for maximum speed.
a30 1
#ifdef HEP
d36 10
a45 2
#else
/* VAX, Gould */
d47 29
d80 3
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
 *  $Header$
d19 3
d48 2
@
