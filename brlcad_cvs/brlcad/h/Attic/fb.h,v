head	11.12;
access;
symbols
	ansi-20040405-merged:11.9.2.1
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.9
	premerge-autoconf:11.9
	ansi-20040316-freeze:11.9.2.1
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.9
	autoconf-20031203:11.9
	autoconf-20031202:11.9
	autoconf-branch:11.9.0.10
	phong-branch:11.9.0.8
	photonmap-branch:11.9.0.6
	rel-6-1-DP:11.9
	windows-branch:11.9.0.4
	rel-6-0-2:11.7
	ansi-branch:11.9.0.2
	rel-6-0-1-branch:11.7.0.2
	hartley-6-0-post:11.8
	hartley-6-0-pre:11.7
	rel-6-0-1:11.7
	rel-6-0:11.7
	rel-5-4:11.3
	offsite-5-3-pre:11.6
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.3
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.12
date	2004.05.24.04.11.52;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2004.04.07.19.56.44;	author morrison;	state Exp;
branches;
next	11.10;

11.10
date	2004.04.05.09.31.17;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2002.08.20.17.07.29;	author jra;	state Exp;
branches
	11.9.2.1;
next	11.8;

11.8
date	2002.08.15.20.54.42;	author hartley;	state Exp;
branches;
next	11.7;

11.7
date	2001.04.05.19.35.06;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2000.10.24.15.17.08;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	2000.07.12.03.40.24;	author cjohnson;	state Exp;
branches;
next	11.4;

11.4
date	2000.07.12.03.25.42;	author cjohnson;	state Exp;
branches;
next	11.3;

11.3
date	2000.04.20.21.20.07;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	98.06.27.04.29.02;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.48.22;	author mike;	state Rel4_4;
branches;
next	10.10;

10.10
date	94.11.05.04.51.15;	author mike;	state Exp;
branches;
next	10.9;

10.9
date	94.08.25.14.53.08;	author gdurf;	state Exp;
branches;
next	10.8;

10.8
date	93.09.25.09.12.29;	author mike;	state Exp;
branches;
next	10.7;

10.7
date	93.09.25.08.10.45;	author mike;	state Exp;
branches;
next	10.6;

10.6
date	93.09.25.05.45.40;	author mike;	state Exp;
branches;
next	10.5;

10.5
date	93.08.16.13.54.48;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	93.07.20.22.43.49;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	93.07.20.16.03.55;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	93.04.01.03.26.20;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.35.20;	author mike;	state Rel4_0;
branches;
next	9.6;

9.6
date	91.07.26.22.38.04;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	90.12.11.22.12.44;	author phil;	state Exp;
branches;
next	9.4;

9.4
date	90.11.07.15.07.57;	author phil;	state Exp;
branches;
next	9.3;

9.3
date	90.11.07.13.41.29;	author phil;	state Exp;
branches;
next	9.2;

9.2
date	89.09.01.01.18.25;	author phil;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.05.44.06;	author mike;	state Rel3_5;
branches;
next	8.4;

8.4
date	89.05.13.04.10.22;	author phil;	state Exp;
branches;
next	8.3;

8.3
date	89.03.03.06.42.35;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	89.01.19.19.48.40;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.23.36;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.09.09.23.58.13;	author phil;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.22.28;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.48.16;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.21.47.12;	author mike;	state Rel;
branches;
next	4.3;

4.3
date	87.02.12.22.00.18;	author mike;	state Exp;
branches;
next	4.2;

4.2
date	87.02.11.03.52.24;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.02.45.55;	author mike;	state Rel1;
branches;
next	1.9;

1.9
date	86.11.18.10.52.11;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	86.11.14.04.36.51;	author phil;	state Exp;
branches;
next	1.7;

1.7
date	86.10.30.01.04.50;	author phil;	state Exp;
branches;
next	1.6;

1.6
date	86.10.29.02.52.44;	author phil;	state Exp;
branches;
next	1.5;

1.5
date	86.10.25.10.37.32;	author phil;	state Exp;
branches;
next	1.4;

1.4
date	86.10.24.01.41.08;	author phil;	state Exp;
branches;
next	1.3;

1.3
date	86.10.22.23.44.36;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.10.02.02.19.27;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.10.02.00.02.28;	author mike;	state Exp;
branches;
next	;

11.9.2.1
date	2002.09.19.18.00.57;	author morrison;	state Exp;
branches;
next	;


desc
@BRL generic framebuffer library header file
@


11.12
log
@moved/renamed from top-level h/ to top-level include/
@
text
@/*
 *			F B . H
 *
 *  BRL "Generic" Framebuffer Library Interface Defines.
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Status -
 *	Public Domain, Distribution Unlimited
 *
 *  Include Sequencing -
 *	#include <stdio.h>
 *	#include "machine.h"
 *	#include "fb.h"
 *
 *  Libraries Used -
 *	LIBFB LIBFB_LIBES -lc
 *
 *  $Header: /n/xoff/cvs/brlcad/h/fb.h,v 11.11 2004/04/07 19:56:44 morrison Exp $
 */

#ifndef FB_H
#define FB_H seen

/*
 *			R G B p i x e l
 *
 *  Format of disk pixels in .pix files.
 *  Formerly used as arguments to many of the library routines,
 *  but has fallen into disuse due to the difficulties with
 *  ANSI function prototypes, and the fact that arrays are not
 *  real types in C.  The most notable problem is that of passing
 *  a pointer to an array of RGBpixel.  It looks doubly dimensioned,
 *  but isn't.
 */
typedef unsigned char RGBpixel[3];

#define	RED	0
#define	GRN	1
#define	BLU	2

/*
 *			C o l o r M a p
 *
 *  These generic color maps have up to 16 bits of significance,
 *  left-justified in a short.  Think of this as fixed-point values
 *  from 0 to 1.
 */
typedef struct  {
	unsigned short cm_red[256];
	unsigned short cm_green[256];
	unsigned short cm_blue[256];
} ColorMap;

#ifdef USE_PROTOTYPES
#	define	FB_ARGS(args)			args
#else
#	define	FB_ARGS(args)			()
#endif

/*
 *			F B I O
 *
 *  A frame-buffer IO structure.
 *  One of these is allocated for each active framebuffer.
 *  A pointer to this structure is the first argument to all
 *  the library routines.
 */
typedef struct FBIO_ {
	long	if_magic;
	/* Static information: per device TYPE.	*/
	int	(*if_open)FB_ARGS((struct FBIO_ *ifp, char *file, int width, int height));		/* open device		*/
	int	(*if_close)FB_ARGS((struct FBIO_ *ifp));				/* close device		*/
	int	(*if_clear)FB_ARGS((struct FBIO_ *ifp, unsigned char *pp));		/* clear device 	*/
	int	(*if_read)FB_ARGS((struct FBIO_ *ifp, int x, int y, unsigned char *pp, int count));		/* read pixels		*/
	int	(*if_write)FB_ARGS((struct FBIO_ *ifp, int x, int y, const unsigned char *pp, int count));	/* write pixels		*/
	int	(*if_rmap)FB_ARGS((struct FBIO_ *ifp, ColorMap *cmap));		/* read colormap 	*/
	int	(*if_wmap)FB_ARGS((struct FBIO_ *ifp, const ColorMap *cmap));		/* write colormap 	*/
	int	(*if_view)FB_ARGS((struct FBIO_ *ifp, int xcent, int ycent, int xzoom, int yzoom));		/* set view		*/
	int	(*if_getview)FB_ARGS((struct FBIO_ *ifp, int *xcent, int *ycent, int *xzoom, int *yzoom));	/* get view		*/
	int	(*if_setcursor)FB_ARGS((struct FBIO_ *ifp, const unsigned char *bits, int xb, int yb, int xo, int yo));	/* define cursor 	*/
	int	(*if_cursor)FB_ARGS((struct FBIO_ *ifp, int mode, int x, int y));		/* set cursor		*/
	int	(*if_getcursor)FB_ARGS((struct FBIO_ *ifp, int *mode, int *x, int *y));	/* get cursor		*/
	int	(*if_readrect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, unsigned char *pp));	/* read rectangle 	*/
	int	(*if_writerect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, const unsigned char *pp));	/* write rectangle 	*/
	int	(*if_bwreadrect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, unsigned char *pp));	/* read monochrome rectangle 	*/
	int	(*if_bwwriterect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, const unsigned char *pp));	/* write rectangle 	*/
	int	(*if_poll)FB_ARGS((struct FBIO_ *ifp));		/* handle events 	*/
	int	(*if_flush)FB_ARGS((struct FBIO_ *ifp));	/* flush output 	*/
	int	(*if_free)FB_ARGS((struct FBIO_ *ifp));		/* free resources 	*/
	int	(*if_help)FB_ARGS((struct FBIO_ *ifp));		/* print useful info	*/
	char	*if_type;		/* what "open" calls it	*/
	int	if_max_width;		/* max device width	*/
	int	if_max_height;		/* max device height	*/
	/* Dynamic information: per device INSTANCE. */
	char	*if_name;	/* what the user called it */
	int	if_width;	/* current values */
	int	if_height;
	int	if_selfd;	/* select(fd) for input events if >= 0 */
	/* Internal information: needed by the library.	*/
	int	if_fd;		/* internal file descriptor */
	int	if_xzoom;	/* zoom factors */
	int	if_yzoom;
	int	if_xcenter;	/* pan position */
	int	if_ycenter;
	int	if_cursmode;	/* cursor on/off */
	int	if_xcurs;	/* cursor position */
	int	if_ycurs;
	unsigned char *if_pbase;/* Address of malloc()ed page buffer.	*/
	unsigned char *if_pcurp;/* Current pointer into page buffer.	*/
	unsigned char *if_pendp;/* End of page buffer.			*/
	int	if_pno;		/* Current "page" in memory.		*/
	int	if_pdirty;	/* Page modified flag.			*/
	long	if_pixcur;	/* Current pixel number in framebuffer. */
	long	if_ppixels;	/* Sizeof page buffer (pixels).		*/
	int	if_debug;	/* Buffered IO debug flag.		*/
	/* State variables for individual interface modules */
	union	{
		char	*p;
		long	l;
	} u1, u2, u3, u4, u5, u6;
} FBIO;

#define FB_MAGIC	0xfbfb00fb

#define PIXEL_NULL	(unsigned char *) 0
#define RGBPIXEL_NULL	(unsigned char *) 0
#define COLORMAP_NULL	(ColorMap *) 0
#define FBIO_NULL	(FBIO *) 0

/* Library entry points which are macros. */
#define fb_gettype(_ifp)		(_ifp->if_type)
#define fb_getwidth(_ifp)		(_ifp->if_width)
#define fb_getheight(_ifp)		(_ifp->if_height)
#define fb_poll(_ifp)			(*_ifp->if_poll)(_ifp)
#define fb_help(_ifp)			(*_ifp->if_help)(_ifp)
#define fb_free(_ifp)			(*_ifp->if_free)(_ifp)
#define fb_clear(_ifp,_pp)		(*_ifp->if_clear)(_ifp,_pp)
#define fb_read(_ifp,_x,_y,_pp,_ct)	(*_ifp->if_read)(_ifp,_x,_y,_pp,_ct)
#define fb_write(_ifp,_x,_y,_pp,_ct)	(*_ifp->if_write)(_ifp,_x,_y,_pp,_ct)
#define fb_rmap(_ifp,_cmap)		(*_ifp->if_rmap)(_ifp,_cmap)
#define fb_wmap(_ifp,_cmap)		(*_ifp->if_wmap)(_ifp,_cmap)
#define fb_view(_ifp,_xc,_yc,_xz,_yz)	(*_ifp->if_view)(_ifp,_xc,_yc,_xz,_yz)
#define fb_getview(_ifp,_xcp,_ycp,_xzp,_yzp) \
		(*_ifp->if_getview)(_ifp,_xcp,_ycp,_xzp,_yzp)
#define fb_setcursor(_ifp,_bits,_xb,_yb,_xo,_yo) \
		(*_ifp->if_setcursor)(_ifp,_bits,_xb,_yb,_xo,_yo)
#define fb_cursor(_ifp,_mode,_x,_y)	(*_ifp->if_cursor)(_ifp,_mode,_x,_y)
#define fb_getcursor(_ifp,_modep,_xp,_yp) \
		(*_ifp->if_getcursor)(_ifp,_modep,_xp,_yp)
#define fb_readrect(_ifp,_xmin,_ymin,_width,_height,_pp) \
		(*_ifp->if_readrect)(_ifp,_xmin,_ymin,_width,_height,_pp)
#define fb_writerect(_ifp,_xmin,_ymin,_width,_height,_pp) \
		(*_ifp->if_writerect)(_ifp,_xmin,_ymin,_width,_height,_pp)
#define fb_bwreadrect(_ifp,_xmin,_ymin,_width,_height,_pp) \
		(*_ifp->if_bwreadrect)(_ifp,_xmin,_ymin,_width,_height,_pp)
#define fb_bwwriterect(_ifp,_xmin,_ymin,_width,_height,_pp) \
		(*_ifp->if_bwwriterect)(_ifp,_xmin,_ymin,_width,_height,_pp)

/* Library entry points which are true functions. */
#ifdef USE_PROTOTYPES
extern void 	fb_configureWindow(FBIO *, int, int);
extern FBIO	*fb_open(char *file, int width, int height);
extern int	fb_close(FBIO *ifp);
extern int	fb_genhelp(void);
extern int	fb_ioinit(FBIO *ifp);
extern int	fb_seek(FBIO *ifp, int x, int y);
extern int	fb_tell(FBIO *ifp, int *xp, int *yp);
extern int	fb_rpixel(FBIO *ifp, unsigned char *pp);
extern int	fb_wpixel(FBIO *ifp, unsigned char *pp);
extern int	fb_flush(FBIO *ifp);
extern void	fb_log(char *fmt, ...);
extern int	fb_null(FBIO *ifp);
extern int	fb_null_setcursor(FBIO *ifp, const unsigned char *bits, int xbits, int ybits, int xorig, int yorig);

/* utility functions */
extern int	fb_common_file_size(int *w, int *h, char *file, int psize);
extern int	fb_common_image_size(int *w, int *h, int npixels);
extern int	fb_is_linear_cmap(const ColorMap *cmap);
extern void	fb_make_linear_cmap(ColorMap *cmap);
/* backward compatibility hacks */
extern int	fb_reset(FBIO *ifp);
extern int	fb_viewport(FBIO *ifp, int left, int top, int right, int bottom);
extern int	fb_window(FBIO *ifp, int xcenter, int ycenter);
extern int	fb_zoom(FBIO *ifp, int xzoom, int yzoom);
extern int	fb_scursor(FBIO *ifp, int mode, int x, int y);

/*
 * Some functions and variables we couldn't hide.
 * Not for general consumption.
 */
extern int	_fb_pgin();
extern int	_fb_pgout();
extern int	_fb_pgflush();
extern int	_fb_disk_enable;
extern int	fb_sim_readrect(FBIO *ifp, int xmin, int ymin, int width, int height, unsigned char *pp);
extern int	fb_sim_writerect(FBIO *ifp, int xmin, int ymin, int width, int height, const unsigned char *pp);
extern int	fb_sim_bwreadrect(FBIO *ifp, int xmin, int ymin, int width, int height, unsigned char *pp);
extern int	fb_sim_bwwriterect(FBIO *ifp, int xmin, int ymin, int width, int height, const unsigned char *pp);
extern int	fb_sim_view(FBIO *ifp, int xcenter, int ycenter, int xzoom, int yzoom);
extern int	fb_sim_getview(FBIO *ifp, int *xcenter, int *ycenter, int *xzoom, int *yzoom);
extern int	fb_sim_cursor(FBIO *ifp, int mode, int x, int y);
extern int	fb_sim_getcursor(FBIO *ifp, int *mode, int *x, int *y);
#else
extern FBIO	*fb_open();
extern int	fb_close();
extern int	fb_genhelp();
extern int	fb_ioinit();
extern int	fb_seek();
extern int	fb_tell();
extern int	fb_rpixel();
extern int	fb_wpixel();
extern int	fb_flush();
extern void	fb_log();
extern int	fb_null();
extern int	fb_null_setcursor();
/* utility functions */
extern int	fb_common_file_size();
extern int	fb_common_image_size();
extern int	fb_is_linear_cmap();
extern void	fb_make_linear_cmap();
/* backward compatibility hacks */
extern int	fb_reset();
extern int	fb_viewport();
extern int	fb_window();
extern int	fb_zoom();
extern int	fb_scursor();

/*
 * Some functions and variables we couldn't hide.
 * Not for general consumption.
 */
extern int	_fb_pgin();
extern int	_fb_pgout();
extern int	_fb_pgflush();
extern int	_fb_disk_enable;
extern int	fb_sim_readrect();
extern int	fb_sim_writerect();
extern int	fb_sim_bwreadrect();
extern int	fb_sim_bwwriterect();
extern int	fb_sim_view();
extern int	fb_sim_getview();
extern int	fb_sim_cursor();
extern int	fb_sim_getcursor();
#endif

/*
 * Copy one RGB pixel to another.
 */
#define	COPYRGB(to,from) { (to)[RED]=(from)[RED];\
			   (to)[GRN]=(from)[GRN];\
			   (to)[BLU]=(from)[BLU]; }

/*
 * A fast inline version of fb_wpixel.  This one does NOT check for errors,
 *  nor "return" a value.  For reasons of C syntax it needs the basename
 *  of an RGBpixel rather than a pointer to one.
 */
#define	FB_WPIXEL(ifp,pp) {if((ifp)->if_pno==-1)_fb_pgin((ifp),(ifp)->if_pixcur/(ifp)->if_ppixels);\
	(*((ifp)->if_pcurp+0))=(pp)[0];(*((ifp)->if_pcurp+1))=(pp)[1];(*((ifp)->if_pcurp+2))=(pp)[2];\
	(ifp)->if_pcurp+=3;(ifp)->if_pixcur++;(ifp)->if_pdirty=1;\
	if((ifp)->if_pcurp>=(ifp)->if_pendp){_fb_pgout((ifp));(ifp)->if_pno= -1;}}

/* Debug Bitvector Definition */
#define	FB_DEBUG_BIO	1	/* Buffered io calls (less r/wpixel) */
#define	FB_DEBUG_CMAP	2	/* Contents of colormaps */
#define	FB_DEBUG_RW	4	/* Contents of reads and writes */
#define	FB_DEBUG_BRW	8	/* Buffered IO rpixel and wpixel */

#define FB_CKMAG(_ptr, _magic, _str)	\
	if( !(_ptr) )  { \
		fb_log("ERROR: null %s ptr, file %s, line %d\n", \
			_str, __FILE__, __LINE__ ); \
		abort(); \
	} else if( *((long *)(_ptr)) != (_magic) )  { \
		fb_log("ERROR: bad %s ptr x%x, s/b x%x, was x%x, file %s, line %d\n", \
			_str, _ptr, _magic, \
			*((long *)(_ptr)), __FILE__, __LINE__ ); \
		abort(); \
	}
#define FB_CK_FBIO(_p)	FB_CKMAG(_p, FB_MAGIC, "FBIO" )

/* tcl.c */
/* The presence of Tcl_Interp as an arg prevents giving arg list */
extern void fb_tcl_setup();
extern int Fb_Init();

/* vers.c (created by libfb/Cakefile) */
extern char fb_version[];

#endif /* FB_H */
@


11.11
log
@simplify away NULL since null is not necessarily just zero
@
text
@d22 1
a22 1
 *  $Header$
@


11.10
log
@merge of ansi-6-0-branch into HEAD
@
text
@a128 6
#ifdef NULL
#define PIXEL_NULL	(unsigned char *) NULL
#define RGBPIXEL_NULL	(unsigned char *) NULL
#define COLORMAP_NULL	(ColorMap *) NULL
#define FBIO_NULL	(FBIO *) NULL
#else
a132 1
#endif
@


11.9
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d22 1
a22 1
 *  $Header: /c/CVS/brlcad/h/fb.h,v 11.7 2001/04/05 19:35:06 morrison Exp $
d79 1
a79 1
	int	(*if_write)FB_ARGS((struct FBIO_ *ifp, int x, int y, const unsigned char *pp, int count));		/* write pixels		*/
@


11.9.2.1
log
@Initial ANSIfication
@
text
@d22 1
a22 1
 *  $Header: /c/CVS/brlcad/h/fb.h,v 11.9 2002/08/20 17:07:29 jra Exp $
d79 1
a79 1
	int	(*if_write)FB_ARGS((struct FBIO_ *ifp, int x, int y, const unsigned char *pp, int count));	/* write pixels		*/
@


11.8
log
@Converted from K&R to ANSI C - RFH
@
text
@d79 1
a79 1
	int	(*if_write)FB_ARGS((struct FBIO_ *ifp, int x, int y, const unsigned char *pp, int count));	/* write pixels		*/
@


11.7
log
@updated SIGNED to signed
updated CONST to const
@
text
@d22 1
a22 1
 *  $Header: /c/CVS/brlcad/h/fb.h,v 11.6 2000/10/24 15:17:08 mike Exp $
d79 1
a79 1
	int	(*if_write)FB_ARGS((struct FBIO_ *ifp, int x, int y, const unsigned char *pp, int count));		/* write pixels		*/
@


11.6
log
@
Added externs for Fb_Init() Tcl interface
@
text
@d22 1
a22 1
 *  $Header: /c/CVS/brlcad/h/fb.h,v 11.5 2000/07/12 03:40:24 cjohnson Exp $
d79 1
a79 1
	int	(*if_write)FB_ARGS((struct FBIO_ *ifp, int x, int y, CONST unsigned char *pp, int count));		/* write pixels		*/
d81 1
a81 1
	int	(*if_wmap)FB_ARGS((struct FBIO_ *ifp, CONST ColorMap *cmap));		/* write colormap 	*/
d84 1
a84 1
	int	(*if_setcursor)FB_ARGS((struct FBIO_ *ifp, CONST unsigned char *bits, int xb, int yb, int xo, int yo));	/* define cursor 	*/
d88 1
a88 1
	int	(*if_writerect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, CONST unsigned char *pp));	/* write rectangle 	*/
d90 1
a90 1
	int	(*if_bwwriterect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, CONST unsigned char *pp));	/* write rectangle 	*/
d184 1
a184 1
extern int	fb_null_setcursor(FBIO *ifp, CONST unsigned char *bits, int xbits, int ybits, int xorig, int yorig);
d189 1
a189 1
extern int	fb_is_linear_cmap(CONST ColorMap *cmap);
d207 1
a207 1
extern int	fb_sim_writerect(FBIO *ifp, int xmin, int ymin, int width, int height, CONST unsigned char *pp);
d209 1
a209 1
extern int	fb_sim_bwwriterect(FBIO *ifp, int xmin, int ymin, int width, int height, CONST unsigned char *pp);
@


11.5
log
@Luser error.  void != int
@
text
@d22 1
a22 1
 *  $Header: /c/CVS/brlcad/h/fb.h,v 11.4 2000/07/12 03:25:42 cjohnson Exp $
d292 5
@


11.4
log
@LINT from gcc -Wall.  These are to support clean up of libdm.
@
text
@d22 1
a22 1
 *  $Header: /c/CVS/brlcad/h/fb.h,v 11.3 2000/04/20 21:20:07 bparker Exp $
d172 1
a172 1
extern int 	fb_configureWindow(FBIO *, int, int);
@


11.3
log
@*- declare variable to hold package version
@
text
@d22 1
a22 1
 *  $Header: /c/CVS/brlcad/h/fb.h,v 11.2 1998/06/27 04:29:02 mike Exp $
d172 1
@


11.2
log
@Additions to LIBFB interface and remote framebuffer protocol to
read and write monochrome rectangles.
Particularly important for sending thermal images at high speed.
@
text
@d22 1
a22 1
 *  $Header: /c/CVS/brlcad/h/fb.h,v 11.1 1995/01/04 09:48:22 mike Rel4_4 $
d291 3
@


11.1
log
@Release_4.4
@
text
@d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.10 94/11/05 04:51:15 mike Exp $
d89 2
d165 4
d206 3
a208 1
extern int	fb_sim_writerect(FBIO *ifp, int	xmin, int ymin, int width, int height, CONST unsigned char *pp);
d248 2
@


10.10
log
@Magic must always be long
@
text
@d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.9 94/08/25 14:53:08 gdurf Exp Locker: mike $
@


10.9
log
@Factored ifdefs, removed superfluous include
@
text
@d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.8 1993/09/25 09:12:29 mike Exp gdurf $
d73 1
a73 1
	int	if_magic;
@


10.8
log
@Added more CONSTs
@
text
@d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.7 93/09/25 08:10:45 mike Exp Locker: mike $
d25 2
a26 2
#ifndef INCL_FB
#define INCL_FB
a27 5
#ifndef MACHINE_H
/* For backwards compatability, include machine.h automatically */
# include "machine.h"
#endif

d58 1
a58 1
#if USE_PROTOTYPES
d165 1
a165 1
#if __STDC__
d282 1
a282 1
#endif /* INCL_FB */
@


10.7
log
@Added CONST to some function prototypes
@
text
@d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.6 93/09/25 05:45:40 mike Exp Locker: mike $
d89 1
a89 1
	int	(*if_setcursor)FB_ARGS((struct FBIO_ *ifp, unsigned char *bits, int xb, int yb, int xo, int yo));	/* define cursor 	*/
d182 1
a182 1
extern int	fb_null_setcursor(FBIO *ifp, unsigned char *bits, int xbits, int ybits, int xorig, int yorig);
d187 1
a187 1
extern int	fb_is_linear_cmap(ColorMap *cmap);
@


10.6
log
@Changed args to functions from RGBpixel to (unsigned char *),
for simplicity in porting to ANSI C compilers with function prototypes.
@
text
@d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.5 93/08/16 13:54:48 mike Exp Locker: mike $
d84 1
a84 1
	int	(*if_write)FB_ARGS((struct FBIO_ *ifp, int x, int y, unsigned char *pp, int count));		/* write pixels		*/
d86 1
a86 1
	int	(*if_wmap)FB_ARGS((struct FBIO_ *ifp, ColorMap *cmap));		/* write colormap 	*/
d93 1
a93 1
	int	(*if_writerect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, unsigned char *pp));	/* write rectangle 	*/
d205 1
a205 1
extern int	fb_sim_writerect(FBIO *ifp, int	xmin, int ymin, int width, int height, unsigned char *pp);
@


10.5
log
@Changed fb_clear to be RGBpixel, rather than RGBpixel *
@
text
@d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.4 93/07/20 22:43:49 mike Exp Locker: mike $
d37 6
a42 1
 *  Also used as arguments to many of the library routines.
d82 3
a84 3
	int	(*if_clear)FB_ARGS((struct FBIO_ *ifp, RGBpixel pp));		/* clear device 	*/
	int	(*if_read)FB_ARGS((struct FBIO_ *ifp, int x, int y, RGBpixel *pp, int count));		/* read pixels		*/
	int	(*if_write)FB_ARGS((struct FBIO_ *ifp, int x, int y, RGBpixel *pp, int count));		/* write pixels		*/
d92 2
a93 2
	int	(*if_readrect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, RGBpixel *pp));	/* read rectangle 	*/
	int	(*if_writerect)FB_ARGS((struct FBIO_ *ifp, int xmin, int ymin, int width, int height, RGBpixel *pp));	/* write rectangle 	*/
d115 3
a117 3
	RGBpixel *if_pbase;/* Address of malloc()ed page buffer.	*/
	RGBpixel *if_pcurp;/* Current pointer into page buffer.	*/
	RGBpixel *if_pendp;/* End of page buffer.			*/
d133 2
a134 2
#define PIXEL_NULL	(RGBpixel *) NULL
#define RGBPIXEL_NULL	(RGBpixel *) NULL
d138 2
a139 2
#define PIXEL_NULL	(RGBpixel *) 0
#define RGBPIXEL_NULL	(RGBpixel *) 0
d177 2
a178 2
extern int	fb_rpixel(FBIO *ifp, RGBpixel *pp);
extern int	fb_wpixel(FBIO *ifp, RGBpixel *pp);
d204 2
a205 2
extern int	fb_sim_readrect(FBIO *ifp, int xmin, int ymin, int width, int height, RGBpixel *pp);
extern int	fb_sim_writerect(FBIO *ifp, int	xmin, int ymin, int width, int height, RGBpixel *pp);
d264 2
a265 2
	(*((ifp)->if_pcurp))[0]=(pp)[0];(*((ifp)->if_pcurp))[1]=(pp)[1];(*((ifp)->if_pcurp))[2]=(pp)[2];\
	(ifp)->if_pcurp++;(ifp)->if_pixcur++;(ifp)->if_pdirty=1;\
@


10.4
log
@Added ANSI arg declarations.
Added fb_null_setcursor().
@
text
@d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.3 93/07/20 16:03:55 mike Exp Locker: mike $
d77 1
a77 1
	int	(*if_clear)FB_ARGS((struct FBIO_ *ifp, RGBpixel *pp));		/* clear device 	*/
@


10.3
log
@Added ANSI declarations for the sim functions.
@
text
@d16 1
d22 1
a22 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.2 93/04/01 03:26:20 mike Exp Locker: mike $
d28 5
d58 6
d72 1
a72 1
typedef struct  {
d75 18
a92 18
	int	(*if_open)();		/* open device		*/
	int	(*if_close)();		/* close device		*/
	int	(*if_clear)();		/* clear device 	*/
	int	(*if_read)();		/* read pixels		*/
	int	(*if_write)();		/* write pixels		*/
	int	(*if_rmap)();		/* read colormap 	*/
	int	(*if_wmap)();		/* write colormap 	*/
	int	(*if_view)();		/* set view		*/
	int	(*if_getview)();	/* get view		*/
	int	(*if_setcursor)();	/* define cursor 	*/
	int	(*if_cursor)();		/* set cursor		*/
	int	(*if_getcursor)();	/* get cursor		*/
	int	(*if_readrect)();	/* read rectangle 	*/
	int	(*if_writerect)();	/* write rectangle 	*/
	int	(*if_poll)();		/* handle events 	*/
	int	(*if_flush)();		/* flush output 	*/
	int	(*if_free)();		/* free resources 	*/
	int	(*if_help)();		/* print useful info	*/
d110 3
a112 3
	RGBpixel *if_pbase;	/* Address of malloc()ed page buffer.	*/
	RGBpixel *if_pcurp;	/* Current pointer into page buffer.	*/
	RGBpixel *if_pendp;	/* End of page buffer.			*/
d176 3
a178 1
extern int	fb_null(void);
d217 1
@


10.2
log
@Added #include sequencing
@
text
@d21 1
a21 1
 *  $Header: /m/cad/h/RCS/fb.h,v 10.1 91/10/12 06:35:20 mike Rel4_0 Locker: mike $
d176 15
a213 1
#endif
d229 1
@


10.1
log
@Release_4.0
@
text
@d14 8
a21 1
 *  $Header: /m/cad/h/RCS/fb.h,v 9.6 91/07/26 22:38:04 mike Exp $
@


9.6
log
@Added magic number to FBIO
@
text
@d14 1
a14 1
 *  $Header: /m/cad/h/RCS/fb.h,v 9.5 90/12/11 22:12:44 phil Exp $
@


9.5
log
@Added more global state variables (XY zoom, center, cursor etc.)
Rolled fb_window() and fb_zoom() into fb_view().  Added fb_getview()
and fb_getcursor() routines.  Removed fb_reset(), fb_viewport() and
fb_scursor().  Added dummy functions for backward compatability.
New fb_poll() function of if_selfd for event handling.
@
text
@d14 1
a14 1
 *  $Header: /m/cad/h/RCS/fb.h,v 9.4 90/11/07 15:07:57 phil Exp $
d54 1
d106 2
d231 13
@


9.4
log
@Added autosizing function definitions.
@
text
@d14 1
a14 1
 *  $Header: /m/cad/h/RCS/fb.h,v 9.3 90/11/07 13:41:29 phil Exp $
d55 21
a75 22
	int	(*if_open)();
	int	(*if_close)();
	int	(*if_reset)();
	int	(*if_clear)();
	int	(*if_read)();
	int	(*if_write)();
	int	(*if_rmap)();
	int	(*if_wmap)();
	int	(*if_viewport)();
	int	(*if_window)();
	int	(*if_zoom)();
	int	(*if_setcursor)();
	int	(*if_cursor)();
	int	(*if_scursor)();
	int	(*if_readrect)();
	int	(*if_writerect)();
	int	(*if_flush)();
	int	(*if_free)();
	int	(*if_help)();	/* prints useful information */
	char	*if_type;	/* what "open" claims it is. */
	int	if_max_width;
	int	if_max_height;
d80 1
d82 8
a89 1
	int	if_fd;
d121 1
a122 1
#define fb_reset(_ifp)			(*_ifp->if_reset)(_ifp)
d129 5
a133 4
#define	fb_viewport(_ifp,_l,_t,_r,_b)	(*_ifp->if_viewport)(_ifp,_l,_t,_r,_b)
#define fb_window(_ifp,_x,_y)		(*_ifp->if_window)(_ifp,_x,_y)
#define fb_zoom(_ifp,_x,_y)		(*_ifp->if_zoom)(_ifp,_x,_y)
#define fb_setcursor(_ifp,_bits,_xb,_yb,_xo,_yo) (*_ifp->if_setcursor)(_ifp,_bits,_xb,_yb,_xo,_yo)
d135 2
a136 1
#define fb_scursor(_ifp,_mode,_x,_y)	(*_ifp->if_scursor)(_ifp,_mode,_x,_y)
d160 6
d183 6
d201 4
@


9.3
log
@Added linear_cmap() routines to function definitions
Changed _disk_enable to _fb_disk_enable.
@
text
@d14 1
a14 1
 *  $Header: /m/cad/h/RCS/fb.h,v 9.2 89/09/01 01:18:25 phil Exp $
d146 5
d163 5
a179 2
extern int	fb_is_linear_cmap();
extern void	fb_make_linear_cmap();
@


9.2
log
@Added a device specific if_flush and if_free.  Pulled the internal
fb_sim_readrect/fb_sim_writerect definitions up to here.  New
_fb_pgflush internal routine.  The names have been changed to
protect the innocent.
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 9.1 89/05/19 05:44:06 phil Locked $
d167 1
a167 1
extern int	_disk_enable;
d170 2
@


9.1
log
@Release_3.5
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 8.4 89/05/13 04:10:22 phil Exp $
d55 14
a68 14
	int	(*if_dopen)();
	int	(*if_dclose)();
	int	(*if_dreset)();
	int	(*if_dclear)();
	int	(*if_bread)();
	int	(*if_bwrite)();
	int	(*if_cmread)();
	int	(*if_cmwrite)();
	int	(*if_viewport_set)();
	int	(*if_window_set)();
	int	(*if_zoom_set)();
	int	(*if_curs_set)();
	int	(*if_cmemory_addr)();
	int	(*if_cscreen_addr)();
d71 2
d110 1
a110 1
/* Library entry points which are macros.				*/
d115 13
a127 12
#define fb_reset(_ifp)			(*_ifp->if_dreset)(_ifp)
#define fb_clear(_ifp,_pp)		(*_ifp->if_dclear)(_ifp,_pp)
#define fb_read(_ifp,_x,_y,_pp,_ct)	(*_ifp->if_bread)(_ifp,_x,_y,_pp,_ct)
#define fb_write(_ifp,_x,_y,_pp,_ct)	(*_ifp->if_bwrite)(_ifp,_x,_y,_pp,_ct)
#define fb_rmap(_ifp,_cmap)		(*_ifp->if_cmread)(_ifp,_cmap)
#define fb_wmap(_ifp,_cmap)		(*_ifp->if_cmwrite)(_ifp,_cmap)
#define	fb_viewport(_ifp,_l,_t,_r,_b)	(*_ifp->if_viewport_set)(_ifp,_l,_t,_r,_b)
#define fb_window(_ifp,_x,_y)		(*_ifp->if_window_set)(_ifp,_x,_y)
#define fb_zoom(_ifp,_x,_y)		(*_ifp->if_zoom_set)(_ifp,_x,_y)
#define fb_setcursor(_ifp,_bits,_xb,_yb,_xo,_yo) (*_ifp->if_curs_set)(_ifp,_bits,_xb,_yb,_xo,_yo)
#define fb_cursor(_ifp,_mode,_x,_y)	(*_ifp->if_cmemory_addr)(_ifp,_mode,_x,_y)
#define fb_scursor(_ifp,_mode,_x,_y)	(*_ifp->if_cscreen_addr)(_ifp,_mode,_x,_y)
d133 1
a133 1
/* Library entry points which are true functions.			*/
d166 1
d168 2
@


8.4
log
@added __STDC__ prototypes
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 8.3 89/03/03 06:42:35 phil Locked $
@


8.3
log
@Added support for fb_writerect() and fb_readrect()
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 8.2 89/01/19 19:48:40 mike Locked $
d131 13
d155 1
@


8.2
log
@For ANSII C, made tokens after #endif into comments
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 8.1 88/10/05 00:23:36 mike Locked $
d69 2
d125 4
@


8.1
log
@Release_3.0
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 7.2 88/09/09 23:58:13 phil Exp $
a19 1
#ifdef OLD
a20 16
 *			P i x e l
 *
 *  Format of disk pixels in .fb files.
 *  Also used as arguments to many of the library routines.
 *  The similarity to Ikonas pixels is historical.
 *  The spare byte is unfortunate, but the struct would pad anyways.
 */
typedef struct  {
	unsigned char	red;
	unsigned char	green;
	unsigned char	blue;
	unsigned char	spare;
} Pixel;
#endif OLD

/*
d168 1
a168 1
#endif INCL_FB
@


7.2
log
@added fb_genhelp() and if_help functions
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 7.1 87/11/02 23:22:28 phil Locked $
@


7.1
log
@Release 2.3
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 6.1 87/07/11 07:48:16 mike Rel $
d86 1
d127 1
d144 1
@


6.1
log
@Release 2.0
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 5.1 87/06/24 21:47:12 mike Rel $
@


5.1
log
@Release 1.24
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 4.3 87/02/12 22:00:18 mike Exp $
@


4.3
log
@Release 1.20 -- First Formal Release
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 4.2 87/02/11 03:52:24 mike Exp $
@


4.2
log
@New externals with non-FLEXNAMES
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 4.1 86/12/29 02:45:55 mike Locked $
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.9 86/11/18 10:52:11 mike Exp $
d155 2
a156 2
extern int	_fb_pagein();
extern int	_fb_pageout();
d171 1
a171 1
#define	FB_WPIXEL(ifp,pp) {if((ifp)->if_pno==-1)_fb_pagein((ifp),(ifp)->if_pixcur/(ifp)->if_ppixels);\
d174 1
a174 1
	if((ifp)->if_pcurp>=(ifp)->if_pendp){_fb_pageout((ifp));(ifp)->if_pno= -1;}}
@


1.9
log
@Added additional state variables u3..u6
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.8 86/11/14 04:36:51 mike Locked $
@


1.8
log
@Changed setcursor function.
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.7 86/10/30 01:04:50 phil Locked $
d103 2
a104 1
	union	{		/* State variables for interface modules */
d107 1
a107 1
	} u1, u2;
@


1.7
log
@added FB_WPIXEL macro, plus externs on "internal" functions.
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.6 86/10/29 02:52:44 phil Locked $
d83 1
a83 1
	int	(*if_cinit_bitmap)();
d134 1
a134 1
#define fb_setcursor(_ifp,_bitmap)	(*_ifp->if_cinit_bitmap)(_ifp,_bitmap)
@


1.6
log
@removed pbytes, renamed pref -> pdirty, added debug bit vector.
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.5 86/10/25 10:37:32 phil Locked $
d150 11
d164 10
@


1.5
log
@RGBpixel conversion
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.4 86/10/24 01:41:08 phil Locked $
d99 1
a99 1
	int	if_pref;	/* Page "referenced" flag.		*/
a100 1
	long	if_pbytes;	/* Sizeof page buffer (bytes).		*/
d102 1
d141 6
d153 6
@


1.4
log
@Added local variables.
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.3 86/10/22 23:44:36 phil Locked $
d20 1
d35 1
d38 12
d95 3
a97 3
	Pixel	*if_pbase;	/* Address of malloc()ed page buffer.	*/
	Pixel	*if_pcurp;	/* Current pointer into page buffer.	*/
	Pixel	*if_pendp;	/* End of page buffer.			*/
d110 2
a111 1
#define PIXEL_NULL	(Pixel *) NULL
d115 2
a116 1
#define PIXEL_NULL	(Pixel *) 0
d143 4
@


1.3
log
@if_pcurpos -> if_pixcur, due to non-FLEXNAMES support
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.2 86/10/02 02:19:27 mike Locked $
d89 4
a120 1
#define fb_animate(_ifp,_n,_sz,_fps)	(*_ifp->if_animate)(_ifp,_n,_sz,_fps)
@


1.2
log
@Shortened names for non-flexnames systems
@
text
@d14 1
a14 1
 *  $Header: fb.h,v 1.1 86/10/02 00:02:28 mike Locked $
d86 1
a86 1
	long	if_pcurpos;	/* Current pixel number in framebuffer. */
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
 *  $Header$
d57 9
a65 9
	/* Static information: per device TYPE.				*/
	int	(*if_device_open)();
	int	(*if_device_close)();
	int	(*if_device_reset)();
	int	(*if_device_clear)();
	int	(*if_buffer_read)();
	int	(*if_buffer_write)();
	int	(*if_colormap_read)();
	int	(*if_colormap_write)();
d69 20
a88 21
	int	(*if_cursor_init_bitmap)();
	int	(*if_cursor_move_memory_addr)();
	int	(*if_cursor_move_screen_addr)();
	int	(*if_animate)();
	char	*if_device_type;	/* what "open" claims it is.	*/
	int	if_device_max_width;
	int	if_device_max_height;
	/* Dynamic information: per device INSTANCE.			*/
	char	*if_device_name;	/* what the user called it.	*/
	int	if_device_width;	/* current values.		*/
	int	if_device_height;
	/* Internal information: needed by the library.			*/
	int	if_device_fd;
	Pixel	*if_page_base;	/* Address of malloc()ed page buffer.	*/
	Pixel	*if_page_curp;	/* Current pointer into page buffer.	*/
	Pixel	*if_page_endp;	/* End of page buffer.			*/
	int	if_page_no;	/* Current "page" in memory.		*/
	int	if_page_ref;	/* Page "referenced" flag.		*/
	long	if_page_curpos;	/* Current pixel number in framebuffer. */
	long	if_page_bytes;	/* Sizeof page buffer (bytes).		*/
	long	if_page_pixels;	/* Sizeof page buffer (pixels).		*/
d102 9
a110 9
#define fb_gettype(_ifp)		(_ifp->if_device_type)
#define fb_getwidth(_ifp)		(_ifp->if_device_width)
#define fb_getheight(_ifp)		(_ifp->if_device_height)
#define fb_reset(_ifp)			(*_ifp->if_device_reset)(_ifp)
#define fb_clear(_ifp,_pp)		(*_ifp->if_device_clear)(_ifp,_pp)
#define fb_read(_ifp,_x,_y,_pp,_ct)	(*_ifp->if_buffer_read)(_ifp,_x,_y,_pp,_ct)
#define fb_write(_ifp,_x,_y,_pp,_ct)	(*_ifp->if_buffer_write)(_ifp,_x,_y,_pp,_ct)
#define fb_rmap(_ifp,_cmap)		(*_ifp->if_colormap_read)(_ifp,_cmap)
#define fb_wmap(_ifp,_cmap)		(*_ifp->if_colormap_write)(_ifp,_cmap)
d114 3
a116 3
#define fb_setcursor(_ifp,_bitmap)	(*_ifp->if_cursor_init_bitmap)(_ifp,_bitmap)
#define fb_cursor(_ifp,_mode,_x,_y)	(*_ifp->if_cursor_move_memory_addr)(_ifp,_mode,_x,_y)
#define fb_scursor(_ifp,_mode,_x,_y)	(*_ifp->if_cursor_move_screen_addr)(_ifp,_mode,_x,_y)
@
