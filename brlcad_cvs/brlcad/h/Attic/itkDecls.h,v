head	1.5;
access;
symbols
	ansi-20040405-merged:1.3.4.1
	postmerge-20040405-ansi:1.4
	premerge-20040404-ansi:1.4
	postmerge-autoconf:1.4
	autoconf-freeze:1.3.12.1
	premerge-autoconf:1.4
	ansi-20040316-freeze:1.3
	postmerge-20040315-windows:1.4
	premerge-20040315-windows:1.3
	windows-20040315-freeze:1.3.6.1
	autoconf-20031203:1.3
	autoconf-20031202:1.3
	autoconf-branch:1.3.0.12
	phong-branch:1.3.0.10
	photonmap-branch:1.3.0.8
	rel-6-1-DP:1.3
	windows-branch:1.3.0.6
	rel-6-0-2:1.3
	ansi-branch:1.3.0.4
	rel-6-0-1-branch:1.3.0.2
	hartley-6-0-post:1.3
	hartley-6-0-pre:1.3
	rel-6-0-1:1.3
	rel-6-0:1.3
	rel-5-4:1.1.2.1
	offsite-5-3-pre:1.1
	rel-5-3:1.1.2.1
	rel-5-1-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2004.05.24.04.11.52;	author morrison;	state dead;
branches;
next	1.4;

1.4
date	2004.03.16.14.10.46;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.05.19.35.06;	author morrison;	state Exp;
branches
	1.3.4.1
	1.3.6.1
	1.3.12.1;
next	1.2;

1.2
date	2001.03.19.22.19.25;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.06.21.56.11;	author bparker;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.12.06.21.57.12;	author bparker;	state Exp;
branches;
next	;

1.3.4.1
date	2004.03.17.21.16.11;	author morrison;	state Exp;
branches;
next	;

1.3.6.1
date	2002.09.26.23.03.44;	author morrison;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2004.03.17.04.10.34;	author morrison;	state Exp;
branches;
next	;

1.3.12.1
date	2004.03.18.18.00.45;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@moved/renamed from top-level h/ to top-level include/
@
text
@/*
 * itkDecls.h --
 *
 *	Declarations of functions in the platform independent public Itk API.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: $Id: itkDecls.h,v 1.4 2004/03/16 14:10:46 morrison Exp $
 */

#ifndef _ITKDECLS
#define _ITKDECLS

#ifdef BUILD_itk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tk.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifndef Itk_Init_TCL_DECLARED
#define Itk_Init_TCL_DECLARED
/* 0 */
TCL_EXTERN(int)		Itk_Init _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_SafeInit_TCL_DECLARED
#define Itk_SafeInit_TCL_DECLARED
/* 1 */
TCL_EXTERN(int)		Itk_SafeInit _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_ConfigBodyCmd_TCL_DECLARED
#define Itk_ConfigBodyCmd_TCL_DECLARED
/* 2 */
TCL_EXTERN(int)		Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_UsualCmd_TCL_DECLARED
#define Itk_UsualCmd_TCL_DECLARED
/* 3 */
TCL_EXTERN(int)		Itk_UsualCmd _ANSI_ARGS_((ClientData cdata, 
				Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionDefineCmd_TCL_DECLARED
#define Itk_ClassOptionDefineCmd_TCL_DECLARED
/* 4 */
TCL_EXTERN(int)		Itk_ClassOptionDefineCmd _ANSI_ARGS_((
				ClientData cdata, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionIllegalCmd_TCL_DECLARED
#define Itk_ClassOptionIllegalCmd_TCL_DECLARED
/* 5 */
TCL_EXTERN(int)		Itk_ClassOptionIllegalCmd _ANSI_ARGS_((
				ClientData cdata, Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ConfigClassOption_TCL_DECLARED
#define Itk_ConfigClassOption_TCL_DECLARED
/* 6 */
TCL_EXTERN(int)		Itk_ConfigClassOption _ANSI_ARGS_((
				Tcl_Interp * interp, ItclObject * contextObj, 
				ClientData cdata, CONST char* newVal));
#endif
#ifndef Itk_CreateClassOptTable_TCL_DECLARED
#define Itk_CreateClassOptTable_TCL_DECLARED
/* 7 */
TCL_EXTERN(ItkClassOptTable*) Itk_CreateClassOptTable _ANSI_ARGS_((
				Tcl_Interp * interp, ItclClass * cdefn));
#endif
#ifndef Itk_FindClassOptTable_TCL_DECLARED
#define Itk_FindClassOptTable_TCL_DECLARED
/* 8 */
TCL_EXTERN(ItkClassOptTable*) Itk_FindClassOptTable _ANSI_ARGS_((
				ItclClass * cdefn));
#endif
/* Slot 9 is reserved */
#ifndef Itk_CreateClassOption_TCL_DECLARED
#define Itk_CreateClassOption_TCL_DECLARED
/* 10 */
TCL_EXTERN(int)		Itk_CreateClassOption _ANSI_ARGS_((
				Tcl_Interp * interp, ItclClass * cdefn, 
				char * switchName, char * resName, 
				char * resClass, char * defVal, 
				char * config, ItkClassOption ** optPtr));
#endif
#ifndef Itk_FindClassOption_TCL_DECLARED
#define Itk_FindClassOption_TCL_DECLARED
/* 11 */
TCL_EXTERN(ItkClassOption*) Itk_FindClassOption _ANSI_ARGS_((
				ItclClass * cdefn, char * switchName));
#endif
#ifndef Itk_DelClassOption_TCL_DECLARED
#define Itk_DelClassOption_TCL_DECLARED
/* 12 */
TCL_EXTERN(void)	Itk_DelClassOption _ANSI_ARGS_((ItkClassOption * opt));
#endif
#ifndef Itk_ArchetypeInit_TCL_DECLARED
#define Itk_ArchetypeInit_TCL_DECLARED
/* 13 */
TCL_EXTERN(int)		Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
#endif
#ifndef Itk_OptListInit_TCL_DECLARED
#define Itk_OptListInit_TCL_DECLARED
/* 14 */
TCL_EXTERN(void)	Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist, 
				Tcl_HashTable * options));
#endif
#ifndef Itk_OptListFree_TCL_DECLARED
#define Itk_OptListFree_TCL_DECLARED
/* 15 */
TCL_EXTERN(void)	Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));
#endif
#ifndef Itk_OptListAdd_TCL_DECLARED
#define Itk_OptListAdd_TCL_DECLARED
/* 16 */
TCL_EXTERN(void)	Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist, 
				Tcl_HashEntry * entry));
#endif
#ifndef Itk_OptListRemove_TCL_DECLARED
#define Itk_OptListRemove_TCL_DECLARED
/* 17 */
TCL_EXTERN(void)	Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist, 
				Tcl_HashEntry * entry));
#endif

typedef struct ItkStubs {
    int magic;
    struct ItkStubHooks *hooks;

    int (*itk_Init) _ANSI_ARGS_((Tcl_Interp * interp)); /* 0 */
    int (*itk_SafeInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 1 */
    int (*itk_ConfigBodyCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 2 */
    int (*itk_UsualCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 3 */
    int (*itk_ClassOptionDefineCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 4 */
    int (*itk_ClassOptionIllegalCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 5 */
    int (*itk_ConfigClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, ClientData cdata, CONST char* newVal)); /* 6 */
    ItkClassOptTable* (*itk_CreateClassOptTable) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass * cdefn)); /* 7 */
    ItkClassOptTable* (*itk_FindClassOptTable) _ANSI_ARGS_((ItclClass * cdefn)); /* 8 */
    void *reserved9;
    int (*itk_CreateClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclClass * cdefn, char * switchName, char * resName, char * resClass, char * defVal, char * config, ItkClassOption ** optPtr)); /* 10 */
    ItkClassOption* (*itk_FindClassOption) _ANSI_ARGS_((ItclClass * cdefn, char * switchName)); /* 11 */
    void (*itk_DelClassOption) _ANSI_ARGS_((ItkClassOption * opt)); /* 12 */
    int (*itk_ArchetypeInit) _ANSI_ARGS_((Tcl_Interp* interp)); /* 13 */
    void (*itk_OptListInit) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashTable * options)); /* 14 */
    void (*itk_OptListFree) _ANSI_ARGS_((ItkOptList* olist)); /* 15 */
    void (*itk_OptListAdd) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashEntry * entry)); /* 16 */
    void (*itk_OptListRemove) _ANSI_ARGS_((ItkOptList* olist, Tcl_HashEntry * entry)); /* 17 */
} ItkStubs;

TCL_EXTERNC ItkStubs *itkStubsPtr;

#if defined(USE_ITK_STUBS) && !defined(USE_ITK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifndef Itk_Init
#define Itk_Init \
	(itkStubsPtr->itk_Init) /* 0 */
#endif
#ifndef Itk_SafeInit
#define Itk_SafeInit \
	(itkStubsPtr->itk_SafeInit) /* 1 */
#endif
#ifndef Itk_ConfigBodyCmd
#define Itk_ConfigBodyCmd \
	(itkStubsPtr->itk_ConfigBodyCmd) /* 2 */
#endif
#ifndef Itk_UsualCmd
#define Itk_UsualCmd \
	(itkStubsPtr->itk_UsualCmd) /* 3 */
#endif
#ifndef Itk_ClassOptionDefineCmd
#define Itk_ClassOptionDefineCmd \
	(itkStubsPtr->itk_ClassOptionDefineCmd) /* 4 */
#endif
#ifndef Itk_ClassOptionIllegalCmd
#define Itk_ClassOptionIllegalCmd \
	(itkStubsPtr->itk_ClassOptionIllegalCmd) /* 5 */
#endif
#ifndef Itk_ConfigClassOption
#define Itk_ConfigClassOption \
	(itkStubsPtr->itk_ConfigClassOption) /* 6 */
#endif
#ifndef Itk_CreateClassOptTable
#define Itk_CreateClassOptTable \
	(itkStubsPtr->itk_CreateClassOptTable) /* 7 */
#endif
#ifndef Itk_FindClassOptTable
#define Itk_FindClassOptTable \
	(itkStubsPtr->itk_FindClassOptTable) /* 8 */
#endif
/* Slot 9 is reserved */
#ifndef Itk_CreateClassOption
#define Itk_CreateClassOption \
	(itkStubsPtr->itk_CreateClassOption) /* 10 */
#endif
#ifndef Itk_FindClassOption
#define Itk_FindClassOption \
	(itkStubsPtr->itk_FindClassOption) /* 11 */
#endif
#ifndef Itk_DelClassOption
#define Itk_DelClassOption \
	(itkStubsPtr->itk_DelClassOption) /* 12 */
#endif
#ifndef Itk_ArchetypeInit
#define Itk_ArchetypeInit \
	(itkStubsPtr->itk_ArchetypeInit) /* 13 */
#endif
#ifndef Itk_OptListInit
#define Itk_OptListInit \
	(itkStubsPtr->itk_OptListInit) /* 14 */
#endif
#ifndef Itk_OptListFree
#define Itk_OptListFree \
	(itkStubsPtr->itk_OptListFree) /* 15 */
#endif
#ifndef Itk_OptListAdd
#define Itk_OptListAdd \
	(itkStubsPtr->itk_OptListAdd) /* 16 */
#endif
#ifndef Itk_OptListRemove
#define Itk_OptListRemove \
	(itkStubsPtr->itk_OptListRemove) /* 17 */
#endif

#endif /* defined(USE_ITK_STUBS) && !defined(USE_ITK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _ITKDECLS */

@


1.4
log
@merge of windows-6-0-branch into head
@
text
@d9 1
a9 1
 * RCS: $Id$
@


1.3
log
@updated SIGNED to signed
updated CONST to const
@
text
@d4 1
a4 3
 *	Declarations of functions in the platform independent public Tcl API.
 *
 * Copyright (c) 1998-1999 by XXXX
d9 1
a9 1
 * RCS: $Id: itkDecls.h,v 1.2 2001/03/19 22:19:25 butler Exp $
d32 2
d35 9
a43 2
EXTERN int		Itk_Init _ANSI_ARGS_((Tcl_Interp * interp));
/* Slot 1 is reserved */
d45 1
a45 1
EXTERN int		Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata, 
d47 4
a50 1
				Tcl_Obj *const objv[]));
d52 1
a52 1
EXTERN int		Itk_UsualCmd _ANSI_ARGS_((ClientData cdata, 
d54 4
a57 1
				Tcl_Obj *const objv[]));
d59 1
a59 1
EXTERN int		Itk_ClassOptionDefineCmd _ANSI_ARGS_((
d61 4
a64 1
				int objc, Tcl_Obj *const objv[]));
d66 1
a66 1
EXTERN int		Itk_ClassOptionIllegalCmd _ANSI_ARGS_((
d68 4
a71 1
				int objc, Tcl_Obj *const objv[]));
d73 1
a73 1
EXTERN int		Itk_ConfigClassOption _ANSI_ARGS_((
d75 4
a78 1
				ClientData cdata, char* newVal));
d80 1
a80 1
EXTERN ItkClassOptTable* Itk_CreateClassOptTable _ANSI_ARGS_((
d82 3
d86 1
a86 1
EXTERN ItkClassOptTable* Itk_FindClassOptTable _ANSI_ARGS_((
d88 1
d90 2
d93 1
a93 1
EXTERN int		Itk_CreateClassOption _ANSI_ARGS_((
d98 3
d102 5
a106 2
EXTERN ItkClassOption*	Itk_FindClassOption _ANSI_ARGS_((ItclClass * cdefn, 
				char * switchName));
d108 4
a111 1
EXTERN void		Itk_DelClassOption _ANSI_ARGS_((ItkClassOption * opt));
d113 4
a116 1
EXTERN int		Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
d118 1
a118 1
EXTERN void		Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist, 
d120 3
d124 4
a127 1
EXTERN void		Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));
d129 1
a129 1
EXTERN void		Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist, 
d131 3
d135 1
a135 1
EXTERN void		Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist, 
d137 1
d144 6
a149 6
    void *reserved1;
    int (*itk_ConfigBodyCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *const objv[])); /* 2 */
    int (*itk_UsualCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *const objv[])); /* 3 */
    int (*itk_ClassOptionDefineCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *const objv[])); /* 4 */
    int (*itk_ClassOptionIllegalCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *const objv[])); /* 5 */
    int (*itk_ConfigClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, ClientData cdata, char* newVal)); /* 6 */
d163 1
a163 7
#ifdef __cplusplus
extern "C" {
#endif
extern ItkStubs *itkStubsPtr;
#ifdef __cplusplus
}
#endif
d175 4
a178 1
/* Slot 1 is reserved */
@


1.3.12.1
log
@merge from head...
@
text
@d4 3
a6 1
 *	Declarations of functions in the platform independent public Itk API.
d11 1
a11 1
 * RCS: $Id$
a33 2
#ifndef Itk_Init_TCL_DECLARED
#define Itk_Init_TCL_DECLARED
d35 2
a36 9
TCL_EXTERN(int)		Itk_Init _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_SafeInit_TCL_DECLARED
#define Itk_SafeInit_TCL_DECLARED
/* 1 */
TCL_EXTERN(int)		Itk_SafeInit _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_ConfigBodyCmd_TCL_DECLARED
#define Itk_ConfigBodyCmd_TCL_DECLARED
d38 1
a38 1
TCL_EXTERN(int)		Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata, 
d40 1
a40 4
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_UsualCmd_TCL_DECLARED
#define Itk_UsualCmd_TCL_DECLARED
d42 1
a42 1
TCL_EXTERN(int)		Itk_UsualCmd _ANSI_ARGS_((ClientData cdata, 
d44 1
a44 4
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionDefineCmd_TCL_DECLARED
#define Itk_ClassOptionDefineCmd_TCL_DECLARED
d46 1
a46 1
TCL_EXTERN(int)		Itk_ClassOptionDefineCmd _ANSI_ARGS_((
d48 1
a48 4
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionIllegalCmd_TCL_DECLARED
#define Itk_ClassOptionIllegalCmd_TCL_DECLARED
d50 1
a50 1
TCL_EXTERN(int)		Itk_ClassOptionIllegalCmd _ANSI_ARGS_((
d52 1
a52 4
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ConfigClassOption_TCL_DECLARED
#define Itk_ConfigClassOption_TCL_DECLARED
d54 1
a54 1
TCL_EXTERN(int)		Itk_ConfigClassOption _ANSI_ARGS_((
d56 1
a56 4
				ClientData cdata, CONST char* newVal));
#endif
#ifndef Itk_CreateClassOptTable_TCL_DECLARED
#define Itk_CreateClassOptTable_TCL_DECLARED
d58 1
a58 1
TCL_EXTERN(ItkClassOptTable*) Itk_CreateClassOptTable _ANSI_ARGS_((
a59 3
#endif
#ifndef Itk_FindClassOptTable_TCL_DECLARED
#define Itk_FindClassOptTable_TCL_DECLARED
d61 1
a61 1
TCL_EXTERN(ItkClassOptTable*) Itk_FindClassOptTable _ANSI_ARGS_((
a62 1
#endif
a63 2
#ifndef Itk_CreateClassOption_TCL_DECLARED
#define Itk_CreateClassOption_TCL_DECLARED
d65 1
a65 1
TCL_EXTERN(int)		Itk_CreateClassOption _ANSI_ARGS_((
a69 3
#endif
#ifndef Itk_FindClassOption_TCL_DECLARED
#define Itk_FindClassOption_TCL_DECLARED
d71 2
a72 5
TCL_EXTERN(ItkClassOption*) Itk_FindClassOption _ANSI_ARGS_((
				ItclClass * cdefn, char * switchName));
#endif
#ifndef Itk_DelClassOption_TCL_DECLARED
#define Itk_DelClassOption_TCL_DECLARED
d74 1
a74 4
TCL_EXTERN(void)	Itk_DelClassOption _ANSI_ARGS_((ItkClassOption * opt));
#endif
#ifndef Itk_ArchetypeInit_TCL_DECLARED
#define Itk_ArchetypeInit_TCL_DECLARED
d76 1
a76 4
TCL_EXTERN(int)		Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
#endif
#ifndef Itk_OptListInit_TCL_DECLARED
#define Itk_OptListInit_TCL_DECLARED
d78 1
a78 1
TCL_EXTERN(void)	Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist, 
a79 3
#endif
#ifndef Itk_OptListFree_TCL_DECLARED
#define Itk_OptListFree_TCL_DECLARED
d81 1
a81 4
TCL_EXTERN(void)	Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));
#endif
#ifndef Itk_OptListAdd_TCL_DECLARED
#define Itk_OptListAdd_TCL_DECLARED
d83 1
a83 1
TCL_EXTERN(void)	Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist, 
a84 3
#endif
#ifndef Itk_OptListRemove_TCL_DECLARED
#define Itk_OptListRemove_TCL_DECLARED
d86 1
a86 1
TCL_EXTERN(void)	Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist, 
a87 1
#endif
d94 6
a99 6
    int (*itk_SafeInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 1 */
    int (*itk_ConfigBodyCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 2 */
    int (*itk_UsualCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 3 */
    int (*itk_ClassOptionDefineCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 4 */
    int (*itk_ClassOptionIllegalCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 5 */
    int (*itk_ConfigClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, ClientData cdata, CONST char* newVal)); /* 6 */
d113 7
a119 1
TCL_EXTERNC ItkStubs *itkStubsPtr;
d131 1
a131 4
#ifndef Itk_SafeInit
#define Itk_SafeInit \
	(itkStubsPtr->itk_SafeInit) /* 1 */
#endif
@


1.3.4.1
log
@sync branch with HEAD
@
text
@d4 3
a6 1
 *	Declarations of functions in the platform independent public Itk API.
d11 1
a11 1
 * RCS: $Id$
a33 2
#ifndef Itk_Init_TCL_DECLARED
#define Itk_Init_TCL_DECLARED
d35 2
a36 9
TCL_EXTERN(int)		Itk_Init _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_SafeInit_TCL_DECLARED
#define Itk_SafeInit_TCL_DECLARED
/* 1 */
TCL_EXTERN(int)		Itk_SafeInit _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_ConfigBodyCmd_TCL_DECLARED
#define Itk_ConfigBodyCmd_TCL_DECLARED
d38 1
a38 1
TCL_EXTERN(int)		Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata, 
d40 1
a40 4
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_UsualCmd_TCL_DECLARED
#define Itk_UsualCmd_TCL_DECLARED
d42 1
a42 1
TCL_EXTERN(int)		Itk_UsualCmd _ANSI_ARGS_((ClientData cdata, 
d44 1
a44 4
				Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionDefineCmd_TCL_DECLARED
#define Itk_ClassOptionDefineCmd_TCL_DECLARED
d46 1
a46 1
TCL_EXTERN(int)		Itk_ClassOptionDefineCmd _ANSI_ARGS_((
d48 1
a48 4
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ClassOptionIllegalCmd_TCL_DECLARED
#define Itk_ClassOptionIllegalCmd_TCL_DECLARED
d50 1
a50 1
TCL_EXTERN(int)		Itk_ClassOptionIllegalCmd _ANSI_ARGS_((
d52 1
a52 4
				int objc, Tcl_Obj *CONST objv[]));
#endif
#ifndef Itk_ConfigClassOption_TCL_DECLARED
#define Itk_ConfigClassOption_TCL_DECLARED
d54 1
a54 1
TCL_EXTERN(int)		Itk_ConfigClassOption _ANSI_ARGS_((
d56 1
a56 4
				ClientData cdata, CONST char* newVal));
#endif
#ifndef Itk_CreateClassOptTable_TCL_DECLARED
#define Itk_CreateClassOptTable_TCL_DECLARED
d58 1
a58 1
TCL_EXTERN(ItkClassOptTable*) Itk_CreateClassOptTable _ANSI_ARGS_((
a59 3
#endif
#ifndef Itk_FindClassOptTable_TCL_DECLARED
#define Itk_FindClassOptTable_TCL_DECLARED
d61 1
a61 1
TCL_EXTERN(ItkClassOptTable*) Itk_FindClassOptTable _ANSI_ARGS_((
a62 1
#endif
a63 2
#ifndef Itk_CreateClassOption_TCL_DECLARED
#define Itk_CreateClassOption_TCL_DECLARED
d65 1
a65 1
TCL_EXTERN(int)		Itk_CreateClassOption _ANSI_ARGS_((
a69 3
#endif
#ifndef Itk_FindClassOption_TCL_DECLARED
#define Itk_FindClassOption_TCL_DECLARED
d71 2
a72 5
TCL_EXTERN(ItkClassOption*) Itk_FindClassOption _ANSI_ARGS_((
				ItclClass * cdefn, char * switchName));
#endif
#ifndef Itk_DelClassOption_TCL_DECLARED
#define Itk_DelClassOption_TCL_DECLARED
d74 1
a74 4
TCL_EXTERN(void)	Itk_DelClassOption _ANSI_ARGS_((ItkClassOption * opt));
#endif
#ifndef Itk_ArchetypeInit_TCL_DECLARED
#define Itk_ArchetypeInit_TCL_DECLARED
d76 1
a76 4
TCL_EXTERN(int)		Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
#endif
#ifndef Itk_OptListInit_TCL_DECLARED
#define Itk_OptListInit_TCL_DECLARED
d78 1
a78 1
TCL_EXTERN(void)	Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist, 
a79 3
#endif
#ifndef Itk_OptListFree_TCL_DECLARED
#define Itk_OptListFree_TCL_DECLARED
d81 1
a81 4
TCL_EXTERN(void)	Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));
#endif
#ifndef Itk_OptListAdd_TCL_DECLARED
#define Itk_OptListAdd_TCL_DECLARED
d83 1
a83 1
TCL_EXTERN(void)	Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist, 
a84 3
#endif
#ifndef Itk_OptListRemove_TCL_DECLARED
#define Itk_OptListRemove_TCL_DECLARED
d86 1
a86 1
TCL_EXTERN(void)	Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist, 
a87 1
#endif
d94 6
a99 6
    int (*itk_SafeInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 1 */
    int (*itk_ConfigBodyCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 2 */
    int (*itk_UsualCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 3 */
    int (*itk_ClassOptionDefineCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 4 */
    int (*itk_ClassOptionIllegalCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 5 */
    int (*itk_ConfigClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, ClientData cdata, CONST char* newVal)); /* 6 */
d113 7
a119 1
TCL_EXTERNC ItkStubs *itkStubsPtr;
d131 1
a131 4
#ifndef Itk_SafeInit
#define Itk_SafeInit \
	(itkStubsPtr->itk_SafeInit) /* 1 */
#endif
@


1.3.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d4 1
a4 1
 *	Declarations of functions in the platform independent public Itk API.
d11 1
a11 1
 * RCS: $Id: itkDecls.h,v 1.3 2001/06/22 04:38:54 davygrvy Exp $
d36 1
a36 2
/* 1 */
EXTERN int		Itk_SafeInit _ANSI_ARGS_((Tcl_Interp * interp));
d40 1
a40 1
				Tcl_Obj *CONST objv[]));
d44 1
a44 1
				Tcl_Obj *CONST objv[]));
d48 1
a48 1
				int objc, Tcl_Obj *CONST objv[]));
d52 1
a52 1
				int objc, Tcl_Obj *CONST objv[]));
d94 5
a98 5
    int (*itk_SafeInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 1 */
    int (*itk_ConfigBodyCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 2 */
    int (*itk_UsualCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 3 */
    int (*itk_ClassOptionDefineCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 4 */
    int (*itk_ClassOptionIllegalCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 5 */
d131 1
a131 4
#ifndef Itk_SafeInit
#define Itk_SafeInit \
	(itkStubsPtr->itk_SafeInit) /* 1 */
#endif
@


1.3.6.2
log
@remerge head into branch just in case someone checks out this branch later
@
text
@d6 2
d11 1
a11 1
 * RCS: $Id$
a33 2
#ifndef Itk_Init_TCL_DECLARED
#define Itk_Init_TCL_DECLARED
d35 1
a35 4
TCL_EXTERN(int)		Itk_Init _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_SafeInit_TCL_DECLARED
#define Itk_SafeInit_TCL_DECLARED
d37 1
a37 4
TCL_EXTERN(int)		Itk_SafeInit _ANSI_ARGS_((Tcl_Interp * interp));
#endif
#ifndef Itk_ConfigBodyCmd_TCL_DECLARED
#define Itk_ConfigBodyCmd_TCL_DECLARED
d39 1
a39 1
TCL_EXTERN(int)		Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata, 
a41 3
#endif
#ifndef Itk_UsualCmd_TCL_DECLARED
#define Itk_UsualCmd_TCL_DECLARED
d43 1
a43 1
TCL_EXTERN(int)		Itk_UsualCmd _ANSI_ARGS_((ClientData cdata, 
a45 3
#endif
#ifndef Itk_ClassOptionDefineCmd_TCL_DECLARED
#define Itk_ClassOptionDefineCmd_TCL_DECLARED
d47 1
a47 1
TCL_EXTERN(int)		Itk_ClassOptionDefineCmd _ANSI_ARGS_((
a49 3
#endif
#ifndef Itk_ClassOptionIllegalCmd_TCL_DECLARED
#define Itk_ClassOptionIllegalCmd_TCL_DECLARED
d51 1
a51 1
TCL_EXTERN(int)		Itk_ClassOptionIllegalCmd _ANSI_ARGS_((
a53 3
#endif
#ifndef Itk_ConfigClassOption_TCL_DECLARED
#define Itk_ConfigClassOption_TCL_DECLARED
d55 1
a55 1
TCL_EXTERN(int)		Itk_ConfigClassOption _ANSI_ARGS_((
d57 1
a57 4
				ClientData cdata, CONST char* newVal));
#endif
#ifndef Itk_CreateClassOptTable_TCL_DECLARED
#define Itk_CreateClassOptTable_TCL_DECLARED
d59 1
a59 1
TCL_EXTERN(ItkClassOptTable*) Itk_CreateClassOptTable _ANSI_ARGS_((
a60 3
#endif
#ifndef Itk_FindClassOptTable_TCL_DECLARED
#define Itk_FindClassOptTable_TCL_DECLARED
d62 1
a62 1
TCL_EXTERN(ItkClassOptTable*) Itk_FindClassOptTable _ANSI_ARGS_((
a63 1
#endif
a64 2
#ifndef Itk_CreateClassOption_TCL_DECLARED
#define Itk_CreateClassOption_TCL_DECLARED
d66 1
a66 1
TCL_EXTERN(int)		Itk_CreateClassOption _ANSI_ARGS_((
a70 3
#endif
#ifndef Itk_FindClassOption_TCL_DECLARED
#define Itk_FindClassOption_TCL_DECLARED
d72 2
a73 5
TCL_EXTERN(ItkClassOption*) Itk_FindClassOption _ANSI_ARGS_((
				ItclClass * cdefn, char * switchName));
#endif
#ifndef Itk_DelClassOption_TCL_DECLARED
#define Itk_DelClassOption_TCL_DECLARED
d75 1
a75 4
TCL_EXTERN(void)	Itk_DelClassOption _ANSI_ARGS_((ItkClassOption * opt));
#endif
#ifndef Itk_ArchetypeInit_TCL_DECLARED
#define Itk_ArchetypeInit_TCL_DECLARED
d77 1
a77 4
TCL_EXTERN(int)		Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
#endif
#ifndef Itk_OptListInit_TCL_DECLARED
#define Itk_OptListInit_TCL_DECLARED
d79 1
a79 1
TCL_EXTERN(void)	Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist, 
a80 3
#endif
#ifndef Itk_OptListFree_TCL_DECLARED
#define Itk_OptListFree_TCL_DECLARED
d82 1
a82 4
TCL_EXTERN(void)	Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));
#endif
#ifndef Itk_OptListAdd_TCL_DECLARED
#define Itk_OptListAdd_TCL_DECLARED
d84 1
a84 1
TCL_EXTERN(void)	Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist, 
a85 3
#endif
#ifndef Itk_OptListRemove_TCL_DECLARED
#define Itk_OptListRemove_TCL_DECLARED
d87 1
a87 1
TCL_EXTERN(void)	Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist, 
a88 1
#endif
d100 1
a100 1
    int (*itk_ConfigClassOption) _ANSI_ARGS_((Tcl_Interp * interp, ItclObject * contextObj, ClientData cdata, CONST char* newVal)); /* 6 */
d114 7
a120 1
TCL_EXTERNC ItkStubs *itkStubsPtr;
@


1.2
log
@patches to merge 5.3 into 6.0
@
text
@d11 1
a11 1
 * RCS: $Id: itkDecls.h,v 1.1.2.1 2000/12/06 21:57:12 bparker Exp $
d40 1
a40 1
				Tcl_Obj *CONST objv[]));
d44 1
a44 1
				Tcl_Obj *CONST objv[]));
d48 1
a48 1
				int objc, Tcl_Obj *CONST objv[]));
d52 1
a52 1
				int objc, Tcl_Obj *CONST objv[]));
d95 4
a98 4
    int (*itk_ConfigBodyCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 2 */
    int (*itk_UsualCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 3 */
    int (*itk_ClassOptionDefineCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 4 */
    int (*itk_ClassOptionIllegalCmd) _ANSI_ARGS_((ClientData cdata, Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[])); /* 5 */
@


1.1
log
@Mods to support tcl/tk/itcl upgrade
@
text
@d11 1
a11 1
 * RCS: $Id: itkDecls.h,v 1.2 2000/08/04 22:09:06 davidg Exp $
@


1.1.2.1
log
@Mods to support tcl/tk/itcl upgrade
@
text
@@

