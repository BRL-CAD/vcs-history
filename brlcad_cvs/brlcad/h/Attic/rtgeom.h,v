head	11.42;
access;
symbols
	ansi-20040405-merged:11.37.2.4
	postmerge-20040405-ansi:11.41
	premerge-20040404-ansi:11.40
	postmerge-autoconf:11.40
	autoconf-freeze:11.40
	premerge-autoconf:11.40
	ansi-20040316-freeze:11.37.2.3
	postmerge-20040315-windows:11.40
	premerge-20040315-windows:11.40
	windows-20040315-freeze:11.37.4.1
	autoconf-20031203:11.40
	autoconf-20031202:11.40
	autoconf-branch:11.40.0.4
	phong-branch:11.40.0.2
	photonmap-branch:11.39.0.2
	rel-6-1-DP:11.37
	windows-branch:11.37.0.4
	rel-6-0-2:11.35
	ansi-branch:11.37.0.2
	rel-6-0-1-branch:11.35.0.2
	hartley-6-0-post:11.36
	hartley-6-0-pre:11.35
	rel-6-0-1:11.35
	rel-6-0:11.35
	rel-5-4:11.23.2.2
	offsite-5-3-pre:11.26
	rel-5-3:11.23.2.2
	rel-5-2:11.23
	rel-5-1-branch:11.23.0.2
	rel-5-1:11.23
	rel-5-0:11.10
	rel-5-0-beta:11.9
	rel-4-5:11.8
	ctj-4-5-post:11.8
	ctj-4-5-pre:11.8
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.42
date	2004.05.24.04.11.53;	author morrison;	state dead;
branches;
next	11.41;

11.41
date	2004.04.05.09.31.17;	author morrison;	state Exp;
branches;
next	11.40;

11.40
date	2003.07.28.18.54.36;	author jra;	state Exp;
branches;
next	11.39;

11.39
date	2002.11.29.03.12.11;	author jra;	state Exp;
branches
	11.39.2.1;
next	11.38;

11.38
date	2002.11.27.13.42.08;	author jra;	state Exp;
branches;
next	11.37;

11.37
date	2002.08.20.17.07.30;	author jra;	state Exp;
branches
	11.37.2.1
	11.37.4.1;
next	11.36;

11.36
date	2002.08.15.20.54.43;	author hartley;	state Exp;
branches;
next	11.35;

11.35
date	2001.11.07.19.35.37;	author butler;	state Exp;
branches;
next	11.34;

11.34
date	2001.11.02.04.58.23;	author butler;	state Exp;
branches;
next	11.33;

11.33
date	2001.11.02.01.54.12;	author butler;	state Exp;
branches;
next	11.32;

11.32
date	2001.10.31.23.01.23;	author butler;	state Exp;
branches;
next	11.31;

11.31
date	2001.08.11.13.17.12;	author butler;	state Exp;
branches;
next	11.30;

11.30
date	2001.04.25.13.44.40;	author jra;	state Exp;
branches;
next	11.29;

11.29
date	2001.04.05.19.35.08;	author morrison;	state Exp;
branches;
next	11.28;

11.28
date	2001.03.23.22.33.48;	author butler;	state Exp;
branches;
next	11.27;

11.27
date	2001.03.21.22.37.29;	author jra;	state Exp;
branches;
next	11.26;

11.26
date	2000.07.14.19.41.23;	author butler;	state Exp;
branches;
next	11.25;

11.25
date	2000.06.29.20.21.55;	author jra;	state Exp;
branches;
next	11.24;

11.24
date	2000.06.29.14.17.18;	author butler;	state Exp;
branches;
next	11.23;

11.23
date	2000.04.01.03.41.27;	author mike;	state Exp;
branches
	11.23.2.1;
next	11.22;

11.22
date	2000.03.16.13.39.27;	author jra;	state Exp;
branches;
next	11.21;

11.21
date	2000.03.02.14.40.29;	author jra;	state Exp;
branches;
next	11.20;

11.20
date	2000.02.20.06.40.50;	author butler;	state Exp;
branches;
next	11.19;

11.19
date	2000.01.14.02.58.16;	author mike;	state Exp;
branches;
next	11.18;

11.18
date	99.12.29.22.36.32;	author mike;	state Exp;
branches;
next	11.17;

11.17
date	99.12.22.04.55.29;	author mike;	state Exp;
branches;
next	11.16;

11.16
date	99.12.08.13.59.10;	author jra;	state Exp;
branches;
next	11.15;

11.15
date	99.11.26.21.45.42;	author mike;	state Exp;
branches;
next	11.14;

11.14
date	99.11.17.04.38.18;	author mike;	state Exp;
branches;
next	11.13;

11.13
date	99.11.08.14.57.11;	author jra;	state Exp;
branches;
next	11.12;

11.12
date	99.10.19.20.51.28;	author jra;	state Exp;
branches;
next	11.11;

11.11
date	99.10.12.13.58.12;	author jra;	state Exp;
branches;
next	11.10;

11.10
date	99.07.02.21.24.44;	author mike;	state Exp;
branches;
next	11.9;

11.9
date	98.03.19.14.56.42;	author jra;	state Exp;
branches;
next	11.8;

11.8
date	97.07.01.23.41.04;	author butler;	state Exp;
branches;
next	11.7;

11.7
date	97.05.22.09.47.55;	author butler;	state Exp;
branches;
next	11.6;

11.6
date	97.05.19.17.04.58;	author butler;	state Exp;
branches;
next	11.5;

11.5
date	97.04.25.06.09.04;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	97.04.25.05.59.40;	author butler;	state Exp;
branches;
next	11.3;

11.3
date	96.08.31.11.08.15;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	95.12.01.02.41.17;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.48.40;	author mike;	state Rel4_4;
branches;
next	10.9;

10.9
date	94.12.27.14.16.25;	author stay;	state Exp;
branches;
next	10.8;

10.8
date	94.10.29.00.57.08;	author mike;	state Exp;
branches;
next	10.7;

10.7
date	94.10.28.21.48.44;	author mike;	state Exp;
branches;
next	10.6;

10.6
date	94.08.27.02.57.32;	author mike;	state Exp;
branches;
next	10.5;

10.5
date	94.03.11.04.25.34;	author cjohnson;	state Exp;
branches;
next	10.4;

10.4
date	93.02.24.21.18.22;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	92.06.12.23.52.53;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	92.02.14.15.07.21;	author mmark;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.35.36;	author mike;	state Rel4_0;
branches;
next	1.13;

1.13
date	91.07.10.23.55.58;	author butler;	state Exp;
branches;
next	1.12;

1.12
date	91.06.14.04.30.48;	author mike;	state Exp;
branches;
next	1.11;

1.11
date	91.06.13.02.00.55;	author mike;	state Exp;
branches;
next	1.10;

1.10
date	91.06.13.01.58.33;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	91.06.03.19.18.02;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	91.03.04.19.55.39;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	91.02.08.22.45.13;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	91.01.25.21.23.43;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	91.01.25.20.34.41;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	91.01.25.20.23.41;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	91.01.23.22.42.34;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	91.01.15.23.37.35;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	91.01.15.20.42.43;	author mike;	state Exp;
branches;
next	;

11.23.2.1
date	2001.01.16.23.40.15;	author butler;	state Exp;
branches;
next	11.23.2.2;

11.23.2.2
date	2001.02.12.22.17.00;	author butler;	state Exp;
branches;
next	;

11.37.2.1
date	2002.09.19.18.00.57;	author morrison;	state Exp;
branches;
next	11.37.2.2;

11.37.2.2
date	2003.01.31.00.11.53;	author morrison;	state Exp;
branches;
next	11.37.2.3;

11.37.2.3
date	2003.02.02.06.12.43;	author morrison;	state Exp;
branches;
next	11.37.2.4;

11.37.2.4
date	2004.03.17.21.16.14;	author morrison;	state Exp;
branches;
next	;

11.37.4.1
date	2004.03.11.23.40.47;	author morrison;	state Exp;
branches;
next	;

11.39.2.1
date	2003.08.26.13.59.18;	author justin;	state Exp;
branches;
next	;


desc
@Internal formats for geometry in LIBRT
@


11.42
log
@moved/renamed from top-level h/ to top-level include/
@
text
@/*
 *			R T G E O M . H
 *
 *  Details of the internal forms used by the LIBRT geometry routines
 *  for the different solids.
 *
 *  These structures are what the struct rt_db_internal
 *  generic pointer idb_ptr points at,
 *  based on idb_type indicating a solid id ID_xxx, such as ID_TGC.
 *
 *  Depends on having machine.h, bu.h, vmath.h, and bn.h included first.
 *
 *  The proper order for including them all is:
 *	#include <stdio.h>
 *	#include <math.h>
 *	#include "machine.h"
 *	#include "bu.h"
 *	#include "vmath.h"
 *	#include "nmg.h"
 *	#include "raytrace.h"
 *	#include "nurb.h"
 *	#include "rtgeom.h"
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
 *
 *  $Header: /n/xoff/cvs/brlcad/h/rtgeom.h,v 11.41 2004/04/05 09:31:17 morrison Exp $
 */

#ifndef SEEN_RTGEOM_H
#define SEEN_RTGEOM_H seen

#ifdef __cplusplus
extern "C" {
#endif

#undef r_a /* defined on alliant in <machine/reg.h> included in signal.h */

#define NAMELEN 16	/* NAMESIZE from db.h (can't call it NAMESIZE!!!!!) */

/*
 *	ID_TOR
 */
struct rt_tor_internal {
	long	magic;
	point_t	v;		/* center point */
	vect_t	h;		/* normal, unit length */
	fastf_t	r_h;		/* radius in H direction (r2) */
	fastf_t	r_a;		/* radius in A direction (r1) */
	/* REMAINING ELEMENTS PROVIDED BY IMPORT, UNUSED BY EXPORT */
	vect_t	a;		/* r_a length */
	vect_t	b;		/* r_b length */
	fastf_t	r_b;		/* radius in B direction (typ == r_a) */
};
#define RT_TOR_INTERNAL_MAGIC	0x9bffed87
#define RT_TOR_CK_MAGIC(_p)	BU_CKMAG(_p,RT_TOR_INTERNAL_MAGIC,"rt_tor_internal")

/*
 *	ID_TGC and ID_REC
 */
struct rt_tgc_internal {
	long	magic;
	vect_t	v;
	vect_t	h;
	vect_t	a;
	vect_t	b;
	vect_t	c;
	vect_t	d;
};
#define RT_TGC_INTERNAL_MAGIC	0xaabbdd87
#define RT_TGC_CK_MAGIC(_p)	BU_CKMAG(_p,RT_TGC_INTERNAL_MAGIC,"rt_tgc_internal")

/*
 *	ID_ELL, and ID_SPH
 */
struct rt_ell_internal  {
	long	magic;
	point_t	v;
	vect_t	a;
	vect_t	b;
	vect_t	c;
};
#define RT_ELL_INTERNAL_MAGIC	0x93bb23ff
#define RT_ELL_CK_MAGIC(_p)	BU_CKMAG(_p,RT_ELL_INTERNAL_MAGIC,"rt_ell_internal")

/*
 *      ID_SUPERELL
 */
struct rt_superell_internal {
	long    magic;
	point_t v;
	vect_t  a;
	vect_t  b;
	vect_t  c;
  double n;
  double e;
};
#define RT_SUPERELL_INTERNAL_MAGIC      0xff93bb23
#define RT_SUPERELL_CK_MAGIC(_p)        BU_CKMAG(_p,RT_SUPERELL_INTERNAL_MAGIC,"rt_superell_internal")


/*
 *	ID_ARB8
 *
 *  The internal (in memory) form of an ARB8 -- 8 points in space.
 *  The first 4 form the "bottom" face, the second 4 form the "top" face.
 */
struct rt_arb_internal {
	long	magic;
	point_t	pt[8];
};
#define RT_ARB_INTERNAL_MAGIC	0x9befd010
#define RT_ARB_CK_MAGIC(_p)	BU_CKMAG(_p,RT_ARB_INTERNAL_MAGIC,"rt_arb_internal")

/*
 *	ID_ARS
 */
struct rt_ars_internal {
	long	magic;
	int	ncurves;
	int	pts_per_curve;
	fastf_t	**curves;
};
#define RT_ARS_INTERNAL_MAGIC	0x77ddbbe3
#define RT_ARS_CK_MAGIC(_p)	BU_CKMAG(_p,RT_ARS_INTERNAL_MAGIC,"rt_ars_internal")

/*
 *	ID_HALF
 */
struct rt_half_internal  {
	long	magic;
	plane_t	eqn;
};
#define RT_HALF_INTERNAL_MAGIC	0xaa87bbdd
#define RT_HALF_CK_MAGIC(_p)	BU_CKMAG(_p,RT_HALF_INTERNAL_MAGIC,"rt_half_internal")

/*
 *	ID_GRIP
 */
struct rt_grip_internal {
	long	magic;
	point_t	center;
	/* Remaining elemnts are used for display purposes only */
	vect_t	normal;
	fastf_t	mag;
};
#define RT_GRIP_INTERNAL_MAGIC	0x31196205
#define RT_GRIP_CK_MAGIC(_p)	BU_CKMAG(_p,RT_GRIP_INTERNAL_MAGIC,"rt_grip_internal")
	
/*
 *	ID_POLY
 */
struct rt_pg_internal {
	long	magic;
	int	npoly;
	struct rt_pg_face_internal {
		int	npts;		/* number of points for this polygon */
		fastf_t	*verts;		/* has 3*npts elements */
		fastf_t	*norms;		/* has 3*npts elements */
	} *poly;			/* has npoly elements */
	/* REMAINING ELEMENTS PROVIDED BY IMPORT, UNUSED BY EXPORT */
	int	max_npts;		/* maximum value of npts in poly[] */
};
#define RT_PG_INTERNAL_MAGIC	0x9bfed887
#define RT_PG_CK_MAGIC(_p)	BU_CKMAG(_p,RT_PG_INTERNAL_MAGIC,"rt_pg_internal")

/* ID_BSPLINE */
#ifdef NMG_H				/* Only if we have seen struct face_g_snurb */
#ifndef SEEN_RT_NURB_INTERNAL
#define SEEN_RT_NURB_INTERNAL
struct rt_nurb_internal {
	long		magic;
	int	 	nsrf;		/* number of surfaces */
	struct face_g_snurb **srfs;	/* The surfaces themselves */
};
#endif

#define RT_NURB_INTERNAL_MAGIC	0x002b2bdd
#define RT_NURB_CK_MAGIC( _p) BU_CKMAG(_p,RT_NURB_INTERNAL_MAGIC,"rt_nurb_internal");
#endif
#define RT_NURB_GET_CONTROL_POINT(_s,_u,_v)	((_s)->ctl_points[ \
	((_v)*(_s)->s_size[0]+(_u))*RT_NURB_EXTRACT_COORDS((_s)->pt_type)])

/*
 *	ID_NMG
 *
 *  The internal form of the NMG is not rt_nmg_internal, but just
 *  a "struct model", from nmg.h.  e.g.:
 *	if( intern.idb_type == ID_NMG )
 *		m = (struct model *)intern.idb_ptr;
 */

/*
 *	ID_EBM
 */
#define RT_EBM_NAME_LEN 256
struct rt_ebm_internal  {
	long		magic;
	char		file[RT_EBM_NAME_LEN];
	int		xdim;		/* X dimension (w cells) */
	int		ydim;		/* Y dimension (n cells) */
	fastf_t		tallness;	/* Z dimension (mm) */
	mat_t		mat;		/* convert local coords to model space */
	/* REMAINING ELEMENTS PROVIDED BY IMPORT, UNUSED BY EXPORT */
	struct bu_mapped_file	*mp;	/* actual data */
};
#define RT_EBM_INTERNAL_MAGIC	0xf901b231
#define RT_EBM_CK_MAGIC(_p)	BU_CKMAG(_p,RT_EBM_INTERNAL_MAGIC,"rt_ebm_internal")

/*
 *	ID_VOL
 */
#define RT_VOL_NAME_LEN 128
struct rt_vol_internal  {
	long		magic;
	char		file[RT_VOL_NAME_LEN];
	int		xdim;		/* X dimension */
	int		ydim;		/* Y dimension */
	int		zdim;		/* Z dimension */
	int		lo;		/* Low threshold */
	int		hi;		/* High threshold */
	vect_t		cellsize;	/* ideal coords: size of each cell */
	mat_t		mat;		/* convert local coords to model space */
	/* REMAINING ELEMENTS PROVIDED BY IMPORT, UNUSED BY EXPORT */
	unsigned char	*map;
};
#define RT_VOL_INTERNAL_MAGIC	0x987ba1d0
#define RT_VOL_CK_MAGIC(_p)	BU_CKMAG(_p,RT_VOL_INTERNAL_MAGIC,"rt_vol_internal")

/*
 *	ID_HF
 */
struct rt_hf_internal {
	long		magic;
	/* BEGIN USER SETABLE VARIABLES */
	char		cfile[128];	/* name of control file (optional) */
	char		dfile[128];	/* name of data file */
	char		fmt[8];		/* CV style file format descriptor */
	int		w;		/* # samples wide of data file.  ("i", "x") */
	int		n;		/* nlines of data file.  ("j", "y") */
	int		shorts;		/* !0 --> memory array is short, not float */
	fastf_t		file2mm;	/* scale factor to cvt file units to mm */
	vect_t		v;		/* origin of HT in model space */
	vect_t		x;		/* model vect corresponding to "w" dir (will be unitized) */
	vect_t		y;		/* model vect corresponding to "n" dir (will be unitized) */
	fastf_t		xlen;		/* model len of HT rpp in "w" dir */
	fastf_t		ylen;		/* model len of HT rpp in "n" dir */
	fastf_t		zscale;		/* scale of data in ''up'' dir (after file2mm is applied) */
	/* END USER SETABLE VARIABLES, BEGIN INTERNAL STUFF */
	struct bu_mapped_file	*mp;	/* actual data */
};
#define RT_HF_INTERNAL_MAGIC	0x4846494d
#define RT_HF_CK_MAGIC(_p)	BU_CKMAG(_p,RT_HF_INTERNAL_MAGIC,"rt_hf_internal")

/*
 *	ID_ARBN
 */
struct rt_arbn_internal  {
	long	magic;
	int	neqn;
	plane_t	*eqn;
};
#define RT_ARBN_INTERNAL_MAGIC	0x18236461
#define RT_ARBN_CK_MAGIC(_p)	BU_CKMAG(_p,RT_ARBN_INTERNAL_MAGIC,"rt_arbn_internal")

/*
 *	ID_PIPE
 */
struct rt_pipe_internal {
	long		pipe_magic;
	struct bu_list	pipe_segs_head;
	/* REMAINING ELEMENTS PROVIDED BY IMPORT, UNUSED BY EXPORT */
	int		pipe_count;
};
#define RT_PIPE_INTERNAL_MAGIC	0x7dd7bb3e
#define RT_PIPE_CK_MAGIC(_p)	BU_CKMAG(_p,RT_PIPE_INTERNAL_MAGIC,"rt_pipe_internal")

/*
 *	ID_PARTICLE
 */
struct rt_part_internal {
	long	part_magic;
	point_t	part_V;
	vect_t	part_H;
	fastf_t	part_vrad;
	fastf_t	part_hrad;
	/* REMAINING ELEMENTS PROVIDED BY IMPORT, UNUSED BY EXPORT */
	int	part_type;		/* sphere, cylinder, cone */
};
#define RT_PART_INTERNAL_MAGIC	0xaaccee87
#define RT_PART_CK_MAGIC(_p)	BU_CKMAG(_p,RT_PART_INTERNAL_MAGIC,"rt_part_internal")

#define RT_PARTICLE_TYPE_SPHERE		1
#define RT_PARTICLE_TYPE_CYLINDER	2
#define RT_PARTICLE_TYPE_CONE		3

/*
 *	ID_RPC
 */
struct rt_rpc_internal {
	long	rpc_magic;
	point_t	rpc_V;	/* rpc vertex */
	vect_t	rpc_H;	/* height vector */
	vect_t	rpc_B;	/* breadth vector */
	fastf_t	rpc_r;	/* scalar half-width of rectangular face */
};
#define RT_RPC_INTERNAL_MAGIC	0xaaccee88
#define RT_RPC_CK_MAGIC(_p)	BU_CKMAG(_p,RT_RPC_INTERNAL_MAGIC,"rt_rpc_internal")

/*
 *	ID_RHC
 */
struct rt_rhc_internal {
	long	rhc_magic;
	point_t	rhc_V;	/* rhc vertex */
	vect_t	rhc_H;	/* height vector */
	vect_t	rhc_B;	/* breadth vector */
	fastf_t	rhc_r;	/* scalar half-width of rectangular face */
	fastf_t	rhc_c;	/* dist from hyperbola to vertex of asymptotes */
};
#define RT_RHC_INTERNAL_MAGIC	0xaaccee89
#define RT_RHC_CK_MAGIC(_p)	BU_CKMAG(_p,RT_RHC_INTERNAL_MAGIC,"rt_rhc_internal")

/*
 *	ID_EPA
 */
struct rt_epa_internal {
	long	epa_magic;
	point_t	epa_V;	/* epa vertex */
	vect_t	epa_H;	/* height vector */
	vect_t	epa_Au;	/* unit vector along semi-major axis */
	fastf_t	epa_r1;	/* scalar semi-major axis length */
	fastf_t	epa_r2;	/* scalar semi-minor axis length */
};
#define RT_EPA_INTERNAL_MAGIC	0xaaccee90
#define RT_EPA_CK_MAGIC(_p)	BU_CKMAG(_p,RT_EPA_INTERNAL_MAGIC,"rt_epa_internal")

/*
 *	ID_EHY
 */
struct rt_ehy_internal {
	long	ehy_magic;
	point_t	ehy_V;	/* ehy vertex */
	vect_t	ehy_H;	/* height vector */
	vect_t	ehy_Au;	/* unit vector along semi-major axis */
	fastf_t	ehy_r1;	/* scalar semi-major axis length */
	fastf_t	ehy_r2;	/* scalar semi-minor axis length */
	fastf_t	ehy_c;	/* dist from hyperbola to vertex of asymptotes */
};
#define RT_EHY_INTERNAL_MAGIC	0xaaccee91
#define RT_EHY_CK_MAGIC(_p)	BU_CKMAG(_p,RT_EHY_INTERNAL_MAGIC,"rt_ehy_internal")

/*
 *	ID_ETO
 */
struct rt_eto_internal {
	long	eto_magic;
	point_t	eto_V;	/* eto vertex */
	vect_t	eto_N;	/* vector normal to plane of torus */
	vect_t	eto_C;	/* vector along semi-major axis of ellipse */
	fastf_t	eto_r;	/* scalar radius of rotation */
	fastf_t	eto_rd;	/* scalar length of semi-minor of ellipse */
};
#define RT_ETO_INTERNAL_MAGIC	0xaaccee92
#define RT_ETO_CK_MAGIC(_p)	BU_CKMAG(_p,RT_ETO_INTERNAL_MAGIC,"rt_eto_internal")

/*
 *	ID_DSP
 */
#define DSP_NAME_LEN 128
struct rt_dsp_internal{
	long		magic;
#define dsp_file dsp_name /* for backwards compatibility */
	struct bu_vls	dsp_name;		/* name of data file */
	unsigned int	dsp_xcnt;		/* # samples in row of data */
	unsigned int	dsp_ycnt;		/* # of columns in data */
	unsigned short	dsp_smooth;		/* bool: surf normal interp */
#define DSP_CUT_DIR_ADAPT	'a'
#define DSP_CUT_DIR_llUR	'l'
#define DSP_CUT_DIR_ULlr	'L'
    unsigned char   dsp_cuttype;		/* type of cut to make */
        
	mat_t		dsp_mtos;		/* model to solid space */
	/* END OF USER SETABLE VARIABLES, BEGIN INTERNAL STUFF */
	mat_t		dsp_stom;		/* solid to model space 
						 * computed from dsp_mtos */
	unsigned short	*dsp_buf;		/* actual data */
	struct bu_mapped_file *dsp_mp;		/* mapped file for data */
	struct rt_db_internal *dsp_bip;		/* db object for data */
#define RT_DSP_SRC_V4_FILE	'4'
#define RT_DSP_SRC_FILE	'f'
#define RT_DSP_SRC_OBJ	'o'
	char		dsp_datasrc;		/* which type of data source */
};
#define RT_DSP_INTERNAL_MAGIC	0xde6
#define RT_DSP_CK_MAGIC(_p)	BU_CKMAG(_p,RT_DSP_INTERNAL_MAGIC,"rt_dsp_internal")


/*
 *	ID_SKETCH
 */

#define SKETCH_NAME_LEN	16
struct rt_sketch_internal
{
	long		magic;
	point_t		V;		/* default embedding of sketch */
	vect_t		u_vec;		/* u_vec and v_vec are unit vectors defining the plane of */
	vect_t		v_vec;		/* the sketch */
	int		vert_count;	/* number of vertices in this sketch */
	point2d_t	*verts;		/* array of 2D vertices that may be used as
					 * endpoints, centers, or spline control points */
/* XXX this should have a distinctive name, like rt_curve */
	struct curve {
		int		seg_count;	/* number of segments in this curve */
		int		*reverse;	/* array of ints indicating if segment should be reversed */
		genptr_t	*segments;	/* array of pointers to segments in this curve */
	} skt_curve;				/* the curve in this sketch */
};
#define RT_SKETCH_INTERNAL_MAGIC	0x736b6574	/* sket */
#define RT_SKETCH_CK_MAGIC(_p)	BU_CKMAG(_p,RT_SKETCH_INTERNAL_MAGIC,"rt_sketch_internal")

/*
 *	ID_SUBMODEL
 */
struct rt_submodel_internal {
	long		magic;
	struct bu_vls	file;	/* .g filename, 0-len --> this database. */
	struct bu_vls	treetop;	/* one treetop only */
	int		meth;		/* space partitioning method */
	/* other option flags (lazy prep, etc.)?? */
	/* REMAINING ELEMENTS PROVIDED BY IMPORT, UNUSED BY EXPORT */
	mat_t		root2leaf;
	const struct db_i *dbip;
};
#define RT_SUBMODEL_INTERNAL_MAGIC	0x7375626d	/* subm */
#define RT_SUBMODEL_CK_MAGIC(_p)	BU_CKMAG(_p,RT_SUBMODEL_INTERNAL_MAGIC,"rt_submodel_internal")

/*
 *	ID_EXTRUDE
 */

struct rt_extrude_internal
{
	long		magic;
	point_t		V;	/* vertex, start and end point of loop to be extruded */
	vect_t		h;	/* extrusion vector, may not be in (u_vec X v_vec) plane */
	vect_t		u_vec;	/* vector in U parameter direction */
	vect_t		v_vec;	/* vector in V parameter direction */
	int		keypoint;	/* index of keypoint vertex */
	char		*sketch_name;	/* name of sketch object that defines
						 * the curve to be extruded */
	struct rt_sketch_internal	*skt;	/* pointer to referenced sketch */
};

/*	Note that the u_vec and v_vec are not unit vectors, their magnitude and direction are
 *	used for scaling and rotation
 */
#define RT_EXTRUDE_INTERNAL_MAGIC	0x65787472	/* extr */
#define RT_EXTRUDE_CK_MAGIC(_p)	BU_CKMAG(_p,RT_EXTRUDE_INTERNAL_MAGIC,"rt_extrude_internal")

/*
 *	ID_CLINE
 *
 *	Implementation of FASTGEN CLINE element
 */

struct rt_cline_internal
{
	long		magic;
	point_t		v;
	vect_t		h;
	fastf_t		radius;
	fastf_t		thickness; 	/* zero thickness means volume mode */
};
#define	RT_CLINE_INTERNAL_MAGIC		0x43767378	/* CLIN */
#define RT_CLINE_CK_MAGIC(_p)	BU_CKMAG(_p,RT_CLINE_INTERNAL_MAGIC,"rt_cline_internal")

/*
 *	ID_BOT
 */

struct rt_bot_internal
{
	long		magic;
	unsigned char	mode;
	unsigned char	orientation;
	unsigned char	bot_flags;		/* flags, (indicates surface normals available, for example) */
	int		num_vertices;
	int		num_faces;
	int		*faces;			/* array of ints for faces [num_faces*3] */
	fastf_t		*vertices;		/* array of floats for vertices [num_vertices*3] */
	fastf_t		*thickness;		/* array of plate mode thicknesses (corresponds to array of faces)
						 * NULL for modes RT_BOT_SURFACE and RT_BOT_SOLID.
						 */
	struct bu_bitv	*face_mode;		/* a flag for each face indicating thickness is appended to hit point
						 * in ray direction (if bit is set), otherwise thickness is centered
						 * about hit point (NULL for modes RT_BOT_SURFACE and RT_BOT_SOLID).
						 */
	int		num_normals;
	fastf_t		*normals;		/* array of unit surface normals [num_normals*3] */
	int		num_face_normals;	/* current size of the face_normals array below (number of faces in the array) */
	int		*face_normals;		/* array of indices into the "normals" array, one per face vertex [num_face_normals*3] */
};

/* orientationss for BOT */
#define	RT_BOT_UNORIENTED		1	/* unoriented triangles */
#define RT_BOT_CCW			2	/* oriented counter-clockwise */
#define RT_BOT_CW			3	/* oriented clockwise */

/* modes for BOT */
#define RT_BOT_SURFACE			1	/* triangles represent a surface (no volume) */
#define RT_BOT_SOLID			2	/* triangles respresent the boundary of a solid object */
#define	RT_BOT_PLATE			3	/* triangles represent plates. Thicknesses are specified in "thickness" array,
						 * and face mode is specified in "face_mode" bit vector.
						 * This is the FASTGEN "plate" mode. Orientation is ignored. */
#define RT_BOT_PLATE_NOCOS		4	/* same as plate mode, but LOS is set equal to face thickness, not
						 * the thickness divided by the cosine of the obliquity angle */

/* flags for bot_flags */
#define RT_BOT_HAS_SURFACE_NORMALS    0x1     /* This primitive may have surface normals at each face vertex */
#define RT_BOT_USE_NORMALS	      0x2     /* Use the surface normals if they exist */
#define RT_BOT_USE_FLOATS	      0x4     /* Use the single precision version of "tri_specific" during prep */

#define	RT_BOT_INTERNAL_MAGIC		0x626F7472	/* botr */
#define RT_BOT_CK_MAGIC(_p)	BU_CKMAG(_p,RT_BOT_INTERNAL_MAGIC,"rt_bot_internal")


#ifdef __cplusplus
}
#endif

#endif /* SEEN_RTGEOM_H */
@


11.41
log
@merge of ansi-6-0-branch into HEAD
@
text
@d35 1
a35 1
 *  $Header$
@


11.40
log
@Added definition of RT_BOT_USE_FLOATS to allow using single precision for BOT raytracing
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.39 2002/11/29 03:12:11 jra Exp $
d95 16
d177 2
d184 1
@


11.39
log
@Added flag for using BOT normals
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.38 2002/11/27 13:42:08 jra Exp $
d512 1
@


11.39.2.1
log
@updated for merging
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.40 2003/07/28 18:54:36 jra Exp $
a511 1
#define RT_BOT_USE_FLOATS	      0x4     /* Use the single precision version of "tri_specific" during prep */
@


11.38
log
@BOT primitives can now have vertex normals
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.37 2002/08/20 17:07:30 jra Exp $
d511 1
@


11.37
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.35 2001/11/07 19:35:37 butler Exp $
d477 1
a477 1
	unsigned char	error_mode;		/* may be used to indicate error handling (ignored for now) */
d489 4
d508 3
@


11.37.4.1
log
@sync to HEAD...
@
text
@d35 1
a35 1
 *  $Header: /n/cad/c/CVS/brlcad/h/rtgeom.h,v 11.40 2003/07/28 18:54:36 jra Exp $
d477 1
a477 1
	unsigned char	bot_flags;		/* flags, (indicates surface normals available, for example) */
a488 4
	int		num_normals;
	fastf_t		*normals;		/* array of unit surface normals [num_normals*3] */
	int		num_face_normals;	/* current size of the face_normals array below (number of faces in the array) */
	int		*face_normals;		/* array of indices into the "normals" array, one per face vertex [num_face_normals*3] */
a503 5

/* flags for bot_flags */
#define RT_BOT_HAS_SURFACE_NORMALS    0x1     /* This primitive may have surface normals at each face vertex */
#define RT_BOT_USE_NORMALS	      0x2     /* Use the surface normals if they exist */
#define RT_BOT_USE_FLOATS	      0x4     /* Use the single precision version of "tri_specific" during prep */
@


11.37.2.1
log
@Initial ANSIfication
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.37 2002/08/20 17:07:30 jra Exp $
a160 2
#ifndef SEEN_RT_NURB_INTERNAL
#define SEEN_RT_NURB_INTERNAL
a165 1
#endif
@


11.37.2.2
log
@Added initial stubbed support for a new primitive -- a superquadric ellipsoid.  The primitive may be created in mged, but it has the same guts as the ellipsoid
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.37.2.1 2002/09/19 18:00:57 morrison Exp $
a92 14

/*
 *      ID_SUPERELL
 */
struct rt_superell_internal {
	long    magic;
	point_t v;
	vect_t  a;
	vect_t  b;
	vect_t  c;
};
#define RT_SUPERELL_INTERNAL_MAGIC      0xff93bb23
#define RT_SUPERELL_CK_MAGIC(_p)        BU_CKMAG(_p,RT_SUPERELL_INTERNAL_MAGIC,"rt_superell_internal")

@


11.37.2.3
log
@Added the superell specific options and database support for <n,e>, the north-south and east-west curvature params.
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.37.2.2 2003/01/31 00:11:53 morrison Exp $
a102 2
  double n;
  double e;
@


11.37.2.4
log
@sync branch with HEAD
@
text
@d35 1
a35 1
 *  $Header$
d496 1
a496 1
	unsigned char	bot_flags;		/* flags, (indicates surface normals available, for example) */
a507 4
	int		num_normals;
	fastf_t		*normals;		/* array of unit surface normals [num_normals*3] */
	int		num_face_normals;	/* current size of the face_normals array below (number of faces in the array) */
	int		*face_normals;		/* array of indices into the "normals" array, one per face vertex [num_face_normals*3] */
a522 5

/* flags for bot_flags */
#define RT_BOT_HAS_SURFACE_NORMALS    0x1     /* This primitive may have surface normals at each face vertex */
#define RT_BOT_USE_NORMALS	      0x2     /* Use the surface normals if they exist */
#define RT_BOT_USE_FLOATS	      0x4     /* Use the single precision version of "tri_specific" during prep */
@


11.36
log
@Converted from K&R to ANSI C - RFH
@
text
@a160 2
#ifndef SEEN_RT_NURB_INTERNAL
#define SEEN_RT_NURB_INTERNAL
a165 1
#endif
@


11.35
log
@Changes to have the ARS use the BOT ray intersection code.
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.34 2001/11/02 04:58:23 butler Exp $
d161 2
d168 1
@


11.34
log
@dsp_smooth is a short
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.33 2001/11/02 01:54:12 butler Exp $
d507 1
@


11.33
log
@changes to _describe() prototype in raytrace.h
Values for DSP cut type flags changed to make human editing easier.
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.32 2001/10/31 23:01:23 butler Exp $
d366 1
a366 1
	unsigned char	dsp_smooth;		/* bool: surf normal interp */
@


11.32
log
@changes to make db get work on DSP
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.31 2001/08/11 13:17:12 butler Exp $
d367 3
a369 3
#define DSP_CUT_DIR_ADAPT	'0'
#define DSP_CUT_DIR_llUR	'1'
#define DSP_CUT_DIR_ULlr	'2'
@


11.31
log
@Changes to DSP structure
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.30 2001/04/25 13:44:40 jra Exp $
d367 3
a370 3
#define DSP_CUT_DIR_ADAPT	0
#define DSP_CUT_DIR_llUR	1
#define DSP_CUT_DIR_ULlr	2
d379 3
a386 3
#define RT_DSP_SRC_V4_FILE	'4'
#define RT_DSP_SRC_FILE	'f'
#define RT_DSP_SRC_OBJ	'o'
@


11.30
log
@Additions for bezier curves
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.29 2001/04/05 19:35:08 morrison Exp $
d366 6
a371 1
	unsigned short	dsp_smooth;		/* bool: surf normal interp */
@


11.29
log
@updated SIGNED to signed
updated CONST to const
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.28 2001/03/23 22:33:48 butler Exp $
d396 1
a396 1
					 * endpoints, centers, or NURB control points */
@


11.28
log
@Changes to support new DSP primitive representation
@
text
@d35 1
a35 1
 *  $Header: /n/tgm/d/CVS/brlcad/h/rtgeom.h,v 11.27 2001/03/21 22:37:29 jra Exp $
d418 1
a418 1
	CONST struct db_i *dbip;
@


11.27
log
@Submodel now has unlimited length names
@
text
@d35 1
a35 1
 *  $Header: /d/CVS/brlcad/h/rtgeom.h,v 11.26 2000/07/14 19:41:23 butler Exp $
d362 2
a363 1
	struct bu_vls	dsp_file;		/* name of data file */
d371 4
a374 2
	unsigned short	*dsp_buf;
	struct bu_mapped_file *dsp_mp;	/* actual data */
d378 4
@


11.26
log
@Extended comment
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.25 2000/06/29 20:21:55 jra Exp $
d405 2
a406 2
	char		file[128];	/* .g filename, 0-len --> this database. */
	char		treetop[128];	/* one treetop only */
@


11.25
log
@The internal format of extrusion solid changed slightly for database v5 support
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.24 2000/06/29 14:17:18 butler Exp $
d368 2
a369 1
	mat_t		dsp_stom;		/* solid to model space */
@


11.24
log
@Deleted unused elements from DSP, updated DSP to unlimited length string
for filename
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.23 2000/04/01 03:41:27 mike Exp $
d427 1
a427 1
	char		sketch_name[SKETCH_NAME_LEN];	/* name of sketch object that defines
@


11.23
log
@
Added comment.
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.22 2000/03/16 13:39:27 jra Exp $
d362 4
a365 7
	char		dsp_file[DSP_NAME_LEN];	/* name of data file */
	unsigned	dsp_xcnt;		/* # samples in row of data */
	unsigned	dsp_ycnt;		/* # of columns in data */
	int		dsp_smooth;		/* bool: surf normal interp */
	double		dsp_xs;
	double		dsp_ys;
	double		dsp_zs;
@


11.23.2.1
log
@Added some comments to the DSP structure definition
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.23 2000/04/01 03:41:27 mike Exp $
d366 3
a368 3
	double		dsp_xs;			/* not used */
	double		dsp_ys;			/* not used */
	double		dsp_zs;			/* not used */
d372 1
a372 1
	unsigned short	*dsp_buf;		/* set to dsp_mp buffer addr */
@


11.23.2.2
log
@rtgeom.h comment changed on DSP
vmath.h modified to skip copy in VMINMAX when values are equal
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.23.2.1 2001/01/16 23:40:15 butler Exp $
d366 1
a366 1
	double		dsp_xs;			/* pirated for pieces */
@


11.22
log
@Sketch solid can only have one curve now
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.21 2000/03/02 14:40:29 jra Exp $
d392 1
@


11.21
log
@Eliminated FGP solids and added CLINE solid
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.20 2000/02/20 06:40:50 butler Exp $
a391 2

	int		curve_count;	/* number of curves in this sketch */
a392 1
		char		crv_name[SKETCH_NAME_LEN];
d396 1
a396 1
	} *curves;			/* array of curves in this sketch */
a430 2

	char		curve_name[SKETCH_NAME_LEN];	/* name of curve (in sketch) to be extruded */
@


11.20
log
@Changes necessary so the DSP can take all of its input in network-order.
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.19 2000/01/14 02:58:16 mike Exp $
d438 4
d446 3
a448 1
 *	ID_FGP
d451 1
a451 1
struct rt_fgp_internal
d454 4
a457 8
	fastf_t		thickness;
	int		mode;
	char		referenced_solid[NAMELEN];

	/* the following is used by import, ignored by export */
	mat_t		xform;
	struct directory *ref_dp;
	CONST struct db_i	*dbip;
d459 2
a460 6

#define	RT_FGP_CENTER_MODE	1	/* thickness is centered about hit point */
#define RT_FGP_FRONT_MODE	2	/* thickness is appended to hit point in ray direction */

#define	RT_FGP_INTERNAL_MAGIC		0x706c6174	/* plat */
#define RT_FGP_CK_MAGIC(_p)	BU_CKMAG(_p,RT_FGP_INTERNAL_MAGIC,"rt_fgp_internal")
@


11.19
log
@
Added C++ support
@
text
@d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.18 1999/12/29 22:36:32 mike Exp $
d372 1
@


11.18
log
@
JRA added comments
@
text
@d11 1
a11 2
 *  Depends on having machine.h, vmath.h, and rtlist.h included first.
 *  RT_xxx_CK_MAGIC() can only be used if raytrace.h is included too.
d35 1
a35 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.17 1999/12/22 04:55:29 mike Exp $
d41 4
d502 4
@


11.17
log
@
Addition bu_mapped_file support.
db_open(,"r") now uses bu_open_mapped_file().
@
text
@d36 1
a36 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.16 1999/12/08 13:59:10 jra Exp $
d383 2
a384 2
	vect_t		u_vec;
	vect_t		v_vec;
@


11.16
log
@Added BOT plate mode where LOS is the same as the thickness
(no cosine obliquity angle effect)
@
text
@d36 1
a36 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.15 1999/11/26 21:45:42 mike Exp $
d404 4
a407 4
	long	magic;
	char	file[128];	/* .g filename, 0-len --> this database. */
	char	treetop[128];	/* one treetop only */
	int	meth;		/* space partitioning method */
d410 2
a411 1
	mat_t	root2leaf;
@


11.15
log
@
Lint cleanups
@
text
@d36 1
a36 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.14 1999/11/17 04:38:18 mike Exp $
d492 3
a494 2
						 * This is the FASTGEN "plate" mode. Orientation is ignored.
						 */
@


11.14
log
@
Moved SUBMODEL defines in.
@
text
@d36 1
a36 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.13 1999/11/08 14:57:11 jra Exp $
d450 1
a450 1
	struct db_i	*dbip;
@


11.13
log
@
Added to the BOT definition.
@
text
@d36 1
a36 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.12 1999/10/19 20:51:28 jra Exp $
d400 14
@


11.12
log
@Added basics for "Bag O' Triangles".
@
text
@d36 1
a36 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.11 1999/10/12 13:58:12 jra Exp $
d454 1
a454 1
	unsigned char	error_mode;		/* may be used to indicate error handling */
d459 7
d476 4
@


11.11
log
@Added fgp solid (FastGen Plate mode)
@
text
@d36 1
a36 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.10 1999/07/02 21:24:44 mike Exp $
d444 28
@


11.10
log
@
Eliminated dependence on compat4.h
@
text
@d36 1
a36 1
 *  $Header: /c/CVS/brlcad/h/rtgeom.h,v 11.9 1998/03/19 14:56:42 jra Exp $
d44 2
d422 22
@


11.9
log
@Added sketch and extrusion.
@
text
@d36 1
a36 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 11.8 1997/07/01 23:41:04 butler Exp jra $
d59 1
a59 1
#define RT_TOR_CK_MAGIC(_p)	RT_CKMAG(_p,RT_TOR_INTERNAL_MAGIC,"rt_tor_internal")
d74 1
a74 1
#define RT_TGC_CK_MAGIC(_p)	RT_CKMAG(_p,RT_TGC_INTERNAL_MAGIC,"rt_tgc_internal")
d87 1
a87 1
#define RT_ELL_CK_MAGIC(_p)	RT_CKMAG(_p,RT_ELL_INTERNAL_MAGIC,"rt_ell_internal")
d100 1
a100 1
#define RT_ARB_CK_MAGIC(_p)	RT_CKMAG(_p,RT_ARB_INTERNAL_MAGIC,"rt_arb_internal")
d112 1
a112 1
#define RT_ARS_CK_MAGIC(_p)	RT_CKMAG(_p,RT_ARS_INTERNAL_MAGIC,"rt_ars_internal")
d122 1
a122 1
#define RT_HALF_CK_MAGIC(_p)	RT_CKMAG(_p,RT_HALF_INTERNAL_MAGIC,"rt_half_internal")
d135 1
a135 1
#define RT_GRIP_CK_MAGIC(_p)	RT_CKMAG(_p,RT_GRIP_INTERNAL_MAGIC,"rt_grip_internal")
d152 1
a152 1
#define RT_PG_CK_MAGIC(_p)	RT_CKMAG(_p,RT_PG_INTERNAL_MAGIC,"rt_pg_internal")
d163 1
a163 1
#define RT_NURB_CK_MAGIC( _p) RT_CKMAG(_p,RT_NURB_INTERNAL_MAGIC,"rt_nurb_internal");
d189 1
a189 1
	struct rt_mapped_file	*mp;	/* actual data */
d192 1
a192 1
#define RT_EBM_CK_MAGIC(_p)	RT_CKMAG(_p,RT_EBM_INTERNAL_MAGIC,"rt_ebm_internal")
d212 1
a212 1
#define RT_VOL_CK_MAGIC(_p)	RT_CKMAG(_p,RT_VOL_INTERNAL_MAGIC,"rt_vol_internal")
d234 1
a234 1
	struct rt_mapped_file	*mp;	/* actual data */
d237 1
a237 1
#define RT_HF_CK_MAGIC(_p)	RT_CKMAG(_p,RT_HF_INTERNAL_MAGIC,"rt_hf_internal")
d248 1
a248 1
#define RT_ARBN_CK_MAGIC(_p)	RT_CKMAG(_p,RT_ARBN_INTERNAL_MAGIC,"rt_arbn_internal")
d260 1
a260 1
#define RT_PIPE_CK_MAGIC(_p)	RT_CKMAG(_p,RT_PIPE_INTERNAL_MAGIC,"rt_pipe_internal")
d275 1
a275 1
#define RT_PART_CK_MAGIC(_p)	RT_CKMAG(_p,RT_PART_INTERNAL_MAGIC,"rt_part_internal")
d292 1
a292 1
#define RT_RPC_CK_MAGIC(_p)	RT_CKMAG(_p,RT_RPC_INTERNAL_MAGIC,"rt_rpc_internal")
d306 1
a306 1
#define RT_RHC_CK_MAGIC(_p)	RT_CKMAG(_p,RT_RHC_INTERNAL_MAGIC,"rt_rhc_internal")
d320 1
a320 1
#define RT_EPA_CK_MAGIC(_p)	RT_CKMAG(_p,RT_EPA_INTERNAL_MAGIC,"rt_epa_internal")
d335 1
a335 1
#define RT_EHY_CK_MAGIC(_p)	RT_CKMAG(_p,RT_EHY_INTERNAL_MAGIC,"rt_ehy_internal")
d349 1
a349 1
#define RT_ETO_CK_MAGIC(_p)	RT_CKMAG(_p,RT_ETO_INTERNAL_MAGIC,"rt_eto_internal")
d367 1
a367 1
	struct rt_mapped_file *dsp_mp;	/* actual data */
d370 1
a370 1
#define RT_DSP_CK_MAGIC(_p)	RT_CKMAG(_p,RT_DSP_INTERNAL_MAGIC,"rt_dsp_internal")
d396 1
a396 1
#define RT_SKETCH_CK_MAGIC(_p)	RT_CKMAG(_p,RT_SKETCH_INTERNAL_MAGIC,"rt_sketch_internal")
d418 1
a418 1
#define RT_EXTRUDE_CK_MAGIC(_p)	RT_CKMAG(_p,RT_EXTRUDE_INTERNAL_MAGIC,"rt_extrude_internal")
@


11.8
log
@added element to dsp internal respresentation to choose smoothing on/off
@
text
@d36 1
a36 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 11.7 1997/05/22 09:47:55 butler Exp butler $
d371 48
@


11.7
log
@added dsp solid
@
text
@d36 1
a36 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 11.6 1997/05/19 17:04:58 butler Exp butler $
d360 1
@


11.6
log
@goodbye fbm solid
@
text
@d36 1
a36 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 11.5 1997/04/25 06:09:04 butler Exp butler $
d350 20
@


11.5
log
@added thresh element to rt_fbm_internal
@
text
@d36 1
a36 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 11.4 1997/04/25 05:59:40 butler Exp butler $
a349 22

/*
 *	ID_FBM
 */
struct rt_fbm_internal {
	long	magic;
	/* mapping from model coordinates to solid coordinates */
	point_t	fbm_V;	/* location of center of bounding sphere */
	fastf_t fbm_radius;	/* radius of of bounding sphere */

	/* fBm paramters */
	fastf_t	fbm_octaves;	/* # octaves in noise */
	fastf_t	fbm_lacunarity;
	fastf_t	fbm_h;
	fastf_t	fbm_thresh;

	/* mapping from solid coordinates to noise coordinates */
	mat_t	fbm_mat;

};
#define RT_FBM_INTERNAL_MAGIC	0xfb1
#define RT_FBM_CK_MAGIC(_p)	RT_CKMAG(_p,RT_FBM_INTERNAL_MAGIC,"rt_fbm_internal")
@


11.4
log
@added g_fbm.c support
@
text
@d36 1
a36 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 11.3 1996/08/31 11:08:15 mike Exp butler $
d364 2
@


11.3
log
@bu.h
@
text
@d36 1
a36 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 11.2 1995/12/01 02:41:17 mike Exp mike $
d350 20
@


11.2
log
@LIBNURB data structures have been fully merged withNMG data structures.
@
text
@d18 1
d36 1
a36 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 11.1 95/01/04 09:48:40 mike Rel4_4 $
d255 1
a255 1
	struct rt_list	pipe_segs_head;
@


11.1
log
@Release_4.4
@
text
@d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 10.9 94/12/27 14:16:25 stay Exp $
d154 1
a154 1
#ifdef NURB_H				/* Only if we have seen struct snurb */
d158 1
a158 1
	struct snurb	**srfs;		/* The surfaces themselves */
@


10.9
log
@fixed subscript problem with RT_NURB_GET_CONTROL_POINT, need the size of the rows (not the # of cols)
@
text
@d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 10.8 94/10/29 00:57:08 mike Exp Locker: stay $
@


10.8
log
@Changed EBM over to mapped files.
@
text
@d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 10.7 94/10/28 21:48:44 mike Exp Locker: mike $
d165 1
a165 1
	((_v)*(_s)->s_size[1]+(_u))*RT_NURB_EXTRACT_COORDS((_s)->pt_type)])
@


10.7
log
@Added rt_hf_internal.
@
text
@d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 10.6 94/08/27 02:57:32 mike Exp Locker: mike $
d188 1
a188 1
	unsigned char	*map;		/* actual bitmap, with padding */
@


10.6
log
@Added NURB macro
@
text
@d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 10.5 94/03/11 04:25:34 cjohnson Exp Locker: mike $
d212 25
@


10.5
log
@Add grip pseudo solid.
@
text
@d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 10.4 1993/02/24 21:18:22 mike Exp $
d164 2
@


10.4
log
@Explained the NMG case better.
@
text
@d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 10.3 92/06/12 23:52:53 mike Exp Locker: mike $
d123 13
@


10.3
log
@Added rt_nurb_internal
@
text
@d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 10.2 92/02/14 15:07:21 mmark Exp Locker: mike $
d152 8
a159 1
/* ID_NMG */
@


10.2
log
@added new erim prim structs
@
text
@d14 10
d35 1
a35 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.13 91/07/10 23:55:58 butler Exp $
d141 10
@


10.1
log
@Release_4.0
@
text
@d213 71
@


1.13
log
@undo the damage that alliant has done to us by defineing r_a to be r_gen.a
@
text
@d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.12 91/06/14 04:30:48 mike Exp $
@


1.12
log
@Added xform matrix to EBM and VOL solids
@
text
@d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.11 91/06/13 02:00:55 mike Exp $
d30 2
@


1.11
log
@Comments
@
text
@d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.10 91/06/13 01:58:33 mike Exp $
d141 2
a142 1
	double		tallness;	/* Z dimension (mm) */
d162 1
@


1.10
log
@Changed so torus H is unit length.
@
text
@d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.9 91/06/03 19:18:02 mike Exp $
d37 3
a39 3
	vect_t	h;		/* normal, r_h length */
	fastf_t	r_h;		/* radius in H direction */
	fastf_t	r_a;		/* radius in A direction */
@


1.9
log
@Eliminated magic number collisions
@
text
@d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.8 91/03/04 19:55:39 mike Exp $
d36 5
a40 2
	point_t	v;
	vect_t	h;		/* r_h length */
a42 2
	fastf_t	r_h;		/* radius in H direction */
	fastf_t	r_a;		/* radius in A direction */
@


1.8
log
@PG_INTERNAL_MAGIC had too many digits.
@
text
@d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.7 91/02/08 22:45:13 mike Exp $
d44 1
a44 1
#define RT_TOR_INTERNAL_MAGIC	0x9bffed887
d92 1
a92 1
	int	magic;
d107 1
a107 1
#define RT_HALF_INTERNAL_MAGIC	0xaabbdd87
d181 1
a181 1
	int		pipe_magic;
d186 1
a186 1
#define RT_PIPE_INTERNAL_MAGIC	0x77ddbbe3
@


1.7
log
@Changed layout of pipe structure.
Noted which elements of pipe and particle are unused by export
@
text
@d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.6 91/01/25 21:23:43 mike Exp $
d124 1
a124 1
#define RT_PG_INTERNAL_MAGIC	0x9bffed887
@


1.6
log
@Protected against multiple inclusions
@
text
@d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.5 91/01/25 20:34:41 mike Exp $
d182 2
a184 1
	struct rt_list	pipe_segs_head;
d198 1
@


1.5
log
@added "rt_" prefix to everything
@
text
@a13 2
 *  XXX Should structure names start with rt_ ?  Probably yes.
 *
d25 1
a25 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.4 91/01/25 20:23:41 mike Exp $
d28 3
d205 2
@


1.4
log
@Added EBM and VOL
@
text
@d27 1
a27 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.3 91/01/23 22:42:34 mike Exp $
d33 1
a33 1
struct tor_internal {
d44 1
a44 1
#define RT_TOR_CK_MAGIC(_p)	RT_CKMAG(_p,RT_TOR_INTERNAL_MAGIC,"tor_internal")
d49 1
a49 1
struct tgc_internal {
d59 1
a59 1
#define RT_TGC_CK_MAGIC(_p)	RT_CKMAG(_p,RT_TGC_INTERNAL_MAGIC,"tgc_internal")
d64 1
a64 1
struct ell_internal  {
d72 1
a72 1
#define RT_ELL_CK_MAGIC(_p)	RT_CKMAG(_p,RT_ELL_INTERNAL_MAGIC,"ell_internal")
d90 1
a90 1
struct ars_internal {
d97 1
a97 1
#define RT_ARS_CK_MAGIC(_p)	RT_CKMAG(_p,RT_ARS_INTERNAL_MAGIC,"ars_internal")
d102 1
a102 1
struct half_internal  {
d107 1
a107 1
#define RT_HALF_CK_MAGIC(_p)	RT_CKMAG(_p,RT_HALF_INTERNAL_MAGIC,"half_internal")
d168 1
a168 1
struct arbn_internal  {
d174 1
a174 1
#define RT_ARBN_CK_MAGIC(_p)	RT_CKMAG(_p,RT_ARBN_INTERNAL_MAGIC,"arbn_internal")
d179 1
a179 1
struct pipe_internal {
d185 1
a185 1
#define RT_PIPE_CK_MAGIC(_p)	RT_CKMAG(_p,RT_PIPE_INTERNAL_MAGIC,"pipe_internal")
d190 1
a190 1
struct part_internal {
d199 1
a199 1
#define RT_PART_CK_MAGIC(_p)	RT_CKMAG(_p,RT_PART_INTERNAL_MAGIC,"part_internal")
@


1.3
log
@Added ARB
@
text
@d27 1
a27 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.2 91/01/15 23:37:35 mike Exp $
d130 15
a144 1
/* ID_EBM */
d146 18
a163 1
/* ID_VOL */
@


1.2
log
@Added ELL, SPH, and POLY.
@
text
@d27 1
a27 1
 *  $Header: /m/cad/h/RCS/rtgeom.h,v 1.1 91/01/15 20:42:43 mike Exp $
d74 12
a85 1
/* ID_ARB8 */
@


1.1
log
@Initial revision
@
text
@d14 2
d27 1
a27 1
 *  $Header$
d61 12
a72 1
/* ID_ELL */
d98 16
a113 1
/* ID_POLY */
a115 2

/* ID_SPH */
@
