head	11.4;
access;
symbols
	ansi-20040405-merged:11.2.4.1
	postmerge-20040405-ansi:11.3
	premerge-20040404-ansi:11.3
	postmerge-autoconf:11.3
	autoconf-freeze:11.2.12.1
	premerge-autoconf:11.3
	ansi-20040316-freeze:11.2
	postmerge-20040315-windows:11.3
	premerge-20040315-windows:11.2
	windows-20040315-freeze:11.2.6.1
	autoconf-20031203:11.2
	autoconf-20031202:11.2
	autoconf-branch:11.2.0.12
	phong-branch:11.2.0.10
	photonmap-branch:11.2.0.8
	rel-6-1-DP:11.2
	windows-branch:11.2.0.6
	rel-6-0-2:11.2
	ansi-branch:11.2.0.4
	rel-6-0-1-branch:11.2.0.2
	hartley-6-0-post:11.2
	hartley-6-0-pre:11.2
	rel-6-0-1:11.2
	rel-6-0:11.2
	rel-5-4:11.1.2.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1.2.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1;
locks; strict;
comment	@ * @;


11.4
date	2004.05.24.04.11.52;	author morrison;	state dead;
branches;
next	11.3;

11.3
date	2004.03.16.14.10.46;	author morrison;	state Exp;
branches;
next	11.2;

11.2
date	2000.12.06.22.02.54;	author bparker;	state Exp;
branches
	11.2.4.1
	11.2.6.1
	11.2.12.1;
next	11.1;

11.1
date	99.10.22.19.50.44;	author jra;	state Exp;
branches
	11.1.2.1;
next	;

11.1.2.1
date	2000.12.06.22.02.25;	author bparker;	state Exp;
branches;
next	;

11.2.4.1
date	2004.03.17.21.16.11;	author morrison;	state Exp;
branches;
next	;

11.2.6.1
date	2002.09.26.23.03.44;	author morrison;	state Exp;
branches;
next	11.2.6.2;

11.2.6.2
date	2004.03.17.04.10.33;	author morrison;	state Exp;
branches;
next	;

11.2.12.1
date	2004.03.18.18.00.45;	author erikg;	state Exp;
branches;
next	;


desc
@@


11.4
log
@moved/renamed from top-level h/ to top-level include/
@
text
@/*
 * ------------------------------------------------------------------------
 *      PACKAGE:  [incr Tk]
 *  DESCRIPTION:  Building mega-widgets with [incr Tcl]
 *
 *  [incr Tk] provides a framework for building composite "mega-widgets"
 *  using [incr Tcl] classes.  It defines a set of base classes that are
 *  specialized to create all other widgets.
 *
 *  ADDING [incr Tk] TO A Tcl-BASED APPLICATION:
 *
 *    To add [incr Tk] facilities to a Tcl application, modify the
 *    Tcl_AppInit() routine as follows:
 *
 *    1) Include the header files for [incr Tcl] and [incr Tk] near
 *       the top of the file containing Tcl_AppInit():
 *
 *         #include "itcl.h"
 *         #include "itk.h"
 *
 *    2) Within the body of Tcl_AppInit(), add the following lines:
 *
 *         if (Itcl_Init(interp) == TCL_ERROR) {
 *             return TCL_ERROR;
 *         }
 *         if (Itk_Init(interp) == TCL_ERROR) {
 *             return TCL_ERROR;
 *         }
 *
 *    3) Link your application with libitcl.a and libitk.a
 *
 *    NOTE:  An example file "tkAppInit.c" containing the changes shown
 *           above is included in this distribution.
 *
 * ========================================================================
 *  AUTHOR:  Michael J. McLennan
 *           Bell Labs Innovations for Lucent Technologies
 *           mmclennan@@lucent.com
 *           http://www.tcltk.com/itcl
 *
 *     RCS:  $Id: itk.h,v 11.3 2004/03/16 14:10:46 morrison Exp $
 * ========================================================================
 *           Copyright (c) 1993-1998  Lucent Technologies, Inc.
 * ------------------------------------------------------------------------
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 */
#ifndef ITK_H
#define ITK_H

#ifndef TCL_ALPHA_RELEASE
#   define TCL_ALPHA_RELEASE	0
#endif
#ifndef TCL_BETA_RELEASE
#   define TCL_BETA_RELEASE	1
#endif
#ifndef TCL_FINAL_RELEASE
#   define TCL_FINAL_RELEASE	2
#endif


#define ITK_MAJOR_VERSION	3
#define ITK_MINOR_VERSION	3
#define ITK_RELEASE_LEVEL	TCL_BETA_RELEASE
#define ITK_RELEASE_SERIAL	1

#define ITK_VERSION		"3.3"
#define ITK_PATCH_LEVEL		"3.3b1"


/*
 * A special definition used to allow this header file to be included
 * in resource files so that they can get obtain version information from
 * this file.  Resource compilers don't like all the C stuff, like typedefs
 * and procedure declarations, that occur below.
 */

#ifndef RC_INVOKED

#include "tk.h"
#include "itclInt.h"

#undef TCL_STORAGE_CLASS
#ifdef BUILD_itk
#   define TCL_STORAGE_CLASS DLLEXPORT
#else
#   ifdef USE_ITK_STUBS
#	define TCL_STORAGE_CLASS
#   else
#	define TCL_STORAGE_CLASS DLLIMPORT
#   endif
#endif

/*
 *  List of options in alphabetical order:
 */
typedef struct ItkOptList {
    Tcl_HashTable *options;     /* list containing the real options */
    Tcl_HashEntry **list;       /* gives ordering of options */
    int len;                    /* number of entries in order list */
    int max;                    /* maximum size of order list */
} ItkOptList;

/*
 *  List of options created in the class definition:
 */
typedef struct ItkClassOptTable {
    Tcl_HashTable options;        /* option storage with fast lookup */
    ItkOptList order;             /* gives ordering of options */
} ItkClassOptTable;

/*
 *  Each option created in the class definition:
 */
typedef struct ItkClassOption {
    ItclMember *member;           /* info about this option */
    char *resName;                /* resource name in X11 database */
    char *resClass;               /* resource class name in X11 database */
    char *init;                   /* initial value for option */
} ItkClassOption;

#include "itkDecls.h"

/*
 *  This function is contained in the itkstub static library
 */

#ifdef USE_ITK_STUBS
TCL_EXTERNC CONST char *
	Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    CONST char *version, int exact));
#else
#define Itk_InitStubs(interp, version, exact) \
      Tcl_PkgRequire(interp, "Itk", version, exact)
#endif

/*
 * Public functions that are not accessible via the stubs table.
 */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* RC_INVOKED */
#endif /* ITK_H */
@


11.3
log
@merge of windows-6-0-branch into head
@
text
@d41 1
a41 1
 *     RCS:  $Id$
@


11.2
log
@Mods to support tcl/tk/itcl upgrade
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.7 2000/08/04 19:19:12 davidg Exp $
d51 20
d78 1
a78 1
#ifndef RESOURCE_INCLUDED
d80 1
a81 1
#include "tk.h"
d83 1
d85 7
a91 2
# undef TCL_STORAGE_CLASS
# define TCL_STORAGE_CLASS DLLEXPORT
d129 6
a134 3

char *		Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    char *version, int exact));
d141 2
a142 2
# undef TCL_STORAGE_CLASS
# define TCL_STORAGE_CLASS DLLIMPORT
d144 1
a144 1
#endif /* RESOURCE INCLUDED */
@


11.2.12.1
log
@merge from head...
@
text
@d41 1
a41 1
 *     RCS:  $Id$
a50 20
#ifndef TCL_ALPHA_RELEASE
#   define TCL_ALPHA_RELEASE	0
#endif
#ifndef TCL_BETA_RELEASE
#   define TCL_BETA_RELEASE	1
#endif
#ifndef TCL_FINAL_RELEASE
#   define TCL_FINAL_RELEASE	2
#endif


#define ITK_MAJOR_VERSION	3
#define ITK_MINOR_VERSION	3
#define ITK_RELEASE_LEVEL	TCL_BETA_RELEASE
#define ITK_RELEASE_SERIAL	1

#define ITK_VERSION		"3.3"
#define ITK_PATCH_LEVEL		"3.3b1"


d58 1
a58 1
#ifndef RC_INVOKED
d60 1
a61 1
#include "itclInt.h"
a62 1
#undef TCL_STORAGE_CLASS
d64 2
a65 7
#   define TCL_STORAGE_CLASS DLLEXPORT
#else
#   ifdef USE_ITK_STUBS
#	define TCL_STORAGE_CLASS
#   else
#	define TCL_STORAGE_CLASS DLLIMPORT
#   endif
d103 3
a105 6
TCL_EXTERNC CONST char *
	Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    CONST char *version, int exact));
#else
#define Itk_InitStubs(interp, version, exact) \
      Tcl_PkgRequire(interp, "Itk", version, exact)
d112 2
a113 2
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT
d115 1
a115 1
#endif /* RC_INVOKED */
@


11.2.4.1
log
@sync branch with HEAD
@
text
@d41 1
a41 1
 *     RCS:  $Id$
a50 20
#ifndef TCL_ALPHA_RELEASE
#   define TCL_ALPHA_RELEASE	0
#endif
#ifndef TCL_BETA_RELEASE
#   define TCL_BETA_RELEASE	1
#endif
#ifndef TCL_FINAL_RELEASE
#   define TCL_FINAL_RELEASE	2
#endif


#define ITK_MAJOR_VERSION	3
#define ITK_MINOR_VERSION	3
#define ITK_RELEASE_LEVEL	TCL_BETA_RELEASE
#define ITK_RELEASE_SERIAL	1

#define ITK_VERSION		"3.3"
#define ITK_PATCH_LEVEL		"3.3b1"


d58 1
a58 1
#ifndef RC_INVOKED
d60 1
a61 1
#include "itclInt.h"
a62 1
#undef TCL_STORAGE_CLASS
d64 2
a65 7
#   define TCL_STORAGE_CLASS DLLEXPORT
#else
#   ifdef USE_ITK_STUBS
#	define TCL_STORAGE_CLASS
#   else
#	define TCL_STORAGE_CLASS DLLIMPORT
#   endif
d103 3
a105 6
TCL_EXTERNC CONST char *
	Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    CONST char *version, int exact));
#else
#define Itk_InitStubs(interp, version, exact) \
      Tcl_PkgRequire(interp, "Itk", version, exact)
d112 2
a113 2
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT
d115 1
a115 1
#endif /* RC_INVOKED */
@


11.2.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.9 2001/05/25 00:15:04 davygrvy Exp $
d58 1
a58 1
#ifndef RC_INVOKED
d104 1
a104 1
CONST char *		Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
d115 1
a115 1
#endif /* RC_INVOKED */
@


11.2.6.2
log
@remerge head into branch just in case someone checks out this branch later
@
text
@d41 1
a41 1
 *     RCS:  $Id$
a50 20
#ifndef TCL_ALPHA_RELEASE
#   define TCL_ALPHA_RELEASE	0
#endif
#ifndef TCL_BETA_RELEASE
#   define TCL_BETA_RELEASE	1
#endif
#ifndef TCL_FINAL_RELEASE
#   define TCL_FINAL_RELEASE	2
#endif


#define ITK_MAJOR_VERSION	3
#define ITK_MINOR_VERSION	3
#define ITK_RELEASE_LEVEL	TCL_BETA_RELEASE
#define ITK_RELEASE_SERIAL	1

#define ITK_VERSION		"3.3"
#define ITK_PATCH_LEVEL		"3.3b1"


d60 1
a61 1
#include "itclInt.h"
a62 1
#undef TCL_STORAGE_CLASS
d64 2
a65 7
#   define TCL_STORAGE_CLASS DLLEXPORT
#else
#   ifdef USE_ITK_STUBS
#	define TCL_STORAGE_CLASS
#   else
#	define TCL_STORAGE_CLASS DLLIMPORT
#   endif
d103 3
a105 6
TCL_EXTERNC CONST char *
	Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    CONST char *version, int exact));
#else
#define Itk_InitStubs(interp, version, exact) \
      Tcl_PkgRequire(interp, "Itk", version, exact)
d112 2
a113 2
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT
@


11.1
log
@Added incrtcl headr files
@
text
@d41 1
a41 1
 *     RCS:  $Id$
d96 1
d99 1
a99 1
 *  Exported functions:
a100 2
EXTERN int Itk_Init _ANSI_ARGS_((Tcl_Interp *interp));
EXTERN int Itk_SafeInit _ANSI_ARGS_((Tcl_Interp *interp));
d102 1
a102 7
/*
 *  Functions used internally by this package:
 */
EXTERN int Itk_ConfigBodyCmd _ANSI_ARGS_((ClientData cdata,
    Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]));
EXTERN int Itk_UsualCmd _ANSI_ARGS_((ClientData cdata,
    Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]));
d104 3
a106 29
/*
 *  Functions for managing options included in class definitions:
 */
EXTERN int Itk_ClassOptionDefineCmd _ANSI_ARGS_((ClientData cdata,
    Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]));
EXTERN int Itk_ClassOptionIllegalCmd _ANSI_ARGS_((ClientData cdata,
    Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]));

EXTERN int Itk_ConfigClassOption _ANSI_ARGS_((Tcl_Interp *interp,
    ItclObject *contextObj, ClientData cdata, char* newVal));

EXTERN ItkClassOptTable* Itk_CreateClassOptTable _ANSI_ARGS_((
    Tcl_Interp *interp, ItclClass *cdefn));
EXTERN ItkClassOptTable* Itk_FindClassOptTable _ANSI_ARGS_((
    ItclClass *cdefn));
EXTERN void Itk_DeleteClassOptTable _ANSI_ARGS_((Tcl_Interp *interp,
    ItclClass *cdefn));

EXTERN int Itk_CreateClassOption _ANSI_ARGS_((Tcl_Interp *interp,
    ItclClass *cdefn, char *switchName, char *resName, char *resClass,
    char *defVal, char *config, ItkClassOption **optPtr));
EXTERN ItkClassOption* Itk_FindClassOption _ANSI_ARGS_((
    ItclClass *cdefn, char *switchName));
EXTERN void Itk_DelClassOption _ANSI_ARGS_((ItkClassOption *opt));

/*
 *  Functions needed for the Archetype base class:
 */
EXTERN int Itk_ArchetypeInit _ANSI_ARGS_((Tcl_Interp* interp));
d109 1
a109 1
 *  Functions for maintaining the ordered option list:
a110 8
EXTERN void Itk_OptListInit _ANSI_ARGS_((ItkOptList* olist,
    Tcl_HashTable *options));
EXTERN void Itk_OptListFree _ANSI_ARGS_((ItkOptList* olist));

EXTERN void Itk_OptListAdd _ANSI_ARGS_((ItkOptList* olist,
    Tcl_HashEntry *entry));
EXTERN void Itk_OptListRemove _ANSI_ARGS_((ItkOptList* olist,
    Tcl_HashEntry *entry));
@


11.1.2.1
log
@Mods to support tcl/tk/itcl upgrade
@
text
@d41 1
a41 1
 *     RCS:  $Id: itk.h,v 1.7 2000/08/04 19:19:12 davidg Exp $
a95 1
#include "itkDecls.h"
d98 1
a98 1
 *  This function is contained in the itkstub static library
d100 2
d103 18
a120 1
#ifdef USE_ITK_STUBS
d122 18
a139 3
char *		Itk_InitStubs _ANSI_ARGS_((Tcl_Interp *interp,
			    char *version, int exact));
#endif
d142 1
a142 1
 * Public functions that are not accessible via the stubs table.
d144 8
@

