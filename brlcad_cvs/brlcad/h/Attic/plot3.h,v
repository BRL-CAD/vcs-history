head	11.9;
access;
symbols
	ansi-20040405-merged:11.8
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.8
	premerge-autoconf:11.8
	ansi-20040316-freeze:11.8
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.8
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.12
	phong-branch:11.8.0.10
	photonmap-branch:11.8.0.8
	rel-6-1-DP:11.8
	windows-branch:11.8.0.6
	rel-6-0-2:11.8
	ansi-branch:11.8.0.4
	rel-6-0-1-branch:11.8.0.2
	hartley-6-0-post:11.8
	hartley-6-0-pre:11.8
	rel-6-0-1:11.8
	rel-6-0:11.8
	rel-5-4:11.5
	offsite-5-3-pre:11.5
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.3
	rel-5-0-beta:11.3
	rel-4-5:11.3
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.24.04.11.53;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2001.04.05.19.35.07;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2001.04.02.21.37.53;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2001.03.31.01.56.34;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2000.03.29.18.57.14;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	99.11.26.22.16.08;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	97.01.08.03.54.59;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.12.31.17.35.56;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.48.30;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.35.29;	author mike;	state Rel4_0;
branches;
next	1.5;

1.5
date	91.05.31.11.52.50;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	91.05.31.11.43.15;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	91.05.31.09.59.24;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	91.01.12.08.13.33;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	91.01.03.23.49.54;	author mike;	state Exp;
branches;
next	;


desc
@libplot3 header file
@


11.9
log
@moved/renamed from top-level h/ to top-level include/
@
text
@/*
 *			P L O T 3 . H
 *
 *
 * This is a ANSI C header for LIBPLOT3 giving function prototypes.
 * This header file will also work if called by a "traditional" C
 * compiler.
 *
 *  For best results, before the #include "plot3.h", there should be:
 *
 *		#include "machine.h"
 *    and	#include "vmath.h"
 *
 *  although not doing this should not be fatal.
 *
 *	$Header: /n/xoff/cvs/brlcad/h/plot3.h,v 11.8 2001/04/05 19:35:07 morrison Exp $
 */
#ifndef	PLOT3_H
#define	PLOT3_H

#include "bu.h"
#include "vmath.h"
#include "bn.h"

#define	pl_mat_idn( _mat )		MAT_IDN( _mat )
#define pl_mat_zero( _mat )		MAT_ZERO( _mat )
#define pl_mat_copy( _mat1, _mat2 )	MAT_COPY( _mat1, _mat2 )

/*
 *  The basic UNIX-plot routines.
 *  The calling sequence is the same as the original Bell Labs routines,
 *  with the exception of the pl_ prefix on the name.
 */
BU_EXTERN(void pl_point, (FILE *plotfp, int x, int y));
BU_EXTERN(void pl_line, (FILE *plotfp, int fx, int fy, int tx, int ty));
BU_EXTERN(void pl_linmod, (FILE *plotfp, char *s));
BU_EXTERN(void pl_move, (FILE *plotfp, int x, int y));
BU_EXTERN(void pl_cont, (FILE *plotfp, int x, int y));
BU_EXTERN(void pl_label, (FILE *plotfp, char *s));
BU_EXTERN(void pl_space, (FILE *plotfp, int x1, int y1, int x2, int y2));
BU_EXTERN(void pl_erase, (FILE *plotfp));
BU_EXTERN(void pl_circle, (FILE *plotfp, int x, int y, int r));
BU_EXTERN(void pl_arc, (FILE *plotfp, int xc, int yc, int x1, int y1, int x2, int y2));
BU_EXTERN(void pl_box, (FILE *plotfp, int x1, int y1, int x2, int y2));

/*
 * BRL extensions to the UNIX-plot file format.
 */
BU_EXTERN(void pl_color, (FILE *plotfp, int r, int g, int b));
BU_EXTERN(void pl_flush, (FILE *plotfp));
BU_EXTERN(void pl_3space, (FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2));
BU_EXTERN(void pl_3point, (FILE *plotfp, int x, int y, int z));
BU_EXTERN(void pl_3move, (FILE *plotfp, int x, int y, int z));
BU_EXTERN(void pl_3cont, (FILE *plotfp, int x, int y, int z));
BU_EXTERN(void pl_3line, (FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2));
BU_EXTERN(void pl_3box, (FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2));

/* Double floating point versions */
BU_EXTERN(void pd_point, (FILE *plotfp, double x, double y));
BU_EXTERN(void pd_line, (FILE *plotfp, double fx, double fy, double tx, double ty));
BU_EXTERN(void pd_move, (FILE *plotfp, double x, double y));
BU_EXTERN(void pd_cont, (FILE *plotfp, double x, double y));
BU_EXTERN(void pd_space, (FILE *plotfp, double x1, double y1, double x2, double y2));
BU_EXTERN(void pd_circle, (FILE *plotfp, double x, double y, double r));
BU_EXTERN(void pd_arc, (FILE *plotfp, double xc, double yc, double x1, double y1, double x2, double y2));
BU_EXTERN(void pd_box, (FILE *plotfp, double x1, double y1, double x2, double y2));

/* Double 3-D both in vector and enumerated versions */
#ifdef VMATH_H
BU_EXTERN(void pdv_3space, (FILE *plotfp, const vect_t min, const vect_t max));
BU_EXTERN(void pdv_3point, (FILE *plotfp, const vect_t pt));
BU_EXTERN(void pdv_3move, (FILE *plotfp, const vect_t pt));
BU_EXTERN(void pdv_3cont, (FILE *plotfp, const vect_t pt));
BU_EXTERN(void pdv_3line, (FILE *plotfp, const vect_t a, const vect_t b));
BU_EXTERN(void pdv_3box, (FILE *plotfp, const vect_t a, const vect_t b));
#endif /* VMATH_H */
BU_EXTERN(void pd_3space, (FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2));
BU_EXTERN(void pd_3point, (FILE *plotfp, double x, double y, double z));
BU_EXTERN(void pd_3move, (FILE *plotfp, double x, double y, double z));
BU_EXTERN(void pd_3cont, (FILE *plotfp, double x, double y, double z));
BU_EXTERN(void pd_3line, (FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2));
BU_EXTERN(void pd_3box, (FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2));
BU_EXTERN(void pdv_3ray, (FILE *fp, const point_t pt, const vect_t dir, double t));

/*
 *  The following routines are taken from the BRL TIG-PACK
 *  (Terminal Independent Plotting Package).
 *  These routines create plots by using the pl_() and pd_() routines
 *  declared above.
 */

#define PL_FORTRAN(lc,uc)	BU_FORTRAN(lc,uc)

BU_EXTERN(void tp_i2list, (FILE *fp, int *x, int *y, int npoints));
BU_EXTERN(void tp_2list, (FILE *fp, double *x, double *y, int npoints));
BU_EXTERN(void BU_FORTRAN(f2list, F2LIST), (FILE **fpp, float *x, float *y,
			int *n));
BU_EXTERN(void tp_3list, (FILE *fp, double *x, double *y, double *z,
			int npoints));
BU_EXTERN(void BU_FORTRAN(f3list, F3LIST), (FILE **fpp, float *x, float *y,
			float *z, int *n));
BU_EXTERN(void tp_2mlist, (FILE *fp, double *x, double *y, int npoints,
			int flag, int mark, int interval, double size));
BU_EXTERN(void BU_FORTRAN(f2mlst, F2MLST), (FILE **fp, float *x, float *y,
			int *np, int *flag, int *mark, int *interval,

			float *size));
BU_EXTERN(void tp_2marker, (FILE *fp, int c, double x, double y, double scale));
BU_EXTERN(void BU_FORTRAN(f2mark, F2MARK), (FILE **fp, int *c, float *x,
			float *y, float *scale));
BU_EXTERN(void tp_3marker, (FILE *fp, int c, double x, double y, double z,
			double scale));
BU_EXTERN(void BU_FORTRAN(f3mark, F3MARK), (FILE **fp, int *c, float *x,
			float *y, float *z, float *scale));
BU_EXTERN(void tp_2number, (FILE *fp, double input, int x, int y, int cscale,
			double theta, int digits));
BU_EXTERN(void BU_FORTRAN(f2numb, F2NUMB), (FILE **fp, float *input,
			int *x, int *y, float *cscale, float *theta, int *digits));
BU_EXTERN(void tp_scale, (int idata[], int elements, int mode, int length,
			int odata[], double *min, double *dx));

BU_EXTERN(void BU_FORTRAN(fscale, FSCALE), (int	idata[], int *elements,
			char *mode, int *length, int odata[], double *min,
			double *dx));
BU_EXTERN(void tp_2symbol, (FILE *fp, char *string, double x, double y,
			double scale, double theta));
BU_EXTERN(void BU_FORTRAN(f2symb, F2SYMB), (FILE **fp, char *string,
			float *x, float *y, float *scale, float *theta));
BU_EXTERN(void tp_plot, (FILE *fp, int xp, int yp, int xl, int yl,
			char xtitle[], char ytitle[], float x[], float y[],
			int n, double cscale));
BU_EXTERN(void BU_FORTRAN(fplot, FPLOT), (FILE **fp, int *xp, int *yp,
			int *xl, int *yl, char *xtitle, char *ytitle,
			float *x, float *y, int *n, float *cscale));
#ifdef VMATH_H
BU_EXTERN(void tp_3axis, (FILE *fp, char *string, point_t origin,
			mat_t rot, double length, int ccw, int ndigits,
			double label_start, double label_incr,
			double tick_separation, double char_width));
BU_EXTERN(void BU_FORTRAN(f3axis, F3AXIS), (FILE **fp, char *string,
			float *x, float *y, float *z,
			float *length, float *theta,
			int *ccw, int *ndigits,
			float *label_start, float *label_incr,
			float *tick_separation, float *char_width));
BU_EXTERN(void tp_3symbol, (FILE *fp, char *string, point_t origin,
			mat_t rot, double scale));
BU_EXTERN(void tp_3vector, (FILE *plotfp, point_t from, point_t to,
			double fromheadfract, double toheadfract));
BU_EXTERN(void BU_FORTRAN(f3vect, F3VECT), (FILE **fp,
			float *fx, float *fy, float *fz,
			float *tx, float *ty, float *tz,
			float *fl, float *tl));
#endif /* VMATH_H */

#endif /* PLOT3_H */
@


11.8
log
@updated SIGNED to signed
updated CONST to const
@
text
@d16 1
a16 1
 *	$Header: /c/CVS/brlcad/h/plot3.h,v 11.7 2001/04/02 21:37:53 morrison Exp $
@


11.7
log
@Deprecated bn_mat_copy() for new performance version of MAT_COPY() macro in h/vmath.h.
@
text
@d16 1
a16 1
 *	$Header: /c/CVS/brlcad/h/plot3.h,v 11.6 2001/03/31 01:56:34 morrison Exp $
d70 6
a75 6
BU_EXTERN(void pdv_3space, (FILE *plotfp, CONST vect_t min, CONST vect_t max));
BU_EXTERN(void pdv_3point, (FILE *plotfp, CONST vect_t pt));
BU_EXTERN(void pdv_3move, (FILE *plotfp, CONST vect_t pt));
BU_EXTERN(void pdv_3cont, (FILE *plotfp, CONST vect_t pt));
BU_EXTERN(void pdv_3line, (FILE *plotfp, CONST vect_t a, CONST vect_t b));
BU_EXTERN(void pdv_3box, (FILE *plotfp, CONST vect_t a, CONST vect_t b));
d83 1
a83 1
BU_EXTERN(void pdv_3ray, (FILE *fp, CONST point_t pt, CONST vect_t dir, double t));
@


11.6
log
@Deprecated bn_mat_idn() and bn_mat_zero(), updated calls to h/vmath.h's MAT_IDN() and MAT_ZERO() performance improved macros.
@
text
@d16 1
a16 1
 *	$Header: /c/CVS/brlcad/h/plot3.h,v 11.5 2000/03/29 18:57:14 mike Exp $
d27 1
a27 1
#define pl_mat_copy( _mat1, _mat2 )	bn_mat_copy( _mat1, _mat2 )
@


11.5
log
@
Added pdv_3ray
@
text
@d16 1
a16 1
 *	$Header: /c/CVS/brlcad/h/plot3.h,v 11.4 1999/11/26 22:16:08 mike Exp $
d25 2
a26 2
#define	pl_mat_idn( _mat )		bn_mat_idn( _mat )
#define pl_mat_zero( _mat )		bn_mat_zero( _mat )
@


11.4
log
@
Proper CONST typing
@
text
@d16 1
a16 1
 *	$Header: /c/CVS/brlcad/h/plot3.h,v 11.3 1997/01/08 03:54:59 mike Exp $
d83 1
@


11.3
log
@Moved PL_FORTRAN to bu.h
Auto-included necessary headers (bu.h, bn.h)
@
text
@d16 1
a16 1
 *	$Header: /m/cad/h/RCS/plot3.h,v 11.2 1996/12/31 17:35:56 jra Exp mike $
d70 6
a75 6
BU_EXTERN(void pdv_3space, (FILE *plotfp, vect_t min, vect_t max));
BU_EXTERN(void pdv_3point, (FILE *plotfp, vect_t pt));
BU_EXTERN(void pdv_3move, (FILE *plotfp, vect_t pt));
BU_EXTERN(void pdv_3cont, (FILE *plotfp, vect_t pt));
BU_EXTERN(void pdv_3line, (FILE *plotfp, vect_t a, vect_t b));
BU_EXTERN(void pdv_3box, (FILE *plotfp, vect_t a, vect_t b));
@


11.2
log
@Added definitions to make pl_mat_idn, pl_mat_zero, and pl_mat_copy use macros.
@
text
@d16 1
a16 1
 *	$Header: /m/cad/h/RCS/plot3.h,v 11.1 1995/01/04 09:48:30 mike Rel4_4 jra $
d21 3
a23 14
/*
 *  Macros for providing function prototypes, regardless of whether
 *  the compiler understands them or not.
 *  It is vital that the argument list given for "args" be enclosed
 *  in parens.
 *  The setting of USE_PROTOTYPES is done in machine.h
 */
#if USE_PROTOTYPES
#	define	PL_EXTERN(type_and_name,args)	extern type_and_name args
#	define	PL_ARGS(args)			args
#else
#	define	PL_EXTERN(type_and_name,args)	extern type_and_name()
#	define	PL_ARGS(args)			()
#endif
d25 3
a27 3
#define	pl_mat_idn( _mat )		MAT_IDN( _mat )
#define pl_mat_zero( _mat )		MAT_ZERO( _mat )
#define pl_mat_copy( _mat1, _mat2 )	MAT_COPY( _mat1, _mat2 )
d34 11
a44 11
PL_EXTERN(void pl_point, (FILE *plotfp, int x, int y));
PL_EXTERN(void pl_line, (FILE *plotfp, int fx, int fy, int tx, int ty));
PL_EXTERN(void pl_linmod, (FILE *plotfp, char *s));
PL_EXTERN(void pl_move, (FILE *plotfp, int x, int y));
PL_EXTERN(void pl_cont, (FILE *plotfp, int x, int y));
PL_EXTERN(void pl_label, (FILE *plotfp, char *s));
PL_EXTERN(void pl_space, (FILE *plotfp, int x1, int y1, int x2, int y2));
PL_EXTERN(void pl_erase, (FILE *plotfp));
PL_EXTERN(void pl_circle, (FILE *plotfp, int x, int y, int r));
PL_EXTERN(void pl_arc, (FILE *plotfp, int xc, int yc, int x1, int y1, int x2, int y2));
PL_EXTERN(void pl_box, (FILE *plotfp, int x1, int y1, int x2, int y2));
d49 8
a56 8
PL_EXTERN(void pl_color, (FILE *plotfp, int r, int g, int b));
PL_EXTERN(void pl_flush, (FILE *plotfp));
PL_EXTERN(void pl_3space, (FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2));
PL_EXTERN(void pl_3point, (FILE *plotfp, int x, int y, int z));
PL_EXTERN(void pl_3move, (FILE *plotfp, int x, int y, int z));
PL_EXTERN(void pl_3cont, (FILE *plotfp, int x, int y, int z));
PL_EXTERN(void pl_3line, (FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2));
PL_EXTERN(void pl_3box, (FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2));
d59 8
a66 8
PL_EXTERN(void pd_point, (FILE *plotfp, double x, double y));
PL_EXTERN(void pd_line, (FILE *plotfp, double fx, double fy, double tx, double ty));
PL_EXTERN(void pd_move, (FILE *plotfp, double x, double y));
PL_EXTERN(void pd_cont, (FILE *plotfp, double x, double y));
PL_EXTERN(void pd_space, (FILE *plotfp, double x1, double y1, double x2, double y2));
PL_EXTERN(void pd_circle, (FILE *plotfp, double x, double y, double r));
PL_EXTERN(void pd_arc, (FILE *plotfp, double xc, double yc, double x1, double y1, double x2, double y2));
PL_EXTERN(void pd_box, (FILE *plotfp, double x1, double y1, double x2, double y2));
d70 6
a75 6
PL_EXTERN(void pdv_3space, (FILE *plotfp, vect_t min, vect_t max));
PL_EXTERN(void pdv_3point, (FILE *plotfp, vect_t pt));
PL_EXTERN(void pdv_3move, (FILE *plotfp, vect_t pt));
PL_EXTERN(void pdv_3cont, (FILE *plotfp, vect_t pt));
PL_EXTERN(void pdv_3line, (FILE *plotfp, vect_t a, vect_t b));
PL_EXTERN(void pdv_3box, (FILE *plotfp, vect_t a, vect_t b));
d77 6
a82 6
PL_EXTERN(void pd_3space, (FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2));
PL_EXTERN(void pd_3point, (FILE *plotfp, double x, double y, double z));
PL_EXTERN(void pd_3move, (FILE *plotfp, double x, double y, double z));
PL_EXTERN(void pd_3cont, (FILE *plotfp, double x, double y, double z));
PL_EXTERN(void pd_3line, (FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2));
PL_EXTERN(void pd_3box, (FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2));
d91 1
a91 25
/*
 *			P L _ F O R T R A N
 *
 *  This macro is used to take the 'C' function name,
 *  and convert it at compile time to the
 *  FORTRAN calling convention used for this particular system.
 *
 *  Both lower-case and upper-case alternatives have to be provided
 *  because there is no way to get the C preprocessor to change the
 *  case of a token.
 */
#if CRAY
#	define	PL_FORTRAN(lc,uc)	uc
#endif
#if defined(apollo) || defined(mips) || defined(aux)
	/* Lower case, with a trailing underscore */
#ifdef __STDC__
#	define	PL_FORTRAN(lc,uc)	lc ## _
#else
#	define	PL_FORTRAN(lc,uc)	lc/**/_
#endif
#endif
#if !defined(PL_FORTRAN)
#	define	PL_FORTRAN(lc,uc)	lc
#endif
d93 3
a95 3
PL_EXTERN(void tp_i2list, (FILE *fp, int *x, int *y, int npoints));
PL_EXTERN(void tp_2list, (FILE *fp, double *x, double *y, int npoints));
PL_EXTERN(void PL_FORTRAN(f2list, F2LIST), (FILE **fpp, float *x, float *y,
d97 1
a97 1
PL_EXTERN(void tp_3list, (FILE *fp, double *x, double *y, double *z,
d99 1
a99 1
PL_EXTERN(void PL_FORTRAN(f3list, F3LIST), (FILE **fpp, float *x, float *y,
d101 1
a101 1
PL_EXTERN(void tp_2mlist, (FILE *fp, double *x, double *y, int npoints,
d103 1
a103 1
PL_EXTERN(void PL_FORTRAN(f2mlst, F2MLST), (FILE **fp, float *x, float *y,
d107 2
a108 2
PL_EXTERN(void tp_2marker, (FILE *fp, int c, double x, double y, double scale));
PL_EXTERN(void PL_FORTRAN(f2mark, F2MARK), (FILE **fp, int *c, float *x,
d110 1
a110 1
PL_EXTERN(void tp_3marker, (FILE *fp, int c, double x, double y, double z,
d112 1
a112 1
PL_EXTERN(void PL_FORTRAN(f3mark, F3MARK), (FILE **fp, int *c, float *x,
d114 1
a114 1
PL_EXTERN(void tp_2number, (FILE *fp, double input, int x, int y, int cscale,
d116 1
a116 1
PL_EXTERN(void PL_FORTRAN(f2numb, F2NUMB), (FILE **fp, float *input,
d118 1
a118 1
PL_EXTERN(void tp_scale, (int idata[], int elements, int mode, int length,
d121 1
a121 1
PL_EXTERN(void PL_FORTRAN(fscale, FSCALE), (int	idata[], int *elements,
d124 1
a124 1
PL_EXTERN(void tp_2symbol, (FILE *fp, char *string, double x, double y,
d126 1
a126 1
PL_EXTERN(void PL_FORTRAN(f2symb, F2SYMB), (FILE **fp, char *string,
d128 1
a128 1
PL_EXTERN(void tp_plot, (FILE *fp, int xp, int yp, int xl, int yl,
d131 1
a131 1
PL_EXTERN(void PL_FORTRAN(fplot, FPLOT), (FILE **fp, int *xp, int *yp,
d135 1
a135 1
PL_EXTERN(void tp_3axis, (FILE *fp, char *string, point_t origin,
d139 1
a139 1
PL_EXTERN(void PL_FORTRAN(f3axis, F3AXIS), (FILE **fp, char *string,
d145 1
a145 1
PL_EXTERN(void tp_3symbol, (FILE *fp, char *string, point_t origin,
d147 1
a147 1
PL_EXTERN(void tp_3vector, (FILE *plotfp, point_t from, point_t to,
d149 1
a149 1
PL_EXTERN(void PL_FORTRAN(f3vect, F3VECT), (FILE **fp,
@


11.1
log
@Release_4.4
@
text
@d16 1
a16 1
 *	$Header: /m/cad/h/RCS/plot3.h,v 10.1 91/10/12 06:35:29 mike Rel4_0 $
d35 4
@


10.1
log
@Release_4.0
@
text
@d16 1
a16 1
 *	$Header: /m/cad/h/RCS/plot3.h,v 1.5 91/05/31 11:52:50 mike Exp $
@


1.5
log
@fix
@
text
@d16 1
a16 1
 *	$Header: /m/cad/h/RCS/plot3.h,v 1.4 91/05/31 11:43:15 mike Exp $
@


1.4
log
@Merged in TIG-PACK routines
@
text
@d16 1
a16 1
 *	$Header: /m/cad/h/RCS/plot3.h,v 1.3 91/05/31 09:59:24 mike Exp $
d131 1
a131 1
			float *z, int n));
@


1.3
log
@Modernized the declarations
@
text
@d9 8
a16 1
 *	$Header: /m/cad/h/RCS/plot3.h,v 1.2 91/01/12 08:13:33 mike Exp $
d90 95
@


1.2
log
@fixed typos
@
text
@d9 1
a9 1
 *	$Header: /m/cad/h/RCS/plot3.h,v 1.1 91/01/03 23:49:54 mike Exp $
d14 44
a57 21
#if __STDC__ || USE_PROTOTYPES
extern void pl_point(  FILE *plotfp, int x, int y);
extern void pl_line(   FILE *plotfp, int fx, int fy, int tx, int ty);
extern void pl_linmod( FILE *plotfp, char *s);
extern void pl_move(   FILE *plotfp, int x, int y);
extern void pl_cont(   FILE *plotfp, int x, int y);
extern void pl_label(  FILE *plotfp, char *s);
extern void pl_space(  FILE *plotfp, int x1, int y1, int x2, int y2);
extern void pl_erase(  FILE *plotfp);
extern void pl_circle( FILE *plotfp, int x, int y, int r);
extern void pl_arc(    FILE *plotfp, int xc, int yc, int x1, int y1, int x2, int y2);
extern void pl_box(    FILE *plotfp, int x1, int y1, int x2, int y2);
/* BRL extensions. */
extern void pl_color(  FILE *plotfp, int r, int g, int b);
extern void pl_flush(  FILE *plotfp);
extern void pl_3space( FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2);
extern void pl_3point( FILE *plotfp, int x, int y, int z);
extern void pl_3move(  FILE *plotfp, int x, int y, int z);
extern void pl_3cont(  FILE *plotfp, int x, int y, int z);
extern void pl_3line(  FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2);
extern void pl_3box(   FILE *plotfp, int x1, int y1, int z1, int x2, int y2, int z2);
d59 9
a67 8
extern void pd_point(  FILE *plotfp, double x, double y);
extern void pd_line(   FILE *plotfp, double fx, double fy, double tx, double ty);
extern void pd_move(   FILE *plotfp, double x, double y);
extern void pd_cont(   FILE *plotfp, double x, double y);
extern void pd_space(  FILE *plotfp, double x1, double y1, double x2, double y2);
extern void pd_circle( FILE *plotfp, double x, double y, double r);
extern void pd_arc(    FILE *plotfp, double xc, double yc, double x1, double y1, double x2, double y2);
extern void pd_box(    FILE *plotfp, double x1, double y1, double x2, double y2);
d70 6
a75 6
extern void pdv_3space(FILE *plotfp, vect_t min, vect_t max);
extern void pdv_3point(FILE *plotfp, vect_t pt);
extern void pdv_3move( FILE *plotfp, vect_t pt);
extern void pdv_3cont( FILE *plotfp, vect_t pt);
extern void pdv_3line( FILE *plotfp, vect_t a, vect_t b);
extern void pdv_3box(  FILE *plotfp, vect_t a, vect_t b);
d77 6
a82 6
extern void pd_3space( FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2);
extern void pd_3point( FILE *plotfp, double x, double y, double z);
extern void pd_3move(  FILE *plotfp, double x, double y, double z);
extern void pd_3cont(  FILE *plotfp, double x, double y, double z);
extern void pd_3line(  FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2);
extern void pd_3box(   FILE *plotfp, double x1, double y1, double z1, double x2, double y2, double z2);
d84 1
a84 46
#else /* __STDC__ */

extern void pl_point();
extern void pl_line();
extern void pl_linmod();
extern void pl_move();
extern void pl_cont();
extern void pl_label();
extern void pl_space();
extern void pl_erase();
extern void pl_circle();
extern void pl_arc();
extern void pl_box();
/* BRL extensions. */
extern void pl_color();
extern void pl_flush();
extern void pl_3space();
extern void pl_3point();
extern void pl_3move();
extern void pl_3cont();
extern void pl_3line();
extern void pl_3box();
/* Double floating point versions */
extern void pd_point();
extern void pd_line();
extern void pd_move();
extern void pd_cont();
extern void pd_space();
extern void pd_circle();
extern void pd_arc();
extern void pd_box();
/* Double 3-D both in vector and enumerated versions */
extern void pdv_3space();
extern void pdv_3point();
extern void pdv_3move();
extern void pdv_3cont();
extern void pdv_3line();
extern void pdv_3box();
extern void pd_3space();
extern void pd_3point();
extern void pd_3move();
extern void pd_3cont();
extern void pd_3line();
extern void pd_3box();
#endif /* __STDC__ */
#endif /* VMATH_H */
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
 *	$Header$
d14 1
a14 1
#ifdef __STDC__
d25 1
a25 1
extern void pl_box(    FILE *plotfp, int x1, int y2, int x2, int y2);
d43 1
a43 1
extern void pd_box(    FILE *plotfp, double x1, double y2, double x2, double y2);
d51 1
a51 1
extern void pdv_3box(  FILE *plotfp, vetc_t a, vect_t b);
@
