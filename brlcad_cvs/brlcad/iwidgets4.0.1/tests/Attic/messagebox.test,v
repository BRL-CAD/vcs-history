head	1.2;
access;
symbols
	postmerge-20040405-ansi:1.1
	premerge-20040404-ansi:1.1
	postmerge-autoconf:1.1
	autoconf-freeze:1.1
	premerge-autoconf:1.1
	postmerge-20040315-windows:1.1
	premerge-20040315-windows:1.1
	windows-20040315-freeze:1.1.8.1
	autoconf-20031203:1.1
	autoconf-20031202:1.1
	autoconf-branch:1.1.0.6
	phong-branch:1.1.0.4
	photonmap-branch:1.1.0.2
	windows-branch:1.1.0.8;
locks; strict;
comment	@# @;


1.2
date	2004.05.24.03.59.35;	author morrison;	state dead;
branches;
next	1.1;

1.1
date	2003.03.13.13.20.42;	author jra;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2004.03.12.09.57.44;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.2
log
@moved to src/other/iwidgets/
@
text
@# This file is a Tcl script to test out [incr Widgets] Messagebox class.
# It is organized in the standard fashion for Tcl tests with the following
# notation for test case labels:
#
#   1.x - Construction/Destruction tests
#   2.x - Configuration option tests
#   3.x - Method tests
#
# Copyright (c) 1995 DSC Technologies Corporation
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @@(#) $Id: messagebox.test,v 1.1 2003/03/13 13:20:42 jra Exp $

package require tcltest
namespace import -force ::tcltest::*

if [catch {package require Iwidgets 4.0}] {
  # Let's try modifying the auto_path.  Note that the IWIDGETS_LIBRARY
  # env var is initialized in the Makefile when doing a 'make test'.
  # If sourcing this file independently, this variable must be set manually.
  if ![info exists env(IWIDGETS_LIBRARY)] {
    error "Unable to locate Iwidgets package.  Set your IWIDGETS_LIBRARY\
      environment\nvariable to the directory that contains iwidgets.tcl"
  }
  lappend auto_path $env(IWIDGETS_LIBRARY)
  package require Iwidgets 4.0
}

if {[string compare test [info procs test]] == 1} {
    source defs
}

wm geometry . {}
raise .

set c 1
set o 1
set m 1

#
# Initial construction test
#
test Messagebox-1.$c {Messagebox construction} {
    iwidgets::Messagebox .mb
    pack .mb -padx 10 -pady 10 -fill both -expand yes
    update 
} {}

incr c

#
# Option tests which are successful.
#
test Messagebox-2.$o {configuration option} {
    llength [.mb configure]
} {40}

incr o

foreach test {
    {-activebackground #ececec #ececec}
    {-activeforeground Black Black}
    {-background #d9d9d9 #d9d9d9} 
    {-borderwidth 3 3} 
    {-cursor gumby gumby} 
    {-exportselection 0 0} 
    {-exportselection 1 1} 
    {-filename /tmp/foo /tmp/foo}
    {-foreground Black Black} 
    {-height 0 0} 
    {-width 0 0}
    {-width 550 550}
    {-height 120 120}
    {-highlightcolor Black Black}
    {-highlightthickness 2 2}
    {-labelmargin 5 5} 
    {-labeltext Label Label}
    {-labelpos nw nw}
    {-labelpos ne ne}
    {-labelpos en en}
    {-labelpos e e}
    {-labelpos es es}
    {-labelpos se se}
    {-labelpos s s}
    {-labelpos sw sw}
    {-labelpos wn wn}
    {-labelpos w w}
    {-labelpos ws ws}
    {-labelpos n n}
    {-relief raised raised} 
    {-relief sunken sunken} 
    {-vscrollmode none none} 
    {-vscrollmode static static} 
    {-vscrollmode dynamic dynamic} 
    {-hscrollmode none none} 
    {-hscrollmode static static} 
    {-hscrollmode dynamic dynamic} 
    {-maxlines 1200 1200}
    {-sbwidth 20 20} 
    {-savedir /tmp /tmp}
    {-scrollmargin 5 5} 
    {-textbackground GhostWhite GhostWhite}} {
	set option [lindex $test 0]
	test Messagebox-2.$o "configuration options, $option" {
	    .mb configure $option [lindex $test 1]
	    lindex [.mb configure $option] 4
	} [lindex $test 2]
	update 
	incr o
}

#
# Option tests which fail and produce errors.
#
foreach test {
  {-visibleitems bogus {bad visibleitems option "bogus": should be widthxheight}}
  {-hscrollmode bogus {bad hscrollmode option "bogus": should be static, dynamic, or none}}
  {-vscrollmode bogus {bad vscrollmode option "bogus": should be static, dynamic, or none}}} {
	set option [lindex $test 0]
        test Messagebox-2.$o "configuration options, $option" {
	    list [catch {.mb configure $option [lindex $test 1]} msg] $msg
	} [list 1 [lindex $test 2]]
	incr o
}

#
# Method tests which are successful.
#
foreach test {
    {{.mb issue "Default test"} {}}
    {{.mb type add ERROR -background red -foreground white -bell 1} {ERROR}}
    {{.mb issue "ERROR test" ERROR} {}}
    {{.mb type configure ERROR -font 7x13 -show 0} {}}
    {{.mb issue "ERROR test" ERROR} {}}
    {{.mb type cget ERROR -background} {red}}
    {{.mb type remove ERROR} {}}
    {{.mb clear} {}}} {
	set method [lindex [lindex $test 0] 1]
	test Messagebox-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 0 [lindex $test 1]]
	update 
	incr m
}

#
# Method tests which fail and produce errors
#
foreach test {
    {{.mb type bogus bogus} {bad type operation: "bogus", should be add, remove, configure or cget}}
    {{.mb issue foo bogus} {bad message type: "bogus", use the type command to create a new types}}} {
	set method [lindex [lindex $test 0] 1]
	test Messagebox-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 1 [lindex $test 1]]
	incr m
}

#
# Conclusion of constrcution/destruction tests
#
test Messagebox-1.$c {Messagebox destruction} {
    destroy .mb
    update 
} {}

incr c

test Messagebox-1.$c {Messagebox construction} {
    iwidgets::messagebox .mb -hscrollmode dynamic -labeltext "Label" \
	    -labelpos n -labelmargin 5
    pack .mb -padx 10 -pady 10 -fill both -expand yes
    update 
} {}

incr c

test Messagebox-1.$c {Messagebox destruction} {
    destroy .mb
    update 
} {}

incr c

test Messagebox-1.$c {Messagebox destruction} {
    iwidgets::messagebox .mb
    pack .mb
    destroy .mb
    update 
} {}

::tcltest::cleanupTests
exit
@


1.1
log
@*** empty log message ***
@
text
@d14 1
a14 1
# @@(#) $Id: messagebox.test,v 1.3 2001/08/07 19:56:48 smithc Exp $
@


1.1.8.1
log
@merge from HEAD
@
text
@d14 1
a14 1
# @@(#) $Id$
@

