head	11.2;
access;
symbols
	ansi-20040405-merged:11.1
	postmerge-20040405-ansi:11.1
	premerge-20040404-ansi:11.1
	postmerge-autoconf:11.1
	autoconf-freeze:11.1
	premerge-autoconf:11.1
	ansi-20040316-freeze:11.1
	postmerge-20040315-windows:11.1
	premerge-20040315-windows:11.1
	windows-20040315-freeze:11.1
	autoconf-20031203:11.1
	autoconf-20031202:11.1
	autoconf-branch:11.1.0.14
	phong-branch:11.1.0.12
	photonmap-branch:11.1.0.10
	rel-6-1-DP:11.1
	windows-branch:11.1.0.8
	rel-6-0-2:11.1
	ansi-branch:11.1.0.6
	rel-6-0-1-branch:11.1.0.4
	hartley-6-0-post:11.1
	hartley-6-0-pre:11.1
	rel-6-0-1:11.1
	rel-6-0:11.1
	rel-5-4:11.1
	offsite-5-3-pre:11.1
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1;
locks; strict;


11.2
date	2004.05.18.21.20.38;	author morrison;	state dead;
branches;
next	11.1;

11.1
date	95.01.05.04.09.19;	author mike;	state Rel4_4;
branches;
next	;


desc
@info
@


11.2
log
@rename the text files from .doc to a .txt extension.  reserve .doc extension for groff files
@
text
@SGI style: rowvec * matrix		GED style: matrix * colvec

[0][0]	[0][1]	[0][2]	[0][3]		0	1	2	3
[1][0]	[1][1]	[1][2]	[1][3]		4	5	6	7
[2][0]	[2][1]	[2][2]	[2][3]		8	9	10	11
[3][0]	[3][1]	[3][2]	[3][3]		12	13	14	15

r1	r2	r3	.		r1	r4	r7	tx
r4	r5	r6	.		r2	r5	r8	ty
r7	r8	r9	.		r3	r6	r9	tz
tx	ty	tz	1/s		.	.	.	1/s

Rot +X					Rot +X
1	0	0			1	0	0
0	cos	sin			0	cos	-sin
0	-sin	cos			0	sin	cos

Rot +Y					Rot +Y
cos	0	-sin			cos	0	sin
0	1	0			0	1	0
sin	0	cos			-sin	0	cos

Rot +Z					Rot +Z
cos	sin	0			cos	-sin	0
-sin	cos	0			sin	cos	0
0	0	1			0	0	1


For Negative rotations, the signs of the sine terms change.
The LIBRT mat_ae( m, az, el ) azimuth, elevation routine does
a +Z (az) followed by a -Y (-el) rotation.  This results in
a GED matrix of:

	cosAcosE	-sinA		-cosAsinE
	sinAcosE	cosA		-sinAsinE
	sinE		0		cosE

------------------------
SGI:
multmatrix inserts here
		    |
		   \|/
	rowvec * Newmatix * matrix  [World_Coords]

i.e. it premultiplies the matrix stack.
rot(); trans();  looks like:

	rowvec * Trans * Rot  [World_Coords]

-----------------------
@


11.1
log
@Release_4_4
@
text
@@

