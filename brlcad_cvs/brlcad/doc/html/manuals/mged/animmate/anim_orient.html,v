head	14.4;
access;
symbols
	rel-7-10-4:14.4
	STABLE:14.4.0.4
	stable-branch:14.2
	rel-7-10-2:14.4
	rel-7-10-0:14.4
	rel-7-8-4:14.4
	rel-7-8-2:14.4
	rel-7-8-0:14.4
	trimnurbs-branch:14.4.0.2
	help:14.4
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.2
	rel-7-2-0:14.2
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.4
date	2005.10.23.04.44.26;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.05.02.01.59.34;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.07.53.42;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.09;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.19.18.35.17;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.09;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.4
log
@trailing ws
@
text
@<html><head>
<title>BRL-CAD anim_orient Man Page</title>
</head><body>
<h1>NAME</h1>
anim_orient - convert between orientation formats
<h1>SYNOPSIS</h1>
<b>anim_orient </b>
<b>[q|y|a|z|m][vri]</b>
<b>[q|y|a|z|m][vriu]</b>
<b>&lt; in.table </b>
<b>&gt; out.table</b>
<h1>DESCRIPTION</h1>
<i>Anim_orient</i>
is a filter which translates a table of orientation
information from one format to another. The method used is to convert
the input format to a matrix, then convert the matrix to the desired
output format. The input format is specified in the first argument, and
the output format is specified in the second.
The orientation formats
must be one of the following:
<b>q </b>
(quaternion),
<b>y</b>
(yaw,pitch, and roll),
<b>a</b>
(azimuth, elevation, and twist),
<b>z </b>
(x-y-z angles), or
<b>m </b>
(rotation matrix).
In addition, the output format may be modified by the
<b>u </b>
option, and the input and output formats may be modified by the
<b>r</b>,
<b>i</b>,
and
<b>v</b>
options. The
<b>r </b>
option specifies that angles are read or written in radians, rather
than degrees. The
<b>i</b>,<b>v</b>,
and
<b>u</b>
options are explained below.
<p>
To clearly understand the operation of anim_orient, it is important to
examine the difference between orientation and rotation.
The matrices, quaternions, and angles
used by anim_orient specify rotations. These are transformations
which, when applied to an object, preserve its shape but change its
orientation with respect to a fixed set of axes. Given the initial
orientation of an object, a rotation defines the final orientation, but
different initial orientations will yield different final orientations.
In order
to represent orientations with rotations, we
must define a default initial orientation for the object.
Then a given matrix, quaternion, or set of angles represents the orientation
resulting from applying the rotation to the initial object orientation.
<p>
If no modifying codes are specified, anim_orient assumes that the
default orientation of the object in question faces the positive
x-direction, with the world y-axis pointing to the object's left and the
z-axis pointing up. This is the orientation in which many
BRL-CAD
objects
are modeled, and the default assumed by other animation routines such as
anim_script. If the
<b>v </b>
code is specified, then the default orientation
is taken to be facing the negative z-direction, with the world x-axis
pointing to the object's right and the y-axis pointing up. This is the
default orientation of the eye in
MGED
and
<i>rt</i>.
Some common uses of the v
option are demonstrated in the examples section.
<p>
The input and output format codes are:
<dl><dt>
<b>q</b>:<b></b>

<dd>
Quaternions, in the order x,y,z,w. This is the default input and
output format. The output will
always be unit quaternions. For a unit quaternion, the
xyz-vector represents an axis of rotation and and w represents
cos(omega/2), where
omega is the angle to be rotated about the given axis.
<dt>
<b>z</b>:<b></b>

<dd>
x-y-z angles, in the order x, y, z. They represent a rotation
of z degrees around the z-axis, followed by y degrees around the y-axis,
followed by x degrees around the x-axis. If the code
<b>zr </b>
is used
then the angles will be read or written in radians
rather than degrees.
<dt>
<b>y</b>:<b></b>

<dd>
yaw-pitch-roll format, in that order. They represent
a rotation of +roll degrees about the x-axis, -pitch degrees about
the y-axis, followed by +yaw degrees about the z-axis. If the code
<b>yr </b>
is used, angles are in radians rather than degrees.
<dt>
<b>a</b>:

<dd>
azimuth, elevation, twist, in that order. They represent a rotation of
-twist degrees about the x-axis, +elevation degrees about the y-axis,
and +azimuth + 180 degrees about the z-axis. Alternatively, they can
be thought of as a 180 degree rotation about the z-axis followed by a
rotation of +twist degrees about the x-axis, -elevation degrees about
the y-axis, and +azimuth degrees about the z-axis.
<dt>
<b>m</b>:<b></b>

<dd>
pre-multiplication rotation matrix. Sixteen
numbers form a 4x4 matrix, although only the nine elements in the upper
left corner are actually used. This is the format used at the interior of
the conversion routine. It is a transformation from initial orientation to
a new orientation.
</dl>
<p>
The input and ouput modification codes are:
<dl><dt>
<b>i</b>

<dd>
This code is used in conjunction with any of the format codes to represent
the inverse transformation. Under the
<b>i </b>
code, a matrix, quaternion, or
set of angles represents the inverse of the rotation that it normally
represents.
For example, normally, the orientation
corresponding to a given matrix is the orientation that the default
object ends up in after the matrix is applied to it. With the
<b>i </b>
code,
a given matrix represents the orientation an object should be placed
in so that the applying the matrix puts it back in the default
orientation.

One common use of the
<b>i </b>
option is for handling "Viewrot" matrices used
by
<i>mged </i>
and
<i>rt</i>.<i></i>
The viewrot matrix is a model-to-view matrix, which is
the transpose (inverse) of the matrix which would conceptually be
applied to an eye object to put it in the desired place in the model.
<dt>
<b>v</b>

<dd>
When this option is specified, the corresponding rotation is considered
applied to the default view orientation, rather than the default object
orientation, as explained above.
<dt>
<b>u</b>

<dd>
This option forces the output orientation to be upright, or "right-side
up", where the z-axis is the up direction. In terms of yaw, pitch, and
roll, this means that the roll is forced to zero. Because this is not
an invertible
operation, it can only be applied to the output orientation, not
the input.

</dl>
<h1>EXAMPLES</h1>

<ul>
<li>Normalize a table of quaternions to unit magnitude. (quaternions are the
default format).
<p>
	anim_orient &lt; in.table &gt; out.table
<p>
<li>change xyz angles to a rotation matrix
<p>
	anim_orient z m &lt; in.table &gt; out.table
<p>
<li>change azimuth,elevation, and twist to a matrix suitable for the
<i>rt</i>
viewrot command
<p>
	anim_orient a miv &lt; in.table &gt; out.table
<p>
<li>transpose matrices
<p>
	anim_orient m mi &lt; in.table &gt; out.table
<p>
<li>change radian xyz angles to yaw-pitch-roll in degrees
<p>
	anim_orient zr y &lt; in.table &gt; out.table
<p>
<li>given a quaternion being applied to an object facing the x-axis,
find the quaternion needed
to turn the virtual camera in the same direction using
<i>rt</i>'s<i></i>
orientation command
<p>
	anim_orient q qv &lt; in.table &gt; out.table
<p>
<li>Given the yaw, pitch, and roll of an object, find the yaw, pitch, and
roll which would bring it back to the default position.
<p>
	anim_orient y yi &lt; in.table &gt; out.table
<p>
<li>Force a table of view quaternions to represent "right-side up"
orientations.
<p>
	anim_orient qv qvu &lt; in.table &gt; out.table
</ul>
<h1>BUGS</h1>
There are built-in trouble spots which occur, in ypr, xyz, or aet
formats, when the pitch, y-rotation, or elevation is an odd multiple of 90
degrees, because at this point the other two angles become
indistinguishable. The program makes the arbitrary assumption that the
roll is zero or that the x-rotation is zero, depending on the format,
and gives a warning to that effect on standard error.
<h1>AUTHOR</h1>
Carl J. Nuzman
<h1>"BUG REPORTS"</h1>
Reports of bugs or problems should be submitted via electronic
mail to &lt;devs@@brlcad.org&gt;.

</body></html>
@


14.3
log
@replace the old cad e-mail with devs at brlcad dot org since the dot mil forward is no more.
@
text
@d18 1
a18 1
the output format is specified in the second. 
d20 1
a20 1
must be one of the following: 
d22 1
a22 1
(quaternion), 
d24 1
a24 1
(yaw,pitch, and roll), 
d26 1
a26 1
(azimuth, elevation, and twist), 
d33 1
a33 1
option, and the input and output formats may be modified by the 
d38 1
a38 1
options. The 
d43 1
a43 1
and 
d54 1
a54 1
different initial orientations will yield different final orientations. 
d58 1
a58 1
Then a given matrix, quaternion, or set of angles represents the orientation 
d64 1
a64 1
z-axis pointing up. This is the orientation in which many 
d68 1
a68 1
anim_script. If the 
d70 1
a70 1
code is specified, then the default orientation  
d73 1
a73 1
default orientation of the eye in 
d75 1
a75 1
and 
d88 1
a88 1
xyz-vector represents an axis of rotation and and w represents 
d97 1
a97 1
followed by x degrees around the x-axis. If the code 
d110 1
a110 1
is used, angles are in radians rather than degrees. 
d128 1
a128 1
the conversion routine. It is a transformation from initial orientation to 
d138 1
a138 1
the inverse transformation. Under the 
d145 1
a145 1
object ends up in after the matrix is applied to it. With the 
d150 1
a150 1
orientation. 
d152 1
a152 1
One common use of the 
d155 1
a155 1
by 
d157 1
a157 1
and 
d176 1
a176 1
an invertible 
d187 1
a187 1
	anim_orient &lt; in.table &gt; out.table 
d193 1
a193 1
<li>change azimuth,elevation, and twist to a matrix suitable for the 
d207 1
a207 1
<li>given a quaternion being applied to an object facing the x-axis, 
d209 1
a209 1
to turn the virtual camera in the same direction using 
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d18 1
a18 1
the output format is specified in the second.
d20 1
a20 1
must be one of the following:
d22 1
a22 1
(quaternion),
d24 1
a24 1
(yaw,pitch, and roll),
d26 1
a26 1
(azimuth, elevation, and twist),
d33 1
a33 1
option, and the input and output formats may be modified by the
d38 1
a38 1
options. The
d43 1
a43 1
and
d54 1
a54 1
different initial orientations will yield different final orientations.
d58 1
a58 1
Then a given matrix, quaternion, or set of angles represents the orientation
d64 1
a64 1
z-axis pointing up. This is the orientation in which many
d68 1
a68 1
anim_script. If the
d70 1
a70 1
code is specified, then the default orientation
d73 1
a73 1
default orientation of the eye in
d75 1
a75 1
and
d88 1
a88 1
xyz-vector represents an axis of rotation and and w represents
d97 1
a97 1
followed by x degrees around the x-axis. If the code
d110 1
a110 1
is used, angles are in radians rather than degrees.
d128 1
a128 1
the conversion routine. It is a transformation from initial orientation to
d138 1
a138 1
the inverse transformation. Under the
d145 1
a145 1
object ends up in after the matrix is applied to it. With the
d150 1
a150 1
orientation.
d152 1
a152 1
One common use of the
d155 1
a155 1
by
d157 1
a157 1
and
d176 1
a176 1
an invertible
d187 1
a187 1
	anim_orient &lt; in.table &gt; out.table
d193 1
a193 1
<li>change azimuth,elevation, and twist to a matrix suitable for the
d207 1
a207 1
<li>given a quaternion being applied to an object facing the x-axis,
d209 1
a209 1
to turn the virtual camera in the same direction using
@


14.2
log
@remove the quirky copyright section in the documentation talking about the application's copyright (which is incorrect now regardless) from the simple man2htmlish pages
@
text
@d236 1
a236 1
mail to &lt;CAD@@BRL.MIL&gt;.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@a233 3
<h1>COPYRIGHT</h1>
	This software is Copyright (C) 1993-2004 by the United States Army
in all countries except the USA.  All rights reserved.
@


1.1
log
@moved from html/ to doc/html/
@
text
@@

