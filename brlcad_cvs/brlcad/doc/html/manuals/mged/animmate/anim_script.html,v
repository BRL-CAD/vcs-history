head	14.4;
access;
symbols
	rel-7-10-4:14.4
	STABLE:14.4.0.4
	stable-branch:14.2
	rel-7-10-2:14.4
	rel-7-10-0:14.4
	rel-7-8-4:14.4
	rel-7-8-2:14.4
	rel-7-8-0:14.4
	trimnurbs-branch:14.4.0.2
	help:14.4
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.2
	rel-7-2-0:14.2
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.4
date	2005.10.23.04.44.26;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.05.02.01.59.34;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.07.53.42;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.09;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.19.18.35.17;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.09;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.4
log
@trailing ws
@
text
@<html><head>
<title>BRL-CAD anim_script Man Page</title>
</head><body>
<h1>NAME</h1>
anim_script - make an animation script for one object
<h1>SYNOPSIS</h1>
<b>anim_script </b>
<b>[-v #] </b>
<b>[-r|t|s] </b>
<b>[-q][-p]</b>
<b>[-a|b # # #] </b>
<b>[-c|d # # #] </b>
<b>[-f #]</b>
<b>[-m cmd]</b>
<b>[objectname] </b>
<b>&lt; in.table </b>
<b>&gt; out.script</b>
<h1>DESCRIPTION</h1>
<i>Anim_script </i>
is designed to produce an animation script for a single
BRL-CAD
object  or for the virtual camera. It is
complementary to
<i>tabsub </i>
in that it performs a similar
function, but with a different philosophy.
<p>
Both
<i>anim_script </i>
and
<i>tabsub </i>
use one row of an animation table to
produce one frame of an animation script. With
<i>tabsub, </i>
the user supplies
a template file which controls the form of the animation frames. This
allows the maximum user control, but also requires a good understanding
of the script format. With
<i>anim_script, </i>
the user supplies all the necessary
information on the command line. The range of possible output scripts is
limited, but the user does not have to deal directly with the details.
Both routines have special features which make certain common situations
easy to do. One of the most important special features of
<i>anim_script </i>
is the
ability to specify a reference position and orientation, as explained
below.
<p>
The <var>objectname</var> is the name of the object being
animated and its parent, as it should appear in the ouput script. For
example, if
"hatch1"
is a member of the group "turret",
then the objectname "turret/hatch1" would be used to
animate the hatch. A top-level object is proceeded only by a slash;
the whole tank might be referred to by the objectname,
"/tank".
If view animation is being performed, no objectname is needed.
<p>
<b>in.table </b> is usually
a seven-column animation table,
specifying the time, 3d position, yaw, pitch and roll of the
object (or camera), although the number of columns is affected by
the
<b>-r</b>,
<b>-t</b>,
<b>-s</b>,
and
<b>-v#</b>
options.
<h1>OPTIONS</h1>
<dl><dt>
<b>-r</b>

<dd>
<b>in.table </b>
is a four-column file including time and rotation
information only. No translation will occur.
<dt>
<b>-t</b>

<dd>
<b>in.table </b>
is a four-column file including time and translation
information only. No rotation will occur.
<dt>
<b>-s</b>

<dd>
<b>in.table </b>
is a four-column file including time and translation
information only. The vehicle will be rotated (steered) to face the
direction of motion.
<dt>
<b>-q</b>

<dd>
Quaternion orientation. Any orientation information in
<b>in.table</b>
will be in quaternion form, in the order x,y,z,w. The identity quaternion
representing no orientation change is (0,0,0,1).
<dt>
<b>-p</b>

<dd>
Permuted orientation. This option indicates that transformations defined by
the quaternions should be applied to an object which has first been placed
in
<i>rt</i>'s
default eye orientation. Thus, the identity quaternion represents yawing the
object 90 degrees to the left and then pitching it 90 degrees downward.
The quaternions produced by
MGED's
saveview command and used by
<i>rt</i>'s
orientation command
are quaternions of this type. See
<i>anim_orient </i>
for more information.
<dt>
<b>-v#</b>

<dd>
The desired output is a view animation script, rather
than an object animation script. No objectname should be specified. The
argument can be any floating point number. If
the argument
is positive, the command:
<p>
viewsize #;
<p>
will be placed at the beginning of the ouput file. If it is
zero, the `viewsize' command is omitted from the output script. If it is
negative, then the
viewsize for each frame is read from <b>in.table</b>. In this case,
the second column of <b>in.table</b> should be the viewsize column;
the column is inserted between  the time column and all of the other
columns.
A `viewsize' command is then
included immediately after the `start' command of each frame.
<dt>
<b>-f#</b>

<dd>
Specify the integer with which to begin
numbering the frames of the output script. The default is 0.
</dl>
<p>
The remaining options give information about the object which is
to be animated.
<dl><dt>
<b>-a # # #  </b>

<dd>
or
<dt>
<b>-b # # #</b>

<dd>
These options take three arguments, which are the
yaw, pitch, and roll of the object's axes with respect to the
world axes. With
<b>-a, </b>
rotations specified in the infile will be applied
with respect to the object's axes. With the
<b>-b </b>
option, the object is
rotated so that its axes coincide with the world axes, and then all
rotations and translations are carried out with respect to the world
axes. The
<b>-b </b>
option is particularly useful in conjunction with the
<b>-s</b>
option, because it tells
<i>anim_script </i>
which way the front of the vehicle faces. See
the examples below.
<p>
<dt>
<b>-c # # #  </b>

<dd>
or
<dt>
<b>-d # # #</b>

<dd>
These options take three arguments, which are the x, y,
and z coordinates of the point which is to be considered the "centroid"
of the object. All rotations will occur about this point. If
<b>-c </b>
is used,
translations from the input table will be considered to be relative
displacements from this point. If
<b>-d </b>
is used, the translations in the
input table will be interpreted as absolute displacement from the world
origin. The direction of translation in both cases is along the world
axes, unless the
<b>-a </b>
option  has been used, in which case the
translations are with respect to the object's axes. See the examples below.
</dl>
<p>
When the
<b>-v </b>
option is used, the virtual camera is the object
being animated, and so the meaning of the preceeding four options
changes somewhat. The
<b>-c </b>
and
<b>-a </b>
options are not useful in this context.
The
<b>-d </b>
option can be thought of as specifying the position and
orientation of a virtual
tripod with respect to the camera lens.  The translations and rotations
specified in
the input table will be applied to the tripod, to which the camera is
rigidly attached.  For example, the option
<b>-d 10 0 -2 </b>
in conjunction with
the
<b>-v#</b>
option means that the virtual tripod is 10 units in front of the
camera and 2
units below the camera's line of sight. The option
<b>-b -90 0 0 </b>
in this
context would mean that the front of the virtual tripod faces 90 degrees
to the right of the virtual camera. As translation and rotation
information are read in from in.table, they are applied to the virtual
tripod, with the virtual camera rigidly attached. See below for examples
of how this might be used.
<dl><dt>
<b>-m cmd</b>

<dd>
Specify a matrix command to use in, object animation. The default value
is "lmul", which means that matrices in the output script are
multiplied onto the
left of the matrix between the object being animated and its parent.
The matrix residing between the object and its parent is referred to as
the current arc. The possible matrix commands are the following:
<pre>

     lmul   - left-multiply the matrix onto the current arc
     rmul   - right-multiply the matrix onto the current arc
     rarc   - replace the current arc with the matrix
     rstack - replace the stack of ancestor matrices with the matrix
     rboth  - replace the current arc with the matrix and replace the
                 stack of ancestor matrices with the identity matrix.

</pre>
This option is intended primarily to give expert users additional
flexibility, and shouldn't be needed by most animators.
</dl>
<h1>EXAMPLES</h1>
To animate a truck which is modeled with the front facing the positive
x-direction, the position of the center of the truck and its orientation at
each time should be in
<b>truck.table</b>.<b></b>
If the center of the modeled truck is at
the  point (234,0,1200) then the following command could be used:
<p>
anim_script -d 234 0 1200 /truck &lt; truck.table &gt; truck.script.
<p>
If the front of the model truck faces (for some reason)
halfway
between the x and y axes, a
<b>-b </b>
option is added, to show the relationship
between world and truck axes:
<p>
anim_script -b 45 0 0 -d 234 0 1200 /truck &lt; truck.table &gt; truck.script.
<p>
To steer the truck automatically to face the direction of motion,
the
<b>-s</b>
option is added, and the orientation columns should be removed from
<b>truck.table</b>.
<p>
anim_script -s -b 45 0 0 -d 234 0 1200 /truck &lt; truck.table &gt; truck.script.
<p>
<p>
Animating a steering wheel: Suppose the steering wheel is stored
in the database so that the axis it turns on is at an yaw of -135
degrees and an pitch of 30 degrees.  It passes through the point
(700,800,2400). Then we select "rotation only" with
<b>-r </b>
and specify the
relationship between the steering wheels axes and the world with the
<b>-a</b>
and
<b>-c </b>
options. In
<b>roll.table </b>
we put the time, two zero columns, and a
column specifying the roll of the wheel (How much it is to be twisted).
<p>
anim_script -r -a -135 30 0 -c 700 800 2400 truck/steering_column/wheel &lt;
roll.table &gt; steer.table
<p>
Alternativly, if the rotation of the wheel was stored in the yaw
(second) column of a file,
<b>turn.table</b>,<b></b>
a different set of axes would be
used to achieve the same effect:
<p>
anim_script -r -a 45 60 0 -c 700 800 2400 truck/steering_column/wheel &lt;
turn.table &gt; steer.table
<p>
<p>
To animate seven little men doing simultaneous backflips in different
places, you would want to use relative motion. That is, a translation
vector of (0,0,1) means move one unit upward, instead of move to the
point (0,0,1). For each little man, we specify his position in the
model using the
<b>-c </b>
option. Then we can use the same backflip instuctions
for each of the little men.
<p>
anim_script -c 12 34 5 /little.man.one &lt; generic.backflip.table &gt;
little.man.one.script
<p>
anim_script -c -3 13 5 /little.man.two &lt; generic.backflip.table &gt;
little.man.two.script
<p>
and so on.
<p>
<p>
<h2>Camera examples</h2>
If we know the desired postion of the camera and its orientation
at each time, it's very simple. The
<b>-v# </b>
option indicates that the view is
being animated; no object is specified.
<p>
anim_script -v0 &lt; view.table &gt; view.script
<p>
To follow a truck, so that the camera is always ten units behind and 4
units above it, we specify a virtual tripod in front of and below the
camera:
<p>
anim_script -v0 -d 10 0 -4 &lt; truck.table &gt; view.script
<p>
To do the same thing but with the camera turned to look at the right
side of the truck, we specify that the virtual tripod originally faces
to the right, so that the camera faces its right side. Thus when the
virtual tripod is placed in the same position and orientation as the
truck, the camera will be looking at the right side of the
truck.
<p>
anim_script -v0 -d 10 0 -4 -b -90 0 0 &lt; truck.table &gt; view.script
<h1>BUGS</h1>
The reading of command line options which take more than one
argument are somewhat finicky. For example, it understands the
option "-d 1 1 1" but not "-d1 1 1".
<h1>AUTHOR</h1>
Carl J. Nuzman
<h1>"BUG REPORTS"</h1>
Reports of bugs or problems should be submitted via electronic
mail to &lt;devs@@brlcad.org&gt;.

</body></html>
@


14.3
log
@replace the old cad e-mail with devs at brlcad dot org since the dot mil forward is no more.
@
text
@d20 1
a20 1
is designed to produce an animation script for a single 
d23 1
a23 1
complementary to 
d26 1
a26 1
function, but with a different philosophy. 
d28 1
a28 1
Both 
d30 1
a30 1
and 
d33 1
a33 1
produce one frame of an animation script. With 
d38 1
a38 1
of the script format. With 
d44 1
a44 1
easy to do. One of the most important special features of 
d52 1
a52 1
example, if  
d58 1
a58 1
"/tank". 
d101 2
a102 2
will be in quaternion form, in the order x,y,z,w. The identity quaternion 
representing no orientation change is (0,0,0,1). 
d108 2
a109 2
the quaternions should be applied to an object which has first been placed 
in 
d113 1
a113 1
The quaternions produced by 
d115 1
a115 1
saveview command and used by 
d118 1
a118 1
are quaternions of this type. See 
d127 1
a127 1
argument can be any floating point number. If 
d129 1
a129 1
is positive, the command: 
d131 1
a131 1
viewsize #; 
d134 1
a134 1
zero, the `viewsize' command is omitted from the output script. If it is 
d151 1
a151 1
to be animated. 
d163 1
a163 1
world axes. With 
d166 1
a166 1
with respect to the object's axes. With the 
d171 1
a171 1
axes. The 
d173 1
a173 1
option is particularly useful in conjunction with the 
d175 1
a175 1
option, because it tells 
d191 1
a191 1
of the object. All rotations will occur about this point. If 
d195 1
a195 1
displacements from this point. If 
d200 1
a200 1
axes, unless the 
d206 1
a206 1
When the 
d210 1
a210 1
changes somewhat. The 
d212 1
a212 1
and 
d215 1
a215 1
The 
d219 1
a219 1
tripod with respect to the camera lens.  The translations and rotations 
d222 1
a222 1
rigidly attached.  For example, the option 
d225 1
a225 1
the 
d229 1
a229 1
units below the camera's line of sight. The option 
d242 2
a243 2
is "lmul", which means that matrices in the output script are 
multiplied onto the 
d253 1
a253 1
     rboth  - replace the current arc with the matrix and replace the 
d258 1
a258 1
flexibility, and shouldn't be needed by most animators. 
d262 2
a263 2
x-direction, the position of the center of the truck and its orientation at 
each time should be in 
d270 1
a270 1
If the front of the model truck faces (for some reason) 
d272 1
a272 1
between the x and y axes, a 
d279 2
a280 2
To steer the truck automatically to face the direction of motion, 
the 
d291 1
a291 1
(700,800,2400). Then we select "rotation only" with 
d294 1
a294 1
relationship between the steering wheels axes and the world with the 
d296 1
a296 1
and 
d298 1
a298 1
options. In 
d307 1
a307 1
(second) column of a file, 
d320 1
a320 1
model using the 
d336 1
a336 1
at each time, it's very simple. The 
d351 2
a352 2
to the right, so that the camera faces its right side. Thus when the 
virtual tripod is placed in the same position and orientation as the 
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d20 1
a20 1
is designed to produce an animation script for a single
d23 1
a23 1
complementary to
d26 1
a26 1
function, but with a different philosophy.
d28 1
a28 1
Both
d30 1
a30 1
and
d33 1
a33 1
produce one frame of an animation script. With
d38 1
a38 1
of the script format. With
d44 1
a44 1
easy to do. One of the most important special features of
d52 1
a52 1
example, if
d58 1
a58 1
"/tank".
d101 2
a102 2
will be in quaternion form, in the order x,y,z,w. The identity quaternion
representing no orientation change is (0,0,0,1).
d108 2
a109 2
the quaternions should be applied to an object which has first been placed
in
d113 1
a113 1
The quaternions produced by
d115 1
a115 1
saveview command and used by
d118 1
a118 1
are quaternions of this type. See
d127 1
a127 1
argument can be any floating point number. If
d129 1
a129 1
is positive, the command:
d131 1
a131 1
viewsize #;
d134 1
a134 1
zero, the `viewsize' command is omitted from the output script. If it is
d151 1
a151 1
to be animated.
d163 1
a163 1
world axes. With
d166 1
a166 1
with respect to the object's axes. With the
d171 1
a171 1
axes. The
d173 1
a173 1
option is particularly useful in conjunction with the
d175 1
a175 1
option, because it tells
d191 1
a191 1
of the object. All rotations will occur about this point. If
d195 1
a195 1
displacements from this point. If
d200 1
a200 1
axes, unless the
d206 1
a206 1
When the
d210 1
a210 1
changes somewhat. The
d212 1
a212 1
and
d215 1
a215 1
The
d219 1
a219 1
tripod with respect to the camera lens.  The translations and rotations
d222 1
a222 1
rigidly attached.  For example, the option
d225 1
a225 1
the
d229 1
a229 1
units below the camera's line of sight. The option
d242 2
a243 2
is "lmul", which means that matrices in the output script are
multiplied onto the
d253 1
a253 1
     rboth  - replace the current arc with the matrix and replace the
d258 1
a258 1
flexibility, and shouldn't be needed by most animators.
d262 2
a263 2
x-direction, the position of the center of the truck and its orientation at
each time should be in
d270 1
a270 1
If the front of the model truck faces (for some reason)
d272 1
a272 1
between the x and y axes, a
d279 2
a280 2
To steer the truck automatically to face the direction of motion,
the
d291 1
a291 1
(700,800,2400). Then we select "rotation only" with
d294 1
a294 1
relationship between the steering wheels axes and the world with the
d296 1
a296 1
and
d298 1
a298 1
options. In
d307 1
a307 1
(second) column of a file,
d320 1
a320 1
model using the
d336 1
a336 1
at each time, it's very simple. The
d351 2
a352 2
to the right, so that the camera faces its right side. Thus when the
virtual tripod is placed in the same position and orientation as the
@


14.2
log
@remove the quirky copyright section in the documentation talking about the application's copyright (which is incorrect now regardless) from the simple man2htmlish pages
@
text
@d365 1
a365 1
mail to &lt;CAD@@BRL.MIL&gt;.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@a362 3
<h1>COPYRIGHT</h1>
	This software is Copyright (C) 1993-2004 by the United States Army
in all countries except the USA.  All rights reserved.
@


1.1
log
@moved from html/ to doc/html/
@
text
@@

