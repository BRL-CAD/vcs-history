head	14.4;
access;
symbols
	rel-7-10-4:14.4
	STABLE:14.4.0.4
	stable-branch:14.2
	rel-7-10-2:14.4
	rel-7-10-0:14.4
	rel-7-8-4:14.4
	rel-7-8-2:14.4
	rel-7-8-0:14.4
	trimnurbs-branch:14.4.0.2
	help:14.4
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.2
	rel-7-2-0:14.2
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.4
date	2005.10.23.04.44.26;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.05.02.01.59.34;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.07.53.42;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.09;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.19.18.35.18;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.09;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.4
log
@trailing ws
@
text
@<html><head>
<title>BRL-CAD anim_track Man Page</title>
</head><body>
<h1>NAME</h1>
anim_track  - make an script to model or animate the pads and wheels of a
tracked vehicle.
<h1>SYNOPSIS</h1>
<b></b>
anim_track [options] wheelfile &lt; in.table &gt; out.script
<h1>DESCRIPTION</h1>
<i>anim_track </i>
is designed to produce an animation script for the
track pads and/or wheels of an articulated track.
In addition, <i>anim_track</i> can produce an MGED source file
for positioning the track pads during the construction on the vehicle
model.
<p>
A track consists of a number of identical pads which
are wrapped in a chain around two or more ordered wheels. Normally, the
track is linear between the wheels. The exeption is that between the
first and last wheels, any extra track length is taken up in a hanging
caternary arc.
<p>
Anim_track requires two input files. The first, referred to above as
<b>wheelfile</b>,<b></b>
is a table which
defines the initial track geometry by describing the wheels around which
the track is to be wrapped. The first three columns of the table give
the center point of the wheels, and the fourth column gives the radius
of each wheel. The table contains one line for each wheel; the
wheels should be listed in clockwise order as viewed from the right of
the vehicle. This is the direction that the track pads move around the
wheels when the vehicle is moving forward.
<p>
The track is part of a vehicle which has a front, back, left, right, top,
and bottom. By default these directions are +x, -x, +y, -y, +z, and -z,
respectively, but any orientation can be specified by the user with the
<b>-b</b>
option.
The track is always confined to a plane which has no left to right
variation; that is, the wheels can be in front of, behind, above, and
below each other, but may not be to the left or right of each other. If
the wheel positions specified in
<b>wheelfile</b>
do not lie in such a plane, then the first wheel defines the plane into
which all of the other wheels are projected.
<p>
The track pads are spread evenly along the entire length of the track.
The track segments between wheels are always linear, except for the
segment between the first and last wheels. If there is any extra track
length, it is taken up in a caternary arc which hangs down between the
first and last wheels. Thus the first wheel in
<b>wheelfile</b>
should be the top front wheel of the vehicle, and the last wheel in
<b>wheelfile</b>
should be the top back wheel of the vehicle. Depending on the track
length mode specified with the
<b>-l</b>
option, the caternary segment may or may not appear.
<p>
The second input file required by
<i>anim_track</i>,<i></i>
referred to above as
<b>in.table</b>,
describes the state of the track in every frame of the animation. The
format of this second file varies according to the command-line
options. The first column of the file is ignored, but is expected to
contain the time values corresponding to each frame. Next come one or
more columns which specify, directly or indirectly, the distance that the
track has rolled around the wheels in each frame (see the
<b>-u</b>,
<b>-y</b>,
and
<b>-s</b>
options). Finally, the file may specify new wheel position for every
frame (see the
<b>-v </b>
option).
<p>
<h1>MODEL REQUIREMENTS</h1>
Certain model conventions are needed in order for the animation to work
properly. First of all, if the wheels are to be animated, they must
all be named
<i>wheelname</i><b>i</b>,
where
<b>i</b>
ranges from 0 to one less than the number of wheels.
<i>wheelname </i>
is an arbitrary string.
<i>wheelname</i>0<i></i>
must be
the top front wheel in a given track and
<i>wheelname</i>(n-1)<i></i>
must be the top
back wheel. The central axes of all the wheels should be parallel to
each other and perpendicular to a plane containing all of the wheel
centers.
<p>
The pads of the track should be identical instances or copies of a
prototype pad object, and they all should be named
<i>padname</i><b>i</b>,
where
<b>i</b>
ranges from 0 to one less than the number of pads.
The prototype pad should be centered on the origin in the x and y
directions. In the z direction, the inner, wheel-contacting surface of
the pad should lie on the z=0 plane. The outer, ground-contacting
surface should face the positive z-direction. The side of the pad which
would connect with the pad in front of it should face the positive x
direction, and the side which would connect with the pad behind it
should face the negative x direction. If the pads are a part of a higher
level combination, as they typically are, then the matrix between each
pad and the higher combination may be modified at will as long as the
prototype pad is not disturbed.

<h1>OPTIONS</h1>
<dl><dt>
<b>-p num_pads parent/basename</b>

<dd>
Animate the track pads. This option takes two arguments; the number of
pads in the track and a slash-separated path to the pad basename.
For
example, if there is a combination named "lpads" containing 80 track
pads with names ranging from "pad.0" to "pad.79", then the correct
arguments would be:
<p>
<b>-p 79 lpads/pad.</b>
<p>
Each frame of the output animation script will contain an animation
command for each of the track pads.
<p>
<dt>
<b>-w parent/basename</b>
<dd>
Animate the track wheels. This option takes one argument: a
slash-separated path to the wheel basename. The number of wheels is
obtained from the number of lines in the
<b>wheelfile</b>.
If there is, for example, a combination named "rwheels" containing 4
wheels named wheel_0, wheel_1, wheel_2, and wheel_3, then the correct
argument is:
<p>
<b>-w rwheels/wheel_</b>
<p>
Each frame of the output animation script will contain an animation
command for each of the wheels.
<p>
<dt>
<b>-b # # #</b>
<dd>
Specify the yaw, pitch, and roll of the vehicle's axes
with respect to the world axes. By default, the vehicle is assumed to
have a yaw, pitch, and roll of 0, and the track is therefore put into a
xz plane.
<p>
<dt>
<b>-d # # #</b>
<dd>
Specify (in world coordinates) the centroid of the vehicle
of which the track is a part. By default, the vehicle is assumed
centered at the origin.
<p>
<dt>
<b>-u</b>
<dd>
User-specified track distance. The user
should provide, in the second column of
<i>in.table</i>,
the distance that the track should be rolled around the wheels in each
frame. This is the default.
<p>
<dt>
<b>-y</b>
<dd>
Derive the track distance from a table of position, yaw, pitch, and
roll. The second column through the seventh columns of the
<i>in.table</i>
should contain the position and orientation of the vehicle in every
frame. The distance that the track should be rolled around the wheels is
automatically calculated in every frame. If
<i>anim_script</i>
is being used with the same table to create the animation script for the
vehicle itself, the
<b>-b </b>
and
<b>-d</b>
options to
<i>anim_script</i>
and
<i>anim_track</i>
should be the same.
<p>
<dt>
<b>-s</b>

<dd>
Derive the track distance from a table of positions, using automatic
steering. The second column through the fourth column of the
<i>in.table</i>
should contain the position of the vehicle in every frame. The distance
that the track should be rolled around the wheels is automatically
calculated in every frame, based on the assumption that the vehicle is
always steered to face the direction of motion.
If
<i>anim_script</i>
is being used with the same table to create the animation script for the
vehicle itself, the
<b>-b </b>
and
<b>-d</b>
options to
<i>anim_script</i>
and
<i>anim_track</i>
should be the same.
<p>
<dt>
<b>-a</b>

<dd>
Enable anti-strobing measures. When the track is rolling fast enough, track
animations exhibit a strobing effect which may make the track appear to
slow down or rotate backwards. This is an artifact of the discrete-time
nature of the animations, and occurs when the distance traveled by the
track in one frame is close to the pad length. If the
<b>-a </b>
option is selected,
<i>anim_track</i>
adds random jitter to the track's motion when the track speed is high
enough to cause strobing. This causes a motion blur effect rather than
strobing.
<p>
<dt>
<b>-v</b>

<dd>
Specify new wheel positions in every frame. This option allows dynamic
suspensions to be animated. If there are n wheels, then the last 2n
columns of
<i>in.table</i>
should contain the front-back and up-down coordinates of each wheel,
relative to the vehicle center and orientation specified with
<b>-d</b>
and
<b>-b</b>.
The columns should be in pairs: The front-back coordinate of the first
wheel, followed by its up-down coordinate, followed by the front-back
coordinate of the second wheel, and so on.
<p>
If this option is not specified, then the wheel positions are fixed
throughout the animation.
<p>
<dt>
<b>-c</b>

<dd>
Calculate the track circumference, that is, the length of the shortest
track that can wrap around a given set of wheels. When this option is
used, no script is produced, and <i>anim_track</i> returns a single
value representing the track circumference. If this option is used in
conjunction with the <b>-v</b> option, then the output is a table
giving the track circumference in every frame of the animation.
<p>

<dt>
<b>-lm</b>

<dd>
Minimize the track length. With this option the length of the track is
set to the track circumference in every frame, ie the track shrinks to
fit the wheels.
<p>
<dt>
<b>-lf #</b>

<dd>
Specify a fixed track length. The argument specifies the track length, which
remains constant throughout the animation. If at any time the track
circumference exceeds the track length, the program is aborted and a
message is printed on standard error.
<p>
<dt>
<b>-ls #</b>

<dd>
Specify a stretchable track. The argument specifies the initial track
length. If at any time the track circumference exceeds the track length,
the track length is increased to meet the need. The track length never
decreases once it has been increased.
<p>
<dt>
<b>-le #</b>

<dd>
Specify an elastic track. The argument specifies the initial track
length. If at any time the track circumference exceeds the track length,
the track length is increased to meet the need. When the track
circumference decreases again, the track length also decreases, but it
never gets shorter than its original length.
<p>
<dt>
<b>-i #</b>

<dd>
Specify the initial offset of the track. By default, the first track pad
is initially placed at the point where the caternary arc meets the first
wheel. If an offset is specified, it represents the distance clockwise
around the track to from this point to the desired initiall point of
the first pad. This option is typically used to align the track pads
with drive wheel teeth.
<p>
<dt>
<b>-f #</b>

<dd>
Specify the integer with which to begin numbering the frames of the
animation script. The default is zero.
<p>
<dt>
<b>-r #</b>

<dd>
Specify the common radius of all the wheels. In this case, the fourth column
should be omitted from the
<b>wheelfile</b>.
<p>
<dt>
<b>-g #</b>

<dd>
Instead of an animation script, create a file which can be sourced by
MGED
to edit the track geometry. This will actually  wrap the modeled pad
instances around the wheels.
The argument is the number of the frame which is to be emulated. For
example, to model the pads in the positions they will have in the first
frame of an animation, the specified frame number would be zero.
<p>
<dt>
<b>-mp command</b>

<dd>
Specify the animation matrix command to apply to the pads. The default
value is "rarc", meaning that the matrix between the pad and its parent
is replaced by a new matrix. See the
<i>anim_script</i>
man page for more information.
<p>
<dt>
<b>-mw command</b>

<dd>
Specify the animation matrix command to apply to the wheels. The default
value is "lmul", meaning that the new matrix is multiplied onto the left
of the old matrix between the pad and its parent combination. See the
<i>anim_script</i>
man page for more information.

</dl>
<h1>EXAMPLES</h1>
A typical use of
<i>anim_track  </i>
would be to make an animation of a tank rolling across
bumpy ground. By some method (such as physical simulation)
you obtain the position of the center of
the tank and its orientation at each time. You also nead to obtain the
position of the each wheel relative to the vehicle center at each time.
All of this information is placed in
<b>in.table</b>.
The model of the tank is stored in
model.g as a combination named "tank". Its centroid is at the
point (0,0,1005) and it faces the y-axis. An animation script for the
tank itself is created as follows:
<p>
anim_script -d 0 0 1005 -b 90 0 0 /tank &lt; tank.table &gt; tank.script
<p>
Here
<b>tank.table</b>
specifies the position and orientation of the tank in each frame; the
<b>-d </b>
and
<b>-b</b>
options specify the original position and orientation of the tank in the
database.
<p>
To create the model of the track, a prototype track pad is created,
centered on the origin in the x and y directions, with the
wheel-contacting surface face-down on the origin. The pad is 100mm
long and 5mm thick. Ninety-six instances of the pad are created, with names "rpad.0"
through "rpad.95", and grouped together in a combination called "rtrack".
<p>
Now, a file called
<b>rwheelfile </b>
is created, describing the positions and radii of the four wheels in the
right track:
<pre>

   1300  2000  1005     60
   1300  1500    55     50
   1300 -1500    55     50
   1300 -2000  1005     60

</pre>
Two roadwheels both have radius 50mm, while the idler and drivewheels
have a 60mm radius, and the wheels are named wh.0, wh.1, wh.2, and wh.3.
<p>
The following call checks the circumference of the track:
<pre>

%&gt; anim_track -c  rwheelfile
9502.448956

</pre>
The 96 100mm-long pads should be sufficient to wrap around the wheels,
leaving a shallow caternary arc between the idler and driver wheels.
<p>
The following call creates a file which can be used by
MGED
to wrap the pads around the wheels in the model.
<pre>

%&gt; anim_track -g 0 -b 90 0 0 -d 0 0 1005 -lf 9600 -p 96 rtrack/rpad.
rwheelfile &lt;&lt;EOF &gt; rtrack.src
? 0 0
? EOF

</pre>
In this case,
<i>in.table</i>
consisted of only one row and two columns. The two columns represented
time and the distance the track should be rolled from it's initial
position. The
<b>-g </b>
option was set to 0 since frame zero was the only frame in the
input table.
The changes are applied to the geometry in
MGED
with the following command:
<pre>

mged&gt; source rtrack.src

</pre>
The pads are now permanently modeled in their new positions.
<p>
In order to animate the pads and wheels, the following command would be
appropriate:
<p>
anim_track -p 96 rtrack/rpad. -w rwheel/wh. -d 0 0 1005 -b 90 0 0 -y -v -lf
9600 rwheelfile &lt; in.table &gt; rtrack.script
<p>
The in.table contains 15 columns specifying the time, the 3D position and
yaw, pitch, and roll of the vehicle, and the front-back and up-down
coordinates of each of the four wheels relative to the vehicle center.
For example, one row of
<b>in.table </b>
could be:
<p>
0.5 234.0 1415.6 1005 45 0 0   2000 0   1500 -950   -1500 -950   -2000 -10
<p>
This would specify the new position of the vehicle half of a second into
the animation, and indicate that
the first three wheels remained in their original positions
while the fourth wheel had dropped 10mm.
<p>
<b>rtrack.script </b>
by itself causes the wheels to move and rotate and the
pads to roll around them. When the entire tank, including the track,
is moved along across the ground by
<b>track.script</b>,<b></b>
the full effect is acheived. The two scripts
can be combined
with a script for the left track, using
<i>script_sort</i>,
to make the complete script.
<p>
<h1>BUGS</h1>
Tracks must have at least two wheels. The front edge of wheel.(n-1) must
stay behind the back edge of wheel.0, or the results are unpredictable.
(Usually a lot of NaN's on the output).
<h1>SEE ALSO</h1>
anim_script(1)
<h1>AUTHOR</h1>
Carl J. Nuzman
<h1>"BUG REPORTS"</h1>
Reports of bugs or problems should be submitted via electronic
mail to &lt;devs@@brlcad.org&gt;.

</body></html>
@


14.3
log
@replace the old cad e-mail with devs at brlcad dot org since the dot mil forward is no more.
@
text
@d6 1
a6 1
tracked vehicle. 
d14 1
a14 1
In addition, <i>anim_track</i> can produce an MGED source file 
d22 1
a22 1
caternary arc. 
d24 1
a24 1
Anim_track requires two input files. The first, referred to above as 
d37 1
a37 1
respectively, but any orientation can be specified by the user with the 
d43 1
a43 1
the wheel positions specified in 
d51 2
a52 2
length, it is taken up in a caternary arc which hangs down between the 
first and last wheels. Thus the first wheel in 
d57 1
a57 1
length mode specified with the 
d61 1
a61 1
The second input file required by 
d63 1
a63 1
referred to above as 
d66 1
a66 1
format of this second file varies according to the command-line 
d70 1
a70 1
track has rolled around the wheels in each frame (see the 
d76 1
a76 1
frame (see the 
d89 1
a89 1
is an arbitrary string. 
d92 1
a92 1
the top front wheel in a given track and 
d102 1
a102 1
where 
d104 1
a104 1
ranges from 0 to one less than the number of pads. 
d138 1
a138 1
obtained from the number of lines in the 
d154 2
a155 2
have a yaw, pitch, and roll of 0, and the track is therefore put into a 
xz plane. 
d168 1
a168 1
should provide, in the second column of 
d181 1
a181 1
automatically calculated in every frame. If 
d184 1
a184 1
vehicle itself, the 
d186 1
a186 1
and 
d188 1
a188 1
options to 
d190 1
a190 1
and 
d208 1
a208 1
vehicle itself, the 
d210 1
a210 1
and 
d212 1
a212 1
options to 
d214 1
a214 1
and 
d228 1
a228 1
option is selected, 
d240 1
a240 1
columns of 
d346 1
a346 1
is replaced by a new matrix. See the 
d362 1
a362 1
A typical use of 
d365 1
a365 1
bumpy ground. By some method (such as physical simulation) 
d378 1
a378 1
Here 
d380 1
a380 1
specifies the position and orientation of the tank in each frame; the 
d391 1
a391 1
through "rpad.95", and grouped together in a combination called "rtrack". 
d418 1
a418 1
The following call creates a file which can be used by 
d429 1
a429 1
In this case, 
d433 1
a433 1
position. The 
d437 1
a437 1
The changes are applied to the geometry in 
d456 1
a456 1
For example, one row of 
d470 1
a470 1
is moved along across the ground by 
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d6 1
a6 1
tracked vehicle.
d14 1
a14 1
In addition, <i>anim_track</i> can produce an MGED source file
d22 1
a22 1
caternary arc.
d24 1
a24 1
Anim_track requires two input files. The first, referred to above as
d37 1
a37 1
respectively, but any orientation can be specified by the user with the
d43 1
a43 1
the wheel positions specified in
d51 2
a52 2
length, it is taken up in a caternary arc which hangs down between the
first and last wheels. Thus the first wheel in
d57 1
a57 1
length mode specified with the
d61 1
a61 1
The second input file required by
d63 1
a63 1
referred to above as
d66 1
a66 1
format of this second file varies according to the command-line
d70 1
a70 1
track has rolled around the wheels in each frame (see the
d76 1
a76 1
frame (see the
d89 1
a89 1
is an arbitrary string.
d92 1
a92 1
the top front wheel in a given track and
d102 1
a102 1
where
d104 1
a104 1
ranges from 0 to one less than the number of pads.
d138 1
a138 1
obtained from the number of lines in the
d154 2
a155 2
have a yaw, pitch, and roll of 0, and the track is therefore put into a
xz plane.
d168 1
a168 1
should provide, in the second column of
d181 1
a181 1
automatically calculated in every frame. If
d184 1
a184 1
vehicle itself, the
d186 1
a186 1
and
d188 1
a188 1
options to
d190 1
a190 1
and
d208 1
a208 1
vehicle itself, the
d210 1
a210 1
and
d212 1
a212 1
options to
d214 1
a214 1
and
d228 1
a228 1
option is selected,
d240 1
a240 1
columns of
d346 1
a346 1
is replaced by a new matrix. See the
d362 1
a362 1
A typical use of
d365 1
a365 1
bumpy ground. By some method (such as physical simulation)
d378 1
a378 1
Here
d380 1
a380 1
specifies the position and orientation of the tank in each frame; the
d391 1
a391 1
through "rpad.95", and grouped together in a combination called "rtrack".
d418 1
a418 1
The following call creates a file which can be used by
d429 1
a429 1
In this case,
d433 1
a433 1
position. The
d437 1
a437 1
The changes are applied to the geometry in
d456 1
a456 1
For example, one row of
d470 1
a470 1
is moved along across the ground by
@


14.2
log
@remove the quirky copyright section in the documentation talking about the application's copyright (which is incorrect now regardless) from the simple man2htmlish pages
@
text
@d488 1
a488 1
mail to &lt;CAD@@BRL.MIL&gt;.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@a485 3
<h1>COPYRIGHT</h1>
	This software is Copyright (C) 1996-2004 by the United States Army
in all countries except the USA.  All rights reserved.
@


1.1
log
@moved from html/ to doc/html/
@
text
@@

