head	14.4;
access;
symbols
	rel-7-10-4:14.4
	STABLE:14.4.0.4
	stable-branch:14.2
	rel-7-10-2:14.4
	rel-7-10-0:14.4
	rel-7-8-4:14.4
	rel-7-8-2:14.4
	rel-7-8-0:14.4
	trimnurbs-branch:14.4.0.2
	help:14.4
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.2
	rel-7-2-0:14.2
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.4
date	2005.10.23.04.44.26;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.05.02.01.59.34;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.07.53.42;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.09;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.19.18.35.17;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.09;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.4
log
@trailing ws
@
text
@<html><head>
<title>BRL-CAD anim_hardtrack Man Page</title>
</head><body>
<h1>NAME</h1>
anim_hardtrack - make an animation script for the links and/or wheels of a
tracked vehicle with rigid axles.
<h1>SYNOPSIS</h1>
<b></b>
anim_hardtrack [-l num_links linkname] [-w wheelname] [options] wheelfile &lt; in.table &gt; out.script
<h1>DESCRIPTION</h1>
<i>Anim_hardtrack </i>
is designed to produce an animation script for the
animation of a track and/or the wheels defining a track, where the wheels
are rigidly fixed in place with respect to the vehicle. The main
difference between
<i>anim_hardtrack</i>
and
<i>anim_track</i>
is that
<i>anim_track</i>
handles vehicles with dynamic axles. Both are designed to be use in
conjunction with
<i>anim_script, </i>
to achieve the final result.
<p>
<b>in.table </b>
is the file that will be used to animate the
vehicle itself. By default, it is assumed that it contains a time column,
three columns of translation information, and three columns specifying the
vehicle's yaw, pitch, and roll. If it is desired that the vehicle be steered
automatically, then the table should contain only time and position, and the
<b>-s </b>
option should be used.
<p>
The track's
geometry is defined by
<b>wheelfile</b>,<b></b>
a table which contains one row for each wheel defining the track. The
first three columns of the table specify the x, y, and z coordinates of
the wheel centers. The fourth column specifies the radius of each wheel.
<p>
The order in which the wheels are listed should be the order in which a
link of the track would move around the wheels when the vehicle is moving
forward. (clockwise, when looking from the right of the vehicle).
The wheel centers should all lie in a plane perpendicular to the vehicle's
left-right axis. If this is not the case,
<i>anim_hardtrack</i>
uses the first wheel as the standard and projects all the other wheels into
the same plane as the first wheel. By default, it is assumed that the
vehicle's left-right axis is the y-axis. If the modeled vehicle has some
other orientation, this must be specified with the
<b>-b </b>
option.
<p>
By default, it is
assumed that
all of the link objects are modeled at the model origin,
with the wheel-contacting surface centered on the origin and the
ground-contacting surface facing up. The sides of each link which
connect to other links should face the positive and negative x-axes.
<i>Anim_hardtrack </i>
prints the appropriate
commands to move the links from
the origin to the correct place around the wheels.
<p>
If the links are modeled in place around the wheels to begin with, the
the
<b>-p </b>
and
<b>-i </b>
options are needed.

<h1></h1>
OPTIONS:
<p>
One or both of the first two options should always be specified.
<dl><dt>
<b>\-l num linkname</b>

<dd>
Print animation scripts to animate the links of the track. Animation
commands will be printed for
<i>num </i>
different links
named
<i>linkname</i>.0,<i>linkname</i>.1,<i></i>
up through
<i>linkname</i>.(<i>num</i>-1).<i></i>
A typical example of a linkname might
be "tank/righttrack/links/link". The full pathname must be specified,
because anim_hardtrack's method is to roll the links around within
the vehicle's tree structure so that when the whole vehicle "tank" is
animated, the complete combination of rolling around and translating is
achieved.
<dt>
<b>\-w wheelname</b>

<dd>
Print animation
scripts to rotate each wheel. The wheels are named wheelname.0, wheelname.1,
and so on, where wheelname.0 is the first wheel listed in
<b>wheelfile</b>.<b></b>
As with the links, the full pathname for the wheels should be specified.
<dt>
<b>\-b # # #</b>

<dd>
Specify the yaw, pitch, and roll of the vehicle's axes
with respect to the world axes. By default, the vehicle is assumed to
have a yaw, pitch, and roll of 0.
<dt>
<b>\-d # # #</b>

<dd>
Specify (in world coordinates) the centroid of the vehicle
of which the track is a part. By default, the vehicle is assumed
centered at the origin.
</dl>
<p>
When calling
<i>anim_script </i>
to handle the animation of the vehicle
itself, the parameters following the
<b>-b </b>
and
<b>-d </b>
options should be identical
to those used for
<i>anim_hardtrack</i>.
<dl><dt>
<b>\-r #</b>

<dd>
Specify the common radius of all wheels. In this case the fourth column
should be omitted from the
<b>wheelfile</b>.
<dt>
<b>\-s</b>

<dd>
Automatic steering. In this case,
<b>in.table </b>
specifies only the time and position
of the vehicle. The orientation is calculated to always face the vehicle
in the direction of motion.
This should be used when the
<b>\-s </b>
option is used by
<i>anim_script</i>
to animate the vehicle.
</dl>
<p>
<dl><dt>
<b>\-f#</b>

<dd>
Specify the integer with which to begin numbering frames.
Default is zero.
<dt>
<b>\-p</b>

<dd>
Animate placed links, rather than links stored at the origin.
In order for placed links to be animated, they must be equally spaced
around the wheels defining the track. The track must be formed of arcs
around the wheels and straight lines between the wheels, and the links
must be numbered clockwise as seen from the right.
By default, it is assumed that the
center of the first link, linkname.0, is at the beginning of the
straight track segment between wheel.(n-1) and wheel.0 . If this is
not the case, the position of the first link must be identified with the
<b>\-i#</b>
option.
<dt>
<b>\-i#</b>

<dd>
Specify the initial offset of the first link. If this option is
not used, the initial position of linkname.0 is assumed to be the
beginning of the straight track segment between wheel.(n-1) and wheel.0.
If it is used, the argument specifies the distance clockwise around the
track from the default position to the actual desired offset. If the
links are modeled at the origin, the user can choose any offset. This
can be useful for lining up the links with gears of a drive wheel, for
example.
If the
<b>-p </b>
option is being used to animated pre-placed links, then it is essential
that the actual offset of the first pre-placed link be specified.
</dl>
<h2>Output:</h2>
<p>
The output is a script containing as many frames as there
are positions in
<b>in.table</b>.<b></b>
If there are
<i>n </i>
links and
<i>k </i>
wheels, each
frame contains up to
<i></i>n<i>+</i>k<i></i>
anim commands, either:
<pre>

anim linkname.i matrix lmul
[... matrix ...] ;
				or
anim wheelname.j matrix lmul
[... matrix ...] ;

for 0&lt;=i&lt;n and 0&lt;=j&lt;k.

</pre>
<h1>EXAMPLES</h1>
Suppose you want to make an animation of a tank rolling across
flat ground. A list of desired positions is created, perhaps by
interpolating between a few key positions; this information is placed
in a four column animation table, in.table. The model of the tank is stored in
model.g as a combination named "tank". Its centroid is at the
point (0,0,1000) and it faces the y-axis. An animation script for the
tank itself is created as follows:
<p>
anim_script -s -d 0 0 1000 -b 90 0 0 /tank &lt; in.table &gt; tank.script
<p>
Suppose that there are two
roadwheels and a drivewheel (tank/rwheel/wheel.i, 0&lt;=i&lt;3) which define
the shape of the right track.
A file called
<b>rwheelfile </b>
is created:
<pre>

1500   -2000    30      30
1500   0        1000    35
1500   2000     30      30

</pre>
This
<b>rwheelfile </b>
lists the position and
radius of each of the three wheels.
<p>
There are eighty links which make up the right track
(tank/rtrack/link.i, 0&lt;=i&lt;80).
The links of the right track are all modeled
at the origin with the outer, ground-contacting surface
facing up and the inner, wheel-contacting surface centered at the
origin.
<p>
The appropriate call to
<i>anim_hardtrack </i>
is now:
<p>
anim_hardtrack -d 0 0 1000 -b 90 0 0 -w tank/rwheel -l 80 tank/rtrack/link
	rwheelfile &lt; in.table &gt; rtrack.script
<p>
Suppose that the left track is similar to the right track,
except that all the wheels are of radius 30 units, and the links, rather
than being stored at the origin, are actually placed in position around
the left wheels to begin with. The
<b>lwheelfile </b>
would be:
<pre>

0   30
-1500   0       1000
-1500   2000    30

</pre>
and the call would be:
<p>
anim_hardtrack -p -r 30 -d 0 0 1000 -b 90 0 0 -w tank/lwheel
	-l 80 tank/ltrack/link lwheelfile &lt;in.table &gt; ltrack.script
<p>
Here, it is assumed that tank/ltrack/link.0 is initially at the
beginning of the straight track segment between lwheel.2 and lwheel.0,
that is, at the point (2000,1500,-1000) in the vehicle's coordinates.
If, instead, the first link is initially centered halfway between the
two roadwheels, this must be specified with the
<b>-i# </b>
option. If the link's
actual position is 2000 units farther around the track than expected:
<p>
anim_hardtrack -i 2000 -p -r 30 -d 0 0 1000 -b 90 0 0 -w tank/lwheel
	-l 80 tank/ltrack/link lwheelfile &lt;in.table &gt; ltrack.script
<p>
One final step may remain. The above procedure produces a script with rigid
naming conventions, in order to make input simple. This may mean that
the names in the script do not match the names in model.g. An editor
should then be used at the end to replace all instances of the
conventional name with the real name; for example, in this case it may
be necessary to replace "rwheel.1" with "r_drivewheel".
<p>
<b>Tank.script</b>,<b></b>
<b>rtrack.script</b>,<b></b>
and
<b>ltrack.script </b>
can be combined
with
<i>anim_sort </i>
to make the complete script.
<p>
<h1>BUGS</h1>
Tracks must have at least two wheels, and they must be listed in clockwise
order, or the results are unpredictable.
<h1>SEE ALSO</h1>
anim_script(1), anim_track(1)
<h1>AUTHOR</h1>
Carl J. Nuzman
<h1>"BUG REPORTS"</h1>
Reports of bugs or problems should be submitted via electronic
mail to &lt;devs@@brlcad.org&gt;.

</body></html>
@


14.3
log
@replace the old cad e-mail with devs at brlcad dot org since the dot mil forward is no more.
@
text
@d17 1
a17 1
and 
d19 1
a19 1
is that 
d21 1
a21 1
handles vehicles with dynamic axles. Both are designed to be use in 
d36 1
a36 1
geometry is defined by 
d42 1
a42 1
The order in which the wheels are listed should be the order in which a 
d56 1
a56 1
assumed that 
d63 1
a63 1
commands to move the links from 
d67 1
a67 1
the 
d69 1
a69 1
and 
d84 2
a85 2
different links 
named 
d87 1
a87 1
up through 
d94 1
a94 1
achieved. 
d100 2
a101 2
scripts to rotate each wheel. The wheels are named wheelname.0, wheelname.1, 
and so on, where wheelname.0 is the first wheel listed in 
d120 1
a120 1
When calling 
d123 1
a123 1
itself, the parameters following the 
d125 1
a125 1
and 
d128 1
a128 1
to those used for 
d141 1
a141 1
Automatic steering. In this case, 
d143 1
a143 1
specifies only the time and position 
d146 1
a146 1
This should be used when the 
d148 1
a148 1
option is used by 
d186 1
a186 1
If the 
d194 1
a194 1
are positions in 
d196 1
a196 1
If there are 
d198 1
a198 1
links and 
d201 1
a201 1
frame contains up to 
d211 2
a212 2
 
for 0&lt;=i&lt;n and 0&lt;=j&lt;k. 
d228 2
a229 2
the shape of the right track. 
A file called 
d239 1
a239 1
This 
d244 1
a244 1
There are eighty links which make up the right track 
d251 1
a251 1
The appropriate call to 
d255 1
a255 1
anim_hardtrack -d 0 0 1000 -b 90 0 0 -w tank/rwheel -l 80 tank/rtrack/link 
d261 1
a261 1
the left wheels to begin with. The 
d273 1
a273 1
anim_hardtrack -p -r 30 -d 0 0 1000 -b 90 0 0 -w tank/lwheel 
d280 1
a280 1
two roadwheels, this must be specified with the 
d285 1
a285 1
anim_hardtrack -i 2000 -p -r 30 -d 0 0 1000 -b 90 0 0 -w tank/lwheel 
d297 1
a297 1
and 
d300 1
a300 1
with 
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d17 1
a17 1
and
d19 1
a19 1
is that
d21 1
a21 1
handles vehicles with dynamic axles. Both are designed to be use in
d36 1
a36 1
geometry is defined by
d42 1
a42 1
The order in which the wheels are listed should be the order in which a
d56 1
a56 1
assumed that
d63 1
a63 1
commands to move the links from
d67 1
a67 1
the
d69 1
a69 1
and
d84 2
a85 2
different links
named
d87 1
a87 1
up through
d94 1
a94 1
achieved.
d100 2
a101 2
scripts to rotate each wheel. The wheels are named wheelname.0, wheelname.1,
and so on, where wheelname.0 is the first wheel listed in
d120 1
a120 1
When calling
d123 1
a123 1
itself, the parameters following the
d125 1
a125 1
and
d128 1
a128 1
to those used for
d141 1
a141 1
Automatic steering. In this case,
d143 1
a143 1
specifies only the time and position
d146 1
a146 1
This should be used when the
d148 1
a148 1
option is used by
d186 1
a186 1
If the
d194 1
a194 1
are positions in
d196 1
a196 1
If there are
d198 1
a198 1
links and
d201 1
a201 1
frame contains up to
d211 2
a212 2

for 0&lt;=i&lt;n and 0&lt;=j&lt;k.
d228 2
a229 2
the shape of the right track.
A file called
d239 1
a239 1
This
d244 1
a244 1
There are eighty links which make up the right track
d251 1
a251 1
The appropriate call to
d255 1
a255 1
anim_hardtrack -d 0 0 1000 -b 90 0 0 -w tank/rwheel -l 80 tank/rtrack/link
d261 1
a261 1
the left wheels to begin with. The
d273 1
a273 1
anim_hardtrack -p -r 30 -d 0 0 1000 -b 90 0 0 -w tank/lwheel
d280 1
a280 1
two roadwheels, this must be specified with the
d285 1
a285 1
anim_hardtrack -i 2000 -p -r 30 -d 0 0 1000 -b 90 0 0 -w tank/lwheel
d297 1
a297 1
and
d300 1
a300 1
with
@


14.2
log
@remove the quirky copyright section in the documentation talking about the application's copyright (which is incorrect now regardless) from the simple man2htmlish pages
@
text
@d313 1
a313 1
mail to &lt;CAD@@BRL.MIL&gt;.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@a310 3
<h1>COPYRIGHT</h1>
	This software is Copyright (C) 1993-2004 by the United States Army
in all countries except the USA.  All rights reserved.
@


1.1
log
@moved from html/ to doc/html/
@
text
@@

