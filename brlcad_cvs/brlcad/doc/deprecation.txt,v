head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2007.12.07.06.42.27;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.07.06.36.40;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2007.12.07.06.32.17;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.06.16.11.27;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.06.15.08.07;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.10.19.42.07;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.22.21.06.48;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.21.03.24.37;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.02.07.35.02;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.9
log
@and then there were none.  make the last of the pre-7.0 deprecations now finally obsolete including bn_mat_zero(), bn_mat_idn(), and bn_mat_copy().  they all have equivalent macros provided by the api.
@
text
@						 -*- coding: utf-8 -*-
BRL-CAD Deprecation Log
=======================

Included below is a deprecation log and notes for BRL-CAD API changes
that potentially impact developers.  The general practice is that
public API changes may go from deprecated to obsolete during one of
the following events:

a) during a major release
    (e.g. going from 7.*.* to 8.*.*)
b) during a minor release provided that
    1) change was publicly announced as deprecated beforehand
    2) sufficient deprecation warning was been given
	i) at least three minor releases have passed since deprecation
	ii) at least three months have passed since deprecation
c) during a minor release provided that
    1) the API was never publicly announced or otherwise documented
    2) the interface was declared in a public header
    3) there exists a an equivalent alternative interface
    (e.g. changing the name of a function)

Otherwise, changes to interfaces that are never publicly announced,
are not part of publicly available documentation, and are not in
public headers are fair game to implement as needed at any time.

If a change will intentionally replace or remove routines, then those
routines should be then marked as deprecated first.  If the change is
"minimally impacting", i.e. a change to a non-critical routine that
has a suitable and completely equivalent alternative, can generally be
changed during minor releases.  An example of minimally impacting
changes include modifications like adding a new parameter to a
function or renaming a non-critical function.  Critical functions are
those related directly to geometry creation, loading, processing, and
ray-tracing; as well as the common library facilities in bu and bn.

Marking routines as deprecated can be done during compile-time with
#warning pre-processor declarations or during run-time with print
statements.

The items listed below are items that are deprecated or obsolete,
categorized by the release in which the change was made.  If the
change involved a rename/removal of a routine, both the original and
new names should be listed for reference.


**************
* DEPRECATED *
**************
7.12
----
src/libbu/parallel.c
	bu_get_load_average(), remove [deprecated 7.12]

7.10
----
src/librt/bomb.c
	rt_bomb() -> bu_bomb() [deprecated 7.10]


************
* OBSOLETE *
************

7.12.0
------
include/bn.h
	bn_mat_zero() -> MAT_ZERO() [deprecated pre-7.0]
	bn_mat_idn() -> MAT_IDN() [deprecated pre-7.0]
	bn_mat_copy() -> MAT_COPY() [deprecated pre-7.0]
include/compat4.h
	compat4.h -> bu.h && bn.h [deprecated 5.0]
include/raytrace.h
	rt_overlap_quietly() -> struct application.a_logoverlap = rt_silent_logoverlap [deprecated pre 7.0]
src/libbu/brlcad_path.c
	bu_brlcad_path() -> bu_brlcad_root() || bu_brlcad_data() [deprecated 7.4]
	bu_tcl_brlcad_path() -> bu_tcl_brlcad_root() || bu_tcl_brlcad_data() [deprecated 7.4]
include/fb.h
	fb_log(char *fmt) -> fb_log(const char *fmt) [const]
include/noalias-prag.h
	removed [non-stdc]
include/noalias.h
	removed [non-stdc]
src/librt/wdb_obj.c -> src/librt/db_obj.c
	removed wdb_tree_cmd(), added dgo_tree_cmd() [rename]


7.10.4
------
include/msr.h [pre 7.0]
	msr.h -> bu.h
include/rtlist.h [pre 7.0]
	rtlist.h -> bu.h
include/rtstring.h [pre 7.0]
	rtstring.h -> bu.h
include/shortvect.h [pre 7.0]
include/shortvect-pr.h [pre 7.0]

7.10.2
------
include/raytrace.h
	rt_version -> rt_version() [private]
include/[library].h (several)
	[library]_version -> [library]_version() [private]
@


1.8
log
@compat4.h is now finally fully obsolete.  it's been deprecated since 5.0 and with a compilation pragma warning now for several major release.  it's time.  just let it go.  buh-bye.
@
text
@a59 7
pre 7.0
-------
include/bn.h
	bn_mat_zero() -> MAT_ZERO()
	bn_mat_idn() -> MAT_IDN()
	bn_mat_copy() -> MAT_COPY()

d67 4
d72 1
a72 1
	compat4.h -> bu.h && bn.h
d74 1
a74 1
	rt_overlap_quietly() -> struct application.a_logoverlap = rt_silent_logoverlap
@


1.7
log
@rt_overlap_quietly() is now finally obsolete.  no longer need the _rt_defoverlap since the verbosity flag is no longer used anyways as well.  apps instead can set the a_logoverlap callback to a logging routine (like rt_silent_logoverlap()) as the overlap handler is supposed to be silent.
@
text
@a61 2
include/compat4.h
	compat4.h -> bu.h && bn.h
d74 2
@


1.6
log
@finally obsolete bu_brlcad_path() and bu_tcl_brlcad_path(), which were marked deprecated back in 7.4; callers should now be using bu_brlcad_data() and bu_brlcad_root() depending on the nature of the lookup.
@
text
@a61 3
include/raytrace.h
	struct application.a_overlap -> a_multioverlap()
	rt_overlap_quietly() -> struct application.a_logoverlap
d76 2
@


1.5
log
@denote the fact that fb_log format became const
@
text
@d50 5
d58 1
a58 6
	rt_bomb() -> bu_bomb()

7.4
---
src/libbu/brlcad_path.c
	bu_brlcad_path() -> bu_brlcad_root() || bu_brlcad_data()
d79 3
d83 1
a83 1
	fb_log(char *fmt) -> fb_log(const char *fmt)
d85 1
a85 1
	removed, non-stdc
d87 3
a89 3
	removed, non-stdc
src/librt/wdb_obj.c
	removed wdb_tree_cmd(), added to dg_obj.c as dgo_tree_cmd()
d94 1
a94 2

include/msr.h (pre 7.0)
d96 1
a96 1
include/rtlist.h (pre 7.0)
d98 1
a98 1
include/rtstring.h (pre 7.0)
d100 2
a101 2
include/shortvect.h (pre 7.0)
include/shortvect-pr.h (pre 7.0)
d106 1
a106 1
	rt_version -> rt_version()
d108 1
a108 1
	[library]_version -> [library]_version()
@


1.4
log
@make a note that the various *_version variables are all now *_version() functions now since 7.10.2 even though the globals were never intended for external use (they were in headers merely for compilation convenience as they were used across directories in multiple files).  additionally added, but not commented is the 'new' brlcad_version() function which isn't as library-specific as the other variables.
@
text
@a49 1

d79 2
d88 1
@


1.3
log
@removed the non-ansi/stc compliant noalias.h and noalias-prag.h headers that were used with the cray (and alliant) to make pragma decls before loops.  made obsolete long ago with the move to ansi compliance.
@
text
@d99 6
@


1.2
log
@removed wdb_tree_cmd(), added to dg_obj.c as dgo_tree_cmd()
@
text
@d80 4
@


1.1
log
@move the deprecation items to their own file so that they can actually be preserved in a running log of API changes, including basic guidelines for how to go from deprecated to obsolete.
@
text
@d17 19
a35 6

Ideally, if a change is the addition of new routines, the change
should be implemented in an addtive fashion that preserves existing
functions and behavior as much as possible.  If the change will
intentionally replace or remove routines, then those routines should
be then marked as deprecated.
d38 1
a38 1
#warning pre-processor declarations or during run-time with printing
d41 5
a45 1
The items listed below are items that deprecated and/or now obsolete.
d78 7
a84 2
7.12
----
@

