head	1.3;
access;
symbols
	ansi-20040316-freeze:1.1.1.1
	autoconf-20031203:1.2
	autoconf-20031202:1.2
	phong-branch:1.2.0.4
	photonmap-branch:1.2.0.2
	rel-6-1-DP:1.1.1.1
	rel-6-0-2:1.1.1.1
	rel-6-0-1-branch:1.1.1.1.0.4
	hartley-6-0-post:1.1.1.1
	hartley-6-0-pre:1.1.1.1
	rel-6-0-1:1.1.1.1
	rel-6-0:1.1.1.1
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	AUTOCONF:1.2.0.6
	windows-6-0-branch:1.1.1.1.0.8
	ansi-6-0-branch:1.1.1.1.0.6
	itcl3-2:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.03.09.21.07.33;	author morrison;	state dead;
branches;
next	1.2;

1.2
date	2003.03.13.19.05.58;	author jra;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.12.06.21.35.12;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.35.12;	author bparker;	state Exp;
branches
	1.1.1.1.6.1
	1.1.1.1.8.1;
next	;

1.1.1.1.6.1
date	2004.03.17.07.13.13;	author morrison;	state dead;
branches;
next	;

1.1.1.1.8.1
date	2004.03.15.17.27.24;	author morrison;	state dead;
branches;
next	;

1.2.6.1
date	2004.03.15.14.07.11;	author erikg;	state dead;
branches;
next	;


desc
@@


1.3
log
@libitcl3.2 was moved to libitcl and updated to latest developer cvs (3.3 pre-release)
@
text
@# Borland C++ 4.52 makefile
#
# Copyright (c) 1993-1996 Lucent Technologies
# based on original from
# Copyright (c) 1995-1996 by Sun Microsystems, Inc.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

!include "..\..\Makefile.bc"

#
# Project directories
#
# ROOT = top of source tree
# TMPDIR = location where .obj files should be stored during build

ROOT	   		= ..
TMPDIR			= .
TARGET_LIB_ITK		= $(TARGET_LIB)\Itk2.2
TARGET_DOC_ITK 		= $(TARGET_DOC)\Itk

# uncomment the following line to compile with symbols
#DEBUG=1

# uncomment the following two lines to compile with TCL_MEM_DEBUG
#DEBUGDEFINES	=TCL_MEM_DEBUG


INCLUDES   =$(BORLAND)\include;$(ROOT)\generic;$(ROOT);$(TCLDIR)\generic;$(ITCLDIR)\generic;$(TKDIR)\generic;$(TKDIR)\xlib;$(TKDIR)\bitmaps
LIBDIRS    =$(BORLAND)\lib;$(ROOT)\win

!ifndef DEBUG

# these macros cause maximum optimization and no symbols
DEBUGLDFLAGS =
DEBUGCCFLAGS = -v- -vi- -O2

!else

# these macros enable debugging
DEBUGLDFLAGS = -v
DEBUGCCFLAGS = -k -Od -v

!endif

DEFINES = _RTLDLL;USE_TCLALLOC=0;STRICT;$(DEBUGDEFINES);ITCL_NAMESPACES=1
PROJECTCCFLAGS= $(DEBUGCCFLAGS) -w-par -w-stu

LNFLAGS_exe = -Tpe -aa -c $(DEBUGLDFLAGS) $(BORLAND)\lib\c0w32
LNFLAGS_dll = -Tpd -aa -c $(DEBUGLDFLAGS) $(BORLAND)\lib\c0d32

LNLIBS_exe =	$(ITKLIB) $(ITCLLIBDIR)\$(ITCLLIB) $(TKLIBDIR)\$(TKLIB) $(TCLLIBDIR)\$(TCLLIB) import32 cw32i
LNLIBS_dll =	$(ITCLLIBDIR)\$(ITCLLIB) $(TKLIBDIR)\$(TKLIB) $(TCLLIBDIR)\$(TCLLIB) import32 cw32i

#
# Global makefile settings
#

.AUTODEPEND
.CACHEAUTODEPEND

.suffixes: .c .dll .lib .obj .exe

.path.c=$(ROOT)\win;$(ROOT)\generic;
.path.obj=$(TMPDIR)

ITKWISHOBJS = \
	$(TMPDIR)\winMain.obj

ITKOBJS = \
	$(TMPDIR)\itk_archetype.obj \
	$(TMPDIR)\itk_cmds.obj \
	$(TMPDIR)\itk_option.obj \
	$(TMPDIR)\itk_util.obj \
	$(TMPDIR)\dllEntryPoint.obj

ITKWISH = itkwish.exe


#
# Targets
#

all: cfgdll $(ITKDLL) cfgexe $(ITKWISH) cfgcln
test: $(ITKWISH)
	$(CP) $(TCLLIBDIR)\*.dll
	$(CP) $(TKLIBDIR)\*.dll
	$(CP) $(ITCLLIBDIR)\*.dll
#set ITK_
	$(ITKWISH) <<|
   cd ..\tests
   source all
   exit
|

install: all
	$(MKDIR) "$(TARGET_ROOT)"
	$(MKDIR) "$(TARGET_BIN)"
	$(MKDIR) "$(TARGET_LIB_ROOT)"
	$(MKDIR) "$(TARGET_LIB)"
	$(MKDIR) "$(TARGET_LIB_ITK)"
	$(MKDIR) "$(TARGET_INCLUDE_ROOT)"
	$(MKDIR) "$(TARGET_INCLUDE)"
	$(MKDIR) "$(TARGET_DOC)"
	$(MKDIR) "$(TARGET_DOC_ITK)"
	$(CP) $(TMPDIR)\$(ITKWISH) "$(TARGET_BIN)"
	$(CP) $(TMPDIR)\$(ITKDLL) "$(TARGET_BIN)"
	$(CP) $(ROOT)\generic\itk.h "$(TARGET_INCLUDE)"
	$(CP) $(ROOT)\library\*.* "$(TARGET_LIB_ITK)"
	$(CP) $(ROOT)\win\*.tcl "$(TARGET_LIB_ITK)"
	$(CP) $(ROOT)\..\html\Itk\*.* "$(TARGET_DOC_ITK)"

# Implicit Targets

.c.obj:
	@@$(BCC32) {$< }

.dll.lib:
	$(IMPLIB) -c $@@ $<

.rc.res:
	$(RC) -i$(ROOT)\generic;$(ITCLDIR)\generic;$(TCLDIR)\generic;$(TKDIR)\generic $<

#
# Special case object file targets
#

#
# Configuration file targets - these files are implicitly used by the compiler
#

cfgdll:
	@@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -WD
		-D$(DEFINES) -3 -d $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfgexe:
	@@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -W
		-D$(DEFINES) -3 -d $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfgtest:
	@@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -W
		-D$(DEFINES);TCL_TEST -3 -d $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfgcln:
	@@$(RM) bcc32.cfg

#
# Executable targets
#

$(ITKDLL): $(ITKOBJS) itk.def rc\itk.res
	$(TLINK32) @@&&|
$(LNFLAGS_dll) $(ITKOBJS)
$@@
-x
$(LNLIBS_dll)
itk.def
rc\itk.res
|

$(ITKWISH): $(ITKWISHOBJS) $(ITKLIB) rc\itkwish.res
	$(TLINK32) @@&&|
$(LNFLAGS_exe) $(ITKWISHOBJS)
$@@
-x
$(LNLIBS_exe)
|, &&|
EXETYPE WINDOWS
CODE PRELOAD MOVEABLE DISCARDABLE
DATA PRELOAD MOVEABLE MULTIPLE
|, rc\itkwish.res

#
# Other dependencies
#


# The following rule automatically generates a tk.def file containing
# an export entry for every public symbol in the $(TKDLL) library.

itk.def: $(ITKOBJS)
	$(TCLLIBDIR)\dumpexts.exe -o $@@ $(ITKDLL) @@&&|
		$(ITKOBJS)
|

# Dependencies for .rc files:
rc\itk.res: rc\*.cur rc\itk.ico
rc\itkwish.res: rc\*.cur rc\itk.ico

# debugging rules, the .dll and .exe files must be in the same
# directory as the object files for debugging purposes

$(TMPDIR)\$(ITKDLL): $(ITKDLL)
	$(CP) $(ITKDLL) $(TMPDIR)

$(TMPDIR)\$(ITCLDLL): $(ITCLLIBDIR)\$(ITCLDLL)
        $(CP) $(ITCLLIBDIR)\$(ITCLDLL) $(TMPDIR)

$(TMPDIR)\$(TKDLL): $(TKLIBDIR)\$(TKDLL)
        $(CP) $(TKLIBDIR)\$(TKDLL) $(TMPDIR)

$(TMPDIR)\$(TCLDLL): $(TCLLIBDIR)\$(TCLDLL)
	$(CP) $(TCLLIBDIR)\$(TCLDLL) $(TMPDIR)

$(TMPDIR)\$(ITKWISH): $(ITKWISH)
	$(CP) $(ITKWISH) $(TMPDIR)

debug: $(TMPDIR)\$(ITKDLL) $(TMPDIR)\$(ITCLDLL) $(TMPDIR)\$(TKDLL) $(TMPDIR)\$(TCLDLL)


# remove all generated files

clean:
	-@@$(RM) $(ITKWISH)
	-@@$(RM) $(ITKLIB)
	-@@$(RM) $(ITKDLL)
	-@@$(RM) itk.def
	-@@$(RM) $(TMPDIR)\Rc\*.res
	-@@$(RM) $(TMPDIR)\*.obj
	-@@$(RM) *.cfg

@


1.2
log
@*** empty log message ***
@
text
@@


1.2.6.1
log
@merge from head
@
text
@@


1.1
log
@Initial revision
@
text
@d1 228
a228 227
# Borland C++ 4.52 makefile
#
# Copyright (c) 1993-1996 Lucent Technologies
# based on original from
# Copyright (c) 1995-1996 by Sun Microsystems, Inc.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

!include "..\..\Makefile.bc"

#
# Project directories
#
# ROOT = top of source tree
# TMPDIR = location where .obj files should be stored during build

ROOT	   		= ..
TMPDIR			= .
TARGET_LIB_ITK		= $(TARGET_LIB)\Itk2.2
TARGET_DOC_ITK 		= $(TARGET_DOC)\Itk

# uncomment the following line to compile with symbols
#DEBUG=1

# uncomment the following two lines to compile with TCL_MEM_DEBUG
#DEBUGDEFINES	=TCL_MEM_DEBUG


INCLUDES   =$(BORLAND)\include;$(ROOT)\generic;$(ROOT);$(TCLDIR)\generic;$(ITCLDIR)\generic;$(TKDIR)\generic;$(TKDIR)\xlib;$(TKDIR)\bitmaps
LIBDIRS    =$(BORLAND)\lib;$(ROOT)\win

!ifndef DEBUG

# these macros cause maximum optimization and no symbols
DEBUGLDFLAGS =
DEBUGCCFLAGS = -v- -vi- -O2

!else

# these macros enable debugging
DEBUGLDFLAGS = -v
DEBUGCCFLAGS = -k -Od -v

!endif

DEFINES = _RTLDLL;USE_TCLALLOC=0;STRICT;$(DEBUGDEFINES);ITCL_NAMESPACES=1
PROJECTCCFLAGS= $(DEBUGCCFLAGS) -w-par -w-stu

LNFLAGS_exe = -Tpe -aa -c $(DEBUGLDFLAGS) $(BORLAND)\lib\c0w32
LNFLAGS_dll = -Tpd -aa -c $(DEBUGLDFLAGS) $(BORLAND)\lib\c0d32

LNLIBS_exe =	$(ITKLIB) $(ITCLLIBDIR)\$(ITCLLIB) $(TKLIBDIR)\$(TKLIB) $(TCLLIBDIR)\$(TCLLIB) import32 cw32i
LNLIBS_dll =	$(ITCLLIBDIR)\$(ITCLLIB) $(TKLIBDIR)\$(TKLIB) $(TCLLIBDIR)\$(TCLLIB) import32 cw32i

#
# Global makefile settings
#

.AUTODEPEND
.CACHEAUTODEPEND

.suffixes: .c .dll .lib .obj .exe

.path.c=$(ROOT)\win;$(ROOT)\generic;
.path.obj=$(TMPDIR)

ITKWISHOBJS = \
	$(TMPDIR)\winMain.obj

ITKOBJS = \
	$(TMPDIR)\itk_archetype.obj \
	$(TMPDIR)\itk_cmds.obj \
	$(TMPDIR)\itk_option.obj \
	$(TMPDIR)\itk_util.obj \
	$(TMPDIR)\dllEntryPoint.obj

ITKWISH = itkwish.exe


#
# Targets
#

all: cfgdll $(ITKDLL) cfgexe $(ITKWISH) cfgcln
test: $(ITKWISH)
	$(CP) $(TCLLIBDIR)\*.dll
	$(CP) $(TKLIBDIR)\*.dll
	$(CP) $(ITCLLIBDIR)\*.dll
#set ITK_
	$(ITKWISH) <<|
   cd ..\tests
   source all
   exit
|

install: all
	$(MKDIR) "$(TARGET_ROOT)"
	$(MKDIR) "$(TARGET_BIN)"
	$(MKDIR) "$(TARGET_LIB_ROOT)"
	$(MKDIR) "$(TARGET_LIB)"
	$(MKDIR) "$(TARGET_LIB_ITK)"
	$(MKDIR) "$(TARGET_INCLUDE_ROOT)"
	$(MKDIR) "$(TARGET_INCLUDE)"
	$(MKDIR) "$(TARGET_DOC)"
	$(MKDIR) "$(TARGET_DOC_ITK)"
	$(CP) $(TMPDIR)\$(ITKWISH) "$(TARGET_BIN)"
	$(CP) $(TMPDIR)\$(ITKDLL) "$(TARGET_BIN)"
	$(CP) $(ROOT)\generic\itk.h "$(TARGET_INCLUDE)"
	$(CP) $(ROOT)\library\*.* "$(TARGET_LIB_ITK)"
	$(CP) $(ROOT)\win\*.tcl "$(TARGET_LIB_ITK)"
	$(CP) $(ROOT)\..\html\Itk\*.* "$(TARGET_DOC_ITK)"

# Implicit Targets

.c.obj:
	@@$(BCC32) {$< }

.dll.lib:
	$(IMPLIB) -c $@@ $<

.rc.res:
	$(RC) -i$(ROOT)\generic;$(ITCLDIR)\generic;$(TCLDIR)\generic;$(TKDIR)\generic $<

#
# Special case object file targets
#

#
# Configuration file targets - these files are implicitly used by the compiler
#

cfgdll:
	@@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -WD
		-D$(DEFINES) -3 -d $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfgexe:
	@@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -W
		-D$(DEFINES) -3 -d $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfgtest:
	@@$(CP) &&|
		-n$(TMPDIR) -I$(INCLUDES) -c -W
		-D$(DEFINES);TCL_TEST -3 -d $(PROJECTCCFLAGS)
| bcc32.cfg >NUL

cfgcln:
	@@$(RM) bcc32.cfg

#
# Executable targets
#

$(ITKDLL): $(ITKOBJS) itk.def rc\itk.res
	$(TLINK32) @@&&|
$(LNFLAGS_dll) $(ITKOBJS)
$@@
-x
$(LNLIBS_dll)
itk.def
rc\itk.res
|

$(ITKWISH): $(ITKWISHOBJS) $(ITKLIB) rc\itkwish.res
	$(TLINK32) @@&&|
$(LNFLAGS_exe) $(ITKWISHOBJS)
$@@
-x
$(LNLIBS_exe)
|, &&|
EXETYPE WINDOWS
CODE PRELOAD MOVEABLE DISCARDABLE
DATA PRELOAD MOVEABLE MULTIPLE
|, rc\itkwish.res

#
# Other dependencies
#


# The following rule automatically generates a tk.def file containing
# an export entry for every public symbol in the $(TKDLL) library.

itk.def: $(ITKOBJS)
	$(TCLLIBDIR)\dumpexts.exe -o $@@ $(ITKDLL) @@&&|
		$(ITKOBJS)
|

# Dependencies for .rc files:
rc\itk.res: rc\*.cur rc\itk.ico
rc\itkwish.res: rc\*.cur rc\itk.ico

# debugging rules, the .dll and .exe files must be in the same
# directory as the object files for debugging purposes

$(TMPDIR)\$(ITKDLL): $(ITKDLL)
	$(CP) $(ITKDLL) $(TMPDIR)

$(TMPDIR)\$(ITCLDLL): $(ITCLLIBDIR)\$(ITCLDLL)
        $(CP) $(ITCLLIBDIR)\$(ITCLDLL) $(TMPDIR)

$(TMPDIR)\$(TKDLL): $(TKLIBDIR)\$(TKDLL)
        $(CP) $(TKLIBDIR)\$(TKDLL) $(TMPDIR)

$(TMPDIR)\$(TCLDLL): $(TCLLIBDIR)\$(TCLDLL)
	$(CP) $(TCLLIBDIR)\$(TCLDLL) $(TMPDIR)

$(TMPDIR)\$(ITKWISH): $(ITKWISH)
	$(CP) $(ITKWISH) $(TMPDIR)

debug: $(TMPDIR)\$(ITKDLL) $(TMPDIR)\$(ITCLDLL) $(TMPDIR)\$(TKDLL) $(TMPDIR)\$(TCLDLL)


# remove all generated files

clean:
	-@@$(RM) $(ITKWISH)
	-@@$(RM) $(ITKLIB)
	-@@$(RM) $(ITKDLL)
	-@@$(RM) itk.def
	-@@$(RM) $(TMPDIR)\Rc\*.res
	-@@$(RM) $(TMPDIR)\*.obj
	-@@$(RM) *.cfg
@


1.1.1.1
log
@Import itcl3.2
@
text
@@


1.1.1.1.6.1
log
@sync branch with HEAD
@
text
@@


1.1.1.1.8.1
log
@sync with HEAD -- libitcl3.2 is not in libitcl (v3.3)
@
text
@@

