head	1.4;
access;
symbols
	ansi-20040316-freeze:1.2
	autoconf-20031203:1.3
	autoconf-20031202:1.3
	phong-branch:1.3.0.4
	photonmap-branch:1.3.0.2
	rel-6-1-DP:1.2
	rel-6-0-2:1.2
	rel-6-0-1-branch:1.2.0.2
	hartley-6-0-post:1.2
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	AUTOCONF:1.3.0.6
	windows-6-0-branch:1.2.0.6
	ansi-6-0-branch:1.2.0.4
	itcl3-2:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2004.03.09.21.07.29;	author morrison;	state dead;
branches;
next	1.3;

1.3
date	2003.03.13.19.05.55;	author jra;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2001.04.20.22.29.25;	author morrison;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2000.12.06.21.35.13;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.35.13;	author bparker;	state Exp;
branches;
next	;

1.2.4.1
date	2004.03.17.07.13.10;	author morrison;	state dead;
branches;
next	;

1.2.6.1
date	2004.03.11.23.42.40;	author morrison;	state dead;
branches;
next	;

1.3.6.1
date	2004.03.15.14.07.06;	author erikg;	state dead;
branches;
next	;


desc
@@


1.4
log
@libitcl3.2 was moved to libitcl and updated to latest developer cvs (3.3 pre-release)
@
text
@# itk.decls --
#
#	This file contains the declarations for all supported public
#	functions that are exported by the Itk library via the stubs table.
#	This file is used to generate the itkDecls.h file.
#	
#
# Copyright (c) 1998-1999 by XXXX
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# RCS: $Id: itk.decls,v 1.3 2003/03/13 19:05:55 jra Exp $

library itk
interface itk

# Declare each of the functions in the public Itk interface.  Note that
# the an index should never be reused for a different function in order
# to preserve backwards compatibility.


#
#  Exported functions:
#

declare 0 generic {
    int Itk_Init (Tcl_Interp *interp)
}
declare 1 generic {
    int Itk_SafeInit (Tcl_Interp *interp)
}


#
#  Functions used internally by this package:
#

declare 2 generic {
    int Itk_ConfigBodyCmd (ClientData cdata, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 3 generic {
    int Itk_UsualCmd (ClientData cdata, Tcl_Interp *interp, int objc, \
        Tcl_Obj *CONST objv[])
}


#
#  Functions for managing options included in class definitions:
#

declare 4 generic {
    int Itk_ClassOptionDefineCmd (ClientData cdata, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 5 generic {
    int Itk_ClassOptionIllegalCmd (ClientData cdata, Tcl_Interp *interp, \
        int objc, Tcl_Obj *CONST objv[])
}
declare 6 generic {
    int Itk_ConfigClassOption (Tcl_Interp *interp, ItclObject *contextObj, \
        ClientData cdata, char* newVal)
}
declare 7 generic {
    ItkClassOptTable* Itk_CreateClassOptTable( Tcl_Interp *interp, \
        ItclClass *cdefn)
}
declare 8 generic {
    ItkClassOptTable* Itk_FindClassOptTable (ItclClass *cdefn)
}
#declare 9 generic {
#    void Itk_DeleteClassOptTable (Tcl_Interp *interp, ItclClass *cdefn)
#}
declare 10 generic {
    int Itk_CreateClassOption (Tcl_Interp *interp, ItclClass *cdefn, \
        char *switchName, char *resName, char *resClass, char *defVal, \
        char *config, ItkClassOption **optPtr)
}
declare 11 generic {
    ItkClassOption* Itk_FindClassOption (ItclClass *cdefn, char *switchName)
}
declare 12 generic {
    void Itk_DelClassOption (ItkClassOption *opt)
}


#
#  Functions needed for the Archetype base class:
#

declare 13 generic {
    int Itk_ArchetypeInit (Tcl_Interp* interp)
}


#
#  Functions for maintaining the ordered option list:
#

declare 14 generic {
    void Itk_OptListInit (ItkOptList* olist, Tcl_HashTable *options)
}
declare 15 generic {
    void Itk_OptListFree (ItkOptList* olist)
}
declare 16 generic {
    void Itk_OptListAdd (ItkOptList* olist, Tcl_HashEntry *entry)
}
declare 17 generic {
    void Itk_OptListRemove (ItkOptList* olist, Tcl_HashEntry *entry)
}
@


1.3
log
@*** empty log message ***
@
text
@d12 1
a12 1
# RCS: $Id: itk.decls,v 1.3 2001/06/22 04:38:54 davygrvy Exp $
@


1.3.6.1
log
@merge from head
@
text
@d12 1
a12 1
# RCS: $Id: itk.decls,v 1.3 2003/03/13 19:05:55 jra Exp $
@


1.2
log
@CONST to const
@
text
@d12 1
a12 1
# RCS: $Id: itk.decls,v 1.1.1.1 2000/12/06 21:35:13 bparker Exp $
d29 3
a31 3
#declare 1 generic {
#    int Itk_SafeInit (Tcl_Interp *interp)
#}
d40 1
a40 1
        int objc, Tcl_Obj *const objv[])
d44 1
a44 1
        Tcl_Obj *const objv[])
d54 1
a54 1
        int objc, Tcl_Obj *const objv[])
d58 1
a58 1
        int objc, Tcl_Obj *const objv[])
@


1.2.4.1
log
@sync branch with HEAD
@
text
@d12 1
a12 1
# RCS: $Id: itk.decls,v 1.2 2001/04/20 22:29:25 morrison Exp $
@


1.2.6.1
log
@sync to HEAD...
@
text
@d12 1
a12 1
# RCS: $Id: itk.decls,v 1.2 2001/04/20 22:29:25 morrison Exp $
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
# RCS: $Id: itk.decls,v 1.2 2000/08/04 22:09:06 davidg Exp $
d40 1
a40 1
        int objc, Tcl_Obj *CONST objv[])
d44 1
a44 1
        Tcl_Obj *CONST objv[])
d54 1
a54 1
        int objc, Tcl_Obj *CONST objv[])
d58 1
a58 1
        int objc, Tcl_Obj *CONST objv[])
@


1.1.1.1
log
@Import itcl3.2
@
text
@@
