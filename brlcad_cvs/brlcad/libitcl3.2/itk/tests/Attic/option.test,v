head	1.3;
access;
symbols
	ansi-20040316-freeze:1.1.1.1
	autoconf-20031203:1.2
	autoconf-20031202:1.2
	phong-branch:1.2.0.4
	photonmap-branch:1.2.0.2
	rel-6-1-DP:1.1.1.1
	rel-6-0-2:1.1.1.1
	rel-6-0-1-branch:1.1.1.1.0.4
	hartley-6-0-post:1.1.1.1
	hartley-6-0-pre:1.1.1.1
	rel-6-0-1:1.1.1.1
	rel-6-0:1.1.1.1
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	AUTOCONF:1.2.0.6
	windows-6-0-branch:1.1.1.1.0.8
	ansi-6-0-branch:1.1.1.1.0.6
	itcl3-2:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.03.09.21.07.32;	author morrison;	state dead;
branches;
next	1.2;

1.2
date	2003.03.13.19.05.57;	author jra;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.12.06.21.35.13;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.35.13;	author bparker;	state Exp;
branches
	1.1.1.1.6.1
	1.1.1.1.8.1;
next	;

1.1.1.1.6.1
date	2004.03.17.07.13.13;	author morrison;	state dead;
branches;
next	;

1.1.1.1.8.1
date	2004.03.15.17.27.23;	author morrison;	state dead;
branches;
next	;

1.2.6.1
date	2004.03.15.14.07.10;	author erikg;	state dead;
branches;
next	;


desc
@@


1.3
log
@libitcl3.2 was moved to libitcl and updated to latest developer cvs (3.3 pre-release)
@
text
@#
# Basic tests for [incr Tk] mega-widgets
# ----------------------------------------------------------------------
#   AUTHOR:  Michael J. McLennan
#            Bell Labs Innovations for Lucent Technologies
#            mmclennan@@lucent.com
#            http://www.tcltk.com/itcl
#
#      RCS:  $Id: option.test,v 1.2 2003/03/13 19:05:57 jra Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1993-1998  Lucent Technologies, Inc.
# ======================================================================
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.

package require tcltest
namespace import -force ::tcltest::*

if {[string compare test [info procs test]] == 1} then {source defs}

package require Itk

# ----------------------------------------------------------------------
#  Component option processing
# ----------------------------------------------------------------------
test option-1.1 {create a widget for the following tests} {
    itcl::class TestOptComp {
        inherit itk::Widget
        constructor {args} {
            itk_component add test1 {
                label $itk_interior.t1
            } {
                keep -background -foreground -cursor
                keep -text
            }
            pack $itk_component(test1) -side left -padx 2
            eval itk_initialize $args
        }
        private variable status ""
        public method action {info} {
            lappend status $info
        }
        public method do {cmd} {
            eval $cmd
        }
        itk_option define -status status Status {} {
            lappend status $itk_option(-status)
        }
    }

    itcl::class TestOptWidget {
        inherit itk::Widget
        constructor {args} {
            itk_component add test1 {
                label $itk_interior.t1
            } {
                keep -background -foreground -cursor
                keep -text
            }
            pack $itk_component(test1) -side left -padx 2
            eval itk_initialize $args
        }
        public method do {cmd} {
            eval $cmd
        }
    }
    TestOptWidget .#auto
} {.testOptWidget0}

test option-1.2 {"keep" can be called more than once} {
    .testOptWidget0 do {
        itk_component add k0 {
            TestOptComp $itk_interior.k0 -status "create"
        } {
            keep -background -foreground -cursor
            keep -background -foreground -cursor
            keep -status
            keep -status
        }
        pack $itk_component(k0)
    }
    .testOptWidget0 configure -status "foo"
    .testOptWidget0 component k0 do {set status}
} {create foo}

test option-1.3 {"rename" can be called more than once} {
    .testOptWidget0 do {
        itk_component add k1 {
            TestOptComp $itk_interior.k1 -status "create"
        } {
            rename -status -test test Test
            rename -status -test test Test
        }
        pack $itk_component(k1)
    }
    .testOptWidget0 configure -test "bar"
    .testOptWidget0 component k1 do {set status}
} {create bar}

test option-1.4 {"ignore" overrides keep and rename} {
    .testOptWidget0 do {
        itk_component add k2 {
            TestOptComp $itk_interior.k2 -status "create"
        } {
            keep -status
            rename -status -test test Test
            ignore -status
        }
        pack $itk_component(k2)
    }
    .testOptWidget0 configure -status k2 -test k2
    .testOptWidget0 component k2 do {set status}
} {create foo bar}

# ----------------------------------------------------------------------
#  Option processing with "usual" command
# ----------------------------------------------------------------------
test option-2.1 {create a widget for the following tests} {
    TestOptComp .testUsual
} {.testUsual}

test option-2.2 {register some "usual" code} {
    itk::usual TestOptComp-test {keep -cursor -foreground}
} {}

test option-2.3 {query back "usual" code} {
    itk::usual TestOptComp-test
} {keep -cursor -foreground}

test option-2.4 {query back unknown "usual" code} {
    itk::usual xyzzyxyzzy
} {}

test option-2.5 {add a component using "usual" code} {
    .testUsual do {
        itk_component add u0 {
            label $itk_interior.u0 -text "Usual Test #0"
        } {
            usual TestOptComp-test
        }
        pack $itk_component(u0)
    }
    .testUsual configure -foreground green -cursor gumby

    list [.testUsual component u0 cget -foreground] \
         [.testUsual component u0 cget -cursor]
} {green gumby}

test option-2.6 {override "usual" options} {
    .testUsual do {
        itk_component add u1 {
            label $itk_interior.u1 -text "Usual Test #1"
        } {
            usual TestOptComp-test
            ignore -cursor
            keep -background
        }
        pack $itk_component(u1)
    }
    .testUsual configure -foreground red -background white -cursor dot

    list [.testUsual component u1 cget -foreground] \
         [.testUsual component u1 cget -background] \
         [.testUsual component u1 cget -cursor]
} {red white gumby}

set unique 0
foreach widget {button canvas checkbutton entry frame label listbox
                menu menubutton message radiobutton scale scrollbar
                text toplevel} {
    set name "c[incr unique]"
    test option-2.7.$name {verify "usual" options for all Tk widgets} {
        .testUsual do [format {
            itk_component add %s {
                %s $itk_interior.%s
            }
        } $name $widget $name]
    } $name
}

# ----------------------------------------------------------------------
#  Clean up
# ----------------------------------------------------------------------
itcl::delete class TestOptComp TestOptWidget

::tcltest::cleanupTests
exit
@


1.2
log
@*** empty log message ***
@
text
@d9 1
a9 1
#      RCS:  $Id: option.test,v 1.3 2000/06/01 21:32:36 wart Exp $
@


1.2.6.1
log
@merge from head
@
text
@d9 1
a9 1
#      RCS:  $Id: option.test,v 1.2 2003/03/13 19:05:57 jra Exp $
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import itcl3.2
@
text
@@


1.1.1.1.6.1
log
@sync branch with HEAD
@
text
@d9 1
a9 1
#      RCS:  $Id: option.test,v 1.1.1.1 2000/12/06 21:35:13 bparker Exp $
@


1.1.1.1.8.1
log
@sync with HEAD -- libitcl3.2 is not in libitcl (v3.3)
@
text
@d9 1
a9 1
#      RCS:  $Id: option.test,v 1.1.1.1 2000/12/06 21:35:13 bparker Exp $
@

