head	1.2;
access;
symbols
	ansi-20040316-freeze:1.1.1.1
	rel-6-1-DP:1.1.1.1
	rel-6-0-2:1.1.1.1
	rel-6-0-1-branch:1.1.1.1.0.4
	hartley-6-0-post:1.1.1.1
	hartley-6-0-pre:1.1.1.1
	rel-6-0-1:1.1.1.1
	rel-6-0:1.1.1.1
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	windows-6-0-branch:1.1.1.1.0.8
	ansi-6-0-branch:1.1.1.1.0.6
	itcl3-2:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.03.13.18.37.33;	author jra;	state dead;
branches;
next	1.1;

1.1
date	2000.12.06.21.35.19;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.35.19;	author bparker;	state Exp;
branches
	1.1.1.1.6.1
	1.1.1.1.8.1;
next	;

1.1.1.1.6.1
date	2004.03.17.07.13.59;	author morrison;	state dead;
branches;
next	;

1.1.1.1.8.1
date	2004.03.15.17.28.13;	author morrison;	state dead;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@# This file is a Tcl script to test out [incr Widgets] Entryfield class.
# It is organized in the standard fashion for Tcl tests with the following
# notation for test case labels:
#
#   1.x - Construction/Destruction tests
#   2.x - Configuration option tests
#   3.x - Method tests
#
# Copyright (c) 1995 DSC Technologies Corporation
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @@(#) $Id: entryfield.test,v 1.1 2000/12/06 21:35:19 bparker Exp $

package require tcltest
namespace import -force ::tcltest::*

package require Iwidgets 3.0

if {[string compare test [info procs test]] == 1} {
    source defs
}

wm geometry . {}
raise .

set c 1
set o 1
set m 1

#
# Initial construction test
#
test Entryfield-1.$c {Entryfield construction} {
    iwidgets::Entryfield .ef -labeltext "Entry Field"
    .ef insert end test
    pack .ef -padx 10 -pady 10 -fill both -expand yes
    update 
} {}

incr c

#
# Option tests which are successful.
#
test Entryfield-2.$o {configuration option} {
    llength [.ef configure]
} {39}

incr o

foreach test {
    {-background #d9d9d9 #d9d9d9}
    {-borderwidth 4 4} 
    {-borderwidth 2 2} 
    {-childsitepos e e} 
    {-childsitepos s s} 
    {-childsitepos w w} 
    {-childsitepos n n} 
    {-command {.ef configure -background red} {.ef configure -background red}}
    {-cursor gumby gumby} 
    {-exportselection 0 0} 
    {-fixed 10 10} 
    {-fixed 0 0} 
    {-foreground Green Green} 
    {-foreground Black Black} 
    {-highlightcolor Red Red}
    {-highlightthickness 2 2}
    {-insertbackground Yellow Yellow} 
    {-insertbackground Black Black} 
    {-insertborderwidth 1 1} 
    {-insertborderwidth 0 0} 
    {-insertofftime 400 400} 
    {-insertontime 700 700} 
    {-insertwidth 3 3} 
    {-invalid {.ef configure -background Green} {.ef configure -background Green}}
    {-justify right right}
    {-justify center center}
    {-justify left left}
    {-labelmargin 5 5} 
    {-labelpos w w} 
    {-labelpos nw nw} 
    {-labelpos n n} 
    {-labelpos ne ne} 
    {-labelpos e e} 
    {-labelpos se se} 
    {-labelpos s s} 
    {-labelpos sw sw} 
    {-labeltext Label Label} 
    {-pasting 1 1} 
    {-relief raised raised} 
    {-relief sunken sunken} 
    {-state disabled disabled} 
    {-state normal normal} 
    {-textbackground GhostWhite GhostWhite} 
    {-validate numeric {::iwidgets::Entryfield::numeric %c}} 
    {-validate alphabetic {::iwidgets::Entryfield::alphabetic %c}} 
    {-width 30 30}} {
	set option [lindex $test 0]
	test Entryfield-2.$o "configuration options, $option" {
	    .ef configure $option [lindex $test 1]
	    lindex [.ef configure $option] 4
	} [lindex $test 2]
	update 
	incr o
}

#
# Option tests which fail and produce errors.
#
foreach test {
  {-fixed bogus {bad fixed option "bogus", should be positive integer}}
  {-childsitepos bogus {bad childsite option "bogus": should be n, e, s, or w}}} {
	set option [lindex $test 0]
        test Entryfield-2.$o "configuration options, $option" {
	    list [catch {.ef configure $option [lindex $test 1]} msg] $msg
	} [list 1 [lindex $test 2]]
	incr o
}

#
# Method tests which are successful.
#
foreach test {
    {{.ef childsite} {.ef.lwchildsite.efchildsite}}
    {{.ef clear} {}}
    {{.ef insert end "Test String"} {}}
    {{.ef get} {Test String}}
    {{.ef delete 0 end} {}}
    {{.ef insert end "Another Test"} {}}
    {{.ef icursor end} {}}
    {{.ef index end} 12}
    {{.ef selection from 0} {}}
    {{.ef selection to end} {}}
    {{.ef xview 3} {}}
    {{.ef clear} {}}} {
	set method [lindex [lindex $test 0] 1]
	test Entryfield-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 0 [lindex $test 1]]
	update 
	incr m
}

#
# Conclusion of constrcution/destruction tests
#
test Entryfield-1.$c {Entryfield destruction} {
    destroy .ef
    update 
} {}

incr c

test Entryfield-1.$c {Entryfield construction} {
    iwidgets::entryfield .ef -width 12 -validate numeric
    pack .ef -padx 10 -pady 10
    update 
} {}

incr c

test Entryfield-1.$c {Entryfield destruction} {
    destroy .ef
    update 
} {}

incr c

test Entryfield-1.$c {Entryfield destruction} {
    iwidgets::entryfield .ef
    pack .ef
    destroy .ef
    update 
} {}

::tcltest::cleanupTests
exit
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
# @@(#) $Id: entryfield.test,v 1.4 2000/06/06 01:37:28 wart Exp $
@


1.1.1.1
log
@Import itcl3.2
@
text
@@


1.1.1.1.6.1
log
@sync branch with HEAD
@
text
@d14 1
a14 1
# @@(#) $Id: entryfield.test,v 1.1.1.1 2000/12/06 21:35:19 bparker Exp $
@


1.1.1.1.8.1
log
@sync with HEAD -- libitcl3.2 is not in libitcl (v3.3)
@
text
@d14 1
a14 1
# @@(#) $Id: entryfield.test,v 1.1.1.1 2000/12/06 21:35:19 bparker Exp $
@

