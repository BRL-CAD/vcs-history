head	1.2;
access;
symbols
	ansi-20040405-merged:1.1.1.1
	rel-6-1-DP:1.1.1.1
	rel-6-0-2:1.1.1.1
	ansi-branch:1.1.1.1.0.6
	rel-6-0-1-branch:1.1.1.1.0.4
	hartley-6-0-post:1.1.1.1
	hartley-6-0-pre:1.1.1.1
	rel-6-0-1:1.1.1.1
	rel-6-0:1.1.1.1
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-2:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	rel-5-1:1.1.1.1
	rel-5-0:1.1.1.1
	rel-5-0-beta:1.1.1.1
	windows-6-0-branch:1.1.1.1.0.8
	zlib_1_0_4:1.1.1.1
	zlib:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.12.23.21.47.37;	author jra;	state dead;
branches;
next	1.1;

1.1
date	98.06.24.13.19.59;	author jra;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.24.13.19.59;	author jra;	state Exp;
branches
	1.1.1.1.8.1;
next	;

1.1.1.1.8.1
date	2004.03.15.17.37.50;	author morrison;	state dead;
branches;
next	;


desc
@@


1.2
log
@Update to zlib version 1.1.4
@
text
@# Makefile for zlib.  Modified for djgpp v2.0 by F. J. Donahoe, 3/15/96.
# Copyright (C) 1995-1996 Jean-loup Gailly.
# For conditions of distribution and use, see copyright notice in zlib.h 

# To compile, or to compile and test, type:
# 
#   make -fmakefile.dj2;  make test -fmakefile.dj2
# 
# To install libz.a, zconf.h and zlib.h in the djgpp directories, type:
# 
#    make install -fmakefile.dj2
# 
# after first defining LIBRARY_PATH and INCLUDE_PATH in djgpp.env as
# in the sample below if the pattern of the DJGPP distribution is to
# be followed.  Remember that, while <sp>'es around <=> are ignored in
# makefiles, they are *not* in batch files or in djgpp.env.
# - - - - -
# [make]
# INCLUDE_PATH=%\>;INCLUDE_PATH%%\DJDIR%\include
# LIBRARY_PATH=%\>;LIBRARY_PATH%%\DJDIR%\lib
# BUTT=-m486
# - - - - -
# Alternately, these variables may be defined below, overriding the values
# in djgpp.env, as
INCLUDE_PATH=c:\usr\include

CC=gcc

#CFLAGS=-MMD -O
#CFLAGS=-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7
#CFLAGS=-MMD -g -DDEBUG
CFLAGS=-MMD -O3 $(BUTT) -Wall -Wwrite-strings -Wpointer-arith -Wconversion \
             -Wstrict-prototypes -Wmissing-prototypes

# If cp.exe is not found, replace with copy /Y .
CP=cp -f
# If install.exe is not found, replace with $(CP).
INSTALL=install
# The default value of RM is "rm -f."  If "rm.exe" is not found, uncomment:
# RM=del
LDLIBS=-L. -lz
LD=$(CC) -s -o
LDSHARED=$(CC)

INCL=zlib.h zconf.h
LIBS=libz.a

AR=ar rcs

prefix=/usr/local
exec_prefix = $(prefix)

OBJS = adler32.o compress.o crc32.o gzio.o uncompr.o deflate.o trees.o \
       zutil.o inflate.o infblock.o inftrees.o infcodes.o infutil.o inffast.o

TEST_OBJS = example.o minigzip.o

all: example.exe minigzip.exe

test: all
	./example
	echo hello world | .\minigzip | .\minigzip -d 

%.o : %.c
	$(CC) $(CFLAGS) -c $< -o $@@

libz.a: $(OBJS)
	$(AR) $@@ $(OBJS)

%.exe : %.o $(LIBS)
	$(LD) $@@ $< $(LDLIBS)

# INCLUDE_PATH and LIBRARY_PATH were set for [make] in djgpp.env .

.PHONY : uninstall clean

install: $(INCL) $(LIBS)
	-@@if not exist $(INCLUDE_PATH)\nul mkdir $(INCLUDE_PATH)
	-@@if not exist $(LIBRARY_PATH)\nul mkdir $(LIBRARY_PATH)
	for %%f in ($(INCL)) do $(INSTALL) %%f $(INCLUDE_PATH)
	for %%p in ($(LIBS)) do $(INSTALL) %%p $(LIBRARY_PATH)

uninstall:
	for %%f in ($(INCL)) do $(RM) $(INCLUDE_PATH)\%%f
	for %%p in ($(LIBS)) do $(RM) $(LIBRARY_PATH)\%%p

clean:
	for %%p in (*.d *.o *.exe libz.a libz.so* foo.gz) do $(RM) %%p

DEPS := $(wildcard *.d)
ifneq ($(DEPS),)
include $(DEPS)
endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial inclusion of zlib (version 1.0.4).
@
text
@@


1.1.1.1.8.1
log
@sync with HEAD -- files removed
@
text
@@

