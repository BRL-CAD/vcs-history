head	1.4;
access;
symbols
	ansi-20040405-merged:1.2.6.1
	postmerge-20040405-ansi:1.3
	premerge-20040404-ansi:1.3
	postmerge-autoconf:1.3
	autoconf-freeze:1.3
	premerge-autoconf:1.3
	postmerge-20040315-windows:1.3
	premerge-20040315-windows:1.3
	windows-20040315-freeze:1.2.8.1
	autoconf-20031203:1.3
	autoconf-20031202:1.3
	autoconf-branch:1.3.0.6
	phong-branch:1.3.0.4
	photonmap-branch:1.3.0.2
	rel-6-1-DP:1.2
	windows-branch:1.2.0.8
	rel-6-0-2:1.2
	ansi-branch:1.2.0.6
	rel-6-0-1-branch:1.2.0.4
	hartley-6-0-post:1.2
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2
	rel-5-4:1.2
	offsite-5-3-pre:1.2
	rel-5-3:1.2
	rel-5-2:1.2
	rel-5-1-branch:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.2
	rel-5-0-beta:1.2
	zlib_1_0_4:1.1.1.1
	zlib:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.05.21.17.59.18;	author morrison;	state dead;
branches;
next	1.3;

1.3
date	2002.12.23.21.47.37;	author jra;	state Exp;
branches;
next	1.2;

1.2
date	98.06.24.18.33.15;	author jra;	state Exp;
branches
	1.2.6.1
	1.2.8.1;
next	1.1;

1.1
date	98.06.24.13.19.59;	author jra;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.24.13.19.59;	author jra;	state Exp;
branches;
next	;

1.2.6.1
date	2004.03.17.21.21.49;	author morrison;	state Exp;
branches;
next	;

1.2.8.1
date	2004.03.11.23.45.54;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@moved from top-level to src/other/.
@
text
@/* adler32.c -- compute the Adler-32 checksum of a data stream
 * Copyright (C) 1995-2002 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h 
 */

/* @@(#) $Id: adler32.c,v 1.3 2002/12/23 21:47:37 jra Exp $ */

#include "zlib.h"

#define BASE 65521L /* largest prime smaller than 65536 */
#define NMAX 5552
/* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */

#define DO1(buf,i)  {s1 += buf[i]; s2 += s1;}
#define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);
#define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);
#define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);
#define DO16(buf)   DO8(buf,0); DO8(buf,8);

/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
    unsigned long s1 = adler & 0xffff;
    unsigned long s2 = (adler >> 16) & 0xffff;
    int k;

    if (buf == Z_NULL) return 1L;

    while (len > 0) {
        k = len < NMAX ? len : NMAX;
        len -= k;
        while (k >= 16) {
            DO16(buf);
	    buf += 16;
            k -= 16;
        }
        if (k != 0) do {
            s1 += *buf++;
	    s2 += s1;
        } while (--k);
        s1 %= BASE;
        s2 %= BASE;
    }
    return (s2 << 16) | s1;
}
@


1.3
log
@Update to zlib version 1.1.4
@
text
@d6 1
a6 1
/* @@(#) $Id$ */
@


1.2
log
@zlib version 1.1.2
@
text
@d2 1
a2 1
 * Copyright (C) 1995-1998 Mark Adler
@


1.2.6.1
log
@sync branch with HEAD
@
text
@d2 1
a2 1
 * Copyright (C) 1995-2002 Mark Adler
@


1.2.8.1
log
@sync to HEAD...
@
text
@d2 1
a2 1
 * Copyright (C) 1995-2002 Mark Adler
d6 1
a6 1
/* @@(#) $Id: adler32.c,v 1.3 2002/12/23 21:47:37 jra Exp $ */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (C) 1995-1996 Mark Adler
d6 1
a6 1
/* $Id: adler32.c,v 1.10 1996/05/22 11:52:18 me Exp $ */
d21 1
a21 1
uLong adler32(adler, buf, len)
@


1.1.1.1
log
@Initial inclusion of zlib (version 1.0.4).
@
text
@@
