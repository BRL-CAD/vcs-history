head	1.3;
access;
symbols
	ansi-20040405-merged:1.1.6.1
	postmerge-20040405-ansi:1.2
	premerge-20040404-ansi:1.2
	postmerge-autoconf:1.2
	autoconf-freeze:1.2
	premerge-autoconf:1.2
	postmerge-20040315-windows:1.2
	premerge-20040315-windows:1.2
	windows-20040315-freeze:1.1.8.1
	autoconf-20031203:1.2
	autoconf-20031202:1.2
	autoconf-branch:1.2.0.6
	phong-branch:1.2.0.4
	photonmap-branch:1.2.0.2
	rel-6-1-DP:1.1
	windows-branch:1.1.0.8
	rel-6-0-2:1.1
	ansi-branch:1.1.0.6
	rel-6-0-1-branch:1.1.0.4
	hartley-6-0-post:1.1
	hartley-6-0-pre:1.1
	rel-6-0-1:1.1
	rel-6-0:1.1
	rel-5-4:1.1
	offsite-5-3-pre:1.1
	rel-5-3:1.1
	rel-5-2:1.1
	rel-5-1-branch:1.1.0.2
	rel-5-1:1.1
	rel-5-0:1.1
	rel-5-0-beta:1.1;
locks; strict;
comment	@# @;


1.3
date	2004.05.21.17.59.35;	author morrison;	state dead;
branches;
next	1.2;

1.2
date	2002.12.23.21.48.22;	author jra;	state Exp;
branches;
next	1.1;

1.1
date	98.06.24.18.45.11;	author jra;	state Exp;
branches
	1.1.6.1
	1.1.8.1;
next	;

1.1.6.1
date	2004.03.17.21.21.53;	author morrison;	state Exp;
branches;
next	;

1.1.8.1
date	2004.03.11.23.46.21;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.3
log
@moved from top-level to src/other/.
@
text
@# Makefile for zlib
# Microsoft C 5.1 or later

# To use, do "make makefile.msc"
# To compile in small model, set below: MODEL=S

# If you wish to reduce the memory requirements (default 256K for big
# objects plus a few K), you can add to the LOC macro below:
#   -DMAX_MEM_LEVEL=7 -DMAX_WBITS=14
# See zconf.h for details about the memory requirements.

# ------------- Microsoft C 5.1 and later -------------

#    Optional nonstandard preprocessor flags (e.g. -DMAX_MEM_LEVEL=7)
#    should be added to the environment via "set LOCAL_ZLIB=-DFOO" or added
#    to the declaration of LOC here:
LOC = $(LOCAL_ZLIB)

# Type for CPU required: 0: 8086, 1: 80186, 2: 80286, 3: 80386, etc.
CPU_TYP = 0

# Memory model: one of S, M, C, L (small, medium, compact, large)
MODEL=L

CC=cl
CFLAGS=-nologo -A$(MODEL) -G$(CPU_TYP) -W3 -Oait -Gs $(LOC)
#-Ox generates bad code with MSC 5.1
LIB_CFLAGS=-Zl $(CFLAGS)

LD=link
LDFLAGS=/noi/e/st:0x1500/noe/farcall/packcode
# "/farcall/packcode" are only useful for `large code' memory models
# but should be a "no-op" for small code models.

O=.obj

# variables
OBJ1 = adler32$(O) compress$(O) crc32$(O) gzio$(O) uncompr$(O) deflate$(O) \
  trees$(O)
OBJP1 = adler32$(O)+compress$(O)+crc32$(O)+gzio$(O)+uncompr$(O)+deflate$(O)+\
  trees$(O)
OBJ2 = zutil$(O) inflate$(O) infblock$(O) inftrees$(O) infcodes$(O) \
  infutil$(O) inffast$(O)
OBJP2 = zutil$(O)+inflate$(O)+infblock$(O)+inftrees$(O)+infcodes$(O)+\
  infutil$(O)+inffast$(O)

ZLIB_H = zlib.h zconf.h
ZUTIL_H = zutil.h $(ZLIB_H)

ZLIB_LIB = zlib_$(MODEL).lib

all:  $(ZLIB_LIB) example.exe minigzip.exe

# individual dependencies and action rules:
adler32.obj: adler32.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

compress.obj: compress.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

crc32.obj: crc32.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

deflate.obj: deflate.c deflate.h $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

gzio.obj: gzio.c $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

infblock.obj: infblock.c $(ZUTIL_H) infblock.h inftrees.h infcodes.h infutil.h
	$(CC) -c $(LIB_CFLAGS) $*.c

infcodes.obj: infcodes.c $(ZUTIL_H) inftrees.h infutil.h infcodes.h inffast.h
	$(CC) -c $(LIB_CFLAGS) $*.c

inflate.obj: inflate.c $(ZUTIL_H) infblock.h
	$(CC) -c $(LIB_CFLAGS) $*.c

inftrees.obj: inftrees.c $(ZUTIL_H) inftrees.h
	$(CC) -c $(LIB_CFLAGS) $*.c

infutil.obj: infutil.c $(ZUTIL_H) inftrees.h infutil.h
	$(CC) -c $(LIB_CFLAGS) $*.c

inffast.obj: inffast.c $(ZUTIL_H) inftrees.h infutil.h inffast.h
	$(CC) -c $(LIB_CFLAGS) $*.c

trees.obj: trees.c deflate.h $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

uncompr.obj: uncompr.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

zutil.obj: zutil.c $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

example.obj: example.c $(ZLIB_H)
	$(CC) -c $(CFLAGS) $*.c

minigzip.obj: minigzip.c $(ZLIB_H)
	$(CC) -c $(CFLAGS) $*.c

# we must cut the command line to fit in the MS/DOS 128 byte limit:
$(ZLIB_LIB): $(OBJ1) $(OBJ2)
	if exist $(ZLIB_LIB) del $(ZLIB_LIB)
	lib $(ZLIB_LIB) $(OBJ1);
	lib $(ZLIB_LIB) $(OBJ2);

example.exe: example.obj $(ZLIB_LIB)
	$(LD) $(LDFLAGS) example.obj,,,$(ZLIB_LIB);

minigzip.exe: minigzip.obj $(ZLIB_LIB)
	$(LD) $(LDFLAGS) minigzip.obj,,,$(ZLIB_LIB);

test: example.exe minigzip.exe
	example
	echo hello world | minigzip | minigzip -d 

#clean:
#	del *.obj
#	del *.exe
@


1.2
log
@Update to zlib version 1.1.4
@
text
@@


1.1
log
@MSDOS file for zlib release 1.1.2
@
text
@d5 1
a5 1
# To compile in small model, set below: MODEL=-AS
d8 1
a8 1
# objects plus a few K), you can add to CFLAGS below: 
d13 14
a26 2
MODEL=-AL
CFLAGS=-Oait -Gs -nologo -W3 $(MODEL)
d28 2
a29 1
CC=cl
d31 4
a34 1
LDFLAGS=/e/st:0x1500/noe
d47 4
a50 1
all:  zlib.lib example.exe minigzip.exe
d52 5
a56 2
adler32.obj: adler32.c zutil.h zlib.h zconf.h
	$(CC) -c $(CFLAGS) $*.c
d58 2
a59 2
compress.obj: compress.c zlib.h zconf.h
	$(CC) -c $(CFLAGS) $*.c
d61 2
a62 2
crc32.obj: crc32.c zutil.h zlib.h zconf.h
	$(CC) -c $(CFLAGS) $*.c
d64 2
a65 2
deflate.obj: deflate.c deflate.h zutil.h zlib.h zconf.h
	$(CC) -c $(CFLAGS) $*.c
d67 2
a68 2
gzio.obj: gzio.c zutil.h zlib.h zconf.h
	$(CC) -c $(CFLAGS) $*.c
d70 2
a71 3
infblock.obj: infblock.c zutil.h zlib.h zconf.h infblock.h inftrees.h\
   infcodes.h infutil.h
	$(CC) -c $(CFLAGS) $*.c
d73 2
a74 3
infcodes.obj: infcodes.c zutil.h zlib.h zconf.h inftrees.h infutil.h\
   infcodes.h inffast.h
	$(CC) -c $(CFLAGS) $*.c
d76 2
a77 2
inflate.obj: inflate.c zutil.h zlib.h zconf.h infblock.h
	$(CC) -c $(CFLAGS) $*.c
d79 2
a80 2
inftrees.obj: inftrees.c zutil.h zlib.h zconf.h inftrees.h
	$(CC) -c $(CFLAGS) $*.c
d82 2
a83 2
infutil.obj: infutil.c zutil.h zlib.h zconf.h inftrees.h infutil.h
	$(CC) -c $(CFLAGS) $*.c
d85 2
a86 2
inffast.obj: inffast.c zutil.h zlib.h zconf.h inftrees.h infutil.h inffast.h
	$(CC) -c $(CFLAGS) $*.c
d88 2
a89 2
trees.obj: trees.c deflate.h zutil.h zlib.h zconf.h
	$(CC) -c $(CFLAGS) $*.c
d91 2
a92 2
uncompr.obj: uncompr.c zlib.h zconf.h
	$(CC) -c $(CFLAGS) $*.c
d94 2
a95 2
zutil.obj: zutil.c zutil.h zlib.h zconf.h
	$(CC) -c $(CFLAGS) $*.c
d97 1
a97 1
example.obj: example.c zlib.h zconf.h
d100 1
a100 1
minigzip.obj: minigzip.c zlib.h zconf.h
d104 4
a107 4
zlib.lib: $(OBJ1) $(OBJ2)
	if exist zlib.lib del zlib.lib
	lib zlib $(OBJ1);
	lib zlib $(OBJ2);
d109 2
a110 2
example.exe: example.obj zlib.lib
	$(LD) $(LDFLAGS) example.obj,,,zlib.lib;
d112 2
a113 2
minigzip.exe: minigzip.obj zlib.lib
	$(LD) $(LDFLAGS) minigzip.obj,,,zlib.lib;
@


1.1.6.1
log
@sync branch with HEAD
@
text
@d5 1
a5 1
# To compile in small model, set below: MODEL=S
d8 1
a8 1
# objects plus a few K), you can add to the LOC macro below:
d13 3
a15 12

#    Optional nonstandard preprocessor flags (e.g. -DMAX_MEM_LEVEL=7)
#    should be added to the environment via "set LOCAL_ZLIB=-DFOO" or added
#    to the declaration of LOC here:
LOC = $(LOCAL_ZLIB)

# Type for CPU required: 0: 8086, 1: 80186, 2: 80286, 3: 80386, etc.
CPU_TYP = 0

# Memory model: one of S, M, C, L (small, medium, compact, large)
MODEL=L

a16 4
CFLAGS=-nologo -A$(MODEL) -G$(CPU_TYP) -W3 -Oait -Gs $(LOC)
#-Ox generates bad code with MSC 5.1
LIB_CFLAGS=-Zl $(CFLAGS)

d18 1
a18 4
LDFLAGS=/noi/e/st:0x1500/noe/farcall/packcode
# "/farcall/packcode" are only useful for `large code' memory models
# but should be a "no-op" for small code models.

d31 1
a31 2
ZLIB_H = zlib.h zconf.h
ZUTIL_H = zutil.h $(ZLIB_H)
d33 2
a34 1
ZLIB_LIB = zlib_$(MODEL).lib
d36 2
a37 1
all:  $(ZLIB_LIB) example.exe minigzip.exe
d39 2
a40 3
# individual dependencies and action rules:
adler32.obj: adler32.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d42 2
a43 2
compress.obj: compress.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d45 2
a46 2
crc32.obj: crc32.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d48 3
a50 2
deflate.obj: deflate.c deflate.h $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d52 3
a54 2
gzio.obj: gzio.c $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d56 2
a57 2
infblock.obj: infblock.c $(ZUTIL_H) infblock.h inftrees.h infcodes.h infutil.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d59 2
a60 2
infcodes.obj: infcodes.c $(ZUTIL_H) inftrees.h infutil.h infcodes.h inffast.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d62 2
a63 2
inflate.obj: inflate.c $(ZUTIL_H) infblock.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d65 2
a66 2
inftrees.obj: inftrees.c $(ZUTIL_H) inftrees.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d68 2
a69 2
infutil.obj: infutil.c $(ZUTIL_H) inftrees.h infutil.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d71 2
a72 2
inffast.obj: inffast.c $(ZUTIL_H) inftrees.h infutil.h inffast.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d74 2
a75 8
trees.obj: trees.c deflate.h $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

uncompr.obj: uncompr.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

zutil.obj: zutil.c $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d77 1
a77 1
example.obj: example.c $(ZLIB_H)
d80 1
a80 1
minigzip.obj: minigzip.c $(ZLIB_H)
d84 4
a87 4
$(ZLIB_LIB): $(OBJ1) $(OBJ2)
	if exist $(ZLIB_LIB) del $(ZLIB_LIB)
	lib $(ZLIB_LIB) $(OBJ1);
	lib $(ZLIB_LIB) $(OBJ2);
d89 2
a90 2
example.exe: example.obj $(ZLIB_LIB)
	$(LD) $(LDFLAGS) example.obj,,,$(ZLIB_LIB);
d92 2
a93 2
minigzip.exe: minigzip.obj $(ZLIB_LIB)
	$(LD) $(LDFLAGS) minigzip.obj,,,$(ZLIB_LIB);
@


1.1.8.1
log
@sync to HEAD...
@
text
@d5 1
a5 1
# To compile in small model, set below: MODEL=S
d8 1
a8 1
# objects plus a few K), you can add to the LOC macro below:
d13 3
a15 12

#    Optional nonstandard preprocessor flags (e.g. -DMAX_MEM_LEVEL=7)
#    should be added to the environment via "set LOCAL_ZLIB=-DFOO" or added
#    to the declaration of LOC here:
LOC = $(LOCAL_ZLIB)

# Type for CPU required: 0: 8086, 1: 80186, 2: 80286, 3: 80386, etc.
CPU_TYP = 0

# Memory model: one of S, M, C, L (small, medium, compact, large)
MODEL=L

a16 4
CFLAGS=-nologo -A$(MODEL) -G$(CPU_TYP) -W3 -Oait -Gs $(LOC)
#-Ox generates bad code with MSC 5.1
LIB_CFLAGS=-Zl $(CFLAGS)

d18 1
a18 4
LDFLAGS=/noi/e/st:0x1500/noe/farcall/packcode
# "/farcall/packcode" are only useful for `large code' memory models
# but should be a "no-op" for small code models.

d31 1
a31 2
ZLIB_H = zlib.h zconf.h
ZUTIL_H = zutil.h $(ZLIB_H)
d33 2
a34 1
ZLIB_LIB = zlib_$(MODEL).lib
d36 2
a37 1
all:  $(ZLIB_LIB) example.exe minigzip.exe
d39 2
a40 3
# individual dependencies and action rules:
adler32.obj: adler32.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d42 2
a43 2
compress.obj: compress.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d45 2
a46 2
crc32.obj: crc32.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d48 3
a50 2
deflate.obj: deflate.c deflate.h $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d52 3
a54 2
gzio.obj: gzio.c $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d56 2
a57 2
infblock.obj: infblock.c $(ZUTIL_H) infblock.h inftrees.h infcodes.h infutil.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d59 2
a60 2
infcodes.obj: infcodes.c $(ZUTIL_H) inftrees.h infutil.h infcodes.h inffast.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d62 2
a63 2
inflate.obj: inflate.c $(ZUTIL_H) infblock.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d65 2
a66 2
inftrees.obj: inftrees.c $(ZUTIL_H) inftrees.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d68 2
a69 2
infutil.obj: infutil.c $(ZUTIL_H) inftrees.h infutil.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d71 2
a72 2
inffast.obj: inffast.c $(ZUTIL_H) inftrees.h infutil.h inffast.h
	$(CC) -c $(LIB_CFLAGS) $*.c
d74 2
a75 8
trees.obj: trees.c deflate.h $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

uncompr.obj: uncompr.c $(ZLIB_H)
	$(CC) -c $(LIB_CFLAGS) $*.c

zutil.obj: zutil.c $(ZUTIL_H)
	$(CC) -c $(LIB_CFLAGS) $*.c
d77 1
a77 1
example.obj: example.c $(ZLIB_H)
d80 1
a80 1
minigzip.obj: minigzip.c $(ZLIB_H)
d84 4
a87 4
$(ZLIB_LIB): $(OBJ1) $(OBJ2)
	if exist $(ZLIB_LIB) del $(ZLIB_LIB)
	lib $(ZLIB_LIB) $(OBJ1);
	lib $(ZLIB_LIB) $(OBJ2);
d89 2
a90 2
example.exe: example.obj $(ZLIB_LIB)
	$(LD) $(LDFLAGS) example.obj,,,$(ZLIB_LIB);
d92 2
a93 2
minigzip.exe: minigzip.obj $(ZLIB_LIB)
	$(LD) $(LDFLAGS) minigzip.obj,,,$(ZLIB_LIB);
@


