head	11.6;
access;
symbols
	ansi-20040405-merged:11.4.2.1
	postmerge-20040405-ansi:11.5
	premerge-20040404-ansi:11.4
	postmerge-autoconf:11.4
	autoconf-freeze:11.4
	premerge-autoconf:11.4
	ansi-20040316-freeze:11.4.2.1
	postmerge-20040315-windows:11.4
	premerge-20040315-windows:11.4
	windows-20040315-freeze:11.4
	autoconf-20031203:11.4
	autoconf-20031202:11.4
	autoconf-branch:11.4.0.10
	phong-branch:11.4.0.8
	photonmap-branch:11.4.0.6
	rel-6-1-DP:11.4
	windows-branch:11.4.0.4
	rel-6-0-2:11.2
	ansi-branch:11.4.0.2
	rel-6-0-1-branch:11.2.0.4
	hartley-6-0-post:11.3
	hartley-6-0-pre:11.2
	rel-6-0-1:11.2
	rel-6-0:11.2
	rel-5-4:11.2
	offsite-5-3-pre:11.2
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.6
date	2004.05.21.18.07.26;	author morrison;	state dead;
branches;
next	11.5;

11.5
date	2004.04.05.07.44.18;	author morrison;	state Exp;
branches;
next	11.4;

11.4
date	2002.08.20.17.07.49;	author jra;	state Exp;
branches
	11.4.2.1;
next	11.3;

11.3
date	2002.08.15.20.55.02;	author hartley;	state Exp;
branches;
next	11.2;

11.2
date	96.07.15.15.37.57;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.05.44;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.38.56;	author mike;	state Rel4_0;
branches;
next	1.2;

1.2
date	91.07.06.05.10.35;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	91.07.02.01.26.03;	author mike;	state Exp;
branches;
next	;

11.4.2.1
date	2002.09.19.18.01.23;	author morrison;	state Exp;
branches;
next	;


desc
@libfft module
@


11.6
log
@moved to src/
@
text
@/*
 *  Real valued, split-radix, decimation in time FFT.
 *
 *  Data comes out as:
 *
 *	[ Re(0), Re(1), ..., Re(N/2), Im(N/2-1), ..., Im(1) ]
 */
int	rfft_adds, rfft_mults;

#include <math.h>
#include "./complex.h"	/* for TWOPI */
#define	INVSQ2	0.70710678118654752440

void
rfft(double *X, int N)
{
	int	i0, i1, i2, i3;
	int	a0, a1, a2, a3, b0, b1, b2, b3;
	int	s, d;
	double	t0, t1, t2, r1, a, aa3, e, c2, c3, d2, d3;
	double	cc1, ss1, cc3, ss3, xt;
	int	i, j, k, ni;
	int	n2, n4;
rfft_adds = rfft_mults = 0;

	/* bit reverse counter */
	j = 1;
	ni = N - 1;
	for( i = 1; i <= ni; i++ ) {
		if( i < j ) {
			xt = X[j-1];
			X[j-1] = X[i-1];
			X[i-1] = xt;
		}
		k = N/2;
		while( k < j ) {
			j -= k;
			k /= 2;
		}
		j += k;
	}

	/* length two transforms */
	for( s = 1, d = 4; s < N; s = 2*d-1, d *= 4 ) {
		for( i0 = s; i0 <= N; i0 += d ) {
			i1 = i0 + 1;
			r1 = X[i0-1];
			X[i0-1] = r1 + X[i1-1];
			X[i1-1] = r1 - X[i1-1];
rfft_adds += 2;
		}
	}

	/* other butterflies */
	n2 = 2;
/*	for( k = 2; k <= M; k++ ) {*/
	for( k = 4; k <= N; k <<= 1 ) {
		n2 *= 2;
		n4 = n2/4;
		/* without mult */
		for( s = 1, d = 2*n2; s < N; s = 2*d-n2+1, d *= 4 ) {
			for( i0 = s; i0 < N; i0 += d ) {
				i1 = i0 + n4;
				i2 = i1 + n4;
				i3 = i2 + n4;
				t0 = X[i2-1] + X[i3-1];
				X[i3-1] = X[i2-1] - X[i3-1];
				X[i2-1] = X[i0-1] - t0;
				X[i0-1] += t0;
rfft_adds += 4;
			}
		}
		if( n4 < 2 ) continue;
		/* with 2 real mult */
		for( s = n4/2+1, d = 2*n2; s < N; s = 2*d-n2+n4/2+1, d *= 4 ) {
			for( i0 = s; i0 < N; i0 += d ) {
				i1 = i0 + n4;
				i2 = i1 + n4;
				i3 = i2 + n4;
				t1 = (X[i2-1]-X[i3-1])*INVSQ2;
				t2 = (X[i2-1]+X[i3-1])*INVSQ2;
				X[i2-1] = t2 - X[i1-1];
				X[i3-1] = t2 + X[i1-1];
				X[i1-1] = X[i0-1] - t1;
				X[i0-1] += t1;
rfft_mults += 2; rfft_adds += 6;
			}
		}
		e = TWOPI/n2;
		a = e;
		if( n4 < 4 ) continue;
		for( j = 2; j <= n4/2; j++ ) {
			aa3 = 3*a;
			cc1 = cos(a);
			ss1 = sin(a);
			cc3 = cos(aa3);
			ss3 = sin(aa3);
			a = j * e;
			/* with 6 real mult */
			for( s = j, d = 2*n2; s < N; s = 2*d-n2+j, d *= 4 ) {
				for( a0 = s; a0 < N; a0 += d ) {
					b1 = a0 + n4;
					a1 = b1-j-j+2;
					b0 = a1 + n4;
					a2 = b1 + n4;
					a3 = a2 + n4;
					b2 = b0 + n4;
					b3 = b2 + n4;
					c2 = X[a2-1]*cc1 - X[b2-1]*ss1;
					d2 = -(X[a2-1]*ss1 + X[b2-1]*cc1);
					c3 = X[a3-1]*cc3 - X[b3-1]*ss3;
					d3 = -(X[a3-1]*ss3 + X[b3-1]*cc3);
rfft_mults += 8; rfft_adds += 4;
					t1 = c2 + c3;
					c3 = c2 - c3;
					t2 = d2 - d3;
					d3 = d2 + d3;
					X[a2-1] = -X[b0-1] - d3;
					X[b2-1] = -X[b1-1] + c3;
					X[a3-1] = X[b1-1] + c3;
					X[b3-1] = X[b0-1] - d3;
					X[b1-1] = X[a1-1] + t2;
					X[b0-1] = X[a0-1] - t1;
					X[a0-1] += t1;
					X[a1-1] -= t2;
rfft_adds += 12;
				}
			}
		}
	}

	/*
	 * For some reason the Imag part is comming out with the wrong
	 * sign, so we reverse it here!  We need to figure this out!
	 */
	for( i = N/2+1; i < N; i++ )
		X[i] = -X[i];
}
@


11.5
log
@merge of ansi-6-0-branch into HEAD
@
text
@@


11.4
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d15 1
a15 3
rfft( X, N )
double	X[];
int	N;
@


11.4.2.1
log
@Initial ANSIfication
@
text
@d15 3
a17 1
rfft(double *X, int N)
@


11.3
log
@Converted from K&R to ANSI C - RFH
@
text
@d15 3
a17 1
rfft(double *X, int N)
@


11.2
log
@Minor Mods for IRIX 6.2
@
text
@d15 1
a15 3
rfft( X, N )
double	X[];
int	N;
@


11.1
log
@Release_4.4
@
text
@d14 1
@


10.1
log
@Release_4.0
@
text
@@


1.2
log
@Put prefix on add/mult counters
@
text
@@


1.1
log
@Initial revision
@
text
@d8 2
a9 1
int	adds, mults;
d25 1
a25 1
adds = mults = 0;
d51 1
a51 1
adds += 2;
d71 1
a71 1
adds += 4;
d87 1
a87 1
mults += 2; adds += 6;
d114 1
a114 1
mults += 8; adds += 4;
d127 1
a127 1
adds += 12;
@
