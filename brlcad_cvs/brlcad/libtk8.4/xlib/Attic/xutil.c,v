head	1.4;
access;
symbols
	ansi-20040405-merged:1.3.4.1
	postmerge-20040405-ansi:1.3
	premerge-20040404-ansi:1.3
	postmerge-autoconf:1.3
	autoconf-freeze:1.1.6.3
	premerge-autoconf:1.3
	postmerge-20040315-windows:1.3
	premerge-20040315-windows:1.3
	windows-20040315-freeze:1.3.2.1
	autoconf-20031203:1.1.6.1
	autoconf-20031202:1.1
	autoconf-branch:1.1.0.6
	phong-branch:1.1.0.4
	photonmap-branch:1.1.0.2
	windows-branch:1.3.0.2
	ansi-branch:1.3.0.4;
locks; strict;
comment	@ * @;


1.4
date	2004.05.21.18.02.49;	author morrison;	state dead;
branches;
next	1.3;

1.3
date	2004.03.04.19.49.35;	author morrison;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2003.11.07.14.58.40;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.13.20.05.35;	author jra;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2003.12.03.16.25.43;	author erikg;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2004.02.12.19.03.07;	author erikg;	state Exp;
branches;
next	1.1.6.3;

1.1.6.3
date	2004.03.15.13.58.39;	author erikg;	state Exp;
branches;
next	;

1.3.2.1
date	2004.03.12.10.01.18;	author morrison;	state Exp;
branches;
next	;

1.3.4.1
date	2004.03.17.21.21.45;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@moved from top-level to src/other/.
@
text
@/* 
 * xutil.c --
 *
 *	This function contains generic X emulation routines.
 *
 * Copyright (c) 1995-1996 Sun Microsystems, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: xutil.c,v 1.3 2004/03/04 19:49:35 morrison Exp $
 */

#include <stdlib.h>
#include <tk.h>

#ifdef MAC_TCL
#       include <Xutil.h>
#       include <Xatom.h>
#else
#       include <X11/Xutil.h>
#       include <X11/Xatom.h>
#endif

/*
 *----------------------------------------------------------------------
 *
 * XInternAtom --
 *
 *	This procedure simulates the XInternAtom function by calling
 *	Tk_Uid to get a unique id for every atom.  This is only a
 *	partial implementation, since it doesn't work across
 *	applications.
 *
 * Results:
 *	A new Atom.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

Atom
XInternAtom(display, atom_name, only_if_exists)
    Display* display;
    _Xconst char* atom_name;
    Bool only_if_exists;
{
    static Atom atom = XA_LAST_PREDEFINED;
    
    display->request++;
    return ++atom;
}

/*
 *----------------------------------------------------------------------
 *
 * XGetVisualInfo --
 *
 *	Returns information about the specified visual.
 *
 * Results:
 *	Returns a newly allocated XVisualInfo structure.
 *
 * Side effects:
 *	Allocates storage.
 *
 *----------------------------------------------------------------------
 */

XVisualInfo *
XGetVisualInfo(display, vinfo_mask, vinfo_template, nitems_return)
    Display* display;
    long vinfo_mask;
    XVisualInfo* vinfo_template;
    int* nitems_return;
{
    XVisualInfo *info = (XVisualInfo *)ckalloc(sizeof(XVisualInfo));
    info->visual = DefaultVisual(display, 0);
    info->visualid = info->visual->visualid;
    info->screen = 0;
    info->depth = info->visual->bits_per_rgb;
    info->class = info->visual->class;
    info->colormap_size = info->visual->map_entries;
    info->bits_per_rgb = info->visual->bits_per_rgb;
    info->red_mask = info->visual->red_mask;
    info->green_mask = info->visual->green_mask;
    info->blue_mask = info->visual->blue_mask;
    
    if (((vinfo_mask & VisualIDMask)
	    && (vinfo_template->visualid != info->visualid))
	    || ((vinfo_mask & VisualScreenMask)
		    && (vinfo_template->screen != info->screen))
	    || ((vinfo_mask & VisualDepthMask)
		    && (vinfo_template->depth != info->depth))
	    || ((vinfo_mask & VisualClassMask)
		    && (vinfo_template->class != info->class))
	    || ((vinfo_mask & VisualColormapSizeMask)
		    && (vinfo_template->colormap_size != info->colormap_size))
	    || ((vinfo_mask & VisualBitsPerRGBMask)
		    && (vinfo_template->bits_per_rgb != info->bits_per_rgb))
	    || ((vinfo_mask & VisualRedMaskMask)
		    && (vinfo_template->red_mask != info->red_mask))
	    || ((vinfo_mask & VisualGreenMaskMask)
		    && (vinfo_template->green_mask != info->green_mask))
	    || ((vinfo_mask & VisualBlueMaskMask)
		    && (vinfo_template->blue_mask != info->blue_mask))
	) {
	ckfree((char *) info);
	return NULL;
    }

    *nitems_return = 1;
    return info;
}
@


1.3
log
@Updated to tk 8.4.6
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id: xutil.c,v 1.2 1998/09/14 18:24:03 stanton Exp $
@


1.3.4.1
log
@sync branch with HEAD
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id$
@


1.3.2.1
log
@merge from HEAD
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id$
@


1.2
log
@updated tk to 8.4.4
@
text
@@


1.1
log
@*** empty log message ***
@
text
@@


1.1.6.1
log
@updates from HEAD, part 1
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id: xutil.c,v 1.2 2003/11/07 14:58:40 morrison Exp $
@


1.1.6.2
log
@merge from HEAD
@
text
@@


1.1.6.3
log
@merge from head
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id: xutil.c,v 1.1.6.2 2004/02/12 19:03:07 erikg Exp $
@


