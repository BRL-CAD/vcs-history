head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2007.03.06.22.26.45;	author brlcad;	state dead;
branches;
next	1.3;

1.3
date	2007.03.02.18.51.13;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.27.12.51.40;	author d_rossberg;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.18.19.13.01;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@no longer need basename.c, replaced by libbu functionality as bu_basename() in src/libbu/basename.c
@
text
@/*	$OpenBSD: basename.c,v 1.11 2003/06/17 21:56:23 millert Exp $	*/

/*
 * Copyright (c) 1997 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "common.h"

/* quell empty-compilation unit warnings */
static const int unused = 0;

#ifndef HAVE_BASENAME

#include <stdio.h>	/* for NULL */
#include <sys/param.h>	/* for MAXPATHLEN */
#include <errno.h>
#include "sysv.h"


char *
basename(const char *path)
{
    static char bname[MAXPATHLEN];
    register const char *endp, *startp;

    /* Empty or NULL string gets treated as "." */
    if (path == NULL || *path == '\0') {
	(void)strlcpy(bname, ".", sizeof bname);
	return(bname);
    }

    /* Strip trailing slashes */
    endp = path + strlen(path) - 1;
    while (endp > path && *endp == '/')
	endp--;

    /* All slashes become "/" */
    if (endp == path && *endp == '/') {
	(void)strlcpy(bname, "/", sizeof bname);
	return(bname);
    }

    /* Find the start of the base */
    startp = endp;
    while (startp > path && *(startp - 1) != '/')
	startp--;

    if (endp - startp + 2 > sizeof(bname)) {
	errno = ENAMETOOLONG;
	return(NULL);
    }
    strlcpy(bname, startp, endp - startp + 2);
    return(bname);
}

#endif /* !defined(HAVE_BASENAME) */

/*
 * Local Variables:
 * tab-width: 8
 * mode: C
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.3
log
@include appropriate headers (cygwin fix)
@
text
@@


1.2
log
@errno.h defines ENAMETOOLONG
should know its own prototype
@
text
@d26 2
@


1.1
log
@initial addition of basename() so we don't need to test for its availability
@
text
@d26 4
@

