head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2007.03.08.09.29.21;	author d_rossberg;	state dead;
branches;
next	1.3;

1.3
date	2007.02.28.18.35.34;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.27.12.54.08;	author d_rossberg;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.27.12.46.17;	author d_rossberg;	state Exp;
branches;
next	;


desc
@@


1.4
log
@since basename was removed from libsysv we do not need strlcpy any more
@
text
@/*      $OpenBSD: strlcpy.c,v 1.11 2006/05/05 15:27:38 millert Exp $        */

/*
 * Copyright (c) 1998 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "common.h"

/* quell empty-compilation unit warnings */
static const int unused = 0;

#ifndef HAVE_STRLCPY

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#include "sysv.h"


/*
 * Copy src to string dst of size siz.  At most siz-1 characters
 * will be copied.  Always NUL terminates (unless siz == 0).
 * Returns strlen(src); if retval >= siz, truncation occurred.
 */
size_t
strlcpy(char *dst, const char *src, size_t siz)
{
        char *d = dst;
        const char *s = src;
        size_t n = siz;

        /* Copy as many bytes as will fit */
        if (n != 0) {
                while (--n != 0) {
                        if ((*d++ = *s++) == '\0')
                                break;
                }
        }

        /* Not enough room in dst, add NUL and traverse rest of src */
        if (n == 0) {
                if (siz != 0)
                        *d = '\0';                /* NUL-terminate dst */
                while (*s++)
                        ;
        }

        return(s - src - 1);        /* count does not include NUL */
}


#endif /* !defined(HAVE_STRLCPY) */

/*
 * Local Variables:
 * tab-width: 8
 * mode: C
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.3
log
@include unistd.h for size_t definition (fixes linux/amd64 build)
@
text
@@


1.2
log
@should know its own prototype
@
text
@d26 4
@


1.1
log
@initial addition of strlcpy()
@
text
@d26 2
@

