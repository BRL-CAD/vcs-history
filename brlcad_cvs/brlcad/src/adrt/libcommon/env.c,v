head	1.20;
access;
symbols
	rel-7-10-4:1.18
	STABLE:1.18.0.2
	rel-7-10-2:1.18
	rel-7-10-0:1.18
	rel-7-8-4:1.12
	rel-7-8-2:1.12
	rel-7-8-0:1.12
	trimnurbs-branch:1.12.0.2
	help:1.12
	temp_tag:1.11
	bobWinPort-20051223-freeze:1.5
	postmerge-20051223-bobWinPort:1.11
	premerge-20051223-bobWinPort:1.11
	rel-7-6-6:1.11
	rel-7-6-4:1.11
	rel-7-6-2:1.7
	rel-7-6-branch:1.7.0.2
	rel-7-6-0:1.7
	rel-7-4-2:1.4.2.1
	rel-7-4-branch:1.4.0.2
	bobWinPort:1.5.0.2
	rel-7-4-0:1.4;
locks; strict;
comment	@ * @;


1.20
date	2007.12.06.20.18.55;	author erikgreenwald;	state Exp;
branches;
next	1.19;

1.19
date	2007.10.14.08.01.45;	author brlcad;	state Exp;
branches;
next	1.18;

1.18
date	2007.03.20.20.05.06;	author brlcad;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.08.06.49.18;	author brlcad;	state Exp;
branches;
next	1.16;

1.16
date	2007.01.27.01.41.30;	author brlcad;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.23.01.13.21;	author brlcad;	state Exp;
branches;
next	1.14;

1.14
date	2007.01.21.00.51.04;	author brlcad;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.20.14.36.41;	author brlcad;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.18.06.46.11;	author brlcad;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.21.16.16.15;	author twingy;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.21.02.15.01;	author twingy;	state Exp;
branches;
next	1.8;

1.8
date	2005.09.21.00.03.07;	author twingy;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.08.21.58.43;	author twingy;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2005.08.29.06.37.16;	author twingy;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.29.21.40.07;	author twingy;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.01.21.07.54;	author twingy;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.07.01.15.13.02;	author twingy;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.18.01.56.30;	author twingy;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.15.09.26;	author lbutler;	state Exp;
branches;
next	;

1.4.2.1
date	2005.08.16.21.03.46;	author brlcad;	state Exp;
branches;
next	;

1.7.2.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.20
log
@plane is now cut
@
text
@/*                     E N V . C
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2002-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file env.c
 *
 *  Common Library - Environment Settings Parsing
 *
 *  Author -
 *      Justin L. Shumaker
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 * $Id: env.c,v 1.19 2007/10/14 08:01:45 brlcad Exp $
 */

#include "env.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "render.h"

#if 0
void common_env_init(common_env_t *env);
void common_env_free(common_env_t *env);
void common_env_prep(common_env_t *env);
void common_env_read(common_env_t *env);
#endif

void common_env_init(common_env_t *env) {
  render_flat_init(&env->render);
  env->img_w = 640;
  env->img_h = 480;
  env->img_hs = 1;
  env->tile_w = 40;
  env->tile_h = 40;

  env->geometry_file[0] = 0;
  env->kdtree_cache_file[0] = 0;
  env->properties_file[0] = 0;
  env->textures_file[0] = 0;
  env->mesh_map_file[0] = 0;
  env->frames_file[0] = 0;
}


void common_env_free(common_env_t *env) {
}


void common_env_prep(common_env_t *env) {
  env->img_vw = env->img_w * env->img_hs;
  env->img_vh = env->img_h * env->img_hs;
}


void common_env_read(common_env_t *env, const char *fpath) {
  FILE *fh;
  char line[256], *token;

  fh = fopen(fpath, "r");
  if(!fh) {
    printf("Project file: %s does not exist, exiting...\n", fpath);
    exit(1);
  }

  while(fgets(line, 256, fh)) {
    token = strtok(line, ",");

    if(!strcmp("geometry_file", token)) {
      strncpy(env->geometry_file, strtok(NULL, ","), ADRT_NAME_SIZE);
      env->geometry_file[strlen(env->geometry_file) - 1] = 0;
    } else if(!strcmp("kdtree_cache_file", token)) {
      strncpy(env->kdtree_cache_file, strtok(NULL, ","), ADRT_NAME_SIZE);
      env->kdtree_cache_file[strlen(env->kdtree_cache_file) - 1] = 0;
    } else if(!strcmp("properties_file", token)) {
      strncpy(env->properties_file, strtok(NULL, ","), ADRT_NAME_SIZE);
      env->properties_file[strlen(env->properties_file) - 1] = 0;
    } else if(!strcmp("textures_file", token)) {
      strncpy(env->textures_file, strtok(NULL, ","), ADRT_NAME_SIZE);
      env->textures_file[strlen(env->textures_file) - 1] = 0;
    } else if(!strcmp("mesh_map_file", token)) {
      strncpy(env->mesh_map_file, strtok(NULL, ","), ADRT_NAME_SIZE);
      env->mesh_map_file[strlen(env->mesh_map_file) - 1] = 0;
    } else if(!strcmp("frames_file", token)) {
      strncpy(env->frames_file, strtok(NULL, ","), ADRT_NAME_SIZE);
      env->frames_file[strlen(env->frames_file) - 1] = 0;
    } else if(!strcmp("image_size", token)) {
      token = strtok(NULL, ",");
      env->img_w = atoi(token);
      token = strtok(NULL, ",");
      env->img_h = atoi(token);
      token = strtok(NULL, ",");
      env->tile_w = atoi(token);
      token = strtok(NULL, ",");
      env->tile_h = atoi(token);
    } else if(!strcmp("hypersamples", token)) {
      token = strtok(NULL, ",");
      env->img_hs = atoi(token);
    } else if(!strcmp("rendering_method", token)) {
      token = strtok(NULL, ",");
      /* strip off newline */
      if(token[strlen(token)-1] == '\n') token[strlen(token)-1] = 0;

      if(!strcmp(token, "normal")) {
	env->rm = RENDER_METHOD_NORMAL;
	render_normal_init(&env->render);
      } else if(!strcmp(token, "phong")) {
	env->rm = RENDER_METHOD_PHONG;
	render_phong_init(&env->render);
      } else if(!strcmp(token, "depth")) {
	env->rm = RENDER_METHOD_DEPTH;
	render_depth_init(&env->render);
      } else if(!strcmp(token, "path")) {
	env->rm = RENDER_METHOD_PATH;
	token = strtok(NULL, ",");
	render_path_init(&env->render, atoi(token));
      } else if(!strcmp(token, "cut")) {
	TIE_3 pos, dir;
	int i;

	env->rm = RENDER_METHOD_PLANE;

	/* ray position */
	for(i = 0; i < 3; i++) {
	  token = strtok(NULL, ",");
	  pos.v[i] = atof(token);
	}

	/* ray direction */
	for(i = 0; i < 3; i++) {
	  token = strtok(NULL, ",");
	  dir.v[i] = atof(token);
	}

	render_cut_init(&env->render, pos, dir);
      } else {
	env->rm = RENDER_METHOD_FLAT;
	render_flat_init(&env->render);
      }

    }
  }

  fclose(fh);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.19
log
@take care of a slew of level 4 flawfinder issues related to adding length parameters to string and i/o functions
@
text
@d31 1
a31 1
 * $Id: env.c,v 1.18 2007/03/20 20:05:06 brlcad Exp $
d136 1
a136 1
      } else if(!strcmp(token, "plane")) {
d154 1
a154 1
	render_plane_init(&env->render, pos, dir);
@


1.18
log
@since adrt uses malloc, add checks on use for a null return value.  this probably would be a good reason to being associating with libbu.. (this fixes sf bug 1680679 - Check return codes everywhere; submitted by Markus Elfring (elfring))
@
text
@d31 1
a31 1
 * $Id: env.c,v 1.17 2007/02/08 06:49:18 brlcad Exp $
d89 1
a89 1
      strcpy(env->geometry_file, strtok(NULL, ","));
d92 1
a92 1
      strcpy(env->kdtree_cache_file, strtok(NULL, ","));
d95 1
a95 1
      strcpy(env->properties_file, strtok(NULL, ","));
d98 1
a98 1
      strcpy(env->textures_file, strtok(NULL, ","));
d101 1
a101 1
      strcpy(env->mesh_map_file, strtok(NULL, ","));
d104 1
a104 1
      strcpy(env->frames_file, strtok(NULL, ","));
@


1.17
log
@give adrt some distinctiveness in the header
@
text
@d31 1
a31 1
 * $Id: env.c,v 1.16 2007/01/27 01:41:30 brlcad Exp $
d75 1
a75 1
void common_env_read(common_env_t *env, char *fpath) {
@


1.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d2 1
a2 1
 * BRL-CAD
d31 1
a31 1
 * $Id: env.c,v 1.15 2007/01/23 01:13:21 brlcad Exp $
@


1.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d31 1
a31 1
 * $Id: env.c,v 1.14 2007/01/21 00:51:04 brlcad Exp $
d124 2
a125 2
        env->rm = RENDER_METHOD_NORMAL;
        render_normal_init(&env->render);
d127 2
a128 2
        env->rm = RENDER_METHOD_PHONG;
        render_phong_init(&env->render);
d130 2
a131 2
        env->rm = RENDER_METHOD_DEPTH;
        render_depth_init(&env->render);
d133 3
a135 3
        env->rm = RENDER_METHOD_PATH;
        token = strtok(NULL, ",");
        render_path_init(&env->render, atoi(token));
d137 2
a138 2
        TIE_3 pos, dir;
        int i;
d140 1
a140 1
        env->rm = RENDER_METHOD_PLANE;
d142 11
a152 11
        /* ray position */
        for(i = 0; i < 3; i++) {
          token = strtok(NULL, ",");
          pos.v[i] = atof(token);
        }

        /* ray direction */
        for(i = 0; i < 3; i++) {
          token = strtok(NULL, ",");
          dir.v[i] = atof(token);
        }
d154 1
a154 1
        render_plane_init(&env->render, pos, dir);
d156 2
a157 2
        env->rm = RENDER_METHOD_FLAT;
        render_flat_init(&env->render);
@


1.14
log
@standard header and footer cleanup
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d31 1
a31 1
 * $Id: env.c,v 1.13 2007/01/20 14:36:41 brlcad Exp $
@


1.13
log
@update copyright to 2007
@
text
@a21 1
 *                     E N V . C
d32 1
a32 1
 * $Id: env.c,v 1.12 2006/01/18 06:46:11 brlcad Exp $
d166 10
@


1.12
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2002-2006 United States Government as represented by
d33 1
a33 1
 * $Id: env.c,v 1.11 2005/10/23 04:44:28 brlcad Exp $
@


1.11
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2002-2005 United States Government as represented by
d33 1
a33 1
 * $Id: env.c,v 1.10 2005/09/21 16:16:15 twingy Exp $
@


1.10
log
@reverted
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.8 2005/09/21 00:03:07 twingy Exp $
d161 1
a161 1
      
@


1.9
log
@librender is now libvis, render method terminology becomes visualization method or vis
method for short.
@
text
@d41 1
a41 1
#include "vis.h"
d51 1
a51 1
  vis_flat_init(&env->vis);
d120 1
a120 1
    } else if(!strcmp("vis_method", token)) {
d126 2
a127 2
        env->vm = VM_NORMAL;
        vis_normal_init(&env->vis);
d129 2
a130 2
        env->vm = VM_PHONG;
        vis_phong_init(&env->vis);
d132 2
a133 2
        env->vm = VM_DEPTH;
        vis_depth_init(&env->vis);
d135 1
a135 1
        env->vm = VM_PATH;
d137 1
a137 1
        vis_path_init(&env->vis, atoi(token));
d142 1
a142 1
        env->vm = VM_PLANE;
d156 1
a156 1
        vis_plane_init(&env->vis, pos, dir);
d158 2
a159 2
        env->vm = VM_FLAT;
        vis_flat_init(&env->vis);
@


1.8
log
@*** empty log message ***
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.7 2005/09/08 21:58:43 twingy Exp $
d41 1
a41 1
#include "render.h"
d51 1
a51 1
  render_flat_init(&env->render);
d120 1
a120 1
    } else if(!strcmp("rendering_method", token)) {
d126 2
a127 2
        env->rm = RENDER_METHOD_NORMAL;
        render_normal_init(&env->render);
d129 2
a130 2
        env->rm = RENDER_METHOD_PHONG;
        render_phong_init(&env->render);
d132 2
a133 2
        env->rm = RENDER_METHOD_DEPTH;
        render_depth_init(&env->render);
d135 1
a135 1
        env->rm = RENDER_METHOD_PATH;
d137 1
a137 1
        render_path_init(&env->render, atoi(token));
d142 1
a142 1
        env->rm = RENDER_METHOD_PLANE;
d156 1
a156 1
        render_plane_init(&env->render, pos, dir);
d158 2
a159 2
        env->rm = RENDER_METHOD_FLAT;
        render_flat_init(&env->render);
@


1.7
log
@adrt now uses a mesh map, no properties embedded in adrt file.  Transformation matrices being applied in unpack
again.
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.6 2005/08/29 06:37:16 twingy Exp $
a137 3
      } else if(!strcmp(token, "kelos")) {
        env->rm = RENDER_METHOD_KELOS;
        render_kelos_init(&env->render);
@


1.7.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d33 1
a33 1
 * $Id$
d138 3
d164 1
a164 1

@


1.6
log
@Integrated kd-tree caching.
It's generated with adrt_bench by supplying the -c argument.
kdtree_cache_file,kdtree.cache goes into project.env file to make it work.
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.5 2005/07/29 21:40:07 twingy Exp $
d62 1
d102 3
@


1.5
log
@added depth to parser so you can render bsp depth from rise.
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.4 2005/07/01 21:07:54 twingy Exp $
d59 1
d92 3
@


1.4
log
@Moved the g loader int adrt to a converter in brl-cad.  The converter creates
all the necessary files that adrt needs to use geometry.  Going to fix unpack
next so the program is usable again.
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.3 2005/07/01 15:13:02 twingy Exp $
d123 3
@


1.4.2.1
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.5 2005/07/29 21:40:07 twingy Exp $
a122 3
      } else if(!strcmp(token, "depth")) {
        env->rm = RENDER_METHOD_DEPTH;
        render_depth_init(&env->render);
@


1.3
log
@The project directory now has a single project file that lists the file names
for properties, textures, frames, geometry, and geometry arguments.  The
application no longer requires the -g and -a options.  IGVT has been updated
to reflect these changes, RISE is next.
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.2 2005/06/18 01:56:30 twingy Exp $
a58 1
  env->geometry_file_args[0] = 0;
a90 3
    } else if(!strcmp("geometry_file_args", token)) {
      strcpy(env->geometry_file_args, strtok(NULL, ","));
      env->geometry_file_args[strlen(env->geometry_file_args) - 1] = 0;
@


1.2
log
@Added licensing info to libcommon files.
@
text
@d33 1
a33 1
 * $Id: env.c,v 1.2 2005/06/18 01:30:04 twingy Exp $
d43 1
a43 1

d48 1
a48 1

d57 6
d76 1
a76 1
void common_env_read(common_env_t *env) {
d80 5
a84 1
  fh = fopen("env.db", "r");
d89 16
a104 1
    if(!strcmp("image_size", token)) {
@


1.1
log
@Welcome ADRT
@
text
@d1 35
@

