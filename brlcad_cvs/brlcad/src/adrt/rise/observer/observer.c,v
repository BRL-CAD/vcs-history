head	1.13;
access;
symbols
	rel-7-10-4:1.13
	STABLE:1.13.0.2
	rel-7-10-2:1.11
	rel-7-10-0:1.11
	rel-7-8-4:1.5
	rel-7-8-2:1.5
	rel-7-8-0:1.5
	trimnurbs-branch:1.5.0.2
	help:1.5
	temp_tag:1.5
	bobWinPort-20051223-freeze:1.4
	postmerge-20051223-bobWinPort:1.5
	premerge-20051223-bobWinPort:1.5
	rel-7-6-6:1.5
	rel-7-6-4:1.5
	rel-7-6-2:1.4
	rel-7-6-branch:1.4.0.6
	rel-7-6-0:1.4
	rel-7-4-2:1.4
	rel-7-4-branch:1.4.0.4
	bobWinPort:1.4.0.2
	rel-7-4-0:1.4;
locks; strict;
comment	@ * @;


1.13
date	2007.09.10.19.38.27;	author erikgreenwald;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.30.19.11.30;	author brlcad;	state Exp;
branches;
next	1.11;

1.11
date	2007.03.20.20.05.08;	author brlcad;	state Exp;
branches;
next	1.10;

1.10
date	2007.02.08.06.49.19;	author brlcad;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.02.19.46.37;	author erikgreenwald;	state Exp;
branches;
next	1.8;

1.8
date	2007.01.27.01.41.31;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.21.00.53.11;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.25.03.13.29;	author twingy;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2005.06.24.22.57.41;	author twingy;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.17.21.41.01;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.15.09.29;	author lbutler;	state Exp;
branches;
next	;

1.4.6.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.13
log
@should only be using common.h, not brlcad_config.h
@
text
@/*                      O B S E R V E R . C
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file observer.c
 *
 *  Author -
 *      Justin L. Shumaker
 *
 */

#include "common.h"
#include "observer.h"
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include "SDL.h"
#include "rise.h"
#include "display.h"
#include "umath.h"
#include "tienet.h"
/* Networking Includes */
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#if RISE_USE_COMPRESSION
  #include <zlib.h>
#endif


typedef struct rise_observer_net_info_s {
  struct hostent master;
  int port;
} rise_observer_net_info_t;


void rise_observer(char *host, int port);
void* rise_observer_networking(void *ptr);
void rise_observer_event_loop(void);

pthread_t rise_observer_networking_thread;

pthread_mutex_t event_mut;
int screen_w, screen_h, rise_observer_trinum;
short rise_observer_endian, rise_observer_alive, rise_observer_master_shutdown;
tienet_sem_t rise_observer_sdlinit_sem;
tienet_sem_t rise_observer_sdlready_sem;


void rise_observer(char *host, int port) {
  rise_observer_net_info_t ni;

  /* server address */
  if(gethostbyname(host)) {
    ni.master = gethostbyname(host)[0];
  } else {
    fprintf(stderr, "hostname %s unknown, exiting.\n", host);
    exit(1);
  }
  ni.port = port;

  rise_observer_trinum = 0;

  pthread_mutex_init(&event_mut, 0);

  rise_observer_alive = 1;
  rise_observer_master_shutdown = 0;

  tienet_sem_init(&rise_observer_sdlinit_sem, 0);
  tienet_sem_init(&rise_observer_sdlready_sem, 0);

  /* Launch a thread to handle events */
  pthread_create(&rise_observer_networking_thread, NULL, rise_observer_networking, &ni);

  /* Process events */
  tienet_sem_wait(&rise_observer_sdlinit_sem);
  rise_observer_event_loop();

  /* JOIN EVENT HANDLING THREAD */
  pthread_join(rise_observer_networking_thread, NULL);
}


void* rise_observer_networking(void *ptr) {
  rise_observer_net_info_t *ni;
  struct timeval start, cur;
  int sockd, frame_num;
  struct sockaddr_in my_addr, srv_addr;
  unsigned int addrlen;
  unsigned char op;
  char string[255];
  void *frame;
#if RISE_USE_COMPRESSION
  void *comp_buf;
#endif

  ni = (rise_observer_net_info_t *)ptr;

  /* create a socket */
  if((sockd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    perror("Socket creation error");
    exit(1);
  }

  /* client address */
  my_addr.sin_family = AF_INET;
  my_addr.sin_addr.s_addr = INADDR_ANY;
  my_addr.sin_port = htons(0);

  srv_addr.sin_family = ni->master.h_addrtype;
  memcpy((char*)&srv_addr.sin_addr.s_addr, ni->master.h_addr_list[0], ni->master.h_length);
  srv_addr.sin_port = htons(ni->port);

  if(bind(sockd, (struct sockaddr *)&my_addr, sizeof(my_addr)) < 0) {
    fprintf(stderr, "unable to bind socket, exiting.\n");
    exit(1);
  }

  /* connect to master */
  if(connect(sockd, (struct sockaddr *)&srv_addr, sizeof(srv_addr)) < 0) {
    fprintf(stderr, "cannot connect to master, exiting.\n");
    exit(1);
  }

  addrlen = sizeof(srv_addr);

  /* send version and get endian info */
  op = RISE_NET_OP_INIT;
  tienet_send(sockd, &op, 1, rise_observer_endian);
  tienet_recv(sockd, &rise_observer_endian, sizeof(short), 0);
  rise_observer_endian = rise_observer_endian == 1 ? 0 : 1;
  tienet_recv(sockd, &screen_w, sizeof(int), rise_observer_endian);
  tienet_recv(sockd, &screen_h, sizeof(int), rise_observer_endian);
  tienet_recv(sockd, &rise_observer_trinum, sizeof(int), rise_observer_endian);

  /* Screen size is known.  Initialize SDL and continue once it's ready */
  tienet_sem_post(&rise_observer_sdlinit_sem);
  tienet_sem_wait(&rise_observer_sdlready_sem);

  /* Allocate memory for frame buffer */
  frame = malloc(screen_w*screen_h*3);
  if (!frame) {
      perror("frame");
      exit(1);
  }
#if RISE_USE_COMPRESSION
  comp_buf = malloc(screen_w*screen_h*3);
  if (!comp_buf) {
      perror("comp_buf");
      exit(1);
  }
#endif

  frame_num = 0;
  gettimeofday(&start, NULL);

  while(rise_observer_alive) {
    if(rise_observer_master_shutdown) {
      op = RISE_NET_OP_SHUTDOWN;
      tienet_send(sockd, &op, 1, rise_observer_endian);
      rise_observer_alive = 0;
    } else {
      op = RISE_NET_OP_FRAME;
      tienet_send(sockd, &op, 1, rise_observer_endian);

      /* get frame data */
#if RISE_USE_COMPRESSION
      {
	unsigned long dest_len;
	int comp_size;

	tienet_recv(sockd, &comp_size, sizeof(int), rise_observer_endian);
	tienet_recv(sockd, comp_buf, comp_size, 0);
	dest_len = screen_w*screen_h*3;
	uncompress(frame, &dest_len, comp_buf, (unsigned long)comp_size);
      }
#else
      tienet_recv(sockd, frame, 3 * screen_w * screen_h, 0);
#endif
    }

    util_display_draw(frame);

    /* Text Overlay */
    util_display_draw(frame);
    sprintf(string, "Triangles: %.0fk", (tfloat)rise_observer_trinum / (tfloat)1024);
    util_display_text(string, 0, 0, UTIL_JUSTIFY_RIGHT, UTIL_JUSTIFY_BOTTOM);

    sprintf(string, "RES: %dx%d", screen_w, screen_h);
    util_display_text(string, 0, 0, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_BOTTOM);

    util_display_flip();

    frame_num++;
  }

  /*
  * Send a message to the master that this observer is quitting.
  */
  op = RISE_NET_OP_QUIT;
  tienet_send(sockd, &op, 1, rise_observer_endian);

  free(frame);
#if RISE_USE_COMPRESSION
  free(comp_buf);
#endif
  close(sockd);

  return(NULL);
}


void rise_observer_event_loop() {
  SDL_Event event;
  TIE_3 vec, vec2, vec3;


  util_display_init(screen_w, screen_h);
  tienet_sem_post(&rise_observer_sdlready_sem);

  /* Loop waiting for ESC+Mouse_Button */
  while(SDL_WaitEvent(&event) >= 0) {
    pthread_mutex_lock(&event_mut);
    switch(event.type) {
      case SDL_KEYDOWN:
	switch(event.key.keysym.sym) {
	  case SDLK_q: /* quit */
	    printf("Detaching from master and exiting.\n");
	    rise_observer_alive = 0;
	    return;
	    break;


	  case SDLK_F12: /* Server Shutdown and quit*/
	    printf("Shutting down master and exiting.\n");
	    rise_observer_master_shutdown = 1;
	    return;
	    break;


	  default:
	    break;
	}

      case SDL_MOUSEBUTTONDOWN:
	break;

      case SDL_MOUSEMOTION:
	if(event.motion.state) {
	}
	break;

      default:
	break;
    }

    pthread_mutex_unlock(&event_mut);
  }
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.12
log
@TFLOAT changed to tfloat.  also quell a few warnings/bugs related to passing the wrong TIE_3 pointer type.
@
text
@d27 1
a27 1
#include "brlcad_config.h"
@


1.11
log
@since adrt uses malloc, add checks on use for a null return value.  this probably would be a good reason to being associating with libbu.. (this fixes sf bug 1680679 - Check return codes everywhere; submitted by Markus Elfring (elfring))
@
text
@d206 1
a206 1
    sprintf(string, "Triangles: %.0fk", (TFLOAT)rise_observer_trinum / (TFLOAT)1024);
@


1.10
log
@give adrt some distinctiveness in the header
@
text
@d162 4
d168 4
@


1.9
log
@finish changing all #defined symbols to uppercase...
@
text
@d2 1
a2 1
 * BRL-CAD
@


1.8
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d198 1
a198 1
    sprintf(string, "Triangles: %.0fk", (tfloat)rise_observer_trinum / (tfloat)1024);
@


1.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d181 2
a182 2
        unsigned long dest_len;
        int comp_size;
d184 4
a187 4
        tienet_recv(sockd, &comp_size, sizeof(int), rise_observer_endian);
        tienet_recv(sockd, comp_buf, comp_size, 0);
        dest_len = screen_w*screen_h*3;
        uncompress(frame, &dest_len, comp_buf, (unsigned long)comp_size);
d238 18
a255 18
        switch(event.key.keysym.sym) {
          case SDLK_q: /* quit */
            printf("Detaching from master and exiting.\n");
            rise_observer_alive = 0;
            return;
            break;


          case SDLK_F12: /* Server Shutdown and quit*/
            printf("Shutting down master and exiting.\n");
            rise_observer_master_shutdown = 1;
            return;
            break;


          default:
            break;
        }
d258 1
a258 1
        break;
d261 3
a263 3
        if(event.motion.state) {
        }
        break;
d266 1
a266 1
        break;
@


1.6
log
@standard header and footer cleanup
@
text
@d9 1
a9 1
 * as published by the Free Software Foundation.
@


1.5
log
@trailing ws
@
text
@d1 26
d272 10
@


1.4
log
@Minimal support to get rise_observer working.
@
text
@d47 1
a47 1
  /* server address */ 
@


1.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d47 1
a47 1
  /* server address */
@


1.3
log
@fixing rise observer
@
text
@d38 1
a38 1
int screen_w, screen_h, rise_observer_trinum, rise_observer_controller;
a81 1
  tfloat cam[8];
a128 7
  tienet_recv(sockd, &rise_observer_controller, sizeof(int), rise_observer_endian);

  op = RISE_NET_OP_GETSTATE;
  tienet_send(sockd, &op, 1, rise_observer_endian);
  if(rise_observer_endian) {
  } else {
  }
a148 5
      if(!rise_observer_controller) {
        op = RISE_NET_OP_GETSTATE;
        tienet_send(sockd, &op, 1, rise_observer_endian);
      }

d164 1
a164 1
      tienet_recv(sockd, (struct sockaddr *)&srv_addr, &addrlen, frame, screen_w*screen_h*3, 0);
d166 1
d168 1
a168 7
      /* camera data */
      if(rise_observer_endian) {
      } else {
      }

      tienet_send(sockd, cam, sizeof(tfloat)*8, 0);
    }
d172 2
a173 2
    sprintf(string, "Triangles: %.0fk", (tfloat)rise_observer_trinum/(tfloat)1024);
    util_display_text(string, 0, 0, UTIL_JUSTIFY_RIGHT, UTIL_JUSTIFY_TOP);
d175 1
a175 1
    sprintf(string, "RES: %d x %d", screen_w, screen_h);
a177 4
    sprintf(string, "Controller: %s", rise_observer_controller ? "yes" : "no");
    util_display_text(string, 0, 0, UTIL_JUSTIFY_RIGHT, UTIL_JUSTIFY_BOTTOM);

/*    util_display_flip(frame); */
a203 8
  /* Initialize the SDL library */
  if(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_NOPARACHUTE) < 0) {
    fprintf(stderr, "Couldn't initialize SDL: %s\n", SDL_GetError());
    exit(1);
  }
  /* Clean up on exit */
  atexit(SDL_Quit);

a206 2
  SDL_EnableKeyRepeat(100, 150);

a212 24
          case SDLK_KP2: /* rotate down */
            break;

          case SDLK_KP4: /* rotate left */
            break;

          case SDLK_KP6: /* rotate right */
            break;

          case SDLK_KP8: /* rotate up */
            break;

          case SDLK_a: /* strafe left */
            break;

          case SDLK_c: /* control */
            break;

          case SDLK_d: /* strafe right */
            break;

          case SDLK_f: /* strafe right */
            break;

a218 5
          case SDLK_s: /* backwards */
            break;

          case SDLK_w: /* forward */
            break;
@


1.2
log
@use brlcad_config.h instead of config.h
@
text
@a34 3
TIE_3 camera_pos;
TIE_3 camera_foc;

@


1.1
log
@Welcome ADRT
@
text
@d1 1
a1 1
#include "config.h"
@

