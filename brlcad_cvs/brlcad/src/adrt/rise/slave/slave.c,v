head	1.9;
access;
symbols
	rel-7-10-4:1.9
	STABLE:1.9.0.2
	rel-7-10-2:1.8
	rel-7-10-0:1.7
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.3.0.2
	help:1.3
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.2
	postmerge-20051223-bobWinPort:1.2
	premerge-20051223-bobWinPort:1.2
	rel-7-6-6:1.2
	rel-7-6-4:1.2
	rel-7-6-2:1.2
	rel-7-6-branch:1.2.0.4
	rel-7-6-0:1.2
	rel-7-4-2:1.1.2.1
	rel-7-4-branch:1.1.0.2
	bobWinPort:1.2.0.2
	rel-7-4-0:1.1;
locks; strict;
comment	@ * @;


1.9
date	2007.08.30.19.11.30;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.31.20.16.08;	author erikgreenwald;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.08.06.49.19;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.02.19.46.37;	author erikgreenwald;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.21.00.53.11;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.10.15.12.36;	author twingy;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.20.18.37.07;	author twingy;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.15.09.29;	author lbutler;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.08.16.21.03.47;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.9
log
@TFLOAT changed to tfloat.  also quell a few warnings/bugs related to passing the wrong TIE_3 pointer type.
@
text
@/*                         S L A V E . C
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file slave.c
 *
 *  Author -
 *      Justin L. Shumaker
 *
 */

#include "slave.h"
#include <stdio.h>
#include <string.h>
#include <sys/time.h>
#include "rise.h"
#include "camera.h"
#include "cdb.h"
#include "tienet.h"
#include "unpack.h"


void rise_slave(int port, char *host, int threads);
void rise_slave_init(tie_t *tie, int socknum);
void rise_slave_free(void);
void rise_slave_work(tie_t *tie, void *data, unsigned int size, void **res_buf, unsigned int *res_len);
void rise_slave_mesg(void *mesg, unsigned int mesg_len);

int rise_slave_threads;
int rise_slave_completed;
common_db_t db;
util_camera_t camera;


void rise_slave(int port, char *host, int threads) {
  rise_slave_threads = threads;
  tienet_slave_init(port, host, rise_slave_init, rise_slave_work, rise_slave_free, rise_slave_mesg, RISE_VER_KEY);
}


void rise_slave_init(tie_t *tie, int socknum) {
  printf("scene data received\n");

  rise_slave_completed = 0;
  util_camera_init(&camera, rise_slave_threads);

  printf("prepping geometry... ");
  fflush(stdout);
  common_unpack(&db, tie, &camera, socknum);
  common_env_prep(&db.env);
  util_camera_prep(&camera, &db);
  printf("done.\n");
}


void rise_slave_free() {
  util_camera_free(&camera);
  common_unpack_free(&db);
}


void rise_slave_work(tie_t *tie, void *data, unsigned int size, void **res_buf, unsigned int *res_len) {
  util_camera_render(&camera, &db, tie, data, size, res_buf, res_len);

#if 0
  gettimeofday(&tv, NULL);
  printf("[Work Units Completed: %.6d  Rays: %.5d k/sec %lld]\r", ++rise_slave_completed, (int)((tfloat)tie->rays_fired / (tfloat)(1000 * (tv.tv_sec - rise_slave_startsec + 1))), tie->rays_fired);
  fflush(stdout);
#endif
}


void rise_slave_mesg(void *mesg, unsigned int mesg_len) {
  short		op;

  memcpy(&op, mesg, sizeof(short));

  switch(op) {
    case RISE_OP_CAMERA:
    {
      TIE_3	pos;
      TIE_3	foc;

      memcpy(&pos.v[0], &((char*)mesg)[2], sizeof(tfloat));
      memcpy(&pos.v[1], &((char*)mesg)[2+1*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&pos.v[2], &((char*)mesg)[2+2*sizeof(tfloat)], sizeof(tfloat));

      memcpy(&foc.v[0], &((char*)mesg)[2+3*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&foc.v[1], &((char*)mesg)[2+4*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&foc.v[2], &((char*)mesg)[2+5*sizeof(tfloat)], sizeof(tfloat));

      camera.pos = pos;
      camera.focus = foc;
      /* recompute the camera data */
      util_camera_prep(&camera, &db);

      break;
    }

    default:
      break;
  }
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.8
log
@fix various compiler warnings
@
text
@d82 1
a82 1
  printf("[Work Units Completed: %.6d  Rays: %.5d k/sec %lld]\r", ++rise_slave_completed, (int)((TFLOAT)tie->rays_fired / (TFLOAT)(1000 * (tv.tv_sec - rise_slave_startsec + 1))), tie->rays_fired);
d99 7
a105 7
      memcpy(&pos.v[0], &((char*)mesg)[2], sizeof(TFLOAT));
      memcpy(&pos.v[1], &((char*)mesg)[2+1*sizeof(TFLOAT)], sizeof(TFLOAT));
      memcpy(&pos.v[2], &((char*)mesg)[2+2*sizeof(TFLOAT)], sizeof(TFLOAT));

      memcpy(&foc.v[0], &((char*)mesg)[2+3*sizeof(TFLOAT)], sizeof(TFLOAT));
      memcpy(&foc.v[1], &((char*)mesg)[2+4*sizeof(TFLOAT)], sizeof(TFLOAT));
      memcpy(&foc.v[2], &((char*)mesg)[2+5*sizeof(TFLOAT)], sizeof(TFLOAT));
@


1.7
log
@give adrt some distinctiveness in the header
@
text
@d42 1
a42 1
void rise_slave_mesg(void *mesg, int mesg_len);
d88 1
a88 1
void rise_slave_mesg(void *mesg, int mesg_len) {
@


1.6
log
@finish changing all #defined symbols to uppercase...
@
text
@d2 1
a2 1
 * BRL-CAD
@


1.5
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d82 1
a82 1
  printf("[Work Units Completed: %.6d  Rays: %.5d k/sec %lld]\r", ++rise_slave_completed, (int)((tfloat)tie->rays_fired / (tfloat)(1000 * (tv.tv_sec - rise_slave_startsec + 1))), tie->rays_fired);
d99 7
a105 7
      memcpy(&pos.v[0], &((char*)mesg)[2], sizeof(tfloat));
      memcpy(&pos.v[1], &((char*)mesg)[2+1*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&pos.v[2], &((char*)mesg)[2+2*sizeof(tfloat)], sizeof(tfloat));

      memcpy(&foc.v[0], &((char*)mesg)[2+3*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&foc.v[1], &((char*)mesg)[2+4*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&foc.v[2], &((char*)mesg)[2+5*sizeof(tfloat)], sizeof(tfloat));
@


1.4
log
@standard header and footer cleanup
@
text
@d9 1
a9 1
 * as published by the Free Software Foundation.
@


1.3
log
@ADRT compiles happily again.
@
text
@d1 26
d119 10
@


1.2
log
@* Data on demand to nodes (~20% mem savings).
* tlist memory leak in unpack.c fixed.
* BSP Depth Visualization rendering method.
* Split Plane Coloring
* Testing more efficient BSP methods.
@
text
@d15 1
a15 1
void rise_slave_work(tie_t *tie, void *data, int size, void **res_buf, int *res_len);
d47 1
a47 1
  common_unpack_free();
d51 1
a51 1
void rise_slave_work(tie_t *tie, void *data, int size, void **res_buf, int *res_len) {
@


1.1
log
@Welcome ADRT
@
text
@d13 1
a13 1
void rise_slave_init(tie_t *tie, void *app_data, int app_size);
d30 1
a30 1
void rise_slave_init(tie_t *tie, void *app_data, int app_size) {
d36 3
a38 1
  common_unpack(&db, tie, &camera, COMMON_PACK_ALL, app_data, app_size);
d41 1
a41 1
  printf("prepping geometry\n");
@


1.1.2.1
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@d13 1
a13 1
void rise_slave_init(tie_t *tie, int socknum);
d30 1
a30 1
void rise_slave_init(tie_t *tie, int socknum) {
d36 1
a36 3
  printf("prepping geometry... ");
  fflush(stdout);
  common_unpack(&db, tie, &camera, socknum);
d39 1
a39 1
  printf("done.\n");
@


