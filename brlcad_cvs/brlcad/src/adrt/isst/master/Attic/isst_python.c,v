head	1.16;
access;
symbols
	rel-7-10-4:1.12
	STABLE:1.12.0.2
	rel-7-10-2:1.12
	rel-7-10-0:1.12
	rel-7-8-4:1.7
	rel-7-8-2:1.7
	rel-7-8-0:1.7
	trimnurbs-branch:1.7.0.2
	help:1.7
	temp_tag:1.7
	bobWinPort-20051223-freeze:1.2
	postmerge-20051223-bobWinPort:1.7
	premerge-20051223-bobWinPort:1.7
	rel-7-6-6:1.7
	rel-7-6-4:1.7
	rel-7-6-2:1.4
	rel-7-6-branch:1.4.0.2
	rel-7-6-0:1.4
	rel-7-4-2:1.3.2.2
	rel-7-4-branch:1.3.0.2
	bobWinPort:1.2.0.2;
locks; strict;
comment	@ * @;


1.16
date	2007.12.18.18.22.14;	author erikgreenwald;	state dead;
branches;
next	1.15;

1.15
date	2007.12.18.06.46.23;	author brlcad;	state Exp;
branches;
next	1.14;

1.14
date	2007.12.08.23.06.05;	author brlcad;	state Exp;
branches;
next	1.13;

1.13
date	2007.10.14.08.01.45;	author brlcad;	state Exp;
branches;
next	1.12;

1.12
date	2007.03.20.20.05.05;	author brlcad;	state Exp;
branches;
next	1.11;

1.11
date	2007.02.08.06.49.17;	author brlcad;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.27.01.41.30;	author brlcad;	state Exp;
branches;
next	1.9;

1.9
date	2007.01.23.01.13.21;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2007.01.21.00.53.11;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.23.04.44.27;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.14.07.28.35;	author twingy;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.14.04.59.24;	author twingy;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.06.06.11.39;	author twingy;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.08.16.21.01.49;	author twingy;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.07.26.16.28.05;	author twingy;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.18.20.57.56;	author twingy;	state Exp;
branches;
next	;

1.3.2.1
date	2005.08.16.21.01.49;	author brlcad;	state dead;
branches;
next	1.3.2.2;

1.3.2.2
date	2005.08.16.21.03.45;	author brlcad;	state Exp;
branches;
next	;

1.4.2.1
date	2005.11.13.13.46.11;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.16
log
@merge in the newer stuff
@
text
@/*                   I S S T _ P Y T H O N . C
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file isst_python.c
 *
 * Author -
 *   Justin Shumaker
 *
 */

#include "isst_python.h"
#include "Python.h"
#undef HAVE_TM_ZONE
#include "isst.h"
#include "master.h"
#include "tienet.h"

char *isst_python_response;


void isst_python_init(void);
void isst_python_command(char *command);
static PyObject* isst_python_stdout(PyObject *self, PyObject* args);
static PyObject* isst_python_commands(PyObject *self, PyObject* args);
static PyObject* isst_python_get_camera_position(PyObject *self, PyObject* args);
static PyObject* isst_python_set_camera_position(PyObject *self, PyObject* args);
static PyObject* isst_python_get_origin_ae(PyObject *self, PyObject* args);
static PyObject* isst_python_set_origin_ae(PyObject *self, PyObject* args);
static PyObject* isst_python_get_camera_ae(PyObject *self, PyObject* args);
static PyObject* isst_python_set_camera_ae(PyObject *self, PyObject* args);
static PyObject* isst_python_get_spall_angle(PyObject *self, PyObject* args);
static PyObject* isst_python_set_spall_angle(PyObject *self, PyObject* args);
static PyObject* isst_python_save(PyObject *self, PyObject* args);
static PyObject* isst_python_load(PyObject *self, PyObject* args);
static PyObject* isst_python_select(PyObject *self, PyObject* args);
static PyObject* isst_python_deselect(PyObject *self, PyObject* args);


static PyMethodDef ISST_Methods[] = {
    {"stdout", isst_python_stdout, METH_VARARGS, "redirected output."},
    {"commands", isst_python_commands, METH_VARARGS, "lists available commands."},
    {"get_camera_position", isst_python_get_camera_position, METH_VARARGS, "get camera position."},
    {"set_camera_position", isst_python_set_camera_position, METH_VARARGS, "set camera position."},
    {"get_camera_ae", isst_python_get_camera_ae, METH_VARARGS, "get camera azimuth and elevation."},
    {"set_camera_ae", isst_python_set_camera_ae, METH_VARARGS, "set camera azimuth and elevation."},
    {"get_spall_angle", isst_python_get_spall_angle, METH_VARARGS, "get spall angle."},
    {"set_spall_angle", isst_python_set_spall_angle, METH_VARARGS, "set spall angle."},
    {"save", isst_python_save, METH_VARARGS, "save shot."},
    {"load", isst_python_load, METH_VARARGS, "load shot."},
    {"select", isst_python_select, METH_VARARGS, "select geometry."},
    {"deselect", isst_python_deselect, METH_VARARGS, "deselect geometry."},
    {NULL, NULL, 0, NULL}
};


#define IPR_SIZE 1024
void isst_python_init() {
  Py_Initialize();


  isst_python_response = (char *)malloc(IPR_SIZE+1);
  if (!isst_python_response) {
      perror("isst_python_response");
      exit(1);
  }

  PyImport_AddModule("adrt");
  Py_InitModule("adrt", ISST_Methods);
  PyRun_SimpleString("import adrt");


  /* Redirect the output */
  PyRun_SimpleString("\
import sys\n\
import string\n\
class Redirect:\n\
    def __init__(self, stdout):\n\
	self.stdout = stdout\n\
    def write(self, s):\n\
	adrt.stdout(s)\n\
sys.stdout = Redirect(sys.stdout)\n\
sys.stderr = Redirect(sys.stderr)\n\
");

}


void isst_python_free() {
  free(isst_python_response);
  Py_Finalize();
}


void isst_python_code(char *code) {
  isst_python_response[0] = 0;

  PyRun_SimpleString(code);
  strncpy(code, isst_python_response, IPR_SIZE);
  code[IPR_SIZE] = '\0';
}


/* Called once for every line */
static PyObject* isst_python_stdout(PyObject *self, PyObject* args) {
  char *string;

  if(PyArg_ParseTuple(args, "s", &string)) {
      strncat(isst_python_response, string, IPR_SIZE);
      isst_python_response[IPR_SIZE] = '\0';
  }

  return PyInt_FromLong(0);
}


/* Get camera position */
static PyObject* isst_python_commands(PyObject *self, PyObject* args) {
  return Py_BuildValue("available commands:\n");
}


/* Get camera position */
static PyObject* isst_python_get_camera_position(PyObject *self, PyObject* args) {
  return Py_BuildValue("fff", isst_master_camera_position.v[0], isst_master_camera_position.v[1], isst_master_camera_position.v[2]);
}


/* Set camera position */
static PyObject* isst_python_set_camera_position(PyObject *self, PyObject* args) {
  PyArg_ParseTuple(args, "fff", &isst_master_camera_position.v[0], &isst_master_camera_position.v[1], &isst_master_camera_position.v[2]);
  return PyInt_FromLong(0);
}


/* Get camera azimuth and elevation */
static PyObject* isst_python_get_camera_ae(PyObject *self, PyObject* args) {
  return Py_BuildValue("ff", isst_master_camera_azimuth, isst_master_camera_elevation);
}


/* Set camera azimith and elevation */
static PyObject* isst_python_set_camera_ae(PyObject *self, PyObject* args) {
  PyArg_ParseTuple(args, "ff", &isst_master_camera_azimuth, &isst_master_camera_elevation);
  return PyInt_FromLong(0);
}


/* Get spall angle */
static PyObject* isst_python_get_spall_angle(PyObject *self, PyObject* args) {
  return Py_BuildValue("f", isst_master_spall_angle);
}


/* Set spall angle */
static PyObject* isst_python_set_spall_angle(PyObject *self, PyObject* args) {
  PyArg_ParseTuple(args, "f", &isst_master_spall_angle);
  return PyInt_FromLong(0);
}

/* Save shot to shots.txt */
static PyObject* isst_python_save(PyObject *self, PyObject* args) {
  char *string;
  FILE *fh;

  if(PyArg_ParseTuple(args, "s", &string)) {
    strncat(isst_python_response, string, IPR_SIZE - strlen(isst_python_response) - 1);
    isst_python_response[IPR_SIZE] = '\0';

    /* Append the data to the file shots.txt */
    fh = fopen("shots.txt", "a");

    if(!fh)
      return PyInt_FromLong(0);

    fprintf(fh, "label: %s\n", string);
    fprintf(fh, "camera_position: %f %f %f\n", isst_master_camera_position.v[0], isst_master_camera_position.v[1], isst_master_camera_position.v[2]);
    fprintf(fh, "camera_ae: %f %f\n", isst_master_camera_azimuth, isst_master_camera_elevation);
    fprintf(fh, "in_hit: %f %f %f\n", isst_master_in_hit.v[0], isst_master_in_hit.v[1], isst_master_in_hit.v[2]);
    fprintf(fh, "\n");

    fclose(fh);

    strncpy(isst_python_response, "shot saved.\n", IPR_SIZE);
    isst_python_response[IPR_SIZE] = '\0';
  }

  return PyInt_FromLong(0);
}


/* Load a Shot from shots.txt */
static PyObject* isst_python_load(PyObject *self, PyObject *args) {
  char *string, line[ADRT_NAME_SIZE];
  FILE *fh;

  if(PyArg_ParseTuple(args, "s", &string)) {
    /*
    * Given a label, try and locate the corresponding data from
    * shots.txt and load the values into memory.
    */
    fh = fopen("shots.txt", "r");

    if(!fh)
      return PyInt_FromLong(0);

    /* Search for matching label using value in string */
    while(!feof(fh)) {
      fgets(line, ADRT_NAME_SIZE, fh);
      if(!strstr(line, "label:"))
	continue;

      if(!strstr(line, string))
	continue;

       /* Read in camera_position and camera_ae values */
       fscanf(fh, "camera_position: %f %f %f\n", &isst_master_camera_position.v[0], &isst_master_camera_position.v[1], &isst_master_camera_position.v[2]);
       fscanf(fh, "camera_ae: %f %f\n", &isst_master_camera_azimuth, &isst_master_camera_elevation);
       snprintf(line, ADRT_NAME_SIZE, "succesfully loaded: %s\n", string);
       strncpy(isst_python_response, line, IPR_SIZE);
       isst_python_response[IPR_SIZE] = '\0';
       return PyInt_FromLong(0);
    }

    snprintf(line, ADRT_NAME_SIZE, "cannot find: %s\n", string);
    strncpy(isst_python_response, line, IPR_SIZE);
    isst_python_response[IPR_SIZE] = '\0';
  }

  return PyInt_FromLong(0);
}


/* Select geometry if mesh name contains string */
static PyObject* isst_python_select(PyObject *self, PyObject *args) {
  char *string, mesg[256];
  uint16_t op;
  uint8_t c, t;

  if(PyArg_ParseTuple(args, "s", &string)) {
    op = ISST_OP_SELECT;
    memcpy(mesg, &op, 2);
    t = 1;
    memcpy(&mesg[2], &t, 1);
    c = strlen(string) + 1;
    memcpy(&mesg[3], &c, 1);
    memcpy(&mesg[4], string, c);
    tienet_master_broadcast(mesg, c + 4);
  }

  strncpy(isst_python_response, "done.\n", IPR_SIZE);
  isst_python_response[IPR_SIZE] = '\0';

  return PyInt_FromLong(0);
}


/* Deselect geometry if mesh name contains string */
static PyObject* isst_python_deselect(PyObject *self, PyObject *args) {
  char *string, mesg[256];
  uint16_t op;
  uint8_t c, t;

  if(PyArg_ParseTuple(args, "s", &string)) {
    op = ISST_OP_SELECT;
    memcpy(mesg, &op, 2);
    t = 0;
    memcpy(&mesg[2], &t, 1);
    c = strlen(string) + 1;
    memcpy(&mesg[3], &c, 1);
    memcpy(&mesg[4], string, c);
    tienet_master_broadcast(mesg, c + 4);
  }

  strncpy(isst_python_response, "done.\n", IPR_SIZE);
  isst_python_response[IPR_SIZE] = '\0';

  return PyInt_FromLong(0);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.15
log
@eek, fix a few of the bad strncat/strncpy sizes that were put on arg 2 instead of 3.  manually null-terminate for safety.
@
text
@@


1.14
log
@shouldn't need to undef HAVE_STAT, no longer checked (not that it should matter)
@
text
@d77 1
a77 1
  isst_python_response = (char *)malloc(IPR_SIZE);
d114 2
a115 1
  strncpy(code, IPR_SIZE, isst_python_response);
d123 4
a126 2
  if(PyArg_ParseTuple(args, "s", &string))
    strncat(isst_python_response, IPR_SIZE, string);
d183 2
d200 1
d236 1
d242 1
d267 2
d291 2
@


1.13
log
@take care of a slew of level 4 flawfinder issues related to adding length parameters to string and i/o functions
@
text
@a28 1
#undef HAVE_STAT
@


1.12
log
@since adrt uses malloc, add checks on use for a null return value.  this probably would be a good reason to being associating with libbu.. (this fixes sf bug 1680679 - Check return codes everywhere; submitted by Markus Elfring (elfring))
@
text
@d73 1
d78 1
a78 1
  isst_python_response = (char *)malloc(1024);
d115 1
a115 1
  strcpy(code, isst_python_response);
d124 1
a124 1
    strcat(isst_python_response, string);
d180 1
a180 1
    strcat(isst_python_response, string);
d195 1
a195 1
    strcpy(isst_python_response, "shot saved.\n");
d204 1
a204 1
  char *string, line[256];
d219 1
a219 1
      fgets(line, 256, fh);
d229 2
a230 2
       sprintf(line, "succesfully loaded: %s\n", string);
       strcpy(isst_python_response, line);
d234 2
a235 2
    sprintf(line, "cannot find: %s\n", string);
    strcpy(isst_python_response, line);
d259 1
a259 1
  strcpy(isst_python_response, "done.\n");
d281 1
a281 1
  strcpy(isst_python_response, "done.\n");
@


1.11
log
@give adrt some distinctiveness in the header
@
text
@d78 4
@


1.10
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d2 1
a2 1
 * BRL-CAD
@


1.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d90 1
a90 1
        self.stdout = stdout\n\
d92 1
a92 1
        adrt.stdout(s)\n\
d216 1
a216 1
        continue;
d219 1
a219 1
        continue;
@


1.8
log
@standard header and footer cleanup
@
text
@d9 1
a9 1
 * as published by the Free Software Foundation.
@


1.7
log
@trailing ws
@
text
@d1 26
d280 10
@


1.6
log
@some friendly messages.
@
text
@d56 1
a56 1
  
@


1.5
log
@added select and deselect commands to highlight parts from the console.
@
text
@d228 1
d250 1
@


1.4
log
@dump is now save.  added a load command.  both have verbose output.
@
text
@d5 1
d7 1
d26 2
d41 2
d209 43
@


1.4.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@a4 1
#include "isst.h"
a5 1
#include "tienet.h"
a23 2
static PyObject* isst_python_select(PyObject *self, PyObject* args);
static PyObject* isst_python_deselect(PyObject *self, PyObject* args);
a36 2
    {"select", isst_python_select, METH_VARARGS, "select geometry."},
    {"deselect", isst_python_deselect, METH_VARARGS, "deselect geometry."},
d50 1
a50 1

a202 45


/* Select geometry if mesh name contains string */
static PyObject* isst_python_select(PyObject *self, PyObject *args) {
  char *string, mesg[256];
  uint16_t op;
  uint8_t c, t;

  if(PyArg_ParseTuple(args, "s", &string)) {
    op = ISST_OP_SELECT;
    memcpy(mesg, &op, 2);
    t = 1;
    memcpy(&mesg[2], &t, 1);
    c = strlen(string) + 1;
    memcpy(&mesg[3], &c, 1);
    memcpy(&mesg[4], string, c);
    tienet_master_broadcast(mesg, c + 4);
  }

  strcpy(isst_python_response, "done.\n");
  return PyInt_FromLong(0);
}


/* Deselect geometry if mesh name contains string */
static PyObject* isst_python_deselect(PyObject *self, PyObject *args) {
  char *string, mesg[256];
  uint16_t op;
  uint8_t c, t;

  if(PyArg_ParseTuple(args, "s", &string)) {
    op = ISST_OP_SELECT;
    memcpy(mesg, &op, 2);
    t = 0;
    memcpy(&mesg[2], &t, 1);
    c = strlen(string) + 1;
    memcpy(&mesg[3], &c, 1);
    memcpy(&mesg[4], string, c);
    tienet_master_broadcast(mesg, c + 4);
  }

  strcpy(isst_python_response, "done.\n");
  return PyInt_FromLong(0);
}

@


1.3
log
@in_hit is now provided in the dump.txt output
@
text
@d22 2
a23 1
static PyObject* isst_python_dump(PyObject *self, PyObject* args);
d35 2
a36 1
    {"dump", isst_python_dump, METH_VARARGS, "dump all."},
d137 2
a138 2
/* Dump all data */
static PyObject* isst_python_dump(PyObject *self, PyObject* args) {
d144 2
a145 2
    /* Append the data to the file dump.txt */
    fh = fopen("dump.txt", "a");
d157 42
@


1.3.2.1
log
@file isst_python.c was added on branch rel-7-4-branch on 2005-08-16 21:03:45 +0000
@
text
@d1 158
@


1.3.2.2
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@a0 158
#include "isst_python.h"
#include "Python.h"
#undef HAVE_STAT
#undef HAVE_TM_ZONE
#include "master.h"

char *isst_python_response;


void isst_python_init(void);
void isst_python_command(char *command);
static PyObject* isst_python_stdout(PyObject *self, PyObject* args);
static PyObject* isst_python_commands(PyObject *self, PyObject* args);
static PyObject* isst_python_get_camera_position(PyObject *self, PyObject* args);
static PyObject* isst_python_set_camera_position(PyObject *self, PyObject* args);
static PyObject* isst_python_get_origin_ae(PyObject *self, PyObject* args);
static PyObject* isst_python_set_origin_ae(PyObject *self, PyObject* args);
static PyObject* isst_python_get_camera_ae(PyObject *self, PyObject* args);
static PyObject* isst_python_set_camera_ae(PyObject *self, PyObject* args);
static PyObject* isst_python_get_spall_angle(PyObject *self, PyObject* args);
static PyObject* isst_python_set_spall_angle(PyObject *self, PyObject* args);
static PyObject* isst_python_dump(PyObject *self, PyObject* args);


static PyMethodDef ISST_Methods[] = {
    {"stdout", isst_python_stdout, METH_VARARGS, "redirected output."},
    {"commands", isst_python_commands, METH_VARARGS, "lists available commands."},
    {"get_camera_position", isst_python_get_camera_position, METH_VARARGS, "get camera position."},
    {"set_camera_position", isst_python_set_camera_position, METH_VARARGS, "set camera position."},
    {"get_camera_ae", isst_python_get_camera_ae, METH_VARARGS, "get camera azimuth and elevation."},
    {"set_camera_ae", isst_python_set_camera_ae, METH_VARARGS, "set camera azimuth and elevation."},
    {"get_spall_angle", isst_python_get_spall_angle, METH_VARARGS, "get spall angle."},
    {"set_spall_angle", isst_python_set_spall_angle, METH_VARARGS, "set spall angle."},
    {"dump", isst_python_dump, METH_VARARGS, "dump all."},
    {NULL, NULL, 0, NULL}
};


void isst_python_init() {
  Py_Initialize();


  isst_python_response = (char *)malloc(1024);

  PyImport_AddModule("adrt");
  Py_InitModule("adrt", ISST_Methods);
  PyRun_SimpleString("import adrt");
  

  /* Redirect the output */
  PyRun_SimpleString("\
import sys\n\
import string\n\
class Redirect:\n\
    def __init__(self, stdout):\n\
        self.stdout = stdout\n\
    def write(self, s):\n\
        adrt.stdout(s)\n\
sys.stdout = Redirect(sys.stdout)\n\
sys.stderr = Redirect(sys.stderr)\n\
");

}


void isst_python_free() {
  free(isst_python_response);
  Py_Finalize();
}


void isst_python_code(char *code) {
  isst_python_response[0] = 0;

  PyRun_SimpleString(code);
  strcpy(code, isst_python_response);
}


/* Called once for every line */
static PyObject* isst_python_stdout(PyObject *self, PyObject* args) {
  char *string;

  if(PyArg_ParseTuple(args, "s", &string))
    strcat(isst_python_response, string);

  return PyInt_FromLong(0);
}


/* Get camera position */
static PyObject* isst_python_commands(PyObject *self, PyObject* args) {
  return Py_BuildValue("available commands:\n");
}


/* Get camera position */
static PyObject* isst_python_get_camera_position(PyObject *self, PyObject* args) {
  return Py_BuildValue("fff", isst_master_camera_position.v[0], isst_master_camera_position.v[1], isst_master_camera_position.v[2]);
}


/* Set camera position */
static PyObject* isst_python_set_camera_position(PyObject *self, PyObject* args) {
  PyArg_ParseTuple(args, "fff", &isst_master_camera_position.v[0], &isst_master_camera_position.v[1], &isst_master_camera_position.v[2]);
  return PyInt_FromLong(0);
}


/* Get camera azimuth and elevation */
static PyObject* isst_python_get_camera_ae(PyObject *self, PyObject* args) {
  return Py_BuildValue("ff", isst_master_camera_azimuth, isst_master_camera_elevation);
}


/* Set camera azimith and elevation */
static PyObject* isst_python_set_camera_ae(PyObject *self, PyObject* args) {
  PyArg_ParseTuple(args, "ff", &isst_master_camera_azimuth, &isst_master_camera_elevation);
  return PyInt_FromLong(0);
}


/* Get spall angle */
static PyObject* isst_python_get_spall_angle(PyObject *self, PyObject* args) {
  return Py_BuildValue("f", isst_master_spall_angle);
}


/* Set spall angle */
static PyObject* isst_python_set_spall_angle(PyObject *self, PyObject* args) {
  PyArg_ParseTuple(args, "f", &isst_master_spall_angle);
  return PyInt_FromLong(0);
}

/* Dump all data */
static PyObject* isst_python_dump(PyObject *self, PyObject* args) {
  char *string;
  FILE *fh;

  if(PyArg_ParseTuple(args, "s", &string)) {
    strcat(isst_python_response, string);
    /* Append the data to the file dump.txt */
    fh = fopen("dump.txt", "a");

    if(!fh)
      return PyInt_FromLong(0);

    fprintf(fh, "label: %s\n", string);
    fprintf(fh, "========================\n");
    fprintf(fh, "camera_position: %f %f %f\n", isst_master_camera_position.v[0], isst_master_camera_position.v[1], isst_master_camera_position.v[2]);
    fprintf(fh, "camera_ae: %f %f\n", isst_master_camera_azimuth, isst_master_camera_elevation);
    fprintf(fh, "\n");

    fclose(fh);
  }

  return PyInt_FromLong(0);
}
@


1.2
log
@Fixed AE for keith and removed origin AE stuff....  Fixed component view and
left bsp depth viewing in.
@
text
@a148 1
    fprintf(fh, "========================\n");
d151 1
@


1.1
log
@IVAT is now ISST (Interactive Shot Selection Tool).
@
text
@d14 2
a15 2
static PyObject* isst_python_get_camera_pos(PyObject *self, PyObject* args);
static PyObject* isst_python_set_camera_pos(PyObject *self, PyObject* args);
d28 2
a29 4
    {"get_camera_pos", isst_python_get_camera_pos, METH_VARARGS, "get camera position."},
    {"set_camera_pos", isst_python_set_camera_pos, METH_VARARGS, "set camera position."},
    {"get_origin_ae", isst_python_get_origin_ae, METH_VARARGS, "get origin azimuth and elevation."},
    {"set_origin_ae", isst_python_set_origin_ae, METH_VARARGS, "set origin azimuth and elevation."},
d98 2
a99 2
static PyObject* isst_python_get_camera_pos(PyObject *self, PyObject* args) {
  return Py_BuildValue("fff", isst_master_camera_pos.v[0], isst_master_camera_pos.v[1], isst_master_camera_pos.v[2]);
d104 2
a105 15
static PyObject* isst_python_set_camera_pos(PyObject *self, PyObject* args) {
  PyArg_ParseTuple(args, "fff", &isst_master_camera_pos.v[0], &isst_master_camera_pos.v[1], &isst_master_camera_pos.v[2]);
  return PyInt_FromLong(0);
}


/* Get origin azimuth and elevation */
static PyObject* isst_python_get_origin_ae(PyObject *self, PyObject* args) {
  return Py_BuildValue("ff", isst_master_origin_azimuth, isst_master_origin_elevation);
}


/* Set origin azimith and elevation */
static PyObject* isst_python_set_origin_ae(PyObject *self, PyObject* args) {
  PyArg_ParseTuple(args, "ff", &isst_master_origin_azimuth, &isst_master_origin_elevation);
d150 1
a150 2
    fprintf(fh, "camera_position: %f %f %f\n", isst_master_camera_pos.v[0], isst_master_camera_pos.v[1], isst_master_camera_pos.v[2]);
    fprintf(fh, "origin_ae: %f %f\n", isst_master_origin_azimuth, isst_master_origin_elevation);
a151 1
    fprintf(fh, "spall angle: %f\n", isst_master_spall_angle);
@

