head	1.8;
access;
symbols
	rel-7-10-4:1.6
	STABLE:1.6.0.2
	rel-7-10-2:1.5
	rel-7-10-0:1.5
	rel-7-8-4:1.1
	rel-7-8-2:1.1
	rel-7-8-0:1.1
	trimnurbs-branch:1.1.0.8
	help:1.1
	temp_tag:1.1
	bobWinPort-20051223-freeze:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-4:1.1
	rel-7-6-2:1.1
	rel-7-6-branch:1.1.0.6
	rel-7-6-0:1.1
	rel-7-4-2:1.1.4.2
	rel-7-4-branch:1.1.0.4
	bobWinPort:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2007.12.18.21.39.09;	author erikgreenwald;	state Exp;
branches;
next	1.7;

1.7
date	2007.12.18.18.22.13;	author erikgreenwald;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.10.19.38.27;	author erikgreenwald;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.20.20.05.05;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.08.06.49.17;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.23.01.13.21;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.21.00.53.11;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.18.20.57.56;	author twingy;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2005.07.18.20.57.56;	author brlcad;	state dead;
branches;
next	1.1.4.2;

1.1.4.2
date	2005.08.16.21.03.45;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.8
log
@generify function names a bit (hopefully leading to unification of the various compute chunks)
@
text
@/*                    D I S P A T C H E R . C
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dispatcher.c
 *
 * Author -
 *   Justin Shumaker
 *
 */

#include "dispatcher.h"
#include <stdlib.h>
#include <string.h>
#include "camera.h"
#include "tienet.h"

#ifdef HAVE_SYS_SYSINFO_H
#include <sys/sysinfo.h>
#elif defined(HAVE_SYS_SYSCTL_H)
#include <sys/sysctl.h>
#endif

uint16_t dispatcher_frame;
tienet_buffer_t dispatcher_mesg;


void
master_dispatcher_init ()
{
  TIENET_BUFFER_INIT(dispatcher_mesg);
  dispatcher_frame = 1;
}


void
master_dispatcher_free ()
{
  TIENET_BUFFER_FREE(dispatcher_mesg);
}


void
master_dispatcher_generate (void *data, int data_len, int image_w, int image_h, int image_format)
{
  int i, n, size;
  camera_tile_t tile;

  size = data_len + sizeof (camera_tile_t);

  TIENET_BUFFER_SIZE(dispatcher_mesg, size);

  tienet_master_begin ();

  /* Copy data payload to front */
  bcopy(data, dispatcher_mesg.data, data_len);

  tile.size_x = image_w / DISPATCHER_TILE_NUM;
  tile.size_y = image_h / DISPATCHER_TILE_NUM;
  tile.format = image_format;
  tile.frame = dispatcher_frame;

  for(i = 0; i < image_h; i += tile.size_y)
  {
    tile.orig_y = i;
    for(n = 0; n < image_w; n += tile.size_x)
    {
      tile.orig_x = n;
      TCOPY(camera_tile_t, &tile, 0, dispatcher_mesg.data, data_len);
      tienet_master_push(dispatcher_mesg.data, size);
    }
  }

  tienet_master_end ();

  dispatcher_frame = (dispatcher_frame + 1) % (1<<14);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.7
log
@merge in the newer stuff
@
text
@d44 1
a44 1
isst_master_dispatcher_init ()
d52 1
a52 1
isst_master_dispatcher_free ()
d59 1
a59 1
isst_master_dispatcher_generate (void *data, int data_len, int image_w, int image_h, int image_format)
@


1.6
log
@should only be using common.h, not brlcad_config.h
@
text
@a27 1
#include <stdio.h>
d30 1
a30 4
#include <sys/time.h>
#include "adrt_common.h"
#include "common.h"
#include "isst.h"
a32 2
#include <unistd.h>

d39 2
a40 11

int	isst_dispatcher_progress_delta;
int	isst_dispatcher_progress;
int	isst_dispatcher_interval;
int	isst_dispatcher_lastsave;


void	isst_dispatcher_init(void);
void	isst_dispatcher_free(void);
void	isst_dispatcher_generate(common_db_t *db, void *data, int data_len);
void	isst_dispatcher_result(void *res_buf, int res_len);
d43 5
a47 1
void isst_dispatcher_init() {
d51 4
a54 1
void isst_dispatcher_free() {
d58 29
a86 9
void isst_dispatcher_generate(common_db_t *db, void *data, int data_len) {
  int i, n;
  common_work_t work;
  void *mesg;

  mesg = malloc(sizeof(common_work_t) + data_len);
  if (!mesg) {
      perror("mesg");
      exit(1);
a87 1
  tienet_master_begin();
d89 1
a89 13
  work.size_x = db->env.tile_w;
  work.size_y = db->env.tile_h;
  work.format = COMMON_BIT_DEPTH_24;

  memcpy(&((char *)mesg)[sizeof(common_work_t)], data, data_len);
  for(i = 0; i < db->env.img_vh; i += db->env.tile_w) {
    for(n = 0; n < db->env.img_vw; n += db->env.tile_h) {
      work.orig_x = n;
      work.orig_y = i;
      memcpy(&((char *)mesg)[0], &work, sizeof(common_work_t));
      tienet_master_push(mesg, sizeof(common_work_t)+data_len);
    }
  }
d91 1
a91 2
  tienet_master_end();
  free(mesg);
@


1.5
log
@since adrt uses malloc, add checks on use for a null return value.  this probably would be a good reason to being associating with libbu.. (this fixes sf bug 1680679 - Check return codes everywhere; submitted by Markus Elfring (elfring))
@
text
@d33 1
a33 1
#include "brlcad_config.h"
@


1.4
log
@give adrt some distinctiveness in the header
@
text
@d72 4
@


1.3
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d2 1
a2 1
 * BRL-CAD
@


1.2
log
@standard header and footer cleanup
@
text
@d9 1
a9 1
 * as published by the Free Software Foundation.
@


1.1
log
@IVAT is now ISST (Interactive Shot Selection Tool).
@
text
@d1 26
d91 10
@


1.1.4.1
log
@file dispatcher.c was added on branch rel-7-4-branch on 2005-08-16 21:03:45 +0000
@
text
@d1 64
@


1.1.4.2
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@a0 64
#include "dispatcher.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include "adrt_common.h"
#include "brlcad_config.h"
#include "isst.h"
#include "tienet.h"

#include <unistd.h>

#ifdef HAVE_SYS_SYSINFO_H
#include <sys/sysinfo.h>
#elif defined(HAVE_SYS_SYSCTL_H)
#include <sys/sysctl.h>
#endif


int	isst_dispatcher_progress_delta;
int	isst_dispatcher_progress;
int	isst_dispatcher_interval;
int	isst_dispatcher_lastsave;


void	isst_dispatcher_init(void);
void	isst_dispatcher_free(void);
void	isst_dispatcher_generate(common_db_t *db, void *data, int data_len);
void	isst_dispatcher_result(void *res_buf, int res_len);


void isst_dispatcher_init() {
}


void isst_dispatcher_free() {
}


void isst_dispatcher_generate(common_db_t *db, void *data, int data_len) {
  int i, n;
  common_work_t work;
  void *mesg;

  mesg = malloc(sizeof(common_work_t) + data_len);
  tienet_master_begin();

  work.size_x = db->env.tile_w;
  work.size_y = db->env.tile_h;
  work.format = COMMON_BIT_DEPTH_24;

  memcpy(&((char *)mesg)[sizeof(common_work_t)], data, data_len);
  for(i = 0; i < db->env.img_vh; i += db->env.tile_w) {
    for(n = 0; n < db->env.img_vw; n += db->env.tile_h) {
      work.orig_x = n;
      work.orig_y = i;
      memcpy(&((char *)mesg)[0], &work, sizeof(common_work_t));
      tienet_master_push(mesg, sizeof(common_work_t)+data_len);
    }
  }

  tienet_master_end();
  free(mesg);
}
@


