head	1.14;
access;
symbols
	rel-7-10-4:1.10
	STABLE:1.10.0.2
	rel-7-10-2:1.9
	rel-7-10-0:1.9
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1
	postmerge-20051223-bobWinPort:1.2
	premerge-20051223-bobWinPort:1.2
	rel-7-6-6:1.2
	rel-7-6-4:1.2
	rel-7-6-2:1.1
	rel-7-6-branch:1.1.0.6
	rel-7-6-0:1.1
	rel-7-4-2:1.1.4.2
	rel-7-4-branch:1.1.0.4
	bobWinPort:1.1.0.2;
locks; strict;
comment	@ * @;


1.14
date	2007.12.22.15.01.59;	author brlcad;	state Exp;
branches;
next	1.13;

1.13
date	2007.12.18.21.39.09;	author erikgreenwald;	state Exp;
branches;
next	1.12;

1.12
date	2007.12.18.18.22.14;	author erikgreenwald;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.14.08.01.45;	author brlcad;	state Exp;
branches;
next	1.10;

1.10
date	2007.09.10.19.38.27;	author erikgreenwald;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.20.08.05.27;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.08.06.49.17;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.02.17.11.21;	author erikgreenwald;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.02.08.48.27;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.27.01.41.30;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.21;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.21.00.53.11;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.23.04.44.27;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.18.20.57.56;	author twingy;	state Exp;
branches
	1.1.4.1
	1.1.6.1;
next	;

1.1.4.1
date	2005.07.18.20.57.56;	author brlcad;	state dead;
branches;
next	1.1.4.2;

1.1.4.2
date	2005.08.16.21.03.45;	author brlcad;	state Exp;
branches;
next	;

1.1.6.1
date	2005.11.13.13.46.11;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.14
log
@probably going to revert to a libbu solution, but manually null-terminate for now anyways
@
text
@/*                          M A I N . C
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file main.c
 *
 * Author -
 *   Justin Shumaker
 *
 * $Id$
 */

#ifdef HAVE_CONFIG_H
# include "common.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>

#include "adrt.h"
#include "master.h"
#include "tienet.h"


#ifdef HAVE_GETOPT_H
# include <getopt.h>
#endif

#ifdef HAVE_GETOPT_LONG
static struct option longopts[] =
{
	{ "exec",	required_argument,	NULL, 'e' },
	{ "help",	no_argument,		NULL, 'h' },
	{ "comp_host",	required_argument,	NULL, 'c' },
	{ "obs_port",	required_argument,	NULL, 'o' },
	{ "port",	required_argument,	NULL, 'p' },
	{ "build",	no_argument,		NULL, 'b' },
	{ "verbose",	no_argument,		NULL, 'v' },
  	{ "list",	required_argument,	NULL, 'l' },
};
#endif

static char shortopts[] = "bc:e:i:ho:p:vl:";


static void finish(int sig) {
  printf("Collected signal %d, aborting!\n", sig);
  exit(EXIT_FAILURE);
}


static void help() {
  printf("%s\n", "usage: adrt_master [options]\n\
  -h\t\tdisplay help.\n\
  -c\t\tconnect to component server.\n\
  -e\t\tscript to execute that starts slaves.\n\
  -l\t\tfile containing list of slaves to use as compute nodes.\n\
  -o\t\tset observer port number.\n\
  -p\t\tset master port number.\n\
  -v\t\tverbose.\n\
  -b\t\tdisplay build.\n");
}


int main(int argc, char **argv) {
  int port = 0, obs_port = 0, c = 0, verbose = 0;
  char exec[64], list[64], comp_host[64];


  signal(SIGINT, finish);


  /* Initialize strings */
  list[0] = 0;
  exec[0] = 0;
  comp_host[0] = 0;
  port = TN_MASTER_PORT;
  obs_port = ADRT_PORT;

  /* Parse command line options */

  while((c = 
#ifdef HAVE_GETOPT_LONG
	getopt_long(argc, argv, shortopts, longopts, NULL)
#else
	getopt(argc, argv, shortopts)
#endif
	)!= -1)
  {
	  switch(c) {
            case 'c':
              strncpy(comp_host, optarg, 64-1);
	      comp_host[64-1] = '\0'; /* sanity */
              break;

            case 'h':
              help();
              return EXIT_SUCCESS;

            case 'o':
              obs_port = atoi(optarg);
              break;

            case 'p':
              port = atoi(optarg);
              break;

            case 'l':
              strncpy(list, optarg, 64-1);
	      list[64-1] = '\0'; /* sanity */
              break;

            case 'e':
              strncpy(exec, optarg, 64-1);
	      exec[64-1] = '\0'; /* sanity */
              break;

            case 'b':
              printf("adrt_master build: %s %s\n", __DATE__, __TIME__);
              return EXIT_SUCCESS;
              break;

            case 'v':
              verbose = 1;
              break;

            default:
              help();
              return EXIT_FAILURE;
	  }
  }
  argc -= optind;
  argv += optind;

  master_init (port, obs_port, list, exec, comp_host, verbose);

  return EXIT_SUCCESS;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.13
log
@generify function names a bit (hopefully leading to unification of the various compute chunks)
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.12 2007/12/18 18:22:14 erikgreenwald Exp $
d110 2
a111 1
              strncpy(comp_host, optarg, 64);
d127 2
a128 1
              strncpy(list, optarg, 64);
d132 2
a133 1
              strncpy(exec, optarg, 64);
@


1.12
log
@merge in the newer stuff
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.2 2007/12/06 22:05:01 erikg Exp $
d150 1
a150 1
  isst_master_init (port, obs_port, list, exec, comp_host, verbose);
@


1.11
log
@take care of a slew of level 4 flawfinder issues related to adding length parameters to string and i/o functions
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.10 2007/09/10 19:38:27 erikgreenwald Exp $
d38 1
a38 3
#include <bu.h>

#include "isst.h"
d55 3
a57 2
	{ "version",	no_argument,		NULL, 'v' },
	{ "list",	required_argument,	NULL, 'l' },
d61 1
a61 1
static char shortopts[] = "c:e:i:ho:p:vl:";
d71 1
a71 2
  printf("%s\n", ISST_VER_DETAIL);
  printf("%s\n", "usage: isst_master [options] [proj_env_file]\n\
d78 2
a79 1
  -v\t\tdisplay version info.\n");
d84 2
a85 2
  int port = 0, obs_port = 0, c = 0;
  char proj[64], exec[64], list[64], temp[64], comp_host[64];
a89 4
  if(argc == 1) {
    help();
    return EXIT_FAILURE;
  }
a93 1
  proj[0] = 0;
d96 1
a96 1
  obs_port = ISST_OBSERVER_PORT;
d100 1
a100 1
  while((c =
d109 36
a144 31
	    case 'c':
	      strncpy(comp_host, optarg, 64);
	      break;

	    case 'h':
	      help();
	      return EXIT_SUCCESS;

	    case 'o':
	      obs_port = atoi(optarg);
	      break;

	    case 'p':
	      port = atoi(optarg);
	      break;

	    case 'l':
	      strncpy(list, optarg, 64);
	      break;

	    case 'e':
	      strncpy(exec, optarg, 64);
	      break;

	    case 'v':
	      printf("%s\n", ISST_VER_DETAIL);
	      return EXIT_SUCCESS;

	    default:
	      help();
	      return EXIT_FAILURE;
d150 1
a150 8
  strncpy(proj, argv[0], 64);

  if(proj[0]) {
    isst_master(port, obs_port, proj, list, exec, comp_host);
  } else {
    help();
    return EXIT_FAILURE;
  }
@


1.10
log
@should only be using common.h, not brlcad_config.h
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.9 2007/02/20 08:05:27 brlcad Exp $
d151 1
a151 1
  strcpy(proj, argv[0]);
@


1.9
log
@revert the introduction of a libbu dependency to adrt, it's somewhat inconsequential value added just to get bu_getopt processing compared to the benefit of it still compiling stand-alone if needed.
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.8 2007/02/08 06:49:17 brlcad Exp $
d29 1
a29 1
# include "brlcad_config.h"
@


1.8
log
@give adrt some distinctiveness in the header
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.7 2007/02/02 17:11:21 erikgreenwald Exp $
d110 1
a110 1
	bu_getopt(argc, argv, shortopts)
d116 1
a116 1
	      strncpy(comp_host, bu_optarg, 64);
d124 1
a124 1
	      obs_port = atoi(bu_optarg);
d128 1
a128 1
	      port = atoi(bu_optarg);
d132 1
a132 1
	      strncpy(list, bu_optarg, 64);
d136 1
a136 1
	      strncpy(exec, bu_optarg, 64);
d148 2
a149 2
  argc -= bu_optind;
  argv += bu_optind;
@


1.7
log
@include bu.h and link libbu for bu_getopt
@
text
@d2 1
a2 1
 * BRL-CAD
d25 1
a25 1
 * $Id: main.c,v 1.6 2007/02/02 08:48:27 brlcad Exp $
@


1.6
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.5 2007/01/27 01:41:30 brlcad Exp $
d37 3
@


1.5
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.4 2007/01/23 01:13:21 brlcad Exp $
d107 1
a107 1
	getopt(argc, argv, shortopts)
d113 1
a113 1
	      strncpy(comp_host, optarg, 64);
d121 1
a121 1
	      obs_port = atoi(optarg);
d125 1
a125 1
	      port = atoi(optarg);
d129 1
a129 1
	      strncpy(list, optarg, 64);
d133 1
a133 1
	      strncpy(exec, optarg, 64);
d145 2
a146 2
  argc -= optind;
  argv += optind;
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d25 1
a25 1
 * $Id: main.c,v 1.3 2007/01/21 00:53:11 brlcad Exp $
d55 1
a55 1
  	{ "list",	required_argument,	NULL, 'l' },
d112 31
a142 31
            case 'c':
              strncpy(comp_host, optarg, 64);
              break;

            case 'h':
              help();
              return EXIT_SUCCESS;

            case 'o':
              obs_port = atoi(optarg);
              break;

            case 'p':
              port = atoi(optarg);
              break;

            case 'l':
              strncpy(list, optarg, 64);
              break;

            case 'e':
              strncpy(exec, optarg, 64);
              break;

            case 'v':
              printf("%s\n", ISST_VER_DETAIL);
              return EXIT_SUCCESS;

            default:
              help();
              return EXIT_FAILURE;
@


1.3
log
@standard header and footer cleanup
@
text
@d9 1
a9 1
 * as published by the Free Software Foundation.
d25 1
a25 1
 * $Id: main.c,v 1.2 2005/10/23 04:44:27 brlcad Exp $
@


1.2
log
@trailing ws
@
text
@d1 25
a25 2
/*
 * $Id: main.c,v 1.1 2005/07/18 20:57:56 twingy Exp $
d159 10
@


1.1
log
@IVAT is now ISST (Interactive Shot Selection Tool).
@
text
@d2 1
a2 1
 * $Id: main.c,v 1.1 2005/07/10 03:48:10 twingy Exp $
d80 1
a80 1
  while((c = 
@


1.1.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d2 1
a2 1
 * $Id$
d80 1
a80 1
  while((c =
@


1.1.4.1
log
@file main.c was added on branch rel-7-4-branch on 2005-08-16 21:03:45 +0000
@
text
@d1 135
@


1.1.4.2
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@a0 135
/*
 * $Id: main.c,v 1.1 2005/07/18 20:57:56 twingy Exp $
 */

#ifdef HAVE_CONFIG_H
# include "brlcad_config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include "isst.h"
#include "master.h"
#include "tienet.h"


#ifdef HAVE_GETOPT_H
# include <getopt.h>
#endif

#ifdef HAVE_GETOPT_LONG
static struct option longopts[] =
{
	{ "exec",	required_argument,	NULL, 'e' },
	{ "help",	no_argument,		NULL, 'h' },
	{ "comp_host",	required_argument,	NULL, 'c' },
	{ "obs_port",	required_argument,	NULL, 'o' },
	{ "port",	required_argument,	NULL, 'p' },
	{ "version",	no_argument,		NULL, 'v' },
  	{ "list",	required_argument,	NULL, 'l' },
};
#endif

static char shortopts[] = "c:e:i:ho:p:vl:";


static void finish(int sig) {
  printf("Collected signal %d, aborting!\n", sig);
  exit(EXIT_FAILURE);
}


static void help() {
  printf("%s\n", ISST_VER_DETAIL);
  printf("%s\n", "usage: isst_master [options] [proj_env_file]\n\
  -h\t\tdisplay help.\n\
  -c\t\tconnect to component server.\n\
  -e\t\tscript to execute that starts slaves.\n\
  -l\t\tfile containing list of slaves to use as compute nodes.\n\
  -o\t\tset observer port number.\n\
  -p\t\tset master port number.\n\
  -v\t\tdisplay version info.\n");
}


int main(int argc, char **argv) {
  int port = 0, obs_port = 0, c = 0;
  char proj[64], exec[64], list[64], temp[64], comp_host[64];


  signal(SIGINT, finish);

  if(argc == 1) {
    help();
    return EXIT_FAILURE;
  }

  /* Initialize strings */
  list[0] = 0;
  exec[0] = 0;
  proj[0] = 0;
  comp_host[0] = 0;
  port = TN_MASTER_PORT;
  obs_port = ISST_OBSERVER_PORT;

  /* Parse command line options */

  while((c = 
#ifdef HAVE_GETOPT_LONG
	getopt_long(argc, argv, shortopts, longopts, NULL)
#else
	getopt(argc, argv, shortopts)
#endif
	)!= -1)
  {
	  switch(c) {
            case 'c':
              strncpy(comp_host, optarg, 64);
              break;

            case 'h':
              help();
              return EXIT_SUCCESS;

            case 'o':
              obs_port = atoi(optarg);
              break;

            case 'p':
              port = atoi(optarg);
              break;

            case 'l':
              strncpy(list, optarg, 64);
              break;

            case 'e':
              strncpy(exec, optarg, 64);
              break;

            case 'v':
              printf("%s\n", ISST_VER_DETAIL);
              return EXIT_SUCCESS;

            default:
              help();
              return EXIT_FAILURE;
	  }
  }
  argc -= optind;
  argv += optind;

  strcpy(proj, argv[0]);

  if(proj[0]) {
    isst_master(port, obs_port, proj, list, exec, comp_host);
  } else {
    help();
    return EXIT_FAILURE;
  }

  return EXIT_SUCCESS;
}
@


