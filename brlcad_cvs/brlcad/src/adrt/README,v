head	1.9;
access;
symbols
	rel-7-10-4:1.9
	STABLE:1.9.0.2
	rel-7-10-2:1.9
	rel-7-10-0:1.9
	rel-7-8-4:1.8
	rel-7-8-2:1.8
	rel-7-8-0:1.8
	trimnurbs-branch:1.8.0.2
	help:1.8
	temp_tag:1.8
	bobWinPort-20051223-freeze:1.7
	postmerge-20051223-bobWinPort:1.8
	premerge-20051223-bobWinPort:1.8
	rel-7-6-6:1.8
	rel-7-6-4:1.8
	rel-7-6-2:1.7
	rel-7-6-branch:1.7.0.4
	rel-7-6-0:1.7
	rel-7-4-2:1.6.2.1
	rel-7-4-branch:1.6.0.2
	bobWinPort:1.7.0.2
	rel-7-4-0:1.6;
locks; strict;
comment	@# @;


1.9
date	2007.01.27.01.41.30;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.23.04.44.27;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.18.21.26.25;	author twingy;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2005.07.12.21.01.52;	author brlcad;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2005.07.12.05.00.54;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.10.03.13.45;	author twingy;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.10.03.06.15;	author twingy;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.21.05.06.19;	author twingy;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.15.09.23;	author lbutler;	state Exp;
branches;
next	;

1.6.2.1
date	2005.08.16.21.03.45;	author brlcad;	state Exp;
branches;
next	;

1.7.4.1
date	2005.11.13.13.46.11;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.9
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@Info:
=====
ADRT consists of several libraries and tools including the Realistic
Image Synthesis Engine (RISE) and ISST (Interactive Shot Selection
Tool).  These tools consist of three binaries: a master, an observer,
and a slave.  To generate a framework that RISE can use, look at the
g-adrt converter.  g-adrt takes a .g file containing bots and creates an
ADRT framework.

Since RISE is used for generating images, the observer is only supplied
to check up on the images progress, which is especially useful for time
consuming renderings.

Running configure with --enable-optimized is very important as it will
affect performance by almost doubling it.

To learn more about how the structure of a project file and what
geometry files you can feed to isst or rise please check the doc
directory.

For additional help please check out the #brlcad channel on IRC (freenode).


Usage:
======
Method 1 - Manually Connecting Compute Nodes:
Step 1.
  isst_master /path/to/project.env

Step 2.
  isst_observer master.host.name

Step 3.
  isst_slave master.host.name

Step 4.
  repeat step 3 on all slave nodes.


Method 2 - Connecting to Slave Daemons:
Step 1.
  login to each compute node and run isst_slave& (background process).

Step 2.
  isst_master -l slaves.txt /path/to/project.env
  (slaves.txt contains each slave hostname per line).

Step 3.
  isst_observer master.host.name
@


1.8
log
@trailing ws
@
text
@a49 1

@


1.7
log
@updated README for ISST
@
text
@d10 2
a11 2
Since RISE is used for generating images, the observer is only supplied 
to check up on the images progress, which is especially useful for time 
d14 1
a14 1
Running configure with --enable-optimized is very important as it will 
d17 2
a18 2
To learn more about how the structure of a project file and what 
geometry files you can feed to isst or rise please check the doc 
@


1.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d10 2
a11 2
Since RISE is used for generating images, the observer is only supplied
to check up on the images progress, which is especially useful for time
d14 1
a14 1
Running configure with --enable-optimized is very important as it will
d17 2
a18 2
To learn more about how the structure of a project file and what
geometry files you can feed to isst or rise please check the doc
@


1.6
log
@say three
@
text
@d1 2
d4 5
a8 4
Image Synthesis Engine (RISE).  These tools consist of three binaries:
a master, an observer, and a slave.  To generate a framework that RISE
can use, look at the g-adrt converter.  g-adrt takes a .g file
containing bots and creates an ADRT framework.
d15 1
a15 1
affect performance by almost doubling performance.
d18 2
a19 2
geometry files you can feed to ivat or rise please check the doc 
directory for help with RISE.
d22 29
@


1.6.2.1
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@a0 2
Info:
=====
d2 4
a5 5
Image Synthesis Engine (RISE) and ISST (Interactive Shot Selection
Tool).  These tools consist of three binaries: a master, an observer,
and a slave.  To generate a framework that RISE can use, look at the
g-adrt converter.  g-adrt takes a .g file containing bots and creates an
ADRT framework.
d12 1
a12 1
affect performance by almost doubling it.
d15 2
a16 2
geometry files you can feed to isst or rise please check the doc 
directory.
a18 29


Usage:
======
Method 1 - Manually Connecting Compute Nodes:
Step 1.
  isst_master /path/to/project.env

Step 2.
  isst_observer master.host.name

Step 3.
  isst_slave master.host.name

Step 4.
  repeat step 3 on all slave nodes.


Method 2 - Connecting to Slave Daemons:
Step 1.
  login to each compute node and run isst_slave& (background process).

Step 2.
  isst_master -l slaves.txt /path/to/project.env
  (slaves.txt contains each slave hostname per line).

Step 3.
  isst_observer master.host.name

@


1.5
log
@and with a flick of wrist and wiggle of nose, itink ivat isgone... at least for now, likely to be resurrected before next iteration from the ashes in a slightly different incarnation.
@
text
@d2 2
a3 2
Image Synthesis Engine (RISE).  These tools consist of (3) binaries: a
master, an observer, and a slave.  To generate a framework that RISE
@


1.4
log
@Renaming IGVT to IVAT instead (Interactive Vulnerability Analysis Tool)
@
text
@d1 5
a5 36
ADRT consists of 2 tools RISE (Realistic Image Synthesis Engine) and 
IVAT (Interactive Vulnerability Analysis Tool).  Both tools consist of 
(3) binaries, a master, an observer, and a slave.  To generate a framework
that RISE and IVAT can use then use the g-adrt converter.  g-adrt takes a
.g file containing bots and creates an ADRT framework.

Below is an example of how to launch IVAT from the command line:


Method 1 - Manually Connecting Compute Nodes
============================================
Step 1.
  ivat_master /path/to/project.env

Step 2.
  ivat_observer master.host.name

Step 3.
  ivat_slave master.host.name

Step 4.
  repeat step 3 on all slave nodes.


Method 2 - Connecting to Slave Daemons
============================================
Step 1.
  login to each compute node and run ivat_slave& (background process).

Step 2.
  ivat_master -l slaves.txt /path/to/project.env
  (slaves.txt contains each slave hostname per line).

Step 3.
  ivat_observer master.host.name

d16 1
a16 2
directory for help with RISE and IVAT.

@


1.3
log
@updated the NEWS and README
@
text
@d2 1
a2 1
ISST (Interactive Shotline Selection Tool).  Both tools consist of 
d4 1
a4 1
that RISE and ISST can use then use the g-adrt converter.  g-adrt takes a
d7 1
a7 1
Below is an example of how to launch ISST from the command line:
d13 1
a13 1
  isst_master /path/to/project.env
d16 1
a16 1
  isst_observer master.host.name
d19 1
a19 1
  isst_slave master.host.name
d28 1
a28 1
  login to each compute node and run isst_slave& (background process).
d31 1
a31 1
  isst_master -l slaves.txt /path/to/project.env
d35 1
a35 1
  isst_observer master.host.name
d46 2
a47 2
geometry files you can feed to isst or rise please check the doc 
directory for help with RISE and ISST.
@


1.2
log
@Started adding a little documentation.
@
text
@d2 7
a8 3
IGVT (Interactive Geometry Visualization Tool).  Both tools consist of 
(3) binaries, a master, an observer, and slave.  Below is an example of 
how to launch IGVT from the command line:
d13 1
a13 1
  igvt_master -p /path/to/project -g /path/to/project/geometry.file
d16 1
a16 1
  igvt_observer -H master.host.name
d19 1
a19 1
  igvt_slave -H master.host.name
d28 1
a28 1
  login to each compute node and run igvt_slave& (background process).
d31 2
a32 2
  igvt_master -p /path/to/project -g /path/to/project/geometry.file -l 
  slaves.txt (slaves.txt contains each slave hostname per line).
d35 1
a35 1
  igvt_observer -H master.host.name
d46 5
a50 2
geometry files you can feed to igvt or rise please check the doc 
directory for help with RISE and IGVT.
@


1.1
log
@Welcome ADRT
@
text
@d1 4
d6 4
a9 1
  For Mac users:
d11 2
a12 4
	ln -s /usr/bin/glibtoolize /usr/bin/libtoolize
	
STEP 1 (CONFIGURE CREATION):
  autoreconf -vis
d14 2
d17 2
a18 3
STEP 2 (MAKEFILE FLAGS):
  XEON or OPTERON:
  ./configure --enable-optim-xeon --prefix=/d/cluster/FreeBSD/5.2.1/usr/local
a19 2
  PPC:
  ./configure --enable-optim-ppc --prefix=/d/cluster/FreeBSD/5.2.1/usr/local
d21 4
d26 3
a28 2
STEP 3 (COMPILE):
  make -j5 
d30 2
d34 3
a36 1
Running
d38 2
a39 7
#igvt_master -p <proj folder> -g <geom file> -l <slave list file>

(project dr in eab1:~justin/humanim/ )

igvt_master -p <proj folder> -g <geom file>
igvt_slave -H <host>
igvt_observer -H <host>
d41 3
@

