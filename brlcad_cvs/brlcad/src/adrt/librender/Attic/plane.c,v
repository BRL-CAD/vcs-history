head	1.26;
access;
symbols
	rel-7-10-4:1.23
	STABLE:1.23.0.2
	rel-7-10-2:1.22
	rel-7-10-0:1.22
	rel-7-8-4:1.14
	rel-7-8-2:1.14
	rel-7-8-0:1.14
	trimnurbs-branch:1.14.0.2
	help:1.14
	temp_tag:1.14
	bobWinPort-20051223-freeze:1.9
	postmerge-20051223-bobWinPort:1.14
	premerge-20051223-bobWinPort:1.14
	rel-7-6-6:1.14
	rel-7-6-4:1.14
	rel-7-6-2:1.10
	rel-7-6-branch:1.10.0.2
	rel-7-6-0:1.10
	rel-7-4-2:1.4.2.1
	rel-7-4-branch:1.4.0.2
	bobWinPort:1.9.0.2
	rel-7-4-0:1.4;
locks; strict;
comment	@ * @;


1.26
date	2007.12.06.20.07.15;	author erikgreenwald;	state dead;
branches;
next	1.25;

1.25
date	2007.12.05.22.01.38;	author erikgreenwald;	state Exp;
branches;
next	1.24;

1.24
date	2007.11.29.21.55.29;	author erikgreenwald;	state Exp;
branches;
next	1.23;

1.23
date	2007.08.30.19.11.29;	author brlcad;	state Exp;
branches;
next	1.22;

1.22
date	2007.03.20.20.05.07;	author brlcad;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.08.06.49.18;	author brlcad;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.05.18.39.01;	author erikgreenwald;	state Exp;
branches;
next	1.19;

1.19
date	2007.02.02.19.46.34;	author erikgreenwald;	state Exp;
branches;
next	1.18;

1.18
date	2007.01.27.01.41.30;	author brlcad;	state Exp;
branches;
next	1.17;

1.17
date	2007.01.23.01.13.21;	author brlcad;	state Exp;
branches;
next	1.16;

1.16
date	2007.01.21.00.51.05;	author brlcad;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.18.22.17.57;	author erikgreenwald;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	1.13;

1.13
date	2005.09.21.16.02.42;	author twingy;	state Exp;
branches;
next	1.12;

1.12
date	2005.09.21.02.17.11;	author twingy;	state dead;
branches;
next	1.11;

1.11
date	2005.09.14.12.21.04;	author twingy;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.08.05.11.20;	author twingy;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2005.07.29.17.48.17;	author twingy;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.28.00.28.29;	author twingy;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.26.18.37.20;	author twingy;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.18.21.59.06;	author twingy;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.18.21.20.38;	author twingy;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.29.21.04.43;	author twingy;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.06.27.21.13.40;	author twingy;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.17.19.10.47;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.15.09.26;	author lbutler;	state Exp;
branches;
next	;

1.4.2.1
date	2005.08.16.21.03.46;	author brlcad;	state Exp;
branches;
next	;

1.10.2.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.26
log
@plane is now cut
@
text
@/*                         P L A N E . C
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file plane.c
 *
 *  Author -
 *      Justin L. Shumaker
 *
 */

#include "plane.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "libcommon/adrt_common.h"
#include "hit.h"

#define THICKNESS 0.02

void* render_plane_hit(tie_ray_t *ray, tie_id_t *id, tie_tri_t *tri, void *ptr);
void render_plane(tie_t *tie, tie_ray_t *ray, TIE_3 *pixel);


typedef struct render_plane_hit_s {
  tie_id_t id;
  common_mesh_t *mesh;
  tfloat plane[4];
  tfloat mod;
} render_plane_hit_t;


void render_plane_init(render_t *render, TIE_3 ray_pos, TIE_3 ray_dir) {
  render_plane_t *d;
  TIE_3 list[6], normal, up;
  tfloat plane[4];

  render->work = render_plane_work;
  render->free = render_plane_free;

  render->data = (render_plane_t *)malloc(sizeof(render_plane_t));
  if (!render->data) {
      perror("render->data");
      exit(1);
  }
  d = (render_plane_t *)render->data;

  d->ray_pos = ray_pos;
  d->ray_dir = ray_dir;

  tie_init(&d->tie, 2, TIE_KDTREE_FAST);

  /* Calculate the normal to be used for the plane */
  up.v[0] = 0;
  up.v[1] = 0;
  up.v[2] = 1;

  MATH_VEC_CROSS(normal, ray_dir, up);
  MATH_VEC_UNITIZE(normal);

  /* Construct the plane */
  d->plane[0] = normal.v[0];
  d->plane[1] = normal.v[1];
  d->plane[2] = normal.v[2];
  MATH_VEC_DOT(plane[3], normal, ray_pos); /* up is really new ray_pos */
  d->plane[3] = -plane[3];

  /* Triangle 1 */
  list[0].v[0] = ray_pos.v[0];
  list[0].v[1] = ray_pos.v[1];
  list[0].v[2] = ray_pos.v[2] - THICKNESS;

  list[1].v[0] = ray_pos.v[0] + 20*ray_dir.v[0];
  list[1].v[1] = ray_pos.v[1] + 20*ray_dir.v[1];
  list[1].v[2] = ray_pos.v[2] + 20*ray_dir.v[2] - THICKNESS;

  list[2].v[0] = ray_pos.v[0] + 20*ray_dir.v[0];
  list[2].v[1] = ray_pos.v[1] + 20*ray_dir.v[1];
  list[2].v[2] = ray_pos.v[2] + 20*ray_dir.v[2] + THICKNESS;

  /* Triangle 2 */
  list[3].v[0] = ray_pos.v[0];
  list[3].v[1] = ray_pos.v[1];
  list[3].v[2] = ray_pos.v[2] - THICKNESS;

  list[4].v[0] = ray_pos.v[0] + 20*ray_dir.v[0];
  list[4].v[1] = ray_pos.v[1] + 20*ray_dir.v[1];
  list[4].v[2] = ray_pos.v[2] + 20*ray_dir.v[2] + THICKNESS;

  list[5].v[0] = ray_pos.v[0];
  list[5].v[1] = ray_pos.v[1];
  list[5].v[2] = ray_pos.v[2] + THICKNESS;


  tie_push(&d->tie, list, 2, NULL, 0);
  tie_prep(&d->tie);
}


void render_plane_free(render_t *render) {
  render_plane_t *d;

  d = (render_plane_t *)render->data;
  tie_free(&d->tie);
  free(render->data);
}


static void* render_arrow_hit(tie_ray_t *ray, tie_id_t *id, tie_tri_t *tri, void *ptr) {
  return(tri);
}


void* render_plane_hit(tie_ray_t *ray, tie_id_t *id, tie_tri_t *tri, void *ptr) {
  render_plane_hit_t *hit = (render_plane_hit_t *)ptr;

  hit->id = *id;
  hit->mesh = ((common_triangle_t *)(tri->ptr))->mesh;
  return( hit );
}


void render_plane_work(render_t *render, tie_t *tie, tie_ray_t *ray, TIE_3 *pixel) {
  render_plane_t *rd;
  render_plane_hit_t hit;
  TIE_3 vec, color;
  tie_id_t id;
  tfloat t, angle, dot;


  rd = (render_plane_t *)render->data;

  /* Draw Ballistic Arrow - Blue */
  if(tie_work(&rd->tie, ray, &id, render_arrow_hit, NULL)) {
    pixel->v[0] = 0.0;
    pixel->v[1] = 0.0;
    pixel->v[2] = 1.0;
    return;
  }

  /*
  * I don't think this needs to be done for every pixel?
  * Flip plane normal to face us.
  */
  t = ray->pos.v[0]*rd->plane[0] + ray->pos.v[1]*rd->plane[1] + ray->pos.v[2]*rd->plane[2] + rd->plane[3];
  hit.mod = t < 0 ? 1 : -1;


  /*
  * Optimization:
  * First intersect this ray with the plane and fire the ray from there
  * Plane: Ax + By + Cz + D = 0
  * Ray = O + td
  * t = -(Pn · R0 + D) / (Pn · Rd)
  *
  */

  t = (rd->plane[0]*ray->pos.v[0] + rd->plane[1]*ray->pos.v[1] + rd->plane[2]*ray->pos.v[2] + rd->plane[3]) /
      (rd->plane[0]*ray->dir.v[0] + rd->plane[1]*ray->dir.v[1] + rd->plane[2]*ray->dir.v[2]);

  /* Ray never intersects plane */
  if(t > 0)
    return;

  ray->pos.v[0] += -t * ray->dir.v[0];
  ray->pos.v[1] += -t * ray->dir.v[1];
  ray->pos.v[2] += -t * ray->dir.v[2];

  hit.plane[0] = rd->plane[0];
  hit.plane[1] = rd->plane[1];
  hit.plane[2] = rd->plane[2];
  hit.plane[3] = rd->plane[3];

  /* Render Geometry */
  if(!tie_work(tie, ray, &id, render_plane_hit, &hit))
    return;


  /*
  * If the point after the splitting plane is an outhit, fill it in as if it were solid.
  * If the point after the splitting plane is an inhit, then just shade as usual.
  */

  MATH_VEC_DOT(dot, ray->dir, hit.id.norm);
  /* flip normal */
  dot = fabs(dot);


  if(hit.mesh->flags & (MESH_SELECT|MESH_HIT)) {
    color.v[0] = hit.mesh->flags & MESH_HIT ? 0.9 : 0.2;
    color.v[1] = 0.2;
    color.v[2] = hit.mesh->flags & MESH_SELECT ? 0.9 : 0.2;
  } else {
    /* Mix actual color with white 4:1, shade 50% darker */
#if 0
    MATH_VEC_SET(color, 1.0, 1.0, 1.0);
    MATH_VEC_MUL_SCALAR(color, color, 3.0);
    MATH_VEC_ADD(color, color, hit.mesh->prop->color);
    MATH_VEC_MUL_SCALAR(color, color, 0.125);
#else
    MATH_VEC_SET(color, 0.8, 0.8, 0.7);
#endif
  }

#if 0
  if(dot < 0) {
#endif
    /* Shade using inhit */
    MATH_VEC_MUL_SCALAR((*pixel), color, (dot*0.90));
#if 0
  } else {
    /* shade solid */
    MATH_VEC_SUB(vec, ray->pos, hit.id.pos);
    MATH_VEC_UNITIZE(vec);
    angle = vec.v[0]*hit.mod*-hit.plane[0] + vec.v[1]*-hit.mod*hit.plane[1] + vec.v[2]*-hit.mod*hit.plane[2];
    MATH_VEC_MUL_SCALAR((*pixel), color, (angle*0.90));
  }
#endif

  pixel->v[0] += 0.1;
  pixel->v[1] += 0.1;
  pixel->v[2] += 0.1;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.25
log
@include path shtuff
@
text
@@


1.24
log
@update the tie_init() calls with the new parm
@
text
@d31 1
a31 1
#include "adrt_common.h"
@


1.23
log
@TFLOAT changed to tfloat.  also quell a few warnings/bugs related to passing the wrong TIE_3 pointer type.
@
text
@d66 1
a66 1
  tie_init(&d->tie, 2);
@


1.22
log
@since adrt uses malloc, add checks on use for a null return value.  this probably would be a good reason to being associating with libbu.. (this fixes sf bug 1680679 - Check return codes everywhere; submitted by Markus Elfring (elfring))
@
text
@d43 2
a44 2
  TFLOAT plane[4];
  TFLOAT mod;
d51 1
a51 1
  TFLOAT plane[4];
d143 1
a143 1
  TFLOAT t, angle, dot;
@


1.21
log
@give adrt some distinctiveness in the header
@
text
@d57 4
@


1.20
log
@unmagic some numbers
@
text
@d2 1
a2 1
 * BRL-CAD
@


1.19
log
@finish changing all #defined symbols to uppercase...
@
text
@d200 2
a201 2
  if(hit.mesh->flags & 0x3) {
    color.v[0] = hit.mesh->flags & 0x1 ? 0.9 : 0.2;
d203 1
a203 1
    color.v[2] = hit.mesh->flags & 0x2 ? 0.9 : 0.2;
@


1.18
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d43 2
a44 2
  tfloat plane[4];
  tfloat mod;
d51 1
a51 1
  tfloat plane[4];
d139 1
a139 1
  tfloat t, angle, dot;
@


1.17
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a105 1

@


1.16
log
@standard header and footer cleanup
@
text
@d9 1
a9 1
 * as published by the Free Software Foundation.
@


1.15
log
@uppercase all #define symbols
@
text
@d1 26
d236 10
@


1.14
log
@trailing ws
@
text
@d8 1
a8 1
#define thickness 0.02
d43 2
a44 2
  math_vec_cross(normal, ray_dir, up);
  math_vec_unitize(normal);
d50 1
a50 1
  math_vec_dot(plane[3], normal, ray_pos); /* up is really new ray_pos */
d56 1
a56 1
  list[0].v[2] = ray_pos.v[2] - thickness;
d60 1
a60 1
  list[1].v[2] = ray_pos.v[2] + 20*ray_dir.v[2] - thickness;
d64 1
a64 1
  list[2].v[2] = ray_pos.v[2] + 20*ray_dir.v[2] + thickness;
d69 1
a69 1
  list[3].v[2] = ray_pos.v[2] - thickness;
d73 1
a73 1
  list[4].v[2] = ray_pos.v[2] + 20*ray_dir.v[2] + thickness;
d77 1
a77 1
  list[5].v[2] = ray_pos.v[2] + thickness;
d170 1
a170 1
  math_vec_dot(dot, ray->dir, hit.id.norm);
d182 4
a185 4
    math_vec_set(color, 1.0, 1.0, 1.0);
    math_vec_mul_scalar(color, color, 3.0);
    math_vec_add(color, color, hit.mesh->prop->color);
    math_vec_mul_scalar(color, color, 0.125);
d187 1
a187 1
    math_vec_set(color, 0.8, 0.8, 0.7);
d195 1
a195 1
    math_vec_mul_scalar((*pixel), color, (dot*0.90));
d199 2
a200 2
    math_vec_sub(vec, ray->pos, hit.id.pos);
    math_vec_unitize(vec);
d202 1
a202 1
    math_vec_mul_scalar((*pixel), color, (angle*0.90));
@


1.13
log
@libvis->librender
@
text
@d137 1
a137 1
  * First intersect this ray with the plane and fire the ray from there 
d141 1
a141 1
  * 
d173 1
a173 1
  
@


1.12
log
@removed
@
text
@@


1.11
log
@highlighting of selected components in plane view as well.
@
text
@@


1.10
log
@fixed a stack pop bug in the kd-tree cache loader.  engine is 1.1% faster.
@
text
@d175 4
a178 2
  if(hit.mesh->flags == 1) {
    math_vec_set(color, 0.9, 0.2, 0.2);
@


1.10.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d137 1
a137 1
  * First intersect this ray with the plane and fire the ray from there
d141 1
a141 1
  *
d173 1
d175 2
a176 5

  if(hit.mesh->flags & 0x3) {
    color.v[0] = hit.mesh->flags & 0x1 ? 0.9 : 0.2;
    color.v[1] = 0.2;
    color.v[2] = hit.mesh->flags & 0x2 ? 0.9 : 0.2;
@


1.9
log
@* Adjusted colors for plane and spall.
* Fixed the axis aligned geometry intersections.
* Added in_hit to observer overlay
@
text
@d179 1
d184 3
@


1.8
log
@* Overall load time for all 8 nodes during startup is 25% faster.
* File size of adrt mesh is now 33% smaller.  It uses shortst when trinum
  of the mesh is under 64K triangles.
* Prep data to slaves is now multi-threaded (all slaves get data from
  master at the same time, heavy network load).
@
text
@d178 3
a180 3
    /* Mix actual color with gray 8:1 */
    math_vec_set(color, 0.8, 0.8, 0.8);
    math_vec_mul_scalar(color, color, 7.0);
@


1.7
log
@adjusted colors for render methods.
@
text
@d87 4
@


1.6
log
@Faded coloring a bit more.
@
text
@d115 1
a115 1
  /* Draw Ballistic Arrow */
d172 1
a172 1
    math_vec_set(color, 0.9, 0.3, 0.3);
d174 3
a176 2
    math_vec_set(color, 0.8, 0.8, 0.7);
    math_vec_mul_scalar(color, color, 3.0);
d178 1
a178 1
    math_vec_mul_scalar(color, color, 0.25);
@


1.5
log
@plane view and spall view now use partial component color to better visualize internals.
@
text
@d175 3
a177 2
    math_vec_add(color, color, (*pixel));
    math_vec_mul_scalar(color, color, 0.5);
@


1.4
log
@Spall cone emits from entry point of geometry now.
@
text
@d172 1
a172 3
    color.v[0] = 0.9;
    color.v[1] = 0.3;
    color.v[2] = 0.3;
d174 3
a176 3
    color.v[0] = 0.8;
    color.v[1] = 0.8;
    color.v[2] = 0.7;
@


1.4.2.1
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@a86 4
  render_plane_t *d;

  d = (render_plane_t *)render->data;
  tie_free(&d->tie);
d115 1
a115 1
  /* Draw Ballistic Arrow - Blue */
d172 3
a174 1
    math_vec_set(color, 0.9, 0.2, 0.2);
d176 3
a178 5
    /* Mix actual color with white 4:1, shade 50% darker */
    math_vec_set(color, 1.0, 1.0, 1.0);
    math_vec_mul_scalar(color, color, 3.0);
    math_vec_add(color, color, hit.mesh->prop->color);
    math_vec_mul_scalar(color, color, 0.125);
@


1.3
log
@Adding s pawl cone render method.
@
text
@d117 1
a117 1
    pixel->v[0] = 1.0;
d119 1
a119 1
    pixel->v[2] = 0.0;
d172 1
a172 1
    color.v[0] = 0.3;
d174 1
a174 1
    color.v[2] = 0.9;
@


1.2
log
@hoisting build system and making it play nice with brlcad
@
text
@d91 1
a91 1
void* render_arrow_hit(tie_ray_t *ray, tie_id_t *id, tie_tri_t *tri, void *ptr) {
@


1.1
log
@Welcome ADRT
@
text
@d5 1
a5 1
#include "common.h"
@

