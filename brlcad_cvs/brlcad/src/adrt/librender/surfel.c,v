head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2007.12.05.21.24.13;	author erikgreenwald;	state Exp;
branches;
next	;


desc
@@


1.1
log
@merge in updated librender
@
text
@/*                        S U R F E L . c
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file surfel.c
 *
 *  Author -
 *      Justin L. Shumaker
 *
 */

#include "component.h"
#include "cut.h"
#include "depth.h"
#include "flat.h"
#include "flos.h"
#include "surfel.h"
#include "hit.h"
#include "adrt_struct.h"
#include <stdio.h>
#include <stdlib.h>


void render_surfel_init(render_t *render, uint32_t num, render_surfel_pt_t *list) {
  render_surfel_t *d;

  render->work = render_surfel_work;
  render->free = render_surfel_free;
  render->data = (render_surfel_t *)malloc(sizeof(render_surfel_t));
  d = (render_surfel_t *)render->data;
  d->list = (render_surfel_pt_t *)malloc(num * sizeof(render_surfel_pt_t));
  d->num = num;
  d->list = list;
}


void render_surfel_free(render_t *render) {
  render_surfel_t *d;

  d = (render_surfel_t *)render->data;
  free(d->list);
  free(render->data);
}


void render_surfel_work(render_t *render, tie_t *tie, tie_ray_t *ray, TIE_3 *pixel) {
  render_surfel_t *d;
  tie_id_t id;
  adrt_mesh_t *mesh;
  uint32_t i;
  tfloat dist_sq;

  d = (render_surfel_t *)render->data;

  if((mesh = (adrt_mesh_t *)tie_work(tie, ray, &id, render_hit, NULL))) {
    for(i = 0; i < d->num; i++) {
      dist_sq = (d->list[i].pos.v[0]-id.pos.v[0]) * (d->list[i].pos.v[0]-id.pos.v[0]) +
                (d->list[i].pos.v[1]-id.pos.v[1]) * (d->list[i].pos.v[1]-id.pos.v[1]) +
                (d->list[i].pos.v[2]-id.pos.v[2]) * (d->list[i].pos.v[2]-id.pos.v[2]);

      if(dist_sq < d->list[i].radius*d->list[i].radius) {
        *pixel = d->list[i].color;
        break;
      }
    }

    MATH_VEC_SET((*pixel), 0.8, 0.8, 0.8);
  }
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@
