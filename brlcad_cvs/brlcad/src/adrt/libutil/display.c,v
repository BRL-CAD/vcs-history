head	1.30;
access;
symbols
	rel-7-10-4:1.26
	STABLE:1.26.0.2
	rel-7-10-2:1.26
	rel-7-10-0:1.26
	rel-7-8-4:1.20
	rel-7-8-2:1.20
	rel-7-8-0:1.20
	trimnurbs-branch:1.20.0.2
	help:1.20
	temp_tag:1.19
	bobWinPort-20051223-freeze:1.14
	postmerge-20051223-bobWinPort:1.19
	premerge-20051223-bobWinPort:1.19
	rel-7-6-6:1.19
	rel-7-6-4:1.19
	rel-7-6-2:1.14
	rel-7-6-branch:1.14.0.6
	rel-7-6-0:1.14
	rel-7-4-2:1.14
	rel-7-4-branch:1.14.0.4
	bobWinPort:1.14.0.2
	rel-7-4-0:1.14;
locks; strict;
comment	@ * @;


1.30
date	2007.12.05.17.18.16;	author erikgreenwald;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.14.22.15.54;	author brlcad;	state Exp;
branches;
next	1.28;

1.28
date	2007.10.14.09.08.19;	author brlcad;	state Exp;
branches;
next	1.27;

1.27
date	2007.10.14.08.01.45;	author brlcad;	state Exp;
branches;
next	1.26;

1.26
date	2007.03.20.20.05.08;	author brlcad;	state Exp;
branches;
next	1.25;

1.25
date	2007.02.08.06.49.19;	author brlcad;	state Exp;
branches;
next	1.24;

1.24
date	2007.01.27.01.41.31;	author brlcad;	state Exp;
branches;
next	1.23;

1.23
date	2007.01.23.01.13.22;	author brlcad;	state Exp;
branches;
next	1.22;

1.22
date	2007.01.21.00.51.05;	author brlcad;	state Exp;
branches;
next	1.21;

1.21
date	2007.01.20.14.36.41;	author brlcad;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.18.06.46.12;	author brlcad;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.30.21.58.57;	author brlcad;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.14.12.04.31;	author twingy;	state Exp;
branches;
next	1.17;

1.17
date	2005.09.14.07.28.36;	author twingy;	state Exp;
branches;
next	1.16;

1.16
date	2005.09.14.05.26.46;	author twingy;	state Exp;
branches;
next	1.15;

1.15
date	2005.09.12.22.39.12;	author twingy;	state Exp;
branches;
next	1.14;

1.14
date	2005.06.25.03.13.28;	author twingy;	state Exp;
branches
	1.14.6.1;
next	1.13;

1.13
date	2005.06.23.21.51.26;	author twingy;	state Exp;
branches;
next	1.12;

1.12
date	2005.06.23.20.00.54;	author twingy;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.23.05.22.17;	author twingy;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.23.04.55.51;	author twingy;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.23.00.43.15;	author twingy;	state Exp;
branches;
next	1.8;

1.8
date	2005.06.22.05.19.35;	author twingy;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.22.02.36.26;	author twingy;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.21.22.16.58;	author twingy;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.21.05.36.29;	author twingy;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.21.02.37.17;	author twingy;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.20.21.45.53;	author twingy;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.18.01.30.04;	author twingy;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.15.09.28;	author lbutler;	state Exp;
branches;
next	;

1.14.6.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.30
log
@workaround for lack of SDL
@
text
@/*                     D I S P L A Y . C
 * BRL-CAD / ADRT
 *
 * Copyright (c) 2002-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file display.c
 *
 *  Comments -
 *      Utilities Library - Display (SDL Stuff)
 *
 *  Author -
 *      Justin L. Shumaker
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 * $Id: display.c,v 1.29 2007/10/14 22:15:54 brlcad Exp $
 */

#include "display.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "font.h"

#define UTIL_DISPLAY_FONT_WIDTH 8
#define	UTIL_DISPLAY_FONT_HEIGHT 15

#ifndef HAVE_SDL

void util_display_init(int w, int h){ fprintf(stderr, "No SDL support!\n"); exit(-1); }
void util_display_free(void){}
void util_display_draw(void *frame){}
void util_display_text(char *text, int x, int y, int jh, int jv){}
void util_display_flush(void){}
void util_display_cross(void){}
void util_display_flip(void){}
void util_display_editor(char **content_buffer, int *content_lines, char **console_buffer, int *console_lines, void (*fcb_process)(char *content, char *response)){}

#else

SDL_Surface *util_display_screen;
SDL_Surface *util_display_buffer;
SDL_Surface *util_display_font;
SDL_Rect util_display_rect;

int util_display_screen_w;
int util_display_screen_h;


void util_display_init(int w, int h) {
  util_display_screen_w = w;
  util_display_screen_h = h;


  /* Initialize the SDL library */
  if(!SDL_WasInit(SDL_INIT_VIDEO))
    if(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_NOPARACHUTE) < 0) {
      fprintf(stderr, "Couldn't initialize SDL: %s\n", SDL_GetError());
      exit(1);
    }


#if 0
{
SDL_Rect **modes;
int i;

/* Get available fullscreen/hardware modes */
modes=SDL_ListModes(NULL, SDL_HWSURFACE | SDL_DOUBLEBUF);

/* Check is there are any modes available */
if(modes == (SDL_Rect **)0){
  printf("No modes available!\n");
  exit(-1);
}


/* Check if our resolution is restricted */
if(modes == (SDL_Rect **)-1){
  printf("All resolutions available.\n");
} else{
  /* Print valid modes */
  printf("Available Modes\n");
  for(i=0;modes[i];++i)
    printf("  %d x %d\n", modes[i]->w, modes[i]->h);
}
}
#endif


  /*  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_HWSURFACE | SDL_DOUBLEBUF); */
  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_SWSURFACE);


  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_HWSURFACE | SDL_DOUBLEBUF);
  /*  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_SWSURFACE); */

  util_display_buffer = SDL_CreateRGBSurface(SDL_HWSURFACE, util_display_screen_w, util_display_screen_h, 24,
#if SDL_BYTEORDER == SDL_LIL_ENDIAN
					     0x000000ff, 0x0000ff00, 0x00ff0000,
#else
					     0x00ff0000, 0x0000ff00, 0x000000ff,
#endif
					     0x00000000);

  util_display_rect.x = 0;
  util_display_rect.y = 0;
  util_display_rect.w = util_display_screen_w;
  util_display_rect.h = util_display_screen_h;

  if(util_display_screen == NULL) {
    fprintf(stderr, "Couldn't set video mode: %s\n", SDL_GetError());
    exit(1);
  }

  util_display_font = SDL_CreateRGBSurface(SDL_SWSURFACE, util_font.width, util_font.height, 32,
#if SDL_BYTEORDER == SDL_LIL_ENDIAN
					     0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000
#else
					     0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff
#endif
					   );

/*  printf("util_font width: %d, %d\n", util_font.width, util_font.height); */
  memcpy(util_display_font->pixels, util_font.pixel_data, util_font.width * util_font.height * 4);

  SDL_EnableUNICODE(1);
  SDL_EnableKeyRepeat(200, 33);

  /* Clean up on exit */
  atexit(SDL_Quit);
}


void util_display_free() {
  SDL_FreeSurface(util_display_screen);
  SDL_FreeSurface(util_display_buffer);
  SDL_FreeSurface(util_display_font);
}


void util_display_draw(void *frame) {
/*  memcpy(util_display_buffer->pixels, frame, util_display_screen_w * util_display_screen_h * 3); */
  SDL_BlitSurface(util_display_buffer, &util_display_rect, util_display_screen, &util_display_rect);
}


void util_display_text(char *text, int x, int y, int jh, int jv) {
  SDL_Rect font, dest;
  int i, loc_x, loc_y;

  if(jh == UTIL_JUSTIFY_LEFT) {
    loc_x = 0 + x*UTIL_DISPLAY_FONT_WIDTH;
  } else {
    loc_x = util_display_screen_w - x - UTIL_DISPLAY_FONT_WIDTH*strlen(text);
  }

  if(jv == UTIL_JUSTIFY_TOP) {
    loc_y = 0 + y*UTIL_DISPLAY_FONT_HEIGHT;
  } else {
    loc_y = util_display_screen_h - (y+1)*UTIL_DISPLAY_FONT_HEIGHT;
  }

  for(i = 0; i < strlen(text); i++) {
    font.x = UTIL_DISPLAY_FONT_WIDTH*text[i];
    font.y = 0;
    font.w = UTIL_DISPLAY_FONT_WIDTH;
    font.h = UTIL_DISPLAY_FONT_HEIGHT;

    dest.x = loc_x + i*UTIL_DISPLAY_FONT_WIDTH;
    dest.y = loc_y;
    dest.w = UTIL_DISPLAY_FONT_WIDTH;
    dest.h = UTIL_DISPLAY_FONT_HEIGHT;

    SDL_BlitSurface(util_display_font, &font, util_display_screen, &dest);
  }
}

void util_display_flush() {
  memset(util_display_screen->pixels, 0, 4 * util_display_screen_w * util_display_screen_h);
}


/* Draw 32x32 cross-hairs */
void util_display_cross() {
  int i, n, ind;

  /* Horizontal */
  for(n = -1; n <= 1; n++) {
    ind = 4*(util_display_screen_w * (util_display_screen_h / 2) + (util_display_screen_w - 32) / 2 + n*util_display_screen_w);
    for(i = 0; i < 33; i++) {
      ((unsigned char *)util_display_screen->pixels)[ind+4*i+0] = 255 - ((unsigned char *)util_display_screen->pixels)[ind+4*i+0];
      ((unsigned char *)util_display_screen->pixels)[ind+4*i+1] = 255 - ((unsigned char *)util_display_screen->pixels)[ind+4*i+1];
      ((unsigned char *)util_display_screen->pixels)[ind+4*i+2] = 255 - ((unsigned char *)util_display_screen->pixels)[ind+4*i+2];
      ((unsigned char *)util_display_screen->pixels)[ind+4*i+3] = 0;
    }
  }

  /* Vertical */
  for(n = -1; n <= 1; n++) {
    ind = 4*(util_display_screen_w * ((util_display_screen_h - 32) / 2) + (util_display_screen_w / 2) + n);
    for(i = 0; i < 33; i++) {
      ((unsigned char *)util_display_screen->pixels)[ind+4*i*util_display_screen_w+0] = 255 - ((unsigned char *)util_display_screen->pixels)[ind+4*i+0];
      ((unsigned char *)util_display_screen->pixels)[ind+4*i*util_display_screen_w+1] = 255 - ((unsigned char *)util_display_screen->pixels)[ind+4*i+1];
      ((unsigned char *)util_display_screen->pixels)[ind+4*i*util_display_screen_w+2] = 255 - ((unsigned char *)util_display_screen->pixels)[ind+4*i+2];
      ((unsigned char *)util_display_screen->pixels)[ind+4*i*util_display_screen_w+3] = 0;
    }
  }
}


void util_display_flip() {
  SDL_Flip(util_display_screen);
}


void util_display_editor(char **content_buffer, int *content_lines, char **console_buffer, int *console_lines, void (*fcb_process)(char *content, char *response)) {
  SDL_Event event;
  SDL_Rect rect;
  int i, h_ind, v_ind, console_y;
  char paste[80];


  h_ind = 0;
  v_ind = 0;
  paste[0] = 0;
  console_y = (2 * (util_display_screen_h / UTIL_DISPLAY_FONT_HEIGHT)) / 3 + 1;

  /* Keyboard handling */
  while(SDL_WaitEvent(&event) >= 0) {
    /* Draw Content Window Blue */
    rect.x = 0;
    rect.y = 0;
    rect.w = util_display_screen_w;
    rect.h = util_display_screen_h;
    SDL_FillRect(util_display_screen, &rect, 0xff000040);

    /* Cursor */
    rect.x = UTIL_DISPLAY_FONT_WIDTH*(h_ind + 1); /* +1 for '>' */
    rect.y = UTIL_DISPLAY_FONT_HEIGHT*(v_ind + 1);
    rect.w = UTIL_DISPLAY_FONT_WIDTH;
    rect.h = UTIL_DISPLAY_FONT_HEIGHT;
    SDL_FillRect(util_display_screen, &rect, 0xffffffff);

    /* Content */
    util_display_text("[Content]", 0, 0, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_TOP);
    for(i = 0; i <= *content_lines; i++)
      util_display_text(content_buffer[i], 1, i + 1, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_TOP);

    /* Console */
    util_display_text("[Console]", 0, console_y, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_TOP);
    for(i = 0; i < *console_lines; i++)
      util_display_text(console_buffer[i], 1, i + console_y + 1, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_TOP);

    SDL_Flip(util_display_screen);

    switch(event.type) {
      case SDL_KEYDOWN:
	switch(event.key.keysym.sym) {
	  case SDLK_BACKQUOTE:
	    return;
	    break;

	  case SDLK_HOME:
	    h_ind = 0;
	    break;

	  case SDLK_END:
	    h_ind = strlen(content_buffer[v_ind]);
	    break;

	  case SDLK_PAGEUP:
	    v_ind = 0;
	    break;

	  case SDLK_PAGEDOWN:
	    v_ind = *content_lines;
	    break;

	  case SDLK_LEFT:
	    if(h_ind)
	      h_ind--;
	    break;

	  case SDLK_RIGHT:
	    if(h_ind < strlen(content_buffer[v_ind]))
	      h_ind++;
	    break;

	  case SDLK_DOWN:
	    if(v_ind < *content_lines)
	      v_ind++;

	    if(h_ind > strlen(content_buffer[v_ind]))
	      h_ind = strlen(content_buffer[v_ind]);
	    break;

	  case SDLK_UP:
	    if(v_ind)
	      v_ind--;

	    if(h_ind > strlen(content_buffer[v_ind]))
	      h_ind = strlen(content_buffer[v_ind]);
	    break;

	  case SDLK_BACKSPACE:
	    if(h_ind) {
	      for(i = h_ind-1; i < strlen(content_buffer[v_ind]); i++)
		content_buffer[v_ind][i] = content_buffer[v_ind][i+1];
	      h_ind--;
	    }
	    break;

	  case SDLK_DELETE:
	    for(i = h_ind; i < strlen(content_buffer[v_ind]); i++)
	      content_buffer[v_ind][i] = content_buffer[v_ind][i+1];
	    break;

	  case SDLK_RETURN:
	    {
	      h_ind = 0;
	      if(v_ind == *content_lines) {
		(*content_lines)++;
		content_buffer[*content_lines][0] = 0;
	      }
	      v_ind++;
	    }
	    break;

	  default:
	    /* First check for any special commands */
	    if(event.key.keysym.mod & KMOD_CTRL) {
	      switch(event.key.keysym.sym) {
		case SDLK_p: /* process code */
		  {
		    char *code, response[1024];
		    int n;
		    int size = (*content_lines+1) * 80;

		    code = (char *)malloc(size);
		    if (!code) {
			perror("code");
			exit(1);
		    }

		    code[0] = 0;
		    for(i = 0; i <= *content_lines; i++) {
			snprintf(code, size, "%s\n", content_buffer[i]);
		    }
		    fcb_process(code, response);

		    i = 0;
		    n = 0;
		    while(i < strlen(response)) {
		      console_buffer[*console_lines][n] = response[i];
		      console_buffer[*console_lines][n+1] = 0;
		      n++;
		      if(response[i] == '\n') {
			(*console_lines)++;
			n = 0;
		      }
		      i++;
		    }

		    free(code);
		  }
		  break;

		case SDLK_l: /* clear buffers */
		  content_buffer[0][0] = 0;
		  console_buffer[0][0] = 0;
		  (*content_lines) = 0;
		  (*console_lines) = 0;
		  h_ind = 0;
		  v_ind = 0;
		  break;

		case SDLK_x: /* cut */
		  strncpy(paste, content_buffer[v_ind], 80);
		  for(i = v_ind; i < *content_lines; i++)
		    strncpy(content_buffer[i], content_buffer[i+1], 80);
		  if(*content_lines) {
		    (*content_lines)--;
		  } else {
		    content_buffer[0][0] = 0;
		  }
		  h_ind = 0;
		  break;

		case SDLK_v: /* paste */
		  for(i = *content_lines; i >= v_ind; i--)
		    strncpy(content_buffer[i+1], content_buffer[i], 80);
		  strncpy(content_buffer[v_ind], paste, 80);
		  (*content_lines)++;
		  h_ind = 0;
		  break;

	      }
	    } else {
	      if(h_ind < 80)
		if(event.key.keysym.unicode & 0x7F) {
		  for(i = strlen(content_buffer[v_ind]); i >= h_ind; i--)
		    content_buffer[v_ind][i+1] = content_buffer[v_ind][i];
		  content_buffer[v_ind][h_ind++] = event.key.keysym.unicode & 0x7F;
		}
	    }
	    break;
	}
	break;

      default:
	break;
    }
  }
}

#endif

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.29
log
@more level 4 flawfinder issues.  mostly string length clampages.
@
text
@d32 1
a32 1
 * $Id: display.c,v 1.28 2007/10/14 09:08:19 brlcad Exp $
d36 1
d44 12
d433 2
@


1.28
log
@more taking care of a slew of level 4 flawfinder issues related to adding length parameters to string and i/o functions
@
text
@d32 1
a32 1
 * $Id: display.c,v 1.27 2007/10/14 08:01:45 brlcad Exp $
d384 1
a384 1
		    strcpy(content_buffer[i], content_buffer[i+1]);
d395 1
a395 1
		    strcpy(content_buffer[i+1], content_buffer[i]);
@


1.27
log
@take care of a slew of level 4 flawfinder issues related to adding length parameters to string and i/o functions
@
text
@d32 1
a32 1
 * $Id: display.c,v 1.26 2007/03/20 20:05:08 brlcad Exp $
d382 1
a382 1
		  strcpy(paste, content_buffer[v_ind]);
d396 1
a396 1
		  strcpy(content_buffer[v_ind], paste);
@


1.26
log
@since adrt uses malloc, add checks on use for a null return value.  this probably would be a good reason to being associating with libbu.. (this fixes sf bug 1680679 - Check return codes everywhere; submitted by Markus Elfring (elfring))
@
text
@d32 1
a32 1
 * $Id: display.c,v 1.25 2007/02/08 06:49:19 brlcad Exp $
d341 1
d343 1
a343 1
		    code = (char *)malloc((*content_lines+1) * 80);
d351 1
a351 2
		      strcat(code, content_buffer[i]);
		      strcat(code, "\n");
@


1.25
log
@give adrt some distinctiveness in the header
@
text
@d32 1
a32 1
 * $Id: display.c,v 1.24 2007/01/27 01:41:31 brlcad Exp $
d103 1
a103 1
					     0x000000ff, 0x0000ff00, 0x00ff0000, 0x00000000);
d105 1
a105 1
					     0x00ff0000, 0x0000ff00, 0x000000ff, 0x00000000);
d107 1
a107 11


#if 0
{
  const SDL_VideoInfo *foo;

  foo = SDL_GetVideoInfo();
  printf("hw: %d %d %d %d\n", foo->hw_available, foo->blit_hw, foo->blit_hw_CC, foo->blit_hw_A);
}
#endif

d121 1
a121 1
					     0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
d123 1
a123 1
					     0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
d125 1
d343 4
@


1.24
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d2 1
a2 1
 * BRL-CAD
d32 1
a32 1
 * $Id: display.c,v 1.23 2007/01/23 01:13:22 brlcad Exp $
@


1.23
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d32 1
a32 1
 * $Id: display.c,v 1.22 2007/01/21 00:51:05 brlcad Exp $
d103 1
a103 1
                                             0x000000ff, 0x0000ff00, 0x00ff0000, 0x00000000);
d105 1
a105 1
                                             0x00ff0000, 0x0000ff00, 0x000000ff, 0x00000000);
d131 1
a131 1
                                             0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
d133 1
a133 1
                                             0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
d271 147
a417 147
        switch(event.key.keysym.sym) {
          case SDLK_BACKQUOTE:
            return;
            break;

          case SDLK_HOME:
            h_ind = 0;
            break;

          case SDLK_END:
            h_ind = strlen(content_buffer[v_ind]);
            break;

          case SDLK_PAGEUP:
            v_ind = 0;
            break;

          case SDLK_PAGEDOWN:
            v_ind = *content_lines;
            break;

          case SDLK_LEFT:
            if(h_ind)
              h_ind--;
            break;

          case SDLK_RIGHT:
            if(h_ind < strlen(content_buffer[v_ind]))
              h_ind++;
            break;

          case SDLK_DOWN:
            if(v_ind < *content_lines)
              v_ind++;

            if(h_ind > strlen(content_buffer[v_ind]))
              h_ind = strlen(content_buffer[v_ind]);
            break;

          case SDLK_UP:
            if(v_ind)
              v_ind--;

            if(h_ind > strlen(content_buffer[v_ind]))
              h_ind = strlen(content_buffer[v_ind]);
            break;

          case SDLK_BACKSPACE:
            if(h_ind) {
              for(i = h_ind-1; i < strlen(content_buffer[v_ind]); i++)
                content_buffer[v_ind][i] = content_buffer[v_ind][i+1];
              h_ind--;
            }
            break;

          case SDLK_DELETE:
            for(i = h_ind; i < strlen(content_buffer[v_ind]); i++)
              content_buffer[v_ind][i] = content_buffer[v_ind][i+1];
            break;

          case SDLK_RETURN:
            {
              h_ind = 0;
              if(v_ind == *content_lines) {
                (*content_lines)++;
                content_buffer[*content_lines][0] = 0;
              }
              v_ind++;
            }
            break;

          default:
            /* First check for any special commands */
            if(event.key.keysym.mod & KMOD_CTRL) {
              switch(event.key.keysym.sym) {
                case SDLK_p: /* process code */
                  {
                    char *code, response[1024];
                    int n;

                    code = (char *)malloc((*content_lines+1) * 80);

                    code[0] = 0;
                    for(i = 0; i <= *content_lines; i++) {
                      strcat(code, content_buffer[i]);
                      strcat(code, "\n");
                    }
                    fcb_process(code, response);

                    i = 0;
                    n = 0;
                    while(i < strlen(response)) {
                      console_buffer[*console_lines][n] = response[i];
                      console_buffer[*console_lines][n+1] = 0;
                      n++;
                      if(response[i] == '\n') {
                        (*console_lines)++;
                        n = 0;
                      }
                      i++;
                    }

                    free(code);
                  }
                  break;

                case SDLK_l: /* clear buffers */
                  content_buffer[0][0] = 0;
                  console_buffer[0][0] = 0;
                  (*content_lines) = 0;
                  (*console_lines) = 0;
                  h_ind = 0;
                  v_ind = 0;
                  break;

                case SDLK_x: /* cut */
                  strcpy(paste, content_buffer[v_ind]);
                  for(i = v_ind; i < *content_lines; i++)
                    strcpy(content_buffer[i], content_buffer[i+1]);
                  if(*content_lines) {
                    (*content_lines)--;
                  } else {
                    content_buffer[0][0] = 0;
                  }
                  h_ind = 0;
                  break;

                case SDLK_v: /* paste */
                  for(i = *content_lines; i >= v_ind; i--)
                    strcpy(content_buffer[i+1], content_buffer[i]);
                  strcpy(content_buffer[v_ind], paste);
                  (*content_lines)++;
                  h_ind = 0;
                  break;

              }
            } else {
              if(h_ind < 80)
                if(event.key.keysym.unicode & 0x7F) {
                  for(i = strlen(content_buffer[v_ind]); i >= h_ind; i--)
                    content_buffer[v_ind][i+1] = content_buffer[v_ind][i];
                  content_buffer[v_ind][h_ind++] = event.key.keysym.unicode & 0x7F;
                }
            }
            break;
        }
        break;
d420 1
a420 1
        break;
@


1.22
log
@standard header and footer cleanup
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d32 1
a32 1
 * $Id: display.c,v 1.21 2007/01/20 14:36:41 brlcad Exp $
@


1.21
log
@update copyright to 2007
@
text
@a1 3
 *
 * @@file display.c
 *
d20 2
d33 1
a33 1
 * $Id: display.c,v 1.20 2006/01/18 06:46:12 brlcad Exp $
d425 10
@


1.20
log
@update copyright to 2006
@
text
@d7 1
a7 1
 * Copyright (c) 2002-2006 United States Government as represented by
d34 1
a34 1
 * $Id: display.c,v 1.19 2005/10/30 21:58:57 brlcad Exp $
@


1.19
log
@remove C++-style // comments as there's no assumption of c99 compiler compliance yet, only c89 (mostly aix compiler though other old compilers too)
@
text
@d7 1
a7 1
 * Copyright (C) 2002-2005 United States Government as represented by
d34 1
a34 1
 * $Id: display.c,v 1.18 2005/09/14 12:04:31 twingy Exp $
@


1.18
log
@256 char len string bug in render_util.c
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.17 2005/09/14 07:28:36 twingy Exp $
d96 1
a96 1
//  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_HWSURFACE | SDL_DOUBLEBUF);
d101 1
a101 1
//  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_SWSURFACE);
d157 1
a157 1
//  memcpy(util_display_buffer->pixels, frame, util_display_screen_w * util_display_screen_h * 3);
@


1.17
log
@some friendly messages.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.16 2005/09/14 05:26:46 twingy Exp $
a99 25
{
SDL_Rect **modes;
int i;

/* Get available fullscreen/hardware modes */
modes=SDL_ListModes(NULL, SDL_HWSURFACE | SDL_DOUBLEBUF);

/* Check is there are any modes available */
if(modes == (SDL_Rect **)0){
  printf("No modes available!\n");
  exit(-1);
}

/* Check if our resolution is restricted */
if(modes == (SDL_Rect **)-1){
  printf("All resolutions available.\n");
} else{
  /* Print valid modes */
  printf("Available Modes\n");
  for(i=0;modes[i];++i)
    printf("  %d x %d\n", modes[i]->w, modes[i]->h);
}
}


@


1.16
log
@*** empty log message ***
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.15 2005/09/12 22:39:12 twingy Exp $
a59 2


d68 32
d135 2
d143 2
@


1.15
log
@screen 2x magnification for low res contexts (F1 F2).
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.14 2005/06/25 03:13:28 twingy Exp $
d59 3
a68 2
//  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_SWSURFACE | SDL_DOUBLEBUF);
  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_SWSURFACE);
d70 29
a98 1
  util_display_buffer = SDL_CreateRGBSurface(SDL_SWSURFACE, util_display_screen_w, util_display_screen_h, 24,
d105 7
d133 1
a133 1
  SDL_EnableKeyRepeat(100, 150);
d148 1
a148 1
  memcpy(util_display_buffer->pixels, frame, util_display_screen_w * util_display_screen_h * 3);
@


1.14
log
@Minimal support to get rise_observer working.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.13 2005/06/23 21:51:26 twingy Exp $
d66 1
@


1.14.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d34 1
a34 1
 * $Id$
a58 1

a65 30

#if 0
{
SDL_Rect **modes;
int i;

/* Get available fullscreen/hardware modes */
modes=SDL_ListModes(NULL, SDL_HWSURFACE | SDL_DOUBLEBUF);

/* Check is there are any modes available */
if(modes == (SDL_Rect **)0){
  printf("No modes available!\n");
  exit(-1);
}


/* Check if our resolution is restricted */
if(modes == (SDL_Rect **)-1){
  printf("All resolutions available.\n");
} else{
  /* Print valid modes */
  printf("Available Modes\n");
  for(i=0;modes[i];++i)
    printf("  %d x %d\n", modes[i]->w, modes[i]->h);
}
}
#endif


  /*  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_HWSURFACE | SDL_DOUBLEBUF); */
d68 1
a68 5

  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_HWSURFACE | SDL_DOUBLEBUF);
  /*  util_display_screen = SDL_SetVideoMode(util_display_screen_w, util_display_screen_h, 32, SDL_SWSURFACE); */

  util_display_buffer = SDL_CreateRGBSurface(SDL_HWSURFACE, util_display_screen_w, util_display_screen_h, 24,
a74 11

#if 0
{
  const SDL_VideoInfo *foo;

  foo = SDL_GetVideoInfo();
  printf("hw: %d %d %d %d\n", foo->hw_available, foo->blit_hw, foo->blit_hw_CC, foo->blit_hw_A);
}
#endif


d96 1
a96 1
  SDL_EnableKeyRepeat(200, 33);
d111 1
a111 1
/*  memcpy(util_display_buffer->pixels, frame, util_display_screen_w * util_display_screen_h * 3); */
@


1.13
log
@Camera position, azimuth, and elevation accessible from python now.
Added cut and paste to editor, 85% done.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.12 2005/06/23 20:00:54 twingy Exp $
d96 1
@


1.12
log
@Several minor additional improvements to the editor window, 80% done.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.11 2005/06/23 05:22:17 twingy Exp $
d188 2
a189 1
  char line[80];
d193 1
d300 14
a313 13
              if(event.key.keysym.sym == 'p') {
                /* process code */
                char *code, response[1024];
                int n;

                code = (char *)malloc((*content_lines+1) * 80);

                code[0] = 0;
                for(i = 0; i <= *content_lines; i++) {
                  strcat(code, content_buffer[i]);
                  strcat(code, "\n");
                }
                fcb_process(code, response);
d315 1
a315 8
                i = 0;
                n = 0;
                while(i < strlen(response)) {
                  console_buffer[*console_lines][n] = response[i];
                  console_buffer[*console_lines][n+1] = 0;
                  n++;
                  if(response[i] == '\n') {
                    (*console_lines)++;
d317 12
d330 30
a359 2
                  i++;
                }
a360 9
                free(code);
              } else if(event.key.keysym.sym == 'l') {
                /* clear buffers */
                content_buffer[0][0] = 0;
                console_buffer[0][0] = 0;
                (*content_lines) = 0;
                (*console_lines) = 0;
                h_ind = 0;
                v_ind = 0;
@


1.11
log
@memory bug fix.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.10 2005/06/23 04:55:51 twingy Exp $
d201 1
a201 1
    SDL_FillRect(util_display_screen, &rect, 0xff000080);
d217 1
a217 1
    for(i = 0; i <= *console_lines; i++)
d279 5
@


1.10
log
@Python interpretor working now.  Command interface has become a blender style
editing interface with ctrl+p to process and ctrl+l to clear buffers.  Rise image
output re-enabled.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.9 2005/06/23 00:43:15 twingy Exp $
a186 1
  unsigned int color;
d201 1
a201 2
    color = 0xff000080;
    SDL_FillRect(util_display_screen, &rect, color);
d208 1
a208 2
    color = 0xffffffff;
    SDL_FillRect(util_display_screen, &rect, color);
d298 2
a299 1
                code = (char *)malloc(*content_lines * 80);
a304 1

@


1.9
log
@Skeleton framework for python integration in place, console 75% done.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.8 2005/06/22 05:19:35 twingy Exp $
d184 1
a184 1
void util_display_console(char **command_buffer, int *command_lines, char **console_buffer, int *console_lines, void (*fcb_cmd)(char *commmand, char *response)) {
d188 2
a189 4
  int i, ind, h_ind;
  char command[80];
  char history[80];
  char response[1024];
a190 3
  command[0] = 0;

  ind = 0;
d192 2
d197 1
a197 1
    /* Draw Command Window */
a204 3
    for(i = 0; i < *console_lines; i++)
      util_display_text(console_buffer[i], 1, *console_lines - i, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_BOTTOM);

d206 2
a207 2
    rect.x = UTIL_DISPLAY_FONT_WIDTH*(ind + 1); /* +1 for '>' */
    rect.y = util_display_screen_h - UTIL_DISPLAY_FONT_HEIGHT;
d213 9
a221 3
    /* Input */
    util_display_text(">", 0, 0, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_BOTTOM);
    util_display_text(command, 1, 0, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_BOTTOM);
d233 1
a233 1
            ind = 0;
d237 9
a245 1
            ind = strlen(command);
d249 2
a250 2
            if(ind)
              ind--;
d254 2
a255 2
            if(ind < strlen(command))
              ind++;
d258 3
a260 6
          case SDLK_UP:
            if(h_ind) {
              if(h_ind == *command_lines)
                strcpy(history, command);
              strcpy(command, command_buffer[h_ind-1]);
              ind = strlen(command);
d262 2
a263 3
              if(h_ind)
                h_ind--;
            }
d266 6
a271 10
          case SDLK_DOWN:
            if(h_ind < *command_lines) {
              h_ind++;
              if(h_ind == *command_lines) {
                strcpy(command, history);
              } else {
                strcpy(command, command_buffer[h_ind]);
              }
              ind = strlen(command);
            }
d275 4
a278 4
            if(ind) {
              for(i = ind-1; i < strlen(command); i++)
                command[i] = command[i+1];
                ind--;
d284 4
a287 24
              char *lines[16];
              int n;

              response[0] = 0;
              if(strlen(command))
                fcb_cmd(command, response);

              /* Append command to the history and console */
              strcpy(command_buffer[(*command_lines)++], command);
              strcpy(console_buffer[(*console_lines)++], command);

              /* Place the response onto the console */
              n = 0;
              if(strlen(response)) {
                lines[0] = strtok(response, "\n");
                if(lines[0]) {
                  for(n = 1; n < 16; n++) {
                    lines[n] = strtok(NULL, "\n");
                    if(!lines[n])
                      break;
                  }
                }
                for(i = 0; i < n; i++)
                  strcpy(console_buffer[(*console_lines)++], lines[i]);
d289 1
a289 4

              command[0] = 0;
              ind = 0;
              h_ind = *command_lines;
d294 38
a331 5
            if(ind < 80)
              if(event.key.keysym.unicode & 0x7F) {
                for(i = strlen(command); i >= ind; i--)
                  command[i+1] = command[i];
                command[ind++] = event.key.keysym.unicode & 0x7F;
d333 8
@


1.8
log
@more additions to the console and beginning to add python interpreter.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.7 2005/06/22 02:36:26 twingy Exp $
d184 1
a184 1
void util_display_console(char **command_buffer, int *lines, void (*fcb_cmd)(char *commmand, char *response)) {
d191 1
a191 1
  char response[80];
d208 2
a209 2
    for(i = 0; i < *lines; i++)
      util_display_text(command_buffer[i], 1, *lines - i, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_BOTTOM);
d252 1
a252 1
              if(h_ind == *lines)
d263 1
a263 1
            if(h_ind < *lines) {
d265 1
a265 1
              if(h_ind == *lines) {
d283 31
a313 5
            fcb_cmd(command, response);
            strcpy(command_buffer[(*lines)++], command);
            command[0] = 0;
            ind = 0;
            h_ind = *lines;
@


1.7
log
@Most of the console event handling is now in place... 50% done.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.6 2005/06/21 22:16:58 twingy Exp $
d191 1
d216 1
a216 1
    color = 0xffffff00;
d232 8
d283 1
@


1.6
log
@Started on util_display_console for use in igvt observer, 25% done.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.5 2005/06/21 05:36:29 twingy Exp $
d188 1
a188 1
  int i, ind;
d190 1
d195 1
d208 1
a208 1
      util_display_text(command_buffer[i], 1, *lines - i + 1, UTIL_JUSTIFY_LEFT, UTIL_JUSTIFY_BOTTOM);
d241 24
d277 1
d281 6
a286 4
            if(event.key.keysym.unicode & 0x7F) {
              command[ind++] = event.key.keysym.unicode & 0x7F;
              command[ind] = 0;
            }
@


1.5
log
@licensing stuff.
@
text
@d34 1
a34 1
 * $Id: display.c,v 1.4 2005/06/21 02:37:17 twingy Exp $
d95 2
d184 1
a184 2
void util_display_console(void (*fcb_cmd)(char *cmd)) {
#if 0
d189 3
d193 1
a193 1
  ind = strlen(text) - 1;
d197 6
a202 6
    /* Box */
    rect.x = UTIL_DISPLAY_FONT_WIDTH-3;
    rect.y = UTIL_DISPLAY_FONT_HEIGHT-3;
    rect.w = (width+2) * UTIL_DISPLAY_FONT_WIDTH+6;
    rect.h = 3*UTIL_DISPLAY_FONT_HEIGHT+6;
    color = 0xff606060;
d205 9
a213 6
    /* Title */
    rect.x = UTIL_DISPLAY_FONT_WIDTH-1;
    rect.y = 1*UTIL_DISPLAY_FONT_HEIGHT-1;
    rect.w = (width+2) * UTIL_DISPLAY_FONT_WIDTH+2;
    rect.h = 1*UTIL_DISPLAY_FONT_HEIGHT+2;
    color = 0xff808080;
a214 1
    util_display_text(title, 2, 1, 0, 0);
d217 2
a218 7
    rect.x = UTIL_DISPLAY_FONT_WIDTH-1;
    rect.y = 3*UTIL_DISPLAY_FONT_HEIGHT-1;
    rect.w = (width+2) * UTIL_DISPLAY_FONT_WIDTH+2;
    rect.h = 1*UTIL_DISPLAY_FONT_HEIGHT+2;
    color = 0xff404040;
    SDL_FillRect(util_display_screen, &rect, color);
    util_display_text(text, 2, 3, 0, 0);
d220 1
a220 13
    /* Cursor */
    rect.x = UTIL_DISPLAY_FONT_WIDTH*(3+ind)+1;
    rect.y = 3*UTIL_DISPLAY_FONT_HEIGHT+1;
    rect.w = 2;
    rect.h = 1*UTIL_DISPLAY_FONT_HEIGHT-2;
    color = 0xffB0B0B0;
    SDL_FillRect(util_display_screen, &rect, color);

    rect.x = UTIL_DISPLAY_FONT_WIDTH-3;
    rect.y = UTIL_DISPLAY_FONT_HEIGHT-3;
    rect.w = (width+2) * UTIL_DISPLAY_FONT_WIDTH+6;
    rect.h = 3*UTIL_DISPLAY_FONT_HEIGHT+6;
    SDL_UpdateRect(util_display_screen, rect.x, rect.y, rect.w, rect.h);
d225 2
a226 6
          case SDLK_HOME:
            ind = -1;
            break;

          case SDLK_END:
            ind = strlen(text)-1;
d235 1
a235 1
            if(ind+1 < strlen(text))
a238 4
          case SDLK_RETURN:
            return;
            break;

d240 3
a242 8
            if(event.key.keysym.mod & KMOD_ALT) {
              text[0] = NULL;
              ind = -1;
            } else {
              if(ind >= 0) {
                /* shift characters down */
                for(i = ind; i < width; i++)
                  text[i] = text[i+1];
a243 1
              }
d247 6
d254 3
a256 7
            if(event.key.keysym.sym >= 32 && event.key.keysym.sym < 127) {
              if(ind+1 < width) {
                /* shift characters down */
                for(i = width-1; i > ind; i--)
                  text[i] = text[i-1];
                text[++ind] = event.key.keysym.sym;
              }
d262 2
a263 2
        default:
          break;
a265 1
#endif
@


1.4
log
@formatting.
@
text
@d2 3
a22 3
 */
/** @@file display.c
 *                     D I S P L A Y . C
d24 2
a25 1
 *  Utilities Library - Display (SDL Stuff)
d34 1
a34 1
 * $Id: display.c,v 1.3 2005/06/20 21:45:53 twingy Exp $
@


1.3
log
@added splash screen and added sdl wasinit to display.
@
text
@d33 1
a33 1
 * $Id: display.c,v 1.2 2005/06/18 01:30:04 twingy Exp $
d59 1
a59 1
  if(!SDL_WasInit(SDL_INIT_VIDEO)) {
a63 2
  } else {
  }
@


1.2
log
@Added licensing info to libutil files.
@
text
@d33 1
a33 1
 * $Id: display.c,v 1.2 2005/06/18 01:09:31 twingy Exp $
d59 6
a64 3
  if(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_NOPARACHUTE) < 0) {
    fprintf(stderr, "Couldn't initialize SDL: %s\n", SDL_GetError());
    exit(1);
@


1.1
log
@Welcome ADRT
@
text
@d1 35
@

