head	1.4;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1
	postmerge-20051223-bobWinPort:1.2
	premerge-20051223-bobWinPort:1.2
	rel-7-6-6:1.2
	rel-7-6-4:1.2
	rel-7-6-2:1.1
	rel-7-6-branch:1.1.0.6
	rel-7-6-0:1.1
	rel-7-4-2:1.1
	rel-7-4-branch:1.1.0.4
	bobWinPort:1.1.0.2
	rel-7-4-0:1.1;
locks; strict;
comment	@ * @;


1.4
date	2007.01.23.01.13.22;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.21.00.51.05;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.15.09.28;	author lbutler;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@/* A C-program for MT19937: Real number version
 *   genrand() generates one pseudorandom real number (double)
 * which is uniformly distributed on [0,1]-interval, for each
 * call. sgenrand(seed) set initial values to the working area
 * of 624 words. Before genrand(), sgenrand(seed) must be
 * called once. (seed is any 32-bit integer except for 0).
 * Integer generator is obtained by modifying two lines.
 *   Coded by Takuji Nishimura, considering the suggestions by
 * Topher Cooper and Marc Rieffel in July-Aug. 1997.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Library General
 * Public License along with this library; if not, write to the
 * Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307  USA
 *
 * Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.
 * Any feedback is very welcome. For any question, comments,
 * see http://www.math.keio.ac.jp/matumoto/emt.html or email
 * matumoto@@math.keio.ac.jp
 */


#include "rand.h"


/* Period parameters */
#define N 624
#define M 397
#define MATRIX_A 0x9908b0df   /* constant vector a */
#define UPPER_MASK 0x80000000 /* most significant w-r bits */
#define LOWER_MASK 0x7fffffff /* least significant r bits */


/* Tempering parameters */
#define TEMPERING_MASK_B 0x9d2c5680
#define TEMPERING_MASK_C 0xefc60000
#define TEMPERING_SHIFT_U(y)  (y >> 11)
#define TEMPERING_SHIFT_S(y)  (y << 7)
#define TEMPERING_SHIFT_T(y)  (y << 15)
#define TEMPERING_SHIFT_L(y)  (y >> 18)


/* the array for the state vector  */
static unsigned long mt[N];
/* mti==N+1 means mt[N] is not initialized */
static int mti=N+1;


/* initializing the array with a NONZERO seed */
void math_rand_seed(unsigned long seed) {
  /*
   * setting initial seeds to mt[N] using
   * the generator Line 25 of Table 1 in
   * [KNUTH 1981, The Art of Computer Programming
   *    Vol. 2 (2nd Ed.), pp102]
   */
  mt[0] = seed & 0xffffffff;
  for(mti = 1; mti<N; mti++)
    mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
}


double math_rand() {
  unsigned long y;
  static unsigned long mag01[2]={0x0, MATRIX_A};

  /* generate N words at one time */
  if(mti >= N) {
    int kk;

    /* if sgenrand() has not been called, a default initial seed is used */
    if(mti == N+1)
      math_rand_seed(4357);

    for(kk = 0; kk < N-M; kk++) {
      y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
      mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
    }

    for(; kk < N-1; kk++) {
      y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
      mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
    }

    y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
    mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];

    mti = 0;
  }

  y = mt[mti++];
  y ^= TEMPERING_SHIFT_U(y);
  y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
  y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
  y ^= TEMPERING_SHIFT_L(y);

  return ( (double)y / (unsigned long)0xffffffff );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.3
log
@standard header and footer cleanup
@
text
@d12 1
a12 1
 * modify it under the terms of the GNU Library General Public
d19 1
a19 1
 * See the GNU Library General Public License for more details.
@


1.2
log
@trailing ws
@
text
@d108 10
@


1.1
log
@Welcome ADRT
@
text
@d35 1
a35 1
/* Period parameters */  
d43 1
a43 1
/* Tempering parameters */   
d99 1
a99 1
  
@


1.1.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d35 1
a35 1
/* Period parameters */
d43 1
a43 1
/* Tempering parameters */
d99 1
a99 1

@


