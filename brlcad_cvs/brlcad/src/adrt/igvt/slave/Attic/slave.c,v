head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2005.07.10.03.58.19;	author twingy;	state dead;
branches;
next	1.8;

1.8
date	2005.07.10.03.48.10;	author twingy;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.30.09.02.46;	author twingy;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.29.17.07.39;	author twingy;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.28.21.05.13;	author twingy;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.27.21.13.39;	author twingy;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.24.22.57.41;	author twingy;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.24.06.28.01;	author twingy;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.17.15.09.25;	author lbutler;	state Exp;
branches;
next	;


desc
@@


1.9
log
@IGVT->ISST 90%
@
text
@#include "slave.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include "camera.h"
#include "ivat.h"
#include "cdb.h"
#include "tienet.h"
#include "unpack.h"
#include "render_util.h"


void ivat_slave(int port, char *host, int threads);
void ivat_slave_init(tie_t *tie, void *app_data, int app_size);
void ivat_slave_free(void);
void ivat_slave_work(tie_t *tie, void *data, int size, void **res_buf, int *res_len);
void ivat_slave_mesg(void *mesg, int mesg_len);


int ivat_slave_threads;
int ivat_slave_completed;
common_db_t db;
util_camera_t camera;


void ivat_slave(int port, char *host, int threads) {
  ivat_slave_threads = threads;
  tienet_slave_init(port, host, ivat_slave_init, ivat_slave_work, ivat_slave_free, ivat_slave_mesg, IVAT_VER_KEY);
}


void ivat_slave_init(tie_t *tie, void *app_data, int app_size) {
  printf("scene data received\n");

  ivat_slave_completed = 0;
  util_camera_init(&camera, ivat_slave_threads);

  common_unpack(&db, tie, &camera, COMMON_PACK_ALL, app_data, app_size);
  common_env_prep(&db.env);
  util_camera_prep(&camera, &db);
  printf("prepping geometry\n");
}


void ivat_slave_free() {
  util_camera_free(&camera);
  common_unpack_free();
}


void ivat_slave_work(tie_t *tie, void *data, int size, void **res_buf, int *res_len) {
  common_work_t work;
  int ind;
  short frame_ind;
  TIE_3 pos, foc;
  unsigned char rm;
  char op;


  ind = 0;
  memcpy(&work, &((char *)data)[ind], sizeof(common_work_t));
  ind += sizeof(common_work_t);

  memcpy(&op, &((char *)data)[ind], 1);
  ind += 1;

  switch(op) {
    case IVAT_OP_SHOT:
      {
        tie_ray_t ray;
        void *mesg;
        int dlen;

        mesg = NULL;

        /* position */
        memcpy(&ray.pos, &((char *)data)[ind], sizeof(TIE_3));
        ind += sizeof(TIE_3);

        /* direction */
        memcpy(&ray.dir, &((char *)data)[ind], sizeof(TIE_3));
        ind += sizeof(TIE_3);

        /* Fire the shot */
        ray.depth = 0;
        render_util_shotline_list(tie, &ray, &mesg, &dlen);

        /* Make room for shot data */
        *res_len = sizeof(common_work_t) + dlen;
        *res_buf = (void *)realloc(*res_buf, *res_len);

        ind = 0;

        /* Pack work unit data and shot data */
        memcpy(&((char *)*res_buf)[ind], &work, sizeof(common_work_t));
        ind += sizeof(common_work_t);

        memcpy(&((char *)*res_buf)[ind], mesg, dlen);

        free(mesg);
      }
      break;

    case IVAT_OP_SPALL:
      {
        tie_ray_t ray;
        tfloat angle;
        void *mesg;
        int dlen;

        mesg = NULL;

        /* position */
        memcpy(&ray.pos, &((char *)data)[ind], sizeof(TIE_3));
        ind += sizeof(TIE_3);

        /* direction */
        memcpy(&ray.dir, &((char *)data)[ind], sizeof(TIE_3));
        ind += sizeof(TIE_3);

        /* angle */
        memcpy(&angle, &((char *)data)[ind], sizeof(tfloat));
        ind += sizeof(tfloat);

        /* Fire the shot */
        ray.depth = 0;
        render_util_spall_list(tie, &ray, angle, &mesg, &dlen);

        /* Make room for shot data */
        *res_len = sizeof(common_work_t) + dlen;
        *res_buf = (void *)realloc(*res_buf, *res_len);

        ind = 0;

        /* Pack work unit data and shot data */
        memcpy(&((char *)*res_buf)[ind], &work, sizeof(common_work_t));
        ind += sizeof(common_work_t);

        memcpy(&((char *)*res_buf)[ind], mesg, dlen);

        free(mesg);
      }
      break;

    case IVAT_OP_RENDER:
      /* Extract updated camera data */
      memcpy(&frame_ind, &((char *)data)[ind], sizeof(short));
      ind += sizeof(short);

      /* Camera position */
      memcpy(&pos.v, &((char *)data)[ind], sizeof(TIE_3));
      ind += sizeof(TIE_3);

      /* Camera Focus */
      memcpy(&foc.v, &((char *)data)[ind], sizeof(TIE_3));
      ind += sizeof(TIE_3);

      /* Update Rendering Method if it has Changed */
      memcpy(&rm, &((char *)data)[ind], 1);
      ind += 1;

      if(rm != db.env.rm) {
        db.env.render.free(&db.env.render);

        switch(rm) {
          case RENDER_METHOD_COMPONENT:
            render_component_init(&db.env.render);
            break;

          case RENDER_METHOD_GRID:
            render_grid_init(&db.env.render);
            break;

          case RENDER_METHOD_NORMAL:
            render_normal_init(&db.env.render);
            break;

          case RENDER_METHOD_PATH:
            render_path_init(&db.env.render, 12);
            break;

          case RENDER_METHOD_PHONG:
            render_phong_init(&db.env.render);
            break;

          case RENDER_METHOD_PLANE:
            {
              TIE_3 shot_pos, shot_dir;

              /* Extract shot position and direction */
              memcpy(&shot_pos, &((char *)data)[ind], sizeof(TIE_3));
              ind += sizeof(TIE_3);

              memcpy(&shot_dir, &((char *)data)[ind], sizeof(TIE_3));
              ind += sizeof(TIE_3);

              render_plane_init(&db.env.render, shot_pos, shot_dir);
            }
            break;

          case RENDER_METHOD_SPALL:
            {
              TIE_3 shot_pos, shot_dir;
              tfloat angle;

              /* Extract shot position and direction */
              memcpy(&shot_pos, &((char *)data)[ind], sizeof(TIE_3));
              ind += sizeof(TIE_3);

              memcpy(&shot_dir, &((char *)data)[ind], sizeof(TIE_3));
              ind += sizeof(TIE_3);

              memcpy(&angle, &((char *)data)[ind], sizeof(tfloat));
              ind += sizeof(tfloat);

              render_spall_init(&db.env.render, shot_pos, shot_dir, angle); /* 10 degrees for now */
            }
            break;

          default:
            break;
        }
        db.env.rm = rm;
      }

      /* Update camera */
      camera.pos = pos;
      camera.focus = foc;
      util_camera_prep(&camera, &db);

      util_camera_render(&camera, &db, tie, data, size, res_buf, res_len);
      *res_buf = (void *)realloc(*res_buf, *res_len + sizeof(short));

      /* Tack on the frame index data */
      memcpy(&((char *)*res_buf)[*res_len], &frame_ind, sizeof(short));
      *res_len += sizeof(short);
      break;

    default:
      break;
  }

#if 0
  gettimeofday(&tv, NULL);
  printf("[Work Units Completed: %.6d  Rays: %.5d k/sec %lld]\r", ++ivat_slave_completed, (int)((tfloat)tie->rays_fired / (tfloat)(1000 * (tv.tv_sec - ivat_slave_startsec + 1))), tie->rays_fired);
  fflush(stdout);
#endif
}


void ivat_slave_mesg(void *mesg, int mesg_len) {
  short		op;
  TIE_3		foo;

  memcpy(&op, mesg, sizeof(short));

  switch(op) {
    case IVAT_OP_SHOT:
    {
      int i, n, num, ind;
      char c, name[256];

      /* Reset all meshes */
      for(i = 0; i < db.mesh_num; i++)
        db.mesh_list[i]->flags = 0;

      /* Read the data */
      ind = sizeof(short);
      memcpy(&num, &((unsigned char *)mesg)[ind], sizeof(int));

      ind += sizeof(int);

      for(i = 0; i < num; i++) {
        memcpy(&c, &((unsigned char *)mesg)[ind], 1);
        ind += 1;
        memcpy(name, &((unsigned char *)mesg)[ind], c);
        ind += c;

/*        printf("trying to assign: -%s-\n", name); */
        for(n = 0; n < db.mesh_num; n++) {
          if(!strcmp(db.mesh_list[n]->name, name)) {
/*            printf("  assigned[%d]: %s\n", i, name); */
            db.mesh_list[n]->flags = 1;
            continue;
          }
        }
      }
    }
    break;


    default:
      break;
  }
}
@


1.8
log
@75% done IGVT -> IVAT conversion.
@
text
@@


1.7
log
@Shotline remapped to '/' on num pad.  Spall cone mapped to '*' on num pad.
Spall cone now fires 32 full angle, 16 half angle, 12 quarter angle rays.
Shotline moved into render utilities.
@
text
@d7 1
a7 1
#include "igvt.h"
d14 5
a18 5
void igvt_slave(int port, char *host, int threads);
void igvt_slave_init(tie_t *tie, void *app_data, int app_size);
void igvt_slave_free(void);
void igvt_slave_work(tie_t *tie, void *data, int size, void **res_buf, int *res_len);
void igvt_slave_mesg(void *mesg, int mesg_len);
d21 2
a22 2
int igvt_slave_threads;
int igvt_slave_completed;
d27 3
a29 3
void igvt_slave(int port, char *host, int threads) {
  igvt_slave_threads = threads;
  tienet_slave_init(port, host, igvt_slave_init, igvt_slave_work, igvt_slave_free, igvt_slave_mesg, IGVT_VER_KEY);
d33 1
a33 1
void igvt_slave_init(tie_t *tie, void *app_data, int app_size) {
d36 2
a37 2
  igvt_slave_completed = 0;
  util_camera_init(&camera, igvt_slave_threads);
d46 1
a46 1
void igvt_slave_free() {
d52 1
a52 1
void igvt_slave_work(tie_t *tie, void *data, int size, void **res_buf, int *res_len) {
d69 1
a69 1
    case IGVT_OP_SHOT:
d105 1
a105 1
    case IGVT_OP_SPALL:
d146 1
a146 1
    case IGVT_OP_RENDER:
d246 1
a246 1
  printf("[Work Units Completed: %.6d  Rays: %.5d k/sec %lld]\r", ++igvt_slave_completed, (int)((tfloat)tie->rays_fired / (tfloat)(1000 * (tv.tv_sec - igvt_slave_startsec + 1))), tie->rays_fired);
d252 1
a252 1
void igvt_slave_mesg(void *mesg, int mesg_len) {
d259 1
a259 1
    case IGVT_OP_SHOT:
@


1.6
log
@spawl -> spall.
@
text
@d11 2
d58 1
d62 1
a62 1
  memcpy(&work, &((char *)data)[0], sizeof(common_work_t));
d65 19
d85 3
a87 89
  if(work.size_x == 0) {
    tie_ray_t ray;
    void *mesg;
    int dlen;


    mesg = NULL;

    /* position */
    memcpy(&ray.pos.v[0], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
    memcpy(&ray.pos.v[1], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
    memcpy(&ray.pos.v[2], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);

    /* position */
    memcpy(&ray.dir.v[0], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
    memcpy(&ray.dir.v[1], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
    memcpy(&ray.dir.v[2], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);

    /* Fire the shot */
    ray.depth = 0;
    render_shotline_work(tie, &ray, &mesg, &dlen);

    /* Make room for shot data */
    *res_len = sizeof(common_work_t) + dlen;
    *res_buf = (void *)realloc(*res_buf, *res_len);

    ind = 0;

    /* Pack work unit data and shot data */
    memcpy(&((char *)*res_buf)[ind], &work, sizeof(common_work_t));
    ind += sizeof(common_work_t);

    memcpy(&((char *)*res_buf)[ind], mesg, dlen);

    free(mesg);
  } else {
    /* Extract updated camera data */
    memcpy(&frame_ind, &((char *)data)[ind], sizeof(short));
    ind += sizeof(short);

    /* Camera position */
    memcpy(&pos.v, &((char *)data)[ind], sizeof(TIE_3));
    ind += sizeof(TIE_3);

    /* Camera Focus */
    memcpy(&foc.v, &((char *)data)[ind], sizeof(TIE_3));
    ind += sizeof(TIE_3);

    /* Update Rendering Method if it has Changed */
    memcpy(&rm, &((char *)data)[ind], 1);
    ind += 1;

    if(rm != db.env.rm) {
      db.env.render.free(&db.env.render);

      switch(rm) {
        case RENDER_METHOD_COMPONENT:
          render_component_init(&db.env.render);
          break;

        case RENDER_METHOD_GRID:
          render_grid_init(&db.env.render);
          break;

        case RENDER_METHOD_NORMAL:
          render_normal_init(&db.env.render);
          break;

        case RENDER_METHOD_PATH:
          render_path_init(&db.env.render, 12);
          break;

        case RENDER_METHOD_PHONG:
          render_phong_init(&db.env.render);
          break;

        case RENDER_METHOD_PLANE:
          {
            TIE_3 shot_pos, shot_dir;

            /* Extract shot position and direction */
            memcpy(&shot_pos, &((char *)data)[ind], sizeof(TIE_3));
            ind += sizeof(TIE_3);
d89 15
a103 2
            memcpy(&shot_dir, &((char *)data)[ind], sizeof(TIE_3));
            ind += sizeof(TIE_3);
d105 28
a132 3
            render_plane_init(&db.env.render, shot_pos, shot_dir);
          }
          break;
d134 1
a134 4
        case RENDER_METHOD_SPALL:
          {
            TIE_3 shot_pos, shot_dir;
            tfloat angle;
d136 3
a138 3
            /* Extract shot position and direction */
            memcpy(&shot_pos, &((char *)data)[ind], sizeof(TIE_3));
            ind += sizeof(TIE_3);
d140 1
a140 2
            memcpy(&shot_dir, &((char *)data)[ind], sizeof(TIE_3));
            ind += sizeof(TIE_3);
d142 3
a144 2
            memcpy(&angle, &((char *)data)[ind], sizeof(tfloat));
            ind += sizeof(tfloat);
d146 74
a219 3
            render_spall_init(&db.env.render, shot_pos, shot_dir, angle); /* 10 degrees for now */
          }
          break;
d221 4
d227 12
a238 2
      db.env.rm = rm;
    }
d240 2
a241 11
    /* Update camera */
    camera.pos = pos;
    camera.focus = foc;
    util_camera_prep(&camera, &db);

    util_camera_render(&camera, &db, tie, data, size, res_buf, res_len);
    *res_buf = (void *)realloc(*res_buf, *res_len + sizeof(short));

    /* Tack on the frame index data */
    memcpy(&((char *)*res_buf)[*res_len], &frame_ind, sizeof(short));
    *res_len += sizeof(short);
a243 1

a258 21
    case IGVT_OP_CAMERA:
    {
      TIE_3	pos;
      TIE_3	foc;

      memcpy(&pos.v[0], &((char *)mesg)[2], sizeof(tfloat));
      memcpy(&pos.v[1], &((char *)mesg)[2+1*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&pos.v[2], &((char *)mesg)[2+2*sizeof(tfloat)], sizeof(tfloat));

      memcpy(&foc.v[0], &((char *)mesg)[2+3*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&foc.v[1], &((char *)mesg)[2+4*sizeof(tfloat)], sizeof(tfloat));
      memcpy(&foc.v[2], &((char *)mesg)[2+5*sizeof(tfloat)], sizeof(tfloat));

      camera.pos = pos;
      camera.focus = foc;
      /* recompute the camera data */
      util_camera_prep(&camera, &db);

      break;
    }

d265 1
a265 1
      for(i = 0; i < db.mesh_num; i++) {
a266 1
      }
a273 1

d285 1
d289 2
a291 2
      break;
    }
@


1.5
log
@Spawl cone rendering method now display as shaded red transparent.  Added
python hooks for getting and setting spawl angle.
@
text
@d160 1
a160 1
        case RENDER_METHOD_SPAWL:
d175 1
a175 1
            render_spawl_init(&db.env.render, shot_pos, shot_dir, angle); /* 10 degrees for now */
@


1.4
log
@Adding s pawl cone render method.
@
text
@d163 1
d172 4
a175 1
            render_spawl_init(&db.env.render, shot_pos, shot_dir, 10.0); /* 10 degrees for now */
@


1.3
log
@fixing rise observer
@
text
@d159 16
@


1.2
log
@Additional render data is now passed along in render method baggage in master. Observer reports fps on
screen now.  Add math_vec_set to libtie.  Master fires shotline by pressing keypad period, and keypad 0
places camera back at the shotline origin.
@
text
@d87 1
a87 1
    /* Fire the shotline */
d91 1
a91 1
    /* Make room for shotline data */
d97 1
a97 1
    /* Pack work unit data and shotline data */
d147 1
a147 1
            TIE_3 shotline_pos, shotline_dir;
d149 2
a150 2
            /* Extract shotline position and direction */
            memcpy(&shotline_pos, &((char *)data)[ind], sizeof(TIE_3));
d153 1
a153 1
            memcpy(&shotline_dir, &((char *)data)[ind], sizeof(TIE_3));
d156 1
a156 1
            render_plane_init(&db.env.render, shotline_pos, shotline_dir);
d214 1
a214 1
    case IGVT_OP_SHOTLINE:
@


1.1
log
@Welcome ADRT
@
text
@d110 2
a111 6
    memcpy(&pos.v[0], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
    memcpy(&pos.v[1], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
    memcpy(&pos.v[2], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
d114 2
a115 6
    memcpy(&foc.v[0], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
    memcpy(&foc.v[1], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
    memcpy(&foc.v[2], &((char *)data)[ind], sizeof(tfloat));
    ind += sizeof(tfloat);
d147 1
a147 1
            TIE_3 ray_dir;
d149 8
a156 2
            math_vec_sub(ray_dir, foc, pos);
            render_plane_init(&db.env.render, pos, ray_dir);
@

