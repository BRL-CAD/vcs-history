head	14.11;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	stable-branch:14.6
	rel-7-10-2:14.11
	rel-7-10-0:14.11
	rel-7-8-4:14.9
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.6
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.6
	rel-7-6-branch:14.6.0.6
	rel-7-6-0:14.6
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.4
	bobWinPort:14.6.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.11
date	2007.01.23.01.13.35;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.53;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.29.00.51.54;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.01.30.20.30.54;	author brlcad;	state Exp;
branches
	14.6.6.1;
next	14.5;

14.5
date	2004.12.21.07.18.58;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.22;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.02.29.40;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.08.19.59.00;	author kermit;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.22;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.46;	author morrison;	state Exp;
branches;
next	;

14.6.6.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@/*                       F F T F A S T . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file fftfast.c
 * Complex Number and FFT Library
 *
 * "Fast" Version - Function calls to complex math routines removed.
 *      Uses pre-computed sine/cosine tables.
 *
 *  The FFT is:
 *
 *	        N-1
 *	Xf(k) = Sum x(n)( cos(2PI(nk/N)) - isin(2PI(nk/N)) )
 *	        n=0
 *
 *  Author -
 *	Phil Dykstra, 12 Oct 84 and beyond.
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfft/fftfast.c,v 14.10 2007/01/20 14:36:53 brlcad Exp $ (ARL)";
#endif

#include "common.h"


#include <stdlib.h>
#include <stdio.h>	/* for stderr */
#include <math.h>	/* for double sin(), cos() */

#define	MAXSIZE	65536	/* Needed for sin/cos tables */
int	_init_size = 0;	/* Internal: shows last initialized size */

#if !defined(PI)
#	define	PI	3.141592653589793238462643
#endif

/* The COMPLEX type used throughout */
typedef struct {
	double	re;	/* Real Part */
	double	im;	/* Imaginary Part */
} COMPLEX;

void	scramble(int numpoints, COMPLEX *dat);
void	butterflies(int numpoints, int inverse, COMPLEX *dat);
int	init_sintab( int size );

/*
 * Forward Complex Fourier Transform
 */
void
cfft(COMPLEX *dat, int num)
{
	/* Check for trig table initialization */
	if( num != _init_size ) {
		if( init_sintab( num ) == 0 ) {
			/* Can't do requested size */
			return;
		}
	}

	scramble( num, dat );
	butterflies( num, -1, dat );
}

/*
 * Inverse Complex Fourier Transform
 */
void
icfft(COMPLEX *dat, int num)
{
	/* Check for trig table initialization */
	if( num != _init_size ) {
		if( init_sintab( num ) == 0 ) {
			/* Can't do requested size */
			return;
		}
	}

	scramble(num, dat);
	butterflies(num, 1, dat);
}

/******************* INTERNAL FFT ROUTINES ********************/

/* The trig tables */
double	*sintab;
double	*costab;

/*
 *		I N I T _ S I N T A B
 *
 * Internal routine to initialize the sine/cosine table for
 *  transforms of a given size.  Checks size for power of two
 *  and within table limits.
 *
 * Note that once initialized for one size it ready for one
 *  smaller than that also, but it is convenient to do power of
 *  two checking here so we change the _init_size every time
 *  (We *could* pick up where ever we left off by keeping a
 *  _max_init_size but forget that for now).
 *
 * Note that we need sin and cos values for +/- (PI * (m / col))
 *  where col = 1, 2, 4, ..., N/2
 *          m = 0, 1, 2, ..., col-1
 *
 *  Thus we can subscript by: table[(m / col) * N/2]
 *   or with twice as many values by: table[m + col]
 *   We chose the later. (but N.B. this doesn't allow sub
 *   _init_size requests to use existing numbers!)
 */
int
init_sintab(int size)
{
	double	theta;
	int	col, m;

	/*
	 * Check whether the requested size is within our compiled
	 *  limit and make sure it's a power of two.
	 */
	if( size > MAXSIZE ) {
		fprintf( stderr, "fft: Only compiled for max size of %d\n", MAXSIZE );
		fprintf( stderr, "fft: Can't do the requested %d\n", size );
		return( 0 );
	}
	for( m = size; (m & 1) == 0; m >>= 1 )
		;
	if( m != 1 ) {
		fprintf( stderr, "fft: Can only do powers of two, not %d\n", size );
		fprintf( stderr, "fft: What do you think this is, a Winograd transform?\n" );
		return( 0 );
	}

	/* Get some buffer space */
	if( sintab != NULL ) free( sintab );
	if( costab != NULL ) free( costab );
	/* should not use bu_calloc() as libfft is not dependant upon libbu */
	sintab = (double *)calloc( sizeof(*sintab), size );
	costab = (double *)calloc( sizeof(*costab), size );

	/*
	 * Size is okay.  Set up tables.
	 */
	for( col = 1; col < size; col <<= 1 ) {
		for( m = 0; m < col; m++ ) {
			theta = PI * (double)m / (double)col;
			sintab[ m + col ] = sin( theta );
			costab[ m + col ] = cos( theta );
		}
	}

	/*
	 * Mark size and return success.
	 */
	_init_size = size;
/*	fprintf( stderr, "fft: table init, size = %d\n", size );*/
	return( 1 );
}

/*
 * This section implements the Cooley-Tukey Complex
 * Fourier transform.
 * Reference: Nov 84 Dr. Dobbs [#97], and
 *   "Musical Applications of Microprocessors", Hal Chamberlin.
 */

/*
 * SCRAMBLE - put data in bit reversed order
 *
 * Note: Could speed this up with pointers if necessary,
 *   but the butterflies take much longer.
 */
void
scramble(int numpoints, COMPLEX *dat)
{
	register int	i, j, m;
	COMPLEX	temp;

	j = 0;
	for( i = 0; i < numpoints; i++, j += m ) {
		if( i < j ) {
			/* Switch nodes i and j */
			temp.re = dat[j].re;
			temp.im = dat[j].im;
			dat[j].re = dat[i].re;
			dat[j].im = dat[i].im;
			dat[i].re = temp.re;
			dat[i].im = temp.im;
		}
		m = numpoints/2;
		while( m-1 < j ) {
			j -= m;
			m = (m + 1) / 2;
		}
	}
}

void
butterflies(int numpoints, int inverse, COMPLEX *dat)
{
	register COMPLEX *node1, *node2;
	register int step, column, m;
	COMPLEX	w, temp;

	/*
	 * For each column of the butterfly
	 */
	for( column = 1; column < numpoints; column = step ) {
		step = 2 * column;	/* step is size of "cross-hatch" */
		/*
		 * For each principle value of W  (roots on units).
		 */
		for( m = 0; m < column; m++ ) {
			/*
			 * Do these by table lookup:
			 *	theta = PI*(inverse*m)/column;
			 *	w.re = cos( theta );
			 *	w.im = sin( theta );
			 */
			w.re = costab[ column + m ];
			w.im = sintab[ column + m ] * inverse;
			/* Do all pairs of nodes */
			for( node1 = &dat[m]; node1 < &dat[numpoints]; node1 += step ) {
				node2 = node1 + column;
				/*
				 * Want to compute:
				 *  dat[node2] = dat[node1] - w * dat[node2];
				 *  dat[node1] = dat[node1] + w * dat[node2];
				 *
				 * We do all this with pointers now.
				 */

				/*cmult(&w, &dat[node2], &temp);*/
				temp.re = w.re*node2->re - w.im*node2->im;
				temp.im = w.im*node2->re + w.re*node2->im;

				/*csub(&dat[node1], &temp, &dat[node2]);*/
				node2->re = node1->re - temp.re;
				node2->im = node1->im - temp.im;

				/*cadd(&dat[node1], &temp, &dat[node1]);*/
				node1->re += temp.re;
				node1->im += temp.im;
			}
		}
	}

	/* Scale Data (on forward transform only) */
	/*
	 * Technically speaking this gives us the periodogram. XXX
	 * The canonical definition does the scaleing only
	 * after the inverse xform.  Our method may hurt certain
	 * other forms of analysis, e.g. cepstrum.
	 *   **** We Now Do It The Canonical Way! ****
	 */
	if( inverse > 0 ) {
		for( node1 = &dat[0]; node1 < &dat[numpoints]; node1++ ) {
			/* cdiv( &dat[i], &const, &dat[i] ); */
			node1->re /= (double)numpoints;
			node1->im /= (double)numpoints;
		}
	}
}

/**** COMPLEX ARITHMETIC ROUTINES ****/
/**** NO LONGER USED BY TRANSFORMS ***/
/*
 * CADD - Complex ADDition
 */
void
cadd(COMPLEX *result, COMPLEX *val1, COMPLEX *val2)
{
	result->re = val1->re + val2->re;
	result->im = val1->im + val2->im;
}

/*
 * CSUB - Complex SUBtraction
 */
void
csub(COMPLEX *result, COMPLEX *val1, COMPLEX *val2)
{
	result->re = val1->re - val2->re;
	result->im = val1->im - val2->im;
}

/*
 * CMULT - Complex MULTiply
 */
void
cmult(COMPLEX *result, COMPLEX *val1, COMPLEX *val2)
{
	result->re = val1->re*val2->re - val1->im*val2->im;
	result->im = val1->im*val2->re + val1->re*val2->im;
}

/*
 * CDIV - Complex DIVide
 */
void
cdiv(COMPLEX *result, COMPLEX *val1, COMPLEX *val2)
{
	double	denom;

	denom = val2->re*val2->re + val2->im*val2->im;
	result->re = (val1->re*val2->re + val1->im*val2->im)/denom;
	result->im = (val1->im*val2->re - val1->re*val2->im)/denom;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfft/fftfast.c,v 14.9 2006/01/29 00:51:54 brlcad Exp $ (ARL)";
@


14.9
log
@more libbu memory management and header cleanup
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfft/fftfast.c,v 14.8 2006/01/18 06:46:16 brlcad Exp $ (ARL)";
@


14.8
log
@update copyright to 2006
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfft/fftfast.c,v 14.7 2005/10/23 04:44:34 brlcad Exp $ (ARL)";
d159 1
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfft/fftfast.c,v 14.6 2005/01/30 20:30:54 brlcad Exp $ (ARL)";
@


14.6
log
@update copyright to 2005
@
text
@d35 1
a35 1
 *  
d39 1
a39 1
 *  
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfft/fftfast.c,v 14.5 2004/12/21 07:18:58 morrison Exp $ (ARL)";
d128 1
a128 1
 *  Thus we can subscript by: table[(m / col) * N/2]  
d261 1
a261 1
			
@


14.6.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d35 1
a35 1
 *
d39 1
a39 1
 *
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d128 1
a128 1
 *  Thus we can subscript by: table[(m / col) * N/2]
d261 1
a261 1

@


14.5
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfft/fftfast.c,v 14.4 2004/12/21 06:18:44 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a39 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfft/fftfast.c,v 14.3 2004/12/21 05:45:22 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfft/fftfast.c,v 14.2 2004/12/21 02:29:40 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfft/fftfast.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfft/fftfast.c,v 1.4 2004/09/08 19:59:00 kermit Exp $ (ARL)";
@


1.4
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfft/fftfast.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (ARL)";
d312 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfft/fftfast.c,v 1.2 2004/06/08 22:04:22 morrison Exp $ (ARL)";
d30 1
a30 1

@


1.2
log
@obliterate externs.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libfft/fftfast.c,v 11.8 2004/05/10 15:30:45 erikg Exp $ (ARL)";
a34 2

#include "externs.h"
@

