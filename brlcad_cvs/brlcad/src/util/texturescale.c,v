head	14.15;
access;
symbols
	rel-7-10-4:14.13
	STABLE:14.13.0.2
	rel-7-10-2:14.13
	rel-7-10-0:14.13
	rel-7-8-4:14.10
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.2
	rel-7-6-0:14.4
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.15
date	2007.11.21.20.49.14;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.27.01.41.55;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.57;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.08.01.15.02.58;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.28.22.46.19;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.23.07.47.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.08.21.14.29.55;	author brlcad;	state Exp;
branches
	14.4.2.1;
next	14.3;

14.3
date	2005.01.30.20.31.34;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.59;	author morrison;	state Exp;
branches;
next	;

14.4.2.1
date	2005.11.13.13.46.21;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                  T E X T U R E S C A L E . C
 * BRL-CAD
 *
 * Copyright (c) 1997-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file texturescale.c
 *
 *	Scale a PIX(5) stream to map onto a curved solid
 *
 *  Author -
 *	Paul J. Tanenbaum
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.14 2007/11/21 18:55:37 erikgreenwald Exp $ (ARL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "vmath.h"
#include "bu.h"
#include "bn.h"
#include "fb.h"


#define	SPHERE		0
#define	TORUS		1

static char		*file_name;
static FILE		*infp;

static int		fileinput = 0;	/* Is input a file (not stdin)? */
static int		autosize = 0;	/* Try to guess input dimensions? */

static long int		file_width = 512L;
static long int		file_height = 512L;

static int		solid_type = SPHERE;
static fastf_t		r1, r2;		/* radii */

#define	OPT_STRING	"ahn:s:w:ST:?"

#define	made_it()	(void) fprintf(stderr, "Made it to %s:%d\n",	\
				__FILE__, __LINE__);			\
				fflush(stderr)
static char usage[] = "\
Usage: texturescale [-T 'r1 r2' | -S]\n\
		 [-ah] [-s squaresize] [-w file_width] [-n file_height]\n\
		 [file.pix]\n";

/*
 *		    R E A D _ R A D I I ( )
 *
 *	Read in the radii for a torus
 */
static int read_radii (fastf_t *r1p, fastf_t *r2p, char *buf)
{
    double	tmp[2];

    if (sscanf(buf, "%lf %lf", tmp, tmp + 1) != 2)
	return (0);
    if ((tmp[0] <= 0.0) || (tmp[1] <= 0.0))
	    return (0);
    *r1p = tmp[0];
    *r2p = tmp[1];
    return (1);
}

/*
 *		    R E A D _ R O W ( )
 */
static int read_row (char *rp, long int width, FILE *infp)
{
    if (fread(rp + 3, 3, width, infp) != width)
	return (0);
    *(rp + RED) = *(rp + GRN) = *(rp + BLU) = 0;
    *(rp + 3 * (width + 1) + RED) =
    *(rp + 3 * (width + 1) + GRN) =
    *(rp + 3 * (width + 1) + BLU) = 0;
    return (1);
}

/*
 *		    G E T _ A R G S ( )
 */
static int
get_args (int argc, register char **argv)
{
    register int c;

    while ((c = bu_getopt( argc, argv, OPT_STRING)) != EOF)
    {
	switch (c)
	{
	    case 'a':
		autosize = 1;
		break;
	    case 'h':
		file_height = file_width = 1024L;
		autosize = 0;
		break;
	    case 'n':
		file_height = atol(bu_optarg);
		autosize = 0;
		break;
	    case 's':
		file_height = file_width = atol(bu_optarg);
		autosize = 0;
		break;
	    case 'w':
		file_width = atol(bu_optarg);
		autosize = 0;
		break;
	    case 'S':
		solid_type = SPHERE;
		break;
	    case 'T':
		if (! read_radii(&r1, &r2, bu_optarg))
		{
		    (void) fprintf(stderr,
			"Illegal torus radii: '%s'\n", bu_optarg);
		    return (0);
		}
		solid_type = TORUS;
		break;
	    case '?':
		(void) fputs(usage, stderr);
		bu_exit (0, NULL);
	    default:
		return (0);
	}
    }

    if (bu_optind >= argc)
    {
	if(isatty(fileno(stdin)))
	{
	    (void) fprintf(stderr, "texturescale: cannot read from tty\n");
	    return(0);
	}
	file_name = "stdin";
	infp = stdin;
    }
    else
    {
	file_name = argv[bu_optind];
	if ((infp = fopen(file_name, "r")) == NULL)
	{
	    perror(file_name);
	    (void) fprintf(stderr, "Cannot open file '%s'\n", file_name);
	    return (0);
	}
	++fileinput;
    }

    if (argc > ++bu_optind)
	(void) fprintf(stderr, "texturescale: excess argument(s) ignored\n");

    return (1);
}

/*
 *			M A I N ( )
 */
int
main (int argc, char **argv)
{
    char		*inbuf;		/* The input scanline */
    char		*outbuf;	/*  "  output    "    */
    char		*in, *out;	/* Pointers into inbuf and outbuf */
    fastf_t		twice_r1r2;
    fastf_t		squares;
    fastf_t		scale_fac;
    fastf_t		theta;
    fastf_t		x;		/* Scale factor for pixel blending */
    int			i;		/* Pixel index in inbuf */
    int			j;		/*   "     "    " outbuf */
    long int		row;
    long int		row_width;

    if (!get_args( argc, argv ))
    {
	(void) fputs(usage, stderr);
	bu_exit (1, NULL);
    }

    if (solid_type == SPHERE)
    {
	(void) fprintf(stderr, "Sphere scaling not yet implemented\n");
	bu_exit (1, NULL);
    }
    else if (solid_type != TORUS)
    {
	(void) fprintf(stderr, "Illegal solid type %d\n", solid_type);
	bu_exit (0, NULL);
    }

    /*
     *	Autosize the input if appropriate
     */
    if (fileinput && autosize)
    {
	unsigned long int	w, h;

	if (fb_common_file_size(&w, &h, file_name, 3))
	{
	    file_width = (long)w;
	    file_height = (long)h;
	}
	else
	    (void) fprintf(stderr, "texturescale: unable to autosize\n");
    }

    /*
     *	Initialize some runtime constants
     */
    twice_r1r2 = 2 * r1 * r2;
    squares = r1 * r1 + r2 * r2;
    scale_fac = file_width / (r1 + r2);

    /*
     *	Allocate 1-scanline buffers for input and output
     */
    outbuf = bu_malloc(3*file_width, "outbuf");
    inbuf  = bu_malloc(3*file_width, "inbuf");

    /*
     *	Do the filtering
     */
    for (row = 0; row < file_height; ++row)
    {
	/*
	 *	Read an input scanline
	 */
	if (! read_row(inbuf, file_width, infp))
	{
	    perror(file_name);
	    (void) fprintf(stderr, "texturescale:  fread() error\n");
	    bu_exit (1, NULL);
	}

	/*
	 *	Determine how much of the input scanline we want
	 */
	theta = 2 * bn_pi * row / file_height;
	row_width = scale_fac * sqrt(squares - twice_r1r2 * cos(theta));
	in = inbuf + ((file_width - row_width) / 2) * 3;
	out = outbuf;

	/*
	 *	Scale the input scanline into the output scanline
	 */
	for (i = j = 1; j <= file_width; ++j)
	{
	    if (i * file_width < j * row_width)
	    {
		x = j - (i * file_width) / row_width;
		VBLEND2(out, (1.0 - x), in, x, in + 3);
		++i;
		in += 3;
	    }
	    else
		VMOVE(out, in);
	    out += 3;
	}

	/*
	 *	Write the output scanline
	 */
	if (fwrite(outbuf, 3, file_width, stdout) != file_width)
	{
	    perror("stdout");
	    bu_exit (2, NULL);
	}
    }

    bu_exit (1, NULL);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@exit->bu_exit where applicable
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.13 2007/01/27 01:41:55 brlcad Exp $ (ARL)";
d153 1
a153 1
		bu_exit (0, "");
d209 1
a209 1
	bu_exit (1, "");
d215 1
a215 1
	bu_exit (1, "");
d220 1
a220 1
	bu_exit (0, "");
d264 1
a264 1
	    bu_exit (1, "");
d298 1
a298 1
	    bu_exit (2, "");
d302 1
a302 1
    bu_exit (1, "");
@


14.13
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.12 2007/01/23 01:13:57 brlcad Exp $ (ARL)";
d153 1
a153 1
		exit (0);
d209 1
a209 1
	exit (1);
d215 1
a215 1
	exit (1);
d220 1
a220 1
	exit (0);
d264 1
a264 1
	    exit(1);
d298 1
a298 1
	    exit(2);
d302 1
a302 1
    exit (1);
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.11 2007/01/20 14:37:07 brlcad Exp $ (ARL)";
d73 2
a74 2
                 [-ah] [-s squaresize] [-w file_width] [-n file_height]\n\
                 [file.pix]\n";
@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.10 2006/08/01 15:02:58 brlcad Exp $ (ARL)";
@


14.10
log
@refactor the three asize.c implementations (libbn, libfb, & canon) into just one.  libbn had the most comprehensive and updated version, but the logic belongs in libfb.  so, the bn_common autosizing functions are now consolidated to libfb, refactoring accordingly.
@
text
@d4 1
a4 1
 * Copyright (c) 1997-2006 United States Government as represented by
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.9 2006/01/28 22:46:19 brlcad Exp $ (ARL)";
@


14.9
log
@header cleanup, include stdlib.h for atol(). fixes some 64-bitness
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.8 2006/01/23 07:47:59 brlcad Exp $ (ARL)";
d231 1
a231 1
	if (bn_common_file_size(&w, &h, file_name, 3))
@


14.8
log
@libbu for allocations
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.7 2006/01/18 06:46:28 brlcad Exp $ (ARL)";
d38 3
a43 2
#include <stdio.h>
#include <math.h>
@


14.7
log
@update copyright to 2006
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (ARL)";
d249 2
a250 2
    outbuf = malloc(3*file_width);
    inbuf  = malloc(3*file_width);
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1997-2005 United States Government as represented by
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.5 2005/09/21 19:05:37 brlcad Exp $ (ARL)";
@


14.5
log
@needs bu.h for bu_getopt
@
text
@d27 1
a27 1
 *  
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.4 2005/08/21 14:29:55 brlcad Exp $ (ARL)";
@


14.4
log
@convert image dimensions to long ints to support larger image sizes.  quell other various const warnings too.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.3 2005/01/30 20:31:34 brlcad Exp $ (ARL)";
d116 1
a116 1
    while ((c = getopt( argc, argv, OPT_STRING)) != EOF)
d128 1
a128 1
		file_height = atol(optarg);
d132 1
a132 1
		file_height = file_width = atol(optarg);
d136 1
a136 1
		file_width = atol(optarg);
d143 1
a143 1
		if (! read_radii(&r1, &r2, optarg))
d146 1
a146 1
			"Illegal torus radii: '%s'\n", optarg);
d159 1
a159 1
    if (optind >= argc)
d171 1
a171 1
	file_name = argv[optind];
d181 1
a181 1
    if (argc > ++optind)
@


14.4.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 1
 *
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d116 1
a116 1
    while ((c = bu_getopt( argc, argv, OPT_STRING)) != EOF)
d128 1
a128 1
		file_height = atol(bu_optarg);
d132 1
a132 1
		file_height = file_width = atol(bu_optarg);
d136 1
a136 1
		file_width = atol(bu_optarg);
d143 1
a143 1
		if (! read_radii(&r1, &r2, bu_optarg))
d146 1
a146 1
			"Illegal torus radii: '%s'\n", bu_optarg);
d159 1
a159 1
    if (bu_optind >= argc)
d171 1
a171 1
	file_name = argv[bu_optind];
d181 1
a181 1
    if (argc > ++bu_optind)
@


14.3
log
@update copyright to 2005
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/texturescale.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (ARL)";
d39 1
a39 1
# include <unistd.h>
a40 2
                                                                                                                                                                            

d50 1
d60 2
a61 2
static int		file_width = 512;
static int		file_height = 512;
d97 1
a97 1
static int read_row (char *rp, int file_width, FILE *infp)
d99 1
a99 1
    if (fread(rp + 3, 3, file_width, infp) != file_width)
d102 3
a104 3
    *(rp + 3 * (file_width + 1) + RED) =
    *(rp + 3 * (file_width + 1) + GRN) =
    *(rp + 3 * (file_width + 1) + BLU) = 0;
d124 1
a124 1
		file_height = file_width = 1024;
d128 1
a128 1
		file_height = atoi(optarg);
d132 1
a132 1
		file_height = file_width = atoi(optarg);
d136 1
a136 1
		file_width = atoi(optarg);
d203 2
a204 2
    int			row;
    int			row_width;
d228 1
a228 1
	int	w, h;
d232 2
a233 2
	    file_width = w;
	    file_height = h;
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1997-2004 United States Government as represented by
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/texturescale.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *		    T E X T U R E S C A L E . C
a30 9
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1997-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/texturescale.c,v 1.4 2004/08/02 23:01:53 morrison Exp $ (ARL)";
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/texturescale.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (ARL)";
d295 10
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/texturescale.c,v 1.2 2004/06/08 22:04:47 morrison Exp $ (ARL)";
d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d29 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/texturescale.c,v 1.11 2004/05/10 15:30:51 erikg Exp $ (ARL)";
a29 2


a33 1
#include "externs.h"		/* For getopt, etc */
@

