head	14.14;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.14
date	2007.11.21.20.49.13;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.07.26.01.13.59;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.27.01.41.53;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.52;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.05;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.28.00.36.30;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.22.00.21.51;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.32;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.45.40;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.04.53.00;	author kermit;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.43;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.43;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                         B W R O T . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file bwrot.c
 *
 *  Rotate, Invert, and/or Reverse the pixels in a Black
 *  and White (.bw) file.
 *
 *  The rotation logic was worked out for data ordered with
 *  "upper left" first.  It is being used on files in first
 *  quadrant order (lower left first).  Thus the "forward",
 *  "backward" flags are reversed.
 *
 *  The code was designed to never need to seek on the input,
 *  while it *may* need to seek on output (if the max buffer
 *  is too small).  It would be nice if we could handle the
 *  reverse case also (e.g. pipe on stdout).
 *
 *  Note that this program can be applied to any collection
 *  of single byte entities.
 *
 *  Author -
 *	Phillip Dykstra
 *	24 Sep 1986
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.13 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"


#define	MAXBUFBYTES	(1280*1024)

int	buflines, scanbytes;
int	firsty = -1;	/* first "y" scanline in buffer */
int	lasty = -1;	/* last "y" scanline in buffer */
unsigned char *buffer;
unsigned char *bp;
unsigned char *obuf;
unsigned char *obp;

int	nxin = 512;
int	nyin = 512;
int	yin, xout, yout;
int	plus90, minus90, reverse, invert;
double	angle;

static	char usage[] = "\
Usage: bwrot [-f -b -r -i] [-s squaresize]\n\
	[-w width] [-n height] [file.bw] > file.bw\n\
  or   bwrot -a angle [-s squaresize]\n\
	[-w width] [-n height] [file.bw] > file.bw\n";

void	fill_buffer(void), reverse_buffer(void), arbrot(double a);

static char	*file_name;
FILE	*ifp, *ofp;

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "fbrihs:w:n:S:W:N:a:" )) != EOF )  {
		switch( c )  {
		case 'f':
			minus90++;
			break;
		case 'b':
			plus90++;
			break;
		case 'r':
			reverse++;
			break;
		case 'i':
			invert++;
			break;
		case 'h':
			/* high-res */
			nxin = nyin = 1024;
			break;
		case 'S':
		case 's':
			/* square size */
			nxin = nyin = atoi(bu_optarg);
			break;
		case 'W':
		case 'w':
			nxin = atoi(bu_optarg);
			break;
		case 'N':
		case 'n':
			nyin = atoi(bu_optarg);
			break;
		case 'a':
			angle = atof(bu_optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	/* XXX - backward compatability hack */
	if( bu_optind+2 == argc ) {
		nxin = atoi(argv[bu_optind++]);
		nyin = atoi(argv[bu_optind++]);
	}
	if( bu_optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "-";
		ifp = stdin;
	} else {
		file_name = argv[bu_optind];
		if( (ifp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"bwrot: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
	}

	if ( argc > ++bu_optind )
		(void)fprintf( stderr, "bwrot: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	int	x, y;
	long	outbyte, outplace;

	if ( !get_args( argc, argv ) || isatty(fileno(stdout)) )  {
		(void)fputs(usage, stderr);
		bu_exit ( 1, NULL );
	}

	ofp = stdout;

	scanbytes = nxin;
	buflines = MAXBUFBYTES / scanbytes;
	if( buflines <= 0 ) {
		fprintf( stderr, "bwrot: I'm not compiled to do a scanline that long!\n" );
		bu_exit ( 1, NULL );
	}
	if( buflines > nyin ) buflines = nyin;
	buffer = (unsigned char *)malloc( buflines * scanbytes );
	obuf = (unsigned char *)malloc( (nyin > nxin) ? nyin : nxin );
	if( buffer == (unsigned char *)0 || obuf == (unsigned char *)0 ) {
		fprintf( stderr, "bwrot: malloc failed\n" );
		bu_exit ( 3, NULL );
	}

	/*
	 * Break out to added arbitrary angle routine
	 */
	if( angle ) {
		arbrot( angle );
		bu_exit ( 0, NULL );
	}

	/*
	 * Clear our "file pointer."  We need to maintain this
	 * In order to tell if seeking is required.  ftell() always
	 * fails on pipes, so we can't use it.
	 */
	outplace = 0;

	yin = 0;
	while( yin < nyin ) {
		/* Fill buffer */
		fill_buffer();
		if( !buflines )
			break;
		if( reverse )
			reverse_buffer();
		if( plus90 ) {
			for( x = 0; x < nxin; x++ ) {
				obp = obuf;
				bp = &buffer[ (lasty-firsty)*scanbytes + x ];
				for( y = lasty; y >= yin; y-- ) { /* firsty? */
					*obp++ = *bp;
					bp -= scanbytes;
				}
				yout = x;
				xout = (nyin - 1) - lasty;
				outbyte = ((yout * nyin) + xout);
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "bwrot: Can't seek on output, yet I need to!\n" );
						bu_exit ( 3, NULL );
					}
					outplace = outbyte;
				}
				fwrite( obuf, 1, buflines, ofp );
				outplace += buflines;
			}
		} else if( minus90 ) {
			for( x = nxin-1; x >= 0; x-- ) {
				obp = obuf;
				bp = &buffer[ x ];
				for( y = firsty; y <= lasty; y++ ) {
					*obp++ = *bp;
					bp += scanbytes;
				}
				yout = (nxin - 1) - x;
				xout = yin;
				outbyte = ((yout * nyin) + xout);
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "bwrot: Can't seek on output, yet I need to!\n" );
						bu_exit ( 3, NULL );
					}
					outplace = outbyte;
				}
				fwrite( obuf, 1, buflines, ofp );
				outplace += buflines;
			}
		} else if( invert ) {
			for( y = lasty; y >= firsty; y-- ) {
				yout = (nyin - 1) - y;
				outbyte = yout * scanbytes;
				if( outplace != outbyte ) {
					if( fseek( ofp, outbyte, 0 ) < 0 ) {
						fprintf( stderr, "bwrot: Can't seek on output, yet I need to!\n" );
						bu_exit ( 3, NULL );
					}
					outplace = outbyte;
				}
				fwrite( &buffer[(y-firsty)*scanbytes], 1, scanbytes, ofp );
				outplace += scanbytes;
			}
		} else {
			/* Reverse only */
			for( y = 0; y < buflines; y++ ) {
				fwrite( &buffer[y*scanbytes], 1, scanbytes, ofp );
			}
		}

		yin += buflines;
	}
	return 0;
}

void
fill_buffer(void)
{
	buflines = fread( buffer, scanbytes, buflines, ifp );

	firsty = lasty + 1;
	lasty = firsty + (buflines - 1);
}

void
reverse_buffer(void)
{
	int	i;
	unsigned char *p1, *p2, temp;

	for( i = 0; i < buflines; i++ ) {
		p1 = &buffer[ i * scanbytes ];
		p2 = p1 + (scanbytes - 1);
		while( p1 < p2 ) {
			temp = *p1;
			*p1++ = *p2;
			*p2-- = temp;
		}
	}
}

/*
 *  Arbitrary angle rotation.
 *  Currently this needs to be able to buffer the entire image
 *  in memory at one time.
 *
 *  To rotate a point (x,y) CCW about the origin:
 *    x' = x cos(a) - y sin(a)
 *    y' = x sin(a) + y cos(a)
 *  To rotate it about a point (xc,yc):
 *    x' = (x-xc) cos(a) - (y-yc) sin(a) + xc
 *       = x cos(a) - y sin(a) + [xc - xc cos(a) + yc sin(a)]
 *    y' = (x-xc) sin(a) + (y-yc) cos(a) + yc
 *	 = x sin(a) + y cos(a) + [yc - yc cos(a) - xc sin(a)]
 *  So, to take one step in x:
 *    dx' = cos(a)
 *    dy' = sin(a)
 *  or one step in y:
 *    dx' = -sin(a)
 *    dy' = cos(a)
 */
#ifndef M_PI
#define	PI	3.1415926535898
#else
#define PI M_PI
#endif
#define	DtoR(x)	((x)*PI/180.0)

void
arbrot(double a)
		/* rotation angle */
{
	int	x, y;				/* working coord */
	double	x2, y2;				/* its rotated position */
	double	xc, yc;				/* rotation origin */
	int	x_min, y_min, x_max, y_max;	/* area to rotate */
	double	x_goop, y_goop;
	double	sina, cosa;

	if( buflines != nyin ) {
		/* I won't all fit in the buffer */
		fprintf(stderr,"bwrot: Sorry but I can't do an arbitrary rotate of an image this large\n");
		bu_exit (1, NULL);
	}
	if( buflines > nyin ) buflines = nyin;
	fill_buffer();

	/*
	 * Convert rotation angle to radians.
	 * Because we "pull down" the pixel from their rotated positions
	 * to their standard ones, the sign of the rotation is reversed.
	 */
	a = -DtoR(a);
	sina = sin(a);
	cosa = cos(a);

	/* XXX - Let the user pick the rotation origin? */
	xc = nxin / 2.0;
	yc = nyin / 2.0;

	x_goop = xc - xc * cosa + yc * sina;
	y_goop = yc - yc * cosa - xc * sina;

	x_min = 0;
	y_min = 0;
	x_max = nxin;
	y_max = nyin;

	for( y = y_min; y < y_max; y++ ) {
		x2 = x_min * cosa - y * sina + x_goop;
		y2 = x_min * sina + y * cosa + y_goop;
		for( x = x_min; x < x_max; x++ ) {
			/* check for in bounds */
			if( x2 >= 0 && x2 < nxin && y2 >= 0 && y2 < nyin )
				putchar(buffer[(int)y2*nyin + (int)x2]);
			else
				putchar(0);	/* XXX - setable color? */
			/* "forward difference" our coordinates */
			x2 += cosa;
			y2 += sina;
		}
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@exit->bu_exit where applicable
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.12 2007/07/26 01:13:59 brlcad Exp $ (BRL)";
d166 1
a166 1
		bu_exit ( 1, "" );
d175 1
a175 1
		bu_exit ( 1, "" );
d182 1
a182 1
		bu_exit ( 3, "" );
d190 1
a190 1
		bu_exit ( 0, "" );
d222 1
a222 1
						bu_exit ( 3, "" );
d243 1
a243 1
						bu_exit ( 3, "" );
d257 1
a257 1
						bu_exit ( 3, "" );
d343 1
a343 1
		bu_exit (1, "");
@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.11 2007/01/27 01:41:53 brlcad Exp $ (BRL)";
d166 1
a166 1
		exit( 1 );
d175 1
a175 1
		exit( 1 );
d182 1
a182 1
		exit( 3 );
d190 1
a190 1
		exit( 0 );
d222 1
a222 1
						exit( 3 );
d243 1
a243 1
						exit( 3 );
d257 1
a257 1
						exit( 3 );
d343 1
a343 1
		exit(1);
@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a41 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.10 2007/01/23 01:13:52 brlcad Exp $ (BRL)";
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d48 1
a48 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.9 2007/01/20 14:37:05 brlcad Exp $ (BRL)";
d335 1
a335 1
      	  	/* rotation angle */
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d48 1
a48 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.8 2006/01/28 00:36:30 brlcad Exp $ (BRL)";
@


14.8
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.7 2006/01/18 06:46:27 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
a53 5
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif


d57 3
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.5 2005/09/22 00:21:51 brlcad Exp $ (BRL)";
@


14.5
log
@add bu.h for bu_getopt stuff
@
text
@d42 1
a42 1
 *  
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.4 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
d57 1
a57 1
                                                                                                                                                                            
d260 1
a260 1
				outbyte = yout * scanbytes; 
@


14.4
log
@needs bu.h for bu_getopt
@
text
@d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.3 2005/01/30 20:31:32 brlcad Exp $ (BRL)";
d64 1
@


14.3
log
@update copyright to 2005
@
text
@d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/bwrot.c,v 14.2 2004/12/21 03:45:40 butler Exp $ (BRL)";
d98 1
a98 1
	while ( (c = getopt( argc, argv, "fbrihs:w:n:S:W:N:a:" )) != EOF )  {
d119 1
a119 1
			nxin = nyin = atoi(optarg);
d123 1
a123 1
			nxin = atoi(optarg);
d127 1
a127 1
			nyin = atoi(optarg);
d130 1
a130 1
			angle = atof(optarg);
d139 3
a141 3
	if( optind+2 == argc ) {
		nxin = atoi(argv[optind++]);
		nyin = atoi(argv[optind++]);
d143 1
a143 1
	if( optind >= argc )  {
d149 1
a149 1
		file_name = argv[optind];
d158 1
a158 1
	if ( argc > ++optind )
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d42 1
a42 1
 *
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d57 1
a57 1

a63 1
#include "bu.h"
d98 1
a98 1
	while ( (c = bu_getopt( argc, argv, "fbrihs:w:n:S:W:N:a:" )) != EOF )  {
d119 1
a119 1
			nxin = nyin = atoi(bu_optarg);
d123 1
a123 1
			nxin = atoi(bu_optarg);
d127 1
a127 1
			nyin = atoi(bu_optarg);
d130 1
a130 1
			angle = atof(bu_optarg);
d139 3
a141 3
	if( bu_optind+2 == argc ) {
		nxin = atoi(argv[bu_optind++]);
		nyin = atoi(argv[bu_optind++]);
d143 1
a143 1
	if( bu_optind >= argc )  {
d149 1
a149 1
		file_name = argv[bu_optind];
d158 1
a158 1
	if ( argc > ++bu_optind )
d259 1
a259 1
				outbyte = yout * scanbytes;
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/bwrot.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			B W R O T . C
a46 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/bwrot.c,v 1.5 2004/09/09 04:53:00 kermit Exp $ (BRL)";
@


1.5
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/bwrot.c,v 1.4 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d375 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/bwrot.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (BRL)";
d43 2
d49 1
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/bwrot.c,v 1.2 2004/06/08 22:04:43 morrison Exp $ (BRL)";
d37 1
a37 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d41 4
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/bwrot.c,v 11.10 2004/05/10 15:30:50 erikg Exp $ (BRL)";
a40 2


a44 1
#include "externs.h"		/* For getopt */
@

