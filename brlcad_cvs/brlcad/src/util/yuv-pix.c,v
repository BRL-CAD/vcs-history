head	14.16;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	rel-7-10-2:14.14
	rel-7-10-0:14.14
	rel-7-8-4:14.12
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.2
	rel-7-6-0:14.5
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.16
date	2007.11.21.20.49.14;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.11.21.18.55.38;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.57;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.08.01.15.02.58;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.07.09.10.10.29;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.28.22.46.19;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.23.07.47.59;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.08.21.14.27.41;	author brlcad;	state Exp;
branches
	14.5.2.1;
next	14.4;

14.4
date	2005.06.30.00.08.37;	author erikgreenwald;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.34;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.22.00;	author morrison;	state Exp;
branches;
next	;

14.5.2.1
date	2005.11.13.13.46.21;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.16
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                       Y U V - P I X . C
 * BRL-CAD
 *
 * Copyright (c) 1995-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file yuv-pix.c
 *
 *  Convert a .yuv file to a .pix file, i.e. in CCIR-601 format.
 *  Only the active pixels are recorded in the file, as in
 *  the .YUV files used with an Abekas A60 D-1 video disk recorder.
 *
 *  Because .pix is first quadrant and .yuv is fourth quadrant,
 *  the entire image is processed in memory.
 *
 *  It is not clear that this tool is useful on image sizes other
 *  than the default of 720 x 485.
 *
 *  The code was liberally borrowed from libfb/if_ab.c
 *
 *  Authors -
 *	Michael John Muuss
 *	Phil Dykstra
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.15 2007/11/21 18:55:38 erikgreenwald Exp $ (ARL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
#ifdef HAVE_FCNTL_H
#  include <fcntl.h>
#endif

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"


static char	*file_name;
static int	infd;

static int	fileinput = 0;		/* file or pipe on input? */
static int	autosize = 0;		/* !0 to autosize input */

static long int	file_width = 720L;	/* default input width */
static long int	file_height = 485L;	/* default input height */

void ab_rgb_to_yuv(unsigned char *yuv_buf, unsigned char *rgb_buf, long int len);
void ab_yuv_to_rgb(unsigned char *rgb_buf, unsigned char *yuv_buf, long int len);

static char usage[] = "\
Usage: yuv-pix [-h] [-a]\n\
	[-s squaresize] [-w file_width] [-n file_height] [file.yuv] > file.pix\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "ahs:w:n:" )) != EOF )  {
		switch( c )  {
		case 'a':
			autosize = 1;
			break;
		case 'h':
			/* high-res */
			file_height = file_width = 1024L;
			autosize = 0;
			break;
		case 's':
			/* square file size */
			file_height = file_width = atol(bu_optarg);
			autosize = 0;
			break;
		case 'w':
			file_width = atol(bu_optarg);
			autosize = 0;
			break;
		case 'n':
			file_height = atol(bu_optarg);
			autosize = 0;
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "-";
		infd = fileno(stdin);
	} else {
		file_name = argv[bu_optind];
		if( (infd = open(file_name, 0)) < 0 )  {
			perror(file_name);
			(void)fprintf( stderr,
				"yuv-pix: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
		fileinput++;
	}

	if ( argc > ++bu_optind )
		(void)fprintf( stderr, "yuv-pix: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	unsigned char	*inbuf;
	unsigned char	*outbuf;
	long int	y;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit ( 1, NULL );
	}

	/* autosize input? */
	if( fileinput && autosize ) {
		unsigned long int	w, h;
		if( fb_common_file_size(&w, &h, file_name, 2) ) {
			file_width = (long)w;
			file_height = (long)h;
		} else {
			fprintf(stderr, "yuv-pix: unable to autosize\n");
		}
	}

	/* Allocate full size buffers for input and output */
	inbuf = bu_malloc( 2*file_width*file_height+8, "inbuf" );
	outbuf = bu_malloc( 3*file_width*file_height+8, "outbuf" );

	if( bu_mread( infd, inbuf, 2*file_width*file_height ) < 2*file_width*file_height )  {
	    perror("READ ERROR");
	    fprintf(stderr, "yuv-pix: short input file, aborting\n");
	    bu_exit (1, NULL);
	}

	for( y = 0; y < file_height; y++ )  {
		ab_yuv_to_rgb(
			&outbuf[y*file_width*3],
			&inbuf[(file_height-1-y)*file_width*2],
			file_width );
	}

	if( write( 1, (void *)outbuf, 3*file_width*file_height ) < 3*file_width*file_height )  {
		perror("stdout");
		fprintf(stderr, "yuv-pix: output write error, aborting\n");
		bu_exit (2, NULL);
	}

	bu_free(inbuf, "inbuf");
	bu_free(outbuf, "outbuf");

	return 0;
}


/*************************************************************************
 *************************************************************************
 *  Herein lies the conversion between YUV and RGB
 *************************************************************************
 *************************************************************************
 */
/*  A 4:2:2 framestore uses 2 bytes per pixel.  The even pixels (from 0)
 *  hold Cb and Y, the odd pixels Cr and Y.  Thus a scan line has:
 *      Cb Y Cr Y Cb Y Cr Y ...
 *  If we are at an even pixel, we use the Cr value following it.  If
 *  we are at an odd pixel, we use the Cb value following it.
 *
 *  Y:       0 .. 219 range, offset by 16   [16 .. 235]
 *  U, V: -112 .. +112 range, offset by 128 [16 .. 240]
 */

#define	V5DOT(a,b)	(a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3]+a[4]*b[4])
#define	floor(d)	(d>=0?(int)d:((int)d==d?d:(int)(d-1.0)))
#define	CLIP(out,in)		{ register int t; \
		if( (t = (in)) < 0 )  (out) = 0; \
		else if( t >= 255 )  (out) = 255; \
		else (out) = t; }

#define	LINE_LENGTH	720
#define	FRAME_LENGTH	486

static double	y_weights[] = {  0.299,   0.587,   0.114 };
static double	u_weights[] = { -0.1686, -0.3311,  0.4997 };
static double	v_weights[] = {  0.4998, -0.4185, -0.0813 };

static double	y_filter[] = { -0.05674, 0.01883, 1.07582, 0.01883, -0.05674 };
static double	u_filter[] = {  0.14963, 0.22010, 0.26054, 0.22010,  0.14963 };
static double	v_filter[] = {  0.14963, 0.22010, 0.26054, 0.22010,  0.14963 };

/* XXX should be dynamically allocated.  Make 4X default size */
static double	ybuf[724*4];
static double	ubuf[724*4];
static double	vbuf[724*4];

/* RGB to YUV */
void
ab_rgb_to_yuv(unsigned char *yuv_buf, unsigned char *rgb_buf, long int len)
{
	register unsigned char *cp;
	register double	*yp, *up, *vp;
	register long int	i;
	static int	first=1;

	if(first)  {
		/* SETUP */
		for( i = 0; i < 5; i++ ) {
			y_filter[i] *= 219.0/255.0;
			u_filter[i] *= 224.0/255.0;
			v_filter[i] *= 224.0/255.0;
		}
		first = 0;
	}

	/* Matrix RGB's into separate Y, U, and V arrays */
	yp = &ybuf[2];
	up = &ubuf[2];
	vp = &vbuf[2];
	cp = rgb_buf;
	for( i = len; i; i-- ) {
		*yp++ = VDOT( y_weights, cp );
		*up++ = VDOT( u_weights, cp );
		*vp++ = VDOT( v_weights, cp );
		cp += 3;
	}

	/* filter, scale, and sample YUV arrays */
	yp = ybuf;
	up = ubuf;
	vp = vbuf;
	cp = yuv_buf;
	for( i = len/2; i; i-- ) {
		*cp++ = V5DOT(u_filter,up) + 128.0;	/* u */
		*cp++ = V5DOT(y_filter,yp) + 16.0;	/* y */
		*cp++ = V5DOT(v_filter,vp) + 128.0;	/* v */
		yp++;
		*cp++ = V5DOT(y_filter,yp) + 16.0;	/* y */
		yp++;
		up += 2;
		vp += 2;
	}
}

/* YUV to RGB */
void
ab_yuv_to_rgb(unsigned char *rgb_buf, unsigned char *yuv_buf, long int len)
{
	register unsigned char *rgbp;
	register unsigned char *yuvp;
	register double	y;
	register double	u = 0.0;
	register double	v;
	register long int	pixel;
	long int		last;

	/* Input stream looks like:  uy  vy  uy  vy  */

	rgbp = rgb_buf;
	yuvp = yuv_buf;
	last = len/2;
	for( pixel = last; pixel; pixel-- ) {
		/* even pixel, get y and next v */
		if( pixel == last ) {
			u = ((double)(((int)*yuvp++) - 128)) * (255.0/224.0);
		}
		y = ((double)(((int)*yuvp++) - 16)) * (255.0/219.0);
		v = ((double)(((int)*yuvp++) - 128)) * (255.0/224.0);

		CLIP( *rgbp++, y + 1.4026 * v);			/* R */
		CLIP( *rgbp++, y - 0.3444 * u - 0.7144 * v);	/* G */
		CLIP( *rgbp++, y + 1.7730 * u);			/* B */

		/* odd pixel, got v already, get y and next u */
		y = ((double)(((int)*yuvp++) - 16)) * (255.0/219.0);
		if( pixel != 1 ) {
			u = ((double)(((int)*yuvp++) - 128)) * (255.0/224.0);
		}

		CLIP( *rgbp++, y + 1.4026 * v);			/* R */
		CLIP( *rgbp++, y - 0.3444 * u - 0.7144 * v);	/* G */
		CLIP( *rgbp++, y + 1.7730 * u);			/* B */
	}
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@exit->bu_exit where applicable
@
text
@d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.14 2007/01/23 01:13:57 brlcad Exp $ (ARL)";
d151 1
a151 1
		bu_exit ( 1, "" );
d172 1
a172 1
	    bu_exit (1, "");
d185 1
a185 1
		bu_exit (2, "");
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.13 2007/01/20 14:37:07 brlcad Exp $ (ARL)";
d151 1
a151 1
		exit( 1 );
d172 1
a172 1
	    exit(1);
d185 1
a185 1
		exit(2);
@


14.13
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.12 2006/08/01 15:02:58 brlcad Exp $ (ARL)";
@


14.12
log
@refactor the three asize.c implementations (libbn, libfb, & canon) into just one.  libbn had the most comprehensive and updated version, but the logic belongs in libfb.  so, the bn_common autosizing functions are now consolidated to libfb, refactoring accordingly.
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2006 United States Government as represented by
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.11 2006/07/09 10:10:29 brlcad Exp $ (ARL)";
@


14.11
log
@refactor the mread() calls to the new bu_mread() call.  the bu_mread() function doesn't call perror for you, so the caller may need to if they expected it before.
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.10 2006/01/28 22:46:19 brlcad Exp $ (ARL)";
d158 1
a158 1
		if( bn_common_file_size(&w, &h, file_name, 2) ) {
@


14.10
log
@header cleanup, include stdlib.h for atol(). fixes some 64-bitness
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.9 2006/01/23 07:47:59 brlcad Exp $ (ARL)";
a75 1
static long int	mread(int fd, register unsigned char *bufp, long int n);
d170 4
a173 3
	if( mread( infd, inbuf, 2*file_width*file_height ) < 2*file_width*file_height )  {
		fprintf(stderr, "yuv-pix: short input file, aborting\n");
		exit(1);
a194 30
/*
 *			M R E A D
 *
 * Internal.
 * This function performs the function of a read(II) but will
 * call read(II) multiple times in order to get the requested
 * number of characters.  This can be necessary because pipes
 * and network connections don't deliver data with the same
 * grouping as it is written with.  Written by Robert S. Miles, BRL.
 */
static long int
mread(int fd, register unsigned char *bufp, long int n)
{
	register long int	count = 0;
	register long int	nread;

	do {
		nread = read(fd, (void *)bufp, (size_t)n-count);
		if(nread < 0)  {
			perror("mread");
			return(-1);
		}
		if(nread == 0)
			return((long int)count);
		count += (unsigned long)nread;
		bufp += nread;
	 } while(count < n);

	return((long int)count);
}
@


14.9
log
@libbu for allocations
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.8 2006/01/18 06:46:28 brlcad Exp $ (ARL)";
d49 2
a56 1
#include <stdio.h>
@


14.8
log
@update copyright to 2006
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.7 2005/10/23 04:44:39 brlcad Exp $ (ARL)";
d167 2
a168 2
	inbuf = malloc( 2*file_width*file_height+8 );
	outbuf = malloc( 3*file_width*file_height+8 );
d187 4
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1995-2005 United States Government as represented by
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.6 2005/09/21 19:05:37 brlcad Exp $ (ARL)";
@


14.6
log
@needs bu.h for bu_getopt
@
text
@d38 1
a38 1
 *  
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.5 2005/08/21 14:27:41 brlcad Exp $ (ARL)";
@


14.5
log
@convert image dimensions to long ints to support larger image sizes; remove large non-compiled code block
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.4 2005/06/30 00:08:37 erikgreenwald Exp $ (ARL)";
d88 1
a88 1
	while ( (c = getopt( argc, argv, "ahs:w:n:" )) != EOF )  {
d100 1
a100 1
			file_height = file_width = atol(optarg);
d104 1
a104 1
			file_width = atol(optarg);
d108 1
a108 1
			file_height = atol(optarg);
d117 1
a117 1
	if( optind >= argc )  {
d123 1
a123 1
		file_name = argv[optind];
d134 1
a134 1
	if ( argc > ++optind )
@


14.5.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d38 1
a38 1
 *
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d88 1
a88 1
	while ( (c = bu_getopt( argc, argv, "ahs:w:n:" )) != EOF )  {
d100 1
a100 1
			file_height = file_width = atol(bu_optarg);
d104 1
a104 1
			file_width = atol(bu_optarg);
d108 1
a108 1
			file_height = atol(bu_optarg);
d117 1
a117 1
	if( bu_optind >= argc )  {
d123 1
a123 1
		file_name = argv[bu_optind];
d134 1
a134 1
	if ( argc > ++bu_optind )
@


14.4
log
@added missing includes
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.3 2005/01/30 20:31:34 brlcad Exp $ (ARL)";
d49 3
d53 1
a53 1
# include <unistd.h>
a54 2
                                                                                                                                                                            

a55 1

d57 1
a57 1
# include <fcntl.h>
a60 1

d65 1
d72 2
a73 2
static int	file_width = 720;	/* default input width */
static int	file_height = 485;	/* default input height */
d75 3
a77 2
static int	mread(int fd, register char *bufp, int n);
void		ab_rgb_to_yuv(unsigned char *yuv_buf, unsigned char *rgb_buf, int len), ab_yuv_to_rgb(unsigned char *rgb_buf, unsigned char *yuv_buf, int len);
d95 1
a95 1
			file_height = file_width = 1024;
d100 1
a100 1
			file_height = file_width = atoi(optarg);
d104 1
a104 1
			file_width = atoi(optarg);
d108 1
a108 1
			file_height = atoi(optarg);
d146 3
a148 3
	char	*inbuf;
	char	*outbuf;
	int	y;
d157 1
a157 1
		int	w, h;
d159 2
a160 2
			file_width = w;
			file_height = h;
d182 1
a182 1
	if( write( 1, outbuf, 3*file_width*file_height ) < 3*file_width*file_height )  {
d200 2
a201 2
static int
mread(int fd, register char *bufp, int n)
d203 2
a204 2
	register int	count = 0;
	register int	nread;
d207 1
a207 1
		nread = read(fd, bufp, (unsigned)n-count);
d213 2
a214 2
			return((int)count);
		count += (unsigned)nread;
d218 1
a218 1
	return((int)count);
d262 1
a262 1
ab_rgb_to_yuv(unsigned char *yuv_buf, unsigned char *rgb_buf, int len)
d266 1
a266 1
	register int	i;
d310 1
a310 1
ab_yuv_to_rgb(unsigned char *rgb_buf, unsigned char *yuv_buf, int len)
d317 2
a318 2
	register int	pixel;
	int		last;
a349 225






#if 0

/*
 *			S E P A R A T E
 *
 *  Unpack RGB byte tripples into three separate arrays of integers.
 *  The first and last pixels are replicated twice, to handle border effects.
 *
 *  Updated version:  the outputs are Y U V values, not R G B.
 */
separate( rop, gop, bop, cp, num )
register int	*rop;			/* Y */
register int	*gop;			/* U */
register int	*bop;			/* V */
register unsigned char	*cp;
int		num;
{
	register int 	i;
	register int	r, g, b;

	r = cp[0];
	g = cp[1];
	b = cp[2];

#define YCONV(_r, _g, _b)	(_r * 0.299 + _g * 0.587 + _b * 0.144 + 0.9)
#define UCONV(_r, _g, _b)	(_r * -0.1686 + _g * -0.3311 + _b * 0.4997 + 0.9)
#define VCONV(_r, _g, _b)	(_r * 0.4998 + _g * -0.4185 + _b * -0.0813 + 0.9)

	rop[-1] = rop[-2] = YCONV(r,g,b);
	gop[-1] = gop[-2] = UCONV(r,g,b);
	bop[-1] = bop[-2] = VCONV(r,g,b);

	for( i = num-1; i >= 0; i-- )  {
		r = cp[0];
		g = cp[1];
		b = cp[2];
		cp += 3;
		*rop++ = YCONV(r,g,b);
		*gop++ = UCONV(r,g,b);
		*bop++ = VCONV(r,g,b);
	}

	r = cp[-3];
	g = cp[-2];
	b = cp[-1];

	*rop++ = YCONV(r,g,b);
	*gop++ = UCONV(r,g,b);
	*bop++ = VCONV(r,g,b);

	*rop++ = YCONV(r,g,b);
	*gop++ = UCONV(r,g,b);
	*bop++ = VCONV(r,g,b);
}

/*
 *			C O M B I N E
 *
 *  Combine three separate arrays of integers into a buffer of
 *  RGB byte tripples
 */
combine( cp, rip, gip, bip, num )
register unsigned char	*cp;
register int		*rip;
register int		*gip;
register int		*bip;
int			num;
{
	register int 	i;

#define RCONV(_y, _u, _v)	(_y + 1.4026 * _v)
#define GCONV(_y, _u, _v)	(_y - 0.3444 * _u - 0.7144 * _v)
#define BCONV(_y, _u, _v)	(_y + 1.7730 * _u)

#define CLIP(_v)	( ((_v) <= 0) ? 0 : (((_v) >= 255) ? 255 : (_v)) )

	for( i = num-1; i >= 0; i-- )  {
		register int	y, u, v;
		register int	r, g, b;

		y = *rip++;
		u = *gip++;
		v = *bip++;

		r = RCONV(y,u,v);
		g = GCONV(y,u,v);
		b = BCONV(y,u,v);

		*cp++ = CLIP(r);
		*cp++ = CLIP(g);
		*cp++ = CLIP(b);
	}
}

/*
 *			R I P P L E
 *
 *  Ripple all the scanlines down by one.
 *
 *  Barrel shift all the pointers down, with [0] going back to the top.
 */
ripple( array, num )
int	*array[];
int	num;
{
	register int	i;
	int		*temp;

	temp = array[0];
	for( i=0; i < num-1; i++ )
		array[i] = array[i+1];
	array[num-1] = temp;
}

/*
 *			F I L T E R 5
 *
 *  Apply a 5x5 image pyramid to the input scanline, taking every other
 *  input position to make an output.
 *
 *  Code is arranged so as to vectorize, on machines that can.
 */
filter5( op, lines, num )
int	*op;
int	*lines[];
int	num;
{
	register int	i;
	register int	j;
	register int	*a, *b, *c, *d, *e;

	a = lines[0];
	b = lines[1];
	c = lines[2];
	d = lines[3];
	e = lines[4];

#ifdef VECTORIZE
	/* This version vectorizes */
#	include "noalias.h"
	for( i=0; i < num; i++ )  {
		j = i*2;
		op[i] = (
			  a[j+0] + 2*a[j+1] + 4*a[j+2] + 2*a[j+3] +   a[j+4] +
			2*b[j+0] + 4*b[j+1] + 8*b[j+2] + 4*b[j+3] + 2*b[j+4] +
			4*c[j+0] + 8*c[j+1] +16*c[j+2] + 8*c[j+3] + 4*c[j+4] +
			2*d[j+0] + 4*d[j+1] + 8*d[j+2] + 4*d[j+3] + 2*d[j+4] +
			  e[j+0] + 2*e[j+1] + 4*e[j+2] + 2*e[j+3] +   e[j+4]
			) / 100;
	}
#else
	/* This version is better for non-vectorizing machines */
	for( i=0; i < num; i++ )  {
		op[i] = (
			  a[0] + 2*a[1] + 4*a[2] + 2*a[3] +   a[4] +
			2*b[0] + 4*b[1] + 8*b[2] + 4*b[3] + 2*b[4] +
			4*c[0] + 8*c[1] +16*c[2] + 8*c[3] + 4*c[4] +
			2*d[0] + 4*d[1] + 8*d[2] + 4*d[3] + 2*d[4] +
			  e[0] + 2*e[1] + 4*e[2] + 2*e[3] +   e[4]
			) / 100;
		a += 2;
		b += 2;
		c += 2;
		d += 2;
		e += 2;
	}
#endif
}


/*
 *			F I L T E R 3
 *
 *  Apply a 3x3 image pyramid to the input scanline, taking every other
 *  input position to make an output.
 *
 *  The filter coefficients are positioned so as to align the center
 *  of the filter with the same center used in filter5().
 */
filter3( op, lines, num )
int	*op;
int	*lines[];
int	num;
{
	register int	i;
	register int	j;
	register int	*b, *c, *d;

	b = lines[1];
	c = lines[2];
	d = lines[3];

#ifdef VECTORIZE
	/* This version vectorizes */
#	include "noalias.h"
	for( i=0; i < num; i++ )  {
		j = i*2;
		op[i] = (
			  b[j+1] + 2*b[j+2] +   b[j+3] +
			2*c[j+1] + 4*c[j+2] + 2*c[j+3] +
			  d[j+1] + 2*d[j+2] +   d[j+3]
			) / 16;
	}
#else
	/* This version is better for non-vectorizing machines */
	for( i=0; i < num; i++ )  {
		op[i] = (
			  b[1] + 2*b[2] +   b[3] +
			2*c[1] + 4*c[2] + 2*c[3] +
			  d[1] + 2*d[2] +   d[3]
			) / 16;
		b += 2;
		c += 2;
		d += 2;
	}
#endif
}
#endif	/* 0 */

@


14.3
log
@update copyright to 2005
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/yuv-pix.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (ARL)";
d56 4
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2004 United States Government as represented by
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/yuv-pix.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			Y U V - P I X
a41 9
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1995-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/yuv-pix.c,v 1.4 2004/08/02 23:01:53 morrison Exp $ (ARL)";
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/yuv-pix.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (ARL)";
d559 10
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/yuv-pix.c,v 1.2 2004/06/08 22:04:47 morrison Exp $ (ARL)";
d37 1
a37 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d40 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/yuv-pix.c,v 1.13 2004/05/10 15:30:51 erikg Exp $ (ARL)";
a40 2


a43 1
#include "externs.h"		/* For getopt, etc */
@

