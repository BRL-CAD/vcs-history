head	14.15;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.15
date	2007.11.21.20.49.13;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.02.02.08.48.30;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.56;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.06;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.22.00.21.51;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.09.09.44.09;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.33;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.04.53.00;	author kermit;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.45;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.49;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                       P I X - S U N . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pix-sun.c
 *	Program to take a BRL-CAD PIX format image file and convert the
 *	image to a Sun Microsystems 8-bit deep color "rasterfile" format
 *	image.
 *
 *  Author -
 *	Lee A. Butler
 *
 */
#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"


/* declarations to support use of bu_getopt() system call */
char *options = "hs:w:n:d";
char optflags[sizeof(options)];
char *progname = "(noname)";
int dither = 0;

#define MAPSIZE 256   /* Number of unique color values in Sun Colormap */
/* Description of header for files containing raster images */
struct rasterfile {
    long ras_magic;	/* magic number */
    int	 ras_width;	/* width (pixels) of image */
    int	 ras_height;	/* height (pixels) of image */
    int	 ras_depth;	/* depth (1, 8, or 24 bits) of pixel */
    int	 ras_length;	/* length (bytes) of image */
    int	 ras_type;	/* type of file; see RT_* below */
    int	 ras_maptype;	/* type of colormap; see RMT_* below */
    int	 ras_maplength;	/* length (bytes) of following map */
    /* color map follows for ras_maplength bytes, followed by image */
} ras = {
    0x59a66a95,	/* Magic Number */
    512,	/* default width */
    512,	/* default height */
    8,		/* bits per pixel */
    0,		/* length of image */
    1,		/* standard rasterfile format */
    1,		/* equal RGB color map */
    MAPSIZE*3	/* length (bytes) of RGB colormap */
};

/* The Sun Rasterfile Colormap
 * This colormap has a 6x6x6 color cube, plus 10 extra values for each of
 * the primary colors and the grey levels
 */
unsigned char redmap[MAPSIZE] =
{ 0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,
204,255,  0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,
102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,204,255,
  0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,
204,255,  0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,
102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,204,255,
  0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,
204,255,  0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,
102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,204,255,
  0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,
204,255,  0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,
102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,204,255,
  0, 51,102,153,204,255,  0, 51,102,153,204,255,  0, 51,102,153,
204,255,  0, 51,102,153,204,255, 17, 34, 68, 85,119,136,170,187,
221,238,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0, 17, 34, 68, 85,119,136,170,187,221,238 };

unsigned char grnmap[MAPSIZE] =
{ 0,  0,  0,  0,  0,  0, 51, 51, 51, 51, 51, 51,102,102,102,102,
102,102,153,153,153,153,153,153,204,204,204,204,204,204,255,255,
255,255,255,255,  0,  0,  0,  0,  0,  0, 51, 51, 51, 51, 51, 51,
102,102,102,102,102,102,153,153,153,153,153,153,204,204,204,204,
204,204,255,255,255,255,255,255,  0,  0,  0,  0,  0,  0, 51, 51,
 51, 51, 51, 51,102,102,102,102,102,102,153,153,153,153,153,153,
204,204,204,204,204,204,255,255,255,255,255,255,  0,  0,  0,  0,
  0,  0, 51, 51, 51, 51, 51, 51,102,102,102,102,102,102,153,153,
153,153,153,153,204,204,204,204,204,204,255,255,255,255,255,255,
  0,  0,  0,  0,  0,  0, 51, 51, 51, 51, 51, 51,102,102,102,102,
102,102,153,153,153,153,153,153,204,204,204,204,204,204,255,255,
255,255,255,255,  0,  0,  0,  0,  0,  0, 51, 51, 51, 51, 51, 51,
102,102,102,102,102,102,153,153,153,153,153,153,204,204,204,204,
204,204,255,255,255,255,255,255,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0, 17, 34, 68, 85,119,136,170,187,221,238,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0, 17, 34, 68, 85,119,136,170,187,221,238 };

unsigned char blumap[MAPSIZE] =
{ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
 51, 51, 51, 51, 51, 51, 51, 51,102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,102,102,102,102,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,
204,204,204,204,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,  0,  0,  0,  0,  0,  0,  0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 34, 68, 85,
119,136,170,187,221,238, 17, 34, 68, 85,119,136,170,187,221,238 };


/* indicies of the primary colors and grey values in the color map */
static unsigned char rvec[16] = { 0, 216, 217, 1, 218, 219, 2, 220, 221,
				3, 222, 223, 4, 224, 225, 5};
static unsigned char gvec[16] = {  0, 226, 227,  6, 228, 229, 12, 230,
				231,  18, 232, 233, 24, 234, 235, 30};
static unsigned char bvec[16] = {  0, 236, 237,  36, 238, 239,  72, 240,
				241, 108, 242, 243, 144, 244, 245, 180 };
static unsigned char nvec[16] = {  0, 246, 247,  43, 248, 249,  86, 250,
				251, 129, 252, 253, 172, 254, 255, 215};

#define MAG1	51.0	/* magnitude of dither noise in color cube */
#define MAG2	8.0	/* magnitude of dither noise along primaries*/

#define DITHER(d, v, noise, mag) { \
	if ( (d = v + noise * mag) > 255) d=255; \
	else if (d < 0) d = 0; }

static double table[10] = {0.0, 0.1, -0.4, 0.2, -0.3, 0.3, -0.2, 0.4, -0.1, 0.5};
double *noise_ptr = table;
double *end_table = &table[10];
#define NOISE() (noise_ptr < end_table ? *noise_ptr++ : *(noise_ptr=table) )

/* convert 24 bit pixel into appropriate 8 bit pixel */
#define DITHERMAP(red, green, blue, i) {\
	register int _r, _g, _b; double dr, dg, db; \
	dr = NOISE(); DITHER(_r, red, dr, MAG1); _r = (_r+26) / 51; \
	dg = NOISE(); DITHER(_g, green, dg, MAG1); _g = (_g+26) / 51; \
	db = NOISE(); DITHER(_b, blue, db, MAG1); _b = (_b+26) / 51; \
	if (_r == _g) { \
		if (_r == _b) {		/* grey */ \
			DITHER(_r, red, dr, MAG2); \
			DITHER(_g, green, dg, MAG2); \
			DITHER(_b, blue, db, MAG2); \
			i = nvec[ ( (_r+_g+_b)/3) >> 4]; \
		} else if (_r == 0) {	/* all blue */ \
			DITHER(_r, red, dr, MAG2); \
			DITHER(_g, green, dg, MAG2); \
			DITHER(_b, blue, db, MAG2); \
			i = bvec[ _b >> 4]; \
		} else	/* color cube # */ \
			i = (unsigned char)(_r + _g * 6 + _b * 36); \
	} \
	else if (_g == _b && _g == 0) {	/* all red */ \
		DITHER(_r, red, dr, MAG2); \
		DITHER(_g, green, dg, MAG2); \
		DITHER(_b, blue, db, MAG2); \
		i = rvec[ _r >> 4]; \
	} else if (_r == _b && _r == 0) {	/* all green */ \
		DITHER(_r, red, dr, MAG2); \
		DITHER(_g, green, dg, MAG2); \
		DITHER(_b, blue, db, MAG2); \
		i = gvec[_g >> 4]; \
	} else	/* color cube # */ \
		i = (unsigned char)(_r + _g * 6 + _b * 36); }

#define REMAPIXEL(red, green, blue, i) {\
	register unsigned char _r, _g, _b; \
	_r = ((int)red+26)/51; _g = ((int)green+26)/51; _b = ((int)blue+26)/51; \
	if (_r == _g) { \
	    if (_r == _b) i = nvec[ ( ((int)red+(int)green+(int)blue) /3) >> 4]; /* grey */ \
	    else if (_r == 0)  i = bvec[blue/16];	   /* all blue */ \
	    else i = (unsigned char)(_r + _g * 6 + _b * 36);  /* cube # */ \
	} \
	else if (_g == _b && _g == 0) i = rvec[red/16];   /* all red */ \
	else if (_r == _b && _r == 0) i = gvec[green/16]; /* all green */ \
	else i = (unsigned char)(_r + _g * 6 + _b * 36);  /* color cube # */ \
}
/*
 *   D O I T --- convert stdin pix file to stdout rasterfile
 */
void doit(void)
{
    int i, cx, cy;
    unsigned char *pix, *rast;
    register unsigned char red, green, blue;

    if ( ((ras.ras_width/2)*2) != ras.ras_width ) {
	(void)fprintf(stderr, "%s: Cannot handle odd x dimension\n",progname);
	bu_exit (1, NULL);
    }

    i = ras.ras_width * ras.ras_height;
    /* allocate buffer for the pix file */
    if ((pix=(unsigned char *)malloc(i*3)) == (unsigned char *)NULL) {
	(void)fprintf(stderr, "%s: cannot get memory for a %d x %d pix file\n",
		progname, ras.ras_width, ras.ras_height );
	bu_exit (1, NULL);
    }

    if ((rast=(unsigned char *)malloc(i)) == (unsigned char *)NULL) {
	(void)fprintf(stderr, "%s: cannot get memory for a %d x %d pixrect\n",
		progname, ras.ras_width, ras.ras_height );
	bu_exit (1, NULL);
    }

    /* load the pix file into memory (What's Virtual Memory for anyway?)
     * we reverse the order of the scan lines to compensate
     * for differences of origin location in rasterfiles vs. PIX files
     */
    for (i=ras.ras_height-1 ; i >= 0 ; i--)
	if (fread(&pix[i*ras.ras_width*3], ras.ras_width*3, 1, stdin) != 1) {
	 (void)fprintf(stderr, "%s: error reading %d x %d pix file scanline %d\n",
		progname, ras.ras_width, ras.ras_height, i);
	 bu_exit (1, NULL);
	}

    /* convert 24 bit pixels to 8 bits,
     * switching top to bottom to compensate for the different origin
     * representations of PIX files and Sun pixrects
     */
    if (dither) {
	for(cy=0 ; cy < ras.ras_height ; cy++)
	    for(cx=0 ; cx < ras.ras_width ; cx++) {
		red = pix[(cx + cy * ras.ras_width)*3];
		green = pix[1 + (cx + cy * ras.ras_width)*3];
		blue = pix[2 + (cx + cy * ras.ras_width)*3];
		DITHERMAP(red, green, blue, rast[cx + cy * ras.ras_width]);
	    }
    }
    else {
	for(cy=0 ; cy < ras.ras_height ; cy++)
	    for(cx=0 ; cx < ras.ras_width ; cx++) {
		red = pix[(cx + cy * ras.ras_width)*3];
		green = pix[1 + (cx + cy * ras.ras_width)*3];
		blue = pix[2 + (cx + cy * ras.ras_width)*3];
		REMAPIXEL(red, green, blue, rast[cx + cy * ras.ras_width]);
	    }
    }

    /* now that we have the 8 bit pixels,
     *  we don't need the 24 bit pixels
     */
    free(pix);

    /* fill in miscelaneous rasterfile header fields */
    ras.ras_length = ras.ras_width * ras.ras_height;

    /* write the rasterfile header */
    if (fwrite(&ras, sizeof(ras), 1, stdout) != 1) {
	(void)fprintf(stderr, "%s: error writing rasterfile header to stdout\n", progname);
	bu_exit (1, NULL);
    }

    /* write the colormap */
    if (fwrite(redmap, MAPSIZE, 1, stdout) != 1) {
	(void)fprintf(stderr, "%s: error writing colormap\n", progname);
	bu_exit (1, NULL);
    }

    if (fwrite(grnmap, MAPSIZE, 1, stdout) != 1) {
	(void)fprintf(stderr, "%s: error writing colormap\n", progname);
	bu_exit (1, NULL);
    }

    if (fwrite(blumap, MAPSIZE, 1, stdout) != 1) {
	(void)fprintf(stderr, "%s: error writing colormap\n", progname);
	bu_exit (1, NULL);
    }

    /* write out the actual pixels */
    if (fwrite(rast, ras.ras_width, ras.ras_height, stdout) != ras.ras_height){
	(void)fprintf(stderr, "%s: error writing image\n", progname);
	bu_exit (1, NULL);
    }
    free(rast);
}

void usage(void)
{

    (void)fprintf(stderr, "Usage: %s [-s squaresize] [-w width] [-n height] [ -d ]\n", progname);
    (void)fprintf(stderr, "\t< BRLpixfile > rasterfile\n");
    bu_exit (1, NULL);
}

/*
 *   M A I N
 *
 *   Perform miscelaneous tasks such as argument parsing and
 *   I/O setup and then call "doit" to perform the task at hand
 */
int main(int ac, char **av)
{
    int	c, optlen;

    progname = *av;
    if (isatty(fileno(stdin))) usage();

    /* Get # of options & turn all the option flags off
    */
    optlen = strlen(options);

    for (c=0 ; c < optlen ; optflags[c++] = '\0');

    /* Turn off bu_getopt's error messages */
    bu_opterr = 0;

    /* get all the option flags from the command line
    */
    while ((c=bu_getopt(ac,av,options)) != EOF)
	switch (c) {
	case 'd'    : dither = !dither; break;
	case 'w'    : ras.ras_width = atoi(bu_optarg); break;
	case 'n'    : ras.ras_height = atoi(bu_optarg); break;
	case 's'    : ras.ras_width = ras.ras_height = atoi(bu_optarg); break;
	default     : usage(); break;
	}


    if (bu_optind < ac) usage();

    doit();
    return (0);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@exit->bu_exit where applicable
@
text
@d210 1
a210 1
	bu_exit (1, "");
d218 1
a218 1
	bu_exit (1, "");
d224 1
a224 1
	bu_exit (1, "");
d235 1
a235 1
	 bu_exit (1, "");
d272 1
a272 1
	bu_exit (1, "");
d278 1
a278 1
	bu_exit (1, "");
d283 1
a283 1
	bu_exit (1, "");
d288 1
a288 1
	bu_exit (1, "");
d294 1
a294 1
	bu_exit (1, "");
d304 1
a304 1
    bu_exit (1, "");
@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d210 1
a210 1
	exit(1);
d218 1
a218 1
	exit(1);
d224 1
a224 1
	exit(1);
d235 1
a235 1
	 exit(1);
d272 1
a272 1
	exit(1);
d278 1
a278 1
	exit(1);
d283 1
a283 1
	exit(1);
d288 1
a288 1
	exit(1);
d294 1
a294 1
	exit(1);
d304 1
a304 1
    exit(1);
@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@a30 4
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

d34 1
d36 2
a37 4
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
@


14.11
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@a27 4
 *  Source -
 *      SECAD/VLD Computing Consortium, Bldg 394
 *      The U. S. Army Ballistic Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5066
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d336 1
a336 1
    opterr = 0;
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.8
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
@


14.6
log
@add bu.h for bu_getopt stuff
@
text
@d87 1
a87 1
unsigned char redmap[MAPSIZE] = 
d105 1
a105 1
unsigned char grnmap[MAPSIZE] = 
d149 1
a149 1
static unsigned char nvec[16] = {  0, 246, 247,  43, 248, 249,  86, 250, 
d248 2
a249 2
    /* convert 24 bit pixels to 8 bits, 
     * switching top to bottom to compensate for the different origin 
d329 1
a329 1
    
d335 1
a335 1
    
@


14.5
log
@needs bu.h for bu_getopt
@
text
@d51 1
@


14.4
log
@BRL-CAD not BRLCAD, consistency
@
text
@d53 1
a53 1
/* declarations to support use of getopt() system call */
d335 1
a335 1
    /* Turn off getopt's error messages */
d340 1
a340 1
    while ((c=getopt(ac,av,options)) != EOF)
d343 3
a345 3
	case 'w'    : ras.ras_width = atoi(optarg); break;
	case 'n'    : ras.ras_height = atoi(optarg); break;
	case 's'    : ras.ras_width = ras.ras_height = atoi(optarg); break;
d350 1
a350 1
    if (optind < ac) usage();
@


14.3
log
@update copyright to 2005
@
text
@d22 1
a22 1
 *	Program to take a BRLCAD PIX format image file and convert the
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d22 1
a22 1
 *	Program to take a BRL-CAD PIX format image file and convert the
a50 1
#include "bu.h"
d53 1
a53 1
/* declarations to support use of bu_getopt() system call */
d86 1
a86 1
unsigned char redmap[MAPSIZE] =
d104 1
a104 1
unsigned char grnmap[MAPSIZE] =
d148 1
a148 1
static unsigned char nvec[16] = {  0, 246, 247,  43, 248, 249,  86, 250,
d247 2
a248 2
    /* convert 24 bit pixels to 8 bits,
     * switching top to bottom to compensate for the different origin
d328 1
a328 1

d334 2
a335 2

    /* Turn off bu_getopt's error messages */
d340 1
a340 1
    while ((c=bu_getopt(ac,av,options)) != EOF)
d343 3
a345 3
	case 'w'    : ras.ras_width = atoi(bu_optarg); break;
	case 'n'    : ras.ras_height = atoi(bu_optarg); break;
	case 's'    : ras.ras_width = ras.ras_height = atoi(bu_optarg); break;
d350 1
a350 1
    if (bu_optind < ac) usage();
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			P I X - S U N
d4 18
a32 4
 *  
 *  Copyright Notice -
 *      This software is Copyright (C) 1986-2004 by the United States Army.
 *      All rights reserved.
@


1.5
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d340 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@a23 1
                                                                                                                                                                            
d25 1
d28 1
d36 1
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d19 1
a19 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d23 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a22 2


a31 1
#include "externs.h"		/* For getopt and isatty */
@

