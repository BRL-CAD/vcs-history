head	14.16;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.9
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.6
	rel-7-0-branch:1.6.0.2
	rel-7-0:1.6;
locks; strict;
comment	@ * @;


14.16
date	2007.12.16.15.59.41;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.11.21.20.49.13;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.07.26.01.13.59;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.23.01.13.55;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.37.06;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.07.09.10.10.29;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.22.00.21.51;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.06.30.00.08.37;	author erikgreenwald;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2005.01.30.20.31.33;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.45.40;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.09.04.53.00;	author kermit;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.09.20.10.55;	author erikg;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.44;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.45;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.16
log
@convert all bzero calls to memset
@
text
@/*                    F I L E S - T A P E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file files-tape.c
 *
 *  Take a collection of files, and write them to tape.
 *  Each file is padded out to an integral number of tape records,
 *  and is written with a fixed block size (default is 24k).
 *  This program is preferred over dd(1) in several small but
 *  important ways:
 *
 *  1)	Multiple files may be written to tape in a single operation,
 *	ie, with a single open() of the output device.
 *  2)	Files are padded to full length records.
 *  3)  Input files are read using bu_mread(), so operation will
 *	proceed even with pipe input (where DD can read and write
 *	short records on a random basis).
 *
 *  This program is probably most often useful to
 *  take a collection of pix(5) or bw(5) files, and write them to
 *  tape using 24k byte records.
 *
 *  There is no requirement that the different files be the same size,
 *  although it is unlikely to be useful.  This could be a potential
 *  source of problems if some files have not been finished yet.
 *
 *  At 6250, one reel of tape holds roughly 6144 records of 24k bytes
 *  each.  This program will warn when that threshold is reached,
 *  but will take no action.
 *
 *  UNIX system calls are used, not to foil portability, but in the
 *  name of efficiency.
 *
 *  Author -
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.15 2007/11/21 20:49:13 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif
#ifdef HAVE_FCNTL_H
# include <fcntl.h>
#endif

#include "machine.h"
#include "bu.h"


#define	TSIZE	(6144*24*1024)	/* # of bytes on 2400' 6250bpi reel */
long	byteswritten = 0;	/* Number of bytes written */

int	bufsize = 24*1024;	/* Default buffer size */
char	*buf;

void	fileout(register int fd, char *name);


static char usage[] = "\
Usage: files-tape [-b bytes] [-k Kbytes] [files]\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "b:k:" )) != EOF )  {
		switch( c )  {
		case 'b':
			bufsize = atoi( bu_optarg );	/* bytes */
			break;
		case 'k':
			bufsize = atoi( bu_optarg ) * 1024; /* Kbytes */
			break;

		default:		/* '?' */
			return(0);	/* BAD */
		}
	}

	if( isatty(fileno(stdout)) )
		return(0);		/* BAD */

	return(1);			/* OK */
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register int	fd;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit (1, NULL);
	}

	/* Obtain output buffer */
	if( (buf = (char *)malloc( bufsize )) == NULL )  {
		perror("malloc");
		bu_exit (1, NULL);
	}

	if( bu_optind >= argc )  {
		/* Perform operation once, from stdin */
		fileout( 0, "-" );
		bu_exit (0, NULL);
	}

	/* Perform operation on each argument */
	for( ; bu_optind < argc; bu_optind++ )  {
		if( (fd = open( argv[bu_optind], 0 )) < 0 )  {
			perror( argv[bu_optind] );
			/*
			 *  It is unclear whether an exit (1),
			 *  or continuing with the next file
			 *  is really the right thing here.
			 *  If the intended size was known,
			 *  a null "file" could be written to tape,
			 *  to preserve the image numbering.
			 *  For now, punt.
			 */
			bu_exit (1, NULL);
		}
		fileout( fd, argv[bu_optind] );
		(void)close(fd);
	}
	bu_exit (0, NULL);
}

/*
 *			F I L E O U T
 */
void
fileout(register int fd, char *name)
{
	register int	count, out;

	while( (count = bu_mread( fd, buf, bufsize )) > 0 )  {
		if( count < bufsize )  {
			/* Short read, zero rest of buffer */
			memset(buf+count, 0, bufsize-count);
		}
		if( (out = write( 1, buf, bufsize )) != bufsize )  {
			perror("files-tape: write");
			fprintf(stderr, "files-tape:  %s, write ret=%d\n", name, out);
			bu_exit (1, NULL);
		}
		if( byteswritten < TSIZE && byteswritten+bufsize > TSIZE )
			fprintf(stderr, "files-tape: WARNING:  Tape capacity reached in file %s\n", name);
		byteswritten += bufsize;
	}
	if( count == 0 )
	    return;

	perror("READ ERROR");

	bu_exit (1, NULL);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.14 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
d169 1
a169 1
			bzero( buf+count, bufsize-count );
@


14.14
log
@exit->bu_exit where applicable
@
text
@d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.13 2007/09/15 16:23:23 brlcad Exp $ (BRL)";
d122 1
a122 1
		bu_exit (1, "");
d128 1
a128 1
		bu_exit (1, "");
d134 1
a134 1
		bu_exit (0, "");
d150 1
a150 1
			bu_exit (1, "");
d155 1
a155 1
	bu_exit (0, "");
d174 1
a174 1
			bu_exit (1, "");
d185 1
a185 1
	bu_exit (1, "");
@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.12 2007/07/26 01:13:59 brlcad Exp $ (BRL)";
d122 1
a122 1
		exit(1);
d128 1
a128 1
		exit(1);
d134 1
a134 1
		exit(0);
d142 1
a142 1
			 *  It is unclear whether an exit(1),
d150 1
a150 1
			exit(1);
d155 1
a155 1
	exit(0);
d174 1
a174 1
			exit(1);
d185 1
a185 1
	exit(1);
@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.11 2007/01/23 01:13:55 brlcad Exp $ (BRL)";
a59 4
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

d62 1
d64 2
a65 4
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
a66 1

@


14.11
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a52 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.10 2007/01/20 14:37:06 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d59 1
a59 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.9 2006/07/09 10:10:29 brlcad Exp $ (BRL)";
@


14.9
log
@refactor the mread() calls to the new bu_mread() call.  the bu_mread() function doesn't call perror for you, so the caller may need to if they expected it before.
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.8 2006/01/18 06:46:27 brlcad Exp $ (BRL)";
@


14.8
log
@update copyright to 2006
@
text
@d32 1
a32 1
 *  3)  Input files are read using mread(), so operation will
d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.7 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
a93 1
int mread(int fd, char *bufp, int n );
d177 1
a177 1
	while( (count = mread( fd, buf, bufsize )) > 0 )  {
d192 3
a194 1
		return;
a195 1
	/* mread() logged the error, die */
a199 30
 *			M R E A D
 *
 * This function performs the function of a read(II) but will
 * call read(II) multiple times in order to get the requested
 * number of characters.  This can be necessary because pipes
 * and network connections don't deliver data with the same
 * grouping as it is written with.  Written by Robert S. Miles, BRL.
 */
int
mread(int fd, register char *bufp, int n)
{
	register int	count = 0;
	register int	nread;

	do {
		nread = read(fd, bufp, (unsigned)n-count);
		if(nread < 0)  {
			perror("files-tape: mread");
			return(-1);
		}
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);

	return((int)count);
}

/*
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.6 2005/09/22 00:21:51 brlcad Exp $ (BRL)";
@


14.6
log
@add bu.h for bu_getopt stuff
@
text
@d53 1
a53 1
 *  
d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.5 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
@


14.5
log
@needs bu.h for bu_getopt
@
text
@d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.4 2005/06/30 00:08:37 erikgreenwald Exp $ (BRL)";
d83 1
@


14.4
log
@added missing includes
@
text
@d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.3 2005/01/30 20:31:33 brlcad Exp $ (BRL)";
d103 1
a103 1
	while ( (c = getopt( argc, argv, "b:k:" )) != EOF )  {
d106 1
a106 1
			bufsize = atoi( optarg );	/* bytes */
d109 1
a109 1
			bufsize = atoi( optarg ) * 1024; /* Kbytes */
d142 1
a142 1
	if( optind >= argc )  {
d149 3
a151 3
	for( ; optind < argc; optind++ )  {
		if( (fd = open( argv[optind], 0 )) < 0 )  {
			perror( argv[optind] );
d163 1
a163 1
		fileout( fd, argv[optind] );
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d53 1
a53 1
 *
d60 1
a60 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a82 1
#include "bu.h"
d103 1
a103 1
	while ( (c = bu_getopt( argc, argv, "b:k:" )) != EOF )  {
d106 1
a106 1
			bufsize = atoi( bu_optarg );	/* bytes */
d109 1
a109 1
			bufsize = atoi( bu_optarg ) * 1024; /* Kbytes */
d142 1
a142 1
	if( bu_optind >= argc )  {
d149 3
a151 3
	for( ; bu_optind < argc; bu_optind++ )  {
		if( (fd = open( argv[bu_optind], 0 )) < 0 )  {
			perror( argv[bu_optind] );
d163 1
a163 1
		fileout( fd, argv[bu_optind] );
@


14.3
log
@update copyright to 2005
@
text
@d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/files-tape.c,v 14.2 2004/12/21 03:45:40 butler Exp $ (BRL)";
d78 4
@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/files-tape.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			F I L E S - T A P E
a57 3
 *  
 *  Copyright Notice -
 *	Public Domain, Distribution Unlimited
d60 1
a60 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/files-tape.c,v 1.6 2004/09/09 04:53:00 kermit Exp $ (BRL)";
@


1.6
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/files-tape.c,v 1.5 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d207 10
@


1.5
log
@replace the wrapped config.h block with common.h
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/files-tape.c,v 1.4 2004/06/09 20:10:55 erikg Exp $ (BRL)";
a51 1
                                                                                                                                                                            
d53 1
d55 1
d61 1
d63 1
@


1.4
log
@fixing warnings
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/files-tape.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (BRL)";
d47 1
a47 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/files-tape.c,v 1.2 2004/06/08 22:04:44 morrison Exp $ (BRL)";
d116 1
a116 1
	if( (buf = malloc( bufsize )) == NULL )  {
@


1.2
log
@obliterate externs.h
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d50 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/files-tape.c,v 11.9 2004/05/10 15:30:50 erikg Exp $ (BRL)";
a50 2


a57 1
#include "externs.h"		/* For malloc and getopt */
@

