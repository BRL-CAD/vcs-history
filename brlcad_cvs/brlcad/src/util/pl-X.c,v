head	14.21;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	rel-7-10-2:14.16
	rel-7-10-0:14.10
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.21
date	2007.12.02.22.34.25;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.09.18.15.49.45;	author erikgreenwald;	state Exp;
branches;
next	14.18;

14.18
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.09.14.15.22.11;	author erikgreenwald;	state Exp;
branches;
next	14.16;

14.16
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.07.17.14.00.23;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.06.28.06.08.48;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.06.22.07.46.34;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.06.22.05.24.25;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.06.22.00.20.37;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.27.01.41.54;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.56;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.06.03.21.35.33;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.06.30.00.08.37;	author erikgreenwald;	state Exp;
branches;
next	14.4;

14.4
date	2005.05.09.18.18.48;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.33;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.20.10.55;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.46;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.55;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.21
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                          P L - X . C
 * BRL-CAD
 *
 * Copyright (c) 1988-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pl-X.c
 *
 *  Display plot3(5) on an X Window System display (X11R2)
 *
 *  Author -
 *	Phillip Dykstra
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.20 2007/10/26 21:51:26 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <X11/Xlib.h>
#include <X11/Xutil.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "dm.h" /* for dm_applicationfocus() */


#define	TBAD	0	/* no such command */
#define TNONE	1	/* no arguments */
#define TSHORT	2	/* Vax 16-bit short */
#define	TIEEE	3	/* IEEE 64-bit floating */
#define	TCHAR	4	/* unsigned chars */
#define	TSTRING	5	/* linefeed terminated string */

#define	FONT	"fixed"

XWMHints xwmh = {
	(InputHint|StateHint),		/* flags */
	False,				/* input */
	NormalState,			/* initial_state */
	0,				/* icon pixmap */
	0,				/* icon window */
	0, 0,				/* icon location */
	0,				/* icon mask */
	0				/* Window group */
};

struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
};
struct uplot uerror = { 0, 0, 0 };
struct uplot letters[] = {
/*A*/	{ 0, 0, 0 },
/*B*/	{ 0, 0, 0 },
/*C*/	{ TCHAR, 3, "color" },
/*D*/	{ 0, 0, 0 },
/*E*/	{ 0, 0, 0 },
/*F*/	{ TNONE, 0, "flush" },
/*G*/	{ 0, 0, 0 },
/*H*/	{ 0, 0, 0 },
/*I*/	{ 0, 0, 0 },
/*J*/	{ 0, 0, 0 },
/*K*/	{ 0, 0, 0 },
/*L*/	{ TSHORT, 6, "3line" },
/*M*/	{ TSHORT, 3, "3move" },
/*N*/	{ TSHORT, 3, "3cont" },
/*O*/	{ TIEEE, 3, "d_3move" },
/*P*/	{ TSHORT, 3, "3point" },
/*Q*/	{ TIEEE, 3, "d_3cont" },
/*R*/	{ 0, 0, 0 },
/*S*/	{ TSHORT, 6, "3space" },
/*T*/	{ 0, 0, 0 },
/*U*/	{ 0, 0, 0 },
/*V*/	{ TIEEE, 6, "d_3line" },
/*W*/	{ TIEEE, 6, "d_3space" },
/*X*/	{ TIEEE, 3, "d_3point" },
/*Y*/	{ 0, 0, 0 },
/*Z*/	{ 0, 0, 0 },
/*[*/	{ 0, 0, 0 },
/*\*/	{ 0, 0, 0 },
/*]*/	{ 0, 0, 0 },
/*^*/	{ 0, 0, 0 },
/*_*/	{ 0, 0, 0 },
/*`*/	{ 0, 0, 0 },
/*a*/	{ TSHORT, 6, "arc" },
/*b*/	{ 0, 0, 0 },
/*c*/	{ TSHORT, 3, "circle" },
/*d*/	{ 0, 0, 0 },
/*e*/	{ TNONE, 0, "erase" },
/*f*/	{ TSTRING, 1, "linmod" },
/*g*/	{ 0, 0, 0 },
/*h*/	{ 0, 0, 0 },
/*i*/	{ TIEEE, 3, "d_circle" },
/*j*/	{ 0, 0, 0 },
/*k*/	{ 0, 0, 0 },
/*l*/	{ TSHORT, 4, "line" },
/*m*/	{ TSHORT, 2, "move" },
/*n*/	{ TSHORT, 2, "cont" },
/*o*/	{ TIEEE, 2, "d_move" },
/*p*/	{ TSHORT, 2, "point" },
/*q*/	{ TIEEE, 2, "d_cont" },
/*r*/	{ TIEEE, 6, "d_arc" },
/*s*/	{ TSHORT, 4, "space" },
/*t*/	{ TSTRING, 1, "label" },
/*u*/	{ 0, 0, 0 },
/*v*/	{ TIEEE, 4, "d_line" },
/*w*/	{ TIEEE, 4, "d_space" },
/*x*/	{ TIEEE, 2, "d_point" },
/*y*/	{ 0, 0, 0 },
/*z*/	{ 0, 0, 0 }
};

int	verbose;
double	cx, cy, cz;		/* current x, y, z, point */
double	arg[6];			/* parsed plot command arguments */
double	sp[6];			/* space command */
char	strarg[512];		/* string buffer */
int	width, height;

static const char usage[] = "\
Usage: pl-X [-v] < unix_plot\n";

Display	*dpy;
Window	win;
GC	gc;
XFontStruct *fontstruct;


void
getstring(void)
{
	int	c;
	char	*cp;

	cp = strarg;
	while( (c = getchar()) != '\n' && c != '\r' && c != EOF )
		*cp++ = c;
	*cp = 0;
}

long
getshort(void)
{
	register long	v, w;

	v = getchar();
	v |= (getchar()<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}

double
getieee(void)
{
	unsigned char	in[8];
	double		d;

	fread( in, 8, 1, stdin );
	ntohd( (unsigned char *)&d, in, 1 );
	return	d;
}


void
getargs(struct uplot *up)
{
	int	i;

	for( i = 0; i < up->narg; i++ ) {
		switch( up->targ ){
			case TSHORT:
				arg[i] = getshort();
				break;
			case TIEEE:
				arg[i] = getieee();
				break;
			case TSTRING:
				getstring();
				break;
			case TCHAR:
				arg[i] = getchar();
				break;
			case TNONE:
			default:
				arg[i] = 0;	/* ? */
				break;
		}
	}
}

void
draw(double x1, double y1, double z1, double x2, double y2, double z2)
			/* from point */
			/* to point */
{
	int	sx1, sy1, sx2, sy2;

	sx1 = (x1 - sp[0]) / (sp[3] - sp[0]) * width;
	sy1 = height - (y1 - sp[1]) / (sp[4] - sp[1]) * height;
	sx2 = (x2 - sp[0]) / (sp[3] - sp[0]) * width;
	sy2 = height - (y2 - sp[1]) / (sp[4] - sp[1]) * height;

	if( sx1 == sx2 && sy1 == sy2 )
		XDrawPoint( dpy, win, gc, sx1, sy1 );
	else
		XDrawLine( dpy, win, gc, sx1, sy1, sx2, sy2 );

	cx = x2;
	cy = y2;
	cz = z2;
}


void
label(double x, double y, char *str)
{
	int	sx, sy;

	sx = (x - sp[0]) / (sp[3] - sp[0]) * width;
	sy = height - (y - sp[1]) / (sp[4] - sp[1]) * height;

	XDrawString( dpy, win, gc, sx, sy, str, strlen(str) );
}


void
xsetup(int argc, char **argv)
{
	char	hostname[81];
	char	display[81];
	char	*envp;
	unsigned long	bd, bg, fg, bw;
	XSizeHints xsh;
	XEvent	event;
	XGCValues gcv;

	width = height = 512;

	if( (envp = getenv("DISPLAY")) == NULL ) {
		/* Env not set, use local host */
		gethostname( hostname, 80 );
		snprintf( display, 81, "%s:0", hostname );
		envp = display;
	}

	/* Open the display - XXX see what NULL does now */
	if( (dpy = XOpenDisplay( envp )) == NULL ) {
		bu_exit(2, "pl-X: Can't open X display\n");
	}

	/* Load the font to use */
	if( (fontstruct = XLoadQueryFont(dpy, FONT)) == NULL ) {
		bu_exit(4, "pl-X: Can't open font\n" );
	}

	/* Select border, background, foreground colors,
	 * and border width.
	 */
	bd = WhitePixel( dpy, DefaultScreen(dpy) );
	bg = BlackPixel( dpy, DefaultScreen(dpy) );
	fg = WhitePixel( dpy, DefaultScreen(dpy) );
	bw = 1;

	/* Fill in XSizeHints struct to inform window
	 * manager about initial size and location.
	 */
	xsh.flags = (PSize);
	xsh.height = height + 10;
	xsh.width = width + 10;
	xsh.x = xsh.y = 0;

	win = XCreateSimpleWindow( dpy, DefaultRootWindow(dpy),
		xsh.x, xsh.y, xsh.width, xsh.height,
		bw, bd, bg );
	if( win == 0 ) {
		fprintf( stderr, "pl-X: Can't create window\n" );
		exit( 3 );
	}

	/* Set standard properties for Window Managers */
	XSetStandardProperties( dpy, win, "Unix Plot", "Unix Plot", None, argv, argc, &xsh );
	XSetWMHints( dpy, win, &xwmh );

	/* Create a Graphics Context for drawing */
	gcv.font = fontstruct->fid;
	gcv.foreground = fg;
	gcv.background = bg;
	gc = XCreateGC( dpy, win, (GCFont|GCForeground|GCBackground), &gcv );

	XSelectInput( dpy, win, ExposureMask | ButtonPressMask | KeyPressMask);
	XMapWindow( dpy, win ); /* show the window */

	while( 1 ) {
		XNextEvent( dpy, &event );
		if( event.type == Expose && event.xexpose.count == 0 ) {
			XWindowAttributes xwa;

			/* remove other exposure events */
			while( XCheckTypedEvent(dpy, Expose, &event) ) ;

			if( XGetWindowAttributes( dpy, win, &xwa ) == 0 )
				break;

			width = xwa.width;
			height = xwa.height;
			break;
		}
	}
	XSetInputFocus(dpy, win, RevertToNone, CurrentTime);

	dm_applicationfocus();
}


int
main(int argc, char **argv)
{
	register int	c;
	struct	uplot *up;
	int erase = 0;
	int waiting = 1;

	while( argc > 1 ) {
		if( strcmp(argv[1], "-v") == 0 ) {
			verbose++;
		} else
			break;

		argc--;
		argv++;
	}
	if( isatty(fileno(stdin)) ) {
		bu_exit(1, "%s", usage );
	}
	xsetup( argc, argv );

	while( (c = getchar()) != EOF ) {
		/* look it up */

		if (c == '\n' || c == '\r') {
		    /* ignore blank lines */
		    continue;
		} else if( c < 'A' || c > 'z' ) {
		    up = &uerror;
		} else {
		    up = &letters[ c - 'A' ];
		}

		if( up->targ == TBAD ) {
			fprintf( stderr, "Bad command '%c' (0x%02x)\n", c, c );
			continue;
		}

		/* was the previous command an erase? */
		if (erase) {
		    XClearWindow( dpy, win );
		    erase = 0;
		}

		if( up->narg > 0 )
			getargs( up );

		switch( c ) {
		case 's':
		case 'w':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = 0;
			sp[3] = arg[2];
			sp[4] = arg[3];
			sp[5] = 0;
			break;
		case 'S':
		case 'W':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = arg[2];
			sp[3] = arg[3];
			sp[4] = arg[4];
			sp[5] = arg[5];
			break;
		case 'm':
		case 'o':
			cx = arg[0];
			cy = arg[1];
			cz = 0;
			break;
		case 'M':
		case 'O':
			cx = arg[0];
			cy = arg[1];
			cz = arg[2];
			break;
		case 'n':
		case 'q':
			draw( cx, cy, cz, arg[0], arg[1], 0.0 );
			break;
		case 'N':
		case 'Q':
			draw( cx, cy, cz, arg[0], arg[1], arg[2] );
			break;
		case 'l':
		case 'v':
			draw( arg[0], arg[1], 0.0, arg[2], arg[3], 0.0 );
			break;
		case 'L':
		case 'V':
			draw( arg[0], arg[1], arg[2], arg[3], arg[4], arg[5] );
			break;
		case 'p':
		case 'x':
			draw( arg[0], arg[1], 0.0, arg[0], arg[1], 0.0 );
			break;
		case 'P':
		case 'X':
			draw( arg[0], arg[1], arg[2], arg[0], arg[1], arg[2] );
			break;
		case 't':
			label( cx, cy, strarg );
			break;
		case 'F':
			XFlush( dpy );
			break;
		case 'e':
		    /* erase might be the last command in the file
		     * which makes pl-X pointless so don't erase
		     * unless this isn't the last command (check
		     * during the next loop iteration)
		     */
		    erase = 1;
		    break;
		}

		if (verbose) {
		    printf( "%s\n", up->desc );
		}
	}
	XFlush(dpy);

	printf("Press any key to quit...\n");
	do {
	    XEvent event;
	    XNextEvent( dpy, &event );
	    switch (event.type) {
		case ButtonPress:
		case ButtonRelease:
		    /* ignore */
		    break;
		case KeyPress:
		case KeyRelease:
		    waiting = 0;
		    break;
		case Expose:

		default:
		    printf("unhandled event: %d\n", event.type);
	    }
	} while (waiting);

	/* clean up */
	XFreeGC(dpy, gc);
	XCloseDisplay(dpy);

	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.20
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.19 2007/09/18 15:49:45 erikgreenwald Exp $ (BRL)";
d143 1
a143 1
static char usage[] = "\
d360 1
a360 2
		fprintf( stderr, usage );
		exit( 1 );
@


14.19
log
@fix sign difference
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.18 2007/09/15 16:23:23 brlcad Exp $ (BRL)";
d256 2
a257 2
	char	hostname[80];
	char	display[80];
d269 1
a269 1
		sprintf( display, "%s:0", hostname );
d275 1
a275 2
		fprintf( stderr, "pl-X: Can't open X display\n" );
		exit( 2 );
d280 1
a280 2
		fprintf( stderr, "pl-X: Can't open font\n" );
		exit( 4 );
@


14.18
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.17 2007/09/14 15:22:11 erikgreenwald Exp $ (BRL)";
d182 2
a183 2
	char	in[8];
	double	d;
@


14.17
log
@removed trailing whitespace
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.16 2007/07/26 01:14:00 brlcad Exp $ (BRL)";
d36 1
a40 4
#ifdef HAVE_STRING_H
#  include <string.h>
#endif

@


14.16
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.15 2007/07/17 14:00:23 erikgreenwald Exp $ (BRL)";
d487 1
a487 1
		    
@


14.15
log
@cast to quell warning
@
text
@a26 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.14 2007/06/28 06:08:48 brlcad Exp $ (BRL)";
@


14.14
log
@move the focus code into libdm as a somewhat more generic dm_applicationfocus() call, even if only/presently implementing support for focusing X11 on Mac OS X.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.13 2007/06/22 07:46:34 brlcad Exp $ (BRL)";
d193 1
a193 1
	ntohd( &d, in, 1 );
@


14.13
log
@use the HAVE_CARBON_CARBON_H symbol instead of __APPLE__ now
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.12 2007/06/22 05:24:25 brlcad Exp $ (BRL)";
a43 6
#ifdef HAVE_CARBON_CARBON_H
#  define Cursor MyCursor
#  include <Carbon/Carbon.h>
#  undef Cursor
#endif

d53 2
a259 24
void focus_x11() {
#ifdef HAVE_CARBON_CARBON_H
    OSStatus status;
    ProcessSerialNumber psn = {kNoProcess, kNoProcess};
    CFStringRef processName = NULL;

    do {
	status = GetNextProcess(&psn);
	
	/* Is this the psn for X11? */
	CopyProcessName(&psn, &processName);
	if (processName == NULL) {
	    break;
	}
	
	if (CFStringCompare(processName, CFSTR("X11"), 0) == kCFCompareEqualTo) {
	    /* focus X11 */
	    SetFrontProcess(&psn);
	}
    } while (status == noErr);
#endif
}


d347 1
a347 1
	focus_x11();
@


14.12
log
@big update/enhancements so that pl-X is actually functional and useful.  if the last command in a plot file is an erase command, don't do it (wth show a black window).  most importantly, keep the window up until the user presses a key.  additional goodness, if we're on Mac OS X, make sure X11 has focus.  ignore newlines in the file for kicks.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.11 2007/06/22 00:20:37 brlcad Exp $ (BRL)";
d44 1
a44 1
#ifdef __APPLE__
d265 1
a265 1
#ifdef __APPLE__
@


14.11
log
@use 'fixed' font by default instead of the obscure 'vtsingle' font.. should really have a cmd-line option to set/override
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.10 2007/01/27 01:41:54 brlcad Exp $ (BRL)";
d40 1
d44 6
d170 1
a170 1
	while( (c = getchar()) != '\n' && c != EOF )
d264 24
d354 2
a355 2
	XSelectInput( dpy, win, ExposureMask );
	XMapWindow( dpy, win );
d373 3
d384 2
d404 6
a409 2
		if( c < 'A' || c > 'z' ) {
			up = &uerror;
d411 1
a411 1
			up = &letters[ c - 'A' ];
d419 6
d490 7
a496 2
			XClearWindow( dpy, win );
			break;
d499 3
a501 2
		if( verbose )
			printf( "%s\n", up->desc );
d503 25
a528 2
	XFlush( dpy );
	sleep( 1 );
@


14.10
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.9 2007/01/23 01:13:56 brlcad Exp $ (BRL)";
d60 1
a60 1
#define	FONT	"vtsingle"
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.8 2007/01/20 14:37:07 brlcad Exp $ (BRL)";
d224 2
a225 2
      	           	/* from point */
      	           	/* to point */
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.7 2006/06/03 21:35:33 brlcad Exp $ (BRL)";
@


14.7
log
@quell lots of warnings.
@
text
@d4 1
a4 1
 * Copyright (c) 1988-2006 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.6 2006/01/18 06:46:28 brlcad Exp $ (BRL)";
@


14.6
log
@update copyright to 2006
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.5 2005/06/30 00:08:37 erikgreenwald Exp $ (BRL)";
d45 1
a45 1
# include <string.h>
d49 1
a49 1
# include <unistd.h>
d61 13
a140 1
double	getieee(void);
a155 138
int
main(int argc, char **argv)
{
	register int	c;
	struct	uplot *up;
	int	i;

	while( argc > 1 ) {
		if( strcmp(argv[1], "-v") == 0 ) {
			verbose++;
		} else
			break;

		argc--;
		argv++;
	}
	if( isatty(fileno(stdin)) ) {
		fprintf( stderr, usage );
		exit( 1 );
	}
	xsetup( argc, argv );

	while( (c = getchar()) != EOF ) {
		/* look it up */
		if( c < 'A' || c > 'z' ) {
			up = &uerror;
		} else {
			up = &letters[ c - 'A' ];
		}

		if( up->targ == TBAD ) {
			fprintf( stderr, "Bad command '%c' (0x%02x)\n", c, c );
			continue;
		}

		if( up->narg > 0 )
			getargs( up );

		switch( c ) {
		case 's':
		case 'w':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = 0;
			sp[3] = arg[2];
			sp[4] = arg[3];
			sp[5] = 0;
			break;
		case 'S':
		case 'W':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = arg[2];
			sp[3] = arg[3];
			sp[4] = arg[4];
			sp[5] = arg[5];
			break;
		case 'm':
		case 'o':
			cx = arg[0];
			cy = arg[1];
			cz = 0;
			break;
		case 'M':
		case 'O':
			cx = arg[0];
			cy = arg[1];
			cz = arg[2];
			break;
		case 'n':
		case 'q':
			draw( cx, cy, cz, arg[0], arg[1], 0.0 );
			break;
		case 'N':
		case 'Q':
			draw( cx, cy, cz, arg[0], arg[1], arg[2] );
			break;
		case 'l':
		case 'v':
			draw( arg[0], arg[1], 0.0, arg[2], arg[3], 0.0 );
			break;
		case 'L':
		case 'V':
			draw( arg[0], arg[1], arg[2], arg[3], arg[4], arg[5] );
			break;
		case 'p':
		case 'x':
			draw( arg[0], arg[1], 0.0, arg[0], arg[1], 0.0 );
			break;
		case 'P':
		case 'X':
			draw( arg[0], arg[1], arg[2], arg[0], arg[1], arg[2] );
			break;
		case 't':
			label( cx, cy, strarg );
			break;
		case 'F':
			XFlush( dpy );
			break;
		case 'e':
			XClearWindow( dpy, win );
			break;
		}

		if( verbose )
			printf( "%s\n", up->desc );
	}

	XFlush( dpy );
	sleep( 1 );
	return 0;
}

getargs(struct uplot *up)
{
	int	i;

	for( i = 0; i < up->narg; i++ ) {
		switch( up->targ ){
			case TSHORT:
				arg[i] = getshort();
				break;
			case TIEEE:
				arg[i] = getieee();
				break;
			case TSTRING:
				getstring();
				break;
			case TCHAR:
				arg[i] = getchar();
				break;
			case TNONE:
			default:
				arg[i] = 0;	/* ? */
				break;
		}
	}
}
d157 1
d169 1
d195 29
d245 2
a252 1
	/*sy -= fontstruct->height;	/* point is lower left of text XXXXXX*/
a256 12
#define	FONT	"vtsingle"

XWMHints xwmh = {
	(InputHint|StateHint),		/* flags */
	False,				/* input */
	NormalState,			/* initial_state */
	0,				/* icon pixmap */
	0,				/* icon window */
	0, 0,				/* icon location */
	0,				/* icon mask */
	0				/* Window group */
};
d258 1
a330 1
			int	x, y;
d345 113
@


14.5
log
@added missing includes
@
text
@d4 1
a4 1
 * Copyright (C) 1988-2005 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.4 2005/05/09 18:18:48 brlcad Exp $ (BRL)";
@


14.4
log
@return a value and sleep less before existing
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.3 2005/01/30 20:31:33 brlcad Exp $ (BRL)";
d44 8
@


14.3
log
@update copyright to 2005
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-X.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (BRL)";
d245 2
a246 1
	sleep( 3 );
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1988-2004 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-X.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			P L - X . C
a31 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1988-2004 by the United States Army.
 *	All rights reserved.
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-X.c,v 1.4 2004/08/02 23:01:53 morrison Exp $ (BRL)";
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-X.c,v 1.3 2004/06/09 20:10:55 erikg Exp $ (BRL)";
d426 10
@


1.3
log
@fixing warnings
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-X.c,v 1.2 2004/06/08 22:04:46 morrison Exp $ (BRL)";
d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d27 1
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pl-X.c,v 11.8 2004/05/10 15:30:51 erikg Exp $ (BRL)";
a25 2


a30 1
#include "externs.h"			/* For getenv */
@

