head	14.14;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.6
	rel-7-0-branch:1.6.0.2
	rel-7-0:1.6;
locks; strict;
comment	@ * @;


14.14
date	2007.11.21.20.49.14;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.27.01.41.54;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.56;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.37.06;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.22.00.21.51;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.33;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.09.04.53.00;	author kermit;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.09.20.10.55;	author erikg;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.45;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.52;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                      P I X M A T T E . C
 * BRL-CAD
 *
 * Copyright (c) 1989-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pixmatte.c
 *
 *  Given four streams of data elements,
 *  where element is of arbitrary width,
 *  typically pix(5) or bw(5) images,
 *  output a stream of the same number of data elements.
 *  The value of the output stream is determined element-by-element,
 *  by comparing the
 *  first (foreground) input stream with the
 *  the second (background, or matte) input stream.
 *  If the formula holds true, the element from the
 *  true-output stream is written,
 *  otherwise, the element from the false-output stream is written.
 *  Each of these streams comes from a file, or is given as a constant.
 *  A particular file may be used to feed more than one stream,
 *  and the name '-' specifies stdin.
 *  For example, the forground file may also be the true-output file.
 *
 *  This routine operates on an element-by-element basis, and thus
 *  is independent of the resolution of the image.
 *
 *  Author -
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.13 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"


#define NFILES		4		/* Two in, two out */
#define EL_WIDTH	32		/* Max width of one element */
#define CHUNK		(32*1024)	/* # elements per I/O */

static int		width = 3;

static char		*file_name[NFILES];
static FILE		*fp[NFILES];	/* NULL => use f_const */
static unsigned char	f_const[NFILES][EL_WIDTH];
static char		*buf[NFILES];	/* I/O buffers, size width*CHUNK */
static char		*obuf;		/* output buffer */

#define LT		1
#define EQ		2
#define GT		4
#define NE		8
#define APPROX		16
static int		wanted;		/* LT|EQ|GT conditions */

static long		true_cnt = 0;
static long		false_cnt = 0;


static char usage_msg[] = "\
Usage: pixmatte [-w bytes_wide] {-g -l -e -n -a}\n\
	in1 in2 true_out false_out > output\n\
\n\
where each of the 4 streams is either a file name, a constant of the\n\
form =r/g/b with each byte specified in decimal, or '-' for stdin.\n\
The default width is 3 bytes, suitable for processing .pix files.\n\
";

void
usage(char *s, int n)
{
	if (s && *s) (void)fputs(s, stderr);

	(void)fputs(usage_msg, stderr);
	exit(n);
}

/*
 *			O P E N _ F I L E
 */
int
open_file(int i, char *name)
{
	if( name[0] == '=' )  {
		/* Parse constant */
		register char		*cp = name+1;
		register unsigned char	*conp = &f_const[i][0];
		register int		j;

		/* premature null => atoi gives zeros */
		for( j=0; j < width; j++ )  {
			*conp++ = atoi(cp);
			while( *cp && *cp++ != '/' ) ;
		}

		file_name[i] = name+1;	/* skip '=' */
		fp[i] = NULL;
		buf[i] = NULL;
		return(0);		/* OK */
	}

	file_name[i] = name;
	if( strcmp( name, "-" ) == 0 )  {
		fp[i] = stdin;
		if( isatty(fileno(stdin)) )
			return(-1);	/* FAIL */
		/* XXX No checking for multiple uses of stdin */
	}  else if( (fp[i] = fopen(name, "r")) == NULL )  {
		perror(name);
		(void)fprintf( stderr,
			"pixmatte: cannot open \"%s\" for reading\n",
			name );
		return(-1);		/* FAIL */
	}

	/* Obtain buffer */
	if( (buf[i] = (char *)malloc( width*CHUNK )) == (char *)0 )  {
		fprintf(stderr, "pixmatte:  input buffer malloc failure\n");
		bu_exit (3, NULL);
	}

	return(0);			/* OK */
}

/*
 *			G E T _ A R G S
 */
void
get_args(int argc, register char **argv)
{
	register int	c;
	register int	seen_formula = 0;
	register int	i;

	while ( (c = bu_getopt( argc, argv, "glenaw:" )) != EOF )  {
		switch( c )  {
		case 'g':
			wanted |= GT;
			seen_formula = 1;
			break;
		case 'l':
			wanted |= LT;
			seen_formula = 1;
			break;
		case 'e':
			wanted |= EQ;
			seen_formula = 1;
			break;
		case 'n':
			wanted |= NE;
			seen_formula = 1;
			break;
		case 'a':
			wanted |= APPROX;
			/* Formula not seen */
			break;
		case 'w':
			c = atoi(bu_optarg);
			if( c >= 1 && c < EL_WIDTH )
				width = c;
			else
				usage("Illegal width specified\n", 1);
			break;
		default:		/* '?' */
			usage("unknown option\n", 1);
			break;
		}
	}

	if( !seen_formula )
		usage("No formula specified\n", 1);


	if( bu_optind+NFILES > argc )
		usage("insufficient number of input/output channels\n", 1);


	for( i=0; i < NFILES; i++ )  {
		if( open_file( i, argv[bu_optind++] ) < 0 )
			usage((char *)NULL, 1);
	}

	if ( argc > bu_optind )
		(void)fprintf( stderr, "pixmatte: excess argument(s) ignored\n" );

}

int
main(int argc, char **argv)
{

	get_args(argc, argv);

	if ( isatty(fileno(stdout)) )
		usage( "Cannot write image to tty\n", 1);


	fprintf(stderr, "pixmatte:\tif( %s ", file_name[0] );
	if( wanted & LT )  {
		if( wanted & EQ )
			fputs( "<=", stderr );
		else
			fputs( "<", stderr );
	}
	if( wanted & GT )  {
		if( wanted & EQ )
			fputs( ">=", stderr );
		else
			fputs( ">", stderr );
	}
	if( wanted & APPROX )  {
		if( wanted & EQ )  fputs( "~~==", stderr );
		if( wanted & NE )  fputs( "~~!=", stderr );
	} else {
		if( wanted & EQ )  fputs( "==", stderr );
		if( wanted & NE )  fputs( "!=", stderr );
	}
	fprintf(stderr, " %s )\n", file_name[1] );
	fprintf(stderr, "pixmatte:\t\tthen output %s\n", file_name[2] );
	fprintf(stderr, "pixmatte:\t\telse output %s\n", file_name[3] );

	if( (obuf = (char *)malloc( width*CHUNK )) == (char *)0 ) {
		fprintf(stderr, "pixmatte:  obuf malloc failure\n");
		bu_exit (3, NULL);
	}

	while(1)  {
		unsigned char	*cb0, *cb1;	/* current input buf ptrs */
		unsigned char	*cb2, *cb3;
		register unsigned char	*obp; 	/* current output buf ptr */
		unsigned char	*ebuf;		/* end ptr in buf[0] */
		int		len;
		register int	i;

		len = CHUNK;
		for( i=0; i<NFILES; i++ )  {
			register int	got;

			if( fp[i] == NULL )  continue;
			got = fread( buf[i], width, CHUNK, fp[i] );
			if( got < len )  len = got;
		}
		if( len <= 0 )
			break;

		cb0 = (unsigned char *)buf[0];
		cb1 = (unsigned char *)buf[1];
		cb2 = (unsigned char *)buf[2];
		cb3 = (unsigned char *)buf[3];
		obp = (unsigned char *)obuf;
		ebuf = cb0 + width*len;
		for( ; cb0 < ebuf;
		    cb0 += width, cb1 += width, cb2 += width, cb3 += width )  {
			/*
			 * Stated condition must hold for all input bytes
			 * to select the foreground for output
			 */
			register unsigned char	*ap, *bp;
			register unsigned char	*ep;		/* end ptr */

			if( buf[0] != NULL )
				ap = cb0;
			else
				ap = &f_const[0][0];

			if( buf[1] != NULL )
				bp = cb1;
			else
				bp = &f_const[1][0];

			if( wanted == NE )  {
				for( ep = ap+width; ap < ep; )  {
					if( *ap++ != *bp++ )
						goto success;
				}
				goto fail;
			} else if( wanted & APPROX )  {
				if( wanted & NE )  {
					/* Want not even approx equal */
					for( ep = ap+width; ap < ep; )  {
						if( (i= *ap++ - *bp++) < -1 ||
						    i > 1 )
							goto success;
					}
					goto fail;
				} else {
					/* Want approx equal */
					for( ep = ap+width; ap < ep; )  {
						if( (i= *ap++ - *bp++) < -1 ||
						    i > 1 )
							goto fail;
					}
					goto success;
				}
			} else {
				for( ep = ap+width; ap < ep; ap++,bp++ )  {
					if( *ap > *bp )  {
						if( !(GT & wanted) )
							goto fail;
					} else if( *ap == *bp )  {
						if( !(EQ & wanted) )
							goto fail;
					} else  {
						if( !(LT & wanted) )
							goto fail;
					}
				}
			}
success:
			if( buf[2] != NULL )
				ap = cb2;
			else
				ap = &f_const[2][0];

			for( i=0; i<width; i++ )
				*obp++ = *ap++;

			true_cnt++;
			continue;
fail:
			if( buf[3] != NULL )
				bp = cb3;
			else
				bp = &f_const[3][0];

			for( i=0; i<width; i++ )
				*obp++ = *bp++;

			false_cnt++;
		}
		if( fwrite( obuf, width, len, stdout ) != len )  {
			perror("fwrite");
			fprintf( stderr, "pixmatte:  write error\n");
			bu_exit (1, NULL);
		}
	}
	fprintf( stderr, "pixmatte: %ld element comparisons true, %ld false (width=%d)\n",
		true_cnt, false_cnt, width );
	return(0);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@exit->bu_exit where applicable
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.12 2007/09/15 16:23:23 brlcad Exp $ (BRL)";
d145 1
a145 1
		bu_exit (3, "");
d250 1
a250 1
		bu_exit (3, "");
d360 1
a360 1
			bu_exit (1, "");
@


14.12
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.11 2007/07/26 01:14:00 brlcad Exp $ (BRL)";
d145 1
a145 1
		exit(3);
d250 1
a250 1
		exit(3);
d360 1
a360 1
			exit(1);
@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.10 2007/01/27 01:41:54 brlcad Exp $ (BRL)";
a50 4
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

a52 1
#ifdef HAVE_STRING_H
d54 3
a56 2
#else
#include <strings.h>
@


14.10
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a43 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.9 2007/01/23 01:13:56 brlcad Exp $ (BRL)";
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d50 1
a50 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.8 2007/01/20 14:37:06 brlcad Exp $ (BRL)";
d152 2
a153 2
	    	fprintf(stderr, "pixmatte:  input buffer malloc failure\n");
	    	exit(3);
d257 2
a258 2
	    	fprintf(stderr, "pixmatte:  obuf malloc failure\n");
	    	exit(3);
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d50 1
a50 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.7 2006/01/18 06:46:28 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1989-2006 United States Government as represented by
d51 1
a51 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1989-2005 United States Government as represented by
d51 1
a51 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.5 2005/09/22 00:21:51 brlcad Exp $ (BRL)";
@


14.5
log
@add bu.h for bu_getopt stuff
@
text
@d22 1
a22 1
 *  
d41 1
a41 1
 *  
d44 1
a44 1
 *  
d51 1
a51 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.4 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
d108 1
a108 1
	
d205 1
a205 1
	if( !seen_formula )  
d305 1
a305 1
						
@


14.4
log
@needs bu.h for bu_getopt
@
text
@d51 1
a51 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.3 2005/01/30 20:31:33 brlcad Exp $ (BRL)";
d69 1
@


14.3
log
@update copyright to 2005
@
text
@d51 1
a51 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixmatte.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (BRL)";
d169 1
a169 1
	while ( (c = getopt( argc, argv, "glenaw:" )) != EOF )  {
d192 1
a192 1
			c = atoi(optarg);
d208 1
a208 1
	if( optind+NFILES > argc )
d213 1
a213 1
		if( open_file( i, argv[optind++] ) < 0 )
d217 1
a217 1
	if ( argc > optind )
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d22 1
a22 1
 *
d41 1
a41 1
 *
d44 1
a44 1
 *
d51 1
a51 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a68 1
#include "bu.h"
d107 1
a107 1

d169 1
a169 1
	while ( (c = bu_getopt( argc, argv, "glenaw:" )) != EOF )  {
d192 1
a192 1
			c = atoi(bu_optarg);
d204 1
a204 1
	if( !seen_formula )
d208 1
a208 1
	if( bu_optind+NFILES > argc )
d213 1
a213 1
		if( open_file( i, argv[bu_optind++] ) < 0 )
d217 1
a217 1
	if ( argc > bu_optind )
d304 1
a304 1

@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1989-2004 United States Government as represented by
d51 1
a51 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixmatte.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *  			P I X M A T T E . C
a48 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1989-2004 by the United States Army.
 *	All rights reserved.
d51 1
a51 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixmatte.c,v 1.6 2004/09/09 04:53:00 kermit Exp $ (BRL)";
@


1.6
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixmatte.c,v 1.5 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d360 10
@


1.5
log
@replace the wrapped config.h block with common.h
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixmatte.c,v 1.4 2004/06/09 20:10:55 erikg Exp $ (BRL)";
a43 1
                                                                                                                                                                            
d45 1
d54 1
@


1.4
log
@fixing warnings
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixmatte.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (BRL)";
d39 1
a39 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixmatte.c,v 1.2 2004/06/08 22:04:45 morrison Exp $ (BRL)";
d137 1
a137 1
	if( (buf[i] = malloc( width*CHUNK )) == (char *)0 )  {
d242 1
a242 1
	if( (obuf = malloc( width*CHUNK )) == (char *)0 ) {
@


1.2
log
@obliterate externs.h
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d42 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pixmatte.c,v 11.10 2004/05/10 15:30:51 erikg Exp $ (BRL)";
a42 2


a50 1
#include "externs.h"			/* For malloc and getopt */
@

