head	14.15;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.15
date	2007.12.02.22.34.25;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.20.49.13;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.27.01.41.54;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.56;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.37.06;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.22.00.21.51;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.33;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.04.53.00;	author kermit;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.45;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.50;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                    P I X 3 F I L T E R . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pix3filter.c
 *
 *  Filters a color pix file set with an arbitrary 3x3x3 kernel.
 *  Leaves the outer rows untouched.
 *  Allows an alternate divisor and offset to be given.
 *
 *  Author -
 *	Phillip Dykstra
 *	15 Aug 1985
 *
 *  Modified -
 *	Christopher T. Johnson - 01 March 1989
 *	    Added the 3rd dimension.
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.14 2007/11/21 20:49:13 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"


#define MAXLINE		(8*1024)
#define DEFAULT_WIDTH	512
unsigned char	l11[3*MAXLINE], l12[3*MAXLINE], l13[3*MAXLINE];
unsigned char	l21[3*MAXLINE], l22[3*MAXLINE], l23[3*MAXLINE];
unsigned char	l31[3*MAXLINE], l32[3*MAXLINE], l33[3*MAXLINE];
unsigned char	obuf[3*MAXLINE];
unsigned char	*topold, *middleold, *bottomold, *temp;
unsigned char	*topcur, *middlecur, *bottomcur;
unsigned char	*topnew, *middlenew, *bottomnew;

/* The filter kernels */
struct	kernels {
	char	*name;
	char	*uname;		/* What is needed to recognize it */
	int	kern[27];
	int	kerndiv;	/* Divisor for kernel */
	int	kernoffset;	/* To be added to result */
} kernel[] = {
	{ "Low Pass", "lo", {1, 3, 1, 3, 5, 3, 1, 3, 1,
			    3, 5, 3, 5,10, 5, 3, 5, 3,
			    1, 3, 1, 3, 5, 3, 1, 3, 1}, 84, 0 },
	{ "High Pass", "hi", {-1, -2, -1, -2, -4, -2, -1, -2, -1,
			     -2, -4, -2, -4, 56, -4, -2, -4, -2,
			     -1, -2, -1, -2, -4, -2, -1, -2, -1}, 1, 0},
	{ "Boxcar Average", "b", {1, 1, 1, 1, 1, 1, 1, 1, 1,
				 1, 1, 1, 1,27, 1, 1, 1, 1,
				 1, 1, 1, 1, 1, 1, 1, 1, 1}, 53, 0},
	{ "Animation Smear", "s",{1, 1, 1, 1, 1, 1, 1, 1, 1,
				 1, 1, 1, 1, 1, 1, 1, 1, 1,
				 2, 2, 2, 2,35, 2, 2, 2, 2}, 69, 0},
	{ NULL, NULL, {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 0 },
};

int	*kern;
int	kerndiv;
int	kernoffset;
int	width = DEFAULT_WIDTH;
int	height = DEFAULT_WIDTH;
int	verbose = 0;
int	dflag = 0;	/* Different divisor specified */
int	oflag = 0;	/* Different offset specified */

char *file_name;
FILE *oldfp, *curfp, *newfp;

void	select_filter(char *str), dousage(void);

char	usage[] = "\
Usage: pix3filter [-f<type>] [-v] [-d#] [-o#]\n\
	[-s squaresize] [-w width] [-n height]\n\
	file.pix.n | file.pix1 file.pix2 file.pix3  > file.pix\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "vf:d:o:w:n:s:" )) != EOF )  {
		switch( c )  {
		case 'v':
			verbose++;
			break;
		case 'f':
			select_filter(bu_optarg);
			break;
		case 'd':
			dflag++;
			kerndiv = atoi(bu_optarg);
			break;
		case 'o':
			oflag++;
			kernoffset = atoi(bu_optarg);
			break;
		case 'w':
			width = atoi(bu_optarg);
			break;
		case 'n':
			height = atoi(bu_optarg);
			break;
		case 's':
			width = height = atoi(bu_optarg);
			break;
		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )  {
		(void) fprintf( stderr,
		    "pix3filter: must supply a file name\n");
		return(0);
	} else if ( bu_optind + 3 <= argc ) {

		if( (oldfp = fopen(argv[bu_optind], "r")) == NULL )  {
			(void)fprintf( stderr,
				"pix3filter: cannot open \"%s\" for reading\n",
				argv[bu_optind] );
			return(0);
		}

		if( (curfp = fopen(argv[++bu_optind], "r")) == NULL )  {
			(void)fprintf( stderr,
				"pix3filter: cannot open \"%s\" for reading\n",
				argv[bu_optind] );
			return(0);
		}

		if( (newfp = fopen(argv[++bu_optind], "r")) == NULL )  {
			(void)fprintf( stderr,
				"pix3filter: cannot open \"%s\" for reading\n",
				argv[bu_optind] );
			return(0);
		}
		bu_optind += 3;
	} else {
		int frameNumber;
		char *idx, *working_name;

		file_name = argv[bu_optind];
		working_name = (char *)malloc(strlen(file_name)+5);

		if( (curfp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"pix3filter: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
		idx = file_name + strlen(file_name) -1;
		while ((idx >= file_name) && (*idx != '.')) --idx;
		if (idx >= file_name) {
			*idx = '\0';
			++idx;
			frameNumber = atoi(idx);
		} else {
			(void) fprintf(stderr,
			    "pix3filter: no frame number on %s.\n",
			    file_name);
			return(0);
		}

		snprintf(working_name, strlen(file_name)+5, "%s.%d", file_name, frameNumber-1);
		if ( (oldfp = fopen(working_name, "r")) == NULL) {
			if (frameNumber-1 != 0) {
				(void)fprintf(stderr,
				    "pix3filter: cannot open \"%s\" for reading.\n",
				    working_name);
				return(0);
			}
			if ( (oldfp = fopen(file_name, "r")) == NULL) {
				(void)fprintf(stderr,
				    "pix3filter: cannot open \"%s\" for reading.\n",
				    file_name);
				return(0);
			}
		}

		snprintf(working_name, strlen(file_name)+5, "%s.%d", file_name, frameNumber+1);
		if ((newfp = fopen(working_name, "r")) == NULL) {
			(void)fprintf(stderr,
			    "pix3filter: cannot open \"%s\" for reading.\n",
			    working_name);
			return(0);
		}
		free(working_name);
		bu_optind += 1;
	}

	if( isatty(fileno(stdout)) )
		return(0);

	if ( argc > bu_optind )
		(void)fprintf( stderr, "pix3filter: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	int	x, y, color;
	int	value, r1, r2, r3, r4, r5, r6, r7, r8, r9;
	int	max, min;

	/* Select Default Filter (low pass) */
	select_filter( "low" );

	if ( !get_args( argc, argv ) )  {
		dousage();
		bu_exit ( 1, NULL );
	}

	if( width > MAXLINE )  {
		fprintf(stderr, "pix3filter:  limited to scanlines of %d\n", MAXLINE);
		bu_exit ( 1, NULL );
	}

/*
 * Set up the pointers to the working areas.
 */
	bottomold = l11;
	middleold = l12;
	topold    = l13;

	bottomcur = l21;
	middlecur = l22;
	topcur    = l23;

	bottomnew = l31;
	middlenew = l32;
	topnew    = l33;
/*
 * Read in the bottom and middle rows of the old picture.
 */
	fread( bottomold, sizeof( char ), 3*width, oldfp );
	fread( middleold, sizeof( char ), 3*width, oldfp );
/*
 * Read in the bottom and middle rows of the current picture.
 */
	fread( bottomcur, sizeof( char ), 3*width, curfp );
	fread( middlecur, sizeof( char ), 3*width, curfp );
/*
 * Read in the bottom and middle rows of the new picture.
 */
	fread( bottomnew, sizeof( char ), 3*width, newfp );
	fread( middlenew, sizeof( char ), 3*width, newfp );
/*
 * Write out the bottome row.
 */
	fwrite( bottomcur, sizeof( char ), 3*width, stdout );

	if(verbose) {
		for( x = 0; x < 29; x++ )
			fprintf(stderr, "kern[%d] = %d\n", x, kern[x]);
	}

	max = 0;
	min = 255;

	for( y = 1; y < height-1; y++ ) {
		/* read in top lines */
		fread( topold, sizeof( char ), 3*width, oldfp );
		fread( topcur, sizeof( char ), 3*width, curfp );
		fread( topnew, sizeof( char ), 3*width, newfp );

		for( color = 0; color < 3; color++ ) {
			obuf[0+color] = middlecur[0+color];
			/* Filter a line */
			for( x = 3+color; x < 3*(width-1); x += 3 ) {
				r1 = topold[x-3] * kern[0] +
				    topold[x] * kern[1] +
				    topold[x+3] * kern[2];
				r2 = middleold[x-3] * kern[3] +
				    middleold[x] * kern[4] +
				    middleold[x+3] * kern[5];
				r3 = bottomold[x-3] * kern[6] +
				    bottomold[x] * kern[7] +
				    bottomold[x+3] * kern[8];
				r4 = topcur[x-3] * kern[9] +
				    topcur[x] * kern[10] +
				    topcur[x+3] * kern[11];
				r5 = middlecur[x-3] * kern[12] +
				    middlecur[x] * kern[13] +
				    middlecur[x+3] * kern[14];
				r6 = bottomcur[x-3] * kern[15] +
				    bottomcur[x] * kern[16] +
				    bottomcur[x+3] * kern[17];
				r7 = topnew[x-3] * kern[18] +
				    topnew[x] * kern[19] +
				    topnew[x+3] * kern[20];
				r8 = middlenew[x-3] * kern[21] +
				    middlenew[x] * kern[22] +
				    middlenew[x+3] * kern[23];
				r9 = bottomnew[x-3] * kern[24] +
				    bottomnew[x] * kern[25] +
				    bottomnew[x+3] * kern[26];
				value = (r1+r2+r3+r4+r5+r6+r7+r8+r9) /
				     kerndiv + kernoffset;
				if( value > max ) max = value;
				if( value < min ) min = value;
				if( verbose && (value > 255 || value < 0) ) {
					fprintf(stderr,"Value %d\n", value);
					fprintf(stderr,"r1=%d, r2=%d, r3=%d\n", r1, r2, r3);
				}
				if( value < 0 )
					obuf[x] = 0;
				else if( value > 255 )
					obuf[x] = 255;
				else
					obuf[x] = value;
			}
			obuf[3*(width-1)+color] = middlecur[3*(width-1)+color];
		}
		fwrite( obuf, sizeof( char ), 3*width, stdout );
		/* Adjust row pointers */
		temp = bottomold;
		bottomold = middleold;
		middleold = topold;
		topold = temp;

		temp = bottomcur;
		bottomcur = middlecur;
		middlecur = topcur;
		topcur = temp;

		temp = bottomnew;
		bottomnew = middlenew;
		middlenew = topnew;
		topnew = temp;

	}
	/* write out last line untouched */
	fwrite( topcur, sizeof( char ), 3*width, stdout );

	/* Give advise on scaling factors */
	if( verbose )
		fprintf( stderr, "Max = %d,  Min = %d\n", max, min );

	bu_exit ( 0, NULL );
}

/*
 *	S E L E C T _ F I L T E R
 *
 * Looks at the command line string and selects a filter based
 *  on it.
 */
void
select_filter(char *str)
{
	int	i;

	i = 0;
	while( kernel[i].name != NULL ) {
		if( strncmp( str, kernel[i].uname, strlen( kernel[i].uname ) ) == 0 )
			break;
		i++;
	}

	if( kernel[i].name == NULL ) {
		/* No match, output list and exit */
		fprintf( stderr, "Unrecognized filter type \"%s\"\n", str );
		dousage();
		bu_exit ( 3, NULL );
	}

	/* Have a match, set up that kernel */
	kern = &kernel[i].kern[0];
	if( dflag == 0 )
		kerndiv = kernel[i].kerndiv;
	if( oflag == 0 )
		kernoffset = kernel[i].kernoffset;
}

void
dousage(void)
{
	int	i;

	fputs( usage, stderr );
	i = 0;
	while( kernel[i].name != NULL ) {
		fprintf( stderr, "%-10s%s\n", kernel[i].uname, kernel[i].name );
		i++;
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@pass bu_exit a NULL instead of an empty string
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.13 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
d193 1
a193 1
		sprintf(working_name,"%s.%d", file_name, frameNumber-1);
d209 1
a209 1
		sprintf(working_name,"%s.%d", file_name, frameNumber+1);
@


14.13
log
@exit->bu_exit where applicable
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.12 2007/09/15 16:23:23 brlcad Exp $ (BRL)";
d241 1
a241 1
		bu_exit ( 1, "" );
d246 1
a246 1
		bu_exit ( 1, "" );
d370 1
a370 1
	bu_exit ( 0, "" );
d395 1
a395 1
		bu_exit ( 3, "" );
@


14.12
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.11 2007/07/26 01:14:00 brlcad Exp $ (BRL)";
d241 1
a241 1
		exit( 1 );
d246 1
a246 1
		exit( 1 );
d370 1
a370 1
	exit( 0 );
d395 1
a395 1
		exit( 3 );
@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.10 2007/01/27 01:41:54 brlcad Exp $ (BRL)";
a40 4
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

d43 1
d45 2
a46 4
#ifdef HAVE_STRING_H
#include	<string.h>
#else
#include	<strings.h>
@


14.10
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a33 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.9 2007/01/23 01:13:56 brlcad Exp $ (BRL)";
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.8 2007/01/20 14:37:06 brlcad Exp $ (BRL)";
d111 1
a111 1
        [-s squaresize] [-w width] [-n height]\n\
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.7 2006/01/18 06:46:27 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.5 2005/09/22 00:21:51 brlcad Exp $ (BRL)";
@


14.5
log
@add bu.h for bu_getopt stuff
@
text
@d34 1
a34 1
 *  
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.4 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
d180 1
a180 1
		
@


14.4
log
@needs bu.h for bu_getopt
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.3 2005/01/30 20:31:33 brlcad Exp $ (BRL)";
d60 1
@


14.3
log
@update copyright to 2005
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pix3filter.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (BRL)";
d119 1
a119 1
	while ( (c = getopt( argc, argv, "vf:d:o:w:n:s:" )) != EOF )  {
d125 1
a125 1
			select_filter(optarg);
d129 1
a129 1
			kerndiv = atoi(optarg);
d133 1
a133 1
			kernoffset = atoi(optarg);
d136 1
a136 1
			width = atoi(optarg);
d139 1
a139 1
			height = atoi(optarg);
d142 1
a142 1
			width = height = atoi(optarg);
d149 1
a149 1
	if( optind >= argc )  {
d153 1
a153 1
	} else if ( optind + 3 <= argc ) {
d155 1
a155 1
		if( (oldfp = fopen(argv[optind], "r")) == NULL )  {
d158 1
a158 1
				argv[optind] );
d162 1
a162 1
		if( (curfp = fopen(argv[++optind], "r")) == NULL )  {
d165 1
a165 1
				argv[optind] );
d169 1
a169 1
		if( (newfp = fopen(argv[++optind], "r")) == NULL )  {
d172 1
a172 1
				argv[optind] );
d175 1
a175 1
		optind += 3;
d180 1
a180 1
		file_name = argv[optind];
d226 1
a226 1
		optind += 1;
d232 1
a232 1
	if ( argc > optind )
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d34 1
a34 1
 *
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a59 1
#include "bu.h"
d119 1
a119 1
	while ( (c = bu_getopt( argc, argv, "vf:d:o:w:n:s:" )) != EOF )  {
d125 1
a125 1
			select_filter(bu_optarg);
d129 1
a129 1
			kerndiv = atoi(bu_optarg);
d133 1
a133 1
			kernoffset = atoi(bu_optarg);
d136 1
a136 1
			width = atoi(bu_optarg);
d139 1
a139 1
			height = atoi(bu_optarg);
d142 1
a142 1
			width = height = atoi(bu_optarg);
d149 1
a149 1
	if( bu_optind >= argc )  {
d153 1
a153 1
	} else if ( bu_optind + 3 <= argc ) {
d155 1
a155 1
		if( (oldfp = fopen(argv[bu_optind], "r")) == NULL )  {
d158 1
a158 1
				argv[bu_optind] );
d162 1
a162 1
		if( (curfp = fopen(argv[++bu_optind], "r")) == NULL )  {
d165 1
a165 1
				argv[bu_optind] );
d169 1
a169 1
		if( (newfp = fopen(argv[++bu_optind], "r")) == NULL )  {
d172 1
a172 1
				argv[bu_optind] );
d175 1
a175 1
		bu_optind += 3;
d179 2
a180 2

		file_name = argv[bu_optind];
d226 1
a226 1
		bu_optind += 1;
d232 1
a232 1
	if ( argc > bu_optind )
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pix3filter.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *		P I X 3 F I L T E R . C
a38 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pix3filter.c,v 1.5 2004/09/09 04:53:00 kermit Exp $ (BRL)";
@


1.5
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pix3filter.c,v 1.4 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d412 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pix3filter.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (BRL)";
a33 1
                                                                                                                                                                            
d35 1
d37 1
d45 1
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pix3filter.c,v 1.2 2004/06/08 22:04:45 morrison Exp $ (BRL)";
d29 1
a29 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d32 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pix3filter.c,v 11.10 2004/05/10 15:30:50 erikg Exp $ (BRL)";
a32 2


a40 1
#include "externs.h"		/* For getopt */
@

