head	14.13;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.2
	rel-7-10-2:14.9
	rel-7-10-0:14.9
	rel-7-8-4:14.8
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.2
	rel-7-6-branch:14.2.0.2
	rel-7-6-0:14.2
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.13
date	2007.12.15.09.17.29;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.21.20.49.13;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.10;

14.10
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.27.01.41.54;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.08.01.15.02.58;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.07.10.01.25.39;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.28.22.46.19;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.23.07.44.04;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2005.08.21.14.29.55;	author brlcad;	state Exp;
branches
	14.2.2.1;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.45;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.51;	author morrison;	state Exp;
branches;
next	;

14.2.2.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@take setvbuf for granted per c89, bye bye HAVE_SETVBUF
@
text
@/*
 *		P I X C U T . C
 *
 * Extract a piece of a pix file.  If the parameters of the file to be
 * extracted do not fit within the original pix file then the extra area is
 * filled with a background solid color.
 *
 *  Author -
 *	Christopher T. Johnson
 *	September 12, 1992
 *
 *  Source -
 *	Paladin Software
 *	P.O. Box 187
 *	Aberdeen, MD	21001-0187
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1992 by Paladin Software
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.12 2007/11/21 20:49:13 erikgreenwald Exp $";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"


static long int	org_width = 512L;	/* Default file sizes 512x512 */
static long int	org_height = 512L;
static long int	new_width = 512L;
static long int	new_height = 512L;
static long int	base_x = 0;		/* Default to lower left corner */
static long int	base_y = 0;
static int	Verbose = 0;
static long int	num_bytes = 3L;

#define SIZEBACK	256
static unsigned char background[SIZEBACK];	/* Holds the fill background color */

static char	stdiobuf[4*1024*1024] = {0};
static FILE	*input = (FILE *)NULL;
static char	*in_name = (char *)NULL;
static int	autosize = 0;
static int	isfile = 0;

static char usage[] = "\
pixcut: Copyright (C) 1992 Paladin Software\n\
pixcut: All rights reserved\n\
pixcut: Usage:	[-v] [-h] [-H] [-a] [-# num_bytes] [-C red/green/blue]\n\
		[-s in_square_size] [-w in_width] [-n in_height]\n\
		[-S out_square_size] [-W out_width] [-N out_height]\n\
		[-x horizontal] [-y vertical] [file_in]\n";

void
parse_color(unsigned char *bak, char *s)
{
	int red,green,blue;
	int result;

	result = sscanf(s, "%d/%d/%d", &red, &green, &blue);
	if (result != 3) return;
	bak[0] = red;
	bak[1] = green;
	bak[2] = blue;
}

int
get_args(register int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt(argc, argv, "vahHC:s:w:n:S:W:N:x:y:#:" )) != EOF) {
		switch (c) {
		case 'v':
			Verbose = 1;
			break;
		case 'a':
			autosize = 1;
			break;
		case 'h':
			org_width = org_height = 1024L;
			autosize = 0;
			break;
		case 'H':
			new_width = new_height = 1024L;
			break;
		case 's':
			org_width = org_height = atol(bu_optarg);
			autosize = 0;
			break;
		case 'S':
			new_width = new_height = atol(bu_optarg);
			break;
		case 'w':
			org_width = atol(bu_optarg);
			autosize = 0;
			break;
		case 'W':
			new_width = atol(bu_optarg);
			break;
		case 'n':
			org_height = atol(bu_optarg);
			autosize = 0;
			break;
		case 'N':
			new_height = atol(bu_optarg);
			break;
		case 'x':
			base_x = atol(bu_optarg);
			break;
		case 'y':
			base_y = atol(bu_optarg);
			break;
		case 'C':
			parse_color(background, bu_optarg);
			break;
		case '#':
			num_bytes = atol(bu_optarg);
			break;
		default:		/* '?' */
			return(0);
		}
	}
	if (bu_optind >= argc ) {
		if ( isatty(fileno(stdin))) return(0);
		in_name = "-";
		input = stdin;
	} else {
		in_name = argv[bu_optind];
		if (strcmp(in_name,"-") == 0) {
			if (isatty(fileno(stdin))) return(0);
			input = stdin;
		} else {
			if ((input = fopen(in_name, "r")) == NULL ) {
				perror(in_name);
				(void)fprintf(stderr,
				    "pixcut: cannot open \"%s\" for reading\n",
				    in_name);
				return(0);
			}
			isfile = 1;
		}
	}
	if (argc > ++bu_optind) {
		(void)fprintf(stderr, "pixcut: excess argument(s) ignored\n");
	}
	return(1);	/* OK */
}


int
main(int argc, char **argv)
{
	unsigned char *inbuf, *outbuf;
	unsigned char *buffer;
	register long int i;
	register unsigned char *cp;
	int finish, row, result;

	for (i=0;i<SIZEBACK;i++) background[i] = 0;
	background[2] = 1;

	if (!get_args(argc,argv)) {
		(void)fprintf(stderr,"%s",usage);
		bu_exit (1, NULL);
	}
	/* Should we autosize the input? */
	if (isfile && autosize) {
		unsigned long int w,h;
		if (fb_common_file_size(&w, &h, in_name, num_bytes)) {
			org_width = (long)w;
			org_height = (long)h;
		} else {
			(void) fprintf(stderr, "pixcut: unable to autosize\n");
		}
	}

	/*
	 * On the assumption that there will be lots more input to paw
	 * through than there will be output to write, give STDIO a
	 * big input buffer to allow decent sized transfers from the
	 * filesystem.
	 */
	(void)setvbuf( input, stdiobuf, _IOFBF, sizeof(stdiobuf) );

/*
 * Make a buffer will hold a single scan line of assuming a worst
 * case cut of 1 pixel of the edge.
 */
	buffer = (unsigned char *)bu_malloc((org_width+new_width)*num_bytes, "buffer");

/*
 * Spew at the user if they asked.
 */
	if (Verbose) {
		(void)fprintf(stderr,"pixcut: Copyright (C) 1992 Paladin Software\n");
		(void)fprintf(stderr,"pixcut: All rights reserved.\npixcut:\n");
		(void)fprintf(stderr,"pixcut: original image %ldx%ld\n",
		    org_width, org_height);
		(void)fprintf(stderr,"pixcut: new image %ldx%ld\n",
		    new_width, new_height);
		(void)fprintf(stderr,"pixcut: offset %ldx%ld\n", base_x, base_y);
		(void)fprintf(stderr,"pixcut: background color %d/%d/%d\n",
		    background[0], background[1], background[2]);

		if (base_x < 0 || base_y < 0 ||
		    base_x+new_width >org_width ||
		    base_y+new_height > org_height) {
			int comma=0;
			char *last = 0;
			(void) fprintf(stderr,
"pixcut: adding background strip on the");

			if (base_x < 0) {
				last = "left";
			}
			if (base_y < 0) {
				if (last) {
					(void) fprintf(stderr," %s",last);
					comma=1;
				}
				last = "bottom";
			}
			if (base_x+new_width >org_width ){
				if (last) {
					if (comma) {
						(void)fprintf(stderr,", %s",last);
					} else {
						(void)fprintf(stderr," %s",last);
					}
					comma=1;
				}
			}
			if (base_y+new_height > org_height) {
				if (last) {
					if (comma) {
						(void)fprintf(stderr,", %s",last);
					} else {
						(void)fprintf(stderr," %s",last);
					}
					comma = 1;
				}
				last = "top";
			}
			if (comma) {
				(void)fprintf(stderr," and %s.\n",last);
			} else {
				(void)fprintf(stderr," %s.\n",last);
			}
		}
	}
/*
 * If the new image does not intersect the original, then set the base_x
 * so that it does not overlap the original but at the same time minmizes
 * the memory hit.
 */
	if (base_x + new_width < 0 || base_x > org_width) {
		base_x = org_width;
	}
/*
 * Assign the inbuf and outbuf pointers so that reads and writes take place
 * from a consistent location.
 */
	if (base_x < 0) {
		outbuf = buffer;
		inbuf = buffer - base_x*num_bytes;	/* base_x < 0 so - not + */
	} else {
		outbuf = buffer + base_x*num_bytes;
		inbuf = buffer;
	}
/*
 * Now fill the output buffer with the background color if needed.
 */
	if (base_x < 0 || base_y < 0 || base_x+new_width > org_width) {
		for (i=0, cp = outbuf; i<new_width; i++,cp+=num_bytes) {
			register long int jj;
			for (jj=0; jj<num_bytes && jj<SIZEBACK; jj++) {
				cp[jj]=background[jj];
			}
		}
	}
	finish = base_y + new_height;
	if (base_y < 0) {
		row = base_y;
	} else {
		row = 0;
	}
/*
 * Now sync the input file to the output file.
 */
	while (row < 0 && row < finish) {
		result = fwrite(outbuf, num_bytes, new_width, stdout);
		if (result != new_width) {
			perror("pixcut: fwrite");
			bu_exit (3, NULL);
		}
		row++;
	}

	while(row < base_y) {
		result = fread(inbuf, num_bytes, org_width, input);
		row++;
	}
/*
 * At this point "row" is an index into the original file.
 */
	while (row < finish && row < org_height) {
		result = fread(inbuf, num_bytes, org_width, input);
		if (result != org_width) {
			for (cp=inbuf+result*num_bytes; result < org_width; cp+=num_bytes,++result) {
				register long int jj;
				for (jj=0; jj<num_bytes && jj<SIZEBACK; jj++) {
					cp[jj] = background[jj];
				}
			}
			org_height = row-1;
		}
		result = fwrite(outbuf, num_bytes, new_width, stdout);
		if (result != new_width) {
			perror("pixcut: fwrite");
			bu_exit (3, NULL);
		}
		row++;
	}
/*
 * Refill the output buffer if we are going to be outputing background
 * lines.
 */
	if (row >= org_height) {
		for (cp=outbuf,i=0;i<new_width;cp+=num_bytes,i++) {
			register long int jj;
			for (jj=0; jj<num_bytes && jj<SIZEBACK;jj++) {
				cp[jj] = background[jj];
			}
		}
	}
/*
 * We've taken all we can from the input file, now it's time to
 * output the remaining background lines (if any).
 */
	while (row < finish) {
		result = fwrite(outbuf,num_bytes, new_width, stdout);
		if (result != new_width) {
			perror("pixcut: fwrite");
			bu_exit (3, NULL);
		}
		row++;
	}
	return(0);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@pass bu_exit a NULL instead of an empty string
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.11 2007/11/21 18:55:37 erikgreenwald Exp $";
a196 1
#ifdef HAVE_SETVBUF
a197 1
#endif
@


14.11
log
@exit->bu_exit where applicable
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.10 2007/09/15 16:23:23 brlcad Exp $";
d178 1
a178 1
		bu_exit (1, "");
d310 1
a310 1
			bu_exit (3, "");
d336 1
a336 1
			bu_exit (3, "");
d360 1
a360 1
			bu_exit (3, "");
@


14.10
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.9 2007/01/27 01:41:54 brlcad Exp $";
d178 1
a178 1
		exit(1);
d310 1
a310 1
			exit(3);
d336 1
a336 1
			exit(3);
d360 1
a360 1
			exit(3);
@


14.9
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.8 2006/08/01 15:02:58 brlcad Exp $";
d29 2
a33 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.8
log
@refactor the three asize.c implementations (libbn, libfb, & canon) into just one.  libbn had the most comprehensive and updated version, but the logic belongs in libfb.  so, the bn_common autosizing functions are now consolidated to libfb, refactoring accordingly.
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.7 2006/07/10 01:25:39 brlcad Exp $";
d227 2
a228 2
		    	int comma=0;
		    	char *last = 0;
d232 36
a267 36
		    	if (base_x < 0) {
		    		last = "left";
		    	}
		    	if (base_y < 0) {
		    		if (last) {
		    			(void) fprintf(stderr," %s",last);
		    			comma=1;
		    		}
		    		last = "bottom";
		    	}
		    	if (base_x+new_width >org_width ){
		    		if (last) {
		    			if (comma) {
		    				(void)fprintf(stderr,", %s",last);
		    			} else {
		    				(void)fprintf(stderr," %s",last);
		    			}
		    			comma=1;
		    		}
		    	}
		    	if (base_y+new_height > org_height) {
		    		if (last) {
		    			if (comma) {
		    				(void)fprintf(stderr,", %s",last);
		    			} else {
		    				(void)fprintf(stderr," %s",last);
		    			}
		    			comma = 1;
		    		}
		    		last = "top";
		    	}
		    	if (comma) {
		    		(void)fprintf(stderr," and %s.\n",last);
		    	} else {
		    		(void)fprintf(stderr," %s.\n",last);
		    	}
@


14.7
log
@remove/rewrite a bunch of the old SYSV preprocessor symbol sections
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.6 2006/01/28 22:46:19 brlcad Exp $";
d186 1
a186 1
		if (bn_common_file_size(&w, &h, in_name, num_bytes)) {
@


14.6
log
@header cleanup, include stdlib.h for atol(). fixes some 64-bitness
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.5 2006/01/23 07:44:04 brlcad Exp $";
d56 3
a58 6
#if defined(SYSV)
static char	stdiobuf[4*1024*1024];
#endif

static FILE	*input;
static char	*in_name;
d194 8
a201 7
/*
 * On the assumption that there will be lots more input to paw through
 * than there will be output to write, give STDIO a big input buffer
 * to allow decent sized transfers from the filesystem.
 */
#if defined( SYSV )
	(void) setvbuf( input, stdiobuf, _IOFBF, sizeof(stdiobuf) );
@


14.5
log
@libbu for allocations
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.4 2005/10/23 04:44:39 brlcad Exp $";
d27 2
a31 1
#include <stdio.h>
@


14.4
log
@trailing ws
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.3 2005/09/21 19:05:37 brlcad Exp $";
d209 2
a210 4
	if ((buffer = (unsigned char *)malloc((org_width+new_width)*num_bytes)) == (unsigned char *)NULL ) {
		(void) fprintf(stderr, "pixcut: Out of memory (malloc failed)\n");
		exit(2);
	}
@


14.3
log
@needs bu.h for bu_getopt
@
text
@d11 1
a11 1
 *  
d16 1
a16 1
 *  
d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.2 2005/08/21 14:29:55 brlcad Exp $";
d168 1
a168 1
			
d227 1
a227 1
		if (base_x < 0 || base_y < 0 || 
@


14.2
log
@convert image dimensions to long ints to support larger image sizes.  quell other various const warnings too.
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pixcut.c,v 14.1 2004/11/16 19:42:32 morrison Exp $";
d90 1
a90 1
	while ( (c = getopt(argc, argv, "vahHC:s:w:n:S:W:N:x:y:#:" )) != EOF) {
d106 1
a106 1
			org_width = org_height = atol(optarg);
d110 1
a110 1
			new_width = new_height = atol(optarg);
d113 1
a113 1
			org_width = atol(optarg);
d117 1
a117 1
			new_width = atol(optarg);
d120 1
a120 1
			org_height = atol(optarg);
d124 1
a124 1
			new_height = atol(optarg);
d127 1
a127 1
			base_x = atol(optarg);
d130 1
a130 1
			base_y = atol(optarg);
d133 1
a133 1
			parse_color(background, optarg);
d136 1
a136 1
			num_bytes = atol(optarg);
d142 1
a142 1
	if (optind >= argc ) {
d147 1
a147 1
		in_name = argv[optind];
d162 1
a162 1
	if (argc > ++optind) {
@


14.2.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d11 1
a11 1
 *
d16 1
a16 1
 *
d22 1
a22 1
static const char RCSid[] = "@@(#)$Header$";
d90 1
a90 1
	while ( (c = bu_getopt(argc, argv, "vahHC:s:w:n:S:W:N:x:y:#:" )) != EOF) {
d106 1
a106 1
			org_width = org_height = atol(bu_optarg);
d110 1
a110 1
			new_width = new_height = atol(bu_optarg);
d113 1
a113 1
			org_width = atol(bu_optarg);
d117 1
a117 1
			new_width = atol(bu_optarg);
d120 1
a120 1
			org_height = atol(bu_optarg);
d124 1
a124 1
			new_height = atol(bu_optarg);
d127 1
a127 1
			base_x = atol(bu_optarg);
d130 1
a130 1
			base_y = atol(bu_optarg);
d133 1
a133 1
			parse_color(background, bu_optarg);
d136 1
a136 1
			num_bytes = atol(bu_optarg);
d142 1
a142 1
	if (bu_optind >= argc ) {
d147 1
a147 1
		in_name = argv[bu_optind];
d162 1
a162 1
	if (argc > ++bu_optind) {
d168 1
a168 1

d227 1
a227 1
		if (base_x < 0 || base_y < 0 ||
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixcut.c,v 1.4 2004/08/02 23:01:53 morrison Exp $";
d28 1
a28 1
# include <unistd.h>
a29 2
                                                                                                                                                                            

d32 1
a32 1
#include <string.h>
d34 1
a34 1
#include <strings.h>
d42 7
a48 6
static int	org_width = 512;	/* Default file sizes 512x512 */
static int	org_height = 512;
static int	new_width = 512;
static int	new_height = 512;
static int	base_x = 0;		/* Default to lower left corner */
static int	base_y = 0;
d50 1
a50 1
static int	num_bytes = 3;
d99 1
a99 1
			org_width = org_height = 1024;
d103 1
a103 1
			new_width = new_height = 1024;
d106 1
a106 1
			org_width = org_height = atoi(optarg);
d110 1
a110 1
			new_width = new_height = atoi(optarg);
d113 1
a113 1
			org_width = atoi(optarg);
d117 1
a117 1
			new_width = atoi(optarg);
d120 1
a120 1
			org_height = atoi(optarg);
d124 1
a124 1
			new_height = atoi(optarg);
d127 1
a127 1
			base_x = atoi(optarg);
d130 1
a130 1
			base_y = atoi(optarg);
d136 1
a136 1
			num_bytes = atoi(optarg);
d174 1
a174 1
	register int i;
d187 1
a187 1
		int w,h;
d189 2
a190 2
			org_width = w;
			org_height = h;
d219 1
a219 1
		(void)fprintf(stderr,"pixcut: original image %dx%d\n",
d221 1
a221 1
		(void)fprintf(stderr,"pixcut: new image %dx%d\n",
d223 1
a223 1
		(void)fprintf(stderr,"pixcut: offset %dx%d\n", base_x, base_y);
d297 1
a297 1
			register int jj;
d332 1
a332 1
				register int jj;
d352 1
a352 1
			register int jj;
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixcut.c,v 1.3 2004/06/09 18:21:39 erikg Exp $";
d373 10
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pixcut.c,v 1.2 2004/06/08 22:04:45 morrison Exp $";
d25 1
a25 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header$";
d28 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pixcut.c,v 11.9 2004/05/10 15:30:50 erikg Exp $";
a28 2


a39 2

#include "externs.h"		/* For getopt and malloc */
@

