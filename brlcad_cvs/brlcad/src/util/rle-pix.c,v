head	14.14;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.14
date	2007.12.16.15.59.41;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.27.01.41.55;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.57;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.22.00.21.51;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.34;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.04.53.00;	author kermit;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.59;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.21;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@convert all bzero calls to memset
@
text
@/*                       R L E - P I X . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file rle-pix.c
 *
 *  Decode a Utah Raster Toolkit RLE image, and output as a pix(5) file.
 *
 *  Author -
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.13 2007/10/26 21:51:26 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"
#include "fb.h"
#include "rle.h"


static FILE	*infp;
static char	*infile;
static FILE	*outfp;

static int	background[3];
static int	override_background;

unsigned char	*rows[4];		/* Character pointers for rle_getrow */

static RGBpixel	*scan_buf;		/* single scanline buffer */
static RGBpixel	*bg_buf;		/* single scanline of background */
static ColorMap	cmap;

static int	screen_width = 0;
static int	screen_height = 0;

static int	crunch;
static int	r_debug;
static int	hflag;			/* print header only */

static char	usage[] = "\
Usage: rle-pix [-c -d -h -H] [-C r/g/b]\n\
	[-s|S squareoutsize] [-w|W out_width] [-n|N out_height]\n\
	[file.rle [file.pix]]\n\
";

/*
 *			G E T _ A R G S
 */
static int
get_args(int argc, register char **argv)
{
	register int	c;

	while( (c = bu_getopt( argc, argv, "cdhHs:S:w:W:n:N:C:" )) != EOF )  {
		switch( c )  {
		case 'd':
			r_debug = 1;
			break;
		case 'c':
			crunch = 1;
			break;
		case 'H':
			hflag = 1;
			break;
		case 'h':
			/* high-res */
			screen_height = screen_width = 1024;
			break;
		case 'S':
		case 's':
			/* square screen size */
			screen_height = screen_width = atoi(bu_optarg);
			break;
		case 'W':
		case 'w':
			screen_width = atoi(bu_optarg);
			break;
		case 'N':
		case 'n':
			screen_height = atoi(bu_optarg);
			break;
		case 'C':
			{
				register char *cp = bu_optarg;
				register int *conp = background;

				/* premature null => atoi gives zeros */
				for( c=0; c < 3; c++ )  {
					*conp++ = atoi(cp);
					while( *cp && *cp++ != '/' ) ;
				}
				override_background = 1;
			}
			break;
		default:
		case '?':
			return	0;
		}
	}
	if( argv[bu_optind] != NULL )  {
		if( (infp = fopen( (infile=argv[bu_optind]), "r" )) == NULL )  {
			perror(infile);
			return	0;
		}
		bu_optind++;
	} else {
		infile = "-";
	}
	if( argv[bu_optind] != NULL )  {
		if (bu_file_exists(argv[bu_optind])) {
		    bu_exit( 1, "rle-pix: \"%s\" already exists.\n", argv[bu_optind]);
		}
		if( (outfp = fopen( argv[bu_optind], "w" )) == NULL )  {
			perror(argv[bu_optind]);
			return	0;
		}
	}
	if( argc > ++bu_optind )
		(void) fprintf( stderr, "rle-pix:  excess arguments ignored\n" );

	if( isatty(fileno(infp)) )
		return(0);
	if( !hflag && isatty(fileno(outfp)) )
		return(0);
	return(1);				/* OK */
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register int i;
	int	file_width;		/* unclipped width of rectangle */
	int	file_skiplen;		/* # of pixels to skip on l.h.s. */
	int	screen_xbase;		/* screen X of l.h.s. of rectangle */
	int	screen_xlen;		/* clipped len of rectangle */
	int	ncolors;

	infp = stdin;
	outfp = stdout;
	if( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	rle_dflt_hdr.rle_file = infp;
	if( rle_get_setup( &rle_dflt_hdr ) < 0 )  {
		fprintf(stderr, "rle-pix: Error reading setup information\n");
		exit(1);
	}

	if (r_debug)  {
		fprintf( stderr,"Image bounds\n\tmin %d %d\n\tmax %d %d\n",
			rle_dflt_hdr.xmin, rle_dflt_hdr.ymin,
			rle_dflt_hdr.xmax, rle_dflt_hdr.ymax );
		fprintf(stderr, "%d color channels\n", rle_dflt_hdr.ncolors);
		fprintf(stderr,"%d color map channels\n", rle_dflt_hdr.ncmap);
		if ( rle_dflt_hdr.alpha )
			fprintf( stderr, "Alpha Channel present in input, ignored.\n");
		for( i=0; i < rle_dflt_hdr.ncolors; i++ )
			fprintf(stderr,"Background channel %d = %d\n",
				i, rle_dflt_hdr.bg_color[i] );
		rle_debug(1);
	}

	if( rle_dflt_hdr.ncmap == 0 )
		crunch = 0;

	/* Only interested in R, G, & B */
	RLE_CLR_BIT(rle_dflt_hdr, RLE_ALPHA);
	for (i = 3; i < rle_dflt_hdr.ncolors; i++)
		RLE_CLR_BIT(rle_dflt_hdr, i);
	ncolors = rle_dflt_hdr.ncolors > 3 ? 3 : rle_dflt_hdr.ncolors;

	/* Optional background color override */
	if( override_background )  {
		for( i=0; i<ncolors; i++ )
			rle_dflt_hdr.bg_color[i] = background[i];
	}

	file_width = rle_dflt_hdr.xmax - rle_dflt_hdr.xmin + 1;

	/* Default screen (output) size tracks input rectangle upper right corner */
	if( screen_width == 0 )  {
		screen_width = rle_dflt_hdr.xmax + 1;
	}
	if( screen_height == 0 )  {
		screen_height = rle_dflt_hdr.ymax + 1;
	}

	/* Report screen (output) size given image size & other options */
	if( hflag )  {
		printf("-w%d -n%d\n",
			screen_width, screen_height );
		exit(0);
	}

	/* Discard any scanlines which exceed screen height */
	if( rle_dflt_hdr.ymax > screen_height-1 )
		rle_dflt_hdr.ymax = screen_height-1;

	/* Clip left edge */
	screen_xbase = rle_dflt_hdr.xmin;
	screen_xlen = screen_width;
	file_skiplen = 0;
	if( screen_xbase < 0 )  {
		file_skiplen = -screen_xbase;
		screen_xbase = 0;
		screen_xlen -= file_skiplen;
	}
	/* Clip right edge */
	if( screen_xbase + screen_xlen > screen_width )
		screen_xlen = screen_width - screen_xbase;

	if( screen_xlen <= 0 ||
	    rle_dflt_hdr.ymin > screen_height ||
	    rle_dflt_hdr.ymax < 0 )  {
		fprintf(stderr,
		"rle-pix:  Warning:  RLE image rectangle entirely off screen\n");
		goto done;
	}

	/* NOTE:  This code can't do repositioning very well.
	 * background flooding on the edges is needed, at a minimum.
	 */

	scan_buf = (RGBpixel *)malloc( sizeof(RGBpixel) * screen_width );
	bg_buf = (RGBpixel *)malloc( sizeof(RGBpixel) * screen_width );

	/* Fill in background buffer */
	if (!rle_dflt_hdr.bg_color) {
		(void)memset((char *)bg_buf, 0, sizeof(RGBpixel) * screen_width);
	} else {
		for( i=0; i<screen_xlen; i++ )  {
			bg_buf[i][0] = rle_dflt_hdr.bg_color[0];
			bg_buf[i][1] = rle_dflt_hdr.bg_color[1];
			bg_buf[i][2] = rle_dflt_hdr.bg_color[2];
		}
	}

	for( i=0; i < ncolors; i++ )
		rows[i] = (unsigned char *)malloc((size_t)file_width);
	for( ; i < 3; i++ )
		rows[i] = rows[0];	/* handle monochrome images */

	/*
	 *  Import Utah color map, converting to libfb format.
	 *  Check for old format color maps, where high 8 bits
	 *  were zero, and correct them.
	 *  XXX need to handle < 3 channels of color map, by replication.
	 */
	if( crunch && rle_dflt_hdr.ncmap > 0 )  {
		register int maplen = (1 << rle_dflt_hdr.cmaplen);
		register int all = 0;
		for( i=0; i<256; i++ )  {
			cmap.cm_red[i] = rle_dflt_hdr.cmap[i];
			cmap.cm_green[i] = rle_dflt_hdr.cmap[i+maplen];
			cmap.cm_blue[i] = rle_dflt_hdr.cmap[i+2*maplen];
			all |= cmap.cm_red[i] | cmap.cm_green[i] |
				cmap.cm_blue[i];
		}
		if( (all & 0xFF00) == 0 && (all & 0x00FF) != 0 )  {
			/*  This is an old (Edition 2) color map.
			 *  Correct by shifting it left 8 bits.
			 */
			for( i=0; i<256; i++ )  {
				cmap.cm_red[i] <<= 8;
				cmap.cm_green[i] <<= 8;
				cmap.cm_blue[i] <<= 8;
			}
			fprintf(stderr,
				"rle-pix: correcting for old style colormap\n");
		}
	}

	/* Handle any lines below zero in y.  Decode and discard. */
	for( i = rle_dflt_hdr.ymin; i < 0; i++ )
		rle_getrow( &rle_dflt_hdr, rows );

	/* Background-fill any lines above 0, below ymin */
	for( i=0; i < rle_dflt_hdr.ymin; i++ )
		fwrite( (char *)bg_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );

	for( ; i <= rle_dflt_hdr.ymax; i++)  {
		register unsigned char	*pp = (unsigned char *)scan_buf;
		register rle_pixel	*rp = &(rows[0][file_skiplen]);
		register rle_pixel	*gp = &(rows[1][file_skiplen]);
		register rle_pixel	*bp = &(rows[2][file_skiplen]);
		register int		j;

		rle_getrow(&rle_dflt_hdr, rows );

		/* Grumble, convert from Utah layout */
		if( !crunch )  {
			for( j = 0; j < screen_xlen; j++)  {
				*pp++ = *rp++;
				*pp++ = *gp++;
				*pp++ = *bp++;
			}
		} else {
			for( j = 0; j < screen_xlen; j++)  {
				*pp++ = cmap.cm_red[*rp++]>>8;
				*pp++ = cmap.cm_green[*gp++]>>8;
				*pp++ = cmap.cm_blue[*bp++]>>8;
			}
		}
		fwrite( (char *)scan_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );
	}

	/* Background-fill any lines above ymax, below screen_height */
	for( ; i < screen_height; i++ )
		fwrite( (char *)bg_buf, sizeof(RGBpixel), (size_t)screen_xlen, outfp );
done:
	fclose( outfp );
	exit(0);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.12 2007/09/15 16:23:23 brlcad Exp $ (BRL)";
d262 1
a262 1
		(void)bzero((char *)bg_buf, sizeof(RGBpixel) * screen_width);
@


14.12
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.11 2007/07/26 01:14:00 brlcad Exp $ (BRL)";
d138 2
a139 5
		if( access( argv[bu_optind], 0 ) == 0 )  {
			(void) fprintf( stderr,
				"rle-pix: \"%s\" already exists.\n",
				argv[bu_optind] );
			exit( 1 );
@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.10 2007/01/27 01:41:55 brlcad Exp $ (BRL)";
a33 4
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

d36 1
d38 2
a39 4
#ifdef HAVE_STRING_H
#include	<string.h>
#else
#include	<strings.h>
@


14.10
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a26 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d29 1
a29 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.9 2007/01/23 01:13:57 brlcad Exp $ (BRL)";
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.8 2007/01/20 14:37:07 brlcad Exp $ (BRL)";
d227 1
a227 1
	    	screen_width = rle_dflt_hdr.xmax + 1;
d230 1
a230 1
	    	screen_height = rle_dflt_hdr.ymax + 1;
d260 1
a260 1
	    	fprintf(stderr,
d267 1
a267 1
 	 */
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d33 1
a33 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.7 2006/01/18 06:46:28 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.5 2005/09/22 00:21:51 brlcad Exp $ (BRL)";
@


14.5
log
@add bu.h for bu_getopt stuff
@
text
@d27 1
a27 1
 *  
d34 1
a34 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.4 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
d66 1
a66 1
	
@


14.4
log
@needs bu.h for bu_getopt
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.3 2005/01/30 20:31:34 brlcad Exp $ (BRL)";
d53 1
@


14.3
log
@update copyright to 2005
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (BRL)";
d91 1
a91 1
	while( (c = getopt( argc, argv, "cdhHs:S:w:W:n:N:C:" )) != EOF )  {
d109 1
a109 1
			screen_height = screen_width = atoi(optarg);
d113 1
a113 1
			screen_width = atoi(optarg);
d117 1
a117 1
			screen_height = atoi(optarg);
d121 1
a121 1
				register char *cp = optarg;
d137 2
a138 2
	if( argv[optind] != NULL )  {
		if( (infp = fopen( (infile=argv[optind]), "r" )) == NULL )  {
d142 1
a142 1
		optind++;
d146 2
a147 2
	if( argv[optind] != NULL )  {
		if( access( argv[optind], 0 ) == 0 )  {
d150 1
a150 1
				argv[optind] );
d153 2
a154 2
		if( (outfp = fopen( argv[optind], "w" )) == NULL )  {
			perror(argv[optind]);
d158 1
a158 1
	if( argc > ++optind )
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 1
 *
d34 1
a34 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
a52 1
#include "bu.h"
d65 1
a65 1

d91 1
a91 1
	while( (c = bu_getopt( argc, argv, "cdhHs:S:w:W:n:N:C:" )) != EOF )  {
d109 1
a109 1
			screen_height = screen_width = atoi(bu_optarg);
d113 1
a113 1
			screen_width = atoi(bu_optarg);
d117 1
a117 1
			screen_height = atoi(bu_optarg);
d121 1
a121 1
				register char *cp = bu_optarg;
d137 2
a138 2
	if( argv[bu_optind] != NULL )  {
		if( (infp = fopen( (infile=argv[bu_optind]), "r" )) == NULL )  {
d142 1
a142 1
		bu_optind++;
d146 2
a147 2
	if( argv[bu_optind] != NULL )  {
		if( access( argv[bu_optind], 0 ) == 0 )  {
d150 1
a150 1
				argv[bu_optind] );
d153 2
a154 2
		if( (outfp = fopen( argv[bu_optind], "w" )) == NULL )  {
			perror(argv[bu_optind]);
d158 1
a158 1
	if( argc > ++bu_optind )
@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d34 1
a34 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			R L E - P I X . C
a31 3
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
d34 1
a34 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 1.5 2004/09/09 04:53:00 kermit Exp $ (BRL)";
@


1.5
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 1.4 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d343 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (BRL)";
a25 1
                                                                                                                                                                            
d27 1
d29 1
d31 1
a31 1
#include <string.h>
d33 1
a33 1
#include <strings.h>
d39 1
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 1.2 2004/06/08 22:04:47 morrison Exp $ (BRL)";
d21 1
a21 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d24 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d18 1
a18 1
static const char RCSid[] = "@@(#)$Id: rle-pix.c,v 11.8 2004/05/10 15:30:51 erikg Exp $ (BRL)";
a24 2


a32 1
#include "externs.h"			/* For getopt and malloc and getenv */
@

