head	14.13;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.2
	rel-7-10-2:14.9
	rel-7-10-0:14.9
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.13
date	2007.11.21.20.49.14;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.11.21.15.29.35;	author erikgreenwald;	state Exp;
branches;
next	14.10;

14.10
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.56;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.04.06.20.38.03;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.28.00.36.30;	author brlcad;	state Exp;
branches
	14.6.2.1;
next	14.5;

14.5
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.34;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.14.23.34.04;	author butler;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.46;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.58;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.21;	author brlcad;	state Exp;
branches;
next	;

14.6.2.1
date	2006.04.07.19.34.24;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.13
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                        P N G - B W . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file png-bw.c
 *	Convert PNG (Portable Network Graphics) format to bw
 *
 *	Author -
 *		John R. Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */


#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.12 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "png.h"
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "zlib.h"

static png_color_16 def_backgrd={ 0,0,0,0,0 };
static int verbose=0;

static char *usage="Usage:\n\t%s [-v] [-ntsc -crt -R[#] -G[#] -B[#]] [png_input_file] > bw_output_file\n";

int
main(int argc, char **argv)
{
	int i;
	int convert_to_bw=0;
	FILE *fp_in;
	png_structp png_p;
	png_infop info_p;
	char header[8];
	int bit_depth;
	int color_type;
	png_color_16p input_backgrd;
	double gamma;
	int file_width, file_height;
	unsigned char *image;
	unsigned char **rows;
	unsigned char *obuf;
	double  rweight = 0.0;
	double  gweight = 0.0;
	double  bweight = 0.0;
	int     red   = 0;
	int     green = 0;
	int     blue  = 0;
	int multiple_colors;
	int num_color_planes;
	int clip_high, clip_low;
	int num;
	int in, out;
	double value;

	while( argc > 1 && argv[1][0] == '-' )
	{
		if( strcmp( argv[1], "-v" ) == 0 )
			verbose = 1;
		else if( strcmp(argv[1],"-ntsc") == 0 )
		{
			/* NTSC weights */
			rweight = 0.30;
			gweight = 0.59;
			bweight = 0.11;
			red = green = blue = 1;
		}
		else if( strcmp(argv[1],"-crt") == 0 )
		{
			/* CRT weights */
			rweight = 0.26;
			gweight = 0.66;
			bweight = 0.08;
			red = green = blue = 1;
		}
		else switch( argv[1][1] )
		{
			case 'R':
				red++;
				if( argv[1][2] != '\0' )
					rweight = atof( &argv[1][2] );
				break;
			case 'G':
				green++;
				if( argv[1][2] != '\0' )
					gweight = atof( &argv[1][2] );
				break;
			case 'B':
				blue++;
				if( argv[1][2] != '\0' )
					bweight = atof( &argv[1][2] );
				break;
			default:
				bu_log( "Illegal option (%s)\n", argv[1] );
				bu_log( usage, "png-bw" );
				bu_exit( EXIT_FAILURE, "Illegal option\n" );
		}
		argc--;
		argv++;
	}

	if( argc < 2 )
	{
		if( isatty(fileno(stdin)) )
		{
			bu_log( usage, "png-bw" );
			bu_exit( EXIT_FAILURE, "Are you intending to type in a PNG format file??\n" );
		}
		fp_in = stdin;
	}
	else
	{
		if( (fp_in = fopen(argv[1], "rb")) == NULL )
		{
			perror(argv[1]);
			bu_log ( "png-bw: cannot open \"%s\" for reading\n",argv[1] );
			bu_exit( EXIT_FAILURE, "Cannot open input file\n" );
		}
	}

	if( fread( header, 8, 1, fp_in ) != 1 )
		bu_exit( EXIT_FAILURE, "ERROR: Failed while reading file header!!!\n" );

	if( !png_check_sig( (png_bytep)header, 8 ) )
		bu_exit( EXIT_FAILURE, "This is not a PNG file!!!\n" );

	png_p = png_create_read_struct( PNG_LIBPNG_VER_STRING, NULL, NULL, NULL );
	if( !png_p )
		bu_exit( EXIT_FAILURE, "png_create_read_struct() failed!!\n" );

	info_p = png_create_info_struct( png_p );
	if( !info_p )
		bu_exit( EXIT_FAILURE, "png_create_info_struct() failed!!\n" );

	png_init_io( png_p, fp_in );

	png_set_sig_bytes( png_p, 8 );

	png_read_info( png_p, info_p );

	color_type = png_get_color_type( png_p, info_p );

	if( color_type != PNG_COLOR_TYPE_GRAY &&
	    color_type != PNG_COLOR_TYPE_GRAY_ALPHA )
	{
		bu_log( "Warning: color image being converted to B/W!!!\n" );
		convert_to_bw = 1;
	}

	png_set_expand( png_p );
	bit_depth = png_get_bit_depth( png_p, info_p );
	if( bit_depth == 16 )
		png_set_strip_16( png_p );

	file_width = png_get_image_width( png_p, info_p );
	file_height = png_get_image_height( png_p, info_p );

	if( verbose )
	{
		switch (color_type)
		{
			case PNG_COLOR_TYPE_GRAY:
				bu_log( "color type: b/w (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_GRAY_ALPHA:
				bu_log( "color type: b/w with alpha channel (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_PALETTE:
				bu_log( "color type: color palette (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_RGB:
				bu_log( "color type: RGB (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_RGB_ALPHA:
				bu_log( "color type: RGB with alpha channel (bit depth=%d)\n", bit_depth );
				break;
			default:
				bu_log( "Unrecognized color type (bit depth=%d)\n", bit_depth );
				break;
		}
		bu_log( "Image size: %d X %d\n", file_width, file_height );
	}

	if( png_get_bKGD( png_p, info_p, &input_backgrd ) )
	{
		if( verbose && (color_type == PNG_COLOR_TYPE_GRAY_ALPHA ||
				color_type == PNG_COLOR_TYPE_RGB_ALPHA ) )
			bu_log( "background color: %d %d %d\n", input_backgrd->red, input_backgrd->green, input_backgrd->blue );
		png_set_background( png_p, input_backgrd, PNG_BACKGROUND_GAMMA_FILE, 1, 1.0 );
	}
	else
		png_set_background( png_p, &def_backgrd, PNG_BACKGROUND_GAMMA_FILE, 0, 1.0 );

	if( png_get_gAMA( png_p, info_p, &gamma ) )
	{
		if( verbose )
			bu_log( "gamma: %g\n", gamma );
		png_set_gAMA( png_p, info_p, gamma );
	}

	if( verbose )
	{
		if( png_get_interlace_type( png_p, info_p ) == PNG_INTERLACE_NONE )
			bu_log( "not interlaced\n" );
		else
			bu_log( "interlaced\n" );
	}

	png_read_update_info( png_p, info_p );

	if( !convert_to_bw )
	{
		/* allocate memory for image */
		image = (unsigned char *)bu_calloc( 1, file_width*file_height, "image" );

		/* create rows array */
		rows = (unsigned char **)bu_calloc( file_height, sizeof( unsigned char *), "rows" );
		for( i=0 ; i<file_height ; i++ )
			rows[file_height-1-i] = image+(i*file_width);
	}
	else
	{
		/* allocate memory for image */
		image = (unsigned char *)bu_calloc( 1, file_width*file_height*3, "image" );

		/* create rows array */
		rows = (unsigned char **)bu_calloc( file_height, sizeof( unsigned char *), "rows" );
		for( i=0 ; i<file_height ; i++ )
			rows[file_height-1-i] = image+(i*file_width*3);
	}

	png_read_image( png_p, rows );

	if( !convert_to_bw )
	{
		fwrite( image, file_width*file_height, 1,stdout );
		bu_exit ( 0, NULL );
	}

	obuf = (unsigned char *)bu_calloc( file_width*file_height, sizeof( unsigned char ), "obuf" );

	/* Following code modified from pix-bw.c */

	/* Hack for multiple color planes */
	if( red + green + blue > 1 || rweight != 0.0 || gweight != 0.0 || bweight != 0.0 )
		multiple_colors = 1;
	else
		multiple_colors = 0;

	num_color_planes = red + green + blue;
	if( red != 0 && rweight == 0.0 )
		rweight = 1.0 / (double)num_color_planes;
	if( green != 0 && gweight == 0.0 )
		gweight = 1.0 / (double)num_color_planes;
	if( blue != 0 && bweight == 0.0 )
		bweight = 1.0 / (double)num_color_planes;

	clip_high = clip_low = 0;

	/*
	 * The loops are repeated for efficiency...
	 */
	num = file_width*file_height*3;
	if( multiple_colors ) {
		for( in = out = 0; out < num/3; out++, in += 3 ) {
			value = rweight*image[in] + gweight*image[in+1] + bweight*image[in+2];
			if( value > 255.0 ) {
				obuf[out] = 255;
				clip_high++;
			} else if( value < 0.0 ) {
				obuf[out] = 0;
				clip_low++;
			} else
				obuf[out] = value;
		}
	} else if( red ) {
		for( in = out = 0; out < num/3; out++, in += 3 )
			obuf[out] = image[in];
	} else if( green ) {
		for( in = out = 0; out < num/3; out++, in += 3 )
			obuf[out] = image[in+1];
	} else if( blue ) {
		for( in = out = 0; out < num/3; out++, in += 3 )
			obuf[out] = image[in+2];
	} else {
		/* uniform weight */
		for( in = out = 0; out < num/3; out++, in += 3 )
			obuf[out] = ((int)image[in] + (int)image[in+1] +
				(int)image[in+2]) / 3;
	}

	fwrite( obuf, sizeof( char ), num/3, stdout );

	if( clip_high != 0 || clip_low != 0 )
	{
		fprintf( stderr, "png-bw: clipped %d high, %d, low\n",
			clip_high, clip_low );
	}

	if( verbose )
	{
		png_timep mod_time;
		png_textp text;
		int num_text;

		png_read_end(png_p, info_p );
		if( png_get_text( png_p, info_p, &text, &num_text ) )
		{
			int i;

			for( i=0 ; i<num_text ; i++ )
				bu_log( "%s: %s\n", text[i].key, text[i].text );
		}
		if( png_get_tIME( png_p, info_p, &mod_time ) )
			bu_log( "Last modified: %d/%d/%d %d:%d:%d\n", mod_time->month, mod_time->day,
				mod_time->year, mod_time->hour, mod_time->minute, mod_time->second );
	}
	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@exit->bu_exit where applicable
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.11 2007/11/21 15:29:35 erikgreenwald Exp $ (BRL)";
d270 1
a270 1
		bu_exit ( 0, "" );
@


14.11
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.10 2007/09/15 16:23:23 brlcad Exp $ (BRL)";
d270 1
a270 1
		exit( 0 );
@


14.10
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.9 2007/01/23 01:13:56 brlcad Exp $ (BRL)";
d129 1
a129 1
				bu_bomb( "Illegal option\n" );
d140 1
a140 1
			bu_bomb( "Are you intending to type in a PNG format file??\n" );
d150 1
a150 1
			bu_bomb( "Cannot open input file\n" );
d155 1
a155 1
		bu_bomb( "ERROR: Failed while reading file header!!!\n" );
d158 1
a158 1
		bu_bomb( "This is not a PNG file!!!\n" );
d162 1
a162 1
		bu_bomb( "png_create_read_struct() failed!!\n" );
d166 1
a166 1
		bu_bomb( "png_create_info_struct() failed!!\n" );
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.8 2007/01/20 14:37:07 brlcad Exp $ (BRL)";
d41 2
a42 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.7 2006/04/06 20:38:03 brlcad Exp $ (BRL)";
@


14.7
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.6 2006/01/28 00:36:30 brlcad Exp $ (BRL)";
@


14.6
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.5 2006/01/18 06:46:28 brlcad Exp $ (BRL)";
d47 3
@


14.6.2.1
log
@update from HEAD
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.6 2006/01/28 00:36:30 brlcad Exp $ (BRL)";
a46 3
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
@


14.5
log
@update copyright to 2006
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.4 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
d39 1
d41 1
a41 3
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
d43 1
a43 1
#include <string.h>
d45 1
a45 1
#include <strings.h>
d47 1
a47 1
#include <math.h>
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.3 2005/01/30 20:31:34 brlcad Exp $ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d26 1
a26 1
 *  
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/png-bw.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (BRL)";
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d26 1
a26 1
 *
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/png-bw.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
a29 9
 *  
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *      This software is Copyright (C) 1998-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/png-bw.c,v 1.4 2004/10/14 23:34:04 butler Exp $ (BRL)";
@


1.4
log
@various utilities needed stdlib.h to get a declaration of atof() so I added it
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/png-bw.c,v 1.3 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d344 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/png-bw.c,v 1.2 2004/06/08 22:04:46 morrison Exp $ (BRL)";
d29 3
@


1.2
log
@obliterate externs.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/png-bw.c,v 11.12 2004/05/10 15:30:51 erikg Exp $ (BRL)";
a29 2


a38 1
#include "externs.h"
@

