head	14.12;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.8
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.12
date	2007.12.14.13.21.14;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.07.26.01.13.59;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.52;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.05;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.07.09.19.17.17;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.07.09.10.10.29;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.06.30.00.08.37;	author erikgreenwald;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2005.01.30.20.31.32;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.45.40;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.08.14.43.42;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.25.05.31.28;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.42;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.41;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.12
log
@use bu_temp_file() instead of using mkstemp directly and assuming there's a /usr/tmp
@
text
@/*                        B U F F E R . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file buffer.c
 *
 *  This program is intended to be use as part of a complex pipeline.
 *  It serves somewhat the same purpose as the Prolog "cut" operator.
 *  Data from stdin is read and buffered until EOF is detected, and then
 *  all the buffered data is written to stdout.  An arbitrary amount of
 *  data may need to be buffered, so a combination of a 1 Mbyte memory buffer
 *  and a temporary file is used.
 *
 *  The use of read() and write() is prefered over fread() and fwrite()
 *  for reasons of efficiency, given the large buffer size in use.
 *
 *  Author -
 *	Michael John Muuss
 *
 */

#include "common.h"

#include <stdio.h>
#include <stdlib.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#ifdef HAVE_FCNTL_H
#  include <fcntl.h>
#endif

#include "machine.h"
#include "bu.h"


#define	SIZE	(1024*1024)


char template[512] = {0};
char buf[SIZE] = {0};


int
main(int argc, char *argv[])
{
    FILE *fp;
    register int	count;
    register int	tfd;

	if( (count = bu_mread(0, buf, sizeof(buf))) < sizeof(buf) )  {
		if( count < 0 )  {
			perror("buffer: mem read");
			exit(1);
		}
		/* Entire input sequence fit into buf */
		if( write(1, buf, count) != count )  {
			perror("buffer: stdout write 1");
			exit(1);
		}
		exit(0);
	}

	/* Create temporary file to hold data, get r/w file descriptor */
	fp = bu_temp_file(template, 512);
	if ((tfd = fileno(fp)) < 0 )  {
		perror(template);
		goto err;
	}

	/* Stash away first buffer full */
	if( write(tfd, buf, count) != count )  {
		perror("buffer: tmp write1");
		goto err;
	}

	/* Continue reading and writing additional buffer loads to temp file */
	while( (count = bu_mread(0, buf, sizeof(buf))) > 0 )  {
		if( write(tfd, buf, count) != count )  {
			perror("buffer: tmp write2");
			goto err;
		}
	}
	if( count < 0 )  {
		perror("buffer: read");
		goto err;
	}

	/* All input read, regurgitate it all on stdout */
	if( lseek( tfd, 0L, 0 ) < 0 )  {
		perror("buffer: lseek");
		goto err;
	}
	while( (count = bu_mread(tfd, buf, sizeof(buf))) > 0 )  {
		if( write(1, buf, count) != count )  {
			perror("buffer: stdout write 2");
			goto err;
		}
	}
	if( count < 0 )  {
		perror("buffer: tmp read");
		goto err;
	}
	(void)unlink(template);
	return 0;

err:
	if (fp) {
	    fclose(fp);
	    fp = NULL;
	}
	unlink(template);
	return 1;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@a35 3
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.10 2007/01/23 01:13:52 brlcad Exp $ (BRL)";
#endif
d50 2
a52 1
char	template[] = "/usr/tmp/bufferXXXXXX";
d56 4
a59 1
char	buf[SIZE] = {0};
d62 1
a62 1
main(void)
d64 3
a66 2
	register int	count;
	register int	tfd;
d82 2
a83 7
	(void)mkstemp( template );
	if( (tfd = creat( template, 0600 )) < 0 )  {
		perror(template);
		exit(1);
	}
	(void)close(tfd);
	if( (tfd = open( template, 2 )) < 0 )  {
d122 1
a122 1
	exit(0);
d125 6
a130 2
	(void)unlink(template);
	exit(1);
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a34 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.9 2007/01/20 14:37:05 brlcad Exp $ (BRL)";
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.8 2006/07/09 19:17:17 brlcad Exp $ (BRL)";
@


14.8
log
@increase and initialize some buffer sizes to something larger in order to minimize hitting buffer limits while processing.
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.7 2006/07/09 10:10:29 brlcad Exp $ (BRL)";
@


14.7
log
@refactor the mread() calls to the new bu_mread() call.  the bu_mread() function doesn't call perror for you, so the caller may need to if they expected it before.
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.6 2006/01/18 06:46:27 brlcad Exp $ (BRL)";
d63 1
a63 1
char	buf[SIZE];
@


14.6
log
@update copyright to 2006
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.5 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
d51 1
a51 1
# include <unistd.h>
d55 1
a55 1
# include <fcntl.h>
a57 1
int mread(int fd, char *bufp, int n );
d71 1
a71 1
	if( (count = mread(0, buf, sizeof(buf))) < sizeof(buf) )  {
d103 1
a103 1
	while( (count = mread(0, buf, sizeof(buf))) > 0 )  {
d119 1
a119 1
	while( (count = mread(tfd, buf, sizeof(buf))) > 0 )  {
a137 30
 *			M R E A D
 *
 * This function performs the function of a read(II) but will
 * call read(II) multiple times in order to get the requested
 * number of characters.  This can be necessary because pipes
 * and network connections don't deliver data with the same
 * grouping as it is written with.  Written by Robert S. Miles, BRL.
 */
int
mread(int fd, register char *bufp, int n)
{
	register int	count = 0;
	register int	nread;

	do {
		nread = read(fd, bufp, (unsigned)n-count);
		if(nread < 0)  {
			perror("buffer: mread");
			return(-1);
		}
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);

	return((int)count);
}

/*
@


14.5
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.4 2005/06/30 00:08:37 erikgreenwald Exp $ (BRL)";
@


14.4
log
@added missing includes
@
text
@d35 1
a35 1
 *  
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.3 2005/01/30 20:31:32 brlcad Exp $ (BRL)";
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d35 1
a35 1
 *
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/buffer.c,v 14.2 2004/12/21 03:45:40 butler Exp $ (BRL)";
d48 9
@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/buffer.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			B U F F E R . C
a39 3
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/buffer.c,v 1.4 2004/09/08 14:43:42 morrison Exp $ (BRL)";
@


1.4
log
@use the common.h header instead of the ifdef HAVE_CONFIG_H block
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/util/buffer.c,v 1.3 2004/07/25 05:31:28 morrison Exp $ (BRL)";
d142 10
@


1.3
log
@replace conf.h with config.h block
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/util/buffer.c,v 1.2 2004/06/08 22:04:42 morrison Exp $ (BRL)";
d29 1
a29 3
#ifdef HAVE_CONFIG_H
#  include "config.h"	/* optional */
#endif
@


1.2
log
@obliterate externs.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d29 3
a31 1
#include "conf.h"	/* optional */
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/buffer.c,v 11.7 2004/04/05 05:46:01 morrison Exp $ (BRL)";
a31 2

#include "externs.h"	/* optional */
@

