head	14.15;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.15
date	2007.11.21.20.49.14;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.27.01.41.54;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.56;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.28.00.36.30;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.06.30.00.08.37;	author erikgreenwald;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2005.01.30.20.31.33;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.14.23.34.04;	author butler;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.46;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.56;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.21;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                         P L - P S . C
 * BRL-CAD
 *
 * Copyright (c) 1989-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pl-ps.c
 *
 *  Display plot3(5) as PostScript.
 *  Based on pl-X.c and bw-ps.c
 *
 *  Authors -
 *	Michael John Muuss
 *	Phillip Dykstra
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.14 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <stdlib.h> /* for atof() */
#include <math.h>
#include <time.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"

#define	TBAD	0	/* no such command */
#define TNONE	1	/* no arguments */
#define TSHORT	2	/* Vax 16-bit short */
#define	TIEEE	3	/* IEEE 64-bit floating */
#define	TCHAR	4	/* unsigned chars */
#define	TSTRING	5	/* linefeed terminated string */

struct uplot {
	int	targ;	/* type of args */
	int	narg;	/* number or args */
	char	*desc;	/* description */
};
struct uplot uerror = { 0, 0, 0 };
struct uplot letters[] = {
/*A*/	{ 0, 0, 0 },
/*B*/	{ 0, 0, 0 },
/*C*/	{ TCHAR, 3, "color" },
/*D*/	{ 0, 0, 0 },
/*E*/	{ 0, 0, 0 },
/*F*/	{ TNONE, 0, "flush" },
/*G*/	{ 0, 0, 0 },
/*H*/	{ 0, 0, 0 },
/*I*/	{ 0, 0, 0 },
/*J*/	{ 0, 0, 0 },
/*K*/	{ 0, 0, 0 },
/*L*/	{ TSHORT, 6, "3line" },
/*M*/	{ TSHORT, 3, "3move" },
/*N*/	{ TSHORT, 3, "3cont" },
/*O*/	{ TIEEE, 3, "d_3move" },
/*P*/	{ TSHORT, 3, "3point" },
/*Q*/	{ TIEEE, 3, "d_3cont" },
/*R*/	{ 0, 0, 0 },
/*S*/	{ TSHORT, 6, "3space" },
/*T*/	{ 0, 0, 0 },
/*U*/	{ 0, 0, 0 },
/*V*/	{ TIEEE, 6, "d_3line" },
/*W*/	{ TIEEE, 6, "d_3space" },
/*X*/	{ TIEEE, 3, "d_3point" },
/*Y*/	{ 0, 0, 0 },
/*Z*/	{ 0, 0, 0 },
/*[*/	{ 0, 0, 0 },
/*\*/	{ 0, 0, 0 },
/*]*/	{ 0, 0, 0 },
/*^*/	{ 0, 0, 0 },
/*_*/	{ 0, 0, 0 },
/*`*/	{ 0, 0, 0 },
/*a*/	{ TSHORT, 6, "arc" },
/*b*/	{ 0, 0, 0 },
/*c*/	{ TSHORT, 3, "circle" },
/*d*/	{ 0, 0, 0 },
/*e*/	{ TNONE, 0, "erase" },
/*f*/	{ TSTRING, 1, "linmod" },
/*g*/	{ 0, 0, 0 },
/*h*/	{ 0, 0, 0 },
/*i*/	{ TIEEE, 3, "d_circle" },
/*j*/	{ 0, 0, 0 },
/*k*/	{ 0, 0, 0 },
/*l*/	{ TSHORT, 4, "line" },
/*m*/	{ TSHORT, 2, "move" },
/*n*/	{ TSHORT, 2, "cont" },
/*o*/	{ TIEEE, 2, "d_move" },
/*p*/	{ TSHORT, 2, "point" },
/*q*/	{ TIEEE, 2, "d_cont" },
/*r*/	{ TIEEE, 6, "d_arc" },
/*s*/	{ TSHORT, 4, "space" },
/*t*/	{ TSTRING, 1, "label" },
/*u*/	{ 0, 0, 0 },
/*v*/	{ TIEEE, 4, "d_line" },
/*w*/	{ TIEEE, 4, "d_space" },
/*x*/	{ TIEEE, 2, "d_point" },
/*y*/	{ 0, 0, 0 },
/*z*/	{ 0, 0, 0 }
};

void	getargs(struct uplot *up);
void	getstring(void);
void	draw(double x1, double y1, double z1, double x2, double y2, double z2);
void	label(double x, double y, char *str);
void	prolog(FILE *fp, char *name, int width, int height);
void	scaleinfo(FILE *fp, int width, int height), postlog(FILE *fp);
double	getieee(void);

int	verbose;
double	cx, cy, cz;		/* current x, y, z, point */
double	arg[6];			/* parsed plot command arguments */
double	sp[6];			/* space command */
char	strarg[512];		/* string buffer */

#define	DEFAULT_SIZE	6.75	/* default output size in inches */

extern char	*bu_optarg;
extern int	bu_optind;

int	encapsulated = 0;	/* encapsulated postscript */
int	center = 0;		/* center output on 8.5 x 11 page */
int	width = 4096;		/* Our integer plotting space */
int	height = 4096;
double	outwidth;		/* output plot size in inches */
double	outheight;
int	xpoints;		/* output plot size in points */
int	ypoints;
int	page_dirty = 0;		/* to skip extra erases */

static char	*file_name;
static FILE	*infp;

static char usage[] = "\
Usage: pl-ps [-e] [-c] [-S inches_square]\n\
	[-W width_inches] [-N height_inches] [file.pl]\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "ecs:w:n:S:W:N:" )) != EOF )  {
		switch( c )  {
		case 'e':
			/* Encapsulated PostScript */
			encapsulated++;
			break;
		case 'c':
			center = 1;
			break;
		case 'S':
		case 's':
			/* square file size */
			outheight = outwidth = atof(bu_optarg);
			break;
		case 'W':
		case 'w':
			outwidth = atof(bu_optarg);
			break;
		case 'N':
		case 'n':
			outheight = atof(bu_optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "[stdin]";
		infp = stdin;
	} else {
		file_name = argv[bu_optind];
		if( (infp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"pl-ps: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
		/*fileinput++;*/
	}

	if ( argc > ++bu_optind )
		(void)fprintf( stderr, "pl-ps: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	register int	c;
	struct	uplot *up;

	outwidth = outheight = DEFAULT_SIZE;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit ( 1, NULL );
	}

	/* Default space */
	sp[0] = sp[1] = sp[2] = 0.0;	/* minimum */
	sp[3] = sp[4] = sp[5] = 4096.0;	/* max */

	if( encapsulated ) {
		xpoints = width;
		ypoints = height;
	} else {
		xpoints = outwidth * 72 + 0.5;
		ypoints = outheight * 72 + 0.5;
	}
	prolog(stdout, file_name, xpoints, ypoints);

	while( (c = getc(infp)) != EOF ) {
		/* look it up */
		if( c < 'A' || c > 'z' ) {
			up = &uerror;
		} else {
			up = &letters[ c - 'A' ];
		}

		if( up->targ == TBAD ) {
			fprintf( stderr, "Bad command '%c' (0x%02x)\n", c, c );
			continue;
		}

		if( up->narg > 0 )
			getargs( up );

		switch( c ) {
		case 's':
		case 'w':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = 0;
			sp[3] = arg[2];
			sp[4] = arg[3];
			sp[5] = 0;
			break;
		case 'S':
		case 'W':
			sp[0] = arg[0];
			sp[1] = arg[1];
			sp[2] = arg[2];
			sp[3] = arg[3];
			sp[4] = arg[4];
			sp[5] = arg[5];
			break;
		case 'm':
		case 'o':
			cx = arg[0];
			cy = arg[1];
			cz = 0;
			break;
		case 'M':
		case 'O':
			cx = arg[0];
			cy = arg[1];
			cz = arg[2];
			break;
		case 'n':
		case 'q':
			draw( cx, cy, cz, arg[0], arg[1], 0.0 );
			break;
		case 'N':
		case 'Q':
			draw( cx, cy, cz, arg[0], arg[1], arg[2] );
			break;
		case 'l':
		case 'v':
			draw( arg[0], arg[1], 0.0, arg[2], arg[3], 0.0 );
			break;
		case 'L':
		case 'V':
			draw( arg[0], arg[1], arg[2], arg[3], arg[4], arg[5] );
			break;
		case 'p':
		case 'x':
			draw( arg[0], arg[1], 0.0, arg[0], arg[1], 0.0 );
			break;
		case 'P':
		case 'X':
			draw( arg[0], arg[1], arg[2], arg[0], arg[1], arg[2] );
			break;
		case 't':
			label( cx, cy, strarg );
			break;
		case 'F':
			/* Flush */
			break;
		case 'e':
			/* New page */
			if( page_dirty ) {
				printf("showpage\n");
				/* Recenter and rescale! */
				scaleinfo(stdout, xpoints, ypoints);
				page_dirty = 0;
			}
			break;
		case 'f':
			/* linmod */
			if( strcmp( strarg, "solid" ) == 0 )  {
				printf("NV ");
			} else if( strcmp( strarg, "dotted" ) == 0 )  {
				printf("DV ");
			} else if( strcmp( strarg, "longdashed" ) == 0 )  {
				printf("LDV ");
			} else if( strcmp( strarg, "shortdashed" ) == 0 )  {
				printf("SDV ");
			} else if( strcmp( strarg, "dotdashed" ) == 0 )  {
				printf("DDV ");
			} else {
				fprintf(stderr,"linmod %s unknown\n", strarg);
			}
			break;
		}

		if( verbose )
			fprintf( stderr, "%s\n", up->desc );
	}

	postlog( stdout );
	bu_exit (0, NULL);
}

int
getshort(void)
{
	register long	v, w;

	v = getc(infp);
	v |= (getc(infp)<<8);	/* order is important! */

	/* worry about sign extension - sigh */
	if( v <= 0x7FFF )  return(v);
	w = -1;
	w &= ~0x7FFF;
	return( w | v );
}

void
getargs(struct uplot *up)
{
	int	i;

	for( i = 0; i < up->narg; i++ ) {
		switch( up->targ ){
			case TSHORT:
				arg[i] = getshort();
				break;
			case TIEEE:
				arg[i] = getieee();
				break;
			case TSTRING:
				getstring();
				break;
			case TCHAR:
				arg[i] = getc(infp);
				break;
			case TNONE:
			default:
				arg[i] = 0;	/* ? */
				break;
		}
	}
}

void
getstring(void)
{
	int	c;
	char	*cp;

	cp = strarg;
	while( (c = getc(infp)) != '\n' && c != EOF )
		*cp++ = c;
	*cp = 0;
}


double
getieee(void)
{
	unsigned char	in[8];
	double	d;

	fread( in, 8, 1, infp );
	ntohd( (unsigned char *)&d, in, 1 );
	return	d;
}

void
draw(double x1, double y1, double z1, double x2, double y2, double z2)
			/* from point */
			/* to point */
{
	int	sx1, sy1, sx2, sy2;

	sx1 = (x1 - sp[0]) / (sp[3] - sp[0]) * width;
	sy1 = (y1 - sp[1]) / (sp[4] - sp[1]) * height;
	sx2 = (x2 - sp[0]) / (sp[3] - sp[0]) * width;
	sy2 = (y2 - sp[1]) / (sp[4] - sp[1]) * height;

#if 0
	if( sx1 == sx2 && sy1 == sy2 )
		XDrawPoint( dpy, win, gc, sx1, sy1 );
	else
#endif
	printf("newpath %d %d moveto %d %d lineto stroke\n",
		sx1, sy1, sx2, sy2 );

	cx = x2;
	cy = y2;
	cz = z2;

	page_dirty = 1;
}

void
label(double x, double y, char *str)
{
	int	sx, sy;
	static int lastx = -1;
	static int lasty = -1;

	sx = (x - sp[0]) / (sp[3] - sp[0]) * width;
	sy = (y - sp[1]) / (sp[4] - sp[1]) * height;

	/* HACK for "continued text", i.e. more text
	 * without a move command in between.  We
	 * really need a better solution. - XXX
	 */
	if( lastx == x && lasty == y ) {
		printf("DFntM (%s) show\n", str );

	} else {
		printf("DFntM (%s) %d %d moveto show\n",
			str, sx, sy );
		lastx = x;
		lasty = y;
	}

	page_dirty = 1;
}

char boilerplate[] = "\
4 setlinewidth\n\
\n\
% Sizes, made functions to avoid scaling if not needed\n\
/FntH /Courier findfont 80 scalefont def\n\
/DFntL { /FntL /Courier findfont 73.4 scalefont def } def\n\
/DFntM { /FntM /Courier findfont 50.2 scalefont def } def\n\
/DFntS { /FntS /Courier findfont 44 scalefont def } def\n\
\n\
% line styles\n\
/NV { [] 0 setdash } def		% normal vectors\n\
/DV { [8] 0 setdash } def		% dotted vectors\n\
/DDV { [8 8 32 8] 0 setdash } def	% dot-dash vectors\n\
/SDV { [32 8] 0 setdash } def		% short-dash vectors\n\
/LDV { [64 8] 0 setdash } def		% long-dash vectors\n\
\n\
FntH  setfont\n\
NV\n\
% Begin Plot Data\n\
";

void
prolog(FILE *fp, char *name, int width, int height)


				/* in points */
{
	time_t	ltime;

	ltime = time(0);

	if( encapsulated ) {
		fputs( "%!PS-Adobe-2.0 EPSF-1.2\n", fp );
		fputs( "%%Creator: BRL-CAD pl-ps\n", fp );
		fprintf(fp, "%%%%CreationDate: %s", ctime(&ltime) );
		fprintf(fp, "%%%%Title: %s\n", name );
		fputs( "%%Pages: 0\n", fp );
	} else {
		fputs( "%!PS-Adobe-1.0\n", fp );
		fputs( "%begin(plot)\n", fp );
		fputs( "%%DocumentFonts:  Courier\n", fp );
		fprintf(fp, "%%%%Title: %s\n", name );
		fputs( "%%Creator: BRL-CAD pl-ps\n", fp );
		fprintf(fp, "%%%%CreationDate: %s", ctime(&ltime) );
	}
	fprintf(fp, "%%%%BoundingBox: 0 0 %d %d\n", width, height );
	fputs( "%%EndComments\n\n", fp );

	scaleinfo(fp, xpoints, ypoints);
	fputs( boilerplate, fp );
}

void
scaleinfo(FILE *fp, int width, int height)

				/* in points */
{
	/*
	 * About this PostScript scaling issue...
	 * A "unit" in postscript with no scaling is 1/72 of an inch
	 * (i.e. one point).  Thus below, 8.5 x 11 inches is converted
	 * to POINTS (*72).  The width and height are already given
	 * in points.
	 * All of our UnixPlot commands are scaled to a first quadrant
	 * space from 0-4096 x 0-4096.  We thus calculate a scale
	 * command to bring this space down to our width and height.
	 */
	if( !encapsulated && center ) {
		int	xtrans, ytrans;
		xtrans = (8.5*72 - width)/2.0;
		ytrans = (11*72 - height)/2.0;
		fprintf( fp, "%d %d translate\n", xtrans, ytrans );
	}
	fprintf( fp, "%f %f scale\n", width/4096.0, height/4096.0 );
}

void
postlog(FILE *fp)
{
	fputs( "\n", fp );
	if( !encapsulated )
		fputs( "%end(plot)\n", fp );
	/*
	 * I believe the Adobe spec says that even Encapsulated
	 * PostScript files can end with a showpage.
	 */
	fputs( "showpage\n", fp );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@exit->bu_exit where applicable
@
text
@d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.13 2007/09/15 16:23:23 brlcad Exp $ (BRL)";
d224 1
a224 1
		bu_exit ( 1, "" );
d349 1
a349 1
	bu_exit (0, "");
@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.12 2007/07/26 01:14:00 brlcad Exp $ (BRL)";
d224 1
a224 1
		exit( 1 );
d349 1
a349 1
	exit(0);
@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.11 2007/01/27 01:41:54 brlcad Exp $ (BRL)";
d40 2
a41 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a28 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.10 2007/01/23 01:13:56 brlcad Exp $ (BRL)";
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.9 2007/01/20 14:37:07 brlcad Exp $ (BRL)";
d164 1
a164 1
        [-W width_inches] [-N height_inches] [file.pl]\n";
d427 2
a428 2
      	           	/* from point */
      	           	/* to point */
d504 1
a504 1
   	              		/* in points */
d534 1
a534 1
   	              		/* in points */
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.8 2006/01/28 00:36:30 brlcad Exp $ (BRL)";
@


14.8
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 1989-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.7 2006/01/18 06:46:28 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
a41 1
#ifdef HAVE_STDLIB_H
d43 2
a44 2
#endif

d46 1
a46 1
#include <string.h>
d48 1
a48 1
#include <strings.h>
a49 3
#include <math.h>
#include <time.h>

d51 1
a51 1
# include <unistd.h>
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1989-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.5 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
@


14.5
log
@needs bu.h for bu_getopt
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.4 2005/06/30 00:08:37 erikgreenwald Exp $ (BRL)";
d507 2
a508 2
    	    
    	      
d538 1
a538 1
    	    
@


14.4
log
@added missing includes
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.3 2005/01/30 20:31:33 brlcad Exp $ (BRL)";
d151 2
a152 2
extern char	*optarg;
extern int	optind;
d176 1
a176 1
	while ( (c = getopt( argc, argv, "ecs:w:n:S:W:N:" )) != EOF )  {
d188 1
a188 1
			outheight = outwidth = atof(optarg);
d192 1
a192 1
			outwidth = atof(optarg);
d196 1
a196 1
			outheight = atof(optarg);
d204 1
a204 1
	if( optind >= argc )  {
d210 1
a210 1
		file_name = argv[optind];
d220 1
a220 1
	if ( argc > ++optind )
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d151 2
a152 2
extern char	*bu_optarg;
extern int	bu_optind;
d176 1
a176 1
	while ( (c = bu_getopt( argc, argv, "ecs:w:n:S:W:N:" )) != EOF )  {
d188 1
a188 1
			outheight = outwidth = atof(bu_optarg);
d192 1
a192 1
			outwidth = atof(bu_optarg);
d196 1
a196 1
			outheight = atof(bu_optarg);
d204 1
a204 1
	if( bu_optind >= argc )  {
d210 1
a210 1
		file_name = argv[bu_optind];
d220 1
a220 1
	if ( argc > ++bu_optind )
d507 2
a508 2


d538 1
a538 1

@


14.3
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-ps.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (BRL)";
d54 4
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1989-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-ps.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			P L - P S . C
a33 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1989-2004 by the United States Army.
 *	All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-ps.c,v 1.4 2004/10/14 23:34:04 butler Exp $ (BRL)";
@


1.4
log
@various utilities needed stdlib.h to get a declaration of atof() so I added it
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-ps.c,v 1.3 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d553 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-ps.c,v 1.2 2004/06/08 22:04:46 morrison Exp $ (BRL)";
d27 4
@


1.2
log
@obliterate externs.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d24 1
a24 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pl-ps.c,v 11.11 2004/05/10 15:30:51 erikg Exp $ (BRL)";
a27 2


a38 2

#include "externs.h"
@

