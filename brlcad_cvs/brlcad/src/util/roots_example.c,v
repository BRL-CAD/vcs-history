head	1.7;
access;
symbols
	rel-7-10-4:1.7
	STABLE:1.7.0.2
	rel-7-10-2:1.7
	rel-7-10-0:1.7
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2;
locks; strict;
comment	@ * @;


1.7
date	2007.01.27.01.41.55;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.23.01.13.57;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.16.04.59.45;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.04.14.12.30;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.21.00.32.20;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.21.00.26.43;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@/*                    R O O T S _ E X A M P L E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file roots_example.c
 *
 *  Simple example of how to use libbn for solving the roots to an
 *  arbitrary polynomial.
 *
 *  Author -
 *	Christopher Sean Morrison
 *
 *  cc -I/usr/brlcad/include/brlcad -L/usr/brlcad/lib -o roots_example roots_example.c -lrt -lbn -lbu
 */
#include "common.h"

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"

int
main(int argc, char *argv[])
{
    bn_poly_t equation; /* holds our polynomial equation */
    bn_complex_t roots[4]; /* stash up to four roots */
    int num_roots;

    /*********************************************
     * Linear polynomial (1st degree equation):
     *  A*X + B = 0
     * [0]   [1]     <=coefficients
     */
    equation.dgr = 1;
    equation.cf[0] = 1;  /* A */
    equation.cf[1] = -2;  /* B */

    /* print the equation */
    bu_log("\n*** LINEAR ***\n");
    bn_pr_poly("Solving for Linear", &equation);

    /* solve for the roots */
    num_roots = rt_poly_roots(&equation, roots, "My Linear Polynomial");
    if (num_roots == 0) {
	bu_log("No roots found!\n");
	return 0;
    } else if (num_roots < 0) {
	bu_log("The root solver failed to converge on a solution\n");
	return 1;
    }

    /*  A*X + B = 0
     *  1*X + -2 = 0
     *    X -  2 = 0
     *    X      = 2
     */
    /* print the roots */
    bu_log("The root should be 2\n");
    bn_pr_roots("My Linear Polynomial", roots, num_roots);


    /*********************************************
     * Quadratic polynomial (2nd degree equation):
     *  A*X^2 + B*X + C = 0
     * [0]     [1]   [2]     <=coefficients
     */
    equation.dgr = 2;
    equation.cf[0] = 1;  /* A */
    equation.cf[1] = 0;  /* B */
    equation.cf[2] = -4; /* C */

    /* print the equation */
    bu_log("\n*** QUADRATIC ***\n");
    bn_pr_poly("Solving for Quadratic", &equation);

    /* solve for the roots */
    num_roots = rt_poly_roots(&equation, roots, "My Quadratic Polynomial");
    if (num_roots == 0) {
	bu_log("No roots found!\n");
	return 0;
    } else if (num_roots < 0) {
	bu_log("The root solver failed to converge on a solution\n");
	return 1;
    }

    /*  A*X^2 + B*X +  C = 0
     *  1*X^2 + 0*X + -4 = 0
     *    X^2       -  4 = 0
     * (X - 2) * (X + 2) = 0
     *  X - 2 = 0, X + 2 = 0
     *  X = 2, X = -2
     */
    /* print the roots */
    bu_log("The roots should be 2 and -2\n");
    bn_pr_roots("My Quadratic Polynomial", roots, num_roots);


    /*****************************************
     * Cubic polynomial (3rd degree equation):
     *  A*X^3 + B*X^2 + C*X + D = 0
     * [0]     [1]     [2]   [3]     <=coefficients
     */
    equation.dgr = 3;
    equation.cf[0] = 45;
    equation.cf[1] = 24;
    equation.cf[2] = -7;
    equation.cf[3] = -2;

    /* print the equation */
    bu_log("\n*** CUBIC ***\n");
    bn_pr_poly("Solving for Cubic", &equation);

    /* solve for the roots */
    num_roots = rt_poly_roots(&equation, roots, "My Cubic Polynomial");
    if (num_roots == 0) {
	bu_log("No roots found!\n");
	return 0;
    } else if (num_roots < 0) {
	bu_log("The root solver failed to converge on a solution\n");
	return 1;
    }

    /* print the roots */
    bu_log("The roots should be 1/3, -1/5, and -2/3\n");
    bn_pr_roots("My Cubic Polynomial", roots, num_roots);


    /*******************************************
     * Quartic polynomial (4th degree equation):
     *  A*X^4 + B*X^3 + C*X^2 + D*X + E = 0
     * [0]     [1]     [2]     [3]   [4]     <=coefficients
     */
    equation.dgr = 4;
    equation.cf[0] = 2;
    equation.cf[1] = 4;
    equation.cf[2] = -26;
    equation.cf[3] = -28;
    equation.cf[4] = 48;

    /* print the equation */
    bu_log("\n*** QUARTIC ***\n");
    bn_pr_poly("Solving for Quartic", &equation);

    /* solve for the roots */
    num_roots = rt_poly_roots(&equation, roots, "My Quartic Polynomial");
    if (num_roots == 0) {
	bu_log("No roots found!\n");
	return 0;
    } else if (num_roots < 0) {
	bu_log("The root solver failed to converge on a solution\n");
	return 1;
    }

    /* print the roots */
    bu_log("The roots should be 3, 1, -2, -4\n");
    bn_pr_roots("My Quartic Polynomial", roots, num_roots);

    return 0;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.6
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d47 1
a47 1
     *  A*X + B = 0 
d68 1
a68 1
    /*  A*X + B = 0 
d72 1
a72 1
     */ 
a77 1

d80 1
a80 1
     *  A*X^2 + B*X + C = 0 
d102 1
a102 1
    /*  A*X^2 + B*X +  C = 0 
d108 1
a108 1
     */ 
a113 1

d142 2
a143 2
 
    
d173 1
a173 1
 
@


1.5
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


1.4
log
@brian rapp notices a polynomail typo
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


1.3
log
@remove unused var i
@
text
@d24 1
a24 1
 *  arbitrary polynomail.
@


1.2
log
@might as well add a linear root example too, fix type on rt_poly_roots()
@
text
@a44 2
    int i;

@


1.1
log
@add a simple example application that shows how to use the root solver for solving polynomial roots (up to 4th order shown)
@
text
@d49 34
d97 1
a97 1
    num_roots = rt_poly_roots(&equation, &roots, "My Quadratic Polynomial");
d114 1
a114 1
    bu_log("Exact roots should be 2 and -2\n");
d135 1
a135 1
    num_roots = rt_poly_roots(&equation, &roots, "My Cubic Polynomial");
d145 1
a145 1
    bu_log("Exact roots should be 1/3, -1/5, and -2/3\n");
d166 1
a166 1
    num_roots = rt_poly_roots(&equation, &roots, "My Quartic Polynomial");
d176 1
a176 1
    bu_log("Exact roots should be 3, 1, -2, -4\n");
@

