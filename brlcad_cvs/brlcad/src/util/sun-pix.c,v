head	14.14;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.14
date	2007.11.21.20.49.14;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.27.01.41.55;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.57;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.22.00.21.51;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.06.30.00.08.37;	author erikgreenwald;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2005.01.30.20.31.34;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.59;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.21;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                       S U N - P I X . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file sun-pix.c
 *
 *  Program to take Sun bitmap files created with Sun's ``screendump''
 *  command, and convert them to pix(5) format files.
 *
 *  Authors -
 *	Phillip Dykstra
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.13 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#include <stdio.h>
#include <stdlib.h>

#include "machine.h"
#include "bu.h"


/*
 * Description of Sun header for files containing raster images
 */
struct rasterfile {
	int	ras_magic;		/* magic number */
	int	ras_width;		/* width (pixels) of image */
	int	ras_height;		/* height (pixels) of image */
	int	ras_depth;		/* depth (1, 8, or 24 bits) of pixel */
	int	ras_length;		/* length (bytes) of image */
	int	ras_type;		/* type of file; see RT_* below */
	int	ras_maptype;		/* type of colormap; see RMT_* below */
	int	ras_maplength;		/* length (bytes) of following map */
	/* color map follows for ras_maplength bytes, followed by image */
} header;

char	inbuf[sizeof(struct rasterfile)];

#define	RAS_MAGIC	0x59a66a95

	/* Sun supported ras_type's */
#define RT_OLD		0	/* Raw pixrect image in 68000 byte order */
#define RT_STANDARD	1	/* Raw pixrect image in 68000 byte order */
#define RT_BYTE_ENCODED	2	/* Run-length compression of bytes */
#define RT_EXPERIMENTAL 0xffff	/* Reserved for testing */

	/* Sun registered ras_maptype's */
#define RMT_RAW		2
	/* Sun supported ras_maptype's */
#define RMT_NONE	0	/* ras_maplength is expected to be 0 */
#define RMT_EQUAL_RGB	1	/* red[ras_maplength/3],green[],blue[] */

/*
 * NOTES:
 * 	Each line of the image is rounded out to a multiple of 16 bits.
 *   This corresponds to the rounding convention used by the memory pixrect
 *   package (/usr/include/pixrect/memvar.h) of the SunWindows system.
 *	The ras_encoding field (always set to 0 by Sun's supported software)
 *   was renamed to ras_length in release 2.0.  As a result, rasterfiles
 *   of type 0 generated by the old software claim to have 0 length; for
 *   compatibility, code reading rasterfiles must be prepared to compute the
 *   true length from the width, height, and depth fields.
 */

int	pixout = 1;		/* 0 = bw(5) output, 1 = pix(5) output */
int	colorout = 0;
int	hflag;
int	inverted;
int	pure;			/* No Sun header */
int	verbose;
struct colors {
	unsigned char	CL_red;
	unsigned char	CL_green;
	unsigned char	CL_blue;
};
struct colors Cmap[256];

static char	*file_name;
static FILE	*fp;

char	usage[] = "\
Usage: sun-pix [-b -h -i -P -v -C] [sun.bitmap]\n";


#define NET_LONG_LEN	4	/* # bytes to network long */

unsigned long
getlong(char *msgp)
{
	register unsigned char *p = (unsigned char *) msgp;
	register unsigned long u;

	u = *p++; u <<= 8;
	u |= *p++; u <<= 8;
	u |= *p++; u <<= 8;
	return (u | *p);
}

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "bhiPvC" )) != EOF )  {
		switch( c )  {
		case 'b':
			pixout = 0;	/* bw(5) */
			break;
		case 'C':
			colorout = 1;	/* output just the color map */
			break;
		case 'h':
			hflag = 1;	/* print header */
			break;
		case 'i':
			inverted = 1;
			break;
		case 'P':
			pure = 1;
			break;
		case 'v':
			verbose = 1;
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "-";
		fp = stdin;
	} else {
		file_name = argv[bu_optind];
		if( (fp = fopen(file_name, "r")) == NULL )  {
			(void)fprintf( stderr,
				"sun-pix: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
	}

	if ( argc > ++bu_optind )
		(void)fprintf( stderr, "sun-pix: excess argument(s) ignored\n" );

	return(1);		/* OK */
}


/*
 * Encode/decode functions for RT_BYTE_ENCODED images:
 *
 * The "run-length encoding" is of the form
 *
 *	<byte><byte>...<ESC><0>...<byte><ESC><count><byte>...
 *
 * where the counts are in the range 0..255 and the actual number of
 * instances of <byte> is <count>+1 (i.e. actual is 1..256). One- or
 * two-character sequences are left unencoded; three-or-more character
 * sequences are encoded as <ESC><count><byte>.  <ESC> is the character
 * code 128.  Each single <ESC> in the input data stream is encoded as
 * <ESC><0>, because the <count> in this scheme can never be 0 (actual
 * count can never be 1).  <ESC><ESC> is encoded as <ESC><1><ESC>.
 *
 * This algorithm will fail (make the "compressed" data bigger than the
 * original data) only if the input stream contains an excessive number of
 * one- and two-character sequences of the <ESC> character.
 */

#define ESCAPE		128

int
decoderead(unsigned char *buf, int size, int length, FILE *fp)

				/* should be one! */
				/* number of items to read */
				/* input file pointer */
{
	static	int	repeat = -1;
	static	int	lastchar = 0;
	int		number_read;

	number_read = 0;

	if (size != 1) {
		fprintf(stderr,"decoderead: unable to process size = %d.\n",
			size);
		bu_exit (1, NULL);
	}

	while (length) {
		if (repeat >= 0) {
			*buf = lastchar;
			--length;
			++buf;
			number_read++;
			--repeat;
		} else {
			lastchar = getc(fp);
			if (lastchar < 0) return(number_read);
			if (lastchar == ESCAPE) {
				repeat = getc(fp);
				if (repeat <0) return(number_read);
				if (repeat == 0) {
					*buf = ESCAPE;
					++buf;
					number_read++;
					--length;
					--repeat;
				} else {
					lastchar = getc(fp);
					if (lastchar < 0) return(number_read);
				}
			} else {
				*buf = lastchar;
				--length;
				++buf;
				++number_read;
			}
		}
	}
	return(number_read);
}

unsigned char bits[8] = { 128, 64, 32, 16, 8, 4, 2, 1 };

int
main(int argc, char **argv)
{
	register int	x;
	register int	off = 0;
	register int	on = 255;
	register int	width;			/* line width in bits */
	register int	scanbytes;		/* bytes/line (padded to 16 bits) */
	unsigned char	buf[4096];

	fp = stdin;
	if ( !get_args( argc, argv ) || (isatty(fileno(stdout)) && (hflag == 0)) ) {
		(void)fputs(usage, stderr);
		bu_exit ( 1, NULL );
	}
	if( inverted ) {
		off = 255;
		on = 0;
	}

	if( !pure )  {
		register long nbits;

		fread( inbuf, sizeof(struct rasterfile), 1, fp );

		header.ras_magic = getlong( &inbuf[NET_LONG_LEN*0] );
		header.ras_width = getlong( &inbuf[NET_LONG_LEN*1] );
		header.ras_height = getlong( &inbuf[NET_LONG_LEN*2] );
		header.ras_depth = getlong( &inbuf[NET_LONG_LEN*3] );
		header.ras_length = getlong( &inbuf[NET_LONG_LEN*4] );
		header.ras_type = getlong( &inbuf[NET_LONG_LEN*5] );
		header.ras_maptype = getlong( &inbuf[NET_LONG_LEN*6] );
		header.ras_maplength = getlong( &inbuf[NET_LONG_LEN*7] );

		if( header.ras_magic != RAS_MAGIC )  {
			fprintf(stderr,
				"sun-pix: bad magic number, was x%x, s/b x%x\n",
				header.ras_magic, RAS_MAGIC );
			bu_exit (1, NULL);
		}

		/* Width is rounded up to next multiple of 16 bits */
		nbits = header.ras_width * header.ras_depth;
		nbits = (nbits + 15) & ~15;
		header.ras_width = nbits / header.ras_depth;

		if(verbose)  {
			fprintf( stderr,
				"ras_width = %d, ras_height = %d\nras_depth = %d, ras_length = %d\n",
				header.ras_width, header.ras_height,
				header.ras_depth, header.ras_length );
			fprintf( stderr,
				"ras_type = %d, ras_maptype = %d, ras_maplength = %d\n",
				header.ras_type,
				header.ras_maptype,
				header.ras_maplength );
		}
		if( hflag ) {
			printf( "-w%d -n%d\n", header.ras_width, header.ras_height );
			bu_exit ( 0, NULL );
		}
	} else {
		/* "pure" bitmap */
		header.ras_type = RT_STANDARD;
		header.ras_depth = 1;
	}

	switch( header.ras_type )  {
	case RT_OLD:		/* ??? */
	case RT_BYTE_ENCODED:
	case RT_STANDARD:
		break;
	default:
		fprintf(stderr,"sun-pix:  Unable to process type %d images\n",
			header.ras_type );
		bu_exit (1, NULL);
	}

	width = header.ras_width;
	x = 0;

	switch( header.ras_depth )  {
	case 1:
		/* 1-bit image */
		/*  Gobble colormap -- ought to know what to do with it */
		for( x=0; x<header.ras_maplength; x++)  {
			(void)getc(fp);
		}
		if (colorout) {
			fprintf(stdout,"%d\t%04x %04x %04x\n",off,off<<8,
			    off<<8,off<<8);
			fprintf(stdout,"%d\t%04x %04x %04x\n",on,on<<8,
			    on<<8,on<<8);
			break;
		}

		scanbytes = ((width + 15) & ~15L) / 8;
		while( (header.ras_type == RT_BYTE_ENCODED) ?
		    decoderead(buf, sizeof(*buf), scanbytes, fp) :
		    fread(buf, sizeof(*buf), scanbytes, fp) ) {
			for( x = 0; x < width; x++ ) {
				if( buf[x>>3] & bits[x&7] ) {
					putchar(on);
					if(pixout){putchar(on);putchar(on);}
				} else {
					putchar(off);
					if(pixout){putchar(off);putchar(off);}
				}
			}
		}
		break;
	case 8:
		/* 8-bit image */
		if (header.ras_maptype != RMT_EQUAL_RGB) {
			fprintf(stderr,"sun-pix:  unable to handle depth=8, maptype = %d.\n",
				header.ras_maptype);
			bu_exit (1, NULL);
		}
		scanbytes = width;
		for (x = 0; x < header.ras_maplength/3; x++) {
			if (inverted) {
				Cmap[x].CL_red = 255-(unsigned char)getc(fp);
			} else {
				Cmap[x].CL_red = getc(fp);
			}
		}
		for (x = 0; x < header.ras_maplength/3; x++) {
			if (inverted) {
				Cmap[x].CL_green = 255-(unsigned char)getc(fp);
			} else {
				Cmap[x].CL_green = getc(fp);
			}
		}
		for (x = 0; x < header.ras_maplength/3; x++) {
			if (inverted) {
				Cmap[x].CL_blue = 255-(unsigned char) getc(fp);
			} else {
				Cmap[x].CL_blue = getc(fp);
			}
		}
		if (colorout) {
			for (x = 0; x <header.ras_maplength/3; x++) {
				fprintf(stdout,"%d\t%04x %04x %04x\n",
				    x, Cmap[x].CL_red<<8, Cmap[x].CL_green<<8,
				    Cmap[x].CL_blue<<8);
			}
			break;
		}

		while ((header.ras_type == RT_BYTE_ENCODED) ?
		    decoderead(buf, sizeof(*buf), scanbytes, fp):
		    fread(buf, sizeof(*buf), scanbytes, fp) ) {
			for (x=0; x < width; x++ ) {
				if (pixout) {
					putchar(Cmap[buf[x]].CL_red);
					putchar(Cmap[buf[x]].CL_green);
					putchar(Cmap[buf[x]].CL_blue);
				} else {
					putchar(buf[x]);
				}
			}
		}
		break;
	default:
		fprintf(stderr,"sun-pix:  unable to handle depth=%d\n",
			header.ras_depth );
		bu_exit (1, NULL);
	}
	bu_exit (0, NULL);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@exit->bu_exit where applicable
@
text
@d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.12 2007/07/26 01:14:00 brlcad Exp $ (BRL)";
d215 1
a215 1
		bu_exit (1, "");
d267 1
a267 1
		bu_exit ( 1, "" );
d292 1
a292 1
			bu_exit (1, "");
d313 1
a313 1
			bu_exit ( 0, "" );
d329 1
a329 1
		bu_exit (1, "");
d370 1
a370 1
			bu_exit (1, "");
d420 1
a420 1
		bu_exit (1, "");
d422 1
a422 1
	bu_exit (0, "");
@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.11 2007/01/27 01:41:55 brlcad Exp $ (BRL)";
d215 1
a215 1
		exit(1);
d267 1
a267 1
		exit( 1 );
d292 1
a292 1
			exit(1);
d313 1
a313 1
			exit( 0 );
d329 1
a329 1
		exit(1);
d370 1
a370 1
			exit(1);
d420 1
a420 1
		exit(1);
d422 1
a422 1
	exit(0);
@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a28 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.10 2007/01/23 01:13:57 brlcad Exp $ (BRL)";
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.9 2007/01/20 14:37:07 brlcad Exp $ (BRL)";
d206 3
a208 3
   		     		/* should be one! */
   		       		/* number of items to read */
    		    		/* input file pointer */
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.8 2006/01/18 06:46:28 brlcad Exp $ (BRL)";
@


14.8
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.7 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.6 2005/09/22 00:21:51 brlcad Exp $ (BRL)";
@


14.6
log
@add bu.h for bu_getopt stuff
@
text
@d29 1
a29 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.5 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
d44 1
a44 1
                                                                                                                                                                            
d195 1
a195 1
 * count can never be 1).  <ESC><ESC> is encoded as <ESC><1><ESC>. 
d199 1
a199 1
 * one- and two-character sequences of the <ESC> character.  
d206 1
a206 1
             	     
d306 1
a306 1
			fprintf( stderr, 
@


14.5
log
@needs bu.h for bu_getopt
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.4 2005/06/30 00:08:37 erikgreenwald Exp $ (BRL)";
d49 2
@


14.4
log
@added missing includes
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.3 2005/01/30 20:31:34 brlcad Exp $ (BRL)";
d132 1
a132 1
	while ( (c = getopt( argc, argv, "bhiPvC" )) != EOF )  {
d158 1
a158 1
	if( optind >= argc )  {
d164 1
a164 1
		file_name = argv[optind];
d173 1
a173 1
	if ( argc > ++optind )
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d44 1
a44 1

a48 2
#include "bu.h"

d132 1
a132 1
	while ( (c = bu_getopt( argc, argv, "bhiPvC" )) != EOF )  {
d158 1
a158 1
	if( bu_optind >= argc )  {
d164 1
a164 1
		file_name = argv[bu_optind];
d173 1
a173 1
	if ( argc > ++bu_optind )
d193 1
a193 1
 * count can never be 1).  <ESC><ESC> is encoded as <ESC><1><ESC>.
d197 1
a197 1
 * one- and two-character sequences of the <ESC> character.
d204 1
a204 1

d304 1
a304 1
			fprintf( stderr,
@


14.3
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/sun-pix.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (BRL)";
d46 1
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/sun-pix.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			 S U N - P I X . C
a33 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/sun-pix.c,v 1.4 2004/08/02 23:01:53 morrison Exp $ (BRL)";
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/sun-pix.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (BRL)";
d411 10
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/sun-pix.c,v 1.2 2004/06/08 22:04:47 morrison Exp $ (BRL)";
d24 1
a24 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d28 4
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/sun-pix.c,v 11.10 2004/05/10 15:30:51 erikg Exp $ (BRL)";
a27 2


a30 1
#include "externs.h"			/* For getopt */
@

