head	14.15;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.11
	rel-7-8-4:14.9
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.6
	rel-7-0-branch:1.6.0.2
	rel-7-0:1.6;
locks; strict;
comment	@ * @;


14.15
date	2007.11.21.20.49.13;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.10.28.04.21.26;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.10.27.21.51.36;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.23.01.13.55;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.37.05;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.07.09.10.10.29;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.04.06.20.38.03;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches
	14.7.2.1;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.22.00.21.51;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.32;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.45.40;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.09.04.53.00;	author kermit;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.09.20.10.55;	author erikg;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.21.39;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.43;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.44;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;

14.7.2.1
date	2006.04.07.19.34.24;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                          D B C P . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dbcp.c
 *
 *	Double-buffered copy program for UNIX
 *
 *	Usage:    dbcp {nblocks} < inputfile > outputfile
 *
 *  Author -
 *	Doug Kingston
 *
 *  Source -
 *	Davis, Polk, and Wardwell
 *	Chase Manhattan Building
 *	New York, NY
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.14 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif
#ifdef HAVE_SYS_WAIT_H
#  include <sys/wait.h>
#endif
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <errno.h>

#include "machine.h"
#include "bu.h"


#define	STOP	0170
#define	GO	0017

#define P_RD	0
#define P_WR	1

typedef int pipefds[2];

static int	pid;
static long	count;

static int	verbose;

static char	errbuf[BUFSIZ] = {0};

static const char usage[] = "\
Usage:  dbcp [-v] blocksize < input > output\n\
	(blocksize = number of 512 byte 'blocks' per record)\n";


/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
    register char	*buffer;
    register unsigned int	size;
    register unsigned int	nread;
    int	rfd;		/* pipe to read message from */
    int	wfd;		/* pipe to write message to */
    int	exitval=0;
    int	saverrno=0;
    int	waitcode;
    char	msgchar;
    pipefds par2chld, chld2par;
    int	c;

    while ( (c = bu_getopt( argc, argv, "v" )) != EOF )  {
	switch( c )  {
	    case 'v':
		verbose++;
		break;
	    default:
		(void)fputs(usage, stderr);
		bu_exit(1, NULL);
	}
    }

    if( bu_optind >= argc )  {
	(void)fputs(usage, stderr);
	bu_exit(2,NULL);
    }
    size = 512 * atoi(argv[bu_optind]);

    setbuf (stderr, errbuf);
    if ((buffer = (char *)malloc(size)) == NULL)
	bu_exit(88, "dbcp: Insufficient buffer memory\n");
    if (pipe (par2chld) < 0 || pipe (chld2par) < 0) {
	perror ("dbcp: Can't pipe");
	bu_exit ( 89, NULL );
    }

    /*
     * Ignore SIGPIPE, which may occur sometimes when the parent
     * goes to send a token to an already dead child on last buffer.
     */
    (void)signal(SIGPIPE, SIG_IGN);

    switch (pid = fork()) {
	case -1:
	    perror ("dbcp: Can't fork");
	    bu_exit ( 99, NULL );

	case 0:
	    /*  Child  */
	    close (par2chld[P_WR]);
	    close (chld2par[P_RD]);
	    wfd = chld2par[P_WR];
	    rfd = par2chld[P_RD];
	    msgchar = GO;		/* Prime the pump, so to speak */
	    goto childstart;

	default:
	    /*  Parent  */
	    close (par2chld[P_RD]);
	    close (chld2par[P_WR]);
	    wfd = par2chld[P_WR];
	    rfd = chld2par[P_RD];
	    break;
    }

    exitval = 0;
    count = 0L;
    while (1) {
	if ((nread = bu_mread (0, buffer, size)) != size) {
	    saverrno = errno;
	    msgchar = STOP;
	} else
	    msgchar = GO;
	if(write (wfd, &msgchar, 1) != 1) {
	    perror("dbcp: message send");
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "Can't send READ message\n");
	}
	if ((int)nread == (-1)) {
	    errno = saverrno;
	    perror ("input read");
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "read error on input\n");
	    break;
	}
	if(nread == 0) {
	    if(verbose) {
		fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
		fprintf(stderr, "EOF on input\n");
	    }
	    break;
	}
	if(nread != size) {
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "partial read (nread = %u)\n", nread);
	}
	if (read(rfd, &msgchar, 1) != 1) {
	    perror("dbcp: WRITE message error");
	    exitval = 69;
	    break;
	}
	if (msgchar == STOP) {
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "Got STOP WRITE with %u left\n", nread);
	    break;
	} else if (msgchar != GO) {
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "Got bad WRITE message 0%o\n", msgchar&0377);
	    exitval = 19;
	    break;
	}
	if (write(1, buffer, nread) != nread) {
	    perror("output write");
	    msgchar = STOP;
	} else {
	    count++;
	    msgchar = GO;
	}
	if(verbose>1) {
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "wrote %d\n", nread);
	}
	if (nread != size) {
	    break;
	}
    childstart:
	if (write (wfd, &msgchar, 1) != 1) {
	    perror("dbcp: message send");
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "Can't send WRITE message\n");
	    break;
	}
	if (msgchar == STOP) {
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "write error on output\n");
	    break;
	}
	if (read(rfd, &msgchar, 1) != 1) {
	    perror("dbcp: READ message error");
	    exitval = 79;
	    break;
	}
	if (msgchar == STOP) {
	    if (verbose) {
		fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
		fprintf(stderr, "Got STOP READ\n");
	    }
	    break;
	} else if (msgchar != GO) {
	    fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	    fprintf(stderr, "Got bad READ message 0%o\n", msgchar&0377);
	    exitval = 39;
	    break;
	}
	fflush(stderr);
    }

    if(verbose) {
	fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	fprintf(stderr, "%ld records copied\n", count);
    }
    if(pid) {
	while (wait(&waitcode) > 0)
	    ;
    }
    exit(exitval);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@exit->bu_exit where applicable
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.13 2007/10/28 04:21:26 brlcad Exp $ (BRL)";
d104 1
a104 1
		bu_exit(1, "");
d110 1
a110 1
	bu_exit(2,"");
d119 1
a119 1
	bu_exit ( 89, "" );
d131 1
a131 1
	    bu_exit ( 99, "" );
@


14.13
log
@fix fpritnf typo
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.12 2007/10/27 21:51:36 brlcad Exp $ (BRL)";
d104 1
a104 1
		exit(1);
d110 1
a110 1
	exit(2);
d115 1
a115 1
    if ((buffer = (char *)malloc(size)) == NULL) {
a116 1
    }
d119 1
a119 1
	exit (89);
d131 1
a131 1
	    exit (99);
@


14.12
log
@quell compilation warnings, remove prs()
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.11 2007/01/23 01:13:55 brlcad Exp $ (BRL)";
d221 1
a221 1
	    fpritnf(stderr, "write error on output\n");
@


14.11
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.10 2007/01/20 14:37:05 brlcad Exp $ (BRL)";
d72 1
a72 1
static char	errbuf[BUFSIZ];
d74 1
a74 1
static char	usage[] = "\
a77 1
void prs();
d83 1
a83 3
main(argc, argv)
int	argc;
char	**argv;
d85 18
a102 24
	register char	*buffer;
	register unsigned int	size;
	register unsigned int	nread;
	int	rfd;		/* pipe to read message from */
	int	wfd;		/* pipe to write message to */
	int	exitval=0;
	int	saverrno=0;
	int	waitcode;
	char	msgchar;
	pipefds par2chld, chld2par;
	int	c;

	while ( (c = bu_getopt( argc, argv, "v" )) != EOF )  {
		switch( c )  {
		case 'v':
			verbose++;
			break;
		default:
			(void)fputs(usage, stderr);
			exit(1);
		}
	}

	if( bu_optind >= argc )  {
d104 1
a104 1
		exit(2);
d106 1
a106 1
	size = 512 * atoi(argv[bu_optind]);
d108 20
a127 15
	setbuf (stderr, errbuf);
	if ((buffer = (char *)malloc(size)) == NULL) {
		fprintf(stderr, "dbcp: Insufficient buffer memory\n");
		exit (88);
	}
	if (pipe (par2chld) < 0 || pipe (chld2par) < 0) {
		perror ("dbcp: Can't pipe");
		exit (89);
	}

	/*
	 * Ignore SIGPIPE, which may occur sometimes when the parent
	 * goes to send a token to an already dead child on last buffer.
	 */
	(void)signal(SIGPIPE, SIG_IGN);
d129 1
a129 1
	switch (pid = fork()) {
d131 2
a132 2
		perror ("dbcp: Can't fork");
		exit (99);
d135 7
a141 7
		/*  Child  */
		close (par2chld[P_WR]);
		close (chld2par[P_RD]);
		wfd = chld2par[P_WR];
		rfd = par2chld[P_RD];
		msgchar = GO;		/* Prime the pump, so to speak */
		goto childstart;
d144 96
a239 6
		/*  Parent  */
		close (par2chld[P_RD]);
		close (chld2par[P_WR]);
		wfd = par2chld[P_WR];
		rfd = chld2par[P_RD];
		break;
d241 2
d244 9
a252 76
	exitval = 0;
	count = 0L;
	while (1) {
		if ((nread = bu_mread (0, buffer, size)) != size) {
			saverrno = errno;
			msgchar = STOP;
		} else
			msgchar = GO;
		if(write (wfd, &msgchar, 1) != 1) {
			perror("dbcp: message send");
			prs("Can't send READ message\n");
		}
		if ((int)nread == (-1)) {
			errno = saverrno;
			perror ("input read");
			prs("read error on input\n");
			break;
		}
		if(nread == 0) {
			if(verbose) prs("EOF on input\n");
			break;
		}
		if(nread != size)
			prs("partial read (nread = %u)\n", nread);
		if (read(rfd, &msgchar, 1) != 1) {
			perror("dbcp: WRITE message error");
			exitval = 69;
			break;
		}
		if (msgchar == STOP) {
			prs("Got STOP WRITE with %u left\n", nread);
			break;
		} else if (msgchar != GO) {
			prs("Got bad WRITE message 0%o\n", msgchar&0377);
			exitval = 19;
			break;
		}
		if (write(1, buffer, nread) != nread) {
			perror("output write");
			msgchar = STOP;
		} else {
			count++;
			msgchar = GO;
		}
		if(verbose>1) prs("wrote %d\n", nread);
		if (nread != size)
			break;
childstart:
		if (write (wfd, &msgchar, 1) != 1) {
			perror("dbcp: message send");
			prs("Can't send WRITE message\n");
			break;
		}
		if (msgchar == STOP) {
			prs ("write error on output\n");
			break;
		}
		if (read(rfd, &msgchar, 1) != 1) {
			perror("dbcp: READ message error");
			exitval = 79;
			break;
		}
		if (msgchar == STOP) {
			if(verbose) prs("Got STOP READ\n");
			break;
		} else if (msgchar != GO) {
			prs("Got bad READ message 0%o\n", msgchar&0377);
			exitval = 39;
			break;
		}
	}

	if(verbose) prs ("%ld records copied\n", count);
	if(pid)
		while (wait(&waitcode) > 0);
	exit(exitval);
a254 8
void
prs (fmt, a, b, c)
char	*fmt, *a, *b, *c;
{
	fprintf(stderr, "dbcp: (%s) ", pid ? "PARENT" : "CHILD");
	fprintf(stderr, fmt, a, b, c);
	fflush(stderr);
}
@


14.10
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.9 2006/07/09 10:10:29 brlcad Exp $ (BRL)";
@


14.9
log
@refactor the mread() calls to the new bu_mread() call.  the bu_mread() function doesn't call perror for you, so the caller may need to if they expected it before.
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.8 2006/04/06 20:38:03 brlcad Exp $ (BRL)";
@


14.8
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.7 2006/01/18 06:46:27 brlcad Exp $ (BRL)";
a59 2
int mread(int fd, char *bufp, int n );

d160 1
a160 1
		if ((nread = mread (0, buffer, size)) != size) {
a244 33
 *			M R E A D
 *
 * This function performs the function of a read(II) but will
 * call read(II) multiple times in order to get the requested
 * number of characters.  This can be necessary because pipes
 * and network connections don't deliver data with the same
 * grouping as it is written with.  Written by Robert S. Miles, BRL.
 */
int
mread(fd, bufp, n)
int	fd;
register char	*bufp;
int	n;
{
	register int	count = 0;
	register int	nread;

	do {
		nread = read(fd, bufp, (unsigned)n-count);
		if(nread < 0)  {
			perror("dbcp: mread");
			return(-1);
		}
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);

	return((int)count);
}

/*
@


14.7
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
d41 6
d48 1
a48 1
# include <unistd.h>
@


14.7.2.1
log
@update from HEAD
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.7 2006/01/18 06:46:27 brlcad Exp $ (BRL)";
a40 6
#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif
#ifdef HAVE_SYS_WAIT_H
#  include <sys/wait.h>
#endif
d42 1
a42 1
#  include <unistd.h>
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.5 2005/09/22 00:21:51 brlcad Exp $ (BRL)";
@


14.5
log
@add bu.h for bu_getopt stuff
@
text
@d29 1
a29 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.4 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
@


14.4
log
@needs bu.h for bu_getopt
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.3 2005/01/30 20:31:32 brlcad Exp $ (BRL)";
d51 1
@


14.3
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/dbcp.c,v 14.2 2004/12/21 03:45:40 butler Exp $ (BRL)";
d96 1
a96 1
	while ( (c = getopt( argc, argv, "v" )) != EOF )  {
d107 1
a107 1
	if( optind >= argc )  {
d111 1
a111 1
	size = 512 * atoi(argv[optind]);
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a50 1
#include "bu.h"
d96 1
a96 1
	while ( (c = bu_getopt( argc, argv, "v" )) != EOF )  {
d107 1
a107 1
	if( bu_optind >= argc )  {
d111 1
a111 1
	size = 512 * atoi(argv[bu_optind]);
@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/dbcp.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D B C P . C
a33 3
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/dbcp.c,v 1.6 2004/09/09 04:53:00 kermit Exp $ (BRL)";
@


1.6
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/dbcp.c,v 1.5 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d255 10
@


1.5
log
@replace the wrapped config.h block with common.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/dbcp.c,v 1.4 2004/06/09 20:10:55 erikg Exp $ (BRL)";
a27 1
                                                                                                                                                                            
d29 1
d35 1
@


1.4
log
@fixing warnings
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/dbcp.c,v 1.3 2004/06/09 18:21:39 erikg Exp $ (BRL)";
d23 1
a23 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/dbcp.c,v 1.2 2004/06/08 22:04:43 morrison Exp $ (BRL)";
d99 1
a99 1
	if ((buffer = malloc(size)) == NULL) {
@


1.2
log
@obliterate externs.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d26 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/dbcp.c,v 11.5 2004/05/10 15:30:50 erikg Exp $ (BRL)";
a26 2


a31 1
#include "externs.h"			/* For getopt and malloc and atoi */
@

