head	14.19;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.13
	rel-7-8-2:14.13
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.19
date	2007.11.21.20.49.14;	author erikgreenwald;	state Exp;
branches;
next	14.18;

14.18
date	2007.11.21.18.55.37;	author erikgreenwald;	state Exp;
branches;
next	14.17;

14.17
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.27.01.41.54;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.56;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.06.04.14.01.39;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.06.04.13.37.27;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.06.04.13.34.17;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.06.04.13.28.14;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.06.03.21.35.33;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.28;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.11.03.17.43.41;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.19.05.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.06.30.00.08.37;	author erikgreenwald;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2005.01.30.20.31.33;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.45.41;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.46;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.56;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.21;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                        P L - S G I . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pl-sgi.c
 *
 *  SGI Iris 3-D Unix Plot display program.
 *
 *  Authors -
 *	Paul R. Stay
 *	Gary S. Moss
 *	Phillip Dykstra
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.18 2007/11/21 18:55:37 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "machine.h"		/* to define "sgi" on ANSI compilers */
#include "bu.h"


/* if there is no SGIGL, then the entire program is simplified to a
 * output a statement.
 */
#if HAS_SGIGL

#  include "gl.h"
#  include "device.h"
#  ifdef mips
     /* sgi 4-D */
#    include "gl/addrs.h"
#    include "gl/cg2vme.h"
#    include "gl/get.h"
#  else
     /* sgi 3-D */
#    include <get.h>
#    define XMAX170	645
#    define YMAX170	484
#  endif
#  ifdef SPACEBALL
#    include "gl/spaceball.h"
#  endif

#  define	HUGEVAL	1.0e10	/* for near/far clipping */

#  define Min( x1, x2 )	((x1) < (x2) ? (x1) : (x2))
#  define Max( x1, x2 )	((x1) > (x2) ? (x1) : (x2))
#  define	PI		3.1415926535898
#  define	DtoR(x)		((x)*PI/180.0)
#  define	RtoD(x)		((x)*180.0/PI)

/*
 *  Color Map:
 *  In doublebuffered mode, you only have 12 bits per pixel.
 *  These get mapped via a 4096 entry colormap [0..4095].
 *  MEX however steals:
 *    0 - 15	on the 3030 (first 8 are "known" colors)
 *    top 256	on the 4D "G" and "B" machines [3840..4095] are used
 *              to support simultaneous RGB and CMAP windows.
 *  Note: as of Release 3.1, 4Sight on the 4D's uses the bottom 32 colors.
 *    To quote makemap, the lowest eight colors are the eight standard
 *    Graphics Library colors (black, red, green, yellow, blue, magenta,
 *    cyan and white).  The next 23 [8..30] are a black to white gray ramp.
 *    The remaining 225 colors [31..255] are mapped as a 5*9*5 color cube.
 */
/* Map RGB onto 10x10x10 color cube, giving index in range 0..999 */
#  ifdef mips
#    define MAP_RESERVED	(256+8)		/* # slots reserved by MAX */
#  else
#    define MAP_RESERVED	16		/* # slots reserved by MEX */
#  endif
#  define COLOR_APPROX(r,g,b)	((r/26)+ (g/26)*10 + (b/26)*100 + MAP_RESERVED)

/* Window Location */
#  ifdef mips
#    define WINDIM	1024
#    define WIN_R	(1279-MARGIN)
#  else
#    define WINDIM	768
#    define WIN_R	(1023-MARGIN)
#  endif
#  define MARGIN	4			/* # pixels margin to screen edge */
#  define BANNER	20
#  define WIN_L	(WIN_R-WINDIM)
#  define WIN_B	MARGIN
#  define WIN_T	(WINDIM-BANNER-MARGIN)


/*
 *	V I E W _ L O O P
 */

#define	ROTX	DIAL6
#define	ROTY	DIAL4
#define	ROTZ	DIAL2
#define	TRANX	DIAL7
#define	TRANY	DIAL5
#define	TRANZ	DIAL3
#define	ZOOM	DIAL1

#define	ORTHO	SW0
#define	PERSP	SW1
#undef RESET
#define	RESET	SW2

#define	BOTTOM	SW23
#define	TOP	SW24
#define	REAR	SW25
#define	V4545	SW26
#define	RIGHT	SW28
#define	FRONT	SW29
#define	LEFT	SW30
#define	V3525	SW31

#define	MENU_CENTER	1
#define	MENU_AXIS	2
#define	MENU_INFO	3
#define	MENU_SNAP	4
#define	MENU_SHELL	5
#define	MENU_EXIT	6
char *menustring = "Center|Axis|Info|DunnSnap|ShellCmd|Exit";

/*XXX - global because it is shared with the menu/mouse input function */
float	d_tran[3];	/* Delta Translations */

int	redisplay = 1;


Matrix	*viewmat;	/* current viewing projection */
Matrix	viewortho;	/* ortho viewing projection */
Matrix	viewpersp;	/* perspective viewing projection */
Matrix	identmat;	/* identity */
Matrix	centermat;	/* center screen matrix */
Coord	viewsize;
Matrix	g_rot;		/* Global Rotations and Translations */
double	g_scal[3];	/* Global Scales */

char	*shellcmd = NULL;
int	shellexit = 0;	/* one shot shell command! */
int	ntsc = 0;	/* use NTSC display, for video recording */
int	axis = 0;	/* display coord axis */
int	info = 0;	/* output orientation info */
int	fullscreen = 0;	/* use a full screen window (if mex) */
short	thickness = 0;	/* line thickness */
int	file_input = 0;	/* !0 if input came from a disk file */
int	minobj = 1;	/* lowest active object number */
int	maxobj = 1;	/* next available object number */
int	cmap_mode = 1;	/* !0 if in color map mode, else RGBmode */
int	onebuffer = 0;	/* !0 if in single buffer mode, else double */
long	menu;
char	*menustring;


static char usage[] = "\
Usage: pl-sgi [options] [-t thickness] [-{s|S} shellcmd] [file.plot]\n\
   -a   Display coordinate axis\n\
   -f   Full screen window\n\
   -n   NTSC video mode\n\
   -1   Single buffer\n\
";


int
get_args( int argc, char *argv[] )
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "aft:ns:S:1" )) != EOF )  {
		switch( c )  {
		case 'a':
			axis++;
			break;
		case 'f':
			fullscreen++;
			break;
		case 't':
			thickness = atoi(bu_optarg);
			break;
		case 'n':
			ntsc = 1;
			break;
		case 's':
			shellcmd = bu_optarg;
			break;
		case 'S':
			shellcmd = bu_optarg;
			shellexit++;
			break;
		case '1':
			onebuffer++;
			break;
		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
	}

	return(1);		/* OK */
}


int
init_display()
{
	int	i;
	short	r, g, b;
	int map_size;		/* # of color map slots available */

	if( ismex() ) {
		if( fullscreen )  {
			prefposition( 0, XMAXSCREEN, 0, YMAXSCREEN );
		} else if( ntsc )  {
			prefposition( 0, XMAX170, 0, YMAX170 );
		} else {
			prefposition( WIN_L, WIN_R, WIN_B, WIN_T );
		}
		foreground();
		if( winopen( "UNIX plot display" ) == -1 ) {
			printf( "No more graphics ports available.\n" );
			return	1;
		}
		wintitle( "UNIX plot display" );
		winattach();

		if( ntsc )  {
			setmonitor(NTSC);
		}

		/* Free window of position constraint.			*/
		winconstraints();
		tpoff();
		if( !onebuffer )
			doublebuffer();
#ifdef mips
		if (getplanes() > 8) {
			RGBmode();
			cmap_mode = 0;
		}
#endif
		gconfig();

		/*
		 * Deal with the SGI hardware color map
		 * Note: on a 3030, MEX will make getplanes() return
		 *  10 on a 12 bit system (or double buffered 24).
		 *  On the 4D, it still returns 12.
		 */
		map_size = 1<<getplanes(); /* 10 or 12, depending on ismex() */
		map_size -= MAP_RESERVED;	/* MEX's share */
		if( map_size > 1000 )
			map_size = 1000;	/* all we are asking for */

		/* The first 8 entries of the colormap are "known" colors */
		mapcolor( 0, 000, 000, 000 );	/* BLACK */
		mapcolor( 1, 255, 000, 000 );	/* RED */
		mapcolor( 2, 000, 255, 000 );	/* GREEN */
		mapcolor( 3, 255, 255, 000 );	/* YELLOW */
		mapcolor( 4, 000, 000, 255 );	/* BLUE */
		mapcolor( 5, 255, 000, 255 );	/* MAGENTA */
		mapcolor( 6, 000, 255, 255 );	/* CYAN */
		mapcolor( 7, 255, 255, 255 );	/* WHITE */

		/* Use fixed color map with 10x10x10 color cube */
		for( i = 0; i < map_size; i++ ) {
			mapcolor( i+MAP_RESERVED,
				  (short)((i % 10) + 1) * 25,
				  (short)(((i / 10) % 10) + 1) * 25,
				  (short)((i / 100) + 1) * 25 );
		}
	} else {
		/* not mex => 3030 with 12 planes/buffer */
		ginit();
		tpoff();
		if( !onebuffer )
			doublebuffer();
		onemap();
		gconfig();

		for( b = 0; b < 16; b++ ) {
			for( g = 0; g < 16; g++ ) {
				for( r = 0; r < 16; r++ ) {
					mapcolor( b*256+g*16+r, r<<4, g<<4, b<<4 );
				}
			}
		}
		/* XXX - Hack for the cursor until the above code gets
		 * fixed to avoid the first 8 magic entries! */
		mapcolor( 1, 255, 000, 000 );	/* RED */
	}

	/* enable ESC to exit program */
	qdevice(ESCKEY);

	/* enable the mouse */
	qdevice(LEFTMOUSE);
	qdevice(MIDDLEMOUSE);
	qdevice(RIGHTMOUSE);

	/* enable all buttons */
	for( i = 0; i < 32; i++ )
		qdevice(i+SWBASE);

	/* enable all dials */
	for (i = DIAL0; i < DIAL8; i++) {
		qdevice(i);
	}
#ifdef SPACEBALL
	/* INIT Spaceball */
	qdevice(SBTX);
	qdevice(SBTY);
	qdevice(SBTZ);
	qdevice(SBRX);
	qdevice(SBRY);
	qdevice(SBRZ);
	qdevice(SBRZ);
	qdevice(SBPERIOD);
	qdevice(SBPICK);

	/* Put daemon in Spaceball mode */
	sbcommand("do Fdo enter_spaceball_mode");
#endif

	/*
	 * SGI Dials: 1024 steps per rev
	 *   -32768 .. 32767
	 */
	setvaluator(ROTX, 0, -360, 360);
	setvaluator(ROTY, 0, -360, 360);
	setvaluator(ROTZ, 0, -360, 360);
	setvaluator(TRANX, 0, -50, 50);
	setvaluator(TRANY, 0, -50, 50);
	setvaluator(TRANZ, 0, -50, 50);
	setvaluator(ZOOM, 1, -1000, 1000);
	noise( ROTX, 2 );
	noise( ROTY, 2 );
	noise( ROTZ, 2 );
	noise( TRANX, 2 );
	noise( TRANY, 2 );
	noise( TRANZ, 2 );
	noise( ZOOM, 5 );

	blanktime( 60 * 60 * 5L );	/* 5 minute blanking */

	return	0;
}


void
print_info()
{
	double	xrot, yrot, zrot, cosyrot;

	/*
	 * This rotation decomposition fails when yrot is
	 * ~ +/- 90 degrees. [cos(yrot) ~= 0, divide by zero]
	 */
	yrot = asin(g_rot[2][0]);
	cosyrot = cos(yrot);
	zrot = asin(g_rot[1][0]/-cosyrot);
	xrot = asin(g_rot[2][1]/-cosyrot);

	printf( "rot:   %f %f %f\n", RtoD(xrot), RtoD(yrot), RtoD(zrot) );
	printf( "tran:  %f %f %f\n", g_rot[3][0], g_rot[3][1], g_rot[3][2] );
	printf( "scale: %f\n", g_scal[0] );
}


void
draw_axis()
{
	int	p1, p2;

	p1 = 0.12 * viewsize / g_scal[0];
	p2 = 0.14 * viewsize / g_scal[0];

	if( cmap_mode ) {
		color( MAGENTA );
	} else {
		RGBcolor(255, 0, 255);
	}
	movei( 0, 0, 0 );
	drawi( p1, 0, 0 );
	cmovi( p2, 0, 0 );
	charstr( "x" );
	movei( 0, 0, 0 );
	drawi( 0, p1, 0 );
	cmovi( 0, p2, 0 );
	charstr( "y" );
	movei( 0, 0, 0 );
	drawi( 0, 0, p1 );
	cmovi( 0, 0, p2 );
	charstr( "z" );
	movei( 0, 0, 0 );	/* back to origin */
}


void
setview( Matrix m, int rx, int ry, int rz )
{
	/* Hmm... save translation and scale? */
	loadmatrix( centermat );
	getmatrix( m );
	loadmatrix( identmat );

	rotate( (Angle) rx*10, 'x' );
	rotate( (Angle) ry*10, 'y' );
	rotate( (Angle) rz*10, 'z' );
#ifdef never
	calpha = cos( alpha );
	cbeta = cos( beta );
	cgamma = cos( ggamma );

	salpha = sin( alpha );
	sbeta = sin( beta );
	sgamma = sin( ggamma );

	mat[0] = cbeta * cgamma;
	mat[1] = -cbeta * sgamma;
	mat[2] = sbeta;

	mat[4] = salpha * sbeta * cgamma + calpha * sgamma;
	mat[5] = -salpha * sbeta * sgamma + calpha * cgamma;
	mat[6] = -salpha * cbeta;

	mat[8] = -calpha * sbeta * cgamma + salpha * sgamma;
	mat[9] = calpha * sbeta * sgamma + salpha * cgamma;
	mat[10] = calpha * cbeta;
#endif
}


void
newview( Matrix orient, Matrix rot, float tran[3], float scal[3], Matrix viewmat )
{
	/*
	 * combine new operations with old
	 *  orient = orient * scal * trans * rot * view
	 */
	g_scal[0] *= scal[0];
	g_scal[1] *= scal[1];
	g_scal[2] *= scal[2];
	loadmatrix( rot );
	translate( tran[0], tran[1], tran[2] );
	multmatrix( orient );
	getmatrix( orient );

	/* set up total viewing transformation */
	loadmatrix( viewmat );
	scale( g_scal[0], g_scal[1], g_scal[2] );
	multmatrix( orient );
}


void
domenu( int n )
{
	long	left, bottom, winx_size, winy_size;
	long	x, y;
	double	fx, fy;
	int	ret;
#ifdef mips
	long	video;
#endif

	switch( n ) {
	case MENU_CENTER:
		x = getvaluator(CURSORX);
		y = getvaluator(CURSORY);
		getsize( &winx_size, &winy_size);
		getorigin( &left, &bottom );
		fx = 0.5 - (x - left) / (double)winx_size;
		fy = 0.5 - (y - bottom) / (double)winy_size;
		d_tran[0] += fx * 2.0 * viewsize / g_scal[0];
		d_tran[1] += fy * 2.0 * viewsize / g_scal[1];
		redisplay = 1;
		break;
	case MENU_AXIS:
		if( axis == 0 )
			axis = 1;
		else
			axis = 0;
		redisplay = 1;
		break;
	case MENU_INFO:
		if( info == 0 ) {
			info = 1;
			print_info();
		} else
			info = 0;
		break;
	case MENU_SNAP:
		cursoff();
#ifdef mips
		video = getvideo(DE_R1);
		setvideo( DE_R1, DER1_30HZ|DER1_UNBLANK );
#else
		system("Set30");
#endif
		ret = system("dunnsnap");
#ifdef mips
		setvideo( DE_R1, video );
#else
		system("Set60");
#endif
		curson();
		if( ret ) {
			fprintf( stderr, "pl-sgi: Snap failed. Out of film?\n" );
			ringbell();
		}
		break;
	case MENU_SHELL:
		if (shellcmd != NULL) {
			cursoff();
			system(shellcmd);
			curson();
		}
		break;
	case MENU_EXIT:
		break;
	}
}


int
process_input()
{
	Device	event;
	short	val;
	Coord	fval;
	long	menuval;
	Matrix	d_rot;		/* Delta Rotations */
	float	d_scal[3];	/* Delta Scales */
	int	done;
#ifdef SPACEBALL
	float	sbrx, sbry, sbrz;
	float	sbtx, sbty, sbtz;
	float	sbperiod;
	static float sbtransrate = 0.00001;
	static float sbrotrate = 0.000001;
#endif

	done = 0;
	/*if( qtest() )*/
	event = qread( &val );
	fval = val;
	/*printf("event %d: value %d\n", event, val);*/
	/* Ignore all zero val's? XXX */

	loadmatrix ( identmat );
	d_tran[0] = d_tran[1] = d_tran[2] = 0;
	d_scal[0] = d_scal[1] = d_scal[2] = 1;

	switch (event) {
#ifdef SPACEBALL
	case SBTX:
		/*printf("SBTX\n");*/
		sbtx = fval;
		break;
	case SBTY:
		sbty = fval;
		break;
	case SBTZ:
		sbtz = fval;
		break;
	case SBRX:
		sbrx = fval;
		break;
	case SBRY:
		sbry = fval;
		break;
	case SBRZ:
		sbrz = fval;
		break;
	case SBPERIOD:
		sbperiod = fval;
		d_tran[0] = sbperiod * sbtransrate * sbtx / g_scal[0];
		d_tran[1] = sbperiod * sbtransrate * sbty / g_scal[1];
		d_tran[2] = sbperiod * sbtransrate * sbtz / g_scal[2];
		rotarbaxis( sbperiod*sbrotrate, sbrx, sbry, sbrz, d_rot );
		loadmatrix( d_rot );
		redisplay = 1;
		break;
	case SBPICK:
		/* reset - clear out the global rot/trans matrix */
		loadmatrix( centermat );
		getmatrix( g_rot );
		loadmatrix( identmat );
		redisplay = 1;
		break;
#endif
	case ROTX:
		if( val ) {
			fval *= 10.0;
			rotate( (Angle) fval, 'x' );
			setvaluator(ROTX, 0, -360, 360);
			redisplay = 1;
		}
		break;
	case ROTY:
		if( val ) {
			fval *= 10.0;
			rotate( (Angle) fval, 'y' );
			setvaluator(ROTY, 0, -360, 360);
			redisplay = 1;
		}
		break;
	case ROTZ:
		if( val ) {
			fval *= 10.0;
			rotate( (Angle) fval, 'z' );
			setvaluator(ROTZ, 0, -360, 360);
			redisplay = 1;
		}
		break;
	case TRANX:
		if( val ) {
			fval *= viewsize / 300.0;
			d_tran[0] += fval / g_scal[0];
			setvaluator(TRANX, 0, -50, 50);
			redisplay = 1;
		}
		break;
	case TRANY:
		if( val ) {
			fval *= viewsize / 300.0;
			d_tran[1] += fval / g_scal[1];
			setvaluator(TRANY, 0, -50, 50);
			redisplay = 1;
		}
		break;
	case TRANZ:
		if( val ) {
			fval *= viewsize / 300.0;
			d_tran[2] += fval / g_scal[2];
			setvaluator(TRANZ, 0, -50, 50);
			redisplay = 1;
		}
		break;
	case ZOOM:
		if( val ) {
			fval = 1.0 + fval / 1100.0;
			d_scal[0] *= fval;
			d_scal[1] *= fval;
			d_scal[2] *= fval;
			setvaluator(ZOOM, 1, -1000, 1000);
			redisplay = 1;
		}
		break;
	case LEFTMOUSE:
		if( val ) {
			fval = 0.5;
			d_scal[0] *= fval;
			d_scal[1] *= fval;
			d_scal[2] *= fval;
			redisplay = 1;
		}
		break;
	case RIGHTMOUSE:
	/*case MIDDLEMOUSE:*/
		if( val ) {
			menuval = dopup( menu );
			if( menuval == MENU_EXIT )
				done = 1;
			else
				domenu( menuval );
		}
		break;
	case MIDDLEMOUSE:
	/*case RIGHTMOUSE:*/
		if( val ) {
			fval = 2.0;
			d_scal[0] *= fval;
			d_scal[1] *= fval;
			d_scal[2] *= fval;
			redisplay = 1;
		}
		break;
	case ORTHO:
		if( val ) {
			viewmat = (Matrix *)viewortho;
			redisplay = 1;
		}
		break;
	case PERSP:
		if( val ) {
			viewmat = (Matrix *)viewpersp;
			redisplay = 1;
		}
		break;
	case RESET:
		if( val ) {
			/* reset */
			loadmatrix( centermat );
			getmatrix( g_rot );
			loadmatrix( identmat );
			redisplay = 1;
		}
		break;
	case BOTTOM:
		if( val ) {
			setview( g_rot, 180, 0, 0 );
			redisplay = 1;
		}
		break;
	case TOP:
		if( val ) {
			setview( g_rot, 0, 0, 0 );
			redisplay = 1;
		}
		break;
	case REAR:
		if( val ) {
			setview( g_rot, 270, 0, 90 );
			redisplay = 1;
		}
		break;
	case V4545:
		if( val ) {
			setview( g_rot, 270+45, 0, 270-45 );
			redisplay = 1;
		}
		break;
	case RIGHT:
		if( val ) {
			setview( g_rot, 270, 0, 0 );
			redisplay = 1;
		}
		break;
	case FRONT:
		if( val ) {
			setview( g_rot, 270, 0, 270 );
			redisplay = 1;
		}
		break;
	case LEFT:
		if( val ) {
			setview( g_rot, 270, 0, 180 );
			redisplay = 1;
		}
		break;
	case V3525:
		if( val ) {
			setview( g_rot, 270+25, 0, 270-35 );
			redisplay = 1;
		}
		break;
	case ESCKEY:
		done = 1;
		break;
	}

	getmatrix( d_rot );
	newview( g_rot, d_rot, d_tran, d_scal, viewmat );
	return( done );
}


void
get_string( FILE *fp, char *s )
{
	int	c;

	while( (c = getc(fp)) != '\n' && c != EOF )
		*s++ = c;
	*s = NULL;
}


void
getieee( FILE *fp, double out[], int n )
{
	char	in[8*16];
	fread( in, 8, n, fp );
	ntohd( (unsigned char * )out, (const unsigned char *)in, n );
}


/*
 *  Iris 3-D Unix plot reader
 *
 *  UNIX-Plot integers are 16bit VAX order (little-endian) 2's complement.
 */
#define	geti(fp,x)	{ (x) = getc(fp); (x) |= (short)(getc(fp)<<8); }
#define	getb(fp)	(getc(fp))

void
uplot( FILE *fp, Coord max[3], Coord min[3] )
{
	register int	c;
	int	x, y, z, x1, y1, z1, x2, y2, z2;
	int	r, g, b;
	char	str[180];
	double	d[8];
	int 	o;

	/* We have to keep the "current position" ourselves
	 * for the silly labels, since the SGI can't give
	 * us the graphics position inside an object!
	 */
	double	xp, yp, zp;

	xp = yp = zp = 0;
	while( (c = getc(fp)) != EOF ) {
		switch( c ) {
		/* One of a kind functions */
		case 'e':
			if( !file_input ) {
				/* remove any objects, start a new one */
				closeobj();
				for( o = minobj; o <= maxobj; o++ )
					delobj( o );
				minobj = maxobj;
				makeobj( maxobj );
			}
			break;
		case 'F':
			/* display everything up to here */
			if( !file_input )
				return;
			break;
		case 'f':
			get_string( fp, str );
			if( strcmp(str, "solid") == 0 )
				setlinestyle( 0 );
			else if( strcmp(str, "dotted") == 0 )
				setlinestyle( 1 );
			else if( strcmp(str, "longdashed") == 0 )
				setlinestyle( 2 );
			else if( strcmp(str, "shortdashed") == 0 )
				setlinestyle( 3 );
			else if( strcmp(str, "dotdashed") == 0 )
				setlinestyle( 4 );
			else {
				fprintf(stderr, "pl-sgi: unknown linestyle \"%s\"\n", str);
				setlinestyle( 0 );
			}
			break;
		case 't':
			get_string( fp, str );
			cmov( xp, yp, zp );	/* all that for this... */
			charstr( str );
			break;
		/* 2D integer */
		case 's':
			geti(fp,x1);
			geti(fp,y1);
			geti(fp,x2);
			geti(fp,y2);
			min[0] = x1; min[1] = y1;
			max[0] = x2; max[1] = y2;
			min[2] = -1.0; max[2] = 1.0;
			break;
		case 'p':
			geti(fp,x);
			geti(fp,y);
			pnti( x, y, 0 );
			xp = x; yp = y; zp = 0;
			break;
		case 'm':
			geti(fp,x);
			geti(fp,y);
			movei( x, y, 0 );
			xp = x; yp = y; zp = 0;
			break;
		case 'n':
			geti(fp,x);
			geti(fp,y);
			drawi( x, y, 0 );
			xp = x; yp = y; zp = 0;
			break;
		case 'l':
			geti(fp,x1);
			geti(fp,y1);
			geti(fp,x2);
			geti(fp,y2);
			movei( x1, y1, 0 );
			drawi( x2, y2, 0 );
			xp = x2; yp = y2; zp = 0;
			break;
		case 'c':
			geti(fp,x);
			geti(fp,y);
			geti(fp,r);
			circ( (double)x, (double)y, (double)r );
			xp = x; yp = y; zp = 0;
			break;
		case 'a':
			geti(fp,x);
			geti(fp,y);
			geti(fp,x1);
			geti(fp,y1);
			geti(fp,x2);
			geti(fp,y2);
			/* ARC XXX */
			break;
		/* 3D integer */
		case 'S':
			geti(fp,x1);
			geti(fp,y1);
			geti(fp,z1);
			geti(fp,x2);
			geti(fp,y2);
			geti(fp,z2);
			min[0] = x1; min[1] = y1; min[2] = z1;
			max[0] = x2; max[1] = y2; max[2] = z2;
			break;
		case 'P':
			geti(fp,x);
			geti(fp,y);
			geti(fp,z);
			pnti( x, y, z );
			xp = x; yp = y; zp = z;
			break;
		case 'M':
			geti(fp,x);
			geti(fp,y);
			geti(fp,z);
			movei( x, y, z );
			xp = x; yp = y; zp = z;
			break;
		case 'N':
			geti(fp,x);
			geti(fp,y);
			geti(fp,z);
			drawi( x, y, z );
			xp = x; yp = y; zp = z;
			break;
		case 'L':
			geti(fp,x1);
			geti(fp,y1);
			geti(fp,z1);
			geti(fp,x2);
			geti(fp,y2);
			geti(fp,z2);
			movei( x1, y1, z1 );
			drawi( x2, y2, z2 );
			xp = x2; yp = y2; zp = z2;
			break;
		case 'C':
			r = getb(fp);
			g = getb(fp);
			b = getb(fp);
			if( cmap_mode ) {
				if( ismex() )
					color( COLOR_APPROX(r,g,b) );
				else
					color( (b&0xf0)<<4 | (g&0xf0) | (r>>4) );
			} else {
				RGBcolor( (short)r, (short)g, (short)b );
			}
			break;
		/* 2D and 3D IEEE */
		case 'w':
			getieee( fp, d, 4 );
			min[0] = d[0]; min[1] = d[1]; min[2] = -1.0;
			max[0] = d[2]; max[1] = d[3]; max[2] = 1.0;
			break;
		case 'W':
			getieee( fp, d, 6 );
			min[0] = d[0]; min[1] = d[1]; min[2] = d[2];
			max[0] = d[3]; max[1] = d[4]; max[2] = d[5];
			break;
		case 'o':
			getieee( fp, d, 2 );
			xp = d[0]; yp = d[1]; zp = 0;
			move( xp, yp, 0.0 );
			break;
		case 'O':
			getieee( fp, d, 3 );
			xp = d[0]; yp = d[1]; zp = d[2];
			move( xp, yp, zp );
			break;
		case 'q':
			getieee( fp, d, 2 );
			xp = d[0]; yp = d[1]; zp = 0;
			draw( xp, yp, 0.0 );
			break;
		case 'Q':
			getieee( fp, d, 3 );
			xp = d[0]; yp = d[1]; zp = d[2];
			draw( xp, yp, zp );
			break;
		case 'x':
			getieee( fp, d, 2 );
			xp = d[0]; yp = d[1]; zp = 0;
			pnt( xp, yp, 0.0 );
			break;
		case 'X':
			getieee( fp, d, 3 );
			xp = d[0]; yp = d[1]; zp = d[2];
			pnt( d[0], d[1], d[2] );
			break;
		case 'v':
			getieee( fp, d, 4 );
			move( d[0], d[1], 0.0 );
			draw( d[2], d[3], 0.0 );
			xp = d[2]; yp = d[3]; zp = 0;
			break;
		case 'V':
			getieee( fp, d, 6 );
			move( d[0], d[1], d[2] );
			draw( d[3], d[4], d[5] );
			xp = d[3]; yp = d[4]; zp = d[5];
			break;
		case 'r':
			getieee( fp, d, 6 );
			/*XXX*/
			break;
		case 'i':
			getieee( fp, d, 3 );
			circ( d[0], d[1], d[2] );
			xp = d[0]; yp = d[1]; zp = d[2];
			break;
		default:
			fprintf( stderr, "pl-sgi: bad command '%c' (0x%02x)\n", c, c );
			break;
		}
	}
}


void
view_loop()
{
	int	done = 0;
	int	o = 1;		/* object number */

	/* Initial translate/rotate/scale matrix */
	loadmatrix( centermat );
	getmatrix( g_rot );
	g_scal[0] = g_scal[1] = g_scal[2] = 1;

	/*depthcue(1);*/
	/*cursoff();XXX*/

	/*
	 *  Each time through this loop, g_rot holds the current
	 *  orientation matrix.  An identity matrix is placed
	 *  on the stack and acted on by device inputs.
	 *  After inputs, g_rot = oldm * stack.
	 *  The stack is then replaced by g_rot*viewmat for drawing.
	 */
	while( !done ) {

		if( redisplay ) {
			/* Setup current view */
			loadmatrix( (*viewmat) );
			scale( g_scal[0], g_scal[1], g_scal[2] );
			multmatrix( g_rot );

			/* draw the object(s) */
			cursoff();
			if( cmap_mode ) {
				color(BLACK);
			} else {
				RGBcolor(0,0,0);
			}
			clear();
			if( axis )
				draw_axis();
			/* draw all objects */
			for( o = minobj; o < maxobj; o++ ) {
				/* set the default drawing color to white */
				if( cmap_mode ) {
					if( ismex() )
						color( COLOR_APPROX(255,255,255) );
					else
						color( (255&0xf0)<<4 | (255&0xf0) | (255>>4) );
				} else {
					RGBcolor(255,255,255);
				}
				callobj( o );
			}
			if( !onebuffer )
				swapbuffers();
			if( shellcmd != NULL && shellexit ) {
				system(shellcmd);
				bu_exit (0, NULL);
			}
			curson();
			if( info )
				print_info();
			redisplay = 0;
		}

		do {
			done = process_input();
		} while(qtest());
#ifdef SPACEBALL
		sbprompt();
#endif
		/* Check for more objects to be read */
		if( !file_input && !feof(stdin) /* && select()*/ ) {
			double	max[3], min[3];
			makeobj( maxobj++ );
			uplot( stdin, max, min );
			closeobj();
		}
	}
	/*depthcue( 0 );*/
	curson();
	greset();
	tpon();
	gexit();
}


int
main(int argc, char *argv[])
{
	Coord	max[3], min[3];
	char	*file;
	FILE	*fp;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit ( 1, NULL );
	}

	/* In case if there is no space command */
	min[0] = min[1] = min[2] = -32768.0;
	max[0] = max[1] = max[2] = 32768.0;

	init_display();

	if( bu_optind >= argc ) {
		makeobj( maxobj++ );
		uplot( stdin, max, min );
		closeobj();
	}
	while( bu_optind < argc ) {
		file = argv[bu_optind];
		if( (fp = fopen(file,"r")) == NULL ) {
			fprintf(stderr,"pl-sgi: can't open \"%s\"\n", file);
			bu_exit ( 3, NULL );
		}
		file_input = 1;

		makeobj( maxobj++ );
		uplot( fp, max, min );
		closeobj();

		fclose( fp );
		bu_optind++;
	}

	/* scale to the largest X, Y, or Z interval */
	viewsize = max[0] - min[0];
	viewsize = Max( viewsize, max[1] - min[1] );
	viewsize = Max( viewsize, max[2] - min[2] );
	viewsize /= 2.0;

	/* set up and save the viewing projection matrix */
	if( ismex() ) {
		if( fullscreen ) {
			/* Compensate for the rectangular display surface */
#ifdef mips
			ortho( -1.25*viewsize, 1.25*viewsize,
				-viewsize, viewsize, -HUGEVAL, HUGEVAL );
#else
			ortho( -1.33*viewsize, 1.33*viewsize,
				-viewsize, viewsize, -HUGEVAL, HUGEVAL );
#endif
		} else {
			ortho( -viewsize, viewsize, -viewsize, viewsize,
				-HUGEVAL, HUGEVAL );
		}
		getmatrix( viewortho );
		perspective( 900, 1.0, 0.01, 1.0e10 );
		/*polarview( 1.414, 0, 0, 0 );*/
		getmatrix( viewpersp );
	} else {
		/* Compensate for the rectangular display surface */
		ortho( -1.33*viewsize, 1.33*viewsize,
			-viewsize, viewsize, -HUGEVAL, HUGEVAL );
		getmatrix( viewortho );
		perspective( 900, 1.0, 0.01, 1.0e10 );
		/*polarview( 1.414, 0, 0, 0 );*/
		getmatrix( viewpersp );
	}
	viewmat = (Matrix *)viewortho;

	/* Make an identity matrix */
	identmat[0][0] = identmat[1][1] = identmat[2][2] = identmat[3][3] = 1.0;
	identmat[1][0] = identmat[1][2] = identmat[1][3] = 0.0;
	identmat[2][0] = identmat[0][1] = identmat[2][3] = 0.0;
	identmat[3][0] = identmat[3][1] = identmat[3][2] = 0.0;

	/* set up and save the initial rot/trans/scale matrix */
	loadmatrix( identmat );
	translate( -(max[0]+min[0])/2.0, -(max[1]+min[1])/2.0,
		-(max[2]+min[2])/2.0 );
	getmatrix( centermat );

	/* set up the command menu */
	menu = defpup( menustring );

	/* set up line thickness/styles */
	if( thickness > 0 )
		linewidth( thickness );
	deflinestyle( 1, 0x8888 );	/* dotted */
	deflinestyle( 2, 0xF8F8 );	/* longdashed */
	deflinestyle( 3, 0xE0E0 );	/* shortdashed */
	deflinestyle( 4, 0x4F4F );	/* dotdashed */

	view_loop();
	bu_exit ( 0, NULL );
}

#else

int
main(int argc, char *argv[])
{
	printf( "pl-sgi: this is an SGI Iris specific program\n" );
	bu_exit ( 1, NULL );
}

#endif  /* !HAS_SGIGL */


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@exit->bu_exit where applicable
@
text
@d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.17 2007/07/26 01:14:00 brlcad Exp $ (BRL)";
d1104 1
a1104 1
				bu_exit (0, "");
d1143 1
a1143 1
		bu_exit ( 1, "" );
d1161 1
a1161 1
			bu_exit ( 3, "" );
d1233 1
a1233 1
	bu_exit ( 0, "" );
d1242 1
a1242 1
	bu_exit ( 1, "" );
@


14.17
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.16 2007/01/27 01:41:54 brlcad Exp $ (BRL)";
d1104 1
a1104 1
				exit(0);
d1143 1
a1143 1
		exit( 1 );
d1161 1
a1161 1
			exit( 3 );
d1233 1
a1233 1
	exit( 0 );
d1242 1
a1242 1
	exit( 1 );
@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a28 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.15 2007/01/23 01:13:56 brlcad Exp $ (BRL)";
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.14 2007/01/20 14:37:07 brlcad Exp $ (BRL)";
d338 1
a338 1
        /* INIT Spaceball */
@


14.14
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.13 2006/06/04 14:01:39 brlcad Exp $ (BRL)";
@


14.13
log
@quell more warnings
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.12 2006/06/04 13:37:27 brlcad Exp $ (BRL)";
@


14.12
log
@move the other defines and globals to the top too
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.11 2006/06/04 13:34:17 brlcad Exp $ (BRL)";
d52 1
a52 1
#ifdef HAS_SGIGL
@


14.11
log
@de-k&r-ify, ansify the functions
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.10 2006/06/04 13:28:14 brlcad Exp $ (BRL)";
d116 39
a154 7
static char usage[] = "\
Usage: pl-sgi [options] [-t thickness] [-{s|S} shellcmd] [file.plot]\n\
   -a   Display coordinate axis\n\
   -f   Full screen window\n\
   -n   NTSC video mode\n\
   -1   Single buffer\n\
";
d181 9
a427 40
/*
 *	V I E W _ L O O P
 */

#define	ROTX	DIAL6
#define	ROTY	DIAL4
#define	ROTZ	DIAL2
#define	TRANX	DIAL7
#define	TRANY	DIAL5
#define	TRANZ	DIAL3
#define	ZOOM	DIAL1

#define	ORTHO	SW0
#define	PERSP	SW1
#undef RESET
#define	RESET	SW2

#define	BOTTOM	SW23
#define	TOP	SW24
#define	REAR	SW25
#define	V4545	SW26
#define	RIGHT	SW28
#define	FRONT	SW29
#define	LEFT	SW30
#define	V3525	SW31

#define	MENU_CENTER	1
#define	MENU_AXIS	2
#define	MENU_INFO	3
#define	MENU_SNAP	4
#define	MENU_SHELL	5
#define	MENU_EXIT	6
char *menustring = "Center|Axis|Info|DunnSnap|ShellCmd|Exit";

/*XXX - global because it is shared with the menu/mouse input function */
float	d_tran[3];	/* Delta Translations */

int	redisplay = 1;


@


14.10
log
@reorder functions in proper decl/usage order, get rid of const Matrix casts
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.9 2006/06/03 21:35:33 brlcad Exp $ (BRL)";
d149 2
a150 2
get_args( argc, argv )
register char **argv;
d192 1
a192 1
void
d428 1
a428 3
setview( m, rx, ry, rz )
Matrix	m;
int	rx, ry, rz;
d463 1
a463 3
newview( orient, rot, tran, scal, viewmat )
Matrix	orient, rot, viewmat;
float	tran[3], scal[3];
d485 1
a485 2
domenu( n )
int	n;
d789 1
a789 3
get_string( fp, s )
FILE	*fp;
char	*s;
d800 1
a800 4
getieee( fp, out, n )
FILE	*fp;
double	out[];
int	n;
d817 1
a817 3
uplot( fp, max, min )
FILE	*fp;
Coord	max[3], min[3];
d1139 1
a1139 1
main(int argc, char **argv)
d1243 1
a1243 1
main(int argc, char **argv)
@


14.9
log
@quell lots of warnings.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.8 2006/01/18 06:46:28 brlcad Exp $ (BRL)";
d48 6
a53 1
#if HAS_SGIGL
d67 47
a113 3
#ifdef SPACEBALL
#  include "gl/spaceball.h"
#endif
a114 1
#define	HUGEVAL	1.0e10	/* for near/far clipping */
d116 7
a122 5
#define Min( x1, x2 )	((x1) < (x2) ? (x1) : (x2))
#define Max( x1, x2 )	((x1) > (x2) ? (x1) : (x2))
#define	PI		3.1415926535898
#define	DtoR(x)		((x)*PI/180.0)
#define	RtoD(x)		((x)*180.0/PI)
a147 24
void	uplot();

/*
 *  Color Map:
 *  In doublebuffered mode, you only have 12 bits per pixel.
 *  These get mapped via a 4096 entry colormap [0..4095].
 *  MEX however steals:
 *    0 - 15	on the 3030 (first 8 are "known" colors)
 *    top 256	on the 4D "G" and "B" machines [3840..4095] are used
 *              to support simultaneous RGB and CMAP windows.
 *  Note: as of Release 3.1, 4Sight on the 4D's uses the bottom 32 colors.
 *    To quote makemap, the lowest eight colors are the eight standard
 *    Graphics Library colors (black, red, green, yellow, blue, magenta,
 *    cyan and white).  The next 23 [8..30] are a black to white gray ramp.
 *    The remaining 225 colors [31..255] are mapped as a 5*9*5 color cube.
 */
/* Map RGB onto 10x10x10 color cube, giving index in range 0..999 */
#ifdef mips
#define MAP_RESERVED	(256+8)		/* # slots reserved by MAX */
#else
#define MAP_RESERVED	16		/* # slots reserved by MEX */
#endif
#define COLOR_APPROX(r,g,b)	\
	((r/26)+ (g/26)*10 + (b/26)*100 + MAP_RESERVED)
a190 8
static char usage[] = "\
Usage: pl-sgi [options] [-t thickness] [-{s|S} shellcmd] [file.plot]\n\
   -a   Display coordinate axis\n\
   -f   Full screen window\n\
   -n   NTSC video mode\n\
   -1   Single buffer\n\
";
#endif /* sgi */
d192 2
a193 2
int
main(int argc, char **argv)
d195 3
a197 4
#if HAS_SGIGL
	Coord	max[3], min[3];
	char	*file;
	FILE	*fp;
d199 15
a213 4
	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}
d215 3
a217 3
	/* In case if there is no space command */
	min[0] = min[1] = min[2] = -32768.0;
	max[0] = max[1] = max[2] = 32768.0;
d219 9
a227 12
	init_display();

	if( bu_optind >= argc ) {
		makeobj( maxobj++ );
		uplot( stdin, max, min );
		closeobj();
	}
	while( bu_optind < argc ) {
		file = argv[bu_optind];
		if( (fp = fopen(file,"r")) == NULL ) {
			fprintf(stderr,"pl-sgi: can't open \"%s\"\n", file);
			exit( 3 );
d229 2
a230 1
		file_input = 1;
d232 10
a241 3
		makeobj( maxobj++ );
		uplot( fp, max, min );
		closeobj();
d243 9
a251 3
		fclose( fp );
		bu_optind++;
	}
d253 15
a267 5
	/* scale to the largest X, Y, or Z interval */
	viewsize = max[0] - min[0];
	viewsize = Max( viewsize, max[1] - min[1] );
	viewsize = Max( viewsize, max[2] - min[2] );
	viewsize /= 2.0;
d269 6
a274 14
	/* set up and save the viewing projection matrix */
	if( ismex() ) {
		if( fullscreen ) {
			/* Compensate for the rectangular display surface */
#ifdef mips
			ortho( -1.25*viewsize, 1.25*viewsize,
				-viewsize, viewsize, -HUGEVAL, HUGEVAL );
#else
			ortho( -1.33*viewsize, 1.33*viewsize,
				-viewsize, viewsize, -HUGEVAL, HUGEVAL );
#endif
		} else {
			ortho( -viewsize, viewsize, -viewsize, viewsize,
				-HUGEVAL, HUGEVAL );
d276 3
a278 12
		getmatrix( viewortho );
		perspective( 900, 1.0, 0.01, 1.0e10 );
		/*polarview( 1.414, 0, 0, 0 );*/
		getmatrix( viewpersp );
	} else {
		/* Compensate for the rectangular display surface */
		ortho( -1.33*viewsize, 1.33*viewsize,
			-viewsize, viewsize, -HUGEVAL, HUGEVAL );
		getmatrix( viewortho );
		perspective( 900, 1.0, 0.01, 1.0e10 );
		/*polarview( 1.414, 0, 0, 0 );*/
		getmatrix( viewpersp );
a279 1
	viewmat = (Matrix *)viewortho;
d281 2
a282 5
	/* Make an identity matrix */
	identmat[0][0] = identmat[1][1] = identmat[2][2] = identmat[3][3] = 1.0;
	identmat[1][0] = identmat[1][2] = identmat[1][3] = 0.0;
	identmat[2][0] = identmat[0][1] = identmat[2][3] = 0.0;
	identmat[3][0] = identmat[3][1] = identmat[3][2] = 0.0;
d284 4
a287 5
	/* set up and save the initial rot/trans/scale matrix */
	loadmatrix( (const Matrix)identmat );
	translate( -(max[0]+min[0])/2.0, -(max[1]+min[1])/2.0,
		-(max[2]+min[2])/2.0 );
	getmatrix( centermat );
d289 3
a291 2
	/* set up the command menu */
	menu = defpup( menustring );
d293 15
a307 7
	/* set up line thickness/styles */
	if( thickness > 0 )
		linewidth( thickness );
	deflinestyle( 1, 0x8888 );	/* dotted */
	deflinestyle( 2, 0xF8F8 );	/* longdashed */
	deflinestyle( 3, 0xE0E0 );	/* shortdashed */
	deflinestyle( 4, 0x4F4F );	/* dotdashed */
d309 2
a310 5
	view_loop();
	exit( 0 );
#else
	printf( "pl-sgi: this is an SGI Iris specific program\n" );
	exit( 1 );
a311 1
}
d313 74
a386 1
#if HAS_SGIGL
d426 62
d489 71
d584 1
a584 1
	loadmatrix ( (const Matrix)identmat );
d728 1
a728 1
			loadmatrix( (const Matrix)centermat );
d730 1
a730 1
			loadmatrix( (const Matrix)identmat );
a786 1
	/*qreset();XXX*/
d792 1
d794 3
a796 1
view_loop()
d798 6
a803 2
	int	done = 0;
	int	o = 1;		/* object number */
a804 4
	/* Initial translate/rotate/scale matrix */
	loadmatrix( (const Matrix)centermat );
	getmatrix( g_rot );
	g_scal[0] = g_scal[1] = g_scal[2] = 1;
d806 10
a815 2
	/*depthcue(1);*/
	/*cursoff();XXX*/
a816 8
	/*
	 *  Each time through this loop, g_rot holds the current
	 *  orientation matrix.  An identity matrix is placed
	 *  on the stack and acted on by device inputs.
	 *  After inputs, g_rot = oldm * stack.
	 *  The stack is then replaced by g_rot*viewmat for drawing.
	 */
	while( !done ) {
d818 7
a824 5
		if( redisplay ) {
			/* Setup current view */
			loadmatrix( (const Matrix)(*viewmat) );
			scale( g_scal[0], g_scal[1], g_scal[2] );
			multmatrix( (const Matrix)g_rot );
d826 10
a835 234
			/* draw the object(s) */
			cursoff();
			if( cmap_mode ) {
				color(BLACK);
			} else {
				RGBcolor(0,0,0);
			}
			clear();
			if( axis )
				draw_axis();
			/* draw all objects */
			for( o = minobj; o < maxobj; o++ ) {
				/* set the default drawing color to white */
				if( cmap_mode ) {
					if( ismex() )
						color( COLOR_APPROX(255,255,255) );
					else
						color( (255&0xf0)<<4 | (255&0xf0) | (255>>4) );
				} else {
					RGBcolor(255,255,255);
				}
				callobj( o );
			}
			if( !onebuffer )
				swapbuffers();
			if( shellcmd != NULL && shellexit ) {
				system(shellcmd);
				exit(0);
			}
			curson();
			if( info )
				print_info();
			redisplay = 0;
		}

		do {
			done = process_input();
		} while(qtest());
#ifdef SPACEBALL
		sbprompt();
#endif
		/* Check for more objects to be read */
		if( !file_input && !feof(stdin) /* && select()*/ ) {
			double	max[3], min[3];
			makeobj( maxobj++ );
			uplot( stdin, max, min );
			closeobj();
		}
	}
	/*depthcue( 0 );*/
	curson();
	greset();
	tpon();
	gexit();
}

/* Window Location */
#ifdef mips
#define WINDIM	1024
#define WIN_R	(1279-MARGIN)
#else
#define WINDIM	768
#define WIN_R	(1023-MARGIN)
#endif
#define MARGIN	4			/* # pixels margin to screen edge */
#define BANNER	20
#define WIN_L	(WIN_R-WINDIM)
#define WIN_B	MARGIN
#define WIN_T	(WINDIM-BANNER-MARGIN)

void
init_display()
{
	int	i;
	short	r, g, b;
	int map_size;		/* # of color map slots available */

	if( ismex() ) {
		if( fullscreen )  {
			prefposition( 0, XMAXSCREEN, 0, YMAXSCREEN );
		} else if( ntsc )  {
			prefposition( 0, XMAX170, 0, YMAX170 );
		} else {
			prefposition( WIN_L, WIN_R, WIN_B, WIN_T );
		}
		foreground();
		if( winopen( "UNIX plot display" ) == -1 ) {
			printf( "No more graphics ports available.\n" );
			return	1;
		}
		wintitle( "UNIX plot display" );
		winattach();

		if( ntsc )  {
			setmonitor(NTSC);
		}

		/* Free window of position constraint.			*/
		winconstraints();
		tpoff();
		if( !onebuffer )
			doublebuffer();
#ifdef mips
		if (getplanes() > 8) {
			RGBmode();
			cmap_mode = 0;
		}
#endif
		gconfig();

		/*
		 * Deal with the SGI hardware color map
		 * Note: on a 3030, MEX will make getplanes() return
		 *  10 on a 12 bit system (or double buffered 24).
		 *  On the 4D, it still returns 12.
		 */
		map_size = 1<<getplanes(); /* 10 or 12, depending on ismex() */
		map_size -= MAP_RESERVED;	/* MEX's share */
		if( map_size > 1000 )
			map_size = 1000;	/* all we are asking for */

		/* The first 8 entries of the colormap are "known" colors */
		mapcolor( 0, 000, 000, 000 );	/* BLACK */
		mapcolor( 1, 255, 000, 000 );	/* RED */
		mapcolor( 2, 000, 255, 000 );	/* GREEN */
		mapcolor( 3, 255, 255, 000 );	/* YELLOW */
		mapcolor( 4, 000, 000, 255 );	/* BLUE */
		mapcolor( 5, 255, 000, 255 );	/* MAGENTA */
		mapcolor( 6, 000, 255, 255 );	/* CYAN */
		mapcolor( 7, 255, 255, 255 );	/* WHITE */

		/* Use fixed color map with 10x10x10 color cube */
		for( i = 0; i < map_size; i++ ) {
			mapcolor( i+MAP_RESERVED,
				  (short)((i % 10) + 1) * 25,
				  (short)(((i / 10) % 10) + 1) * 25,
				  (short)((i / 100) + 1) * 25 );
		}
	} else {
		/* not mex => 3030 with 12 planes/buffer */
		ginit();
		tpoff();
		if( !onebuffer )
			doublebuffer();
		onemap();
		gconfig();

		for( b = 0; b < 16; b++ ) {
			for( g = 0; g < 16; g++ ) {
				for( r = 0; r < 16; r++ ) {
					mapcolor( b*256+g*16+r, r<<4, g<<4, b<<4 );
				}
			}
		}
		/* XXX - Hack for the cursor until the above code gets
		 * fixed to avoid the first 8 magic entries! */
		mapcolor( 1, 255, 000, 000 );	/* RED */
	}

	/* enable ESC to exit program */
	qdevice(ESCKEY);

	/* enable the mouse */
	qdevice(LEFTMOUSE);
	qdevice(MIDDLEMOUSE);
	qdevice(RIGHTMOUSE);

	/* enable all buttons */
	for( i = 0; i < 32; i++ )
		qdevice(i+SWBASE);

	/* enable all dials */
	for (i = DIAL0; i < DIAL8; i++) {
		qdevice(i);
	}
#ifdef SPACEBALL
        /* INIT Spaceball */
	qdevice(SBTX);
	qdevice(SBTY);
	qdevice(SBTZ);
	qdevice(SBRX);
	qdevice(SBRY);
	qdevice(SBRZ);
	qdevice(SBRZ);
	qdevice(SBPERIOD);
	qdevice(SBPICK);

	/* Put daemon in Spaceball mode */
	sbcommand("do Fdo enter_spaceball_mode");
#endif

	/*
	 * SGI Dials: 1024 steps per rev
	 *   -32768 .. 32767
	 */
	setvaluator(ROTX, 0, -360, 360);
	setvaluator(ROTY, 0, -360, 360);
	setvaluator(ROTZ, 0, -360, 360);
	setvaluator(TRANX, 0, -50, 50);
	setvaluator(TRANY, 0, -50, 50);
	setvaluator(TRANZ, 0, -50, 50);
	setvaluator(ZOOM, 1, -1000, 1000);
	noise( ROTX, 2 );
	noise( ROTY, 2 );
	noise( ROTZ, 2 );
	noise( TRANX, 2 );
	noise( TRANY, 2 );
	noise( TRANZ, 2 );
	noise( ZOOM, 5 );

	blanktime( 60 * 60 * 5L );	/* 5 minute blanking */

	return	0;
}


/*
 *  Iris 3-D Unix plot reader
 *
 *  UNIX-Plot integers are 16bit VAX order (little-endian) 2's complement.
 */
#define	geti(fp,x)	{ (x) = getc(fp); (x) |= (short)(getc(fp)<<8); }
#define	getb(fp)	(getc(fp))

void
uplot( fp, max, min )
FILE	*fp;
Coord	max[3], min[3];
{
	register int	c;
	int	x, y, z, x1, y1, z1, x2, y2, z2;
	int	r, g, b;
	char	str[180];
	double	d[8];
d1063 1
d1065 1
a1065 3
get_string( fp, s )
FILE	*fp;
char	*s;
d1067 2
a1068 1
	int	c;
d1070 4
a1073 4
	while( (c = getc(fp)) != '\n' && c != EOF )
		*s++ = c;
	*s = NULL;
}
d1075 2
a1076 10
void
getieee( fp, out, n )
FILE	*fp;
double	out[];
int	n;
{
	char	in[8*16];
	fread( in, 8, n, fp );
	ntohd( (unsigned char * )out, (const unsigned char *)in, n );
}
d1078 8
a1085 9
void
setview( m, rx, ry, rz )
Matrix	m;
int	rx, ry, rz;
{
	/* Hmm... save translation and scale? */
	loadmatrix( (const Matrix)centermat );
	getmatrix( m );
	loadmatrix( (const Matrix)identmat );
d1087 5
a1091 7
	rotate( (Angle) rx*10, 'x' );
	rotate( (Angle) ry*10, 'y' );
	rotate( (Angle) rz*10, 'z' );
#ifdef never
	calpha = cos( alpha );
	cbeta = cos( beta );
	cgamma = cos( ggamma );
d1093 34
a1126 3
	salpha = sin( alpha );
	sbeta = sin( beta );
	sgamma = sin( ggamma );
d1128 5
a1132 11
	mat[0] = cbeta * cgamma;
	mat[1] = -cbeta * sgamma;
	mat[2] = sbeta;

	mat[4] = salpha * sbeta * cgamma + calpha * sgamma;
	mat[5] = -salpha * sbeta * sgamma + calpha * cgamma;
	mat[6] = -salpha * cbeta;

	mat[8] = -calpha * sbeta * cgamma + salpha * sgamma;
	mat[9] = calpha * sbeta * sgamma + salpha * cgamma;
	mat[10] = calpha * cbeta;
d1134 13
d1149 3
a1151 4
void
newview( orient, rot, tran, scal, viewmat )
Matrix	orient, rot, viewmat;
float	tran[3], scal[3];
d1153 12
a1164 11
	/*
	 * combine new operations with old
	 *  orient = orient * scal * trans * rot * view
	 */
	g_scal[0] *= scal[0];
	g_scal[1] *= scal[1];
	g_scal[2] *= scal[2];
	loadmatrix( (const Matrix)rot );
	translate( tran[0], tran[1], tran[2] );
	multmatrix( (const Matrix)orient );
	getmatrix( orient );
d1166 1
a1166 5
	/* set up total viewing transformation */
	loadmatrix( (const Matrix)viewmat );
	scale( g_scal[0], g_scal[1], g_scal[2] );
	multmatrix( (ocnst Matrix)orient );
}
d1168 12
a1179 4
void
print_info()
{
	double	xrot, yrot, zrot, cosyrot;
d1181 3
a1183 8
	/*
	 * This rotation decomposition fails when yrot is
	 * ~ +/- 90 degrees. [cos(yrot) ~= 0, divide by zero]
	 */
	yrot = asin(g_rot[2][0]);
	cosyrot = cos(yrot);
	zrot = asin(g_rot[1][0]/-cosyrot);
	xrot = asin(g_rot[2][1]/-cosyrot);
d1185 3
a1187 4
	printf( "rot:   %f %f %f\n", RtoD(xrot), RtoD(yrot), RtoD(zrot) );
	printf( "tran:  %f %f %f\n", g_rot[3][0], g_rot[3][1], g_rot[3][2] );
	printf( "scale: %f\n", g_scal[0] );
}
d1189 5
a1193 11
void
domenu( n )
int	n;
{
	long	left, bottom, winx_size, winy_size;
	long	x, y;
	double	fx, fy;
	int	ret;
#ifdef mips
	long	video;
#endif
d1195 4
a1198 28
	switch( n ) {
	case MENU_CENTER:
		x = getvaluator(CURSORX);
		y = getvaluator(CURSORY);
		getsize( &winx_size, &winy_size);
		getorigin( &left, &bottom );
		fx = 0.5 - (x - left) / (double)winx_size;
		fy = 0.5 - (y - bottom) / (double)winy_size;
		d_tran[0] += fx * 2.0 * viewsize / g_scal[0];
		d_tran[1] += fy * 2.0 * viewsize / g_scal[1];
		redisplay = 1;
		break;
	case MENU_AXIS:
		if( axis == 0 )
			axis = 1;
		else
			axis = 0;
		redisplay = 1;
		break;
	case MENU_INFO:
		if( info == 0 ) {
			info = 1;
			print_info();
		} else
			info = 0;
		break;
	case MENU_SNAP:
		cursoff();
d1200 2
a1201 2
		video = getvideo(DE_R1);
		setvideo( DE_R1, DER1_30HZ|DER1_UNBLANK );
d1203 2
a1204 1
		system("Set30");
d1206 3
a1208 10
		ret = system("dunnsnap");
#ifdef mips
		setvideo( DE_R1, video );
#else
		system("Set60");
#endif
		curson();
		if( ret ) {
			fprintf( stderr, "pl-sgi: Snap failed. Out of film?\n" );
			ringbell();
d1210 12
a1221 10
		break;
	case MENU_SHELL:
		if (shellcmd != NULL) {
			cursoff();
			system(shellcmd);
			curson();
		}
		break;
	case MENU_EXIT:
		break;
d1223 27
d1252 4
a1255 2
void
draw_axis()
d1257 3
a1259 1
	int	p1, p2;
d1261 1
a1261 2
	p1 = 0.12 * viewsize / g_scal[0];
	p2 = 0.14 * viewsize / g_scal[0];
a1262 20
	if( cmap_mode ) {
		color( MAGENTA );
	} else {
		RGBcolor(255, 0, 255);
	}
	movei( 0, 0, 0 );
	drawi( p1, 0, 0 );
	cmovi( p2, 0, 0 );
	charstr( "x" );
	movei( 0, 0, 0 );
	drawi( 0, p1, 0 );
	cmovi( 0, p2, 0 );
	charstr( "y" );
	movei( 0, 0, 0 );
	drawi( 0, 0, p1 );
	cmovi( 0, 0, p2 );
	charstr( "z" );
	movei( 0, 0, 0 );	/* back to origin */
}
#endif /* sgi */
@


14.8
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.7 2005/11/03 17:43:41 brlcad Exp $ (BRL)";
d49 13
a61 13
# include "gl.h"
# include "device.h"
#   ifdef mips
	/* sgi 4-D */
#	include "gl/addrs.h"
#	include "gl/cg2vme.h"
#	include "gl/get.h"
#   else
	/* sgi 3-D */
#	include <get.h>
#	define XMAX170	645
#	define YMAX170	484
#   endif
d63 1
a63 1
# include "gl/spaceball.h"
d257 1
a257 1
	loadmatrix( identmat );
d321 1
d346 1
a346 1
	loadmatrix ( identmat );
d490 1
a490 1
			loadmatrix( centermat );
d492 1
a492 1
			loadmatrix( identmat );
d555 1
d562 1
a562 1
	loadmatrix( centermat );
d580 1
a580 1
			loadmatrix( *viewmat );
d582 1
a582 1
			multmatrix( g_rot );
d654 1
a815 1
	long	l;
d1045 1
d1057 1
d1065 1
a1065 1
	ntohd( out, in, n );
d1068 1
d1074 1
a1074 1
	loadmatrix( centermat );
d1076 1
a1076 1
	loadmatrix( identmat );
d1104 1
d1116 1
a1116 1
	loadmatrix( rot );
d1118 1
a1118 1
	multmatrix( orient );
d1122 1
a1122 1
	loadmatrix( viewmat );
d1124 1
a1124 1
	multmatrix( orient );
d1127 1
d1146 1
d1216 1
@


14.7
log
@missing bu.h header for bu_getopt()
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
@


14.6
log
@trailing ws
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.5 2005/09/21 19:05:37 brlcad Exp $ (BRL)";
a44 1

d46 1
@


14.5
log
@needs bu.h for bu_getopt
@
text
@d29 1
a29 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.4 2005/06/30 00:08:37 erikgreenwald Exp $ (BRL)";
d282 1
a282 1
/* 
d1078 2
a1079 2
	cbeta = cos( beta );    
	cgamma = cos( ggamma ); 
d1082 1
a1082 1
	sbeta = sin( beta ); 
d1084 1
a1084 1
            
@


14.4
log
@added missing includes
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.3 2005/01/30 20:31:33 brlcad Exp $ (BRL)";
d128 1
a128 1
	while ( (c = getopt( argc, argv, "aft:ns:S:1" )) != EOF )  {
d137 1
a137 1
			thickness = atoi(optarg);
d143 1
a143 1
			shellcmd = optarg;
d146 1
a146 1
			shellcmd = optarg;
d157 1
a157 1
	if( optind >= argc )  {
d193 1
a193 1
	if( optind >= argc ) {
d198 2
a199 2
	while( optind < argc ) {
		file = argv[optind];
d211 1
a211 1
		optind++;
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d45 1
a46 1
#include "bu.h"
d128 1
a128 1
	while ( (c = bu_getopt( argc, argv, "aft:ns:S:1" )) != EOF )  {
d137 1
a137 1
			thickness = atoi(bu_optarg);
d143 1
a143 1
			shellcmd = bu_optarg;
d146 1
a146 1
			shellcmd = bu_optarg;
d157 1
a157 1
	if( bu_optind >= argc )  {
d193 1
a193 1
	if( bu_optind >= argc ) {
d198 2
a199 2
	while( bu_optind < argc ) {
		file = argv[bu_optind];
d211 1
a211 1
		bu_optind++;
d282 1
a282 1
/*
d1078 2
a1079 2
	cbeta = cos( beta );
	cgamma = cos( ggamma );
d1082 1
a1082 1
	sbeta = sin( beta );
d1084 1
a1084 1

@


14.3
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/util/pl-sgi.c,v 14.2 2004/12/21 03:45:41 butler Exp $ (BRL)";
d42 1
d44 2
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-sgi.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			P L - S G I . C
a33 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-sgi.c,v 1.3 2004/08/02 23:01:53 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/util/pl-sgi.c,v 1.2 2004/06/08 22:04:46 morrison Exp $ (BRL)";
d1217 10
@


1.2
log
@obliterate externs.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d24 1
a24 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/util/pl-sgi.c,v 11.8 2004/05/10 15:30:51 erikg Exp $ (BRL)";
a27 2


a30 1
#include "externs.h"
@

