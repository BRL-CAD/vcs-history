head	14.14;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.4
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.14
date	2007.11.21.20.49.08;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.11.21.19.09.24;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.07.26.01.13.53;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.27.01.41.34;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.32;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.49;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.21.19.00.27;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.17.17.18;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.30.21;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.06.09.12;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.08.20.31.24;	author kermit;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.17.56.22;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.13;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.05;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.14;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                        R L E - F B . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file rle-fb.c
 *
 *  Decode a Utah Raster Toolkit RLE image, and display on a
 *  BRL libfb(3) framebuffer.
 *
 *  Authors -
 *	Michael John Muuss
 *	Paul R. Stay
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.13 2007/11/21 19:09:24 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#include <stdlib.h>
#include <stdio.h>

#include "machine.h"
#include "bu.h"
#include "fb.h"
#include "rle.h"

static FILE	*infp;
static char	*infile;

static int	background[3];
static int	override_background;

unsigned char	*rows[4];		/* Character pointers for rle_getrow */

static unsigned char	*scan_buf;		/* single scanline buffer */
static ColorMap	cmap;

static char	*framebuffer = (char *)0;
static int	screen_width = 0;
static int	screen_height = 0;
static int	scr_xoff = 0;
static int	scr_yoff = 0;

static int	crunch;
static int	overlay;
static int	r_debug;

static char	usage[] = "\
Usage: rle-fb [-c -d -h -O] [-F framebuffer]  [-C r/g/b]\n\
	[-S squarescrsize] [-W scr_width] [-N scr_height]\n\
	[-X scr_xoff] [-Y scr_yoff] [file.rle]\n\
";

/*
 *			G E T _ A R G S
 */
static int
get_args(int argc, register char **argv)
{
	register int	c;

	while( (c = bu_getopt( argc, argv, "cOdhs:S:w:W:n:N:C:F:X:Y:" )) != EOF )  {
		switch( c )  {
		case 'O':
			overlay = 1;
			break;
		case 'd':
			r_debug = 1;
			break;
		case 'F':
			framebuffer = bu_optarg;
			break;
		case 'c':
			crunch = 1;
			break;
		case 'h':
			/* high-res */
			screen_height = screen_width = 1024;
			break;
		case 'S':
		case 's':
			/* square screen size */
			screen_height = screen_width = atoi(bu_optarg);
			break;
		case 'W':
		case 'w':
			screen_width = atoi(bu_optarg);
			break;
		case 'N':
		case 'n':
			screen_height = atoi(bu_optarg);
			break;
		case 'X':
			scr_xoff = atoi(bu_optarg);
			break;
		case 'Y':
			scr_yoff = atoi(bu_optarg);
			break;
		case 'C':
			{
				register char *cp = bu_optarg;
				register int *conp = background;

				/* premature null => atoi gives zeros */
				for( c=0; c < 3; c++ )  {
					*conp++ = atoi(cp);
					while( *cp && *cp++ != '/' ) ;
				}
				override_background = 1;
			}
			break;
		default:
		case '?':
			return	0;
		}
	}
	if( argv[bu_optind] != NULL )  {
		if( (infp = fopen( (infile=argv[bu_optind]), "r" )) == NULL )  {
			perror(infile);
			return	0;
		}
		bu_optind++;
	} else {
		infile = "-";
	}
	if( argc > ++bu_optind )
		(void) fprintf( stderr, "rle-fb:  excess arguments ignored\n" );

	if( isatty(fileno(infp)) )
		return 0;
	return	1;
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	FBIO	*fbp;
	register int i;
	int	file_width;		/* unclipped width of rectangle */
	int	file_skiplen;		/* # of pixels to skip on l.h.s. */
	int	screen_xbase;		/* screen X of l.h.s. of rectangle */
	int	screen_xlen;		/* clipped len of rectangle */
	int	ncolors;

	infp = stdin;
	if( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit( 1, NULL );
	}

	rle_dflt_hdr.rle_file = infp;
	if( rle_get_setup( &rle_dflt_hdr ) < 0 )  {
		fprintf(stderr, "rle-fb: Error reading setup information\n");
		bu_exit(1, NULL);
	}

	if (r_debug)  {
		fprintf( stderr,"Image bounds\n\tmin %d %d\n\tmax %d %d\n",
			rle_dflt_hdr.xmin, rle_dflt_hdr.ymin,
			rle_dflt_hdr.xmax, rle_dflt_hdr.ymax );
		fprintf(stderr, "%d color channels\n", rle_dflt_hdr.ncolors);
		fprintf(stderr,"%d color map channels\n", rle_dflt_hdr.ncmap);
		if ( rle_dflt_hdr.alpha )
			fprintf( stderr, "Alpha Channel present in input, ignored.\n");
		for( i=0; i < rle_dflt_hdr.ncolors; i++ )
			fprintf(stderr,"Background channel %d = %d\n",
				i, rle_dflt_hdr.bg_color[i] );
		rle_debug(1);
	}

	if( rle_dflt_hdr.ncmap == 0 )
		crunch = 0;

	/* Only interested in R, G, & B */
	RLE_CLR_BIT(rle_dflt_hdr, RLE_ALPHA);
	for (i = 3; i < rle_dflt_hdr.ncolors; i++)
		RLE_CLR_BIT(rle_dflt_hdr, i);
	ncolors = rle_dflt_hdr.ncolors > 3 ? 3 : rle_dflt_hdr.ncolors;

	/* Optional switch of library to overlay mode */
	if( overlay )  {
		rle_dflt_hdr.background = 1;		/* overlay */
		override_background = 0;
	}

	/* Optional background color override */
	if( override_background )  {
		for( i=0; i<ncolors; i++ )
			rle_dflt_hdr.bg_color[i] = background[i];
	}

	file_width = rle_dflt_hdr.xmax - rle_dflt_hdr.xmin + 1;

	/* If screen sizes not specified, try to display rectangle part > 0 */
	if( screen_width == 0 )  {
		screen_width = rle_dflt_hdr.xmax + 1;
		if( scr_xoff > 0 )
			screen_width += scr_xoff;
	}
	if( screen_height == 0 )  {
		screen_height = rle_dflt_hdr.ymax + 1;
		if( scr_yoff > 0 )
			screen_height += scr_yoff;
	}

	/* Incorporate command-line rectangle repositioning */
	rle_dflt_hdr.xmin += scr_xoff;
	rle_dflt_hdr.xmax += scr_xoff;
	rle_dflt_hdr.ymin += scr_yoff;

	/* Pretend saved image origin is at 0, clip & position in fb_write call */
	screen_xbase = rle_dflt_hdr.xmin;
	rle_dflt_hdr.xmax -= screen_xbase;
	rle_dflt_hdr.xmin = 0;

	if( (fbp = fb_open( framebuffer, screen_width, screen_height )) == FBIO_NULL )
		bu_exit(12, NULL);

	/* Honor original screen size desires, if set, unless they shrank */
	if( screen_width > 0 && fb_getwidth(fbp) < screen_width )
		screen_width = fb_getwidth(fbp);
	if( screen_height > 0 && fb_getheight(fbp) < screen_height )
		screen_height = fb_getheight(fbp);

	/* Discard any scanlines which exceed screen height */
	if( rle_dflt_hdr.ymax > screen_height-1 )
		rle_dflt_hdr.ymax = screen_height-1;

	/* Clip left edge */
	screen_xlen = rle_dflt_hdr.xmax + 1;
	file_skiplen = 0;
	if( screen_xbase < 0 )  {
		file_skiplen = -screen_xbase;
		screen_xbase = 0;
		screen_xlen -= file_skiplen;
	}
	/* Clip right edge */
	if( screen_xbase + screen_xlen > screen_width )
		screen_xlen = screen_width - screen_xbase;
	if( screen_xlen <= 0 ||
	    rle_dflt_hdr.ymin > screen_height ||
	    rle_dflt_hdr.ymax < 0 )  {
		fprintf(stderr,
		"rle-fb:  Warning:  RLE image rectangle entirely off screen\n");
		goto done;
	}

	scan_buf = (unsigned char *)malloc( sizeof(RGBpixel) * screen_width );

	for( i=0; i < ncolors; i++ )
		rows[i] = (unsigned char *)malloc((size_t)file_width);
	for( ; i < 3; i++ )
		rows[i] = rows[0];	/* handle monochrome images */

	/*
	 *  Import Utah color map, converting to libfb format.
	 *  Check for old format color maps, where high 8 bits
	 *  were zero, and correct them.
	 *  XXX need to handle < 3 channels of color map, by replication.
	 */
	if( rle_dflt_hdr.ncmap > 0 )  {
		register int maplen = (1 << rle_dflt_hdr.cmaplen);
		register int all = 0;
		for( i=0; i<256; i++ )  {
			cmap.cm_red[i] = rle_dflt_hdr.cmap[i];
			cmap.cm_green[i] = rle_dflt_hdr.cmap[i+maplen];
			cmap.cm_blue[i] = rle_dflt_hdr.cmap[i+2*maplen];
			all |= cmap.cm_red[i] | cmap.cm_green[i] |
				cmap.cm_blue[i];
		}
		if( (all & 0xFF00) == 0 && (all & 0x00FF) != 0 )  {
			/*  This is an old (Edition 2) color map.
			 *  Correct by shifting it left 8 bits.
			 */
			for( i=0; i<256; i++ )  {
				cmap.cm_red[i] <<= 8;
				cmap.cm_green[i] <<= 8;
				cmap.cm_blue[i] <<= 8;
			}
			fprintf(stderr,
				"rle-fb: correcting for old style colormap\n");
		}
	}
	if( rle_dflt_hdr.ncmap > 0 && !crunch )
		(void)fb_wmap( fbp, &cmap );
	else
		(void)fb_wmap( fbp, COLORMAP_NULL );

	/* Handle any lines below zero in y.  Decode and discard. */
	for( i = rle_dflt_hdr.ymin; i < 0; i++ )
		rle_getrow( &rle_dflt_hdr, rows );

	for( ; i <= rle_dflt_hdr.ymax; i++)  {
		register unsigned char	*pp = (unsigned char *)scan_buf;
		register rle_pixel	*rp = &(rows[0][file_skiplen]);
		register rle_pixel	*gp = &(rows[1][file_skiplen]);
		register rle_pixel	*bp = &(rows[2][file_skiplen]);
		register int		j;

		if( overlay )  {
			fb_read( fbp, screen_xbase, i, scan_buf, screen_xlen );
			for( j = 0; j < screen_xlen; j++ )  {
				*rp++ = *pp++;
				*gp++ = *pp++;
				*bp++ = *pp++;
			}
			pp = (unsigned char *)scan_buf;
			rp = &(rows[0][file_skiplen]);
			gp = &(rows[1][file_skiplen]);
			bp = &(rows[2][file_skiplen]);
		}

		rle_getrow(&rle_dflt_hdr, rows );

		/* Grumble, convert from Utah layout */
		if( !crunch )  {
			for( j = 0; j < screen_xlen; j++)  {
				*pp++ = *rp++;
				*pp++ = *gp++;
				*pp++ = *bp++;
			}
		} else {
			for( j = 0; j < screen_xlen; j++)  {
				*pp++ = cmap.cm_red[*rp++]>>8;
				*pp++ = cmap.cm_green[*gp++]>>8;
				*pp++ = cmap.cm_blue[*bp++]>>8;
			}
		}
		if( fb_write( fbp, screen_xbase, i, scan_buf, screen_xlen ) != screen_xlen )  break;
	}
done:
	fb_close( fbp );
	bu_exit(0, NULL);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@exit->bu_exit where applicable
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.12 2007/07/26 01:13:53 brlcad Exp $ (BRL)";
d173 1
a173 1
		bu_exit( 1, "" );
d179 1
a179 1
		bu_exit(1, "");
d242 1
a242 1
		bu_exit(12, "");
d358 1
a358 1
	bu_exit(0, "");
@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.11 2007/01/27 01:41:34 brlcad Exp $ (BRL)";
d173 1
a173 1
		exit( 1 );
d179 1
a179 1
		exit(1);
d242 1
a242 1
		exit(12);
d358 1
a358 1
	exit(0);
@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a29 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d32 1
a32 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.10 2007/01/23 01:13:32 brlcad Exp $ (BRL)";
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.9 2007/01/20 14:36:49 brlcad Exp $ (BRL)";
d226 1
a226 1
	    	screen_width = rle_dflt_hdr.xmax + 1;
d231 1
a231 1
	    	screen_height = rle_dflt_hdr.ymax + 1;
d273 1
a273 1
	    	fprintf(stderr,
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d37 1
a37 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.8 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
@


14.8
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.7 2005/10/23 04:44:30 brlcad Exp $ (BRL)";
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.6 2005/09/21 19:00:27 brlcad Exp $ (BRL)";
@


14.6
log
@needs bu.h for bu_getopt
@
text
@d30 1
a30 1
 *  
d35 1
a35 1
 *  
d38 1
a38 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.5 2005/09/21 17:17:18 brlcad Exp $ (BRL)";
d46 1
a46 1
                                                                                                                                                                            
d62 1
a62 1
	
@


14.5
log
@use bu_optarg, bu_optind and bu_getopt
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.4 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
d51 1
@


14.4
log
@update copyright to 2005
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.3 2004/12/21 07:18:57 morrison Exp $ (BRL)";
d89 1
a89 1
	while( (c = getopt( argc, argv, "cOdhs:S:w:W:n:N:C:F:X:Y:" )) != EOF )  {
d98 1
a98 1
			framebuffer = optarg;
d110 1
a110 1
			screen_height = screen_width = atoi(optarg);
d114 1
a114 1
			screen_width = atoi(optarg);
d118 1
a118 1
			screen_height = atoi(optarg);
d121 1
a121 1
			scr_xoff = atoi(optarg);
d124 1
a124 1
			scr_yoff = atoi(optarg);
d128 1
a128 1
				register char *cp = optarg;
d144 2
a145 2
	if( argv[optind] != NULL )  {
		if( (infp = fopen( (infile=argv[optind]), "r" )) == NULL )  {
d149 1
a149 1
		optind++;
d153 1
a153 1
	if( argc > ++optind )
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d35 1
a35 1
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d46 1
a46 1

a50 1
#include "bu.h"
d61 1
a61 1

d89 1
a89 1
	while( (c = bu_getopt( argc, argv, "cOdhs:S:w:W:n:N:C:F:X:Y:" )) != EOF )  {
d98 1
a98 1
			framebuffer = bu_optarg;
d110 1
a110 1
			screen_height = screen_width = atoi(bu_optarg);
d114 1
a114 1
			screen_width = atoi(bu_optarg);
d118 1
a118 1
			screen_height = atoi(bu_optarg);
d121 1
a121 1
			scr_xoff = atoi(bu_optarg);
d124 1
a124 1
			scr_yoff = atoi(bu_optarg);
d128 1
a128 1
				register char *cp = bu_optarg;
d144 2
a145 2
	if( argv[bu_optind] != NULL )  {
		if( (infp = fopen( (infile=argv[bu_optind]), "r" )) == NULL )  {
d149 1
a149 1
		bu_optind++;
d153 1
a153 1
	if( argc > ++bu_optind )
@


14.3
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.2 2004/12/18 06:09:12 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL license
@
text
@a35 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 2
/*
 *			R L E - F B . C
d40 1
a40 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 1.5 2004/09/08 20:31:24 kermit Exp $ (BRL)";
@


1.5
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d347 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 1.3 2004/06/09 17:56:22 erikg Exp $ (BRL)";
d29 1
@


1.3
log
@fix missing header issues
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 1.2 2004/06/08 22:04:13 morrison Exp $ (BRL)";
d23 1
a23 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d27 4
a30 2


@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Id: rle-fb.c,v 11.7 2004/05/10 15:30:42 erikg Exp $ (BRL)";
a31 1
#include "externs.h"
@

