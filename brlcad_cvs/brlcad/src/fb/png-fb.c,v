head	14.19;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.6
	rel-7-10-2:14.15
	rel-7-10-0:14.14
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.6.2.1
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.6
	rel-7-6-branch:14.6.0.6
	rel-7-6-0:14.6
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.4
	bobWinPort:14.6.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.19
date	2007.11.21.20.49.08;	author erikgreenwald;	state Exp;
branches;
next	14.18;

14.18
date	2007.11.21.19.09.24;	author erikgreenwald;	state Exp;
branches;
next	14.17;

14.17
date	2007.11.21.16.10.11;	author erikgreenwald;	state Exp;
branches;
next	14.16;

14.16
date	2007.11.05.04.38.17;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.04.14.01.16.02;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.34;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.32;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.49;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.28.00.36.28;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.12.23.21.26.29;	author bob1961;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.09.21.17.17.18;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.01.30.20.30.21;	author brlcad;	state Exp;
branches
	14.6.2.1
	14.6.6.1;
next	14.5;

14.5
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.06.44.32;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.06.09.12;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.13;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.04;	author morrison;	state Exp;
branches;
next	;

14.6.2.1
date	2005.09.08.16.23.20;	author bob1961;	state Exp;
branches;
next	;

14.6.6.1
date	2005.11.13.13.46.14;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                        P N G - F B . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file png-fb.c
 *
 *  Program to take PNG (Portable Network Graphics) files and send them to a framebuffer.
 *
 *  Author -
 *	John R. Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.18 2007/11/21 19:09:24 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>

#include "png.h"
#include "machine.h"
#include "bu.h"
#include "fb.h"

#include "pkg.h"

#ifdef HAVE_WINSOCK_H
#  include <winsock.h>
#  include <fcntl.h>
#endif

static png_color_16 def_backgrd={ 0,0,0,0,0 };
static unsigned char **scanline;	/* 1 scanline pixel buffer */
static int	scanbytes;		/* # of bytes of scanline */
static int	scanpix;		/* # of pixels of scanline */

static int	multiple_lines = 0;	/* Streamlined operation */

static char	*framebuffer = NULL;
static char	*file_name;
static FILE	*fp_in;

static int	fileinput = 0;		/* file of pipe on input? */

static int	scr_width = 0;		/* screen tracks file if not given */
static int	scr_height = 0;
static int	file_xoff=0, file_yoff=0;
static int	scr_xoff=0, scr_yoff=0;
static int	clear = 0;
static int	zoom = 0;
static int	inverse = 0;		/* Draw upside-down */
static int	one_line_only = 0;	/* insist on 1-line writes */
static int	verbose = 0;
static int	header_only = 0;

static double	def_screen_gamma=1.0;	/* Don't add more gamma, by default */
/* Particularly because on SGI, the system provides gamma correction,
 * so programs like this one don't have to.
 */

static char usage[] = "\
Usage: png-fb [-H -h -i -c -v -z -1] [-m #lines] [-F framebuffer]\n\
	[-g screen_gamma]\n\
	[-s squarefilesize] [-w file_width] [-n file_height]\n\
	[-x file_xoff] [-y file_yoff] [-X scr_xoff] [-Y scr_yoff]\n\
	[-S squarescrsize] [-W scr_width] [-N scr_height] [file.png]\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "1m:g:HhicvzF:s:x:y:X:Y:S:W:N:" )) != EOF )  {
		switch( c )  {
		case '1':
			one_line_only = 1;
			break;
		case 'm':
			multiple_lines = atoi(bu_optarg);
			break;
		case 'g':
			def_screen_gamma = atof(bu_optarg);
			break;
		case 'H':
			header_only = 1;
			break;
		case 'h':
			/* high-res */
			scr_height = scr_width = 1024;
			break;
		case 'i':
			inverse = 1;
			break;
		case 'c':
			clear = 1;
			break;
		case 'v':
			verbose = 1;
			break;
		case 'z':
			zoom = 1;
			break;
		case 'F':
			framebuffer = bu_optarg;
			break;
		case 'x':
			file_xoff = atoi(bu_optarg);
			break;
		case 'y':
			file_yoff = atoi(bu_optarg);
			break;
		case 'X':
			scr_xoff = atoi(bu_optarg);
			break;
		case 'Y':
			scr_yoff = atoi(bu_optarg);
			break;
		case 'S':
			scr_height = scr_width = atoi(bu_optarg);
			break;
		case 'W':
			scr_width = atoi(bu_optarg);
			break;
		case 'N':
			scr_height = atoi(bu_optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "-";
		fp_in = stdin;
	} else {
		file_name = argv[bu_optind];
		if( (fp_in = fopen(file_name, "rb")) == NULL )  {
			perror(file_name);
			(void)fprintf( stderr,
				"png-fb: cannot open \"%s\" for reading\n",
				file_name );
			bu_exit(1, NULL);
		}
		fileinput++;
	}

	if ( argc > ++bu_optind )
		(void)fprintf( stderr, "png-fb: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	register int y;
	register FBIO *fbp;
	int i;
	int	xout, yout, m, xstart;
	png_structp png_p;
	png_infop info_p;
	char header[8];
	int bit_depth;
	int color_type;
	png_color_16p input_backgrd;
	double gamma=1.0;
	int file_width, file_height;
	unsigned char *image;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit( 1, NULL );
	}

	if (pkg_init() != 0)
	    bu_exit(1, NULL);

	if (fread(header, 8, 1, fp_in) != 1) {
		pkg_terminate();
		bu_exit(EXIT_FAILURE,  "ERROR: Failed while reading file header!!!\n" );
	}

	if (!png_check_sig((png_bytep)header, 8)) {
		pkg_terminate();
		bu_exit(EXIT_FAILURE,  "This is not a PNG file!!!\n" );
	}

	png_p = png_create_read_struct( PNG_LIBPNG_VER_STRING, NULL, NULL, NULL );
	if (!png_p) {
		pkg_terminate();
		bu_exit(EXIT_FAILURE,  "png_create_read_struct() failed!!\n" );
	}

	info_p = png_create_info_struct( png_p );
	if (!info_p) {
		pkg_terminate();
		bu_exit(EXIT_FAILURE,  "png_create_info_struct() failed!!\n" );
	}

	png_init_io( png_p, fp_in );

	png_set_sig_bytes( png_p, 8 );

	png_read_info( png_p, info_p );

	color_type = png_get_color_type( png_p, info_p );

	png_set_expand( png_p );
	bit_depth = png_get_bit_depth( png_p, info_p );
	if( bit_depth == 16 )
		png_set_strip_16( png_p );

	if (color_type == PNG_COLOR_TYPE_GRAY ||
	    color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
		png_set_gray_to_rgb(png_p);

	file_width = png_get_image_width( png_p, info_p );
	file_height = png_get_image_height( png_p, info_p );

	if( verbose )
	{
		switch (color_type)
		{
			case PNG_COLOR_TYPE_GRAY:
				bu_log( "color type: b/w (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_GRAY_ALPHA:
				bu_log( "color type: b/w with alpha channel (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_PALETTE:
				bu_log( "color type: color palette (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_RGB:
				bu_log( "color type: RGB (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_RGB_ALPHA:
				bu_log( "color type: RGB with alpha channel (bit depth=%d)\n", bit_depth );
				break;
			default:
				bu_log( "Unrecognized color type (bit depth=%d)\n", bit_depth );
				break;
		}
		bu_log( "Image size: %d X %d\n", file_width, file_height );
	}

	if( header_only )  {
		fprintf(stdout, "WIDTH=%d HEIGHT=%d\n", file_width, file_height);
		pkg_terminate();
		bu_exit(0, NULL);
	}

	if( png_get_bKGD( png_p, info_p, &input_backgrd ) )
	{
		if( verbose && (color_type == PNG_COLOR_TYPE_GRAY_ALPHA ||
				color_type == PNG_COLOR_TYPE_RGB_ALPHA ) )
			bu_log( "background color: %d %d %d\n", input_backgrd->red, input_backgrd->green, input_backgrd->blue );
		png_set_background( png_p, input_backgrd, PNG_BACKGROUND_GAMMA_FILE, 1, 1.0 );
	}
	else
		png_set_background( png_p, &def_backgrd, PNG_BACKGROUND_GAMMA_FILE, 0, 1.0 );

	if( !png_get_gAMA( png_p, info_p, &gamma ) )
		gamma = 0.5;
	png_set_gamma( png_p, def_screen_gamma, gamma );
	if( verbose )
		bu_log( "file gamma: %f, additional screen gamma: %f\n",
			gamma, def_screen_gamma );

	if( verbose )
	{
		if( png_get_interlace_type( png_p, info_p ) == PNG_INTERLACE_NONE )
			bu_log( "not interlaced\n" );
		else
			bu_log( "interlaced\n" );
	}

	png_read_update_info( png_p, info_p );

	/* allocate memory for image */
	image = (unsigned char *)bu_calloc( 1, file_width*file_height*3, "image" );

	/* create rows array */
	scanline = (unsigned char **)bu_calloc( file_height, sizeof( unsigned char *), "scanline" );
	for( i=0 ; i<file_height ; i++ )
		scanline[i] = image+(i*file_width*3);

	png_read_image( png_p, scanline );

	if( verbose )
	{
		png_timep mod_time;
		png_textp text;
		int num_text;

		png_read_end(png_p, info_p );
		if( png_get_text( png_p, info_p, &text, &num_text ) )
		{
			int i;

			for( i=0 ; i<num_text ; i++ )
				bu_log( "%s: %s\n", text[i].key, text[i].text );
		}
		if( png_get_tIME( png_p, info_p, &mod_time ) )
			bu_log( "Last modified: %d/%d/%d %d:%d:%d\n", mod_time->month, mod_time->day,
				mod_time->year, mod_time->hour, mod_time->minute, mod_time->second );
	}

	/* If screen size was not set, track the file size */
	if( scr_width == 0 )
		scr_width = file_width;
	if( scr_height == 0 )
		scr_height = file_height;

	if( (fbp = fb_open( framebuffer, scr_width, scr_height )) == NULL )
		bu_exit(12, NULL);

	/* Get the screen size we were given */
	scr_width = fb_getwidth(fbp);
	scr_height = fb_getheight(fbp);

	/* compute number of pixels to be output to screen */
	if( scr_xoff < 0 )
	{
		xout = scr_width + scr_xoff;
		xstart = 0;
	}
	else
	{
		xout = scr_width - scr_xoff;
		xstart = scr_xoff;
	}

	if( xout < 0 )
		bu_exit(0, NULL);			/* off screen */
	if( xout > (file_width-file_xoff) )
		xout = (file_width-file_xoff);
	scanpix = xout;				/* # pixels on scanline */

	if( inverse )
		scr_yoff = (-scr_yoff);

	yout = scr_height - scr_yoff;
	if( yout < 0 )
		bu_exit(0, NULL);			/* off screen */
	if( yout > (file_height-file_yoff) )
		yout = (file_height-file_yoff);

	/* Only in the simplest case use multi-line writes */
	if( !one_line_only && multiple_lines > 0 && !inverse && !zoom &&
	    xout == file_width && file_xoff == 0 &&
	    file_width <= scr_width )  {
		scanpix *= multiple_lines;
	}

	scanbytes = scanpix * sizeof(RGBpixel);

	if( clear )  {
		fb_clear( fbp, PIXEL_NULL );
	}
	if( zoom ) {
		/* Zoom in, and center the display.  Use square zoom. */
		int	zoom;
		zoom = scr_width/xout;
		if( scr_height/yout < zoom )  zoom = scr_height/yout;
		if( inverse )  {
			fb_view( fbp,
				scr_xoff+xout/2, scr_height-1-(scr_yoff+yout/2),
				zoom, zoom );
		} else {
			fb_view( fbp,
				scr_xoff+xout/2, scr_yoff+yout/2,
				zoom, zoom );
		}
	}

	if( multiple_lines )  {
		/* Bottom to top with multi-line reads & writes */
		int	height=file_height;
		for( y = scr_yoff; y < scr_yoff + yout; y += multiple_lines )  {
			/* Don't over-write */
			if( y + height > scr_yoff + yout )
				height = scr_yoff + yout - y;
			if( height <= 0 )  break;
			m = fb_writerect( fbp, scr_xoff, y,
				file_width, height,
				scanline[file_yoff++] );
			if( m != file_width*height )  {
				fprintf(stderr,
					"png-fb: fb_writerect(x=%d, y=%d, w=%d, h=%d) failure, ret=%d, s/b=%d\n",
					scr_xoff, y,
					file_width, height, m, scanbytes );
			}
		}
	} else if( !inverse )  {
		/* Normal way -- bottom to top */
		int line=file_height-file_yoff-1;
		for( y = scr_yoff; y < scr_yoff + yout; y++ )  {
			m = fb_write( fbp, xstart, y, scanline[line--]+(3*file_xoff), xout );
			if( m != xout )  {
				fprintf(stderr,
					"png-fb: fb_write(x=%d, y=%d, npix=%d) ret=%d, s/b=%d\n",
					scr_xoff, y, xout,
					m, xout );
			}
		}
	}  else  {
		/* Inverse -- top to bottom */
		int line=file_height-file_yoff-1;
		for( y = scr_height-1-scr_yoff; y >= scr_height-scr_yoff-yout; y-- )  {
			m = fb_write( fbp, xstart, y, scanline[line--]+(3*file_xoff), xout );
			if( m != xout )  {
				fprintf(stderr,
					"png-fb: fb_write(x=%d, y=%d, npix=%d) ret=%d, s/b=%d\n",
					scr_xoff, y, xout,
					m, xout );
			}
		}
	}
	if( fb_close( fbp ) < 0 )  {
		fprintf(stderr, "png-fb: Warning: fb_close() error\n");
	}
	pkg_terminate();
	bu_exit(0, NULL);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@exit->bu_exit where applicable
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.17 2007/11/21 16:10:11 erikgreenwald Exp $ (BRL)";
d167 1
a167 1
			bu_exit(1, "");
d197 1
a197 1
		bu_exit( 1, "" );
d201 1
a201 1
	    bu_exit(1, "");
d274 1
a274 1
		bu_exit(0, "");
d340 1
a340 1
		bu_exit(12, "");
d359 1
a359 1
		bu_exit(0, "");			/* off screen */
d369 1
a369 1
		bu_exit(0, "");			/* off screen */
d448 1
a448 1
	bu_exit(0, "");
@


14.17
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.16 2007/11/05 04:38:17 brlcad Exp $ (BRL)";
d167 1
a167 1
			exit(1);
d197 1
a197 1
		exit( 1 );
d201 1
a201 1
	    exit(1);
d274 1
a274 1
		exit(0);
d340 1
a340 1
		exit(12);
d359 1
a359 1
		exit(0);			/* off screen */
d369 1
a369 1
		exit(0);			/* off screen */
d448 1
a448 1
	exit(0);
@


14.16
log
@use the feature-specific HAVE_WINSOCK_H header define instead of platform-specific defines
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.15 2007/04/14 01:16:02 brlcad Exp $ (BRL)";
d205 1
a205 1
		bu_bomb( "ERROR: Failed while reading file header!!!\n" );
d210 1
a210 1
		bu_bomb( "This is not a PNG file!!!\n" );
d216 1
a216 1
		bu_bomb( "png_create_read_struct() failed!!\n" );
d222 1
a222 1
		bu_bomb( "png_create_info_struct() failed!!\n" );
@


14.15
log
@remove the WIN32 conditionals relating to the binary mode specifier on file opens.  just keep the rb/wb mode since ISO/IEC 9899:1990 does specify it.
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.14 2007/01/27 01:41:34 brlcad Exp $ (BRL)";
d49 1
a49 1
#ifdef _WIN32
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.13 2007/01/23 01:13:32 brlcad Exp $ (BRL)";
a161 1
#ifdef _WIN32
a162 3
#else
		if( (fp_in = fopen(file_name, "r")) == NULL )  {
#endif
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.12 2007/01/20 14:36:49 brlcad Exp $ (BRL)";
d381 1
a381 1
	    	scanpix *= multiple_lines;
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.11 2006/01/28 00:36:28 brlcad Exp $ (BRL)";
@


14.11
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.10 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2006
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.9 2005/12/23 21:26:29 bob1961 Exp $ (BRL)";
d40 2
a42 2

#include <stdio.h>
@


14.9
log
@Merge of bobWinPort
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.8 2005/10/23 04:44:30 brlcad Exp $ (BRL)";
@


14.8
log
@trailing ws
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.7 2005/09/21 17:17:18 brlcad Exp $ (BRL)";
d48 7
d163 3
d167 1
d205 5
a209 1
	if( fread( header, 8, 1, fp_in ) != 1 )
d211 1
d213 2
a214 1
	if( !png_check_sig( (png_bytep)header, 8 ) )
d216 1
d219 2
a220 1
	if( !png_p )
d222 1
d225 2
a226 1
	if( !info_p )
d228 1
d278 1
d452 1
@


14.7
log
@use bu_optarg, bu_optind and bu_getopt
@
text
@d23 1
a23 1
 *  
d25 1
a25 1
 *  
d28 1
a28 1
 *  
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.6 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
@


14.6
log
@update copyright to 2005
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.5 2004/12/21 07:32:29 morrison Exp $ (BRL)";
d89 1
a89 1
	while ( (c = getopt( argc, argv, "1m:g:HhicvzF:s:x:y:X:Y:S:W:N:" )) != EOF )  {
d95 1
a95 1
			multiple_lines = atoi(optarg);
d98 1
a98 1
			def_screen_gamma = atof(optarg);
d120 1
a120 1
			framebuffer = optarg;
d123 1
a123 1
			file_xoff = atoi(optarg);
d126 1
a126 1
			file_yoff = atoi(optarg);
d129 1
a129 1
			scr_xoff = atoi(optarg);
d132 1
a132 1
			scr_yoff = atoi(optarg);
d135 1
a135 1
			scr_height = scr_width = atoi(optarg);
d138 1
a138 1
			scr_width = atoi(optarg);
d141 1
a141 1
			scr_height = atoi(optarg);
d149 1
a149 1
	if( optind >= argc )  {
d155 1
a155 1
		file_name = argv[optind];
d166 1
a166 1
	if ( argc > ++optind )
@


14.6.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d23 1
a23 1
 *
d25 1
a25 1
 *
d28 1
a28 1
 *
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d89 1
a89 1
	while ( (c = bu_getopt( argc, argv, "1m:g:HhicvzF:s:x:y:X:Y:S:W:N:" )) != EOF )  {
d95 1
a95 1
			multiple_lines = atoi(bu_optarg);
d98 1
a98 1
			def_screen_gamma = atof(bu_optarg);
d120 1
a120 1
			framebuffer = bu_optarg;
d123 1
a123 1
			file_xoff = atoi(bu_optarg);
d126 1
a126 1
			file_yoff = atoi(bu_optarg);
d129 1
a129 1
			scr_xoff = atoi(bu_optarg);
d132 1
a132 1
			scr_yoff = atoi(bu_optarg);
d135 1
a135 1
			scr_height = scr_width = atoi(bu_optarg);
d138 1
a138 1
			scr_width = atoi(bu_optarg);
d141 1
a141 1
			scr_height = atoi(bu_optarg);
d149 1
a149 1
	if( bu_optind >= argc )  {
d155 1
a155 1
		file_name = argv[bu_optind];
d166 1
a166 1
	if ( argc > ++bu_optind )
@


14.6.2.1
log
@Mods for windows port
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/png-fb.c,v 14.6 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
a47 7
#include "pkg.h"

#ifdef _WIN32
#  include <winsock.h>
#  include <fcntl.h>
#endif

d89 1
a89 1
	while ( (c = bu_getopt( argc, argv, "1m:g:HhicvzF:s:x:y:X:Y:S:W:N:" )) != EOF )  {
d95 1
a95 1
			multiple_lines = atoi(bu_optarg);
d98 1
a98 1
			def_screen_gamma = atof(bu_optarg);
d120 1
a120 1
			framebuffer = bu_optarg;
d123 1
a123 1
			file_xoff = atoi(bu_optarg);
d126 1
a126 1
			file_yoff = atoi(bu_optarg);
d129 1
a129 1
			scr_xoff = atoi(bu_optarg);
d132 1
a132 1
			scr_yoff = atoi(bu_optarg);
d135 1
a135 1
			scr_height = scr_width = atoi(bu_optarg);
d138 1
a138 1
			scr_width = atoi(bu_optarg);
d141 1
a141 1
			scr_height = atoi(bu_optarg);
d149 1
a149 1
	if( bu_optind >= argc )  {
d155 1
a155 4
		file_name = argv[bu_optind];
#ifdef _WIN32
		if( (fp_in = fopen(file_name, "rb")) == NULL )  {
#else
a156 1
#endif
d166 1
a166 1
	if ( argc > ++bu_optind )
d194 1
a194 5
	if (pkg_init() != 0)
	    exit(1);

	if (fread(header, 8, 1, fp_in) != 1) {
		pkg_terminate();
a195 1
	}
d197 1
a197 2
	if (!png_check_sig((png_bytep)header, 8)) {
		pkg_terminate();
a198 1
	}
d201 1
a201 2
	if (!png_p) {
		pkg_terminate();
a202 1
	}
d205 1
a205 2
	if (!info_p) {
		pkg_terminate();
a206 1
	}
a255 1
		pkg_terminate();
a428 1
	pkg_terminate();
@


14.5
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/png-fb.c,v 14.4 2004/12/21 06:58:41 morrison Exp $ (BRL)";
@


14.4
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a31 2
 *  
 *
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/png-fb.c,v 14.3 2004/12/21 06:44:32 morrison Exp $ (BRL)";
@


14.3
log
@remove the old distribution notice section
@
text
@a33 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1998-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/png-fb.c,v 14.2 2004/12/18 06:09:12 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL license
@
text
@a32 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Package" agreement.
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/png-fb.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 2
/*
 *  			P N G - F B . C
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/png-fb.c,v 1.3 2004/08/02 23:01:47 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/png-fb.c,v 1.2 2004/06/08 22:04:13 morrison Exp $ (BRL)";
d420 10
@


1.2
log
@obliterate externs.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/png-fb.c,v 11.14 2004/05/10 15:30:42 erikg Exp $ (BRL)";
a35 1
#include "externs.h"			/* For getopt */
@

