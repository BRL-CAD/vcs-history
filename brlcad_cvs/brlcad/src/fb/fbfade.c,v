head	14.20;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	stable-branch:14.3
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.6
	rel-7-0-branch:1.6.0.2
	rel-7-0:1.6;
locks; strict;
comment	@ * @;


14.20
date	2007.12.22.19.45.08;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.12.20.20.31.42;	author bob1961;	state Exp;
branches;
next	14.18;

14.18
date	2007.12.06.14.44.25;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.12.03.22.57.58;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.12.03.22.27.40;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.11.21.20.49.07;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.19.09.24;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.10.28.17.27.19;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.09.15.16.23.06;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.04.18.02.54.01;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.27;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.48;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.21.19.00.27;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.17.17.18;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.09.05.07.46;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.30.21;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.18.06.09.12;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.08.20.31.24;	author kermit;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.17.56.22;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.11;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.01;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.20
log
@rand() is c89/c90 so don't need/want to check for it.  check for random() instead.
@
text
@/*                        F B F A D E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file fbfade.c
	fbfade -- "twinkle" fade in or out a frame buffer image

	created:	89/04/29	D A Gwyn with help from G S Moss

	Typical compilation:	cc -O -I/usr/include/brlcad -o fbfade \
					fbfade.c /usr/brlcad/lib/libfb.a
	Add -DNO_DRAND48, -DNO_VFPRINTF, or -DNO_STRRCHR if drand48(),
	vfprintf(), or strrchr() are not present in your C library
	(e.g. on 4BSD-based systems).

	This program displays a frame buffer image gradually, randomly
	selecting the pixel display sequence.  (Suggested by Gary Moss.)
	It requires fast single-pixel write support for best effect.

	Options:

	-h		assumes 1024x1024 default input size instead of 512x512

	-f in_fb_file	reads from the specified frame buffer file instead
			of assuming constant black ("fade out") value

	-s size		input size (width & height)

	-w width	input width

	-n height	input height

	-F out_fb_file	writes to the specified frame buffer file instead
			of the one specified by the FB_FILE environment
			variable (the default frame buffer, if no FB_FILE)

	-S size		output size (width & height)

	-W width	output width

	-N height	output height

	out_fb_file	same as -F out_fb_file, for convenience
*/
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.19 2007/12/20 20:31:42 bob1961 Exp $ (BRL)";
#endif

#define	USAGE1 "fbfade [ -s size ] [ -w width ] [ -n height ] [ -f in_fb_file ]"
#define	USAGE2	\
	"\t[ -h ] [ -S size ] [ -W width ] [ -N height ] [ [ -F ] out_fb_file ]"
#define	OPTSTR	"f:F:hn:N:s:S:w:W:"

#include "common.h"

#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"
#include "fb.h"			/* BRL-CAD package libfb.a interface */


#define SIZE_T size_t
typedef int bool_t;

static bool_t	hires = 0;		/* set for 1Kx1K; clear for 512x512 */
static char	*in_fb_file = NULL;	/* input image name */
static char	*out_fb_file = NULL;	/* output frame buffer name */
static FBIO	*fbp = FBIO_NULL;	/* libfb input/output handle */
static int	src_width = 0,
    src_height = 0;		/* input image size */
static int	dst_width = 0,
    dst_height = 0;		/* output frame buffer size */
static RGBpixel	*pix;			/* input image */
static RGBpixel	bg = { 0, 0, 0 };	/* background */

/* in ioutil.c */
void Message( const char *format, ... );
void Fatal( FBIO *fbp, const char *format, ... );


#ifndef HAVE_DRAND48
/* Simulate drand48() using 31-bit random() assumed to exist (e.g. in 4BSD): */

double
drand48()
{
#ifdef HAVE_RANDOM
    return (double)random() / 2147483648.0;	/* range [0,1) */
#else
    return (double)rand() / (double)RAND_MAX;	/* range [0,1) */
#endif
}
#endif


static void
Sig_Catcher(int sig)
{
    (void)signal( sig, SIG_DFL );

    /* The following is not guaranteed to work, but it's worth a try. */
    Fatal(fbp, "Interrupted by signal %d", sig );
}


int
main(int argc, char **argv)
{
    /* Plant signal catcher. */
    {
	static int	getsigs[] =	/* signals to catch */
	    {
#ifdef SIGHUP
		SIGHUP,			/* hangup */
#endif
#ifdef SIGINT
		SIGINT,			/* interrupt */
#endif
#ifdef SIGQUIT
		SIGQUIT,		/* quit */
#endif
#ifdef SIGPIPE
		SIGPIPE,		/* write on a broken pipe */
#endif
#ifdef SIGTERM
		SIGTERM,		/* software termination signal */
#endif
		0
	    };
	register int	i;

	for ( i = 0; getsigs[i] != 0; ++i )
	    if ( signal( getsigs[i], SIG_IGN ) != SIG_IGN )
		(void)signal( getsigs[i], Sig_Catcher );
    }

    /* Process arguments. */
    {
	register int	c;
	register bool_t	errors = 0;

	while ( (c = bu_getopt( argc, argv, OPTSTR )) != EOF )
	    switch( c )
	    {
		default:	/* '?': invalid option */
		    errors = 1;
		    break;

		case 'f':	/* -f in_fb_file */
		    in_fb_file = bu_optarg;
		    break;

		case 'F':	/* -F out_fb_file */
		    out_fb_file = bu_optarg;
		    break;

		case 'h':	/* -h */
		    hires = 1;
		    break;

		case 'n':	/* -n height */
		    if ( (src_height = atoi( bu_optarg )) <= 0 )
			errors = 1;

		    break;

		case 'N':	/* -N height */
		    if ( (dst_height = atoi( bu_optarg )) <= 0 )
			errors = 1;

		    break;

		case 's':	/* -s size */
		    if ( (src_height = src_width = atoi( bu_optarg ))
			 <= 0
			)
			errors = 1;

		    break;

		case 'S':	/* -S size */
		    if ( (dst_height = dst_width = atoi( bu_optarg ))
			 <= 0
			)
			errors = 1;

		    break;

		case 'w':	/* -w width */
		    if ( (src_width = atoi( bu_optarg )) <= 0 )
			errors = 1;

		    break;

		case 'W':	/* -W width */
		    if ( (dst_width = atoi( bu_optarg )) <= 0 )
			errors = 1;

		    break;
	    }

	if ( errors )
	    Fatal(fbp, "Usage: %s\n%s", USAGE1, USAGE2 );
    }

    if ( bu_optind < argc )		/* out_fb_file */
    {
	if ( bu_optind < argc - 1 || out_fb_file != NULL )
	{
	    Message( "Usage: %s\n%s", USAGE1, USAGE2 );
	    Fatal(fbp, "Can't handle multiple output frame buffers!" );
	}

	out_fb_file = argv[bu_optind];
    }

    /* Open frame buffer for unbuffered input. */

    if ( src_width == 0 )
	src_width = hires ? 1024 : 512;		/* starting default */

    if ( src_height == 0 )
	src_height = hires ? 1024 : 512;	/* starting default */

    if ( in_fb_file != NULL ) {
	if ( (fbp = fb_open( in_fb_file, src_width, src_height ))
	     == FBIO_NULL
	    )
	    Fatal(fbp, "Couldn't open input frame buffer" );
	else	{
	    register int	y;
	    register int	wt = fb_getwidth( fbp );
	    register int	ht = fb_getheight( fbp );

	    /* Use smaller actual input size instead of request. */

	    if ( wt < src_width )
		src_width = wt;

	    if ( ht < src_height )
		src_height = ht;

	    if ( (long)(SIZE_T)((long)src_width * (long)src_height
				* (long)sizeof(RGBpixel)
		     )
		 != (long)src_width * (long)src_height
		 * (long)sizeof(RGBpixel)
		)
		Fatal(fbp, "Integer overflow, malloc unusable" );

	    if ( (pix = (RGBpixel *)malloc( (SIZE_T)src_width
					    * (SIZE_T)src_height
					    * sizeof(RGBpixel)
		      )
		     ) == NULL
		)
		Fatal(fbp, "Not enough memory for pixel array" );

	    for ( y = 0; y < src_height; ++y )
		if ( fb_read( fbp, 0, y, pix[y * src_width],
			      src_width
			 ) == -1
		    )
		    Fatal(fbp, "Error reading raster" );

	    if ( fb_close( fbp ) == -1 )
	    {
		fbp = FBIO_NULL;	/* avoid second try */
		Fatal(fbp, "Error closing input frame buffer" );
	    }
	}
    }

    /* Open frame buffer for unbuffered output. */

    if ( dst_width == 0 )
	dst_width = src_width;		/* default */

    if ( dst_height == 0 )
	dst_height = src_height;	/* default */

    if ( (fbp = fb_open( out_fb_file, dst_width, dst_height )) == FBIO_NULL
	)
	Fatal(fbp, "Couldn't open output frame buffer" );
    else	{
	register int	wt = fb_getwidth( fbp );
	register int	ht = fb_getheight( fbp );

	/* Use smaller actual frame buffer size for output. */

	if ( wt < dst_width )
	    dst_width = wt;

	if ( ht < dst_height )
	    dst_height = ht;

	/* Avoid selecting pixels outside the input image. */

	if ( dst_width > src_width )
	    dst_width = src_width;

	if ( dst_height > src_height )
	    dst_height = src_height;
    }

    /* The following is probably an optimally fast shuffling algorithm;
       unfortunately, it requires a huge auxiliary array.  The way it
       works is to start with an array of all pixel indices, then repeat:
       select an entry at random from the array, output that index, replace
       that entry with the last array entry, then reduce the array size. */
    {
	register long	*loc;		/* keeps track of pixel shuffling */
	register long	wxh = (long)dst_width * (long)dst_height;
	/* down-counter */

	if ( (long)(SIZE_T)(wxh * (long)sizeof(long))
	     != wxh * (long)sizeof(long)
	    )
	    Fatal(fbp, "Integer overflow, malloc unusable" );

	if ( (loc = (long *)malloc( (SIZE_T)wxh * sizeof(long) )) == NULL )
	    Fatal(fbp, "Not enough memory for location array" );

	/* Initialize pixel location array to sequential order. */

	while ( --wxh >= 0L )
	    loc[wxh] = wxh;

	/* Select a pixel at random, paint it, and adjust the location array. */

	for ( wxh = (long)dst_width * (long)dst_height; --wxh >= 0L; )
	{
	    register long	r = (long)((double)wxh * drand48());
	    register long	x = loc[r] % dst_width;
	    register long	y = loc[r] / dst_width;

	    if ( fb_write( fbp, (int)x, (int)y,
			   in_fb_file == NULL ? bg
			   : pix[x + y * src_width],
			   1
		     ) == -1
		)
		Fatal(fbp, "Error writing pixel" );

	    loc[r] = loc[wxh];	/* track the shuffle */
	}
    }

    /* Close the frame buffer. */

    if ( fb_close( fbp ) == -1 ) {
	fbp = FBIO_NULL;	/* avoid second try */
	Fatal(fbp, "Error closing output frame buffer" );
    }

    bu_exit( EXIT_SUCCESS, NULL );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.19
log
@Mods to get things compiling on windows.
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.18 2007/12/06 14:44:25 brlcad Exp $ (BRL)";
d112 3
a114 1
#ifdef HAVE_RAND
a115 4
#else
    extern long	random();

    return (double)random() / 2147483648.0;	/* range [0,1) */
@


14.18
log
@refactor the handful of failure and printing functions that are common to gif-fb, fbfade, and fbstretch into their own ioutil.c file to reduce the repetition. clean-up the interface while we're at it with some constness.
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.17 2007/12/03 22:57:58 brlcad Exp $ (BRL)";
d112 3
d118 1
d140 1
d142 2
d145 2
d148 2
d151 2
d154 1
@


14.17
log
@c89 simplification.  assume stdarg is a given.
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.16 2007/12/03 22:27:40 brlcad Exp $ (BRL)";
a89 1
static char	*arg0;			/* argv[0] for error message */
d101 4
a117 46
static char *
Simple(char *path)
{
    register char	*s;		/* -> past last '/' in path */

    return (s = strrchr( path, '/' )) == NULL || *++s == '\0' ? path : s;
}


static void
VMessage(const char *format, va_list ap)
{
    (void)fprintf( stderr, "%s: ", arg0 );
    (void)vfprintf( stderr, format, ap );
    (void)putc( '\n', stderr );
    (void)fflush( stderr );
}


static void
Message( const char *format, ... )
{
    va_list		ap;

    va_start( ap, format );
    VMessage( format, ap );
    va_end( ap );
}


static void
Fatal( const char *format, ... )
{
    va_list		ap;

    va_start( ap, format );
    VMessage( format, ap );
    va_end( ap );

    if ( fbp != FBIO_NULL && fb_close( fbp ) == -1 )
	Message( "Error closing frame buffer" );

    bu_exit( EXIT_FAILURE, NULL );
    /*NOTREACHED*/
}

d125 1
a125 1
    Fatal( "Interrupted by signal %d", sig );
a150 3

    arg0 = Simple( argv[0] );	/* save for possible error message */

d216 1
a216 1
	    Fatal( "Usage: %s\n%s", USAGE1, USAGE2 );
d224 1
a224 1
	    Fatal( "Can't handle multiple output frame buffers!" );
d242 1
a242 1
	    Fatal( "Couldn't open input frame buffer" );
d262 1
a262 1
		Fatal( "Integer overflow, malloc unusable" );
d270 1
a270 1
		Fatal( "Not enough memory for pixel array" );
d277 1
a277 1
		    Fatal( "Error reading raster" );
d282 1
a282 1
		Fatal( "Error closing input frame buffer" );
d297 1
a297 1
	Fatal( "Couldn't open output frame buffer" );
d332 1
a332 1
	    Fatal( "Integer overflow, malloc unusable" );
d335 1
a335 1
	    Fatal( "Not enough memory for location array" );
d356 1
a356 1
		Fatal( "Error writing pixel" );
d366 1
a366 1
	Fatal( "Error closing output frame buffer" );
@


14.16
log
@const labelification
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.15 2007/11/21 20:49:07 erikgreenwald Exp $ (BRL)";
d72 5
a76 4
#include	<signal.h>
#include	<stdlib.h>
#include	<stdio.h>
#include	<string.h>
a80 5
#ifdef HAVE_STDARG_H
#  include	<stdarg.h>
#else
#  include	<varargs.h>
#endif
@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.14 2007/11/21 19:09:24 erikgreenwald Exp $ (BRL)";
d129 1
a129 1
VMessage(char *format, va_list ap)
d139 1
a139 1
Message( char *format, ... )
d150 1
a150 1
Fatal( char *format, ... )
@


14.14
log
@exit->bu_exit where applicable
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.13 2007/10/28 17:27:19 brlcad Exp $ (BRL)";
d161 1
a161 1
    bu_exit( EXIT_FAILURE, "" );
d419 1
a419 1
    bu_exit( EXIT_SUCCESS, "" );
@


14.13
log
@remove the non-stdarg interfaces, we can assume c89 now. c-set-style stroustrup ws too.
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.12 2007/09/15 16:23:06 brlcad Exp $ (BRL)";
d161 1
a161 1
    exit( EXIT_FAILURE );
d419 1
a419 1
    exit( EXIT_SUCCESS );
@


14.12
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.11 2007/04/18 02:54:01 brlcad Exp $ (BRL)";
d100 1
a100 1
		src_height = 0;		/* input image size */
d102 1
a102 1
		dst_height = 0;		/* output frame buffer size */
d112 2
a113 2
	{
	extern long	random();
d115 2
a116 2
	return (double)random() / 2147483648.0;	/* range [0,1) */
	}
d122 1
a122 1
	register char	*s;		/* -> past last '/' in path */
d124 2
a125 2
	return (s = strrchr( path, '/' )) == NULL || *++s == '\0' ? path : s;
	}
d131 5
a135 12
	(void)fprintf( stderr, "%s: ", arg0 );
#ifndef HAVE_VPRINTF
	(void)fprintf( stderr, format,	/* kludge city */
		       ((int *)ap)[0], ((int *)ap)[1],
		       ((int *)ap)[2], ((int *)ap)[3]
		     );
#else
	(void)vfprintf( stderr, format, ap );
#endif
	(void)putc( '\n', stderr );
	(void)fflush( stderr );
	}
a137 1
#if defined(HAVE_STDARG_H)
d140 2
a141 10
#else
static void
Message( va_alist )
	va_dcl
#endif
	{
#if !defined(HAVE_STDARG_H)
	register char	*format;	/* must be picked up by va_arg() */
#endif
	va_list		ap;
d143 4
a146 9
#if defined(HAVE_STDARG_H)
	va_start( ap, format );
#else
	va_start( ap );
	format = va_arg( ap, char * );
#endif
	VMessage( format, ap );
	va_end( ap );
	}
a148 1
#if defined(HAVE_STDARG_H)
d151 2
a152 22
#else
static void
Fatal( va_alist )
	va_dcl
#endif
	{
#if !defined(HAVE_STDARG_H)
	register char	*format;	/* must be picked up by va_arg() */
#endif
	va_list		ap;

#if defined(HAVE_STDARG_H)
	va_start( ap, format );
#else
	va_start( ap );
	format = va_arg( ap, char * );
#endif
	VMessage( format, ap );
	va_end( ap );

	if ( fbp != FBIO_NULL && fb_close( fbp ) == -1 )
		Message( "Error closing frame buffer" );
d154 10
a163 3
	exit( EXIT_FAILURE );
	/*NOTREACHED*/
	}
d169 1
a169 1
	(void)signal( sig, SIG_DFL );
d171 3
a173 3
	/* The following is not guaranteed to work, but it's worth a try. */
	Fatal( "Interrupted by signal %d", sig );
	}
d179 2
a180 2
	/* Plant signal catcher. */
	{
d182 1
a182 1
		{
d189 1
a189 1
		};
d193 5
a197 3
		if ( signal( getsigs[i], SIG_IGN ) != SIG_IGN )
			(void)signal( getsigs[i], Sig_Catcher );
	}
d199 1
a199 1
	/* Process arguments. */
d201 3
a203 1
	arg0 = Simple( argv[0] );	/* save for possible error message */
d205 6
a210 3
	{
		register int	c;
		register bool_t	errors = 0;
d212 3
a214 6
		while ( (c = bu_getopt( argc, argv, OPTSTR )) != EOF )
			switch( c )
				{
			default:	/* '?': invalid option */
				errors = 1;
				break;
d216 3
a218 3
			case 'f':	/* -f in_fb_file */
				in_fb_file = bu_optarg;
				break;
d220 3
a222 3
			case 'F':	/* -F out_fb_file */
				out_fb_file = bu_optarg;
				break;
d224 3
a226 3
			case 'h':	/* -h */
				hires = 1;
				break;
d228 1
a228 3
			case 'n':	/* -n height */
				if ( (src_height = atoi( bu_optarg )) <= 0 )
					errors = 1;
d230 3
a232 1
				break;
d234 1
a234 3
			case 'N':	/* -N height */
				if ( (dst_height = atoi( bu_optarg )) <= 0 )
					errors = 1;
d236 5
a240 1
				break;
d242 1
a242 5
			case 's':	/* -s size */
				if ( (src_height = src_width = atoi( bu_optarg ))
				  <= 0
				   )
					errors = 1;
d244 5
a248 1
				break;
d250 1
a250 5
			case 'S':	/* -S size */
				if ( (dst_height = dst_width = atoi( bu_optarg ))
				  <= 0
				   )
					errors = 1;
d252 3
a254 1
				break;
d256 1
a256 3
			case 'w':	/* -w width */
				if ( (src_width = atoi( bu_optarg )) <= 0 )
					errors = 1;
d258 3
a260 1
				break;
d262 2
a263 3
			case 'W':	/* -W width */
				if ( (dst_width = atoi( bu_optarg )) <= 0 )
					errors = 1;
d265 3
a267 2
				break;
				}
d269 6
a274 2
		if ( errors )
			Fatal( "Usage: %s\n%s", USAGE1, USAGE2 );
d277 57
a333 66
	if ( bu_optind < argc )		/* out_fb_file */
		{
		if ( bu_optind < argc - 1 || out_fb_file != NULL )
			{
			Message( "Usage: %s\n%s", USAGE1, USAGE2 );
			Fatal( "Can't handle multiple output frame buffers!" );
			}

		out_fb_file = argv[bu_optind];
		}

	/* Open frame buffer for unbuffered input. */

	if ( src_width == 0 )
		src_width = hires ? 1024 : 512;		/* starting default */

	if ( src_height == 0 )
		src_height = hires ? 1024 : 512;	/* starting default */

	if ( in_fb_file != NULL ) {
		if ( (fbp = fb_open( in_fb_file, src_width, src_height ))
		  == FBIO_NULL
		   )
			Fatal( "Couldn't open input frame buffer" );
		else	{
			register int	y;
			register int	wt = fb_getwidth( fbp );
			register int	ht = fb_getheight( fbp );

			/* Use smaller actual input size instead of request. */

			if ( wt < src_width )
				src_width = wt;

			if ( ht < src_height )
				src_height = ht;

			if ( (long)(SIZE_T)((long)src_width * (long)src_height
					   * (long)sizeof(RGBpixel)
					   )
			  != (long)src_width * (long)src_height
					     * (long)sizeof(RGBpixel)
			   )
				Fatal( "Integer overflow, malloc unusable" );

			if ( (pix = (RGBpixel *)malloc( (SIZE_T)src_width
						      * (SIZE_T)src_height
						      * sizeof(RGBpixel)
						      )
			     ) == NULL
			   )
				Fatal( "Not enough memory for pixel array" );

			for ( y = 0; y < src_height; ++y )
				if ( fb_read( fbp, 0, y, pix[y * src_width],
					      src_width
					    ) == -1
				   )
					Fatal( "Error reading raster" );

			if ( fb_close( fbp ) == -1 )
				{
				fbp = FBIO_NULL;	/* avoid second try */
				Fatal( "Error closing input frame buffer" );
				}
			}
d335 1
d337 1
a337 1
	/* Open frame buffer for unbuffered output. */
d339 2
a340 2
	if ( dst_width == 0 )
		dst_width = src_width;		/* default */
d342 2
a343 2
	if ( dst_height == 0 )
		dst_height = src_height;	/* default */
d345 6
a350 6
	if ( (fbp = fb_open( out_fb_file, dst_width, dst_height )) == FBIO_NULL
	   )
		Fatal( "Couldn't open output frame buffer" );
	else	{
		register int	wt = fb_getwidth( fbp );
		register int	ht = fb_getheight( fbp );
d352 1
a352 1
		/* Use smaller actual frame buffer size for output. */
d354 2
a355 2
		if ( wt < dst_width )
			dst_width = wt;
d357 2
a358 2
		if ( ht < dst_height )
			dst_height = ht;
d360 1
a360 1
		/* Avoid selecting pixels outside the input image. */
d362 2
a363 2
		if ( dst_width > src_width )
			dst_width = src_width;
d365 3
a367 3
		if ( dst_height > src_height )
			dst_height = src_height;
		}
d369 6
a374 6
	/* The following is probably an optimally fast shuffling algorithm;
	   unfortunately, it requires a huge auxiliary array.  The way it
	   works is to start with an array of all pixel indices, then repeat:
	   select an entry at random from the array, output that index, replace
	   that entry with the last array entry, then reduce the array size. */
	{
d377 1
a377 1
					/* down-counter */
d380 3
a382 3
	  != wxh * (long)sizeof(long)
	   )
		Fatal( "Integer overflow, malloc unusable" );
d385 1
a385 1
		Fatal( "Not enough memory for location array" );
d390 1
a390 1
		loc[wxh] = wxh;
d395 23
a417 12
		{
		register long	r = (long)((double)wxh * drand48());
		register long	x = loc[r] % dst_width;
		register long	y = loc[r] / dst_width;

		if ( fb_write( fbp, (int)x, (int)y,
			       in_fb_file == NULL ? bg
						  : pix[x + y * src_width],
			       1
			     ) == -1
		   )
			Fatal( "Error writing pixel" );
d419 2
a420 14
		loc[r] = loc[wxh];	/* track the shuffle */
		}
	}

	/* Close the frame buffer. */

	if ( fb_close( fbp ) == -1 )
		{
		fbp = FBIO_NULL;	/* avoid second try */
		Fatal( "Error closing output frame buffer" );
		}

	exit( EXIT_SUCCESS );
	}
@


14.11
log
@rely on EXIT_SUCCESS/FAILURE even if it is c99; use bool_t/1/0 instead of bool/true/false.
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.10 2007/01/23 01:13:27 brlcad Exp $ (BRL)";
a71 4
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

a74 1
#ifdef HAVE_STRING_H
d76 3
a78 2
#else
#include	<strings.h>
d81 1
a81 1
#include	<stdarg.h>
d83 1
a83 1
#include	<varargs.h>
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.9 2007/01/20 14:36:48 brlcad Exp $ (BRL)";
a93 6
#ifndef EXIT_SUCCESS
#define	EXIT_SUCCESS	0
#endif
#ifndef EXIT_FAILURE
#define	EXIT_FAILURE	1
#endif
d96 1
a96 4

typedef int	bool;
#define	false	0
#define	true	1
d99 1
a99 1
static bool	hires = false;		/* set for 1Kx1K; clear for 512x512 */
d242 1
a242 1
		register bool	errors = false;
d248 1
a248 1
				errors = true;
d260 1
a260 1
				hires = true;
d265 1
a265 1
					errors = true;
d271 1
a271 1
					errors = true;
d279 1
a279 1
					errors = true;
d287 1
a287 1
					errors = true;
d293 1
a293 1
					errors = true;
d299 1
a299 1
					errors = true;
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.8 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
@


14.8
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d63 1
a63 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.7 2005/10/23 04:44:30 brlcad Exp $ (BRL)";
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d63 1
a63 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.6 2005/09/21 19:00:27 brlcad Exp $ (BRL)";
@


14.6
log
@needs bu.h for bu_getopt
@
text
@d63 1
a63 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.5 2005/09/21 17:17:18 brlcad Exp $ (BRL)";
d76 1
a76 1
                                                                                                                                                                            
@


14.5
log
@use bu_optarg, bu_optind and bu_getopt
@
text
@d63 1
a63 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.4 2005/09/09 05:07:46 brlcad Exp $ (BRL)";
d92 1
@


14.4
log
@consistency, BRL-CAD not BRL CAD
@
text
@d63 1
a63 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.3 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
d253 1
a253 1
		while ( (c = getopt( argc, argv, OPTSTR )) != EOF )
d261 1
a261 1
				in_fb_file = optarg;
d265 1
a265 1
				out_fb_file = optarg;
d273 1
a273 1
				if ( (src_height = atoi( optarg )) <= 0 )
d279 1
a279 1
				if ( (dst_height = atoi( optarg )) <= 0 )
d285 1
a285 1
				if ( (src_height = src_width = atoi( optarg ))
d293 1
a293 1
				if ( (dst_height = dst_width = atoi( optarg ))
d301 1
a301 1
				if ( (src_width = atoi( optarg )) <= 0 )
d307 1
a307 1
				if ( (dst_width = atoi( optarg )) <= 0 )
d317 1
a317 1
	if ( optind < argc )		/* out_fb_file */
d319 1
a319 1
		if ( optind < argc - 1 || out_fb_file != NULL )
d325 1
a325 1
		out_fb_file = argv[optind];
@


14.3
log
@update copyright to 2005
@
text
@d63 1
a63 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbfade.c,v 14.2 2004/12/18 06:09:12 morrison Exp $ (BRL)";
d92 1
a92 1
#include "fb.h"			/* BRL CAD package libfb.a interface */
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d63 1
a63 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d76 1
a76 1

d92 1
a92 2
#include "bu.h"
#include "fb.h"			/* BRL-CAD package libfb.a interface */
d253 1
a253 1
		while ( (c = bu_getopt( argc, argv, OPTSTR )) != EOF )
d261 1
a261 1
				in_fb_file = bu_optarg;
d265 1
a265 1
				out_fb_file = bu_optarg;
d273 1
a273 1
				if ( (src_height = atoi( bu_optarg )) <= 0 )
d279 1
a279 1
				if ( (dst_height = atoi( bu_optarg )) <= 0 )
d285 1
a285 1
				if ( (src_height = src_width = atoi( bu_optarg ))
d293 1
a293 1
				if ( (dst_height = dst_width = atoi( bu_optarg ))
d301 1
a301 1
				if ( (src_width = atoi( bu_optarg )) <= 0 )
d307 1
a307 1
				if ( (dst_width = atoi( bu_optarg )) <= 0 )
d317 1
a317 1
	if ( bu_optind < argc )		/* out_fb_file */
d319 1
a319 1
		if ( bu_optind < argc - 1 || out_fb_file != NULL )
d325 1
a325 1
		out_fb_file = argv[bu_optind];
@


14.2
log
@assign copyright and GPL license
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d63 1
a63 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbfade.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 1
/*
d63 1
a63 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbfade.c,v 1.6 2004/09/08 20:31:24 kermit Exp $ (BRL)";
@


1.6
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbfade.c,v 1.5 2004/09/03 23:30:56 morrison Exp $ (BRL)";
d449 10
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbfade.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d57 1
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbfade.c,v 1.3 2004/06/09 17:56:22 erikg Exp $ (BRL)";
d58 1
a58 1
#ifdef USE_STRING_H
@


1.3
log
@fix missing header issues
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbfade.c,v 1.2 2004/06/08 22:04:11 morrison Exp $ (BRL)";
d50 1
a50 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d54 4
a57 2


@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/fbfade.c,v 11.7 2004/05/10 15:30:42 erikg Exp $ (BRL)";
a69 1
#include "externs.h"			/* For getopt() */
@

