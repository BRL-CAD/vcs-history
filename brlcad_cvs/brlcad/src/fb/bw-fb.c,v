head	14.16;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.4
	rel-7-10-2:14.14
	rel-7-10-0:14.13
	rel-7-8-4:14.11
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.16
date	2007.11.21.20.49.07;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.11.21.19.09.24;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.07.26.01.13.53;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.27;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.48;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.08.01.15.02.56;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.07.09.09.50.24;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.04.06.19.56.04;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.21.18.43.37;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.17.17.18;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.30.21;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2004.12.21.06.38.19;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.06.09.12;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.08.20.31.24;	author kermit;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.17.56.22;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.10;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.58;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;

14.8.2.1
date	2006.04.07.19.26.26;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.16
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                         B W - F B . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file bw-fb.c
 *
 * Write a black and white (.bw) image to the framebuffer.
 * From an 8-bit/pixel, pix order file (i.e. Bottom UP, left to right).
 *
 * This allows an offset into both the display and source file.
 * The color planes to be loaded are also selectable.
 *
 *  Author -
 *	Phillip Dykstra
 *	15 Aug 1985
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.15 2007/11/21 19:09:24 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif
#ifdef HAVE_SYS_STAT_H
#  include <sys/stat.h>
#endif
#ifdef HAVE_FCNTL_H
#  include <fcntl.h>
#endif

#include <stdlib.h>
#include <stdio.h>

#include "machine.h"
#include "bu.h"
#include "fb.h"


int skipbytes(int fd, off_t num);

#define	MAX_LINE	(16*1024)	/* Largest output scan line length */

static char	ibuf[MAX_LINE];
static RGBpixel obuf[MAX_LINE];

static int	fileinput = 0;		/* file of pipe on input? */
static int	autosize = 0;		/* !0 to autosize input */

static unsigned long int	file_width = 512;	/* default input width */
static unsigned long int	file_height = 512;	/* default input height */
static int	scr_width = 0;		/* screen tracks file if not given */
static int	scr_height = 0;
static int	file_xoff, file_yoff;
static int	scr_xoff, scr_yoff;
static int	clear = 0;
static int	zoom = 0;
static int	inverse = 0;
static int	redflag   = 0;
static int	greenflag = 0;
static int	blueflag  = 0;

static char	*framebuffer = NULL;
static char	*file_name;
static int	infd;
static FBIO	*fbp;

static char	usage[] = "\
Usage: bw-fb [-a -h -i -c -z -R -G -B] [-F framebuffer]\n\
	[-s squarefilesize] [-w file_width] [-n file_height]\n\
	[-x file_xoff] [-y file_yoff] [-X scr_xoff] [-Y scr_yoff]\n\
	[-S squarescrsize] [-W scr_width] [-N scr_height] [file.bw]\n";
int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "ahiczRGBF:s:w:n:x:y:X:Y:S:W:N:" )) != EOF )  {
		switch( c )  {
		case 'a':
			autosize = 1;
			break;
		case 'h':
			/* high-res */
			file_height = file_width = 1024;
			scr_height = scr_width = 1024;
			autosize = 0;
			break;
		case 'i':
			inverse = 1;
			break;
		case 'c':
			clear = 1;
			break;
		case 'z':
			zoom = 1;
			break;
		case 'R':
			redflag = 1;
			break;
		case 'G':
			greenflag = 1;
			break;
		case 'B':
			blueflag = 1;
			break;
		case 'F':
			framebuffer = bu_optarg;
			break;
		case 's':
			/* square file size */
			file_height = file_width = atoi(bu_optarg);
			autosize = 0;
			break;
		case 'w':
			file_width = atoi(bu_optarg);
			autosize = 0;
			break;
		case 'n':
			file_height = atoi(bu_optarg);
			autosize = 0;
			break;
		case 'x':
			file_xoff = atoi(bu_optarg);
			break;
		case 'y':
			file_yoff = atoi(bu_optarg);
			break;
		case 'X':
			scr_xoff = atoi(bu_optarg);
			break;
		case 'Y':
			scr_yoff = atoi(bu_optarg);
			break;
		case 'S':
			scr_height = scr_width = atoi(bu_optarg);
			break;
		case 'W':
			scr_width = atoi(bu_optarg);
			break;
		case 'N':
			scr_height = atoi(bu_optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )  {
		if( isatty(fileno(stdin)) )
			return(0);
		file_name = "-";
		infd = 0;
	} else {
		file_name = argv[bu_optind];
		if( (infd = open(file_name, 0)) < 0 )  {
			(void)fprintf( stderr,
				"bw-fb: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
		fileinput++;
	}

	if ( argc > ++bu_optind )
		(void)fprintf( stderr, "bw-fb: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	register int	x, y, n;
	int	xout, yout;		/* number of sceen output lines */
	int	xstart, xskip;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit( 1, NULL );
	}

	/* autosize input? */
	if( fileinput && autosize ) {
		unsigned long int	w, h;
		if( fb_common_file_size(&w, &h, file_name, 1) ) {
			file_width = w;
			file_height = h;
		} else {
			fprintf(stderr, "bw-fb: unable to autosize\n");
		}
	}

	/* If no color planes were selected, load them all */
	if( redflag == 0 && greenflag == 0 && blueflag == 0 )
		redflag = greenflag = blueflag = 1;

	/* If screen size was not set, track the file size */
	if( scr_width == 0 )
		scr_width = file_width;
	if( scr_height == 0 )
		scr_height = file_height;

	/* Open Display Device */
	if ((fbp = fb_open( framebuffer, scr_width, scr_height )) == NULL ) {
		fprintf( stderr, "fb_open failed\n");
		bu_exit( 3, NULL );
	}

	/* Get the screen size we were given */
	scr_width = fb_getwidth(fbp);
	scr_height = fb_getheight(fbp);

	/* compute pixels output to screen */
	if( scr_xoff < 0 )
	{
		xout = scr_width + scr_xoff;
		xskip = (-scr_xoff);
		xstart = 0;
	}
	else
	{
		xout = scr_width - scr_xoff;
		xskip = 0;
		xstart = scr_xoff;
	}
	if( xout < 0 ) xout = 0;
	if( xout > (file_width-file_xoff) ) xout = (file_width-file_xoff);

	if( inverse )
		scr_yoff = (-scr_yoff);

	yout = scr_height - scr_yoff;
	if( yout < 0 ) yout = 0;
	if( yout > (file_height-file_yoff) ) yout = (file_height-file_yoff);
	if( xout > MAX_LINE ) {
		fprintf( stderr, "bw-fb: can't output %d pixel lines.\n", xout );
		bu_exit( 2, NULL );
	}

	if( clear ) {
		fb_clear( fbp, PIXEL_NULL );
	}
	if( zoom ) {
		/* Zoom in, and center the file */
		fb_zoom( fbp, scr_width/xout, scr_height/yout );
		if( inverse )
			fb_window( fbp, scr_xoff+xout/2, scr_height-1-(scr_yoff+yout/2) );
		else
			fb_window( fbp, scr_xoff+xout/2, scr_yoff+yout/2 );
	}

	/* Test for simplest case */
	if( inverse == 0 &&
		file_xoff == 0 && file_yoff == 0 &&
		scr_xoff+file_width <= fb_getwidth(fbp)
	)  {
		unsigned char	*buf;
		int		npix = file_width * yout;

		if( (buf = malloc(npix)) == NULL )  {
			perror("bw-fb malloc");
			goto general;
		}
		n = bu_mread( infd, (char *)buf, npix );
		if( n != npix )  {
			fprintf(stderr, "bw-fb: read got %d, s/b %d\n", n, npix );
			if( n <= 0 )  bu_exit(7, NULL);
			npix = n;	/* show what we got */
		}
		n = (npix+file_width-1)/file_width;	/* num lines got */
		n = fb_bwwriterect(fbp, scr_xoff, scr_yoff, file_width, n, buf);
		if( npix != n )  {
			fprintf(stderr, "bw-fb: fb_bwwriterect() got %d, s/b %d\n", n, npix );
			bu_exit(8, NULL);
		}
		fb_close( fbp );
		bu_exit(0, NULL);
	}

	/* Begin general case */
general:
	if( file_yoff != 0 ) skipbytes( infd, file_yoff*file_width );

	for( y = scr_yoff; y < scr_yoff + yout; y++ ) {
		if( y < 0 || y >= scr_height )
		{
			skipbytes( infd , file_width );
			continue;
		}
		if( file_xoff+xskip != 0 )
			skipbytes( infd, file_xoff+xskip );
		n = bu_mread( infd, &ibuf[0], xout );
		if( n <= 0 ) break;
		/*
		 * If we are not loading all color planes, we have
		 * to do a pre-read.
		 */
		if( redflag == 0 || greenflag == 0 || blueflag == 0 ) {
			if( inverse )
				n = fb_read( fbp, scr_xoff, scr_height-1-y,
					(unsigned char *)obuf, xout );
			else
				n = fb_read( fbp, scr_xoff, y,
					(unsigned char *)obuf, xout );
			if( n < 0 )  break;
		}
		for( x = 0; x < xout; x++ ) {
			if( redflag )
				obuf[x][RED] = ibuf[x];
			if( greenflag )
				obuf[x][GRN] = ibuf[x];
			if( blueflag )
				obuf[x][BLU] = ibuf[x];
		}
		if( inverse )
			fb_write( fbp, xstart, scr_height-1-y, (unsigned char *)obuf, xout );
		else
			fb_write( fbp, xstart, y, (unsigned char *)obuf, xout );

		/* slop at the end of the line? */
		if( file_xoff+xskip+xout < file_width )
			skipbytes( infd, file_width-file_xoff-xskip-xout );
	}

	fb_close( fbp );
	bu_exit( 0, NULL );
}

/*
 * Throw bytes away.  Use reads into ibuf buffer if a pipe, else seek.
 */
int
skipbytes(int fd, off_t num)
{
	int	n, try;

	if( fileinput ) {
		(void)lseek( fd, num, 1 );
		return 0;
	}

	while( num > 0 ) {
		try = num > MAX_LINE ? MAX_LINE : num;
		n = read( fd, ibuf, try );
		if( n <= 0 ){
			return -1;
		}
		num -= n;
	}
	return	0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@exit->bu_exit where applicable
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.14 2007/07/26 01:13:53 brlcad Exp $ (BRL)";
d202 1
a202 1
		bu_exit( 1, "" );
d229 1
a229 1
		bu_exit( 3, "" );
d260 1
a260 1
		bu_exit( 2, "" );
d290 1
a290 1
			if( n <= 0 )  bu_exit(7, "");
d297 1
a297 1
			bu_exit(8, "");
d300 1
a300 1
		bu_exit(0, "");
d349 1
a349 1
	bu_exit( 0, "" );
@


14.14
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.13 2007/01/23 01:13:27 brlcad Exp $ (BRL)";
d202 1
a202 1
		exit( 1 );
d229 1
a229 1
		exit( 3 );
d260 1
a260 1
		exit( 2 );
d290 1
a290 1
			if( n <= 0 )  exit(7);
d297 1
a297 1
			exit(8);
d300 1
a300 1
		exit(0);
d349 1
a349 1
	exit( 0 );
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a32 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.12 2007/01/20 14:36:48 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.11 2006/08/01 15:02:56 brlcad Exp $ (BRL)";
@


14.11
log
@refactor the three asize.c implementations (libbn, libfb, & canon) into just one.  libbn had the most comprehensive and updated version, but the logic belongs in libfb.  so, the bn_common autosizing functions are now consolidated to libfb, refactoring accordingly.
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.10 2006/07/09 09:50:24 brlcad Exp $ (BRL)";
@


14.10
log
@refactor utilizing bu_mread now from libbu
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.9 2006/04/06 19:56:04 brlcad Exp $ (BRL)";
a65 2
/* defined in libbn/asize.c */
extern int bn_common_file_size(int *, int *, const char *, int);
d77 2
a78 2
static int	file_width = 512;	/* default input width */
static int	file_height = 512;	/* default input height */
d213 2
a214 2
		int	w, h;
		if( bn_common_file_size(&w, &h, file_name, 1) ) {
@


14.9
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.8 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
a68 1
int mread(int fd, register char *bp, register int num);
d295 1
a295 1
		n = mread( infd, (char *)buf, npix );
d323 1
a323 1
		n = mread( infd, &ibuf[0], xout );
a384 27
 * "Multiple try" read.
 *  Will keep reading until either an error occurs
 *  or the requested number of bytes is read.  This
 *  is important for pipes.
 */
int
mread(int fd, register char *bp, register int num)
{
	register int	n;
	int	count;

	count = 0;

	while( num > 0 ) {
		n = read( fd, bp, num );
		if( n < 0 )
			return	-1;
		if( n == 0 )
			return count;
		bp += n;
		count += n;
		num -= n;
	}
	return count;
}

/*
@


14.8
log
@update copyright to 2006
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.7 2005/10/23 04:44:30 brlcad Exp $ (BRL)";
d47 1
a47 1
# include <unistd.h>
a48 1

d50 7
a56 1
# include <sys/types.h>
@


14.8.2.1
log
@update from HEAD
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.8 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
d47 1
a47 1
#  include <unistd.h>
d49 1
d51 1
a51 7
#  include <sys/types.h>
#endif
#ifdef HAVE_SYS_STAT_H
#  include <sys/stat.h>
#endif
#ifdef HAVE_FCNTL_H
#  include <fcntl.h>
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.6 2005/09/21 18:43:37 brlcad Exp $ (BRL)";
@


14.6
log
@needs bu.h for bu_getopt
@
text
@d33 1
a33 1
 *  
d38 1
a38 1
 *  
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.5 2005/09/21 17:17:18 brlcad Exp $ (BRL)";
d368 1
a368 1
	
@


14.5
log
@use bu_optarg, bu_optind and bu_getopt
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.4 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
d58 1
@


14.4
log
@update copyright to 2005
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/bw-fb.c,v 14.3 2004/12/21 06:38:19 morrison Exp $ (BRL)";
d102 1
a102 1
	while ( (c = getopt( argc, argv, "ahiczRGBF:s:w:n:x:y:X:Y:S:W:N:" )) != EOF )  {
d132 1
a132 1
			framebuffer = optarg;
d136 1
a136 1
			file_height = file_width = atoi(optarg);
d140 1
a140 1
			file_width = atoi(optarg);
d144 1
a144 1
			file_height = atoi(optarg);
d148 1
a148 1
			file_xoff = atoi(optarg);
d151 1
a151 1
			file_yoff = atoi(optarg);
d154 1
a154 1
			scr_xoff = atoi(optarg);
d157 1
a157 1
			scr_yoff = atoi(optarg);
d160 1
a160 1
			scr_height = scr_width = atoi(optarg);
d163 1
a163 1
			scr_width = atoi(optarg);
d166 1
a166 1
			scr_height = atoi(optarg);
d174 1
a174 1
	if( optind >= argc )  {
d180 1
a180 1
		file_name = argv[optind];
d190 1
a190 1
	if ( argc > ++optind )
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d33 1
a33 1
 *
d38 1
a38 1
 *
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a57 1
#include "bu.h"
d102 1
a102 1
	while ( (c = bu_getopt( argc, argv, "ahiczRGBF:s:w:n:x:y:X:Y:S:W:N:" )) != EOF )  {
d132 1
a132 1
			framebuffer = bu_optarg;
d136 1
a136 1
			file_height = file_width = atoi(bu_optarg);
d140 1
a140 1
			file_width = atoi(bu_optarg);
d144 1
a144 1
			file_height = atoi(bu_optarg);
d148 1
a148 1
			file_xoff = atoi(bu_optarg);
d151 1
a151 1
			file_yoff = atoi(bu_optarg);
d154 1
a154 1
			scr_xoff = atoi(bu_optarg);
d157 1
a157 1
			scr_yoff = atoi(bu_optarg);
d160 1
a160 1
			scr_height = scr_width = atoi(bu_optarg);
d163 1
a163 1
			scr_width = atoi(bu_optarg);
d166 1
a166 1
			scr_height = atoi(bu_optarg);
d174 1
a174 1
	if( bu_optind >= argc )  {
d180 1
a180 1
		file_name = argv[bu_optind];
d190 1
a190 1
	if ( argc > ++bu_optind )
d367 1
a367 1

@


14.3
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/bw-fb.c,v 14.2 2004/12/18 06:09:12 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL license
@
text
@a38 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/bw-fb.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 2
/*
 *			B W - F B . C
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/bw-fb.c,v 1.5 2004/09/08 20:31:24 kermit Exp $ (BRL)";
@


1.5
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/bw-fb.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d388 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/bw-fb.c,v 1.3 2004/06/09 17:56:22 erikg Exp $ (BRL)";
d37 1
@


1.3
log
@fix missing header issues
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/bw-fb.c,v 1.2 2004/06/08 22:04:10 morrison Exp $ (BRL)";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d31 3
d35 3
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/bw-fb.c,v 11.11 2004/05/10 15:30:42 erikg Exp $ (BRL)";
a35 1
#include "externs.h"		/* For getopt() and friends */
@

