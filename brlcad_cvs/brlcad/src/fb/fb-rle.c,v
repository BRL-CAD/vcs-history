head	14.13;
access;
symbols
	rel-7-10-4:14.10
	STABLE:14.10.0.2
	stable-branch:14.4
	rel-7-10-2:14.10
	rel-7-10-0:14.9
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.13
date	2007.11.21.20.49.07;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.21.19.09.24;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.10.18.09.11.57;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.07.26.01.13.53;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.27;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.36.48;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.17.17.18;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.30.21;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2004.12.21.06.38.19;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.06.09.12;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.17.56.22;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.11;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.00;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                        F B - R L E . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file fb-rle.c
 *
 *  Encode a framebuffer image using the Utah Raster Toolkit RLE library
 *
 *  Author -
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.12 2007/11/21 19:09:24 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#include <stdio.h>
#include <time.h>

#include "machine.h"
#include "bu.h"
#include "fb.h"
#include "rle.h"

#define COMMENT_SIZE 128
static rle_hdr	outrle;
#define		outfp		outrle.rle_file
static char			comment[COMMENT_SIZE];
#if HAVE_GETHOSTNAME
static char			host[COMMENT_SIZE];
#endif
static rle_pixel		**rows;
static time_t			now;
static char			*who;

static rle_map			rlemap[3*256];		/* Utah format map */
static ColorMap			cmap;			/* libfb format map */

static int	crunch;

static int	background[3];	/* default background is black */

static int	screen_width;
static int	screen_height;
static int	file_width;
static int	file_height;
static int	screen_xoff;
static int	screen_yoff;

static char	*framebuffer;

static char	usage[] = "\
Usage: fb-rle [-c -h -d] [-F framebuffer] [-C r/g/b]\n\
	[-S squarescrsize] [-W screen_width] [-N screen_height]\n\
	[-X screen_xoff] [-Y screen_yoff]\n\
	[-s squarefilesize] [-w file_width] [-n file_height]\n\
	[file.rle]\n\
\n\
If omitted, the .rle file is written to stdout\n";

extern void	cmap_crunch(register RGBpixel (*scan_buf), register int pixel_ct, ColorMap *colormap);

/*
 *			G E T _ A R G S
 */
static int
get_args(int argc, register char **argv)
{
	register int	c;

	while( (c = bu_getopt( argc, argv, "cF:hds:w:n:S:W:N:X:Y:C:" )) != EOF )  {
		switch( c )  {
		case 'c':
			crunch = 1;
			break;
		case 'F':
			framebuffer = bu_optarg;
			break;
		case 'h':
			/* high-res */
			screen_height = screen_width = 1024;
			break;
		case 's':
			/* square file size */
			file_height = file_width = atoi(bu_optarg);
			break;
		case 'S':
			screen_height = screen_width = atoi(bu_optarg);
			break;
		case 'w':
			file_width = atoi(bu_optarg);
			break;
		case 'W':
			screen_width = atoi(bu_optarg);
			break;
		case 'n':
			file_height = atoi(bu_optarg);
			break;
		case 'N':
			screen_height = atoi(bu_optarg);
			break;
		case 'X':
			screen_xoff = atoi(bu_optarg);
			break;
		case 'Y':
			screen_yoff = atoi(bu_optarg);
			break;
		case 'C':
			{
				register char *cp = bu_optarg;
				register int *conp = background;

				/* premature null => atoi gives zeros */
				for( c=0; c < 3; c++ )  {
					*conp++ = atoi(cp);
					while( *cp && *cp++ != '/' ) ;
				}
			}
			break;
		default:
		case '?':
			return	0;
		}
	}
	if( argv[bu_optind] != NULL )  {
		if (bu_file_exists(argv[bu_optind])) {
			(void) fprintf( stderr,
				"\"%s\" already exists.\n",
				argv[bu_optind] );
			bu_exit( 1, NULL );
		}
		if( (outfp = fopen( argv[bu_optind], "w" )) == NULL )  {
			perror(argv[bu_optind]);
			return	0;
		}
	}
	if( argc > ++bu_optind )
		(void) fprintf( stderr, "fb-rle: Excess arguments ignored\n" );

	if( isatty(fileno(outfp)) )
		return 0;
	return	1;
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register FBIO	*fbp;
	register unsigned char *scan_buf;
	register int	y;
	int		cm_save_needed;

	outfp = stdout;
	if( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit( 1, NULL );
	}

	/* If screen size = default & file size is given, track file size */
	if( screen_width == 0 && file_width > 0 )
		screen_width = file_width;
	if( screen_height == 0 && file_height > 0 )
		screen_height = file_height;

	if( (fbp = fb_open( framebuffer, screen_width, screen_height )) == FBIO_NULL )
		bu_exit(12, NULL);

	/* Honor original screen size desires, if set, unless they shrank */
	if( screen_width == 0 || fb_getwidth(fbp) < screen_width )
		screen_width = fb_getwidth(fbp);
	if( screen_height == 0 || fb_getheight(fbp) < screen_height )
		screen_height = fb_getheight(fbp);

	/* If not specified, output file size tracks screen size */
	if( file_width == 0 )
		file_width = screen_width;
	if( file_height == 0 )
		file_height = screen_height;

	/* Clip below and to left of (0,0) */
	if( screen_xoff < 0 )  {
		file_width += screen_xoff;
		screen_xoff = 0;
	}
	if( screen_yoff < 0 )  {
		file_height += screen_yoff;
		screen_yoff = 0;
	}

	/* Clip up and to the right */
	if( screen_xoff + file_width > screen_width )
		file_width = screen_width - screen_xoff;
	if( screen_yoff + file_height > screen_height )
		file_height = screen_height - screen_yoff;

	if( file_width <= 0 || file_height <= 0 )  {
		fprintf(stderr,
			"fb-rle: Error: image rectangle entirely off screen\n");
		bu_exit(1, NULL);
	}

	/* Read color map, see if it is linear */
	cm_save_needed = 1;
	if( fb_rmap( fbp, &cmap ) == -1 )
		cm_save_needed = 0;
	if( cm_save_needed && fb_is_linear_cmap( &cmap ) )
		cm_save_needed = 0;
	if( crunch && (cm_save_needed == 0) )
		crunch = 0;

	/* Convert to Utah format */
	if( cm_save_needed )  for( y=0; y<256; y++ )  {
		rlemap[y+0*256] = cmap.cm_red[y];
		rlemap[y+1*256] = cmap.cm_green[y];
		rlemap[y+2*256] = cmap.cm_blue[y];
	}

	scan_buf = (unsigned char *)malloc( sizeof(RGBpixel) * screen_width );

	/* Build RLE header */
	outrle.ncolors = 3;
	RLE_SET_BIT(outrle, RLE_RED);
	RLE_SET_BIT(outrle, RLE_GREEN);
	RLE_SET_BIT(outrle, RLE_BLUE);
	outrle.background = 2;		/* use background */
	outrle.bg_color = background;
	outrle.alpha = 0;			/* no alpha channel */
	if( cm_save_needed && !crunch ) {
		outrle.ncmap = 3;
		outrle.cmaplen = 8;		/* 1<<8 = 256 */
		outrle.cmap = rlemap;
	} else {
		outrle.ncmap = 0;		/* no color map */
		outrle.cmaplen = 0;
		outrle.cmap = (rle_map *)0;
	}
	outrle.xmin = screen_xoff;
	outrle.ymin = screen_yoff;
	outrle.xmax = screen_xoff + file_width - 1;
	outrle.ymax = screen_yoff + file_height - 1;
	outrle.comments = (const char **)0;

	/* Add comments to the header file, since we have one */
	if( framebuffer == (char *)0 )
		framebuffer = fbp->if_name;
	snprintf( comment, COMMENT_SIZE, "encoded_from=%s", framebuffer );
	rle_putcom( bu_strdup(comment), &outrle );
	now = time(0);
	snprintf( comment, COMMENT_SIZE, "encoded_date=%24.24s", ctime(&now) );
	rle_putcom( bu_strdup(comment), &outrle );
	if( (who = getenv("USER")) != (char *)0 ) {
		snprintf( comment, COMMENT_SIZE, "encoded_by=%s", who);
		rle_putcom( bu_strdup(comment), &outrle );
	}
#	if HAVE_GETHOSTNAME
	gethostname( host, sizeof(host) );
	snprintf( comment, COMMENT_SIZE, "encoded_host=%s", host);
	rle_putcom( bu_strdup(comment), &outrle );
#	endif

	rle_put_setup( &outrle );
	rle_row_alloc( &outrle, &rows );

	/* Read the image a scanline at a time, and encode it */
	for( y = 0; y < file_height; y++ )  {
		if( fb_read( fbp, screen_xoff, y+screen_yoff, scan_buf,
		    file_width ) == -1 )  {
			(void) fprintf(	stderr,
				"fb-rle: read of %d pixels on line %d failed!\n",
				file_width, y+screen_yoff );
			bu_exit(1, NULL);
		}

		if( crunch )
			cmap_crunch( (RGBpixel *)scan_buf, file_width, &cmap );

		/* Grumble, convert to Utah layout */
		{
			register unsigned char	*pp = (unsigned char *)scan_buf;
			register rle_pixel	*rp = rows[0];
			register rle_pixel	*gp = rows[1];
			register rle_pixel	*bp = rows[2];
			register int		i;

			for( i=0; i<file_width; i++ )  {
				*rp++ = *pp++;
				*gp++ = *pp++;
				*bp++ = *pp++;
			}
		}
		rle_putrow( rows, file_width, &outrle );
	}
	rle_puteof( &outrle );

	fb_close( fbp );
	fclose( outfp );
	bu_exit(0, NULL);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@exit->bu_exit where applicable
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.11 2007/10/18 09:11:57 brlcad Exp $ (BRL)";
d152 1
a152 1
			bu_exit( 1, "" );
d181 1
a181 1
		bu_exit( 1, "" );
d191 1
a191 1
		bu_exit(12, "");
d224 1
a224 1
		bu_exit(1, "");
d296 1
a296 1
			bu_exit(1, "");
d322 1
a322 1
	bu_exit(0, "");
@


14.11
log
@more quellings of level 4 flawfinder issues
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.10 2007/07/26 01:13:53 brlcad Exp $ (BRL)";
d152 1
a152 1
			exit( 1 );
d181 1
a181 1
		exit( 1 );
d191 1
a191 1
		exit(12);
d224 1
a224 1
		exit(1);
d296 1
a296 1
			exit(1);
d322 1
a322 1
	exit(0);
@


14.10
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.9 2007/01/23 01:13:27 brlcad Exp $ (BRL)";
d47 1
d50 1
a50 1
static char			comment[128];
d52 1
a52 1
static char			host[128];
d148 1
a148 1
		if( access( argv[bu_optind], 0 ) == 0 )  {
d271 1
a271 1
	sprintf( comment, "encoded_from=%s", framebuffer );
d274 1
a274 1
	sprintf( comment, "encoded_date=%24.24s", ctime(&now) );
d277 1
a277 1
		sprintf( comment, "encoded_by=%s", who);
d282 1
a282 1
	sprintf( comment, "encoded_host=%s", host);
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a27 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.8 2007/01/20 14:36:48 brlcad Exp $ (BRL)";
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.7 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.6 2005/10/23 04:44:30 brlcad Exp $ (BRL)";
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.5 2005/09/21 17:17:18 brlcad Exp $ (BRL)";
@


14.5
log
@use bu_optarg, bu_optind and bu_getopt
@
text
@d28 1
a28 1
 *  
d33 1
a33 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.4 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
d44 1
a44 1
                                                                                                                                                                            
@


14.4
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.3 2004/12/21 06:38:19 morrison Exp $ (BRL)";
d98 1
a98 1
	while( (c = getopt( argc, argv, "cF:hds:w:n:S:W:N:X:Y:C:" )) != EOF )  {
d104 1
a104 1
			framebuffer = optarg;
d112 1
a112 1
			file_height = file_width = atoi(optarg);
d115 1
a115 1
			screen_height = screen_width = atoi(optarg);
d118 1
a118 1
			file_width = atoi(optarg);
d121 1
a121 1
			screen_width = atoi(optarg);
d124 1
a124 1
			file_height = atoi(optarg);
d127 1
a127 1
			screen_height = atoi(optarg);
d130 1
a130 1
			screen_xoff = atoi(optarg);
d133 1
a133 1
			screen_yoff = atoi(optarg);
d137 1
a137 1
				register char *cp = optarg;
d152 2
a153 2
	if( argv[optind] != NULL )  {
		if( access( argv[optind], 0 ) == 0 )  {
d156 1
a156 1
				argv[optind] );
d159 2
a160 2
		if( (outfp = fopen( argv[optind], "w" )) == NULL )  {
			perror(argv[optind]);
d164 1
a164 1
	if( argc > ++optind )
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *
d33 1
a33 1
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d44 1
a44 1

d98 1
a98 1
	while( (c = bu_getopt( argc, argv, "cF:hds:w:n:S:W:N:X:Y:C:" )) != EOF )  {
d104 1
a104 1
			framebuffer = bu_optarg;
d112 1
a112 1
			file_height = file_width = atoi(bu_optarg);
d115 1
a115 1
			screen_height = screen_width = atoi(bu_optarg);
d118 1
a118 1
			file_width = atoi(bu_optarg);
d121 1
a121 1
			screen_width = atoi(bu_optarg);
d124 1
a124 1
			file_height = atoi(bu_optarg);
d127 1
a127 1
			screen_height = atoi(bu_optarg);
d130 1
a130 1
			screen_xoff = atoi(bu_optarg);
d133 1
a133 1
			screen_yoff = atoi(bu_optarg);
d137 1
a137 1
				register char *cp = bu_optarg;
d152 2
a153 2
	if( argv[bu_optind] != NULL )  {
		if( access( argv[bu_optind], 0 ) == 0 )  {
d156 1
a156 1
				argv[bu_optind] );
d159 2
a160 2
		if( (outfp = fopen( argv[bu_optind], "w" )) == NULL )  {
			perror(argv[bu_optind]);
d164 1
a164 1
	if( argc > ++bu_optind )
@


14.3
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.2 2004/12/18 06:09:12 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL license
@
text
@a33 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 2
/*
 *			F B - R L E . C
d39 1
a39 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 1.3 2004/06/09 17:56:22 erikg Exp $ (BRL)";
d312 10
@


1.3
log
@fix missing header issues
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 1.2 2004/06/08 22:04:11 morrison Exp $ (BRL)";
d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d26 4
a29 2


@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: fb-rle.c,v 11.10 2004/05/10 15:30:42 erikg Exp $ (BRL)";
a31 1
#include "externs.h"
@

