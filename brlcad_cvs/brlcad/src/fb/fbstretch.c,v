head	14.24;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.3
	rel-7-10-2:14.14
	rel-7-10-0:14.13
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.6
	rel-7-0-branch:1.6.0.2
	rel-7-0:1.6;
locks; strict;
comment	@ * @;


14.24
date	2007.12.20.20.31.42;	author bob1961;	state Exp;
branches;
next	14.23;

14.23
date	2007.12.06.14.44.25;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.12.04.00.56.25;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.12.03.22.57.58;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.12.03.22.29.29;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.12.03.22.27.16;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.12.01.21.47.12;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.11.21.20.49.07;	author erikgreenwald;	state Exp;
branches;
next	14.16;

14.16
date	2007.11.21.19.09.24;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.09.15.16.23.06;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.04.18.02.54.01;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.28;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.48;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.29.00.51.54;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.28.00.36.28;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.11.11.21.41.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.21.19.00.27;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.17.17.18;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.09.05.07.46;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.30.21;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.18.06.09.12;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.08.20.31.24;	author kermit;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.17.56.22;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.12;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.03;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.24
log
@Mods to get things compiling on windows.
@
text
@/*                     F B S T R E T C H . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file fbstretch.c
	fbstretch -- stretch a frame buffer image

	created:	89/04/29	D A Gwyn

	Typical compilation:	cc -O -I/usr/include/brlcad -o fbstretch \
					fbstretch.c /usr/brlcad/lib/libfb.a
	Add -DNO_VFPRINTF or -DNO_STRRCHR if vfprintf() or strrchr()
	are not present in your C library (e.g. on 4BSD-based systems).

	This program converts a frame buffer image so that it is stretched or
	compressed in the horizontal and/or vertical directions.  The image
	scaling origin is taken to be the lower left-hand corner of the
	display.  When compressing, pixel averaging is used by default;
	when expanding, pixel replication is used.  Pixel averaging may be
	meaningless for some color maps, so there is an option to use
	sampling instead.

	The main use of this utility is to compensate for differences in
	pixel aspect ratios among different display devices.

	Options:

	-a		"no averaging": samples for compression instead of
			averaging pixels

	-v		"verbose": prints information about sizes and scaling
			on the standard error output

	-x x_scale	horizontal scaling factor (default: out width/in width)

	-y y_scale	vertical scaling factor (default: out height/in height)

	-f in_fb	reads from the specified frame buffer file instead
			of modifying the one specified by the -f option "in
			place"

	-F out_fb	writes to the specified frame buffer file instead
			of the one specified by the FB_FILE environment
			variable (the default frame buffer, if no FB_FILE)

	-h		assumes 1024x1024 default input size instead of 512x512

	-s size		input size (width & height)

	-w width	input width

	-n height	input height

	-S size		output size (width & height)

	-W width	output width

	-N height	output height

	out_fb		same as -F out_fb, for convenience
*/
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.23 2007/12/06 14:44:25 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <signal.h>
#include <string.h>
#include <stdarg.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"
#include "fb.h"			/* BRL-CAD package libfb.a interface */


#define	USAGE1	"fbstretch [ -h ] [ -s size ] [ -w width ] [ -n height ]"
#define	USAGE2	"\t[ -f in_fb_file ] [ -a ] [ -v ] [ -x x_sc ] [ -y y_sc ]"
#define	USAGE3 "\t[ -S size ] [ -W width ] [ -N height ] [ [ -F ] out_fb_file ]"
#define	OPTSTR	"af:F:hn:N:s:S:vw:W:x:y:"
#define	EPSILON	0.0001			/* fudge for converting float to int */

typedef int bool_t;

static bool_t	hires = 0;		/* set for 1Kx1K; clear for 512x512 */
static bool_t	sample = 0;		/* set: sampling; clear: averaging */
static bool_t	verbose = 0;	/* set for size info printout */
static float	x_scale = -1.0;		/* horizontal scaling factor */
static float	y_scale = -1.0;		/* vertical scaling factor */
static bool_t	x_compress;		/* set iff compressing horizontally */
static bool_t	y_compress;		/* set iff compressing vertically */
static char	*src_file = NULL;	/* source frame buffer name */
static FBIO	*src_fbp = FBIO_NULL;	/* source frame buffer handle */
static char	*dst_file = NULL;	/* destination frame buffer name */
static FBIO	*dst_fbp = FBIO_NULL;	/* destination frame buffer handle */
static int	src_width = 0,
		src_height = 0;		/* source image size */
static int	dst_width = 0,
		dst_height = 0;		/* destination image size */
static unsigned char	*src_buf;		/* calloc()ed input scan line buffer */
static unsigned char	*dst_buf;		/* calloc()ed output scan line buffer */

/* in ioutil.c */
void Message( const char *format, ... );


static void
Stretch_Fatal( const char *format, ... )
{
    va_list		ap;
    
    va_start( ap, format );
    VMessage( format, ap );
    va_end( ap );
    
    if ( src_fbp != FBIO_NULL && fb_close( src_fbp ) == -1 ) {
	Message( "Error closing input frame buffer" );
	src_fbp = FBIO_NULL;
    }
    
    if ( dst_fbp != FBIO_NULL && fb_close( dst_fbp ) == -1 ) {
	Message( "Error closing output frame buffer" );
	src_fbp = FBIO_NULL;
    }

    bu_exit( EXIT_FAILURE, NULL );
    /* NOT REACHED */
}


static void
Sig_Catcher(int sig)
{
	(void)signal( sig, SIG_DFL );

	/* The following is not guaranteed to work, but it's worth a try. */
	Stretch_Fatal( "Interrupted by signal %d", sig );
}


int
main(int argc, char **argv)
{
	/* Plant signal catcher. */
	{
	static int	getsigs[] =	/* signals to catch */
		{
#ifdef SIGHUP
		SIGHUP,			/* hangup */
#endif
#ifdef SIGINT
		SIGINT,			/* interrupt */
#endif
#ifdef SIGQUIT
		SIGQUIT,		/* quit */
#endif
#ifdef SIGPIPE
		SIGPIPE,		/* write on a broken pipe */
#endif
#ifdef SIGTERM
		SIGTERM,		/* software termination signal */
#endif
		0
		};
	register int	i;

	for ( i = 0; getsigs[i] != 0; ++i )
		if ( signal( getsigs[i], SIG_IGN ) != SIG_IGN )
			(void)signal( getsigs[i], Sig_Catcher );
	}

	/* Process arguments. */
	{
		register int	c;
		register bool_t	errors = 0;

		while ( (c = bu_getopt( argc, argv, OPTSTR )) != EOF )
			switch( c )
				{
			default:	/* '?': invalid option */
				errors = 1;
				break;

			case 'a':	/* -a */
				sample = 1;
				break;

			case 'f':	/* -f in_fb */
				src_file = bu_optarg;
				break;

			case 'F':	/* -F out_fb */
				dst_file = bu_optarg;
				break;

			case 'h':	/* -h */
				hires = 1;
				break;

			case 'n':	/* -n height */
				if ( (src_height = atoi( bu_optarg )) <= 0 )
					errors = 1;

				break;

			case 'N':	/* -N height */
				if ( (dst_height = atoi( bu_optarg )) <= 0 )
					errors = 1;

				break;

			case 's':	/* -s size */
				if ( (src_height = src_width = atoi( bu_optarg ))
				  <= 0
				   )
					errors = 1;

				break;

			case 'S':	/* -S size */
				if ( (dst_height = dst_width = atoi( bu_optarg ))
				  <= 0
				   )
					errors = 1;

				break;

			case 'v':
				verbose = 1;
				break;

			case 'w':	/* -w width */
				if ( (src_width = atoi( bu_optarg )) <= 0 )
					errors = 1;

				break;

			case 'W':	/* -W width */
				if ( (dst_width = atoi( bu_optarg )) <= 0 )
					errors = 1;

				break;

			case 'x':	/* -x x_scale */
				if ( (x_scale = atof( bu_optarg )) <= 0 )
					{
					Message( "Nonpositive x scale factor" );
					errors = 1;
					}

				break;

			case 'y':	/* -y y_scale */
				if ( (y_scale = atof( bu_optarg )) <= 0 )
					{
					Message( "Nonpositive y scale factor" );
					errors = 1;
					}

				break;
				}

		if ( errors )
			Stretch_Fatal( "Usage: %s\n%s\n%s", USAGE1, USAGE2, USAGE3 );
	}

	if ( bu_optind < argc )		/* dst_file */
		{
		if ( bu_optind < argc - 1 || dst_file != NULL )
			{
			Message( "Usage: %s\n%s\n%s", USAGE1, USAGE2, USAGE3 );
			Stretch_Fatal( "Can't handle multiple output frame buffers!" );
			}

		dst_file = argv[bu_optind];
		}

	if ( dst_file == NULL )
		dst_file = getenv( "FB_FILE" );	/* needed for later strcmp */

	/* Figure out what scale factors to use before messing up size info. */

	if ( x_scale < 0.0 ) {
		if ( src_width == 0 || dst_width == 0 )
			x_scale = 1.0;
		else
			x_scale = (double)dst_width / (double)src_width;
	}

	if ( y_scale < 0.0 ) {
		if ( src_height == 0 || dst_height == 0 )
			y_scale = 1.0;
		else
			y_scale = (double)dst_height / (double)src_height;
	}

	if ( verbose )
		Message( "Scale factors %gx%g", x_scale, y_scale );

	/* Open frame buffer(s) for unbuffered input/output. */

	if ( src_width == 0 )
		src_width = hires ? 1024 : 512;		/* starting default */

	if ( src_height == 0 )
		src_height = hires ? 1024 : 512;	/* starting default */

	if ( (src_fbp = fb_open( src_file == NULL ? dst_file : src_file,
				 src_width, src_height
			       )
	     ) == FBIO_NULL
	   )
		Stretch_Fatal( "Couldn't open input image" );
	else	{
		register int	wt, ht;	/* actual frame buffer size */

		/* Use smaller input size in preference to requested size. */

		if ( (wt = fb_getwidth( src_fbp )) < src_width )
			src_width = wt;

		if ( (ht = fb_getheight( src_fbp )) < src_height )
			src_height = ht;

		if ( verbose )
			Message( "Source image %dx%d", src_width, src_height );

		if ( dst_width == 0 )
			dst_width = src_width * x_scale + EPSILON;

		if ( dst_height == 0 )
			dst_height = src_height * y_scale + EPSILON;

		if ( verbose )
			Message( "Requested output size %dx%d",
				 dst_width, dst_height
			       );

		if ( src_file == NULL
		     || (dst_file != NULL && strcmp( src_file, dst_file ) == 0)
		   )
			dst_fbp = src_fbp;	/* No No No Not a Second Time */
		else if ( (dst_fbp = fb_open( dst_file, dst_width, dst_height ))
		       == FBIO_NULL
			)
			Stretch_Fatal( "Couldn't open output frame buffer" );

		/* Use smaller output size in preference to requested size. */

		if ( (wt = fb_getwidth( dst_fbp )) < dst_width )
			dst_width = wt;

		if ( (ht = fb_getheight( dst_fbp )) < dst_height )
			dst_height = ht;

		if ( verbose )
			Message( "Destination image %dx%d",
				 dst_width, dst_height
			       );
	}

	/* Determine compression/expansion directions. */

	x_compress = x_scale < 1 - EPSILON;
	y_compress = y_scale < 1 - EPSILON;

	/* Allocate input/output scan line buffers.  These could overlap, but
	   I decided to keep them separate for simplicity.  The algorithms are
	   arranged so that source and destination can access the same image; if
	   at some future time offsets are supported, that would no longer hold.
	   calloc is used instead of malloc just to avoid integer overflow. */

	if ( (src_buf = (unsigned char *)calloc(
		       y_compress ? (int)(1 / y_scale + 1 - EPSILON) * src_width
				  : src_width,
					    sizeof(RGBpixel)
					  )
	     ) == NULL
	  || (dst_buf = (unsigned char *)calloc(
		       y_compress ? dst_width
				  : (int)(y_scale + 1 - EPSILON) * dst_width,
					    sizeof(RGBpixel)
					  )
	     ) == NULL
	   )
		Stretch_Fatal( "Insufficient memory for scan line buffers." );

#define	Src( x, y )	(&src_buf[(x) + src_width * (y) * sizeof(RGBpixel)])
#define	Dst( x, y )	(&dst_buf[(x) + dst_width * (y) * sizeof(RGBpixel)])

	/* Do the horizontal/vertical expansion/compression.  I wanted to merge
	   these but didn't like the extra bookkeeping overhead in the loops. */

	if ( x_compress && y_compress )
		{
		register int	src_x, src_y;	/* source rect. pixel coords. */
		register int	dst_x, dst_y;	/* destination pixel coords. */
		register int	top_x, top_y;	/* source rect. upper bounds */
		register int	bot_x, bot_y;	/* source rect. lower bounds */

		/* Compute coords. of source rectangle and destination pixel. */

		dst_y = 0;
    ccyloop:
		if ( dst_y >= dst_height )
			goto done;	/* that's all folks */

		bot_y = dst_y / y_scale + EPSILON;

		if ( (top_y = (dst_y + 1) / y_scale + EPSILON) > src_height )
			top_y = src_height;

		if ( top_y <= bot_y )
			{
			/* End of image. */

			/* Clear beginning of output scan line buffer. */

			dst_x = src_width * y_scale + EPSILON;

			if ( dst_x < dst_width )
				++dst_x;	/* sometimes needed */

			while ( --dst_x >= 0 )
				{
				assert(dst_x < dst_width);
				Dst( dst_x, 0 )[RED] = 0;
				Dst( dst_x, 0 )[GRN] = 0;
				Dst( dst_x, 0 )[BLU] = 0;
				}

			/* Clear out top margin. */

			for ( ; dst_y < dst_height; ++dst_y )
				if ( fb_write( dst_fbp, 0, dst_y,
					       (unsigned char *)Dst( 0, 0 ),
					       dst_width
					     ) == -1
				   )
					Stretch_Fatal( "Error writing top margin" );

			goto done;	/* that's all folks */
			}

		assert(0 <= bot_y && bot_y < top_y && top_y <= src_height);
		assert(0 <= dst_y && dst_y <= bot_y);
		assert(top_y - bot_y <= (int)(1 / y_scale + 1 - EPSILON));

		/* Fill input scan line buffer. */

		for ( src_y = bot_y; src_y < top_y; ++src_y )
			if ( fb_read( src_fbp, 0, src_y,
				      (unsigned char *)Src( 0, src_y - bot_y ),
				      src_width
				    ) == -1
			   )
				Stretch_Fatal( "Error reading scan line" );

		dst_x = 0;
    ccxloop:
		if ( dst_x >= dst_width )
			goto ccflush;

		bot_x = dst_x / x_scale + EPSILON;

		if ( (top_x = (dst_x + 1) / x_scale + EPSILON) > src_width )
			top_x = src_width;

		if ( top_x <= bot_x )
			{
    ccflush:		/* End of band; flush buffer. */

			if ( fb_write( dst_fbp, 0, dst_y,
				       (unsigned char *)Dst( 0, 0 ),
				       dst_width
				     ) == -1
			   )
				Stretch_Fatal( "Error writing scan line" );

			++dst_y;
			goto ccyloop;
			}

		assert(0 <= bot_x && bot_x < top_x && top_x <= src_width);
		assert(0 <= dst_x && dst_x <= bot_x);
		assert(top_x - bot_x <= (int)(1 / x_scale + 1 - EPSILON));

		/* Copy sample or averaged source pixel(s) to destination. */

		if ( sample )
			{
			Dst( dst_x, 0 )[RED] = Src( bot_x, 0 )[RED];
			Dst( dst_x, 0 )[GRN] = Src( bot_x, 0 )[GRN];
			Dst( dst_x, 0 )[BLU] = Src( bot_x, 0 )[BLU];
			}
		else	{
			int		sum[3];	/* pixel value accumulator */
			register float	tally;	/* # of pixels accumulated */

			/* "Read in" source rectangle and average pixels. */

			sum[RED] = sum[GRN] = sum[BLU] = 0;

			for ( src_y = top_y - bot_y; --src_y >= 0; )
				for ( src_x = bot_x; src_x < top_x; ++src_x )
					{
					sum[RED] += Src( src_x, src_y )[RED];
					sum[GRN] += Src( src_x, src_y )[GRN];
					sum[BLU] += Src( src_x, src_y )[BLU];
					}

			tally = (top_x - bot_x) * (top_y - bot_y);
			assert(tally > 0.0);
			Dst( dst_x, 0 )[RED] = sum[RED] / tally + 0.5;
			Dst( dst_x, 0 )[GRN] = sum[GRN] / tally + 0.5;
			Dst( dst_x, 0 )[BLU] = sum[BLU] / tally + 0.5;
			}

		++dst_x;
		goto ccxloop;
		}
	else if ( x_compress && !y_compress )
		{
		register int	src_x, src_y;	/* source rect. pixel coords. */
		register int	dst_x, dst_y;	/* dest. rect. pixel coords. */
		register int	bot_x, top_x;	/* source rectangle bounds */
		register int	bot_y, top_y;	/* destination rect. bounds */

		/* Compute coords. of source and destination rectangles. */

		src_y = (dst_height - 1) / y_scale + EPSILON;
    ceyloop:
		if ( src_y < 0 )
			goto done;	/* that's all folks */

		bot_y = src_y * y_scale + EPSILON;

		if ( (top_y = (src_y + 1) * y_scale + EPSILON) > dst_height )
			top_y = dst_height;

		assert(0 <= src_y && src_y <= bot_y && src_y < src_height);
		assert(bot_y < top_y && top_y <= dst_height);
		assert(top_y - bot_y <= (int)(y_scale + 1 - EPSILON));

		/* Fill input scan line buffer. */

		if ( fb_read( src_fbp, 0, src_y, (unsigned char *)Src( 0, 0 ),
			      src_width
			    ) == -1
		   )
			Stretch_Fatal( "Error reading scan line" );

		dst_x = 0;
    cexloop:
		if ( dst_x >= dst_width )
			goto ceflush;

		bot_x = dst_x / x_scale + EPSILON;

		if ( (top_x = (dst_x + 1) / x_scale + EPSILON) > src_width )
			top_x = src_width;

		if ( top_x <= bot_x )
			{
    ceflush:		/* End of band; flush buffer. */

			for ( dst_y = top_y; --dst_y >= bot_y; )
				if ( fb_write( dst_fbp, 0, dst_y,
					       (unsigned char *)Dst( 0, dst_y - bot_y
							      ),
					       dst_width
					     ) == -1
				   )
					Stretch_Fatal( "Error writing scan line" );

			--src_y;
			goto ceyloop;
			}

		assert(0 <= bot_x && bot_x < top_x && top_x <= src_width);
		assert(0 <= dst_x && dst_x <= bot_x);
		assert(top_x - bot_x <= (int)(1 / x_scale + 1 - EPSILON));

		/* Replicate sample or averaged source pixel(s) to dest. */

		if ( sample )
			for ( dst_y = top_y - bot_y; --dst_y >= 0; )
				{
				Dst( dst_x, dst_y )[RED] = Src( bot_x, 0 )[RED];
				Dst( dst_x, dst_y )[GRN] = Src( bot_x, 0 )[GRN];
				Dst( dst_x, dst_y )[BLU] = Src( bot_x, 0 )[BLU];
				}
		else	{
			int		sum[3];	/* pixel value accumulator */
			register float	tally;	/* # of pixels accumulated */

			/* "Read in" source rectangle and average pixels. */

			sum[RED] = sum[GRN] = sum[BLU] = 0;

			for ( src_x = bot_x; src_x < top_x; ++src_x )
				{
				sum[RED] += Src( src_x, 0 )[RED];
				sum[GRN] += Src( src_x, 0 )[GRN];
				sum[BLU] += Src( src_x, 0 )[BLU];
				}

			tally = top_x - bot_x;
			assert(tally > 0.0);
			sum[RED] = sum[RED] / tally + 0.5;
			sum[GRN] = sum[GRN] / tally + 0.5;
			sum[BLU] = sum[BLU] / tally + 0.5;

			for ( dst_y = top_y - bot_y; --dst_y >= 0; )
				{
				Dst( dst_x, dst_y )[RED] = sum[RED];
				Dst( dst_x, dst_y )[GRN] = sum[GRN];
				Dst( dst_x, dst_y )[BLU] = sum[BLU];
				}
			}

		++dst_x;
		goto cexloop;
		}
	else if ( !x_compress && y_compress )
		{
		register int	src_x, src_y;	/* source rect. pixel coords. */
		register int	dst_x, dst_y;	/* dest. rect. pixel coords. */
		register int	bot_x, top_x;	/* destination rect. bounds */
		register int	bot_y, top_y;	/* source rectangle bounds */

		assert(dst_width >= src_width);	/* (thus no right margin) */

		/* Compute coords. of source and destination rectangles. */

		dst_y = 0;
    ecyloop:
		if ( dst_y >= dst_height )
			goto done;	/* that's all folks */

		bot_y = dst_y / y_scale + EPSILON;

		if ( (top_y = (dst_y + 1) / y_scale + EPSILON) > src_height )
			top_y = src_height;

		if ( top_y <= bot_y )
			{
			/* End of image. */

			/* Clear output scan line buffer. */

			for ( dst_x = dst_width; --dst_x >= 0; )
				{
				Dst( dst_x, 0 )[RED] = 0;
				Dst( dst_x, 0 )[GRN] = 0;
				Dst( dst_x, 0 )[BLU] = 0;
				}

			/* Clear out top margin. */

			for ( ; dst_y < dst_height; ++dst_y )
				if ( fb_write( dst_fbp, 0, dst_y,
					       (unsigned char *)Dst( 0, 0 ),
					       dst_width
					     ) == -1
				   )
					Stretch_Fatal( "Error writing top margin" );

			goto done;	/* that's all folks */
			}

		assert(0 <= bot_y && bot_y < top_y && top_y <= src_height);
		assert(0 <= dst_y && dst_y <= bot_y);
		assert(top_y - bot_y <= (int)(1 / y_scale + 1 - EPSILON));

		/* Fill input scan line buffer. */

		for ( src_y = bot_y; src_y < top_y; ++src_y )
			if ( fb_read( src_fbp, 0, src_y,
				      (unsigned char *)Src( 0, src_y - bot_y ),
				      src_width
				    ) == -1
			   )
				Stretch_Fatal( "Error reading scan line" );

		src_x = (dst_width - 1) / x_scale + EPSILON;
    ecxloop:
		if ( src_x < 0 )
			{
			/* End of band; flush buffer. */
			if ( fb_write( dst_fbp, 0, dst_y,
				       (unsigned char *)Dst( 0, 0 ),
				       dst_width
				     ) == -1
			   )
				Stretch_Fatal( "Error writing scan line" );

			++dst_y;
			goto ecyloop;
			}

		bot_x = src_x * x_scale + EPSILON;

		if ( (top_x = (src_x + 1) * x_scale + EPSILON) > dst_width )
			top_x = dst_width;

		assert(0 <= src_x && src_x <= bot_x && src_x <= src_width);
		assert(bot_x < top_x && top_x <= dst_width);
		assert(top_x - bot_x <= (int)(x_scale + 1 - EPSILON));

		/* Replicate sample or averaged source pixel(s) to dest. */

		if ( sample )
			for ( dst_x = top_x; --dst_x >= bot_x; )
				{
				Dst( dst_x, 0 )[RED] = Src( src_x, 0 )[RED];
				Dst( dst_x, 0 )[GRN] = Src( src_x, 0 )[GRN];
				Dst( dst_x, 0 )[BLU] = Src( src_x, 0 )[BLU];
				}
		else	{
			int		sum[3];	/* pixel value accumulator */
			register float	tally;	/* # of pixels accumulated */

			/* "Read in" source rectangle and average pixels. */

			sum[RED] = sum[GRN] = sum[BLU] = 0;

			for ( src_y = top_y - bot_y; --src_y >= 0; )
				{
				sum[RED] += Src( src_x, src_y )[RED];
				sum[GRN] += Src( src_x, src_y )[GRN];
				sum[BLU] += Src( src_x, src_y )[BLU];
				}

			tally = top_y - bot_y;
			assert(tally > 0.0);
			sum[RED] = sum[RED] / tally + 0.5;
			sum[GRN] = sum[GRN] / tally + 0.5;
			sum[BLU] = sum[BLU] / tally + 0.5;

			for ( dst_x = top_x; --dst_x >= bot_x; )
				{
				Dst( dst_x, 0 )[RED] = sum[RED];
				Dst( dst_x, 0 )[GRN] = sum[GRN];
				Dst( dst_x, 0 )[BLU] = sum[BLU];
				}
			}

		--src_x;
		goto ecxloop;
		}
	else if ( !x_compress && !y_compress )
		{
		register int	src_x, src_y;	/* source pixel coords. */
		register int	dst_x, dst_y;	/* dest. rect. pixel coords. */
		register int	bot_x, bot_y;	/* dest. rect. lower bounds */
		register int	top_x, top_y;	/* dest. rect. upper bounds */

		assert(dst_width >= src_width);	/* (thus no right margin) */

		/* Compute coords. of source and destination rectangles. */

		src_y = (dst_height - 1) / y_scale + EPSILON;
    eeyloop:
		if ( src_y < 0 )
			goto done;	/* that's all folks */

		bot_y = src_y * y_scale + EPSILON;

		if ( (top_y = (src_y + 1) * y_scale + EPSILON) > dst_height )
			top_y = dst_height;

		assert(0 <= src_y && src_y <= bot_y && src_y < src_height);
		assert(bot_y < top_y && top_y <= dst_height);
		assert(top_y - bot_y <= (int)(y_scale + 1 - EPSILON));

		/* Fill input scan line buffer. */
		if ( fb_read( src_fbp, 0, src_y, (unsigned char *)Src( 0, 0 ),
			      src_width
			    ) == -1
		   )
			Stretch_Fatal( "Error reading scan line" );

		src_x = (dst_width - 1) / x_scale + EPSILON;
    eexloop:
		if ( src_x < 0 )
			{
			/* End of band; flush buffer. */

			for ( dst_y = top_y; --dst_y >= bot_y; )
				if ( fb_write( dst_fbp, 0, dst_y,
					       (unsigned char *)Dst( 0, dst_y - bot_y
							      ),
					       dst_width
					     ) == -1
				   )
					Stretch_Fatal( "Error writing scan line" );

			--src_y;
			goto eeyloop;
			}

		bot_x = src_x * x_scale + EPSILON;

		if ( (top_x = (src_x + 1) * x_scale + EPSILON) > dst_width )
			top_x = dst_width;

		assert(0 <= src_x && src_x <= bot_x && src_x <= src_width);
		assert(bot_x < top_x && top_x <= dst_width);
		assert(top_x - bot_x <= (int)(x_scale + 1 - EPSILON));

		/* Replicate sample source pixel to destination. */

		for ( dst_y = top_y - bot_y; --dst_y >= 0; )
			for ( dst_x = top_x; --dst_x >= bot_x; )
				{
				Dst( dst_x, dst_y )[RED] = Src( src_x, 0 )[RED];
				Dst( dst_x, dst_y )[GRN] = Src( src_x, 0 )[GRN];
				Dst( dst_x, dst_y )[BLU] = Src( src_x, 0 )[BLU];
				}

		--src_x;
		goto eexloop;
		}

    done:
	/* Close the frame buffers. */

	assert(src_fbp != FBIO_NULL && dst_fbp != FBIO_NULL);

	if ( fb_close( src_fbp ) == -1 )
		Message( "Error closing input frame buffer" );

	if ( dst_fbp != src_fbp && fb_close( dst_fbp ) == -1 )
		Message( "Error closing output frame buffer" );

	bu_exit( EXIT_SUCCESS, NULL );
	}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.23
log
@refactor the handful of failure and printing functions that are common to gif-fb, fbfade, and fbstretch into their own ioutil.c file to reduce the repetition. clean-up the interface while we're at it with some constness.
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.22 2007/12/04 00:56:25 brlcad Exp $ (BRL)";
d171 1
d173 2
d176 2
d179 2
d182 2
d185 1
@


14.22
log
@too many lines
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.21 2007/12/03 22:57:58 brlcad Exp $ (BRL)";
a107 1
static char	*arg0;			/* argv[0] for error message */
d126 2
a127 9

static char *
Simple(char *path)
{
	register char	*s;		/* -> past last '/' in path */

	s = strrchr( path, '/' );
	return s == NULL || *++s == '\0' ? path : s;
	}
d131 1
a131 1
VMessage(const char *format, va_list ap)
d133 19
a151 38
	(void)fprintf( stderr, "%s: ", arg0 );
	(void)vfprintf( stderr, format, ap );
	(void)putc( '\n', stderr );
	(void)fflush( stderr );
	}


static void
Message( const char *format, ... )
	{
	va_list		ap;

	va_start( ap, format );
	VMessage( format, ap );
	va_end( ap );
	}


static void
Fatal( const char *format, ... )
	{
	va_list		ap;

	va_start( ap, format );
	VMessage( format, ap );
	va_end( ap );

	if ( src_fbp != FBIO_NULL && fb_close( src_fbp ) == -1 )
		Message( "Error closing input frame buffer" );

	if ( dst_fbp != FBIO_NULL && dst_fbp != src_fbp
	  && fb_close( dst_fbp ) == -1
	   )
		Message( "Error closing output frame buffer" );

	bu_exit( EXIT_FAILURE, NULL );
	/*NOTREACHED*/
	}
d160 2
a161 2
	Fatal( "Interrupted by signal %d", sig );
	}
a185 3

	arg0 = Simple( argv[0] );	/* save for possible error message */

d277 1
a277 1
			Fatal( "Usage: %s\n%s\n%s", USAGE1, USAGE2, USAGE3 );
d285 1
a285 1
			Fatal( "Can't handle multiple output frame buffers!" );
d326 1
a326 1
		Fatal( "Couldn't open input image" );
d359 1
a359 1
			Fatal( "Couldn't open output frame buffer" );
d399 1
a399 1
		Fatal( "Insufficient memory for scan line buffers." );
d453 1
a453 1
					Fatal( "Error writing top margin" );
d470 1
a470 1
				Fatal( "Error reading scan line" );
d491 1
a491 1
				Fatal( "Error writing scan line" );
d564 1
a564 1
			Fatal( "Error reading scan line" );
d587 1
a587 1
					Fatal( "Error writing scan line" );
d680 1
a680 1
					Fatal( "Error writing top margin" );
d697 1
a697 1
				Fatal( "Error reading scan line" );
d709 1
a709 1
				Fatal( "Error writing scan line" );
d795 1
a795 1
			Fatal( "Error reading scan line" );
d810 1
a810 1
					Fatal( "Error writing scan line" );
@


14.21
log
@c89 simplification.  assume stdarg is a given.
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.20 2007/12/03 22:29:29 brlcad Exp $ (BRL)";
a164 2
	va_start( ap );
	format = va_arg( ap, char * );
@


14.20
log
@const lables
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.19 2007/12/03 22:27:16 brlcad Exp $ (BRL)";
d84 7
a90 11
#include	<stdlib.h>
#include	<stdio.h>
#include	<assert.h>
#include	<signal.h>
#include	<string.h>

#if HAVE_STDARG_H
#  include	<stdarg.h>
#else
#  include	<varargs.h>
#endif
@


14.19
log
@don't need the HAVE_STDARG_H checks any more, keep it simple
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.18 2007/12/01 21:47:12 brlcad Exp $ (BRL)";
d143 1
a143 1
VMessage(char *format, va_list ap)
d153 1
a153 1
Message( char *format, ... )
d164 1
a164 1
Fatal( char *format, ... )
@


14.18
log
@more flawfinder level 4 quellage, mostly str*() buffer boundary limits.
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.17 2007/11/21 20:49:07 erikgreenwald Exp $ (BRL)";
a151 1
#if defined(HAVE_STDARG_H)
a153 5
#else
static void
Message( va_alist )
	va_dcl
#endif
a154 3
#if !defined(HAVE_STDARG_H)
	register char	*format;	/* must be picked up by va_arg() */
#endif
a156 1
#if defined(HAVE_STDARG_H)
a157 4
#else
	va_start( ap );
	format = va_arg( ap, char * );
#endif
a162 1
#if defined(HAVE_STDARG_H)
a164 5
#else
static void
Fatal( va_alist )
	va_dcl
#endif
a165 3
#if !defined(HAVE_STDARG_H)
	register char	*format;	/* must be picked up by va_arg() */
#endif
a167 1
#if defined(HAVE_STDARG_H)
a168 1
#else
a170 1
#endif
@


14.17
log
@pass bu_exit a NULL instead of an empty string
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.16 2007/11/21 19:09:24 erikgreenwald Exp $ (BRL)";
a145 8
#if !defined(HAVE_VPRINTF)
	(void)fprintf( stderr, format,	/* kludge city */
		       ((int *)ap)[0], ((int *)ap)[1],
		       ((int *)ap)[2], ((int *)ap)[3],
		       ((int *)ap)[4], ((int *)ap)[5],
		       ((int *)ap)[6], ((int *)ap)[7]
		     );
#else
a146 1
#endif
@


14.16
log
@exit->bu_exit where applicable
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.15 2007/09/15 16:23:06 brlcad Exp $ (BRL)";
d217 1
a217 1
	bu_exit( EXIT_FAILURE, "" );
d921 1
a921 1
	bu_exit( EXIT_SUCCESS, "" );
@


14.15
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.14 2007/04/18 02:54:01 brlcad Exp $ (BRL)";
d217 1
a217 1
	exit( EXIT_FAILURE );
d921 1
a921 1
	exit( EXIT_SUCCESS );
@


14.14
log
@rely on EXIT_SUCCESS/FAILURE even if it is c99; use bool_t/1/0 instead of bool/true/false.
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.13 2007/01/23 01:13:28 brlcad Exp $ (BRL)";
d88 2
a89 5
#ifdef HAVE_STRING_H
#  include	<string.h>
#else
#  include	<strings.h>
#endif
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.12 2007/01/20 14:36:48 brlcad Exp $ (BRL)";
d111 1
d113 1
a113 12
#ifndef EXIT_SUCCESS
#define	EXIT_SUCCESS	0
#endif
#ifndef EXIT_FAILURE
#define	EXIT_FAILURE	1
#endif

typedef int	bool;
#define	false	0
#define	true	1

#define	EPSILON	0.0001			/* fudge for converting float to int */
d116 3
a118 3
static bool	hires = false;		/* set for 1Kx1K; clear for 512x512 */
static bool	sample = false;		/* set: sampling; clear: averaging */
static bool	verbose = false;	/* set for size info printout */
d121 2
a122 2
static bool	x_compress;		/* set iff compressing horizontally */
static bool	y_compress;		/* set iff compressing vertically */
d262 1
a262 1
		register bool	errors = false;
d268 1
a268 1
				errors = true;
d272 1
a272 1
				sample = true;
d284 1
a284 1
				hires = true;
d289 1
a289 1
					errors = true;
d295 1
a295 1
					errors = true;
d303 1
a303 1
					errors = true;
d311 1
a311 1
					errors = true;
d316 1
a316 1
				verbose = true;
d321 1
a321 1
					errors = true;
d327 1
a327 1
					errors = true;
d335 1
a335 1
					errors = true;
d344 1
a344 1
					errors = true;
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d79 1
a79 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.11 2006/01/29 00:51:54 brlcad Exp $ (BRL)";
@


14.11
log
@more libbu memory management and header cleanup
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.10 2006/01/28 00:36:28 brlcad Exp $ (BRL)";
@


14.10
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.9 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
a84 1

a498 14
#if 0	/* (already done by calloc()!) */
		/* Clear end of output scan line buffer to background. */

		for ( dst_x = src_width * y_scale + EPSILON;
		      dst_x < dst_width;
		      ++dst_x
		    )	{
			assert(dst_x >= 0);
			Dst( dst_x, 0 )[RED] = 0;
			Dst( dst_x, 0 )[GRN] = 0;
			Dst( dst_x, 0 )[BLU] = 0;
			}
#endif

a626 17
#if 0	/* (already done by calloc()!) */
		/* Clear end of output scan line buffer to background. */

		for ( dst_x = src_width * y_scale + EPSILON;
		      dst_x < dst_width;
		      ++dst_x
		    )
			for ( dst_y = (int)(y_scale + 1 - EPSILON);
			      --dst_y >= 0;
			    )	{
				assert(dst_x >= 0 && dst_y < dst_height);
				Dst( dst_x, dst_y )[RED] = 0;
				Dst( dst_x, dst_y )[GRN] = 0;
				Dst( dst_x, dst_y )[BLU] = 0;
				}
#endif

@


14.9
log
@update copyright to 2006
@
text
@d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.8 2005/11/11 21:41:59 brlcad Exp $ (BRL)";
a84 3
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
d86 2
a89 2
#include	<stdio.h>
#include	<stdlib.h>
d100 3
@


14.8
log
@get rid of the NDEBUG hacking, configure provides for it now.  clean up the include/header ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.7 2005/10/23 04:44:30 brlcad Exp $ (BRL)";
@


14.7
log
@trailing ws
@
text
@d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.6 2005/09/21 19:00:27 brlcad Exp $ (BRL)";
a82 5
#define	USAGE1	"fbstretch [ -h ] [ -s size ] [ -w width ] [ -n height ]"
#define	USAGE2	"\t[ -f in_fb_file ] [ -a ] [ -v ] [ -x x_sc ] [ -y y_sc ]"
#define	USAGE3 "\t[ -S size ] [ -W width ] [ -N height ] [ [ -F ] out_fb_file ]"
#define	OPTSTR	"af:F:hn:N:s:S:vw:W:x:y:"

d86 1
a86 1
# include <unistd.h>
a88 3
#ifndef DEBUG
#define	NDEBUG
#endif
d94 1
a94 1
#include	<string.h>
d96 1
a96 1
#include	<strings.h>
d99 1
a99 1
#include	<stdarg.h>
d101 1
a101 1
#include	<varargs.h>
d108 6
@


14.6
log
@needs bu.h for bu_getopt
@
text
@d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.5 2005/09/21 17:17:18 brlcad Exp $ (BRL)";
d93 1
a93 1
                                                                                                                                                                            
@


14.5
log
@use bu_optarg, bu_optind and bu_getopt
@
text
@d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.4 2005/09/09 05:07:46 brlcad Exp $ (BRL)";
d113 1
@


14.4
log
@consistency, BRL-CAD not BRL CAD
@
text
@d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.3 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
d277 1
a277 1
		while ( (c = getopt( argc, argv, OPTSTR )) != EOF )
d289 1
a289 1
				src_file = optarg;
d293 1
a293 1
				dst_file = optarg;
d301 1
a301 1
				if ( (src_height = atoi( optarg )) <= 0 )
d307 1
a307 1
				if ( (dst_height = atoi( optarg )) <= 0 )
d313 1
a313 1
				if ( (src_height = src_width = atoi( optarg ))
d321 1
a321 1
				if ( (dst_height = dst_width = atoi( optarg ))
d333 1
a333 1
				if ( (src_width = atoi( optarg )) <= 0 )
d339 1
a339 1
				if ( (dst_width = atoi( optarg )) <= 0 )
d345 1
a345 1
				if ( (x_scale = atof( optarg )) <= 0 )
d354 1
a354 1
				if ( (y_scale = atof( optarg )) <= 0 )
d367 1
a367 1
	if ( optind < argc )		/* dst_file */
d369 1
a369 1
		if ( optind < argc - 1 || dst_file != NULL )
d375 1
a375 1
		dst_file = argv[optind];
@


14.3
log
@update copyright to 2005
@
text
@d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/fb/fbstretch.c,v 14.2 2004/12/18 06:09:12 morrison Exp $ (BRL)";
d113 1
a113 1
#include "fb.h"			/* BRL CAD package libfb.a interface */
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d80 1
a80 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d83 5
d91 5
a95 1
#  include <unistd.h>
a96 1

d102 1
a102 1
#  include	<string.h>
d104 1
a104 1
#  include	<strings.h>
d107 1
a107 1
#  include	<stdarg.h>
d109 1
a109 1
#  include	<varargs.h>
d113 1
a113 8
#include "bu.h"
#include "fb.h"			/* BRL-CAD package libfb.a interface */


#define	USAGE1	"fbstretch [ -h ] [ -s size ] [ -w width ] [ -n height ]"
#define	USAGE2	"\t[ -f in_fb_file ] [ -a ] [ -v ] [ -x x_sc ] [ -y y_sc ]"
#define	USAGE3 "\t[ -S size ] [ -W width ] [ -N height ] [ [ -F ] out_fb_file ]"
#define	OPTSTR	"af:F:hn:N:s:S:vw:W:x:y:"
d277 1
a277 1
		while ( (c = bu_getopt( argc, argv, OPTSTR )) != EOF )
d289 1
a289 1
				src_file = bu_optarg;
d293 1
a293 1
				dst_file = bu_optarg;
d301 1
a301 1
				if ( (src_height = atoi( bu_optarg )) <= 0 )
d307 1
a307 1
				if ( (dst_height = atoi( bu_optarg )) <= 0 )
d313 1
a313 1
				if ( (src_height = src_width = atoi( bu_optarg ))
d321 1
a321 1
				if ( (dst_height = dst_width = atoi( bu_optarg ))
d333 1
a333 1
				if ( (src_width = atoi( bu_optarg )) <= 0 )
d339 1
a339 1
				if ( (dst_width = atoi( bu_optarg )) <= 0 )
d345 1
a345 1
				if ( (x_scale = atof( bu_optarg )) <= 0 )
d354 1
a354 1
				if ( (y_scale = atof( bu_optarg )) <= 0 )
d367 1
a367 1
	if ( bu_optind < argc )		/* dst_file */
d369 1
a369 1
		if ( bu_optind < argc - 1 || dst_file != NULL )
d375 1
a375 1
		dst_file = argv[bu_optind];
@


14.2
log
@assign copyright and GPL license
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbstretch.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 1
/*
d80 1
a80 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbstretch.c,v 1.6 2004/09/08 20:31:24 kermit Exp $ (BRL)";
@


1.6
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d59 1
a59 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbstretch.c,v 1.5 2004/09/03 23:30:56 morrison Exp $ (BRL)";
d949 10
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d59 1
a59 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbstretch.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d79 1
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d59 1
a59 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbstretch.c,v 1.3 2004/06/09 17:56:22 erikg Exp $ (BRL)";
d79 1
a79 1
#ifdef USE_STRING_H
@


1.3
log
@fix missing header issues
@
text
@d59 1
a59 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/fb/fbstretch.c,v 1.2 2004/06/08 22:04:12 morrison Exp $ (BRL)";
d67 1
a67 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d59 1
a59 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d71 4
a74 2


@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d59 1
a59 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/fbstretch.c,v 11.7 2004/05/10 15:30:42 erikg Exp $ (BRL)";
a90 1
#include "externs.h"
@

