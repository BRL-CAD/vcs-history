head	14.16;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.4
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.6
	rel-7-0-branch:1.6.0.2
	rel-7-0:1.6;
locks; strict;
comment	@ * @;


14.16
date	2007.12.16.18.53.48;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.11.21.20.49.07;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.19.09.24;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.09.15.16.23.06;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.08.29.18.28.16;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.07.26.01.13.53;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.31;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.49;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.21.19.00.27;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.17.17.18;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.30.21;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2004.12.21.06.38.19;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.06.09.12;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.08.20.31.24;	author kermit;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.17.56.22;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.12;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.03;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.16
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                       O R L E - F B . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file orle-fb.c
 *
 *  Display an old RLE format image on a framebuffer
 *
 *  Author -
 *	Gary S. Moss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.15 2007/11/21 20:49:07 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"
#include "fb.h"
#include "orle.h"

static char	*usage[] =
	{
"Usage: orle-fb [-Otdv] [-b (rgbwBG)] [-F Frame_buffer] [-p X Y] [file.rle]",
"",
"If no rle file is specifed, orle-fb will read its standard input.",
"If the environment variable FB_FILE is set, its value will be used",
"	to specify the framebuffer file or device to write to.",
0
	};

static FBIO	*fbp;
static FILE	*fp;
static RGBpixel	bgpixel;
static int	bgflag = 0;
static int	olflag = 0;
static int	pars_Argv(int argc, register char **argv);
static int	xlen = -1, ylen = -1;
static int	xpos = -1, ypos = -1;
static void	prnt_Cmap(ColorMap *cmap);
static void	prnt_Usage(void);
static int	width = 512;
static int	height = 512;
static int	topdown = 0;
static int	pixels_per_buffer;
static char	*fb_file = (char *)NULL;

void		fill_Buffer(register char *dest, register char *src, register int scan_bytes, register int repeat);

/*	m a i n ( )							*/
int
main(int argc, char **argv)
{	register int	y;
		register int	lines_per_buffer;
		register unsigned char *scanbuf;
		static RGBpixel	bg_scan[8192+1];
		static ColorMap	cmap;
		int		get_flags;

	fp = stdin;
	if( ! pars_Argv( argc, argv ) || isatty(fileno(fp)) )
		{
		prnt_Usage();
		return	1;
		}
	if( bgflag )  {
		/* User has supplied his own background */
		if( rle_rhdr( fp, &get_flags, RGBPIXEL_NULL ) == -1 )
			return 1;
	} else {
		if( rle_rhdr( fp, &get_flags, bgpixel ) == -1 )
		return	1;
	}

	rle_rlen( &xlen, &ylen );
	if( xpos < 0 || ypos < 0 )
		rle_rpos( &xpos, &ypos );
	else
		rle_wpos( xpos, ypos, 0 );

	/* Automatic selection of high res. device.			*/
	if( xpos + xlen > 512 || ypos + ylen > 512 )
		width = height = 1024;
	if( xpos + xlen > width )
		xlen = width - xpos;
	if( ypos + ylen > height )
		ylen = height - ypos;
	rle_wlen( xlen, ylen, 0 );

	if( (fbp = fb_open( fb_file, width, height )) == NULL )  {
		bu_exit(12, NULL);
	}

	if( topdown )
		pixels_per_buffer = width * height;
	else
		pixels_per_buffer = width * 64;
	scanbuf = RGBPIXEL_NULL;
	while( scanbuf == RGBPIXEL_NULL && pixels_per_buffer > 0 )  {
		scanbuf = (unsigned char *)malloc(pixels_per_buffer*sizeof(RGBpixel));
		if( scanbuf == RGBPIXEL_NULL )  {
			pixels_per_buffer >>= 1;
			continue;
		}
		break;
	}
	if( scanbuf == RGBPIXEL_NULL )  {
		fprintf(stderr," rle-fb:  unable to malloc pixel buffer\n");
		return(1);
	}

	lines_per_buffer = pixels_per_buffer / width;	/* # of full scanlines in buffer */
	pixels_per_buffer = lines_per_buffer * width;

	if( rle_verbose )
		(void) fprintf( stderr,
				"Background is %d %d %d\n",
				bgpixel[RED], bgpixel[GRN], bgpixel[BLU]
				);

	/* If color map provided, use it, else go with standard map. */
	if( ! (get_flags & NO_COLORMAP) )
		{
		if( rle_verbose && ! olflag )
			(void) fprintf( stderr,
					"Loading saved color map from file\n"
					);
		if( rle_rmap( fp, &cmap ) == -1 )
			return	1;
		if( rle_verbose )
			prnt_Cmap( &cmap );
		if( ! olflag )
			{
			/* User-supplied map */
			if( rle_verbose )
				(void) fprintf( stderr,
					"Writing color map to framebuffer\n"
						);
			if( fb_wmap( fbp, &cmap ) == -1 )
				return	1;
			}
		}
	else
	if( ! olflag )
		{
		if( rle_verbose )
			(void) fprintf( stderr,
					"Creating standard color map\n"
					);
		if( fb_wmap( fbp, COLORMAP_NULL ) == -1 )
			return	1;
		}
	/* Fill a DMA buffer buffer with background */
	if( ! olflag && (get_flags & NO_BOX_SAVE) )
		{	register int	i;
			register RGBpixel	*to;
		to = bg_scan;
		for( i = 0; i < width; i++,to++ )  {
			COPYRGB( *to, bgpixel );
			}
		}

#ifndef SIMPLE
	{	register int	page_fault = 1;
		register int	dirty_flag = 1;
		int		ymax = ypos + (ylen-1);
		int		start_y = 0;
	for( y = 0; y < width; y++ )  {
		if( page_fault )  {
			start_y = y;
			if( olflag )  {
				/* Overlay - read cluster from fb.	*/
				if( fb_read( fbp, 0, y, scanbuf, pixels_per_buffer ) == -1 )
					return	1;
			} else
			if( (get_flags & NO_BOX_SAVE) && dirty_flag )
				fill_Buffer(	(char *) scanbuf,
						(char *) bg_scan,
						width*sizeof(RGBpixel),
						lines_per_buffer
						);
			dirty_flag = 0;
			page_fault = 0;
		}
		if( y >= ypos && y <= ymax )  {
			if( rle_decode_ln( fp,
			    scanbuf[(y%lines_per_buffer)*width*sizeof(RGBpixel)] ) == -1 )
				break;		/* not return */
			dirty_flag = 1;
		}
		page_fault = ((y%lines_per_buffer)==(lines_per_buffer-1));
		if( page_fault )  {
			if( fb_write( fbp, 0, start_y, scanbuf, pixels_per_buffer ) == -1 )
				return	1;
		}
	}
	if( page_fault == 0 )  {
		/* Write out the residue, a short buffer */
		if( fb_write( fbp, 0, start_y, scanbuf, (y-start_y)*width ) == -1 )
			return(1);
	}
	} /* end block */
#else
	/* Simplified version, for testing */
	for( y = 0; y < height; y++ )  {
		if( olflag )  {
			/* Overlay - read cluster from fb.	*/
			if( fb_read( fbp, 0, y, scanbuf, width ) == -1 )
				return	1;
		} else {
			if( (get_flags & NO_BOX_SAVE) )
				fill_Buffer(	(char *) scanbuf,
				(char *) bg_scan,
				width*sizeof(RGBpixel),
				1 );
		}
		if( y <= ypos+ylen && y >= ypos )
			if( rle_decode_ln( fp, scanbuf ) == -1 )
				return	1;
		if( fb_write( fbp, 0, y, scanbuf, width ) == -1 )
			return	1;
	}
#endif

	/* Write background pixel in agreed-upon place */
	(void)fb_write( fbp, 1, 1, bgpixel, 1 );

	fb_close( fbp );
	return	0;
	}

/*	f i l l _ B u f f e r ( )
	Fill cluster buffer from scanline (as fast as possible).
 */
void
fill_Buffer(register char *dest, register char *src, register int scan_bytes, register int repeat)
{	register int	i;
	for( i = 0; i < repeat; ++i )
		{
		memcpy(dest, src, scan_bytes);
		dest += scan_bytes;
		}
	return;
	}

/*	p a r s _ A r g v ( )						*/
static int
pars_Argv(int argc, register char **argv)
{	register int	c;
	/* Parse options.						*/
	while( (c = bu_getopt( argc, argv, "tOF:b:dp:v" )) != EOF )
		{
		switch( c )
			{
		case 't':
			/* Top-down mode */
			topdown = 1;
			break;
		case 'O' : /* Overlay mode.				*/
			olflag = 1;
			break;
		case 'b' : /* User-specified background.		*/
			bgflag = bu_optarg[0];
			switch( bgflag )
				{
			case 'r':
				bgpixel[RED] = 255;
				break;
			case 'g':
				bgpixel[GRN] = 255;
				break;
			case 'b':
				bgpixel[BLU] = 255;
				break;
			case 'w':
				bgpixel[RED] =
				bgpixel[GRN] =
				bgpixel[BLU] = 255;
				break;
			case 'B':		/* Black */
				break;
			case 'G':		/* 18% grey, for alignments */
				bgpixel[RED] =
				bgpixel[GRN] =
				bgpixel[BLU] = 255.0 * 0.18;
				break;
			default:
				(void) fprintf( stderr,
						"Background '%c' unknown\n",
						bgflag
						);
				bgflag = 0;
				break;
				} /* End switch */
			break;
		case 'd' :
			rle_debug = 1;
			break;
		case 'p' :
			if( argc - bu_optind < 2 )
				{
				(void) fprintf( stderr,
				"-p option requires an X and Y argument!\n"
						);
				return	0;
				}
			xpos = atoi( bu_optarg );
			ypos = atoi( argv[bu_optind++] );
			break;
		case 'v' :
			rle_verbose = 1;
			break;
		case 'F' : fb_file = bu_optarg;
			break;
		case '?' :
			return	0;
			} /* end switch */
		} /* end while */

	if( argv[bu_optind] != NULL )
		if( (fp = fopen( argv[bu_optind], "r" )) == NULL )
			{
			(void) fprintf( stderr,
					"Can't open %s for reading!\n",
					argv[bu_optind]
					);
			return	0;
			}
	if( argc > ++bu_optind )
		{
		(void) fprintf( stderr, "Too many arguments!\n" );
		return	0;
		}
	return	1;
	}

/*	p r n t _ U s a g e ( )
	Print usage message.
 */
static void
prnt_Usage(void)
{	register char	**p = usage;
	while( *p )
		(void) fprintf( stderr, "%s\n", *p++ );
	return;
	}

static void
prnt_Cmap(ColorMap *cmap)
{	register unsigned short	*cp;
		register int	i;
	(void) fprintf( stderr, "\t\t\t_________ Color map __________\n" );
	(void) fprintf( stderr, "Red segment :\n" );
	for( i = 0, cp = cmap->cm_red; i < 16; ++i, cp += 16 )
		{
		(void) fprintf( stderr,
	"%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n",
	/* 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 */
				cp[0],
				cp[1],
				cp[2],
				cp[3],
				cp[4],
				cp[5],
				cp[6],
				cp[7],
				cp[8],
				cp[9],
				cp[10],
				cp[11],
				cp[12],
				cp[13],
				cp[14],
				cp[15]
				);
		}
	(void) fprintf( stderr, "Green segment :\n" );
	for( i = 0, cp = cmap->cm_green; i < 16; ++i, cp += 16 )
		{
		(void) fprintf( stderr,
	"%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n",
	/* 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 */
				cp[0],
				cp[1],
				cp[2],
				cp[3],
				cp[4],
				cp[5],
				cp[6],
				cp[7],
				cp[8],
				cp[9],
				cp[10],
				cp[11],
				cp[12],
				cp[13],
				cp[14],
				cp[15]
				);
		}
	(void) fprintf( stderr, "Blue segment :\n" );
	for( i = 0, cp = cmap->cm_blue; i < 16; ++i, cp += 16 )
		{
		(void) fprintf( stderr,
	"%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n",
	/* 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 */
				cp[0],
				cp[1],
				cp[2],
				cp[3],
				cp[4],
				cp[5],
				cp[6],
				cp[7],
				cp[8],
				cp[9],
				cp[10],
				cp[11],
				cp[12],
				cp[13],
				cp[14],
				cp[15]
				);
		}
	return;
	}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.14 2007/11/21 19:09:24 erikgreenwald Exp $ (BRL)";
d267 1
a267 1
		bcopy( src, dest, scan_bytes );
@


14.14
log
@exit->bu_exit where applicable
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.13 2007/09/15 16:23:06 brlcad Exp $ (BRL)";
d118 1
a118 1
		bu_exit(12, "");
@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.12 2007/08/29 18:28:16 erikgreenwald Exp $ (BRL)";
d118 1
a118 1
		exit(12);
@


14.12
log
@this is orle-fb, not rle-fb.
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.11 2007/07/26 01:13:53 brlcad Exp $ (BRL)";
a34 3
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif
a37 1
#ifdef HAVE_STRING_H
d39 3
a41 2
#else
#include <strings.h>
@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.10 2007/01/23 01:13:31 brlcad Exp $ (BRL)";
d56 1
a56 1
"If no rle file is specifed, rle-fb will read its standard input.",
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a27 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.9 2007/01/20 14:36:49 brlcad Exp $ (BRL)";
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.8 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
@


14.8
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.7 2005/10/23 04:44:30 brlcad Exp $ (BRL)";
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.6 2005/09/21 19:00:27 brlcad Exp $ (BRL)";
@


14.6
log
@needs bu.h for bu_getopt
@
text
@d28 1
a28 1
 *  
d33 1
a33 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.5 2005/09/21 17:17:18 brlcad Exp $ (BRL)";
d44 1
a44 1
                                                                                                                                                                            
d416 1
a416 1
		(void) fprintf( stderr, 
@


14.5
log
@use bu_optarg, bu_optind and bu_getopt
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.4 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
d54 1
@


14.4
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.3 2004/12/21 06:38:19 morrison Exp $ (BRL)";
d286 1
a286 1
	while( (c = getopt( argc, argv, "tOF:b:dp:v" )) != EOF )
d298 1
a298 1
			bgflag = optarg[0];
d335 1
a335 1
			if( argc - optind < 2 )
d342 2
a343 2
			xpos = atoi( optarg );
			ypos = atoi( argv[optind++] );
d348 1
a348 1
		case 'F' : fb_file = optarg;
d355 2
a356 2
	if( argv[optind] != NULL )
		if( (fp = fopen( argv[optind], "r" )) == NULL )
d360 1
a360 1
					argv[optind]
d364 1
a364 1
	if( argc > ++optind )
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *
d33 1
a33 1
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d44 1
a44 1

a53 1
#include "bu.h"
d286 1
a286 1
	while( (c = bu_getopt( argc, argv, "tOF:b:dp:v" )) != EOF )
d298 1
a298 1
			bgflag = bu_optarg[0];
d335 1
a335 1
			if( argc - bu_optind < 2 )
d342 2
a343 2
			xpos = atoi( bu_optarg );
			ypos = atoi( argv[bu_optind++] );
d348 1
a348 1
		case 'F' : fb_file = bu_optarg;
d355 2
a356 2
	if( argv[bu_optind] != NULL )
		if( (fp = fopen( argv[bu_optind], "r" )) == NULL )
d360 1
a360 1
					argv[bu_optind]
d364 1
a364 1
	if( argc > ++bu_optind )
d415 1
a415 1
		(void) fprintf( stderr,
@


14.3
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.2 2004/12/18 06:09:12 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL license
@
text
@a33 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 2
/*
 *			O R L E - F B . C
d39 1
a39 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 1.6 2004/09/08 20:31:24 kermit Exp $ (BRL)";
@


1.6
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 1.5 2004/09/03 23:30:56 morrison Exp $ (BRL)";
d445 10
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d29 1
d35 1
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 1.3 2004/06/09 17:56:22 erikg Exp $ (BRL)";
d29 1
a29 1
#ifdef USE_STRING_H
@


1.3
log
@fix missing header issues
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 1.2 2004/06/08 22:04:12 morrison Exp $ (BRL)";
d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d26 4
a29 2


@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: orle-fb.c,v 11.9 2004/05/10 15:30:42 erikg Exp $ (BRL)";
a34 1
#include "externs.h"			/* For getopt() */
@

