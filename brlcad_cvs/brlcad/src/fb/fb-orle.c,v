head	14.15;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.4
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.9
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.15
date	2007.11.21.20.49.07;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.19.09.24;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.10.18.09.11.57;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.07.26.01.13.53;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.23.01.13.27;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.48;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.07.09.15.27.59;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.21.19.00.27;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.21.17.17.18;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.30.21;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2004.12.21.06.38.19;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.06.09.12;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.08.20.31.24;	author kermit;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.11;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.59;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                       F B - O R L E . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file fb-orle.c
 *
 *  Encode a frame buffer image using the old RLE library
 *
 *  Author -
 *	Gary S. Moss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.14 2007/11/21 19:09:24 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>

#include "machine.h"
#include "bu.h"
#include "fb.h"
#include "orle.h"

static char	*usage[] = {
"Usage: fb-rle [-CScdhvw] [-l X Y] [-F Frame_buffer] [-p X Y] [file.rle]",
"",
"If no RLE file is specifed, fb-rle will write to its standard output.",
"If the environment variable FB_FILE is set, its value will be used",
"	to specify the framebuffer file or device to read from.",
0
};

static FBIO	*fbp;
static FILE	*fp;
static RGBpixel	bgpixel;
static int	bgflag = 1;
static int	ncolors = 3;
static int	cmflag = 1;
static int	crunch = 0;
static int	xpos = 0, ypos = 0, xlen = 0, ylen = 0;
static int	parsArgv(int argc, register char **argv);
static void	prntUsage(void);
static int	width = 512;
static char	*fb_file = (char *)NULL;

extern void	cmap_crunch(register RGBpixel (*scan_buf), register int pixel_ct, ColorMap *cmap);

/*	m a i n ( )							*/
int
main(int argc, char **argv)
{
	static RGBpixel	scan_buf[1024];
	static ColorMap	cmap;
	register int	y;
	register int	y_end;

	if( ! parsArgv( argc, argv ) )
	{
		prntUsage();
		return	1;
	}
	fp = stdout;
	setbuf( fp, malloc( BUFSIZ ) );

	rle_wlen( xlen, ylen, 1 );
	rle_wpos( xpos, ypos, 1 );

	if( (fbp = fb_open( fb_file, width, width )) == NULL )  {
		fprintf(stderr,"fb_open failed\n");
		bu_exit(12, NULL);
	}

	/* Read color map, see if it's linear */
	cmflag = 1;		/* Need to save colormap */
	if (fb_rmap( fbp, &cmap ) == -1) {
	    cmflag = 0;
	}
	if (cmflag && fb_is_linear_cmap( &cmap )) {
	    cmflag = 0;
	}
	if (crunch && (cmflag == 0)) {
	    crunch = 0;
	}

	/* Acquire "background" pixel from special location */
	if (bgflag && fb_read( fbp, 1, 1, bgpixel, 1 ) == -1) {
	    fprintf(stderr, "Couldn't read background!\n");
	    return 1;
	}
	if (bgflag && rle_verbose) {
	    fprintf(stderr, "Background saved as %d %d %d\n", bgpixel[RED], bgpixel[GRN], bgpixel[BLU]);
	}

	/* Write RLE header */
	if( rle_whdr( fp, ncolors, bgflag, cmflag, bgpixel ) == -1 ) {
	    return 1;
	}

	/* Follow RLE header with colormap */
	if( cmflag )  {
	    if( rle_wmap( fp, &cmap ) == -1 ) {
		return 1;
	    }
	    if( rle_debug ) {
		fprintf(stderr, "Color map saved.\n");
	    }
	}

	if( ncolors == 0 ) {
	    /* Only save colormap, so we are finished. */
	    return 0;
	}

	/* Get image from framebuffer and encode it */
	y_end = ypos + ylen;

	for( y = ypos; y < y_end; y++ )  {
		if (rle_debug) {
		    fprintf(stderr,"line %d\n", y);
		}
		if (fb_read( fbp, xpos, y, (unsigned char *)scan_buf, xlen ) == -1)  {
		    fprintf(stderr, "read of %d pixels from (%d,%d) failed!\n", xlen, xpos, y );
		    return 1;
		}
		if (crunch) {
		    cmap_crunch(scan_buf, xlen, &cmap);
		}

		if (rle_encode_ln(fp, scan_buf) == -1) {
		    return 1;
		}
	}
	fb_close( fbp );
	return	0;
}

/*	p a r s A r g v ( )						*/
static int
parsArgv(int argc, register char **argv)
{
	register int	c;
	extern int	bu_optind;
	extern char	*bu_optarg;

	/* Parse options.						*/
	while( (c = bu_getopt( argc, argv, "CF:Scdhl:p:vw" )) != EOF )
	{
		switch( c )
		{
		case 'C' : /* Crunch color map.				*/
			crunch = 1;
			cmflag = 0;
			break;
		case 'S' : /* 'Box' save, store entire image.		*/
			bgflag = 0;
			break;
		case 'c' : /* Only save color map.			*/
			ncolors = 0;
			break;
		case 'd' : /* For debugging.				*/
			rle_debug = 1;
			break;
		case 'h' : /* High resolution.				*/
			width = 1024;
			break;
		case 'l' : /* Length in x and y.			*/
			if( argc - bu_optind < 1 )
			{
				(void) fprintf( stderr,
				"-l option requires an X and Y argument!\n"
				    );
				return	0;
			}
			xlen = atoi( bu_optarg );
			ylen = atoi( argv[bu_optind++] );
			break;
		case 'p' : /* Position of bottom-left corner.		*/
			if( argc - bu_optind < 1 )
			{
				(void) fprintf( stderr,
				"-p option requires an X and Y argument!\n"
				    );
				return	0;
			}
			xpos = atoi( bu_optarg );
			ypos = atoi( argv[bu_optind++] );
			break;
		case 'v' : /* Verbose on.				*/
			rle_verbose = 1;
			break;
		case 'w' : /* Monochrome (black & white) mode.		*/
			ncolors = 1;
			break;
		case 'F' : fb_file = bu_optarg;
			break;
		case '?' :
			return	0;
		}
	}
	if( argv[bu_optind] != NULL )
	{
		if(bu_file_exists(argv[bu_optind]))
		{
			(void) fprintf( stderr,
			"\"%s\" already exists.\n",
			argv[bu_optind]
			    );
			bu_exit( 1, NULL );
		}
		if( (fp = fopen( argv[bu_optind], "w" )) == NULL )
		{
			perror(argv[bu_optind]);
			return	0;
		}
	}
	if( argc > ++bu_optind )
	{
		(void) fprintf( stderr, "Too many arguments!\n" );
		return	0;
	}
	if( isatty(fileno(fp)) )
		return 0;
	if( xlen == 0 )
		xlen = width;
	if( ylen == 0 )
		ylen = width;
	return	1;
}

/*	p r n t U s a g e ( )
	Print usage message.
 */
static void
prntUsage(void)
{
	register char	**p = usage;

	while( *p )
	{
		(void) fprintf( stderr, "%s\n", *p++ );
	}
	return;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@exit->bu_exit where applicable
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.13 2007/10/18 09:11:57 brlcad Exp $ (BRL)";
d89 1
a89 1
		bu_exit(12, "");
d227 1
a227 1
			bu_exit( 1, "" );
@


14.13
log
@more quellings of level 4 flawfinder issues
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.12 2007/07/26 01:13:53 brlcad Exp $ (BRL)";
d89 1
a89 1
		exit(12);
d227 1
a227 1
			exit( 1 );
@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.11 2007/01/23 01:13:27 brlcad Exp $ (BRL)";
d221 1
a221 1
		if( access( argv[bu_optind], 0 ) == 0 )
@


14.11
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a27 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d30 1
a30 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.10 2007/01/20 14:36:48 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.9 2006/07/09 15:27:59 brlcad Exp $ (BRL)";
@


14.9
log
@cleanup
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.8 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
@


14.8
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.7 2005/10/23 04:44:30 brlcad Exp $ (BRL)";
d100 9
a108 6
	if( fb_rmap( fbp, &cmap ) == -1 )
		cmflag = 0;
	if( cmflag && fb_is_linear_cmap( &cmap ) )
		cmflag = 0;
	if( crunch && (cmflag == 0) )
		crunch = 0;
d111 6
a116 6
	if(	bgflag
	    &&	fb_read( fbp, 1, 1, bgpixel, 1 ) == -1
	    )
	{
		(void) fprintf( stderr, "Couldn't read background!\n" );
		return	1;
a117 5
	if( bgflag && rle_verbose )
		(void) fprintf( stderr,
		"Background saved as %d %d %d\n",
		bgpixel[RED], bgpixel[GRN], bgpixel[BLU]
		    );
d120 3
a122 2
	if( rle_whdr( fp, ncolors, bgflag, cmflag, bgpixel ) == -1 )
		return	1;
d126 6
a131 6
		if( rle_wmap( fp, &cmap ) == -1 )
			return	1;
		if( rle_debug )
			(void) fprintf( stderr,
			"Color map saved.\n"
			    );
d134 4
a137 3
	if( ncolors == 0 )
		/* Only save colormap, so we are finished.		*/
		return	0;
d143 9
a151 6
		if(rle_debug)fprintf(stderr,"line %d\n", y);
		if( fb_read( fbp, xpos, y, (unsigned char *)scan_buf, xlen ) == -1)  {
			(void) fprintf(	stderr,
				"read of %d pixels from (%d,%d) failed!\n",
				xlen, xpos, y );
				return	1;
a152 2
		if( crunch )
			cmap_crunch( scan_buf, xlen, &cmap );
d154 3
a156 2
		if( rle_encode_ln( fp, scan_buf ) == -1 )
			return	1;
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.6 2005/09/21 19:00:27 brlcad Exp $ (BRL)";
@


14.6
log
@needs bu.h for bu_getopt
@
text
@d28 1
a28 1
 *  
d33 1
a33 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.5 2005/09/21 17:17:18 brlcad Exp $ (BRL)";
d114 1
a114 1
	}	
@


14.5
log
@use bu_optarg, bu_optind and bu_getopt
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.4 2005/01/30 20:30:21 brlcad Exp $ (BRL)";
d45 1
@


14.4
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.3 2004/12/21 06:38:19 morrison Exp $ (BRL)";
d164 2
a165 2
	extern int	optind;
	extern char	*optarg;
d168 1
a168 1
	while( (c = getopt( argc, argv, "CF:Scdhl:p:vw" )) != EOF )
d189 1
a189 1
			if( argc - optind < 1 )
d196 2
a197 2
			xlen = atoi( optarg );
			ylen = atoi( argv[optind++] );
d200 1
a200 1
			if( argc - optind < 1 )
d207 2
a208 2
			xpos = atoi( optarg );
			ypos = atoi( argv[optind++] );
d216 1
a216 1
		case 'F' : fb_file = optarg;
d222 1
a222 1
	if( argv[optind] != NULL )
d224 1
a224 1
		if( access( argv[optind], 0 ) == 0 )
d228 1
a228 1
			argv[optind]
d232 1
a232 1
		if( (fp = fopen( argv[optind], "w" )) == NULL )
d234 1
a234 1
			perror(argv[optind]);
d238 1
a238 1
	if( argc > ++optind )
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *
d33 1
a33 1
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
a44 1
#include "bu.h"
d113 1
a113 1
	}
d164 2
a165 2
	extern int	bu_optind;
	extern char	*bu_optarg;
d168 1
a168 1
	while( (c = bu_getopt( argc, argv, "CF:Scdhl:p:vw" )) != EOF )
d189 1
a189 1
			if( argc - bu_optind < 1 )
d196 2
a197 2
			xlen = atoi( bu_optarg );
			ylen = atoi( argv[bu_optind++] );
d200 1
a200 1
			if( argc - bu_optind < 1 )
d207 2
a208 2
			xpos = atoi( bu_optarg );
			ypos = atoi( argv[bu_optind++] );
d216 1
a216 1
		case 'F' : fb_file = bu_optarg;
d222 1
a222 1
	if( argv[bu_optind] != NULL )
d224 1
a224 1
		if( access( argv[bu_optind], 0 ) == 0 )
d228 1
a228 1
			argv[bu_optind]
d232 1
a232 1
		if( (fp = fopen( argv[bu_optind], "w" )) == NULL )
d234 1
a234 1
			perror(argv[bu_optind]);
d238 1
a238 1
	if( argc > ++bu_optind )
@


14.3
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.2 2004/12/18 06:09:12 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL license
@
text
@a33 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 2
/*
 *			F B - O R L E . C
d39 1
a39 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 1.4 2004/09/08 20:31:24 kermit Exp $ (BRL)";
@


1.4
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 1.3 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d249 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 1.2 2004/06/08 22:04:11 morrison Exp $ (BRL)";
d24 2
a26 2

#include <stdio.h>
@


1.2
log
@obliterate externs.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id$ (BRL)";
d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Id: fb-orle.c,v 11.8 2004/05/10 15:30:42 erikg Exp $ (BRL)";
a29 1
#include "externs.h"
@

