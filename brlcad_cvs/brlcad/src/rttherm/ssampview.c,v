head	14.23;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.5
	rel-7-10-2:14.17
	rel-7-10-0:14.14
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.23
date	2007.12.17.02.16.55;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.12.02.22.34.24;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.11.21.20.49.11;	author erikgreenwald;	state Exp;
branches;
next	14.20;

14.20
date	2007.11.21.19.28.07;	author erikgreenwald;	state Exp;
branches;
next	14.19;

14.19
date	2007.11.21.15.56.42;	author erikgreenwald;	state Exp;
branches;
next	14.18;

14.18
date	2007.09.14.15.22.05;	author erikgreenwald;	state Exp;
branches;
next	14.17;

14.17
date	2007.06.27.09.18.21;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.05.18.04.13.51;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.05.14.21.04.33;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.02.02.08.48.30;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.46;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.21.07.46.43;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.37.00;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.04.05.19.16.03;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.23.07.54.02;	author brlcad;	state Exp;
branches
	14.9.2.1;
next	14.8;

14.8
date	2006.01.23.07.35.05;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.24;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.38;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.03.30.07.25.29;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2005.01.30.20.31.11;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.07.18.59;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.02.43.37;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.08.14.43.41;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.25.16.21.17;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.35;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.49;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;

14.9.2.1
date	2006.04.07.19.34.23;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.23
log
@removal of the FAST declaration throughout.  now using register or letting the compiler sort things out.
@
text
@/*                     S S A M P V I E W . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file ssampview.c
 *
 *  Program to display spectral curves on the framebuffer.
 *  Uses a Tcl script to handle the GUI.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 */
#ifndef lint
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.22 2007/12/02 22:34:24 brlcad Exp $ (ARL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "spectrum.h"
#include "fb.h"
#include "tcl.h"
#include "tk.h"


extern struct bn_table *spectrum; /* from liboptical */

extern void
rt_spect_curve_to_xyz(
		      point_t			xyz,
		      const struct bn_tabdata	*tabp,
		      const struct bn_tabdata	*cie_x,
		      const struct bn_tabdata	*cie_y,
		      const struct bn_tabdata	*cie_z);

extern void
rt_spect_make_NTSC_RGB(struct bn_tabdata		**rp,
		       struct bn_tabdata		**gp,
		       struct bn_tabdata		**bp,
		       const struct bn_table		*tabp);


extern void
rt_make_ntsc_xyz2rgb( mat_t	xyz2rgb );


int	width = 64;				/* Linked with TCL */
int	height = 64;				/* Linked with TCL */
int	nwave = 2;				/* Linked with TCL */

char	*datafile_basename = "mtherm";
char	spectrum_name[100];

FBIO	*fbp;

struct bn_tabdata	*data;

struct bn_tabdata	*atmosphere_orig;
struct bn_tabdata	*atmosphere;
int			use_atmosphere = 0;	/* Linked with TCL */

struct bn_tabdata	*cie_x;
struct bn_tabdata	*cie_y;
struct bn_tabdata	*cie_z;
int			use_cie_xyz = 0;	/* Linked with TCL */
mat_t			xyz2rgb;
/* mat_t			rgb2xyz; */

struct bn_tabdata	*ntsc_r;
struct bn_tabdata	*ntsc_g;
struct bn_tabdata	*ntsc_b;

unsigned char	*pixels;		/* en-route to framebuffer */

fastf_t	maxval, minval;				/* Linked with TCL */

Tcl_Interp	*interp;
Tk_Window	tkwin;

int	doit(ClientData cd, Tcl_Interp *interp, int argc, char **argv), doit1(ClientData cd, Tcl_Interp *interp, int argc, char **argv);
void	find_minmax(void);
void	rescale(BU_ARGS(int wav));
void	show_color(BU_ARGS(int off));

char			*first_command = "no_command?";

/*
 *		A S S I G N _ T A B D A T A _ T O _ T C L _ V A R
 *
 *  Assign the given "C" bn_tabdata structure to the named Tcl variable,
 *  and add the name of that variable to the Tcl result string.
 */
void
assign_tabdata_to_tcl_var(Tcl_Interp *interp, const char *name, const struct bn_tabdata *tabp)
{
	struct bu_vls	str;

	BN_CK_TABDATA(tabp);

	bu_vls_init(&str);

	bn_tabdata_to_tcl(&str, tabp);
	Tcl_SetVar( interp, (char *)name, bu_vls_addr(&str), 0 );
	Tcl_AppendResult( interp, name, " ", (char *)NULL );

	bu_vls_free(&str);
}

/*
 *  Temporary testing function
 *  Takes no args, sets three Tcl variables, ntsc_r, ntsc_g, ntsc_b
 */
int
getntsccurves(ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
	extern struct bn_tabdata *rt_NTSC_r_tabdata;
	extern struct bn_tabdata *rt_NTSC_g_tabdata;
	extern struct bn_tabdata *rt_NTSC_b_tabdata;

	/* These are the curves as sampled to our spectrum intervals */
	assign_tabdata_to_tcl_var( interp, "ntsc_r_samp", ntsc_r );
	assign_tabdata_to_tcl_var( interp, "ntsc_g_samp", ntsc_g );
	assign_tabdata_to_tcl_var( interp, "ntsc_b_samp", ntsc_b );

#if 0
	/* These are the curves from the data tables in the library */
	assign_tabdata_to_tcl_var( interp, "ntsc_r_orig", rt_NTSC_r_tabdata );
	assign_tabdata_to_tcl_var( interp, "ntsc_g_orig", rt_NTSC_g_tabdata );
	assign_tabdata_to_tcl_var( interp, "ntsc_b_orig", rt_NTSC_b_tabdata );
#endif

	/* Sum togther the sampled curves */
	{
		struct bn_tabdata	*sum;
		BN_GET_TABDATA( sum, ntsc_r->table );
		bn_tabdata_add( sum, ntsc_r, ntsc_g );
		bn_tabdata_add( sum, sum, ntsc_b );
		assign_tabdata_to_tcl_var( interp, "ntsc_sum", sum );
		bn_tabdata_free( sum );
	}

#if 0
	/* Check out the RGB to spectrum curves */
	{
		struct bn_tabdata	*r, *g, *b, *sum;
		point_t		rgb;

		BN_GET_TABDATA( r, ntsc_r->table );
		BN_GET_TABDATA( g, ntsc_r->table );
		BN_GET_TABDATA( b, ntsc_r->table );
		BN_GET_TABDATA( sum, ntsc_r->table );

		VSET( rgb, 1, 0, 0 );
		rt_spect_reflectance_rgb( r, rgb );
		assign_tabdata_to_tcl_var( interp, "reflectance_r", r );

		VSET( rgb, 0, 1, 0 );
		rt_spect_reflectance_rgb( g, rgb );
		assign_tabdata_to_tcl_var( interp, "reflectance_g", g );

		VSET( rgb, 0, 0, 1 );
		rt_spect_reflectance_rgb( b, rgb );
		assign_tabdata_to_tcl_var( interp, "reflectance_b", b );

		bn_tabdata_add( sum, r, g );
		bn_tabdata_add( sum, sum, b );
		assign_tabdata_to_tcl_var( interp, "reflectance_sum", sum );

		bn_tabdata_free( r );
		bn_tabdata_free( g );
		bn_tabdata_free( b );
		bn_tabdata_free( sum );
	}
#endif

	/* Check out the black body curves */
	{
		struct bn_tabdata	*a, *b, *c;

		BN_GET_TABDATA( a, ntsc_r->table );
		BN_GET_TABDATA( b, ntsc_r->table );
		BN_GET_TABDATA( c, ntsc_r->table );

		rt_spect_black_body_fast( a, 5000.0 );
		assign_tabdata_to_tcl_var( interp, "a_5000", a );

		rt_spect_black_body_fast( b, 6500.0 );
		assign_tabdata_to_tcl_var( interp, "b_6500", b );

		rt_spect_black_body_fast( c, 10000.0 );
		assign_tabdata_to_tcl_var( interp, "c_10000", c );

		bn_tabdata_free( a );
		bn_tabdata_free( b );
		bn_tabdata_free( c );
	}

	return TCL_OK;
}

/*
 *
 *  With no args, returns the number of wavelengths.
 *  With an integer arg, returns the i-th wavelength.
 *
 *  spectrum pointer should be an arg, not implicit.
 */
int
getspectrum(ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
    struct bu_vls vls;
    int	wl;

	BN_CK_TABLE(spectrum);

	bu_vls_init(&vls);
	Tcl_ResetResult(interp);

	if( argc <= 1 )  {
	    bu_vls_printf(&vls, "%d", spectrum->nx);
	    Tcl_SetResult(interp, bu_vls_addr(&vls), TCL_VOLATILE);
	    bu_vls_free(&vls);
	    return TCL_OK;
	}
	if( argc != 2 )  {
	    Tcl_AppendResult(interp, "Usage: getspectrum [wl]", (char *)NULL);
	    return TCL_ERROR;
	}
	wl = atoi(argv[2]);

	if( wl < 0 || wl > spectrum->nx )  {
	    bu_vls_printf(&vls, "getspectrum: wavelength %d out of range 0..%d", wl, spectrum->nx);
	    Tcl_SetResult(interp, bu_vls_addr(&vls), TCL_VOLATILE);
	    bu_vls_free(&vls);
	    return TCL_ERROR;
	}

	bu_vls_printf(&vls, interp->result, "%g", spectrum->x[wl]);
	Tcl_SetResult(interp, bu_vls_addr(&vls), TCL_VOLATILE);
	bu_vls_free(&vls);
	return TCL_OK;
}

int
getspectval(ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
	struct bn_tabdata	*sp;
	int	x, y, wl;
	char	*cp;
	fastf_t	val;
	struct bu_vls vls;

	Tcl_ResetResult(interp);

	if( argc != 4 )  {
	    Tcl_AppendResult(interp, "Usage: getspect x y wl", (char *)NULL);
	    return TCL_ERROR;
	}
	x = atoi(argv[1]);
	y = atoi(argv[2]);
	wl = atoi(argv[3]);

	BN_CK_TABLE(spectrum);

	if( x < 0 || x >= width )  {
	    Tcl_AppendResult(interp,"x out of range", (char *)NULL);
	    return TCL_ERROR;
	}
	if( y < 0 || y >= height )  {
	    Tcl_AppendResult(interp, "y out of range", (char *)NULL);
	    return TCL_ERROR;
	}
	if( wl < 0 || wl >= spectrum->nx )  {
	    Tcl_AppendResult(interp, "wavelength index out of range", (char *)NULL);
	    return TCL_ERROR;
	}

	if( !data )  {
	    Tcl_AppendResult(interp, "pixel data table not loaded yet", (char *)NULL);
	    return TCL_ERROR;
	}

	cp = (char *)data;
	cp = cp + (y * width + x) * BN_SIZEOF_TABDATA(spectrum);
	sp = (struct bn_tabdata *)cp;
	BN_CK_TABDATA(sp);
	val = sp->y[wl];
	if( use_atmosphere )
		val *= atmosphere->y[wl];

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "%g", val);
	Tcl_SetResult(interp, bu_vls_addr(&vls), TCL_VOLATILE);
	bu_vls_free(&vls);
	return TCL_OK;
}

/*
 *			G E T S P E C T X Y
 *
 *  Given the x,y coordinates of a pixel in the multi-spectral image,
 *  return the spectral data found there in Tcl string form.
 */
int
getspectxy(ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
	struct bn_tabdata	*sp;
	int	x, y;
	char	*cp;
	struct bu_vls	str;

	Tcl_ResetResult(interp);

	if( argc != 3 )  {
	    Tcl_AppendResult(interp, "Usage: getspectxy x y", (char *)NULL);
	    return TCL_ERROR;
	}
	x = atoi(argv[1]);
	y = atoi(argv[2]);

	BN_CK_TABLE(spectrum);

	if( x < 0 || x >= width || y < 0 || y >= height )  {
	    Tcl_AppendResult(interp, "x or y out of range", (char *)NULL);
	    return TCL_ERROR;
	}

	if( !data )  {
	    Tcl_AppendResult(interp, "pixel data table not loaded yet", (char *)NULL);
	    return TCL_ERROR;
	}
	cp = (char *)data;
	cp = cp + (y * width + x) * BN_SIZEOF_TABDATA(spectrum);
	sp = (struct bn_tabdata *)cp;
	BN_CK_TABDATA(sp);

	bu_vls_init(&str);
	bn_tabdata_to_tcl( &str, sp );
	Tcl_SetResult( interp, bu_vls_addr(&str), TCL_VOLATILE);
	bu_vls_free(&str);

	return TCL_OK;
}

/*
 *  TCL interface to LIBFB.
 *  Points at lower left corner of selected pixel.
 */
int
tcl_fb_cursor(ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
	FBIO	*ifp;
	long	mode, x, y;

	Tcl_ResetResult(interp);

	if( argc != 5 )  {
	    Tcl_AppendResult(interp, "Usage: fb_cursor fbp mode x y", (char *)NULL);
	    return TCL_ERROR;
	}
	ifp = (FBIO *)atol(argv[1]);
	mode = atol(argv[2]);
	x = atol(argv[3]);
	y = atol(argv[4]);

	ifp = fbp;	/* XXX hack, ignore tcl arg. */

	FB_CK_FBIO(ifp);
	if( fb_cursor( ifp, mode, x, y ) < 0 )  {
	    Tcl_AppendResult(interp, "fb_cursor got error from library", (char *)NULL);
	    return TCL_ERROR;
	}
	return TCL_OK;
}

/*
 *  Return value of one pixel as RGB tripple, in decimal
 */
int
tcl_fb_readpixel(ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
	FBIO	*ifp;
	long	mode, x, y;
	unsigned char	pixel[4];
	struct bu_vls vls;

	Tcl_ResetResult(interp);

	if( argc != 4 )  {
	    Tcl_AppendResult(interp, "Usage: fb_readpixel fbp x y", (char *)NULL);
	    return TCL_ERROR;
	}
	ifp = (FBIO *)atol(argv[1]);
	x = atol(argv[2]);
	y = atol(argv[3]);

	ifp = fbp;	/* XXX hack, ignore tcl arg. */

	FB_CK_FBIO(ifp);
	if( fb_read( ifp, x, y, pixel, 1 ) < 0 )  {
	    Tcl_AppendResult(interp, "fb_readpixel got error from library", (char *)NULL);
	    return TCL_ERROR;
	}

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "%d %d %d", pixel[RED], pixel[GRN], pixel[BLU]);
	Tcl_SetResult(interp, bu_vls_addr(&vls), TCL_VOLATILE);
	bu_vls_free(&vls);
	return TCL_OK;
}

int
tcl_appinit(Tcl_Interp *inter)
{
	interp = inter;	/* set global var */
	if( Tcl_Init(interp) == TCL_ERROR )  {
		return TCL_ERROR;
	}

	/* Run tk.tcl script */
	if( Tk_Init(interp) == TCL_ERROR )  return TCL_ERROR;

	/* Add commands offered by the libraries */
	bu_tcl_setup(interp);
	rt_tcl_setup(interp);

	/* Add commands offered by this program */
	Tcl_CreateCommand(interp, "fb_cursor", (Tcl_CmdProc *)tcl_fb_cursor, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "fb_readpixel", (Tcl_CmdProc *)tcl_fb_readpixel, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);

	Tcl_CreateCommand(interp, "doit", (Tcl_CmdProc *)doit, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "doit1", (Tcl_CmdProc *)doit1, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);

	Tcl_CreateCommand(interp, "getspectval", (Tcl_CmdProc *)getspectval, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "getspectrum", (Tcl_CmdProc *)getspectrum, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "getspectxy", (Tcl_CmdProc *)getspectxy, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "getntsccurves", (Tcl_CmdProc *)getntsccurves, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);

	Tcl_LinkVar( interp, "minval", (char *)&minval, TCL_LINK_DOUBLE );
	Tcl_LinkVar( interp, "maxval", (char *)&maxval, TCL_LINK_DOUBLE );

	Tcl_LinkVar( interp, "width", (char *)&width, TCL_LINK_INT );
	Tcl_LinkVar( interp, "height", (char *)&height, TCL_LINK_INT );
	Tcl_LinkVar( interp, "nwave", (char *)&nwave, TCL_LINK_INT );
	Tcl_LinkVar( interp, "use_atmosphere", (char *)&use_atmosphere, TCL_LINK_INT );
	Tcl_LinkVar( interp, "use_cie_xyz", (char *)&use_cie_xyz, TCL_LINK_INT );

	/* Tell Tcl script what to do first */
	Tcl_SetVar( interp, "first_command", first_command, 0 );

	/* Specify startup file to invoke when run interactively */
	/* Source the TCL part of this lashup */
	/* Tcl7 way:  tcl_RcFileName = "./ssampview.tcl"; */
	Tcl_SetVar(interp, "tcl_rcFileName", "~/brlcad/rttherm/ssampview.tcl", TCL_GLOBAL_ONLY);

	return TCL_OK;
}

void check( double x, double y, double z);

/* Check identity of XYZ->RGB->spectrum->XYZ->RGB */
void
check(double x, double y, double z)
{
	point_t	xyz;
	point_t	rgb;
	point_t	xyz2, rgb2;
	struct bn_tabdata	*tabp;
	fastf_t	tab_area;

	BN_GET_TABDATA( tabp, spectrum );
	xyz[X] = x;
	xyz[Y] = y;
	xyz[Z] = z;
	VPRINT( "\nstarting xyz", xyz );

#if 0
	/* XXX No way to do this yet!! */
	rt_spect_xyz_to_curve( tabp, xyz, cie_x, cie_y, cie_z );
#else
	MAT3X3VEC( rgb, xyz2rgb, xyz );
	VPRINT( "rgb", rgb );
	{
	    float rrggbb[3];
	    VMOVE( rrggbb, rgb);

	    rt_spect_reflectance_rgb( tabp, rrggbb );
	}
#endif
	bn_print_table_and_tabdata( "/dev/tty", tabp );
	tab_area = bn_tabdata_area2( tabp );
	bu_log(" tab_area = %g\n", tab_area);

	rt_spect_curve_to_xyz( xyz2, tabp, cie_x, cie_y, cie_z );

	VPRINT( "xyz2", xyz2 );
	MAT3X3VEC( rgb2, xyz2rgb, xyz2 );
	VPRINT( "rgb2", rgb2 );

	bn_tabdata_free( tabp );
bu_exit(2, NULL);
}

void
conduct_tests(void)
{
	struct bn_tabdata	*flat;
	vect_t			xyz;

	/* Code for testing library routines */
	spectrum = bn_table_make_uniform( 20, 340.0, 760.0 );
	rt_spect_make_CIE_XYZ( &cie_x, &cie_y, &cie_z, spectrum );
bu_log("X:\n");bn_print_table_and_tabdata( "/dev/tty", cie_x );
bu_log("Y:\n");bn_print_table_and_tabdata( "/dev/tty", cie_y );
bu_log("Z:\n");bn_print_table_and_tabdata( "/dev/tty", cie_z );

	rt_spect_make_NTSC_RGB( &ntsc_r, &ntsc_g, &ntsc_b, spectrum );
bu_log("R:\n");bn_print_table_and_tabdata( "/dev/tty", ntsc_r );
bu_log("G:\n");bn_print_table_and_tabdata( "/dev/tty", ntsc_g );
bu_log("B:\n");bn_print_table_and_tabdata( "/dev/tty", ntsc_b );
	{
		struct bu_vls str;
		bu_vls_init(&str);
		bn_tabdata_to_tcl( &str, ntsc_r );
		bu_log("ntsc_r tcl:  %s\n", bu_vls_addr(&str) );
		bu_vls_free(&str);
	}

/* "A flat spectral curve is represente by equal XYZ values".  Hall pg 52 */
	flat = bn_tabdata_get_constval( 42.0, spectrum );
	bu_log("flat:\n");bn_print_table_and_tabdata( "/dev/tty", flat );
	rt_spect_curve_to_xyz(xyz, flat, cie_x, cie_y, cie_z );
	VPRINT("flat xyz?", xyz);

return;

	/* Check identity of XYZ->RGB->spectrum->XYZ->RGB */
	check( 0.313,     0.329,      0.358);	/* D6500 white */
	check( 0.670,     0.330,      0.000);	/* NTSC red primary */
	check( 0.210,     0.710,      0.080);	/* NTSC green primary */
	check( 0.140,     0.080,      0.780);	/* NTSC blue primary */
	check( .5, .5, .5 );
	check( 1, 0, 0 );
	check( 0, 1, 0 );
	check( 0, 0, 1 );
	check( 1, 1, 1 );
	check( 1, 1, 0 );
	check( 1, 0, 1 );
	check( 0, 1, 1 );
}

static char usage[] = "\
Usage: ssampview [-t] [-s squarefilesize] [-w file_width] [-n file_height]\n\
		file.ssamp\n";


int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "ts:w:n:" )) != EOF )  {
		switch( c )  {
		case 't':
			fprintf(stderr, "ssampview: conducting library tests\n");
			conduct_tests();
			first_command = "do_testing";
			Tk_Main( 1, argv, tcl_appinit );
			/* NOTREACHED */
			bu_exit(0, NULL);
			/* NOTREACHED */
			break;
		case 's':
			/* square file size */
			height = width = atoi(bu_optarg);
			break;
		case 'w':
			width = atoi(bu_optarg);
			break;
		case 'n':
			height = atoi(bu_optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )  return 0;
	return 1;	/* OK */
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{

	bu_debug = BU_DEBUG_COREDUMP;
	rt_g.debug = 1;

	rt_make_ntsc_xyz2rgb( xyz2rgb );

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		bu_exit( 1, NULL );
	}

	if( argc > 1 && strcmp(argv[1], "-t") == 0 )  {
	}

	datafile_basename = argv[bu_optind];

	first_command = "doit1 42";

	if( (fbp = fb_open( NULL, width, height )) == FBIO_NULL )  {
		bu_exit(EXIT_FAILURE, "Unable to open fb\n");
	}
	fb_view( fbp, width/2, height/2, fb_getwidth(fbp)/width, fb_getheight(fbp)/height );

	/* Read spectrum definition */
	snprintf( spectrum_name, 100, "%s.spect", datafile_basename );
	spectrum = (struct bn_table *)bn_table_read( spectrum_name );
	if( spectrum == NULL )  {
		bu_exit(EXIT_FAILURE, "Unable to read spectrum\n");
	}
	BN_CK_TABLE(spectrum);
	bu_log("spectrum has %d samples\n", spectrum->nx);
	nwave = spectrum->nx;	/* shared with Tcl */

	/* Read atmosphere curve -- input is in microns, not nm */
	atmosphere_orig = bn_read_table_and_tabdata( "../rttherm/std_day_1km.dat" );
	bn_table_scale( (struct bn_table *)(atmosphere_orig->table), 1000.0 );
	atmosphere = bn_tabdata_resample_max( spectrum, atmosphere_orig );

	/* Allocate and read 2-D spectrum array */
	data = bn_tabdata_binary_read( datafile_basename, width*height, spectrum );
	if( !data )  bu_exit(EXIT_FAILURE, "bn_tabdata_binary_read() of datafile_basename failed\n");

	/* Allocate framebuffer image buffer */
	pixels = (unsigned char *)bu_malloc( width * height * 3, "pixels[]" );

	find_minmax();
	bu_log("min = %g, max=%g Watts\n", minval, maxval );

	Tk_Main( 1, argv, tcl_appinit );
	/* NOTREACHED */

	return 0;
}

int
doit(ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
	int	wl;
	char	cmd[96];

	for( wl = 0; wl < spectrum->nx; wl++ )  {
		sprintf( cmd, "doit1 %d", wl );
		Tcl_Eval( interp, cmd );
	}
	return TCL_OK;
}

int
doit1(ClientData cd, Tcl_Interp *interp, int argc, char **argv)
{
	int	wl;
	char	buf[32];
	int	got;

	Tcl_ResetResult(interp);

	if( argc != 2 )  {
	    Tcl_AppendResult(interp, "Usage: doit1 wavel#", (char *)NULL);
	    return TCL_ERROR;
	}
	wl = atoi(argv[1]);
	if( wl < 0 || wl >= spectrum->nx )  {
	    Tcl_AppendResult(interp, "Wavelength number out of range", (char *)NULL);
	    return TCL_ERROR;
	}

	if( !data )  {
	    Tcl_AppendResult(interp, "pixel data table not loaded yet", (char *)NULL);
	    return TCL_ERROR;
	}

	bu_log("doit1 %d: %g um to %g um\n",
		wl,
		spectrum->x[wl] * 0.001,
		spectrum->x[wl+1] * 0.001 );
	if( use_cie_xyz )
		show_color(wl);
	else
		rescale(wl);
	(void)fb_writerect( fbp, 0, 0, width, height, pixels );
	fb_poll(fbp);

	/* export C variables to TCL, one-way */
	/* These are being traced by Tk, this will cause update */
	sprintf(buf, "%d", wl);
	Tcl_SetVar(interp, "x", buf, TCL_GLOBAL_ONLY);
	sprintf(buf, "%g", spectrum->x[wl] * 0.001);
	Tcl_SetVar(interp, "lambda", buf, TCL_GLOBAL_ONLY);

	return TCL_OK;
}

/*
 */
void
find_minmax(void)
{
	char			*cp;
	int			todo;
	register fastf_t	max, min;
	int		nbytes;
	int		j;

	cp = (char *)data;
	nbytes = BN_SIZEOF_TABDATA(spectrum);

	max = -INFINITY;
	min =  INFINITY;

	for( todo = width * height; todo > 0; todo--, cp += nbytes )  {
		struct bn_tabdata	*sp;
		sp = (struct bn_tabdata *)cp;
		BN_CK_TABDATA(sp);
		for( j = 0; j < spectrum->nx; j++ )  {
			register fastf_t	v;

			if( (v = sp->y[j]) > max )  max = v;
			if( v < min )  min = v;
		}
	}
	maxval = max;
	minval = min;
}

/*
 *			R E S C A L E
 *
 *  Create monochrome image from the spectral data, at wavelength 'wav',
 *  given current min & max values.
 */
void
rescale(int wav)
{
	char		*cp;
	unsigned char	*pp;
	int		todo;
	int		nbytes;
	fastf_t		scale;
	fastf_t		atmos_scale;

	cp = (char *)data;
	nbytes = BN_SIZEOF_TABDATA(spectrum);

	pp = pixels;

	scale = 255 / (maxval - minval);

	if( use_atmosphere )
		atmos_scale = atmosphere->y[wav];
	else
		atmos_scale = 1;

	for( todo = width * height; todo > 0; todo--, cp += nbytes, pp += 3 )  {
		struct bn_tabdata	*sp;
		register int		val;

		sp = (struct bn_tabdata *)cp;
		BN_CK_TABDATA(sp);

		val = (sp->y[wav] * atmos_scale - minval) * scale;
		if( val > 255 )  val = 255;
		else if( val < 0 ) val = 0;
		pp[0] = pp[1] = pp[2] = val;
	}
}


/*
 *			S H O W _ C O L O R
 *
 *  Create color image from spectral curve,
 *  given current min & max values, and frequency offset (in nm).
 *  Go via CIE XYZ space.
 */
void
show_color(int off)
{
	char		*cp;
	unsigned char	*pp;
	int		todo;
	int		nbytes;
	fastf_t		scale;
	struct bn_tabdata *new;

	cp = (char *)data;
	nbytes = BN_SIZEOF_TABDATA(spectrum);

	pp = pixels;

	scale = 255 / (maxval - minval);

	/* Build CIE curves */
	if( cie_x->magic == 0 )
		rt_spect_make_CIE_XYZ( &cie_x, &cie_y, &cie_z, spectrum );

	BN_GET_TABDATA(new, spectrum);

	for( todo = width * height; todo > 0; todo--, cp += nbytes, pp += 3 )  {
		struct bn_tabdata	*sp;
		point_t			xyz;
		point_t			rgb;
		register int		val;

		sp = (struct bn_tabdata *)cp;
		BN_CK_TABDATA(sp);

		if( use_atmosphere )  {
			bn_tabdata_mul( new, sp, atmosphere );
			bn_tabdata_freq_shift( new, new, spectrum->x[off] - 380.0 );
		} else {
			bn_tabdata_freq_shift( new, sp, spectrum->x[off] - 380.0 );
		}

#if 0
		if( todo == (width/2)*(height/2) )  {
			struct bu_vls str;
			bu_vls_init(&str);

			bu_vls_printf(&str, "popup_plot_tabdata centerpoint {");
			bn_tabdata_to_tcl(&str, sp);
			bu_vls_printf(&str, "}" );
			Tcl_Eval( interp, bu_vls_addr(&str) );

			bu_vls_trunc(&str,0);
			bu_vls_printf(&str, "popup_plot_tabdata centerpoint_shifted {");
			bn_tabdata_to_tcl(&str, new);
			bu_vls_printf(&str, "}" );
			Tcl_Eval( interp, bu_vls_addr(&str) );
			bu_vls_free(&str);
		}
#endif

		rt_spect_curve_to_xyz( xyz, new, cie_x, cie_y, cie_z );

		MAT3X3VEC( rgb, xyz2rgb, xyz );

		val = (rgb[RED] - minval) * scale;
		if( val > 255 )  val = 255;
		else if( val < 0 ) val = 0;
		pp[RED] = val;

		val = (rgb[GRN] - minval) * scale;
		if( val > 255 )  val = 255;
		else if( val < 0 ) val = 0;
		pp[GRN] = val;

		val = (rgb[BLU] - minval) * scale;
		if( val > 255 )  val = 255;
		else if( val < 0 ) val = 0;
		pp[BLU] = val;
	}

	bn_tabdata_free( new );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.22
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.21 2007/11/21 20:49:11 erikgreenwald Exp $ (ARL)";
d501 1
a501 1
	FAST fastf_t	tab_area;
@


14.21
log
@pass bu_exit a NULL instead of an empty string
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.20 2007/11/21 19:28:07 erikgreenwald Exp $ (ARL)";
d655 1
a655 1
	sprintf( spectrum_name, "%s.spect", datafile_basename );
@


14.20
log
@exit->bu_exit where applicable
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.19 2007/11/21 15:56:42 erikgreenwald Exp $ (ARL)";
d533 1
a533 1
bu_exit(2, "");
d602 1
a602 1
			bu_exit(0, "");
d639 1
a639 1
		bu_exit( 1, "" );
@


14.19
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.18 2007/09/14 15:22:05 erikgreenwald Exp $ (ARL)";
d533 1
a533 1
exit(2);
d602 1
a602 1
			exit(0);
d639 1
a639 1
		exit( 1 );
@


14.18
log
@removed trailing whitespace
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.17 2007/06/27 09:18:21 brlcad Exp $ (ARL)";
d650 1
a650 1
		bu_bomb("Unable to open fb\n");
d658 1
a658 1
		bu_bomb("Unable to read spectrum\n");
d671 1
a671 1
	if( !data )  bu_bomb("bn_tabdata_binary_read() of datafile_basename failed\n");
@


14.17
log
@remove the final few remaining references to interp->result (both comments and code)
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.16 2007/05/18 04:13:51 brlcad Exp $ (ARL)";
d418 1
a418 1
	
@


14.16
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.15 2007/05/14 21:04:33 brlcad Exp $ (ARL)";
d243 2
a244 1
	int	wl;
d248 3
d252 4
a255 2
		sprintf( interp->result, "%d", spectrum->nx );
		return TCL_OK;
d258 2
a259 2
		interp->result = "Usage: getspectrum [wl]";
		return TCL_ERROR;
d264 4
a267 3
		sprintf( interp->result, "getspectrum: wavelength %d out of range 0..%d",
			wl, spectrum->nx);
		return TCL_ERROR;
d269 4
a272 1
	sprintf( interp->result, "%g", spectrum->x[wl] );
d283 3
d288 2
a289 2
		interp->result = "Usage: getspect x y wl";
		return TCL_ERROR;
d298 2
a299 2
		interp->result = "x out of range";
		return TCL_ERROR;
d302 2
a303 2
		interp->result = "y out of range";
		return TCL_ERROR;
d306 2
a307 2
		interp->result = "wavelength index out of range";
		return TCL_ERROR;
d311 2
a312 2
		interp->result = "pixel data table not loaded yet";
		return TCL_ERROR;
d322 5
a326 1
	sprintf( interp->result, "%g", val );
d344 2
d347 2
a348 2
		interp->result = "Usage: getspectxy x y";
		return TCL_ERROR;
d356 2
a357 2
		interp->result = "x or y out of range";
		return TCL_ERROR;
d361 2
a362 2
		interp->result = "pixel data table not loaded yet";
		return TCL_ERROR;
d387 2
d390 2
a391 2
		interp->result = "Usage: fb_cursor fbp mode x y";
		return TCL_ERROR;
d402 2
a403 2
		interp->result = "fb_cursor got error from library";
		return TCL_ERROR;
d417 3
d422 2
a423 2
		interp->result = "Usage: fb_readpixel fbp x y";
		return TCL_ERROR;
d433 2
a434 2
		interp->result = "fb_readpixel got error from library";
		return TCL_ERROR;
d436 5
a440 1
	sprintf(interp->result, "%d %d %d", pixel[RED], pixel[GRN], pixel[BLU] );
d705 2
d708 2
a709 2
		interp->result = "Usage: doit1 wavel#";
		return TCL_ERROR;
d713 2
a714 2
		interp->result = "Wavelength number out of range";
		return TCL_ERROR;
d718 2
a719 2
		interp->result = "pixel data table not loaded yet";
		return TCL_ERROR;
@


14.15
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.14 2007/02/02 08:48:30 brlcad Exp $ (ARL)";
d622 1
a622 1
		rt_bomb("Unable to open fb\n");
d630 1
a630 1
		rt_bomb("Unable to read spectrum\n");
@


14.14
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.13 2007/01/23 01:13:46 brlcad Exp $ (ARL)";
d649 1
a649 1
	rt_log("min = %g, max=%g Watts\n", minval, maxval );
d692 1
a692 1
	rt_log("doit1 %d: %g um to %g um\n",
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.12 2007/01/21 07:46:43 brlcad Exp $ (ARL)";
d566 1
a566 1
	while ( (c = getopt( argc, argv, "ts:w:n:" )) != EOF )  {
d579 1
a579 1
			height = width = atoi(optarg);
d582 1
a582 1
			width = atoi(optarg);
d585 1
a585 1
			height = atoi(optarg);
d593 1
a593 1
	if( optind >= argc )  return 0;
d617 1
a617 1
	datafile_basename = argv[optind];
@


14.12
log
@add missing headers, bsd license
@
text
@d8 2
a9 2
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.11 2007/01/20 14:37:00 brlcad Exp $ (ARL)";
@


14.11
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d34 1
a34 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.10 2006/04/05 19:16:03 brlcad Exp $ (ARL)";
@


14.10
log
@more header/warning cleanup from Intel compiler warnings on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.9 2006/01/23 07:54:02 brlcad Exp $ (ARL)";
@


14.9
log
@use atol instaed of atoi
@
text
@d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.8 2006/01/23 07:35:05 brlcad Exp $ (ARL)";
d43 1
a43 1

@


14.9.2.1
log
@update from HEAD
@
text
@d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.9 2006/01/23 07:54:02 brlcad Exp $ (ARL)";
d43 1
a43 1
#include <string.h>
@


14.8
log
@stdlib.h for atoi()
@
text
@d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.7 2006/01/18 06:46:24 brlcad Exp $ (ARL)";
d367 1
a367 1
	int	mode, x, y;
d373 4
a376 4
	ifp = (FBIO *)atoi(argv[1]);
	mode = atoi(argv[2]);
	x = atoi(argv[3]);
	y = atoi(argv[4]);
d395 1
a395 1
	int	mode, x, y;
d402 3
a404 3
	ifp = (FBIO *)atoi(argv[1]);
	x = atoi(argv[2]);
	y = atoi(argv[3]);
@


14.7
log
@update copyright to 2006
@
text
@d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.6 2005/10/23 04:44:38 brlcad Exp $ (ARL)";
d40 1
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.5 2005/03/30 07:25:29 brlcad Exp $ (ARL)";
@


14.5
log
@quell basename duplicate symbol warning (system lib on os x), quell Tcl_CreateCommand argument type warnings)
@
text
@d28 1
a28 1
 *  
d32 1
a32 1
 *  
d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.4 2005/01/30 20:31:11 brlcad Exp $ (ARL)";
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *
d32 1
a32 1
 *
d35 1
a35 1
static char RCSid[] = "@@(#)$Header$ (ARL)";
@


14.4
log
@update copyright to 2005
@
text
@d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rttherm/ssampview.c,v 14.3 2004/12/21 07:18:59 morrison Exp $ (ARL)";
d57 3
d83 1
a83 1
char	*basename = "mtherm";
a87 2
struct bn_table		*spectrum;

d432 2
a433 2
	Tcl_CreateCommand(interp, "fb_cursor", tcl_fb_cursor, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "fb_readpixel", tcl_fb_readpixel, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
d435 2
a436 2
	Tcl_CreateCommand(interp, "doit", doit, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "doit1", doit1, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
d438 4
a441 4
	Tcl_CreateCommand(interp, "getspectval", getspectval, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "getspectrum", getspectrum, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "getspectxy", getspectxy, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
	Tcl_CreateCommand(interp, "getntsccurves", getntsccurves, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);
d617 1
a617 1
	basename = argv[optind];
d627 1
a627 1
	sprintf( spectrum_name, "%s.spect", basename );
d642 2
a643 2
	data = bn_tabdata_binary_read( basename, width*height, spectrum );
	if( !data )  bu_bomb("bn_tabdata_binary_read() of basename failed\n");
@


14.3
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/rttherm/ssampview.c,v 14.2 2004/12/21 02:43:37 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and GPL
@
text
@a32 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d35 1
a35 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/rttherm/ssampview.c,v 14.1 2004/11/16 19:42:31 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			S S A M P V I E W . C
d37 1
a37 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/rttherm/ssampview.c,v 1.4 2004/09/08 14:43:41 morrison Exp $ (ARL)";
@


1.4
log
@use the common.h header instead of the ifdef HAVE_CONFIG_H block
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/rttherm/ssampview.c,v 1.3 2004/08/25 16:21:17 erikg Exp $ (ARL)";
d857 10
@


1.3
log
@need unistd for getopt
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/rttherm/ssampview.c,v 1.2 2004/06/08 22:04:35 morrison Exp $ (ARL)";
d21 1
a21 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d18 5
a22 1
static char RCSid[] = "@@(#)$Header$ (ARL)";
d27 4
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d18 1
a18 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/rttherm/ssampview.c,v 1.36 2004/04/05 05:45:59 morrison Exp $ (ARL)";
a24 1
#include "externs.h"
@

