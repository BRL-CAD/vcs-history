head	14.19;
access;
symbols
	rel-7-10-4:14.17.2.2
	STABLE:14.17.0.2
	stable-branch:14.7
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.14
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.19
date	2007.10.15.15.49.32;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.09.15.16.23.10;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.04.23.13.30.19;	author joevalleyfield;	state Exp;
branches
	14.17.2.1;
next	14.16;

14.16
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.20.14.36.52;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.08.22.21.18.07;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.08.20.13.51.38;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.08.08.00.57.35;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.08.07.16.04.39;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.33;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.05.28.02.14.51;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.03.21.05.08.38;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.03.20.00.19.56;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.30.47;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.22;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.02.24.40;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.14;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.20;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.39;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;

14.17.2.1
date	2007.09.28.14.04.32;	author brlcad;	state Exp;
branches;
next	14.17.2.2;

14.17.2.2
date	2007.10.15.15.51.33;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@don't blather the error message if the display cannot be opened.  cleanup the logic a bit too to print a message if a detected type being tested for validity simply wasn't available during compilation.
@
text
@/*                         Q U E R Y . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file query.c
 *
 */

#include "common.h"

#include <string.h>

#ifdef HAVE_X11_XLIB_H
#  include <X11/Xlib.h>
#endif

#include "tcl.h"

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "dm.h"

int dm_validXType(char *dpy_string, char *name);
char *dm_bestXType(char *dpy_string);

int
dm_validXType(char *dpy_string, char *name)
{
    if (strcmp(name, "wgl")==0) {
#ifdef DM_WGL
	return 1;
#else
	bu_log("Specified display type [%s] is not available in this compilation.", name);
#endif /* DM_WGL */
	return 0;
    }

    if (strcmp(name, "ogl")==0) {
#ifdef DM_OGL
	Display *dpy;
	int return_val;
	if ((dpy = XOpenDisplay(dpy_string)) != NULL) {
	    if (XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val)) {
		XCloseDisplay(dpy);
		return 1;
	    }
	    XCloseDisplay(dpy);
	}
#else
	bu_log("Specified display type [%s] is not available in this compilation.", name);
#endif /* DM_OGL */
	return 0;
    }

    if (strcmp(name, "X")==0) {
#ifdef DM_X
	Display *dpy;
	if ((dpy = XOpenDisplay(dpy_string)) != NULL) {
	    XCloseDisplay(dpy);
	    return 1;
	}
#else
	bu_log("Specified display type [%s] is not available in this compilation.", name);
#endif /* DM_X */
	return 0;
    }

    if (strcmp(name, "tk")==0) {
#ifdef DM_TK
	return 1;
#else
	bu_log("Specified display type [%s] is not available in this compilation.", name);
#endif /* DM_TK */
	return 0;
    }

    return 0;
}

char *
dm_bestXType(char *dpy_string)
{
#ifdef DM_WGL
    /* should probably make sure wgl works */
    return "wgl";
#endif

#ifdef DM_OGL
    {
	Display *dpy;
	int return_val;

	if ((dpy = XOpenDisplay(dpy_string)) != NULL) {
	    if (XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val)) {
		XCloseDisplay(dpy);
		return "ogl";
	    }
	    XCloseDisplay(dpy);
	}
    }
#endif

#ifdef DM_X
    {
	Display *dpy;
	if ((dpy = XOpenDisplay(dpy_string)) != NULL) {
	    XCloseDisplay(dpy);
	    return "X";
	}
    }
#endif

#ifdef DM_TK
    return "tk";
#endif

    return NULL;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d45 1
a46 1
    if (!strcmp(name, "wgl")) {
d48 4
a52 1
#endif /* DM_WGL */
d54 1
a55 1
    if (!strcmp(name, "ogl")) {
d58 5
a62 5
	if ((dpy = XOpenDisplay(dpy_string)) == NULL) {
	    bu_log("dm_validXType: failed to open display - %s\n", dpy_string?dpy_string:"(DISPLAY unspecified)");
	    return 0;
	}
	if (XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val)) {
a63 1
	    return 1;
d65 3
a67 1
	XCloseDisplay(dpy);
d71 1
a71 2
#endif /* DM_OGL */

a72 1
    if (!strcmp(name, "X")) {
d74 3
a76 3
	if ((dpy = XOpenDisplay(dpy_string)) == NULL) {
	    bu_log("dm_validXType: failed to open display - %s\n", dpy_string?dpy_string:"(DISPLAY unspecified)");
	    return 0;
d78 4
a81 2
	XCloseDisplay(dpy);
	return 1;
a82 1
#endif /* DM_X */
d84 1
a85 1
    if (!strcmp(name, "tk")) {
d87 4
a91 1
#endif /* DM_TK */
d109 1
a109 3
	if ((dpy = XOpenDisplay(dpy_string)) == NULL) {
	    bu_log("dm_bestXType: failed to open display - %s\n", dpy_string?dpy_string:"(DISPLAY unspecified)");
	} else {
d122 1
a122 3
	if ((dpy = XOpenDisplay(dpy_string)) == NULL) {
	    bu_log("dm_bestXType: failed to open display - %s\n", dpy_string?dpy_string:"(DISPLAY unspecified)");
	} else {
@


14.17
log
@preliminary support for unaccelerated mgen on aqua through dm-tk

configure.ac:
        - use two levels of expansion for BRLCAD_DATA
        - enable_aqua configure option
        - move X11 ac_ macro tests from argument check section
        - rely on AC_PATH_XTRA to figure out most of what we need to know about
                where to find X
        - no longer look for libICE, libXmu, or libXsm  AC_PATH_XTRA
                populates X_PRE_LIBS with these but they seem completely unused
                right now.
        - look for opengl libs and headers in all of the places AC_PATH_XTRA
                looked for the xlibs
        - use tk's xlib headers when using tk-aqua rather than x
        - remove X11 "ugly hack"
        - include tk flags where necessary
        - remove --disable-shared from subconfigs
        - forcibly add tcl and tk build dirs to libtool wrapper scripts
libdm/Makefile.am, dm-tk.[ch], dm.h, dm-generic.c, dm_obj.c, mged/Makefile.am,
                attach.c, dm-generic.c, dm-tk.c, ged.c:
        - use lower case when referring to tk
        - add support for using dm-tk
        - include X_CFLAGS with DM_X
irprep/Makefile.am, util/Makefile.am:
        - disable build of ir-X, pl-X when there is no X
dm-X.c:
        - no need to test for HAVE_X11_XLIB here; if we don't have it we
                shouldn't be building this file
libfb/Makefile.am, if_tk.c, libfb/tcl.c:
        - build if_tk.c
        - add preliminary hooks so if_tk can be called when ready
@
text
@d26 1
a26 3
#ifdef HAVE_STRING_H
#  include <string.h>
#endif
@


14.17.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d26 3
a28 1
#include <string.h>
@


14.17.2.2
log
@merge dm_bestXType fix in from head, this should quell the failure warnings that the m2 folks are seeing.
@
text
@a44 1
    if (strcmp(name, "wgl")==0) {
d46 1
d48 1
a48 2
#else
	bu_log("Specified display type [%s] is not available in this compilation.", name);
a49 2
	return 0;
    }
a50 1
    if (strcmp(name, "ogl")==0) {
d52 1
d55 5
a59 5
	if ((dpy = XOpenDisplay(dpy_string)) != NULL) {
	    if (XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val)) {
		XCloseDisplay(dpy);
		return 1;
	    }
d61 1
d63 1
a63 3
#else
	bu_log("Specified display type [%s] is not available in this compilation.", name);
#endif /* DM_OGL */
d67 2
a68 1
    if (strcmp(name, "X")==0) {
d70 1
d72 3
a74 3
	if ((dpy = XOpenDisplay(dpy_string)) != NULL) {
	    XCloseDisplay(dpy);
	    return 1;
d76 3
a78 2
#else
	bu_log("Specified display type [%s] is not available in this compilation.", name);
a79 2
	return 0;
    }
a80 1
    if (strcmp(name, "tk")==0) {
d82 1
d84 1
a84 2
#else
	bu_log("Specified display type [%s] is not available in this compilation.", name);
a85 2
	return 0;
    }
d103 3
a105 1
	if ((dpy = XOpenDisplay(dpy_string)) != NULL) {
d118 3
a120 1
	if ((dpy = XOpenDisplay(dpy_string)) != NULL) {
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d83 6
d129 4
@


14.15
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.14
log
@oops, declare dpy as a Display
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.13
log
@don't use the HAVE_XOPENDISPLAY define, configure doesn't provide it atm anyways.  instead merge in the logic pertaining to checking for X and/or GLX into their respective sections.
@
text
@d56 1
@


14.12
log
@decouple DM_X from the other display manager interfaces, clean up the preprocessor logic so Windows does not need to declare it
@
text
@d48 5
a52 5
	int val = 0;

#ifdef HAVE_XOPENDISPLAY
	/* Here we assume the X server supports OpenGL */
	Display *dpy;
d54 3
d58 1
a58 1
	    bu_log("dm_validXType: failed to open display - %s\n", dpy_string);
d61 3
a63 7

#  ifdef DM_OGL
	if (!strcmp(name, "ogl")) {
	    int return_val;
	    if (dpy && XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val)) {
		val = 1;
	    }
d65 3
a67 1
#  endif /* DM_OGL */
d69 1
a69 2
	XCloseDisplay(dpy);
#endif /* HAVE_XOPENDISPLAY */
d72 9
a80 2
	if (!strcmp(name, "X"))
	    val = 1;
d83 1
a83 12
#ifdef DM_OGL
	if (!strcmp(name, "ogl")) {
	    val = 1;
	}
#endif /* DM_OGL */

#ifdef DM_WGL
	if (!strcmp(name, "wgl"))
	    return 1;
#endif /* DM_WGL */

	return val;
a88 21
    char *name = (char *)NULL;

#ifdef HAVE_XOPENDISPLAY
    /* Here we assume the X server supports OpenGL */
    Display *dpy;
    int return_val;

    if ((dpy = XOpenDisplay(dpy_string)) == NULL) {
	bu_log("dm_bestXType: failed to open display - %s\n", dpy_string);
	return NULL;
    }

#  ifdef DM_OGL
    if (XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val)) {
	name = "ogl";
    }
#  endif  /* DM_OGL */

    XCloseDisplay(dpy);
#endif /* HAVE_XOPENDISPLAY */

d90 1
d95 14
a108 1
    return "ogl";
d112 9
a120 1
    return "X";
d123 1
a123 1
    return name;
@


14.11
log
@add explicit code for DM_WGL and IF_WGL for Windows GL support instead of piggybacking off of the OGL interface
@
text
@d46 1
a46 2
dm_validXType(char	*dpy_string,
	      char	*name)
a52 1
	int return_val;
d55 2
a56 2
		bu_log("dm_validXType: failed to open display - %s\n", dpy_string);
		return val;
d60 3
a62 2
	if (!strcmp(name, "ogl") &&
	    XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val))
d64 3
a66 6
	else
#  endif
#  ifdef DM_X
		if (!strcmp(name, "X"))
			val = 1;
#  endif
d69 1
d71 4
a74 1
#else /* HAVE_XOPENDISPLAY */
d76 7
a82 1
#  ifdef DM_WGL
d84 2
a85 12
		return 1;
#  endif
#  ifdef DM_OGL
	if (!strcmp(name, "ogl"))
		return 1;
#  endif
#  ifdef DM_X
	if (!strcmp(name, "X"))
		return 1;
#  endif

#endif /* HAVE_XOPENDISPLAY */
d87 1
a87 1
  return val;
d93 1
a93 1
	char *name = (char *)NULL;
d96 8
a103 8
	/* Here we assume the X server supports OpenGL */
	Display *dpy;
	int return_val;

	if ((dpy = XOpenDisplay(dpy_string)) == NULL) {
		bu_log("dm_bestXType: failed to open display - %s\n", dpy_string);
		return name;
	}
d106 3
a108 8
	if (XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val)) {
		name = "ogl";
	}
#    ifdef DM_X
	else {
	    name = "X";
	}
#    endif /* DM_X */
d111 5
a115 2
#ifdef DM_X
		name = "X";
d118 3
a120 1
	XCloseDisplay(dpy);
d122 3
a124 13
#else /* HAVE_XOPENDISPLAY */

#  ifdef DM_WGL
	return "wgl";
#  endif
#  ifdef DM_OGL
	return "ogl";
#  endif
#  ifdef DM_X
	return "X";
#  endif

#endif /* HAVE_XOPENDISPLAY */
d126 1
a126 1
	return name;
@


14.10
log
@update copyright to 2006
@
text
@d76 4
d128 3
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.8
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d66 1
a66 1
#  endif  
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d66 1
a66 1
#  endif
@


14.7
log
@remove USE_MESA_GL
@
text
@d27 3
d31 2
a32 2
#ifdef HAVE_STRING_H
#include <string.h>
a34 3
#if 0
#include "tk.h"
#else
a35 4
#ifndef WIN32
#include <X11/Xlib.h>
#endif
#endif
@


14.6
log
@bye bye USE_MESA_GL .. needs some good testing on the ogl interface
@
text
@d58 1
a80 1
	int return_val;
d99 3
a101 5
#ifdef WIN32
  return "ogl";
#else

#if !defined(USE_MESA_GL) && defined(DM_OGL)
a102 13
#endif

#ifdef USE_MESA_GL

#ifdef DM_OGL
	return "ogl";
#endif
#ifdef DM_X
	return "X";
#endif

#else /* Here we assume the X server supports OpenGL */
	Display *dpy;
d109 2
a110 2
#ifdef DM_OGL
	if (XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val))
d112 8
a119 2
	else
#endif  
d126 10
a135 2
#endif
#endif /* WIN32 */
@


14.5
log
@update copyright to 2005
@
text
@d55 2
a56 20
#ifdef WIN32
  if(!strcmp(name, "ogl"))
     return 1;
#else
#if !defined(USE_MESA_GL) && defined(DM_OGL)
	int return_val;
#endif

#ifdef USE_MESA_GL

#ifdef DM_OGL
	if (!strcmp(name, "ogl"))
		return 1;
#endif
#ifdef DM_X
	if (!strcmp(name, "X"))
		return 1;
#endif

#else /* Here we assume the X server supports OpenGL */
d64 1
a64 1
#ifdef DM_OGL
d69 2
a70 2
#endif  
#ifdef DM_X
d73 1
a73 1
#endif
d77 11
a87 1
#endif
d89 1
a89 1
#endif /* WIN32*/
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 24
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d124 10
@


1.2
log
@obliterate externs.h
@
text
@d1 1
a1 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a19 1
#include "externs.h"
@

