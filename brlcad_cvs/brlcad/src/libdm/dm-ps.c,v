head	14.15;
access;
symbols
	rel-7-10-4:14.14.2.1
	STABLE:14.14.0.2
	stable-branch:14.6
	rel-7-10-2:14.14
	rel-7-10-0:14.13
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.6
	rel-7-6-0:14.7
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.15
date	2007.09.15.16.23.10;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.05.14.21.04.31;	author brlcad;	state Exp;
branches
	14.14.2.1;
next	14.13;

14.13
date	2007.01.27.01.41.37;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.52;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.31.06.08.20;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.33;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.05.28.02.14.50;	author brlcad;	state Exp;
branches
	14.7.6.1;
next	14.6;

14.6
date	2005.01.30.20.30.47;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.22;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.02.24.40;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.14;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.03.20.42.29;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.19;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.38;	author morrison;	state Exp;
branches;
next	;

14.7.6.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;

14.14.2.1
date	2007.09.28.14.04.31;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                         D M - P S . C
 * BRL-CAD
 *
 * Copyright (c) 1985-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dm-ps.c
 *
 * A useful hack to allow GED to generate
 * PostScript files that not only contain the drawn objects, but
 * also contain the faceplate display as well.
 * Mostly, used for making viewgraphs and photographs
 * of an editing session.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.14 2007/05/14 21:04:31 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>

#ifdef HAVE_SYS_TIME_H
#  include <sys/time.h>		/* for struct timeval */
#endif

#include "tcl.h"

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "mater.h"
#include "raytrace.h"
#include "dm.h"
#include "dm-ps.h"
#include "solid.h"

#define EPSILON          0.0001

/* Display Manager package interface */

#define PLOTBOUND	1000.0	/* Max magnification in Rot matrix */
struct dm	*ps_open(Tcl_Interp *interp, int argc, char **argv);
static int	ps_close(struct dm *dmp);
static int	ps_drawBegin(struct dm *dmp), ps_drawEnd(struct dm *dmp);
static int	ps_normal(struct dm *dmp), ps_loadMatrix(struct dm *dmp, fastf_t *mat, int which_eye);
static int	ps_drawString2D(struct dm *dmp, register char *str, fastf_t x, fastf_t y, int size, int use_aspect), ps_drawLine2D(struct dm *dmp, fastf_t x1, fastf_t y1, fastf_t x2, fastf_t y2);
static int      ps_drawPoint2D(struct dm *dmp, fastf_t x, fastf_t y);
static int	ps_drawVList(struct dm *dmp, register struct bn_vlist *vp);
static int      ps_setFGColor(struct dm *dmp, unsigned char r, unsigned char g, unsigned char b, int strict, fastf_t transparency);
static int      ps_setBGColor(struct dm *dmp, unsigned char r, unsigned char g, unsigned char b);
static int      ps_setLineAttr(struct dm *dmp, int width, int style);
static int	ps_setWinBounds(struct dm *dmp, register int *w), ps_debug(struct dm *dmp, int lvl);

struct dm dm_ps = {
  ps_close,
  ps_drawBegin,
  ps_drawEnd,
  ps_normal,
  ps_loadMatrix,
  ps_drawString2D,
  ps_drawLine2D,
  ps_drawPoint2D,
  ps_drawVList,
  ps_setFGColor,
  ps_setBGColor,
  ps_setLineAttr,
  Nu_int0,
  ps_setWinBounds,
  Nu_int0,
  Nu_int0,
  Nu_int0,
  Nu_int0,
  ps_debug,
  Nu_int0,
  Nu_int0,
  Nu_int0,
  Nu_int0,
  0,
  0,				/* no displaylist */
  0,                            /* no stereo */
  PLOTBOUND,			/* zoom-in limit */
  1,				/* bound flag */
  "ps",
  "Screen to PostScript",
  DM_TYPE_PS,
  0,
  0,
  0,
  0,
  0,
  1.0, /* aspect ratio */
  0,
  {0, 0},
  {0, 0, 0, 0, 0},		/* bu_vls path name*/
  {0, 0, 0, 0, 0},		/* bu_vls full name drawing window */
  {0, 0, 0, 0, 0},		/* bu_vls short name drawing window */
  {0, 0, 0},			/* bg color */
  {0, 0, 0},			/* fg color */
  {0.0, 0.0, 0.0},		/* clipmin */
  {0.0, 0.0, 0.0},		/* clipmax */
  0,				/* no debugging */
  0,				/* no perspective */
  0,				/* no lighting */
  0,				/* no transparency */
  0,				/* depth buffer is not writable */
  0,				/* no zbuffer */
  0,				/* no zclipping */
  1,                            /* clear back buffer after drawing and swap */
  0				/* Tcl interpreter */
};

char ps_usage[] = "Usage: ps [-f font] [-t title] [-c creator] [-s size in inches]\
 [-l linewidth] file";

struct ps_vars head_ps_vars;
static mat_t psmat;

/*
 *			P S _ O P E N
 *
 * Open the output file, and output the PostScript prolog.
 *
 */
struct dm *
ps_open(Tcl_Interp *interp, int argc, char **argv)
{
	static int	count = 0;
	struct dm	*dmp;
	Tcl_Obj		*obj;

	BU_GETSTRUCT(dmp, dm);
	if (dmp == DM_NULL)
		return DM_NULL;

	*dmp = dm_ps;  /* struct copy */
	dmp->dm_interp = interp;

	dmp->dm_vars.priv_vars = (genptr_t)bu_calloc(1, sizeof(struct ps_vars), "ps_open: ps_vars");
	if (dmp->dm_vars.priv_vars == (genptr_t)NULL) {
		bu_free((genptr_t)dmp, "ps_open: dmp");
		return DM_NULL;
	}

	obj = Tcl_GetObjResult(interp);
	if (Tcl_IsShared(obj))
		obj = Tcl_DuplicateObj(obj);

	bu_vls_init(&dmp->dm_pathName);
	bu_vls_init(&dmp->dm_tkName);
	bu_vls_printf(&dmp->dm_pathName, ".dm_ps%d", count++);
	bu_vls_printf(&dmp->dm_tkName, "dm_ps%d", count++);

	bu_vls_init(&((struct ps_vars *)dmp->dm_vars.priv_vars)->fname);
	bu_vls_init(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font);
	bu_vls_init(&((struct ps_vars *)dmp->dm_vars.priv_vars)->title);
	bu_vls_init(&((struct ps_vars *)dmp->dm_vars.priv_vars)->creator);

	/* set defaults */
	bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font, "Courier");
	bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->title, "No Title");
	bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->creator, "LIBDM dm-ps");
	((struct ps_vars *)dmp->dm_vars.priv_vars)->scale = 0.0791;
	((struct ps_vars *)dmp->dm_vars.priv_vars)->linewidth = 4;
	((struct ps_vars *)dmp->dm_vars.priv_vars)->zclip = 0;

	/* skip first argument */
	--argc; ++argv;

	/* Process any options */
	while (argv[0] != (char *)0 && argv[0][0] == '-') {
		switch (argv[0][1]) {
		case 'f':               /* font */
			if (argv[0][2] != '\0')
				bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font, &argv[0][2]);
			else {
				argv++;
				if (argv[0] == (char *)0 || argv[0][0] == '-') {
					Tcl_AppendStringsToObj(obj, ps_usage, (char *)0);
					(void)ps_close(dmp);

					Tcl_SetObjResult(interp, obj);
					return DM_NULL;
				} else
					bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font, &argv[0][0]);
			}
			break;
		case 't':               /* title */
			if (argv[0][2] != '\0')
				bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->title, &argv[0][2]);
			else {
				argv++;
				if (argv[0] == (char *)0 || argv[0][0] == '-') {
					Tcl_AppendStringsToObj(obj, ps_usage, (char *)0);
					(void)ps_close(dmp);

					Tcl_SetObjResult(interp, obj);
					return DM_NULL;
				} else
					bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->title, &argv[0][0]);
			}
			break;
		case 'c':               /* creator */
			if (argv[0][2] != '\0')
				bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->creator, &argv[0][2]);
			else {
				argv++;
				if (argv[0] == (char *)0 || argv[0][0] == '-') {
					Tcl_AppendStringsToObj(obj, ps_usage, (char *)0);
					(void)ps_close(dmp);

					Tcl_SetObjResult(interp, obj);
					return DM_NULL;
				} else
					bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->creator, &argv[0][0]);
			}
			break;
		case 's':               /* size in inches */
			{
				fastf_t size;

				if (argv[0][2] != '\0')
					sscanf(&argv[0][2], "%lf", &size);
				else {
					argv++;
					if (argv[0] == (char *)0 || argv[0][0] == '-') {
						Tcl_AppendStringsToObj(obj, ps_usage, (char *)0);
						(void)ps_close(dmp);

						Tcl_SetObjResult(interp, obj);
						return DM_NULL;
					} else
						sscanf(&argv[0][0], "%lf", &size);
				}

				((struct ps_vars *)dmp->dm_vars.priv_vars)->scale = size * 0.017578125;
			}
			break;
		case 'l':               /* line width */
			if (argv[0][2] != '\0')
				sscanf(&argv[0][2], "%d", &((struct ps_vars *)dmp->dm_vars.priv_vars)->linewidth);
			else{
				argv++;
				if (argv[0] == (char *)0 || argv[0][0] == '-') {
					Tcl_AppendStringsToObj(obj, ps_usage, (char *)0);
					(void)ps_close(dmp);

					Tcl_SetObjResult(interp, obj);
					return DM_NULL;
				} else
					sscanf(&argv[0][0], "%d", &((struct ps_vars *)dmp->dm_vars.priv_vars)->linewidth);
			}
			break;
		case 'z':
#if 0
			((struct ps_vars *)dmp->dm_vars.priv_vars)->zclip = 1;
#else
			dmp->dm_zclip = 1;
#endif
			break;
		default:
			Tcl_AppendStringsToObj(obj, ps_usage, (char *)0);
			(void)ps_close(dmp);

			Tcl_SetObjResult(interp, obj);
			return DM_NULL;
		}
		argv++;
	}

	if(argv[0] == (char *)0) {
		Tcl_AppendStringsToObj(obj, "no filename specified\n", (char *)NULL);
		(void)ps_close(dmp);

		Tcl_SetObjResult(interp, obj);
		return DM_NULL;
	}

	bu_vls_strcpy(&((struct ps_vars *)dmp->dm_vars.priv_vars)->fname, argv[0]);

	if ((((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp =
	     fopen(bu_vls_addr(&((struct ps_vars *)dmp->dm_vars.priv_vars)->fname), "w")) == NULL) {
		Tcl_AppendStringsToObj(obj, "f_ps: Error opening file - ",
				 ((struct ps_vars *)dmp->dm_vars.priv_vars)->fname,
				 "\n", (char *)NULL);
		(void)ps_close(dmp);

		Tcl_SetObjResult(interp, obj);
		return DM_NULL;
	}

	setbuf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,
	       ((struct ps_vars *)dmp->dm_vars.priv_vars)->ttybuf );
	fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,"%%!PS-Adobe-1.0\n\
%%begin(plot)\n\
%%%%DocumentFonts:  %s\n",
		bu_vls_addr(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font));

	fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp, "%%%%Title: %s\n",
		bu_vls_addr(&((struct ps_vars *)dmp->dm_vars.priv_vars)->title));

	fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp, "\
%%%%Creator: %s\n\
%%%%BoundingBox: 0 0 324 324	%% 4.5in square, for TeX\n\
%%%%EndComments\n\
\n",
		bu_vls_addr(&((struct ps_vars *)dmp->dm_vars.priv_vars)->creator));

	fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp, "\
%d setlinewidth\n\
\n\
%% Sizes, made functions to avoid scaling if not needed\n\
/FntH /%s findfont 80 scalefont def\n\
/DFntL { /FntL /%s findfont 73.4 scalefont def } def\n\
/DFntM { /FntM /%s findfont 50.2 scalefont def } def\n\
/DFntS { /FntS /%s findfont 44 scalefont def } def\n\
\n\
%% line styles\n\
/NV { [] 0 setdash } def	%% normal vectors\n\
/DV { [8] 0 setdash } def	%% dotted vectors\n\
/DDV { [8 8 32 8] 0 setdash } def	%% dot-dash vectors\n\
/SDV { [32 8] 0 setdash } def	%% short-dash vectors\n\
/LDV { [64 8] 0 setdash } def	%% long-dash vectors\n\
\n\
/NEWPG {\n\
	%f %f scale	%% 0-4096 to 324 units (4.5 inches)\n\
} def\n\
\n\
FntH  setfont\n\
NEWPG\n\
",
		((struct ps_vars *)dmp->dm_vars.priv_vars)->linewidth,
		bu_vls_addr(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font),
		bu_vls_addr(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font),
		bu_vls_addr(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font),
		bu_vls_addr(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font),
		((struct ps_vars *)dmp->dm_vars.priv_vars)->scale,
		((struct ps_vars *)dmp->dm_vars.priv_vars)->scale);

	MAT_IDN(psmat);

	Tcl_SetObjResult(interp, obj);
	return dmp;
}

/*
 *  			P S _ C L O S E
 *
 *  Gracefully release the display.
 */
static int
ps_close(struct dm *dmp)
{
  if(!((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp)
    return TCL_ERROR;

  fputs("%end(plot)\n", ((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp);
  (void)fclose(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp);

  bu_vls_free(&dmp->dm_pathName);
  bu_vls_free(&dmp->dm_tkName);
  bu_vls_free(&((struct ps_vars *)dmp->dm_vars.priv_vars)->fname);
  bu_vls_free(&((struct ps_vars *)dmp->dm_vars.priv_vars)->font);
  bu_vls_free(&((struct ps_vars *)dmp->dm_vars.priv_vars)->title);
  bu_vls_free(&((struct ps_vars *)dmp->dm_vars.priv_vars)->creator);
  bu_free((genptr_t)dmp->dm_vars.priv_vars, "ps_close: ps_vars");
  bu_free((genptr_t)dmp, "ps_close: dmp");

  return TCL_OK;
}

/*
 *			P S _ P R O L O G
 *
 * There are global variables which are parameters to this routine.
 */
static int
ps_drawBegin(struct dm *dmp)
{
  return TCL_OK;
}

/*
 *			P S _ E P I L O G
 */
static int
ps_drawEnd(struct dm *dmp)
{
  if( !((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp )
    return TCL_ERROR;

  fputs("% showpage	% uncomment to use raw file\n",
	((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp);
  (void)fflush( ((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp );

  return TCL_OK;
}

/*
 *  			P S _ N E W R O T
 *
 *  Load a new transformation matrix.  This will be followed by
 *  many calls to ps_drawVList().
 */
static int
ps_loadMatrix(struct dm *dmp, fastf_t *mat, int which_eye)
{
	Tcl_Obj	*obj;

	obj = Tcl_GetObjResult(dmp->dm_interp);
	if (Tcl_IsShared(obj))
		obj = Tcl_DuplicateObj(obj);

	if (((struct ps_vars *)dmp->dm_vars.priv_vars)->debug) {
		struct bu_vls tmp_vls;

		Tcl_AppendStringsToObj(obj, "ps_loadMatrix()\n", (char *)NULL);

		bu_vls_init(&tmp_vls);
		bu_vls_printf(&tmp_vls, "which eye = %d\t", which_eye);
		bu_vls_printf(&tmp_vls, "transformation matrix = \n");
		bu_vls_printf(&tmp_vls, "%g %g %g %g\n", mat[0], mat[4], mat[8],mat[12]);
		bu_vls_printf(&tmp_vls, "%g %g %g %g\n", mat[1], mat[5], mat[9],mat[13]);
		bu_vls_printf(&tmp_vls, "%g %g %g %g\n", mat[2], mat[6], mat[10],mat[14]);
		bu_vls_printf(&tmp_vls, "%g %g %g %g\n", mat[3], mat[7], mat[11],mat[15]);

		Tcl_AppendStringsToObj(obj, bu_vls_addr(&tmp_vls), (char *)NULL);
		bu_vls_free(&tmp_vls);
	}

	MAT_COPY(psmat, mat);

	Tcl_SetObjResult(dmp->dm_interp, obj);
	return TCL_OK;
}

/*
 *  			P S _ O B J E C T
 *
 *  Set up for an object, transformed as indicated, and with an
 *  object center as specified.  The ratio of object to screen size
 *  is passed in as a convienience.
 *
 *  Returns 0 if object could be drawn, !0 if object was omitted.
 */
/* ARGSUSED */
static int
ps_drawVList(struct dm *dmp, register struct bn_vlist *vp)
{
  static vect_t			last;
  register struct bn_vlist	*tvp;
  register point_t		*pt_prev=NULL;
  register fastf_t		dist_prev=1.0;
  register fastf_t		dist;
  fastf_t			delta;
  int useful = 0;

  if( !((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp )
    return TCL_ERROR;

#if 0
  if( linestyle )
    fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp, "DDV ");		/* Dot-dashed vectors */
  else
    fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp, "NV ");		/* Normal vectors */
#endif

    /* delta is used in clipping to insure clipped endpoint is slightly
     * in front of eye plane (perspective mode only).
     * This value is a SWAG that seems to work OK.
     */
    delta = psmat[15]*0.0001;
    if( delta < 0.0 )
	delta = -delta;
    if( delta < SQRT_SMALL_FASTF )
	delta = SQRT_SMALL_FASTF;

  for( BU_LIST_FOR( tvp, bn_vlist, &vp->l ) )  {
    register int	i;
    register int	nused = tvp->nused;
    register int	*cmd = tvp->cmd;
    register point_t *pt = tvp->pt;
    for( i = 0; i < nused; i++,cmd++,pt++ )  {
      static vect_t	start, fin;
      switch( *cmd )  {
      case BN_VLIST_POLY_START:
      case BN_VLIST_POLY_VERTNORM:
	continue;
      case BN_VLIST_POLY_MOVE:
      case BN_VLIST_LINE_MOVE:
	/* Move, not draw */
		if (dmp->dm_perspective > 0)
		{
			/* cannot apply perspective transformation to
			 * points behind eye plane!!!!
			 */
			dist = VDOT( *pt, &psmat[12] ) + psmat[15];
			if( dist <= 0.0 )
			{
				pt_prev = pt;
				dist_prev = dist;
				continue;
			}
			else
			{
				MAT4X3PNT( last, psmat, *pt );
				dist_prev = dist;
				pt_prev = pt;
			}
		}
		else
			MAT4X3PNT( last, psmat, *pt );
	continue;
      case BN_VLIST_POLY_DRAW:
      case BN_VLIST_POLY_END:
      case BN_VLIST_LINE_DRAW:
	/* draw */
		if (dmp->dm_perspective > 0)
		{
			/* cannot apply perspective transformation to
			 * points behind eye plane!!!!
			 */
			dist = VDOT( *pt, &psmat[12] ) + psmat[15];
			if( dist <= 0.0 )
			{
				if( dist_prev <= 0.0 )
				{
					/* nothing to plot */
					dist_prev = dist;
					pt_prev = pt;
					continue;
				}
				else
				{
					fastf_t alpha;
					vect_t diff;
					point_t tmp_pt;

					/* clip this end */
					VSUB2( diff, *pt, *pt_prev );
					alpha = (dist_prev - delta) / ( dist_prev - dist );
					VJOIN1( tmp_pt, *pt_prev, alpha, diff );
					MAT4X3PNT( fin, psmat, tmp_pt );
				}
			}
			else
			{
				if( dist_prev <= 0.0 )
				{
					fastf_t alpha;
					vect_t diff;
					point_t tmp_pt;

					/* clip other end */
					VSUB2( diff, *pt, *pt_prev );
					alpha = (-dist_prev + delta) / ( dist - dist_prev );
					VJOIN1( tmp_pt, *pt_prev, alpha, diff );
					MAT4X3PNT( last, psmat, tmp_pt );
					MAT4X3PNT( fin, psmat, *pt );
				}
				else
				{
					MAT4X3PNT( fin, psmat, *pt );
				}
			}
		}
		else
			MAT4X3PNT( fin, psmat, *pt );
	VMOVE( start, last );
	VMOVE( last, fin );
	break;
      }

      if(vclip( start, fin, dmp->dm_clipmin,
		dmp->dm_clipmax ) == 0)
	continue;

      fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,
	      "newpath %d %d moveto %d %d lineto stroke\n",
	      GED_TO_PS( start[0] * 2047 ),
	      GED_TO_PS( start[1] * 2047 ),
	      GED_TO_PS( fin[0] * 2047 ),
	      GED_TO_PS( fin[1] * 2047 ) );
      useful = 1;
    }
  }

  if(useful)
    return TCL_OK;

  return TCL_ERROR;
}

/*
 *			P S _ N O R M A L
 *
 * Restore the display processor to a normal mode of operation
 * (ie, not scaled, rotated, displaced, etc).
 * Turns off windowing.
 */
static int
ps_normal(struct dm *dmp)
{
  return TCL_OK;
}

/*
 *			P S _ D R A W S T R I N G 2 D
 *
 * Output a string into the displaylist.
 * The starting position of the beam is as specified.
 */
/* ARGSUSED */
static int
ps_drawString2D(struct dm *dmp, register char *str, fastf_t x, fastf_t y, int size, int use_aspect)
{
  int sx, sy;

  if( !((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp )
    return TCL_ERROR;

  switch( size )  {
  default:
    /* Smallest */
    fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,"DFntS ");
    break;
  case 1:
    fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,"DFntM ");
    break;
  case 2:
    fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,"DFntL ");
    break;
  case 3:
    /* Largest */
    fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,"FntH ");
    break;
  }

  sx = x * 2047.0 + 2048;
  sy = y * 2047.0 + 2048;
  fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,
	  "(%s) %d %d moveto show\n", str, sx, sy );

  return TCL_OK;
}

/*
 *			P S _ D R A W L I N E 2 D
 *
 */
static int
ps_drawLine2D(struct dm *dmp, fastf_t x1, fastf_t y1, fastf_t x2, fastf_t y2)
{
  int sx1, sy1;
  int sx2, sy2;

  if( !((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp )
    return TCL_ERROR;

  sx1 = x1 * 2047.0 + 2048;
  sx2 = x2 * 2047.0 + 2048;
  sy1 = y1 * 2047.0 + 2048;
  sy2 = y2 * 2047.0 + 2048;

  fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp,
	  "newpath %d %d moveto %d %d lineto stroke\n",
	  sx1, sy1, sx2, sy2);

  return TCL_OK;
}

static int
ps_drawPoint2D(struct dm *dmp, fastf_t x, fastf_t y)
{
  return ps_drawLine2D(dmp, x, y, x, y);
}

static int
ps_setFGColor(struct dm *dmp, unsigned char r, unsigned char g, unsigned char b, int strict, fastf_t transparency)
{
  return TCL_OK;
}
static int
ps_setBGColor(struct dm *dmp, unsigned char r, unsigned char g, unsigned char b)
{
  return TCL_OK;
}

static int
ps_setLineAttr(struct dm *dmp, int width, int style)
{
  dmp->dm_lineWidth = width;
  dmp->dm_lineStyle = style;

  if(style == DM_DASHED_LINE)
    fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp, "DDV "); /* Dot-dashed vectors */
  else
    fprintf(((struct ps_vars *)dmp->dm_vars.priv_vars)->ps_fp, "NV "); /* Normal vectors */

  return TCL_OK;
}

/* ARGSUSED */
static int
ps_debug(struct dm *dmp, int lvl)
{
  dmp->dm_debugLevel = lvl;
  return TCL_OK;
}

static int
ps_setWinBounds(struct dm *dmp, register int *w)
{
  /* Compute the clipping bounds */
  dmp->dm_clipmin[0] = w[0] / 2048.;
  dmp->dm_clipmax[0] = w[1] / 2047.;
  dmp->dm_clipmin[1] = w[2] / 2048.;
  dmp->dm_clipmax[1] = w[3] / 2047.;

#if 0
  if(((struct ps_vars *)dmp->dm_vars.priv_vars)->zclip){
#else
  if (dmp->dm_zclip) {
#endif
    dmp->dm_clipmin[2] = w[4] / 2048.;
    dmp->dm_clipmax[2] = w[5] / 2047.;
  }else{
    dmp->dm_clipmin[2] = -1.0e20;
    dmp->dm_clipmax[2] = 1.0e20;
  }

  return TCL_OK;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.13 2007/01/27 01:41:37 brlcad Exp $ (BRL)";
a43 1
#ifdef HAVE_STRING_H
d45 1
a45 1
#endif
a49 1

@


14.14.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.15 2007/09/15 16:23:10 brlcad Exp $ (BRL)";
d44 1
d46 1
a46 1

d51 1
@


14.13
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.12 2007/01/23 01:13:34 brlcad Exp $ (BRL)";
d477 1
a477 1
  register struct rt_vlist	*tvp;
d504 1
a504 1
  for( BU_LIST_FOR( tvp, rt_vlist, &vp->l ) )  {
d512 2
a513 2
      case RT_VLIST_POLY_START:
      case RT_VLIST_POLY_VERTNORM:
d515 2
a516 2
      case RT_VLIST_POLY_MOVE:
      case RT_VLIST_LINE_MOVE:
d540 3
a542 3
      case RT_VLIST_POLY_DRAW:
      case RT_VLIST_POLY_END:
      case RT_VLIST_LINE_DRAW:
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.11 2007/01/20 14:36:52 brlcad Exp $ (BRL)";
d519 2
a520 2
	    	{
	    		/* cannot apply perspective transformation to
d522 15
a536 15
	    		 */
	    		dist = VDOT( *pt, &psmat[12] ) + psmat[15];
	    		if( dist <= 0.0 )
	    		{
	    			pt_prev = pt;
	    			dist_prev = dist;
	    			continue;
	    		}
	    		else
	    		{
	    			MAT4X3PNT( last, psmat, *pt );
	    			dist_prev = dist;
	    			pt_prev = pt;
	    		}
	    	}
d545 2
a546 2
	    	{
	    		/* cannot apply perspective transformation to
d548 45
a592 45
	    		 */
	    		dist = VDOT( *pt, &psmat[12] ) + psmat[15];
	    		if( dist <= 0.0 )
	    		{
	    			if( dist_prev <= 0.0 )
	    			{
	    				/* nothing to plot */
		    			dist_prev = dist;
		    			pt_prev = pt;
		    			continue;
	    			}
	    			else
	    			{
	    				fastf_t alpha;
	    				vect_t diff;
	    				point_t tmp_pt;

	    				/* clip this end */
	    				VSUB2( diff, *pt, *pt_prev );
	    				alpha = (dist_prev - delta) / ( dist_prev - dist );
	    				VJOIN1( tmp_pt, *pt_prev, alpha, diff );
	    				MAT4X3PNT( fin, psmat, tmp_pt );
	    			}
	    		}
	    		else
	    		{
	    			if( dist_prev <= 0.0 )
	    			{
	    				fastf_t alpha;
	    				vect_t diff;
	    				point_t tmp_pt;

	    				/* clip other end */
	    				VSUB2( diff, *pt, *pt_prev );
	    				alpha = (-dist_prev + delta) / ( dist - dist_prev );
	    				VJOIN1( tmp_pt, *pt_prev, alpha, diff );
	    				MAT4X3PNT( last, psmat, tmp_pt );
	    				MAT4X3PNT( fin, psmat, *pt );
	    			}
	    			else
	    			{
	    				MAT4X3PNT( fin, psmat, *pt );
	    			}
	    		}
	    	}
@


14.11
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.10 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2006 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.9 2005/10/31 06:08:20 brlcad Exp $ (BRL)";
@


14.9
log
@quell aix compiler warnings, cast bu_free pointer to genptr_t
@
text
@d4 1
a4 1
 * Copyright (C) 1985-2005 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.8 2005/10/23 04:44:33 brlcad Exp $ (BRL)";
@


14.8
log
@trailing ws
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.7 2005/05/28 02:14:50 brlcad Exp $ (BRL)";
d168 1
a168 1
		bu_free(dmp, "ps_open: dmp");
d393 2
a394 2
  bu_free(dmp->dm_vars.priv_vars, "ps_close: ps_vars");
  bu_free(dmp, "ps_close: dmp");
@


14.7
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d31 1
a31 1
 *  
d36 1
a36 1
 *  
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.6 2005/01/30 20:30:47 brlcad Exp $ (BRL)";
d318 1
a318 1
  
d375 1
a375 1
 *  
d466 1
a466 1
 *  
@


14.7.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d31 1
a31 1
 *
d36 1
a36 1
 *
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d168 1
a168 1
		bu_free((genptr_t)dmp, "ps_open: dmp");
d318 1
a318 1

d375 1
a375 1
 *
d393 2
a394 2
  bu_free((genptr_t)dmp->dm_vars.priv_vars, "ps_close: ps_vars");
  bu_free((genptr_t)dmp, "ps_close: dmp");
d466 1
a466 1
 *
@


14.6
log
@update copyright to 2005
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libdm/dm-ps.c,v 14.5 2004/12/21 06:38:20 morrison Exp $ (BRL)";
a43 3

#include "tcl.h"

d48 2
a49 2
#ifndef WIN32
#include <sys/time.h>		/* for struct timeval */
d51 4
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2004 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libdm/dm-ps.c,v 14.4 2004/12/21 06:18:44 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a36 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libdm/dm-ps.c,v 14.3 2004/12/21 05:45:22 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libdm/dm-ps.c,v 14.2 2004/12/21 02:24:40 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libdm/dm-ps.c,v 14.1 2004/11/16 19:42:14 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D M - P S . C
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libdm/dm-ps.c,v 1.4 2004/08/03 20:42:29 morrison Exp $ (BRL)";
@


1.4
log
@apply Bob's provided patches from 20040630.  this includes itcl namespace scoping, windows DLL exporting, and wdb arb edit support
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libdm/dm-ps.c,v 1.2 2004/06/08 22:04:19 morrison Exp $ (BRL)";
d744 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d116 1
@


1.2
log
@obliterate externs.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libdm/dm-ps.c,v 1.38 2004/05/10 15:30:44 erikg Exp $ (BRL)";
a40 1
#include "externs.h"
@

