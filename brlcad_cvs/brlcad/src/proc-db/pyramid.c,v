head	14.10;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.2
	stable-branch:14.3
	rel-7-10-2:14.9
	rel-7-10-0:14.8
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.10
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.07.26.01.13.58;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.02.27.10.08.41;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.46.08;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.40;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.10
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                       P Y R A M I D . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pyramid.c
 *
 *  Program to generate recursive 3-d pyramids (arb4).
 *  Inspired by the SigGraph paper of Glasser.
 *
 *  Author -
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/pyramid.c,v 14.9 2007/07/26 01:13:58 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "wdb.h"


void	do_leaf(char *name), do_pleaf(), pnorms(fastf_t (*norms)[3], fastf_t (*verts)[3], fastf_t *centroid, int npts), do_tree(char *name, char *lname, int level);

double sin60;

struct rt_wdb *outfp;

int
main(int argc, char **argv)
{
	int depth;

	if( argc != 2 )  {
		fprintf(stderr, "Usage:  pyramid recursion\n");
		return 1;
	}
	depth = atoi( argv[1] );
	sin60 = sin(60.0 * 3.14159265358979323846264 / 180.0);

	outfp = wdb_fopen( "pyramid.g" );

	mk_id( outfp, "3-D Pyramids" );

	do_leaf("leaf");
#if 0
	do_pleaf("polyleaf");
#endif
	do_tree("tree", "leaf", depth);

	return 0;
}

/* Make a leaf node out of an ARB4 */
void
do_leaf(char *name)
{
	point_t pt[4];

	VSET( pt[0], 0, 0, 0);
	VSET( pt[1], 100, 0, 0);
	VSET( pt[2], 50, 100*sin60, 0);
	VSET( pt[3], 50, 100*sin60/3, 100*sin60 );

	mk_arb4( outfp, name, &pt[0][X] );
}

#if 0
/* Make a leaf node out of 4 polygons */
void
do_pleaf(name)
char	*name;
{
	point_t pt[4];
	fastf_t	verts[5][3];
	fastf_t	norms[5][3];
	point_t	centroid;
	register int i;

	VSET( pt[0], 0, 0, 0);
	VSET( pt[1], 100, 0, 0);
	VSET( pt[2], 50, 100*sin60, 0);
	VSET( pt[3], 50, 100*sin60/3, 100*sin60 );

	VMOVE( centroid, pt[0] );
	for( i=1; i<4; i++ )  {
		VADD2( centroid, centroid, pt[i] );
	}
	VSCALE( centroid, centroid, 0.25 );

	mk_polysolid( outfp, name );

	VMOVE( verts[0], pt[0] );
	VMOVE( verts[1], pt[1] );
	VMOVE( verts[2], pt[2] );
	pnorms( norms, verts, centroid, 3 );
	mk_poly( outfp, 3, verts, norms );

	VMOVE( verts[0], pt[0] );
	VMOVE( verts[1], pt[1] );
	VMOVE( verts[2], pt[3] );
	pnorms( norms, verts, centroid, 3 );
	mk_poly( outfp, 3, verts, norms );

	VMOVE( verts[0], pt[0] );
	VMOVE( verts[1], pt[2] );
	VMOVE( verts[2], pt[3] );
	pnorms( norms, verts, centroid, 3 );
	mk_poly( outfp, 3, verts, norms );

	VMOVE( verts[0], pt[1] );
	VMOVE( verts[1], pt[2] );
	VMOVE( verts[2], pt[3] );
	pnorms( norms, verts, centroid, 3 );
	mk_poly( outfp, 3, verts, norms );
}
#endif

/*
 *  Find the single outward pointing normal for a facet.
 *  Assumes all points are coplanar (they better be!).
 */
void
pnorms(fastf_t (*norms)[3], fastf_t (*verts)[3], fastf_t *centroid, int npts)
{
	register int i;
	vect_t	ab, ac;
	vect_t	n;
	vect_t	out;		/* hopefully points outwards */

	VSUB2( ab, verts[1], verts[0] );
	VSUB2( ac, verts[2], verts[0] );
	VCROSS( n, ab, ac );
	VUNITIZE( n );

	/* If normal points inwards (towards centroid), flip it */
	VSUB2( out, verts[0], centroid );
	if( VDOT( n, out ) < 0 )  {
		VREVERSE( n, n );
	}

	/* Use same normal for all vertices (flat shading) */
	for( i=0; i<npts; i++ )  {
		VMOVE( norms[i], n );
	}
}

void
do_tree(char *name, char *lname, int level)
{
	register int i;
	char nm[64];
	char *leafp;
	int scale;
	struct wmember	head;
	struct wmember	*wp;

	BU_LIST_INIT(&head.l);

	if( level <= 1 )
		leafp = lname;
	else
		leafp = nm;

	scale = 100;
	for( i=1; i<level; i++ )
		scale *= 2;

	snprintf(nm, 64, "%sL", name);
	wp = mk_addmember( leafp, &head.l, NULL, WMOP_UNION );
	MAT_IDN( wp->wm_mat );

	snprintf(nm, 64, "%sR", name);
	wp = mk_addmember( leafp, &head.l, NULL, WMOP_UNION );
	MAT_DELTAS( wp->wm_mat, 1*scale, 0, 0 );

	snprintf(nm, 64, "%sB", name);
	wp = mk_addmember( leafp, &head.l, NULL, WMOP_UNION );
	MAT_DELTAS( wp->wm_mat, 0.5*scale, sin60*scale, 0 );

	snprintf(nm, 64, "%sT", name);
	wp = mk_addmember( leafp, &head.l, NULL, WMOP_UNION );
	MAT_DELTAS( wp->wm_mat, 0.5*scale, sin60/3*scale, sin60*scale );

	/* Set region flag on lowest level */
	mk_lcomb( outfp, name, &head, level<=1, NULL, NULL, NULL, 0 );

	/* Loop for children if level > 1 */
	if( level <= 1 )
		return;
	for( i=0; i<4; i++ )  {
		snprintf(nm, 64, "%s%c", name, "LRBTx"[i] );
		do_tree( nm, lname, level-1 );
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.9
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/pyramid.c,v 14.8 2007/01/23 01:13:44 brlcad Exp $ (BRL)";
d193 1
a193 1
	sprintf(nm, "%sL", name);
d197 1
a197 1
	sprintf(nm, "%sR", name);
d201 1
a201 1
	sprintf(nm, "%sB", name);
d205 1
a205 1
	sprintf(nm, "%sT", name);
d216 1
a216 1
		sprintf(nm, "%s%c", name, "LRBTx"[i] );
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a27 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/pyramid.c,v 14.7 2007/01/20 14:36:59 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/pyramid.c,v 14.6 2006/02/27 10:08:41 brlcad Exp $ (BRL)";
@


14.6
log
@stdlib.h and exit()
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/pyramid.c,v 14.5 2006/01/18 06:46:23 brlcad Exp $ (BRL)";
@


14.5
log
@update copyright to 2006
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/pyramid.c,v 14.4 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
d40 1
a40 2


d43 1
d51 1
d65 1
a65 1
		exit(1);
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/pyramid.c,v 14.3 2005/01/30 20:31:09 brlcad Exp $ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d28 1
a28 1
 *  
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/pyramid.c,v 14.2 2004/12/21 03:46:08 butler Exp $ (BRL)";
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/pyramid.c,v 14.1 2004/11/16 19:42:30 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			P Y R A M I D . C
a32 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/pyramid.c,v 1.2 2004/08/02 23:01:52 morrison Exp $ (BRL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/pyramid.c,v 1.1 2004/05/20 15:20:40 morrison Exp $ (BRL)";
d209 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/proc-db/pyramid.c,v 11.15 2004/05/10 15:30:49 erikg Exp $ (BRL)";
d23 1
a23 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

