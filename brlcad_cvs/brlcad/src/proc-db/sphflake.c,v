head	14.13;
access;
symbols
	rel-7-10-4:14.10
	STABLE:14.10.0.2
	stable-branch:14.3
	rel-7-10-2:14.10
	rel-7-10-0:14.10
	rel-7-8-4:14.5
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.13
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.21.20.49.10;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.11.21.19.28.07;	author erikgreenwald;	state Exp;
branches;
next	14.10;

14.10
date	2007.02.20.08.19.50;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.02.02.08.48.30;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.27.01.41.45;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.46.08;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.41;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                      S P H F L A K E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file sphflake.c
  TITLE: sphflake1.c

  AUTHOR: Jason Owens

  DESCRIPTION: Program to create a sphere-flake utilizing libwdb

  */

#include "common.h"


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "wdb.h"

#define D2R(x) (((x)/180)*3.14159265358979)
#define MATXPNT(d, m, v) { \
  register double _i = 1.0/((m)[12]*(v)[0] + (m)[13]*(v)[1] + (m)[14]*(v)[2] + (m)[15]*1); \
	      (d)[0] = ((m)[0]*(v)[0] + (m)[1]*(v)[1] + (m)[2]*(v)[2] + (m)[3])*_i; \
	      (d)[1] = ((m)[4]*(v)[0] + (m)[5]*(v)[1] + (m)[6]*(v)[2] + (m)[7])*_i; \
	      (d)[2] = ((m)[8]*(v)[0] + (m)[9]*(v)[1] + (m)[10]*(v)[2] + (m)[11])*_i; \
}


#define DEFAULT_FILENAME "sflake.g"
#define DEFAULT_MAXRADIUS 1000
#define DEFAULT_MAXDEPTH 3
#define DEFAULT_DELTARADIUS .3
#define DEFAULT_ORIGIN_X 0
#define DEFAULT_ORIGIN_Y 0
#define DEFAULT_ORIGIN_Z 0

#define DEFAULT_MAT "mirror"
#define DEFAULT_MATPARAM "sh=50 sp=.7 di=.3 re=.5"
#define DEFAULT_MATCOLOR "80 255 255"
#define DEFAULT_SCALE 10.3
#define ADDITIONAL_OBJECTS 5
#define SCENE_ID 0
#define LIGHT0_ID 1
#define LIGHT0_MAT "light"
#define LIGHT0_MATPARAM "inten=10000 shadows=1"
#define LIGHT0_MATCOLOR "255 255 255"
#define LIGHT1_ID 2
#define LIGHT1_MAT "light"
#define LIGHT1_MATPARAM "inten=5000 shadows=1 fract=.5"
#define LIGHT1_MATCOLOR "255 255 255"
#define PLANE_ID 3
#define PLANE_MAT "stack"
#define PLANE_MATPARAM "checker; plastic sh=20 sp=.1 di=.9"
#define PLANE_MATCOLOR "255 255 255"
#define ENVIRON_ID 4
#define ENVIRON_MAT "envmap"
#define ENVIRON_MATPARAM "cloud"

#define MAX_INPUT_LENGTH 48

struct depthMat {
  char name[MAX_INPUT_LENGTH];
  char params[MAX_INPUT_LENGTH];
  unsigned char color[3];
};
typedef struct depthMat depthMat_t;

struct params {
  char fileName[MAX_INPUT_LENGTH];
  int  maxRadius;
  int  maxDepth;
  double deltaRadius;
  point_t pos;
  depthMat_t *matArray;
};
typedef struct params params_t;

int count = 0; /* global sphere count */
struct rt_wdb *fp;
mat_t IDENT;

/* make the wmember structs, in order to produce individual
   combinations so we can have separate materials among differing
   depths */
struct wmember *wmemberArray;

/* the vector directions, in which the flakes will be drawn */
/* theta,phi */
int dir[9][2] = {  {0,-90},
		   {60,-90},
		   {120,-90},
		   {180,-90},
		   {240,-90},
		   {300,-90},
		   {120,-30},
		   {240,-30},
		   {360,-30} };

/****** Function Prototypes ******/
BU_EXTERN(void initializeInfo, (params_t *p, int inter, char *name, int depth));
BU_EXTERN(void createSphereflake, (params_t *p));
BU_EXTERN(void createLights, (params_t *p));
BU_EXTERN(void createPlane, (params_t *p));
BU_EXTERN(void createScene, (params_t *p));
BU_EXTERN(void createEnvironMap, (params_t *p));
BU_EXTERN(void getYRotMat, (mat_t *mat, fastf_t theta));
BU_EXTERN(void getZRotMat, (mat_t *mat, fastf_t phi));
BU_EXTERN(void getTrans, (mat_t *trans, int i, int j, fastf_t v));
BU_EXTERN(void makeFlake, (int depth, mat_t *trans, point_t center, fastf_t radius, double delta, int maxDepth));
BU_EXTERN(void usage, (char *n));


int main(int argc, char **argv)
{
  int i;
  int optc;

  params_t params;

  int inter = 0;
  char fileName[MAX_INPUT_LENGTH];
  int depth;

  memset(fileName, 0, MAX_INPUT_LENGTH);
  depth = DEFAULT_MAXDEPTH;
  strncpy(fileName, DEFAULT_FILENAME, MAX_INPUT_LENGTH);

  bu_opterr = 0;

  while ( (optc = bu_getopt( argc, argv, "hHiIDd:f:F:" )) != -1 ) {
    switch (optc) {
    case 'I' :
    case 'i' : /* interactive mode */
      inter = 1;
      break;
    case 'D':  /* Use ALL default parameters */
      memset(fileName, 0, MAX_INPUT_LENGTH);
      strncpy(fileName, DEFAULT_FILENAME, MAX_INPUT_LENGTH);
      depth = DEFAULT_MAXDEPTH;
      break;
    case 'd':  /* Use a user-defined depth */
      depth = atoi(bu_optarg);
      if (depth > 5) {
	printf("\nWARNING: Depths greater than 5 produce extremely large numbers of objects.\n");
      }
      break;
    case 'F':
    case 'f':  /* Use a user-defined filename */
      memset(fileName, 0, MAX_INPUT_LENGTH);
      strncpy(fileName, bu_optarg, MAX_INPUT_LENGTH);
      break;
    case 'h':
    case 'H':
    case '?':
      usage(argv[0]);
      bu_exit(0, NULL);
    default:
      break;
    }
  }
  if (bu_optind <= 1) {
    printf("Using all default parameters. Try %s -h for assistance\n", argv[0]);
    inter = 0;
  }

  initializeInfo(&params, inter, fileName, depth);

  /* now open a file for outputting the database */
  fp = wdb_fopen(params.fileName);

  /* create the initial id */
  i = mk_id_units(fp, "SphereFlake", "mm");

  /* initialize the wmember structs...
     this is for creating the regions */
  wmemberArray = (struct wmember *)malloc(sizeof(struct wmember)
					  *(params.maxDepth+1+ADDITIONAL_OBJECTS));
  for (i = 0; i <= params.maxDepth+ADDITIONAL_OBJECTS; i++) {
    BU_LIST_INIT(&(wmemberArray[i].l));
  }

  /****** Create the SphereFlake ******/

  createSphereflake(&params);

  /*
     now that the entire sphereflake has been created, we can create the
     additional objects needed to complete the scene.
     */
  /****** Create the Lights ******/

  createLights(&params);

  /****** Create the Plane ******/

  createPlane(&params);

  /****** Create the Environment map ******/

  createEnvironMap(&params);

  /****** Create the entire Scene combination ******/

  createScene(&params);

  wdb_close(fp);

  return 0;
}

void usage(char *n)
{
  printf(
	 "\nUSAGE: %s -D -d# -i -f fileName\n\
	  D -- use default parameters\n\
	  d -- set the recursive depth of the procedure\n\
	  i -- use interactive mode\n\
	  f -- specify output file\n\n", n);
}

void initializeInfo(params_t *p, int inter, char *name, int depth)
{
  char input[MAX_INPUT_LENGTH];
  int i = 0;
  int len = 0;
  unsigned int c[3];

  if (name == NULL) {
    strncpy(p->fileName, DEFAULT_FILENAME, MAX_INPUT_LENGTH);
  }
  else {
    strncpy(p->fileName, name, MAX_INPUT_LENGTH);
  }
  p->maxRadius = DEFAULT_MAXRADIUS;
  p->maxDepth =  (depth > 0) ? (depth) : (DEFAULT_MAXDEPTH);
  p->deltaRadius = DEFAULT_DELTARADIUS;
  p->pos[X] = DEFAULT_ORIGIN_X;
  p->pos[Y] = DEFAULT_ORIGIN_Y;
  p->pos[Z] = DEFAULT_ORIGIN_Z;

  p->matArray = (depthMat_t *)malloc(sizeof(depthMat_t) * (p->maxDepth+1));

  for (i = 0; i <= p->maxDepth; i++) {
    strncpy(p->matArray[i].name, DEFAULT_MAT, MAX_INPUT_LENGTH);
    strncpy(p->matArray[i].params, DEFAULT_MATPARAM, MAX_INPUT_LENGTH);
    sscanf(DEFAULT_MATCOLOR, "%u %u %u", &(c[0]), &(c[1]), &(c[2]));
    p->matArray[i].color[0] = c[0];
    p->matArray[i].color[1] = c[1];
    p->matArray[i].color[2] = c[2];
  }

  if (inter) {
    /* prompt the user for some data */
    /* no error checking here.... */
    printf("\nPlease enter a filename for sphereflake output: [%s] ", p->fileName);
    if (! bu_fgets(input, MAX_INPUT_LENGTH, stdin) ) {
      fprintf(stderr, "sphereflake: initializeInfo: fgets filename read error.\n");
      fprintf(stderr, "Continuing with default value.\n");
    }
    else {
      len = strlen(input);
      if ((len > 0) && (input[len-1] == '\n')) input[len-1] = 0;
      if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) {
	  sscanf(input, "%48s", p->fileName); /* MAX_INPUT_LENGTH */
      }
    }
    fflush(stdin);

    printf("Initial position X Y Z: [%.2f %.2f %.2f] ", p->pos[X], p->pos[Y], p->pos[Z]);
    if (! bu_fgets(input, MAX_INPUT_LENGTH, stdin) ) {
      fprintf(stderr, "sphereflake: initializeInfo: fgets position read error.\n");
      fprintf(stderr, "Continuing with default values.\n");
    }
    else {
      len = strlen(input);
      if ((len > 0) && (input[len-1] == '\n')) input[len-1] = 0;
      if (strncmp(input, "", MAX_INPUT_LENGTH) == 0) {
	sscanf(input, "%lg %lg %lg", &(p->pos[X]), &(p->pos[Y]), &(p->pos[Z]));
      }
    }
    fflush(stdin);

    printf("maxRadius: [%d] ", p->maxRadius);
    if (! bu_fgets(input, MAX_INPUT_LENGTH, stdin) ) {
      fprintf(stderr, "sphereflake: initializeInfo: fgets maxradius read error.\n");
      fprintf(stderr, "Continuing with default value.\n");
    }
    else {
      len = strlen(input);
      if ((len > 0) && (input[len-1] == '\n')) input[len-1] = 0;
      if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) {
	sscanf(input, "%d", &(p->maxRadius));
      }
    }
    fflush(stdin);

    printf("deltaRadius: [%.2f] ", p->deltaRadius);
    if (! bu_fgets(input, MAX_INPUT_LENGTH, stdin) ) {
      fprintf(stderr, "sphereflake: initializeInfo: fgets deltaradius read error.\n");
      fprintf(stderr, "Continuing with default value.\n");
    }
    else {
      len = strlen(input);
      if ((len > 0) && (input[len-1] == '\n')) input[len-1] = 0;
      if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) {
	sscanf(input, "%lg", &(p->deltaRadius));
      }
    }
    fflush(stdin);

    printf("maxDepth: [%d] ", p->maxDepth);
    if (! bu_fgets(input, MAX_INPUT_LENGTH, stdin) ) {
      fprintf(stderr, "sphereflake: initializeInfo: fgets maxdepth read error.\n");
      fprintf(stderr, "Continuing with default value.\n");
    }
    else {
      len = strlen(input);
      if ((len > 0) && (input[len-1] == '\n')) input[len-1] = 0;
      if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) {
	sscanf(input, "%d", &(p->maxDepth));
      }
    }
    fflush(stdin);


    for (i = 0; i <= p->maxDepth; i++) {
      printf("Material for depth %d: [%s] ", i, p->matArray[i].name);
      if ( ! bu_fgets(input, MAX_INPUT_LENGTH, stdin) ) {
	fprintf(stderr, "sphereflake: initializeInfo: fgets material read error.\n");
	fprintf(stderr, "Continuing with default value.\n");
      }
      else {
	len = strlen(input);
	if ((len > 0) && (input[len-1] == '\n')) input[len-1] = 0;
	if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) {
	    sscanf(input, "%48s", p->matArray[i].name); /* MAX_INPUT_LENGTH */
	}
      }
      fflush(stdin);

      printf("Mat. params for depth %d: [%s] ", i, p->matArray[i].params);
      if ( ! bu_fgets(input, MAX_INPUT_LENGTH, stdin) ) {
	fprintf(stderr, "sphereflake: initializeInfo: fgets params read error.\n");
	fprintf(stderr, "Continuing with default value.\n");
      }
      else {
	len = strlen(input);
	if ((len > 0) && (input[len-1] == '\n')) input[len-1] = 0;
	if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) {
	    sscanf(input, "%48s", p->matArray[i].params); /* MAX_INPUT_LENGTH */
	}
      }
      fflush(stdin);

      printf("Mat. color for depth %d: [%d %d %d] ", i, p->matArray[i].color[0], p->matArray[i].color[1], p->matArray[i].color[2]);
      if (! bu_fgets(input, MAX_INPUT_LENGTH, stdin) ) {
	fprintf(stderr, "sphereflake: initializeInfo: fgets color read error.\n");
	fprintf(stderr, "Continuing with default values.\n");
      }
      else {
	len = strlen(input);
	if ((len > 0) && (input[len-1] == '\n')) input[len-1] = 0;
	if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) {
	  sscanf(input, "%d %d %d", (int *)&(c[0]), (int *)&(c[1]), (int *)&(c[2]));
	  p->matArray[i].color[0] = c[0];
	  p->matArray[i].color[1] = c[1];
	  p->matArray[i].color[2] = c[2];
	}
      }
      fflush(stdin);
    }
  }
  MAT_IDN(IDENT);
}

void createSphereflake(params_t *p)
{
  mat_t trans;
  char name[MAX_INPUT_LENGTH];
  int i = 0;

  /* now begin the creation of the sphereflake... */
  MAT_IDN(trans); /* get the identity matrix */
  makeFlake(0, &trans, p->pos, (fastf_t)p->maxRadius * DEFAULT_SCALE, p->deltaRadius, p->maxDepth);
  /*
     Now create the depth combinations/regions
     This is done to facilitate application of different
     materials to the different depths */

  for (i = 0; i <= p->maxDepth; i++) {
    memset(name, 0, MAX_INPUT_LENGTH);
    sprintf(name, "depth%d.r", i);
    mk_lcomb(fp, name, &(wmemberArray[i+ADDITIONAL_OBJECTS]), 1, p->matArray[i].name, p->matArray[i].params, p->matArray[i].color, 0);
  }
  printf("\nSphereFlake created");

}

void createLights(params_t *p)
{
  char name[MAX_INPUT_LENGTH];
  point_t lPos;
  int r, g, b;
  unsigned char c[3];


  /* first create the light spheres */
  VSET(lPos, p->pos[X]+(5 * p->maxRadius), p->pos[Y]+(-5 * p->maxRadius), p->pos[Z]+(150 * p->maxRadius));
  memset(name, 0, MAX_INPUT_LENGTH);
  sprintf(name, "light0");
  mk_sph(fp, name, lPos, p->maxRadius*5);

  /* now make the light region... */
  mk_addmember(name, &(wmemberArray[LIGHT0_ID].l), NULL, WMOP_UNION);
  strcat(name, ".r");
  sscanf(LIGHT0_MATCOLOR, "%d %d %d", &r, &g, &b);
  c[0] = (char)r;
  c[1] = (char)g;
  c[2] = (char)b;
  mk_lcomb(fp, name, &(wmemberArray[LIGHT0_ID]), 1, LIGHT0_MAT, LIGHT0_MATPARAM,
	   (const unsigned char *) c, 0);

  VSET(lPos, p->pos[X]+(13 * p->maxRadius), p->pos[Y]+(-13 * p->maxRadius), p->pos[Z]+(152 * p->maxRadius));
  sprintf(name, "light1");
  mk_sph(fp, name, lPos, p->maxRadius*5);

  /* now make the light region... */
  mk_addmember(name, &(wmemberArray[LIGHT1_ID].l), NULL, WMOP_UNION);
  strcat(name, ".r");
  sscanf(LIGHT1_MATCOLOR, "%d %d %d", &r, &g, &b);
  c[0] = (char)r;
  c[1] = (char)g;
  c[2] = (char)b;
  mk_lcomb(fp, name, &(wmemberArray[LIGHT1_ID]), 1, LIGHT1_MAT, LIGHT1_MATPARAM,
	   (const unsigned char *) c, 0);

  printf("\nLights created");
}

void createPlane(params_t *p)
{
  char name[MAX_INPUT_LENGTH];
  point_t lPos;

  VSET(lPos, 0, 0, 1); /* set the normal */
  memset(name, 0, MAX_INPUT_LENGTH);
  sprintf(name, "plane");
  mk_half(fp, name, lPos, -p->maxRadius * 2 * DEFAULT_SCALE);

  /* now make the plane region... */
  mk_addmember(name, &(wmemberArray[PLANE_ID].l), NULL, WMOP_UNION);
  strcat(name, ".r");
  mk_lcomb(fp, name, &(wmemberArray[PLANE_ID]), 1, PLANE_MAT, PLANE_MATPARAM, (unsigned char *)PLANE_MATCOLOR, 0);

  printf("\nPlane created");
}

void createEnvironMap(params_t *p)
{
  char name[MAX_INPUT_LENGTH];

  memset(name, 0, MAX_INPUT_LENGTH);
  sprintf(name, "light0");
  mk_addmember(name, &(wmemberArray[ENVIRON_ID].l), NULL, WMOP_UNION);
  memset(name, 0, MAX_INPUT_LENGTH);
  sprintf(name, "environ.r");
  mk_lcomb(fp, name, &(wmemberArray[ENVIRON_ID]), 1, ENVIRON_MAT, ENVIRON_MATPARAM, (unsigned char *)"0 0 0", 0);

  printf("\nEnvironment map created");

}

void createScene(params_t *p)
{
  int i;
  char name[MAX_INPUT_LENGTH];

  for (i = 0; i < p->maxDepth+1; i++) {
    memset(name, 0, MAX_INPUT_LENGTH);
    sprintf(name, "depth%d.r", i);
    mk_addmember(name, &(wmemberArray[SCENE_ID].l), NULL, WMOP_UNION);
  }
  mk_addmember("light0.r", &(wmemberArray[SCENE_ID].l), NULL, WMOP_UNION);
  mk_addmember("light1.r", &(wmemberArray[SCENE_ID].l), NULL, WMOP_UNION);
  mk_addmember("plane.r", &(wmemberArray[SCENE_ID].l), NULL, WMOP_UNION);
  mk_addmember("environ.r", &(wmemberArray[SCENE_ID].l), NULL, WMOP_UNION);
  memset(name, 0, MAX_INPUT_LENGTH);
  sprintf(name, "scene.r");
  mk_lfcomb(fp, name, &(wmemberArray[SCENE_ID]), 0);

  printf("\nScene created (FILE: %s)\n", p->fileName);
}

void printMatrix(char *n, fastf_t *m)
{
  int i = 0;
  printf("\n-----%s------\n", n);
  for (i = 0; i < 16; i++) {
    if (i%4 == 0 && i != 0) printf("\n");
    printf("%6.2f ", m[i]);
  }
  printf("\n-----------\n");
}

void getTrans(mat_t (*t), int theta, int phi, fastf_t radius)
{
  mat_t z;
  mat_t y;
  mat_t toRelative;
  mat_t newPos;
  MAT_IDN(z);
  MAT_IDN(y);
  MAT_IDN(newPos);
  MAT_IDN(toRelative);

  MAT_DELTAS(toRelative, 0, 0, radius);

  getZRotMat(&z, theta);
  getYRotMat(&y, phi);

  bn_mat_mul2(toRelative, newPos); /* translate to new position */
  bn_mat_mul2(y, newPos);          /* rotate z */
  bn_mat_mul2(z, newPos);          /* rotate y */
  MAT_DELTAS(*t, 0,0,0);
  bn_mat_mul2(*t, newPos);

  memcpy(*t, newPos, sizeof(newPos));
}

void getYRotMat(mat_t (*t), fastf_t theta)
{
  fastf_t sin_ = sin(D2R(theta));
  fastf_t cos_ = cos(D2R(theta));
  mat_t r;
  MAT_ZERO(r);
  r[0] = cos_;
  r[2] = sin_;
  r[5] = 1;
  r[8] = -sin_;
  r[10] = cos_;
  r[15] = 1;
  memcpy(*t, r, sizeof(*t));
}

void getZRotMat(mat_t (*t), fastf_t phi)
{
  fastf_t sin_ = sin(D2R(phi));
  fastf_t cos_ = cos(D2R(phi));
  mat_t r;
  MAT_ZERO(r);
  r[0] = cos_;
  r[1] = -sin_;
  r[4] = sin_;
  r[5] = cos_;
  r[10] = 1;
  r[15] = 1;
  memcpy(*t, r, sizeof(*t));
}

/*
void makeFlake(int depth, mat_t *trans, point_t center, fastf_t radius, float delta, int maxDepth)
*/


void makeFlake(int depth, mat_t (*trans), fastf_t *center, fastf_t radius, double delta, int maxDepth)
{
  char name[MAX_INPUT_LENGTH];
  int i = 0;
  point_t pcent;
  fastf_t newRadius;
  mat_t temp;
  point_t origin;
  point_t pcentTemp;

  VSET(origin, 0, 0, 0);

  /* just return if depth == maxDepth */
  if (depth > maxDepth) return;


  /* create self, then recurse for each different angle */
  count++;
  sprintf(name, "sph%d", count);
  mk_sph(fp, name, center, radius);
  newRadius = radius*delta;

  /* add the sphere to the correct combination */
  mk_addmember(name, &(wmemberArray[depth+ADDITIONAL_OBJECTS].l), NULL, WMOP_UNION);

  for (i = 0; i < 9; i++) {
    memcpy(temp, trans, sizeof(temp));
    getTrans(&temp, dir[i][0], dir[i][1], radius+newRadius);
    MATXPNT(pcentTemp, temp, origin);
    VADD2(pcent, pcentTemp, center);
    makeFlake(depth+1, &temp, pcent, newRadius, delta, maxDepth);
  }
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@pass bu_exit a NULL instead of an empty string
@
text
@d287 1
a287 1
	sscanf(input, "%s", p->fileName);
d359 1
a359 1
	  sscanf(input, "%s", p->matArray[i].name);
d373 1
a373 1
	  sscanf(input, "%s", p->matArray[i].params);
@


14.11
log
@exit->bu_exit where applicable
@
text
@d179 1
a179 1
      bu_exit(0, "");
@


14.10
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d179 1
a179 1
      exit(0);
@


14.9
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d279 1
a279 1
    if (! fgets(input, MAX_INPUT_LENGTH, stdin) ) {
d293 1
a293 1
    if (! fgets(input, MAX_INPUT_LENGTH, stdin) ) {
d307 1
a307 1
    if (! fgets(input, MAX_INPUT_LENGTH, stdin) ) {
d321 1
a321 1
    if (! fgets(input, MAX_INPUT_LENGTH, stdin) ) {
d335 1
a335 1
    if (! fgets(input, MAX_INPUT_LENGTH, stdin) ) {
d351 1
a351 1
      if ( ! fgets(input, MAX_INPUT_LENGTH, stdin) ) {
d365 1
a365 1
      if ( ! fgets(input, MAX_INPUT_LENGTH, stdin) ) {
d379 1
a379 1
      if (! fgets(input, MAX_INPUT_LENGTH, stdin) ) {
@


14.8
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a83 3
extern char *optarg;
extern int optind, opterr, getopt(int, char *const *, const char *);

d151 1
a151 1
  opterr = 0;
d153 1
a153 1
  while ( (optc = getopt( argc, argv, "hHiIDd:f:F:" )) != -1 ) {
d165 1
a165 1
      depth = atoi(optarg);
d173 1
a173 1
      strncpy(fileName, optarg, MAX_INPUT_LENGTH);
d184 1
a184 1
  if (optind <= 1) {
@


14.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d47 2
a48 2
              (d)[1] = ((m)[4]*(v)[0] + (m)[5]*(v)[1] + (m)[6]*(v)[2] + (m)[7])*_i; \
              (d)[2] = ((m)[8]*(v)[0] + (m)[9]*(v)[1] + (m)[10]*(v)[2] + (m)[11])*_i; \
d241 4
a244 4
          D -- use default parameters\n\
          d -- set the recursive depth of the procedure\n\
          i -- use interactive mode\n\
          f -- specify output file\n\n", n);
@


14.6
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.5
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d22 2
a23 2
  TITLE: sphflake1.c 
  
d25 1
a25 1
  
d27 1
a27 1
  
d42 1
a42 1
#include "wdb.h" 
d74 1
a74 1
#define LIGHT1_MATCOLOR "255 255 255" 
d88 1
a88 1
struct depthMat { 
d109 1
a109 1
/* make the wmember structs, in order to produce individual     
d135 1
a135 1
BU_EXTERN(void getTrans, (mat_t *trans, int i, int j, fastf_t v)); 
d192 1
a192 1
  
d194 1
a194 1
  
d197 1
a197 1
  
d200 2
a201 2
  
  /* initialize the wmember structs... 
d208 1
a208 1
  
d210 1
a210 1
  
d212 3
a214 3
  
  /* 
     now that the entire sphereflake has been created, we can create the 
d218 1
a218 1
  
d220 1
a220 1
  
d222 1
a222 1
  
d224 1
a224 1
  
d226 1
a226 1
  
d228 1
a228 1
  
d230 1
a230 1
  
d232 1
a232 1
  
d234 1
a234 1
  
d290 1
a290 1
      if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) { 
d295 1
a295 1
    
d309 1
a309 1
    
d342 1
a342 1
    } 
d352 1
a352 1
    
d408 1
a408 1
  
d412 1
a412 1
  /* 
d423 1
a423 1
  
d432 2
a433 2
  
  
d439 1
a439 1
  
d449 1
a449 1
  
d453 1
a453 1
  
d463 1
a463 1
  
d471 1
a471 1
  
d476 1
a476 1
  
d481 1
a481 1
  
d488 1
a488 1
  
d495 1
a495 1
  
d497 1
a497 1
  
d504 1
a504 1
  
d517 1
a517 1
  
d542 1
a542 1
  
d544 1
a544 1
  
d547 1
a547 1
  
d553 1
a553 1
  
d601 1
a601 1
  
d603 1
a603 1
  
d606 2
a607 2
  
  
d613 1
a613 1
  
d616 1
a616 1
  
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d22 2
a23 2
  TITLE: sphflake1.c

d25 1
a25 1

d27 1
a27 1

d42 1
a42 1
#include "wdb.h"
d74 1
a74 1
#define LIGHT1_MATCOLOR "255 255 255"
d88 1
a88 1
struct depthMat {
d109 1
a109 1
/* make the wmember structs, in order to produce individual
d135 1
a135 1
BU_EXTERN(void getTrans, (mat_t *trans, int i, int j, fastf_t v));
d192 1
a192 1

d194 1
a194 1

d197 1
a197 1

d200 2
a201 2

  /* initialize the wmember structs...
d208 1
a208 1

d210 1
a210 1

d212 3
a214 3

  /*
     now that the entire sphereflake has been created, we can create the
d218 1
a218 1

d220 1
a220 1

d222 1
a222 1

d224 1
a224 1

d226 1
a226 1

d228 1
a228 1

d230 1
a230 1

d232 1
a232 1

d234 1
a234 1

d290 1
a290 1
      if (strncmp(input, "", MAX_INPUT_LENGTH) != 0) {
d295 1
a295 1

d309 1
a309 1

d342 1
a342 1
    }
d352 1
a352 1

d408 1
a408 1

d412 1
a412 1
  /*
d423 1
a423 1

d432 2
a433 2


d439 1
a439 1

d449 1
a449 1

d453 1
a453 1

d463 1
a463 1

d471 1
a471 1

d476 1
a476 1

d481 1
a481 1

d488 1
a488 1

d495 1
a495 1

d497 1
a497 1

d504 1
a504 1

d517 1
a517 1

d542 1
a542 1

d544 1
a544 1

d547 1
a547 1

d553 1
a553 1

d601 1
a601 1

d603 1
a603 1

d606 2
a607 2


d613 1
a613 1

d616 1
a616 1

@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d605 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d10 1
a10 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

