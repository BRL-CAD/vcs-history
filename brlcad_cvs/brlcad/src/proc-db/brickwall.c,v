head	14.13;
access;
symbols
	rel-7-10-4:14.10
	STABLE:14.10.0.2
	stable-branch:14.3
	rel-7-10-2:14.10
	rel-7-10-0:14.10
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.13
date	2007.11.21.20.49.10;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.21.19.28.07;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.09.15.16.23.19;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.02.02.08.48.30;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.27.01.41.45;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.28.00.36.29;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.08;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.46.08;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.25.15.07.12;	author erikg;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.32;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.39;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                     B R I C K W A L L . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file brickwall.c
 *
 *	builds a brick wall.
 *
 *	Options
 *	h	help
 */
#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"

/* declarations to support use of bu_getopt() */
char *options = "w:h:d:W:H:sn:t:Du:mc:C:";

char *progname = "(noname)";
double brick_width=8.0;
double brick_height=2.25;
double brick_depth=3.325;
double wall_width=0.0;
double wall_height=0.0;
char *brick_name="brick";
int standalone=0;
int make_mortar=0;	/* put mortar between bricks */
double tol=0.125;	/* minimum mortar thickness in in */
double tol2;		/* minimum brick dimension allowed */
int debug=0;
double units_conv=25.4;	/* default to inches */
char color[32] = "160 40 40";
char mortar_color[32] = "190 190 190";
/*
 *	U S A G E --- tell user how to invoke this program, then exit
 */
void usage(char *s)
{
	if (s) (void)fputs(s, stderr);

	(void) fprintf(stderr,
	"Usage: %s %s\n%s\n%s\n%s\n",
			progname,
	"  [ -u units ] [ -s(tandalone) ] [-t tolerance ]",
	"  [-m(ortar) ] [ -c R/G/B (brick) ] [ -C R/G/B (mortar)]",
	"  -w brick_width -h brick_height -d brick_depth -n brick_name",
	"  -W wall_width -H wall_height\n  > mged_commands \n");

	bu_exit(1, NULL);
}

/*
 *	P A R S E _ A R G S --- Parse through command line flags
 */
int parse_args(int ac, char **av)
{
	int  c;
	double d;
	int red, grn, blu;

	if (  ! (progname=strrchr(*av, '/'))  )
		progname = *av;
	else
		++progname;

	/* Turn off getopt's error messages */
	bu_opterr = 0;

	/* get all the option flags from the command line */
	while ((c=bu_getopt(ac,av,options)) != EOF)
		switch (c) {
		case 'c'	: if ((c=sscanf(bu_optarg, "%d/%d/%d",
				      &red, &grn, &blu)) == 3)
					(void)sprintf(color, "%d %d %d", red&0x0ff,
							grn&0x0ff, blu&0x0ff);
				break;
		case 'C'	: if ((c=sscanf(bu_optarg, "%d/%d/%d",
				     &red, &grn, &blu)) == 3)
					(void)sprintf(mortar_color, "%d %d %d",
					red&0x0ff, grn&0x0ff, blu&0x0ff);

				break;
		case 'm'	: make_mortar = !make_mortar;
				break;
		case 'u'	: units_conv = bu_units_conversion(bu_optarg);
				break;
		case 'D'	: debug = !debug;
				break;
		case 't'	: if ((d=atof(bu_optarg)) != 0.0) tol = d;
				break;
		case 'w'	: if ((d=atof(bu_optarg)) != 0.0) brick_width = d;
				break;
		case 'h'	: if ((d=atof(bu_optarg)) != 0.0) brick_height = d;
				break;
		case 'd'	: if ((d=atof(bu_optarg)) != 0.0) brick_depth = d;
				break;
		case 'W'	: if ((d=atof(bu_optarg)) != 0.0) wall_width = d;
				break;
		case 'H'	: if ((d=atof(bu_optarg)) != 0.0) wall_height = d;
				break;
		case 'n'	: brick_name = bu_optarg;
				break;
		case 's'	: standalone = !standalone;
				break;
		case '?'	:
		default		: usage("bad command line option"); break;
		}

	brick_width *= units_conv;
	brick_height *= units_conv;
	brick_depth *= units_conv;

	wall_width *= units_conv;
	wall_height *= units_conv;

	tol *= units_conv;
	tol2 = tol * 2;

	if (brick_width <= tol2)
		usage("brick width too small\n");

	if (brick_height <= tol2)
		usage("brick height too small\n");

	if (brick_depth <= tol2)
		usage("brick depth too small\n");

	if (wall_width < brick_width)
		usage("wall width < brick width\n");

	if (wall_height < brick_height)
		usage("wall height < brick height\n");

	if (brick_name == (char *)NULL || *brick_name == '\0')
		usage("bad or no brick name\n");

	return(bu_optind);
}

void gen_mortar(int horiz_bricks, int vert_bricks, double horiz_spacing, double vert_spacing)
{
	int row;
	int i;
	double xstart;
	double zstart;

	if (vert_spacing > tol)
		if (horiz_spacing > tol)
			(void)fprintf(stderr, "generating mortar\n");
		else
			(void)fprintf(stderr, "generating vertical mortar\n");
	else
		if (horiz_spacing > tol)
			(void)fprintf(stderr, "generating horizontal mortar\n");
		else {
			(void)fprintf(stderr, "bricks too close for mortar\n");
			return;
		}

	for (row=0 ; row < vert_bricks ; ++row) {

	    if (vert_spacing > tol) {
		if (row % 2) xstart = brick_depth;
		else xstart = 0.0;

		zstart = brick_height + (vert_spacing+brick_height) * row;

		/* generate a slab of mortar underneath the brick row */
		(void)fprintf(stdout,
			"in s.%s.rm.%d rpp %g %g  %g %g  %g %g\n",
			brick_name, row,
			xstart, xstart + (wall_width - brick_depth),
			0.0, brick_depth,
			zstart, zstart+vert_spacing);

		(void)fprintf(stdout,
			"r r.m.%s u s.%s.rm.%d\n",
			brick_name, brick_name, row);
	    }
	    if (horiz_spacing > tol) {
		/* generate mortar between bricks */

		for(i=0 ; i < horiz_bricks ; ++i) {
			if (row %2)
				xstart = brick_depth + (brick_width+horiz_spacing)*i;
			else
				xstart = brick_width + (brick_width+horiz_spacing)*i;

			zstart = (brick_height+vert_spacing) * row;

			(void)fprintf(stdout,
				"in s.%s.bm.%d.%d rpp %g %g  %g %g  %g %g\n",
				brick_name, row, i,
				xstart, xstart + horiz_spacing,
				0.0, brick_depth,
				zstart, zstart+brick_height);

			(void)fprintf(stdout,
				"r r.m.%s u s.%s.bm.%d.%d\n",
				brick_name, brick_name, row, i);

		}
	    }
	}

	(void)fprintf(stdout, "mater r.m.%s\nplastic\n%s\n%s\n\n",
		brick_name, "sh=40 di=0.9 sp=0.1", mortar_color);

	(void)fprintf(stdout, "g g.%s g.%s.wall r.m.%s\n",
		brick_name, brick_name, brick_name);

}

/*
 *	G E N _ B R I C K S
 *
 *	generate the brick solids, regions thereof, groups for rows
 *	and a group for the wall as a whole.
 */
void gen_bricks(int horiz_bricks, int vert_bricks, double horiz_spacing, double vert_spacing)
{
	int row;
	int brick;
	double offset;
	double xstart;
	double zstart;

	/* print the commands to make the wall */

	(void)fprintf(stdout, "\n\n");

	for (row=0 ; row < vert_bricks ; ++row) {

		if (row % 2) offset = brick_depth + horiz_spacing;
		else offset = 0.0;


		for (brick=0 ; brick < horiz_bricks ; ++ brick) {
			xstart = brick * brick_width +
				 brick * horiz_spacing + offset;
			zstart = row * brick_height + row * vert_spacing;

			(void)fprintf(stdout,
				"in s.%s.%d.%d rpp %g %g  %g %g  %g %g\n",
					brick_name, row, brick,
					xstart, xstart + brick_width,
					0.0, brick_depth,
					zstart, zstart + brick_height);

			(void)fprintf(stdout,
				"r r.%s.%d.%d u s.%s.%d.%d\n",
					brick_name, row, brick,
					brick_name, row, brick);

			(void)fprintf(stdout, "g g.%s.r.%d r.%s.%d.%d\n",
				brick_name, row, brick_name, row, brick);
		}

		(void)fprintf(stdout, "g g.%s.wall g.%s.r.%d\n",
				brick_name, brick_name, row);
	}

	(void)fprintf(stdout, "mater g.%s.wall\nplastic\n%s\n%s\n\n",
			brick_name, "sh=40 di=0.9 sp=0.1", color);
}
/*
 *	M A I N
 *
 *	Call parse_args to handle command line arguments first, then
 *	process input.
 */
int main(int ac, char **av)
{
	int horiz_bricks;
	int vert_bricks;
	double horiz_spacing;
	double vert_spacing;


	/* parse command flags, and make sure there are arguments
	 * left over for processing.
	 */
	if (parse_args(ac, av) < ac) usage("Excess command line arguments");


	/* build the wall

	if (debug)
	    (void)fprintf(stderr,
		"bw %g  bh %g  bd %g  ww %g  wh %g  bn\"%s\"\n",
		brick_width, brick_height, brick_depth,
		wall_width, wall_height, brick_name);
 */

	horiz_bricks = (int)(wall_width / brick_width);

	/* leave room for sideways brick at one end */
	while (horiz_bricks * brick_width + brick_depth > wall_width &&
	    horiz_bricks > 0)
		--horiz_bricks;

	if (horiz_bricks <= 0) {
		(void)fprintf(stderr, "wall not wide enough for brick\n");
		return(-1);
	}

	if (standalone) {
		horiz_spacing =
		    (wall_width - horiz_bricks * brick_width) /
					(horiz_bricks - 1);
	} else {
		horiz_spacing =
		    (wall_width - (horiz_bricks * brick_width + brick_depth))/
					horiz_bricks;
	}


	vert_bricks = (int)(wall_height / (brick_height+(horiz_spacing*0.5)));

	vert_spacing =
			(wall_height - vert_bricks * brick_height) /
				(vert_bricks - 1);


	(void)fprintf(stderr, "wall %d bricks wide,  %d bricks high\n",
		horiz_bricks, vert_bricks);
	(void)fprintf(stderr, "distance between adjacent bricks %g\n",
		horiz_spacing / units_conv);
	(void)fprintf(stderr, "distance between layers of bricks %g\n",
		vert_spacing / units_conv);


	(void)putc((int)'\n', stdout);
	gen_bricks(horiz_bricks, vert_bricks, horiz_spacing, vert_spacing);

	if (make_mortar && (vert_spacing > tol || horiz_spacing > tol))
		gen_mortar(horiz_bricks, vert_bricks, horiz_spacing, vert_spacing);

	return(0);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@exit->bu_exit where applicable
@
text
@d74 1
a74 1
	bu_exit(1, "");
@


14.11
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d74 1
a74 1
	exit(1);
@


14.10
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d31 1
a31 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d35 1
a35 1
# include <unistd.h>
@


14.9
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d45 1
a45 1
/* declarations to support use of getopt() system call */
d96 1
a96 1
	opterr = 0;
d99 1
a99 1
	while ((c=getopt(ac,av,options)) != EOF)
d101 1
a101 1
		case 'c'	: if ((c=sscanf(optarg, "%d/%d/%d",
d106 1
a106 1
		case 'C'	: if ((c=sscanf(optarg, "%d/%d/%d",
d114 1
a114 1
		case 'u'	: units_conv = bu_units_conversion(optarg);
d118 1
a118 1
		case 't'	: if ((d=atof(optarg)) != 0.0) tol = d;
d120 1
a120 1
		case 'w'	: if ((d=atof(optarg)) != 0.0) brick_width = d;
d122 1
a122 1
		case 'h'	: if ((d=atof(optarg)) != 0.0) brick_height = d;
d124 1
a124 1
		case 'd'	: if ((d=atof(optarg)) != 0.0) brick_depth = d;
d126 1
a126 1
		case 'W'	: if ((d=atof(optarg)) != 0.0) wall_width = d;
d128 1
a128 1
		case 'H'	: if ((d=atof(optarg)) != 0.0) wall_height = d;
d130 1
a130 1
		case 'n'	: brick_name = optarg;
d166 1
a166 1
	return(optind);
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d164 1
a164 1
	    	usage("bad or no brick name\n");
d205 3
a207 3
	    	(void)fprintf(stdout,
	    		"r r.m.%s u s.%s.rm.%d\n",
	    		brick_name, brick_name, row);
d227 3
a229 3
		    	(void)fprintf(stdout,
		    		"r r.m.%s u s.%s.bm.%d.%d\n",
		    		brick_name, brick_name, row, i);
@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.6
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.5
log
@update copyright to 2006
@
text
@d30 1
a30 2


d33 1
a33 1
#include <string.h>
d35 1
a35 1
#include <strings.h>
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d72 1
a72 1
	(void) fprintf(stderr, 
d74 1
a74 1
			progname, 
d96 1
a96 1
	
d112 1
a112 1
							
d120 1
a120 1
		case 't'	: if ((d=atof(optarg)) != 0.0) tol = d; 
d155 1
a155 1
	
d158 1
a158 1
		
d161 1
a161 1
	
d164 1
a164 1
	
d246 1
a246 1
 *	G E N _ B R I C K S 
d274 1
a274 1
			(void)fprintf(stdout, 
d280 2
a281 2
			
			(void)fprintf(stdout, 
d348 1
a348 1
	
d351 1
a351 1
	vert_spacing = 
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d72 1
a72 1
	(void) fprintf(stderr,
d74 1
a74 1
			progname,
d96 1
a96 1

d112 1
a112 1

d120 1
a120 1
		case 't'	: if ((d=atof(optarg)) != 0.0) tol = d;
d155 1
a155 1

d158 1
a158 1

d161 1
a161 1

d164 1
a164 1

d246 1
a246 1
 *	G E N _ B R I C K S
d274 1
a274 1
			(void)fprintf(stdout,
d280 2
a281 2

			(void)fprintf(stdout,
d348 1
a348 1

d351 1
a351 1
	vert_spacing =
@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 23
a23 1
/*	
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d350 10
@


1.4
log
@need unistd for getopt stuff
@
text
@d11 1
a11 1
#ifdef USE_STRING_H
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d18 4
@


1.2
log
@obliterate externs.h
@
text
@d6 1
a6 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a20 1
#include "externs.h"
@

