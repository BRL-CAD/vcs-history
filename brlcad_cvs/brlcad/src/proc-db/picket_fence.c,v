head	14.14;
access;
symbols
	rel-7-10-4:14.10
	STABLE:14.10.0.2
	stable-branch:14.3
	rel-7-10-2:14.10
	rel-7-10-0:14.10
	rel-7-8-4:14.8
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.2
	rel-7-6-0:14.4
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.14
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.11.21.20.49.10;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.21.19.28.07;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.09.15.16.23.19;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.07.31.15.18.33;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.28.00.36.29;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.08.21.14.07.45;	author brlcad;	state Exp;
branches
	14.4.2.1;
next	14.3;

14.3
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.46.08;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.15.07.16.14;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.24.17.35.56;	author morrison;	state Exp;
branches;
next	;

14.4.2.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                  P I C K E T _ F E N C E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file picket_fence.c
 *
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"


int main(int argc, char *argv[])
{
  struct rt_wdb *fp_db;
  long i, j, k, l;
  char name[256];
  char pname[256];
  char number[256];
  char w1name[256];
  char w2name[256];
  char firstname[256];
  char prefix[256];

  struct wmember wm;
  struct wmember wm2;
  struct wmember fwm;
  struct wmember swm;
  struct wmember *nwm;

  fastf_t first_mat[16];

  fastf_t s0[24] = {0, 0, 0,
		   0, 0, 0,
		   15, 0, 0,
		   15, 0, 0,
		   0, 0, 0,
		   0, 0, 0,
		   15, 0, 0,
		   15, 0, 0};
  point_t c0 = {15, 0, 0};
  point_t w0 = {0, 0, 0};
  point_t w1 = {25, 0, 0};
  fastf_t s1[24] = {-0.001, 0, 0,
		   -0.001, 0, 0,
		   -12.6, 0, 0,
		   -12.6, 0, 0,
		   -0.001, 0, 0,
		   -0.001, 0, 0,
		   -12.6, 0, 0,
		   -12.6, 0, 0};
  fastf_t xlen = .0001;
  fastf_t ylen = -26;
  fastf_t zlen;
  fastf_t xt, yt;
  fastf_t x_top_len = 20;
  vect_t w0x = {0, 1, 0},
	 w0z = {0, 0, -1},
	 w1x = {0, -1, 0},
	 w1z = {0, 0, -1},
	 c0a = {4, 0, 0},
	 c0b = {0, 0, 0},
	 c0c = {4, 0, 0},
	 c0d = {0, 0, 0},
	 c0h = {0, 0, 0};
  fastf_t x0, y0, z0, x1, y1, z1;
  fastf_t height;
  fastf_t width;
  fastf_t pwidth;
  fastf_t ps;
  long numposts;
  fastf_t zstep;
  unsigned char matcolor[3] = {0,0,0};

  int round = 0;

  if (argc < 10)
    {
      fprintf(stderr, "Usage: pf <filename> <prefix> <height in mm> <spacing> <x0> <y0> <z0> ... <xn> <yn> <zn> [-r]\n");
      bu_exit(1, NULL);
    }
  strncpy(prefix, argv[2], 256-1);
  ps = atof(argv[4]);

  fp_db = wdb_fopen(argv[1]);
  if (fp_db == NULL) {
    perror(argv[1]);
    bu_exit(2, NULL);
  }
  mk_id(fp_db, "Picket Fence");

  BU_LIST_INIT(&wm.l);
  BU_LIST_INIT(&wm2.l);
  BU_LIST_INIT(&fwm.l);
  BU_LIST_INIT(&swm.l);

  for (j = 0; j < ((argc - 4) / 3) - 1; j++)
    {
      if (!strcmp(argv[argc - 1], "-r"))
	round = 1;
      x0 = (fastf_t)atof(argv[5 + (3 * j)]);
      y0 = (fastf_t)atof(argv[6 + (3 * j)]);
      z0 = (fastf_t)atof(argv[7 + (3 * j)]);
      x1 = (fastf_t)atof(argv[8 + (3 * j)]);
      y1 = (fastf_t)atof(argv[9 + (3 * j)]);
      z1 = (fastf_t)atof(argv[10 + (3 * j)]);
      height = (fastf_t)atof(argv[3]);
      width = sqrt(((x1 - x0) * (x1 - x0)) + ((y1 - y0) * (y1 - y0)));;
      pwidth = ((fastf_t)width /
		(fastf_t)(((int)(width / (51+ps))) * (51+ps))) * (51+ps);
      numposts = (width / pwidth);
      zstep = (z1 - z0) / numposts;
      zlen = -.076001 * height;
      s0[4] = s0[7] = s0[16] = s0[19] = pwidth - ps;
      s0[14] = s0[17] = s0[20] = s0[23] = height;
      c0[1] = (pwidth - ps) / 2.0;
      w0[2] = w1[2] = .924 * height;
      w1[1] = pwidth - ps;
      s1[2] = s1[11] = z0 + (height / 3);
      s1[5] = s1[8] = z1 + (height / 3);
      s1[14] = s1[23] = z0 + ((height / 3) + 102);
      s1[17] = s1[20] = z1 + ((height / 3) + 102);
      s1[4] = s1[7] = s1[16] = s1[19] = width;
      c0b[1] = (pwidth - ps) / 2.0;
      c0d[1] = (pwidth - ps) / 2.0;
      c0h[2] = height;

      snprintf(w1name, 256, "%swedge1-%ld.s", prefix, j);
      mk_wedge(fp_db, w1name, w0, w0x, w0z, xlen, ylen, zlen, x_top_len);

      snprintf(w2name, 256, "%swedge2-%ld.s", prefix, j);
      mk_wedge(fp_db, w2name, w1, w1x, w1z, xlen, ylen, zlen, x_top_len);

      snprintf(name, 256, "%spost-%ld.s", prefix, j);
      mk_arb8(fp_db, name, s0);
      mk_addmember(name, &wm.l, NULL, WMOP_UNION);
      mk_addmember(w1name, &wm.l, NULL, WMOP_SUBTRACT);
      mk_addmember(w2name, &wm.l, NULL, WMOP_SUBTRACT);

      if (round)
	{
	  snprintf(name, 256, "%spost_c.s", prefix);
	  mk_tgc(fp_db, name, c0, c0h, c0a, c0b, c0c, c0d);
	  mk_addmember(name, &wm.l, NULL, WMOP_UNION);
	  mk_addmember(w1name, &wm.l, NULL, WMOP_SUBTRACT);
	  mk_addmember(w2name, &wm.l, NULL, WMOP_SUBTRACT);
	}
      snprintf(name, 256, "%sls%ld.s", prefix, j);
      mk_arb8(fp_db, name, s1);
      mk_addmember(name, &swm.l, NULL, WMOP_UNION);

      for (k = 0; k < 8; k++)
	s1[(3 * k) + 2] += (height / 3);

      snprintf(name, 256, "%shs%ld.s", prefix, j);
      mk_arb8(fp_db, name, s1);
      mk_addmember(name, &swm.l, NULL, WMOP_UNION);

      snprintf(pname, 256, "%sp-%ld.c", prefix, j);
      matcolor[0] = 50;
      matcolor[1] = 30;
      matcolor[2] = 10;
      mk_lcomb(fp_db, pname, &wm, 0, "plastic", "", matcolor, 0);

      for (i = 0; i < numposts; i++)
	{
	  snprintf(name, 256, "%sp%ld-%ld.r", prefix, j, i);
	  mk_addmember(pname, &wm2.l, NULL, WMOP_UNION);
	  matcolor[0] = 50;
	  matcolor[1] = 50;
	  matcolor[2] = 20;
	  mk_lcomb(fp_db, name, &wm2, 0, "plastic", "", matcolor, 0);
	  nwm = mk_addmember(name, &swm.l, NULL, WMOP_UNION);
	  for (k = 0; k < 16; k++)
	    nwm->wm_mat[k] = 0;
	  nwm->wm_mat[0] = 1;
	  nwm->wm_mat[5] = 1;
	  nwm->wm_mat[7] = i * pwidth;
	  nwm->wm_mat[10] = 1;
	  nwm->wm_mat[11] = i * zstep;
	  nwm->wm_mat[15] = 1;
	}

      snprintf(name, 256, "%ssec%ld.c", prefix, j);
      matcolor[0] = 50;
      matcolor[1] = 50;
      matcolor[2] = 20;
      mk_lcomb(fp_db, name, &swm, 0, "plastic", "", matcolor, 0);
      nwm = mk_addmember(name, &fwm.l, NULL, WMOP_SUBTRACT);
      xt = x1 - x0;
      yt = y1 - y0;
      xt /= sqrt((xt * xt) + (yt * yt));
      yt /= sqrt((xt * xt) + (yt * yt));
      nwm->wm_mat[0] = nwm->wm_mat[5] = cos(atan2(-xt, yt));
      nwm->wm_mat[1] = -sin(atan2(-xt, yt));
      nwm->wm_mat[3] = x0;
      nwm->wm_mat[4] = -(nwm->wm_mat[1]);
      nwm->wm_mat[5] = nwm->wm_mat[0];
      nwm->wm_mat[7] = y0;
      nwm->wm_mat[10] = 1;
      nwm->wm_mat[11] = z0;
      nwm->wm_mat[15] = 1;
      nwm = mk_addmember(name, &fwm.l, NULL, WMOP_UNION);
      xt = x1 - x0;
      yt = y1 - y0;
      xt /= sqrt((xt * xt) + (yt * yt));
      yt /= sqrt((xt * xt) + (yt * yt));
      nwm->wm_mat[0] = nwm->wm_mat[5] = cos(atan2(-xt, yt));
      nwm->wm_mat[1] = -sin(atan2(-xt, yt));
      nwm->wm_mat[3] = x0;
      nwm->wm_mat[4] = -(nwm->wm_mat[1]);
      nwm->wm_mat[5] = nwm->wm_mat[0];
      nwm->wm_mat[7] = y0;
      nwm->wm_mat[10] = 1;
      nwm->wm_mat[11] = z0;
      nwm->wm_mat[15] = 1;
      if (j == 0)
	{
	  strncpy(firstname, name, 256-1);
	  for (l = 0; l < 16; l++)
	    first_mat[l] = nwm->wm_mat[l];
	}
    }
  nwm = mk_addmember(firstname, &fwm.l, NULL, WMOP_SUBTRACT);
  for (l = 0; l < 16; l++)
    nwm->wm_mat[l] = first_mat[l];
  snprintf(name, 256, "%sfence.c", prefix);
  matcolor[0] = 50;
  matcolor[1] = 50;
  matcolor[2] = 20;
  mk_lcomb(fp_db, name, &fwm, 0, "plastic", "", matcolor, 0);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@pass bu_exit a NULL instead of an empty string
@
text
@d106 1
a106 1
  strcpy(prefix, argv[2]);
d152 1
a152 1
      sprintf(w1name, "%swedge1-%ld.s", prefix, j);
d155 1
a155 1
      sprintf(w2name, "%swedge2-%ld.s", prefix, j);
d158 1
a158 1
      sprintf(name, "%spost-%ld.s", prefix, j);
d166 1
a166 1
	  sprintf(name, "%spost_c.s", prefix);
d172 1
a172 1
      sprintf(name, "%sls%ld.s", prefix, j);
d179 1
a179 1
      sprintf(name, "%shs%ld.s", prefix, j);
d183 1
a183 1
      sprintf(pname, "%sp-%ld.c", prefix, j);
d191 1
a191 1
	  sprintf(name, "%sp%ld-%ld.r", prefix, j, i);
d208 1
a208 1
      sprintf(name, "%ssec%ld.c", prefix, j);
d243 1
a243 1
	  strcpy(firstname, name);
d251 1
a251 1
  sprintf(name, "%sfence.c", prefix);
@


14.12
log
@exit->bu_exit where applicable
@
text
@d104 1
a104 1
      bu_exit(1, "");
d112 1
a112 1
    bu_exit(2, "");
@


14.11
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d104 1
a104 1
      exit(1);
d112 1
a112 1
    exit(2);
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d29 1
a29 3
#ifdef HAVE_STRING_H
#  include <string.h>
#endif
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.8
log
@fixed incorrect parameter usage of mk_lcomb .. takes an array of three char values, not a string of colors
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.7
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d100 1
d187 4
a190 1
      mk_lcomb(fp_db, pname, &wm, 0, "plastic", "", "50 30 10", 0);
d196 4
a199 1
	  mk_lcomb(fp_db, name, &wm2, 0, "plastic", "", "50 50 20", 0);
d212 4
a215 1
      mk_lcomb(fp_db, name, &swm, 0, "plastic", "", "50 50 20", 0);
d255 4
a258 1
  mk_lcomb(fp_db, name, &fwm, 0, "plastic", "", "50 50 20", 0);
@


14.6
log
@update copyright to 2006
@
text
@d25 3
a28 1
#include <stdlib.h>
@


14.5
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.4
log
@quell warnings, add missing string.h
@
text
@d49 1
a49 1
  
d100 1
a100 1
  
d115 1
a115 1
  
d133 1
a133 1
      pwidth = ((fastf_t)width / 
d154 1
a154 1
      
d157 1
a157 1
      
d163 1
a163 1
      
d175 1
a175 1
      
d178 1
a178 1
      
d182 1
a182 1
      
d185 1
a185 1
      
d201 1
a201 1
      
@


14.4.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d49 1
a49 1

d100 1
a100 1

d115 1
a115 1

d133 1
a133 1
      pwidth = ((fastf_t)width /
d154 1
a154 1

d157 1
a157 1

d163 1
a163 1

d175 1
a175 1

d178 1
a178 1

d182 1
a182 1

d185 1
a185 1

d201 1
a201 1

@


14.3
log
@update copyright to 2005
@
text
@d28 4
@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 24
@


1.2
log
@fix slew of warnings regarding need for struct rt_wdb * instead of FILE * and using the list to the mk_*() instead of the whole struct
@
text
@d217 10
@


1.1
log
@renamed from pickett to picket.  although George Edward Pickett might have passed some picket fences during his failed charge at the Battle of Gettysburg, I doubt these fences are his.
@
text
@d12 1
a12 1
  FILE *f;
d81 6
a86 2
  f = fopen(argv[1], "w");
  mk_id(f, "Picket Fence");
d125 1
a125 1
      mk_wedge(f, w1name, w0, w0x, w0z, xlen, ylen, zlen, x_top_len);
d128 1
a128 1
      mk_wedge(f, w2name, w1, w1x, w1z, xlen, ylen, zlen, x_top_len);
d131 4
a134 4
      mk_arb8(f, name, s0);
      mk_addmember(name, &wm, NULL, WMOP_UNION);
      mk_addmember(w1name, &wm, NULL, WMOP_SUBTRACT);
      mk_addmember(w2name, &wm, NULL, WMOP_SUBTRACT);
d139 4
a142 4
	  mk_tgc(f, name, c0, c0h, c0a, c0b, c0c, c0d);
	  mk_addmember(name, &wm, NULL, WMOP_UNION);
	  mk_addmember(w1name, &wm, NULL, WMOP_SUBTRACT);
	  mk_addmember(w2name, &wm, NULL, WMOP_SUBTRACT);
d145 2
a146 2
      mk_arb8(f, name, s1);
      mk_addmember(name, &swm, NULL, WMOP_UNION);
d152 2
a153 2
      mk_arb8(f, name, s1);
      mk_addmember(name, &swm, NULL, WMOP_UNION);
d156 1
a156 1
      mk_lcomb(f, pname, &wm, 0, "plastic", "", "50 30 10", 0);
d161 3
a163 3
	  mk_addmember(pname, &wm2, NULL, WMOP_UNION);
	  mk_lcomb(f, name, &wm2, 0, "plastic", "", "50 50 20", 0);
	  nwm = mk_addmember(name, &swm, NULL, WMOP_UNION);
d175 2
a176 2
      mk_lcomb(f, name, &swm, 0, "plastic", "", "50 50 20", 0);
      nwm = mk_addmember(name, &fwm, NULL, WMOP_SUBTRACT);
d190 1
a190 1
      nwm = mk_addmember(name, &fwm, NULL, WMOP_UNION);
d211 1
a211 1
  nwm = mk_addmember(firstname, &fwm, NULL, WMOP_SUBTRACT);
d215 1
a215 1
  mk_lcomb(f, name, &fwm, 0, "plastic", "", "50 50 20", 0);
@

