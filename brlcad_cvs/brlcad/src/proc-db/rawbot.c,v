head	14.12;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.2
	stable-branch:14.3
	rel-7-10-2:14.9
	rel-7-10-0:14.9
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.12
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.11.21.20.49.10;	author erikgreenwald;	state Exp;
branches;
next	14.10;

14.10
date	2007.11.21.19.28.07;	author erikgreenwald;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.28.00.36.29;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.23.07.05.50;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.46.08;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.33;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.41;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.12
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                        R A W B O T . C
 * BRL-CAD
 *
 * Copyright (c) 1999-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file rawbot.c
 *
 *    Program to generate a BoT from raw triangle data in a file
 *
 *    File input is assumed to be interleaved XYZ vertex data
 *    where three vertices comprise a single unoriented triangle.
 *
 *    e.g. The following describes three triangles:
 *
 *      X1 Y1 Z1 X2 Y2 Z2 X3 Y3 Z3 X4 Y4 Z4 X5 Y5 Z5
 *      X6 Y6 Z6 X7 Y7 Z7 X8 Y8 Z8 X9 Y9 Z9
 *
 *    Shared edges or points are not accounted for, implying data
 *    duplication for triangulated surface data where shared
 *    vertices/edges are common.
 *
 *  Author -
 *	Christopher Sean Morrison
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.11 2007/11/21 20:49:10 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"
#include "rtgeom.h"

struct rt_wdb *outfp;

void usage(const char *progname)
{
	fprintf(stderr, "Usage: %s raw_vertex_file\n", progname);
	bu_exit(-1, NULL);
}

int main( int argc, char *argv[] )
{
	char inputString[512];
	float inputX, inputY, inputZ;
	fastf_t *vertices;
	int *faces;
	fastf_t *thickness;
	FILE *inputFile;
	short int triangleAvailable;
	long int triangleCount;
	long int maxTriangleCapacity;
	long int j;
	char *outputObjectName;

	if (argc != 2) {
		usage(argv[0]);
	}

	outfp = wdb_fopen( "rawbot.g" );
	if (outfp == NULL) {
		fprintf(stderr, "Unable to open the output file rawbot.g\n");
		return 1;
	}
	/* units would be nice... */
	mk_id( outfp, "RAW BOT" );

	inputFile = fopen(argv[1], "r");
	if (inputFile == NULL) {
		perror("unable to open file");
		fprintf(stderr, "The input file [%s] was not readable\n", argv[1]);
		return 1;
	}

	vertices = bu_calloc(128 * 3, sizeof(fastf_t), "vertices");
	maxTriangleCapacity = 128;

	triangleCount=0;
	triangleAvailable = 1;
	while ( triangleAvailable == 1 ) {
		/* read a set of input values -- input data should be a 3-tuple
		 * of floating points.
		 */
	  if (fscanf(inputFile, "%512s", inputString) != 1) {
			triangleAvailable = 0;
			continue;
		}
		inputX = atof(inputString);
		if (fscanf(inputFile, "%512s", inputString) != 1) {
			triangleAvailable = 0;
			continue;
		}
		inputY = atof(inputString);
		if (fscanf(inputFile, "%512s", inputString) != 1) {
			triangleAvailable = 0;
			continue;
		}
		inputZ = atof(inputString);

		if (triangleCount >= maxTriangleCapacity) {
			vertices = bu_realloc(vertices, ((maxTriangleCapacity + 128) * 3) * sizeof(fastf_t), "vertices");
			maxTriangleCapacity += 128;
		}

		/*		VSET( &vertices[triangleCount*3], inputX, inputY, inputZ ); */
		vertices[(triangleCount*3)] = inputX;
		vertices[(triangleCount*3)+1] = inputY;
		vertices[(triangleCount*3)+2] = inputZ;
		/*		printf("%f %f %f\n", vertices[(triangleCount*3)], vertices[(triangleCount*3)+1], vertices[(triangleCount*3)+2]); */
		triangleCount++;
	}

	/* done with the input file */
	fclose(inputFile);

	/* make sure we found some vertices */
	if (triangleCount <= 0) {
	  fprintf(stderr, "There were no triangles found in the input file\n");
		bu_free(vertices, "vertices");
	  return 0;
	} else {
		printf("Found %ld triangles\n", triangleCount);
	}

	/* allocate memory for faces and thickness arrays */
	/* XXX unfortunately we are limited to sizeof(int) since mk_bot takes
	 * an int array */
	faces = (int *)bu_calloc(triangleCount * 3, sizeof(int), "faces");
	thickness = (fastf_t *)bu_calloc(triangleCount * 3, sizeof(int), "thickness");
	for (j=0; j<triangleCount; j++) {
		faces[(j*3)] = (j*3);
		faces[(j*3)+1] = (j*3) + 1;
		faces[(j*3)+2] = (j*3) + 2;
		printf("%ld %ld %ld == (%f %f %f)\n", (j*3), (j*3)+1, (j*3)+2, vertices[(j*3)], vertices[(j*3)+1], vertices[(j*3)+2]);
		thickness[(j*3)] = thickness[(j*3)+1] = thickness[(j*3)+2] = 1.0;
	}

	/*
	for (j=0; j < triangleCount * 3; j++) {
		printf("%f\n", vertices[j]);
	}
	*/

	outputObjectName = (char *)bu_calloc(512, sizeof(char), "outputObjectName");

	snprintf(outputObjectName, 512, "%s.surface.s", argv[1]);
	mk_bot( outfp, outputObjectName, RT_BOT_SURFACE, RT_BOT_UNORIENTED, 0, triangleCount*3, triangleCount, vertices,  faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );

	snprintf(outputObjectName, 512, "%s.solid.s", argv[1]);
	mk_bot( outfp, outputObjectName, RT_BOT_SOLID, RT_BOT_UNORIENTED, 0, triangleCount*3, triangleCount, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );

	/*	snprintf(outputObjectName, 512, "%s.plate.s", argv[1]);*/
	/*	mk_bot( outfp, "bot_u_plate", RT_BOT_PLATE, RT_BOT_UNORIENTED, 0, triangleCount, triangleCount, vertices, faces, thickness, NULL ); */

	bu_free(vertices, "vertices");
	bu_free(faces, "faces");
	bu_free(thickness, "thickness");

	wdb_close(outfp);

	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.11
log
@pass bu_exit a NULL instead of an empty string
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.10 2007/11/21 19:28:07 erikgreenwald Exp $ (BRL)";
d110 1
a110 1
	  if (fscanf(inputFile, "%s", inputString) != 1) {
d115 1
a115 1
		if (fscanf(inputFile, "%s", inputString) != 1) {
d120 1
a120 1
		if (fscanf(inputFile, "%s", inputString) != 1) {
@


14.10
log
@exit->bu_exit where applicable
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.9 2007/01/23 01:13:44 brlcad Exp $ (BRL)";
d65 1
a65 1
	bu_exit(-1, "");
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.8 2007/01/20 14:36:59 brlcad Exp $ (BRL)";
d65 1
a65 1
	exit(-1);
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.7 2006/01/28 00:36:29 brlcad Exp $ (BRL)";
@


14.7
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 1999-2006 United States Government as represented by
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.6 2006/01/23 07:05:50 brlcad Exp $ (BRL)";
@


14.6
log
@use libbu memory allocation management, get rid of null checks
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.5 2006/01/18 06:46:23 brlcad Exp $ (BRL)";
d50 1
a50 2


d53 1
@


14.5
log
@update copyright to 2006
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.4 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
d102 1
a102 6
	vertices = calloc(128 * 3, sizeof(fastf_t));
	if (vertices == NULL) {
		perror("unable to calloc memory");
		fprintf(stderr, "Unable to allocate space for the initial vertices\n");
		return 2;
	}
d128 1
a128 6
			vertices = realloc(vertices, ((maxTriangleCapacity + 128) * 3) * sizeof(fastf_t));
			if (vertices == NULL) {
				perror("unable to calloc memory");
				fprintf(stderr, "Unable to reallocate space for more triangles\n");
				return 2;
			}
d146 1
a146 1
		free(vertices);
d155 2
a156 15
	faces = (int *)calloc(triangleCount * 3, sizeof(int));
	if (faces == NULL) {
		perror("unable to allocate memory");
		fprintf(stderr, "Unable to allocate memory for the faces array\n");
		free(vertices);
		return 3;
	}
	thickness = (fastf_t *)calloc(triangleCount * 3, sizeof(int));
	if (thickness == NULL) {
		perror("unable to allocate memory");
		fprintf(stderr, "Unable to allocate memory for the thickness array\n");
		free(vertices);
		free(faces);
		return 3;
	}
d171 1
a171 9
	outputObjectName = (char *)calloc(512, sizeof(char));
	if (outputObjectName == NULL) {
	  perror("unable to allocate memory");
	  fprintf(stderr, "Unable to allocate memory for the output object name\n");
		free(vertices);
		free(faces);
		free(thickness);
	  return 4;
	}
d182 3
a184 3
	free(vertices);
	free(faces);
	free(thickness);
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1999-2005 United States Government as represented by
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.3 2005/01/30 20:31:09 brlcad Exp $ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d25 1
a25 1
 *    File input is assumed to be interleaved XYZ vertex data 
d31 1
a31 1
 *      X6 Y6 Z6 X7 Y7 Z7 X8 Y8 Z8 X9 Y9 Z9 
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/rawbot.c,v 14.2 2004/12/21 03:46:08 butler Exp $ (BRL)";
d184 1
a184 1
		printf("%ld %ld %ld == (%f %f %f)\n", (j*3), (j*3)+1, (j*3)+2, vertices[(j*3)], vertices[(j*3)+1], vertices[(j*3)+2]); 
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d25 1
a25 1
 *    File input is assumed to be interleaved XYZ vertex data
d31 1
a31 1
 *      X6 Y6 Z6 X7 Y7 Z7 X8 Y8 Z8 X9 Y9 Z9
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d184 1
a184 1
		printf("%ld %ld %ld == (%f %f %f)\n", (j*3), (j*3)+1, (j*3)+2, vertices[(j*3)], vertices[(j*3)+1], vertices[(j*3)+2]);
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1999-2004 United States Government as represented by
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/rawbot.c,v 14.1 2004/11/16 19:42:30 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			R A W B O T . C
a42 9
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1999-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/rawbot.c,v 1.3 2004/08/02 23:01:52 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/rawbot.c,v 1.2 2004/06/08 22:04:33 morrison Exp $ (BRL)";
d211 10
@


1.2
log
@obliterate externs.h
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d38 1
a38 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/proc-db/rawbot.c,v 1.4 2004/05/10 15:30:49 erikg Exp $ (BRL)";
a46 1
#include "externs.h"
@

