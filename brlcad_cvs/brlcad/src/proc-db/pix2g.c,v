head	14.13;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.2
	stable-branch:14.3
	rel-7-10-2:14.9
	rel-7-10-0:14.9
	rel-7-8-4:14.7
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.13
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.21.20.49.10;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.11.21.19.28.07;	author erikgreenwald;	state Exp;
branches;
next	14.10;

14.10
date	2007.09.28.09.35.59;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.08.29.23.30.49;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.28.00.36.29;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.46.08;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.16.05.07.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.40;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                         P I X 2 G . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pix2g.c
 *
 * Generates geometry from a pixmap file.
 *
 * Author: Christopher Sean Morrison
 *
 */
#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "rtgeom.h"
#include "wdb.h"


/* workers acquire semaphore number 0 on smp machines */
#define P2G_WORKER RT_SEM_LAST
#define P2G_INIT_COUNT P2G_WORKER+1
int done=0;
int ncpu=1;

char *progname ="pix2g";

/* procedure variable start */
struct rt_wdb *db_fp;
int is_region=1;
/*	struct wmember allPixelList; */ /* defined in wdb.h */
struct wmember allScanlineList; /* defined in wdb.h */
int width=512;
int height=512;
double cellSize=1.0;
double objectSize=1.0;
const char *prototype="pixel";

int nextAvailableRow=0;

/* image file */
struct bu_mapped_file *image;

/* procedure variable end */


void usage(void)
{
	fprintf(stderr, "Usage: %s image_file.pix db_file.g [pixelWidth [pixelHeight [cellSize [objectSize]]]\n", progname);
	bu_exit(-1, NULL);
}

void computeScanline( int pid, genptr_t arg ) {
	int i=0;
	/* working pixel component value */
	unsigned char *value = image->buf;

	/*	struct wmember *allScanlineList = (struct wmember *)arg;*/
	fflush(stdout);
	db_sync(db_fp->dbip);

	while (i < height) {
		int j;
		char scratch[256]="";
		struct wmember scanlineList;
		BU_LIST_INIT(&scanlineList.l);

		bu_semaphore_acquire(P2G_WORKER);
		i=nextAvailableRow;
		nextAvailableRow++;
		bu_semaphore_release(P2G_WORKER);

		if (i >= height) {
			break;
		}

		/* cheap pretty printing */
		if (i % 64 == 0) {
			if (i != 0) {
				bu_log("[%d%%]\n[%.4d]", (int)((float)i/(float)height*100.0), i);
			} else {
				bu_log("\n[%.4d]", i);
			}
		} else {
			bu_log(".");
		}

		for (j=0; j<width; j++) {
			/*			char solidName[256]="";*/
			unsigned int r,g,b;
			unsigned char rgb[3];
			point_t p1;
			mat_t matrix;
			struct wmember wm_hd; /* defined in wdb.h */
			BU_LIST_INIT(&wm_hd.l);

			/*			bu_log("[%f:%f]", (float)i*cellSize,(float)j*cellSize);*/

			VSET(p1,(float)i*cellSize, (float)j*cellSize, 0.0);

			/* make the primitive */
			/* we do not need to make a bazillion objects if they are not going to
			 * be modified.  as such, we created one prototypical object, and all
			 * of the regions will use it.
			 ***
			   sprintf(solidName, "%dx%d.s", i+1,j+1);
				 bu_semaphore_acquire(P2G_WORKER);
				 mk_sph(db_fp, solidName, p1, objectSize/2.0);
				 bu_semaphore_release(P2G_WORKER);
			*/

			/* make the region */
			mk_addmember(prototype, &wm_hd.l, NULL, WMOP_UNION);
			/* mk_addmember(solidName, &wm_hd.l, NULL, WMOP_UNION); */

			/* get the rgb color values */
			r = *(value+(i*width*3)+(j*3));
			g = *(value+(i*width*3)+(j*3)+1);
			b = *(value+(i*width*3)+(j*3)+2);
			VSET(rgb, r, g, b);
			/* VSET(rgb, 200 , 200, 200); */

			sprintf(scratch, "%dx%d.r", i+1,j+1);
			MAT_IDN(matrix);
			MAT_DELTAS(matrix, p1[0], p1[1], 0.0);

			bu_semaphore_acquire(P2G_WORKER);
			mk_lcomb(db_fp, scratch, &wm_hd, is_region, NULL, NULL, rgb, 0);
			bu_semaphore_release(P2G_WORKER);

			mk_addmember(scratch, &scanlineList.l, matrix, WMOP_UNION);
		}

		/* write out a combination for each scanline */
		sprintf(scratch, "%d.c", i+1);
		bu_semaphore_acquire(P2G_WORKER);
		mk_lcomb(db_fp, scratch, &scanlineList, 0, NULL, NULL, NULL, 0);
		bu_semaphore_release(P2G_WORKER);

		/* all threads keep track of the scan line (in case they get to the end first */
		sprintf(scratch, "%d.c", i+1);
		mk_addmember(scratch, &allScanlineList.l, NULL, WMOP_UNION);
	}

}

int
main(int ac, char *av[])
{
	char imageFileName[256]="";
	char databaseFileName[256]="";
	char scratch[256]="";
	point_t origin;

	progname = *av;

	if (ac < 3) usage();

	snprintf(imageFileName, 256, "%s", av[1]);
	snprintf(databaseFileName, 256, "%s", av[2]);

	if (ac > 3) width=(int)atoi(av[3]);
	if (ac > 4) height=(int)atoi(av[4]);
	if (ac > 5) cellSize=(double)atof(av[5]);
	if (ac > 6) objectSize=(double)atof(av[6]);

	/*	bu_log("{%s} {%s} {%s} {%s} {%s} {%s} {%s}\n", av[0], av[1], av[2], av[3], av[4], av[5], av[6]); */

	if ((db_fp = wdb_fopen(databaseFileName)) == NULL) {
	  bu_log("unable to open database [%s]\n", databaseFileName);
		perror("Unable to open database file");
		bu_exit(-1, NULL);
	}

	if ((image = bu_open_mapped_file(imageFileName, NULL)) == NULL) {
	  bu_log("unable to open image [%s]\n", imageFileName);
		perror("Unable to open file");
		bu_exit(-2, NULL);
	}

	bu_log("Loading image %s from file...", imageFileName);
	if (image->buflen < width * height * 3) {
		bu_log("\nWARNING: %s needs %d bytes, file only contains %d bytes\n", width*height*3, image->buflen);
	} else if (image->buflen > width* height * 3) {
		bu_log("\nWarning: Image file size is larger than specified texture size\n");
	}
	bu_log("...done loading image\n");

	bu_log("Image size is %dx%d (%d bytes)\n", width, height, image->buflen);
	bu_log("Objects are %f with %f spacing\n", objectSize, cellSize);


	snprintf(scratch, 256, "%s Geometry Image", imageFileName);
	mk_id(db_fp, scratch); /* create the database header record */

	/* make a region that is the union of these two objects
	 * To accomplish this, we need to create a linked list of the
	 * items that make up the combination.  The wm_hd structure serves
	 * as the head of the list of items.
	 */
	/*	BU_LIST_INIT(&allPixelList.l); */
	BU_LIST_INIT(&allScanlineList.l);

	/*
	 * write out the image primitives
	 ***************/
	is_region = 1;

	ncpu=bu_avail_cpus();

	if (ncpu > 1) {
		bu_log("Found %d cpu\'s!  Sweet.\n", ncpu);
	}

	/* the first critical section semaphore is for coordinating work, the
	 * second for writing out the final record and cleaning up.
	 */
	/* XXX must use RT_SEM_LAST if we plan on calling bu_parallel since the
	 * semaphore count is held in a global
	 */
	bu_semaphore_init(P2G_INIT_COUNT);

	bu_log("Writing database...\n");

	/* write out the prototypical pixel object */
	VSET(origin, 0.0, 0.0, 0.0);
	mk_sph(db_fp, prototype, origin, objectSize/2.0);

	/* XXX I do not like the idea of having to pass everything around in global
	 * space. but forking on our own is just as bad (need IPC)
	 */
	bu_parallel(computeScanline, ncpu, &allScanlineList);

	/* XXX We cannot write out one BIG combination of all the pixels due to
	 * library stack limitations and tree build implementation
	 */
	/*	mk_lcomb(db_fp, "image.c", &allPixelList, 0, NULL, NULL, NULL, 0); */
	/* write out the main image combination */

	mk_lcomb(db_fp, "image.c", &allScanlineList, 0, NULL, NULL, NULL, 0);

	bu_log("\n...done! (see %s)\n", databaseFileName);

	bu_close_mapped_file(image);

	wdb_close(db_fp);

	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@pass bu_exit a NULL instead of an empty string
@
text
@d182 2
a183 2
	sprintf(imageFileName, "%s", av[1]);
	sprintf(databaseFileName, "%s", av[2]);
d216 1
a216 1
	sprintf(scratch, "%s Geometry Image", imageFileName);
@


14.11
log
@exit->bu_exit where applicable
@
text
@d73 1
a73 1
	bu_exit(-1, "");
d195 1
a195 1
		bu_exit(-1, "");
d201 1
a201 1
		bu_exit(-2, "");
@


14.10
log
@take the blame
@
text
@d73 1
a73 1
	exit(-1);
d195 1
a195 1
		exit(-1);
d201 1
a201 1
		exit(-2);
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d21 4
a24 1
 * Generates geometry from an pixmap file
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.7
log
@stupid sync().. who wrote this? .. changed to db_sync()
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.6
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d81 1
a81 1
	sync();
@


14.5
log
@update copyright to 2006
@
text
@d27 1
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d51 1
a51 1
/*	struct wmember allPixelList; */ /* defined in wdb.h */ 
d77 1
a77 1
 
d87 1
a87 1
		
d118 1
a118 1
			
d120 1
a120 1
			
d135 1
a135 1
			
d139 1
a139 1
			b = *(value+(i*width*3)+(j*3)+2);			
d148 1
a148 1
			mk_lcomb(db_fp, scratch, &wm_hd, is_region, NULL, NULL, rgb, 0);			
d150 1
a150 1
			
d153 1
a153 1
		
d159 1
a159 1
		
d211 1
a211 1
	
d224 1
a224 1
	/* 
d228 1
a228 1
		
d234 1
a234 1
			
d236 1
a236 1
	 * second for writing out the final record and cleaning up. 
d253 1
a253 1
		
d255 1
a255 1
	 * library stack limitations and tree build implementation 
d259 1
a259 1
		
d261 1
a261 1
		
d263 1
a263 1
	
d265 1
a265 1
	
d267 1
a267 1
	
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d51 1
a51 1
/*	struct wmember allPixelList; */ /* defined in wdb.h */
d77 1
a77 1

d87 1
a87 1

d118 1
a118 1

d120 1
a120 1

d135 1
a135 1

d139 1
a139 1
			b = *(value+(i*width*3)+(j*3)+2);
d148 1
a148 1
			mk_lcomb(db_fp, scratch, &wm_hd, is_region, NULL, NULL, rgb, 0);
d150 1
a150 1

d153 1
a153 1

d159 1
a159 1

d211 1
a211 1

d224 1
a224 1
	/*
d228 1
a228 1

d234 1
a234 1

d236 1
a236 1
	 * second for writing out the final record and cleaning up.
d253 1
a253 1

d255 1
a255 1
	 * library stack limitations and tree build implementation
d259 1
a259 1

d261 1
a261 1

d263 1
a263 1

d265 1
a265 1

d267 1
a267 1

@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*	P I X 2 G . C
d4 18
@


1.3
log
@ws
@
text
@d251 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@a7 2


d19 1
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d6 1
a6 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

