head	14.11;
access;
symbols
	rel-7-10-4:14.10
	STABLE:14.10.0.2
	stable-branch:14.3
	rel-7-10-2:14.10
	rel-7-10-0:14.9
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.11
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.07.26.01.13.58;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.27.01.41.45;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.04.05.19.54.28;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches
	14.5.2.1;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.08;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.46.08;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.39;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;

14.5.2.1
date	2006.04.07.19.34.19;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.11
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                       C L U T T E R . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file clutter.c
 *
 *  Program to generate procedural clutter out of primitive
 *  geometric objects.
 *
 *  Author -
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.10 2007/07/26 01:13:58 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "wdb.h"


mat_t	identity;
double degtorad = 0.0174532925199433;
double sin60;

struct mtab {
	char	mt_name[64];
	char	mt_param[96];
} mtab[] = {
	{"plastic",	""},
	{"glass",	""},
	{"plastic",	""},
	{"mirror",	""},
	{"plastic",	""},
	{"testmap",	""},
	{"plastic",	""},
	{"",		""}
};
int	nmtab = sizeof(mtab)/sizeof(struct mtab);

#define PICK_MAT	((rand() % nmtab) )

double ball_stack(char *bname, double xc, double yc, double size);
double prim_stack(char *pname, double xc, double yc, double size);
double crystal_stack(char *cname, double xc, double yc, double size);
double crystal_layer(char *crname, fastf_t *center, double radius, fastf_t *maj, fastf_t *min, double var, double ratio, int nsolids);

void	do_plate(char *name, double xc, double yc, double size);
void	do_rings(char *ringname, fastf_t *center, double r1, double r2, double incr, int n);

void	get_rgb(unsigned char *rgb);
void	do_light(char *name, point_t pos, vect_t dir_at, int da_flag, double r, unsigned char *rgb, struct wmember *headp);

struct bn_unif	*rbuf;

struct rt_wdb	*outfp;

int
main(int argc, char **argv)
{
	vect_t	norm;
	unsigned char	rgb[3];
	int	ix, iy;
	double	x, y;
	double	size;
	double	base;
	int	quant;
	char	name[64];
	vect_t	pos, aim;
	unsigned char	white[3];
	int	n;
	double	height, maxheight, minheight;
	struct wmember head;

	bu_debug = BU_DEBUG_COREDUMP;
	rbuf = bn_unif_init( 0, 0 );

#define rand_num(p)	(BN_UNIF_DOUBLE(p)+0.5)


	BU_LIST_INIT( &head.l );

	sin60 = sin(60.0 * 3.14159265358979323846264 / 180.0);

	outfp = wdb_fopen( "clutter.g" );
	mk_id( outfp, "Procedural Clutter" );

	/* Create the underpinning */
	VSET( norm, 0, 0, 1 );
	mk_half( outfp, "plane", norm, -10.0 );
	rgb[0] = 240;	/* gold/brown */
	rgb[1] = 180;
	rgb[2] = 64;
	MAT_IDN( identity );

	mk_region1( outfp, "plane.r", "plane", NULL, NULL, rgb );

	(void)mk_addmember( "plane.r", &head.l, NULL, WMOP_UNION );

	/* Create the detail cells */
	size = 1000;	/* mm */
	quant = 7;	/* XXXX 5 */
	base = -size*(quant/2);
	maxheight = size/2;		/* keep lights off the floor */
	for( ix=quant-1; ix>=0; ix-- )  {
		x = base + ix*size;
		for( iy=quant-1; iy>=0; iy-- )  {
			y = base + iy*size;
			sprintf( name, "Bx%dy%d", ix, iy );
			do_plate( name, x, y, size );
			(void)mk_addmember( name, &head.l, NULL, WMOP_UNION );

			sprintf( name, "x%dy%d", ix, iy );
			(void)mk_addmember( name, &head.l, NULL, WMOP_UNION );
			n = rand() & 03;
			switch(n)  {
			case 0:
				height = ball_stack( name, x, y, size );
				break;
			case 1:
				height = crystal_stack( name, x, y, size );
				break;
			default:
				height = prim_stack( name, x, y, size );
				break;
			}
			if( height > maxheight )  maxheight = height;
		}
	}

	/* Enclose in some rings */
	minheight = size/2;
	VSET( pos, 0, 0, size/4 );
	do_rings( "rings", pos, 2*size*quant/2, size/4, size, 4 );
	(void)mk_addmember( "rings", &head.l, NULL, WMOP_UNION );

	if( maxheight < minheight ) maxheight = minheight;

	/* Create some light */
	white[0] = white[1] = white[2] = 255;
	base = size*(quant/2+1);
	VSET( aim, 0, 0, 0 );
	VSET( pos, base, base, minheight+maxheight*rand_num(rbuf) );
	do_light( "l1", pos, aim, 1, 100.0, white, &head );
	VSET( pos, -base, base, minheight+maxheight*rand_num(rbuf) );
	do_light( "l2", pos, aim, 1, 100.0, white, &head );
	VSET( pos, -base, -base, minheight+maxheight*rand_num(rbuf) );
	do_light( "l3", pos, aim, 1, 100.0, white, &head );
	VSET( pos, base, -base, minheight+maxheight*rand_num(rbuf) );
	do_light( "l4", pos, aim, 1, 100.0, white, &head );

	/* Build the overall combination */
	mk_lfcomb( outfp, "clut", &head, 0 );

	return 0;
}

double
crystal_stack(char *cname, double xc, double yc, double size)

			/* center coordinates, z=0+ */

{
	int	i;
	point_t	center;
	vect_t	maj, min;
	int	nsolids;
	unsigned char	rgb[4];		/* needs all 4 */
	double	high;
	double	height = 0;
	double	esz;
	char	name[64];
	char	rppname[64];
	char	crystalname[64];
	vect_t	minpt, maxpt;
	struct wmember head;
	struct wmember reg_head;

	BU_LIST_INIT( &head.l );

	/* These should change somewhat for each layer, and be done by rots */
	VSET( maj, 1, 0, .2 );
	VSET( min, 0, 1, .2 );
	VUNITIZE( maj );
	VUNITIZE( min );

	for( i=0; i<3; i++ )  {
		snprintf( name, 64, "%sL%c", cname, 'a'+i);
		(void)mk_addmember( name, &head.l, NULL, WMOP_UNION );
		VSET( center, xc, yc, size/2*i );
		nsolids = 3 + (rand() & 7);

		high = crystal_layer( name, center, size/2,
			maj, min,
			rand_num(rbuf) * 90.0,
			rand_num(rbuf) * 8.0 + 2.0,
			nsolids );
		if( high > height )  height = high;
	}

	/* Build the crystal union */
	snprintf( crystalname, 64, "%scrystal", cname );
	mk_lfcomb( outfp, crystalname, &head, 0 );

	/* Make the trimming RPP */
	esz = size*0.5;	/* dist from ctr to edge of base */
	VSET( minpt, xc-esz, yc-esz, 10 );
	VSET( maxpt, xc+esz, yc+esz, height );
	snprintf( rppname, 64, "%srpp", cname );
	mk_rpp( outfp, rppname, minpt, maxpt );

	/* Build the final combination */
	BU_LIST_INIT( &reg_head.l );
	get_rgb(rgb);
	i = PICK_MAT;
	(void)mk_addmember( crystalname, &reg_head.l, NULL, WMOP_UNION );
	(void)mk_addmember( rppname, &reg_head.l, NULL, WMOP_INTERSECT );
	mk_lcomb( outfp, cname, &reg_head, 1,
		mtab[i].mt_name, mtab[i].mt_param, rgb, 0 );
	return(height);
}

double
crystal_layer(char *crname, fastf_t *center, double radius, fastf_t *maj, fastf_t *min, double var, double ratio, int nsolids)

			/* center coordinates, (min Z) */
			/* cell radius */
			/* main axis of growth */
			/* minor axis of growth */
			/* max degrees of variation off axis (0..90) */
			/* len/width ratio */
			/* number of solids for this layer */
{
	int	todo;
	double	height = center[Z];
	int	index = 0;
	point_t	loc_cent;
	point_t	a,b;
	fastf_t	*maj_axis, *min_axis;
	vect_t	long_axis, short_axis;
	vect_t	other_axis;
	double	cos_var;
	double	m_cos_var;
	double	length, width;
	point_t	pt[8];
	char	name[32];
	int	i;
	struct wmember head;

	BU_LIST_INIT( &head.l );

	for( todo = nsolids-1; todo >= 0; todo-- )  {
		cos_var = cos( var*rand_num(rbuf) );
		m_cos_var = 1 - cos_var;
		/* Blend together two original axes for new orthog. set */
		if( rand() & 1 )  {
			maj_axis = maj;
			min_axis = min;
		}  else  {
			maj_axis = min;
			min_axis = maj;
		}
		VSETALL( long_axis, 0 );
		VSETALL( short_axis, 0 );
		VJOIN2( long_axis, long_axis,
			cos_var, maj_axis,
			m_cos_var, min_axis );
		VJOIN2( short_axis, short_axis,
			m_cos_var, maj_axis,
			cos_var, min_axis );
		VCROSS( other_axis, long_axis, short_axis );

		/* dither center position */
		VMOVE(loc_cent, center );
		loc_cent[X] += rand_num(rbuf) * radius;
		loc_cent[Y] += rand_num(rbuf) * radius;

		length = radius * rand_num(rbuf);
		width = length / ratio;

		VJOIN1( a, loc_cent, length, long_axis );
		VJOIN2( pt[0], a, -width, short_axis, -width, other_axis );
		VJOIN2( pt[1], a,  width, short_axis, -width, other_axis );
		VJOIN2( pt[2], a,  width, short_axis,  width, other_axis );
		VJOIN2( pt[3], a, -width, short_axis,  width, other_axis );

		VJOIN1( b, loc_cent, -length, long_axis );
		VJOIN2( pt[4], b, -width, short_axis, -width, other_axis );
		VJOIN2( pt[5], b,  width, short_axis, -width, other_axis );
		VJOIN2( pt[6], b,  width, short_axis,  width, other_axis );
		VJOIN2( pt[7], b, -width, short_axis,  width, other_axis );

		/* Consider fusing points here, for visual complexity */

		snprintf( name, 64, "%s%d", crname, index++ );
		mk_arb8( outfp, name, &pt[0][X] );
		(void)mk_addmember( name, &head.l, NULL, WMOP_UNION );

		for( i=0; i<8; i++ )  {
			if( pt[i][Z] > height )
				height = pt[i][Z];
		}
	}

	mk_lfcomb( outfp, crname, &head, 0 );
	return(height);
}

void
do_plate(char *name, double xc, double yc, double size)

			/* center coordinates, z=0+ */

{
	double	esz;
	vect_t	minpt, maxpt;
	char	sname[64];
	unsigned char	rgb[4];		/* needs all 4 */
	int	i;

	snprintf(sname, 64, "%s.s", name);
	/* Make the base */
	esz = size*0.5*0.9;	/* dist from ctr to edge of base */
	VSET( minpt, xc-esz, yc-esz, -9 );
	VSET( maxpt, xc+esz, yc+esz, -1 );
	mk_rpp( outfp, sname, minpt, maxpt );

	/* Needs to be in a region, with color!  */
	get_rgb(rgb);
	i = PICK_MAT;
	mk_region1( outfp, name, sname,
		mtab[i].mt_name, mtab[i].mt_param, rgb );
}

double
ball_stack(char *bname, double xc, double yc, double size)

			/* center coordinates, z=0+ */

{
	point_t	center;
	double	esz;
	unsigned char	rgb[4];		/* needs all 4 */
	int	i;
	int	n;
	char	name[32];
	struct wmember head;

	BU_LIST_INIT( &head.l );

	/* Make some objects */
	esz = size*0.5*0.9;	/* dist from ctr to edge of base */
	n = rand()&7;
	for( i=0; i<n; i++ )  {
		snprintf( name, 64, "%s%c", bname, 'A'+i );
		VSET( center, xc, yc, size/2+i*size );
		mk_sph( outfp, name, center, esz/2 );
		(void)mk_addmember( name, &head.l, NULL, WMOP_UNION );
	}

	/* Build the combination */
	get_rgb(rgb);
	mk_lcomb( outfp, bname, &head, 0, (char *)0, "", rgb, 0 );

	return( n*size );
}

double
prim_stack(char *pname, double xc, double yc, double size)

			/* center coordinates, z=0+ */

{
	point_t	pt[8];
	vect_t	min, max;
	vect_t	base, hvec;
	point_t	center;
	unsigned char	rgb[4];		/* needs all 4 */
	int	nobj;
	int	i;
	int	n;
	double	vpos = 0.0;
	double	height;
	double	xbase, ybase;
	char	name[32];
	struct wmember head;

	BU_LIST_INIT( &head.l );

	size *= 0.3;		/* Don't occupy full cell */
	xbase = xc - size/2;
	ybase = yc - size/2;

	/* Make some objects */
	n = (rand()&7)+1;
	for( nobj=0; nobj<n; nobj++ )  {
		snprintf( name, 64, "%s%c", pname, 'A'+nobj );
		(void)mk_addmember( name, &head.l, NULL, WMOP_UNION );
		height = ((rand()&7)+1)*size/3;
		i = rand()%5;
		switch(i)  {
		default:
			VSET( center, xc, yc, vpos+size/2 );
			mk_sph( outfp, name, center, size/2 );
			vpos += size;
			break;
		case 0:
			VSET( min, xc-size/2, yc-size/2, vpos );
			VSET( max, xc+size/2, yc+size/2, vpos+height );
			mk_rpp( outfp, name, min, max );
			vpos += height;
			break;
		case 1:
			VSET( base, xc, yc, vpos );
			VSET( hvec, 0, 0, height );
			mk_rcc( outfp, name, base, hvec, size/2 );
			vpos += height;
			break;
		case 2:
			VSET( pt[0], xbase, ybase, vpos);
			VSET( pt[1], xbase+size, ybase, vpos);
			VSET( pt[2], xbase+size/2, ybase+size, vpos);
			VSET( pt[3], xbase+size/2, ybase+size*sin60/3, vpos+height );
			mk_arb4( outfp, name, &pt[0][X] );
			vpos += height;
			break;
		case 3:
			VSET( center, xc, yc, vpos+height/2 );
			VSET( pt[0], size/2, 0, 0 );
			VSET( pt[1], 0, size/2, 0 );
			VSET( pt[2], 0, 0, height/2 );
			mk_ell( outfp, name, center,
				pt[0], pt[1], pt[2] );
			vpos += height;
			break;
		}
	}

	/* Build the combination */
	get_rgb( rgb );
	i = PICK_MAT;
	mk_lcomb( outfp, pname, &head, 0,
		mtab[i].mt_name, mtab[i].mt_param,
		rgb, 0 );
	return(vpos);
}

void
do_rings(char *ringname, fastf_t *center, double r1, double r2, double incr, int n)
{
	int	i;
	vect_t	normal;
	unsigned char	rgb[4];
	char	rname[32];
	char	sname[32];
	struct wmember head;

	BU_LIST_INIT( &head.l );

	VSET( normal, 0, 0, 1 );
	for( i=0; i<n; i++ )  {
		snprintf( sname, 32, "%s%ds", ringname, i );
		snprintf( rname, 32, "%s%dr", ringname, i );

		mk_tor( outfp, sname, center, normal, r1, r2 );
		r1 += incr;

		/* Build the region that contains each solid */
		get_rgb(rgb);
		mk_region1( outfp, rname, sname, NULL, NULL, rgb );
		(void)mk_addmember( rname, &head.l, NULL, WMOP_UNION );
	}

	/* Build the group that holds all the regions */
	mk_lfcomb( outfp, ringname, &head, 0 );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.9 2007/01/27 01:41:45 brlcad Exp $ (BRL)";
d213 1
a213 1
		sprintf( name, "%sL%c", cname, 'a'+i);
d227 1
a227 1
	sprintf( crystalname, "%scrystal", cname );
d234 1
a234 1
	sprintf( rppname, "%srpp", cname );
d320 1
a320 1
		sprintf( name, "%s%d", crname, index++ );
d346 1
a346 1
	sprintf(sname, "%s.s", name);
d380 1
a380 1
		sprintf( name, "%s%c", bname, 'A'+i );
d422 1
a422 1
		sprintf( name, "%s%c", pname, 'A'+nobj );
d487 2
a488 2
		sprintf( sname, "%s%ds", ringname, i );
		sprintf( rname, "%s%dr", ringname, i );
@


14.9
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a27 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.8 2007/01/23 01:13:44 brlcad Exp $ (BRL)";
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.7 2007/01/20 14:36:58 brlcad Exp $ (BRL)";
a110 1

d191 1
a191 1
      	       		/* center coordinates, z=0+ */
d256 7
a262 7
       	       		/* center coordinates, (min Z) */
      	       		/* cell radius */
      	    		/* main axis of growth */
      	    		/* minor axis of growth */
      	    		/* max degrees of variation off axis (0..90) */
      	      		/* len/width ratio */
   	        	/* number of solids for this layer */
d342 1
a342 1
      	       		/* center coordinates, z=0+ */
d368 1
a368 1
      	       		/* center coordinates, z=0+ */
d401 1
a401 1
      	       		/* center coordinates, z=0+ */
@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.6 2006/04/05 19:54:28 brlcad Exp $ (BRL)";
@


14.6
log
@more header/warning cleanup from Intel compiler warnings on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.5 2006/01/18 06:46:23 brlcad Exp $ (BRL)";
@


14.5
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.4 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
d41 1
a41 2


d44 1
d52 1
@


14.5.2.1
log
@update from HEAD
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.5 2006/01/18 06:46:23 brlcad Exp $ (BRL)";
d41 2
a42 1
#include <stdlib.h>
a44 1

a51 1

@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.3 2005/01/30 20:31:08 brlcad Exp $ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d22 1
a22 1
 * 
d28 1
a28 1
 *  
d33 1
a33 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/proc-db/clutter.c,v 14.2 2004/12/21 03:46:08 butler Exp $ (BRL)";
d191 1
a191 1
    	       
d193 1
a193 1
      	     
d256 1
a256 1
    	        
d342 1
a342 1
    	      
d344 1
a344 1
      	     
d362 1
a362 1
	mk_region1( outfp, name, sname, 
d368 1
a368 1
    	       
d370 1
a370 1
      	     
d401 1
a401 1
    	       
d403 1
a403 1
      	     
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d22 1
a22 1
 *
d28 1
a28 1
 *
d33 1
a33 1
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d191 1
a191 1

d193 1
a193 1

d256 1
a256 1

d342 1
a342 1

d344 1
a344 1

d362 1
a362 1
	mk_region1( outfp, name, sname,
d368 1
a368 1

d370 1
a370 1

d401 1
a401 1

d403 1
a403 1

@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/clutter.c,v 14.1 2004/11/16 19:42:30 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			C L U T T E R . C
a33 3
 *  Copyright 
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/clutter.c,v 1.2 2004/08/02 23:01:52 morrison Exp $ (BRL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/proc-db/clutter.c,v 1.1 2004/05/20 15:20:39 morrison Exp $ (BRL)";
d492 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/proc-db/clutter.c,v 11.18 2004/05/10 15:30:49 erikg Exp $ (BRL)";
d23 1
a23 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

