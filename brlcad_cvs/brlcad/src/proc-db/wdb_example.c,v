head	14.9;
access;
symbols
	rel-7-10-4:14.8
	STABLE:14.8.0.2
	stable-branch:14.3
	rel-7-10-2:14.8
	rel-7-10-0:14.8
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.9
date	2007.12.16.18.53.50;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.45;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.02.27.10.08.41;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.46.09;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.42;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.9
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                   W D B _ E X A M P L E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file wdb_example.c
 *  Create a BRL-CAD geometry database from C code.
 *
 *  Note that this is for writing (creating/appending) a database.
 *  There is currently no API for modifying a database.
 *
 *  Note that since the values in the database are stored in millimeters.
 *  This constrains the arguments to the mk_* routines to also be in
 *  millimeters.
 */
#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "rtgeom.h"
#include "wdb.h"


char *progname ="(noname)";

void usage(void)
{
    fprintf(stderr, "Usage: %s db_file.g\n", progname);
}

int
main(int ac, char *av[])
{
    struct rt_wdb *db_fp;
    point_t p1, p2;
    int is_region;
    unsigned char rgb[3];
    struct wmember wm_hd; /* defined in wdb.h */

    progname = *av;

    if (ac < 2) {
	usage();
	return 1;
    }

    if ((db_fp = wdb_fopen(av[1])) == NULL) {
	perror(av[1]);
	return 1;
    }

    mk_id(db_fp, "My Database"); /* create the database header record */

    /* all units in the database file are stored in millimeters.  This
     * constrains the arguments to the mk_* routines to also be in
     * millimeters
     */


    /* make a sphere centered at 1.0, 2.0, 3.0 with radius .75 */
    VSET(p1, 1.0, 2.0, 3.0);
    mk_sph(db_fp, "ball.s", p1, 0.75);


    /* make an rpp under the sphere (partly overlapping).  Note that
     * this really makes an arb8, but gives us a shortcut for
     * specifying the parameters.
     */
    VSET(p1, 0.0, 0.0, 0.0);
    VSET(p2, 2.0, 4.0, 2.5);
    mk_rpp(db_fp, "box.s", p1, p2);

    /* make a region that is the union of these two objects To
     * accomplish this, we need to create a linked list of the items
     * that make up the combination.  The wm_hd structure serves as
     * the head of the list of items.
     */
    BU_LIST_INIT(&wm_hd.l);

    /* Create a wmember structure for each of the items that we want
     * in the combination.  The return from mk_addmember is a pointer
     * to the wmember structure
     */
    (void)mk_addmember( "box.s", &wm_hd.l, NULL, WMOP_UNION );

    /* If we wanted a transformation matrix for this arc, we could
     * have passed the matrix in to mk_addmember as an argument or we
     * could add the following code:
     *
     memcpy(wm_hd->wm_mat, trans_matrix, sizeof(mat_t));
     *
     * Remember that values in the database are stored in millimeters.
     * so the values in the matrix must take this into account.
     */

    /* add the second member to the database
     *
     * Note that there is nothing which checks to make sure that
     * "ball.s" exists in the database when you create the wmember
     * structure OR when you create the combination.  So mis-typing
     * the name of a sub-element for a region/combination can be a
     * problem.
     */

    (void)mk_addmember( "ball.s", &wm_hd.l, NULL, WMOP_UNION );

    /* Create the combination
     * In this case we are going to make it a region (hence the
     * is_region flag is set, and we provide shader parameter information.
     *
     * When making a combination that is NOT a region, the region flag
     * argument is 0, and the strings for optical shader, and shader
     * parameters should (in general) be null pointers.
     */
    is_region = 1;
    VSET(rgb, 64, 180, 96); /* a nice green */
    mk_lcomb(db_fp,
	     "box_n_ball.r",	/* Name of the db element created */
	     &wm_hd,		/* list of elements & boolean operations */
	     is_region,	/* Flag:  This is a region */
	     "plastic",	/* optical shader */
	     "di=.8 sp=.2", /* shader parameters */
	     rgb,		/* item color */
	     0);		/* inherit (override) flag */

    wdb_close(db_fp);
    return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d111 1
a111 1
     memcpy( wm_hd->wm_mat, trans_matrix, sizeof(mat_t));
@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.6
log
@stdlib.h and exit()
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.5
log
@update copyright to 2006
@
text
@d33 1
a33 2


d36 1
d45 1
d50 1
a50 2
	fprintf(stderr, "Usage: %s db_file.g\n", progname);
	exit(-1);
d56 91
a146 87
	struct rt_wdb *db_fp;
	point_t p1, p2;
	int is_region;
	unsigned char rgb[3];
	struct wmember wm_hd; /* defined in wdb.h */

	progname = *av;

	if (ac < 2) usage();

	if ((db_fp = wdb_fopen(av[1])) == NULL) {
		perror(av[1]);
		exit(-1);
	}

	mk_id(db_fp, "My Database"); /* create the database header record */

	/* all units in the database file are stored in millimeters.
	 * This constrains the arguments to the mk_* routines to also be
	 * in millimeters
	 */


	/* make a sphere centered at 1.0, 2.0, 3.0 with radius .75 */
	VSET(p1, 1.0, 2.0, 3.0);
	mk_sph(db_fp, "ball.s", p1, 0.75);


	/* make an rpp under the sphere (partly overlapping).
	 * Note that this really makes an arb8, but gives us a
	 * shortcut for specifying the parameters.
	 */
	VSET(p1, 0.0, 0.0, 0.0);
	VSET(p2, 2.0, 4.0, 2.5);
	mk_rpp(db_fp, "box.s", p1, p2);

	/* make a region that is the union of these two objects
	 * To accomplish this, we need to create a linked list of the
	 * items that make up the combination.  The wm_hd structure serves
	 * as the head of the list of items.
	 */
	BU_LIST_INIT(&wm_hd.l);

	/* Create a wmember structure for each of the items that we want
	 * in the combination.  The return from mk_addmember is a pointer
	 * to the wmember structure
	 */
	(void)mk_addmember( "box.s", &wm_hd.l, NULL, WMOP_UNION );

	/* If we wanted a transformation matrix for this arc, we could
	 * have passed the matrix in to mk_addmember as an argument or
	 * we could add the following code:
	 *
	 memcpy( wm_hd->wm_mat, trans_matrix, sizeof(mat_t));
	 *
	 * Remember that values in the database are stored in millimeters.
	 * so the values in the matrix must take this into account.
	 */

	/* add the second member to the database
	 *   Note that there is nothing which checks to make
	 * sure that "ball.s" exists in the database when you create the
	 * wmember structure OR when you create the combination.  So
	 * mis-typing the name of a sub-element for a region/combination
	 * can be a problem.
	 */

	(void)mk_addmember( "ball.s", &wm_hd.l, NULL, WMOP_UNION );

	/* Create the combination
	 * In this case we are going to make it a region (hence the
	 * is_region flag is set, and we provide shader parameter information.
	 *
	 * When making a combination that is NOT a region, the region flag
	 * argument is 0, and the strings for optical shader, and shader
	 * parameters should (in general) be null pointers.
	 */
	is_region = 1;
	VSET(rgb, 64, 180, 96); /* a nice green */
	mk_lcomb(db_fp,
		"box_n_ball.r",	/* Name of the db element created */
		&wm_hd,		/* list of elements & boolean operations */
		is_region,	/* Flag:  This is a region */
		 "plastic",	/* optical shader */
		 "di=.8 sp=.2", /* shader parameters */
		 rgb,		/* item color */
		 0);		/* inherit (override) flag */
d148 2
a149 2
	wdb_close(db_fp);
	return 0;
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d23 2
a24 2
 * 
 *  Note that this is for writing (creating/appending) a database.  
d28 1
a28 1
 *  This constrains the arguments to the mk_* routines to also be in 
d101 1
a101 1
	 * to the wmember structure 
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d23 2
a24 2
 *
 *  Note that this is for writing (creating/appending) a database.
d28 1
a28 1
 *  This constrains the arguments to the mk_* routines to also be in
d101 1
a101 1
	 * to the wmember structure
@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*	W D B _ E X A M P L E . C
d4 18
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d128 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d12 1
a12 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

