head	14.14;
access;
symbols
	rel-7-10-4:14.10
	STABLE:14.10.0.2
	stable-branch:14.4
	rel-7-10-2:14.10
	rel-7-10-0:14.10
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.14
date	2007.12.19.22.32.38;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.21.20.49.10;	author erikgreenwald;	state Exp;
branches;
next	14.11;

14.11
date	2007.11.21.19.28.07;	author erikgreenwald;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.45;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.02.27.10.08.41;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.23.07.05.50;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2004.12.21.07.25.31;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.46.09;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.41;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@manuallly null-terminate buffers after a strncat for sanity
@
text
@/*                         T O R I I . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file torii.c
 */
#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <math.h>
#include <string.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "rtgeom.h"
#include "wdb.h"

typedef struct torus {
  point_t position;
  double majorRadius;
  double minorRadius;
  int direction;
} torus_t;

/* torus container */
typedef struct torusArray {
  torus_t *torus;
  unsigned long int count;
  unsigned long int max;
} torusArray_t;

/* organize containers by recursion level */
typedef struct torusLevels {
  torusArray_t *level;
  unsigned short int levels;
} torusLevels_t;

void usage(char *progname)
{
	fprintf(stderr, "Usage: %s db_file.g\n", progname);
	bu_exit(-1, NULL);
}


int create_torii(int level, int currentLevel, torusLevels_t *torii, point_t position, const int dirArray[6][6], int dir){
  point_t newPosition;

  VMOVE(newPosition, position);

  /* recursive case */
  if (level > 0) {
    printf("create_torii: %d\n", level);

    if (dirArray[dir][0]==1) {
      printf("direction 0\n");
      create_torii(level-1, currentLevel+1, torii, newPosition, dirArray, 0);
    }

    if (dirArray[dir][1]==1) {
      printf("direction 1\n");
      create_torii(level-1, currentLevel+1, torii, newPosition, dirArray, 1);
    }

    if (dirArray[dir][2]==1) {
      printf("direction 2\n");
      create_torii(level-1, currentLevel+1, torii, newPosition, dirArray, 2);
    }

    if (dirArray[dir][3]==1) {
      printf("direction 3\n");
      create_torii(level-1, currentLevel+1, torii, newPosition, dirArray, 3);
    }

    if (dirArray[dir][4]==1) {
      printf("direction 4\n");
      create_torii(level-1, currentLevel+1, torii, newPosition, dirArray, 4);
    }

    if (dirArray[dir][5]==1) {
      printf("direction 5\n");
      create_torii(level-1, currentLevel+1, torii, newPosition, dirArray, 5);
    }

  } else {
#if 0
    torusArray_t *ta = &torii->level[currentLevel];
    /* base case */
    printf("base case (%d levels deep)\n", currentLevel);

    /* see if we need to allocate more memory */
    if (ta->count >= ta->max) {
      if ((ta->torus = realloc(ta->torus, (ta->count+6)*sizeof(torus_t))) == NULL) {
	bu_log("Unable to allocate memory for torii during runtime\n");
	perror("torus_t allocation during runtime failed");
	bu_exit(3, NULL);
      }
      ta->max+=6;
    }

    VMOVE(ta->torus[ta->count].position, newPosition);
    ta->torus[ta->count].majorRadius = 100.0;
    ta->torus[ta->count].minorRadius = 2.0;
    ta->torus[ta->count].direction = dir;
    ta->count++;
#endif
  }
  bu_log("returning from create_torii\n");

  return 0;
}

int output_torii(const char *fileName, int levels, const torusLevels_t torii, const char *name) {
  char scratch[256];

  strncpy(scratch, name, strlen(name));
  strncat(scratch, "_0", 2);
  scratch[256-1] = '\0'; /* sanity */

  bu_log("output_torii to file \"%s\" for %d levels using \"%s.c\" as the combination name", fileName, levels, name);

  /*
  BU_LIST_INIT(&torii.l);

  memcpy(scratch, prototypeName, strlen(prototypeName));
  strncat(scratch, ".c", 2);
  scratch[256-1] = '\0';

  mk_lcomb(db_fp, scratch, &torii, 0, NULL, NULL, NULL, 0);
  */

  return 0;
}


int
main(int ac, char *av[])
{
  char *progname ="torii";

  torusLevels_t torii;
  const char *prototypeName="torus";

  char fileName[512];
  struct rt_wdb *db_fp;
  char scratch[512];
  int levels=2;
  int direction=4;
  point_t initialPosition = {0.0, 0.0, 0.0};
  int i;

  /* this array is a flake pattern */
  static const int dirArray[6][6]={
    {1,1,0,1,0,0},
    {1,1,1,0,0,0},
    {0,1,1,1,0,0},
    {1,0,1,1,0,0},
    {1,1,1,1,0,0},
    {1,1,1,1,0,0}
  };

  progname = *av;

  if (ac < 2) usage(progname);

  if (ac > 1) snprintf(fileName, 512, "%s", av[1]);

  bu_log("Output file name is \"%s\"\n", fileName);

  if ((db_fp = wdb_fopen(fileName)) == NULL) {
    perror(fileName);
    bu_exit(-1, NULL);
  }

  /* create the database header record */
  snprintf(scratch, 512, "%s Torii", fileName);
  mk_id(db_fp, scratch);

  /* init the levels array */
  torii.levels = levels;
  torii.level = bu_calloc(levels, sizeof(torusArray_t), "torii");

  /* initialize at least a few torus to minimize allocation calls */
  for (i=0; i<levels; i++) {
      torii.level[i].torus = bu_calloc(6, sizeof(torus_t), "torii.level[i].torus");
      torii.level[i].count=0;
      torii.level[i].max=6;
  }

  /* create the mofosunavabish */
  create_torii(levels, 0, &torii, initialPosition, dirArray, direction);

  /* write out the biatch to disk */
  output_torii(fileName, levels, torii, prototypeName);

  bu_log("\n...done! (see %s)\n", av[1]);

  wdb_close(db_fp);

  return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@a134 1
  memset(scratch, 0, 256 * sizeof(char));
d137 1
d145 4
a148 1
  mk_lcomb(db_fp, strncat(scratch, ".c", 2), &torii, 0, NULL, NULL, NULL, 0);
@


14.12
log
@pass bu_exit a NULL instead of an empty string
@
text
@d182 1
a182 1
  if (ac > 1) sprintf(fileName, "%s", av[1]);
d192 1
a192 1
  sprintf(scratch, "%s Torii", fileName);
@


14.11
log
@exit->bu_exit where applicable
@
text
@d61 1
a61 1
	bu_exit(-1, "");
d115 1
a115 1
	bu_exit(3, "");
d188 1
a188 1
    bu_exit(-1, "");
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d61 1
a61 1
	exit(-1);
d115 1
a115 1
	exit(3);
d188 1
a188 1
    exit(-1);
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.8
log
@stdlib.h and exit()
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.7
log
@use libbu memory allocation management, get rid of null checks
@
text
@d25 1
a25 2


@


14.6
log
@update copyright to 2006
@
text
@d199 2
a200 5
  if ((torii.level = calloc(levels, sizeof(torusArray_t))) == NULL) {
    bu_log("Unable to allocate memory for the torus array container\n");
    perror("torusArray_t allocation failed");
    return 1;
  }
d203 3
a205 7
    if ((torii.level[i].torus = calloc(6, sizeof(torus_t))) == NULL) {
      bu_log("Unable to allocate memory for torii\n");
      perror("torus_t allocation failed");
      return 2;
    }
    torii.level[i].count=0;
    torii.level[i].max=6;
@


14.5
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.4
log
@update copyright to 2005
@
text
@d69 1
a69 1
  
d111 1
a111 1
    
d119 1
a119 1
      ta->max+=6;      
d133 1
a133 1
  
d142 1
a142 1
  
d158 2
a159 2
  
  torusLevels_t torii; 
d181 1
a181 1
  
d183 1
a183 1
  
d185 1
a185 1
  
d187 1
a187 1
  
d192 1
a192 1
  
d195 1
a195 1
  mk_id(db_fp, scratch); 
d222 1
a222 1
  
d224 1
a224 1
  
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d69 1
a69 1

d111 1
a111 1

d119 1
a119 1
      ta->max+=6;
d133 1
a133 1

d142 1
a142 1

d158 2
a159 2

  torusLevels_t torii;
d181 1
a181 1

d183 1
a183 1

d185 1
a185 1

d187 1
a187 1

d192 1
a192 1

d195 1
a195 1
  mk_id(db_fp, scratch);
d222 1
a222 1

d224 1
a224 1

@


14.3
log
@tidy up a lil bit
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.2
log
@GPL license changes
@
text
@a21 2
 *
 *
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 22
a22 1
/* TORII
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d208 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d4 1
a4 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

