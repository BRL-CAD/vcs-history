head	14.18;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.3
	rel-7-10-2:14.14
	rel-7-10-0:14.14
	rel-7-8-4:14.9
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.18
date	2007.12.22.19.39.40;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.12.19.22.32.38;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.09.15.16.23.19;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.02.20.08.19.50;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.02.02.08.48.30;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.27.01.41.45;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.04.05.19.54.28;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.02.27.10.08.40;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2006.01.23.07.05.50;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.09.09.44.09;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.46.08;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.16.05.09.40;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.33;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.40;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;

14.8.2.1
date	2006.04.07.19.34.20;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.18
log
@const params
@
text
@/*                          P I P E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file pipe.c
 *
 * Generate piping (fuel, hydraulic lines, etc) in MGED
 * format from input (points in space defining the routing).
 * Makes both tubing regions and fluid regions or solid cable.
 * Automatically generates elbow regions (and fluid in the
 * elbows) when the piping changes direction.
 *
 * Version 1.0
 * Author:	Earl P. Weaver
 * 		Ballistic Research Labratory
 * 		Aberdeen Proving Ground, Md.
 * Date:	Mon March 13 1989
 * Version 2.0
 * Changes by:	John R. Anderson
 * Date:	Wed December 6 1989
 *
 * Version 3.0
 * Changes by:	John R. Anderson
 * Date: 	Tuesday January 18, 1994
 *	combined code into a single file
 *
 * Version 3.1
 * Changes by:	John R. Anderson
 * Date:	Wednesday May 18,1994
 *	included in BRL-CAD distribution
 */

#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.17 2007/12/19 22:32:38 brlcad Exp $";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"


#define NAMESIZE 80		/* in v5, they can be longer than 16 */

#ifdef VERSION
#  undef VERSION
#endif
#define	VERSION	3
#define	RELEASE	1

#define REGION	1

#define MINR	2.		/* minimum bending radius is MINR*tubingradius	*/
				/* note, the bending radius is measured to the	*/
				/* edge of the tube, NOT the centerline of tube	*/

struct points
{
	point_t p;	/* data point */
	point_t p1;	/* adjusted point torward previous point */
	point_t p2;	/* adjusted point torward next point */
	point_t center;	/* center point for tori elbows */
	vect_t nprev;	/* unit vector towards previous point */
	vect_t nnext;	/* unit vector towards next point */
	fastf_t alpha; /* angle between "nprev" and "nnext" */
	vect_t norm;	/* unit vector normal to "nprev" and "nnext" */
	vect_t nmitre;	/* unit vector along mitre joint */
	vect_t mnorm;	/* unit vector normal to mitre joint and "norm" */
	char tube[NAMESIZE],tubflu[NAMESIZE];			/* solid names */
	char elbow[NAMESIZE],elbflu[NAMESIZE],cut[NAMESIZE];	/* solid names */
	char tube_r[NAMESIZE],tubflu_r[NAMESIZE];		/* region names */
	char elbow_r[NAMESIZE],elbflu_r[NAMESIZE];		/* region names */
	struct points *next,*prev;
};


double radius,wall,pi,k;
struct points *root;
char	name[16];
float	delta=10.0;		/* 10mm excess in ARB sizing for cutting tubes */
mat_t	identity;

int torus=0,sphere=0,mitre=0,nothing=0,cable=0;

/*	formats for solid and region names	*/
char *tor_out="%02d-out.tor",*tor_in="%02d-in.tor";
char *haf="%02d.haf";
char *sph_out="%02d-out.sph",*sph_in="%02d-in.sph";
char *rcc_out="%02d-out.rcc",*rcc_in="%02d-in.rcc";
char *tub_reg="%02d.tube",*tub_flu="%02d.tubflu";
char *elb_reg="%02d.elbow",*elb_flu="%02d.elbflu";
char *arb="%02d.arb";

void Usage(void);

struct rt_wdb *fdout;	/* file for libwdb writes */

void
Make_name(char *ptr, const char *form, const char *base, int number)
{

	char scrat[NAMESIZE];
	int len;

	strncpy( ptr , base, NAMESIZE-1 );
	snprintf( scrat, NAMESIZE, form , number );
	len = strlen( ptr ) + strlen( scrat );
	if( len > (NAMESIZE-1) )
		ptr[ (NAMESIZE-1) - strlen( scrat ) ] = '\0';
	strncat( ptr , scrat, NAMESIZE-strlen(ptr)-1 );
	ptr[NAMESIZE-1] = '\0'; /* sanity */
}

void
Readpoints(void)
{
	struct points *ptr,*prev;
	fastf_t x,y,z;

	ptr = root;
	prev = NULL;


	printf( "X Y Z (^D for end): ");
	while(scanf("%lf%lf%lf",&x, &y, &z) ==  3 )
	{
		if( ptr == NULL )
		{
			ptr = (struct points *)bu_malloc( sizeof( struct points ), "ptr" );
			root = ptr;
		}
		else
		{
			ptr->next = (struct points *)bu_malloc( sizeof( struct points ), "ptr->next" );
			ptr = ptr->next;
		}
		ptr->next = NULL;
		ptr->prev = prev;
		prev = ptr;
		VSET(ptr->p,k*x,k*y,k*z);
		ptr->tube[0] = '\0';
		ptr->tubflu[0] = '\0';
		ptr->elbow[0] = '\0';
		ptr->elbflu[0] = '\0';
		ptr->cut[0] = '\0';
		printf( "X Y Z (^D for end): ");
	}
}

void
Names(void)
{
	struct points *ptr;
	char *inform=NULL,*outform=NULL,*cutform=NULL;
	int nummer=0;


	if( torus )
	{
		outform = tor_out;
		inform = tor_in;
		cutform = arb;
	}
	else if( sphere )
	{
		outform = sph_out;
		inform = sph_in;
	}
	else if( mitre )
		cutform = haf;

	ptr = root;
	while( ptr->next != NULL )
	{
		nummer++;

		/* Outer RCC */
		Make_name( ptr->tube , rcc_out , name , nummer );

		if( !cable ) /* Inner RCC */
			Make_name( ptr->tubflu , rcc_in , name , nummer );

		if( (sphere || torus) && ptr != root )
		{
			/* Outer elbow */
			Make_name( ptr->elbow , outform , name , nummer );

			if( !cable ) /* Inner elbow */
				Make_name( ptr->elbflu , inform , name , nummer );
		}
		if( torus || mitre )	/* Make cutting solid name */
			Make_name( ptr->cut , cutform , name , nummer );

		/* Make region names */
		Make_name( ptr->tube_r , tub_reg , name , nummer ); /* tube region */

		if( (torus || sphere) && ptr != root )	/* Make elbow region name */
			Make_name( ptr->elbow_r , elb_reg , name , nummer );

		if( !cable )	/* Make fluid region names */
		{
			Make_name( ptr->tubflu_r , tub_flu , name , nummer );

			if( (torus || sphere) && ptr != root )	/* Make elbow fluid region names */
				Make_name( ptr->elbflu_r , elb_flu , name , nummer );
		}

		ptr = ptr->next;
	}
	ptr->tube[0] = '\0';
	ptr->tubflu[0] = '\0';
	ptr->elbow[0] = '\0';
	ptr->elbflu[0] = '\0';
	ptr->cut[0] = '\0';
	ptr->tube_r[0] = '\0';
	ptr->tubflu_r[0] = '\0';
	ptr->elbow_r[0] = '\0';
	ptr->elbflu_r[0] = '\0';
}

void
Normals(void)
{
	struct points *ptr;


	if( root == NULL )
		return;

	ptr = root->next;
	if( ptr == NULL )
		return;

	VSUB2( root->nnext , ptr->p , root->p );
	VUNITIZE( root->nnext );

	while( ptr->next != NULL )
	{
		VREVERSE( ptr->nprev , ptr->prev->nnext );
		VSUB2( ptr->nnext , ptr->next->p , ptr->p );
		VUNITIZE( ptr->nnext );
		VCROSS( ptr->norm , ptr->nprev , ptr->nnext );
		VUNITIZE( ptr->norm );
		VADD2( ptr->nmitre , ptr->nprev , ptr->nnext );
		VUNITIZE( ptr->nmitre );
		VCROSS( ptr->mnorm , ptr->norm , ptr->nmitre );
		VUNITIZE( ptr->mnorm );
		if( VDOT( ptr->mnorm , ptr->nnext ) > 0.0 )
			VREVERSE( ptr->mnorm , ptr->mnorm );
		ptr->alpha = acos( VDOT( ptr->nnext , ptr->nprev ) );
		ptr = ptr->next;
	}
}

void
Adjust(void)
{
	fastf_t beta,d,len;
	struct points *ptr;

	if( root == NULL )
		return;

	VMOVE( root->p1 , root->p );
	VMOVE( root->p2 , root->p );

	ptr = root->next;
	if( ptr == NULL )
		return;

	if( ptr->next == NULL )
	{
		VMOVE( ptr->p1 , ptr->p );
		VMOVE( ptr->p2 , ptr->p );
		return;
	}


	while( ptr->next != NULL )
	{
		if( !torus && !mitre )
		{
			VMOVE( ptr->p1 , ptr->p );
			VMOVE( ptr->p2 , ptr->p );
		}
		else if( torus )
		{
/*			beta=.5*( pi-ptr->alpha );
			d=( MINR+1.0 )*radius*tan( beta ); */ /* dist from new endpts to p2 */

			beta = 0.5 * ptr->alpha;
			d = (MINR + 1.0) * radius / tan( beta );
			VJOIN1( ptr->p1 , ptr->p , d , ptr->nprev );
			VJOIN1( ptr->p2 , ptr->p , d , ptr->nnext );
			d = sqrt( d*d + (MINR+1.0)*(MINR+1.)*radius*radius );
			VJOIN1( ptr->center , ptr->p , d , ptr->nmitre );
		}
		else if( mitre )
		{
			len = radius/tan(ptr->alpha/2.0);
			VJOIN1( ptr->p1 , ptr->p , -len , ptr->nprev );
			VJOIN1( ptr->p2 , ptr->p , -len , ptr->nnext );
		}
		ptr = ptr->next;
	}
	VMOVE( ptr->p1 , ptr->p );
	VMOVE( ptr->p2 , ptr->p );
}

void
Pipes(void)
{
	vect_t ht;
	struct points *ptr;
	fastf_t len;
	int comblen;
	struct wmember head;

	BU_LIST_INIT(&head.l);

	ptr = root;
	if( ptr == NULL )
		return;

	while( ptr->next != NULL )
	{

		/* Make the basic pipe solids */

		VSUB2( ht , ptr->next->p1 , ptr->p2);

		mk_rcc( fdout , ptr->tube , ptr->p2 , ht , radius );	/* make a solid record	     */

		if( !cable ) /* make inside solid */
			mk_rcc( fdout , ptr->tubflu , ptr->p2 , ht , radius-wall );

		if( torus )
		{
			/* Make tubing region */
			mk_addmember( ptr->tube , &head.l , NULL, WMOP_UNION );	/* make 'u' member record	   */
			if( !cable )
			{
				/* Subtract inside solid */
				mk_addmember( ptr->tubflu , &head.l , NULL, WMOP_SUBTRACT );	/* make '-' member record	   */

				/* Make fluid region */
				mk_comb1( fdout, ptr->tubflu_r, ptr->tubflu, 1 );
			}
			mk_lfcomb( fdout , ptr->tube_r , &head , 1 );
		}
		else if( mitre )
		{
			if( ptr->prev != NULL )
			{
				len = VDOT( ptr->p , ptr->mnorm );
				mk_half( fdout , ptr->cut , ptr->mnorm , len );
			}

			comblen = 4 - cable;
			if( ptr->next->next == NULL )
				comblen--;
			if( ptr->prev == NULL )
				comblen--;

			mk_addmember( ptr->tube , &head.l , NULL, WMOP_UNION );	/* make 'u' member record	   */

			if( !cable )
				mk_addmember( ptr->tubflu , &head.l , NULL, WMOP_SUBTRACT );	/* make '-' member record	   */

			if( ptr->next->next != NULL )
				mk_addmember( ptr->next->cut , &head.l , NULL, WMOP_SUBTRACT );	/* make '+' member record	   */

			if( ptr->prev != NULL )
				mk_addmember( ptr->cut , &head.l , NULL, WMOP_INTERSECT );	/* subtract HAF */

			mk_lfcomb( fdout, ptr->tube_r, &head, 1 );

			if( !cable )
			{
				/* Make fluid region */

				comblen = 3;
				if( ptr->next->next == NULL )
					comblen--;
				if( ptr->prev == NULL )
					comblen--;

				mk_addmember( ptr->tubflu , &head.l , NULL, WMOP_UNION );	/* make 'u' member record	*/

				if( ptr->next->next != NULL )
					mk_addmember( ptr->next->cut , &head.l , NULL, WMOP_SUBTRACT );	/* make '+' member record	   */

				if( ptr->prev != NULL )
					mk_addmember( ptr->cut , &head.l , NULL, WMOP_INTERSECT );	/* subtract */

				mk_lfcomb( fdout , ptr->tubflu_r , &head , 1 );	/* make REGION comb record	*/
			}
		}
		else if( sphere )
		{

			/* make REGION  comb record for tube */
			comblen = 2;
			if( cable )
				comblen--;
			if( ptr->next->tube[0] != '\0' )
				comblen++;
			if( !cable && ptr->prev != NULL )
				comblen++;

			/* make 'u' member record	   */

			mk_addmember( ptr->tube , &head.l , NULL, WMOP_UNION );

			/* make '-' member record	   */
			if( !cable )
				mk_addmember( ptr->tubflu , &head.l , NULL, WMOP_SUBTRACT );

			if( ptr->next->tube[0] != '\0' )	/* subtract outside of next tube */
				mk_addmember( ptr->next->tube , &head.l , NULL, WMOP_SUBTRACT );
			if( !cable && ptr->prev != NULL ) /* subtract inside of previous tube */
				mk_addmember( ptr->prev->tubflu , &head.l , NULL, WMOP_SUBTRACT );

			mk_lfcomb( fdout , ptr->tube_r , &head , REGION );

			if( !cable )
			{
				/* make REGION for fluid */

				/* make 'u' member record	*/

				mk_addmember( ptr->tubflu , &head.l , NULL, WMOP_UNION );

				if( ptr->next->tubflu[0] != '\0'  )	/* subtract inside of next tube */
					mk_addmember( ptr->next->tubflu , &head.l , NULL, WMOP_SUBTRACT );

				mk_lfcomb( fdout , ptr->tubflu_r , &head , REGION );
			}
		}
		else if( nothing )
		{

			/* make REGION  comb record for tube */
			comblen = 2;
			if( cable )
				comblen--;
			if( ptr->next->tube[0] != '\0' )
				comblen++;
			if( !cable && ptr->prev != NULL )
				comblen++;

			/* make 'u' member record	   */

			mk_addmember( ptr->tube , &head.l , NULL, WMOP_UNION );

			/* make '-' member record	   */
			if( !cable )
				mk_addmember( ptr->tubflu , &head.l , NULL, WMOP_SUBTRACT );

			if( ptr->next->tube[0] != '\0' )	/* subtract outside of next tube */
				mk_addmember( ptr->next->tube , &head.l , NULL, WMOP_SUBTRACT );
			if( !cable && ptr->prev != NULL ) /* subtract inside of previous tube */
				mk_addmember( ptr->prev->tubflu , &head.l , NULL, WMOP_SUBTRACT );

			mk_lfcomb( fdout , ptr->tube_r , &head , REGION );

			if( !cable )
			{
				/* make REGION for fluid */

				/* make 'u' member record	*/

				mk_addmember( ptr->tubflu , &head.l , NULL, WMOP_UNION );

				if( ptr->next->tubflu[0] != '\0'  )	/* subtract inside of next tube */
					mk_addmember( ptr->next->tubflu , &head.l , NULL, WMOP_SUBTRACT );

				mk_lfcomb( fdout , ptr->tubflu_r , &head , REGION );
			}
		}
		ptr = ptr->next;
	}
}

void
Elbows(void)	/* make a tubing elbow and fluid elbow */
{
	vect_t RN1,RN2;
	point_t pts[8];
	fastf_t len;
	struct points *ptr;
	struct wmember head;

	if( nothing || mitre )
		return;

	if( root == NULL )
		return;

	BU_LIST_INIT(&head.l);

	ptr = root->next;
	while( ptr->next != NULL )
	{

		/* Make outside elbow solid */
		if( torus )
			mk_tor( fdout , ptr->elbow , ptr->center , ptr->norm , ( MINR+1 )*radius , radius );
		else if( sphere )
			mk_sph( fdout , ptr->elbow , ptr->p , radius );

		if( !cable ) /* Make inside elbow solid */
		{
			if( torus )
				mk_tor( fdout , ptr->elbflu , ptr->center , ptr->norm , ( MINR+1 )*radius , radius-wall );
			else if( sphere )
				mk_sph( fdout , ptr->elbflu , ptr->p , radius-wall );
		}

		if( torus )	/* Make ARB8 solid */
		{
			len = ((MINR+2)*radius + delta) / cos( (pi-ptr->alpha)/4.0 );
				/* vector from center of torus to rcc end */
			VSUB2( RN1 , ptr->p1 , ptr->center );
			VUNITIZE( RN1 );		/* unit vector */
				/* beginning of next rcc */
			VSUB2( RN2 , ptr->p2 , ptr->center );
			VUNITIZE( RN2 );		/* and unitize again */

			/* build the eight points for the ARB8 */

			VJOIN1( pts[0] , ptr->center , radius+delta , ptr->norm );
			VJOIN1( pts[1] , pts[0] , len , RN1 );
			VJOIN1( pts[2] , pts[0] , -len , ptr->nmitre );
			VJOIN1( pts[3] , pts[0] , len , RN2 );
			VJOIN1( pts[4] , ptr->center , -radius-delta , ptr->norm );
			VJOIN1( pts[5] , pts[4] , len , RN1 );
			VJOIN1( pts[6] , pts[4] , -len , ptr->nmitre );
			VJOIN1( pts[7] , pts[4] , len , RN2 );

			mk_arb8( fdout , ptr->cut , &pts[0][X] );
		}

		if( torus )
		{
			mk_addmember( ptr->elbow , &head.l , NULL, WMOP_UNION );	/* make 'u' member record	   */
			if( !cable )
				mk_addmember(  ptr->elbflu , &head.l , NULL, WMOP_SUBTRACT );	/* make '-' member record	   */
			mk_addmember( ptr->cut , &head.l , NULL, WMOP_INTERSECT );
			mk_lfcomb( fdout , ptr->elbow_r , &head , REGION );	/* make REGION  comb record	   */

			if( !cable )
			{
				mk_addmember( ptr->elbflu , &head.l , NULL, WMOP_UNION );	/* make 'u' member record	*/
				mk_addmember( ptr->cut , &head.l , NULL, WMOP_INTERSECT );
				mk_lfcomb( fdout , ptr->elbflu_r , &head , REGION );		/* make REGION comb record	*/
			}
		}
		else if( sphere )
		{
			mk_addmember( ptr->elbow , &head.l , NULL, WMOP_UNION );	/* make 'u' member record	   */
			if( !cable )
				mk_addmember( ptr->elbflu , &head.l , NULL, WMOP_SUBTRACT );	/* make '-' member record	   */
			mk_addmember( ptr->tube , &head.l , NULL, WMOP_SUBTRACT );
			mk_addmember( ptr->prev->tube , &head.l , NULL, WMOP_SUBTRACT );

			mk_lfcomb( fdout , ptr->elbow_r , &head , REGION );	/* make REGION  comb record	   */

			if( !cable )
			{
				mk_addmember( ptr->elbflu , &head.l , NULL, WMOP_UNION );	/* make 'u' member record	*/
				mk_addmember( ptr->tube , &head.l , NULL, WMOP_SUBTRACT );
				mk_addmember( ptr->prev->tube , &head.l , NULL, WMOP_SUBTRACT );
				mk_lfcomb( fdout , ptr->elbflu_r , &head , REGION );		/* make REGION comb record	*/
			}
		}
		ptr = ptr->next;
	}
}

void
Groups(void)
{
	struct points *ptr;
	char tag[NAMESIZE];
	char *pipe_group=".pipe";
	char *fluid_group=".fluid";
	int comblen=0;
	struct wmember	head;

	BU_LIST_INIT(&head.l);

	ptr = root;
	if( ptr == NULL )
		return;

	while( ptr->next != NULL )
	{
		if( !nothing && !mitre && comblen)	/* count elbow sections (except first point) */
			comblen++;
		comblen++;	/* count pipe sections */

		ptr = ptr->next;
	}

	if( comblen )
	{

		/* Make name for pipe group = "name".pipe */
		Make_name( tag , pipe_group , name , 0 );

		/* Make group */
		ptr = root;
		while( ptr->next != NULL )
		{
			mk_addmember( ptr->tube_r , &head.l , NULL, WMOP_UNION );	/* tube regions */

			if( !nothing && !mitre && ptr != root )
				mk_addmember( ptr->elbow_r , &head.l , NULL, WMOP_UNION );	/* elbows */

			ptr = ptr->next;
		}
		mk_lfcomb( fdout , tag , &head , 0 );

		if( !cable )
		{
			/* Make name for fluid group = "name".fluid */
			Make_name( tag , fluid_group , name , 0 );

			/* Make group */
			ptr = root;
			while( ptr->next != NULL )
			{
				mk_addmember( ptr->tubflu_r , &head.l , NULL, WMOP_UNION );	/* fluid in tubes */

				if( !nothing && !mitre && ptr != root )
					mk_addmember( ptr->elbflu_r , &head.l , NULL, WMOP_UNION ); /* fluid in elbows */

				ptr = ptr->next;
			}
			mk_lfcomb( fdout , tag , &head , 0 );
		}
	}
}

int
main(int argc, char **argv)
{
	int done;
	char units[16],fname[80];
	int optc;

	while( (optc = bu_getopt( argc,argv,"tsmnc" )) != -1)
	{
		switch( optc )	/* Set joint type and cable option */
		{
			case 't':
				torus = 1;
				break;
			case 's':
				sphere = 1;
				break;
			case 'm':
				mitre = 1;
				break;
			case 'n':
				nothing = 1;
				break;
			case 'c':
				cable = 1;
				break;
			case '?':
				fprintf( stderr , "Illegal option %c\n" , optc );
				Usage();
				return 1;
				break;

		}
	}

	if( (torus + sphere + mitre + nothing) > 1 ) /* Too many joint options */
	{
		Usage();
		fprintf( stderr , "Options t,s,m,n are mutually exclusive\n" );
		return 1;
	}
	else if( (torus + sphere + mitre + nothing) == 0 ) {
		torus = 1;		/* default */
	}

	if( (argc - bu_optind) != 2 ) {
		Usage();
		return 1;
	}

	strncpy( name , argv[bu_optind++], NAMESIZE-1 ); /* Base name for objects */

	fdout = wdb_fopen( argv[bu_optind] );
	if( fdout == NULL )
	{
		fprintf( stderr , "Cannot open %s\n" , argv[bu_optind] );
		perror( "Pipe" );
		Usage();
		return 1;
	}

	MAT_IDN(identity);	/* Identity matrix for all objects */
	pi = atan2( 0.0 , -1.0 );	/* PI */

	printf( "FLUID & PIPING V%d.%d 10 Mar 89\n\n" , VERSION , RELEASE );
	printf( "append %s to your target description using 'concat' in mged\n" , argv[bu_optind] );

	k = 0.0;
	while( k == 0.0 )
	{
		printf( "UNITS? (ft,in,m,cm, default is millimeters) ");
		bu_fgets(units, sizeof(units), stdin);
		switch (units[0])
		{

			case '\0':
				k = 1.0;
				break;

			case 'f':
				k = 12*25.4;
				break;

			case 'i':
				k=25.4;
				break;

			case 'm':
				if ( units[1] == '\0') k=1000.0;
				else k=1.0;
				break;

			case 'c':
				k=10.0;
				break;

			default:
				k=0.0;
				printf( "\n\t%s is not a legal choice for units\n" , units );
				printf( "\tTry again\n" );
				break;
		}
	}

	done = 0;
	while( !done )
	{
		if( !cable ) {
			printf( "radius and wall thickness: ");
			if (scanf("%lf %lf", &radius,&wall) == EOF )
			    return 1;
			if (radius > wall)
				done = 1;
			else
			{
				printf( " *** bad input!\n\n");
				printf( "\tradius must be larger than wall thickness\n" );
				printf( "\tTry again\n" );
			}
		}
		else {
			printf( "radius: ");
			if( scanf("%lf", &radius ) == EOF )
			    return 1;
			done=1;
		}
	}
	radius=k*radius;
	wall=k*wall;

	Readpoints();	/* Read data points */

	Names();	/* Construct names for all solids */

	Normals();	/* Calculate normals and other vectors */

	Adjust();       /* Adjust points to allow for elbows */

/*	Generate Title */

	strncpy(fname,name, 80-1);
	if( !cable )
		strcat(fname," pipe and fluid");
	else
		strcat(fname," cable");

/*	Create ident record	*/

	mk_id(fdout,fname);

	Pipes();	/* Construct the piping */

	Elbows();	/* Construct the elbow sections */

	Groups();	/* Make some groups */

	return 0;
}

void
Usage(void)
{
	fprintf( stderr , "Usage: pipe [-tsmnc] tag filename\n");
	fprintf( stderr , "   where 'tag' is the name of the piping run\n");
	fprintf( stderr , "   and 'filename' is the .g file (e.g., fuel.g)\n");
	fprintf( stderr , "   -t -> use tori at the bends (default)\n" );
	fprintf( stderr , "   -s -> use spheres at the corners\n" );
	fprintf( stderr , "   -m -> mitre the corners\n" );
	fprintf( stderr , "   -n -> nothing at the corners\n" );
	fprintf( stderr , "   -c -> cable (no fluid)\n" );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@manuallly null-terminate buffers after a strncat for sanity
@
text
@d49 1
a49 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.16 2007/12/02 22:34:23 brlcad Exp $";
d125 1
a125 1
Make_name(char *ptr, char *form, char *base, int number)
@


14.16
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@d49 1
a49 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.15 2007/09/15 16:23:19 brlcad Exp $";
d137 1
@


14.15
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d49 1
a49 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.14 2007/02/20 08:19:50 brlcad Exp $";
d131 2
a132 2
	strcpy( ptr , base );
	sprintf( scrat , form , number );
d136 1
a136 1
	strcat( ptr , scrat );
d721 1
a721 1
	strcpy( name , argv[bu_optind++] ); /* Base name for objects */
d811 1
a811 1
	strcpy(fname,name);
@


14.14
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d49 1
a49 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.13 2007/02/02 08:48:30 brlcad Exp $";
a52 3
#ifdef VERSION
#  undef VERSION
#endif
d57 2
a58 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d71 3
@


14.13
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d49 1
a49 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.12 2007/01/27 01:41:45 brlcad Exp $";
d745 1
a745 1
		fgets(units, sizeof(units), stdin);
@


14.12
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d49 1
a49 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.11 2007/01/23 01:13:44 brlcad Exp $";
a678 1
	extern int optind;
d681 1
a681 1
	while( (optc = getopt( argc,argv,"tsmnc" )) != -1)
d719 1
a719 1
	if( (argc - optind) != 2 ) {
d724 1
a724 1
	strcpy( name , argv[optind++] ); /* Base name for objects */
d726 1
a726 1
	fdout = wdb_fopen( argv[optind] );
d729 1
a729 1
		fprintf( stderr , "Cannot open %s\n" , argv[optind] );
d739 1
a739 1
	printf( "append %s to your target description using 'concat' in mged\n" , argv[optind] );
@


14.11
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d49 1
a49 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.10 2007/01/20 14:36:59 brlcad Exp $";
d811 1
a811 1
        Adjust();       /* Adjust points to allow for elbows */
@


14.10
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d49 1
a49 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.9 2006/04/05 19:54:28 brlcad Exp $";
@


14.9
log
@more header/warning cleanup from Intel compiler warnings on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d50 1
a50 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.8 2006/02/27 10:08:40 brlcad Exp $";
@


14.8
log
@stdlib.h and exit()
@
text
@d50 1
a50 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.7 2006/01/23 07:05:50 brlcad Exp $";
d66 3
@


14.8.2.1
log
@update from HEAD
@
text
@d50 1
a50 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.8 2006/02/27 10:08:40 brlcad Exp $";
a65 3
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
@


14.7
log
@use libbu memory allocation management, get rid of null checks
@
text
@d50 1
a50 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.6 2006/01/18 06:46:23 brlcad Exp $";
d58 1
d702 1
a702 1
				exit( 1 );
d712 1
a712 1
		exit( 1 );
d720 1
a720 1
		exit( 1 );
d731 1
a731 1
		exit( 1 );
d783 1
a783 1
				exit( 1 );
d796 1
a796 1
				exit( 1 );
@


14.6
log
@update copyright to 2006
@
text
@d50 1
a50 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.5 2005/10/23 04:44:37 brlcad Exp $";
d154 1
a154 1
			ptr = (struct points *)malloc( sizeof( struct points ) );
d159 1
a159 1
			ptr->next = (struct points *)malloc( sizeof( struct points ) );
@


14.5
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d50 1
a50 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.4 2005/09/09 09:44:09 brlcad Exp $";
@


14.4
log
@BRL-CAD not BRLCAD, consistency
@
text
@d28 1
a28 1
 * 
d50 1
a50 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.3 2005/01/30 20:31:09 brlcad Exp $";
d144 1
a144 1
	
d291 1
a291 1
	
d305 1
a305 1
	{	
d313 1
a313 1
/*			beta=.5*( pi-ptr->alpha );	
d435 1
a435 1
			
d454 1
a454 1
			
d495 1
a495 1
			
d530 1
a530 1
		
d565 1
a565 1
		
d590 1
a590 1
			mk_addmember( ptr->prev->tube , &head.l , NULL, WMOP_SUBTRACT );	
d598 1
a598 1
				mk_addmember( ptr->prev->tube , &head.l , NULL, WMOP_SUBTRACT );	
d660 1
a660 1
				
d663 1
a663 1
				
d703 1
a703 1
		
d743 1
a743 1
		fgets(units, sizeof(units), stdin);	
d780 1
a780 1
			printf( "radius and wall thickness: ");	
d801 1
a801 1
	
@


14.3
log
@update copyright to 2005
@
text
@d46 1
a46 1
 *	included in BRLCAD distribution
d50 1
a50 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/proc-db/pipe.c,v 14.2 2004/12/21 03:46:08 butler Exp $";
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *
d46 1
a46 1
 *	included in BRL-CAD distribution
d50 1
a50 1
static const char RCSid[] = "$Header$";
d144 1
a144 1

d291 1
a291 1

d305 1
a305 1
	{
d313 1
a313 1
/*			beta=.5*( pi-ptr->alpha );
d435 1
a435 1

d454 1
a454 1

d495 1
a495 1

d530 1
a530 1

d565 1
a565 1

d590 1
a590 1
			mk_addmember( ptr->prev->tube , &head.l , NULL, WMOP_SUBTRACT );
d598 1
a598 1
				mk_addmember( ptr->prev->tube , &head.l , NULL, WMOP_SUBTRACT );
d660 1
a660 1

d663 1
a663 1

d703 1
a703 1

d743 1
a743 1
		fgets(units, sizeof(units), stdin);
d780 1
a780 1
			printf( "radius and wall thickness: ");
d801 1
a801 1

@


14.2
log
@GPL license changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d50 1
a50 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/proc-db/pipe.c,v 14.1 2004/11/16 19:42:30 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 3

/* 
 *			P I P E
d50 1
a50 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/proc-db/pipe.c,v 1.5 2004/09/16 05:09:40 morrison Exp $";
@


1.5
log
@VERSION redefined
@
text
@d32 1
a32 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/proc-db/pipe.c,v 1.4 2004/09/03 23:30:59 morrison Exp $";
d825 10
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d32 1
a32 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/proc-db/pipe.c,v 1.3 2004/08/02 23:01:52 morrison Exp $";
d36 3
a38 2


d43 1
a43 1
#include <string.h>
d45 1
a45 1
#include <strings.h>
d53 1
a57 1

@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d32 1
a32 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/proc-db/pipe.c,v 1.2 2004/06/08 22:04:33 morrison Exp $";
d41 1
a41 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d32 1
a32 1
static const char RCSid[] = "$Header$";
d35 1
a35 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d32 1
a32 1
static const char RCSid[] = "$Header: /cvs/brlcad/proc-db/pipe.c,v 11.16 2004/05/10 15:30:49 erikg Exp $";
a49 1
#include "externs.h"
@

