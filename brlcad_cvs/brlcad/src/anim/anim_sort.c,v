head	14.18;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.8
	rel-7-10-2:14.14
	rel-7-10-0:14.14
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.18
date	2007.12.19.16.28.55;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.12.18.19.09.52;	author erikgreenwald;	state Exp;
branches;
next	14.16;

14.16
date	2007.12.18.07.07.12;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.10.14.04.38.03;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.02.20.08.19.47;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.27.01.41.31;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.42;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.12;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.02.14.02.29.35;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.30.14;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.00.54.02;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.07;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.39;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.18
log
@reserve was already decreased, need to add space remaining/expected
@
text
@/*                     A N I M _ S O R T . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file anim_sort.c
 *	Combine multiple animation scripts on standard input into a
 *  single script on standard output. The output can be in natural order
 *  or in a scrambled order for incrementally increasing time
 *  resolution (-i option).
 *
 *
 *  Author -
 *	Carl J. Nuzman
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"


#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "machine.h"
#include "bu.h"

#define MAXLEN	50		/*maximum length of lines to be read */
#define MAXLINES 30		/* maximum length of lines to be stored*/

int suppressed;		/* flag: suppress printing of 'clean;' commands */
int incremental;	/* flag: order for incremental time resolution */

int get_args(int argc, char **argv);

int
main(int argc, char **argv)
{
    int	length,frame_number, number, success, maxnum;
    int 	first_frame,spread,reserve;
    long	last_pos;
    char	line[MAXLEN];
    char    pbuffer[MAXLEN*MAXLINES];


    if (!get_args(argc,argv))
	fprintf(stderr,"Get_args error\n");

    /* copy any lines preceeding the first "start" command */
    last_pos = ftell(stdin);
    while (bu_fgets(line,MAXLEN,stdin)!=NULL){
	if (strncmp(line,"start",5)){
	    printf("%s",line);
	    last_pos = ftell(stdin);
	}
	else
	    break;
    }

    /* read the frame number of the first "start" command */
    sscanf( strpbrk(line,"0123456789"),"%d", &frame_number);

    /* find the highest frame number in the file */
    maxnum = 0;
    while(bu_fgets(line,MAXLEN,stdin)!=NULL){
	if(!strncmp(line,"start",5)){
	    sscanf(strpbrk(line,"0123456789"),"%d",&number);
	    maxnum = (maxnum>number)?maxnum:number;
	}
    }

    length = maxnum - frame_number + 1;
    /* spread should initially be the smallest power of two larger than
     * or equal to length */
    spread = 2;
    while (spread < length)
	spread = spread<<1;

    first_frame = frame_number;
    success = 1;
    while (length--){
	number = -1;
	success = 0; /* tells whether or not any frames have been found  which have the current frame number*/
	if (incremental){
	    fseek(stdin, 0L, 0);
	} else {
	    fseek(stdin, last_pos, 0);
	}

	reserve = MAXLEN*MAXLINES;
	pbuffer[0] = '\0'; /* delete old pbuffer */

	/* inner loop: search through the entire file for frames */
	/*  which have the current frame number */
	while (!feof(stdin)){

	    /*read to next "start" command*/
	    while (bu_fgets(line,MAXLEN,stdin)!=NULL){
		if (!strncmp(line,"start",5)){
		    sscanf( strpbrk(line,"0123456789"),"%d", &number);
		    break;
		}
	    }
	    if (number==frame_number){
		if (!success){ /*first successful match*/
		    printf("%s",line);
		    if (!suppressed) printf("clean;\n");
		    success = 1;
		    last_pos = ftell(stdin);
		}
		/* print contents until next "end" */
		while (bu_fgets(line,MAXLEN,stdin)!=NULL){
		    if (!strncmp(line,"end;",4))
			break;
		    else if (strncmp(line,"clean",5))
			printf("%s",line);
		}
		/* save contents until next "start" */
		while (bu_fgets(line,MAXLEN,stdin)!=NULL){
		    if(!strncmp(line,"start",5))
			break;
		    else {
			reserve -= strlen(line);
			reserve -= 1;
			if (reserve > 0){
			    strncat(pbuffer, line, reserve + strlen(line));
			    strncat(pbuffer, "\n", reserve + 1);
			    pbuffer[MAXLEN*MAXLINES-1] = '\0';
			} else {
			    printf("ERROR: ran out of buffer space (%d characters)\n", MAXLEN*MAXLINES);
			}
		    }
		}
	    }
	}
	if (success)
	    printf("end;\n");
	/* print saved-up post-raytracing commands, if any */
	printf("%s",pbuffer);

	/* get next frame number */
	if (incremental){
	    frame_number = frame_number + 2*spread;
	    while (frame_number > maxnum){
		spread = spread>>1;
		frame_number = first_frame + spread;
	    }
	} else {
	    frame_number += 1;
	}
    }
    return( 0 );
}

#define OPT_STR "ci"

int get_args(int argc, char **argv)
{

    int c;
    suppressed = 0;

    while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
	switch(c){
	case 'c':
	    suppressed = 1;
	    break;
	case 'i':
	    incremental = 1;
	    break;
	default:
	    fprintf(stderr,"Unknown option: -%c\n",c);
	    return(0);
	}
    }
    return(1);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@add missing arg...
@
text
@d144 2
a145 2
			    strncat(pbuffer, line, reserve);
			    strncat(pbuffer, "\n", reserve);
@


14.16
log
@null-terminate strncat'd buffers for sanity sake since we don't usually check if we filled/truncated
@
text
@d145 1
a145 1
			    strncat(pbuffer, "\n");
@


14.15
log
@use the remaining length for strncat, print an error if it'd truncate.  quell level 5 flawfinder
@
text
@d144 3
a146 2
			    strncat(pbuffer,line,reserve);
			    strcat(pbuffer,"\n");
@


14.14
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d144 1
a144 1
			    strncat(pbuffer,line,MAXLEN);
d146 2
@


14.13
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d69 1
a69 1
    while (fgets(line,MAXLEN,stdin)!=NULL){
d83 1
a83 1
    while(fgets(line,MAXLEN,stdin)!=NULL){
d116 1
a116 1
	    while (fgets(line,MAXLEN,stdin)!=NULL){
d130 1
a130 1
		while (fgets(line,MAXLEN,stdin)!=NULL){
d137 1
a137 1
		while (fgets(line,MAXLEN,stdin)!=NULL){
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a38 1

a194 1

@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.10
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
@


14.8
log
@M-x indent-region
@
text
@d23 1
a23 1
 *	Combine multiple animation scripts on standard input into a 
d25 1
a25 1
 *  or in a scrambled order for incrementally increasing time 
d27 1
a27 1
 * 
d31 1
a31 1
 *  
d59 2
a60 2
    int	length,frame_number, number, success, maxnum; 
    int 	first_frame,spread,reserve; 
d196 1
a196 1
		
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d23 1
a23 1
 *	Combine multiple animation scripts on standard input into a
d25 1
a25 1
 *  or in a scrambled order for incrementally increasing time
d27 1
a27 1
 *
d31 1
a31 1
 *
d59 2
a60 2
    int	length,frame_number, number, success, maxnum;
    int 	first_frame,spread,reserve;
d196 1
a196 1

@


14.7
log
@update copyright to 2005
@
text
@d59 32
a90 6
	int	length,frame_number, number, success, maxnum; 
	int 	first_frame,spread,reserve; 
	long	last_pos;
	char	line[MAXLEN];
	char    pbuffer[MAXLEN*MAXLINES];

d92 16
a107 12
        if (!get_args(argc,argv))
		fprintf(stderr,"Get_args error\n");

	/* copy any lines preceeding the first "start" command */
	last_pos = ftell(stdin);
	while (fgets(line,MAXLEN,stdin)!=NULL){
		if (strncmp(line,"start",5)){
			printf("%s",line);
			last_pos = ftell(stdin);
		}
		else
			break;
d110 2
a111 2
	/* read the frame number of the first "start" command */
	sscanf( strpbrk(line,"0123456789"),"%d", &frame_number);
d113 9
a121 6
	/* find the highest frame number in the file */
	maxnum = 0;
	while(fgets(line,MAXLEN,stdin)!=NULL){
		if(!strncmp(line,"start",5)){
			sscanf(strpbrk(line,"0123456789"),"%d",&number);
			maxnum = (maxnum>number)?maxnum:number;
d123 7
a129 18
	}

	length = maxnum - frame_number + 1;
	/* spread should initially be the smallest power of two larger than
	 * or equal to length */
	spread = 2;
	while (spread < length)
		spread = spread<<1;

	first_frame = frame_number;
	success = 1;
	while (length--){
		number = -1;
		success = 0; /* tells whether or not any frames have been found  which have the current frame number*/
		if (incremental){
			fseek(stdin, 0L, 0);
		} else {
			fseek(stdin, last_pos, 0);
d131 6
a136 43

		reserve = MAXLEN*MAXLINES;
		pbuffer[0] = '\0'; /* delete old pbuffer */

		/* inner loop: search through the entire file for frames */
		/*  which have the current frame number */
		while (!feof(stdin)){

			/*read to next "start" command*/
			while (fgets(line,MAXLEN,stdin)!=NULL){
				if (!strncmp(line,"start",5)){
					sscanf( strpbrk(line,"0123456789"),"%d", &number);
					break;
				}
			}
			if (number==frame_number){
				if (!success){ /*first successful match*/
					printf("%s",line);
					if (!suppressed) printf("clean;\n");
					success = 1;
					last_pos = ftell(stdin);
				}
				/* print contents until next "end" */
				while (fgets(line,MAXLEN,stdin)!=NULL){
					if (!strncmp(line,"end;",4))
						break;
					else if (strncmp(line,"clean",5))
						printf("%s",line);
				}
				/* save contents until next "start" */
				while (fgets(line,MAXLEN,stdin)!=NULL){
					if(!strncmp(line,"start",5))
						break;
					else {
						reserve -= strlen(line);
						reserve -= 1;
						if (reserve > 0){
							strncat(pbuffer,line,MAXLEN);
							strcat(pbuffer,"\n");
						}
					}
				}
			}
d138 10
a147 11
		if (success)
			printf("end;\n");
		/* print saved-up post-raytracing commands, if any */
		printf("%s",pbuffer);

		/* get next frame number */
		if (incremental){
			frame_number = frame_number + 2*spread;
			while (frame_number > maxnum){
				spread = spread>>1;
				frame_number = first_frame + spread;
d149 1
a149 2
		} else {
			frame_number += 1;
d151 1
d153 17
a169 1
	return( 0 );
d177 2
a178 2
        int c;
	suppressed = 0;
d180 14
a193 14
        while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
                switch(c){
                case 'c':
                	suppressed = 1;
                        break;
                case 'i':
                	incremental = 1;
                	break;
                default:
                        fprintf(stderr,"Unknown option: -%c\n",c);
                        return(0);
                }
        }
        return(1);
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a34 2
 *  
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a36 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a35 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file anim_sort.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			A N I M _ S O R T . C
d4 18
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d186 10
@


1.2
log
@obliterate externs.h
@
text
@d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a36 1
#include "externs.h"
@

