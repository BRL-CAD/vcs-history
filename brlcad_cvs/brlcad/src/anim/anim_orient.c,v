head	14.15;
access;
symbols
	rel-7-10-4:14.13
	STABLE:14.13.0.2
	stable-branch:14.8
	rel-7-10-2:14.13
	rel-7-10-0:14.13
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.15
date	2007.11.21.20.49.05;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.19.28.05;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.42;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.12;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.02.14.02.29.35;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.30.14;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.00.54.02;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.38;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                   A N I M _ O R I E N T . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file anim_orient.c
 *	Convert between different orientation formats. The formats are:
 *  quaternion, yaw-pitch-roll, azimuth-elevation-twist, xyz angles,
 *  pre-multiplication rotation matrices, and transposed matrices (inverses).
 * 	By default, the information is assumed to represent a transformation
 *  which should be an object which initially faces the x-axis, with the
 *  z-axis going up. Alternatively, the information can be interpreted as
 *  transformations which should be applied to an object initially facing the
 *  negative z-axis, with the y-axis going up.
 *  	The conversion is done by converting each input form to a matrix,
 *  and then converting that matrix to the desired output form.
 *	Angles may be specified in radians or degrees.
 *
 *  Author -
 *	Carl J. Nuzman
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"


#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"

#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif

#define YPR		0
#define XYZ		1
#define AET		2
#define QUAT		3
#define MAT		4

#define DEGREES		0
#define RADIANS		1

#define ANIM_NORMAL          0
#define ANIM_ERROR1          1
#define ANIM_ERROR2          2

#define DTOR    M_PI/180.0
#define RTOD    180.0/M_PI

int		parse_args(int argc, char **argv);
extern void	anim_y_p_r2mat(fastf_t *, double, double, double);
extern void	anim_tran(fastf_t *);
extern void	anim_v_unpermute(fastf_t *);
extern void	anim_dirn2mat(fastf_t *, const fastf_t *, const fastf_t *);
extern void	anim_v_permute(fastf_t *);

extern int bu_optind;
extern char *bu_optarg;

int upright;
int input_mode, output_mode, length, input_units, output_units;
int input_perm, output_perm, input_inv, output_inv;

int
main(int argc, char **argv)
{
    int num_read;
    fastf_t	temp[3], temp2[3],angle[3],quat[4],matrix[16];
    void anim_zyx2mat(fastf_t *, const fastf_t *),anim_ypr2mat(fastf_t *, const fastf_t *),anim_quat2mat(fastf_t *, const fastf_t *), anim_mat_print(FILE *, const fastf_t *, int);
    int anim_mat2ypr(fastf_t *, fastf_t *),anim_mat2zyx(const fastf_t *, fastf_t *),anim_mat2quat(fastf_t *, const fastf_t *);

    if(!parse_args(argc,argv)) {
	fprintf(stderr,"Get_args error.\n");
	bu_exit(0, NULL);
    }

    /* read data */
    num_read = length;
    while (1){

	switch (input_mode) {
	case YPR:
	case XYZ:
	case AET:
	    num_read = scanf("%lf %lf %lf",angle,angle+1,angle+2);
	    /* convert to radians if in degrees */
	    if (input_units==DEGREES)  {
		VSCALE(angle,angle,DTOR);
	    }
	    break;
	case QUAT:
	    num_read = scanf("%lf %lf %lf %lf", quat,quat+1,quat+2,quat+3);
	    break;
	case MAT:
	    num_read = 0;
	    num_read += scanf("%lf %lf %lf %lf",matrix,matrix+1,matrix+2,matrix+3);
	    num_read += scanf("%lf %lf %lf %lf",matrix+4,matrix+5,matrix+6,matrix+7);
	    num_read += scanf("%lf %lf %lf %lf",matrix+8,matrix+9,matrix+10,matrix+11);
	    num_read += scanf("%lf %lf %lf %lf",matrix+12,matrix+13,matrix+14,matrix+15);
	    break;
	}

	if (num_read < length)
	    break;

	/* convert to (object) matrix form */
	switch (input_mode) {
	case YPR:
	    anim_ypr2mat(matrix,angle);
	    break;
	case AET:
	    anim_y_p_r2mat(matrix, angle[0]+M_PI, -angle[1],-angle[2]);
	    break;
	case XYZ:
	    anim_zyx2mat(matrix,angle);
	    break;
	case QUAT:
	    anim_quat2mat(matrix,quat);
	    break;
	}

	if (input_inv){
	    anim_tran(matrix);
	}
	if (input_perm){
	    anim_v_unpermute(matrix);
	}
	/* end of input conversion, begin output conversion*/

	if (upright) { /* force right-side up */
	    VSET(temp, matrix[0], matrix[4], matrix[8]);
	    VSET(temp2, matrix[1], matrix[5], matrix[9]);
	    anim_dirn2mat(matrix,temp,temp2);
	}
	if (output_perm){
	    anim_v_permute(matrix);
	}
	if (output_inv){
	    anim_tran(matrix);
	}

	/* convert from matrix form and print result*/
	switch (output_mode) {
	case YPR:
	    anim_mat2ypr(angle,matrix);
	    if (output_units==DEGREES)
		VSCALE(angle,angle,RTOD);
	    printf("%.12g\t%.12g\t%.12g\n",angle[0],angle[1],angle[2]);
	    break;
	case AET:
	    anim_mat2ypr(angle,matrix);
	    if (angle[0] > 0.0) {
		angle[0] -= M_PI;
	    } else {
		angle[0] += M_PI;
	    }
	    angle[1] = -angle[1];
	    angle[2] = -angle[2];
	    if (output_units==DEGREES)
		VSCALE(angle,angle,RTOD);
	    printf("%.12g\t%.12g\t%.12g\n",angle[0],angle[1],angle[2]);
	    break;
	case XYZ:
	    anim_mat2zyx(angle,matrix);
	    if (output_units==DEGREES)
		VSCALE(angle,angle,RTOD);
	    printf("%.12g\t%.12g\t%.12g\n",angle[0],angle[1],angle[2]);
	    break;
	case QUAT:
	    anim_mat2quat(quat,matrix);
	    printf("%.12g\t%.12g\t%.12g\t%.12g\n",quat[0],quat[1],quat[2],quat[3]);
	    break;
	case MAT:
	    anim_mat_print(stdout,matrix,0);
	    printf("\n");
	}

    }
    return( 0 );
}

int parse_args(int argc, char **argv)
{
    int c;
    char *cp;

    /* defaults */
    upright = 0;
    input_mode = QUAT;
    output_mode = QUAT;
    input_units = DEGREES;
    output_units = DEGREES;
    input_perm = 0;
    output_perm = 0;
    input_inv = 0;
    output_inv = 0;
    length = 4;

    if (argc > 2) { /*read output mode */
	cp = argv[2];
	while ( (c=*cp++) ) {
	    switch (c) {
	    case 'q':
		output_mode = QUAT;
		break;
	    case 'y':
		output_mode = YPR;
		break;
	    case 'a':
		output_mode = AET;
		break;
	    case 'z':
		output_mode = XYZ;
		break;
	    case 'm':
		output_mode = MAT;
		break;
	    case 'i':
		output_inv = 1;
		break;
	    case 'r':
		output_units = RADIANS;
		break;
	    case 'v':
		output_perm = 1;
		break;
	    case 'u':
		upright = 1;
		break;
	    default:
		fprintf(stderr,"anim_orient: unknown output option: %c\n",c);
		return(0);
	    }
	}
    }
    if (argc > 1) { /*read input mode */
	cp = argv[1];
	while ( (c=*cp++) ) {
	    switch (c) {
	    case 'q':
		input_mode = QUAT;
		length = 4;
		break;
	    case 'y':
		input_mode = YPR;
		length = 3;
		break;
	    case 'a':
		input_mode = AET;
		length = 3;
		break;
	    case 'z':
		input_mode = XYZ;
		length = 3;
		break;
	    case 'm':
		input_mode = MAT;
		length = 16;
		break;
	    case 'i':
		input_inv = 1;
		break;
	    case 'r':
		input_units = RADIANS;
		break;
	    case 'v':
		input_perm = 1;
		break;
	    default:
		fprintf(stderr,"anim_orient: unknown input option: %c\n",c);
		return(0);
	    }
	}
    }
    return(1);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@exit->bu_exit where applicable
@
text
@d96 1
a96 1
	bu_exit(0, "");
@


14.13
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d96 1
a96 1
	exit(0);
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d79 2
a80 2
extern int optind;
extern char *optarg;
@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.10
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
@


14.8
log
@M-x indent-region
@
text
@d24 1
a24 1
 *  quaternion, yaw-pitch-roll, azimuth-elevation-twist, xyz angles, 
d28 1
a28 1
 *  z-axis going up. Alternatively, the information can be interpreted as 
d31 1
a31 1
 *  	The conversion is done by converting each input form to a matrix, 
d37 1
a37 1
 *  
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d24 1
a24 1
 *  quaternion, yaw-pitch-roll, azimuth-elevation-twist, xyz angles,
d28 1
a28 1
 *  z-axis going up. Alternatively, the information can be interpreted as
d31 1
a31 1
 *  	The conversion is done by converting each input form to a matrix,
d37 1
a37 1
 *
@


14.7
log
@update copyright to 2005
@
text
@d90 62
a151 110
	int num_read;
	fastf_t	temp[3], temp2[3],angle[3],quat[4],matrix[16];
	void anim_zyx2mat(fastf_t *, const fastf_t *),anim_ypr2mat(fastf_t *, const fastf_t *),anim_quat2mat(fastf_t *, const fastf_t *), anim_mat_print(FILE *, const fastf_t *, int);
	int anim_mat2ypr(fastf_t *, fastf_t *),anim_mat2zyx(const fastf_t *, fastf_t *),anim_mat2quat(fastf_t *, const fastf_t *);

	if(!parse_args(argc,argv)) {
		fprintf(stderr,"Get_args error.\n");
		exit(0);
	}

	/* read data */
	num_read = length;
	while (1){

		switch (input_mode) {
		case YPR:
		case XYZ:
		case AET:
			num_read = scanf("%lf %lf %lf",angle,angle+1,angle+2);
			/* convert to radians if in degrees */
		        if (input_units==DEGREES)  {
		        	VSCALE(angle,angle,DTOR);
		        }
			break;
		case QUAT:
			num_read = scanf("%lf %lf %lf %lf", quat,quat+1,quat+2,quat+3);
			break;
		case MAT:
			num_read = 0;
			num_read += scanf("%lf %lf %lf %lf",matrix,matrix+1,matrix+2,matrix+3);
			num_read += scanf("%lf %lf %lf %lf",matrix+4,matrix+5,matrix+6,matrix+7);
			num_read += scanf("%lf %lf %lf %lf",matrix+8,matrix+9,matrix+10,matrix+11);
			num_read += scanf("%lf %lf %lf %lf",matrix+12,matrix+13,matrix+14,matrix+15);
			break;
		}

		if (num_read < length)
			break;

		/* convert to (object) matrix form */
		switch (input_mode) {
		case YPR:
			anim_ypr2mat(matrix,angle);
			break;
		case AET:
			anim_y_p_r2mat(matrix, angle[0]+M_PI, -angle[1],-angle[2]);
			break;
		case XYZ:
			anim_zyx2mat(matrix,angle);
			break;
		case QUAT:
			anim_quat2mat(matrix,quat);
			break;
		}

		if (input_inv){
			anim_tran(matrix);
		}
		if (input_perm){
			anim_v_unpermute(matrix);
		}
		/* end of input conversion, begin output conversion*/

		if (upright) { /* force right-side up */
			VSET(temp, matrix[0], matrix[4], matrix[8]);
			VSET(temp2, matrix[1], matrix[5], matrix[9]);
			anim_dirn2mat(matrix,temp,temp2);
		}
		if (output_perm){
			anim_v_permute(matrix);
		}
		if (output_inv){
			anim_tran(matrix);
		}

		/* convert from matrix form and print result*/
		switch (output_mode) {
		case YPR:
			anim_mat2ypr(angle,matrix);
		        if (output_units==DEGREES)
		                VSCALE(angle,angle,RTOD);
			printf("%.12g\t%.12g\t%.12g\n",angle[0],angle[1],angle[2]);
			break;
		case AET:
			anim_mat2ypr(angle,matrix);
			if (angle[0] > 0.0) {
				angle[0] -= M_PI;
			} else {
				angle[0] += M_PI;
			}
			angle[1] = -angle[1];
			angle[2] = -angle[2];
			if (output_units==DEGREES)
				VSCALE(angle,angle,RTOD);
			printf("%.12g\t%.12g\t%.12g\n",angle[0],angle[1],angle[2]);
			break;
		case XYZ:
			anim_mat2zyx(angle,matrix);
		        if (output_units==DEGREES)
		                VSCALE(angle,angle,RTOD);
			printf("%.12g\t%.12g\t%.12g\n",angle[0],angle[1],angle[2]);
			break;
		case QUAT:
			anim_mat2quat(quat,matrix);
			printf("%.12g\t%.12g\t%.12g\t%.12g\n",quat[0],quat[1],quat[2],quat[3]);
			break;
		case MAT:
			anim_mat_print(stdout,matrix,0);
			printf("\n");
		}
d153 4
d158 45
a202 1
	return( 0 );
d207 2
a208 2
	int c;
	char *cp;
d210 86
a295 87
	/* defaults */
	upright = 0;
	input_mode = QUAT;
	output_mode = QUAT;
	input_units = DEGREES;
	output_units = DEGREES;
	input_perm = 0;
	output_perm = 0;
	input_inv = 0;
	output_inv = 0;
	length = 4;

	if (argc > 2) { /*read output mode */
		cp = argv[2];
		while ( (c=*cp++) ) {
			switch (c) {
			case 'q':
				output_mode = QUAT;
				break;
			case 'y':
				output_mode = YPR;
				break;
			case 'a':
				output_mode = AET;
				break;
			case 'z':
				output_mode = XYZ;
				break;
			case 'm':
				output_mode = MAT;
				break;
			case 'i':
				output_inv = 1;
				break;
			case 'r':
				output_units = RADIANS;
				break;
			case 'v':
				output_perm = 1;
				break;
			case 'u':
				upright = 1;
				break;
			default:
				fprintf(stderr,"anim_orient: unknown output option: %c\n",c);
				return(0);
			}
		}
	}
	if (argc > 1) { /*read input mode */
		cp = argv[1];
		while ( (c=*cp++) ) {
			switch (c) {
			case 'q':
				input_mode = QUAT;
				length = 4;
				break;
			case 'y':
				input_mode = YPR;
				length = 3;
				break;
			case 'a':
				input_mode = AET;
				length = 3;
				break;
			case 'z':
				input_mode = XYZ;
				length = 3;
				break;
			case 'm':
				input_mode = MAT;
				length = 16;
				break;
			case 'i':
				input_inv = 1;
				break;
			case 'r':
				input_units = RADIANS;
				break;
			case 'v':
				input_perm = 1;
				break;
			default:
				fprintf(stderr,"anim_orient: unknown input option: %c\n",c);
				return(0);
			}
		}
d297 2
a298 1
	return(1);
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a40 2
 *  
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a42 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a41 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file anim_orient.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			A N I M _ O R I E N T . C
d4 18
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d289 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d32 1
a32 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

