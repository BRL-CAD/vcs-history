head	14.12;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.8
	rel-7-10-2:14.12
	rel-7-10-0:14.12
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.12
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.42;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.12;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.02.14.02.29.35;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.30.14;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.00.54.02;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.40;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@/*                     A N I M _ T U R N . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file anim_turn.c
 *	Animate front-wheel steered vehicles.
 *
 *  This is a filter which operates on animation tables. Given an
 *  animation table for the position of the front axle, anim_turn produces
 *  an animation table for position and orientation. Options provide for
 *  animating the wheels and/or steering wheel.
 *
 *  Author -
 *	Carl J. Nuzman
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"


#include <math.h>
#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "bu.h"
#include "anim.h"

#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif

int		get_args(int argc, char **argv);
extern void	anim_y_p_r2mat(fastf_t *, double, double, double);
extern void	anim_add_trans(fastf_t *, const fastf_t *, const fastf_t *);

extern int bu_optind;
extern char *bu_optarg;

int print_int = 1;
int angle_set = 0;
int turn_wheels = 0;
fastf_t length, angle, radius;
fastf_t factor = 1.0;

int
main(int argc, char **argv)
{
    int count;
    fastf_t val, time, roll_ang, yaw,sign;
    vect_t v, point, front, back, zero, temp1, temp2;
    mat_t m_from_world, m_to_world;
    double bn_atan2(double, double);

    /* initialize variables */
    VSETALL(zero, 0.0);
    VSETALL( v , 0.0 );
    VSETALL( point, 0.0 );
    VSETALL( front, 0.0 );
    VSETALL( back, 0.0 );
    VSETALL( temp1, 0.0 );
    VSETALL( temp2, 0.0 );
    for( count=0 ; count<ELEMENTS_PER_MAT ; count++ )
	m_from_world[count]=m_to_world[count]=0.0;
    length = angle = radius = roll_ang = 0.0;

    if (!get_args(argc,argv))
	fprintf(stderr,"ascript: Get_args error");

    if (!angle_set) { /* set angle if not yet done */
	scanf("%*f%*[^-0123456789]");
	VSCAN(temp1);
	scanf("%*f%*[^-0123456789]");
	VSCAN(temp2);
	angle = bn_atan2( (temp2[1]-temp1[1]),(temp2[0]-temp1[0]) );
	rewind(stdin);
    }
    count = 0;
    while (1) {
	/* read one line of table */
	val = scanf("%lf%*[^-0123456789]",&time); /*read time,ignore garbage*/
	val = scanf("%lf %lf %lf", point, point+1, point +2);
	if (val < 3) {
	    break;
	}

	/*update to and from matrices */

	if (count) { /* not first time through */
	    /* calculate matrices corrsponding to last position*/
	    anim_y_p_r2mat(m_to_world,angle,0.0,0.0);
	    anim_add_trans(m_to_world,front,zero);
	    anim_y_p_r2mat(m_from_world,-angle,0.0,0.0);
	    VREVERSE(temp1,front);
	    anim_add_trans(m_from_world,zero,temp1);

	    /* calculate new position for front and back axles */
	    /* front goes to the point, back slides along objects*/
	    /* current front to back axis */
	    MAT4X3PNT(v,m_from_world,point);/* put point in vehicle coordinates*/
	    if (v[1] > length) {
		fprintf(stderr,"anim_turn: Distance between positions greater than length of vehicle - ABORTING\n");
		break;
	    }
	    temp2[0] = v[0] - sqrt(length*length - v[1]*v[1]); /*calculate back*/
	    temp2[1] = temp2[2] = 0.0;
	    MAT4X3PNT(back,m_to_world,temp2);/*put "back" in world coordinates*/
	    VMOVE(front,point);

	    /*calculate new angle of vehicle*/
	    VSUB2(temp1,front,back);
	    angle = bn_atan2(temp1[1],temp1[0]);
	}
	else { /*first time through */
	    /*angle is already determined*/
	    VMOVE(front, point);
	}

	/*calculate turn angles and print table*/

	if (turn_wheels){
	    if (v[0] >= 0)
		sign = 1.0;
	    else
		sign = -1.0;
	    yaw = bn_atan2(sign*v[1],sign*v[0]);
	    if (radius > VDIVIDE_TOL)
		roll_ang -= sign * MAGNITUDE(v) / radius;

	    if (!(count%print_int))
		printf("%.10g %.10g %.10g 0.0\n",time,factor*RTOD*yaw,RTOD*roll_ang);
	}
	else { /* print position and orientation of vehicle */
	    if (!(count%print_int))
		printf("%.10g %.10g %.10g %.10g %.10g 0.0 0.0\n",time,front[0],front[1],front[2], RTOD * angle);
	}
	count++;
    }
    return( 0 );
}

#define OPT_STR "r:l:a:f:p:"

int get_args(int argc, char **argv)
{
    int c;
    while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
	switch(c){
	case 'l':
	    sscanf(bu_optarg,"%lf",&length);
	    break;
	case 'a':
	    sscanf(bu_optarg,"%lf",&angle);
	    angle *= DTOR; /* degrees to radians */
	    angle_set = 1;
	    break;
	case 'r':
	    sscanf(bu_optarg,"%lf",&radius);
	    turn_wheels = 1;
	    break;
	case 'f':
	    turn_wheels = 1;
	    sscanf(bu_optarg,"%lf",&factor);
	    break;
	case 'p':
	    sscanf(bu_optarg,"%d",&print_int);
	    break;
	default:
	    fprintf(stderr,"Unknown option: -%c\n",c);
	    return(0);
	}
    }
    return(1);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.10
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
@


14.8
log
@M-x indent-region
@
text
@d29 1
a29 1
 * 
d32 1
a32 1
 *  
d115 1
a115 1
		
d139 2
a140 2
		
	if (turn_wheels){ 
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d32 1
a32 1
 *
d115 1
a115 1

d139 2
a140 2

	if (turn_wheels){
@


14.7
log
@update copyright to 2005
@
text
@d68 47
a114 47
	int count;
	fastf_t val, time, roll_ang, yaw,sign;
	vect_t v, point, front, back, zero, temp1, temp2;
	mat_t m_from_world, m_to_world;
	double bn_atan2(double, double);

	/* initialize variables */
	VSETALL(zero, 0.0);
	VSETALL( v , 0.0 );
	VSETALL( point, 0.0 );
	VSETALL( front, 0.0 );
	VSETALL( back, 0.0 );
	VSETALL( temp1, 0.0 );
	VSETALL( temp2, 0.0 );
	for( count=0 ; count<ELEMENTS_PER_MAT ; count++ )
		m_from_world[count]=m_to_world[count]=0.0;
	length = angle = radius = roll_ang = 0.0;

	if (!get_args(argc,argv))
		fprintf(stderr,"ascript: Get_args error");

	if (!angle_set) { /* set angle if not yet done */
		scanf("%*f%*[^-0123456789]");
		VSCAN(temp1);
		scanf("%*f%*[^-0123456789]");
		VSCAN(temp2);
		angle = bn_atan2( (temp2[1]-temp1[1]),(temp2[0]-temp1[0]) );
		rewind(stdin);
	}
	count = 0;
	while (1) {
		/* read one line of table */
		val = scanf("%lf%*[^-0123456789]",&time); /*read time,ignore garbage*/
		val = scanf("%lf %lf %lf", point, point+1, point +2);
		if (val < 3) {
			break;
		}

		/*update to and from matrices */

		if (count) { /* not first time through */
			/* calculate matrices corrsponding to last position*/
			anim_y_p_r2mat(m_to_world,angle,0.0,0.0);
			anim_add_trans(m_to_world,front,zero);
			anim_y_p_r2mat(m_from_world,-angle,0.0,0.0);
			VREVERSE(temp1,front);
			anim_add_trans(m_from_world,zero,temp1);
d116 21
a136 21
			/* calculate new position for front and back axles */
			/* front goes to the point, back slides along objects*/
			/* current front to back axis */
			MAT4X3PNT(v,m_from_world,point);/* put point in vehicle coordinates*/
			if (v[1] > length) {
				fprintf(stderr,"anim_turn: Distance between positions greater than length of vehicle - ABORTING\n");
				break;
			}
			temp2[0] = v[0] - sqrt(length*length - v[1]*v[1]); /*calculate back*/
			temp2[1] = temp2[2] = 0.0;
			MAT4X3PNT(back,m_to_world,temp2);/*put "back" in world coordinates*/
			VMOVE(front,point);

			/*calculate new angle of vehicle*/
			VSUB2(temp1,front,back);
			angle = bn_atan2(temp1[1],temp1[0]);
		}
		else { /*first time through */
			/*angle is already determined*/
			VMOVE(front, point);
		}
d138 1
a138 1
		/*calculate turn angles and print table*/
d140 15
a154 17
		if (turn_wheels){ 
			if (v[0] >= 0)
				sign = 1.0;
			else
				sign = -1.0;
			yaw = bn_atan2(sign*v[1],sign*v[0]);
			if (radius > VDIVIDE_TOL)
				roll_ang -= sign * MAGNITUDE(v) / radius;

			if (!(count%print_int))
				printf("%.10g %.10g %.10g 0.0\n",time,factor*RTOD*yaw,RTOD*roll_ang);
		}
		else { /* print position and orientation of vehicle */
			if (!(count%print_int))
				printf("%.10g %.10g %.10g %.10g %.10g 0.0 0.0\n",time,front[0],front[1],front[2], RTOD * angle);
		}
		count++;
d156 3
a158 1
	return( 0 );
d165 25
a189 26
	int c;
	while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
		switch(c){
		case 'l':
			sscanf(bu_optarg,"%lf",&length);
			break;
		case 'a':
			sscanf(bu_optarg,"%lf",&angle);
			angle *= DTOR; /* degrees to radians */
			angle_set = 1;
			break;
		case 'r':
			sscanf(bu_optarg,"%lf",&radius);
			turn_wheels = 1;
			break;
		case 'f':
			turn_wheels = 1;
			sscanf(bu_optarg,"%lf",&factor);
			break;
		case 'p':
			sscanf(bu_optarg,"%d",&print_int);
			break;
		default:
			fprintf(stderr,"Unknown option: -%c\n",c);
			return(0);
		}
d191 2
a192 1
	return(1);
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a35 2
 *  
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a37 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a36 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file anim_turn.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			A N I M _ T U R N . C
d4 18
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d184 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

