head	14.17;
access;
symbols
	rel-7-10-4:14.13
	STABLE:14.13.0.2
	stable-branch:14.8
	rel-7-10-2:14.13
	rel-7-10-0:14.13
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.17
date	2007.11.21.20.49.05;	author erikgreenwald;	state Exp;
branches;
next	14.16;

14.16
date	2007.11.21.19.28.05;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.10.14.08.01.46;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.09.15.16.23.03;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.42;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.29.00.51.53;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.12;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.02.14.02.29.35;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.30.14;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.00.54.02;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.55;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.40;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                  C H A N _ P E R M U T E . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file chan_permute.c
 *	This program mixes, matches, and merges files organized in
 *  channels or columns.
 *	It's nothing cut and paste can't do, but sometimes it's nice to
 *  be able to do it in one step, especially when working with animation
 *  tables.
 *Usage: channel -i infile1 id id id ... [-i infile2 ...] -o outfile1 id id ...
 *		[-o outfile2 ...]
 *where infiles are files to be read from, outfiles are files to be written
 *to, and each id is a small positive integer identifying a channel. All of the
 *input id's should be distinct integers, or the results are not guaranteed.
 *
 *  Author -
 *	Carl J. Nuzman
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"


#define MAXLEN 40

typedef char Word[MAXLEN];

struct unit {
    FILE *file;
    int channels;
    short *list;
    unsigned i_o;	/*i=1 o=0*/
};


char ihead[] = "-i";
char ohead[] = "-o";

int
main(int argc, char **argv)
{
    int i,j, maxlength,num_done;
    int icount, ocount;
    struct unit *x, *y;
    Word *arrayd;

    i=j=icount = ocount = maxlength = 0;
    for(i=1;i<argc;i++){
	if( !strncmp(argv[i],ihead,2) ){
	    j=0;
	    icount++;
	}
	else if( !strncmp(argv[i],ohead,2) ){
	    j=0;
	    ocount++;
	}
	else
	    maxlength = (++j>maxlength) ? j : maxlength;
    }

    y = (struct unit *) bu_calloc(icount+ocount,sizeof(struct unit), "struct unit");
    x = y - 1;
    for(i=1;i<argc;i++){
	if( !strncmp(argv[i],"-",1) ){
	    j=0;
	    x++;
	    x->list = (short *) bu_calloc(maxlength,sizeof(short), "short array");
	    if (argv[i][1] == 'i'){
		i++;
		(x)->i_o = 1;
		if ( ! strcmp(argv[i],"stdin") )
		    x->file = stdin;
		else if ( !(x->file = fopen(argv[i],"r")) )
		    fprintf(stderr,"Channel: can't open %s\n",argv[i]);
	    }
	    else if (argv[i][1] == 'o'){
		i++;
		(x)->i_o = 0;
		if ( ! strcmp(argv[i],"stdout") )
		    x->file = stdout;
		else if ( !(x->file = fopen(argv[i],"w")) )
		    fprintf(stderr,"Channel: can't write to %s\n",argv[i]);
	    }
	    else{
		fprintf(stderr,"Illegal option %c\n",argv[i][1]);
		bu_exit(-1, NULL);
	    }
	}
	else{
	    sscanf(argv[i],"%hd",x->list+(j++));
	    x->channels++;
	}
    }
    arrayd = (Word *) bu_calloc(argc,sizeof(Word), "Word"); /*may use more memory than absolutely necessary*/
    num_done = 0;
    while(num_done < icount ){ /* go until all in files are done */
	num_done = 0;
	for (x=y;x<y+ocount+icount;x++){ /* do one line */
	    if(num_done >= icount)
		;/*chill - all in files done */
	    else if (x->i_o == 1){
		if(feof(x->file))
		    num_done += 1;
		else
		    for(j=0;j<x->channels;j++)
			fscanf(x->file, "%40s ", arrayd[x->list[j]]);
	    }
	    else if (x->i_o == 0){
		for(j=0;j<x->channels;j++)
		    fprintf(x->file,"%s\t",arrayd[x->list[j]]);
		fprintf(x->file,"\n");
	    }
	}
    }

    /* release memory */
    bu_free(arrayd, "Word");
    for (x=y;x<y+ocount+icount;x++){
	bu_free(x->list, "short array");
    }
    bu_free(y, "struct unit");

    return 0;
}

int max(int *m, int n) /*return greatest of n integers, unless one is greater than n*/

{
    int i,j;
    j = 0;
    for (i=0;i<n;i++){
	j = (m[i]>j) ? m[i] : j;
    }
    return( (j>n) ? 0 : j );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@exit->bu_exit where applicable
@
text
@d115 1
a115 1
		bu_exit(-1, "");
@


14.15
log
@take care of a slew of level 4 flawfinder issues related to adding length parameters to string and i/o functions
@
text
@d115 1
a115 1
		exit(-1);
@


14.14
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d135 1
a135 1
			fscanf(x->file,"%s ",arrayd[x->list[j]]);
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a42 1
#include <unistd.h>
d44 3
a46 4
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.11
log
@more libbu memory management and header cleanup
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
@


14.10
log
@update copyright to 2006
@
text
@d43 3
d47 1
a47 1
#include <string.h>
d49 1
a49 1
#include <strings.h>
d52 3
a54 3
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
d93 1
a93 1
    y = (struct unit *) calloc(icount+ocount,sizeof(struct unit));
d99 1
a99 1
	    x->list = (short *) calloc(maxlength,sizeof(short));
d126 1
a126 1
    arrayd = (Word *) calloc(argc,sizeof(Word));/*may use more memory than absolutely necessary*/
d147 3
a149 1
    free(arrayd);
d151 1
a151 1
	free(x->list);
d153 3
a155 2
    free(y);
    exit(0);
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
@


14.8
log
@M-x indent-region
@
text
@d32 2
a33 2
 *input id's should be distinct integers, or the results are not guaranteed. 
 * 
d36 1
a36 1
 *  
d75 2
a76 2
	
    i=j=icount = ocount = maxlength = 0;	
d89 1
a89 1
	
d133 1
a133 1
		else 
d153 1
a153 1
          
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 2
a33 2
 *input id's should be distinct integers, or the results are not guaranteed.
 *
d36 1
a36 1
 *
d75 2
a76 2

    i=j=icount = ocount = maxlength = 0;
d89 1
a89 1

d133 1
a133 1
		else
d153 1
a153 1

@


14.7
log
@update copyright to 2005
@
text
@d58 4
a61 4
FILE *file;
int channels;
short *list;
unsigned i_o;	/*i=1 o=0*/
d71 4
a74 4
	int i,j, maxlength,num_done;
	int icount, ocount;
	struct unit *x, *y;
	Word *arrayd;
d76 5
a80 12
	i=j=icount = ocount = maxlength = 0;	
	for(i=1;i<argc;i++){
		if( !strncmp(argv[i],ihead,2) ){
			j=0;
			icount++;
		}
		else if( !strncmp(argv[i],ohead,2) ){
			j=0;
			ocount++;
		}
		else
			maxlength = (++j>maxlength) ? j : maxlength;
d82 7
d90 31
a120 32
	y = (struct unit *) calloc(icount+ocount,sizeof(struct unit));
	x = y - 1;
	for(i=1;i<argc;i++){
		if( !strncmp(argv[i],"-",1) ){
			j=0;
			x++;
			x->list = (short *) calloc(maxlength,sizeof(short));
			if (argv[i][1] == 'i'){
				i++;
				(x)->i_o = 1;
				if ( ! strcmp(argv[i],"stdin") )
					x->file = stdin;
				else if ( !(x->file = fopen(argv[i],"r")) )
					fprintf(stderr,"Channel: can't open %s\n",argv[i]);
			}
			else if (argv[i][1] == 'o'){
				i++;
				(x)->i_o = 0;
				if ( ! strcmp(argv[i],"stdout") )
					x->file = stdout;
				else if ( !(x->file = fopen(argv[i],"w")) )
					fprintf(stderr,"Channel: can't write to %s\n",argv[i]);
			}
			else{
				fprintf(stderr,"Illegal option %c\n",argv[i][1]);
				exit(-1);
			}
		}
		else{
			sscanf(argv[i],"%hd",x->list+(j++));
			x->channels++;
		}
d122 4
a125 1
	arrayd = (Word *) calloc(argc,sizeof(Word));/*may use more memory than absolutely necessary*/
d127 15
a141 18
	while(num_done < icount ){ /* go until all in files are done */
		num_done = 0;
		for (x=y;x<y+ocount+icount;x++){ /* do one line */
			if(num_done >= icount)
				;/*chill - all in files done */
			else if (x->i_o == 1){
				if(feof(x->file))
					num_done += 1;
				else 
				for(j=0;j<x->channels;j++)
					fscanf(x->file,"%s ",arrayd[x->list[j]]);
			}
			else if (x->i_o == 0){
				for(j=0;j<x->channels;j++)
					fprintf(x->file,"%s\t",arrayd[x->list[j]]);
				fprintf(x->file,"\n");
			}
		}
d143 7
a149 6
	free(arrayd);
	for (x=y;x<y+ocount+icount;x++){
		free(x->list);
	}
	free(y);
	exit(0);
d155 6
a160 6
	int i,j;
	j = 0;
	for (i=0;i<n;i++){
		j = (m[i]>j) ? m[i] : j;
	}
	return( (j>n) ? 0 : j );
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a39 2
 *  
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a41 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a40 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file chan_permute.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			C H A N _ P E R M U T E . C
d4 18
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d151 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d32 1
a32 3


#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d30 1
a30 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

