head	14.13;
access;
symbols
	rel-7-10-4:14.13
	STABLE:14.13.0.2
	stable-branch:14.8
	rel-7-10-2:14.13
	rel-7-10-0:14.13
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.13
date	2007.01.27.01.41.31;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.42;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.12;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.02.14.02.29.35;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.30.13;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.00.54.02;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.37;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@/*                  A N I M _ C A S C A D E . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file anim_cascade.c
 *  Purpose: Given position and orientation of main frame of reference,
 * along with the position and orientation of another frame with respect
 * to the main frame, give the absolute orientation and position of the
 * second frame.
 *	For example, given the position and orientation of a tank, and of the
 * turret relative to the tank, you can get the absolute position and
 * orientation of the turret at each time.
 * 	Or, optionally, given position and orientation of main frame of
 * reference, and the absolute position and orientation of another frame,
 * find the position and orientation of the second frame in terms of the main
 * frame of reference. (-i option).
 *
 * Usage:
 *	anim_cascade main.table < relative.table > absolute.table
 *
 * The format of the tables is:
 *  time x y z yaw pitch roll
 * unless specified otherwise by options.
 *
 *  Author -
 *	Carl J. Nuzman
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"


#include <math.h>
#include <stdio.h>

#include "machine.h"
#include "vmath.h"
#include "bu.h"
#include "bn.h"
#include "anim.h"


#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif

#ifndef M_PI
#define RTOD	180.000/M_PI
#endif

#define	CASCADE_A	0
#define CASCADE_R	1
#define CASCADE_F	2

int get_args(int argc, char **argv);

extern void	anim_dy_p_r2mat(fastf_t *, double, double, double);
extern void	anim_tran(fastf_t *);
extern int	anim_mat2ypr(fastf_t *, fastf_t *);

extern int bu_optind;
extern char *bu_optarg;

vect_t fcenter, fypr, rcenter, rypr, acenter, aypr;
int cmd_fcen, cmd_fypr, cmd_rcen, cmd_rypr, cmd_acen, cmd_aypr;
int output_mode, read_time, print_time;

int
main (int argc, char **argv)
{
    int val;
    fastf_t time, yaw1, pitch1, roll1, yaw2, pitch2, roll2;
    vect_t cen1, cen2, cen_ans, ang_ans, rad_ang_ans, rotated;
    mat_t m_rot1, m_rot2, m_ans;
    int one_time, read_cen1, read_cen2, read_rot1, read_rot2;

    read_cen1 = read_cen2 = read_rot1 = read_rot2 = 1;

    if (!get_args(argc,argv))
	fprintf(stderr,"anim_cascade: Argument error.");

    switch (output_mode) {
    case CASCADE_A:
	if (cmd_fcen) {
	    VMOVE(cen1, fcenter);
	    read_cen1 = 0;
	}
	if (cmd_rcen) {
	    VMOVE(cen2, rcenter);
	    read_cen2 = 0;
	}
	if (cmd_fypr){
	    anim_dy_p_r2mat(m_rot1, fypr[0], fypr[1], fypr[2]);
	    read_rot1 = 0;
	}
	if (cmd_rypr){
	    anim_dy_p_r2mat(m_rot2, rypr[0], rypr[1], rypr[2]);
	    read_rot2 = 0;
	}
	break;
    case CASCADE_R:
	if (cmd_fcen) {
	    VMOVE(cen1, fcenter);
	    read_cen1 = 0;
	}
	if (cmd_acen) {
	    VMOVE(cen2, acenter);
	    read_cen2 = 0;
	}
	if (cmd_fypr){
	    anim_dy_p_r2mat(m_rot1, fypr[0], fypr[1], fypr[2]);
	    read_rot1 = 0;
	}
	if (cmd_aypr){
	    anim_dy_p_r2mat(m_rot2, aypr[0], aypr[1], aypr[2]);
	    read_rot2 = 0;
	}
	break;
    case CASCADE_F:
	if (cmd_acen) {
	    VMOVE(cen1, acenter);
	    read_cen1 = 0;
	}
	if (cmd_rcen) {
	    VMOVE(cen2, rcenter);
	    read_cen2 = 0;
	}
	if (cmd_aypr){
	    anim_dy_p_r2mat(m_rot1, aypr[0], aypr[1], aypr[2]);
	    read_rot1 = 0;
	}
	if (cmd_rypr){
	    anim_dy_p_r2mat(m_rot2, rypr[0], rypr[1], rypr[2]);
	    read_rot2 = 0;
	}
	break;
    default:
	break;
    }


    one_time = (!(read_cen1||read_cen2||read_rot1||read_rot2));
    read_time = one_time ? 0 : print_time;
    time = 0.0;

    val = 3;
    while(1){
	if (read_time) {
	    val=scanf("%lf",&time);
	    if (val < 1) break;
	}
	if (read_cen1)
	    val =scanf("%lf %lf %lf",cen1, cen1+1, cen1+2);
	if (read_rot1) {
	    val=scanf("%lf %lf %lf", &yaw1, &pitch1, &roll1);
	    anim_dy_p_r2mat(m_rot1, yaw1, pitch1, roll1);
	}
	if (read_cen2) {
	    val=scanf("%lf %lf %lf", cen2, cen2+1,cen2+2);
	}
	if (read_rot2) {
	    val=scanf("%lf %lf %lf", &yaw2, &pitch2, &roll2);
	    anim_dy_p_r2mat(m_rot2, yaw2, pitch2, roll2);
	}
	if (val<3) break;

	if (output_mode==CASCADE_R) {
	    anim_tran(m_rot1);
	    VSUB2(rotated,cen2,cen1);
	    MAT4X3PNT(cen_ans, m_rot1, rotated);
	    bn_mat_mul(m_ans, m_rot1, m_rot2);
	} else if (output_mode==CASCADE_F) {
	    anim_tran(m_rot2);
	    bn_mat_mul(m_ans, m_rot1, m_rot2);
	    MAT4X3PNT(rotated, m_ans, cen2);
	    VSUB2(cen_ans, cen1, rotated);
	} else {
	    MAT4X3PNT(rotated, m_rot1, cen2);
	    VADD2(cen_ans, rotated, cen1);
	    bn_mat_mul(m_ans, m_rot1, m_rot2);
	}
	anim_mat2ypr(rad_ang_ans, m_ans);
	VSCALE(ang_ans, rad_ang_ans, RTOD);

	if (print_time){
	    printf("%g",time);
	}
	printf("\t%.12g\t%.12g\t%.12g", cen_ans[0], cen_ans[1], cen_ans[2]);
	printf("\t%.12g\t%.12g\t%.12g", ang_ans[0], ang_ans[1], ang_ans[2]);
	printf("\n");

	if (one_time) break;
    }
    return( 0 );
}

#define OPT_STR "so:f:r:a:"

int get_args(int argc, char **argv)
{
    int c,d;

    output_mode = CASCADE_A;
    cmd_fcen = cmd_fypr = cmd_rcen = cmd_rypr = cmd_acen = cmd_aypr = 0;
    print_time = 1;
    while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
	switch(c){
	case 'f':
	    d = *(bu_optarg);
	    if (d == 'c'){
		sscanf(argv[bu_optind],"%lf",fcenter+0);
		sscanf(argv[bu_optind+1],"%lf",fcenter+1);
		sscanf(argv[bu_optind+2],"%lf",fcenter+2);
		bu_optind += 3;
		cmd_fcen = 1;
		break;
	    } else if ( d =='y'){
		sscanf(argv[bu_optind],"%lf",fypr+0);
		sscanf(argv[bu_optind+1],"%lf",fypr+1);
		sscanf(argv[bu_optind+2],"%lf",fypr+2);
		bu_optind += 3;
		cmd_fypr = 1;
		break;
	    } else {
		fprintf(stderr,"anim_cascade: unknown option -f%c\n", d);
	    }
	    break;
	case 'r':
	    d = *(bu_optarg);
	    if (d == 'c'){
		sscanf(argv[bu_optind],"%lf",rcenter+0);
		sscanf(argv[bu_optind+1],"%lf",rcenter+1);
		sscanf(argv[bu_optind+2],"%lf",rcenter+2);
		bu_optind += 3;
		cmd_rcen = 1;
		break;
	    } else if ( d =='y'){
		sscanf(argv[bu_optind],"%lf",rypr+0);
		sscanf(argv[bu_optind+1],"%lf",rypr+1);
		sscanf(argv[bu_optind+2],"%lf",rypr+2);
		bu_optind += 3;
		cmd_rypr = 1;
		break;
	    } else {
		fprintf(stderr,"anim_cascade: unknown option -r%c\n", d);
	    }
	    break;
	case 'a':
	    d = *(bu_optarg);
	    if (d == 'c'){
		sscanf(argv[bu_optind],"%lf",acenter+0);
		sscanf(argv[bu_optind+1],"%lf",acenter+1);
		sscanf(argv[bu_optind+2],"%lf",acenter+2);
		bu_optind += 3;
		cmd_acen = 1;
		break;
	    } else if ( d =='y'){
		sscanf(argv[bu_optind],"%lf",aypr+0);
		sscanf(argv[bu_optind+1],"%lf",aypr+1);
		sscanf(argv[bu_optind+2],"%lf",aypr+2);
		bu_optind += 3;
		cmd_aypr = 1;
		break;
	    } else {
		fprintf(stderr,"anim_cascade: unknown option -a%c\n", d);
	    }
	    break;
	case 'o':
	    d = *(bu_optarg);
	    if (d == 'r'){
		output_mode = CASCADE_R;
	    } else if (d == 'f') {
		output_mode = CASCADE_F;
	    } else if (d == 'a') { /* default */
		output_mode = CASCADE_A;
	    } else {
		fprintf(stderr,"anim_cascade: unknown option -i%c\n",d);
	    }
	    break;
	case 's':
	    print_time = 0;
	    break;
	default:
	    fprintf(stderr,"anim_cascade: unknown option: -%c\n",c);
	    return(0);
	}
    }
    return(1);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a51 1

@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.10
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
@


14.8
log
@M-x indent-region
@
text
@d27 2
a28 2
 *	For example, given the position and orientation of a tank, and of the 
 * turret relative to the tank, you can get the absolute position and 
d30 1
a30 1
 * 	Or, optionally, given position and orientation of main frame of 
d38 1
a38 1
 * The format of the tables is: 
d44 1
a44 1
 *  
d173 1
a173 1
	if (read_cen1) 
d187 1
a187 1
		
d212 1
a212 1
		
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 2
a28 2
 *	For example, given the position and orientation of a tank, and of the
 * turret relative to the tank, you can get the absolute position and
d30 1
a30 1
 * 	Or, optionally, given position and orientation of main frame of
d38 1
a38 1
 * The format of the tables is:
d44 1
a44 1
 *
d173 1
a173 1
	if (read_cen1)
d187 1
a187 1

d212 1
a212 1

@


14.7
log
@update copyright to 2005
@
text
@d92 64
a155 68
	int val;
	fastf_t time, yaw1, pitch1, roll1, yaw2, pitch2, roll2;
	vect_t cen1, cen2, cen_ans, ang_ans, rad_ang_ans, rotated;
	mat_t m_rot1, m_rot2, m_ans;
	int one_time, read_cen1, read_cen2, read_rot1, read_rot2;

	read_cen1 = read_cen2 = read_rot1 = read_rot2 = 1;

	if (!get_args(argc,argv))
		fprintf(stderr,"anim_cascade: Argument error.");

	switch (output_mode) {
	case CASCADE_A:
		if (cmd_fcen) {
			VMOVE(cen1, fcenter);
			read_cen1 = 0;
		}
		if (cmd_rcen) {
			VMOVE(cen2, rcenter);
			read_cen2 = 0;
		}
		if (cmd_fypr){
			anim_dy_p_r2mat(m_rot1, fypr[0], fypr[1], fypr[2]);
			read_rot1 = 0;
		}
		if (cmd_rypr){
			anim_dy_p_r2mat(m_rot2, rypr[0], rypr[1], rypr[2]);
			read_rot2 = 0;
		}
		break;
	case CASCADE_R:
		if (cmd_fcen) {
			VMOVE(cen1, fcenter);
			read_cen1 = 0;
		}
		if (cmd_acen) {
			VMOVE(cen2, acenter);
			read_cen2 = 0;
		}
		if (cmd_fypr){
			anim_dy_p_r2mat(m_rot1, fypr[0], fypr[1], fypr[2]);
			read_rot1 = 0;
		}
		if (cmd_aypr){
			anim_dy_p_r2mat(m_rot2, aypr[0], aypr[1], aypr[2]);
			read_rot2 = 0;
		}
		break;
	case CASCADE_F:
		if (cmd_acen) {
			VMOVE(cen1, acenter);
			read_cen1 = 0;
		}
		if (cmd_rcen) {
			VMOVE(cen2, rcenter);
			read_cen2 = 0;
		}
		if (cmd_aypr){
			anim_dy_p_r2mat(m_rot1, aypr[0], aypr[1], aypr[2]);
			read_rot1 = 0;
		}
		if (cmd_rypr){
			anim_dy_p_r2mat(m_rot2, rypr[0], rypr[1], rypr[2]);
			read_rot2 = 0;
		}
		break;
	default:
		break;
d157 4
d163 24
a186 24
	one_time = (!(read_cen1||read_cen2||read_rot1||read_rot2));
	read_time = one_time ? 0 : print_time;
	time = 0.0;

	val = 3;
	while(1){
		if (read_time) {
			val=scanf("%lf",&time);
			if (val < 1) break;
		}
		if (read_cen1) 
			val =scanf("%lf %lf %lf",cen1, cen1+1, cen1+2);
		if (read_rot1) {
			val=scanf("%lf %lf %lf", &yaw1, &pitch1, &roll1);
			anim_dy_p_r2mat(m_rot1, yaw1, pitch1, roll1);
		}
		if (read_cen2) {
			val=scanf("%lf %lf %lf", cen2, cen2+1,cen2+2);
		}
		if (read_rot2) {
			val=scanf("%lf %lf %lf", &yaw2, &pitch2, &roll2);
			anim_dy_p_r2mat(m_rot2, yaw2, pitch2, roll2);
		}
		if (val<3) break;
d188 24
a211 24
		if (output_mode==CASCADE_R) {
			anim_tran(m_rot1);
			VSUB2(rotated,cen2,cen1);
			MAT4X3PNT(cen_ans, m_rot1, rotated);
			bn_mat_mul(m_ans, m_rot1, m_rot2);
		} else if (output_mode==CASCADE_F) {
			anim_tran(m_rot2);
			bn_mat_mul(m_ans, m_rot1, m_rot2);
			MAT4X3PNT(rotated, m_ans, cen2);
			VSUB2(cen_ans, cen1, rotated);
		} else {
			MAT4X3PNT(rotated, m_rot1, cen2);
			VADD2(cen_ans, rotated, cen1);
			bn_mat_mul(m_ans, m_rot1, m_rot2);
		}
		anim_mat2ypr(rad_ang_ans, m_ans);
		VSCALE(ang_ans, rad_ang_ans, RTOD);

		if (print_time){
			printf("%g",time);
		}
		printf("\t%.12g\t%.12g\t%.12g", cen_ans[0], cen_ans[1], cen_ans[2]);
		printf("\t%.12g\t%.12g\t%.12g", ang_ans[0], ang_ans[1], ang_ans[2]);
		printf("\n");
d213 3
a215 3
		if (one_time) break;
	}
	return( 0 );
d222 1
a222 1
	int c,d;
d224 83
a306 84
	output_mode = CASCADE_A;
	cmd_fcen = cmd_fypr = cmd_rcen = cmd_rypr = cmd_acen = cmd_aypr = 0;
	print_time = 1;
	while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
		switch(c){
		case 'f':
			d = *(bu_optarg);
			if (d == 'c'){
				sscanf(argv[bu_optind],"%lf",fcenter+0);
				sscanf(argv[bu_optind+1],"%lf",fcenter+1);
				sscanf(argv[bu_optind+2],"%lf",fcenter+2);
				bu_optind += 3;
				cmd_fcen = 1;
				break;
			} else if ( d =='y'){
				sscanf(argv[bu_optind],"%lf",fypr+0);
				sscanf(argv[bu_optind+1],"%lf",fypr+1);
				sscanf(argv[bu_optind+2],"%lf",fypr+2);
				bu_optind += 3;
				cmd_fypr = 1;
				break;
			} else {
				fprintf(stderr,"anim_cascade: unknown option -f%c\n", d);
			}
			break;
		case 'r':
			d = *(bu_optarg);
			if (d == 'c'){
				sscanf(argv[bu_optind],"%lf",rcenter+0);
				sscanf(argv[bu_optind+1],"%lf",rcenter+1);
				sscanf(argv[bu_optind+2],"%lf",rcenter+2);
				bu_optind += 3;
				cmd_rcen = 1;
				break;
			} else if ( d =='y'){
				sscanf(argv[bu_optind],"%lf",rypr+0);
				sscanf(argv[bu_optind+1],"%lf",rypr+1);
				sscanf(argv[bu_optind+2],"%lf",rypr+2);
				bu_optind += 3;
				cmd_rypr = 1;
				break;
			} else {
				fprintf(stderr,"anim_cascade: unknown option -r%c\n", d);
			}
			break;
		case 'a':
			d = *(bu_optarg);
			if (d == 'c'){
				sscanf(argv[bu_optind],"%lf",acenter+0);
				sscanf(argv[bu_optind+1],"%lf",acenter+1);
				sscanf(argv[bu_optind+2],"%lf",acenter+2);
				bu_optind += 3;
				cmd_acen = 1;
				break;
			} else if ( d =='y'){
				sscanf(argv[bu_optind],"%lf",aypr+0);
				sscanf(argv[bu_optind+1],"%lf",aypr+1);
				sscanf(argv[bu_optind+2],"%lf",aypr+2);
				bu_optind += 3;
				cmd_aypr = 1;
				break;
			} else {
				fprintf(stderr,"anim_cascade: unknown option -a%c\n", d);
			}
			break;
		case 'o':
			d = *(bu_optarg);
			if (d == 'r'){
				output_mode = CASCADE_R;
			} else if (d == 'f') {
				output_mode = CASCADE_F;
			} else if (d == 'a') { /* default */
				output_mode = CASCADE_A;
			} else {
				fprintf(stderr,"anim_cascade: unknown option -i%c\n",d);
			}
			break;
		case 's':
			print_time = 0;
			break;
		default:
			fprintf(stderr,"anim_cascade: unknown option: -%c\n",c);
			return(0);
		}
d308 2
a309 1
	return(1);
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a47 2
 *  
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a49 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a48 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file anim_cascade.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*	A N I M _ C A S C A D E . C
d4 18
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d300 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d39 1
a39 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

