head	14.13;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.8
	rel-7-10-2:14.12
	rel-7-10-0:14.12
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.13
date	2007.09.15.16.23.03;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.42;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.12;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.02.14.02.29.35;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.30.14;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.00.54.02;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.55;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.39;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                   A N I M _ S C R I P T . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file anim_script.c
 *	Turn an animation table into an animation script suitable for
 *  use by rt. Anim_script.c makes a script for one object at a time (or the
 *  virtual camera). Some of the available options include rotation
 *  only, translation only, automatic steering, and specifying reference
 *  coordinates.
 *
 *  Author -
 *	Carl J. Nuzman
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"

#include <math.h>
#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "bu.h"
#include "bn.h"
#include "anim.h"

#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif

int		get_args(int argc, char **argv);
extern int	anim_steer_mat(fastf_t *, fastf_t *, int);
extern void	anim_quat2mat(fastf_t *, const fastf_t *);
extern void	anim_v_unpermute(fastf_t *);
extern void	anim_mat_print(FILE *, const fastf_t *, int);

extern int bu_optind;
extern char *bu_optarg;

/* info from command line args */
int relative_a, relative_c, axes, translate, quaternion, rotate;/*flags*/
int steer, view, readview, permute; /* flags*/
int first_frame;
fastf_t  viewsize;
vect_t centroid, rcentroid, front;
mat_t m_axes, m_rev_axes; /* rotational analogue of centroid */
char mat_cmd[10];   /* default is lmul */

int
main(int argc, char **argv)
{
    void anim_dx_y_z2mat(fastf_t *, double, double, double), anim_add_trans(fastf_t *, const fastf_t *, const fastf_t *);
    fastf_t yaw, pitch, roll;
    vect_t point, zero;
    quat_t quat;
    mat_t a, m_x;
    int val, go, frame, last_steer;

    frame=last_steer=go=view=relative_a=relative_c=axes=0;
    VSETALL(centroid,0);
    VSETALL(rcentroid,0);
    VSETALL(front,0);
    VSETALL(point,0);
    VSETALL(zero,0);
    yaw = pitch = roll = 0.0;
    MAT_IDN(m_axes);
    MAT_IDN(m_rev_axes);
    MAT_IDN(a);


    if (!get_args(argc,argv))
	fprintf(stderr,"anim_script: Get_args error\n");

    frame = (steer) ? first_frame -1 : first_frame;

    if (view && (viewsize > 0.0))
	printf("viewsize %.10g;\n", viewsize);


    while (1) {
	/* read one line of table */
	val = scanf("%*f"); /*ignore time */
	if (readview)
	    scanf("%lf",&viewsize);
	if(translate)
	    val=scanf("%lf %lf %lf", point, point+1, point+2);
	if(rotate&&quaternion){
	    val = scanf("%lf %lf %lf %lf", quat,quat+1,quat+2,quat+3);
	    val -= 1;
	} else if (rotate) {
	    val=scanf("%lf %lf %lf",&yaw,&pitch,&roll);
	}

	if (val < 3){ /* ie. scanf not completely successful */
	    /* with steering option, must go extra loop after end of file */
	    if (steer && !last_steer)
		last_steer = 1;
	    else break;
	}

	/* calculate basic rotation matrix a */
	if (steer)
	    go = anim_steer_mat(a,point,last_steer); /* warning: point changed by anim_steer_mat */
	else if (quaternion) {
	    anim_quat2mat(a,quat);
	    go = 1;
	} else {
	    anim_dx_y_z2mat(a,roll,-pitch,yaw);/* make ypr matrix */
	    go = 1;
	}

	/* if input orientation (presumably from quaternion) was
	 * designed to manipulate the view, first move the object
	 * to the default object position */
	if (permute)
	    anim_v_unpermute(a);

	/* make final matrix, including translation etc */
	if (axes){ /* add pre-rotation from original axes */
	    bn_mat_mul(m_x,a,m_rev_axes);
	    MAT_MOVE(a,m_x);
	}
	anim_add_trans(a,point,rcentroid); /* add translation */
	if (axes && relative_a){ /* add post-rotation back to original axes */
	    bn_mat_mul(m_x,m_axes,a);
	    MAT_MOVE(a,m_x);
	}
	if (relative_c)
	    anim_add_trans(a,centroid,zero); /* final translation */


	/* print one frame of script */
	if (go && view){
	    printf("start %d;\n", frame);
	    printf("clean;\n");
	    if (readview)
		printf("viewsize %.10g;\n", viewsize);
	    printf("eye_pt %.10g %.10g %.10g;\n",a[3],a[7],a[11]);
	    /* implicit anim_v_permute */
	    printf("viewrot %.10g %.10g %.10g 0\n",-a[1],-a[5],-a[9]);
	    printf("%.10g %.10g %.10g 0\n", a[2], a[6], a[10]);
	    printf("%.10g %.10g %.10g 0\n", -a[0], -a[4],-a[8]);
	    printf("0 0 0 1;\n");
	    printf("end;\n");
	}
	else if (go){
	    printf("start %d;\n", frame);
	    printf("clean;\n");
	    printf("anim %s matrix %s\n", *(argv+bu_optind), mat_cmd);
	    anim_mat_print(stdout,a,1);
	    printf("end;\n");
	}
	frame++;
    }
    return( 0 );
}

#define OPT_STR	"a:b:c:d:f:m:pqrstv:"

int get_args(int argc, char **argv)
{

    int c, i, yes;
    double yaw,pch,rll;
    void anim_dx_y_z2mat(fastf_t *, double, double, double), anim_dz_y_x2mat(fastf_t *, double, double, double);
    rotate = translate = 1; /* defaults */
    quaternion = permute = 0;
    strcpy(mat_cmd, "lmul");
    while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
	i=0;
	switch(c){
	case 'a':
	    bu_optind -= 1;
	    sscanf(argv[bu_optind+(i++)],"%lf", &yaw );
	    sscanf(argv[bu_optind+(i++)],"%lf", &pch );
	    sscanf(argv[bu_optind+(i++)],"%lf", &rll );
	    bu_optind += 3;
	    anim_dx_y_z2mat(m_axes, rll, -pch, yaw);
	    anim_dz_y_x2mat(m_rev_axes, -rll, pch, -yaw);
	    axes = 1;
	    relative_a = 1;
	    break;
	case 'b':
	    bu_optind -= 1;
	    sscanf(argv[bu_optind+(i++)],"%lf", &yaw );
	    sscanf(argv[bu_optind+(i++)],"%lf", &pch );
	    sscanf(argv[bu_optind+(i++)],"%lf", &rll );
	    bu_optind += 3;
	    anim_dx_y_z2mat(m_axes, rll, -pch, yaw);
	    anim_dz_y_x2mat(m_rev_axes, -rll, pch, -yaw);
	    axes = 1;
	    relative_a = 0;
	    break;
	case 'c':
	    bu_optind -= 1;
	    sscanf(argv[bu_optind+(i++)],"%lf",centroid);
	    sscanf(argv[bu_optind+(i++)],"%lf",centroid+1);
	    sscanf(argv[bu_optind+(i++)],"%lf",centroid+2);
	    bu_optind += 3;
	    VREVERSE(rcentroid,centroid);
	    relative_c = 1;
	    break;
	case 'd':
	    bu_optind -= 1;
	    sscanf(argv[bu_optind+(i++)],"%lf",centroid);
	    sscanf(argv[bu_optind+(i++)],"%lf",centroid+1);
	    sscanf(argv[bu_optind+(i++)],"%lf",centroid+2);
	    bu_optind += 3;
	    VREVERSE(rcentroid,centroid);
	    relative_c = 0;
	    break;
	case 'f':
	    sscanf(bu_optarg,"%d",&first_frame);
	    break;
	case 'm':
	    strncpy(mat_cmd,bu_optarg, 10);
	    break;
	case 'p':
	    permute = 1;
	    break;
	case 'q':
	    quaternion = 1;
	    break;
	case 'r':
	    rotate = 1;
	    translate = 0;
	    break;
	case 's':
	    steer = 1;
	    relative_a = 0;
	    rotate = 0;
	    translate = 1;
	    break;
	case 't':
	    translate = 1;
	    rotate = 0;
	    break;
	case 'v':
	    yes = sscanf(bu_optarg,"%lf",&viewsize);
	    if (!yes) viewsize = 0.0;
	    if (viewsize < 0.0)
		readview = 1;
	    view = 1;
	    break;
	default:
	    fprintf(stderr,"Unknown option: -%c\n",c);
	    return(0);
	}
    }
    return(1);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a37 6
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

d40 1
@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.10
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
@


14.8
log
@M-x indent-region
@
text
@d28 1
a28 1
 *	
d31 1
a31 1
 *  
d95 1
a95 1
    MAT_IDN(a);	
d102 1
a102 1
	
d147 1
a147 1
	    bn_mat_mul(m_x,a,m_rev_axes); 
d189 1
a189 1
	
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *
d31 1
a31 1
 *
d95 1
a95 1
    MAT_IDN(a);
d102 1
a102 1

d147 1
a147 1
	    bn_mat_mul(m_x,a,m_rev_axes);
d189 1
a189 1

@


14.7
log
@update copyright to 2005
@
text
@d67 1
a67 1
 /* info from command line args */
d79 17
a95 17
	void anim_dx_y_z2mat(fastf_t *, double, double, double), anim_add_trans(fastf_t *, const fastf_t *, const fastf_t *);
	fastf_t yaw, pitch, roll;
	vect_t point, zero;
	quat_t quat;
	mat_t a, m_x;
	int val, go, frame, last_steer;

	frame=last_steer=go=view=relative_a=relative_c=axes=0;
	VSETALL(centroid,0);
	VSETALL(rcentroid,0);
	VSETALL(front,0);
	VSETALL(point,0);
	VSETALL(zero,0);
	yaw = pitch = roll = 0.0;
	MAT_IDN(m_axes);
	MAT_IDN(m_rev_axes);
	MAT_IDN(a);	
d98 2
a99 2
	if (!get_args(argc,argv))
		fprintf(stderr,"anim_script: Get_args error\n");
d101 1
a101 1
	frame = (steer) ? first_frame -1 : first_frame;
d103 2
a104 2
	if (view && (viewsize > 0.0))
                printf("viewsize %.10g;\n", viewsize);
d107 12
a118 74
	while (1) {
		/* read one line of table */
		val = scanf("%*f"); /*ignore time */
                if (readview)
                        scanf("%lf",&viewsize);
		if(translate)
			val=scanf("%lf %lf %lf", point, point+1, point+2);
		if(rotate&&quaternion){
			val = scanf("%lf %lf %lf %lf", quat,quat+1,quat+2,quat+3);
			val -= 1;
		} else if (rotate) {
			val=scanf("%lf %lf %lf",&yaw,&pitch,&roll);
		}

		if (val < 3){ /* ie. scanf not completely successful */
			/* with steering option, must go extra loop after end of file */
			if (steer && !last_steer)
				last_steer = 1;
			else break;
		}

		/* calculate basic rotation matrix a */
		if (steer)
			go = anim_steer_mat(a,point,last_steer); /* warning: point changed by anim_steer_mat */
		else if (quaternion) {
			anim_quat2mat(a,quat);
			go = 1;
		} else {
			anim_dx_y_z2mat(a,roll,-pitch,yaw);/* make ypr matrix */
			go = 1;
		}

		/* if input orientation (presumably from quaternion) was
		 * designed to manipulate the view, first move the object
 		 * to the default object position */
		if (permute)
			anim_v_unpermute(a);

		/* make final matrix, including translation etc */
		if (axes){ /* add pre-rotation from original axes */
			bn_mat_mul(m_x,a,m_rev_axes); 
			MAT_MOVE(a,m_x);
		}
		anim_add_trans(a,point,rcentroid); /* add translation */
		if (axes && relative_a){ /* add post-rotation back to original axes */
			bn_mat_mul(m_x,m_axes,a);
			MAT_MOVE(a,m_x);
		}
		if (relative_c)
			anim_add_trans(a,centroid,zero); /* final translation */


		/* print one frame of script */
		if (go && view){
	                printf("start %d;\n", frame);
			printf("clean;\n");
			if (readview)
		                printf("viewsize %.10g;\n", viewsize);
	                printf("eye_pt %.10g %.10g %.10g;\n",a[3],a[7],a[11]);
			/* implicit anim_v_permute */
			printf("viewrot %.10g %.10g %.10g 0\n",-a[1],-a[5],-a[9]);
	                printf("%.10g %.10g %.10g 0\n", a[2], a[6], a[10]);
	                printf("%.10g %.10g %.10g 0\n", -a[0], -a[4],-a[8]);
	                printf("0 0 0 1;\n");
	                printf("end;\n");
		}
		else if (go){
			printf("start %d;\n", frame);
			printf("clean;\n");
			printf("anim %s matrix %s\n", *(argv+bu_optind), mat_cmd);
			anim_mat_print(stdout,a,1);
			printf("end;\n");
		}
		frame++;
d120 63
a182 1
	return( 0 );
d190 85
a274 86
	int c, i, yes;
	double yaw,pch,rll;
	void anim_dx_y_z2mat(fastf_t *, double, double, double), anim_dz_y_x2mat(fastf_t *, double, double, double);
	rotate = translate = 1; /* defaults */
	quaternion = permute = 0;
	strcpy(mat_cmd, "lmul");
	while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
		i=0;
		switch(c){
		case 'a':
			bu_optind -= 1;
                        sscanf(argv[bu_optind+(i++)],"%lf", &yaw );
                        sscanf(argv[bu_optind+(i++)],"%lf", &pch );
                        sscanf(argv[bu_optind+(i++)],"%lf", &rll );
			bu_optind += 3;
			anim_dx_y_z2mat(m_axes, rll, -pch, yaw);
			anim_dz_y_x2mat(m_rev_axes, -rll, pch, -yaw);
			axes = 1;
			relative_a = 1;
                        break;
		case 'b':
			bu_optind -= 1;
                        sscanf(argv[bu_optind+(i++)],"%lf", &yaw );
                        sscanf(argv[bu_optind+(i++)],"%lf", &pch );
                        sscanf(argv[bu_optind+(i++)],"%lf", &rll );
			bu_optind += 3;
			anim_dx_y_z2mat(m_axes, rll, -pch, yaw);
			anim_dz_y_x2mat(m_rev_axes, -rll, pch, -yaw);
			axes = 1;
			relative_a = 0;
                        break;
		case 'c':
			bu_optind -= 1;
                        sscanf(argv[bu_optind+(i++)],"%lf",centroid);
                        sscanf(argv[bu_optind+(i++)],"%lf",centroid+1);
                        sscanf(argv[bu_optind+(i++)],"%lf",centroid+2);
			bu_optind += 3;
			VREVERSE(rcentroid,centroid);
			relative_c = 1;
                        break;
		case 'd':
			bu_optind -= 1;
                        sscanf(argv[bu_optind+(i++)],"%lf",centroid);
                        sscanf(argv[bu_optind+(i++)],"%lf",centroid+1);
                        sscanf(argv[bu_optind+(i++)],"%lf",centroid+2);
			bu_optind += 3;
			VREVERSE(rcentroid,centroid);
			relative_c = 0;
                        break;
		case 'f':
			sscanf(bu_optarg,"%d",&first_frame);
			break;
                case 'm':
               		strncpy(mat_cmd,bu_optarg, 10);
               		break;
		case 'p':
			permute = 1;
			break;
		case 'q':
			quaternion = 1;
			break;
		case 'r':
			rotate = 1;
			translate = 0;
			break;
		case 's':
			steer = 1;
			relative_a = 0;
			rotate = 0;
			translate = 1;
			break;
		case 't':
			translate = 1;
			rotate = 0;
			break;
		case 'v':
			yes = sscanf(bu_optarg,"%lf",&viewsize);
			if (!yes) viewsize = 0.0;
			if (viewsize < 0.0)
				readview = 1;
			view = 1;
			break;
		default:
			fprintf(stderr,"Unknown option: -%c\n",c);
			return(0);
		}
d276 2
a277 1
	return(1);
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a34 2
 *  
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a36 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a35 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file anim_script.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			A N I M _ S C R I P T . C
d4 18
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d269 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d28 1
a28 3


#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

