head	14.12;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.8
	rel-7-10-2:14.12
	rel-7-10-0:14.12
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.12
date	2007.01.23.01.13.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.42;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.12;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.28;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.02.14.02.29.35;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.30.14;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.00.54.02;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.38;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.12;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@/*                   A N I M _ L O O K A T . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file anim_lookat.c
 *	Given animation tables for the position of the virtual camera
 * and a point to look at at each time, this program produces an animation
 * script to control the camera. The view is kept rightside up, whenever
 * possible. When looking vertically up or down, the exact orientation
 * depends on the previous orientation.
 *
 *  Author -
 *	Carl J. Nuzman
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"


#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "anim.h"
#include "bu.h"

#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif
#ifndef RTOD
#define RTOD	(180/M_PI)
#endif


#define LOOKAT_SCRIPT	0
#define	LOOKAT_YPR	1
#define LOOKAT_QUAT	2


extern int bu_optind;
extern char *bu_optarg;

int frame = 0;
int print_mode = LOOKAT_SCRIPT;
int print_viewsize = 0;

int get_args(int argc, char **argv);
extern void anim_dirn2mat(fastf_t *, const fastf_t *, const fastf_t *);
extern int anim_mat2ypr(fastf_t *, fastf_t *);
extern int anim_mat2quat(fastf_t *, const fastf_t *);

int
main(int argc, char **argv)
{
    fastf_t time, vsize=0.0;
    vect_t eye,look,dir, angles, norm, temp;
    quat_t quat;
    mat_t mat;
    int val = 0;

    VSETALL(look,0.0);
    VSETALL(eye,0.0);

    if (argc > 1)
	get_args(argc,argv);

    VSET(norm, 0.0, 1.0, 0.0);
    while (!feof(stdin)){
	val=scanf("%lf %lf %lf %lf %lf %lf %lf",&time,eye,eye+1,eye+2,look,look+1,look+2);
	if (val < 7){
	    break;
	}

	if (print_viewsize) {
	    VSUB2(temp, eye, look);
	    vsize = MAGNITUDE(temp);
	    vsize *= 2.0;
	}

	VSUBUNIT(dir,look,eye);
	anim_dirn2mat(mat,dir,norm);
	VSET(norm, mat[1],mat[5], 0.0);
	switch (print_mode) {
	case LOOKAT_SCRIPT:
	    printf("start %d;\n",frame++);
	    printf("clean;\n");
	    if (print_viewsize)
		printf("viewsize %.10g;\n",vsize);
	    printf("eye_pt %.10g %.10g %.10g;\n",eye[0],eye[1],eye[2]);
	    printf("viewrot %.10g\t%.10g\t%.10g\t0\n", -mat[1], -mat[5], -mat[9]);
	    printf("%.10g\t%.10f\t%.10g\t0\n", mat[2], mat[6], mat[10]);
	    printf("%.10g\t%.10g\t%.10g\t0\n", -mat[0], -mat[4], -mat[8]);
	    printf("0\t0\t0\t1;\n");
	    printf("end;\n");
	    break;
	case LOOKAT_YPR:
	    anim_mat2ypr(angles,mat);
	    angles[0] *= RTOD;
	    angles[1] *= RTOD;
	    angles[2] *= RTOD;
	    printf("%.10g",time);
	    if (print_viewsize)
		printf("\t%.10g",vsize);
	    printf("\t%.10g\t%.10g\t%.10g",eye[0],eye[1],eye[2]);
	    printf("\t%.10g\t%.10g\t%.10g\n",angles[0],angles[1],angles[2]);
	    break;
	case LOOKAT_QUAT:
	    anim_mat2quat(quat,mat);
	    printf("%.10g",time);
	    if (print_viewsize)
		printf("\t%.10g",vsize);
	    printf("\t%.10g\t%.10g\t%.10g",eye[0],eye[1],eye[2]);
	    printf("\t%.10g\t%.10g\t%.10g\t%.10g\n",quat[0],quat[1],quat[2],quat[3]);
	    break;
	}


    }
    return( 0 );
}

#define OPT_STR "f:yqv"

int get_args(int argc, char **argv)
{
    int c;
    while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
	switch(c){
	case 'f':
	    sscanf(bu_optarg,"%d",&frame);
	    break;
	case 'y':
	    print_mode = LOOKAT_YPR;
	    break;
	case 'q':
	    print_mode = LOOKAT_QUAT;
	    break;
	case 'v':
	    print_viewsize = 1;
	    break;
	default:
	    fprintf(stderr,"Unknown option: -%c\n",c);
	    return(0);
	}
    }
    return(1);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.10
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
@


14.8
log
@M-x indent-region
@
text
@d23 1
a23 1
 *	Given animation tables for the position of the virtual camera 
d25 2
a26 2
 * script to control the camera. The view is kept rightside up, whenever 
 * possible. When looking vertically up or down, the exact orientation 
d31 1
a31 1
 *  
d102 1
a102 1
	VSET(norm, mat[1],mat[5], 0.0); 
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d23 1
a23 1
 *	Given animation tables for the position of the virtual camera
d25 2
a26 2
 * script to control the camera. The view is kept rightside up, whenever
 * possible. When looking vertically up or down, the exact orientation
d31 1
a31 1
 *
d102 1
a102 1
	VSET(norm, mat[1],mat[5], 0.0);
@


14.7
log
@update copyright to 2005
@
text
@d75 18
a92 61
	fastf_t time, vsize=0.0;
	vect_t eye,look,dir, angles, norm, temp;
	quat_t quat;
	mat_t mat;
	int val = 0;

	VSETALL(look,0.0);
	VSETALL(eye,0.0);

	if (argc > 1)
		get_args(argc,argv);

	VSET(norm, 0.0, 1.0, 0.0);
	while (!feof(stdin)){
		val=scanf("%lf %lf %lf %lf %lf %lf %lf",&time,eye,eye+1,eye+2,look,look+1,look+2);
		if (val < 7){
			break;
		}

		if (print_viewsize) {
			VSUB2(temp, eye, look);
			vsize = MAGNITUDE(temp);
			vsize *= 2.0;
		}

		VSUBUNIT(dir,look,eye);
		anim_dirn2mat(mat,dir,norm);
		VSET(norm, mat[1],mat[5], 0.0); 
		switch (print_mode) {
		case LOOKAT_SCRIPT:
			printf("start %d;\n",frame++);
			printf("clean;\n");
			if (print_viewsize)
				printf("viewsize %.10g;\n",vsize);
	                printf("eye_pt %.10g %.10g %.10g;\n",eye[0],eye[1],eye[2]);
			printf("viewrot %.10g\t%.10g\t%.10g\t0\n", -mat[1], -mat[5], -mat[9]);
	                printf("%.10g\t%.10f\t%.10g\t0\n", mat[2], mat[6], mat[10]);
	                printf("%.10g\t%.10g\t%.10g\t0\n", -mat[0], -mat[4], -mat[8]);
	                printf("0\t0\t0\t1;\n");
			printf("end;\n");
			break;
		case LOOKAT_YPR:
			anim_mat2ypr(angles,mat);
			angles[0] *= RTOD;
			angles[1] *= RTOD;
			angles[2] *= RTOD;
			printf("%.10g",time);
			if (print_viewsize)
				printf("\t%.10g",vsize);
			printf("\t%.10g\t%.10g\t%.10g",eye[0],eye[1],eye[2]);
			printf("\t%.10g\t%.10g\t%.10g\n",angles[0],angles[1],angles[2]);
			break;
		case LOOKAT_QUAT:
			anim_mat2quat(quat,mat);
			printf("%.10g",time);
			if (print_viewsize)
				printf("\t%.10g",vsize);
			printf("\t%.10g\t%.10g\t%.10g",eye[0],eye[1],eye[2]);
			printf("\t%.10g\t%.10g\t%.10g\t%.10g\n",quat[0],quat[1],quat[2],quat[3]);
			break;
		}
d94 5
d100 35
d136 4
a139 1
	return( 0 );
d146 18
a163 19
	int c;
	while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
		switch(c){
		case 'f':
			sscanf(bu_optarg,"%d",&frame);
			break;
		case 'y':
			print_mode = LOOKAT_YPR;
			break;
		case 'q':
			print_mode = LOOKAT_QUAT;
			break;
		case 'v':
			print_viewsize = 1;
			break;
		default:
			fprintf(stderr,"Unknown option: -%c\n",c);
			return(0);
		}
d165 2
a166 1
	return(1);
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a34 2
 *  
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a36 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a35 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file anim_lookat.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			A N I M _ L O O K A T . C
d4 18
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d158 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

