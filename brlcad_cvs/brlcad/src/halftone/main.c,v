head	14.16;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.3
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.2
	rel-7-6-0:14.4
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.16
date	2007.12.09.00.36.32;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.12.01.21.47.12;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.20.49.08;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.11.21.19.28.06;	author erikgreenwald;	state Exp;
branches;
next	14.12;

14.12
date	2007.05.14.21.04.30;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.02.02.08.48.29;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.32;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.49;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.08.01.15.02.55;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.23.05.10.58;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.08.21.13.53.37;	author brlcad;	state Exp;
branches
	14.4.2.1;
next	14.3;

14.3
date	2005.01.30.20.30.38;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.20.20.33.01;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.09.19.29.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.17.57.30;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.15;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.10;	author morrison;	state Exp;
branches;
next	;

14.4.2.1
date	2005.11.13.13.46.14;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.16
log
@quell warning
@
text
@/*                          M A I N . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file main.c
 *
 * given a bw file, generate a ht file.
 *
 * Usage:
 *	halftone
 *		-s	square size
 *		-n	number of lines
 *		-w	width
 *		-h	same as -s 1024
 *		-a	Automatic bw file sizing.
 *		-B	Beta for sharpining
 *		-I	number of intensity levels
 *		-M	method
 *			0 Floyd-Steinburg
 *			1 45 degree classical halftone screen
 *			2 Threshold
 *			3 0 degree dispersed halftone screen.
 *		-R	Add some noise.
 *		-S	Surpent flag.
 *		-T	tonescale points
 *
 * Exit:
 *	writes a ht(bw) file.
 *		an ht file is a bw file with a limited set of values
 *		ranging from 0 to -I(n) as integers.
 *
 * Uses:
 *	None.
 *
 * Calls:
 *	sharpen()	- get a line from the file that has been sharpened
 *	tone_simple()	- Threshold halftone.
 *	tone_floyd()	- Floyd-Steinburg halftone.
 *	tone_folly()	- 0 degree halftone screen (from Folly and Van Dam)
 *	tone_classic()	- 45 degree classical halftone screen.
 *	tonescale()	- Generates a tone scale map default is 0,0 to 255,255
 *	cubic_init()	- Generates "cubics" for tonescale for a set of points.
 *
 * Method:
 *	Fairly simple.  Most of the algorthems are inspired by
 *		Digital Halftoning by Robert Ulichney
 *
 * Author:
 *	Christopher T. Johnson	- 90/03/21
 *
 */
#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.15 2007/12/01 21:47:12 brlcad Exp $";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"


long int width=512;		/* width of pixture */
long int height=512;		/* height of pixture */
double Beta=0.0;	/* Beta for sharpening */

#define	M_FLOYD	0
#define	M_CLASSIC 1
#define	M_THRESH 2
#define	M_FOLLY 3
int Method=M_FLOYD;	/* Method of halftoning */

int Surpent=0;		/* use serpentine scan lines */
int Levels=1;		/* Number of levels-1 */
int Debug=0;
struct bn_unif *RandomFlag=0;	/* Use random numbers ? */

void cubic_init(int n, int *x, int *y);
void tonescale(unsigned char *map, float Slope, float B, int (*eqptr)() );
int sharpen(unsigned char *buf, int size, int num, FILE *file, unsigned char *Map);
int tone_floyd(int pix, int x, int y, int nx, int ny, int new);
int tone_folly(int pix, int x, int y, int nx, int ny, int new);
int tone_simple(int pix, int x, int y, int nx, int ny, int new);
int tone_classic(int pix, int x, int y, int nx, int ny, int new);

static const char usage[] = "\
Usage: halftone [ -h -R -S -a] [-D Debug Level]\n\
	[-s squarefilesize] [-w file_width] [-n file_height]\n\
	[-B contrast] [-I intensity_levels] [-T x y ... tone_curve]\n\
	[-M Method] [file.bw]\n\
	Floyd-Steinberg=0	45 Degree Classic Screen=1\n\
	Thresholding=2		0 Degree Dispersed Screen=3\n";

/*	setup	process parameters and setup working enviroment
 *
 * Entry:
 *	argc	- number of arguments.
 *	argv	- the arguments.
 *
 * Exit:
 *	parameters have been set.
 *	if there is a fatal error exit(!0)
 *
 * Uses:
 *	width	- width of pixture
 *	height	- height of pixture
 *	Beta	- sharpening value.
 *	surpent	- to surpenten rasters?
 *	Levels	- number of intensity levels.
 *	Debug	- debug level
 *	RandomFlag - Add noise to processes.
 *
 * Calls:
 *	cubic_init - setup for tonescale.
 *
 * Method:
 *	straight-forward.
 */
void
setup(int argc, char **argv)
{
	int c;
	int i,j;
	int *Xlist, *Ylist;
	int	autosize = 0;

	while ((c = bu_getopt(argc, argv, "D:hsa:n:w:B:M:RSI:T:")) != EOF) {
		switch(c) {
		case 's':
			width = height = atol(bu_optarg);
		break;
		case 'n':
			height = atol(bu_optarg);
		break;
		case 'w':
			width = atol(bu_optarg);
		break;
		case 'h':
			width = height = 1024;
		break;
		case 'a':
			autosize = 1;
		break;
		case 'B':
			Beta = atof(bu_optarg);
		break;
		case 'M':
			Method = atoi(bu_optarg);
		break;
		case 'R':
			RandomFlag = bn_unif_init(1,0);
		break;
		case 'S':
			Surpent = 1;
		break;
		case 'I':
			Levels = atoi(bu_optarg)-1;
			if (Levels < 1) Levels = 1;
		break;
/*
 * Tone scale processing is a little strange.  The -T option is followed
 * be a list of points.  The points are collected and one point is added
 * at 1024,1024 to let tonescale be stupid.  Cubic_init takes the list
 * of points and generates "cubics" for tonescale to use in generating
 * curve to use for the tone map.  If tonescale is called with no cubics
 * defined tonescale will generate a straight-line (generaly from 0,0 to
 * 255,255).
 */
		case 'T':
			--bu_optind;
			for(i=bu_optind; i < argc && (isdigit(*argv[i]) ||
			    (*argv[i] == '-' && isdigit(*(argv[i]+1)))) ; i++);
			if ((c=i-bu_optind) % 2) {
				fprintf(stderr,"Missing Y coordent for tone map.\n");
				bu_exit(1, NULL);
			}
			Xlist = (int *) bu_malloc((c+2)*sizeof(int), "Xlist");
			Ylist = (int *) bu_malloc((c+2)*sizeof(int), "Ylist");

			for (j=0;bu_optind < i; ) {
				Xlist[j] = atoi(argv[bu_optind++]);
				Ylist[j] = atoi(argv[bu_optind++]);
				j++;
			}
			Xlist[j] = 1024;
			Ylist[j] = 1024;
			if (Debug>6) fprintf(stderr,"Number points=%d\n",j+1);
			(void) cubic_init(j+1,Xlist,Ylist);
			bu_free(Xlist, "Xlist");
			bu_free(Ylist, "Ylist");
		break;
/*
 * Debug is not well used at this point a value of 9 will get all
 * debug statements.  Debug is a level indicator NOT a bit flag.
 */
		case 'D':
			Debug = atoi(bu_optarg);
		break;
		case '?':
			bu_exit(1, usage);
		break;
		}
	}
/*
 *	if there are no extra arguments and stdin is a tty then
 *	the user has given us no input file.  Spit a usage message
 * 	at them and exit.
 */
	if (bu_optind >= argc) {
		if ( isatty(fileno(stdin)) ) {
			bu_exit(1, usage);
		}
		if (autosize) {
			(void) fprintf(stderr, "%s", usage);
			bu_exit(1, "Automatic sizing can not be used with pipes.\n");
		}
	} else {
		if (freopen(argv[bu_optind],"r",stdin) == NULL ) {
			bu_exit(1, "halftone: cannot open \"%s\" for reading.\n", argv[bu_optind]);
		}
		if (autosize) {
			if ( !fb_common_file_size((unsigned long int *)&width, (unsigned long int *)&height, argv[bu_optind], 1)) {
				(void) fprintf(stderr,"halftone: unable to autosize.\n");
			}
		}
	}

	if ( argc > ++bu_optind) {
		(void) fprintf(stderr,"halftone: excess argument(s) ignored.\n");
	}
}

int
main(int argc, char **argv)
{
	int pixel,x,y,i;
	unsigned char *Line, *Out;
	int NewFlag = 1;
	int Scale;
	unsigned char Map[256];
/*
 *	parameter processing.
 */
	setup(argc,argv);
/*
 *	Get a tone map.  Map is the result.  1.0 is slope, 0.0 is
 *	the Y intercept (y=mx+b). 0 is the address of a function to
 *	do a x to y mapping, 0 means use the default function.
 */
	(void) tonescale(Map,1.0,0.0,0);

/*
 * Currently the halftone file is scaled from 0 to 255 on output to
 * ease display via bw-fb.  In the future there might be flag to
 * set Scale to 1 to get a unscaled output.
 */
	Scale = 255/Levels;

	if (Debug) {
		fprintf(stderr,"Debug = %d, Scale = %d\n",Debug, Scale);
	}

	if (Debug>2) {
		for(i=0;i<256;i++) fprintf(stderr,"%d ",Map[i]);
		fprintf(stderr,"\n");
	}

	Line = (unsigned char *) bu_malloc(width, "Line");
	Out = (unsigned char *) bu_malloc(width, "Out");
/*
 * should be a test here to make sure we got the memory requested.
 */

/*
 *	Currently only the Floyd-Steinburg method uses the surpent flag
 *	so we make things easy with in the 'y' loop by reseting surpent
 *	for all other methods to "No Surpent".
 */
	if (Method != M_FLOYD) Surpent = 0;

	for (y=0; y<height; y++) {
		int NextX;
/*
 * 		A few of the methods benefit by knowing when a new line is
 *		started.
 */
		NewFlag = 1;
		(void) sharpen(Line,1,width,stdin,Map);
/*
 *		Only M_FLOYD will have Surpent != 0.
 */
		if (Surpent && y % 2) {
			for (x=width-1; x>=0; x--) {
				pixel = Line[x];
				Out[x] = Scale*tone_floyd(pixel, x, y, x-1,
				    y+1, NewFlag);
				NewFlag = 0;
			}
		} else {
			for (x=0; x<width; x++) {
				NextX = x+1;
				pixel = Line[x];
				switch (Method) {
				case M_FOLLY:
					Out[x] = Scale*tone_folly(pixel, x, y,
					    NextX, y+1, NewFlag);
				break;
				case M_FLOYD:
					Out[x] = Scale*tone_floyd(pixel, x, y,
					    NextX, y+1, NewFlag);
				break;
				case M_THRESH:
					Out[x]=Scale*tone_simple(pixel, x, y,
					    NextX, y+1, NewFlag);
				break;
				case M_CLASSIC:
					Out[x]=Scale*tone_classic(pixel, x, y,
					    NextX, y+1, NewFlag);
				break;
			}
			NewFlag=0;
		}
		}
		fwrite(Out,1,width,stdout);
	}
	bu_free(Line, "Line");
	bu_free(Out, "Out");
	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@more flawfinder level 4 quellage, mostly str*() buffer boundary limits.
@
text
@d68 1
a68 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.14 2007/11/21 20:49:08 erikgreenwald Exp $";
d237 1
a237 1
			(void) fprintf(stderr, usage);
@


14.14
log
@pass bu_exit a NULL instead of an empty string
@
text
@d68 1
a68 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.13 2007/11/21 19:28:06 erikgreenwald Exp $";
d109 1
a109 1
static char usage[] = "\
d223 1
a223 2
			fprintf(stderr,usage);
			bu_exit(1, NULL);
d234 1
a234 2
			(void) fprintf(stderr,usage);
			bu_exit(1, NULL);
d238 1
a238 2
			(void) fprintf(stderr, "Automatic sizing can not be used with pipes.\n");
			bu_exit(1, NULL);
d242 1
a242 4
			(void) fprintf( stderr,
			    "halftone: cannot open \"%s\" for reading.\n",
			    argv[bu_optind]);
			bu_exit(1, NULL);
@


14.13
log
@exit->bu_exit where applicable
@
text
@d68 1
a68 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.12 2007/05/14 21:04:30 brlcad Exp $";
d198 1
a198 1
				bu_exit(1, "");
d224 1
a224 1
			bu_exit(1, "");
d236 1
a236 1
			bu_exit(1, "");
d241 1
a241 1
			bu_exit(1, "");
d248 1
a248 1
			bu_exit(1, "");
@


14.12
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d68 1
a68 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.11 2007/02/02 08:48:29 brlcad Exp $";
d198 1
a198 1
				exit(1);
d224 1
a224 1
			exit(1);
d236 1
a236 1
			exit(1);
d241 1
a241 1
			exit(1);
d248 1
a248 1
			exit(1);
@


14.11
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d68 1
a68 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.10 2007/01/23 01:13:32 brlcad Exp $";
a83 1
#include "msr.h"
d99 1
a99 1
struct msr_unif *RandomFlag=0;	/* Use random numbers ? */
d174 1
a174 1
			RandomFlag = msr_unif_init(1,0);
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d68 1
a68 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.9 2007/01/20 14:36:49 brlcad Exp $";
d151 1
a151 1
	while ((c = getopt(argc, argv, "D:hsa:n:w:B:M:RSI:T:")) != EOF) {
d154 1
a154 1
			width = height = atol(optarg);
d157 1
a157 1
			height = atol(optarg);
d160 1
a160 1
			width = atol(optarg);
d169 1
a169 1
			Beta = atof(optarg);
d172 1
a172 1
			Method = atoi(optarg);
d181 1
a181 1
			Levels = atoi(optarg)-1;
d194 2
a195 2
			--optind;
			for(i=optind; i < argc && (isdigit(*argv[i]) ||
d197 1
a197 1
			if ((c=i-optind) % 2) {
d204 3
a206 3
			for (j=0;optind < i; ) {
				Xlist[j] = atoi(argv[optind++]);
				Ylist[j] = atoi(argv[optind++]);
d221 1
a221 1
			Debug = atoi(optarg);
d234 1
a234 1
	if (optind >= argc) {
d245 1
a245 1
		if (freopen(argv[optind],"r",stdin) == NULL ) {
d248 1
a248 1
			    argv[optind]);
d252 1
a252 1
			if ( !fb_common_file_size((unsigned long int *)&width, (unsigned long int *)&height, argv[optind], 1)) {
d258 1
a258 1
	if ( argc > ++optind) {
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d68 1
a68 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.8 2006/08/01 15:02:55 brlcad Exp $";
@


14.8
log
@refactor the three asize.c implementations (libbn, libfb, & canon) into just one.  libbn had the most comprehensive and updated version, but the logic belongs in libfb.  so, the bn_common autosizing functions are now consolidated to libfb, refactoring accordingly.
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d69 1
a69 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.7 2006/01/23 05:10:58 brlcad Exp $";
@


14.7
log
@convert to libbu memory management
@
text
@d69 1
a69 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.6 2006/01/18 06:46:15 brlcad Exp $";
d253 1
a253 1
			if ( !bn_common_file_size((unsigned long int *)&width, (unsigned long int *)&height, argv[optind], 1)) {
@


14.6
log
@update copyright to 2006
@
text
@a67 1

d69 1
a69 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.5 2005/10/23 04:44:30 brlcad Exp $";
d71 1
d74 4
a80 3
#include <stdio.h>
#include <ctype.h>
#include <math.h>
d202 2
a203 2
			Xlist = (int *) malloc((c+2)*sizeof(int));
			Ylist = (int *) malloc((c+2)*sizeof(int));
d214 2
a215 2
			free(Xlist);
			free(Ylist);
d299 2
a300 2
	Line = (unsigned char *) malloc(width);
	Out = (unsigned char *) malloc(width);
d357 2
@


14.5
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d70 1
a70 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.4 2005/08/21 13:53:37 brlcad Exp $";
@


14.4
log
@use a long for the image dimensions as we start to support larger image dimensions
@
text
@d70 1
a70 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.3 2005/01/30 20:30:38 brlcad Exp $";
d195 1
a195 1
			for(i=optind; i < argc && (isdigit(*argv[i]) || 
d217 1
a217 1
 * Debug is not well used at this point a value of 9 will get all 
d230 1
a230 1
 *	if there are no extra arguments and stdin is a tty then 
@


14.4.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d70 1
a70 1
static const char RCSid[] = "$Header$";
d195 1
a195 1
			for(i=optind; i < argc && (isdigit(*argv[i]) ||
d217 1
a217 1
 * Debug is not well used at this point a value of 9 will get all
d230 1
a230 1
 *	if there are no extra arguments and stdin is a tty then
@


14.3
log
@update copyright to 2005
@
text
@d70 1
a70 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/halftone/main.c,v 14.2 2004/12/20 20:33:01 morrison Exp $";
d75 1
a75 1
# include <unistd.h>
a76 1
                                                                                                                                                                            
d80 1
d86 3
a88 2
int width=512;		/* width of pixture */
int height=512;		/* height of pixture */
d154 1
a154 1
			width = height = atoi(optarg);
d157 1
a157 1
			height = atoi(optarg);
d160 1
a160 1
			width = atoi(optarg);
d252 1
a252 1
			if ( !bn_common_file_size(&width, &height, argv[optind], 1)) {
@


14.2
log
@acquire copyright and assign GPL license
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d70 1
a70 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/halftone/main.c,v 14.1 2004/11/16 19:42:13 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 23
a23 17
#ifndef lint
static const char RCSid[] = "$Header: /cvs/brlcad/src/halftone/main.c,v 1.5 2004/08/02 23:01:47 morrison Exp $";
#endif
#include "common.h"

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif
                                                                                                                                                                            
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "msr.h"
/*	halftone	given a bw file, generate a ht file.
d68 18
@


1.5
log
@replace the wrapped config.h block with common.h
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/halftone/main.c,v 1.4 2004/06/09 19:29:58 morrison Exp $";
d333 10
@


1.4
log
@gah, another $ .. that's what cvs is for
@
text
@d2 1
a2 4
static const char RCSid[] = "$Header: /n/xoff/cvs/brlcad/src/halftone/main.c,v 1.3 2004/06/09 17:57:30 erikg Exp $";
#endif
#ifdef HAVE_CONFIG_H
# include "config.h"
d4 1
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/halftone/main.c,v 1.2 2004/06/08 22:04:15 morrison Exp $";
a62 81
 * $Log: main.c,v $
 * Revision 1.2  2004/06/08 22:04:15  morrison
 * obliterate externs.h
 *
 * Revision 1.1  2004/05/20 15:19:10  morrison
 * Vast reorganization begins.  Sources moved from top-level directories into src/.
 *
 * Revision 11.9  2004/05/10 15:30:42  erikg
 * change conf.h to a wrapped config.h
 *
 * Revision 11.8  2004/04/05 07:47:59  morrison
 * merge of ansi-6-0-branch into HEAD
 *
 * Revision 11.7.2.1  2002/09/19 18:00:58  morrison
 * Initial ANSIfication
 *
 * Revision 11.7  2002/08/20 17:07:30  jra
 * Restoration of entire source tree to Pre-Hartley state
 *
 * Revision 11.5  2000/09/01 02:48:08  mike
 *
 * lint
 *
 * Revision 11.4  2000/08/24 23:09:00  mike
 *
 * lint
 *
 * Revision 11.3  2000/08/24 23:07:42  mike
 *
 * lint
 *
 * Revision 11.2  1996/12/13  14:33:46  jra
 * pix_common_file_size is now bn_common_file_size.
 *
 * Revision 11.1  1995/01/04  10:21:51  mike
 * Release_4.4
 *
 * Revision 10.2  94/08/23  17:50:01  gdurf
 * Added include of conf.h, removed unnecessary externs
 * 
 * Revision 10.1  1991/10/12  06:53:18  mike
 * Release_4.0
 *
 * Revision 2.5  91/09/23  05:47:40  mike
 * Eliminated prototype warning on atof()
 * 
 * Revision 2.4  91/07/27  01:58:57  mike
 * Removed ^X from end of #include directive.  IBM objects, strenuously.
 * 
 * Revision 2.3  91/07/26  21:46:22  mike
 * Made explicit the includes of machine.h, vmath.h, and raytrace.h
 * (Butler fix)
 * 
 * Revision 2.2  91/06/22  05:41:08  cjohnson
 * Add -a flag (Autosizing)
 * Change from local Random numbers to msr_* code from librt
 * 
 * Revision 2.1  90/04/13  01:22:48  cjohnson
 * First Relese.
 * 
 * Revision 1.6  90/04/13  00:29:10  cjohnson
 * Add sharpening.
 * Clean up comments.
 * 
 * Revision 1.5  90/04/10  05:22:54  cjohnson
 * add Floyd-Steinburg dither
 * Add Surpentine processing.
 * 
 * Revision 1.4  90/04/10  03:34:21  cjohnson
 * Add Intensity Levels
 * Add tonescale mapping
 * 
 * Revision 1.3  90/04/10  01:04:08  cjohnson
 * Add Classic halftone method
 * 
 * Revision 1.2  90/04/09  17:12:26  cjohnson
 * Finished parameter cracking and processing threshold halftoning.
 * 
 * Revision 1.1  90/04/09  16:13:04  cjohnson
 * Initial revision
 * 
@


1.2
log
@obliterate externs.h
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header$";
d8 4
a11 2


d63 4
a66 1
 * $Log$
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /cvs/brlcad/halftone/main.c,v 11.9 2004/05/10 15:30:42 erikg Exp $";
a13 1
#include "externs.h"
d61 4
a64 1
 * $Log: main.c,v $
@

