head	14.18;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.6
	rel-7-10-2:14.16
	rel-7-10-0:14.15
	rel-7-8-4:14.12
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.6
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.6
	rel-7-6-branch:14.6.0.6
	rel-7-6-0:14.6
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.4
	bobWinPort:14.6.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.18
date	2007.10.22.08.52.14;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.07.26.01.13.50;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.02.07.21.13.48;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.08.11.21.30.36;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.07.11.14.34.56;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.07.09.09.28.44;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.07.02.19.01.33;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.02.14.04.43.07;	author brlcad;	state Exp;
branches
	14.6.6.1;
next	14.5;

14.5
date	2005.01.30.20.30.18;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.38.18;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.15.32;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.07;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.47;	author morrison;	state Exp;
branches;
next	;

14.6.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.18
log
@more bu_bomb to bu_exit conversions
@
text
@/*                       P N G - I P U . C
 * BRL-CAD
 *
 * Copyright (c) 1992-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file png-ipu.c
 *
 *  Display a PNG file on the Canon CLC-500 Color Laser printer.
 *  This program is based upon pix-ipu.c
 *
 *  Authors -
 *	Michael John Muuss
 *	Lee A. Butler
 *
 *	Options
 *	a	autosize image file
 *	c	clear framebuffer first
 *	d	SCSI device
 *	g	gamma
 *	h	1Kx1K
 *	m	mosaic
 *	n	scanlines (image)
 *	s	squaresize (image)
 *	w	width (image)
 *	x	file_xoffset
 *	y	file_yoffset
 *	z	zoom image display
 *	A	Autoscale
 *	M	Mag_factor
 *	R	Resolution
 *	C	# copies
 *	D	Divisor
 *	N	scr_height
 *	S	scr_height
 *	U	units ( i | m )
 *	W	scr_width
 *	X	scr_xoffset
 *	Y	scr_yoffset
 *	v	verbose;
 *	V	verbose;
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>

#include <png.h>

#include "machine.h"
#include "bu.h"


#include "./canon.h"

#ifdef IPU_FULL_LIB


static png_color_16 def_backgrd={ 255,255,255,255,255 };	/* white */
static double	def_screen_gamma=1.0;	/* Don't add more gamma, by default */

static unsigned char **scanline;	/* 1 scanline pixel buffer */


/*
 *	M A I N
 *
 *	Call parse_args to handle command line arguments first, then
 *	process input.
 */
int
main(int ac, char *av[])
{
    int arg_index;
    struct dsreq *dsp;
    int i;
    /**/
    png_structp png_p;
    png_infop info_p;
    char header[8];
    int bit_depth;
    int color_type;
    png_color_16p input_backgrd;
    double gamma=1.0;
    int file_width, file_height;
    unsigned char *image;


    if ((arg_index = parse_args(ac, av)) >= ac) {
	if (isatty(fileno(stdin)))
	    usage("Specify image on cmd line or redirect from standard input\n");

	if (autosize) fprintf(stderr, "Cannot autosize stdin\n");

    } else if (arg_index+1 < ac)
	(void)fprintf(stderr, "%s: Excess command line arguments ignored\n", *av);
    else if (freopen(av[arg_index], "r", stdin) == NULL) {
	perror(av[arg_index]);
	return(-1);
    }


    /* open the printer SCSI device */
    if ((dsp = dsopen(scsi_device, O_RDWR)) == NULL) {
	perror(scsi_device);
	usage("Cannot open SCSI device\n");
    }

    /* Read the image */
    if( fread( header, 8, 1, stdin ) != 1 )
	bu_exit(1, "png-ipu: ERROR: Failed while reading file header!");

    if( !png_check_sig( (png_bytep)header, 8 ) )
	bu_exit(2, "png-ipu: This is not a valid PNG file\n");

    png_p = png_create_read_struct( PNG_LIBPNG_VER_STRING, NULL, NULL, NULL );
    if( !png_p )
	bu_exit(3, "png_create_read_struct() failed!\n");

    info_p = png_create_info_struct( png_p );
    if( !info_p )
	bu_exit(4, "png_create_info_struct() failed!!\n");

    png_init_io( png_p, stdin );

    png_set_sig_bytes( png_p, 8 );

    png_read_info( png_p, info_p );

    color_type = png_get_color_type( png_p, info_p );

    png_set_expand( png_p );
    bit_depth = png_get_bit_depth( png_p, info_p );
    if( bit_depth == 16 )
	png_set_strip_16( png_p );

    file_width = png_get_image_width( png_p, info_p );
    file_height = png_get_image_height( png_p, info_p );

    if( ipu_debug )
	{
	    switch (color_type)
		{
		case PNG_COLOR_TYPE_GRAY:
		    bu_log( "color type: b/w (bit depth=%d)\n", bit_depth );
		    break;
		case PNG_COLOR_TYPE_GRAY_ALPHA:
		    bu_log( "color type: b/w with alpha channel (bit depth=%d)\n", bit_depth );
		    break;
		case PNG_COLOR_TYPE_PALETTE:
		    bu_log( "color type: color palette (bit depth=%d)\n", bit_depth );
		    break;
		case PNG_COLOR_TYPE_RGB:
		    bu_log( "color type: RGB (bit depth=%d)\n", bit_depth );
		    break;
		case PNG_COLOR_TYPE_RGB_ALPHA:
		    bu_log( "color type: RGB with alpha channel (bit depth=%d)\n", bit_depth );
		    break;
		default:
		    bu_log( "Unrecognized color type (bit depth=%d)\n", bit_depth );
		    break;
		}
	    bu_log( "Image size: %d X %d\n", file_width, file_height );
	}

    if( png_get_bKGD( png_p, info_p, &input_backgrd ) )
	{
	    if( ipu_debug && (color_type == PNG_COLOR_TYPE_GRAY_ALPHA ||
			      color_type == PNG_COLOR_TYPE_RGB_ALPHA ) )
		bu_log( "background color: %d %d %d\n", input_backgrd->red, input_backgrd->green, input_backgrd->blue );
	    png_set_background( png_p, input_backgrd, PNG_BACKGROUND_GAMMA_FILE, 1, 1.0 );
	}
    else
	png_set_background( png_p, &def_backgrd, PNG_BACKGROUND_GAMMA_FILE, 0, 1.0 );

    if( !png_get_gAMA( png_p, info_p, &gamma ) )
	gamma = 0.5;
    png_set_gamma( png_p, def_screen_gamma, gamma );
    if( ipu_debug )
	bu_log( "file gamma: %f, additional screen gamma: %f\n",
		gamma, def_screen_gamma );

    if( ipu_debug )
	{
	    if( png_get_interlace_type( png_p, info_p ) == PNG_INTERLACE_NONE )
		bu_log( "not interlaced\n" );
	    else
		bu_log( "interlaced\n" );
	}

    png_read_update_info( png_p, info_p );

    /* allocate memory for image */
    image = (unsigned char *)bu_calloc( 1, file_width*file_height*3, "image" );

    /* create rows array */
    scanline = (unsigned char **)bu_calloc( file_height, sizeof( unsigned char *), "scanline" );

    /* Change order top-to-bottom */
    for( i=0 ; i<file_height ; i++ )
	scanline[file_height-1-i] = image+(i*file_width*3);

    png_read_image( png_p, scanline );

    if( ipu_debug )
	{
	    png_timep mod_time;
	    png_textp text;
	    int num_text;

	    png_read_end(png_p, info_p );
	    if( png_get_text( png_p, info_p, &text, &num_text ) )
		{
		    int i;

		    for( i=0 ; i<num_text ; i++ )
			bu_log( "%s: %s\n", text[i].key, text[i].text );
		}
	    if( png_get_tIME( png_p, info_p, &mod_time ) )
		bu_log( "Last modified: %d/%d/%d %d:%d:%d\n", mod_time->month, mod_time->day,
			mod_time->year, mod_time->hour, mod_time->minute, mod_time->second );
	}

    if (ipu_debug)
	fprintf(stderr, "Image is %dx%d\n", file_width, file_height);

    if (conv == IPU_RESOLUTION) {
	if (scr_width)
	    scr_width *= 400.0 / (double)param.i;
	else
	    scr_width = file_width * 400.0 / (double)param.i;
	if (scr_height)
	    scr_height *= 400.0 / (double)param.i;
	else
	    scr_height = file_height * 400.0 / (double)param.i;
    } else if (conv == IPU_MAG_FACTOR) {
	if (scr_width)
	    scr_width *= 400.0 / (double)param.i;
	else
	    scr_width = file_width * 400.0 / (double)param.i;
	if (scr_height)
	    scr_height *= 400.0 / (double)param.i;
	else
	    scr_height = file_height * 400.0 / (double)param.i;
    }

    /* Wait for printer to finish what it was doing */
    ipu_acquire(dsp, 120);

    ipu_delete_file(dsp, 1);
    ipu_create_file(dsp, (char)1, ipu_filetype, file_width, file_height, 0);
    ipu_put_image(dsp, (char)1, file_width, file_height, image);

    ipu_print_config(dsp, units, divisor, conv,
		     mosaic, ipu_gamma, tray);

    if( ipu_filetype == IPU_PALETTE_FILE )
	ipu_set_palette(dsp, NULL);

    ipu_print_file(dsp, (char)1, copies, 0/*wait*/,
		   scr_xoff, scr_yoff, scr_width, scr_height, &param);

    /* Wait for print operation to complete */
    ipu_acquire(dsp, 30 * copies);

    dsclose(dsp);
    return(0);
}

#else /* !IPU_FULL_LIB */

int
main(int ac, char *av[])
{
    fprintf(stderr,
	    "%s only works on SGI(tm) systems with dslib support\n", *av);
    return(-1);
}

#endif /* IPU_FULL_LIB */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d113 1
a113 2
	(void)fprintf(stderr,
		      "%s: Excess command line arguments ignored\n", *av);
d128 1
a128 1
	bu_bomb( "png-ipu: ERROR: Failed while reading file header!!!\n" );
d131 1
a131 1
	bu_bomb( "png-ipu: This is not a PNG file!!!\n" );
d135 1
a135 1
	bu_bomb( "png_create_read_struct() failed!!\n" );
d139 1
a139 1
	bu_bomb( "png_create_info_struct() failed!!\n" );
@


14.16
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@a56 3
#ifndef lint
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.15 2007/02/07 21:13:48 erikgreenwald Exp $ (BRL)";
#endif
d60 1
d62 2
a63 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
a69 2
#include <fcntl.h>
#include <stdlib.h>
@


14.15
log
@pull system headers up ahead of our headers
@
text
@a29 6
 *  Source -
 *	SECAD/VLD Computing Consortium
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
 *
d58 1
a58 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.14 2007/01/23 01:13:25 brlcad Exp $ (BRL)";
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.13 2007/01/20 14:36:43 brlcad Exp $ (BRL)";
d76 2
a79 1
#include "png.h"
@


14.13
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.12 2006/08/11 21:30:36 brlcad Exp $ (BRL)";
@


14.12
log
@header cleanup
@
text
@d4 1
a4 1
 * Copyright (c) 1992-2006 United States Government as represented by
d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.11 2006/07/11 14:34:56 brlcad Exp $ (BRL)";
@


14.11
log
@clean up the code to remove the #if IRIX junk and instead consistently use IPU_FULL_LIB which is declared by the canon.h interface header, and that define is set when dslib.h was detected by configure.
@
text
@d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.10 2006/07/09 09:28:44 brlcad Exp $ (BRL)";
a80 1
#include <sys/types.h>
d83 1
d88 1
@


14.10
log
@unnecessary mread declaration
@
text
@d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.9 2006/07/02 19:01:33 brlcad Exp $ (BRL)";
a80 1
#if defined(IRIX) && (IRIX == 4 || IRIX == 5 || IRIX == 6)
d86 1
d100 2
a101 3
int main(ac,av)
     int ac;
     char *av[];
d300 2
a301 1
#else
d303 1
a303 3
main(ac, av)
     int ac;
     char *av[];
d309 2
a310 1
#endif
@


14.9
log
@break out the common mread() function into its own file from pix-ipu and png-ipu, clean it up a little
@
text
@d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.8 2006/01/18 06:46:13 brlcad Exp $ (BRL)";
a86 2
extern int mread(int fd, char *bufp, int n);

@


14.8
log
@update copyright to 2006
@
text
@d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.7 2005/10/23 04:44:29 brlcad Exp $ (BRL)";
d72 1
a72 1
#include <string.h>
d74 1
a74 1
#include <strings.h>
d76 1
a80 23
static int
mread(fd, bufp, n)
     int	fd;
     register char	*bufp;
     int	n;
{
    register int	count = 0;
    register int	nread;

    do {
	nread = read(fd, bufp, (unsigned)n-count);
	if(nread < 0)  {
	    return nread;
	}
	if(nread == 0)
	    return((int)count);
	count += (unsigned)nread;
	bufp += nread;
    } while(count < n);

    return((int)count);
}

d87 3
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1992-2005 United States Government as represented by
d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.6 2005/02/14 04:43:07 brlcad Exp $ (BRL)";
@


14.6
log
@M-x indent-region
@
text
@d30 1
a30 1
 *  
d35 1
a35 1
 *  
d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.5 2005/01/30 20:30:18 brlcad Exp $ (BRL)";
@


14.6.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d35 1
a35 1
 *
d65 1
a65 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.5
log
@update copyright to 2005
@
text
@d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/png-ipu.c,v 14.4 2004/12/21 06:38:18 morrison Exp $ (BRL)";
d82 3
a84 3
int	fd;
register char	*bufp;
int	n;
d86 2
a87 2
	register int	count = 0;
	register int	nread;
d89 10
a98 10
	do {
		nread = read(fd, bufp, (unsigned)n-count);
		if(nread < 0)  {
			return nread;
		}
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);
d100 1
a100 1
	return((int)count);
d122 2
a123 2
int ac;
char *av[];
d125 28
a152 28
	int arg_index;
	struct dsreq *dsp;
	int i;
	/**/
	png_structp png_p;
	png_infop info_p;
	char header[8];
	int bit_depth;
	int color_type;
	png_color_16p input_backgrd;
	double gamma=1.0;
	int file_width, file_height;
	unsigned char *image;


	if ((arg_index = parse_args(ac, av)) >= ac) {
		if (isatty(fileno(stdin)))
			usage("Specify image on cmd line or redirect from standard input\n");

		if (autosize) fprintf(stderr, "Cannot autosize stdin\n");

	} else if (arg_index+1 < ac)
		(void)fprintf(stderr,
			"%s: Excess command line arguments ignored\n", *av);
	else if (freopen(av[arg_index], "r", stdin) == NULL) {
		perror(av[arg_index]);
		return(-1);
	}
d155 5
a159 5
	/* open the printer SCSI device */
	if ((dsp = dsopen(scsi_device, O_RDWR)) == NULL) {
		perror(scsi_device);
		usage("Cannot open SCSI device\n");
	}
d161 3
a163 3
	/* Read the image */
	if( fread( header, 8, 1, stdin ) != 1 )
		bu_bomb( "png-ipu: ERROR: Failed while reading file header!!!\n" );
d165 2
a166 2
	if( !png_check_sig( (png_bytep)header, 8 ) )
		bu_bomb( "png-ipu: This is not a PNG file!!!\n" );
d168 3
a170 3
	png_p = png_create_read_struct( PNG_LIBPNG_VER_STRING, NULL, NULL, NULL );
	if( !png_p )
		bu_bomb( "png_create_read_struct() failed!!\n" );
d172 3
a174 3
	info_p = png_create_info_struct( png_p );
	if( !info_p )
		bu_bomb( "png_create_info_struct() failed!!\n" );
d176 1
a176 1
	png_init_io( png_p, stdin );
d178 1
a178 1
	png_set_sig_bytes( png_p, 8 );
d180 1
a180 1
	png_read_info( png_p, info_p );
d182 1
a182 1
	color_type = png_get_color_type( png_p, info_p );
d184 4
a187 4
	png_set_expand( png_p );
	bit_depth = png_get_bit_depth( png_p, info_p );
	if( bit_depth == 16 )
		png_set_strip_16( png_p );
d189 2
a190 2
	file_width = png_get_image_width( png_p, info_p );
	file_height = png_get_image_height( png_p, info_p );
d192 1
a192 1
	if( ipu_debug )
d194 1
a194 1
		switch (color_type)
d196 18
a213 18
			case PNG_COLOR_TYPE_GRAY:
				bu_log( "color type: b/w (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_GRAY_ALPHA:
				bu_log( "color type: b/w with alpha channel (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_PALETTE:
				bu_log( "color type: color palette (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_RGB:
				bu_log( "color type: RGB (bit depth=%d)\n", bit_depth );
				break;
			case PNG_COLOR_TYPE_RGB_ALPHA:
				bu_log( "color type: RGB with alpha channel (bit depth=%d)\n", bit_depth );
				break;
			default:
				bu_log( "Unrecognized color type (bit depth=%d)\n", bit_depth );
				break;
d215 1
a215 1
		bu_log( "Image size: %d X %d\n", file_width, file_height );
d218 1
a218 1
	if( png_get_bKGD( png_p, info_p, &input_backgrd ) )
d220 4
a223 4
		if( ipu_debug && (color_type == PNG_COLOR_TYPE_GRAY_ALPHA ||
				color_type == PNG_COLOR_TYPE_RGB_ALPHA ) )
			bu_log( "background color: %d %d %d\n", input_backgrd->red, input_backgrd->green, input_backgrd->blue );
		png_set_background( png_p, input_backgrd, PNG_BACKGROUND_GAMMA_FILE, 1, 1.0 );
d225 2
a226 2
	else
		png_set_background( png_p, &def_backgrd, PNG_BACKGROUND_GAMMA_FILE, 0, 1.0 );
d228 6
a233 6
	if( !png_get_gAMA( png_p, info_p, &gamma ) )
		gamma = 0.5;
	png_set_gamma( png_p, def_screen_gamma, gamma );
	if( ipu_debug )
		bu_log( "file gamma: %f, additional screen gamma: %f\n",
			gamma, def_screen_gamma );
d235 1
a235 1
	if( ipu_debug )
d237 4
a240 4
		if( png_get_interlace_type( png_p, info_p ) == PNG_INTERLACE_NONE )
			bu_log( "not interlaced\n" );
		else
			bu_log( "interlaced\n" );
d243 1
a243 1
	png_read_update_info( png_p, info_p );
d245 2
a246 2
	/* allocate memory for image */
	image = (unsigned char *)bu_calloc( 1, file_width*file_height*3, "image" );
d248 2
a249 2
	/* create rows array */
	scanline = (unsigned char **)bu_calloc( file_height, sizeof( unsigned char *), "scanline" );
d251 3
a253 3
	/* Change order top-to-bottom */
	for( i=0 ; i<file_height ; i++ )
		scanline[file_height-1-i] = image+(i*file_width*3);
d255 1
a255 1
	png_read_image( png_p, scanline );
d257 1
a257 1
	if( ipu_debug )
d259 3
a261 3
		png_timep mod_time;
		png_textp text;
		int num_text;
d263 2
a264 2
		png_read_end(png_p, info_p );
		if( png_get_text( png_p, info_p, &text, &num_text ) )
d266 1
a266 1
			int i;
d268 2
a269 2
			for( i=0 ; i<num_text ; i++ )
				bu_log( "%s: %s\n", text[i].key, text[i].text );
d271 3
a273 3
		if( png_get_tIME( png_p, info_p, &mod_time ) )
			bu_log( "Last modified: %d/%d/%d %d:%d:%d\n", mod_time->month, mod_time->day,
				mod_time->year, mod_time->hour, mod_time->minute, mod_time->second );
d276 2
a277 2
	if (ipu_debug)
		fprintf(stderr, "Image is %dx%d\n", file_width, file_height);
d279 19
a297 19
	if (conv == IPU_RESOLUTION) {
		if (scr_width)
			scr_width *= 400.0 / (double)param.i;
		else
			scr_width = file_width * 400.0 / (double)param.i;
		if (scr_height)
			scr_height *= 400.0 / (double)param.i;
		else
			scr_height = file_height * 400.0 / (double)param.i;
	} else if (conv == IPU_MAG_FACTOR) {
		if (scr_width)
			scr_width *= 400.0 / (double)param.i;
		else
			scr_width = file_width * 400.0 / (double)param.i;
		if (scr_height)
			scr_height *= 400.0 / (double)param.i;
		else
			scr_height = file_height * 400.0 / (double)param.i;
	}
d299 2
a300 2
	/* Wait for printer to finish what it was doing */
	ipu_acquire(dsp, 120);
d302 3
a304 3
	ipu_delete_file(dsp, 1);
	ipu_create_file(dsp, (char)1, ipu_filetype, file_width, file_height, 0);
	ipu_put_image(dsp, (char)1, file_width, file_height, image);
d306 2
a307 2
	ipu_print_config(dsp, units, divisor, conv,
			mosaic, ipu_gamma, tray);
d309 2
a310 2
	if( ipu_filetype == IPU_PALETTE_FILE )
		ipu_set_palette(dsp, NULL);
d312 2
a313 2
	ipu_print_file(dsp, (char)1, copies, 0/*wait*/,
			scr_xoff, scr_yoff, scr_width, scr_height, &param);
d315 2
a316 2
	/* Wait for print operation to complete */
	ipu_acquire(dsp, 30 * copies);
d318 2
a319 2
	dsclose(dsp);
	return(0);
d325 2
a326 2
int ac;
char *av[];
d328 3
a330 3
	fprintf(stderr,
		"%s only works on SGI(tm) systems with dslib support\n", *av);
	return(-1);
@


14.4
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1992-2004 United States Government as represented by
d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/png-ipu.c,v 14.3 2004/12/18 06:50:50 morrison Exp $ (BRL)";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1992-2004 by the United States Army.
 *	All rights reserved.
d65 1
a65 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/png-ipu.c,v 14.2 2004/12/18 02:15:32 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file png-ipu.c
d68 1
a68 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/png-ipu.c,v 14.1 2004/11/16 19:42:12 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			P N G - I P U . C
d67 1
a67 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/png-ipu.c,v 1.4 2004/09/03 23:30:56 morrison Exp $ (BRL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d48 1
a48 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/png-ipu.c,v 1.3 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d316 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d48 1
a48 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/png-ipu.c,v 1.2 2004/06/08 22:04:07 morrison Exp $ (BRL)";
a52 2


d54 1
a54 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d48 1
a48 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d51 1
a51 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d48 1
a48 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/canon/png-ipu.c,v 11.10 2004/05/10 15:30:41 erikg Exp $ (BRL)";
a63 1
#include "externs.h"			/* For getopt */
@

