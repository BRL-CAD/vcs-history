head	14.20;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.7
	rel-7-10-2:14.16
	rel-7-10-0:14.16
	rel-7-8-4:14.14
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.6
	rel-7-6-0:14.7
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.20
date	2007.12.16.18.53.47;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.11.21.20.49.05;	author erikgreenwald;	state Exp;
branches;
next	14.18;

14.18
date	2007.11.21.19.28.05;	author erikgreenwald;	state Exp;
branches;
next	14.17;

14.17
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.08.11.21.30.36;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.07.11.14.34.56;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.07.09.10.53.14;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.07.09.09.29.18;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.07.02.19.01.33;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.02.14.04.43.07;	author brlcad;	state Exp;
branches
	14.7.6.1;
next	14.6;

14.6
date	2005.01.30.20.30.18;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.44.31;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.15.32;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.07;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.46;	author morrison;	state Exp;
branches;
next	;

14.7.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.20
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                       P I X - I P U . C
 * BRL-CAD
 *
 * Copyright (c) 1996-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file pix-ipu.c
 *
 *  Print a BRL-CAD .pix or .bw file on the Canon CLC-500 scanner.
 *
 *  Authors -
 *	Lee A. Butler
 *	Michael John Muuss
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 *
 *
 *	Options
 *	a	autosize image file
 *	c	clear framebuffer first
 *	d	SCSI device
 *	g	gamma
 *	h	1Kx1K
 *	m	mosaic
 *	n	scanlines (image)
 *	s	squaresize (image)
 *	w	width (image)
 *	x	file_xoffset
 *	y	file_yoffset
 *	z	zoom image display
 *	A	Autoscale
 *	M	Mag_factor
 *	R	Resolution
 *	C	# copies
 *	D	Divisor
 *	N	scr_height
 *	S	scr_height
 *	U	units ( i | m )
 *	W	scr_width
 *	X	scr_xoffset
 *	Y	scr_yoffset
 *	v	verbose;
 *	V	verbose;
 */

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"

#include "./canon.h"

#ifdef IPU_FULL_LIB

#define _SGI_SOURCE	1	/* IRIX 5.0.1 needs this to def M_BLKSZ */
#define _BSD_TYPES	1	/* IRIX 5.0.1 botch in sys/prctl.h */
#include <ulocks.h>
/* ulocks.h #include's <limits.h> and <malloc.h> */
/* ulocks.h #include's <task.h> for getpid stuff */
/* task.h #include's <sys/prctl.h> */
#include <malloc.h>
/* <malloc.h> #include's <stddef.h> */
#include <fcntl.h>
#include <stdlib.h>

#include "./chore.h"


static 	struct dsreq *dsp;
static	int	fd;

struct chore	chores[3];

struct chore	*await1;
struct chore	*await2;
struct chore	*await3;


/*
 *  While this step looks innocuous, if the file is located on a slow
 *  or busy disk drive or (worse yet) is on an NFS partition,
 *  this can take a long time.
 */
void step1(aa)
     void *aa;
{
    struct chore	*chorep;
    int		pix_y;
    static int	nstarted = 0;

    pix_y = 0;
    for(;;)  {
	if( nstarted < 3 )  {
	    chorep = &chores[nstarted++];
	    chorep->cbuf = malloc( 255*1024 );
	} else {
	    GET( chorep, await1 );
	}

	if( pix_y >= height )  {
	    /* Send through a "done" chore and exit */
	    chorep->pix_y = -1;
	    PUT( await2, chorep );
	    /* Wait for them to percolate through */
	    GET( chorep, await1 );
	    GET( chorep, await1 );
	    break;
	}

	chorep->pix_y = pix_y;
	chorep->todo = 255*1024 / (ipu_bytes_per_pixel*width);	/* Limit 255 Kbytes */
	if( height - pix_y < chorep->todo )  chorep->todo = height - pix_y;
	chorep->buflen = chorep->todo * ipu_bytes_per_pixel * width;

	if( bu_mread( fd, chorep->obuf, chorep->buflen ) != chorep->buflen )  {
	    perror("pix-ipu READ ERROR");
	    fprintf(stderr, "buffer read error, line %d\n", chorep->pix_y);
	    bu_exit(2, NULL);
	}
	pix_y += chorep->todo;

	/* Pass this chore off to next process */
	PUT( await2, chorep );
    }
    bu_exit(0, NULL);
}

/* format conversion */
void step2(aa)
     void	*aa;
{
    struct chore	*chorep;
    register unsigned char	*cp;
    unsigned char *green, *blue;
    int	buf_y;

    for(;;)  {
	GET(chorep, await2);
	if( chorep->pix_y < 0 )  {
	    /* Pass on "done" token and exit */
	    PUT( await3, chorep );
	    break;
	}

	cp = chorep->obuf;

	if( ipu_bytes_per_pixel == 3 )  {
	    green = &chorep->cbuf[width*chorep->todo];
	    blue = &chorep->cbuf[width*chorep->todo*2];

	    for( buf_y = chorep->todo-1; buf_y >= 0; buf_y-- )  {
		int	offset;
		register unsigned char	*rp, *gp, *bp;
		register int		x;

		offset = buf_y * width;
		rp = &chorep->cbuf[offset];
		gp = &green[offset];
		bp = &blue[offset];
		for( x = width-1; x >= 0; x-- )  {
		    *rp++ = *cp++;
		    *gp++ = *cp++;
		    *bp++ = *cp++;
		}
	    }
	} else {
	    /* Monochrome */
	    for( buf_y = chorep->todo-1; buf_y >= 0; buf_y-- )  {
		int	offset;
		register unsigned char	*rp;
		offset = buf_y * width;
		rp = &chorep->cbuf[offset];
		memcpy(rp, cp, width);
		cp += width;
	    }
	}
	PUT( await3, chorep );
    }
    bu_exit(0, NULL);
}

/* output via SCSI bus to IPU.  This is the time consuming step. */
void step3(aa)
     void	*aa;
{
    struct chore	*chorep;
    int		canon_y;

    for(;;)  {
	GET( chorep, await3 );
	if( chorep->pix_y < 0 )  {
	    break;	/* "done" token */
	}

	canon_y = height - chorep->pix_y - chorep->todo;

	ipu_put_image_frag(dsp, 1, 0, canon_y, width, chorep->todo, chorep->cbuf);

	/* Pass this chore off to next process for recycling */
	PUT( await1, chorep );
    }
    bu_exit(0, NULL);	/* exit this thread */
}


/*
 *	M A I N
 *
 *	Call parse_args to handle command line arguments first, then
 *	process input.
 */
int
main(int ac, char *av[])
{
    int arg_index;
    int i;
    int	pid[3];

    if ((arg_index = parse_args(ac, av)) >= ac) {
	if (isatty(fileno(stdin)))
	    usage("Specify image on cmd line or redirect from standard input\n");

	if (autosize) fprintf(stderr, "Cannot autosize stdin\n");

    } else if (arg_index+1 < ac)
	(void)fprintf(stderr,
		      "%s: Excess command line arguments ignored\n", *av);
    else if (freopen(av[arg_index], "r", stdin) == NULL) {
	perror(av[arg_index]);
	return(-1);
    } else if (autosize &&
	       !fb_common_file_size( &width, &height, av[arg_index], ipu_bytes_per_pixel)) {
	fprintf(stderr, "unable to autosize\n");
    }

    /* open the printer SCSI device */
    if ((dsp = dsopen(scsi_device, O_RDWR)) == NULL) {
	perror(scsi_device);
	usage("Cannot open SCSI device\n");
    }

    if (ipu_debug)
	fprintf(stderr, "Image is %dx%d (%d)\n", width, height, width*height*ipu_bytes_per_pixel);

    if (conv == IPU_RESOLUTION) {
	if (scr_width)
	    scr_width *= 400.0 / (double)param.i;
	else
	    scr_width = width * 400.0 / (double)param.i;
	if (scr_height)
	    scr_height *= 400.0 / (double)param.i;
	else
	    scr_height = height * 400.0 / (double)param.i;
    } else if (conv == IPU_MAG_FACTOR) {
	if (scr_width)
	    scr_width *= 400.0 / (double)param.i;
	else
	    scr_width = width * 400.0 / (double)param.i;
	if (scr_height)
	    scr_height *= 400.0 / (double)param.i;
	else
	    scr_height = height * 400.0 / (double)param.i;
    }

    /* Wait for printer to finish what it was doing */
    ipu_acquire(dsp, 120);

    ipu_delete_file(dsp, 1);
    ipu_create_file(dsp, (char)1, ipu_filetype, width, height, 0);

    /* Stream file into the IPU */
    /* Start three threads, then wait for them to finish */
    pid[0] = sproc( step1, PR_SALL|PR_SFDS );
    pid[1] = sproc( step2, PR_SALL|PR_SFDS );
    pid[2] = sproc( step3, PR_SALL|PR_SFDS );

    for( i=0; i<3; i++ )  {
	int	this_pid;
	int	pstat;
	int	j;

	pstat = 0;
	if( (this_pid = wait(&pstat)) <= 0  )  {
	    perror("wait");
	    fprintf(stderr, "wait returned %d\n", this_pid);
	    for( j=0; j<3; j++) kill(pid[j], 9);
	    bu_exit(3, NULL);
	}
	if( (pstat & 0xFF) != 0 )  {
	    fprintf(stderr, "*** child pid %d blew out with error x%x\n", this_pid, pstat);
	    for( j=0; j<3; j++) kill(pid[j], 9);
	    bu_exit(4, NULL);
	}
    }
    /* All children are finished */

    ipu_print_config(dsp, units, divisor, conv,
		     mosaic, ipu_gamma, tray);

    if( ipu_filetype == IPU_PALETTE_FILE )
	ipu_set_palette(dsp, NULL);

    if (strcmp(progname, "pix-ipu")==0)
	ipu_print_file(dsp, (char)1, copies, 0/*wait*/,
		       scr_xoff, scr_yoff, scr_width, scr_height, &param);

    /* Wait for print operation to complete */
    ipu_acquire(dsp, 30 * copies);

    dsclose(dsp);
    return(0);
}

#else /* !IPU_FULL_LIB */

int
main(int ac, char *av[])
{
    fprintf(stderr,
	    "%s only works on SGI(tm) systems with dslib (direct SCSI library) support\n", *av);
    return(-1);
}

#endif /* IPU_FULL_LIB */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.19
log
@pass bu_exit a NULL instead of an empty string
@
text
@d192 1
a192 1
		bcopy( cp, rp, width );
@


14.18
log
@exit->bu_exit where applicable
@
text
@d137 1
a137 1
	    bu_exit(2, "");
d144 1
a144 1
    bu_exit(0, "");
d198 1
a198 1
    bu_exit(0, "");
d221 1
a221 1
    bu_exit(0, "");	/* exit this thread */
d306 1
a306 1
	    bu_exit(3, "");
d311 1
a311 1
	    bu_exit(4, "");
@


14.17
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d137 1
a137 1
	    exit(2);
d144 1
a144 1
    exit(0);
d198 1
a198 1
    exit(0);
d221 1
a221 1
    exit(0);	/* exit this thread */
d306 1
a306 1
	    exit(3);
d311 1
a311 1
	    exit(4);
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a61 3
#ifndef lint
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.15 2007/01/20 14:36:43 brlcad Exp $ (ARL)";
#endif
d66 1
a66 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.15
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d63 1
a63 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.14 2006/08/11 21:30:36 brlcad Exp $ (ARL)";
@


14.14
log
@header cleanup
@
text
@d4 1
a4 1
 * Copyright (c) 1996-2006 United States Government as represented by
d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.13 2006/07/11 14:34:56 brlcad Exp $ (ARL)";
@


14.13
log
@clean up the code to remove the #if IRIX junk and instead consistently use IPU_FULL_LIB which is declared by the canon.h interface header, and that define is set when dslib.h was detected by configure.
@
text
@d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.12 2006/07/09 10:53:14 brlcad Exp $ (ARL)";
a83 1
#include <sys/types.h>
@


14.12
log
@more mread() cleanup.
@
text
@d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.11 2006/07/09 09:29:18 brlcad Exp $ (ARL)";
a77 1
#if defined(IRIX) && (IRIX == 4 || IRIX == 5 || IRIX == 6)
d80 4
a83 2
# define _SGI_SOURCE	1	/* IRIX 5.0.1 needs this to def M_BLKSZ */
# define _BSD_TYPES	1	/* IRIX 5.0.1 botch in sys/prctl.h */
d85 1
a85 1
# include <ulocks.h>
d89 1
a89 1
# include <malloc.h>
d240 2
a241 3
int main(ac,av)
     int ac;
     char *av[];
d342 2
a343 1
#else
d345 1
a345 3
main(ac, av)
     int ac;
     char *av[];
d351 2
a352 1
#endif
@


14.11
log
@refactored mread to libbu, so use bu_mread now
@
text
@d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.10 2006/07/02 19:01:33 brlcad Exp $ (ARL)";
d143 1
a143 1
	    perror("pix-ipu mread");
@


14.10
log
@break out the common mread() function into its own file from pix-ipu and png-ipu, clean it up a little
@
text
@d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.9 2006/01/18 06:46:13 brlcad Exp $ (ARL)";
a94 2
extern int mread(int fd, char *bufp, int n);

d142 1
a142 1
	if( mread( fd, chorep->obuf, chorep->buflen ) != chorep->buflen )  {
@


14.9
log
@update copyright to 2006
@
text
@d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.8 2005/10/23 04:44:29 brlcad Exp $ (ARL)";
d71 1
a71 1
#include <string.h>
d73 1
a73 1
#include <strings.h>
a77 24
/* Read multiple times until quantity is obtained.  Necessary for pipes */
static int
mread(fd, bufp, n)
     int	fd;
     register char	*bufp;
     int	n;
{
    register int	count = 0;
    register int	nread;

    do {
	nread = read(fd, bufp, (unsigned)n-count);
	if(nread < 0)  {
	    return nread;
	}
	if(nread == 0)
	    return((int)count);
	count += (unsigned)nread;
	bufp += nread;
    } while(count < n);

    return((int)count);
}

d95 3
d107 1
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1996-2005 United States Government as represented by
d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.7 2005/02/14 04:43:07 brlcad Exp $ (ARL)";
@


14.7
log
@M-x indent-region
@
text
@d29 1
a29 1
 *  
d33 1
a33 1
 *  
d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.6 2005/01/30 20:30:18 brlcad Exp $ (ARL)";
@


14.7.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d33 1
a33 1
 *
d64 1
a64 1
static char RCSid[] = "@@(#)$Header$ (ARL)";
@


14.6
log
@update copyright to 2005
@
text
@d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/canon/pix-ipu.c,v 14.5 2004/12/21 06:58:41 morrison Exp $ (ARL)";
d81 3
a83 3
int	fd;
register char	*bufp;
int	n;
d85 2
a86 2
	register int	count = 0;
	register int	nread;
d88 10
a97 10
	do {
		nread = read(fd, bufp, (unsigned)n-count);
		if(nread < 0)  {
			return nread;
		}
		if(nread == 0)
			return((int)count);
		count += (unsigned)nread;
		bufp += nread;
	 } while(count < n);
d99 1
a99 1
	return((int)count);
d134 1
a134 1
void *aa;
d136 12
a147 12
	struct chore	*chorep;
	int		pix_y;
	static int	nstarted = 0;

	pix_y = 0;
	for(;;)  {
		if( nstarted < 3 )  {
			chorep = &chores[nstarted++];
			chorep->cbuf = malloc( 255*1024 );
		} else {
			GET( chorep, await1 );
		}
d149 9
a157 9
		if( pix_y >= height )  {
			/* Send through a "done" chore and exit */
			chorep->pix_y = -1;
			PUT( await2, chorep );
			/* Wait for them to percolate through */
			GET( chorep, await1 );
			GET( chorep, await1 );
			break;
		}
d159 11
a169 11
		chorep->pix_y = pix_y;
		chorep->todo = 255*1024 / (ipu_bytes_per_pixel*width);	/* Limit 255 Kbytes */
		if( height - pix_y < chorep->todo )  chorep->todo = height - pix_y;
		chorep->buflen = chorep->todo * ipu_bytes_per_pixel * width;

		if( mread( fd, chorep->obuf, chorep->buflen ) != chorep->buflen )  {
			perror("pix-ipu mread");
			fprintf(stderr, "buffer read error, line %d\n", chorep->pix_y);
			exit(2);
		}
		pix_y += chorep->todo;
d171 4
a174 4
		/* Pass this chore off to next process */
		PUT( await2, chorep );
	}
	exit(0);
d179 1
a179 1
void	*aa;
d181 12
a192 12
	struct chore	*chorep;
	register unsigned char	*cp;
	unsigned char *green, *blue;
	int	buf_y;

	for(;;)  {
		GET(chorep, await2);
		if( chorep->pix_y < 0 )  {
			/* Pass on "done" token and exit */
			PUT( await3, chorep );
			break;
		}
d194 1
a194 1
		cp = chorep->obuf;
d196 17
a212 29
		if( ipu_bytes_per_pixel == 3 )  {
			green = &chorep->cbuf[width*chorep->todo];
			blue = &chorep->cbuf[width*chorep->todo*2];

			for( buf_y = chorep->todo-1; buf_y >= 0; buf_y-- )  {
				int	offset;
				register unsigned char	*rp, *gp, *bp;
				register int		x;

				offset = buf_y * width;
				rp = &chorep->cbuf[offset];
				gp = &green[offset];
				bp = &blue[offset];
				for( x = width-1; x >= 0; x-- )  {
					*rp++ = *cp++;
					*gp++ = *cp++;
					*bp++ = *cp++;
				}
			}
		} else {
			/* Monochrome */
			for( buf_y = chorep->todo-1; buf_y >= 0; buf_y-- )  {
				int	offset;
				register unsigned char	*rp;
					offset = buf_y * width;
				rp = &chorep->cbuf[offset];
				bcopy( cp, rp, width );
				cp += width;
			}
d214 11
a224 1
		PUT( await3, chorep );
d226 3
a228 1
	exit(0);
d233 1
a233 1
void	*aa;
d235 2
a236 2
	struct chore	*chorep;
	int		canon_y;
d238 5
a242 5
	for(;;)  {
		GET( chorep, await3 );
		if( chorep->pix_y < 0 )  {
			break;	/* "done" token */
		}
d244 1
a244 1
		canon_y = height - chorep->pix_y - chorep->todo;
d246 1
a246 1
		ipu_put_image_frag(dsp, 1, 0, canon_y, width, chorep->todo, chorep->cbuf);
d248 4
a251 4
		/* Pass this chore off to next process for recycling */
		PUT( await1, chorep );
	}
	exit(0);	/* exit this thread */
d262 2
a263 2
int ac;
char *av[];
d265 73
a337 19
	int arg_index;
	int i;
	int	pid[3];

	if ((arg_index = parse_args(ac, av)) >= ac) {
		if (isatty(fileno(stdin)))
			usage("Specify image on cmd line or redirect from standard input\n");

		if (autosize) fprintf(stderr, "Cannot autosize stdin\n");

	} else if (arg_index+1 < ac)
		(void)fprintf(stderr,
			"%s: Excess command line arguments ignored\n", *av);
	else if (freopen(av[arg_index], "r", stdin) == NULL) {
		perror(av[arg_index]);
		return(-1);
	} else if (autosize &&
	    !fb_common_file_size( &width, &height, av[arg_index], ipu_bytes_per_pixel)) {
	    	fprintf(stderr, "unable to autosize\n");
d339 4
a342 5

	/* open the printer SCSI device */
	if ((dsp = dsopen(scsi_device, O_RDWR)) == NULL) {
		perror(scsi_device);
		usage("Cannot open SCSI device\n");
d344 2
d347 2
a348 2
	if (ipu_debug)
		fprintf(stderr, "Image is %dx%d (%d)\n", width, height, width*height*ipu_bytes_per_pixel);
d350 2
a351 19
	if (conv == IPU_RESOLUTION) {
		if (scr_width)
			scr_width *= 400.0 / (double)param.i;
		else
			scr_width = width * 400.0 / (double)param.i;
		if (scr_height)
			scr_height *= 400.0 / (double)param.i;
		else
			scr_height = height * 400.0 / (double)param.i;
	} else if (conv == IPU_MAG_FACTOR) {
		if (scr_width)
			scr_width *= 400.0 / (double)param.i;
		else
			scr_width = width * 400.0 / (double)param.i;
		if (scr_height)
			scr_height *= 400.0 / (double)param.i;
		else
			scr_height = height * 400.0 / (double)param.i;
	}
d353 3
a355 2
	/* Wait for printer to finish what it was doing */
	ipu_acquire(dsp, 120);
d357 2
a358 2
	ipu_delete_file(dsp, 1);
	ipu_create_file(dsp, (char)1, ipu_filetype, width, height, 0);
d360 2
a361 41
	/* Stream file into the IPU */
	/* Start three threads, then wait for them to finish */
	pid[0] = sproc( step1, PR_SALL|PR_SFDS );
	pid[1] = sproc( step2, PR_SALL|PR_SFDS );
	pid[2] = sproc( step3, PR_SALL|PR_SFDS );

	for( i=0; i<3; i++ )  {
		int	this_pid;
		int	pstat;
		int	j;

		pstat = 0;
		if( (this_pid = wait(&pstat)) <= 0  )  {
			perror("wait");
			fprintf(stderr, "wait returned %d\n", this_pid);
			for( j=0; j<3; j++) kill(pid[j], 9);
			exit(3);
		}
		if( (pstat & 0xFF) != 0 )  {
			fprintf(stderr, "*** child pid %d blew out with error x%x\n", this_pid, pstat);
			for( j=0; j<3; j++) kill(pid[j], 9);
			exit(4);
		}
	}
	/* All children are finished */

	ipu_print_config(dsp, units, divisor, conv,
			mosaic, ipu_gamma, tray);

	if( ipu_filetype == IPU_PALETTE_FILE )
		ipu_set_palette(dsp, NULL);

	if (strcmp(progname, "pix-ipu")==0)
		ipu_print_file(dsp, (char)1, copies, 0/*wait*/,
			scr_xoff, scr_yoff, scr_width, scr_height, &param);

	/* Wait for print operation to complete */
	ipu_acquire(dsp, 30 * copies);

	dsclose(dsp);
	return(0);
d367 2
a368 2
int ac;
char *av[];
d370 3
a372 3
	fprintf(stderr,
		"%s only works on SGI(tm) systems with dslib (direct SCSI library) support\n", *av);
	return(-1);
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@d4 1
a4 1
 * Copyright (c) 1996-2004 United States Government as represented by
d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/pix-ipu.c,v 14.4 2004/12/21 06:44:31 morrison Exp $ (ARL)";
@


14.4
log
@remove the old distribution notice section
@
text
@a34 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1996-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d64 1
a64 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/pix-ipu.c,v 14.3 2004/12/18 06:50:50 morrison Exp $ (ARL)";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a33 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d67 1
a67 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/pix-ipu.c,v 14.2 2004/12/18 02:15:32 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file pix-ipu.c
d71 1
a71 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/pix-ipu.c,v 14.1 2004/11/16 19:42:12 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			P I X - I P U . C
d70 1
a70 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/pix-ipu.c,v 1.4 2004/09/03 23:30:56 morrison Exp $ (ARL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d51 1
a51 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/pix-ipu.c,v 1.3 2004/08/02 23:01:47 morrison Exp $ (ARL)";
d362 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d51 1
a51 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/canon/pix-ipu.c,v 1.2 2004/06/08 22:04:07 morrison Exp $ (ARL)";
a55 2


d57 1
a57 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d51 1
a51 1
static char RCSid[] = "@@(#)$Header$ (ARL)";
d54 1
a54 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d51 1
a51 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/canon/pix-ipu.c,v 11.11 2004/05/10 15:30:41 erikg Exp $ (ARL)";
a67 1
#include "externs.h"
@

