head	14.20;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.5
	rel-7-10-2:14.17
	rel-7-10-0:14.14
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.6
	rel-7-6-branch:14.6.0.2
	rel-7-6-0:14.6
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.20
date	2007.11.21.15.45.13;	author erikgreenwald;	state Exp;
branches;
next	14.19;

14.19
date	2007.10.22.08.47.38;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.07.26.01.13.51;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.05.18.04.13.43;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.04.29.02.05.02;	author johnranderson;	state Exp;
branches;
next	14.14;

14.14
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.21.21.09.44;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.09.09.05.50.29;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.08.24.04.07.40;	author brlcad;	state Exp;
branches
	14.6.2.1;
next	14.5;

14.5
date	2005.01.30.20.30.19;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.09;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.14.49.31;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.09;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.52;	author morrison;	state Exp;
branches;
next	;

14.6.2.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.20
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@/*                     G - E U C L I D 1 . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file g-euclid1.c
 *			G - E U C L I D . C
 *
 *  Program to convert a BRL-CAD model (in a .g file) to a Euclid "decoded" facetted model
 *  by calling on the NMG booleans.
 *
 *  Author -
 *	John R. Anderson
 */

#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.19 2007/10/22 08:47:38 brlcad Exp $";
#endif

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <signal.h>
#if defined(HAVE_UNISTD_H)
#  include <unistd.h>
#else
#  if defined(HAVE_SYS_UNISTD_H)
#    include <sys/unistd.h>
#  endif
#endif

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"

/* local headers */
#include "../librt/debug.h"


BU_EXTERN(union tree *do_region_end, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data));

static char	usage[] = "Usage: %s [-v] [-s alarm_seconds] [-xX lvl] [-a abs_tol] [-r rel_tol] [-n norm_tol] brlcad_db.g object(s)\n";

static int	NMG_debug;		/* saved arg of -X, for longjmp handling */
static int	verbose;
/* static int	ncpu = 1; */		/* Number of processors */
static int	face_count;		/* Count of faces output for a region id */
static int	alarm_secs;		/* Number of seconds to allow for conversion, 0 means no limit */
static struct db_i		*dbip;
static struct rt_tess_tol	ttol;
static struct bn_tol		tol;
static struct model		*the_model;

static struct db_tree_state	tree_state;	/* includes tol & model */

static int	regions_tried = 0;
static int	regions_converted = 0;
static int	regions_written = 0;

struct facets
{
	struct loopuse *lu;
	struct loopuse *outer_loop;
	fastf_t diag_len;
	int facet_type;
};

void
fastf_print(FILE *fp_out, int length, fastf_t f)
{
	char buffer[128];
	char *ptr;
	int i;
	int buf_len;

	sprintf( &buffer[1], "%f", f );
	buffer[0] = ' ';

	buf_len = strlen( buffer );
	if( buf_len <= length )
	{
		for( i=0 ; i<length ; i++ )
		{
			if( i < buf_len )
				fputc( buffer[i], fp_out );
			else
				fputc( ' ', fp_out );
		}

		return;
	}

	ptr = strchr( buffer, '.' );
	if( (ptr - buffer) > length )
	{
		bu_exit(1, "ERROR: Value (%f) too large for format length (%d)\n" , f, length );
	}

	for( i=0 ; i<length ; i++ )
		fputc( buffer[i], fp_out );
}

/* only used with SIGALRM */
void
handler(int code)
{
	bu_exit( EXIT_FAILURE, "ALARM boolean evaluation aborted\n" );
}

static void
Write_euclid_face(const struct loopuse *lu, const int facet_type, const int regionid, const int face_number, FILE *fp_out)
{
	struct faceuse *fu;
	struct edgeuse *eu;
	plane_t plane;
	int vertex_count=0;

	NMG_CK_LOOPUSE( lu );

	if( verbose )
		bu_log( "Write_euclid_face: lu=x%x, facet_type=%d, regionid=%d, face_number=%d\n",
			lu,facet_type,regionid,face_number );

	if( BU_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
		return;

	if( *lu->up.magic_p != NMG_FACEUSE_MAGIC )
		return;

	for( BU_LIST_FOR( eu , edgeuse , &lu->down_hd ) )
		vertex_count++;

	fprintf( fp_out , "%10d%3d     0.    1%5d" , regionid , facet_type , vertex_count );

	vertex_count = 0;
	for( BU_LIST_FOR( eu , edgeuse , &lu->down_hd ) )
	{
		struct vertex *v;
		int i;

		NMG_CK_EDGEUSE( eu );
		v = eu->vu_p->v_p;
		NMG_CK_VERTEX( v );
/*		fprintf( fp_out , "%10d%8f%8f%8f" , ++vertex_count , V3ARGS( v->vg_p->coord ) ); */
		vertex_count++;
		fprintf( fp_out, "%10d", vertex_count );

		for( i=X; i<=Z; i++ )
			fastf_print( fp_out, 8, v->vg_p->coord[i] );
	}

	fu = lu->up.fu_p;
	NMG_CK_FACEUSE( fu );
	NMG_GET_FU_PLANE( plane , fu );
	fprintf( fp_out , "%10d%15.5f%15.5f%15.5f%15.5f" , face_number , V4ARGS( plane ) );
}

/*	Routine to write an nmgregion in the Euclid "decoded" format */
static void
Write_euclid_region(struct nmgregion *r, struct db_tree_state *tsp, FILE *fp_out)
{
	struct shell *s;
	struct facets *faces = NULL;
	int i,j;

	NMG_CK_REGION( r );

	if( verbose )
		bu_log( "Write_euclid_region: r=x%x\n" , r );

	face_count = 0;

	/* if bounds haven't been calculated, do it now */
	if( r->ra_p == NULL )
		nmg_region_a( r , &tol );

	/* Check if region extents are beyond the limitations of the format */
	for( i=X ; i<ELEMENTS_PER_PT ; i++ )
	{
		if( r->ra_p->min_pt[i] < (-999999.0) )
		{
			bu_log( "g-euclid: Coordinates too large (%g) for Euclid format\n" , r->ra_p->min_pt[i] );
			return;
		}
		if( r->ra_p->max_pt[i] > 9999999.0 )
		{
			bu_log( "g-euclid: Coordinates too large (%g) for Euclid format\n" , r->ra_p->max_pt[i] );
			return;
		}
	}

	/* write out each face in the region */
	for( BU_LIST_FOR( s , shell , &r->s_hd ) )
	{
		struct faceuse *fu;

		for( BU_LIST_FOR( fu , faceuse , &s->fu_hd ) )
		{
			struct loopuse *lu;
			int no_of_loops=0;
			int no_of_holes=0;

			if( fu->orientation != OT_SAME )
				continue;

			/* count the loops in this face */
			for( BU_LIST_FOR( lu , loopuse , &fu->lu_hd ) )
			{
				if( BU_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
					continue;

				no_of_loops++;
			}

			if( !no_of_loops )
				continue;

			faces = (struct facets *)bu_calloc( no_of_loops , sizeof( struct facets ) , "g-euclid: faces" );

			i = 0;
			for( BU_LIST_FOR( lu , loopuse , &fu->lu_hd ) )
			{
				if( BU_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
					continue;

				faces[i].lu = lu;
				if( lu->orientation == OT_OPPOSITE )
					faces[i].facet_type = 1; /* this is a hole */
				else
					faces[i].facet_type = (-1); /* TBD */

				faces[i].outer_loop = NULL;
				i++;
			}

			/* determine type of face
			 * 0 -> simple facet (no holes )
			 * 1 -> a hole
			 * 2 -> a facet that will have holes
			 */

			for( i=0 ; i<no_of_loops ; i++ )
			{
				if( faces[i].facet_type == 1 )
					no_of_holes++;
			}

			if( !no_of_holes )
			{
				/* no holes, so each loop is a simple face (type 0) */
				for( i=0 ; i<no_of_loops ; i++ )
					faces[i].facet_type = 0;
			}
			else if( no_of_loops == no_of_holes + 1 )
			{
				struct loopuse *outer_lu = NULL;

				/* only one outer loop, so find it */
				for( i=0 ; i<no_of_loops ; i++ )
				{
					if( faces[i].facet_type == (-1) )
					{
						outer_lu = faces[i].lu;
						faces[i].facet_type = 2;
						break;
					}
				}

				/* every hole must have this same outer_loop */
				for( i=0 ; i<no_of_loops ; i++ )
				{
					if( faces[i].facet_type == 1 )
						faces[i].outer_loop = outer_lu;
				}
			}
			else
			{
				int loop1,loop2;
				int outer_loop_count;

				/* must determine which holes go with which outer loops */
				for( loop1=0 ; loop1<no_of_loops ; loop1++ )
				{
					if( faces[loop1].facet_type != 1 )
						continue;

					/* loop1 is a hole look for loops containing loop1 */
					outer_loop_count = 0;
					for( loop2=0 ; loop2<no_of_loops ; loop2++ )
					{
						int class;

						if( faces[loop2].facet_type == 1 )
							continue;

						class = nmg_classify_lu_lu( faces[loop1].lu,
								faces[loop2].lu , &tol );

						if( class != NMG_CLASS_AinB )
							continue;

						/* loop1 is inside loop2, possible outer loop */
						faces[loop2].facet_type = (-2);
						outer_loop_count++;
					}

					if( outer_loop_count > 1 )
					{
						/* must choose outer loop from a list of candidates
						 * if any of these candidates contain one of the
						 * other candidates, the outer one can be eliminated
						 * as a possible choice */
						for( loop2=0 ; loop2<no_of_loops ; loop2++ )
						{
							if( faces[loop2].facet_type != (-2) )
								continue;

							for( i=0 ; i<no_of_loops ; i++ )
							{
								if( faces[i].facet_type != (-2) )
									continue;

								if( nmg_classify_lu_lu( faces[i].lu,
									faces[loop2].lu , &tol ) )
								{
									if( faces[i].facet_type != (-2) )
										continue;

									faces[loop2].facet_type = (-1);
									outer_loop_count--;
								}
							}
						}
					}

					if( outer_loop_count != 1 )
					{
						bu_log( "Failed to find outer loop for hole in component %d\n" , tsp->ts_regionid );
						goto outt;
					}

					for( i=0 ; i<no_of_loops ; i++ )
					{
						if( faces[i].facet_type == (-2) )
						{
							faces[i].facet_type = 2;
							faces[loop1].outer_loop = faces[i].lu;
						}
					}
				}

				/* Check */
				for( i=0 ; i<no_of_loops ; i++ )
				{
					if( faces[i].facet_type < 0 )
					{
						/* all holes have been placed
						 * so these must be simple faces
						 */
						faces[i].facet_type = 0;
					}

					if( faces[i].facet_type == 1 && faces[i].outer_loop == NULL )
					{
						bu_log( "Failed to find outer loop for hole in component %d\n" , tsp->ts_regionid );
						goto outt;
					}
				}
			}
			/* output faces with holes first */
			for( i=0 ; i<no_of_loops ; i++ )
			{
				struct loopuse *outer_loop;

				if( faces[i].facet_type != 2 )
					continue;

				outer_loop = faces[i].lu;
				Write_euclid_face( outer_loop , 2 , tsp->ts_regionid , ++face_count , fp_out );

				/* output holes for this face */
				for( j=0 ; j<no_of_loops ; j++ )
				{
					if( j == i )
						continue;

					if( faces[j].outer_loop == outer_loop )
						Write_euclid_face( faces[j].lu , 1 , tsp->ts_regionid , ++face_count , fp_out );
				}
			}
			/* output simple faces */
			for( i=0 ; i<no_of_loops ; i++ )
			{
				if( faces[i].facet_type != 0 )
					continue;
				Write_euclid_face( faces[i].lu , 0 , tsp->ts_regionid , ++face_count , fp_out );
			}

			bu_free( (char *)faces , "g-euclid: faces" );
			faces = (struct facets*)NULL;
		}
	}

	regions_written++;

   outt:
	if( faces )
		bu_free( (char *)faces , "g-euclid: faces" );
	return;
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register int	c;
	double		percent;

	bu_setlinebuf( stderr );

#if MEMORY_LEAK_CHECKING
	rt_g.debug |= DEBUG_MEM_FULL;
#endif

	ttol.magic = RT_TESS_TOL_MAGIC;
	/* Defaults, updated by command line options. */
	ttol.abs = 0.0;
	ttol.rel = 0.01;
	ttol.norm = 0.0;

	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-6;
	tol.para = 1 - tol.perp;

	the_model = (struct model *)NULL;
	tree_state = rt_initial_tree_state;	/* struct copy */
	tree_state.ts_m = &the_model;
	tree_state.ts_tol = &tol;
	tree_state.ts_ttol = &ttol;

	BU_LIST_INIT( &rt_g.rtg_vlfree );	/* for vlist macros */

	rt_init_resource( &rt_uniresource, 0, NULL );

	/* Get command line arguments. */
	while ((c = bu_getopt(argc, argv, "a:n:r:s:vx:P:X:")) != EOF) {
		switch (c) {
		case 's':
			alarm_secs = atoi( bu_optarg );
			break;
		case 'a':		/* Absolute tolerance. */
			ttol.abs = atof(bu_optarg);
			ttol.rel = 0.0;
			break;
		case 'n':		/* Surface normal tolerance. */
			ttol.norm = atof(bu_optarg);
			ttol.rel = 0.0;
			break;
		case 'r':		/* Relative tolerance. */
			ttol.rel = atof(bu_optarg);
			break;
		case 'v':
			verbose++;
			break;
		case 'P':
/*			ncpu = atoi( bu_optarg ); */
			rt_g.debug = 1;	/* XXX DEBUG_ALLRAYS -- to get core dumps */
			break;
		case 'x':
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.debug );
			break;
		case 'X':
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
			NMG_debug = rt_g.NMG_debug;
			break;
		default:
			bu_exit(1, usage, argv[0]);
			break;
		}
	}

	if (bu_optind+1 >= argc) {
		bu_exit(1, usage, argv[0]);
	}

	/* Open BRL-CAD database */
	if ((dbip = db_open( argv[bu_optind] , "r")) == DBI_NULL)
	{
		perror(argv[0]);
		bu_exit(1, "Cannot open %s\n" , argv[bu_optind] );
	}
	if( db_dirbuild( dbip ) ) {
	    bu_exit(1, "db_dirbuild failed\n" );
	}
	bu_optind++;

	/* Walk indicated tree(s).  Each region will be output separately */

	tree_state = rt_initial_tree_state;	/* struct copy */
	the_model = nmg_mm();
	tree_state.ts_m = &the_model;
	tree_state.ts_tol = &tol;
	tree_state.ts_ttol = &ttol;

	(void)db_walk_tree(dbip, argc-bu_optind, (const char **)(&argv[bu_optind]),
		1,			/* ncpu */
		&tree_state,
		0,
		do_region_end,
		nmg_booltree_leaf_tess,
		(genptr_t)NULL);	/* in librt/nmg_bool.c */

	nmg_km( the_model );

#if MEMORY_LEAK_CHECKING
	bu_prmem("After conversions");
#endif

	percent = 0;
	if( regions_tried > 0 )
		percent = ((double)regions_converted * 100) / regions_tried;
	printf( "Tried %d regions, %d converted successfully.  %g%%\n",
		regions_tried, regions_converted, percent );
	percent = 0;
	if( regions_tried > 0 )
		percent = ((double)regions_written * 100) / regions_tried;
	printf( "                  %d written successfully. %g%%\n",
		regions_written, percent );

	/* Release dynamic storage */
	rt_vlist_cleanup();
	db_close(dbip);

#if MEMORY_LEAK_CHECKING
	bu_prmem("After complete G-EUCLID conversion");
#endif

	return 0;
}

/*
*			D O _ R E G I O N _ E N D
*
*  Called from db_walk_tree().
*
*  This routine must be prepared to run in parallel.
*/
union tree *do_region_end(register struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data)
{
	FILE			*fp_out;
	struct nmgregion	*r;
	struct bu_list		vhead;
	struct directory	*dir;
	union tree		*ret_tree;

	if( verbose )
		bu_log( "do_region_end: regionid = %d\n" , tsp->ts_regionid );

	RT_CK_TESS_TOL(tsp->ts_ttol);
	BN_CK_TOL(tsp->ts_tol);
	NMG_CK_MODEL(*tsp->ts_m);

	BU_LIST_INIT(&vhead);

	if (RT_G_DEBUG&DEBUG_TREEWALK || verbose) {
		char	*sofar = db_path_to_string(pathp);
		bu_log("\ndo_region_end(%d %d%%) %s\n",
			regions_tried,
			regions_tried>0 ? (regions_converted * 100) / regions_tried : 0,
			sofar);
		bu_free(sofar, "path string");
	}

	if (curtree->tr_op == OP_NOP)
		return  curtree;

	dir = DB_FULL_PATH_CUR_DIR( pathp );
	if( (fp_out = fopen( dir->d_namep , "w" )) == NULL )
	{
		perror( "g-euclid" );
		bu_exit(1, "ERROR: Cannot open file %s\n" , dir->d_namep);
	}

	bu_log( "\n\nProcessing region %s:\n" , dir->d_namep );

	regions_tried++;

	/* Begin bu_bomb() protection */
	if( BU_SETJUMP )
	{
		/* Error, bail out */
		BU_UNSETJUMP;		/* Relinquish the protection */

		(void)alarm( 0 );

		/* Sometimes the NMG library adds debugging bits when
		 * it detects an internal error, before bombing out.
		 */
		rt_g.NMG_debug = NMG_debug;	/* restore mode */

		/* Release any intersector 2d tables */
		nmg_isect2d_final_cleanup();

		/* Release the tree memory & input regions */
		db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */

		rt_vlist_cleanup();

		/* Get rid of (m)any other intermediate structures */
		if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )
			nmg_km(*tsp->ts_m);
		else
			bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");

		/* Now, make a new, clean model structure for next pass. */
		*tsp->ts_m = nmg_mm();

#if MEMORY_LEAK_CHECKING
		bu_prmem("After Failure:");
#endif


		bu_log( "FAILED: %s\n" , dir->d_namep );

		goto out;
	}
	if( verbose )
		bu_log( "\tEvaluating region\n" );

	signal( SIGALRM , handler );

	(void)alarm( alarm_secs );

	(void)nmg_model_fuse(*tsp->ts_m, tsp->ts_tol);
	ret_tree = nmg_booltree_evaluate(curtree, tsp->ts_tol, &rt_uniresource);	/* librt/nmg_bool.c */

	if( ret_tree )
		r = ret_tree->tr_d.td_r;
	else
		r = (struct nmgregion *)NULL;

	(void)alarm( 0 );

	BU_UNSETJUMP;		/* Relinquish the protection */
	regions_converted++;
	if (r != (struct nmgregion *)NULL)
	{
		struct shell *s;
		int empty_region=0;
		int empty_model=0;

		/* Kill cracks */
		s = BU_LIST_FIRST( shell, &r->s_hd );
		while( BU_LIST_NOT_HEAD( &s->l, &r->s_hd ) )
		{
			struct shell *next_s;

			next_s = BU_LIST_PNEXT( shell, &s->l );
			if( nmg_kill_cracks( s ) )
			{
				if( nmg_ks( s ) )
				{
					empty_region = 1;
					break;
				}
			}
			s = next_s;
		}

		/* kill zero length edgeuses */
		if( !empty_region )
		{
			 empty_model = nmg_kill_zero_length_edgeuses( *tsp->ts_m );
		}

		/* Write the region to the EUCLID file */
		if( !empty_region && !empty_model )
			Write_euclid_region( r , tsp , fp_out );

		bu_log( "Wrote region %s\n" , dir->d_namep );

		if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )
			nmg_km(*tsp->ts_m);
		else
			bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");

		/* Now, make a new, clean model structure for next pass. */
		*tsp->ts_m = nmg_mm();

		rt_vlist_cleanup();
	}

	/*
	 *  Dispose of original tree, so that all associated dynamic
	 *  memory is released now, not at the end of all regions.
	 *  A return of TREE_NULL from this routine signals an error,
	 *  so we need to cons up an OP_NOP node to return.
	 */
	db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */

#if MEMORY_LEAK_CHECKING
	bu_prmem("After Success:");
#endif

out:
	/* close any output file */
	if( fp_out )
		fclose( fp_out );

	BU_GETUNION(curtree, tree);
	curtree->magic = RT_TREE_MAGIC;
	curtree->tr_op = OP_NOP;
	return(curtree);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.19
log
@first 10% of the review of the bu_bomb() instances.  updating many to bu_exit() for the instances where the error or exit condition aren't catastrophic errors (i.e. they wouldn't benefit from having a stack trace of how we got into that state code-wise).  this also makes it easier to refactor usages of log & exit too to the new routine.
@
text
@d32 1
a32 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.18 2007/09/15 16:23:04 brlcad Exp $";
d125 1
d129 1
a129 1
	bu_bomb( "ALARM boolean evaluation aborted\n" );
@


14.18
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d32 1
a32 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.17 2007/07/26 01:13:51 brlcad Exp $";
d118 1
a118 2
		bu_log( "Value (%f) too large for format length (%d)\n" , f, length );
		bu_bomb( "fastf_print\n" );
d503 1
a503 2
			fprintf(stderr, usage, argv[0]);
			exit(1);
d509 1
a509 2
		fprintf(stderr, usage, argv[0]);
		exit(1);
a514 1
		bu_log( "Cannot open %s\n" , argv[bu_optind] );
d516 1
a516 1
		exit(1);
d519 1
a519 2
	    bu_log( "db_dirbuild failed\n" );
	    exit(1);
a605 1
		bu_log(" Cannot open file %s\n" , dir->d_namep );
d607 1
a607 1
		bu_bomb( "g-euclid: Cannot open output file\n" );
d613 1
d623 1
a623 1
		 * it detects an internal error, before bu_bomb().
@


14.17
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d32 1
a32 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.16 2007/05/18 04:13:43 brlcad Exp $";
d41 1
a41 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.16
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@a28 5
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d32 1
a32 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.15 2007/04/29 02:05:02 johnranderson Exp $";
@


14.15
log
@Added check of return value from db_dirbuild()
@
text
@d37 1
a37 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.14 2007/02/02 08:48:28 brlcad Exp $";
d128 1
a128 1
		rt_bomb( "fastf_print\n" );
d138 1
a138 1
	rt_bomb( "ALARM boolean evaluation aborted\n" );
d622 1
a622 1
		rt_bomb( "g-euclid: Cannot open output file\n" );
d628 1
a628 1
	/* Begin rt_bomb() protection */
d637 1
a637 1
		 * it detects an internal error, before rt_bomb().
@


14.14
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d37 1
a37 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.13 2007/01/23 01:13:25 brlcad Exp $";
d531 4
a534 1
	db_dirbuild( dbip );
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.12 2007/01/20 14:36:43 brlcad Exp $";
d482 1
a482 1
	while ((c = getopt(argc, argv, "a:n:r:s:vx:P:X:")) != EOF) {
d485 1
a485 1
			alarm_secs = atoi( optarg );
d488 1
a488 1
			ttol.abs = atof(optarg);
d492 1
a492 1
			ttol.norm = atof(optarg);
d496 1
a496 1
			ttol.rel = atof(optarg);
d502 1
a502 1
/*			ncpu = atoi( optarg ); */
d506 1
a506 1
			sscanf( optarg, "%x", (unsigned int *)&rt_g.debug );
d509 1
a509 1
			sscanf( optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
d519 1
a519 1
	if (optind+1 >= argc) {
d525 1
a525 1
	if ((dbip = db_open( argv[optind] , "r")) == DBI_NULL)
d527 1
a527 1
		bu_log( "Cannot open %s\n" , argv[optind] );
d532 1
a532 1
	optind++;
d542 1
a542 1
	(void)db_walk_tree(dbip, argc-optind, (const char **)(&argv[optind]),
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d37 1
a37 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.11 2006/01/28 00:36:27 brlcad Exp $";
@


14.11
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.10 2006/01/21 21:09:44 brlcad Exp $";
@


14.10
log
@a little less excitement about regions that evaluate to nothing, still report it if we're verbose a little more consistently.
@
text
@d38 1
a38 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.9 2006/01/18 06:46:13 brlcad Exp $";
d44 1
d48 1
a48 1
#include <string.h>
d50 1
a50 1
#include <strings.h>
@


14.9
log
@update copyright to 2006
@
text
@d38 1
a38 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.8 2005/10/23 04:44:29 brlcad Exp $";
d683 1
a683 1
	if (r != 0)
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.7 2005/09/09 05:50:29 brlcad Exp $";
@


14.7
log
@use BRL-CAD instead of brl-cad if only to be at least internally consistent and serve good example
@
text
@d30 1
a30 1
 *  
d34 1
a34 1
 *  
d38 1
a38 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.6 2005/08/24 04:07:40 brlcad Exp $";
d267 1
a267 1
			/* determine type of face 
d388 1
a388 1
						/* all holes have been placed 
d661 1
a661 1
	
@


14.6
log
@replace the deprecated port_setlinebuf() with bu_setlinebuf()
@
text
@d38 1
a38 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.5 2005/01/30 20:30:19 brlcad Exp $";
d524 1
a524 1
	/* Open brl-cad database */
@


14.6.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d34 1
a34 1
 *
d38 1
a38 1
static const char RCSid[] = "$Header$";
d267 1
a267 1
			/* determine type of face
d388 1
a388 1
						/* all holes have been placed
d524 1
a524 1
	/* Open BRL-CAD database */
d661 1
a661 1

@


14.5
log
@update copyright to 2005
@
text
@d38 1
a38 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-euclid1.c,v 14.4 2004/12/21 07:18:57 morrison Exp $";
d452 1
a452 1
	port_setlinebuf( stderr );
@


14.4
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d38 1
a38 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-euclid1.c,v 14.3 2004/12/18 06:50:50 morrison Exp $";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a34 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
d38 1
a38 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-euclid1.c,v 14.2 2004/12/18 02:38:09 morrison Exp $";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file g-euclid1.c
d40 1
a40 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-euclid1.c,v 14.1 2004/11/16 19:42:12 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d39 1
a39 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-euclid1.c,v 1.5 2004/09/03 23:30:56 morrison Exp $";
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-euclid1.c,v 1.4 2004/08/02 23:01:47 morrison Exp $";
d733 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-euclid1.c,v 1.3 2004/06/09 14:49:31 morrison Exp $";
d27 1
a27 1
#ifdef USE_STRING_H
@


1.3
log
@add unistd.h header for getopt()
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /n/xoff/cvs/brlcad/src/conv/g-euclid1.c,v 1.2 2004/06/08 22:04:09 morrison Exp $";
d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header$";
d26 1
a26 2


d35 7
d43 1
d49 2
d52 1
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /cvs/brlcad/conv/g-euclid1.c,v 11.25 2004/05/10 15:30:41 erikg Exp $";
a37 1
#include "externs.h"
@

