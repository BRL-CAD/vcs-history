head	14.18;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.7
	rel-7-10-2:14.15
	rel-7-10-0:14.14
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.6
	rel-7-6-0:14.7
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.18
date	2007.10.28.05.41.46;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.09.07.21.04.31;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.07.26.01.13.51;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.44;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.04.06.19.30.22;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.02.27.05.22.22;	author brlcad;	state Exp;
branches
	14.10.2.1;
next	14.9;

14.9
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.01.30.20.30.20;	author brlcad;	state Exp;
branches
	14.7.6.1;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.51;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.10;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.10;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.55;	author morrison;	state Exp;
branches;
next	;

14.7.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;

14.10.2.1
date	2006.04.07.19.26.25;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.18
log
@more flawfinder and bu_exit conversions
@
text
@/*                      P O L Y - B O T . C
 * BRL-CAD
 *
 * Copyright (c) 2000-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file poly-bot.c
 *			P O L Y - B O T
 *
 *  Program to convert all the polysolids in a BRL-CAD model (in a .g file) to BOT solids
 *
 *  Author -
 *	John R. Anderson
 */

#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.17 2007/09/15 16:23:04 brlcad Exp $";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "db.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "wdb.h"
#include "../librt/debug.h"


#define POLY_BLOCK	512

static const char *usage="\
Usage: poly-bot < file_poly.g > file_bot.g\n\
   or  poly-bot file_poly.g file_bot.g\n\
 Convert polysolids to BOT solids in v4 database format only\n";

int
main(int argc, char **argv)
{
	FILE *ifp;
	FILE *ofp;
	union record record;
	union record *poly;
	long poly_limit=0;
	long curr_poly=0;
	struct bn_tol		tol;
	int polys=0;
	int frees=0;
	int others=0;
	int bots=0;
	int i;
	int num_rec;
	int first=1;

	ifp = stdin;
	ofp = stdout;

	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-6;
	tol.para = 1 - tol.perp;

	if( argc >= 3 ) {
		ifp = fopen(argv[1],"r");
		if( !ifp )  perror(argv[1]);
		ofp = fopen(argv[2],"w");
		if( !ofp )  perror(argv[2]);
		if (ifp == NULL || ofp == NULL) {
			bu_exit(1, "poly-bot: can't open files.");
		}
	}
	if (isatty(fileno(ifp))) {
		bu_exit(1, "%s", usage);
	}

	poly = (union record *)bu_malloc( POLY_BLOCK * sizeof( union record ), "poly" );
	poly_limit = POLY_BLOCK;

	/* Read database file */
	while( fread( (char *)&record, sizeof record, 1, ifp ) == 1  && !feof(ifp) )
	{
top:
		switch( record.u_id )
		{
			case ID_FREE:
				frees++;
				continue;

			case DBID_SKETCH:
				num_rec = bu_glong( (const unsigned char *)&record.skt.skt_count );
				others += num_rec + 1;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
				for( i=0 ; i<num_rec ; i++ )
				{
					if( fread( (char *)&record, sizeof record, 1, ifp ) != 1 )
						bu_exit(1, "Unexpected EOF encountered while copying a SKETCH\n" );
					if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
						bu_exit(1, "Write failed!\n" );
				}
				break;
			case DBID_EXTR:
				num_rec = bu_glong( (const unsigned char *)&record.extr.ex_count );
				others += num_rec + 1;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
				for( i=0 ; i<num_rec ; i++ )
				{
					if( fread( (char *)&record, sizeof record, 1, ifp ) != 1 )
						bu_exit(1, "Unexpected EOF encountered while copying an EXTUSION\n" );
					if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
						bu_exit(1, "Write failed!\n" );
				}
				break;
			case DBID_NMG:
				num_rec = bu_glong( (const unsigned char *)&record.nmg.N_count );
				others += num_rec + 1;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
				for( i=0 ; i<num_rec ; i++ )
				{
					if( fread( (char *)&record, sizeof record, 1, ifp ) != 1 )
						bu_exit(1, "Unexpected EOF encountered while copying an ARBN\n" );
					if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
						bu_exit(1, "Write failed!\n" );
				}
				break;
			case DBID_PIPE:
				num_rec = bu_glong( (const unsigned char *)&record.pwr.pwr_count );
				others += num_rec + 1;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
				for( i=0 ; i<num_rec ; i++ )
				{
					if( fread( (char *)&record, sizeof record, 1, ifp ) != 1 )
						bu_exit(1, "Unexpected EOF encountered while copying a PIPE\n" );
					if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
						bu_exit(1, "Write failed!\n" );
				}
				break;
			case DBID_ARBN:
				num_rec = bu_glong( (const unsigned char *)&record.n.n_grans );
				others += num_rec + 1;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
				for( i=0 ; i<num_rec ; i++ )
				{
					if( fread( (char *)&record, sizeof record, 1, ifp ) != 1 )
						bu_exit(1, "Unexpected EOF encountered while copying an ARBN\n" );
					if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
						bu_exit(1, "Write failed!\n" );
				}
				break;
			case DBID_STRSOL:
				num_rec = DB_SS_NGRAN - 1;
				others += num_rec + 1;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
				for( i=0 ; i<num_rec ; i++ )
				{
					if( fread( (char *)&record, sizeof record, 1, ifp ) != 1 )
						bu_exit(1, "Unexpected EOF encountered while copying a STRSOL\n" );
					if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
						bu_exit(1, "Write failed!\n" );
				}
				break;
			case ID_BSURF:
				num_rec = record.d.d_nknots + record.d.d_nctls;
				others += num_rec + 1;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
				for( i=0 ; i<num_rec ; i++ )
				{
					if( fread( (char *)&record, sizeof record, 1, ifp ) != 1 )
						bu_exit(1, "Unexpected EOF encountered while copying a NURB\n" );
					if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
						bu_exit(1, "Write failed!\n" );
				}
				break;
			case DBID_BOT:
				bots++;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
				num_rec = bu_glong( (const unsigned char *)&record.bot.bot_nrec );
				for( i=0 ; i<num_rec ; i++ )
				{
					if( fread( (char *)&record, sizeof record, 1, ifp ) != 1 )
						bu_exit(1, "Unexpected EOF encountered while copying a BOT\n" );
					if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
						bu_exit(1, "Write failed!\n" );
				}
				break;
			case ID_P_HEAD:
			{
				struct rt_db_internal intern;
				struct bu_external ext;
				struct bu_external ext2;

				polys++;
				curr_poly = 0;
				poly[curr_poly++] = record;	/* struct copy */
				bu_log( "Converting %s\n", poly[0].p.p_name );
				while( fread( (char *)&record, sizeof record, 1, ifp ) == 1  &&
					!feof(ifp) &&
					record.u_id == ID_P_DATA )
				{
					if( curr_poly >= poly_limit )
					{
						poly_limit += POLY_BLOCK;
						poly = (union record *)bu_realloc( poly, poly_limit*sizeof( union record ), "poly realloc" );
					}
					poly[curr_poly++] = record;	/* struct copy */
				}
				BU_INIT_EXTERNAL( &ext );
				ext.ext_nbytes = curr_poly * sizeof( union record );
				ext.ext_buf = (char *)poly;
				if( rt_functab[ID_POLY].ft_import( &intern, &ext, bn_mat_identity, (struct db_i *)NULL, &rt_uniresource ) )
				{
					bu_exit(1, "Import failed for polysolid %s\n", poly[0].p.p_name );
				}
				/* Don't free this ext buffer! */

				if( rt_pg_to_bot( &intern, &tol, &rt_uniresource ) < 0 )  {
					bu_exit(1, "Unable to convert polysolid %s\n", poly[0].p.p_name );
				}

				BU_INIT_EXTERNAL( &ext2 );
				if( rt_functab[ID_POLY].ft_export( &ext2, &intern, 1.0, (struct db_i *)NULL, &rt_uniresource ) < 0 )  {
					bu_exit(1, "Unable to export v4 BoT %s\n", poly[0].p.p_name );
				}
				rt_db_free_internal( &intern, &rt_uniresource );
				if( db_fwrite_external( ofp, poly[0].p.p_name, &ext2 ) < 0 )  {
					bu_exit(1, "Unable to fwrite v4 BoT %s\n", poly[0].p.p_name );
				}
				db_free_external( &ext2 );

				if( feof( ifp ) )
					break;
				goto top;
			}
			case ID_P_DATA:
				/* This should not happen! */
				bu_log( "ERROR: Unattached polysolid data record!\n" );
				continue;
			default:
				if( first )
				{
					if( record.u_id != ID_IDENT ) {
						bu_exit(1, "This is not a BRL-CAD 'v4' database, aborting.\n" );
					}
					first = 0;
				}
				others++;
				if( fwrite( &record, sizeof( union record ), 1, ofp ) < 1 )
					bu_exit(1, "Write failed!\n" );
		}
	}

	bu_log( "%d polysolids converted to BOT solids\n", polys );
	bu_log( "%d BOT solids copied without change\n", bots );
	bu_log( "%d other records copied without change\n", others );
	bu_log( "%d free records skipped\n", frees );

	fclose(ofp);
	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.16 2007/09/07 21:04:31 erikgreenwald Exp $";
d96 1
a96 2
			(void)fprintf(stderr, "poly-bot: can't open files.");
			return 1;
d100 1
a100 2
		(void)fprintf(stderr, usage);
		return 1;
d120 1
a120 1
					bu_bomb( "Write failed!!!\n" );
d124 1
a124 1
						bu_bomb( "Unexpected EOF encountered while copying a SKETCH\n" );
d126 1
a126 1
						bu_bomb( "Write failed!!!\n" );
d133 1
a133 1
					bu_bomb( "Write failed!!!\n" );
d137 1
a137 1
						bu_bomb( "Unexpected EOF encountered while copying an EXTUSION\n" );
d139 1
a139 1
						bu_bomb( "Write failed!!!\n" );
d146 1
a146 1
					bu_bomb( "Write failed!!!\n" );
d150 1
a150 1
						bu_bomb( "Unexpected EOF encountered while copying an ARBN\n" );
d152 1
a152 1
						bu_bomb( "Write failed!!!\n" );
d159 1
a159 1
					bu_bomb( "Write failed!!!\n" );
d163 1
a163 1
						bu_bomb( "Unexpected EOF encountered while copying a PIPE\n" );
d165 1
a165 1
						bu_bomb( "Write failed!!!\n" );
d172 1
a172 1
					bu_bomb( "Write failed!!!\n" );
d176 1
a176 1
						bu_bomb( "Unexpected EOF encountered while copying an ARBN\n" );
d178 1
a178 1
						bu_bomb( "Write failed!!!\n" );
d185 1
a185 1
					bu_bomb( "Write failed!!!\n" );
d189 1
a189 1
						bu_bomb( "Unexpected EOF encountered while copying a STRSOL\n" );
d191 1
a191 1
						bu_bomb( "Write failed!!!\n" );
d198 1
a198 1
					bu_bomb( "Write failed!!!\n" );
d202 1
a202 1
						bu_bomb( "Unexpected EOF encountered while copying a NURB\n" );
d204 1
a204 1
						bu_bomb( "Write failed!!!\n" );
d210 1
a210 1
					bu_bomb( "Write failed!!!\n" );
d215 1
a215 1
						bu_bomb( "Unexpected EOF encountered while copying a BOT\n" );
d217 1
a217 1
						bu_bomb( "Write failed!!!\n" );
d246 1
a246 2
					bu_log( "Import failed for polysolid %s\n", poly[0].p.p_name );
					bu_bomb( "Import failed for polysolid\n" );
d251 1
a251 2
					bu_log( "Unable to convert polysolid %s\n", poly[0].p.p_name );
					bu_bomb( "Unable to convert!!!\n" );
d256 1
a256 2
					bu_log( "Unable to export v4 BoT %s\n", poly[0].p.p_name );
					bu_bomb( "Unable to convert!!!\n" );
d260 1
a260 2
					bu_log( "Unable to fwrite v4 BoT %s\n", poly[0].p.p_name );
					bu_bomb( "Unable to convert!!!\n" );
d269 2
a270 2
				/* This should not happen!!!! */
				bu_log( "ERROR: Unattached polysolid data record!!!!\n" );
d276 1
a276 2
						bu_log( "This is not a BRL-CAD 'v4' database, aborting.\n" );
						return 1;
d282 1
a282 1
					bu_bomb( "Write failed!!!\n" );
@


14.16
log
@migrated the contents of src/librt/plane.r to include/bn.h
@
text
@d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.15 2007/07/26 01:13:51 brlcad Exp $";
d39 2
a40 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.15
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.14 2007/01/27 01:41:32 brlcad Exp $";
a54 1
#include "../librt/plane.h"
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a27 4
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.13 2007/01/23 01:13:25 brlcad Exp $";
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.12 2007/01/20 14:36:44 brlcad Exp $";
d91 6
a96 6
        /* XXX These need to be improved */
        tol.magic = BN_TOL_MAGIC;
        tol.dist = 0.005;
        tol.dist_sq = tol.dist * tol.dist;
        tol.perp = 1e-6;
        tol.para = 1 - tol.perp;
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.11 2006/04/06 19:30:22 brlcad Exp $";
@


14.11
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.10 2006/02/27 05:22:22 brlcad Exp $";
@


14.10
log
@a variety of warning quellings, missing stdlib, calls to exit with a negative, ws.
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.9 2006/01/18 06:46:13 brlcad Exp $";
d49 3
@


14.10.2.1
log
@update from HEAD
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.10 2006/02/27 05:22:22 brlcad Exp $";
a48 3
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
@


14.9
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.8 2005/10/23 04:44:30 brlcad Exp $";
d41 1
a41 2


d45 1
a45 1
#include <string.h>
d47 1
a47 1
#include <strings.h>
d60 1
d103 1
a103 1
			exit(1);
d108 1
a108 1
		exit(1);
d289 1
a289 1
						exit( 1 );
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2000-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.7 2005/01/30 20:30:20 brlcad Exp $";
@


14.7
log
@update copyright to 2005
@
text
@d29 1
a29 1
 *  
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/poly-bot.c,v 14.6 2004/12/21 07:32:29 morrison Exp $";
@


14.7.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d36 1
a36 1
static const char RCSid[] = "$Header$";
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/poly-bot.c,v 14.5 2004/12/21 06:58:41 morrison Exp $";
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a32 2
 *  
 *
d36 1
a36 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/poly-bot.c,v 14.4 2004/12/21 06:50:58 morrison Exp $";
@


14.4
log
@remove the old distribution notice section
@
text
@a34 3
 *  Copyright Notice -
 *	This software is Copyright (C) 2000-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d38 1
a38 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/poly-bot.c,v 14.3 2004/12/18 06:50:51 morrison Exp $";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a33 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Pacakge" agreement.
d41 1
a41 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/poly-bot.c,v 14.2 2004/12/18 02:38:10 morrison Exp $";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file poly-bot.c
d45 1
a45 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/poly-bot.c,v 14.1 2004/11/16 19:42:13 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d44 1
a44 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/poly-bot.c,v 1.4 2004/09/03 23:30:56 morrison Exp $";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/poly-bot.c,v 1.3 2004/08/02 23:01:47 morrison Exp $";
d295 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/poly-bot.c,v 1.2 2004/06/08 22:04:10 morrison Exp $";
d33 1
a33 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header$";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvs/brlcad/conv/poly-bot.c,v 11.12 2004/05/10 15:30:42 erikg Exp $";
a41 1
#include "externs.h"
@

