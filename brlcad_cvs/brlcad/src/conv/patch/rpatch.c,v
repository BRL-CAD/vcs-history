head	1.13;
access;
symbols
	rel-7-10-4:1.8
	STABLE:1.8.0.2
	rel-7-10-2:1.8
	rel-7-10-0:1.8
	rel-7-8-4:1.4
	rel-7-8-2:1.4
	rel-7-8-0:1.4
	trimnurbs-branch:1.3.0.2
	help:1.3
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.13
date	2007.11.21.20.49.07;	author erikgreenwald;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.21.19.05.59;	author erikgreenwald;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.28.05.41.46;	author brlcad;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.14.22.15.55;	author brlcad;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.15.16.23.05;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.20.08.19.48;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.02.08.48.29;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.23.01.13.26;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.20.14.36.48;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.06.19.30.22;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.28.00.36.28;	author brlcad;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.36.04;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.36.04;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.01;	author brlcad;	state Exp;
branches;
next	;

1.3.2.1
date	2006.04.07.19.26.26;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


1.13
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                        R P A T C H . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file rpatch.c
 *
 *	Front end to patch.
 *	John R. Anderson
 *		Based on rpatch.f by Bill Mermagen Jr.
 *     This pre-processor program alters the data file format
 *     for use by the main conversion program.
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.12 2007/11/21 19:05:59 erikgreenwald Exp $ (BRL)";
#endif

#define	MAXLINELEN	256

static const char *usage="Usage:\n\trpatch [-D] [-3] < fastgen_input_file > file.rp\n\
	where -D means that type 3 components are donuts (rather than triangles)\n\
	and -3 indicates that the input is in FASTGEN3 format\n";

static int fast3;

double
get_ftn_float(char *str, unsigned int start_col, char *format)
{
	char *ptr;
	char tmp_str[MAXLINELEN];
	int width,precision;
	int leading_spaces=1;
	int i;

	/* Check that format is legal for floating point or double */
	ptr = format;
	if( *ptr != 'F' && *ptr != 'f' && *ptr != 'E' && *ptr != 'e' && *ptr != 'D' && *ptr != 'd' )
	{
		fprintf( stderr , "Get_ftn_float( str=%s\n, start_col=%d, format=%s )\n",
				str, start_col, ptr );
		fprintf( stderr , "\tformat must be F, E, or D type\n" );
		bu_exit( 1, NULL );
	}

	/* if start column is beyond end of input string, return zero */
	if( start_col >= strlen( str ) )
		return( (double)0.0 );

	/* get width from format spec */
	ptr++;
	width = atoi( ptr );

	/* make sure input string will fit in tmp_str (minus trailing NULL and a decimal point) */
	if( width > MAXLINELEN-2 )
	{
		fprintf( stderr , "Get_ftn_float( str=%s\n, start_col=%d, format=%s )\n",
				str, start_col, ptr );
		fprintf( stderr , "\tfield width (%d) in format is too large. Max allowed is %d\n",
				width , MAXLINELEN-2 );
		bu_exit( 1, NULL );
	}

	/* copy the input string to tmp_str, converting
	 * imbedded blanks to zeros and 'D' or 'd' to 'e'
	 */
	for( i=0 ; i<width ; i++ )
	{
		if( isspace( str[start_col+i] ) )
		{
			if( leading_spaces )
				tmp_str[i] = ' ';
			else
				tmp_str[i] = '0';
		}
		else if( str[start_col+i] == 'D' || str[start_col+i] == 'd' )
		{
			leading_spaces = 0;
			tmp_str[i] = 'e';
		}
		else
		{
			leading_spaces = 0;
			tmp_str[i] = str[start_col+i];
		}
	}
	tmp_str[width] = '\0';

	/* get precision from format spec */
	ptr = strchr( ptr , '.' );
	if( ptr )
		precision = atoi( ++ptr );
	else
		precision = 0;


	/* if there is a decimal point, let atof handle the rest (including exponent) */
	if( !strchr( tmp_str , '.' ) && precision > 0 )
	{
		/* insert a decimal point where needed */
		for( i=0 ; i<precision ; i++ )
			tmp_str[width-i] = tmp_str[width-i-1];
		tmp_str[width-precision] = '.';
		tmp_str[width+1] = '\0';

		/* and atof can handle it from here */
	}

	return( atof( tmp_str ) );
}

int
get_ftn_int(char *str, unsigned int start_col, char *format)
{
	char *ptr;
	char tmp_str[MAXLINELEN];
	int leading_spaces=1;
	int width;
	int i;

	/* check that format id for an integer */
	ptr = format;
	if( *ptr != 'I' && *ptr != 'i' )
	{
		fprintf( stderr , "Get_ftn_int( str=%s\n, start_col=%d, format=%s )\n",
				str, start_col, ptr );
		fprintf( stderr , "\tformat must be I type\n" );
		bu_exit( 1, NULL );
	}

	/* if start column is beyond end of input string, return zero */
	if( start_col >= strlen( str ) )
		return( 0 );

	/* get width from format spec */
	ptr++;
	width = atoi( ptr );

	/* make sure input string will fit in tmp_str */
	if( width > MAXLINELEN-1 )
	{
		fprintf( stderr , "Get_ftn_int( str=%s\n, start_col=%d, format=%s )\n",
				str, start_col, ptr );
		fprintf( stderr , "\tfield width (%d) in format is too large. Max allowed is %d\n",
				width , MAXLINELEN-1 );
		bu_exit( 1, NULL );
	}

	/* copy the input string to tmp_str, converting
	 * imbedded blanks to zeros */
	for( i=0 ; i<width ; i++ )
	{
		if( isspace( str[start_col+i] ) )
		{
			if( leading_spaces )
				tmp_str[i] = ' ';
			else
				tmp_str[i] = '0';
		}
		else
		{
			leading_spaces = 0;
			tmp_str[i] = str[start_col+i];
		}
	}
	tmp_str[width] = '\0';

	return( atoi( tmp_str ) );
}

int
main(int argc, char **argv)
{
	char line[MAXLINELEN];
	float x,y,z,hold,work;
	char minus;
	int ity,ity1,ico,isq[8],m,n,cc,tmp;
	int i;
	int type3_is_donut=0;
	int c;

	fast3 = 0;
	if( argc > 2 )
	{
		bu_exit(1, "%s", usage );
	}

	/* Get command line arguments. */
	while ((c = bu_getopt(argc, argv, "D3")) != EOF)
	{
		switch (c)
		{
			case 'D':  /* donuts */
				type3_is_donut = 1;
				break;
			case '3':	/* FASTGEN3 format?? */
				fast3 = 1;
				break;
			default:
				fprintf( stderr, "Illegal option (%c)\n", c );
			case '?':
				bu_exit(1, "%s", usage );
		}
	}

	while( bu_fgets(line, sizeof(line), stdin) )
	{
		if( strlen( line ) <= 1 )
			continue;
		line[strlen(line)-1] = '\0';	/* eliminate \n */

		if( fast3 )
		{
			x = get_ftn_float( line , 0 , "f10.3" );
			y = get_ftn_float( line , 10 , "f10.3" );
			z = get_ftn_float( line , 20 , "f10.3" );
			tmp = get_ftn_int( line , 30 , "i6" );
			cc = get_ftn_int( line , 36 , "i4" );
			isq[0] = get_ftn_int( line , 40 , "i10" );

			for( i=1 ; i<8 ; i++ )
				isq[i] = get_ftn_int( line , 50 + (i-1)*4 , "i4" );

			m = get_ftn_int( line , 74 , "i3" );
			n = get_ftn_int( line , 77 , "i3" );
		}
		else
		{
			x = get_ftn_float( line , 0 , "f8.3" );
			y = get_ftn_float( line , 8 , "f8.3" );
			z = get_ftn_float( line , 16 , "f9.3" );
			tmp = get_ftn_int( line , 25 , "i6" );
			cc = get_ftn_int( line , 31 , "i4" );
			isq[0] = get_ftn_int( line , 35 , "i11" );

			for( i=1 ; i<8 ; i++ )
				isq[i] = get_ftn_int( line , 46 + (i-1)*4 , "i4" );

			m = get_ftn_int( line , 74 , "i3" );
			n = get_ftn_int( line , 77 , "i3" );
		}

		/* get plate mode flag */
		minus = '+';
		if( tmp < 0 )
		{
			tmp = (-tmp);
			minus = '-';
		}

		/* get solid type */
		hold = (float)tmp/10000.0;
		work = hold * 10.0;
		ity = work;
		hold = work - ity;
		if( ity == 4 )
			ity = 8;
		else if( ity == 3 && type3_is_donut )
			ity = 4;

		/* get thickness */
		work = hold * 100.0;
		ico = work;
		hold = work - ico;

		/* get space code */
		work = hold * 10.0;
		ity1 = work;
		hold = work - ity1;

		/* write output */
		printf( "%8.3f %8.3f %9.3f %c %2d %2d %1d %4d %11d ",
			x,y,z,minus,ity,ico,ity1,cc,isq[0] );
		for( i=1 ; i<8 ; i++ )
			printf( "%5d" , isq[i] );
		printf( " %3d %3d\n" , m , n );

	}
	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.12
log
@exit->bu_exit where applicable
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.11 2007/10/28 05:41:46 brlcad Exp $ (BRL)";
d69 1
a69 1
		bu_exit( 1, "" );
d87 1
a87 1
		bu_exit( 1, "" );
d154 1
a154 1
		bu_exit( 1, "" );
d172 1
a172 1
		bu_exit( 1, "" );
@


1.11
log
@more flawfinder and bu_exit conversions
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.10 2007/10/14 22:15:55 brlcad Exp $ (BRL)";
d69 1
a69 1
		exit( 1 );
d87 1
a87 1
		exit( 1 );
d154 1
a154 1
		exit( 1 );
d172 1
a172 1
		exit( 1 );
@


1.10
log
@more level 4 flawfinder issues.  mostly string length clampages.
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.9 2007/09/15 16:23:05 brlcad Exp $ (BRL)";
d211 1
a211 2
		fprintf( stderr, usage );
		exit( 1 );
d228 1
a228 2
				fprintf( stderr, usage );
				exit( 1 );
@


1.9
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.8 2007/02/20 08:19:48 brlcad Exp $ (BRL)";
d47 1
a47 1
static char *usage="Usage:\n\trpatch [-D] [-3] < fastgen_input_file > file.rp\n\
@


1.8
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d35 2
a36 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.7 2007/02/02 08:48:29 brlcad Exp $ (BRL)";
@


1.7
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.6 2007/01/23 01:13:26 brlcad Exp $ (BRL)";
d237 1
a237 1
	while( fgets(line, sizeof(line), stdin) )
@


1.6
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.5 2007/01/20 14:36:48 brlcad Exp $ (BRL)";
d219 1
a219 1
	while ((c = getopt(argc, argv, "D3")) != EOF)
@


1.5
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.4 2006/04/06 19:30:22 brlcad Exp $ (BRL)";
@


1.4
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.3 2006/01/28 00:36:28 brlcad Exp $ (BRL)";
@


1.3
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d36 1
a36 1
#if defined HAVE_STRING_H
d41 3
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.2 2006/01/18 06:46:14 brlcad Exp $ (BRL)";
@


1.3.2.1
log
@update from HEAD
@
text
@d36 1
a36 1
#ifdef HAVE_STRING_H
a40 3
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.3 2006/01/28 00:36:28 brlcad Exp $ (BRL)";
@


1.2
log
@update copyright to 2006
@
text
@d32 1
a35 2
#include <stdlib.h>

d37 1
a37 1
#include <string.h>
d39 1
a39 1
#include <strings.h>
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/patch/rpatch.c,v 1.1 2005/10/27 03:36:04 brlcad Exp $ (BRL)";
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/patch/rpatch.c,v 14.4 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
@


1.1.2.1
log
@file rpatch.c was added on branch rel-7-6-branch on 2005-11-13 17:45:01 +0000
@
text
@d1 320
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 320
/*                        R P A T C H . C
 * BRL-CAD
 *
 * Copyright (C) 2004-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file rpatch.c
 *
 *	Front end to patch.
 *	John R. Anderson
 *		Based on rpatch.f by Bill Mermagen Jr.
 *     This pre-processor program alters the data file format
 *     for use by the main conversion program.
 */

#include "common.h"

#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <stdlib.h>

#if defined HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#ifndef lint
static const char RCSid[] = "@@(#)$Header$ (BRL)";
#endif

#define	MAXLINELEN	256

static char *usage="Usage:\n\trpatch [-D] [-3] < fastgen_input_file > file.rp\n\
	where -D means that type 3 components are donuts (rather than triangles)\n\
	and -3 indicates that the input is in FASTGEN3 format\n";

static int fast3;

double
get_ftn_float(char *str, unsigned int start_col, char *format)
{
	char *ptr;
	char tmp_str[MAXLINELEN];
	int width,precision;
	int leading_spaces=1;
	int i;

	/* Check that format is legal for floating point or double */
	ptr = format;
	if( *ptr != 'F' && *ptr != 'f' && *ptr != 'E' && *ptr != 'e' && *ptr != 'D' && *ptr != 'd' )
	{
		fprintf( stderr , "Get_ftn_float( str=%s\n, start_col=%d, format=%s )\n",
				str, start_col, ptr );
		fprintf( stderr , "\tformat must be F, E, or D type\n" );
		exit( 1 );
	}

	/* if start column is beyond end of input string, return zero */
	if( start_col >= strlen( str ) )
		return( (double)0.0 );

	/* get width from format spec */
	ptr++;
	width = atoi( ptr );

	/* make sure input string will fit in tmp_str (minus trailing NULL and a decimal point) */
	if( width > MAXLINELEN-2 )
	{
		fprintf( stderr , "Get_ftn_float( str=%s\n, start_col=%d, format=%s )\n",
				str, start_col, ptr );
		fprintf( stderr , "\tfield width (%d) in format is too large. Max allowed is %d\n",
				width , MAXLINELEN-2 );
		exit( 1 );
	}

	/* copy the input string to tmp_str, converting
	 * imbedded blanks to zeros and 'D' or 'd' to 'e'
	 */
	for( i=0 ; i<width ; i++ )
	{
		if( isspace( str[start_col+i] ) )
		{
			if( leading_spaces )
				tmp_str[i] = ' ';
			else
				tmp_str[i] = '0';
		}
		else if( str[start_col+i] == 'D' || str[start_col+i] == 'd' )
		{
			leading_spaces = 0;
			tmp_str[i] = 'e';
		}
		else
		{
			leading_spaces = 0;
			tmp_str[i] = str[start_col+i];
		}
	}
	tmp_str[width] = '\0';

	/* get precision from format spec */
	ptr = strchr( ptr , '.' );
	if( ptr )
		precision = atoi( ++ptr );
	else
		precision = 0;


	/* if there is a decimal point, let atof handle the rest (including exponent) */
	if( !strchr( tmp_str , '.' ) && precision > 0 )
	{
		/* insert a decimal point where needed */
		for( i=0 ; i<precision ; i++ )
			tmp_str[width-i] = tmp_str[width-i-1];
		tmp_str[width-precision] = '.';
		tmp_str[width+1] = '\0';

		/* and atof can handle it from here */
	}

	return( atof( tmp_str ) );
}

int
get_ftn_int(char *str, unsigned int start_col, char *format)
{
	char *ptr;
	char tmp_str[MAXLINELEN];
	int leading_spaces=1;
	int width;
	int i;

	/* check that format id for an integer */
	ptr = format;
	if( *ptr != 'I' && *ptr != 'i' )
	{
		fprintf( stderr , "Get_ftn_int( str=%s\n, start_col=%d, format=%s )\n",
				str, start_col, ptr );
		fprintf( stderr , "\tformat must be I type\n" );
		exit( 1 );
	}

	/* if start column is beyond end of input string, return zero */
	if( start_col >= strlen( str ) )
		return( 0 );

	/* get width from format spec */
	ptr++;
	width = atoi( ptr );

	/* make sure input string will fit in tmp_str */
	if( width > MAXLINELEN-1 )
	{
		fprintf( stderr , "Get_ftn_int( str=%s\n, start_col=%d, format=%s )\n",
				str, start_col, ptr );
		fprintf( stderr , "\tfield width (%d) in format is too large. Max allowed is %d\n",
				width , MAXLINELEN-1 );
		exit( 1 );
	}

	/* copy the input string to tmp_str, converting
	 * imbedded blanks to zeros */
	for( i=0 ; i<width ; i++ )
	{
		if( isspace( str[start_col+i] ) )
		{
			if( leading_spaces )
				tmp_str[i] = ' ';
			else
				tmp_str[i] = '0';
		}
		else
		{
			leading_spaces = 0;
			tmp_str[i] = str[start_col+i];
		}
	}
	tmp_str[width] = '\0';

	return( atoi( tmp_str ) );
}

int
main(int argc, char **argv)
{
	char line[MAXLINELEN];
	float x,y,z,hold,work;
	char minus;
	int ity,ity1,ico,isq[8],m,n,cc,tmp;
	int i;
	int type3_is_donut=0;
	int c;

	fast3 = 0;
	if( argc > 2 )
	{
		fprintf( stderr, usage );
		exit( 1 );
	}

	/* Get command line arguments. */
	while ((c = getopt(argc, argv, "D3")) != EOF)
	{
		switch (c)
		{
			case 'D':  /* donuts */
				type3_is_donut = 1;
				break;
			case '3':	/* FASTGEN3 format?? */
				fast3 = 1;
				break;
			default:
				fprintf( stderr, "Illegal option (%c)\n", c );
			case '?':
				fprintf( stderr, usage );
				exit( 1 );
		}
	}

	while( fgets(line, sizeof(line), stdin) )
	{
		if( strlen( line ) <= 1 )
			continue;
		line[strlen(line)-1] = '\0';	/* eliminate \n */

		if( fast3 )
		{
			x = get_ftn_float( line , 0 , "f10.3" );
			y = get_ftn_float( line , 10 , "f10.3" );
			z = get_ftn_float( line , 20 , "f10.3" );
			tmp = get_ftn_int( line , 30 , "i6" );
			cc = get_ftn_int( line , 36 , "i4" );
			isq[0] = get_ftn_int( line , 40 , "i10" );

			for( i=1 ; i<8 ; i++ )
				isq[i] = get_ftn_int( line , 50 + (i-1)*4 , "i4" );

			m = get_ftn_int( line , 74 , "i3" );
			n = get_ftn_int( line , 77 , "i3" );
		}
		else
		{
			x = get_ftn_float( line , 0 , "f8.3" );
			y = get_ftn_float( line , 8 , "f8.3" );
			z = get_ftn_float( line , 16 , "f9.3" );
			tmp = get_ftn_int( line , 25 , "i6" );
			cc = get_ftn_int( line , 31 , "i4" );
			isq[0] = get_ftn_int( line , 35 , "i11" );

			for( i=1 ; i<8 ; i++ )
				isq[i] = get_ftn_int( line , 46 + (i-1)*4 , "i4" );

			m = get_ftn_int( line , 74 , "i3" );
			n = get_ftn_int( line , 77 , "i3" );
		}

		/* get plate mode flag */
		minus = '+';
		if( tmp < 0 )
		{
			tmp = (-tmp);
			minus = '-';
		}

		/* get solid type */
		hold = (float)tmp/10000.0;
		work = hold * 10.0;
		ity = work;
		hold = work - ity;
		if( ity == 4 )
			ity = 8;
		else if( ity == 3 && type3_is_donut )
			ity = 4;

		/* get thickness */
		work = hold * 100.0;
		ico = work;
		hold = work - ico;

		/* get space code */
		work = hold * 10.0;
		ity1 = work;
		hold = work - ity1;

		/* write output */
		printf( "%8.3f %8.3f %9.3f %c %2d %2d %1d %4d %11d ",
			x,y,z,minus,ity,ico,ity1,cc,isq[0] );
		for( i=1 ; i<8 ; i++ )
			printf( "%5d" , isq[i] );
		printf( " %3d %3d\n" , m , n );

	}
	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


