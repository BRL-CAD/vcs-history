head	1.9;
access;
symbols
	rel-7-10-4:1.8
	STABLE:1.8.0.2
	rel-7-10-2:1.8
	rel-7-10-0:1.6
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.3.0.2
	help:1.3
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.9
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.26.01.13.51;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.14.21.04.30;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.31.20.38.57;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.20.14.36.45;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.27.05.52.22;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.36.04;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.36.04;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.9
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                           C V T . C
 * BRL-CAD
 *
 * Copyright (c) 1989-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file cvt.c
 *
 *	This is the mainline for converting COM-GEOM
 * cards to a GED style database.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Original Version -
 *	February, 1980
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/comgeom/cvt.c,v 1.8 2007/07/26 01:13:51 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <math.h>
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"
#include "bu.h"


/* defined in region.c */
extern void group_init(void);
extern int getregion(void);
extern void region_register(int reg_num, int id, int air, int mat, int los);
extern void group_write(void);

/* defined in read.c */
extern int get_line(register char *cp, int buflen, char *title);

/* defined in solid.c */
extern void trim_trail_spaces(register char *cp);
extern int getsolid(void);

struct wmember	*wmp;	/* array indexed by region number */

int	version = 5;	/* v4 or v5 ? */
int	verbose = 0;	/* verbose = print a message on every item read */

char name_it[16];	/* stores argv if it exists and appends it
			   to each name generated.*/

int	cur_col = 0;

FILE		*infp;
struct rt_wdb	*outfp;		/* Output file descriptor */

int	sol_total, sol_work;	/* total num solids, num solids processed */
int	reg_total;

extern void	getid(void);

void		col_pr(char *str);

static char usage[] = "\
Usage: comgeom-g [options] input_file output_file\n\
Options:\n\
	-v input_vers#		default is 5 (cg5)\n\
	-d debug_lvl\n\
	-s name_suffix\n\
";

int
get_args(int argc, register char **argv)
{
    register int	c;
    char		*file_name;

    while ( (c = bu_getopt( argc, argv, "d:v:s:" )) != EOF )  {
	switch( c )  {
	    case 'd':
		verbose = atoi(bu_optarg);
		break;
	    case 's':
		strncpy( name_it, bu_optarg, sizeof(name_it) );
		break;
	    case 'v':
		version = atoi(bu_optarg);
		break;

	    default:		/* '?' */
		return(0);
	}
    }

    if( bu_optind+2 > argc )
	return(0);		/* FAIL */

    /* Input File */
    if( bu_optind >= argc )  {
	return(0);		/* FAIL */
    } else {
	file_name = argv[bu_optind++];
	if( (infp = fopen(file_name, "r")) == NULL )  {
	    perror(file_name);
	    return(0);
	}
    }

    /* Output File */
    if( bu_optind >= argc )  {
	return(0);		/* FAIL */
    } else {
	file_name = argv[bu_optind++];
	if( (outfp = wdb_fopen(file_name)) == NULL )  {
	    perror(file_name);
	    return(0);
	}
    }

    if ( argc > ++bu_optind )
	(void)fprintf( stderr, "comgeom-g: excess argument(s) ignored\n" );

    return(1);		/* OK */
}


/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
    register int i;
    char	ctitle[132];
    char	*title;
    char	units[16];

    if ( !get_args( argc, argv ) )  {
	(void)fputs(usage, stderr);
	return 1;
    }

    if( version != 1 && version != 4 && version != 5 )  {
	fprintf(stderr,"version %d not supported\n", version );
	(void)fputs(usage, stderr);
	return 1;
    }

    printf("Reading version %d COMGEOM file\n", version );

    if( verbose )  {
	printf("COMGEOM input file must have this format:\n");
	switch(version)  {
	    case 1:
		printf("     1.  title card\n");
		printf("     2.  solid table\n");
		printf("     3.  END\n");
		printf("     4.  region table\n");
		printf("     5.  END\n");
		break;
	    case 4:
		printf("     1.  units & title card\n");
		printf("     2.  solid & region count card\n");
		printf("     3.  solid table\n");
		printf("     4.  region table\n");
		printf("     5.  -1\n");
		printf("     6.  blank\n");
		printf("     7.  region ident table\n\n");
		break;
	    case 5:
		printf("     1.  units & title card\n");
		printf("     2.  solid & region count card\n");
		printf("     3.  solid table\n");
		printf("     4.  region table\n");
		printf("     5.  -1\n");
		printf("     6.  region ident table\n\n");
		break;
	}
    }

    group_init();

    /*
     *  Read title card
     */
    if( get_line( ctitle, sizeof(ctitle), "title card" ) == EOF ) {
	printf("Empty input file:  no title record\n");
	return 10;
    }

    title = NULL;
    switch( version )  {
	case 1:
	    title = ctitle;
	    strcpy( units, "in" );
	    break;
	case 4:
	case 5:
	    /* First 2 chars are units */
	    units[0] = ctitle[0];
	    units[1] = ctitle[1];
	    units[2] = '\0';
	    title = ctitle+3;
	    break;
    }

    /* Drop leading blanks in title */
    while( isspace( *title ) )  title++;
    trim_trail_spaces( title );
    trim_trail_spaces( units );

    /* Convert units to lower case */
    {
	register char	*cp = units;
	while( *cp )  {
	    if( isupper(*cp) )
		*cp = tolower(*cp);
	    cp++;
	}
    }

    printf("Title: %s\n", title);
    printf("Units: %s\n", units);

    /* Before converting any geometry, establish the units conversion
     * factor which all mk_* routines will apply.
     */
    if( mk_conversion( units ) < 0 )  {
	printf("WARNING:  unknown units '%s', using inches\n", units);
	strcpy( units, "in" );
	(void)mk_conversion( units );
    }

    /* Output the MGED database header */
    if( mk_id_units( outfp, title, units ) < 0 )  {
	printf("Unable to write database ID, units='%s'\n", units);
	return 1;
    }

    /*
     *  Read control card, if present
     */
    sol_total = reg_total = 0;
    switch( version )  {
	case 1:
	    sol_total = reg_total = 9999;	/* Reads until 'END' rec */
	    break;

	case 4:
	    if( get_line( ctitle, sizeof(ctitle), "control card" ) == EOF ) {
		printf("No control card .... STOP\n");
		return 10;
	    }
	    sscanf( ctitle, "%20d%10d", &sol_total, &reg_total );
	    break;
	case 5:
	    if( get_line( ctitle, sizeof(ctitle), "control card" ) == EOF ) {
		printf("No control card .... STOP\n");
		return 10;
	    }
	    sscanf( ctitle, "%5d%5d", &sol_total, &reg_total );
	    break;
    }

    if(verbose) printf("Expecting %d solids, %d regions\n", sol_total, reg_total);


    /*
     *  SOLID TABLE
     */
    if(verbose) printf("Primitive table\n");
    sol_work = 0;
    while( sol_work < sol_total ) {
	i = getsolid();
	if( i < 0 )  {
	    printf("error converting primitive %d\n", sol_work);
	    /* Should we abort here? */
	    continue;
	}
	if( i > 0 ) {
	    printf("\nprocessed %d of %d solids\n\n",sol_work,sol_total);
	    if( sol_work < sol_total && version > 1 )  {
		printf("some solids are missing, aborting\n");
		return 1;
	    }
	    break;		/* done */
	}
    }

    /* REGION TABLE */

    if(verbose)printf("\nRegion table\n");

    i = sizeof(struct wmember) * (reg_total+2);
    wmp = (struct wmember *)bu_calloc(reg_total+2, sizeof( struct wmember ), "wmp");

    for( i=reg_total+1; i>=0; i-- )  {
	BU_LIST_INIT( &wmp[i].l );
    }

    cur_col = 0;
    if( getregion() < 0 ) {
	return 10;
    }

    if( version == 1 )  {
	for( i=1; i < reg_total; i++ )  {
	    region_register( i, 0, 0, 0, 0 );
	}
    } else {
	if( version == 4 )  {
	    char	dummy[88];
	    /* read the blank card (line) */
	    (void)get_line( dummy, sizeof(dummy), "blank card" );
	}

	if(verbose) printf("\nRegion ident table\n");
	getid();
    }

    if(verbose) printf("\nGroups\n");
    cur_col = 0;
    group_write();
    if(verbose) printf("\n");

    return(0);		/* exit(0) */
}

/*
 *			C O L _ P R
 */
void
col_pr(char *str)
{
    printf("%s", str);
    cur_col += strlen(str);
    while( cur_col < 78 && ((cur_col%10) > 0) )  {
	putchar(' ');
	cur_col++;
    }
    if( cur_col >= 78 )  {
	printf("\n");
	cur_col = 0;
    }
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.8
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/comgeom/cvt.c,v 1.7 2007/05/14 21:04:30 brlcad Exp $ (BRL)";
a37 3
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif
d41 4
a44 4
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
a45 1
#include <math.h>
@


1.7
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@a30 6
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/comgeom/cvt.c,v 1.6 2007/01/31 20:38:57 brlcad Exp $ (BRL)";
@


1.6
log
@should be using bu_getopt and friends
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/comgeom/cvt.c,v 1.5 2007/01/23 01:13:25 brlcad Exp $ (BRL)";
d331 1
a331 1
	RT_LIST_INIT( &wmp[i].l );
@


1.5
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/comgeom/cvt.c,v 1.4 2007/01/20 14:36:45 brlcad Exp $ (BRL)";
d61 1
d111 1
a111 1
    while ( (c = getopt( argc, argv, "d:v:s:" )) != EOF )  {
d114 1
a114 1
		verbose = atoi(optarg);
d117 1
a117 1
		strncpy( name_it, optarg, sizeof(name_it) );
d120 1
a120 1
		version = atoi(optarg);
d128 1
a128 1
    if( optind+2 > argc )
d132 1
a132 1
    if( optind >= argc )  {
d135 1
a135 1
	file_name = argv[optind++];
d143 1
a143 1
    if( optind >= argc )  {
d146 1
a146 1
	file_name = argv[optind++];
d153 1
a153 1
    if ( argc > ++optind )
@


1.4
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/comgeom/cvt.c,v 1.3 2006/02/27 05:52:22 brlcad Exp $ (BRL)";
@


1.3
log
@quell warnings, missing stdlib.h, calls to exit with a negative, ws.
@
text
@d4 1
a4 1
 * Copyright (c) 1989-2006 United States Government as represented by
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/comgeom/cvt.c,v 1.2 2006/01/18 06:46:13 brlcad Exp $ (BRL)";
@


1.2
log
@update copyright to 2006
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/comgeom/cvt.c,v 1.1 2005/10/27 03:36:04 brlcad Exp $ (BRL)";
d48 1
a48 1

d52 1
a52 1
# include <string.h>
d54 1
a54 1
# include <strings.h>
d63 1
d83 1
a83 1
			to each name generated.*/
d108 2
a109 2
	register int	c;
	char		*file_name;
d111 14
a124 15
	while ( (c = getopt( argc, argv, "d:v:s:" )) != EOF )  {
		switch( c )  {
		case 'd':
			verbose = atoi(optarg);
			break;
		case 's':
			strncpy( name_it, optarg, sizeof(name_it) );
			break;
		case 'v':
			version = atoi(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
d126 1
d128 2
a129 2
	if( optind+2 > argc )
		return(0);		/* FAIL */
d131 19
a149 9
	/* Input File */
	if( optind >= argc )  {
		return(0);		/* FAIL */
	} else {
		file_name = argv[optind++];
		if( (infp = fopen(file_name, "r")) == NULL )  {
			perror(file_name);
			return(0);
		}
d151 1
d153 2
a154 10
	/* Output File */
	if( optind >= argc )  {
		return(0);		/* FAIL */
	} else {
		file_name = argv[optind++];
		if( (outfp = wdb_fopen(file_name)) == NULL )  {
			perror(file_name);
			return(0);
		}
	}
d156 1
a156 4
	if ( argc > ++optind )
		(void)fprintf( stderr, "comgeom-g: excess argument(s) ignored\n" );

	return(1);		/* OK */
d166 45
a210 14
	register int i;
	char	ctitle[132];
	char	*title;
	char	units[16];

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	if( version != 1 && version != 4 && version != 5 )  {
		fprintf(stderr,"version %d not supported\n", version );
		(void)fputs(usage, stderr);
		exit( 1 );
d212 1
d214 1
a214 1
	printf("Reading version %d COMGEOM file\n", version );
d216 7
a222 39
	if( verbose )  {
		printf("COMGEOM input file must have this format:\n");
		switch(version)  {
		case 1:
			printf("     1.  title card\n");
			printf("     2.  solid table\n");
			printf("     3.  END\n");
			printf("     4.  region table\n");
			printf("     5.  END\n");
			break;
		case 4:
			printf("     1.  units & title card\n");
			printf("     2.  solid & region count card\n");
			printf("     3.  solid table\n");
			printf("     4.  region table\n");
			printf("     5.  -1\n");
			printf("     6.  blank\n");
		   	printf("     7.  region ident table\n\n");
			break;
		case 5:
			printf("     1.  units & title card\n");
			printf("     2.  solid & region count card\n");
			printf("     3.  solid table\n");
			printf("     4.  region table\n");
			printf("     5.  -1\n");
		   	printf("     6.  region ident table\n\n");
			break;
		}
	}

	group_init();

	/*
	 *  Read title card
	 */
	if( get_line( ctitle, sizeof(ctitle), "title card" ) == EOF ) {
		printf("Empty input file:  no title record\n");
		exit(10);
	}
d224 2
a225 2
	title = NULL;
	switch( version )  {
d227 3
a229 3
		title = ctitle;
		strcpy( units, "in" );
		break;
d232 46
a277 46
		/* First 2 chars are units */
		units[0] = ctitle[0];
		units[1] = ctitle[1];
		units[2] = '\0';
		title = ctitle+3;
		break;
	}

	/* Drop leading blanks in title */
	while( isspace( *title ) )  title++;
	trim_trail_spaces( title );
	trim_trail_spaces( units );

	/* Convert units to lower case */
	{
		register char	*cp = units;
		while( *cp )  {
			if( isupper(*cp) )
				*cp = tolower(*cp);
			cp++;
		}
	}

	printf("Title: %s\n", title);
	printf("Units: %s\n", units);

	/* Before converting any geometry, establish the units conversion
	 * factor which all mk_* routines will apply.
	 */
	if( mk_conversion( units ) < 0 )  {
		printf("WARNING:  unknown units '%s', using inches\n", units);
		strcpy( units, "in" );
		(void)mk_conversion( units );
	}

	/* Output the MGED database header */
	if( mk_id_units( outfp, title, units ) < 0 )  {
		printf("Unable to write database ID, units='%s'\n", units);
		exit(1);
	}

	/*
	 *  Read control card, if present
	 */
	sol_total = reg_total = 0;
	switch( version )  {
d279 2
a280 2
		sol_total = reg_total = 9999;	/* Reads until 'END' rec */
		break;
d283 6
a288 6
		if( get_line( ctitle, sizeof(ctitle), "control card" ) == EOF ) {
			printf("No control card .... STOP\n");
			exit(10);
		}
		sscanf( ctitle, "%20d%10d", &sol_total, &reg_total );
		break;
d290 68
a357 9
		if( get_line( ctitle, sizeof(ctitle), "control card" ) == EOF ) {
			printf("No control card .... STOP\n");
			exit(10);
		}
		sscanf( ctitle, "%5d%5d", &sol_total, &reg_total );
		break;
	}

	if(verbose) printf("Expecting %d solids, %d regions\n", sol_total, reg_total);
d359 1
a359 60

	/*
	 *  SOLID TABLE
	 */
	if(verbose) printf("Primitive table\n");
	sol_work = 0;
	while( sol_work < sol_total ) {
		i = getsolid();
		if( i < 0 )  {
			printf("error converting primitive %d\n", sol_work);
			/* Should we abort here? */
			continue;
		}
		if( i > 0 ) {
			printf("\nprocessed %d of %d solids\n\n",sol_work,sol_total);
			if( sol_work < sol_total && version > 1 )  {
				printf("some solids are missing, aborting\n");
				exit(1);
			}
			break;		/* done */
		}
	}

	/* REGION TABLE */

	if(verbose)printf("\nRegion table\n");

	i = sizeof(struct wmember) * (reg_total+2);
	if( (wmp = (struct wmember *)bu_calloc(reg_total+2, sizeof( struct wmember ), "wmp")) == (struct wmember *)0 )  {
		printf("malloc(%d) failed\n", i );
		exit(42);
	}
	for( i=reg_total+1; i>=0; i-- )  {
		RT_LIST_INIT( &wmp[i].l );
	}

	cur_col = 0;
	if( getregion() < 0 )  exit(10);

	if( version == 1 )  {
		for( i=1; i < reg_total; i++ )  {
			region_register( i, 0, 0, 0, 0 );
		}
	} else {
		if( version == 4 )  {
			char	dummy[88];
			/* read the blank card (line) */
			(void)get_line( dummy, sizeof(dummy), "blank card" );
		}

		if(verbose) printf("\nRegion ident table\n");
		getid();
	}

	if(verbose) printf("\nGroups\n");
	cur_col = 0;
	group_write();
	if(verbose) printf("\n");

	return(0);		/* exit(0) */
d368 10
a377 10
	printf("%s", str);
	cur_col += strlen(str);
	while( cur_col < 78 && ((cur_col%10) > 0) )  {
		putchar(' ');
		cur_col++;
	}
	if( cur_col >= 78 )  {
		printf("\n");
		cur_col = 0;
	}
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1989-2005 United States Government as represented by
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/comgeom-g/cvt.c,v 14.6 2005/10/23 04:44:29 brlcad Exp $ (BRL)";
@


1.1.2.1
log
@file cvt.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 387
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 387
/*                           C V T . C
 * BRL-CAD
 *
 * Copyright (C) 1989-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file cvt.c
 *
 *	This is the mainline for converting COM-GEOM
 * cards to a GED style database.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Original Version -
 *	February, 1980
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header$ (BRL)";
#endif

#include "common.h"

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#include <stdio.h>
#include <ctype.h>
#ifdef HAVE_STRING_H
# include <string.h>
#else
# include <strings.h>
#endif
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"

/* defined in region.c */
extern void group_init(void);
extern int getregion(void);
extern void region_register(int reg_num, int id, int air, int mat, int los);
extern void group_write(void);

/* defined in read.c */
extern int get_line(register char *cp, int buflen, char *title);

/* defined in solid.c */
extern void trim_trail_spaces(register char *cp);
extern int getsolid(void);

struct wmember	*wmp;	/* array indexed by region number */

int	version = 5;	/* v4 or v5 ? */
int	verbose = 0;	/* verbose = print a message on every item read */

char name_it[16];	/* stores argv if it exists and appends it
			to each name generated.*/

int	cur_col = 0;

FILE		*infp;
struct rt_wdb	*outfp;		/* Output file descriptor */

int	sol_total, sol_work;	/* total num solids, num solids processed */
int	reg_total;

extern void	getid(void);

void		col_pr(char *str);

static char usage[] = "\
Usage: comgeom-g [options] input_file output_file\n\
Options:\n\
	-v input_vers#		default is 5 (cg5)\n\
	-d debug_lvl\n\
	-s name_suffix\n\
";

int
get_args(int argc, register char **argv)
{
	register int	c;
	char		*file_name;

	while ( (c = getopt( argc, argv, "d:v:s:" )) != EOF )  {
		switch( c )  {
		case 'd':
			verbose = atoi(optarg);
			break;
		case 's':
			strncpy( name_it, optarg, sizeof(name_it) );
			break;
		case 'v':
			version = atoi(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( optind+2 > argc )
		return(0);		/* FAIL */

	/* Input File */
	if( optind >= argc )  {
		return(0);		/* FAIL */
	} else {
		file_name = argv[optind++];
		if( (infp = fopen(file_name, "r")) == NULL )  {
			perror(file_name);
			return(0);
		}
	}

	/* Output File */
	if( optind >= argc )  {
		return(0);		/* FAIL */
	} else {
		file_name = argv[optind++];
		if( (outfp = wdb_fopen(file_name)) == NULL )  {
			perror(file_name);
			return(0);
		}
	}

	if ( argc > ++optind )
		(void)fprintf( stderr, "comgeom-g: excess argument(s) ignored\n" );

	return(1);		/* OK */
}


/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register int i;
	char	ctitle[132];
	char	*title;
	char	units[16];

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	if( version != 1 && version != 4 && version != 5 )  {
		fprintf(stderr,"version %d not supported\n", version );
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	printf("Reading version %d COMGEOM file\n", version );

	if( verbose )  {
		printf("COMGEOM input file must have this format:\n");
		switch(version)  {
		case 1:
			printf("     1.  title card\n");
			printf("     2.  solid table\n");
			printf("     3.  END\n");
			printf("     4.  region table\n");
			printf("     5.  END\n");
			break;
		case 4:
			printf("     1.  units & title card\n");
			printf("     2.  solid & region count card\n");
			printf("     3.  solid table\n");
			printf("     4.  region table\n");
			printf("     5.  -1\n");
			printf("     6.  blank\n");
		   	printf("     7.  region ident table\n\n");
			break;
		case 5:
			printf("     1.  units & title card\n");
			printf("     2.  solid & region count card\n");
			printf("     3.  solid table\n");
			printf("     4.  region table\n");
			printf("     5.  -1\n");
		   	printf("     6.  region ident table\n\n");
			break;
		}
	}

	group_init();

	/*
	 *  Read title card
	 */
	if( get_line( ctitle, sizeof(ctitle), "title card" ) == EOF ) {
		printf("Empty input file:  no title record\n");
		exit(10);
	}

	title = NULL;
	switch( version )  {
	case 1:
		title = ctitle;
		strcpy( units, "in" );
		break;
	case 4:
	case 5:
		/* First 2 chars are units */
		units[0] = ctitle[0];
		units[1] = ctitle[1];
		units[2] = '\0';
		title = ctitle+3;
		break;
	}

	/* Drop leading blanks in title */
	while( isspace( *title ) )  title++;
	trim_trail_spaces( title );
	trim_trail_spaces( units );

	/* Convert units to lower case */
	{
		register char	*cp = units;
		while( *cp )  {
			if( isupper(*cp) )
				*cp = tolower(*cp);
			cp++;
		}
	}

	printf("Title: %s\n", title);
	printf("Units: %s\n", units);

	/* Before converting any geometry, establish the units conversion
	 * factor which all mk_* routines will apply.
	 */
	if( mk_conversion( units ) < 0 )  {
		printf("WARNING:  unknown units '%s', using inches\n", units);
		strcpy( units, "in" );
		(void)mk_conversion( units );
	}

	/* Output the MGED database header */
	if( mk_id_units( outfp, title, units ) < 0 )  {
		printf("Unable to write database ID, units='%s'\n", units);
		exit(1);
	}

	/*
	 *  Read control card, if present
	 */
	sol_total = reg_total = 0;
	switch( version )  {
	case 1:
		sol_total = reg_total = 9999;	/* Reads until 'END' rec */
		break;

	case 4:
		if( get_line( ctitle, sizeof(ctitle), "control card" ) == EOF ) {
			printf("No control card .... STOP\n");
			exit(10);
		}
		sscanf( ctitle, "%20d%10d", &sol_total, &reg_total );
		break;
	case 5:
		if( get_line( ctitle, sizeof(ctitle), "control card" ) == EOF ) {
			printf("No control card .... STOP\n");
			exit(10);
		}
		sscanf( ctitle, "%5d%5d", &sol_total, &reg_total );
		break;
	}

	if(verbose) printf("Expecting %d solids, %d regions\n", sol_total, reg_total);


	/*
	 *  SOLID TABLE
	 */
	if(verbose) printf("Primitive table\n");
	sol_work = 0;
	while( sol_work < sol_total ) {
		i = getsolid();
		if( i < 0 )  {
			printf("error converting primitive %d\n", sol_work);
			/* Should we abort here? */
			continue;
		}
		if( i > 0 ) {
			printf("\nprocessed %d of %d solids\n\n",sol_work,sol_total);
			if( sol_work < sol_total && version > 1 )  {
				printf("some solids are missing, aborting\n");
				exit(1);
			}
			break;		/* done */
		}
	}

	/* REGION TABLE */

	if(verbose)printf("\nRegion table\n");

	i = sizeof(struct wmember) * (reg_total+2);
	if( (wmp = (struct wmember *)bu_calloc(reg_total+2, sizeof( struct wmember ), "wmp")) == (struct wmember *)0 )  {
		printf("malloc(%d) failed\n", i );
		exit(42);
	}
	for( i=reg_total+1; i>=0; i-- )  {
		RT_LIST_INIT( &wmp[i].l );
	}

	cur_col = 0;
	if( getregion() < 0 )  exit(10);

	if( version == 1 )  {
		for( i=1; i < reg_total; i++ )  {
			region_register( i, 0, 0, 0, 0 );
		}
	} else {
		if( version == 4 )  {
			char	dummy[88];
			/* read the blank card (line) */
			(void)get_line( dummy, sizeof(dummy), "blank card" );
		}

		if(verbose) printf("\nRegion ident table\n");
		getid();
	}

	if(verbose) printf("\nGroups\n");
	cur_col = 0;
	group_write();
	if(verbose) printf("\n");

	return(0);		/* exit(0) */
}

/*
 *			C O L _ P R
 */
void
col_pr(char *str)
{
	printf("%s", str);
	cur_col += strlen(str);
	while( cur_col < 78 && ((cur_col%10) > 0) )  {
		putchar(' ');
		cur_col++;
	}
	if( cur_col >= 78 )  {
		printf("\n");
		cur_col = 0;
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


