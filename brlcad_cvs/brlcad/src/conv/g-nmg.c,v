head	14.29;
access;
symbols
	rel-7-10-4:14.24
	STABLE:14.24.0.2
	stable-branch:14.7
	rel-7-10-2:14.24
	rel-7-10-0:14.21
	rel-7-8-4:14.17
	rel-7-8-2:14.16
	rel-7-8-0:14.16
	trimnurbs-branch:14.16.0.2
	help:14.16
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.2
	rel-7-6-0:14.8
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.29
date	2007.11.08.04.15.47;	author brlcad;	state Exp;
branches;
next	14.28;

14.28
date	2007.10.22.14.09.07;	author erikgreenwald;	state Exp;
branches;
next	14.27;

14.27
date	2007.10.22.08.47.38;	author brlcad;	state Exp;
branches;
next	14.26;

14.26
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.25;

14.25
date	2007.09.14.17.44.10;	author erikgreenwald;	state Exp;
branches;
next	14.24;

14.24
date	2007.07.26.01.13.51;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.05.18.04.13.43;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.04.29.02.05.02;	author johnranderson;	state Exp;
branches;
next	14.21;

14.21
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2006.09.15.17.35.55;	author jlowenz;	state Exp;
branches;
next	14.16;

14.16
date	2006.02.07.00.10.32;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.01.21.21.09.44;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.01.21.20.47.38;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.20.20.27.40;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.09.09.05.50.29;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.08.24.04.07.40;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2005.01.30.20.30.19;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.09;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.14.49.31;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.09;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.52;	author morrison;	state Exp;
branches;
next	;

14.8.2.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.29
log
@minor tweaks, preventive null terminating of strncmp'd strings
@
text
@/*                         G - N M G . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file g-nmg.c
 *
 *  Program to convert a BRL-CAD model (in a .g file) to an NMG facetted model
 *  by calling on the NMG booleans.
 *
 *  Author -
 *	John R. Anderson
 */

#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.28 2007/10/22 14:09:07 erikgreenwald Exp $";
#endif

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#if defined(HAVE_UNISTD_H)
#  include <unistd.h>
#else
#  if defined(HAVE_SYS_UNISTD_H)
#    include <sys/unistd.h>
#  endif
#endif

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "bu.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "wdb.h"
#include "mater.h"

/* local headers */
#include "../librt/debug.h"


BU_EXTERN(union tree *do_region_end, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data));

static char	usage[] = "Usage: %s [-v] [-b] [-xX lvl] [-a abs_tol] [-r rel_tol] [-n norm_tol] [-o out_file] brlcad_db.g object(s)\n";

static char	*tok_sep = " \t";
static int	NMG_debug;		/* saved arg of -X, for longjmp handling */
static int	verbose;
static int	do_bots=0;		/* flag to output BOT's instead of NMG's */
/* static int	ncpu = 1; */		/* Number of processors */
static int	nmg_count=0;		/* Count of nmgregions written to output */
static char	*out_file = "nmg.g";	/* Output filename */
static struct rt_wdb		*fp_out; /* Output file pointer */
static struct db_i		*dbip;
static struct rt_tess_tol	ttol;
static struct bn_tol		tol;
static struct model		*the_model;

static struct db_tree_state	tree_state;	/* includes tol & model */

static int	regions_tried = 0;
static int	regions_converted = 0;

/* extern struct mater* rt_material_head; */

/*
*			D O _ R E G I O N _ E N D
*
*  Called from db_walk_tree().
*
*  This routine must be prepared to run in parallel.
*/
union tree *do_region_end(register struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data)
{
	struct nmgregion	*r;
	struct bu_list		vhead;
	union tree		*ret_tree;
	char			*sofar;
	struct bu_vls		shader_params;
	char nmg_name[16];
	unsigned char rgb[3];
	unsigned char *color = (unsigned char *)NULL;
	char *shader;
	char *matparm;
	struct wmember headp;
	struct rt_bot_internal *bot;

	RT_CK_TESS_TOL(tsp->ts_ttol);
	BN_CK_TOL(tsp->ts_tol);
	NMG_CK_MODEL(*tsp->ts_m);

	BU_LIST_INIT(&vhead);

	if (RT_G_DEBUG&DEBUG_TREEWALK || verbose) {
		sofar = db_path_to_string(pathp);
		bu_log("\ndo_region_end(%d %d%%) %s\n",
			regions_tried,
			regions_tried>0 ? (regions_converted * 100) / regions_tried : 0,
			sofar);
		bu_free(sofar, "path string");
	}

	if (curtree->tr_op == OP_NOP)
		return  curtree;

	regions_tried++;

	/* Begin bu_bomb() protection */
	if( BU_SETJUMP ) {
		/* Error, bail out */
		BU_UNSETJUMP;		/* Relinquish the protection */

		sofar = db_path_to_string(pathp);
		bu_log( "FAILED: %s\n", sofar );
		bu_free( (char *)sofar, "sofar" );

		/* Sometimes the NMG library adds debugging bits when
		 * it detects an internal error, before bombing out.
		 */
		rt_g.NMG_debug = NMG_debug;	/* restore mode */

		/* Release any intersector 2d tables */
		nmg_isect2d_final_cleanup();

		/* Release the tree memory & input regions */
		db_free_tree(curtree, &rt_uniresource);	/* Does an nmg_kr() */

		/* Get rid of (m)any other intermediate structures */
		if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC ) {
			nmg_km(*tsp->ts_m);
		} else {
			bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
		}

		/* Now, make a new, clean model structure for next pass. */
		*tsp->ts_m = nmg_mm();
		goto out;
	}
	ret_tree = nmg_booltree_evaluate(curtree, tsp->ts_tol, &rt_uniresource);	/* librt/nmg_bool.c */

	if( ret_tree ) {
		r = ret_tree->tr_d.td_r;
		if( do_bots && r ) {
		    bot = nmg_bot( BU_LIST_FIRST( shell, &r->s_hd ), tsp->ts_tol );
		}
	} else {
	    if (verbose) {
		printf( "\tNothing left of this region after Boolean evaluation\n" );
	    }
	    r = (struct nmgregion *)NULL;
	}

	BU_UNSETJUMP;		/* Relinquish the protection */
	regions_converted++;

	if (tsp->ts_mater.ma_shader) {
	    shader = strtok( tsp->ts_mater.ma_shader, tok_sep );
	    matparm = strtok( (char *)NULL, tok_sep );
	} else {
	    shader = NULL;
	    matparm = NULL;
	}

	bu_vls_init( &shader_params );
	if( matparm ) {
		bu_vls_strcpy( &shader_params, matparm );
		matparm = strtok( (char *)NULL, tok_sep );
		while( matparm ) {
			bu_vls_putc( &shader_params, ' ' );
			bu_vls_strcat( &shader_params, matparm );
			matparm = strtok( (char *)NULL, tok_sep );
		}
	}
	if (r != (struct nmgregion *)NULL) {
		struct shell *s;
		int empty_region=0;
		int empty_model=0;

		/* Kill cracks */
		s = BU_LIST_FIRST( shell, &r->s_hd );
		while( BU_LIST_NOT_HEAD( &s->l, &r->s_hd ) ) {
			struct shell *next_s;

			next_s = BU_LIST_PNEXT( shell, &s->l );
			if( nmg_kill_cracks( s ) ) {
				if( nmg_ks( s ) ) {
					empty_region = 1;
					break;
				}
			}
			s = next_s;
		}

		/* kill zero length edgeuses */
		if( !empty_region ) {
			 empty_model = nmg_kill_zero_length_edgeuses( *tsp->ts_m );
		}

		if( !empty_region && !empty_model ) {
			/* Write the nmgregion to the output file */
			nmg_count++;
			sprintf( nmg_name , "nmg.%d" , nmg_count );

			if( do_bots ) {
				wdb_export( fp_out, nmg_name, (genptr_t)bot, ID_BOT, 1.0 );
			} else {
				mk_nmg( fp_out , nmg_name , r->m_p );
			}
		}

		/* Now make a normal brlcad region */
		if( tsp->ts_mater.ma_color_valid ) {
			rgb[0] = (int)(tsp->ts_mater.ma_color[0] * 255.0);
			rgb[1] = (int)(tsp->ts_mater.ma_color[1] * 255.0);
			rgb[2] = (int)(tsp->ts_mater.ma_color[2] * 255.0);
			color = rgb;
		}
		else
			color = (unsigned char *)NULL;

		BU_LIST_INIT( &headp.l );
		(void)mk_addmember( nmg_name , &headp.l , NULL, WMOP_UNION );
		if( mk_lrcomb( fp_out,
		    pathp->fp_names[pathp->fp_len-1]->d_namep, &headp, 1,
		    shader, bu_vls_addr( &shader_params ), color,
		    tsp->ts_regionid, tsp->ts_aircode, tsp->ts_gmater,
		    tsp->ts_los, tsp->ts_mater.ma_cinherit ) ) {
			bu_log( "G-nmg: error in making region (%s)\n" , pathp->fp_names[pathp->fp_len-1]->d_namep );
		}
	} else {
		BU_LIST_INIT( &headp.l );
		if( mk_lrcomb( fp_out,
		    pathp->fp_names[pathp->fp_len-1]->d_namep, &headp, 1,
		    shader, bu_vls_addr( &shader_params ), color,
		    tsp->ts_regionid, tsp->ts_aircode, tsp->ts_gmater,
		    tsp->ts_los, tsp->ts_mater.ma_cinherit ) ) {
			bu_log( "G-nmg: error in making region (%s)\n" , pathp->fp_names[pathp->fp_len-1]->d_namep );
		}
	}

	bu_vls_free( &shader_params );

	/*
	 *  Dispose of original tree, so that all associated dynamic
	 *  memory is released now, not at the end of all regions.
	 *  A return of TREE_NULL from this routine signals an error,
	 *  so we need to cons up an OP_NOP node to return.
	 */
	db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */

out:

	if( RT_G_DEBUG&DEBUG_MEM_FULL )
		bu_prmem( "At end of do_region_end()" );

	BU_GETUNION(curtree, tree);
	curtree->magic = RT_TREE_MAGIC;
	curtree->tr_op = OP_NOP;
	return(curtree);
}

void
csg_comb_func(struct db_i *dbip, struct directory *dp, genptr_t ptr)
{
	struct rt_db_internal intern;
	struct rt_comb_internal *comb;
	struct rt_tree_array *tree_list;
	int node_count;
	int actual_count;
	int i;
	struct wmember headp;
	struct wmember *wm;
	unsigned char *color;
	char *endp;
	int len;
	char matname[32];
	char matparm[60];

	if( dp->d_uses < 0 )
		return;

	dp->d_uses = (-1);

	if( dp->d_flags & DIR_REGION ) {
		char **name;

		/* convert a region to NMG's */

		the_model = nmg_mm();
		tree_state = rt_initial_tree_state;	/* struct copy */
		tree_state.ts_tol = &tol;
		tree_state.ts_ttol = &ttol;
		tree_state.ts_m = &the_model;

		name = (&(dp->d_namep));

		(void) db_walk_tree( dbip, 1, (const char **)name,
			1,
			&tree_state,
			0,
			do_region_end,
			nmg_booltree_leaf_tess,
			(genptr_t)NULL);

		/* Release dynamic storage */
		nmg_km(the_model);

		return;
	}

	/* have a combination that is not a region */

	if( rt_db_get_internal( &intern, dp, dbip, (fastf_t *)NULL, &rt_uniresource ) < 0 ) {
		bu_log( "Cannot get internal form of combination (%s)\n", dp->d_namep );
		return;
	}
	comb = (struct rt_comb_internal *)intern.idb_ptr;
	RT_CK_COMB( comb );

	if( verbose )
		bu_log( "Combination - %s\n" , dp->d_namep );

	if( comb->tree && db_ck_v4gift_tree( comb->tree ) < 0 )	{
		db_non_union_push( comb->tree, &rt_uniresource );
		if( db_ck_v4gift_tree( comb->tree ) < 0 ) {
			bu_log( "Cannot flatten tree (%s) for editing\n", dp->d_namep );
			return;
		}
	}
	node_count = db_tree_nleaves( comb->tree );
	if( node_count > 0 ) {
		tree_list = (struct rt_tree_array *)bu_calloc( node_count,
			sizeof( struct rt_tree_array ), "tree list" );
		actual_count = (struct rt_tree_array *)db_flatten_tree( tree_list,
			comb->tree, OP_UNION, 0, &rt_uniresource ) - tree_list;
		BU_ASSERT_LONG( actual_count, ==, node_count );
	}
	else {
		tree_list = (struct rt_tree_array *)NULL;
		actual_count = 0;
	}

	if( actual_count < 1 ) {
		bu_log( "Warning: empty combination (%s)\n" , dp->d_namep );
		dp->d_uses = 0;
		rt_db_free_internal( &intern , &rt_uniresource);
		return;
	}

	BU_LIST_INIT( &headp.l );

	for( i=0 ; i<actual_count ; i++ ) {
		char op;

		switch( tree_list[i].tl_op ) {
			case OP_UNION:
				op = 'u';
				break;
			case OP_INTERSECT:
				op = '+';
				break;
			case OP_SUBTRACT:
				op = '-';
				break;
			default:
				bu_log( "Unrecognized Boolean operator in combination (%s)\n", dp->d_namep );
				bu_free( (char *)tree_list, "tree_list" );
				rt_db_free_internal( &intern , &rt_uniresource);
				return;
		}
		wm = mk_addmember( tree_list[i].tl_tree->tr_l.tl_name , &headp.l, NULL , op );
		if( tree_list[i].tl_tree->tr_l.tl_mat )
			MAT_COPY( wm->wm_mat, tree_list[i].tl_tree->tr_l.tl_mat );
	}

	if( comb->rgb_valid  )
		color = comb->rgb;
	else
		color = (unsigned char *)NULL;

	endp = strchr( bu_vls_addr(&comb->shader), ' ' );
	if( endp ) {
		len = endp - bu_vls_addr(&comb->shader);
		if( len > 32 ) len = 32;
		strncpy( matname, bu_vls_addr(&comb->shader), len );
		strncpy( matparm, endp+1, 60 );
	}
	else {
		strncpy( matname, bu_vls_addr(&comb->shader), 32 );
		matparm[0] = '\0';
	}

	if( mk_lrcomb( fp_out, dp->d_namep, &headp, comb->region_flag,
	    matname, matparm,
	    color, comb->region_id,
	    comb->aircode, comb->GIFTmater,comb->los,
	    comb->inherit ) ) {
	    bu_log( "G-nmg: error in making region (%s)\n" , dp->d_namep );
	}
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	int		i;
	register int	c;
	double		percent;

	bu_setlinebuf( stderr );

#if MEMORY_LEAK_CHECKING
	rt_g.debug |= DEBUG_MEM_FULL;
#endif
	BU_LIST_INIT( &rt_g.rtg_vlfree );	/* for vlist macros */

	ttol.magic = RT_TESS_TOL_MAGIC;
	/* Defaults, updated by command line options. */
	ttol.abs = 0.0;
	ttol.rel = 0.01;
	ttol.norm = 0.0;

	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-6;
	tol.para = 1 - tol.perp;

	rt_init_resource( &rt_uniresource, 0, NULL );

	/* Get command line arguments. */
	while ((c = bu_getopt(argc, argv, "t:a:n:o:r:bvx:P:X:")) != EOF) {
		switch (c) {
		case 'b':		/* make BOT's instead of NMG's */
			do_bots = 1;
			break;
		case 't':		/* calculational tolerance */
			tol.dist = atof( bu_optarg );
			tol.dist_sq = tol.dist * tol.dist;
		case 'a':		/* Absolute tolerance. */
			ttol.abs = atof(bu_optarg);
			ttol.rel = 0.0;
			break;
		case 'n':		/* Surface normal tolerance. */
			ttol.norm = atof(bu_optarg)*bn_pi/180.0;
			ttol.rel = 0.0;
			break;
		case 'o':		/* Output file name */
			out_file = bu_optarg;
			break;
		case 'r':		/* Relative tolerance. */
			ttol.rel = atof(bu_optarg);
			break;
		case 'v':
			verbose++;
			break;
		case 'P':
/*			ncpu = atoi( bu_optarg ); */
			rt_g.debug = 1;	/* XXX DEBUG_ALLRAYS -- to get core dumps */
			break;
		case 'x':
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.debug );
			bu_printb( "librt RT_G_DEBUG", RT_G_DEBUG, DEBUG_FORMAT );
			bu_log("\n");
			break;
		case 'X':
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
			NMG_debug = rt_g.NMG_debug;
			bu_printb( "librt rt_g.NMG_debug", rt_g.NMG_debug, NMG_DEBUG_FORMAT );
			bu_log("\n");
			break;
		default:
			bu_exit(1, usage, argv[0]);
		}
	}

	if (bu_optind+1 >= argc) {
		bu_exit(1, usage, argv[0]);
	}

	/* Open BRL-CAD database */
	if ((dbip = db_open( argv[bu_optind] , "r")) == DBI_NULL) {
		perror(argv[0]);
		bu_exit(1, "Cannot open %s\n" , argv[bu_optind]);
	}
	if( db_dirbuild( dbip ) ) {
	    bu_exit(1, "db_dirbuild failed\n");
	}

	if ((fp_out = wdb_fopen( out_file )) == NULL) {
		perror( out_file );
		bu_exit(2, "ERROR: Cannot open %s for reading\n" , out_file );
	}

	bu_optind++;

	mk_id_editunits( fp_out , dbip->dbi_title , dbip->dbi_local2base );

	/* Walk the trees outputting regions and combinations */
	for( i=bu_optind ; i<argc ; i++ ) {
		struct directory *dp;

		dp = db_lookup( dbip , argv[i] , 0 );
		if( dp == DIR_NULL ) {
			bu_log( "WARNING: Could not find %s, skipping\n", argv[i] );
			continue;
		}
		db_functree( dbip , dp , csg_comb_func , 0 , &rt_uniresource , NULL );
	}

	/* write the current color table */
	mk_write_color_table(fp_out);

	rt_vlist_cleanup();
	db_close(dbip);

#if MEMORY_LEAK_CHECKING
	bu_prmem("After complete G-NMG conversion");
#endif

	percent = 100;
	if( regions_tried > 0 )
		percent = ((double)regions_converted * 100) / regions_tried;

	printf( "Tried %d regions, %d converted successfully.  %g%%\n",
		regions_tried, regions_converted, percent );

	wdb_close(fp_out);
	return 0;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.28
log
@use bu_exit() instead of bu_log() on unknown argument (I think that's what was intended... segfaults using bu_log with given args)
@
text
@d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.27 2007/10/22 08:47:38 brlcad Exp $";
d297 2
a298 2
	char matname[33];
	char matparm[61];
@


14.27
log
@first 10% of the review of the bu_bomb() instances.  updating many to bu_exit() for the instances where the error or exit condition aren't catastrophic errors (i.e. they wouldn't benefit from having a stack trace of how we got into that state code-wise).  this also makes it easier to refactor usages of log & exit too to the new routine.
@
text
@d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.26 2007/09/15 16:23:04 brlcad Exp $";
d497 1
a497 2
			bu_log(1, usage, argv[0]);
			break;
@


14.26
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.25 2007/09/14 17:44:10 erikgreenwald Exp $";
d128 1
d139 1
a139 1
		 * it detects an internal error, before bu_bomb().
d497 1
a497 2
			fprintf(stderr, usage, argv[0]);
			exit(1);
d503 1
a503 2
		fprintf(stderr, usage, argv[0]);
		exit(1);
a507 1
		bu_log( "Cannot open %s\n" , argv[bu_optind] );
d509 1
a509 1
		exit(1);
d512 1
a512 2
	    bu_log( "db_dirbuild failed\n" );
	    exit(1);
d517 1
a517 2
		bu_log( "g-nng: Cannot open %s\n" , out_file );
		return 2;
d530 1
a530 1
			bu_log( "WARNING!!! Could not find %s, skipping\n", argv[i] );
@


14.25
log
@change c++/c99 "//" comments to more portable c89 /* */ comments
@
text
@d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.24 2007/07/26 01:13:51 brlcad Exp $";
d40 1
a40 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.24
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.23 2007/05/18 04:13:43 brlcad Exp $";
d89 1
a89 1
//extern struct mater* rt_material_head;
@


14.23
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@a27 4
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d31 1
a31 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.22 2007/04/29 02:05:02 johnranderson Exp $";
@


14.22
log
@Added check of return value from db_dirbuild()
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.21 2007/02/02 08:48:28 brlcad Exp $";
d136 1
a136 1
	/* Begin rt_bomb() protection */
d146 1
a146 1
		 * it detects an internal error, before rt_bomb().
@


14.21
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.20 2007/01/27 01:41:32 brlcad Exp $";
d521 4
a524 1
	db_dirbuild( dbip );
@


14.20
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.19 2007/01/23 01:13:25 brlcad Exp $";
d463 1
a463 1
	while ((c = getopt(argc, argv, "t:a:n:o:r:bvx:P:X:")) != EOF) {
d469 1
a469 1
			tol.dist = atof( optarg );
d472 1
a472 1
			ttol.abs = atof(optarg);
d476 1
a476 1
			ttol.norm = atof(optarg)*bn_pi/180.0;
d480 1
a480 1
			out_file = optarg;
d483 1
a483 1
			ttol.rel = atof(optarg);
d489 1
a489 1
/*			ncpu = atoi( optarg ); */
d493 1
a493 1
			sscanf( optarg, "%x", (unsigned int *)&rt_g.debug );
d498 1
a498 1
			sscanf( optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
d510 1
a510 1
	if (optind+1 >= argc) {
d516 2
a517 2
	if ((dbip = db_open( argv[optind] , "r")) == DBI_NULL) {
		bu_log( "Cannot open %s\n" , argv[optind] );
d529 1
a529 1
	optind++;
d534 1
a534 1
	for( i=optind ; i<argc ; i++ ) {
@


14.19
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.18 2007/01/20 14:36:43 brlcad Exp $";
d191 1
a191 1
	
@


14.18
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.17 2006/09/15 17:35:55 jlowenz Exp $";
@


14.17
log
@copy the color table from input to output, so colors render properly in converted file
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.16 2006/02/07 00:10:32 brlcad Exp $";
@


14.16
log
@if the shader is null, prevent a crash on strtok'ing it
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.15 2006/01/28 00:36:27 brlcad Exp $";
d61 1
d66 1
d94 2
d546 3
@


14.15
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.14 2006/01/21 21:09:44 brlcad Exp $";
d181 8
a188 2
	shader = strtok( tsp->ts_mater.ma_shader, tok_sep );
	matparm = strtok( (char *)NULL, tok_sep );
@


14.14
log
@a little less excitement about regions that evaluate to nothing, still report it if we're verbose a little more consistently.
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.13 2006/01/21 20:47:38 brlcad Exp $";
d42 1
d46 1
a46 1
#include <string.h>
d48 1
a48 1
#include <strings.h>
@


14.13
log
@ah, r may be null from td_r when traversing
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.12 2006/01/20 20:27:40 brlcad Exp $";
d169 1
a169 1
		}	
d171 4
a174 1
		r = (struct nmgregion *)NULL;
@


14.12
log
@prevent a sigsegv when the region can't be evaluated successfully
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.11 2006/01/18 06:46:13 brlcad Exp $";
d167 1
a167 1
		if( do_bots ) {
@


14.11
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.10 2005/10/23 04:44:29 brlcad Exp $";
d133 1
a133 2
	if( BU_SETJUMP )
	{
d153 1
a153 2
		if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )
		{
d155 1
a155 3
		}
		else
		{
d165 1
a165 1
	if( ret_tree )
d167 4
a170 1
	else
a171 2
	if( do_bots ) {
		bot = nmg_bot( BU_LIST_FIRST( shell, &r->s_hd ), tsp->ts_tol );
d180 1
a180 2
	if( matparm )
	{
d183 1
a183 2
		while( matparm )
		{
d189 1
a189 2
	if (r != 0)
	{
d196 1
a196 2
		while( BU_LIST_NOT_HEAD( &s->l, &r->s_hd ) )
		{
d200 2
a201 4
			if( nmg_kill_cracks( s ) )
			{
				if( nmg_ks( s ) )
				{
d210 1
a210 2
		if( !empty_region )
		{
d214 1
a214 2
		if( !empty_region && !empty_model )
		{
d227 1
a227 2
		if( tsp->ts_mater.ma_color_valid )
		{
d242 1
a242 2
		    tsp->ts_los, tsp->ts_mater.ma_cinherit ) )
		{
d245 1
a245 3
	}
	else
	{
d251 1
a251 2
		    tsp->ts_los, tsp->ts_mater.ma_cinherit ) )
		{
d299 1
a299 2
	if( dp->d_flags & DIR_REGION )
	{
d328 1
a328 2
	if( rt_db_get_internal( &intern, dp, dbip, (fastf_t *)NULL, &rt_uniresource ) < 0 )
	{
d338 1
a338 2
	if( comb->tree && db_ck_v4gift_tree( comb->tree ) < 0 )
	{
d340 1
a340 2
		if( db_ck_v4gift_tree( comb->tree ) < 0 )
		{
d346 1
a346 2
	if( node_count > 0 )
	{
d353 1
a353 2
	else
	{
d358 1
a358 2
	if( actual_count < 1 )
	{
d367 1
a367 2
	for( i=0 ; i<actual_count ; i++ )
	{
d370 1
a370 2
		switch( tree_list[i].tl_op )
		{
d397 1
a397 2
	if( endp )
	{
d403 1
a403 2
	else
	{
d412 3
a414 4
	    comb->inherit ) )
		{
			bu_log( "G-nmg: error in making region (%s)\n" , dp->d_namep );
		}
d503 1
a503 2
	if ((dbip = db_open( argv[optind] , "r")) == DBI_NULL)
	{
d510 1
a510 2
	if ((fp_out = wdb_fopen( out_file )) == NULL)
	{
d521 1
a521 2
	for( i=optind ; i<argc ; i++ )
	{
d525 1
a525 2
		if( dp == DIR_NULL )
		{
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.9 2005/09/09 05:50:29 brlcad Exp $";
@


14.9
log
@use BRL-CAD instead of brl-cad if only to be at least internally consistent and serve good example
@
text
@d29 1
a29 1
 *  
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.8 2005/08/24 04:07:40 brlcad Exp $";
d162 1
a162 1
	
@


14.8
log
@replace the deprecated port_setlinebuf() with bu_setlinebuf()
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.7 2005/01/30 20:30:19 brlcad Exp $";
d530 1
a530 1
	/* Open brl-cad database */
@


14.8.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d36 1
a36 1
static const char RCSid[] = "$Header$";
d162 1
a162 1

d530 1
a530 1
	/* Open BRL-CAD database */
@


14.7
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/g-nmg.c,v 14.6 2004/12/21 07:32:29 morrison Exp $";
d455 1
a455 1
	port_setlinebuf( stderr );
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-nmg.c,v 14.5 2004/12/21 06:58:41 morrison Exp $";
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a32 2
 *  
 *
d36 1
a36 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-nmg.c,v 14.4 2004/12/21 06:50:58 morrison Exp $";
@


14.4
log
@remove the old distribution notice section
@
text
@a34 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1993-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d38 1
a38 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-nmg.c,v 14.3 2004/12/18 06:50:50 morrison Exp $";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a33 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Pacakge" agreement.
d41 1
a41 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-nmg.c,v 14.2 2004/12/18 02:38:09 morrison Exp $";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file g-nmg.c
d45 1
a45 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-nmg.c,v 14.1 2004/11/16 19:42:12 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			G - N M G . C
d44 1
a44 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-nmg.c,v 1.5 2004/09/03 23:30:56 morrison Exp $";
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d25 1
a25 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-nmg.c,v 1.4 2004/08/02 23:01:47 morrison Exp $";
d571 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d25 1
a25 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/g-nmg.c,v 1.3 2004/06/09 14:49:31 morrison Exp $";
d33 1
a33 1
#ifdef USE_STRING_H
@


1.3
log
@add unistd.h header for getopt()
@
text
@d25 1
a25 1
static const char RCSid[] = "$Header: /n/xoff/cvs/brlcad/src/conv/g-nmg.c,v 1.2 2004/06/08 22:04:09 morrison Exp $";
d28 1
a28 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d25 1
a25 1
static const char RCSid[] = "$Header$";
d32 1
a32 2


d40 7
d48 1
d55 2
d58 1
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d25 1
a25 1
static const char RCSid[] = "$Header: /cvs/brlcad/conv/g-nmg.c,v 11.41 2004/05/10 15:30:41 erikg Exp $";
a42 1
#include "externs.h"
@

