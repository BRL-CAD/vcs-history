head	14.20;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.7
	rel-7-10-2:14.17
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.6
	rel-7-6-0:14.7
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.20
date	2007.11.21.15.21.33;	author erikgreenwald;	state Exp;
branches;
next	14.19;

14.19
date	2007.10.14.22.15.54;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.18.04.13.44;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.05.14.21.04.30;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.44;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.09.09.09.44.08;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.01.30.20.30.20;	author brlcad;	state Exp;
branches
	14.7.6.1;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.51;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.10;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.14.49.31;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.10;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.57;	author morrison;	state Exp;
branches;
next	;

14.7.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.20
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@/*                     T A N K I L L - G . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file tankill-g.c
 *                      T A N K I L L - G
 *
 *  Program to convert the UK TANKILL format to BRL-CAD.
 *
 *  Author -
 *      John R. Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.19 2007/10/14 22:15:54 brlcad Exp $";
#endif

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <errno.h>

#if defined(HAVE_UNISTD_H)
#  include <unistd.h>
#else
#  if defined(HAVE_SYS_UNISTD_H)
#    include <sys/unistd.h>
#  endif
#endif

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "wdb.h"

/* local headers */
#include "../librt/debug.h"


static int keep_1001=0;		/* flag to indicate that components with id 1001 should not be ignored */
static int verbose=0;		/* verbosity flag */

#define START_ARRAY_SIZE	64
#define ARRAY_BLOCK_SIZE	64

#define	NAMESIZE	16	/* from db.h */

struct tankill_verts
{
	point_t coord;
	struct vertex *vp;
};

struct comp_idents		/* structure for linked list of components */
{
	int ident;
	int no_of_solids;
	struct comp_idents *next;
} *id_root;


/*	Adds another solid to the list of solids for each component code number.
 *	Returns the number of solids in this component (including the one just added)
 */
static int
Add_solid(int comp_code_num)
{
	struct comp_idents *ptr;

	/* if list is empty, start one */
	if( id_root == NULL )
	{
		id_root = (struct comp_idents *)bu_malloc( sizeof( struct comp_idents ) , "tankill-g: idents list" );
		id_root->next = (struct comp_idents *)NULL;
		id_root->ident = comp_code_num;
		id_root->no_of_solids = 1;
		return( 1 );
	}
	else
	{
		/* look for an entry for this component code number */
		ptr = id_root;
		while( ptr->next != (struct comp_idents *)NULL && ptr->ident != comp_code_num )
			ptr = ptr->next;

		/* if found one, just increment the number of solids */
		if( ptr->ident == comp_code_num )
		{
			ptr->no_of_solids++;
			return( ptr->no_of_solids );
		}
		else
		{
			/* make a new entry for this component */
			ptr->next = (struct comp_idents *)bu_malloc( sizeof( struct comp_idents ) , "tankill-g: idents list " );
			ptr = ptr->next;
			ptr->next = NULL;
			ptr->ident = comp_code_num;
			ptr->no_of_solids = 1;
			return( 1 );
		}
	}
}

/*	T A N K I L L - G
 *
 *	Converts "tankill" format geometry to BRL-CAD model
 */

static char *usage="Usage: tankill-g [-v] [-p] [-k] [-t tolerance] [-x lvl] [-X lvl] [-i input_tankill_file] [-o output_brlcad_model]\n\
    where tolerance is the minimum distance (mm) between distinct vertices,\n\
    input_tankill_file is the file name for input TANKILL model\n\
    output_brlcad_model is the file name for output BRL-CAD model\n\
	-v -> verbose\n\
	-p -> write output as polysolids rather than NMG's\n\
	-k -> keep components with id = 1001 (normally skipped)\n\
	-x lvl -> sets the librt debug flag to lvl\n\
	-X lvl -> sets the NMG debug flag to lvl\n";

int
main(int argc, char **argv)
{
	register int c;
	int i;
	int vert1,vert2;
	int vert_no;
	int no_of_verts;
	int comp_code;
	int array_size=START_ARRAY_SIZE;		/* size of "tankill_verts" array */
	int surr_code;	/* not useful */
	float x,y,z;
	struct tankill_verts *verts;
	struct vertex **face_verts[3];
	struct model *m;
	struct nmgregion *r;
	struct shell *s;
	struct faceuse *fu;
	struct bu_ptbl faces;
	struct bn_tol tol;
	struct wmember reg_head;
	struct comp_idents *ptr;
	char name[NAMESIZE+1];
	char input_file[START_ARRAY_SIZE] = {0};				/* input file name */
	char *output_file = "tankill.g";
	FILE *in_fp;					/* input file pointer */
	struct rt_wdb *out_fp;				/* output file pointer */
	int polysolids;					/* flag indicating polysolid output */
	int group_len[100];
	int all_len=0;

	/* Set defaults */

	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-6;
	tol.para = 1 - tol.perp;

	in_fp = stdin;
	polysolids = 1;
	id_root = (struct comp_idents *)NULL;
	bu_ptbl_init( &faces , 64, " &faces ");

	/* get command line arguments */
	while ((c = bu_getopt(argc, argv, "vknt:i:o:x:X:")) != EOF)
	{
		switch( c )
		{
			case 'v':
				verbose = 1;
				break;
			case 'x':
				sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.debug );
				bu_printb( "librt RT_G_DEBUG", RT_G_DEBUG, DEBUG_FORMAT );
				bu_log("\n");
				break;
			case 'X':
				sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
				bu_printb( "librt rt_g.NMG_debug", rt_g.NMG_debug, NMG_DEBUG_FORMAT );
				bu_log("\n");
				break;
			case 'k': /* keep component codes of 1001 */
				keep_1001 = 1;
				break;
			case 'n': /* choose NMG output */
				polysolids = 0;
				break;
			case 't': /* tolerance */
				tol.dist = atof( bu_optarg );
				tol.dist_sq = tol.dist * tol.dist;
				break;
			case 'i': /* input file name */
				if( (in_fp = fopen( bu_optarg , "r" )) == NULL )
				{
					fprintf( stderr , "Cannot open %s\n" , bu_optarg );
					perror( "tankill-g" );
					bu_exit( EXIT_FAILURE,  "Cannot open input file" );
				}
				strncpy( input_file , bu_optarg, START_ARRAY_SIZE );
				break;
			case 'o': /* output file name */
				output_file = bu_optarg;
				break;
			default:
				bu_exit( EXIT_FAILURE,  usage );
				break;
		}
	}

	if( (out_fp = wdb_fopen( output_file )) == NULL )
	{
		perror( output_file );
		fprintf( stderr , "tankill-g: Cannot open %s\n" , output_file );
		bu_exit( EXIT_FAILURE,  "Cannot open output file\n" );
	}

	/* use the input file name as the title (if available) */
	if( input_file[0] == 0 )
		mk_id( out_fp , "Conversion from TANKILL" );
	else
		mk_id( out_fp , input_file );

	/* make some space to store the vertices */
	verts = (struct tankill_verts *)bu_malloc( array_size*sizeof( struct tankill_verts ) , "tankill-g: verts array " );

	/* read the number of vertices to expect */
	while( fscanf( in_fp , "%d" , &no_of_verts ) != EOF )
	{
		/* make a new shell */
		m = nmg_mm();
		r = nmg_mrsv( m );
		s = BU_LIST_FIRST( shell , &r->s_hd );

		/* make sure there is enough room */
		if( no_of_verts > array_size )
		{
			while( array_size < no_of_verts )
				array_size += ARRAY_BLOCK_SIZE;
			verts = (struct tankill_verts *)bu_realloc( (char *)verts , array_size*sizeof( struct tankill_verts ) , "tankill-g: vertex array" );
		}

		/* read the component code number */
		if( fscanf( in_fp , "%d" , &comp_code ) == EOF )
		{
			fprintf( stderr , "Unexpected EOF\n" );
			break;
		}

		if( verbose )
			bu_log( "Component code %d (%d vertices)\n", comp_code, no_of_verts );

		/* read the surroundings code (I think this is like the space code in GIFT/FASTGEN) */
		if( fscanf( in_fp , "%d " , &surr_code ) == EOF )
		{
			fprintf( stderr , "Unexpected EOF\n" );
			break;
		}

		/* read the vertices into our structure and set the nmg vertex pointer to NULL */
		for( vert_no=0 ; vert_no < no_of_verts ; vert_no++ )
		{
			if( fscanf( in_fp , "%f %f %f" , &x , &y , &z ) == EOF )
			{
				fprintf( stderr , "Unexpected EOF\n" );
				break;
			}
			VSET( verts[vert_no].coord , x , y , z );
			verts[vert_no].vp = (struct vertex *)NULL;
		}

		/* skip component codes of 1001 (these are not real components) */
		if( comp_code == 1001 && !keep_1001 )
		{
			if( verbose )
				bu_log( "Skipping component code %d (%d vertices)\n", comp_code, no_of_verts );
			continue;
		}

		/* now start making faces, patch-style */
		vert_no = 0;
		vert1 = 0;
		while( vert_no < no_of_verts - 2 )
		{
			/* skip combinations that won't make a face */
			if( bn_3pts_collinear( verts[vert_no].coord , verts[vert_no+1].coord , verts[vert_no+2].coord , &tol ) )
				vert_no++;
			else if( !bn_3pts_distinct( verts[vert_no].coord , verts[vert_no+1].coord , verts[vert_no+2].coord , &tol ) )
				vert_no++;
			else
			{
				/* put next three vertices in an array for nmg_cface */
				for( i=0 ; i<3 ; i++ )
					face_verts[i] = &verts[i+vert_no].vp;

				/* make a face */
				fu = nmg_cmface( s , face_verts , 3 );

				/* make sure any duplicate vertices get the same vertex pointer */
				for( ; vert1 < vert_no+3 ; vert1++ )
				{
					for( vert2=vert1+1 ; vert2 < no_of_verts ; vert2++ )
					{
						if( verts[vert2].vp )
							continue;
						if( VEQUAL( verts[vert1].coord , verts[vert2].coord ) )
							verts[vert2].vp = verts[vert1].vp;
					}
				}
				vert_no++;
			}
		}

		/* assign geometry */
		for( i=0 ; i<no_of_verts ; i++ )
		{
			if( (verts[i].vp != (struct vertex *)NULL) &&
				(verts[i].vp->vg_p == (struct vertex_g *)NULL) )
					nmg_vertex_gv( verts[i].vp , verts[i].coord );
		}

		/* calculate plane equations for faces */
		for (BU_LIST_FOR(s, shell, &r->s_hd))
		{
		    NMG_CK_SHELL( s );
		    for (BU_LIST_FOR(fu, faceuse, &s->fu_hd))
		    {
			NMG_CK_FACEUSE( fu );
			if( fu->orientation == OT_SAME )
			{
				if( nmg_calc_face_g( fu ) )
					bu_log( "Failed to calculate plane eqn\n" );

				/* save the face in a table */
				bu_ptbl_ins( &faces , (long *)fu );
			}
		    }
		}

		/* look for edges that need to be broken apart for sharing
		 *
		 * Like so:
		 *    *------->*-------->*--------->*
		 *    *<----------------------------*
		 *
		 * bottom edge needs to be broken into three to share with
		 * upper edge
		 */

		s = BU_LIST_FIRST( shell , &r->s_hd );
		nmg_break_long_edges( s , &tol );

		/* glue all the faces together */
		nmg_gluefaces( (struct faceuse **)BU_PTBL_BASEADDR( &faces) , BU_PTBL_END( &faces ), &tol );

		/* re-initialize the face list */
		bu_ptbl_reset( &faces );

		/* Calculate bounding boxes */
		nmg_region_a( r , &tol );

		/* fix the normals */
		s = BU_LIST_FIRST( shell , &r->s_hd );

		nmg_fix_normals( s, &tol );

		/* make a name for this solid */
		sprintf( name , "s.%d.%d" , comp_code , Add_solid( comp_code ) );

		/* write the solid to the brlcad database */
		s = BU_LIST_FIRST( shell, &r->s_hd );
		if( polysolids )
		{
			if( verbose )
				bu_log( "\twriting polysolid %s\n", name );
			write_shell_as_polysolid( out_fp , name , s );
		}
		else
		{
			/* simplify the structure as much as possible before writing */
/*			nmg_shell_coplanar_face_merge( s , &tol , 1 );
			if( nmg_simplify_shell( s ) )
			{
				bu_log( "tankill-g: nmg_simplify_shell emptied %s\n" , name );
				nmg_km( m );
				continue;
			}
			else */
			{
				/* write it out */
				if( verbose )
					bu_log( "\twriting polysolid %s\n", name );
				mk_nmg( out_fp , name , m );
			}
		}

		/* kill the nmg model */
		nmg_km( m );

	}

	/* free the memory for the face list */
	bu_ptbl_free( &faces );

	/* Make regions */
	ptr = id_root;
	while( ptr != NULL )
	{
		BU_LIST_INIT( &reg_head.l );

		/* make linked list of members */
		for( i=0 ; i<ptr->no_of_solids ; i++ )
		{
			/* recreate the name of each solid */
			sprintf( name , "s.%d.%d" , ptr->ident , i+1 );
			(void)mk_addmember( name , &reg_head.l , NULL, WMOP_UNION );
		}

		/* make the region name */
		sprintf( name , "r.%d" , ptr->ident );

		/* make the region */
		if( verbose )
		{
			if( ptr->ident == 1000 )
				bu_log( "Creating air region %s\n", name );
			else
				bu_log( "Creating region %s\n", name );
		}
		if( ptr->ident == 1000 )
		{
			if (mk_lrcomb( out_fp , name , &reg_head , 1 , (char *)NULL ,
				(char *)NULL , (unsigned char *)NULL , 0 , 1 ,
				0 , 0 , 0 ) )
			{
				bu_exit( EXIT_FAILURE,  "tankill: Error in freeing region memory" );
			}
		}
		else
		{
			if (mk_lrcomb( out_fp , name , &reg_head , 1 , (char *)NULL ,
				(char *)NULL , (unsigned char *)NULL , ptr->ident , 0 ,
				1 , 100 , 0 ) )
			{
				bu_exit( EXIT_FAILURE,  "tankill: Error in freeing region memory" );
			}
		}
		ptr = ptr->next;
	}

	/* Make groups based on ident numbers */
	for( i=0 ; i<100 ; i++ )
	{
		BU_LIST_INIT( &reg_head.l );

		group_len[i] = 0;
		ptr = id_root;
		while( ptr != NULL )
		{
			if( ptr->ident/100 == i )
			{
				/* make the region name */
				sprintf( name , "r.%d" , ptr->ident );

				(void)mk_addmember( name , &reg_head.l , NULL, WMOP_UNION );
				group_len[i]++;
			}
			ptr = ptr->next;
		}

		if( group_len[i] )
		{
			/* make a group name */
			sprintf( name , "%02dXX_codes" , i );

			/* make the group */
			if( verbose )
				bu_log( "Creating group %s\n", name );
			if( mk_lcomb( out_fp , name , &reg_head , 0,
				(char *)NULL, (char *)NULL,
				(unsigned char *)NULL, 0 ) )
			{
				bu_exit( EXIT_FAILURE,  "tankill: Error in freeing region memory" );
			}
		}
	}

	/* Make next higher level groups */
	for( i=0 ; i<10 ; i++ )
	{
		int do_group;
		int k;

		BU_LIST_INIT( &reg_head.l );

		do_group = 0;
		for( k=i*10 ; k<(i+1)*10 ; k++ )
		{
			if( group_len[k] )
			{
				do_group = 1;

				/* make group name */
				sprintf( name , "%02dXX_codes" , k );
				(void)mk_addmember( name , &reg_head.l , NULL, WMOP_UNION );
			}
		}
		if( do_group )
		{
			/* make the group */
			sprintf( name , "%dXXX_codes" , i );
			if( verbose )
				bu_log( "Creating group %s\n", name );
			if( mk_lcomb( out_fp , name , &reg_head , 0,
			(char *)NULL, (char *)NULL, (unsigned char *)0, 0 ) )
			{
				bu_exit( EXIT_FAILURE,  "tankill: Error in freeing region memory" );
			}
		}
	}

	/* Make top level group "all" */

	BU_LIST_INIT( &reg_head.l );

	for( i=0 ; i<10 ; i++ )
	{
		int do_group;
		int k;

		do_group = 0;
		for( k=i*10 ; k<(i+1)*10 ; k++ )
		{
			if( group_len[k] )
			{
				do_group = 1;
				break;
			}
		}
		if( do_group )
		{
			/* make the group */
			sprintf( name , "%dXXX_codes" , i );

			if( mk_addmember( name , &reg_head.l , NULL, WMOP_UNION ) == WMEMBER_NULL )
				bu_log( "mk_admember failed for %s\n" , name );
			all_len++;
		}
	}
	if( all_len )
	{
		if( verbose )
			bu_log( "Creating top level group 'all'\n" );
		if( mk_lcomb( out_fp , "all" , &reg_head , 0,
		    (char *)NULL, (char *)NULL, (unsigned char *)NULL, 0 ) )
			bu_exit( EXIT_FAILURE,  "tankill: Error in freeing region memory" );
	}
	wdb_close( out_fp );
	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.19
log
@more level 4 flawfinder issues.  mostly string length clampages.
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.18 2007/09/15 16:23:04 brlcad Exp $";
d225 1
a225 1
					bu_bomb( "Cannot open input file" );
d233 1
a233 1
				bu_bomb( usage );
d242 1
a242 1
		bu_bomb( "Cannot open output file\n" );
d463 1
a463 1
				bu_bomb( "tankill: Error in freeing region memory" );
d472 1
a472 1
				bu_bomb( "tankill: Error in freeing region memory" );
d510 1
a510 1
				bu_bomb( "tankill: Error in freeing region memory" );
d544 1
a544 1
				bu_bomb( "tankill: Error in freeing region memory" );
d583 1
a583 1
			bu_bomb( "tankill: Error in freeing region memory" );
@


14.18
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.17 2007/05/18 04:13:44 brlcad Exp $";
d170 1
a170 1
	char *input_file;				/* input file name */
a188 1
	input_file = (char *)NULL;
d227 1
a227 2
				input_file = bu_malloc( sizeof( bu_optarg ) +1 , "tankill-g: input file name" );
				strcpy( input_file , bu_optarg );
d246 1
a246 1
	if( input_file == (char *)NULL )
@


14.17
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.16 2007/05/14 21:04:30 brlcad Exp $";
d44 1
a44 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d46 1
@


14.16
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.15 2007/02/02 08:48:28 brlcad Exp $";
d229 1
a229 1
					rt_bomb( "Cannot open input file" );
d238 1
a238 1
				rt_bomb( usage );
d247 1
a247 1
		rt_bomb( "Cannot open output file\n" );
d468 1
a468 1
				rt_bomb( "tankill: Error in freeing region memory" );
d477 1
a477 1
				rt_bomb( "tankill: Error in freeing region memory" );
d515 1
a515 1
				rt_bomb( "tankill: Error in freeing region memory" );
d549 1
a549 1
				rt_bomb( "tankill: Error in freeing region memory" );
d588 1
a588 1
			rt_bomb( "tankill: Error in freeing region memory" );
@


14.15
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.14 2007/01/27 01:41:32 brlcad Exp $";
d272 1
a272 1
			verts = (struct tankill_verts *)rt_realloc( (char *)verts , array_size*sizeof( struct tankill_verts ) , "tankill-g: vertex array" );
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.13 2007/01/23 01:13:25 brlcad Exp $";
d197 1
a197 1
	while ((c = getopt(argc, argv, "vknt:i:o:x:X:")) != EOF)
d205 1
a205 1
				sscanf( optarg, "%x", (unsigned int *)&rt_g.debug );
d210 1
a210 1
				sscanf( optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
d221 1
a221 1
				tol.dist = atof( optarg );
d225 1
a225 1
				if( (in_fp = fopen( optarg , "r" )) == NULL )
d227 1
a227 1
					fprintf( stderr , "Cannot open %s\n" , optarg );
d231 2
a232 2
				input_file = bu_malloc( sizeof( optarg ) +1 , "tankill-g: input file name" );
				strcpy( input_file , optarg );
d235 1
a235 1
				output_file = optarg;
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.12 2007/01/20 14:36:44 brlcad Exp $";
d183 6
a188 6
        /* XXX These need to be improved */
        tol.magic = BN_TOL_MAGIC;
        tol.dist = 0.005;
        tol.dist_sq = tol.dist * tol.dist;
        tol.perp = 1e-6;
        tol.para = 1 - tol.perp;
d272 1
a272 1
		        verts = (struct tankill_verts *)rt_realloc( (char *)verts , array_size*sizeof( struct tankill_verts ) , "tankill-g: vertex array" );
d360 5
a364 5
		        NMG_CK_FACEUSE( fu );
		        if( fu->orientation == OT_SAME )
		        {
		                if( nmg_calc_face_g( fu ) )
		                        bu_log( "Failed to calculate plane eqn\n" );
d368 1
a368 1
		        }
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.11 2006/01/28 00:36:27 brlcad Exp $";
@


14.11
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.10 2006/01/18 06:46:13 brlcad Exp $";
@


14.10
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.9 2005/10/23 04:44:30 brlcad Exp $";
d42 1
d46 1
a46 1
#include <string.h>
d48 1
a48 1
#include <strings.h>
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.8 2005/09/09 09:44:08 brlcad Exp $";
@


14.8
log
@BRL-CAD not BRLCAD, consistency
@
text
@d29 1
a29 1
 *  
d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.7 2005/01/30 20:30:20 brlcad Exp $";
@


14.7
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/conv/tankill-g.c,v 14.6 2004/12/21 07:32:29 morrison Exp $";
d137 1
a137 1
 *	Converts "tankill" format geometry to BRLCAD model
@


14.7.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d36 1
a36 1
static const char RCSid[] = "$Header$";
d137 1
a137 1
 *	Converts "tankill" format geometry to BRL-CAD model
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/tankill-g.c,v 14.5 2004/12/21 06:58:41 morrison Exp $";
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a32 2
 *  
 *
d36 1
a36 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/tankill-g.c,v 14.4 2004/12/21 06:50:58 morrison Exp $";
@


14.4
log
@remove the old distribution notice section
@
text
@a34 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1993-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d38 1
a38 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/tankill-g.c,v 14.3 2004/12/18 06:50:51 morrison Exp $";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a33 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Pacakge" agreement.
d41 1
a41 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/tankill-g.c,v 14.2 2004/12/18 02:38:10 morrison Exp $";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file tankill-g.c
d45 1
a45 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/tankill-g.c,v 14.1 2004/11/16 19:42:13 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d44 1
a44 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/tankill-g.c,v 1.5 2004/09/03 23:30:56 morrison Exp $";
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/tankill-g.c,v 1.4 2004/08/02 23:01:47 morrison Exp $";
d581 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/conv/tankill-g.c,v 1.3 2004/06/09 14:49:31 morrison Exp $";
d32 1
a32 1
#ifdef USE_STRING_H
@


1.3
log
@add unistd.h header for getopt()
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /n/xoff/cvs/brlcad/src/conv/tankill-g.c,v 1.2 2004/06/08 22:04:10 morrison Exp $";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header$";
d31 1
a31 2


d40 7
d48 1
d55 2
d58 1
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvs/brlcad/conv/tankill-g.c,v 11.23 2004/05/10 15:30:42 erikg Exp $";
a42 1
#include "externs.h"
@

