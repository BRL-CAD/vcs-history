head	14.24;
access;
symbols
	rel-7-10-4:14.20
	STABLE:14.20.0.2
	stable-branch:14.7
	rel-7-10-2:14.20
	rel-7-10-0:14.18
	rel-7-8-4:14.15
	rel-7-8-2:14.15
	rel-7-8-0:14.15
	trimnurbs-branch:14.15.0.2
	help:14.15
	temp_tag:14.11
	bobWinPort-20051223-freeze:14.7.2.1
	postmerge-20051223-bobWinPort:14.11
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.2
	rel-7-6-0:14.8
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.24
date	2007.12.16.15.59.37;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.10.22.17.42.34;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.10.14.22.15.54;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.05.18.04.13.44;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.04.29.02.05.02;	author johnranderson;	state Exp;
branches;
next	14.18;

14.18
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.01.21.21.09.44;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.12.15.48.07;	author bob1961;	state Exp;
branches;
next	14.11;

14.11
date	2005.12.23.21.26.29;	author bob1961;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.09.09.05.50.29;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.08.28.00.33.33;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2005.01.30.20.30.20;	author brlcad;	state Exp;
branches
	14.7.2.1;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.44.32;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.09;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.14.49.31;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.09;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.52;	author morrison;	state Exp;
branches;
next	;

14.7.2.1
date	2005.09.13.18.53.08;	author bob1961;	state Exp;
branches;
next	;

14.8.2.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.24
log
@convert all bzero calls to memset
@
text
@/*                         G - S T L . C
 * BRL-CAD
 *
 * Copyright (c) 2003-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file g-stl.c
 *
 *  Program to convert a BRL-CAD model (in a .g file) to an STL file
 *  by calling on the NMG booleans.  Based on g-acad.c.
 *
 *  Authors -
 *	Charles M. Kennedy
 *	John R. Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.23 2007/10/22 17:42:34 brlcad Exp $ (BRL)";
#endif

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <string.h>
#if defined(HAVE_UNISTD_H)
#  include <unistd.h>
#else
#  if defined(HAVE_SYS_UNISTD_H)
#    include <sys/unistd.h>
#  endif
#endif

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"

/* local headers */
#include "../librt/debug.h"


#define V3ARGSIN(a)       (a)[X]/25.4, (a)[Y]/25.4, (a)[Z]/25.4
#define VSETIN( a, b )	{\
    (a)[X] = (b)[X]/25.4; \
    (a)[Y] = (b)[Y]/25.4; \
    (a)[Z] = (b)[Z]/25.4; \
}

BU_EXTERN(union tree *do_region_end, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data));

static char	usage[] = "\
Usage: %s [-b][-v][-i][-xX lvl][-a abs_tess_tol][-r rel_tess_tol][-n norm_tess_tol]\n\
[-D dist_calc_tol] [-o output_file_name.stl | -m directory_name] brlcad_db.g object(s)\n";

static int	NMG_debug;	/* saved arg of -X, for longjmp handling */
static int	verbose;
static int	ncpu = 1;	/* Number of processors */
static int	binary = 0;	/* Default output is ASCII */
static char	*output_file = NULL;	/* output filename */
static char	*output_directory = NULL; /* directory name to hold output files */
static struct bu_vls file_name;	/* file name built from region name */
static FILE	*fp;		/* Output file pointer */
static int	bfd;		/* Output binary file descriptor */
static struct db_i		*dbip;
static struct rt_tess_tol	ttol;	/* tesselation tolerance in mm */
static struct bn_tol		tol;	/* calculation tolerance */
static struct model		*the_model;

static struct db_tree_state	tree_state;	/* includes tol & model */

static int		regions_tried = 0;
static int		regions_converted = 0;
static int		regions_written = 0;
static int		inches = 0;
static unsigned int	tot_polygons = 0;


/* Byte swaps a four byte value */
void
lswap( unsigned int *v)
{
	unsigned int r;

	r =*v;
	*v = ((r & 0xff) << 24) | ((r & 0xff00) << 8) | ((r & 0xff0000) >> 8)
		| ((r & 0xff000000) >> 24);
}

/*
 *			M A I N
 */
int
main(argc, argv)
int	argc;
char	*argv[];
{
	register int	c;
	double		percent;
	int		i;

	bu_setlinebuf( stderr );

#if MEMORY_LEAK_CHECKING
	rt_g.debug |= DEBUG_MEM_FULL;
#endif
	tree_state = rt_initial_tree_state;	/* struct copy */
	tree_state.ts_tol = &tol;
	tree_state.ts_ttol = &ttol;
	tree_state.ts_m = &the_model;

	/* Set up tesselation tolerance defaults */
	ttol.magic = RT_TESS_TOL_MAGIC;
	/* Defaults, updated by command line options. */
	ttol.abs = 0.0;
	ttol.rel = 0.01;
	ttol.norm = 0.0;

	/* Set up calculation tolerance defaults */
	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-5;
	tol.para = 1 - tol.perp;

	/* init resources we might need */
	rt_init_resource( &rt_uniresource, 0, NULL );

	/* make empty NMG model */
	the_model = nmg_mm();
	BU_LIST_INIT( &rt_g.rtg_vlfree );	/* for vlist macros */

	/* Get command line arguments. */
	while ((c = bu_getopt(argc, argv, "a:bm:n:o:r:vx:D:P:X:i")) != EOF) {
		switch (c) {
		case 'a':		/* Absolute tolerance. */
			ttol.abs = atof(bu_optarg);
			ttol.rel = 0.0;
			break;
		case 'b':		/* Binary output file */
			binary=1;
			break;
		case 'n':		/* Surface normal tolerance. */
			ttol.norm = atof(bu_optarg);
			ttol.rel = 0.0;
			break;
		case 'o':		/* Output file name. */
			output_file = bu_optarg;
			break;
		case 'm':
			output_directory = bu_optarg;
			bu_vls_init( &file_name );
			break;
		case 'r':		/* Relative tolerance. */
			ttol.rel = atof(bu_optarg);
			break;
		case 'v':
			verbose++;
			break;
		case 'P':
			ncpu = atoi( bu_optarg );
			rt_g.debug = 1;	/* XXX DEBUG_ALLRAYS -- to get core dumps */
			break;
		case 'x':
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.debug );
			break;
		case 'D':
			tol.dist = atof(bu_optarg);
			tol.dist_sq = tol.dist * tol.dist;
			rt_pr_tol( &tol );
			break;
		case 'X':
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
			NMG_debug = rt_g.NMG_debug;
			break;
		case 'i':
			inches = 1;
			break;
		default:
			bu_exit(1, usage, argv[0]);
			break;
		}
	}

	if (bu_optind+1 >= argc) {
		bu_exit(1, usage, argv[0]);
	}

	if( output_file && output_directory ) {
		bu_log( "ERROR: options \"-o\" and \"-m\" are mutually exclusive\n" );
		bu_exit(1, usage, argv[0] );
	}

	if( !output_file && !output_directory ) {
		if( binary ) {
			bu_exit(1, "Can't output binary to stdout\n");
		}
		fp = stdout;
	} else if( output_file ) {
		if( !binary ) {
			/* Open ASCII output file */
			if( (fp=fopen( output_file, "w+" )) == NULL )
			{
				perror( argv[0] );
				bu_exit(1, "Cannot open ASCII output file (%s) for writing\n", output_file );
			}
		} else {
			/* Open binary output file */
#ifdef _WIN32
			if ((bfd=open(output_file, _O_WRONLY|_O_CREAT|_O_TRUNC|_O_BINARY, _S_IREAD|_S_IWRITE)) < 0)
#else
			if( (bfd=open( output_file, O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH)) < 0 )
#endif
			{
				perror( argv[0] );
				bu_exit(1, "Cannot open binary output file (%s) for writing\n", output_file );
			}
		}
	}

	/* Open brl-cad database */
	argc -= bu_optind;
	argv += bu_optind;
	if ((dbip = db_open(argv[0], "r")) == DBI_NULL) {
		perror(argv[0]);
		bu_exit(1, "Unable to open geometry file (%s)\n", argv[0]);
	}
	if( db_dirbuild( dbip ) ) {
	    bu_exit(1, "ERROR: db_dirbuild failed\n" );
	}

	BN_CK_TOL(tree_state.ts_tol);
	RT_CK_TESS_TOL(tree_state.ts_ttol);

	if( verbose ) {
		bu_log( "Model: %s\n", argv[0] );
		bu_log( "Objects:" );
		for( i=1 ; i<argc ; i++ )
			bu_log( " %s", argv[i] );
		bu_log( "\nTesselation tolerances:\n\tabs = %g mm\n\trel = %g\n\tnorm = %g\n",
			tree_state.ts_ttol->abs, tree_state.ts_ttol->rel, tree_state.ts_ttol->norm );
		bu_log( "Calculational tolerances:\n\tdist = %g mm perp = %g\n",
			tree_state.ts_tol->dist, tree_state.ts_tol->perp );
	}

	/* Write out STL header if output file is binary */
	if( binary && output_file ) {
		char buf[81];	/* need exactly 80 char for header */

		memset(buf, 0, sizeof( buf ));
		if (inches) {
			strcpy( buf, "BRL-CAD generated STL FILE (Units=inches)");
		} else {
			strcpy( buf, "BRL-CAD generated STL FILE (Units=mm)");
		}
		write(bfd, &buf, 80);

		/* write a place keeper for the number of triangles */
		memset(buf, 0, 4);
		write(bfd, &buf, 4);
	}

	/* Walk indicated tree(s).  Each region will be output separately */
	(void) db_walk_tree(dbip, argc-1, (const char **)(argv+1),
		1,			/* ncpu */
		&tree_state,
		0,			/* take all regions */
		do_region_end,
		nmg_booltree_leaf_tess,
		(genptr_t)NULL);	/* in librt/nmg_bool.c */

	percent = 0;
	if(regions_tried>0){
		percent = ((double)regions_converted * 100) / regions_tried;
		if( verbose )
			bu_log("Tried %d regions, %d converted to NMG's successfully.  %g%%\n",
				regions_tried, regions_converted, percent);
	}
	percent = 0;

	if( regions_tried > 0 ){
		percent = ((double)regions_written * 100) / regions_tried;
		if( verbose )
			bu_log( "                  %d triangulated successfully. %g%%\n",
				regions_written, percent );
	}

	bu_log( "%ld triangles written\n", tot_polygons );

	if( output_file ) {
		if( binary ) {
			unsigned char tot_buffer[4];

			/* Re-position pointer to 80th byte */
			lseek( bfd, 80, SEEK_SET );

			/* Write out number of triangles */
			bu_plong( tot_buffer, (unsigned long)tot_polygons );
			lswap( (unsigned int *)tot_buffer );
			write(bfd, tot_buffer, 4);
			close( bfd );
		} else {
			fclose(fp);
		}
	}

	/* Release dynamic storage */
	nmg_km(the_model);
	rt_vlist_cleanup();
	db_close(dbip);

#if MEMORY_LEAK_CHECKING
	bu_prmem("After complete G-STL conversion");
#endif

	return 0;
}

static void
nmg_to_stl( r, pathp, region_id, material_id )
struct nmgregion *r;
struct db_full_path *pathp;
int region_id;
int material_id;
{
	struct model *m;
	struct shell *s;
	struct vertex *v;
	char *region_name;
	int region_polys=0;

	NMG_CK_REGION( r );
	RT_CK_FULL_PATH(pathp);

	region_name = db_path_to_string( pathp );

	if( output_directory ) {
		char *c;

		bu_vls_trunc( &file_name, 0 );
		bu_vls_strcpy( &file_name, output_directory );
		bu_vls_putc( &file_name, '/' );
		c = region_name;
		c++;
		while( *c != '\0' ) {
			if( *c == '/' ) {
				bu_vls_putc( &file_name, '@@' );
			} else if( *c == '.' || isspace( *c ) ) {
				bu_vls_putc( &file_name, '_' );
			} else {
				bu_vls_putc( &file_name, *c );
			}
			c++;
		}
		bu_vls_strcat( &file_name, ".stl" );
		if( !binary ) {
			/* Open ASCII output file */
			if( (fp=fopen( bu_vls_addr( &file_name ), "w+" )) == NULL )
			{
				perror( "g-stl" );
				bu_exit(1, "Cannot open ASCII output file (%s) for writing\n", bu_vls_addr( &file_name ) );
			}
		} else {
			char buf[81] = {0};	/* need exactly 80 char for header */

			/* Open binary output file */
#ifdef _WIN32
			if ((bfd=open(bu_vls_addr(&file_name), _O_WRONLY|_O_CREAT|_O_TRUNC, _S_IREAD|_S_IWRITE)) < 0)
#else
			if( (bfd=open( bu_vls_addr( &file_name ), O_WRONLY|O_CREAT|O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH)) < 0 )
#endif
			{
				perror( "g-stl" );
				bu_log( "ERROR: Cannot open binary output file (%s) for writing\n", bu_vls_addr( &file_name ) );
			}

			if (!region_name) {
			    snprintf( buf, 80, "BRL-CAD generated STL FILE (Units=%s)", inches?"inches":"mm");
			} else {
			    if (region_name && strlen(region_name) > 0) {
				snprintf( buf, 80, "BRL-CAD generated STL FILE (Units=%s) %s", inches?"inches":"mm", region_name);
			    } else {
				snprintf( buf, 80, "BRL-CAD generated STL FILE (Units=%s) %s", inches?"inches":"mm", region_name);
			    }
			}
			write(bfd, &buf, 80);

			/* write a place keeper for the number of triangles */
			memset(buf, 0, 4);
			write(bfd, &buf, 4);
		}
	}

	m = r->m_p;
	NMG_CK_MODEL( m );

	/* Write pertinent info for this region */
	if( !binary )
		fprintf( fp, "solid %s\n", (region_name+1));

	/* triangulate model */
	nmg_triangulate_model( m, &tol );

	/* Check triangles */
	for( BU_LIST_FOR( s, shell, &r->s_hd ) )
	{
		struct faceuse *fu;

		NMG_CK_SHELL( s );

		for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) )
		{
			struct loopuse *lu;
			vect_t facet_normal;

			NMG_CK_FACEUSE( fu );

			if( fu->orientation != OT_SAME )
				continue;

			/* Grab the face normal and save it for all the vertex loops */
			NMG_GET_FU_NORMAL( facet_normal, fu);

			for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) )
			{
				struct edgeuse *eu;
				int vert_count=0;
				float flts[12];
				float *flt_ptr;
				unsigned char vert_buffer[50];

				NMG_CK_LOOPUSE( lu );

				if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
					continue;

				memset(vert_buffer, 0, sizeof( vert_buffer ));

				if( !binary ) {
					fprintf( fp, "  facet normal %f %f %f\n", V3ARGS( facet_normal ) );
					fprintf( fp, "    outer loop\n");
				} else {
					flt_ptr = flts;
					VMOVE( flt_ptr, facet_normal );
					flt_ptr += 3;
				}

				/* check vertex numbers for each triangle */
				for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) )
				{
					NMG_CK_EDGEUSE( eu );

					vert_count++;

					v = eu->vu_p->v_p;
					NMG_CK_VERTEX( v );
					if( !binary )
						fprintf( fp, "      vertex ");
					if (inches)
						if( !binary ) {
							fprintf( fp, "%f %f %f\n", V3ARGSIN( v->vg_p->coord ));
						} else {
							VSETIN( flt_ptr, v->vg_p->coord );
							flt_ptr += 3;
						}
					else
						if( !binary ) {
							fprintf( fp, "%f %f %f\n", V3ARGS( v->vg_p->coord ));
						} else {
							VMOVE( flt_ptr, v->vg_p->coord );
							flt_ptr += 3;
						}
				}
				if( vert_count > 3 )
				{
					bu_free( region_name, "region name" );
					bu_log( "lu x%x has %d vertices!\n", lu, vert_count );
					bu_exit(1, "ERROR: LU is not a triangle" );
				}
				else if( vert_count < 3 )
					continue;
				if( !binary ) {
					fprintf( fp, "    endloop\n");
					fprintf( fp, "  endfacet\n");
				} else {
					int i;

					htonf(vert_buffer, (const unsigned char *)flts, 12 );
					for( i=0 ; i<12 ; i++ ) {
						lswap( (unsigned int *)&vert_buffer[i*4] );
					}
					write(bfd, vert_buffer, 50);
				}
				tot_polygons++;
				region_polys++;
			}
		}
	}
	if( !binary )
		fprintf( fp, "endsolid %s\n", (region_name+1));

	if( output_directory ) {
		if( binary ) {
			unsigned char tot_buffer[4];

			/* Re-position pointer to 80th byte */
			lseek( bfd, 80, SEEK_SET );

			/* Write out number of triangles */
			bu_plong( tot_buffer, (unsigned long)region_polys );
			lswap( (unsigned int *)tot_buffer );
			write(bfd, tot_buffer, 4);
			close( bfd );
		} else {
			fclose(fp);
		}
	}
	bu_free( region_name, "region name" );
}

/*
*			D O _ R E G I O N _ E N D
*
*  Called from db_walk_tree().
*
*  This routine must be prepared to run in parallel.
*/
union tree *do_region_end(tsp, pathp, curtree, client_data)
register struct db_tree_state	*tsp;
struct db_full_path	*pathp;
union tree		*curtree;
genptr_t		client_data;
{
	union tree		*ret_tree;
	struct bu_list		vhead;
	struct nmgregion	*r;

	RT_CK_FULL_PATH(pathp);
	RT_CK_TREE(curtree);
	RT_CK_TESS_TOL(tsp->ts_ttol);
	BN_CK_TOL(tsp->ts_tol);
	NMG_CK_MODEL(*tsp->ts_m);

	BU_LIST_INIT(&vhead);

	if (RT_G_DEBUG&DEBUG_TREEWALK || verbose) {
		char	*sofar = db_path_to_string(pathp);
		bu_log("\ndo_region_end(%d %d%%) %s\n",
			regions_tried,
			regions_tried>0 ? (regions_converted * 100) / regions_tried : 0,
			sofar);
		bu_free(sofar, "path string");
	}

	if (curtree->tr_op == OP_NOP)
		return  curtree;

	regions_tried++;

	/* Begin bu_bomb() protection */
	if( ncpu == 1 ) {
		if( BU_SETJUMP )  {
			/* Error, bail out */
			char *sofar;
			BU_UNSETJUMP;		/* Relinquish the protection */

			sofar = db_path_to_string(pathp);
			bu_log( "FAILED in Boolean evaluation: %s\n", sofar );
			bu_free( (char *)sofar, "sofar" );

			/* Sometimes the NMG library adds debugging bits when
			 * it detects an internal error, before bombing out.
			 */
			rt_g.NMG_debug = NMG_debug;	/* restore mode */

			/* Release any intersector 2d tables */
			nmg_isect2d_final_cleanup();

			/* Release the tree memory & input regions */
/*XXX*/			/* db_free_tree(curtree);*/		/* Does an nmg_kr() */

			/* Get rid of (m)any other intermediate structures */
			if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )  {
				nmg_km(*tsp->ts_m);
			} else {
				bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
			}

			/* Now, make a new, clean model structure for next pass. */
			*tsp->ts_m = nmg_mm();
			goto out;
		}
	}
	if( verbose )
		bu_log("Attempting to process region %s\n",db_path_to_string( pathp ));

	ret_tree = nmg_booltree_evaluate( curtree, tsp->ts_tol, &rt_uniresource );	/* librt/nmg_bool.c */
	BU_UNSETJUMP;		/* Relinquish the protection */

	if( ret_tree )
		r = ret_tree->tr_d.td_r;
	else
	{
	    if( verbose ) {
		bu_log( "\tNothing left of this region after Boolean evaluation\n" );
	    }
	    regions_written++; /* don't count as a failure */
	    r = (struct nmgregion *)NULL;
	}
/*	regions_done++;  XXX */

	regions_converted++;

	if (r != (struct nmgregion *)NULL)
	{
		struct shell *s;
		int empty_region=0;
		int empty_model=0;

		/* Kill cracks */
		s = BU_LIST_FIRST( shell, &r->s_hd );
		while( BU_LIST_NOT_HEAD( &s->l, &r->s_hd ) )
		{
			struct shell *next_s;

			next_s = BU_LIST_PNEXT( shell, &s->l );
			if( nmg_kill_cracks( s ) )
			{
				if( nmg_ks( s ) )
				{
					empty_region = 1;
					break;
				}
			}
			s = next_s;
		}

		/* kill zero length edgeuses */
		if( !empty_region )
		{
			 empty_model = nmg_kill_zero_length_edgeuses( *tsp->ts_m );
		}

		if( !empty_region && !empty_model )
		{
			if( BU_SETJUMP )
			{
				char *sofar;

				BU_UNSETJUMP;

				sofar = db_path_to_string(pathp);
				bu_log( "FAILED in triangulator: %s\n", sofar );
				bu_free( (char *)sofar, "sofar" );

				/* Sometimes the NMG library adds debugging bits when
				 * it detects an internal error, before before bombing out.
				 */
				rt_g.NMG_debug = NMG_debug;	/* restore mode */

				/* Release any intersector 2d tables */
				nmg_isect2d_final_cleanup();

				/* Get rid of (m)any other intermediate structures */
				if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )
				{
					nmg_km(*tsp->ts_m);
				}
				else
				{
					bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
				}

				/* Now, make a new, clean model structure for next pass. */
				*tsp->ts_m = nmg_mm();
				goto out;
			}
			/* Write the region to the STL file */
			nmg_to_stl( r, pathp, tsp->ts_regionid, tsp->ts_gmater );

			regions_written++;

			BU_UNSETJUMP;
		}

		if( !empty_model )
			nmg_kr( r );
	}

out:
	/*
	 *  Dispose of original tree, so that all associated dynamic
	 *  memory is released now, not at the end of all regions.
	 *  A return of TREE_NULL from this routine signals an error,
	 *  and there is no point to adding _another_ message to our output,
	 *  so we need to cons up an OP_NOP node to return.
	 */


	if(regions_tried>0){
		float npercent, tpercent;

		npercent = (float)(regions_converted * 100) / regions_tried;
		tpercent = (float)(regions_written * 100) / regions_tried;
		if( verbose )
			bu_log("Tried %d regions, %d conv. to NMG's %d conv. to tri. nmgper = %.2f%% triper = %.2f%% \n",
				regions_tried, regions_converted, regions_written, npercent,tpercent);
	}

	db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */

	BU_GETUNION(curtree, tree);
	curtree->magic = RT_TREE_MAGIC;
	curtree->tr_op = OP_NOP;
	return(curtree);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.23
log
@whoosh, another 10% complete on the bu_bomb to bu_exit conversion review.  also includes a slew of custom exit() calls that can use bu_exit() as well as toning down a slew of overzealous exclamation point use.  (20% complete overall)
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.22 2007/10/14 22:15:54 brlcad Exp $ (BRL)";
d277 1
a277 1
		bzero( buf, sizeof( buf ) );
d286 1
a286 1
		bzero( buf, 4 );
d416 1
a416 1
			bzero( buf, 4 );
d464 1
a464 1
				bzero( vert_buffer, sizeof( vert_buffer ) );
@


14.22
log
@more level 4 flawfinder issues.  mostly string length clampages.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.21 2007/09/15 16:23:04 brlcad Exp $ (BRL)";
d207 1
a207 2
			bu_log(  usage, argv[0]);
			exit(1);
d213 1
a213 2
		bu_log( usage, argv[0]);
		exit(1);
d218 1
a218 2
		bu_log( usage, argv[0] );
		exit( 1 );
d223 1
a223 2
			bu_log( "Can't output binary to stdout\n");
			exit( 1 );
a230 1
				bu_log( "Cannot open ASCII output file (%s) for writing\n", output_file );
d232 1
a232 1
				exit( 1 );
a241 1
				bu_log( "Cannot open binary output file (%s) for writing\n", output_file );
d243 1
a243 1
				exit( 1 );
d253 1
a253 1
		exit(1);
d256 1
a256 2
	    bu_log( "db_dirbuild failed\n" );
	    exit(1);
a386 1
				bu_log( "Cannot open ASCII output file (%s) for writing\n", bu_vls_addr( &file_name ) );
d388 1
a388 1
				exit( 1 );
a399 1
				bu_log( "Cannot open binary output file (%s) for writing\n", bu_vls_addr( &file_name ) );
d401 1
a401 1
				exit( 1 );
d504 2
a505 2
					bu_log( "lu x%x has %d vertices!!!!\n", lu, vert_count );
					bu_bomb( "LU is not a triangle" );
d586 1
d599 1
a599 1
			 * it detects an internal error, before bu_bomb().
d684 1
a684 1
				 * it detects an internal error, before bu_bomb().
@


14.21
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.20 2007/05/18 04:13:44 brlcad Exp $ (BRL)";
d399 1
a399 1
			char buf[81];	/* need exactly 80 char for header */
d413 2
a414 3
			bzero( buf, sizeof( buf ) );
			if (inches) {
				strcpy( buf, "BRL-CAD generated STL FILE (Units=inches)");
d416 5
a420 5
				strcpy( buf, "BRL-CAD generated STL FILE (Units=mm)");
			}
			if( strlen( buf ) + strlen( region_name ) + 1 < 80 ) {
				strcat( buf, " " );
				strcat( buf, region_name );
@


14.20
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.19 2007/04/29 02:05:02 johnranderson Exp $ (BRL)";
d49 1
a49 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.19
log
@Added check of return value from db_dirbuild()
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.18 2007/01/27 01:41:32 brlcad Exp $ (BRL)";
d519 1
a519 1
					rt_bomb( "LU is not a triangle" );
d600 1
a600 1
	/* Begin rt_bomb() protection */
d612 1
a612 1
			 * it detects an internal error, before rt_bomb().
d697 1
a697 1
				 * it detects an internal error, before rt_bomb().
@


14.18
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.17 2007/01/23 01:13:25 brlcad Exp $ (BRL)";
d265 4
a268 1
	db_dirbuild( dbip );
@


14.17
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.16 2007/01/20 14:36:43 brlcad Exp $ (BRL)";
d443 1
a443 1
 	for( BU_LIST_FOR( s, shell, &r->s_hd ) )
d605 2
a606 2
	                bu_log( "FAILED in Boolean evaluation: %s\n", sofar );
                        bu_free( (char *)sofar, "sofar" );
@


14.16
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.15 2006/01/28 00:36:27 brlcad Exp $ (BRL)";
@


14.15
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 2003-2006 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.14 2006/01/21 21:09:44 brlcad Exp $ (BRL)";
@


14.14
log
@a little less excitement about regions that evaluate to nothing, still report it if we're verbose a little more consistently.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.13 2006/01/18 06:46:13 brlcad Exp $ (BRL)";
d43 1
d51 1
a51 1
#include <string.h>
d53 1
a53 1
#include <strings.h>
@


14.13
log
@update copyright to 2006
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.12 2006/01/12 15:48:07 bob1961 Exp $ (BRL)";
d641 5
a645 4
		if( verbose )
			bu_log( "\tNothing left of this region after Boolean evaluation!!!\n" );
		regions_written++; /* don't count as a failure */
		r = (struct nmgregion *)NULL;
d651 1
a651 1
	if (r != NULL)
@


14.12
log
@The -i option doesn't take an argument.
@
text
@d4 1
a4 1
 * Copyright (C) 2003-2005 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.11
log
@Merge of bobWinPort
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.10 2005/10/23 04:44:29 brlcad Exp $ (BRL)";
d165 1
a165 1
	while ((c = bu_getopt(argc, argv, "a:bm:n:o:r:vx:D:P:X:i:")) != EOF) {
@


14.10
log
@trailing ws
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.9 2005/09/09 05:50:29 brlcad Exp $ (BRL)";
a81 2
extern double nmg_eue_dist;		/* from nmg_plot.c */

d165 1
a165 1
	while ((c = getopt(argc, argv, "a:bm:n:o:r:vx:D:P:X:i:")) != EOF) {
d168 1
a168 1
			ttol.abs = atof(optarg);
d175 1
a175 1
			ttol.norm = atof(optarg);
d179 1
a179 1
			output_file = optarg;
d182 1
a182 1
			output_directory = optarg;
d186 1
a186 1
			ttol.rel = atof(optarg);
d192 1
a192 1
			ncpu = atoi( optarg );
d196 1
a196 1
			sscanf( optarg, "%x", (unsigned int *)&rt_g.debug );
d199 1
a199 1
			tol.dist = atof(optarg);
d204 1
a204 1
			sscanf( optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
d217 1
a217 1
	if (optind+1 >= argc) {
d245 3
d249 1
d258 3
a260 3
	/* Open BRL-CAD database */
	argc -= optind;
	argv += optind;
d403 3
d407 1
@


14.9
log
@use BRL-CAD instead of brl-cad if only to be at least internally consistent and serve good example
@
text
@d30 1
a30 1
 *  
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.8 2005/08/28 00:33:33 brlcad Exp $ (BRL)";
d431 1
a431 1
		fprintf( fp, "solid %s\n", (region_name+1)); 
d597 1
a597 1
			
d601 1
a601 1
                                
d703 1
a703 1
			
@


14.8
log
@use bu_setlinebuf instead of the old block that checked system 'types' and was replicated where needed
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d256 1
a256 1
	/* Open brl-cad database */
@


14.8.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d256 1
a256 1
	/* Open BRL-CAD database */
d431 1
a431 1
		fprintf( fp, "solid %s\n", (region_name+1));
d597 1
a597 1

d601 1
a601 1

d703 1
a703 1

@


14.7
log
@update copyright to 2005
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.6 2004/12/21 07:32:29 morrison Exp $ (BRL)";
d133 2
a134 12
#ifdef BSD
	setlinebuf( stderr );
#else
#	if defined( SYSV ) && !defined( sgi ) && !defined(CRAY2) && \
	 !defined(n16)
		(void) setvbuf( stderr, (char *) NULL, _IOLBF, BUFSIZ );
#	endif
#	if defined(sgi) && defined(mips)
		if( setlinebuf( stderr ) != 0 )
			perror("setlinebuf(stderr)");
#	endif
#endif
@


14.7.2.1
log
@Mods to use bu_getopt
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-stl.c,v 14.7 2005/01/30 20:30:20 brlcad Exp $ (BRL)";
d82 2
d177 1
a177 1
	while ((c = bu_getopt(argc, argv, "a:bm:n:o:r:vx:D:P:X:i:")) != EOF) {
d180 1
a180 1
			ttol.abs = atof(bu_optarg);
d187 1
a187 1
			ttol.norm = atof(bu_optarg);
d191 1
a191 1
			output_file = bu_optarg;
d194 1
a194 1
			output_directory = bu_optarg;
d198 1
a198 1
			ttol.rel = atof(bu_optarg);
d204 1
a204 1
			ncpu = atoi( bu_optarg );
d208 1
a208 1
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.debug );
d211 1
a211 1
			tol.dist = atof(bu_optarg);
d216 1
a216 1
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
d229 1
a229 1
	if (bu_optind+1 >= argc) {
a256 3
#ifdef _WIN32
			if ((bfd=open(output_file, _O_WRONLY|_O_CREAT|_O_TRUNC|_O_BINARY, _S_IREAD|_S_IWRITE)) < 0)
#else
a257 1
#endif
d267 2
a268 2
	argc -= bu_optind;
	argv += bu_optind;
a410 3
#ifdef _WIN32
			if ((bfd=open(bu_vls_addr(&file_name), _O_WRONLY|_O_CREAT|_O_TRUNC, _S_IREAD|_S_IWRITE)) < 0)
#else
a411 1
#endif
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 2003-2004 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-stl.c,v 14.5 2004/12/21 06:58:41 morrison Exp $ (BRL)";
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a33 2
 *  
 *
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-stl.c,v 14.4 2004/12/21 06:44:32 morrison Exp $ (BRL)";
@


14.4
log
@remove the old distribution notice section
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 2003-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-stl.c,v 14.3 2004/12/18 06:50:50 morrison Exp $ (BRL)";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a34 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-stl.c,v 14.2 2004/12/18 02:38:09 morrison Exp $ (BRL)";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file g-stl.c
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-stl.c,v 14.1 2004/11/16 19:42:12 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			G - S T L . C
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-stl.c,v 1.5 2004/09/03 23:30:56 morrison Exp $ (BRL)";
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-stl.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d746 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-stl.c,v 1.3 2004/06/09 14:49:31 morrison Exp $ (BRL)";
d38 1
a38 1
#ifdef USE_STRING_H
@


1.3
log
@add unistd.h header for getopt()
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/conv/g-stl.c,v 1.2 2004/06/08 22:04:09 morrison Exp $ (BRL)";
d29 1
a29 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d33 1
a33 2


d45 9
d59 2
d62 2
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/conv/g-stl.c,v 11.6 2004/05/10 15:30:41 erikg Exp $ (BRL)";
a46 1
#include "externs.h"
@

