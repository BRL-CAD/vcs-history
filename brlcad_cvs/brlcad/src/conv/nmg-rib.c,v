head	14.15;
access;
symbols
	rel-7-10-4:14.13
	STABLE:14.13.0.2
	stable-branch:14.5
	rel-7-10-2:14.13
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@ * @;


14.15
date	2007.11.21.15.21.33;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.10.22.17.42.34;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.05.18.04.13.44;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.04.29.02.05.02;	author johnranderson;	state Exp;
branches;
next	14.11;

14.11
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.44;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.02.27.05.52.22;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.30.20;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.51;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.10;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.54;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@/*                       N M G - R I B . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file nmg-rib.c
 *
 *	Convert a polygonal model from NMG's to RIB format polygons.
 *
 *	Options
 *	h	help
 *
 *  Author -
 *	Lee A. Butler
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.14 2007/10/22 17:42:34 brlcad Exp $ (ARL)";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"


/* declarations to support use of bu_getopt() system call */
char *options = "ht";
extern char *bu_optarg;
extern int bu_optind, bu_opterr, bu_getopt(int, char *const *, const char *);

char *progname = "(noname)";
int triangulate = 0;

/*
 *	U S A G E --- tell user how to invoke this program, then exit
 */
void usage(char *s)
{
    if (s) {
	bu_log(s);
    }

    (void) bu_exit(1, "Usage: %s [-t] file.g nmg_solid [ nmg_solid ... ]\n",
		   progname);
}

/*
 *	P A R S E _ A R G S --- Parse through command line flags
 */
int parse_args(int ac, char **av)
{
    int  c;
    char *strrchr(const char *, int);

    if (  ! (progname=strrchr(*av, '/'))  )
	progname = *av;
    else
	++progname;

    /* Turn off getopt's error messages */
    bu_opterr = 0;

    /* get all the option flags from the command line */
    while ((c=bu_getopt(ac,av,options)) != EOF)
	switch (c) {
	    case 't'	: triangulate = !triangulate; break;
	    case '?'	:
	    case 'h'	:
	    default		: usage("Bad or help flag specified\n"); break;
	}

    return(bu_optind);
}

static void
lu_to_rib(struct loopuse *lu, fastf_t *fu_normal, struct bu_vls *norms, struct bu_vls *points)
{
    struct edgeuse *eu;
    struct vertexuse *vu;

    NMG_CK_LOOPUSE(lu);

    if (BU_LIST_FIRST_MAGIC( &lu->down_hd ) == NMG_EDGEUSE_MAGIC) {
	for (BU_LIST_FOR(eu, edgeuse, &lu->down_hd)) {
	    NMG_CK_EDGEUSE(eu);
	    NMG_CK_VERTEXUSE(eu->vu_p);
	    NMG_CK_VERTEX(eu->vu_p->v_p);
	    NMG_CK_VERTEX_G(eu->vu_p->v_p->vg_p);
	    bu_vls_printf(points, "%g %g %g  ",
			  V3ARGS(eu->vu_p->v_p->vg_p->coord));

	    if (eu->vu_p->a.magic_p && *eu->vu_p->a.magic_p == NMG_VERTEXUSE_A_PLANE_MAGIC)
		bu_vls_printf(norms, "%g %g %g  ",
			      V3ARGS(eu->vu_p->a.plane_p->N));
	    else
		bu_vls_printf(norms, "%g %g %g  ",
			      V3ARGS(fu_normal));
	}
    } else if (BU_LIST_FIRST_MAGIC( &lu->down_hd ) == NMG_VERTEXUSE_MAGIC) {
	vu = BU_LIST_FIRST(vertexuse,  &lu->down_hd );
	bu_vls_printf(points, "%g %g %g", V3ARGS(vu->v_p->vg_p->coord));
	if (*vu->a.magic_p == NMG_VERTEXUSE_A_PLANE_MAGIC)
	    bu_vls_printf(norms, "%g %g %g  ",
			  V3ARGS(vu->a.plane_p->N));
	else
	    bu_vls_printf(norms, "%g %g %g  ",
			  V3ARGS(fu_normal));
    } else {
	bu_exit(EXIT_FAILURE, "bad child of loopuse\n");
    }
}

void
nmg_to_rib(struct model *m)
{
    struct bn_tol tol;
    struct nmgregion *r;
    struct shell *s;
    struct faceuse *fu;
    struct loopuse *lu;
    struct bu_vls points;
    struct bu_vls norms;
    vect_t fu_normal;

    tol.magic = BN_TOL_MAGIC;
    tol.dist = 0.05;
    tol.dist_sq = 0.0025;
    tol.perp = 0.00001;
    tol.para = 0.99999;


    if (triangulate)
	nmg_triangulate_model(m, &tol);

    bu_vls_init(&norms);
    bu_vls_init(&points);

    for (BU_LIST_FOR(r, nmgregion, &m->r_hd))
	for (BU_LIST_FOR(s, shell, &r->s_hd))
	    for (BU_LIST_FOR(fu, faceuse, &s->fu_hd)) {
		if (fu->orientation != OT_SAME)
		    continue;

		NMG_GET_FU_NORMAL(fu_normal, fu);

		for (BU_LIST_FOR(lu, loopuse, &fu->lu_hd)) {
		    bu_vls_strcpy(&norms, "");
		    bu_vls_strcpy(&points, "");
		    lu_to_rib(lu, fu_normal, &norms, &points);
		    printf("Polygon \"P\" [ %s ] \"N\" [ %s ]\n",
			   bu_vls_addr(&points), bu_vls_addr(&norms));
		}
	    }
}


/*
 *	M A I N
 *
 *	Call parse_args to handle command line arguments first, then
 *	process input.
 */
int main(int ac, char **av)
{
    int arg_index;
    struct rt_db_internal ip;
    struct directory *dp;
    struct db_i *dbip;
    mat_t my_mat;

    /* parse command flags, and make sure there are arguments
     * left over for processing.
     */
    if ((arg_index = parse_args(ac, av)) >= ac) usage("No extra args specified\n");

    rt_init_resource( &rt_uniresource, 0, NULL );

    /* open the database */
    if ((dbip = db_open(av[arg_index], "r")) == DBI_NULL) {
	perror(av[arg_index]);
	bu_exit(255, "ERROR: unable to open geometry database (%s)\n", av[arg_index]);
    }

    if (++arg_index >= ac) usage("No NMG specified\n");

    if( db_dirbuild( dbip ) ) {
	bu_exit(1, "db_dirbuild failed\n" );
    }

    /* process each remaining argument */
    for ( ; arg_index < ac ; arg_index++ ) {

	if ( ! (dp = db_lookup(dbip, av[arg_index], 1)) ) {
	    bu_exit(255, "%s: db_lookup failed\n", progname);
	}

	MAT_IDN( my_mat );
	if ((rt_db_get_internal( &ip, dp, dbip, my_mat, &rt_uniresource ))<0) {
	    bu_exit(255, "%s: rt_db_get_internal() failed\n", progname );
	}

	if (ip.idb_type != ID_NMG) {
	    bu_exit(255, "%s: solid type (%d) is NOT NMG!\n",
		    progname, ip.idb_type);
	}
	nmg_to_rib((struct model *)ip.idb_ptr );
    }
    return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@whoosh, another 10% complete on the bu_bomb to bu_exit conversion review.  also includes a slew of custom exit() calls that can use bu_exit() as well as toning down a slew of overzealous exclamation point use.  (20% complete overall)
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.13 2007/05/18 04:13:44 brlcad Exp $ (ARL)";
d133 1
a133 1
	bu_bomb("bad child of loopuse\n");
@


14.13
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.12 2007/04/29 02:05:02 johnranderson Exp $ (ARL)";
d63 3
a65 1
    if (s) (void)fputs(s, stderr);
d67 1
a67 1
    (void) fprintf(stderr, "Usage: %s [-t] file.g nmg_solid [ nmg_solid ... ]\n",
a68 1
    exit(1);
d205 1
a205 1
	return 255;
d211 1
a211 2
	bu_log( "db_dirbuild failed\n" );
	exit(1);
d218 1
a218 2
	    fprintf(stderr, "%s: db_lookup failed\n", progname);
	    return 255;
d223 1
a223 2
	    fprintf(stderr, "%s: rt_db_get_internal() failed\n", progname );
	    return 255;
d227 1
a227 1
	    fprintf(stderr, "%s: solid type (%d) is NOT NMG!\n",
a228 1
	    return 255;
@


14.12
log
@Added check of return value from db_dirbuild()
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.11 2007/02/02 08:48:28 brlcad Exp $ (ARL)";
d132 1
a132 1
	rt_bomb("bad child of loopuse\n");
@


14.11
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.10 2007/01/23 01:13:25 brlcad Exp $ (ARL)";
d209 4
a212 1
    db_dirbuild( dbip );
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.9 2007/01/20 14:36:44 brlcad Exp $ (ARL)";
d50 1
a50 1
/* declarations to support use of getopt() system call */
d52 2
a53 2
extern char *optarg;
extern int optind, opterr, getopt(int, char *const *, const char *);
d84 1
a84 1
    opterr = 0;
d87 1
a87 1
    while ((c=getopt(ac,av,options)) != EOF)
d95 1
a95 1
    return(optind);
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.8 2006/02/27 05:52:22 brlcad Exp $ (ARL)";
@


14.8
log
@quell warnings, missing stdlib.h, calls to exit with a negative, ws.
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.7 2006/01/18 06:46:13 brlcad Exp $ (ARL)";
@


14.7
log
@update copyright to 2006
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.6 2005/10/23 04:44:30 brlcad Exp $ (ARL)";
d42 1
d44 1
d50 1
d64 1
a64 1
	if (s) (void)fputs(s, stderr);
d66 3
a68 3
	(void) fprintf(stderr, "Usage: %s [-t] file.g nmg_solid [ nmg_solid ... ]\n",
			progname);
	exit(1);
d76 2
a77 2
	int  c;
	char *strrchr(const char *, int);
d79 16
a94 7
	if (  ! (progname=strrchr(*av, '/'))  )
		progname = *av;
	else
		++progname;

	/* Turn off getopt's error messages */
	opterr = 0;
d96 1
a96 10
	/* get all the option flags from the command line */
	while ((c=getopt(ac,av,options)) != EOF)
		switch (c) {
		case 't'	: triangulate = !triangulate; break;
		case '?'	:
		case 'h'	:
		default		: usage("Bad or help flag specified\n"); break;
		}

	return(optind);
d102 2
a103 2
	struct edgeuse *eu;
	struct vertexuse *vu;
d105 1
a105 1
	NMG_CK_LOOPUSE(lu);
d107 15
a121 27
	if (BU_LIST_FIRST_MAGIC( &lu->down_hd ) == NMG_EDGEUSE_MAGIC) {
		for (BU_LIST_FOR(eu, edgeuse, &lu->down_hd)) {
			NMG_CK_EDGEUSE(eu);
			NMG_CK_VERTEXUSE(eu->vu_p);
			NMG_CK_VERTEX(eu->vu_p->v_p);
			NMG_CK_VERTEX_G(eu->vu_p->v_p->vg_p);
			bu_vls_printf(points, "%g %g %g  ",
				V3ARGS(eu->vu_p->v_p->vg_p->coord));

			if (eu->vu_p->a.magic_p && *eu->vu_p->a.magic_p == NMG_VERTEXUSE_A_PLANE_MAGIC)
				bu_vls_printf(norms, "%g %g %g  ",
					V3ARGS(eu->vu_p->a.plane_p->N));
			else
				bu_vls_printf(norms, "%g %g %g  ",
					V3ARGS(fu_normal));
		}
	} else if (BU_LIST_FIRST_MAGIC( &lu->down_hd ) == NMG_VERTEXUSE_MAGIC) {
		vu = BU_LIST_FIRST(vertexuse,  &lu->down_hd );
		bu_vls_printf(points, "%g %g %g", V3ARGS(vu->v_p->vg_p->coord));
		if (*vu->a.magic_p == NMG_VERTEXUSE_A_PLANE_MAGIC)
			bu_vls_printf(norms, "%g %g %g  ",
				V3ARGS(vu->a.plane_p->N));
		else
			bu_vls_printf(norms, "%g %g %g  ",
				V3ARGS(fu_normal));
	} else {
		rt_bomb("bad child of loopuse\n");
d123 12
d140 36
a175 37
	struct bn_tol tol;
	struct nmgregion *r;
	struct shell *s;
	struct faceuse *fu;
	struct loopuse *lu;
	struct bu_vls points;
	struct bu_vls norms;
	vect_t fu_normal;

	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.05;
	tol.dist_sq = 0.0025;
	tol.perp = 0.00001;
	tol.para = 0.99999;


	if (triangulate)
		nmg_triangulate_model(m, &tol);

	bu_vls_init(&norms);
	bu_vls_init(&points);

	for (BU_LIST_FOR(r, nmgregion, &m->r_hd))
	    for (BU_LIST_FOR(s, shell, &r->s_hd))
		for (BU_LIST_FOR(fu, faceuse, &s->fu_hd)) {
		    if (fu->orientation != OT_SAME)
		    	continue;

		    NMG_GET_FU_NORMAL(fu_normal, fu);

		    for (BU_LIST_FOR(lu, loopuse, &fu->lu_hd)) {
		    	bu_vls_strcpy(&norms, "");
		    	bu_vls_strcpy(&points, "");
			lu_to_rib(lu, fu_normal, &norms, &points);
		    	printf("Polygon \"P\" [ %s ] \"N\" [ %s ]\n",
		    		bu_vls_addr(&points), bu_vls_addr(&norms));
		    }
d177 1
d189 29
a217 17
	int arg_index;
	struct rt_db_internal ip;
	struct directory *dp;
	struct db_i *dbip;
	mat_t my_mat;

	/* parse command flags, and make sure there are arguments
	 * left over for processing.
	 */
	if ((arg_index = parse_args(ac, av)) >= ac) usage("No extra args specified\n");

	rt_init_resource( &rt_uniresource, 0, NULL );

	/* open the database */
	if ((dbip = db_open(av[arg_index], "r")) == DBI_NULL) {
		perror(av[arg_index]);
		exit(-1);
d220 5
a224 17
	if (++arg_index >= ac) usage("No NMG specified\n");

	db_dirbuild( dbip );

	/* process each remaining argument */
	for ( ; arg_index < ac ; arg_index++ ) {

		if ( ! (dp = db_lookup(dbip, av[arg_index], 1)) ) {
			fprintf(stderr, "%s: db_lookup failed\n", progname);
			exit(-1);
		}

		MAT_IDN( my_mat );
		if ((rt_db_get_internal( &ip, dp, dbip, my_mat, &rt_uniresource ))<0) {
			fprintf(stderr, "%s: rt_db_get_internal() failed\n", progname );
			exit(-1);
		}
d226 4
a229 6
		if (ip.idb_type != ID_NMG) {
			fprintf(stderr, "%s: solid type (%d) is NOT NMG!\n",
				progname, ip.idb_type);
			exit(-1);
		}
		nmg_to_rib((struct model *)ip.idb_ptr );
d231 3
a233 1
	return 0;
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.5 2005/01/30 20:30:20 brlcad Exp $ (ARL)";
@


14.5
log
@update copyright to 2005
@
text
@d31 1
a31 1
 *  
d35 1
a35 1
 *  
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/nmg-rib.c,v 14.4 2004/12/21 07:18:57 morrison Exp $ (ARL)";
d80 1
a80 1
	
d216 1
a216 1
		
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d31 1
a31 1
 *
d35 1
a35 1
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d80 1
a80 1

d216 1
a216 1

@


14.4
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/nmg-rib.c,v 14.3 2004/12/18 06:50:51 morrison Exp $ (ARL)";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a35 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/nmg-rib.c,v 14.2 2004/12/18 02:38:10 morrison Exp $ (ARL)";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file nmg-rib.c
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/nmg-rib.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*	N M G - R I B
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/nmg-rib.c,v 1.1 2004/05/20 15:18:54 morrison Exp $ (ARL)";
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/conv/nmg-rib.c,v 11.15 2004/04/05 07:49:36 morrison Exp $ (ARL)";
d213 10
@

