head	14.19;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.4
	rel-7-10-2:14.15
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.2
	rel-7-6-0:14.5
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.19
date	2007.12.16.15.59.37;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.10.22.08.47.38;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.09.07.21.04.31;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.06.03.01.59.31;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.06.03.01.46.49;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.09.05.50.29;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.08.28.00.33.33;	author brlcad;	state Exp;
branches
	14.5.2.1;
next	14.4;

14.4
date	2005.01.30.20.30.18;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.09;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.14.49.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.08;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.49;	author morrison;	state Exp;
branches;
next	;

14.5.2.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@convert all bzero calls to memset
@
text
@/*                 B O T _ S H E L L - V T K . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file bot_shell-vtk.c
 *	This program uses raytracing to determine which triangles of the specified objects
 *	are external, and includes them in an output VTK polydata file.
 *
 *	Each triangle gets one ray shot at it along its normal from outside the model bounding box.
 *	If that triangle appears as the first object hit along the ray, then that triangle is
 *	added to the output list. Only triangles from BOT primitives are considered as candidates
 *	for inclusion in the VTK data. Non-BOT primitives that get hit along the ray may
 *	"hide" BOT triangles, but they will not be represented in the output.
 *
 *	The "-m" option specifies that triangles that are first or last on each ray should
 *	be included in the output. This can improve performance, but can also degrade performance
 *	considerabley. With the "-m" option, "onehit" processing is turned off.
 *
 *	If a "-g" option is provided, then rays are shot from a uniform grid from three orthogonal
 *	directions and the first and last triangles hit are included in the output (implies "-m").
 *
 *	If a "-n" option is provided, then vertex normals will be included in the VTK output data.
 *	Note that this will not provide any additional information unless the BOT primitives
 *	in the model have vertex normals. This can significantly increase the size of the VTK
 *	output file.
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.18 2007/10/22 08:47:38 brlcad Exp $ (BRL)";
#endif

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#if defined(HAVE_UNISTD_H)
#  include <unistd.h>
#else
#  if defined(HAVE_SYS_UNISTD_H)
#    include <sys/unistd.h>
#  endif
#endif

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"

/* local headers */
#include "../librt/bot.h"


static int debug=0;
static int use_normals=0;
static double cell_size=0.0;
static char *output_file;
static FILE *fd_out;
static struct rt_i *rtip;
static struct bn_tol tol;
static struct vert_root *verts;
static long *faces=NULL;
static long max_faces=0;
static long num_faces=0;
#define FACES_BLOCK	512

static char *usage="Usage:\n\
	%s [-m] [-n] [-d debug_level] [-g cell_size] -o vtk_polydata_output_file database.g object1 object2...\n";

/* routine to replace default overlap handler.
 * overlaps are irrelevant to this application
 */
static int
a_overlap( ap, pp, reg1, reg2, pheadp )
register struct application     *ap;
register struct partition       *pp;
struct region                   *reg1;
struct region                   *reg2;
struct partition                *pheadp;
{
	return( 1 );
}


static int
miss( ap )
register struct application *ap;
{
	return(0);
}

static void
Add_face( int face[3] )
{
	long i;

	if( debug) {
		bu_log( "Adding face %d %d %d\n", V3ARGS( face ) );
		for( i=0 ; i<3 ; i++ ) {
			bu_log( "\t( %g %g %g )\n", V3ARGS( &verts->the_array[ face[i]*3 ] ) );
		}
	}

	for( i=0 ; i<num_faces*3 ; i+=3 ) {
		if( faces[i] == face[0] ) {
			if( faces[i+1] == face[1] && faces[i+2] == face[2] ) {
				if( debug ) {
					bu_log( "Duplicate face ignored\n" );
				}
				return;
			}
		}
	}

	if( num_faces >= max_faces ) {
		max_faces += FACES_BLOCK;
		faces = (long *)bu_realloc( (genptr_t)faces, max_faces*3*sizeof(long), "faces array" );
	}

	VMOVE( &faces[num_faces*3], face );
	num_faces++;
}

static int
hit( struct application *ap, struct partition *part, struct seg *seg )
{
	struct partition *p;
	int surfno;
	struct soltab *stp;
	double x, y, z, nx, ny, nz;
	int face[3];
	int i;
	struct tri_specific *tri;
	struct bot_specific *bot;


	if( debug ) {
		bu_log( "got a hit\n" );
	}

	/* get the first hit */
	p = part->pt_forw;
	surfno = p->pt_inhit->hit_surfno;
	stp = p->pt_inseg->seg_stp;
	if( stp->st_id != ID_BOT ) {
		if( debug ) {
			bu_log( "hit a non-BOT primitive (ignoring)\n" );
		}
		if( ap->a_onehit != 0 ) {
			return 0;
		}
	} else {
		bot = (struct bot_specific *)stp->st_specific;
		if( bot->bot_facearray ) {
			tri = bot->bot_facearray[surfno];
		} else {
			i = bot->bot_ntri - 1;
			tri = bot->bot_facelist;
			while( i != surfno ) {
				i--;
				tri = tri->tri_forw;
			}
		}
		if( debug ) {
			bu_log( "\thit at (%g %g %g) on %s surfno = %d\n",
				V3ARGS( p->pt_inhit->hit_point ), stp->st_dp->d_namep, surfno );
		}


		/* get the first vertex */
		x = tri->tri_A[X];
		y = tri->tri_A[Y];
		z = tri->tri_A[Z];
		if( tri->tri_normals ) {
			nx = tri->tri_normals[X];
			ny = tri->tri_normals[Y];
			nz = tri->tri_normals[Z];
		} else {
			nx = tri->tri_N[X];
			ny = tri->tri_N[Y];
			nz = tri->tri_N[Z];
		}

		/* add this vertex to the vertex tree */
		if( use_normals ) {
			face[0] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
		} else {
			face[0] = Add_vert( x, y, z, verts, tol.dist_sq );
		}
		if( debug ) {
			bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
				face[0], x, y, z, nx, ny, nz );
		}

		/* get the second vertex */
		x = tri->tri_A[X] + tri->tri_BA[X];
		y = tri->tri_A[Y] + tri->tri_BA[Y];
		z = tri->tri_A[Z] + tri->tri_BA[Z];
		if( tri->tri_normals ) {
			nx = tri->tri_normals[X+3];
			ny = tri->tri_normals[Y+3];
			nz = tri->tri_normals[Z+3];
		} else {
			nx = tri->tri_N[X];
			ny = tri->tri_N[Y];
			nz = tri->tri_N[Z];
		}

		/* add this vertex to the vertex tree */
		if( use_normals ) {
			face[1] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
		} else {
			face[1] = Add_vert( x, y, z, verts, tol.dist_sq );
		}
		if( debug ) {
			bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
				face[1], x, y, z, nx, ny, nz );
		}

		/* get the third vertex */
		x = tri->tri_A[X] + tri->tri_CA[X];
		y = tri->tri_A[Y] + tri->tri_CA[Y];
		z = tri->tri_A[Z] + tri->tri_CA[Z];
		if( tri->tri_normals ) {
			nx = tri->tri_normals[X+6];
			ny = tri->tri_normals[Y+6];
			nz = tri->tri_normals[Z+6];
		} else {
			nx = tri->tri_N[X];
			ny = tri->tri_N[Y];
			nz = tri->tri_N[Z];
		}

		/* add this vertex to the vertex tree */
		if( use_normals ) {
			face[2] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
		} else {
			face[2] = Add_vert( x, y, z, verts, tol.dist_sq );
		}
		if( debug ) {
			bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
				face[2], x, y, z, nx, ny, nz );
		}

		/* add this face to our list (Add_face checks for duplicates) */
		Add_face( face );
	}


	if( ap->a_onehit != 0 ) {
		return 1;
	}

	/* get the last hit */
	p = part->pt_back;
	if( p == part->pt_forw ) {
		return 1;
	}
	surfno = p->pt_outhit->hit_surfno;
	stp = p->pt_outseg->seg_stp;
	if( stp->st_id != ID_BOT ) {
		if( debug ) {
			bu_log( "hit a non-BOT primitive (ignoring)\n" );
		}
		return 0;
	}
	bot = (struct bot_specific *)stp->st_specific;
	if( bot->bot_facearray ) {
		tri = bot->bot_facearray[surfno];
	} else {
		i = bot->bot_ntri - 1;
		tri = bot->bot_facelist;
		while( i != surfno ) {
			i--;
			tri = tri->tri_forw;
		}
	}
	if( debug ) {
		bu_log( "\thit at (%g %g %g) on %s surfno = %d\n",
			V3ARGS( p->pt_inhit->hit_point ), stp->st_dp->d_namep, surfno );
	}


	/* get the first vertex */
	x = tri->tri_A[X];
	y = tri->tri_A[Y];
	z = tri->tri_A[Z];
	if( tri->tri_normals ) {
		nx = tri->tri_normals[X];
		ny = tri->tri_normals[Y];
		nz = tri->tri_normals[Z];
	} else {
		nx = tri->tri_N[X];
		ny = tri->tri_N[Y];
		nz = tri->tri_N[Z];
	}

	/* add this vertex to the vertex tree */
	if( use_normals ) {
		face[0] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
	} else {
		face[0] = Add_vert( x, y, z, verts, tol.dist_sq );
	}
	if( debug ) {
		bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
			face[0], x, y, z, nx, ny, nz );
	}

	/* get the second vertex */
	x = tri->tri_A[X] + tri->tri_BA[X];
	y = tri->tri_A[Y] + tri->tri_BA[Y];
	z = tri->tri_A[Z] + tri->tri_BA[Z];
	if( tri->tri_normals ) {
		nx = tri->tri_normals[X+3];
		ny = tri->tri_normals[Y+3];
		nz = tri->tri_normals[Z+3];
	} else {
		nx = tri->tri_N[X];
		ny = tri->tri_N[Y];
		nz = tri->tri_N[Z];
	}

	/* add this vertex to the vertex tree */
	if( use_normals ) {
		face[1] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
	} else {
		face[1] = Add_vert( x, y, z, verts, tol.dist_sq );
	}
	if( debug ) {
		bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
			face[1], x, y, z, nx, ny, nz );
	}

	/* get the first vertex */
	x = tri->tri_A[X] + tri->tri_CA[X];
	y = tri->tri_A[Y] + tri->tri_CA[Y];
	z = tri->tri_A[Z] + tri->tri_CA[Z];
	if( tri->tri_normals ) {
		nx = tri->tri_normals[X+6];
		ny = tri->tri_normals[Y+6];
		nz = tri->tri_normals[Z+6];
	} else {
		nx = tri->tri_N[X];
		ny = tri->tri_N[Y];
		nz = tri->tri_N[Z];
	}

	/* add this vertex to the vertex tree */
	if( use_normals ) {
		face[2] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
	} else {
		face[2] = Add_vert( x, y, z, verts, tol.dist_sq );
	}
	if( debug ) {
		bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
			face[2], x, y, z, nx, ny, nz );
	}

	Add_face( face );

	return 1;
}

int
main( argc, argv )
int argc;
char *argv[];
{
	char idbuf[132];
	struct application ap;
	int dir;
	int c;
	long i;
	int database_index;

	if( debug ) {
		bu_debug = BU_DEBUG_COREDUMP;
	}

	bu_setlinebuf( stderr );

	/* These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-5;
	tol.para = 1 - tol.perp;

	/* Get command line arguments. */
	memset(&ap, 0, sizeof( struct application ));
	ap.a_onehit = 1;
	while( (c=bu_getopt( argc, argv, "nmd:g:o:")) != EOF)
	{
		switch( c )
		{
			case 'd':	/* debug level */
				debug = atoi( bu_optarg );
				break;
			case 'm':	/* use first and last hits */
				ap.a_onehit = 0;
				break;
			case 'g':	/* cell size */
				cell_size = atof( bu_optarg );
				if( cell_size < tol.dist ) {
					bu_exit(1, "Cell size too small! (%g)\n", cell_size );
				}
				break;
			case 'o':	/* VTK polydata output file */
				output_file = bu_optarg;
				break;
			case 'n':	/* include normals in the VTK data */
				use_normals = 1;
				break;
		}
	}

	if (bu_optind+1 >= argc)
	{
		bu_exit(1, usage, argv[0]);
	}

	if( output_file )
	{
		if( (fd_out=fopen( output_file, "w" )) == NULL )
		{
			perror( argv[0] );
			bu_exit(1, "Cannot open output file (%s)\n", output_file);
		}
	}
	else
		bu_exit(1, "Output file must be specified!\n");

	/* Open BRL-CAD database */
	database_index = bu_optind;
	if ((rtip=rt_dirbuild(argv[bu_optind], idbuf, sizeof(idbuf))) == RTI_NULL )
	{
		bu_exit(1, "rt_durbuild FAILED on %s\n", argv[bu_optind]);
	}

	rtip->rti_space_partition = RT_PART_NUBSPT;

	ap.a_rt_i = rtip;
	ap.a_hit = hit;
	ap.a_miss = miss;
	ap.a_overlap = a_overlap;
	ap.a_logoverlap = rt_silent_logoverlap;

	while( ++bu_optind < argc )
	{
		if( rt_gettree( rtip, argv[bu_optind] ) < 0 )
			bu_log( "rt_gettree failed on %s\n", argv[bu_optind] );
	}

	rt_prep( rtip );

	/* create vertex tree */
	if( use_normals ) {
		verts = create_vert_tree_w_norms();
	} else {
		verts = create_vert_tree();
	}

	if( cell_size != 0.0 ) {
		/* do a grid of shots */

		ap.a_onehit = 0;
		for( dir=X ; dir<=Z ; dir++ ) {
			int grid_dir1, grid_dir2;

			if( debug ) {
				bu_log( "************** Process direction %d\n", dir );
			}
			grid_dir1 = X;
			if( grid_dir1 == dir ) {
				grid_dir1++;
			}
			grid_dir2 = grid_dir1 + 1;
			if( grid_dir2 == dir ) {
				grid_dir2++;
			}
			VSETALL( ap.a_ray.r_dir, 0.0 );
			ap.a_ray.r_dir[dir] = 1.0;

			/* back off a smidge, just to be safe */
			ap.a_ray.r_pt[dir] = rtip->mdl_min[dir] - 5.0;

			/* move just inside the bounding box */
			ap.a_ray.r_pt[grid_dir1] = rtip->mdl_min[grid_dir1] + tol.dist;

			/* now fire a grid of rays spaced at "cell_size" distance */
			while( ap.a_ray.r_pt[grid_dir1] <= rtip->mdl_max[grid_dir1] ) {
				ap.a_ray.r_pt[grid_dir2] = rtip->mdl_min[grid_dir2] + tol.dist;
				while( ap.a_ray.r_pt[grid_dir2] <= rtip->mdl_max[grid_dir2] ) {

					/* shoot a ray */
					if( debug ) {
						bu_log( "Shooting a ray from (%g %g %g) in direction (%g %g %g)\n",
							V3ARGS( ap.a_ray.r_pt ) , V3ARGS( ap.a_ray.r_dir ) );
					}
					(void)rt_shootray( &ap );
					ap.a_ray.r_pt[grid_dir2] += cell_size;
				}
				ap.a_ray.r_pt[grid_dir1] += cell_size;
			}
		}
	} else {
		struct soltab *stp;
		struct bot_specific *bot;
		struct tri_specific *tri;
		vect_t inv_dir;

		/* shoot at every triangle */
		for( i=0 ; i<rtip->nsolids ; i++ ) {
			stp = rtip->rti_Solids[i];
			if( stp->st_id != ID_BOT ) {
				continue;
			}

			bot = (struct bot_specific *)stp->st_specific;
			tri = bot->bot_facelist;
			while( tri ) {
				point_t p2, p3, sum;

				VADD2( p2, tri->tri_A, tri->tri_BA );
				VADD2( p3, tri->tri_A, tri->tri_CA );
				VSETALL( sum, 0.0 );
				VADD2( sum, sum, tri->tri_A );
				VADD2( sum, sum, p2 );
				VADD2( sum, sum, p3 );
				VSCALE( ap.a_ray.r_pt, sum, 1.0/3.0 );
				VREVERSE( ap.a_ray.r_dir, tri->tri_N );
				VINVDIR( inv_dir, ap.a_ray.r_dir );
				if( rt_in_rpp( &ap.a_ray, inv_dir, rtip->mdl_min, rtip->mdl_max ) == 0 ) {
					tri = tri->tri_forw;
					continue;
				}
				VJOIN1( ap.a_ray.r_pt, ap.a_ray.r_pt, (ap.a_ray.r_min - 1000.0), ap.a_ray.r_dir );

				/* shoot a ray */
				if( debug ) {
					point_t B, C;

					VADD2( B, tri->tri_A, tri->tri_BA );
					VADD2( C, tri->tri_A, tri->tri_CA );
					bu_log( "Shooting a ray from (%g %g %g) in direction (%g %g %g)\n",
						V3ARGS( ap.a_ray.r_pt ) , V3ARGS( ap.a_ray.r_dir ) );
					bu_log( "\tAt triangle ( %g %g %g ) ( %g %g %g ) ( %g %g %g )\n",
						 V3ARGS( tri->tri_A ), V3ARGS( B ) , V3ARGS( C ) );
				}
				(void)rt_shootray( &ap );
				tri = tri->tri_forw;
			}
		}
}

	/* now write out the results */
	if( debug ) {
		bu_log( "Writing output (%ld vertices and %d faces)\n", verts->curr_vert, num_faces );
	}
	fprintf( fd_out, "# vtk DataFile Version 1.0\n" );
	fprintf( fd_out, "%s", argv[database_index] );
	database_index++;
	while( database_index < argc ) {
		fprintf( fd_out, " %s", argv[database_index] );
		database_index++;
	}
	fprintf( fd_out, "\nASCII\n\nDATASET POLYDATA\n" );
	fprintf( fd_out, "POINTS %ld float\n", verts->curr_vert );
	for( i=0 ; i<verts->curr_vert ; i++ ) {
		if( use_normals ) {
			fprintf( fd_out, "%g %g %g\n", V3ARGS( &verts->the_array[i*6] ) );
		} else {
			fprintf( fd_out, "%g %g %g\n", V3ARGS( &verts->the_array[i*3] ) );
		}
	}
	fprintf( fd_out, "POLYGONS %ld %ld\n", num_faces, num_faces*4 );
	for( i=0 ; i<num_faces ; i++ ) {
		fprintf( fd_out, "3 %ld %ld %ld\n", V3ARGS( &faces[i*3] ) );
	}
	if( use_normals ) {
		fprintf( fd_out, "POINT_DATA %ld\n", verts->curr_vert );
		fprintf( fd_out, "NORMALS default float\n" );
		for( i=0 ; i<verts->curr_vert ; i++ ) {
			fprintf( fd_out, "%g %g %g\n", V3ARGS( &verts->the_array[i*6+3] ) );
		}
	}

	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@first 10% of the review of the bu_bomb() instances.  updating many to bu_exit() for the instances where the error or exit condition aren't catastrophic errors (i.e. they wouldn't benefit from having a stack trace of how we got into that state code-wise).  this also makes it easier to refactor usages of log & exit too to the new routine.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.17 2007/09/15 16:23:04 brlcad Exp $ (BRL)";
d410 1
a410 1
	bzero( &ap, sizeof( struct application ) );
@


14.17
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.16 2007/09/07 21:04:31 erikgreenwald Exp $ (BRL)";
d425 1
a425 2
					bu_log( "Cell size too small!!! (%g)\n", cell_size );
					exit( 1 );
d439 1
a439 2
		bu_log( usage, argv[0] );
		exit( 1 );
a445 1
			bu_log( "Cannot open output file (%s)\n", output_file );
d447 1
a447 1
			exit( 1 );
d451 1
a451 1
		bu_bomb( "Output file must be specified!!!\n" );
d457 1
a457 2
		bu_log( "rt_durbuild FAILED on %s\n", argv[bu_optind] );
		exit(1);
@


14.16
log
@migrated the contents of src/librt/plane.r to include/bn.h
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.15 2007/02/02 08:48:28 brlcad Exp $ (BRL)";
d54 1
a54 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.15
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.14 2007/01/27 01:41:32 brlcad Exp $ (BRL)";
a74 1
#include "../librt/plane.h"
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.13 2007/01/23 01:13:25 brlcad Exp $ (BRL)";
d417 1
a417 1
	while( (c=getopt( argc, argv, "nmd:g:o:")) != EOF)
d422 1
a422 1
				debug = atoi( optarg );
d428 1
a428 1
				cell_size = atof( optarg );
d435 1
a435 1
				output_file = optarg;
d443 1
a443 1
	if (optind+1 >= argc)
d462 2
a463 2
	database_index = optind;
	if ((rtip=rt_dirbuild(argv[optind], idbuf, sizeof(idbuf))) == RTI_NULL )
d465 1
a465 1
		bu_log( "rt_durbuild FAILED on %s\n", argv[optind] );
d477 1
a477 1
	while( ++optind < argc )
d479 2
a480 2
		if( rt_gettree( rtip, argv[optind] ) < 0 )
			bu_log( "rt_gettree failed on %s\n", argv[optind] );
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.12 2007/01/20 14:36:43 brlcad Exp $ (BRL)";
d424 1
a424 1
		        case 'm':	/* use first and last hits */
d437 1
a437 1
		        case 'n':	/* include normals in the VTK data */
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.11 2006/06/03 01:59:31 brlcad Exp $ (BRL)";
@


14.11
log
@missed a norm
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.10 2006/06/03 01:46:49 brlcad Exp $ (BRL)";
@


14.10
log
@quell unused variable warning (norm variable)
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.9 2006/01/28 00:36:27 brlcad Exp $ (BRL)";
a304 1
		RT_HIT_NORMAL( norm, p->pt_inhit, stp, NULL, p->pt_inflip );
@


14.9
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.8 2006/01/18 06:46:13 brlcad Exp $ (BRL)";
a155 1
	vect_t norm;
a190 1
			RT_HIT_NORMAL( norm, p->pt_inhit, stp, NULL, p->pt_inflip );
@


14.8
log
@update copyright to 2006
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.7 2005/10/23 04:44:29 brlcad Exp $ (BRL)";
d52 1
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.6 2005/09/09 05:50:29 brlcad Exp $ (BRL)";
@


14.6
log
@use BRL-CAD instead of brl-cad if only to be at least internally consistent and serve good example
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.5 2005/08/28 00:33:33 brlcad Exp $ (BRL)";
d220 2
a221 2
		}	
	
d245 2
a246 2
		}	
	
d270 2
a271 2
		}	
	
d335 2
a336 2
	}	
	
d360 2
a361 2
	}	
	
d385 1
a385 1
	}	
d585 1
a585 1
		}	
@


14.5
log
@use bu_setlinebuf instead of the old block that checked system 'types' and was replicated where needed
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d464 1
a464 1
	/* Open brl-cad database */
@


14.5.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d220 2
a221 2
		}

d245 2
a246 2
		}

d270 2
a271 2
		}

d335 2
a336 2
	}

d360 2
a361 2
	}

d385 1
a385 1
	}
d464 1
a464 1
	/* Open BRL-CAD database */
d585 1
a585 1
		}
@


14.4
log
@update copyright to 2005
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/bot_shell-vtk.c,v 14.3 2004/12/18 06:50:50 morrison Exp $ (BRL)";
d408 1
a408 12
#ifdef BSD
	setlinebuf( stderr );
#else
#	if defined( SYSV ) && !defined( sgi ) && !defined(CRAY2) && \
	 !defined(n16)
		(void) setvbuf( stderr, (char *) NULL, _IOLBF, BUFSIZ );
#	endif
#	if defined(sgi) && defined(mips)
		if( setlinebuf( stderr ) != 0 )
			perror("setlinebuf(stderr)");
#	endif
#endif
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/bot_shell-vtk.c,v 14.2 2004/12/18 02:38:09 morrison Exp $ (BRL)";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file bot_shell-vtk.c
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/bot_shell-vtk.c,v 14.1 2004/11/16 19:42:12 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/bot_shell-vtk.c,v 1.5 2004/09/03 23:30:56 morrison Exp $ (BRL)";
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/bot_shell-vtk.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d612 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/bot_shell-vtk.c,v 1.3 2004/06/09 14:49:30 morrison Exp $ (BRL)";
d33 1
a33 1
#ifdef USE_STRING_H
@


1.3
log
@add unistd.h header for getopt()
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d28 1
a28 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d32 1
a32 2


d36 6
a41 1
#include <string.h>
d43 3
a45 1
#include <strings.h>
d47 2
d54 2
d58 1
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/conv/bot_shell-vtk.c,v 11.2 2004/05/10 15:30:41 erikg Exp $ (BRL)";
a41 1
#include "externs.h"
@

