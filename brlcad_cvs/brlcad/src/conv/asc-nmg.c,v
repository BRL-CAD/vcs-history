head	14.22;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.5
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@ * @;


14.22
date	2007.11.21.20.49.05;	author erikgreenwald;	state Exp;
branches;
next	14.21;

14.21
date	2007.11.21.19.05.59;	author erikgreenwald;	state Exp;
branches;
next	14.20;

14.20
date	2007.11.21.15.21.33;	author erikgreenwald;	state Exp;
branches;
next	14.19;

14.19
date	2007.10.22.08.47.38;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.10.14.08.01.46;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.18.04.13.43;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.07.09.19.17.15;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.06.20.04.06.10;	author johnranderson;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.23.03.14.49;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.09.09.05.50.29;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.30.18;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.09;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.49;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.22
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                       A S C - N M G . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file asc-nmg.c
 *
 *  Program to convert an ascii description of an NMG into a BRL-CAD
 *  NMG model.
 *
 *  Authors -
 *	Michael Markowski
 *	Lee A. Butler
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.21 2007/11/21 19:05:59 erikgreenwald Exp $ (ARL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"
#include "rtgeom.h"
#include "wdb.h"

static int ascii_to_brlcad(FILE *fpin, struct rt_wdb *fpout, char *reg_name, char *grp_name);
static void descr_to_nmg(struct shell *s, FILE *fp, fastf_t *Ext);

char		usage[] = "Usage: %s [file]\n";
extern char	*bu_optarg;
extern int	bu_optind;

/*
 *	M a i n
 *
 *	Get ascii input file and output file names.
 */
int
main(int argc, char **argv)
{
	char		*afile, *bfile = "nmg.g";
	FILE		*fpin;
	struct rt_wdb	*fpout;

	/* Get ascii NMG input file name. */
	if (bu_optind >= argc) {
		afile = "-";
		fpin = stdin;
	} else {
		afile = argv[bu_optind];
		if ((fpin = fopen(afile, "r")) == NULL) {
			fprintf(stderr,
				"%s: cannot open %s for reading\n",
				argv[0], afile);
			bu_exit(1, NULL);
		}
	}

	/* Get BRL-CAD output data base name. */
	bu_optind++;
	if (bu_optind >= argc) {
		bfile = "nmg.g";
	} else {
		bfile = argv[bu_optind];
	}
	if ((fpout = wdb_fopen(bfile)) == NULL) {
		fprintf(stderr, "%s: cannot open %s for writing\n",
			argv[0], bfile);
		bu_exit(1, NULL);
	}

	ascii_to_brlcad(fpin, fpout, "nmg", NULL);
	fclose(fpin);
	wdb_close(fpout);
	return 0;
}

/*
 *	C r e a t e _ B r l c a d _ D b
 *
 *	Write the nmg to a BRL-CAD style data base.
 */
void
create_brlcad_db(struct rt_wdb *fpout, struct model *m, char *reg_name, char *grp_name)
{
	char	*rname, *sname;
	int size = sizeof(reg_name) + 3;

	mk_id(fpout, "Ascii NMG");

	rname = bu_malloc(size, "rname");	/* Region name. */
	sname = bu_malloc(size, "sname");	/* Solid name. */

	snprintf(sname, size, "s.%s", reg_name);
	mk_nmg(fpout, sname,  m);		/* Make nmg object. */
	snprintf(rname, size, "r.%s", reg_name);
	mk_comb1(fpout, rname, sname, 1);	/* Put object in a region. */
	if (grp_name) {
		mk_comb1(fpout, grp_name, rname, 1);	/* Region in group. */
	}
}

/*
 *	A s c i i _ t o _ B r l c a d
 *
 *	Convert an ascii nmg description into a BRL-CAD data base.
 */
static int
ascii_to_brlcad(FILE *fpin, struct rt_wdb *fpout, char *reg_name, char *grp_name)
{
	struct model	*m;
	struct nmgregion	*r;
	struct bn_tol	tol;
	struct shell	*s;
	vect_t		Ext;
	struct faceuse *fu;
	plane_t		pl;

	VSETALL(Ext, 0.);

	m = nmg_mm();		/* Make nmg model. */
	r = nmg_mrsv(m);	/* Make region, empty shell, vertex */
	s = BU_LIST_FIRST(shell, &r->s_hd);
	descr_to_nmg(s, fpin, Ext);	/* Convert ascii description to nmg. */

	/* Copied from proc-db/nmgmodel.c */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.01;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 0.001;
	tol.para = 0.999;

	/* Associate the face geometry. */
	fu = BU_LIST_FIRST( faceuse , &s->fu_hd );
	if (nmg_loop_plane_area(BU_LIST_FIRST(loopuse, &fu->lu_hd), pl) < 0.0)
		return(-1);
	else
		nmg_face_g( fu , pl );

	if (!NEAR_ZERO(MAGNITUDE(Ext), 0.001))
		nmg_extrude_face(BU_LIST_FIRST(faceuse, &s->fu_hd), Ext, &tol);

	nmg_region_a(r, &tol);	/* Calculate geometry for region and shell. */

	nmg_fix_normals( s , &tol ); /* insure that faces have outward pointing normals */

	create_brlcad_db(fpout, m, reg_name, grp_name);

	return( 0 );
}

/*
 *	D e s c r _ t o _ N M G
 *
 *	Convert an ascii description of an nmg to an actual nmg.
 *	(This should be done with lex and yacc.)
 */
static void
descr_to_nmg(struct shell *s, FILE *fp, fastf_t *Ext)
			/* NMG shell to add loops to. */
			/* File pointer for ascii nmg file. */
			/* Extrusion vector. */
{
#define MAXV	10000

	char	token[80] = {0};	/* Token read from ascii nmg file. */
	fastf_t	x, y, z;	/* Coordinates of a vertex. */
	int	dir = OT_NONE;	/* Direction of face. */
	int	i,
		lu_verts[MAXV] = {0},	/* Vertex names making up loop. */
		n,		/* Number of vertices so far in loop. */
		stat,		/* Set to EOF when finished ascii file. */
		vert_num;	/* Current vertex in ascii file. */
	fastf_t	pts[3*MAXV] = {(fastf_t)0};	/* Points in current loop. */
	struct faceuse *fu;	/* Face created. */
	struct vertex	*cur_loop[MAXV],/* Vertices in current loop. */
			*verts[MAXV];	/* Vertices in all loops. */

	n = 0;			/* No vertices read in yet. */
	fu = NULL;		/* Face to be created elsewhere. */
	for (i = 0; i < MAXV; i++) {
	    cur_loop[i] = NULL;
	    verts[i] = NULL;
	}

	stat = fscanf(fp, "%80s", token);	/* Get 1st token. */
	do {
		switch (token[0]) {
		case 'e':		/* Extrude face. */
			stat = fscanf(fp, "%80s", token);
			switch (token[0]) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case '.':
			case '+':
			case '-':
				/* Get x value of vector. */
				x = atof(token);
				if (fscanf(fp, "%lf%lf", &y, &z) != 2)
					bu_exit(EXIT_FAILURE, "descr_to_nmg: messed up vector\n");
				VSET(Ext, x, y, z);

				/* Get token for next trip through loop. */
				stat = fscanf(fp, "%80s", token);
				break;
			}
			break;
		case 'l':		/* Start new loop. */
			/* Make a loop with vertices previous to this 'l'. */
			if (n) {
				for (i = 0; i < n; i++)
					if (lu_verts[i] >= 0)
						cur_loop[i] = verts[lu_verts[i]];
					else /* Reuse of a vertex. */
						cur_loop[i] = NULL;
				fu = nmg_add_loop_to_face(s, fu, cur_loop, n,
					dir);
				/* Associate geometry with vertices. */
				for (i = 0; i < n; i++) {
					if (lu_verts[i] >= 0 && !verts[lu_verts[i]]) {
						nmg_vertex_gv( cur_loop[i],
							&pts[3*lu_verts[i]]);
						verts[lu_verts[i]] =
							cur_loop[i];
					}
				}
				/* Take care of reused vertices. */
				for (i = 0; i < n; i++)
					if (lu_verts[i] < 0)
						nmg_jv(verts[-lu_verts[i]], cur_loop[i]);
				n = 0;
			}
			stat = fscanf(fp, "%80s", token);

			switch (token[0]) {
			case 'h':	/* Is it cw or ccw? */
				if (!strcmp(token, "hole"))
					dir = OT_OPPOSITE;
				else
					bu_exit(EXIT_FAILURE, "descr_to_nmg: expected \"hole\"\n");
				/* Get token for next trip through loop. */
				stat = fscanf(fp, "%80s", token);
				break;

			default:
				dir = OT_SAME;
				break;
			}
			break;

		case 'v':		/* Vertex in current loop. */
			if (token[1] == '\0')
				bu_exit(EXIT_FAILURE, "descr_to_nmg: vertices must be numbered.\n");
			vert_num = atoi(token+1);
			stat = fscanf(fp, "%80s", token);
			switch (token[0]) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
			case '.':
			case '+':
			case '-':
				/* Get coordinates of vertex. */
				x = atof(token);
				if (fscanf(fp, "%lf%lf", &y, &z) != 2)
					bu_exit(EXIT_FAILURE, "descr_to_nmg: messed up vertex\n");
				/* Save vertex with others in current loop. */
				pts[3*vert_num] = x;
				pts[3*vert_num+1] = y;
				pts[3*vert_num+2] = z;
				/* Save vertex number. */
				lu_verts[n] = vert_num;
				if (++n > MAXV)
					bu_exit(EXIT_FAILURE, "descr_to_nmg: too many points in loop\n");
				/* Get token for next trip through loop. */
				stat = fscanf(fp, "%80s", token);
				break;

			default:
				/* Use negative vert number to mark vertex as being reused. */
				lu_verts[n] = -vert_num;
				if (++n > MAXV)
					bu_exit(EXIT_FAILURE, "descr_to_nmg: too many points in loop\n");
				break;
			}
			break;

		default:
			bu_exit(1, "descr_to_nmg: unexpected token \"%s\"\n", token);
			break;
		}
	} while (stat != EOF);

	/* Make a loop with vertices previous to this 'l'. */
	if (n) {
		for (i = 0; i < n; i++)
			if (lu_verts[i] >= 0)
				cur_loop[i] = verts[lu_verts[i]];
			else /* Reuse of a vertex. */
				cur_loop[i] = NULL;
		fu = nmg_add_loop_to_face(s, fu, cur_loop, n,
			dir);
		/* Associate geometry with vertices. */
		for (i = 0; i < n; i++) {
			if (lu_verts[i] >= 0 && !verts[lu_verts[i]]) {
				nmg_vertex_gv( cur_loop[i],
					&pts[3*lu_verts[i]]);
				verts[lu_verts[i]] =
					cur_loop[i];
			}
		}
		/* Take care of reused vertices. */
		for (i = 0; i < n; i++)
			if (lu_verts[i] < 0)
				nmg_jv(verts[-lu_verts[i]], cur_loop[i]);
		n = 0;
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.21
log
@exit->bu_exit where applicable
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.20 2007/11/21 15:21:33 erikgreenwald Exp $ (ARL)";
d83 1
a83 1
			bu_exit(1, "");
d97 1
a97 1
		bu_exit(1, "");
@


14.20
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.19 2007/10/22 08:47:38 brlcad Exp $ (ARL)";
d83 1
a83 1
			exit(1);
d97 1
a97 1
		exit(1);
@


14.19
log
@first 10% of the review of the bu_bomb() instances.  updating many to bu_exit() for the instances where the error or exit condition aren't catastrophic errors (i.e. they wouldn't benefit from having a stack trace of how we got into that state code-wise).  this also makes it easier to refactor usages of log & exit too to the new routine.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.18 2007/10/14 08:01:46 brlcad Exp $ (ARL)";
d236 1
a236 1
					bu_bomb("descr_to_nmg: messed up vector\n");
d276 1
a276 1
					bu_bomb("descr_to_nmg: expected \"hole\"\n");
d289 1
a289 1
				bu_bomb("descr_to_nmg: vertices must be numbered.\n");
d309 1
a309 1
					bu_bomb("descr_to_nmg: messed up vertex\n");
d317 1
a317 1
					bu_bomb("descr_to_nmg: too many points in loop\n");
d326 1
a326 1
					bu_bomb("descr_to_nmg: too many points in loop\n");
@


14.18
log
@take care of a slew of level 4 flawfinder issues related to adding length parameters to string and i/o functions
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.17 2007/05/18 04:13:43 brlcad Exp $ (ARL)";
d332 1
a332 2
			bu_log("descr_to_nmg: unexpected token \"%s\"\n", token);
			bu_bomb("");
@


14.17
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.16 2007/02/02 08:48:28 brlcad Exp $ (ARL)";
d115 1
d119 2
a120 2
	rname = bu_malloc(sizeof(reg_name) + 3, "rname");	/* Region name. */
	sname = bu_malloc(sizeof(reg_name) + 3, "sname");	/* Solid name. */
d122 1
a122 1
	sprintf(sname, "s.%s", reg_name);
d124 1
a124 1
	sprintf(rname, "r.%s", reg_name);
d214 1
a214 1
	stat = fscanf(fp, "%s", token);	/* Get 1st token. */
d218 1
a218 1
			stat = fscanf(fp, "%s", token);
d240 1
a240 1
				stat = fscanf(fp, "%s", token);
d269 1
a269 1
			stat = fscanf(fp, "%s", token);
d278 1
a278 1
				stat = fscanf(fp, "%s", token);
d291 1
a291 1
			stat = fscanf(fp, "%s", token);
d319 1
a319 1
				stat = fscanf(fp, "%s", token);
@


14.16
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.15 2007/01/27 01:41:32 brlcad Exp $ (ARL)";
d235 1
a235 1
					rt_bomb("descr_to_nmg: messed up vector\n");
d275 1
a275 1
					rt_bomb("descr_to_nmg: expected \"hole\"\n");
d288 1
a288 1
				rt_bomb("descr_to_nmg: vertices must be numbered.\n");
d308 1
a308 1
					rt_bomb("descr_to_nmg: messed up vertex\n");
d316 1
a316 1
					rt_bomb("descr_to_nmg: too many points in loop\n");
d325 1
a325 1
					rt_bomb("descr_to_nmg: too many points in loop\n");
d332 1
a332 1
			rt_bomb("");
@


14.15
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.14 2007/01/23 01:13:25 brlcad Exp $ (ARL)";
d58 2
a59 2
extern char	*optarg;
extern int	optind;
d74 1
a74 1
	if (optind >= argc) {
d78 1
a78 1
		afile = argv[optind];
d88 2
a89 2
	optind++;
	if (optind >= argc) {
d92 1
a92 1
		bfile = argv[optind];
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.13 2007/01/20 14:36:43 brlcad Exp $ (ARL)";
d153 1
a153 1
        /* Copied from proc-db/nmgmodel.c */
d187 3
a189 3
            	   	/* NMG shell to add loops to. */
    		    	/* File pointer for ascii nmg file. */
      		    	/* Extrusion vector. */
@


14.13
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.12 2006/07/09 19:17:15 brlcad Exp $ (ARL)";
@


14.12
log
@increase and initialize some buffer sizes to something larger in order to minimize hitting buffer limits while processing.
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.11 2006/06/20 04:06:10 johnranderson Exp $ (ARL)";
@


14.11
log
@Eliminated a redundant call to nmg_km()
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.10 2006/01/28 00:36:27 brlcad Exp $ (ARL)";
d192 1
a192 1
#define MAXV	1024
d194 1
a194 1
	char	token[80];	/* Token read from ascii nmg file. */
d198 1
a198 1
		lu_verts[MAXV],	/* Vertex names making up loop. */
d202 1
a202 1
	fastf_t	pts[3*MAXV];	/* Points in current loop. */
d209 5
a213 2
	for (i = 0; i < MAXV; i++)
		verts[i] = NULL;
@


14.10
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.9 2006/01/23 03:14:49 brlcad Exp $ (ARL)";
a176 2
	nmg_km(m);		/* Destroy the nmg model. */

@


14.9
log
@convert to libbu memory management
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.8 2006/01/18 06:46:13 brlcad Exp $ (ARL)";
d40 3
@


14.8
log
@update copyright to 2006
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.7 2005/10/23 04:44:29 brlcad Exp $ (ARL)";
d43 1
d116 2
a117 2
	rname = malloc(sizeof(reg_name) + 3);	/* Region name. */
	sname = malloc(sizeof(reg_name) + 3);	/* Solid name. */
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.6 2005/09/09 05:50:29 brlcad Exp $ (ARL)";
@


14.6
log
@use BRL-CAD instead of brl-cad if only to be at least internally consistent and serve good example
@
text
@d30 1
a30 1
 *  
d34 1
a34 1
 *  
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.5 2005/01/30 20:30:18 brlcad Exp $ (ARL)";
@


14.5
log
@update copyright to 2005
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/asc-nmg.c,v 14.4 2004/12/21 07:18:57 morrison Exp $ (ARL)";
d106 1
a106 1
 *	Write the nmg to a brl-cad style data base.
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d34 1
a34 1
 *
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d106 1
a106 1
 *	Write the nmg to a BRL-CAD style data base.
@


14.4
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/asc-nmg.c,v 14.3 2004/12/18 06:50:50 morrison Exp $ (ARL)";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a34 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/asc-nmg.c,v 14.2 2004/12/18 02:38:09 morrison Exp $ (ARL)";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file asc-nmg.c
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/asc-nmg.c,v 14.1 2004/11/16 19:42:12 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			A S C - N M G . C
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/asc-nmg.c,v 1.1 2004/05/20 15:18:49 morrison Exp $ (ARL)";
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/conv/asc-nmg.c,v 11.12 2004/04/05 07:49:36 morrison Exp $ (ARL)";
d340 10
@

