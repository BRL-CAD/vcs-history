head	1.5;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.5
date	2007.12.31.20.25.13;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.26;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.47;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.44.49;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.44.49;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@header cleanup, more address removal
@
text
@/*                       M A K E D I R . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file makedir.c
 *
 * Routine to read the directory section of an IGES file.  and store
 * needed info in the 'directory' structures.  dir[n] is the structure
 * for entity #n.  The directory entry for entity #n is located on
 * line D'2n+1' of the iges file.
 *
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 */

#include "./iges_struct.h"
#include "./iges_extern.h"

#define	CR	'\015'

void
Makedir()
{

	int found,i,saverec,entcount=(-1),paramptr=0,paramguess=0;
	char str[9];

	str[8] = '\0';
	bu_log( "Reading Directory Section...\n" );
	bu_log( "Number of entities checked:\n" );

	if( totentities < 1 )
		goto out;

	Readrec( dstart+1 );	/* read first record in directory section */

	while( 1 )
	{
		if( card[72] != 'D' )	/* We are not in the directory section */
			break;

		entcount++;	/* increment count of entities */

		if( entcount%100 == 0 )
		{
			sprintf( str , "\t%d%c" , entcount , CR );
			write( 1 , str , strlen( str ) );
		}

		/* save the directory record number for this entity */
		dir[entcount]->direct = atoi( &card[73] );

		/* set reference count to 0 */
		dir[entcount]->referenced = 0;

		/* set record number to read for next entity */
		saverec = currec + 2;

		Readcols( str , 8 );	/* read entity type */
		dir[entcount]->type = atoi( str );

		Readcols( str , 8 );	/* read pointer to parameter entry */

		/* convert it to a file record number */
		paramptr = atoi( str );
		if( paramptr == 0 && entcount > 0 )
		{
			paramguess = 1;
			dir[entcount]->param = dir[entcount-1]->param + dir[entcount-1]->paramlines;
		}
		else if( paramptr > 0 )
			dir[entcount]->param = paramptr + pstart;
		else
			bu_log( "Entity number %d does not have a correct parameter pointer\n",
				entcount );

		if( dir[entcount]->type == 422 )
		{
			/* This is an attribute instance, so get the definition */
			Readcols( str , 8 );
			dir[entcount]->referenced = (-atoi(str));
		}
		else
			counter += 8;

		counter += 16;	/* skip 16 columns */

		Readcols( str , 8 );    /* read pointer to view entity */
		dir[entcount]->view = atoi( str );

		Readcols( str , 8 );	/* read pointer to transformation entity */

		/* convert it to a "dir" index
		 * Use (DE + 1)/2 - 1 rather than (DE-1)/2 to get
		 * a (-1) value in "trans" field when DE is 0
		 */
		dir[entcount]->trans = (atoi( str ) + 1)/2 - 1;

		/* skip next field */
		counter += 8;

		Readcols( str , 8 );	/* read status entry */
		dir[entcount]->status = atoi( str );

		Readrec( currec + 1 );	/* read next record into buffer */
		counter += 16;		/* skip first two fields */

		Readcols( str , 8 );	/* read pointer to color entity */
		/* if pointer is negative, convert to a 'dir' index */
		dir[entcount]->colorp = atoi( str );
		if( dir[entcount]->colorp < 0 )
			dir[entcount]->colorp = (dir[entcount]->colorp + 1)/2;

		Readcols( str , 8 );	/* read parameter line count */
		dir[entcount]->paramlines = atoi( str );
		if( dir[entcount]->paramlines == 0 )
			dir[entcount]->paramlines = 1;
		Readcols( str , 8 );	/* read form number */
		dir[entcount]->form = atoi( str );

		/* Look for entity type in list and incrememt that count */

		found = 0;
		for( i=0 ; i<ntypes ; i++ )
		{
			if( typecount[i].type == dir[entcount]->type )
			{
				typecount[i].count++;
				found = 1;
				break;
			}
		}
		if( !found )
		{
			typecount[0].count++;
			if( dir[entcount]->type > 0 )
				dir[entcount]->type = (-dir[entcount]->type); /* for easy recognition */
		}

		/* Check if this is a transformation entity */
		if( dir[entcount]->type == 124 || dir[entcount]->type == 700 )
		{
			/* Read and store the matrix */
			if( dir[entcount]->param <= pstart )
			{
				bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
						dir[entcount]->direct , dir[entcount]->name );
				dir[entcount]->rot = NULL;
			}
			else
			{
				dir[entcount]->rot = (mat_t *)bu_malloc( sizeof( mat_t ) , "Makedir:matrix" );
				Readmatrix( dir[entcount]->param , *dir[entcount]->rot );
			}
		}
		else /* set to NULL */
			dir[entcount]->rot = NULL;

	Readrec( saverec ); /* restore previous record */
	}

out:
	bu_log( "\t%d\n\n" ,entcount+1 );
	if( paramguess )
		bu_log( "Some entities did not have proper parameter pointers, so a resonable guess was made\n" );
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d21 6
a31 5
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
a33 6
/* Routine to read the directory section of an IGES file.
	and store needed info in the 'directory' structures.
	dir[n] is the structure for entity #n.
	The directory entry for entity #n is located on
	line D'2n+1' of the iges file.	*/

@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
@


1.1.2.1
log
@file makedir.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 201
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 201
/*                       M A K E D I R . C
 * BRL-CAD
 *
 * Copyright (C) 1990-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file makedir.c
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

/* Routine to read the directory section of an IGES file.
	and store needed info in the 'directory' structures.
	dir[n] is the structure for entity #n.
	The directory entry for entity #n is located on
	line D'2n+1' of the iges file.	*/

#include "./iges_struct.h"
#include "./iges_extern.h"

#define	CR	'\015'

void
Makedir()
{

	int found,i,saverec,entcount=(-1),paramptr=0,paramguess=0;
	char str[9];

	str[8] = '\0';
	bu_log( "Reading Directory Section...\n" );
	bu_log( "Number of entities checked:\n" );

	if( totentities < 1 )
		goto out;

	Readrec( dstart+1 );	/* read first record in directory section */

	while( 1 )
	{
		if( card[72] != 'D' )	/* We are not in the directory section */
			break;

		entcount++;	/* increment count of entities */

		if( entcount%100 == 0 )
		{
			sprintf( str , "\t%d%c" , entcount , CR );
			write( 1 , str , strlen( str ) );
		}

		/* save the directory record number for this entity */
		dir[entcount]->direct = atoi( &card[73] );

		/* set reference count to 0 */
		dir[entcount]->referenced = 0;

		/* set record number to read for next entity */
		saverec = currec + 2;

		Readcols( str , 8 );	/* read entity type */
		dir[entcount]->type = atoi( str );

		Readcols( str , 8 );	/* read pointer to parameter entry */

		/* convert it to a file record number */
		paramptr = atoi( str );
		if( paramptr == 0 && entcount > 0 )
		{
			paramguess = 1;
			dir[entcount]->param = dir[entcount-1]->param + dir[entcount-1]->paramlines;
		}
		else if( paramptr > 0 )
			dir[entcount]->param = paramptr + pstart;
		else
			bu_log( "Entity number %d does not have a correct parameter pointer\n",
				entcount );

		if( dir[entcount]->type == 422 )
		{
			/* This is an attribute instance, so get the definition */
			Readcols( str , 8 );
			dir[entcount]->referenced = (-atoi(str));
		}
		else
			counter += 8;

		counter += 16;	/* skip 16 columns */

		Readcols( str , 8 );    /* read pointer to view entity */
		dir[entcount]->view = atoi( str );

		Readcols( str , 8 );	/* read pointer to transformation entity */

		/* convert it to a "dir" index
		 * Use (DE + 1)/2 - 1 rather than (DE-1)/2 to get
		 * a (-1) value in "trans" field when DE is 0
		 */
		dir[entcount]->trans = (atoi( str ) + 1)/2 - 1;

		/* skip next field */
		counter += 8;

		Readcols( str , 8 );	/* read status entry */
		dir[entcount]->status = atoi( str );

		Readrec( currec + 1 );	/* read next record into buffer */
		counter += 16;		/* skip first two fields */

		Readcols( str , 8 );	/* read pointer to color entity */
		/* if pointer is negative, convert to a 'dir' index */
		dir[entcount]->colorp = atoi( str );
		if( dir[entcount]->colorp < 0 )
			dir[entcount]->colorp = (dir[entcount]->colorp + 1)/2;

		Readcols( str , 8 );	/* read parameter line count */
		dir[entcount]->paramlines = atoi( str );
		if( dir[entcount]->paramlines == 0 )
			dir[entcount]->paramlines = 1;
		Readcols( str , 8 );	/* read form number */
		dir[entcount]->form = atoi( str );

		/* Look for entity type in list and incrememt that count */

		found = 0;
		for( i=0 ; i<ntypes ; i++ )
		{
			if( typecount[i].type == dir[entcount]->type )
			{
				typecount[i].count++;
				found = 1;
				break;
			}
		}
		if( !found )
		{
			typecount[0].count++;
			if( dir[entcount]->type > 0 )
				dir[entcount]->type = (-dir[entcount]->type); /* for easy recognition */
		}

		/* Check if this is a transformation entity */
		if( dir[entcount]->type == 124 || dir[entcount]->type == 700 )
		{
			/* Read and store the matrix */
			if( dir[entcount]->param <= pstart )
			{
				bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
						dir[entcount]->direct , dir[entcount]->name );
				dir[entcount]->rot = NULL;
			}
			else
			{
				dir[entcount]->rot = (mat_t *)bu_malloc( sizeof( mat_t ) , "Makedir:matrix" );
				Readmatrix( dir[entcount]->param , *dir[entcount]->rot );
			}
		}
		else /* set to NULL */
			dir[entcount]->rot = NULL;

	Readrec( saverec ); /* restore previous record */
	}

out:
	bu_log( "\t%d\n\n" ,entcount+1 );
	if( paramguess )
		bu_log( "Some entities did not have proper parameter pointers, so a resonable guess was made\n" );
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


