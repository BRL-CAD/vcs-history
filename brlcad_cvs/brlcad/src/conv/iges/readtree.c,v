head	1.7;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.7
date	2007.12.31.20.25.14;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.21.20.38.22;	author erikgreenwald;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.21.19.05.59;	author erikgreenwald;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.26;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.47;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.44.49;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.44.49;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.7
log
@header cleanup, more address removal
@
text
@/*                      R E A D T R E E . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file readtree.c
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 */

/*		Read and construct a boolean tree		*/

#include "./iges_struct.h"
#include "./iges_extern.h"

union tree *Readtree( matp )
mat_t *matp;
{
	int length,i,k,op;
	union tree *ptr,*Pop();
	matp_t new_mat;

	Readint( &i , "" );
	if( i != 180 )
	{
		bu_log( "Expecting a Boolean Tree, found type %d\n" , i );
		return( (union tree *)NULL );
	}

	Freestack();
	Readint( &length , "" );
	for( i=0 ; i<length ; i++ )
	{
		Readint( &op , "" );
		if( op < 0 )	/* This is an operand */
		{
			ptr = (union tree *)bu_malloc( sizeof( union tree ),
				"Readtree: ptr" );
			ptr->magic = RT_TREE_MAGIC;
			ptr->tr_l.tl_op = OP_DB_LEAF;
			k = ((-op)-1)/2;
			if( k < 0 || k >= totentities )
			{
				bu_log( "Readtree(): pointer in tree is out of bounds (%d)\n", -op );
				return( (union tree *)NULL );
			}
			if( dir[k]->type <= 0 )
			{
				bu_log( "Unknown entity type (%d) at D%07d\n", -dir[k]->type, dir[k]->direct );
				return( (union tree *)NULL );
			}
			ptr->tr_l.tl_name = bu_strdup( dir[k]->name );
			if( matp && dir[k]->rot )
			{
				new_mat = (matp_t)bu_malloc( sizeof( mat_t ), "new_mat" );
				bn_mat_mul( new_mat, *matp, *dir[k]->rot );
			}
			else if( dir[k]->rot )
				new_mat = *dir[k]->rot;
			else if( matp )
				new_mat = *matp;
			else
				new_mat = (matp_t)NULL;
			ptr->tr_l.tl_mat = new_mat;
			Push( ptr );
		}
		else	/* This is an operator */
		{
			ptr = (union tree *)bu_malloc( sizeof( union tree ),
				"Readtree: ptr" );
			ptr->magic = RT_TREE_MAGIC;
			switch( op )
			{
				case 1:
					ptr->tr_b.tb_op = OP_UNION;
					break;
				case 2:
					ptr->tr_b.tb_op = OP_INTERSECT;
					break;
				case 3:
					ptr->tr_b.tb_op = OP_SUBTRACT;
					break;
				default:
					bu_exit( 1, "Readtree(): illegal operator code (%d)\n", op );
			}
			ptr->tr_b.tb_right = Pop();
			ptr->tr_b.tb_left = Pop();
			Push( ptr );
		}
	}

	return( Pop() );
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.6
log
@collapse bu_log();bu_exit(#,""); as much as possible
@
text
@a25 5
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
@


1.5
log
@exit->bu_exit where applicable
@
text
@d106 1
a106 2
					bu_log( "Readtree(): illegal operator code (%d)\n", op );
					bu_exit( 1, "" );
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d107 1
a107 1
					exit( 1 );
@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
@


1.1.2.1
log
@file readtree.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 128
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 128
/*                      R E A D T R E E . C
 * BRL-CAD
 *
 * Copyright (C) 1990-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file readtree.c
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

/*		Read and construct a boolean tree		*/

#include "./iges_struct.h"
#include "./iges_extern.h"

union tree *Readtree( matp )
mat_t *matp;
{
	int length,i,k,op;
	union tree *ptr,*Pop();
	matp_t new_mat;

	Readint( &i , "" );
	if( i != 180 )
	{
		bu_log( "Expecting a Boolean Tree, found type %d\n" , i );
		return( (union tree *)NULL );
	}

	Freestack();
	Readint( &length , "" );
	for( i=0 ; i<length ; i++ )
	{
		Readint( &op , "" );
		if( op < 0 )	/* This is an operand */
		{
			ptr = (union tree *)bu_malloc( sizeof( union tree ),
				"Readtree: ptr" );
			ptr->magic = RT_TREE_MAGIC;
			ptr->tr_l.tl_op = OP_DB_LEAF;
			k = ((-op)-1)/2;
			if( k < 0 || k >= totentities )
			{
				bu_log( "Readtree(): pointer in tree is out of bounds (%d)\n", -op );
				return( (union tree *)NULL );
			}
			if( dir[k]->type <= 0 )
			{
				bu_log( "Unknown entity type (%d) at D%07d\n", -dir[k]->type, dir[k]->direct );
				return( (union tree *)NULL );
			}
			ptr->tr_l.tl_name = bu_strdup( dir[k]->name );
			if( matp && dir[k]->rot )
			{
				new_mat = (matp_t)bu_malloc( sizeof( mat_t ), "new_mat" );
				bn_mat_mul( new_mat, *matp, *dir[k]->rot );
			}
			else if( dir[k]->rot )
				new_mat = *dir[k]->rot;
			else if( matp )
				new_mat = *matp;
			else
				new_mat = (matp_t)NULL;
			ptr->tr_l.tl_mat = new_mat;
			Push( ptr );
		}
		else	/* This is an operator */
		{
			ptr = (union tree *)bu_malloc( sizeof( union tree ),
				"Readtree: ptr" );
			ptr->magic = RT_TREE_MAGIC;
			switch( op )
			{
				case 1:
					ptr->tr_b.tb_op = OP_UNION;
					break;
				case 2:
					ptr->tr_b.tb_op = OP_INTERSECT;
					break;
				case 3:
					ptr->tr_b.tb_op = OP_SUBTRACT;
					break;
				default:
					bu_log( "Readtree(): illegal operator code (%d)\n", op );
					exit( 1 );
			}
			ptr->tr_b.tb_right = Pop();
			ptr->tr_b.tb_left = Pop();
			Push( ptr );
		}
	}

	return( Pop() );
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


