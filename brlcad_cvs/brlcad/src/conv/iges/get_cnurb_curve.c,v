head	1.4;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.4
date	2007.01.23.01.13.26;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.47;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.44.49;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.44.49;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@/*               G E T _ C N U R B _ C U R V E . C
 * BRL-CAD
 *
 * Copyright (c) 1995-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file get_cnurb_curve.c
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	SLAD/BVLD/VMB
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/iges/get_cnurb_curve.c,v 1.3 2007/01/20 14:36:47 brlcad Exp $ (BRL)";
#endif

#include "./iges_struct.h"
#include "./iges_extern.h"

struct edge_g_cnurb *
Get_cnurb_curve( curve_de, linear )
int curve_de;
int *linear;
{
	int i;
	int curve;
	struct edge_g_cnurb *crv;

	*linear = 0;

	curve = (curve_de - 1)/2;
	if( curve >= dirarraylen )
	{
		bu_log( "Get_cnurb_curve: DE=%d is too large, dirarraylen = %d\n", curve_de, dirarraylen );
		return( (struct edge_g_cnurb *)NULL );
	}

	switch( dir[curve]->type )
	{
		case 110:	/* line */
		{
			int pt_type;
			int type;
			point_t pt1;
			point_t start_pt, end_pt;

			Readrec( dir[curve]->param );
			Readint( &type , "" );
			if( type != dir[curve]->type )
			{
				bu_log( "Error in Get_cnurb_curve, looking for curve type %d, found %d\n" ,
					dir[curve]->type , type );
				return( (struct edge_g_cnurb *)NULL );

			}
			/* Read first point */
			for( i=0 ; i<3 ; i++ )
				Readcnv( &pt1[i] , "" );
			MAT4X3PNT( start_pt , *dir[curve]->rot , pt1 );

			/* Read second point */
			for( i=0 ; i<3 ; i++ )
				Readcnv( &pt1[i] , "" );
			MAT4X3PNT( end_pt , *dir[curve]->rot , pt1 );

			/* pt_type for rational UVW coords */
			pt_type = RT_NURB_MAKE_PT_TYPE( 3, 3, 1 );

			/* make a linear edge_g_cnurb (order=2) */
			crv = rt_nurb_new_cnurb( 2, 4, 2, pt_type );

			/* insert control mesh */
			VMOVE( crv->ctl_points, start_pt );
			VMOVE( &crv->ctl_points[3], end_pt );

			/* insert knot values */
			crv->k.knots[0] = 0.0;
			crv->k.knots[1] = 0.0;
			crv->k.knots[2] = 1.0;
			crv->k.knots[3] = 1.0;

			*linear = 1;

			return( crv );
		}
		case 126:	/* B-spline */
			crv = Get_cnurb( curve );
			if( crv->order < 3 )
				*linear = 1;
			return( crv );
		default:
			bu_log( "Not yet handling curves of type: %s\n", iges_type( dir[curve]->type ) );
			break;
	}

	return( (struct edge_g_cnurb *)NULL );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d31 1
a31 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/iges/get_cnurb_curve.c,v 1.2 2006/01/18 06:46:14 brlcad Exp $ (BRL)";
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2006 United States Government as represented by
d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/iges/get_cnurb_curve.c,v 1.1 2005/10/27 03:44:49 brlcad Exp $ (BRL)";
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1995-2005 United States Government as represented by
d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/iges/get_cnurb_curve.c,v 14.5 2005/10/23 04:44:31 brlcad Exp $ (BRL)";
@


1.1.2.1
log
@file get_cnurb_curve.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 125
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 125
/*               G E T _ C N U R B _ C U R V E . C
 * BRL-CAD
 *
 * Copyright (C) 1995-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file get_cnurb_curve.c
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	SLAD/BVLD/VMB
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header$ (BRL)";
#endif

#include "./iges_struct.h"
#include "./iges_extern.h"

struct edge_g_cnurb *
Get_cnurb_curve( curve_de, linear )
int curve_de;
int *linear;
{
	int i;
	int curve;
	struct edge_g_cnurb *crv;

	*linear = 0;

	curve = (curve_de - 1)/2;
	if( curve >= dirarraylen )
	{
		bu_log( "Get_cnurb_curve: DE=%d is too large, dirarraylen = %d\n", curve_de, dirarraylen );
		return( (struct edge_g_cnurb *)NULL );
	}

	switch( dir[curve]->type )
	{
		case 110:	/* line */
		{
			int pt_type;
			int type;
			point_t pt1;
			point_t start_pt, end_pt;

			Readrec( dir[curve]->param );
			Readint( &type , "" );
			if( type != dir[curve]->type )
			{
				bu_log( "Error in Get_cnurb_curve, looking for curve type %d, found %d\n" ,
					dir[curve]->type , type );
				return( (struct edge_g_cnurb *)NULL );

			}
			/* Read first point */
			for( i=0 ; i<3 ; i++ )
				Readcnv( &pt1[i] , "" );
			MAT4X3PNT( start_pt , *dir[curve]->rot , pt1 );

			/* Read second point */
			for( i=0 ; i<3 ; i++ )
				Readcnv( &pt1[i] , "" );
			MAT4X3PNT( end_pt , *dir[curve]->rot , pt1 );

			/* pt_type for rational UVW coords */
			pt_type = RT_NURB_MAKE_PT_TYPE( 3, 3, 1 );

			/* make a linear edge_g_cnurb (order=2) */
			crv = rt_nurb_new_cnurb( 2, 4, 2, pt_type );

			/* insert control mesh */
			VMOVE( crv->ctl_points, start_pt );
			VMOVE( &crv->ctl_points[3], end_pt );

			/* insert knot values */
			crv->k.knots[0] = 0.0;
			crv->k.knots[1] = 0.0;
			crv->k.knots[2] = 1.0;
			crv->k.knots[3] = 1.0;

			*linear = 1;

			return( crv );
		}
		case 126:	/* B-spline */
			crv = Get_cnurb( curve );
			if( crv->order < 3 )
				*linear = 1;
			return( crv );
		default:
			bu_log( "Not yet handling curves of type: %s\n", iges_type( dir[curve]->type ) );
			break;
	}

	return( (struct edge_g_cnurb *)NULL );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


