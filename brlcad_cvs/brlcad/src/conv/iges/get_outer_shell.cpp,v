head	1.2;
access;
symbols
	rel-7-10-4:1.1
	STABLE:1.1.0.2
	rel-7-10-2:1.1;
locks; strict;
comment	@// @;


1.2
date	2007.09.14.15.21.03;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.20.20.34.56;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed trailing whitespace
@
text
@/*               G E T _ O U T E R _ S H E L L . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file get_outer_shell.c
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	SLAD/BVLD/VMB
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */
#include "./iges_struct.h"
#include "./iges_extern.h"
#include "brep.h"

bool
Get_outer_brep(ON_Brep* brep, int entityno, int shell_orient)
{
    int		sol_num;		/* IGES solid type number */
    int		no_of_faces;		/* Number of faces in shell */
    int		face_count=0;		/* Number of faces actually made */
    int		*face_de;		/* Directory seqence numbers for faces */
    int		*face_orient;		/* Orientation of faces */
    int		face;

    /* Acquiring Data */

    if( dir[entityno]->param <= pstart ) {
	bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
		dir[entityno]->direct , dir[entityno]->name );
	return(0);
    }
    Readrec( dir[entityno]->param );
    Readint( &sol_num , "" );
    Readint( &no_of_faces , "" );

    face_de = (int *)bu_calloc( no_of_faces , sizeof( int ) , "Get_outer_shell face DE's" );
    face_orient = (int *)bu_calloc( no_of_faces , sizeof( int ) , "Get_outer_shell orients" );

    for(face = 0; face < no_of_faces; face++) {
	Readint( &face_de[face] , "" );
	Readint( &face_orient[face] , "" );
    }

    for(face = 0; face < no_of_faces; face++) {
	Add_face_to_brep(brep, (face_de[face]-1)/2, face_orient[face]);
    }

    // XXX do I need to glue these faces together?

    bu_free( (char *)face_de , "Get_outer_shell: face DE's" );
    bu_free( (char *)face_orient , "Get_outer_shell: face orients" );
    return( s );
}

struct shell *
Get_outer_shell( r , entityno , shell_orient )
     struct nmgregion *r;
     int entityno;
     int shell_orient;
{

    int		sol_num;		/* IGES solid type number */
    int		no_of_faces;		/* Number of faces in shell */
    int		face_count=0;		/* Number of faces actually made */
    int		*face_de;		/* Directory seqence numbers for faces */
    int		*face_orient;		/* Orientation of faces */
    int		face;
    struct shell	*s;			/* NMG shell */
    struct faceuse	**fu;			/* list of faceuses */

    /* Acquiring Data */

    if( dir[entityno]->param <= pstart )
	{
	    bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
		    dir[entityno]->direct , dir[entityno]->name );
	    return(0);
	}

    Readrec( dir[entityno]->param );
    Readint( &sol_num , "" );
    Readint( &no_of_faces , "" );

    face_de = (int *)bu_calloc( no_of_faces , sizeof( int ) , "Get_outer_shell face DE's" );
    face_orient = (int *)bu_calloc( no_of_faces , sizeof( int ) , "Get_outer_shell orients" );
    fu = (struct faceuse **)bu_calloc( no_of_faces , sizeof( struct faceuse *) , "Get_outer_shell faceuses " );

    for( face=0 ; face<no_of_faces ; face++ )
	{
	    Readint( &face_de[face] , "" );
	    Readint( &face_orient[face] , "" );
	}

    s = nmg_msv( r );

    for( face=0 ; face<no_of_faces ; face++ )
	{
	    fu[face_count] = Add_face_to_shell( s , (face_de[face]-1)/2 , face_orient[face]  );
	    if( fu[face_count] != (struct faceuse *)NULL )
		face_count++;
	}

    nmg_gluefaces( fu , face_count, &tol );

    bu_free( (char *)fu , "Get_outer_shell: faceuse list" );
    bu_free( (char *)face_de , "Get_outer_shell: face DE's" );
    bu_free( (char *)face_orient , "Get_outer_shell: face orients" );
    return( s );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.1
log
@correct a typo in documentation
@
text
@d34 1
a34 1
bool 
d43 1
a43 1
    
d45 1
a45 1
    
d50 1
a50 1
    }    
d54 1
a54 1
    
d66 1
a66 1
    
d71 1
a71 1
    return( s );    
@

