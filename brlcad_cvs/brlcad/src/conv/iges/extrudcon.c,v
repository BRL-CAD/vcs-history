head	1.5;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.5
date	2007.12.31.20.25.13;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.26;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.47;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.44.49;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.44.49;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@header cleanup, more address removal
@
text
@/*                     E X T R U D C O N . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file extrudcon.c
 *
 * Create a TGC from a ellipse extrusion.
 *
 * Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 */

#include "./iges_struct.h"
#include "./iges_extern.h"

int
Extrudcon( entityno , curve , evect )
int entityno;	/* extrusion entity number */
int curve;	/* elliptical arc entity number */
vect_t evect;	/* extrusion vector */
{
	fastf_t		a,b,c,d,e,f;	/* Coefficients of conic equation
					  a*X*X + b*X*Y + c*Y*Y + d*X + e*Y + f = 0 */
	fastf_t		conv_sq;	/* conv-factor squared */
	point_t		start,stop;	/* starting and stopping points on arc */
	int		sol_num;	/* Solid number */
	fastf_t		q1,q2,q3;	/* terms for determining type of conic */
	int		ellipse;	/* flag to indicate eillipse */
	fastf_t		tmp;		/* scratch */
	point_t		center;		/* center of ellipse */
	fastf_t		theta;		/* angle that elipse is rotated */
	fastf_t		a1,c1,f1;	/* coefficients of translated and rotated ellipse */
	vect_t		r1,r2;		/* radii vectors for ellipse and TGC */

	/* Acquiring Data */

	if( dir[curve]->form > 1 )
	{
		bu_log( "Conic arc for extrusion is not closed:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	if( dir[curve]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[curve]->direct , dir[curve]->name );
		return(0);
	}
	Readrec( dir[curve]->param );
	Readint( &sol_num , "" );
	Readflt( &a , "" );
	Readflt( &b , "" );
	Readflt( &c , "" );
	Readflt( &d , "" );
	Readflt( &e , "" );
	Readflt( &f , "" );
	Readcnv( &start[Z] , "" );
	Readcnv( &start[X] , "" );
	Readcnv( &start[Y] , "" );
	Readcnv( &stop[X] , "" );
	Readcnv( &stop[Y] , "" );
	stop[Z] = start[Z];

	/* Convert coefficients to "mm" units */

	conv_sq = conv_factor*conv_factor;
	a = a/conv_sq;
	b = b/conv_sq;
	c = c/conv_sq;
	d = d/conv_factor;
	e = e/conv_factor;

	/* set "a" to 1.0 */

	tmp = fabs( a );
	if( fabs( b ) < tmp && b != 0.0 )
		tmp = fabs( b );
	if( fabs( c ) < tmp )
		tmp = fabs( c );
	a = a/tmp;
	b = b/tmp;
	c = c/tmp;
	d = d/tmp;
	e = e/tmp;
	f = f/tmp;

	/* Check for closure */

	if( start[X] != stop[X] || start[Y] != stop[Y] )
	{
		bu_log( "Conic arc for extrusion is not closed:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	/* Check type of conic */

	q2 = a*c - b*b/4.0;
	ellipse = 1;
	if( q2 <= 0.0 )
		ellipse = 0;
	else
	{
		q3 = a + c;
		q1 = a*(c*f - e*e/4.0) - 0.5*b*(b*f/2.0 + e*d/4.0) + 0.5*d*(b*e/4.0 - d*c/2.0);
		if( q1*q3 >= 0.0 )
			ellipse = 0;
	}

	if( !ellipse )
	{
		bu_log( "Conic arc for extrusion is not an elipse:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	/* Calculate center of ellipse */

	center[X] = (b*e/4.0 - d*c/2.0)/q2;
	center[Y] = (b*d/4.0 - a*e/2.0)/q2;
	center[Z] = start[Z];

	/* calculate rotation about z-axis */
	if( b == 0.0 )
		theta = 0.0;
	else
		theta = 0.5*atan2( b , a-c );

	/* calculate coefficients for same ellipse, but translated to
	   origin, and rotated to align with axes */

	a1 = a + 0.5*b*tan( theta );
	c1 = c - 0.5*b*tan( theta );
	f1 = f - a*center[X]*center[X] - b*center[X]*center[Y] - c*center[Y]*center[Y];

	/* Calculate radii vectors */

	tmp = sqrt( -f1/a1 );
	r1[X] = tmp*cos(theta);
	r1[Y] = tmp*sin(theta);
	r1[Z] = 0.0;

	tmp = sqrt( -f1/c1 );
	r2[X] = tmp*(-sin(theta));
	r2[Y] = tmp*cos(theta);
	r2[Z] = 0.0;

	/* Construct solid */
	mk_tgc( fdout , dir[entityno]->name , center , evect , r1 , r2 , r1 , r2 );

	return( 1 );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d21 4
a24 1
 *  Authors -
a28 5
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
a30 2
/*	Create a TGC from a ellipse extrusion */

@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
@


1.1.2.1
log
@file extrudcon.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 192
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 192
/*                     E X T R U D C O N . C
 * BRL-CAD
 *
 * Copyright (C) 1990-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file extrudcon.c
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

/*	Create a TGC from a ellipse extrusion */

#include "./iges_struct.h"
#include "./iges_extern.h"

int
Extrudcon( entityno , curve , evect )
int entityno;	/* extrusion entity number */
int curve;	/* elliptical arc entity number */
vect_t evect;	/* extrusion vector */
{
	fastf_t		a,b,c,d,e,f;	/* Coefficients of conic equation
					  a*X*X + b*X*Y + c*Y*Y + d*X + e*Y + f = 0 */
	fastf_t		conv_sq;	/* conv-factor squared */
	point_t		start,stop;	/* starting and stopping points on arc */
	int		sol_num;	/* Solid number */
	fastf_t		q1,q2,q3;	/* terms for determining type of conic */
	int		ellipse;	/* flag to indicate eillipse */
	fastf_t		tmp;		/* scratch */
	point_t		center;		/* center of ellipse */
	fastf_t		theta;		/* angle that elipse is rotated */
	fastf_t		a1,c1,f1;	/* coefficients of translated and rotated ellipse */
	vect_t		r1,r2;		/* radii vectors for ellipse and TGC */

	/* Acquiring Data */

	if( dir[curve]->form > 1 )
	{
		bu_log( "Conic arc for extrusion is not closed:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	if( dir[curve]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[curve]->direct , dir[curve]->name );
		return(0);
	}
	Readrec( dir[curve]->param );
	Readint( &sol_num , "" );
	Readflt( &a , "" );
	Readflt( &b , "" );
	Readflt( &c , "" );
	Readflt( &d , "" );
	Readflt( &e , "" );
	Readflt( &f , "" );
	Readcnv( &start[Z] , "" );
	Readcnv( &start[X] , "" );
	Readcnv( &start[Y] , "" );
	Readcnv( &stop[X] , "" );
	Readcnv( &stop[Y] , "" );
	stop[Z] = start[Z];

	/* Convert coefficients to "mm" units */

	conv_sq = conv_factor*conv_factor;
	a = a/conv_sq;
	b = b/conv_sq;
	c = c/conv_sq;
	d = d/conv_factor;
	e = e/conv_factor;

	/* set "a" to 1.0 */

	tmp = fabs( a );
	if( fabs( b ) < tmp && b != 0.0 )
		tmp = fabs( b );
	if( fabs( c ) < tmp )
		tmp = fabs( c );
	a = a/tmp;
	b = b/tmp;
	c = c/tmp;
	d = d/tmp;
	e = e/tmp;
	f = f/tmp;

	/* Check for closure */

	if( start[X] != stop[X] || start[Y] != stop[Y] )
	{
		bu_log( "Conic arc for extrusion is not closed:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	/* Check type of conic */

	q2 = a*c - b*b/4.0;
	ellipse = 1;
	if( q2 <= 0.0 )
		ellipse = 0;
	else
	{
		q3 = a + c;
		q1 = a*(c*f - e*e/4.0) - 0.5*b*(b*f/2.0 + e*d/4.0) + 0.5*d*(b*e/4.0 - d*c/2.0);
		if( q1*q3 >= 0.0 )
			ellipse = 0;
	}

	if( !ellipse )
	{
		bu_log( "Conic arc for extrusion is not an elipse:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	/* Calculate center of ellipse */

	center[X] = (b*e/4.0 - d*c/2.0)/q2;
	center[Y] = (b*d/4.0 - a*e/2.0)/q2;
	center[Z] = start[Z];

	/* calculate rotation about z-axis */
	if( b == 0.0 )
		theta = 0.0;
	else
		theta = 0.5*atan2( b , a-c );

	/* calculate coefficients for same ellipse, but translated to
	   origin, and rotated to align with axes */

	a1 = a + 0.5*b*tan( theta );
	c1 = c - 0.5*b*tan( theta );
	f1 = f - a*center[X]*center[X] - b*center[X]*center[Y] - c*center[Y]*center[Y];

	/* Calculate radii vectors */

	tmp = sqrt( -f1/a1 );
	r1[X] = tmp*cos(theta);
	r1[Y] = tmp*sin(theta);
	r1[Z] = 0.0;

	tmp = sqrt( -f1/c1 );
	r2[X] = tmp*(-sin(theta));
	r2[Y] = tmp*cos(theta);
	r2[Z] = 0.0;

	/* Construct solid */
	mk_tgc( fdout , dir[entityno]->name , center , evect , r1 , r2 , r1 , r2 );

	return( 1 );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


