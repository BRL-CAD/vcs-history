head	1.5;
access;
symbols
	rel-7-10-4:1.5
	STABLE:1.5.0.2
	rel-7-10-2:1.5
	rel-7-10-0:1.5
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.5
date	2007.01.27.21.43.00;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.47;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.44.49;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.44.49;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the tolerance parameter from nmg_invert_shell.  it's not used, contrary to the commented purpose, and just complicates the interface unnecessarily so remove it.
@
text
@/*                          B R E P . C
 * BRL-CAD
 *
 * Copyright (c) 1994-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file brep.c
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/iges/brep.c,v 1.4 2007/01/23 01:13:25 brlcad Exp $ (ARL)";
#endif

#include "./iges_struct.h"
#include "./iges_extern.h"

int
brep( entityno )
int entityno;
{

	int		sol_num;		/* IGES solid type number */
	int		shell_de;		/* Directory sequence number for a shell */
	int		orient;			/* Orientation of shell */
	int		*void_shell_de;		/* Directory sequence number for an void shell */
	int		*void_orient;		/* Orientation of void shell */
	int		num_of_voids;		/* Number of inner void shells */
	struct model	*m;			/* NMG model */
	struct nmgregion *r;			/* NMG region */
	struct shell	**void_shells;		/* List of void shells */
	struct shell	*s_outer;		/* Outer shell */
	struct iges_vertex_list *v_list;
	struct iges_edge_list	*e_list;
	int		i;

	/* Acquiring Data */

	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return(0);
	}

	Readrec( dir[entityno]->param );
	Readint( &sol_num , "" );
	Readint( &shell_de , "" );
	Readint( &orient , "" );
	Readint( &num_of_voids , "" );

	if( num_of_voids )
	{
		void_shell_de = (int *)bu_calloc( num_of_voids , sizeof( int ) , "BREP: void shell DE's" );
		void_orient = (int *)bu_calloc( num_of_voids , sizeof( int ) , "BREP: void shell orients" );
		void_shells = (struct shell **)bu_calloc( num_of_voids , sizeof( struct shell *) , "BREP: void shell pointers" );
		for( i=0 ; i<num_of_voids ; i++ )
		{
			Readint( &void_shell_de[i] , "" );
			Readint( &void_orient[i] , "" );
		}
	}
	else {
		void_shell_de = NULL;
		void_orient = NULL;
		void_shells = NULL;
	}

	/* start building */
	m = nmg_mmr();
	r = BU_LIST_FIRST( nmgregion, &m->r_hd );

	/* Put outer shell in region */
	if( (s_outer=Get_outer_shell( r , (shell_de - 1)/2 , orient )) == (struct shell *)NULL )
		goto err;

	/* Put voids in */
	for( i=0 ; i<num_of_voids ; i++ )
	{
		if( (void_shells[i]=Add_inner_shell( r, (void_shell_de[i] - 1)/2, void_orient[i] ))
			== (struct shell *)NULL )
				goto err;
	}

	/* orient loops */
	Orient_loops( r );

	/* orient shells */
	nmg_fix_normals( s_outer , &tol );
	for( i=0 ; i<num_of_voids ; i++ )
	{
		nmg_fix_normals( void_shells[i] , &tol );
		nmg_invert_shell( void_shells[i] );
	}

	if( do_bots )
	{
		/* Merge all shells into one */
		for( i=0 ; i<num_of_voids ; i++ )
			nmg_js( s_outer, void_shells[i], &tol );

		/* write out BOT */
		if( mk_bot_from_nmg( fdout, dir[entityno]->name, s_outer ) )
			goto err;
	}
	else
	{
		/* Compute "geometry" for region and shell */
		nmg_region_a( r , &tol );

		/* Write NMG solid */
		if( mk_nmg( fdout , dir[entityno]->name , m ) )
			goto err;
	}

	if( num_of_voids )
	{
		bu_free( (char *)void_shell_de , "BREP: void shell DE's" );
		bu_free( (char *)void_orient , "BREP: void shell orients" );
		bu_free( (char *)void_shells , "brep: void shell list" );
	}

	v_list = vertex_root;
	while( v_list != NULL )
	{
		bu_free( (char *)v_list->i_verts , "brep: iges_vertex" );
		bu_free( (char *)v_list , "brep: vertex list" );
		v_list = v_list->next;
	}
	vertex_root = NULL;

	e_list = edge_root;
	while( e_list != NULL )
	{
		bu_free( (char *)e_list->i_edge , "brep:iges_edge" );
		bu_free( (char *)e_list , "brep: edge list" );
		e_list = e_list->next;
	}
	edge_root = NULL;
	return( 1 );

 err :
	if( num_of_voids )
	{
		bu_free( (char *)void_shell_de , "BREP: void shell DE's" );
		bu_free( (char *)void_orient , "BREP: void shell orients" );
		bu_free( (char *)void_shells , "brep: void shell list" );
	}
	nmg_km( m );
	return( 0 );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/iges/brep.c,v 1.3 2007/01/20 14:36:47 brlcad Exp $ (ARL)";
d110 1
a110 1
		nmg_invert_shell( void_shells[i] , &tol );
@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/iges/brep.c,v 1.2 2006/01/18 06:46:14 brlcad Exp $ (ARL)";
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2006 United States Government as represented by
d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/iges/brep.c,v 1.1 2005/10/27 03:44:49 brlcad Exp $ (ARL)";
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1994-2005 United States Government as represented by
d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/iges/brep.c,v 14.7 2005/10/23 04:44:31 brlcad Exp $ (ARL)";
@


1.1.2.1
log
@file brep.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 179
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 179
/*                          B R E P . C
 * BRL-CAD
 *
 * Copyright (C) 1994-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file brep.c
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header$ (ARL)";
#endif

#include "./iges_struct.h"
#include "./iges_extern.h"

int
brep( entityno )
int entityno;
{

	int		sol_num;		/* IGES solid type number */
	int		shell_de;		/* Directory sequence number for a shell */
	int		orient;			/* Orientation of shell */
	int		*void_shell_de;		/* Directory sequence number for an void shell */
	int		*void_orient;		/* Orientation of void shell */
	int		num_of_voids;		/* Number of inner void shells */
	struct model	*m;			/* NMG model */
	struct nmgregion *r;			/* NMG region */
	struct shell	**void_shells;		/* List of void shells */
	struct shell	*s_outer;		/* Outer shell */
	struct iges_vertex_list *v_list;
	struct iges_edge_list	*e_list;
	int		i;

	/* Acquiring Data */

	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return(0);
	}

	Readrec( dir[entityno]->param );
	Readint( &sol_num , "" );
	Readint( &shell_de , "" );
	Readint( &orient , "" );
	Readint( &num_of_voids , "" );

	if( num_of_voids )
	{
		void_shell_de = (int *)bu_calloc( num_of_voids , sizeof( int ) , "BREP: void shell DE's" );
		void_orient = (int *)bu_calloc( num_of_voids , sizeof( int ) , "BREP: void shell orients" );
		void_shells = (struct shell **)bu_calloc( num_of_voids , sizeof( struct shell *) , "BREP: void shell pointers" );
		for( i=0 ; i<num_of_voids ; i++ )
		{
			Readint( &void_shell_de[i] , "" );
			Readint( &void_orient[i] , "" );
		}
	}
	else {
		void_shell_de = NULL;
		void_orient = NULL;
		void_shells = NULL;
	}

	/* start building */
	m = nmg_mmr();
	r = BU_LIST_FIRST( nmgregion, &m->r_hd );

	/* Put outer shell in region */
	if( (s_outer=Get_outer_shell( r , (shell_de - 1)/2 , orient )) == (struct shell *)NULL )
		goto err;

	/* Put voids in */
	for( i=0 ; i<num_of_voids ; i++ )
	{
		if( (void_shells[i]=Add_inner_shell( r, (void_shell_de[i] - 1)/2, void_orient[i] ))
			== (struct shell *)NULL )
				goto err;
	}

	/* orient loops */
	Orient_loops( r );

	/* orient shells */
	nmg_fix_normals( s_outer , &tol );
	for( i=0 ; i<num_of_voids ; i++ )
	{
		nmg_fix_normals( void_shells[i] , &tol );
		nmg_invert_shell( void_shells[i] , &tol );
	}

	if( do_bots )
	{
		/* Merge all shells into one */
		for( i=0 ; i<num_of_voids ; i++ )
			nmg_js( s_outer, void_shells[i], &tol );

		/* write out BOT */
		if( mk_bot_from_nmg( fdout, dir[entityno]->name, s_outer ) )
			goto err;
	}
	else
	{
		/* Compute "geometry" for region and shell */
		nmg_region_a( r , &tol );

		/* Write NMG solid */
		if( mk_nmg( fdout , dir[entityno]->name , m ) )
			goto err;
	}

	if( num_of_voids )
	{
		bu_free( (char *)void_shell_de , "BREP: void shell DE's" );
		bu_free( (char *)void_orient , "BREP: void shell orients" );
		bu_free( (char *)void_shells , "brep: void shell list" );
	}

	v_list = vertex_root;
	while( v_list != NULL )
	{
		bu_free( (char *)v_list->i_verts , "brep: iges_vertex" );
		bu_free( (char *)v_list , "brep: vertex list" );
		v_list = v_list->next;
	}
	vertex_root = NULL;

	e_list = edge_root;
	while( e_list != NULL )
	{
		bu_free( (char *)e_list->i_edge , "brep:iges_edge" );
		bu_free( (char *)e_list , "brep: edge list" );
		e_list = e_list->next;
	}
	edge_root = NULL;
	return( 1 );

 err :
	if( num_of_voids )
	{
		bu_free( (char *)void_shell_de , "BREP: void shell DE's" );
		bu_free( (char *)void_orient , "BREP: void shell orients" );
		bu_free( (char *)void_shells , "brep: void shell list" );
	}
	nmg_km( m );
	return( 0 );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


