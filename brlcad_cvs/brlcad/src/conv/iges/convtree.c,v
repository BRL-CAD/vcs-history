head	1.7;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.7
date	2007.12.31.20.25.13;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.21.20.38.21;	author erikgreenwald;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.21.19.05.59;	author erikgreenwald;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.47;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.44.49;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.44.49;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.7
log
@header cleanup, more address removal
@
text
@/*                      C O N V T R E E . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file convtree.c
 *
 * This routine controls the conversion of IGES boolean trees
 * to BRL-CAD objects.
 *
 * Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 */

#include "./iges_struct.h"
#include "./iges_extern.h"

void
Convtree()
{

	int			conv=0;
	int			tottrees=0;
	union tree		*ptr;
	union tree		*Readtree(),*Copytree();
	struct rt_comb_internal	*comb;
	int			no_of_assoc=0;
	int			no_of_props=0;
	int			att_de=0;
	struct brlcad_att	brl_att;
	int			i,j,k;

	if( bu_debug & BU_DEBUG_MEM_CHECK )
		bu_log( "Doing memory checking in Convtree()\n" );
	MEMCHECK

	bu_log( "\nConverting boolean tree entities:\n" );

	for( i=0 ; i<totentities ; i++ ) /* loop through all entities */
	{
		if( dir[i]->type != 180 )	/* This is not a tree */
			continue;

		att_de = 0;			/* For default if there is no attribute entity */

		tottrees++;

		if( dir[i]->param <= pstart )	/* Illegal parameter address */
		{
			bu_log( "Entity number %d (Boolean Tree) does not have a legal parameter pointer\n" , i );
			continue;
		}

		Readrec( dir[i]->param ); /* read first record into buffer */

		MEMCHECK

		ptr = Readtree( dir[i]->rot ); /* construct the tree */

		MEMCHECK

		if( !ptr )	/* failure */
		{
			bu_log( "\tFailed to convert Boolean tree at D%07d\n", dir[i]->direct );
			continue;
		}

		/* skip over the associativities */
		Readint( &no_of_assoc , "" );
		for( k=0 ; k<no_of_assoc ; k++ )
			Readint( &j , "" );

		/* get property entity DE's */
		Readint( &no_of_props , "" );
		for( k=0 ; k<no_of_props ; k++ )
		{
			Readint( &j , "" );
			if( dir[(j-1)/2]->type == 422 &&
				 dir[(j-1)/2]->referenced == brlcad_att_de )
			{
				/* this is one of our attribute instances */
				att_de = j;
			}
		}

		Read_att( att_de , &brl_att );
		/* Read_att will supply defaults if att_de is 0 */
		if( att_de == 0 )
			brl_att.region_flag = 1;

		BU_GETSTRUCT( comb, rt_comb_internal );
		comb->magic = RT_COMB_MAGIC;
		comb->tree = ptr;
		comb->is_fastgen = REGION_NON_FASTGEN;
		comb->temperature = 0;
		if( brl_att.region_flag )
		{
			comb->region_flag = 1;
			comb->region_id = brl_att.ident;
			comb->aircode = brl_att.air_code;
			comb->GIFTmater = brl_att.material_code;
			comb->los = brl_att.los_density;
		}
		if( dir[i]->colorp != 0 )
		{
			comb->rgb_valid = 1;
			comb->rgb[0] = dir[i]->rgb[0];
			comb->rgb[1] = dir[i]->rgb[1];
			comb->rgb[2] = dir[i]->rgb[2];
		}
		comb->inherit = brl_att.inherit;
		bu_vls_init( &comb->shader );
		if( brl_att.material_name )
		{
			bu_vls_strcpy( &comb->shader, brl_att.material_name );
			if( brl_att.material_params )
			{
				bu_vls_putc( &comb->shader, ' ' );
				bu_vls_strcat( &comb->shader, brl_att.material_params );
			}
		}
		bu_vls_init( &comb->material );

		MEMCHECK
		if( wdb_export( fdout, dir[i]->name, (genptr_t)comb, ID_COMBINATION, mk_conv2mm ) )
			bu_exit( 1, "mk_export_fwrite() failed for combination (%s)\n", dir[i]->name );

		conv++;

		MEMCHECK
	}

	bu_log( "Converted %d trees successfully out of %d total trees\n", conv , tottrees );
	MEMCHECK
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.6
log
@collapse bu_log();bu_exit(#,""); as much as possible
@
text
@d21 5
a25 1
 *  Authors -
a29 5
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
a31 3
/*	This routine controls the conversion of IGES boolean trees
	to BRL-CAD objects	*/

@


1.5
log
@exit->bu_exit where applicable
@
text
@d147 1
a147 4
		{
			bu_log( "mk_export_fwrite() failed for combination (%s)\n", dir[i]->name );
			bu_exit( 1, "" );
		}
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d149 1
a149 1
			exit( 1 );
@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
@


1.1.2.1
log
@file convtree.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 170
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 170
/*                      C O N V T R E E . C
 * BRL-CAD
 *
 * Copyright (C) 1990-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file convtree.c
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

/*	This routine controls the conversion of IGES boolean trees
	to BRL-CAD objects	*/

#include "./iges_struct.h"
#include "./iges_extern.h"

void
Convtree()
{

	int			conv=0;
	int			tottrees=0;
	union tree		*ptr;
	union tree		*Readtree(),*Copytree();
	struct rt_comb_internal	*comb;
	int			no_of_assoc=0;
	int			no_of_props=0;
	int			att_de=0;
	struct brlcad_att	brl_att;
	int			i,j,k;

	if( bu_debug & BU_DEBUG_MEM_CHECK )
		bu_log( "Doing memory checking in Convtree()\n" );
	MEMCHECK

	bu_log( "\nConverting boolean tree entities:\n" );

	for( i=0 ; i<totentities ; i++ ) /* loop through all entities */
	{
		if( dir[i]->type != 180 )	/* This is not a tree */
			continue;

		att_de = 0;			/* For default if there is no attribute entity */

		tottrees++;

		if( dir[i]->param <= pstart )	/* Illegal parameter address */
		{
			bu_log( "Entity number %d (Boolean Tree) does not have a legal parameter pointer\n" , i );
			continue;
		}

		Readrec( dir[i]->param ); /* read first record into buffer */

		MEMCHECK

		ptr = Readtree( dir[i]->rot ); /* construct the tree */

		MEMCHECK

		if( !ptr )	/* failure */
		{
			bu_log( "\tFailed to convert Boolean tree at D%07d\n", dir[i]->direct );
			continue;
		}

		/* skip over the associativities */
		Readint( &no_of_assoc , "" );
		for( k=0 ; k<no_of_assoc ; k++ )
			Readint( &j , "" );

		/* get property entity DE's */
		Readint( &no_of_props , "" );
		for( k=0 ; k<no_of_props ; k++ )
		{
			Readint( &j , "" );
			if( dir[(j-1)/2]->type == 422 &&
				 dir[(j-1)/2]->referenced == brlcad_att_de )
			{
				/* this is one of our attribute instances */
				att_de = j;
			}
		}

		Read_att( att_de , &brl_att );
		/* Read_att will supply defaults if att_de is 0 */
		if( att_de == 0 )
			brl_att.region_flag = 1;

		BU_GETSTRUCT( comb, rt_comb_internal );
		comb->magic = RT_COMB_MAGIC;
		comb->tree = ptr;
		comb->is_fastgen = REGION_NON_FASTGEN;
		comb->temperature = 0;
		if( brl_att.region_flag )
		{
			comb->region_flag = 1;
			comb->region_id = brl_att.ident;
			comb->aircode = brl_att.air_code;
			comb->GIFTmater = brl_att.material_code;
			comb->los = brl_att.los_density;
		}
		if( dir[i]->colorp != 0 )
		{
			comb->rgb_valid = 1;
			comb->rgb[0] = dir[i]->rgb[0];
			comb->rgb[1] = dir[i]->rgb[1];
			comb->rgb[2] = dir[i]->rgb[2];
		}
		comb->inherit = brl_att.inherit;
		bu_vls_init( &comb->shader );
		if( brl_att.material_name )
		{
			bu_vls_strcpy( &comb->shader, brl_att.material_name );
			if( brl_att.material_params )
			{
				bu_vls_putc( &comb->shader, ' ' );
				bu_vls_strcat( &comb->shader, brl_att.material_params );
			}
		}
		bu_vls_init( &comb->material );

		MEMCHECK
		if( wdb_export( fdout, dir[i]->name, (genptr_t)comb, ID_COMBINATION, mk_conv2mm ) )
		{
			bu_log( "mk_export_fwrite() failed for combination (%s)\n", dir[i]->name );
			exit( 1 );
		}

		conv++;

		MEMCHECK
	}

	bu_log( "Converted %d trees successfully out of %d total trees\n", conv , tottrees );
	MEMCHECK
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


