head	1.5;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.5
date	2007.12.31.20.25.14;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.26;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.47;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.44.49;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.44.49;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@header cleanup, more address removal
@
text
@/*                         W E D G E . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file wedge.c
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 */

#include "./iges_struct.h"
#include "./iges_extern.h"

int
wedge( entityno )
int entityno;
{
	fastf_t		xscale=0.0;
	fastf_t		yscale=0.0;
	fastf_t		zscale=0.0;
	fastf_t		txscale=0.0;		/* top xscale */
	fastf_t		x1, y1, z1;		/* first vertex components */
	fastf_t		x2, y2, z2;		/* xdir vector components */
	fastf_t		x3, y3, z3;		/* zdir vector components */
	vect_t		xdir;			/* a unit vector */
	vect_t		xvec;			/* vector along x-axis */
	vect_t		txvec;			/* vector along top x-axis */
	vect_t		ydir;			/* a unit vector */
	vect_t		yvec;			/* vector along y-axis */
	vect_t		zdir;			/* a unit vector */
	vect_t		zvec;			/* vector along z-axis */
	point_t		pts[9];			/* array of points */
	int		sol_num;		/* IGES solid type number */

	/* Default values */
	x1 = 0.0;
	y1 = 0.0;
	z1 = 0.0;
	x2 = 0.0;
	y2 = 1.0;
	z2 = 0.0;
	x3 = 0.0;
	y3 = 0.0;
	z3 = 1.0;


	/* Acquiring Data */
	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return(0);
	}
	Readrec( dir[entityno]->param );
	Readint( &sol_num , "" );
	Readcnv( &xscale , "" );
	Readcnv( &yscale , "" );
	Readcnv( &zscale , "" );
	Readcnv( &txscale , "" );
	Readcnv( &x1 , "" );
	Readcnv( &y1 , "" );
	Readcnv( &z1 , "" );
	Readcnv( &x2 , "" );
	Readcnv( &y2 , "" );
	Readcnv( &z2 , "" );
	Readcnv( &x3 , "" );
	Readcnv( &y3 , "" );
	Readcnv( &z3 , "" );

	if( xscale <= 0.0 || yscale <= 0.0 || zscale <= 0.0 )
	{
		bu_log( "Illegal parameters for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return(0);
	}

	/*
	 * Making the necessaries. First an id is made for the new entity.
	 * Then the vertices for the bottom and top faces are found.  Point
	 * is located in the lower left corner of the solid,and the vertices are
	 * counted in the counter-clockwise direction, bottom face first.
	 * Once all the vertices are identified, the points of these vertices are
	 * loaded into an array of points and handed off to mk_arb8().
	 * Make and unitize necessary vectors.
	 */

	VSET(xdir, x2, y2, z2);			/* Makes x-dir vector */
	VUNITIZE(xdir);
	VSET(zdir, x3, y3, z3);			/* Make z-dir vector */
	VUNITIZE(zdir);
	VCROSS(ydir, zdir, xdir);		/* Make y-dir vector */

	/* Scale all vectors */

	VSCALE(xvec, xdir, xscale);
	VSCALE(txvec, xdir, txscale);
	VSCALE(zvec, zdir, zscale);
	VSCALE(yvec, ydir, yscale);

	/* Make the bottom face. */

	VSET(pts[0], x1, y1, z1);		/* Yields first vertex */
	VADD2(pts[1], pts[0], xvec);		/* Finds second vertex */
	VADD2(pts[2], pts[1], yvec);		/* Finds third vertex  */
	VADD2(pts[3], pts[0], yvec);		/* Finds fourth vertex */

	/* Make the top face by extruding the bottom face vertices.
	 */

	VADD2(pts[4], pts[0], zvec);		/* Finds fifth vertex */
	VADD2(pts[5], pts[4], txvec);		/* Finds sixth vertex */
	VADD2(pts[6], pts[5], yvec);		/* Finds seventh vertex */
	VADD2(pts[7], pts[4], yvec);		/* Find eighth vertex */


	/* Now the information is handed off to mk_arb8(). */

	mk_arb8(fdout, dir[entityno]->name, &pts[0][X]);

	return( 1 );

}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a25 5
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
@


1.1.2.1
log
@file wedge.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 155
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 155
/*                         W E D G E . C
 * BRL-CAD
 *
 * Copyright (C) 1990-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file wedge.c
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

#include "./iges_struct.h"
#include "./iges_extern.h"

int
wedge( entityno )
int entityno;
{
	fastf_t		xscale=0.0;
	fastf_t		yscale=0.0;
	fastf_t		zscale=0.0;
	fastf_t		txscale=0.0;		/* top xscale */
	fastf_t		x1, y1, z1;		/* first vertex components */
	fastf_t		x2, y2, z2;		/* xdir vector components */
	fastf_t		x3, y3, z3;		/* zdir vector components */
	vect_t		xdir;			/* a unit vector */
	vect_t		xvec;			/* vector along x-axis */
	vect_t		txvec;			/* vector along top x-axis */
	vect_t		ydir;			/* a unit vector */
	vect_t		yvec;			/* vector along y-axis */
	vect_t		zdir;			/* a unit vector */
	vect_t		zvec;			/* vector along z-axis */
	point_t		pts[9];			/* array of points */
	int		sol_num;		/* IGES solid type number */

	/* Default values */
	x1 = 0.0;
	y1 = 0.0;
	z1 = 0.0;
	x2 = 0.0;
	y2 = 1.0;
	z2 = 0.0;
	x3 = 0.0;
	y3 = 0.0;
	z3 = 1.0;


	/* Acquiring Data */
	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return(0);
	}
	Readrec( dir[entityno]->param );
	Readint( &sol_num , "" );
	Readcnv( &xscale , "" );
	Readcnv( &yscale , "" );
	Readcnv( &zscale , "" );
	Readcnv( &txscale , "" );
	Readcnv( &x1 , "" );
	Readcnv( &y1 , "" );
	Readcnv( &z1 , "" );
	Readcnv( &x2 , "" );
	Readcnv( &y2 , "" );
	Readcnv( &z2 , "" );
	Readcnv( &x3 , "" );
	Readcnv( &y3 , "" );
	Readcnv( &z3 , "" );

	if( xscale <= 0.0 || yscale <= 0.0 || zscale <= 0.0 )
	{
		bu_log( "Illegal parameters for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return(0);
	}

	/*
	 * Making the necessaries. First an id is made for the new entity.
	 * Then the vertices for the bottom and top faces are found.  Point
	 * is located in the lower left corner of the solid,and the vertices are
	 * counted in the counter-clockwise direction, bottom face first.
	 * Once all the vertices are identified, the points of these vertices are
	 * loaded into an array of points and handed off to mk_arb8().
	 * Make and unitize necessary vectors.
	 */

	VSET(xdir, x2, y2, z2);			/* Makes x-dir vector */
	VUNITIZE(xdir);
	VSET(zdir, x3, y3, z3);			/* Make z-dir vector */
	VUNITIZE(zdir);
	VCROSS(ydir, zdir, xdir);		/* Make y-dir vector */

	/* Scale all vectors */

	VSCALE(xvec, xdir, xscale);
	VSCALE(txvec, xdir, txscale);
	VSCALE(zvec, zdir, zscale);
	VSCALE(yvec, ydir, yscale);

	/* Make the bottom face. */

	VSET(pts[0], x1, y1, z1);		/* Yields first vertex */
	VADD2(pts[1], pts[0], xvec);		/* Finds second vertex */
	VADD2(pts[2], pts[1], yvec);		/* Finds third vertex  */
	VADD2(pts[3], pts[0], yvec);		/* Finds fourth vertex */

	/* Make the top face by extruding the bottom face vertices.
	 */

	VADD2(pts[4], pts[0], zvec);		/* Finds fifth vertex */
	VADD2(pts[5], pts[4], txvec);		/* Finds sixth vertex */
	VADD2(pts[6], pts[5], yvec);		/* Finds seventh vertex */
	VADD2(pts[7], pts[4], yvec);		/* Find eighth vertex */


	/* Now the information is handed off to mk_arb8(). */

	mk_arb8(fdout, dir[entityno]->name, &pts[0][X]);

	return( 1 );

}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


