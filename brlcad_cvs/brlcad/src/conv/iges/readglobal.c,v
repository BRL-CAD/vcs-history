head	1.7;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.7
date	2007.12.31.20.25.14;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.21.20.38.22;	author erikgreenwald;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.21.19.05.59;	author erikgreenwald;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.23.01.13.26;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.47;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.14;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.03.44.49;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.27.03.44.49;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.00;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.7
log
@header cleanup, more address removal
@
text
@/*                    R E A D G L O B A L . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file readglobal.c
 *
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 */

/*	Read Global Section 	*/

#include "./iges_struct.h"
#include "./iges_extern.h"

/* Conversion Factors (to mm)	*/
fastf_t cnv[]={
/*	default,inch, mm, ? , feet,  miles  ,meters,kilometers,mils  ,microns,
		cm ,microinches	*/
	1.0,    25.4,1.0,1.0,304.8,1609344.0,1000.0, 1000000.0,0.0254,0.001,
		10.0,0.0000254	};

/* IGES Version */
#define NO_OF_VERSIONS	10
char *iges_version[NO_OF_VERSIONS]={
	" ",
	"1.0",
	"ANSI Y14.26M - 1981",
	"2.0",
	"3.0",
	"ANSI Y14.26M - 1987",
	"4.0",
	"ASME Y14.26M - 1989",
	"5.0",
	"5.1" };

void
Readglobal( file_count )
int file_count;
{

	int field=2,i;
	fastf_t a;
	char *name;


	/* Get End-of-field delimiter */
	if( card[counter] != ',' )
	{
		counter--;
		while( card[++counter] == ' ' );
		if( card[counter] != '1' || card[counter+1] != 'H' )
		{
			bu_log( "Error in new delimiter\n" );
			bu_log( "%s\n" , card );
			for( i=0 ; i<counter-1 ; i++ )
				bu_log( "%c", ' ' );
			bu_exit( 1, "^\n" );
		}
		counter++;
		eof = card[++counter];
		while( card[++counter] != eof );
	}
	else
		eof = ',';


	/* Get End-of-record delimiter */
	if( card[++counter] != eof )
	{
		counter--;
		while( card[++counter] == ' ' );
		if( card[counter] != '1' || card[counter+1] != 'H' )
			bu_exit( 1, "Error in new record delimiter\n" );
		counter++;
		eor = card[++counter];
		while( card[++counter] != eof );
	}
	else
		eor = ';';


	/* Read all the fields in the Global Section */
	counter++;
	while( field < 23 )
	{
	   if( card[counter-1] == eor )
	   {
		Readrec( ++currec );
		break;
	   }

	   switch( ++field )
		{
		case 3:		Readname( &name , "Product ID: ");
				if( !file_count )
				{
					if( name != NULL )
					{
						mk_id( fdout , name );
						bu_free( name, "Readglobal: name" );
					}
					else
						mk_id( fdout , "Un-named Product" );
				}
				break;
		case 4:		Readstrg( "File Name: " );
				break;
		case 5:		Readstrg( "System ID: " );
				break;
		case 6:		Readstrg( "Version: " );
				break;
		case 7:		Readint( &i , "Integer Bits: ");
				break;
		case 8:		Readint( &i , "Max Power of ten(single precision): " );
				break;
		case 9:		Readint( &i , "Max significant digits (single precision): " );
				break;
		case 10:	Readint( &i , "Max Power of ten(double precision): " );
				break;
		case 11:	Readint( &i , "Max significant digits (single precision): " );
				break;
		case 12:	Readstrg( "Product ID: ");
				break;
		case 13:	Readflt( &scale , "Scale: " );
				if( scale == 0.0 )
					scale = 1.0;
				inv_scale = 1.0/scale;
				break;
		case 14:	Readint( &units , "Units: " );
				if( units == 0 || units == 3 || units > 11 )
				{
					bu_log( "Unrecognized units, assuming 'mm'\n" );
					conv_factor = 1.0;
				}
				else
					conv_factor = cnv[units];
				/* make "conv_factor" account for both units and
					scale factor */
				conv_factor *= inv_scale;
				break;
		case 15:	Readstrg( "Units: " );
				break;
		case 16:	Readint( &i , "Line Weight Gradations: " );
				break;
		case 17:	Readflt( &a , "Line Width: " );
				break;
		case 18:	Readtime( "Exchange File Created On: " );
				break;
		case 19:	Readflt( &a , "Resolution: " );
				break;
		case 20:	Readflt( &a , "Maximum value: " );
				break;
		case 21:	Readstrg( "Author: " );
				break;
		case 22:	Readstrg( "Organization: " );
				break;
		case 23:	Readint( &i , "" );
				if( i<1 || i>=NO_OF_VERSIONS )
					bu_log( "Unrecognized IGES version\n" );
				else
					bu_log( "IGES version: %s\n" , iges_version[i] );
				break;
		case 24:	Readint( &i , "" );
				break;
		case 25:	Readtime( "Model Last Modified: " );
				break;
		}
	}
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.6
log
@collapse bu_log();bu_exit(#,""); as much as possible
@
text
@d21 1
a26 5
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
@


1.5
log
@exit->bu_exit where applicable
@
text
@d80 1
a80 2
			bu_log( "^\n" );
			bu_exit( 1, "" );
d96 1
a96 4
		{
			bu_log( "Error in new record delimiter\n" );
			bu_exit( 1, "" );
		}
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d81 1
a81 1
			exit( 1 );
d99 1
a99 1
			exit( 1 );
@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
@


1.1
log
@moved all the geometry converter directories from src/. to src/conv/.
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
@


1.1.2.1
log
@file readglobal.c was added on branch rel-7-6-branch on 2005-11-13 17:45:00 +0000
@
text
@d1 208
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 208
/*                    R E A D G L O B A L . C
 * BRL-CAD
 *
 * Copyright (C) 1990-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 */
/** @@file readglobal.c
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

/*	Read Global Section 	*/

#include "./iges_struct.h"
#include "./iges_extern.h"

/* Conversion Factors (to mm)	*/
fastf_t cnv[]={
/*	default,inch, mm, ? , feet,  miles  ,meters,kilometers,mils  ,microns,
		cm ,microinches	*/
	1.0,    25.4,1.0,1.0,304.8,1609344.0,1000.0, 1000000.0,0.0254,0.001,
		10.0,0.0000254	};

/* IGES Version */
#define NO_OF_VERSIONS	10
char *iges_version[NO_OF_VERSIONS]={
	" ",
	"1.0",
	"ANSI Y14.26M - 1981",
	"2.0",
	"3.0",
	"ANSI Y14.26M - 1987",
	"4.0",
	"ASME Y14.26M - 1989",
	"5.0",
	"5.1" };

void
Readglobal( file_count )
int file_count;
{

	int field=2,i;
	fastf_t a;
	char *name;


	/* Get End-of-field delimiter */
	if( card[counter] != ',' )
	{
		counter--;
		while( card[++counter] == ' ' );
		if( card[counter] != '1' || card[counter+1] != 'H' )
		{
			bu_log( "Error in new delimiter\n" );
			bu_log( "%s\n" , card );
			for( i=0 ; i<counter-1 ; i++ )
				bu_log( "%c", ' ' );
			bu_log( "^\n" );
			exit( 1 );
		}
		counter++;
		eof = card[++counter];
		while( card[++counter] != eof );
	}
	else
		eof = ',';


	/* Get End-of-record delimiter */
	if( card[++counter] != eof )
	{
		counter--;
		while( card[++counter] == ' ' );
		if( card[counter] != '1' || card[counter+1] != 'H' )
		{
			bu_log( "Error in new record delimiter\n" );
			exit( 1 );
		}
		counter++;
		eor = card[++counter];
		while( card[++counter] != eof );
	}
	else
		eor = ';';


	/* Read all the fields in the Global Section */
	counter++;
	while( field < 23 )
	{
	   if( card[counter-1] == eor )
	   {
		Readrec( ++currec );
		break;
	   }

	   switch( ++field )
		{
		case 3:		Readname( &name , "Product ID: ");
				if( !file_count )
				{
					if( name != NULL )
					{
						mk_id( fdout , name );
						bu_free( name, "Readglobal: name" );
					}
					else
						mk_id( fdout , "Un-named Product" );
				}
				break;
		case 4:		Readstrg( "File Name: " );
				break;
		case 5:		Readstrg( "System ID: " );
				break;
		case 6:		Readstrg( "Version: " );
				break;
		case 7:		Readint( &i , "Integer Bits: ");
				break;
		case 8:		Readint( &i , "Max Power of ten(single precision): " );
				break;
		case 9:		Readint( &i , "Max significant digits (single precision): " );
				break;
		case 10:	Readint( &i , "Max Power of ten(double precision): " );
				break;
		case 11:	Readint( &i , "Max significant digits (single precision): " );
				break;
		case 12:	Readstrg( "Product ID: ");
				break;
		case 13:	Readflt( &scale , "Scale: " );
				if( scale == 0.0 )
					scale = 1.0;
				inv_scale = 1.0/scale;
				break;
		case 14:	Readint( &units , "Units: " );
				if( units == 0 || units == 3 || units > 11 )
				{
					bu_log( "Unrecognized units, assuming 'mm'\n" );
					conv_factor = 1.0;
				}
				else
					conv_factor = cnv[units];
				/* make "conv_factor" account for both units and
					scale factor */
				conv_factor *= inv_scale;
				break;
		case 15:	Readstrg( "Units: " );
				break;
		case 16:	Readint( &i , "Line Weight Gradations: " );
				break;
		case 17:	Readflt( &a , "Line Width: " );
				break;
		case 18:	Readtime( "Exchange File Created On: " );
				break;
		case 19:	Readflt( &a , "Resolution: " );
				break;
		case 20:	Readflt( &a , "Maximum value: " );
				break;
		case 21:	Readstrg( "Author: " );
				break;
		case 22:	Readstrg( "Organization: " );
				break;
		case 23:	Readint( &i , "" );
				if( i<1 || i>=NO_OF_VERSIONS )
					bu_log( "Unrecognized IGES version\n" );
				else
					bu_log( "IGES version: %s\n" , iges_version[i] );
				break;
		case 24:	Readint( &i , "" );
				break;
		case 25:	Readtime( "Model Last Modified: " );
				break;
		}
	}
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


