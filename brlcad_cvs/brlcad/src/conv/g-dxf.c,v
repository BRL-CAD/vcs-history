head	14.26;
access;
symbols
	rel-7-10-4:14.22
	STABLE:14.22.0.2
	stable-branch:14.7
	rel-7-10-2:14.22
	rel-7-10-0:14.19
	rel-7-8-4:14.15
	rel-7-8-2:14.15
	rel-7-8-0:14.15
	trimnurbs-branch:14.15.0.2
	help:14.15
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.2
	rel-7-6-0:14.8
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.26
date	2007.10.22.17.42.34;	author brlcad;	state Exp;
branches;
next	14.25;

14.25
date	2007.10.22.08.47.38;	author brlcad;	state Exp;
branches;
next	14.24;

14.24
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.09.14.15.21.03;	author erikgreenwald;	state Exp;
branches;
next	14.22;

14.22
date	2007.05.25.03.18.20;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.05.18.04.13.43;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.04.29.01.30.54;	author johnranderson;	state Exp;
branches;
next	14.19;

14.19
date	2007.04.05.04.08.31;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2006.02.27.05.04.55;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.02.25.05.32.12;	author johnranderson;	state Exp;
branches;
next	14.13;

14.13
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.21.21.09.44;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.09.09.05.50.29;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.08.28.00.33.33;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2005.01.30.20.30.19;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.44.32;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.09;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.14.49.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.08;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.51;	author morrison;	state Exp;
branches;
next	;

14.8.2.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.26
log
@whoosh, another 10% complete on the bu_bomb to bu_exit conversion review.  also includes a slew of custom exit() calls that can use bu_exit() as well as toning down a slew of overzealous exclamation point use.  (20% complete overall)
@
text
@/*                         G - D X F . C
 * BRL-CAD
 *
 * Copyright (c) 2003-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file g-dxf.c
 *
 *  Program to convert a BRL-CAD model (in a .g file) to a DXF file
 *  by calling on the NMG booleans.  Based on g-acad.c.
 *
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.25 2007/10/22 08:47:38 brlcad Exp $ (BRL)";
#endif

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <string.h>
#if defined(HAVE_UNISTD_H)
#  include <unistd.h>
#else
#  if defined(HAVE_SYS_UNISTD_H)
#    include <sys/unistd.h>
#  endif
#endif

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "brlcad_version.h"

/* local headers */
#include "../librt/debug.h"


#define V3ARGSIN(a)       (a)[X]/25.4, (a)[Y]/25.4, (a)[Z]/25.4
#define VSETIN( a, b )	{\
    (a)[X] = (b)[X]/25.4; \
    (a)[Y] = (b)[Y]/25.4; \
    (a)[Z] = (b)[Z]/25.4; \
}

BU_EXTERN(union tree *do_region_end, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data));
BU_EXTERN(union tree *get_layer, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data));


extern double nmg_eue_dist;		/* from nmg_plot.c */

static char	usage[] = "\
Usage: %s [-v] [-i] [-p] [-xX lvl] \n\
       [-a abs_tess_tol] [-r rel_tess_tol] [-n norm_tess_tol] [-D dist_calc_tol] \n\
       [-o output_file_name.dxf] brlcad_db.g object(s)\n\
\n\
Options:\n\
 -v	Verbose output\n\
 -i	Output using inches (instead of default mm)\n\
 -p	Output POLYFACE MESH (instead of default 3DFACE) entities\n\
\n\
 -x #	Specifies an RT debug flag\n\
 -X #	Specifies an NMG debug flag\n\
\n\
 -a #	Specify an absolute tessellation tolerance (in mm)\n\
 -r #	Specify a relative tessellation tolerance (in mm)\n\
 -n #	Specify a surface normal tessellation tolerance (in degrees)\n\
 -D #	Specify a calculation distance tolerance (in mm)\n\
\n\
 -o dxf	Output to the specified dxf filename\n\
\n\
---\n\
%s\n\
";

static int	NMG_debug;	/* saved arg of -X, for longjmp handling */
static int	verbose;
static int	ncpu = 1;	/* Number of processors */
static int	polyface_mesh = 0;	/* flag for output type (default is 3DFACE) */
static char	*output_file = NULL;	/* output filename */
static FILE	*fp;		/* Output file pointer */
static struct db_i		*dbip;
static struct rt_tess_tol	ttol;	/* tesselation tolerance in mm */
static struct bn_tol		tol;	/* calculation tolerance */
static struct model		*the_model;

static struct db_tree_state	tree_state;	/* includes tol & model */

static int		regions_tried = 0;
static int		regions_converted = 0;
static int		regions_written = 0;
static int		inches = 0;
static unsigned int	tot_polygons = 0;


static unsigned char rgb[]={
    0, 0, 0,
    255, 0, 0,
    255, 255, 0,
    0, 255, 0,
    0, 255, 255,
    0, 0, 255,
    255, 0, 255,
    255, 255, 255,
    65, 65, 65,
    128, 128, 128,
    255, 0, 0,
    255, 128, 128,
    166, 0, 0,
    166, 83, 83,
    128, 0, 0,
    128, 64, 64,
    77, 0, 0,
    77, 38, 38,
    38, 0, 0,
    38, 19, 19,
    255, 64, 0,
    255, 159, 128,
    166, 41, 0,
    166, 104, 83,
    128, 32, 0,
    128, 80, 64,
    77, 19, 0,
    77, 48, 38,
    38, 10, 0,
    38, 24, 19,
    255, 128, 0,
    255, 191, 128,
    166, 83, 0,
    166, 124, 83,
    128, 64, 0,
    128, 96, 64,
    77, 38, 0,
    77, 57, 38,
    38, 19, 0,
    38, 29, 19,
    255, 191, 0,
    255, 223, 128,
    166, 124, 0,
    166, 145, 83,
    128, 96, 0,
    128, 112, 64,
    77, 57, 0,
    77, 67, 38,
    38, 29, 0,
    38, 33, 19,
    255, 255, 0,
    255, 255, 128,
    166, 166, 0,
    166, 166, 83,
    128, 128, 0,
    128, 128, 64,
    77, 77, 0,
    77, 77, 38,
    38, 38, 0,
    38, 38, 19,
    191, 255, 0,
    223, 255, 128,
    124, 166, 0,
    145, 166, 83,
    96, 128, 0,
    112, 128, 64,
    57, 77, 0,
    67, 77, 38,
    29, 38, 0,
    33, 38, 19,
    128, 255, 0,
    191, 255, 128,
    83, 166, 0,
    124, 166, 83,
    64, 128, 0,
    96, 128, 64,
    38, 77, 0,
    57, 77, 38,
    19, 38, 0,
    29, 38, 19,
    64, 255, 0,
    159, 255, 128,
    41, 166, 0,
    104, 166, 83,
    32, 128, 0,
    80, 128, 64,
    19, 77, 0,
    48, 77, 38,
    10, 38, 0,
    24, 38, 19,
    0, 255, 0,
    128, 255, 128,
    0, 166, 0,
    83, 166, 83,
    0, 128, 0,
    64, 128, 64,
    0, 77, 0,
    38, 77, 38,
    0, 38, 0,
    19, 38, 19,
    0, 255, 64,
    128, 255, 159,
    0, 166, 41,
    83, 166, 104,
    0, 128, 32,
    64, 128, 80,
    0, 77, 19,
    38, 77, 48,
    0, 38, 10,
    19, 38, 24,
    0, 255, 128,
    128, 255, 191,
    0, 166, 83,
    83, 166, 124,
    0, 128, 64,
    64, 128, 96,
    0, 77, 38,
    38, 77, 57,
    0, 38, 19,
    19, 38, 29,
    0, 255, 191,
    128, 255, 223,
    0, 166, 124,
    83, 166, 145,
    0, 128, 96,
    64, 128, 112,
    0, 77, 57,
    38, 77, 67,
    0, 38, 29,
    19, 38, 33,
    0, 255, 255,
    128, 255, 255,
    0, 166, 166,
    83, 166, 166,
    0, 128, 128,
    64, 128, 128,
    0, 77, 77,
    38, 77, 77,
    0, 38, 38,
    19, 38, 38,
    0, 191, 255,
    128, 223, 255,
    0, 124, 166,
    83, 145, 166,
    0, 96, 128,
    64, 112, 128,
    0, 57, 77,
    38, 67, 77,
    0, 29, 38,
    19, 33, 38,
    0, 128, 255,
    128, 191, 255,
    0, 83, 166,
    83, 124, 166,
    0, 64, 128,
    64, 96, 128,
    0, 38, 77,
    38, 57, 77,
    0, 19, 38,
    19, 29, 38,
    0, 64, 255,
    128, 159, 255,
    0, 41, 166,
    83, 104, 166,
    0, 32, 128,
    64, 80, 128,
    0, 19, 77,
    38, 48, 77,
    0, 10, 38,
    19, 24, 38,
    0, 0, 255,
    128, 128, 255,
    0, 0, 166,
    83, 83, 166,
    0, 0, 128,
    64, 64, 128,
    0, 0, 77,
    38, 38, 77,
    0, 0, 38,
    19, 19, 38,
    64, 0, 255,
    159, 128, 255,
    41, 0, 166,
    104, 83, 166,
    32, 0, 128,
    80, 64, 128,
    19, 0, 77,
    48, 38, 77,
    10, 0, 38,
    24, 19, 38,
    128, 0, 255,
    191, 128, 255,
    83, 0, 166,
    124, 83, 166,
    64, 0, 128,
    96, 64, 128,
    38, 0, 77,
    57, 38, 77,
    19, 0, 38,
    29, 19, 38,
    191, 0, 255,
    223, 128, 255,
    124, 0, 166,
    145, 83, 166,
    96, 0, 128,
    112, 64, 128,
    57, 0, 77,
    67, 38, 77,
    29, 0, 38,
    33, 19, 38,
    255, 0, 255,
    255, 128, 255,
    166, 0, 166,
    166, 83, 166,
    128, 0, 128,
    128, 64, 128,
    77, 0, 77,
    77, 38, 77,
    38, 0, 38,
    38, 19, 38,
    255, 0, 191,
    255, 128, 223,
    166, 0, 124,
    166, 83, 145,
    128, 0, 96,
    128, 64, 112,
    77, 0, 57,
    77, 38, 67,
    38, 0, 29,
    38, 19, 33,
    255, 0, 128,
    255, 128, 191,
    166, 0, 83,
    166, 83, 124,
    128, 0, 64,
    128, 64, 96,
    77, 0, 38,
    77, 38, 57,
    38, 0, 19,
    38, 19, 29,
    255, 0, 64,
    255, 128, 159,
    166, 0, 41,
    166, 83, 104,
    128, 0, 32,
    128, 64, 80,
    77, 0, 19,
    77, 38, 48,
    38, 0, 10,
    38, 19, 24,
    84, 84, 84,
    118, 118, 118,
    152, 152, 152,
    187, 187, 187,
    221, 221, 221,
    255, 255, 255 };

/*
 *			M A I N
 */
int
main(argc, argv)
     int	argc;
     char	*argv[];
{
    register int	c;
    double		percent;
    int		i;

    bu_setlinebuf( stderr );

#if MEMORY_LEAK_CHECKING
    rt_g.debug |= DEBUG_MEM_FULL;
#endif
    tree_state = rt_initial_tree_state;	/* struct copy */
    tree_state.ts_tol = &tol;
    tree_state.ts_ttol = &ttol;
    tree_state.ts_m = &the_model;

    /* Set up tesselation tolerance defaults */
    ttol.magic = RT_TESS_TOL_MAGIC;
    /* Defaults, updated by command line options. */
    ttol.abs = 0.0;
    ttol.rel = 0.01;
    ttol.norm = 0.0;

    /* Set up calculation tolerance defaults */
    /* XXX These need to be improved */
    tol.magic = BN_TOL_MAGIC;
    tol.dist = 0.005;
    tol.dist_sq = tol.dist * tol.dist;
    tol.perp = 1e-5;
    tol.para = 1 - tol.perp;

    /* init resources we might need */
    rt_init_resource( &rt_uniresource, 0, NULL );

    BU_LIST_INIT( &rt_g.rtg_vlfree );	/* for vlist macros */

    /* Get command line arguments. */
    while ((c = bu_getopt(argc, argv, "a:n:o:pr:vx:D:P:X:i")) != EOF) {
	switch (c) {
	    case 'a':		/* Absolute tolerance. */
		ttol.abs = atof(bu_optarg);
		ttol.rel = 0.0;
		break;
	    case 'n':		/* Surface normal tolerance. */
		ttol.norm = atof(bu_optarg);
		ttol.rel = 0.0;
		break;
	    case 'o':		/* Output file name. */
		output_file = bu_optarg;
		break;
	    case 'p':
		polyface_mesh = 1;
		break;
	    case 'r':		/* Relative tolerance. */
		ttol.rel = atof(bu_optarg);
		break;
	    case 'v':
		verbose++;
		break;
	    case 'P':
		ncpu = atoi( bu_optarg );
		rt_g.debug = 1;	/* XXX DEBUG_ALLRAYS -- to get core dumps */
		break;
	    case 'x':
		sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.debug );
		break;
	    case 'D':
		tol.dist = atof(bu_optarg);
		tol.dist_sq = tol.dist * tol.dist;
		rt_pr_tol( &tol );
		break;
	    case 'X':
		sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
		NMG_debug = rt_g.NMG_debug;
		break;
	    case 'i':
		inches = 1;
		break;
	    default:
		bu_exit(1, usage, argv[0], brlcad_ident("BRL-CAD to DXF Exporter"));
		break;
	}
    }

    if (bu_optind+1 >= argc) {
	bu_exit(1, usage, argv[0], brlcad_ident("BRL-CAD to DXF Exporter"));
    }

    if( !output_file  ) {
	fp = stdout;
    } else {
	/* Open output file */
	if( (fp=fopen( output_file, "w+" )) == NULL ) {
	    perror( argv[0] );
	    bu_exit(1, " Cannot open output file (%s) for writing\n", output_file);
	}
    }

    /* Open BRL-CAD database */
    argc -= bu_optind;
    argv += bu_optind;
    if ((dbip = db_open(argv[0], "r")) == DBI_NULL) {
	perror(argv[0]);
	bu_exit(1, "Unable to open geometry file (%s) for reading\n", argv[0]);
    }

    if( db_dirbuild( dbip ) ) {
	bu_exit(1, "db_dirbuild failed\n" );
    }

    BN_CK_TOL(tree_state.ts_tol);
    RT_CK_TESS_TOL(tree_state.ts_ttol);

    if( verbose ) {
	bu_log( "Model: %s\n", argv[0] );
	bu_log( "Objects:" );
	for( i=1 ; i<argc ; i++ )
	    bu_log( " %s", argv[i] );
	bu_log( "\nTesselation tolerances:\n\tabs = %g mm\n\trel = %g\n\tnorm = %g\n",
		tree_state.ts_ttol->abs, tree_state.ts_ttol->rel, tree_state.ts_ttol->norm );
	bu_log( "Calculational tolerances:\n\tdist = %g mm perp = %g\n",
		tree_state.ts_tol->dist, tree_state.ts_tol->perp );
    }

    /* output DXF header and start of TABLES section */
    fprintf( fp,
	     "0\nSECTION\n2\nHEADER\n999\n%s\n0\nENDSEC\n0\nSECTION\n2\nTABLES\n0\nTABLE\n2\nLAYER\n",
	     argv[bu_optind] );

    /* Walk indicated tree(s) just for layer names to put in TABLES section */
    (void) db_walk_tree(dbip, argc-1, (const char **)(argv+1),
			1,			/* ncpu */
			&tree_state,
			0,			/* take all regions */
			get_layer,
			NULL,
			(genptr_t)NULL);	/* in librt/nmg_bool.c */

    /* end of layers section, start of ENTOTIES SECTION */
    fprintf( fp, "0\nENDTAB\n0\nENDSEC\n0\nSECTION\n2\nENTITIES\n" );

    /* Walk indicated tree(s).  Each region will be output separately */
    tree_state = rt_initial_tree_state;	/* struct copy */
    tree_state.ts_tol = &tol;
    tree_state.ts_ttol = &ttol;
    /* make empty NMG model */
    the_model = nmg_mm();
    tree_state.ts_m = &the_model;
    (void) db_walk_tree(dbip, argc-1, (const char **)(argv+1),
			1,			/* ncpu */
			&tree_state,
			0,			/* take all regions */
			do_region_end,
			nmg_booltree_leaf_tess,
			(genptr_t)NULL);	/* in librt/nmg_bool.c */

    percent = 0;
    if(regions_tried>0){
	percent = ((double)regions_converted * 100) / regions_tried;
	if( verbose )
	    bu_log("Tried %d regions, %d converted to NMG's successfully.  %g%%\n",
		   regions_tried, regions_converted, percent);
    }
    percent = 0;

    if( regions_tried > 0 ){
	percent = ((double)regions_written * 100) / regions_tried;
	if( verbose )
	    bu_log( "                  %d triangulated successfully. %g%%\n",
		    regions_written, percent );
    }

    bu_log( "%ld triangles written\n", tot_polygons );

    fprintf( fp, "0\nENDSEC\n0\nEOF\n" );

    if( output_file ) {
	fclose(fp);
    }

    /* Release dynamic storage */
    nmg_km(the_model);
    rt_vlist_cleanup();
    db_close(dbip);

#if MEMORY_LEAK_CHECKING
    bu_prmem("After complete G-DXF conversion");
#endif

    return 0;
}

static int
find_closest_color( float color[3] )
{
    int icolor[3];
    int i;
    int dist_sq;
    int color_num;

    VSCALE( icolor, color, 255 );

    color_num = 0;
    dist_sq = MAGSQ( icolor );

    for( i=1 ; i<256 ; i++ ) {
	int tmp_dist;
	int diff[3];

	VSUB2( diff, icolor, &rgb[i*3] );
	tmp_dist = MAGSQ( diff );
	if( tmp_dist < dist_sq ) {
	    dist_sq = tmp_dist;
	    color_num = i;
	}
    }

    return color_num;
}

static void
nmg_to_dxf( r, pathp, region_id, color )
     struct nmgregion *r;
     struct db_full_path *pathp;
     int region_id;
     float color[3];
{
    struct model *m;
    struct shell *s;
    struct vertex *v;
    struct bu_ptbl verts;
    char *region_name;
    int region_polys=0;
    int tri_count=0;
    int color_num;
    int do_triangulate=0;

    NMG_CK_REGION( r );
    RT_CK_FULL_PATH(pathp);

    region_name = db_path_to_string( pathp );

    m = r->m_p;
    NMG_CK_MODEL( m );

    /* Count triangles */
    for( BU_LIST_FOR( s, shell, &r->s_hd ) ) {
	struct faceuse *fu;

	NMG_CK_SHELL( s );

	for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) ) {
	    struct loopuse *lu;
	    int vert_count=0;

	    NMG_CK_FACEUSE( fu );

	    if( fu->orientation != OT_SAME )
		continue;

	    for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) ) {
		struct edgeuse *eu;

		if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
		    continue;

		for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) ) {
		    vert_count++;
		}

		if( vert_count > 3 ) {
		    do_triangulate = 1;
		    goto triangulate;
		}

		tri_count++;
	    }
	}
    }

 triangulate:
    if( do_triangulate ) {
	/* triangulate model */
	nmg_triangulate_model( m, &tol );

	/* Count triangles */
	tri_count = 0;
	for( BU_LIST_FOR( s, shell, &r->s_hd ) ) {
	    struct faceuse *fu;

	    for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) ) {
		struct loopuse *lu;

		if( fu->orientation != OT_SAME )
		    continue;

		for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) ) {
		    if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
			continue;

		    tri_count++;
		}
	    }
	}
    }

    nmg_vertex_tabulate( &verts, &r->l.magic );

    color_num = find_closest_color( color );

    if( polyface_mesh ) {
	int i;


	fprintf( fp, "0\nPOLYLINE\n8\n%s\n62\n%d\n70\n64\n71\n%d\n72\n%d\n",
		 region_name, color_num, BU_PTBL_LEN( &verts), tri_count );
	for( i=0 ; i<BU_PTBL_LEN( &verts ) ; i++ ) {
	    fprintf( fp, "0\nVERTEX\n8\n%s\n", region_name );
	    v = (struct vertex *)BU_PTBL_GET( &verts, i );
	    NMG_CK_VERTEX( v );
	    if( inches ) {
		fprintf( fp, "10\n%f\n20\n%f\n30\n%f\n70\n192\n", V3ARGSIN( v->vg_p->coord ) );
	    } else {
		fprintf( fp, "10\n%f\n20\n%f\n30\n%f\n70\n192\n", V3ARGS( v->vg_p->coord ) );
	    }
	}
    }

    /* Check triangles */
    for( BU_LIST_FOR( s, shell, &r->s_hd ) ) {
	struct faceuse *fu;

	NMG_CK_SHELL( s );

	for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) ) {
	    struct loopuse *lu;

	    NMG_CK_FACEUSE( fu );

	    if( fu->orientation != OT_SAME )
		continue;

	    for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) ) {
		struct edgeuse *eu;
		int vert_count=0;

		NMG_CK_LOOPUSE( lu );

		if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
		    continue;

		if( polyface_mesh ) {
		    fprintf( fp, "0\nVERTEX\n8\n%s\n70\n128\n10\n0.0\n20\n0.0\n30\n0.0\n",
			     region_name );
		} else {
		    fprintf( fp, "0\n3DFACE\n8\n%s\n62\n%d\n", region_name, color_num );
		}

		/* check vertex numbers for each triangle */
		for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) ) {
		    NMG_CK_EDGEUSE( eu );

		    vert_count++;

		    v = eu->vu_p->v_p;
		    NMG_CK_VERTEX( v );

		    if( polyface_mesh ) {
			fprintf( fp, "%d\n%d\n",
				 vert_count+70, bu_ptbl_locate( &verts, (long *)v ) + 1 );
		    } else {
			if( inches ) {
			    fprintf( fp, "%d\n%f\n%d\n%f\n%d\n%f\n",
				     10 + vert_count - 1,
				     v->vg_p->coord[X] / 25.4,
				     20 + vert_count - 1,
				     v->vg_p->coord[Y] / 25.4,
				     30 + vert_count -1,
				     v->vg_p->coord[Z] / 25.4 );
			} else {
			    fprintf( fp, "%d\n%f\n%d\n%f\n%d\n%f\n",
				     10 + vert_count - 1,
				     v->vg_p->coord[X],
				     20 + vert_count - 1,
				     v->vg_p->coord[Y],
				     30 + vert_count -1,
				     v->vg_p->coord[Z] );
			}
		    }
		}
		if( vert_count > 3 ) {
		    bu_free( region_name, "region name" );
		    bu_log( "lu x%x has %d vertices!\n", lu, vert_count );
		    bu_exit(1, "ERROR: LU is not a triangle\n");
		} else if( vert_count < 3 ) {
		    continue;
		} else {
		    /* repeat the last vertex for the benefit of codes
		     * that interpret the dxf specification for
		     * 3DFACES as requiring a fourth vertex even when
		     * only three are input.
		     */
		    if( !polyface_mesh ) {
			vert_count++;
			if( inches ) {
			    fprintf( fp, "%d\n%f\n%d\n%f\n%d\n%f\n",
				     10 + vert_count - 1,
				     v->vg_p->coord[X] / 25.4,
				     20 + vert_count - 1,
				     v->vg_p->coord[Y] / 25.4,
				     30 + vert_count -1,
				     v->vg_p->coord[Z] / 25.4 );
			} else {
			    fprintf( fp, "%d\n%f\n%d\n%f\n%d\n%f\n",
				     10 + vert_count - 1,
				     v->vg_p->coord[X],
				     20 + vert_count - 1,
				     v->vg_p->coord[Y],
				     30 + vert_count -1,
				     v->vg_p->coord[Z] );
			}
		    }
		}

		tot_polygons++;
		region_polys++;
	    }
	}
    }

    bu_ptbl_free( &verts );
    bu_free( region_name, "region name" );

    if( polyface_mesh ) {
	fprintf( fp, "0\nSEQEND\n" );
    }

}

union tree *get_layer(tsp, pathp, curtree, client_data)
     register struct db_tree_state	*tsp;
     struct db_full_path	*pathp;
     union tree		*curtree;
     genptr_t		client_data;
{
    char *layer_name;
    int color_num;

    layer_name = db_path_to_string(pathp);
    color_num = find_closest_color( tsp->ts_mater.ma_color );

    fprintf( fp, "0\nLAYER\n2\n%s\n62\n%d\n", layer_name, color_num );

    bu_free( layer_name, "layer name" );

    return( (union tree *)NULL );
}

/*
 *			D O _ R E G I O N _ E N D
 *
 *  Called from db_walk_tree().
 *
 *  This routine must be prepared to run in parallel.
 */
union tree *do_region_end(tsp, pathp, curtree, client_data)
     register struct db_tree_state	*tsp;
     struct db_full_path	*pathp;
     union tree		*curtree;
     genptr_t		client_data;
{
    union tree		*ret_tree;
    struct bu_list		vhead;
    struct nmgregion	*r;

    RT_CK_FULL_PATH(pathp);
    RT_CK_TREE(curtree);
    RT_CK_TESS_TOL(tsp->ts_ttol);
    BN_CK_TOL(tsp->ts_tol);
    NMG_CK_MODEL(*tsp->ts_m);

    BU_LIST_INIT(&vhead);

    if (RT_G_DEBUG&DEBUG_TREEWALK || verbose) {
	char	*sofar = db_path_to_string(pathp);
	bu_log("\ndo_region_end(%d %d%%) %s\n",
	       regions_tried,
	       regions_tried>0 ? (regions_converted * 100) / regions_tried : 0,
	       sofar);
	bu_free(sofar, "path string");
    }

    if (curtree->tr_op == OP_NOP)
	return  curtree;

    regions_tried++;

    /* Begin bu_bomb() protection */
    if( ncpu == 1 ) {
	if( BU_SETJUMP )  {
	    /* Error, bail out */
	    char *sofar;
	    BU_UNSETJUMP;		/* Relinquish the protection */

	    sofar = db_path_to_string(pathp);
	    bu_log( "FAILED in Boolean evaluation: %s\n", sofar );
	    bu_free( (char *)sofar, "sofar" );

	    /* Sometimes the NMG library adds debugging bits when
	     * it detects an internal error, before bombing out.
	     */
	    rt_g.NMG_debug = NMG_debug;	/* restore mode */

	    /* Release any intersector 2d tables */
	    nmg_isect2d_final_cleanup();

	    /* Release the tree memory & input regions */
	    /*XXX*/			/* db_free_tree(curtree);*/		/* Does an nmg_kr() */

	    /* Get rid of (m)any other intermediate structures */
	    if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )  {
		nmg_km(*tsp->ts_m);
	    } else {
		bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
	    }

	    /* Now, make a new, clean model structure for next pass. */
	    *tsp->ts_m = nmg_mm();
	    goto out;
	}
    }
    if( verbose )
	bu_log("Attempting to process region %s\n",db_path_to_string( pathp ));

    ret_tree = nmg_booltree_evaluate( curtree, tsp->ts_tol, &rt_uniresource );	/* librt/nmg_bool.c */
    BU_UNSETJUMP;		/* Relinquish the protection */

    if( ret_tree ) {
	r = ret_tree->tr_d.td_r;
    } else {
	if( verbose ) {
	    bu_log( "\tNothing left of this region after Boolean evaluation\n" );
	}
	regions_written++; /* don't count as a failure */
	r = (struct nmgregion *)NULL;
    }
    /*	regions_done++;  XXX */

    regions_converted++;

    if (r != (struct nmgregion *)NULL) {
	struct shell *s;
	int empty_region=0;
	int empty_model=0;

	/* Kill cracks */
	s = BU_LIST_FIRST( shell, &r->s_hd );
	while( BU_LIST_NOT_HEAD( &s->l, &r->s_hd ) ) {
	    struct shell *next_s;

	    next_s = BU_LIST_PNEXT( shell, &s->l );
	    if( nmg_kill_cracks( s ) ) {
		if( nmg_ks( s ) ) {
		    empty_region = 1;
		    break;
		}
	    }
	    s = next_s;
	}

	/* kill zero length edgeuses */
	if( !empty_region ) {
	    empty_model = nmg_kill_zero_length_edgeuses( *tsp->ts_m );
	}

	if( !empty_region && !empty_model ) {
	    if( BU_SETJUMP ) {
		char *sofar;

		BU_UNSETJUMP;

		sofar = db_path_to_string(pathp);
		bu_log( "FAILED in triangulator: %s\n", sofar );
		bu_free( (char *)sofar, "sofar" );

		/* Sometimes the NMG library adds debugging bits when
		 * it detects an internal error, before bombing out.
		 */
		rt_g.NMG_debug = NMG_debug;	/* restore mode */

		/* Release any intersector 2d tables */
		nmg_isect2d_final_cleanup();

		/* Get rid of (m)any other intermediate structures */
		if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC ) {
		    nmg_km(*tsp->ts_m);
		} else {
		    bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
		}

		/* Now, make a new, clean model structure for next pass. */
		*tsp->ts_m = nmg_mm();
		goto out;
	    }
	    /* Write the region to the DXF file */
	    nmg_to_dxf( r, pathp, tsp->ts_regionid, tsp->ts_mater.ma_color );

	    regions_written++;

	    BU_UNSETJUMP;
	}

	if( !empty_model )
	    nmg_kr( r );
    }

 out:
    /*
     *  Dispose of original tree, so that all associated dynamic
     *  memory is released now, not at the end of all regions.
     *  A return of TREE_NULL from this routine signals an error,
     *  and there is no point to adding _another_ message to our output,
     *  so we need to cons up an OP_NOP node to return.
     */


    if(regions_tried>0){
	float npercent, tpercent;

	npercent = (float)(regions_converted * 100) / regions_tried;
	tpercent = (float)(regions_written * 100) / regions_tried;
	if( verbose )
	    bu_log("Tried %d regions, %d conv. to NMG's %d conv. to tri. nmgper = %.2f%% triper = %.2f%% \n",
		   regions_tried, regions_converted, regions_written, npercent,tpercent);
    }

    db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */

    BU_GETUNION(curtree, tree);
    curtree->magic = RT_TREE_MAGIC;
    curtree->tr_op = OP_NOP;
    return(curtree);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.25
log
@first 10% of the review of the bu_bomb() instances.  updating many to bu_exit() for the instances where the error or exit condition aren't catastrophic errors (i.e. they wouldn't benefit from having a stack trace of how we got into that state code-wise).  this also makes it easier to refactor usages of log & exit too to the new routine.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.24 2007/09/15 16:23:04 brlcad Exp $ (BRL)";
d883 1
@


14.24
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.23 2007/09/14 15:21:03 erikgreenwald Exp $ (BRL)";
d466 1
a466 2
		bu_log(usage, argv[0], brlcad_ident("BRL-CAD to DXF Exporter"));
		exit(1);
d472 1
a472 2
	bu_log(usage, argv[0], brlcad_ident("BRL-CAD to DXF Exporter"));
	exit(1);
a479 1
	    bu_log( "Cannot open output file (%s) for writing\n", output_file );
d481 1
a481 1
	    exit( 1 );
d490 1
a490 1
	exit(1);
d494 1
a494 2
	bu_log( "db_dirbuild failed\n" );
	exit(1);
d779 2
a780 2
		    bu_log( "lu x%x has %d vertices!!!!\n", lu, vert_count );
		    bu_bomb( "LU is not a triangle" );
d895 1
a895 1
	     * it detects an internal error, before bu_bomb().
d972 1
a972 1
		 * it detects an internal error, before bu_bomb().
@


14.23
log
@removed trailing whitespace
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.22 2007/05/25 03:18:20 brlcad Exp $ (BRL)";
d45 1
a45 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.22
log
@extensively improve the g-dxf usage statement, add options, add version info
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.21 2007/05/18 04:13:43 brlcad Exp $ (BRL)";
d498 1
a498 1
    } 
@


14.21
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.20 2007/04/29 01:30:54 johnranderson Exp $ (BRL)";
d64 1
d83 23
a105 1
static char	usage[] = "Usage: %s [-v][-i][-p][-xX lvl][-a abs_tess_tol][-r rel_tess_tol][-n norm_tess_tol]\n\n[-D dist_calc_tol] [-o output_file_name.dxf] brlcad_db.g object(s)\n";
d470 1
a470 1
		bu_log(  usage, argv[0]);
d477 1
a477 1
	bu_log( usage, argv[0]);
@


14.20
log
@Was ignoring return code from db_dirbuild(), allowing execution on currupt files.
Calls to db_dirbuild should always have the return code checked, There are many
instances where this is not done (mostly in the "conv" directory).
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.19 2007/04/05 04:08:31 brlcad Exp $ (BRL)";
d765 1
a765 1
		    rt_bomb( "LU is not a triangle" );
d868 1
a868 1
    /* Begin rt_bomb() protection */
d880 1
a880 1
	     * it detects an internal error, before rt_bomb().
d957 1
a957 1
		 * it detects an internal error, before rt_bomb().
@


14.19
log
@Shawn Baker identified a bug in g-dxf (which in turn was found in g-acad, g-nff, and g-obj too) where the -i argument ended up gobbling up the following argument incorrectly.  e.g g-dxf -i -o filename.dxf blah.g object would end up in a filename.dxf error.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.18 2007/02/02 08:48:28 brlcad Exp $ (BRL)";
d475 5
a480 1
    db_dirbuild( dbip );
@


14.18
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.17 2007/01/23 01:13:25 brlcad Exp $ (BRL)";
d405 1
a405 1
    while ((c = bu_getopt(argc, argv, "a:n:o:pr:vx:D:P:X:i:")) != EOF) {
@


14.17
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.16 2007/01/20 14:36:43 brlcad Exp $ (BRL)";
d405 1
a405 1
    while ((c = getopt(argc, argv, "a:n:o:pr:vx:D:P:X:i:")) != EOF) {
d408 1
a408 1
		ttol.abs = atof(optarg);
d412 1
a412 1
		ttol.norm = atof(optarg);
d416 1
a416 1
		output_file = optarg;
d422 1
a422 1
		ttol.rel = atof(optarg);
d428 1
a428 1
		ncpu = atoi( optarg );
d432 1
a432 1
		sscanf( optarg, "%x", (unsigned int *)&rt_g.debug );
d435 1
a435 1
		tol.dist = atof(optarg);
d440 1
a440 1
		sscanf( optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
d453 1
a453 1
    if (optind+1 >= argc) {
d470 2
a471 2
    argc -= optind;
    argv += optind;
d495 1
a495 1
	     argv[optind] );
@


14.16
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.15 2006/02/27 05:04:55 brlcad Exp $ (BRL)";
@


14.15
log
@add a comment about adding the fourth vertex for 3DFACES, massive ws cleanup/consistency
@
text
@d4 1
a4 1
 * Copyright (c) 2003-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.14 2006/02/25 05:32:12 johnranderson Exp $ (BRL)";
@


14.14
log
@now always outputs 4 vertices per 3DFACE
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.13 2006/01/28 00:36:27 brlcad Exp $ (BRL)";
d83 1
a83 3
static char	usage[] = "\
Usage: %s [-v][-i][-p][-xX lvl][-a abs_tess_tol][-r rel_tess_tol][-n norm_tess_tol]\n\
[-D dist_calc_tol] [-o output_file_name.dxf] brlcad_db.g object(s)\n";
d106 256
a361 256
	0, 0, 0,
	255, 0, 0,
	255, 255, 0,
	0, 255, 0,
	0, 255, 255,
	0, 0, 255,
	255, 0, 255,
	255, 255, 255,
	65, 65, 65,
	128, 128, 128,
	255, 0, 0,
	255, 128, 128,
	166, 0, 0,
	166, 83, 83,
	128, 0, 0,
	128, 64, 64,
	77, 0, 0,
	77, 38, 38,
	38, 0, 0,
	38, 19, 19,
	255, 64, 0,
	255, 159, 128,
	166, 41, 0,
	166, 104, 83,
	128, 32, 0,
	128, 80, 64,
	77, 19, 0,
	77, 48, 38,
	38, 10, 0,
	38, 24, 19,
	255, 128, 0,
	255, 191, 128,
	166, 83, 0,
	166, 124, 83,
	128, 64, 0,
	128, 96, 64,
	77, 38, 0,
	77, 57, 38,
	38, 19, 0,
	38, 29, 19,
	255, 191, 0,
	255, 223, 128,
	166, 124, 0,
	166, 145, 83,
	128, 96, 0,
	128, 112, 64,
	77, 57, 0,
	77, 67, 38,
	38, 29, 0,
	38, 33, 19,
	255, 255, 0,
	255, 255, 128,
	166, 166, 0,
	166, 166, 83,
	128, 128, 0,
	128, 128, 64,
	77, 77, 0,
	77, 77, 38,
	38, 38, 0,
	38, 38, 19,
	191, 255, 0,
	223, 255, 128,
	124, 166, 0,
	145, 166, 83,
	96, 128, 0,
	112, 128, 64,
	57, 77, 0,
	67, 77, 38,
	29, 38, 0,
	33, 38, 19,
	128, 255, 0,
	191, 255, 128,
	83, 166, 0,
	124, 166, 83,
	64, 128, 0,
	96, 128, 64,
	38, 77, 0,
	57, 77, 38,
	19, 38, 0,
	29, 38, 19,
	64, 255, 0,
	159, 255, 128,
	41, 166, 0,
	104, 166, 83,
	32, 128, 0,
	80, 128, 64,
	19, 77, 0,
	48, 77, 38,
	10, 38, 0,
	24, 38, 19,
	0, 255, 0,
	128, 255, 128,
	0, 166, 0,
	83, 166, 83,
	0, 128, 0,
	64, 128, 64,
	0, 77, 0,
	38, 77, 38,
	0, 38, 0,
	19, 38, 19,
	0, 255, 64,
	128, 255, 159,
	0, 166, 41,
	83, 166, 104,
	0, 128, 32,
	64, 128, 80,
	0, 77, 19,
	38, 77, 48,
	0, 38, 10,
	19, 38, 24,
	0, 255, 128,
	128, 255, 191,
	0, 166, 83,
	83, 166, 124,
	0, 128, 64,
	64, 128, 96,
	0, 77, 38,
	38, 77, 57,
	0, 38, 19,
	19, 38, 29,
	0, 255, 191,
	128, 255, 223,
	0, 166, 124,
	83, 166, 145,
	0, 128, 96,
	64, 128, 112,
	0, 77, 57,
	38, 77, 67,
	0, 38, 29,
	19, 38, 33,
	0, 255, 255,
	128, 255, 255,
	0, 166, 166,
	83, 166, 166,
	0, 128, 128,
	64, 128, 128,
	0, 77, 77,
	38, 77, 77,
	0, 38, 38,
	19, 38, 38,
	0, 191, 255,
	128, 223, 255,
	0, 124, 166,
	83, 145, 166,
	0, 96, 128,
	64, 112, 128,
	0, 57, 77,
	38, 67, 77,
	0, 29, 38,
	19, 33, 38,
	0, 128, 255,
	128, 191, 255,
	0, 83, 166,
	83, 124, 166,
	0, 64, 128,
	64, 96, 128,
	0, 38, 77,
	38, 57, 77,
	0, 19, 38,
	19, 29, 38,
	0, 64, 255,
	128, 159, 255,
	0, 41, 166,
	83, 104, 166,
	0, 32, 128,
	64, 80, 128,
	0, 19, 77,
	38, 48, 77,
	0, 10, 38,
	19, 24, 38,
	0, 0, 255,
	128, 128, 255,
	0, 0, 166,
	83, 83, 166,
	0, 0, 128,
	64, 64, 128,
	0, 0, 77,
	38, 38, 77,
	0, 0, 38,
	19, 19, 38,
	64, 0, 255,
	159, 128, 255,
	41, 0, 166,
	104, 83, 166,
	32, 0, 128,
	80, 64, 128,
	19, 0, 77,
	48, 38, 77,
	10, 0, 38,
	24, 19, 38,
	128, 0, 255,
	191, 128, 255,
	83, 0, 166,
	124, 83, 166,
	64, 0, 128,
	96, 64, 128,
	38, 0, 77,
	57, 38, 77,
	19, 0, 38,
	29, 19, 38,
	191, 0, 255,
	223, 128, 255,
	124, 0, 166,
	145, 83, 166,
	96, 0, 128,
	112, 64, 128,
	57, 0, 77,
	67, 38, 77,
	29, 0, 38,
	33, 19, 38,
	255, 0, 255,
	255, 128, 255,
	166, 0, 166,
	166, 83, 166,
	128, 0, 128,
	128, 64, 128,
	77, 0, 77,
	77, 38, 77,
	38, 0, 38,
	38, 19, 38,
	255, 0, 191,
	255, 128, 223,
	166, 0, 124,
	166, 83, 145,
	128, 0, 96,
	128, 64, 112,
	77, 0, 57,
	77, 38, 67,
	38, 0, 29,
	38, 19, 33,
	255, 0, 128,
	255, 128, 191,
	166, 0, 83,
	166, 83, 124,
	128, 0, 64,
	128, 64, 96,
	77, 0, 38,
	77, 38, 57,
	38, 0, 19,
	38, 19, 29,
	255, 0, 64,
	255, 128, 159,
	166, 0, 41,
	166, 83, 104,
	128, 0, 32,
	128, 64, 80,
	77, 0, 19,
	77, 38, 48,
	38, 0, 10,
	38, 19, 24,
	84, 84, 84,
	118, 118, 118,
	152, 152, 152,
	187, 187, 187,
	221, 221, 221,
	255, 255, 255 };
d368 2
a369 2
int	argc;
char	*argv[];
d371 3
a373 3
	register int	c;
	double		percent;
	int		i;
d375 1
a375 1
	bu_setlinebuf( stderr );
d378 1
a378 1
	rt_g.debug |= DEBUG_MEM_FULL;
d380 69
a448 76
	tree_state = rt_initial_tree_state;	/* struct copy */
	tree_state.ts_tol = &tol;
	tree_state.ts_ttol = &ttol;
	tree_state.ts_m = &the_model;

	/* Set up tesselation tolerance defaults */
	ttol.magic = RT_TESS_TOL_MAGIC;
	/* Defaults, updated by command line options. */
	ttol.abs = 0.0;
	ttol.rel = 0.01;
	ttol.norm = 0.0;

	/* Set up calculation tolerance defaults */
	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-5;
	tol.para = 1 - tol.perp;

	/* init resources we might need */
	rt_init_resource( &rt_uniresource, 0, NULL );

	BU_LIST_INIT( &rt_g.rtg_vlfree );	/* for vlist macros */

	/* Get command line arguments. */
	while ((c = getopt(argc, argv, "a:n:o:pr:vx:D:P:X:i:")) != EOF) {
		switch (c) {
		case 'a':		/* Absolute tolerance. */
			ttol.abs = atof(optarg);
			ttol.rel = 0.0;
			break;
		case 'n':		/* Surface normal tolerance. */
			ttol.norm = atof(optarg);
			ttol.rel = 0.0;
			break;
		case 'o':		/* Output file name. */
			output_file = optarg;
			break;
		case 'p':
			polyface_mesh = 1;
			break;
		case 'r':		/* Relative tolerance. */
			ttol.rel = atof(optarg);
			break;
		case 'v':
			verbose++;
			break;
		case 'P':
			ncpu = atoi( optarg );
			rt_g.debug = 1;	/* XXX DEBUG_ALLRAYS -- to get core dumps */
			break;
		case 'x':
			sscanf( optarg, "%x", (unsigned int *)&rt_g.debug );
			break;
		case 'D':
			tol.dist = atof(optarg);
			tol.dist_sq = tol.dist * tol.dist;
			rt_pr_tol( &tol );
			break;
		case 'X':
			sscanf( optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
			NMG_debug = rt_g.NMG_debug;
			break;
		case 'i':
			inches = 1;
			break;
		default:
			bu_log(  usage, argv[0]);
			exit(1);
			break;
		}
	}

	if (optind+1 >= argc) {
		bu_log( usage, argv[0]);
d450 1
d452 1
d454 79
a532 10
	if( !output_file  ) {
		fp = stdout;
	} else {
		/* Open output file */
		if( (fp=fopen( output_file, "w+" )) == NULL ) {
			bu_log( "Cannot open output file (%s) for writing\n", output_file );
			perror( argv[0] );
			exit( 1 );
		}
	}
d534 19
a552 83
	/* Open BRL-CAD database */
	argc -= optind;
	argv += optind;
	if ((dbip = db_open(argv[0], "r")) == DBI_NULL) {
		perror(argv[0]);
		exit(1);
	}
	db_dirbuild( dbip );

	BN_CK_TOL(tree_state.ts_tol);
	RT_CK_TESS_TOL(tree_state.ts_ttol);

	if( verbose ) {
		bu_log( "Model: %s\n", argv[0] );
		bu_log( "Objects:" );
		for( i=1 ; i<argc ; i++ )
			bu_log( " %s", argv[i] );
		bu_log( "\nTesselation tolerances:\n\tabs = %g mm\n\trel = %g\n\tnorm = %g\n",
			tree_state.ts_ttol->abs, tree_state.ts_ttol->rel, tree_state.ts_ttol->norm );
		bu_log( "Calculational tolerances:\n\tdist = %g mm perp = %g\n",
			tree_state.ts_tol->dist, tree_state.ts_tol->perp );
	}

	/* output DXF header and start of TABLES section */
	fprintf( fp,
		 "0\nSECTION\n2\nHEADER\n999\n%s\n0\nENDSEC\n0\nSECTION\n2\nTABLES\n0\nTABLE\n2\nLAYER\n",
		 argv[optind] );

	/* Walk indicated tree(s) just for layer names to put in TABLES section */
	(void) db_walk_tree(dbip, argc-1, (const char **)(argv+1),
		1,			/* ncpu */
		&tree_state,
		0,			/* take all regions */
		get_layer,
		NULL,
		(genptr_t)NULL);	/* in librt/nmg_bool.c */

	/* end of layers section, start of ENTOTIES SECTION */
	fprintf( fp, "0\nENDTAB\n0\nENDSEC\n0\nSECTION\n2\nENTITIES\n" );

	/* Walk indicated tree(s).  Each region will be output separately */
	tree_state = rt_initial_tree_state;	/* struct copy */
	tree_state.ts_tol = &tol;
	tree_state.ts_ttol = &ttol;
	/* make empty NMG model */
	the_model = nmg_mm();
	tree_state.ts_m = &the_model;
	(void) db_walk_tree(dbip, argc-1, (const char **)(argv+1),
		1,			/* ncpu */
		&tree_state,
		0,			/* take all regions */
		do_region_end,
		nmg_booltree_leaf_tess,
		(genptr_t)NULL);	/* in librt/nmg_bool.c */

	percent = 0;
	if(regions_tried>0){
		percent = ((double)regions_converted * 100) / regions_tried;
		if( verbose )
			bu_log("Tried %d regions, %d converted to NMG's successfully.  %g%%\n",
				regions_tried, regions_converted, percent);
	}
	percent = 0;

	if( regions_tried > 0 ){
		percent = ((double)regions_written * 100) / regions_tried;
		if( verbose )
			bu_log( "                  %d triangulated successfully. %g%%\n",
				regions_written, percent );
	}

	bu_log( "%ld triangles written\n", tot_polygons );

	fprintf( fp, "0\nENDSEC\n0\nEOF\n" );

	if( output_file ) {
		fclose(fp);
	}

	/* Release dynamic storage */
	nmg_km(the_model);
	rt_vlist_cleanup();
	db_close(dbip);
d555 1
a555 1
	bu_prmem("After complete G-DXF conversion");
d558 1
a558 1
	return 0;
d564 6
a569 4
	int icolor[3];
	int i;
	int dist_sq;
	int color_num;
d571 2
a572 1
	VSCALE( icolor, color, 255 );
d574 3
a576 2
	color_num = 0;
	dist_sq = MAGSQ( icolor );
d578 5
a582 10
	for( i=1 ; i<256 ; i++ ) {
		int tmp_dist;
		int diff[3];

		VSUB2( diff, icolor, &rgb[i*3] );
		tmp_dist = MAGSQ( diff );
		if( tmp_dist < dist_sq ) {
			dist_sq = tmp_dist;
			color_num = i;
		}
d584 1
d586 1
a586 1
	return color_num;
d591 4
a594 4
struct nmgregion *r;
struct db_full_path *pathp;
int region_id;
float color[3];
d596 9
a604 9
	struct model *m;
	struct shell *s;
	struct vertex *v;
	struct bu_ptbl verts;
	char *region_name;
	int region_polys=0;
	int tri_count=0;
	int color_num;
	int do_triangulate=0;
d606 2
a607 2
	NMG_CK_REGION( r );
	RT_CK_FULL_PATH(pathp);
d609 1
a609 1
	region_name = db_path_to_string( pathp );
d611 2
a612 2
	m = r->m_p;
	NMG_CK_MODEL( m );
d614 3
a616 4
	/* Count triangles */
 	for( BU_LIST_FOR( s, shell, &r->s_hd ) )
	{
		struct faceuse *fu;
d618 1
a618 1
		NMG_CK_SHELL( s );
d620 3
a622 4
		for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) )
		{
			struct loopuse *lu;
			int vert_count=0;
d624 1
a624 1
			NMG_CK_FACEUSE( fu );
d626 2
a627 2
			if( fu->orientation != OT_SAME )
				continue;
d629 2
a630 3
			for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) )
			{
				struct edgeuse *eu;
d632 2
a633 2
				if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
					continue;
d635 3
a637 3
				for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) ) {
					vert_count++;
				}
d639 4
a642 4
				if( vert_count > 3 ) {
					do_triangulate = 1;
					goto triangulate;
				}
d644 2
a645 3
				tri_count++;
			}
		}
d647 1
d650 8
a657 18
	if( do_triangulate ) {
		/* triangulate model */
		nmg_triangulate_model( m, &tol );

		/* Count triangles */
		tri_count = 0;
		for( BU_LIST_FOR( s, shell, &r->s_hd ) ) {
			struct faceuse *fu;

			for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) ) {
				struct loopuse *lu;

				if( fu->orientation != OT_SAME )
					continue;

				for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) ) {
					if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
						continue;
d659 11
a669 3
					tri_count++;
				}
			}
d671 1
d673 27
d701 1
a701 1
	nmg_vertex_tabulate( &verts, &r->l.magic );
d703 2
a704 1
	color_num = find_closest_color( color );
d706 1
a706 2
	if( polyface_mesh ) {
		int i;
d708 2
d711 29
a739 6
		fprintf( fp, "0\nPOLYLINE\n8\n%s\n62\n%d\n70\n64\n71\n%d\n72\n%d\n",
			 region_name, color_num, BU_PTBL_LEN( &verts), tri_count );
		for( i=0 ; i<BU_PTBL_LEN( &verts ) ; i++ ) {
			fprintf( fp, "0\nVERTEX\n8\n%s\n", region_name );
			v = (struct vertex *)BU_PTBL_GET( &verts, i );
			NMG_CK_VERTEX( v );
d741 7
a747 1
				fprintf( fp, "10\n%f\n20\n%f\n30\n%f\n70\n192\n", V3ARGSIN( v->vg_p->coord ) );
d749 7
a755 1
				fprintf( fp, "10\n%f\n20\n%f\n30\n%f\n70\n192\n", V3ARGS( v->vg_p->coord ) );
d757 1
d759 30
a788 102
	}

	/* Check triangles */
 	for( BU_LIST_FOR( s, shell, &r->s_hd ) )
	{
		struct faceuse *fu;

		NMG_CK_SHELL( s );

		for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) )
		{
			struct loopuse *lu;

			NMG_CK_FACEUSE( fu );

			if( fu->orientation != OT_SAME )
				continue;

			for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) )
			{
				struct edgeuse *eu;
				int vert_count=0;

				NMG_CK_LOOPUSE( lu );

				if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
					continue;

				if( polyface_mesh ) {
					fprintf( fp, "0\nVERTEX\n8\n%s\n70\n128\n10\n0.0\n20\n0.0\n30\n0.0\n",
						 region_name );
				} else {
					fprintf( fp, "0\n3DFACE\n8\n%s\n62\n%d\n", region_name, color_num );
				}

				/* check vertex numbers for each triangle */
				for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) )
				{
					NMG_CK_EDGEUSE( eu );

					vert_count++;

					v = eu->vu_p->v_p;
					NMG_CK_VERTEX( v );

					if( polyface_mesh ) {
						fprintf( fp, "%d\n%d\n",
							 vert_count+70, bu_ptbl_locate( &verts, (long *)v ) + 1 );
					} else {
						if( inches ) {
							fprintf( fp, "%d\n%f\n%d\n%f\n%d\n%f\n",
								 10 + vert_count - 1,
								 v->vg_p->coord[X] / 25.4,
								 20 + vert_count - 1,
								 v->vg_p->coord[Y] / 25.4,
								 30 + vert_count -1,
								 v->vg_p->coord[Z] / 25.4 );
						} else {
							fprintf( fp, "%d\n%f\n%d\n%f\n%d\n%f\n",
								 10 + vert_count - 1,
								 v->vg_p->coord[X],
								 20 + vert_count - 1,
								 v->vg_p->coord[Y],
								 30 + vert_count -1,
								 v->vg_p->coord[Z] );
						}
					}
				}
				if( vert_count > 3 )
				{
					bu_free( region_name, "region name" );
					bu_log( "lu x%x has %d vertices!!!!\n", lu, vert_count );
					rt_bomb( "LU is not a triangle" );
				}
				else if( vert_count < 3 )
					continue;
				else
				{
				    if( !polyface_mesh ) {
					vert_count++;
					if( inches ) {
					    fprintf( fp, "%d\n%f\n%d\n%f\n%d\n%f\n",
						     10 + vert_count - 1,
						     v->vg_p->coord[X] / 25.4,
						     20 + vert_count - 1,
						     v->vg_p->coord[Y] / 25.4,
						     30 + vert_count -1,
						     v->vg_p->coord[Z] / 25.4 );
					} else {
					    fprintf( fp, "%d\n%f\n%d\n%f\n%d\n%f\n",
						     10 + vert_count - 1,
						     v->vg_p->coord[X],
						     20 + vert_count - 1,
						     v->vg_p->coord[Y],
						     30 + vert_count -1,
						     v->vg_p->coord[Z] );
					}
				    }
				}

				tot_polygons++;
				region_polys++;
d790 1
d792 4
d797 1
d799 2
a800 2
	bu_ptbl_free( &verts );
	bu_free( region_name, "region name" );
d802 3
a804 3
	if( polyface_mesh ) {
		fprintf( fp, "0\nSEQEND\n" );
	}
d809 4
a812 4
register struct db_tree_state	*tsp;
struct db_full_path	*pathp;
union tree		*curtree;
genptr_t		client_data;
d814 2
a815 2
	char *layer_name;
	int color_num;
d817 2
a818 2
	layer_name = db_path_to_string(pathp);
	color_num = find_closest_color( tsp->ts_mater.ma_color );
d820 1
a820 1
	fprintf( fp, "0\nLAYER\n2\n%s\n62\n%d\n", layer_name, color_num );
d822 1
a822 1
	bu_free( layer_name, "layer name" );
d824 1
a824 1
	return( (union tree *)NULL );
d828 6
a833 6
*			D O _ R E G I O N _ E N D
*
*  Called from db_walk_tree().
*
*  This routine must be prepared to run in parallel.
*/
d835 4
a838 4
register struct db_tree_state	*tsp;
struct db_full_path	*pathp;
union tree		*curtree;
genptr_t		client_data;
d840 53
a892 53
	union tree		*ret_tree;
	struct bu_list		vhead;
	struct nmgregion	*r;

	RT_CK_FULL_PATH(pathp);
	RT_CK_TREE(curtree);
	RT_CK_TESS_TOL(tsp->ts_ttol);
	BN_CK_TOL(tsp->ts_tol);
	NMG_CK_MODEL(*tsp->ts_m);

	BU_LIST_INIT(&vhead);

	if (RT_G_DEBUG&DEBUG_TREEWALK || verbose) {
		char	*sofar = db_path_to_string(pathp);
		bu_log("\ndo_region_end(%d %d%%) %s\n",
			regions_tried,
			regions_tried>0 ? (regions_converted * 100) / regions_tried : 0,
			sofar);
		bu_free(sofar, "path string");
	}

	if (curtree->tr_op == OP_NOP)
		return  curtree;

	regions_tried++;
	/* Begin rt_bomb() protection */
	if( ncpu == 1 ) {
		if( BU_SETJUMP )  {
			/* Error, bail out */
			char *sofar;
			BU_UNSETJUMP;		/* Relinquish the protection */

			sofar = db_path_to_string(pathp);
	                bu_log( "FAILED in Boolean evaluation: %s\n", sofar );
                        bu_free( (char *)sofar, "sofar" );

			/* Sometimes the NMG library adds debugging bits when
			 * it detects an internal error, before rt_bomb().
			 */
			rt_g.NMG_debug = NMG_debug;	/* restore mode */

			/* Release any intersector 2d tables */
			nmg_isect2d_final_cleanup();

			/* Release the tree memory & input regions */
/*XXX*/			/* db_free_tree(curtree);*/		/* Does an nmg_kr() */

			/* Get rid of (m)any other intermediate structures */
			if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )  {
				nmg_km(*tsp->ts_m);
			} else {
				bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
			}
d894 16
a909 4
			/* Now, make a new, clean model structure for next pass. */
			*tsp->ts_m = nmg_mm();
			goto out;
		}
d911 6
a916 2
	if( verbose )
		bu_log("Attempting to process region %s\n",db_path_to_string( pathp ));
d918 4
a921 2
	ret_tree = nmg_booltree_evaluate( curtree, tsp->ts_tol, &rt_uniresource );	/* librt/nmg_bool.c */
	BU_UNSETJUMP;		/* Relinquish the protection */
d923 11
a933 6
	if( ret_tree )
		r = ret_tree->tr_d.td_r;
	else
	{
	    if( verbose ) {
		bu_log( "\tNothing left of this region after Boolean evaluation\n" );
d935 1
a935 2
	    regions_written++; /* don't count as a failure */
	    r = (struct nmgregion *)NULL;
a936 1
/*	regions_done++;  XXX */
d938 4
a941 1
	regions_converted++;
d943 5
a947 23
	if (r != (struct nmgregion *)NULL)
	{
		struct shell *s;
		int empty_region=0;
		int empty_model=0;

		/* Kill cracks */
		s = BU_LIST_FIRST( shell, &r->s_hd );
		while( BU_LIST_NOT_HEAD( &s->l, &r->s_hd ) )
		{
			struct shell *next_s;

			next_s = BU_LIST_PNEXT( shell, &s->l );
			if( nmg_kill_cracks( s ) )
			{
				if( nmg_ks( s ) )
				{
					empty_region = 1;
					break;
				}
			}
			s = next_s;
		}
d949 3
a951 5
		/* kill zero length edgeuses */
		if( !empty_region )
		{
			 empty_model = nmg_kill_zero_length_edgeuses( *tsp->ts_m );
		}
d953 4
a956 36
		if( !empty_region && !empty_model )
		{
			if( BU_SETJUMP )
			{
				char *sofar;

				BU_UNSETJUMP;

				sofar = db_path_to_string(pathp);
				bu_log( "FAILED in triangulator: %s\n", sofar );
				bu_free( (char *)sofar, "sofar" );

				/* Sometimes the NMG library adds debugging bits when
				 * it detects an internal error, before rt_bomb().
				 */
				rt_g.NMG_debug = NMG_debug;	/* restore mode */

				/* Release any intersector 2d tables */
				nmg_isect2d_final_cleanup();

				/* Get rid of (m)any other intermediate structures */
				if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )
				{
					nmg_km(*tsp->ts_m);
				}
				else
				{
					bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
				}

				/* Now, make a new, clean model structure for next pass. */
				*tsp->ts_m = nmg_mm();
				goto out;
			}
			/* Write the region to the DXF file */
			nmg_to_dxf( r, pathp, tsp->ts_regionid, tsp->ts_mater.ma_color );
d958 2
a959 1
			regions_written++;
d961 5
a965 1
			BU_UNSETJUMP;
d968 10
a977 2
		if( !empty_model )
			nmg_kr( r );
d980 3
a982 9
out:
	/*
	 *  Dispose of original tree, so that all associated dynamic
	 *  memory is released now, not at the end of all regions.
	 *  A return of TREE_NULL from this routine signals an error,
	 *  and there is no point to adding _another_ message to our output,
	 *  so we need to cons up an OP_NOP node to return.
	 */

d984 8
a991 2
	if(regions_tried>0){
		float npercent, tpercent;
a992 6
		npercent = (float)(regions_converted * 100) / regions_tried;
		tpercent = (float)(regions_written * 100) / regions_tried;
		if( verbose )
			bu_log("Tried %d regions, %d conv. to NMG's %d conv. to tri. nmgper = %.2f%% triper = %.2f%% \n",
				regions_tried, regions_converted, regions_written, npercent,tpercent);
	}
d994 2
a995 1
	db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */
d997 13
a1009 4
	BU_GETUNION(curtree, tree);
	curtree->magic = RT_TREE_MAGIC;
	curtree->tr_op = OP_NOP;
	return(curtree);
@


14.13
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.12 2006/01/21 21:09:44 brlcad Exp $ (BRL)";
d660 1
d776 23
@


14.12
log
@a little less excitement about regions that evaluate to nothing, still report it if we're verbose a little more consistently.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.11 2006/01/18 06:46:13 brlcad Exp $ (BRL)";
d42 1
d47 1
a47 1
#include <string.h>
d49 1
a49 1
#include <strings.h>
@


14.11
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.10 2005/10/23 04:44:29 brlcad Exp $ (BRL)";
d891 5
a895 4
		if( verbose )
			bu_log( "\tNothing left of this region after Boolean evaluation!!!\n" );
		regions_written++; /* don't count as a failure */
		r = (struct nmgregion *)NULL;
d901 1
a901 1
	if (r != NULL)
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2003-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.9 2005/09/09 05:50:29 brlcad Exp $ (BRL)";
@


14.9
log
@use BRL-CAD instead of brl-cad if only to be at least internally consistent and serve good example
@
text
@d29 1
a29 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.8 2005/08/28 00:33:33 brlcad Exp $ (BRL)";
d671 1
a671 1
								
d853 1
a853 1
			
d857 1
a857 1
                                
d959 1
a959 1
			
@


14.8
log
@use bu_setlinebuf instead of the old block that checked system 'types' and was replicated where needed
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d471 1
a471 1
	/* Open brl-cad database */
@


14.8.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d471 1
a471 1
	/* Open BRL-CAD database */
d671 1
a671 1

d853 1
a853 1

d857 1
a857 1

d959 1
a959 1

@


14.7
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-dxf.c,v 14.6 2004/12/21 07:32:29 morrison Exp $ (BRL)";
d375 2
a376 12
#ifdef BSD
	setlinebuf( stderr );
#else
#	if defined( SYSV ) && !defined( sgi ) && !defined(CRAY2) && \
	 !defined(n16)
		(void) setvbuf( stderr, (char *) NULL, _IOLBF, BUFSIZ );
#	endif
#	if defined(sgi) && defined(mips)
		if( setlinebuf( stderr ) != 0 )
			perror("setlinebuf(stderr)");
#	endif
#endif
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 2003-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-dxf.c,v 14.5 2004/12/21 06:58:41 morrison Exp $ (BRL)";
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a32 2
 *  
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-dxf.c,v 14.4 2004/12/21 06:44:32 morrison Exp $ (BRL)";
@


14.4
log
@remove the old distribution notice section
@
text
@a34 3
 *  Copyright Notice -
 *	This software is Copyright (C) 2003-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-dxf.c,v 14.3 2004/12/18 06:50:50 morrison Exp $ (BRL)";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a33 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-dxf.c,v 14.2 2004/12/18 02:38:09 morrison Exp $ (BRL)";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file g-dxf.c
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-dxf.c,v 14.1 2004/11/16 19:42:12 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			G - D X F . C
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-dxf.c,v 1.5 2004/09/03 23:30:56 morrison Exp $ (BRL)";
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-dxf.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d1002 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-dxf.c,v 1.3 2004/06/09 14:49:30 morrison Exp $ (BRL)";
d34 1
a34 1
#ifdef USE_STRING_H
@


1.3
log
@add unistd.h header for getopt()
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/conv/g-dxf.c,v 1.2 2004/06/08 22:04:08 morrison Exp $ (BRL)";
d28 1
a28 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d32 1
a32 2


d41 9
d55 2
d58 2
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/conv/g-dxf.c,v 11.5 2004/05/10 15:30:41 erikg Exp $ (BRL)";
a42 1
#include "externs.h"
@

