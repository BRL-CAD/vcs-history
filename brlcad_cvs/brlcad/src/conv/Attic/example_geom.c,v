head	1.9;
access;
symbols
	rel-7-10-4:1.8
	STABLE:1.8.0.2
	rel-7-10-2:1.8
	rel-7-10-0:1.8
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.3.0.2
	help:1.3
	temp_tag:1.2
	postmerge-20051223-bobWinPort:1.2
	premerge-20051223-bobWinPort:1.2
	rel-7-6-6:1.2
	rel-7-6-4:1.2
	rel-7-6-2:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-0:1.1;
locks; strict;
comment	@ * @;


1.9
date	2007.11.20.18.50.42;	author brlcad;	state dead;
branches;
next	1.8;

1.8
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.16.12.11.17;	author lbutler;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.9
log
@rename example_geom.c to walk_example.c to be consistent name-wise with the other *_example program samples.
@
text
@/*                     E X A M P L E _ G E O M . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file example_geom.c
 *	@@brief An example of how to traverse a BRL-CAD database heirarchy.
 *
 *	This program uses the BRL-CAD librt function db_walk_tree() to traverse a
 *	user-specified portion of the Directed acyclic graph of the database.  This
 *	function allows for fast and easy database parsers to be developed
 *
 *	@@param -h print help
 *	@@param database_file The name of the geometry file to be processed
 *	@@param objects_within_database A list of object names to be processed (tree tops)
 */

#include <stdio.h>
#include <string.h>
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "bu.h"
#include "raytrace.h"
#include "wdb.h"
#include "../librt/debug.h"

/** list of legal command line options for use with bu_getopt()  */
char *options = "hd:";

/** string that indicates what this program was invoked as */
char *progname = "(noname)";

/** flag for printing names of objects as encountered  */
#define DEBUG_NAMES 1
/** print debugging statistics flag  */
#define DEBUG_STATS 2
/** holds bit values for various debug settings  */
long debug = 0;
/** when non-zero, program prints information for the user about progress  */
int verbose = 0;

/**
 *	U S A G E
 *	@@brief tell user how to invoke this program, then exit
 *	@@param s an pointer to a null-terminated character string
 *	@@return never returns
 */
void usage(char *s)
{
    if (s) (void)fputs(s, stderr);

    (void) fprintf(stderr, "Usage: %s [ -%s ] [<] infile [> outfile]\n",
		   progname, options);
    exit(1);
}

/** @@if no
 *	P A R S E _ A R G S
 * @@endif
 *	@@brief Parse command line flags.
 *
 *	This routine handles parsing of all command line options.
 *
 *	@@param ac count of arguments
 *	@@param av array of pointers to null-terminated strings
 *	@@return index into av of first argument past options (new ac value)
 */
int parse_args(int ac, char *av[])
{
    int  c;
    char *strrchr();

    if (  ! (progname=strrchr(*av, '/'))  )
	progname = *av;
    else
	++progname;

    /* Turn off bu_getopt's error messages */
    bu_opterr = 0;

    /* get all the option flags from the command line */
    while ((c=bu_getopt(ac,av,options)) != EOF)
	switch (c) {
	case 'd'	: debug = strtol(but_optarg, NULL, 16); break;
	case '?'	:
	case 'h'	:
	default		: usage("Bad or help flag specified\n"); break;
	}

    return(but_optind);
}


/**
 *	R E G I O N _ S T A R T
 *
 * @@brief This routine is called when a region is first encountered in the
 * heirarchy when processing a tree
 *
 *	@@param tsp tree state (for parsing the tree)
 *	@@param pathp A listing of all the nodes traversed to get to this node in the database
 *	@@param combp the combination record for this region
 *	@@param client_data pointer that was passed as last argument to db_walk_tree()
 *
 */
int
region_start (struct db_tree_state * tsp,
	      struct db_full_path * pathp,
	      const struct rt_comb_internal * combp,
	      genptr_t client_data )
{
    int i;
    if (debug&DEBUG_NAMES) {
	char *name = db_path_to_string(pathp);
	bu_log("region_start %s\n", name);
	bu_free(name, "reg_start name");
    }
    return 0;
}

/**
 *	R E G I O N _ E N D
 *
 *
 * @@brief This is called when all sub-elements of a region have been processed by leaf_func.
 *
 *	@@param tsp
 *	@@param pathp
 *	@@param curtree
 *	@@param client_data
 *
 *	@@return TREE_NULL if data in curtree was "stolen", otherwise db_walk_tree will
 *	clean up the dta in the union tree * that is returned
 *
 * If it wants to retain the data in curtree it can by returning TREE_NULL.  Otherwise
 * db_walk_tree will clean up the data in the union tree * that is returned.
 *
 */
union tree *
region_end (struct db_tree_state * tsp,
	    struct db_full_path * pathp,
	    union tree * curtree,
	    genptr_t client_data )
{
    int i;
    if (debug&DEBUG_NAMES) {
	char *name = db_path_to_string(pathp);
	bu_log("region_end   %s\n", name);
	bu_free(name, "region_end name");
    }

    return curtree;
}


/**
 *	L E A F _ F U N C
 *
 *	@@brief Function to process a leaf node.
 *
 *     	This is actually invoked from db_recurse() from db_walk_subtree().
 *
 *	@@return (union tree *) representing the leaf, or
 *	TREE_NULL if leaf does not exist or has an error.
 */
union tree *
leaf_func (struct db_tree_state * tsp,
	   struct db_full_path * pathp,
	   struct rt_db_internal * ip,
	   genptr_t client_data )
{
    int i;
    union tree *tp;

    if (debug&DEBUG_NAMES) {
	char *name = db_path_to_string(pathp);
	bu_log("leaf_func    %s\n", name);
	bu_free(name, "region_end name");
    }


    /* here we do primitive type specific processing */
    switch (ip->idb_minor_type) {
    case ID_BOT:
	{
	    struct rt_bot_internal *bot = (struct rt_bot_internal *)ip->idb_ptr;
	    RT_BOT_CK_MAGIC(bot); /* check for data corruption */

	    /* code to process bot goes here */

	    break;
	}
    case ID_ARB8:
	{
	    struct rt_arb_internal *arb = (struct rt_arb_internal *)ip->idb_ptr;
	    RT_ARB_CK_MAGIC(arb);

	    /* code to process arb goes here */

	    break;
	}
    /*
     * Note:  A complete program would process each possible type of object here,
     * not just a couple of primitive types
     */

    }

    return (union tree *)NULL;
}

/**
 *	M A I N
 *
 *	Call parse_args to handle command line arguments first, then
 *	process input.
 */
int main(int ac, char *av[])
{
    /** @@struct rt_i
     * This structure contains some global state information for librt
     */
    struct rt_i *rtip;

    /** @@struct rt_db_internal
     * this structure is used to manage the payload of an
     * "internal" or "in memory" representation of geometry
     * (as opposed to the "on-disk" version, which can be different)
     */
    struct rt_db_internal intern;

    /* This is the data payload for a "Bag of Triangles" or "BOT" primitive.
     * see rtgeom.h for more information about primitive solid specific data
     * structures.
     */
    struct rt_bot_internal *bot;

    /* This structure contains information about an object in the on-disk
     * database file.  Content is things such as the name, what type of object, etc.
     * see "raytrace.h" for more information
     */
    struct directory *dp;

    struct db_tree_state init_state; /* state table for the heirarchy walker */
    char idbuf[132];		/* Database title */
    int arg_count;

    /** @@struct user_data
     * This is an example structure.
     * It contains anything you want to have available in the region/leaf processing routines
     */
    struct user_data {
	int stuff;
    } user_data;


    arg_count = parse_args(ac, av);

    if ( (ac - arg_count) < 1) {
	fprintf(stderr, "usage: %s geom.g [file.dxf] [bot1 bot2 bot3...]\n", progname);
	exit(-1);
    }

    /*
     *  Build an index of what's in the databse.
     *  rt_dirbuild() returns an "instance" pointer which describes
     *  the database.  It also gives you back the
     *  title string in the header (ID) record.
     */
    rtip=rt_dirbuild(av[arg_count], idbuf, sizeof(idbuf));
    if ( rtip == RTI_NULL) {
	fprintf(stderr,"rtexample: rt_dirbuild failure\n");
	exit(2);
    }

    arg_count++;

    init_state = rt_initial_tree_state;
    db_walk_tree(rtip->rti_dbip, /* database instance */
		 ac-arg_count,		/* number of trees to get from the database */
		 (const char **)&av[arg_count],
		 1, /* number of cpus to use */
		 &init_state,
		 region_start,
		 region_end,
		 leaf_func,
		 (genptr_t)&user_data);

    /* at this point you can do things with the geometry you have obtained */

    return 0;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.8
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@@


1.7
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d44 1
a44 3
/* declarations to support use of getopt() system call */

/** list of legal command line options for use with getopt()  */
a45 2
extern char *optarg;
extern int optind, opterr, getopt();
d95 2
a96 2
    /* Turn off getopt's error messages */
    opterr = 0;
d99 1
a99 1
    while ((c=getopt(ac,av,options)) != EOF)
d101 1
a101 1
	case 'd'	: debug = strtol(optarg, NULL, 16); break;
d107 1
a107 1
    return(optind);
@


1.6
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a315 1

@


1.5
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


1.4
log
@update copyright to 2007
@
text
@d22 2
a23 2
/** \file example_geom.c
 *	\brief An example of how to traverse a BRL-CAD database heirarchy.
d29 3
a31 3
 *	\param -h print help
 *	\param database_file The name of the geometry file to be processed
 *	\param objects_within_database A list of object names to be processed (tree tops)
d66 3
a68 3
 *	\brief tell user how to invoke this program, then exit
 *	\param s an pointer to a null-terminated character string
 *	\return never returns
d79 1
a79 1
/** \if no
d81 2
a82 2
 * \endif
 *	\brief Parse command line flags.
d86 3
a88 3
 *	\param ac count of arguments
 *	\param av array of pointers to null-terminated strings
 *	\return index into av of first argument past options (new ac value)
d119 1
a119 1
 * \brief This routine is called when a region is first encountered in the
d122 4
a125 4
 *	\param tsp tree state (for parsing the tree)
 *	\param pathp A listing of all the nodes traversed to get to this node in the database
 *	\param combp the combination record for this region
 *	\param client_data pointer that was passed as last argument to db_walk_tree()
d147 1
a147 1
 * \brief This is called when all sub-elements of a region have been processed by leaf_func.
d149 4
a152 4
 *	\param tsp
 *	\param pathp
 *	\param curtree
 *	\param client_data
d154 1
a154 1
 *	\return TREE_NULL if data in curtree was "stolen", otherwise db_walk_tree will
d181 1
a181 1
 *	\brief Function to process a leaf node.
d184 2
a185 1
 *	\return (union tree *) representing the leaf, or
d242 1
a242 1
    /** \struct rt_i
d247 1
a247 1
    /** \struct rt_db_internal
d269 2
a270 1
    /** \struct user_data
@


1.3
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


1.2
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


1.1
log
@A heavily annotated example program that accesses geometry from BRL-CAD
@
text
@d25 2
a26 2
 *	This program uses the BRL-CAD librt function db_walk_tree() to traverse a 
 *	user-specified portion of the Directed acyclic graph of the database.  This 
d29 1
a29 1
 *	\param -h print help	
d80 1
a80 1
 *	P A R S E _ A R G S 
d116 1
a116 1
/** 
d118 2
a119 2
 * 
 * \brief This routine is called when a region is first encountered in the 
d128 1
a128 1
int 
d159 1
a159 1
 * 
d211 1
a211 1
	    
d223 1
a223 1
    /* 
d247 1
a247 1
     * this structure is used to manage the payload of an 
d251 1
a251 1
    struct rt_db_internal intern; 
d257 1
a257 1
    struct rt_bot_internal *bot; 
d263 1
a263 1
    struct directory *dp;	
d269 1
a269 1
     * This is an example structure.  
d278 1
a278 1
	
@


1.1.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d25 2
a26 2
 *	This program uses the BRL-CAD librt function db_walk_tree() to traverse a
 *	user-specified portion of the Directed acyclic graph of the database.  This
d29 1
a29 1
 *	\param -h print help
d80 1
a80 1
 *	P A R S E _ A R G S
d116 1
a116 1
/**
d118 2
a119 2
 *
 * \brief This routine is called when a region is first encountered in the
d128 1
a128 1
int
d159 1
a159 1
 *
d211 1
a211 1

d223 1
a223 1
    /*
d247 1
a247 1
     * this structure is used to manage the payload of an
d251 1
a251 1
    struct rt_db_internal intern;
d257 1
a257 1
    struct rt_bot_internal *bot;
d263 1
a263 1
    struct directory *dp;
d269 1
a269 1
     * This is an example structure.
d278 1
a278 1

@


