head	14.23;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.7
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.6
	rel-7-6-0:14.7
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.23
date	2007.11.21.20.38.21;	author erikgreenwald;	state Exp;
branches;
next	14.22;

14.22
date	2007.11.21.19.05.59;	author erikgreenwald;	state Exp;
branches;
next	14.21;

14.21
date	2007.11.21.15.21.33;	author erikgreenwald;	state Exp;
branches;
next	14.20;

14.20
date	2007.11.08.04.15.47;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.10.14.22.15.54;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.18.04.13.44;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.02.20.08.19.47;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.44;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.30;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.09.09.09.44.08;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.01.30.20.30.20;	author brlcad;	state Exp;
branches
	14.7.6.1;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.50.58;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.51;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.10;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.14.49.31;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.10;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.57;	author morrison;	state Exp;
branches;
next	;

14.7.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.23
log
@collapse bu_log();bu_exit(#,""); as much as possible
@
text
@/*                   V I E W P O I N T - G . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file viewpoint-g.c
 *	V I E W P O I N T - G
 *
 *  Converter from Viewpoint Datalabs coor/elem format
 *  to BRL-CAD format.  Will assign vertex normals if they
 *  are present in the input files.  Two files are expected
 *  one containing vertex coordinates (and optional normals)
 *  and the second which lists the vertex numbers for each polygonal face.
 *
 *  Author:
 *	John R. Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <errno.h>

#if defined(HAVE_UNISTD_H)
#  include <unistd.h>
#else
#  if defined(HAVE_SYS_UNISTD_H)
#    include <sys/unistd.h>
#  endif
#endif

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "wdb.h"

/* local headers */
#include "../librt/debug.h"


#define START_ARRAY_SIZE	64
#define ARRAY_BLOCK_SIZE	64

/* structure for storing coordinates and associated vertex pointer */
struct viewpoint_verts
{
	point_t coord;
	vect_t norm;
	struct vertex *vp;
	short has_norm;
};

#define	LINELEN	256 /* max input line length from elements file */

static char *tok_sep=" ";		/* seperator used in input files */
static char *usage="viewpoint-g [-t tol] -c coord_file_name -e elements_file_name -o output_file_name";

int
main(int argc, char **argv)
{
	register int c;
	FILE *coords,*elems;		/* input file pointers */
	struct rt_wdb *out_fp;		/* output file pointers */
	char *output_file = "viewpoint.g";
	char *base_name;		/* title and top level group name */
	char coords_name[LINELEN] = {0};	/* input coordinates file name */
	char elems_name[LINELEN] = {0};		/* input elements file name */
	float x,y,z,nx,ny,nz;		/* vertex and normal coords */
	char *ptr1,*ptr2;
	int name_len;
	struct bn_tol tol;
	int done=0;
	int i;
	int no_of_verts;
	int no_of_faces=0;
	char line[LINELEN];
	struct bu_ptbl vertices;	/* table of vertices for one face */
	struct bu_ptbl faces;		/* table of faces for one element */
	struct bu_ptbl names;		/* table of element names */
	struct model *m;
	struct nmgregion *r;
	struct shell *s;
	struct faceuse *fu;
	struct viewpoint_verts *verts;	/* array of structures holding coordinates and normals */
	struct wmember reg_head;

	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-6;
	tol.para = 1 - tol.perp;

	coords = NULL;
	elems = NULL;

	if( argc < 2 )
		bu_exit( EXIT_FAILURE,  usage );

	/* get command line arguments */
	while ((c = bu_getopt(argc, argv, "t:c:e:o:")) != EOF)
	{
		switch( c )
		{
			case 't': /* tolerance */
				tol.dist = atof( bu_optarg );
				tol.dist_sq = tol.dist * tol.dist;
				break;
			case 'c': /* input coordinates file name */
				strncpy( coords_name, bu_optarg, LINELEN );
				if( (coords = fopen( coords_name , "r" )) == NULL )
				{
					bu_log( "Cannot open %s\n" , coords_name );
					perror( "viewpoint-g" );
					bu_exit( EXIT_FAILURE,  "Cannot open input file" );
				}
				break;
			case 'e': /* input elements file name */
				strncpy( elems_name , bu_optarg, LINELEN );
				if( (elems = fopen( elems_name , "r" )) == NULL )
				{
					bu_log( "Cannot open %s\n" , elems_name );
					perror( "viewpoint-g" );
					bu_exit( EXIT_FAILURE,  "Cannot open input file" );
				}
				break;
			case 'o': /* output file name */
				output_file = bu_optarg;
				break;
			default:
				bu_exit( EXIT_FAILURE,  usage );
				break;
		}
	}
	if( (out_fp = wdb_fopen( output_file )) == NULL )
	{
		perror( output_file );
		bu_log( "tankill-g: Cannot open %s\n" , output_file );
		bu_exit( EXIT_FAILURE,  "Cannot open output file\n" );
	}

	/* Must have some input */
	if( coords == NULL || elems == NULL )
		bu_exit( EXIT_FAILURE,  usage );

	/* build a title for the BRL-CAD database */
	if ( coords_name[0] == 0 ) {
		bu_log("%s:%d no coords_name set\n", __FILE__, __LINE__);
		bu_exit( EXIT_FAILURE, "croak\n");
	}

	ptr1 = strrchr( coords_name , '/' );
	if( ptr1 == NULL )
		ptr1 = coords_name;
	else
		ptr1++;
	ptr2 = strchr( ptr1 , '.' );

	if( ptr2 == NULL )
		name_len = strlen( ptr1 );
	else
		name_len = ptr2 - ptr1;

	base_name = (char *)bu_calloc( name_len + 1, sizeof(char), "base_name" );
	strncpy( base_name , ptr1 , name_len );

	/* make title record */
	mk_id( out_fp , base_name );

	/* count vertices */
	no_of_verts = 1;
	while( bu_fgets( line , LINELEN , coords ) != NULL )
		no_of_verts++;

	/* allocate memory to store vertex coordinates and normal coordinates and a pointer to
	 * an NMG vertex structure */
	verts = (struct viewpoint_verts *)bu_calloc( no_of_verts , sizeof( struct viewpoint_verts ) , "viewpoint-g: vertex list" );

	/* Now read the vertices again and store them */
	rewind( coords );
	while( bu_fgets( line , LINELEN ,  coords ) != NULL )
	{
		int number_scanned;
		number_scanned = sscanf( line , "%d,%f,%f,%f,%f,%f,%f" , &i , &x , &z , &y , &nx , &ny , &nz );
		if( number_scanned < 4 )
			break;
		if( i >= no_of_verts )
			bu_log( "vertex number too high (%d) only allowed for %d\n" , i , no_of_verts );
		VSET( verts[i].coord , x , y , z );

		if( number_scanned == 7 ) /* we get normals too!!! */
		{
			VSET( verts[i].norm , nx , ny , nz );
			verts[i].has_norm = 1;
		}
	}

	/* Let the user know that something is happening */
	fprintf( stderr , "%d vertices\n" , no_of_verts-1 );

	/* initialize tables */
	bu_ptbl_init( &vertices , 64, " &vertices ");
	bu_ptbl_init( &faces , 64, " &faces ");
	bu_ptbl_init( &names , 64, " &names ");

	while( !done )
	{
		char *name,*ptr;
		char curr_name[LINELEN] = {0};
		int eof=0;

		/* Find an element name that has not already been processed */
		done = 1;
		while( bu_fgets( line , LINELEN , elems ) != NULL )
		{
			line[strlen(line)-1] = '\0';
			name = strtok( line , tok_sep );
			if( BU_PTBL_END( &names ) == 0 )
			{
				/* this is the first element processed */
				strncpy( curr_name , name, LINELEN );

				/* add this name to the table */
				bu_ptbl_ins( &names , (long *)curr_name );
				done = 0;
				break;
			}
			else
			{
				int found=0;

				/* check the list to see if this name is already there */
				for( i=0 ; i<BU_PTBL_END( &names ) ; i++ )
				{
					if( !strcmp( (char *)BU_PTBL_GET( &names , i ) , name ) )
					{
						/* found it, so go back and read the next line */
						found = 1;
						break;
					}
				}
				if( !found )
				{
					/* didn't find name, so this becomes the current name */
					strncpy( curr_name, name, LINELEN );

					/* add it to the table */
					bu_ptbl_ins( &names , (long *)curr_name );
					done = 0;
					break;
				}
			}
		}

		/* if no current name, then we are done */
		if( curr_name[0] == 0 )
			break;

		/* Hopefully, the user is still around */
		fprintf( stderr , "\tMaking %s\n" , curr_name );

		/* make basic nmg structures */
		m = nmg_mm();
		r = nmg_mrsv( m );
		s = BU_LIST_FIRST( shell , &r->s_hd );

		/* set all vertex pointers to NULL so that different models don't share vertices */
		for( i=0 ; i<no_of_verts ; i++ )
			verts[i].vp = (struct vertex *)NULL;

		/* read elements file and make faces */
		while( !eof )
		{
			/* loop through vertex numbers */
			while( (ptr = strtok( (char *)NULL , tok_sep ) ) != NULL )
			{
				i = atoi( ptr );
				if( i >= no_of_verts )
					bu_log( "vertex number (%d) too high in element, only allowed for %d\n" , i , no_of_verts );

				bu_ptbl_ins( &vertices , (long *)(&verts[i].vp) );
			}

			if( BU_PTBL_END( &vertices ) > 2 )
			{
				/* make face */
				fu = nmg_cmface( s , (struct vertex ***)BU_PTBL_BASEADDR( &vertices ) , BU_PTBL_END( &vertices ) );
				no_of_faces++;

				/* put faceuse in list for the current named object */
				bu_ptbl_ins( &faces , (long *)fu );

				/* restart the vertex list for the next face */
				bu_ptbl_reset( &vertices );
			}
			else
			{
				bu_log( "Skipping degenerate face\n" );
				bu_ptbl_reset( &vertices );
			}

			/* skip elements with the wrong name */
			name = NULL;
			while( name == NULL || strcmp( name , curr_name ) )
			{
				/* check for enf of file */
				if( bu_fgets( line , LINELEN , elems ) == NULL )
				{
					eof = 1;
					break;
				}

				/* get name from input line (first item on line) */
				line[strlen(line)-1] = '\0';
				name = strtok( line ,  tok_sep );
			}

		}

		/* assign geometry */
		for( i=0 ; i<no_of_verts ; i++ )
		{
			if( verts[i].vp )
			{
				NMG_CK_VERTEX( verts[i].vp );
				nmg_vertex_gv( verts[i].vp , verts[i].coord );

				/* check if a vertex normal exists */
				if( verts[i].has_norm )
				{
					struct vertexuse *vu;

					/* assign this normal to all uses of this vertex */
					for( BU_LIST_FOR( vu , vertexuse , &verts[i].vp->vu_hd ) )
					{
						NMG_CK_VERTEXUSE( vu );
						nmg_vertexuse_nv( vu , verts[i].norm );
					}
				}
			}
		}

		(void)nmg_model_vertex_fuse( m , &tol );

		/* calculate plane equations for faces */
		    NMG_CK_SHELL( s );
		    fu = BU_LIST_FIRST( faceuse , &s->fu_hd );
		    while( BU_LIST_NOT_HEAD( fu , &s->fu_hd))
		    {
			struct faceuse *kill_fu=(struct faceuse *)NULL;
			struct faceuse *next_fu;

			NMG_CK_FACEUSE( fu );

			next_fu = BU_LIST_NEXT( faceuse , &fu->l );
			if( fu->orientation == OT_SAME )
			{
				struct loopuse *lu;
				struct edgeuse *eu;
				fastf_t area;
				plane_t pl;

				lu = BU_LIST_FIRST( loopuse , &fu->lu_hd );
				NMG_CK_LOOPUSE( lu );
				for( BU_LIST_FOR( eu , edgeuse , &lu->down_hd ) )
				{
					NMG_CK_EDGEUSE( eu );
					if( eu->vu_p->v_p == eu->eumate_p->vu_p->v_p )
						kill_fu = fu;
				}
				if( !kill_fu )
				{
					area = nmg_loop_plane_area( lu , pl );
					if( area <= 0.0 )
					{

						bu_log( "ERROR: Can't get plane for face\n" );

						kill_fu = fu;
					}
				}
				if( kill_fu )
				{
					if( next_fu == kill_fu->fumate_p )
						next_fu = BU_LIST_NEXT( faceuse , &next_fu->l );
					bu_ptbl_rm( &faces , (long *)kill_fu );
					nmg_kfu( kill_fu );
				}
				else
					nmg_face_g( fu , pl );
			}
			fu = next_fu;
		    }

		if( BU_PTBL_END( &faces ) )
		{
			/* glue faces together */
			nmg_gluefaces( (struct faceuse **)BU_PTBL_BASEADDR( &faces) , BU_PTBL_END( &faces ), &tol );

			nmg_rebound( m , &tol );
			nmg_fix_normals( s , &tol );

			nmg_shell_coplanar_face_merge( s , &tol , 1 );

			nmg_rebound( m , &tol );

			/* write the nmg to the output file */
			mk_bot_from_nmg( out_fp , curr_name  , s );
		}
		else
			bu_log( "Object %s has no faces\n" , curr_name );

		/* kill the current model */
		nmg_km( m );

		/* restart the list of faces for the next object */
		bu_ptbl_reset( &faces );

		/* rewind the elements file for the next object */
		rewind( elems );
	}

	fprintf( stderr , "%d polygons\n" , no_of_faces );

	/* make a top level group with all the objects as members */
	BU_LIST_INIT( &reg_head.l );
	for( i=0 ; i<BU_PTBL_END( &names ) ; i++ )
		if( mk_addmember( (char *)BU_PTBL_GET( &names , i ) , &reg_head.l , NULL, WMOP_UNION ) == WMEMBER_NULL )
			bu_exit( 1, "Cannot make top level group\n" );

	fprintf( stderr , "Making top level group (%s)\n" , base_name );
	if( mk_lcomb( out_fp , base_name , &reg_head , 0, (char *)0, (char *)0, (unsigned char *)0, 0 ) )
		bu_log( "viewpoint-g: Error in making top level group" );

	bu_free(base_name, "base_name");
	bu_free(verts, "verts");

	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.22
log
@exit->bu_exit where applicable
@
text
@a453 1
	{
d455 1
a455 5
		{
			bu_log( "Cannot make top level group\n" );
			bu_exit( 1, "" );
		}
	}
@


14.21
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@d458 1
a458 1
			exit( 1 );
@


14.20
log
@minor tweaks, preventive null terminating of strncmp'd strings
@
text
@d124 1
a124 1
		bu_bomb( usage );
d141 1
a141 1
					bu_bomb( "Cannot open input file" );
d150 1
a150 1
					bu_bomb( "Cannot open input file" );
d157 1
a157 1
				bu_bomb( usage );
d165 1
a165 1
		bu_bomb( "Cannot open output file\n" );
d170 1
a170 1
		bu_bomb( usage );
d175 1
a175 1
		bu_bomb("croak\n");
@


14.19
log
@more level 4 flawfinder issues.  mostly string length clampages.
@
text
@d190 1
a190 1
	base_name = (char *)bu_malloc( name_len + 1 , "base_name" );
d466 3
@


14.18
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d92 2
a93 2
	char *coords_name=(char *)NULL;	/* input coordinates file name */
	char *elems_name;		/* input elements file name */
d136 1
a136 2
				coords_name = (char *)bu_malloc( strlen( bu_optarg ) + 1 , "Viewpoint-g: base name" );
				strcpy( coords_name , bu_optarg );
d145 1
a145 2
				elems_name = (char *)bu_malloc( strlen( bu_optarg ) + 1 , "Viewpoint-g: base name" );
				strcpy( elems_name , bu_optarg );
d173 1
a173 1
	if ( !coords_name ) {
d234 2
a235 1
		char *name,*curr_name,*ptr;
a238 1
		curr_name = NULL;
d247 1
a247 2
				curr_name = bu_malloc( sizeof( name ) + 1 , "viewpoint-g: component name" );
				strcpy( curr_name , name );
d271 1
a271 2
					curr_name = bu_malloc( sizeof( name ) + 1 , "viewpoint-g: component name" );
					strcpy( curr_name , name );
d282 1
a282 1
		if( curr_name == NULL )
@


14.17
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d44 1
a44 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d46 1
@


14.16
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d127 1
a127 1
		rt_bomb( usage );
d145 1
a145 1
					rt_bomb( "Cannot open input file" );
d155 1
a155 1
					rt_bomb( "Cannot open input file" );
d162 1
a162 1
				rt_bomb( usage );
d170 1
a170 1
		rt_bomb( "Cannot open output file\n" );
d175 1
a175 1
		rt_bomb( usage );
@


14.15
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d203 1
a203 1
	while( fgets( line , LINELEN , coords ) != NULL )
d212 1
a212 1
	while( fgets( line , LINELEN ,  coords ) != NULL )
d245 1
a245 1
		while( fgets( line , LINELEN , elems ) != NULL )
d340 1
a340 1
				if( fgets( line , LINELEN , elems ) == NULL )
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d130 1
a130 1
	while ((c = getopt(argc, argv, "t:c:e:o:")) != EOF)
d135 1
a135 1
				tol.dist = atof( optarg );
d139 2
a140 2
				coords_name = (char *)bu_malloc( strlen( optarg ) + 1 , "Viewpoint-g: base name" );
				strcpy( coords_name , optarg );
d149 2
a150 2
				elems_name = (char *)bu_malloc( strlen( optarg ) + 1 , "Viewpoint-g: base name" );
				strcpy( elems_name , optarg );
d159 1
a159 1
				output_file = optarg;
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d116 6
a121 6
        /* XXX These need to be improved */
        tol.magic = BN_TOL_MAGIC;
        tol.dist = 0.005;
        tol.dist_sq = tol.dist * tol.dist;
        tol.perp = 1e-6;
        tol.para = 1 - tol.perp;
d384 1
a384 1
		    	struct faceuse *next_fu;
d386 1
a386 1
		        NMG_CK_FACEUSE( fu );
d388 38
a425 38
		    	next_fu = BU_LIST_NEXT( faceuse , &fu->l );
		        if( fu->orientation == OT_SAME )
		    	{
	    			struct loopuse *lu;
		    		struct edgeuse *eu;
	    			fastf_t area;
	    			plane_t pl;

	    			lu = BU_LIST_FIRST( loopuse , &fu->lu_hd );
		    		NMG_CK_LOOPUSE( lu );
		    		for( BU_LIST_FOR( eu , edgeuse , &lu->down_hd ) )
		    		{
		    			NMG_CK_EDGEUSE( eu );
		    			if( eu->vu_p->v_p == eu->eumate_p->vu_p->v_p )
		    				kill_fu = fu;
		    		}
		    		if( !kill_fu )
		    		{
		    			area = nmg_loop_plane_area( lu , pl );
		    			if( area <= 0.0 )
		    			{

		    				bu_log( "ERROR: Can't get plane for face\n" );

		    				kill_fu = fu;
		    			}
		    		}
		    		if( kill_fu )
		    		{
	    				if( next_fu == kill_fu->fumate_p )
	    					next_fu = BU_LIST_NEXT( faceuse , &next_fu->l );
		    			bu_ptbl_rm( &faces , (long *)kill_fu );
	    				nmg_kfu( kill_fu );
	    			}
		    		else
		    			nmg_face_g( fu , pl );
		    	}
		    	fu = next_fu;
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.11
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
@


14.10
log
@update copyright to 2006
@
text
@d42 1
d46 1
a46 1
#include <string.h>
d48 1
a48 1
#include <strings.h>
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
@


14.8
log
@BRL-CAD not BRLCAD, consistency
@
text
@d198 1
a198 1
	/* make title record */	
d350 1
a350 1
			
@


14.7
log
@update copyright to 2005
@
text
@d26 1
a26 1
 *  to BRLCAD format.  Will assign vertex normals if they
d177 1
a177 1
	/* build a title for the BRLCAD database */
@


14.7.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d26 1
a26 1
 *  to BRL-CAD format.  Will assign vertex normals if they
d177 1
a177 1
	/* build a title for the BRL-CAD database */
d198 1
a198 1
	/* make title record */
d350 1
a350 1

@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a36 2
 *  
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a38 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1993-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a37 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Pacakge" agreement.
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file viewpoint-g.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d463 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d32 1
a32 1
#ifdef USE_STRING_H
@


1.3
log
@add unistd.h header for getopt()
@
text
@d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d31 1
a31 2


d40 7
d48 1
d55 2
d58 1
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a42 1
#include "externs.h"
@

