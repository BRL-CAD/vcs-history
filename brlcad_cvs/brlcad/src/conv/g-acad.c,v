head	14.25;
access;
symbols
	rel-7-10-4:14.22
	STABLE:14.22.0.2
	stable-branch:14.7
	rel-7-10-2:14.22
	rel-7-10-0:14.19
	rel-7-8-4:14.13
	rel-7-8-2:14.13
	rel-7-8-0:14.13
	trimnurbs-branch:14.13.0.2
	help:14.13
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.2
	rel-7-6-0:14.8
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.4
	bobWinPort:14.7.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.25
date	2007.10.22.17.42.34;	author brlcad;	state Exp;
branches;
next	14.24;

14.24
date	2007.10.22.08.47.38;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.07.26.01.13.51;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.05.18.04.13.43;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.04.29.02.05.02;	author johnranderson;	state Exp;
branches;
next	14.19;

14.19
date	2007.04.05.04.08.31;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.02.02.08.48.28;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.27.01.41.32;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.10.17.01.22.47;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.01.28.00.36.27;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.21.21.09.44;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.09.09.05.50.29;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.08.28.00.33.33;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2005.01.30.20.30.19;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.44.32;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.09;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.14.49.30;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.08;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.51;	author morrison;	state Exp;
branches;
next	;

14.8.2.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.25
log
@whoosh, another 10% complete on the bu_bomb to bu_exit conversion review.  also includes a slew of custom exit() calls that can use bu_exit() as well as toning down a slew of overzealous exclamation point use.  (20% complete overall)
@
text
@/*                        G - A C A D . C
 * BRL-CAD
 *
 * Copyright (c) 1996-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file g-acad.c
 *
 *  Program to convert a BRL-CAD model (in a .g file) to the Lockheed
 *  Martin "Advanced Computer-Aided Design" (ACAD) file format by
 *  calling on the NMG booleans (formerly from General Dynamics).
 *
 *  Note that this converter has nothing to do with the Autodesk
 *  AutoCAD software.
 *
 *  Authors -
 *	John R. Anderson
 *	Bill Mermagen Jr.
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.24 2007/10/22 08:47:38 brlcad Exp $ (BRL)";
#endif

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#if defined(HAVE_UNISTD_H)
#  include <unistd.h>
#else
#  if defined(HAVE_SYS_UNISTD_H)
#    include <sys/unistd.h>
#  endif
#endif

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"

/* local headers */
#include "../librt/debug.h"


#define V3ARGSIN(a)       (a)[X]/25.4, (a)[Y]/25.4, (a)[Z]/25.4

BU_EXTERN(union tree *do_region_end, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data));

extern double nmg_eue_dist;		/* from nmg_plot.c */

static char	usage[] = "\
Usage: %s [-v][-i][-xX lvl][-a abs_tess_tol][-r rel_tess_tol][-n norm_tess_tol]\n\
[-e error_file ][-D dist_calc_tol] -o output_file_name brlcad_db.g object(s)\n";

static int	NMG_debug;	/* saved arg of -X, for longjmp handling */
static int	verbose;
static int	ncpu = 1;	/* Number of processors */
static char	*output_file = NULL;	/* output filename */
static char	*error_file = NULL;	/* error filename */
static FILE	*fp;		/* Output file pointer */
static FILE	*fpe;		/* Error file pointer */
static struct db_i		*dbip;
static struct rt_tess_tol	ttol;
static struct bn_tol		tol;
static struct model		*the_model;

static struct db_tree_state	tree_state;	/* includes tol & model */

static int	regions_tried = 0;
static int	regions_converted = 0;
static int	regions_written = 0;
static int	inches = 0;
static long	tot_polygons = 0;

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register int	c;
	double		percent;
	int		i;

	bu_setlinebuf( stderr );

#if MEMORY_LEAK_CHECKING
	rt_g.debug |= DEBUG_MEM_FULL;
#endif
	tree_state = rt_initial_tree_state;	/* struct copy */
	tree_state.ts_tol = &tol;
	tree_state.ts_ttol = &ttol;
	tree_state.ts_m = &the_model;

	ttol.magic = RT_TESS_TOL_MAGIC;
	/* Defaults, updated by command line options. */
	ttol.abs = 0.0;
	ttol.rel = 0.01;
	ttol.norm = 0.0;

	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-5;
	tol.para = 1 - tol.perp;

	rt_init_resource( &rt_uniresource, 0, NULL );

	the_model = nmg_mm();
	BU_LIST_INIT( &rt_g.rtg_vlfree );	/* for vlist macros */

	/* Get command line arguments. */
	while ((c = bu_getopt(argc, argv, "a:n:o:r:vx:D:P:X:e:i")) != EOF) {
		switch (c) {
		case 'a':		/* Absolute tolerance. */
			ttol.abs = atof(bu_optarg);
			ttol.rel = 0.0;
			break;
		case 'n':		/* Surface normal tolerance. */
			ttol.norm = atof(bu_optarg);
			ttol.rel = 0.0;
			break;
		case 'o':		/* Output file name. */
			output_file = bu_optarg;
			break;
		case 'r':		/* Relative tolerance. */
			ttol.rel = atof(bu_optarg);
			break;
		case 'v':
			verbose++;
			break;
		case 'P':
			ncpu = atoi( bu_optarg );
			rt_g.debug = 1;	/* XXX DEBUG_ALLRAYS -- to get core dumps */
			break;
		case 'x':
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.debug );
			break;
		case 'D':
			tol.dist = atof(bu_optarg);
			tol.dist_sq = tol.dist * tol.dist;
			rt_pr_tol( &tol );
			break;
		case 'X':
			sscanf( bu_optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
			NMG_debug = rt_g.NMG_debug;
			break;
		case 'e':		/* Error file name. */
			error_file = bu_optarg;
			break;
		case 'i':
			inches = 1;
			break;
		default:
			bu_exit(1, usage, argv[0]);
			break;
		}
	}

	if (bu_optind+1 >= argc) {
		bu_exit(1, usage, argv[0]);
	}

	if( !output_file )
		fp = stdout;
	else
	{
		/* Open output file */
		if( (fp=fopen( output_file, "w+" )) == NULL )
		{
			perror( argv[0] );
			bu_exit(1, "Cannot open output file (%s) for writing\n", output_file );
		}
	}

	/* Open g-acad error log file */
	if( !error_file)
		fpe = stderr;
	else
	if( (fpe=fopen( error_file, "w" )) == NULL )
	{
		perror( argv[0] );
		bu_exit(1, "Cannot open output file (%s) for writing\n", error_file );
	}

	/* Open BRL-CAD database */
	argc -= bu_optind;
	argv += bu_optind;
	if ((dbip = db_open(argv[0], "r")) == DBI_NULL) {
		perror(argv[0]);
		bu_exit(1, "Cannot open geometry file (%s) for reading\n", argv[0]);
	}
	if( db_dirbuild( dbip ) ) {
	    bu_exit(1, "db_dirbuild failed\n" );
	}

	BN_CK_TOL(tree_state.ts_tol);
	RT_CK_TESS_TOL(tree_state.ts_ttol);

	fprintf( fpe, "Model: %s\n", argv[0] );
	fprintf( fpe, "Objects:" );
	for( i=1 ; i<argc ; i++ )
		fprintf( fpe, " %s", argv[i] );
	fprintf( fpe, "\nTesselation tolerances:\n\tabs = %g mm\n\trel = %g\n\tnorm = %g\n",
		tree_state.ts_ttol->abs, tree_state.ts_ttol->rel, tree_state.ts_ttol->norm );
	fprintf( fpe, "Calculational tolerances:\n\tdist = %g mm perp = %g\n",
		tree_state.ts_tol->dist, tree_state.ts_tol->perp );

	bu_log( "Model: %s\n", argv[0] );
	bu_log( "Objects:" );
	for( i=1 ; i<argc ; i++ )
		bu_log( " %s", argv[i] );
	bu_log( "\nTesselation tolerances:\n\tabs = %g mm\n\trel = %g\n\tnorm = %g\n",
		tree_state.ts_ttol->abs, tree_state.ts_ttol->rel, tree_state.ts_ttol->norm );
	bu_log( "Calculational tolerances:\n\tdist = %g mm perp = %g\n",
		tree_state.ts_tol->dist, tree_state.ts_tol->perp );

/* Write out ACAD facet header */
	if (inches)
		fprintf(fp,"BRL-CAD generated ACAD FACET FILE (Units in)\n");
	else
		fprintf(fp,"BRL-CAD generated ACAD FACET FILE (Units mm)\n");

/* Generate space for number of facet entities, will write over later */

	fprintf(fp,"               ");

	/* Walk indicated tree(s).  Each region will be output separately */
	(void) db_walk_tree(dbip, argc-1, (const char **)(argv+1),
		1,			/* ncpu */
		&tree_state,
		0,			/* take all regions */
		do_region_end,
		nmg_booltree_leaf_tess,
		(genptr_t)NULL);	/* in librt/nmg_bool.c */

	percent = 0;
	if(regions_tried>0){
		percent = ((double)regions_converted * 100) / regions_tried;
		printf("Tried %d regions, %d converted to NMG's successfully.  %g%%\n",
			regions_tried, regions_converted, percent);
	}
	percent = 0;

	if( regions_tried > 0 ){
		percent = ((double)regions_written * 100) / regions_tried;
	printf( "                  %d triangulated successfully. %g%%\n",
		regions_written, percent );
	}

	bu_log( "%ld triangles written\n", tot_polygons );
	fprintf( fpe, "%ld triangles written\n", tot_polygons );
/* XXX Write out number of facet entities to .facet file */

	rewind(fp);
	fseek(fp,46,0); /* Re-position pointer to 2nd line */
	fprintf(fp,"%d\n",regions_written); /* Write out number of regions */
	fclose(fp);

	/* Release dynamic storage */
	nmg_km(the_model);
	rt_vlist_cleanup();
	db_close(dbip);

#if MEMORY_LEAK_CHECKING
	bu_prmem("After complete G-ACAD conversion");
#endif

	return 0;
}

static void
nmg_to_acad(struct nmgregion *r, struct db_full_path *pathp, int region_id, int material_id)
{
	struct model *m;
	struct shell *s;
	struct vertex *v;
	struct bu_ptbl verts;
	char *region_name;
	int numverts = 0;		/* Number of vertices to output */
	int numtri   = 0;		/* Number of triangles to output */
	int tricount = 0;		/* Triangle number */
	int i;

	NMG_CK_REGION( r );
	RT_CK_FULL_PATH(pathp);

	region_name = db_path_to_string( pathp );

	m = r->m_p;
	NMG_CK_MODEL( m );

	/* triangulate model */
	nmg_triangulate_model( m, &tol );


	/* list all vertices in result */
	nmg_vertex_tabulate( &verts, &r->l.magic );

	/* Get number of vertices */

	numverts = BU_PTBL_END (&verts);

/* XXX Check vertices, shells faces first? Do not want to punt mid-stream */
/* BEGIN CHECK SECTION */
/* Check vertices */

	for( i=0 ; i<numverts ; i++ )
	{
		v = (struct vertex *)BU_PTBL_GET( &verts, i );
		NMG_CK_VERTEX( v );
	}

/* Check triangles */
	for( BU_LIST_FOR( s, shell, &r->s_hd ) )
	{
		struct faceuse *fu;

		NMG_CK_SHELL( s );

		for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) )
		{
			struct loopuse *lu;

			NMG_CK_FACEUSE( fu );

			if( fu->orientation != OT_SAME )
				continue;

			for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) )
			{
				struct edgeuse *eu;
				int vert_count=0;

				NMG_CK_LOOPUSE( lu );

				if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
					continue;

				/* check vertex numbers for each triangle */
				for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) )
				{
					NMG_CK_EDGEUSE( eu );

					v = eu->vu_p->v_p;
					NMG_CK_VERTEX( v );

					vert_count++;
					i = bu_ptbl_locate( &verts, (long *)v );
					if( i < 0 )
					{
		/*XXX*/				bu_ptbl_free( &verts);
		/*XXX*/				bu_free( region_name, "region name" );
						bu_log("Vertex from eu x%x is not in nmgregion x%x\n", eu, r);
						bu_exit(1, "ERROR: Triangle vertex was not located\n");
					}
				}
				if( vert_count > 3 )
				{
		/*XXX*/			bu_ptbl_free( &verts);
		/*XXX*/			bu_free( region_name, "region name" );
					bu_log( "lu x%x has too many (%d) vertices!\n", lu, vert_count );
					bu_exit(1, "ERROR: LU is not a triangle\n");
				}
				else if( vert_count < 3 )
					continue;
				numtri++;
			}
		}
	}

/* END CHECK SECTION */
/* Write pertinent info for this region */

	fprintf( fp, "%s\n", (region_name+1));
/* No mirror plane */
	fprintf( fp, "%d\n", 0);
/* Number of vertices */
	fprintf( fp, "%d\n",numverts);


	/* Write numverts, then vertices */

	for( i=0 ; i<numverts ; i++ )
	{
		v = (struct vertex *)BU_PTBL_GET( &verts, i );
		NMG_CK_VERTEX( v );
		if (inches)
			fprintf( fp, "%f %f %f\n", V3ARGSIN( v->vg_p->coord ));
		else
			fprintf( fp, "%f %f %f\n", V3ARGS( v->vg_p->coord ));
	}

/* Number of sub-parts (always 1 with BRL-CAD) */
	fprintf( fp, "%d\n",1);
/* Write out name again */
	fprintf( fp, "%s\n", (region_name+1));
/* Number of triangles, number of vert/tri (3) */
	fprintf( fp,"%d       %d\n",numtri,3);

	/* output triangles */
	for( BU_LIST_FOR( s, shell, &r->s_hd ) )
	{
		struct faceuse *fu;

		NMG_CK_SHELL( s );

		for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) )
		{
			struct loopuse *lu;

			NMG_CK_FACEUSE( fu );

			if( fu->orientation != OT_SAME )
				continue;

			for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) )
			{
				struct edgeuse *eu;
				int vert_count=0;

				NMG_CK_LOOPUSE( lu );

				if( BU_LIST_FIRST_MAGIC( &lu->down_hd ) != NMG_EDGEUSE_MAGIC )
					continue;

				/* list vertex numbers for each triangle */
				for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) )
				{
					NMG_CK_EDGEUSE( eu );

					v = eu->vu_p->v_p;
					NMG_CK_VERTEX( v );

					vert_count++;
					i = bu_ptbl_locate( &verts, (long *)v );
					if( i < 0 )
					{
						bu_ptbl_free( &verts);
						bu_log( "Vertex from eu x%x is not in nmgregion x%x\n", eu, r );
		/*XXX*/				bu_free( region_name, "region name" );
		/*XXX*/				bu_exit(1, "ERROR: Can't find vertex in list!\n");
					}

					fprintf( fp, " %d", i+1 );
				}
/* Output other info. for triangle ICOAT, component#, facet# */
/* XXX Map Icoat from material table later */
/* fprintf( fp, "%s icomp=%d material=%d:\n", (region_name+1), region_id, material_id );*/

				fprintf( fp, " %d    %d    %d\n", 0, region_id, ++tricount);

				if( vert_count > 3 )
				{
					bu_ptbl_free( &verts);
					bu_free( region_name, "region name" );
					bu_log( "lu x%x has %d vertices!\n", lu, vert_count );
					bu_exit(1, "ERROR: LU is not a triangle\n");
				}
				else if( vert_count < 3 )
					continue;
				tot_polygons++;
			}
		}
	}
/*	regions_converted++;
	printf("Processed region %s\n",region_name);
	printf("Regions attempted = %d Regions done = %d\n",regions_tried,regions_converted);
	fflush(stdout);
*/
	bu_ptbl_free( &verts);
	bu_free( region_name, "region name" );
}

/*
*			D O _ R E G I O N _ E N D
*
*  Called from db_walk_tree().
*
*  This routine must be prepared to run in parallel.
*/
union tree *do_region_end(register struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data)
{
	union tree		*ret_tree;
	struct bu_list		vhead;
	struct nmgregion	*r;

	RT_CK_FULL_PATH(pathp);
	RT_CK_TREE(curtree);
	RT_CK_TESS_TOL(tsp->ts_ttol);
	BN_CK_TOL(tsp->ts_tol);
	NMG_CK_MODEL(*tsp->ts_m);

	BU_LIST_INIT(&vhead);

	if (RT_G_DEBUG&DEBUG_TREEWALK || verbose) {
		char	*sofar = db_path_to_string(pathp);
		bu_log("\ndo_region_end(%d %d%%) %s\n",
			regions_tried,
			regions_tried>0 ? (regions_converted * 100) / regions_tried : 0,
			sofar);
		bu_free(sofar, "path string");
	}

	if (curtree->tr_op == OP_NOP)
		return  curtree;

	regions_tried++;

	/* Begin bu_bomb() protection */
	if( ncpu == 1 ) {
		if( BU_SETJUMP )  {
			/* Error, bail out */
			char *sofar;
			BU_UNSETJUMP;		/* Relinquish the protection */

			sofar = db_path_to_string(pathp);
			bu_log( "FAILED in Boolean evaluation: %s\n", sofar );
			fprintf(fpe,"Failed Bool. Eval.: %s\n",sofar);
			fflush(fpe);
			bu_free( (char *)sofar, "sofar" );

			/* Sometimes the NMG library adds debugging bits when
			 * it detects an internal error, before bombing out.
			 */
			rt_g.NMG_debug = NMG_debug;	/* restore mode */

			/* Release any intersector 2d tables */
			nmg_isect2d_final_cleanup();

			/* Release the tree memory & input regions */
/*XXX*/			/* db_free_tree(curtree);*/		/* Does an nmg_kr() */

			/* Get rid of (m)any other intermediate structures */
			if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )  {
				nmg_km(*tsp->ts_m);
			} else {
				bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
			}

			/* Now, make a new, clean model structure for next pass. */
			*tsp->ts_m = nmg_mm();
			goto out;
		}
	}
	printf("Attempting to process region %s\n",db_path_to_string( pathp ));
	fflush(stdout);
	ret_tree = nmg_booltree_evaluate( curtree, tsp->ts_tol, &rt_uniresource );	/* librt/nmg_bool.c */

	if( ret_tree )
		r = ret_tree->tr_d.td_r;
	else
	{
	    if (verbose) {
		printf( "\tNothing left of this region after Boolean evaluation\n" );
		fprintf( fpe, "WARNING: Nothing left after Boolean evaluation: %s\n",
			 db_path_to_string( pathp ));
		fflush(fpe);
	    }
	    regions_written++; /* don't count as a failure */
	    r = (struct nmgregion *)NULL;
	}
/*	regions_done++;  XXX */

	BU_UNSETJUMP;		/* Relinquish the protection */
	regions_converted++;

	if (r != (struct nmgregion *)NULL)
	{
		struct shell *s;
		int empty_region=0;
		int empty_model=0;

		/* Kill cracks */
		s = BU_LIST_FIRST( shell, &r->s_hd );
		while( BU_LIST_NOT_HEAD( &s->l, &r->s_hd ) )
		{
			struct shell *next_s;

			next_s = BU_LIST_PNEXT( shell, &s->l );
			if( nmg_kill_cracks( s ) )
			{
				if( nmg_ks( s ) )
				{
					empty_region = 1;
					break;
				}
			}
			s = next_s;
		}

		/* kill zero length edgeuses */
		if( !empty_region )
		{
			 empty_model = nmg_kill_zero_length_edgeuses( *tsp->ts_m );
		}

		if( !empty_region && !empty_model )
		{
			if( BU_SETJUMP )
			{
				char *sofar;

				BU_UNSETJUMP;

				sofar = db_path_to_string(pathp);
				bu_log( "FAILED in triangulator: %s\n", sofar );
				fprintf(fpe,"Failed in triangulator: %s\n",sofar);
				fflush(fpe);
				bu_free( (char *)sofar, "sofar" );

				/* Sometimes the NMG library adds debugging bits when
				 * it detects an internal error, before bombing out.
				 */
				rt_g.NMG_debug = NMG_debug;	/* restore mode */

				/* Release any intersector 2d tables */
				nmg_isect2d_final_cleanup();

				/* Get rid of (m)any other intermediate structures */
				if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )
				{
					nmg_km(*tsp->ts_m);
				}
				else
				{
					bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
				}

				/* Now, make a new, clean model structure for next pass. */
				*tsp->ts_m = nmg_mm();
				goto out;
			}
		/* Write the region to the TANKILL file */
			nmg_to_acad( r, pathp, tsp->ts_regionid, tsp->ts_gmater );

			regions_written++;

			BU_UNSETJUMP;
		}

		if( !empty_model )
			nmg_kr( r );
	}

out:
	/*
	 *  Dispose of original tree, so that all associated dynamic
	 *  memory is released now, not at the end of all regions.
	 *  A return of TREE_NULL from this routine signals an error,
	 *  and there is no point to adding _another_ message to our output,
	 *  so we need to cons up an OP_NOP node to return.
	 */


	if(regions_tried>0){
		float npercent, tpercent;

		npercent = (float)(regions_converted * 100) / regions_tried;
		tpercent = (float)(regions_written * 100) / regions_tried;
		printf("Tried %d regions, %d conv. to NMG's %d conv. to tri. nmgper = %.2f%% triper = %.2f%% \n",
		regions_tried, regions_converted, regions_written, npercent,tpercent);
	}

	db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */

	BU_GETUNION(curtree, tree);
	curtree->magic = RT_TREE_MAGIC;
	curtree->tr_op = OP_NOP;
	return(curtree);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.24
log
@first 10% of the review of the bu_bomb() instances.  updating many to bu_exit() for the instances where the error or exit condition aren't catastrophic errors (i.e. they wouldn't benefit from having a stack trace of how we got into that state code-wise).  this also makes it easier to refactor usages of log & exit too to the new routine.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.23 2007/09/15 16:23:04 brlcad Exp $ (BRL)";
d530 1
@


14.23
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.22 2007/07/26 01:13:51 brlcad Exp $ (BRL)";
d176 1
a176 2
			bu_log(  usage, argv[0]);
			exit(1);
d182 1
a182 2
		bu_log( usage, argv[0]);
		exit(1);
a191 1
			bu_log( "Cannot open output file (%s) for writing\n", output_file );
d193 1
a193 1
			exit( 1 );
a202 1
	bu_log( "Cannot open output file (%s) for writing\n", error_file );
d204 1
a204 1
		exit( 1 );
d212 1
a212 1
		exit(1);
d215 1
a215 2
	    bu_log( "db_dirbuild failed\n" );
	    exit(1);
d375 2
a376 2
						bu_log( "Vertex from eu x%x is not in nmgregion x%x\n", eu, r );
						bu_bomb( "Can't find vertex in list!!!" );
d383 2
a384 2
					bu_log( "lu x%x has %d vertices!!!!\n", lu, vert_count );
					bu_bomb( "LU is not a triangle" );
d463 1
a463 1
		/*XXX*/				bu_bomb( "Can't find vertex in list!!!" );
d478 2
a479 2
					bu_log( "lu x%x has %d vertices!!!!\n", lu, vert_count );
					bu_bomb( "LU is not a triangle" );
d544 1
a544 1
			 * it detects an internal error, before bu_bomb().
d633 1
a633 1
				 * it detects an internal error, before bu_bomb().
@


14.22
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.21 2007/05/18 04:13:43 brlcad Exp $ (BRL)";
d45 1
a45 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.21
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@a32 4
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.20 2007/04/29 02:05:02 johnranderson Exp $ (BRL)";
@


14.20
log
@Added check of return value from db_dirbuild()
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.19 2007/04/05 04:08:31 brlcad Exp $ (BRL)";
d389 1
a389 1
						rt_bomb( "Can't find vertex in list!!!" );
d397 1
a397 1
					rt_bomb( "LU is not a triangle" );
d476 1
a476 1
		/*XXX*/				rt_bomb( "Can't find vertex in list!!!" );
d492 1
a492 1
					rt_bomb( "LU is not a triangle" );
d543 1
a543 1
	/* Begin rt_bomb() protection */
d557 1
a557 1
			 * it detects an internal error, before rt_bomb().
d646 1
a646 1
				 * it detects an internal error, before rt_bomb().
@


14.19
log
@Shawn Baker identified a bug in g-dxf (which in turn was found in g-acad, g-nff, and g-obj too) where the -i argument ended up gobbling up the following argument incorrectly.  e.g g-dxf -i -o filename.dxf blah.g object would end up in a filename.dxf error.
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.18 2007/02/02 08:48:28 brlcad Exp $ (BRL)";
d226 4
a229 1
	db_dirbuild( dbip );
@


14.18
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.17 2007/01/27 01:41:32 brlcad Exp $ (BRL)";
d142 1
a142 1
	while ((c = bu_getopt(argc, argv, "a:n:o:r:vx:D:P:X:e:i:")) != EOF) {
@


14.17
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.16 2007/01/23 01:13:25 brlcad Exp $ (BRL)";
d142 1
a142 1
	while ((c = getopt(argc, argv, "a:n:o:r:vx:D:P:X:e:i:")) != EOF) {
d145 1
a145 1
			ttol.abs = atof(optarg);
d149 1
a149 1
			ttol.norm = atof(optarg);
d153 1
a153 1
			output_file = optarg;
d156 1
a156 1
			ttol.rel = atof(optarg);
d162 1
a162 1
			ncpu = atoi( optarg );
d166 1
a166 1
			sscanf( optarg, "%x", (unsigned int *)&rt_g.debug );
d169 1
a169 1
			tol.dist = atof(optarg);
d174 1
a174 1
			sscanf( optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
d178 1
a178 1
			error_file = optarg;
d190 1
a190 1
	if (optind+1 >= argc) {
d220 2
a221 2
	argc -= optind;
	argv += optind;
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.15 2007/01/20 14:36:43 brlcad Exp $ (BRL)";
d346 1
a346 1
 	for( BU_LIST_FOR( s, shell, &r->s_hd ) )
d433 1
a433 1
 	for( BU_LIST_FOR( s, shell, &r->s_hd ) )
d548 1
a548 1
	                bu_log( "FAILED in Boolean evaluation: %s\n", sofar );
d551 1
a551 1
                        bu_free( (char *)sofar, "sofar" );
@


14.15
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.14 2006/10/17 01:22:47 brlcad Exp $ (BRL)";
@


14.14
log
@Make it more explicitly clear that ACAD is not AutoCAD.  It's the 'Advanced Computer-Aided Design' system developed and used in-house by Lockheed Martin (formerly by General Dynamics).
@
text
@d4 1
a4 1
 * Copyright (c) 1996-2006 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.13 2006/01/28 00:36:27 brlcad Exp $ (BRL)";
@


14.13
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d24 6
a29 2
 *  Program to convert a BRL-CAD model (in a .g file) to an ACAD file
 *  by calling on the NMG booleans.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.12 2006/01/21 21:09:44 brlcad Exp $ (BRL)";
@


14.12
log
@a little less excitement about regions that evaluate to nothing, still report it if we're verbose a little more consistently.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.11 2006/01/18 06:46:13 brlcad Exp $ (BRL)";
d43 1
d47 1
a47 1
#include <string.h>
d49 1
a49 1
#include <strings.h>
@


14.11
log
@update copyright to 2006
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.10 2005/10/23 04:44:29 brlcad Exp $ (BRL)";
d580 2
a581 1
		printf( "\tNothing left of this region after Boolean evaluation!!!\n" );
d583 1
a583 1
			db_path_to_string( pathp ));
d585 3
a587 2
		regions_written++; /* don't count as a failure */
		r = (struct nmgregion *)NULL;
d594 1
a594 1
	if (r != 0)
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1996-2005 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.9 2005/09/09 05:50:29 brlcad Exp $ (BRL)";
@


14.9
log
@use BRL-CAD instead of brl-cad if only to be at least internally consistent and serve good example
@
text
@d30 1
a30 1
 *  
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.8 2005/08/28 00:33:33 brlcad Exp $ (BRL)";
d402 1
a402 1
	fprintf( fp, "%s\n", (region_name+1)); 
d424 1
a424 1
	fprintf( fp, "%s\n", (region_name+1)); 
d493 1
a493 1
/*	regions_converted++;  
d542 1
a542 1
			
d548 1
a548 1
                                
d588 1
a588 1
	
d653 1
a653 1
			
@


14.8
log
@use bu_setlinebuf instead of the old block that checked system 'types' and was replicated where needed
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d215 1
a215 1
	/* Open brl-cad database */
@


14.8.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d215 1
a215 1
	/* Open BRL-CAD database */
d402 1
a402 1
	fprintf( fp, "%s\n", (region_name+1));
d424 1
a424 1
	fprintf( fp, "%s\n", (region_name+1));
d493 1
a493 1
/*	regions_converted++;
d542 1
a542 1

d548 1
a548 1

d588 1
a588 1

d653 1
a653 1

@


14.7
log
@update copyright to 2005
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/conv/g-acad.c,v 14.6 2004/12/21 07:32:29 morrison Exp $ (BRL)";
d108 2
a109 12
#ifdef BSD
	setlinebuf( stderr );
#else
#	if defined( SYSV ) && !defined( sgi ) && !defined(CRAY2) && \
	 !defined(n16)
		(void) setvbuf( stderr, (char *) NULL, _IOLBF, BUFSIZ );
#	endif
#	if defined(sgi) && defined(mips)
		if( setlinebuf( stderr ) != 0 )
			perror("setlinebuf(stderr)");
#	endif
#endif
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1996-2004 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-acad.c,v 14.5 2004/12/21 06:58:41 morrison Exp $ (BRL)";
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a33 2
 *  
 *
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-acad.c,v 14.4 2004/12/21 06:44:32 morrison Exp $ (BRL)";
@


14.4
log
@remove the old distribution notice section
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1996-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-acad.c,v 14.3 2004/12/18 06:50:50 morrison Exp $ (BRL)";
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a34 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-acad.c,v 14.2 2004/12/18 02:38:09 morrison Exp $ (BRL)";
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file g-acad.c
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-acad.c,v 14.1 2004/11/16 19:42:12 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			G - A C A D . C
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-acad.c,v 1.5 2004/09/03 23:30:56 morrison Exp $ (BRL)";
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-acad.c,v 1.4 2004/08/02 23:01:47 morrison Exp $ (BRL)";
d695 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/conv/g-acad.c,v 1.3 2004/06/09 14:49:30 morrison Exp $ (BRL)";
d34 1
a34 1
#ifdef USE_STRING_H
@


1.3
log
@add unistd.h header for getopt()
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/conv/g-acad.c,v 1.2 2004/06/08 22:04:08 morrison Exp $ (BRL)";
d29 1
a29 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d33 1
a33 2


d41 9
d55 2
d58 2
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/conv/g-acad.c,v 1.27 2004/05/10 15:30:41 erikg Exp $ (BRL)";
a42 1
#include "externs.h"
@

