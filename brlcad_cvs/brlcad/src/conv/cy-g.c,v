head	14.11;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.2
	stable-branch:14.4
	rel-7-10-2:14.9
	rel-7-10-0:14.9
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.11
date	2007.10.22.08.47.38;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.09.15.16.23.04;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.02.20.08.19.47;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.25;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.02.27.05.22.22;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.30.19;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.50;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.02.38.09;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.56;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.50;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.11
log
@first 10% of the review of the bu_bomb() instances.  updating many to bu_exit() for the instances where the error or exit condition aren't catastrophic errors (i.e. they wouldn't benefit from having a stack trace of how we got into that state code-wise).  this also makes it easier to refactor usages of log & exit too to the new routine.
@
text
@/*                          C Y - G . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file cy-g.c
 *	This routine converts Cyberware Digitizer Data (laser scan data)
 *	to a single BRL-CAD ARS solid. The data must be in cylindrical scan
 *	format.
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <errno.h>

#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "wdb.h"
#include "../librt/debug.h"


#define LINE_LEN 256

static char *usage="Usage:\n\tcy-g input_laser_scan_file output_brlcad_file.g\n";

int
main(int argc, char **argv)
{
	FILE *infp;
	struct rt_wdb *outfp;
	char line[LINE_LEN];
	char *cptr;
	int rshift=5;
	int nlg=512,nlt=256;
	int x,y;
	fastf_t delta_z=0;
	fastf_t delta_angle;
	fastf_t angle=0.0;
	fastf_t *sins, *coss;
	fastf_t **curves;
	fastf_t *ptr;
	int first_non_zero=30000;
	int last_non_zero=(-1);
	int new_last=0;

	if( argc != 3 )
	{
		bu_log( "%s", usage );
		return 1;
	}

	if( (infp=fopen( argv[1], "r" )) == NULL )
	{
		bu_log( "Cannot open input file (%s)\n", argv[1] );
		bu_log( "%s", usage );
		return 1;
	}

	if( (outfp = wdb_fopen( argv[2] )) == NULL )
	{
		bu_log( "Cannot open output file (%s)\n", argv[2] );
		bu_log( "%s", usage );
		return 1;
	}


	/* read ASCII header section */
	while( 1 )
	{
		if( bu_fgets( line, LINE_LEN, infp ) == NULL )
		{
			bu_log( "Unexpected EOF while loking for data\n" );
			return 1;
		}
		printf( "%s", line );
		if( !strncmp( "DATA", line, 4 ) )
		{
			bu_log( "Found DATA\n" );
			break;
		}
		else if( !strncmp( "SPACE", line, 5 ) )
		{
			if( !strstr( line, "CYLINDRICAL" ) )
			{
				bu_log( "Can only handle cylindrical scans right now!\n" );
				return 1;
			}
		}
		else if( !strncmp( "NLG", line, 3 ) )
		{
			cptr = strchr( line, '=' );
			if( !cptr )
			{
				bu_log( "Error in setting NLG\n" );
				return 1;
			}
			nlg = atoi( ++cptr );
		}
		else if( !strncmp( "NLT", line, 3 ) )
		{
			cptr = strchr( line, '=' );
			if( !cptr )
			{
				bu_log( "Error in setting NLT\n" );
				return 1;
			}
			nlt = atoi( ++cptr );
		}
		else if( !strncmp( "LTINCR", line, 6 ) )
		{
			int tmp;

			cptr = strchr( line, '=' );
			if( !cptr )
			{
				bu_log( "Error in setting LTINCR\n" );
				return 1;
			}
			tmp = atoi( ++cptr );
			delta_z = (fastf_t)(tmp)/1000.0;
		}
		else if( !strncmp( "RSHIFT", line, 6 ) )
		{
			cptr = strchr( line, '=' );
			if( !cptr )
			{
				bu_log( "Error in setting RSHIFT\n" );
				return 1;
			}
			rshift = atoi( ++cptr );
		}
	}

	/* calculate angle between longitudinal measurements */
	delta_angle = bn_twopi/(fastf_t)nlg;

	/* allocate memory to hold vertices */
	curves = (fastf_t **)bu_malloc( (nlt+2)*sizeof( fastf_t ** ), "ars curve pointers" );
	for( y=0 ; y<nlt+2 ; y++ )
		curves[y] = (fastf_t *)bu_calloc( (nlg+1)*3,
			sizeof(fastf_t), "ars curve" );

	/* allocate memory for a table os sines and cosines */
	sins = (fastf_t *)bu_calloc( nlg+1, sizeof( fastf_t ), "sines" );
	coss = (fastf_t *)bu_calloc( nlg+1, sizeof( fastf_t ), "cosines" );

	/* fill in the sines and cosines table */
	for( x=0 ; x<nlg ; x++ )
	{
		angle = delta_angle * (fastf_t)x;
		sins[x] = sin(angle);
		coss[x] = cos(angle);
	}
	sins[nlg] = sins[0];
	coss[nlg] = coss[0];

	/* read the actual data */
	for( x=0 ; x<nlg ; x++ )
	{
		fastf_t z=0.0;

		for( y=0 ; y<nlt ; y++ )
		{
			short r;
			long radius;
			fastf_t rad;

			ptr = &curves[y+1][x*3];

			if( fread( &r, 2, 1, infp ) != 1 )
				bu_exit(1, "Unexpected end-of-file encountered in [%s]\n", argv[1]);
			if( r < 0 )
				rad = 0.0;
			else
			{
				if( y < first_non_zero )
					first_non_zero = y;
				radius = (long)(r) << rshift;
				rad = (fastf_t)radius/1000.0;
				if( y > last_non_zero )
					last_non_zero = y;
			}
			*ptr = rad * coss[x];
			*(ptr+1) = rad * sins[x];
			*(ptr+2) = z;
/*			bu_log( "%d %d: %g (%d) (%g %g %g)\n", x, y, rad, r, V3ARGS( ptr ) ); */

			/* duplicate the first point at the end of the curve */
			if( x == 0 )
			{
				ptr = &curves[y+1][nlg*3];
				*ptr = rad * coss[x];
				*(ptr+1) = rad * sins[x];
				*(ptr+2) = z;
			}
			z += delta_z;
		}
	}

	/* finished with input file */
	fclose( infp );

	/* eliminate single vertex spikes on each curve */
	for( y=first_non_zero ; y<=last_non_zero ; y++ )
	{
		int is_zero=1;

		for( x=0 ; x<nlg ; x++ )
		{
			fastf_t *next, *prev;

			ptr = &curves[y][x*3];
			if( x == 0 )
				prev = &curves[y][nlg*3];
			else
				prev = ptr - 3;
			next = ptr + 3;

			if( ptr[0] != 0.0 || ptr[1] != 0.0 )
			{
				if( prev[0] == 0.0 && prev[1] == 0.0 &&
				    next[0] == 0.0 && next[1] == 0.0 )
				{
					ptr[0] = 0.0;
					ptr[1] = 0.0;
				}
				else
					is_zero = 0;
			}
		}
		if( is_zero && first_non_zero == y )
			first_non_zero = y + 1;
		else
			new_last = y;
	}

	last_non_zero = new_last;

	/* write out ARS solid
	 * First curve is all zeros (first_non_zero - 1)
	 * Last curve is all zeros (last_non_zero + 1 )
	 * Number of curves is (last_non_zero - first_non_zero + 2)
	 */
	mk_id( outfp, "Laser Scan" );
	mk_ars( outfp, "laser_scan", last_non_zero - first_non_zero + 2, nlg, &curves[first_non_zero-1] );
	wdb_close( outfp );
	return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d193 1
a193 1
				bu_bomb( "Unexpected EOF\n" );
@


14.9
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d32 1
a32 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d96 1
a96 1
		if( fgets( line, LINE_LEN, infp ) == NULL )
@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.6
log
@a variety of warning quellings, missing stdlib, calls to exit with a negative, ws.
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.5
log
@update copyright to 2006
@
text
@d30 1
d34 1
a34 1
#include <string.h>
d36 1
a36 1
#include <strings.h>
d39 1
d48 1
d76 1
a76 1
		exit( 1 );
d83 1
a83 1
		exit( 1 );
d90 1
a90 1
		exit( 1 );
d100 1
a100 1
			exit( 1 );
d113 1
a113 1
				exit( 1 );
d122 1
a122 1
				exit( 1 );
d132 1
a132 1
				exit( 1 );
d144 1
a144 1
				exit( 1 );
d155 1
a155 1
				exit( 1 );
@


14.4
log
@update copyright to 2005
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.2
log
@acquire copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file cy-g.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d252 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@a8 2


d11 1
a11 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d7 1
a7 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

