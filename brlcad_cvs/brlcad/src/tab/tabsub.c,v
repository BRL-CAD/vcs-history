head	14.16;
access;
symbols
	rel-7-10-4:14.13
	STABLE:14.13.0.2
	stable-branch:14.3
	rel-7-10-2:14.13
	rel-7-10-0:14.13
	rel-7-8-4:14.10
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.16
date	2007.11.21.20.49.11;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.11.21.19.49.12;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.02.20.08.19.50;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.48;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.37.01;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.07.09.18.25.32;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.04.05.18.19.55;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.28.00.36.29;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2006.01.18.06.46.24;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.38;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.05.04.03.39.21;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2005.05.03.22.29.41;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.12;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.53.50;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.31.00;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.37;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.55;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;

14.8.2.1
date	2006.04.07.19.34.23;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.16
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                        T A B S U B . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file tabsub.c
 *
 *  This program is a simple macro processor for taking
 *  a big table of input values, and a prototype output document,
 *  and generating an instantiation of the output document
 *  for each line of input values.
 *
 *  This program follows "tabinterp", and is the last step in creating
 *  RT animation scripts.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.15 2007/11/21 19:49:12 erikgreenwald Exp $ (ARL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <string.h>

#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif
#ifdef HAVE_SYS_STAT_H
#  include <sys/stat.h>
#endif
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"


int	debug = 0;

void	get_proto(char **buffer, char *file);
void	do_lines(FILE *fp, char *buffer);
void	out_mat(matp_t m, FILE *fp);
int	str2chan_index( char *s );
int	multi_words( char *words[], int	nwords );


/*
 *			M A I N
 *
 */
int
main(int argc, char **argv)
{
    char	*prototype;		/* Contains full text of prototype document */
    char	proto_file[256] = {0};

    FILE	*table;
    char	table_file[256] = {0};

    if( argc < 2 || argc > 3 )  {
	fprintf(stderr,"Usage:  tabsub prototype_file [table_file]\n");
	bu_exit(12, NULL);
    }
    strncpy(proto_file, argv[1], 255);

    /* Acquire in-core copy of prototype file */
    get_proto( &prototype, proto_file );

    if( argc < 3 )  {
	table = stdin;
    } else {
	strncpy(table_file, argv[2], 255);
	if( (table = fopen( table_file, "r" )) == NULL )  {
	    perror( table_file );
	    bu_exit(3, NULL);
	}
    }
    do_lines( table, prototype );
    return 0;
}

void
get_proto(char **buffer, char *file)
{
    struct stat	sb;
    int	fd;
    int bytes_read = 0;

    if (file == NULL) {
	bu_log("tabsub: get_proto given null file name\n");
	return;
    }

    if ( (fd = open( file, 0 )) < 0) {
	perror(file);
	bu_exit(1, NULL);
    }

    if (fstat( fd, &sb ) != 0 )  {
	perror(file);
	bu_exit(1, NULL);
    }

    if( sb.st_size == 0 )  {
	fprintf(stderr,"tabsub:  %s is empty\n", file );
	bu_exit(1, NULL);
    }
    *buffer = bu_malloc( (size_t)(sb.st_size+4), "prototype document");
    bytes_read = read( fd, *buffer, (size_t)sb.st_size );
    if ( bytes_read != sb.st_size )  {
	if (bytes_read < 0) {
	    perror(file);
	}
	printf("only read %d bytes (expecting %ld)\n", bytes_read, (long)sb.st_size);
	bu_exit(2, NULL);
    }
    (*buffer)[sb.st_size] = '\0';
    return;
}

#define	NCHANS	1024
char	linebuf[NCHANS*10];
int	line;				/* input line number */

char	*chanwords[NCHANS+1];
int	nwords;				/* # words in chanwords[] */

#define NTOKENWORDS	16
char	*tokenwords[NTOKENWORDS+1];

void
do_lines(FILE *fp, char *buffer)
{
#define TOKLEN	128
	char	token[TOKLEN];
	int	ntokenwords;
	register char	*cp;
	register char	*tp;
	int	i;

	for( line=0; /*NIL*/; line++ )  {
		linebuf[0] = '\0';
		(void)bu_fgets( linebuf, sizeof(linebuf), fp );
		if( feof(fp) )
			break;

		/* Skip blank or commented out lines */
		if( linebuf[0] == '\0' ||
		    linebuf[0] == '#' ||
		    linebuf[0] == '\n' )
			continue;

		if(debug)  {
			fprintf(stderr, "Prototype=\n%s", buffer);
			fprintf(stderr, "Line %d='%s'\n", line, linebuf);
		}

		/* Here, there is no way to check for too many words */
		nwords = rt_split_cmd( chanwords, NCHANS+1, linebuf );

		for( cp=buffer; *cp != '\0'; )  {
			if(debug) fputc( *cp, stderr );
			/* Copy all plain text, verbatim */
			if( *cp != '@@' )  {
				putc( *cp++, stdout );
				continue;
			}

			/* An '@@' sign has been seen, slurp up a token */
			cp++;			/* skip '@@' */
			if( *cp == '@@' )  {
				/* Double '@@' is escape for single one
				 * (just like ARPANET TACs)
				 */
				putc( '@@', stdout );
				cp++;		/* skip '@@' */
				continue;
			}
			if( *cp == '(' )  {
				cp++;		/* skip '(' */
				tp = token;
				while( *cp && *cp != ')' && tp<&token[TOKLEN-1])  {
					*tp++ = *cp++;
				}
				*tp++ = '\0';
				cp++;		/* skip ')' */
			} else if( isdigit( *cp ) )  {
				tp = token;
				while( isdigit( *cp ) && tp<&token[TOKLEN-1] )  {
					*tp++ = *cp++;
				}
				*tp++ = '\0';
			} else {
				fprintf( stderr,"Line %d:  Bad sequence '@@%c'\n", line, *cp);
				fprintf( stdout, "@@%c", *cp++ );
				continue;
			}
			if(debug) fprintf(stderr,"token='%s'\n", token);

			if( isdigit( token[0] ) )  {
				fputs( chanwords[str2chan_index(token)],
					stdout );
				continue;
			}
			if( strcmp( token, "line" ) == 0 )  {
				fprintf(stdout, "%d", line );
				continue;
			}
			if( strcmp( token, "time" ) == 0 )  {
				fputs( chanwords[0], stdout );
				continue;
			}

			/* Check here for multi-word tokens */
			ntokenwords = rt_split_cmd( tokenwords, NTOKENWORDS+1,
				token );

			/*  If first character of a word is '@@' or '%', that
			 *  signifies substituting the value of the
			 *  indicated channel.  Otherwise the word is literal.
			 */
			for( i=1; i<ntokenwords; i++ )  {
				char	c;
				int	chan;
				c = tokenwords[i][0];
				if( c != '@@' && c != '%' )  continue;
				chan = str2chan_index( &tokenwords[i][1] );
				tokenwords[i] = chanwords[chan];
			}

			if( (i=multi_words( tokenwords, ntokenwords )) >= 0 )
				continue;

			if( i == -1 )  {
				fprintf(stderr,
					"Line %d: keyword @@(%s) encountered error\n",
					line, token);
				fprintf(stdout,
					"@@(%s)", token );
			} else {
				fprintf(stderr,
					"Line %d: keyword @@(%s) unknown\n",
					line, token);
				fprintf(stdout,
					"@@(%s)", token );
			}
			for( i=0; i<ntokenwords; i++ )  {
				fprintf( stderr,
					"word[%2d] = '%s'\n",
					i, tokenwords[i] );
			}
		}
	}
}

/*
 *  Returns -
 *	-2	unknown keyword
 *	-1	error in processing keyword
 *	 0	OK
 */
int
multi_words( char *words[], int	nwords )
{

	if( strcmp( words[0], "rot" ) == 0 )  {
		mat_t	mat;

		/* Expects rotations rx, ry, rz, in degrees */
		if( nwords < 4 )  return(-1);
		MAT_IDN( mat );
		bn_mat_angles( mat,
		    atof( words[1] ),
		    atof( words[2] ),
		    atof( words[3] ) );
		out_mat( mat, stdout );
		return(0);
	}
	if( strcmp( words[0], "xlate" ) == 0 )  {
		mat_t	mat;

		if( nwords < 4 )  return(-1);
		/* Expects translations tx, ty, tz */
		MAT_IDN( mat );
		MAT_DELTAS( mat,
		    atof( words[1] ),
		    atof( words[2] ),
		    atof( words[3] ) );
		out_mat( mat, stdout );
		return(0);
	}
	if( strcmp( words[0], "rot_at" ) == 0 )  {
		mat_t	mat;
		mat_t	mat1;
		mat_t	mat2;
		mat_t	mat3;

		/* JG - Expects x, y, z, rx, ry, rz               */
		/* Translation back to the origin by (-x,-y,-z)   */
		/* is done first, then the rotation, and finally  */
		/* back into the original position by (+x,+y,+z). */

		if( nwords < 7 )  return(-1);

		MAT_IDN( mat1 );
		MAT_IDN( mat2 );
		MAT_IDN( mat3 );

		MAT_DELTAS( mat1,
		    -atof( words[1] ),
		    -atof( words[2] ),
		    -atof( words[3] ) );

		bn_mat_angles( mat2,
		    atof( words[4] ),
		    atof( words[5] ),
		    atof( words[6] ) );

		MAT_DELTAS( mat3,
		    atof( words[1] ),
		    atof( words[2] ),
		    atof( words[3] ) );

		bn_mat_mul( mat, mat2, mat1 );
		bn_mat_mul2( mat3, mat );

		out_mat( mat, stdout );
		return(0);
	}
	if( strcmp( words[0], "orient" ) == 0 )  {
		register int i;
		mat_t	mat;
		double	args[8];

		/* Expects tx, ty, tz, rx, ry, rz, [scale]. */
		/* All rotation is done first, then translation */
		/* Note: word[0] and args[0] are the keyword */
		if( nwords < 6+1 )  return(-1);
		for( i=1; i<6+1; i++ )
			args[i] = 0;
		args[7] = 1.0;	/* optional arg, default to 1 */
		for( i=1; i<nwords; i++ )
			args[i] = atof( words[i] );
		MAT_IDN( mat );
		bn_mat_angles( mat, args[4], args[5], args[6] );
		MAT_DELTAS( mat, args[1], args[2], args[3] );
		if( NEAR_ZERO( args[7], VDIVIDE_TOL ) )  {
			/* Nearly zero, signal error */
			fprintf(stderr,"Orient scale arg is near zero ('%s')\n",
				words[7] );
			return(-1);
		} else {
			mat[15] = 1 / args[7];
		}
		out_mat( mat, stdout );
		return(0);
	}
	if( strcmp( words[0], "ae" ) == 0 )  {
		mat_t	mat;
		fastf_t	az, el;

		if( nwords < 3 )  return(-1);
		/* Expects azimuth, elev, optional twist */
		az = atof(words[1]);
		el = atof(words[2]);
#if 0
		if( nwords == 3 )
			twist = 0.0;
		else
			twist = atof(words[3]);
#endif
		MAT_IDN( mat );
		/* XXX does not take twist, for now XXX */
		bn_mat_ae( mat, az, el );
		out_mat( mat, stdout );
		return(0);
	}
	if( strcmp( words[0], "arb_rot_pt" ) == 0 )  {
		mat_t	mat;
		point_t	pt1, pt2;
		vect_t	dir;
		fastf_t	ang;

		if( nwords < 1+3+3+1 )  return(-1);
		/* Expects point1, point2, angle */
		VSET( pt1, atof(words[1]), atof(words[2]), atof(words[3]) );
		VSET( pt2, atof(words[4]), atof(words[5]), atof(words[6]) );
		ang = atof(words[7]) * bn_degtorad;
		VSUB2( dir, pt2, pt2 );
		VUNITIZE(dir);
		MAT_IDN( mat );
		bn_mat_arb_rot( mat, pt1, dir, ang );
		out_mat( mat, stdout );
		return(0);
	}
	if( strcmp( words[0], "arb_rot_dir" ) == 0 )  {
		mat_t	mat;
		point_t	pt1;
		vect_t	dir;
		fastf_t	ang;

		if( nwords < 1+3+3+1 )  return(-1);
		/* Expects point1, dir, angle */
		VSET( pt1, atof(words[1]), atof(words[2]), atof(words[3]) );
		VSET( dir, atof(words[4]), atof(words[5]), atof(words[6]) );
		ang = atof(words[7]) * bn_degtorad;
		VUNITIZE(dir);
		MAT_IDN( mat );
		bn_mat_arb_rot( mat, pt1, dir, ang );
		out_mat( mat, stdout );
		return(0);
	}
	if( strcmp( words[0], "quat" ) == 0 )  {
		mat_t	mat;
		quat_t	quat;

		/* Usage: quat x,y,z,w */
		if( nwords < 5 ) return -1;
		QSET( quat, atof(words[1]), atof(words[2]),
			atof(words[3]), atof(words[4]) );

		quat_quat2mat( mat, quat );
		out_mat( mat, stdout);
		return 0;
	}
	if( strcmp( words[0], "fromto" ) == 0 )  {
		mat_t	mat;
		point_t	cur;
		point_t	next;
		vect_t	from;
		vect_t	to;

		/* Usage: fromto +Z cur_xyz next_xyz */
		if( nwords < 8 )  return -1;
		if( strcmp( words[1], "+X" ) == 0 )  {
			VSET( from, 1, 0, 0 );
		} else if( strcmp( words[1], "-X" ) == 0 )  {
			VSET( from, -1, 0, 0 );
		} else if( strcmp( words[1], "+Y" ) == 0 )  {
			VSET( from, 0, 1, 0 );
		} else if( strcmp( words[1], "-Y" ) == 0 )  {
			VSET( from, 0, -1, 0 );
		} else if( strcmp( words[1], "+Z" ) == 0 )  {
			VSET( from, 0, 0, 1 );
		} else if( strcmp( words[1], "-Z" ) == 0 )  {
			VSET( from, 0, 0, -1 );
		} else {
			fprintf(stderr,"fromto '%s' is not +/-XYZ\n", words[1]);
			return -1;
		}
		VSET( cur, atof(words[2]), atof(words[3]), atof(words[4]) );
		VSET( next, atof(words[5]), atof(words[6]), atof(words[7]) );
		VSUB2( to, next, cur );
		VUNITIZE(to);
		bn_mat_fromto( mat, from, to );
		/* Check to see if it worked. */
		{
			vect_t	got;

			MAT4X3VEC( got, mat, from );
			if( VDOT( got, to ) < 0.9 )  {
				bu_log("\ntabsub ERROR: At t=%s, bn_mat_fromto failed!\n", chanwords[0] );
				VPRINT("\tfrom", from);
				VPRINT("\tto", to);
				VPRINT("\tgot", got);
			}
		}
		out_mat( mat, stdout );
		return 0;
	}
	return(-2);		/* Unknown keyword */
}

/*
 *			S T R 2 C H A N _ I N D E X
 *
 *  Convert an ascii string to a channel index.
 *  Specifying channel 0 selects column (and thus subscript) 1,
 *  because column 0 contains the current time.
 *  Thus, valid channel values are 0 through nwords-2,
 *  resulting in column numbers 1 through nwords-1.
 *
 *  To signal an error, 0 is returned;  this will index the time column.
 */
int
str2chan_index( char *s )
{
	int	chan;

	chan = atoi( s );
	if( chan < 0 || chan > nwords-2 )  {
		fprintf(stderr,"Line %d:  chan %d out of range 0..%d\n", line, chan, nwords-2 );
		return(0);		/* Flag [0]:  time channel */
	}
	return(chan+1);
}

void
out_mat(matp_t m, FILE *fp)
{
	fprintf( fp, "\t%.9e %.9e %.9e %.9e\n", m[0], m[1], m[2], m[3] );
	fprintf( fp, "\t%.9e %.9e %.9e %.9e\n", m[4], m[5], m[6], m[7] );
	fprintf( fp, "\t%.9e %.9e %.9e %.9e\n", m[8], m[9], m[10], m[11] );
	fprintf( fp, "\t%.9e %.9e %.9e %.9e", m[12], m[13], m[14], m[15] );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@exit->bu_exit where applicable
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.14 2007/09/15 16:23:23 brlcad Exp $ (ARL)";
d88 1
a88 1
	bu_exit(12, "");
d101 1
a101 1
	    bu_exit(3, "");
d122 1
a122 1
	bu_exit(1, "");
d127 1
a127 1
	bu_exit(1, "");
d132 1
a132 1
	bu_exit(1, "");
d141 1
a141 1
	bu_exit(2, "");
@


14.14
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.13 2007/02/20 08:19:50 brlcad Exp $ (ARL)";
d88 1
a88 1
	exit(12);
d101 1
a101 1
	    exit(3);
d122 1
a122 1
	exit(1);
d127 1
a127 1
	exit(1);
d132 1
a132 1
	exit(1);
d141 1
a141 1
	exit(2);
@


14.13
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.12 2007/01/23 01:13:48 brlcad Exp $ (ARL)";
d47 2
a48 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.11 2007/01/20 14:37:01 brlcad Exp $ (ARL)";
d172 1
a172 1
		(void)fgets( linebuf, sizeof(linebuf), fp );
@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.10 2006/07/09 18:25:32 brlcad Exp $ (ARL)";
@


14.10
log
@add additional error checking to make sure a -1 return value from read() is handled
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.9 2006/04/05 18:19:55 brlcad Exp $ (ARL)";
@


14.9
log
@more header/warning cleanup from Intel compiler warnings on Altix
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.8 2006/01/28 00:36:29 brlcad Exp $ (ARL)";
d141 3
a144 1
	perror(file);
@


14.8
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.7 2006/01/18 06:46:24 brlcad Exp $ (ARL)";
d59 3
@


14.8.2.1
log
@update from HEAD
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.8 2006/01/28 00:36:29 brlcad Exp $ (ARL)";
a58 3
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
@


14.7
log
@update copyright to 2006
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.6 2005/10/23 04:44:38 brlcad Exp $ (ARL)";
d44 4
a52 4

#include <stdio.h>
#include <ctype.h>
#include <math.h>
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.5 2005/05/04 03:39:21 brlcad Exp $ (ARL)";
@


14.5
log
@cast stat size to a safe type in case off_t is a 64bit type
@
text
@d33 1
a33 1
 *  
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.4 2005/05/03 22:29:41 brlcad Exp $ (ARL)";
d86 1
a86 1
    
d95 1
a95 1
    
d297 1
a297 1
		bn_mat_angles( mat, 
d310 1
a310 1
		MAT_DELTAS( mat, 
d334 1
a334 1
		MAT_DELTAS( mat1, 
d339 1
a339 1
		bn_mat_angles( mat2, 
d344 1
a344 1
		MAT_DELTAS( mat3, 
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d33 1
a33 1
 *
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d86 1
a86 1

d95 1
a95 1

d297 1
a297 1
		bn_mat_angles( mat,
d310 1
a310 1
		MAT_DELTAS( mat,
d334 1
a334 1
		MAT_DELTAS( mat1,
d339 1
a339 1
		bn_mat_angles( mat2,
d344 1
a344 1
		MAT_DELTAS( mat3,
@


14.4
log
@fix a bug on filesystems computing the buffer size on 64bit filesystems.  we shouldn't directly attempt to allocate a buffer equal to the input file size, but with the size_t it should actually work (casting from off_t) so long as the size is less than max size_t.  add some extra error checking while we're in here and get rid of a global.
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.3 2005/01/30 20:31:12 brlcad Exp $ (ARL)";
d135 1
a135 1
    *buffer = bu_malloc( sb.st_size+4, "prototype document");
@


14.3
log
@update copyright to 2005
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/tab/tabsub.c,v 14.2 2004/12/21 03:53:50 butler Exp $ (ARL)";
a43 2


d45 1
a45 1
#include <string.h>
d47 1
a47 1
#include <strings.h>
d53 5
a57 3
#if defined(HAVE_UNIX_IO)
# include <sys/types.h>
# include <sys/stat.h>
a59 1

d64 1
d67 2
a68 4
char	*prototype;		/* Contains full text of prototype document */

void	get_proto(char *file);
void	do_lines(FILE *fp);
d81 2
a82 1
	FILE	*table;
d84 23
a106 18
	if( argc < 1 || argc > 3 )  {
		fprintf(stderr,"Usage:  tabsub prototype_file [table_file]\n");
		exit(12);
	}

	/* Acquire in-core copy of prototype file */
	get_proto( argv[1] );

	if( argc < 3 )  {
		table = stdin;
	} else {
		if( (table = fopen( argv[2], "r" )) == NULL )  {
			perror( argv[2] );
			exit(3);
		}
	}
	do_lines( table );
	return 0;
d110 1
a110 1
get_proto(char *file)
d112 32
a143 17
	struct stat	sb;
	int	fd;

	if( (fd = open( file, 0 )) < 0 || stat( file, &sb ) < 0 )  {
		perror(file);
		exit(1);
	}
	if( sb.st_size == 0 )  {
		fprintf(stderr,"tabsub:  %s is empty\n", file );
		exit(1);
	}
	prototype = bu_malloc( sb.st_size+4, "prototype document");
	if( read( fd, prototype, sb.st_size ) != sb.st_size )  {
		perror(file);
		exit(2);
	}
	prototype[sb.st_size] = '\0';
d157 1
a157 1
do_lines(FILE *fp)
d179 1
a179 1
			fprintf(stderr, "Prototype=\n%s", prototype);
d186 1
a186 1
		for( cp=prototype; *cp != '\0'; )  {
@


14.2
log
@GPL license changes
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/tab/tabsub.c,v 14.1 2004/11/16 19:42:31 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			T A B S U B . C
a36 9
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/tab/tabsub.c,v 1.4 2004/09/03 23:31:00 morrison Exp $ (ARL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/tab/tabsub.c,v 1.3 2004/08/02 23:01:52 morrison Exp $ (ARL)";
d502 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/tab/tabsub.c,v 1.2 2004/06/08 22:04:37 morrison Exp $ (ARL)";
d36 1
a36 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d32 1
a32 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/tab/tabsub.c,v 11.18 2004/05/10 15:30:50 erikg Exp $ (ARL)";
a53 1
#include "externs.h"
@

