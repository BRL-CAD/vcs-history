head	14.15;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.4
	rel-7-10-2:14.12
	rel-7-10-0:14.12
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.15
date	2007.12.02.22.34.24;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.16.18.53;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.09.15.16.23.20;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.02.20.08.19.50;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.27.01.41.45;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.26.03.30.22;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.45;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.36.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.02.27.10.08.41;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.38;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.31.09;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2004.12.24.01.40.00;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.06.38.22;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.34;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.44;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                    R E A D - R T L O G . C
 * BRL-CAD
 *
 * Copyright (c) 1991-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file read-rtlog.c
 *
 *  This is a program will read an RT log file.  It is meant to be
 *  used by any other program that needs to read an RT log file to
 *  extract the model size, orientation, eye position, azimuth, and
 *  elevation from the log file.
 *
 *  Authors -
 *	Susanne L. Muuss, J.D.
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg. 394
 *	The U. S. Army Ballistic Reasearch Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */
#ifndef lint
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.14 2007/11/21 16:18:53 erikgreenwald Exp $";
#endif

#include "common.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "bu.h"
#include "raytrace.h"

#define BUFF_LEN 256
#define FALSE 0
#define TRUE 1


extern int	verbose;


/*		R E A D _ R T _ F I L E
 *
 * Read an RT program's log file line by line until it either finds
 * view, orientation, eye_postion, and size of the model, or it hits the
 * end of file.  When a colon is found, sscanf() retrieves the
 * necessary information.  It takes a file pointer, file name, and a matrix
 * pointer as parameters.  It returns 0 okay or < 0 failure.
 */

int
read_rt_file(FILE *infp, char *name, fastf_t *model2view)
{
	FILE		*fp;
	fastf_t		azimuth;		/* part of the view */
	fastf_t		elevation;		/* part of the view */
	quat_t		orientation;		/* orientation */
	point_t		eye_pos;
	fastf_t		m_size;			/* size of model in mm */
	char		*ret;			/* return code for fgets */
	char		string[BUFF_LEN];	/* temporary buffer */
	char		*arg_ptr;		/* place holder */
	char		forget_it[9];		/* "azimuth" catcher, then forget */
	int		i;			/* reusable counter */
	int		num;			/* return code for sscanf */
	int		seen_view;		/* these are flags.  */
	int		seen_orientation;
	int		seen_eye_pos;
	int		seen_size;

	mat_t		rotate, xlate;


	/* Open the incoming file for reading */

	fp = fopen(name, "r");
	if( fp == NULL )  {
		perror(name);
		bu_exit(EXIT_FAILURE, "unable to open file for reading");
	}

	/* Set all flags to ready state.  */

	seen_view = FALSE;
	seen_orientation = FALSE;
	seen_eye_pos = FALSE;
	seen_size = FALSE;

	if(verbose)  {
		fprintf(stderr, "set flags: view:%d, orient:%d, eye_pos:%d, size:%d\n",
		seen_view, seen_orientation, seen_eye_pos, seen_size);
	}

	/* feof returns 1 on failure */

	while( feof(infp) == 0 )  {

		/* clear the buffer */
		for( i = 0; i < BUFF_LEN; i++ )  {
			string[i] = '\0';
		}
		ret = bu_fgets(string, BUFF_LEN, infp);

		if( ret == NULL )  {
			/* There are two times when NULL might be seen:
			 * at the end of the file (handled above) and
			 * when the process dies horriblely and unexpectedly.
			 */

			if( feof(infp) )
				break;

			/* This needs to be seen only if there is an
			 * unexpected end.
			 */
			fprintf(stderr, "read_rt_file: read failure on file %s\n",
				name);
			return(-1);
		}

		/* Check the first for a colon in the buffer.  If there is
		 * one, replace it with a NULL, and set a pointer to the
		 * next space.  Then feed the buffer to
		 * strcmp see whether it is the view, the orientation,
		 * the eye_position, or the size.  If it is, then sscanf()
		 * the needed information into the appropriate variables.
		 * If the keyword is not found, go back for another line.
		 *
		 * Set arg_ptr to NULL so it can be used as a flag to verify
		 * finding a colon in the input buffer.
		 */

		arg_ptr = NULL;

		for( i = 0; i < BUFF_LEN; i++ )  {
			/* Check to make sure the first char. is not a NULL;
			 * if it is, go back for a new line.
			 */
			if( string[i] == '\0' )  {
				break;
			}
			if( string[i] == ':')  {
				/* If a colon is found, set arg_ptr to the
				 * address of the colon, and break: no need to
				 * look for more colons on this line.
				 */

				if(verbose)  {
					fprintf(stderr, "found colon\n");
				}

				string[i] = '\0';
				arg_ptr = &string[++i];		/* increment before using */
				break;
			}
		}

		/* Check to see if a colon has been found.  If not, get another
		 * input line.
		 */

		if( arg_ptr == NULL )  {
			continue;
		}

		/* Now compare the first word in the buffer with the
		 * key words wanted.  If there is a match, read the
		 * information that follows into the appropriate
		 * variable, and set a flag to indicate that the
		 * magic thing has been seen.
		 *
		 * Note two points of interest: scanf() does not like %g;
		 * use %lf.  Likewise, don't use %g for printing out info:
		 * it might get rounded to the nearest integer.  Use %.6f
		 * instead.
		 * Also, if loading a whole array of characters
		 * with %s, then the name of the array can be used for the
		 * destination.  However, if the characters are loaded
		 * individually into the subsripted spots with %c (or equiv),
		 * the address of the location must be provided: &eye_pos[0].
		 */

		if(strcmp(string, "View") == 0)  {
			num = sscanf(arg_ptr, "%lf %9s %lf", &azimuth, forget_it, &elevation);
			if( num != 3)  {
				fprintf(stderr, "View= %.6f %s %.6f elevation\n", azimuth, forget_it, elevation);
				return(-1);
			}
			seen_view = TRUE;
		} else if(strcmp(string, "Orientation") == 0)  {
			num = sscanf(arg_ptr, "%lf, %lf, %lf, %lf",
				&orientation[0], &orientation[1], &orientation[2],
				&orientation[3]);

			if(num != 4)  {
				fprintf(stderr, "Orientation= %.6f, %.6f, %.6f, %.6f\n",
					V4ARGS(orientation) );
				return(-1);
			}
			seen_orientation = TRUE;
		} else if(strcmp(string, "Eye_pos") == 0)  {
			num = sscanf(arg_ptr, "%lf, %lf, %lf", &eye_pos[0],
				&eye_pos[1], &eye_pos[2]);
			if( num != 3)  {
				fprintf(stderr, "Eye_pos= %.6f, %.6f, %.6f\n",
					V3ARGS(eye_pos) );
				return(-1);
			}
			seen_eye_pos = TRUE;
		} else if(strcmp(string, "Size") == 0)  {
			num = sscanf(arg_ptr, "%lf", &m_size);
			if(num != 1)  {
				fprintf(stderr, "Size=%.6f\n", m_size);
				return(-1);
			}
			seen_size = TRUE;
		}
	}

	/* Check that all the information to proceed is available */

	if( seen_view != TRUE )  {
		fprintf(stderr, "View not read for %s!\n", name);
		return(-1);
	}

	if( seen_orientation != TRUE )  {
		fprintf(stderr, "Orientation not read for %s!\n", name);
		return(-1);
	}

	if( seen_eye_pos != TRUE )  {
		fprintf(stderr, "Eye_pos not read for %s!\n", name);
		return(-1);
	}

	if ( seen_size != TRUE )  {
		fprintf(stderr, "Size not read for %s!\n", name);
		return(-1);
	}

	if( verbose )  {
		/* Take your chances on the %g with the orientation: it is difficult
		 * to say how many figures it will take to print the orientation back,
		 * and it is disconcerting to have it come back as 0.
		 */

		fprintf(stderr, "logfile: %s\n", name);
		fprintf(stderr, "view: azimuth %.6f; elevation: %.6f\n", azimuth, elevation);
		fprintf(stderr, "orientation: %g, %g, %g, %g\n", V4ARGS(orientation) );
		fprintf(stderr, "eye_pos: %.6f, %.6f, %.6f\n", V3ARGS(eye_pos) );
		fprintf(stderr, "size: %.6fmm\n", m_size);
	}

	/* Build the view2model matrix. */

	quat_quat2mat( rotate, orientation );
	rotate[15] = 0.5 * m_size;
	MAT_IDN( xlate );
	MAT_DELTAS_VEC_NEG( xlate, eye_pos);
	bn_mat_mul( model2view, rotate, xlate );

	if(verbose)  {
		 bn_mat_print("model2view", model2view);
	}

	fclose(fp);		/* clean up */
	return(0);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@change bu_bomb to bu_exit when the sky isn't really falling
@
text
@d37 1
a37 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.13 2007/09/15 16:23:20 brlcad Exp $";
d202 1
a202 1
			num = sscanf(arg_ptr, "%lf %s %lf", &azimuth, forget_it, &elevation);
@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d37 1
a37 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.12 2007/02/20 08:19:50 brlcad Exp $";
d43 1
d97 1
a97 1
		bu_bomb("unable to open file for reading");
@


14.12
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d37 1
a37 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.11 2007/01/27 01:41:45 brlcad Exp $";
d43 1
a43 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d45 1
@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d37 1
a37 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.10 2007/01/26 03:30:22 brlcad Exp $";
d122 1
a122 1
		ret = fgets(string, BUFF_LEN, infp);
@


14.10
log
@simplify, use MAT_DELTAS_VEC_NEG when setting translation elements to negative vector values
@
text
@d37 1
a37 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.9 2007/01/23 01:13:45 brlcad Exp $";
d137 2
a138 2
 				name);
 			return(-1);
d215 1
a215 1
 			if(num != 4)  {
d217 1
a217 1
				 	V4ARGS(orientation) );
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.8 2007/01/20 14:36:59 brlcad Exp $";
d280 1
a280 1
	MAT_DELTAS( xlate, -eye_pos[0], -eye_pos[1], -eye_pos[2] );
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d37 1
a37 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.7 2006/02/27 10:08:41 brlcad Exp $";
@


14.7
log
@stdlib.h and exit()
@
text
@d4 1
a4 1
 * Copyright (c) 1991-2006 United States Government as represented by
d38 1
a38 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.6 2006/01/18 06:46:23 brlcad Exp $";
@


14.6
log
@update copyright to 2006
@
text
@d38 1
a38 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.5 2005/10/23 04:44:38 brlcad Exp $";
d100 1
a100 1
		exit(-1);
@


14.5
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1991-2005 United States Government as represented by
d38 1
a38 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.4 2005/01/30 20:31:09 brlcad Exp $";
@


14.4
log
@update copyright to 2005
@
text
@d25 1
a25 1
 *  extract the model size, orientation, eye position, azimuth, and 
d38 1
a38 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.3 2004/12/24 01:40:00 brlcad Exp $";
d119 1
a119 1
		/* clear the buffer */	
d133 1
a133 1
			
d199 1
a199 1
		 * destination.  However, if the characters are loaded 
d275 1
a275 1
		
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d25 1
a25 1
 *  extract the model size, orientation, eye position, azimuth, and
d38 1
a38 1
static const char RCSreadfile[] = "@@(#)$Header$";
d119 1
a119 1
		/* clear the buffer */
d133 1
a133 1

d199 1
a199 1
		 * destination.  However, if the characters are loaded
d275 1
a275 1

@


14.3
log
@add the mysteriously missing gpl header..
@
text
@d4 1
a4 1
 * Copyright (c) 1991-2004 United States Government as represented by
d38 1
a38 1
static const char RCSreadfile[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/rt/read-rtlog.c,v 14.2 2004/12/21 06:38:22 morrison Exp $";
@


14.2
log
@remove the old copyright notice section
@
text
@d1 36
a36 19
/*
*			R E A D - R T L O G . C
*
*  This is a program will read an RT log file.  It is meant to be
*  used by any other program that needs to read an RT log file to
*  extract the model size, orientation, eye position, azimuth, and 
*  elevation from the log file.
*  
*
*  Authors -
*	Susanne L. Muuss, J.D.
*	
*
*  Source -
*	SECAD/VLD Computing Consortium, Bldg. 394
*	The U. S. Army Ballistic Reasearch Laboratory
*	Aberdeen Proving Ground, Maryland  21005
*
*/
d38 1
a38 1
static const char RCSreadfile[] = "@@(#)$Header: /cvs/brlcad/src/rt/read-rtlog.c,v 14.1 2004/11/16 19:42:31 morrison Exp $";
a42 2


d45 1
a45 1
#include <string.h>
d47 1
a47 1
#include <strings.h>
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@a18 3
*  Copyright Notice -
*	This software is Copyright (C) 1991-2004 by the United States Army.
*	All rights reserved.
d21 1
a21 1
static const char RCSreadfile[] = "@@(#)$Header: /cvs/brlcad/src/rt/read-rtlog.c,v 1.4 2004/09/03 23:30:59 morrison Exp $";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d24 1
a24 1
static const char RCSreadfile[] = "@@(#)$Header: /cvs/brlcad/src/rt/read-rtlog.c,v 1.3 2004/08/02 23:01:52 morrison Exp $";
d280 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSreadfile[] = "@@(#)$Header: /cvs/brlcad/src/rt/read-rtlog.c,v 1.2 2004/06/08 22:04:34 morrison Exp $";
d32 1
a32 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d24 1
a24 1
static const char RCSreadfile[] = "@@(#)$Header$";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSreadfile[] = "@@(#)$Header: /cvs/brlcad/rt/read-rtlog.c,v 11.11 2004/05/10 15:30:49 erikg Exp $";
a40 1
#include "externs.h"
@

