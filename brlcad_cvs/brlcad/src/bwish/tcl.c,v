head	14.18;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.7
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.11
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.18
date	2007.11.10.15.27.58;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.20.20.21.15;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.04.02.02.15.31;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.03.05.22.19.43;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.03.05.07.30.09;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.24;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.08.03.17.29.40;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.05.03.05.18.31;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.02.14.03.41.36;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.01.30.20.30.17;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.44.31;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.01.54.48;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.24.21.33.38;	author erikg;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.07;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.46;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.18
log
@just say it failed -- the actual error should already be printed by the init routine
@
text
@/*                           T C L . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file tcl.c
 *
 *  The supporting Tcl routines for BWISH and BTCLSH.
 *
 *  Author -
 *	  Robert G. Parker
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 *
 *
 *  Cad_Main --
 *	     Main program for wish-like applications that desire command
 *	     line editing when in interactive mode. Much of this code was
 *	     borrowed from libtk/generic/tkMain.c.
 *
 */

#include "common.h"

#include <stdio.h>
#include <ctype.h>
#ifdef BWISH
#  include "tk.h"
#else
#  include "tcl.h"
#endif
#include "libtermio.h"

#include "machine.h"
#include "bu.h"

/* defined in input.c */
extern void initInput(void);

#ifdef BWISH
/* defined in libtk/(unix|win|mac)/tk(Unix|Win|Mac)Init.c */
void TkpDisplayWarning();
#endif

void Cad_MainLoop(void);
void Cad_Exit(int status);

#ifdef BWISH
#	define CAD_RCFILENAME "~/.bwishrc"
#else
#	define CAD_RCFILENAME "~/.btclshrc"
#endif

/*
 * Main program for wish-like applications that desire command
 * line editing when in interactive mode. Much of this code was
 * borrowed from libtk/generic/tkMain.c.
 *
 * Results:
 *	None. This procedure never returns (it exits the process when
 *	it's done.
 *
 * Side effects:
 *	This procedure initializes the Tk world and then starts
 *      interpreting commands;  almost anything could happen,
 *      depending on the script being interpreted.
 */
void
Cad_Main(int argc, char **argv, Tcl_AppInitProc (*appInitProc), Tcl_Interp *interp)
{
    char *filename = NULL;
    char *args = NULL;
    char buf[TCL_INTEGER_SPACE] = {0};
    int status;
    Tcl_DString argString;

    bu_setprogname(argv[0]);

    if ((argc > 1) && (argv[1][0] != '-')) {
	filename = argv[1];
	argc--;
	argv++;
    }

    /*
     * Make command-line arguments available in the Tcl variables "argc"
     * and "argv".
     */
    args = Tcl_Merge(argc-1, (const char * const *)argv+1);
    Tcl_ExternalToUtfDString(NULL, args, -1, &argString);
    Tcl_SetVar(interp, "argv", Tcl_DStringValue(&argString), TCL_GLOBAL_ONLY);
    Tcl_DStringFree(&argString);
    ckfree(args);

    if (filename == NULL) {
	(void)Tcl_ExternalToUtfDString(NULL, argv[0], -1, &argString);
    } else {
	filename = Tcl_ExternalToUtfDString(NULL, filename, -1, &argString);
    }

    sprintf(buf, "%ld", (long)(argc-1));
    Tcl_SetVar(interp, "argc", buf, TCL_GLOBAL_ONLY);
    Tcl_SetVar(interp, "argv0", Tcl_DStringValue(&argString), TCL_GLOBAL_ONLY);

    /*
     * Invoke application-specific initialization.
     */
    if ((*appInitProc)(interp) != TCL_OK) {
#ifdef BWISH
	TkpDisplayWarning("Application initialization failed", "ERROR");
#else
	bu_log("ERROR: Application initialization failed\n");
#endif
    }

    if (filename != NULL) {
	/*XXX ??? need to arrange for a bu_log handler and or handlers
	  for stdout/stderr ??? */
	save_Tty(fileno(stdin));
	Tcl_ResetResult(interp);
	status = Tcl_EvalFile(interp, filename);
	if (status != TCL_OK) {
	    Tcl_AddErrorInfo(interp, "");
#ifdef BWISH
	    TkpDisplayWarning(Tcl_GetVar(interp, "errorInfo",
					 TCL_GLOBAL_ONLY), "Error in startup script");
#else
	    bu_log("Error in startup script: %s\n", Tcl_GetVar(interp, "errorInfo", TCL_GLOBAL_ONLY));
#endif
	}

#ifndef BWISH
	Cad_Exit(status);
#endif
    } else { /* We're running interactively. */
	/* Set up to handle commands from user as well as
	   provide a command line editing capability. */
	initInput();

	/* Set the name of the startup file. */
	Tcl_SetVar(interp, "tcl_rcFileName", CAD_RCFILENAME, TCL_GLOBAL_ONLY);

	/* Source the startup file if it exists. */
	Tcl_SourceRCFile(interp);
    }

    Tcl_DStringFree(&argString);
    Cad_MainLoop();
    Cad_Exit(TCL_OK);
}

void
Cad_MainLoop(void)
{
#ifdef BWISH
    while (Tk_GetNumMainWindows() > 0)
#else
	while (1)
#endif
	    {
		Tcl_DoOneEvent(0);
	    }
}

void
Cad_Exit(int status)
{
    reset_Tty(fileno(stdin));
    Tcl_Exit(status);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@change bu_argv0() to not take any parameters, preferring instead that apps only use bu_setprogname(), passing the full argv[0].
@
text
@d128 1
a128 2
	TkpDisplayWarning(Tcl_GetStringResult(interp),
			  "Application initialization failed");
d130 1
a130 1
	bu_log( "Application initialization failed: %s", Tcl_GetStringResult(interp));
@


14.16
log
@stash argv[0]
@
text
@d95 1
a95 1
    bu_argv0(argv[0]);
@


14.15
log
@don't use TclFormatInt() so we can avoid using the private tclInt.h header.  the routine is just a macro wrapper around sprintf anyways.
@
text
@d95 2
@


14.14
log
@remove the #include of the private tclInt.h header .. "shouldn't" need it
@
text
@d117 1
a117 1
    TclFormatInt(buf, argc-1);
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d50 2
a51 1
#include "tclInt.h"
a53 1
#include "libtermio.h"
@


14.12
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.11
log
@init array to zero
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
@


14.10
log
@update copyright to 2006
@
text
@d91 2
a92 2
    char *args;
    char buf[TCL_INTEGER_SPACE];
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
@


14.8
log
@more config.h references converted to brlcad_config.h (or common.h where appropriate) that apparently slipped under the radar
@
text
@d32 1
a32 1
 *  
d186 1
a186 1
    reset_Tty(fileno(stdin)); 
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d186 1
a186 1
    reset_Tty(fileno(stdin));
@


14.7
log
@M-x indent-region
@
text
@a41 4
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

a43 1

d47 1
a47 1
#include "tk.h"
d49 1
a49 1
#include "tcl.h"
@


14.6
log
@update copyright to 2005
@
text
@d95 36
a130 36
	char *filename = NULL;
	char *args;
	char buf[TCL_INTEGER_SPACE];
	int status;
	Tcl_DString argString;

	if ((argc > 1) && (argv[1][0] != '-')) {
		filename = argv[1];
		argc--;
		argv++;
	}

	/*
	 * Make command-line arguments available in the Tcl variables "argc"
	 * and "argv".
	 */
	args = Tcl_Merge(argc-1, (const char * const *)argv+1);
	Tcl_ExternalToUtfDString(NULL, args, -1, &argString);
	Tcl_SetVar(interp, "argv", Tcl_DStringValue(&argString), TCL_GLOBAL_ONLY);
	Tcl_DStringFree(&argString);
	ckfree(args);

	if (filename == NULL) {
		(void)Tcl_ExternalToUtfDString(NULL, argv[0], -1, &argString);
	} else {
		filename = Tcl_ExternalToUtfDString(NULL, filename, -1, &argString);
	}

	TclFormatInt(buf, argc-1);
	Tcl_SetVar(interp, "argc", buf, TCL_GLOBAL_ONLY);
	Tcl_SetVar(interp, "argv0", Tcl_DStringValue(&argString), TCL_GLOBAL_ONLY);

	/*
	 * Invoke application-specific initialization.
	 */
	if ((*appInitProc)(interp) != TCL_OK) {
d132 2
a133 2
		TkpDisplayWarning(Tcl_GetStringResult(interp),
				  "Application initialization failed");
d135 1
a135 1
		bu_log( "Application initialization failed: %s", Tcl_GetStringResult(interp));
d137 1
a137 1
	}
d139 8
a146 8
	if (filename != NULL) {
		/*XXX ??? need to arrange for a bu_log handler and or handlers
		  for stdout/stderr ??? */
		save_Tty(fileno(stdin));
		Tcl_ResetResult(interp);
		status = Tcl_EvalFile(interp, filename);
		if (status != TCL_OK) {
			Tcl_AddErrorInfo(interp, "");
d148 2
a149 2
			TkpDisplayWarning(Tcl_GetVar(interp, "errorInfo",
						     TCL_GLOBAL_ONLY), "Error in startup script");
d151 1
a151 1
			bu_log("Error in startup script: %s\n", Tcl_GetVar(interp, "errorInfo", TCL_GLOBAL_ONLY));
d153 1
a153 1
		}
d156 1
a156 1
		Cad_Exit(status);
d158 15
a172 15
	} else { /* We're running interactively. */
		/* Set up to handle commands from user as well as
		   provide a command line editing capability. */
		initInput();

		/* Set the name of the startup file. */
		Tcl_SetVar(interp, "tcl_rcFileName", CAD_RCFILENAME, TCL_GLOBAL_ONLY);

		/* Source the startup file if it exists. */
		Tcl_SourceRCFile(interp);
	}

	Tcl_DStringFree(&argString);
	Cad_MainLoop();
	Cad_Exit(TCL_OK);
d179 1
a179 1
	while (Tk_GetNumMainWindows() > 0) {
d181 1
a181 1
	while (1) {
d183 1
d185 1
a185 1
	}
d191 2
a192 2
	reset_Tty(fileno(stdin)); 
	Tcl_Exit(status);
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
@


14.4
log
@remove the old distribution notice section
@
text
@a33 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a32 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file tcl.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *				T C L . C
@


1.4
log
@use config.h
@
text
@d180 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d29 4
@


1.2
log
@obliterate externs.h
@
text
@d29 1
a29 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a42 1
#include "externs.h"
@

