head	14.29;
access;
symbols
	rel-7-10-4:14.25
	STABLE:14.25.0.2
	stable-branch:14.8
	rel-7-10-2:14.25
	rel-7-10-0:14.23
	rel-7-8-4:14.17
	rel-7-8-2:14.17
	rel-7-8-0:14.17
	trimnurbs-branch:14.17.0.2
	help:14.17
	temp_tag:14.15
	bobWinPort-20051223-freeze:14.13
	postmerge-20051223-bobWinPort:14.15
	premerge-20051223-bobWinPort:14.15
	rel-7-6-6:14.15
	rel-7-6-4:14.15
	rel-7-6-2:14.13
	rel-7-6-branch:14.13.0.4
	rel-7-6-0:14.13
	rel-7-4-2:14.10.2.1
	rel-7-4-branch:14.10.0.2
	bobWinPort:14.13.0.2
	rel-7-4-0:14.10
	rel-7-2-6:14.9
	rel-7-2-4:14.9
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.29
date	2007.11.15.04.23.23;	author brlcad;	state Exp;
branches;
next	14.28;

14.28
date	2007.11.10.15.42.57;	author brlcad;	state Exp;
branches;
next	14.27;

14.27
date	2007.11.10.15.31.21;	author brlcad;	state Exp;
branches;
next	14.26;

14.26
date	2007.10.01.03.48.20;	author brlcad;	state Exp;
branches;
next	14.25;

14.25
date	2007.06.18.04.48.11;	author johnranderson;	state Exp;
branches;
next	14.24;

14.24
date	2007.05.06.19.10.31;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.04.02.02.16.13;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.03.15.16.02.34;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.03.05.07.30.09;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.03.04.23.00.32;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.01.23.01.13.24;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.01.20.14.36.43;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2006.01.19.00.34.24;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2005.10.23.04.44.29;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2005.09.09.09.44.08;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2005.07.29.12.47.54;	author brlcad;	state Exp;
branches
	14.13.4.1;
next	14.12;

14.12
date	2005.07.18.05.08.27;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.07.18.02.03.44;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.07.08.00.07.16;	author brlcad;	state Exp;
branches
	14.10.2.1;
next	14.9;

14.9
date	2005.05.03.05.18.31;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.02.14.03.41.36;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.01.30.20.30.17;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.25.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.58.41;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.44.31;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.01.54.48;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.14.19.19.29;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.24.21.33.38;	author erikg;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.47;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.07;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.45;	author morrison;	state Exp;
branches;
next	;

14.10.2.1
date	2005.08.16.21.03.47;	author brlcad;	state Exp;
branches;
next	;

14.13.4.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.29
log
@match what mged does order-wise
@
text
@/*                          M A I N . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file main.c
 *
 *  This file provides the main() function for both BWISH and BTCLSH.
 *  While initializing Tcl, Itcl and various BRL-CAD libraries it sets
 *  things up to provide command history and command line editing.
 *
 *  Author -
 *	  Robert G. Parker
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 */

#include "common.h"

#include "tcl.h"

#ifdef BWISH
#  include "itk.h"
#else
#  include "itcl.h"
#endif

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#ifdef BWISH
#  include "dm.h"
#endif
#include "tclcad.h"


/* XXX -- it's probably a bad idea to import itcl/itk/iwidgets into
 * the global namespace..  allow for easy means to disable the import.
 */
#define IMPORT_ITCL	1
#define IMPORT_ITK	1
#define IMPORT_IWIDGETS	1

extern int cmdInit(Tcl_Interp *interp);
extern void Cad_Main(int argc, char **argv, Tcl_AppInitProc (*appInitProc), Tcl_Interp *interp);

#ifdef BWISH
Tk_Window tkwin;
#endif

Tcl_Interp *interp;


static int
Cad_AppInit(Tcl_Interp *interp)
{
    int try_auto_path = 0;

    int init_tcl = 1;
    int init_tk = 1;
    int init_itcl = 1;
    int init_itk = 1;
    int init_blt = 1;

    /* a two-pass init loop.  the first pass just tries default init
     * routines while the second calls tclcad_auto_path() to help it
     * find other, potentially uninstalled, resources.
     */
    while (1) {

	/* not called first time through, give Tcl_Init() a chance */
	if (try_auto_path) {
	    /* Locate the BRL-CAD-specific Tcl scripts, set the auto_path */
	    tclcad_auto_path(interp);
	}

	/* Initialize Tcl */
	Tcl_ResetResult(interp);
	if (init_tcl && Tcl_Init(interp) == TCL_ERROR) {
	    if (!try_auto_path) {
		try_auto_path=1;
		continue;
	    }
	    bu_log("Tcl_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	    return TCL_ERROR;
	}
	init_tcl=0;

	/* warn if tcl_library isn't set by now */
	if (try_auto_path) {
	    tclcad_tcl_library(interp);
	}

#ifdef BWISH
	/* Initialize Tk */
	Tcl_ResetResult(interp);
	if (init_tk && Tk_Init(interp) == TCL_ERROR) {
	    if (!try_auto_path) {
		try_auto_path=1;
		continue;
	    }
	    bu_log("Tk_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	    return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "Tk", Tk_Init, Tk_SafeInit);
	init_tk=0;
#endif

	/* Initialize [incr Tcl] */
	Tcl_ResetResult(interp);
	if (init_itcl && Itcl_Init(interp) == TCL_ERROR) {
	    if (!try_auto_path) {
		try_auto_path=1;
		continue;
	    }
	    bu_log("Itcl_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	    return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "Itcl", Itcl_Init, Itcl_SafeInit);
	init_itcl=0;

#ifdef BWISH
	/* Initialize [incr Tk] */
	Tcl_ResetResult(interp);
	if (init_itk && Itk_Init(interp) == TCL_ERROR) {
	    if (!try_auto_path) {
		try_auto_path=1;
		continue;
	    }
	    bu_log("Itk_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	    return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "Itk", Itk_Init, (Tcl_PackageInitProc *) NULL);
	init_itk=0;

	/* Initialize BLT */
	Tcl_ResetResult(interp);
	if (init_blt && Blt_Init(interp) == TCL_ERROR) {
	    if (!try_auto_path) {
		try_auto_path=1;
		continue;
	    }
	    bu_log("Blt_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	    return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "BLT", Blt_Init, (Tcl_PackageInitProc *) NULL);
	init_blt=0;
#endif

	/* don't actually want to loop forever */
	break;

    } /* end iteration over Init() routines that need auto_path */
    Tcl_ResetResult(interp);

    /* if we haven't loaded by now, load auto_path so we find our tclscripts */
    if (!try_auto_path) {
	/* Locate the BRL-CAD-specific Tcl scripts */
	tclcad_auto_path(interp);
    }

#ifdef IMPORT_ITCL
    /* Import [incr Tcl] commands into the global namespace. */
    if (Tcl_Import(interp, Tcl_GetGlobalNamespace(interp),
		   "::itcl::*", /* allowOverwrite */ 1) != TCL_OK) {
	bu_log("Tcl_Import ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
#endif /* IMPORT_ITCL */

#ifdef BWISH

#  ifdef IMPORT_ITK
    /* Import [incr Tk] commands into the global namespace */
    if (Tcl_Import(interp, Tcl_GetGlobalNamespace(interp),
		   "::itk::*", /* allowOverwrite */ 1) != TCL_OK) {
	bu_log("Tcl_Import ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
#  endif  /* IMPORT_ITK */

    /* Initialize the Iwidgets package */
    if (Tcl_Eval(interp, "package require Iwidgets") != TCL_OK) {
	bu_log("Tcl_Eval ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }

#  ifdef IMPORT_IWIDGETS
    /* Import iwidgets into the global namespace */
    if (Tcl_Import(interp, Tcl_GetGlobalNamespace(interp),
		   "::iwidgets::*", /* allowOverwrite */ 1) != TCL_OK) {
	bu_log("Tcl_Import ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
#  endif  /* IMPORT_IWIDGETS */

#endif  /* BWISH */

#  ifdef IMPORT_ITCL
    if (Tcl_Eval(interp, "auto_mkindex_parser::slavehook { _%@@namespace import -force ::itcl::* }") != TCL_OK) {
	bu_log("Tcl_Eval ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
#  endif

#ifdef BWISH
#  ifdef IMPORT_ITCL
    if (Tcl_Eval(interp, "auto_mkindex_parser::slavehook { _%@@namespace import -force ::tk::* }") != TCL_OK) {
	bu_log("Tcl_Eval ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
#  endif
#  ifdef IMPORT_ITK
    if (Tcl_Eval(interp, "auto_mkindex_parser::slavehook { _%@@namespace import -force ::itk::* }") != TCL_OK) {
	bu_log("Tcl_Eval ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
#  endif

    /* Initialize libdm */
    if (Dm_Init(interp) == TCL_ERROR) {
	bu_log("Dm_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "Dm", Dm_Init, (Tcl_PackageInitProc *) NULL);

    /* Initialize libfb */
    if (Fb_Init(interp) == TCL_ERROR) {
	bu_log("Fb_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "Fb", Fb_Init, (Tcl_PackageInitProc *) NULL);

#endif

    /* Initialize libbu */
    if (Bu_Init(interp) == TCL_ERROR) {
	bu_log("Bu_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }

    /* Initialize libbn */
    if (Bn_Init(interp) == TCL_ERROR) {
	bu_log("Bn_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }

    /* Initialize librt */
    if (Rt_Init(interp) == TCL_ERROR) {
	bu_log("Rt_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "Rt", Rt_Init, (Tcl_PackageInitProc *) NULL);

#ifdef BWISH
    if ((tkwin = Tk_MainWindow(interp)) == NULL)
	return TCL_ERROR;
#endif

    /* register bwish/btclsh commands */
    cmdInit(interp);

    return TCL_OK;
}

int
main(int argc, char **argv)
{
    /* Create the interpreter */
    interp = Tcl_CreateInterp();
    Cad_Main(argc, argv, Cad_AppInit, interp);

    return 0;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.28
log
@a few too many results reset
@
text
@d176 5
a239 6
    /* if we haven't loaded the path by now, do so */
    if (!try_auto_path) {
	/* Locate the BRL-CAD-specific Tcl scripts, set the auto_path */
	tclcad_auto_path(interp);
    }

@


14.27
log
@yet another restructuring of the init routine.  give Tcl_Init() a chance to work before calling tclcad_auto_path() so that we don't end up trying to force the init.tcl that is provided in the source distribution.  if there's a system tcl being used, it will gawk at trying to load the wrong init script.  this goes even further such that we keep track of which packages init properly and only call tclcad_auto_path() if one of them fail (or when we get to the brl-cad lib loading) using a two-pass loop.
@
text
@a122 1
	    Tcl_ResetResult(interp);
a136 1
		Tcl_ResetResult(interp);
@


14.26
log
@preinit blt.  only used by archer and unfortunately the lib seems to be a dead/abandoned project atm, but since we use it, preinit helps.
@
text
@d77 1
a77 2
    /* Locate the BRL-CAD-specific Tcl scripts, set the auto_path */
    tclcad_auto_path(interp);
d79 49
a127 2
#if 0
    tclcad_tcl_library();
d130 13
a142 5
    /* Initialize Tcl */
    if (Tcl_Init(interp) == TCL_ERROR) {
	bu_log("Tcl_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
d145 25
a169 6
    /* Initialize Tk */
    if (Tk_Init(interp) == TCL_ERROR) {
	bu_log("Tk_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "Tk", Tk_Init, Tk_SafeInit);
d172 2
a173 6
    /* Initialize [incr Tcl] */
    if (Itcl_Init(interp) == TCL_ERROR) {
	bu_log("Itcl_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "Itcl", Itcl_Init, Itcl_SafeInit);
d175 2
a176 7
#ifdef BWISH
    /* Initialize [incr Tk] */
    if (Itk_Init(interp) == TCL_ERROR) {
	bu_log("Itk_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "Itk", Itk_Init, (Tcl_PackageInitProc *) NULL);
a177 7
    /* Initialize BLT */
    if (Blt_Init(interp) == TCL_ERROR) {
	bu_log("Blt_Init ERROR:\n%s\n", Tcl_GetStringResult(interp));
	return TCL_ERROR;
    }
    Tcl_StaticPackage(interp, "BLT", Blt_Init, (Tcl_PackageInitProc *) NULL);
#endif
d237 6
@


14.25
log
@Eliminated more instances of direct access of interp->result (not allowed
since tcl 8.0)
@
text
@d113 7
d122 1
a122 1
#ifdef IMPORT_TCL
d129 1
a129 1
#endif
d159 1
d164 1
d167 1
d172 2
d178 1
@


14.24
log
@don't bother creating a BezierCanvas widget for btclsh/bwish (migrate towards using tcl's bezier interface)
@
text
@d86 1
a86 1
	bu_log("Tcl_Init ERROR:\n%s\n", interp->result);
d93 1
a93 1
	bu_log("Tk_Init ERROR:\n%s\n", interp->result);
d101 1
a101 1
	bu_log("Itcl_Init ERROR:\n%s\n", interp->result);
d109 1
a109 1
	bu_log("Itk_Init ERROR:\n%s\n", interp->result);
d119 1
a119 1
	bu_log("Tcl_Import ERROR:\n%s\n", interp->result);
d130 1
a130 1
	bu_log("Tcl_Import ERROR:\n%s\n", interp->result);
d137 1
a137 1
	bu_log("Tcl_Eval ERROR:\n%s\n", interp->result);
d145 1
a145 1
	bu_log("Tcl_Import ERROR:\n%s\n", interp->result);
d153 1
a153 1
	bu_log("Tcl_Eval ERROR:\n%s\n", interp->result);
d159 1
a159 1
	bu_log("Tcl_Eval ERROR:\n%s\n", interp->result);
d163 1
a163 1
	bu_log("Tcl_Eval ERROR:\n%s\n", interp->result);
d169 1
a169 1
	bu_log("Dm_Init ERROR:\n%s\n", interp->result);
d176 1
a176 1
	bu_log("Fb_Init ERROR:\n%s\n", interp->result);
d185 1
a185 1
	bu_log("Bu_Init ERROR:\n%s\n", interp->result);
d191 1
a191 1
	bu_log("Bn_Init ERROR:\n%s\n", interp->result);
d197 1
a197 1
	bu_log("Rt_Init ERROR:\n%s\n", interp->result);
@


14.23
log
@emphasize any errors, separate out result.
@
text
@a65 1
extern void Tk_CreateCanvasBezierType();
a204 3

    /* Add Bezier Curves to the canvas widget */
    Tk_CreateCanvasBezierType();
@


14.22
log
@reorder
@
text
@d78 7
d87 1
a87 1
	bu_log("Tcl_Init error %s\n", interp->result);
a90 3
    /* Locate the BRL-CAD-specific Tcl scripts, set the auto_path */
    tclcad_auto_path(interp);

d94 1
a94 1
	bu_log("Tk_Init error %s\n", interp->result);
d102 1
a102 1
	bu_log("Itcl_Init error %s\n", interp->result);
d110 1
a110 1
	bu_log("Itk_Init error %s\n", interp->result);
d120 1
a120 1
	bu_log("Tcl_Import error %s\n", interp->result);
d131 1
a131 1
	bu_log("Tcl_Import error %s\n", interp->result);
d138 1
a138 1
	bu_log("Tcl_Eval error %s\n", interp->result);
d146 1
a146 1
	bu_log("Tcl_Import error %s\n", interp->result);
d154 1
d160 1
d164 1
d170 1
a170 1
	bu_log("Dm_Init error %s\n", interp->result);
d177 1
a177 1
	bu_log("Fb_Init error %s\n", interp->result);
d181 1
d186 1
a186 1
	bu_log("Bu_Init error %s\n", interp->result);
d192 1
a192 1
	bu_log("Bn_Init error %s\n", interp->result);
d198 1
a198 1
	bu_log("Rt_Init error %s\n", interp->result);
@


14.21
log
@remove the #include of the private tclInt.h header .. "shouldn't" need it
@
text
@a67 1
static int Cad_AppInit(Tcl_Interp *interp);
a74 10
int
main(int argc, char **argv)
{
    /* Create the interpreter */
    interp = Tcl_CreateInterp();
    Cad_Main(argc, argv, Cad_AppInit, interp);

    return 0;
}

d209 11
@


14.20
log
@interesting this worked before.. need tcl.h before tclInt.h
@
text
@a43 1
#  include "tclInt.h"
@


14.19
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d38 2
@


14.18
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.17
log
@modify the auto_path as soon as we have the tcl interpreter so that even resources like tk.tcl may be found when mixing system/non-system tcl with other system/non-system components
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
@


14.16
log
@update copyright to 2006
@
text
@d95 3
a213 3
    /* Locate the BRL-CAD-specific Tcl scripts, set the auto_path */
    tclcad_auto_path(interp);

@


14.15
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
@


14.14
log
@BRL-CAD not BRLCAD, consistency
@
text
@d34 1
a34 1
 *  
d100 1
a100 1
    } 
@


14.13
log
@quell unused variable warnings
@
text
@d25 1
a25 1
 *  While initializing Tcl, Itcl and various BRLCAD libraries it sets
@


14.13.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d25 1
a25 1
 *  While initializing Tcl, Itcl and various BRL-CAD libraries it sets
d34 1
a34 1
 *
d100 1
a100 1
    }
@


14.12
log
@abstract out the auto_path crappage to libtclcad and make it a tclcad_auto_path call instead.
@
text
@a88 3
    struct bu_vls vls;
    char *pathname;

@


14.11
log
@search path enhancements, search for tclscripts explicitly and search even harder still when running from uninstalled
@
text
@d54 2
d214 2
a215 13
    /* Locate the BRL-CAD-specific Tcl scripts */
    pathname = bu_brlcad_data("tclscripts", 0);

    bu_vls_init(&vls);
    if (pathname) {
	bu_vls_printf(&vls, "lappend auto_path \"%s\" \"%s/lib\" \"%s/util\" \"%s/mged\" \"%s/geometree\"",
		      pathname, pathname, pathname, pathname, pathname);
	(void)Tcl_Eval(interp, bu_vls_addr(&vls));
    } else {
	/* hunt for the tclscripts since we're probably just not installed yet */
	(void)Tcl_Eval(interp, "lappend auto_path tclscripts tclscripts/lib tclscripts/util tclscripts/mged tclscripts/geometree src/tclscripts src/tclscripts/lib src/tclscripts/util src/tclscripts/mged src/tclscripts/geometree ../tclscripts ../tclscripts/lib ../tclscripts/util ../tclscripts/mged ../tclscripts/geometree ../src/tclscripts ../src/tclscripts/lib ../src/tclscripts/util ../src/tclscripts/mged ../src/tclscripts/geometree ../../tclscripts ../../tclscripts/lib ../../tclscripts/util ../../tclscripts/mged ../../tclscripts/geometree ../../src/tclscripts ../../src/tclscripts/lib ../../src/tclscripts/util ../../src/tclscripts/mged ../../src/tclscripts/geometree");
    }
    bu_vls_free(&vls);
@


14.10
log
@use bu_brlcad_data instead of bu_brlcad_path now.  search for the tclscripts directory in a slightly more intelligent order.  this needs to be improved for finding the tclscripts directory
@
text
@d213 1
a213 1
    pathname = bu_brlcad_data("", 1);
d217 2
a218 2
	bu_vls_printf(&vls, "lappend auto_path %s/tclscripts %s/tclscripts/lib %s/tclscripts/util",
		      pathname, pathname, pathname);
d221 2
a222 2
	/* hunt for the tclscripts a little since we're probably just not installed yet */
	(void)Tcl_Eval(interp, "lappend auto_path tclscripts tclscripts/lib tclscripts/lib/util src/tclscripts src/tclscripts/lib src/tclscripts/util ../tclscripts ../tclscripts/lib ../tclscripts/util ../../tclscripts ../../tclscripts/lib ../../tclscripts/util /usr/brlcad/tclscripts /usr/brlcad/tclscripts/lib /usr/brlcad/tclscripts/util");
@


14.10.2.1
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@a53 2
#include "tclcad.h"

d87 3
d212 13
a224 2
    /* Locate the BRL-CAD-specific Tcl scripts, set the auto_path */
    tclcad_auto_path(interp);
@


14.9
log
@more config.h references converted to brlcad_config.h (or common.h where appropriate) that apparently slipped under the radar
@
text
@d213 1
a213 1
    pathname = bu_brlcad_path("", 1);
d217 1
a217 1
	bu_vls_printf(&vls, "lappend auto_path %stclscripts %stclscripts/lib %stclscripts/util",
d222 1
a222 1
	(void)Tcl_Eval(interp, "lappend auto_path /usr/brlcad/tclscripts /usr/brlcad/tclscripts/lib /usr/brlcad/tclscripts/util tclscripts tclscripts/lib tclscripts/lib/util src/tclscripts src/tclscripts/lib src/tclscripts/util ../tclscripts ../tclscripts/lib ../tclscripts/util ../../tclscripts ../../tclscripts/lib ../../tclscripts/util");
@


14.8
log
@M-x indent-region
@
text
@a36 4
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

a38 1

d40 1
a40 1
#include "itk.h"
d42 2
a43 2
#include "itcl.h"
#include "tclInt.h"
d52 1
a52 1
#include "dm.h"
@


14.7
log
@update copyright to 2005
@
text
@d82 3
a84 3
	/* Create the interpreter */
	interp = Tcl_CreateInterp();
	Cad_Main(argc, argv, Cad_AppInit, interp);
d86 1
a86 1
	return 0;
d92 2
a93 2
	struct bu_vls vls;
	char *pathname;
d95 5
a99 5
	/* Initialize Tcl */
	if (Tcl_Init(interp) == TCL_ERROR) {
		bu_log("Tcl_Init error %s\n", interp->result);
		return TCL_ERROR;
	}
d102 6
a107 6
	/* Initialize Tk */
	if (Tk_Init(interp) == TCL_ERROR) {
		bu_log("Tk_Init error %s\n", interp->result);
		return TCL_ERROR;
	} 
	Tcl_StaticPackage(interp, "Tk", Tk_Init, Tk_SafeInit);
d110 6
a115 6
	/* Initialize [incr Tcl] */
	if (Itcl_Init(interp) == TCL_ERROR) {
		bu_log("Itcl_Init error %s\n", interp->result);
		return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "Itcl", Itcl_Init, Itcl_SafeInit);
d118 6
a123 6
	/* Initialize [incr Tk] */
	if (Itk_Init(interp) == TCL_ERROR) {
		bu_log("Itk_Init error %s\n", interp->result);
		return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "Itk", Itk_Init, (Tcl_PackageInitProc *) NULL);
d127 6
a132 6
	/* Import [incr Tcl] commands into the global namespace. */
	if (Tcl_Import(interp, Tcl_GetGlobalNamespace(interp),
		       "::itcl::*", /* allowOverwrite */ 1) != TCL_OK) {
		bu_log("Tcl_Import error %s\n", interp->result);
		return TCL_ERROR;
	}
d138 6
a143 6
	/* Import [incr Tk] commands into the global namespace */
	if (Tcl_Import(interp, Tcl_GetGlobalNamespace(interp),
		       "::itk::*", /* allowOverwrite */ 1) != TCL_OK) {
		bu_log("Tcl_Import error %s\n", interp->result);
		return TCL_ERROR;
	}
d146 5
a150 5
	/* Initialize the Iwidgets package */
	if (Tcl_Eval(interp, "package require Iwidgets") != TCL_OK) {
		bu_log("Tcl_Eval error %s\n", interp->result);
		return TCL_ERROR;
	}
d153 6
a158 6
	/* Import iwidgets into the global namespace */
	if (Tcl_Import(interp, Tcl_GetGlobalNamespace(interp),
		       "::iwidgets::*", /* allowOverwrite */ 1) != TCL_OK) {
		bu_log("Tcl_Import error %s\n", interp->result);
		return TCL_ERROR;
	}
d163 3
a165 3
	if (Tcl_Eval(interp, "auto_mkindex_parser::slavehook { _%@@namespace import -force ::itcl::* }") != TCL_OK) {
	  return TCL_ERROR;
	}
d168 20
a187 20
	if (Tcl_Eval(interp, "auto_mkindex_parser::slavehook { _%@@namespace import -force ::tk::* }") != TCL_OK) {
	  return TCL_ERROR;
	}
	if (Tcl_Eval(interp, "auto_mkindex_parser::slavehook { _%@@namespace import -force ::itk::* }") != TCL_OK) {
	  return TCL_ERROR;
	}

	/* Initialize libdm */
	if (Dm_Init(interp) == TCL_ERROR) {
		bu_log("Dm_Init error %s\n", interp->result);
		return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "Dm", Dm_Init, (Tcl_PackageInitProc *) NULL);

	/* Initialize libfb */
	if (Fb_Init(interp) == TCL_ERROR) {
		bu_log("Fb_Init error %s\n", interp->result);
		return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "Fb", Fb_Init, (Tcl_PackageInitProc *) NULL);
d190 18
a207 18
	/* Initialize libbu */
	if (Bu_Init(interp) == TCL_ERROR) {
		bu_log("Bu_Init error %s\n", interp->result);
		return TCL_ERROR;
	}

	/* Initialize libbn */
	if (Bn_Init(interp) == TCL_ERROR) {
		bu_log("Bn_Init error %s\n", interp->result);
		return TCL_ERROR;
	}

	/* Initialize librt */
	if (Rt_Init(interp) == TCL_ERROR) {
		bu_log("Rt_Init error %s\n", interp->result);
		return TCL_ERROR;
	}
	Tcl_StaticPackage(interp, "Rt", Rt_Init, (Tcl_PackageInitProc *) NULL);
d210 2
a211 2
	if ((tkwin = Tk_MainWindow(interp)) == NULL)
		return TCL_ERROR;
d213 2
a214 2
	/* Add Bezier Curves to the canvas widget */
	Tk_CreateCanvasBezierType();
d217 2
a218 2
	/* Locate the BRL-CAD-specific Tcl scripts */
	pathname = bu_brlcad_path("", 1);
d220 10
a229 10
	bu_vls_init(&vls);
	if (pathname) {
	  bu_vls_printf(&vls, "lappend auto_path %stclscripts %stclscripts/lib %stclscripts/util",
			pathname, pathname, pathname);
	  (void)Tcl_Eval(interp, bu_vls_addr(&vls));
	} else {
	  /* hunt for the tclscripts a little since we're probably just not installed yet */
	  (void)Tcl_Eval(interp, "lappend auto_path /usr/brlcad/tclscripts /usr/brlcad/tclscripts/lib /usr/brlcad/tclscripts/util tclscripts tclscripts/lib tclscripts/lib/util src/tclscripts src/tclscripts/lib src/tclscripts/util ../tclscripts ../tclscripts/lib ../tclscripts/util ../../tclscripts ../../tclscripts/lib ../../tclscripts/util");
	}
	bu_vls_free(&vls);
d231 2
a232 2
	/* register bwish/btclsh commands */
	cmdInit(interp);
d234 1
a234 1
	return TCL_OK;
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a34 2
 *
 *
@


14.4
log
@remove the old distribution notice section
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@a34 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file main.c
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *				M A I N . C
@


1.5
log
@add an option to bu_brlcad_path to fail quietly, returning a NULL string instead of gobs of output and bu_bomb'ing
@
text
@d225 10
@


1.4
log
@use config.h
@
text
@d207 1
a207 1
	pathname = bu_brlcad_path("");
d210 8
a217 3
	bu_vls_printf(&vls, "lappend auto_path %stclscripts %stclscripts/lib %stclscripts/util",
		      pathname, pathname, pathname);
	(void)Tcl_Eval(interp, bu_vls_addr(&vls));
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d26 4
@


1.2
log
@obliterate externs.h
@
text
@d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a38 1
#include "externs.h"
@

