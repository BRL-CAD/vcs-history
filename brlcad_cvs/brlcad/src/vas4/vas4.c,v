head	14.15;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.15
date	2007.11.21.20.49.14;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.21.19.49.12;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.09.15.16.23.23;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.07.26.01.14.00;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.02.02.08.48.30;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.57;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.37.07;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.29;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.06.30.00.05.14;	author erikgreenwald;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2005.01.30.20.31.35;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.07.18.59;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.36.36;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.31.00;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.53;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.18.22.30;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.47;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.22.01;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.21;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@pass bu_exit a NULL instead of an empty string
@
text
@/*                          V A S 4 . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file vas4.c
 *
 *  Program to control the Lyon-Lamb VAS IV video animation controller
 *  with Sony BVU-850 recorder (or equiv).
 *
 *
 *  Authors -
 *	Steve Satterfield, USNA
 *	Joe Johnson, USNA
 *	Michael John Muuss, BRL
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.14 2007/11/21 19:49:12 erikgreenwald Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "fb.h"
#include "bu.h"

#include "./vas4.h"


int		debug;

static char	*framebuffer = NULL;
static int	scr_width = 0;		/* screen tracks file if not given */
static int	scr_height = 0;

void	usage(void), usage_new(void), usage_record(void), usage_seq(void);
void	program_recording(int new, int scene_number, int start_frame), record_add_to_scene(int number_of_frames), do_record(int wait);
void	get_tape_position(void);

/*
 *			G E T _ A R G S
 */
int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = bu_getopt( argc, argv, "dhF:s:S:w:W:n:N:" )) != EOF )  {
		switch( c )  {
		case 'd':
			debug = 1;
			break;

		case 'h':
			/* high-res */
			scr_height = scr_width = 1024;
			break;
		case 'F':
			framebuffer = bu_optarg;
			break;
		case 'S':
		case 's':
			/* square file size */
			scr_height = scr_width = atoi(bu_optarg);
			break;
		case 'w':
		case 'W':
			scr_width = atoi(bu_optarg);
			break;
		case 'n':
		case 'N':
			scr_height = atoi(bu_optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( bu_optind >= argc )
		return(0);

	return(1);		/* OK */
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register FBIO	*fbp = FBIO_NULL;
	int scene_number = 1;
	int start_frame = 1;
	int number_of_frames=0;
	int number_of_images=0;
	int start_seq_number=0;
	int	exit_code;

	exit_code = 0;

	if ( !get_args( argc, argv ) )  {
		usage();
		bu_exit( 1, NULL );
	}

	argc -= (bu_optind-1);
	argv += (bu_optind-1);

	/*
	 *  First group of commands.
	 *  No checking of VAS IV status is performed first.
	 */
	if (strcmp(argv[1],"init") == 0) {
		vas_open();
		if( get_vas_status() < 0 )
			bu_exit(1, NULL);
		vas_putc(C_INIT);
		vas_await(R_INIT, 5);
		if( get_vtr_status(0) < 0 )
			exit_code = 1;
		goto done;
	}
	else if (strcmp(argv[1],"status") == 0) {
		vas_open();
		(void)get_vas_status();
		(void)get_vtr_status(1);
		get_tape_position();
		(void)get_frame_code();
		goto done;
	}
	else if (strcmp(argv[1],"sequence") == 0) {
		if (argc == 2) {
			number_of_images = 1;
			number_of_frames = 1;
			start_seq_number = 1;
		}
		else if (argc == 4) {
			number_of_images = atoi(argv[2]);
			if (number_of_images < 1)
				usage_seq();
			number_of_frames = str2frames(argv[3]);
			if (number_of_frames < 1)
				usage_seq();
			start_seq_number = 1;
		}
		else if (argc == 5) {
			number_of_images = atoi(argv[2]);
			if (number_of_images < 1)
				usage_seq();
			number_of_frames = str2frames(argv[3]);
			if (number_of_frames < 1)
				usage_seq();
			start_seq_number = atoi(argv[4]);
		}
		else
			usage_seq();


		record_seq(number_of_images, number_of_frames, start_seq_number);
		goto done;
	}

	/*
	 *  Second group of commands.
	 *  VAS IV is opened, and status of VAS is checked first
	 *  but VTR is not queried.
	 */
	vas_open();
	if( get_vas_status() < 0 )
		bu_exit(1, NULL);

	if (strcmp(argv[1],"rewind") == 0) {
		vas_putc(C_REWIND);
		goto done;
	}
	else if (strcmp(argv[1],"play") == 0) {
		vas_putc(C_PLAY);
		goto done;
	}
	else if (strcmp(argv[1],"stop") == 0) {
		vas_putc(C_STOP);
		goto done;
	}
	else if (strcmp(argv[1],"fforward") == 0) {
		vas_putc(C_FFORWARD);
		goto done;
	}

	/*
	 *  Third group of commands.
	 *  VAS IV is opened and checked above,
	 *  and VTR status is checked here.
	 */
	if( get_vtr_status(0) < 0 )  {
		exit_code = 1;
		goto done;
	}
	if( strcmp(argv[1], "search") == 0 )  {
		if( argc >= 3 )
			start_frame = str2frames(argv[2]);
		else
			start_frame = 1;
		exit_code = search_frame(start_frame);
		goto done;
	}
	else if( strcmp(argv[1], "time0") == 0 )  {
		exit_code = time0();
		goto done;
	}
	else if( strcmp( argv[1], "reset_time" ) == 0 )  {
		exit_code = reset_tape_time();
		goto done;
	}

	/*
	 *  If this is running on a workstation, and a window has to be
	 *  opened to cause image to be re-displayed, do so now.
	 */
	if( framebuffer != (char *)0 )  {
		if( (fbp = fb_open( framebuffer, scr_width, scr_height )) == FBIO_NULL )  {
			exit_code = 12;
			goto done;
		}
	}

	/*
	 *  Commands that will actually record some image onto tape
	 */
	if (strcmp(argv[1], "new") == 0) {
		if( argc >= 4 )  {
			if( (start_frame = str2frames(argv[3])) < 1 )
				usage_new();
		}
		if (argc >= 3) {
			if( (scene_number = atoi(argv[2])) < 1 )
				usage_new();
		}
		else if (argc == 2) {
			scene_number = 1;
		}
		else {
			usage_new();
		}
		program_recording(1, scene_number, start_frame);
		goto done;
	}
	else if (strcmp(argv[1], "old") == 0) {
		if( argc >= 4 )  {
			if( (start_frame = str2frames(argv[3])) < 1 )
				usage_new();
		}
		if (argc >= 3) {
			if( (scene_number = atoi(argv[2])) < 1 )
				usage_new();
		}
		else if (argc == 2) {
			scene_number = 1;
		}
		else {
			usage_new();
		}
		/* May need one more parameter here, eventually */
		program_recording(0, scene_number, start_frame);
		goto done;
	}
	else if (strcmp(argv[1],"record") == 0) {
		if (argc == 3) {
			number_of_frames = str2frames(argv[2]);
			if (number_of_frames < 1) {
				usage_record();
			}
		}
		else if (argc == 2) {
			number_of_frames = 1;
		}
		else {
			usage_record();
		}
		record_add_to_scene(number_of_frames);
		goto done;
	} else {
		/* None of the above */
		usage();
		exit_code = 1;
	}

done:
	vas_close();
	if(fbp) fb_close(fbp);
	bu_exit(exit_code, NULL);
}

void
usage(void)
{
	fprintf(stderr,"Usage: vas4 [-d] [-h] [-F framebuffer]\n");
	fprintf(stderr,"	[-{sS} squarescrsize] [-{wW} scr_width] [-{nN} scr_height]\n");
	fprintf(stderr,"	keyword [options]\n");
	fprintf(stderr,"Keywords:\n");
	fprintf(stderr,"  init\n");
	fprintf(stderr,"  status\n");
	fprintf(stderr,"  stop\n");
	fprintf(stderr,"  play\n");
	fprintf(stderr,"  rewind\n");
	fprintf(stderr,"  fforward\n");
	fprintf(stderr,"  new [scene_number [start_frame]]\n");
	fprintf(stderr,"  old [scene_number [start_frame]]\n");
	fprintf(stderr,"  record [n_frames]\n");
	fprintf(stderr,"  sequence [n_images n_frames [start_seq]]\n");
	fprintf(stderr,"  search [frame]\n");
	fprintf(stderr,"  time0\n");
	fprintf(stderr,"  reset_time\n");
	bu_exit(1, NULL);
}

void
usage_new(void)
{
	fprintf(stderr,"Usage: vas4 new [sn]\n");
	fprintf(stderr,"\t[sn]\tscene number must be >= 1\n");
	bu_exit(1, NULL);
}

void
usage_record(void)
{
	fprintf(stderr,"Usage: vas4 record [nf]\n");
	fprintf(stderr,"\t[nf]\tnumber of frames must be >= 1\n");
	bu_exit(1, NULL);
}

void
usage_seq(void)
{
	fprintf(stderr,"Usage: vas4 sequence [n nf] [start]\n");
	fprintf(stderr,"\t[n nf]\tthe number of images n must be > 1\n");
	fprintf(stderr,"\t\tand the number of frames nf  must be > 1\n");
	fprintf(stderr,"\t[start] is the starting sequence number\n");
	fprintf(stderr,"\t\tIf start is specified, n and nf must also be specified\n");
	bu_exit(1, NULL);
}


/*
 *			P R O G R A M _ R E C O R D I N G
 */
void
program_recording(int new, int scene_number, int start_frame)
{
	int number_of_frames = 1;

	/* Enter VAS IV program mode */
	vas_putc(C_PROGRAM);
	vas_await(R_PROGRAM, 0);

	vas_putnum(number_of_frames);
	vas_putc(C_ENTER);

	vas_putnum(scene_number);
	vas_putc(C_ENTER);

	/* New or Old scene */
	if( new )  {
		vas_putnum(1);
		vas_putc(C_ENTER);

		vas_putnum(start_frame);
		vas_putc(C_ENTER);
	} else {
		vas_putnum(0);
		vas_putc(C_ENTER);

		vas_putnum(start_frame);	/* First frame */
		vas_putc(C_ENTER);

		/* I believe this is used only to initiate a search */
		vas_putnum(start_frame);	/* Last recorded frame */
		vas_putc(C_ENTER);
	}
	vas_await(R_SEARCH, 120);

	/* E/E light should now be flashing, Press E/E */
	vas_putc(C_EE);
	vas_await(R_RECORD, 30);

	/* New scene only records 4 sec matte */
	if( new )  {
		fprintf(stderr,"Recording built-in title matte\n");
		do_record(1);
	}
}

/*
 *			R E C O R D _ A D D _ T O _ S C E N E
 */
void
record_add_to_scene(int number_of_frames)
{
	vas_putc(C_FRAME_CHANGE);
	vas_putnum(number_of_frames);
	vas_putc(C_ENTER);

	fprintf(stderr,"Recording %d frames, %g seconds\n",
		number_of_frames, (double)number_of_frames/30.);
	do_record(0);
}

/*
 *			D O _ R E C O R D
 *
 *  Handle the actual mechanics of starting a record operation,
 *  given that everything has been set up.
 *  If tape-head-unload timer has gone off, also handle retry
 *  operations, until frames are actually recorded.
 *
 *  NOTE:  at the present time, use of no-wait operation
 *  may result in deadlocks, if a subsequent invocation of
 *  this program is started before the backup operation has finished,
 *  because that will result in an unsolicited 'R' (ready for Record)
 *  command.  get_vtr_status() could be extended or supplemented
 *  so that most commands would wait until the VTR stops moving,
 *  but this added complexity is unwelcome.  Therefore, even though
 *  this feature is "implemented", it may cause problems.
 *  So far, this has not proven to be troublesome, but nearly all
 *  experience so far has been with frame-load time much greater than
 *  the tape backspace time.
 */
void
do_record(int wait)
{
	register int c;

	vas_putc(C_RECORD);
	for(;;)  {
		c = vas_getc();
		if(debug) vas_response(c);
		switch( c )  {
		case R_RECORD:
			/* Completely done, ready to record next frame */
			break;
		case R_DONE:
			if( wait )  {
				continue;
			} else {
				/* Don't wait for tape backspacing */
				break;
			}
		case R_MISSED:
			/*
			 * Preroll failed (typ. due to timer),
			 * VAS is backspacing for retry, wait for GO.
			 */
			vas_await(R_RECORD,99);
			vas_putc(C_RECORD);
			continue;
		case R_CUT_IN:
		case R_CUT_OUT:
			/* These are for info only */
			continue;
		default:
			if(!debug) vas_response(c);
			continue;
		}
		break;
	}
	return;
}

/*
 *			S E A R C H _ F R A M E
 *
 *  It is unclear what modes this is safe in
 */
int
search_frame(int frame)
{
	int	reply;

	vas_putc(C_SEARCH);
	vas_putnum(frame);
	vas_putc(C_ENTER);
	reply = vas_getc();
	if( reply == 'L' )
		return(0);	/* OK */
	/* 'K' is expected failure code */
	vas_response(reply);
	return(-1);		/* fail */
}

/*
 *			R E S E T _ T A P E _ T I M E
 *
 *  Reset tape time to 00:00:00:00
 *
 *  This is only safe when the tape is playing or not moving.
 */
int
reset_tape_time(void)
{
	vas_putc(C_RESET_TAPETIME);
	return(0);
}

/*
 *			T I M E 0
 *
 *  Seek to time timer value 00:00:00:00, as set by ?INIT? or
 *  reset_tape_time(), above.
 *
 *  It is unclear what modes this is safe in
 */
int
time0(void)
{
	int	reply;

	vas_putc(C_SEARCH);
	vas_putc(C_SEARCH);
	reply = vas_getc();
	if( reply == 'L' )
		return(0);	/* OK */
	vas_response(reply);
	return(-1);		/* fail */
}

/*
 *			G E T _ V A S _ S T A T U S
 *
 *  Returns -
 *	-1	VAS is unwell
 *	>0	VAS is ready, value is return code
 */
int
get_vas_status(void)
{
	int	reply;

	vas_rawputc(C_ACTIVITY);
	reply = vas_getc();		/* Needs timeout */
	if(debug) vas_response(reply);
	if( reply < 0x60 || reply > 0x78 )  return(-1);
	return(reply);
}

/*
 *			G E T _ V T R _ S T A T U S
 *
 *  If 'chatter' is 0, only errors are logged to stderr,
 *  otherwise all conditions are logged.
 *
 *  Returns -
 *	1	all is well, VTR is ready to roll
 *	0	all is well
 *	-1	problems (with description)
 */
int
get_vtr_status(int chatter)
{
	char	buf[4];

	vas_rawputc(C_VTR_STATUS);
	buf[0] = vas_getc();
	buf[1] = vas_getc();
	buf[2] = vas_getc();
	buf[3] = vas_getc();

	if( buf[0] != 'V' )  {
		fprintf(stderr,"Link to VTR is not working\n");
		return(-1);
	}
	if( buf[1] != 'R' )  {
		if( buf[1] == 'L' )  {
			fprintf(stderr,"VTR is in Local mode, can not be program controlled\n");
			return(-1);
		}
		fprintf(stderr, "VTR is in unknown mode\n");
		return(-1);
	}
	if( buf[2] == 'R' )  {
		if(chatter) fprintf(stderr,"VTR is online and ready to roll\n");
		return(1);	/* very OK */
	} else if(  buf[2] == 'N' )  {
		if(chatter) fprintf(stderr,"VTR is online and stopped\n");
		return(0);	/* OK */
	} else {
		fprintf(stderr,"VTR is online and has unknown ready status\n");
		return(-1);
	}
	/* [3] is S for stop, P for play,
	 *   L for shuttle var speed, W for slow speed */
}

int
get_frame_code(void)
{
	int	status;
	char	scene[4];
	char	frame[7];

	vas_rawputc(C_SEND_FRAME_CODE);
	status = vas_getc();
	scene[0] = vas_getc();
	scene[1] = vas_getc();
	scene[2] = vas_getc();
	scene[3] = '\0';
	frame[0] = vas_getc();
	frame[1] = vas_getc();
	frame[2] = vas_getc();
	frame[3] = vas_getc();
	frame[4] = vas_getc();
	frame[5] = vas_getc();
	frame[6] = '\0';
	if( status != 'C' && status != '<' )  {
		fprintf(stderr,"get_frame_code:  unable to acquire\n");
		return(-1);
	}
	fprintf(stderr,"Scene %s, Frame %s\n", scene, frame);
	/* May want to do something more here */
	return(0);
}

void
get_tape_position(void)
{
	char	buf[9];
	int	i;

	vas_rawputc(C_SEND_TAPE_POS);
	for( i=0; i<8; i++ )
		buf[i] = vas_getc();
	buf[8] = '\0';
	fprintf(stderr, "Tape counter is at %s\n", buf);
	/* May want to do more here */
}

/*
 *			S T R 2 F R A M E S
 *
 *  Given a numeric string, convert it to frames.
 *  The input is expected to be a number followed by letters,
 *  which will apply a multiplier, eg
 *	10	10 frames
 *	12f	12 frames
 *	3s	3 seconds (90 frames)
 *	1m	1 minute (1800 frames)
 *
 *  Excess characters in the string are ignored, so inputs of the form
 *  "32sec" and "3min" are fine.
 */
int
str2frames(char *str)
{
	int	num;
	char	suffix[33];

	suffix[0] = '\0';
	sscanf( str, "%d%32s", &num, suffix );
	switch( suffix[0] )  {
	case 'f':
	case '\0':
		break;
	case 's':
		num *= 30;
		break;
	case 'm':
		num *= 60 * 30;
		break;
	default:
		fprintf(stderr, "str2frames:  suffix '%s' unknown\n", str);
		break;
	}
	return(num);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@exit->bu_exit where applicable
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.13 2007/10/26 21:51:26 brlcad Exp $ (BRL)";
d127 1
a127 1
		bu_exit( 1, "" );
d140 1
a140 1
			bu_exit(1, "");
d194 1
a194 1
		bu_exit(1, "");
d314 1
a314 1
	bu_exit(exit_code, "");
d337 1
a337 1
	bu_exit(1, "");
d345 1
a345 1
	bu_exit(1, "");
d353 1
a353 1
	bu_exit(1, "");
d364 1
a364 1
	bu_exit(1, "");
@


14.13
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.12 2007/09/15 16:23:23 brlcad Exp $ (BRL)";
d127 1
a127 1
		exit( 1 );
d140 1
a140 1
			exit(1);
d194 1
a194 1
		exit(1);
d314 1
a314 1
	exit(exit_code);
d337 1
a337 1
	exit(1);
d345 1
a345 1
	exit(1);
d353 1
a353 1
	exit(1);
d364 1
a364 1
	exit(1);
@


14.12
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.11 2007/07/26 01:14:00 brlcad Exp $ (BRL)";
d678 1
a678 1
	char	suffix[32];
d681 1
a681 1
	sscanf( str, "%d%s", &num, suffix );
@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.10 2007/02/02 08:48:30 brlcad Exp $ (BRL)";
a37 5
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif


d40 1
d42 2
a43 4
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
@


14.10
log
@convert all of the lingering getopt calls to bu_getopt (as well as the related getopt globals optind, opterr, optarg) -- libbu's getopt has the benefit of being re-entrant and is portable to environments where getopt() may not be available.
@
text
@a30 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.9 2007/01/23 01:13:57 brlcad Exp $ (BRL)";
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.8 2007/01/20 14:37:07 brlcad Exp $ (BRL)";
d59 2
d63 1
d82 1
a82 1
	while ( (c = getopt( argc, argv, "dhF:s:S:w:W:n:N:" )) != EOF )  {
d93 1
a93 1
			framebuffer = optarg;
d98 1
a98 1
			scr_height = scr_width = atoi(optarg);
d102 1
a102 1
			scr_width = atoi(optarg);
d106 1
a106 1
			scr_height = atoi(optarg);
d114 1
a114 1
	if( optind >= argc )
d141 2
a142 2
	argc -= (optind-1);
	argv += (optind-1);
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.7 2006/01/18 06:46:29 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.6 2005/10/23 04:44:39 brlcad Exp $ (BRL)";
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.5 2005/06/30 00:05:14 erikgreenwald Exp $ (BRL)";
@


14.5
log
@added missing includes
@
text
@d31 1
a31 1
 *  
d36 1
a36 1
 *  
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.4 2005/01/30 20:31:35 brlcad Exp $ (BRL)";
d47 1
a47 1
                                                                                                                                                                            
d385 1
a385 1
	/* Enter VAS IV program mode */	
d525 1
a525 1
 * 
d539 1
a539 1
 * 
d622 1
a622 1
	/* [3] is S for stop, P for play, 
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d31 1
a31 1
 *
d36 1
a36 1
 *
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d47 1
a47 1

d385 1
a385 1
	/* Enter VAS IV program mode */
d525 1
a525 1
 *
d539 1
a539 1
 *
d622 1
a622 1
	/* [3] is S for stop, P for play,
@


14.4
log
@update copyright to 2005
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/vas4/vas4.c,v 14.3 2004/12/21 07:18:59 morrison Exp $ (BRL)";
d50 1
@


14.3
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/vas4/vas4.c,v 14.2 2004/12/21 03:36:36 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL
@
text
@a36 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/vas4/vas4.c,v 14.1 2004/11/16 19:42:32 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			V A S 4 . C
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/vas4/vas4.c,v 1.5 2004/09/03 23:31:00 morrison Exp $ (BRL)";
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/vas4/vas4.c,v 1.4 2004/08/02 23:01:53 morrison Exp $ (BRL)";
d689 10
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/vas4/vas4.c,v 1.3 2004/06/09 18:22:30 erikg Exp $ (BRL)";
d34 1
a34 1
#ifdef USE_STRING_H
@


1.3
log
@include unistd.h for getopt stuff
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/vas4/vas4.c,v 1.2 2004/06/08 22:04:47 morrison Exp $ (BRL)";
d25 1
a25 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d28 5
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/vas4/vas4.c,v 11.6 2004/05/10 15:30:51 erikg Exp $ (BRL)";
a28 2


a37 1
#include "externs.h"		/* For getopt */
@

