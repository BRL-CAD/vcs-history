head	14.24;
access;
symbols
	rel-7-10-4:14.18
	STABLE:14.18.0.2
	stable-branch:14.3
	rel-7-10-2:14.18
	rel-7-10-0:14.18
	rel-7-8-4:14.14
	rel-7-8-2:14.13
	rel-7-8-0:14.12
	trimnurbs-branch:14.12.0.2
	help:14.12
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.6
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.2
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.4
	bobWinPort:14.6.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.24
date	2007.12.18.00.14.25;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.12.17.23.07.36;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.11.21.20.49.10;	author erikgreenwald;	state Exp;
branches;
next	14.21;

14.21
date	2007.11.21.19.49.12;	author erikgreenwald;	state Exp;
branches;
next	14.20;

14.20
date	2007.11.08.04.15.47;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.09.15.16.23.18;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.03.06.22.22.35;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.08.08.05.15.25;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.06.03.21.05.40;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.02.27.10.08.40;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.29.08.39.28;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.23.07.06.42;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.21.13.57.30;	author brlcad;	state Exp;
branches
	14.7.2.1;
next	14.6;

14.6
date	2005.07.04.04.24.31;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.06.30.00.17.44;	author erikgreenwald;	state Exp;
branches;
next	14.4;

14.4
date	2005.06.24.19.14.48;	author bob1961;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.08;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.02.40.25;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.15.07.29.34;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.34;	author morrison;	state Exp;
branches;
next	;

14.7.2.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.24
log
@ws and style consistency cleanup
@
text
@/*                            I F . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file if.c
 *
 * This program is an Interactive Ray-Tracer
 *
 * Author:
 *   Natalie L. Barker
 *
 * Date:
 *   Jan 90
 *
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "bu.h"

#include "./nirt.h"
#include "./usrfmt.h"


extern outval		ValTab[];
extern int		nirt_debug;
extern int		overlap_claims;
extern double		base2local;
extern double		local2base;
overlap			ovlp_list;

overlap			*find_ovlp(struct partition *pp);
void			del_ovlp(overlap *op);
void			init_ovlp(void);


int
if_hit(struct application *ap, struct partition *part_head, struct seg *finished_segs)
{
    struct partition	*part;
    fastf_t		ar = azimuth() * deg2rad;
    fastf_t		er = elevation() * deg2rad;
    int			i;
    int			part_nm = 0;
    overlap		*ovp;	/* the overlap record for this partition */
    point_t		inormal;
    point_t		onormal;
    struct bu_vls	claimant_list;	/* Names of the claiming regions */
    int			need_to_free = 0;	/* Clean up the bu_vls? */
    fastf_t		get_obliq(fastf_t *ray, fastf_t *normal);
    struct bu_vls       *vls;
    struct bu_vls       attr_vls;
    struct bu_mro **attr_values;
    char regionPN[512] = {0};

    report(FMT_RAY);
    report(FMT_HEAD);
    if (overlap_claims == OVLP_REBUILD_FASTGEN)
	rt_rebuild_overlaps(part_head, ap, 1);
    else if (overlap_claims == OVLP_REBUILD_ALL)
	rt_rebuild_overlaps(part_head, ap, 0);

    for (part = part_head -> pt_forw; part != part_head; part = part -> pt_forw) {
	++part_nm;

	RT_HIT_NORMAL( inormal, part->pt_inhit, part->pt_inseg->seg_stp,
		&ap->a_ray, part->pt_inflip );
	RT_HIT_NORMAL( onormal, part->pt_outhit, part->pt_outseg->seg_stp,
		&ap->a_ray, part->pt_outflip );

	/* Update the output values */
	/*
	 *	WARNING -
	 *		  target, grid, direct, az, and el
	 *		  should be updated by the functions
	 *		  in command.c as well
	 */
	for (i = 0; i < 3; ++i) {
	    r_entry(i) = part-> pt_inhit -> hit_point[i];
	    r_exit(i) = part-> pt_outhit -> hit_point[i];
	    n_entry(i) = inormal[i];
	    n_exit(i) = onormal[i];
	}
	if (nirt_debug & DEBUG_HITS) {
	    bu_log("Partition %d entry: (%g, %g, %g) exit: (%g, %g, %g)\n",
		part_nm, r_entry(X), r_entry(Y), r_entry(Z),
			 r_exit(X),  r_exit(Y),  r_exit(Z));
	}

	r_entry(D) = r_entry(X) * cos(er) * cos(ar)
		    + r_entry(Y) * cos(er) * sin(ar)
		    + r_entry(Z) * sin(er);
	r_exit(D) = r_exit(X) * cos(er) * cos(ar)
		    + r_exit(Y) * cos(er) * sin(ar)
		    + r_exit(Z) * sin(er);
	n_entry(D) = n_entry(X) * cos(er) * cos(ar)
		    + n_entry(Y) * cos(er) * sin(ar)
		    + n_entry(Z) * sin(er);
	n_entry(H) = n_entry(X) * (-sin(ar))
		    + n_entry(Y) * cos(ar);
	n_entry(V) = n_entry(X) * (-sin(er)) * cos(ar)
		    + n_entry(Y) * (-sin(er)) * sin(ar)
		    + n_entry(Z) * cos(er);
	n_exit(D) = n_exit(X) * cos(er) * cos(ar)
		    + n_exit(Y) * cos(er) * sin(ar)
		    + n_exit(Z) * sin(er);
	n_exit(H) = n_exit(X) * (-sin(ar))
		    + n_exit(Y) * cos(ar);
	n_exit(V) = n_exit(X) * (-sin(er)) * cos(ar)
		    + n_exit(Y) * (-sin(er)) * sin(ar)
		    + n_exit(Z) * cos(er);
	ValTab[VTI_LOS].value.fval = r_entry(D) - r_exit(D);
	ValTab[VTI_SLOS].value.fval = 0.01 * ValTab[VTI_LOS].value.fval *
	    part -> pt_regionp -> reg_los;
	strncpy(regionPN, part->pt_regionp->reg_name, 512);
	regionPN[511] = '\0';
	ValTab[VTI_PATH_NAME].value.sval = part->pt_regionp->reg_name;
	ValTab[VTI_REG_NAME].value.sval = bu_basename(regionPN);
	ValTab[VTI_REG_ID].value.ival = part -> pt_regionp -> reg_regionid;
	ValTab[VTI_SURF_NUM_IN].value.ival = part -> pt_inhit -> hit_surfno;
	ValTab[VTI_SURF_NUM_OUT].value.ival = part -> pt_outhit -> hit_surfno;
	ValTab[VTI_OBLIQ_IN].value.fval =
	    get_obliq(ap -> a_ray.r_dir, inormal);
	ValTab[VTI_OBLIQ_OUT].value.fval =
	    get_obliq(ap -> a_ray.r_dir, onormal);

	if (part -> pt_overlap_reg == 0) {
	    ValTab[VTI_CLAIMANT_COUNT].value.ival = 1;
	    ValTab[VTI_CLAIMANT_LIST].value.sval =
	    ValTab[VTI_CLAIMANT_LISTN].value.sval =
		ValTab[VTI_REG_NAME].value.sval;
	} else {
	    struct region	**rpp;
	    char		*cp;

	    bu_vls_init(&claimant_list);
	    ValTab[VTI_CLAIMANT_COUNT].value.ival = 0;
	    for (rpp = part -> pt_overlap_reg; *rpp != REGION_NULL; ++rpp) {
		char tmpcp[512];

		if (ValTab[VTI_CLAIMANT_COUNT].value.ival++)
		    bu_vls_strcat(&claimant_list, " ");
		strncpy(tmpcp, (*rpp)->reg_name, 512);
		tmpcp[511] = '\0';
		bu_vls_strcat(&claimant_list, bu_basename(tmpcp));
	    }
	    ValTab[VTI_CLAIMANT_LIST].value.sval =
		bu_vls_addr(&claimant_list);

	    for (cp = bu_vls_strdup(&claimant_list);
		 *cp != '\0'; ++cp)
		if (*cp == ' ')
		    *cp = '\n';

	    ValTab[VTI_CLAIMANT_LISTN].value.sval = cp;

	    need_to_free = 1;
	}

	/* format up the attribute strings into a single string */
	bu_vls_init(&attr_vls);
	attr_values = part->pt_regionp->attr_values;
	for (i=0 ; i < a_tab.attrib_use ; i++) {

	    BU_CK_MRO(attr_values[i]);
	    vls = &attr_values[i]->string_rep;

	    if (bu_vls_strlen(vls) > 0) {
		/* XXX only print attributes that actually were set */
		bu_vls_printf(&attr_vls, "%s=%S ", a_tab.attrib[i], vls);
	    }
	}

	ValTab[VTI_ATTRIBUTES].value.sval = bu_vls_addr(&attr_vls);

	/* Do the printing for this partition */
	report(FMT_PART);

	if (need_to_free) {
	    bu_vls_free(&claimant_list);
	    bu_free((genptr_t)ValTab[VTI_CLAIMANT_LISTN].value.sval, "returned by bu_vls_strdup");
	    need_to_free = 0;
	}

	while ((ovp = find_ovlp(part)) != OVERLAP_NULL) {
#ifdef NIRT_OVLP_PATH
	    ValTab[VTI_OV_REG1_NAME].value.sval = ovp->reg1->reg_name;
	    ValTab[VTI_OV_REG2_NAME].value.sval = ovp->reg2->reg_name;
#else
	    char *copy_ovlp_reg1 = bu_strdup(ovp->reg1->reg_name);
	    char *copy_ovlp_reg2 = bu_strdup(ovp->reg2->reg_name);

	    ValTab[VTI_OV_REG1_NAME].value.sval = bu_basename(copy_ovlp_reg1);
	    ValTab[VTI_OV_REG2_NAME].value.sval = bu_basename(copy_ovlp_reg2);
#endif
	    ValTab[VTI_OV_REG1_ID].value.ival = ovp->reg1->reg_regionid;
	    ValTab[VTI_OV_REG2_ID].value.ival = ovp->reg2->reg_regionid;
	    ValTab[VTI_OV_SOL_IN].value.sval =
		(char *)(part->pt_inseg->seg_stp->st_dp->d_namep);
	    ValTab[VTI_OV_SOL_OUT].value.sval =
		(char *)(part->pt_outseg->seg_stp->st_dp->d_namep);

	    for (i = 0; i < 3; ++i) {
		ov_entry(i) = ovp -> in_point[i];
		ov_exit(i) = ovp -> out_point[i];
	    }

	    ov_entry(D) = target(D) - ovp -> in_dist;
	    ov_exit(D) = target(D) - ovp -> out_dist;
	    ValTab[VTI_OV_LOS].value.fval = ov_entry(D) - ov_exit(D);
	    report(FMT_OVLP);

#ifndef NIRT_OVLP_PATH
	    bu_free((genptr_t)copy_ovlp_reg1, "copy_ovlp_reg1");
	    bu_free((genptr_t)copy_ovlp_reg2, "copy_ovlp_reg2");
#endif

	    del_ovlp(ovp);
	}
    }
    report(FMT_FOOT);

    if (ovlp_list.forw != &ovlp_list) {
	fprintf(stderr, "Previously unreported overlaps.  Shouldn't happen\n");
	ovp = ovlp_list.forw;
	while( ovp != &ovlp_list ) {
		bu_log( " OVERLAP:\n\t%s %s (%g %g %g) %g\n",ovp -> reg1 -> reg_name, ovp -> reg2 -> reg_name, V3ARGS( ovp->in_point ), ovp->out_dist - ovp->in_dist );
	    ovp = ovp->forw;
	}
    }

    bu_vls_free(&attr_vls);

    return( HIT );
}


int
if_miss(void)
{
    report(FMT_RAY);
    report(FMT_MISS);
    return ( MISS );
}


/**
 * I F _ O V E R L A P
 *
 * Default handler for overlaps in rt_boolfinal().
 * Returns -
 *	 0	to eliminate partition with overlap entirely
 *	!0	to retain partition in output list
 *
 *	Taken out of:	src/librt/bool.c
 *	Taken by:	Paul Tanenbaum
 *	Date taken:	29 March 1990
 */
int
if_overlap(register struct application *ap, register struct partition *pp, struct region *reg1, struct region *reg2, struct partition *InputHdp)
{
    overlap	*new_ovlp;

    /* N. B. bu_malloc() only returns on successful allocation */
    new_ovlp = (overlap *) bu_malloc(sizeof(overlap), "new_ovlp");

    new_ovlp -> ap = ap;
    new_ovlp -> pp = pp;
    new_ovlp -> reg1 = reg1;
    new_ovlp -> reg2 = reg2;
    new_ovlp -> in_dist = pp -> pt_inhit -> hit_dist;
    new_ovlp -> out_dist = pp -> pt_outhit -> hit_dist;
    VJOIN1(new_ovlp -> in_point, ap->a_ray.r_pt, pp->pt_inhit->hit_dist,
	ap->a_ray.r_dir );
    VJOIN1(new_ovlp -> out_point, ap->a_ray.r_pt, pp->pt_outhit->hit_dist,
	ap->a_ray.r_dir );

    /* Insert the new overlap into the list of overlaps */
    new_ovlp -> forw = ovlp_list.forw;
    new_ovlp -> backw = &ovlp_list;
    new_ovlp -> forw -> backw = new_ovlp;
    ovlp_list.forw = new_ovlp;

    /* Match current BRL-CAD default behavior */
    return( rt_defoverlap (ap, pp, reg1, reg2, InputHdp ) );
}


/**
 * The callbacks used by backup()
 */
int if_bhit(struct application *ap, struct partition *part_head, struct seg *finished_segs)
{
    struct partition	*part;
    vect_t		dir;
    point_t		point;
    int			i;

    if ((part = part_head -> pt_back) == part_head)
	bu_exit (1, "if_bhit() got empty partition list.  Shouldn't happen\n");

    /* calculate exit point */
    VJOIN1(part->pt_outhit->hit_point, ap->a_ray.r_pt, part->pt_outhit->hit_dist, ap->a_ray.r_dir);

    if (nirt_debug & DEBUG_BACKOUT) {
	bu_log("Backmost region is '%s'\n", part->pt_regionp->reg_name);
	bu_log("Backout ray exits at (%g %g %g)\n",
	       part->pt_outhit->hit_point[0] * base2local,
	       part->pt_outhit->hit_point[1] * base2local,
	       part->pt_outhit->hit_point[2] * base2local);
    }

    for (i = 0; i < 3; ++i)
	dir[i] = -direct(i);
    VJOIN1(point, part -> pt_outhit -> hit_point, BACKOUT_DIST, dir);

    if (nirt_debug & DEBUG_BACKOUT)
	bu_log("Point %g beyond is (%g %g %g)\n",
	       BACKOUT_DIST,
	       point[0] * base2local,
	       point[1] * base2local,
	       point[2] * base2local);

    for (i = 0; i < 3; ++i)
	target(i) = point[i];
    targ2grid();

    return( HIT );
}


int
if_bmiss(void)
{
    return ( MISS );
}


fastf_t
get_obliq(fastf_t *ray, fastf_t *normal)
{
    double	cos_obl;
    fastf_t	obliquity;

    cos_obl = fabs(VDOT(ray, normal) * MAGNITUDE(normal) / MAGNITUDE(ray));
    if (cos_obl < 1.001) {
	if (cos_obl > 1)
		cos_obl = 1;
	obliquity = acos(cos_obl);
    } else {
	fflush(stdout);
	fprintf (stderr, "Error:  cos(obliquity) > 1\n");
	obliquity = 0;
	bu_exit(1, NULL);
    }

    /* convert obliquity to degrees */
    obliquity = fabs(obliquity * 180/PI);
    if (obliquity > 90 && obliquity <= 180)
	    obliquity = 180 - obliquity;
    else if (obliquity > 180 && obliquity <= 270)
	    obliquity = obliquity - 180;
    else if (obliquity > 270 && obliquity <= 360)
	    obliquity = 360 - obliquity;

    return (obliquity);
}


overlap *
find_ovlp(struct partition *pp)
{
    overlap	*op;

    for (op = ovlp_list.forw; op != &ovlp_list; op = op -> forw) {
	if (((pp -> pt_inhit -> hit_dist <= op -> in_dist)
	    && (op -> in_dist <= pp -> pt_outhit -> hit_dist)) ||
	    ((pp -> pt_inhit -> hit_dist <= op -> out_dist)
	    && (op -> in_dist <= pp -> pt_outhit -> hit_dist)))
	    break;
    }
    return ((op == &ovlp_list) ? OVERLAP_NULL : op);
}


void
del_ovlp(overlap *op)
{
    op -> forw -> backw = op -> backw;
    op -> backw -> forw = op -> forw;
    bu_free((char *)op, "free op in del_ovlp");
}


void
init_ovlp(void)
{
    ovlp_list.forw = ovlp_list.backw = &ovlp_list;
}


int
if_boverlap(register struct application *ap, register struct partition *pp, struct region *reg1, struct region *reg2)
{
    return 1;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.23
log
@use c99 fabs() instead of abs macro, might need configure support
@
text
@d22 8
a31 5
/*      IF.C            */
#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.22 2007/11/21 20:49:10 erikgreenwald Exp $";
#endif

d60 2
a61 1
int if_hit(struct application *ap, struct partition *part_head, struct seg *finished_segs)
d85 2
a86 5
#if 0
    rt_pr_partitions( ap->a_rt_i, part_head, " ...At top of for loop:" );
#endif
    for (part = part_head -> pt_forw; part != part_head; part = part -> pt_forw)
    {
d101 1
a101 2
	for (i = 0; i < 3; ++i)
	{
d107 1
a107 2
	if (nirt_debug & DEBUG_HITS)
	{
d149 2
a150 6
#if 0
	if (*(part -> pt_overlap_reg) == REGION_NULL)
#else
	if (part -> pt_overlap_reg == 0)
#endif
	{
d155 1
a155 3
	}
	else
	{
d161 1
a161 2
	    for (rpp = part -> pt_overlap_reg; *rpp != REGION_NULL; ++rpp)
	    {
d202 1
a202 2
	if (need_to_free)
	{
d208 1
a208 2
	while ((ovp = find_ovlp(part)) != OVERLAP_NULL)
	{
d225 2
a226 2
	    for (i = 0; i < 3; ++i)
	    {
d230 1
d235 1
d240 1
d245 2
a246 2
    if (ovlp_list.forw != &ovlp_list)
    {
d249 1
a249 2
	while( ovp != &ovlp_list )
	{
a256 1

d260 3
a262 1
int if_miss(void)
d269 3
a271 2
/*
 *			I F _ O V E R L A P
d273 2
a274 2
 *  Default handler for overlaps in rt_boolfinal().
 *  Returns -
d311 3
a313 4
/*
 *
 *		The callbacks used by backup()
 *
d328 1
a328 2
    if (nirt_debug & DEBUG_BACKOUT)
    {
d354 3
a356 1
int if_bmiss(void)
d361 3
a363 1
fastf_t get_obliq (fastf_t *ray, fastf_t *normal)
d369 1
a369 2
    if (cos_obl < 1.001)
    {
d373 1
a373 3
    }
    else
    {
d392 3
a394 1
overlap *find_ovlp (struct partition *pp)
d398 1
a398 2
    for (op = ovlp_list.forw; op != &ovlp_list; op = op -> forw)
    {
d408 3
a410 1
void del_ovlp (overlap *op)
d417 3
a419 1
void init_ovlp(void)
d424 1
d428 1
a428 1
	return 1;
@


14.22
log
@pass bu_exit a NULL instead of an empty string
@
text
@d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.21 2007/11/21 19:49:12 erikgreenwald Exp $";
d372 1
a372 1
    cos_obl = abs(VDOT(ray, normal) * MAGNITUDE(normal) / MAGNITUDE(ray));
d388 1
a388 1
    obliquity = abs(obliquity * 180/PI);
@


14.21
log
@exit->bu_exit where applicable
@
text
@d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.20 2007/11/08 04:15:47 brlcad Exp $";
d384 1
a384 1
	bu_exit(1, "");
@


14.20
log
@minor tweaks, preventive null terminating of strncmp'd strings
@
text
@d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.19 2007/09/15 16:23:18 brlcad Exp $";
d330 1
a330 4
    {
	bu_log("if_bhit() got empty partition list.  Shouldn't happen\n");
	exit (1);
    }
d384 1
a384 1
	exit(1);
@


14.19
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.18 2007/03/06 22:22:35 brlcad Exp $";
d140 1
d175 1
@


14.18
log
@use bu_basename instead of basename, no longer need libgen.h
@
text
@d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.17 2007/01/27 01:41:44 brlcad Exp $";
d34 1
a34 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.17
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.16 2007/01/23 01:13:44 brlcad Exp $";
a38 3
#ifdef HAVE_LIBGEN_H
#  include <libgen.h>
#endif
d43 1
d145 1
a145 1
	ValTab[VTI_REG_NAME].value.sval = basename(regionPN);
d178 1
a178 1
		bu_vls_strcat(&claimant_list, basename(tmpcp));
d228 2
a229 2
	    ValTab[VTI_OV_REG1_NAME].value.sval = basename(copy_ovlp_reg1);
	    ValTab[VTI_OV_REG2_NAME].value.sval = basename(copy_ovlp_reg2);
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.15 2007/01/20 14:36:58 brlcad Exp $";
d259 3
a261 3
    	ovp = ovlp_list.forw;
    	while( ovp != &ovlp_list )
    	{
d263 2
a264 2
    	    ovp = ovp->forw;
    	}
d390 1
a390 1
    	obliquity = 0;
@


14.15
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.14 2006/08/08 05:15:25 brlcad Exp $";
@


14.14
log
@get rid of the old 'cad' path references/assumptions
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.13 2006/06/03 21:05:40 brlcad Exp $";
@


14.13
log
@quell incompatible parammeter type warning
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.12 2006/02/27 10:08:40 brlcad Exp $";
d289 3
a291 3
 *	Stolen out of:	spark.brl.mil:/m/cad/librt/bool.c
 *	Stolen by:	Paul Tanenbaum
 *	Date stolen:	29 March 1990
@


14.12
log
@stdlib.h and exit()
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.11 2006/01/29 08:39:28 brlcad Exp $";
d218 1
a218 1
	    bu_free(ValTab[VTI_CLAIMANT_LISTN].value.sval, "returned by bu_vls_strdup");
@


14.11
log
@update to api changes from rt_* to bu_* for certain routines.
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.10 2006/01/23 07:06:42 brlcad Exp $";
a29 1
/*	INCLUDES	*/
d32 1
d37 2
@


14.10
log
@ws
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.9 2006/01/18 06:46:23 brlcad Exp $";
d296 2
a297 2
    /* N. B. rt_malloc() only returns on successful allocation */
    new_ovlp = (overlap *) rt_malloc(sizeof(overlap), "new_ovlp");
d424 1
a424 1
    rt_free((char *)op, "free op in del_ovlp");
@


14.9
log
@update copyright to 2006
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.8 2005/10/23 04:44:37 brlcad Exp $";
d216 1
a216 2
	    bu_free(ValTab[VTI_CLAIMANT_LISTN].value.sval,
		"returned by bu_vls_strdup");
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.7 2005/08/21 13:57:30 brlcad Exp $";
@


14.7
log
@reorder the logic to preserve constness on sval
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.6 2005/07/04 04:24:31 brlcad Exp $";
d274 1
a274 1
{ 
d370 1
a370 1
{ 
d381 1
a381 1
    { 
d395 1
a395 1
    obliquity = abs(obliquity * 180/PI); 
d402 1
a402 1
    
@


14.7.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header$";
d274 1
a274 1
{
d370 1
a370 1
{
d381 1
a381 1
    {
d395 1
a395 1
    obliquity = abs(obliquity * 180/PI);
d402 1
a402 1

@


14.6
log
@include the libgen.h header instead of overriding the prototype for basename
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.5 2005/06/30 00:17:44 erikgreenwald Exp $";
a34 1

a37 1

d183 3
a185 4
	    ValTab[VTI_CLAIMANT_LISTN].value.sval =
		bu_vls_strdup(&claimant_list);
	    for (cp = ValTab[VTI_CLAIMANT_LISTN].value.sval;
		*cp != '\0'; ++cp)
d188 3
@


14.5
log
@added missing includes
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.4 2005/06/24 19:14:48 bob1961 Exp $";
d37 5
a41 1
# include <string.h>
a66 1
    char		*basename(char *string);
@


14.4
log
@Fixed bugs that caused the region names reported to be potentially fouled up (i.e. The temporary string being used was continually being written to even though there were previous pointers into this tmp string.)
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.3 2005/01/30 20:31:08 brlcad Exp $";
d36 4
@


14.3
log
@update copyright to 2005
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/if.c,v 14.2 2004/12/21 02:40:25 morrison Exp $";
a54 2
extern int	rt_defoverlap( struct application *ap, struct partition *pp, struct region *reg1, struct region *reg2, struct partition *pheadp );
	
d140 1
a140 1
	ValTab[VTI_PATH_NAME].value.sval = regionPN;
a155 1
	    strncpy(regionPN, part->pt_regionp->reg_name, 512);
d158 1
a158 1
		basename(regionPN);
d169 2
d173 2
a174 2
		strncpy(regionPN, (*rpp)->reg_name, 512);
		bu_vls_strcat(&claimant_list, basename(regionPN));
d216 12
a227 6
	    strncpy(regionPN, ovp -> reg1 -> reg_name, 512);
	    ValTab[VTI_OV_REG1_NAME].value.sval = basename(regionPN);
	    ValTab[VTI_OV_REG1_ID].value.ival = ovp -> reg1 -> reg_regionid;
	    strncpy(regionPN, ovp -> reg2 -> reg_name, 512);
	    ValTab[VTI_OV_REG2_NAME].value.sval = basename(regionPN);
	    ValTab[VTI_OV_REG2_ID].value.ival = ovp -> reg2 -> reg_regionid;
d229 1
a229 1
		(char *)(part -> pt_inseg -> seg_stp -> st_dp -> d_namep);
d231 1
a231 1
		(char *)(part -> pt_outseg -> seg_stp -> st_dp -> d_namep);
d241 4
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d27 1
a27 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/if.c,v 14.1 2004/11/16 19:42:17 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 24
d27 1
a27 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/if.c,v 1.3 2004/09/15 07:29:34 morrison Exp $";
@


1.3
log
@quell constness warnings and handle the potentiality that basename will indeed mess with the input pointer by first copying the data to a simple temp array.
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/if.c,v 1.2 2004/08/02 23:01:51 morrison Exp $";
d398 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/if.c,v 1.1 2004/05/20 15:20:34 morrison Exp $";
a8 2


d15 1
d19 1
d51 1
d117 3
a119 4
	ValTab[VTI_PATH_NAME].value.sval =
	    (char *)(part -> pt_regionp -> reg_name);
	ValTab[VTI_REG_NAME].value.sval =
	    basename(part -> pt_regionp -> reg_name);
d134 1
d137 1
a137 1
		basename(part -> pt_regionp -> reg_name);
d150 2
a151 1
		bu_vls_strcat(&claimant_list, basename((*rpp) -> reg_name));
d193 2
a194 2
	    ValTab[VTI_OV_REG1_NAME].value.sval =
		basename(ovp -> reg1 -> reg_name);
d196 2
a197 2
	    ValTab[VTI_OV_REG2_NAME].value.sval =
		basename(ovp -> reg2 -> reg_name);
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/nirt/if.c,v 11.20 2004/05/10 15:30:49 erikg Exp $";
d7 1
a7 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

