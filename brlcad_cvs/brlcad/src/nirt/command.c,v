head	14.19;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.3
	rel-7-10-2:14.12
	rel-7-10-0:14.12
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.4
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.19
date	2007.12.18.00.11.24;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.12.17.23.30.52;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.12.17.23.07.36;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.11.21.20.49.09;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.11.21.19.49.12;	author erikgreenwald;	state Exp;
branches;
next	14.14;

14.14
date	2007.11.08.04.15.47;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.09.15.16.23.18;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.02.20.08.19.50;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.23.07.07.15;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.06.24.19.03.52;	author bob1961;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2005.05.28.02.14.52;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.08;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.02.40.25;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.16.04.56.41;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.30;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.34;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@uffer
@
text
@/*                       C O M M A N D . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file command.c
 *
 * process nirt commands
 *
 * Author:
 *   Natalie L. Barker
 *
 * Date:
 *   Jan 90
 *
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"

#include "../librt/debug.h"
#include "./nirt.h"
#include "./usrfmt.h"


char		local_u_name[65];
double		base2local;		/* from db_i struct, not fastf_t */
double		local2base;		/* from db_i struct, not fastf_t */

extern fastf_t			bsphere_diameter;
extern int			do_backout;
extern int			silent_flag;
extern struct application	ap;
extern struct rt_i		*rti_tab[];	/* For use w/ and w/o air */
extern struct resource		res_tab[];	/* For use w/ and w/o air */
extern com_table		ComTab[];
extern outval			ValTab[];
extern int			overlap_claims;
extern char			*ocname[];
extern int			nirt_debug;

extern void printusage(void);
extern void do_rt_gettrees(struct rt_i *rtip, char **object_name, int nm_objects);


void
bot_minpieces(char *buffer, com_table *ctp )
{
    int new_value;
    int i=0;
    
    while (isspace(*(buffer+i)))
	++i;
    if (*(buffer+i) == '\0') {
	/* display current rt_bot_minpieces */
	bu_log( "rt_bot_minpieces = %d\n", rt_bot_minpieces );
	return;
    }
    
    new_value = atoi( buffer );
    
    if( new_value < 0 ) {
	bu_log( "Error: rt_bot_minpieces cannot be less than 0\n" );
	return;
    }
    
    if( new_value != rt_bot_minpieces ) {
	rt_bot_minpieces = new_value;
	need_prep = 1;
    }
}


void
az_el(char *buffer, com_table *ctp)
{
    extern int 	str_dbl();  /* function to convert  string to  double */
    int 		i = 0;      /* current position on the *buffer        */
    int		rc = 0;     /* the return code value from str_dbl()   */
    double		az;
    double  	el;
    
    while (isspace(*(buffer+i)))
	++i;
    if (*(buffer+i) == '\0') {
	/* display current az and el values */
	bu_log("(az, el) = (%4.2f, %4.2f)\n",
	       azimuth(), elevation());
	return;
    }
    if ((rc = str_dbl(buffer+i, &az)) == 0) {
	/* get az value */
	com_usage(ctp);
	return;
    }
    if (fabs(az) > 360) {
	/* check for valid az value */
	
	bu_log("Error:  |azimuth| <= 360\n");
	return;
    }
    i += rc;
    while (isspace(*(buffer+i)))
	++i;
    if ((rc = str_dbl(buffer+i, &el)) == 0) {
	/* get el value */
	com_usage(ctp);
	return;
    }
    if (fabs(el) > 90) {
	/* check for valid el value */
	bu_log("Error:  |elevation| <= 90\n");
	return;
    }
    i += rc;
    if (*(buffer+i) != '\0') {
	/* check for garbage at the end of the line */
	com_usage(ctp);
	return;
    }
    azimuth() = az;
    elevation() = el;
    ae2dir();
}


void
sh_esc (char *buffer)
{
    static char	*shell = "";
    static char	*last_cmd = "";
    
    while (isspace(*buffer)) {
	++buffer;
    }
    
    if (*buffer == '!') {
	(void) system(last_cmd);
    } else if (*buffer) {
	(void) system(buffer);
	last_cmd = buffer;
    } else {
	if ((*shell == '\0') && (shell = getenv("SHELL")) == 0) {
#ifndef _WIN32
	    shell = DFLT_SHELL;
#else
	    shell = "cmd.exe";
#endif
	}
	(void) system(shell);
    }
}


void
grid_coor(char *buffer, com_table *ctp)
{
    extern int 	str_dbl();  /* function to convert  string to  double */
    int 		i = 0;
    int		rc = 0;    /* the return code value from str_dbl() */
    vect_t	        Gr;
    
    while (isspace(*(buffer+i)))
	++i;
    if (*(buffer+i) == '\0') {
	/* display current grid coordinates */
	bu_log("(h,v,d) = (%4.2f, %4.2f, %4.2f)\n",
	       grid(HORZ) * base2local,
	       grid(VERT) * base2local,
	       grid(DIST) * base2local);
	return;
    }
    if ((rc = str_dbl(buffer+i, &Gr[HORZ])) == 0) {
	/* get horz coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    while (isspace(*(buffer+i)))
	++i;
    if ((rc = str_dbl(buffer+i, &Gr[VERT])) == 0) {
	/* get vert coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    while (isspace(*(buffer+i)))
	++i;
    if (*(buffer+i) == '\0') {
	/* if there is no dist coor, set default */
	grid(HORZ) = Gr[HORZ] * local2base;
	grid(VERT) = Gr[VERT] * local2base;
	grid2targ();
	return;
    }
    if ((rc = str_dbl(buffer+i, &Gr[DIST])) == 0) {
	/* set dist coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    if (*(buffer+i) != '\0') {
	/* check for garbage at the end of the line */
	com_usage(ctp);
	return;
    }
    grid(HORZ) = Gr[HORZ] * local2base;
    grid(VERT) = Gr[VERT] * local2base;
    grid(DIST) = Gr[DIST] * local2base;
    grid2targ();
}


void
target_coor(char *buffer, com_table *ctp)
{
    extern int 	str_dbl();  /* function to convert string to double */
    int 		i = 0;
    int		rc = 0;     /* the return code value from str_dbl() */
    vect_t		Tar;	    /* Target x, y and z          	    */
    
    while (isspace(*(buffer+i)))
	++i;
    if (*(buffer+i) == '\0') {
	/* display current target coors */
	bu_log("(x,y,z) = (%4.2f, %4.2f, %4.2f)\n",
	       target(X) * base2local,
	       target(Y) * base2local,
	       target(Z) * base2local);
	return;
    }
    if ((rc = str_dbl(buffer+i, &Tar[X])) == 0) {
	/* get target x coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    while (isspace(*(buffer+i)))
	++i;
    if ((rc = str_dbl(buffer+i, &Tar[Y])) == 0) {
	/* get target y coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    while (isspace(*(buffer+i)))
	++i;
    if ((rc = str_dbl(buffer+i, &Tar[Z])) == 0) {
	/* get target z coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    if (*(buffer+i) != '\0') {
	/* check for garbage at the end of the line */
	com_usage(ctp);
	return;
    }
    target(X) = Tar[X] * local2base;
    target(Y) = Tar[Y] * local2base;
    target(Z) = Tar[Z] * local2base;
    targ2grid();
}


void
dir_vect(char *buffer, com_table *ctp)
{
    extern int 	str_dbl();  /* function to convert  string to  double */
    int 		i = 0;
    int		rc = 0;    /* the return code value from str_dbl() */
    vect_t		Dir;	   /* Direction vector x, y and z          */

    while (isspace(*(buffer+i)))
	++i;
    if (*(buffer+i) == '\0') {
	/* display current direct coors */
	bu_log("(x,y,z) = (%4.2f, %4.2f, %4.2f)\n",
	       direct(X), direct(Y), direct(Z));
	return;
    }
    if ((rc = str_dbl(buffer+i, &Dir[X])) == 0) {
	/* get direct x coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    while (isspace(*(buffer+i)))
	++i;
    if ((rc = str_dbl(buffer+i, &Dir[Y])) == 0) {
	/* get direct y coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    while (isspace(*(buffer+i)))
	++i;
    if ((rc = str_dbl(buffer+i, &Dir[Z])) == 0) {
	/* get direct z coor */
	com_usage(ctp);
	return;
    }
    i += rc;
    if (*(buffer+i) != '\0') {
	/* check for garbage at the end of the line */
	com_usage(ctp);
	return;
    }
    VUNITIZE( Dir );
    direct(X) = Dir[X];
    direct(Y) = Dir[Y];
    direct(Z) = Dir[Z];
    dir2ae();
}


void
quit()
{
    if (silent_flag != SILENT_YES)
	(void) fputs("Quitting...\n", stdout);
    bu_exit (0, NULL);
}


void
show_menu(char *buffer)
{
    com_table	*ctp;

    for (ctp = ComTab; ctp -> com_name; ++ctp)
	(void) bu_log("%*s %s\n", -14, ctp -> com_name, ctp -> com_desc);
}


void
shoot(char *buffer, int ctp)
{
    int		i;

    extern void	init_ovlp();

    if (need_prep) {
	if (rtip) rt_clean(rtip);
	do_rt_gettrees(rtip, NULL, 0);
    }


    if (do_backout) {
	backout();
#if 0
	do_backout = 0;
#endif
    }

    for (i = 0; i < 3; ++i) {
	ap.a_ray.r_pt[i] = target(i);
	ap.a_ray.r_dir[i] = direct(i);
    }

    init_ovlp();
    (void) rt_shootray( &ap );
}


void
use_air(char *buffer, com_table *ctp)
{
    int			new_use = 0;      /* current position on the *buffer */
    char		response[128];
    char		*rp = response;
    char		db_title[TITLE_LEN+1];	/* title from MGED database */
    struct rt_i		*rtip;

    extern char	*db_name;		/* Name of MGED database file */

    while (isspace(*buffer))
	++buffer;
    if (*buffer == '\0') {
	/* display current value of use_of_air */
	bu_log("use_air = %d\n", ap.a_rt_i -> useair);
	return;
    }
    if (!isdigit(*buffer)) {
	com_usage(ctp);
	return;
    }
    while (isdigit(*buffer)) {
	new_use *= 10;
	new_use += *buffer++ - '0';
    }
    if (new_use && (new_use != 1)) {
	bu_log("Warning: useair=%d specified, will set to 1\n",
	       new_use);
	new_use = 1;
    }
    if (rti_tab[new_use] == RTI_NULL) {
	bu_log(" Air %s in the current directory of database objects.\n",
	       new_use ? "is not included" : "is included");
	bu_log(
	       " To set useair=%d requires building/prepping another directory.\n",
	       new_use);
	bu_log(" Do you want to do that now (y|n)[n]? ");
	bu_fgets(response, sizeof(response), stdin);
	while ((*rp == ' ') || (*rp == '\t'))
	    ++rp;
	if ((*rp != 'y') && (*rp != 'Y')) {
	    bu_log("useair remains %d\n", ap.a_rt_i -> useair);
	    return;
	}
	bu_log("Building the directory...");
	if ((rtip = rt_dirbuild( db_name , db_title, TITLE_LEN )) == RTI_NULL) {
	    bu_log("Could not load file %s\n", db_name);
	    printusage();
	    bu_exit(1, NULL);
	}
	rti_tab[new_use] = rtip;
	rtip -> useair = new_use;
	rtip -> rti_save_overlaps = (overlap_claims > 0);
	
	bu_log("Prepping the geometry...");
	do_rt_gettrees(rtip, NULL, 0);
    }
    ap.a_rt_i = rti_tab[new_use];
    ap.a_resource = &res_tab[new_use];
    set_diameter(ap.a_rt_i);
}


void
nirt_units (char *buffer, com_table *ctp)
{
    double		tmp_dbl;
    int			i = 0;      /* current position on the *buffer */
    extern struct rt_i	*rtip;

    double		mk_cvt_factor();

    while (isspace(*(buffer+i)))
	++i;
    if (*(buffer+i) == '\0') {
	/* display current destination */
	bu_log("units = '%s'\n", local_u_name);
	return;
    }

    if (strcmp(buffer + i, "?") == 0) {
	com_usage(ctp);
	return;
    } else if (strcmp(buffer + i, "default") == 0) {
	base2local = rtip -> rti_dbip -> dbi_base2local;
	local2base = rtip -> rti_dbip -> dbi_local2base;
	strncpy(local_u_name, bu_units_string(base2local), 64);
	local_u_name[64] = '\0';
    } else {
	if ((tmp_dbl = bu_units_conversion(buffer + i)) == 0.0) {
	    bu_log("Invalid unit specification: '%s'\n", buffer + i);
	    return;
	}
	strncpy(local_u_name, buffer + i, 64);
	local_u_name[64] = '\0';
	local2base = tmp_dbl;
	base2local = 1.0 / tmp_dbl;
    }
}


void
do_overlap_claims (char *buffer, com_table *ctp)
{
    int			i = 0;      /* current position on the *buffer */
    int			j;
    double		mk_cvt_factor();

    while (isspace(*(buffer+i)))
	++i;
    if (*(buffer+i) == '\0') {
	/* display current destination */
	bu_log("overlap_claims = '%s'\n", ocname[overlap_claims]);
	return;
    }

    if (strcmp(buffer + i, "?") == 0) {
	com_usage(ctp);
	return;
    }
    for (j = OVLP_RESOLVE; j <= OVLP_RETAIN; ++j) {
	char	numeral[4];
	int	k;
	
	sprintf(numeral, "%d", j);
	if ((strcmp(buffer + i, ocname[j]) == 0)
	    || (strcmp(buffer + i, numeral) == 0)) {
	    overlap_claims = j;
	    for (k = 0; k < 2; ++k)
		if (rti_tab[k] != RTI_NULL)
		    rti_tab[k] -> rti_save_overlaps = (j > 0);
	    return;
	}
    }

    bu_log("Invalid overlap_claims specification: '%s'\n", buffer + i);
}


void
cm_attr(char *buffer, com_table *ctp)
{
    while (isascii(*buffer) && isspace(*buffer)) buffer++;

    if (strlen(buffer) == 0) {
	com_usage(ctp);
	return;
    }

    if (! strncmp(buffer, "-p", 2) ) {
	attrib_print();
	return;
    }

    if (! strncmp(buffer, "-f", 2) ) {
	attrib_flush();
	return;
    }

    attrib_add(buffer);
}


void
cm_debug(char *buffer, com_table *ctp)
{
    register char	*cp = buffer;

    /* This is really icky -- should have argc, argv interface */
    while( *cp && isascii(*cp) && isspace(*cp) )  cp++;
    if (*cp == '\0') {
	/* display current value */
	bu_printb( "debug ", nirt_debug, DEBUG_FMT );
	bu_log("\n");
	return;
    }

    /* Set a new value */
    if (sscanf( cp, "%x", (unsigned int *)&nirt_debug ) == 1) {
	bu_printb( "debug ", nirt_debug, DEBUG_FMT );
	bu_log("\n");
    } else {
	com_usage(ctp);
    }
}


void
cm_libdebug(char *buffer, com_table *ctp)
{
    register char	*cp = buffer;

    /* This is really icky -- should have argc, argv interface */

    while( *cp && isascii(*cp) && isspace(*cp) )
	cp++;

    if (*cp == '\0') {
	/* display current value */
	bu_printb( "libdebug ", RT_G_DEBUG, RT_DEBUG_FMT );
	bu_log("\n");
	return;
    }

    /* Set a new value */
    if (sscanf( cp, "%x", (unsigned int *)&rt_g.debug ) == 1) {
	bu_printb( "libdebug ", RT_G_DEBUG, RT_DEBUG_FMT );
	bu_log("\n");
    } else {
	com_usage(ctp);
    }
}


void
backout(char *buffer, int ctp)
{
    int		i;

    int		(*phc)();	/* Previous hit callback */
    int		(*pmc)();	/* Previous miss callback */
    int		(*poc)();	/* Previous overlap callback */
    int		if_bhit();	/* Backout hit callback */
    int		if_bmiss();	/* Backout miss callback */
    int		if_boverlap();	/* Backout overlap callback */
    /*
     *	Record previous callbacks
     */
    phc = ap.a_hit;
    pmc = ap.a_miss;
    poc = ap.a_overlap;

    /*
     *	Prepare to fire the backing-out ray
     */
    for (i = 0; i < 3; ++i) {
	ap.a_ray.r_pt[i] = target(i);
	ap.a_ray.r_dir[i] = -direct(i);
    }
    ap.a_hit = if_bhit;
    ap.a_miss = if_bmiss;
    ap.a_overlap = if_boverlap;
    if (nirt_debug & DEBUG_BACKOUT) {
	bu_log("Backing out from (%g %g %g) via (%g %g %g)\n",
	       ap.a_ray.r_pt[0] * base2local,
	       ap.a_ray.r_pt[1] * base2local,
	       ap.a_ray.r_pt[2] * base2local,
	       V3ARGS(ap.a_ray.r_dir));
    }

    (void) rt_shootray( &ap );

    /*
     *	Reset the callbacks the way we found them
     */
    ap.a_hit = phc;
    ap.a_miss = pmc;
    ap.a_overlap = poc;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@more ws and style consistency cleanup
@
text
@d178 1
a178 1
grid_coor(char *uffer, com_table *ctp)
@


14.17
log
@use c99 fabs() instead of abs macro, might need configure support
@
text
@d22 8
a30 3
#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.16 2007/11/21 20:49:09 erikgreenwald Exp $";
#endif
d42 1
d47 1
d67 1
d71 23
a93 2
	int new_value;
	int i=0;
a94 7
	while (isspace(*(buffer+i)))
		++i;
	if (*(buffer+i) == '\0')     /* display current rt_bot_minpieces */
	{
		bu_log( "rt_bot_minpieces = %d\n", rt_bot_minpieces );
		return;
	}
d96 51
a146 1
	new_value = atoi( buffer );
a147 4
	if( new_value < 0 ) {
		bu_log( "Error: rt_bot_minpieces cannot be less than 0\n" );
		return;
	}
d149 17
a165 75
	if( new_value != rt_bot_minpieces ) {
		rt_bot_minpieces = new_value;
		need_prep = 1;
	}
}

void az_el(buffer, ctp)
char			*buffer;
com_table		*ctp;
{
	extern int 	str_dbl();  /* function to convert  string to  double */
	int 		i = 0;      /* current position on the *buffer        */
	int		rc = 0;     /* the return code value from str_dbl()   */
	double		az;
	double  	el;

	while (isspace(*(buffer+i)))
		++i;
	if (*(buffer+i) == '\0')     /* display current az and el values */
	{
		bu_log("(az, el) = (%4.2f, %4.2f)\n",
		    azimuth(), elevation());
		return;
	}
	if ((rc = str_dbl(buffer+i, &az)) == 0)  /* get az value */
	{
		com_usage(ctp);
		return;
	}
	if (fabs(az) > 360)       /* check for valid az value */
	{
		bu_log("Error:  |azimuth| <= 360\n");
		return;
	}
	i += rc;
	while (isspace(*(buffer+i)))
		++i;
	if ((rc = str_dbl(buffer+i, &el)) == 0)  /* get el value */
	{
		com_usage(ctp);
		return;
	}
	if (fabs(el) > 90)       /* check for valid el value */
	{
		bu_log("Error:  |elevation| <= 90\n");
		return;
	}
	i += rc;
	if (*(buffer+i) != '\0')  /* check for garbage at the end of the line */
	{
		com_usage(ctp);
		return;
	}
	azimuth() = az;
	elevation() = el;
	ae2dir();
}

void sh_esc (buffer)
char	*buffer;
{
  static char	*shell = "";
  static char	*last_cmd = "";

  while (isspace(*buffer)) {
    ++buffer;
  }

  if (*buffer == '!') {
    (void) system(last_cmd);
  } else if (*buffer) {
    (void) system(buffer);
    last_cmd = buffer;
  } else {
    if ((*shell == '\0') && (shell = getenv("SHELL")) == 0) {
d167 1
a167 1
      shell = DFLT_SHELL;
d169 1
a169 1
      shell = "cmd.exe";
d171 2
a173 2
    (void) system(shell);
  }
d176 37
a212 53
void grid_coor(buffer, ctp)
char			*buffer;
com_table		*ctp;
{
	extern int 	str_dbl();  /* function to convert  string to  double */
	int 		i = 0;
	int		rc = 0;    /* the return code value from str_dbl() */
	vect_t	        Gr;

	while (isspace(*(buffer+i)))
		++i;
	if (*(buffer+i) == '\0')    /* display current grid coordinates */
	{
		bu_log("(h,v,d) = (%4.2f, %4.2f, %4.2f)\n",
			grid(HORZ) * base2local,
			grid(VERT) * base2local,
			grid(DIST) * base2local);
		return;
	}
	if ((rc = str_dbl(buffer+i, &Gr[HORZ])) == 0) /* get horz coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	while (isspace(*(buffer+i)))
		++i;
	if ((rc = str_dbl(buffer+i, &Gr[VERT])) == 0) /* get vert coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	while (isspace(*(buffer+i)))
		++i;
	if (*(buffer+i) == '\0')   /* if there is no dist coor, set default */
	{
		grid(HORZ) = Gr[HORZ] * local2base;
		grid(VERT) = Gr[VERT] * local2base;
		grid2targ();
		return;
	}
	if ((rc = str_dbl(buffer+i, &Gr[DIST])) == 0) /* set dist coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	if (*(buffer+i) != '\0') /* check for garbage at the end of the line */
	{
		com_usage(ctp);
		return;
	}
a214 1
	grid(DIST) = Gr[DIST] * local2base;
d216 17
d235 50
a284 50
void target_coor(buffer, ctp)
char			*buffer;
com_table		*ctp;
{
	extern int 	str_dbl();  /* function to convert string to double */
	int 		i = 0;
	int		rc = 0;     /* the return code value from str_dbl() */
	vect_t		Tar;	    /* Target x, y and z          	    */

	while (isspace(*(buffer+i)))
		++i;
	if (*(buffer+i) == '\0')         /* display current target coors */
	{
		bu_log("(x,y,z) = (%4.2f, %4.2f, %4.2f)\n",
			    target(X) * base2local,
			    target(Y) * base2local,
			    target(Z) * base2local);
		return;
	}
	if ((rc = str_dbl(buffer+i, &Tar[X])) == 0)  /* get target x coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	while (isspace(*(buffer+i)))
		++i;
	if ((rc = str_dbl(buffer+i, &Tar[Y])) == 0)  /* get target y coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	while (isspace(*(buffer+i)))
		++i;
	if ((rc = str_dbl(buffer+i, &Tar[Z])) == 0)    /* get target z coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	if (*(buffer+i) != '\0') /* check for garbage at the end of the line */
	{
		com_usage(ctp);
		return;
	}
	target(X) = Tar[X] * local2base;
	target(Y) = Tar[Y] * local2base;
	target(Z) = Tar[Z] * local2base;
	targ2grid();
d288 48
a335 49
void dir_vect(buffer, ctp)
char			*buffer;
com_table		*ctp;
{
	extern int 	str_dbl();  /* function to convert  string to  double */
	int 		i = 0;
	int		rc = 0;    /* the return code value from str_dbl() */
	vect_t		Dir;	   /* Direction vector x, y and z          */

	while (isspace(*(buffer+i)))
		++i;
	if (*(buffer+i) == '\0')         /* display current direct coors */
	{
		bu_log("(x,y,z) = (%4.2f, %4.2f, %4.2f)\n",
			    direct(X), direct(Y), direct(Z));
		return;
	}
	if ((rc = str_dbl(buffer+i, &Dir[X])) == 0)  /* get direct x coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	while (isspace(*(buffer+i)))
		++i;
	if ((rc = str_dbl(buffer+i, &Dir[Y])) == 0)  /* get direct y coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	while (isspace(*(buffer+i)))
		++i;
	if ((rc = str_dbl(buffer+i, &Dir[Z])) == 0)    /* get direct z coor */
	{
		com_usage(ctp);
		return;
	}
	i += rc;
	if (*(buffer+i) != '\0') /* check for garbage at the end of the line */
	{
		com_usage(ctp);
		return;
	}
	VUNITIZE( Dir );
	direct(X) = Dir[X];
	direct(Y) = Dir[Y];
	direct(Z) = Dir[Z];
	dir2ae();
d338 3
a340 1
void quit()
d342 3
a344 3
	if (silent_flag != SILENT_YES)
	    (void) fputs("Quitting...\n", stdout);
	bu_exit (0, NULL);
d347 3
a349 2
void show_menu(buffer)
char	*buffer;
d351 1
a351 1
	com_table	*ctp;
d353 2
a354 2
	for (ctp = ComTab; ctp -> com_name; ++ctp)
	    (void) bu_log("%*s %s\n", -14, ctp -> com_name, ctp -> com_desc);
d357 3
a359 3
void shoot(buffer, ctp)
char			*buffer;
int			ctp;
d371 1
a371 2
    if (do_backout)
    {
d378 1
a378 2
    for (i = 0; i < 3; ++i)
    {
a386 4
void use_air(buffer, ctp)

char			*buffer;
com_table		*ctp;
d388 2
d400 3
a402 3
	    ++buffer;
    if (*buffer == '\0')     /* display current value of use_of_air */
    {
d406 1
a406 2
    if (!isdigit(*buffer))
    {
d410 1
a410 2
    while (isdigit(*buffer))
    {
d414 1
a414 2
    if (new_use && (new_use != 1))
    {
d416 1
a416 1
	    new_use);
d419 1
a419 2
    if (rti_tab[new_use] == RTI_NULL)
    {
d421 1
a421 1
	    new_use ? "is not included" : "is included");
d423 2
a424 2
	    " To set useair=%d requires building/prepping another directory.\n",
	    new_use);
d429 1
a429 2
	if ((*rp != 'y') && (*rp != 'Y'))
	{
d434 1
a434 2
	if ((rtip = rt_dirbuild( db_name , db_title, TITLE_LEN )) == RTI_NULL)
	{
d442 1
a442 1

a450 4
void nirt_units (buffer, ctp)

char		*buffer;
com_table	*ctp;
d452 2
d462 3
a464 3
	    ++i;
    if (*(buffer+i) == '\0')     /* display current destination */
    {
d469 1
a469 2
    if (strcmp(buffer + i, "?") == 0)
    {
d472 1
a472 3
    }
    else if (strcmp(buffer + i, "default") == 0)
    {
d477 2
a478 5
    }
    else
    {
	if ((tmp_dbl = bu_units_conversion(buffer + i)) == 0.0)
	{
a488 4
void do_overlap_claims (buffer, ctp)

char		*buffer;
com_table	*ctp;
d490 2
d498 3
a500 3
	    ++i;
    if (*(buffer+i) == '\0')     /* display current destination */
    {
d505 1
a505 2
    if (strcmp(buffer + i, "?") == 0)
    {
d509 1
a509 2
    for (j = OVLP_RESOLVE; j <= OVLP_RETAIN; ++j)
    {
d512 1
a512 1

d515 1
a515 2
	  || (strcmp(buffer + i, numeral) == 0))
	{
d527 1
d529 1
a529 3
cm_attr(buffer, ctp)
char		*buffer;
com_table	*ctp;
d553 12
a564 15
cm_debug(buffer, ctp)
char		*buffer;
com_table	*ctp;
{
	register char	*cp = buffer;

	/* This is really icky -- should have argc, argv interface */
	while( *cp && isascii(*cp) && isspace(*cp) )  cp++;
	if (*cp == '\0')
	{
	    /* display current value */
	    bu_printb( "debug ", nirt_debug, DEBUG_FMT );
	    bu_log("\n");
	    return;
	}
d566 7
a572 8
	/* Set a new value */
	if (sscanf( cp, "%x", (unsigned int *)&nirt_debug ) == 1)
	{
	    bu_printb( "debug ", nirt_debug, DEBUG_FMT );
	    bu_log("\n");
	}
	else
	    com_usage(ctp);
d575 1
d577 1
a577 3
cm_libdebug(buffer, ctp)
char		*buffer;
com_table	*ctp;
d579 6
a584 1
	register char	*cp = buffer;
d586 6
a591 9
	/* This is really icky -- should have argc, argv interface */
	while( *cp && isascii(*cp) && isspace(*cp) )  cp++;
	if (*cp == '\0')
	{
	    /* display current value */
	    bu_printb( "libdebug ", RT_G_DEBUG, RT_DEBUG_FMT );
	    bu_log("\n");
	    return;
	}
d593 7
a599 8
	/* Set a new value */
	if (sscanf( cp, "%x", (unsigned int *)&rt_g.debug ) == 1)
	{
	    bu_printb( "libdebug ", RT_G_DEBUG, RT_DEBUG_FMT );
	    bu_log("\n");
	}
	else
	    com_usage(ctp);
d602 3
a604 3
void backout(buffer, ctp)
char			*buffer;
int			ctp;
d624 1
a624 2
    for (i = 0; i < 3; ++i)
    {
d631 1
a631 1
    if (nirt_debug & DEBUG_BACKOUT)
d637 1
@


14.16
log
@pass bu_exit a NULL instead of an empty string
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.15 2007/11/21 19:49:12 erikgreenwald Exp $";
d110 1
a110 1
	if (abs(az) > 360)       /* check for valid az value */
d123 1
a123 1
	if (abs(el) > 90)       /* check for valid el value */
@


14.15
log
@exit->bu_exit where applicable
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.14 2007/11/08 04:15:47 brlcad Exp $";
d333 1
a333 1
	bu_exit (0, "");
d435 1
a435 1
	    bu_exit(1, "");
@


14.14
log
@minor tweaks, preventive null terminating of strncmp'd strings
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.13 2007/09/15 16:23:18 brlcad Exp $";
d333 1
a333 1
	exit (0);
d435 1
a435 1
	    exit(1);
@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.12 2007/02/20 08:19:50 brlcad Exp $";
d41 1
a41 1
char		local_u_name[64];
d479 1
d489 1
@


14.12
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.11 2007/01/27 01:41:44 brlcad Exp $";
a28 1
/*	INCLUDES	*/
d32 1
a32 5
#if HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.10 2007/01/23 01:13:44 brlcad Exp $";
d427 1
a427 1
	fgets(response, sizeof(response), stdin);
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d24 1
a24 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.9 2007/01/20 14:36:58 brlcad Exp $";
d304 1
a304 1
        }
d331 1
a331 1
        dir2ae();
a363 1

@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d24 1
a24 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.8 2006/01/23 07:07:15 brlcad Exp $";
@


14.8
log
@stdlib.h
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d25 1
a25 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.7 2006/01/18 06:46:23 brlcad Exp $";
@


14.7
log
@update copyright to 2006
@
text
@a23 2

/*      COMMAND.C       */
d25 1
a25 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.6 2005/10/23 04:44:37 brlcad Exp $";
a27 1
/*	INCLUDES	*/
d30 2
a31 2


d35 1
a35 1
# include <string.h>
d37 1
a37 1
# include <strings.h>
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.5 2005/06/24 19:03:52 bob1961 Exp $";
@


14.5
log
@Declared in raytrace.h
@
text
@d25 1
a25 1
/*      COMMAND.C       */ 
d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.4 2005/05/28 02:14:52 brlcad Exp $";
d121 1
a121 1
		bu_log("Error:  |azimuth| <= 360\n"); 
d124 1
a124 1
	i += rc; 
d134 1
a134 1
		bu_log("Error:  |elevation| <= 90\n"); 
d137 1
a137 1
	i += rc; 
d143 1
a143 1
	azimuth() = az;     
d199 1
a199 1
	i += rc; 
d207 1
a207 1
	i += rc; 
d222 1
a222 1
	i += rc; 
d258 1
a258 1
	i += rc; 
d266 1
a266 1
	i += rc; 
d274 1
a274 1
	i += rc; 
d284 1
a284 1
}	
d309 1
a309 1
	i += rc; 
d317 1
a317 1
	i += rc; 
d325 1
a325 1
	i += rc; 
d478 1
a478 1
    
d520 1
a520 1
    
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d25 1
a25 1
/*      COMMAND.C       */
d27 1
a27 1
static const char RCSid[] = "$Header$";
d121 1
a121 1
		bu_log("Error:  |azimuth| <= 360\n");
d124 1
a124 1
	i += rc;
d134 1
a134 1
		bu_log("Error:  |elevation| <= 90\n");
d137 1
a137 1
	i += rc;
d143 1
a143 1
	azimuth() = az;
d199 1
a199 1
	i += rc;
d207 1
a207 1
	i += rc;
d222 1
a222 1
	i += rc;
d258 1
a258 1
	i += rc;
d266 1
a266 1
	i += rc;
d274 1
a274 1
	i += rc;
d284 1
a284 1
}
d309 1
a309 1
	i += rc;
d317 1
a317 1
	i += rc;
d325 1
a325 1
	i += rc;
d478 1
a478 1

d520 1
a520 1

@


14.4
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.3 2005/01/30 20:31:08 brlcad Exp $";
a64 1
extern int			rt_bot_minpieces;	/* grom g_bot.c */
@


14.3
log
@update copyright to 2005
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/command.c,v 14.2 2004/12/21 02:40:25 morrison Exp $";
d166 1
a166 1
#ifndef WIN32
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d27 1
a27 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/command.c,v 14.1 2004/11/16 19:42:17 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 24
d27 1
a27 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/command.c,v 1.5 2004/09/16 04:56:41 morrison Exp $";
@


1.5
log
@quell warnings
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/command.c,v 1.4 2004/09/03 23:30:59 morrison Exp $";
d649 10
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/command.c,v 1.3 2004/08/02 23:01:51 morrison Exp $";
d43 2
a44 2
void		printusage();
void		do_rt_gettrees();
d341 1
a341 1
	do_rt_gettrees(rtip, NULL, NULL);
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/command.c,v 1.2 2004/06/08 22:04:30 morrison Exp $";
d13 1
a13 1
#if USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header$";
d7 1
a7 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/nirt/command.c,v 11.21 2004/05/10 15:30:49 erikg Exp $";
a23 1
#include "externs.h"
@

