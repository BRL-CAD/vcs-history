head	14.13;
access;
symbols
	rel-7-10-4:14.8
	STABLE:14.8.0.2
	stable-branch:14.3
	rel-7-10-2:14.8
	rel-7-10-0:14.8
	rel-7-8-4:14.5
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.13
date	2007.12.17.23.14.47;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.12.17.23.06.59;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.11.21.20.38.23;	author erikgreenwald;	state Exp;
branches;
next	14.10;

14.10
date	2007.11.21.19.49.12;	author erikgreenwald;	state Exp;
branches;
next	14.9;

14.9
date	2007.09.15.16.23.18;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.08;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.02.40.25;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.34;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@ws and style consistency cleanup
@
text
@/*                      I N T E R A C T . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file interact.c
 *
 * handle user interaction with nirt.
 *
 * Author:
 *   Natalie L. Barker
 *
 * Date:
 *   Jan 90
 *
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "bu.h"

#include "./nirt.h"
#include "./usrfmt.h"

extern int		nirt_debug;
extern com_table	ComTab[];
extern int		silent_flag;


static int
sgetc (char *string)
{
    static char	*prev_string = 0;
    static char	*sp;
    static int	reported_EOS = 0;

    if (nirt_debug & DEBUG_INTERACT)
	bu_log("sgetc(%s) '%s' '%s'... ", string, prev_string, sp);

    if ((string == 0) || (string != prev_string)) {
	sp = prev_string = string;
	reported_EOS = 0;
	if (nirt_debug & DEBUG_INTERACT)
	    bu_log("initializing\n");
	if (string == 0)
	    return (EOF);
    }
    if (*sp == '\0') {
	if (reported_EOS) {
	    if (nirt_debug & DEBUG_INTERACT)
		bu_log("returning EOF\n");
	    return (EOF);
	} else {
	    reported_EOS = 1;
	    if (nirt_debug & DEBUG_INTERACT)
		bu_log("returning EOS\n");
	    return ('\0');
	}
    } else {
	if (nirt_debug & DEBUG_INTERACT)
	    bu_log("returning '%c' (o%o)\n", *sp, *sp);
	return ((int) *sp++);
    }
}


/**
 * I N T E R A C T
 *
 * Handle user interaction.  Interact() prompts on stdin for a key
 * word, looks the key word up in the command table and, if it finds
 * the key word, the command is executed.
 */
void
interact(int input_source, void *sPtr)
{
    int		Ch;		/* individual characters of the input line */
    int		Prev_ch=0;	/* previous character */
    char    	line_buffer[256];	/* line of text the user types   */
    int		i;		/* position on the line_buffer[]           */
    com_table	*ctp;		/* command table pointer		   */
    int		key_len;	/* the length of the key word             */
    int		in_cmt;		/* are we now within a comment? */
    int		more_on_line = 0;/* are we withing a multi-command line? */

#define	next_char(s)	(input_source == READING_FILE)		?	\
			    fgetc((FILE *) s)			:       \
			(input_source == READING_STRING)	?	\
			    sgetc((char *) s)			:	\
			(bu_log("next_char(%d) error.  Shouldn't happen\n", \
			    input_source), EOF)

    if (nirt_debug & DEBUG_INTERACT) {
	bu_log("interact(%s, %x)...\n",
	    (input_source == READING_FILE) ? "READING_FILE" :
	    (input_source == READING_STRING) ? "READING_STRING" : "???",
	    sPtr);
    }

    /* Prime the pump when reading from a string */
    if (input_source == READING_STRING)
	sgetc((char *)0);

    for (;;) {
	in_cmt = 0;
	key_len = 0;
	if ((input_source == READING_FILE) && (sPtr == stdin)
	    && (silent_flag != SILENT_YES) && (! more_on_line))
	    (void) fputs(NIRT_PROMPT, stdout);

	more_on_line = 0;
	while (((Ch = next_char(sPtr)) == ' ') || (Ch == '\t')) {
	    if (nirt_debug & DEBUG_INTERACT)
		bu_log("Skipping '%c'\n", Ch);
	}
	if (Ch == '\n')
	    continue;

	for (i = 0; (Ch != '\n') && (i < 255); ++i) {
	    if (Ch == CMT_CHAR) {
		if( Prev_ch == '\\' ) {
		    i--;
		} else {
		    in_cmt = 1;
		    while (((Ch = next_char(sPtr)) != EOF) && (Ch != '\n'))
			;
		}
	    }
	    if (Ch == SEP_CHAR) {
		more_on_line = 1;
		break;
	    } else if (Ch == '\n') {
		break;
	    }

	    if ((input_source == READING_STRING) && (Ch == '\0'))
		break;

	    if (Ch == EOF) {
		if ((input_source == READING_FILE) && (sPtr == stdin))
		    bu_exit(1, "Unexpected EOF in input!!\n");
		else
		    return;
	    }

	    if (key_len == 0 && (Ch == ' ' || Ch == '\t'))
		key_len = i;      /* length of key word */
	    line_buffer[i] = Ch;
	    Prev_ch = Ch;

	    if (nirt_debug & DEBUG_INTERACT)
		bu_log("line_buffer[%d] = '%c' (o%o)\n", i, Ch, Ch);

	    Ch = next_char(sPtr);
	}

	if (key_len == 0) {
	    /* length of key word */
	    if (in_cmt)
		continue;
	    key_len = i;
	}
	line_buffer[i] = '\0';

	if (nirt_debug & DEBUG_INTERACT)
	    bu_log("Line buffer contains '%s'\n", line_buffer);

	ctp = get_comtab_ent(line_buffer, key_len);
	if (ctp == CT_NULL) {
	    line_buffer[key_len] = '\0';
	    fprintf(stderr,
		    "Invalid command name '%s'.  Enter '?' for help\n",
		    line_buffer);
	} else {
	    (*(ctp -> com_func)) (&line_buffer[key_len], ctp);
	}
    }
}


com_table *
get_comtab_ent (char *pattern, int pat_len)
{
    com_table	*ctp;
    int		len;

    for (ctp = ComTab; ctp -> com_name; ++ctp) {
	len = fmax(pat_len, (int)strlen(ctp -> com_name));
	if ((strncmp (pattern, ctp -> com_name, len)) == 0)
	    break;
    }
    return ((ctp -> com_name) ? ctp : CT_NULL);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@use c99 fmax instead of max macro, might need configure support
@
text
@d22 8
d41 2
a49 1
extern void		bu_log(char *, ...);
d51 2
a52 1
static int sgetc (char *string)
d61 1
a61 2
    if ((string == 0) || (string != prev_string))
    {
d69 2
a70 3
    if (*sp == '\0')
	if (reported_EOS)
	{
d74 1
a74 3
	}
	else
	{
d80 1
a80 1
    else
d84 1
d87 3
a89 5
/*	               I N T E R A C T ( )
 *
 *	Handle user interaction.  Interact() prompts on stdin
 *	for a key word, looks the key word up in the command table
 *	and, if it finds the key word, the command is executed.
d91 3
d95 2
a96 1
void interact(int input_source, void *sPtr)
d114 1
a114 1
    if (nirt_debug & DEBUG_INTERACT)
d119 1
d121 1
a121 3
    /*
     *	Prime the pump when reading from a string
     */
d125 1
a125 2
    for (;;)
    {
d129 1
a129 1
	 && (silent_flag != SILENT_YES) && (! more_on_line))
d133 1
a133 1
	while (((Ch = next_char(sPtr)) == ' ') || (Ch == '\t'))
d136 1
d139 4
a142 5
	for (i = 0; (Ch != '\n') && (i < 255); ++i)
	{
	    if (Ch == CMT_CHAR)
	    {
		if( Prev_ch == '\\' )
d144 1
a144 2
		else
		{
d150 1
a150 2
	    if (Ch == SEP_CHAR)
	    {
d153 2
d156 1
a156 2
	    else if (Ch == '\n')
		break;
d159 2
a160 2
	    if (Ch == EOF)
	    {
d166 1
d171 1
d174 1
d177 3
a179 2
	if (key_len == 0)      /* length of key word */
	{
d189 2
a190 2
	if ((ctp = get_comtab_ent(line_buffer, key_len)) == CT_NULL)
	{
d193 4
a196 2
		"Invalid command name '%s'.  Enter '?' for help\n",
		line_buffer);
a197 2
	else
	    (*(ctp -> com_func)) (&line_buffer[key_len], ctp);
d201 3
a203 1
com_table *get_comtab_ent (char *pattern, int pat_len)
d208 1
a208 2
    for (ctp = ComTab; ctp -> com_name; ++ctp)
    {
@


14.11
log
@collapse bu_log();bu_exit(#,""); as much as possible
@
text
@d198 1
a198 1
	len = max(pat_len, (int)strlen(ctp -> com_name));
@


14.10
log
@exit->bu_exit where applicable
@
text
@d156 1
a156 4
		{
		    bu_log( "Unexpected EOF in input!!\n");
		    bu_exit(1, "");
		}
@


14.9
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d158 1
a158 1
		    exit(1);
@


14.8
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a23 6
/*      INTERACT.C      */
#ifndef lint
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/interact.c,v 14.7 2007/01/23 01:13:44 brlcad Exp $";
#endif

/*	INCLUDES	*/
a25 1

a26 1

d29 1
a29 5
#if HAVE_STRING_H
# include <string.h>
#else
# include <strings.h>
#endif
@


14.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/interact.c,v 14.6 2007/01/20 14:36:58 brlcad Exp $";
a32 1

@


14.6
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d26 1
a26 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/interact.c,v 14.5 2006/01/18 06:46:23 brlcad Exp $";
@


14.5
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/interact.c,v 14.4 2005/10/23 04:44:37 brlcad Exp $";
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/interact.c,v 14.3 2005/01/30 20:31:08 brlcad Exp $";
@


14.3
log
@update copyright to 2005
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header: /cvsroot/brlcad/brlcad/src/nirt/interact.c,v 14.2 2004/12/21 02:40:25 morrison Exp $";
d30 1
a30 1
/*	INCLUDES	*/ 
d137 1
a137 1
	    (void) fputs(NIRT_PROMPT, stdout);     
d185 1
a185 1
	if (key_len == 0)      /* length of key word */ 
d199 1
a199 1
	    fprintf(stderr, 
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 1
static const char RCSid[] = "$Header$";
d30 1
a30 1
/*	INCLUDES	*/
d137 1
a137 1
	    (void) fputs(NIRT_PROMPT, stdout);
d185 1
a185 1
	if (key_len == 0)      /* length of key word */
d199 1
a199 1
	    fprintf(stderr,
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d27 1
a27 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/interact.c,v 14.1 2004/11/16 19:42:17 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 24
d27 1
a27 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/interact.c,v 1.3 2004/09/03 23:30:59 morrison Exp $";
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/interact.c,v 1.2 2004/08/02 23:01:51 morrison Exp $";
d197 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/src/nirt/interact.c,v 1.1 2004/05/20 15:20:34 morrison Exp $";
d15 1
a15 1
#if USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d3 1
a3 1
static const char RCSid[] = "$Header: /cvs/brlcad/nirt/interact.c,v 11.13 2004/05/10 15:30:49 erikg Exp $";
d7 1
a7 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

