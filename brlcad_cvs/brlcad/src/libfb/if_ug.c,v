head	14.19;
access;
symbols
	rel-7-10-4:14.18
	STABLE:14.18.0.2
	stable-branch:14.8
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.19
date	2007.12.16.15.59.38;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.08.18.03.15.11;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.07.26.01.13.56;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.27.01.41.37;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.35;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.52;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.08.08.06.47.06;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.30.12;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.04.13.01.43.20;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.01.30.20.30.53;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.32.30;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.22;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.58.27;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.14;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.21;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.44;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@convert all bzero calls to memset
@
text
@/*                         I F _ U G . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup if */
/** @@{ */
/** @@file if_ug.c
 *
 *  Ultra Network Technologies "Ultra Graphics" Display Device.
 *  			PRELIMINARY!
 *
 *  BRL NOTE: This is only the scant beginnings of an Ultra interface.
 *   We have no way of testing this, and given the changes in LIBFB this
 *   code may not even compile any longer.  If you make improvements to
 *   this please let us know.
 *
 *  Authors -
 *	Michael John Muuss
 *	Phillip Dykstra
 *
 */
/** @@} */

#ifndef lint
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.18 2007/08/18 03:15:11 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <errno.h>
#include <ultra/ugraf.h>

#include "machine.h"
#include "fb.h"


#define	FBSAVE	"/usr/tmp/ultrafb"

static struct UG_PARAM	ug_param;
static struct UG_TBLK	ug_tblk;
static char	*ugbuf, *ugbuf2, *ugcurs;
static int	x_zoom, y_zoom;
static int	x_window, y_window;	/* upper left of window (4th quad) */

HIDDEN int	ug_open(),
		ug_close(),
		ug_clear(),
		ug_read(),
		ug_write(),
		ug_rmap(),
		ug_wmap(),
		ug_view(),
		ug_setcursor(),
		ug_cursor(),
		ug_help();

/* This is the ONLY thing that we normally "export" */
FBIO ug_interface =  {
	0,
	ug_open,		/* device_open		*/
	ug_close,		/* device_close		*/
	ug_clear,		/* device_clear		*/
	ug_read,		/* buffer_read		*/
	ug_write,		/* buffer_write		*/
	ug_rmap,		/* colormap_read	*/
	ug_wmap,		/* colormap_write	*/
	ug_view,		/* set view		*/
	fb_sim_getview,		/* get view		*/
	ug_setcursor,		/* curs_set		*/
	ug_cursor,		/* cursor_move_memory_addr */
	fb_sim_getcursor,
	fb_sim_readrect,
	fb_sim_writerect,
	fb_sim_bwreadrect,
	fb_sim_bwwriterect,
	fb_null,			/* poll			*/
	fb_null,			/* flush		*/
	ug_close,			/* free			*/
	fb_null,			/* XXX add help here	*/
	"Ultra Graphics",		/* device description	*/
	1280,				/* max width		*/
	1024,				/* max height		*/
	"/dev/ug",			/* short device name	*/
	512,				/* default/current width  */
	512,				/* default/current height */
	-1,				/* select fd		*/
	-1,				/* file descriptor	*/
	1, 1,				/* zoom			*/
	256, 256,			/* window center	*/
	0, 0, 0,			/* cursor		*/
	PIXEL_NULL,			/* page_base		*/
	PIXEL_NULL,			/* page_curp		*/
	PIXEL_NULL,			/* page_endp		*/
	-1,				/* page_no		*/
	0,				/* page_dirty		*/
	0L,				/* page_curpos		*/
	0L,				/* page_pixels		*/
	0				/* debug		*/
};

ugprint( pp )
register struct UG_PARAM *pp;
{
	register struct UG_TBLK *tp;

	fprintf(stderr, "intern = %d\n", pp->intern);
	fprintf(stderr, "buffer = x%x\n", pp->buffer);
	fprintf(stderr, "dev_id = %s\n", pp->dev_id);
	fprintf(stderr, "dx = %d\n", pp->dx);
	fprintf(stderr, "dy = %d\n", pp->dy);
	fprintf(stderr, "term_type = %d\n", pp->term_type);
	fprintf(stderr, "blank = %d\n", pp->blank);
	fprintf(stderr, "buf_ctl = %d\n", pp->buf_ctl);
	fprintf(stderr, "link = x%x\n\n", pp->link);

	for( tp = pp->link; tp; tp = tp->link )  {
		fprintf(stderr, "addr = x%x\n", tp->addr);
		fprintf(stderr, "tx = %d\n", tp->tx);
		fprintf(stderr, "ty = %d\n", tp->ty);
		fprintf(stderr, "npixel = %d\n", tp->npixel);
		fprintf(stderr, "nline = %d\n", tp->nline);
		fprintf(stderr, "stride = %d\n", tp->stride);
		fprintf(stderr, "link = x%x\n\n", tp->link);
	}
}

HIDDEN int
ug_open( ifp, file, width, height )
FBIO	*ifp;
char	*file;
int	width, height;
{
	register int	i;
	int	status;
	FILE	*fp;

	FB_CK_FBIO(ifp);

	ug_param.dx = ug_param.dy = 0;
	ug_param.buffer = 0;			/* No copy buffer */
	ug_param.dev_id = (char *)0;
	ug_param.term_type = UG_C7400;
	ug_param.blank = 0;
	ug_param.buf_ctl = NULL;
	ug_param.link = NULL;

	if( width <= 0 )
		width = ifp->if_width;
	if( height <= 0 )
		height = ifp->if_height;
	if ( width > ifp->if_max_width)
		width = ifp->if_max_width;

	ifp->if_width = width;
	ifp->if_height = height;

	x_zoom = y_zoom = 1;
	x_window = 0;
	y_window = 0;

	if( (ugbuf = malloc( width*height*4 )) == NULL )  {
		fprintf(stderr,"ug_open: malloc failure\n");
		return(-1);
	}
	if( (ugbuf2 = malloc( width*height*4 )) == NULL )  {
		fprintf(stderr,"ug_open: malloc 2 failure\n");
		return(-1);
	}
	if ( ( ugcurs = malloc( 16 * 16 * 4)) == NULL ) {
		fprintf(stderr, "ug_open: malloc failure\n");
		return(-1);
	}

	/* Do this after the malloc call -- UNICOS swapping bug */
	if ( ( status = ugraf ( UG_OPEN | UG_NORESET, &ug_param ) ) != UGE_OK ) {
		perror ( "ugraf open" );
		fprintf(stderr, "ugraf open failed with %d\n", status );
		return(-1);
	}

	if( (fp = fopen(FBSAVE, "r")) != NULL ) {
		fread( ugbuf, 4, height*width, fp );
		fclose( fp );
		unlink(FBSAVE);
	}

	return(1);			/* OK */
}

HIDDEN int
ug_close( ifp )
FBIO	*ifp;
{
	int	status;
	FILE	*fp;

	/* save image to file */
	if( (fp = fopen(FBSAVE, "w")) != NULL ) {
		fwrite( ugbuf, 4, ifp->if_height*ifp->if_width, fp );
		fclose( fp );
	} else {
		fprintf( stderr, "can't save framebuffer, errno = %d\n", errno );
	}

	/* Send whole buffer out one last time */
	ug_tblk.tx = 0;
	ug_tblk.ty = 0;
	ug_tblk.npixel = ifp->if_width;
	ug_tblk.nline = ifp->if_height;
	ug_tblk.addr = (int *)ugbuf;
	write_ug ("dclose");

	/* Now, close down */
	if ( ( status = ugraf ( UG_CLOSE, &ug_param ) ) != UGE_OK ) {
		perror ( "ugraf close" );
		fprintf(stderr, "ugraf close failed with %d\n", status );
		exit ( 1 );
	}
	return;
}

HIDDEN int
ug_clear( ifp, pp )
FBIO	*ifp;
RGBpixel	*pp;
{
	if( pp == RGBPIXEL_NULL )  {
		memset(ugbuf, 0, ifp->if_width * ifp->if_height * 4);
	} else {
		register char *cp;
		register int todo;

		cp = &ugbuf[0];
		for( todo = ifp->if_width * ifp->if_height; todo > 0; todo-- )  {
			cp++;
			*cp++ = (*pp)[BLU];
			*cp++ = (*pp)[GRN];
			*cp++ = (*pp)[RED];
		}
	}

	ug_tblk.tx = 0;
	ug_tblk.ty = 0;
	ug_tblk.npixel = ifp->if_width;
	ug_tblk.nline = ifp->if_height;
	ug_tblk.addr = (int *)ugbuf;

	/* Do it twice to fill both buffers */
	write_ug ("dclear1");
	write_ug ("dclear2");

	return(0);
}

HIDDEN int
ug_read( ifp, x, y, pixelp, count )
FBIO	*ifp;
int	x, y;
RGBpixel	*pixelp;
int	count;
{
}

HIDDEN write_ug (str)
char *str;
{
	int	status;

	ug_tblk.link = NULL;
	ug_tblk.stride = 0;

/**	ug_param.buf_ctl = UG_SW | UG_SW_H;	/* Flip after dump */
	ug_param.buf_ctl = UG_SW;	/* Flip after dump */
	ug_param.link = &ug_tblk;

	if ( ( status = ugraf ( UG_WRITE, &ug_param ) ) != UGE_OK ) {
		perror ( "ugraf write" );
		fprintf(stderr, "ugraf write error %d at %s\n", status, str );
		ugprint( &ug_param );
		return(-1);
	}

#ifndef never
	if ( ( status = ugraf ( UG_WAIT, &ug_param ) ) != UGE_OK ) {
		fprintf(stderr,"ugraf wait failed with %d at %s\n", status, str );
		perror ( "ugraf wait" );
		exit ( 1 );
	}
#endif
}

HIDDEN int
ug_write( ifp, x, y, pixelp, count )
FBIO	*ifp;
register int	x, y;
register char	*pixelp;
int	count;
{
	register char	*cp;
	register int	todo;
	int	start_y;

	y = ifp->if_height-1 - y;
	start_y = y;
	cp = &ugbuf[ ((y * ifp->if_width) + x)*4 ];
	for( todo = count; todo > 0; todo--, pixelp+=3 )  {
		if( ++x > ifp->if_width )  {
			y--;	/* 1st quadrant now */
			x = 0;
			cp = &ugbuf[ ((y * ifp->if_width) + x)*4 ];
		}
		cp++;
		*cp++ = (pixelp)[BLU];
		*cp++ = (pixelp)[GRN];
		*cp++ = (pixelp)[RED];
	}

	/* check for special zoom/window display */
	if( x_zoom != 1 || y_zoom != 1 || x_window != 0 || y_window != 0 ) {
		zandw( ifp );
		return( count );
	}

	ug_tblk.tx = 0;
	ug_tblk.ty = y;
	ug_tblk.npixel = ifp->if_width;
	ug_tblk.nline = start_y - y +1;
	ug_tblk.addr = (int *)(ugbuf + y*4*ifp->if_width);

	write_ug ( );
	write_ug ( );		/* Simulate a single buffered device */

	return(count);
}

HIDDEN int
ug_rmap( ifp, cmp )
FBIO	*ifp;
ColorMap	*cmp;
{
}

HIDDEN int
ug_wmap( ifp, cmp )
FBIO	*ifp;
ColorMap	*cmp;
{
}

HIDDEN int
ug_view( ifp, xcenter, ycenter, xzoom, yzoom )
FBIO	*ifp;
int	xcenter, ycenter;
int	xzoom, yzoom;
{
	int	ugx, ugy;

	/*
	 *  To start with, we are given the 1st quadrant coordinates
	 *  of the CENTER of the region we wish to view.  Since the
	 *  Ultra device is fourth quadrant,
	 *  first find the upper left corner of the rectangle
	 *  to window in on, accounting for the zoom factor too.
	 *  Then convert from first to fourth for the Ultra.
	 *  The order of these conversions is significant.
	 */
	ugx = xcenter - (ifp->if_width / x_zoom)/2;
	ugy = ycenter + (ifp->if_height / y_zoom)/2 - 1;
	ugy = ifp->if_height-1-ugy;		/* q1 -> q4 */

	/* save q4 upper left */
	x_window = ugx;
	y_window = ugy;

	/* Window needs to be set as well XXX */
	if( xzoom < 1 )  xzoom=1;
	if( yzoom < 1 )  yzoom=1;
	if( xzoom > 256 )  xzoom=256;
	if( yzoom > 256 )  yzoom=256;

	x_zoom = xzoom;
	y_zoom = yzoom;

	fb_sim_view(ifp, xcenter, ycenter, xzoom, yzoom);

	zandw( ifp );
}

HIDDEN int
ug_setcursor( ifp, bits, xbits, ybits, xorig, yorig )
FBIO	*ifp;
unsigned char *bits;
int	xbits, ybits;
int	xorig, yorig;
{
}

HIDDEN int
ug_cursor( ifp, mode, x, y )
FBIO	*ifp;
int	mode;
int	x, y;
{
	int	i;
	char	*cp;

	/* display a fresh image in both buffers */
	ug_tblk.tx = 0;
	ug_tblk.ty = 0;
	ug_tblk.npixel = ifp->if_width;
	ug_tblk.nline = ifp->if_height;
	ug_tblk.addr = (int *)ugbuf;

	write_ug("cursor");
	write_ug("cursor");

	/* build a cursor */
	cp = &ugcurs[0];

	for(i = 0; i <= 16 * 16; i++) {
		cp++;
		*cp++ = 255;
		*cp++ = 255;
		*cp++ = 255;
	}

	y = ifp->if_height-1-y;		/* q1 -> q4 */
	y = y - y_window;
	x = x - x_window;
	x *= x_zoom;
	y *= y_zoom;

	ug_tblk.tx = x;
	ug_tblk.tx &= ~03;
	ug_tblk.ty = y;
	ug_tblk.npixel = 16;
	ug_tblk.nline = 16;
	ug_tblk.addr = (int *)ugcurs;

	write_ug();
}

/* zoom and window */
zandw( ifp )
FBIO *ifp;
{
	int	x, y;
	int	xz, yz;
	int	numx, numy;
	char	*ip, *op;

/*	return;*/

	/* bound the window parameters - XXX */
	if( x_window < 0 ) x_window = 0;
	if( y_window < 0 ) y_window = 0;

	memset(ugbuf2, 0, ifp->if_width*ifp->if_height*4);	/*XXX*/

	numx = (ifp->if_width-x_window) / x_zoom;
	numy = (ifp->if_height-y_window) / y_zoom;

fprintf( stderr, "numx,y= %d, %d; zoomx,y= %d, %d; windowx,y= %d, %d\n", numx, numy, x_zoom, y_zoom, x_window, y_window );

	for( y = 0; y < numy; y++ ) {
		for( yz = 0; yz < y_zoom; yz++ ) {
			for( x = 0; x < numx; x++ ) {
				ip = &ugbuf[ ((y+y_window)*ifp->if_width+(x+x_window))*4 ];
				for( xz = 0; xz < x_zoom; xz++ ) {
					op = &ugbuf2[ ((y*y_zoom+yz)*ifp->if_width
					      + (x*x_zoom+xz))*4 ];
					*op++ = *ip;
					*op++ = ip[1];
					*op++ = ip[2];
					*op++ = ip[3];
				}
			}
		}
	}

	ug_tblk.tx = 0;
	ug_tblk.ty = 0;
	ug_tblk.npixel = ifp->if_width;
	ug_tblk.nline = ifp->if_height;
	ug_tblk.addr = (int *)(ugbuf2);

	write_ug();
}

HIDDEN int
ug_help( ifp )
FBIO	*ifp;
{
	fb_log( "Description: %s\n", ug_interface.if_type );
	fb_log( "Device: %s\n", ifp->if_name );
	fb_log( "Max width/height: %d %d\n",
		ug_interface.if_max_width,
		ug_interface.if_max_height );
	fb_log( "Default width/height: %d %d\n",
		ug_interface.if_width,
		ug_interface.if_height );
	return(0);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@remove the fblocal.h header file.  it was only used in three places (two files) and only contained one macro (wrapper to fb_log an error), so keep it simple until it's really needed.
@
text
@d40 1
a40 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.17 2007/07/26 01:13:56 brlcad Exp $ (BRL)";
d244 1
a244 1
		bzero( ugbuf, ifp->if_width * ifp->if_height * 4 );
d474 1
a474 1
	bzero( ugbuf2, ifp->if_width*ifp->if_height*4 );	/*XXX*/
@


14.17
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d40 1
a40 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.16 2007/01/27 01:41:37 brlcad Exp $ (BRL)";
a44 1

d47 1
d51 1
a51 2
#include "./fblocal.h"
#include <ultra/ugraf.h>
@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a35 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d40 1
a40 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.15 2007/01/23 01:13:35 brlcad Exp $ (BRL)";
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d44 1
a44 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.14 2007/01/21 04:45:43 brlcad Exp $ (BRL)";
a49 1

d156 1
a156 1
 	FILE	*fp;
d175 1
a175 1
 	ifp->if_width = width;
@


14.14
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d44 1
a44 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.13 2007/01/20 14:36:52 brlcad Exp $ (BRL)";
@


14.13
log
@update copyright to 2007
@
text
@d21 2
a22 3

/** \addtogroup if */
/*@@{*/
d24 1
d42 1
a42 1
/*@@}*/
d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.12 2006/08/08 06:47:06 brlcad Exp $ (BRL)";
@


14.12
log
@get rid of the libfb-specific _LOCAL_ macro, instead using HIDDEN like everyone else (currently still provided by machine.h)
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.11 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
@


14.11
log
@update copyright to 2006
@
text
@d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.10 2005/10/23 04:44:34 brlcad Exp $ (BRL)";
d68 1
a68 1
_LOCAL_ int	ug_open(),
d150 1
a150 1
_LOCAL_ int
d213 1
a213 1
_LOCAL_ int
d245 1
a245 1
_LOCAL_ int
d278 1
a278 1
_LOCAL_ int
d287 1
a287 1
static write_ug (str)
d315 1
a315 1
_LOCAL_ int
d359 1
a359 1
_LOCAL_ int
d366 1
a366 1
_LOCAL_ int
d373 1
a373 1
_LOCAL_ int
d412 1
a412 1
_LOCAL_ int
d421 1
a421 1
_LOCAL_ int
d513 1
a513 1
_LOCAL_ int
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.9 2005/08/12 22:30:12 lbutler Exp $ (BRL)";
@


14.9
log
@Doxygen changes
@
text
@d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.8 2005/04/13 01:43:20 brlcad Exp $ (BRL)";
d174 1
a174 1
	if ( width > ifp->if_max_width) 
d209 1
a209 1
	
d325 1
a325 1
	
d441 2
a442 2
	cp = &ugcurs[0];	
	
d461 1
a461 1
	ug_tblk.addr = (int *)ugcurs;	
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d45 1
a45 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d174 1
a174 1
	if ( width > ifp->if_max_width)
d209 1
a209 1

d325 1
a325 1

d441 2
a442 2
	cp = &ugcurs[0];

d461 1
a461 1
	ug_tblk.addr = (int *)ugcurs;
@


14.8
log
@remove specific references to ARL addresses.  instead use brlcad.org mail aliases and the new sf.net mailing lists.
@
text
@d21 3
a24 1
 *
d42 2
d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.7 2005/01/30 20:30:53 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2005
@
text
@d29 1
a29 1
 *   this please let us know. <phil@@brl.mil>
d41 1
a41 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ug.c,v 14.6 2004/12/21 07:32:30 morrison Exp $ (BRL)";
@


14.6
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d41 1
a41 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ug.c,v 14.5 2004/12/21 06:38:20 morrison Exp $ (BRL)";
@


14.5
log
@remove the old copyright notice section
@
text
@a38 2
 *  
 *
d41 1
a41 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ug.c,v 14.4 2004/12/21 06:18:44 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a39 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d43 1
a43 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ug.c,v 14.3 2004/12/21 05:45:22 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ug.c,v 14.2 2004/12/21 03:58:27 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ug.c,v 14.1 2004/11/16 19:42:14 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			I F _ U G . C
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ug.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ug.c,v 1.2 2004/06/08 22:04:21 morrison Exp $ (BRL)";
d509 10
@


1.2
log
@obliterate externs.h
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d30 1
a30 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/libfb/if_ug.c,v 11.4 2004/05/10 15:30:45 erikg Exp $ (BRL)";
a39 1
#include "externs.h"		/* For malloc */
@

