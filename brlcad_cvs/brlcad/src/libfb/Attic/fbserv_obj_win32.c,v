head	14.15;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.5
	rel-7-10-2:14.14
	rel-7-10-0:14.13
	rel-7-8-4:14.9
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.6
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.6
	rel-7-6-branch:14.6.0.4
	rel-7-6-0:14.6
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.2
	bobWinPort:14.6.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.15
date	2007.12.04.16.10.49;	author brlcad;	state dead;
branches;
next	14.14;

14.14
date	2007.05.14.20.19.30;	author bob1961;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.27.01.41.37;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.21.04.45.42;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.52;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.22.10.20.20;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.08.12.22.30.12;	author lbutler;	state Exp;
branches
	14.6.4.1;
next	14.5;

14.5
date	2005.01.30.20.30.48;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.22;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.58.27;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.14;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.20;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.40;	author morrison;	state Exp;
branches;
next	;

14.6.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@looks like the windows build is using the real fbserv_obj.c file now, no longer need the fbserv_obj_win32.c empty stub
@
text
@/*              F B S E R V _ O B J _ W I N 3 2 . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup fb */
/** @@{ */
/** @@file fbserv_obj_win32.c
 *
 * A framebuffer server object contains the attributes and
 * methods for implementing an fbserv. This code was developed
 * in large part by modifying the stand-alone version of fbserv.
 *
 * Source -
 *	SLAD CAD Team
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 * Author -
 *	Robert G. Parker
 *
 * Authors of fbserv -
 *	Phillip Dykstra
 *	Michael John Muuss
 *
 */
/** @@} */
#include "common.h"

#include <stdio.h>
#include <ctype.h>

#include "tcl.h"
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "dm.h"
#include "fbmsg.h"
#include "pkg.h"
#include "fb.h"

int fbs_open();
int fbs_close();

static void new_client();
static void drop_client();
static void new_client_handler();
static void existing_client_handler();
static void comm_error();
static void setup_socket();

/*
 * Package Handlers.
 */
void	fbs_pkgfoo();	/* foobar message handler */
void	fbs_rfbopen(), fbs_rfbclose(), fbs_rfbclear(), fbs_rfbread(), fbs_rfbwrite();
void	fbs_rfbcursor(), fbs_rfbgetcursor();
void	fbs_rfbrmap(), fbs_rfbwmap();
void	fbs_rfbhelp();
void	fbs_rfbreadrect(), fbs_rfbwriterect();
void	fbs_rfbbwreadrect(), fbs_rfbbwwriterect();
void	fbs_rfbpoll(), fbs_rfbflush(), fbs_rfbfree();
void	fbs_rfbview(), fbs_rfbgetview();
void	fbs_rfbsetcursor();
/* Old Routines */
void	fbs_rfbscursor(), fbs_rfbwindow(), fbs_rfbzoom();

static struct pkg_switch pkg_switch[] = {
	{ MSG_FBOPEN,		fbs_rfbopen,	"Open Framebuffer" },
	{ MSG_FBCLOSE,		fbs_rfbclose,	"Close Framebuffer" },
	{ MSG_FBCLEAR,		fbs_rfbclear,	"Clear Framebuffer" },
	{ MSG_FBREAD,		fbs_rfbread,	"Read Pixels" },
	{ MSG_FBWRITE,		fbs_rfbwrite,	"Write Pixels" },
	{ MSG_FBWRITE + MSG_NORETURN,	fbs_rfbwrite,	"Asynch write" },
	{ MSG_FBCURSOR,		fbs_rfbcursor,	"Cursor" },
	{ MSG_FBGETCURSOR,	fbs_rfbgetcursor,	"Get Cursor" },	   /*NEW*/
	{ MSG_FBSCURSOR,	fbs_rfbscursor,	"Screen Cursor" }, /*OLD*/
	{ MSG_FBWINDOW,		fbs_rfbwindow,	"Window" },	   /*OLD*/
	{ MSG_FBZOOM,		fbs_rfbzoom,	"Zoom" },	   /*OLD*/
	{ MSG_FBVIEW,		fbs_rfbview,	"View" },	   /*NEW*/
	{ MSG_FBGETVIEW,	fbs_rfbgetview,	"Get View" },	   /*NEW*/
	{ MSG_FBRMAP,		fbs_rfbrmap,	"R Map" },
	{ MSG_FBWMAP,		fbs_rfbwmap,	"W Map" },
	{ MSG_FBHELP,		fbs_rfbhelp,	"Help Request" },
	{ MSG_ERROR,		fbs_pkgfoo,		"Error Message" },
	{ MSG_CLOSE,		fbs_pkgfoo,		"Close Connection" },
	{ MSG_FBREADRECT, 	fbs_rfbreadrect,	"Read Rectangle" },
	{ MSG_FBWRITERECT,	fbs_rfbwriterect,	"Write Rectangle" },
	{ MSG_FBWRITERECT + MSG_NORETURN, fbs_rfbwriterect,"Write Rectangle" },
	{ MSG_FBBWREADRECT, 	fbs_rfbbwreadrect,"Read BW Rectangle" },
	{ MSG_FBBWWRITERECT,	fbs_rfbbwwriterect,"Write BW Rectangle" },
	{ MSG_FBBWWRITERECT+MSG_NORETURN, fbs_rfbbwwriterect,"Write BW Rectangle" },
	{ MSG_FBFLUSH,		fbs_rfbflush,	"Flush Output" },
	{ MSG_FBFLUSH + MSG_NORETURN, fbs_rfbflush, "Flush Output" },
	{ MSG_FBFREE,		fbs_rfbfree,	"Free Resources" },
	{ MSG_FBPOLL,		fbs_rfbpoll,	"Handle Events" },
	{ MSG_FBSETCURSOR,	fbs_rfbsetcursor,	"Set Cursor Shape" },
	{ MSG_FBSETCURSOR + MSG_NORETURN, fbs_rfbsetcursor, "Set Cursor Shape" },
	{ 0,			NULL,		NULL }
};

static FBIO *curr_fbp;		/* current framebuffer pointer */

int
fbs_open(interp, fbsp, port)
     Tcl_Interp *interp;
     struct fbserv_obj *fbsp;
     int port;
{
  return TCL_OK;
}

int
fbs_close(interp, fbsp)
     Tcl_Interp *interp;
     struct fbserv_obj *fbsp;
{
  return TCL_OK;
}

/*
 *			N E W _ C L I E N T
 */
static void
new_client(fbsp, pcp)
     struct fbserv_obj *fbsp;
     struct pkg_conn	*pcp;
{
    return;
}

/*
 *			D R O P _ C L I E N T
 */
static void
drop_client(fbsp, sub)
     struct fbserv_obj *fbsp;
     int sub;
{
	return;
}

/*
 * Accept any new client connections.
 */
static void
new_client_handler(clientData, mask)
ClientData clientData;
int mask;
{
	return;
}

/*
 * Process arrivals from existing clients.
 */
static void
existing_client_handler(clientData, mask)
ClientData clientData;
int mask;
{
	return;
}

static void
setup_socket(fd)
int	fd;
{
	return;
}

/*
 *			C O M M _ E R R O R
 *
 *  Communication error.  An error occured on the PKG link.
 */
static void
comm_error(str)
char *str;
{
	return;
}

/*
 * This is where we go for message types we don't understand.
 */
void
fbs_pkgfoo(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/******** Here's where the hooks lead *********/

void
fbs_rfbopen(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbclose(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbfree(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbclear(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbread(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbwrite(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*
 *			R F B R E A D R E C T
 */
void
fbs_rfbreadrect(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*
 *			R F B W R I T E R E C T
 */
void
fbs_rfbwriterect(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*
 *			R F B B W R E A D R E C T
 */
void
fbs_rfbbwreadrect(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*
 *			R F B B W W R I T E R E C T
 */
void
fbs_rfbbwwriterect(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbcursor(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbgetcursor(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbsetcursor(pcp, buf)
struct pkg_conn *pcp;
char		*buf;
{
	return;
}

/*OLD*/
void
fbs_rfbscursor(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*OLD*/
void
fbs_rfbwindow(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*OLD*/
void
fbs_rfbzoom(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbview(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbgetview(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbrmap(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*
 *			R F B W M A P
 *
 *  Accept a color map sent by the client, and write it to the framebuffer.
 *  Network format is to send each entry as a network (IBM) order 2-byte
 *  short, 256 red shorts, followed by 256 green and 256 blue, for a total
 *  of 3*256*2 bytes.
 */
void
fbs_rfbwmap(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbflush(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

void
fbs_rfbpoll(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*
 *  At one time at least we couldn't send a zero length PKG
 *  message back and forth, so we receive a dummy long here.
 */
void
fbs_rfbhelp(pcp, buf)
struct pkg_conn *pcp;
char *buf;
{
	return;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@Need to include pkg.h and fb.h
@
text
@@


14.13
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d54 2
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d205 1
a205 1
  	return;
@


14.11
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.10
log
@update copyright to 2007
@
text
@d21 2
a22 2
/** \addtogroup fb */
/*@@{*/
d24 1
d42 1
a42 1
/*@@}*/
@


14.9
log
@change from HIDDEN to static, ws, use fbmsg.h
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.8
log
@update copyright to 2006
@
text
@a20 1

a41 1

a43 2


d53 1
a53 1
#include "../libfb/pkgtypes.h"
d58 6
a63 6
HIDDEN void new_client();
HIDDEN void drop_client();
HIDDEN void new_client_handler();
HIDDEN void existing_client_handler();
HIDDEN void comm_error();
HIDDEN void setup_socket();
d115 1
a115 1
HIDDEN FBIO *curr_fbp;		/* current framebuffer pointer */
d137 1
a137 1
HIDDEN void
d148 1
a148 1
HIDDEN void
d159 1
a159 1
HIDDEN void
d170 1
a170 1
HIDDEN void
d178 1
a178 1
HIDDEN void
d190 1
a190 1
HIDDEN void
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.6
log
@Doxygen changes
@
text
@d28 1
a28 1
 * 
d145 1
a145 1
{ 
@


14.6.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *
d145 1
a145 1
{
@


14.5
log
@update copyright to 2005
@
text
@d21 3
a24 2
 *				F B S E R V _ O B J . C
 *
d42 1
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d402 10
@


1.2
log
@obliterate externs.h
@
text
@d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a32 1
#include "externs.h"		/* For malloc, getopt */
@

