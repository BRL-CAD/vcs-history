head	14.17;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.6
	rel-7-10-2:14.16
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.17
date	2007.08.18.03.15.11;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.07.26.01.13.56;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.27.01.41.37;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.35;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.52;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.08.08.06.47.06;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.07.06.19.35.18;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.30.12;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.53;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.22;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.58.27;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.14;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.44;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@remove the fblocal.h header file.  it was only used in three places (two files) and only contained one macro (wrapper to fb_log an error), so keep it simple until it's really needed.
@
text
@/*                         I F _ T S . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup if */
/** @@{ */
/** @@file if_ts.c
 *
 *  Tech-Source GDS-3924L+8 Interface.  This is a single VME board
 *  frame buffer, most likely plugged into a Sun Microsystems computer.
 *  Features include:  1280x1024x24bit display in a 2048x1024 window, or
 *  double buffered 1024x1024x24bit.  Hardware pan and zoom, colormaps,
 *  eight bits of overlay planes.
 *
 *  To use this module you must have the GDSLIB library and header
 *  files installed, and add -lgds to the LIBS during compile.
 *
 *  Authors -
 *	Phillip Dykstra
 *
 */
/** @@} */

#ifndef lint
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.16 2007/07/26 01:13:56 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <ctype.h>
#include <gdslib.h>

#include "machine.h"
#include "fb.h"


HIDDEN int	ts_open(),
		ts_close(),
		ts_clear(),
		ts_read(),
		ts_write(),
		ts_rmap(),
		ts_wmap(),
		ts_view(),
		ts_getview(),
		ts_window(),		/* OLD */
		ts_zoom(),		/* OLD */
		ts_setcursor(),
		ts_cursor(),
		ts_getcursor(),
		ts_readrect(),
		ts_writerect(),
		ts_flush(),
		ts_free(),
		ts_help();

/* This is the ONLY thing that we normally "export" */
FBIO ts_interface =  {
	0,
	ts_open,		/* open device		*/
	ts_close,		/* close device		*/
	ts_clear,		/* clear device		*/
	ts_read,		/* read	pixels		*/
	ts_write,		/* write pixels		*/
	ts_rmap,		/* read colormap	*/
	ts_wmap,		/* write colormap	*/
	ts_view,		/* set view		*/
	ts_getview,		/* get view		*/
	ts_setcursor,		/* define cursor	*/
	ts_cursor,		/* set cursor		*/
	ts_getcursor,		/* get cursor		*/
	ts_readrect,		/* read rectangle	*/
	ts_writerect,		/* write rectangle	*/
	fb_sim_bwreadrect,
	fb_sim_bwwriterect,
	fb_null,		/* handle events	*/
	ts_flush,		/* flush output		*/
	ts_free,		/* free resources	*/
	ts_help,		/* help message		*/
	"Tech-Source GDS 39XX",	/* device description	*/
	2048,			/* max width		*/
	1024,			/* max height		*/
	"/dev/ts",		/* short device name	*/
	1280,			/* default/current width  */
	1024,			/* default/current height */
	-1,			/* select file desc	*/
	-1,			/* file descriptor	*/
	1, 1,			/* zoom			*/
	640, 512,		/* window		*/
	0, 0, 0,		/* cursor		*/
	PIXEL_NULL,		/* page_base		*/
	PIXEL_NULL,		/* page_curp		*/
	PIXEL_NULL,		/* page_endp		*/
	-1,			/* page_no		*/
	0,			/* page_dirty		*/
	0L,			/* page_curpos		*/
	0L,			/* page_pixels		*/
	0			/* debug		*/
};

#define MODE_1MASK	(1<<1)
#define MODE_1NORM	(0<<1)
#define MODE_1OVERLAY	(1<<1)

#define MODE_2MASK	(1<<2)
#define MODE_2NORM	(0<<2)
#define MODE_2OVERONLY	(1<<2)

static struct modeflags {
	char	c;
	long	mask;
	long	value;
	char	*help;
} modeflags[] = {
	{ 'o',	MODE_1MASK, MODE_1OVERLAY,
		"Enable Transparent Overlay Planes - else off" },
	{ 'O',	MODE_2MASK, MODE_2OVERONLY,
		"Enable ONLY the Overlay Planes" },
	{ '\0', 0, 0, "" }
};

/*
 *  GSD Unit Numbers (bottom 3 bits is the "Monitor"):
 *	0 for Red channel	(GMA0)
 *	1 for Green channel	(GMA1)
 *	2 for Blue channel	(GMA2)
 *	3 for Overlay channel	(GMA3)
 *	4 for RGB channels	(24bit GMA0-GMA2)
 *	5 for 8bit into RGB channels (8bit GMA0-GMA2)
 *
 *  The hardware maintains 32 Graphics Units which hold a set of
 *  "Local Attributes" (drawing colors, wite mask, clip rectangle, etc.)
 *  The GDSLIB also associates a display list buffer with each open unit.
 *  The bottom 3 bits of the Unit Number (0-7) become the "Monitor"
 *  which is one of eight mappings of GMA's (Graphics Memory Arrays)
 *  maintained by the GDP (Graphics Drawing Processor).
 *  Global_Attributes[Unit] -> Local_Attributes[Monitor] -> Monitor_Def
 */
static int unit = 4;

HIDDEN int
ts_open( ifp, file, width, height )
FBIO	*ifp;
char	*file;
int	width, height;
{
	struct point	viewmax;
	int mode;
	char curs_bitmap[512];
	int i;

	FB_CK_FBIO(ifp);

	/*
	 *  First, attempt to determine operating mode for this open,
	 *  based upon the "unit number" or flags.
	 *  file = "/dev/X###"
	 *  The default mode is zero.
	 */
	mode = 0;
	if( file != NULL )  {
		register char *cp;
		char	modebuf[80];
		char	*mp;
		int	alpha;
		struct	modeflags *mfp;

		if( strncmp(file, "/dev/ts", 7) ) {
			/* How did this happen?? */
			mode = 0;
		}
		else {
			/* Parse the options */
			alpha = 0;
			mp = &modebuf[0];
			cp = &file[7];
			while( *cp != '\0' && !isspace(*cp) ) {
				*mp++ = *cp;	/* copy it to buffer */
				if( isdigit(*cp) ) {
					cp++;
					continue;
				}
				alpha++;
				for( mfp = modeflags; mfp->c != '\0'; mfp++ ) {
					if( mfp->c == *cp ) {
						mode = (mode&~mfp->mask)|mfp->value;
						break;
					}
				}
				if( mfp->c == '\0' && *cp != '-' ) {
					fb_log( "if_ts: unknown option '%c' ignored\n", *cp );
				}
				cp++;
			}
			*mp = '\0';
			if( !alpha )
				mode = atoi( modebuf );
			if (strlen(cp) > 0) {
				unit = atoi(cp);
				printf("Unit %d\n", unit);
			}
		}
	}

	/*printf("GSD unit = %d\n", unit);*/
	/* GDSLSIZE 16bit words in display list */
	if (open_gds(unit,GDSDLSIZE) < 0) {
		fb_log("error %d\n", f_geterror());
		exit(1);
	}
	init_gds(0);	/* if non-zero, will clear to altcolor */

#if 0
	if ((mode&MODE_2MASK) == MODE_2OVERONLY) {
printf("Overlay Only\n");
		f_ovlset(GDS_OVL_DISPLAY, GDS_OVL_ONLY, 0);
	} else if ((mode&MODE_1MASK) == MODE_1OVERLAY) {
printf("Overlay On\n");
		f_ovlset(GDS_OVL_DISPLAY, GDS_OVL_ON, 0);
	} else {
/* Seems that even doing this overlay off command leaves us with
 * only the RED channel.
 */
printf("Overlay Off\n");
		f_ovlset(GDS_OVL_DISPLAY, GDS_OVL_OFF, 0);
	}
#endif

	getviewmax(&viewmax);
	ifp->if_width = viewmax.x + 1;
	ifp->if_height = viewmax.y + 1;

	/* Initialize the hardware cursor bitmap */
	for (i = 0; i < 512; i++) {
		/* start with black */
		curs_bitmap[i] = 0;
	}
	for (i = 0; i < 8; i++) {
		/* fill in top and bottom rows */
		curs_bitmap[i] = 255;
		curs_bitmap[i+504] = 255;
	}
	for (i = 0; i < 64; i++) {
		/* then three columns */
		curs_bitmap[i*8] |= 0x80;
		curs_bitmap[i*8+7] |= 0x01;
		curs_bitmap[i*8+4] |= 0x80;
	}
	f_hwcset(GDS_HWC_BITMAP, curs_bitmap, 0);

	return(0);
}

HIDDEN int
ts_close( ifp )
FBIO	*ifp;
{
	close_gds(unit);
	return(0);
}

HIDDEN int
ts_clear( ifp, pp )
FBIO	*ifp;
RGBpixel	*pp;
{
	struct	rectangle rect;

	if (pp != RGBPIXEL_NULL) {
		setaltcolor(COLR24((*pp)[RED],(*pp)[GRN],(*pp)[BLU]));
	} else {
		setaltcolor(COLR24(0,0,0));
	}

	rect.x0 = 0;
	rect.y0 = 0;
	rect.x1 = 1279;
	rect.y1 = 1023;
	if (f_fillrect(&rect)) {
		fb_log("error 3 %d\n", f_geterror());
		exit(1);
	}
	/* XXX - Note that this may not flush the display list */

	return(0);
}

HIDDEN int
ts_read( ifp, x, y, pixelp, count )
FBIO	*ifp;
int	x, y;
RGBpixel	*pixelp;
int	count;
{
	struct	point dest;
	struct	size size;

	dest.x = x;
	dest.y = y;
	size.width = count;
	size.height = 1;	/*XXX*/

	f_rdpixar_f(&dest,&size,2,pixelp);
	return(count);
}

HIDDEN int
ts_write( ifp, x, y, pixelp, count )
FBIO	*ifp;
int	x, y;
RGBpixel	*pixelp;
int	count;
{
	struct	point dest;
	struct	size size;
	int	i;
	unsigned char lbuf[1280][4];

#if 1
	for (i = 0; i < count; i++) {
		/*lbuf[i][0] = 0;*/
		lbuf[i][1] = pixelp[i][BLU];
		lbuf[i][2] = pixelp[i][GRN];
		lbuf[i][3] = pixelp[i][RED];
	}
#endif

	dest.x = x;
	dest.y = y;
	size.width = count;
	size.height = 1;	/*XXX*/
#if 0
	f_pixar_ff(&dest,&size,2,pixelp);
#else
#	if 0
	/* This way dumps core if writes are longer than 1020 bytes -M */
	f_pixar_ff(&dest,&size,3,lbuf);
#	else
	if( count > 800 )  {
		size.width = 800;
		f_pixar_ff(&dest,&size,3,lbuf);
		size.width = count-800;
		dest.x = 800;
		f_pixar_ff(&dest,&size,3,&lbuf[800][0]);
	} else {
		f_pixar_ff(&dest,&size,3,lbuf);
	}
#	endif
#endif

	return(count);
}

HIDDEN int
ts_rmap( ifp, cmp )
FBIO	*ifp;
ColorMap	*cmp;
{
	int	i;
	struct color cmap[256];

	if (f_rdclut(0,256,cmap)) {
		fb_log("error 2\n");
		exit(1);
	}
	for (i = 0; i < 256; i++) {
		cmp->cm_red[i] = cmap[i].red << 8;
		cmp->cm_green[i] = cmap[i].green << 8;
		cmp->cm_blue[i] = cmap[i].blue << 8;
	}

	return(0);
}

HIDDEN int
ts_wmap( ifp, cmp )
FBIO	*ifp;
ColorMap	*cmp;
{
	int	i;
	struct color cmap[256];

	if (cmp != COLORMAP_NULL) {
		for (i = 0; i < 256; i++) {
			cmap[i].red = cmp->cm_red[i]>>8;
			cmap[i].green = cmp->cm_green[i]>>8;
			cmap[i].blue = cmp->cm_blue[i]>>8;
		}
	} else {
		for (i = 0; i < 256; i++)
			cmap[i].red = cmap[i].green = cmap[i].blue = i;
	}
	if (f_wrclut(0,256,cmap)) {
		fb_log("error 2\n");
		exit(1);
	}

	return(0);
}


/*
 * Note: at first I didn't have any display list flushes in here and it
 * worked fine.  Then it started messing up so I added one at the end
 * (having learned from the cursor routine).  But, that would mess up.
 * The two flush version is working again.  Strange....
 */
HIDDEN int
ts_view( ifp, xcenter, ycenter, xzoom, yzoom )
FBIO	*ifp;
int	xcenter, ycenter;
int	xzoom, yzoom;
{
	struct point panorigin;
	struct point factor;

	if (xzoom <= 0) xzoom = 1;
	if (yzoom <= 0) yzoom = 1;

	/* save a working copy for outselves */
	ifp->if_xcenter = xcenter;
	ifp->if_ycenter = xcenter;
	ifp->if_xzoom = xzoom;
	ifp->if_yzoom = yzoom;

	panorigin.x = xcenter - ifp->if_width/(2*xzoom);
	panorigin.y = ycenter - ifp->if_height/(2*yzoom);
	f_pan(panorigin.x, panorigin.y);
	f_exec_wr_dl(0);	/* flush display list, no wait */

	factor.x = xzoom;
	factor.y = yzoom;
	f_zoom(factor.x, factor.y);
	f_exec_wr_dl(0);	/* flush display list, no wait */

	return(0);
}

/* return base^pow */
HIDDEN int
ipow(base,pow)
int base;
int pow;
{
	int	i, n;

	if (pow <= 0)
		return	1;

	n = base;
	for (i = 1; i < pow; i++)
		n *= base;

	return	n;
}

/*
 *  Note: A bug in the GDSLIB causes the yzoom factor to be read
 *  back as a power of two, rather than as a pixel replication count.
 */
HIDDEN int
ts_getview( ifp, xcenter, ycenter, xzoom, yzoom )
FBIO	*ifp;
int	*xcenter, *ycenter;
int	*xzoom, *yzoom;
{
	struct point rpanorigin;
	struct point rfactor;

	f_rdzoom(&rfactor);
	ifp->if_xzoom = rfactor.x;
	ifp->if_yzoom = ipow(2,rfactor.y);	/* Bug fix - see above */
	*xzoom = ifp->if_xzoom;
	*yzoom = ifp->if_yzoom;

	/* read lower left pixel coordinate */
	f_rdpan(&rpanorigin);
	/* convert to center pixel coordinate */
	*xcenter = rpanorigin.x + ifp->if_width/(2*ifp->if_xzoom);
	*ycenter = rpanorigin.y + ifp->if_height/(2*ifp->if_yzoom);

#if 0
	printf("getview: hw pan %d %d\n\r", rpanorigin.x, rpanorigin.y);
	printf("getview: hw zoom %d %d\n\r", rfactor.x, rfactor.y);
	printf("getview: returning %d %d %d %d\n", *xcenter, *ycenter, *xzoom, *yzoom);
#endif

	return(0);
}

HIDDEN int
ts_setcursor( ifp, bits, xbits, ybits, xorig, yorig )
FBIO	*ifp;
unsigned char *bits;
int	xbits, ybits;
int	xorig, yorig;
{
	return(0);
}

HIDDEN int
ts_cursor( ifp, mode, x, y )
FBIO	*ifp;
int	mode;
int	x, y;
{
	struct point pos;
	struct color color;
	struct rectangle rect;

	pos.x = x;
	pos.y = y;
	color.red = 255;
	color.green = 255;
	color.blue = 255;
	rect.x0 = 0;
	rect.x1 = 1279;

	/* XXX - BUG in GDSLIB, has these two backward! */
	rect.y1 = 0;
	rect.y0 = -1023;	/* Gross... */

	if (!mode) {
		f_hwcset(GDS_HWC_STYLE, GDS_HWCS_OFF, 0);
	} else {
		f_hwcset(GDS_HWC_STYLE, GDS_HWCS_CH1|GDS_HWCS_BITMAP,
			GDS_HWC_ASSIGN, 4,
			GDS_HWC_COLOR, &color,
			GDS_HWC_WINDOW, &rect,
			GDS_HWC_POSITION, &pos, 0);
	}
	f_exec_wr_dl(0);	/* flush display list, no wait */

#if 0
{
	int	assign;
	struct point *pp;
	assign = f_hwcget(GDS_HWC_ASSIGN);
	pp = (struct point *)f_hwcget(GDS_HWC_POSITION);
	printf("cursor: %d %d %d\n", assign, pp->x, pp->y);
}
#endif

	return(0);
}

HIDDEN int
ts_getcursor( ifp, mode, x, y )
FBIO	*ifp;
int	*mode;
int	*x, *y;
{
	/*int	style;*/
	int	assign;
	struct point *pp;

	/*style = f_hwcget(GDS_HWC_ASSIGN);*/
	assign = f_hwcget(GDS_HWC_ASSIGN);
	pp = (struct point *)f_hwcget(GDS_HWC_POSITION);

	if (assign)
		*mode = 1;
	else
		*mode = 0;
	*x = pp->x;
	*y = pp->y;
	printf("getcursor: %d %d %d\n", *mode, *x, *y);
}

HIDDEN int
ts_readrect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
{
#if 0
	struct	point dest;
	struct	size size;

	dest.x = xmin;
	dest.y = ymin;
	size.width = width;
	size.height = height;
	f_rdpixar_f(&dest,&size,2,pp);

	return( width*height );
#else
	/* until we get 24bit reads that work... sigh */
	return fb_sim_readrect(ifp, xmin, ymin, width, height, pp);
#endif
}

HIDDEN int
ts_writerect( ifp, xmin, ymin, width, height, pp )
FBIO	*ifp;
int	xmin, ymin;
int	width, height;
RGBpixel	*pp;
{
#if 0
	struct	point dest;
	struct	size size;

	dest.x = xmin;
	dest.y = ymin;
	size.width = width;
	size.height = height;
	f_pixar_ff(&dest,&size,2,pp);

	return( width*height );
#else
	/* until we get 24bit writes that work... sigh */
	return fb_sim_writerect(ifp, xmin, ymin, width, height, pp);
#endif
}

HIDDEN int
ts_flush( ifp )
FBIO	*ifp;
{
	f_exec_wr_dl(0);	/* flush display list, no wait */
	return(0);
}

HIDDEN int
ts_free( ifp )
FBIO	*ifp;
{
	/* XXX - should reset everything to sane mode */
	return(0);
}

HIDDEN int
ts_help( ifp )
FBIO	*ifp;
{
	struct	modeflags *mfp;

	fb_log( "Description: %s\n", ts_interface.if_type );
	fb_log( "Device: %s\n", ifp->if_name );
	fb_log( "Max width/height: %d %d\n",
		ts_interface.if_max_width,
		ts_interface.if_max_height );
	fb_log( "Default width/height: %d %d\n",
		ts_interface.if_width,
		ts_interface.if_height );
	fb_log( "Usage: /dev/ts[options] [channel]\n" );
	for( mfp = modeflags; mfp->c != '\0'; mfp++ ) {
		fb_log( "   %c   %s\n", mfp->c, mfp->help );
	}
	fb_log( "Channel Numbers:\n");
	fb_log( " 0 for Red channel\n");
	fb_log( " 1 for Green channel\n");
	fb_log( " 2 for Blue channel\n");
	fb_log( " 3 for Overlay channel\n");
	fb_log( " 4 for RGB channels\n");
	return(0);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d40 1
a40 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.15 2007/01/27 01:41:37 brlcad Exp $ (BRL)";
a44 1

d46 2
d51 1
a51 3
#include "./fblocal.h"
#include <ctype.h>
#include <gdslib.h>
@


14.15
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a35 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d40 1
a40 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.14 2007/01/23 01:13:35 brlcad Exp $ (BRL)";
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.13 2007/01/21 04:45:43 brlcad Exp $ (BRL)";
a50 1

@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.12 2007/01/20 14:36:52 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@d21 2
a22 3

/** \addtogroup if */
/*@@{*/
d24 1
d43 1
a43 1
/*@@}*/
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.11 2006/08/08 06:47:06 brlcad Exp $ (BRL)";
@


14.11
log
@get rid of the libfb-specific _LOCAL_ macro, instead using HIDDEN like everyone else (currently still provided by machine.h)
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.10 2006/07/06 19:35:18 brlcad Exp $ (BRL)";
@


14.10
log
@follow erik's lead, obliterate the other references to Cakefiles
@
text
@d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.9 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
d61 1
a61 1
_LOCAL_ int	ts_open(),
d165 1
a165 1
_LOCAL_ int
d278 1
a278 1
_LOCAL_ int
d286 1
a286 1
_LOCAL_ int
d312 1
a312 1
_LOCAL_ int
d331 1
a331 1
_LOCAL_ int
d378 1
a378 1
_LOCAL_ int
d399 1
a399 1
_LOCAL_ int
d432 1
a432 1
_LOCAL_ int
d464 1
a464 1
_LOCAL_ int
d485 1
a485 1
_LOCAL_ int
d515 1
a515 1
_LOCAL_ int
d525 1
a525 1
_LOCAL_ int
d571 1
a571 1
_LOCAL_ int
d594 1
a594 1
_LOCAL_ int
d618 1
a618 1
_LOCAL_ int
d642 1
a642 1
_LOCAL_ int
d650 1
a650 1
_LOCAL_ int
d658 1
a658 1
_LOCAL_ int
@


14.9
log
@update copyright to 2006
@
text
@d32 1
a32 1
 *  files installed, and add -lgds to the LIBFB_LIBS in Cakefile.defs.
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.8 2005/10/23 04:44:34 brlcad Exp $ (BRL)";
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.7 2005/08/12 22:30:12 lbutler Exp $ (BRL)";
@


14.7
log
@Doxygen changes
@
text
@d41 1
a41 1
 *  
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.6 2005/01/30 20:30:53 brlcad Exp $ (BRL)";
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d41 1
a41 1
 *
d46 1
a46 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.6
log
@update copyright to 2005
@
text
@d21 3
a24 1
 *
d43 2
d46 1
a46 1
static char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libfb/if_ts.c,v 14.5 2004/12/21 06:38:20 morrison Exp $ (BRL)";
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2004 United States Government as represented by
d42 1
a42 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ts.c,v 14.4 2004/12/21 06:18:44 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a39 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
d42 1
a42 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ts.c,v 14.3 2004/12/21 05:45:22 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ts.c,v 14.2 2004/12/21 03:58:27 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ts.c,v 14.1 2004/11/16 19:42:14 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			I F _ T S . C
d45 1
a45 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ts.c,v 1.2 2004/08/02 23:01:48 morrison Exp $ (BRL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libfb/if_ts.c,v 1.1 2004/05/20 15:19:44 morrison Exp $ (BRL)";
d664 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header: /cvs/brlcad/libfb/if_ts.c,v 11.4 2004/05/10 15:30:45 erikg Exp $ (BRL)";
d29 1
a29 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

