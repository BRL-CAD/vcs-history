head	14.19;
access;
symbols
	rel-7-10-4:14.19
	STABLE:14.19.0.2
	stable-branch:14.9
	rel-7-10-2:14.18
	rel-7-10-0:14.17
	rel-7-8-4:14.13
	rel-7-8-2:14.12
	rel-7-8-0:14.12
	trimnurbs-branch:14.12.0.2
	help:14.12
	temp_tag:14.11
	bobWinPort-20051223-freeze:14.10
	postmerge-20051223-bobWinPort:14.11
	premerge-20051223-bobWinPort:14.11
	rel-7-6-6:14.11
	rel-7-6-4:14.11
	rel-7-6-2:14.10
	rel-7-6-branch:14.10.0.4
	rel-7-6-0:14.10
	rel-7-4-2:14.9
	rel-7-4-branch:14.9.0.2
	bobWinPort:14.10.0.2
	rel-7-4-0:14.9
	rel-7-2-6:14.9
	rel-7-2-4:14.9
	rel-7-2-2:14.9
	rel-7-2-0:14.9
	rel-7-0-4:14.8
	rel-7-0-2:14.8
	rel-7-0-1:14.8
	opensource-post:14.8
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.19
date	2007.08.30.18.44.27;	author erikgreenwald;	state Exp;
branches;
next	14.18;

14.18
date	2007.05.14.21.04.31;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.27.01.41.35;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.36.50;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.09.03.15.15.16;	author lbutler;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.10.23.04.44.31;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.08.12.22.28.35;	author lbutler;	state Exp;
branches
	14.10.4.1;
next	14.9;

14.9
date	2005.01.30.20.30.44;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2004.12.21.07.32.30;	author morrison;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.25.29;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.42;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.32;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.01.52.15;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.28;	author morrison;	state Exp;
branches;
next	;

14.10.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@various minor fixes from "flawfinder" and compiler warnings
@
text
@/*                           M S R . C
 * BRL-CAD
 *
 * Copyright (c) 1994-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup msr */
/** @@{ */
/** @@file msr.c
 *
 * @@brief
 * Minimal Standard RANdom number generator
 *
 * @@par From:
 *	Stephen K. Park and Keith W. Miller
 * @@n	"Random number generators: good ones are hard to find"
 * @@n	CACM vol 31 no 10, Oct 88
 *
 *  @@author
 *	Christopher T. Johnson - 90/04/20
 *
 * @@par Source -
 *	The U. S. Army Research Laboratory
 *@@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */


#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.18 2007/05/14 21:04:31 brlcad Exp $ (ARL)";
#endif

#include "common.h"


#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"

/**
 * Note: BN_MSR_MAXTBL must be an even number, preferably a power of two.
 */
#define	BN_MSR_MAXTBL	4096	/* Size of random number tables. */


/*	bn_unif_init	Initialize a random number structure.
 *
 * @@par Entry
 *	setseed	seed to use
 *	method  method to use to generate numbers;
 *
 * @@par Exit
 *	returns	a pointer to a bn_unif structure.
 *	returns 0 on error.
 *
 * @@par Uses
 *	None.
 *
 * @@par Calls
 *	bu_malloc
 *
 * @@par Method @@code
 *	malloc up a structure with pointers to the numbers
 *	get space for the integer table.
 *	get space for the floating table.
 *	set pointer counters
 *	set seed if one was given and setseed != 1
@@endcode
 *
 */
#define	A	16807
#define M	2147483647
#define DM	2147483647.0
#define Q	127773		/* Q = M / A */
#define R	2836		/* R = M % A */
struct bn_unif *
bn_unif_init(long int setseed, int method)
{
	struct bn_unif *p;
	p = (struct bn_unif *) bu_malloc(sizeof(struct bn_unif),"bn_unif");
	p->msr_longs = (long *) bu_malloc(BN_MSR_MAXTBL*sizeof(long), "msr long table");
	p->msr_doubles=(double *) bu_malloc(BN_MSR_MAXTBL*sizeof(double),"msr double table");
	p->msr_seed = 1;
	p->msr_long_ptr = 0;
	p->msr_double_ptr = 0;

	if(method != 0)
	    bu_bomb("Method not yet supported in bn_unif_init()");

	if (setseed&0x7fffffff) p->msr_seed=setseed&0x7fffffff;
	p->magic = BN_UNIF_MAGIC;
	return(p);
}

/*	bn_unif_long_fill	fill a random number table.
 *
 * Use the msrad algorithm to fill a random number table
 * with values from 1 to 2^31-1.  These numbers can (and are) extracted from
 * the random number table via high speed macros and bn_unif_long_fill called
 * when the table is exauseted.
 *
 * @@par Entry
 *	p	pointer to a bn_unif structure.
 *
 * @@par Exit
 *	if (!p) returns 1 else returns a value between 1 and 2^31-1
 *
 * @@par Calls
 *	None.  msran is inlined for speed reasons.
 *
 * @@par Uses
 *	None.
 *
 * @@par Method @@code
 *	if (!p) return(1);
 *	if p->msr_longs != NULL
 *		msr_longs is reloaded with random numbers;
 *		msr_long_ptr is set to BN_MSR_MAXTBL
 *	endif
 *	msr_seed is updated.
@@endcode
 */
long
bn_unif_long_fill(struct bn_unif *p)
{
	register long test,work_seed;
	register int i;

	/*
	 * Gauss and uniform structures have the same format for the
	 * first part (gauss is an extention of uniform) so that a gauss
	 * structure can be passed to a uniform routine.  This means
	 * that we only maintain one structure for gaussian distributions
	 * rather than two.  It also means that the user can pull
	 * uniform numbers from a guass structure when the user wants.
	 */
	if (!p || (p->magic != BN_UNIF_MAGIC &&
	    p->magic != BN_GAUSS_MAGIC)) {
		BN_CK_UNIF(p);
	}

	work_seed = p->msr_seed;

	if ( p->msr_longs) {
		for (i=0; i < BN_MSR_MAXTBL; i++) {
			test = A*(work_seed % Q) - R*(work_seed / Q);
			p->msr_longs[i] = work_seed = (test < 0) ?
			     test+M : test;
		}
		p->msr_long_ptr = BN_MSR_MAXTBL;
	}
	test = A*(work_seed % Q) - R*(work_seed / Q);
	p->msr_seed =  (test < 0) ? test+M : test;
	return(p->msr_seed);
}

/*	bn_unif_double_fill	fill a random number table.
 *
 * Use the msrad algorithm to fill a random number table
 * with values from -0.5 to 0.5.  These numbers can (and are) extracted from
 * the random number table via high speed macros and bn_unif_double_fill
 * called when the table is exauseted.
 *
 * @@par Entry
 *	p	pointer to a bn_unif structure.
 *
 * @@par Exit
 *	if (!p) returns 0.0 else returns a value between -0.5 and 0.5
 *
 * @@par Calls
 *	None.  msran is inlined for speed reasons.
 *
 * @@par Uses
 *	None.
 *
 * @@par Method @@code
 *	if (!p) return (0.0)
 *	if p->msr_longs != NULL
 *		msr_longs is reloaded with random numbers;
 *		msr_long_ptr is set to BN_MSR_MAXTBL
 *	endif
 *	msr_seed is updated.
@@endcode
 */
double
bn_unif_double_fill(struct bn_unif *p)
{
	register long test,work_seed;
	register int i;

	/*
	 * Gauss and uniform structures have the same format for the
	 * first part (gauss is an extention of uniform) so that a gauss
	 * structure can be passed to a uniform routine.  This means
	 * that we only maintain one structure for gaussian distributions
	 * rather than two.  It also means that the user can pull
	 * uniform numbers from a guass structure when the user wants.
	 */
	if (!p || (p->magic != BN_UNIF_MAGIC &&
	    p->magic != BN_GAUSS_MAGIC)) {
		BN_CK_UNIF(p);
	}

	work_seed = p->msr_seed;

	if (p->msr_doubles) {
		for (i=0; i < BN_MSR_MAXTBL; i++) {
			test = A*(work_seed % Q) - R*(work_seed / Q);
			work_seed = (test < 0) ? test+M : test;
			p->msr_doubles[i] = ( work_seed - M/2) * 1.0/DM;
		}
		p->msr_double_ptr = BN_MSR_MAXTBL;
	}
	test = A*(work_seed % Q) - R*(work_seed / Q);
	p->msr_seed = (test < 0) ? test+M : test;

	return((p->msr_seed - M/2) * 1.0/DM);
}

/*	bn_unif_free	free random number table
 *
 */
void
bn_unif_free(struct bn_unif *p)
{
	bu_free(p->msr_doubles, "msr double table");
	bu_free(p->msr_longs, "msr long table");
	p->magic = 0;
	bu_free(p, "bn_unif");
}


/*	bn_gauss_init	Initialize a random number struct for gaussian
 *	numbers.
 *
 * @@par Entry
 *	setseed		Seed to use.
 *	method		method to use to generate numbers (not used)
 *
 * @@par Exit
 *	Returns a pointer toa bn_msr_guass structure.
 *	returns 0 on error.
 *
 * @@par Calls
 *	bu_malloc
 *
 * @@par Uses
 *	None.
 *
 * @@par Method @@code
 *	malloc up a structure
 *	get table space
 *	set seed and pointer.
 *	if setseed != 0 then seed = setseed
@@endcode
 */
struct bn_gauss *
bn_gauss_init(long int setseed, int method)
{
	struct bn_gauss *p;
	p = (struct bn_gauss *) bu_malloc(sizeof(struct bn_gauss),"bn_msr_guass");
	p->msr_gausses=(double *) bu_malloc(BN_MSR_MAXTBL*sizeof(double),"msr guass table");
	p->msr_gauss_doubles=(double *) bu_malloc(BN_MSR_MAXTBL*sizeof(double),"msr guass doubles");
	p->msr_gauss_seed = 1;
	p->msr_gauss_ptr = 0;
	p->msr_gauss_dbl_ptr = 0;

	if (setseed&0x7fffffff) p->msr_gauss_seed=setseed&0x7fffffff;
	p->magic = BN_GAUSS_MAGIC;
	return(p);
}

/*	bn_gauss_fill	fill a random number table.
 *
 * Use the msrad algorithm to fill a random number table.
 * hese numbers can (and are) extracted from
 * the random number table via high speed macros and bn_msr_guass_fill
 * called when the table is exauseted.
 *
 * @@par Entry
 *	p	pointer to a bn_msr_guass structure.
 *
 * @@par Exit
 *	if (!p) returns 0.0 else returns a value with a mean of 0 and
 *	    a variance of 1.0.
 *
 * @@par Calls
 *	BN_UNIF_CIRCLE to get to uniform random number whos radius is
 *	<= 1.0. I.e. sqrt(v1*v1 + v2*v2) <= 1.0
 *	BN_UNIF_CIRCLE is a macro which can call bn_unif_double_fill.
 *
 * @@par Uses
 *	None.
 *
 * @@par Method @@code
 *	if (!p) return (0.0)
 *	if p->msr_longs != NULL
 *		msr_longs is reloaded with random numbers;
 *		msr_long_ptr is set to BN_MSR_MAXTBL
 *	endif
 *	msr_seed is updated.
@@endcode
 */
double
bn_gauss_fill(struct bn_gauss *p)
{
	register int i;
	/* register */ double v1,v2,r,fac;

	BN_CK_GAUSS(p);

	if (p->msr_gausses) {
		for (i=0; i< BN_MSR_MAXTBL-1; ) {
			BN_UNIF_CIRCLE((struct bn_unif *)p,v1,v2,r);
			if (r<0.00001) continue;
			fac = sqrt(-2.0*log(r)/r);
			p->msr_gausses[i++] = v1*fac;
			p->msr_gausses[i++] = v2*fac;
		}
		p->msr_gauss_ptr = BN_MSR_MAXTBL;
	}

	do {
		BN_UNIF_CIRCLE((struct bn_unif *)p,v1,v2,r);
	} while (r < 0.00001);
	fac = sqrt(-2.0*log(r)/r);
	return(v1*fac);
}
/*	bn_gauss_free	free random number table
 *
 */
void
bn_gauss_free(struct bn_gauss *p)
{
	bu_free(p->msr_gauss_doubles, "msr guass doubles");
	bu_free(p->msr_gausses,"msr guass table");
	bu_free(p,"bn_msr_guass");
}


#undef A
#undef M
#undef DM
#undef Q
#undef R

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.17 2007/01/27 01:41:35 brlcad Exp $ (ARL)";
d102 3
@


14.17
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.16 2007/01/23 01:13:33 brlcad Exp $ (ARL)";
d56 1
a56 1
 * Note: BN_MSR_MAXTBL must be an even number.
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.15 2007/01/21 04:45:41 brlcad Exp $ (ARL)";
a47 1

@


14.15
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.14 2007/01/20 14:36:50 brlcad Exp $ (ARL)";
@


14.14
log
@update copyright to 2007
@
text
@d21 2
a22 4

/** \addtogroup msr */
/*@@{*/

d24 1
d30 2
a31 2
 *@@n	"Random number generators: good ones are hard to find"
 *@@n	CACM vol 31 no 10, Oct 88
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.13 2006/09/03 15:15:16 lbutler Exp $ (ARL)";
d361 1
a361 1
/*@@}*/
@


14.13
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2006 United States Government as represented by
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.12 2006/01/18 06:46:16 brlcad Exp $ (ARL)";
@


14.12
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup libbn */
d26 1
d29 1
a29 1
 * From:
d31 2
a32 2
 *	"Random number generators: good ones are hard to find"
 *	CACM vol 31 no 10, Oct 88
d34 1
a34 1
 *  Author -
d37 1
a37 1
 *  Source -
d39 1
a39 1
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
d41 1
a41 1
/*@@}*/
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.11 2005/10/23 04:44:31 brlcad Exp $ (ARL)";
d58 1
a58 1
/*
d66 1
a66 1
 * Entry:
d70 1
a70 1
 * Exit:
d74 1
a74 1
 * Uses:
d77 1
a77 1
 * Calls:
d80 1
a80 1
 * Method:
d86 1
d117 1
a117 1
 * Entry:
d120 1
a120 1
 * Exit:
d123 1
a123 1
 * Calls:
d126 1
a126 1
 * Uses:
d129 1
a129 1
 * Method:
d136 1
d179 1
a179 1
 * Entry:
d182 1
a182 1
 * Exit:
d185 1
a185 1
 * Calls:
d188 1
a188 1
 * Uses:
d191 1
a191 1
 * Method:
d198 1
d251 1
a251 1
 * Entry:
d255 1
a255 1
 * Exit:
d259 1
a259 1
 * Calls:
d262 1
a262 1
 * Uses:
d265 1
a265 1
 * Method:
d270 1
d295 1
a295 1
 * Entry:
d298 1
a298 1
 * Exit:
d302 1
a302 1
 * Calls:
d307 1
a307 1
 * Uses:
d310 1
a310 1
 * Method:
d317 1
d362 1
@


14.11
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1994-2005 United States Government as represented by
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.10 2005/08/12 22:28:35 lbutler Exp $ (ARL)";
@


14.10
log
@Doxygen changes
@
text
@d35 1
a35 1
 *  
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.9 2005/01/30 20:30:44 brlcad Exp $ (ARL)";
d129 1
a129 1
 *	if p->msr_longs != NULL 
d144 1
a144 1
	 * structure can be passed to a uniform routine.  This means 
d146 1
a146 1
	 * rather than two.  It also means that the user can pull 
d190 1
a190 1
 *	if p->msr_longs != NULL 
d205 1
a205 1
	 * structure can be passed to a uniform routine.  This means 
d207 1
a207 1
	 * rather than two.  It also means that the user can pull 
d244 1
a244 1
/*	bn_gauss_init	Initialize a random number struct for gaussian 
d307 1
a307 1
 *	if p->msr_longs != NULL 
@


14.10.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d35 1
a35 1
 *
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d129 1
a129 1
 *	if p->msr_longs != NULL
d144 1
a144 1
	 * structure can be passed to a uniform routine.  This means
d146 1
a146 1
	 * rather than two.  It also means that the user can pull
d190 1
a190 1
 *	if p->msr_longs != NULL
d205 1
a205 1
	 * structure can be passed to a uniform routine.  This means
d207 1
a207 1
	 * rather than two.  It also means that the user can pull
d244 1
a244 1
/*	bn_gauss_init	Initialize a random number struct for gaussian
d307 1
a307 1
 *	if p->msr_longs != NULL
@


14.9
log
@update copyright to 2005
@
text
@d21 4
a25 1
 *
d40 2
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/msr.c,v 14.8 2004/12/21 07:32:30 morrison Exp $ (ARL)";
@


14.8
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2004 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 14.7 2004/12/21 07:25:29 morrison Exp $ (ARL)";
@


14.7
log
@tidy up a lil bit
@
text
@a35 2
 *  
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 14.6 2004/12/21 06:58:42 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 14.5 2004/12/21 06:44:32 morrison Exp $ (ARL)";
a229 2
 *
 *
@


14.5
log
@remove the old distribution notice section
@
text
@a37 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1994-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 14.4 2004/12/21 06:18:43 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a36 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 14.3 2004/12/21 05:45:20 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 14.2 2004/12/21 01:52:15 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *				M S R . C
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 1.2 2004/08/02 23:01:48 morrison Exp $ (ARL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/msr.c,v 1.1 2004/05/20 15:19:28 morrison Exp $ (ARL)";
d342 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libbn/msr.c,v 11.12 2004/05/10 15:30:43 erikg Exp $ (ARL)";
d31 1
a31 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

