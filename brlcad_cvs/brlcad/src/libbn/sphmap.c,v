head	14.18;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.6
	rel-7-10-2:14.16
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.18
date	2007.12.16.15.59.38;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.09.15.16.23.07;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.07.26.01.13.55;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.27.01.41.36;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.09.07.01.19.17;	author lbutler;	state Exp;
branches;
next	14.10;

14.10
date	2006.09.05.04.19.55;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.31;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.28.35;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.45;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.19;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.01.52.15;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.30;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.18
log
@convert all bzero calls to memset
@
text
@/*                        S P H M A P . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup sphmap */
/** @@{ */
/** @@file sphmap.c
 *
 * @@brief
 *  Common Subroutines for Spherical Data Structures/Texture Maps Subroutines
 *
 * @@author
 *	Phillip Dykstra
 *
 */


#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.17 2007/09/15 16:23:07 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <math.h>
#include <string.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "spm.h"

/**
 *		S P M _ I N I T
 *@@brief
 *  Return a sphere map structure initialized for N points around
 *  the equator.
 *
 * Malloc the storage and fill in the pointers.
 *  This code leaves a ring of "triangular" pixels at the poles.
 *  An alternative would be to have the pole region map to a
 *  single pixel.
 *
 *  Returns SPM_NULL on error.
 */
spm_map_t *
spm_init(int N, int elsize)
{
	int	i, nx, total, index;
	register spm_map_t *mapp;

	mapp = (spm_map_t *)bu_malloc( sizeof(spm_map_t), "spm_map_t");
	if( mapp == SPM_NULL )
		return( SPM_NULL );
	memset((char *)mapp, 0, sizeof(spm_map_t));

	mapp->elsize = elsize;
	mapp->ny = N/2;
	mapp->nx = (int *) bu_malloc( (unsigned)(N/2 * sizeof(*(mapp->nx))), "sph nx" );
	if( mapp->nx == NULL ) {
		spm_free( mapp );
		return( SPM_NULL );
	}
	mapp->xbin = (unsigned char **) bu_malloc( (unsigned)(N/2 * sizeof(char *)), "sph xbin" );
	if( mapp->xbin == NULL ) {
		spm_free( mapp );
		return( SPM_NULL );
	}

	total = 0;
	for( i = 0; i < N/4; i++ ) {
		nx = ceil( N*cos( i*bn_twopi/N ) );
		if( nx > N ) nx = N;
		mapp->nx[ N/4 + i ] = nx;
		mapp->nx[ N/4 - i -1 ] = nx;

		total += 2*nx;
	}

	mapp->_data = (unsigned char *) bu_calloc( (unsigned)total, elsize, "spm_init data" );
	if( mapp->_data == NULL ) {
		spm_free( mapp );
		return( SPM_NULL );
	}

	index = 0;
	for( i = 0; i < N/2; i++ ) {
		mapp->xbin[i] = &((mapp->_data)[index]);
		index += elsize * mapp->nx[i];
	}
	mapp->magic = SPM_MAGIC;
	return( mapp );
}

/**
 *		S P M _ F R E E
 *@@brief
 *  Free the storage associated with a sphere structure.
 */
void
spm_free(spm_map_t *mp)
{
	RT_CK_SPM(mp);
	if( mp == SPM_NULL )
		return;

	if( mp->_data != NULL )  {
		(void) bu_free( (char *)mp->_data, "sph _data" );
		mp->_data = NULL;
	}

	if( mp->nx != NULL )  {
		(void) bu_free( (char *)mp->nx, "sph nx" );
		mp->nx = NULL;
	}

	if( mp->xbin != NULL )  {
		(void) bu_free( (char *)mp->xbin, "sph xbin" );
		mp->xbin = NULL;
	}

	(void) bu_free( (char *)mp, "spm_map_t" );
}

/*
 *		S P M _ R E A D
 *@@brief
 *  Read the value of the pixel at the given normalized (u,v)
 *  coordinates.  It does NOT check the sanity of the coords.
 *
 *@@n  0.0 <= u < 1.0	Left to Right
 *@@n  0.0 <= v < 1.0	Bottom to Top
 */
void
spm_read(register spm_map_t *mapp, register unsigned char *valp, double u, double v)
{
	int	x, y;
	register unsigned char *cp;
	register int	i;

	RT_CK_SPM(mapp);

	y = v * mapp->ny;
	x = u * mapp->nx[y];
	cp = &(mapp->xbin[y][x*mapp->elsize]);

	i = mapp->elsize;
	while( i-- > 0 ) {
		*valp++ = *cp++;
	}
}

/*
 *		S P M _ W R I T E
 *@@breif
 *  Write the value of the pixel at the given normalized (u,v)
 *  coordinates.  It does NOT check the sanity of the coords.
 *
 *@@n  0.0 <= u < 1.0	Left to Right
 *@@n  0.0 <= v < 1.0	Bottom to Top
 */
void
spm_write(register spm_map_t *mapp, register unsigned char *valp, double u, double v)
{
	int	x, y;
	register unsigned char *cp;
	register int	i;

	RT_CK_SPM(mapp);

	y = v * mapp->ny;
	x = u * mapp->nx[y];
	cp = &(mapp->xbin[y][x*mapp->elsize]);

	i = mapp->elsize;
	while( i-- > 0 ) {
		*cp++ = *valp++;
	}
}

/*
 *		S P M _ G E T
 *@@brief
 *  Return a pointer to the storage element indexed by (u,v)
 *  coordinates.  It does NOT check the sanity of the coords.
 *
 *@@n  0.0 <= u < 1.0	Left to Right
 *@@n  0.0 <= v < 1.0	Bottom to Top
 */
char *
spm_get(register spm_map_t *mapp, double u, double v)
{
	int	x, y;
	register unsigned char *cp;

	RT_CK_SPM(mapp);

	y = v * mapp->ny;
	x = u * mapp->nx[y];
	cp = &(mapp->xbin[y][x*mapp->elsize]);

	return( (char *)cp );
}

/*
 *		S P M _ L O A D
 *@@brief
 *  Read a saved sphere map from a file ("-" for stdin) into
 *  the given map structure.
 *  This does not check for conformity of size, etc.
 *
 *  @@return -1 on error, else 0.
 */
int
spm_load(spm_map_t *mapp, char *filename)
{
	int	y, total;
	FILE	*fp;

	RT_CK_SPM(mapp);

	if( strcmp( filename, "-" ) == 0 )
		fp = stdin;
	else  {
		bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
		fp = fopen( filename, "r" );
		bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
		if( fp == NULL )
			return( -1 );
	}

	total = 0;
	for( y = 0; y < mapp->ny; y++ )
		total += mapp->nx[y];

	bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
	y = fread( (char *)mapp->_data, mapp->elsize, total, fp );	/* res_syscall */
	(void) fclose( fp );
	bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */

	if( y != total )
		return( -1 );

	return( 0 );
}

/*
 *		S P M _ S A V E
 *@@brief
 *  Write a loaded sphere map to the given file ("-" for stdout).
 *  Returns -1 on error, else 0.
 */
int
spm_save(spm_map_t *mapp, char *filename)
{
	int	i;
	int	got;
	FILE	*fp;

	RT_CK_SPM(mapp);

	if( strcmp( filename, "-" ) == 0 )
		fp = stdout;
	else  {
		bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
		fp = fopen( filename, "w" );			/* res_syscall */
		bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
		if( fp == NULL )
			return( -1 );
	}

	for( i = 0; i < mapp->ny; i++ ) {
		bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
		got = fwrite( (char *)mapp->xbin[i], mapp->elsize,	/* res_syscall */
		    mapp->nx[i], fp );
		bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
		if( got != mapp->nx[i] ) {
			bu_log("spm_save(%s): write error\n", filename);
			bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
			(void) fclose( fp );
			bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
			return( -1 );
		}
	}

	bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
	(void) fclose( fp );
	bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */

	return( 0 );
}

/*
 *		S P M _ P I X _ L O A D
 *@@brief
 *  Load an 'nx' by 'ny' pix file and filter it into the
 *  given sphere structure.
 *  @@return -1 on error, else 0.
 */
int
spm_px_load(spm_map_t *mapp, char *filename, int nx, int ny)
{
	int	i, j;			/* index input file */
	int	x, y;			/* index texture map */
	double	j_per_y, i_per_x;	/* ratios */
	int	nj, ni;			/* ints of ratios */
	unsigned char *cp;
	unsigned char *buffer;
	unsigned long	red, green, blue;
	long	count;
	FILE	*fp;

	RT_CK_SPM(mapp);

	if( strcmp( filename, "-" ) == 0 )
		fp = stdin;
	else  {
		bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
		fp = fopen( filename, "r" );
		bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
		if( fp == NULL )
			return( -1 );
	}

	/* Shamelessly suck it all in */
	buffer = (unsigned char *)bu_malloc( (unsigned)(nx*nx*3), "spm_px_load buffer" );
	bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
	i = fread( (char *)buffer, 3, nx*ny, fp );	/* res_syscall */
	(void) fclose( fp );
	bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
	if( i != nx*ny )  {
		bu_log("spm_px_load(%s) read error\n", filename);
		return( -1 );
	}

	j_per_y = (double)ny / (double)mapp->ny;
	nj = (int)j_per_y;
	/* for each bin */
	for( y = 0; y < mapp->ny; y++ ) {
		i_per_x = (double)nx / (double)mapp->nx[y];
		ni = (int)i_per_x;
		/* for each cell in bin */
		for( x = 0; x < mapp->nx[y]; x++ ) {
			/* Average pixels from the input file */
			red = green = blue = 0;
			count = 0;
			for( j = y*j_per_y; j < y*j_per_y+nj; j++ ) {
				for( i = x*i_per_x; i < x*i_per_x+ni; i++ ) {
					red = red + (unsigned long)buffer[ 3*(j*nx+i) ];
					green = green + (unsigned long)buffer[ 3*(j*nx+i)+1 ];
					blue = blue + (unsigned long)buffer[ 3*(j*nx+i)+2 ];
					count++;
				}
			}
			/* Save the color */
			cp = &(mapp->xbin[y][x*3]);
			*cp++ = (unsigned char)(red/count);
			*cp++ = (unsigned char)(green/count);
			*cp++ = (unsigned char)(blue/count);
		}
	}
	(void) bu_free( (char *)buffer, "spm buffer" );

	return( 0 );
}

/*
 *		S P M _ P I X _ S A V E
 *@@brief
 *  Save a sphere structure as an 'nx' by 'ny' pix file.
 *  @@return -1 on error, else 0.
 */
int
spm_px_save(spm_map_t *mapp, char *filename, int nx, int ny)
{
	int	x, y;
	FILE	*fp;
	unsigned char pixel[3];
	int	got;

	RT_CK_SPM(mapp);

	if( strcmp( filename, "-" ) == 0 )
		fp = stdout;
	else  {
		bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
		fp = fopen( filename, "w" );
		bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
		if( fp == NULL )
			return( -1 );
	}

	for( y = 0; y < ny; y++ ) {
		for( x = 0; x < nx; x++ ) {
			spm_read( mapp, pixel, (double)x/(double)nx, (double)y/(double)ny );
			bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
			got = fwrite( (char *)pixel, sizeof(pixel), 1, fp );	/* res_syscall */
			bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
			if( got != 1 )  {
				bu_log("spm_px_save(%s): write error\n", filename);
				bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
				(void) fclose( fp );
				bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */
				return( -1 );
			}
		}
	}

	bu_semaphore_acquire( BU_SEM_SYSCALL );		/* lock */
	(void) fclose( fp );
	bu_semaphore_release( BU_SEM_SYSCALL );		/* unlock */

	return( 0 );
}

/*
 * 		S P M _ D U M P
 *@@brief
 *  Display a sphere structure on stderr.
 *  Used for debugging.
 */
void
spm_dump(spm_map_t *mp, int verbose)
{
	int	i;

	RT_CK_SPM(mp);

	bu_log("elsize = %d\n", mp->elsize );
	bu_log("ny = %d\n", mp->ny );
	bu_log("_data = 0x%x\n", mp->_data );
	if( !verbose )  return;
	for( i = 0; i < mp->ny; i++ ) {
		bu_log("  nx[%d] = %3d, xbin[%d] = 0x%x\n",
			i, mp->nx[i], i, mp->xbin[i] );
	}
}
/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.16 2007/07/26 01:13:55 brlcad Exp $ (BRL)";
d71 1
a71 1
	bzero( (char *)mapp, sizeof(spm_map_t) );
@


14.16
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.15 2007/01/27 01:41:36 brlcad Exp $ (BRL)";
a38 1

a40 1
#ifdef HAVE_STRING_H
d42 1
a42 3
#else
#include <strings.h>
#endif
@


14.15
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a29 5
 * @@par Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 * @@n	The U. S. Army Ballistic Research Laboratory
 * @@n	Aberdeen Proving Ground, Maryland  21005-5066
 *
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.14 2007/01/23 01:13:33 brlcad Exp $ (BRL)";
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.13 2007/01/21 04:45:41 brlcad Exp $ (BRL)";
a44 1

d62 1
a62 1
 *  the equator.  
d305 1
a305 1
		    	(void) fclose( fp );
d307 1
a307 1
		    	return( -1 );
@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.12 2007/01/20 14:36:51 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@d21 2
a22 4

/** \addtogroup sphmap */
/*@@{*/

d24 1
d28 1
a28 1
 *  @@author
d31 1
a31 1
 *  @@par Source -
d33 2
a34 2
 *@@n	The U. S. Army Ballistic Research Laboratory
 *@@n	Aberdeen Proving Ground, Maryland  21005-5066
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.11 2006/09/07 01:19:17 lbutler Exp $ (BRL)";
d465 1
a465 1
/*@@}*/
@


14.11
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.10 2006/09/05 04:19:55 lbutler Exp $ (BRL)";
@


14.10
log
@Doxygen comment formatting
@
text
@d22 1
a22 1
/** \addtogroup libbn */
d38 1
a38 1
/*@@}*/
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.9 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
@


14.9
log
@update copyright to 2006
@
text
@d26 1
d29 1
a29 1
 *  Author -
d32 1
a32 1
 *  Source -
d34 2
a35 2
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.8 2005/10/23 04:44:31 brlcad Exp $ (BRL)";
d61 1
a61 1
/*
d63 3
d67 1
a67 2
 *  Return a sphere map structure initialized for N points around
 *  the equator.  Malloc the storage and fill in the pointers.
d123 1
a123 1
/*
d125 1
a125 1
 *
d155 1
a155 1
 *
d159 2
a160 2
 *  0.0 <= u < 1.0	Left to Right
 *  0.0 <= v < 1.0	Bottom to Top
d183 1
a183 1
 *
d187 2
a188 2
 *  0.0 <= u < 1.0	Left to Right
 *  0.0 <= v < 1.0	Bottom to Top
d211 1
a211 1
 *
d215 2
a216 2
 *  0.0 <= u < 1.0	Left to Right
 *  0.0 <= v < 1.0	Bottom to Top
d235 1
a235 1
 *
d239 2
a240 1
 *  Returns -1 on error, else 0.
d277 1
a277 1
 *
d323 1
a323 1
 *
d326 1
a326 1
 *  Returns -1 on error, else 0.
d397 1
a397 1
 *
d399 1
a399 1
 *  Returns -1 on error, else 0.
d446 1
a446 1
 *
d466 1
a466 1

@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.7 2005/08/12 22:28:35 lbutler Exp $ (BRL)";
@


14.7
log
@Doxygen changes
@
text
@d30 1
a30 1
 *  
d35 1
a35 1
 *  
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.6 2005/01/30 20:30:45 brlcad Exp $ (BRL)";
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d35 1
a35 1
 *
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.6
log
@update copyright to 2005
@
text
@d21 4
a25 1
 *
d37 2
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/sphmap.c,v 14.5 2004/12/21 06:38:19 morrison Exp $ (BRL)";
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/sphmap.c,v 14.4 2004/12/21 06:18:43 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/sphmap.c,v 14.3 2004/12/21 05:45:20 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/sphmap.c,v 14.2 2004/12/21 01:52:15 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/sphmap.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			S P H M A P . C
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/sphmap.c,v 1.2 2004/08/02 23:01:48 morrison Exp $ (BRL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/sphmap.c,v 1.1 2004/05/20 15:19:30 morrison Exp $ (BRL)";
d441 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libbn/sphmap.c,v 11.9 2004/05/10 15:30:43 erikg Exp $ (BRL)";
d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

