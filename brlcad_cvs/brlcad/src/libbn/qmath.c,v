head	14.17;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.6
	rel-7-10-2:14.16
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.17
date	2007.12.17.02.16.53;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.07.26.01.13.55;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.27.01.41.36;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.09.07.01.19.17;	author lbutler;	state Exp;
branches;
next	14.10;

14.10
date	2006.09.04.04.42.40;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.31;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.28.35;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.44;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.01.52.15;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.29;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@removal of the FAST declaration throughout.  now using register or letting the compiler sort things out.
@
text
@/*                         Q M A T H . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup mat */
/** @@{ */
/** @@file qmath.c
 *
 * @@brief
 *  Quaternion math routines.
 *
 *  Unit Quaternions:
 *	Q = [ r, a ]	where r = cos(theta/2) = rotation amount
 *			    |a| = sin(theta/2) = rotation axis
 *
 *      If a = 0 we have the reals; if one coord is zero we have
 *	 complex numbers (2D rotations).
 *
 *  [r,a][s,b] = [rs - a.b, rb + sa + axb]
 *
 *       -1
 *  [r,a]   = (r - a) / (r^2 + a.a)
 *
 *  Powers of quaternions yield incremental rotations,
 *   e.g. Q^3 is rotated three times as far as Q.
 *
 *  Some operations on quaternions:
 *            -1
 *   [0,P'] = Q  [0,P]Q		Rotate a point P by quaternion Q
 *                     -1  a
 *   slerp(Q,R,a) = Q(Q  R)	Spherical linear interp: 0 < a < 1
 *
 *   bisect(P,Q) = (P + Q) / |P + Q|	Great circle bisector
 *
 *
 *  @@author
 *	Phil Dykstra, 25 Sep 1985
 *
 *  Additions inspired by "Quaternion Calculus For Animation" by Ken Shoemake,
 *  SIGGRAPH '89 course notes for "Math for SIGGRAPH", May 1989.
 *
 */


#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.16 2007/07/26 01:13:55 brlcad Exp $ (BRL)";
#endif

#include "common.h"


#include <stdio.h>		/* DEBUG need stderr for now... */
#include <math.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"

#ifdef M_PI
#define PI M_PI
#else
#define PI	3.14159265358979323264
#endif
#define	RTODEG	(180.0/PI)

/**
 *			Q U A T _ M A T 2 Q U A T
 *@@brief
 *  Convert Matrix to Quaternion.
 */
void
quat_mat2quat(register fastf_t *quat, register const fastf_t *mat)
{
	fastf_t		tr;
	fastf_t	s;

#define XX	0
#define YY	5
#define ZZ	10
#define MMM(a,b)		mat[4*(a)+(b)]

	tr = mat[XX] + mat[YY] + mat[ZZ];
	if( tr > 0.0 )  {
		s = sqrt( tr + 1.0 );
		quat[W] = s * 0.5;
		s = 0.5 / s;
		quat[X] = ( mat[6] - mat[9] ) * s;
		quat[Y] = ( mat[8] - mat[2] ) * s;
		quat[Z] = ( mat[1] - mat[4] ) * s;
		return;
	}

	/* Find dominant element of primary diagonal */
	if( mat[YY] > mat[XX] )  {
		if( mat[ZZ] > mat[YY] )  {
			s = sqrt( MMM(Z,Z) - (MMM(X,X)+MMM(Y,Y)) + 1.0 );
			quat[Z] = s * 0.5;
			s = 0.5 / s;
			quat[W] = (MMM(X,Y) - MMM(Y,X)) * s;
			quat[X] = (MMM(Z,X) + MMM(X,Z)) * s;
			quat[Y] = (MMM(Z,Y) + MMM(Y,Z)) * s;
		} else {
			s = sqrt( MMM(Y,Y) - (MMM(Z,Z)+MMM(X,X)) + 1.0 );
			quat[Y] = s * 0.5;
			s = 0.5 / s;
			quat[W] = (MMM(Z,X) - MMM(X,Z)) * s;
			quat[Z] = (MMM(Y,Z) + MMM(Z,Y)) * s;
			quat[X] = (MMM(Y,X) + MMM(X,Y)) * s;
		}
	} else {
		if( mat[ZZ] > mat[XX] )  {
			s = sqrt( MMM(Z,Z) - (MMM(X,X)+MMM(Y,Y)) + 1.0 );
			quat[Z] = s * 0.5;
			s = 0.5 / s;
			quat[W] = (MMM(X,Y) - MMM(Y,X)) * s;
			quat[X] = (MMM(Z,X) + MMM(X,Z)) * s;
			quat[Y] = (MMM(Z,Y) + MMM(Y,Z)) * s;
		} else {
			s = sqrt( MMM(X,X) - (MMM(Y,Y)+MMM(Z,Z)) + 1.0 );
			quat[X] = s * 0.5;
			s = 0.5 / s;
			quat[W] = (MMM(Y,Z) - MMM(Z,Y)) * s;
			quat[Y] = (MMM(X,Y) + MMM(Y,X)) * s;
			quat[Z] = (MMM(X,Z) + MMM(Z,X)) * s;
		}
	}
#undef MMM
}

/**
 *			Q U A T _ Q U A T 2 M A T
 *@@brief
 *  Convert Quaternion to Matrix.
 *
 * NB: This only works for UNIT quaternions.  We may get imaginary results
 *   otherwise.  We should normalize first (still yields same rotation).
 */
void
quat_quat2mat(register fastf_t *mat, register const fastf_t *quat)
{
	quat_t	q;

	QMOVE( q, quat );	/* private copy */
	QUNITIZE( q );

	mat[0] = 1.0 - 2.0*q[Y]*q[Y] - 2.0*q[Z]*q[Z];
	mat[1] = 2.0*q[X]*q[Y] + 2.0*q[W]*q[Z];
	mat[2] = 2.0*q[X]*q[Z] - 2.0*q[W]*q[Y];
	mat[3] = 0.0;
	mat[4] = 2.0*q[X]*q[Y] - 2.0*q[W]*q[Z];
	mat[5] = 1.0 - 2.0*q[X]*q[X] - 2.0*q[Z]*q[Z];
	mat[6] = 2.0*q[Y]*q[Z] + 2.0*q[W]*q[X];
	mat[7] = 0.0;
	mat[8] = 2.0*q[X]*q[Z] + 2.0*q[W]*q[Y];
	mat[9] = 2.0*q[Y]*q[Z] - 2.0*q[W]*q[X];
	mat[10] = 1.0 - 2.0*q[X]*q[X] - 2.0*q[Y]*q[Y];
	mat[11] = 0.0;
	mat[12] = 0.0;
	mat[13] = 0.0;
	mat[14] = 0.0;
	mat[15] = 1.0;
}

/**
 *			Q U A T _ D I S T A N C E
 *@@brief
 * Gives the euclidean distance between two quaternions.
 */
double
quat_distance(const fastf_t *q1, const fastf_t *q2)
{
	quat_t	qtemp;

	QSUB2( qtemp, q1, q2 );
	return( QMAGNITUDE( qtemp ) );
}

/**
 *			Q U A T _ D O U B L E
 *@@brief
 * Gives the quaternion point representing twice the rotation
 *   from q1 to q2.
 *   Needed for patching Bezier curves together.
 *   A rather poor name admittedly.
 */
void
quat_double(fastf_t *qout, const fastf_t *q1, const fastf_t *q2)
{
	quat_t	qtemp;
	double	scale;

	scale = 2.0 * QDOT( q1, q2 );
	QSCALE( qtemp, q2, scale );
	QSUB2( qout, qtemp, q1 );
	QUNITIZE( qout );
}

/**
 *			Q U A T _ B I S E C T
 *@@brief
 * Gives the bisector of quaternions q1 and q2.
 * (Could be done with quat_slerp and factor 0.5)
 * [I believe they must be unit quaternions this to work]
 */
void
quat_bisect(fastf_t *qout, const fastf_t *q1, const fastf_t *q2)
{
	QADD2( qout, q1, q2 );
	QUNITIZE( qout );
}

/**
 *			Q U A T _ S L E R P
 *@@brief
 * Do Spherical Linear Interpolation between two unit quaternions
 *  by the given factor.
 *
 * As f goes from 0 to 1, qout goes from q1 to q2.
 * Code based on code by Ken Shoemake
 */
void
quat_slerp(fastf_t *qout, const fastf_t *q1, const fastf_t *q2, double f)
{
	double		omega;
	double		cos_omega;
	double		invsin;
	register double	s1, s2;

	cos_omega = QDOT( q1, q2 );
	if( (1.0 + cos_omega) > 1.0e-5 )  {
		/* cos_omega > -0.99999 */
		if( (1.0 - cos_omega) > 1.0e-5 )  {
			/* usual case */
			omega = acos(cos_omega);	/* XXX atan2? */
			invsin = 1.0 / sin(omega);
			s1 = sin( (1.0-f)*omega ) * invsin;
			s2 = sin( f*omega ) * invsin;
		} else {
			/*
			 *  cos_omega > 0.99999
			 * The ends are very close to each other,
			 * use linear interpolation, to avoid divide-by-zero
			 */
			s1 = 1.0 - f;
			s2 = f;
		}
		QBLEND2( qout, s1, q1, s2, q2 );
	} else {
		/*
		 *  cos_omega == -1, omega = PI.
		 *  The ends are nearly opposite, 180 degrees (PI) apart.
		 */
		/* (I have no idea what permuting the elements accomplishes,
		 * perhaps it creates a perpendicular? */
		qout[X] = -q1[Y];
		qout[Y] =  q1[X];
		qout[Z] = -q1[W];
		s1 = sin( (0.5-f) * PI );
		s2 = sin( f * PI );
		VBLEND2( qout, s1, q1, s2, qout );
		qout[W] =  q1[Z];
	}
}

/**
 *			Q U A T _ S B E R P
 *@@brief
 * Spherical Bezier Interpolate between four quaternions by amount f.
 * These are intended to be used as start and stop quaternions along
 *   with two control quaternions chosen to match spline segments with
 *   first order continuity.
 *
 *  Uses the method of successive bisection.
 */
void
quat_sberp(fastf_t *qout, const fastf_t *q1, const fastf_t *qa, const fastf_t *qb, const fastf_t *q2, double f)
{
	quat_t	p1, p2, p3, p4, p5;

	/* Interp down the three segments */
	quat_slerp( p1, q1, qa, f );
	quat_slerp( p2, qa, qb, f );
	quat_slerp( p3, qb, q2, f );

	/* Interp down the resulting two */
	quat_slerp( p4, p1, p2, f );
	quat_slerp( p5, p2, p3, f );

	/* Interp this segment for final quaternion */
	quat_slerp( qout, p4, p5, f );
}

/**
 *			Q U A T _ M A K E _ N E A R E S T
 *@@brief
 *  Set the quaternion q1 to the quaternion which yields the
 *   smallest rotation from q2 (of the two versions of q1 which
 *   produce the same orientation).
 *
 * Note that smallest euclidian distance implies smallest great
 *   circle distance as well (since surface is convex).
 */
void
quat_make_nearest(fastf_t *q1, const fastf_t *q2)
{
	quat_t	qtemp;
	double	d1, d2;

	QSCALE( qtemp, q1, -1.0 );
	d1 = quat_distance( q1, q2 );
	d2 = quat_distance( qtemp, q2 );

	/* Choose smallest distance */
	if( d2 < d1 ) {
		QMOVE( q1, qtemp );
	}
}

/**
 *			Q U A T _ P R I N T
 */
/* DEBUG ROUTINE */
void
quat_print(const char *title, const fastf_t *quat)
{
	int	i;
	vect_t	axis;

	fprintf( stderr, "QUATERNION: %s\n", title );
	for( i = 0; i < 4; i++ )
		fprintf( stderr, "%8f  ", quat[i] );
	fprintf( stderr, "\n" );

	fprintf( stderr, "rot_angle = %8f deg", RTODEG * 2.0 * acos( quat[W] ) );
	VMOVE( axis, quat );
	VUNITIZE( axis );
	fprintf( stderr, ", Axis = (%f, %f, %f)\n",
		axis[X], axis[Y], axis[Z] );
}

/**
 *			Q U A T _ E X P
 *@@brief
 *  Exponentiate a quaternion, assuming that the scalar part is 0.
 *  Code by Ken Shoemake.
 */
void
quat_exp(fastf_t *out, const fastf_t *in)
{
	fastf_t	theta;
	fastf_t	scale;

	if( (theta = MAGNITUDE( in )) > VDIVIDE_TOL )
		scale = sin(theta)/theta;
	else
		scale = 1.0;

	VSCALE( out, in, scale );
	out[W] = cos(theta);
}

/**
 *			Q U A T _ L O G
 *@@brief
 *  Take the natural logarithm of a unit quaternion.
 *  Code by Ken Shoemake.
 */
void
quat_log(fastf_t *out, const fastf_t *in)
{
	fastf_t	theta;
	fastf_t	scale;

	if( (scale = MAGNITUDE(in)) > VDIVIDE_TOL )  {
		theta = atan2( scale, in[W] );
		scale = theta/scale;
	}

	VSCALE( out, in, scale );
	out[W] = 0.0;
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d61 1
a61 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.15 2007/01/27 01:41:36 brlcad Exp $ (BRL)";
d90 1
a90 1
	FAST fastf_t	s;
d365 2
a366 2
	FAST fastf_t	theta;
	FAST fastf_t	scale;
d386 2
a387 2
	FAST fastf_t	theta;
	FAST fastf_t	scale;
@


14.15
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a56 5
 *  @@par Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *@@n	The U. S. Army Ballistic Research Laboratory
 *@@n	Aberdeen Proving Ground, Maryland  21005-5066
 *
d61 1
a61 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.14 2007/01/23 01:13:33 brlcad Exp $ (BRL)";
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d66 1
a66 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.13 2007/01/21 04:45:41 brlcad Exp $ (BRL)";
a71 1

@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d66 1
a66 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.12 2007/01/20 14:36:51 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@d21 2
a22 4

/** \addtogroup mat */
/*@@{*/

d24 1
d67 1
a67 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.11 2006/09/07 01:19:17 lbutler Exp $ (BRL)";
d405 1
a405 1
/*@@}*/
@


14.11
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d68 1
a68 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.10 2006/09/04 04:42:40 lbutler Exp $ (BRL)";
@


14.10
log
@Doxygen updates
@
text
@d22 1
a22 1
/** \addtogroup libbn */
d26 1
d68 1
a68 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.9 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
@


14.9
log
@update copyright to 2006
@
text
@d52 1
a52 1
 *  Author -
d58 1
a58 1
 *  Source -
d60 2
a61 2
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d64 1
a64 1
/*@@}*/
d67 1
a67 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.8 2005/10/23 04:44:31 brlcad Exp $ (BRL)";
d88 1
a88 1
/*
d90 1
a90 1
 *
d152 1
a152 1
/*
d154 1
a154 1
 *
d186 1
a186 1
/*
d188 1
a188 1
 *
d200 1
a200 1
/*
d202 1
a202 1
 *
d220 1
a220 1
/*
d222 1
a222 1
 *
d234 1
a234 1
/*
d236 1
a236 1
 *
d287 1
a287 1
/*
d289 1
a289 1
 *
d315 1
a315 1
/*
d317 1
a317 1
 *
d341 1
a341 1
/*
d363 1
a363 1
/*
d365 1
a365 1
 *
d384 1
a384 1
/*
d386 1
a386 1
 *
d405 1
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d67 1
a67 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.7 2005/08/12 22:28:35 lbutler Exp $ (BRL)";
@


14.7
log
@Doxygen changes
@
text
@d57 1
a57 1
 *  
d62 1
a62 1
 *  
d67 1
a67 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.6 2005/01/30 20:30:44 brlcad Exp $ (BRL)";
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d57 1
a57 1
 *
d62 1
a62 1
 *
d67 1
a67 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.6
log
@update copyright to 2005
@
text
@d21 4
a25 1
 *
d64 2
d67 1
a67 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/qmath.c,v 14.5 2004/12/21 07:18:57 morrison Exp $ (BRL)";
@


14.5
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/qmath.c,v 14.4 2004/12/21 06:18:43 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a59 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
d62 1
a62 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/qmath.c,v 14.3 2004/12/21 05:45:20 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d64 1
a64 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/qmath.c,v 14.2 2004/12/21 01:52:15 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d64 1
a64 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/qmath.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *		Q M A T H . C
d64 1
a64 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/qmath.c,v 1.2 2004/08/02 23:01:48 morrison Exp $ (BRL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/qmath.c,v 1.1 2004/05/20 15:19:29 morrison Exp $ (BRL)";
d382 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libbn/qmath.c,v 11.10 2004/05/10 15:30:43 erikg Exp $ (BRL)";
d48 1
a48 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

