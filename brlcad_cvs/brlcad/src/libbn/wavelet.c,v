head	14.17;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.6
	rel-7-10-2:14.14
	rel-7-10-0:14.14
	rel-7-8-4:14.10
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.17
date	2007.12.31.17.41.19;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.12.16.18.53.48;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.09.15.16.23.08;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.36;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.09.07.01.19.17;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.28.35;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.45;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.01.52.15;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.30;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@remove the __STDC__ protections, it's a given
@
text
@/*                       W A V E L E T . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup wavelet */
/** @@{ */
/** @@file wavelet.c
 *
 * @@brief
 *  This is a standard wavelet library that takes a given data buffer of some data
 *  type and then performs a wavelet transform on that data.
 *
 * The transform
 *  operations available are to either decompose or reconstruct a signal into it's
 *  corresponding wavelet form based on the haar wavelet.
 *
 *  Wavelet decompose/reconstruct operations
 *
 *	- bn_wlt_haar_1d_double_decompose(tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_1d_float_decompose (tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_1d_char_decompose  (tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_1d_short_decompose (tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_1d_int_decompose   (tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_1d_long_decompose  (tbuffer, buffer, dimen, channels, limit)
 *
 *	- bn_wlt_haar_1d_double_reconstruct(tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_1d_float_reconstruct (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_1d_char_reconstruct  (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_1d_short_reconstruct (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_1d_int_reconstruct   (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_1d_long_reconstruct  (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *
 *	- bn_wlt_haar_2d_double_decompose(tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_2d_float_decompose (tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_2d_char_decompose  (tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_2d_short_decompose (tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_2d_int_decompose   (tbuffer, buffer, dimen, channels, limit)
 *	- bn_wlt_haar_2d_long_decompose  (tbuffer, buffer, dimen, channels, limit)
 *
 *	- bn_wlt_haar_2d_double_reconstruct(tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_float_reconstruct (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_char_reconstruct  (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_short_reconstruct (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_int_reconstruct   (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_long_reconstruct  (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *
 *	- bn_wlt_haar_2d_double_decompose2(tbuffer, buffer, width, height, channels, limit)
 *	- bn_wlt_haar_2d_float_decompose2 (tbuffer, buffer, width, height, channels, limit)
 *	- bn_wlt_haar_2d_char_decompose2  (tbuffer, buffer, width, height, channels, limit)
 *	- bn_wlt_haar_2d_short_decompose2 (tbuffer, buffer, width, height, channels, limit)
 *	- bn_wlt_haar_2d_int_decompose2   (tbuffer, buffer, width, height, channels, limit)
 *	- bn_wlt_haar_2d_long_decompose2  (tbuffer, buffer, width, height, channels, limit)
 *
 *	- bn_wlt_haar_2d_double_reconstruct2(tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_float_reconstruct2 (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_char_reconstruct2  (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_short_reconstruct2 (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_int_reconstruct2   (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	- bn_wlt_haar_2d_long_reconstruct2  (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *
 *
 *  For greatest accuracy, it is preferable to convert everything to "double"
 *  and decompose/reconstruct with that.  However, there are useful
 *  properties to performing the decomposition and/or reconstruction in
 *  various data types (most notably char).
 *
 *  Rather than define all of these routines explicitly, we define
 *  2 macros "decompose" and "reconstruct" which embody the structure of
 *  the function (which is common to all of them).  We then instatiate
 *  these macros once for each of the data types.  It's ugly, but it
 *  assures that a change to the structure of one operation type
 *  (decompose or reconstruct) occurs for all data types.
 *
 *
 *
 *
 *  bn_wlt_haar_1d_*_decompose(tbuffer, buffer, dimen, channels, limit)
 *  @@par Parameters:
 *	- tbuffer     a temporary data buffer 1/2 as large as "buffer". See (1) below.
 *	- buffer      pointer to the data to be decomposed
 *	- dimen    the number of samples in the data buffer
 *	- channels the number of values per sample
 *	- limit    the extent of the decomposition
 *
 *  Perform a Haar wavelet decomposition on the data in buffer "buffer".  The
 *  decomposition is done "in place" on the data, hence the values in "buffer"
 *  are not preserved, but rather replaced by their decomposition.
 *  The number of original samples in the buffer (parameter "dimen") and the
 *  decomposition limit ("limit") must both be a power of 2 (e.g. 512, 1024).
 *  The buffer is decomposed into "average" and "detail" halves until the
 *  size of the "average" portion reaches "limit".  Simultaneous
 *  decomposition of multi-plane (e.g. pixel) data, can be performed by
 *  indicating the number of planes in the "channels" parameter.
 *
 *  (1) The process requires a temporary buffer which is 1/2 the size of the
 *  longest span to be decomposed.  If the "tbuffer" argument is non-null then
 *  it is a pointer to a temporary buffer.  If the pointer is NULL, then a
 *  local temporary buffer will be allocated (and freed).
 *
 *  @@par Examples:
@@code
	double dbuffer[512], cbuffer[256];
	...
	bn_wlt_haar_1d_double_decompose(cbuffer, dbuffer, 512, 1, 1);
@@endcode
 *
 *    performs complete decomposition on the data in array "dbuffer".
 *
@@code
	double buffer[3][512];	 /_* 512 samples, 3 values/sample (e.g. RGB?)*_/
	double tbuffer[3][256];	 /_* the temporary buffer *_/
	...
	bn_wlt_haar_1d_double_decompose(tbuffer, buffer, 512, 3, 1);
@@endcode
 *
 *    This will completely decompose the data in buffer.  The first sample will
 *    be the average of all the samples.  Alternatively:
 *
 *	bn_wlt_haar_1d_double_decompose(tbuffer, buffer, 512, 3, 64);
 *
 *    decomposes buffer into a 64-sample "average image" and 3 "detail" sets.
 *
 *  bn_wlt_haar_1d_*_reconstruct(tbuffer, buffer, dimen, channels, sub_sz, limit)
 *
 *
 *  @@author
 *	Lee A. Butler
 *
 *  @@par Modifications
 *      Christopher Sean Morrison
 *
 *  @@par Source -
 *	The U. S. Army Research Laboratory
 *@@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 */
/** @@} */

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"

/**
 * This source file uses C-styple "templates" where functions specific
 * to a set of specified data types are automatically
 * declared/provided via one single macro implementation.
 */
#define decompose_1d(DATATYPE) bn_wlt_haar_1d_ ## DATATYPE ## _decompose


#define make_wlt_haar_1d_decompose(DATATYPE)  \
void \
decompose_1d(DATATYPE) \
( tbuffer, buffer, dimen, channels, limit ) \
DATATYPE *tbuffer;		/* temporary buffer */ \
DATATYPE *buffer;		/* data buffer */ \
unsigned long dimen;	/* # of samples in data buffer */ \
unsigned long channels;	/* # of data values per sample */ \
unsigned long limit;	/* extent of decomposition */ \
{ \
	register DATATYPE *detail; \
	register DATATYPE *avg; \
	unsigned long img_size; \
	unsigned long half_size; \
	int do_free = 0; \
	unsigned long x, x_tmp, d, i, j; \
	register fastf_t onehalf = (fastf_t)0.5; \
\
	CK_POW_2( dimen ); \
\
	if ( ! tbuffer ) { \
		tbuffer = (DATATYPE *)bu_malloc( \
				(dimen/2) * channels * sizeof( *buffer ), \
				"1d wavelet buffer"); \
		do_free = 1; \
	} \
\
	/* each iteration of this loop decomposes the data into 2 halves: \
	 * the "average image" and the "image detail" \
	 */ \
	for (img_size = dimen ; img_size > limit ; img_size = half_size ){ \
\
		half_size = img_size/2; \
		 \
		detail = tbuffer; \
		avg = buffer; \
\
		for ( x=0 ; x < img_size ; x += 2 ) { \
			x_tmp = x*channels; \
\
			for (d=0 ; d < channels ; d++, avg++, detail++) { \
				i = x_tmp + d; \
				j = i + channels; \
				*detail = (buffer[i] - buffer[j]) * onehalf; \
				*avg    = (buffer[i] + buffer[j]) * onehalf; \
			} \
		} \
\
		/* "avg" now points to the first element AFTER the "average \
		 * image" section, and hence is the START of the "image  \
		 * detail" portion.  Convenient, since we now want to copy \
		 * the contents of "tbuffer" (which holds the image detail) into \
		 * place. \
		 */ \
		memcpy(avg, tbuffer, sizeof(*buffer) * channels * half_size); \
	} \
	 \
	if (do_free) \
		bu_free( (genptr_t)tbuffer, "1d wavelet buffer"); \
}


#define reconstruct(DATATYPE ) bn_wlt_haar_1d_ ## DATATYPE ## _reconstruct

#define make_wlt_haar_1d_reconstruct( DATATYPE ) \
void \
reconstruct(DATATYPE) \
( tbuffer, buffer, dimen, channels, subimage_size, limit )\
DATATYPE *tbuffer; \
DATATYPE *buffer; \
unsigned long dimen; \
unsigned long channels; \
unsigned long subimage_size; \
unsigned long limit; \
{ \
	register DATATYPE *detail; \
	register DATATYPE *avg; \
	unsigned long img_size; \
	unsigned long dbl_size; \
	int do_free = 0; \
	unsigned long x_tmp, d, x, i, j; \
\
	CK_POW_2( subimage_size ); \
	CK_POW_2( dimen ); \
	CK_POW_2( limit ); \
\
	if ( ! (subimage_size < dimen) ) { \
		bu_log("%s:%d Dimension %d should be greater than subimage size (%d)\n", \
			__FILE__, __LINE__, dimen, subimage_size); \
		bu_bomb("reconstruct"); \
	} \
\
	if ( ! (subimage_size < limit) ) { \
		bu_log("%s:%d Channels limit %d should be greater than subimage size (%d)\n", \
			__FILE__, __LINE__, limit, subimage_size); \
		bu_bomb("reconstruct"); \
	} \
\
	if ( ! (limit <= dimen) ) { \
		bu_log("%s:%d Dimension %d should be greater than or equal to the channels limit (%d)\n", \
			__FILE__, __LINE__, dimen, limit); \
		bu_bomb("reconstruct"); \
	} \
\
\
	if ( ! tbuffer ) { \
		tbuffer = ( DATATYPE *)bu_malloc((dimen/2) * channels * sizeof( *buffer ), \
				"1d wavelet reconstruct tmp buffer"); \
		do_free = 1; \
	} \
\
	/* Each iteration of this loop reconstructs an image twice as \
	 * large as the original using a "detail image". \
	 */ \
	for (img_size=subimage_size ; img_size < limit ; img_size=dbl_size) { \
		dbl_size = img_size * 2; \
\
		d = img_size * channels; \
		detail = &buffer[ d ]; \
\
		/* copy the original or "average" data to temporary buffer */ \
		avg = tbuffer; \
		memcpy(avg, buffer, sizeof(*buffer) * d); \
\
\
		for (x=0 ; x < dbl_size ; x += 2 ) { \
			x_tmp = x * channels; \
			for (d=0 ; d < channels ; d++, avg++, detail++ ) { \
				i = x_tmp + d; \
				j = i + channels; \
				buffer[i] = *avg + *detail; \
				buffer[j] = *avg - *detail; \
			} \
		} \
	} \
\
	if (do_free) \
		bu_free( (genptr_t)tbuffer, \
			"1d wavelet reconstruct tmp buffer"); \
}

/* Believe it or not, this is where the actual code is generated */

make_wlt_haar_1d_decompose(double)
make_wlt_haar_1d_reconstruct(double)

make_wlt_haar_1d_decompose(float)
make_wlt_haar_1d_reconstruct(float)

make_wlt_haar_1d_decompose(char)
make_wlt_haar_1d_reconstruct(char)

make_wlt_haar_1d_decompose(int)
make_wlt_haar_1d_reconstruct(int)

make_wlt_haar_1d_decompose(short)
make_wlt_haar_1d_reconstruct(short)

make_wlt_haar_1d_decompose(long)
make_wlt_haar_1d_reconstruct(long)


#define decompose_2d( DATATYPE ) bn_wlt_haar_2d_ ## DATATYPE ## _decompose

#define make_wlt_haar_2d_decompose(DATATYPE) \
void \
decompose_2d(DATATYPE) \
(tbuffer, buffer, dimen, channels, limit) \
DATATYPE *tbuffer; \
DATATYPE *buffer; \
unsigned long dimen; \
unsigned long channels; \
unsigned long limit; \
{ \
	register DATATYPE *detail; \
	register DATATYPE *avg; \
	unsigned long img_size; \
	unsigned long half_size; \
	unsigned long x, y, x_tmp, y_tmp, d, i, j; \
	register fastf_t onehalf = (fastf_t)0.5; \
\
	CK_POW_2( dimen ); \
\
	if ( ! tbuffer ) { \
		tbuffer = (DATATYPE *)bu_malloc( \
				(dimen/2) * channels * sizeof( *buffer ), \
				"1d wavelet buffer"); \
	} \
\
	/* each iteration of this loop decomposes the data into 4 quarters: \
	 * the "average image", the horizontal detail, the vertical detail \
	 * and the horizontal-vertical detail \
	 */ \
	for (img_size = dimen ; img_size > limit ; img_size = half_size ) { \
		half_size = img_size/2; \
\
		/* do a horizontal detail decomposition first */ \
		for (y=0 ; y < img_size ; y++ ) { \
			y_tmp = y * dimen * channels; \
\
			detail = tbuffer; \
			avg = &buffer[y_tmp]; \
\
			for (x=0 ; x < img_size ; x += 2 ) { \
				x_tmp = x*channels + y_tmp; \
\
				for (d=0 ; d < channels ; d++, avg++, detail++){ \
					i = x_tmp + d; \
					j = i + channels; \
					*detail = (buffer[i] - buffer[j]) * onehalf; \
					*avg    = (buffer[i] + buffer[j]) * onehalf; \
				} \
			} \
			/* "avg" now points to the first element AFTER the \
			 * "average image" section, and hence is the START \
			 * of the "image detail" portion.  Convenient, since \
			 * we now want to copy the contents of "tbuffer" (which \
			 * holds the image detail) into place. \
			 */ \
			memcpy(avg, tbuffer, sizeof(*buffer) * channels * half_size); \
		} \
\
		/* Now do the vertical decomposition */ \
		for (x=0 ; x < img_size ; x ++ ) { \
			x_tmp = x*channels; \
\
			detail = tbuffer; \
			avg = &buffer[x_tmp]; \
\
			for (y=0 ; y < img_size ; y += 2) { \
				y_tmp =y*dimen*channels + x_tmp; \
\
				for (d=0 ; d < channels ; d++, avg++, detail++) { \
					i = y_tmp + d; \
					j = i + dimen*channels; \
					*detail = (buffer[i] - buffer[j]) * onehalf; \
					*avg    = (buffer[i] + buffer[j]) * onehalf; \
				} \
				avg += (dimen-1)*channels; \
			} \
\
			/* "avg" now points to the element ABOVE the \
			 * last "average image" pixel or the first "detail" \
			 * location in the user buffer. \
			 * \
			 * There is no memcpy for the columns, so we have to \
			 * copy the data back to the user buffer ourselves. \
			 */ \
			detail = tbuffer; \
			for (y=half_size ; y < img_size ; y++) { \
				for (d=0; d < channels ; d++) { \
					*avg++ = *detail++; \
				} \
				avg += (dimen-1)*channels; \
			} \
		} \
	} \
}


#define reconstruct_2d( DATATYPE ) bn_wlt_haar_2d_ ## DATATYPE ## _reconstruct

#define make_wlt_haar_2d_reconstruct(DATATYPE) \
void \
reconstruct_2d(DATATYPE) \
(tbuf, buf, width, channels, avg_size, limit) \
DATATYPE *tbuf; \
DATATYPE *buf; \
unsigned long width; \
unsigned long channels; \
unsigned long avg_size; \
unsigned long limit; \
{ \
	register DATATYPE *detail; \
	register DATATYPE *avg; \
	unsigned long img_size; \
	unsigned long dbl_size; \
	unsigned long x_tmp, d, x, i, j; \
	unsigned long y, row_len, row_start; \
 \
	CK_POW_2( avg_size ); \
	CK_POW_2( width ); \
	CK_POW_2( limit ); \
 \
	/* XXX check for: \
	 * subimage_size < dimen && subimage_size < limit \
	 * limit <= dimen \
	 */ \
 \
 \
	if ( ! tbuf ) { \
		tbuf = ( DATATYPE *)bu_malloc((width/2) * channels * sizeof( *buf ), \
				"1d wavelet reconstruct tmp buffer"); \
	} \
 \
	row_len = width * channels; \
 \
	/* Each iteration of this loop reconstructs an image twice as \
	 * large as the original using a "detail image". \
	 */ \
 \
	for (img_size = avg_size ; img_size < limit ; img_size = dbl_size) { \
		dbl_size = img_size * 2; \
		 \
		 \
		/* first is a vertical reconstruction */ \
		for (x=0 ; x < dbl_size ; x++ ) { \
			/* reconstruct column x */ \
 \
			/* copy column of "average" data to tbuf */ \
			x_tmp = x*channels; \
			for (y=0 ; y < img_size ; y++) { \
				i = x_tmp + y*row_len; \
				j = y * channels; \
				for (d=0 ; d < channels ; d++) { \
					tbuf[j++] = buf[i++]; \
				} \
			} \
			avg = tbuf; \
			detail = &buf[x_tmp + img_size*row_len]; \
 \
			/* reconstruct column */ \
			for (y=0 ; y < dbl_size ; y += 2) { \
 \
				i = x_tmp + y*row_len; \
				j = i + row_len; \
 \
				for (d=0 ; d < channels ; d++,avg++,detail++){ \
					buf[i++] = *avg + *detail; \
					buf[j++] = *avg - *detail; \
				} \
				detail += row_len - channels; \
			} \
		} \
 \
		/* now a horizontal reconstruction */ \
		for (y=0 ; y < dbl_size ; y++ ) { \
			/* reconstruct row y */ \
 \
			/* copy "average" row to tbuf and set pointer to \
			 * begining of "detail" \
			 */ \
			d = img_size * channels; \
			row_start = y*row_len; \
 \
 \
			avg = &buf[ row_start ]; \
			detail = &buf[ row_start + d]; \
 \
			memcpy(tbuf, avg, sizeof(*buf) * d); \
			avg = tbuf; \
 \
			/* reconstruct row */ \
			for (x=0 ; x < dbl_size ; x += 2 ) { \
				x_tmp = x * channels; \
				i = row_start + x * channels; \
				j = i + channels; \
 \
				for (d=0 ; d < channels ; d++,avg++,detail++){ \
					buf[i++] = *avg + *detail; \
					buf[j++] = *avg - *detail; \
				} \
			} \
		} \
	} \
}


make_wlt_haar_2d_decompose(double)
make_wlt_haar_2d_decompose(float)
make_wlt_haar_2d_decompose(char)
make_wlt_haar_2d_decompose(int)
make_wlt_haar_2d_decompose(short)
make_wlt_haar_2d_decompose(long)

make_wlt_haar_2d_reconstruct(double)
make_wlt_haar_2d_reconstruct(float)
make_wlt_haar_2d_reconstruct(char)
make_wlt_haar_2d_reconstruct(int)
make_wlt_haar_2d_reconstruct(short)
make_wlt_haar_2d_reconstruct(long)


#define decompose_2d_2( DATATYPE ) bn_wlt_haar_2d_ ## DATATYPE ## _decompose2

#define make_wlt_haar_2d_decompose2(DATATYPE) \
void \
decompose_2d_2(DATATYPE) \
(tbuffer, buffer, width, height, channels, limit) \
DATATYPE *tbuffer; \
DATATYPE *buffer; \
unsigned long width; \
unsigned long height; \
unsigned long channels; \
unsigned long limit; \
{ \
	register DATATYPE *detail; \
	register DATATYPE *avg; \
	unsigned long img_wsize; \
	unsigned long img_hsize; \
	unsigned long half_wsize; \
	unsigned long half_hsize; \
	unsigned long x, y, x_tmp, y_tmp, d, i, j; \
	register fastf_t onehalf = (fastf_t)0.5; \
\
	CK_POW_2( width ); \
	CK_POW_2( height ); \
\
	/* create a temp buffer the half the size of the larger dimension \
	 */ \
	if ( ! tbuffer ) { \
		tbuffer = (DATATYPE *)bu_malloc( \
				(((width>height)?width:height)/2) * channels * sizeof( *buffer ), \
				"1d wavelet buffer"); \
	} \
\
	/* each iteration of this loop decomposes the data into 4 quarters: \
	 * the "average image", the horizontal detail, the vertical detail \
	 * and the horizontal-vertical detail \
	 */ \
	for (img_wsize = width, img_hsize = height ; (img_wsize > limit) && (img_hsize > limit) ; img_wsize = half_wsize, img_hsize = half_hsize ) { \
		half_wsize = img_wsize/2; \
		half_hsize = img_hsize/2; \
\
		/* do a horizontal detail decomposition first */ \
		for (y=0 ; y < img_hsize ; y++ ) { \
			y_tmp = y * width * channels; \
\
			detail = tbuffer; \
			avg = &buffer[y_tmp]; \
\
			for (x=0 ; x < img_wsize ; x += 2 ) { \
				x_tmp = x*channels + y_tmp; \
\
				for (d=0 ; d < channels ; d++, avg++, detail++){ \
					i = x_tmp + d; \
					j = i + channels; \
					*detail = (buffer[i] - buffer[j]) * onehalf; \
					*avg    = (buffer[i] + buffer[j]) * onehalf; \
				} \
			} \
			/* "avg" now points to the first element AFTER the \
			 * "average image" section, and hence is the START \
			 * of the "image detail" portion.  Convenient, since \
			 * we now want to copy the contents of "tbuffer" (which \
			 * holds the image detail) into place. \
			 */ \
			memcpy(avg, tbuffer, sizeof(*buffer) * channels * half_wsize); \
		} \
\
		/* Now do the vertical decomposition */ \
		for (x=0 ; x < img_wsize ; x ++ ) { \
			x_tmp = x*channels; \
\
			detail = tbuffer; \
			avg = &buffer[x_tmp]; \
\
			for (y=0 ; y < img_hsize ; y += 2) { \
				y_tmp =y*width*channels + x_tmp; \
\
				for (d=0 ; d < channels ; d++, avg++, detail++) { \
					i = y_tmp + d; \
					j = i + width*channels; \
					*detail = (buffer[i] - buffer[j]) * onehalf; \
					*avg    = (buffer[i] + buffer[j]) * onehalf; \
				} \
				avg += (width-1)*channels; \
			} \
\
			/* "avg" now points to the element ABOVE the \
			 * last "average image" pixel or the first "detail" \
			 * location in the user buffer. \
			 * \
			 * There is no memcpy for the columns, so we have to \
			 * copy the data back to the user buffer ourselves. \
			 */ \
			detail = tbuffer; \
			for (y=half_hsize ; y < img_hsize ; y++) { \
				for (d=0; d < channels ; d++) { \
					*avg++ = *detail++; \
				} \
				avg += (width-1)*channels; \
			} \
		} \
	} \
}

make_wlt_haar_2d_decompose2(double)
make_wlt_haar_2d_decompose2(float)
make_wlt_haar_2d_decompose2(char)
make_wlt_haar_2d_decompose2(int)
make_wlt_haar_2d_decompose2(short)
make_wlt_haar_2d_decompose2(long)


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@d164 5
a168 2

#ifdef __STDC__
a169 3
#else
#define decompose_1d(DATATYPE) bn_wlt_haar_1d_/**/DATATYPE/**/_decompose
#endif
a233 1
#if defined(__STDC__)
a234 3
#else
#define reconstruct(DATATYPE) bn_wlt_haar_1d_/**/DATATYPE/**/_reconstruct
#endif
a333 1
#ifdef __STDC__
a334 3
#else
#define decompose_2d(DATATYPE) bn_wlt_haar_2d_/* */DATATYPE/* */_decompose
#endif
a431 1
#ifdef __STDC__
a432 3
#else
#define reconstruct_2d(DATATYPE) bn_wlt_haar_2d_/* */DATATYPE/* */_reconstruct
#endif
a554 1
#ifdef __STDC__
a555 3
#else
#define decompose_2d_2(DATATYPE) bn_wlt_haar_2d_/* */DATATYPE/* */_decompose2
#endif
@


14.15
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d298 1
a298 1
		memcpy(avg, buffer, sizeof(*buffer) * d ); \
d533 1
a533 1
			memcpy(tbuf, avg, sizeof(*buf) * d ); \
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a156 1
#ifdef HAVE_STRING_H
a157 1
#endif
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d26 1
a26 1
 *  type and then performs a wavelet transform on that data.  
a173 1

d264 1
a264 1
        if ( ! (subimage_size < dimen) ) { \
d270 1
a270 1
        if ( ! (subimage_size < limit) ) { \
d276 1
a276 1
        if ( ! (limit <= dimen) ) { \
a568 1

d598 2
a599 2
        /* create a temp buffer the half the size of the larger dimension \
         */ \
a684 1

@


14.12
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.11
log
@update copyright to 2007
@
text
@d21 2
a22 4

/** \addtogroup wavelet */
/*@@{*/

d24 1
d153 1
a153 1
/*@@}*/
@


14.10
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.9
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup libbn */
d26 1
d28 3
a30 1
 *  type and then performs a wavelet transform on that data.  The transform
d95 1
a95 1
 *  Parameters:
d117 6
a122 4
 *  Examples:
 *	double dbuffer[512], cbuffer[256];
 *	...
 *	bn_wlt_haar_1d_double_decompose(cbuffer, dbuffer, 512, 1, 1);
d126 6
a131 4
 *	double buffer[3][512];	 /_* 512 samples, 3 values/sample (e.g. RGB?)*_/
 *	double tbuffer[3][256];	 /_* the temporary buffer *_/
 *	...
 *	bn_wlt_haar_1d_double_decompose(tbuffer, buffer, 512, 3, 1);
a139 2
 *
 *
d143 1
a143 1
 *  Author -
d146 1
a146 1
 *  Modifications -
d149 1
a149 1
 *  Source -
d151 1
a151 1
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
a157 2


d689 1
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.7
log
@Doxygen changes
@
text
@d74 2
a75 2
 *	
 *  
d77 2
a78 2
 *  and decompose/reconstruct with that.  However, there are useful 
 *  properties to performing the decomposition and/or reconstruction in 
d85 1
a85 1
 *  assures that a change to the structure of one operation type 
d95 1
a95 1
 *	- dimen    the number of samples in the data buffer 
d105 1
a105 1
 *  size of the "average" portion reaches "limit".  Simultaneous 
d108 1
a108 1
 *  
d143 1
a143 1
 *  
d147 1
a147 1
 *  
d236 1
a236 1
#if defined(__STDC__) 
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d74 2
a75 2
 *
 *
d77 2
a78 2
 *  and decompose/reconstruct with that.  However, there are useful
 *  properties to performing the decomposition and/or reconstruction in
d85 1
a85 1
 *  assures that a change to the structure of one operation type
d95 1
a95 1
 *	- dimen    the number of samples in the data buffer
d105 1
a105 1
 *  size of the "average" portion reaches "limit".  Simultaneous
d108 1
a108 1
 *
d143 1
a143 1
 *
d147 1
a147 1
 *
d236 1
a236 1
#if defined(__STDC__)
@


14.6
log
@update copyright to 2005
@
text
@d21 4
d33 41
a73 41
 *	bn_wlt_haar_1d_double_decompose(tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_1d_float_decompose (tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_1d_char_decompose  (tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_1d_short_decompose (tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_1d_int_decompose   (tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_1d_long_decompose  (tbuffer, buffer, dimen, channels, limit)
 *
 *	bn_wlt_haar_1d_double_reconstruct(tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_1d_float_reconstruct (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_1d_char_reconstruct  (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_1d_short_reconstruct (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_1d_int_reconstruct   (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_1d_long_reconstruct  (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *
 *	bn_wlt_haar_2d_double_decompose(tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_2d_float_decompose (tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_2d_char_decompose  (tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_2d_short_decompose (tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_2d_int_decompose   (tbuffer, buffer, dimen, channels, limit)
 *	bn_wlt_haar_2d_long_decompose  (tbuffer, buffer, dimen, channels, limit)
 *
 *	bn_wlt_haar_2d_double_reconstruct(tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_float_reconstruct (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_char_reconstruct  (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_short_reconstruct (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_int_reconstruct   (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_long_reconstruct  (tbuffer, buffer, dimen, channels, sub_sz, limit)
 *
 *	bn_wlt_haar_2d_double_decompose2(tbuffer, buffer, width, height, channels, limit)
 *	bn_wlt_haar_2d_float_decompose2 (tbuffer, buffer, width, height, channels, limit)
 *	bn_wlt_haar_2d_char_decompose2  (tbuffer, buffer, width, height, channels, limit)
 *	bn_wlt_haar_2d_short_decompose2 (tbuffer, buffer, width, height, channels, limit)
 *	bn_wlt_haar_2d_int_decompose2   (tbuffer, buffer, width, height, channels, limit)
 *	bn_wlt_haar_2d_long_decompose2  (tbuffer, buffer, width, height, channels, limit)
 *
 *	bn_wlt_haar_2d_double_reconstruct2(tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_float_reconstruct2 (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_char_reconstruct2  (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_short_reconstruct2 (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_int_reconstruct2   (tbuffer, buffer, width, height, channels, sub_sz, limit)
 *	bn_wlt_haar_2d_long_reconstruct2  (tbuffer, buffer, width, height, channels, sub_sz, limit)
d93 5
a97 5
 *	tbuffer     a temporary data buffer 1/2 as large as "buffer". See (1) below.
 *	buffer      pointer to the data to be decomposed
 *	dimen    the number of samples in the data buffer 
 *	channels the number of values per sample
 *	limit    the extent of the decomposition
d149 1
@


14.5
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a143 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			W A V E L E T . C
d4 18
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d663 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d129 1
a129 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

