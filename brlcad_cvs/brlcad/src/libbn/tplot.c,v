head	14.15;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.5
	rel-7-10-2:14.13
	rel-7-10-0:14.13
	rel-7-8-4:14.10
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.6
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.7
	rel-7-6-2:14.6
	rel-7-6-branch:14.6.0.4
	rel-7-6-0:14.6
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.2
	bobWinPort:14.6.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.15
date	2007.09.15.16.23.07;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.08.30.18.44.27;	author erikgreenwald;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.09.05.04.19.55;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.12.14.00.23.36;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.08.12.22.28.35;	author lbutler;	state Exp;
branches
	14.6.4.1;
next	14.5;

14.5
date	2005.01.30.20.30.45;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.01.52.15;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.30;	author morrison;	state Exp;
branches;
next	;

14.6.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                         T P L O T . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup plot */
/** @@{ */
/** @@file tplot.c
 *
 * @@brief
 *	This routine is designed to simplify the creation of
 *  X,Y plots for user.
 *
 *			George W. Hartwig, Jr.
 *				16 March 1979
 *
 *	This routine is designed to simplify the creation of
 * X,Y plots for user. The user need only furnish this program
 * the data arrays to be plotted, the lengths of the respective
 * axis, titles for the axis, and the point on the page corresponding
 * to data point (0,0).
 *	The program will then do everything else required to make
 * the plot appear on the user's terminal including scaling of the
 * data, centering of the titles and positioning on the page.
 *
 * where
 * -	int xp,yp	page point corresponding to (0,0) of the data
 * -	int xl,yl	lengths of the x and y axis, respectively
 * -	char xtitle[], ytitle[]	titles for the axis
 * -	float x[], y[]	the floating point data arrays
 * -	int n		the number of points in the data arrays
 *
 *		R E V I S I O N  H I S T O R Y
 *
 *	WHO	WHEN		WHAT
 *	GWH	5/21/79		Modified ftoa so that nos. < e-15
 *				map to zero.
 *	GWH	6/29/79		Changed the axis drawing loops to
 *				prevent a one tic mark overrun.
 *	GWH	7/10/79		Subtracted one from n to allow for the
 *				fact that fortran arrays start at one
 *				and not zero as with c.
 */

#include "common.h"

/* system headers */
#include <stdio.h>
#include <string.h>
#include <math.h>

/* interface headers */
#include "machine.h"
#include "vmath.h"
#include "plot3.h"


#define TIC		100
#define REF_WIDTH	0.857143
#define NUM_DISTANCE	250
#define LAB_LNGTH	860

void tp_ftoa(float x, char *s);
void tp_fixsc(float *x, int npts, float size, float *xs, float *xmin, float *xmax, float *dx);
void tp_sep(float x, float *coef, int *ex);
double tp_ipow(double x, int n);


/**
 * @@param fp file pointer
 * @@param xtitle title for the x axis
 * @@param ytitle title for the y axis
 * @@param xp is the x page point desired to be (0,0) for plot
 * @@param yp is the y page point desired to be (0,0) for plot
 * @@param xl is the length of the x axis
 * @@param yl is the length of the y axis
 * @@param n is the number of points
 * @@param cscale is the character scale factor
 * @@param x the x data
 * @@param y the y data
 */
void
tp_plot(FILE *fp,
	int xp,
	int yp,
	int xl,
	int yl,
	char *xtitle,
	char *ytitle,
	float *x,
	float *y,
	int n,
	double cscale)
{
    int  ddx, ddy, xend, yend, xpen, ypen;
    float fxl, fyl, xs, ys, xmin, xmax, ymin, ymax, dx, dy;
    float lab;
    int xtics, ytics, i, xtl, ytl, j;
    int ix[101], iy[101], isave;
    char str[32];

    if( xl == 0 ){
	j = 0;
	goto loop;
    }
    fxl = xl/1000.0;
    fyl = yl/1000.0;
    n -= 1; /* allow for the fact that fortran starts arrays at 1 */
    tp_fixsc (x, n, fxl, &xs, &xmin, &xmax, &dx);
    tp_fixsc (y, n, fyl, &ys, &ymin, &ymax, &dy);
    ddx = dx*xs;
    ddy = dy*ys;
    xtics = LAB_LNGTH / ddx + 1.0;
    ytics = 500/ddy + 1.0;
    xend = xl+xp;
    xpen = xp;

    pl_move(fp, xpen, yp-TIC);
    pl_cont(fp, xpen,yp);

    /* label first tic */
    lab = xmin;
    snprintf( str, 32, "%3.3g", xmin );
    tp_2symbol( fp, str, (double)(xpen-171),(double)(yp-TIC-NUM_DISTANCE), cscale, 0.0);

    i = 0;
    while((xpen+ddx)<=xend){
	i++;
	xpen += ddx;
	pl_line( fp, xpen, yp, xpen, yp-TIC );
	/* while here label this tic mark if no overlapping will occur */
	lab += dx;
	/* need if test here to check for overlap */
	if( (i%xtics) == 0){
	    snprintf( str, 32, "%3.3g", lab );
	    tp_2symbol( fp, str, (double)(xpen-171), (double)(yp-TIC-NUM_DISTANCE), cscale, 0.0);
	}
    }

    /* insert axis label here */
    xtl = xp+(xl - strlen(xtitle)*cscale)/2;
    ytl = yp - 8 * cscale;
    tp_2symbol( fp, xtitle,(double)xtl, (double)ytl, 100.0, 0.0);
    yend = yl+yp;
    ypen= yp;
    pl_line( fp, xp-TIC, ypen, xp, ypen );

    /* draw first y label */
    lab = ymin;
    snprintf( str, 32, "%3.3g", lab );
    tp_2symbol( fp,str, (double)(xp-TIC-LAB_LNGTH-NUM_DISTANCE), (double)ypen, cscale, 0.0);

    i=0;
    while((ypen+ddy)<=yend){
	i++;
	ypen += ddy;
	pl_line( fp, xp, ypen, xp-TIC, ypen );
	/* label the y-axis now, nicely */
	lab += dy;
	if(( i%ytics) ==0){
	    snprintf( str, 32, "%3.3g", lab );
	    tp_2symbol( fp,str, (double)(xp-TIC-LAB_LNGTH-NUM_DISTANCE), (double)ypen, cscale, 0.0);
	}
    }

    /* insert y-axis title here */
    xtl= xp-1500;
    ytl= yp + (yl - strlen(ytitle)*cscale)/2 ;
    tp_2symbol( fp,ytitle,(double)xtl,(double)ytl,100.0,90.0);

    /* now at long last plot the data */
    j = 0;

 loop:
    if( n <= 100 ) {
	isave = n-1;
    } else {
	isave = 100;
	n -= 101;
    }

    if(j == 0){
	ix[0] = (x[j] - xmin)*xs + xp;
	iy[0] = (y[j] - ymin)*ys + yp;
	j++;
    } else {
	ix[0] = (x[j-1] - xmin)*xs + xp;
	iy[0] = (y[j-1] - ymin)*ys + yp;
    }

    i = 1;
    while( i <= isave ){
	ix[i] = (x[j] - xmin)*xs + xp;
	iy[i] = (y[j] - ymin)*ys + yp;
	i++;
	j++;
    }
    tp_i2list( fp, ix, iy, isave+1 );
    if( isave == 100 ) {
	goto loop;
    }
}


/**			T P _ F T O A
 * @@brief
 * This routine converts a floating point number into a string
 * of ascii characters of the form "sX.XXXesXX". The string is
 * null terminated.
 */
void
tp_ftoa(float x, char *s)
{
    int ex,tmp;
    float coef;
    char esgn, nsgn;
    char i;

    tp_sep(x, &coef, &ex);
    if( ex < -15 ){
	ex = 0;
	*s++ = '0';
	*s++ = '.';
	*s++ = '0';
	*s++ = '0';
	*s++ = '0';
	*s++ = 'e';
	*s++ = '+';
	*s++ = '0';
	*s++ = '0';
	*s   =  0 ;
	return;
    }

    if(ex < 0){
	esgn = '-';
	ex = -ex;
    } else {
	esgn = '+';
    }

    if( coef < 0.0){
	nsgn = '-';
	coef = -coef;
    } else {
	nsgn = ' ';
    }
    *s++ = nsgn;

    /* load the first numeral and the decimal point */
    tmp = coef;
    *s++ = tmp + '0';
    coef = (coef - tmp)*10.0;
    *s++ = '.';

    /* now do the three after the decimal */
    for( i=1 ; i<=3 ; ++i){
	tmp = coef;
	coef = (coef - tmp)*10.0;
	*s++ = tmp + '0';
    }

    /* put the e in */
    *s++ = 'e';

    /* the sign for the exponent */
    *s++ = esgn;

    /* and the exponent */
    if( ex < 0)
	ex = -ex;

    if( ex < 10 ){
	*s++ = '0';
	*s++ = ex + '0';
    } else{
	tmp = ex/10;
	*s++ = tmp + '0';
	ex = ex - tmp*10;
	*s++ = ex +'0';
    }
    /* add a null byte terminator */
    *s = 0;
}


/**			T P _ F I X S C
 *
 *   tp_fixsc is a scaling routine intended to be used in conjunction
 *   with plotting routines. What tp_fixsc does is scale the user supplied
 *   data so that it fits on a specified axis and has 'nice' numbers
 *   for labels.
 *
 *   Calling sequence
 *
 *   tp_fixsc(x, npts, size, xs, xmin, xmax, dx)
 *   where
 *
 * @@param	x[]	the data array to be scaled
 * @@param	npts	the number of elements in x[]
 * @@param	size	the length into which x[] is supposed to be fitted
 * 			(in inches)
 * @@param	xs	the returned scale facter to integer space
 * @@param	xmin	the new minimum value for the data array (a returned
 *			value)
 * @@param	xmax	the new maximum value for the data array (a returned
 *			value)
 * @@param	dx	the value in data units between tic marks (a returned
 *			value)
 *
 */
void
tp_fixsc(float *x,
	 int npts,
	 float size,
	 float *xs,
	 float *xmin,
	 float *xmax,
	 float *dx)
{
    float txmi, txma, coef, delta, diff;
    int i, ex;

    txmi=txma=x[0];
    i = 0;
    while( i <= npts ) {
	if( x[i] < txmi)
	    txmi = x[i];
	if( x[i] > txma)
	    txma = x[i];
	i++;
    }

    diff = txma - txmi;
    if( diff < .000001 )
	diff = .000001;

    tp_sep (diff, &coef, &ex);
    if( coef < 2.0 )
	delta = .1;
    else if ( coef < 4.0 )
	delta = .2;
    else
	delta = .5;

    i = 0;
    if(ex < 0 ){
	ex = -ex;
	i=12;
    }

    delta *= tp_ipow(10.0,ex);
    if(i == 12)
	delta = 1.0/delta;
    *dx = delta;

    i = (fabs(txmi)/delta);
    *xmin = i*delta;
    if( txmi < 0.0 )
	*xmin = -(*xmin+delta);

    i = (fabs(txma)/delta);
    *xmax = i*delta;
    if( txma < 0.0)
	*xmax = - *xmax;
    else
	*xmax = *xmax+delta;
    *xs = 1000.*size/(*xmax - *xmin);
}


/**			T P _ S E P
 *@@brief
 *  tp_sep() divides a floating point number into a coefficient
 *  and an exponent. works in base ten.
 */
void
tp_sep(float x, float *coef, int *ex)
{
    int i, isv;
    float xx;

    isv = 1;
    if(x < 0.0 ){
	isv = -1;
	x = -x;
    }

    if( x > 1.0 ){
	xx = x;
	*ex = 0;
	*coef = 0.0;

	if ( xx < 10.0){
	    *coef = xx*isv;
	    return;
	}

	for ( i=1 ; i < 39 ; ++i){
	    *ex += 1;
	    xx = xx/10.0;
	    if( xx < 10.0 )
		break;
	}
	*coef = xx*isv;
	return;
    } else{
	xx = x;
	*ex = 0;
	*coef = 0.0;
	for ( i=1 ; i<39 ; ++i){
	    *ex -= 1;
	    xx *= 10.0;
	    if( xx >= 1.0 )
		break;
	}
	*coef = xx*isv;
	return;
    }
}


/**			T P _ I P O W
 *@@brief
 *  tp_ipow() raises a floating point number to a positve integer
 *  power.
 *  XXX Horribly inefficient!
 */
double tp_ipow (double x, int n)
{
    return(n>0?x*tp_ipow(x,n-1):1);
}


/**
 *	FORTRAN Interface Entry
 */
void
PL_FORTRAN(fplot, FPLOT)(FILE **fp, int *xp, int *yp, int *xl, int *yl, char *xtitle, char *ytitle, float *x, float *y, int *n, float *cscale)
{
    tp_plot(*fp, *xp, *yp, *xl, *yl, xtitle, ytitle, x, y, *n, *cscale);
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@various minor fixes from "flawfinder" and compiler warnings
@
text
@a58 1

d63 1
a63 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d142 1
a142 1
    sprintf( str, "%3.3g", xmin );
d154 1
a154 1
	    sprintf( str, "%3.3g", lab );
d169 1
a169 1
    sprintf( str, "%3.3g", lab );
d180 1
a180 1
	    sprintf( str, "%3.3g", lab );
@


14.12
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.11
log
@update copyright to 2007
@
text
@d21 2
a22 2
/** \addtogroup plot */
/*@@{*/
d24 2
a25 1
 *@@brief
d464 1
a464 1
/*@@}*/
@


14.10
log
@Doxygen comment formatting
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.9
log
@update copyright to 2006
@
text
@d21 1
a21 1
/** \addtogroup libbn */
d24 1
a24 1
 *
d41 5
a45 5
 *	int xp,yp	page point corresponding to (0,0) of the data
 *	int xl,yl	lengths of the x and y axis, respectively
 *	char xtitle[], ytitle[]	titles for the axis
 *	float x[], y[]	the floating point data arrays
 *	int n		the number of points in the data arrays
d58 1
a58 1
/*@@}*/
d89 11
a99 6
 * xp is the x page point desired to be (0,0) for plot
 * yp is the y page point desired to be (0,0) for plot
 * xl is the length of the x axis
 * yl is the length of the y axis
 * n is the number of points
 * cscale is the character scale factor
d102 11
a112 1
tp_plot(FILE *fp, int xp, int yp, int xl, int yl, char *xtitle, char *ytitle, float *x, float *y, int n, double cscale)
d225 1
a225 1
 *
d318 6
a323 6
 *	float x[]	the data array to be scaled
 *	int npts	the number of elements in x[]
 *	float size	the length into which x[] is supposed to be fitted
 *			(in inches)
 *	float *xs	the returned scale facter to integer space
 *	float *xmin	the new minimum value for the data array (a returned
d325 1
a325 1
 *	float *xmax	the new maximum value for the data array (a returned
d327 1
a327 1
 *	float *dx	the value in data units between tic marks (a returned
d332 7
a338 1
tp_fixsc(float *x, int npts, float size, float *xs, float *xmin, float *xmax, float *dx)
d392 1
a392 1
 *
d443 1
a443 1
 *
d463 1
@


14.8
log
@ansify PL_FORTRAN, ws, style consistency, commentification.
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.7
log
@trailing ws
@
text
@a20 1

a22 1

d24 1
a27 1
 *
a30 1
 *
a39 1
 *
a46 1
 *
d59 1
d62 1
a62 2


d65 3
a67 1
#include <string.h>
d70 2
d76 1
d82 5
a86 3
void	tp_ftoa(float x, char *s);
void	tp_fixsc(float *x, int npts, float size, float *xs, float *xmin, float *xmax, float *dx), tp_sep(float x, float *coef, int *ex);
double	tp_ipow(double x, int n);
d88 8
a97 11

   	   		/* page point desired to be (0,0) for plot */

   	   		/* lengths of x,y axis */





   	  		/* number of points */
      	       		/* character scale factor */
d99 6
a104 69
	int  ddx, ddy, xend, yend, xpen, ypen;
	float fxl, fyl, xs, ys, xmin, xmax, ymin, ymax, dx, dy;
	float lab;
	int xtics, ytics, i, xtl, ytl, j;
	int ix[101], iy[101], isave;
	char str[32];

	if( xl == 0 ){
		j = 0;
		goto loop;
	}
	fxl = xl/1000.0;
	fyl = yl/1000.0;
	n -= 1; /* allow for the fact that fortran starts arrays at 1 */
	tp_fixsc (x, n, fxl, &xs, &xmin, &xmax, &dx);
	tp_fixsc (y, n, fyl, &ys, &ymin, &ymax, &dy);
	ddx = dx*xs;
	ddy = dy*ys;
	xtics = LAB_LNGTH / ddx + 1.0;
	ytics = 500/ddy + 1.0;
	xend = xl+xp;
	xpen = xp;

	pl_move(fp, xpen, yp-TIC);
	pl_cont(fp, xpen,yp);

	/* label first tic */
	lab = xmin;
	sprintf( str, "%3.3g", xmin );
	tp_2symbol( fp, str, (double)(xpen-171),(double)(yp-TIC-NUM_DISTANCE), cscale, 0.0);
	i = 0;
	while((xpen+ddx)<=xend){
		i++;
		xpen += ddx;
		pl_line( fp, xpen, yp, xpen, yp-TIC );
		/* while here label this tic mark if no overlapping will occur */
		lab += dx;
		/* need if test here to check for overlap */
		if( (i%xtics) == 0){
			sprintf( str, "%3.3g", lab );
			tp_2symbol( fp, str, (double)(xpen-171), (double)(yp-TIC-NUM_DISTANCE), cscale, 0.0);
		}
	}

	/* insert axis label here */
	xtl = xp+(xl - strlen(xtitle)*cscale)/2;
	ytl = yp - 8 * cscale;
	tp_2symbol( fp, xtitle,(double)xtl, (double)ytl, 100.0, 0.0);
	yend = yl+yp;
	ypen= yp;
	pl_line( fp, xp-TIC, ypen, xp, ypen );

	/* draw first y label */
	lab = ymin;
	sprintf( str, "%3.3g", lab );
	tp_2symbol( fp,str, (double)(xp-TIC-LAB_LNGTH-NUM_DISTANCE), (double)ypen, cscale, 0.0);

	i=0;
	while((ypen+ddy)<=yend){
		i++;
		ypen += ddy;
		pl_line( fp, xp, ypen, xp-TIC, ypen );
		/* label the y-axis now, nicely */
		lab += dy;
		if(( i%ytics) ==0){
			sprintf( str, "%3.3g", lab );
			tp_2symbol( fp,str, (double)(xp-TIC-LAB_LNGTH-NUM_DISTANCE), (double)ypen, cscale, 0.0);
		}
	}
d106 1
a106 6
	/* insert y-axis title here */
	xtl= xp-1500;
	ytl= yp + (yl - strlen(ytitle)*cscale)/2 ;
	tp_2symbol( fp,ytitle,(double)xtl,(double)ytl,100.0,90.0);

	/* now at long last plot the data */
d108 98
a205 26
loop:
	if( n <= 100 )
		isave = n-1;
	else{
		isave = 100;
		n -= 101;
	}
	if(j == 0){
		ix[0] = (x[j] - xmin)*xs + xp;
		iy[0] = (y[j] - ymin)*ys + yp;
		j++;
	}
	else{
		ix[0] = (x[j-1] - xmin)*xs + xp;
		iy[0] = (y[j-1] - ymin)*ys + yp;
	}
	i = 1;
	while( i <= isave ){
		ix[i] = (x[j] - xmin)*xs + xp;
		iy[i] = (y[j] - ymin)*ys + yp;
		i++;
		j++;
	}
	tp_i2list( fp, ix, iy, isave+1 );
	if( isave == 100 )
		goto loop;
d208 2
a209 6
/*
 *			T P _ F T O A
 *
 *
 *			George W Hartwig, Jr.
 *			16 March 1979
d218 44
a261 33
	int ex,tmp;
	float coef;
	char esgn, nsgn;
	char i;
	tp_sep(x, &coef, &ex);
	if( ex < -15 ){
		ex = 0;
		*s++ = '0';
		*s++ = '.';
		*s++ = '0';
		*s++ = '0';
		*s++ = '0';
		*s++ = 'e';
		*s++ = '+';
		*s++ = '0';
		*s++ = '0';
		*s   =  0 ;
		return;
	}
	if(ex < 0){
		esgn = '-';
		ex = -ex;
	}
	else
		esgn = '+';
	if( coef < 0.0){
		nsgn = '-';
		coef = -coef;
	}
	else
		nsgn = ' ';
	*s++ = nsgn;
	/* load the first numeral and the decimal point */
d263 1
d265 7
a271 12
	coef = (coef - tmp)*10.0;
	*s++ = '.';
	/* now do the three after the decimal */
	for( i=1 ; i<=3 ; ++i){
		tmp = coef;
		coef = (coef - tmp)*10.0;
		*s++ = tmp + '0';
	}
	/* put the e in */
	*s++ = 'e';
	/* the sign for the exponent */
	*s++ = esgn;
d273 15
a287 15
	/* and the exponent */
	if( ex < 0)
		ex = -ex;
	if( ex < 10 ){
		*s++ = '0';
		*s++ = ex + '0';
	}
	else{
		tmp = ex/10;
		*s++ = tmp + '0';
		ex = ex - tmp*10;
		*s++ = ex +'0';
	}
	/* add a null byte terminator */
	*s = 0;
d289 3
a291 5
/*
 *			T P _ F I X S C
 *
 *		written by George Hartwig
 *			6 March 1979
d319 48
a366 41
	float txmi, txma, coef, delta, diff;
	int i, ex;
	txmi=txma=x[0];
	i = 0;
	while( i <= npts ) {
		if( x[i] < txmi)
			txmi = x[i];
		if( x[i] > txma)
			txma = x[i];
		i++;
	}
	diff = txma - txmi;
	if( diff < .000001 )
		diff = .000001;
	tp_sep (diff, &coef, &ex);
	if( coef < 2.0 )
		delta = .1;
	else if ( coef < 4.0 )
		delta = .2;
	else
	    delta = .5;
	i = 0;
	if(ex < 0 ){
		ex = -ex;
		i=12;
	}
	delta *= tp_ipow(10.0,ex);
	if(i == 12)
		delta = 1.0/delta;
	*dx = delta;
	i = (fabs(txmi)/delta);
	*xmin = i*delta;
	if( txmi < 0.0 )
		*xmin = -(*xmin+delta);
	i = (fabs(txma)/delta);
	*xmax = i*delta;
	if( txma < 0.0)
		*xmax = - *xmax;
	else
	    *xmax = *xmax+delta;
	*xs = 1000.*size/(*xmax - *xmin);
d369 2
a370 2
/*
 *			T P _ S E P
d378 40
a417 37
	int i, isv;
	float xx;
	isv = 1;
	if(x < 0.0 ){
		isv = -1;
		x = -x;
	}
	if( x > 1.0 ){
		xx = x;
		*ex = 0;
		*coef = 0.0;
		if ( xx < 10.0){
			*coef = xx*isv;
			return;
		}
		for ( i=1 ; i < 39 ; ++i){
			*ex += 1;
			xx = xx/10.0;
			if( xx < 10.0 )
				break;
		}
		*coef = xx*isv;
		return;
	}
	else{
		xx = x;
		*ex = 0;
		*coef = 0.0;
		for ( i=1 ; i<39 ; ++i){
			*ex -= 1;
			xx *= 10.0;
			if( xx >= 1.0 )
				break;
		}
		*coef = xx*isv;
		return;
	}
d420 2
a421 2
/*
 *			T P _ I P O W
d429 1
a429 1
	return(n>0?x*tp_ipow(x,n-1):1);
d433 1
a433 1
/*
d437 1
a437 12
PL_FORTRAN(fplot, FPLOT)(fp, xp, yp, xl, yl, xtitle, ytitle, x, y, n, cscale )
FILE	**fp;
int	*xp;
int	*yp;
int	*xl;
int	*yl;
char	*xtitle;
char	*ytitle;
float	*x;
float	*y;
int	*n;
float	*cscale;
d439 1
a439 1
	tp_plot(*fp, *xp, *yp, *xl, *yl, xtitle, ytitle, x, y, *n, *cscale);
@


14.6
log
@Doxygen changes
@
text
@d26 1
a26 1
 *	This routine is designed to simplify the creation of 
d34 1
a34 1
 *	This routine is designed to simplify the creation of 
d40 1
a40 1
 * the plot appear on the user's terminal including scaling of the 
d88 1
a88 1
    	    
d90 1
a90 1
   	   
d92 5
a96 5
   	   
    	         
    	         
     	    
     	    
@


14.6.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d26 1
a26 1
 *	This routine is designed to simplify the creation of
d34 1
a34 1
 *	This routine is designed to simplify the creation of
d40 1
a40 1
 * the plot appear on the user's terminal including scaling of the
d88 1
a88 1

d90 1
a90 1

d92 5
a96 5





@


14.5
log
@update copyright to 2005
@
text
@d21 4
d26 2
a27 1
 *			T P _ P L O T
d63 1
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 5
a5 1
/*
d7 15
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d413 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d39 1
a39 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

