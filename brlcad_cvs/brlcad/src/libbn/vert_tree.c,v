head	14.19;
access;
symbols
	rel-7-10-4:14.18
	STABLE:14.18.0.2
	stable-branch:14.8
	rel-7-10-2:14.17
	rel-7-10-0:14.17
	rel-7-8-4:14.13
	rel-7-8-2:14.12
	rel-7-8-0:14.12
	trimnurbs-branch:14.12.0.2
	help:14.12
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.19
date	2007.09.15.16.23.07;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.08.30.18.44.27;	author erikgreenwald;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.27.01.41.36;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.09.07.01.19.17;	author lbutler;	state Exp;
branches;
next	14.12;

14.12
date	2006.02.27.07.50.00;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.28.35;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.01.30.20.30.45;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.32.30;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.42;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.32;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.01.52.15;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.57;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.24.02;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.30;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                     V E R T _ T R E E . C
 * BRL-CAD
 *
 * Copyright (c) 2002-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup vtree */
/** @@{ */
/** @@file vert_tree.c
 *
 * @@brief
 * Routines to manage a binary search tree of vertices.
 *
 * The actual vertices are stored in an array
 * for convenient use by routines such as "mk_bot".
 * The binary search tree stores indices into the array.
 *
 * @@author
 *	John R. Anderson
 *
 * @@par  Source -
 *	The U. S. Army Research Laboratory
 * @@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"


/**
 * Structure to make vertex searching fast.
 *
 * Each leaf represents a vertex, and has an index into
 *   the vertices array ("the_array")
 *
 * Each node is a cutting plane at the "cut_val" on
 *   the "coord" (0, 1, or 2) axis.
 *
 * All vertices with "coord" value less than the "cut_val" are in the "lower"
 * subtree, others are in the "higher".
 */
union vert_tree {
	char type;		/* type - leaf or node */
	struct vert_leaf {
		char type;
		int index;	/* index into the array */
	} vleaf;
	struct vert_node {
		char type;
		double cut_val; /* cutting value */
		int coord;	/* cutting coordinate */
		union vert_tree *higher, *lower;	/* subtrees */
	} vnode;
};

/* types for the above "vert_tree" */
#define VERT_LEAF	'l'
#define VERT_NODE	'n'


/**		C R E A T E _ V E R T _ T R E E
 *@@brief
 *	routine to create a vertex tree.
 *
 *	Possible refinements include specifying an initial size
 */
struct vert_root *
create_vert_tree()
{
	struct vert_root *tree;

	tree = (struct vert_root *)bu_calloc( 1, sizeof( struct vert_root ), "vert_tree_root" );
	tree->magic = VERT_TREE_MAGIC;
	tree->tree_type = TREE_TYPE_VERTS;
	tree->the_tree = (union vert_tree *)NULL;
	tree->curr_vert = 0;
	tree->max_vert = VERT_BLOCK;
	tree->the_array = (fastf_t *)bu_malloc( tree->max_vert * 3 * sizeof( fastf_t ), "vert tree array" );

	return( tree );
}

/**		C R E A T E _ V E R T _ T R E E _ W _ N O R M S
 *@@brief
 *	routine to create a vertex tree.
 *
 *	Possible refinements include specifying an initial size
 */
struct vert_root *
create_vert_tree_w_norms()
{
	struct vert_root *tree;

	tree = (struct vert_root *)bu_calloc( 1, sizeof( struct vert_root ), "vert_tree_root" );
	tree->magic = VERT_TREE_MAGIC;
	tree->tree_type = TREE_TYPE_VERTS_AND_NORMS;
	tree->the_tree = (union vert_tree *)NULL;
	tree->curr_vert = 0;
	tree->max_vert = VERT_BLOCK;
	tree->the_array = (fastf_t *)bu_malloc( tree->max_vert * 6 * sizeof( fastf_t ), "vert tree array" );

	return( tree );
}

/**		C L E A N _ V E R T_ T R E E _ R E C U R S E
 *@@brief
 *	static recursion routine used by "clean_vert_tree"
 */
static void
clean_vert_tree_recurse( union vert_tree *ptr )
{
	if( ptr->type == VERT_NODE ) {
		clean_vert_tree_recurse( ptr->vnode.higher );
		clean_vert_tree_recurse( ptr->vnode.lower );
	}

	bu_free( (char *)ptr, "vert_tree" );

}

/**		C L E A N _ V E R T _ T R E E
 *@@brief
 *	Routine to free the binary search tree and reset the current number of vertices.
 *	The vertex array is left untouched, for re-use later.
 */
void
clean_vert_tree( struct vert_root *tree_root )
{
	BN_CK_VERT_TREE( tree_root );

	if( !tree_root->the_tree ) return;

	clean_vert_tree_recurse( tree_root->the_tree );
	tree_root->the_tree = (union vert_tree *)NULL;
	tree_root->curr_vert = 0;
}


/**		F R E E _ V E R T_ T R E E_ R E C U R S E
 *@@brief
 *	Static recursive routine used by "free_vert_tree"
 */
static void
free_vert_tree_recurse( union vert_tree *ptr )
{
	if( ptr->type == VERT_NODE ) {
		free_vert_tree_recurse( ptr->vnode.higher );
		free_vert_tree_recurse( ptr->vnode.lower );
	}

	bu_free( (char *)ptr, "vert_tree" );

}

/**		F R E E _ V E R T_ T R E E
 *@@brief
 *	Routine to free a vertex tree and all associated dynamic memory
 */
void
free_vert_tree( struct vert_root *vert_root )
{
	union vert_tree *ptr;

	if( !vert_root )
		return;

	BN_CK_VERT_TREE( vert_root );

	ptr = vert_root->the_tree;
	if( !ptr )
		return;

	free_vert_tree_recurse( ptr );

	if( vert_root->the_array ) {
		bu_free( (char *)vert_root->the_array, "vertex array" );
	}

	vert_root->the_tree = (union vert_tree *)NULL;
	vert_root->the_array = (fastf_t *)NULL;
	vert_root->curr_vert = 0;
	vert_root->max_vert = 0;
}

/**		A D D _ V E R T
 *@@brief
 *	Routine to add a vertex to the current list of part vertices.
 *	The array is re-alloc'd if needed.
 *	Returns index into the array of vertices where this vertex is stored
 */
int
Add_vert( double x, double y, double z, struct vert_root *vert_root, fastf_t local_tol_sq )
{
	union vert_tree *ptr, *prev=NULL, *new_leaf, *new_node;
	vect_t diff = {0.0, 0.0, 0.0};
	vect_t vertex;

	BN_CK_VERT_TREE( vert_root );

	if( vert_root->tree_type != TREE_TYPE_VERTS ) {
		bu_bomb( "Error: Add_vert() called for a tree containing vertices and normals\n" );
	}

	VSET( vertex, x, y, z );

	/* look for this vertex already in the list */
	ptr = vert_root->the_tree;
	while( ptr ) {
		if( ptr->type == VERT_NODE ) {
			prev = ptr;
			if( vertex[ptr->vnode.coord] >= ptr->vnode.cut_val ) {
				ptr = ptr->vnode.higher;
			} else {
				ptr = ptr->vnode.lower;
			}
		} else {
			int ij;

			ij = ptr->vleaf.index*3;
			diff[0] = fabs( vertex[0] - vert_root->the_array[ij] );
			diff[1] = fabs( vertex[1] - vert_root->the_array[ij+1] );
			diff[2] = fabs( vertex[2] - vert_root->the_array[ij+2] );
			if( (diff[0]*diff[0] + diff[1]*diff[1] + diff[2]*diff[2]) <= local_tol_sq ) {
				/* close enough, use this vertex again */
				return( ptr->vleaf.index );
			}
			break;
		}
	}

	/* add this vertex to the list */
	if( vert_root->curr_vert >= vert_root->max_vert ) {
		/* allocate more memory for vertices */
		vert_root->max_vert += VERT_BLOCK;

		vert_root->the_array = (fastf_t *)bu_realloc( vert_root->the_array, sizeof( fastf_t ) * vert_root->max_vert * 3,
						    "vert_root->the_array" );
	}

	VMOVE( &vert_root->the_array[vert_root->curr_vert*3], vertex );

	/* add to the tree also */
	new_leaf = (union vert_tree *)bu_malloc( sizeof( union vert_tree ), "new_leaf" );
	new_leaf->vleaf.type = VERT_LEAF;
	new_leaf->vleaf.index = vert_root->curr_vert++;
	if( !vert_root->the_tree ) {
		/* first vertex, it becomes the root */
		vert_root->the_tree = new_leaf;
	} else if( ptr && ptr->type == VERT_LEAF ) {
		/* search above ended at a leaf, need to add a node above this leaf and the new leaf */
		new_node = (union vert_tree *)bu_malloc( sizeof( union vert_tree ), "new_node" );
		new_node->vnode.type = VERT_NODE;

		/* select the cutting coord based on the biggest difference */
		if( diff[0] >= diff[1] && diff[0] >= diff[2] ) {
			new_node->vnode.coord = 0;
		} else if( diff[1] >= diff[2] && diff[1] >= diff[0] ) {
			new_node->vnode.coord = 1;
		} else if( diff[2] >= diff[1] && diff[2] >= diff[0] ) {
			new_node->vnode.coord = 2;
		}

		/* set the cut value to the mid value between the two vertices */
		new_node->vnode.cut_val = (vertex[new_node->vnode.coord] +
					   vert_root->the_array[ptr->vleaf.index * 3 + new_node->vnode.coord]) * 0.5;

		/* set the node "lower" nad "higher" pointers */
		if( vertex[new_node->vnode.coord] >=
		    vert_root->the_array[ptr->vleaf.index * 3 + new_node->vnode.coord] ) {
			new_node->vnode.higher = new_leaf;
			new_node->vnode.lower = ptr;
		} else {
			new_node->vnode.higher = ptr;
			new_node->vnode.lower = new_leaf;
		}

		if( ptr == vert_root->the_tree ) {
			/* if the above search ended at the root, redefine the root */
			vert_root->the_tree =  new_node;
		} else {
			/* set the previous node to point to our new one */
			if( prev->vnode.higher == ptr ) {
				prev->vnode.higher = new_node;
			} else {
				prev->vnode.lower = new_node;
			}
		}
	} else if( ptr && ptr->type == VERT_NODE ) {
		/* above search ended at a node, just add the new leaf */
		prev = ptr;
		if( vertex[prev->vnode.coord] >= prev->vnode.cut_val ) {
			if( prev->vnode.higher ) {
			    bu_bomb("higher vertex node already exists in Add_vert()?\n");
			}
			prev->vnode.higher = new_leaf;
		} else {
			if( prev->vnode.lower ) {
			    bu_bomb("lower vertex node already exists in Add_vert()?\n");
			}
			prev->vnode.lower = new_leaf;
		}
	} else {
		fprintf( stderr, "*********ERROR********\n" );
	}

	/* return the index into the vertex array */
	return( new_leaf->vleaf.index );
}

/**		A D D _ V E R T _ A N D _ N O R M
 *@@brief
 *	Routine to add a vertex and a normal to the current list of part vertices.
 *	The array is re-alloc'd if needed.
 *	Returns index into the array of vertices where this vertex and normal is stored
 */
int
Add_vert_and_norm( double x, double y, double z, double nx, double ny, double nz, struct vert_root *vert_root, fastf_t local_tol_sq )
{
	union vert_tree *ptr, *prev=NULL, *new_leaf, *new_node;
	fastf_t diff[6];
	fastf_t vertex[6];
	double d1_sq=0.0, d2_sq=0.0;

	BN_CK_VERT_TREE( vert_root );

	if( vert_root->tree_type != TREE_TYPE_VERTS_AND_NORMS ) {
		bu_bomb( "Error: Add_vert_and_norm() called for a tree containing just vertices\n" );
	}

	VSET( vertex, x, y, z );
	VSET( &vertex[3], nx, ny, nz );

	/* look for this vertex and normal already in the list */
	ptr = vert_root->the_tree;
	while( ptr ) {
		int i;

		if( ptr->type == VERT_NODE ) {
			prev = ptr;
			if( vertex[ptr->vnode.coord] >= ptr->vnode.cut_val ) {
				ptr = ptr->vnode.higher;
			} else {
				ptr = ptr->vnode.lower;
			}
		} else {
			int ij;

			ij = ptr->vleaf.index*6;
			for( i=0 ; i<6 ; i++ ) {
				diff[i] = fabs( vertex[i] - vert_root->the_array[ij+i] );
			}
			d1_sq = VDOT( diff, diff );
			d2_sq = VDOT( &diff[3], &diff[3] );
			if( d1_sq <= local_tol_sq && d2_sq <= 0.0001 ) {
				/* close enough, use this vertex and normal again */
				return( ptr->vleaf.index );
			}
			break;
		}
	}

	/* add this vertex and normal to the list */
	if( vert_root->curr_vert >= vert_root->max_vert ) {
		/* allocate more memory for vertices */
		vert_root->max_vert += VERT_BLOCK;

		vert_root->the_array = (fastf_t *)bu_realloc( vert_root->the_array,
					 sizeof( fastf_t ) * vert_root->max_vert * 6,
					 "vert_root->the_array" );
	}

	VMOVE( &vert_root->the_array[vert_root->curr_vert*6], vertex );
	VMOVE( &vert_root->the_array[vert_root->curr_vert*6+3], &vertex[3] );

	/* add to the tree also */
	new_leaf = (union vert_tree *)bu_malloc( sizeof( union vert_tree ), "new_leaf" );
	new_leaf->vleaf.type = VERT_LEAF;
	new_leaf->vleaf.index = vert_root->curr_vert++;
	if( !vert_root->the_tree ) {
		/* first vertex, it becomes the root */
		vert_root->the_tree = new_leaf;
	} else if( ptr && ptr->type == VERT_LEAF ) {
		fastf_t max;
		int i;

		/* search above ended at a leaf, need to add a node above this leaf and the new leaf */
		new_node = (union vert_tree *)bu_malloc( sizeof( union vert_tree ), "new_node" );
		new_node->vnode.type = VERT_NODE;

		/* select the cutting coord based on the biggest difference */
		if( d1_sq <= local_tol_sq ) {
			/* cut based on normal */
			new_node->vnode.coord = 3;
		} else {
			new_node->vnode.coord = 0;
		}
		max = diff[new_node->vnode.coord];
		for( i=new_node->vnode.coord+1 ; i<6 ; i++ ) {
			if( diff[i] > max ) {
				new_node->vnode.coord = i;
				max = diff[i];
			}
		}

		/* set the cut value to the mid value between the two vertices or normals */
		new_node->vnode.cut_val = (vertex[new_node->vnode.coord] +
					   vert_root->the_array[ptr->vleaf.index * 3 + new_node->vnode.coord]) * 0.5;

		/* set the node "lower" nad "higher" pointers */
		if( vertex[new_node->vnode.coord] >=
		    vert_root->the_array[ptr->vleaf.index * 3 + new_node->vnode.coord] ) {
			new_node->vnode.higher = new_leaf;
			new_node->vnode.lower = ptr;
		} else {
			new_node->vnode.higher = ptr;
			new_node->vnode.lower = new_leaf;
		}

		if( ptr == vert_root->the_tree ) {
			/* if the above search ended at the root, redefine the root */
			vert_root->the_tree =  new_node;
		} else {
			/* set the previous node to point to our new one */
			if( prev->vnode.higher == ptr ) {
				prev->vnode.higher = new_node;
			} else {
				prev->vnode.lower = new_node;
			}
		}
	} else if( ptr && ptr->type == VERT_NODE ) {
		/* above search ended at a node, just add the new leaf */
		prev = ptr;
		if( vertex[prev->vnode.coord] >= prev->vnode.cut_val ) {
			if( prev->vnode.higher ) {
			    bu_bomb("higher vertex node already exists in Add_vert_and_norm()?\n");
			}
			prev->vnode.higher = new_leaf;
		} else {
			if( prev->vnode.lower ) {
			    bu_bomb("lower vertex node already exists in Add_vert_and_norm()?\n");
			}
			prev->vnode.lower = new_leaf;
		}
	} else {
		fprintf( stderr, "*********ERROR********\n" );
	}

	/* return the index into the vertex array */
	return( new_leaf->vleaf.index );
}
/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@various minor fixes from "flawfinder" and compiler warnings
@
text
@a38 5

#ifndef lint
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.17 2007/01/27 01:41:36 brlcad Exp $ (ARL)";
#endif

d44 1
a44 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.17
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d41 1
a41 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.16 2007/01/23 01:13:33 brlcad Exp $ (ARL)";
d227 1
a227 1
	vect_t diff;
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d25 1
a25 1
 * Routines to manage a binary search tree of vertices. 
d28 1
a28 1
 * for convenient use by routines such as "mk_bot". 
d41 1
a41 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.15 2007/01/21 04:45:41 brlcad Exp $ (ARL)";
d65 1
a65 1
 * Each leaf represents a vertex, and has an index into 
d68 1
a68 1
 * Each node is a cutting plane at the "cut_val" on 
@


14.15
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d41 1
a41 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.14 2007/01/20 14:36:51 brlcad Exp $ (ARL)";
@


14.14
log
@update copyright to 2007
@
text
@d21 2
a22 3

/** \addtogroup vtree */
/*@@{*/
d24 1
d32 1
a32 1
 *  @@author
d37 1
a37 1
 *@@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
d42 1
a42 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.13 2006/09/07 01:19:17 lbutler Exp $ (ARL)";
d484 1
a484 1
/*@@}*/
@


14.13
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2002-2006 United States Government as represented by
d42 1
a42 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.12 2006/02/27 07:50:00 brlcad Exp $ (ARL)";
@


14.12
log
@bomb instead of exiting while processing the vertex nodes
@
text
@d22 1
a22 1
/** \addtogroup libbn */
d25 2
a26 3
 * Routines to manage a binary search tree of vertices. The actual vertices are stored in an array
 * for convenient use by routines such as "mk_bot". The binary search tree stores indices into
 * the array.
d28 5
a32 1
 *  Author -
d35 1
a35 1
 *  Source -
d37 1
a37 1
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
d39 1
a39 1
/*@@}*/
d42 1
a42 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.11 2006/01/18 06:46:16 brlcad Exp $ (ARL)";
d63 9
a71 3
/* structure to make vertex searching fast
 * Each leaf represents a vertex, and has an index into the vertices array ("the_array")
 * Each node is a cutting plane at the "cut_val" on the "coord" (0, 1, or 2) axis.
d94 3
a96 1
/*		C R E A T E _ V E R T _ T R E E
a97 1
 *	routine to create a vertex tree.
d116 3
a118 1
/*		C R E A T E _ V E R T _ T R E E _ W _ N O R M S
a119 1
 *	routine to create a vertex tree.
d138 2
a139 2
/*		C L E A N _ V E R T_ T R E E _ R E C U R S E
 *
d154 2
a155 2
/*		C L E A N _ V E R T _ T R E E
 *
d172 2
a173 2
/*		F R E E _ V E R T_ T R E E_ R E C U R S E
 *
d188 2
a189 2
/*		F R E E _ V E R T_ T R E E
 *
d218 2
a219 2
/*		A D D _ V E R T
 *
d343 2
a344 2
/*		A D D _ V E R T _ A N D _ N O R M
 *
d484 1
a484 1

@


14.11
log
@update copyright to 2006
@
text
@d39 1
a39 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.10 2005/10/23 04:44:32 brlcad Exp $ (ARL)";
d44 1
a44 2


d48 1
a48 1
#include <string.h>
d50 1
a50 1
#include <strings.h>
d315 1
a315 1
				exit(1);
d320 1
a320 1
				exit(1);
d457 1
a457 1
				exit(1);
d462 1
a462 1
				exit(1);
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2002-2005 United States Government as represented by
d39 1
a39 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.9 2005/08/12 22:28:35 lbutler Exp $ (ARL)";
@


14.9
log
@Doxygen changes
@
text
@d39 1
a39 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.8 2005/01/30 20:30:45 brlcad Exp $ (ARL)";
d130 1
a130 1
 *	static recursion routine used by "clean_vert_tree" 
d243 3
a245 3
			diff[0] = fabs( vertex[0] - vert_root->the_array[ij] ); 
			diff[1] = fabs( vertex[1] - vert_root->the_array[ij+1] ); 
			diff[2] = fabs( vertex[2] - vert_root->the_array[ij+2] ); 
d291 1
a291 1
		if( vertex[new_node->vnode.coord] >= 
d373 1
a373 1
				diff[i] = fabs( vertex[i] - vert_root->the_array[ij+i] ); 
d433 1
a433 1
		if( vertex[new_node->vnode.coord] >= 
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d39 1
a39 1
static const char bn_RCSvert_tree[] = "@@(#)$Header$ (ARL)";
d130 1
a130 1
 *	static recursion routine used by "clean_vert_tree"
d243 3
a245 3
			diff[0] = fabs( vertex[0] - vert_root->the_array[ij] );
			diff[1] = fabs( vertex[1] - vert_root->the_array[ij+1] );
			diff[2] = fabs( vertex[2] - vert_root->the_array[ij+2] );
d291 1
a291 1
		if( vertex[new_node->vnode.coord] >=
d373 1
a373 1
				diff[i] = fabs( vertex[i] - vert_root->the_array[ij+i] );
d433 1
a433 1
		if( vertex[new_node->vnode.coord] >=
@


14.8
log
@update copyright to 2005
@
text
@d21 3
d36 2
d39 1
a39 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/vert_tree.c,v 14.7 2004/12/21 07:32:30 morrison Exp $ (ARL)";
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 2002-2004 United States Government as represented by
d34 1
a34 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 14.6 2004/12/21 06:58:42 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a31 2
 *  
 *
d34 1
a34 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 14.5 2004/12/21 06:44:32 morrison Exp $ (ARL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a33 3
 *  Copyright Notice -
 *	This software is Copyright (C) 2002-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d36 1
a36 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 14.4 2004/12/21 06:18:43 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d39 1
a39 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 14.3 2004/12/21 05:45:20 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d43 1
a43 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 14.2 2004/12/21 01:52:15 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d43 1
a43 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 2
a2 1
/*			V E R T _ T R E E
d4 18
d43 1
a43 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 1.4 2004/09/03 23:30:57 morrison Exp $ (ARL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d24 1
a24 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (ARL)";
d459 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/src/libbn/vert_tree.c,v 1.2 2004/06/08 19:24:02 morrison Exp $ (ARL)";
d33 1
a33 1
#ifdef USE_STRING_H
@


1.2
log
@bye bye externs.h
@
text
@d24 1
a24 1
static const char bn_RCSvert_tree[] = "@@(#)$Header$ (ARL)";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char bn_RCSvert_tree[] = "@@(#)$Header: /cvs/brlcad/libbn/vert_tree.c,v 11.6 2004/05/10 15:30:43 erikg Exp $ (ARL)";
a43 1
#include "externs.h"
@

