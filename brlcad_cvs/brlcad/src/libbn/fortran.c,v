head	14.18;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.7
	rel-7-10-2:14.16
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.4
	rel-7-6-0:14.8
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.2
	bobWinPort:14.8.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.7
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.18
date	2007.12.31.17.40.44;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.10.22.20.59.55;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.07.26.01.13.55;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.27.01.41.35;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.50;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.09.02.14.02.14;	author lbutler;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.31;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.08.12.22.28.35;	author lbutler;	state Exp;
branches
	14.8.4.1;
next	14.7;

14.7
date	2005.01.30.20.30.44;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.07.25.29;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.01.52.15;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.24.02;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.27;	author morrison;	state Exp;
branches;
next	;

14.8.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.18
log
@really odd wrapper.. the uppercase variant seems to never get used/declared contrary to the comment.  either way, remove the non __STDC__ section
@
text
@/*                       F O R T R A N . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup fort */
/** @@{ */
/** @@file fortran.c
 *
 * @@brief
 *  A FORTRAN-callable interface to libplot3.
 *
 *  A FORTRAN-callable interface to libplot3, which is
 *  a public-domain UNIX plot library, for 2-D and 3-D plotting in
 *  16-bit signed integer spaces, and in floating point.
 *
 *  Note that all routines which expect floating point parameters
 *  currently expect them to be of
 *  type "float" (single precision) so that all FORTRAN constants
 *  can be written normally, rather than having to insist on
 *  FORTRAN "double precision" parameters.
 *  This is at odds with the C routines and the meta-file format,
 *  which both operate in "C double" precision.
 *
 *  Note that on machines like the Cray,
 *	(C float == C double == FORTRAN REAL) != FORTRAN DOUBLE PRECISION
 *
 *  Also note that on the Cray, the only interface provision required
 *  is that the subroutine name be in all upper case.  Other systems
 *  may have different requirements, such as adding a leading underscore.
 *  It is not clear how to handle this in a general way.
 *
 *  Note that due to the 6-character name space required to be
 *  generally useful in the FORTRAN environment, the names have been
 *  shortened.  At the same time, a consistency of naming has been
 *  implemented;  the first character or two giving a clue as to
 *  the purpose of the subroutine:
 *
 *@@li	I	General routines, and integer-parameter routines
 *@@li	I2	Routines with enumerated 2-D integer parameters
 *@@li	I3	Routines with enumerated 3-D integer parameters
 *@@li	F2	Routines with enumerated 2-D float parameters
 *@@li	F3	Routines with enumerated 3-D float parameters
 *@@li	A3	Routines with arrays of 3-D float parameters
 *
 *  This name space leaves the door open for a double-precision
 *  family of routines, D, D2, and D3.
 *
 *
 *  @@author
 *	Mike Muuss
 *
 */


#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.17 2007/10/22 20:59:55 brlcad Exp $ (BRL)";
#endif

#include "common.h"


#include <stdio.h>

#include "machine.h"
#include "plot3.h"
/**
 *			P L _ S T R N C P Y
 *
 *  Make null-terminated copy of a string in output buffer,
 *  being careful not to exceed indicated buffer size
 *  Accept "$" as alternate string-terminator for FORTRAN Holerith constants,
 *  because getting FORTRAN to null-terminate strings is to painful
 *  (and non-portable) to contemplate.
 */
void
pl_strncpy(register char *out, register char *in, register int sz)
{
	register int c = '\0';

	while( --sz > 0 && (c = *in++) != '\0' && c != '$' )
		*out++ = c;
	*out++ = '\0';
}

/**
 * Macro 'F' is used to take the 'C' function name, and convert it to
 * the convention used for a particular system.  Both lower-case and
 * upper-case alternatives have to be provided because there is no way
 * to get the C preprocessor to change the case of a token.
 *
 * Lower case, with a trailing underscore.
 */
#define	F(lc,uc) lc ## _

/*
 *  These interfaces provide necessary access to C library routines
 *  from the FORTRAN environment
 */

/**
 *			I F D O P E
 *
 *  Open a file descriptor for plotting.
 */
void
F(ifdopn,IFDOPN)( plotfp, fd )
FILE	**plotfp;
int	*fd;
{
	if( (*plotfp = fdopen(*fd, "w")) == NULL )
		perror("IFDOPN/fdopen");
}

/**
 *			I F O P E N
 *
 *  Open a file (by name) for plotting.
 */
void
F(ifopen,IFOPEN)( plotfp, name )
FILE	**plotfp;
char	*name;
{
	char	buf[128];

	pl_strncpy( buf, name, (int)sizeof(buf) );
	if( (*plotfp = fopen(buf, "w")) == NULL )
		perror(buf);
}

/*
 *  These interfaces provide the standard UNIX-Plot functionality
 */

void
F(i2pnt,I2PNT)( plotfp, x, y )
FILE	**plotfp;
int	*x, *y;
{
	pl_point( *plotfp, *x, *y );
}

void
F(i2line,I2LINE)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
int	*x1, *y1, *x2, *y2;
{
	pl_line( *plotfp, *x1, *y1, *x2, *y2 );
}

void
F(ilinmd,ILINMD)( plotfp, s )
FILE	**plotfp;
char *s;
{
	char buf[32];
	pl_strncpy( buf, s, (int)sizeof(buf) );
	pl_linmod( *plotfp, buf );
}

void
F(i2move,I2MOVE)( plotfp, x, y )
FILE	**plotfp;
int	*x, *y;
{
	pl_move( *plotfp, *x, *y );
}

void
F(i2cont,I2CONT)( plotfp, x, y )
FILE	**plotfp;
int	*x, *y;
{
	pl_cont( *plotfp, *x, *y );
}

void
F(i2labl,I2LABL)( plotfp, s )
FILE	**plotfp;
char *s;
{
	char	buf[256];
	pl_strncpy( buf, s, (int)sizeof(buf) );
	pl_label( *plotfp, buf );
}

void
F(i2spac,I2SPAC)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
int	*x1, *y1, *x2, *y2;
{
	pl_space( *plotfp, *x1, *y1, *x2, *y2 );
}

void
F(ierase,IERASE)( plotfp )
FILE	**plotfp;
{
	pl_erase( *plotfp );
}

void
F(i2circ,I2CIRC)( plotfp, x, y, r )
FILE	**plotfp;
int	*x, *y, *r;
{
	pl_circle( *plotfp, *x, *y, *r );
}

void
F(i2arc,I2ARC)( plotfp, xc, yc, x1, y1, x2, y2 )
FILE	**plotfp;
int	*xc, *yc, *x1, *y1, *x2, *y2;
{
	pl_arc( *plotfp, *xc, *yc, *x1, *y1, *x2, *y2 );
}

void
F(i2box,I2BOX)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
int	*x1, *y1, *x2, *y2;
{
	pl_box( *plotfp, *x1, *y1, *x2, *y2 );
}

/*
 * Here lie the BRL 3-D extensions.
 */

/* Warning: r, g, b are ints.  The output is chars. */
void
F(icolor,ICOLOR)( plotfp, r, g, b )
FILE	**plotfp;
int	*r, *g, *b;
{
	pl_color( *plotfp, *r, *g, *b );
}

void
F(iflush,IFLUSH)( plotfp )
FILE	**plotfp;
{
	pl_flush( *plotfp );
}

void
F(i3spac,I3SPAC)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
int	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pl_3space( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

void
F(i3pnt,I3PNT)( plotfp, x, y, z )
FILE	**plotfp;
int	*x, *y, *z;
{
	pl_3point( *plotfp, *x, *y, *z );

}

void
F(i3move,I3MOVE)( plotfp, x, y, z )
FILE	**plotfp;
int	*x, *y, *z;
{
	pl_3move( *plotfp, *x, *y, *z );
}

void
F(i3cont,I3CONT)( plotfp, x, y, z )
FILE	**plotfp;
int	*x, *y, *z;
{
	pl_3cont( *plotfp, *x, *y, *z );
}

void
F(i3line,I3LINE)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
int	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pl_3line( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

void
F(i3box,I3BOX)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
int	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pl_3box( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

/*
 *  Floating point routines.
 */

void
F(f2pnt,F2PNT)( plotfp, x, y )
FILE	**plotfp;
float	*x, *y;
{
	pd_point( *plotfp, *x, *y );
}

void
F(f2line,F2LINE)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
float	*x1, *y1, *x2, *y2;
{
	pd_line( *plotfp, *x1, *y1, *x2, *y2 );
}

void
F(f2move,F2MOVE)( plotfp, x, y )
FILE	**plotfp;
float	*x, *y;
{
	pd_move( *plotfp, *x, *y );
}

void
F(f2cont,F2CONT)( plotfp, x, y )
FILE	**plotfp;
float	*x, *y;
{
	pd_cont( *plotfp, *x, *y );
}

void
F(f2spac,F2SPAC)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
float	*x1, *y1, *x2, *y2;
{
	pd_space( *plotfp, *x1, *y1, *x2, *y2 );
}

void
F(f2circ,F2CIRC)( plotfp, x, y, r )
FILE	**plotfp;
float	*x, *y, *r;
{
	pd_circle( *plotfp, *x, *y, *r );
}

void
F(f2arc,F2ARC)( plotfp, xc, yc, x1, y1, x2, y2 )
FILE	**plotfp;
float	*xc, *yc, *x1, *y1, *x2, *y2;
{
	pd_arc( *plotfp, *xc, *yc, *x1, *y1, *x2, *y2 );
}

void
F(f2box,F2BOX)( plotfp, x1, y1, x2, y2 )
FILE	**plotfp;
float	*x1, *y1, *x2, *y2;
{
	pd_box( *plotfp, *x1, *y1, *x2, *y2 );
}

/*
 *  Floating-point 3-D, both in array (vector) and enumerated versions.
 *  The same remarks about float/double apply as above.
 */

void
F(a2spac,A3SPAC)( plotfp, min, max )
FILE	**plotfp;
float	min[3];
float	max[3];
{
	pd_3space( *plotfp, min[0], min[1], min[2], max[0], max[1], max[2] );
}

void
F(f3spac,F3SPAC)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
float	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pd_3space( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

void
F(a3pnt,A3PNT)( plotfp, pt )
FILE	**plotfp;
float	pt[3];
{
	pd_3point( *plotfp, pt[0], pt[1], pt[2] );
}

void
F(f3pnt,F3PNT)( plotfp, x, y, z )
FILE	**plotfp;
float	*x, *y, *z;
{
	pd_3point( *plotfp, *x, *y, *z );
}

void
F(a3move,A3MOVE)( plotfp, pt )
FILE	**plotfp;
float	pt[3];
{
	pd_3move( *plotfp, pt[0], pt[1], pt[2] );
}

void
F(f3move,F3MOVE)( plotfp, x, y, z )
FILE	**plotfp;
float	*x, *y, *z;
{
	pd_3move( *plotfp, *x, *y, *z );
}

void
F(a3cont,A3CONT)( plotfp, pt )
FILE	**plotfp;
float	pt[3];
{
	pd_3cont( *plotfp, pt[0], pt[1], pt[2] );
}

void
F(f3cont,F3CONT)( plotfp, x, y, z )
FILE	**plotfp;
float	*x, *y, *z;
{
	pd_3cont( *plotfp, *x, *y, *z );
}

void
F(a3line,A3LINE)( plotfp, a, b )
FILE	**plotfp;
float	a[3], b[3];
{
	pd_3line( *plotfp, a[0], a[1], a[2], b[0], b[1], b[2] );
}

void
F(f3line,F3LINE)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
float	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pd_3line( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

void
F(a3box,A3BOX)( plotfp, a, b )
FILE	**plotfp;
float	a[3], b[3];
{
	pd_3box( *plotfp, a[0], a[1], a[2], b[0], b[1], b[2] );
}

void
F(f3box,F3BOX)( plotfp, x1, y1, z1, x2, y2, z2 )
FILE	**plotfp;
float	*x1, *y1, *z1, *x2, *y2, *z2;
{
	pd_3box( *plotfp, *x1, *y1, *z1, *x2, *y2, *z2 );
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@the old cray cos and unicos code for the cray xmp and friends finally became a burden to maintain while resolving various flawfinder issues.  remove the old code, particularly that which wasn't __STDC__.  however, intentionally leave the code for calculating byteoffsets and converting float formats to/from network order .. could still come in handy at some point down the road.
@
text
@d71 1
a71 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.16 2007/07/26 01:13:55 brlcad Exp $ (BRL)";
d101 6
a106 5
 *  Macro 'F' is used to take the 'C' function name,
 *  and convert it to the convention used for a particular system.
 *  Both lower-case and upper-case alternatives have to be provided
 *  because there is no way to get the C preprocessor to change the
 *  case of a token.
d108 1
a108 11
#if defined(apollo) || defined(mips) || defined(aux)
	/* Lower case, with a trailing underscore */
#ifdef __STDC__
#	define	F(lc,uc)	lc ## _
#else
#	define	F(lc,uc)	lc/**/_
#endif
#endif
#if !defined(F)
#	define	F(lc,uc)	lc
#endif
@


14.16
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d71 1
a71 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.15 2007/01/27 01:41:35 brlcad Exp $ (BRL)";
a106 3
#if CRAY
#	define	F(lc,uc)	uc
#endif
@


14.15
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a66 5
 *  @@par Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *@@n	The U. S. Army Ballistic Research Laboratory
 *@@n	Aberdeen Proving Ground, Maryland  21005-5066
 *
d71 1
a71 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.14 2007/01/23 01:13:33 brlcad Exp $ (BRL)";
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d76 1
a76 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.13 2007/01/21 04:45:41 brlcad Exp $ (BRL)";
a81 1

@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d76 1
a76 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.12 2007/01/20 14:36:50 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@d21 2
a22 3

/** \addtogroup fort */
/*@@{*/
d24 1
d77 1
a77 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.11 2006/09/02 14:02:14 lbutler Exp $ (BRL)";
d499 1
a499 1
/*@@}*/
@


14.11
log
@Doxygen comments
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d77 1
a77 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.10 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup libbn */
d25 3
d54 6
a59 6
 *	I	General routines, and integer-parameter routines
 *	I2	Routines with enumerated 2-D integer parameters
 *	I3	Routines with enumerated 3-D integer parameters
 *	F2	Routines with enumerated 2-D float parameters
 *	F3	Routines with enumerated 3-D float parameters
 *	A3	Routines with arrays of 3-D float parameters
d65 1
a65 1
 *  Author -
d68 1
a68 1
 *  Source -
d70 2
a71 2
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d74 1
a74 1
/*@@}*/
d77 1
a77 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.9 2005/10/23 04:44:31 brlcad Exp $ (BRL)";
d88 1
a88 1
/*
d107 1
a107 1
/*
d134 1
a134 1
/*
d148 1
a148 1
/*
d499 1
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d74 1
a74 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.8 2005/08/12 22:28:35 lbutler Exp $ (BRL)";
@


14.8
log
@Doxygen changes
@
text
@d64 1
a64 1
 *  
d69 1
a69 1
 *  
d74 1
a74 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.7 2005/01/30 20:30:44 brlcad Exp $ (BRL)";
@


14.8.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d64 1
a64 1
 *
d69 1
a69 1
 *
d74 1
a74 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.7
log
@update copyright to 2005
@
text
@d21 3
a24 1
 *
d71 2
d74 1
a74 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbn/fortran.c,v 14.6 2004/12/21 07:25:29 morrison Exp $ (BRL)";
@


14.6
log
@tidy up a lil bit
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d70 1
a70 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/fortran.c,v 14.5 2004/12/21 07:18:57 morrison Exp $ (BRL)";
@


14.5
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d70 1
a70 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/fortran.c,v 14.4 2004/12/21 06:18:43 morrison Exp $ (BRL)";
a323 2
 *
 *
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a67 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited
d70 1
a70 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/fortran.c,v 14.3 2004/12/21 05:45:20 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d72 1
a72 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/fortran.c,v 14.2 2004/12/21 01:52:15 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d72 1
a72 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/fortran.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			F O R T R A N . C
d72 1
a72 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/fortran.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d53 1
a53 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbn/fortran.c,v 1.2 2004/06/08 19:24:02 morrison Exp $ (BRL)";
d476 10
@


1.2
log
@bye bye externs.h
@
text
@d53 1
a53 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d56 1
a56 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d53 1
a53 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libbn/fortran.c,v 11.7 2004/05/10 15:30:43 erikg Exp $ (BRL)";
a64 1
#include "externs.h"
@

