head	14.17;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.8
	rel-7-10-2:14.16
	rel-7-10-0:14.16
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.17
date	2007.09.15.16.23.14;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.27.01.41.42;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.39;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.56;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.09.16.02.04.26;	author lbutler;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.01.30.20.31.03;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.25.30;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.43;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.50.59;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.48;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.25;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.21;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.12;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                  W D B _ C O M B _ S T D . C
 * BRL-CAD
 *
 * Copyright (c) 1997-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup wdb */
/** @@{ */
/** @@file wdb_comb_std.c
 *
 *	Code to implement the database objects "c" command.
 *
 *  Author -
 *      John R. Anderson
 *
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.16 2007/01/27 01:41:42 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "tcl.h"
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "rtgeom.h"


#define	PRINT_USAGE Tcl_AppendResult(interp, "c: usage 'c [-cr] comb_name [bool_expr]'\n",\
				     (char *)NULL)

struct tokens {
	struct bu_list		l;
	short			type;
	union tree		*tp;
};

/* token types */
#define	WDB_TOK_NULL	0
#define	WDB_TOK_LPAREN	1
#define	WDB_TOK_RPAREN	2
#define	WDB_TOK_UNION	3
#define	WDB_TOK_INTER	4
#define	WDB_TOK_SUBTR	5
#define	WDB_TOK_TREE	6

HIDDEN void
wdb_free_tokens(struct bu_list *hp)
{
	struct tokens *tok;

	BU_CK_LIST_HEAD(hp);

	while (BU_LIST_WHILE(tok, tokens, hp)) {
		BU_LIST_DEQUEUE(&tok->l);
		if (tok->type == WDB_TOK_TREE) {
			if (tok->tp)
				db_free_tree(tok->tp, &rt_uniresource);
		}
	}
}

HIDDEN void
wdb_append_union(struct bu_list *hp)
{
	struct tokens *tok;

	BU_CK_LIST_HEAD( hp );

	tok = (struct tokens *)bu_malloc(sizeof(struct tokens), "tok");
	tok->type = WDB_TOK_UNION;
	tok->tp = (union tree *)NULL;
	BU_LIST_INSERT(hp, &tok->l);
}

HIDDEN void
wdb_append_inter(struct bu_list *hp)
{
	struct tokens *tok;

	BU_CK_LIST_HEAD(hp);

	tok = (struct tokens *)bu_malloc(sizeof(struct tokens), "tok");
	tok->type = WDB_TOK_INTER;
	tok->tp = (union tree *)NULL;
	BU_LIST_INSERT( hp, &tok->l );
}

HIDDEN void
wdb_append_subtr(struct bu_list *hp)
{
	struct tokens *tok;

	BU_CK_LIST_HEAD(hp);

	tok = (struct tokens *)bu_malloc(sizeof(struct tokens), "tok");
	tok->type = WDB_TOK_SUBTR;
	tok->tp = (union tree *)NULL;
	BU_LIST_INSERT( hp, &tok->l );
}

HIDDEN void
wdb_append_lparen(struct bu_list *hp)
{
	struct tokens *tok;

	BU_CK_LIST_HEAD(hp);

	tok = (struct tokens *)bu_malloc(sizeof(struct tokens), "tok");
	tok->type = WDB_TOK_LPAREN;
	tok->tp = (union tree *)NULL;
	BU_LIST_INSERT( hp, &tok->l );
}

HIDDEN void
wdb_append_rparen(struct bu_list *hp)
{
	struct tokens *tok;

	BU_CK_LIST_HEAD(hp);

	tok = (struct tokens *)bu_malloc(sizeof(struct tokens), "tok");
	tok->type = WDB_TOK_RPAREN;
	tok->tp = (union tree *)NULL;
	BU_LIST_INSERT(hp, &tok->l);
}

HIDDEN int
wdb_add_operator(Tcl_Interp *interp, struct bu_list *hp, char ch, short int *last_tok)
{
	char illegal[2];

	BU_CK_LIST_HEAD(hp);

	switch( ch )
	{
		case 'u':
			wdb_append_union(hp);
			*last_tok = WDB_TOK_UNION;
			break;
		case '+':
			wdb_append_inter(hp);
			*last_tok = WDB_TOK_INTER;
			break;
		case '-':
			wdb_append_subtr(hp);
			*last_tok = WDB_TOK_SUBTR;
			break;
		default:
			illegal[0] = ch;
			illegal[1] = '\0';
			Tcl_AppendResult(interp, "Illegal operator: ", illegal,
				", aborting\n", (char *)NULL );
			wdb_free_tokens(hp);
			return TCL_ERROR;
	}
	return TCL_OK;
}

HIDDEN int
wdb_add_operand(Tcl_Interp *interp, struct bu_list *hp, char *name)
{
	char *ptr_lparen;
	char *ptr_rparen;
	int name_len;
	union tree *node;
	struct tokens *tok;

	BU_CK_LIST_HEAD(hp);

	ptr_lparen = strchr(name, '(');
	ptr_rparen = strchr(name, ')');

	RT_GET_TREE( node, &rt_uniresource );
	node->magic = RT_TREE_MAGIC;
	node->tr_op = OP_DB_LEAF;
	node->tr_l.tl_mat = (matp_t)NULL;
	if (ptr_lparen || ptr_rparen) {
		int tmp1,tmp2;

		if (ptr_rparen)
			tmp1 = ptr_rparen - name;
		else
			tmp1 = (-1);
		if (ptr_lparen)
			tmp2 = ptr_lparen - name;
		else
			tmp2 = (-1);

		if (tmp2 == (-1) && tmp1 > 0)
			name_len = tmp1;
		else if (tmp1 == (-1) && tmp2 > 0)
			name_len = tmp2;
		else if(tmp1 > 0 && tmp2 > 0) {
			if (tmp1 < tmp2)
				name_len = tmp1;
			else
				name_len = tmp2;
		}
		else {
			Tcl_AppendResult(interp, "Cannot determine length of operand name: ",
				name, ", aborting\n", (char *)NULL);
			return (0);
		}
	} else
		name_len = strlen( name );

	node->tr_l.tl_name = (char *)bu_malloc(name_len + 1, "node name");
	strncpy(node->tr_l.tl_name, name, name_len);
	node->tr_l.tl_name[name_len] = '\0';
	tok = (struct tokens *)bu_malloc(sizeof(struct tokens), "tok");
	tok->type = WDB_TOK_TREE;
	tok->tp = node;
	BU_LIST_INSERT(hp, &tok->l);
	return (name_len);
}

HIDDEN void
wdb_do_inter(struct bu_list *hp)
{
	struct tokens *tok;

	for (BU_LIST_FOR(tok, tokens, hp )) {
		struct tokens *prev, *next;
		union tree *tp;

		if (tok->type != WDB_TOK_INTER)
			continue;

		prev = BU_LIST_PREV( tokens, &tok->l );
		next = BU_LIST_NEXT( tokens, &tok->l );

		if (prev->type !=WDB_TOK_TREE || next->type != WDB_TOK_TREE)
			continue;

		/* this is an eligible intersection operation */
		tp = (union tree *)bu_malloc( sizeof( union tree ), "tp" );
		tp->magic = RT_TREE_MAGIC;
		tp->tr_b.tb_op = OP_INTERSECT;
		tp->tr_b.tb_regionp = (struct region *)NULL;
		tp->tr_b.tb_left = prev->tp;
		tp->tr_b.tb_right = next->tp;
		BU_LIST_DEQUEUE( &tok->l );
		bu_free( (char *)tok, "tok" );
		BU_LIST_DEQUEUE( &prev->l );
		bu_free( (char *)prev, "prev" );
		next->tp = tp;
		tok = next;
	}
}

HIDDEN void
wdb_do_union_subtr(struct bu_list *hp)
{
	struct tokens *tok;

	for(BU_LIST_FOR(tok, tokens, hp)) {
		struct tokens *prev, *next;
		union tree *tp;

		if (tok->type != WDB_TOK_UNION && tok->type != WDB_TOK_SUBTR)
			continue;

		prev = BU_LIST_PREV( tokens, &tok->l );
		next = BU_LIST_NEXT( tokens, &tok->l );

		if (prev->type !=WDB_TOK_TREE || next->type != WDB_TOK_TREE)
			continue;

		/* this is an eligible operation */
		tp = (union tree *)bu_malloc( sizeof( union tree ), "tp" );
		tp->magic = RT_TREE_MAGIC;
		if (tok->type == WDB_TOK_UNION)
			tp->tr_b.tb_op = OP_UNION;
		else
			tp->tr_b.tb_op = OP_SUBTRACT;
		tp->tr_b.tb_regionp = (struct region *)NULL;
		tp->tr_b.tb_left = prev->tp;
		tp->tr_b.tb_right = next->tp;
		BU_LIST_DEQUEUE(&tok->l);
		bu_free((char *)tok, "tok");
		BU_LIST_DEQUEUE(&prev->l);
		bu_free((char *)prev, "prev");
		next->tp = tp;
		tok = next;
	}
}

HIDDEN int
wdb_do_paren(struct bu_list *hp)
{
	struct tokens *tok;

	for (BU_LIST_FOR(tok, tokens, hp)) {
		struct tokens *prev, *next;

		if (tok->type != WDB_TOK_TREE)
			continue;

		prev = BU_LIST_PREV( tokens, &tok->l );
		next = BU_LIST_NEXT( tokens, &tok->l );

		if (prev->type !=WDB_TOK_LPAREN || next->type != WDB_TOK_RPAREN)
			continue;

		/* this is an eligible operand surrounded by parens */
		BU_LIST_DEQUEUE(&next->l);
		bu_free((char *)next, "next");
		BU_LIST_DEQUEUE(&prev->l);
		bu_free((char *)prev, "prev");
	}

	if (hp->forw == hp->back && hp->forw != hp)
		return 1;	/* done */
	else if (BU_LIST_IS_EMPTY(hp))
		return -1;	/* empty tree!!!! */
	else
		return 0;	/* more to do */

}

HIDDEN union tree *
wdb_eval_bool(struct bu_list *hp)
{
	int done=0;
	union tree *final_tree;
	struct tokens *tok;

	while (done != 1) {
		wdb_do_inter(hp);
		wdb_do_union_subtr(hp);
		done = wdb_do_paren(hp);
	}

	if (done == 1) {
		tok = BU_LIST_NEXT(tokens, hp);
		final_tree = tok->tp;
		BU_LIST_DEQUEUE(&tok->l);
		bu_free((char *)tok, "tok");
		return(final_tree);
	}

	return (union tree *)NULL;
}

HIDDEN int
wdb_check_syntax(Tcl_Interp *interp, struct db_i *dbip, struct bu_list *hp, char *comb_name, struct directory *dp)
{
	struct tokens *tok;
	int paren_count=0;
	int paren_error=0;
	int missing_exp=0;
	int missing_op=0;
	int op_count=0;
	int arg_count=0;
	int circular_ref=0;
	int errors=0;
	short last_tok=WDB_TOK_NULL;

	if(dbip == DBI_NULL)
	  return 0;

	for( BU_LIST_FOR( tok, tokens, hp ) )
	{
		switch( tok->type )
		{
			case WDB_TOK_LPAREN:
				paren_count++;
				if( last_tok == WDB_TOK_RPAREN )
					missing_op++;
				break;
			case WDB_TOK_RPAREN:
				paren_count--;
				if( last_tok == WDB_TOK_LPAREN )
					missing_exp++;
				break;
			case WDB_TOK_UNION:
			case WDB_TOK_SUBTR:
			case WDB_TOK_INTER:
				op_count++;
				break;
			case WDB_TOK_TREE:
				arg_count++;
				if( !dp && !strcmp( comb_name, tok->tp->tr_l.tl_name ) )
					circular_ref++;
				else if( db_lookup( dbip, tok->tp->tr_l.tl_name, LOOKUP_QUIET ) == DIR_NULL )
					Tcl_AppendResult(interp, "WARNING: '",
						tok->tp->tr_l.tl_name,
						"' does not actually exist\n", (char *)NULL );
				break;
		}
		if( paren_count < 0 )
			paren_error++;
		last_tok = tok->type;
	}

	if( paren_count || paren_error )
	{
		Tcl_AppendResult(interp, "ERROR: unbalanced parenthesis\n", (char *)NULL );
		errors++;
	}

	if( missing_exp )
	{
		Tcl_AppendResult(interp, "ERROR: empty parenthesis (missing expression)\n", (char *)NULL );
		errors++;
	}

	if( missing_op )
	{
		Tcl_AppendResult(interp, "ERROR: must have operator between ')('\n", (char *)NULL );
		errors++;
	}

	if( op_count != arg_count-1 )
	{
		Tcl_AppendResult(interp, "ERROR: mismatch of operators and operands\n", (char *)NULL );
		errors++;
	}

	if( circular_ref )
	{
		Tcl_AppendResult(interp, "ERROR: combination cannot reference itself during initial creation\n", (char *)NULL );
		errors++;
	}

	if( errors )
	{
		Tcl_AppendResult(interp, "\t---------aborting!\n", (char *)NULL );
		return( 1 );
	}

	return( 0 );
}

int
wdb_comb_std_cmd(struct rt_wdb	*wdbp,
		Tcl_Interp	*interp,
		int		argc,
		char 		**argv)
{
	char				*comb_name;
	int				ch;
	int				region_flag = -1;
	register struct directory	*dp;
	struct rt_db_internal		intern;
	struct rt_comb_internal		*comb = NULL;
	struct tokens			tok_hd;
	struct tokens			*tok;
	short				last_tok;
	int				i;
	union tree			*final_tree;

	if (wdbp->dbip->dbi_read_only) {
		Tcl_AppendResult(interp, "Database is read-only!\n", (char *)NULL);
		return TCL_ERROR;
	}

	if (argc < 3 || RT_MAXARGS < argc) {
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "helplib_alias wdb_comb_std %s", argv[0]);
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	/* Parse options */
	bu_optind = 1;	/* re-init bu_getopt() */
	while ((ch = bu_getopt(argc, argv, "cgr?")) != EOF) {
		switch (ch) {
		case 'c':
		case 'g':
			region_flag = 0;
			break;
		case 'r':
			region_flag = 1;
			break;
		/* XXX How about -p and -v for FASTGEN? */
		case '?':
		default:
			PRINT_USAGE;
			return TCL_OK;
		}
	}
	argc -= (bu_optind + 1);
	argv += bu_optind;

	comb_name = *argv++;
	if (argc == -1) {
		PRINT_USAGE;
		return TCL_OK;
	}

	if ((region_flag != -1) && (argc == 0)) {
		/*
		 *	Set/Reset the REGION flag of an existing combination
		 */
		if ((dp = db_lookup(wdbp->dbip, comb_name, LOOKUP_NOISY)) == DIR_NULL)
			return TCL_ERROR;

		if (!(dp->d_flags & DIR_COMB)) {
			Tcl_AppendResult(interp, comb_name, " is not a combination\n", (char *)0 );
			return TCL_ERROR;
		}

		if (rt_db_get_internal(&intern, dp, wdbp->dbip, (fastf_t *)NULL, &rt_uniresource) < 0) {
			Tcl_AppendResult(interp, "Database read error, aborting\n", (char *)NULL);
			return TCL_ERROR;
		}
		comb = (struct rt_comb_internal *)intern.idb_ptr;
		RT_CK_COMB(comb);

		if (region_flag) {
			if( !comb->region_flag ) {
				/* assign values from the defaults */
				comb->region_id = wdbp->wdb_item_default++;
				comb->aircode = wdbp->wdb_air_default;
				comb->GIFTmater = wdbp->wdb_mat_default;
				comb->los = wdbp->wdb_los_default;
			}
			comb->region_flag = 1;
		}
		else
			comb->region_flag = 0;

		if (rt_db_put_internal(dp, wdbp->dbip, &intern, &rt_uniresource) < 0) {
			rt_db_free_internal(&intern, &rt_uniresource);
			Tcl_AppendResult(interp, "Database write error, aborting\n", (char *)NULL);
			return TCL_ERROR;
		}

		return TCL_OK;
	}
	/*
	 *	At this point, we know we have a Boolean expression.
	 *	If the combination already existed and region_flag is -1,
	 *	then leave its region_flag alone.
	 *	If the combination didn't exist yet,
	 *	then pretend region_flag was 0.
	 *	Otherwise, make sure to set its c_flags according to region_flag.
	 */

	dp = db_lookup( wdbp->dbip, comb_name, LOOKUP_QUIET );
	if (dp != DIR_NULL) {
		Tcl_AppendResult(interp, "ERROR: ", comb_name, " already exists\n", (char *)0 );
		return TCL_ERROR;
	}

	/* parse Boolean expression */
	BU_LIST_INIT(&tok_hd.l);
	tok_hd.type = WDB_TOK_NULL;

	last_tok = WDB_TOK_LPAREN;
	for (i=0 ; i<argc ; i++) {
		char *ptr;

		ptr = argv[i];
		while (*ptr) {
			while (*ptr == '(' || *ptr == ')') {
				switch (*ptr) {
				case '(':
					wdb_append_lparen( &tok_hd.l );
					last_tok = WDB_TOK_LPAREN;
					break;
				case ')':
					wdb_append_rparen( &tok_hd.l );
					last_tok = WDB_TOK_RPAREN;
					break;
				}
				ptr++;
			}

			if (*ptr == '\0')
				continue;

			if (last_tok == WDB_TOK_RPAREN) {
				/* next token MUST be an operator */
				if (wdb_add_operator(interp, &tok_hd.l, *ptr, &last_tok) == TCL_ERROR) {
					wdb_free_tokens(&tok_hd.l);
					if (dp != DIR_NULL)
						rt_db_free_internal(&intern, &rt_uniresource);
					return TCL_ERROR;
				}
				ptr++;
			} else if (last_tok == WDB_TOK_LPAREN) {
				/* next token MUST be an operand */
				int name_len;

				name_len = wdb_add_operand(interp, &tok_hd.l, ptr );
				if (name_len < 1) {
					wdb_free_tokens(&tok_hd.l);
					if (dp != DIR_NULL)
						rt_db_free_internal(&intern, &rt_uniresource);
					return TCL_ERROR;
				}
				last_tok = WDB_TOK_TREE;
				ptr += name_len;
			} else if (last_tok == WDB_TOK_TREE) {
				/* must be an operator */
				if (wdb_add_operator(interp, &tok_hd.l, *ptr, &last_tok) == TCL_ERROR) {
					wdb_free_tokens(&tok_hd.l);
					if (dp != DIR_NULL)
						rt_db_free_internal(&intern, &rt_uniresource);
					return TCL_ERROR;
				}
				ptr++;
			} else if (last_tok == WDB_TOK_UNION ||
				   last_tok == WDB_TOK_INTER ||
				   last_tok == WDB_TOK_SUBTR) {
				/* must be an operand */
				int name_len;

				name_len = wdb_add_operand(interp, &tok_hd.l, ptr );
				if (name_len < 1) {
					wdb_free_tokens(&tok_hd.l);
					if (dp != DIR_NULL)
						rt_db_free_internal(&intern, &rt_uniresource);
					return TCL_ERROR;
				}
				last_tok = WDB_TOK_TREE;
				ptr += name_len;
			}
		}
	}

	if (wdb_check_syntax(interp, wdbp->dbip, &tok_hd.l, comb_name, dp)) {
		wdb_free_tokens(&tok_hd.l);
		return TCL_ERROR;
	}

	/* replace any occurences of comb_name with existing tree */
	if (dp != DIR_NULL) {
		for (BU_LIST_FOR(tok, tokens, &tok_hd.l)) {
			struct rt_db_internal intern1;
			struct rt_comb_internal *comb1;

			switch (tok->type) {
			case WDB_TOK_LPAREN:
			case WDB_TOK_RPAREN:
			case WDB_TOK_UNION:
			case WDB_TOK_INTER:
			case WDB_TOK_SUBTR:
				break;
			case WDB_TOK_TREE:
				if (!strcmp(tok->tp->tr_l.tl_name, comb_name)) {
					db_free_tree( tok->tp, &rt_uniresource );
					if (rt_db_get_internal(&intern1, dp, wdbp->dbip, (fastf_t *)NULL, &rt_uniresource) < 0) {
						Tcl_AppendResult(interp, "Cannot get records for ", comb_name, "\n" );
						Tcl_AppendResult(interp, "Database read error, aborting\n", (char *)NULL);
						return TCL_ERROR;
					}
					comb1 = (struct rt_comb_internal *)intern1.idb_ptr;
					RT_CK_COMB(comb1);

					tok->tp = comb1->tree;
					comb1->tree = (union tree *)NULL;
					rt_db_free_internal(&intern1, &rt_uniresource);
				}
				break;
			default:
				Tcl_AppendResult(interp, "ERROR: Unrecognized token type\n", (char *)NULL);
				wdb_free_tokens(&tok_hd.l);
				return TCL_ERROR;
			}
		}
	}

	final_tree = wdb_eval_bool(&tok_hd.l);

	if (dp == DIR_NULL) {
		int flags;

		flags = DIR_COMB;
		BU_GETSTRUCT(comb, rt_comb_internal);
		comb->magic = RT_COMB_MAGIC;
		comb->tree = final_tree;
		bu_vls_init(&comb->shader);
		bu_vls_init(&comb->material);
		comb->region_id = -1;
		if (region_flag == (-1))
			comb->region_flag = 0;
		else
			comb->region_flag = region_flag;

		if (comb->region_flag) {
			struct bu_vls tmp_vls;

			comb->region_flag = 1;
			comb->region_id = wdbp->wdb_item_default++;;
			comb->aircode = wdbp->wdb_air_default;
			comb->los = wdbp->wdb_los_default;
			comb->GIFTmater = wdbp->wdb_mat_default;
			bu_vls_init(&tmp_vls);
			bu_vls_printf(&tmp_vls,
				"Creating region id=%d, air=%d, los=%d, GIFTmaterial=%d\n",
				comb->region_id, comb->aircode, comb->los, comb->GIFTmater);
			Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);
			bu_vls_free(&tmp_vls);

			flags |= DIR_REGION;
		}

		RT_INIT_DB_INTERNAL(&intern);
		intern.idb_major_type = DB5_MAJORTYPE_BRLCAD;
		intern.idb_type = ID_COMBINATION;
		intern.idb_meth = &rt_functab[ID_COMBINATION];
		intern.idb_ptr = (genptr_t)comb;

		if ((dp=db_diradd(wdbp->dbip, comb_name, -1L, 0, flags, (genptr_t)&intern.idb_type)) == DIR_NULL) {
			Tcl_AppendResult(interp, "Failed to add ", comb_name,
					 " to directory, aborting\n" , (char *)NULL);
			return TCL_ERROR;
		}

		if (rt_db_put_internal(dp, wdbp->dbip, &intern, &rt_uniresource) < 0) {
			Tcl_AppendResult(interp, "Failed to write ", dp->d_namep, (char *)NULL );
			return TCL_ERROR;
		}
	} else {
		db_delete(wdbp->dbip, dp);

		dp->d_len = 0;
		dp->d_un.file_offset = -1;
		db_free_tree(comb->tree, &rt_uniresource);
		comb->tree = final_tree;

		if (rt_db_put_internal(dp, wdbp->dbip, &intern, &rt_uniresource) < 0) {
			Tcl_AppendResult(interp, "Failed to write ", dp->d_namep, (char *)NULL );
			return TCL_ERROR;
		}
	}

	return TCL_OK;
}

/*
 * Input a combination in standard set-theoretic notation.
 *
 * Usage:
 *        procname c [-gr] comb_name boolean_expr
 *
 * NON-PARALLEL because of rt_uniresource
 */
int
wdb_comb_std_tcl(ClientData	clientData,
		 Tcl_Interp	*interp,
		 int     	argc,
		 char    	**argv)
{
	struct rt_wdb *wdbp = (struct rt_wdb *)clientData;

	return wdb_comb_std_cmd(wdbp, interp, argc-1, argv+1);
}
/** @@} */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.15 2007/01/23 01:13:39 brlcad Exp $ (BRL)";
d41 1
a41 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.14 2007/01/21 04:45:45 brlcad Exp $ (BRL)";
d369 1
a369 1
        return (union tree *)NULL;
d472 1
a472 1
    	struct rt_db_internal		intern;
@


14.14
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.13 2007/01/20 14:36:56 brlcad Exp $ (BRL)";
@


14.13
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.12 2006/09/16 02:04:26 lbutler Exp $ (BRL)";
d783 1
a783 1
/*@@}*/
@


14.12
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1997-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.11 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
@


14.11
log
@update copyright to 2006
@
text
@d22 1
a22 3
/** \defgroup wdb WriteDatabase
 * \ingroup librt */

a33 1
/*@@}*/
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.10 2005/10/23 04:44:36 brlcad Exp $ (BRL)";
d783 1
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1997-2005 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.9 2005/08/12 22:31:08 lbutler Exp $ (BRL)";
@


14.9
log
@Doxygen changes
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.8 2005/01/30 20:31:03 brlcad Exp $ (BRL)";
d349 1
a349 1
		
d539 1
a539 1
			Tcl_AppendResult(interp, "Database read error, aborting\n", (char *)NULL);	
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d349 1
a349 1

d539 1
a539 1
			Tcl_AppendResult(interp, "Database read error, aborting\n", (char *)NULL);
@


14.8
log
@update copyright to 2005
@
text
@d21 5
d27 1
a27 2
 *
 *	Code to implement the database objects "c" command
d36 1
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb_comb_std.c,v 14.7 2004/12/21 07:25:30 morrison Exp $ (BRL)";
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1997-2004 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 14.6 2004/12/21 06:58:43 morrison Exp $ (BRL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a30 2
 *
 *
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 14.5 2004/12/21 06:50:59 morrison Exp $ (BRL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a32 3
 *  Copyright Notice -
 *      This software is Copyright (C) 1997-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 14.4 2004/12/21 06:18:48 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a31 4
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 14.3 2004/12/21 05:45:25 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 14.2 2004/12/21 04:18:21 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*			W D B _C O M B _ S T D . C
a39 1
 *
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 1.3 2004/09/03 23:30:58 morrison Exp $ (BRL)";
a47 2


d50 1
a50 1
#include <string.h>
d52 1
a52 1
#include <strings.h>
d62 1
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (BRL)";
d772 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb_comb_std.c,v 1.1 2004/05/20 15:20:12 morrison Exp $ (BRL)";
d32 1
a32 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/wdb_comb_std.c,v 1.22 2004/05/10 15:30:47 erikg Exp $ (BRL)";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

