head	14.17;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.6
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.9
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.17
date	2007.07.26.01.13.57;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.27.01.41.39;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.54;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.09.16.02.04.24;	author lbutler;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.12.08.00.05.19;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.35;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.09.09.05.07.46;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.07;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.58;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.45;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.25.19.11.28;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.59;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@/*                       F O R T R A Y . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup fort */
/** @@{ */
/** @@file fortray.c
 *
 *  A general-purpose set of FORTRAN-callable interface routines to
 *  permit any FORTRAN program to use LIBRT, the ray-tracing library
 *  of the BRL-CAD Package.
 *
 *  Author -
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.16 2007/01/27 01:41:39 brlcad Exp $";
#endif

#include "common.h"


#include <stdio.h>
#include <string.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"


extern struct resource rt_uniresource;	/* From librt/shoot.c */

int			fr_hit(struct application *ap, struct partition *headp, struct seg *segp), fr_miss(struct application *ap);
struct partition	fr_global_head;

/*
 *			F R _ S T R I N G _ C 2 F
 *
 *  Take a null-terminated C string, and place it with space padding
 *  on the right into a FORTRAN string of given length.
 */
void
fr_string_c2f(register char *fstr, register char *cstr, register int flen)
{
	register int	i;

	for( i=0; i < flen; i++ )  {
		if( (fstr[i] = cstr[i]) == '\0' )  break;
	}
	for( ; i < flen; i++ )
		fstr[i] = ' ';
}

/*
 *			F R _ S T R I N G _ F 2 C
 *
 *  Take a FORTRAN string with a length, and return a pointer to
 *  null terminated copy of that string in a STATIC buffer.
 */
static char *
fr_string_f2c(char *str, int maxlen)
{
	static char	buf[512];
	int	len;
	int	i;

	len = sizeof(buf)-1;
	if( maxlen < len )  len = maxlen;
	strncpy( buf, str, len );
	buf[len] = '\0';

	/* Remove any trailing blanks */
	for( i=strlen(buf)-1; i >= 0; i-- )  {
		if( buf[i] != ' ' && buf[i] != '\n' )  break;
		buf[i] = '\0';
	}
	return(buf);
}

/*
 *			F R D I R
 *
 *  FORTRAN to RT interface for rt_dirbuild()
 *
 *  XXX NOTE Apollo FORTRAN passes string length as extra (invisible)
 *  argument, by value.  Other systems probably are different.
 *
 *  XXX On some systems, the C standard I/O library may need to be
 *  initialized here (eg, Cray).
 */
void
BU_FORTRAN(frdir,FRDIR)(struct rt_i **rtip, char *filename, int *filelen)
{
	char	*file;

	file = fr_string_f2c( filename, *filelen );
	*rtip = rt_dirbuild( file, (char *)0, 0 );
}

/*
 *			F R T R E E
 *
 *  Add another top-level tree to the in-core geometry.
 */
void
BU_FORTRAN(frtree,FRTREE)(int		*fail,
			  struct rt_i	**rtip,
			  char		*objname,
			  int		*objlen)
{
	char	*obj;

	RT_CHECK_RTI(*rtip);

	obj = fr_string_f2c( objname, *objlen );
	*fail = rt_gettree( *rtip, obj );
}

/*
 *	F R P R E P
 *
 */
void
BU_FORTRAN(frprep,FRPREP)(struct rt_i	**rtip)
{
    RT_CHECK_RTI(*rtip);
    rt_prep(*rtip);
}


#define CONTEXT_LEN	6	/* Reserve this many FORTRAN Doubles for each */
struct context {
	double		co_vpriv[3];
	struct soltab	*co_stp;
	char		*co_priv;
	int		co_inflip;
};

/*
 *			F R S H O T
 *
 * NOTE that the [0] element here corresponds with the caller's (1) element.
 */
void
BU_FORTRAN(frshot,FRSHOT)(int			*nloc,		/* input & output */
			  double		*indist,	/* output only */
			  double		*outdist,
			  int			*region_ids,
			  struct context	*context,
			  struct rt_i		**rtip,		/* input only */
			  double		*pt,
			  double		*dir)
{
	struct application	ap;
	register struct partition *pp;
	int		ret;
	register int	i;

	RT_CHECK_RTI(*rtip);

	if( *nloc <= 0 )  {
		bu_log("ERROR frshot: nloc=%d\n", *nloc);
		*nloc = 0;
		return;
	}

	RT_APPLICATION_INIT(&ap);
	ap.a_ray.r_pt[X] = pt[0];
	ap.a_ray.r_pt[Y] = pt[1];
	ap.a_ray.r_pt[Z] = pt[2];
	ap.a_ray.r_dir[X] = dir[0];
	ap.a_ray.r_dir[Y] = dir[1];
	ap.a_ray.r_dir[Z] = dir[2];
	VUNITIZE( ap.a_ray.r_dir );
	ap.a_hit = fr_hit;
	ap.a_miss = fr_miss;
	ap.a_level = 0;
	ap.a_onehit = *nloc * 2;
	ap.a_resource = &rt_uniresource;
	rt_uniresource.re_magic = RESOURCE_MAGIC;
	ap.a_purpose = "frshot";
	ap.a_rt_i = *rtip;

	/*
	 *  Actually fire the ray
	 *  The list of results will be linked to fr_global_head
	 *  by fr_hit(), for further use below.
	 *
	 *  It is a bit risky to rely on the segment structures
	 *  pointed to by the partition list to still be valid,
	 *  because rt_shootray has already put them back on the
	 *  free segment queue.  However, they will remain unchanged
	 *  until the next call to rt_shootray(), so copying out the
	 *  data here will work fine.
	 */
	ret = rt_shootray( &ap );

	if( ret <= 0 )  {
		/* Signal no hits */
		*nloc = 0;
		return;
	}

	/* Copy hit information from linked list to argument arrays */
	pp = fr_global_head.pt_forw;
	if( pp == &fr_global_head )  {
		*nloc = 0;
		return;
	}
	for( i=0 ; i < *nloc; i++, pp=pp->pt_forw )  {
		register struct context	*ctp;

		if( pp == &fr_global_head )  break;
		indist[i] = pp->pt_inhit->hit_dist;
		outdist[i] = pp->pt_outhit->hit_dist;
		/* This might instead be reg_regionid ?? */
		region_ids[i] = pp->pt_regionp->reg_bit+1;
		ctp = &context[i];
		ctp->co_stp = pp->pt_inseg->seg_stp;
		VMOVE( ctp->co_vpriv, pp->pt_inhit->hit_vpriv);
		ctp->co_priv = pp->pt_inhit->hit_private;
		ctp->co_inflip = pp->pt_inflip;
	}
	*nloc = i;	/* Will have been incremented above, if successful */

	/* Free linked list storage */
	for( pp = fr_global_head.pt_forw; pp != &fr_global_head;  )  {
		register struct partition *newpp;

		newpp = pp;
		pp = pp->pt_forw;
		FREE_PT(newpp, (&rt_uniresource));
	}
}

int
fr_hit(struct application *ap, struct partition *headp, struct seg *segp)
{
	if( headp->pt_forw == headp )  return(0);

	/* Steal the linked list, hang it off a global header */
	fr_global_head.pt_forw = headp->pt_forw;
	fr_global_head.pt_back = headp->pt_back;
	fr_global_head.pt_back->pt_forw = &fr_global_head;
	fr_global_head.pt_forw->pt_back = &fr_global_head;

	headp->pt_forw = headp->pt_back = headp;
	return(1);
}

int
fr_miss(struct application *ap)
{
	fr_global_head.pt_forw = fr_global_head.pt_back = &fr_global_head;
	return(0);
}
/*
 *			F R N O R M
 *
 *  Given the data returned by a previous call to frshot(),
 *  compute the surface normal at the entry point to the indicated solid.
 *
 *  In order to save storage, and copying time, frshot() saved only
 *  the minimum amount of data required.  Here, the hit and xray
 *  structures are reconstructed, suitable for passing to RT_HIT_NORM.
 */
void
BU_FORTRAN(frnorm,FRNORM)(double		*normal,	/* output only */
			  int			*index,		/* input only */
			  double		*indist,
			  struct context	*context,
			  double		*pt,
			  double		*dir)
{
	register struct context	*ctp;
	struct hit	hit;
#if 0
	struct xray	ray;
#endif
	struct soltab	*stp;
	register int	i;

	i = *index-1;		/* Selects which inhit is used */

#if 0
	/* Reconstruct the ray structure */
	ray.r_pt[X] = pt[0];
	ray.r_pt[Y] = pt[1];
	ray.r_pt[Z] = pt[2];
	ray.r_dir[X] = dir[0];
	ray.r_dir[Y] = dir[1];
	ray.r_dir[Z] = dir[2];
	/* Unitize r_dir? */
#endif

	/* Reconstruct the hit structure */
	hit.hit_dist = indist[i];
	ctp = &context[i];
	stp = ctp->co_stp;
	VMOVE( hit.hit_vpriv, ctp->co_vpriv );
	hit.hit_private = ctp->co_priv;

#if 0
	RT_HIT_NORMAL( normal, &hit, stp, &ray, ctp->co_inflip );
#else
	/* The new macro doesn't use ray argument */
	RT_HIT_NORMAL( normal, &hit, stp, NULL, ctp->co_inflip );
#endif
}

/*
 *			F R N R E G
 *
 *  Return the number of regions that exist in the model
 */
void
BU_FORTRAN(frnreg,FRNREG)(int *nreg, struct rt_i **rtip)
{
	*nreg = (*rtip)->nregions;
}

/*
 *			F R N A M E
 *
 *  Given a region number (range 1..nregions), return the
 *  right-hand portion of the name in the provided buffer.
 *
 *  XXX buflen is provided "automaticly" on the Apollo.
 */
void
BU_FORTRAN(frname,FRNAME)(char		*fbuf,
			  int		*region_num,
			  struct rt_i	**rtip,
			  int		fbuflen)
{
	register struct region *rp;
	int	i;
	int	len;
	int	offset;
	int	rnum;
	char	buf[512];

	rnum = *region_num-1;
	if( rnum < 0 || rnum > (*rtip)->nregions )  {
		sprintf( buf, "Region id %d out of range, max=%ld",
			*region_num, (long)((*rtip)->nregions) );
		fr_string_c2f( fbuf, buf, fbuflen );
		return;
	}
	for( BU_LIST_FOR( rp, region, &((*rtip)->HeadRegion) ) )  {
		if( rp->reg_bit != rnum )  continue;
		len = strlen( rp->reg_name );
		offset = 0;
		if( len >= fbuflen )  {
			offset = len-(fbuflen+1);
			len -= (fbuflen+1);
		}
		strncpy( fbuf, rp->reg_name+offset, len );
		for( i=offset+len; i < fbuflen; i++ )
			fbuf[i] = ' ';
		return;
	}
	sprintf(fbuf, "Unable to find region %d", *region_num );
	fr_string_c2f( fbuf, buf, fbuflen );
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a30 4
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.15 2007/01/23 01:13:36 brlcad Exp $";
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.14 2007/01/21 04:45:43 brlcad Exp $";
a42 1

@


14.14
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.13 2007/01/20 14:36:54 brlcad Exp $";
@


14.13
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
a28 1
 *
a35 1
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.12 2006/09/16 02:04:24 lbutler Exp $";
d388 1
a388 1
/*@@}*/
@


14.12
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.11 2006/01/18 06:46:17 brlcad Exp $";
@


14.11
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup librt */
a38 1
/*@@}*/
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.10 2005/12/08 00:05:19 brlcad Exp $";
d390 1
@


14.10
log
@RT_APPLICATION_INIT instead of bzero
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.9 2005/10/23 04:44:35 brlcad Exp $";
@


14.9
log
@trailing ws
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.8 2005/09/09 05:07:46 brlcad Exp $";
d191 1
a191 1
	bzero( (char *)&ap, sizeof(ap));
@


14.8
log
@consistency, BRL-CAD not BRL CAD
@
text
@d29 1
a29 1
 *  
d32 1
a32 1
 *  
d37 1
a37 1
 *  
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.7 2005/08/12 22:31:07 lbutler Exp $";
d70 1
a70 1
	
d166 1
a166 1
 * NOTE that the [0] element here corresponds with the caller's (1) element. 
d306 1
a306 1
	
d326 1
a326 1
	
@


14.7
log
@Doxygen changes
@
text
@d27 1
a27 1
 *  of the BRL CAD Package.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.6 2005/01/30 20:30:58 brlcad Exp $";
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 2
 *  of the BRL-CAD Package.
 *
d29 1
d32 1
a32 1
 *
d37 1
a37 1
 *
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header$";
d70 1
a70 1

d166 1
a166 1
 * NOTE that the [0] element here corresponds with the caller's (1) element.
d306 1
a306 1

d326 1
a326 1

@


14.6
log
@update copyright to 2005
@
text
@d21 3
a24 1
 *
d39 1
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/fortray.c,v 14.5 2004/12/21 06:38:20 morrison Exp $";
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/fortray.c,v 14.4 2004/12/21 06:18:45 morrison Exp $";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/fortray.c,v 14.3 2004/12/21 05:45:23 morrison Exp $";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/fortray.c,v 14.2 2004/12/21 04:18:20 morrison Exp $";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/fortray.c,v 14.1 2004/11/16 19:42:16 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 3

/*
 *			F O R T R A Y . C
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/fortray.c,v 1.3 2004/08/02 23:01:49 morrison Exp $";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/fortray.c,v 1.2 2004/06/25 19:11:28 butler Exp $";
d372 10
@


1.2
log
@Upgrades to get it going again on linux.  I would venture to guess that it hasn't been used since
Mike visited INEL in the mid-90's.  Really ought to test it out on several platforms again.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/src/librt/fortray.c,v 1.1 2004/05/20 15:19:59 morrison Exp $";
d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d1 1
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/fortray.c,v 11.13 2004/05/10 15:30:46 erikg Exp $";
a37 23
/*
 *  Macro 'F' is used to take the 'C' function name,
 *  and convert it to the convention used for a particular system.
 *  Both lower-case and upper-case alternatives have to be provided
 *  because there is no way to get the C preprocessor to change the
 *  case of a token.
 *
 *  See also the code in ../libplot3/fortran.c
 */
#if CRAY
#	define	F(lc,uc)	uc
#endif
#if defined(apollo) || defined(mips) || defined(aux)
	/* Lower case, with a trailing underscore */
#ifdef __STDC__
#	define	F(lc,uc)	lc ## _
#else
#	define	F(lc,uc)	lc/**/_
#endif
#endif
#if !defined(F)
#	define	F(lc,uc)	lc
#endif
a75 1
	buf[len] = '\0';
d78 1
d100 1
a100 4
F(frdir,FRDIR)( rtip, filename, filelen )
struct rt_i	**rtip;
char		*filename;
int		filelen;
d104 1
a104 1
	file = fr_string_f2c( filename, filelen );
d114 4
a117 5
F(frtree,FRTREE)( fail, rtip, objname, objlen )
int		*fail;
struct rt_i	**rtip;
char		*objname;
int		objlen;
d121 3
a123 1
	obj = fr_string_f2c( objname, objlen );
d127 12
d153 8
a160 9
F(frshot,FRSHOT)( nloc, indist, outdist, region_ids, context, rtip, pt, dir )
int		*nloc;		/* input & output */
double		*indist;	/* output only */
double		*outdist;
int		*region_ids;
struct context	*context;
struct rt_i	**rtip;		/* input only */
double		*pt;
double		*dir;
d167 2
d186 1
a186 1
	ap.a_onehit = 1;		/* Should be parameter XXX */
d218 1
a218 1
	for( i=0; i < *nloc; i++, pp=pp->pt_forw )  {
d276 6
a281 7
F(frnorm,FRNORM)( normal, index, indist, context, pt, dir )
double		*normal;	/* output only */
int		*index;		/* input only */
double		*indist;
struct context	*context;
double		*pt;
double		*dir;
d325 1
a325 3
F(frnreg,FRNREG)( nreg, rtip )
int		*nreg;
struct rt_i	**rtip;
d339 4
a342 5
F(frname,FRNAME)( fbuf, region_num, rtip, fbuflen )
char		*fbuf;
int		*region_num;
struct rt_i	**rtip;
int		fbuflen;
@

