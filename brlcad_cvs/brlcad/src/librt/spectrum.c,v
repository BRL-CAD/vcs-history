head	14.17;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.6
	rel-7-10-2:14.16
	rel-7-10-0:14.14
	rel-7-8-4:14.10
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.17
date	2007.12.17.02.16.54;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.05.18.04.13.50;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.05.14.21.04.32;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.42;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.39;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.55;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.09.16.02.04.26;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.31.03;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.07.18.58;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.48;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.21;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.04.18.16.14;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.10;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@removal of the FAST declaration throughout.  now using register or letting the compiler sort things out.
@
text
@/*                      S P E C T R U M . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup librt */
/** @@{ */
/** @@file spectrum.c
 *
 *  An application of the 'tabdata' package to spectral data.
 *
 *  (Note that there is also a rttherm/spectrum.c)
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 *  Inspired by -
 *	Roy Hall and his book "Illumination and Color in Computer
 *	Generated Imagery", Springer Verlag, New York, 1989.
 *	ISBN 0-387-96774-5
 *
 *  With thanks to Russ Moulton Jr, EOSoft Inc. for his "rad.c" module.
 */
/** @@} */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.16 2007/05/18 04:13:50 brlcad Exp $ (ARL)";
#endif

#include "common.h"

#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "spectrum.h"

/*
 *			R T _ C I E _ X Y Z
 *
 *  This is the data for the CIE_XYZ curves take from Judd and
 *  Wyszecki (1975), table 2.6, these are for the 1931 standard
 *  observer with a 2-degree visual field.
 *  From Roy Hall, pg 228.
 */
const double	rt_CIE_XYZ[81][4] = {
    {380, 0.0014, 0.0000, 0.0065}, {385, 0.0022, 0.0001, 0.0105},
    {390, 0.0042, 0.0001, 0.0201}, {395, 0.0076, 0.0002, 0.0362},
    {400, 0.0143, 0.0004, 0.0679}, {405, 0.0232, 0.0006, 0.1102},
    {410, 0.0435, 0.0012, 0.2074}, {415, 0.0776, 0.0022, 0.3713},
    {420, 0.1344, 0.0040, 0.6456}, {425, 0.2148, 0.0073, 1.0391},
    {430, 0.2839, 0.0116, 1.3856}, {435, 0.3285, 0.0168, 1.6230},
    {440, 0.3483, 0.0230, 1.7471}, {445, 0.3481, 0.0298, 1.7826},
    {450, 0.3362, 0.0380, 1.7721}, {455, 0.3187, 0.0480, 1.7441},
    {460, 0.2908, 0.0600, 1.6692}, {465, 0.2511, 0.0739, 1.5281},
    {470, 0.1954, 0.0910, 1.2876}, {475, 0.1421, 0.1126, 1.0419},
    {480, 0.0956, 0.1390, 0.8130}, {485, 0.0580, 0.1693, 0.6162},
    {490, 0.0320, 0.2080, 0.4652}, {495, 0.0147, 0.2586, 0.3533},
    {500, 0.0049, 0.3230, 0.2720}, {505, 0.0024, 0.4073, 0.2123},
    {510, 0.0093, 0.5030, 0.1582}, {515, 0.0291, 0.6082, 0.1117},
    {520, 0.0633, 0.7100, 0.0782}, {525, 0.1096, 0.7932, 0.0573},
    {530, 0.1655, 0.8620, 0.0422}, {535, 0.2257, 0.9149, 0.0298},
    {540, 0.2904, 0.9540, 0.0203}, {545, 0.3597, 0.9803, 0.0134},
    {550, 0.4334, 0.9950, 0.0087}, {555, 0.5121, 1.0000, 0.0057},
    {560, 0.5945, 0.9950, 0.0039}, {565, 0.6784, 0.9786, 0.0027},
    {570, 0.7621, 0.9520, 0.0021}, {575, 0.8425, 0.9154, 0.0018},
    {580, 0.9163, 0.8700, 0.0017}, {585, 0.9786, 0.8163, 0.0014},
    {590, 1.0263, 0.7570, 0.0011}, {595, 1.0567, 0.6949, 0.0010},
    {600, 1.0622, 0.6310, 0.0008}, {605, 1.0456, 0.5668, 0.0006},
    {610, 1.0026, 0.5030, 0.0003}, {615, 0.9384, 0.4412, 0.0002},
    {620, 0.8544, 0.3810, 0.0002}, {625, 0.7514, 0.3210, 0.0001},
    {630, 0.6424, 0.2650, 0.0000}, {635, 0.5419, 0.2170, 0.0000},
    {640, 0.4479, 0.1750, 0.0000}, {645, 0.3608, 0.1382, 0.0000},
    {650, 0.2835, 0.1070, 0.0000}, {655, 0.2187, 0.0816, 0.0000},
    {660, 0.1649, 0.0610, 0.0000}, {665, 0.1212, 0.0446, 0.0000},
    {670, 0.0874, 0.0320, 0.0000}, {675, 0.0636, 0.0232, 0.0000},
    {680, 0.0468, 0.0170, 0.0000}, {685, 0.0329, 0.0119, 0.0000},
    {690, 0.0227, 0.0082, 0.0000}, {695, 0.0158, 0.0057, 0.0000},
    {700, 0.0114, 0.0041, 0.0000}, {705, 0.0081, 0.0029, 0.0000},
    {710, 0.0058, 0.0021, 0.0000}, {715, 0.0041, 0.0015, 0.0000},
    {720, 0.0029, 0.0010, 0.0000}, {725, 0.0020, 0.0007, 0.0000},
    {730, 0.0014, 0.0005, 0.0000}, {735, 0.0010, 0.0004, 0.0000},
    {740, 0.0007, 0.0002, 0.0000}, {745, 0.0005, 0.0002, 0.0000},
    {750, 0.0003, 0.0001, 0.0000}, {755, 0.0002, 0.0001, 0.0000},
    {760, 0.0002, 0.0001, 0.0000}, {765, 0.0001, 0.0000, 0.0000},
    {770, 0.0001, 0.0000, 0.0000}, {775, 0.0001, 0.0000, 0.0000},
    {780, 0.0000, 0.0000, 0.0000}
};

/*
 *			R T _ S P E C T _ M A K E _ C I E _ X Y Z
 *
 *  Given as input a spectral sampling distribution,
 *  generate the 3 curves to match the human eye's response
 *  in CIE color parameters X, Y, and Z.
 *  XYZ space can be readily converted to RGB with a 3x3 matrix.
 *
 *  The tabulated data is linearly interpolated.
 *
 *  Pointers to the three spectral weighting functions are "returned",
 *  storage for the X, Y, and Z curves is allocated by this routine
 *  and must be freed by the caller.
 */
void
rt_spect_make_CIE_XYZ(struct bn_tabdata **x, struct bn_tabdata **y, struct bn_tabdata **z, const struct bn_table *tabp)
{
	struct bn_tabdata	*a, *b, *c;
	fastf_t	xyz_scale;
	int	i;
	int	j;

	BN_CK_TABLE(tabp);

	i = bn_table_interval_num_samples( tabp, 430., 650. );
	if( i <= 4 )  bu_log("rt_spect_make_CIE_XYZ: insufficient samples (%d) in visible band\n", i);

	BN_GET_TABDATA( a, tabp );
	BN_GET_TABDATA( b, tabp );
	BN_GET_TABDATA( c, tabp );
	*x = a;
	*y = b;
	*z = c;

	/* No CIE data below 380 nm */
	for( j=0; tabp->x[j] < 380 && j < tabp->nx; j++ )  {
		a->y[j] = b->y[j] = c->y[j] = 0;
	}

	/* Traverse the CIE table.  Produce as many output values as possible
	 * before advancing to next CIE table entry.
	 */
	for( i = 0; i < 81-1; i++ )  {
		fastf_t	fract;		/* fraction from [i] to [i+1] */

again:
		if( j >= tabp->nx )  break;
		if( tabp->x[j] < rt_CIE_XYZ[i][0] ) bu_bomb("rt_spect_make_CIE_XYZ assertion1 failed\n");
		if( tabp->x[j] >= rt_CIE_XYZ[i+1][0] )  continue;
		/* The CIE table has 5nm spacing */
		fract = (tabp->x[j] - rt_CIE_XYZ[i][0] ) / 5;
		if( fract < 0 || fract > 1 )  bu_bomb("rt_spect_make_CIE_XYZ assertion2 failed\n");
		a->y[j] = (1-fract) * rt_CIE_XYZ[i][1] + fract * rt_CIE_XYZ[i+1][1];
		b->y[j] = (1-fract) * rt_CIE_XYZ[i][2] + fract * rt_CIE_XYZ[i+1][2];
		c->y[j] = (1-fract) * rt_CIE_XYZ[i][3] + fract * rt_CIE_XYZ[i+1][3];
		j++;
		goto again;
	}

	/* No CIE data above 780 nm */
	for( ; j < tabp->nx; j++ )  {
		a->y[j] = b->y[j] = c->y[j] = 0;
	}

	/* Normalize the curves so that area under Y curve is 1.0 */
	xyz_scale = bn_tabdata_area2( b );
	if( fabs(xyz_scale) < VDIVIDE_TOL )  {
		bu_log("rt_spect_make_CIE_XYZ(): Area = 0 (no luminance) in this part of the spectrum, skipping normalization step\n");
		return;
	}
	xyz_scale = 1 / xyz_scale;
	bn_tabdata_scale( a, a, xyz_scale );
	bn_tabdata_scale( b, b, xyz_scale );
	bn_tabdata_scale( c, c, xyz_scale );
}

/*
 *			R T _ S P E C T _ R E F L E C T A N C E _ R G B
 *
 *  Given reflectance data (in range 0..1) in terms of RGB color,
 *  convert that to a spectral reflectance curve.
 *
 *  The assumption here is that the spectrum is made up of exactly three
 *  non-overlapping bands, and the reflectance is constant over each:
 *
 *	red	572nm to 1,000,000nm	(includes the full IR band)
 *	green	492nm to 572nm		(just green)
 *	blue	1nm to 492nm		(includes Ultraviolet)
 *
 *  As the caller may be doing a lot of this, the caller is expected
 *  to provide a pointer to a valid bn_tabdata structure which is
 *  to be filled in.  Allowing caller to re-cycle them rather than
 *  doing constant malloc/free cycle.
 */
void
rt_spect_reflectance_rgb(struct bn_tabdata *curve, const float *rgb)
{
	register int	i;
	register const struct bn_table	*tabp;

	BN_CK_TABDATA(curve);
	tabp = curve->table;
	BN_CK_TABLE(tabp);

	/* Fill in blue values, everything up to but not including 492nm */
	for( i=0; i < tabp->nx; i++ )  {
		if( tabp->x[i] >= 492 )  break;
		curve->y[i] = rgb[2];
	}

	/* Fill in green values, everything up to but not including 572nm */
	for( ; i < tabp->nx; i++ )  {
		if( tabp->x[i] >= 572 )  break;
		curve->y[i] = rgb[1];
	}

	/* Fill in red values, everything from here up to end of table */
	for( ; i < tabp->nx; i++ )  {
		curve->y[i] = rgb[0];
	}
}

#define PLANCK_C1	37415		/* watts um^4 cm^-2 */
#define PLANCK_C2	14387.86	/* um K */
/* Russ gives these values at 37,415 and 14,388 */
/* Handbook of Physics and Chem gives these values as 37,403 and 14,384 */
/* Aircraft Combat Surv gives these values as 37,483.2 and 14,387.86 */

/* Requires wavelength _w in um, not nm, returns units: W / cm**2 / um */
#define	PLANCK(_w,_tempK)	\
	(PLANCK_C1/(_w*_w*_w*_w*_w*(exp(PLANCK_C2/(_w*_tempK))-1)))

/*
 *			R T _ S P E C T _ B L A C K _ B O D Y
 *
 *  Integrate Planck's Radiation Formula for a black body radiator
 *  across the given spectrum.
 *  Returns radiant emittance in W/cm**2 for each wavelength interval.
 *
 *  Based upon code kindly provided by Russ Moulton, Jr., EOSoft Inc.
 *  Compute at 'n-1' wavelengths evenly spaced between ax and bx.
 */
void
rt_spect_black_body(struct bn_tabdata *data, double temp, unsigned int n)

					/* Degrees Kelvin */
					/* # wavelengths to eval at */
{
	const struct bn_table	*tabp;
	int				j;

	BN_CK_TABDATA(data);
	tabp = data->table;
	BN_CK_TABLE(tabp);

	if(bu_debug&BU_DEBUG_TABDATA)  {
		bu_log("rt_spect_black_body( x%x, %g degK ) %g um to %g um\n",
			data, temp,
			tabp->x[0] * 0.001,	/* nm to um */
			tabp->x[tabp->nx] * 0.001	/* nm to um */
		);
	}

	if( n < 3 )  n = 3;

	for( j = 0; j < tabp->nx; j++ )  {
		double	ax;		/* starting wavelength, um */
		double	bx;		/* ending wavelength, um */
		double	dx;		/* wavelength interval, um */
		double	w_sum;		/* sum over wavelengths */
		double	wavlen;		/* current wavelength */
		unsigned long i;

		ax = tabp->x[j] * 0.001;	/* nm to um */
		bx = tabp->x[j+1] * 0.001;	/* nm to um */
		dx = (bx - ax) / (double)n;

		w_sum = 0;
		wavlen = ax;
		for (i=0; i<n; i++)  {
			w_sum += PLANCK(wavlen, temp);
			wavlen += dx;
		}
		w_sum *= dx;

		data->y[j] = w_sum;
	}
}

/*
 *			R T _ S P E C T _ B L A C K _ B O D Y _ F A S T
 *
 *  Returns radiant emittance for each spectral interval in the given
 *  spectrum in units of watts/cm**2.
 *  Integrate each wavelength interval of spectral radiant emittance,
 *  by fitting with a rectangle (approximating curve with a horizontal line).
 *  For narrow spacing in wavelength this is OK, but with large spacing
 *  this tends to over-predict the power by 20%, due to the sharp
 *  (exponential) slope of the curve.
 *  With coarse spacing, or when unsure, use rt_spect_black_body().
 */
void
rt_spect_black_body_fast(struct bn_tabdata *data, double temp)

					/* Degrees Kelvin */
{
	const struct bn_table	*tabp;
	int				j;

	BN_CK_TABDATA(data);
	tabp = data->table;
	BN_CK_TABLE(tabp);

	if(bu_debug&BU_DEBUG_TABDATA)  {
		bu_log("rt_spect_black_body_fast( x%x, %g degK )\n",
			data, temp );
	}

	for( j = 0; j < tabp->nx; j++ )  {
		data->y[j] = PLANCK( (tabp->x[j]*0.001), temp ) *
			(tabp->x[j+1] - tabp->x[j]) * 0.001;
	}
}

/*
 *			R T _ S P E C T _ B L A C K _ B O D Y _ P O I N T S
 *
 *  Returns point-sampled values of spectral radiant emittance,
 *  in units of watts/cm**2/um,
 *  straight from Planck's black-body radiation formula.
 */
void
rt_spect_black_body_points(struct bn_tabdata *data, double temp)

					/* Degrees Kelvin */
{
	const struct bn_table	*tabp;
	int				j;

	BN_CK_TABDATA(data);
	tabp = data->table;
	BN_CK_TABLE(tabp);

	if(bu_debug&BU_DEBUG_TABDATA)  {
		bu_log("rt_spect_black_body_points( x%x, %g degK )\n",
			data, temp );
	}

	for( j = 0; j < tabp->nx; j++ )  {
		data->y[j] = PLANCK( (tabp->x[j]*0.001), temp );
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.15 2007/05/14 21:04:32 brlcad Exp $ (ARL)";
d152 1
a152 1
		FAST fastf_t	fract;		/* fraction from [i] to [i+1] */
@


14.15
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.14 2007/01/27 01:41:42 brlcad Exp $ (ARL)";
d156 1
a156 1
		if( tabp->x[j] < rt_CIE_XYZ[i][0] ) rt_bomb("rt_spect_make_CIE_XYZ assertion1 failed\n");
d160 1
a160 1
		if( fract < 0 || fract > 1 )  rt_bomb("rt_spect_make_CIE_XYZ assertion2 failed\n");
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.13 2007/01/23 01:13:39 brlcad Exp $ (ARL)";
d176 1
a176 1
		rt_log("rt_spect_make_CIE_XYZ(): Area = 0 (no luminance) in this part of the spectrum, skipping normalization step\n");
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.12 2007/01/21 04:45:45 brlcad Exp $ (ARL)";
d254 2
a255 2
      			     		/* Degrees Kelvin */
            		  		/* # wavelengths to eval at */
d313 1
a313 1
      			     		/* Degrees Kelvin */
d343 1
a343 1
      			     		/* Degrees Kelvin */
@


14.12
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.11 2007/01/20 14:36:55 brlcad Exp $ (ARL)";
@


14.11
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
a35 1
 *
d43 1
a43 1
/*@@}*/
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.10 2006/09/16 02:04:26 lbutler Exp $ (ARL)";
@


14.10
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.9 2006/01/18 06:46:17 brlcad Exp $ (ARL)";
@


14.9
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup librt */
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.8 2005/10/23 04:44:36 brlcad Exp $ (ARL)";
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.7 2005/08/12 22:31:08 lbutler Exp $ (ARL)";
@


14.7
log
@Doxygen changes
@
text
@d31 1
a31 1
 *  
d35 1
a35 1
 *  
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.6 2005/01/30 20:31:03 brlcad Exp $ (ARL)";
d234 1
a234 1
#define PLANCK_C2	14387.86	/* um K */ 	
d255 1
a255 1
                 	      
d314 1
a314 1
                 	      
d344 1
a344 1
                 	      
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d31 1
a31 1
 *
d35 1
a35 1
 *
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d234 1
a234 1
#define PLANCK_C2	14387.86	/* um K */
d255 1
a255 1

d314 1
a314 1

d344 1
a344 1

@


14.6
log
@update copyright to 2005
@
text
@d21 3
a24 1
 *
d44 2
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/spectrum.c,v 14.5 2004/12/21 07:18:58 morrison Exp $ (ARL)";
@


14.5
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/spectrum.c,v 14.4 2004/12/21 06:18:48 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a33 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/spectrum.c,v 14.3 2004/12/21 05:45:24 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/spectrum.c,v 14.2 2004/12/21 04:18:21 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/spectrum.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			S P E C T R U M . C
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/spectrum.c,v 1.2 2004/08/04 18:16:14 morrison Exp $ (ARL)";
@


1.2
log
@add the venerable common.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/librt/spectrum.c,v 1.1 2004/05/20 15:20:10 morrison Exp $ (ARL)";
d342 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/spectrum.c,v 11.7 2004/04/05 08:48:58 morrison Exp $ (ARL)";
d28 2
@

