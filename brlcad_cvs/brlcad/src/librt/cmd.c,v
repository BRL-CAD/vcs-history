head	14.17;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.6
	rel-7-10-2:14.15
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.4
	rel-7-6-0:14.8
	rel-7-4-2:14.7
	rel-7-4-branch:14.7.0.2
	bobWinPort:14.8.0.2
	rel-7-4-0:14.7
	rel-7-2-6:14.7
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.17
date	2007.12.01.21.47.12;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.09.15.16.23.12;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.27.01.41.38;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.53;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.09.16.02.04.24;	author lbutler;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.35;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.08.12.22.31.07;	author lbutler;	state Exp;
branches
	14.8.4.1;
next	14.7;

14.7
date	2005.06.03.05.22.37;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.01.30.20.30.57;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.45;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.19;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.56;	author morrison;	state Exp;
branches;
next	;

14.8.4.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@more flawfinder level 4 quellage, mostly str*() buffer boundary limits.
@
text
@/*                           C M D . C
 * BRL-CAD
 *
 * Copyright (c) 1987-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup ray */
/** @@{ */
/** @@file librt/cmd.c
 *
 *  Read and parse a viewpoint-control command stream.
 *  This module is intended to be common to all programs which
 *  read this type of command stream;  the routines to handle
 *  the various keywords should go in application-specific modules.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */
/** @@} */

#ifndef lint
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.16 2007/09/15 16:23:12 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <ctype.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"

/*
 *			R T _ R E A D _ C M D
 *
 *  Read one semi-colon terminated string of arbitrary length from
 *  the given file into a dynamicly allocated buffer.
 *  Various commenting and escaping conventions are implemented here.
 *
 *  Returns:
 *	NULL	On EOF
 *	char *	On good read
 */
char *
rt_read_cmd(register FILE *fp)
{
	register int	c;
	register char	*buf;
	register int	curpos;
	register int	curlen;

	curpos = 0;
	curlen = 400;
	buf = bu_malloc( curlen, "rt_read_cmd command buffer" );

	do  {
		c = fgetc(fp);
		if( c == EOF )  {
			c = '\0';
		} else if( c == '#' )  {
			/* All comments run to the end of the line */
			while( (c = fgetc(fp)) != EOF && c != '\n' )  ;
			continue;
		} else if( c == '\n' )  {
			c = ' ';
		} else if( c == ';' )  {
			c = '\0';
		} else if( c == '\\' )  {
			/*  Backslash takes next character literally.
			 *  EOF detection here is not a problem, next
			 *  pass will detect it.
			 */
			c = fgetc(fp);
		} else if( !isascii(c) )  {
			c = '?';
		}
		if( c != '\0' && curpos == 0 && isspace(c) )  {
			/*  Dispose of leading white space.
			 *  Necessary to slurp up what newlines turn into.
			 */
			continue;
		}
		if( curpos >= curlen )  {
			curlen *= 2;
			buf = bu_realloc( buf, curlen, "rt_read_cmd command buffer" );
		}
		buf[curpos++] = c;
	} while( c != '\0' );
	if( curpos <= 1 )  {
		bu_free( buf, "rt_read_cmd command buffer (EOF)" );
		return( (char *)0 );		/* EOF */
	}
	return( buf );				/* OK */
}

#define MAXWORDS	4096	/* Max # of args per command */

/*
 *			R T _ S P L I T _ C M D
 *
 *  Build argv[] array from input buffer, by splitting whitespace
 *  separated "words" into null terminated strings.
 *  The input buffer is altered by this process.
 *
 *  Returns -
 *	 0	no words in input
 *	nwords	number of words of input, now in argv[]
 */
int
rt_split_cmd(char **argv, int lim, register char *lp)
{
	register int	nwords;			/* number of words seen */
	register char	*lp1;

	argv[0] = "_NIL_";		/* sanity */

	while( *lp != '\0' && isspace( *lp ) )
		lp++;

	if( *lp == '\0' )
		return(0);		/* No words */

#ifdef HAVE_SHELL_ESCAPE
	/* Handle "!" shell escape char so the shell can parse the line */
	if( *lp == '!' )  {
		int	ret;
		ret = system( lp+1 );
		if( ret != 0 )  {
			perror("system(3)");
			bu_log("rt_split_cmd() FAILED: !%s\n", lp);
		}
		return(0);		/* No words */
	}
#endif

	/* some non-space string has been seen, argv[0] is set */
	nwords = 1;
	argv[0] = lp;

	for( ; *lp != '\0'; lp++ )  {
		if( !isspace( *lp ) )
			continue;	/* skip over current word */

		*lp = '\0';		/* terminate current word */
		lp1 = lp + 1;
		if( *lp1 != '\0' && !isspace( *lp1 ) )  {
			/* Begin next word */
			if( nwords >= lim-1 )
				break;	/* argv[] full */

			argv[nwords++] = lp1;
		}
	}
	argv[nwords] = (char *)0;	/* safety */
	return( nwords );
}

/*
 *			R T _ D O _ C M D
 *
 *  Slice up input buffer into whitespace separated "words",
 *  look up the first word as a command, and if it has the
 *  correct number of args, call that function.
 *
 *  Expected to return -1 to halt command processing loop.
 *
 *  Based heavily on mged/cmd.c by Chuck Kennedy.
 */
int
rt_do_cmd(struct rt_i *rtip, const char *ilp, register const struct command_tab *tp)
						/* FUTURE:  for globbing */


{
	register int	nwords;			/* number of words seen */
	char		*cmd_args[MAXWORDS+1];	/* array of ptrs to args */
	char 		*lp;
	int		retval;

	lp = bu_strdup(ilp);

	nwords = rt_split_cmd( cmd_args, MAXWORDS, lp );
	if( nwords <= 0 )
		return(0);	/* No command to process */


	for( ; tp->ct_cmd != (char *)0; tp++ )  {
		if( cmd_args[0][0] != tp->ct_cmd[0] ||
				/* the length of "n" is not significant, just needs to be big enough */
		    strncmp( cmd_args[0], tp->ct_cmd, MAXWORDS ) != 0 )
			continue;
		if( (nwords >= tp->ct_min) && (nwords <= tp->ct_max) ) {
		    retval = tp->ct_func( nwords, cmd_args );
		    bu_free(lp, "rt_do_cmd lp");
		    return retval;
		}
		bu_log("rt_do_cmd Usage: %s %s\n\t%s\n",
			tp->ct_cmd, tp->ct_parms, tp->ct_comment );
		bu_free(lp, "rt_do_cmd lp");
		return(-1);		/* ERROR */
	}
	bu_log("rt_do_cmd(%s):  command not found\n", cmd_args[0]);
	bu_free(lp, "rt_do_cmd lp");
	return(-1);			/* ERROR */
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d41 1
a41 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.15 2007/01/27 01:41:38 brlcad Exp $ (BRL)";
d201 1
a201 2
	lp = bu_malloc(strlen(ilp)+1, "rt_do_cmd lp");
	strcpy(lp, ilp);
@


14.15
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d41 1
a41 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.14 2007/01/23 01:13:36 brlcad Exp $ (BRL)";
a45 1

a47 1
#ifdef HAVE_STRING_H
d49 1
a49 3
#else
#include <strings.h>
#endif
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d41 1
a41 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.13 2007/01/21 04:45:43 brlcad Exp $ (BRL)";
a46 1

d196 1
a196 1
           		      			/* FUTURE:  for globbing */
@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d41 1
a41 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.12 2007/01/20 14:36:53 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d39 1
a39 1
/*@@}*/
d42 1
a42 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.11 2006/09/16 02:04:24 lbutler Exp $ (BRL)";
@


14.11
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1987-2006 United States Government as represented by
d42 1
a42 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.10 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup librt */
d24 1
a24 1
/** @@file ./librt/cmd.c
d42 1
a42 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.9 2005/10/23 04:44:35 brlcad Exp $ (BRL)";
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1987-2005 United States Government as represented by
d42 1
a42 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.8 2005/08/12 22:31:07 lbutler Exp $ (BRL)";
@


14.8
log
@Doxygen changes
@
text
@d32 1
a32 1
 *  
d37 1
a37 1
 *  
d42 1
a42 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.7 2005/06/03 05:22:37 brlcad Exp $ (BRL)";
d199 2
a200 2
             		    
                                 	    
@


14.8.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d37 1
a37 1
 *
d42 1
a42 1
static const char RCScmd[] = "@@(#)$Header$ (BRL)";
d199 2
a200 2


@


14.7
log
@the command string to rt_do_cmd is no longer modified by this routine so that the caller may use static command strings
@
text
@d21 4
a24 2
/** @@file cmd.c
 *
d39 2
d42 1
a42 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.6 2005/01/30 20:30:57 brlcad Exp $ (BRL)";
@


14.6
log
@update copyright to 2005
@
text
@d38 1
a38 1
static const char RCScmd[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/cmd.c,v 14.5 2004/12/21 06:38:20 morrison Exp $ (BRL)";
a186 1
 *  The input buffer is altered in the process.
d193 1
a193 1
rt_do_cmd(struct rt_i *rtip, register char *lp, register const struct command_tab *tp)
d200 5
d216 4
a219 3
		if( (nwords >= tp->ct_min) &&
		    (nwords <= tp->ct_max) )  {
			return( tp->ct_func( nwords, cmd_args ) );
d223 1
d227 1
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1987-2004 United States Government as represented by
d38 1
a38 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/src/librt/cmd.c,v 14.4 2004/12/21 06:18:45 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1987-2004 by the United States Army.
 *	All rights reserved.
d38 1
a38 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/src/librt/cmd.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d41 1
a41 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/src/librt/cmd.c,v 14.2 2004/12/21 04:18:19 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d41 1
a41 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/src/librt/cmd.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			C M D . C
d41 1
a41 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/src/librt/cmd.c,v 1.3 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/src/librt/cmd.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (BRL)";
d207 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/src/librt/cmd.c,v 1.1 2004/05/20 15:19:56 morrison Exp $ (BRL)";
d31 1
a31 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d22 1
a22 1
static const char RCScmd[] = "@@(#)$Header: /cvs/brlcad/librt/cmd.c,v 11.15 2004/05/10 15:30:45 erikg Exp $ (BRL)";
d25 1
a25 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

