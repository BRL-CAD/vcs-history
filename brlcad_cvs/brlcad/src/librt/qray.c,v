head	14.16;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.6
	rel-7-10-2:14.15
	rel-7-10-0:14.13
	rel-7-8-4:14.9
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.16
date	2007.09.15.16.23.14;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.06.30.04.04.56;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.05.14.21.04.32;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.27.01.41.42;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.39;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.55;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.09.16.02.04.25;	author lbutler;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches;
next	14.6;

14.6
date	2005.01.30.20.31.03;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.21;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.48;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.21;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.57.55;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.09;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.16
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                          Q R A Y . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup librt */
/** @@{ */
/** @@file qray.c
 *
 * Routines to set and get "Query Ray" variables.
 *
 * Source -
 *      SLAD CAD Team
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005
 *
 * Author -
 *      Robert G. Parker
 *
 */

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "./qray.h"

static void qray_print_fmts(struct dg_obj *dgop, Tcl_Interp *interp);
static void qray_print_vars(struct dg_obj *dgop, Tcl_Interp *interp);
static int qray_get_fmt_index(struct dg_obj *dgop, char c);

static struct dg_qray_color def_qray_odd_color = { 0, 255, 255 };
static struct dg_qray_color def_qray_even_color = { 255, 255, 0 };
static struct dg_qray_color def_qray_void_color = { 255, 0, 255 };
static struct dg_qray_color def_qray_overlap_color = { 255, 255, 255 };

static struct dg_qray_fmt_data def_qray_fmt_data[] = {
  {'r', "\"Origin (x y z) = (%.2f %.2f %.2f)  (h v d) = (%.2f %.2f %.2f)\\nDirection (x y z) = (%.4f %.4f %.4f)  (az el) = (%.2f %.2f)\\n\" x_orig y_orig z_orig h v d_orig x_dir y_dir z_dir a e"},
  {'h', "\"    Region Name               Entry (x y z)              LOS  Obliq_in\\n\""},
  {'p', "\"%-20s (%9.3f %9.3f %9.3f) %8.2f %8.3f\\n\" reg_name x_in y_in z_in los obliq_in"},
  {'f', "\"\""},
  {'m', "\"You missed the target\\n\""},
  {'o', "\"OVERLAP: '%s' and '%s' xyz_in=(%g %g %g) los=%g\\n\" ov_reg1_name ov_reg2_name ov_x_in ov_y_in ov_z_in ov_los"},
  {(char)0, (char *)NULL}
};

static char qray_syntax[] = "\
 qray vars			print a list of all variables (i.e. var = val)\n\
 qray basename [str]		set or get basename for query ray prims\n\
 qray effects [t|g|b]		set or get effects (i.e. text, graphical or both)\n\
 qray echo [0|1]		set or get command echo\n\
 qray oddcolor [r g b]		set or get color of odd partitions\n\
 qray evencolor [r g b]		set or get color of even partitions\n\
 qray voidcolor [r g b]		set or get color of void areas\n\
 qray overlapcolor [r g b]	set or get color of overlap areas\n\
 qray fmt [r|h|p|f|m|o [str]]	set or get format string(s)\n\
 qray script [str]		set or get the nirt script string\n\
 qray [help]			print this help message\n\
";

static void
qray_print_fmts(struct dg_obj	*dgop,
		Tcl_Interp	*interp)
{
	int i;

	for (i = 0; dgop->dgo_qray_fmts[i].type != (char)0; ++i)
		Tcl_AppendResult(interp, bu_vls_addr(&dgop->dgo_qray_fmts[i].fmt),
				 "\n", (char *)NULL);
}

static void
qray_print_vars(struct dg_obj	*dgop,
		Tcl_Interp	*interp)
{
	struct bu_vls vls;

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "basename = %s\n", bu_vls_addr(&dgop->dgo_qray_basename));
	bu_vls_printf(&vls, "script = %s\n", bu_vls_addr(&dgop->dgo_qray_script));
	bu_vls_printf(&vls, "effects = %c\n", dgop->dgo_qray_effects);
	bu_vls_printf(&vls, "echo = %d\n", dgop->dgo_qray_cmd_echo);
	bu_vls_printf(&vls, "oddcolor = %d %d %d\n",
		      dgop->dgo_qray_odd_color.r, dgop->dgo_qray_odd_color.g, dgop->dgo_qray_odd_color.b);
	bu_vls_printf(&vls, "evencolor = %d %d %d\n",
		      dgop->dgo_qray_even_color.r, dgop->dgo_qray_even_color.g, dgop->dgo_qray_even_color.b);
	bu_vls_printf(&vls, "voidcolor = %d %d %d\n",
		      dgop->dgo_qray_void_color.r, dgop->dgo_qray_void_color.g, dgop->dgo_qray_void_color.b);
	bu_vls_printf(&vls, "overlapcolor = %d %d %d\n",
		      dgop->dgo_qray_overlap_color.r, dgop->dgo_qray_overlap_color.g, dgop->dgo_qray_overlap_color.b);
	Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
	bu_vls_free(&vls);

	qray_print_fmts(dgop, interp);
}

static int
qray_get_fmt_index(struct dg_obj	*dgop,
		   char			c)
{
	int i;

	for (i = 0; dgop->dgo_qray_fmts[i].type != (char)0; ++i)
		if (c == dgop->dgo_qray_fmts[i].type)
			return i;

	return -1;
}

int
dgo_qray_cmd(struct dg_obj	*dgop,
	    Tcl_Interp		*interp,
	    int			argc,
	    char 		**argv)
{
	struct bu_vls vls;

	if (6 < argc) {
		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib_alias dgo_qray %s", argv[0]);
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);

		return TCL_ERROR;
	}

	/* print help message */
	if (argc == 1) {
		Tcl_AppendResult(interp, "Usage:\n", qray_syntax, (char *)NULL);
		return TCL_OK;
	}

	if (strcmp(argv[1], "fmt") == 0) {
		int i;

		if (argc == 2) {			/* get all format strings */
			qray_print_fmts(dgop, interp);
			return TCL_OK;
		} else if (argc == 3) {		/* get particular format string */
			if ((i = qray_get_fmt_index(dgop, *argv[2])) < 0) {
				Tcl_AppendResult(interp,
						 "qray: unrecognized format type: '",
						 argv[2], "'\nUsage:\n", qray_syntax, (char *)NULL);
				return TCL_ERROR;
			}

			Tcl_AppendResult(interp, bu_vls_addr(&dgop->dgo_qray_fmts[i].fmt), (char *)NULL);
			return TCL_OK;
		} else if (argc == 4) {		/* set value */
			if ((i = qray_get_fmt_index(dgop, *argv[2])) < 0) {
				Tcl_AppendResult(interp,
						 "qray: unrecognized format type: '",
						 argv[2], "'\nUsage:\n", qray_syntax, (char *)NULL);
				return TCL_ERROR;
			}

			bu_vls_trunc(&dgop->dgo_qray_fmts[i].fmt, 0);
			bu_vls_printf(&dgop->dgo_qray_fmts[i].fmt, "%s", argv[3]);
			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray fmt' command accepts 0, 1, or 2 arguments\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "basename") == 0) {
		if (argc == 2) {		/* get value */
			Tcl_AppendResult(interp, bu_vls_addr(&dgop->dgo_qray_basename), (char *)NULL);

			return TCL_OK;
		} else if (argc == 3) {		/* set value */
			bu_vls_strcpy(&dgop->dgo_qray_basename, argv[2]);
			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray basename' command accepts 0 or 1 argument\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "script") == 0) {
		if (argc == 2) {		/* get value */
			Tcl_AppendResult(interp, bu_vls_addr(&dgop->dgo_qray_script), (char *)NULL);

			return TCL_OK;
		} else if (argc == 3) {		/* set value */
			bu_vls_strcpy(&dgop->dgo_qray_script, argv[2]);
			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray script' command accepts 0 or 1 argument\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "effects") == 0) {
		if (argc == 2) {		/* get value */
			bu_vls_init(&vls);
			bu_vls_printf(&vls, "%c", dgop->dgo_qray_effects);
			Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
			bu_vls_free(&vls);

			return TCL_OK;
		} else if (argc == 3) {		/* set value */
			if (*argv[2] != 't' && *argv[2] != 'g' && *argv[2] != 'b') {
				bu_vls_init(&vls);
				bu_vls_printf(&vls, "qray effects: bad value - %s", argv[2]);
				Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
				bu_vls_free(&vls);

				return TCL_ERROR;
			}

			dgop->dgo_qray_effects = *argv[2];

			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray effects' command accepts 0 or 1 argument\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "echo") == 0) {
		if (argc == 2) {		/* get value */
			if (dgop->dgo_qray_cmd_echo)
				Tcl_AppendResult(interp, "1", (char *)NULL);
			else
				Tcl_AppendResult(interp, "0", (char *)NULL);

			return TCL_OK;
		} else if (argc == 3) {		/* set value */
			int ival;

			if (sscanf(argv[2], "%d", &ival) < 1) {
				bu_vls_init(&vls);
				bu_vls_printf(&vls, "qray echo: bad value - %s", argv[2]);
				Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
				bu_vls_free(&vls);

				return TCL_ERROR;
			}

			if (ival)
				dgop->dgo_qray_cmd_echo = 1;
			else
				dgop->dgo_qray_cmd_echo = 0;

			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray echo' command accepts 0 or 1 argument\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "oddcolor") == 0) {
		if (argc == 2) {		/* get value */
			bu_vls_init(&vls);
			bu_vls_printf(&vls, "%d %d %d",
				      dgop->dgo_qray_odd_color.r, dgop->dgo_qray_odd_color.g, dgop->dgo_qray_odd_color.b);
			Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
			bu_vls_free(&vls);

			return TCL_OK;
		} else if (argc == 5) {		/* set value */
			int r, g, b;

			if (sscanf(argv[2], "%d", &r) != 1 ||
			    sscanf(argv[3], "%d", &g) != 1 ||
			    sscanf(argv[4], "%d", &b) != 1 ||
			    r < 0 || g < 0 || b < 0 ||
			    255 < r || 255 < g || 255 < b){
				bu_vls_init(&vls);
				bu_vls_printf(&vls, "qray oddcolor %s %s %s - bad value",
					      argv[2], argv[3], argv[4]);
				Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
				bu_vls_free(&vls);
			}

			dgop->dgo_qray_odd_color.r = r;
			dgop->dgo_qray_odd_color.g = g;
			dgop->dgo_qray_odd_color.b = b;

			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray oddcolor' command accepts 0 or 3 arguments\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "evencolor") == 0) {
		if (argc == 2) {		/* get value */
			bu_vls_init(&vls);
			bu_vls_printf(&vls, "%d %d %d",
				      dgop->dgo_qray_even_color.r, dgop->dgo_qray_even_color.g, dgop->dgo_qray_even_color.b);
			Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
			bu_vls_free(&vls);

			return TCL_OK;
		} else if (argc == 5) {		/* set value */
			int r, g, b;

			if (sscanf(argv[2], "%d", &r) != 1 ||
			    sscanf(argv[3], "%d", &g) != 1 ||
			    sscanf(argv[4], "%d", &b) != 1 ||
			    r < 0 || g < 0 || b < 0 ||
			    255 < r || 255 < g || 255 < b) {
				bu_vls_init(&vls);
				bu_vls_printf(&vls, "qray evencolor %s %s %s - bad value",
					      argv[2], argv[3], argv[4]);
				Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
				bu_vls_free(&vls);
			}

			dgop->dgo_qray_even_color.r = r;
			dgop->dgo_qray_even_color.g = g;
			dgop->dgo_qray_even_color.b = b;

			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray evencolor' command accepts 0 or 3 arguments\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "voidcolor") == 0) {
		if (argc == 2) {		/* get value */
			bu_vls_init(&vls);
			bu_vls_printf(&vls, "%d %d %d",
				      dgop->dgo_qray_void_color.r, dgop->dgo_qray_void_color.g, dgop->dgo_qray_void_color.b);
			Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
			bu_vls_free(&vls);

			return TCL_OK;
		} else if (argc == 5) {		/* set value */
			int r, g, b;

			if (sscanf(argv[2], "%d", &r) != 1 ||
			    sscanf(argv[3], "%d", &g) != 1 ||
			    sscanf(argv[4], "%d", &b) != 1 ||
			    r < 0 || g < 0 || b < 0 ||
			    255 < r || 255 < g || 255 < b) {
				bu_vls_init(&vls);
				bu_vls_printf(&vls, "qray voidcolor %s %s %s - bad value",
					      argv[2], argv[3], argv[4]);
				Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
				bu_vls_free(&vls);
			}

			dgop->dgo_qray_void_color.r = r;
			dgop->dgo_qray_void_color.g = g;
			dgop->dgo_qray_void_color.b = b;

			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray voidcolor' command accepts 0 or 3 arguments\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "overlapcolor") == 0) {
		if (argc == 2) {		/* get value */
			bu_vls_init(&vls);
			bu_vls_printf(&vls, "%d %d %d",
				      dgop->dgo_qray_overlap_color.r, dgop->dgo_qray_overlap_color.g, dgop->dgo_qray_overlap_color.b);
			Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
			bu_vls_free(&vls);

			return TCL_OK;
		} else if (argc == 5) {		/* set value */
			int r, g, b;

			if (sscanf(argv[2], "%d", &r) != 1 ||
			    sscanf(argv[3], "%d", &g) != 1 ||
			    sscanf(argv[4], "%d", &b) != 1 ||
			    r < 0 || g < 0 || b < 0 ||
			    255 < r || 255 < g || 255 < b){
				bu_vls_init(&vls);
				bu_vls_printf(&vls, "qray overlapcolor %s %s %s - bad value",
					      argv[2], argv[3], argv[4]);
				Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
				bu_vls_free(&vls);
			}

			dgop->dgo_qray_overlap_color.r = r;
			dgop->dgo_qray_overlap_color.g = g;
			dgop->dgo_qray_overlap_color.b = b;

			return TCL_OK;
		}

		Tcl_AppendResult(interp,
				 "The 'qray overlapcolor' command accepts 0 or 3 arguments\n",
				 (char *)NULL);
		return TCL_ERROR;
	}

	if (strcmp(argv[1], "vars") == 0) {
		qray_print_vars(dgop, interp);
		return TCL_OK;
	}

	if (strcmp(argv[1], "help") == 0) {
		Tcl_AppendResult(interp, "Usage:\n", qray_syntax, (char *)NULL);
		return TCL_OK;
	}

	Tcl_AppendResult(interp, "qray: unrecognized command: '",
			 argv[1], "'\nUsage:\n", qray_syntax, (char *)NULL);
	return TCL_ERROR;
}

void
dgo_init_qray(struct dg_obj	*dgop)
{
	register int i;
	register int n = 0;
	struct dg_qray_fmt_data *qfdp;

	bu_vls_init(&dgop->dgo_qray_basename);
	bu_vls_strcpy(&dgop->dgo_qray_basename, DG_QRAY_BASENAME);
	bu_vls_init(&dgop->dgo_qray_script);

	dgop->dgo_qray_effects = 'b';
	dgop->dgo_qray_cmd_echo = 0;
	dgop->dgo_qray_odd_color = def_qray_odd_color;
	dgop->dgo_qray_even_color = def_qray_even_color;
	dgop->dgo_qray_void_color = def_qray_void_color;
	dgop->dgo_qray_overlap_color = def_qray_overlap_color;

	/* count the number of default format types */
	for(qfdp = def_qray_fmt_data; qfdp->fmt != (char *)NULL; ++qfdp)
		++n;

	dgop->dgo_qray_fmts = (struct dg_qray_fmt *)bu_malloc(sizeof(struct dg_qray_fmt) * n + 1, "qray_fmts");

	for (i = 0; i < n; ++i) {
		dgop->dgo_qray_fmts[i].type = def_qray_fmt_data[i].type;
		bu_vls_init(&dgop->dgo_qray_fmts[i].fmt);
		bu_vls_strcpy(&dgop->dgo_qray_fmts[i].fmt, def_qray_fmt_data[i].fmt);
	}

	dgop->dgo_qray_fmts[i].type = (char)0;
}

void
dgo_free_qray(struct dg_obj     *dgop)
{
	register int i;

	bu_vls_free(&dgop->dgo_qray_basename);
	bu_vls_free(&dgop->dgo_qray_script);
	for (i = 0; dgop->dgo_qray_fmts[i].type != (char)0; ++i)
		bu_vls_free(&dgop->dgo_qray_fmts[i].fmt);
	bu_free(dgop->dgo_qray_fmts, "dgo_free_qray");
}

void
dgo_qray_data_to_vlist(struct dg_obj		*dgop,
		       struct bn_vlblock	*vbp,
		       struct dg_qray_dataList	*headp,
		       vect_t			dir,
		       int			do_overlaps)
{
	register int i = 1;			/* start out odd */
	register struct bu_list *vhead;
	register struct dg_qray_dataList *ndlp;
	vect_t in_pt, out_pt;
	vect_t last_out_pt;

	for (BU_LIST_FOR(ndlp, dg_qray_dataList, &headp->l)) {
		if (do_overlaps)
			vhead = rt_vlblock_find(vbp,
						dgop->dgo_qray_overlap_color.r,
						dgop->dgo_qray_overlap_color.g,
						dgop->dgo_qray_overlap_color.b);
		else if(i % 2)
			vhead = rt_vlblock_find(vbp,
						dgop->dgo_qray_odd_color.r,
						dgop->dgo_qray_odd_color.g,
						dgop->dgo_qray_odd_color.b);
		else
			vhead = rt_vlblock_find(vbp,
						dgop->dgo_qray_even_color.r,
						dgop->dgo_qray_even_color.g,
						dgop->dgo_qray_even_color.b);

		VSET(in_pt, ndlp->x_in, ndlp->y_in, ndlp->z_in);
		VJOIN1(out_pt, in_pt, ndlp->los, dir);
		VSCALE(in_pt, in_pt, dgop->dgo_wdbp->dbip->dbi_local2base);
		VSCALE(out_pt, out_pt, dgop->dgo_wdbp->dbip->dbi_local2base);
		RT_ADD_VLIST( vhead, in_pt, BN_VLIST_LINE_MOVE );
		RT_ADD_VLIST( vhead, out_pt, BN_VLIST_LINE_DRAW );

		if (!do_overlaps && i > 1 && !VAPPROXEQUAL(last_out_pt,in_pt,SQRT_SMALL_FASTF)) {
			vhead = rt_vlblock_find(vbp,
						dgop->dgo_qray_void_color.r,
						dgop->dgo_qray_void_color.g,
						dgop->dgo_qray_void_color.b);
			RT_ADD_VLIST( vhead, last_out_pt, BN_VLIST_LINE_MOVE );
			RT_ADD_VLIST( vhead, in_pt, BN_VLIST_LINE_DRAW );
		}

		VMOVE(last_out_pt, out_pt);
		++i;
	}
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@NULL != 0, quell warnings
@
text
@a37 1

a38 2

#ifdef HAVE_STRING_H
a39 3
#else
#include <strings.h>
#endif
@


14.14
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d69 1
a69 1
  {(char)NULL, (char *)NULL}
d92 1
a92 1
	for (i = 0; dgop->dgo_qray_fmts[i].type != (char)NULL; ++i)
d128 1
a128 1
	for (i = 0; dgop->dgo_qray_fmts[i].type != (char)NULL; ++i)
d481 1
a481 1
	dgop->dgo_qray_fmts[i].type = (char)NULL;
d491 1
a491 1
	for (i = 0; dgop->dgo_qray_fmts[i].type != (char)NULL; ++i)
@


14.13
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d530 2
a531 2
		RT_ADD_VLIST( vhead, in_pt, RT_VLIST_LINE_MOVE );
		RT_ADD_VLIST( vhead, out_pt, RT_VLIST_LINE_DRAW );
d538 2
a539 2
			RT_ADD_VLIST( vhead, last_out_pt, RT_VLIST_LINE_MOVE );
			RT_ADD_VLIST( vhead, in_pt, RT_VLIST_LINE_DRAW );
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a38 1

@


14.11
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.10
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d549 1
a549 1
/*@@}*/
@


14.9
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
@


14.8
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup librt */
a35 1
/*@@}*/
d549 1
@


14.7
log
@Doxygen changes
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
@


14.6
log
@update copyright to 2005
@
text
@d21 3
a24 1
 *
d36 1
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 3
 * Copyright Notice -
 *      This software is Copyright (C) 1998-2004 by the United States Army.
 *      All rights reserved.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			Q R A Y . C
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d530 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d25 1
a25 1
#ifdef USE_STRING_H
@


1.2
log
@bye bye externs.h
@
text
@d19 1
a19 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a36 1
#include "externs.h"
@

