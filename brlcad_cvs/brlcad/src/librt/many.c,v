head	14.19;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.8
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.19
date	2007.12.17.07.53.18;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.11.28.14.11.28;	author erikgreenwald;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.18.04.13.49;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.27.01.41.41;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.37;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.21.04.45.44;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.54;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.09.16.02.04.25;	author lbutler;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.35;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.01.30.20.31.00;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.32.30;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.43;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.33;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.45;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.04;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@my bad deprecation instruction, revert/remove the LOCAL -> static conversion.  LOCAL is only static for non-SMP systems, but usually auto.
@
text
@/*                          M A N Y . C
 * BRL-CAD
 *
 * Copyright (c) 1999-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup librt */
/** @@{ */
/** @@file many.c
 *
 *  Wrapper routines to help fire multiple rays in parallel,
 *  without exposing the caller to the details of running in parallel.
 *
 *  Authors -
 *	Michael John Muuss
 *	Christopher T. Johnson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
/** @@} */

#include "common.h"

#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"


/* For communication between interface routine and each of the threads */
struct rt_many_internal  {
	long			magic;
	long			cur_index;		/* semaphored */
	long			max_index;
	const struct application *proto_ap;
	struct resource		*resources;
	int			(*callback) BU_ARGS((struct application *, int index));
	int			stop_worker;
	int			sem_chunk;
};
#define RT_MANY_INTERNAL_MAGIC	0x526d6970	/* Rmip */
#define RT_CK_RMI(_p)	BU_CKMAG(_p, RT_MANY_INTERNAL_MAGIC, "rt_many_internal")

/*
 *			R T _ S H O O T _ M A N Y _ R A Y S _ W O R K E R
 *
 *  Internal helper routine for rt_shoot_many_rays().
 *  Runs in PARALLEL, one instance per thread.
 *
 *  In order to reduce the traffic through the critical section,
 *  a multiple pixel block may be removed from the work queue at once.
 */
void
rt_shoot_many_rays_worker(int cpu, genptr_t arg)
{
	struct application app;
	struct rt_many_internal *rmip = (struct rt_many_internal *)arg;

	if( cpu >= MAX_PSW )  {
		bu_log("rt_shoot_many_rays_worker() cpu %d > MAX_PSW %d, array overrun\n", cpu, MAX_PSW);
		bu_bomb("rt_shoot_many_rays_worker() cpu > MAX_PSW, array overrun\n");
	}

	RT_CK_RMI(rmip);
	RT_CK_RESOURCE( &rmip->resources[cpu] );
	RT_CK_APPLICATION( rmip->proto_ap );

	app = *rmip->proto_ap;			/* struct copy */
	app.a_resource = &rmip->resources[cpu];

	while(1)  {
		register long	index;
		register long	lim;

		if( rmip->stop_worker )  break;

		bu_semaphore_acquire( RT_SEM_WORKER );
		index = rmip->cur_index;
		rmip->cur_index += rmip->sem_chunk;
		bu_semaphore_release( RT_SEM_WORKER );

		lim = index + rmip->sem_chunk;
		for( ; index < lim; index++ )  {
			if( index >= rmip->max_index )  return;

			/*
			 * a_x is set here to get differentiated LIBRT
			 * debugging messages even from a trivial callback.
			 * The callback may, of course, override it.
			 */
			app.a_x = index;

			/* Allow our user to do per-ray init of application struct */
			if( (*rmip->callback)( &app, index ) < 0 )  {
				rmip->stop_worker = 1;
				break;
			}

			(void)rt_shootray( &app );
		}
	}
}

/*
 *			R T _ S H O O T _ M A N Y _ R A Y S
 *
 *  A convenience routine for application developers who wish to fire a
 *  large but fixed number of rays in parallel,
 *  without wanting to create a parallel "self dispatcher"
 *  routine of their own.
 *
 *  Basic setup of the application structure is done by the caller,
 *  and provided via the proto_ap pointer.
 *
 *  Per-ray setup of the application structure is done by the callback
 *  routine, which takes an index in the range 0..(nrays-1) and uses that
 *  to fill in each specific instance of application structure as required.
 *
 *  The a_hit() and a_miss() routines must save any results;
 *  their formal return codes, and the return code from rt_shootray(),
 *  are ignored.
 *
 *  a_x is changed by this wrapper, and may be overridden by the callback.
 *
 *  Note that the cost of spawning threads is sufficiently expensive
 *  that 'nrays' should be at least dozens or hundreds to get
 *  a real benefit from parallelism.
 *
 *  Return codes expected from the callback() -
 *	-1	End processing before all nrays have been fired.
 *	 0	Normal return, proceed with firing the ray.
 *
 *  Note that bu_parallel() is not re-entrant, so you can't have an
 *  a_hit() routine which is already running in parallel call into
 *  this routine and expect to get even more parallelism.
 *  This is not a limitation, as you usually can't construct more CPUs.
 */
void
rt_shoot_many_rays(const struct application *proto_ap, int (*callback) (struct application *, int), int ncpus, long int nrays, struct resource *resources)


					/* resources[ncpus] */
{
	struct rt_many_internal	rmi;
	int	i;

	RT_CK_APPLICATION(proto_ap);
	for( i=0; i < ncpus; i++ )  {
		RT_CK_RESOURCE( &resources[i] );
	}
	rmi.resources = resources;

	rmi.magic = RT_MANY_INTERNAL_MAGIC;
	rmi.stop_worker = 0;
	rmi.cur_index = 0;
	rmi.max_index = nrays;
	rmi.proto_ap = proto_ap;
	rmi.callback = callback;
	rmi.sem_chunk = ncpus;

	if( !rt_g.rtg_parallel || ncpus <= 1 )  {
		/* The 1-cpu case is supported for testing & generality. */
		rt_shoot_many_rays_worker( 0, (genptr_t)&rmi );
	} else {
		bu_parallel( rt_shoot_many_rays_worker, ncpus, (genptr_t)&rmi );
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@LOCAL->static, per machine.h deprecation list
@
text
@a36 4
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.17 2007/05/18 04:13:49 brlcad Exp $ (ARL)";
#endif

a38 1

d41 1
d48 1
d75 1
a75 1
	static struct application app;
@


14.17
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.16 2007/01/27 01:41:41 brlcad Exp $ (ARL)";
d78 1
a78 1
	LOCAL struct application app;
@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.15 2007/01/23 01:13:37 brlcad Exp $ (ARL)";
d83 1
a83 1
		rt_bomb("rt_shoot_many_rays_worker() cpu > MAX_PSW, array overrun\n");
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.14 2007/01/21 04:45:44 brlcad Exp $ (ARL)";
a43 1

d164 1
a164 3


               		           	/* resources[ncpus] */
@


14.14
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.13 2007/01/20 14:36:54 brlcad Exp $ (ARL)";
@


14.13
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 2

/*@@{*/
d24 1
d36 1
a36 1
/*@@}*/
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.12 2006/09/16 02:04:25 lbutler Exp $ (ARL)";
@


14.12
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1999-2006 United States Government as represented by
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.11 2006/01/18 06:46:17 brlcad Exp $ (ARL)";
@


14.11
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup librt */
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.10 2005/10/23 04:44:35 brlcad Exp $ (ARL)";
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1999-2005 United States Government as represented by
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.9 2005/08/12 22:31:08 lbutler Exp $ (ARL)";
@


14.9
log
@Doxygen changes
@
text
@d32 1
a32 1
 *  
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.8 2005/01/30 20:31:00 brlcad Exp $ (ARL)";
d165 4
a168 4
                                   
   			                                                    
   			      
    			      
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d165 4
a168 4




@


14.8
log
@update copyright to 2005
@
text
@d21 4
a25 1
 *
d37 2
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/many.c,v 14.7 2004/12/21 07:32:30 morrison Exp $ (ARL)";
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1999-2004 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/many.c,v 14.6 2004/12/21 06:58:43 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a32 2
 *  
 *
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/many.c,v 14.5 2004/12/21 06:44:33 morrison Exp $ (ARL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a34 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1999-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/many.c,v 14.4 2004/12/21 06:18:45 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a33 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/many.c,v 14.3 2004/12/21 05:45:24 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/many.c,v 14.2 2004/12/21 04:18:20 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/many.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			M A N Y . C
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/many.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (ARL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/many.c,v 1.1 2004/05/20 15:20:04 morrison Exp $ (ARL)";
d180 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/many.c,v 11.12 2004/05/10 15:30:46 erikg Exp $ (ARL)";
d28 1
a28 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

