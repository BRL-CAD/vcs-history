head	14.18;
access;
symbols
	rel-7-10-4:14.18
	STABLE:14.18.0.2
	stable-branch:14.8
	rel-7-10-2:14.18
	rel-7-10-0:14.16
	rel-7-8-4:14.13
	rel-7-8-2:14.12
	rel-7-8-0:14.12
	trimnurbs-branch:14.12.0.2
	help:14.12
	temp_tag:14.11
	bobWinPort-20051223-freeze:14.10
	postmerge-20051223-bobWinPort:14.11
	premerge-20051223-bobWinPort:14.11
	rel-7-6-6:14.11
	rel-7-6-4:14.11
	rel-7-6-2:14.10
	rel-7-6-branch:14.10.0.4
	rel-7-6-0:14.10
	rel-7-4-2:14.9
	rel-7-4-branch:14.9.0.2
	bobWinPort:14.10.0.2
	rel-7-4-0:14.9
	rel-7-2-6:14.9
	rel-7-2-4:14.9
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.18
date	2007.05.19.06.53.57;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.19.01.33.04;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.23.01.13.39;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.36.56;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.09.16.02.04.26;	author lbutler;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.10.4.1;
next	14.9;

14.9
date	2005.05.08.05.46.07;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.01.30.20.31.03;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.32.31;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.43;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.33;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.48;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.25;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.21;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.12;	author morrison;	state Exp;
branches;
next	;

14.10.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.18
log
@doxy
@
text
@/*                           W D B . C
 * BRL-CAD
 *
 * Copyright (c) 2000-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup wdb */
/** @@{ */
/** @@file wdb.c
 *
 *  Routines to allow libwdb to use librt's import/export interface,
 *  rather than having to know about the database formats directly.
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
/** @@} */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.17 2007/05/19 01:33:04 brlcad Exp $ (ARL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "wdb.h"


/**
 *			W D B _ F O P E N
 *
 *  Create a libwdb output stream destined for a disk file.
 *  This will destroy any existing file by this name, and start fresh.
 *  The file is then opened in the normal "update" mode and
 *  an in-memory directory is built along the way,
 *  allowing retrievals and object replacements as needed.
 *
 *  Users can change the database title by calling: ???
 */
struct rt_wdb *
wdb_fopen_v( const char *filename, int version )
{
	struct db_i	*dbip;

	if( rt_uniresource.re_magic != RESOURCE_MAGIC ) {
		rt_init_resource( &rt_uniresource, 0, NULL );
	}

	if( (dbip = db_create( filename, version )) == DBI_NULL )
		return RT_WDB_NULL;

	return wdb_dbopen( dbip, RT_WDB_TYPE_DB_DISK );
}

struct rt_wdb *
wdb_fopen( const char *filename)
{
    return wdb_fopen_v(filename, 5);
}


/**
 *  W D B _ D B O P E N
 *
 *  Create a libwdb output stream destined for an existing BRL-CAD database,
 *  already opened via a db_open() call.
 *	RT_WDB_TYPE_DB_DISK			Add to on-disk database
 *	RT_WDB_TYPE_DB_DISK_APPEND_ONLY		Add to on-disk database, don't clobber existing names, use prefix
 *	RT_WDB_TYPE_DB_INMEM			Add to in-memory database only
 *	RT_WDB_TYPE_DB_INMEM_APPEND_ONLY	Ditto, but give errors if name in use.
 */
struct rt_wdb *
wdb_dbopen( struct db_i *dbip, int mode )
{
	struct rt_wdb	*wdbp;

	RT_CK_DBI(dbip);

	if (mode != RT_WDB_TYPE_DB_DISK	 && mode != RT_WDB_TYPE_DB_DISK_APPEND_ONLY &&
	    mode != RT_WDB_TYPE_DB_INMEM && mode != RT_WDB_TYPE_DB_INMEM_APPEND_ONLY) {
		bu_log("wdb_dbopen(%s) mode %d unknown\n",
			dbip->dbi_filename, mode );
		return RT_WDB_NULL;
	}

#if 0
	if( (mode == RT_WDB_TYPE_DB_DISK || mode == RT_WDB_TYPE_DB_DISK_APPEND_ONLY ) &&
	    dbip->dbi_read_only )  {
		/* In-mem updates happen regardless of disk read-only flag */
		bu_log("wdb_dbopen(%s): read-only\n",
			dbip->dbi_filename );
	}
#endif

	if( rt_uniresource.re_magic != RESOURCE_MAGIC )
		rt_init_resource( &rt_uniresource, 0, NULL );

	BU_GETSTRUCT(wdbp, rt_wdb);
	wdbp->l.magic = RT_WDB_MAGIC;
	wdbp->type = mode;
	wdbp->dbip = dbip;
	wdbp->dbip->dbi_wdbp = wdbp;

	/* Provide the same default tolerance that librt/prep.c does */
	wdbp->wdb_tol.magic = BN_TOL_MAGIC;
	wdbp->wdb_tol.dist = 0.005;
	wdbp->wdb_tol.dist_sq = wdbp->wdb_tol.dist * wdbp->wdb_tol.dist;
	wdbp->wdb_tol.perp = 1e-6;
	wdbp->wdb_tol.para = 1 - wdbp->wdb_tol.perp;

	wdbp->wdb_ttol.magic = RT_TESS_TOL_MAGIC;
	wdbp->wdb_ttol.abs = 0.0;
	wdbp->wdb_ttol.rel = 0.01;
	wdbp->wdb_ttol.norm = 0;
	bu_vls_init( &wdbp->wdb_prestr );

	return wdbp;

}

/**
 *			W D B _ I M P O R T
 *
 *  Returns -
 *	0	and modified *internp;
 *	-1	ft_import failure (from rt_db_get_internal)
 *	-2	db_get_external failure (from rt_db_get_internal)
 *	-3	Attempt to import from write-only (stream) file.
 *	-4	Name not found in database TOC.
 *
 *  NON-PARALLEL because of rt_uniresource
 */
int
wdb_import(struct rt_wdb *wdbp,	struct rt_db_internal *internp,	const char *name, const mat_t mat )
{
	struct directory	*dp;

	if( (dp = db_lookup( wdbp->dbip, name, LOOKUP_QUIET )) == DIR_NULL )
		return -4;

	return rt_db_get_internal( internp, dp, wdbp->dbip, mat, &rt_uniresource );
}

/**
 *			W D B _ E X P O R T _ E X T E R N A L
 *
 *  The caller must free "ep".
 *
 *  Returns -
 *	 0	OK
 *	<0	error
 */
int
wdb_export_external(
	struct rt_wdb *wdbp,
	struct bu_external *ep,
	const char *name,
	int flags,
	unsigned char type)
{
	struct directory	*dp;

	RT_CK_WDB(wdbp);
	BU_CK_EXTERNAL(ep);

	/* Stash name into external representation */
	if( wdbp->dbip->dbi_version <= 4 )  {
		db_wrap_v4_external( ep, name );
	} else if( wdbp->dbip->dbi_version == 5 )  {
		if( db_wrap_v5_external( ep, name ) < 0 )  {
			bu_log("wdb_export_external(%s): db_wrap_v5_external error\n",
				name );
			return -4;
		}
	} else {
		bu_log("wdb_export_external(%s): version %d unsupported\n",
				name, wdbp->dbip->dbi_version );
		return -4;
	}

	switch( wdbp->type )  {

	case RT_WDB_TYPE_DB_DISK:
		if( wdbp->dbip->dbi_read_only )  {
			bu_log("wdb_export_external(%s): read-only database, write aborted\n");
			return -5;
		}
		/* If name already exists, that object will be updated. */
		dp = db_lookup( wdbp->dbip, name, LOOKUP_QUIET );
		if( dp == DIR_NULL ) {
			if( (dp = db_diradd( wdbp->dbip, name, -1L, 0, flags,
					   (genptr_t)&type )) == DIR_NULL )  {
			bu_log("wdb_export_external(%s): db_diradd error\n",
			       name );
			return -3;
			}
		}
		dp->d_flags = (dp->d_flags & ~7) | flags;
		if( db_put_external( ep, dp, wdbp->dbip ) < 0 )  {
			bu_log("wdb_export_external(%s): db_put_external error\n",
				name );
			return -3;
		}
		break;

	case RT_WDB_TYPE_DB_DISK_APPEND_ONLY:
		if( wdbp->dbip->dbi_read_only )  {
			bu_log("wdb_export_external(%s): read-only database, write aborted\n");
			return -5;
		}
		/* If name already exists, new non-conflicting name will be generated */
		if( (dp = db_diradd( wdbp->dbip, name, -1L, 0, flags,
				    (genptr_t)&type )) == DIR_NULL )  {
			bu_log("wdb_export_external(%s): db_diradd error\n",
			       name );
			return -3;
		}
		if( db_put_external( ep, dp, wdbp->dbip ) < 0 )  {
			bu_log("wdb_export_external(%s): db_put_external error\n",
				name );
			return -3;
		}
		break;

	case RT_WDB_TYPE_DB_INMEM_APPEND_ONLY:
		if( (dp = db_lookup( wdbp->dbip, name, 0 )) != DIR_NULL )  {
			bu_log("wdb_export_external(%s): ERROR, that name is already in use, and APPEND_ONLY mode has been specified.\n",
				name );
			return -3;
		}
		if( (dp = db_diradd( wdbp->dbip, name, -1L, 0, flags,
				(genptr_t)&type )) == DIR_NULL )  {
			bu_log("wdb_export_external(%s): db_diradd error\n",
			       name );
			return -3;
		}

		db_inmem( dp, ep, flags, wdbp->dbip );
		/* ep->buf has been stolen, replaced with null. */
		break;

	case RT_WDB_TYPE_DB_INMEM:
		if( (dp = db_lookup( wdbp->dbip, name, 0 )) == DIR_NULL )  {
			if( (dp = db_diradd( wdbp->dbip, name, -1L, 0, flags,
					(genptr_t)&type )) == DIR_NULL )  {
				bu_log("wdb_export_external(%s): db_diradd error\n",
				       name );
				bu_free_external( ep );
				return -3;
			}
		} else {
			dp->d_flags = (dp->d_flags & ~7) | flags;
		}

		db_inmem( dp, ep, flags, wdbp->dbip );
		/* ep->buf has been stolen, replaced with null. */
		break;
	}

	return 0;
}

/**
 *			W D B _ P U T _ I N T E R N A L
 *
 *  Convert the internal representation of a solid to the external one,
 *  and write it into the database.
 *  The internal representation is always freed.
 *  This is the analog of rt_db_put_internal() for rt_wdb objects.
 *
 *  Use this routine in preference to wdb_export() whenever the
 *  caller already has an rt_db_internal structure handy.
 *
 *  NON-PARALLEL because of rt_uniresource
 *
 *  Returns -
 *	 0	OK
 *	<0	error
 */
int
wdb_put_internal(
	struct rt_wdb *wdbp,
	const char *name,
	struct rt_db_internal *ip,
	double local2mm )
{
	struct bu_external	ext;
	int			ret;
	int			flags;

	RT_CK_WDB(wdbp);
	RT_CK_DB_INTERNAL(ip);

	if( wdbp->dbip->dbi_version <= 4 )  {
		BU_INIT_EXTERNAL( &ext );
		ret = ip->idb_meth->ft_export( &ext, ip, local2mm, wdbp->dbip, &rt_uniresource );
		if( ret < 0 )  {
			bu_log("rt_db_put_internal(%s):  solid export failure\n",
				name);
			ret = -1;
			goto out;
		}
		db_wrap_v4_external( &ext, name );
	} else {
		if( rt_db_cvt_to_external5( &ext, name, ip, local2mm, wdbp->dbip, &rt_uniresource, ip->idb_major_type ) < 0 )  {
			bu_log("wdb_export(%s): solid export failure\n",
				name );
			ret = -2;
			goto out;
		}
	}
	BU_CK_EXTERNAL( &ext );

	flags = db_flags_internal( ip );
	ret = wdb_export_external( wdbp, &ext, name, flags, ip->idb_type );
out:
	bu_free_external( &ext );
	rt_db_free_internal( ip, &rt_uniresource );
	return ret;
}


/**
 *			W D B _ E X P O R T
 *
 *  Export an in-memory representation of an object,
 *  as described in the file h/rtgeom.h, into the indicated database.
 *
 *  The internal representation (gp) is always freed.
 *
 *  WARNING: The caller must be careful not to double-free gp,
 *  particularly if it's been extracted from an rt_db_internal,
 *  e.g. by passing intern.idb_ptr for gp.
 *
 *  If the caller has an rt_db_internal structure handy already,
 *  they should call wdb_put_internal() directly -- this is a
 *  convenience routine intended primarily for internal use in LIBWDB.
 *
 *  Returns -
 *	 0	OK
 *	<0	error
 */
int
wdb_export(
	struct rt_wdb *wdbp,
	const char *name,
	genptr_t gp,
	int id,
	double local2mm )
{
	struct rt_db_internal	intern;

	RT_CK_WDB(wdbp);

	if( (id <= 0 || id > ID_MAX_SOLID) && id != ID_COMBINATION )  {
		bu_log("wdb_export(%s): id=%d bad\n",
			name, id );
		return(-1);
	}

	RT_INIT_DB_INTERNAL( &intern );
	intern.idb_major_type = DB5_MAJORTYPE_BRLCAD;
	intern.idb_type = id;
	intern.idb_ptr = gp;
	intern.idb_meth = &rt_functab[id];

	return wdb_put_internal( wdbp, name, &intern, local2mm );
}

/**
 *			W D B _ C L O S E
 *
 *  Release from associated database "file", destroy dynamic data structure.
 */
void
wdb_close( struct rt_wdb *wdbp )
{

	RT_CK_WDB(wdbp);

	/* XXX Flush any unwritten "struct matter" records here */

	db_close( wdbp->dbip );
	wdbp->dbip = NULL;

	bu_vls_free( &wdbp->wdb_prestr );

	bu_free( (genptr_t)wdbp, "struct rt_wdb");
	wdbp = NULL;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@sanity nulls
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.16 2007/01/23 01:13:39 brlcad Exp $ (ARL)";
d42 1
d54 2
a55 1
/*
d71 1
a71 1
	if( rt_uniresource.re_magic != RESOURCE_MAGIC )
d73 1
d88 2
a89 2
/*
 *			W D B _ D B O P E N
d147 1
a147 1
/*
d170 1
a170 1
/*
d289 1
a289 1
/*
d348 2
a349 1
/*
d396 1
a396 1
/*
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.15 2007/01/21 04:45:45 brlcad Exp $ (ARL)";
d406 1
d409 1
d411 1
@


14.15
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.14 2007/01/20 14:36:56 brlcad Exp $ (ARL)";
@


14.14
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d35 1
a35 1
/*@@}*/
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.13 2006/09/16 02:04:26 lbutler Exp $ (ARL)";
@


14.13
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.12 2006/01/18 06:46:17 brlcad Exp $ (ARL)";
@


14.12
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup wdb */
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.11 2005/10/23 04:44:36 brlcad Exp $ (ARL)";
@


14.11
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2000-2005 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.10 2005/08/12 22:31:08 lbutler Exp $ (ARL)";
@


14.10
log
@Doxygen changes
@
text
@d30 1
a30 1
 *  
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.9 2005/05/08 05:46:07 brlcad Exp $ (ARL)";
d145 1
a145 1
/* 
@


14.10.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d145 1
a145 1
/*
@


14.9
log
@ws
@
text
@d21 3
a24 1
 *
d35 2
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.8 2005/01/30 20:31:03 brlcad Exp $ (ARL)";
@


14.8
log
@update copyright to 2005
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/wdb.c,v 14.7 2004/12/21 07:32:31 morrison Exp $ (ARL)";
a38 2


d41 1
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2004 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb.c,v 14.6 2004/12/21 06:58:43 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a31 2
 *  
 *
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb.c,v 14.5 2004/12/21 06:44:33 morrison Exp $ (ARL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a33 3
 *  Copyright Notice -
 *	This software is Copyright (C) 2000-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb.c,v 14.4 2004/12/21 06:18:48 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb.c,v 14.3 2004/12/21 05:45:25 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb.c,v 14.2 2004/12/21 04:18:21 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			W D B . C
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (ARL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/wdb.c,v 1.1 2004/05/20 15:20:12 morrison Exp $ (ARL)";
d398 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/wdb.c,v 1.48 2004/05/10 15:30:47 erikg Exp $ (ARL)";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

