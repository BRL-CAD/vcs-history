head	14.3;
access;
symbols
	rel-7-10-4:14.3
	STABLE:14.3.0.2
	rel-7-10-2:14.3
	rel-7-10-0:14.3
	rel-7-8-4:14.1;
locks; strict;
comment	@ * @;


14.3
date	2007.01.23.01.13.39;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2007.01.20.14.36.56;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2006.08.16.03.34.47;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.3
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@/*                     T R A N S F O R M . C
 * BRL-CAD
 *
 * Copyright (c) 2006-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file transform.c
 *
 */
#include "common.h"

#include "machine.h"
#include "raytrace.h"


/** r t _ m a t r i x _ t r a n s f o r m
 *
 * apply a matrix transformation to a given input object, setting the
 * resultant transformed object as the output solid.  if free is set,
 * the input object will be released.
 *
 * returns zero if matrix transform was applied, non-zero on failure.
 */
int
rt_matrix_transform(struct rt_db_internal *output, const mat_t matrix, struct rt_db_internal *input, int free, struct db_i *dbip, struct resource *resource)
{
    int ret;

    RT_CK_DB_INTERNAL(output);
    RT_CK_DB_INTERNAL(input);
    RT_CK_DBI(dbip);
    RT_CK_RESOURCE(resource);

    ret = rt_functab[input->idb_type].ft_xform( output, matrix, input, free, dbip, resource );

    return ret;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.2
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
@


14.1
log
@initial implementation of rt_matrix_transform() routine for applying a matrix transformation to a given object.  basically a convenient wrapper to not needlessly expose the rt_functab table to userland code.
@
text
@d4 1
a4 1
 * Copyright (c) 2006 United States Government as represented by
@

