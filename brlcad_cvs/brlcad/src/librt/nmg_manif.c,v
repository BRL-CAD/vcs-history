head	14.19;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.8
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.19
date	2007.11.19.06.49.19;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.09.15.16.23.14;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.18.04.13.49;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.27.01.41.41;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.38;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.21.04.45.44;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.55;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.09.16.02.04.25;	author lbutler;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.01.30.20.31.02;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.32.31;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.43;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.33;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.46;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.57.54;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.06;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@there is some nasty bug in nmg_misc.c where nmg_classify_s_vs_s() ends up in an infinite recursion, causing the paint_color to increment out of bounds and eventually resulting in an invalid point_meaning array index.  use an unsigned int instead of a char for the counter/arrayindex, but still add an explicit test as to whether the paint_color ends up out of bounds whereby we break out of the iteration.
@
text
@/*                     N M G _ M A N I F . C
 * BRL-CAD
 *
 * Copyright (c) 1994-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup nmg */
/** @@{ */
/** @@file nmg_manif.c
 *
 *  Routines for assessing the manifold dimension of an object.
 *
 *  Author -
 *	Lee A. Butler
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
/** @@} */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.18 2007/09/15 16:23:14 brlcad Exp $ (ARL)";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"

#define PAINT_INTERIOR 1
#define PAINT_EXTERIOR 0

#define BU_LIST_LINK_CHECK( p ) \
	if (BU_LIST_PNEXT_PLAST(bu_list, p) != p || \
	    BU_LIST_PLAST_PNEXT(bu_list, p) != p) { \
		bu_log("%s[%d]: linked list integrity check failed\n", \
				__FILE__, __LINE__); \
		bu_log("0x%08x->forw(0x%08x)->back = 0x%08x\n", \
			(p), (p)->forw, (p)->forw->back); \
		bu_log("0x%08x->back(0x%08x)->forw = 0x%08x\n", \
			(p), (p)->back, (p)->back->forw); \
		bu_bomb("Goodbye\n"); \
	}


/**	N M G _ D A N G L I N G _ F A C E
 *
 *	Determine if a face has any "dangling" edges.
 *
 *	Return
 *	1	face has dangling edge
 *	0	face does not have a dangling edge
 */
int
nmg_dangling_face(const struct faceuse *fu, register const char *manifolds)
{
	struct loopuse *lu;
	struct edgeuse *eu;
	const struct edgeuse *eur;
	struct faceuse *newfu;

	NMG_CK_FACEUSE(fu);

	if (rt_g.NMG_debug & DEBUG_MANIF)
		bu_log("nmg_dangling_face(0x%08x 0x%08x)\n", fu, manifolds);

	for(BU_LIST_FOR(lu, loopuse, &fu->lu_hd)) {
	    NMG_CK_LOOPUSE(lu);
	    BU_LIST_LINK_CHECK( &lu->l );

	    if (BU_LIST_FIRST_MAGIC(&lu->down_hd) == NMG_EDGEUSE_MAGIC) {
		/* go looking around each edge for a face of the same
		 * shell which isn't us and isn't our mate.  If we
		 * find us or our mate before another face of this
		 * shell, we are non-3-manifold.
		 */

		for (BU_LIST_FOR(eu, edgeuse, &lu->down_hd)) {

		    NMG_CK_EDGEUSE( eu );
		    BU_LIST_LINK_CHECK( &eu->l );

		    eur = nmg_radial_face_edge_in_shell(eu);
		    newfu = eur->up.lu_p->up.fu_p;

		    /* skip any known dangling-edge faces or
		     * faces known to be 2manifolds.
		     */
		    while (manifolds &&
			NMG_MANIFOLDS(manifolds,newfu) & NMG_2MANIFOLD &&
			eur != eu->eumate_p) {
				eur = nmg_radial_face_edge_in_shell(
					eur->eumate_p);
				newfu = eur->up.lu_p->up.fu_p;
		    }

		    if (eur == eu->eumate_p) {
			goto out;
		    }
		}
	    }
	}
	eur = (const struct edgeuse *)NULL;

out:
	if (rt_g.NMG_debug & DEBUG_BASIC)  {
		struct bn_tol	tol;	/* HACK */
		tol.magic = BN_TOL_MAGIC;
		tol.dist = 1;
		tol.dist_sq = tol.dist * tol.dist;
		tol.perp = 1e-5;
		tol.para = 1 - tol.perp;

		bu_log("nmg_dangling_face(fu=x%x, manifolds=x%x) dangling_eu=x%x\n", fu, manifolds, eur);
		if( eur )  nmg_pr_fu_around_eu( eur, &tol );
	}
	if ((rt_g.NMG_debug & DEBUG_MANIF) && (eur != (const struct edgeuse *)NULL) )
		bu_log( "\tdangling eu x%x\n", eur );

	return eur != (const struct edgeuse *)NULL;
}

/**
 *	"Paint" the elements of a face with a meaning.  For example
 *	mark everything in a face as being part of a 2-manifold
 */
static void paint_face(struct faceuse *fu, char *paint_table, int paint_color, char *paint_meaning, char *tbl)
{
	struct faceuse *newfu;
	struct loopuse *lu;
	struct edgeuse *eu;
	const struct edgeuse *eur;

#if 1
	if (rt_g.NMG_debug & DEBUG_MANIF)
		bu_log("nmg_paint_face(%08x, %d)\n", fu, paint_color);
#endif
	if (NMG_INDEX_VALUE(paint_table, fu->index) != 0)
		return;

	NMG_INDEX_ASSIGN(paint_table, fu, paint_color);

	for (BU_LIST_FOR(lu, loopuse, &fu->lu_hd)) {

		if (rt_g.NMG_debug & DEBUG_MANIF)
			bu_log( "\tlu=x%x\n", lu );

		NMG_CK_LOOPUSE( lu );
		BU_LIST_LINK_CHECK( &lu->l );

		if (BU_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC)
			continue;

		for (BU_LIST_FOR(eu, edgeuse, &lu->down_hd)) {
			if (rt_g.NMG_debug & DEBUG_MANIF)
				bu_log( "\t\teu=x%x\n", eu );
			NMG_CK_EDGEUSE(eu);
			NMG_CK_EDGEUSE(eu->eumate_p);
			eur = nmg_radial_face_edge_in_shell(eu);
			NMG_CK_EDGEUSE(eur);
			NMG_CK_FACEUSE(eur->up.lu_p->up.fu_p);
			newfu = eur->up.lu_p->up.fu_p;

			if (rt_g.NMG_debug & DEBUG_MANIF)
				bu_log( "\t\t\teur=x%x, newfu=x%x\n", eur, newfu );

			BU_LIST_LINK_CHECK( &eu->l );
			BU_LIST_LINK_CHECK( &eur->l );

			while (NMG_MANIFOLDS(tbl, newfu) & NMG_2MANIFOLD &&
			    eur != eu->eumate_p) {
				eur = nmg_radial_face_edge_in_shell(
							eur->eumate_p);
				newfu = eur->up.lu_p->up.fu_p;

				if (rt_g.NMG_debug & DEBUG_MANIF)
					bu_log( "\t\t\teur=x%x, newfu=x%x\n", eur, newfu );
			}

			if( newfu == fu->fumate_p )
				continue;
			else if (newfu->orientation == OT_SAME)
				paint_face(newfu,paint_table,paint_color,
					paint_meaning,tbl);
			else {
				/* mark this group as being interior */
				paint_meaning[paint_color] = PAINT_INTERIOR;

				if (rt_g.NMG_debug & DEBUG_MANIF)
					bu_log( "\t---- Painting fu x%x as interior, new_fu = x%x, eu=x%x, eur=x%x\n", fu, newfu, eu, eur );
			}
		}
	}
}

static void set_edge_sub_manifold(char *tbl, struct edgeuse *eu_p, char manifold)
{

	NMG_CK_EDGEUSE(eu_p);
	NMG_CK_EDGE(eu_p->e_p);
	NMG_CK_VERTEXUSE(eu_p->vu_p);
	NMG_CK_VERTEX(eu_p->vu_p->v_p);

	NMG_SET_MANIFOLD(tbl, eu_p, manifold);
	NMG_SET_MANIFOLD(tbl, eu_p->e_p, manifold);

	NMG_SET_MANIFOLD(tbl, eu_p->vu_p, manifold);
	NMG_SET_MANIFOLD(tbl, eu_p->vu_p->v_p, manifold);
}


static void set_loop_sub_manifold(char *tbl, struct loopuse *lu_p, char manifold)
{
	struct edgeuse *eu_p;
	struct vertexuse *vu_p;
#if 0
	if (rt_g.NMG_debug & DEBUG_MANIF)
		bu_log("nmg_set_loop_sub_manifold(%08x)\n", lu_p);
#endif
	NMG_CK_LOOPUSE(lu_p);

	NMG_SET_MANIFOLD(tbl, lu_p, manifold);
	NMG_SET_MANIFOLD(tbl, lu_p->l_p, manifold);
	if (BU_LIST_FIRST_MAGIC(&lu_p->down_hd) == NMG_VERTEXUSE_MAGIC) {
		vu_p = BU_LIST_FIRST(vertexuse, &lu_p->down_hd);
		NMG_SET_MANIFOLD(tbl, vu_p, manifold);
		NMG_SET_MANIFOLD(tbl, vu_p->v_p, manifold);
	} else if (BU_LIST_FIRST_MAGIC(&lu_p->down_hd) == NMG_EDGEUSE_MAGIC) {
		for (BU_LIST_FOR(eu_p, edgeuse, &lu_p->down_hd)) {
			BU_LIST_LINK_CHECK( &eu_p->l );
			set_edge_sub_manifold(tbl, eu_p, manifold);
		}
	} else
		bu_bomb("bad child of loopuse\n");
}
static void set_face_sub_manifold(char *tbl, struct faceuse *fu_p, char manifold)
{
	struct loopuse *lu_p;

	NMG_CK_FACEUSE(fu_p);
	NMG_CK_FACE(fu_p->f_p);

	NMG_SET_MANIFOLD(tbl, fu_p, manifold);
	NMG_SET_MANIFOLD(tbl, fu_p->f_p, manifold);
	for (BU_LIST_FOR(lu_p, loopuse, &fu_p->lu_hd)) {
		BU_LIST_LINK_CHECK( &lu_p->l );
		set_loop_sub_manifold(tbl, lu_p, manifold);
	}
}


char *
nmg_shell_manifolds(struct shell *sp, char *tbl)
{
	struct edgeuse *eu_p;
	struct loopuse *lu_p;
	struct faceuse *fu_p;
	char *paint_meaning, *paint_table;
	unsigned int paint_color;
	int found;

	if (rt_g.NMG_debug & DEBUG_MANIF)
		bu_log("nmg_shell_manifolds(%08x)\n", sp);

	NMG_CK_SHELL(sp);

	if (tbl == (char *)NULL)
		tbl = bu_calloc(sp->r_p->m_p->maxindex, 1, "manifold table");

	/*
	 * points in shells form 0-manifold objects.
	 */
	if (sp->vu_p) {
		NMG_CK_VERTEXUSE(sp->vu_p);
		NMG_SET_MANIFOLD(tbl, sp, NMG_0MANIFOLD);
		NMG_SET_MANIFOLD(tbl, sp->vu_p, NMG_0MANIFOLD);
		NMG_SET_MANIFOLD(tbl, sp->vu_p->v_p, NMG_0MANIFOLD);
		BU_LIST_LINK_CHECK( &sp->vu_p->l );
	}

	/* edges in shells are (components of)
	 * 1-manifold objects.
	 */
	if (BU_LIST_NON_EMPTY(&sp->eu_hd)) {

		for (BU_LIST_FOR(eu_p, edgeuse, &sp->eu_hd)) {
			BU_LIST_LINK_CHECK( &eu_p->l );
			set_edge_sub_manifold(tbl, eu_p, NMG_1MANIFOLD);
		}
		NMG_SET_MANIFOLD(tbl, sp, NMG_1MANIFOLD);
	}

	/* loops in shells are (components of)
	 * 1-manifold objects.
	 */
	if (BU_LIST_NON_EMPTY(&sp->lu_hd)) {

		for (BU_LIST_FOR(lu_p, loopuse, &sp->lu_hd)) {
			BU_LIST_LINK_CHECK( &lu_p->l );

			set_loop_sub_manifold(tbl, lu_p, NMG_1MANIFOLD);
		}
		NMG_SET_MANIFOLD(tbl, sp, NMG_1MANIFOLD);
	}

	if (rt_g.NMG_debug & DEBUG_MANIF)
		bu_log("starting manifold classification on shell faces\n");

	/*
	 * faces may be either 2 or 3 manifold components.
	 */
	if (BU_LIST_IS_EMPTY(&sp->fu_hd))
		return tbl;


	/* mark all externally dangling faces and faces
	 * with or adjacent to dangling edges.
	 */
	do {
		found = 0;
		for (BU_LIST_FOR(fu_p, faceuse, &sp->fu_hd)) {
			NMG_CK_FACEUSE(fu_p);
			BU_LIST_LINK_CHECK( &fu_p->l );

			/* if this has already been marked as a 2-manifold
			 * then we don't need to check it again
			 */
			if (NMG_MANIFOLDS(tbl,fu_p) & NMG_2MANIFOLD)
				continue;

			if (nmg_dangling_face(fu_p, tbl)) {
				found = 1;

				NMG_SET_MANIFOLD(tbl, fu_p, NMG_2MANIFOLD);

				if (rt_g.NMG_debug & DEBUG_MANIF)
					bu_log("found dangling face\n");
			}
		}
	} while (found);

	/* paint the exterior faces to discover what the
	 * actual enclosing shell is
	 */

	if (rt_g.NMG_debug & DEBUG_MANIF)
		bu_log("starting to paint non-dangling faces\n");

	paint_meaning = bu_calloc(256, 1, "paint meaning table");
	paint_table = bu_calloc(sp->r_p->m_p->maxindex, 1, "paint table");
	paint_color = 1;

	for (BU_LIST_FOR(fu_p, faceuse, &sp->fu_hd)) {
		BU_LIST_LINK_CHECK( &fu_p->l );

		if (fu_p->orientation != OT_SAME ||
		    NMG_INDEX_VALUE(paint_table, fu_p->index) != 0)
			continue;

		paint_face(fu_p, paint_table, paint_color, paint_meaning, tbl);
		paint_color++;
	}


	if (rt_g.NMG_debug & DEBUG_MANIF)
		bu_log("painting done, looking at colors\n");

	/* all the faces painted with "interior" paint are 2manifolds
	 * those faces still painted with "exterior" paint are
	 * 3manifolds, ie. part of the enclosing surface
	 */
	for (BU_LIST_FOR(fu_p, faceuse, &sp->fu_hd)) {
		BU_LIST_LINK_CHECK( &fu_p->l );

		paint_color = NMG_INDEX_VALUE(paint_table, fu_p->index);

		if (paint_color < 0 || paint_color > 255) {
		    bu_log("ERROR: color index out of range (%d > %d)\n", paint_color, 255);
		    break;
		}

		if (NMG_INDEX_VALUE(paint_meaning, paint_color) == PAINT_INTERIOR) {
			set_face_sub_manifold(tbl, fu_p, NMG_2MANIFOLD);
		} else if (NMG_INDEX_VALUE(paint_meaning, paint_color) == PAINT_EXTERIOR) {
			set_face_sub_manifold(tbl, fu_p, NMG_3MANIFOLD);
		}
	}

	bu_free(paint_meaning, "paint meaning table");
	bu_free(paint_table, "paint table");

	for (BU_LIST_FOR(fu_p, faceuse, &sp->fu_hd)) {
		BU_LIST_LINK_CHECK( &fu_p->l );

		if (fu_p->orientation != OT_SAME)
			NMG_CP_MANIFOLD(tbl, fu_p, fu_p->fumate_p);
	}

	return(tbl);
}


char *
nmg_manifolds(struct model *m)
{
	struct nmgregion *rp;
	struct shell *sp;
	char *tbl;


	NMG_CK_MODEL(m);
	if (rt_g.NMG_debug & DEBUG_MANIF)
		bu_log("nmg_manifolds(%08x)\n", m);

	tbl = bu_calloc(m->maxindex, 1, "manifold table");


	for (BU_LIST_FOR(rp, nmgregion, &m->r_hd)) {
		NMG_CK_REGION(rp);
		BU_LIST_LINK_CHECK( &rp->l );

		for (BU_LIST_FOR(sp, shell, &rp->s_hd)) {

			NMG_CK_SHELL( sp );
			BU_LIST_LINK_CHECK( &sp->l );

			nmg_shell_manifolds(sp, tbl);

			/* make sure the region manifold bits are a superset
			 * of the shell manifold bits
			 */
			NMG_CP_MANIFOLD(tbl, rp, sp);
		}
	}

	return(tbl);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.17 2007/05/18 04:13:49 brlcad Exp $ (ARL)";
d277 2
a278 1
	char *paint_meaning, *paint_table, paint_color;
a386 1

d394 6
a399 2
		paint_color = NMG_INDEX_VALUE(paint_table,
						fu_p->index);
d401 1
a401 2
		if (NMG_INDEX_VALUE(paint_meaning, (int)paint_color) ==
		    PAINT_INTERIOR) {
d403 1
a403 2
		} else if (NMG_INDEX_VALUE(paint_meaning, (int)paint_color)
		    == PAINT_EXTERIOR) {
@


14.17
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.16 2007/01/27 01:41:41 brlcad Exp $ (ARL)";
a40 1

a41 1
#ifdef HAVE_STRING_H
d43 1
a43 3
#else
#include <strings.h>
#endif
@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.15 2007/01/23 01:13:38 brlcad Exp $ (ARL)";
d65 1
a65 1
		rt_bomb("Goodbye\n"); \
d257 1
a257 1
		rt_bomb("bad child of loopuse\n");
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.14 2007/01/21 04:45:44 brlcad Exp $ (ARL)";
d61 5
a65 5
	    	bu_log("0x%08x->forw(0x%08x)->back = 0x%08x\n", \
	    		(p), (p)->forw, (p)->forw->back); \
	    	bu_log("0x%08x->back(0x%08x)->forw = 0x%08x\n", \
	    		(p), (p)->back, (p)->back->forw); \
	    	rt_bomb("Goodbye\n"); \
d95 5
a99 5
	        /* go looking around each edge for a face of the same
	         * shell which isn't us and isn't our mate.  If we
	         * find us or our mate before another face of this
	         * shell, we are non-3-manifold.
	         */
d101 1
a101 1
	    	for (BU_LIST_FOR(eu, edgeuse, &lu->down_hd)) {
d103 2
a104 2
	 	    NMG_CK_EDGEUSE( eu );
	 	    BU_LIST_LINK_CHECK( &eu->l );
d109 1
a109 1
	    	    /* skip any known dangling-edge faces or
d113 1
a113 1
		        NMG_MANIFOLDS(manifolds,newfu) & NMG_2MANIFOLD &&
d118 1
a118 1
	    	    }
d121 1
a121 1
		    	goto out;
a274 1

d403 1
a403 1
		    	set_face_sub_manifold(tbl, fu_p, NMG_2MANIFOLD);
d406 1
a406 1
		    	set_face_sub_manifold(tbl, fu_p, NMG_3MANIFOLD);
@


14.14
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.13 2007/01/20 14:36:55 brlcad Exp $ (ARL)";
@


14.13
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 2

/*@@{*/
d24 1
d34 1
a34 1
/*@@}*/
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.12 2006/09/16 02:04:25 lbutler Exp $ (ARL)";
@


14.12
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.11 2006/01/18 06:46:17 brlcad Exp $ (ARL)";
@


14.11
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup nmg */
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.10 2005/10/23 04:44:36 brlcad Exp $ (ARL)";
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1994-2005 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.9 2005/08/12 22:31:08 lbutler Exp $ (ARL)";
@


14.9
log
@Doxygen changes
@
text
@d30 1
a30 1
 *  
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.8 2005/01/30 20:31:02 brlcad Exp $ (ARL)";
d69 1
a69 1
	    
d79 1
a79 1
int 
d111 1
a111 1
	    	    /* skip any known dangling-edge faces or 
d223 1
a223 1
	
d264 1
a264 1
	
d389 1
a389 1
		
d393 1
a393 1
		
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d69 1
a69 1

d79 1
a79 1
int
d111 1
a111 1
	    	    /* skip any known dangling-edge faces or
d223 1
a223 1

d264 1
a264 1

d389 1
a389 1

d393 1
a393 1

@


14.8
log
@update copyright to 2005
@
text
@d21 4
a25 1
 *
d35 2
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_manif.c,v 14.7 2004/12/21 07:32:31 morrison Exp $ (ARL)";
d71 1
a71 1
/*	N M G _ D A N G L I N G _ F A C E
d148 1
a148 1
/*
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2004 United States Government as represented by
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 14.6 2004/12/21 06:58:43 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a30 2
 *  
 *
d33 1
a33 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 14.5 2004/12/21 06:44:33 morrison Exp $ (ARL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a32 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1994-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 14.4 2004/12/21 06:18:46 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a31 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 14.3 2004/12/21 05:45:24 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 14.2 2004/12/21 04:18:20 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			N M G _ M A N I F . C
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 1.4 2004/09/03 23:30:58 morrison Exp $ (ARL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 1.3 2004/08/02 23:01:49 morrison Exp $ (ARL)";
d448 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_manif.c,v 1.2 2004/06/08 19:57:54 morrison Exp $ (ARL)";
d30 1
a30 1
#ifdef USE_STRING_H
@


1.2
log
@bye bye externs.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/nmg_manif.c,v 11.15 2004/05/10 15:30:46 erikg Exp $ (ARL)";
a38 1
#include "externs.h"
@

