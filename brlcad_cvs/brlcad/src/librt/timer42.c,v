head	14.15;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.6
	rel-7-10-2:14.15
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.15
date	2007.01.27.01.41.42;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.39;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.56;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.09.16.02.04.26;	author lbutler;	state Exp;
branches;
next	14.10;

14.10
date	2006.03.24.23.21.34;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches
	14.9.2.1;
next	14.8;

14.8
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.31.03;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.21;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.48;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.21;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.57.55;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.11;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.9.2.1
date	2006.04.07.19.30.25;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.15
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@/*                       T I M E R 4 2 . C
 * BRL-CAD
 *
 * Copyright (c) 1985-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup timer */
/** @@{ */
/** @@file timer42.c
 *
 * To provide timing information for RT when running on 4.2 BSD UNIX.
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

#ifndef lint
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.14 2007/01/23 01:13:39 brlcad Exp $ (BRL)";
#endif

#include "common.h"


#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"

static struct	timeval time0;	/* Time at which timeing started */
static struct	rusage ru0;	/* Resource utilization at the start */
static struct	rusage ru0c;	/* Resource utilization at the start */

static void prusage(register struct rusage *r0, register struct rusage *r1, struct timeval *e, struct timeval *b, struct bu_vls *vp);
#if 0
static void tvadd();
#endif
static void tvsub(struct timeval *tdiff, struct timeval *t1, struct timeval *t0);
static void psecs(long int l, struct bu_vls *vp);


/*
 *			R T _ P R E P _ T I M E R
 */
void
rt_prep_timer(void)
{
	gettimeofday(&time0, (struct timezone *)0);
	getrusage(RUSAGE_SELF, &ru0);
	getrusage(RUSAGE_CHILDREN, &ru0c);
}

/*
 *			R T _ G E T _ T I M E R
 *
 *  Reports on the passage of time, since rt_prep_timer() was called.
 *  Explicit return is number of CPU seconds.
 *  String return is descriptive.
 *  If "elapsed" pointer is non-null, number of elapsed seconds are returned.
 *  Times returned will never be zero.
 */
double
rt_get_timer(struct bu_vls *vp, double *elapsed)
{
	struct timeval timedol;
	struct rusage ru1;
	struct rusage ru1c;
	struct timeval td;
	double	user_cpu_secs;
	double	elapsed_secs;


	getrusage(RUSAGE_SELF, &ru1);
	getrusage(RUSAGE_CHILDREN, &ru1c);
	gettimeofday(&timedol, (struct timezone *)0);

	elapsed_secs = (timedol.tv_sec - time0.tv_sec) +
		(timedol.tv_usec - time0.tv_usec)/1000000.0;

	tvsub( &td, &ru1.ru_utime, &ru0.ru_utime );
	user_cpu_secs = td.tv_sec + ((double)td.tv_usec) / 1000000.0;

	tvsub( &td, &ru1c.ru_utime, &ru0c.ru_utime );
	user_cpu_secs += td.tv_sec + ((double)td.tv_usec) / 1000000.0;

	if( user_cpu_secs < 0.00001 )  user_cpu_secs = 0.00001;
	if( elapsed_secs < 0.00001 )  elapsed_secs = user_cpu_secs;	/* It can't be any less! */

	if( elapsed )  *elapsed = elapsed_secs;

	if( vp )  {
		bu_vls_printf( vp, "cpu = %g sec, elapsed = %g sec\n",
			user_cpu_secs, elapsed_secs );
		bu_vls_strcat( vp, "    parent: " );
		prusage(&ru0, &ru1, &timedol, &time0, vp);
		bu_vls_strcat( vp, "\n  children: ");
		prusage(&ru0c, &ru1c, &timedol, &time0, vp);
	}

	return( user_cpu_secs );
}

static void
prusage(register struct rusage *r0, register struct rusage *r1, struct timeval *e, struct timeval *b, struct bu_vls *vp)
{
	struct timeval tdiff;
	register time_t t;
	register char *cp;
	register int i;
	int ms;

	BU_CK_VLS(vp);

	t = (r1->ru_utime.tv_sec-r0->ru_utime.tv_sec)*100+
	    (r1->ru_utime.tv_usec-r0->ru_utime.tv_usec)/10000+
	    (r1->ru_stime.tv_sec-r0->ru_stime.tv_sec)*100+
	    (r1->ru_stime.tv_usec-r0->ru_stime.tv_usec)/10000;
	ms =  (e->tv_sec-b->tv_sec)*100 + (e->tv_usec-b->tv_usec)/10000;

	cp = "%Uuser %Ssys %Ereal %P %Xi+%Dd %Mmaxrss %F+%Rpf %Ccsw";
	for (; *cp; cp++)  {
		if (*cp != '%')
			bu_vls_putc( vp, *cp );
		else if (cp[1]) switch(*++cp) {

		case 'U':
			tvsub(&tdiff, &r1->ru_utime, &r0->ru_utime);
			bu_vls_printf(vp, "%ld.%01ld", (long)tdiff.tv_sec, (long)(tdiff.tv_usec/100000));
			break;

		case 'S':
			tvsub(&tdiff, &r1->ru_stime, &r0->ru_stime);
			bu_vls_printf(vp, "%ld.%01ld", (long)tdiff.tv_sec, (long)(tdiff.tv_usec/100000));
			break;

		case 'E':
			psecs(ms / 100, vp);
			break;

		case 'P':
			bu_vls_printf(vp, "%d%%", (int) (t*100 / ((ms ? ms : 1))));
			break;

		case 'W':
			i = r1->ru_nswap - r0->ru_nswap;
			bu_vls_printf(vp, "%d", i);
			break;

		case 'X':
			bu_vls_printf(vp, "%ld", (long)(t == 0 ? 0 : (r1->ru_ixrss-r0->ru_ixrss)/t));
			break;

		case 'D':
			bu_vls_printf(vp, "%ld", (long)(t == 0 ? 0 : (r1->ru_idrss+r1->ru_isrss-(r0->ru_idrss+r0->ru_isrss))/t));
			break;

		case 'K':
			bu_vls_printf(vp, "%ld", (long)(t == 0 ? 0 :  ((r1->ru_ixrss+r1->ru_isrss+r1->ru_idrss) - (r0->ru_ixrss+r0->ru_idrss+r0->ru_isrss))/t));
			break;

		case 'M':
			bu_vls_printf(vp, "%ld", (long)(r1->ru_maxrss/2));
			break;

		case 'F':
			bu_vls_printf(vp, "%ld", (long)(r1->ru_majflt-r0->ru_majflt));
			break;

		case 'R':
			bu_vls_printf(vp, "%ld", (long)(r1->ru_minflt-r0->ru_minflt));
			break;

		case 'I':
			bu_vls_printf(vp, "%ld", (long)(r1->ru_inblock-r0->ru_inblock));
			break;

		case 'O':
			bu_vls_printf(vp, "%ld", (long)(r1->ru_oublock-r0->ru_oublock));
			break;
		case 'C':
			bu_vls_printf(vp, "%ld+%ld", (long)(r1->ru_nvcsw-r0->ru_nvcsw), (long)(r1->ru_nivcsw-r0->ru_nivcsw) );
			break;
		}
	}
}

#if 0
static void
tvadd(tsum, t0)
	struct timeval *tsum, *t0;
{

	tsum->tv_sec += t0->tv_sec;
	tsum->tv_usec += t0->tv_usec;
	if (tsum->tv_usec > 1000000)
		tsum->tv_sec++, tsum->tv_usec -= 1000000;
}
#endif

static void
tvsub(struct timeval *tdiff, struct timeval *t1, struct timeval *t0)
{

	tdiff->tv_sec = t1->tv_sec - t0->tv_sec;
	tdiff->tv_usec = t1->tv_usec - t0->tv_usec;
	if (tdiff->tv_usec < 0)
		tdiff->tv_sec--, tdiff->tv_usec += 1000000;
}

static void
psecs(long int l, struct bu_vls *vp)
{
	register int i;

	i = l / 3600;
	if (i) {
		register int	j;
		bu_vls_printf(vp, "%d:", i);
		i = l % 3600;
		j = i / 60;
		bu_vls_printf(vp, "%d%d", j / 10, j % 10);
	} else {
		i = l;
		bu_vls_printf(vp, "%d", i / 60);
	}
	i = i % 60; /* GSM: bug in Alliant CE optimization prohibits "%=" here */
	bu_vls_printf(vp, ":%d%d", i / 10, i % 10);
}

/*
 *			R T _ R E A D _ T I M E R
 *
 *  Compatability routine
 */
double
rt_read_timer(char *str, int len)
{
	struct bu_vls	vls;
	double		cpu;
	int		todo;

	if( !str )  return  rt_get_timer( (struct bu_vls *)0, (double *)0 );

	bu_vls_init( &vls );
	cpu = rt_get_timer( &vls, (double *)0 );
	todo = bu_vls_strlen( &vls );
	if( todo > len )  todo = len-1;
	strncpy( str, bu_vls_addr(&vls), todo );
	str[todo] = '\0';
	return cpu;
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d34 1
a34 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.13 2007/01/21 04:45:45 brlcad Exp $ (BRL)";
a39 1

a62 1

@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d34 1
a34 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.12 2007/01/20 14:36:56 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d35 1
a35 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.11 2006/09/16 02:04:26 lbutler Exp $ (BRL)";
d277 1
a277 1
/*@@}*/
@


14.11
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2006 United States Government as represented by
d35 1
a35 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.10 2006/03/24 23:21:34 brlcad Exp $ (BRL)";
@


14.10
log
@lots of intel 9 for altix compiler warning quellings
@
text
@d22 1
a22 1
/** \addtogroup librt */
a32 1
/*@@}*/
d35 1
a35 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.9 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
d277 1
@


14.9
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.8 2005/10/23 04:44:36 brlcad Exp $ (BRL)";
d153 1
a153 1
			bu_vls_printf(vp, "%d.%01d", tdiff.tv_sec, tdiff.tv_usec/100000);
d158 1
a158 1
			bu_vls_printf(vp, "%d.%01d", tdiff.tv_sec, tdiff.tv_usec/100000);
d175 1
a175 1
			bu_vls_printf(vp, "%d", t == 0 ? 0 : (r1->ru_ixrss-r0->ru_ixrss)/t);
d179 1
a179 2
			bu_vls_printf(vp, "%d", t == 0 ? 0 :
			    (r1->ru_idrss+r1->ru_isrss-(r0->ru_idrss+r0->ru_isrss))/t);
d183 1
a183 3
			bu_vls_printf(vp, "%d", t == 0 ? 0 :
			    ((r1->ru_ixrss+r1->ru_isrss+r1->ru_idrss) -
			    (r0->ru_ixrss+r0->ru_idrss+r0->ru_isrss))/t);
d187 1
a187 1
			bu_vls_printf(vp, "%d", r1->ru_maxrss/2);
d191 1
a191 1
			bu_vls_printf(vp, "%d", r1->ru_majflt-r0->ru_majflt);
d195 1
a195 1
			bu_vls_printf(vp, "%d", r1->ru_minflt-r0->ru_minflt);
d199 1
a199 1
			bu_vls_printf(vp, "%d", r1->ru_inblock-r0->ru_inblock);
d203 1
a203 1
			bu_vls_printf(vp, "%d", r1->ru_oublock-r0->ru_oublock);
d206 1
a206 2
			bu_vls_printf(vp, "%d+%d", r1->ru_nvcsw-r0->ru_nvcsw,
				r1->ru_nivcsw-r0->ru_nivcsw );
@


14.9.2.1
log
@update from HEAD
@
text
@d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.9 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
d153 1
a153 1
			bu_vls_printf(vp, "%ld.%01ld", (long)tdiff.tv_sec, (long)(tdiff.tv_usec/100000));
d158 1
a158 1
			bu_vls_printf(vp, "%ld.%01ld", (long)tdiff.tv_sec, (long)(tdiff.tv_usec/100000));
d175 1
a175 1
			bu_vls_printf(vp, "%ld", (long)(t == 0 ? 0 : (r1->ru_ixrss-r0->ru_ixrss)/t));
d179 2
a180 1
			bu_vls_printf(vp, "%ld", (long)(t == 0 ? 0 : (r1->ru_idrss+r1->ru_isrss-(r0->ru_idrss+r0->ru_isrss))/t));
d184 3
a186 1
			bu_vls_printf(vp, "%ld", (long)(t == 0 ? 0 :  ((r1->ru_ixrss+r1->ru_isrss+r1->ru_idrss) - (r0->ru_ixrss+r0->ru_idrss+r0->ru_isrss))/t));
d190 1
a190 1
			bu_vls_printf(vp, "%ld", (long)(r1->ru_maxrss/2));
d194 1
a194 1
			bu_vls_printf(vp, "%ld", (long)(r1->ru_majflt-r0->ru_majflt));
d198 1
a198 1
			bu_vls_printf(vp, "%ld", (long)(r1->ru_minflt-r0->ru_minflt));
d202 1
a202 1
			bu_vls_printf(vp, "%ld", (long)(r1->ru_inblock-r0->ru_inblock));
d206 1
a206 1
			bu_vls_printf(vp, "%ld", (long)(r1->ru_oublock-r0->ru_oublock));
d209 2
a210 1
			bu_vls_printf(vp, "%ld+%ld", (long)(r1->ru_nvcsw-r0->ru_nvcsw), (long)(r1->ru_nivcsw-r0->ru_nivcsw) );
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1985-2005 United States Government as represented by
d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.7 2005/08/12 22:31:08 lbutler Exp $ (BRL)";
@


14.7
log
@Doxygen changes
@
text
@d31 1
a31 1
 *  
d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.6 2005/01/30 20:31:03 brlcad Exp $ (BRL)";
d261 1
a261 1
 * 
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d31 1
a31 1
 *
d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header$ (BRL)";
d261 1
a261 1
 *
@


14.6
log
@update copyright to 2005
@
text
@d21 3
d25 1
a25 3
 *
 * Function -
 *	To provide timing information for RT when running on 4.2 BSD UNIX.
d33 2
d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/timer42.c,v 14.5 2004/12/21 06:38:21 morrison Exp $ (BRL)";
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2004 United States Government as represented by
d33 1
a33 1
static const char RCStimer[] = "@@(#)$Header: /cvs/brlcad/src/librt/timer42.c,v 14.4 2004/12/21 06:18:48 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a30 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
d33 1
a33 1
static const char RCStimer[] = "@@(#)$Header: /cvs/brlcad/src/librt/timer42.c,v 14.3 2004/12/21 05:45:24 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header: /cvs/brlcad/src/librt/timer42.c,v 14.2 2004/12/21 04:18:21 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header: /cvs/brlcad/src/librt/timer42.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			T I M E R 4 2 . C
d36 1
a36 1
static const char RCStimer[] = "@@(#)$Header: /cvs/brlcad/src/librt/timer42.c,v 1.3 2004/08/02 23:01:49 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d17 1
a17 1
static const char RCStimer[] = "@@(#)$Header: /cvs/brlcad/src/librt/timer42.c,v 1.2 2004/06/08 19:57:55 morrison Exp $ (BRL)";
d262 10
@


1.2
log
@bye bye externs.h
@
text
@d17 1
a17 1
static const char RCStimer[] = "@@(#)$Header$ (BRL)";
d20 1
a20 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d17 1
a17 1
static const char RCStimer[] = "@@(#)$Header: /cvs/brlcad/librt/timer42.c,v 11.12 2004/05/10 15:30:47 erikg Exp $ (BRL)";
a32 1
#include "externs.h"
@

