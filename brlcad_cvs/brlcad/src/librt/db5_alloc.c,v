head	14.17;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.6
	rel-7-10-2:14.15
	rel-7-10-0:14.14
	rel-7-8-4:14.10
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.17
date	2007.12.16.18.53.49;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.09.15.16.23.12;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.05.19.02.05.24;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.38;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.54;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.09.16.02.04.24;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.35;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.07;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.57;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.07.18.58;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.45;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.19;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.56;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                     D B 5 _ A L L O C . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup db5 */
/** @@{ */
/** @@file db5_alloc.c
 *
 *  Handle disk space allocation in the BRL-CAD v5 database.
 *
 *  @@Author
 *	Michael John Muuss
 *
 *  @@par Source -
 *	The U. S. Army Research Laboratory
 *  @@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.16 2007/09/15 16:23:12 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "db5.h"
#include "raytrace.h"

#include "./debug.h"

/**
 *			D B 5 _ W R I T E _ F R E E
 *
 *  Create a v5 database "free" object of the specified size,
 *  and place it at the indicated location in the database.
 *
 *  There are two interesting cases:
 *	-  The free object is "small".  Just write it all at once.
 *	-  The free object is "large".  Write header and trailer
 *	    separately
 *
 *
 *  @@return	0	OK
 *  @@return	-1	Fail.  This is a horrible error.
 */
int
db5_write_free( struct db_i *dbip, struct directory *dp, long length )
{
	struct bu_external	ext;

	RT_CK_DBI(dbip);
	RT_CK_DIR(dp);

	if( length <= 8192 )  {

		BU_INIT_EXTERNAL( &ext );
		db5_make_free_object( &ext, length );

		if( dp->d_flags & RT_DIR_INMEM )  {
			memcpy(dp->d_un.ptr, (char *)ext.ext_buf, ext.ext_nbytes);
			bu_free_external( &ext );
			return 0;
		}

		if( db_write( dbip, (char *)ext.ext_buf, ext.ext_nbytes, dp->d_addr ) < 0 )  {
			bu_free_external( &ext );
			return -1;
		}
		bu_free_external( &ext );
		return 0;
	}

	/* Free object is "large", only write the header and trailer bytes. */

	BU_INIT_EXTERNAL( &ext );
	db5_make_free_object_hdr( &ext, length );

	if( dp->d_flags & RT_DIR_INMEM )  {
		memcpy(dp->d_un.ptr, (char *)ext.ext_buf, ext.ext_nbytes);
		((char *)ext.ext_buf)[length-1] = DB5HDR_MAGIC2;
		bu_free_external( &ext );
		return 0;
	}

	/* Write header */
	if( db_write( dbip, (char *)ext.ext_buf, ext.ext_nbytes, dp->d_addr ) < 0 )  {
		bu_free_external( &ext );
		return -1;
	}

	/* Write trailer byte */
	*((char *)ext.ext_buf) = DB5HDR_MAGIC2;
	if( db_write( dbip, (char *)ext.ext_buf, 1, dp->d_addr+length-1 ) < 0 )  {
		bu_free_external( &ext );
		return -1;
	}
	bu_free_external( &ext );
	return 0;
}

/**
 *			D B 5 _ R E A L L O C
 *
 *  Change the size of a v5 database object.
 *
 *  If the object is getting smaller, break it into two pieces,
 *  and write out free objects for both.
 *  The caller is expected to re-write new data on the first one.
 *
 *  If the object is getting larger, seek a suitable "hole" large enough
 *  to hold it, throwing back any surplus, properly marked.
 *
 *  If the object is getting larger and there is no suitable "hole"
 *  in the database, extend the file, write a free object in the
 *  new space, and write a free object in the old space.
 *
 *  There is no point to trying to extend in place, that would require
 *  two searches through the memory map, and doesn't save any disk I/O.
 *
 *  Returns -
 *	0	OK
 *	-1	Failure
 */
int
db5_realloc( struct db_i *dbip, struct directory *dp, struct bu_external *ep )
{
	long	baseaddr;
	long	baselen;

	RT_CK_DBI(dbip);
	RT_CK_DIR(dp);
	BU_CK_EXTERNAL(ep);
	if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) dbip=x%x, dp=x%x, ext_nbytes=%ld\n",
		dp->d_namep, dbip, dp, ep->ext_nbytes );

	BU_ASSERT_LONG( ep->ext_nbytes&7, ==, 0 );

	if( dp->d_addr != -1L && ep->ext_nbytes == dp->d_len )  {
		if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) current allocation is exactly right.\n", dp->d_namep);
		return 0;
	}
	if( dp->d_addr == -1L )  BU_ASSERT_LONG( dp->d_len, ==, 0 );

	baseaddr = dp->d_addr;
	baselen = dp->d_len;

	if( dp->d_flags & RT_DIR_INMEM )  {
		if( dp->d_un.ptr )  {
			if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) bu_realloc()ing memory resident object\n", dp->d_namep);
			dp->d_un.ptr = bu_realloc( dp->d_un.ptr,
				ep->ext_nbytes, "db5_realloc() d_un.ptr" );
		} else {
			if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) bu_malloc()ing memory resident object\n", dp->d_namep);
			dp->d_un.ptr = bu_malloc( ep->ext_nbytes, "db5_realloc() d_un.ptr" );
		}
		dp->d_len = ep->ext_nbytes;
		return 0;
	}

	if( dbip->dbi_read_only )  {
		bu_log("db5_realloc(%s) on READ-ONLY file\n", dp->d_namep);
		return(-1);
	}

	/* If the object is getting smaller... */
	if( ep->ext_nbytes < dp->d_len )  {
		if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) object is getting smaller\n", dp->d_namep);

		/* First, erase front half of storage to desired size. */
		dp->d_len = ep->ext_nbytes;
		if( db5_write_free( dbip, dp, dp->d_len ) < 0 )  return -1;

		/* Second, erase back half of storage to remainder. */
		dp->d_addr = baseaddr + ep->ext_nbytes;
		dp->d_len = baselen - ep->ext_nbytes;
		if( db5_write_free( dbip, dp, dp->d_len ) < 0 )  return -1;

		/* Finally, update tables */
		rt_memfree( &(dbip->dbi_freep), dp->d_len, dp->d_addr );
		dp->d_addr = baseaddr;
		dp->d_len = ep->ext_nbytes;
		return 0;
	}

	/* The object is getting larger... */

	/* Start by zapping existing database object into a free object */
	if( dp->d_addr != -1L )  {
		if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) releasing storage at x%x, len=%d\n", dp->d_namep, dp->d_addr, dp->d_len);

		rt_memfree( &(dbip->dbi_freep), dp->d_len, dp->d_addr );
		if( db5_write_free( dbip, dp, dp->d_len ) < 0 )  return -1;
		baseaddr = dp->d_addr = -1L;	/* sanity */
	}

	/*
	 *  Can we obtain a free block somewhere else?
	 *  Keep in mind that free blocks may be very large (e.g. 50 MBytes).
	 */
	{
		struct mem_map	*mmp;
		long		newaddr;

		if( (mmp = rt_memalloc_nosplit( &(dbip->dbi_freep), ep->ext_nbytes )) != MAP_NULL )  {
			if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) obtained free block at x%x, len=%d\n", dp->d_namep, mmp->m_addr, mmp->m_size );
			BU_ASSERT_LONG( mmp->m_size, >=, ep->ext_nbytes );
			if( mmp->m_size == ep->ext_nbytes )  {
				/* No need to reformat, existing free object is perfect */
				dp->d_addr = mmp->m_addr;
				dp->d_len = ep->ext_nbytes;
				return 0;
			}
			newaddr = mmp->m_addr;
			if( mmp->m_size > ep->ext_nbytes )  {
				/* Reformat and free the surplus */
				dp->d_addr = mmp->m_addr + ep->ext_nbytes;
				dp->d_len = mmp->m_size - ep->ext_nbytes;
				if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) returning surplus at x%x, len=%d\n", dp->d_namep, dp->d_addr, dp->d_len );
				if( db5_write_free( dbip, dp, dp->d_len ) < 0 )  return -1;
				rt_memfree( &(dbip->dbi_freep), dp->d_len, dp->d_addr );
				/* mmp is invalid beyond here! */
			}
			dp->d_addr = newaddr;
			dp->d_len = ep->ext_nbytes;
			/* Erase the new place */
			if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) utilizing free block at addr=x%x, len=%d\n", dp->d_namep, dp->d_addr, dp->d_len);
			if( db5_write_free( dbip, dp, dp->d_len ) < 0 )  return -1;
			return 0;
		}
	}

	/* No free storage of the desired size, extend the database */
	dp->d_addr = dbip->dbi_eof;
	dbip->dbi_eof += ep->ext_nbytes;
	dp->d_len = ep->ext_nbytes;
	if(RT_G_DEBUG&DEBUG_DB) bu_log("db5_realloc(%s) extending database addr=x%x, len=%d\n", dp->d_namep, dp->d_addr, dp->d_len);
#if 0
	/* Extending db with free record isn't necessary even to
	 * provide "stable-store" capability.
	 * If program or system aborts before caller write new object,
	 * there is no problem.
	 */
	if( db5_write_free( dbip, dp, dp->d_len ) < 0 )  return -1;
#endif
	return 0;
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.15 2007/05/19 02:05:24 brlcad Exp $ (BRL)";
d80 1
a80 1
			memcpy( dp->d_un.ptr, (char *)ext.ext_buf, ext.ext_nbytes );
d99 1
a99 1
		memcpy( dp->d_un.ptr, (char *)ext.ext_buf, ext.ext_nbytes );
@


14.15
log
@welcome to 1990, replace calls to bcopy with memcpy.  interestingly enough, valgrind on amd64 linux is showing bcopy() reading more than len bytes (reading to aligned memory internally)
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.14 2007/01/27 01:41:38 brlcad Exp $ (BRL)";
a39 1

a40 1
#ifdef HAVE_STRING_H
a41 3
#else
#include <strings.h>
#endif
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.13 2007/01/23 01:13:36 brlcad Exp $ (BRL)";
d85 1
a85 1
			bcopy( (char *)ext.ext_buf, dp->d_un.ptr, ext.ext_nbytes );
d104 1
a104 1
		bcopy( (char *)ext.ext_buf, dp->d_un.ptr, ext.ext_nbytes );
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.12 2007/01/21 04:45:43 brlcad Exp $ (BRL)";
a40 1

d79 1
a79 1
 	if( length <= 8192 )  {
@


14.12
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.11 2007/01/20 14:36:54 brlcad Exp $ (BRL)";
@


14.11
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 2

/*@@{*/
d24 1
d32 1
a32 2
 *@@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.10 2006/09/16 02:04:24 lbutler Exp $ (BRL)";
d275 1
a275 1
/*@@}*/
@


14.10
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.9 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
@


14.9
log
@update copyright to 2006
@
text
@d22 1
a22 3
/** \defgroup db5 Database5
 * \ingroup librt
 */
d28 1
a28 1
 *  Author -
d31 1
a31 1
 *  Source -
d33 1
a33 1
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
a35 1
/*@@}*/
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.8 2005/10/23 04:44:35 brlcad Exp $ (BRL)";
d67 2
a68 2
 *	1)  The free object is "small".  Just write it all at once.
 *	2)  The free object is "large".  Write header and trailer
d71 3
a73 3
 *  Returns -
 *	0	OK
 *	-1	Fail.  This is a horrible error.
d277 1
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.7 2005/08/12 22:31:07 lbutler Exp $ (BRL)";
@


14.7
log
@Doxygen changes
@
text
@d32 1
a32 1
 *  
d36 1
a36 1
 *  
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.6 2005/01/30 20:30:57 brlcad Exp $ (BRL)";
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d36 1
a36 1
 *
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


14.6
log
@update copyright to 2005
@
text
@d21 6
a27 2
 *			D B _ A L L O C 5 . C
 *
d38 2
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db5_alloc.c,v 14.5 2004/12/21 07:18:58 morrison Exp $ (BRL)";
d63 1
a63 1
/*
d133 1
a133 1
/*
@


14.5
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db5_alloc.c,v 14.4 2004/12/21 06:18:45 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db5_alloc.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db5_alloc.c,v 14.2 2004/12/21 04:18:19 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db5_alloc.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db5_alloc.c,v 1.3 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db5_alloc.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (BRL)";
d255 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db5_alloc.c,v 1.1 2004/05/20 15:19:56 morrison Exp $ (BRL)";
d25 1
a25 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d17 1
a17 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/db5_alloc.c,v 11.13 2004/05/10 15:30:45 erikg Exp $ (BRL)";
d20 1
a20 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

