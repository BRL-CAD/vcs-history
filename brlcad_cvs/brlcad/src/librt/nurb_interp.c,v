head	14.18;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.8
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.18
date	2007.12.16.18.53.50;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.19.02.05.24;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.27.01.41.41;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.38;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.55;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.09.16.02.04.25;	author lbutler;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.01.30.20.31.03;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.32.31;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.43;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.33;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.47;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.07;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.18
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                   N U R B _ I N T E R P . C
 * BRL-CAD
 *
 * Copyright (c) 1994-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup nurb */
/** @@{ */
/** @@file nurb_interp.c
 *
 * Interpolatopn routines for fitting NURB curves and
 * and surfaces to existing data.
 *
 *
 * Author:  Paul R. Stay
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
/** @@} */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.17 2007/05/19 02:05:24 brlcad Exp $ (ARL)";
#endif

#include "common.h"


#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "nurb.h"


void
rt_nurb_nodes(fastf_t *nodes, const struct knot_vector *knots, int order)
{
	int i, j;
	fastf_t sum;

	for( i = 0; i < knots->k_size -order; i++)
	{

		sum = 0.0;

		for( j = 1; j <= order -1; j++)
		{
			sum += knots->knots[i+j];
		}
		nodes[i] = sum/(order -1);
	}
}

void
rt_nurb_interp_mat(fastf_t *imat, struct knot_vector *knots, fastf_t *nodes, int order, int dim)
{
	int i,j;
	int ptr;

	ptr = 0;

	for( i = 0; i < dim; i++)
	for( j = 0; j < dim; j++)
	{
		imat[ptr] = rt_nurb_basis_eval( knots, j, order, nodes[i]);
		ptr++;
	}

	imat[ptr-1] = 1.0;
}


/*
 *			R T _ N U R B _ C I N T E R P
 *
 * main routine for interpolation of curves
 */
void
rt_nurb_cinterp(struct edge_g_cnurb *crv, int order, const fastf_t *data, int n)
{
	fastf_t * interp_mat;
	fastf_t * nodes;
	fastf_t	*local_data;

	/* Create Data memory and fill in curve structs */

	interp_mat = (fastf_t *) bu_malloc( n * n * sizeof(fastf_t),
		"rt_nurb_interp: interp_mat");

	nodes = (fastf_t *) bu_malloc( n * sizeof(fastf_t),"rt_nurb_interp:nodes");
	local_data = (fastf_t *)bu_malloc( n * 3 * sizeof(fastf_t), "rt_nurb_interp() local_data[]");

	crv->ctl_points = (fastf_t *) bu_malloc( n * 3 * sizeof(fastf_t),
		"solution");

	crv->order = order;
	crv->c_size = n;
	crv->pt_type = RT_NURB_MAKE_PT_TYPE( 3, RT_NURB_PT_XYZ, 0);

	/* First set up Curve data structs */
	/* For now we will assume that all paramerizations are uniform */

	rt_nurb_kvknot( &crv->k, order, 0.0, 1.0, (n - order), (struct resource *)NULL);

	/* Calculate Nodes at which the data points will be
	 * evaluated in the curve
	 */

	rt_nurb_nodes( nodes, &crv->k, order);

	/* use the node values to create the interpolation matrix
	 * which is a diagonal matrix
	 */

	rt_nurb_interp_mat( interp_mat, &crv->k, nodes, order, n);

	/* Solve the system of equations to get the control points
	 * Because rt_nurb_solve needs to modify the data as it works,
	 * and it wouldn't be polite to trash our caller's data,
	 * make a local copy.
	 * This creates the final ctl_points[] array.
	 */
	memcpy((char *)local_data, (char *)data, n * 3 * sizeof(fastf_t));
	rt_nurb_solve( interp_mat, local_data, crv->ctl_points, n, 3);

	/* Free up node and interp_mat storage */

	bu_free( (char *) interp_mat, "rt_nurb_cinterp: interp_mat");
	bu_free( (char *) nodes, "rt_nurb_cinterp: nodes");
	bu_free( (char *) local_data, "rt_nurb_cinterp() local_data[]");

	/* All done, The resulting crv now interpolates the data */
}

/*
 *			R T _ N U R B _ S I N T E R P
 *
 *  Interpolate the 2-D grid of data values and fit a B-spline surface to it.
 *
 *  This is done in two steps:
 *	1)  Fit a curve to the data in each row.
 *	2)  Fit a curve to the control points from step 1 in each column.
 *  The result is a mesh of control points which defines the surface.
 *
 *  Input data is assumed to be a 3-tuple of (X,Y,Z) where Z is the
 *  independent variable being interpolated to make the surface.
 */
void
rt_nurb_sinterp(struct face_g_snurb *srf, int order, const fastf_t *data, int ymax, int xmax)


				/* data[x,y] */
				/* nrow = max Y */
				/* ncol = max X */
{
	int	x;
	int	y;
	struct edge_g_cnurb	*crv;	/* array of cnurbs */
	fastf_t		*tmp;
	fastf_t		*cpt;	/* surface control point pointer */

	/* Build the resultant surface structure */
	srf->order[0] = srf->order[1] = order;
	srf->dir = 0;
	srf->s_size[0] = xmax;
	srf->s_size[1] = ymax;
	srf->l.magic = RT_SNURB_MAGIC;
	srf->pt_type = RT_NURB_MAKE_PT_TYPE(3,RT_NURB_PT_XYZ,RT_NURB_PT_NONRAT);

	/* the U knot vector replates to the points in a row
	 * therefore you want to determin how many cols there are
	 * similar for the V knot vector
	 */

	rt_nurb_kvknot(&srf->u, order, 0.0, 1.0, ymax - order, (struct resource *)NULL);
	rt_nurb_kvknot(&srf->v, order, 0.0, 1.0, xmax - order, (struct resource *)NULL);

	srf->ctl_points = (fastf_t *) bu_malloc(
		sizeof(fastf_t) * xmax * ymax * 3,
		"rt_nurb_sinterp() surface ctl_points[]");
	cpt = &srf->ctl_points[0];

/* _col is X, _row is Y */
#define NVAL(_col,_row)	data[((_row)*xmax+(_col))*3]

	crv = (struct edge_g_cnurb *)bu_calloc( sizeof(struct edge_g_cnurb), ymax,
		"rt_nurb_sinterp() crv[]");

	/* Interpolate the data across the rows, fitting a curve to each. */
	for( y = 0; y < ymax; y++)  {
		crv[y].l.magic = RT_CNURB_MAGIC;
		/* Build curve from from (0,y) to (xmax-1, y) */
		rt_nurb_cinterp( &crv[y], order, &NVAL(0,y), xmax );
	}
#undef NVAL

	tmp = (fastf_t *)bu_malloc( sizeof(fastf_t)*3 * ymax,
		"rt_nurb_sinterp() tmp[]");
	for( x = 0; x < xmax; x++)  {
		struct edge_g_cnurb	ncrv;

		/* copy the curve ctl points into col major format */
		for( y = 0; y < ymax; y++)  {
			VMOVE( &tmp[y*3], &crv[y].ctl_points[x*3] );
		}

		/* Interpolate the curve interpolates, giving rows of a surface */
		ncrv.l.magic = RT_CNURB_MAGIC;
		rt_nurb_cinterp( &ncrv, order, tmp, ymax);

		/* Move new curve interpolations into snurb ctl_points[] */
		for( y = 0; y < ymax*3; y++)  {
			*cpt++ = ncrv.ctl_points[y];
		}
		rt_nurb_clean_cnurb( &ncrv );
	}
	for( y = 0; y < ymax; y++)  {
		rt_nurb_clean_cnurb( &crv[y] );
	}
	bu_free( (char *)crv, "crv[]");
	bu_free( (char *)tmp, "tmp[]");
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@welcome to 1990, replace calls to bcopy with memcpy.  interestingly enough, valgrind on amd64 linux is showing bcopy() reading more than len bytes (reading to aligned memory internally)
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.16 2007/01/27 01:41:41 brlcad Exp $ (ARL)";
d140 1
a140 1
	memcpy( (char *)local_data, (char *)data, n * 3 * sizeof(fastf_t) );
@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.15 2007/01/23 01:13:38 brlcad Exp $ (ARL)";
d140 1
a140 1
	bcopy( (char *)data, (char *)local_data, n * 3 * sizeof(fastf_t) );
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.14 2007/01/21 04:45:45 brlcad Exp $ (ARL)";
a42 1

d129 1
a129 1
    	 * which is a diagonal matrix
d169 3
a171 3
             	      		/* data[x,y] */
   		     		/* nrow = max Y */
   		     		/* ncol = max X */
@


14.14
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.13 2007/01/20 14:36:55 brlcad Exp $ (ARL)";
@


14.13
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d35 1
a35 1
/*@@}*/
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.12 2006/09/16 02:04:25 lbutler Exp $ (ARL)";
@


14.12
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.11 2006/01/18 06:46:17 brlcad Exp $ (ARL)";
@


14.11
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup nurb */
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.10 2005/10/23 04:44:36 brlcad Exp $ (ARL)";
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1994-2005 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.9 2005/08/12 22:31:08 lbutler Exp $ (ARL)";
@


14.9
log
@Doxygen changes
@
text
@d27 1
a27 1
 *			
d30 1
a30 1
 *  
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.8 2005/01/30 20:31:03 brlcad Exp $ (ARL)";
d64 1
a64 1
		
d78 1
a78 1
	
d88 1
a88 1
	imat[ptr-1] = 1.0;	
d123 1
a123 1
	
d133 1
a133 1
	
d145 1
a145 1
	/* Free up node and interp_mat storage */	
d169 2
a170 2
                   	     
   		      
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 1
 *
d30 1
a30 1
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d64 1
a64 1

d78 1
a78 1

d88 1
a88 1
	imat[ptr-1] = 1.0;
d123 1
a123 1

d133 1
a133 1

d145 1
a145 1
	/* Free up node and interp_mat storage */
d169 2
a170 2


@


14.8
log
@update copyright to 2005
@
text
@d21 3
d25 1
a25 3
 *			N U R B  _  I N T E R P . C
 *
 * nurb_interp.c - Interpolatopn routines for fitting NURB curves and
d35 2
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_interp.c,v 14.7 2004/12/21 07:32:31 morrison Exp $ (ARL)";
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2004 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_interp.c,v 14.6 2004/12/21 06:58:43 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a32 2
 *  
 *
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_interp.c,v 14.5 2004/12/21 06:44:33 morrison Exp $ (ARL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a34 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1994-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_interp.c,v 14.4 2004/12/21 06:18:47 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a33 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_interp.c,v 14.3 2004/12/21 05:45:24 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_interp.c,v 14.2 2004/12/21 04:18:20 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_interp.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_interp.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (ARL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_interp.c,v 1.1 2004/05/20 15:20:07 morrison Exp $ (ARL)";
d228 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/nurb_interp.c,v 11.14 2004/05/10 15:30:46 erikg Exp $ (ARL)";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

