head	14.16;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.8
	rel-7-10-2:14.16
	rel-7-10-0:14.16
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.16
date	2007.01.27.01.41.42;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.39;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.55;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.09.16.02.04.25;	author lbutler;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches
	14.11.2.1;
next	14.10;

14.10
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.01.30.20.31.03;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.32.31;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.43;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.33;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.47;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.21;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.09;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.11.2.1
date	2006.03.13.22.28.56;	author jlowenz;	state Exp;
branches;
next	14.11.2.2;

14.11.2.2
date	2006.03.14.22.32.25;	author jlowenz;	state Exp;
branches;
next	14.11.2.3;

14.11.2.3
date	2006.03.20.22.33.06;	author jlowenz;	state Exp;
branches;
next	14.11.2.4;

14.11.2.4
date	2006.03.22.21.06.20;	author jlowenz;	state Exp;
branches;
next	14.11.2.5;

14.11.2.5
date	2006.04.07.18.35.59;	author jlowenz;	state Exp;
branches;
next	14.11.2.6;

14.11.2.6
date	2006.04.12.14.54.47;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@/*                     N U R B _ U T I L . C
 * BRL-CAD
 *
 * Copyright (c) 1994-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup nurb */
/** @@{ */
/** @@file nurb_util.c
 *
 * Utilities for NURB curves and surfaces.
 *
 *  Author -
 *	Paul Randal Stay
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
/** @@} */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.15 2007/01/23 01:13:39 brlcad Exp $ (ARL)";
#endif

#include "common.h"


#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"
#include "nurb.h"

/* Create a place holder for a nurb surface. */

struct face_g_snurb *
rt_nurb_new_snurb(int u_order, int v_order, int n_u, int n_v, int n_rows, int n_cols, int pt_type, struct resource *res)
{
	register struct face_g_snurb * srf;
	int pnum;

	GET_SNURB(srf);
	srf->order[0] = u_order;
	srf->order[1] = v_order;
	srf->dir = RT_NURB_SPLIT_ROW;

	srf->u.k_size = n_u;
	srf->v.k_size = n_v;
	srf->s_size[0] = n_rows;
	srf->s_size[1] = n_cols;
	srf->pt_type = pt_type;

	pnum = sizeof (fastf_t) * n_rows * n_cols * RT_NURB_EXTRACT_COORDS(pt_type);

	srf->u.knots = (fastf_t *) bu_malloc (
			n_u * sizeof (fastf_t ), "rt_nurb_new_snurb: u kv knot values");
	srf->v.knots = (fastf_t *) bu_malloc (
			n_v * sizeof (fastf_t ), "rt_nurb_new_snurb: v kv knot values");
	srf->ctl_points = ( fastf_t *) bu_malloc(
			pnum, "rt_nurb_new_snurb: control mesh points");

	return srf;
}

/* Create a place holder for a new nurb curve. */
struct edge_g_cnurb *
rt_nurb_new_cnurb(int order, int n_knots, int n_pts, int pt_type)
{
	register struct edge_g_cnurb * crv;

	GET_CNURB(crv);
	crv->order = order;

	crv->k.k_size = n_knots;
	crv->k.knots = (fastf_t *)
		bu_malloc(n_knots * sizeof(fastf_t),
			"rt_nurb_new_cnurb: knot values");

	crv->c_size = n_pts;
	crv->pt_type = pt_type;

	crv->ctl_points = (fastf_t *)
		bu_malloc( sizeof(fastf_t) * RT_NURB_EXTRACT_COORDS(pt_type) *
			n_pts,
			"rt_nurb_new_cnurb: mesh point values");

	return crv;
}

/*
 *			R T _ N U R B _ C L E A N _ S N U R B
 *
 *  Clean up the storage use of an snurb, but don't release the pointer.
 *  Often used by routines that allocate an array of nurb pointers,
 *  or use automatic variables to hold one.
 */
void
rt_nurb_clean_snurb(struct face_g_snurb *srf, struct resource *res)
{
	NMG_CK_SNURB(srf);

	bu_free( (char *)srf->u.knots, "rt_nurb_clean_snurb() u.knots" );
	bu_free( (char *)srf->v.knots, "rt_nurb_free_snurb() v.knots" );
	bu_free( (char *)srf->ctl_points, "rt_nurb_free_snurb() ctl_points");

	/* Invalidate the structure */
	srf->u.knots = (fastf_t *)NULL;
	srf->v.knots = (fastf_t *)NULL;
	srf->ctl_points = (fastf_t *)NULL;
	srf->order[0] = srf->order[1] = -1;
	srf->l.magic = 0;
}

/*
 *			R T _ N U R B _ F R E E _ S N U R B
 */
void
rt_nurb_free_snurb(struct face_g_snurb *srf, struct resource *res)
{
	NMG_CK_SNURB(srf);

	/* assume that links to other surface and curves are already deleted */

	bu_free( (char *)srf->u.knots, "rt_nurb_free_snurb: u kv knots" );
	bu_free( (char *)srf->v.knots, "rt_nurb_free_snurb: v kv knots" );
	bu_free( (char *)srf->ctl_points, "rt_nurb_free_snurb: mesh points");

	srf->l.magic = 0;
	bu_free( (char *)srf, "rt_nurb_free_snurb: snurb struct" );
}


/*
 *			R T _ N U R B _ C L E A N _ C N U R B
 *
 *  Clean up the storage use of a cnurb, but don't release the pointer.
 *  Often used by routines that allocate an array of nurb pointers,
 *  or use automatic variables to hold one.
 */
void
rt_nurb_clean_cnurb(struct edge_g_cnurb *crv)
{
	NMG_CK_CNURB(crv);
	bu_free( (char*)crv->k.knots, "rt_nurb_free_cnurb: knots");
	bu_free( (char*)crv->ctl_points, "rt_nurb_free_cnurb: control points");
	/* Invalidate the structure */
	crv->k.knots = (fastf_t *)NULL;
	crv->ctl_points = (fastf_t *)NULL;
	crv->c_size = 0;
	crv->order = -1;
	crv->l.magic = 0;
}

/*
 *			R T _ N U R B _ F R E E _ C N U R B
 *
 *  Release a cnurb and all the storage that it references.
 */
void
rt_nurb_free_cnurb(struct edge_g_cnurb *crv)
{
	NMG_CK_CNURB(crv);
	bu_free( (char*)crv->k.knots, "rt_nurb_free_cnurb: knots");
	bu_free( (char*)crv->ctl_points, "rt_nurb_free_cnurb: control points");
	crv->l.magic = 0;		/* sanity */
	bu_free( (char*)crv, "rt_nurb_free_cnurb: cnurb struct");
}

void
rt_nurb_c_print(const struct edge_g_cnurb *crv)
{
	register fastf_t * ptr;
	int i,j;

	NMG_CK_CNURB(crv);
	bu_log("curve = {\n");
	bu_log("\tOrder = %d\n", crv->order);
	bu_log("\tKnot Vector = {\n\t\t");

	for( i = 0; i < crv->k.k_size; i++)
		bu_log("%10.8f ", crv->k.knots[i]);

	bu_log("\n\t}\n");
	bu_log("\t");
	rt_nurb_print_pt_type(crv->pt_type);
	bu_log("\tmesh = {\n");
	for( ptr = &crv->ctl_points[0], i= 0;
		i < crv->c_size; i++, ptr += RT_NURB_EXTRACT_COORDS(crv->pt_type))
	{
		bu_log("\t\t");
		for(j = 0; j < RT_NURB_EXTRACT_COORDS(crv->pt_type); j++)
			bu_log("%4.5f\t", ptr[j]);
		bu_log("\n");

	}
	bu_log("\t}\n}\n");


}

void
rt_nurb_s_print(char *c, const struct face_g_snurb *srf)
{

    bu_log("%s\n", c );

    bu_log("order %d %d\n", srf->order[0], srf->order[1] );

    bu_log( "u knot vector \n");

    rt_nurb_pr_kv( &srf->u );

    bu_log( "v knot vector \n");

    rt_nurb_pr_kv( &srf->v );

    rt_nurb_pr_mesh( srf );

}

void
rt_nurb_pr_kv(const struct knot_vector *kv)
{
    register fastf_t * ptr = kv->knots;
    int i;

    bu_log("[%d]\t", kv->k_size );


    for( i = 0; i < kv->k_size; i++)
    {
	bu_log("%2.5f  ", *ptr++);
    }
    bu_log("\n");
}

void
rt_nurb_pr_mesh(const struct face_g_snurb *m)
{
	int i,j,k;
	fastf_t * m_ptr = m->ctl_points;
	int evp = RT_NURB_EXTRACT_COORDS(m->pt_type);

	NMG_CK_SNURB(m);

	bu_log("\t[%d] [%d]\n", m->s_size[0], m->s_size[1] );

	for( i = 0; i < m->s_size[0]; i++)
	{
		for( j =0; j < m->s_size[1]; j++)
		{
			bu_log("\t");

			for(k = 0; k < evp; k++)
				bu_log("%f    ", m_ptr[k]);

			bu_log("\n");
			m_ptr += RT_NURB_EXTRACT_COORDS(m->pt_type);
		}
		bu_log("\n");
	}
}

void
rt_nurb_print_pt_type(int c)
{
	int rat;

	rat = RT_NURB_IS_PT_RATIONAL(c);

	if( RT_NURB_EXTRACT_PT_TYPE(c) == RT_NURB_PT_XY)
		bu_log("Point Type = RT_NURB_PT_XY");
	else
	if( RT_NURB_EXTRACT_PT_TYPE(c) == RT_NURB_PT_XYZ)
		bu_log("Point Type = RT_NURB_PT_XYX");
	else
	if( RT_NURB_EXTRACT_PT_TYPE(c) == RT_NURB_PT_UV)
		bu_log("Point Type = RT_NURB_PT_UV");

	if( rat )
		bu_log("W\n");
	else
		bu_log("\n");
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.14 2007/01/21 04:45:45 brlcad Exp $ (ARL)";
a41 1

@


14.14
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.13 2007/01/20 14:36:55 brlcad Exp $ (ARL)";
@


14.13
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d34 1
a34 1
/*@@}*/
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.12 2006/09/16 02:04:25 lbutler Exp $ (ARL)";
@


14.12
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2006 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.11 2006/01/18 06:46:17 brlcad Exp $ (ARL)";
@


14.11
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup nurb */
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.10 2005/10/23 04:44:36 brlcad Exp $ (ARL)";
@


14.11.2.1
log
@ws; initialize trimming curve list and count; added function to add trimming curves to a surface.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d56 24
a79 25
    register struct face_g_snurb * srf;
    int pnum;
    
    GET_SNURB(srf);
    srf->order[0] = u_order;
    srf->order[1] = v_order;
    srf->dir = RT_NURB_SPLIT_ROW;
    
    srf->u.k_size = n_u;
    srf->v.k_size = n_v;
    srf->s_size[0] = n_rows;
    srf->s_size[1] = n_cols;
    srf->pt_type = pt_type;
    
    pnum = sizeof (fastf_t) * n_rows * n_cols * RT_NURB_EXTRACT_COORDS(pt_type);
    
    srf->u.knots = (fastf_t *) bu_malloc (n_u * sizeof (fastf_t ), "rt_nurb_new_snurb: u kv knot values");
    srf->v.knots = (fastf_t *) bu_malloc (n_v * sizeof (fastf_t ), "rt_nurb_new_snurb: v kv knot values");
    srf->ctl_points = ( fastf_t *) bu_malloc(pnum, "rt_nurb_new_snurb: control mesh points");
    
    /* initialize the trims list */
    BU_LIST_INIT(&srf->trims_hd);
    srf->trims_count = 0;
    
    return srf;
d86 17
a102 20
    register struct edge_g_cnurb * crv;
    
    GET_CNURB(crv);
    crv->order = order;
    
    crv->k.k_size = n_knots;
    crv->k.knots = (fastf_t *)
	bu_malloc(n_knots * sizeof(fastf_t),
		  "rt_nurb_new_cnurb: knot values");
    
    crv->c_size = n_pts;
    crv->pt_type = pt_type;
    
    crv->ctl_points = (fastf_t *)
	bu_malloc( sizeof(fastf_t) * RT_NURB_EXTRACT_COORDS(pt_type) *
		   n_pts,
		   "rt_nurb_new_cnurb: mesh point values");
    
    return crv;
}
d104 1
a104 9
/*
 * Add a trimming curve to a nurb surface
 *
 */
void
rt_nurb_add_trimming_curve(struct face_g_snurb* surf, struct edge_g_cnurb* edge)
{
    surf->trims_count += 1;
    BU_LIST_APPEND(&surf->trims_hd, &(edge->l));
@


14.11.2.2
log
@added some util functions to create a trim_contour as well as add curves to it, and add it to a nurb surface.
@
text
@d92 4
a95 8
    if (n_knots) {
	crv->k.k_size = n_knots;
	crv->k.knots = (fastf_t *)
	    bu_malloc(n_knots * sizeof(fastf_t),
		      "rt_nurb_new_cnurb: knot values");
    } else {
	crv->k.k_size = crv->k.knots = 0;
    }
a107 10
/* 
 * Create a place holder for a new line curve 
 */
struct edge_g_cnurb* 
rt_nurb_new_cnurb_line()
{
    int pt_type  = RT_NURB_MAKE_PT_TYPE(2,RT_NURB_PT_UV,RT_NURB_PT_NONRAT);
    return rt_nurb_new_cnurb(0, 0, 2, pt_type);
}

d109 2
a110 13
 * Create a place holder for a new trim contour
 */
struct trim_contour*
rt_nurb_new_trim_contour()
{
    register struct trim_contour* contour;
    GET_TRIM_CONTOUR(contour);    
    BU_LIST_INIT(&contour->curve_hd);
    return contour;
}

/*
 * Add a trimming curve to a trim contour
d113 1
a113 11
rt_nurb_add_trimming_curve(struct trim_contour* trim, struct edge_g_cnurb* edge)
{
    trim->curve_count += 1;
    BU_LIST_APPEND(&trim->curve_hd, &(edge->l));
}

/*
 * Add a trim contour to a nurb surface
 */
void
rt_nurb_add_trim_contour(struct face_g_snurb* surf, struct trim_contour* trim)
d116 1
a116 1
    BU_LIST_APPEND(&surf->trims_hd, &(trim->l));
a118 1

@


14.11.2.3
log
@fixed function name to make more sense; fixed compiler warning
@
text
@d98 1
a98 2
	crv->k.k_size = 0;
	crv->k.knots = NULL;
a128 1

d138 1
a138 1
rt_nurb_add_trim_curve(struct trim_contour* trim, struct edge_g_cnurb* edge)
@


14.11.2.4
log
@Added function to free trim_contour structure, and the list of curves it contains.
@
text
@d129 1
a129 1
    struct trim_contour* contour;
a157 17
 *                    R T _ N U R B _ F R E E _ T R I M _ C O N T O U R
 */
void
rt_nurb_free_trim_contour(struct trim_contour* trim)
{
    RT_CK_TRIMCONTOUR(trim);
    
    struct edge_g_cnurb* curve;
    while (BU_LIST_WHILE(curve, edge_g_cnurb, &trim->curve_hd)) {
	BU_LIST_DEQUEUE( &(curve->l) );
	rt_nurb_free_cnurb(curve);
    }
    bu_free((char*)trim, "rt_nurb_free_trim_contour() trim");
}


/*
@


14.11.2.5
log
@fix broken BU_LIST manipulations; added functions to support new pool-based oslo_mat allocation, uses accessors: rt_nurb_new_oslo()/rt_nurb_free_oslo()
@
text
@d42 2
a43 1
#include <pthread.h>
d77 1
a77 1
    BU_LIST_INIT(&(srf->trims_hd.l));
d132 1
a132 1
    BU_LIST_INIT(&(contour->curve_hd.l));
d143 1
a143 1
    BU_LIST_APPEND(&(trim->curve_hd.l), &(edge->l));
d153 1
a153 56
    BU_LIST_APPEND(&(surf->trims_hd.l), &(trim->l));
}

static pthread_mutex_t omp_mutex = PTHREAD_MUTEX_INITIALIZER;
static struct oslo_mat_pool* g_pool = NULL;

void grow_oslo_mat_pool(struct oslo_mat_pool* pool)
{
    /* grow the pool */
    int i;
    struct oslo_mat* mat;
    struct oslo_mat* mats = bu_calloc(OSLO_MAT_POOL_GROWSIZE, sizeof(struct oslo_mat), "growing oslo_mat pool");
    pool->available = mat = &(mats[0]); /* the head */
    for (i = 1; i < OSLO_MAT_POOL_GROWSIZE; i++) {
	mat->next = &(mats[i]);
	mat = mat->next;
    }
    mat->next = NULL; /* end of the list */
    pool->available_size = OSLO_MAT_POOL_GROWSIZE;
    pool->size += OSLO_MAT_POOL_GROWSIZE;
}

struct oslo_mat_pool* get_oslo_mat_pool()
{
    pthread_mutex_lock(&omp_mutex);
    {
	if (!g_pool) {
	    BU_GETSTRUCT(g_pool, oslo_mat_pool);
	    g_pool->size = g_pool->available_size = 0;
	    g_pool->available = NULL;
	    grow_oslo_mat_pool(g_pool);
	}	
    }
    pthread_mutex_unlock(&omp_mutex);
    return g_pool;
}

struct oslo_mat* rt_nurb_new_oslo()
{
    int i;
    struct oslo_mat* mat;
    struct oslo_mat_pool* pool = get_oslo_mat_pool();
    
    pthread_mutex_lock(&omp_mutex);
    {
	if (pool->available_size <= 0) {
	    grow_oslo_mat_pool(pool);
	}       
	pool->available_size--;
	mat = pool->available;
	pool->available = mat->next;
	mat->next = NULL;
    }
    pthread_mutex_unlock(&omp_mutex);
    
    return mat;
a155 19
void rt_nurb_free_oslo(struct oslo_mat* mat)
{
    int count = 0;
    struct oslo_mat_pool* pool = get_oslo_mat_pool();
    struct oslo_mat* curr = mat;
    if (!curr) return;
    while (curr->next) {
	count++;
	curr = curr->next; /* get the last element */
    }
    pthread_mutex_lock(&omp_mutex);
    {
	/* attach this list back to available stack */
	curr->next = pool->available;
	pool->available = mat;
	pool->available_size += count;
    }
    pthread_mutex_unlock(&omp_mutex);
}
d166 1
a166 1
    while (BU_LIST_WHILE(curve, edge_g_cnurb, &(trim->curve_hd.l))) {
a195 2

	/* TODO: clean the list of trims */
a213 2

	/* TODO: free the list of trims */
@


14.11.2.6
log
@Removed shared pool, went to thread-specific pools. Better solution, but only temporary since bu_parallel doesn't support thread-locals.
@
text
@d50 1
a50 1
static void init_oslo_mat_pool();
a51 1
/* Create a place holder for a nurb surface. */
a57 4
    /* initialize the oslo_mat pool, since this is the first place
       nurbs come into being... */
    init_oslo_mat_pool();
    
a154 6

/*
 *
 * O S L O _ M A T _ P O O L   S T U F F 
 *
 */
d156 1
a156 8
static pthread_key_t omp_key = 0;

#define VERIFY_POOL(p) { \
  if (!p) { \
    p = create_oslo_mat_pool(); \
    pthread_setspecific(omp_key, p); \
  } \
}
d158 1
a158 1
static void grow_oslo_mat_pool(struct oslo_mat_pool* pool)
a171 1
    bu_log("grow_oslo_mat_pool: newsize = %d, thread_id = %d\n", pool->size, pthread_self());
d174 1
a174 1
static void init_oslo_mat_pool()
d178 6
a183 4
	if (omp_key == 0) {
	    int rc = pthread_key_create(&omp_key, NULL);
	    if (rc) bu_bomb("rt_nurb_new_oslo(): pthread key create failed");
	}
d186 1
a186 10
}

static struct oslo_mat_pool* create_oslo_mat_pool()
{
    struct oslo_mat_pool* pool;
    BU_GETSTRUCT(pool, oslo_mat_pool);
    pool->size = pool->available_size = 0;
    pool->available = NULL;
    grow_oslo_mat_pool(pool);
    return pool;
d192 14
a205 11
    struct oslo_mat* mat = NULL;
    struct oslo_mat_pool* pool = (struct oslo_mat_pool*)pthread_getspecific(omp_key);
    VERIFY_POOL(pool);

    if (pool->available_size <= 0) {
	grow_oslo_mat_pool(pool);
    }       
    pool->available_size--;
    mat = pool->available;
    pool->available = mat->next;
    mat->next = NULL;
d212 2
a213 1
    int count = 1;
a214 2
    struct oslo_mat_pool* pool = (struct oslo_mat_pool*)pthread_getspecific(omp_key);

d220 8
a227 5

    /* attach this list back to available stack */
    curr->next = pool->available;
    pool->available = mat;
    pool->available_size += count;
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1994-2005 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.9 2005/08/12 22:31:08 lbutler Exp $ (ARL)";
@


14.9
log
@Doxygen changes
@
text
@d29 1
a29 1
 *  
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.8 2005/01/30 20:31:03 brlcad Exp $ (ARL)";
d58 1
a58 1
	
d72 1
a72 1
	srf->u.knots = (fastf_t *) bu_malloc ( 
d74 1
a74 1
	srf->v.knots = (fastf_t *) bu_malloc ( 
d76 1
a76 1
	srf->ctl_points = ( fastf_t *) bu_malloc( 
d101 1
a101 1
			n_pts, 
d214 1
a214 1
	
d287 1
a287 1
	
d290 1
a290 1
	else 
d293 1
a293 1
	else 
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d58 1
a58 1

d72 1
a72 1
	srf->u.knots = (fastf_t *) bu_malloc (
d74 1
a74 1
	srf->v.knots = (fastf_t *) bu_malloc (
d76 1
a76 1
	srf->ctl_points = ( fastf_t *) bu_malloc(
d101 1
a101 1
			n_pts,
d214 1
a214 1

d287 1
a287 1

d290 1
a290 1
	else
d293 1
a293 1
	else
@


14.8
log
@update copyright to 2005
@
text
@d21 3
d25 1
a25 3
 *
 *  Function -
 *	Utilities for NURB curves and surfaces.
d34 2
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nurb_util.c,v 14.7 2004/12/21 07:32:31 morrison Exp $ (ARL)";
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1994-2004 United States Government as represented by
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_util.c,v 14.6 2004/12/21 06:58:43 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a31 2
 *  
 *
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_util.c,v 14.5 2004/12/21 06:44:33 morrison Exp $ (ARL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a33 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1994-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_util.c,v 14.4 2004/12/21 06:18:47 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_util.c,v 14.3 2004/12/21 05:45:24 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_util.c,v 14.2 2004/12/21 04:18:21 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_util.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			N U R B _ U T I L . C
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_util.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (ARL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nurb_util.c,v 1.1 2004/05/20 15:20:09 morrison Exp $ (ARL)";
d289 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/nurb_util.c,v 11.15 2004/05/10 15:30:46 erikg Exp $ (ARL)";
d27 1
a27 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

