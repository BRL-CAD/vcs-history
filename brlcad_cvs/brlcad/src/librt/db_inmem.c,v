head	14.11;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.6
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5;
locks; strict;
comment	@ * @;


14.11
date	2007.07.26.01.13.57;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.27.01.41.39;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.54;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.09.16.02.04.24;	author lbutler;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.24.04.11.11;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2006.01.23.18.03.27;	author bob1961;	state Exp;
branches;
next	14.3;

14.3
date	2006.01.20.00.41.16;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2006.01.16.18.21.36;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@/*                     D B _ I N M E M . C
 * BRL-CAD
 *
 * Copyright (c) 2006-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup dbio */
/** @@{ */
/** @@file db_inmem.c
 *
 * Routines in support of maintaining geometry in-memory-only.  The
 * general process for adding geometry to an inmem database is to
 * either:
 *
 *   1) call wdb_export_external() providing an external
 *   representation of the geometry object and a flag marking it as
 *   in-memory (preferred), or
 *
 *   2) call db_diradd() and mark the directory entry as in-memory via
 *   a call to db_inmem() providing an external representation.
 *
 * Functions -
 *      db_open_inmem	open a database marking it as in-memory-only
 *      db_create_inmem	create an in-memory-only database instance
 *	db_inmem	convert existing dir entry to in-memory-only
 *
 *  Authors -
 *      Christopher Sean Morrison
 *
 */

#include "common.h"

#include "machine.h"
#include "vmath.h"
#include "db.h"
#include "raytrace.h"


#define DEFAULT_DB_TITLE "Untitled BRL-CAD Database"

/**
 * d b _ o p e n _ i n m e m
 *
 * "open" an in-memory-only database instance.  this initializes a
 * dbip for use, creating an inmem dbi_wdbp as the means to add
 * geometry to the directory (use wdb_export_external()).
 */
struct db_i *
db_open_inmem(void)
{
    register struct db_i *dbip = DBI_NULL;
    register int i;

    BU_GETSTRUCT( dbip, db_i );
    dbip->dbi_eof = -1L;
    dbip->dbi_fd = -1;
    dbip->dbi_fp = NULL;
    dbip->dbi_mf = NULL;
    dbip->dbi_read_only = 1;

    /* Initialize fields */
    for( i=0; i<RT_DBNHASH; i++ ) {
	dbip->dbi_Head[i] = DIR_NULL;
    }

    dbip->dbi_local2base = 1.0;		/* mm */
    dbip->dbi_base2local = 1.0;
    dbip->dbi_title = bu_strdup(DEFAULT_DB_TITLE);
    dbip->dbi_uses = 1;
    dbip->dbi_filename = NULL;
    dbip->dbi_filepath = NULL;
    dbip->dbi_version = 5;

    /* XXX might want/need to stash an ident record so it's valid.
     * see db_fwrite_ident();
     */

    bu_ptbl_init( &dbip->dbi_clients, 128, "dbi_clients[]" );
    dbip->dbi_magic = DBI_MAGIC;		/* Now it's valid */

    /* mark the wdb structure as in-memory. */
    dbip->dbi_wdbp = wdb_dbopen(dbip, RT_WDB_TYPE_DB_INMEM);

    return dbip;
}


/**
 * d b _ c r e a t e _ i n m e m
 *
 * creates an in-memory-only database.  this is very similar to
 * db_open_inmem() with the exception that the this routine adds a
 * default _GLOBAL object.
 */
struct db_i *
db_create_inmem(void) {
    struct db_i *dbip;
    struct bu_external obj;
    struct bu_attribute_value_set avs;
    struct bu_vls units;
    struct bu_external attr;
    int flags;

    dbip = db_open_inmem();

    RT_CK_DBI(dbip);
    RT_CK_WDB(dbip->dbi_wdbp);

#if 0
    /* create the header record? */
    db5_export_object3( &out, DB5HDR_HFLAGS_DLI_HEADER_OBJECT,
			NULL, 0, NULL, NULL,
			DB5_MAJORTYPE_RESERVED, 0,
			DB5_ZZZ_UNCOMPRESSED, DB5_ZZZ_UNCOMPRESSED );
#endif

    /* Second, create the attribute-only _GLOBAL object */
    bu_vls_init( &units );
    bu_vls_printf( &units, "%.25e", dbip->dbi_local2base );

    bu_avs_init( &avs, 4, "db_create_inmem" );
    bu_avs_add( &avs, "title", dbip->dbi_title );
    bu_avs_add( &avs, "units", bu_vls_addr(&units) );

    db5_export_attributes( &attr, &avs );
    db5_export_object3(&obj, DB5HDR_HFLAGS_DLI_APPLICATION_DATA_OBJECT,
		       DB5_GLOBAL_OBJECT_NAME, DB5HDR_HFLAGS_HIDDEN_OBJECT, &attr, NULL,
		       DB5_MAJORTYPE_ATTRIBUTE_ONLY, 0,
		       DB5_ZZZ_UNCOMPRESSED, DB5_ZZZ_UNCOMPRESSED );
    flags = DIR_HIDDEN | DIR_NON_GEOM | RT_DIR_INMEM;
    wdb_export_external(dbip->dbi_wdbp, &obj, DB5_GLOBAL_OBJECT_NAME, flags, 0);

    bu_free_external( &obj );
    bu_free_external( &attr );
    bu_avs_free( &avs );
    bu_vls_free( &units );

    return dbip;
}


/**
 *			D B _ I N M E M
 *
 *  Transmogrify an existing directory entry to be an in-memory-only
 *  one, stealing the external representation from 'ext'.
 */
void
db_inmem(struct directory *dp, struct bu_external *ext, int flags, struct db_i *dbip)
{
    BU_CK_EXTERNAL(ext);
    RT_CK_DIR(dp);

    if( dp->d_flags & RT_DIR_INMEM )
	bu_free( dp->d_un.ptr, "db_inmem() ext ptr" );
    dp->d_un.ptr = ext->ext_buf;
    if( dbip->dbi_version < 5 ) {
	dp->d_len = ext->ext_nbytes / 128;	/* DB_MINREC granule size */
    } else {
	dp->d_len = ext->ext_nbytes;
    }
    dp->d_flags = flags | RT_DIR_INMEM;

    /* Empty out the external structure, but leave it w/valid magic */
    ext->ext_buf = (genptr_t)NULL;
    ext->ext_nbytes = 0;
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a42 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d26 1
a26 1
 * either: 
d139 1
a139 1
    
@


14.8
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.7
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 2

/*@@{*/
d189 1
a189 1
/*@@}*/
@


14.6
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2006 United States Government as represented by
@


14.5
log
@don't need the db5_export_attributes extern decl as it's now in raytrace.h like it should have been
@
text
@d22 1
a22 1
/** \addtogroup db */
a51 1
/*@@}*/
d191 1
@


14.4
log
@Declare db5_export_attributes().
@
text
@a61 3
extern void
db5_export_attributes(struct bu_external *ext, const struct bu_attribute_value_set *avs);

@


14.3
log
@unused var
@
text
@d62 3
@


14.2
log
@update copyright to 2006
@
text
@a125 1
    int result;
@


14.1
log
@begin consolidating the in-memory-only database geometry support into one plcae.  move db_inmem() to its own db_inmem.c file, adding two new routines for opening/creating in-memory databases via db_open_inmem() and db_create_inmem().  difference between the two being that create adds a _GLOBAL while open does not.
@
text
@d4 1
a4 1
 * Copyright (C) 2006 United States Government as represented by
@

