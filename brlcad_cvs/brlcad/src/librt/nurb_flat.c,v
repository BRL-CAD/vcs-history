head	14.14;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.6
	rel-7-10-2:14.14
	rel-7-10-0:14.14
	rel-7-8-4:14.10
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.14
date	2007.01.27.01.41.41;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.38;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.55;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.09.16.02.04.25;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.31.03;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.21;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.47;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.07;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@/*                     N U R B _ F L A T . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup nurb */
/** @@{ */
/** @@file nurb_flat.c
 *
 *  Tests the NURB surface to see if its flat depending
 *  on the epsilon passed.
 *
 * Author -
 *     Paul R. Stay
 *
 * Source -
 *     SECAD/VLD Computing Consortium, Bldg 394
 *     The U.S. Army Ballistic Research Laboratory
 *     Aberdeen Proving Ground, Maryland 21005
 *
 */
/** @@} */

#include "common.h"


#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "nurb.h"

int
rt_nurb_s_flat(struct face_g_snurb *srf, fastf_t epsilon)

				/* Epsilon value for flatness testing */
{
	register fastf_t 	max_row_dist;
	register fastf_t 	max_col_dist;
	register fastf_t 	max_dist;
	int	dir;
	fastf_t        * mesh_ptr = srf->ctl_points;
	int	coords = RT_NURB_EXTRACT_COORDS(srf->pt_type);
	int	j, i, k;
	int	mesh_elt;
	vect_t          p1, p2, p3, p4, v1, v2, v3;
	vect_t          nrm;
	fastf_t         nrmln;
	fastf_t         dist;
	fastf_t        * crv;
	fastf_t 	spl_crv_flat();
	int	otherdir;

	dir = srf->dir;

	otherdir = (dir == RT_NURB_SPLIT_ROW) ? RT_NURB_SPLIT_COL : RT_NURB_SPLIT_ROW;

	max_row_dist = max_col_dist = -INFINITY;

	crv = (fastf_t * ) bu_malloc( sizeof(fastf_t) *
	    RT_NURB_EXTRACT_COORDS(srf->pt_type) * srf->s_size[1],
	    "rt_nurb_s_flat: crv");

	/* Test Row and RT_NURB_SPLIT_COL curves for flatness,
	 * If a curve is not flat than get distance to line */

	/* Test Row Curves */

	for (i = 0; i < (srf->s_size[0]); i++) {
		fastf_t rdist;
		for (j = 0;
		    j < (srf->s_size[1] *
			RT_NURB_EXTRACT_COORDS(srf->pt_type));
		    j++)
			crv[j] = *mesh_ptr++;

		rdist = rt_nurb_crv_flat(crv, srf->s_size[1],
		    srf->pt_type);
		max_row_dist = MAX(max_row_dist, rdist);
	}

	bu_free( (char *)crv, "rt_nurb_s_flat: crv" );

	crv = (fastf_t * ) bu_malloc(sizeof(fastf_t) *
	    RT_NURB_EXTRACT_COORDS(srf->pt_type) *
	    srf->s_size[0], 	"rt_nurb_s_flat: crv");

	for (i = 0; i < (coords * srf->s_size[1]); i += coords) {
		fastf_t rdist;

		for (j = 0; j < (srf->s_size[0]); j++) {
			mesh_elt =
			    (j * (srf->s_size[1] * coords)) + i;

			for (k = 0; k < coords; k++)
				crv[j * coords + k] =
				    srf->ctl_points[mesh_elt + k];
		}

		rdist = rt_nurb_crv_flat(crv,
		    srf->s_size[0], srf->pt_type);

		max_col_dist = MAX( max_col_dist, rdist);
	}

	bu_free((char *)crv, "rt_nurb_s_flat: crv");

	max_dist = MAX( max_row_dist, max_col_dist);

	if ( max_dist > epsilon) {
		if ( max_row_dist > max_col_dist )
			return RT_NURB_SPLIT_ROW;
		else
			return RT_NURB_SPLIT_COL;
	}

	/* Test the corners to see if they lie in a plane. */

	/*
	 * Extract the four corners and put a plane through three of them and
	 * see how far the fourth is to the plane.
	 */

	mesh_ptr = srf->ctl_points;

	if ( !RT_NURB_IS_PT_RATIONAL(srf->pt_type) ) {

		VMOVE(p1, mesh_ptr);
		VMOVE(p2,
		    (mesh_ptr + (srf->s_size[1] - 1) * coords));
		VMOVE(p3,
		    (mesh_ptr +
		    ((srf->s_size[1] *
		    (srf->s_size[0] - 1)) +
		    (srf->s_size[1] - 1)) * coords));

		VMOVE(p4,
		    (mesh_ptr +
		    (srf->s_size[1] *
		    (srf->s_size[0] - 1)) * coords));
	} else
	 {
		hvect_t h1, h2, h3, h4;
		int	offset;

		HMOVE(h1, mesh_ptr);
		HDIVIDE( p1, h1 );

		offset = (srf->s_size[1] - 1) * coords;
		HMOVE(h2, mesh_ptr + offset);
		HDIVIDE( p2, h2 );

		offset =
		    ((srf->s_size[1] *
		    (srf->s_size[0] - 1)) +
		    (srf->s_size[1] - 1)) * coords;
		HMOVE(h3, mesh_ptr + offset);
		HDIVIDE( p3, h3 );

		offset =
		    (srf->s_size[1] *
		    (srf->s_size[0] - 1)) * coords;
		HMOVE(h4, mesh_ptr + offset);
		HDIVIDE( p4, h4 );
	}

	VSUB2(v1, p2, p1);
	VSUB2(v2, p3, p1);

	VCROSS(nrm, v1, v2);

	nrmln = MAGNITUDE(nrm);
	if( nrmln < 0.0001 )			/* XXX Why this constant? */
		return RT_NURB_SPLIT_FLAT;

	VSUB2(v3, p4, p1);

	dist = fabs(VDOT( v3, nrm)) / nrmln;

	if (dist > epsilon)
		return otherdir;

	return RT_NURB_SPLIT_FLAT;		/* Must be flat */

}


fastf_t
rt_nurb_crv_flat(fastf_t *crv, int size, int pt_type)
{
	point_t         p1, p2;
	vect_t          ln;
	int	i;
	fastf_t         dist;
	fastf_t 	max_dist;
	fastf_t         length;
	fastf_t        * c_ptr;
	vect_t          testv, xp;
	hvect_t         h1, h2;
	int	coords;
	int	rational;

	coords = RT_NURB_EXTRACT_COORDS( pt_type);
	rational = RT_NURB_IS_PT_RATIONAL( pt_type);
	max_dist = -INFINITY;

	if ( !rational) {
		VMOVE(p1, crv);
	} else	 {
		HMOVE( h1, crv);
		HDIVIDE( p1, h1);
	}

	length = 0.0;

	/*
	 * loop through all of the points until a line is found which may not
	 * be the end pts of the curve if the endpoints are the same.
	 */
	for (i = size - 1; (i > 0) && length < SQRT_SMALL_FASTF; i--) {
		if ( !rational) {
			VMOVE(p2, (crv + (i * coords)));
		} else {
			HMOVE( h2, (crv + ( i * coords)));
			HDIVIDE( p2, h2 );
		}

		VSUB2(ln, p1, p2);
		length = MAGNITUDE(ln);
	}


	if( length >= SQRT_SMALL_FASTF )  {
		VSCALE(ln, ln, 1.0 / length);
		c_ptr = crv + coords;

		for (i = 1; i < size; i++) {
			if ( !rational ) {
				VSUB2(testv, p1, c_ptr);
			} else		    {
				HDIVIDE(h2, c_ptr);
				VSUB2( testv, p1, h2);
			}

			VCROSS(xp, testv, ln);
			dist = MAGNITUDE(xp);
			max_dist = MAX( max_dist, dist);
			c_ptr += coords;
		}
	}
	return max_dist;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a40 1

d51 1
a51 1
                		/* Epsilon value for flatness testing */
d159 1
a159 1
	 	int	offset;
d164 1
a164 1
	 	offset = (srf->s_size[1] - 1) * coords;
d168 1
a168 1
	 	offset =
d175 1
a175 1
	 	offset =
@


14.12
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.11
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d37 1
a37 1
/*@@}*/
@


14.10
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
@


14.9
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup nurb */
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
@


14.7
log
@Doxygen changes
@
text
@d27 1
a27 1
 * 
d52 1
a52 1
                         
d77 2
a78 2
	crv = (fastf_t * ) bu_malloc( sizeof(fastf_t) * 
	    RT_NURB_EXTRACT_COORDS(srf->pt_type) * srf->s_size[1], 
d81 1
a81 1
	/* Test Row and RT_NURB_SPLIT_COL curves for flatness, 
d88 3
a90 3
		for (j = 0; 
		    j < (srf->s_size[1] * 
			RT_NURB_EXTRACT_COORDS(srf->pt_type)); 
d94 1
a94 1
		rdist = rt_nurb_crv_flat(crv, srf->s_size[1], 
d101 2
a102 2
	crv = (fastf_t * ) bu_malloc(sizeof(fastf_t) * 
	    RT_NURB_EXTRACT_COORDS(srf->pt_type) *  
d109 1
a109 1
			mesh_elt = 
d113 1
a113 1
				crv[j * coords + k] = 
d117 1
a117 1
		rdist = rt_nurb_crv_flat(crv, 
d138 1
a138 1
	 * see how far the fourth is to the plane. 
d149 3
a151 3
		    (mesh_ptr + 
		    ((srf->s_size[1] * 
		    (srf->s_size[0] - 1)) + 
d155 2
a156 2
		    (mesh_ptr + 
		    (srf->s_size[1] * 
d170 3
a172 3
	 	offset = 
		    ((srf->s_size[1] * 
		    (srf->s_size[0] - 1)) + 
d177 2
a178 2
	 	offset = 
		    (srf->s_size[1] * 
d205 1
a205 1
fastf_t 
d235 1
a235 1
	 * be the end pts of the curve if the endpoints are the same. 
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 1
 *
d52 1
a52 1

d77 2
a78 2
	crv = (fastf_t * ) bu_malloc( sizeof(fastf_t) *
	    RT_NURB_EXTRACT_COORDS(srf->pt_type) * srf->s_size[1],
d81 1
a81 1
	/* Test Row and RT_NURB_SPLIT_COL curves for flatness,
d88 3
a90 3
		for (j = 0;
		    j < (srf->s_size[1] *
			RT_NURB_EXTRACT_COORDS(srf->pt_type));
d94 1
a94 1
		rdist = rt_nurb_crv_flat(crv, srf->s_size[1],
d101 2
a102 2
	crv = (fastf_t * ) bu_malloc(sizeof(fastf_t) *
	    RT_NURB_EXTRACT_COORDS(srf->pt_type) *
d109 1
a109 1
			mesh_elt =
d113 1
a113 1
				crv[j * coords + k] =
d117 1
a117 1
		rdist = rt_nurb_crv_flat(crv,
d138 1
a138 1
	 * see how far the fourth is to the plane.
d149 3
a151 3
		    (mesh_ptr +
		    ((srf->s_size[1] *
		    (srf->s_size[0] - 1)) +
d155 2
a156 2
		    (mesh_ptr +
		    (srf->s_size[1] *
d170 3
a172 3
	 	offset =
		    ((srf->s_size[1] *
		    (srf->s_size[0] - 1)) +
d177 2
a178 2
	 	offset =
		    (srf->s_size[1] *
d205 1
a205 1
fastf_t
d235 1
a235 1
	 * be the end pts of the curve if the endpoints are the same.
@


14.6
log
@update copyright to 2005
@
text
@d21 3
d25 2
a26 9
 *
 */

/* 
 *       N U R B _ F L A T . C
 *
 * Function -
 *     Tests the NURB surface to see if its flat depending
 *     on the epsilon passed.
d37 1
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2004 United States Government as represented by
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a39 3
 * Copyright Notice -
 *     This software is Copyright (C) 1990-2004 by the United States Army.
 *     All rights reserved.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 24
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d252 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d21 1
a21 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

