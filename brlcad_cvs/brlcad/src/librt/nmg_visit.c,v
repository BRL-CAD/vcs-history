head	14.17;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.6
	rel-7-10-2:14.17
	rel-7-10-0:14.15
	rel-7-8-4:14.11
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.5
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.17
date	2007.07.26.01.13.57;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.05.18.04.13.50;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.27.01.41.41;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.38;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.44;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.55;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.09.16.02.04.25;	author lbutler;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.31.00.10.53;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.31.02;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.21;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.46;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.24;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.09.20.35.29;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.08.23.23.05;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.57.54;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.07;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@/*                     N M G _ V I S I T . C
 * BRL-CAD
 *
 * Copyright (c) 1993-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup nmg */
/** @@{ */
/** @@file nmg_visit.c
 *
 *  A generalized, object-oriented subroutine family to
 *  visit all the data structures "below" a given structure.
 *
 *  The caller provides a pointer to the structure to start at,
 *  a table of "handlers" for each kind of strucuture,
 *  and a generic pointer for private state which will be sent along
 *  to the user's handlers.
 *  For non-leaf structures, there are two handlers, one called
 *  before any recursion starts, and the other called when
 *  recursion is finished.  Either or both may be omitted.
 *
 *  Author -
 *	Michael John Muuss
 *
 */
/** @@} */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.16 2007/05/18 04:13:50 brlcad Exp $ (BRL)";
#endif

#include "common.h"


#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"


/**
 *			N M G _ V I S I T _ V E R T E X
 */
void
nmg_visit_vertex(struct vertex *v, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	NMG_CK_VERTEX(v);

	if(htab->vis_vertex) htab->vis_vertex( (long *)v, state, 0 );

	if(htab->vis_vertex_g && v->vg_p)
		htab->vis_vertex_g( (long *)v->vg_p, state, 0 );
}

/**
 *			N M G _ V I S I T _ V E R T E X U S E
 */
void
nmg_visit_vertexuse(struct vertexuse *vu, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	NMG_CK_VERTEXUSE(vu);

	if(htab->bef_vertexuse) htab->bef_vertexuse( (long *)vu, state, 0 );

	nmg_visit_vertex( vu->v_p, htab, state );

	if(htab->vis_vertexuse_a && vu->a.magic_p)
		htab->vis_vertexuse_a( vu->a.magic_p, state, 0 );

	if(htab->aft_vertexuse) htab->aft_vertexuse( (long *)vu, state, 1 );
}

/**
 *			N M G _ V I S I T _ E D G E
 */
void
nmg_visit_edge(struct edge *e, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	NMG_CK_EDGE( e );

	if(htab->vis_edge) htab->vis_edge( (long *)e, state, 0 );
}

/**
 *			N M G _ V I S I T _ E D G E U S E
 */
void
nmg_visit_edgeuse(struct edgeuse *eu, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	NMG_CK_EDGEUSE(eu);

	if(htab->bef_edgeuse) htab->bef_edgeuse( (long *)eu, state, 0 );

	nmg_visit_vertexuse( eu->vu_p, htab, state );
	nmg_visit_edge( eu->e_p, htab, state );

	if(htab->vis_edge_g && eu->g.magic_p)
		htab->vis_edge_g( eu->g.magic_p, state, 0 );

	if(htab->aft_edgeuse) htab->aft_edgeuse( (long *)eu, state, 1 );
}

/**
 *			N M G _ V I S I T _ L O O P
 */
void
nmg_visit_loop(struct loop *l, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	NMG_CK_LOOP(l);

	if(htab->vis_loop) htab->vis_loop( (long *)l, state, 0 );

	if(htab->vis_loop_g && l->lg_p)
		htab->vis_loop_g( (long *)l->lg_p, state, 0 );
}

/**
 *			N M G _ V I S I T _ L O O P U S E
 */
void
nmg_visit_loopuse(struct loopuse *lu, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	NMG_CK_LOOPUSE( lu );

	if(htab->bef_loopuse) htab->bef_loopuse( (long *)lu, state, 0 );

	if( BU_LIST_FIRST_MAGIC(&lu->down_hd) == NMG_VERTEXUSE_MAGIC )  {
		struct vertexuse	*vu;
		vu = BU_LIST_FIRST(vertexuse, &lu->down_hd);
		nmg_visit_vertexuse( vu, htab, state );
	} else {
		struct edgeuse		*eu;
		for( BU_LIST_FOR( eu, edgeuse, &lu->down_hd ) )  {
			nmg_visit_edgeuse( eu, htab, state );
		}
	}
	nmg_visit_loop( lu->l_p, htab, state );

	if(htab->aft_loopuse) htab->aft_loopuse( (long *)lu, state, 1 );
}

/**
 *			N M G _ V I S I T _ F A C E
 */
void
nmg_visit_face(struct face *f, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{

	if(htab->vis_face) htab->vis_face( (long *)f, state, 0 );

	if(htab->vis_face_g && f->g.plane_p)
		htab->vis_face_g( (long *)f->g.plane_p, state, 0 );
}

/**
 *			N M G _ V I S I T _ F A C E U S E
 */
void
nmg_visit_faceuse(struct faceuse *fu, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	struct loopuse	*lu;

	NMG_CK_FACEUSE(fu);

	if(htab->bef_faceuse) htab->bef_faceuse( (long *)fu, state, 0 );

	for( BU_LIST_FOR( lu, loopuse, &fu->lu_hd ) )  {
		nmg_visit_loopuse( lu, htab, state );
	}

	nmg_visit_face( fu->f_p, htab, state );

	if(htab->aft_faceuse) htab->aft_faceuse( (long *)fu, state, 1 );
}

/**
 *			N M G _ V I S I T _ S H E L L
 */
void
nmg_visit_shell(struct shell *s, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	struct faceuse	*fu;
	struct loopuse	*lu;
	struct edgeuse	*eu;

	NMG_CK_SHELL(s);

	if(htab->bef_shell) htab->bef_shell( (long *)s, state, 0 );

	for( BU_LIST_FOR( fu, faceuse, &s->fu_hd ) )  {
		nmg_visit_faceuse( fu, htab, state );
	}
	for( BU_LIST_FOR( lu, loopuse, &s->lu_hd ) )  {
		nmg_visit_loopuse( lu, htab, state );
	}
	for( BU_LIST_FOR( eu, edgeuse, &s->eu_hd ) )  {
		nmg_visit_edgeuse( eu, htab, state );
	}
	if( s->vu_p )  nmg_visit_vertexuse( s->vu_p, htab, state );
	if(htab->vis_shell_a && s->sa_p)
		htab->vis_shell_a( (long *)s->sa_p, state, 0 );

	if(htab->aft_shell) htab->aft_shell( (long *)s, state, 1 );
}

/**
 *			N M G _ V I S I T _ R E G I O N
 */
void
nmg_visit_region(struct nmgregion *r, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	struct shell		*s;

	NMG_CK_REGION(r);

	if(htab->bef_region) htab->bef_region( (long *)r, state, 0 );

	for( BU_LIST_FOR( s, shell, &r->s_hd ) )  {
		nmg_visit_shell( s, htab, state );
	}
	if(htab->vis_region_a && r->ra_p)
		htab->vis_region_a( (long *)r->ra_p, state, 0 );

	if(htab->aft_region) htab->aft_region( (long *)r, state, 1 );
}
/**
 *			N M G _ V I S I T _ M O D E L
 */
void
nmg_visit_model(struct model *model, const struct nmg_visit_handlers *htab, genptr_t state)


						/* Handler's private state */
{
	struct nmgregion *r;

	NMG_CK_MODEL(model);

	if(htab->bef_model) htab->bef_model( (long *)model, state, 0 );

	for( BU_LIST_FOR( r, nmgregion, &model->r_hd ) )  {
		nmg_visit_region( r, htab, state );
	}

	if(htab->aft_model) htab->aft_model( (long *)model, state, 1 );
}

/**
 *			N M G _ V I S I T
 */
void
nmg_visit(const long int *magicp, const struct nmg_visit_handlers *htab, genptr_t state)
						/* Handler's private state */
{
	switch( *magicp )  {
	default:
		bu_log("nmg_visit() Can't visit %s directly\n", bu_identify_magic( *magicp ));
		bu_bomb("nmg_visit()\n");
		/* NOTREACHED */
	case NMG_MODEL_MAGIC:
		nmg_visit_model( (struct model *)magicp, htab, state );
		break;
	case NMG_REGION_MAGIC:
		nmg_visit_region( (struct nmgregion *)magicp, htab, state );
		break;
	case NMG_SHELL_MAGIC:
		nmg_visit_shell( (struct shell *)magicp, htab, state );
		break;
	case NMG_FACEUSE_MAGIC:
		nmg_visit_faceuse( (struct faceuse *)magicp, htab, state );
		break;
	case NMG_LOOPUSE_MAGIC:
		nmg_visit_loopuse( (struct loopuse *)magicp, htab, state );
		break;
	case NMG_EDGEUSE_MAGIC:
		nmg_visit_edgeuse( (struct edgeuse *)magicp, htab, state );
		break;
	case NMG_VERTEXUSE_MAGIC:
		nmg_visit_vertexuse( (struct vertexuse *)magicp, htab, state );
		break;
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@a37 4
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.15 2007/01/27 01:41:41 brlcad Exp $ (BRL)";
@


14.15
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.14 2007/01/23 01:13:38 brlcad Exp $ (BRL)";
d307 1
a307 1
		rt_bomb("nmg_visit()\n");
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.13 2007/01/21 04:45:44 brlcad Exp $ (BRL)";
d67 1
a67 1
        			       		/* Handler's private state */
d84 1
a84 1
        			       		/* Handler's private state */
d105 1
a105 1
        			       		/* Handler's private state */
d119 1
a119 1
        			       		/* Handler's private state */
d141 1
a141 1
        			       		/* Handler's private state */
d158 1
a158 1
        			       		/* Handler's private state */
d186 1
a186 1
        			       		/* Handler's private state */
d202 1
a202 1
        			       		/* Handler's private state */
d226 1
a226 1
        			       		/* Handler's private state */
d259 1
a259 1
        			       		/* Handler's private state */
d282 1
a282 1
        			       		/* Handler's private state */
d302 1
a302 1
        			       		/* Handler's private state */
@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.12 2007/01/20 14:36:55 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@d22 1
a22 1
/*@@{*/
d24 1
d44 1
a44 1
/*@@}*/
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.11 2006/09/16 02:04:25 lbutler Exp $ (BRL)";
@


14.11
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2006 United States Government as represented by
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.10 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2006
@
text
@d21 1
a21 1
/** \addtogroup nmg */
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.9 2005/10/31 00:10:53 brlcad Exp $ (BRL)";
@


14.9
log
@consistent casting of the nmg_visit state pointers, don't need a double pointer (genptr_t IS a pointer already!)
@
text
@d4 1
a4 1
 * Copyright (C) 1993-2005 United States Government as represented by
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.8 2005/10/23 04:44:36 brlcad Exp $ (BRL)";
@


14.8
log
@trailing ws
@
text
@d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.7 2005/08/12 22:31:08 lbutler Exp $ (BRL)";
d64 1
a64 1
nmg_visit_vertex(struct vertex *v, const struct nmg_visit_handlers *htab, genptr_t *state)
d81 1
a81 1
nmg_visit_vertexuse(struct vertexuse *vu, const struct nmg_visit_handlers *htab, genptr_t *state)
d102 1
a102 1
nmg_visit_edge(struct edge *e, const struct nmg_visit_handlers *htab, genptr_t *state)
d116 1
a116 1
nmg_visit_edgeuse(struct edgeuse *eu, const struct nmg_visit_handlers *htab, genptr_t *state)
d138 1
a138 1
nmg_visit_loop(struct loop *l, const struct nmg_visit_handlers *htab, genptr_t *state)
d155 1
a155 1
nmg_visit_loopuse(struct loopuse *lu, const struct nmg_visit_handlers *htab, genptr_t *state)
d183 1
a183 1
nmg_visit_face(struct face *f, const struct nmg_visit_handlers *htab, genptr_t *state)
d199 1
a199 1
nmg_visit_faceuse(struct faceuse *fu, const struct nmg_visit_handlers *htab, genptr_t *state)
d223 1
a223 1
nmg_visit_shell(struct shell *s, const struct nmg_visit_handlers *htab, genptr_t *state)
d256 1
a256 1
nmg_visit_region(struct nmgregion *r, const struct nmg_visit_handlers *htab, genptr_t *state)
d279 1
a279 1
nmg_visit_model(struct model *model, const struct nmg_visit_handlers *htab, genptr_t *state)
d301 1
a301 1
nmg_visit(const long int *magicp, const struct nmg_visit_handlers *htab, genptr_t *state)
@


14.7
log
@Doxygen changes
@
text
@d37 1
a37 1
 *  
d41 1
a41 1
 *  
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.6 2005/01/30 20:31:02 brlcad Exp $ (BRL)";
d65 2
a66 2
             			   
                               	      
d82 2
a83 2
                		    
                               	      
d103 2
a104 2
           			   
                               	      
d117 2
a118 2
              			    
                               	      
d139 2
a140 2
           			   
                               	      
d156 2
a157 2
              			    
                               	      
d184 2
a185 2
           			   
                               	      
d200 2
a201 2
              			    
                               	      
d224 2
a225 2
            			   
                               	      
d257 2
a258 2
                		   
                               	      
d280 2
a281 2
            			       
                               	      
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d37 1
a37 1
 *
d41 1
a41 1
 *
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d64 3
a66 3
nmg_visit_vertex(struct vertex *v, const struct nmg_visit_handlers *htab, genptr_t state)


d81 3
a83 3
nmg_visit_vertexuse(struct vertexuse *vu, const struct nmg_visit_handlers *htab, genptr_t state)


d102 3
a104 3
nmg_visit_edge(struct edge *e, const struct nmg_visit_handlers *htab, genptr_t state)


d116 3
a118 3
nmg_visit_edgeuse(struct edgeuse *eu, const struct nmg_visit_handlers *htab, genptr_t state)


d138 3
a140 3
nmg_visit_loop(struct loop *l, const struct nmg_visit_handlers *htab, genptr_t state)


d155 3
a157 3
nmg_visit_loopuse(struct loopuse *lu, const struct nmg_visit_handlers *htab, genptr_t state)


d183 3
a185 3
nmg_visit_face(struct face *f, const struct nmg_visit_handlers *htab, genptr_t state)


d199 3
a201 3
nmg_visit_faceuse(struct faceuse *fu, const struct nmg_visit_handlers *htab, genptr_t state)


d223 3
a225 3
nmg_visit_shell(struct shell *s, const struct nmg_visit_handlers *htab, genptr_t state)


d256 3
a258 3
nmg_visit_region(struct nmgregion *r, const struct nmg_visit_handlers *htab, genptr_t state)


d279 3
a281 3
nmg_visit_model(struct model *model, const struct nmg_visit_handlers *htab, genptr_t state)


d301 1
a301 1
nmg_visit(const long int *magicp, const struct nmg_visit_handlers *htab, genptr_t state)
@


14.6
log
@update copyright to 2005
@
text
@d21 2
a23 1
 *
d43 2
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/nmg_visit.c,v 14.5 2004/12/21 06:38:21 morrison Exp $ (BRL)";
d60 1
a60 1
/*
d77 1
a77 1
/*
d98 1
a98 1
/*
d112 1
a112 1
/*
d134 1
a134 1
/*
d151 1
a151 1
/*
d179 1
a179 1
/*
d195 1
a195 1
/*
d219 1
a219 1
/*
d252 1
a252 1
/*
d275 1
a275 1
/*
d297 1
a297 1
/*
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1993-2004 United States Government as represented by
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_visit.c,v 14.4 2004/12/21 06:18:46 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a40 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1993-2004 by the United States Army.
 *	All rights reserved.
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_visit.c,v 14.3 2004/12/21 05:45:24 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_visit.c,v 14.2 2004/12/21 04:18:20 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_visit.c,v 14.1 2004/11/16 19:42:16 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			N M G _ V I S I T . C
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_visit.c,v 1.5 2004/11/09 20:35:29 morrison Exp $ (BRL)";
@


1.5
log
@ws
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/librt/nmg_visit.c,v 1.4 2004/11/08 23:23:05 morrison Exp $ (BRL)";
d313 10
@


1.4
log
@optimize away all of the nmg_visit_handlers_null struct copies since they are constant per function.  profile showed some of them taking noticeable amounts of time.
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/src/librt/nmg_visit.c,v 1.3 2004/08/02 23:01:49 morrison Exp $ (BRL)";
a282 2
          			        
                               	      
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/nmg_visit.c,v 1.2 2004/06/08 19:57:54 morrison Exp $ (BRL)";
a39 1
const struct nmg_visit_handlers	nmg_visit_handlers_null;
@


1.2
log
@bye bye externs.h
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d30 1
a30 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/nmg_visit.c,v 11.11 2004/05/10 15:30:46 erikg Exp $ (BRL)";
a36 1
#include "externs.h"
@

