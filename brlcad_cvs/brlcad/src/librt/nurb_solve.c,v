head	14.8;
access;
symbols
	rel-7-10-4:14.8
	STABLE:14.8.0.2
	stable-branch:14.1
	rel-7-10-2:14.8
	rel-7-10-0:14.8
	rel-7-8-4:14.4
	rel-7-8-2:14.3
	rel-7-8-0:14.3
	trimnurbs-branch:14.3.0.2
	help:14.3
	temp_tag:14.3
	bobWinPort-20051223-freeze:14.2
	postmerge-20051223-bobWinPort:14.3
	premerge-20051223-bobWinPort:14.3
	rel-7-6-6:14.3
	rel-7-6-4:14.3
	rel-7-6-2:14.2
	rel-7-6-branch:14.2.0.4
	rel-7-6-0:14.2
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.2
	bobWinPort:14.2.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.8
date	2007.01.27.01.41.41;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.23.01.13.38;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.21.07.03.19;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2007.01.21.04.45.45;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2006.09.16.02.04.25;	author lbutler;	state Exp;
branches;
next	14.3;

14.3
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2005.08.12.22.31.08;	author lbutler;	state Exp;
branches
	14.2.4.1;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.08;	author morrison;	state Exp;
branches;
next	;

14.2.4.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.8
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@/*                    N U R B _ S O L V E . C
 * BRL-CAD
 *
 * Copyright (c) 1983-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup nurb */
/** @@{ */
/** @@file nurb_solve.c
 *
 * Decompose a matrix into its LU decomposition using pivoting.
 *
 * Author:	Paul R. Stay
 * 		Computer Science Dept.
 * 		University of Utah
 * Date:	Wed Mar 23 1983
 */
/** @@} */

#include "common.h"

#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "nurb.h"


/* These Procedures take a set of matrices of the form Ax = b and
 * alows one to solve the system by various means. The rt_nurb_doolittle
 * routine takes the system and creates a lu decomposition using
 * pivoting  to get the system in a desired form. Forward and backward
 * substitution are then used to solve the system.  All work is done
 * in place.
 */

/* Solve must be passed two matrices that are of the form of pointer
 * to double arrays. mat_1 is the n by n matrix that is to be
 * decomposed and mat_2 is the matrix that contains the left side of
 * the equation.  The variable solution which is double is also to be
 * created by the user and consisting of n elements of which the
 * solution set is passed back.
 *
 *  Arguments mat_1 and mat_2 are modified by this call.
 *  The solution is written into the solution[] array.
 */
void
rt_nurb_solve(fastf_t *mat_1, fastf_t *mat_2, fastf_t *solution, int dim, int coords)
			/* A and b array of the system Ax= b*/


			/* dimension of the matrix */
			/* Number of coordsinates for mat_2 and solution */
{
	register int i, k;
	fastf_t *y;
	fastf_t * b;
	fastf_t * s;

	y = (fastf_t *) bu_malloc(sizeof (fastf_t) * dim,
	    "rt_nurb_solve: y");/* Create temp array */

	b = (fastf_t *) bu_malloc(sizeof (fastf_t) * dim,
	    "rt_nurb_solve: b");/* Create temp array */

	s = (fastf_t *) bu_malloc(sizeof (fastf_t) * dim,
	    "rt_nurb_solve: s");/* Create temp array */

	rt_nurb_doolittle (mat_1,mat_2, dim, coords);/* Create LU decomosition */

	for( k =0; k < coords; k++)
	{
		fastf_t * ptr;

		ptr = mat_2 + k;

		for( i = 0; i < dim; i++)
		{
			b[i] = *ptr;
			ptr += coords;
		}

		/* Solve the system Ly =b */
		rt_nurb_forw_solve (mat_1, b, y, dim);

		/* Solve the system Ux = y */
		rt_nurb_back_solve (mat_1, y, s, dim);


		ptr = solution + k;
		for( i=0; i < dim; i++)
		{
			*ptr = s[i];
			ptr += coords;
		}
	}

	bu_free ((char *)y,"rt_nurb_solve: y");			/* Free up storage */
	bu_free ((char *)b,"rt_nurb_solve: b");			/* Free up storage */
	bu_free ((char *)s,"rt_nurb_solve: s");			/* Free up storage */
}

/*
 *  Create LU decomosition.
 *  Modifies both mat_1 and mat_2 values.
 */
void
rt_nurb_doolittle(fastf_t *mat_1, fastf_t *mat_2, int row, int coords)
{
	register int i;
	register int j;
	register int k;
	register int x;
	int m;
	register fastf_t *d;		/* Scaling factors */
	register fastf_t *s;		/* vector for swapping if needed */
	register fastf_t *ds;		/* See if swapping is needed */
	fastf_t  maxd;
	fastf_t tmp;

	int     max_pivot;

	d = (fastf_t * ) bu_malloc( sizeof (fastf_t) * row,
	    "rt_nurb_doolittle:d");	/* scale factor */
	s = (fastf_t * ) bu_malloc( sizeof (fastf_t) * row * row,
	    "rt_nurb_doolittle:s");	/* vector to check */
	ds = (fastf_t *) bu_malloc( sizeof (fastf_t) * row,
	    "rt_nurb_doolittle:ds");	/* if rows need to be swaped */

	for ( i = 0; i < row; i++)		/* calculate the scaling factors */
	{
		maxd = 0.0;
		for( j = 0; j < row; j++)
		{
			if( maxd < fabs(mat_1[i * row + j]) )
				maxd = fabs(mat_1[i * row + j]);
		}
		d[i] = 1.0 / maxd;
	}

	for ( k = 0 ; k < row; k++)
	{
		for( i = k; i < row; i++)
		{
			tmp = 0.0;
			for( j = 0; j <= k -1; j ++)
				tmp += mat_1[i * row + j ] * mat_1[j * row + k];
			s[i * row + k] = mat_1[i * row + k] - tmp;
		}

		max_pivot = k;

		for (i = k; i < row; i ++)	/* check to see if rows need */
		{				/* to be swaped */
			ds[i] = d[i] * s[ i * row + k];
			if (ds[max_pivot] < ds[i])
				max_pivot = i;
		}

		if (max_pivot != k )		/* yes swap row k with row max_pivot */
		{
			for( m = 0; m < row; m++)
			{
				tmp = mat_1[k * row + m];
				mat_1[k * row + m] = mat_1[max_pivot * row + m];
				mat_1[max_pivot * row + m] = tmp;
			}

			for( x = 0; x < coords; x++)
			{
				tmp = mat_2[k*coords + x];		/* b matrix also */
				mat_2[k*coords+x] = mat_2[max_pivot*coords+x];
				mat_2[max_pivot*coords+x] = tmp;
			}

			tmp = s[k * row + k];	/* swap s vector  */
			s[k * row + k] = s[max_pivot * row + k];
			s[max_pivot * row + k] = tmp;
		}

		mat_1[ k * row +  k] = s[k * row + k];	/* mat_1[k][k] */

		for (i = k + 1; i < row; i++)	/* lower matrix */
			mat_1[i * row + k] = (float)(s[i* row + k] / s[k* row +k]);

		for (j = k + 1; j < row; j++) {	/* upper matrix */
			tmp = 0;
			for( i = 0; i <= k - 1; i++)
				tmp += mat_1[ k * row + i] * mat_1[ i* row + j];

			mat_1[ k * row + j] -= tmp;
		}

	}
	bu_free( (char *)d,"rt_nurb_doolittle:d");		/* Free up the storage. */
	bu_free( (char *)s,"rt_nurb_doolittle:s");
	bu_free( (char *)ds,"rt_nurb_doolittle:ds" );
}

void
rt_nurb_forw_solve(const fastf_t *lu, const fastf_t *b, fastf_t *y, int n)		/* spl_solve lower trianglular matrix */


{
	register int i,j;
	fastf_t tmp;

	for(i = 0; i < n; i++)
	{
		tmp = 0.0;
		for(j = 0; j <= i - 1; j++)
			tmp += lu[i*n + j] * y[j];
		y[i] = b[i] - tmp;
	}
}

void
rt_nurb_back_solve(const fastf_t *lu, const fastf_t *y, fastf_t *x, int n)		/* spl_solve upper triangular matrix */


{
	register int i,j;
	fastf_t tmp;

	for( i = n - 1; i >= 0; i-- )
	{
		tmp = 0.0;
		for( j = i + 1; j < n; j++)
			tmp += lu[i*n + j] * x[j];
		x[i] = ( y[i] - tmp) / lu[i * n + i];
	}

}

void
rt_nurb_p_mat(const fastf_t *mat, int dim)
{
	int i;

	for( i = 0; i < dim; i++)
		fprintf(stderr,"%f\n", mat[i]);
	fprintf(stderr,"\n");
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d64 1
a64 1
       	       		/* A and b array of the system Ax= b*/
d67 2
a68 2
   	    		/* dimension of the matrix */
   	       		/* Number of coordsinates for mat_2 and solution */
a218 2


a235 2


@


14.6
log
@implicit assignment
@
text
@d9 1
a9 1
 * as published by the Free Software Foundation.
@


14.5
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@a29 2
 * Copyright (c) 1983, University of Utah
 *
a34 2


d37 1
d43 1
@


14.4
log
@Doxygen updates
@
text
@d1 19
d21 1
a21 1
/*@@{*/
d23 1
d33 1
a33 1
/*@@}*/
@


14.3
log
@trailing ws
@
text
@d1 1
a1 1
/** \addtogroup nurb */
@


14.2
log
@Doxygen changes
@
text
@d3 1
a3 1
/** @@file nurb_solve.c 
d5 1
a5 1
 * 
d11 1
a11 1
 * 
d24 1
a24 1
#include "nurb.h"	
d47 2
a48 2
       	       
       	          
d85 1
a85 1
		
d199 4
a202 4
                  
                 
           
      
d218 4
a221 4
                  
                 
           
      
d240 1
a240 1
	
@


14.2.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d3 1
a3 1
/** @@file nurb_solve.c
d5 1
a5 1
 *
d11 1
a11 1
 *
d24 1
a24 1
#include "nurb.h"
d47 2
a48 2


d85 1
a85 1

d199 4
a202 4




d218 4
a221 4




d240 1
a240 1

@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 4
a4 2
/* 
 * rt_nurb_solve.c - Decompose a matrix into its LU decomposition using pivoting.
d13 1
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d242 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d12 1
a12 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

