head	14.17;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.6
	rel-7-10-2:14.15
	rel-7-10-0:14.14
	rel-7-8-4:14.11
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.17
date	2007.12.16.15.59.39;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.09.15.16.23.12;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.07.26.01.13.57;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.54;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.09.16.02.04.24;	author lbutler;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.16.18.18.56;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.35;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.07;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.57;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.45;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.19;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.57;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@convert all bzero calls to memset
@
text
@/*                      D B _ A L L O C . C
 * BRL-CAD
 *
 * Copyright (c) 1988-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup db4 */
/** @@{ */
/** @@file db_alloc.c
 *
 * Functions -
 *	- db_alloc	Find a contiguous block of database storage
 *	- db_delete	Delete storage associated w/entry, zap records
 *	- db_zapper	Zap region of file into ID_FREE records
 *
 *
 *  Authors -
 *	Michael John Muuss
 *	Robert Jon Reschly Jr.
 *
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.16 2007/09/15 16:23:12 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "db.h"
#include "raytrace.h"

#include "./debug.h"


/**
 *  			D B _ A L L O C
 *
 *  Find a block of database storage of "count" granules.
 *
 *  Returns -
 *	 0	OK
 *	-1	failure
 */
int
db_alloc(register struct db_i *dbip, register struct directory *dp, int count)
{
	unsigned long	addr;
	union record	rec;

	RT_CK_DBI(dbip);
	RT_CK_DIR(dp);
	if(RT_G_DEBUG&DEBUG_DB) bu_log("db_alloc(%s) x%x, x%x, count=%d\n",
		dp->d_namep, dbip, dp, count );
	if( count <= 0 )  {
		bu_log("db_alloc(0)\n");
		return(-1);
	}

	if( dp->d_flags & RT_DIR_INMEM )  {
		if( dp->d_un.ptr )  {
			dp->d_un.ptr = bu_realloc( dp->d_un.ptr,
				count * sizeof(union record), "db_alloc() d_un.ptr" );
		} else {
			dp->d_un.ptr = bu_malloc( count * sizeof(union record), "db_alloc() d_un.ptr" );
		}
		dp->d_len = count;
		return 0;
	}

	if( dbip->dbi_read_only )  {
		bu_log("db_alloc on READ-ONLY file\n");
		return(-1);
	}
	while(1)  {
		if( (addr = rt_memalloc( &(dbip->dbi_freep), (unsigned)count )) == 0L )  {
			/* No contiguous free block, append to file */
			if( (dp->d_addr = dbip->dbi_eof) < 0 )  {
				bu_log("db_alloc: bad EOF\n");
				return(-1);
			}
			dp->d_len = count;
			dbip->dbi_eof += count * sizeof(union record);
			dbip->dbi_nrec += count;
			break;
		}
		dp->d_addr = addr * sizeof(union record);
		dp->d_len = count;
		if( db_get( dbip, dp, &rec, 0, 1 ) < 0 )
			return(-1);
		if( rec.u_id != ID_FREE )  {
			bu_log("db_alloc():  addr %ld non-FREE (id %d), skipping\n",
				addr, rec.u_id );
			continue;
		}
	}

	/* Clear out ALL the granules, for safety */
	return( db_zapper( dbip, dp, 0 ) );
}

/**
 *			D B _ D E L R E C
 *
 *  Delete a specific record from database entry
 *  No longer supported.
 */
int
db_delrec(struct db_i *dbip, register struct directory *dp, int recnum)
{

	RT_CK_DBI(dbip);
	RT_CK_DIR(dp);
	if(RT_G_DEBUG&DEBUG_DB) bu_log("db_delrec(%s) x%x, x%x, recnum=%d\n",
		dp->d_namep, dbip, dp, recnum );

	bu_log("ERROR db_delrec() is no longer supported.  Use combination import/export routines.\n");
	return -1;
}

/**
 *  			D B _ D E L E T E
 *
 *  Delete the indicated database record(s).
 *  Arrange to write "free storage" database markers in it's place,
 *  positively erasing what had been there before.
 */
int
db_delete(struct db_i *dbip, struct directory *dp)
{
	register int i = -1;

	RT_CK_DBI(dbip);
	RT_CK_DIR(dp);
	if(RT_G_DEBUG&DEBUG_DB) bu_log("db_delete(%s) x%x, x%x\n",
		dp->d_namep, dbip, dp );

	if( dp->d_flags & RT_DIR_INMEM )  {
		bu_free( dp->d_un.ptr, "db_delete d_un.ptr");
		dp->d_un.ptr = NULL;
		dp->d_len = 0;
		return 0;
	}

	if( dbip->dbi_version == 4 )  {
		i = db_zapper( dbip, dp, 0 );
		rt_memfree( &(dbip->dbi_freep), (unsigned)dp->d_len,
			dp->d_addr/(sizeof(union record)) );
	} else if( dbip->dbi_version == 5 )  {
		i = db5_write_free( dbip, dp, dp->d_len );
		rt_memfree( &(dbip->dbi_freep), dp->d_len,
			dp->d_addr );
	} else {
		bu_bomb("db_delete() unsupported database version\n");
	}

	dp->d_len = 0;
	dp->d_addr = -1;
	return i;
}

/**
 *			D B _ Z A P P E R
 *
 *  Using a single call to db_put(), write multiple zeroed records out,
 *  all with u_id field set to ID_FREE.
 *  This will zap all records from "start" to the end of this entry.
 *
 *  Returns:
 *	-1	on error
 *	0	on success (from db_put())
 */
int
db_zapper(struct db_i *dbip, struct directory *dp, int start)
{
	register union record	*rp;
	register int		i;
	int			todo;

	RT_CK_DBI(dbip);
	RT_CK_DIR(dp);
	if(RT_G_DEBUG&DEBUG_DB) bu_log("db_zapper(%s) x%x, x%x, start=%d\n",
		dp->d_namep, dbip, dp, start );

	if( dp->d_flags & RT_DIR_INMEM )  bu_bomb("db_zapper() called on RT_DIR_INMEM object\n");

	if( dbip->dbi_read_only )
		return(-1);

	BU_ASSERT_LONG( dbip->dbi_version, ==, 4 );

	if( (todo = dp->d_len - start) == 0 )
		return(0);		/* OK -- trivial */
	if( todo < 0 )
		return(-1);

	rp = (union record *)bu_malloc( todo * sizeof(union record), "db_zapper buf");
	memset((char *)rp, 0, todo * sizeof(union record));
	for( i=0; i < todo; i++ )
		rp[i].u_id = ID_FREE;
	i = db_put( dbip, dp, rp, start, todo );
	bu_free( (char *)rp, "db_zapper buf" );
	return i;
}
/** @@} */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.15 2007/07/26 01:13:57 brlcad Exp $ (BRL)";
d215 1
a215 1
	bzero( (char *)rp, todo * sizeof(union record) );
@


14.15
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.14 2007/01/23 01:13:36 brlcad Exp $ (BRL)";
d43 1
a43 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a33 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.13 2007/01/21 04:45:43 brlcad Exp $ (BRL)";
@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.12 2007/01/20 14:36:54 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 2

/*@@{*/
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.11 2006/09/16 02:04:24 lbutler Exp $ (BRL)";
d232 1
a232 1
/*@@}*/
@


14.11
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1988-2006 United States Government as represented by
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.10 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2006
@
text
@d22 1
a22 3
/** \defgroup db Database
 * \ingroup librt
 */
a42 1
/*@@}*/
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.9 2006/01/16 18:18:56 brlcad Exp $ (BRL)";
d234 1
@


14.9
log
@move the db_flags_internal() to its own db_flags.c file as it has very little to do with allocations. also, add another routine for getting the flags from a db5_raw_internal as well.
@
text
@d4 1
a4 1
 * Copyright (C) 1988-2005 United States Government as represented by
d48 1
a48 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.8 2005/10/23 04:44:35 brlcad Exp $ (BRL)";
@


14.8
log
@trailing ws
@
text
@a32 1
 *	- db_flags_internal	Construct flags word
d48 1
a48 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.7 2005/08/12 22:31:07 lbutler Exp $ (BRL)";
a52 2


d55 1
a55 1
#include <string.h>
d57 1
a57 1
#include <strings.h>
d67 1
a237 25
/**
 *			D B _ F L A G S _ I N T E R N A L
 *
 *  Given the internal form of a database object,
 *  return the appropriate 'flags' word for stashing in the
 *  in-memory directory of objects.
 */
int
db_flags_internal(const struct rt_db_internal *intern)
{
	const struct rt_comb_internal	*comb;

	RT_CK_DB_INTERNAL(intern);

	if( intern->idb_type != ID_COMBINATION )
		return DIR_SOLID;

	comb = (struct rt_comb_internal *)intern->idb_ptr;
	RT_CK_COMB(comb);

	if( comb->region_flag )
		return DIR_COMB | DIR_REGION;
	return DIR_COMB;
}

@


14.7
log
@Doxygen changes
@
text
@d22 1
a22 1
/** \defgroup db Database 
d39 1
a39 1
 *  
d44 1
a44 1
 *  
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.6 2005/01/30 20:30:57 brlcad Exp $ (BRL)";
d72 1
a72 1
 *  
d157 1
a157 1
 *  
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d22 1
a22 1
/** \defgroup db Database
d39 1
a39 1
 *
d44 1
a44 1
 *
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d72 1
a72 1
 *
d157 1
a157 1
 *
@


14.6
log
@update copyright to 2005
@
text
@d21 6
d30 4
a33 4
 *	db_alloc	Find a contiguous block of database storage
 *	db_delete	Delete storage associated w/entry, zap records
 *	db_zapper	Zap region of file into ID_FREE records
 *	db_flags_internal	Construct flags word
d46 2
d49 1
a49 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_alloc.c,v 14.5 2004/12/21 06:38:20 morrison Exp $ (BRL)";
d70 1
a70 1
/*
d136 1
a136 1
/*
d155 1
a155 1
/*
d196 1
a196 1
/*
d240 1
a240 1
/*
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1988-2004 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_alloc.c,v 14.4 2004/12/21 06:18:45 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a38 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1988-2004 by the United States Army.
 *	All rights reserved.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_alloc.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_alloc.c,v 14.2 2004/12/21 04:18:19 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_alloc.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D B _ A L L O C . C
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_alloc.c,v 1.3 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_alloc.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (BRL)";
d240 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_alloc.c,v 1.1 2004/05/20 15:19:57 morrison Exp $ (BRL)";
d33 1
a33 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/db_alloc.c,v 11.20 2004/05/10 15:30:46 erikg Exp $ (BRL)";
d28 1
a28 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

