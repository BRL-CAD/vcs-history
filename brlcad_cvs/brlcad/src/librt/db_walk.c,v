head	14.21;
access;
symbols
	rel-7-10-4:14.18
	STABLE:14.18.0.2
	stable-branch:14.6
	rel-7-10-2:14.18
	rel-7-10-0:14.17
	rel-7-8-4:14.13
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.2
	rel-7-6-0:14.8
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.21
date	2007.11.18.01.59.16;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.10.31.07.38.01;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.09.15.16.23.12;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.07.26.01.13.57;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.27.01.41.39;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.36.54;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.09.16.02.04.24;	author lbutler;	state Exp;
branches;
next	14.12;

14.12
date	2006.07.17.15.55.02;	author prasad_silva;	state Exp;
branches;
next	14.11;

14.11
date	2006.06.26.15.22.34;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.35;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.08.15.22.40.00;	author lbutler;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2005.08.12.22.31.07;	author lbutler;	state Exp;
branches;
next	14.6;

14.6
date	2005.01.30.20.30.58;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.45;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.58;	author morrison;	state Exp;
branches;
next	;

14.8.2.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.21
log
@if there's no directory pointer, or no callbacks, there's nothing to do
@
text
@/*                       D B _ W A L K . C
 * BRL-CAD
 *
 * Copyright (c) 1988-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup dbio */
/** @@{ */
/** @@file db_walk.c
 *
 * Functions -
 *	db_functree	No-frills tree-walk
 *
 *  Authors -
 *	Michael John Muuss
 *	John R. Anderson
 *
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.20 2007/10/31 07:38:01 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "db.h"
#include "raytrace.h"

#include "./debug.h"

/*
 *          D B _ T R A V E R S E _ S U B T R E E
 *
 *  A generic traversal function.
 *
 */
void
db_traverse_subtree(union tree *tp,
		    void (*traverse_func) ( struct directory *, struct db_traverse * ),
		    struct db_traverse *dtp)
{
    struct directory *dp;

    if( !tp )
	return;

    RT_CK_DBTR( dtp );
    RT_CHECK_DBI( dtp->dbip );
    RT_CK_TREE( tp );
    RT_CK_RESOURCE( dtp->resp );

    switch( tp->tr_op )  {

	case OP_DB_LEAF:
	    if( (dp=db_lookup( dtp->dbip, tp->tr_l.tl_name, LOOKUP_NOISY )) == DIR_NULL )
		return;
	    traverse_func( dp, dtp );
	    break;

	case OP_UNION:
	case OP_INTERSECT:
	case OP_SUBTRACT:
	case OP_XOR:
	    db_traverse_subtree( tp->tr_b.tb_left, traverse_func, dtp );
	    db_traverse_subtree( tp->tr_b.tb_right, traverse_func, dtp );
	    break;
	default:
	    bu_log( "db_functree_subtree: unrecognized operator %d\n", tp->tr_op );
	    bu_bomb( "db_functree_subtree: unrecognized operator\n" );
    }
}

/*
 *     D B _ P R E O R D E R _ T R A V E R S E
 *
 *  This subroutine is called for a no-frills tree-walk,
 *  with the provided subroutines being called when entering and
 *  exiting combinations and at leaf (solid) nodes.
 *
 *  This routine is recursive, so no variables may be declared static.
 *
 */
void
db_preorder_traverse( struct directory *dp,
		      struct db_traverse *dtp )
{
    register int i;
    RT_CK_DBTR(dtp);
    RT_CK_DBI(dtp->dbip);

    if (RT_G_DEBUG & DEBUG_DB)
	bu_log("db_preorder_traverse(%s) x%x, x%x, comb_enter=x%x, comb_exit=x%x, leaf=x%x, client_data=x%x\n",
		dp->d_namep, dtp->dbip, dp, dtp->comb_enter_func, dtp->comb_exit_func, dtp->leaf_func, dtp->client_data );

    if ( dp->d_flags & DIR_COMB )  {
	/* entering region */
	if( dtp->comb_enter_func )
	    dtp->comb_enter_func( dtp->dbip, dp, dtp->client_data );
	if ( dtp->dbip->dbi_version < 5 ) {
	    register union record   *rp;
	    register struct directory *mdp;
	    /*
	     * Load the combination into local record buffer
	     * This is in external v4 format.
	     */
	    if( (rp = db_getmrec( dtp->dbip, dp )) == (union record *)0 )
		return;
	    /* recurse */
	    for( i=1; i < dp->d_len; i++ )  {
		if( (mdp = db_lookup( dtp->dbip, rp[i].M.m_instname,
				LOOKUP_NOISY )) == DIR_NULL )
		    continue;
		db_preorder_traverse( mdp, dtp );
	    }
	    bu_free( (char *)rp, "db_preorder_traverse[]" );
	} else {
	    struct rt_db_internal in;
	    struct rt_comb_internal *comb;
	    struct directory *ndp;

	    if( rt_db_get_internal5( &in, dp, dtp->dbip, NULL, dtp->resp ) < 0 )
		return;

	    comb = (struct rt_comb_internal *)in.idb_ptr;

	    db_traverse_subtree( comb->tree, db_preorder_traverse, dtp );

	    rt_db_free_internal( &in, dtp->resp );
	}
	/* exiting region */
	if( dtp->comb_exit_func )
	    dtp->comb_exit_func( dtp->dbip, dp, dtp->client_data );
    } else if( dp->d_flags & DIR_SOLID || dp->d_major_type & DB5_MAJORTYPE_BINARY_MASK )  {
	/* at leaf */
	if( dtp->leaf_func )
	    dtp->leaf_func( dtp->dbip, dp, dtp->client_data );
    } else {
	bu_log("db_preorder_traverse:  %s is neither COMB nor SOLID?\n",
		dp->d_namep );
    }
}


/*	D B _ F U N C T R E E _ S U B T R E E
 *
 *	The only reason for this to be broken out is that
 *	2 separate locations in db_functree() call it.
 */
void
db_functree_subtree(struct db_i *dbip,
		    union tree *tp,
		    void (*comb_func) (struct db_i *, struct directory *, genptr_t),
		    void (*leaf_func) (struct db_i *, struct directory *, genptr_t),
		    struct resource *resp,
		    genptr_t client_data)
{
    struct directory *dp;

    if( !tp )
	return;

    RT_CHECK_DBI( dbip );
    RT_CK_TREE( tp );
    RT_CK_RESOURCE( resp );

    switch( tp->tr_op )  {

	case OP_DB_LEAF:
	    if( (dp=db_lookup( dbip, tp->tr_l.tl_name, LOOKUP_NOISY )) == DIR_NULL )
		return;
	    db_functree( dbip, dp, comb_func, leaf_func, resp, client_data);
	    break;

	case OP_UNION:
	case OP_INTERSECT:
	case OP_SUBTRACT:
	case OP_XOR:
	    db_functree_subtree( dbip, tp->tr_b.tb_left, comb_func, leaf_func, resp, client_data );
	    db_functree_subtree( dbip, tp->tr_b.tb_right, comb_func, leaf_func, resp, client_data );
	    break;
	default:
	    bu_log( "db_functree_subtree: unrecognized operator %d\n", tp->tr_op );
	    bu_bomb( "db_functree_subtree: unrecognized operator\n" );
    }
}

/**
 *			D B _ F U N C T R E E
 *
 *  This subroutine is called for a no-frills tree-walk,
 *  with the provided subroutines being called at every combination
 *  and leaf (solid) node, respectively.
 *
 *  This routine is recursive, so no variables may be declared static.
 *
 */
void
db_functree(struct db_i *dbip,
	    struct directory *dp,
	    void (*comb_func) (struct db_i *, struct directory *, genptr_t),
	    void (*leaf_func) (struct db_i *, struct directory *, genptr_t),
	    struct resource *resp,
	    genptr_t client_data)
{
    register int		i;

    RT_CK_DBI(dbip);

    if ((!dp) || (!comb_func && !leaf_func)) {
	return; /* nothing to do */
    }

    if(RT_G_DEBUG&DEBUG_DB) {
	bu_log("db_functree(%s) x%x, x%x, comb=x%x, leaf=x%x, client_data=x%x\n",
	       dp->d_namep, dbip, dp, comb_func, leaf_func, client_data );
    }

    if( dp->d_flags & DIR_COMB )  {
	if( dbip->dbi_version < 5 ) {
	    register union record	*rp;
	    register struct directory *mdp;
	    /*
	     * Load the combination into local record buffer
	     * This is in external v4 format.
	     */
	    if( (rp = db_getmrec( dbip, dp )) == (union record *)0 )
		return;

	    /* recurse */
	    for( i=1; i < dp->d_len; i++ )  {
		if( (mdp = db_lookup( dbip, rp[i].M.m_instname, LOOKUP_NOISY )) == DIR_NULL )
		    continue;
		db_functree( dbip, mdp, comb_func, leaf_func, resp, client_data );
	    }
	    bu_free( (char *)rp, "db_functree record[]" );
	} else {
	    struct rt_db_internal in;
	    struct rt_comb_internal *comb;

	    if( rt_db_get_internal5( &in, dp, dbip, NULL, resp ) < 0 )
		return;

	    comb = (struct rt_comb_internal *)in.idb_ptr;
	    db_functree_subtree( dbip, comb->tree, comb_func, leaf_func, resp, client_data );
	    rt_db_free_internal( &in, resp );
	}

	/* Finally, the combination itself */
	if( comb_func )
	    comb_func( dbip, dp, client_data );

    } else if( dp->d_flags & DIR_SOLID || dp->d_major_type & DB5_MAJORTYPE_BINARY_MASK )  {
	if( leaf_func )
	    leaf_func( dbip, dp, client_data );
    } else {
	bu_log("db_functree:  %s is neither COMB nor SOLID?\n",
	       dp->d_namep );
    }
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.20
log
@remove old comment
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.19 2007/09/15 16:23:12 brlcad Exp $ (BRL)";
d226 9
a234 2
    if(RT_G_DEBUG&DEBUG_DB) bu_log("db_functree(%s) x%x, x%x, comb=x%x, leaf=x%x, client_data=x%x\n",
				   dp->d_namep, dbip, dp, comb_func, leaf_func, client_data );
@


14.19
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@a25 2
 *	comb_functree	No-frills combination-walk (deprecated)
 *
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.18 2007/07/26 01:13:57 brlcad Exp $ (BRL)";
@


14.18
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.17 2007/01/27 01:41:39 brlcad Exp $ (BRL)";
a40 1

a41 1
#ifdef HAVE_STRING_H
a42 3
#else
#include <strings.h>
#endif
@


14.17
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a32 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.16 2007/01/23 01:13:36 brlcad Exp $ (BRL)";
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.15 2007/01/21 04:45:43 brlcad Exp $ (BRL)";
a46 1

d69 2
a70 2
	            void (*traverse_func) ( struct directory *, struct db_traverse * ),
	            struct db_traverse *dtp)
d107 1
a107 1
 *  with the provided subroutines being called when entering and 
d115 1
a115 1
                      struct db_traverse *dtp )
a172 2
 

@


14.15
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.14 2007/01/20 14:36:54 brlcad Exp $ (BRL)";
@


14.14
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 2

/*@@{*/
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.13 2006/09/16 02:04:24 lbutler Exp $ (BRL)";
d288 1
a288 1
/*@@}*/
@


14.13
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1988-2006 United States Government as represented by
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.12 2006/07/17 15:55:02 prasad_silva Exp $ (BRL)";
@


14.12
log
@The beginning of a new database traversal framework.
@
text
@d22 1
a22 1
/** \addtogroup db */
a41 1
/*@@}*/
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.11 2006/06/26 15:22:34 brlcad Exp $ (BRL)";
d290 1
@


14.11
log
@ws
@
text
@d29 1
a29 1
 *	comb_functree	No-frills combination-walk
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.10 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
d66 115
@


14.10
log
@update copyright to 2006
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.9 2005/10/23 04:44:35 brlcad Exp $ (BRL)";
d79 1
a79 1
	struct directory *dp;
d81 11
a91 1
	if( !tp )
d93 2
d96 11
a106 23
	RT_CHECK_DBI( dbip );
	RT_CK_TREE( tp );
	RT_CK_RESOURCE( resp );

	switch( tp->tr_op )  {

		case OP_DB_LEAF:
			if( (dp=db_lookup( dbip, tp->tr_l.tl_name, LOOKUP_NOISY )) == DIR_NULL )
				return;
			db_functree( dbip, dp, comb_func, leaf_func, resp, client_data);
			break;

		case OP_UNION:
		case OP_INTERSECT:
		case OP_SUBTRACT:
		case OP_XOR:
			db_functree_subtree( dbip, tp->tr_b.tb_left, comb_func, leaf_func, resp, client_data );
			db_functree_subtree( dbip, tp->tr_b.tb_right, comb_func, leaf_func, resp, client_data );
			break;
		default:
			bu_log( "db_functree_subtree: unrecognized operator %d\n", tp->tr_op );
			bu_bomb( "db_functree_subtree: unrecognized operator\n" );
	}
d127 16
a142 1
	register int		i;
d144 7
a150 42
	RT_CK_DBI(dbip);
	if(RT_G_DEBUG&DEBUG_DB) bu_log("db_functree(%s) x%x, x%x, comb=x%x, leaf=x%x, client_data=x%x\n",
		dp->d_namep, dbip, dp, comb_func, leaf_func, client_data );

	if( dp->d_flags & DIR_COMB )  {
		if( dbip->dbi_version < 5 ) {
			register union record	*rp;
			register struct directory *mdp;
			/*
			 * Load the combination into local record buffer
			 * This is in external v4 format.
			 */
			if( (rp = db_getmrec( dbip, dp )) == (union record *)0 )
				return;

			/* recurse */
			for( i=1; i < dp->d_len; i++ )  {
				if( (mdp = db_lookup( dbip, rp[i].M.m_instname,
				    LOOKUP_NOISY )) == DIR_NULL )
					continue;
				db_functree( dbip, mdp, comb_func, leaf_func, resp, client_data );
			}
			bu_free( (char *)rp, "db_functree record[]" );
		} else {
			struct rt_db_internal in;
			struct rt_comb_internal *comb;

			if( rt_db_get_internal5( &in, dp, dbip, NULL, resp ) < 0 )
				return;

			comb = (struct rt_comb_internal *)in.idb_ptr;
			db_functree_subtree( dbip, comb->tree, comb_func, leaf_func, resp, client_data );
			rt_db_free_internal( &in, resp );
		}

		/* Finally, the combination itself */
		if( comb_func )
			comb_func( dbip, dp, client_data );

	} else if( dp->d_flags & DIR_SOLID || dp->d_major_type & DB5_MAJORTYPE_BINARY_MASK )  {
		if( leaf_func )
			leaf_func( dbip, dp, client_data );
d152 9
a160 2
		bu_log("db_functree:  %s is neither COMB nor SOLID?\n",
			dp->d_namep );
d162 12
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1988-2005 United States Government as represented by
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.8 2005/08/15 22:40:00 lbutler Exp $ (BRL)";
@


14.8
log
@Cleaned up function declarations
@
text
@d35 1
a35 1
 *  
d40 1
a40 1
 *  
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.7 2005/08/12 22:31:07 lbutler Exp $ (BRL)";
d68 1
a68 1
 *	The only reason for this to be broken out is that 
d117 1
a117 1
 *  
@


14.8.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d35 1
a35 1
 *
d40 1
a40 1
 *
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d68 1
a68 1
 *	The only reason for this to be broken out is that
d117 1
a117 1
 *
@


14.7
log
@Doxygen changes
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.6 2005/01/30 20:30:58 brlcad Exp $ (BRL)";
d66 5
d72 6
a77 1
db_functree_subtree(struct db_i *dbip, union tree *tp, void (*comb_func) (struct db_i *, struct directory *, genptr_t), void (*leaf_func) (struct db_i *, struct directory *, genptr_t), struct resource *resp, genptr_t client_data)
d120 6
a125 1
db_functree(struct db_i *dbip, struct directory *dp, void (*comb_func) (struct db_i *, struct directory *, genptr_t), void (*leaf_func) (struct db_i *, struct directory *, genptr_t), struct resource *resp, genptr_t client_data)
d160 1
a160 2
			db_functree_subtree( dbip, comb->tree, comb_func,
				leaf_func, resp, client_data );
@


14.6
log
@update copyright to 2005
@
text
@d21 4
d42 2
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_walk.c,v 14.5 2004/12/21 06:38:20 morrison Exp $ (BRL)";
d99 1
a99 1
/*
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1988-2004 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_walk.c,v 14.4 2004/12/21 06:18:45 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a36 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1988-2004 by the United States Army.
 *	All rights reserved.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_walk.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_walk.c,v 14.2 2004/12/21 04:18:20 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_walk.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D B _ W A L K . C
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_walk.c,v 1.3 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_walk.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (BRL)";
d140 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_walk.c,v 1.1 2004/05/20 15:19:58 morrison Exp $ (BRL)";
d31 1
a31 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/db_walk.c,v 11.17 2004/05/10 15:30:46 erikg Exp $ (BRL)";
d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

