head	14.21;
access;
symbols
	rel-7-10-4:14.18
	STABLE:14.18.0.2
	stable-branch:14.6
	rel-7-10-2:14.18
	rel-7-10-0:14.14
	rel-7-8-4:14.10
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.21
date	2007.12.16.18.53.50;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.12.01.21.47.12;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.09.15.16.23.12;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.07.26.01.13.57;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.19.02.05.24;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.05.18.04.13.48;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.05.14.21.04.31;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.27.01.41.39;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.54;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.09.16.02.04.24;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.35;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.07;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.58;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.45;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.57;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.21
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                       D B _ P A T H . C
 * BRL-CAD
 *
 * Copyright (c) 1990-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup dbio */
/** @@{ */
/** @@file db_path.c
 *
 * Routines to manipulate "db_full_path" structures
 *
 * Functions -
 *
 *
 *  Authors -
 *	Michael John Muuss
 *
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.20 2007/12/01 21:47:12 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <math.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"

#include "./debug.h"

/**
 *			D B _ F U L L _ P A T H _ I N I T
 */
void
db_full_path_init( struct db_full_path *pathp )
{
	pathp->fp_len = 0;
	pathp->fp_maxlen = 0;
	pathp->fp_names = (struct directory **)NULL;
	pathp->magic = DB_FULL_PATH_MAGIC;
}

/**
 *			D B _ A D D _ N O D E _ T O _ F U L L _ P A T H
 */
void
db_add_node_to_full_path( struct db_full_path *pp, struct directory *dp )
{
	RT_CK_FULL_PATH( pp );

	if( pp->fp_maxlen <= 0 )  {
		pp->fp_maxlen = 32;
		pp->fp_names = (struct directory **)bu_malloc(
			pp->fp_maxlen * sizeof(struct directory *),
			"db_full_path array");
	} else if( pp->fp_len >= pp->fp_maxlen )  {
		pp->fp_maxlen *= 4;
		pp->fp_names = (struct directory **)bu_realloc(
			(char *)pp->fp_names,
			pp->fp_maxlen * sizeof(struct directory *),
			"enlarged db_full_path array");
	}
	pp->fp_names[pp->fp_len++] = dp;
}

/**
 *			D B _ D U P _ F U L L _ P A T H
 */
void
db_dup_full_path(register struct db_full_path *newp, register const struct db_full_path *oldp)
{
	RT_CK_FULL_PATH(newp);
	RT_CK_FULL_PATH(oldp);

	newp->fp_maxlen = oldp->fp_maxlen;
	newp->fp_len = oldp->fp_len;
	if( oldp->fp_len <= 0 )  {
		newp->fp_names = (struct directory **)0;
		return;
	}
	newp->fp_names = (struct directory **)bu_malloc(
		newp->fp_maxlen * sizeof(struct directory *),
		"db_full_path array (duplicate)" );
	memcpy((char *)newp->fp_names, (char *)oldp->fp_names,	newp->fp_len * sizeof(struct directory *));
}

/**
 *			D B _ E X T E N D _ F U L L _ P A T H
 *
 *  Extend "pathp" so that it can grow from current fp_len by incr more names.
 *
 *  This is intended primarily as an internal method.
 */
void
db_extend_full_path( struct db_full_path *pathp, int incr )
{
	int		newlen;

	RT_CK_FULL_PATH(pathp);

	if( pathp->fp_maxlen <= 0 )  {
		pathp->fp_len = 0;
		pathp->fp_maxlen = incr;
		pathp->fp_names = (struct directory **)bu_malloc(
			pathp->fp_maxlen * sizeof(struct directory *),
			"empty fp_names extension" );
		return;
	}

	newlen = pathp->fp_len + incr;
	if( pathp->fp_maxlen < newlen )  {
		pathp->fp_maxlen = newlen+1;
		pathp->fp_names = (struct directory **)bu_realloc(
			(char *)pathp->fp_names,
			pathp->fp_maxlen * sizeof(struct directory *),
			"fp_names extension" );
	}
}

/**
 *			D B _ A P P E N D _ F U L L _ P A T H
 */
void
db_append_full_path( struct db_full_path *dest, const struct db_full_path *src )
{
	RT_CK_FULL_PATH(dest);
	RT_CK_FULL_PATH(src);

	db_extend_full_path( dest, src->fp_len );
	memcpy((char *)&dest->fp_names[dest->fp_len],
	       (char *)&src->fp_names[0],
	       src->fp_len * sizeof(struct directory *) );
	dest->fp_len += src->fp_len;
}

/**
 *			D B _ D U P _ P A T H _ T A I L
 *
 *  Dup old path from starting index to end.
 */
void
db_dup_path_tail(register struct db_full_path *newp, register const struct db_full_path *oldp, int start)
{
	RT_CK_FULL_PATH(newp);
	RT_CK_FULL_PATH(oldp);

	if( start < 0 || start > oldp->fp_len-1 )  bu_bomb("db_dup_path_tail: start offset out of range\n");

	newp->fp_maxlen = newp->fp_len = oldp->fp_len - start;
	if( newp->fp_len <= 0 )  {
		newp->fp_names = (struct directory **)0;
		return;
	}
	newp->fp_names = (struct directory **)bu_malloc(
		newp->fp_maxlen * sizeof(struct directory *),
		"db_full_path array (duplicate)" );
	memcpy((char *)newp->fp_names, (char *)&oldp->fp_names[start], newp->fp_len * sizeof(struct directory *));
}

/**
 *			D B _ P A T H _ T O _ S T R I N G
 *
 *  Unlike rt_path_str(), this version can be used in parallel.
 *  Caller is responsible for freeing the returned buffer.
 */
char *
db_path_to_string( const struct db_full_path *pp )
{
	register char	*cp;
	char	*buf;
	int len;
	int rem;
	int i;

	RT_CK_FULL_PATH( pp );

	len = 3;	/* leading slash, trailing null, spare */
	for( i=pp->fp_len-1; i >= 0; i-- )  {
		if( pp->fp_names[i] )
			len += strlen( pp->fp_names[i]->d_namep ) + 1;
		else
			len += 16;
	}

	buf = bu_malloc( len, "pathname string" );
	cp = buf;
	rem = len;

	for( i=0; i < pp->fp_len; i++ )  {
		*cp++ = '/';
		rem--;
		if( pp->fp_names[i] ) {
			strncpy( cp, pp->fp_names[i]->d_namep, rem-1 );
			rem -= strlen(pp->fp_names[i]->d_namep);
		} else {
			strncpy( cp, "**NULL**", rem-1 );
			rem -= 8;
		}
		cp += strlen( cp );
	}
	*cp++ = '\0';
	return buf;
}

/**
 *			D B _ P A T H _ T O _ V L S
 *
 *  Append a string representation of the path onto the vls.
 *  Must have exactly the same formattting conventions as
 *  db_path_to_string().
 */
void
db_path_to_vls( struct bu_vls *str, const struct db_full_path *pp )
{
	register int i;

	BU_CK_VLS(str);
	RT_CK_FULL_PATH( pp );

	for( i=0; i < pp->fp_len; i++ )  {
		bu_vls_putc( str, '/' );
		if( pp->fp_names[i] )
			bu_vls_strcat( str, pp->fp_names[i]->d_namep );
		else
			bu_vls_strcat( str, "**NULL**" );
	}
}

/**
 *			D B _ P R _ F U L L _ P A T H
 */
void
db_pr_full_path( const char *msg, const struct db_full_path *pathp )
{
	char	*sofar = db_path_to_string(pathp);

	bu_log("%s %s\n", msg, sofar );
	bu_free(sofar, "path string");
}

/**
 *			D B _ S T R I N G _ T O _ P A T H
 *
 *  Reverse the effects of db_path_to_string().
 *
 *  The db_full_path structure will be initialized.  If it was already in use,
 *  user should call db_free_full_path() first.
 *
 *  Returns -
 *	-1	One or more components of path did not exist in the directory.
 *	 0	OK
 */
int
db_string_to_path(struct db_full_path *pp, const struct db_i *dbip, const char *str)
{
	register char		*cp;
	register char		*slashp;
	struct directory	*dp;
	char			*copy;
	int			nslash = 0;
	int			ret = 0;
	int			len;

	RT_CK_DBI(dbip);

	/* Count slashes */
	while( *str == '/' )  str++;	/* strip off leading slashes */
	if( *str == '\0' )  {
		/* Path of a lone slash */
		db_full_path_init( pp );
		return 0;
	}

	copy = bu_strdup( str );

	/* eliminate a a trailing slash */
	len = strlen( copy );
	if( copy[len-1] == '/' )
		copy[len-1] = '\0';

	cp = copy;
	while( *cp )  {
		if( (slashp = strchr( cp, '/' )) == NULL )  break;
		nslash++;
		cp = slashp+1;
	}

	/* Make a path structure just big enough */
	pp->magic = DB_FULL_PATH_MAGIC;
	pp->fp_maxlen = pp->fp_len = nslash+1;
	pp->fp_names = (struct directory **)bu_malloc(
		pp->fp_maxlen * sizeof(struct directory *),
		"db_string_to_path path array" );


	/* Build up path array */
	cp = copy;
	nslash = 0;
	while( *cp )  {
		if( (slashp = strchr( cp, '/' )) == NULL )  {
			/* Last element of string, has no trailing slash */
			slashp = cp + strlen(cp) - 1;
		} else {
			*slashp = '\0';
		}
		if( (dp = db_lookup( dbip, cp, LOOKUP_NOISY )) == DIR_NULL )  {
			bu_log("db_string_to_path() of '%s' failed on '%s'\n",
				str, cp );
			ret = -1;	/* FAILED */
			/* Fall through, storing null dp in this location */
		}
		pp->fp_names[nslash++] = dp;
		cp = slashp+1;
	}
	BU_ASSERT_LONG( nslash, ==, pp->fp_len );
	bu_free( copy, "db_string_to_path() duplicate string");
	return ret;
}

/**
 *			D B _ A R G V _ T O _ P A T H
 *
 *  Treat elements from argv[0] to argv[argc-1] as a path specification.
 *
 *  The path structure will be fully initialized.  If it was already in use,
 *  user should call db_free_full_path() first.
 *
 *  Returns -
 *	-1	One or more components of path did not exist in the directory.
 *	 0	OK
 */
int
db_argv_to_path(register struct db_full_path *pp, struct db_i *dbip, int argc, const char *const *argv)
{
	struct directory	*dp;
	int			ret = 0;
	int			i;

	RT_CK_DBI(dbip);

	/* Make a path structure just big enough */
	pp->magic = DB_FULL_PATH_MAGIC;
	pp->fp_maxlen = pp->fp_len = argc;
	pp->fp_names = (struct directory **)bu_malloc(
		pp->fp_maxlen * sizeof(struct directory *),
		"db_argv_to_path path array" );

	for( i=0; i<argc; i++ )  {
		if( (dp = db_lookup( dbip, argv[i], LOOKUP_NOISY )) == DIR_NULL )  {
			bu_log("db_argv_to_path() failed on element %d='%s'\n",
				i, argv[i] );
			ret = -1;	/* FAILED */
			/* Fall through, storing null dp in this location */
		}
		pp->fp_names[i] = dp;
	}
	return ret;
}

/**
 *			D B _ F R E E _ F U L L _ P A T H
 *
 *  Free the contents of the db_full_path structure, but not the structure
 *  itself, which might be automatic.
 */
void
db_free_full_path(register struct db_full_path *pp)
{
	RT_CK_FULL_PATH( pp );

	if( pp->fp_maxlen > 0 )  {
		bu_free( (char *)pp->fp_names, "db_full_path array" );
		pp->fp_maxlen = pp->fp_len = 0;
		pp->fp_names = (struct directory **)0;
	}
}

/**
 *			D B _ I D E N T I C A L _ F U L L _ P A T H S
 *
 *  Returns -
 *	1	match
 *	0	different
 */
int
db_identical_full_paths(
	const struct db_full_path *a,
	const struct db_full_path *b )
{
	register int i;

	RT_CK_FULL_PATH(a);
	RT_CK_FULL_PATH(b);

	if( a->fp_len != b->fp_len )  return 0;

	for( i = a->fp_len-1; i >= 0; i-- )  {
		if( a->fp_names[i] != b->fp_names[i] )  return 0;
	}
	return 1;
}

/**
 *			D B _ F U L L _ P A T H _ S U B S E T
 *
 *  Returns -
 *	1	if 'b' is a proper subset of 'a'
 *	0	if not.
 */
int
db_full_path_subset(
	const struct db_full_path *a,
	const struct db_full_path *b )
{
	register int i;

	RT_CK_FULL_PATH(a);
	RT_CK_FULL_PATH(b);

	if( b->fp_len > a->fp_len )  return 0;

	for( i=0; i < a->fp_len; i++ )  {
		register int j;

		if( a->fp_names[i] != b->fp_names[0] )  continue;

		/* First element matches, check remaining length */
		if( b->fp_len > a->fp_len - i )  return 0;

		/* Check remainder of 'b' */
		for( j=1; j < b->fp_len; j++ )  {
			if( a->fp_names[i+j] != b->fp_names[j] )  goto step;
		}
		/* 'b' is a proper subset */
		return 1;

step:		;
	}
	return 0;
}

/**
 *			D B _ F U L L _ P A T H _ S E A R C H
 *
 *  Returns -
 *	1	'dp' is found on this path
 *	0	not found
 */
int
db_full_path_search( const struct db_full_path *a, const struct directory *dp )
{
	register int i;

	RT_CK_FULL_PATH(a);
	RT_CK_DIR(dp);

	for( i = a->fp_len-1; i >= 0; i-- )  {
		if( a->fp_names[i] == dp )  return 1;
	}
	return 0;
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.20
log
@more flawfinder level 4 quellage, mostly str*() buffer boundary limits.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.19 2007/09/15 16:23:12 brlcad Exp $ (BRL)";
d103 1
a103 1
	memcpy((char *)newp->fp_names, (char *)oldp->fp_names,	newp->fp_len * sizeof(struct directory *) );
d176 1
a176 1
	memcpy((char *)newp->fp_names, (char *)&oldp->fp_names[start], newp->fp_len * sizeof(struct directory *) );
@


14.19
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.18 2007/07/26 01:13:57 brlcad Exp $ (BRL)";
d190 3
a192 2
	int	len;
	int	i;
d206 1
d210 8
a217 4
		if( pp->fp_names[i] )
			strcpy( cp, pp->fp_names[i]->d_namep );
		else
			strcpy( cp, "**NULL**" );
@


14.18
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.17 2007/05/19 02:05:24 brlcad Exp $ (BRL)";
a39 1

a41 1
#ifdef HAVE_STRING_H
a42 3
#else
#include <strings.h>
#endif
@


14.17
log
@welcome to 1990, replace calls to bcopy with memcpy.  interestingly enough, valgrind on amd64 linux is showing bcopy() reading more than len bytes (reading to aligned memory internally)
@
text
@a31 5
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.16 2007/05/18 04:13:48 brlcad Exp $ (BRL)";
@


14.16
log
@rt_bomb() has been deprecated since before 7.0, but even our sources weren't properly updated to reflect this change.  update all of our sources to use bu_bomb() now.
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.15 2007/05/14 21:04:31 brlcad Exp $ (BRL)";
d113 1
a113 2
	bcopy( (char *)oldp->fp_names, (char *)newp->fp_names,
		newp->fp_len * sizeof(struct directory *) );
d159 3
a161 3
	bcopy( (char *)&src->fp_names[0],
		(char *)&dest->fp_names[dest->fp_len],
		src->fp_len * sizeof(struct directory *) );
d186 1
a186 2
	bcopy( (char *)&oldp->fp_names[start], (char *)newp->fp_names,
		newp->fp_len * sizeof(struct directory *) );
@


14.15
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.14 2007/01/27 01:41:39 brlcad Exp $ (BRL)";
d177 1
a177 1
	if( start < 0 || start > oldp->fp_len-1 )  rt_bomb("db_dup_path_tail: start offset out of range\n");
@


14.14
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.13 2007/01/23 01:13:36 brlcad Exp $ (BRL)";
d87 1
a87 1
		pp->fp_names = (struct directory **)rt_realloc(
d143 1
a143 1
		pathp->fp_names = (struct directory **)rt_realloc(
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.12 2007/01/21 04:45:43 brlcad Exp $ (BRL)";
a45 1

@


14.12
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.11 2007/01/20 14:36:54 brlcad Exp $ (BRL)";
@


14.11
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 2

/*@@{*/
d24 2
a25 1
 *  Routines to manipulate "db_full_path" structures
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.10 2006/09/16 02:04:24 lbutler Exp $ (BRL)";
d490 1
a490 1
/*@@}*/
@


14.10
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2006 United States Government as represented by
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.9 2006/01/18 06:46:17 brlcad Exp $ (BRL)";
@


14.9
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup db */
a39 1
/*@@}*/
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.8 2005/10/23 04:44:35 brlcad Exp $ (BRL)";
d491 1
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1990-2005 United States Government as represented by
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.7 2005/08/12 22:31:07 lbutler Exp $ (BRL)";
@


14.7
log
@Doxygen changes
@
text
@d33 1
a33 1
 *  
d38 1
a38 1
 *  
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.6 2005/01/30 20:30:58 brlcad Exp $ (BRL)";
d248 1
a248 1
	
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d33 1
a33 1
 *
d38 1
a38 1
 *
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d248 1
a248 1

@


14.6
log
@update copyright to 2005
@
text
@d21 4
a25 1
 *
d40 2
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/db_path.c,v 14.5 2004/12/21 06:38:20 morrison Exp $ (BRL)";
d64 1
a64 1
/*
d76 1
a76 1
/*
d99 1
a99 1
/*
d121 1
a121 1
/*
d154 1
a154 1
/*
d170 1
a170 1
/*
d195 1
a195 1
/*
d234 1
a234 1
/*
d258 1
a258 1
/*
d270 1
a270 1
/*
d349 1
a349 1
/*
d389 1
a389 1
/*
d407 1
a407 1
/*
d432 1
a432 1
/*
d471 1
a471 1
/*
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1990-2004 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_path.c,v 14.4 2004/12/21 06:18:45 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_path.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_path.c,v 14.2 2004/12/21 04:18:20 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_path.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D B _ P A T H . C
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_path.c,v 1.3 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_path.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (BRL)";
d470 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/librt/db_path.c,v 1.1 2004/05/20 15:19:57 morrison Exp $ (BRL)";
d31 1
a31 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d22 1
a22 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/librt/db_path.c,v 11.22 2004/05/10 15:30:46 erikg Exp $ (BRL)";
d25 1
a25 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

