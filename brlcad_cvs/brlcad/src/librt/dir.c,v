head	14.19;
access;
symbols
	rel-7-10-4:14.18
	STABLE:14.18.0.2
	stable-branch:14.6
	rel-7-10-2:14.18
	rel-7-10-0:14.18
	rel-7-8-4:14.14
	rel-7-8-2:14.13
	rel-7-8-0:14.13
	trimnurbs-branch:14.13.0.2
	help:14.13
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.19
date	2007.09.15.16.23.12;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.01.27.01.41.39;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.21.04.45.43;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.20.14.36.54;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.09.16.02.04.24;	author lbutler;	state Exp;
branches;
next	14.13;

14.13
date	2006.01.18.06.46.17;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.11.20.50.28;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.11.19.19.34;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.12.12.23.41.44;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.12.09.03.44.31;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.35;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.31.07;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.58;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.45;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.18.20;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.16;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.59;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                           D I R . C
 * BRL-CAD
 *
 * Copyright (c) 1985-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup dbio */
/** @@{ */
/** @@file dir.c
 *
 * Ray Tracing program, GED database directory manager.
 *
 *  Functions -
 *	rt_dirbuild	Read GED database, build directory
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

#ifndef lint
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.18 2007/01/27 01:41:39 brlcad Exp $";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "./debug.h"

/*
 *			R T _ D I R B U I L D
 *
 *  Builds a directory of the object names.
 *
 *  Allocate and initialize information for this
 *  instance of an RT model database.
 *
 * Returns -
 *	(struct rt_i *)	Success
 *	RTI_NULL	Fatal Error
 */
struct rt_i *
rt_dirbuild( const char *filename, char *buf, int len )
{
	register struct rt_i	*rtip;
	register struct db_i	*dbip;		/* Database instance ptr */

	if( rt_uniresource.re_magic == 0 )
		rt_init_resource( &rt_uniresource, 0, NULL );

	if( (dbip = db_open( filename, "r" )) == DBI_NULL )
		return( RTI_NULL );		/* FAIL */
	RT_CK_DBI(dbip);

	if( db_dirbuild( dbip ) < 0 )  {
		db_close( dbip );
		return RTI_NULL;		/* FAIL */
	}

	rtip = rt_new_rti( dbip );		/* clones dbip */
	db_close(dbip);				/* releases original dbip */

	if( buf != (char *)NULL )
		strncpy( buf, dbip->dbi_title, len );

	return( rtip );				/* OK */
}

/*
 *			R T _ D B _ G E T _ I N T E R N A L
 *
 *  Get an object from the database, and convert it into it's internal
 *  representation.
 *
 *  Returns -
 *	<0	On error
 *	id	On success.
 */
int
rt_db_get_internal(
	struct rt_db_internal	*ip,
	const struct directory	*dp,
	const struct db_i	*dbip,
	const mat_t		mat,
	struct resource		*resp)
{
	struct bu_external	ext;
	register int		id;

	BU_INIT_EXTERNAL(&ext);
	RT_INIT_DB_INTERNAL(ip);

	if( dbip->dbi_version > 4 )
		return  rt_db_get_internal5( ip, dp, dbip, mat, resp );

	if( db_get_external( &ext, dp, dbip ) < 0 )
		return -2;		/* FAIL */

	if( dp->d_flags & DIR_COMB )  {
		id = ID_COMBINATION;
	} else {
		/* As a convenience to older ft_import routines */
		if( mat == NULL )  mat = bn_mat_identity;
		id = rt_id_solid( &ext );
	}

	/* ip is already initialized and should not be re-initialized */
	if( rt_functab[id].ft_import( ip, &ext, mat, dbip, resp ) < 0 )  {
		bu_log("rt_db_get_internal(%s):  import failure\n",
			dp->d_namep );
		rt_db_free_internal( ip, resp );
		bu_free_external( &ext );
		return -1;		/* FAIL */
	}
	bu_free_external( &ext );
	RT_CK_DB_INTERNAL( ip );
	ip->idb_meth = &rt_functab[id];

	/* prior to version 5, there are no attributes */
	bu_avs_init_empty( &ip->idb_avs );

	return id;			/* OK */
}

/*
 *			R T _ D B _ P U T _ I N T E R N A L
 *
 *  Convert the internal representation of a solid to the external one,
 *  and write it into the database.
 *  On success only, the internal representation is freed.
 *
 *  Returns -
 *	<0	error
 *	 0	success
 */
int
rt_db_put_internal(
	struct directory	*dp,
	struct db_i		*dbip,
	struct rt_db_internal	*ip,
	struct resource		*resp)
{
	struct bu_external	ext;
	int			ret;

	BU_INIT_EXTERNAL(&ext);
	RT_CK_DB_INTERNAL( ip );

	if( dbip->dbi_version > 4 )
		return  rt_db_put_internal5( dp, dbip, ip, resp,
		    DB5_MAJORTYPE_BRLCAD );

	/* Scale change on export is 1.0 -- no change */
	ret = ip->idb_meth->ft_export( &ext, ip, 1.0, dbip, resp );
	if( ret < 0 )  {
		bu_log("rt_db_put_internal(%s):  solid export failure\n",
			dp->d_namep);
		rt_db_free_internal( ip, resp );
		bu_free_external( &ext );
		return -2;		/* FAIL */
	}
	rt_db_free_internal( ip, resp );

	if( db_put_external( &ext, dp, dbip ) < 0 )  {
		bu_free_external( &ext );
		return -1;		/* FAIL */
	}

	bu_free_external( &ext );
	return 0;			/* OK */
}

/*
 *			R T _ F W R I T E _ I N T E R N A L
 *
 *  Put an object in internal format out onto a file in external format.
 *  Used by LIBWDB.
 *
 *  Can't really require a dbip parameter, as many callers won't have one.
 *
 *  Returns -
 *	0	OK
 *	<0	error
 */
int
rt_fwrite_internal(
	FILE *fp,
	const char *name,
	const struct rt_db_internal *ip,
	double conv2mm )
{
	struct bu_external	ext;

	RT_CK_DB_INTERNAL(ip);
	RT_CK_FUNCTAB( ip->idb_meth );
	BU_INIT_EXTERNAL( &ext );

	if( ip->idb_meth->ft_export( &ext, ip, conv2mm, NULL /*dbip*/, &rt_uniresource ) < 0 )  {
		bu_log("rt_file_put_internal(%s): solid export failure\n",
			name );
		bu_free_external( &ext );
		return(-2);				/* FAIL */
	}
	BU_CK_EXTERNAL( &ext );

	if( db_fwrite_external( fp, name, &ext ) < 0 )  {
		bu_log("rt_fwrite_internal(%s): db_fwrite_external() error\n",
			name );
		bu_free_external( &ext );
		return(-3);
	}
	bu_free_external( &ext );
	return(0);

}

/*
 *			R T _ D B _ F R E E _ I N T E R N A L
 */
void
rt_db_free_internal( struct rt_db_internal *ip, struct resource *resp )
{
	RT_CK_DB_INTERNAL( ip );

	/* meth is not required since may be asked to free something
	 * that was never set.
	 */
	if (ip->idb_meth) {
	    RT_CK_FUNCTAB(ip->idb_meth);
	    if (ip->idb_ptr) {
		ip->idb_meth->ft_ifree(ip, resp);
	    }
	}

	/* resp is not checked, since most ifree's don't take/need it
	 * (only combinations use it) -- leave it up to ft_ifree to check it
	 */
	if( ip->idb_ptr )  {
	    ip->idb_ptr = NULL;		/* sanity.  Should be handled by INIT, below */
	}
	if( ip->idb_avs.magic == BU_AVS_MAGIC ) {
	    bu_avs_free(&ip->idb_avs);
	}
	RT_INIT_DB_INTERNAL(ip);
}

/*
 *		R T _ D B _ L O O K U P _ I N T E R N A L
 *
 *	    Convert an object name to a rt_db_internal pointer
 *
 *	Looks up the named object in the directory of the specified model,
 *	obtaining a directory pointer.  Then gets that object from the
 *	database and constructs its internal representation.  Returns
 *	ID_NULL on error, otherwise returns the type of the object.
 */
int
rt_db_lookup_internal (
	struct db_i *dbip,
	const char *obj_name,
	struct directory **dpp,
	struct rt_db_internal *ip,
	int noisy,
	struct resource *resp)
{
    struct directory		*dp;

    if (obj_name == (char *) 0)
    {
	if (noisy == LOOKUP_NOISY)
	    bu_log("rt_db_lookup_internal() No object specified\n");
	return ID_NULL;
    }
    if ((dp = db_lookup(dbip, obj_name, noisy)) == DIR_NULL)
	return ID_NULL;
    if (rt_db_get_internal(ip, dp, dbip, (matp_t) NULL, resp ) < 0 )
    {
	if (noisy == LOOKUP_NOISY)
	    bu_log("rt_db_lookup_internal() Failed to get internal form of object '%s'\n",
		dp -> d_namep);
	return ID_NULL;
    }

    *dpp = dp;
    return (ip -> idb_type);
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d40 1
a40 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.17 2007/01/23 01:13:36 brlcad Exp $";
a44 1

a45 1
#ifdef HAVE_STRING_H
d47 1
a47 3
#else
#include <strings.h>
#endif
@


14.17
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d40 1
a40 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.16 2007/01/21 04:45:43 brlcad Exp $";
a45 1

d79 1
a79 1
	    	return( RTI_NULL );		/* FAIL */
d84 1
a84 1
	    	return RTI_NULL;		/* FAIL */
d138 1
a138 1
	    	rt_db_free_internal( ip, resp );
@


14.16
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d40 1
a40 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.15 2007/01/20 14:36:54 brlcad Exp $";
@


14.15
log
@update copyright to 2007
@
text
@a20 1

d22 1
a22 1
/*@@{*/
d24 1
d41 1
a41 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.14 2006/09/16 02:04:24 lbutler Exp $";
d317 1
a317 1
/*@@}*/
@


14.14
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2006 United States Government as represented by
d41 1
a41 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.13 2006/01/18 06:46:17 brlcad Exp $";
@


14.13
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup librt */
a38 1
/*@@}*/
d41 1
a41 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.12 2006/01/11 20:50:28 brlcad Exp $";
d317 1
@


14.12
log
@heh, wrong line and bad syntax.. never mind
@
text
@d4 1
a4 1
 * Copyright (C) 1985-2005 United States Government as represented by
d42 1
a42 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.11 2006/01/11 19:19:34 brlcad Exp $";
@


14.11
log
@init mat to NULL before checking if it's null.
@
text
@d42 1
a42 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.10 2005/12/12 23:41:44 brlcad Exp $";
d114 1
a114 1
	const mat_t		mat = NULL,
@


14.10
log
@avoid crashing, only call the internal free routine if the internal pointer is valid/set
@
text
@d42 1
a42 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.9 2005/12/09 03:44:31 brlcad Exp $";
d114 1
a114 1
	const mat_t		mat,
@


14.9
log
@no sense in bombing if we're asked to free an internal with an unset meth function pointer.  if it's set, make sure it's valid, then call the callback.
@
text
@d42 1
a42 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.8 2005/10/23 04:44:35 brlcad Exp $";
d260 3
a262 1
	    ip->idb_meth->ft_ifree(ip, resp);
@


14.8
log
@trailing ws
@
text
@d42 1
a42 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.7 2005/08/12 22:31:07 lbutler Exp $";
d254 9
a262 1
	RT_CK_FUNCTAB( ip->idb_meth );
d267 4
a270 2
		ip->idb_meth->ft_ifree(ip, resp);
		ip->idb_ptr = NULL;		/* sanity.  Should be handled by INIT, below */
a271 1
	if( ip->idb_avs.magic == BU_AVS_MAGIC )  bu_avs_free(&ip->idb_avs);
@


14.7
log
@Doxygen changes
@
text
@d32 1
a32 1
 *  
d37 1
a37 1
 *  
d42 1
a42 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.6 2005/01/30 20:30:58 brlcad Exp $";
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d37 1
a37 1
 *
d42 1
a42 1
static const char RCSdir[] = "@@(#)$Header$";
@


14.6
log
@update copyright to 2005
@
text
@d21 3
a24 1
 *
d39 2
d42 1
a42 1
static const char RCSdir[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/librt/dir.c,v 14.5 2004/12/21 06:38:20 morrison Exp $";
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2004 United States Government as represented by
d38 1
a38 1
static const char RCSdir[] = "@@(#)$Header: /cvs/brlcad/src/librt/dir.c,v 14.4 2004/12/21 06:18:45 morrison Exp $";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
d38 1
a38 1
static const char RCSdir[] = "@@(#)$Header: /cvs/brlcad/src/librt/dir.c,v 14.3 2004/12/21 05:45:23 morrison Exp $";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d41 1
a41 1
static const char RCSdir[] = "@@(#)$Header: /cvs/brlcad/src/librt/dir.c,v 14.2 2004/12/21 04:18:20 morrison Exp $";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d41 1
a41 1
static const char RCSdir[] = "@@(#)$Header: /cvs/brlcad/src/librt/dir.c,v 14.1 2004/11/16 19:42:16 morrison Exp $";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D I R . C
d41 1
a41 1
static const char RCSdir[] = "@@(#)$Header: /cvs/brlcad/src/librt/dir.c,v 1.2 2004/08/02 23:01:49 morrison Exp $";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d22 1
a22 1
static const char RCSdir[] = "@@(#)$Header: /cvs/brlcad/src/librt/dir.c,v 1.1 2004/05/20 15:19:59 morrison Exp $";
d286 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d22 1
a22 1
static const char RCSdir[] = "@@(#)$Header: /cvs/brlcad/librt/dir.c,v 11.43 2004/05/10 15:30:46 erikg Exp $";
d25 1
a25 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

