head	14.12;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	stable-branch:14.3
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.12
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.07.26.01.13.55;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.02.20.08.19.48;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.27.01.41.35;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.50;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.23.07.09.59;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.11.11.21.29.56;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.30.43;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.01.23.58;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.17;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.24;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.14;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.12
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@/*                        M A T _ D B . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file mat_db.c
	Author:		Gary S. Moss
*/
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.11 2007/07/26 01:13:55 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <math.h>
#include <assert.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "fb.h"

#include "./hmenu.h"
#include "./lgt.h"
#include "./extern.h"
#include "./vecmath.h"
#include "./mat_db.h"
#include "./screen.h"

static Mat_Db_Entry	mat_db_table[MAX_MAT_DB];
static int		mat_db_size = 0;
Mat_Db_Entry		mat_dfl_entry =
				{
				0,		/* Material id.		*/
				4,		/* Shininess.		*/
				0.6,		/* Specular weight.	*/
				0.4,		/* Diffuse weight.	*/
				0.0,		/* Reflectivity.	*/
				0.0,		/* Transmission.	*/
				1.0,		/* Refractive index.	*/
				{255, 255, 255},/* Diffuse RGB values.	*/
				MF_USED,	/* Mode flag.		*/
				"(default)"	/* Material name.	*/
				};
Mat_Db_Entry		mat_nul_entry =
				{
				0,		/* Material id.		*/
				0,		/* Shininess.		*/
				0.0,		/* Specular weight.	*/
				0.0,		/* Diffuse weight.	*/
				0.0,		/* Reflectivity.	*/
				0.0,		/* Transmission.	*/
				0.0,		/* Refractive index.	*/
				{0, 0, 0},	/* Diffuse RGB values.	*/
				MF_NULL,	/* Mode flag.		*/
				"(null)"	/* Material name.	*/
				};
static int	get_Mat_Entry(register Mat_Db_Entry *entry, FILE *fp), put_Mat_Entry(register Mat_Db_Entry *entry, register FILE *fp);

/*	m a t _ R d _ D b ( )
	Open material database and read entries into table,
	return number of entries successfully read.
 */
int
mat_Rd_Db(char *file)
{	register Mat_Db_Entry	*entry;
		register FILE		*fp;
	if( (fp = fopen( file, "r" )) == NULL )
		return	0;
	/* Mark all entries as NULL.					*/
	for( entry = mat_db_table; entry < &mat_db_table[MAX_MAT_DB]; entry++ )
		entry->mode_flag = MF_NULL;
	mat_db_size = 0;
	for(	entry = mat_db_table;
		entry < &mat_db_table[MAX_MAT_DB]
	     && get_Mat_Entry( entry, fp );
		++entry
		)
		mat_db_size++;
	(void) fclose( fp );
	return	mat_db_size;
	}

/*	m a t _ P r i n t _ D b ( )
	Print material database entry.
 */
int
mat_Print_Db(int material_id)
{	register Mat_Db_Entry	*entry;
		register int		stop;
		register int		success = 0;
		int			lines =	(PROMPT_LINE-TOP_SCROLL_WIN);
	if( material_id >= MAX_MAT_DB )
		{
		bu_log( "Material data base only has %d entries.\n",
			MAX_MAT_DB
			);
		bu_log( "If this is not enough, notify the support staff.\n" );
		return	success;
		}
	else
	if( material_id < 0 )
		{
		stop = MAX_MAT_DB - 1;
		material_id = 0;
		}
	else
		stop = material_id;
	for( ; material_id <= stop; material_id++, lines-- )
		{
		entry = &mat_db_table[material_id];
		if( entry->mode_flag == MF_NULL )
			continue;
		success = 1;
		if( lines <= 0 && ! do_More( &lines ) )
			break;
		prnt_Scroll( "\n" );
		if( --lines <= 0 && ! do_More( &lines ) )
			break;
		prnt_Scroll( "MATERIAL [%d] %s\n",
				material_id,
				entry->name[0] == '\0' ? "(untitled)" : entry->name
				);
		if( --lines <= 0 && ! do_More( &lines ) )
			break;
		prnt_Scroll( "        shininess\t\t(%d)\n", entry->shine );
		if( --lines <= 0 && ! do_More( &lines ) )
			break;
		prnt_Scroll( "        specular weight\t\t(%g)\n", entry->wgt_specular );
		if( --lines <= 0 && ! do_More( &lines ) )
			break;
		prnt_Scroll( "        diffuse weight\t\t(%g)\n", entry->wgt_diffuse );
		if( --lines <= 0 && ! do_More( &lines ) )
			break;
		prnt_Scroll( "        transparency\t\t(%g)\n", entry->transparency );
		if( --lines <= 0 && ! do_More( &lines ) )
			break;
		prnt_Scroll( "        reflectivity\t\t(%g)\n", entry->reflectivity );
		if( --lines <= 0 && ! do_More( &lines ) )
			break;
		prnt_Scroll( "        refractive index\t(%g)\n", entry->refrac_index );
		if( --lines <= 0 && ! do_More( &lines ) )
			break;
		if( strncmp( TEX_KEYWORD, entry->name, TEX_KEYLEN ) != 0 )
			prnt_Scroll( "        diffuse color\t\t(%d %d %d)\n",
					entry->df_rgb[0],
					entry->df_rgb[1],
					entry->df_rgb[2]
					);
		else
			prnt_Scroll( "        texture map : width=%d height=%d\n",
					entry->df_rgb[0] << 3,
					entry->df_rgb[1] << 3
					);
		}
	return	success;
	}

/*	m a t _ S a v e _ D b ( )
	Write ASCII material database from table.
	Return 1 for success, 0 for failure.
 */
int
mat_Save_Db(char *file)
{	register Mat_Db_Entry	*entry;
		register FILE		*fp;
	if( (fp = fopen( file, "w" )) == NULL )
		return	0;
	setbuf( fp, bu_malloc( BUFSIZ, "buffer" ) );
	for(	entry = mat_db_table;
		entry < &mat_db_table[mat_db_size]
	     && put_Mat_Entry( entry, fp );
		++entry
		)
		;
	(void) fclose( fp );
	if( entry != &mat_db_table[mat_db_size] )
		return	0;
	return	1;
	}


/*	m a t _ E d i t _ D b _ E n t r y ( )
	Create or overwrite entry in material table.
 */
int
mat_Edit_Db_Entry(int id)
{	register Mat_Db_Entry	*entry;
		char			input_buf[MAX_LN];
		char			prompt[MAX_LN];
		int			red, grn, blu;
	if( id < 0 )
		return	-1;
	if( id < MAX_MAT_DB )
		{
		entry = &mat_db_table[id];
		entry->id = id;
		}
	else
		{
		bu_log( "Material table full, MAX_DB_ENTRY too small.\n" );
		return	0;
		}
	(void) snprintf( prompt, MAX_LN, "material name ? (%s) ", entry->name );
	if( get_Input( input_buf, MAX_LN, prompt ) != NULL )
		(void) strncpy( entry->name, input_buf, MAX_MAT_NM );
	(void) sprintf( prompt, "shine ? [1 to n](%d) ", entry->shine );
	if( get_Input( input_buf, MAX_LN, prompt ) != NULL )
		(void) sscanf( input_buf, "%d", &entry->shine );
	(void) sprintf( prompt, "specular weighting ? [0.0 to 1.0](%g) ",
			entry->wgt_specular );
	if( get_Input( input_buf, MAX_LN, prompt  ) != NULL )
		(void) sscanf( input_buf, "%lf", &entry->wgt_specular );
	(void) sprintf( prompt, "diffuse weighting ? [0.0 to 1.0](%g) ",
			entry->wgt_diffuse );
	if( get_Input( input_buf, MAX_LN, prompt ) != NULL )
		(void) sscanf( input_buf, "%lf", &entry->wgt_diffuse );
	(void) sprintf( prompt, "transparency ? [0.0 to 1.0](%g) ",
			entry->transparency );
	if( get_Input( input_buf, MAX_LN, prompt ) != NULL )
		(void) sscanf( input_buf, "%lf", &entry->transparency );
	(void) sprintf( prompt, "reflectivity ? [0.0 to 1.0](%g) ",
			entry->reflectivity );
	if( get_Input( input_buf, MAX_LN, prompt ) != NULL )
		(void) sscanf( input_buf, "%lf", &entry->reflectivity );
	(void) sprintf( prompt, "refractive index ? [0.9 to 5.0](%g) ",
			entry->refrac_index );
	if( get_Input( input_buf, MAX_LN, prompt ) != NULL )
		(void) sscanf( input_buf, "%lf", &entry->refrac_index );

	if( strncmp( TEX_KEYWORD, entry->name, TEX_KEYLEN ) != 0 )
		{
		(void) sprintf( prompt, "diffuse RGB values ? [0 to 255](%d %d %d) ",
				entry->df_rgb[RED],
				entry->df_rgb[GRN],
				entry->df_rgb[BLU]
				);
		if(	get_Input( input_buf, MAX_LN, prompt ) != NULL
		     &&	sscanf( input_buf, "%d %d %d", &red, &grn, &blu ) == 3
			)
			{
			entry->df_rgb[0] = red;
			entry->df_rgb[1] = grn;
			entry->df_rgb[2] = blu;
			}
		}
	else
		{
		(void) sprintf( prompt, "texture : width and height? [0 to 1024](%d %d) ",
				entry->df_rgb[0]<<3,
				entry->df_rgb[1]<<3
				);
		if(	get_Input( input_buf, MAX_LN, prompt ) != NULL
		    &&	sscanf( input_buf, "%d %d", &red, &grn ) == 2
			)
			{
			entry->df_rgb[0] = red >> 3;
			entry->df_rgb[1] = grn >> 3;
			}
		}
	entry->mode_flag = MF_USED;
	mat_db_size = Max( mat_db_size, id+1 );
	return	1;
	}

/*	m a t _ G e t _ D b _ E n t r y ( )
	Return pointer to entry indexed by id or NULL.
 */
Mat_Db_Entry *
mat_Get_Db_Entry(int id)
{
	if( id < 0 )
		return	MAT_DB_NULL;
	if( id < mat_db_size )
		return	&mat_db_table[id];
	else
		return	MAT_DB_NULL;
	}

static int
get_Mat_Entry(register Mat_Db_Entry *entry, FILE *fp)
{	register char	*ptr;
		int		items;
		int		red, grn, blu, mode;
	if( bu_fgets( entry->name, MAX_MAT_NM, fp ) == NULL )
		return	0;
	ptr = &entry->name[strlen(entry->name) - 1];
	if( *ptr == '\n' )
		/* Read entire line.					*/
		*ptr = '\0';
	else	/* Skip rest of line.					*/
		while( getc( fp ) != '\n' )
			;
	if( (items = fscanf( fp, "%d %d", &entry->id, &entry->shine )) != 2 )
		{
		(void) fprintf( stderr, "Could not read integers (%d read)!\n", items );
		return	0;
		}
	if(	fscanf(	fp,
			"%lf %lf %lf %lf %lf",
			&entry->wgt_specular,
			&entry->wgt_diffuse,
			&entry->transparency,
			&entry->reflectivity,
			&entry->refrac_index
			) != 5
		)
		{
		(void) fprintf( stderr, "Could not read floats!\n" );
		return	0;
		}
	if( fscanf( fp, "%d %d %d", &red, &grn, &blu ) != 3 )
		{
		(void) fprintf( stderr, "Could not read chars!\n" );
		return	0;
		}
	entry->df_rgb[0] = red;
	entry->df_rgb[1] = grn;
	entry->df_rgb[2] = blu;
	if( fscanf( fp, "%d", &mode ) != 1 )
		{
		(void) fprintf( stderr,
				"get_Mat_Entry(): Could not read mode_flag!\n"
				);
		return	0;
		}
	entry->mode_flag = mode;
	while( getc( fp ) != '\n' )
		; /* Gobble rest of line.				*/
	return	1;
	}

static int
put_Mat_Entry(register Mat_Db_Entry *entry, register FILE *fp)
{
	if( entry->mode_flag == MF_NULL )
		entry = &mat_nul_entry;
	(void) fprintf( fp, "%s\n", entry->name );
	(void) fprintf( fp, "%d\n%d\n", entry->id, entry->shine );
	(void) fprintf(	fp,
			"%f\n%f\n%f\n%f\n%f\n",
			entry->wgt_specular,
			entry->wgt_diffuse,
			entry->transparency,
			entry->reflectivity,
			entry->refrac_index
			);
	(void) fprintf(	fp,
			"%u %u %u\n",
			(unsigned) entry->df_rgb[0],
			(unsigned) entry->df_rgb[1],
			(unsigned) entry->df_rgb[2]
			);
	(void) fprintf( fp, "%u\n", (unsigned) entry->mode_flag );
	return	1;
	}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.10 2007/02/20 08:19:48 brlcad Exp $ (BRL)";
d219 1
a219 1
	(void) sprintf( prompt, "material name ? (%s) ", entry->name );
@


14.10
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@a21 4
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066
			(301)278-6647 or AV-298-6647
d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.9 2007/01/27 01:41:35 brlcad Exp $ (BRL)";
@


14.9
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.8 2007/01/23 01:13:33 brlcad Exp $ (BRL)";
d304 1
a304 1
	if( fgets( entry->name, MAX_MAT_NM, fp ) == NULL )
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.7 2007/01/20 14:36:50 brlcad Exp $ (BRL)";
d273 1
a273 1
	 	    &&	sscanf( input_buf, "%d %d", &red, &grn ) == 2
@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.6 2006/01/23 07:09:59 brlcad Exp $ (BRL)";
@


14.6
log
@libbu for memory management
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.5 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
@


14.5
log
@update copyright to 2006
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.4 2005/11/11 21:29:56 brlcad Exp $ (BRL)";
a33 2


d42 1
d189 1
a189 1
	setbuf( fp, malloc( BUFSIZ ) );
@


14.4
log
@convert STATIC to static and obliterate the NDEBUG hacks now that it's consistent provided throughout the package via configure
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.3 2005/01/30 20:30:43 brlcad Exp $ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/mat_db.c,v 14.2 2004/12/21 01:23:58 morrison Exp $ (BRL)";
d79 1
a79 1
STATIC int	get_Mat_Entry(register Mat_Db_Entry *entry, FILE *fp), put_Mat_Entry(register Mat_Db_Entry *entry, register FILE *fp);
d301 1
a301 1
STATIC int
d354 1
a354 1
STATIC int
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d79 1
a79 1
static int	get_Mat_Entry(register Mat_Db_Entry *entry, FILE *fp), put_Mat_Entry(register Mat_Db_Entry *entry, register FILE *fp);
d301 1
a301 1
static int
d354 1
a354 1
static int
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/mat_db.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/mat_db.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/mat_db.c,v 1.2 2004/06/08 22:04:17 morrison Exp $ (BRL)";
d358 10
@


1.2
log
@obliterate externs.h
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d12 1
a12 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/lgt/mat_db.c,v 11.8 2004/05/10 15:30:43 erikg Exp $ (BRL)";
a22 1
#include "externs.h"
@

