head	14.14;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.3
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.6
	rel-7-0-branch:1.6.0.2
	rel-7-0:1.6;
locks; strict;
comment	@ * @;


14.14
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.09.15.16.23.07;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.07.26.01.13.55;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.27.01.41.35;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.50;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.04.05.19.19.14;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.23.07.11.13;	author brlcad;	state Exp;
branches
	14.7.2.1;
next	14.6;

14.6
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.11.11.21.29.56;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.31;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.30.42;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.01.23.58;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.15.04.56.52;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.09.02.08.26;	author kermit;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.57;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.17;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.24;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.14;	author brlcad;	state Exp;
branches;
next	;

14.7.2.1
date	2006.04.07.19.30.14;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.14
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@/*                         H M E N U . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file hmenu.c
	Authors:	Gary S. Moss
			Douglas A. Gwyn

	This code is derived in part from menuhit(9.3) in AT&T 9th Edition UNIX,
		Version 1 Programmer's Manual.
*/
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.13 2007/09/15 16:23:07 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "fb.h"

#include "./hmenu.h"
#include "./lgt.h"
#include "./extern.h"


extern int	LI, CO;
#define MAX_PROMPT	10
#define Alloc(p_,t_,s_) (p_) = (t_ *) bu_malloc((unsigned)(s_), #p_);

#ifndef Max
#  define Max(_a,_b)	((_a)<(_b)?(_b):(_a))
#  define Min(_a,_b)	((_a)>(_b)?(_b):(_a))
#endif
#define ring_Bell()	putchar( '\07' ),  (void) fflush( stdout )
#define M_UP		'u'
#define M_DOWN		'd'
#define M_HELP		'h'
#define M_SELECT	' '
#define M_RETURN	'\r'
#define M_NOSELECT	'q'

#define P_OFF		(0)
#define P_ON		(1)
#define P_FORCE		(1<<1)

#define  PutMenuChar(_c,_co,_ro,_map,_bit)\
		{	static int	lro = -1, lco = -1;\
		if( (_map) & (_bit) || (_bit) == 0 )\
			{\
			if( lco++ != (_co)-1 || lro != (_ro) )\
				{\
				MvCursor( _co, _ro );\
				lco = _co;\
				}\
			putchar( (_c) );\
			}\
		(_bit) <<= 1;\
		(_co)++;\
		}


int		hm_dirty = 0;
static HWindow	*windows = 0;

#define ENTRY	(itemp-win->menup->item)
typedef struct nmllist HMllist;
struct nmllist
	{
	HMitem	*itemp;
	HMllist	*next;
	};

static void
prnt_HMitem(HMitem *itemp)
{
	if( itemp->text == NULL )
		return;
	(void) fprintf( stderr, "text=\"%s\"\n", itemp->text );
	(void) fprintf( stderr, "help=\"%s\"\n", itemp->help == NULL ? "(null)" : itemp->help );
	(void) fprintf( stderr, "next=0x%lx\n", (unsigned long int)itemp->next );
#ifndef sgi
	(void) fprintf( stderr, "dfn=0x%lx\n", (unsigned long int)itemp->dfn );
	(void) fprintf( stderr, "bfn=0x%lx\n", (unsigned long int)itemp->bfn );
#endif
	(void) fprintf( stderr, "hfn=0x%lx\n", (unsigned long int)itemp->hfn );
	(void) fprintf( stderr, "data=%ld\n--\n", itemp->data );
	return;
	}

static void
prnt_HMllist(HMllist *listp)
{
	if( listp == (HMllist *) 0 )
		return;
	prnt_HMitem( listp->itemp );
	prnt_HMllist( listp->next );
	return;
	}

static void
free_HMitems(HMitem *itemp)
{	register HMitem	*citemp;
	for( citemp = itemp; citemp->text != NULL; citemp++ )
		{
		free( citemp->text );
		if( citemp->help != NULL )
			free( citemp->help );
		}
	free( (char *) itemp );
	return;
	}

static void
free_HMllist(HMllist *listp)
{
	if( listp == (HMllist *) 0 )
		return;
	free_HMllist( listp->next );
	free( (char *) listp->itemp );
	free( (char *) listp );
	return;
	}

static void
hm_Put_Item(register HWindow *win, register HMitem *itemp, int flag)
{	register int	label_len = strlen( itemp->text );
			static char	buf[MAXLINE];
			register char	*p = buf;
			register int	col = win->menux;
			register int	row = win->menuy+(ENTRY-win->menup->prevtop)+1;
			register int	width = win->width;
			register int	bitmap = flag & P_FORCE ?
						~0 : win->dirty[ENTRY+1];
			register int	bit = 1;
			register int	writemask = 0;
		if( bitmap == 0 )
			return;

		/* Pad text on left.					*/
		if( itemp->text[0] & 0200 )	/* right-justified */
			{	register int	i;
			for( i = 0; i < width - label_len; i++ )
				*p++ = ' ';
			for( i = 1; itemp->text[i] != '\0'; i++ )
				*p++ = itemp->text[i];
			}
		else				/* left-justified */
		if( itemp->text[label_len-1] & 0200 )
			{	register int	i;
			for( i = 0; !(itemp->text[i] & 0200); i++ )
				*p++ = itemp->text[i];
			for( ; i < width; i++ )
				*p++ = ' ';
			}
		else				/* centered */
			{	register int	i, j;
			for( i = 0; i < (width - label_len + 1)/2; i++ )
				*p++ = ' ';
			for( j = 0; itemp->text[j] != '\0'; j++ )
				*p++ = itemp->text[j];
			for( i += j; i < width; i++ )
				*p++ = ' ';
			}
		*p = '\0';

		PutMenuChar( '|', col, row, bitmap, bit );
		if( flag & P_ON )
			(void) SetStandout();
		else
			(void) ClrStandout();

		/* Optimized printing of entry.				*/
		{
		if( bitmap == ~0 )
			{
			(void) fputs( buf, stdout );
			col += p-buf;
			bit <<= p-buf;
			}
		else
			{	register int	i;
			for( i = 0; i < p-buf; i++ )
				writemask |= 1<<(i+1);
			for( i = 0; i < p-buf; i++ )
				{
				if( (bitmap & writemask) == writemask )
					break;
				writemask &= ~bit;
				PutMenuChar( buf[i], col, row, bitmap, bit );
				}
			if( i < p-buf )
				{
				MvCursor( col, row );
				(void) fputs( &buf[i], stdout );
				col += (p-buf) - i;
				bit <<= (p-buf) - i;
				}
			}
		}

		if( flag & P_ON )
			(void) ClrStandout();
		PutMenuChar( '|', col, row, bitmap, bit );
		return;
		}

static void
hm_Put_Border(register HWindow *win, register int row, char mark)
{	register int	i;
		register int	bit = 1;
		register int	col = win->menux;
		register int	bitmap = win->dirty[row - win->menuy];
		static char	buf[MAXLINE];
		register char	*p = buf;
	*p++ = mark;
	for( i = 0; i < win->width; i++ )
		*p++ = '-';
	*p++ = mark;
	*p = '\0';
	if( bitmap == ~0 )
		{
		MvCursor( col, row );
		(void) fputs( buf, stdout );
		}
	else
	for( i = 0; i < p - buf; i++ )
		PutMenuChar( buf[i], col, row, bitmap, bit );
	return;
	}

static void
hm_Setbit(register HWindow *win, int col, int row)
{	register int	bit = col - win->menux;
	win->dirty[row-(win->menuy-win->menup->prevtop)] |= bit == 0 ? 1 : 1 << bit;
	return;
	}

static void
hm_Clrmap(HWindow *win)
{	register int	row;
	for( row = 0; row <= win->height+1; row++ )
		win->dirty[row] = 0;
	return;
	}

static void
hm_Setmap(HWindow *win)
{	register int	row;
	for( row = 0; row <= win->height+1; row++ )
		win->dirty[row] = ~0; /* 0xffff... */
	return;
	}

static HWindow	*
hm_In_Win(register int x, register int y, register HWindow *win)
{
	for( ; win != (HWindow *) 0; win = win->next )
		{	register int	height = Min( win->height, MAXVISABLE );
		if( !	(x < win->menux || x > win->menux + win->width + 1 ||
			y < win->menuy || y > win->menuy + height + 1)
			)
			return	win;
		}
	return	(HWindow *) 0;
	}

static void
hm_Draw_Win(register HWindow *win)
{	register HMitem	*itemp;
		int	height;
	hm_Put_Border( win, win->menuy, win->menup->prevtop > 0 ? '^' : '+' );
	for(	itemp = win->menup->item + win->menup->prevtop;
		ENTRY-win->menup->prevtop < MAXVISABLE && itemp->text != NULL;
		itemp++
		)
		hm_Put_Item(	win, itemp,
				ENTRY == win->menup->prevhit ? P_ON : P_OFF
				);
	height = Min( MAXVISABLE, win->height );
	hm_Put_Border( win, win->menuy+height+1, ENTRY < win->height ? 'v' : '+' );
	hm_Clrmap( win );
	(void) fflush( stdout );
	return;
	}

static void
hm_Redraw_Win(HWindow *win)
{
	if( win == (HWindow *) 0 )
		{
		hm_dirty = 0;
		return;
		}
	hm_Redraw_Win( win->next );
	hm_Draw_Win( win );
	return;
	}

static void
hm_Help(register HWindow *win, int entry)
{	int	bottomline = 1;
		register HWindow	*curwin;
	for( curwin = windows; curwin != (HWindow *) 0; curwin = curwin->next )
		{
		if( curwin->height > MAXVISABLE )
			{
			bottomline = curwin->menuy + MAXVISABLE + 1;
			break;
			}
		bottomline = Max( bottomline, curwin->menuy + curwin->height + 1 );
		}
	MvCursor( 0, bottomline+1 );
	(void) ClrEOL();
	(void) SetStandout();
	(void) printf( "%s", win->menup->item[entry].help );
	(void) ClrStandout();
	(void) fflush( stdout );
	(void) hm_ungetchar( hm_getchar() );
	MvCursor( 0, bottomline+1 );
	(void) ClrEOL();
	return;
	}

static void
hm_Lift_Win(register HWindow *win)
{	register int	row, col;
		register int	lastcol = -1, lastrow = -1;
		register int	endcol = win->menux + win->width + 2;
		register int	endrow = win->menuy +
				  Min( win->height, MAXVISABLE ) + 2;
	for( row = win->menuy; row < endrow; row++ )
		{
		for( col = win->menux; col < endcol; col++ )
			{	register HWindow	*olwin;
			if( (olwin = hm_In_Win( col, row, win->next ))
				== (HWindow *) 0
				)
				{
				if( lastcol != col-1 || lastrow != row )
					MvCursor( col, row );
				lastcol = col; lastrow = row;
				putchar( ' ' );
				}
			else
				{
				hm_Setbit( olwin, col, row );
				hm_dirty = 1;
				}
			}
		}
	(void) fflush( stdout );
	return;
	}

void
hmredraw(void)
{	register HWindow	*win;
	for( win = windows; win != (HWindow *) 0; win = win->next )
		hm_Setmap( win );
	hm_dirty = 1;
	return;
	}

HMitem *
hmenuhit(HMenu *menup, int menux, int menuy)
				/* -> first HMitem in array.		*/

	{	register HMitem	*itemp;
		HMitem		*retitemp = 0;
		HWindow		*win;
		register int	done = 0;
		int		dynamic = 0;
		static int	hmlevel = 0;

	if( ++hmlevel == 1 )
		{
		save_Tty( 0 );
		set_Cbreak( 0 );
		clr_Echo( 0 );
		}

	/* If generator function is provided, dynamically allocate the
		menu items.
	 */
	if( (dynamic = (menup->item == (HMitem *) 0)) )
		{	register int	i;
			register HMitem	*gitemp;
			HMllist	llhead, **listp;
		for(	i = 0, listp = &llhead.next;
			;
			i++, listp = &(*listp)->next
			)
			{
			Alloc( *listp, HMllist, sizeof(HMllist) );
			Alloc( (*listp)->itemp, HMitem, sizeof(HMitem) );
			itemp = (*listp)->itemp;
			if( (gitemp = (*menup->generator)( i )) == (HMitem *) 0 )
				{
				itemp->text = NULL;
				(*listp)->next = 0;
				break;
				}
			if( gitemp->text != NULL )
				{
				    size_t len = strlen( gitemp->text ) + 1;
				    Alloc(itemp->text, char, len);
				    (void) strncpy( itemp->text, gitemp->text, len );
				}
			else
				itemp->text = NULL;
			if( gitemp->help != NULL )
				{
				    size_t len = strlen( gitemp->help ) + 1;
				    Alloc( itemp->help, char, len);
				    (void) strncpy( itemp->help, gitemp->help, len );
				}
			else
				itemp->help = NULL;
			itemp->next = gitemp->next;
			itemp->dfn = gitemp->dfn;
			itemp->bfn = gitemp->bfn;
			itemp->hfn = gitemp->hfn;
			itemp->data = gitemp->data;
			}
		/*prnt_HMllist( llhead.next );*/

		/* Steal the field that the user isn't using temporarily to
			emmulate the static allocation of menu items.
		 */
		if( i > 0 )
			{
			Alloc( menup->item, HMitem, (i+1)*sizeof(HMitem) );
			for(	i = 0, listp = &llhead.next;
				(*listp) != (HMllist *) 0;
				i++,   listp = &(*listp)->next
				)
				menup->item[i] = *(*listp)->itemp;
			}
		free_HMllist( llhead.next );
		if( i == 0 ) /* Zero items, so return NULL */
			{
			if( hmlevel-- == 1 )
				reset_Tty( 0 );
				return	(HMitem *) 0;
			}
		}
	Alloc( win, HWindow, sizeof(HWindow) );
	win->menup = menup;
	win->width = 0;
	win->next = windows;
	windows = win;

	/* Determine width of menu, allowing for border.		*/
	for( itemp = menup->item; itemp->text != NULL; itemp++ )
		{	register int	len = 0;
			register int	i;
		for( i = 0; itemp->text[i] != '\0' ; i++ )
			if( ! (itemp->text[i] & 0200) )
				len++;
		win->width = Max( win->width, len );
		}
	win->height = ENTRY;

	/* Determine origin (top-left corner) of menu.			*/
	if( win->next != (HWindow *) 0 )
		{
		win->menux = win->next->menux + win->next->width + 2;
		win->menuy = win->next->menuy;
		if( win->menux + win->width + 2 > CO )
			{ /* Wrap-around screen. */
			win->menux = menux += 2;
			win->menuy = menuy += 2;
			}
		}
	else /* Top-level menu. */
		{
		win->menux = menux;
		win->menuy = menuy;
		}
	if( menup->prevhit < 0 || menup->prevhit >= win->height )
		menup->prevhit = 0;
	itemp = &menup->item[menup->prevhit];

	Alloc( win->dirty, int, (win->height+2)*sizeof(int) );
	hm_Setmap( win );
	hm_Draw_Win( win );
	while( ! done )
		{
		if( hm_dirty )
			hm_Redraw_Win( windows );
		MvCursor( win->menux+win->width+2, win->menuy+(ENTRY-win->menup->prevtop)+1 );
		(void) fflush( stdout );
		switch( hm_getchar() )
			{
		case M_UP :
			if( ENTRY == 0 )
				ring_Bell();
			else
				{
				hm_Put_Item( win, itemp, P_OFF | P_FORCE );
				itemp--;
				menup->prevhit = ENTRY;
				if( ENTRY < win->menup->prevtop )
					{
					win->menup->prevtop -=
						ENTRY > MAXVISABLE/2 ?
						MAXVISABLE/2 : ENTRY;
					win->menup->prevtop--;
					hm_Setmap( win );
					hm_Draw_Win( win );
					}
				else
					hm_Put_Item( win, itemp, P_ON | P_FORCE );
				}
			break;
		case M_DOWN :
			if( ENTRY >= win->height-1 )
				ring_Bell();
			else
				{
				hm_Put_Item( win, itemp, P_OFF | P_FORCE );
				itemp++;
				menup->prevhit = ENTRY;
				if( ENTRY - win->menup->prevtop >= MAXVISABLE )
					{
					win->menup->prevtop +=
						win->height-ENTRY > MAXVISABLE/2 ?
						MAXVISABLE/2 : win->height-ENTRY;
					hm_Setmap( win );
					hm_Draw_Win( win );
					}
				else
					hm_Put_Item( win, itemp, P_ON | P_FORCE );
				}
			break;
		case '?' :
		case M_HELP :
			hm_Help( win, (int)ENTRY );
			break;
		case M_SELECT :
		case M_RETURN :
			if( itemp->next != (HMenu *) 0 )
				{	HMitem	*subitemp;
				if( itemp->dfn != (void (*)()) 0 )
					(*itemp->dfn)( itemp );
				subitemp = hmenuhit( itemp->next, menux, menuy );
				if( itemp->bfn != (void (*)()) 0 )
					(*itemp->bfn)( itemp );
				if( subitemp != (HMitem *) 0 )
					{
					retitemp = subitemp;
					done = !menup->sticky;
					}
				}
			else
				{	int	level = hmlevel;
				retitemp = itemp;
				if( itemp->hfn != (int (*)()) 0 )
					{
					reset_Tty( 0 );
					hmlevel = 0;
					retitemp->data = (*itemp->hfn)( itemp, (char **) NULL );
					hmlevel = level;
					set_Cbreak( 0 );
					clr_Echo( 0 );
					}
				done = ! menup->sticky;
				if( menup->func != (void (*)()) 0 )
					{
					reset_Tty( 0 );
					hmlevel = 0;
					(*menup->func)();
					hmlevel = level;
					set_Cbreak( 0 );
					clr_Echo( 0 );
					}
				}
			break;
		case M_NOSELECT :
			done = 1;
			break;
		default :
			MvCursor( 1, LI-1 );
			(void) fflush( stdout );
			prnt_Scroll( "Type 'd' down, 'u' up, 'h' help, <space> to select, 'q' no selection." );
			break;
			}
		(void) fflush( stdout );
		}
	/* Free storage of dynamic menu.				*/
	if( dynamic )
		{
		free_HMitems( menup->item );
		menup->item = 0;
		}
	hm_Lift_Win( win );
	windows = win->next;
	free( (char *) win->dirty );
	free( (char *) win );
	if( hmlevel-- == 1 )
		reset_Tty( 0 );
	return	retitemp;
	}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.12 2007/07/26 01:13:55 brlcad Exp $ (BRL)";
d427 3
a429 2
				Alloc( itemp->text, char, strlen( gitemp->text ) + 1 );
				(void) strcpy( itemp->text, gitemp->text );
d435 3
a437 2
				Alloc( itemp->help, char, strlen( gitemp->help ) + 1 );
				(void) strcpy( itemp->help, gitemp->help );
@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.11 2007/01/27 01:41:35 brlcad Exp $ (BRL)";
d36 1
a36 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a20 5
	SCCS id:	%Z% %M%	%I%
	Modified: 	%G% at %U%
	Retrieved: 	%H% at %T%
	SCCS archive:	%P%

a22 4
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066
			(301)278-6647 or AV-298-6647
a25 1

d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.10 2007/01/23 01:13:33 brlcad Exp $ (BRL)";
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.9 2007/01/20 14:36:50 brlcad Exp $ (BRL)";
d204 1
a204 1
		 	(void) SetStandout();
d402 1
a402 1
     	       			/* -> first HMitem in array.		*/
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.8 2006/04/05 19:19:14 brlcad Exp $ (BRL)";
@


14.8
log
@more header/warning cleanup from Intel compiler warnings on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.7 2006/01/23 07:11:13 brlcad Exp $ (BRL)";
@


14.7
log
@use bu_malloc
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.6 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
d44 1
d46 1
a51 1
#include <assert.h>
@


14.7.2.1
log
@update from HEAD
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.7 2006/01/23 07:11:13 brlcad Exp $ (BRL)";
a43 1
#include <stdlib.h>
a44 1
#include <assert.h>
d50 1
@


14.6
log
@update copyright to 2006
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.5 2005/11/11 21:29:56 brlcad Exp $ (BRL)";
d64 2
a65 7
#define Alloc(p_,t_,s_)\
		if( ((p_) = (t_ *) malloc((unsigned)(s_))) == (t_ *) 0 )\
		{\
		(void) fprintf( stderr, "\"%s\"(%d): Alloc of %ld bytes failed.\n",\
				__FILE__, __LINE__, (long int)s_ );\
		exit( 1 );\
		} else	 ;
d67 2
a68 2
#define Max(_a,_b)	((_a)<(_b)?(_b):(_a))
#define Min(_a,_b)	((_a)>(_b)?(_b):(_a))
@


14.5
log
@convert STATIC to static and obliterate the NDEBUG hacks now that it's consistent provided throughout the package via configure
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.4 2005/10/23 04:44:31 brlcad Exp $ (BRL)";
@


14.4
log
@trailing ws
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.3 2005/01/30 20:30:42 brlcad Exp $ (BRL)";
a62 3
#ifndef STATIC
#define STATIC static
#endif
d114 1
a114 1
STATIC void
d131 1
a131 1
STATIC void
d141 1
a141 1
STATIC void
d154 1
a154 1
STATIC void
d165 1
a165 1
STATIC void
d248 1
a248 1
STATIC void
d272 1
a272 1
STATIC void
d279 1
a279 1
STATIC void
d287 1
a287 1
STATIC void
d295 1
a295 1
STATIC HWindow	*
d308 1
a308 1
STATIC void
d327 1
a327 1
STATIC void
d340 1
a340 1
STATIC void
d365 1
a365 1
STATIC void
@


14.3
log
@update copyright to 2005
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/hmenu.c,v 14.2 2004/12/21 01:23:58 morrison Exp $ (BRL)";
d259 1
a259 1
	*p++ = mark; 
d411 1
a411 1
   	             
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d39 1
a39 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d63 3
d117 1
a117 1
static void
d134 1
a134 1
static void
d144 1
a144 1
static void
d157 1
a157 1
static void
d168 1
a168 1
static void
d251 1
a251 1
static void
d259 1
a259 1
	*p++ = mark;
d275 1
a275 1
static void
d282 1
a282 1
static void
d290 1
a290 1
static void
d298 1
a298 1
static HWindow	*
d311 1
a311 1
static void
d330 1
a330 1
static void
d343 1
a343 1
static void
d368 1
a368 1
static void
d411 1
a411 1

@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/hmenu.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/hmenu.c,v 1.6 2004/09/15 04:56:52 morrison Exp $ (BRL)";
@


1.6
log
@%X just prints a captial X .. instead of checking a runtime size, using a long unformated hexadecimal will work for printing the value (from ia64 quelling)
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/hmenu.c,v 1.5 2004/09/09 02:08:26 kermit Exp $ (BRL)";
d626 10
@


1.5
log
@Quell function pointer address to integer cast via runtime size check (need
to verify this works, from IA64 port).
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/hmenu.c,v 1.4 2004/09/03 23:30:57 morrison Exp $ (BRL)";
a23 2


d26 1
a26 1
#include <string.h>
d28 1
a28 1
#include <strings.h>
d36 1
d40 2
d104 1
a104 1
	(void) fprintf( stderr, "next=0x%lx\n", (long unsigned int)itemp->next );
d106 2
a107 7
	if (sizeof(itemp->dfn) > sizeof(unsigned int)) {
		(void) fprintf( stderr, "dfn=0x%X\n", itemp->dfn );
		(void) fprintf( stderr, "bfn=0x%X\n", itemp->bfn );
	} else {
		(void) fprintf( stderr, "dfn=0x%x\n", itemp->dfn );
		(void) fprintf( stderr, "bfn=0x%x\n", itemp->bfn );
	}
d109 1
a109 1
	(void) fprintf( stderr, "hfn=0x%lx\n", (long unsigned int)itemp->hfn );
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/hmenu.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (BRL)";
d105 7
a111 2
	(void) fprintf( stderr, "dfn=0x%x\n", (unsigned int)itemp->dfn );
	(void) fprintf( stderr, "bfn=0x%x\n", (unsigned int)itemp->bfn );
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/hmenu.c,v 1.2 2004/06/08 22:04:17 morrison Exp $ (BRL)";
d27 1
a27 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/lgt/hmenu.c,v 11.10 2004/05/10 15:30:43 erikg Exp $ (BRL)";
a36 1
#include "externs.h"
@

