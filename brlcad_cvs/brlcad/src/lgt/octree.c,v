head	14.11;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	stable-branch:14.3
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.11
date	2007.07.26.01.13.55;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.27.01.41.35;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.36.50;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.23.07.11.02;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.11.11.21.29.56;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.31;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.30.43;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.01.23.58;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.17;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.25;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.14;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@/*                        O C T R E E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file octree.c
	Author:		Gary S. Moss
*/
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.10 2007/01/27 01:41:35 brlcad Exp $ (BRL)";
#endif
/*
	Originally extracted from SCCS archive:
		SCCS id:	@@(#) octree.c	2.1
		Modified: 	12/10/86 at 16:03:58	G S M
		Retrieved: 	2/4/87 at 08:53:45
		SCCS archive:	/vld/moss/src/lgt/s.octree.c
*/

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "fb.h"

#include "./hmenu.h"
#include "./lgt.h"
#include "./extern.h"
#include "./vecmath.h"
#include "./tree.h"


/* Error incurred while converting from double to float and back.	*/
#define F2D_EPSILON	1.0e-1
#define SamePoint( p, q, e ) \
		(	Abs((p)[X]-(q)[X]) < (e) \
		    &&	Abs((p)[Y]-(q)[Y]) < (e) \
		    &&	Abs((p)[Z]-(q)[Z]) < (e) \
		)
#define NewPoint( p ) \
		(((p) = (PtList *) malloc(sizeof(PtList))) != PTLIST_NULL)
#define NewOctree( p ) \
		(((p) = (Octree *) malloc(sizeof(Octree))) != OCTREE_NULL)
static int	subdivide_Octree(register Octree *parentp, int level);

Octree	*
new_Octant(Octree *parentp, Octree **childpp, int bitv, int level)
{	register Octree	*childp;
		fastf_t	delta = modl_radius / pow_Of_2( level );
		register float	*origin = parentp->o_points->c_point;
	/* Create child node, filling in parent's pointer.		*/
	if( ! NewOctree( *childpp ) )
		{
		Malloc_Bomb(sizeof(Octree));
		fatal_error = TRUE;
		return	OCTREE_NULL;
		}
	/* Fill in fields in child node.				*/
	childp = *childpp;
	childp->o_bitv = bitv;
	childp->o_temp = ABSOLUTE_ZERO;   /* Unclaimed by temperature.	*/
	childp->o_triep = TRIE_NULL;	  /* Unclaimed by region.	*/
	childp->o_sibling = OCTREE_NULL;  /* End of sibling chain.	*/
	childp->o_child = OCTREE_NULL;	  /* No children yet.		*/

	/* Create list node for origin of leaf octant.			*/
	if( ! NewPoint( childp->o_points ) )
		{
		Malloc_Bomb(sizeof(PtList));
		fatal_error = TRUE;
		return	OCTREE_NULL;
		}
	childp->o_points->c_next = PTLIST_NULL; /* End of pt. chain.	*/
	/* Compute origin relative to parent, based on bit vector.	*/
	if( bitv & 1<<X )
		childp->o_points->c_point[X] = origin[X] + delta;
	else
		childp->o_points->c_point[X] = origin[X] - delta;
	if( bitv & 1<<Y )
		childp->o_points->c_point[Y] = origin[Y] + delta;
	else
		childp->o_points->c_point[Y] = origin[Y] - delta;
	if( bitv & 1<<Z )
		childp->o_points->c_point[Z] = origin[Z] + delta;
	else
		childp->o_points->c_point[Z] = origin[Z] - delta;
	return	childp;
	}

/*	f i n d _ O c t a n t ( )
	Starting at "parentp" and descending, locate octree node suitable
	for insertion of "pt".  Implicit return of tree level in "levelp".
	Return node's address.
 */
Octree	*
find_Octant(register Octree *parentp, register fastf_t *pt, register int *levelp)
{
	if( parentp == OCTREE_NULL )
		{
		bu_log( "find_Octant() parent node is NULL\n" );
		return	OCTREE_NULL;
		}
	do
		{	register int	bitv = 0;
			register Octree	**childpp;
			register float	*origin = parentp->o_points->c_point;
		/* Build bit vector to determine target octant.		*/
		bitv |= (pt[X] > origin[X]) << X;
		bitv |= (pt[Y] > origin[Y]) << Y;
		bitv |= (pt[Z] > origin[Z]) << Z;
		/* Search linked-list for target bit vector.		*/
		for(	childpp = &parentp->o_child;
			*childpp != OCTREE_NULL && (*childpp)->o_bitv != bitv;
			childpp = &(*childpp)->o_sibling
			)
			;
		if( *childpp != OCTREE_NULL )
			{ /* Found target octant, go next level.	*/
			parentp = *childpp;
			(*levelp)++;
			}
		else	/* Target octant doesn't exist yet.		*/
			return	new_Octant( parentp, childpp, bitv, ++(*levelp) );
		}
	while( parentp->o_child != OCTREE_NULL );
	return	parentp;	/* Returning leaf node.			*/
	}

Octree	*
add_Region_Octree(Octree *parentp, fastf_t *pt, Trie *triep, int temp, int level)
{	Octree	*newp;
	/* Traverse to octant leaf node containing "pt".		*/
	if( (newp = find_Octant( parentp, pt, &level )) == OCTREE_NULL )
		{
		bu_log( "find_Octant() returned NULL!\n" );
		return	OCTREE_NULL;
		}

	/* Decide where to put datum.					*/
	if( newp->o_points->c_next == PTLIST_NULL )
		{ /* Octant empty, so place region here.		*/
		newp->o_triep = triep;
		if( ! NewPoint( newp->o_points->c_next ) )
			{
			Malloc_Bomb(sizeof(PtList));
			fatal_error = TRUE;
			return	OCTREE_NULL;
			}
		VMOVE( newp->o_points->c_next->c_point, pt );
		newp->o_points->c_next->c_next = PTLIST_NULL;
		if( temp != AMBIENT-1 )
			newp->o_temp = temp;
		return	newp;
		}
	else	  /* Octant occupied.					*/
	if( triep != newp->o_triep )
		{ /* Region collision, must subdivide octant.		*/
		if( ! subdivide_Octree(	newp, level ))
			return	OCTREE_NULL;
		return	add_Region_Octree( newp, pt, triep, temp, level );
		}
	else
	if( temp != AMBIENT-1 )
		{
		/* We are assigning a temperature.			*/
		if( newp->o_temp < AMBIENT )
			{ /* Temperature not assigned yet.		*/
			newp->o_temp = temp;
			if( ! append_PtList( pt, newp->o_points ) )
				return	OCTREE_NULL;
			}
		else
		if( Abs(newp->o_temp - temp) < ir_noise )
			{ /* Temperatures close enough.			*/
			if( ! append_PtList( pt, newp->o_points ) )
				return	OCTREE_NULL;
			}
		else
		if(	newp->o_points->c_next->c_next == PTLIST_NULL
		     &&	SamePoint(	newp->o_points->c_next->c_point,
					pt,
					F2D_EPSILON
					)
			) /* Only point in leaf node is this point.	*/
			newp->o_temp = temp;
		else
			{ /* Temperature collision, must subdivide.	*/
			if( ! subdivide_Octree(	newp, level ) )
				return	OCTREE_NULL;
			return	add_Region_Octree( newp, pt, triep, temp, level );
			}
		}
	else	/* Region pointers match, so append coordinate to list.	*/
	if( ! append_PtList( pt, newp->o_points ) )
		return	OCTREE_NULL;
	return	newp;
	}
int
append_PtList(fastf_t *pt, PtList *ptlist)
{
	for( ; ptlist->c_next != PTLIST_NULL; ptlist = ptlist->c_next )
		{
		if( SamePoint( ptlist->c_next->c_point, pt, F2D_EPSILON ) )
			{ /* Point already in list.		*/
			return	1;
			}
		}
	if( ! NewPoint( ptlist->c_next ) )
		{
		Malloc_Bomb(sizeof(PtList));
		fatal_error = TRUE;
		return	0;
		}
	ptlist = ptlist->c_next;
	VMOVE( ptlist->c_point, pt );
	ptlist->c_next = PTLIST_NULL;
	return	1;
	}

void
delete_PtList(PtList **ptlistp)
{	register PtList	*pp = *ptlistp, *np;
	*ptlistp = PTLIST_NULL;
	for( ; pp != PTLIST_NULL; pp = np )
		{
		np = pp->c_next;
		free( (char *) pp );
		}
	}

#define L_MAX_POWER_TWO		31

static int
subdivide_Octree(register Octree *parentp, int level)
{	PtList		*points = parentp->o_points->c_next;
		Trie		*triep = parentp->o_triep;
		int		temp = parentp->o_temp;
	/* Ward against integer overflow in 2^level.			*/
	if( level > L_MAX_POWER_TWO )
		{
		bu_log( "Can not subdivide, level = %d\n", level );
		prnt_Octree( &ir_octree, 0 );
		return	0;
		}
	/* Remove datum from parent, it only belongs in leaves.		*/
	parentp->o_triep = TRIE_NULL;
	parentp->o_temp = ABSOLUTE_ZERO;
	parentp->o_points->c_next = PTLIST_NULL;
	/* Delete reference in trie tree to parent node.		*/
	delete_Node_OcList( &triep->l.t_octp, parentp );
	{	register PtList	*cp;
	/* Shove data down to sub-levels.				*/
	for( cp = points; cp != PTLIST_NULL; cp = cp->c_next )
		{	fastf_t	c_point[3];
			Octree	*octreep;
		VMOVE( c_point, cp->c_point );
		if(	(octreep =
			add_Region_Octree( parentp, c_point, triep, temp, level )
			) != OCTREE_NULL
			)
			append_Octp( triep, octreep );
		else
			return	0;
		}
	}
	delete_PtList( &points );
	return	1;
	}

fastf_t
pow_Of_2(register int power)
{	register long	value = 1;
	for( ; power > 0; power-- )
		value *= 2;
	return	(fastf_t) value;
	}

void
prnt_Node_Octree(Octree *parentp, int level)
{	register PtList	*ptp;
		register int ptcount = 0;
	bu_log( "%s[%2d](%8.3f,%8.3f,%8.3f)bits=0%o temp=%04d trie=%05x sibling=%05x child=%05x\n",
		parentp->o_child != OCTREE_NULL ? "NODE" : "LEAF",
		level,
		parentp->o_points->c_point[X],
		parentp->o_points->c_point[Y],
		parentp->o_points->c_point[Z],
		parentp->o_bitv,
		parentp->o_temp,
		parentp->o_triep,
		parentp->o_sibling,
		parentp->o_child
		);
	for( ptp = parentp->o_points->c_next; ptp != PTLIST_NULL; ptp = ptp->c_next )
		{
		if( RT_G_DEBUG )
			bu_log( "\t%8.3f,%8.3f,%8.3f\n",
				ptp->c_point[X],
				ptp->c_point[Y],
				ptp->c_point[Z]
				);
		ptcount++;
		}
	bu_log( "\t%d points\n", ptcount );
	return;
	}

void
prnt_Octree(Octree *parentp, int level)
{	register Octree	*siblingp;
	/* Print each octant at this level.				*/
	for(	siblingp = parentp;
		siblingp != OCTREE_NULL;
		siblingp = siblingp->o_sibling
		)
		prnt_Node_Octree( siblingp, level );
	/* Print each octant at this level.				*/
	for(	siblingp = parentp;
		siblingp != OCTREE_NULL;
		siblingp = siblingp->o_sibling
		)
		prnt_Octree( siblingp->o_child, level+1 );
	return;
	}

int
write_Octree(Octree *parentp, FILE *fp)
{	register PtList	*ptp;
		F_Hdr_Ptlist	hdr_ptlist;
		long		addr = ftell( fp );
	/* Write temperature and bogus number of points for this leaf.	*/
	hdr_ptlist.f_temp = parentp->o_temp;
	hdr_ptlist.f_length = 0;
	if( fwrite( (char *) &hdr_ptlist, sizeof(F_Hdr_Ptlist), 1, fp ) != 1 )
		{
		bu_log( "\"%s\"(%d) Write failed!\n", __FILE__, __LINE__ );
		return	0;
		}
	/* Write out list of points.					*/
	for( ptp = parentp->o_points->c_next; ptp != PTLIST_NULL; ptp = ptp->c_next )
		{
		hdr_ptlist.f_length++;
		if( fwrite( (char *) ptp->c_point, sizeof(ptp->c_point), 1, fp )
			!= 1
			)
			{
			bu_log( "\"%s\"(%d) Write failed.\n", __FILE__, __LINE__ );
			return	0;
			}
		}
	if( hdr_ptlist.f_length > 0 )
		{
		/* Go back and fudge point count.			*/
		if( fseek( fp, addr, 0 ) )
			{
			bu_log( "\"%s\"(%d) Fseek failed.\n", __FILE__, __LINE__ );
			return	0;
			}
		if( fwrite( (char *) &hdr_ptlist, sizeof(hdr_ptlist), 1, fp )
			!= 1
			)
			{
			bu_log( "\"%s\"(%d) Write failed!\n", __FILE__, __LINE__ );
			return	0;
			}
		/* Re-position write pointer to end-of-file.		*/
		if( fseek( fp, 0L, 2 ) )
			{
			bu_log( "\"%s\"(%d) Fseek failed.\n", __FILE__, __LINE__ );
			return	0;
			}
		}
	return	1;
	}

static void
hit_octant(struct application *ap, register Octree *op, register Octree **lpp, fastf_t *inv_dir, int level)
{
	for( ; op != OCTREE_NULL; op = op->o_sibling )
		{	fastf_t	octnt_min[3], octnt_max[3];
			fastf_t	delta = modl_radius / pow_Of_2( level );
		/* See if ray hits the octant RPP.			*/
		octnt_min[X] = op->o_points->c_point[X] - delta;
		octnt_min[Y] = op->o_points->c_point[Y] - delta;
		octnt_min[Z] = op->o_points->c_point[Z] - delta;
		octnt_max[X] = op->o_points->c_point[X] + delta;
		octnt_max[Y] = op->o_points->c_point[Y] + delta;
		octnt_max[Z] = op->o_points->c_point[Z] + delta;
		if( rt_in_rpp( &ap->a_ray, inv_dir, octnt_min, octnt_max ) )
			{ /* Hit octant.				*/
			if( op->o_child == OCTREE_NULL )
				{ /* We are at a leaf node.		*/
				if( ap->a_uvec[0] > ap->a_ray.r_min )
					{ /* Closest, so far.		*/
					ap->a_uvec[0] = ap->a_ray.r_min;
					ap->a_level = level;
					*lpp = op;
					}
				}
			else	  /* We must descend to lower level.	*/
				hit_octant( ap, op->o_child, lpp, inv_dir, level+1 );
			}
		}
	/* No more octants at this level.				*/
	return;
	}
int
ir_shootray_octree(struct application *ap)
{	vect_t	inv_dir;	/* Inverses of ap->a_ray.r_dir	*/
		Octree	*leafp = NULL;	/* Intersected octree leaf.	*/
	inv_dir[X] = inv_dir[Y] = inv_dir[Z] = INFINITY;
	if( ap->a_ray.r_dir[X] != 0.0 )
		inv_dir[X] = 1.0 / ap->a_ray.r_dir[X];
	if( ap->a_ray.r_dir[Y] != 0.0 )
		inv_dir[Y] = 1.0 / ap->a_ray.r_dir[Y];
	if( ap->a_ray.r_dir[Z] != 0.0 )
		inv_dir[Z] = 1.0 / ap->a_ray.r_dir[Z];
	/* Descend octree from root to find the closest intersected leaf node.
		Store minimum hit distance in "a_uvec[0]" field of application
		structure.  Implicitly return the leaf node in "leafp".
	 */
	ap->a_uvec[0] = INFINITY; /* Minimum hit point, safe distance.	*/
	hit_octant( ap, &ir_octree, &leafp, inv_dir, 0 );
	if( leafp != OCTREE_NULL )
		/* Hit model.						*/
		/* a_hit is f_IR_Model(), uses 2nd arg as (Octree *) */
		return	ap->a_hit( ap, (struct partition *)leafp, RT_SEG_NULL );
	else	/* Missed it.						*/
		return	ap->a_miss( ap );
	}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a21 4
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066
			(301)278-6647 or AV-298-6647
d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.9 2007/01/23 01:13:33 brlcad Exp $ (BRL)";
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.8 2007/01/20 14:36:50 brlcad Exp $ (BRL)";
d60 1
a60 1
	 	(	Abs((p)[X]-(q)[X]) < (e) \
d78 1
a78 1
	 	Malloc_Bomb(sizeof(Octree));
d282 1
a282 1
		  	add_Region_Octree( parentp, c_point, triep, temp, level )
d445 1
a445 1
 	 */
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.7 2006/01/23 07:11:02 brlcad Exp $ (BRL)";
@


14.7
log
@stdlib.h
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.6 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
@


14.6
log
@update copyright to 2006
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.5 2005/11/11 21:29:56 brlcad Exp $ (BRL)";
d41 1
a41 2


d50 1
d57 1
@


14.5
log
@convert STATIC to static and obliterate the NDEBUG hacks now that it's consistent provided throughout the package via configure
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.4 2005/10/23 04:44:31 brlcad Exp $ (BRL)";
@


14.4
log
@trailing ws
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.3 2005/01/30 20:30:43 brlcad Exp $ (BRL)";
d68 1
a68 1
STATIC int	subdivide_Octree(register Octree *parentp, int level);
d257 1
a257 1
STATIC int
d400 1
a400 1
STATIC void
@


14.3
log
@update copyright to 2005
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/octree.c,v 14.2 2004/12/21 01:23:58 morrison Exp $ (BRL)";
d353 1
a353 1
		F_Hdr_Ptlist	hdr_ptlist;	
d453 1
a453 1
		return	ap->a_miss( ap );		
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d68 1
a68 1
static int	subdivide_Octree(register Octree *parentp, int level);
d257 1
a257 1
static int
d353 1
a353 1
		F_Hdr_Ptlist	hdr_ptlist;
d400 1
a400 1
static void
d453 1
a453 1
		return	ap->a_miss( ap );
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/octree.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/octree.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/octree.c,v 1.2 2004/06/08 22:04:17 morrison Exp $ (BRL)";
d435 10
@


1.2
log
@obliterate externs.h
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d19 1
a19 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/lgt/octree.c,v 11.11 2004/05/10 15:30:43 erikg Exp $ (BRL)";
a29 1
#include "externs.h"
@

