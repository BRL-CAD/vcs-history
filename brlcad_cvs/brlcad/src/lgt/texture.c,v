head	14.12;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	stable-branch:14.3
	rel-7-10-2:14.11
	rel-7-10-0:14.10
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.12
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.07.26.01.13.55;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.33;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.50;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.23.20.11.19;	author lbutler;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.23.07.09.59;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.15;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.11.11.21.29.56;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.31;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.30.43;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.01.23.58;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.18;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.25;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.14;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.12
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@/*                       T E X T U R E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file texture.c
	Author:		Gary S. Moss
*/
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.11 2007/07/26 01:13:55 brlcad Exp $ (BRL)";
#endif
#include "common.h"

#include <stdio.h>
#include <fcntl.h>
#include <assert.h>
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "fb.h"

#include "./hmenu.h"
#include "./lgt.h"
#include "./extern.h"
#include "./mat_db.h"


#define DEBUG_TEXTURE	0

typedef unsigned short	icon_t;
#define BIT_TEST( w, b )	(b == 0 ? (int)(w)&1 : (int)(w)&(1<<(b)))
#define Fb_Lookup( fbp, u, v )	(fbp->map + (v) * fbp->wid + (u))
#define BITS_PER_BYTE	8
#define BYTES_WIDE	(wid/BITS_PER_BYTE)
#define ITEMS_WIDE	(BYTES_WIDE/sizeof(icon_t))
#define ICON_SUFFIX	"icon"
#define FB_SUFFIX	"pix"

struct icon_texture
	{
	char			*filenm;
	icon_t			*map;
	int			wid;
	int			hgt;
	struct icon_texture	*next;
	}
*icons = NULL;

struct fb_texture
	{
	char			*filenm;
	RGBpixel		*map;
	int			wid;
	int			hgt;
	struct fb_texture	*next;
	}
*fbs = NULL;

static char	*
suffix(register char *str)
{	register char	*p = str + strlen( str ) - 1;
	while( *p != '.' && p != str )
		p--;
	if( *p == '.' )
		return	p+1;
	else
		return	p;
	}

static RGBpixel	*
icon_Lookup( iconp, u, v )
struct icon_texture	*iconp;
int	u, v;
	{	static int	word_sz = sizeof(icon_t) * BITS_PER_BYTE;
		static RGBpixel	black_pixel = { 0, 0, 0 };
		static RGBpixel	white_pixel = { 255, 255, 255 };
		int	offset = (iconp->hgt-1-v)*iconp->wid/word_sz + u/word_sz;
		int	bit = (word_sz-1) - (u % word_sz);
		icon_t	word = iconp->map[offset];
	if( BIT_TEST( word, bit ) )
		return	(RGBpixel *) black_pixel;
	else
		return	(RGBpixel *) white_pixel;
	}

static struct icon_texture	*
init_Icon_Texture(char *file, Mat_Db_Entry *entry)
{	FILE	*iconfp;
		register struct icon_texture	*iconp;
		icon_t	*iconmap;
		int	wid = entry->df_rgb[0] << 3;
		int	hgt = entry->df_rgb[1] << 3;
	if( (iconfp = fopen( file, "r" )) == NULL )
		{
		bu_log( "Can't open icon texture \"%s\" for reading.\n",
			file );
		return	NULL;
		}
	iconmap = (icon_t *) bu_malloc( BYTES_WIDE*hgt, "iconmap" );
#if DEBUG_TEXTURE
	bu_log( "init_Icon_Texture(%s) wid=%d hgt=%d\n", file, wid, hgt );
	bu_log( "%d bytes allocated for texture map.\n",
		BYTES_WIDE*hgt );
#endif
	if( fread( iconmap, sizeof(icon_t), ITEMS_WIDE*hgt, iconfp )
		== -1 )
		{
		bu_log( "Read of icon texture map failed.\n" );
		return	NULL;
		}
	iconp =	(struct icon_texture *) bu_malloc( sizeof( struct icon_texture ), "iconp" );
	iconp->filenm = bu_malloc( strlen(file)+1, "iconp->filenm");

	(void) strncpy( iconp->filenm, file, strlen(file)+1);
	iconp->map = iconmap;
	iconp->wid = wid;
	iconp->hgt = hgt;
	iconp->next = icons;
	icons = iconp;
#if DEBUG_TEXTURE
	{ register int	u, v;
	for( v = 0; v < hgt; v++ )
		for( u = 0; u < wid; u++ )
			{	RGBpixel	*pixel;
			pixel = icon_Lookup( iconp, u, v );
			prnt_Pixel( *pixel, u, v );
			}
	}
#endif
	(void) fclose( iconfp );
	return	iconp;
	}

static struct fb_texture	*
init_Fb_Texture(char *file, Mat_Db_Entry *entry)
{	FBIO		*txfbiop;
		register struct fb_texture	*fbp;
		RGBpixel	*fbmap;
		int		wid = entry->df_rgb[0] << 3;
		int		hgt = entry->df_rgb[1] << 3;
	if( (txfbiop = fb_open( file, wid, hgt )) == FBIO_NULL )
		return	NULL;
	fbmap =	(RGBpixel *) bu_malloc( wid*hgt*sizeof(RGBpixel), "fbmap" );
#if DEBUG_TEXTURE
	bu_log( "init_Fb_Texture(%s) wid=%d hgt=%d\n", file, wid, hgt );
	bu_log( "%d bytes allocated for texture map.\n",
		wid*hgt*sizeof(RGBpixel) );
#endif
	if( fb_read( txfbiop, 0, 0, (unsigned char *)fbmap, wid*hgt ) == -1 )
		{
		bu_log( "Read of frame buffer texture failed.\n" );
		return	NULL;
		}
	fbp = (struct fb_texture *) bu_malloc( sizeof( struct fb_texture ), "fbp");
	fbp->filenm = bu_malloc( strlen(file)+1, "fbp->filenm");
	(void) strncpy( fbp->filenm, file, strlen(file)+1 );
	fbp->map = fbmap;
	fbp->wid = wid;
	fbp->hgt = hgt;
	fbp->next = fbs;
	fbs = fbp;
#if DEBUG_TEXTURE
	{ register int	u, v;
	for( v = 0; v < hgt; v++ )
		for( u = 0; u < wid; u++ )
			{	RGBpixel	*pixel;
			pixel = Fb_Lookup( fbp, u, v );
			prnt_Pixel( pixel, u, v );
			}
	}
#endif
	(void) fb_close( txfbiop );
	return	fbp;
	}

int
tex_Entry(struct uvcoord *uvp, Mat_Db_Entry *entry)
{
	if( strcmp( ICON_SUFFIX, suffix( entry->name ) ) == 0 )
		return	icon_Entry( uvp, entry );
	else
	if( strcmp( FB_SUFFIX, suffix( entry->name ) ) == 0 )
		return	fb_Entry( uvp, entry );
	else
		return	0;
	}

int
icon_Entry(struct uvcoord *uvp, Mat_Db_Entry *entry)
{	int	ui;
		int	vi;
		register RGBpixel		*pixel;
		register struct icon_texture	*iconp;
		char				*file = entry->name + TEX_KEYLEN;
	bu_semaphore_acquire( RT_SEM_RESULTS );
	for(	iconp = icons;
		iconp != NULL && strcmp( iconp->filenm, file ) != 0;
		iconp = iconp->next )
		;
	if( iconp == NULL )
		iconp = init_Icon_Texture( file, entry );
	bu_semaphore_release( RT_SEM_RESULTS );
	if( iconp == NULL )
		return	0;
	if(	uvp->uv_u > 1.0 || uvp->uv_u < 0.0
	     ||	uvp->uv_v > 1.0 || uvp->uv_v < 0.0
		)
		{
		bu_log( "uv coordinates out of range: u=%g v=%g\n",
			uvp->uv_u, uvp->uv_v );
		return	0;
		}
	ui = uvp->uv_u * iconp->wid;
	vi = uvp->uv_v * iconp->hgt;
#if DEBUG_TEXTURE
	bu_log( "uvp->uv_u=%g ui=%d uvp->uv_v=%g vi=%d\n",
		uvp->uv_u, ui, uvp->uv_v, vi );
#endif
	pixel = icon_Lookup( iconp, ui, vi );
	COPYRGB( entry->df_rgb, *pixel );
	return	1;
	}

int
fb_Entry(struct uvcoord *uvp, Mat_Db_Entry *entry)
{	int				ui;
		int				vi;
		register RGBpixel		*pixel;
		register struct fb_texture	*fbp;
		char				*file = entry->name + TEX_KEYLEN;
	bu_semaphore_acquire( RT_SEM_RESULTS );
	for(	fbp = fbs;
		fbp != NULL && strcmp( fbp->filenm, file ) != 0 ;
		fbp = fbp->next )
		;
	if( fbp == NULL )
		fbp = init_Fb_Texture( file, entry );
	bu_semaphore_release( RT_SEM_RESULTS );
	if( fbp == NULL )
		return	0;
	if(	uvp->uv_u > 1.0 || uvp->uv_u < 0.0
	     ||	uvp->uv_v > 1.0 || uvp->uv_v < 0.0
		)
		{
		bu_log( "uv coordinates out of range: u=%g v=%g\n",
			uvp->uv_u, uvp->uv_v );
		return	0;
		}
	ui = uvp->uv_u * fbp->wid;
	vi = uvp->uv_v * fbp->hgt;
	pixel = Fb_Lookup( fbp, ui, vi );
	COPYRGB( entry->df_rgb, *pixel );
#if DEBUG_TEXTURE
	bu_log( "uvp->uv_u=%g uvp->uv_v=%g\n",
		uvp->uv_u, uvp->uv_v );
	bu_log( "fbp->map[%d]=<%d,%d,%d>\n",
		vi*fbp->wid + ui,
		(*(fbp->map+vi*fbp->wid+ui))[0],
		(*(fbp->map+vi*fbp->wid+ui))[1],
		(*(fbp->map+vi*fbp->wid+ui))[2] );
	prnt_Pixel( pixel, ui, vi );
#endif
	return	1;
	}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.11
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.10 2007/01/23 01:13:33 brlcad Exp $ (BRL)";
d130 1
a130 1
	(void) strcpy( iconp->filenm, file );
d172 1
a172 1
	(void) strcpy( fbp->filenm, file );
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a21 4
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066
			(301)278-6647 or AV-298-6647
d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.9 2007/01/20 14:36:50 brlcad Exp $ (BRL)";
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.8 2006/01/23 20:11:19 lbutler Exp $ (BRL)";
@


14.8
log
@call to malloc() had the signature of a call to bu_malloc().  Fixed to call bu_malloc().
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.7 2006/01/23 07:09:59 brlcad Exp $ (BRL)";
@


14.7
log
@libbu for memory management
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.6 2006/01/18 06:46:15 brlcad Exp $ (BRL)";
d133 1
a133 1
	iconp->filenm = malloc( strlen(file)+1, "iconp->filenm");
@


14.6
log
@update copyright to 2006
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.5 2005/11/11 21:29:56 brlcad Exp $ (BRL)";
a32 2


d42 1
d48 1
d120 1
a120 8
	if(	(iconmap =
		(icon_t *) malloc( BYTES_WIDE*hgt ))
		== (icon_t *) 0
		)
		{
		bu_log( "No space for icon texture map.\n" );
		return	NULL;
		}
d132 3
a134 13
	if(	(iconp =
		(struct icon_texture *) malloc( sizeof( struct icon_texture ) ))
	    ==	(struct icon_texture *) 0
		)
		{
		bu_log( "No space for icon texture.\n" );
		return	NULL;
		}
	if( (iconp->filenm = malloc( strlen(file)+1 )) == NULL )
		{
		bu_log( "init_Icon_Texture: no space for file name.\n" );
		return	NULL;
		}
d164 1
a164 8
	if(	(fbmap =
		(RGBpixel *) malloc( wid*hgt*sizeof(RGBpixel) ))
		== (RGBpixel *) 0
		)
		{
		bu_log( "No space for frame buffer texture map.\n" );
		return	NULL;
		}
d175 2
a176 13
	if(	(fbp =
		(struct fb_texture *) malloc( sizeof( struct fb_texture ) ))
	    ==	(struct fb_texture *) 0
		)
		{
		bu_log( "No space for fb texture.\n" );
		return	NULL;
		}
	if( (fbp->filenm = malloc( strlen(file)+1 )) == NULL )
		{
		bu_log( "init_Fb_Texture: no space for file name.\n" );
		return	NULL;
		}
@


14.5
log
@convert STATIC to static and obliterate the NDEBUG hacks now that it's consistent provided throughout the package via configure
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.4 2005/10/23 04:44:31 brlcad Exp $ (BRL)";
@


14.4
log
@trailing ws
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.3 2005/01/30 20:30:43 brlcad Exp $ (BRL)";
d80 1
a80 1
STATIC char	*
d91 1
a91 1
STATIC RGBpixel	*
d107 1
a107 1
STATIC struct icon_texture	*
d172 1
a172 1
STATIC struct fb_texture	*
@


14.3
log
@update copyright to 2005
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/lgt/texture.c,v 14.2 2004/12/21 01:23:58 morrison Exp $ (BRL)";
d99 1
a99 1
		int	bit = (word_sz-1) - (u % word_sz);	
d314 3
a316 3
		(*(fbp->map+vi*fbp->wid+ui))[0],	
		(*(fbp->map+vi*fbp->wid+ui))[1],	
		(*(fbp->map+vi*fbp->wid+ui))[2] );	
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d80 1
a80 1
static char	*
d91 1
a91 1
static RGBpixel	*
d99 1
a99 1
		int	bit = (word_sz-1) - (u % word_sz);
d107 1
a107 1
static struct icon_texture	*
d172 1
a172 1
static struct fb_texture	*
d314 3
a316 3
		(*(fbp->map+vi*fbp->wid+ui))[0],
		(*(fbp->map+vi*fbp->wid+ui))[1],
		(*(fbp->map+vi*fbp->wid+ui))[2] );
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/texture.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/texture.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/lgt/texture.c,v 1.2 2004/06/08 22:04:18 morrison Exp $ (BRL)";
d301 10
@


1.2
log
@obliterate externs.h
@
text
@d9 1
a9 4
static const char RCSid[] = "@@(#)$Header$ (BRL)";
#endif
#ifdef HAVE_CONFIG_H
# include "config.h"
d11 1
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d9 1
a9 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/lgt/texture.c,v 11.8 2004/05/10 15:30:43 erikg Exp $ (BRL)";
a22 1
#include "externs.h"
@

