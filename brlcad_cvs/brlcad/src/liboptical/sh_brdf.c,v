head	14.14;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.8
	rel-7-10-2:14.14
	rel-7-10-0:14.13
	rel-7-8-4:14.11
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.14
date	2007.07.26.01.13.56;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.53;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.23.00.35.08;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.03.28.06.31.28;	author bob1961;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.30.54;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.42;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.50.59;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.03.25;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.50;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@/*                       S H _ B R D F . C
 * BRL-CAD
 *
 * Copyright (c) 1996-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file sh_brdf.c
 *			B R D F
 *
 *  Simple Isotropic Gaussian model with just one parameter (RMS slope).
 *
 *  Notes -
 *	The normals on all surfaces point OUT of the solid.
 *	The incoming light rays point IN.
 *
 *  Authors -
 *	John R. Anderson
 *
 *	Based on the simple Isotropic Gaussian Model presented by Gregory Ward
 *	in "Measuring and Modeling Anisotropic Reflection" (Which also references
 *	earlier work by Beckmann, Torrance, and Cook).
 */
#ifndef lint
static const char RCSbrdf[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_brdf.c,v 14.13 2007/01/23 01:13:36 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stddef.h>
#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"
#include "rtprivate.h"
#include "light.h"

extern int rr_render(struct application	*ap,
		     struct partition	*pp,
		     struct shadework   *swp);
/* from view.c */
extern double AmbientIntensity;

/* Local information */
struct brdf_specific {
	int	magic;
	double	specular_refl;	/* specular reflectance */
	double	diffuse_refl;	/* diffuse reflectnace */
	double	rms_slope;	/* Standard deviation (RMS) of surface slope (roughness) */
	double	rms_sq;		/* square of above */
	double	denom;		/* denominator for specular term */
	double	transmit;	/* Moss "transparency" */
	double	reflect;	/* Moss "transmission" */
	double	refrac_index;
	double	extinction;
};
#define BRDF_MAGIC	0xbeef00d
#define BRDF_NULL	((struct brdf_specific *)0)
#define BRDF_O(m)	bu_offsetof(struct brdf_specific, m)

struct bu_structparse brdf_parse[] = {
	{"%f",	1, "specular",		BRDF_O(specular_refl),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "sp",		BRDF_O(specular_refl),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "diffuse",		BRDF_O(diffuse_refl),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "di",		BRDF_O(diffuse_refl),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "rough",		BRDF_O(rms_slope),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "rms",		BRDF_O(rms_slope),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "transmit",		BRDF_O(transmit),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "tr",		BRDF_O(transmit),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "reflect",		BRDF_O(reflect),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "re",		BRDF_O(reflect),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "ri",		BRDF_O(refrac_index),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "extinction_per_meter", BRDF_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "extinction",	BRDF_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "ex",		BRDF_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
	{"",	0, (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};

HIDDEN int brdf_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip);
HIDDEN int brdf_render(register struct application *ap, struct partition *pp, struct shadework *swp, char *dp);
HIDDEN void	brdf_print(register struct region *rp, char *dp);
HIDDEN void	brdf_free(char *cp);

struct mfuncs brdf_mfuncs[] = {
	{MF_MAGIC,	"brdf",		0,		MFI_NORMAL|MFI_LIGHT,	0,
	brdf_setup,	brdf_render,	brdf_print,	brdf_free },

	{0,		(char *)0,	0,		0,	0,
	0,		0,		0,		0 }
};

#define RI_AIR		1.0    /* Refractive index of air.		*/

/*
 *			B R D F _ S E T U P
 */
HIDDEN int
brdf_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip)
{
	register struct brdf_specific *pp;

	BU_CK_VLS( matparm );
	BU_GETSTRUCT( pp, brdf_specific );
	*dpp = (char *)pp;

	pp->magic = BRDF_MAGIC;
	pp->specular_refl = 0.7;
	pp->diffuse_refl = 0.3;
	pp->transmit = 0.0;
	pp->reflect = 0.0;
	pp->refrac_index = RI_AIR;
	pp->extinction = 0.0;
	pp->rms_slope = 0.05;

	if (bu_struct_parse( matparm, brdf_parse, (char *)pp ) < 0 )  {
		bu_free( (char *)pp, "brdf_specific" );
		return(-1);
	}

	pp->rms_sq = pp->rms_slope * pp->rms_slope;
	pp->denom = 4.0 * bn_pi * pp->rms_sq;

	return(1);
}
/*
 *			B R D F _ P R I N T
 */
HIDDEN void
brdf_print(register struct region *rp, char *dp)
{
	bu_struct_print(rp->reg_name, brdf_parse, (char *)dp);
}

/*
 *			B R D F _ F R E E
 */
HIDDEN void
brdf_free(char *cp)
{
	bu_free( cp, "brdf_specific" );
}


/*
 *			B R D F _ R E N D E R
 *
	Color pixel based on the energy of a point light source (Eps)
	plus some diffuse illumination (Epd) reflected from the point
	<x,y> :

				E = Epd + Eps		(1)

	The energy reflected from diffuse illumination is the product
	of the reflectance coefficient at point P (Rp) and the diffuse
	illumination (Id) :

				Epd = Rp * Id		(2)

	The energy reflected from the point light source is calculated
	by the sum of the diffuse reflectance (Rd) and the specular
	reflectance (Rs), multiplied by the intensity of the light
	source (Ips) :

				Eps = (Rd + Rs) * Ips	(3)

	The diffuse reflectance is calculated by the product of the
	reflectance coefficient (Rp) and the cosine of the angle of
	incidence (I) and normalized by PI :

				Rd = Rp * cos(I) / PI	(4)

	The specular reflectance is calculated by the product of the
	specular reflectance coeffient and a term dependent on the
	surface roughness :

				Rs = W(I,O) * R(I,O,r)	(5)

	Where,
		I is the angle of incidence.
		O is the angle to the observer.
		r is the standard deviation (RMS) of the surface slope.
		W returns the specular reflection coefficient as a function
	of the angle of incidence, and the viewer angle.
		R is a surface roughness term.

 */
HIDDEN int
brdf_render(register struct application *ap, struct partition *pp, struct shadework *swp, char *dp)
{
	register struct light_specific *lp;
	register fastf_t *intensity, *to_light;
	register int	i;
	register fastf_t cosi,cosr;
	register fastf_t refl;
	vect_t h_dir;
	vect_t to_eye;
	vect_t	work;
	vect_t	cprod;			/* color product */
	point_t	matcolor;		/* Material color */
	struct brdf_specific *ps =
		(struct brdf_specific *)dp;

	if (ps->magic != BRDF_MAGIC )  bu_log("brdf_render: bad magic\n");

	if (rdebug&RDEBUG_SHADE)
		bu_struct_print( "brdf_render", brdf_parse, (char *)ps );

	swp->sw_transmit = ps->transmit;
	swp->sw_reflect = ps->reflect;
	swp->sw_refrac_index = ps->refrac_index;
	swp->sw_extinction = ps->extinction;
	if (swp->sw_xmitonly ) {
		if (swp->sw_reflect > 0 || swp->sw_transmit > 0 )
			(void)rr_render( ap, pp, swp );
		return(1);	/* done */
	}

	VMOVE( matcolor, swp->sw_color );

	/* Diffuse reflectance from "Ambient" light source (at eye) */
	if ((cosr = -VDOT( swp->sw_hit.hit_normal, ap->a_ray.r_dir )) > 0.0 )  {
		if (cosr > 1.00001 )  {
			bu_log("cosAmb=1+%g (x%d,y%d,lvl%d)\n", cosr-1,
				ap->a_x, ap->a_y, ap->a_level);
			cosr = 1;
		}
		refl = cosr * AmbientIntensity;
		VSCALE( swp->sw_color, matcolor, refl );
	} else {
		VSETALL( swp->sw_color, 0 );
	}

	VREVERSE( to_eye, ap->a_ray.r_dir );

	/* Consider effects of each light source */
	for( i=ap->a_rt_i->rti_nlights-1; i>=0; i-- )  {
		fastf_t cos_tmp;
		fastf_t tan_sq;
		double exponent;

		if ((lp = (struct light_specific *)swp->sw_visible[i]) == LIGHT_NULL )
			continue;

		/* Light is not shadowed -- add this contribution */
		intensity = swp->sw_intensity+3*i;
		to_light = swp->sw_tolight+3*i;

		if ((cosi = VDOT( swp->sw_hit.hit_normal, to_light )) > 0.0 )  {
			if (cosi > 1.00001 )  {
				bu_log("cosI=1+%g (x%d,y%d,lvl%d)\n", cosi-1,
					ap->a_x, ap->a_y, ap->a_level);
				cosi = 1;
			}

			/* Diffuse reflectance from this light source. */
			refl = cosi * lp->lt_fraction * ps->diffuse_refl;
			VELMUL( work, lp->lt_color,
				intensity );
			VELMUL( cprod, matcolor, work );
			VJOIN1( swp->sw_color, swp->sw_color,
				refl, cprod );

			/* Calculate specular reflectance. */
			if (NEAR_ZERO( ps->rms_sq, SMALL_FASTF ) )
				continue;
			VADD2( h_dir, to_eye, to_light )
			VUNITIZE( h_dir );
			cos_tmp = VDOT( h_dir, swp->sw_hit.hit_normal );
			if (cos_tmp <= 0.0 )
				continue;
			cos_tmp *= cos_tmp;
			if (NEAR_ZERO( cos_tmp, SMALL_FASTF ) )
				continue;

			tan_sq = (1.0-cos_tmp)/cos_tmp;
			exponent = (-tan_sq/ps->rms_sq );
			refl = ps->specular_refl * lp->lt_fraction * exp( exponent ) /
				sqrt( cosi * cosr ) / ps->denom;
			if (refl > 1.0 )
				refl = 1.0;

			VELMUL( work, lp->lt_color, intensity );
			VJOIN1( swp->sw_color, swp->sw_color, refl, work );

		}
	}

	if (swp->sw_reflect > 0 || swp->sw_transmit > 0 )
		(void)rr_render( ap, pp, swp );
	return(1);
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a31 6
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *
 *
 *
d37 1
a37 1
static const char RCSbrdf[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_brdf.c,v 14.12 2007/01/20 14:36:53 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d43 1
a43 1
static const char RCSbrdf[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_brdf.c,v 14.11 2006/01/23 00:35:08 brlcad Exp $ (BRL)";
@


14.11
log
@include stddef.h for bu_offset's usage of offset
@
text
@d4 1
a4 1
 * Copyright (c) 1996-2006 United States Government as represented by
d44 1
a44 1
static const char RCSbrdf[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_brdf.c,v 14.10 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
@


14.10
log
@update copyright to 2006
@
text
@d44 1
a44 1
static const char RCSbrdf[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_brdf.c,v 14.9 2005/10/23 04:44:34 brlcad Exp $ (BRL)";
d49 1
a49 2


d52 1
d81 1
a81 1
#define BRDF_O(m)	offsetof(struct brdf_specific, m)
@


14.9
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1996-2005 United States Government as represented by
d44 1
a44 1
static const char RCSbrdf[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_brdf.c,v 14.8 2005/03/28 06:31:28 bob1961 Exp $ (BRL)";
@


14.8
log
@Add code to allow liboptical to be a Windows DLL
@
text
@d32 1
a32 1
 *  
d36 1
a36 1
 *  
d44 1
a44 1
static const char RCSbrdf[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_brdf.c,v 14.7 2005/01/30 20:30:54 brlcad Exp $ (BRL)";
d265 1
a265 1
	
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d36 1
a36 1
 *
d44 1
a44 1
static const char RCSbrdf[] = "@@(#)$Header$ (BRL)";
d265 1
a265 1

@


14.7
log
@update copyright to 2005
@
text
@d44 1
a44 1
static const char RCSbrdf[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_brdf.c,v 14.6 2004/12/21 06:58:42 morrison Exp $ (BRL)";
a56 2
#include "shadefuncs.h"
#include "shadework.h"
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@d4 1
a4 1
 * Copyright (c) 1996-2004 United States Government as represented by
d44 1
a44 1
static const char RCSbrdf[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_brdf.c,v 14.5 2004/12/21 06:50:59 morrison Exp $ (BRL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a37 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1996-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d44 1
a44 1
static const char RCSbrdf[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_brdf.c,v 14.4 2004/12/21 06:18:44 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a36 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Pacakge" agreement.
d47 1
a47 1
static const char RCSbrdf[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_brdf.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d51 1
a51 1
static const char RCSbrdf[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_brdf.c,v 14.2 2004/12/21 04:03:25 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d51 1
a51 1
static const char RCSbrdf[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_brdf.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d51 1
a51 1
static const char RCSbrdf[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_brdf.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (BRL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d31 1
a31 1
static const char RCSbrdf[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_brdf.c,v 1.1 2004/05/20 15:19:50 morrison Exp $ (BRL)";
d304 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d31 1
a31 1
static const char RCSbrdf[] = "@@(#)$Header: /cvs/brlcad/liboptical/sh_brdf.c,v 1.24 2004/05/10 15:30:45 erikg Exp $ (BRL)";
d34 1
a34 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

