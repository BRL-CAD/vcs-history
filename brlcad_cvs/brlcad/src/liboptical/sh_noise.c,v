head	14.19;
access;
symbols
	rel-7-10-4:14.17
	STABLE:14.17.0.2
	stable-branch:14.10
	rel-7-10-2:14.17
	rel-7-10-0:14.16
	rel-7-8-4:14.13
	rel-7-8-2:14.13
	rel-7-8-0:14.13
	trimnurbs-branch:14.13.0.2
	help:14.13
	temp_tag:14.11
	bobWinPort-20051223-freeze:14.10
	postmerge-20051223-bobWinPort:14.11
	premerge-20051223-bobWinPort:14.11
	rel-7-6-6:14.11
	rel-7-6-4:14.11
	rel-7-6-2:14.10
	rel-7-6-branch:14.10.0.6
	rel-7-6-0:14.10
	rel-7-4-2:14.10
	rel-7-4-branch:14.10.0.4
	bobWinPort:14.10.0.2
	rel-7-4-0:14.10
	rel-7-2-6:14.10
	rel-7-2-4:14.10
	rel-7-2-2:14.10
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.19
date	2007.12.16.18.53.49;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.09.15.16.23.11;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.05.14.21.04.31;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.27.01.41.37;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.36.53;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.01.23.00.35.08;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.03.30.07.14.09;	author brlcad;	state Exp;
branches
	14.10.6.1;
next	14.9;

14.9
date	2005.03.28.06.31.37;	author bob1961;	state Exp;
branches;
next	14.8;

14.8
date	2005.01.30.20.30.55;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.32.30;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.42;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.33;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.03.25;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.51;	author morrison;	state Exp;
branches;
next	;

14.10.6.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.19
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                      S H _ N O I S E . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file sh_noise.c
 *
 *	Shaders:
 *	gravel		turbulence noise applied to color and surface normal
 *	turbump		turbulence noise applied to surface normal
 *	turcolor	turbulence noise applied to color
 *	fbmbump		fbm noise applied to surface normal
 *	fbmcolor	fbm noise applied to color
 *
 *  Author -
 *	Lee A. Butler
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.18 2007/09/15 16:23:11 brlcad Exp $ (ARL)";
#endif

#include "common.h"

#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "rtprivate.h"

extern int rr_render(struct application	*ap,
		     struct partition	*pp,
		     struct shadework   *swp);
#define noise_MAGIC 0x1847
#define CK_noise_SP(_p) BU_CKMAG(_p, noise_MAGIC, "noise_specific")

/* This allows us to specify the "size" parameter as values like ".5m"
 * or "27in" rather than using mm all the time.
 */
void
noise_cvt_parse(register const struct bu_structparse *sdp, register const char *name, char *base, const char *value)
						/* structure description */
						/* struct member name */
						/* begining of structure */
						/* string containing value */
{
	double *p = (double *)(base+sdp->sp_offset);

	if (rdebug&RDEBUG_SHADE)
		bu_log("%s value %s ", name, value);
	/* reconvert with optional units */
	*p = bu_mm_value(value);

	if (rdebug&RDEBUG_SHADE)
		bu_log(" %g\n", *p);

}

void
noise_deg_to_rad(register const struct bu_structparse *sdp, register const char *name, char *base, const char *value)
						/* structure description */
						/* struct member name */
						/* begining of structure */
						/* string containing value */
{
	double *p = (double *)(base+sdp->sp_offset);

	/* reconvert with optional units */
	*p = *p * (bn_pi / 180.0);
}

/*
 * the shader specific structure contains all variables which are unique
 * to any particular use of the shader.
 */
struct noise_specific {
	long	magic;	/* magic # for memory validity check, must come 1st */
	double	lacunarity;
	double	h_val;
	double	octaves;
	double	size;
	double	max_angle;
	point_t	vscale;	/* size of noise coordinate space */
	vect_t	delta;
	mat_t	m_to_sh;	/* model to shader space matrix */
	mat_t	sh_to_m;	/* shader to model space matrix */
	double	max_delta;
	double	nsd;
	double	minval;		/* don't use noise value less than this */
	int	shader_number;
};

/* The default values for the variables in the shader specific structure */
static const
struct noise_specific noise_defaults = {
	noise_MAGIC,
	2.1753974,	/* lacunarity */
	1.0,		/* h_val */
	4.0,		/* octaves */
	1.0,		/* size */
	1.57079632679489661923,		/* max_angle M_PI_2 */
	{ 1.0, 1.0, 1.0 },		/* vscale */
	{ 1000.0, 1000.0, 1000.0 },	/* delta into noise space */
	{	0.0, 0.0, 0.0, 0.0,	/* m_to_sh */
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0 },
	{	0.0, 0.0, 0.0, 0.0,	/* sh_to_m */
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0 },
	0.0,				/* max_delta */
	0.0,				/* nsd */
	0.0,				/* minval */
	0				/* shader_number */
	};

#define SHDR_NULL	((struct noise_specific *)0)
#define SHDR_O(m)	bu_offsetof(struct noise_specific, m)
#define SHDR_AO(m)	bu_offsetofarray(struct noise_specific, m)


/* description of how to parse/print the arguments to the shader
 * There is at least one line here for each variable in the shader specific
 * structure above
 */
struct bu_structparse noise_print_tab[] = {
	{"%f",	1, "lacunarity",	SHDR_O(lacunarity),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "H", 		SHDR_O(h_val),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "octaves", 		SHDR_O(octaves),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  3, "delta",		SHDR_AO(delta),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  1, "size",		SHDR_O(size),		bu_mm_cvt },
	{"%f",  1, "angle",		SHDR_O(max_angle),	noise_deg_to_rad },
	{"%f",  3, "vscale",		SHDR_AO(vscale),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  1, "min",		SHDR_O(minval),		BU_STRUCTPARSE_FUNC_NULL },
	{"",	0, (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};

struct bu_structparse noise_parse_tab[] = {
	{"i",	bu_byteoffset(noise_print_tab[0]), "noise_print_tab", 0, BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "lacunarity",	SHDR_O(lacunarity),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "l",			SHDR_O(lacunarity),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "H", 		SHDR_O(h_val),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "octaves", 		SHDR_O(octaves),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "o", 		SHDR_O(octaves),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  3, "delta",		SHDR_AO(delta),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  3, "d",			SHDR_AO(delta),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  1, "size",		SHDR_O(size),		bu_mm_cvt },
	{"%f",  1, "s",			SHDR_O(size),		bu_mm_cvt },
	{"%f",  1, "angle",		SHDR_O(max_angle),	noise_deg_to_rad },
	{"%f",  1, "ang",		SHDR_O(max_angle),	noise_deg_to_rad },
	{"%f",  1, "a",			SHDR_O(max_angle),	noise_deg_to_rad },
	{"%f",  3, "vscale",		SHDR_AO(vscale),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  3, "vs",		SHDR_AO(vscale),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  3, "v",			SHDR_AO(vscale),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  1, "min",		SHDR_O(minval),		BU_STRUCTPARSE_FUNC_NULL },
	{"",	0, (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};

HIDDEN int	noise_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip), noise_render(),
		fbmbump_render(), turbump_render(),
		fbmcolor_render(), turcolor_render(),
		fractal_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp);
HIDDEN void	noise_print(register struct region *rp, char *dp), noise_free(char *cp);

/* The "mfuncs" structure defines the external interface to the shader.
 * Note that more than one shader "name" can be associated with a given
 * shader by defining more than one mfuncs struct in this array.
 * See sh_phong.c for an example of building more than one shader "name"
 * from a set of source functions.  There you will find that "glass" "mirror"
 * and "plastic" are all names for the same shader with different default
 * values for the parameters.
 *
 * WARNING:  The order of this table is critical for these shaders.
 */
struct mfuncs noise_mfuncs[] = {
	{MF_MAGIC,	"gravel",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render,	noise_print,	noise_free },

	{MF_MAGIC,	"fbmbump",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render,	noise_print,	noise_free },

	{MF_MAGIC,	"turbump",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render, noise_print,	noise_free },

	{MF_MAGIC,	"fbmcolor",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render, noise_print,	noise_free },

	{MF_MAGIC,	"turcolor",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render, noise_print,	noise_free },

	{MF_MAGIC,	"grunge",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render, noise_print,	noise_free },

	{MF_MAGIC,	"turcombo",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render, noise_print,	noise_free },

	{MF_MAGIC,	"fbmcombo",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render,	noise_print,	noise_free },

	{MF_MAGIC,	"flash",	0,	MFI_NORMAL|MFI_HIT|MFI_UV, 0,
	noise_setup,	fractal_render, noise_print,	noise_free },

	{0,		(char *)0,	0,	0,		0,
	0,		0,		0,		0 }
};


/*	G R A V E L _ S E T U P
 *
 *	This routine is called (at prep time)
 *	once for each region which uses this shader.
 *	Any shader-specific initialization should be done here.
 */
HIDDEN int
noise_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip)


				/* pointer to reg_udata in *rp */

				/* New since 4.4 release */
{
	register struct noise_specific	*noise_sp;
	mat_t	tmp;
	mat_t model_to_region;
	int i;

	/* check the arguments */
	RT_CHECK_RTI(rtip);
	BU_CK_VLS( matparm );
	RT_CK_REGION(rp);


	if (rdebug&RDEBUG_SHADE)
		bu_log("noise_setup(%s, %s) (%s)\n",
			rp->reg_name, bu_vls_addr(matparm),
			rp->reg_mater.ma_shader);

	/* Get memory for the shader parameters and shader-specific data */
	BU_GETSTRUCT( noise_sp, noise_specific );
	*dpp = (char *)noise_sp;

	/* initialize the default values for the shader */
	memcpy(noise_sp, &noise_defaults, sizeof(struct noise_specific));

	/* parse the user's arguments for this use of the shader. */
	if (bu_struct_parse( matparm, noise_parse_tab, (char *)noise_sp ) < 0 )
		return(-1);

	/* figure out which shader is really being called */
	for (i = 0 ; noise_mfuncs[i].mf_name ; i++ ) {
		if (!strcmp(noise_mfuncs[i].mf_name, mfp->mf_name))
			goto found;
	}
	bu_log("shader name \"%s\" not recognized, assuming \"%s\"\n",
		mfp->mf_name, noise_mfuncs[0].mf_name);
	i = 0;
found:
	noise_sp->shader_number = i;

	db_region_mat(model_to_region, rtip->rti_dbip, rp->reg_name, &rt_uniresource);

	MAT_IDN(tmp);
	if (noise_sp->size != 1.0) {
		/* the user sets "size" to the size of the biggest
		 * noise-space blob in model coordinates
		 */
		tmp[0] = tmp[5] = tmp[10] = 1.0/noise_sp->size;
	} else {
		tmp[0] = 1.0/noise_sp->vscale[0];
		tmp[5] = 1.0/noise_sp->vscale[1];
		tmp[10] = 1.0/noise_sp->vscale[2];
	}

	bn_mat_mul(noise_sp->m_to_sh, tmp, model_to_region);

	/* Add any translation within shader/region space */
	MAT_IDN(tmp);
	tmp[MDX] = noise_sp->delta[0];
	tmp[MDY] = noise_sp->delta[1];
	tmp[MDZ] = noise_sp->delta[2];
	bn_mat_mul2(tmp, noise_sp->m_to_sh);

	bn_mat_inv(noise_sp->sh_to_m, noise_sp->m_to_sh);

	noise_sp->nsd = 1.0 /
		pow(noise_sp->lacunarity, noise_sp->octaves);

	if (rdebug&RDEBUG_SHADE) {
		bu_struct_print( " Parameters:", noise_print_tab, (char *)noise_sp );
		bn_mat_print( "m_to_sh", noise_sp->m_to_sh );
	}

	return(1);
}

/*
 *	G R A V E L _ P R I N T
 */
HIDDEN void
noise_print(register struct region *rp, char *dp)
{
	bu_struct_print( rp->reg_name, noise_print_tab, (char *)dp );
}

/*
 *	G R A V E L _ F R E E
 */
HIDDEN void
noise_free(char *cp)
{
	bu_free( cp, "noise_specific" );
}
#define RESCALE_NOISE(n) n += 1.0

/*
 *	N O R M _ N O I S E
 *
 *	Apply a noise function to the surface normal
 */
static void
norm_noise(fastf_t *pt, double val, struct noise_specific *noise_sp, double (*func) (/* ??? */), struct shadework *swp, int rescale)


				/* defined in material.h */

{
	vect_t N, tmp;
	point_t u_pt, v_pt;
	vect_t u_vec, v_vec;
	double u_val, v_val;
	mat_t u_mat, v_mat;

	/* dork the normal around
	 * Convert the normal to shader space, get u,v coordinate system
	 */

	if (rdebug&RDEBUG_SHADE) {
		VPRINT("Model space Normal", swp->sw_hit.hit_normal);
	}
	MAT4X3VEC(N, noise_sp->m_to_sh, swp->sw_hit.hit_normal);
	VUNITIZE(N);
	if (rdebug&RDEBUG_SHADE) {
		VPRINT("Shader space Normal", N);
	}

	/* construct coordinate system from vectors perpendicular to normal */
	bn_vec_perp(u_vec, N);
	VCROSS(v_vec, N, u_vec);

	/* compute noise function at position slightly off pt in both
	 * U and V directions to get change in values
	 */
	VJOIN1(u_pt, pt, noise_sp->nsd, u_vec);
	u_val = func(u_pt, noise_sp->h_val, noise_sp->lacunarity,
		noise_sp->octaves);

	if (rescale) RESCALE_NOISE(u_val);

	VJOIN1(v_pt, pt, noise_sp->nsd, v_vec);
	v_val = func(v_pt, noise_sp->h_val, noise_sp->lacunarity,
		noise_sp->octaves);

	if (rescale) RESCALE_NOISE(v_val);

	/* construct normal rotation about U and V vectors based upon
	 * variation in surface in each direction.  Apply the result to
	 * the surface normal.
	 */
	bn_mat_arb_rot(u_mat, pt, u_vec, (val - v_val) * noise_sp->max_angle);
	MAT4X3VEC(tmp, u_mat, N);

	bn_mat_arb_rot(v_mat, pt, v_vec, (val - u_val) * noise_sp->max_angle);

	MAT4X3VEC(N, v_mat, tmp);

	if (rdebug&RDEBUG_SHADE) {
		VPRINT("old normal", swp->sw_hit.hit_normal);
	}

	MAT4X3VEC(swp->sw_hit.hit_normal, noise_sp->sh_to_m, N);
	VUNITIZE(swp->sw_hit.hit_normal);
	if (rdebug&RDEBUG_SHADE) {
		VPRINT("new normal", swp->sw_hit.hit_normal);
	}
}

/*
 *	F R A C T A L _ R E N D E R
 *
 *	This is called (from viewshade() in shade.c) once for each hit point
 *	to be shaded.  The purpose here is to fill in values in the shadework
 *	structure.
 */
int
fractal_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp)


				/* defined in material.h */
				/* ptr to the shader-specific struct */
{
	register struct noise_specific *noise_sp =
		(struct noise_specific *)dp;
	point_t pt;
	double val;

	/* check the validity of the arguments we got */
	RT_AP_CHECK(ap);
	RT_CHECK_PT(pp);
	CK_noise_SP(noise_sp);

	if (rdebug&RDEBUG_SHADE)
		bu_struct_print( "noise_render Parameters:", noise_print_tab, (char *)noise_sp );

	/* If we are performing the shading in "region" space, we must
	 * transform the hit point from "model" space to "region" space.
	 * See the call to db_region_mat in noise_setup().
	 */
	MAT4X3PNT(pt, noise_sp->m_to_sh, swp->sw_hit.hit_point);

	if (rdebug&RDEBUG_SHADE) {
		bu_log("%s:%d noise_render(%s)  model:(%g %g %g) shader:(%g %g %g)\n",
		__FILE__, __LINE__,
		noise_mfuncs[noise_sp->shader_number].mf_name,
		V3ARGS(swp->sw_hit.hit_point),
		V3ARGS(pt) );
	}

	switch (noise_sp->shader_number) {
	case 0:	/* gravel */
	case 6: /* turcombo */
		val = bn_noise_turb(pt, noise_sp->h_val,
			noise_sp->lacunarity, noise_sp->octaves);
		if (val < noise_sp->minval )  val = noise_sp->minval;
#ifdef RT_MULTISPECTRAL
		swp->sw_temperature *= val;
#else
		VSCALE(swp->sw_color, swp->sw_color, val);
#endif
		norm_noise(pt, val, noise_sp, bn_noise_turb, swp, 0);
		break;
	case 1:	/* fbmbump */
		val = bn_noise_fbm(pt, noise_sp->h_val,
			noise_sp->lacunarity, noise_sp->octaves);
		RESCALE_NOISE(val);
		norm_noise(pt, val, noise_sp, bn_noise_fbm, swp, 1);
		break;
	case 2:	/* turbump */
		val = bn_noise_turb(pt, noise_sp->h_val,
			noise_sp->lacunarity, noise_sp->octaves);

		norm_noise(pt, val, noise_sp, bn_noise_turb, swp, 0);
		break;
	case 3:	/* fbmcolor */
		val = bn_noise_fbm(pt, noise_sp->h_val,
			noise_sp->lacunarity, noise_sp->octaves);
		RESCALE_NOISE(val);
		if (val < noise_sp->minval )  val = noise_sp->minval;
#ifdef RT_MULTISPECTRAL
		swp->sw_temperature *= val;
#else
		VSCALE(swp->sw_color, swp->sw_color, val);
#endif
		break;
	case 4:	/* turcolor */
		val = bn_noise_turb(pt, noise_sp->h_val,
			noise_sp->lacunarity, noise_sp->octaves);
		if (val < noise_sp->minval )  val = noise_sp->minval;
#ifdef RT_MULTISPECTRAL
		swp->sw_temperature *= val;
#else
		VSCALE(swp->sw_color, swp->sw_color, val);
#endif
		break;
	case 5: /* grunge */
	case 7: /* fbmcombo */
		val = bn_noise_fbm(pt, noise_sp->h_val,
			noise_sp->lacunarity, noise_sp->octaves);
		RESCALE_NOISE(val);
		if (val < noise_sp->minval )  val = noise_sp->minval;
#ifdef RT_MULTISPECTRAL
		swp->sw_temperature *= val;
#else
		VSCALE(swp->sw_color, swp->sw_color, val);
#endif
		norm_noise(pt, val, noise_sp, bn_noise_fbm, swp, 1);
		break;

	case 8: /* flash */
		val = bn_noise_fbm(pt, noise_sp->h_val,
			noise_sp->lacunarity, noise_sp->octaves);

		val = 1.0 - val;
		if (val < noise_sp->minval )  val = noise_sp->minval;

#ifdef RT_MULTISPECTRAL
		swp->sw_temperature *= val;
#else
		VSCALE(swp->sw_color, swp->sw_color, val);
#endif
		swp->sw_temperature = val * 2000.0;
		break;
	}


	/* shader must perform transmission/reflection calculations
	 *
	 * 0 < swp->sw_transmit <= 1 causes transmission computations
	 * 0 < swp->sw_reflect <= 1 causes reflection computations
	 */
	if (swp->sw_reflect > 0 || swp->sw_transmit > 0 )
		(void)rr_render( ap, pp, swp );

	return(1);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.18
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.17 2007/05/14 21:04:31 brlcad Exp $ (ARL)";
d267 1
a267 1
	memcpy(noise_sp, &noise_defaults, sizeof(struct noise_specific) );
@


14.17
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.16 2007/01/27 01:41:37 brlcad Exp $ (ARL)";
d44 1
a44 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.16
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.15 2007/01/23 01:13:36 brlcad Exp $ (ARL)";
d79 1
a79 1
	*p = rt_mm_value(value);
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.14 2007/01/20 14:36:53 brlcad Exp $ (ARL)";
d69 4
a72 4
                                    	     	/* structure description */
                   			      	/* struct member name */
    					      	/* begining of structure */
          				       	/* string containing value */
d88 4
a91 4
                                    	     	/* structure description */
                   			      	/* struct member name */
    					      	/* begining of structure */
          				       	/* string containing value */
d246 1
a246 1
    			      	/* pointer to reg_udata in *rp */
d248 1
a248 1
           		      	/* New since 4.4 release */
d352 1
a352 3


                	     	/* defined in material.h */
d426 2
a427 2
                	     	/* defined in material.h */
    			    	/* ptr to the shader-specific struct */
@


14.14
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.13 2006/01/23 00:35:08 brlcad Exp $ (ARL)";
@


14.13
log
@include stddef.h for bu_offset's usage of offset
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.12 2006/01/18 06:46:16 brlcad Exp $ (ARL)";
@


14.12
log
@update copyright to 2006
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.11 2005/10/23 04:44:34 brlcad Exp $ (ARL)";
d43 1
a43 2


d46 3
a48 1
#include <string.h>
d51 1
d147 1
a147 1
#define SHDR_O(m)	offsetof(struct noise_specific, m)
@


14.11
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.10 2005/03/30 07:14:09 brlcad Exp $ (ARL)";
@


14.10
log
@consistency on the #ifdef inclusions of RT_MULTISPECTRAL, clean up the spectrum extern declarations now that spectrum is now a liboptical global.
@
text
@d32 1
a32 1
 *  
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.9 2005/03/28 06:31:37 bob1961 Exp $ (ARL)";
d243 2
a244 2
                      	    
             		         
d246 1
a246 1
             		     
d312 1
a312 1
	noise_sp->nsd = 1.0 / 
d349 4
a352 4
           
           
                                
                 
d354 1
a354 1
            
d394 1
a394 1
	/* construct normal rotation about U and V vectors based upon 
d425 2
a426 2
                  	    
                	    
d443 1
a443 1
	/* If we are performing the shading in "region" space, we must 
d450 1
a450 1
		bu_log("%s:%d noise_render(%s)  model:(%g %g %g) shader:(%g %g %g)\n", 
@


14.10.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d243 2
a244 2


d246 1
a246 1

d312 1
a312 1
	noise_sp->nsd = 1.0 /
d349 4
a352 4




d354 1
a354 1

d394 1
a394 1
	/* construct normal rotation about U and V vectors based upon
d425 2
a426 2


d443 1
a443 1
	/* If we are performing the shading in "region" space, we must
d450 1
a450 1
		bu_log("%s:%d noise_render(%s)  model:(%g %g %g) shader:(%g %g %g)\n",
@


14.9
log
@Add code to allow liboptical to be a Windows DLL
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.8 2005/01/30 20:30:55 brlcad Exp $ (ARL)";
d463 1
a463 1
#if RT_MULTISPECTRAL
d487 1
a487 1
#if RT_MULTISPECTRAL
d497 1
a497 1
#if RT_MULTISPECTRAL
d509 1
a509 1
#if RT_MULTISPECTRAL
d524 1
a524 1
#if RT_MULTISPECTRAL
@


14.8
log
@update copyright to 2005
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_noise.c,v 14.7 2004/12/21 07:32:30 morrison Exp $ (ARL)";
a54 2
#include "shadefuncs.h"
#include "shadework.h"
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_noise.c,v 14.6 2004/12/21 06:58:42 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a35 2
 *  
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_noise.c,v 14.5 2004/12/21 06:44:33 morrison Exp $ (ARL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a37 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_noise.c,v 14.4 2004/12/21 06:18:44 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a36 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
d43 1
a43 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_noise.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_noise.c,v 14.2 2004/12/21 04:03:25 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_noise.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *	S H _ N O I S E . C
d47 1
a47 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_noise.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (ARL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_noise.c,v 1.1 2004/05/20 15:19:51 morrison Exp $ (ARL)";
d536 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/liboptical/sh_noise.c,v 1.35 2004/05/10 15:30:45 erikg Exp $ (ARL)";
d31 1
a31 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

