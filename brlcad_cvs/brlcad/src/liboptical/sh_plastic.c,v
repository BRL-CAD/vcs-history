head	14.22;
access;
symbols
	rel-7-10-4:14.21
	STABLE:14.21.0.2
	stable-branch:14.10
	rel-7-10-2:14.21
	rel-7-10-0:14.19
	rel-7-8-4:14.16
	rel-7-8-2:14.15
	rel-7-8-0:14.15
	trimnurbs-branch:14.14.0.2
	help:14.14
	temp_tag:14.12
	bobWinPort-20051223-freeze:14.10
	postmerge-20051223-bobWinPort:14.12
	premerge-20051223-bobWinPort:14.12
	rel-7-6-6:14.12
	rel-7-6-4:14.12
	rel-7-6-2:14.10
	rel-7-6-branch:14.10.0.6
	rel-7-6-0:14.10
	rel-7-4-2:14.10
	rel-7-4-branch:14.10.0.4
	bobWinPort:14.10.0.2
	rel-7-4-0:14.10
	rel-7-2-6:14.10
	rel-7-2-4:14.10
	rel-7-2-2:14.10
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.22
date	2007.12.17.02.16.54;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.04.15.03.24.50;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.04.15.03.21.08;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.01.27.01.41.37;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.01.20.14.36.53;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2006.08.10.01.16.51;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2006.04.06.20.06.48;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.01.23.00.35.08;	author brlcad;	state Exp;
branches
	14.14.2.1;
next	14.13;

14.13
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.09.19.18.34.54;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.03.30.07.14.09;	author brlcad;	state Exp;
branches
	14.10.6.1;
next	14.9;

14.9
date	2005.03.28.06.31.37;	author bob1961;	state Exp;
branches;
next	14.8;

14.8
date	2005.01.30.20.30.55;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.32.30;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.42;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.33;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.03.25;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.51;	author morrison;	state Exp;
branches;
next	;

14.10.6.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;

14.14.2.1
date	2006.04.07.19.30.22;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.22
log
@removal of the FAST declaration throughout.  now using register or letting the compiler sort things out.
@
text
@/*                    S H _ P L A S T I C . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file sh_plastic.c
 *			P L A S T I C
 *
 *  Notes -
 *	The normals on all surfaces point OUT of the solid.
 *	The incomming light rays point IN.  Thus the sign change.
 *
 *  Authors -
 *	Michael John Muuss
 *	Gary S. Moss
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.21 2007/04/15 03:24:50 brlcad Exp $ (ARL)";
#endif

#include "common.h"

#include <stddef.h>
#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"
#include "rtprivate.h"
#include "light.h"
#include "plastic.h"
#include "photonmap.h"

#ifdef RT_MULTISPECTRAL
#  include "spectrum.h"
extern const struct bn_table	*spectrum;
#endif


extern int rr_render(struct application	*ap,
		     struct partition	*pp,
		     struct shadework   *swp);
/* Fast approximation to specular term */
#define PHAST_PHONG 1	/* See Graphics Gems IV pg 387 */

/* from view.c */
extern double AmbientIntensity;


struct bu_structparse phong_parse[] = {
    {"%d",	1, "shine",		PL_O(shine),		BU_STRUCTPARSE_FUNC_NULL },
    {"%d",	1, "sh",		PL_O(shine),		BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "specular",		PL_O(wgt_specular),	BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "sp",		PL_O(wgt_specular),	BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "diffuse",		PL_O(wgt_diffuse),	BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "di",		PL_O(wgt_diffuse),	BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "transmit",		PL_O(transmit),		BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "tr",		PL_O(transmit),		BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "reflect",		PL_O(reflect),		BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "re",		PL_O(reflect),		BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "ri",		PL_O(refrac_index),	BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "extinction_per_meter", PL_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "extinction",	PL_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	1, "ex",		PL_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	3, "emission",		PL_O(emission),		BU_STRUCTPARSE_FUNC_NULL },
    {"%f",	3, "em",		PL_O(emission),		BU_STRUCTPARSE_FUNC_NULL },
    {"",	0, (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};

HIDDEN int phong_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip), mirror_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip), glass_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip);
HIDDEN int phong_render(register struct application *ap, struct partition *pp, struct shadework *swp, char *dp);
HIDDEN void	phong_print(register struct region *rp, char *dp);
HIDDEN void	phong_free(char *cp);

/* This can't be const, so the forward link can be written later */
struct mfuncs phg_mfuncs[] = {
    {MF_MAGIC,	"default",	0,		MFI_NORMAL,	0,
     phong_setup,	phong_render,	phong_print,	phong_free },

    {MF_MAGIC,	"phong",	0,		MFI_NORMAL,	0,
     phong_setup,	phong_render,	phong_print,	phong_free },

    {MF_MAGIC,	"plastic",	0,		MFI_NORMAL,	0,
     phong_setup,	phong_render,	phong_print,	phong_free },

    {MF_MAGIC,	"mirror",	0,		MFI_NORMAL,	0,
     mirror_setup,	phong_render,	phong_print,	phong_free },

    {MF_MAGIC,	"glass",	0,		MFI_NORMAL,	0,
     glass_setup,	phong_render,	phong_print,	phong_free },

    {0,		(char *)0,	0,		0,	0,
     0,		0,		0,		0 }
};

#ifndef PHAST_PHONG
extern double phg_ipow();
#endif

#define RI_AIR		1.0    /* Refractive index of air.		*/

/*
 *			P H O N G _ S E T U P
 */
HIDDEN int
phong_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip)
{
    register struct phong_specific *pp;

    BU_CK_VLS( matparm );
    BU_GETSTRUCT( pp, phong_specific );
    *dpp = (char *)pp;

    pp->magic = PL_MAGIC;
    pp->shine = 10;
    pp->wgt_specular = 0.7;
    pp->wgt_diffuse = 0.3;
    pp->transmit = 0.0;
    pp->reflect = 0.0;
    pp->refrac_index = RI_AIR;
    pp->extinction = 0.0;
    pp->mfp = mfp;

    if (bu_struct_parse( matparm, phong_parse, (char *)pp ) < 0 )  {
	bu_free( (char *)pp, "phong_specific" );
	return(-1);
    }

    if (pp->transmit > 0 )
	rp->reg_transmit = 1;
    return(1);
}

/*
 *			M I R R O R _ S E T U P
 */
HIDDEN int
mirror_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip)
{
    register struct phong_specific *pp;

    BU_CK_VLS( matparm );
    BU_GETSTRUCT( pp, phong_specific );
    *dpp = (char *)pp;

    pp->magic = PL_MAGIC;
    pp->shine = 4;
    pp->wgt_specular = 0.6;
    pp->wgt_diffuse = 0.4;
    pp->transmit = 0.0;
    pp->reflect = 0.75;
    pp->refrac_index = 1.65;
    pp->extinction = 0.0;
    pp->mfp = mfp;

    if (bu_struct_parse( matparm, phong_parse, (char *)pp ) < 0 )  {
	bu_free( (char *)pp, "phong_specific" );
	return(-1);
    }

    if (pp->transmit > 0 )
	rp->reg_transmit = 1;
    return(1);
}

/*
 *			G L A S S _ S E T U P
 */
HIDDEN int
glass_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip)
{
    register struct phong_specific *pp;

    BU_CK_VLS( matparm );
    BU_GETSTRUCT( pp, phong_specific );
    *dpp = (char *)pp;

    pp->magic = PL_MAGIC;
    pp->shine = 4;
    pp->wgt_specular = 0.7;
    pp->wgt_diffuse = 0.3;
    pp->transmit = 0.8;
    pp->reflect = 0.1;
    /* leaving 0.1 for diffuse/specular */
    pp->refrac_index = 1.65;
    pp->extinction = 0.0;
    pp->mfp = mfp;

    if (bu_struct_parse( matparm, phong_parse, (char *)pp ) < 0 )  {
	bu_free( (char *)pp, "phong_specific" );
	return(-1);
    }

    if (pp->transmit > 0 )
	rp->reg_transmit = 1;
    return(1);
}

/*
 *			P H O N G _ P R I N T
 */
HIDDEN void
phong_print(register struct region *rp, char *dp)
{
    bu_struct_print(rp->reg_name, phong_parse, (char *)dp);
}

/*
 *			P H O N G _ F R E E
 */
HIDDEN void
phong_free(char *cp)
{
    bu_free( cp, "phong_specific" );
}


/*
 *			P H O N G _ R E N D E R
 *
 Color pixel based on the energy of a point light source (Eps)
 plus some diffuse illumination (Epd) reflected from the point
 <x,y> :

 E = Epd + Eps		(1)

 The energy reflected from diffuse illumination is the product
 of the reflectance coefficient at point P (Rp) and the diffuse
 illumination (Id) :

 Epd = Rp * Id		(2)

 The energy reflected from the point light source is calculated
 by the sum of the diffuse reflectance (Rd) and the specular
 reflectance (Rs), multiplied by the intensity of the light
 source (Ips) :

 Eps = (Rd + Rs) * Ips	(3)

 The diffuse reflectance is calculated by the product of the
 reflectance coefficient (Rp) and the cosine of the angle of
 incidence (I) :

 Rd = Rp * cos(I)	(4)

 The specular reflectance is calculated by the product of the
 specular reflectance coeffient and (the cosine of the angle (S)
 raised to the nth power) :

 Rs = W(I) * cos(S)**n	(5)

 Where,
 I is the angle of incidence.
 S is the angle between the reflected ray and the observer.
 W returns the specular reflection coefficient as a function
 of the angle of incidence.
 n (roughly 1 to 10) represents the shininess of the surface.
 *
 This is the heart of the lighting model which is based on a model
 developed by Bui-Tuong Phong, [see Wm M. Newman and R. F. Sproull,
 "Principles of Interactive Computer Graphics", 	McGraw-Hill, 1979]

 Er = Ra(m)*cos(Ia) + Rd(m)*cos(I1) + W(I1,m)*cos(s)^^n
 where,

 Er	is the energy reflected in the observer's direction.
 Ra	is the diffuse reflectance coefficient at the point
 of intersection due to ambient lighting.
 Ia	is the angle of incidence associated with the ambient
 light source (angle between ray direction (negated) and
 surface normal).
 Rd	is the diffuse reflectance coefficient at the point
 of intersection due to primary lighting.
 I1	is the angle of incidence associated with the primary
 light source (angle between light source direction and
 surface normal).
 m	is the material identification code.
 W	is the specular reflectance coefficient,
 a function of the angle of incidence, range 0.0 to 1.0,
 for the material.
 s	is the angle between the reflected ray and the observer.
 `	n	'Shininess' of the material,  range 1 to 10.
*/
HIDDEN int
phong_render(register struct application *ap, struct partition *pp, struct shadework *swp, char *dp)
{
    register struct light_specific *lp;
#ifndef RT_MULTISPECTRAL
    register	fastf_t	*intensity;
#endif
    register	fastf_t	refl;
    register	fastf_t	*to_light;
    register	int	i;
    register	fastf_t	cosine;
    vect_t			work,color;
    vect_t			reflected;
    point_t			pt;
    fastf_t			dist;

#ifdef RT_MULTISPECTRAL
    struct bn_tabdata	*ms_matcolor = BN_TABDATA_NULL;
#else
    point_t	matcolor;		/* Material color */
#endif
    struct phong_specific *ps =
	(struct phong_specific *)dp;

    if (ps->magic != PL_MAGIC )  bu_log("phong_render: bad magic\n");

    if (rdebug&RDEBUG_SHADE)
	bu_struct_print( "phong_render", phong_parse, (char *)ps );

    swp->sw_transmit = ps->transmit;
    swp->sw_reflect = ps->reflect;
    swp->sw_refrac_index = ps->refrac_index;
    swp->sw_extinction = ps->extinction;
#if SW_SET_TRANSMIT
    if (swp->sw_phong_set_vector & SW_SET_TRANSMIT) swp->sw_transmit = swp->sw_phong_transmit;
    if (swp->sw_phong_set_vector & SW_SET_REFLECT) swp->sw_reflect = swp->sw_phong_reflect;
    if (swp->sw_phong_set_vector & SW_SET_REFRAC_INDEX) swp->sw_refrac_index = swp->sw_phong_ri;
    if (swp->sw_phong_set_vector & SW_SET_EXTINCTION) swp->sw_extinction = swp->sw_phong_extinction;
#endif /* SW_SET_TRANSMIT */
    if (swp->sw_xmitonly ) {
	if (swp->sw_xmitonly > 1 )
	    return(1);	/* done -- wanted parameters only */
	if (swp->sw_reflect > 0 || swp->sw_transmit > 0 ) {
	    if (rdebug&RDEBUG_SHADE)
		bu_log("calling rr_render from phong, sw_xmitonly\n");
	    (void)rr_render( ap, pp, swp );
	}
	return(1);	/* done */
    }


#ifdef RT_MULTISPECTRAL
    ms_matcolor = bn_tabdata_dup( swp->msw_color );
#else
    VMOVE( matcolor, swp->sw_color );
#endif

    /* Photon Mapping */
#ifndef RT_MULTISPECTRAL
    color[0]= swp->sw_color[0];
    color[1]= swp->sw_color[1];
    color[2]= swp->sw_color[2];
#endif

#ifndef RT_MULTISPECTRAL
    if (!PM_Visualize)
#endif
	{
	    /* Diffuse reflectance from "Ambient" light source (at eye) */
	    if ((cosine = -VDOT( swp->sw_hit.hit_normal, ap->a_ray.r_dir )) > 0.0 )  {
		if (cosine > 1.00001 )  {
		    bu_log("cosAmb=1+%g %s surfno=%d (x%d,y%d,lvl%d)\n",
			   cosine-1,
			   pp->pt_inseg->seg_stp->st_dp->d_namep,
			   swp->sw_hit.hit_surfno,
			   ap->a_x, ap->a_y, ap->a_level);
		    VPRINT(" normal", swp->sw_hit.hit_normal);
		    VPRINT(" r_dir ", ap->a_ray.r_dir);
		    cosine = 1;
		}
#if SW_SET_TRANSMIT
		if (swp->sw_phong_set_vector & SW_SET_AMBIENT) {
		    cosine *= swp->sw_phong_ambient;
		} else {
		    cosine *= AmbientIntensity;
		}
#else
		cosine *= AmbientIntensity;
#endif
#ifdef RT_MULTISPECTRAL
		bn_tabdata_scale( swp->msw_color, ms_matcolor, cosine );
#else
		VSCALE( swp->sw_color, matcolor, cosine );
#endif
	    } else {
#ifdef RT_MULTISPECTRAL
		bn_tabdata_constval( swp->msw_color, 0.0 );
#else
		VSETALL( swp->sw_color, 0 );
#endif
	    }

	    /* Emission.  0..1 is normal range, -1..0 sucks light out, like OpenGL */
#ifdef RT_MULTISPECTRAL
	    {
		float emission[3];
		struct bn_tabdata	*ms_emission = BN_TABDATA_NULL;
		VMOVE(emission,ps->emission);
#if SW_SET_TRANSMIT
		if (swp->sw_phong_set_vector & SW_SET_EMISSION) {
		    VSETALL(emission, swp->sw_phong_emission);
		}
#endif
		/* XXX Really should get a curve at prep, not expand RGB samples */
		BN_GET_TABDATA( ms_emission, spectrum );
		rt_spect_reflectance_rgb( ms_emission, emission );
		bn_tabdata_add( swp->msw_color, swp->msw_color, ms_emission );
		bn_tabdata_free( ms_emission );
	    }
#else
#if SW_SET_TRANSMIT
	    if (swp->sw_phong_set_vector & SW_SET_EMISSION) {
		vect_t tmp;
		VSETALL(tmp,swp->sw_phong_emission);
		VADD2( swp->sw_color, swp->sw_color, tmp);
	    } else {
		VADD2( swp->sw_color, swp->sw_color, ps->emission );
	    }
#else
	    VADD2( swp->sw_color, swp->sw_color, ps->emission );
#endif /* SW_SET_TRANSMIT */
#endif

	    /* With the advent of procedural shaders, the caller can no longer
	     * provide us reliable light visibility information.  The hit point
	     * may have been changed by another shader in a stack.  There is no
	     * way that anyone else can tell us whether lights are visible.
	     */
	    light_obs(ap, swp, ps->mfp->mf_inputs);

	    /* Consider effects of each light source */
	    for( i=ap->a_rt_i->rti_nlights-1; i>=0; i-- )  {

		if ((lp = (struct light_specific *)swp->sw_visible[i]) == LIGHT_NULL )
		    continue;

		if( rdebug & RDEBUG_LIGHT )  {
		    bu_log("phong_render light=%s lightfract=%g\n",
			   lp->lt_name, swp->sw_lightfract[i] );
		}

		/* Light is not shadowed -- add this contribution */
#ifndef RT_MULTISPECTRAL
		intensity = swp->sw_intensity+3*i;
#endif
		to_light = swp->sw_tolight+3*i;

		/* Diffuse reflectance from this light source. */
		if ((cosine=VDOT(swp->sw_hit.hit_normal, to_light)) > 0.0 )  {
		    if (cosine > 1.00001 )  {
			bu_log("cosI=1+%g (x%d,y%d,lvl%d)\n", cosine-1,
			       ap->a_x, ap->a_y, ap->a_level);
			cosine = 1;
		    }
		    /* Get Obj Hit Point For Attenuation */
#ifndef RT_MULTISPECTRAL
		    if (pp && PM_Activated) {
			VJOIN1(pt, ap->a_ray.r_pt, pp->pt_inhit->hit_dist, ap->a_ray.r_dir)
			    dist= sqrt((pt[0]-lp->lt_pos[0])*(pt[0]-lp->lt_pos[0]) + (pt[1]-lp->lt_pos[1])*(pt[1]-lp->lt_pos[1]) + (pt[2]-lp->lt_pos[2])*(pt[2]-lp->lt_pos[2]))/1000.0;
			dist= (1.0/(0.1 + 1.0*dist + 0.01*dist*dist));
			refl= dist * ps->wgt_diffuse * cosine * swp->sw_lightfract[i] * lp->lt_intensity;
			/*				bu_log("pt: [%.3f][%.3f,%.3f,%.3f]\n",dist,pt[0],pt[1],pt[2]);*/
		    } else
#endif
			{
			    refl= ps->wgt_diffuse * swp->sw_lightfract[i] * cosine * lp->lt_fraction;
			}

#ifdef RT_MULTISPECTRAL
		    bn_tabdata_incr_mul3_scale( swp->msw_color,
						lp->lt_spectrum,
						swp->msw_intensity[i],
						ms_matcolor,
						refl );
#else
		    VELMUL3( work, matcolor, lp->lt_color, intensity );
		    VJOIN1( swp->sw_color, swp->sw_color, refl, work );
#endif
		}

		/* Calculate specular reflectance.
		 *	Reflected ray = (2 * cos(i) * Normal) - Incident ray.
		 * 	Cos(s) = Reflected ray DOT Incident ray.
		 */
		cosine *= 2;
		VSCALE( work, swp->sw_hit.hit_normal, cosine );
		VSUB2( reflected, work, to_light );
		if ((cosine = -VDOT( reflected, ap->a_ray.r_dir )) > 0 )  {
		    if (cosine > 1.00001 )  {
			bu_log("cosS=1+%g (x%d,y%d,lvl%d)\n", cosine-1,
			       ap->a_x, ap->a_y, ap->a_level);
			cosine = 1;
		    }
		    refl = ps->wgt_specular * swp->sw_lightfract[i] *
			lp->lt_fraction *
#ifdef PHAST_PHONG
			/* It is unnecessary to compute the actual
			 * exponential here since phong is just a
			 * gross hack.  We approximate re:
			 *  Graphics Gems IV "A Fast Alternative to
			 *  Phong's Specular Model" Pg 385
			 */
			cosine /
			(ps->shine - ps->shine*cosine + cosine);
#else
		    phg_ipow(cosine, ps->shine);
#endif /* PHAST_PHONG */
#ifdef RT_MULTISPECTRAL
		    bn_tabdata_incr_mul2_scale( swp->msw_color,
						lp->lt_spectrum,
						swp->msw_intensity[i],
						refl );
#else
		    VELMUL( work, lp->lt_color, intensity );
		    VJOIN1( swp->sw_color, swp->sw_color, refl, work );
#endif
		}
	    }

#ifndef RT_MULTISPECTRAL
	    if (PM_Activated) {
		IrradianceEstimate(ap, work, swp->sw_hit.hit_point, swp->sw_hit.hit_normal, 100, 100);
		VELMUL(work, work, color);
		VADD2(swp->sw_color, work, swp->sw_color);
		if (swp->sw_color[0] > 1.0) swp->sw_color[0]= 1.0;
		if (swp->sw_color[1] > 1.0) swp->sw_color[1]= 1.0;
		if (swp->sw_color[2] > 1.0) swp->sw_color[2]= 1.0;
	    }

	} else {

	    if (PM_Activated) {
		/*  IrradianceEstimate(work, swp->sw_hit.hit_point, swp->sw_hit.hit_normal, 100, 100);
		    VELMUL(swp->sw_color, work, color);*/
		IrradianceEstimate(ap, swp->sw_color, swp->sw_hit.hit_point, swp->sw_hit.hit_normal, 100, 100);
		if (swp->sw_color[0] > 1.0) swp->sw_color[0]= 1.0;
		if (swp->sw_color[1] > 1.0) swp->sw_color[1]= 1.0;
		if (swp->sw_color[2] > 1.0) swp->sw_color[2]= 1.0;
	    }
#endif
	}


    if (swp->sw_reflect > 0 || swp->sw_transmit > 0 )
	(void)rr_render( ap, pp, swp );

#ifdef RT_MULTISPECTRAL
    bn_tabdata_free(ms_matcolor);
#endif
    return(1);
}


#ifndef PHAST_PHONG
/*
 *  			I P O W
 *
 *  Raise a floating point number to an integer power
 */
double
phg_ipow( d, cnt )
     double d;
     register int cnt;
{
    fastf_t input, result;

    if ((input=d) < 1e-8 )  return(0.0);
    if (cnt < 0 || cnt > 200 )  {
	bu_log("phg_ipow(%g,%d) bad\n", d, cnt);
	return(d);
    }
    result = 1;
    while( cnt-- > 0 )
	result *= input;
    return( result );
}
#endif

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.21
log
@ws
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.20 2007/04/15 03:21:08 brlcad Exp $ (ARL)";
d578 1
a578 1
    FAST fastf_t input, result;
@


14.20
log
@removed the spaced out pointer dereference format inconsistencies
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.19 2007/01/27 01:41:37 brlcad Exp $ (ARL)";
d59 1
d71 17
a87 17
	{"%d",	1, "shine",		PL_O(shine),		BU_STRUCTPARSE_FUNC_NULL },
	{"%d",	1, "sh",		PL_O(shine),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "specular",		PL_O(wgt_specular),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "sp",		PL_O(wgt_specular),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "diffuse",		PL_O(wgt_diffuse),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "di",		PL_O(wgt_diffuse),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "transmit",		PL_O(transmit),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "tr",		PL_O(transmit),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "reflect",		PL_O(reflect),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "re",		PL_O(reflect),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "ri",		PL_O(refrac_index),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "extinction_per_meter", PL_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "extinction",	PL_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "ex",		PL_O(extinction),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	3, "emission",		PL_O(emission),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	3, "em",		PL_O(emission),		BU_STRUCTPARSE_FUNC_NULL },
	{"",	0, (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
d97 2
a98 2
	{MF_MAGIC,	"default",	0,		MFI_NORMAL,	0,
	phong_setup,	phong_render,	phong_print,	phong_free },
d100 2
a101 2
	{MF_MAGIC,	"phong",	0,		MFI_NORMAL,	0,
	phong_setup,	phong_render,	phong_print,	phong_free },
d103 2
a104 2
	{MF_MAGIC,	"plastic",	0,		MFI_NORMAL,	0,
	phong_setup,	phong_render,	phong_print,	phong_free },
d106 2
a107 2
	{MF_MAGIC,	"mirror",	0,		MFI_NORMAL,	0,
	mirror_setup,	phong_render,	phong_print,	phong_free },
d109 2
a110 2
	{MF_MAGIC,	"glass",	0,		MFI_NORMAL,	0,
	glass_setup,	phong_render,	phong_print,	phong_free },
d112 2
a113 2
	{0,		(char *)0,	0,		0,	0,
	0,		0,		0,		0 }
a126 3


				/* New since 4.4 release */
d128 1
a128 20
	register struct phong_specific *pp;

	BU_CK_VLS( matparm );
	BU_GETSTRUCT( pp, phong_specific );
	*dpp = (char *)pp;

	pp->magic = PL_MAGIC;
	pp->shine = 10;
	pp->wgt_specular = 0.7;
	pp->wgt_diffuse = 0.3;
	pp->transmit = 0.0;
	pp->reflect = 0.0;
	pp->refrac_index = RI_AIR;
	pp->extinction = 0.0;
	pp->mfp = mfp;

	if (bu_struct_parse( matparm, phong_parse, (char *)pp ) < 0 )  {
		bu_free( (char *)pp, "phong_specific" );
		return(-1);
	}
d130 22
a151 3
	if (pp->transmit > 0 )
		rp->reg_transmit = 1;
	return(1);
a158 3


				/* New since 4.4 release */
d160 1
a160 20
	register struct phong_specific *pp;

	BU_CK_VLS( matparm );
	BU_GETSTRUCT( pp, phong_specific );
	*dpp = (char *)pp;

	pp->magic = PL_MAGIC;
	pp->shine = 4;
	pp->wgt_specular = 0.6;
	pp->wgt_diffuse = 0.4;
	pp->transmit = 0.0;
	pp->reflect = 0.75;
	pp->refrac_index = 1.65;
	pp->extinction = 0.0;
	pp->mfp = mfp;

	if (bu_struct_parse( matparm, phong_parse, (char *)pp ) < 0 )  {
		bu_free( (char *)pp, "phong_specific" );
		return(-1);
	}
d162 22
a183 3
	if (pp->transmit > 0 )
		rp->reg_transmit = 1;
	return(1);
a190 3


				/* New since 4.4 release */
d192 1
a192 21
	register struct phong_specific *pp;

	BU_CK_VLS( matparm );
	BU_GETSTRUCT( pp, phong_specific );
	*dpp = (char *)pp;

	pp->magic = PL_MAGIC;
	pp->shine = 4;
	pp->wgt_specular = 0.7;
	pp->wgt_diffuse = 0.3;
	pp->transmit = 0.8;
	pp->reflect = 0.1;
	/* leaving 0.1 for diffuse/specular */
	pp->refrac_index = 1.65;
	pp->extinction = 0.0;
	pp->mfp = mfp;

	if (bu_struct_parse( matparm, phong_parse, (char *)pp ) < 0 )  {
		bu_free( (char *)pp, "phong_specific" );
		return(-1);
	}
d194 23
a216 3
	if (pp->transmit > 0 )
		rp->reg_transmit = 1;
	return(1);
d225 1
a225 1
	bu_struct_print(rp->reg_name, phong_parse, (char *)dp);
d234 1
a234 1
	bu_free( cp, "phong_specific" );
d241 3
a243 3
	Color pixel based on the energy of a point light source (Eps)
	plus some diffuse illumination (Epd) reflected from the point
	<x,y> :
d245 1
a245 1
				E = Epd + Eps		(1)
d247 3
a249 3
	The energy reflected from diffuse illumination is the product
	of the reflectance coefficient at point P (Rp) and the diffuse
	illumination (Id) :
d251 1
a251 1
				Epd = Rp * Id		(2)
d253 4
a256 4
	The energy reflected from the point light source is calculated
	by the sum of the diffuse reflectance (Rd) and the specular
	reflectance (Rs), multiplied by the intensity of the light
	source (Ips) :
d258 1
a258 1
				Eps = (Rd + Rs) * Ips	(3)
d260 3
a262 3
	The diffuse reflectance is calculated by the product of the
	reflectance coefficient (Rp) and the cosine of the angle of
	incidence (I) :
d264 1
a264 1
				Rd = Rp * cos(I)	(4)
d266 3
a268 3
	The specular reflectance is calculated by the product of the
	specular reflectance coeffient and (the cosine of the angle (S)
	raised to the nth power) :
d270 1
a270 1
				Rs = W(I) * cos(S)**n	(5)
d272 6
a277 6
	Where,
		I is the angle of incidence.
		S is the angle between the reflected ray and the observer.
		W returns the specular reflection coefficient as a function
	of the angle of incidence.
		n (roughly 1 to 10) represents the shininess of the surface.
d279 25
a303 25
	This is the heart of the lighting model which is based on a model
	developed by Bui-Tuong Phong, [see Wm M. Newman and R. F. Sproull,
	"Principles of Interactive Computer Graphics", 	McGraw-Hill, 1979]

	Er = Ra(m)*cos(Ia) + Rd(m)*cos(I1) + W(I1,m)*cos(s)^^n
	where,

	Er	is the energy reflected in the observer's direction.
	Ra	is the diffuse reflectance coefficient at the point
		of intersection due to ambient lighting.
	Ia	is the angle of incidence associated with the ambient
		light source (angle between ray direction (negated) and
		surface normal).
	Rd	is the diffuse reflectance coefficient at the point
		of intersection due to primary lighting.
	I1	is the angle of incidence associated with the primary
		light source (angle between light source direction and
		surface normal).
	m	is the material identification code.
	W	is the specular reflectance coefficient,
		a function of the angle of incidence, range 0.0 to 1.0,
		for the material.
	s	is the angle between the reflected ray and the observer.
`	n	'Shininess' of the material,  range 1 to 10.
 */
d307 1
a307 1
	register struct light_specific *lp;
d309 1
a309 1
	register	fastf_t	*intensity;
d311 8
a318 8
	register	fastf_t	refl;
	register	fastf_t	*to_light;
	register	int	i;
	register	fastf_t	cosine;
	vect_t			work,color;
	vect_t			reflected;
	point_t			pt;
	fastf_t			dist;
d321 1
a321 1
	struct bn_tabdata	*ms_matcolor = BN_TABDATA_NULL;
d323 1
a323 1
	point_t	matcolor;		/* Material color */
d325 2
a326 2
	struct phong_specific *ps =
		(struct phong_specific *)dp;
d328 1
a328 1
	if (ps->magic != PL_MAGIC )  bu_log("phong_render: bad magic\n");
d330 2
a331 2
	if (rdebug&RDEBUG_SHADE)
		bu_struct_print( "phong_render", phong_parse, (char *)ps );
d333 4
a336 4
	swp->sw_transmit = ps->transmit;
	swp->sw_reflect = ps->reflect;
	swp->sw_refrac_index = ps->refrac_index;
	swp->sw_extinction = ps->extinction;
d338 4
a341 4
	if (swp->sw_phong_set_vector & SW_SET_TRANSMIT) swp->sw_transmit = swp->sw_phong_transmit;
	if (swp->sw_phong_set_vector & SW_SET_REFLECT) swp->sw_reflect = swp->sw_phong_reflect;
	if (swp->sw_phong_set_vector & SW_SET_REFRAC_INDEX) swp->sw_refrac_index = swp->sw_phong_ri;
	if (swp->sw_phong_set_vector & SW_SET_EXTINCTION) swp->sw_extinction = swp->sw_phong_extinction;
d343 7
a349 9
	if (swp->sw_xmitonly ) {
		if (swp->sw_xmitonly > 1 )
			return(1);	/* done -- wanted parameters only */
		if (swp->sw_reflect > 0 || swp->sw_transmit > 0 ) {
			if (rdebug&RDEBUG_SHADE)
				bu_log("calling rr_render from phong, sw_xmitonly\n");
			(void)rr_render( ap, pp, swp );
		}
		return(1);	/* done */
d351 2
d356 1
a356 1
	ms_matcolor = bn_tabdata_dup( swp->msw_color );
d358 1
a358 1
	VMOVE( matcolor, swp->sw_color );
d361 1
a361 1
/* Photon Mapping */
d363 3
a365 3
color[0]= swp->sw_color[0];
color[1]= swp->sw_color[1];
color[2]= swp->sw_color[2];
d369 1
a369 1
if (!PM_Visualize)
d371 3
a373 3
    {
	/* Diffuse reflectance from "Ambient" light source (at eye) */
	if ((cosine = -VDOT( swp->sw_hit.hit_normal, ap->a_ray.r_dir )) > 0.0 )  {
d375 8
a382 8
			bu_log("cosAmb=1+%g %s surfno=%d (x%d,y%d,lvl%d)\n",
				cosine-1,
				pp->pt_inseg->seg_stp->st_dp->d_namep,
				swp->sw_hit.hit_surfno,
				ap->a_x, ap->a_y, ap->a_level);
			VPRINT(" normal", swp->sw_hit.hit_normal);
			VPRINT(" r_dir ", ap->a_ray.r_dir);
			cosine = 1;
d386 1
a386 1
			cosine *= swp->sw_phong_ambient;
d388 1
a388 1
			cosine *= AmbientIntensity;
d398 1
a398 1
	} else {
d404 1
a404 1
	}
d406 1
a406 1
	/* Emission.  0..1 is normal range, -1..0 sucks light out, like OpenGL */
d408 1
a408 1
	{
d414 1
a414 1
			VSETALL(emission, swp->sw_phong_emission);
d422 1
a422 1
	}
d425 1
a425 1
	if (swp->sw_phong_set_vector & SW_SET_EMISSION) {
d429 1
a429 1
	} else {
d431 1
a431 1
	}
d433 1
a433 1
	VADD2( swp->sw_color, swp->sw_color, ps->emission );
d437 6
a442 6
	/* With the advent of procedural shaders, the caller can no longer
	 * provide us reliable light visibility information.  The hit point
	 * may have been changed by another shader in a stack.  There is no
	 * way that anyone else can tell us whether lights are visible.
	 */
	light_obs(ap, swp, ps->mfp->mf_inputs);
d444 2
a445 2
	/* Consider effects of each light source */
	for( i=ap->a_rt_i->rti_nlights-1; i>=0; i-- )  {
d448 1
a448 1
			continue;
d451 2
a452 2
			bu_log("phong_render light=%s lightfract=%g\n",
				lp->lt_name, swp->sw_lightfract[i] );
d463 6
a468 6
			if (cosine > 1.00001 )  {
				bu_log("cosI=1+%g (x%d,y%d,lvl%d)\n", cosine-1,
					ap->a_x, ap->a_y, ap->a_level);
				cosine = 1;
			}
			/* Get Obj Hit Point For Attenuation */
d470 7
a476 7
			if (pp && PM_Activated) {
				VJOIN1(pt, ap->a_ray.r_pt, pp->pt_inhit->hit_dist, ap->a_ray.r_dir)
				dist= sqrt((pt[0]-lp->lt_pos[0])*(pt[0]-lp->lt_pos[0]) + (pt[1]-lp->lt_pos[1])*(pt[1]-lp->lt_pos[1]) + (pt[2]-lp->lt_pos[2])*(pt[2]-lp->lt_pos[2]))/1000.0;
				dist= (1.0/(0.1 + 1.0*dist + 0.01*dist*dist));
				refl= dist * ps->wgt_diffuse * cosine * swp->sw_lightfract[i] * lp->lt_intensity;
/*				bu_log("pt: [%.3f][%.3f,%.3f,%.3f]\n",dist,pt[0],pt[1],pt[2]);*/
			} else
d479 1
a479 1
				refl= ps->wgt_diffuse * swp->sw_lightfract[i] * cosine * lp->lt_fraction;
d483 5
a487 5
			bn_tabdata_incr_mul3_scale( swp->msw_color,
				lp->lt_spectrum,
				swp->msw_intensity[i],
				ms_matcolor,
				refl );
d489 2
a490 2
			VELMUL3( work, matcolor, lp->lt_color, intensity );
			VJOIN1( swp->sw_color, swp->sw_color, refl, work );
d502 7
a508 7
			if (cosine > 1.00001 )  {
				bu_log("cosS=1+%g (x%d,y%d,lvl%d)\n", cosine-1,
					ap->a_x, ap->a_y, ap->a_level);
				cosine = 1;
			}
			refl = ps->wgt_specular * swp->sw_lightfract[i] *
				lp->lt_fraction *
d510 8
a517 8
				/* It is unnecessary to compute the actual
				 * exponential here since phong is just a
				 * gross hack.  We approximate re:
				 *  Graphics Gems IV "A Fast Alternative to
				 *  Phong's Specular Model" Pg 385
				 */
				cosine /
				(ps->shine - ps->shine*cosine + cosine);
d519 1
a519 1
				phg_ipow(cosine, ps->shine);
d522 4
a525 4
			bn_tabdata_incr_mul2_scale( swp->msw_color,
				lp->lt_spectrum,
				swp->msw_intensity[i],
				refl );
d527 2
a528 2
			VELMUL( work, lp->lt_color, intensity );
			VJOIN1( swp->sw_color, swp->sw_color, refl, work );
d531 1
a531 1
	}
d534 19
a552 19
  if (PM_Activated) {
    IrradianceEstimate(ap, work, swp->sw_hit.hit_point, swp->sw_hit.hit_normal, 100, 100);
    VELMUL(work, work, color);
    VADD2(swp->sw_color, work, swp->sw_color);
    if (swp->sw_color[0] > 1.0) swp->sw_color[0]= 1.0;
    if (swp->sw_color[1] > 1.0) swp->sw_color[1]= 1.0;
    if (swp->sw_color[2] > 1.0) swp->sw_color[2]= 1.0;
  }

} else {

  if (PM_Activated) {
/*  IrradianceEstimate(work, swp->sw_hit.hit_point, swp->sw_hit.hit_normal, 100, 100);
  VELMUL(swp->sw_color, work, color);*/
    IrradianceEstimate(ap, swp->sw_color, swp->sw_hit.hit_point, swp->sw_hit.hit_normal, 100, 100);
    if (swp->sw_color[0] > 1.0) swp->sw_color[0]= 1.0;
    if (swp->sw_color[1] > 1.0) swp->sw_color[1]= 1.0;
    if (swp->sw_color[2] > 1.0) swp->sw_color[2]= 1.0;
  }
d554 1
a554 1
}
d557 2
a558 2
	if (swp->sw_reflect > 0 || swp->sw_transmit > 0 )
		(void)rr_render( ap, pp, swp );
d561 1
a561 1
	bn_tabdata_free(ms_matcolor);
d563 1
a563 1
	return(1);
d575 2
a576 2
double d;
register int cnt;
d578 1
a578 1
	FAST fastf_t input, result;
d580 9
a588 9
	if ((input=d) < 1e-8 )  return(0.0);
	if (cnt < 0 || cnt > 200 )  {
		bu_log("phg_ipow(%g,%d) bad\n", d, cnt);
		return(d);
	}
	result = 1;
	while( cnt-- > 0 )
		result *= input;
	return( result );
@


14.19
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.18 2007/01/23 01:13:36 brlcad Exp $ (ARL)";
d371 3
a373 3
color[0]= swp -> sw_color[0];
color[1]= swp -> sw_color[1];
color[2]= swp -> sw_color[2];
d479 2
a480 2
				VJOIN1(pt, ap -> a_ray.r_pt, pp -> pt_inhit -> hit_dist, ap -> a_ray.r_dir)
				dist= sqrt((pt[0]-lp -> lt_pos[0])*(pt[0]-lp -> lt_pos[0]) + (pt[1]-lp -> lt_pos[1])*(pt[1]-lp -> lt_pos[1]) + (pt[2]-lp -> lt_pos[2])*(pt[2]-lp -> lt_pos[2]))/1000.0;
d482 1
a482 1
				refl= dist * ps -> wgt_diffuse * cosine * swp -> sw_lightfract[i] * lp -> lt_intensity;
d487 1
a487 1
				refl= ps -> wgt_diffuse * swp -> sw_lightfract[i] * cosine * lp -> lt_fraction;
d543 1
a543 1
    IrradianceEstimate(ap, work, swp -> sw_hit.hit_point, swp -> sw_hit.hit_normal, 100, 100);
d545 4
a548 4
    VADD2(swp -> sw_color, work, swp -> sw_color);
    if (swp -> sw_color[0] > 1.0) swp -> sw_color[0]= 1.0;
    if (swp -> sw_color[1] > 1.0) swp -> sw_color[1]= 1.0;
    if (swp -> sw_color[2] > 1.0) swp -> sw_color[2]= 1.0;
d554 6
a559 6
/*  IrradianceEstimate(work, swp -> sw_hit.hit_point, swp -> sw_hit.hit_normal, 100, 100);
  VELMUL(swp -> sw_color, work, color);*/
    IrradianceEstimate(ap, swp -> sw_color, swp -> sw_hit.hit_point, swp -> sw_hit.hit_normal, 100, 100);
    if (swp -> sw_color[0] > 1.0) swp -> sw_color[0]= 1.0;
    if (swp -> sw_color[1] > 1.0) swp -> sw_color[1]= 1.0;
    if (swp -> sw_color[2] > 1.0) swp -> sw_color[2]= 1.0;
@


14.18
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.17 2007/01/20 14:36:53 brlcad Exp $ (ARL)";
d128 1
a128 3


                                /* New since 4.4 release */
d163 1
a163 3


                                /* New since 4.4 release */
d198 1
a198 3


                                /* New since 4.4 release */
d377 1
a377 1
if (!PM_Visualize) 
d478 1
a478 1
                        if (pp && PM_Activated) {
d484 1
a484 1
                        } else
a574 1

@


14.17
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.16 2006/08/10 01:16:51 brlcad Exp $ (ARL)";
@


14.16
log
@PM_Visualize is not used if this is RT_MULTISPECTRAL, protect accordingly so we don't end up with undefined symbols
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.15 2006/04/06 20:06:48 brlcad Exp $ (ARL)";
@


14.15
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.14 2006/01/23 00:35:08 brlcad Exp $ (ARL)";
d383 4
a386 1
if (!PM_Visualize) {
d484 1
d491 3
a493 1
                        } else {
a556 1
#endif
a559 1
#ifndef RT_MULTISPECTRAL
@


14.14
log
@include stddef.h for bu_offset's usage of offset
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.13 2006/01/18 06:46:16 brlcad Exp $ (ARL)";
d56 1
@


14.14.2.1
log
@update from HEAD
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.14 2006/01/23 00:35:08 brlcad Exp $ (ARL)";
a55 1
#  include "spectrum.h"
@


14.13
log
@update copyright to 2006
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.12 2005/10/23 04:44:34 brlcad Exp $ (ARL)";
d42 1
@


14.12
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.11 2005/09/19 18:34:54 brlcad Exp $ (ARL)";
@


14.11
log
@ws
@
text
@d31 1
a31 1
 *  
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.10 2005/03/30 07:14:09 brlcad Exp $ (ARL)";
d125 4
a128 4
                           
             	         
    	      
                             
d162 4
a165 4
                           
             	         
    	      
                             
d199 4
a202 4
                           
             	         
    	      
                             
d298 1
a298 1
 
d464 1
a464 1
	
d580 1
a580 1
 *  
@


14.10
log
@consistency on the #ifdef inclusions of RT_MULTISPECTRAL, clean up the spectrum extern declarations now that spectrum is now a liboptical global.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.9 2005/03/28 06:31:37 bob1961 Exp $ (ARL)";
a41 2


d44 1
@


14.10.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d31 1
a31 1
 *
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d42 2
a45 1

d126 4
a129 4




d163 4
a166 4




d200 4
a203 4




d299 1
a299 1

d465 1
a465 1

d581 1
a581 1
 *
@


14.9
log
@Add code to allow liboptical to be a Windows DLL
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.8 2005/01/30 20:30:55 brlcad Exp $ (ARL)";
a51 3
#if RT_MULTISPECTRAL
#include "spectrum.h"
#endif
d55 4
a67 3
#if RT_MULTISPECTRAL
extern const struct bn_table	*spectrum;	/* from rttherm/viewtherm.c */
#endif
d322 1
a322 1
#if !RT_MULTISPECTRAL
d334 1
a334 1
#if RT_MULTISPECTRAL
d369 1
a369 1
#if RT_MULTISPECTRAL
d404 1
a404 1
#if RT_MULTISPECTRAL
d410 1
a410 1
#if RT_MULTISPECTRAL
d418 1
a418 1
#if RT_MULTISPECTRAL
d467 1
a467 1
#if !RT_MULTISPECTRAL
d490 1
a490 1
#if RT_MULTISPECTRAL
d529 1
a529 1
#if RT_MULTISPECTRAL
d570 1
a570 1
#if RT_MULTISPECTRAL
@


14.8
log
@update copyright to 2005
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/sh_plastic.c,v 14.7 2004/12/21 07:32:30 morrison Exp $ (ARL)";
a49 2
#include "shadefuncs.h"
#include "shadework.h"
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_plastic.c,v 14.6 2004/12/21 06:58:42 morrison Exp $ (ARL)";
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a34 2
 *  
 *
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_plastic.c,v 14.5 2004/12/21 06:44:33 morrison Exp $ (ARL)";
@


14.5
log
@remove the old distribution notice section
@
text
@a36 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d39 1
a39 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_plastic.c,v 14.4 2004/12/21 06:18:44 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a35 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
d42 1
a42 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_plastic.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_plastic.c,v 14.2 2004/12/21 04:03:25 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_plastic.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d46 1
a46 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_plastic.c,v 1.2 2004/08/02 23:01:49 morrison Exp $ (ARL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/sh_plastic.c,v 1.1 2004/05/20 15:19:51 morrison Exp $ (ARL)";
d595 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/liboptical/sh_plastic.c,v 11.44 2004/05/10 15:30:45 erikg Exp $ (ARL)";
d29 1
a29 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

