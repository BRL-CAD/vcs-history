head	14.14;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.6
	rel-7-10-2:14.12
	rel-7-10-0:14.12
	rel-7-8-4:14.9
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.6
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.6
	rel-7-6-branch:14.6.0.6
	rel-7-6-0:14.6
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.4
	bobWinPort:14.6.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.14
date	2007.12.16.18.53.49;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.09.15.16.23.11;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.27.01.41.38;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.23.01.13.36;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.53;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.23.00.35.08;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.03.28.06.31.37;	author bob1961;	state Exp;
branches
	14.6.6.1;
next	14.5;

14.5
date	2005.01.30.20.30.55;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.03.25;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.52;	author morrison;	state Exp;
branches;
next	;

14.6.6.1
date	2005.11.13.13.46.16;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                        S H _ T C L . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file sh_tcl.c
 *
 *  To add a new shader to the "rt" program's LIBOPTICAL library:
 *
 *	6) Edit shaders.tcl and comb.tcl in the ../tclscripts/mged directory to
 *		add a new gui for this shader.
 */
#include "common.h"

#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#include <tcl.h>

#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "rtprivate.h"

extern int rr_render(struct application	*ap,
		     struct partition	*pp,
		     struct shadework   *swp);
#define tcl_MAGIC 0x54434C00    /* "TCL" */
#define CK_tcl_SP(_p) BU_CKMAG(_p, tcl_MAGIC, "tcl_specific")

/*
 * the shader specific structure contains all variables which are unique
 * to any particular use of the shader.
 */
struct tcl_specific {
	long	magic;	/* magic # for memory validity check, must come 1st */
	mat_t			tcl_m_to_r; /* model to shader space matrix */
	Tcl_Interp	       *tcl_interp[MAX_PSW];
	Tcl_Obj		       *tcl_objPtr;
	struct bu_vls		tcl_file;   /* name of script to run */
	struct bu_mapped_file  *tcl_mp;	    /* actual script */
};

/* The default values for the variables in the shader specific structure */
const static
struct tcl_specific tcl_defaults = {
	tcl_MAGIC,
	{	0.0, 0.0, 0.0, 0.0,	/* tcl_m_to_r */
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0 }
	};

#define SHDR_NULL	((struct tcl_specific *)0)
#define SHDR_O(m)	bu_offsetof(struct tcl_specific, m)
#define SHDR_AO(m)	bu_offsetofarray(struct tcl_specific, m)


/* description of how to parse/print the arguments to the shader
 * There is at least one line here for each variable in the shader specific
 * structure above
 */
struct bu_structparse tcl_print_tab[] = {
	{"%S",  1, "file", SHDR_O(tcl_file),	BU_STRUCTPARSE_FUNC_NULL },
	{"",	0, (char *)0,	0,		BU_STRUCTPARSE_FUNC_NULL }

};
struct bu_structparse tcl_parse_tab[] = {
	{"i",	bu_byteoffset(tcl_print_tab[0]), "tcl_print_tab", 0, BU_STRUCTPARSE_FUNC_NULL },
	{"%S",  1, "f", SHDR_O(tcl_file),	BU_STRUCTPARSE_FUNC_NULL },
	{"",	0, (char *)0,	0,		BU_STRUCTPARSE_FUNC_NULL }
};

HIDDEN int	tcl_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip), tcl_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp);
HIDDEN void	tcl_print(register struct region *rp, char *dp), tcl_free(char *cp);

/* The "mfuncs" structure defines the external interface to the shader.
 * Note that more than one shader "name" can be associated with a given
 * shader by defining more than one mfuncs struct in this array.
 * See sh_phong.c for an example of building more than one shader "name"
 * from a set of source functions.  There you will find that "glass" "mirror"
 * and "plastic" are all names for the same shader with different default
 * values for the parameters.
 */
struct mfuncs tcl_mfuncs[] = {
	{MF_MAGIC,	"tcl",		0,		MFI_NORMAL|MFI_HIT|MFI_UV,	0,
	tcl_setup,	tcl_render,	tcl_print,	tcl_free },

	{0,		(char *)0,	0,		0,		0,
	0,		0,		0,		0 }
};


/*	T C L _ S E T U P
 *
 *	This routine is called (at prep time)
 *	once for each region which uses this shader.
 *	Any shader-specific initialization should be done here.
 */
HIDDEN int
tcl_setup(register struct region *rp, struct bu_vls *matparm, char **dpp, struct mfuncs *mfp, struct rt_i *rtip)


				/* pointer to reg_udata in *rp */

				/* New since 4.4 release */
{
	register struct tcl_specific	*tcl_sp;
	int cpu;

	/* check the arguments */
	RT_CHECK_RTI(rtip);
	BU_CK_VLS( matparm );
	RT_CK_REGION(rp);


	if (rdebug&RDEBUG_SHADE)
		bu_log("tcl_setup(%s)\n", rp->reg_name);

	/* Get memory for the shader parameters and shader-specific data */
	BU_GETSTRUCT( tcl_sp, tcl_specific );
	*dpp = (char *)tcl_sp;

	/* initialize the default values for the shader */
	memcpy(tcl_sp, &tcl_defaults, sizeof(struct tcl_specific));

	/* parse the user's arguments for this use of the shader. */
	if (bu_struct_parse( matparm, tcl_parse_tab, (char *)tcl_sp ) < 0 )
		return(-1);

#if 0
	tcl_sp->tcl_mp = bu_open_mapped_file(bu_vls_addr(tcl_sp->tcl_file),
					     "tclShader");
	if (!tcl_sp->tcl_mp) {
		bu_log("Error opening Tcl shader file \"%s\"\n",
		       bu_vls_addr(tcl_sp->tcl_file));
		bu_bomb("");
	}
#endif

	for (cpu=0 ; cpu < MAX_PSW ; cpu++) {
		tcl_sp->tcl_interp[cpu] = Tcl_CreateInterp();
		Tcl_Init(tcl_sp->tcl_interp[cpu]);
	}

	/* the shader needs to operate in a coordinate system which stays
	 * fixed on the region when the region is moved (as in animation)
	 * we need to get a matrix to perform the appropriate transform(s).
	 *
	 * Shading is be done in "region coordinates":
	 */
	db_region_mat(tcl_sp->tcl_m_to_r, rtip->rti_dbip, rp->reg_name, &rt_uniresource);


	if (rdebug&RDEBUG_SHADE) {
		bu_struct_print( " Parameters:", tcl_print_tab,
				 (char *)tcl_sp );
		bn_mat_print( "m_to_sh", tcl_sp->tcl_m_to_r );
	}

	return(1);
}

/*
 *	T C L _ P R I N T
 */
HIDDEN void
tcl_print(register struct region *rp, char *dp)
{
	bu_struct_print( rp->reg_name, tcl_print_tab, (char *)dp );
}

/*
 *	T C L _ F R E E
 */
HIDDEN void
tcl_free(char *cp)
{
	bu_free( cp, "tcl_specific" );
}

/*
 *	T C L _ R E N D E R
 *
 *	This is called (from viewshade() in shade.c) once for each hit point
 *	to be shaded.  The purpose here is to fill in values in the shadework
 *	structure.
 */
int
tcl_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp)


				/* defined in material.h */
				/* ptr to the shader-specific struct */
{
	register struct tcl_specific *tcl_sp =
		(struct tcl_specific *)dp;
	point_t pt;
	int tcl_status;
	register int cpu = ap->a_resource->re_cpu;

	/* check the validity of the arguments we got */
	RT_AP_CHECK(ap);
	RT_CHECK_PT(pp);
	CK_tcl_SP(tcl_sp);

	if (rdebug&RDEBUG_SHADE)
		bu_struct_print( "tcl_render Parameters:",
				 tcl_print_tab, (char *)tcl_sp );

	/* we are performing the shading in "region" space, so we must
	 * transform the hit point from "model" space to "region" space.
	 */
	MAT4X3PNT(pt, tcl_sp->tcl_m_to_r, swp->sw_hit.hit_point);

	if (rdebug&RDEBUG_SHADE) {
		bu_log("tcl_render()  model:(%g %g %g) shader:(%g %g %g)\n",
		V3ARGS(swp->sw_hit.hit_point),
		V3ARGS(pt) );
	}

	/* set some Tcl variables to the shadework structure values */

#define rt_Tcl_LV(_s, _v) Tcl_LinkVar(tcl_sp->tcl_interp[cpu], _s, (char *)_v, \
				TCL_LINK_DOUBLE)

	rt_Tcl_LV("sw_transmit",	&swp->sw_transmit);
	rt_Tcl_LV("sw_reflect",		&swp->sw_reflect);
	rt_Tcl_LV("sw_refrac_index",	&swp->sw_refrac_index);
	rt_Tcl_LV("sw_temperature",	&swp->sw_temperature);
	rt_Tcl_LV("reflect",		&swp->sw_reflect);
	rt_Tcl_LV("sw_red",		&swp->sw_color[0]);
	rt_Tcl_LV("sw_grn",		&swp->sw_color[1]);
	rt_Tcl_LV("sw_blu",		&swp->sw_color[2]);
	rt_Tcl_LV("sw_base_red",	&swp->sw_basecolor[0]);
	rt_Tcl_LV("sw_base_grn",	&swp->sw_basecolor[1]);
	rt_Tcl_LV("sw_base_blu",	&swp->sw_basecolor[2]);
	rt_Tcl_LV("sw_dist",		&swp->sw_hit.hit_dist);
	rt_Tcl_LV("sw_hitpt_x",		&swp->sw_hit.hit_point[X]);
	rt_Tcl_LV("sw_hitpt_y",		&swp->sw_hit.hit_point[Y]);
	rt_Tcl_LV("sw_hitpt_z",		&swp->sw_hit.hit_point[Z]);
	rt_Tcl_LV("sw_normal_x",	&swp->sw_hit.hit_normal[X]);
	rt_Tcl_LV("sw_normal_y",	&swp->sw_hit.hit_normal[Y]);
	rt_Tcl_LV("sw_normal_z",	&swp->sw_hit.hit_normal[Z]);
	rt_Tcl_LV("sw_uv_u",		&swp->sw_uv.uv_u);
	rt_Tcl_LV("sw_uv_v",		&swp->sw_uv.uv_v);
	rt_Tcl_LV("sw_x",		&pt[X]);
	rt_Tcl_LV("sw_y",		&pt[Y]);
	rt_Tcl_LV("sw_z",		&pt[Z]);
	Tcl_LinkVar(tcl_sp->tcl_interp[cpu], "ap_x", (char *)&ap->a_x,
		    TCL_LINK_INT);
	Tcl_LinkVar(tcl_sp->tcl_interp[cpu], "ap_y", (char *)&ap->a_y,
		    TCL_LINK_INT);

	/* XXX run the script (should be Tcl_EvalObj) */
	tcl_status = Tcl_EvalFile(tcl_sp->tcl_interp[cpu],
				  bu_vls_addr(&tcl_sp->tcl_file));

	if (tcl_status != TCL_OK) {
		bu_log("%s\n", Tcl_GetStringResult(tcl_sp->tcl_interp[cpu]));
	}

	/* break the links to these stack variables */
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_transmit");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_reflect");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_refrac_index");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_temperature");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "reflect");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_red");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_grn");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_blu");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_base_red");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_base_grn");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_base_blu");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_dist");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_hitpt_x");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_hitpt_y");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_hitpt_z");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_normal_x");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_normal_y");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_normal_z");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_uv_u");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_uv_v");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_x");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_y");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "sw_z");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "ap_x");
	Tcl_UnlinkVar(tcl_sp->tcl_interp[cpu], "ap_y");


	/* shader must perform transmission/reflection calculations
	 *
	 * 0 < swp->sw_transmit <= 1 causes transmission computations
	 * 0 < swp->sw_reflect <= 1 causes reflection computations
	 */
	if (swp->sw_reflect > 0 || swp->sw_transmit > 0 )
		(void)rr_render( ap, pp, swp );

	return(1);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d141 1
a141 1
	memcpy(tcl_sp, &tcl_defaults, sizeof(struct tcl_specific) );
@


14.12
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d31 1
a31 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d34 2
a39 1
#include <tcl.h>
@


14.11
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d123 1
a123 1
    			      	/* pointer to reg_udata in *rp */
d125 1
a125 1
           		      	/* New since 4.4 release */
d212 2
a213 2
                	     	/* defined in material.h */
    			    	/* ptr to the shader-specific struct */
@


14.10
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.9
log
@include stddef.h for bu_offset's usage of offset
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.8
log
@update copyright to 2006
@
text
@d30 1
a30 2


d33 3
a35 1
#include <string.h>
d38 1
d75 1
a75 1
#define SHDR_O(m)	offsetof(struct tcl_specific, m)
@


14.7
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.6
log
@Add code to allow liboptical to be a Windows DLL
@
text
@d120 2
a121 2
                      	    
             		         
d123 1
a123 1
             		     
d153 1
a153 1
		bu_log("Error opening Tcl shader file \"%s\"\n", 
d209 2
a210 2
                  	    
                	    
d229 1
a229 1
	/* we are performing the shading in "region" space, so we must 
d235 1
a235 1
		bu_log("tcl_render()  model:(%g %g %g) shader:(%g %g %g)\n", 
d241 1
a241 1
	
@


14.6.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d120 2
a121 2


d123 1
a123 1

d153 1
a153 1
		bu_log("Error opening Tcl shader file \"%s\"\n",
d209 2
a210 2


d229 1
a229 1
	/* we are performing the shading in "region" space, so we must
d235 1
a235 1
		bu_log("tcl_render()  model:(%g %g %g) shader:(%g %g %g)\n",
d241 1
a241 1

@


14.5
log
@update copyright to 2005
@
text
@a39 2
#include "shadefuncs.h"
#include "shadework.h"
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *	S H _ T C L . C
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d302 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d9 1
a9 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

