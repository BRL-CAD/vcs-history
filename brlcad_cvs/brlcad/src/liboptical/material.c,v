head	14.18;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.8
	rel-7-10-2:14.15
	rel-7-10-0:14.15
	rel-7-8-4:14.13
	rel-7-8-2:14.12
	rel-7-8-0:14.12
	trimnurbs-branch:14.12.0.2
	help:14.12
	temp_tag:14.11
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.11
	premerge-20051223-bobWinPort:14.11
	rel-7-6-6:14.11
	rel-7-6-4:14.11
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.6
	rel-7-6-0:14.9
	rel-7-4-2:14.9
	rel-7-4-branch:14.9.0.4
	bobWinPort:14.9.0.2
	rel-7-4-0:14.9
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.7
	rel-7-0-branch:1.7.0.2
	rel-7-0:1.7;
locks; strict;
comment	@ * @;


14.18
date	2007.10.27.06.51.18;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.09.15.16.23.11;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.35;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.36.53;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.07.10.19.06.23;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.10.23.04.44.34;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.09.09.09.44.08;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.07.08.00.27.51;	author brlcad;	state Exp;
branches
	14.9.6.1;
next	14.8;

14.8
date	2005.03.30.02.00.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.03.28.06.31.28;	author bob1961;	state Exp;
branches;
next	14.6;

14.6
date	2005.01.30.20.30.54;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.20;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.44;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.23;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.03.25;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.15;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.22.18.44.05;	author butler;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.14.19.19.29;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.03.23.30.57;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.23.01.49;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.09.19.52.43;	author erikg;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.23;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.49;	author morrison;	state Exp;
branches;
next	;

14.9.6.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.18
log
@don't blather verbose if we can't find the dynamic shader
@
text
@/*                      M A T E R I A L . C
 * BRL-CAD
 *
 * Copyright (c) 1985-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file material.c
 *
 *  Routines to coordinate the implementation of material properties
 *
 *  Author -
 *	Michael John Muuss
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */
#ifndef lint
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.17 2007/10/26 21:51:26 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <string.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
#ifdef HAVE_SYS_PARAM_H
#  include <sys/param.h>
#  include <dlfcn.h>
#endif

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "rtprivate.h"


static const char *mdefault = "default"; /* Name of default material */

/*
 *			M L I B _ A D D _ S H A D E R
 *
 *  Routine to add an array of mfuncs structures to the linked
 *  list of material (shader) routines.
 */
void
mlib_add_shader( headp, mfp1 )
struct mfuncs **headp;
struct mfuncs *mfp1;
{
	register struct mfuncs *mfp;

	RT_CK_MF(mfp1);
	for( mfp = mfp1; mfp->mf_name != (char *)0; mfp++ )  {
		RT_CK_MF(mfp);
		mfp->mf_forw = *headp;
		*headp = mfp;
	}
}

#ifdef HAVE_DLOPEN
/*
 *  T R Y _ L O A D
 *
 *  Try to load a DSO from the specified path.  If we succeed in opening
 *  the DSO, then retrieve the symbol "shader_mfuncs" and look up the shader
 *  named "material" in the table.
 */
static struct mfuncs *
try_load(const char *path, const char *material, const char *shader_name)
{
	void *handle;
	struct mfuncs *shader_mfuncs;
	struct mfuncs *mfp;
	const char *dl_error_str;
	char sym[MAXPATHLEN];


	if ( ! (handle = dlopen(path, RTLD_NOW)) ) {
		if (R_DEBUG&RDEBUG_MATERIAL)
			bu_log("dlopen failed on \"%s\"\n", path);
		return (struct mfuncs *)NULL;
	} else if (R_DEBUG&RDEBUG_MATERIAL) {
		bu_log("%s open... ", path);
	}

	/* Find the {shader}_mfuncs symbol in the library */
	snprintf(sym, MAXPATHLEN, "%s_mfuncs", shader_name);
	shader_mfuncs = dlsym(handle, sym);
	if ( (dl_error_str=dlerror()) == (char *)NULL) goto found;


	/* We didn't find a {shader}_mfuncs symbol, so
	 * try the generic "shader_mfuncs" symbol.
	 */
	shader_mfuncs = dlsym(handle, "shader_mfuncs");
	if ( (dl_error_str=dlerror()) != (char *)NULL) {
		/* didn't find anything appropriate, give up */
		if (R_DEBUG&RDEBUG_MATERIAL) bu_log("%s has no %s table, %s\n", material, sym, dl_error_str);
		dlclose(handle);
		return (struct mfuncs *)NULL;
	}

found:
	if (R_DEBUG&RDEBUG_MATERIAL)
		bu_log("%s_mfuncs table found\n", shader_name);

	/* make sure the shader we were looking for is in the mfuncs table */
	for (mfp = shader_mfuncs ; mfp->mf_name != (char *)NULL; mfp++) {
		RT_CK_MF(mfp);

		if ( ! strcmp(mfp->mf_name, shader_name))
			return shader_mfuncs; /* found ! */
	}

	if (R_DEBUG&RDEBUG_MATERIAL) bu_log("shader '%s' not found in library\n", shader_name);

	/* found the library, but not the shader */
	dlclose(handle);
	return (struct mfuncs *)NULL;
}


/*
 *  L O A D _ D Y N A M I C _ S H A D E R
 *
 *  Given a shader/material name, try to find a DSO to supply the shader.
 *
 */
struct mfuncs *
load_dynamic_shader(const char *material,
		    const int mlen)
{
	struct mfuncs *shader_mfuncs = (struct mfuncs *)NULL;
	char libname[MAXPATHLEN];
	char libpath[MAXPATHLEN];
	char *cwd = (char *)NULL;
	int old_rdebug = R_DEBUG;
	char sh_name[128]; /* XXX constants are bogus */

	if (mlen < sizeof(sh_name)) {
	    strncpy(sh_name, material, 128);
	    sh_name[mlen] = '\0';
	} else {
	    bu_log("shader name too long \"%s\" %d > %d\n",
		   material, mlen, sizeof(sh_name));
	    return (struct mfuncs *)NULL;
	}
	/* rdebug |= RDEBUG_MATERIAL; */

	if (R_DEBUG&RDEBUG_MATERIAL)
		bu_log("load_dynamic_shader( \"%s\", %d )\n", sh_name, mlen);

	cwd = getcwd((char *)NULL, (size_t)MAXPATHLEN);

	if ( cwd ) {
		/* Look in the current working directory for {sh_name}.so */
		snprintf(libname, MAXPATHLEN, "%s/%s.so", cwd, sh_name);
		if ( (shader_mfuncs = try_load(libname, material, sh_name)) )
			goto done;


		/* Look in the current working directory for shaders.so */
		snprintf(libname, MAXPATHLEN, "%s/shaders.so", cwd);
		if ( (shader_mfuncs = try_load(libname, material, sh_name)) )
			goto done;

	} else {
		bu_log("Cannot get current working directory\n\tSkipping local shader load\n");
	}

	/* Look in the location indicated by $LD_LIBRARY_PATH for
	 * lib{sh_name}.so
	 */
	snprintf(libname, MAXPATHLEN, "lib%s.so", sh_name);
	if ( (shader_mfuncs = try_load(libname, material, sh_name)) )
		goto done;

	/* Look in BRL-CAD install dir under lib dir for lib{sh_name}.so */
	snprintf(libpath, MAXPATHLEN, "/lib/lib%s.so", sh_name);
	strncpy(libname, bu_brlcad_root(libpath, 1), MAXPATHLEN);
	if ( (shader_mfuncs = try_load(libname, material, sh_name)) )
		goto done;

done:
	/* clean up memory allocated */
	if (cwd) free(cwd);

	/* print appropriate log messages */
	if (shader_mfuncs)
		bu_log("loaded from %s\n", libname);
	else
		bu_log("WARNING: shader [%s] not found\n", sh_name);

	rdebug = old_rdebug;

	return shader_mfuncs;
}
#endif

/*
 *			M L I B _ S E T U P
 *
 *  Returns -
 *	-1	failed
 *	 0	indicates that this region should be dropped
 *	 1	success
 */
int
mlib_setup( struct mfuncs **headp,
	register struct region *rp,
	struct rt_i *rtip )
{
	register const struct mfuncs *mfp;
#ifdef HAVE_DLOPEN
	register struct mfuncs *mfp_new;
#endif
	int		ret;
	struct bu_vls	param;
	const char	*material;
	int		mlen;

	RT_CK_REGION(rp);
	RT_CK_RTI(rtip);

	if( rp->reg_mfuncs != (char *)0 )  {
		bu_log("mlib_setup:  region %s already setup\n", rp->reg_name );
		return(-1);
	}
	bu_vls_init( &param );
	material = rp->reg_mater.ma_shader;
	if( material == NULL || material[0] == '\0' )  {
		material = mdefault;
		mlen = strlen(mdefault);
	} else {
		char	*endp;
		endp = strchr( material, ' ' );
		if( endp )  {
			mlen = endp - material;
			bu_vls_strcpy( &param, rp->reg_mater.ma_shader+mlen+1 );
		} else {
			mlen = strlen(material);
		}
	}
retry:
	for( mfp = *headp; mfp != MF_NULL; mfp = mfp->mf_forw )  {
	    if (material[0] != mfp->mf_name[0] ||
		strncmp(material, mfp->mf_name, strlen(mfp->mf_name)))
		continue;
	    goto found;
	}

#ifdef HAVE_DLOPEN
	/* If we get here, then the shader wasn't found in the list of
	 * compiled-in (or previously loaded) shaders.  See if we can
	 * dynamically load it.
	 */

	bu_log("Shader \"%s\"... ", material);

	if ((mfp_new = load_dynamic_shader(material, mlen))) {
		mlib_add_shader(headp, mfp_new);
		bu_log("retrying\n");
		goto retry;
	}
#else
	bu_log("****** dynamic shader loading not available ******\n");
#endif


	/* If we get here, then the shader was not found at all (either in
	 * the compiled-in or dynamically loaded shader sets).  We set the
	 * shader name to "default" (which should match an entry in the
	 * table) and search again.
	 */

	bu_log("*ERROR mlib_setup('%s'):  material not known, default assumed %s\n\n",
		material, rp->reg_name );
	if( material != mdefault )  {
		material = mdefault;
		mlen = strlen(mdefault);
		bu_vls_trunc( &param, 0 );
		goto retry;
	}
	bu_vls_free( &param );
	return(-1);
found:
	rp->reg_mfuncs = (char *)mfp;
	rp->reg_udata = (char *)0;

	if(R_DEBUG&RDEBUG_MATERIAL)
		bu_log("mlib_setup(%s) shader=%s\n", rp->reg_name, mfp->mf_name);
	if( (ret = mfp->mf_setup( rp, &param, &rp->reg_udata, mfp, rtip, headp )) < 0 )  {
		bu_log("ERROR mlib_setup(%s) failed. Material='%s', param='%s'.\n",
			rp->reg_name, material, bu_vls_addr(&param) );
		if( material != mdefault )  {
			/* If not default material, change to default & retry */
			bu_log("\tChanging %s material to default and retrying.\n", rp->reg_name);
			material = mdefault;
			bu_vls_trunc( &param, 0 );
			goto retry;
		}
		/* What to do if default setup fails? */
		bu_log("mlib_setup(%s) error recovery failed.\n", rp->reg_name);
	}
	bu_vls_free( &param );
	return(ret);		/* Good or bad, as mf_setup says */
}

/*
 *			M L I B _ F R E E
 *
 *  Routine to free material-property specific data
 */
void
mlib_free( register struct region *rp )
{
	register const struct mfuncs *mfp = (struct mfuncs *)rp->reg_mfuncs;

	if( mfp == MF_NULL )  {
		bu_log("mlib_free(%s):  reg_mfuncs NULL\n", rp->reg_name);
		return;
	}
	if( mfp->mf_magic != MF_MAGIC )  {
		bu_log("mlib_free(%s):  reg_mfuncs bad magic, %x != %x\n",
			rp->reg_name,
			mfp->mf_magic, MF_MAGIC );
		return;
	}
	if( mfp->mf_free ) mfp->mf_free( rp->reg_udata );
	rp->reg_mfuncs = (char *)0;
	rp->reg_udata = (char *)0;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.17
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@d34 1
a34 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.16 2007/09/15 16:23:11 brlcad Exp $ (BRL)";
d163 1
a163 1
	    strncpy(sh_name, material, mlen);
d202 1
a202 1
	strncpy(libname, bu_brlcad_root(libpath, 0), MAXPATHLEN);
d214 1
a214 1
		bu_log("Not found\n");
@


14.16
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d34 1
a34 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.15 2007/01/23 01:13:35 brlcad Exp $ (BRL)";
d109 1
a109 1
	sprintf(sym, "%s_mfuncs", shader_name);
d179 1
a179 1
		sprintf(libname, "%s/%s.so", cwd, sh_name);
d185 1
a185 1
		sprintf(libname, "%s/shaders.so", cwd);
d196 1
a196 1
	sprintf(libname, "lib%s.so", sh_name);
d201 2
a202 2
	sprintf(libpath, "/lib/lib%s.so", sh_name);
	strcpy(libname, bu_brlcad_root(libpath, 0));
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d34 1
a34 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.14 2007/01/20 14:36:53 brlcad Exp $ (BRL)";
a38 4
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

d42 4
a45 4
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
@


14.14
log
@update copyright to 2007
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d34 1
a34 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.13 2006/07/10 19:06:23 brlcad Exp $ (BRL)";
@


14.13
log
@refactor away the old BSD block defines among other simple cleanup
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2006 United States Government as represented by
d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.12 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
@


14.12
log
@update copyright to 2006
@
text
@d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.11 2005/10/23 04:44:34 brlcad Exp $ (BRL)";
d41 1
a41 1
# include <unistd.h>
d48 1
a48 1
#include <string.h>
d50 5
a54 1
#include <strings.h>
a62 6
#ifdef HAVE_DLOPEN
# undef BSD
# include <sys/param.h>
# include <dlfcn.h>
#endif

@


14.11
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1985-2005 United States Government as represented by
d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.10 2005/09/09 09:44:08 brlcad Exp $ (BRL)";
@


14.10
log
@BRL-CAD not BRLCAD, consistency
@
text
@d32 1
a32 1
 *  
d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.9 2005/07/08 00:27:51 brlcad Exp $ (BRL)";
d108 1
a108 1
		if (R_DEBUG&RDEBUG_MATERIAL) 
d210 1
a210 1
	if ( (shader_mfuncs = try_load(libname, material, sh_name)) ) 
d282 1
a282 1
	/* If we get here, then the shader wasn't found in the list of 
d301 1
a301 1
	 * shader name to "default" (which should match an entry in the 
@


14.9
log
@use bu_brlcad_root now for bin dirs and bu_brlcad_data for data dirs
@
text
@d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.8 2005/03/30 02:00:59 brlcad Exp $ (BRL)";
d207 1
a207 1
	/* Look in BRLCAD install dir under lib dir for lib{sh_name}.so */
@


14.9.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header$ (BRL)";
d108 1
a108 1
		if (R_DEBUG&RDEBUG_MATERIAL)
d207 1
a207 1
	/* Look in BRL-CAD install dir under lib dir for lib{sh_name}.so */
d210 1
a210 1
	if ( (shader_mfuncs = try_load(libname, material, sh_name)) )
d282 1
a282 1
	/* If we get here, then the shader wasn't found in the list of
d301 1
a301 1
	 * shader name to "default" (which should match an entry in the
@


14.8
log
@quell warning about type conversion
@
text
@d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.7 2005/03/28 06:31:28 bob1961 Exp $ (BRL)";
d164 1
d208 2
a209 2
	strcpy(libname, bu_brlcad_path("", 0));
	sprintf( &libname[strlen(libname)], "/lib/lib%s.so", sh_name);
a212 2


a213 1

a222 2


@


14.7
log
@Add code to allow liboptical to be a Windows DLL
@
text
@d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.6 2005/01/30 20:30:54 brlcad Exp $ (BRL)";
d103 1
a103 1
	char *dl_error_str;
@


14.6
log
@update copyright to 2005
@
text
@d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/liboptical/material.c,v 14.5 2004/12/21 06:38:20 morrison Exp $ (BRL)";
a56 1
#include "shadefuncs.h"
@


14.5
log
@remove the old copyright notice section
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2004 United States Government as represented by
d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 14.4 2004/12/21 06:18:44 morrison Exp $ (BRL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
d35 1
a35 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 14.3 2004/12/21 05:45:23 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d38 1
a38 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 14.2 2004/12/21 04:03:25 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d38 1
a38 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 14.1 2004/11/16 19:42:15 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			M A T E R I A L . C
d38 1
a38 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 1.7 2004/10/22 18:44:05 butler Exp $ (BRL)";
@


1.7
log
@changes to eliminate BRLCAD_ROOT
@
text
@d19 1
a19 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 1.6 2004/10/14 19:19:29 morrison Exp $ (BRL)";
d352 10
@


1.6
log
@add an option to bu_brlcad_path to fail quietly, returning a NULL string instead of gobs of output and bu_bomb'ing
@
text
@d19 1
a19 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 1.5 2004/09/03 23:30:57 morrison Exp $ (BRL)";
d191 1
a191 1
	/* Look in $BRLCAD_ROOT/lib/ for lib{sh_name}.so */
@


1.5
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d19 1
a19 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 1.4 2004/08/02 23:01:49 morrison Exp $ (BRL)";
d192 1
a192 1
	strcpy(libname, bu_brlcad_path(""));
@


1.4
log
@replace the wrapped config.h block with common.h
@
text
@d19 1
a19 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 1.3 2004/06/09 19:52:43 erikg Exp $ (BRL)";
d31 1
a31 1
#ifdef USE_STRING_H
@


1.3
log
@fix some warnings
@
text
@d19 1
a19 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/src/liboptical/material.c,v 1.2 2004/06/08 22:04:23 morrison Exp $ (BRL)";
d22 1
a22 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@obliterate externs.h
@
text
@d19 1
a19 1
static const char RCSmaterial[] = "@@(#)$Header$ (BRL)";
d26 3
a28 1

@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d19 1
a19 1
static const char RCSmaterial[] = "@@(#)$Header: /cvs/brlcad/liboptical/material.c,v 1.3 2004/05/10 15:30:45 erikg Exp $ (BRL)";
a37 1
#include "externs.h"
@

