head	14.10;
access;
symbols
	rel-7-10-4:14.7
	STABLE:14.7.0.2
	stable-branch:14.3
	rel-7-10-2:14.7
	rel-7-10-0:14.7
	rel-7-8-4:14.4
	rel-7-8-2:14.4
	rel-7-8-0:14.4
	trimnurbs-branch:14.4.0.2
	help:14.4
	temp_tag:14.3
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.3
	premerge-20051223-bobWinPort:14.3
	rel-7-6-6:14.3
	rel-7-6-4:14.3
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.10
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.09.15.16.23.18;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.09.14.20.06.50;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.23.01.13.43;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.08;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.02.37.22;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.33;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.10
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                    M K _ G A S T A N K . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file mk_gastank.c
 *
 */

/*  File:  mk_gastank.c  */
/*  S.Coates - 2 September 1992  */
/*  To compile for use separatley:  */
/*  cc mk_gastank.c /usr/brlcad/lib/libwdb.a /usr/brlcad/lib/librt.a  */
/*	-lmpc -lm -o mk_gastank  */

/*  Program to create a gas tank using libwdb.  All dimensions are  */
/*  in mm.  The gas tank is composed of 3 arb8s, 8 spheres, and 12  */
/*  cylinders.  The gas tank is solid and centered at (0,0,0).  */

#include "common.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "machine.h"
#include "db.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"

#ifdef M_PI
#define PI M_PI
#else
#define PI 3.141592653589793
#endif

int
main(int argc, char **argv)
{							/*  START # 1  */
   struct rt_wdb *fpw;		/*  File to be written to.  */
   char filemged[26];		/*  Mged file create.  */
   double hgt,wid,dpt;		/*  Height, width, & depth of gas tank.  */
   double rds;			/*  Radius of the corner of gas tank.  */
   point_t pts[8];		/*  Points for arb8.  */
   point_t bs;			/*  Base of cylinder.  */
   vect_t ht;			/*  Height of cylinder.  */
   fastf_t rad;			/*  Radius of cylinder & sphere.  */
   point_t cent;		/*  Center of sphere.  */

   /*  point_t and vect_t are set using typedef of type fastf_t.  */
   /*  fastf_t is a type that is machine dependent.  */

   char *temp;			/*  Temporary character string.  */
   char temp1[16];		/*  Temporary character string.  */

   char solnam[9];		/*  Solid name.  */
   char regnam[9];		/*  Region name.  */
   char grpnam[5];		/*  Group name.  */
   int numtnk;			/*  Number of gas tanks to be created  */
				/*  (<=26).  */

   struct wmember comb;		/*  Used to make regions.  */
   struct wmember comb1;	/*  Used to make groups.  */

   int i,j,k;			/*  Loop counters.  */

   /*  Set up solid, region, and group names.  */
   solnam[0] = 's';
   solnam[1] = '.';
   solnam[2] = 't';
   solnam[3] = 'n';
   solnam[4] = 'k';
   solnam[5] = ' ';
   solnam[6] = '#';
   solnam[7] = '#';
   solnam[8] = '\0';
   regnam[0] = 'r';
   regnam[1] = '.';
   regnam[2] = 't';
   regnam[3] = 'n';
   regnam[4] = 'k';
   regnam[5] = ' ';
   regnam[6] = '#';
   regnam[7] = '#';
   regnam[8] = '\0';
   grpnam[0] = 't';
   grpnam[1] = 'n';
   grpnam[2] = 'k';
   grpnam[3] = ' ';
   grpnam[4] = '\0';

   /*  If there are no arguments ask questions.  */
   if(argc == 1)
   {							/*  START # 3  */

   /*  Print info about the window.  */
   (void)printf("\nThis program constructs a solid gas tank with all\n");
   (void)printf("edges and corners rounded.\n\n");

   /*  Find name of mged file to be created.  */
   (void)printf("Enter the mged file to be created (25 char max).\n\t");
   (void)fflush(stdout);
   (void)scanf("%26s",filemged);

   /*  Find the number of gas tanks to create.  */
   (void)printf("Enter the number of gas tanks to create (26 max).\n\t");
   (void)fflush(stdout);
   (void)scanf("%d",&numtnk);
   if(numtnk > 26) numtnk = 26;

   /*  Find the dimensions of the gas tanks.  */
   (void)printf("Enter the height, width, and depth of the gas tank.\n\t");
   (void)fflush(stdout);
   (void)scanf("%lf %lf %lf",&hgt,&wid,&dpt);
   (void)printf("Enter the radius of the corners.\n\t");
   (void)fflush(stdout);
   (void)scanf("%lf",&rds);

   }							/*  END # 3  */

   /*  If there are arguments get answers from arguments.  */
   else
   {							/*  START # 4  */
	/*  List options.  */
	/*	-fname - name = mged file name.  */
	/*	-n# - # = number of gas tanks.  */
	/*	-h# - # = height of gas tank in mm.  */
	/*	-w# - # = width of gas tank in mm.  */
	/*	-d# - # = depth of gas tank in mm.  */
	/*	-r# - # = radius of corners in mm.  */

	for(i=1; i<argc; i++)
	{						/*  START # 5  */
	   /*  Put argument in temporary character string.  */
	   temp = argv[i];

	   /*  -f - mged file.  */
	   if(temp[1] == 'f')
	   {						/*  START # 6  */
		j = 2;
		k = 0;
		while( (temp[j] != '\0') && (k < 25) )
		{					/*  START # 7  */
		   filemged[k] = temp[j];
		   j++;
		   k++;
		}					/*  END # 7  */
		filemged[k] = '\0';
	   }						/*  END # 6  */

	   /*  All other options.  */
	   else
	   {						/*  START # 8  */
		/*  Set up temporary character string.  */
		j = 2;
		k = 0;
		while( (temp[j] != '\0') && (k < 15) )
		{					/*  START # 9  */
		   temp1[k] = temp[j];
		   j++;
		   k++;
		}					/*  END # 9  */
		temp1[k] = '\0';
		if(temp[1] == 'n')
		{
		   (void)sscanf(temp1,"%d",&numtnk);
		   if(numtnk > 26) numtnk = 26;
		}
		else if(temp[1] == 'h') (void)sscanf(temp1,"%lf",&hgt);
		else if(temp[1] == 'w') (void)sscanf(temp1,"%lf",&wid);
		else if(temp[1] == 'd') (void)sscanf(temp1,"%lf",&dpt);
		else if(temp[1] == 'r') (void)sscanf(temp1,"%lf",&rds);
	   }						/*  END # 8  */
	}						/*  END # 5  */
   }							/*  END # 4  */

   /*  Print out all info.  */
   (void)printf("\nmged file:  %s\n",filemged);
   (void)printf("height of gas tank:  %f mm\n",hgt);
   (void)printf("width of gas tank:  %f mm\n",wid);
   (void)printf("depth of gas tank:  %f mm\n",dpt);
   (void)printf("radius of corner:  %f mm\n",rds);
   (void)printf("number of gas tanks:  %d\n\n",numtnk);
   (void)fflush(stdout);

   /*  Open mged file.  */
   fpw = wdb_fopen(filemged);

   /*  Write ident record.  */
   mk_id(fpw,"windows");

   for(i=0; i<numtnk; i++)
   {							/*  START # 2  */

	/*  Create all solids.  */

	/*  Create the 3 arb8s.  */

	pts[0][0] = (fastf_t)(dpt / 2.);
	pts[0][1] = (fastf_t)(wid / 2. - rds);
	pts[0][2] = (fastf_t)(hgt / 2. - rds);
	pts[1][0] = pts[0][0];
	pts[1][1] = pts[0][1];
	pts[1][2] = (-pts[0][2]);
	pts[2][0] = pts[0][0];
	pts[2][1] = (-pts[0][1]);
	pts[2][2] = pts[1][2];
	pts[3][0] = pts[0][0];
	pts[3][1] = pts[2][1];
	pts[3][2] = pts[0][2];
	pts[4][0] = (-pts[0][0]);
	pts[4][1] = pts[0][1];
	pts[4][2] = pts[0][2];
	pts[5][0] = pts[4][0];
	pts[5][1] = pts[0][1];
	pts[5][2] = (-pts[0][2]);
	pts[6][0] = pts[4][0];
	pts[6][1] = (-pts[0][1]);
	pts[6][2] = pts[1][2];
	pts[7][0] = pts[4][0];
	pts[7][1] = pts[2][1];
	pts[7][2] = pts[0][2];
	solnam[5] = 97 + i;
	solnam[6] = '0';
	solnam[7] = '1';
	mk_arb8(fpw,solnam, &pts[0][X]);

	pts[0][0] = (fastf_t)(dpt / 2. - rds);
	pts[0][1] = (fastf_t)(wid / 2.);
	pts[1][0] = pts[0][0];
	pts[1][1] = pts[0][1];
	pts[2][0] = pts[0][0];
	pts[2][1] = (-pts[0][1]);
	pts[3][0] = pts[0][0];
	pts[3][1] = pts[2][1];
	pts[4][0] = (-pts[0][0]);
	pts[4][1] = pts[0][1];
	pts[5][0] = pts[4][0];
	pts[5][1] = pts[0][1];
	pts[6][0] = pts[4][0];
	pts[6][1] = pts[2][1];
	pts[7][0] = pts[4][0];
	pts[7][1] = pts[2][1];
	solnam[7] = '2';
	mk_arb8(fpw,solnam, &pts[0][X]);

	pts[0][1] = (fastf_t)(wid / 2. - rds);
	pts[0][2] = (fastf_t)(hgt / 2.);
	pts[1][1] = pts[0][1];
	pts[1][2] = (-pts[0][2]);
	pts[2][1] = (-pts[0][1]);
	pts[2][2] = pts[1][2];
	pts[3][1] = pts[2][1];
	pts[3][2] = pts[0][2];
	pts[4][1] = pts[0][1];
	pts[4][2] = pts[0][2];
	pts[5][1] = pts[0][1];
	pts[5][2] = (-pts[0][2]);
	pts[6][1] = (-pts[0][1]);
	pts[6][2] = pts[1][2];
	pts[7][1] = pts[2][1];
	pts[7][2] = pts[0][2];
	solnam[7] = '3';
	mk_arb8(fpw,solnam, &pts[0][X]);

	/*  Make 8 spheres.  */

	cent[0] = (fastf_t)(dpt / 2. - rds);
	cent[1] = (fastf_t)(wid / 2. - rds);
	cent[2] = (fastf_t)(hgt / 2. - rds);
	rad = (fastf_t)(rds);
	solnam[7] = '4';
	mk_sph(fpw,solnam,cent,rad);

	cent[2] = (-cent[2]);
	solnam[7] = '5';
	mk_sph(fpw,solnam,cent,rad);

	cent[1] = (-cent[1]);
	solnam[7] = '6';
	mk_sph(fpw,solnam,cent,rad);

	cent[2] = (-cent[2]);
	solnam[7] = '7';
	mk_sph(fpw,solnam,cent,rad);

	cent[0] = (-cent[0]);
	cent[1] = (-cent[1]);
	solnam[7] = '8';
	mk_sph(fpw,solnam,cent,rad);

	cent[2] = (-cent[2]);
	solnam[7] = '9';
	mk_sph(fpw,solnam,cent,rad);

	cent[1] = (-cent[1]);
	solnam[6] = '1';
	solnam[7] = '0';
	mk_sph(fpw,solnam,cent,rad);

	cent[2] = (-cent[2]);
	solnam[7] = '1';
	mk_sph(fpw,solnam,cent,rad);

	/*  Make 12 cylinders.  */

	bs[0] = (fastf_t)(dpt / 2. - rds);
	bs[1] = (fastf_t)(wid / 2. - rds);
	bs[2] = (fastf_t)(hgt / 2. - rds);
	ht[0] = (fastf_t)(0.);
	ht[1] = (fastf_t)(-wid + 2 * rds);
	ht[2] = (fastf_t)(0.);
	solnam[7] = '2';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[2] = (-bs[2]);
	solnam[7] = '3';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[0] = (-bs[0]);
	solnam[7] = '4';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[2] = (-bs[2]);
	solnam[7] = '5';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[0] = (fastf_t)(dpt / 2. - rds);
	bs[1] = (fastf_t)(wid / 2. - rds);
	bs[2] = (fastf_t)(hgt / 2. - rds);
	ht[0] = (fastf_t)(0.);
	ht[1] = (fastf_t)(0.);
	ht[2] = (fastf_t)(-hgt + 2 * rds);
	solnam[7] = '6';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[1] = (-bs[1]);
	solnam[7] = '7';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[0] = (-bs[0]);
	solnam[7] = '8';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[1] = (-bs[1]);
	solnam[7] = '9';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[0] = (fastf_t)(dpt / 2. - rds);
	bs[1] = (fastf_t)(wid / 2. - rds);
	bs[2] = (fastf_t)(hgt / 2. - rds);
	ht[0] = (fastf_t)(-dpt + 2 * rds);
	ht[1] = (fastf_t)(0.);
	ht[2] = (fastf_t)(0.);
	solnam[6] = '2';
	solnam[7] = '0';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[2] = (-bs[2]);
	solnam[7] = '1';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[1] = (-bs[1]);
	solnam[7] = '2';
	mk_rcc(fpw,solnam,bs,ht,rad);

	bs[2] = (-bs[2]);
	solnam[7] = '3';
	mk_rcc(fpw,solnam,bs,ht,rad);

	/*  Make all regions.  */

	/*  Initialize list.  */
	BU_LIST_INIT(&comb.l);

	/*  Region 1.  */
	solnam[5] = 97 + i;
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[5] = 97 + i;
	regnam[6] = '0';
	regnam[7] = '1';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 2.  */
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[7] = '2';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 3.  */
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	regnam[7] = '3';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 4.  */
	solnam[7] = '4';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '1';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '6';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[6] = '2';
	solnam[7] = '0';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[7] = '4';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 5.  */
	solnam[6] = '0';
	solnam[7] = '5';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '1';
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '6';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[6] = '2';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[7] = '5';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 6.  */
	solnam[6] = '0';
	solnam[7] = '6';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '1';
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '7';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[6] = '2';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[7] = '6';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 7.  */
	solnam[6] = '0';
	solnam[7] = '7';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '1';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '7';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[6] = '2';
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[7] = '7';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 8.  */
	solnam[6] = '0';
	solnam[7] = '8';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '1';
	solnam[7] = '5';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '9';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[6] = '2';
	solnam[7] = '0';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[7] = '8';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 9.  */
	solnam[6] = '0';
	solnam[7] = '9';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '1';
	solnam[7] = '4';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '9';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[6] = '2';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[7] = '9';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 10.  */
	solnam[6] = '1';
	solnam[7] = '0';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[7] = '4';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '8';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[6] = '2';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '0';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 11.  */
	solnam[6] = '1';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[7] = '5';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '8';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[6] = '2';
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '1';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 12.  */
	solnam[6] = '1';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '2';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 13.  */
	solnam[6] = '1';
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '3';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 14.  */
	solnam[6] = '1';
	solnam[7] = '4';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '4';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 15.  */
	solnam[6] = '1';
	solnam[7] = '5';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '5';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 16.  */
	solnam[6] = '1';
	solnam[7] = '6';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '6';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 17.  */
	solnam[6] = '1';
	solnam[7] = '7';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '7';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 18.  */
	solnam[6] = '1';
	solnam[7] = '8';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '8';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 19.  */
	solnam[6] = '1';
	solnam[7] = '9';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '1';
	regnam[7] = '9';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 20.  */
	solnam[6] = '2';
	solnam[7] = '0';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '2';
	regnam[7] = '0';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 21.  */
	solnam[6] = '2';
	solnam[7] = '1';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '2';
	regnam[7] = '1';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 22.  */
	solnam[6] = '2';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '2';
	regnam[7] = '2';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Region 23.  */
	solnam[6] = '2';
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_INTERSECT);
	solnam[6] = '0';
	solnam[7] = '2';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	solnam[7] = '3';
	(void)mk_addmember(solnam,&comb.l,NULL, WMOP_SUBTRACT);
	regnam[6] = '2';
	regnam[7] = '3';
	mk_lfcomb(fpw,regnam,&comb,1);

	/*  Create group.  */

	/*  Initialize list.  */
	BU_LIST_INIT(&comb1.l);

	regnam[6] = '0';
	regnam[7] = '1';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '2';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '3';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '4';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '5';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '6';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '7';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '8';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '9';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[6] = '1';
	regnam[7] = '0';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '1';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '2';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '3';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '4';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '5';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '6';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '7';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '8';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '9';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[6] = '2';
	regnam[7] = '0';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '1';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '2';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	regnam[7] = '3';
	(void)mk_addmember(regnam,&comb1.l,NULL, WMOP_UNION);
	grpnam[3] = 97 + i;
	mk_lfcomb(fpw,grpnam,&comb1,0);

   }							/*  START # 2  */

   /*  Close file.  */
   wdb_close(fpw);
   return 0;
}							/*  END # 1  */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.9
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d119 1
a119 1
   (void)scanf("%s",filemged);
@


14.8
log
@The c89 headers are all fair game since it's been a requirement since the move to ANSI c89 compliance.  So.. remove the HAVE_STDLIB_H checks and just use the header.  The headers <complex.h>, <fenv.h>, <inttypes.h>, <stdbool.h>, <stdint.h>, and <tgmath.h> were added with C99 and still need to be checked.  There are several other c89 headers that we could just use, though, that are still being checked.
@
text
@a35 1

d38 1
a38 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.7
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a37 1
#ifdef HAVE_STDLIB_H
a38 1
#endif
d40 1
a40 1
#include <string.h>
d42 1
a42 1
#include <strings.h>
@


14.6
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a36 1

@


14.5
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.4
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 23
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d744 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d20 1
a20 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d12 1
a12 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

