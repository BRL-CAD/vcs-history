head	14.10;
access;
symbols
	rel-7-10-4:14.7
	STABLE:14.7.0.2
	stable-branch:14.3
	rel-7-10-2:14.7
	rel-7-10-0:14.7
	rel-7-8-4:14.4
	rel-7-8-2:14.4
	rel-7-8-0:14.4
	trimnurbs-branch:14.4.0.2
	help:14.4
	temp_tag:14.3
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.3
	premerge-20051223-bobWinPort:14.3
	rel-7-6-6:14.3
	rel-7-6-4:14.3
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.10
date	2007.12.02.22.34.23;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.09.15.16.23.18;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.09.14.20.06.50;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.23.01.13.44;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.08;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.02.37.22;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.33;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.10
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                       M K _ W I R E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file mk_wire.c
 *
 */

/*  File:  mk_wire.c  */
/*  S.Coates - 15 September 1992  */
/*  To compile for use separately:  */
/*  cc mk_wire.c /usr/brlcad/lib/libwdb.a /usr/brlcad/lib/librt.a  */
/*	-lmpc -lm -o mk_wire  */

/*  This is a program to create wiring or fuel lines.  The user  */
/*  Enters only the coordinates of the endpoints and the radius  */
/*  of the lines.  */

#include "common.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "machine.h"
#include "db.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"

#define MAXWIRESEG 10		/*  Maximum number of segments.  The  */
				/*  maximum may be no greater then 100  */
				/*  because of the way the name of the  */
				/*  segments is found.  */

int
main(int argc, char **argv)
{							/*  START # 1  */
   struct rt_wdb *fpw;		/*  File to be created.  */
   char filemged[26];		/*  Mged file name.  */
   double numseg;		/*  Number of segments.  */
   double strtpt[MAXWIRESEG][3];	/*  Start point of segment.  */
   double endpt[MAXWIRESEG][3];	/*  End point of segment.  */
   double strtrad[MAXWIRESEG];	/*  Radius at starting point of segment.  */
   double endrad[MAXWIRESEG];	/*  Radius at ending point of segment.  */

   char solcyl[8],regcyl[8];	/*  Solid & region name for cylinder (cone).  */
   char solsph[8],regsph[8];	/*  Solid & region name for sphere.  */
   char solsub1[8],solsub2[8];	/*  Solids that are subtracted.  */
   char group[6];		/*  Group name.  */

   point_t bs;			/*  Base of cone.  */
   vect_t dir;			/*  Direction of cone.  */
   fastf_t ht;			/*  Height of cone.  */
   fastf_t rdc1;		/*  Radius 1 of cone.  */
   fastf_t rdc2;		/*  Radius 2 of cone.  */
   point_t cent;		/*  Center of sphere.  */
   fastf_t rds;			/*  Radius of sphere.  */
   struct wmember comb;		/*  Used to make regions.  */
   struct wmember comb1;	/*  Used to make groups.  */

   int i;			/*  Loop counters.  */
   double r;			/*  Temporary variables.  */
   char temp[10];		/*  Temporary char string.  */
   char temp1[10];		/*  Temporary char string.  */

   /*  Set up solid, region, & group names.  */
   solcyl[0] = 's';
   solcyl[1] = '.';
   solcyl[2] = 'w';
   solcyl[3] = 'r';
   solcyl[4] = 'c';
   solcyl[5] = '#';
   solcyl[6] = '#';
   solcyl[7] = '\0';

   regcyl[0] = 'r';
   regcyl[1] = '.';
   regcyl[2] = 'w';
   regcyl[3] = 'r';
   regcyl[4] = 'c';
   regcyl[5] = '#';
   regcyl[6] = '#';
   regcyl[7] = '\0';

   solsph[0] = 's';
   solsph[1] = '.';
   solsph[2] = 'w';
   solsph[3] = 'r';
   solsph[4] = 's';
   solsph[5] = '#';
   solsph[6] = '#';
   solsph[7] = '\0';

   regsph[0] = 'r';
   regsph[1] = '.';
   regsph[2] = 'w';
   regsph[3] = 'r';
   regsph[4] = 's';
   regsph[5] = '#';
   regsph[6] = '#';
   regsph[7] = '\0';

   group[0] = 'w';
   group[1] = 'i';
   group[2] = 'r';
   group[3] = 'e';
   group[4] = 's';
   group[5] = '\0';

   solsub1[0] = 's';
   solsub1[1] = '.';
   solsub1[2] = 'w';
   solsub1[3] = 'r';
   solsub1[4] = 'c';
   solsub1[5] = '#';
   solsub1[6] = '#';
   solsub1[7] = '\0';

   solsub2[0] = 's';
   solsub2[1] = '.';
   solsub2[2] = 'w';
   solsub2[3] = 'r';
   solsub2[4] = 'c';
   solsub2[5] = '#';
   solsub2[6] = '#';
   solsub2[7] = '\0';

   /*  Find name of mged file to be created.  */
   (void)printf("Enter mged file name (25 char max).\n\t");
   (void)fflush(stdout);
   (void)scanf("%26s",filemged);

   /*  Find the number of segments.  */
   (void)printf("Enter the number of segments (maximum of %d).\n\t",
	MAXWIRESEG);
   (void)fflush(stdout);
   (void)scanf("%lf",&numseg);

   /*  Check that the number of segments is less than or equal to the  */
   /*  maximum.  */
   while(numseg > MAXWIRESEG)
   {
	(void)printf("The maximum number of segments is %d.  Enter the\n",
		MAXWIRESEG);
	(void)printf("number of segments.\n\t");
	(void)fflush(stdout);
	(void)scanf("%lf",&numseg);
   }

   /*  Enter starting & ending points of segments & radi.  */
   for(i=0; i<numseg; i++)
   {							/*  START # 2  */
	if(i == 0)
	{						/*  START # 3  */
	   (void)printf("Enter starting point of segment # %d.\n\t",(i+1));
	   (void)fflush(stdout);
	   (void)scanf("%lf %lf %lf",&strtpt[i][0],&strtpt[i][1],
		&strtpt[i][2]);
	   (void)printf("Enter radius at the starting point of ");
	   (void)printf("segment # %d.\n\t",(i+1));
	   (void)fflush(stdout);
	   (void)scanf("%lf",&strtrad[i]);
	   (void)printf("Enter ending point of segment # %d.\n\t",(i+1));
	   (void)fflush(stdout);
	   (void)scanf("%lf %lf %lf",&endpt[i][0],&endpt[i][1],&endpt[i][2]);
	   (void)printf("Enter radius at the ending point of ");
	   (void)printf("segment # %d.\n\t",(i+1));
	   (void)fflush(stdout);
	   (void)scanf("%lf",&endrad[i]);
	}						/*  END # 3  */

	else
	{						/*  START # 4  */
	   strtpt[i][0] = endpt[i - 1][0];
	   strtpt[i][1] = endpt[i - 1][1];
	   strtpt[i][2] = endpt[i - 1][2];
	   strtrad[i] = endrad[i - 1];
	   (void)printf("Enter ending point of segment # %d.\n\t",(i+1));
	   (void)fflush(stdout);
	   (void)scanf("%lf %lf %lf",&endpt[i][0],&endpt[i][1],&endpt[i][2]);
	   (void)printf("Enter radius at the ending point of ");
	   (void)printf("segment # %d.\n\t",(i+1));
	   (void)fflush(stdout);
	   (void)scanf("%lf",&endrad[i]);
	}						/*  END # 4  */
   }							/*  END # 2  */

   /*  Print out all info.  */
   (void)printf("\n\nmged file created:  %s\n",filemged);
   (void)fflush(stdout);

   /*  Print out coordinates of segments.  */
   for(i=0; i<numseg; i++)
   {							/*  START # 5  */
	(void)printf("Segment # %d:  ",(i+1));
	(void)printf("(%f,%f,%f)", strtpt[i][0],strtpt[i][1],strtpt[i][2]);
	(void)printf(" %f\n", strtrad[i]);
	(void)printf("              ");
	(void)printf("(%f,%f,%f)", endpt[i][0],endpt[i][1],endpt[i][2]);
	(void)printf("%f\n",endrad[i]);
	(void)fflush(stdout);
   }							/*  END # 5  */

   /*  Open mged file.  */
   fpw = wdb_fopen(filemged);

   /*  Write ident record.  */
   mk_id(fpw,"Wiring");

   /*  Create solids.  */

   /*  Create solid for each segment.  */
   for(i=0; i<numseg; i++)
   {							/*  START # 10  */
	/*  Base of cone.  */
	bs[0] = (fastf_t)strtpt[i][0];
	bs[1] = (fastf_t)strtpt[i][1];
	bs[2] = (fastf_t)strtpt[i][2];

	/*  Direction of cone (unit vector).  */
	r = (endpt[i][0] - strtpt[i][0]) * (endpt[i][0] - strtpt[i][0])
	  + (endpt[i][1] - strtpt[i][1]) * (endpt[i][1] - strtpt[i][1])
	  + (endpt[i][2] - strtpt[i][2]) * (endpt[i][2] - strtpt[i][2]);
	r = sqrt(r);
	dir[0] = (fastf_t)( (endpt[i][0] - strtpt[i][0]) / r);
	dir[1] = (fastf_t)( (endpt[i][1] - strtpt[i][1]) / r);
	dir[2] = (fastf_t)( (endpt[i][2] - strtpt[i][2]) / r);

	/*  Height of cone.  */
	ht = (fastf_t)r;

	/*  Radius 1 of cone.  */
	rdc1 = (fastf_t)strtrad[i];

	/*  Radius 2 of cone.  */
	rdc2 = (fastf_t)endrad[i];

	/*  Fill in correct number in solid name.  */
	(void)sprintf(temp,"%d",i);
	if(i < 10)
	{						/*  START # 11  */
	   solcyl[5] = '0';
	   solcyl[6] = temp[0];
	}						/*  END # 11  */
	else if( (10 <= i) || (i < 100) )
	{						/*  START # 12  */
	   solcyl[5] = temp[0];
	   solcyl[6] = temp[1];
	}						/*  END # 12  */
	else
	{						/*  START # 13  */
	   (void)printf("** ERROR ** i = %d\n",i);
	   (void)fflush(stdout);
	}						/*  END # 13  */

	/*  Make cylinder.  */
	mk_cone(fpw,solcyl,bs,dir,ht,rdc1,rdc2);

   }							/*  END # 10  */

   /*  Create solid for each sphere.  */
   for(i=1; i<numseg; i++)

   /*  Sphere 0 does not exist since there is one less sphere  */
   /*  than segment.  */

   {							/*  START # 20  */
	/*  Center of sphere.  */
	cent[0] = (fastf_t)strtpt[i][0];
	cent[1] = (fastf_t)strtpt[i][1];
	cent[2] = (fastf_t)strtpt[i][2];

	/*  Radius of sphere.  */
	rds = (fastf_t)strtrad[i];

	/*  Fill in correct number in solid name.  */
	(void)sprintf(temp,"%d",i);
	if(i < 10)
	{						/*  START # 21  */
	   solsph[5] = '0';
	   solsph[6] = temp[0];
	}						/*  END # 21  */
	else if( (10 <= i) || (i < 100) )
	{						/*  START # 22  */
	   solsph[5] = temp[0];
	   solsph[6] = temp[1];
	}						/*  END # 22  */
	else
	{						/*  START # 23  */
	   (void)printf("** ERROR ** i = %d\n",i);
	   (void)fflush(stdout);
	}						/*  END # 23  */

	/*  Make sphere.  */
	mk_sph(fpw,solsph,cent,rds);
   }							/*  END # 20  */

   /*  Create regions.  */

   /*  Initialize list.  */
   BU_LIST_INIT(&comb.l);

   /*  Create region for each segment.  */

   for(i=0; i<numseg; i++)
   {							/*  START # 30  */
	/*  Fill in correct number in region & solid names.  */
	(void)sprintf(temp,"%d",i);
	(void)sprintf(temp1,"%d",(i+1));

	if(i < 10)
	{						/*  START # 31  */
	   solcyl[5] = '0';
	   solcyl[6] = temp[0];
	   regcyl[5] = '0';
	   regcyl[6] = temp[0];

	   if(i < (numseg - 1) )
	   {						/*  START # 32  */
		if( (i + 1) < 10)
		{					/*  START # 33  */
		   solsub1[5] = '0';
		   solsub1[6] = temp1[0];
		}					/*  END # 33  */
		else
		{					/*  START # 34  */
		   solsub1[5] = temp1[0];
		   solsub1[6] = temp1[1];
		}					/*  END # 34  */
	   }						/*  END # 32  */
	}						/*  END # 31  */

	else if( (10 <= i) || (i < 100) )
	{						/*  START # 35  */
	   solcyl[5] = temp[0];
	   solcyl[6] = temp[1];
	   regcyl[5] = temp[0];
	   regcyl[6] = temp[1];

	   if(i < (numseg - 1) )
	   {						/*  START # 36  */
		solsub1[5] = temp1[0];
		solsub1[6] = temp1[1];
	   }						/*  END # 36  */
	}						/*  END # 35  */

	else
	{						/*  START # 37  */
	   (void)printf("** ERROR ** i = %d\n",i);
	   (void)fflush(stdout);
	}						/*  END # 37  */

	(void)mk_addmember(solcyl,&comb.l, NULL, WMOP_INTERSECT);

	if(i < (numseg - 1) )
	{						/*  START # 38  */
	   (void)mk_addmember(solsub1,&comb.l, NULL, WMOP_SUBTRACT);
	}						/*  END # 38  */

	mk_lfcomb(fpw,regcyl,&comb,1);
   }							/*  END # 30  */

   /*  Create region for each sphere.  */
   for(i=1; i<numseg; i++)
   {							/*  START # 40  */
	/*  Fill in correct region & solid names.  */
	(void)sprintf(temp,"%d",i);
	(void)sprintf(temp1,"%d",(i - 1));

	if(i < 10)
	{						/*  START # 41  */
	   solsph[5] = '0';
	   solsph[6] = temp[0];
	   regsph[5] = '0';
	   regsph[6] = temp[0];
	   solsub1[5] = '0';
	   solsub1[6] = temp1[0];
	   solsub2[5] = '0';
	   solsub2[6] = temp[0];
	}						/*  END # 41  */

	else if( (10 <= i) || (i < 100) )
	{						/*  START # 42  */
	   solsph[5] = temp[0];
	   solsph[6] = temp[1];
	   regsph[5] = temp[0];
	   regsph[6] = temp[1];
	   solsub1[5] = temp1[0];
	   solsub1[6] = temp1[1];
	   solsub2[5] = temp[0];
	   solsub2[6] = temp[1];
	}						/*  END # 42  */

	else
	{						/*  START # 43  */
	   (void)printf("** ERROR ** i = %d\n",i);
	   (void)fflush(stdout);
	}						/*  END # 43  */

	(void)mk_addmember(solsph,&comb.l, NULL, WMOP_INTERSECT);
	(void)mk_addmember(solsub1,&comb.l, NULL, WMOP_SUBTRACT);
	(void)mk_addmember(solsub2,&comb.l, NULL, WMOP_SUBTRACT);

	mk_lfcomb(fpw,regsph,&comb,1);
   }							/*  END # 40  */

   /*  Create group.  */

   /*  Initialize list.  */
   BU_LIST_INIT(&comb1.l);

   for(i=0; i<numseg; i++)
   {							/*  START # 50  */
	(void)sprintf(temp,"%d",i);

	if(i < 10)
	{						/*  START # 51  */
	   regcyl[5] = '0';
	   regcyl[6] = temp[0];
	   if(i != 0)
	   {						/*  START # 52  */
		regsph[5] = '0';
		regsph[6] = temp[0];
	   }						/*  END # 52  */
	}						/*  END # 51  */

	else if( (10 <= i) || (i < 100) )
	{						/*  START # 53  */
	   regcyl[5] = temp[0];
	   regcyl[6] = temp[1];
	   regsph[5] = temp[0];
	   regsph[6] = temp[1];
	}						/*  END # 53  */

	else
	{						/*  START # 54  */
	   (void)printf("** ERROR ** i = %d\n",i);
	   (void)fflush(stdout);
	}						/*  END # 54  */

	(void)mk_addmember(regcyl,&comb1.l, NULL, WMOP_UNION);
	if(i != 0)(void)mk_addmember(regsph,&comb1.l, NULL, WMOP_UNION);
   }							/*  END # 50  */

   mk_lfcomb(fpw,group,&comb1,0);
   wdb_close(fpw);
   return 0;
}							/*  END # 1  */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.9
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d148 1
a148 1
   (void)scanf("%s",filemged);
@


14.8
log
@The c89 headers are all fair game since it's been a requirement since the move to ANSI c89 compliance.  So.. remove the HAVE_STDLIB_H checks and just use the header.  The headers <complex.h>, <fenv.h>, <inttypes.h>, <stdbool.h>, <stdint.h>, and <tgmath.h> were added with C99 and still need to be checked.  There are several other c89 headers that we could just use, though, that are still being checked.
@
text
@a35 1

d38 1
a38 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.7
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a37 1
#ifdef HAVE_STDLIB_H
a38 1
#endif
d40 1
a40 1
#include <string.h>
d42 1
a42 1
#include <strings.h>
@


14.6
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a36 1

d221 1
a221 1
        (void)printf(" %f\n", strtrad[i]);
@


14.5
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.4
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 23
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d452 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d20 1
a20 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d12 1
a12 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

