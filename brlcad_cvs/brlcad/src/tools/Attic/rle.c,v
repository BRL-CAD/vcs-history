head	14.2;
access;
symbols
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.2
date	2004.12.21.03.32.05;	author morrison;	state dead;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.09.04.07.36;	author kermit;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.39;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.30;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@moved src/tools/ to src/other/URToolkit/ as the entire Utah Raster Toolkit is not ours but, rather, University of Utah codeage.
@
text
@/*
 * Copyright (C) 1988 Research Institute for Advanced Computer Science.
 * All rights reserved.  The RIACS Software Policy contains specific
 * terms and conditions on the use of this software, and must be
 * distributed with any copies.  This file may be redistributed.  This
 * copyright and notice must be preserved in all copies made of this file.
 */

/*
 * Interface routines for Utah Raster Toolkit
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>

#include "machine.h"
#include "rle.h"


/*
 * Globals are stored in a structure.
 */

static struct {
    int             width;
    int             height;
    unsigned char **scan;
    int		    row;
} Globals;

void
rasterInit(int fd, int width, int height)
{
    FILE           *rleFile;
    int             i;

    Globals.width = width;
    Globals.height = height;
    if (fd == 0) {
	rleFile = stdin;
    } else {
	rleFile = fdopen(fd, "r");
    }
    rle_dflt_hdr.rle_file = rleFile;
    rle_get_setup(&rle_dflt_hdr);

    if (rle_dflt_hdr.xmax > width) {
	fprintf(stderr, "Warning: RLE width (%d) exceeds maximum (%d)\n", 
	    rle_dflt_hdr.xmax, width);
    }
    if (rle_dflt_hdr.ymax > height) {
	fprintf(stderr, "Warning: RLE height (%d) exceeds maximum (%d)\n", 
	    rle_dflt_hdr.ymax, height);
    }
    Globals.row = 0;
    Globals.scan = (unsigned char **) malloc((rle_dflt_hdr.ncolors +
				      rle_dflt_hdr.alpha) *
				     sizeof(unsigned char *));
    for (i = 0; i < rle_dflt_hdr.ncolors + rle_dflt_hdr.alpha; i++)
	Globals.scan[i] = 
	    (unsigned char *)malloc(rle_dflt_hdr.xmax+1);

    if (rle_dflt_hdr.alpha) {
	Globals.scan++;
    }
}

void
rasterRowGet(unsigned char *red, unsigned char *green, unsigned char *blue)
{
    int             i, max;

    if (Globals.row < rle_dflt_hdr.ymin || Globals.row > rle_dflt_hdr.ymax) {
	for (i = 0; i < Globals.width; i++) {
	    red[i] = 0;
	    green[i] = 0;
	    blue[i] = 0;
	}
    } else {
	rle_getrow(&rle_dflt_hdr, Globals.scan);
	max = rle_dflt_hdr.xmax < Globals.width ?
	    rle_dflt_hdr.xmax : Globals.width;
	for (i = 0 ; i < max; i++) {
	    red[i] = Globals.scan[0][i];
	    green[i] = Globals.scan[1][i];
	    blue[i] = Globals.scan[2][i];
	}
	for (; i < Globals.width; i++) {
	    red[i] = green[i] = blue[i] = 0;
	}
    }
    Globals.row++;
}

void
rasterDone(void)
{
    rle_puteof(&rle_dflt_hdr);
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@@


1.4
log
@Added <stdlib.h> to fix implicit cast (for IA64 architecture).
@
text
@d102 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d15 1
a15 2


d20 1
@


1.2
log
@obliterate externs.h
@
text
@d13 1
a13 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a21 1
#include "externs.h"
@

