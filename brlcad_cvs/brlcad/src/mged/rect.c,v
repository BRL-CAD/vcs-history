head	14.9;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.2
	stable-branch:14.3
	rel-7-10-2:14.9
	rel-7-10-0:14.8
	rel-7-8-4:14.5
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3.2.1
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.3
	rel-7-6-6:14.3
	rel-7-6-4:14.3
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.9
date	2007.05.14.21.04.32;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.23.01.13.42;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.12.23.21.26.31;	author bob1961;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.06;	author brlcad;	state Exp;
branches
	14.3.2.1;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.27;	author morrison;	state Exp;
branches;
next	;

14.3.2.1
date	2005.09.08.15.57.40;	author bob1961;	state Exp;
branches;
next	;


desc
@@


14.9
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@/*                          R E C T . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file rect.c
 *
 *  Routines to implement MGED's rubber band rectangle capability.
 *
 *  Author -
 *	Robert G. Parker
 */
#ifndef lint
static const char RCSid[] = "";
#endif

#include "common.h"


#include <math.h>
#include <stdio.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "fb.h"
#include "./ged.h"
#include "./mged_dm.h"

extern void mged_center(fastf_t *center); /* from chgview.c */
extern int mged_vscale(fastf_t sfactor);

static void adjust_rect_for_zoom(void);

struct _rubber_band default_rubber_band = {
/* rb_rc */		1,
/* rb_active */		0,
/* rb_draw */		0,
/* rb_linewidth */	0,
/* rb_linestyle */	's',
/* rb_pos */		{ 0, 0 },
/* rb_dim */		{ 0, 0 },
/* rb_x */		0.0,
/* rb_y */		0.0,
/* rb_width */		0.0,
/* rb_height */		0.0
};

#define RB_O(_m)        bu_offsetof(struct _rubber_band, _m)
#define RB_OA(_m)	bu_offsetofarray(struct _rubber_band, _m)
struct bu_structparse rubber_band_vparse[] = {
	{"%d",	1, "draw",	RB_O(rb_draw),		rb_set_dirty_flag },
	{"%d",	1, "linewidth",	RB_O(rb_linewidth),	rb_set_dirty_flag },
	{"%c",	1, "linestyle",	RB_O(rb_linestyle),	rb_set_dirty_flag },
	{"%d",	2, "pos",	RB_OA(rb_pos),		set_rect },
	{"%d",	2, "dim",	RB_OA(rb_dim),		set_rect },
	{"",	0, (char *)0,	0,			BU_STRUCTPARSE_FUNC_NULL }
};

void
rb_set_dirty_flag(void)
{
  struct dm_list *dmlp;

  FOR_ALL_DISPLAYS(dmlp, &head_dm_list.l)
    if(dmlp->dml_rubber_band == rubber_band)
      dmlp->dml_dirty = 1;
}

/*
 * Given position and dimensions in normalized view coordinates, calculate
 * position and dimensions in image coordinates.
 */
void
rect_view2image(void)
{
  rubber_band->rb_pos[X] = dm_Normal2Xx(dmp, rubber_band->rb_x);
  rubber_band->rb_pos[Y] = dmp->dm_height - dm_Normal2Xy(dmp, rubber_band->rb_y, 1);
  rubber_band->rb_dim[X] = rubber_band->rb_width * dmp->dm_width * 0.5;
  rubber_band->rb_dim[Y] = rubber_band->rb_height * dmp->dm_width * 0.5;
}

/*
 * Given position and dimensions in image coordinates, calculate
 * position and dimensions in normalized view coordinates.
 */
void
rect_image2view(void)
{
  rubber_band->rb_x = dm_Xx2Normal(dmp, rubber_band->rb_pos[X]);
  rubber_band->rb_y = dm_Xy2Normal(dmp, dmp->dm_height - rubber_band->rb_pos[Y], 1);
  rubber_band->rb_width = rubber_band->rb_dim[X] * 2.0 / (fastf_t)dmp->dm_width;
  rubber_band->rb_height = rubber_band->rb_dim[Y] * 2.0 / (fastf_t)dmp->dm_width;
}

void
set_rect(void)
{
  rect_image2view();
  rb_set_dirty_flag();
}

/*
 * Adjust the rubber band to have the same aspect ratio as the window.
 */
static void
adjust_rect_for_zoom(void)
{
  fastf_t width, height;

  if(rubber_band->rb_width >= 0.0)
    width = rubber_band->rb_width;
  else
    width = -rubber_band->rb_width;

  if(rubber_band->rb_height >= 0.0)
    height = rubber_band->rb_height;
  else
    height = -rubber_band->rb_height;

  if(width >= height){
    if(rubber_band->rb_height >= 0.0)
      rubber_band->rb_height = width / dmp->dm_aspect;
    else
      rubber_band->rb_height = -width / dmp->dm_aspect;
  }else{
    if(rubber_band->rb_width >= 0.0)
      rubber_band->rb_width = height * dmp->dm_aspect;
    else
      rubber_band->rb_width = -height * dmp->dm_aspect;
  }
}

void
draw_rect(void)
{
  int line_style;

  if(NEAR_ZERO(rubber_band->rb_width, (fastf_t)SMALL_FASTF) &&
     NEAR_ZERO(rubber_band->rb_height, (fastf_t)SMALL_FASTF))
    return;

  if(rubber_band->rb_linestyle == 'd')
    line_style = 1; /* dashed lines */
  else
    line_style = 0; /* solid lines */

  if(rubber_band->rb_active && mged_variables->mv_mouse_behavior == 'z')
    adjust_rect_for_zoom();

  /* draw rectangle */
  DM_SET_FGCOLOR(dmp,
	       color_scheme->cs_rubber_band[0],
	       color_scheme->cs_rubber_band[1],
	       color_scheme->cs_rubber_band[2], 1, 1.0);
  DM_SET_LINE_ATTR(dmp, rubber_band->rb_linewidth, line_style);

  DM_DRAW_LINE_2D(dmp,
		  rubber_band->rb_x,
		  rubber_band->rb_y * dmp->dm_aspect,
		  rubber_band->rb_x,
		  (rubber_band->rb_y + rubber_band->rb_height) * dmp->dm_aspect);
  DM_DRAW_LINE_2D(dmp,
		  rubber_band->rb_x,
		  (rubber_band->rb_y + rubber_band->rb_height) * dmp->dm_aspect,
		  rubber_band->rb_x + rubber_band->rb_width,
		  (rubber_band->rb_y + rubber_band->rb_height) * dmp->dm_aspect);
  DM_DRAW_LINE_2D(dmp,
		  rubber_band->rb_x + rubber_band->rb_width,
		  (rubber_band->rb_y + rubber_band->rb_height) * dmp->dm_aspect,
		  rubber_band->rb_x + rubber_band->rb_width,
		  rubber_band->rb_y * dmp->dm_aspect);
  DM_DRAW_LINE_2D(dmp,
		  rubber_band->rb_x + rubber_band->rb_width,
		  rubber_band->rb_y * dmp->dm_aspect,
		  rubber_band->rb_x,
		  rubber_band->rb_y * dmp->dm_aspect);
}

void
paint_rect_area(void)
{
  if(!fbp)
    return;

  (void)fb_refresh(fbp, rubber_band->rb_pos[X], rubber_band->rb_pos[Y],
		   rubber_band->rb_dim[X], rubber_band->rb_dim[Y]);
}

void
rt_rect_area(void)
{
  int xmin, xmax;
  int ymin, ymax;
  int width, height;
  struct bu_vls vls;

  if(!fbp)
    return;

  if(NEAR_ZERO(rubber_band->rb_width, (fastf_t)SMALL_FASTF) &&
     NEAR_ZERO(rubber_band->rb_height, (fastf_t)SMALL_FASTF))
    return;

  if(mged_variables->mv_port < 0){
    bu_log("rt_rect_area: invalid port number - %d\n", mged_variables->mv_port);
    return;
  }

  xmin = rubber_band->rb_pos[X];
  ymin = rubber_band->rb_pos[Y];
  width = rubber_band->rb_dim[X];
  height = rubber_band->rb_dim[Y];

  if(width >= 0){
    xmax = xmin + width;
  }else{
    xmax = xmin;
    xmin += width;
  }

  if(height >= 0){
    ymax = ymin + height;
  }else{
    ymax = ymin;
    ymin += height;
  }

  bu_vls_init(&vls);
  bu_vls_printf(&vls, "rt -w %d -n %d -V %lf -F %d -j %d,%d,%d,%d -C%d/%d/%d",
		dmp->dm_width, dmp->dm_height, dmp->dm_aspect,
		mged_variables->mv_port, xmin, ymin, xmax, ymax,
		color_scheme->cs_bg[0], color_scheme->cs_bg[1], color_scheme->cs_bg[2]);
  (void)Tcl_Eval(interp, bu_vls_addr(&vls));
  (void)Tcl_ResetResult(interp);
  bu_vls_free(&vls);
}

void
zoom_rect_area(void)
{
  fastf_t width, height;
  fastf_t sf;
  point_t old_model_center;
  point_t new_model_center;
  point_t old_view_center;
  point_t new_view_center;

  if(NEAR_ZERO(rubber_band->rb_width, (fastf_t)SMALL_FASTF) &&
     NEAR_ZERO(rubber_band->rb_height, (fastf_t)SMALL_FASTF))
    return;

  adjust_rect_for_zoom();

  /* find old view center */
  MAT_DELTAS_GET_NEG(old_model_center, view_state->vs_vop->vo_center);
  MAT4X3PNT(old_view_center, view_state->vs_vop->vo_model2view, old_model_center);

  /* calculate new view center */
  VSET(new_view_center,
       rubber_band->rb_x + rubber_band->rb_width / 2.0,
       rubber_band->rb_y + rubber_band->rb_height / 2.0,
       old_view_center[Z]);

  /* find new model center */
  MAT4X3PNT(new_model_center, view_state->vs_vop->vo_view2model, new_view_center);
  mged_center(new_model_center);

  /* zoom in to fill rectangle */
  if(rubber_band->rb_width >= 0.0)
    width = rubber_band->rb_width;
  else
    width = -rubber_band->rb_width;

  if(rubber_band->rb_height >= 0.0)
    height = rubber_band->rb_height;
  else
    height = -rubber_band->rb_height;

  if(width >= height)
    sf = width / 2.0;
  else
    sf = height / 2.0 * dmp->dm_aspect;

  mged_vscale(sf);

  rubber_band->rb_x = -1.0;
  rubber_band->rb_y = -1.0 / dmp->dm_aspect;
  rubber_band->rb_width = 2.0;
  rubber_band->rb_height = 2.0 / dmp->dm_aspect;

  rect_view2image();
  rb_set_dirty_flag();
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.8
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d64 2
a65 2
#define RB_O(_m)        offsetof(struct _rubber_band, _m)
#define RB_OA(_m)	offsetofarray(struct _rubber_band, _m)
@


14.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a33 1

@


14.6
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.5
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
@


14.4
log
@Merge of bobWinPort
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d43 1
a46 2
extern int fb_refresh();  /* from libfb/tcl.c */

@


14.3.2.1
log
@fb_refresh declared in fb.h
@
text
@a42 1
#include "fb.h"
d46 2
@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			R E C T . C
a26 4
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army.
 *	All rights reserved.
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d298 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d17 1
a17 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

