head	14.16;
access;
symbols
	rel-7-10-4:14.14.2.1
	STABLE:14.14.0.2
	stable-branch:14.4
	rel-7-10-2:14.14
	rel-7-10-0:14.14
	rel-7-8-4:14.12
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.5.2.1
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.16
date	2007.12.02.22.34.22;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.09.15.16.23.16;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.41;	author brlcad;	state Exp;
branches
	14.14.2.1;
next	14.13;

14.13
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.08.08.06.08.16;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.08.07.21.49.33;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.08.07.17.37.39;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.23.06.32.37;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.12.23.21.26.31;	author bob1961;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.05.28.02.14.51;	author brlcad;	state Exp;
branches
	14.5.2.1
	14.5.6.1;
next	14.4;

14.4
date	2005.03.20.00.19.57;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.05;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.16.08.05.48;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.27;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.22;	author morrison;	state Exp;
branches;
next	;

14.5.2.1
date	2005.09.08.16.09.50;	author bob1961;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.14.2.1
date	2007.09.28.14.04.33;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.16
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                        D M - O G L . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dm-ogl.c
 *
 *  Routines specific to MGED's use of LIBDM's OpenGl display manager.
 *
 *  Author -
 *	Robert G. Parker
 *
 *  Source -
 *	SLAD CAD Team
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header:";
#endif

#include "common.h"

#include <stdlib.h>
#include <math.h>
#include <string.h>

#ifdef HAVE_GL_GLX_H
#  include <GL/glx.h>
#endif
#ifdef HAVE_GL_GL_H
#  include <GL/gl.h>
#endif
#ifdef HAVE_GL_DEVICE_H
#  include <gl/device.h>
#endif

#include "tk.h"
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"
#include "dm_xvars.h"
#include "dm-ogl.h"

#include "./ged.h"
#include "./sedit.h"
#include "./mged_dm.h"


extern void dm_var_init();		/* defined in attach.c */
extern void cs_set_bg();		/* defined in color_scheme.c */

static int	Ogl_dm();
static int	Ogl_doevent();
static void     Ogl_colorchange();
static void     establish_zbuffer();
static void     establish_lighting();
static void     establish_transparency();
static void     dirty_hook();
static void     zclip_hook();
static void     debug_hook();
static void     bound_hook();
static void     boundFlag_hook();
static void     do_fogHint();

struct bu_structparse Ogl_vparse[] = {
	{"%d",	1, "depthcue",		Ogl_MV_O(cueing_on),	Ogl_colorchange },
	{"%d",  1, "zclip",		Ogl_MV_O(zclipping_on),	zclip_hook },
	{"%d",  1, "zbuffer",		Ogl_MV_O(zbuffer_on),	establish_zbuffer },
	{"%d",  1, "lighting",		Ogl_MV_O(lighting_on),	establish_lighting },
	{"%d",  1, "transparency",	Ogl_MV_O(transparency_on), establish_transparency },
	{"%d",  1, "fastfog",		Ogl_MV_O(fastfog),	do_fogHint },
	{"%f",  1, "density",		Ogl_MV_O(fogdensity),	dirty_hook },
	{"%d",  1, "has_zbuf",		Ogl_MV_O(zbuf),		BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  1, "has_rgb",		Ogl_MV_O(rgb),		BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  1, "has_doublebuffer",	Ogl_MV_O(doublebuffer), BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  1, "depth",		Ogl_MV_O(depth),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  1, "debug",		Ogl_MV_O(debug),	debug_hook },
	{"%f",  1, "bound",		Ogl_MV_O(bound),	bound_hook },
	{"%d",  1, "useBound",		Ogl_MV_O(boundFlag),	boundFlag_hook },
	{"",	0,  (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};


int
Ogl_dm_init(struct dm_list	*o_dm_list,
	    int			argc,
	    char		*argv[])
{
	struct bu_vls vls;

	dm_var_init(o_dm_list);

	/* register application provided routines */
	cmd_hook = Ogl_dm;

	Tk_DeleteGenericHandler(doEvent, (ClientData)NULL);

	if ((dmp = dm_open(interp, DM_TYPE_OGL, argc-1, argv)) == DM_NULL)
		return TCL_ERROR;

	/*XXXX this eventually needs to move into Ogl's private structure */
	dmp->dm_vp = &view_state->vs_vop->vo_scale;
	dmp->dm_perspective = mged_variables->mv_perspective_mode;

	eventHandler = Ogl_doevent;
	Tk_CreateGenericHandler(doEvent, (ClientData)NULL);
	(void)DM_CONFIGURE_WIN(dmp);

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "mged_bind_dm %s", bu_vls_addr(&pathName));
	Tcl_Eval(interp, bu_vls_addr(&vls));
	bu_vls_free(&vls);

	return TCL_OK;
}

void
Ogl_fb_open()
{
	char *ogl_name = "/dev/ogl";

	if ((fbp = (FBIO *)calloc(sizeof(FBIO), 1)) == FBIO_NULL) {
		Tcl_AppendResult(interp, "Ogl_fb_open: failed to allocate framebuffer memory\n",
				 (char *)NULL);
		return;
	}

	*fbp = ogl_interface; /* struct copy */
	fbp->if_name = bu_malloc((unsigned)strlen(ogl_name) + 1, "if_name");
	strncpy(fbp->if_name, ogl_name, strlen(ogl_name));

	/* Mark OK by filling in magic number */
	fbp->if_magic = FB_MAGIC;
	_ogl_open_existing(fbp,
			   ((struct dm_xvars *)dmp->dm_vars.pub_vars)->dpy,
			   ((struct dm_xvars *)dmp->dm_vars.pub_vars)->win,
			   ((struct dm_xvars *)dmp->dm_vars.pub_vars)->cmap,
			   ((struct dm_xvars *)dmp->dm_vars.pub_vars)->vip,
			   dmp->dm_width, dmp->dm_height,
			   ((struct ogl_vars *)dmp->dm_vars.priv_vars)->glxc,
			   ((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.doublebuffer, 0);
}

/*
   This routine is being called from doEvent() to handle Expose events.
*/
static int
Ogl_doevent(ClientData	clientData,
	    XEvent	*eventPtr)
{
	if (!glXMakeCurrent(((struct dm_xvars *)dmp->dm_vars.pub_vars)->dpy,
			    ((struct dm_xvars *)dmp->dm_vars.pub_vars)->win,
			    ((struct ogl_vars *)dmp->dm_vars.priv_vars)->glxc))
		/* allow further processing of this event */
		return TCL_OK;

	if (eventPtr->type == Expose && eventPtr->xexpose.count == 0) {
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		dirty = 1;

		/* no further processing of this event */
		return TCL_RETURN;
	}

	/* allow further processing of this event */
	return TCL_OK;
}

/*
 *			O G L _ D M
 *
 *  Implement display-manager specific commands, from MGED "dm" command.
 */
static int
Ogl_dm(int	argc,
       char	**argv)
{
	  if (!strcmp(argv[0], "set")) {
		  struct bu_vls	vls;

		  bu_vls_init(&vls);

		  if (argc < 2) {
			  /* Bare set command, print out current settings */
			  bu_vls_struct_print2(&vls,
					       "dm_ogl internal variables",
					       Ogl_vparse,
					       (const char *)&((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars);
		  } else if (argc == 2) {
			  bu_vls_struct_item_named(&vls,
						   Ogl_vparse,
						   argv[1],
						   (const char *)&((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars,
						   ',');
		  } else {
			  struct bu_vls tmp_vls;

			  bu_vls_init(&tmp_vls);
			  bu_vls_printf(&tmp_vls, "%s=\"", argv[1]);
			  bu_vls_from_argv(&tmp_vls, argc-2, (const char **)argv+2);
			  bu_vls_putc(&tmp_vls, '\"');
			  bu_struct_parse(&tmp_vls,
					  Ogl_vparse,
					  (char *)&((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars);
			  bu_vls_free(&tmp_vls);
		  }

		  Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
		  bu_vls_free(&vls);

		  return TCL_OK;
	  }

	  return common_dm(argc, argv);
}

static void
Ogl_colorchange()
{
	if (((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.cueing_on) {
		glEnable(GL_FOG);
	} else {
		glDisable(GL_FOG);
	}

	view_state->vs_flag = 1;
}

static void
establish_zbuffer()
{
	(void)DM_SET_ZBUFFER(dmp, ((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.zbuffer_on);
	view_state->vs_flag = 1;
}

static void
establish_lighting()
{
	(void)DM_SET_LIGHT(dmp, ((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.lighting_on);
	view_state->vs_flag = 1;
}

static void
establish_transparency()
{
	(void)DM_SET_TRANSPARENCY(dmp, ((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.transparency_on);
	view_state->vs_flag = 1;
}

static void
do_fogHint()
{
	dm_fogHint(dmp, ((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.fastfog);
	view_state->vs_flag = 1;
}

static void
dirty_hook()
{
	dirty = 1;
}

static void
zclip_hook()
{
	dmp->dm_zclip = ((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.zclipping_on;
	view_state->vs_vop->vo_zclip = dmp->dm_zclip;
	dirty_hook();
}

static void
debug_hook()
{
	DM_DEBUG(dmp, ((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.debug);
}

static void
bound_hook()
{
	dmp->dm_bound =
		((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.bound;
	dirty_hook();
}

static void
boundFlag_hook()
{
	dmp->dm_boundFlag =
		((struct ogl_vars *)dmp->dm_vars.priv_vars)->mvars.boundFlag;
	dirty_hook();
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d149 1
a149 1
	(void)strcpy(fbp->if_name, ogl_name);
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d42 2
a43 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.14.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d42 5
a46 2
#include <string.h>

@


14.13
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.12
log
@move the common_dm() decl over to mged_dm.h
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.11
log
@ws
@
text
@a71 1
extern int common_dm();			/* defined in dm-generic.c */
@


14.10
log
@no longer need the _WIN32 section, they get their own dm-wgl.c interface
@
text
@d66 1
d71 1
@


14.9
log
@stdlib.h for alloc/getenv funcs
@
text
@a172 1
#ifndef _WIN32
a177 5
#else
	  if (!wglMakeCurrent(((struct dm_xvars *)dmp->dm_vars.pub_vars)->hdc,
		      ((struct ogl_vars *)dmp->dm_vars.priv_vars)->glxc))
		return TCL_OK;
#endif
a179 3
#if 0
		glClearColor(0.0, 0.0, 0.0, 0.0);
#endif
@


14.8
log
@update copyright to 2006
@
text
@d41 2
a47 4

#include <math.h>
#include "tk.h"

d58 1
d151 1
a151 1
	fbp->if_name = malloc((unsigned)strlen(ogl_name) + 1);
@


14.7
log
@Merge of bobWinPort
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.6
log
@trailing ws
@
text
@a70 2

extern int _ogl_open_existing();	/* defined in libfb/if_ogl.c */
@


14.5
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d27 1
a27 1
 *  
d206 1
a206 1
 * 
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 1
 *
d206 1
a206 1
 *
@


14.5.2.1
log
@Mods for windows port
@
text
@d71 2
@


14.4
log
@bye bye USE_MESA_GL .. needs some good testing on the ogl interface
@
text
@d176 1
a176 1
#ifndef WIN32
@


14.3
log
@update copyright to 2005
@
text
@a40 2


d42 1
a42 1
#include <string.h>
d44 1
a44 1
#include <strings.h>
d50 5
a54 8
#ifndef WIN32
#ifdef USE_MESA_GL
#include <GL/glx.h>
#include <GL/gl.h>
#else
#include <GL/glx.h>
#include <GL/gl.h>
#include <gl/device.h>
d56 2
a57 2
#else
#include <GL/gl.h>
d71 1
a107 4
#ifdef WIN32  
/* ??? not sure why this is needed? */
extern FBIO ogl_interface;
#endif
@


14.2
log
@GPL License changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D M - O G L . C
@


1.5
log
@quell yet more warnings..
@
text
@d316 10
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d224 1
a224 1
			  bu_vls_from_argv(&tmp_vls, argc-2, argv+2);
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d24 1
a24 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d20 1
a20 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a48 1
#include "externs.h"
@

