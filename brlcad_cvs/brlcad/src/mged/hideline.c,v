head	14.11;
access;
symbols
	rel-7-10-4:14.9.2.1
	STABLE:14.9.0.2
	stable-branch:14.3
	rel-7-10-2:14.9
	rel-7-10-0:14.8
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.11
date	2007.12.17.02.16.54;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.09.15.16.23.17;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.05.14.21.04.32;	author brlcad;	state Exp;
branches
	14.9.2.1;
next	14.8;

14.8
date	2007.01.23.01.13.42;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.12.08.01.31.30;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.06;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.04.14.49.22;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.28;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.24;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.9.2.1
date	2007.09.28.14.04.34;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@removal of the FAST declaration throughout.  now using register or letting the compiler sort things out.
@
text
@/*                      H I D E L I N E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file hideline.c
 *
 */

/*
 *			H I D E L I N E . C
 *
 * Description -
 *	Takes the vector  list for the  current  display  and  raytraces
 *	along those vectors.  If the first point hit in the model is the
 *	same as that  vector,  continue  the line  through  that  point;
 *	otherwise,  stop  drawing  that  vector  or  draw  dotted  line.
 *	Produces Unix-plot type output.
 *
 *	The command is "H file.pl [stepsize] [%epsilon]". Stepsize is the
 *	number of segments into which the window size should be broken.
 *	%Epsilon specifies how close two points must be before they are
 *	considered equal. A good values for stepsize and %epsilon are 128
 *	and 1, respectively.
 *
 * Author -
 *	Mark Huston Bowden
 *
 * History -
 *	01 Aug 88		Began initial coding
 *
 *  Source -
 *	Research  Institute,  E-47
 *	University of Alabama in Huntsville
 *	Huntsville, AL 35899
 *	(205) 895-6467	UAH
 *	(205) 876-1089	Redstone Arsenal
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.10 2007/09/15 16:23:17 brlcad Exp $ (ARL)";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "./ged.h"
#include "solid.h"
#include "./mged_dm.h"


#define MAXOBJECTS	3000

#define VIEWSIZE	(2*view_state->vs_Viewscale)
#define TRUE	1
#define FALSE	0

#define MOVE(v)	  VMOVE(last_move,(v))

#define DRAW(v)	{ vect_t a,b;\
		  MAT4X3PNT(a,view_state->vs_model2view,last_move);\
		  MAT4X3PNT(b,view_state->vs_model2view,(v));\
		  pdv_3line(plotfp, a, b ); }

extern struct db_i *dbip;	/* current database instance */

fastf_t epsilon;
vect_t aim_point;
struct solid *sp;

/*
 * hit_headon - routine called by rt_shootray if ray hits model
 */

static int
hit_headon(struct application *ap, struct partition *PartHeadp)
{
	register char diff_solid;
	vect_t	diff;
	register fastf_t len;

	if (PartHeadp->pt_forw->pt_forw != PartHeadp)
	  Tcl_AppendResult(interp, "hit_headon: multiple partitions\n", (char *)NULL);

	VJOIN1(PartHeadp->pt_forw->pt_inhit->hit_point,ap->a_ray.r_pt,
	    PartHeadp->pt_forw->pt_inhit->hit_dist, ap->a_ray.r_dir);
	VSUB2(diff,PartHeadp->pt_forw->pt_inhit->hit_point,aim_point);

	diff_solid = (FIRST_SOLID(sp) !=
		PartHeadp->pt_forw->pt_inseg->seg_stp->st_dp);
	len = MAGNITUDE(diff);

	if (	NEAR_ZERO(len,epsilon)
	    ||
	    ( diff_solid &&
	    VDOT(diff,ap->a_ray.r_dir) > 0 )
	    )
		return(1);
	else
		return(0);
}

/*
 * hit_tangent - routine called by rt_shootray if ray misses model
 *
 *     We know we are shooting at the model since we are aiming at the
 *     vector list MGED created. However, shooting at an edge or shooting
 *     tangent to a curve produces only one intersection point at which
 *     time rt_shootray reports a miss. Therefore, this routine is really
 *     a "hit" routine.
 */

static int
hit_tangent(struct application *ap, struct partition *PartHeadp)
{
	return(1);		/* always a hit */
}

/*
 * hit_overlap - called by rt_shootray if ray hits an overlap
 */

static int
hit_overlap(struct application *ap, struct partition *PartHeadp)
{
	return(0);		/* never a hit */
}

/*
 *			F _ H I D E L I N E
 */
int
f_hideline(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	FILE 	*plotfp;
	char 	visible;
	int 	i,numobjs;
	char 	*objname[MAXOBJECTS],title[1];
	fastf_t 	len,u,step;
	float 	ratio;
	vect_t	last_move;
	struct rt_i	*rtip;
	struct resource resource;
	struct application a;
	vect_t temp;
	vect_t last,dir;
	register struct bn_vlist	*vp;

	CHECK_DBI_NULL;

	if(argc < 2 || 4 < argc){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help H");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	if ((plotfp = fopen(argv[1],"w")) == NULL) {
	  Tcl_AppendResult(interp, "f_hideline: unable to open \"", argv[1],
			   "\" for writing.\n", (char *)NULL);
	  return TCL_ERROR;
	}
	pl_space(plotfp,(int)GED_MIN,(int)GED_MIN,(int)GED_MAX,(int)GED_MAX);

	/*  Build list of objects being viewed */
	numobjs = 0;
	FOR_ALL_SOLIDS(sp) {
		for (i = 0; i < numobjs; i++)  {
			if( objname[i] == FIRST_SOLID(sp)->d_namep )
				break;
		}
		if (i == numobjs)
			objname[numobjs++] = FIRST_SOLID(sp)->d_namep;
	}

	Tcl_AppendResult(interp, "Generating hidden-line drawing of the following regions:\n",
			 (char *)NULL);
	for (i = 0; i < numobjs; i++)
	  Tcl_AppendResult(interp, "\t", objname[i], "\n", (char *)NULL);

	/* Initialization for librt */
	if ((rtip = rt_dirbuild(dbip->dbi_filename,title,0)) == RTI_NULL) {
	  Tcl_AppendResult(interp, "f_hideline: unable to open model file \"",
			   dbip->dbi_filename, "\"\n", (char *)NULL);
	  return TCL_ERROR;
	}
	a.a_hit = hit_headon;
	a.a_miss = hit_tangent;
	a.a_overlap = hit_overlap;
	a.a_rt_i = rtip;
	a.a_resource = &resource;
	a.a_level = 0;
	a.a_onehit = 1;
	a.a_diverge = 0;
	a.a_rbeam = 0;

	if (argc > 2) {
		sscanf(argv[2],"%f",&step);
		step = view_state->vs_Viewscale/step;
		sscanf(argv[3],"%f",&epsilon);
		epsilon *= view_state->vs_Viewscale/100;
	} else {
		step = view_state->vs_Viewscale/256;
		epsilon = 0.1*view_state->vs_Viewscale;
	}

	for (i = 0; i < numobjs; i++)
	  if (rt_gettree(rtip,objname[i]) == -1)
	    Tcl_AppendResult(interp, "f_hideline: rt_gettree failed on \"",
			     objname[i], "\"\n", (char *)NULL);

	/* Crawl along the vectors raytracing as we go */
	VSET(temp, 0.0, 0.0, -1.0);				/* looking at model */
	MAT4X3VEC(a.a_ray.r_dir,view_state->vs_view2model,temp);
	VUNITIZE(a.a_ray.r_dir);

	FOR_ALL_SOLIDS(sp) {

		ratio = sp->s_size / VIEWSIZE;		/* ignore if small or big */
		if (ratio >= dmp->dmr_bound || ratio < 0.001)
			continue;

		Tcl_AppendResult(interp, "Primitive\n", (char *)NULL);
		for( BU_LIST_FOR( vp, bn_vlist, &(sp->s_vlist) ) )  {
			register int	i;
			register int	nused = vp->nused;
			register int	*cmd = vp->cmd;
			register point_t *pt = vp->pt;
			for( i = 0; i < nused; i++,cmd++,pt++ )  {
			  Tcl_AppendResult(interp, "\tVector\n", (char *)NULL);
				switch( *cmd )  {
				case BN_VLIST_POLY_START:
				case BN_VLIST_POLY_VERTNORM:
					break;
				case BN_VLIST_POLY_MOVE:
				case BN_VLIST_LINE_MOVE:
					/* move */
					VMOVE(last, *pt);
					MOVE(last);
					break;
				case BN_VLIST_POLY_DRAW:
				case BN_VLIST_POLY_END:
				case BN_VLIST_LINE_DRAW:
					/* setup direction && length */
					VSUB2(dir, *pt, last);
					len = MAGNITUDE(dir);
					VUNITIZE(dir);
					visible = FALSE;
					{
					  struct bu_vls tmp_vls;

					  bu_vls_init(&tmp_vls);
					  bu_vls_printf(&tmp_vls, "\t\tDraw 0 -> %g, step %g\n", len, step);
					  Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);
					  bu_vls_free(&tmp_vls);
					}
					for (u = 0; u <= len; u += step) {
						VJOIN1(aim_point,last,u,dir);
						MAT4X3PNT(temp,view_state->vs_model2view,aim_point);
						temp[Z] = 100;			/* parallel project */
						MAT4X3PNT(a.a_ray.r_pt,view_state->vs_view2model,temp);
						if (rt_shootray(&a)) {
							if (!visible) {
								visible = TRUE;
								MOVE(aim_point);
							}
						} else {
							if (visible) {
								visible = FALSE;
								DRAW(aim_point);
							}
						}
					}
					if (visible)
						DRAW(aim_point);
					VMOVE(last, *pt); /* new last vertex */
				}
			}
		}
	}
	fclose(plotfp);
	return TCL_OK;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d54 1
a54 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.9 2007/05/14 21:04:32 brlcad Exp $ (ARL)";
d159 1
a159 1
	FAST float 	ratio;
@


14.9
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d54 1
a54 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.8 2007/01/23 01:13:42 brlcad Exp $ (ARL)";
d60 1
a60 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.9.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d54 1
a54 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.10 2007/09/15 16:23:17 brlcad Exp $ (ARL)";
d60 5
a64 1
#include <string.h>
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d54 1
a54 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.7 2007/01/20 14:36:57 brlcad Exp $ (ARL)";
d170 1
a170 1
	register struct rt_vlist	*vp;
d250 1
a250 1
		for( BU_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
d258 2
a259 2
				case RT_VLIST_POLY_START:
				case RT_VLIST_POLY_VERTNORM:
d261 2
a262 2
				case RT_VLIST_POLY_MOVE:
				case RT_VLIST_LINE_MOVE:
d267 3
a269 3
				case RT_VLIST_POLY_DRAW:
				case RT_VLIST_POLY_END:
				case RT_VLIST_LINE_DRAW:
@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d54 1
a54 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.6 2006/01/18 06:46:19 brlcad Exp $ (ARL)";
@


14.6
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.5 2005/12/08 01:31:30 brlcad Exp $ (ARL)";
@


14.5
log
@k&r -> ansi
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.4 2005/10/23 04:44:37 brlcad Exp $ (ARL)";
@


14.4
log
@trailing ws
@
text
@d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.3 2005/01/30 20:31:06 brlcad Exp $ (ARL)";
d100 1
a100 3
hit_headon(ap,PartHeadp)
register struct application *ap;
struct partition *PartHeadp;
d138 1
a138 3
hit_tangent(ap,PartHeadp)
register struct application *ap;
struct partition *PartHeadp;
d148 1
a148 3
hit_overlap(ap,PartHeadp)
register struct application *ap;
struct partition *PartHeadp;
d157 1
a157 5
f_hideline(clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int	argc;
char	**argv;
@


14.3
log
@update copyright to 2005
@
text
@d25 1
a25 1
/* 
d27 1
a27 1
 * 
d41 2
a42 2
 * Author -  
 *	Mark Huston Bowden  
d46 1
a46 1
 *  
d48 2
a49 2
 *	Research  Institute,  E-47 
 *	University of Alabama in Huntsville  
d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/hideline.c,v 14.2 2004/12/21 04:17:27 butler Exp $ (ARL)";
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d25 1
a25 1
/*
d27 1
a27 1
 *
d41 2
a42 2
 * Author -
 *	Mark Huston Bowden
d46 1
a46 1
 *
d48 2
a49 2
 *	Research  Institute,  E-47
 *	University of Alabama in Huntsville
d55 1
a55 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
@


14.2
log
@GPL License changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/hideline.c,v 14.1 2004/11/16 19:42:17 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 24
a52 3
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d55 1
a55 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/hideline.c,v 1.5 2004/10/04 14:49:22 morrison Exp $ (ARL)";
@


1.5
log
@ws
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/hideline.c,v 1.4 2004/09/03 23:30:58 morrison Exp $ (ARL)";
d300 10
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/hideline.c,v 1.3 2004/08/02 23:01:51 morrison Exp $ (ARL)";
a38 2


d41 1
a41 1
#include <string.h>
d43 1
a43 1
#include <strings.h>
d53 1
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/hideline.c,v 1.2 2004/06/08 22:04:28 morrison Exp $ (ARL)";
d42 1
a42 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header$ (ARL)";
d37 1
a37 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/hideline.c,v 11.18 2004/05/10 15:30:48 erikg Exp $ (ARL)";
a50 1
#include "externs.h"
@

