head	14.11;
access;
symbols
	rel-7-10-4:14.10.2.1
	STABLE:14.10.0.2
	stable-branch:14.3
	rel-7-10-2:14.10
	rel-7-10-0:14.9
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.11
date	2007.09.15.16.23.16;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.07.26.01.13.58;	author brlcad;	state Exp;
branches
	14.10.2.1;
next	14.9;

14.9
date	2007.01.27.01.41.43;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.41;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.28.00.36.28;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.36;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.05;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.04.17.26;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.26;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.20;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.10.2.1
date	2007.09.28.14.04.33;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                          A R B S . C
 * BRL-CAD
 *
 * Copyright (c) 1986-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file arbs.c
 *
 *	f_3ptarb()	finds arb8 defined by 3 points, 2 coordinates of
 *			a 4th point, and a thickness
 *
 *	f_rfarb()	finds arb8 defined by rot & fallback angles, one point,
 *			2 coordinates of the 3 remaining points, and a thickness
 *
 *  Author -
 *	Keith A. Applin
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.10 2007/07/26 01:13:58 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdlib.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "./ged.h"
#include "./mged_dm.h"
#include "./cmd.h"

extern int	newargs;
extern char	**promp;

char *p_arb3pt[] = {
	"Enter X, Y, Z for point 1: ",
	"Enter Y, Z: ",
	"Enter Z: ",
	"Enter X, Y, Z for point 2: ",
	"Enter Y, Z: ",
	"Enter Z: ",
	"Enter X, Y, Z for point 3: ",
	"Enter Y, Z: ",
	"Enter Z: "
};

/*
 *
 *	F _ 3 P T A R B ( ) :	finds arb8 given.....
 *				1.  3 points of one face
 *				2.  2 coordinates of the 4th point in that face
 *				3.  thickness
 *
 */
int
f_3ptarb(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	int			i, solve;
	vect_t			vec1;
	vect_t			vec2;
	fastf_t			pt4[2], length, thick;
	vect_t			norm;
	fastf_t			ndotv;
	struct directory	*dp;
	struct rt_db_internal	internal;
	struct rt_arb_internal	*aip;

	CHECK_DBI_NULL;
	CHECK_READ_ONLY;

	if(argc < 1 || 27 < argc){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help 3ptarb");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	/* get the arb name */
	if( argc < 2 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR, "Enter name for this arb: ", (char *)NULL);
	  return TCL_ERROR;
	}

	if( db_lookup( dbip, argv[1], LOOKUP_QUIET) != DIR_NULL ) {
	  Tcl_AppendResult(interp, argv[1], ":  already exists\n", (char *)NULL);
	  return TCL_ERROR;
	}

	/* read the three points */
	promp = &p_arb3pt[0];
	if( argc < 11 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR, promp[argc-2], (char *)NULL);
	  return TCL_ERROR;
	}

	/* preliminary calculations to check input so far */
	for(i=0; i<3; i++) {
		vec1[i] = atof(argv[i+2]) - atof(argv[i+5]);
		vec2[i] = atof(argv[i+2]) - atof(argv[i+8]);
	}
	VCROSS(norm, vec1, vec2);
	length = MAGNITUDE( norm );
	if(length == 0.0) {
	  Tcl_AppendResult(interp, "points are colinear\n", (char *)NULL);
	  return TCL_ERROR;
	}
	VSCALE(norm, norm, 1.0/length);

	if( argc < 12 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR,
			   "Enter coordinate to solve for (x, y, or z): ", (char *)NULL);
	  return TCL_ERROR;
	}

	switch( argv[11][0] ) {

	case 'x':
		if(norm[0] == 0.0) {
		  Tcl_AppendResult(interp, "X not unique in this face\n", (char *)NULL);
		  return TCL_ERROR;
		}
		solve = X;

		if( argc < 13 ) {
		  Tcl_AppendResult(interp, MORE_ARGS_STR,
				   "Enter the Y, Z coordinate values: ", (char *)NULL);
		  return TCL_ERROR;
		}
		if( argc < 14 ) {
		  Tcl_AppendResult(interp, MORE_ARGS_STR,
				   "Enter the Z coordinate value: ", (char *)NULL);
		  return TCL_ERROR;
		}
		pt4[0] = atof( argv[12] ) * local2base;
		pt4[1] = atof( argv[13] ) * local2base;
		break;

	case 'y':
		if(norm[1] == 0.0) {
		  Tcl_AppendResult(interp, "Y not unique in this face\n", (char *)NULL);
		  return TCL_ERROR;
		}
		solve = Y;

		if ( argc < 13 ) {
		  Tcl_AppendResult(interp, MORE_ARGS_STR,
				   "Enter the X, Z coordinate values: ", (char *)NULL);
		  return TCL_ERROR;
		}
		if ( argc < 14 ) {
		  Tcl_AppendResult(interp, MORE_ARGS_STR,
				   "Enter the Z coordinate value: ", (char *)NULL);
		  return TCL_ERROR;
		}

		pt4[0] = atof( argv[12] ) * local2base;
		pt4[1] = atof( argv[13] ) * local2base;
		break;

	case 'z':
		if(norm[2] == 0.0) {
		  Tcl_AppendResult(interp, "Z not unique in this face\n", (char *)NULL);
		  return TCL_ERROR;
		}
		solve = Z;

		if ( argc < 13 ) {
		  Tcl_AppendResult(interp, MORE_ARGS_STR,
				   "Enter the X, Y coordinate values: ", (char *)NULL);
		  return TCL_ERROR;
		}
		if ( argc < 14 ) {
		  Tcl_AppendResult(interp, MORE_ARGS_STR,
				   "Enter the Y coordinate value: ", (char *)NULL);
		  return TCL_ERROR;
		}
		pt4[0] = atof( argv[12] ) * local2base;
		pt4[1] = atof( argv[13] ) * local2base;
		break;

	default:
	  Tcl_AppendResult(interp, "coordinate must be x, y, or z\n", (char *)NULL);
	  return TCL_ERROR;
	}


	if ( argc < 15 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR,
			   "Enter thickness for this arb: ", (char *)NULL);
	  return TCL_ERROR;
	}

	if( (thick = (atof( argv[14] ))) == 0.0 ) {
	  Tcl_AppendResult(interp, "thickness = 0.0\n", (char *)NULL);
	  return TCL_ERROR;
	}

	RT_INIT_DB_INTERNAL( &internal );
	internal.idb_major_type = DB5_MAJORTYPE_BRLCAD;
	internal.idb_type = ID_ARB8;
	internal.idb_meth = &rt_functab[ID_ARB8];
	internal.idb_ptr = (genptr_t)bu_malloc( sizeof(struct rt_arb_internal) , "rt_arb_internal" );
	aip = (struct rt_arb_internal *)internal.idb_ptr;
	aip->magic = RT_ARB_INTERNAL_MAGIC;

	for(i=0; i<8; i++) {
		VSET( aip->pt[i] , 0.0 , 0.0 , 0.0 );
	}

	for(i=0; i<3; i++) {
		/* the three given vertices */
		VSET( aip->pt[i] , atof( argv[i*3+2] )*local2base , atof( argv[i*3+3] )*local2base , atof( argv[i*3+4] )*local2base );
	}

	thick *= local2base;

	ndotv = VDOT( aip->pt[0], norm );

	switch( solve ) {

		case X:
			/* solve for x-coord of 4th point */
			aip->pt[3][Y] = pt4[0];		/* y-coord */
			aip->pt[3][Z] = pt4[1]; 	/* z-coord */
			aip->pt[3][X] =  ( ndotv
					- norm[Y] * aip->pt[3][Y]
					- norm[Z] * aip->pt[3][Z])
					/ norm[X];	/* x-coord */
		break;

		case Y:
			/* solve for y-coord of 4th point */
			aip->pt[3][X] = pt4[0];		/* x-coord */
			aip->pt[3][Z] = pt4[1]; 	/* z-coord */
			aip->pt[3][Y] =  ( ndotv
					- norm[X] * aip->pt[3][X]
					- norm[Z] * aip->pt[3][Z])
					/ norm[Y];	/* y-coord */
		break;

		case Z:
			/* solve for z-coord of 4th point */
			aip->pt[3][X] = pt4[0];		/* x-coord */
			aip->pt[3][Y] = pt4[1]; 	/* y-coord */
			aip->pt[3][Z] =  ( ndotv
					- norm[X] * aip->pt[3][X]
					- norm[Y] * aip->pt[3][Y])
					/ norm[Z];	/* z-coord */
		break;

		default:
		  Tcl_AppendResult(interp, "bad coordinate to solve for\n", (char *)NULL);
		  return TCL_ERROR;
	}

	/* calculate the remaining 4 vertices */
	for(i=0; i<4; i++) {
		VJOIN1( aip->pt[i+4] , aip->pt[i] , thick , norm );
	}

	if( (dp = db_diradd( dbip, argv[1], -1L, 0, DIR_SOLID, (genptr_t)&internal.idb_type)) == DIR_NULL )
	{
		Tcl_AppendResult(interp, "Cannot add ", argv[1], " to the directory\n", (char *)NULL );
		return TCL_ERROR;
	}

	if( rt_db_put_internal( dp, dbip, &internal, &rt_uniresource ) < 0 )
	{
		rt_db_free_internal( &internal, &rt_uniresource );
		TCL_WRITE_ERR_return;
	}

	{
	  char *av[3];

	  av[0] = "e";
	  av[1] = argv[1]; /* depends on solid name being in argv[1] */
	  av[2] = NULL;

	  /* draw the "made" solid */
	  return cmd_draw( clientData, interp, 2, av );
	}
}


char *p_rfin[] = {
	"Enter X, Y, Z of the known point: ",
	"Enter Y,Z: ",
	"Enter Z: "
};

/*	F _ R F A R B ( ) :	finds arb8 given.....
 *
 *		1. one point
 *		2. 2 coordinates of 3 other points
 *		3. rot and fallback angles
 *		4. thickness
 */
int
f_rfarb(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct directory	*dp;
	int			i;
	int			solve[3];
	fastf_t			pt[3][2];
	fastf_t			thick, rota, fba;
	vect_t			norm;
	fastf_t			ndotv;
	struct rt_db_internal	internal;
	struct rt_arb_internal	*aip;

	CHECK_DBI_NULL;
	CHECK_READ_ONLY;

	if(argc < 1 || 27 < argc){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help rfarb");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	/* get the arb name */
	if( argc < 2 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR, "Enter name for this arb: ", (char *)NULL);
	  return TCL_ERROR;
	}
	if( db_lookup( dbip, argv[1], LOOKUP_QUIET) != DIR_NULL ) {
	  Tcl_AppendResult(interp, argv[1], ":  already exists\n", (char *)NULL);
	  return TCL_ERROR;
	}


	/* read the known point */
	promp = &p_rfin[0];
	if( argc < 5 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR, promp[argc-2], (char *)NULL);
	  return TCL_ERROR;
	}

	if ( argc < 6 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR, "Enter ROTATION angle (deg): ", (char *)NULL);
	  return TCL_ERROR;
	}

	rota = atof( argv[5] ) * degtorad;

	if ( argc < 7 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR, "Enter FALL BACK angle (deg): ", (char *)NULL);
	  return TCL_ERROR;
	}

	fba = atof( argv[6] ) * degtorad;

	/* calculate plane defined by these angles */
	norm[0] = cos(fba) * cos(rota);
	norm[1] = cos(fba) * sin(rota);
	norm[2] = sin(fba);

	for(i=0; i<3; i++) {
	  if( argc < 8+3*i ) {
	    struct bu_vls tmp_vls;

	    bu_vls_init(&tmp_vls);
	    bu_vls_printf(&tmp_vls, "POINT %d...\n",i+2);
	    Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), MORE_ARGS_STR,
			     "Enter coordinate to solve for (x, y, or z): ", (char *)NULL);
	    return TCL_ERROR;
	  }

	  switch( argv[7+3*i][0] ) {
		case 'x':
			if(norm[0] == 0.0) {
			  Tcl_AppendResult(interp, "X not unique in this face\n", (char *)NULL);
			  return TCL_ERROR;
			}
			solve[i] = X;

			if( argc < 7+3*i+2 ) {
			  Tcl_AppendResult(interp, MORE_ARGS_STR,
					   "Enter the Y, Z coordinate values: ", (char *)NULL);
			  return TCL_ERROR;
			}
			if( argc < 7+3*i+3 ) {
			  Tcl_AppendResult(interp, MORE_ARGS_STR,
					   "Enter the Z coordinate value: ", (char *)NULL);
			  return TCL_ERROR;
			}
			pt[i][0] = atof( argv[7+3*i+1] ) * local2base;
			pt[i][1] = atof( argv[7+3*i+2] ) * local2base;
			break;

		case 'y':
			if(norm[1] == 0.0) {
			  Tcl_AppendResult(interp, "Y not unique in this face\n", (char *)NULL);
			  return TCL_ERROR;
			}
			solve[i] = Y;

			if( argc < 7+3*i+2 ) {
			  Tcl_AppendResult(interp, MORE_ARGS_STR,
					   "Enter the X, Z coordinate values: ", (char *)NULL);
			  return TCL_ERROR;
			}
			if( argc < 7+3*i+3 ) {
			  Tcl_AppendResult(interp, MORE_ARGS_STR,
					   "Enter the Z coordinate value: ", (char *)NULL);
			  return TCL_ERROR;
			}
			pt[i][0] = atof( argv[7+3*i+1] ) * local2base;
			pt[i][1] = atof( argv[7+3*i+2] ) * local2base;
			break;

		case 'z':
			if(norm[2] == 0.0) {
			  Tcl_AppendResult(interp, "Z not unique in this face\n", (char *)NULL);
			  return TCL_ERROR;
			}
			solve[i] = Z;

			if( argc < 7+3*i+2 ) {
			  Tcl_AppendResult(interp, MORE_ARGS_STR,
					   "Enter the X, Y coordinate values: ", (char *)NULL);
			  return TCL_ERROR;
			}
			if( argc < 7+3*i+3 ) {
			  Tcl_AppendResult(interp, MORE_ARGS_STR,
					   "Enter the Y coordinate value: ", (char *)NULL);
			  return TCL_ERROR;
			}
			pt[i][0] = atof( argv[7+3*i+1] ) * local2base;
			pt[i][1] = atof( argv[7+3*i+2] ) * local2base;
			break;

		default:
		  Tcl_AppendResult(interp, "coordinate must be x, y, or z\n", (char *)NULL);
		  return TCL_ERROR;
		}
	}

	if( argc < 8+3*3 ) {
	  Tcl_AppendResult(interp, MORE_ARGS_STR,
			   "Enter thickness for this arb: ", (char *)NULL);
	  return TCL_ERROR;
	}
	if( (thick = (atof( argv[7+3*3] ))) == 0.0 ) {
	  Tcl_AppendResult(interp, "thickness = 0.0\n", (char *)NULL);
	  return TCL_ERROR;
	}
	thick *= local2base;

	RT_INIT_DB_INTERNAL( &internal );
	internal.idb_major_type = DB5_MAJORTYPE_BRLCAD;
	internal.idb_type = ID_ARB8;
	internal.idb_meth = &rt_functab[ID_ARB8];
	internal.idb_ptr = (genptr_t)bu_malloc( sizeof(struct rt_arb_internal) , "rt_arb_internal" );
	aip = (struct rt_arb_internal *)internal.idb_ptr;
	aip->magic = RT_ARB_INTERNAL_MAGIC;

	for(i=0; i<8; i++) {
		VSET( aip->pt[i] , 0.0 , 0.0 , 0.0 );
	}

	VSET( aip->pt[0] , atof(argv[2])*local2base , atof(argv[3])*local2base , atof(argv[4])*local2base );

	ndotv = VDOT( aip->pt[0], norm );

	/* calculate the unknown coordinate for points 2,3,4 */
	for(i=0; i<3; i++) {
		int j;
		j = i+1;

		switch( solve[i] ) {
			case X:
				aip->pt[j][Y] = pt[i][0];
				aip->pt[j][Z] = pt[i][1];
				aip->pt[j][X] = ( ndotv
					- norm[1] * aip->pt[j][Y]
					- norm[2] * aip->pt[j][Z])
					/ norm[0];
			break;
			case Y:
				aip->pt[j][X] = pt[i][0];
				aip->pt[j][Z] = pt[i][1];
				aip->pt[j][Y] = ( ndotv
					- norm[0] * aip->pt[j][X]
					- norm[2] * aip->pt[j][Z])
					/ norm[1];
			break;
			case Z:
				aip->pt[j][X] = pt[i][0];
				aip->pt[j][Y] = pt[i][1];
				aip->pt[j][Z] = ( ndotv
					- norm[0] * aip->pt[j][X]
					- norm[1] * aip->pt[j][Y])
					/ norm[2];
			break;

			default:
			  return TCL_ERROR;
		}
	}

	/* calculate the remaining 4 vertices */
	for(i=0; i<4; i++) {
		VJOIN1( aip->pt[i+4] , aip->pt[i] , thick , norm );
	}

	/* no interuprts */
	(void)signal( SIGINT, SIG_IGN );

	if( (dp = db_diradd( dbip, argv[1], -1L, 0, DIR_SOLID, (genptr_t)&internal.idb_type)) == DIR_NULL )
	{
		Tcl_AppendResult(interp, "Cannot add ", argv[1], " to the directory\n", (char *)NULL );
		return TCL_ERROR;
	}

	if( rt_db_put_internal( dp, dbip, &internal, &rt_uniresource ) < 0 )
	{
		rt_db_free_internal( &internal, &rt_uniresource );
		TCL_WRITE_ERR_return;
	}

	{
	  char *av[3];

	  av[0] = "e";
	  av[1] = argv[1]; /* depends on solid name being in argv[1] */
	  av[2] = NULL;

	  /* draw the "made" solid */
	  return cmd_draw( clientData, interp, 2, av );
	}
}

/* ------------------------------ new way ------------------------------ */
/*  rt_arb_get_cgtype(), rt_arb_std_type(), and rt_arb_centroid()
 *  moved to librt/g_arb.c
 */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.9 2007/01/27 01:41:43 brlcad Exp $ (BRL)";
d40 2
a41 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
a42 1
#include <math.h>
@


14.10.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.11 2007/09/15 16:23:16 brlcad Exp $ (BRL)";
d40 6
a45 1
#include <string.h>
a46 1

@


14.9
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a29 5
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.8 2007/01/23 01:13:41 brlcad Exp $ (BRL)";
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.7 2007/01/20 14:36:57 brlcad Exp $ (BRL)";
d100 1
a100 1
        if(argc < 1 || 27 < argc){
a317 1

@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.6 2006/01/28 00:36:28 brlcad Exp $ (BRL)";
@


14.6
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2006 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.5 2006/01/18 06:46:19 brlcad Exp $ (BRL)";
@


14.5
log
@update copyright to 2006
@
text
@d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.4 2005/10/23 04:44:36 brlcad Exp $ (BRL)";
d43 1
a43 2


d47 1
a47 1
#include <string.h>
d49 1
a49 1
#include <strings.h>
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1986-2005 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.3 2005/01/30 20:31:05 brlcad Exp $ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d31 1
a31 1
 *  
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/arbs.c,v 14.2 2004/12/21 04:17:26 butler Exp $ (BRL)";
d158 1
a158 1
		if( argc < 13 ) {			
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d31 1
a31 1
 *
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d158 1
a158 1
		if( argc < 13 ) {
@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 1986-2004 United States Government as represented by
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/arbs.c,v 14.1 2004/11/16 19:42:17 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			A R B S . C
a35 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
d38 1
a38 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/arbs.c,v 1.4 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/arbs.c,v 1.3 2004/08/02 23:01:51 morrison Exp $ (BRL)";
d561 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/arbs.c,v 1.2 2004/06/08 22:04:26 morrison Exp $ (BRL)";
d32 1
a32 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/arbs.c,v 11.36 2004/05/10 15:30:48 erikg Exp $ (BRL)";
a41 1
#include "externs.h"
@

