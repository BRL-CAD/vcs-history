head	14.14;
access;
symbols
	rel-7-10-4:14.13.2.1
	STABLE:14.13.0.2
	stable-branch:14.3
	rel-7-10-2:14.13
	rel-7-10-0:14.13
	rel-7-8-4:14.10
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.14
date	2007.09.15.16.23.17;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.27.01.41.43;	author brlcad;	state Exp;
branches
	14.13.2.1;
next	14.12;

14.12
date	2007.01.23.01.13.42;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.08.13.23.28.45;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.06.22.14.52.06;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.04.06.20.50.03;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches
	14.7.2.1;
next	14.6;

14.6
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.09.16.18.51.53;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.05.28.02.14.52;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2005.01.30.20.31.06;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.28;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.24;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.7.2.1
date	2006.04.07.19.30.28;	author jlowenz;	state Exp;
branches;
next	;

14.13.2.1
date	2007.09.28.14.04.34;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                       H I S T O R Y . C
 * BRL-CAD
 *
 * Copyright (c) 1995-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file history.c
 *
 *  Authors -
 *	Glenn Durfee
 *	Bob Parker
 *
 *  Functions -
 *      history_record -
 *
 *  Source -
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <time.h>

#ifdef HAVE_SYS_TIME_H
#  include <sys/time.h>
#endif

#include "tcl.h"

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "./ged.h"
#include "./mgedtcl.h"

struct mged_hist mged_hist_head;

FILE *journalfp;
int firstjournal;
int journal_delay = 0;

void history_journalize(struct mged_hist *hptr);

/*
 *	H I S T O R Y _ R E C O R D
 *
 *	Stores the given command with start and finish times in the
 *	  history vls'es.
 */

void
history_record(
	struct bu_vls *cmdp,
	struct timeval *start,
	struct timeval *finish,
	int status)			   /* Either CMD_OK or CMD_BAD */
{
    struct mged_hist *new_hist;

    if (strcmp(bu_vls_addr(cmdp), "\n") == 0)
	return;

    new_hist = (struct mged_hist *)bu_malloc(sizeof(struct mged_hist),
					     "mged history");
    bu_vls_init(&(new_hist->mh_command));
    bu_vls_vlscat(&(new_hist->mh_command), cmdp);
    new_hist->mh_start = *start;
    new_hist->mh_finish = *finish;
    new_hist->mh_status = status;
    BU_LIST_INSERT(&(mged_hist_head.l), &(new_hist->l));

    /* As long as this isn't our first command to record after setting
       up the journal (which would be "journal", which we don't want
       recorded!)... */

    if (journalfp != NULL && !firstjournal)
	history_journalize(new_hist);

    curr_cmd_list->cl_cur_hist = &mged_hist_head;
    firstjournal = 0;
}

HIDDEN int
timediff(struct timeval *tvdiff, struct timeval *start, struct timeval *finish)
{
    if (finish->tv_sec == 0 && finish->tv_usec == 0)
	return -1;
    if (start->tv_sec == 0 && start->tv_usec == 0)
	return -1;

    tvdiff->tv_sec = finish->tv_sec - start->tv_sec;
    tvdiff->tv_usec = finish->tv_usec - start->tv_usec;
    if (tvdiff->tv_usec < 0) {
	--tvdiff->tv_sec;
	tvdiff->tv_usec += 1000000L;
    }

    return 0;
}

void
history_journalize(struct mged_hist *hptr)
{
    struct timeval tvdiff;
    struct mged_hist *lasthptr;

    lasthptr = BU_LIST_PREV(mged_hist, &(hptr->l));

    if (journal_delay && timediff(&tvdiff, &(lasthptr->mh_finish), &(hptr->mh_start)) >= 0)
	fprintf(journalfp, "delay %ld %ld\n", (long)tvdiff.tv_sec, (long)tvdiff.tv_usec);

    if (hptr->mh_status == CMD_BAD)
	fprintf(journalfp, "# ");
    fprintf(journalfp, "%s", bu_vls_addr(&hptr->mh_command));

    if (journal_delay)
      fprintf(journalfp, "mged_update 1\n");
}

/*
 *	F _ J O U R N A L
 *
 *	Opens the journal file, so each command and the time since the previous
 *	  one will be recorded.  Or, if called with no arguments, closes the
 *	  journal file.
 */

int
f_journal(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
  if(argc < 1 || 3 < argc){
    struct bu_vls vls;

    bu_vls_init(&vls);
    bu_vls_printf(&vls, "help journal");
    Tcl_Eval(interp, bu_vls_addr(&vls));
    bu_vls_free(&vls);
    return TCL_ERROR;
  }

  /* close previously open journal file */
  if (journalfp != NULL) {
    fclose(journalfp);
    journalfp = NULL;
  }
  journal_delay = 0;

  if (argc < 2)
    return TCL_OK;

  if(argv[1][0] == '-' && argv[1][1] == 'd'){
    journal_delay = 1;
    ++argv;
    --argc;
  }

  if (argc < 2) {
    struct bu_vls vls;

    bu_vls_init(&vls);
    bu_vls_printf(&vls, "help journal");
    Tcl_Eval(interp, bu_vls_addr(&vls));
    bu_vls_free(&vls);
    return TCL_ERROR;
  }

  journalfp = fopen(argv[1], "a+");
  if (journalfp == NULL) {
    Tcl_AppendResult(interp, "Error opening ", argv[1],
		     " for appending\n", (char *)NULL);
    return TCL_ERROR;
  }
  firstjournal = 1;

  return TCL_OK;
}

/*
 *	F _ D E L A Y
 *
 * 	Uses select to delay for the specified amount of seconds and
 *	  microseconds.
 */

int
f_delay(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
    struct timeval tv;

    if(argc < 3 || 3 < argc){
      struct bu_vls vls;

      bu_vls_init(&vls);
      bu_vls_printf(&vls, "help delay");
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);
      return TCL_ERROR;
    }

    tv.tv_sec = atoi(argv[1]);
    tv.tv_usec = atoi(argv[2]);
    select(0, NULL, NULL, NULL, &tv);

    return TCL_OK;
}

/*
 *	F _ H I S T O R Y
 *
 *	Prints out the command history, either to bu_log or to a file.
 */

int
f_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
    FILE *fp;
    int with_delays = 0;
    struct mged_hist *hp, *hp_prev;
    struct bu_vls str;
    struct timeval tvdiff;

    if(argc < 1 || 4 < argc){
      struct bu_vls vls;

      bu_vls_init(&vls);
      bu_vls_printf(&vls, "help history");
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);
      return TCL_ERROR;
    }

    fp = NULL;
    while( argc >= 2 ) {
	if( strcmp(argv[1], "-delays") == 0 )
	    with_delays = 1;
	else if( strcmp(argv[1], "-outfile") == 0 ) {
	    if( fp != NULL ) {
	      Tcl_AppendResult(interp, "history: -outfile option given more than once\n",
			       (char *)NULL);
	      return TCL_ERROR;
	    } else if( argc < 3 || strcmp(argv[2], "-delays") == 0 ) {
	      Tcl_AppendResult(interp, "history: I need a file name\n", (char *)NULL);
	      return TCL_ERROR;
	    } else {
		fp = fopen( argv[2], "a+" );
		if( fp == NULL ) {
		  Tcl_AppendResult(interp, "history: error opening file", (char *)NULL);
		  return TCL_ERROR;
		}
		--argc;
		++argv;
	    }
	} else {
	  Tcl_AppendResult(interp, "Invalid option ", argv[1], "\n", (char *)NULL);
	}
	--argc;
	++argv;
    }

    bu_vls_init(&str);
    for (BU_LIST_FOR(hp, mged_hist, &(mged_hist_head.l))) {
	bu_vls_trunc(&str, 0);
	hp_prev = BU_LIST_PREV(mged_hist, &(hp->l));
	if (with_delays && BU_LIST_NOT_HEAD(hp_prev, &(mged_hist_head.l))) {
	    if (timediff(&tvdiff, &(hp_prev->mh_finish), &(hp->mh_start)) >= 0)
		bu_vls_printf(&str, "delay %ld %ld\n", (long)tvdiff.tv_sec,
			      (long)tvdiff.tv_usec);
	}

	if (hp->mh_status == CMD_BAD)
	    bu_vls_printf(&str, "# ");
	bu_vls_vlscat(&str, &(hp->mh_command));

	if (fp != NULL)
	    bu_vls_fwrite(fp, &str);
	else
	  Tcl_AppendResult(interp, bu_vls_addr(&str), (char *)NULL);
    }

    if (fp != NULL)
	fclose(fp);

    return TCL_OK;
}

/*      H I S T O R Y _ P R E V
 */
struct bu_vls *
history_prev(const char *pat)
{
    struct mged_hist *hp;

    hp = curr_cmd_list->cl_cur_hist;
    do {
	hp = BU_LIST_PREV(mged_hist, &(hp->l));
    } while (   !BU_LIST_IS_HEAD(hp, &(mged_hist_head.l))
	     && pat
	     && !strstr(bu_vls_addr(&(hp->mh_command)), pat));

    if (BU_LIST_IS_HEAD(hp, &(mged_hist_head.l)))
	return NULL;
    else {
	curr_cmd_list->cl_cur_hist = hp;
	return &(hp->mh_command);
    }
}

/*      H I S T O R Y _ C U R
 */
struct bu_vls *
history_cur(void)
{
    if (BU_LIST_IS_HEAD(curr_cmd_list->cl_cur_hist, &(mged_hist_head.l)))
	return NULL;
    else
	return &(curr_cmd_list->cl_cur_hist->mh_command);
}

/*      H I S T O R Y _ N E X T
 */
struct bu_vls *
history_next(const char *pat)
{
    struct mged_hist *hp;

    if (BU_LIST_IS_HEAD(curr_cmd_list->cl_cur_hist, &(mged_hist_head.l))) {
	return NULL;
    }

    hp = curr_cmd_list->cl_cur_hist;
    do {
	hp = BU_LIST_NEXT(mged_hist, &(hp->l));
    } while (   !BU_LIST_IS_HEAD(hp, &(mged_hist_head.l))
	     && pat
	     && !strstr(bu_vls_addr(&(hp->mh_command)), pat));

    if (BU_LIST_IS_HEAD(hp, &(mged_hist_head.l))) {
	curr_cmd_list->cl_cur_hist = hp;
	return NULL;
    } else {
	curr_cmd_list->cl_cur_hist = hp;
	return &(hp->mh_command);
    }
}

int
cmd_hist(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
  struct bu_vls *vp;
  struct bu_vls vls;

  bu_vls_init(&vls);

  if(argc < 2){
    bu_vls_printf(&vls, "helpdevel hist");
    Tcl_Eval(interp, bu_vls_addr(&vls));
    bu_vls_free(&vls);
    return TCL_ERROR;
  }

  if(strcmp(argv[1], "add") == 0){
    struct timeval zero;

    if(argc != 3){
      bu_vls_printf(&vls, "helpdevel hist");
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);
      return TCL_ERROR;
    }

    if (argv[2][0] == '\n' || argv[2][0] == '\0')
	return TCL_OK;

    bu_vls_strcpy(&vls, argv[2]);
    if (argv[2][strlen(argv[2])-1] != '\n')
	bu_vls_putc(&vls, '\n');

    zero.tv_sec = zero.tv_usec = 0L;
    history_record(&vls, &zero, &zero, CMD_OK);

    bu_vls_free(&vls);
    return TCL_OK;
  }

  if(strcmp(argv[1], "next") == 0){
    if(argc == 2){
      vp = history_next((const char *)NULL);
      if (vp == NULL)
	return TCL_ERROR;
    } else if(argc == 3){
      vp = history_next(argv[2]);
      if (vp == NULL)
	return TCL_ERROR;
    } else {
      bu_vls_printf(&vls, "helpdevel hist");
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);
      return TCL_ERROR;
    }

    Tcl_AppendResult(interp, bu_vls_addr(vp), (char *)NULL);
    bu_vls_free(&vls);
    return TCL_OK;
  }

  if(strcmp(argv[1], "prev") == 0){
    if(argc == 2){
      vp = history_prev((const char *)NULL);
      if (vp == NULL)
	return TCL_ERROR;
    } else if(argc == 3){
      vp = history_prev(argv[2]);
    if (vp == NULL)
      return TCL_ERROR;
    } else {
      bu_vls_printf(&vls, "helpdevel hist");
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);
      return TCL_ERROR;
    }


    Tcl_AppendResult(interp, bu_vls_addr(vp), (char *)NULL);
    bu_vls_free(&vls);
    return TCL_OK;
  }

  if(strcmp(argv[1], "cur") == 0){
    if(argc != 2){
      bu_vls_printf(&vls, "helpdevel hist");
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);
      return TCL_ERROR;
    } else {
      vp = history_cur();
    if (vp == NULL)
      return TCL_ERROR;
    }

    Tcl_AppendResult(interp, bu_vls_addr(vp), (char *)NULL);
    bu_vls_free(&vls);
    return TCL_OK;
  }

  bu_vls_printf(&vls, "helpdevel hist");
  Tcl_Eval(interp, bu_vls_addr(&vls));
  bu_vls_free(&vls);
  return TCL_ERROR;
}

void
history_setup(void)
{
    BU_LIST_INIT(&(mged_hist_head.l));
    curr_cmd_list->cl_cur_hist = &mged_hist_head;
    bu_vls_init(&(mged_hist_head.mh_command));
    mged_hist_head.mh_start.tv_sec = mged_hist_head.mh_start.tv_usec =
	mged_hist_head.mh_finish.tv_sec = mged_hist_head.mh_finish.tv_usec = 0L;
    mged_hist_head.mh_status = CMD_OK;
    journalfp = NULL;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d39 3
a41 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
a44 1
#include <time.h>
@


14.13.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d39 5
a43 3
#include <string.h>
#include <time.h>

d47 1
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d411 1
a411 1
        return TCL_ERROR;
@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.10
log
@make the command history pattern arg const
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2006 United States Government as represented by
@


14.9
log
@bigger, better vi command line editing in mged provided by james (swcto).  this adds command history searching as well as pretty much full vi-mode command editing.  (sf patch 1377410 - Bigger, Better vi command line editing)
@
text
@d312 1
a312 1
history_prev(char *pat)
d345 1
a345 1
history_next(char *pat)
d410 1
a410 1
      vp = history_next((char *)NULL);
d431 1
a431 1
      vp = history_prev((char *)NULL);
@


14.8
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@a58 8
#if 0
struct mged_hist {
    struct bu_list l;
    struct bu_vls command;
    struct timeval start, finish;
    int status;
} mged_hist_head, *cur_hist;
#else
a59 1
#endif
d312 1
a312 1
history_prev(void)
d316 7
a322 1
    hp = BU_LIST_PREV(mged_hist, &(curr_cmd_list->cl_cur_hist->l));
d345 1
a345 1
history_next(void)
d350 1
a350 1
	return 0;
d353 7
a359 1
    hp = BU_LIST_NEXT(mged_hist, &(curr_cmd_list->cl_cur_hist->l));
d362 1
a362 1
	return 0;
d409 9
a417 1
    if(argc != 2){
d424 12
a435 1
    vp = history_next();
d438 7
d451 1
a451 1
  if(strcmp(argv[1], "prev") == 0){
d457 2
a458 3
    }

    vp = history_prev();
d461 1
@


14.7
log
@update copyright to 2006
@
text
@d37 1
d298 2
a299 2
		bu_vls_printf(&str, "delay %d %d\n", tvdiff.tv_sec,
			      tvdiff.tv_usec);
@


14.7.2.1
log
@update from HEAD
@
text
@a36 1
#include <stdlib.h>
d297 2
a298 2
		bu_vls_printf(&str, "delay %ld %ld\n", (long)tvdiff.tv_sec,
			      (long)tvdiff.tv_usec);
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1995-2005 United States Government as represented by
@


14.5
log
@rework tkwin into cmd.c and profide the DM_X and DM_OGL defines to the build.  probably fixes a bug or two of some sort on the display manager.  also migrate the tolerance vars together along with other ws and header cleanup
@
text
@d28 1
a28 1
 *      history_record - 
d121 1
a121 1
    
d212 1
a212 1
 * 	Uses select to delay for the specified amount of seconds and 
d354 1
a354 1
    
@


14.4
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@a36 2


@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d28 1
a28 1
 *      history_record -
d37 2
d123 1
a123 1

d214 1
a214 1
 * 	Uses select to delay for the specified amount of seconds and
d356 1
a356 1

@


14.3
log
@update copyright to 2005
@
text
@d42 1
a42 1
#include <string.h>
d44 1
a44 1
#include <strings.h>
d46 2
a47 2
#ifndef WIN32
#include <sys/time.h>
@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2004 United States Government as represented by
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *                           H I S T O R Y . C
a32 9
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1995-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d447 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d31 1
a31 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d25 1
a25 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a48 1
#include "externs.h"
@

