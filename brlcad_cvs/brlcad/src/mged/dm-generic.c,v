head	14.13;
access;
symbols
	rel-7-10-4:14.12.2.1
	STABLE:14.12.0.2
	stable-branch:14.3
	rel-7-10-2:14.12
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.13
date	2007.09.15.16.23.16;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.04.23.13.30.20;	author joevalleyfield;	state Exp;
branches
	14.12.2.1;
next	14.11;

14.11
date	2007.01.27.01.41.43;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.41;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.08.08.02.54.44;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.08.07.21.50.17;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.04.06.20.50.03;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches
	14.5.2.1;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.05;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.27;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.22;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.5.2.1
date	2006.04.07.19.30.28;	author jlowenz;	state Exp;
branches;
next	;

14.12.2.1
date	2007.09.28.14.04.33;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                    D M - G E N E R I C . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dm-generic.c
 *
 * Routines common to MGED's interface to LIBDM.
 *
 * Author -
 *	Robert G. Parker
 *
 * Source -
 *	SLAD CAD Team
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <ctype.h>
#include <string.h>

#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif

#include "tcl.h"
#include "tk.h"
#include "dm_xvars.h"

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"

#include "./ged.h"
#include "./sedit.h"
#include "./mged_dm.h"


extern point_t e_axes_pos;
extern point_t curr_e_axes_pos;
extern int scroll_select();		/* defined in scroll.c */
extern int menu_select();		/* defined in menu.c */
extern void rect_view2image();		/* defined in rect.c */
extern void rb_set_dirty_flag();

int doMotion = 0;

struct bu_structparse dm_xvars_vparse[] = {
	{"%x",	1,	"dpy",			XVARS_MV_O(dpy),	BU_STRUCTPARSE_FUNC_NULL },
	{"%x",	1,	"win",			XVARS_MV_O(win),	BU_STRUCTPARSE_FUNC_NULL },
	{"%x",	1,	"top",			XVARS_MV_O(top),	BU_STRUCTPARSE_FUNC_NULL },
	{"%x",	1,	"tkwin",		XVARS_MV_O(xtkwin),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",	1,	"depth",		XVARS_MV_O(depth),	BU_STRUCTPARSE_FUNC_NULL },
	{"%x",	1,	"cmap",			XVARS_MV_O(cmap),	BU_STRUCTPARSE_FUNC_NULL },
#if defined(DM_X) || defined (DM_OGL) || defined (DM_WGL)
	{"%x",	1,	"vip",			XVARS_MV_O(vip),	BU_STRUCTPARSE_FUNC_NULL },
	{"%x",	1,	"fontstruct",		XVARS_MV_O(fontstruct),	BU_STRUCTPARSE_FUNC_NULL },
#endif
	{"%d",	1,	"devmotionnotify",	XVARS_MV_O(devmotionnotify),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",	1,	"devbuttonpress",	XVARS_MV_O(devbuttonpress),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",	1,	"devbuttonrelease",	XVARS_MV_O(devbuttonrelease),	BU_STRUCTPARSE_FUNC_NULL },
	{"",	0,	(char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};


/*
 *  Based upon new state, possibly do extra stuff,
 *  including enabling continuous tablet tracking,
 *  object highlighting.
 *
 *  This routine was taken and modified from the original dm-X.c
 *  that was written by Phil Dykstra.
 */
void
stateChange(int a, int b)
{
  switch( b )  {
  case ST_VIEW:
    /* constant tracking OFF */
    doMotion = 0;
    break;
  case ST_S_PICK:
  case ST_O_PICK:
  case ST_O_PATH:
  case ST_S_VPICK:
    /* constant tracking ON */
    doMotion = 1;
    break;
  case ST_O_EDIT:
  case ST_S_EDIT:
    /* constant tracking OFF */
    doMotion = 0;
    break;
  default:
    bu_log("statechange: unknown state %s\n", state_str[b]);
    break;
  }

  ++update_views;
}

int
common_dm(int argc, char **argv)
{
  int status;
  struct bu_vls vls;

  if (dbip == DBI_NULL)
	  return TCL_OK;

  if(!strcmp(argv[0], "idle")){
    am_mode = AMM_IDLE;
    scroll_active = 0;
    if(rubber_band->rb_active){
      rubber_band->rb_active = 0;

      if(mged_variables->mv_mouse_behavior == 'p')
	rb_set_dirty_flag();
      else if(mged_variables->mv_mouse_behavior == 'r')
	rt_rect_area();
      else if(mged_variables->mv_mouse_behavior == 'z')
	zoom_rect_area();
    }

    return TCL_OK;
  }

  if(!strcmp(argv[0], "m")){
    int x;
    int y;
    int old_orig_gui;
    int stolen = 0;
    fastf_t fx, fy;

    if(argc < 3){
      Tcl_AppendResult(interp, "dm m: need more parameters\n",
		       "dm m xpos ypos\n", (char *)NULL);
      return TCL_ERROR;
    }

    old_orig_gui = mged_variables->mv_orig_gui;

    fx = dm_Xx2Normal(dmp, atoi(argv[1]));
    fy = dm_Xy2Normal(dmp, atoi(argv[2]), 0);
    x = fx * GED_MAX;
    y = fy * GED_MAX;

    if(mged_variables->mv_faceplate &&
       mged_variables->mv_orig_gui){
#define        MENUXLIM        (-1250)

      if(x >= MENUXLIM && scroll_select(x, y, 0)){
	stolen = 1;
	goto end;
      }

      if(x < MENUXLIM && mmenu_select(y, 0)){
	stolen = 1;
	goto end;
      }
    }

    mged_variables->mv_orig_gui = 0;
    fy = dm_Xy2Normal(dmp, atoi(argv[2]), 1);
    y = fy * GED_MAX;

end:
    bu_vls_init(&vls);
    if(mged_variables->mv_mouse_behavior == 'q' && !stolen){
      point_t view_pt;
      point_t model_pt;

      if(grid_state->gr_snap)
	snap_to_grid(&fx, &fy);

      if( mged_variables->mv_perspective_mode )
	    VSET(view_pt, fx, fy, 0.0)
      else
	    VSET(view_pt, fx, fy, 1.0)

      MAT4X3PNT(model_pt, view_state->vs_vop->vo_view2model, view_pt);
      VSCALE(model_pt, model_pt, base2local);
      if(dmp->dm_zclip)
	bu_vls_printf(&vls, "qray_nirt %lf %lf %lf",
		      model_pt[X], model_pt[Y], model_pt[Z]);
      else
	bu_vls_printf(&vls, "qray_nirt -b %lf %lf %lf",
		      model_pt[X], model_pt[Y], model_pt[Z]);
    }else if((mged_variables->mv_mouse_behavior == 'p' ||
	      mged_variables->mv_mouse_behavior == 'r' ||
	      mged_variables->mv_mouse_behavior == 'z') && !stolen){

      if(grid_state->gr_snap)
	snap_to_grid(&fx, &fy);

      rubber_band->rb_active = 1;
      rubber_band->rb_x = fx;
      rubber_band->rb_y = fy;
      rubber_band->rb_width = 0.0;
      rubber_band->rb_height = 0.0;
      rect_view2image();
      rb_set_dirty_flag();
    }else if(mged_variables->mv_mouse_behavior == 's' && !stolen){
#if 0
      if(grid_state->gr_snap){
	snap_to_grid(&fx, &fy);
	x = fx * GED_MAX;
	y = fy * GED_MAX;
      }
#endif
      bu_vls_printf(&vls, "mouse_solid_edit_select %d %d", x, y);
    }else if(mged_variables->mv_mouse_behavior == 'm' && !stolen){
#if 0
      if(grid_state->gr_snap){
	snap_to_grid(&fx, &fy);
	x = fx * GED_MAX;
	y = fy * GED_MAX;
      }
#endif
      bu_vls_printf(&vls, "mouse_matrix_edit_select %d %d", x, y);
    }else if(mged_variables->mv_mouse_behavior == 'c' && !stolen){
#if 0
      if(grid_state->gr_snap){
	snap_to_grid(&fx, &fy);
	x = fx * GED_MAX;
	y = fy * GED_MAX;
      }
#endif
      bu_vls_printf(&vls, "mouse_comb_edit_select %d %d", x, y);
    } else if(mged_variables->mv_mouse_behavior == 'o' && !stolen){
#if 0
      if(grid_state->gr_snap){
	snap_to_grid(&fx, &fy);
	x = fx * GED_MAX;
	y = fy * GED_MAX;
      }
#endif
      bu_vls_printf(&vls, "mouse_rt_obj_select %d %d", x, y);
    }else if(adc_state->adc_draw && mged_variables->mv_transform == 'a' && !stolen) {
      point_t model_pt;
      point_t view_pt;

      if(grid_state->gr_snap)
	snap_to_grid(&fx, &fy);

      VSET(view_pt, fx, fy, 1.0);
      MAT4X3PNT(model_pt, view_state->vs_vop->vo_view2model, view_pt);
      VSCALE(model_pt, model_pt, base2local);
      bu_vls_printf(&vls, "adc xyz %lf %lf %lf\n", model_pt[X], model_pt[Y], model_pt[Z]);
    } else if (grid_state->gr_snap && !stolen &&
	       SEDIT_TRAN && mged_variables->mv_transform == 'e') {
	    point_t view_pt;
	    point_t model_pt;

	    snap_to_grid(&fx, &fy);
	    MAT4X3PNT(view_pt, view_state->vs_vop->vo_model2view, curr_e_axes_pos);
	    view_pt[X] = fx;
	    view_pt[Y] = fy;
	    MAT4X3PNT(model_pt, view_state->vs_vop->vo_view2model, view_pt);
	    VSCALE(model_pt, model_pt, base2local);
	    bu_vls_printf(&vls, "p %lf %lf %lf", model_pt[X], model_pt[Y], model_pt[Z]);
    } else if (grid_state->gr_snap && !stolen &&
	       OEDIT_TRAN && mged_variables->mv_transform == 'e') {
	    point_t view_pt;
	    point_t model_pt;

	    snap_to_grid(&fx, &fy);
	    MAT4X3PNT(view_pt, view_state->vs_vop->vo_model2view, curr_e_axes_pos);
	    view_pt[X] = fx;
	    view_pt[Y] = fy;
	    MAT4X3PNT(model_pt, view_state->vs_vop->vo_view2model, view_pt);
	    VSCALE(model_pt, model_pt, base2local);
	    bu_vls_printf(&vls, "translate %lf %lf %lf", model_pt[X], model_pt[Y], model_pt[Z]);
    } else if (grid_state->gr_snap && !stolen &&
	       state != ST_S_PICK && state != ST_O_PICK &&
	       state != ST_O_PATH && !SEDIT_PICK && !EDIT_SCALE) {
	    point_t view_pt;
	    point_t model_pt;
	    point_t vcenter;

	    snap_to_grid(&fx, &fy);
	    MAT_DELTAS_GET_NEG(vcenter, view_state->vs_vop->vo_center);
	    MAT4X3PNT(view_pt, view_state->vs_vop->vo_model2view, vcenter);
	    view_pt[X] = fx;
	    view_pt[Y] = fy;
	    MAT4X3PNT(model_pt, view_state->vs_vop->vo_view2model, view_pt);
	    VSCALE(model_pt, model_pt, base2local);
	    bu_vls_printf(&vls, "center %lf %lf %lf", model_pt[X], model_pt[Y], model_pt[Z]);
    } else
	    bu_vls_printf(&vls, "M 1 %d %d\n", x, y);

    status = Tcl_Eval(interp, bu_vls_addr(&vls));
    mged_variables->mv_orig_gui = old_orig_gui;
    bu_vls_free(&vls);

    return status;
  }

  if(!strcmp(argv[0], "am")){
    if(argc < 4){
      Tcl_AppendResult(interp, "dm am: need more parameters\n",
		       "dm am <r|t|s> xpos ypos\n", (char *)NULL);
      return TCL_ERROR;
    }

    dml_omx = atoi(argv[2]);
    dml_omy = atoi(argv[3]);

    switch(*argv[1]){
    case 'r':
      am_mode = AMM_ROT;
      break;
    case 't':
      am_mode = AMM_TRAN;

      if(grid_state->gr_snap){
	int save_edflag;

	if((state == ST_S_EDIT || state == ST_O_EDIT) &&
	   mged_variables->mv_transform == 'e'){
	  if(state == ST_S_EDIT){
	    save_edflag = es_edflag;
	    if(!SEDIT_TRAN)
	      es_edflag = STRANS;
	  }else{
	    save_edflag = edobj;
	    edobj = BE_O_XY;
	  }

	  snap_keypoint_to_grid();

	  if(state == ST_S_EDIT)
	    es_edflag = save_edflag;
	  else
	    edobj = save_edflag;
	}else
	  snap_view_center_to_grid();
      }

      break;
    case 's':
      if(state == ST_S_EDIT && mged_variables->mv_transform == 'e' &&
	 NEAR_ZERO(acc_sc_sol, (fastf_t)SMALL_FASTF))
	acc_sc_sol = 1.0;
      else if(state == ST_O_EDIT && mged_variables->mv_transform == 'e'){
	edit_absolute_scale = acc_sc_obj - 1.0;
	if(edit_absolute_scale > 0.0)
	  edit_absolute_scale /= 3.0;
      }

      am_mode = AMM_SCALE;
      break;
    default:
      Tcl_AppendResult(interp, "dm am: need more parameters\n",
		       "dm am <r|t|s> xpos ypos\n", (char *)NULL);
      return TCL_ERROR;
    }

    return TCL_OK;
  }

  if(!strcmp(argv[0], "adc")){
    fastf_t fx, fy;
    fastf_t td; /* tick distance */

    if(argc < 4){
      Tcl_AppendResult(interp, "dm adc: need more parameters\n",
		       "dm adc 1|2|t|d xpos ypos\n", (char *)NULL);
      return TCL_ERROR;
    }

    dml_omx = atoi(argv[2]);
    dml_omy = atoi(argv[3]);

    switch(*argv[1]){
    case '1':
      fx = dm_Xx2Normal(dmp, dml_omx) * GED_MAX - adc_state->adc_dv_x;
      fy = dm_Xy2Normal(dmp, dml_omy, 1) * GED_MAX - adc_state->adc_dv_y;

      bu_vls_init(&vls);
      bu_vls_printf(&vls, "adc a1 %lf\n", RAD2DEG*atan2(fy, fx));
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);

      am_mode = AMM_ADC_ANG1;
      break;
    case '2':
      fx = dm_Xx2Normal(dmp, dml_omx) * GED_MAX - adc_state->adc_dv_x;
      fy = dm_Xy2Normal(dmp, dml_omy, 1) * GED_MAX - adc_state->adc_dv_y;

      bu_vls_init(&vls);
      bu_vls_printf(&vls, "adc a2 %lf\n", RAD2DEG*atan2(fy, fx));
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);

      am_mode = AMM_ADC_ANG2;
      break;
    case 't':
      {
	point_t model_pt;
	point_t view_pt;

	bu_vls_init(&vls);

	VSET(view_pt, dm_Xx2Normal(dmp, dml_omx), dm_Xy2Normal(dmp, dml_omy, 1), 0.0);

	if(grid_state->gr_snap)
	  snap_to_grid(&view_pt[X], &view_pt[Y]);

	MAT4X3PNT(model_pt, view_state->vs_vop->vo_view2model, view_pt);
	VSCALE(model_pt, model_pt, base2local);

	bu_vls_printf(&vls, "adc xyz %lf %lf %lf\n", model_pt[X], model_pt[Y], model_pt[Z]);
	Tcl_Eval(interp, bu_vls_addr(&vls));

	bu_vls_free(&vls);
	am_mode = AMM_ADC_TRAN;
      }

      break;
    case 'd':
      fx = (dm_Xx2Normal(dmp, dml_omx) * GED_MAX -
	    adc_state->adc_dv_x) * view_state->vs_vop->vo_scale * base2local * INV_GED;
      fy = (dm_Xy2Normal(dmp, dml_omy, 1) * GED_MAX -
	    adc_state->adc_dv_y) * view_state->vs_vop->vo_scale * base2local * INV_GED;

      td = sqrt(fx * fx + fy * fy);
      bu_vls_init(&vls);
      bu_vls_printf(&vls, "adc dst %lf\n", td);
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);

      am_mode = AMM_ADC_DIST;
      break;
      default:
	Tcl_AppendResult(interp, "dm adc: unrecognized parameter - ", argv[1],
			 "\ndm adc 1|2|t|d xpos ypos\n", (char *)NULL);
	return TCL_ERROR;
    }

    return TCL_OK;
  }

  if(!strcmp(argv[0], "con")){
    if(argc < 5){
      Tcl_AppendResult(interp, "dm con: need more parameters\n",
		       "dm con r|t|s x|y|z xpos ypos\n",
		       "dm con a x|y|1|2|d xpos ypos\n", (char *)NULL);
      return TCL_ERROR;
    }

    dml_omx = atoi(argv[3]);
    dml_omy = atoi(argv[4]);

    switch(*argv[1]){
    case 'a':
      switch(*argv[2]){
      case 'x':
	am_mode = AMM_CON_XADC;
	break;
      case 'y':
	am_mode = AMM_CON_YADC;
	break;
      case '1':
	am_mode = AMM_CON_ANG1;
	break;
      case '2':
	am_mode = AMM_CON_ANG2;
	break;
      case 'd':
	am_mode = AMM_CON_DIST;
	break;
      default:
	Tcl_AppendResult(interp, "dm con: unrecognized parameter - ", argv[2],
			 "\ndm con a x|y|1|2|d xpos ypos\n", (char *)NULL);
      }
      break;
    case 'r':
      switch(*argv[2]){
      case 'x':
	am_mode = AMM_CON_ROT_X;
	break;
      case 'y':
	am_mode = AMM_CON_ROT_Y;
	break;
      case 'z':
	am_mode = AMM_CON_ROT_Z;
	break;
      default:
	Tcl_AppendResult(interp, "dm con: unrecognized parameter - ", argv[2],
			 "\ndm con r|t|s x|y|z xpos ypos\n", (char *)NULL);
	return TCL_ERROR;
      }
      break;
    case 't':
      switch(*argv[2]){
      case 'x':
	am_mode = AMM_CON_TRAN_X;
	break;
      case 'y':
	am_mode = AMM_CON_TRAN_Y;
	break;
      case 'z':
	am_mode = AMM_CON_TRAN_Z;
	break;
      default:
	Tcl_AppendResult(interp, "dm con: unrecognized parameter - ", argv[2],
			 "\ndm con r|t|s x|y|z xpos ypos\n", (char *)NULL);
	return TCL_ERROR;
      }
      break;
    case 's':
      switch(*argv[2]){
      case 'x':
	if(state == ST_S_EDIT && mged_variables->mv_transform == 'e' &&
	   NEAR_ZERO(acc_sc_sol, (fastf_t)SMALL_FASTF))
	  acc_sc_sol = 1.0;
	else if(state == ST_O_EDIT && mged_variables->mv_transform == 'e'){
	  edit_absolute_scale = acc_sc[0] - 1.0;
	  if(edit_absolute_scale > 0.0)
	    edit_absolute_scale /= 3.0;
	}

	am_mode = AMM_CON_SCALE_X;
	break;
      case 'y':
	if(state == ST_S_EDIT && mged_variables->mv_transform == 'e' &&
	   NEAR_ZERO(acc_sc_sol, (fastf_t)SMALL_FASTF))
	  acc_sc_sol = 1.0;
	else if(state == ST_O_EDIT && mged_variables->mv_transform == 'e'){
	  edit_absolute_scale = acc_sc[1] - 1.0;
	  if(edit_absolute_scale > 0.0)
	    edit_absolute_scale /= 3.0;
	}

	am_mode = AMM_CON_SCALE_Y;
	break;
      case 'z':
	if(state == ST_S_EDIT && mged_variables->mv_transform == 'e' &&
	   NEAR_ZERO(acc_sc_sol, (fastf_t)SMALL_FASTF))
	  acc_sc_sol = 1.0;
	else if(state == ST_O_EDIT && mged_variables->mv_transform == 'e'){
	  edit_absolute_scale = acc_sc[2] - 1.0;
	  if(edit_absolute_scale > 0.0)
	    edit_absolute_scale /= 3.0;
	}

	am_mode = AMM_CON_SCALE_Z;
	break;
      default:
	Tcl_AppendResult(interp, "dm con: unrecognized parameter - ", argv[2],
			 "\ndm con r|t|s x|y|z xpos ypos\n", (char *)NULL);
	return TCL_ERROR;
      }
      break;
    default:
      Tcl_AppendResult(interp, "dm con: unrecognized parameter - ", argv[1],
		       "\ndm con r|t|s x|y|z xpos ypos\n", (char *)NULL);
      return TCL_ERROR;
    }

    return TCL_OK;
  }

  if(!strcmp(argv[0], "size")){
    int width, height;

    /* get the window size */
    if(argc == 1){
      bu_vls_init(&vls);
      bu_vls_printf(&vls, "%d %d", dmp->dm_width, dmp->dm_height);
      Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
      bu_vls_free(&vls);

      return TCL_OK;
    }

    /* set the window size */
    if( argc == 3 ){
      width = atoi( argv[1] );
      height = atoi( argv[2] );

#if defined(DM_X) || defined(DM_TK) || defined(DM_OGL) || defined(DM_WGL)
#  if 0
      Tk_ResizeWindow(((struct dm_xvars *)dmp->dm_vars.pub_vars)->xtkwin, width, height);
#  else
      Tk_GeometryRequest(((struct dm_xvars *)dmp->dm_vars.pub_vars)->xtkwin, width, height);
#  endif
#endif

      return TCL_OK;
    }

    Tcl_AppendResult(interp, "Usage: dm size [width height]\n", (char *)NULL);
    return TCL_ERROR;
  }

#if defined(DM_X) || defined(DM_TK) || defined(DM_OGL) || defined(DM_WGL)
  if(!strcmp(argv[0], "getx")){
    if(argc == 1){
      struct bu_vls tmp_vls;

      bu_vls_init(&tmp_vls);
      /* Bare set command, print out current settings */
      bu_vls_struct_print2(&tmp_vls, "dm internal X variables", dm_xvars_vparse,
		      (const char *)dmp->dm_vars.pub_vars);
      Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);
      bu_vls_free(&tmp_vls);
    }else if(argc == 2){
      bu_vls_init(&vls);
      bu_vls_struct_item_named(&vls, dm_xvars_vparse, argv[1],
			       (const char *)dmp->dm_vars.pub_vars, ',');
      Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
      bu_vls_free(&vls);
    }

    return TCL_OK;
  }
#endif

  if(!strcmp(argv[0], "bg")){
    int r, g, b;

    if(argc != 1 && argc != 4){
      bu_vls_init(&vls);
      bu_vls_printf(&vls, "Usage: dm bg [r g b]");
      Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
      bu_vls_free(&vls);

      return TCL_ERROR;
    }

    /* return background color of current display manager */
    if (argc == 1) {
      bu_vls_init(&vls);
      bu_vls_printf(&vls, "%d %d %d",
		    dmp->dm_bg[0],
		    dmp->dm_bg[1],
		    dmp->dm_bg[2]);
      Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
      bu_vls_free(&vls);

      return TCL_OK;
    }

    if(sscanf(argv[1], "%d", &r) != 1 ||
       sscanf(argv[2], "%d", &g) != 1 ||
       sscanf(argv[3], "%d", &b) != 1){
      bu_vls_init(&vls);
      bu_vls_printf(&vls, "Usage: dm bg r g b");
      Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
      bu_vls_free(&vls);

      return TCL_ERROR;
    }

    dirty = 1;
    return DM_SET_BGCOLOR(dmp, r, g, b);
  }

  Tcl_AppendResult(interp, "dm: bad command - ", argv[0], "\n", (char *)NULL);
  return TCL_ERROR;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@preliminary support for unaccelerated mgen on aqua through dm-tk

configure.ac:
        - use two levels of expansion for BRLCAD_DATA
        - enable_aqua configure option
        - move X11 ac_ macro tests from argument check section
        - rely on AC_PATH_XTRA to figure out most of what we need to know about
                where to find X
        - no longer look for libICE, libXmu, or libXsm  AC_PATH_XTRA
                populates X_PRE_LIBS with these but they seem completely unused
                right now.
        - look for opengl libs and headers in all of the places AC_PATH_XTRA
                looked for the xlibs
        - use tk's xlib headers when using tk-aqua rather than x
        - remove X11 "ugly hack"
        - include tk flags where necessary
        - remove --disable-shared from subconfigs
        - forcibly add tcl and tk build dirs to libtool wrapper scripts
libdm/Makefile.am, dm-tk.[ch], dm.h, dm-generic.c, dm_obj.c, mged/Makefile.am,
                attach.c, dm-generic.c, dm-tk.c, ged.c:
        - use lower case when referring to tk
        - add support for using dm-tk
        - include X_CFLAGS with DM_X
irprep/Makefile.am, util/Makefile.am:
        - disable build of ir-X, pl-X when there is no X
dm-X.c:
        - no need to test for HAVE_X11_XLIB here; if we don't have it we
                shouldn't be building this file
libfb/Makefile.am, if_tk.c, libfb/tcl.c:
        - build if_tk.c
        - add preliminary hooks so if_tk can be called when ready
@
text
@d40 2
a44 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.12.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@a39 2
#include <string.h>

d43 5
@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a47 3
#ifdef HAVE_X11_XLIB_H
#  include <X11/Xutil.h>
#endif
d80 1
d83 1
d608 1
a608 1
#if defined(DM_X) || defined(DM_OGL) || defined(DM_WGL)
d623 1
a623 1
#if defined(DM_X) || defined(DM_OGL) || defined(DM_WGL)
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d203 1
a203 1
            VSET(view_pt, fx, fy, 0.0)
d205 1
a205 1
            VSET(view_pt, fx, fy, 1.0)
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.8
log
@decouple DM_X from the other display manager interfaces, clean up the preprocessor logic so Windows does not need to declare DM_X but also to avoid using _WIN32 where possible as well.
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.7
log
@header cleanup, ws
@
text
@d49 1
a49 3

#ifdef DM_X
#  include "tk.h"
d54 1
a76 1
#ifdef DM_X
d91 1
a91 1
#endif
d102 1
a102 2
stateChange(a, b)
int a, b;
d130 1
a130 3
common_dm(argc, argv)
int argc;
char **argv;
d610 1
a610 1
#ifdef DM_X
d625 1
a625 1
#ifdef DM_X
@


14.6
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d41 8
a48 1
#include <sys/types.h>
a52 3
#  include "dm_xvars.h"
#else
#  include "tcl.h"
d55 2
a56 5
#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
d63 1
d68 1
@


14.5
log
@update copyright to 2006
@
text
@d37 1
a37 2


@


14.5.2.1
log
@update from HEAD
@
text
@d37 2
a38 1
#include <stdlib.h>
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d44 1
a44 1
#ifdef DM_X 
d672 1
a672 1
      
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d44 1
a44 1
#ifdef DM_X
d672 1
a672 1

@


14.2
log
@GPL License changes
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D M - G E N E R I C . C
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d675 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d33 1
a33 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d16 1
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a41 1
#include "externs.h"
@

