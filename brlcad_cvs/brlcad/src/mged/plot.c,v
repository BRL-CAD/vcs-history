head	14.13;
access;
symbols
	rel-7-10-4:14.13
	STABLE:14.13.0.2
	stable-branch:14.3
	rel-7-10-2:14.13
	rel-7-10-0:14.12
	rel-7-8-4:14.9
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.2
	rel-7-6-0:14.5
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.13
date	2007.05.14.21.04.32;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.02.20.08.19.49;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.23.01.13.42;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.07.09.19.17.16;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.04.06.20.50.03;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches
	14.7.2.1;
next	14.6;

14.6
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.08.21.13.56.30;	author brlcad;	state Exp;
branches
	14.5.2.1;
next	14.4;

14.4
date	2005.05.28.02.14.52;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.06;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.29;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.27;	author morrison;	state Exp;
branches;
next	;

14.5.2.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;

14.7.2.1
date	2006.04.07.19.30.28;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.13
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@/*                          P L O T . C
 * BRL-CAD
 *
 * Copyright (c) 1985-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file plot.c
 *
 *	Provide UNIX-plot output of the current view.
 *
 *  Authors -
 *  	Michael John Muuss	(This version)
 *	Douglas A. Gwyn		(3-D UNIX Plot routines)
 *  	Gary S. Moss		(Original gedplot program)
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.12 2007/02/20 08:19:49 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <math.h>
#include <stdio.h>
#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif
#ifdef HAVE_SYS_WAIT_H
#  include <sys/wait.h>
#endif
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"
#include "plot3.h"

#include "./ged.h"
#include "./mged_solid.h"
#include "./mged_dm.h"


/*
 *  			F _ P L O T
 *
 *  plot file [opts]
 *  potential options might include:
 *	grid, 3d w/color, |filter, infinite Z
 */
int
f_plot(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	register struct solid		*sp;
	register struct bn_vlist	*vp;
	register FILE *fp;
	static vect_t clipmin, clipmax;
	static vect_t last;		/* last drawn point */
	static vect_t fin;
	static vect_t start;
	int Three_D;			/* 0=2-D -vs- 1=3-D */
	int Z_clip;			/* Z clipping */
	int Dashing;			/* linetype is dashed */
	int floating;			/* 3-D floating point plot */
	int	is_pipe = 0;

	if(argc < 2){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help plot");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	if( not_state( ST_VIEW, "UNIX Plot of view" ) )
	  return TCL_ERROR;

	/* Process any options */
	Three_D = 1;				/* 3-D w/color, by default */
	Z_clip = 0;				/* NO Z clipping, by default*/
	floating = 0;
	while( argv[1] != (char *)0 && argv[1][0] == '-' )  {
		switch( argv[1][1] )  {
		case 'f':
			floating = 1;
			break;
		case '3':
			Three_D = 1;
			break;
		case '2':
			Three_D = 0;		/* 2-D, for portability */
			break;
		case 'g':
		  /* do grid */
		  Tcl_AppendResult(interp, "grid unimplemented\n", (char *)NULL);
		  break;
		case 'z':
		case 'Z':
		  /* Enable Z clipping */
		  Tcl_AppendResult(interp, "Clipped in Z to viewing cube\n", (char *)NULL);
		  Z_clip = 1;
		  break;
		default:
		  Tcl_AppendResult(interp, "bad PLOT option ", argv[1], "\n", (char *)NULL);
		  break;
		}
		argv++;
	}
	if( argv[1] == (char *)0 )  {
	  Tcl_AppendResult(interp, "no filename or filter specified\n", (char *)NULL);
	  return TCL_ERROR;
	}
	if( argv[1][0] == '|' )  {
		struct bu_vls	str;
		bu_vls_init( &str );
		bu_vls_strcpy( &str, &argv[1][1] );
		while( (++argv)[1] != (char *)0 )  {
			bu_vls_strcat( &str, " " );
			bu_vls_strcat( &str, argv[1] );
		}
		if( (fp = popen( bu_vls_addr( &str ), "w" ) ) == NULL )  {
			perror( bu_vls_addr( &str ) );
			return TCL_ERROR;
		}

		Tcl_AppendResult(interp, "piped to ", bu_vls_addr( &str ),
				 "\n", (char *)NULL);
		bu_vls_free( &str );
		is_pipe = 1;
	}  else  {
		if( (fp = fopen( argv[1], "w" )) == NULL )  {
		  perror( argv[1] );
		  return TCL_ERROR;
		}

		Tcl_AppendResult(interp, "plot stored in ", argv[1], "\n", (char *)NULL);
		is_pipe = 0;
	}

	if( floating )  {
		pd_3space( fp,
			-view_state->vs_vop->vo_center[MDX] - view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDY] - view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDZ] - view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDX] + view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDY] + view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDZ] + view_state->vs_vop->vo_scale );
		Dashing = 0;
		pl_linmod( fp, "solid" );
		FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
			/* Could check for differences from last color */
			pl_color( fp,
				sp->s_color[0],
				sp->s_color[1],
				sp->s_color[2] );
			if( Dashing != sp->s_soldash )  {
				if( sp->s_soldash )
					pl_linmod( fp, "dotdashed");
				else
					pl_linmod( fp, "solid");
				Dashing = sp->s_soldash;
			}
			rt_vlist_to_uplot( fp, &(sp->s_vlist) );
		}
		goto out;
	}

	/*
	 *  Integer output version, either 2-D or 3-D.
	 *  Viewing region is from -1.0 to +1.0
	 *  which is mapped to integer space -2048 to +2048 for plotting.
	 *  Compute the clipping bounds of the screen in view space.
	 */
	clipmin[X] = -1.0;
	clipmax[X] =  1.0;
	clipmin[Y] = -1.0;
	clipmax[Y] =  1.0;
	if( Z_clip )  {
		clipmin[Z] = -1.0;
		clipmax[Z] =  1.0;
	} else {
		clipmin[Z] = -1.0e20;
		clipmax[Z] =  1.0e20;
	}

	if( Three_D )
		pl_3space( fp, (int)GED_MIN, (int)GED_MIN, (int)GED_MIN, (int)GED_MAX, (int)GED_MAX, (int)GED_MAX );
	else
		pl_space( fp, (int)GED_MIN, (int)GED_MIN, (int)GED_MAX, (int)GED_MAX );
	pl_erase( fp );
	Dashing = 0;
	pl_linmod( fp, "solid");
	FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
		if( Dashing != sp->s_soldash )  {
			if( sp->s_soldash )
				pl_linmod( fp, "dotdashed");
			else
				pl_linmod( fp, "solid");
			Dashing = sp->s_soldash;
		}
		for( BU_LIST_FOR( vp, bn_vlist, &(sp->s_vlist) ) )  {
			register int	i;
			register int	nused = vp->nused;
			register int	*cmd = vp->cmd;
			register point_t *pt = vp->pt;
			for( i = 0; i < nused; i++,cmd++,pt++ )  {
				switch( *cmd )  {
				case BN_VLIST_POLY_START:
				case BN_VLIST_POLY_VERTNORM:
					continue;
				case BN_VLIST_POLY_MOVE:
				case BN_VLIST_LINE_MOVE:
					/* Move, not draw */
					MAT4X3PNT( last, view_state->vs_vop->vo_model2view, *pt );
					continue;
				case BN_VLIST_POLY_DRAW:
				case BN_VLIST_POLY_END:
				case BN_VLIST_LINE_DRAW:
					/* draw */
					MAT4X3PNT(fin, view_state->vs_vop->vo_model2view, *pt);
					VMOVE( start, last );
					VMOVE( last, fin );
					break;
				}
				if(
					vclip( start, fin, clipmin, clipmax ) == 0
				)  continue;

				if( Three_D )  {
					/* Could check for differences from last color */
					pl_color( fp,
						sp->s_color[0],
						sp->s_color[1],
						sp->s_color[2] );
					pl_3line( fp,
						(int)( start[X] * GED_MAX ),
						(int)( start[Y] * GED_MAX ),
						(int)( start[Z] * GED_MAX ),
						(int)( fin[X] * GED_MAX ),
						(int)( fin[Y] * GED_MAX ),
						(int)( fin[Z] * GED_MAX ) );
				}  else  {
					pl_line( fp,
						(int)( start[0] * GED_MAX ),
						(int)( start[1] * GED_MAX ),
						(int)( fin[0] * GED_MAX ),
						(int)( fin[1] * GED_MAX ) );
				}
			}
		}
	}
out:
	if( is_pipe )
		(void)pclose( fp );
	else
		(void)fclose( fp );

	return TCL_ERROR;
}

int
f_area(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	register struct solid		*sp;
	register struct bn_vlist	*vp;
	static vect_t last;
	static vect_t fin;
	FILE *fp_r;
	FILE *fp_w;
	int fd1[2]; /* mged | cad_boundp */
	int fd2[2]; /* cad_boundp | cad_parea */
	int fd3[2]; /* cad_parea | mged */
	int pid1;
	int pid2;
	int rpid;
	int retcode;
	char result[RT_MAXLINE] = {0};
	char tol_str[32] = {0};
	char *tol_ptr;

#ifndef _WIN32
	/* XXX needs fixing */

	CHECK_DBI_NULL;

	if(argc < 1 || 2 < argc){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help area");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	if( not_state( ST_VIEW, "Presented Area Calculation" ) == TCL_ERROR )
		return TCL_ERROR;

	if( BU_LIST_IS_EMPTY( &dgop->dgo_headSolid ) ) {
		Tcl_AppendResult(interp, "No objects displayed!!!\n", (char *)NULL );
		return TCL_ERROR;
	}

	FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
	  if( !sp->s_Eflag && sp->s_soldash != 0 )  {
	    struct bu_vls vls;

	    bu_vls_init(&vls);
	    bu_vls_printf(&vls, "help area");
	    Tcl_Eval(interp, bu_vls_addr(&vls));
	    bu_vls_free(&vls);
	    return TCL_ERROR;
	  }
	}

	if(argc == 2){
	  Tcl_AppendResult(interp, "Tolerance is ", argv[1], "\n", (char *)NULL);
	  tol_ptr = argv[1];
	}else{
	  struct bu_vls tmp_vls;
	  double tol = 0.005;

	  bu_vls_init(&tmp_vls);
	  sprintf(tol_str, "%e", tol);
	  tol_ptr = tol_str;
	  bu_vls_printf(&tmp_vls, "Auto-tolerance is %s\n", tol_str);
	  Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);
	  bu_vls_free(&tmp_vls);
	}

	if(pipe(fd1) != 0){
	  perror("f_area");
	  return TCL_ERROR;
	}

	if(pipe(fd2) != 0){
	  perror("f_area");
	  return TCL_ERROR;
	}

	if(pipe(fd3) != 0){
	  perror("f_area");
	  return TCL_ERROR;
	}

	if ((pid1 = fork()) == 0){
	  dup2(fd1[0], fileno(stdin));
	  dup2(fd2[1], fileno(stdout));

	  close(fd1[0]);
	  close(fd1[1]);
	  close(fd2[0]);
	  close(fd2[1]);
	  close(fd3[0]);
	  close(fd3[1]);

	  execlp("cad_boundp", "cad_boundp", "-t", tol_ptr, (char *)NULL);
	}

	if ((pid2 = fork()) == 0){
	  dup2(fd2[0], fileno(stdin));
	  dup2(fd3[1], fileno(stdout));

	  close(fd1[0]);
	  close(fd1[1]);
	  close(fd2[0]);
	  close(fd2[1]);
	  close(fd3[0]);
	  close(fd3[1]);

	  execlp("cad_parea", "cad_parea", (char *)NULL);
	}

	close(fd1[0]);
	close(fd2[0]);
	close(fd2[1]);
	close(fd3[1]);

	fp_w = fdopen(fd1[1], "w");
	fp_r = fdopen(fd3[0], "r");

	/*
	 * Write out rotated but unclipped, untranslated,
	 * and unscaled vectors
	 */
	FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
	  for( BU_LIST_FOR( vp, bn_vlist, &(sp->s_vlist) ) )  {
	    register int	i;
	    register int	nused = vp->nused;
	    register int	*cmd = vp->cmd;
	    register point_t *pt = vp->pt;
	    for( i = 0; i < nused; i++,cmd++,pt++ )  {
	      switch( *cmd )  {
	      case BN_VLIST_POLY_START:
	      case BN_VLIST_POLY_VERTNORM:
		continue;
	      case BN_VLIST_POLY_MOVE:
	      case BN_VLIST_LINE_MOVE:
		/* Move, not draw */
		MAT4X3VEC(last, view_state->vs_vop->vo_rotation, *pt);
		continue;
	      case BN_VLIST_POLY_DRAW:
	      case BN_VLIST_POLY_END:
	      case BN_VLIST_LINE_DRAW:
		/* draw.  */
		MAT4X3VEC(fin, view_state->vs_vop->vo_rotation, *pt);
		break;
	      }

	      fprintf(fp_w, "%.9e %.9e %.9e %.9e\n",
		      last[X] * base2local,
		      last[Y] * base2local,
		      fin[X] * base2local,
		      fin[Y] * base2local );

	      VMOVE( last, fin );
	    }
	  }
	}

	fclose(fp_w);

	Tcl_AppendResult(interp, "Presented area from this viewpoint, square ",
			 bu_units_string(dbip->dbi_local2base), ":\n", (char *)NULL);

	/* Read result */
	bu_fgets(result, RT_MAXLINE, fp_r);
	Tcl_AppendResult(interp, result, "\n", (char *)NULL);

	while ((rpid = wait(&retcode)) != pid1 && rpid != -1);
	while ((rpid = wait(&retcode)) != pid2 && rpid != -1);

	fclose(fp_r);
	close(fd1[1]);
	close(fd3[0]);
#endif

	return TCL_OK;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.11 2007/01/23 01:13:42 brlcad Exp $ (BRL)";
d75 1
a75 1
	register struct rt_vlist	*vp;
d223 1
a223 1
		for( BU_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
d230 2
a231 2
				case RT_VLIST_POLY_START:
				case RT_VLIST_POLY_VERTNORM:
d233 2
a234 2
				case RT_VLIST_POLY_MOVE:
				case RT_VLIST_LINE_MOVE:
d238 3
a240 3
				case RT_VLIST_POLY_DRAW:
				case RT_VLIST_POLY_END:
				case RT_VLIST_LINE_DRAW:
d287 1
a287 1
	register struct rt_vlist	*vp;
d409 1
a409 1
	  for( BU_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
d416 2
a417 2
	      case RT_VLIST_POLY_START:
	      case RT_VLIST_POLY_VERTNORM:
d419 2
a420 2
	      case RT_VLIST_POLY_MOVE:
	      case RT_VLIST_LINE_MOVE:
d424 3
a426 3
	      case RT_VLIST_POLY_DRAW:
	      case RT_VLIST_POLY_END:
	      case RT_VLIST_LINE_DRAW:
@


14.11
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.10 2007/01/20 14:36:57 brlcad Exp $ (BRL)";
d449 1
a449 1
	fgets(result, RT_MAXLINE, fp_r);
@


14.10
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.9 2006/07/09 19:17:16 brlcad Exp $ (BRL)";
@


14.9
log
@increase and initialize some buffer sizes to something larger in order to minimize hitting buffer limits while processing.
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2006 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.8 2006/04/06 20:50:03 brlcad Exp $ (BRL)";
@


14.8
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.7 2006/01/18 06:46:19 brlcad Exp $ (BRL)";
d300 2
a301 2
	char result[MAXLINE];
	char tol_str[32];
d450 1
a450 1
	fgets(result, MAXLINE, fp_r);
@


14.7
log
@update copyright to 2006
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.6 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
d43 6
@


14.7.2.1
log
@update from HEAD
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.7 2006/01/18 06:46:19 brlcad Exp $ (BRL)";
a42 6
#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif
#ifdef HAVE_SYS_WAIT_H
#  include <sys/wait.h>
#endif
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1985-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.5 2005/08/21 13:56:30 brlcad Exp $ (BRL)";
@


14.5
log
@quell warnings, add missing headers
@
text
@d22 1
a22 1
 *  
d29 1
a29 1
 *  
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.4 2005/05/28 02:14:52 brlcad Exp $ (BRL)";
d437 1
a437 1
	
@


14.5.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d22 1
a22 1
 *
d29 1
a29 1
 *
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d437 1
a437 1

@


14.4
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.3 2005/01/30 20:31:06 brlcad Exp $ (BRL)";
a40 2


d43 4
d52 2
a54 1
#include "plot3.h"
d58 1
@


14.3
log
@update copyright to 2005
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/plot.c,v 14.2 2004/12/21 04:17:27 butler Exp $ (BRL)";
d294 1
a294 1
#ifndef WIN32
@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2004 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/plot.c,v 14.1 2004/11/16 19:42:17 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *  			P L O T . C
a33 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/plot.c,v 1.3 2004/08/02 23:01:51 morrison Exp $ (BRL)";
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/plot.c,v 1.2 2004/06/08 22:04:29 morrison Exp $ (BRL)";
d438 10
@


1.2
log
@obliterate externs.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d24 1
a24 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/plot.c,v 11.29 2004/05/10 15:30:48 erikg Exp $ (BRL)";
a37 1
#include "externs.h"
@

