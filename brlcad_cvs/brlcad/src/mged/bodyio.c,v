head	14.15;
access;
symbols
	rel-7-10-4:14.14.2.1
	STABLE:14.14.0.2
	stable-branch:14.3
	rel-7-10-2:14.14
	rel-7-10-0:14.13
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.5.2.1
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.4
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.15
date	2007.09.15.16.23.16;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.07.26.01.13.58;	author brlcad;	state Exp;
branches
	14.14.2.1;
next	14.13;

14.13
date	2007.01.27.01.41.43;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.23.01.13.41;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.04.06.20.50.03;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches
	14.9.2.1;
next	14.8;

14.8
date	2005.12.23.21.26.31;	author bob1961;	state Exp;
branches;
next	14.7;

14.7
date	2005.12.09.03.17.44;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.05.28.02.14.51;	author brlcad;	state Exp;
branches
	14.5.2.1
	14.5.6.1;
next	14.4;

14.4
date	2005.05.04.03.27.58;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.05;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.17.26;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.26;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.20;	author morrison;	state Exp;
branches;
next	;

14.5.2.1
date	2005.09.08.16.09.50;	author bob1961;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.9.2.1
date	2006.04.07.19.30.28;	author jlowenz;	state Exp;
branches;
next	;

14.14.2.1
date	2007.09.28.14.04.33;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                        B O D Y I O . C
 * BRL-CAD
 *
 * Copyright (c) 2000-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file bodyio.c
 *
 * Functions -
 *	cmd_import_body - read an object's body from a file
 *	cmd_export_body - write an object's body to a file
 *
 *  Author -
 *	Paul J. Tanenbaum
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.14 2007/07/26 01:13:58 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <signal.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>

#ifdef HAVE_PWD_H
#  include <pwd.h>
#endif
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "db5.h"
#include "bn.h"
#include "nmg.h"
#include "raytrace.h"
#include "./ged.h"
#include "./sedit.h"

/*
 *		C M D _ I M P O R T _ B O D Y ( )
 *
 *	Read an object's body from disk file
 *
 */
int
cmd_import_body(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
    register struct directory	*dp;
    struct stat			stat_buf;
    int				major_code, minor_code;
    int				majc, minc;
    char			*descrip;
    struct bu_vls		vls;
    struct rt_db_internal	intern;
    struct rt_binunif_internal	*bip;
    int				fd;
    int				gotten;

    CHECK_DBI_NULL;

    if(argc != 4){
      struct bu_vls vls;

      bu_vls_init(&vls);
      bu_vls_printf(&vls, "help %s", argv[0]);
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);
      return TCL_ERROR;
    }

    switch (sscanf(argv[3], "%d %d", &major_code, &minor_code)) {
	case 1:
	    /* XXX is it safe to have no minor code? */
	    minor_code = 0;
	case 2:
	    break;
	case 0:
	    if ( db5_type_codes_from_descrip(&majc, &minc,
						argv[3])
	     && db5_type_codes_from_tag(&majc, &minc,
						argv[3])) {
		bu_vls_init( &vls );
		bu_vls_printf( &vls,
				"Invalid data type: '%s'\n", argv[3] );
		Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
		bu_vls_free( &vls );
		mged_print_result( TCL_ERROR );
		return TCL_ERROR;
	    }
	    major_code = majc;
	    minor_code = minc;
	    break;
    }
    bu_vls_init( &vls );
    if (db5_type_descrip_from_codes( &descrip, major_code, minor_code )) {
	bu_vls_printf( &vls,
			"Invalid maj/min: %d %d\n",
			major_code, minor_code);
	Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	bu_vls_free( &vls );
	mged_print_result( TCL_ERROR );
	return TCL_ERROR;
    }
    if (RT_G_DEBUG & DEBUG_VOL)
	bu_log( "Type is %d %d '%s'\n", major_code, minor_code, descrip);

    /*
     *	Check to see if we need to create a new object
     */
    if ((dp = db_lookup( dbip, argv[1], LOOKUP_QUIET)) == DIR_NULL) {
	bu_vls_init( &vls );
	bu_vls_printf( &vls, "object \"%s\" does not exist.\n", argv[1] );
	Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	bu_vls_free( &vls );
	mged_print_result( TCL_ERROR );
	return TCL_ERROR;
    } else {
	RT_INIT_DB_INTERNAL( &intern );
    }

    /*
     *	How much data do we have to suck in?
     */
    if( stat( argv[2], &stat_buf ) ) {
	bu_vls_init( &vls );
	bu_vls_printf( &vls, "Cannot get status of file %s\n", argv[2] );
	Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	bu_vls_free( &vls );
	mged_print_result( TCL_ERROR );
	return TCL_ERROR;
    }

    if (RT_G_DEBUG & DEBUG_VOL) {
	bu_log ("File '%s' is %ld bytes long\n", argv[2], (long)stat_buf.st_size);
    }

    if( (fd = open( argv[2], O_RDONLY  )) == -1 ) {
	bu_vls_init( &vls );
	bu_vls_printf( &vls,
	    "Cannot open file %s for reading\n", argv[2] );
	Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	bu_vls_free( &vls );
	mged_print_result( TCL_ERROR );
	return TCL_ERROR;
    }

    if (db5_type_descrip_from_codes( &descrip, major_code, minor_code )) {
	bu_vls_printf( &vls,
	    "Invalid major_code/minor_code: %d\n", major_code);
	Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	bu_vls_free( &vls );
	mged_print_result( TCL_ERROR );
	return TCL_ERROR;
    }
    switch (major_code) {
	case DB5_MAJORTYPE_BINARY_UNIF:
	    bip = bu_malloc(sizeof(struct rt_binunif_internal),
		    "rt_binunif_internal");
	    bip->magic = RT_BINUNIF_INTERNAL_MAGIC;
	    bip->type = minor_code;
	    bip->u.uint8 = (unsigned char *) bu_malloc((size_t)stat_buf.st_size, "binunif");
    if (RT_G_DEBUG & DEBUG_VOL)
	    bu_log("Created an rt_binunif_internal for type '%s' (minor=%d)\n", descrip, minor_code);

	    gotten = read( fd, (void *) (bip->u.uint8), (size_t)stat_buf.st_size);
	    if (gotten == -1) {
		perror( "import_body" );
		return TCL_ERROR;
	    } else if (gotten < stat_buf.st_size) {
		bu_vls_init( &vls );
		bu_vls_printf( &vls,
		    "Incomplete read of object %s from file %s, got %d bytes\n",
		    argv[1], argv[2], gotten );
		Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
		bu_vls_free( &vls );
		mged_print_result( TCL_ERROR );
		return TCL_ERROR;
	    }
	    if (RT_G_DEBUG & DEBUG_VOL)
		    bu_log("gotten=%d,  minor_code is %d\n",
			   gotten, minor_code);
	    bip->count = gotten / db5_type_sizeof_n_binu( minor_code );
	    if (RT_G_DEBUG & DEBUG_VOL) {
		    bu_log("Got 'em!\nThink I own %d of 'em\n", bip->count);
		    fflush(stderr);
	    }
	    intern.idb_major_type = DB5_MAJORTYPE_BRLCAD;
	    intern.idb_type = minor_code;
	    intern.idb_meth = &rt_functab[ID_BINUNIF];
	    intern.idb_ptr = (genptr_t)bip;
	    rt_binunif_dump(bip);
	    rt_db_put_internal5( dp, dbip, &intern, &rt_uniresource, DB5_MAJORTYPE_BINARY_UNIF );
	    rt_db_free_internal( &intern, &rt_uniresource );
	    break;
	default:
	    bu_vls_printf( &vls,
		"Haven't gotten around to supporting type: %s\n",
		descrip);
	    Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	    bu_vls_free( &vls );
	    mged_print_result( TCL_ERROR );
	    return TCL_ERROR;
    }

    return TCL_OK;
}

/*
 *		C M D _ E X P O R T _ B O D Y ( )
 *
 *	Write an object's body to disk file
 *
 */
int
cmd_export_body(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
    register struct directory	*dp;
    int				fd;
    void			*bufp;
    size_t			nbytes = 0;
    long int			written;
    struct bu_external		ext;
    struct db5_raw_internal	raw;
    struct rt_db_internal	intern;
    struct rt_binunif_internal	*bip;
    struct bu_vls		vls;
#if 0
    int				status;
#endif
    char			*tmp;

    CHECK_DBI_NULL;

    if(argc != 3){
      bu_vls_init(&vls);
      bu_vls_printf(&vls, "help %s", argv[0]);
      Tcl_Eval(interp, bu_vls_addr(&vls));
      bu_vls_free(&vls);
      return TCL_ERROR;
    }

    /*
     *	Find the guy we're told to write
     */
    if( (dp = db_lookup( dbip, argv[2], LOOKUP_NOISY)) == DIR_NULL ){
	bu_vls_init( &vls );
	bu_vls_printf( &vls,
	    "Cannot find object %s for writing\n", argv[2] );
	Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	bu_vls_free( &vls );
	mged_print_result( TCL_ERROR );
	return TCL_ERROR;
    }
    RT_INIT_DB_INTERNAL(&intern);
    if ( rt_db_get_internal5( &intern, dp, dbip, NULL, &rt_uniresource)
	!= ID_BINUNIF
     || db_get_external( &ext, dp, dbip ) < 0 ) {
	(void)signal( SIGINT, SIG_IGN );
	TCL_READ_ERR_return;
    }
    if (db5_get_raw_internal_ptr(&raw, ext.ext_buf) == NULL)
    {
	bu_free_external( &ext );
	(void)signal( SIGINT, SIG_IGN );
	TCL_READ_ERR_return;
    }

    /*
     *	Do the writing
     */
#ifndef _WIN32
    if( (fd = creat( argv[1], S_IRWXU | S_IRGRP | S_IROTH  )) == -1 ) {
#else
		if( (fd = creat( argv[1], _S_IREAD | _S_IWRITE  )) == -1 ) {
#endif
	bu_free_external( &ext );
	bu_vls_init( &vls );
	bu_vls_printf( &vls,
	    "Cannot open file %s for writing\n", argv[1] );
	Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	bu_vls_free( &vls );
	mged_print_result( TCL_ERROR );
	return TCL_ERROR;
    }
    if (db5_type_descrip_from_codes(&tmp, raw.major_type, raw.minor_type))
	tmp = 0;

    if (RT_G_DEBUG & DEBUG_VOL)
	    bu_log("cmd_export_body() sees type (%d, %d)='%s'\n",
		   raw.major_type, raw.minor_type, tmp);
    switch (raw.major_type) {
	case DB5_MAJORTYPE_BINARY_UNIF:
#if 0
	    if ( rt_binunif_import5( &intern, &ext, 0, dbip,
		    &rt_uniresource, raw.minor_type  ) ) {
		(void)signal( SIGINT, SIG_IGN );
		TCL_READ_ERR_return;
	    }
#endif
	    bip = (struct rt_binunif_internal *) intern.idb_ptr;
	    RT_CK_BINUNIF(bip);
	    rt_binunif_dump(bip);
	    bufp = (void *) bip->u.uint8;
	    bu_log("cmd_export_body() thinks bip->count=%d\n", bip->count);
	    switch (bip -> type) {
		case DB5_MINORTYPE_BINU_FLOAT:
			if (RT_G_DEBUG & DEBUG_VOL)
				bu_log("bip->type switch... float");
		    nbytes = (size_t) (bip->count * sizeof(float));
		    break;
		case DB5_MINORTYPE_BINU_DOUBLE:
			if (RT_G_DEBUG & DEBUG_VOL)
				bu_log("bip->type switch... double");
		    nbytes = (size_t) (bip->count * sizeof(double));
		    break;
		case DB5_MINORTYPE_BINU_8BITINT:
		case DB5_MINORTYPE_BINU_8BITINT_U:
			if (RT_G_DEBUG & DEBUG_VOL)
				bu_log("bip->type switch... 8bitint");
		    nbytes = (size_t) (bip->count);
		    break;
		case DB5_MINORTYPE_BINU_16BITINT:
			if (RT_G_DEBUG & DEBUG_VOL)
				bu_log("bip->type switch... 16bitint");
		    nbytes = (size_t) (bip->count * 2);
		    bu_log("data[0] = %u\n", bip->u.uint16[0]);
		    break;
		case DB5_MINORTYPE_BINU_16BITINT_U:
			if (RT_G_DEBUG & DEBUG_VOL)
				bu_log("bip->type switch... 16bituint");
		    nbytes = (size_t) (bip->count * 2);
		    bu_log("data[0] = %u\n", bip->u.uint16[0]);
		    break;
		case DB5_MINORTYPE_BINU_32BITINT:
		case DB5_MINORTYPE_BINU_32BITINT_U:
			if (RT_G_DEBUG & DEBUG_VOL)
				bu_log("bip->type switch... 32bitint");
		    nbytes = (size_t) (bip->count * 4);
		    break;
		case DB5_MINORTYPE_BINU_64BITINT:
		case DB5_MINORTYPE_BINU_64BITINT_U:
			if (RT_G_DEBUG & DEBUG_VOL)
				bu_log("bip->type switch... 64bitint");
		    nbytes = (size_t) (bip->count * 8);
		    break;
		default:
		    /* XXX	This shouln't happen!!    */
		    bu_log("bip->type switch... default");
		    break;
	    }
	    break;
	default:
		if (RT_G_DEBUG & DEBUG_VOL)
			bu_log("I'm in the default\n");
		bufp = (void *) ext.ext_buf;
		nbytes = (size_t) ext.ext_nbytes;
		break;
    }
    if (RT_G_DEBUG & DEBUG_VOL)
	    bu_log("going to write %ld bytes\n", nbytes);

    if ( (written = write(fd, bufp, nbytes) ) != nbytes ) {
	perror(argv[1]);
	    bu_log("%s:%d\n", __FILE__, __LINE__);
	bu_free_external( &ext );
	bu_vls_init( &vls );
	bu_vls_printf( &vls,
	    "Incomplete write of object %s to file %s, got %ld, s/b=%ld\n",
	    argv[2], argv[1], written, nbytes );
	Tcl_SetResult(interp, bu_vls_addr( &vls ), TCL_VOLATILE );
	bu_vls_free( &vls );
	mged_print_result( TCL_ERROR );
	return TCL_ERROR;
    }

    bu_free_external( &ext );
    return TCL_OK;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.13 2007/01/27 01:41:43 brlcad Exp $ (BRL)";
a35 3
#ifdef HAVE_PWD_H
#  include <pwd.h>
#endif
d39 1
a39 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d43 5
a50 1
#include <errno.h>
@


14.14.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.15 2007/09/15 16:23:16 brlcad Exp $ (BRL)";
d36 3
d42 5
a46 1
#include <string.h>
a49 5
#include <errno.h>

#ifdef HAVE_PWD_H
#  include <pwd.h>
#endif
d53 1
@


14.13
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a27 4
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.12 2007/01/23 01:13:41 brlcad Exp $ (BRL)";
@


14.12
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.11 2007/01/20 14:36:57 brlcad Exp $ (BRL)";
d120 2
a121 2
    	    major_code = majc;
    	    minor_code = minc;
d135 1
a135 1
        bu_log( "Type is %d %d '%s'\n", major_code, minor_code, descrip);
d393 1
a393 1
    	perror(argv[1]);
@


14.11
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d34 1
a34 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.10 2006/04/06 20:50:03 brlcad Exp $ (BRL)";
@


14.10
log
@quell/fix issues raised by the Intel compiler on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2006 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.9 2006/01/18 06:46:19 brlcad Exp $ (BRL)";
@


14.9
log
@update copyright to 2006
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.8 2005/12/23 21:26:31 bob1961 Exp $ (BRL)";
d252 1
a252 1
    int				written;
@


14.9.2.1
log
@update from HEAD
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.9 2006/01/18 06:46:19 brlcad Exp $ (BRL)";
d252 1
a252 1
    long int			written;
@


14.8
log
@Merge of bobWinPort
@
text
@d4 1
a4 1
 * Copyright (C) 2000-2005 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.7 2005/12/09 03:17:44 brlcad Exp $ (BRL)";
@


14.7
log
@remove dead #if 0'd code -- regardless, importing an object from disk shouldn't imply creating the object if it doesn't exist..
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.6 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
a69 3
/* defined in librt/db5_bin.c */
extern void rt_binunif_dump();

@


14.6
log
@trailing ws
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.5 2005/05/28 02:14:51 brlcad Exp $ (BRL)";
a150 19

#if 0
	/* Update the in-core directory */
	if( (dp = db_diradd( dbip, argv[1], -1, 0, 0, NULL ))
		== DIR_NULL ) {
	  Tcl_AppendResult(interp, "An error has occured while adding '",
			   argv[1], "' to the database.\n", (char *)NULL);
	  TCL_ERROR_RECOVERY_SUGGESTION;
	  return TCL_ERROR;
	}

	BU_GETSTRUCT( comb, rt_comb_internal );
	comb->magic = RT_COMB_MAGIC;
	bu_vls_init( &comb->shader );
	bu_vls_init( &comb->material );
	comb->region_id = -1;
	comb->tree = TREE_NULL;
#endif

@


14.5
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d29 1
a29 1
 *  
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.4 2005/05/04 03:27:58 brlcad Exp $ (BRL)";
d308 1
a308 1
    if ( rt_db_get_internal5( &intern, dp, dbip, NULL, &rt_uniresource) 
d327 1
a327 1
		if( (fd = creat( argv[1], _S_IREAD | _S_IWRITE  )) == -1 ) { 
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
 *
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d308 1
a308 1
    if ( rt_db_get_internal5( &intern, dp, dbip, NULL, &rt_uniresource)
d327 1
a327 1
		if( (fd = creat( argv[1], _S_IREAD | _S_IWRITE  )) == -1 ) {
@


14.5.2.1
log
@Mods for windows port
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.5 2005/05/28 02:14:51 brlcad Exp $ (BRL)";
d70 3
@


14.4
log
@cast stat size to a safe type for printing/saving in case off_t is a 64bit type in st_size otherwise the read can fail
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.3 2005/01/30 20:31:05 brlcad Exp $ (BRL)";
a39 2


d41 2
a42 2
#ifndef WIN32
#include <pwd.h>
d48 1
a48 1
#include <string.h>
d50 1
a50 1
#include <strings.h>
d55 2
a56 2
#ifndef WIN32
#include <unistd.h>
d324 1
a324 1
#ifndef WIN32
@


14.3
log
@update copyright to 2005
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/bodyio.c,v 14.2 2004/12/21 04:17:26 butler Exp $ (BRL)";
d187 5
a191 2
    if (RT_G_DEBUG & DEBUG_VOL)
	    bu_log ("File '%s' is %d bytes long\n", argv[2], stat_buf.st_size);
d216 1
a216 1
	    bip->u.uint8 = (unsigned char *) bu_malloc(stat_buf.st_size, "binunif");
d220 1
a220 1
	    gotten = read( fd, (void *) (bip->u.uint8), stat_buf.st_size);
@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2004 United States Government as represented by
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/bodyio.c,v 14.1 2004/11/16 19:42:17 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			B O D Y I O . C
a32 10
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Pacakge" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 2000-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.

d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/bodyio.c,v 1.4 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/bodyio.c,v 1.3 2004/08/02 23:01:51 morrison Exp $ (BRL)";
d422 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/bodyio.c,v 1.2 2004/06/08 22:04:26 morrison Exp $ (BRL)";
d40 1
a40 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d29 1
a29 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/bodyio.c,v 1.22 2004/05/10 15:30:48 erikg Exp $ (BRL)";
a61 1
#include "externs.h"
@

