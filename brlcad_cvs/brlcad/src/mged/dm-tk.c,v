head	14.7;
access;
symbols
	rel-7-10-4:14.5.2.1
	STABLE:14.5.0.2
	rel-7-10-2:14.5
	rel-7-10-0:14.4
	rel-7-8-4:14.1;
locks; strict;
comment	@ * @;


14.7
date	2007.12.02.22.34.22;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.09.15.16.23.16;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2007.04.23.13.30.20;	author joevalleyfield;	state Exp;
branches
	14.5.2.1;
next	14.4;

14.4
date	2007.01.27.01.41.43;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2007.01.23.01.13.41;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2006.08.10.01.40.20;	author brlcad;	state Exp;
branches;
next	;

14.5.2.1
date	2007.09.28.14.04.33;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.7
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                          D M - T K . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dm-tk.c
 *
 *  Routines specific to MGED's use of LIBDM's Tk display manager.
 *
 *  Author -
 *	Timothy Myers
 *
 *  Source -
 *	SLAD CAD Team
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dm-tk.c,v 14.6 2007/09/15 16:23:16 brlcad Exp $ (BRL)";
#endif
#include "common.h"

#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <X11/Xutil.h>

#include "tk.h"

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"
#include "dm_xvars.h"
#include "dm-tk.h"
#include "fbio.h"

#include "./ged.h"
#include "./sedit.h"
#include "./mged_dm.h"

extern int _tk_open_existing();	/* XXX TJM will be defined in libfb/if_tk.c */
extern int common_dm();			/* defined in dm-generic.c */
extern void dm_var_init(struct dm_list *initial_dm_list);		/* defined in attach.c */

static int tk_dm(int argc, char **argv);
static void dirty_hook(void);
static void zclip_hook(void);

#ifdef USE_PROTOTYPES
static Tk_GenericProc tk_doevent;
#else
static int tk_doevent();
#endif

struct bu_structparse tk_vparse[] = {
  {"%f",  1, "bound",		 DM_O(dm_bound),	dirty_hook},
  {"%d",  1, "useBound",	 DM_O(dm_boundFlag),	dirty_hook},
  {"%d",  1, "zclip",		 DM_O(dm_zclip),	zclip_hook},
  {"%d",  1, "debug",		 DM_O(dm_debugLevel),	BU_STRUCTPARSE_FUNC_NULL},
  {"",	  0, (char *)0,		 0,			BU_STRUCTPARSE_FUNC_NULL}
};

int
tk_dm_init(struct dm_list	*o_dm_list,
	  int			argc,
	  char			*argv[])
{
	struct bu_vls vls;

	dm_var_init(o_dm_list);

	/* register application provided routines */
	cmd_hook = tk_dm;

	Tk_DeleteGenericHandler(doEvent, (ClientData)NULL);
	if ((dmp = dm_open(interp, DM_TYPE_TK, argc-1, argv)) == DM_NULL)
		return TCL_ERROR;

	/* keep display manager in sync */
	dmp->dm_perspective = mged_variables->mv_perspective_mode;

	eventHandler = tk_doevent;
	Tk_CreateGenericHandler(doEvent, (ClientData)NULL);
	(void)DM_CONFIGURE_WIN(dmp);

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "mged_bind_dm %s", bu_vls_addr(&pathName));
	Tcl_Eval(interp, bu_vls_addr(&vls));
	bu_vls_free(&vls);

	return TCL_OK;
}

void
tk_fb_open(void)
{
	char *Tk_name = "/dev/tk";

	if ((fbp = (FBIO *)calloc(sizeof(FBIO), 1)) == FBIO_NULL) {
		Tcl_AppendResult(interp, "tk_dm_init: failed to allocate framebuffer memory\n",
				 (char *)NULL);
		return;
	}

	*fbp = tk_interface; /* struct copy */
	fbp->if_name = malloc((unsigned)strlen(Tk_name) + 1);
	strncpy(fbp->if_name, Tk_name, strlen(Tk_name));

	/* Mark OK by filling in magic number */
	fbp->if_magic = FB_MAGIC;

/* XXX TJM implement _tk_open_existing
	_tk_open_existing(fbp,
			   ((struct dm_xvars *)dmp->dm_vars.pub_vars)->dpy,
			   ((struct x_vars *)dmp->dm_vars.priv_vars)->pix,
			   ((struct dm_xvars *)dmp->dm_vars.pub_vars)->win,
			   ((struct dm_xvars *)dmp->dm_vars.pub_vars)->cmap,
			   ((struct dm_xvars *)dmp->dm_vars.pub_vars)->vip,
			   dmp->dm_width, dmp->dm_height,
			   ((struct x_vars *)dmp->dm_vars.priv_vars)->gc);
*/
}

/*
   This routine is being called from doEvent() to handle Expose events.
*/
static int
tk_doevent(ClientData	clientData,
	  XEvent	*eventPtr)
{
	if (eventPtr->type == Expose && eventPtr->xexpose.count == 0) {
		dirty = 1;

		/* no further processing of this event */
		return TCL_RETURN;
	}

	/* allow further processing of this event */
	return TCL_OK;
}

static int
tk_dm(int	argc,
     char	*argv[])
{
	  if (!strcmp(argv[0], "set")) {
		  struct bu_vls	vls;

		  bu_vls_init(&vls);

		  if (argc < 2) {
			  /* Bare set command, print out current settings */
			  bu_vls_struct_print2(&vls, "dm_Tk internal variables", tk_vparse, (const char *)dmp );
		  } else if (argc == 2) {
			  bu_vls_struct_item_named(&vls, tk_vparse, argv[1], (const char *)dmp, ',');
		  } else {
			  struct bu_vls tmp_vls;

			  bu_vls_init(&tmp_vls);
			  bu_vls_printf(&tmp_vls, "%s=\"", argv[1]);
			  bu_vls_from_argv(&tmp_vls, argc-2, (const char **)argv+2);
			  bu_vls_putc(&tmp_vls, '\"');
			  bu_struct_parse(&tmp_vls, tk_vparse, (char *)dmp);
			  bu_vls_free(&tmp_vls);
		  }

		  Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
		  bu_vls_free(&vls);

		  return TCL_OK;
	  }

	  return common_dm(argc, argv);
}

static void
dirty_hook(void)
{
	dirty = 1;
}

static void
zclip_hook(void)
{
	view_state->vs_vop->vo_zclip = dmp->dm_zclip;
	dirty_hook();
}
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.6
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dm-tk.c,v 14.5 2007/04/23 13:30:20 joevalleyfield Exp $ (BRL)";
d125 1
a125 1
	(void)strcpy(fbp->if_name, Tk_name);
@


14.5
log
@preliminary support for unaccelerated mgen on aqua through dm-tk

configure.ac:
        - use two levels of expansion for BRLCAD_DATA
        - enable_aqua configure option
        - move X11 ac_ macro tests from argument check section
        - rely on AC_PATH_XTRA to figure out most of what we need to know about
                where to find X
        - no longer look for libICE, libXmu, or libXsm  AC_PATH_XTRA
                populates X_PRE_LIBS with these but they seem completely unused
                right now.
        - look for opengl libs and headers in all of the places AC_PATH_XTRA
                looked for the xlibs
        - use tk's xlib headers when using tk-aqua rather than x
        - remove X11 "ugly hack"
        - include tk flags where necessary
        - remove --disable-shared from subconfigs
        - forcibly add tcl and tk build dirs to libtool wrapper scripts
libdm/Makefile.am, dm-tk.[ch], dm.h, dm-generic.c, dm_obj.c, mged/Makefile.am,
                attach.c, dm-generic.c, dm-tk.c, ged.c:
        - use lower case when referring to tk
        - add support for using dm-tk
        - include X_CFLAGS with DM_X
irprep/Makefile.am, util/Makefile.am:
        - disable build of ir-X, pl-X when there is no X
dm-X.c:
        - no need to test for HAVE_X11_XLIB here; if we don't have it we
                shouldn't be building this file
libfb/Makefile.am, if_tk.c, libfb/tcl.c:
        - build if_tk.c
        - add preliminary hooks so if_tk can be called when ready
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dm-tk.c,v 14.4 2007/01/27 01:41:43 brlcad Exp $ (BRL)";
d40 1
a41 1
#include "tk.h"
d44 1
a44 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.5.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dm-tk.c,v 14.6 2007/09/15 16:23:16 brlcad Exp $ (BRL)";
a39 1
#include <string.h>
d41 1
d44 5
a48 1
#include "tk.h"
@


14.4
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dm-tk.c,v 14.3 2007/01/23 01:13:41 brlcad Exp $ (BRL)";
a36 1
/*#ifdef DM_TK */
d57 1
d63 1
a63 1
extern int _Tk_open_existing();	/* defined in libfb/if_ogl.c */
d67 1
a67 1
static int Tk_dm(int argc, char **argv);
d72 1
a72 1
static Tk_GenericProc Tk_doevent;
d74 1
a74 1
static int Tk_doevent();
d77 1
a77 1
struct bu_structparse Tk_vparse[] = {
d86 1
a86 1
Tk_dm_init(struct dm_list	*o_dm_list,
d95 1
a95 1
	cmd_hook = Tk_dm;
d104 1
a104 1
	eventHandler = Tk_doevent;
d117 1
a117 1
debug_fb_open(void)
d119 1
a119 1
	char *Tk_name = "/dev/TK";
d122 1
a122 1
		Tcl_AppendResult(interp, "Tk_dm_init: failed to allocate framebuffer memory\n",
d134 2
a135 1
/*	_Tk_open_existing(fbp,
d150 1
a150 1
Tk_doevent(ClientData	clientData,
d165 1
a165 1
Tk_dm(int	argc,
d175 1
a175 1
			  bu_vls_struct_print2(&vls, "dm_Tk internal variables", Tk_vparse, (const char *)dmp );
d177 1
a177 1
			  bu_vls_struct_item_named(&vls, Tk_vparse, argv[1], (const char *)dmp, ',');
d185 1
a185 1
			  bu_struct_parse(&tmp_vls, Tk_vparse, (char *)dmp);
a209 1
/*#endif*/
@


14.3
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dm-tk.c,v 14.2 2007/01/20 14:36:57 brlcad Exp $ (BRL)";
d162 1
a162 1
	    
@


14.2
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d35 1
a35 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dm-tk.c,v 14.1 2006/08/10 01:40:20 brlcad Exp $ (BRL)";
@


14.1
log
@initial DM_TK mged wrapper interface to libdm's interface (written by Tim Myers) disabled from build for now
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: $ (BRL)";
@

