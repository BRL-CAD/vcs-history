head	14.11;
access;
symbols
	rel-7-10-4:14.10.2.1
	STABLE:14.10.0.2
	stable-branch:14.3
	rel-7-10-2:14.10
	rel-7-10-0:14.8
	rel-7-8-4:14.5
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.11
date	2007.09.15.16.23.17;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.07.26.01.13.58;	author brlcad;	state Exp;
branches
	14.10.2.1;
next	14.9;

14.9
date	2007.05.14.21.04.32;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.23.01.13.42;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.06;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.29;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.27;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;

14.10.2.1
date	2007.09.28.14.04.34;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                     P R E D I C T O R . C
 * BRL-CAD
 *
 * Copyright (c) 1992-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file predictor.c
 *
 *  Put a predictor frame into view, as an aid to velocity-based
 *  navigation through an MGED model.
 *
 *  Inspired by the paper "Manipulating the Future:  Predictor Based
 *  Feedback for Velocity Control in Virtual Environment Navigation"
 *  by Dale Chapman and Colin Ware, <cware@@unb.ca>, in
 *  ACM SIGGRAPH Computer Graphics Special Issue on 1992 Symposium
 *  on Interactive 3D Graphics.
 *
 *  Author -
 *	Michael John Muuss
 *
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.10 2007/07/26 01:13:58 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <string.h>
#include <math.h>

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "./ged.h"
#include "./mged_solid.h"
#include "./cmd.h"
#include "./mged_dm.h"

/*
 *			I N I T _ T R A I L
 */
static void
init_trail(struct trail *tp)
{
	tp->t_cur_index = 0;
	tp->t_nused = 0;
}

/*
 *			P U S H _ T R A I L
 *
 *  Add a new point to the end of the trail.
 */
static void
push_trail(struct trail *tp, fastf_t *pt)
{
	VMOVE( tp->t_pt[tp->t_cur_index], pt );
	if( tp->t_cur_index >= tp->t_nused )  tp->t_nused++;
	tp->t_cur_index++;
	if( tp->t_cur_index >= MAX_TRAIL )  tp->t_cur_index = 0;
}

#if 0
/*
 *			D R A W _ T R A I L
 *
 *  Draw from the most recently added point, backwards, as vectors.
 */
static void
draw_trail(vhead, tp)
struct bu_list	*vhead;
struct trail	*tp;
{
	int	i;
	int	todo = tp->t_nused;

	BU_LIST_INIT( vhead );
	if( tp->t_nused <= 0 )  return;
	if( (i = tp->t_cur_index-1) < 0 )  i = tp->t_nused-1;
	for( ; todo > 0; todo-- )  {
		if( todo == tp->t_nused )  {
			RT_ADD_VLIST( vhead, tp->t_pt[i], BN_VLIST_LINE_MOVE );
		}  else  {
			RT_ADD_VLIST( vhead, tp->t_pt[i], BN_VLIST_LINE_DRAW );
		}
		if( (--i) < 0 )  i = tp->t_nused-1;
	}
}
#endif

/*
 *			P O L Y _ T R A I L
 *
 *  Draw from the most recently added points in two trails, as polygons.
 *  Proceeds backwards.
 *  t1 should be below (lower screen Y) t2.
 */
static void
poly_trail(struct bu_list *vhead, struct trail *t1, struct trail *t2)
{
	int	i1, i2;
	int	todo = t1->t_nused;
	fastf_t	*s1, *s2;
	vect_t	right, up;
	vect_t	norm;

	if( t2->t_nused < todo )  todo = t2->t_nused;

	BU_LIST_INIT( vhead );
	if( t1->t_nused <= 0 || t1->t_nused <= 0 )  return;

	if( (i1 = t1->t_cur_index-1) < 0 )  i1 = t1->t_nused-1;
	if( (i2 = t2->t_cur_index-1) < 0 )  i2 = t2->t_nused-1;

	/* Get starting points, next to frame. */
	s1 = t1->t_pt[i1];
	s2 = t2->t_pt[i2];
	if( (--i1) < 0 )  i1 = t1->t_nused-1;
	if( (--i2) < 0 )  i2 = t2->t_nused-1;
	todo--;

	for( ; todo > 0; todo-- )  {
		/* Go from s1 to s2 to t2->t_pt[i2] to t1->t_pt[i1] */
		VSUB2( up, s1, s2 );
		VSUB2( right, t1->t_pt[i1], s1 );
		VCROSS( norm, right, up );

		RT_ADD_VLIST( vhead, norm, BN_VLIST_POLY_START );
		RT_ADD_VLIST( vhead, s1, BN_VLIST_POLY_MOVE );
		RT_ADD_VLIST( vhead, s2, BN_VLIST_POLY_DRAW );
		RT_ADD_VLIST( vhead, t2->t_pt[i2], BN_VLIST_POLY_DRAW );
		RT_ADD_VLIST( vhead, t1->t_pt[i1], BN_VLIST_POLY_DRAW );
		RT_ADD_VLIST( vhead, s1, BN_VLIST_POLY_END );

		s1 = t1->t_pt[i1];
		s2 = t2->t_pt[i2];

		if( (--i1) < 0 )  i1 = t1->t_nused-1;
		if( (--i2) < 0 )  i2 = t2->t_nused-1;
	}
}

void
predictor_init(void)
{
  register int i;

  for(i = 0; i < NUM_TRAILS; ++i)
    init_trail(&curr_dm_list->dml_trails[i]);
}

/*
 *			P R E D I C T O R _ K I L L
 */
void
predictor_kill(void)
{
  RT_FREE_VLIST(&curr_dm_list->dml_p_vlist);
  predictor_init();
}

#define TF_BORD	0.01
#define TF_X	0.14
#define TF_Y	0.07
#define TF_Z	(1.0-0.15)	/* To prevent Z clipping of TF_X */

#define TF_VL( _m, _v ) \
	{ vect_t edgevect_m; \
	MAT4X3VEC( edgevect_m, predictorXv2m, _v ); \
	VADD2( _m, framecenter_m, edgevect_m ); }

/*
 *			P R E D I C T O R _ F R A M E
 *
 *  Draw the frame itself as four polygons:
 *	ABFE, HGCD, EILH, and JFGK.
 *  The streamers will attach at edges AE, BF, GC, and HD.
 *
 *		D --------------- C
 *		|                 |
 *		H -L-----------K- G
 *		|  |           |  |
 *		|  |           |  |
 *		|  |           |  |
 *		E -I-----------J- F
 *		|                 |
 *		A --------------- B
 */
void
predictor_frame(void)
{
	int	i;
	int	nframes;
	mat_t	predictor;
	mat_t	predictorXv2m;
	point_t	m;		/* model coords */
	point_t	mA,mB,mC,mD,mE,mF,mG,mH,mI,mJ,mK,mL;
	struct bu_list	trail;
	point_t	framecenter_m;
#if 0
	point_t	framecenter_v;
#endif
	point_t	center_m;
	vect_t	delta_v;
	vect_t	right, up;
	vect_t	norm;

	if( view_state->vs_rateflag_rotate == 0 &&
	    view_state->vs_rateflag_tran == 0 &&
	    view_state->vs_rateflag_scale == 0 ){
	  predictor_kill();
	  return;
	}

	RT_FREE_VLIST(&curr_dm_list->dml_p_vlist);

	/* Advance into the future */
	nframes = (int)(mged_variables->mv_predictor_advance / frametime);
	if( nframes < 1 )  nframes = 1;

	/* Build view2model matrix for the future time */
	MAT_IDN( predictor );
	for( i=0; i < nframes; i++ )  {
		bn_mat_mul2( view_state->vs_ModelDelta, predictor );
	}
	bn_mat_mul(predictorXv2m, predictor, view_state->vs_vop->vo_view2model);
	MAT_DELTAS_GET_NEG(center_m, view_state->vs_vop->vo_center);

	MAT4X3PNT( framecenter_m, predictor, center_m );
#if 0
	MAT4X3PNT( framecenter_v, view_state->vs_model2view, framecenter_m );
#endif

	/*
	 * Draw the frame around the point framecenter_v.
	 */

	/* Centering dot */
	VSETALL( delta_v, 0.0 );
	TF_VL( m, delta_v );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, m, BN_VLIST_LINE_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, m, BN_VLIST_LINE_DRAW );

	/* The exterior rectangle */
	VSET( delta_v, -TF_X, -TF_Y, 0.0 );
	TF_VL( mA, delta_v );

	VSET( delta_v,  TF_X, -TF_Y, 0.0 );
	TF_VL( mB, delta_v );

	VSET( delta_v,  TF_X,  TF_Y, 0.0 );
	TF_VL( mC, delta_v );

	VSET( delta_v, -TF_X,  TF_Y, 0.0 );
	TF_VL( mD, delta_v );

	/* The EFGH rectangle */
	VSET( delta_v, -TF_X, -TF_Y+TF_BORD, 0.0 );
	TF_VL( mE, delta_v );

	VSET( delta_v,  TF_X, -TF_Y+TF_BORD, 0.0 );
	TF_VL( mF, delta_v );

	VSET( delta_v,  TF_X,  TF_Y-TF_BORD, 0.0 );
	TF_VL( mG, delta_v );

	VSET( delta_v, -TF_X,  TF_Y-TF_BORD, 0.0 );
	TF_VL( mH, delta_v );

	/* The IJKL rectangle */
	VSET( delta_v, -TF_X+TF_BORD, -TF_Y+TF_BORD, 0.0 );
	TF_VL( mI, delta_v );

	VSET( delta_v,  TF_X-TF_BORD, -TF_Y+TF_BORD, 0.0 );
	TF_VL( mJ, delta_v );

	VSET( delta_v,  TF_X-TF_BORD,  TF_Y-TF_BORD, 0.0 );
	TF_VL( mK, delta_v );

	VSET( delta_v, -TF_X+TF_BORD,  TF_Y-TF_BORD, 0.0 );
	TF_VL( mL, delta_v );

	VSUB2( right, mB, mA );
	VSUB2( up, mD, mA );
	VCROSS( norm, right, up );
	VUNITIZE(norm);

	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, norm, BN_VLIST_POLY_START );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mA, BN_VLIST_POLY_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mB, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mF, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mE, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mA, BN_VLIST_POLY_END );

	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, norm, BN_VLIST_POLY_START );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mE, BN_VLIST_POLY_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mI, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mL, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mH, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mE, BN_VLIST_POLY_END );

	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, norm, BN_VLIST_POLY_START );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mH, BN_VLIST_POLY_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mG, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mC, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mD, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mH, BN_VLIST_POLY_END );

	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, norm, BN_VLIST_POLY_START );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mJ, BN_VLIST_POLY_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mF, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mG, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mK, BN_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mJ, BN_VLIST_POLY_END );

	push_trail( &curr_dm_list->dml_trails[0], mA );
	push_trail( &curr_dm_list->dml_trails[1], mB );
	push_trail( &curr_dm_list->dml_trails[2], mC );
	push_trail( &curr_dm_list->dml_trails[3], mD );

	push_trail( &curr_dm_list->dml_trails[4], mE );
	push_trail( &curr_dm_list->dml_trails[5], mF );
	push_trail( &curr_dm_list->dml_trails[6], mG );
	push_trail( &curr_dm_list->dml_trails[7], mH );

	/* Draw the trails */
	poly_trail( &trail, &curr_dm_list->dml_trails[0], &curr_dm_list->dml_trails[4] );
	BU_LIST_APPEND_LIST(&curr_dm_list->dml_p_vlist, &trail);
	poly_trail( &trail, &curr_dm_list->dml_trails[1], &curr_dm_list->dml_trails[5] );
	BU_LIST_APPEND_LIST(&curr_dm_list->dml_p_vlist, &trail);
	poly_trail( &trail, &curr_dm_list->dml_trails[6], &curr_dm_list->dml_trails[2] );
	BU_LIST_APPEND_LIST(&curr_dm_list->dml_p_vlist, &trail);
	poly_trail( &trail, &curr_dm_list->dml_trails[7], &curr_dm_list->dml_trails[3] );
	BU_LIST_APPEND_LIST(&curr_dm_list->dml_p_vlist, &trail);

	/* Done */
	MAT_IDN( view_state->vs_ModelDelta );
}

/*
 *			P R E D I C T O R _ H O O K
 *
 *  Called from set.c when the predictor variables are modified.
 */
void
predictor_hook(void)
{
  if(mged_variables->mv_predictor > 0)
    predictor_init();
  else
    predictor_kill();

  dirty = 1;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.9 2007/05/14 21:04:32 brlcad Exp $ (BRL)";
a40 1

a41 1
#ifdef HAVE_STRING_H
d43 1
a43 3
#else
#include <strings.h>
#endif
a44 1
#include <math.h>
@


14.10.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.11 2007/09/15 16:23:17 brlcad Exp $ (BRL)";
d41 1
d43 1
d45 4
a49 1

@


14.9
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@a33 4
 *  Source -
 *	SECAD/VLD Computing Consortium
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.8 2007/01/27 01:41:44 brlcad Exp $ (BRL)";
@


14.8
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.7 2007/01/23 01:13:42 brlcad Exp $ (BRL)";
d107 1
a107 1
			RT_ADD_VLIST( vhead, tp->t_pt[i], RT_VLIST_LINE_MOVE );
d109 1
a109 1
			RT_ADD_VLIST( vhead, tp->t_pt[i], RT_VLIST_LINE_DRAW );
d153 6
a158 6
		RT_ADD_VLIST( vhead, norm, RT_VLIST_POLY_START );
		RT_ADD_VLIST( vhead, s1, RT_VLIST_POLY_MOVE );
		RT_ADD_VLIST( vhead, s2, RT_VLIST_POLY_DRAW );
		RT_ADD_VLIST( vhead, t2->t_pt[i2], RT_VLIST_POLY_DRAW );
		RT_ADD_VLIST( vhead, t1->t_pt[i1], RT_VLIST_POLY_DRAW );
		RT_ADD_VLIST( vhead, s1, RT_VLIST_POLY_END );
d266 2
a267 2
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, m, RT_VLIST_LINE_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, m, RT_VLIST_LINE_DRAW );
d313 27
a339 27
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, norm, RT_VLIST_POLY_START );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mA, RT_VLIST_POLY_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mB, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mF, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mE, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mA, RT_VLIST_POLY_END );

	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, norm, RT_VLIST_POLY_START );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mE, RT_VLIST_POLY_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mI, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mL, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mH, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mE, RT_VLIST_POLY_END );

	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, norm, RT_VLIST_POLY_START );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mH, RT_VLIST_POLY_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mG, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mC, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mD, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mH, RT_VLIST_POLY_END );

	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, norm, RT_VLIST_POLY_START );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mJ, RT_VLIST_POLY_MOVE );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mF, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mG, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mK, RT_VLIST_POLY_DRAW );
	RT_ADD_VLIST( &curr_dm_list->dml_p_vlist, mJ, RT_VLIST_POLY_END );
@


14.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.6 2007/01/20 14:36:57 brlcad Exp $ (BRL)";
a45 1

@


14.6
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d40 1
a40 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.5 2006/01/18 06:46:19 brlcad Exp $ (BRL)";
@


14.5
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1992-2006 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.4 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1992-2005 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.3 2005/01/30 20:31:06 brlcad Exp $ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d34 1
a34 1
 *  
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/predictor.c,v 14.2 2004/12/21 04:17:27 butler Exp $ (BRL)";
d205 1
a205 1
 *	
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d34 1
a34 1
 *
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d205 1
a205 1
 *
@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 1992-2004 United States Government as represented by
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/predictor.c,v 14.1 2004/11/16 19:42:17 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			P R E D I C T O R . C
a38 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1992-2004 by the United States Army.
 *	All rights reserved.
d41 1
a41 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/predictor.c,v 1.4 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/predictor.c,v 1.3 2004/08/02 23:01:51 morrison Exp $ (BRL)";
d367 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/predictor.c,v 1.2 2004/06/08 22:04:29 morrison Exp $ (BRL)";
d34 1
a34 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d29 1
a29 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/predictor.c,v 11.29 2004/05/10 15:30:48 erikg Exp $ (BRL)";
a43 1
#include "externs.h"
@

