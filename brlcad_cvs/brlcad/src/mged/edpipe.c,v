head	14.10;
access;
symbols
	rel-7-10-4:14.9.2.1
	STABLE:14.9.0.2
	stable-branch:14.3
	rel-7-10-2:14.9
	rel-7-10-0:14.8
	rel-7-8-4:14.5
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.10
date	2007.09.15.16.23.16;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.07.26.01.13.58;	author brlcad;	state Exp;
branches
	14.9.2.1;
next	14.8;

14.8
date	2007.01.27.01.41.43;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.23.01.13.41;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.06;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.27;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.23;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.9.2.1
date	2007.09.28.14.04.34;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.10
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                        E D P I P E . C
 * BRL-CAD
 *
 * Copyright (c) 1995-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file edpipe.c
 *
 * Functions -
 *	split_pipept - split a pipe segment at a given point
 *	find_pipept_nearest_pt - find which segment of a pipe is nearest
 *			the ray from "pt" in the viewing direction (for segment selection in MGED)
 *
 *  Author -
 *	John R. Anderson
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.9 2007/07/26 01:13:58 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <stdio.h>
#include <math.h>
#include <string.h>

#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"
#include "nurb.h"
#include "rtgeom.h"
#include "wdb.h"

#include "./ged.h"
#include "./mged_solid.h"
#include "./sedit.h"
#include "./mged_dm.h"

extern struct bn_tol		mged_tol;	/* from ged.c */

void
split_pipept(struct bu_list *pipe_hd, struct wdb_pipept *ps, fastf_t *new_pt)
{
}

void
pipe_scale_od( struct rt_db_internal *db_int, fastf_t scale)
{
	struct wdb_pipept *ps;
	struct rt_pipe_internal *pipe=(struct rt_pipe_internal *)db_int->idb_ptr;

	RT_PIPE_CK_MAGIC( pipe );

	/* check that this can be done */
	for( BU_LIST_FOR( ps, wdb_pipept, &pipe->pipe_segs_head ) )
	{
		fastf_t tmp_od;

		if( scale < 0.0 )
			tmp_od = (-scale );
		else
			tmp_od = ps->pp_od*scale;
		if( ps->pp_id > tmp_od )
		{
		  Tcl_AppendResult(interp, "Cannot make OD less than ID\n", (char *)NULL);
		  return;
		}
		if( tmp_od > 2.0*ps->pp_bendradius )
		{
		  Tcl_AppendResult(interp, "Cannot make outer radius greater than bend radius\n", (char *)NULL);
		  return;
		}
	}

	for( BU_LIST_FOR( ps, wdb_pipept, &pipe->pipe_segs_head ) )
		ps->pp_od *= scale;
}

void
pipe_scale_id( struct rt_db_internal *db_int, fastf_t scale )
{
	struct wdb_pipept *ps;
	struct rt_pipe_internal *pipe=(struct rt_pipe_internal *)db_int->idb_ptr;
	fastf_t tmp_id;

	RT_PIPE_CK_MAGIC( pipe );

	/* check that this can be done */
	for( BU_LIST_FOR( ps, wdb_pipept, &pipe->pipe_segs_head ) )
	{
		if( scale > 0.0 )
			tmp_id = ps->pp_id*scale;
		else
			tmp_id = (-scale);
		if( ps->pp_od < tmp_id )
		{
		  Tcl_AppendResult(interp, "Cannot make ID greater than OD\n", (char *)NULL);
		  return;
		}
		if( tmp_id > 2.0*ps->pp_bendradius )
		{
		  Tcl_AppendResult(interp, "Cannot make inner radius greater than bend radius\n", (char *)NULL);
		  return;
		}
	}

	for( BU_LIST_FOR( ps, wdb_pipept, &pipe->pipe_segs_head ) )
	{
		if( scale > 0.0 )
			ps->pp_id *= scale;
		else
			ps->pp_id = (-scale);
	}
}

void
pipe_seg_scale_od( struct wdb_pipept *ps, fastf_t scale )
{
	fastf_t tmp_od;

	BU_CKMAG( ps, WDB_PIPESEG_MAGIC, "pipe segment" );

	/* need to check that the new OD is not less than ID
	 * of any affected segment.
	 */
	if( scale < 0.0 )
		tmp_od = (-scale);
	else
		tmp_od = scale*ps->pp_od;
	if( ps->pp_id > tmp_od )
	{
	  Tcl_AppendResult(interp, "Cannot make OD smaller than ID\n", (char *)NULL);
	  return;
	}
	if( tmp_od > 2.0*ps->pp_bendradius )
	{
	  Tcl_AppendResult(interp, "Cannot make outer radius greater than bend radius\n", (char *)NULL);
	  return;
	}

	if( scale > 0.0 )
		ps->pp_od *= scale;
	else
		ps->pp_od = (-scale);
}

void
pipe_seg_scale_id( struct wdb_pipept *ps, fastf_t scale )
{
	fastf_t tmp_id;

	BU_CKMAG( ps, WDB_PIPESEG_MAGIC, "pipe segment" );

	/* need to check that the new ID is not greater than OD */
	if( scale > 0.0 )
		tmp_id = scale*ps->pp_id;
	else
		tmp_id = (-scale);
	if( ps->pp_od < tmp_id )
	{
	  Tcl_AppendResult(interp, "Cannot make ID greater than OD\n", (char *)NULL);
	  return;
	}
	if( tmp_id > 2.0*ps->pp_bendradius )
	{
	  Tcl_AppendResult(interp, "Cannot make inner radius greater than bend radius\n", (char *)NULL);
	  return;
	}

	if( scale > 0.0 )
		ps->pp_id *= scale;
	else
		ps->pp_id = (-scale);
}

void
pipe_seg_scale_radius( struct wdb_pipept *ps, fastf_t scale )
{
	fastf_t old_radius;
	struct wdb_pipept *head;

	BU_CKMAG( ps, WDB_PIPESEG_MAGIC, "pipe point" );

	head = ps;
	while( head->l.magic != BU_LIST_HEAD_MAGIC )
		head = BU_LIST_NEXT( wdb_pipept, &head->l );

	/* make sure we can make this change */
	old_radius = ps->pp_bendradius;
	if( scale > 0.0 )
		ps->pp_bendradius *= scale;
	else
		ps->pp_bendradius = (-scale);

	if( ps->pp_bendradius < ps->pp_od * 0.5 )
	{
	  Tcl_AppendResult(interp, "Cannot make bend radius less than pipe outer radius\n", (char *)NULL);
	  ps->pp_bendradius = old_radius;
	  return;
	}

	if( rt_pipe_ck( &head->l ) )
	{
		/* won't work, go back to original radius */
		ps->pp_bendradius = old_radius;
		return;
	}

}

void
pipe_scale_radius( struct rt_db_internal *db_int, fastf_t scale )
{
	struct bu_list head;
	struct wdb_pipept *old_ps,*new_ps;
	struct rt_pipe_internal *pipe=(struct rt_pipe_internal *)db_int->idb_ptr;

	RT_CK_DB_INTERNAL( db_int );
	RT_PIPE_CK_MAGIC( pipe );

	/* make a quick check for minimum bend radius */
	for( BU_LIST_FOR( old_ps, wdb_pipept, &pipe->pipe_segs_head ) )
	{
		if( scale < 0.0 )
		{
			if( (-scale) < old_ps->pp_od * 0.5 )
			{
			  Tcl_AppendResult(interp, "Cannot make bend radius less than pipe outer radius\n", (char *)NULL);
			  return;
			}
		}
		else
		{
			if( old_ps->pp_bendradius * scale < old_ps->pp_od * 0.5 )
			{
			  Tcl_AppendResult(interp, "Cannot make bend radius less than pipe outer radius\n", (char *)NULL);
			  return;
			}
		}
	}

	/* make temporary copy of this pipe solid */
	BU_LIST_INIT( &head );
	for( BU_LIST_FOR( old_ps, wdb_pipept, &pipe->pipe_segs_head ) )
	{
		BU_GETSTRUCT( new_ps, wdb_pipept );
		*new_ps = (*old_ps);
		BU_LIST_APPEND( &head, &new_ps->l );
	}

	/* make the desired editing changes to the copy */
	for( BU_LIST_FOR( new_ps, wdb_pipept, &head ) )
	{
		if( scale < 0.0 )
			new_ps->pp_bendradius = (-scale);
		else
			new_ps->pp_bendradius *= scale;
	}

	/* check if the copy is O.K. */
	if( rt_pipe_ck( &head ) )
	{
		/* won't work, go back to original */
		while( BU_LIST_NON_EMPTY( &head ) )
		{
			new_ps = BU_LIST_FIRST( wdb_pipept, &head );
			BU_LIST_DEQUEUE( &new_ps->l );
			bu_free( (genptr_t)new_ps, "pipe_scale_radius: new_ps" );
		}
		return;
	}

	/* free temporary pipe solid */
	while( BU_LIST_NON_EMPTY( &head ) )
	{
		new_ps = BU_LIST_FIRST( wdb_pipept, &head );
		BU_LIST_DEQUEUE( &new_ps->l );
		bu_free( (genptr_t)new_ps, "pipe_scale_radius: new_ps" );
	}

	/* make changes to the original */
	for( BU_LIST_FOR( old_ps, wdb_pipept, &pipe->pipe_segs_head ) )
	{
		if( scale < 0.0 )
			old_ps->pp_bendradius = (-scale);
		else
			old_ps->pp_bendradius *= scale;
	}

}


struct wdb_pipept *
find_pipept_nearest_pt( const struct bu_list *pipe_hd, const point_t pt )
{
	struct wdb_pipept *ps;
	struct wdb_pipept *nearest=(struct wdb_pipept *)NULL;
	struct bn_tol tmp_tol;
	fastf_t min_dist = MAX_FASTF;
	vect_t dir,work;

	tmp_tol.magic = BN_TOL_MAGIC;
	tmp_tol.dist = 0.0;
	tmp_tol.dist_sq = tmp_tol.dist * tmp_tol.dist;
	tmp_tol.perp = 0.0;
	tmp_tol.para = 1.0 - tmp_tol.perp;

	/* get a direction vector in model space corresponding to z-direction in view */
	VSET( work, 0.0, 0.0, 1.0 )
	MAT4X3VEC(dir, view_state->vs_vop->vo_view2model, work)

	for( BU_LIST_FOR( ps, wdb_pipept, pipe_hd ) )
	{
		fastf_t dist;

		dist = bn_dist_line3_pt3( pt, dir, ps->pp_coord );
		if( dist < min_dist )
		{
			min_dist = dist;
			nearest = ps;
		}
	}
	return( nearest );
}

struct wdb_pipept *
add_pipept( struct rt_pipe_internal *pipe, struct wdb_pipept *pp, const point_t new_pt )
{
	struct wdb_pipept *last;
	struct wdb_pipept *new;

	RT_PIPE_CK_MAGIC( pipe );
	if( pp )
		BU_CKMAG( pp, WDB_PIPESEG_MAGIC, "pipe point" );

	if( pp )
		last = pp;
	else
	{
		/* add new point to end of pipe solid */
		last = BU_LIST_LAST( wdb_pipept, &pipe->pipe_segs_head );
		if( last->l.magic == BU_LIST_HEAD_MAGIC )
		{
			BU_GETSTRUCT( new, wdb_pipept );
			new->l.magic = WDB_PIPESEG_MAGIC;
			new->pp_od = 30.0;
			new->pp_id = 0.0;
			new->pp_bendradius = 40.0;
			VMOVE( new->pp_coord, new_pt );
			BU_LIST_INSERT( &pipe->pipe_segs_head, &new->l );
			return( new );
		}
	}

	/* build new point */
	BU_GETSTRUCT( new, wdb_pipept );
	new->l.magic = WDB_PIPESEG_MAGIC;
	new->pp_od = last->pp_od;
	new->pp_id = last->pp_id;
	new->pp_bendradius = last->pp_bendradius;
	VMOVE( new->pp_coord, new_pt );

	if( !pp )	/* add to end of pipe solid */
		BU_LIST_INSERT( &pipe->pipe_segs_head, &new->l )
	else		/* append after current point */
		BU_LIST_APPEND( &pp->l, &new->l )

	if( rt_pipe_ck( &pipe->pipe_segs_head ) )
	{
		/* won't work here, so refuse to do it */
		BU_LIST_DEQUEUE( &new->l );
		bu_free( (genptr_t)new, "add_pipept: new " );
		return( pp );
	}
	else
		return( new );
}


void
ins_pipept( struct rt_pipe_internal *pipe, struct wdb_pipept *pp, const point_t new_pt )
{
	struct wdb_pipept *first;
	struct wdb_pipept *new;

	RT_PIPE_CK_MAGIC( pipe );
	if( pp )
		BU_CKMAG( pp, WDB_PIPESEG_MAGIC, "pipe point" );

	if( pp )
		first = pp;
	else
	{
		/* insert new point at start of pipe solid */
		first = BU_LIST_FIRST( wdb_pipept, &pipe->pipe_segs_head );
		if( first->l.magic == BU_LIST_HEAD_MAGIC )
		{
			BU_GETSTRUCT( new, wdb_pipept );
			new->l.magic = WDB_PIPESEG_MAGIC;
			new->pp_od = 30.0;
			new->pp_id = 0.0;
			new->pp_bendradius = 40.0;
			VMOVE( new->pp_coord, new_pt );
			BU_LIST_APPEND( &pipe->pipe_segs_head, &new->l );
			return;
		}
	}

	/* build new point */
	BU_GETSTRUCT( new, wdb_pipept );
	new->l.magic = WDB_PIPESEG_MAGIC;
	new->pp_od = first->pp_od;
	new->pp_id = first->pp_id;
	new->pp_bendradius = first->pp_bendradius;
	VMOVE( new->pp_coord, new_pt );

	if( !pp )	/* add to start of pipe */
		BU_LIST_APPEND( &pipe->pipe_segs_head, &new->l )
	else		/* insert before current point */
		BU_LIST_INSERT( &pp->l, &new->l )

	if( rt_pipe_ck( &pipe->pipe_segs_head ) )
	{
		/* won't work here, so refuse to do it */
		BU_LIST_DEQUEUE( &new->l );
		bu_free( (genptr_t)new, "ins_pipept: new " );
	}
}

struct wdb_pipept *
del_pipept( struct wdb_pipept *ps )
{
	struct wdb_pipept *next;
	struct wdb_pipept *prev;
	struct wdb_pipept *head;

	BU_CKMAG( ps, WDB_PIPESEG_MAGIC, "pipe segment" );

	head = ps;
	while( head->l.magic != BU_LIST_HEAD_MAGIC )
		head = BU_LIST_NEXT( wdb_pipept, &head->l );

	next = BU_LIST_NEXT( wdb_pipept, &ps->l );
	if( next->l.magic == BU_LIST_HEAD_MAGIC )
		next = (struct wdb_pipept *)NULL;

	prev = BU_LIST_PREV( wdb_pipept, &ps->l );
	if( prev->l.magic == BU_LIST_HEAD_MAGIC )
		prev = (struct wdb_pipept *)NULL;

	if( !prev && !next )
	{
	  Tcl_AppendResult(interp, "Cannot delete last point in pipe\n", (char *)NULL);
	  return( ps );
	}

	BU_LIST_DEQUEUE( &ps->l );

	if( rt_pipe_ck( &head->l ) )
	{
	  Tcl_AppendResult(interp, "Cannot delete this point, it will result in an illegal pipe\n", (char *)NULL);
		if( next )
			BU_LIST_INSERT( &next->l, &ps->l )
		else if( prev )
			BU_LIST_APPEND( &prev->l, &ps->l )
		else
			BU_LIST_INSERT( &head->l, &ps->l )

		return( ps );
	}
	else
		bu_free( (genptr_t)ps, "del_pipept: ps" );

	if( prev )
		return( prev );
	else
		return( next );

}

void
move_pipept( struct rt_pipe_internal *pipe, struct wdb_pipept *ps, const point_t new_pt )
{
	point_t old_pt;

	RT_PIPE_CK_MAGIC( pipe );
	BU_CKMAG( ps, WDB_PIPESEG_MAGIC, "pipe segment" );

	VMOVE( old_pt, ps->pp_coord );

	VMOVE( ps->pp_coord, new_pt );
	if( rt_pipe_ck( &pipe->pipe_segs_head ) )
	{
	  Tcl_AppendResult(interp, "Cannot move point there\n", (char *)NULL);
	  VMOVE( ps->pp_coord, old_pt );
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.9
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.8 2007/01/27 01:41:43 brlcad Exp $ (BRL)";
a36 1

a38 1
#ifdef HAVE_STRING_H
a39 3
#else
#include <strings.h>
#endif
@


14.9.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.10 2007/09/15 16:23:16 brlcad Exp $ (BRL)";
d37 1
d40 1
d42 3
@


14.8
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a28 4
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
d32 1
a32 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.7 2007/01/23 01:13:41 brlcad Exp $ (BRL)";
@


14.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.6 2007/01/20 14:36:57 brlcad Exp $ (BRL)";
a41 1

@


14.6
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d36 1
a36 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.5 2006/01/18 06:46:19 brlcad Exp $ (BRL)";
@


14.5
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2006 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.4 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1995-2005 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.3 2005/01/30 20:31:06 brlcad Exp $ (BRL)";
@


14.3
log
@update copyright to 2005
@
text
@d30 1
a30 1
 *  
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/edpipe.c,v 14.2 2004/12/21 04:17:27 butler Exp $ (BRL)";
d51 1
a51 1
	
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d30 1
a30 1
 *
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d51 1
a51 1

@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2004 United States Government as represented by
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/edpipe.c,v 14.1 2004/11/16 19:42:17 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			E D P I P E . C
a33 9
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Pacakge" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1995-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
d37 1
a37 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/edpipe.c,v 1.4 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/edpipe.c,v 1.3 2004/08/02 23:01:51 morrison Exp $ (BRL)";
d514 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/edpipe.c,v 1.2 2004/06/08 22:04:27 morrison Exp $ (BRL)";
d36 1
a36 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d30 1
a30 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/edpipe.c,v 1.32 2004/05/10 15:30:48 erikg Exp $ (BRL)";
a44 1
#include "externs.h"
@

