head	1.6;
access;
symbols
	rel-7-10-4:1.6
	STABLE:1.6.0.2
	rel-7-10-2:1.6
	rel-7-10-0:1.6
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.3.0.2
	help:1.3
	temp_tag:1.3
	postmerge-20051223-bobWinPort:1.3
	premerge-20051223-bobWinPort:1.3
	rel-7-6-6:1.3
	rel-7-6-branch:1.2.0.2
	rel-7-6-4:1.2;
locks; strict;
comment	@ * @;


1.6
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.23.01.13.43;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.21.07.40.57;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.18.20.14.39;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.29.23.00.05;	author brlcad;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.10.29.21.28.58;	author brlcad;	state Exp;
branches;
next	;

1.2.2.1
date	2005.10.29.23.00.05;	author brlcad;	state dead;
branches;
next	1.2.2.2;

1.2.2.2
date	2005.11.13.17.45.01;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@/*                          M A I N . C
 * BRL-CAD
 *
 * Copyright (c) 2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file main.c
 *
 * Author -
 *   Christopher Sean Morrison
 */

#include <stdio.h>

#include "./count.h"
#include "./points_parse.h"

extern FILE *yyin;
extern int yyparse (void);


#if 0
int main(int argc, char *argv[])
#else

#  include "tcl.h"
ClientData *cdata;
Tcl_Interp *twerp;

int parse_point_file(ClientData clientData, Tcl_Interp *interp, int argc, char *argv[])
#endif
{
    long int datapoints;

    if (argc > 0) {
	printf("Reading from %s\n", argv[0]);
	yyin = fopen(argv[0], "r");
	if (!yyin)
	{
	    perror("Unable to open file");
	    return -1;
	}

    } else {
	printf("Reading from stdin\n");
	yyin = stdin;
    }

    cdata = &clientData;
    twerp = interp;

    while (!feof(yyin)) {
	yyparse();
    }

    if (yyin)
    {
	fclose(yyin);
    }

    datapoints =
	count_get_token(PLATE) +
	count_get_token(ARB) +
	count_get_token(SYMMETRY) +
	count_get_token(POINTS) +
	count_get_token(CYLINDER) +
	count_get_token(PIPE);

    printf("\nSUMMARY:\n\n");
    printf("PLATE lines: %ld\n", count_get_token(PLATE));
    printf("ARB lines: %ld\n", count_get_token(ARB));
    printf("SYMMETRY lines: %ld\n", count_get_token(SYMMETRY));
    printf("POINTS lines: %ld\n", count_get_token(POINTS));
    printf("CYLINDER lines: %ld\n", count_get_token(CYLINDER));
    printf("PIPE lines: %ld\n", count_get_token(PIPE));

    printf("\n\tData points: %ld\n\tComments: %ld\n\tLines: %ld\n\tWords: %ld\n\tBytes: %ld\n\n", datapoints, count_get_token(COMMENT), get_lines(), get_words(), get_bytes());


    return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.5
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d56 1
a56 1
	    
d68 1
a68 1
    
d74 1
a74 1
    datapoints = 
a92 1
    
@


1.4
log
@missing header
@
text
@d9 1
a9 1
 * as published by the Free Software Foundation.
@


1.3
log
@close the dang file and make sure it opened before hopping into feof so we don't crash
@
text
@d1 25
@


1.2
log
@header file is named points_parse.h now
@
text
@d26 6
d43 5
d67 2
@


1.2.2.1
log
@file main.c was added on branch rel-7-6-branch on 2005-11-13 17:45:01 +0000
@
text
@d1 67
@


1.2.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 67
#include <stdio.h>

#include "./count.h"
#include "./points_parse.h"

extern FILE *yyin;
extern int yyparse (void);


#if 0
int main(int argc, char *argv[])
#else

#  include "tcl.h"
ClientData *cdata;
Tcl_Interp *twerp;

int parse_point_file(ClientData clientData, Tcl_Interp *interp, int argc, char *argv[])
#endif
{
    long int datapoints;

    if (argc > 0) {
	printf("Reading from %s\n", argv[0]);
	yyin = fopen(argv[0], "r");
    } else {
	printf("Reading from stdin\n");
	yyin = stdin;
    }

    cdata = &clientData;
    twerp = interp;

    while (!feof(yyin)) {
	yyparse();
    }

    datapoints = 
	count_get_token(PLATE) +
	count_get_token(ARB) +
	count_get_token(SYMMETRY) +
	count_get_token(POINTS) +
	count_get_token(CYLINDER) +
	count_get_token(PIPE);

    printf("\nSUMMARY:\n\n");
    printf("PLATE lines: %ld\n", count_get_token(PLATE));
    printf("ARB lines: %ld\n", count_get_token(ARB));
    printf("SYMMETRY lines: %ld\n", count_get_token(SYMMETRY));
    printf("POINTS lines: %ld\n", count_get_token(POINTS));
    printf("CYLINDER lines: %ld\n", count_get_token(CYLINDER));
    printf("PIPE lines: %ld\n", count_get_token(PIPE));

    printf("\n\tData points: %ld\n\tComments: %ld\n\tLines: %ld\n\tWords: %ld\n\tBytes: %ld\n\n", datapoints, count_get_token(COMMENT), get_lines(), get_words(), get_bytes());

    return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.1
log
@initial files for a points file parser that reads them all in and processes groups of them at a time based on recognized line labels.  data collected in a requisite order may then be automatically turned into geometry using a tclscript helper code.
@
text
@d4 1
a4 1
#include "./points.h"
@

