head	1.6;
access;
symbols
	rel-7-10-4:1.5.2.1
	STABLE:1.5.0.2
	rel-7-10-2:1.5
	rel-7-10-0:1.5
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-branch:1.1.0.2
	rel-7-6-4:1.1;
locks; strict;
comment	@ * @;


1.6
date	2007.09.18.16.51.48;	author erikgreenwald;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.27.01.41.44;	author brlcad;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2007.01.23.01.13.43;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.06.46.23;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.29.21.30.02;	author brlcad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.10.29.21.30.02;	author brlcad;	state dead;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.11.13.17.45.01;	author brlcad;	state Exp;
branches;
next	;

1.5.2.1
date	2007.09.28.14.04.36;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.6
log
@explicitely set id's type as int
@
text
@/*                         C O U N T . C
 * BRL-CAD
 *
 * Copyright (c) 2005-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file count.c
 *
 * Basic counting structure and functions.
 *
 * Author -
 *   Christopher Sean Morrison
 */

#include "common.h"

#include <stdio.h>
#include <ctype.h> /* for isspace() */

#include "machine.h"
#include "bu.h"

#include "./count.h"


static counter_t *counter = NULL;

static void incr_token(int id)
{
    token_t *t;

    /* allocate and initialize on first use */
    if (!counter) {
	counter = bu_malloc(sizeof(counter_t), "count()");
	INIT_COUNTER_T(*counter);
    }

    t = &(counter->token);

    do {
	/* found existing */
	if (t->id == id) {
	    t->count++;
	    return;
	}

	/* add new */
	if (t->next == NULL) {
	    t->next = bu_calloc(1, sizeof(token_t), "incr_token()");
	    t->next->id = id;
	    t->next->count = 1;
	    return;
	}

	t = t->next;
    } while (t != (token_t*)NULL);
}


void count(long int id, const char *text)
{
    int i;
    static char previous = 0;

    /* allocate and initialize on first use */
    if (!counter) {
	counter = bu_malloc(sizeof(counter_t), "count()");
	INIT_COUNTER_T(*counter);
    }

    for (i=0; text[i] != '\0'; i++) {
	if ((text[i] == '\n') || (text[i] == '\r')) {
	    counter->lines++;
	    counter->column = 0;
	} else if (text[i] == '\t') {
	    counter->column += 8 - ((counter->column-1) % 8);
	} else {
	    counter->column++;
	}

	if (isspace(text[i]) && !isspace(previous)) {
	    counter->words++;
	}

	counter->bytes++;
	previous = text[i];
    }

    incr_token(id);
}


void freecount()
{
    token_t *t = (token_t*)NULL;
    token_t *next = (token_t*)NULL;

    if (!counter) {
	return;
    }

    t = (counter->token).next;

    while (t != (token_t*)NULL) {
	next = t->next;
	bu_free(t, "freecount()");
	t = next;
    }

    bu_free(counter, "freecount()");
}


long int get_column()
{
    if (counter)
	return counter->column;
    return 0;
}

long int get_bytes()
{
    if (counter)
	return counter->bytes;
    return 0;
}

long int get_words()
{
    if (counter)
	return counter->words;
    return 0;
}

long int get_lines()
{
    if (counter)
	return counter->lines;
    return 0;
}

long int count_get_token(long int id)
{
    token_t *t;

    if (!counter) {
	return 0;
    }

    for (t = &(counter->token); t != (token_t*)NULL; t = t->next) {
	if (t->id == id) {
	    return t->count;
	}
    }
    return 0;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.5
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d42 1
a42 1
static void incr_token(id)
@


1.5.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d42 1
a42 1
static void incr_token(int id)
@


1.4
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d45 1
a45 1
    
d117 1
a117 1
    
d123 1
a123 1
    
d126 1
a126 2
    
    
@


1.3
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


1.2
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2005-2006 United States Government as represented by
@


1.1
log
@generic counting routines for reporting parse/scan statistics
@
text
@d4 1
a4 1
 * Copyright (C) 2005 United States Government as represented by
@


1.1.2.1
log
@file count.c was added on branch rel-7-6-branch on 2005-11-13 17:45:01 +0000
@
text
@d1 183
@


1.1.2.2
log
@more merging changes from HEAD aka rel-7-6-4 to the rel-7-6-branch, adding the items that were moved and resolving rcs keyword conflicts
@
text
@a0 183
/*                         C O U N T . C
 * BRL-CAD
 *
 * Copyright (C) 2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file count.c
 *
 * Basic counting structure and functions.
 *
 * Author -
 *   Christopher Sean Morrison
 */

#include "common.h"

#include <stdio.h>
#include <ctype.h> /* for isspace() */

#include "machine.h"
#include "bu.h"

#include "./count.h"


static counter_t *counter = NULL;

static void incr_token(id)
{
    token_t *t;
    
    /* allocate and initialize on first use */
    if (!counter) {
	counter = bu_malloc(sizeof(counter_t), "count()");
	INIT_COUNTER_T(*counter);
    }

    t = &(counter->token);

    do {
	/* found existing */
	if (t->id == id) {
	    t->count++;
	    return;
	}

	/* add new */
	if (t->next == NULL) {
	    t->next = bu_calloc(1, sizeof(token_t), "incr_token()");
	    t->next->id = id;
	    t->next->count = 1;
	    return;
	}

	t = t->next;
    } while (t != (token_t*)NULL);
}


void count(long int id, const char *text)
{
    int i;
    static char previous = 0;

    /* allocate and initialize on first use */
    if (!counter) {
	counter = bu_malloc(sizeof(counter_t), "count()");
	INIT_COUNTER_T(*counter);
    }

    for (i=0; text[i] != '\0'; i++) {
	if ((text[i] == '\n') || (text[i] == '\r')) {
	    counter->lines++;
	    counter->column = 0;
	} else if (text[i] == '\t') {
	    counter->column += 8 - ((counter->column-1) % 8);
	} else {
	    counter->column++;
	}

	if (isspace(text[i]) && !isspace(previous)) {
	    counter->words++;
	}

	counter->bytes++;
	previous = text[i];
    }

    incr_token(id);
}


void freecount()
{
    token_t *t = (token_t*)NULL;
    token_t *next = (token_t*)NULL;

    if (!counter) {
	return;
    }

    t = (counter->token).next;
    
    while (t != (token_t*)NULL) {
	next = t->next;
	bu_free(t, "freecount()");
	t = next;
    }
    
    bu_free(counter, "freecount()");
}
    
    

long int get_column()
{
    if (counter)
	return counter->column;
    return 0;
}

long int get_bytes()
{
    if (counter)
	return counter->bytes;
    return 0;
}

long int get_words()
{
    if (counter)
	return counter->words;
    return 0;
}

long int get_lines()
{
    if (counter)
	return counter->lines;
    return 0;
}

long int count_get_token(long int id)
{
    token_t *t;

    if (!counter) {
	return 0;
    }

    for (t = &(counter->token); t != (token_t*)NULL; t = t->next) {
	if (t->id == id) {
	    return t->count;
	}
    }
    return 0;
}


/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


