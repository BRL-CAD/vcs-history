head	14.14;
access;
symbols
	rel-7-10-4:14.10.2.1
	STABLE:14.10.0.2
	stable-branch:14.3
	rel-7-10-2:14.10
	rel-7-10-0:14.10
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.14
date	2007.12.19.22.32.38;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.12.02.22.34.22;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.11.08.04.15.47;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.09.15.16.23.16;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.41;	author brlcad;	state Exp;
branches
	14.10.2.1;
next	14.9;

14.9
date	2007.01.20.14.36.57;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.24.05.00.26;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.31.07.30.58;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.37;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.16.18.51.53;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.05;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.27;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.22;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.17;	author brlcad;	state Exp;
branches;
next	;

14.10.2.1
date	2007.09.28.14.04.33;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.14
log
@manuallly null-terminate buffers after a strncat for sanity
@
text
@/*                           D I R . C
 * BRL-CAD
 *
 * Copyright (c) 1985-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dir.c
 *
 * Functions -
 *	f_memprint	Debug, print memory & db free maps
 *	dir_nref	Count number of times each db element referenced
 *	dir_summary	Summarize contents of directory by categories
 *	f_tops		Prints top level items in database
 *	cmd_glob	Does regular expression expansion
 *	f_prefix	Prefix each occurence of a specified object name
 *	f_keep		Save named objects in specified file
 *	f_tree		Print out a tree of all members of an object
 *
 *  Authors -
 *	Michael John Muuss
 *	Keith A. Applin
 *	Richard Romanelli
 *	Robert Jon Reschly Jr.
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.13 2007/12/02 22:34:22 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <fcntl.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>

#include "tcl.h"

#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"
#include "db.h"

#include "./ged.h"
#include "./mged_solid.h"
#include "./mged_dm.h"


#define BAD_EOF	(-1L)			/* eof_addr not set yet */

void	killtree(struct db_i *dbip, struct directory *dp, genptr_t ptr);


/*
 *			F _ M E M P R I N T
 *
 *  Debugging aid:  dump memory maps
 */
int
f_memprint(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
  CHECK_DBI_NULL;

  if(argc < 1 || 1 < argc){
    struct bu_vls vls;

    bu_vls_init(&vls);
    bu_vls_printf(&vls, "help memprint");
    Tcl_Eval(interp, bu_vls_addr(&vls));
    bu_vls_free(&vls);
    return TCL_ERROR;
  }

#if 0
  Tcl_AppendResult(interp, "Display manager free map:\n", (char *)NULL);
  rt_memprint( &(dmp->dm_map) );
#endif

  bu_log("Database free-storage map:\n");
  rt_memprint( &(dbip->dbi_freep) );

  return TCL_OK;
}

/*
 *			C M D _ G L O B
 *
 *  Assist routine for command processor.  If the current word in
 *  the argv[] array contains '*', '?', '[', or '\' then this word
 *  is potentially a regular expression, and we will tromp through the
 *  entire in-core directory searching for a match. If no match is
 *  found, the original word remains untouched and this routine was an
 *  expensive no-op.  If any match is found, it replaces the original
 *  word. Escape processing is also done done in this module.  If there
 *  are no matches, but there are escapes, the current word is modified.
 *  All matches are sought for, up to the limit of the argv[] array.
 *
 *  Returns 0 if no expansion happened, !0 if we matched something.
 */
int
cmd_glob(int *argcp, char **argv, int maxargs)
{
	static char word[64];
	register char *pattern;
	register struct directory	*dp;
	register int i;
	int escaped = 0;
	int orig_numargs = *argcp;

	if(dbip == DBI_NULL)
	  return 0;

	strncpy( word, argv[*argcp], sizeof(word)-1 );
	word[64] = '\0'; /* just in case */

	/* If * ? [ or \ are present, this is a regular expression */
	pattern = word;
	do {
		if( *pattern == '\0' )
			return(0);		/* nothing to do */
		if( *pattern == '*' ||
		    *pattern == '?' ||
		    *pattern == '[' ||
		    *pattern == '\\' )
			break;
	} while( *pattern++);

	/* Note if there are any escapes */
	for( pattern = word; *pattern; pattern++)
		if( *pattern == '\\') {
			escaped++;
			break;
		}

	/* Search for pattern matches.
	 * First, save the pattern (in word), and remove it from
	 * argv, as it will be overwritten by the expansions.
	 * If any matches are found, we do not have to worry about
	 * '\' escapes since the match coming from dp->d_namep is placed
	 * into argv.  Only in the case of no matches do we have
	 * to do escape crunching.
	 */

	FOR_ALL_DIRECTORY_START(dp, dbip) {
		if( !db_regexp_match( word, dp->d_namep ) )
			continue;
		/* Successful match */
		/* See if already over the limit */
		if( *argcp >= maxargs )  {
			bu_log("%s: expansion stopped after %d matches (%d args)\n",
				word, *argcp-orig_numargs, maxargs);
			break;
		}
		argv[(*argcp)++] = dp->d_namep;
	} FOR_ALL_DIRECTORY_END;

	/* If one or matches occurred, decrement final argc,
	 * otherwise, do escape processing if needed.
	 */
	if( *argcp > orig_numargs )  {
		(*argcp)--;
		return(1);
	} else if(escaped) {
		char *temp;
		temp = pattern = argv[*argcp];
		do {
			if(*pattern != '\\') {
				*temp = *pattern;
				temp++;
			} else if(*(pattern + 1) == '\\') {
				*temp = *pattern;
				pattern++;
				temp++;
			}
		} while(*pattern++);

		/* Elide the rare pattern which becomes null ("\<NULL>") */
		if(*(argv[*argcp]) == '\0')
			(*argcp)--;
	}
	return(0);		/* found nothing */
}

HIDDEN void
Do_prefix(struct db_i *dbip, struct rt_comb_internal *comb, union tree *comb_leaf, genptr_t prefix_ptr, genptr_t obj_ptr, genptr_t user_ptr3)
{
	char *prefix,*obj;
	char tempstring_v4[NAMESIZE+2];
	int len = NAMESIZE+2;

	RT_CK_DBI( dbip );
	RT_CK_TREE( comb_leaf );

	prefix = (char *)prefix_ptr;
	obj = (char *)obj_ptr;

	if( strcmp( comb_leaf->tr_l.tl_name, obj ) )
		return;

	bu_free( comb_leaf->tr_l.tl_name, "comb_leaf->tr_l.tl_name" );
	if( dbip->dbi_version < 5 ) {
		strncpy( tempstring_v4, prefix, len-1);
		strncat( tempstring_v4, obj, len-strlen(prefix)-1);
		tempstring_v4[len-1] = '\0'; /* sanity */
		comb_leaf->tr_l.tl_name = bu_strdup( tempstring_v4 );
	} else {
	    len = strlen(prefix)+strlen(obj)+1;
	    comb_leaf->tr_l.tl_name = (char *)bu_malloc( len, "Adding prefix" );
	    strncpy( comb_leaf->tr_l.tl_name , prefix, len-1);
	    strncat( comb_leaf->tr_l.tl_name , obj, len-strlen(prefix)-1 );
	    comb_leaf->tr_l.tl_name[len-1] = '\0'; /* sanity */
	}
}

/*
 *			F _ P R E F I X
 *
 *  Prefix each occurence of a specified object name, both
 *  when defining the object, and when referencing it.
 */
int
f_prefix(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	register int	i,k;
	register struct directory *dp;
	struct rt_db_internal	intern;
	struct rt_comb_internal *comb;
	char tempstring_v4[NAMESIZE+2];
	struct bu_vls tempstring_v5;
	char *tempstring;
	int len = NAMESIZE+2;

	CHECK_DBI_NULL;
	CHECK_READ_ONLY;

	if(argc < 3){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help prefix");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	bu_vls_init( &tempstring_v5 );

	/* First, check validity, and change node names */
	for( i = 2; i < argc; i++) {
		if( (dp = db_lookup( dbip, argv[i], LOOKUP_NOISY )) == DIR_NULL) {
			argv[i] = "";
			continue;
		}

		if( dbip->dbi_version < 5 && (int)(strlen(argv[1]) + strlen(argv[i])) > NAMESIZE) {
		  struct bu_vls tmp_vls;

		  bu_vls_init(&tmp_vls);
		  bu_vls_printf(&tmp_vls, "'%s%s' too long, must be less than %d characters.\n",
				argv[1], argv[i], NAMESIZE);
		  Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);
		  bu_vls_free(&tmp_vls);

		  argv[i] = "";
		  continue;
		}

		if( dbip->dbi_version < 5 ) {
			strncpy( tempstring_v4, argv[1], len-1);
			strncat( tempstring_v4, argv[i], len-strlen(argv[1])-1);
			tempstring_v4[len-1] = '\0'; /* sanity */
			tempstring = tempstring_v4;
		} else {
			bu_vls_trunc( &tempstring_v5, 0 );
			bu_vls_strcpy( &tempstring_v5, argv[1] );
			bu_vls_strcat( &tempstring_v5, argv[i] );
			tempstring = bu_vls_addr( &tempstring_v5 );
		}

		if( db_lookup( dbip, tempstring, LOOKUP_QUIET ) != DIR_NULL ) {
			aexists( tempstring );
			argv[i] = "";
			continue;
		}
		/*  Change object name in the directory. */
		if( db_rename( dbip, dp, tempstring ) < 0 )  {
			bu_vls_free( &tempstring_v5 );
		  Tcl_AppendResult(interp, "error in rename to ", tempstring,
				   ", aborting\n", (char *)NULL);
		  TCL_ERROR_RECOVERY_SUGGESTION;
		  return TCL_ERROR;
		}
	}

	bu_vls_free( &tempstring_v5 );

	/* Examine all COMB nodes */
	FOR_ALL_DIRECTORY_START(dp, dbip) {
		if( !(dp->d_flags & DIR_COMB) )
			continue;

		if( rt_db_get_internal( &intern, dp, dbip, (fastf_t *)NULL, &rt_uniresource ) < 0 )
			TCL_READ_ERR_return;
		comb = (struct rt_comb_internal *)intern.idb_ptr;

		for( k=2; k<argc; k++ )
			db_tree_funcleaf( dbip, comb, comb->tree, Do_prefix,
				(genptr_t)argv[1], (genptr_t)argv[k], (genptr_t)NULL );
		if( rt_db_put_internal( dp, dbip, &intern, &rt_uniresource ) )
			TCL_WRITE_ERR_return;
	} FOR_ALL_DIRECTORY_END;
	return TCL_OK;
}

HIDDEN void
Change_name(struct db_i *dbip, struct rt_comb_internal *comb, union tree *comb_leaf, genptr_t old_ptr, genptr_t new_ptr)
{
	char	*old_name, *new_name;

	RT_CK_DBI( dbip );
	RT_CK_TREE( comb_leaf );

	old_name = (char *)old_ptr;
	new_name = (char *)new_ptr;

	if( strcmp( comb_leaf->tr_l.tl_name, old_name ) )
		return;

	bu_free( comb_leaf->tr_l.tl_name, "comb_leaf->tr_l.tl_name" );
	comb_leaf->tr_l.tl_name = bu_strdup( new_name );
}

/*	F _ K I L L A L L
 *
 *	kill object[s] and
 *	remove all references to the object[s]
 *	format:	killall obj1 ... objn
 *
 */
int
cmd_killall(ClientData	clientData,
	    Tcl_Interp	*interp,
	    int		argc,
	    char	**argv)
{
#if 0
	CHECK_DBI_NULL;

	return wdb_killall_cmd(wdbp, interp, argc, argv);
#else
	register int	i,k;
	register struct directory *dp;
	struct rt_db_internal	intern;
	struct rt_comb_internal	*comb;
	int			ret;

	CHECK_DBI_NULL;
	CHECK_READ_ONLY;

	if(argc < 2){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help killall");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	if( setjmp( jmp_env ) == 0 )
		(void)signal( SIGINT, sig3);  /* allow interupts */
	else{
		/* Free intern? */
		return TCL_OK;
	}

	ret = TCL_OK;

	/* Examine all COMB nodes */
	FOR_ALL_DIRECTORY_START(dp, dbip) {
		if( !(dp->d_flags & DIR_COMB) )
			continue;

		if( rt_db_get_internal( &intern, dp, dbip, (fastf_t *)NULL, &rt_uniresource ) < 0 )  {
			Tcl_AppendResult(interp, "rt_db_get_internal(", dp->d_namep,
				") failure", (char *)NULL );
			ret = TCL_ERROR;
			continue;
		}
		comb = (struct rt_comb_internal *)intern.idb_ptr;
		RT_CK_COMB(comb);

		for( k=1; k<argc; k++ )  {
			int	code;

			code = db_tree_del_dbleaf( &(comb->tree), argv[k], &rt_uniresource );
			if( code == -1 )  continue;	/* not found */
			if( code == -2 )  continue;	/* empty tree */
			if( code < 0 )  {
				Tcl_AppendResult(interp, "  ERROR_deleting ",
					dp->d_namep, "/", argv[k],
					"\n", (char *)NULL);
				ret = TCL_ERROR;
			} else {
				Tcl_AppendResult(interp, "deleted ",
					dp->d_namep, "/", argv[k],
					"\n", (char *)NULL);
			}
		}

		if( rt_db_put_internal( dp, dbip, &intern, &rt_uniresource ) < 0 )  {
			Tcl_AppendResult(interp, "ERROR: Unable to write new combination into database.\n", (char *)NULL);
			ret = TCL_ERROR;
			continue;
		}
	} FOR_ALL_DIRECTORY_END;

	if( ret != TCL_OK )  {
		Tcl_AppendResult(interp, "KILL skipped because of earlier errors.\n", (char *)NULL);
		return ret;
	}

	/* ALL references removed...now KILL the object[s] */
	/* reuse argv[] */
	argv[0] = "kill";
	(void)signal( SIGINT, SIG_IGN );
	return cmd_kill( clientData, interp, argc, argv );
#endif
}


/*		F _ K I L L T R E E ( )
 *
 *	Kill ALL paths belonging to an object
 *
 */
int
cmd_killtree(ClientData	clientData,
	     Tcl_Interp *interp,
	     int	argc,
	     char	**argv)
{
#if 0
	CHECK_DBI_NULL;

	return wdb_kill_cmd(wdbp, interp, argc, argv);
#else
	register struct directory *dp;
	register int i;

	CHECK_DBI_NULL;
	CHECK_READ_ONLY;

	if(argc < 2){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help killtree");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	if( setjmp( jmp_env ) == 0 )
	  (void)signal( SIGINT, sig3);  /* allow interupts */
	      else
	  return TCL_OK;

	for(i=1; i<argc; i++) {
		if( (dp = db_lookup( dbip, argv[i], LOOKUP_NOISY) ) == DIR_NULL )
			continue;
		db_functree( dbip, dp, killtree, killtree, &rt_uniresource, (genptr_t)interp );
	}

	(void)signal( SIGINT, SIG_IGN );
	solid_list_callback();
	return TCL_OK;
#endif
}

/*
 *			K I L L T R E E
 */
void
killtree(struct db_i *dbip, struct directory *dp, genptr_t ptr)
{
	Tcl_Interp		*interp = (Tcl_Interp *)ptr;
	struct directory	*dpp[2] = {DIR_NULL, DIR_NULL};

	if (dbip == DBI_NULL)
		return;

	Tcl_AppendResult(interp, "KILL ", (dp->d_flags & DIR_COMB) ? "COMB" : "Solid",
			 ":  ", dp->d_namep, "\n", (char *)NULL);

	dpp[0] = dp;
	eraseobjall(dpp);

	if (db_delete(dbip, dp) < 0 || db_dirdelete(dbip, dp) < 0) {
		TCL_DELETE_ERR("");
	}
}

int
f_debugdir(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
  CHECK_DBI_NULL;

  if(argc < 1 || 1 < argc){
    struct bu_vls vls;

    bu_vls_init(&vls);
    bu_vls_printf(&vls, "help debugdir");
    Tcl_Eval(interp, bu_vls_addr(&vls));
    bu_vls_free(&vls);
    return TCL_ERROR;
  }

  db_pr_dir( dbip );
  return TCL_OK;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.12 2007/11/08 04:15:47 brlcad Exp $ (BRL)";
d221 3
a223 2
		(void)strncpy( tempstring_v4, prefix, len-1);
		(void)strncat( tempstring_v4, obj, len-strlen(prefix)-1);
d227 4
a230 4
	    comb_leaf->tr_l.tl_name = (char *)bu_malloc( strlen( prefix ) + strlen( obj ) + 1,
							 "Adding prefix" );
		(void)strncpy( comb_leaf->tr_l.tl_name , prefix, len-1);
		(void)strncat( comb_leaf->tr_l.tl_name , obj, len-strlen(prefix)-1 );
d290 1
@


14.12
log
@minor tweaks, preventive null terminating of strncmp'd strings
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.11 2007/09/15 16:23:16 brlcad Exp $ (BRL)";
d208 1
d221 2
a222 2
		(void)strcpy( tempstring_v4, prefix);
		(void)strcat( tempstring_v4, obj);
d225 5
a229 4
		comb_leaf->tr_l.tl_name = (char *)bu_malloc( strlen( prefix ) + strlen( obj ) + 1,
							     "Adding prefix" );
		(void)strcpy( comb_leaf->tr_l.tl_name , prefix);
		(void)strcat( comb_leaf->tr_l.tl_name , obj );
d249 1
d287 2
a288 2
			(void) strcpy( tempstring_v4, argv[1]);
			(void) strcat( tempstring_v4, argv[i]);
@


14.11
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.10 2007/01/23 01:13:41 brlcad Exp $ (BRL)";
d133 2
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.9 2007/01/20 14:36:57 brlcad Exp $ (BRL)";
d52 1
a52 6
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif

@


14.10.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.11 2007/09/15 16:23:16 brlcad Exp $ (BRL)";
d52 6
a57 1
#include <string.h>
@


14.9
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d44 1
a44 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.8 2006/01/24 05:00:26 brlcad Exp $ (BRL)";
@


14.8
log
@convert iteration over the array of linked list of directory nodes to FOR_ALL_DIRECTORY_START/FOR_ALL_DIRECTORY_END instead
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2006 United States Government as represented by
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.7 2006/01/18 06:46:19 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.6 2005/10/31 07:30:58 brlcad Exp $ (BRL)";
d167 9
a175 12
	for( i = 0; i < RT_DBNHASH; i++ )  {
		for( dp = dbip->dbi_Head[i]; dp != DIR_NULL; dp = dp->d_forw )  {
			if( !db_regexp_match( word, dp->d_namep ) )
				continue;
			/* Successful match */
			/* See if already over the limit */
			if( *argcp >= maxargs )  {
				bu_log("%s: expansion stopped after %d matches (%d args)\n",
					word, *argcp-orig_numargs, maxargs);
				break;
			}
			argv[(*argcp)++] = dp->d_namep;
d177 3
a179 1
	}
a182 1

d316 14
a329 16
	for( i = 0; i < RT_DBNHASH; i++ )  {
		for( dp = dbip->dbi_Head[i]; dp != DIR_NULL; dp = dp->d_forw )  {
			if( !(dp->d_flags & DIR_COMB) )
				continue;

			if( rt_db_get_internal( &intern, dp, dbip, (fastf_t *)NULL, &rt_uniresource ) < 0 )
				TCL_READ_ERR_return;
			comb = (struct rt_comb_internal *)intern.idb_ptr;

			for( k=2; k<argc; k++ )
				db_tree_funcleaf( dbip, comb, comb->tree, Do_prefix,
					(genptr_t)argv[1], (genptr_t)argv[k], (genptr_t)NULL );
			if( rt_db_put_internal( dp, dbip, &intern, &rt_uniresource ) )
				TCL_WRITE_ERR_return;
		}
	}
d398 3
a400 13
	for( i = 0; i < RT_DBNHASH; i++ )  {
		for( dp = dbip->dbi_Head[i]; dp != DIR_NULL; dp = dp->d_forw )  {
			if( !(dp->d_flags & DIR_COMB) )
				continue;

			if( rt_db_get_internal( &intern, dp, dbip, (fastf_t *)NULL, &rt_uniresource ) < 0 )  {
				Tcl_AppendResult(interp, "rt_db_get_internal(", dp->d_namep,
					") failure", (char *)NULL );
				ret = TCL_ERROR;
				continue;
			}
			comb = (struct rt_comb_internal *)intern.idb_ptr;
			RT_CK_COMB(comb);
d402 8
a409 2
			for( k=1; k<argc; k++ )  {
				int	code;
d411 2
a412 14
				code = db_tree_del_dbleaf( &(comb->tree), argv[k], &rt_uniresource );
				if( code == -1 )  continue;	/* not found */
				if( code == -2 )  continue;	/* empty tree */
				if( code < 0 )  {
					Tcl_AppendResult(interp, "  ERROR_deleting ",
						dp->d_namep, "/", argv[k],
						"\n", (char *)NULL);
					ret = TCL_ERROR;
				} else {
					Tcl_AppendResult(interp, "deleted ",
						dp->d_namep, "/", argv[k],
						"\n", (char *)NULL);
				}
			}
d414 7
a420 2
			if( rt_db_put_internal( dp, dbip, &intern, &rt_uniresource ) < 0 )  {
				Tcl_AppendResult(interp, "ERROR: Unable to write new combination into database.\n", (char *)NULL);
d422 4
a425 1
				continue;
d428 7
a434 1
	}
@


14.6
log
@header cleanup, reorg, and general bug squashing including adding missing headers
@
text
@d4 1
a4 1
 * Copyright (C) 1985-2005 United States Government as represented by
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.5 2005/10/23 04:44:37 brlcad Exp $ (BRL)";
@


14.5
log
@trailing ws
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.4 2005/09/16 18:51:53 brlcad Exp $ (BRL)";
d67 1
@


14.4
log
@rework tkwin into cmd.c and profide the DM_X and DM_OGL defines to the build.  probably fixes a bug or two of some sort on the display manager.  also migrate the tolerance vars together along with other ws and header cleanup
@
text
@d38 1
a38 1
 *  
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.3 2005/01/30 20:31:05 brlcad Exp $ (BRL)";
d80 1
a80 1
 *  
d111 1
a111 1
 *  
d245 1
a245 1
	register int	i,k;	
@


14.3
log
@update copyright to 2005
@
text
@d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/mged/dir.c,v 14.2 2004/12/21 04:17:27 butler Exp $ (BRL)";
a49 2


d54 1
a54 1
#include <string.h>
d56 1
a56 1
#include <strings.h>
d59 1
d67 1
d71 1
a71 1
#include "./mgedtcl.h"
d77 1
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d38 1
a38 1
 *
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d50 2
d56 1
a56 1
#  include <string.h>
d58 1
a58 1
#  include <strings.h>
a60 1

a67 2
#include "db.h"

d71 1
a71 1

a76 1

d79 1
a79 1
 *
d110 1
a110 1
 *
d244 1
a244 1
	register int	i,k;
@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 1985-2004 United States Government as represented by
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/dir.c,v 14.1 2004/11/16 19:42:17 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D I R . C
a42 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
d45 1
a45 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/dir.c,v 1.4 2004/09/03 23:30:58 morrison Exp $ (BRL)";
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/dir.c,v 1.3 2004/08/02 23:01:51 morrison Exp $ (BRL)";
d529 10
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/mged/dir.c,v 1.2 2004/06/08 22:04:27 morrison Exp $ (BRL)";
d40 1
a40 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d33 1
a33 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d30 1
a30 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/dir.c,v 11.85 2004/05/10 15:30:48 erikg Exp $ (BRL)";
a50 1
#include "externs.h"
@

