head	14.9;
access;
symbols
	rel-7-10-4:14.8.2.1
	STABLE:14.8.0.2
	stable-branch:14.3
	rel-7-10-2:14.8
	rel-7-10-0:14.8
	rel-7-8-4:14.6
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.9
date	2007.09.15.16.23.18;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.43;	author brlcad;	state Exp;
branches
	14.8.2.1;
next	14.7;

14.7
date	2007.01.20.14.36.58;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.08.08.02.54.44;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.19;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.09.16.18.51.53;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.06;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.04.17.27;	author butler;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.58;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.51;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.29;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;

14.8.2.1
date	2007.09.28.14.04.35;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.9
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                        U P D A T E . C
 * BRL-CAD
 *
 * Copyright (c) 1995-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file update.c
 *
 *  Author -
 *	Bob Parker
 *
 *  Functions -
 *      mged_update	- turns the Tcl crank via event_check, then calls refresh
 *	f_update	- Tcl wrapper for mged_update
 *	f_wait		- modified version of tkwait
 *
 *  Source -
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 */

#include "common.h"

#include <string.h>

#ifdef HAVE_X11_XLIB_H
#  include <X11/Xlib.h>
#endif

#include "tcl.h"
#include "tk.h"

#include "machine.h"
#include "bu.h"

#include "./mgedtcl.h"


/* defined in ged.c */
extern void refresh();
extern int event_check();


void
mged_update(int	non_blocking)
{
	if (non_blocking >= 0)
		event_check(non_blocking);
	refresh();
}

int
f_update(ClientData	clientData,
	 Tcl_Interp	*interp,
	 int		argc,
	 char		**argv)
{
	int non_blocking;

	if (argc != 2 || sscanf(argv[1], "%d", &non_blocking) != 1) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helpdevel mged_update");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	mged_update(non_blocking);

	return TCL_OK;
}


/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static char *
WaitVariableProc(ClientData	clientData,	/* Pointer to integer to set to 1. */
		 Tcl_Interp	*interp,	/* Interpreter containing variable. */
		 char		*name1,		/* Name of variable. */
		 char		*name2,		/* Second part of variable name. */
		 int		flags)		/* Information about what happened. */
{
	int *donePtr = (int *) clientData;

	*donePtr = 1;
	return (char *) NULL;
}


/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static void
WaitVisibilityProc(ClientData	clientData,	/* Pointer to integer to set to 1. */
		   XEvent	*eventPtr)	/* Information about event (not used). */
{
	int *donePtr = (int *) clientData;

	if (eventPtr->type == VisibilityNotify) {
		*donePtr = 1;
	}
	if (eventPtr->type == DestroyNotify) {
		*donePtr = 2;
	}
}

/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static void
WaitWindowProc(ClientData	clientData,	/* Pointer to integer to set to 1. */
	       XEvent		*eventPtr)	/* Information about event. */
{
	int *donePtr = (int *) clientData;

	if (eventPtr->type == DestroyNotify) {
		*donePtr = 1;
	}
}

/*
 * This procedure is a slightly modified version of the Tk_TkwaitCmd.
 * It was modified to use mged_update so that the geometry windows
 * would get refreshed.
 */
int
f_wait(ClientData	clientData,	/* Main window associated with interpreter. */
       Tcl_Interp	*interp,	/* Current interpreter. */
       int		argc,		/* Number of arguments. */
       char		**argv)		/* Argument strings. */
{
	int c, done;
	size_t length;
	Tk_Window window;

	if (argc != 3) {
		Tcl_AppendResult(interp, "wrong # args: should be \"",
				 argv[0], " variable|visibility|window name\"", (char *) NULL);
		return TCL_ERROR;
	}
	c = argv[1][0];
	length = strlen(argv[1]);
	if ((c == 'v') && (strncmp(argv[1], "variable", length) == 0)
	    && (length >= 2)) {
		if (Tcl_TraceVar(interp, argv[2],
				 TCL_GLOBAL_ONLY|TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
				 (Tcl_VarTraceProc *)WaitVariableProc,
				 (ClientData) &done) != TCL_OK) {
			return TCL_ERROR;
		}
		done = 0;
		while (!done) {
			mged_update(0);
		}
		Tcl_UntraceVar(interp, argv[2],
			       TCL_GLOBAL_ONLY|TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
			       (Tcl_VarTraceProc *)WaitVariableProc,
			       (ClientData) &done);
	} else if ((c == 'v') && (strncmp(argv[1], "visibility", length) == 0)
		   && (length >= 2)) {

		window = Tk_NameToWindow(interp, argv[2], tkwin);
		if (window == NULL) {
			return TCL_ERROR;
		}
		Tk_CreateEventHandler(window, VisibilityChangeMask|StructureNotifyMask,
				      WaitVisibilityProc, (ClientData) &done);
		done = 0;
		while (!done) {
			mged_update(0);
		}
		if (done != 1) {
			/*
			 * Note that we do not delete the event handler because it
			 * was deleted automatically when the window was destroyed.
			 */

			Tcl_ResetResult(interp);
			Tcl_AppendResult(interp, "window \"", argv[2],
					 "\" was deleted before its visibility changed",
					 (char *) NULL);
			return TCL_ERROR;
		}
		Tk_DeleteEventHandler(window, VisibilityChangeMask|StructureNotifyMask,
				      WaitVisibilityProc, (ClientData) &done);
	} else if ((c == 'w') && (strncmp(argv[1], "window", length) == 0)) {
		window = Tk_NameToWindow(interp, argv[2], tkwin);
		if (window == NULL) {
			return TCL_ERROR;
		}
		Tk_CreateEventHandler(window, StructureNotifyMask,
				      WaitWindowProc, (ClientData) &done);
		done = 0;
		while (!done) {
			mged_update(0);
		}
		/*
		 * Note:  there's no need to delete the event handler.  It was
		 * deleted automatically when the window was destroyed.
		 */
	} else {
		Tcl_AppendResult(interp, "bad option \"", argv[1],
				 "\": must be variable, visibility, or window", (char *) NULL);
		return TCL_ERROR;
	}

	/*
	 * Clear out the interpreter's result, since it may have been set
	 * by event handlers.
	 */

	Tcl_ResetResult(interp);
	return TCL_OK;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d37 2
a38 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.8.2.1
log
@more merging from HEAD.  bring in build system tweakage updates that should fix some library symbol problems from croping up post-release.
@
text
@d37 5
a41 2
#include <string.h>

@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.6
log
@decouple DM_X from the other display manager interfaces, clean up the preprocessor logic so Windows does not need to declare DM_X but also to avoid using _WIN32 where possible as well.
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2006 United States Government as represented by
@


14.5
log
@update copyright to 2006
@
text
@d39 1
a39 1
#include <string.h>
d41 1
a41 1
#include <strings.h>
a42 1

d47 2
a48 5
#ifdef DM_X
#  include "tk.h"
#else
#  include "tcl.h"
#endif
@


14.4
log
@rework tkwin into cmd.c and profide the DM_X and DM_OGL defines to the build.  probably fixes a bug or two of some sort on the display manager.  also migrate the tolerance vars together along with other ws and header cleanup
@
text
@d4 1
a4 1
 * Copyright (C) 1995-2005 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@a37 1

d44 4
d57 3
a63 1
extern Tk_Window tkwin;
a158 3
#if 0
	Tk_Window tkwin = (Tk_Window) clientData;
#endif
d161 1
a187 1
		Tk_Window window;
a213 2
		Tk_Window window;

@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d38 1
a44 4
#ifdef HAVE_X11_XLIB_H
#  include <X11/Xlib.h>
#endif

a53 3
#include "./mgedtcl.h"


d58 1
d154 3
a158 1
	Tk_Window window;
d185 1
d212 2
@


14.2
log
@GPL License changes
@
text
@d4 1
a4 1
 * Copyright (c) 1995-2004 United States Government as represented by
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *                           U P D A T E . C
a33 9
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1995-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d232 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d29 1
a29 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

