head	14.13;
access;
symbols
	rel-7-10-4:14.8
	STABLE:14.8.0.2
	stable-branch:14.3
	rel-7-10-2:14.8
	rel-7-10-0:14.8
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.3
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.3
	premerge-20051223-bobWinPort:14.3
	rel-7-6-6:14.3
	rel-7-6-4:14.3
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.5
	rel-7-0-branch:1.5.0.2
	rel-7-0:1.5;
locks; strict;
comment	@ * @;


14.13
date	2007.12.16.18.53.51;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.12.16.16.05.14;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.12.16.15.59.40;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.12.02.22.34.24;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.09.15.16.23.21;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.47;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.37.00;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.04.05.18.19.54;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.28.00.36.29;	author brlcad;	state Exp;
branches
	14.5.2.1;
next	14.4;

14.4
date	2006.01.18.06.46.24;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.12;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.11.57;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.14.23.36.26;	author butler;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.22.04.36;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.52;	author morrison;	state Exp;
branches;
next	;

14.5.2.1
date	2006.04.07.19.34.23;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.13
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                          D W I N . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dwin.c
 *
 *  Extract sliding windows of double values.
 *  Apply window functions if desired.
 */
#include "common.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h> /* for atof() */
#include <math.h>

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif

#include "machine.h"

/*
 * Buffering stuff
 */
#define	BSIZE	16*1024		/* Must be AT LEAST 2*Points in spectrum */
double	buf[BSIZE];		/* input data buffer */
double	temp[BSIZE];		/* windowed data buffer */
int	input_sample = 0;	/* The *next* input sample ("file pointer") */

int	buf_start = 0;		/* sample number in buf[0] */
int	buf_num = 0;		/* number of samples currently in buffer */
int	buf_index = 0;		/* buffer offset for current window */

int	xform_start = 0;	/* current window start/end */
int	xform_end = 0;

#define	START_IN_BUFFER		(xform_start < buf_start+buf_num)
#define	END_NOT_IN_BUFFER	(xform_end >= buf_start+buf_num)

int	window = 0;
int	hamming = 0;
int	bias = 0;
int	bartlett = 0;
static int	endwin = 0;
int	midwin = 0;

void	fill_buffer(void);
void	seek_sample(int n);
void	biaswin(double *data, int L);
void	bartwin(double *data, int L);
void	hamwin(double *data, int length);
void	coswin(double *data, int length, double percent);

static const char usage[] = "\
Usage: dwin [options] [width (1024)] [step (width)] [start]\n\
  -w  apply window (80%% split Cosine)\n\
  -h  apply Hamming window\n\
  -b  apply Bartlett window (triangle)\n\
  -B  apply bias window (half triangle)\n\
  -e  start first sample at end of buffer\n\
  -m  start first sample at middle of buffer\n\
";

int main(int argc, char **argv)
{
	int	L, step;

	if( isatty(fileno(stdin)) || isatty(fileno(stdout)) ) {
		bu_exit(1, "%s", usage );
	}

	while( argc > 1 ) {
		if( strcmp(argv[1], "-w") == 0 ) {
			window++;
		} else if( strcmp(argv[1], "-h") == 0 ) {
			window++;
			hamming++;
		} else if( strcmp(argv[1], "-B") == 0 ) {
			window++;
			bias++;
		} else if( strcmp(argv[1], "-b") == 0 ) {
			window++;
			bartlett++;
		} else if( strcmp(argv[1], "-e") == 0 ) {
			endwin++;
		} else if( strcmp(argv[1], "-m") == 0 ) {
			midwin++;
		} else
			break;
		argc--;
		argv++;
	}

	L = (argc > 1) ? atoi(argv[1]) : 1024;
	if( argc > 2 ) {
		double	f;
		f = atof(argv[2]);
		if( f < 1.0 )
			step = f * L;
		else
			step = f;
	} else
		step = L;

	/* compute xform start/end */
	if( endwin )
		xform_start = -L + 1;	/* one sample at end */
	else if( midwin )
		xform_start = -L/2;	/* odd - center, even - just after */
	else
		xform_start = 0;
	xform_end = xform_start + L-1;

	/* initialize data buffer */
	memset((char *)buf, 0, BSIZE*sizeof(*buf));
	buf_start = -BSIZE;
	buf_num = BSIZE;
	buf_index = 0;

	while( !feof( stdin ) ) {
#ifdef DEBUG
		fprintf(stderr,"\nWant to xform [%d %d]\n", xform_start, xform_end );
		fprintf(stderr,"Buffer contains %d samples, from [%d (%d)]\n", buf_num, buf_start, buf_start+buf_num-1 );
#endif /* DEBUG */
		if( START_IN_BUFFER ) {
			buf_index = xform_start - buf_start;
			if( END_NOT_IN_BUFFER ) {
#ifdef DEBUG
				fprintf(stderr,"\tend isn't in buffer.\n");
#endif /* DEBUG */
				/* Move start to origin */
				memmove(&buf[0], &buf[buf_index], (buf_num-buf_index)*sizeof(*buf));
				buf_start = xform_start;
				buf_num -= buf_index;
				buf_index = 0;
				fill_buffer();
			}
		} else {
#ifdef DEBUG
			fprintf(stderr,"\tstart isn't in buffer.\n");
#endif /* DEBUG */
			if( input_sample != xform_start )
				seek_sample( xform_start );
			buf_start = xform_start;
			buf_num = 0;
			buf_index = 0;
			fill_buffer();
			if( feof( stdin ) )
				break;
		}

#ifdef DEBUG
		fprintf(stderr, "Did samples %d to %d (buf_index = %d)\n", xform_start, xform_end, buf_index );
#endif /* DEBUG */
		if( window ) {
			memcpy(temp, &buf[buf_index], L*sizeof(*temp));
			if( hamming )
				hamwin( temp, L ); /* Hamming window */
			else if( bartlett )
				bartwin( temp, L ); /* Bartlett window */
			else if( bias )
				biaswin( temp, L ); /* Bias window */
			else
				coswin( temp, L, 0.80 ); /* 80% cosine window */
			fwrite( temp, sizeof(*temp), L, stdout );
		} else {
			fwrite( &buf[buf_index], sizeof(*buf), L, stdout );
		}

		/* Bump out pointers */
		xform_start += step;
		xform_end = xform_start + L-1;
	}

	return 0;
}

/*
 * Move input pointer to sample n.
 * Since we may be reading from a pipe, we actually
 * read and discard the samples.
 * Can only seek forward.
 */
void
seek_sample(int n)
{
	double	foo;

	fprintf(stderr,"seeking sample %d\n", n );
	while( input_sample < n ) {
		fread( &foo, sizeof(foo), 1, stdin );
		input_sample++;
	}
}

/*
 * Fill the data buffer from the current input location.
 */
void
fill_buffer(void)
{
	int	n, num_to_read;

	num_to_read = BSIZE - buf_num;

#ifdef DEBUG
fprintf(stderr, "fillbuffer: buf_start = %d, buf_num = %d, numtoread = %d, buf_index = %d\n",
buf_start, buf_num, num_to_read, buf_index );
#endif /* DEBUG */
	n = fread( &buf[buf_num], sizeof(*buf), num_to_read, stdin );
	if( n == 0 ) {
		/*fprintf( stderr, "EOF\n" );*/
	    memset((char *)&buf[buf_num], 0, sizeof(*buf)*num_to_read);
	    return;
	}
	input_sample += n;
	buf_num += n;
	if( n < num_to_read ) {
	    memset((char *)&buf[buf_num], 0, sizeof(*buf)*(num_to_read-n));
	    clearerr(stdin);	/* XXX HACK */
	}

#ifdef DEBUG
	fprintf(stderr,"filled buffer now has %d samples, [%d (%d)].  Input at %d\n", buf_num, buf_start, buf_start+buf_num-1, input_sample );
#endif /* DEBUG */
}

/* Bias window (half triangle) */
void
biaswin(double *data, int L)
{
	int	i;

	for (i = 0; i < L; i++) {
		data[i] *= (double)(L-i)/(double)L;
	}
}

/* Bartlett window (triangle) */
void
bartwin(double *data, int L)
{
	int	i;

	for (i = 0; i < L/2; i++) {
		data[i] *= (double)i/(L/2.0);
	}
	for (i = L/2; i < L; i++) {
		data[i] *= (double)(L-i)/(L/2.0);
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.12
log
@few multiline bzero to memset stragglers
@
text
@d148 1
a148 1
				bcopy( &buf[buf_index], &buf[0], (buf_num-buf_index)*sizeof(*buf) );
d172 1
a172 1
			bcopy( &buf[buf_index], temp, L*sizeof(*temp) );
@


14.11
log
@convert all bzero calls to memset
@
text
@d229 2
a230 3
		bzero( (char *)&buf[buf_num],
			sizeof(*buf)*num_to_read );
		return;
d235 2
a236 3
		bzero( (char *)&buf[buf_num],
			sizeof(*buf)*(num_to_read-n) );
		clearerr(stdin);	/* XXX HACK */
@


14.10
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@d131 1
a131 1
	bzero( (char *)buf, BSIZE*sizeof(*buf) );
@


14.9
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d70 1
a70 1
static char usage[] = "\
d85 1
a85 2
		fprintf( stderr, usage );
		exit( 1 );
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d27 1
a27 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
d31 1
@


14.7
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.6
log
@more header/warning cleanup from Intel compiler warnings on Altix
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.5
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d36 3
@


14.5.2.1
log
@update from HEAD
@
text
@a35 3
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
@


14.4
log
@update copyright to 2006
@
text
@a27 2


d29 1
a29 1
#include <string.h>
d31 1
a31 1
#include <strings.h>
a32 1

d34 1
a37 4
#ifdef HAVE_STDLIB_H
#include <stdlib.h> /* for atof() */
#endif

@


14.3
log
@update copyright to 2005
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D W I N . C
@


1.5
log
@various utilities needed stdlib.h to get a delcaration of atof() so I added it
@
text
@d259 10
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d21 4
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d11 1
a11 1
#ifdef USE_STRING_H
@


1.2
log
@obliterate externs.h
@
text
@d7 1
a7 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a22 1
#include "externs.h"
@

