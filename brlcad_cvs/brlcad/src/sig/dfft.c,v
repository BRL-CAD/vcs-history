head	14.14;
access;
symbols
	rel-7-10-4:14.10
	STABLE:14.10.0.2
	stable-branch:14.3
	rel-7-10-2:14.7
	rel-7-10-0:14.7
	rel-7-8-4:14.5
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.3
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.3
	premerge-20051223-bobWinPort:14.3
	rel-7-6-6:14.3
	rel-7-6-4:14.3
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.14
date	2007.12.16.15.59.40;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.12.02.22.34.24;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.09.15.16.23.21;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.09.14.15.22.05;	author erikgreenwald;	state Exp;
branches;
next	14.10;

14.10
date	2007.09.10.18.54.19;	author erikgreenwald;	state Exp;
branches;
next	14.9;

14.9
date	2007.09.07.20.41.58;	author erikgreenwald;	state Exp;
branches;
next	14.8;

14.8
date	2007.08.28.15.52.20;	author erikgreenwald;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.23.01.13.47;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.20.14.37.00;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.28.00.36.29;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2006.01.18.06.46.24;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.12;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.11.57;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.52;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.14
log
@convert all bzero calls to memset
@
text
@/*                          D F F T . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dfft.c
 *
 *  Compute FFT's of a stream of doubles (Real data).
 *
 *  Presently 512 point spectrum only.
 *  Which means we need a 1K data segment to get spectrum at midpoint.
 */
#include "common.h"

#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#include "machine.h"

#define	MAXFFT	4096
#define	MAXOUT	2048		/* MAXFFT/2 XXX (Actually + 1) */

double	data[MAXFFT];		/* Data buffer: 2*Points in spectrum */

double	mindB = -120.0;
int	lflag = 0;
int	cflag = 0;
int	phase = 0;
int	linear_output = 0;
int	ascii_output = 0;
int	normalize_output = 0;

double	cbfilter[27];
void	cbweights(double *filter, int window, int points);
double	cbsum;
void	fftdisp(double *dat, int N);
void	fftmag2(double *mags, double *dat, int N);
void	fftphase(double *dat, int N);
void	rfft();
void	LintoLog(double *in, double *out, int num);

static const char usage[] = "\
Usage: dfft [options] [width (1024)] < doubles > 512logmags\n\
  -d dB  minimum dB (default 120)\n\
  -l     log frequency scale\n\
  -c     critical band filter (3rd octave)\n\
  -N	 normalized PSD to max magnitude\n\
  -L	 linear output (no dB mag)\n\
  -A     ascii output\n\
";

int main(int argc, char **argv)
{
	int	i, n, c;
	int	L = 1024;

	if( isatty(fileno(stdin)) || isatty(fileno(stdout)) ) {
		bu_exit(1, "%s", usage );
	}

	while( (c = bu_getopt(argc, argv, "d:clpLANh")) != EOF)
	    switch(c) {
	    case 'd': mindB = -atof(optarg); break;
	    case 'c': cflag++; break;
	    case 'l': lflag++; break;
	    case 'p': phase++; break;
	    case 'L': linear_output++; break;
	    case 'A': ascii_output++; break;
	    case 'N': normalize_output++; break;
	    case 'h': printf("%s", usage); return EXIT_SUCCESS;
	    case ':': printf("Missing argument to %c\n%s\n", c, usage); return EXIT_FAILURE;
	    case '?':
	    default:  printf("Unknown argument: %c\n%s\n", c, usage); return EXIT_FAILURE;
	    }

	if( L > MAXFFT ) {
		fprintf( stderr, "dfft: can't go over %d\n", MAXFFT );
		exit( 2 );
	}

	/* Calculate Critical Band filter weights */
	if (cflag) {
		cbweights(&cbfilter[0], L, 19);
		cbsum = 0.0;
		for (i = 0; i < 19; i++)
			cbsum += cbfilter[i];
	}

	while ((n = fread(data, sizeof(*data), L, stdin)) > 0) {
		if (n != L) {
			fprintf( stderr, "dfft: warning - partial record, adding %d zeros\n", L-n );
			memset((char *)&data[n], 0, L-n);
		}

		/* Do a spectrum */
		/* if (L == 256) rfft256(data); etc. XXX */
		rfft(data, L);

		/* Put it on screen */
		if (phase)
			fftphase(data, L);
		else
			fftdisp(data, L);
	}

	return 0;
}

void
fftdisp(double *dat, int N)
{
	int	i, j;
	double	mags[MAXOUT];

	/* Periodogram scaling */
	for( i = 0; i < N; i++ )
		dat[i] /= (double)N;

	fftmag2( mags, dat, N );

	/* Interp to Log freq scale */
	if( lflag ) {
		double	logout[MAXOUT+1];

		LintoLog( mags, logout, N/2 );
		/* put result back in mags */
		for( i = 0; i < N/2; i++ )
			mags[i] = logout[i];
	}

	/* Critical Band Filter */
	if( cflag ) {
		double	sum;
		double	tmp[MAXOUT];

		/* save working copy */
		for( i = 0; i < N/2; i++ )
			tmp[i] = mags[i];

		/* filter it */
		for( i = 0+9; i < N/2-9; i++ ) {
			sum = 0.0;
			for( j = -9; j <= 9; j++ )
				sum += tmp[i+j] * cbfilter[j+9];
			mags[i] = sum / cbsum;
		}
	}

	if (normalize_output) {
		double max = mags[1];		/* XXX or [0] ? */
		for (i = 1; i < N/2; i++) {
			if (mags[i] > max)
				max = mags[i];
		}
		if (linear_output) {
			for (i = 0; i < N/2; i++) {
				mags[i] /= max;
			}
		} else {
			for (i = 0; i < N/2; i++) {
				mags[i] -= max;
				if (mags[i] < mindB)
					mags[i] = mindB;
			}
		}
	}

	if (ascii_output) {
		for (i = 0; i < N/2; i++) {
			printf("%g %g\n", i/(double)N, mags[i]);
		}
	} else {
#if 0
		/* normalize dB range from 0 to 1 */
		value = (dB/mindB) + 1.0;
		if( value < 0 ) value = 0;
		else if( value > 1.0 ) value = 1.0;
#endif
		fwrite( mags, sizeof(*mags), N/2, stdout );
	}
}

void
fftmag2(double *mags, double *dat, int N)
{
	int	i;
	double	value, dB;

	/* DC */
	mags[0] = dat[0]*dat[0];

	/* Normal */
	for( i = 1; i < N/2; i++ ) {
		mags[i] = dat[i]*dat[i] + dat[N-i]*dat[N-i];
	}

	/* Nyquist */
	mags[N/2] = dat[N/2]*dat[N/2];


	if (linear_output) {
#if 0
		for (i = 0; i <= N/2; i++) {
			mags[i] = sqrt(mags[i]);	/*XXX?*/
		}
#endif
		;
	} else {
		/* Log output */
		for (i = 0; i <= N/2; i++) {
			value = mags[i];
			if( value > 1.0e-18 )
				dB = 10*log10(value);
			else
				dB = -180.0;
			mags[i] = dB;
		}
	}
}

void
fftphase(double *dat, int N)
{
	int	i;
	double	value, out[MAXFFT];

	for( i = 0; i < N; i++ )
		dat[i] /= (double)N;

	for( i = 1; i < N/2; i++ ) {
		value = atan2( dat[N-i], dat[i] );
		out[i] = value / M_PI;
	}
	/* DC */
	out[i] = 0;

	fwrite( out, sizeof(*out), N/2, stdout );
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.13
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@d109 1
a109 1
			bzero( (char *)&data[n], L-n);
@


14.12
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d59 1
a59 1
char usage[] = "\
d75 1
a75 2
		fprintf( stderr, usage );
		exit( 1 );
d87 1
a87 1
	    case 'h': printf(usage); return EXIT_SUCCESS;
@


14.11
log
@removed trailing whitespace
@
text
@a28 1

d32 1
a32 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.10
log
@remove the "complex.h" include
@
text
@d95 1
a95 1
	    case '?': 
@


14.9
log
@eliminate complex.h
@
text
@a40 1
#include "./complex.h"
@


14.8
log
@coerce dfft to use bu_getopt instead of the big whileifelseifelseif construct
@
text
@d256 1
a256 1
		out[i] = value / PI;
@


14.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d77 2
a78 2
	int	i, n;
	int	L;
d85 14
a98 22
	while( argc > 1 ) {
		if( strcmp(argv[1], "-d") == 0 ) {
			mindB = -atof( argv[2] );
			argc--;
			argv++;
		} else if( strcmp(argv[1], "-c") == 0 ) {
			cflag++;
		} else if( strcmp(argv[1], "-l") == 0 ) {
			lflag++;
		} else if( strcmp(argv[1], "-p") == 0 ) {
			phase++;
		} else if( strcmp(argv[1], "-L") == 0 ) {
			linear_output++;
		} else if( strcmp(argv[1], "-A") == 0 ) {
			ascii_output++;
		} else if( strcmp(argv[1], "-N") == 0 ) {
			normalize_output++;
		} else
			break;
		argc--;
		argv++;
	}
a99 1
	L = (argc > 1) ? atoi(argv[1]) : 1024;
@


14.6
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.5
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.4
log
@update copyright to 2006
@
text
@d31 3
a33 1

d35 1
a35 1
#include <string.h>
d37 1
a37 1
#include <strings.h>
d39 1
a40 4
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
@


14.3
log
@update copyright to 2005
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *		D F F T
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d255 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d13 1
a13 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d9 1
a9 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

