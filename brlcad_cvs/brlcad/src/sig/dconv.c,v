head	14.11;
access;
symbols
	rel-7-10-4:14.7
	STABLE:14.7.0.2
	stable-branch:14.3
	rel-7-10-2:14.7
	rel-7-10-0:14.7
	rel-7-8-4:14.4
	rel-7-8-2:14.4
	rel-7-8-0:14.4
	trimnurbs-branch:14.4.0.2
	help:14.4
	temp_tag:14.3
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.3
	premerge-20051223-bobWinPort:14.3
	rel-7-6-6:14.3
	rel-7-6-4:14.3
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.11
date	2007.12.16.18.53.51;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.12.16.15.59.40;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.12.02.22.34.24;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.09.15.16.23.21;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.27.01.41.45;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.23.01.13.47;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2007.01.20.14.37.00;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2006.01.18.06.46.24;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.12;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.11.57;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.52;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.11
log
@convert usages of bcopy to memcpy throughout.  although none of them should be buffers that overlap per machine.h history, all calls were individually checked regardless. new code should not use bzero/bcopy any more.
@
text
@/*                         D C O N V . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file dconv.c
 *
 *  Fast FFT based convolution
 *
 *  This uses the overlap-save method to achieve a linear convolution
 *  (straight FFT's give you a circular convolution).
 *  An M-point kernel is convolved with N-point sequences (in xform space).
 *  The first M-1 points are incorrect, while the remaining points yield
 *  a true linear convolution.  Thus the first M-1 points of each xform
 *  are thrown away, while the last M-1 points of each input section
 *  are saved for the next xform.
 */
#include "common.h"

#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "machine.h"

#define	MAXM	4096

void	rfft256();
void	rfft();
void	irfft256();
void	irfft();

double	savebuffer[MAXM-1];
double	xbuf[2*MAXM];
double	ibuf[2*MAXM];		/* impulse response */

void	mult(double *o, double *b, int n);

static const char usage[] = "\
Usage: dconv filter < doubles > doubles\n\
 XXX Warning: kernal size must be 2^i - 1\n";

int main(int argc, char **argv)
{
	int	i;
	int	N, M, L;
	FILE	*fp;

	M = 128;	/* kernel size */
	N = 2*M;	/* input sub-section length (fft size) */
	L = N - M + 1;	/* number of "good" points per section */

	if( argc != 2 || isatty(fileno(stdin)) || isatty(fileno(stdout)) ) {
		bu_exit(1, "%s", usage );
	}

#ifdef never
	/* prepare the kernel(!) */
	/* this is either the direct complex response,
	 *  or the FT(impulse resp)
	 */
	for( i = 0; i < N; i++ ) {
		if( i <= N/2 )
			ibuf[i] = 1.0;	/* Real part */
		else
			ibuf[i] = 0.0;	/* Imag part */
	}
#endif /* never */

	if( (fp = fopen( argv[1], "r" )) == NULL ) {
		fprintf( stderr, "dconv: can't open \"%s\"\n", argv[1] );
		exit( 2 );
	}
	if( (M = fread( ibuf, sizeof(*ibuf), 2*MAXM, fp )) == 0 ) {
		fprintf( stderr, "dconv: problem reading filter file\n" );
		exit( 3 );
	}
	fclose( fp );
	if( M > MAXM ) {
		fprintf( stderr, "dconv: only compiled for up to %d sized filter kernels\n", MAXM );
		exit( 4 );
	}
/*XXX HACK HACK HACK HACK XXX*/
/* Assume M = 2^i - 1 */
M += 1;
	N = 2*M;	/* input sub-section length (fft size) */
	L = N - M + 1;	/* number of "good" points per section */

	if( N == 256 )
		rfft256( ibuf );
	else
		rfft( ibuf, N );

	while( (i = fread(&xbuf[M-1], sizeof(*xbuf), L, stdin)) > 0 ) {
		if( i < L ) {
			/* pad the end with zero's */
			memset((char *)&xbuf[M-1+i], 0, (L-i)*sizeof(*savebuffer));
		}
		memcpy(xbuf, savebuffer, (M-1)*sizeof(*savebuffer));
		memcpy(savebuffer, &xbuf[L], (M-1)*sizeof(*savebuffer));

		/*xform( xbuf, N );*/
		if( N == 256 )
			rfft256( xbuf );
		else
			rfft( xbuf, N );

		/* Mult */
		mult( xbuf, ibuf, N );

		/*invxform( xbuf, N );*/
		if( N == 256 )
			irfft256( xbuf );
		else
			irfft( xbuf, N );

		fwrite( &xbuf[M-1], sizeof(*xbuf), L, stdout );
	}

	return 0;
}

/*
 *  Multiply two "real valued" spectra of length n
 *  and put the result in the first.
 *  The order is: [Re(0),Re(1)...Re(N/2),Im(N/2-1),...,Im(1)]
 *    so for: 0 < i < n/2, (x[i],x[n-i]) is a complex pair.
 */
void
mult(double *o, double *b, int n)
{
	int	i;
	double	r;

	/* do DC and Nyquist components */
	o[0] *= b[0];
	o[n/2] *= b[n/2];

	for( i = 1; i < n/2; i++ ) {
		r = o[i] * b[i] - o[n-i] * b[n-i];
		o[n-i] = o[i] * b[n-i] + o[n-i] * b[i];
		o[i] = r;
	}
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.10
log
@convert all bzero calls to memset
@
text
@d115 2
a116 2
		bcopy( savebuffer, xbuf, (M-1)*sizeof(*savebuffer) );
		bcopy( &xbuf[L], savebuffer, (M-1)*sizeof(*savebuffer) );
@


14.9
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@d113 1
a113 1
			bzero( (char *)&xbuf[M-1+i], (L-i)*sizeof(*savebuffer) );
@


14.8
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d55 1
a55 1
static char usage[] = "\
d70 1
a70 2
		fprintf( stderr, usage );
		exit( 1 );
@


14.7
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a33 2

#ifdef HAVE_STRING_H
a34 4
#else
#include <strings.h>
#endif

d39 1
@


14.6
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a34 1

@


14.5
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.4
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D C O N V . C
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d150 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d18 1
a18 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d14 1
a14 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

