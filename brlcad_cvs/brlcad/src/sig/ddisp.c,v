head	14.10;
access;
symbols
	rel-7-10-4:14.8
	STABLE:14.8.0.2
	stable-branch:14.3
	rel-7-10-2:14.8
	rel-7-10-0:14.8
	rel-7-8-4:14.5
	rel-7-8-2:14.5
	rel-7-8-0:14.5
	trimnurbs-branch:14.5.0.2
	help:14.5
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.3
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.6
	rel-7-6-0:14.3
	rel-7-4-2:14.3
	rel-7-4-branch:14.3.0.4
	bobWinPort:14.3.0.2
	rel-7-4-0:14.3
	rel-7-2-6:14.3
	rel-7-2-4:14.3
	rel-7-2-2:14.3
	rel-7-2-0:14.3
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.10
date	2007.12.02.22.34.24;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.09.15.16.23.21;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.27.01.41.45;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.23.01.13.47;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2007.01.20.14.37.00;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.18.06.46.24;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.38;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.31.12;	author brlcad;	state Exp;
branches
	14.3.6.1;
next	14.2;

14.2
date	2004.12.21.03.11.57;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.03.23.30.59;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.52;	author morrison;	state Exp;
branches;
next	;

14.3.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.10
log
@woo hoo, finally got through most of the flawfinder level 4 issues related to string buffer limits (leaving issues that can probably/mostly be ignored).  these changes mostly invovlved using the n-variants of the various string processing functions so that the buffers being written to are properly clamped.
@
text
@/*                         D D I S P . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file ddisp.c
 *
 *  Data Display - shows doubles on a framebuffer in various ways.
 */
#include "common.h"

#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#include "machine.h"
#include "fb.h"

#define	MAXPTS 4096

double	buf[MAXPTS];

int	Clear = 0;
int	pause_time = 0;
int	mode = 0;
#define	VERT	1
#define	BARS	2

FBIO	*fbp;
int	fbsize = 512;

void	lineout(double *dat, int n);
void	disp_inten(double *buf, int size);
void	disp_bars(double *buf, int size);

static const char usage[] = "\
Usage: ddisp [-v -b -p -c -h] [width (512)]\n";

int main(int argc, char **argv)
{
	int	n, L;

	while( argc > 1 ) {
		if( strcmp(argv[1], "-v") == 0 ) {
			mode = VERT;
			pause_time = 0;
			Clear = 0;
		} else if( strcmp(argv[1], "-b") == 0 ) {
			mode = BARS;
		} else if( strcmp(argv[1], "-p") == 0 ) {
			pause_time = 3;
		} else if( strcmp(argv[1], "-c") == 0 ) {
			Clear++;
		} else if( strcmp(argv[1], "-h") == 0 ) {
			fbsize = 1024;
		} else
			break;
		argc--;
		argv++;
	}

	if( isatty(fileno(stdin)) ) {
		bu_exit(1, "%s", usage );
	}
	if( (fbp = fb_open( NULL, fbsize, fbsize )) == FBIO_NULL ) {
		exit( 2 );
	}

	L = (argc > 1) ? atoi(argv[1]) : 512;

	while( (n = fread(buf, sizeof(*buf), L, stdin)) > 0 ) {
		/* XXX - width hack */
		if( n > fb_getwidth(fbp) )
			n = fb_getwidth(fbp);

		if( Clear )
			fb_clear( fbp, PIXEL_NULL );
		if( mode == VERT )
			disp_inten( buf, n );
		else if( mode == BARS )
			disp_bars( buf, n );
		else
			lineout( buf, n );
		if( pause_time )
			sleep( pause_time );
	}
	fb_close(fbp);

	return 0;
}

void
lineout(double *dat, int n)
{
	static	int	y = 0;
	int	i, value;
	RGBpixel lbuf[1024*4];

	if( n > fb_getwidth(fbp) ) n = fb_getwidth(fbp);

	for( i = 0; i < n; i++ ) {
		/* Magnitude version */
		value = dat[i] * 255.9;
		if( value < 0 ) value = 0;
		else if( value > 255 ) value = 255;
		lbuf[i][RED] = lbuf[i][GRN] = lbuf[i][BLU] = value;
	}
	fb_write( fbp, 0, y, (unsigned char *)lbuf, n );

	/* Next screen position */
	y = (y + 1) % fb_getheight(fbp);
}

/*
 *  Display doubles.
 *  +/- 1.0 in, becomes +/- 128 from center Y.
 */
void
disp_inten(double *buf, int size)
{
	int	x, y;
	RGBpixel color;

/*	color.red = color.green = color.blue = 255;*/

	if( size > fb_getwidth(fbp) ) size = fb_getwidth(fbp);

	for( x = 0; x < size; x++ ) {
		y = buf[x] * 128;
#ifdef OVERLAY
		fb_read( fbp, x, y+255, color, 1 );
#else
		color[RED] = color[BLU] = 0;
#endif
		color[GRN] = 255;
		fb_write( fbp, x, y+255, color, 1 );
	}
}

/*
 *  Display doubles.
 *  +/- 1.0 in, becomes +/- 128 from center Y.
 */
void
disp_bars(double *buf, int size)
{
	int	x, y;
	RGBpixel color;

/*	color.red = color.green = color.blue = 255;*/

	if( size > fb_getwidth(fbp) ) size = fb_getwidth(fbp);

	for( x = 0; x < size; x++ ) {
		if( buf[x] > 1.0 ) {
			y = 128;
		} else if( buf[x] < -1.0 ) {
			y = -128;
		} else {
			y = buf[x] * 128;
		}
#ifdef OVERLAY
		fb_read( fbp, x, y+255, color, 1 );
#else
		color[RED] = color[BLU] = 0;
#endif
		color[GRN] = 255;
		if( y > 0 ) {
			while( y >= 0 ) {
				fb_write( fbp, x, y+255, color, 1 );
				y--;
			}
		} else {
			while( y <= 0 ) {
				fb_write( fbp, x, y+255, color, 1 );
				y++;
			}
		}
	}
}

#ifdef OLDANDCRUFTY
	/* Calculate Critical Band filter weights */
	if( cflag ) {
		cbweights( &cbfilter[0], window_size, 19 );
		cbsum = 0.0;
		for( i = 0; i < 19; i++ )
			cbsum += cbfilter[i];
	}

/*
 * Scale 0 -> 65536 to 0 -> 100 then double it.
 *  (so 32767 is 100)
 */
disp_mag( buf, size )
#ifdef FHT
double	buf[];
#else
COMPLEX	buf[];
#endif
int size;
{
	int	i, j, x;
	int	mag;
	double	value, sum;
	double	lin[513], logout[513];
	RGBpixel mcolor;

	if( size > 1024 ) size = 1024;

	/* Put magnitudes in linear buffer */
/*	lin[0] = buf[0]/256.0;  NO DC ON LOG SCALE! */
	for (i = 1; i < size/2; i++) {
#ifdef FHT
		value = 2.0*sqrt((buf[i]*buf[i]
			+buf[512-i]*buf[512-i])/2.0) / 256.0;
#else
		value = hypot( buf[i].re, buf[i].im );
#endif
/*printf("mag = %f, ", value );*/
		if( value < 0.6 )
			value = 0.0;
		else
			value = 20.0 * log10( value / 65535.0 ) + 100.0;
/*printf("value = %f\n", value );*/
		lin[i-1] = value;
	}
#ifdef FHT
	lin[size/2-1] = buf[size/2]/256.0;
#else
	lin[size/2-1] = buf[size/2].re/256.0;
#endif
	/* Interp to Log scale */
	if( lflag ) {
		LintoLog( lin, logout, size/2 );
	} else {
		for( i = 0; i < size/2; i++ )
			logout[i] = lin[i];	/* yeah, this does suck. */
	}

	/* Critical Band Filter */
	if( cflag ) {
		for( i = 0; i < size/2; i++ )
			lin[i] = logout[i];	/* Borrow lin */
		for( i = 0+9; i < size/2-9; i++ ) {
			sum = 0.0;
			for( j = -9; j <= 9; j++ )
				sum += lin[i+j] * cbfilter[j+9];
			logout[i] = sum / cbsum;
		}
	}

	/* Plot log values */
	for( i = 0; i < size/2 + 1; i++ ) {
		mag = 2.0*logout[i] + 0.5;	/* 200 point range */
		if( size > 512 ) x = i;
		else x = 2*i;
#ifdef OVERLAY
		fb_read( fbp, x, mag+255, mcolor, 1 );
#else
		mcolor[RED] = mcolor[GRN] = 0;
#endif
		mcolor[BLU] = 255;
		fb_write( fbp, x, mag+255, mcolor, 1 );
		if( size <= 512 ) {
#ifdef OVERLAY
			fb_read( fbp, x+1, mag+255, mcolor, 1 );
#else
			mcolor[RED] = mcolor[GRN] = 0;
#endif
			mcolor[BLU] = 255;
			fb_write( fbp, x+1, mag+255, mcolor, 1 );
		}
	}
}

/*
 * -PI -> PI becomes -128 -> 128
 */
disp_phase( buf, size )
#ifdef FHT
double	buf[];
#else
COMPLEX	buf[];
#endif
int size;
{
	int	i, x;
	int	mag;
	double	angle;
	RGBpixel mcolor;

	if( size > 1024 ) size = 1024;

#ifdef OVERLAY
	fb_read( fbp, 0, 255, mcolor, 1 );
#else
	mcolor[GRN] = mcolor[BLU] = 0;
#endif
	mcolor[RED] = 255;
	fb_write( fbp, 0, 255, mcolor, 1 );
	for (i = 1; i < size/2; i++) {
#ifdef FHT
		if( fabs(buf[i]+buf[size-i]) < 0.0001 )
			angle = PI / 2.0;
		else
			angle = atan( (buf[i]-buf[size-i])/
				      (buf[i]+buf[size-i]) );
#else
		/* four quadrant arctan.  THIS NEEDS WORK - XXX */
/*fprintf( stderr, "%3d: (%10f,%10f) -> ", i, buf[i].re, buf[i].im );*/
		if( fabs( buf[i].re ) < 1.0e-10 ) {
			/* XXX - check for im equally small */
			if( fabs( buf[i].im ) < 1.0e-10 )
				angle = 0.0;
			else
				angle = (buf[i].im > 0.0) ? PI/2.0 : -PI/2.0;
		} else {
			angle = atan( buf[i].im / buf[i].re );
			if( buf[i].re < 0.0 )
				angle += (buf[i].im > 0.0) ? PI : -PI;
		}
/*fprintf( stderr, "%10f Deg\n", RtoD(angle) );*/
#endif
		mag = (128.0/PI)*angle + 0.5;
#ifdef DEBUG
printf("(%6.3f,%6.3f): angle = %7.3f (%6.2f), mag = %d\n",
	buf[i].re, buf[i].im, angle, RtoD( angle ), mag );
#endif /* DEBUG */
		if( size > 512 ) x = i;
		else x = 2*i;
#ifdef OVERLAY
		fb_read( fbp, x, mag+255, mcolor, 1 );
#else
		mcolor[GRN] = mcolor[BLU] = 0;
#endif
		mcolor[RED] = 255;
		fb_write( fbp, x, mag+255, mcolor, 1 );
		if( size <= 512 ) {
#ifdef OVERLAY
			fb_read( fbp, x+1, mag+255, mcolor, 1 );
#else
			mcolor[GRN] = mcolor[BLU] = 0;
#endif
			mcolor[RED] = 255;
			fb_write( fbp, x+1, mag+255, mcolor, 1 );
		}
	}
#ifdef OVERLAY
	fb_read( fbp, size/2, 255, mcolor, 1 );
#else
	mcolor[GRN] = mcolor[BLU] = 0;
#endif
	mcolor[RED] = 255;
	fb_write( fbp, size/2, 255, mcolor, 1 );
}
#endif /* OLDANDCRUFTY */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.9
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d51 1
a51 1
static char usage[] = "\
d78 1
a78 2
		fprintf( stderr, usage );
		exit( 1 );
@


14.8
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@a25 2

#ifdef HAVE_STRING_H
a26 4
#else
#include <strings.h>
#endif

d30 1
@


14.7
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a26 1

@


14.6
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.5
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
@


14.4
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
@


14.3
log
@update copyright to 2005
@
text
@d233 1
a233 1
	
@


14.3.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d233 1
a233 1

@


14.2
log
@assign copyright and GPL
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			D D I S P . C
@


1.3
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d362 10
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d10 1
a10 1
#ifdef USE_STRING_H
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d6 1
a6 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

