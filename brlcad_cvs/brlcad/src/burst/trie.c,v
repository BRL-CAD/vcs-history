head	14.12;
access;
symbols
	rel-7-10-4:14.12
	STABLE:14.12.0.2
	stable-branch:14.4
	rel-7-10-2:14.12
	rel-7-10-0:14.10
	rel-7-8-4:14.7
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.4
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.4
	rel-7-6-branch:14.4.0.6
	rel-7-6-0:14.4
	rel-7-4-2:14.4
	rel-7-4-branch:14.4.0.4
	bobWinPort:14.4.0.2
	rel-7-4-0:14.4
	rel-7-2-6:14.4
	rel-7-2-4:14.4
	rel-7-2-2:14.4
	rel-7-2-0:14.4
	rel-7-0-4:14.3
	rel-7-0-2:14.3
	rel-7-0-1:14.3
	opensource-post:14.3
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@ * @;


14.12
date	2007.07.26.01.13.50;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.05.14.21.04.29;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.02.20.08.19.47;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.23.01.13.24;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.20.14.36.42;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.13;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.11.04.14.50.57;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.11.04.10.43.04;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.30.20.30.16;	author brlcad;	state Exp;
branches
	14.4.6.1;
next	14.3;

14.3
date	2004.12.18.06.50.49;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.18.01.52.36;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.18.44;	author morrison;	state Exp;
branches;
next	;

14.4.6.1
date	2005.11.13.13.46.13;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.12
log
@remove ephemeral data like phone numbers and addresses, including the misleading 'source' statements on code that is continually evolving and receiving contributions from many many sources
@
text
@/*                          T R I E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @@file trie.c
 *	Author:		Gary S. Moss
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.11 2007/05/14 21:04:29 brlcad Exp $ (BRL)";
#endif

#include "common.h"

#include <assert.h>
#include <stdio.h>
#include <signal.h>

#include "./burst.h"
#include "./trie.h"
#include "./ascii.h"
#include "./extern.h"


static Func *matchTrie();

/*
	Trie *addTrie( char *name, Trie **triepp )

	Insert the name in the trie specified by triepp, if it
		doesn't already exist there.
	Return pointer to leaf node associated with name.
 */
Trie	*
addTrie( name, triepp )
register char *name;
register Trie **triepp;
	{	register Trie *curp;
	if( *name == NUL )
		{ /* End of name, see if name already exists. */
		if( *triepp == TRIE_NULL )
			{ /* Name does not exist, make leaf node. */
			NewTrie( *triepp );
			(*triepp)->l.t_altr = (*triepp)->l.t_next
					    = TRIE_NULL;
			(*triepp)->l.t_func = NULL_FUNC;
			}
		else
		if( (*triepp)->n.t_next != TRIE_NULL )
			/* Name is subset of another name. */
			return	addTrie( name, &(*triepp)->n.t_altr );
		/* else -- Name already inserted, so do nothing. */
		return	*triepp;
		}
	/* Find matching letter, this level.  */
	for(	curp = *triepp;
		curp != TRIE_NULL && *name != curp->n.t_char;
		curp = curp->n.t_altr
		)
		;
	if( curp == TRIE_NULL )
		{ /* No Match, this level, so create new alternate. */
		curp = *triepp;
		NewTrie( *triepp );
		(*triepp)->n.t_altr = curp;
		(*triepp)->n.t_char = *name;
		(*triepp)->n.t_next = TRIE_NULL;
		return	addTrie( ++name, &(*triepp)->n.t_next );
		}
	else
		/* Found matching character. */
		return	addTrie( ++name, &curp->n.t_next );
	}

Func	*
getTrie( name, triep )
register char	*name;
register Trie	*triep;
	{	register Trie *curp = NULL;
	assert( triep != TRIE_NULL );

	/* Traverse next links to end of region name. */
	for( ; triep != TRIE_NULL; triep = triep->n.t_next )
		{
		curp = triep;
		if( *name == NUL )
			{ /* End of user-typed name. */
			if( triep->n.t_altr != TRIE_NULL )
				/* Ambiguous at this point. */
				return	NULL_FUNC;
			else	  /* Complete next character. */
				{
				*name++ = triep->n.t_char;
				*name = NUL;
				}
			}
		else
		if( *name == '*' )
			return	matchTrie( triep );
		else	/* Not at end of user-typed name yet, traverse
				alternate list to find current letter.
			  */
			{
			for(	;
				triep != TRIE_NULL
			    &&	*name != triep->n.t_char;
				triep = triep->n.t_altr
				)
				;
			if( triep == TRIE_NULL )
				/* Non-existant name, truncate bad part. */
				{
				*name = NUL;
				return	NULL_FUNC;
				}
			else
				name++;
			}
		}
	/* Clobber key-stroke, and return it. */
	--name;
	*name = NUL;
	assert( curp != TRIE_NULL );
	return	curp->l.t_func;
	}

#define MAX_TRIE_LEVEL	(32*16)

static Func	*
matchTrie( triep )
register Trie	*triep;
	{	Func	*func;
	if( triep == TRIE_NULL )
		func = NULL_FUNC;
	else
	if( triep->n.t_altr != TRIE_NULL )
		func = NULL_FUNC;	/* Ambiguous root, no match.  */
	else
	if( triep->n.t_next == TRIE_NULL )
		func = triep->l.t_func;	/* At leaf node, return datum.  */
	else				/* Keep going to leaf.  */
		func = matchTrie( triep->n.t_next );
	return	func;
	}

void
prntTrie( triep, level )
Trie	*triep;
int	level;
	{	register Trie	*tp = triep;
		static char	name_buf[MAX_TRIE_LEVEL+1], *namep;
#if DEBUG_TRIE
	brst_log( "prntTrie(triep=0x%x,level=%d)\n", triep, level );
#endif
	if( tp == TRIE_NULL )
		return;
	if( tp->n.t_altr != TRIE_NULL )
		prntTrie( tp->n.t_altr, level );
	if( level == 0 )
		namep = name_buf;
	*namep = tp->n.t_char;
	if( tp->n.t_next == TRIE_NULL )
		{
		/* At end of name, so print it out. */
		*namep = NUL;
		brst_log( "%s\n", name_buf );
		}
	else
		{
		namep++;
		prntTrie( tp->n.t_next, level+1 );
		namep--;
		}
	return;
	}

int
writeTrie( triep, level, fp )
Trie	*triep;
int	level;
FILE	*fp;
	{	register Trie	*tp = triep;
		static char	name_buf[MAX_TRIE_LEVEL+1], *namep;
	if( tp == TRIE_NULL )
		return	1;
	if( tp->n.t_altr != TRIE_NULL )
		(void) writeTrie( tp->n.t_altr, level, fp );
	if( level == 0 )
		namep = name_buf;
	*namep = tp->n.t_char;
	if( tp->n.t_next == TRIE_NULL )
		{
		/* At end of name, so print it out. */
		*namep = NUL;
		(void) fprintf(	fp, "%s\n", name_buf );
		}
	else
		{
		namep++;
		(void) writeTrie( tp->n.t_next, level+1, fp );
		namep--;
		}
	return	1;
	}

int
readTrie( fp, triepp )
FILE	*fp;
Trie	**triepp;
	{	static char	name_buf[MAX_TRIE_LEVEL+1];
	while( bu_fgets( name_buf, MAX_TRIE_LEVEL, fp ) != NULL )
		{
		name_buf[strlen(name_buf)-1] = '\0'; /* Clobber new-line. */
		(void) addTrie( name_buf, triepp );
		}
	return	1;
	}

void
ring_Bell()
	{
	(void) putchar( BEL );
	return;
	}

char	*
char_To_String( i )
int	i;
	{	static char	buf[4];
	if( i >= SP && i < DEL )
		{
		buf[0] = i;
		buf[1] = NUL;
		}
	else
	if( i >= NUL && i < SP )
		{
		buf[0] = '^';
		buf[1] = i + 64;
		buf[2] = NUL;
		}
	else
	if( i == DEL )
		return	"DL";
	else
		return	"EOF";
	return	buf;
	}

#if false
/*
	Func *getFuncNm( char *inbuf, int bufsz, char *msg, Trie **triepp )
	TENEX-style name completion.
	Returns a function pointer.
  */
Func	*
getFuncNm( inbuf, bufsz, msg, triepp )
char	 *inbuf;
int	 bufsz;
char	*msg;
Trie	**triepp;
	{	static char	buffer[BUFSIZ];
		register char	*p = buffer;
		register int	c;
		Func		*funcp;
	if( tty )
		{
		save_Tty( 0 );
		set_Raw( 0 );
		clr_Echo( 0 );
		}
	prompt( msg );
	*p = NUL;
	do
		{
		(void) fflush( stdout );
		c = hm_getchar();
		switch( c )
			{
		case SP :
			{
			if(	*triepp == TRIE_NULL
			    ||	(funcp = getTrie( buffer, *triepp ))
				== NULL_FUNC
				)
				(void) putchar( BEL );
			for( ; p > buffer; p-- )
				(void) putchar( BS );
			(void) printf( "%s", buffer );
			(void) ClrEOL();
			(void) fflush( stdout );
			p += strlen( buffer );
			break;
			}
		case Ctrl('A') : /* Cursor to beginning of line. */
			if( p == buffer )
				{
				ring_Bell();
				break;
				}
			for( ; p > buffer; p-- )
				(void) putchar( BS );
			break;
		case Ctrl('B') :
		case BS : /* Move cursor back one character. */
			if( p == buffer )
				{
				ring_Bell();
				break;
				}
			(void) putchar( BS );
			--p;
			break;
		case Ctrl('D') : /* Delete character under cursor. */
			{	register char	*q = p;
			if( *p == NUL )
				{
				ring_Bell();
				break;
				}
			for( ; *q != NUL; ++q )
				{
				*q = *(q+1);
				(void) putchar( *q != NUL ? *q : SP );
				}
			for( ; q > p; --q )
				(void) putchar( BS );
			break;
			}
		case Ctrl('E') : /* Cursor to end of line. */
			if( *p == NUL )
				{
				ring_Bell();
				break;
				}
			(void) printf( "%s", p );
			p += strlen( p );
			break;
		case Ctrl('F') : /* Cursor forward one character. */
			if( *p == NUL || p-buffer >= bufsz-2 )
				{
				ring_Bell();
				break;
				}
			(void) putchar( *p++ );
			break;
		case Ctrl('G') : /* Abort input. */
			ring_Bell();
			notify( "Aborted.", NOTIFY_APPEND );
			goto	clean_return;
		case Ctrl('K') : /* Erase from cursor to end of line. */
			if( *p == NUL )
				{
				ring_Bell();
				break;
				}
			ClrEOL();
			*p = NUL;
			break;
		case Ctrl('P') : /* Yank previous contents of "inbuf". */
			{	register int	len = strlen( inbuf );
			if( (p + len) - buffer >= BUFSIZ )
				{
				ring_Bell();
				break;
				}
			(void) strncpy( p, inbuf, bufsz );
			(void) printf( "%s", p );
			p += len;
			break;
			}
		case Ctrl('U') : /* Erase from start of line to cursor. */
			if( p == buffer )
				{
				ring_Bell();
				break;
				}
			for( ; p > buffer; --p )
				{	register char	*q = p;
				(void) putchar( BS );
				for( ; *(q-1) != NUL; ++q )
					{
					*(q-1) = *q;
					(void) putchar( *q != NUL ? *q : SP );
					}
				for( ; q > p; --q )
					(void) putchar( BS );
				}
			break;
		case Ctrl('R') : /* Print line, cursor doesn't move. */
			{	register int	i;
			if( buffer[0] == NUL )
				break;
			for( i = p - buffer; i > 0; i-- )
				(void) putchar( BS );
			(void) printf( "%s", buffer );
			for( i = strlen( buffer ) - (p - buffer); i > 0; i-- )
				(void) putchar( BS );
			break;
			}
		case DEL : /* Delete character behind cursor. */
			{	register char	*q = p;
			if( p == buffer )
				{
				ring_Bell();
				break;
				}
			(void) putchar( BS );
			for( ; *(q-1) != NUL; ++q )
				{
				*(q-1) = *q;
				(void) putchar( *q != NUL ? *q : SP );
				}
			for( ; q > p; --q )
				(void) putchar( BS );
			p--;
			break;
			}
		case CR :
		case LF :
		case EOF :
			if(	*triepp == TRIE_NULL
			    ||	(funcp = getTrie( buffer, *triepp ))
				== NULL_FUNC
				)
				{
				(void) putchar( BEL );
				break;
				}
			else
				{
				(void) strncpy( inbuf, buffer, bufsz );
				notify( NULL, NOTIFY_DELETE );
				goto clean_return;
				}
		case Ctrl('V') :
			/* Escape character, do not process next char. */
			c = hm_getchar();
			/* Fall through to default case! */
		default : /* Insert character at cursor. */
			{	register char	*q = p;
				register int	len = strlen( p );
			/* Scroll characters forward. */
			if( c >= NUL && c < SP )
				(void) printf( "%s", char_To_String( c ) );
			else
				(void) putchar( c );
			for( ; len >= 0; len--, q++ )
				(void) putchar( *q == NUL ? SP : *q );
			for( ; q > p; q-- )
				{
				(void) putchar( BS );
				*q = *(q-1);
				}
			*p++ = c;
			break;
			}
			} /* End switch.  */
		}
	while( strlen( buffer ) < BUFSIZ);
	ring_Bell();
	notify( "Buffer full.", NOTIFY_APPEND );
clean_return :
	prompt( "" );
	if( tty )
		reset_Tty( 0 );
	return	funcp;
	}
#endif

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.11
log
@gah, pick up where someone left off over half a decade ago.  finish updating all of the compat4 symbols throughout the code to their new names.  finally. it's done.  make the deprecated headers obsolete -- make compat4.h obsolete too so we can be sure that all of the changes are now picked up by the compiler as errors.  this change will likely impact muves if they've similarly not updated to the new names too, so the headers are kept with a #warning for now (though will likely disappear down the road entirely).
@
text
@d22 1
a22 4
	Author:		Gary S. Moss
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066
d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.10 2007/02/20 08:19:47 brlcad Exp $ (BRL)";
@


14.10
log
@update all usages of fgets() to instead use john's swanktastic bu_fgets() that behaves as one would generally want regardless of the line ending type of the compilation platform or of the input files.  bu_fgets() responds to input files that use CR (usually old mac), LF (usually unix, new mac), or CR/LF (usually windows) for the line ending so now these file do too effectivley squashing buggish/bad behavior.
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.9 2007/01/23 01:13:24 brlcad Exp $ (BRL)";
d64 1
a64 1
			(*triepp)->l.t_func = FUNC_NULL;
d108 1
a108 1
				return	FUNC_NULL;
d132 1
a132 1
				return	FUNC_NULL;
d152 1
a152 1
		func = FUNC_NULL;
d155 1
a155 1
		func = FUNC_NULL;	/* Ambiguous root, no match.  */
d302 1
a302 1
				== FUNC_NULL
d442 1
a442 1
				== FUNC_NULL
@


14.9
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.8 2007/01/20 14:36:42 brlcad Exp $ (BRL)";
d229 1
a229 1
	while( fgets( name_buf, MAX_TRIE_LEVEL, fp ) != NULL )
@


14.8
log
@update copyright to 2007
@
text
@d8 2
a9 3
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
d14 1
a14 1
 * General Public License for more details.
d16 2
a17 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.7 2006/01/18 06:46:13 brlcad Exp $ (BRL)";
@


14.7
log
@update copyright to 2006
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.6 2005/11/04 14:50:57 brlcad Exp $ (BRL)";
@


14.6
log
@burst the non-ansi-yet-willing-to-pretend-we-are-c99 bubble that the burst code likes to use.  that is, use static instead of STATIC and don't clobber the bool/true/false reserved words of the c++ compilers.  clean up the headers to support this.
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.5 2005/11/04 10:43:04 brlcad Exp $ (BRL)";
@


14.5
log
@DEBUG/NDEBUG cleanup, pull the value from and include common.h before system headers
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.4 2005/01/30 20:30:16 brlcad Exp $ (BRL)";
d44 1
a44 1
STATIC Func *matchTrie();
d148 1
a148 1
STATIC Func	*
@


14.4
log
@update copyright to 2005
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/burst/trie.c,v 14.3 2004/12/18 06:50:49 morrison Exp $ (BRL)";
d32 1
a32 6
#ifndef DEBUG
#define NDEBUG
#define STATIC static
#else
#define STATIC
#endif
d43 1
@


14.4.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d29 1
a29 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d32 6
a37 1
#include "common.h"
d48 1
a48 2

static Func *matchTrie();
d152 1
a152 1
static Func	*
@


14.3
log
@break up the doxygen marker to appease emacs M-x indent-region'ing
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/burst/trie.c,v 14.2 2004/12/18 01:52:36 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and GPL license
@
text
@d21 2
a22 1
 **//** @@file trie.c
d29 1
a29 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/burst/trie.c,v 14.1 2004/11/16 19:42:12 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
d28 1
a28 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/src/burst/trie.c,v 1.1 2004/05/20 15:18:44 morrison Exp $ (BRL)";
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d8 1
a8 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/burst/trie.c,v 1.9 2001/10/17 07:40:00 morrison Exp $ (BRL)";
d472 10
@

