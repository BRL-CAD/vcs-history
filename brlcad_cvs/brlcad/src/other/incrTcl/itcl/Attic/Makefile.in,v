head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2004.07.15.04.13.37;	author morrison;	state dead;
branches;
next	1.5;

1.5
date	2004.07.13.05.38.54;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.30.01.51.30;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.22.20.33.40;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.20.09.04.34;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.10.16.51.46;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.6
log
@what a royal pita...  time to give in and revert back to managing incrTcl explicitly.  too many cross-platform issues with their existing build files and it seems to be a relatively unsupported extension.  replace their build system files with ours.
@
text
@# Makefile.in --
#
#	This file is a Makefile for Sample TEA Extension.  If it has the name
#	"Makefile.in" then it is a template for a Makefile;  to generate the
#	actual Makefile, run "./configure", which is a configuration script
#	generated by the "autoconf" program (constructs like "@@foo@@" will get
#	replaced in the actual Makefile.
#
# Copyright (c) 1999 Scriptics Corporation.
# Copyright (c) 2002 ActiveState Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: Makefile.in,v 1.5 2004/07/13 05:38:54 morrison Exp $

#========================================================================
# Edit the following few lines when writing a new extension
#========================================================================

#========================================================================
# Enumerate the names of the source files included in this package.
# This will be used when a dist target is added to the Makefile.
#========================================================================

WIN_DIR		= @@itcl_SRC_DIR@@/win
UNIX_DIR	= @@itcl_SRC_DIR@@/unix
GENERIC_DIR	= @@itcl_SRC_DIR@@/generic
PLATFORM_DIR	= @@PLATFORM_DIR@@

WIN_SOURCES	= $(PLATFORM_DIR)/tclAppInit.c $(PLATFORM_DIR)/dllEntryPoint.c
UNIX_SOURCES	= $(PLATFORM_DIR)/tclAppInit.c

itcl_SOURCES	= $(GENERIC_DIR)/itclStubInit.c \
	$(GENERIC_DIR)/itclStubLib.c \
	$(GENERIC_DIR)/itcl_bicmds.c \
	$(GENERIC_DIR)/itcl_class.c \
	$(GENERIC_DIR)/itcl_cmds.c \
	$(GENERIC_DIR)/itcl_ensemble.c \
	$(GENERIC_DIR)/itcl_linkage.c \
	$(GENERIC_DIR)/itcl_methods.c \
	$(GENERIC_DIR)/itcl_migrate.c \
	$(GENERIC_DIR)/itcl_objects.c \
	$(GENERIC_DIR)/itcl_parse.c \
	$(GENERIC_DIR)/itcl_util.c \
	@@PLATFORM_SOURCES@@

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
# "sample_LIB_FILE" refers to the library (dynamic or static as per
# configuration options) composed of the named objects.
#========================================================================

WIN_OBJECTS	= dllEntryPoint.$(OBJEXT)
UNIX_OBJECTS	=
itcl_OBJECTS	= itclStubInit.$(OBJEXT) \
	itcl_bicmds.$(OBJEXT) \
	itcl_class.$(OBJEXT) \
	itcl_cmds.$(OBJEXT) \
	itcl_ensemble.$(OBJEXT) \
	itcl_linkage.$(OBJEXT) \
	itcl_methods.$(OBJEXT) \
	itcl_migrate.$(OBJEXT) \
	itcl_objects.$(OBJEXT) \
	itcl_parse.$(OBJEXT) \
	itcl_util.$(OBJEXT) \
	@@PLATFORM_OBJECTS@@

itclstub_OBJECTS = itclStubLib.$(OBJEXT)

itcl_LIB_FILE = @@itcl_LIB_FILE@@
itclstub_LIB_FILE = @@itclstub_LIB_FILE@@

#========================================================================
# This is a list of header files to be installed
# itk.h includes itclInt.h, which needs itclIntDecls.h,
# so we must install them.
#========================================================================

GENERIC_HDRS	= \
	@@itcl_SRC_DIR@@/generic/itcl.h \
	@@itcl_SRC_DIR@@/generic/itclDecls.h \
	@@itcl_SRC_DIR@@/generic/itclInt.h \
	@@itcl_SRC_DIR@@/generic/itclIntDecls.h

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added to the configure script.
#========================================================================

ITCL_GENERIC_DIR_NATIVE	= @@ITCL_GENERIC_DIR_NATIVE@@
ITCL_UNIX_DIR_NATIVE	= @@ITCL_UNIX_DIR_NATIVE@@
ITCL_WIN_DIR_NATIVE	= @@ITCL_WIN_DIR_NATIVE@@

#========================================================================
# Nothing of the variables below this line need to be changed.  Please
# check the TARGETS section below to make sure the make targets are
# correct.
#========================================================================

#========================================================================
# Change the name of the variable "exampleA_LIB_FILE" to match the one
# used in the configure script.  This is the parameterized name of the
# library that we are building.
#========================================================================

lib_BINARIES	= $(@@PACKAGE@@_LIB_FILE) $(@@PACKAGE@@stub_LIB_FILE)
BINARIES	= $(lib_BINARIES)

SHELL		= @@SHELL@@

srcdir		= @@itcl_SRC_DIR@@
top_srcdir	= @@top_srcdir@@
prefix		= @@prefix@@
exec_prefix	= @@exec_prefix@@

bindir		= @@bindir@@
libdir		= @@libdir@@
datadir		= @@datadir@@
mandir		= @@mandir@@
includedir	= @@includedir@@

DESTDIR		=

PKG_DIR		= @@PACKAGE@@$(VERSION)
pkgdatadir	= $(datadir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkgincludedir	= $(includedir)/$(PKG_DIR)

top_builddir	= .

INSTALL		= @@INSTALL@@
INSTALL_PROGRAM	= @@INSTALL_PROGRAM@@
INSTALL_DATA	= @@INSTALL_DATA@@
INSTALL_SCRIPT	= @@INSTALL_SCRIPT@@

PACKAGE		= @@PACKAGE@@
VERSION		= @@VERSION@@
CC		= @@CC@@
CFLAGS_DEBUG	= @@CFLAGS_DEBUG@@
CFLAGS_DEFAULT	= @@CFLAGS_DEFAULT@@
CFLAGS_OPTIMIZE	= @@CFLAGS_OPTIMIZE@@
CLEANFILES	= @@CLEANFILES@@
EXEEXT		= @@EXEEXT@@
LDFLAGS_DEBUG	= @@LDFLAGS_DEBUG@@
LDFLAGS_DEFAULT	= @@LDFLAGS_DEFAULT@@
LDFLAGS_OPTIMIZE = @@LDFLAGS_OPTIMIZE@@
MAKE_LIB	= @@MAKE_LIB@@
MAKE_SHARED_LIB	= @@MAKE_SHARED_LIB@@
MAKE_STATIC_LIB	= @@MAKE_STATIC_LIB@@
MAKE_STUB_LIB	= @@MAKE_STUB_LIB@@
OBJEXT		= @@OBJEXT@@
RANLIB		= @@RANLIB@@
SHLIB_CFLAGS	= @@SHLIB_CFLAGS@@
SHLIB_LD	= @@SHLIB_LD@@
SHLIB_LDFLAGS	= @@SHLIB_LDFLAGS@@
SHLIB_LD_LIBS	= @@SHLIB_LD_LIBS@@
STLIB_LD	= @@STLIB_LD@@
TCL_DEFS	= @@TCL_DEFS@@
TCL_BIN_DIR	= @@TCL_BIN_DIR@@
TCL_SRC_DIR	= @@TCL_SRC_DIR@@
TCL_TOP_DIR_NATIVE = @@TCL_TOP_DIR_NATIVE@@

# Not used, but retained for reference of what libs Tcl required
TCL_LIBS	= @@TCL_LIBS@@

#========================================================================
# TCLLIBPATH seeds the auto_path in Tcl's init.tcl so we can test our
# package without installing.  The other environment variables allow us
# to test against an uninstalled Tcl.  Add special env vars that you
# require for testing here (like TCLX_LIBRARY).
#========================================================================

EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR)
TCLSH_ENV	= TCL_LIBRARY=`@@CYGPATH@@ $(TCL_SRC_DIR)/library` \
		  ITCL_LIBRARY=`@@CYGPATH@@ @@itcl_SRC_DIR@@/library` \
		  LD_LIBRARY_PATH="$(EXTRA_PATH):$(LD_LIBRARY_PATH)" \
		  LIBPATH="$(EXTRA_PATH):${LIBPATH}" \
		  SHLIB_PATH="$(EXTRA_PATH):${SHLIB_PATH}" \
		  PATH="$(EXTRA_PATH):$(PATH)" \
		  TCLLIBPATH="$(top_builddir)"
TCLSH_PROG	= @@TCLSH_PROG@@
TCLSH		= $(TCLSH_ENV) $(TCLSH_PROG)

ITCL_INCLUDES	= @@ITCL_INCLUDES@@
INCLUDES	= @@TCL_INCLUDES@@ @@ITCL_INCLUDES@@

EXTRA_CFLAGS	= $(AC_FLAGS) $(MEM_DEBUG_FLAGS) @@EXTRA_CFLAGS@@

DEFS		= @@DEFS@@ $(TCL_DEFS) $(EXTRA_CFLAGS) \
		  -DITCL_LIBRARY=\"$(pkglibdir)\" -DUSE_NON_CONST

CONFIG_CLEAN_FILES = Makefile

CPPFLAGS	= @@CPPFLAGS@@
LIBS		= @@LIBS@@
AR		= ar
CFLAGS		= @@CFLAGS@@
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)

#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

doc:

install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries
	@@mkdir -p $(DESTDIR)$(includedir)
	@@echo "Installing header files in $(DESTDIR)$(includedir)"
	@@for i in $(GENERIC_HDRS) ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(includedir) ; \
	done;
	@@mkdir -p $(DESTDIR)$(pkglibdir)
	@@echo "Installing library files in $(DESTDIR)$(pkglibdir)"
	@@for i in @@itcl_SRC_DIR@@/library/*.tcl ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(pkglibdir) ; \
	done;

#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc: doc
	@@mkdir -p $(DESTDIR)$(mandir)/mann
	@@echo "Installing man pages in $(DESTDIR)$(mandir)"
	@@for i in @@itcl_SRC_DIR@@/doc/*.n; do \
	    echo "Installing $$i"; \
	    rm -f $(DESTDIR)$(mandir)/mann/`basename $$i`; \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(mandir)/mann ; \
	done

test: binaries libraries
	$(TCLSH) `@@CYGPATH@@ @@itcl_SRC_DIR@@/tests/all.tcl` -load "package require Itcl" $(TESTFLAGS)

shell: binaries libraries
	@@$(TCLSH) $(SCRIPT)

gdb:
	$(TCLSH_ENV) gdb $(TCLSH_PROG) $(SCRIPT)

depend:

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
# $(exampleA_LIB_FILE) should be listed as part of the BINARIES variable
# at the top of the Makefile.  That will ensure that this target is built
# when you run "make binaries".
#
# You shouldn't need to modify this target, except to change the package
# name from "exampleA" to your package's name.
#========================================================================

$(@@PACKAGE@@_LIB_FILE): $(@@PACKAGE@@_OBJECTS)
	-rm -f $(@@PACKAGE@@_LIB_FILE)
	${MAKE_LIB}
	$(RANLIB) $(@@PACKAGE@@_LIB_FILE)

$(@@PACKAGE@@stub_LIB_FILE): $(@@PACKAGE@@stub_OBJECTS)
	-rm -f $(@@PACKAGE@@stub_LIB_FILE)
	${MAKE_STUB_LIB}
	$(RANLIB) $(@@PACKAGE@@stub_LIB_FILE)

#========================================================================
# We need to enumerate the list of .c to .o lines here.
#
# In the following lines, @@itcl_SRC_DIR@@ refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# exampleA.$(OBJEXT): @@itcl_SRC_DIR@@/generic/exampleA.c
# 	$(COMPILE) -c `@@CYGPATH@@ @@itcl_SRC_DIR@@/generic/exampleA.c` -o $@@
#
# Setting the VPATH variable to a list of paths will cause the makefile
# to look into these paths when resolving .c to .obj dependencies.
# As necessary, add @@itcl_SRC_DIR@@:@@itcl_SRC_DIR@@/compat:....
#========================================================================

VPATH = @@itcl_SRC_DIR@@/generic:$(PLATFORM_DIR)

dllEntryPoint.$(OBJEXT): $(WIN_DIR)/dllEntryPoint.c
	$(COMPILE) -c `@@CYGPATH@@ $(WIN_DIR)/dllEntryPoint.c` -o $@@

.c.$(OBJEXT):
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@

itclStubInit.o: $(GENERIC_DIR)/itclStubInit.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itclStubInit.c` -o $@@

itclStubLib.o: $(GENERIC_DIR)/itclStubLib.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itclStubLib.c` -o $@@

itcl_bicmds.o: $(GENERIC_DIR)/itcl_bicmds.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_bicmds.c` -o $@@

itcl_class.o: $(GENERIC_DIR)/itcl_class.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_class.c` -o $@@

itcl_cmds.o: $(GENERIC_DIR)/itcl_cmds.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_cmds.c` -o $@@

itcl_ensemble.o: $(GENERIC_DIR)/itcl_ensemble.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_ensemble.c` -o $@@

itcl_linkage.o: $(GENERIC_DIR)/itcl_linkage.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_linkage.c` -o $@@

itcl_methods.o: $(GENERIC_DIR)/itcl_methods.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_methods.c` -o $@@

itcl_migrate.o: $(GENERIC_DIR)/itcl_migrate.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_migrate.c` -o $@@

itcl_objects.o: $(GENERIC_DIR)/itcl_objects.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_objects.c` -o $@@

itcl_parse.o: $(GENERIC_DIR)/itcl_parse.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_parse.c` -o $@@

itcl_util.o: $(GENERIC_DIR)/itcl_util.c
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_util.c` -o $@@

tclAppInit.o: $(PLATFORM_DIR)/tclAppInit.c
	$(COMPILE) -c `@@CYGPATH@@ $(PLATFORM_DIR)/tclAppInit.c` -o $@@


#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log config.status

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Additionally, the .dll files go into the bin directory, but the .lib
# files go into the lib directory.  On Unix platforms, all library files
# go into the lib directory.  In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh8.2 shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries:
	@@mkdir -p $(DESTDIR)$(pkglibdir)
	@@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p; \
	    echo " $(RANLIB) $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(pkglibdir)/$$p; \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib; \
		fi; \
	    fi; \
	  fi; \
	done
	$(INSTALL_DATA) pkgIndex.tcl $(DESTDIR)$(pkglibdir)
	$(INSTALL_DATA) itclConfig.sh $(DESTDIR)$(libdir)

#========================================================================
# Install binary executables (e.g. .exe files)
#
# You should not have to modify this target.
#========================================================================

install-bin-binaries:
	@@mkdir -p $(DESTDIR)$(bindir)
	@@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done

.SUFFIXES: .c .$(OBJEXT)

Makefile: @@itcl_SRC_DIR@@/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@@ CONFIG_HEADERS= $(SHELL) ./config.status

uninstall-binaries:
	list='$(lib_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(bin_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/$$p; \
	done

.PHONY: all binaries clean depend distclean doc install libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
@


1.5
log
@more build fixes for irix make
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: Makefile.in,v 1.4 2004/06/30 01:51:30 morrison Exp $
@


1.4
log
@do what tcl/tk does to make it work with irix make
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: Makefile.in,v 1.3 2004/06/22 20:33:40 morrison Exp $
a322 6
itcl_cmds.$(OBJEXT): $(GENERIC_DIR)/itcl_cmds.c Makefile
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_cmds.c` -o $@@

itcl_ensemble.$(OBJEXT): $(GENERIC_DIR)/itcl_ensemble.c Makefile
	$(COMPILE) -c `@@CYGPATH@@ $(GENERIC_DIR)/itcl_ensemble.c` -o $@@

d327 1
a327 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d330 1
a330 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d333 1
a333 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d336 1
a336 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d339 1
a339 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d342 1
a342 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d345 1
a345 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d348 1
a348 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d351 1
a351 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d354 1
a354 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d357 1
a357 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d360 1
a360 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
d363 1
a363 1
	$(COMPILE) -c `@@CYGPATH@@ $<` -o $@@
@


1.3
log
@use automconf's PACKAGE instead of make's since there's an issue on irix make
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: Makefile.in,v 1.2 2004/06/20 09:04:34 morrison Exp $
d331 40
@


1.2
log
@fix the build system so it finds the srddir paths properly
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: Makefile.in,v 1.1 2004/06/10 16:51:46 morrison Exp $
d111 1
a111 1
lib_BINARIES	= $($(PACKAGE)_LIB_FILE) $($(PACKAGE)stub_LIB_FILE)
d129 1
a129 1
PKG_DIR		= $(PACKAGE)$(VERSION)
d293 2
a294 2
$($(PACKAGE)_LIB_FILE): $($(PACKAGE)_OBJECTS)
	-rm -f $($(PACKAGE)_LIB_FILE)
d296 1
a296 1
	$(RANLIB) $($(PACKAGE)_LIB_FILE)
d298 2
a299 2
$($(PACKAGE)stub_LIB_FILE): $($(PACKAGE)stub_OBJECTS)
	-rm -f $($(PACKAGE)stub_LIB_FILE)
d301 1
a301 1
	$(RANLIB) $($(PACKAGE)stub_LIB_FILE)
@


1.1
log
@moved libitcl to incrTcl, which matches their cvs module
@
text
@d15 1
a15 1
# RCS: @@(#) $Id: Makefile.in,v 1.21 2004/04/29 17:29:11 davygrvy Exp $
d26 3
a28 3
WIN_DIR		= $(srcdir)/win
UNIX_DIR	= $(srcdir)/unix
GENERIC_DIR	= $(srcdir)/generic
d85 4
a88 4
	$(srcdir)/generic/itcl.h \
	$(srcdir)/generic/itclDecls.h \
	$(srcdir)/generic/itclInt.h \
	$(srcdir)/generic/itclIntDecls.h
d116 1
a116 1
srcdir		= @@srcdir@@
d180 1
a180 1
		  ITCL_LIBRARY=`@@CYGPATH@@ $(srcdir)/library` \
d249 1
a249 1
	@@for i in $(srcdir)/library/*.tcl ; do \
d262 1
a262 1
	@@for i in $(srcdir)/doc/*.n; do \
d269 1
a269 1
	$(TCLSH) `@@CYGPATH@@ $(srcdir)/tests/all.tcl` -load "package require Itcl" $(TESTFLAGS)
d306 1
a306 1
# In the following lines, $(srcdir) refers to the toplevel directory
d310 2
a311 2
# exampleA.$(OBJEXT): $(srcdir)/generic/exampleA.c
# 	$(COMPILE) -c `@@CYGPATH@@ $(srcdir)/generic/exampleA.c` -o $@@
d315 1
a315 1
# As necessary, add $(srcdir):$(srcdir)/compat:....
d318 1
a318 1
VPATH = $(srcdir)/generic:$(PLATFORM_DIR)
d402 1
a402 1
Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
@

