head	14.4;
access;
symbols
	rel-7-10-4:14.1
	STABLE:14.1.0.10
	stable-branch:14.1
	rel-7-10-2:14.1
	rel-7-10-0:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.4
date	2007.11.06.21.41.08;	author erikgreenwald;	state Exp;
branches;
next	14.3;

14.3
date	2007.10.24.20.30.22;	author erikgreenwald;	state Exp;
branches;
next	14.2;

14.2
date	2007.09.14.15.21.32;	author erikgreenwald;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.17;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.10.16.51.47;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.4
log
@update a good bit out of itcl development version, to cope with changes in tcl85b1
@
text
@# itcl.decls --
#
#	This file contains the declarations for all supported public
#	functions that are exported by the Itcl library via the stubs table.
#	This file is used to generate the itclDecls.h, itclPlatDecls.h,
#	itclStub.c, and itclPlatStub.c files.
#	
#
# Copyright (c) 1998-1999 by Scriptics Corporation.
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
# 
# RCS: $Id: itcl.decls,v 1.3 2003/12/17 02:25:37 davygrvy Exp $

library itcl

# Define the itcl interface with several sub interfaces:
#     itclPlat	 - platform specific public
#     itclInt	 - generic private
#     itclPlatInt - platform specific private

interface itcl
hooks {itclInt}

# Declare each of the functions in the public Tcl interface.  Note that
# the an index should never be reused for a different function in order
# to preserve backwards compatibility.

declare 0 generic {
    int Itcl_Init(Tcl_Interp *interp)
}
declare 1 generic {
    int Itcl_SafeInit(Tcl_Interp *interp)
}
declare 2 generic {
    int Itcl_RegisterC(Tcl_Interp *interp, CONST char *name, \
        Tcl_CmdProc *proc, ClientData clientData, \
        Tcl_CmdDeleteProc *deleteProc)
}
declare 3 generic {
    int Itcl_RegisterObjC (Tcl_Interp *interp, CONST char *name, \
        Tcl_ObjCmdProc *proc, ClientData clientData, \
        Tcl_CmdDeleteProc *deleteProc)
}
declare 4 generic {
    int Itcl_FindC(Tcl_Interp *interp, CONST char *name, \
	Tcl_CmdProc **argProcPtr, Tcl_ObjCmdProc **objProcPtr, \
	ClientData *cDataPtr)
}
declare 5 generic {
    void Itcl_InitStack(Itcl_Stack *stack)
}
declare 6 generic {
    void Itcl_DeleteStack(Itcl_Stack *stack)
}
declare 7 generic {
    void Itcl_PushStack(ClientData cdata, Itcl_Stack *stack)
}
declare 8 generic {
    ClientData Itcl_PopStack(Itcl_Stack *stack)
}
declare 9 generic {
    ClientData Itcl_PeekStack(Itcl_Stack *stack)
}
declare 10 generic {
    ClientData Itcl_GetStackValue(Itcl_Stack *stack, int pos)
}
declare 11 generic {
    void Itcl_InitList(Itcl_List *listPtr)
}
declare 12 generic {
    void Itcl_DeleteList(Itcl_List *listPtr)
}
declare 13 generic {
    Itcl_ListElem* Itcl_CreateListElem(Itcl_List *listPtr)
}
declare 14 generic {
    Itcl_ListElem* Itcl_DeleteListElem(Itcl_ListElem *elemPtr)
}
declare 15 generic {
    Itcl_ListElem* Itcl_InsertList(Itcl_List *listPtr, ClientData val)
}
declare 16 generic {
    Itcl_ListElem* Itcl_InsertListElem (Itcl_ListElem *pos, ClientData val)
}
declare 17 generic {
    Itcl_ListElem* Itcl_AppendList(Itcl_List *listPtr, ClientData val)
}
declare 18 generic {
    Itcl_ListElem* Itcl_AppendListElem(Itcl_ListElem *pos, ClientData val)
}
declare 19 generic {
    void Itcl_SetListValue(Itcl_ListElem *elemPtr, ClientData val)
}
declare 20 generic {
    void Itcl_EventuallyFree(ClientData cdata, Tcl_FreeProc *fproc)
}
declare 21 generic {
    void Itcl_PreserveData(ClientData cdata)
}
declare 22 generic {
    void Itcl_ReleaseData(ClientData cdata)
}
declare 23 generic {
    Itcl_InterpState Itcl_SaveInterpState(Tcl_Interp* interp, int status)
}
declare 24 generic {
    int Itcl_RestoreInterpState(Tcl_Interp* interp, Itcl_InterpState state)
}
declare 25 generic {
    void Itcl_DiscardInterpState(Itcl_InterpState state)
}
@


14.3
log
@Upgrade to itcl/itk 3.3
@
text
@@


14.2
log
@removed trailing whitespace
@
text
@d7 1
a7 1
#
d12 2
a13 2
#
# RCS: $Id: itcl.decls,v 14.1 2004/11/16 19:42:17 morrison Exp $
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d7 1
a7 1
#	
d12 2
a13 2
# 
# RCS: $Id: itcl.decls,v 1.1 2004/06/10 16:51:47 morrison Exp $
@


1.1
log
@moved libitcl to incrTcl, which matches their cvs module
@
text
@d13 1
a13 1
# RCS: $Id: itcl.decls,v 1.3 2003/12/17 02:25:37 davygrvy Exp $
@

