head	14.2;
access;
symbols
	stable-branch:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.03.02.21.47.05;	author brlcad;	state dead;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.22;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.51.53;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@# Commands covered:  append lappend
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1991-1993 The Regents of the University of California.
# Copyright (c) 1994-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: appendComp.test,v 14.1 2004/11/16 19:42:22 morrison Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}
catch {unset x}

test appendComp-1.1 {append command} {
    catch {unset x}
    proc foo {} {append ::x 1 2 abc "long string"}
    list [foo] $x
} {{12abclong string} {12abclong string}}
test appendComp-1.2 {append command} {
    proc foo {} {
	set x ""
	list [append x first] [append x second] [append x third] $x
    }
    foo
} {first firstsecond firstsecondthird firstsecondthird}
test appendComp-1.3 {append command} {
    proc foo {} {
	set x "abcd"
	append x
    }
    foo
} abcd

test appendComp-2.1 {long appends} {
    proc foo {} {
	set x ""
	for {set i 0} {$i < 1000} {set i [expr $i+1]} {
	    append x "foobar "
	}
	set y "foobar"
	set y "$y $y $y $y $y $y $y $y $y $y"
	set y "$y $y $y $y $y $y $y $y $y $y"
	set y "$y $y $y $y $y $y $y $y $y $y "
	expr {$x == $y}
    }
    foo
} 1

test appendComp-3.1 {append errors} {
    proc foo {} {append}
    list [catch {foo} msg] $msg
} {1 {wrong # args: should be "append varName ?value value ...?"}}
test appendComp-3.2 {append errors} {
    proc foo {} {
	set x ""
	append x(0) 44
    }
    list [catch {foo} msg] $msg
} {1 {can't set "x(0)": variable isn't array}}
test appendComp-3.3 {append errors} {
    proc foo {} {
	catch {unset x}
	append x
    }
    list [catch {foo} msg] $msg
} {1 {can't read "x": no such variable}}

test appendComp-4.1 {lappend command} {
    proc foo {} {
	global x
	catch {unset x}
	lappend x 1 2 abc "long string"
    }
    list [foo] $x
} {{1 2 abc {long string}} {1 2 abc {long string}}}
test appendComp-4.2 {lappend command} {
    proc foo {} {
	set x ""
	list [lappend x first] [lappend x second] [lappend x third] $x
    }
    foo
} {first {first second} {first second third} {first second third}}
test appendComp-4.3 {lappend command} {
    proc foo {} {
	global x
	set x old
	unset x
	lappend x new
    }
    set result [foo]
    rename foo {}
    set result
} {new}
test appendComp-4.4 {lappend command} {
    proc foo {} {
	set x {}
	lappend x \{\  abc
    }
    foo
} {\{\  abc}
test appendComp-4.5 {lappend command} {
    proc foo {} {
	set x {}
	lappend x \{ abc
    }
    foo
} {\{ abc}
test appendComp-4.6 {lappend command} {
    proc foo {} {
	set x {1 2 3}
	lappend x
    }
    foo
} {1 2 3}
test appendComp-4.7 {lappend command} {
    proc foo {} {
	set x "a\{"
	lappend x abc
    }
    foo
} "a\\\{ abc"
test appendComp-4.8 {lappend command} {
    proc foo {} {
	set x "\\\{"
	lappend x abc
    }
    foo
} "\\{ abc"
test appendComp-4.9 {lappend command} {
    proc foo {} {
	set x " \{"
	list [catch {lappend x abc} msg] $msg
    }
    foo
} {1 {unmatched open brace in list}}
test appendComp-4.10 {lappend command} {
    proc foo {} {
	set x "	\{"
	list [catch {lappend x abc} msg] $msg
    }
    foo
} {1 {unmatched open brace in list}}
test appendComp-4.11 {lappend command} {
    proc foo {} {
	set x "\{\{\{"
	list [catch {lappend x abc} msg] $msg
    }
    foo
} {1 {unmatched open brace in list}}
test appendComp-4.12 {lappend command} {
    proc foo {} {
	set x "x \{\{\{"
	list [catch {lappend x abc} msg] $msg
    }
    foo
} {1 {unmatched open brace in list}}
test appendComp-4.13 {lappend command} {
    proc foo {} {
	set x "x\{\{\{"
	lappend x abc
    }
    foo
} "x\\\{\\\{\\\{ abc"
test appendComp-4.14 {lappend command} {
    proc foo {} {
	set x " "
	lappend x abc
    }
    foo
} "abc"
test appendComp-4.15 {lappend command} {
    proc foo {} {
	set x "\\ "
	lappend x abc
    }
    foo
} "{ } abc"
test appendComp-4.16 {lappend command} {
    proc foo {} {
	set x "x "
	lappend x abc
    }
    foo
} "x abc"
test appendComp-4.17 {lappend command} {
    proc foo {} { lappend x }
    foo
} {}
test appendComp-4.18 {lappend command} {
    proc foo {} { lappend x {} }
    foo
} {{}}
test append-4.19 {lappend command} {
    proc foo {} { lappend x(0) }
    foo
} {}
test append-4.20 {lappend command} {
    proc foo {} { lappend x(0) abc }
    foo
} {abc}

proc check {var size} {
    set l [llength $var]
    if {$l != $size} {
	return "length mismatch: should have been $size, was $l"
    }
    for {set i 0} {$i < $size} {set i [expr $i+1]} {
	set j [lindex $var $i]
	if {$j != "item $i"} {
	    return "element $i should have been \"item $i\", was \"$j\""
	}
    }
    return ok
}
test appendComp-5.1 {long lappends} {
    catch {unset x}
    set x ""
    for {set i 0} {$i < 300} {set i [expr $i+1]} {
	lappend x "item $i"
    }
    check $x 300
} ok

test appendComp-6.1 {lappend errors} {
    proc foo {} {lappend}
    list [catch {foo} msg] $msg
} {1 {wrong # args: should be "lappend varName ?value value ...?"}}
test appendComp-6.2 {lappend errors} {
    proc foo {} {
	set x ""
	lappend x(0) 44
    }
    list [catch {foo} msg] $msg
} {1 {can't set "x(0)": variable isn't array}}

test appendComp-7.1 {lappendComp-created var and error in trace on that var} {
    proc bar {} {
	global x
	catch {rename foo ""}
	catch {unset x}
	trace variable x w foo
	proc foo {} {global x; unset x}
	catch {lappend x 1}
	proc foo {args} {global x; unset x}
	info exists x
	set x
	lappend x 1
	list [info exists x] [catch {set x} msg] $msg
    }
    bar
} {0 1 {can't read "x": no such variable}}
test appendComp-7.2 {lappend var triggers read trace, index var} {
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	lappend myvar a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {myvar {} r}}
test appendComp-7.3 {lappend var triggers read trace, stack var} {
    proc bar {} {
	catch {unset ::myvar}
	catch {unset ::result}
	trace variable ::myvar r foo
	proc foo {args} {append ::result $args}
	lappend ::myvar a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {::myvar {} r}}
test appendComp-7.4 {lappend var triggers read trace, array var} {
    # The behavior of read triggers on lappend changed in 8.0 to
    # not trigger them.  Maybe not correct, but been there a while.
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	lappend myvar(b) a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {myvar b r}}
test appendComp-7.5 {lappend var triggers read trace, array var} {
    # The behavior of read triggers on lappend changed in 8.0 to
    # not trigger them.  Maybe not correct, but been there a while.
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	lappend myvar(b) a b
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {myvar b r}}
test appendComp-7.6 {lappend var triggers read trace, array var exists} {
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	set myvar(0) 1
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	lappend myvar(b) a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {myvar b r}}
test appendComp-7.7 {lappend var triggers read trace, array stack var} {
    proc bar {} {
	catch {unset ::myvar}
	catch {unset ::result}
	trace variable ::myvar r foo
	proc foo {args} {append ::result $args}
	lappend ::myvar(b) a
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {::myvar b r}}
test appendComp-7.8 {lappend var triggers read trace, array stack var} {
    proc bar {} {
	catch {unset ::myvar}
	catch {unset ::result}
	trace variable ::myvar r foo
	proc foo {args} {append ::result $args}
	lappend ::myvar(b) a b
	list [catch {set ::result} msg] $msg
    }
    bar
} {0 {::myvar b r}}
test appendComp-7.9 {append var does not trigger read trace} {
    proc bar {} {
	catch {unset myvar}
	catch {unset ::result}
	trace variable myvar r foo
	proc foo {args} {append ::result $args}
	append myvar a
	info exists ::result
    }
    bar
} {0}

catch {unset i x result y}
catch {rename foo ""}
catch {rename bar ""}
catch {rename check ""}
catch {rename bar {}}

# cleanup
::tcltest::cleanupTests
return
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.1 2004/05/20 14:51:53 morrison Exp $
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d14 1
a14 1
# RCS: @@(#) $Id: appendComp.test,v 1.3 2004/03/04 19:47:14 morrison Exp $
@

