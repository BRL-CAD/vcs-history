head	14.2;
access;
symbols
	stable-branch:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.03.02.21.47.13;	author brlcad;	state dead;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.23;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.52.00;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@#  -*- tcl -*-
#
# notify.test --
#
# This file tests several functions in the file, 'generic/tclNotify.c'.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 2003 by Kevin B. Kenny.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: notify.test,v 14.1 2004/11/16 19:42:23 morrison Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

testConstraint testevent [llength [info commands testevent]]

test notify-1.1 {Tcl_QueueEvent and delivery of a single event} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	vwait done
	set delivered
    } \
    -result {one}

test notify-1.2 {Tcl_QueueEvent and delivery of events in order} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent queue three tail {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {one two three}

test notify-1.3 {Tcl_QueueEvent at head} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one head {lappend delivered one; expr 1}
	vwait done
	set delivered
    } \
    -result one

test notify-1.4 {Tcl_QueueEvent multiple events at head} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one head {lappend delivered one; expr 1}
	testevent queue two head {lappend delivered two; expr 1}
	testevent queue three head {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {three two one}

test notify-1.5 {Tcl_QueueEvent marker event into an empty queue} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	vwait done
	set delivered
    } \
    -result one

test notify-1.6 {Tcl_QueueEvent first marker event in a nonempty queue} \
    -constraints {testevent}  \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent queue three head {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {three two one}

test notify-1.7 {Tcl_QueueEvent second marker event} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	vwait done
	set delivered
    } \
    -result {one two}

test notify-1.8 {Tcl_QueueEvent preexisting event following second marker} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent queue three mark {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {one three two}

test notify-2.1 {remove sole element, don't replace } \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent delete one
	vwait done
	set delivered
    } \
    -result {}

test notify-2.2 {remove and replace sole element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent delete one
	testevent queue two tail {lappend delivered two; expr 1}
	vwait done
	set delivered
    } \
    -result two

test notify-2.3 {remove first element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete one
	vwait done
	set delivered
    } \
    -result {two}

test notify-2.4 {remove and replace first element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete one
	testevent queue three head {lappend delivered three; expr 1};
	vwait done
	set delivered
    } \
    -result {three two}

test notify-2.5 {remove last element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete two
	vwait done
	set delivered
    } \
    -result {one}


test notify-2.6 {remove and replace last element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete two
	testevent queue three tail {lappend delivered three; expr 1};
	vwait done
	set delivered
    } \
    -result {one three}

test notify-2.7 {remove a middle element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent queue three tail {lappend delivered three; expr 1}
	testevent delete two
	vwait done
	set delivered
    } \
    -result {one three}

test notify-2.8 {remove a marker event that's the sole event in the queue} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent delete one
	vwait done
	set delivered
    } \
    -result {}

test notify-2.9 {remove and replace a marker event that's the sole event} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent delete one
	testevent queue two mark {lappend delivered two; expr 1}
	vwait done
	set delivered
    } \
    -result two

test notify-2.10 {remove marker event from head} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent delete one
	vwait done
	set delivered
    } \
    -result two

test notify-2.11 {remove and replace marker event at head} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete one
	testevent queue three mark {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {three two}

test notify-2.12 {remove marker event at tail} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent delete two
	vwait done
	set delivered
    } \
    -result {one}

test notify-2.13 {remove and replace marker event at tail} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent delete two
	testevent queue three mark {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {one three}

test notify-2.14 {remove marker event from middle} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent queue three mark {lappend delivered three; expr 1}
	testevent delete two
	vwait done
	set delivered
    } \
    -result {one three}

test notify-2.15 {remove and replace marker event at middle} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent queue three tail {lappend delivered three; expr 1}
	testevent delete two
	testevent queue four mark {lappend delivered four; expr 1};
	vwait done
	set delivered
    } \
    -result {one four three}

# cleanup
::tcltest::cleanupTests
return
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d16 1
a16 1
# RCS: @@(#) $Id: notify.test,v 1.1 2004/05/20 14:52:00 morrison Exp $
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d16 1
a16 1
# RCS: @@(#) $Id: notify.test,v 1.3 2004/03/04 19:47:19 morrison Exp $
@

