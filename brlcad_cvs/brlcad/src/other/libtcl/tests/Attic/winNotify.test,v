head	14.2;
access;
symbols
	stable-branch:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.03.02.21.47.14;	author brlcad;	state dead;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.23;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.52.08;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@# This file tests the tclWinNotify.c file.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1997 by Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: winNotify.test,v 14.1 2004/11/16 19:42:23 morrison Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

set ::tcltest::testConstraints(testeventloop) \
	[expr {[info commands testeventloop] != {}}]

# There is no explicit test for InitNotifier or NotifierExitHandler

test winNotify-1.1 {Tcl_SetTimer: positive timeout} {pcOnly} {
    set done 0
    after 1000 { set done 1 }
    vwait done
    set done
} 1
test winNotify-1.2 {Tcl_SetTimer: positive timeout, message pending} {pcOnly} {
    set x 0
    set y 1
    set a1 [after 0 { incr y }]
    after cancel $a1
    after 500 { incr x }
    vwait x
    list $x $y
} {1 1}
test winNotify-1.3 {Tcl_SetTimer: cancelling positive timeout} {pcOnly} {
    set x 0
    set y 1
    set id [after 10000 { incr y }]
    after 0 { incr x }
    vwait x
    after cancel $id
    list $x $y
} {1 1}
test winNotify-1.4 {Tcl_SetTimer: null timeout, message pending} {pcOnly} {
    set x 0
    set y 1
    after 0 { incr x }
    after 0 { incr y }
    vwait x
    list $x $y
} {1 2}

test winNotify-2.1 {Tcl_ResetIdleTimer} {pcOnly} {
    set x 0
    update
    after idle { incr x }
    vwait x
    set x
} 1
test winNotify-2.2 {Tcl_ResetIdleTimer: message pending} {pcOnly} {
    set x 0
    set y 1
    update
    after idle { incr x }
    after idle { incr y }
    update
    list $x $y
} {1 2}

test winNotify-3.1 {NotifierProc: non-modal normal timer} {pcOnly testeventloop} {
    update
    set x 0
    foreach i [after info] {
	after cancel $i
    }
    after 500 { incr x; testeventloop done }
    testeventloop wait
    set x
} 1
test winNotify-3.2 {NotifierProc: non-modal normal timer, rescheduled} {pcOnly testeventloop} {
    update
    set x 0
    foreach i [after info] {
	after cancel $i
    }
    after 500 { incr x; after 100 {incr x; testeventloop done }}
    testeventloop wait
    set x
} 2
test winNotify-3.3 {NotifierProc: modal normal timer} {pcOnly} {
    update
    set x 0
    foreach i [after info] {
	after cancel $i
    }
    after 500 { incr x }
    vwait x
    set x
} 1
test winNotify-3.4 {NotifierProc: modal normal timer, rescheduled} {pcOnly} {
    update
    set x 0
    foreach i [after info] {
	after cancel $i
    }
    set y 0
    after 500 { incr y; after 100 {incr x}}
    vwait x
    list $x $y
} {1 1}
test winNotify-3.5 {NotifierProc: non-modal idle timer} {pcOnly testeventloop} {
    update
    set x 0
    foreach i [after info] {
	after cancel $i
    }
    after idle { incr x; testeventloop done }
    testeventloop wait
    set x
} 1
test winNotify-3.6 {NotifierProc: non-modal idle timer, rescheduled} {pcOnly testeventloop} {
    update
    set x 0
    foreach i [after info] {
	after cancel $i
    }
    after idle { incr x; after idle {incr x; testeventloop done }}
    testeventloop wait
    set x
} 2
test winNotify-3.7 {NotifierProc: modal idle timer} {pcOnly} {
    update
    set x 0
    foreach i [after info] {
	after cancel $i
    }
    after idle { incr x }
    vwait x
    set x
} 1
test winNotify-3.8 {NotifierProc: modal idle timer, rescheduled} {pcOnly} {
    update
    set x 0
    foreach i [after info] {
	after cancel $i
    }
    set y 0
    after idle { incr y; after idle {incr x}}
    vwait x
    list $x $y
} {1 1}

# Tcl_DoOneEvent is tested by the timer.test, io.test, and event.test files

# cleanup
::tcltest::cleanupTests
return












@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: winNotify.test,v 1.1 2004/05/20 14:52:08 morrison Exp $
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: winNotify.test,v 1.3 2004/03/04 19:47:21 morrison Exp $
@

