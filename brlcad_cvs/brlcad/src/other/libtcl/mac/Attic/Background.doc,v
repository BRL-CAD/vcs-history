head	14.2;
access;
symbols
	stable-branch:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.03.02.21.46.59;	author brlcad;	state dead;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.22;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.51.45;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@Notes about the Background Only application template
====================================================

RCS: @@(#) $Id: Background.doc,v 14.1 2004/11/16 19:42:22 morrison Exp $

We have included sample code and project files for making a Background-Only
 application (BOA) in Tcl.  This could be used for server processes (like the 
Tcl Web-Server).  

Files:
------

* BOA_TclShells.¼    - This is the project file.
* tclMacBOAAppInit.c - This is the AppInit file for the BOA App.
* tclMacBOAMain      - This is a replacement for the Tcl_Main for BOA's.

Caveat:
-------

This is an unsupported addition to MacTcl.  The main feature that will certainly
change is how we handle AppleEvents.  Currently, all the AppleEvent handling is
done on the Tk side, which is not really right.  Also, there is no way to 
register your own AppleEvent handlers, which is obviously something that would be 
useful in a BOA App.  We will address these issues in Tcl8.1.  If you need to 
register your own AppleEvent Handlers in the meantime, be aware that your code
will probably break in Tcl8.1.

I will also improve the basic code here based on feedback that I recieve.  This
is to be considered a first cut only at writing a BOA in Tcl.

Introduction:
-------------

This project makes a double-clickable BOA application.  It obviously needs 
some Tcl code to get it started.  It will look for this code first in a 
'TEXT' resource in the application shell whose name is "bgScript.tcl".  If 
it does not find any such resource, it will look for a file called 
bgScript.tcl in the application's folder.  Otherwise it will quit with an 
error.

It creates three files in the application folder to store stdin, stdout & 
stderr.  They are imaginatively called temp.in, temp.out & temp.err.  They 
will be opened append, so you do not need to erase them after each use of 
the BOA.

The app does understand the "quit", and the "doScript" AppleEvents, so you can 
kill it with the former, and instruct it with the latter.  It also has an 
aete, so you can target it with Apple's "Script Editor".

For more information on Macintosh BOA's, see the Apple TechNote: 1070.

Notifications:
--------------

BOA's are not supposed to have direct contact with the outside world.  They 
are, however, allowed to go through the Notification Manager to post 
alerts.  To this end, I have added a Tcl command called "bgnotify" to the 
shell, that simply posts a notification through the notification manager.

To use it, say:

bgnotify "Hi, there little buddy"

It will make the system beep, and pop up an annoying message box with the 
text of the first argument to the command.  While the message is up, Tcl 
is yielding processor time, but not processing any events.

Errors:
-------

Usually a Tcl background application will have some startup code, opening 
up a server socket, or whatever, and at the end of this, will use the 
vwait command to kick off the event loop.  If an error occurs in the 
startup code, it will kill the application, and a notification of the error 
will be posted through the Notification Manager.  

If an error occurs in the event handling code after the 
vwait, the error message will be written to the file temp.err.  However, 
if you would like to have these errors post a notification as well, just 
define a proc called bgerror that takes one argument, the error message, 
and passes that off to "bgnotify", thusly:

proc bgerror {mssg} {
	bgnotify "A background error has occured\n $mssg"
}

Support:
--------

If you have any questions, contact me at:

jim.ingham@@eng.sun.com
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d4 1
a4 1
RCS: @@(#) $Id: Background.doc,v 1.1 2004/05/20 14:51:45 morrison Exp $
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d4 1
a4 1
RCS: @@(#) $Id: Background.doc,v 1.3 2004/03/04 19:47:12 morrison Exp $
@

