head	1.3;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.4
	rel-7-10-2:1.2
	rel-7-10-0:1.2
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1.2.1
	postmerge-20051223-bobWinPort:1.2
	bobWinPort:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.09.14.15.22.03;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.23.21.26.45;	author bob1961;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.20.50.35;	author bob1961;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.09.08.20.50.35;	author bob1961;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed trailing whitespace
@
text
@# tkimg.decls -- -*- tcl -*-
#
# This file contains the declarations for all supported public functions
# that are exported by the TKIMG library via the stubs table. This file
# is used to generate the tkimgDecls.h/tkimgStubsLib.c/tkimgStubsInit.c
# files.
#

# Declare each of the functions in the public BLT interface.  Note that
# the an index should never be reused for a different function in order
# to preserve backwards compatibility.

library tkimg

# Define the TKIMG interface:

interface tkimg
#hooks {}

#########################################################################
###  Reading and writing image data from channels and/or strings.

declare 0 generic {
    Tcl_Channel tkimg_OpenFileChannel (Tcl_Interp *interp,
	CONST char *fileName, int permissions)
}
declare 1 generic {
    int tkimg_ReadInit (Tcl_Obj *data, int c, tkimg_MFile *handle)
}
declare 2 generic {
    void tkimg_WriteInit (Tcl_DString *buffer, tkimg_MFile *handle)
}
declare 3 generic {
    int tkimg_Getc (tkimg_MFile *handle)
}
declare 4 generic {
    int tkimg_Read (tkimg_MFile *handle, char *dst, int count)
}
declare 5 generic {
    int tkimg_Putc (int c, tkimg_MFile *handle)
}
declare 6 generic {
    int tkimg_Write (tkimg_MFile *handle, CONST char *src, int count)
}
declare 7 generic {
    void tkimg_ReadBuffer (int onOff)
}

#########################################################################
###  Specialized put block handling transparency

declare 10 generic {
    int tkimg_PhotoPutBlock (Tk_PhotoHandle handle,
	Tk_PhotoImageBlock *blockPtr, int x, int y, int width, int height)
}

#########################################################################
###  Utilities to help handling the differences in 8.3.2 and 8.3 image types.

declare 20 generic {
    void tkimg_FixChanMatchProc (Tcl_Interp **interp, Tcl_Channel *chan,
	CONST char **file, Tcl_Obj **format, int **width, int **height)
}
declare 21 generic {
    void tkimg_FixObjMatchProc (Tcl_Interp **interp, Tcl_Obj **data,
	Tcl_Obj **format, int **width, int **height)
}
declare 22 generic {
    void tkimg_FixStringWriteProc (Tcl_DString *data, Tcl_Interp **interp,
	Tcl_DString **dataPtr, Tcl_Obj **format, Tk_PhotoImageBlock **blockPtr)
}

#########################################################################
###  Like the core functions, except that they accept objPtr == NULL.
###  The byte array function also handles both UTF and non-UTF cores.

declare 30 generic {
    char* tkimg_GetStringFromObj (Tcl_Obj *objPtr, int *lengthPtr)
}
declare 31 generic {
    char* tkimg_GetByteArrayFromObj (Tcl_Obj *objPtr, int *lengthPtr)
}
declare 32 generic {
    int tkimg_ListObjGetElements (Tcl_Interp *interp, Tcl_Obj *objPtr, int *argc, Tcl_Obj ***argv)
}

#########################################################################
@


1.2
log
@Merge of bobWinPort
@
text
@d7 1
a7 1
#	
d24 1
a24 1
    Tcl_Channel tkimg_OpenFileChannel (Tcl_Interp *interp, 
@


1.1
log
@file tkimg.decls was initially added on branch bobWinPort.
@
text
@d1 87
@


1.1.2.1
log
@Initial check-in
@
text
@a0 87
# tkimg.decls -- -*- tcl -*-
#
# This file contains the declarations for all supported public functions
# that are exported by the TKIMG library via the stubs table. This file
# is used to generate the tkimgDecls.h/tkimgStubsLib.c/tkimgStubsInit.c
# files.
#	

# Declare each of the functions in the public BLT interface.  Note that
# the an index should never be reused for a different function in order
# to preserve backwards compatibility.

library tkimg

# Define the TKIMG interface:

interface tkimg
#hooks {}

#########################################################################
###  Reading and writing image data from channels and/or strings.

declare 0 generic {
    Tcl_Channel tkimg_OpenFileChannel (Tcl_Interp *interp, 
	CONST char *fileName, int permissions)
}
declare 1 generic {
    int tkimg_ReadInit (Tcl_Obj *data, int c, tkimg_MFile *handle)
}
declare 2 generic {
    void tkimg_WriteInit (Tcl_DString *buffer, tkimg_MFile *handle)
}
declare 3 generic {
    int tkimg_Getc (tkimg_MFile *handle)
}
declare 4 generic {
    int tkimg_Read (tkimg_MFile *handle, char *dst, int count)
}
declare 5 generic {
    int tkimg_Putc (int c, tkimg_MFile *handle)
}
declare 6 generic {
    int tkimg_Write (tkimg_MFile *handle, CONST char *src, int count)
}
declare 7 generic {
    void tkimg_ReadBuffer (int onOff)
}

#########################################################################
###  Specialized put block handling transparency

declare 10 generic {
    int tkimg_PhotoPutBlock (Tk_PhotoHandle handle,
	Tk_PhotoImageBlock *blockPtr, int x, int y, int width, int height)
}

#########################################################################
###  Utilities to help handling the differences in 8.3.2 and 8.3 image types.

declare 20 generic {
    void tkimg_FixChanMatchProc (Tcl_Interp **interp, Tcl_Channel *chan,
	CONST char **file, Tcl_Obj **format, int **width, int **height)
}
declare 21 generic {
    void tkimg_FixObjMatchProc (Tcl_Interp **interp, Tcl_Obj **data,
	Tcl_Obj **format, int **width, int **height)
}
declare 22 generic {
    void tkimg_FixStringWriteProc (Tcl_DString *data, Tcl_Interp **interp,
	Tcl_DString **dataPtr, Tcl_Obj **format, Tk_PhotoImageBlock **blockPtr)
}

#########################################################################
###  Like the core functions, except that they accept objPtr == NULL.
###  The byte array function also handles both UTF and non-UTF cores.

declare 30 generic {
    char* tkimg_GetStringFromObj (Tcl_Obj *objPtr, int *lengthPtr)
}
declare 31 generic {
    char* tkimg_GetByteArrayFromObj (Tcl_Obj *objPtr, int *lengthPtr)
}
declare 32 generic {
    int tkimg_ListObjGetElements (Tcl_Interp *interp, Tcl_Obj *objPtr, int *argc, Tcl_Obj ***argv)
}

#########################################################################
@

