head	1.3;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.4
	rel-7-10-2:1.2
	rel-7-10-0:1.2
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1.2.1
	postmerge-20051223-bobWinPort:1.2
	bobWinPort:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.09.14.15.22.03;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.23.21.26.44;	author bob1961;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.20.50.35;	author bob1961;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.09.08.20.50.35;	author bob1961;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed trailing whitespace
@
text
@
tkimg_Fix*Proc's

Signature of photo image type functions


			Tk 8.3.2 or earlier		Tk 8.3 or later
==============================================================================
Tk_ImageStringWriteProc	int				int
			------------------------------------------------------
			Tcl_Interp *interp,		Tcl_Interp *interp,
			Tcl_DString *dataPtr,		Tcl_Obj *format,
			char *formatString,		Tk_PhotoImageBlock *blockPtr
			Tk_PhotoImageBlock *blockPtr
==============================================================================
Tk_ImageFileMatchProc	int				int
			------------------------------------------------------
			Tcl_Channel chan,		Tcl_Channel chan,
			char *fileName,			CONST char *fileName,
			char *formatString,		Tcl_Obj *format,
			int *widthPtr,			int *widthPtr,
			int *heightPtr			int *heightPtr,
							Tcl_Interp *interp
==============================================================================
Tk_ImageStringMatchProc	int				int
			------------------------------------------------------
			char *string,			Tcl_Obj *dataObj,
			char *formatString,		Tcl_Obj *format,
			int *widthPtr,			int *widthPtr,
			int *heightPtr			int *heightPtr,
							Tcl_Interp *interp
==============================================================================

Different number of arguments, with different types, and the arguments
are permuted.

A Tk 8.3 core takes special steps so that a specially written photo
image can distinguish between the two possible types of calls using
the arguments alone.

It always calls the function with the maximal number of arguments
possible, padding with NULLs if the 8.3 signature has not enough
arguments. See 'Tk_ImageStringWriteProc' (tkImgPhoto.c, line 962).

In the case of the other two procedures the photo image type can check
the integrity of the last argument to distinguish between the two
cores. When called from an 8.3.2 or earlier core the last argument
will be bogus (random data).

This is actually the method used by Img 1.2.4. It checks that
interp->result == interp->resultSpace. There are two problems with
that approach:

(1)	The pointer stored in 'interp' is random, and might not be
	dereferencable. In other words, a segementation fault can
	happen. Just assume 'interp == NULL' for example.

(2)	It requires access to private definitions of the core
	(Definition of 'struct Interp').

Because this Img 2.0 will use a different approach. When loaded into
the system it will ask for the current version of Tk, and modify its
behaviour accordingly.


	tkimg_FixChanMatchProc  (interp, chan, file, format, width, height)
	tkimg_FixObjMatchProc   (interp, data, format, width, height)
	tkimg_FixStringWriteProc(data, interp, dataPtr, format, blockPtr)
@


1.2
log
@Merge of bobWinPort
@
text
@d27 3
a29 3
			char *string,			Tcl_Obj *dataObj, 
			char *formatString,		Tcl_Obj *format, 
			int *widthPtr,			int *widthPtr, 
@


1.1
log
@file README was initially added on branch bobWinPort.
@
text
@d1 68
@


1.1.2.1
log
@Initial check-in
@
text
@a0 68

tkimg_Fix*Proc's

Signature of photo image type functions


			Tk 8.3.2 or earlier		Tk 8.3 or later
==============================================================================
Tk_ImageStringWriteProc	int				int
			------------------------------------------------------
			Tcl_Interp *interp,		Tcl_Interp *interp,
			Tcl_DString *dataPtr,		Tcl_Obj *format,
			char *formatString,		Tk_PhotoImageBlock *blockPtr
			Tk_PhotoImageBlock *blockPtr
==============================================================================
Tk_ImageFileMatchProc	int				int
			------------------------------------------------------
			Tcl_Channel chan,		Tcl_Channel chan,
			char *fileName,			CONST char *fileName,
			char *formatString,		Tcl_Obj *format,
			int *widthPtr,			int *widthPtr,
			int *heightPtr			int *heightPtr,
							Tcl_Interp *interp
==============================================================================
Tk_ImageStringMatchProc	int				int
			------------------------------------------------------
			char *string,			Tcl_Obj *dataObj, 
			char *formatString,		Tcl_Obj *format, 
			int *widthPtr,			int *widthPtr, 
			int *heightPtr			int *heightPtr,
							Tcl_Interp *interp
==============================================================================

Different number of arguments, with different types, and the arguments
are permuted.

A Tk 8.3 core takes special steps so that a specially written photo
image can distinguish between the two possible types of calls using
the arguments alone.

It always calls the function with the maximal number of arguments
possible, padding with NULLs if the 8.3 signature has not enough
arguments. See 'Tk_ImageStringWriteProc' (tkImgPhoto.c, line 962).

In the case of the other two procedures the photo image type can check
the integrity of the last argument to distinguish between the two
cores. When called from an 8.3.2 or earlier core the last argument
will be bogus (random data).

This is actually the method used by Img 1.2.4. It checks that
interp->result == interp->resultSpace. There are two problems with
that approach:

(1)	The pointer stored in 'interp' is random, and might not be
	dereferencable. In other words, a segementation fault can
	happen. Just assume 'interp == NULL' for example.

(2)	It requires access to private definitions of the core
	(Definition of 'struct Interp').

Because this Img 2.0 will use a different approach. When loaded into
the system it will ask for the current version of Tk, and modify its
behaviour accordingly.


	tkimg_FixChanMatchProc  (interp, chan, file, format, width, height)
	tkimg_FixObjMatchProc   (interp, data, format, width, height)
	tkimg_FixStringWriteProc(data, interp, dataPtr, format, blockPtr)
@

