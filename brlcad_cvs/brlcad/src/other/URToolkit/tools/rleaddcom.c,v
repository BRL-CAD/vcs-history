head	1.5;
access;
symbols
	rel-7-10-4:1.3
	STABLE:1.3.0.2
	stable-branch:1.1
	rel-7-10-2:1.3
	rel-7-10-0:1.3
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1
	postmerge-20051223-bobWinPort:1.2
	premerge-20051223-bobWinPort:1.2
	rel-7-6-6:1.2
	rel-7-6-4:1.2
	rel-7-6-2:1.1
	rel-7-6-branch:1.1.0.6
	rel-7-6-0:1.1
	rel-7-4-2:1.1
	rel-7-4-branch:1.1.0.4
	bobWinPort:1.1.0.2
	rel-7-4-0:1.1
	rel-7-2-6:1.1
	rel-7-2-4:1.1
	rel-7-2-2:1.1
	rel-7-2-0:1.1
	rel-7-0-4:1.1;
locks; strict;
comment	@ * @;


1.5
date	2007.12.07.14.21.08;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.14.15.21.13;	author erikgreenwald;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.24.19.36.13;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.06.03.50.58;	author brlcad;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.01.24.05.12.41;	author brlcad;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;

1.2.2.1
date	2006.04.07.19.34.10;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@apply a modified form of Pedro F. Giffuni - giffunip's sf patch [ 1845889 ] "Minor fixes to URT" (seems half his changes were already applied)
@
text
@/*
 * This software is copyrighted as noted below.  It may be freely copied,
 * modified, and redistributed, provided that the copyright notice is
 * preserved on all copies.
 *
 * There is no warranty or other guarantee of fitness for this software,
 * it is provided solely "as is".  Bug reports or fixes may be sent
 * to the author, who may or may not act on them as he desires.
 *
 * You may not include this software in a program or other software product
 * without supplying the source, or without informing the end-user that the
 * source is available for no extra charge.
 *
 * If you modify this software, you should include a notice giving the
 * name of the person performing the modification, the date of modification,
 * and the reason for such modification.
 */
/*
 * rle_addcom.c - Add comment[s] to an RLE file.
 *
 * Author:	Spencer W. Thomas
 * 		Computer Science Dept.
 * 		University of Utah
 * Date:	Sun Jan 25 1987
 * Copyright (c) 1987, University of Utah
 */

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include "rle.h"
#include <sys/types.h>
#include <sys/param.h>			/* for MAXPATHLEN */
#include <sys/stat.h>

#ifndef MAXPATHLEN
# define MAXPATHLEN BUFSIZ
#endif

static char temp[] = "intoXXXXXXXX";
static char buf[MAXPATHLEN+1];

/*****************************************************************
 * TAG( main )
 *
 * Add one or more comments to an RLE file.
 *
 * Usage:
 *	rle_addcom [-d] [-i] [-o outfile] infile comments ...
 * Inputs:
 *	-d:		Delete matching comments instead of adding any.
 *	-i:		Do it "in place" -- replace the input file.
 * 	outfile:	Modified file with comments (defaults to stdout).
 * 	infile:		File to add comments to.
 *	comments:	One or more strings.  Each will be inserted as
 *			a separate comment.  They will usually be of the
 *			form "name=value".
 * Outputs:
 * 	Writes modified RLE file to standard output.
 * Assumptions:
 *	[None]
 * Algorithm:
 *	[None]
 */
int
main( argc, argv )
int argc;
char **argv;
{
    rle_hdr 	in_hdr, out_hdr;
    char * fname = NULL, * out_fname = NULL;
    char *i_fname = NULL;
    FILE *outfile = stdout;
    char ** comments = NULL;
    char *my_name = cmd_name( argv );
    int oflag = 0, iflag = 0, delflag = 0, ncomment = 0;
    int is_pipe = 0;
    register int j;
    int rle_cnt, rle_err;

    in_hdr = *rle_hdr_init( NULL );
    out_hdr = *rle_hdr_init( NULL );

    if ( scanargs( argc, argv, "% d%- i%- o%-outfile!s infile!s comments!*s",
		   &delflag, &iflag, &oflag, &out_fname, &fname,
                   &ncomment, &comments ) == 0 )
	exit( 1 );

    if ( iflag )
    {
	register char *cp;

	if ( oflag )
	    i_fname = out_fname;
	else
	    i_fname = fname;

	/* Recognize rle_open_f special cases. */
	if ( strcmp( i_fname, "-" ) == 0 )
	{
	    fprintf( stderr,
		     "%s: Can't add comments \"in place\" to standard %s.\n",
		     my_name, oflag ? "output" : "input" );
	    exit( 1 );
	}
#ifndef NO_OPEN_PIPES
	if ( *i_fname == '|' )
	{
	    fprintf( stderr,
		     "%s: Can't add comments \"in place\" to piped %s.\n",
		     my_name, oflag ? "output" : "input" );
	    exit( 1 );
	}
#endif
	strcpy( buf, i_fname );
	if ( (cp = rindex( buf, '/' )) != NULL )
	{
	    *++cp = 0;
	    strcat( buf, temp );
	}
	else
	    strcpy( buf, temp );
	mkstemp( buf );
#ifndef NO_OPEN_PIPES
	/* Compressed file special case. */
	cp = i_fname + strlen( i_fname ) - 2;
	if ( cp > i_fname && *cp == '.' && *(cp + 1) == 'Z' )
	{
	    strcat( buf, ".Z" );
	    is_pipe = 1;
	}
#endif
	out_fname = buf;
    }

    in_hdr.rle_file = rle_open_f(my_name, fname, "r");
    rle_names( &in_hdr, my_name, fname, 0 );
    rle_names( &out_hdr, out_hdr.cmd, out_fname, 0 );

    /* Read in header */
    for ( rle_cnt = 0;
	  (rle_err = rle_get_setup( &in_hdr )) == RLE_SUCCESS;
	  rle_cnt++ )
    {
	(void)rle_hdr_cp( &in_hdr, &out_hdr );
	if ( rle_cnt == 0 )
	    outfile = rle_open_f( my_name, out_fname, "w" );
	out_hdr.rle_file = outfile;

	/* Copy input to the_hdr struct */
	for ( j = 0; j < ncomment; j++ )
	{
	    if ( ! delflag )
		rle_putcom( comments[j], &out_hdr );
	    else
		rle_delcom( comments[j], &out_hdr );
	}

	/* Start output file */
	rle_put_setup( &out_hdr );

	/* Copy rest of input to output */
	rle_cp( &in_hdr, &out_hdr );
    }
    /* Check for an error.  EOF or EMPTY is ok if at least one image
     * has been read.  Otherwise, print an error message.
     */
    if ( rle_cnt == 0 || (rle_err != RLE_EOF && rle_err != RLE_EMPTY) )
    {
	rle_get_error( rle_err, my_name, fname );
	rle_err = 1;
    }
    else
	rle_err = 0;

    if ( iflag )
    {
	if ( rle_err )
	    fprintf( stderr, "%s: %s not replaced\n",
		     my_name, i_fname );
	else
	{
#ifndef NO_OPEN_PIPES
	    /* Have to call pclose, else file may not exist yet! */
	    if ( is_pipe )
		pclose( outfile );
	    else
#endif
		fclose( outfile );
	    if ( rename( buf, i_fname ) < 0 )
	    {
		fprintf( stderr, "%s: rename failed: ", my_name );
		perror( "" );
		unlink( buf );	/* Get rid of temp file. */
	    }
	}
    }

    exit( 0 );
}

#ifdef NEED_RENAME
rename( file1, file2 )
char *file1, *file2;
{
    struct stat st;

    if ( stat(file2, &st) >= 0 && unlink(file2) < 0 )
	return -1;
    if ( link(file1, file2) < 0 )
	return -1;
    return unlink( file1 );
}
#endif
@


1.4
log
@removed trailing whitespace
@
text
@d123 1
a123 1
	mktemp( buf );
@


1.3
log
@quell compiler warnings
@
text
@d3 1
a3 1
 * modified, and redistributed, provided that the copyright notice is 
d5 1
a5 1
 * 
d11 1
a11 1
 * without supplying the source, or without informing the end-user that the 
d18 1
a18 1
/* 
d20 1
a20 1
 * 
d45 1
a45 1
 * 
@


1.2
log
@include stdlib.h to quell ansi c warnings about exit being implicitly defined
@
text
@d30 1
d65 1
a65 1
void
@


1.2.2.1
log
@update from HEAD
@
text
@a29 1
#include <unistd.h>
d64 1
a64 1
int
@


1.1
log
@update of urt from 3.0 to 3.1b1; this includes keeping directory structure and moving tools to src/other/URToolkit/tools
@
text
@d28 1
@


1.1.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@a27 1
#include <stdlib.h>
@


