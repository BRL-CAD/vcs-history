head	1.4;
access;
symbols
	rel-7-10-4:1.3
	STABLE:1.3.0.2
	stable-branch:1.1
	rel-7-10-2:1.3
	rel-7-10-0:1.3
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1
	postmerge-20051223-bobWinPort:1.2
	premerge-20051223-bobWinPort:1.2
	rel-7-6-6:1.2
	rel-7-6-4:1.2
	rel-7-6-2:1.1
	rel-7-6-branch:1.1.0.6
	rel-7-6-0:1.1
	rel-7-4-2:1.1
	rel-7-4-branch:1.1.0.4
	bobWinPort:1.1.0.2
	rel-7-4-0:1.1
	rel-7-2-6:1.1
	rel-7-2-4:1.1
	rel-7-2-2:1.1
	rel-7-2-0:1.1
	rel-7-0-4:1.1;
locks; strict;
comment	@ * @;


1.4
date	2007.09.14.15.21.13;	author erikgreenwald;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.24.19.36.13;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.06.03.50.58;	author brlcad;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.01.24.05.12.41;	author brlcad;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;

1.2.2.1
date	2006.04.07.19.34.10;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


1.4
log
@removed trailing whitespace
@
text
@/*
 * rlebox.c - Find bounding box for an RLE image
 *
 * Author:	Spencer W. Thomas
 * 		Computer Science Dept.
 * 		University of Utah
 * Date:	Wed Feb 11 1987
 * Copyright (c) 1987, University of Utah
 */
static char rcsid[] = "$Header: /cvsroot/brlcad/brlcad/src/other/URToolkit/tools/rlebox.c,v 1.3 2006/03/24 19:36:13 brlcad Exp $";
/*
rlebox()			Tag the file.
*/

#include <stdlib.h>
#include <stdio.h>
#include "rle.h"
#include "rle_raw.h"

/*****************************************************************
 * TAG( main )
 *
 * Find a bounding box for an RLE image.
 *
 * Usage:
 *	rlebox [-v] [-c] [infile]
 * Inputs:
 *	-v:		Verbose mode - identifies numbers with text.
 *			Otherwise, just prints numbers.
 * 	-c:		Outputs corners of box in an order useful for use
 *			as arguments to the crop program:
 *			crop `rlebox -c foo.rle` foo.rle
 *	infile:		The input file.
 * Outputs:
 * 	Prints the bounding box for the rle file.  That is, it finds the
 *	minimum and maximum values of x and y for which there is some
 *	non-background data.
 * Assumptions:
 *
 * Algorithm:
 * 	Read the image file and find the smallest and largest X and Y
 *	coordinates of real image data.  Use raw interface for speed.
 */
int
main( argc, argv )
int argc;
char **argv;
{
    extern void rle_box();
    rle_hdr the_hdr;
    char * rlefname = NULL;
    int vflag = 0, cflag = 0, margin = 0;
    int xmin, xmax, ymin, ymax;
    int rle_cnt, rle_err;

    if ( scanargs( argc, argv, "% v%- c%- m%-margin!d infile%s",
		   &vflag, &cflag, &margin, &margin,
		   &rlefname ) == 0 )
	exit( 1 );

    the_hdr = *rle_hdr_init( (rle_hdr *)NULL );
    rle_names( &the_hdr, cmd_name( argv ), rlefname, 0 );
    the_hdr.rle_file = rle_open_f(the_hdr.cmd, rlefname, "r");

    for ( rle_cnt = 0;
	  (rle_err = rle_get_setup( &the_hdr )) == RLE_SUCCESS;
	  rle_cnt++ )
    {

	rle_box( &the_hdr, &xmin, &xmax, &ymin, &ymax );

	/* If margin, enlarge bounds.  Don't let them go negative */
	if ( margin )
	{
	    xmax += margin;
	    ymax += margin;
	    xmin -= margin;
	    if ( xmin < 0 )
		xmin = 0;
	    ymin -= margin;
	    if ( ymin < 0 )
		ymin = 0;
	}

	if ( cflag )
	    printf( vflag ? "xmin=%d ymin=%d xmax=%d ymax=%d\n" :
		    "%d %d %d %d\n",
		    xmin, ymin, xmax, ymax );
	else
	    printf( vflag ? "xmin=%d xmax=%d ymin=%d ymax=%d\n" :
		    "%d %d %d %d\n",
		    xmin, xmax, ymin, ymax );
    }

    /* Check for an error.  EOF or EMPTY is ok if at least one image
     * has been read.  Otherwise, print an error message.
     */
    if ( rle_cnt == 0 || (rle_err != RLE_EOF && rle_err != RLE_EMPTY) )
	rle_get_error( rle_err, the_hdr.cmd, rlefname );

    exit( 0 );
}
@


1.3
log
@quell compiler warnings
@
text
@d1 1
a1 1
/* 
d3 1
a3 1
 * 
d10 1
a10 1
static char rcsid[] = "$Header: /cvsroot/brlcad/brlcad/src/other/URToolkit/tools/rlebox.c,v 1.2 2005/11/06 03:50:58 brlcad Exp $";
d22 1
a22 1
 * 
d39 1
a39 1
 * 	
@


1.2
log
@include stdlib.h to quell ansi c warnings about exit being implicitly defined
@
text
@d10 1
a10 1
static char rcsid[] = "$Header: /cvsroot/brlcad/brlcad/src/other/URToolkit/tools/rlebox.c,v 1.1 2005/01/24 05:12:41 brlcad Exp $";
d44 1
a44 1
void
@


1.2.2.1
log
@update from HEAD
@
text
@d10 1
a10 1
static char rcsid[] = "$Header: /cvsroot/brlcad/brlcad/src/other/URToolkit/tools/rlebox.c,v 1.2 2005/11/06 03:50:58 brlcad Exp $";
d44 1
a44 1
int
@


1.1
log
@update of urt from 3.0 to 3.1b1; this includes keeping directory structure and moving tools to src/other/URToolkit/tools
@
text
@d10 1
a10 1
static char rcsid[] = "$Header: /l/spencer/src/urt/tools/RCS/rlebox.c,v 3.0.1.3 1992/04/30 14:11:24 spencer Exp $";
d15 1
@


1.1.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d10 1
a10 1
static char rcsid[] = "$Header$";
a14 1
#include <stdlib.h>
@


