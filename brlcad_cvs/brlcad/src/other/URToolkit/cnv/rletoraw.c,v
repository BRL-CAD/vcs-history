head	1.5;
access;
symbols
	rel-7-10-4:1.4
	STABLE:1.4.0.2
	stable-branch:1.2
	rel-7-10-2:1.4
	rel-7-10-0:1.4
	rel-7-8-4:1.4
	rel-7-8-2:1.4
	rel-7-8-0:1.4
	trimnurbs-branch:1.3.0.2
	help:1.3
	temp_tag:1.3
	bobWinPort-20051223-freeze:1.2
	postmerge-20051223-bobWinPort:1.3
	premerge-20051223-bobWinPort:1.3
	rel-7-6-6:1.3
	rel-7-6-4:1.3
	rel-7-6-2:1.2
	rel-7-6-branch:1.2.0.6
	rel-7-6-0:1.2
	rel-7-4-2:1.2
	rel-7-4-branch:1.2.0.4
	bobWinPort:1.2.0.2
	rel-7-4-0:1.2
	rel-7-2-6:1.2
	rel-7-2-4:1.2
	rel-7-2-2:1.2
	rel-7-2-0:1.2
	rel-7-0-4:1.1;
locks; strict;
comment	@ * @;


1.5
date	2007.09.14.15.21.11;	author erikgreenwald;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.24.19.36.13;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.06.03.50.58;	author brlcad;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.02.12.06.28.24;	author lbutler;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2005.01.24.04.55.27;	author brlcad;	state Exp;
branches;
next	;

1.2.6.1
date	2005.11.13.13.46.18;	author brlcad;	state Exp;
branches;
next	;

1.3.2.1
date	2006.04.07.19.34.06;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@removed trailing whitespace
@
text
@/*
 * This software is copyrighted as noted below.  It may be freely copied,
 * modified, and redistributed, provided that the copyright notice is
 * preserved on all copies.
 *
 * There is no warranty or other guarantee of fitness for this software,
 * it is provided solely "as is".  Bug reports or fixes may be sent
 * to the author, who may or may not act on them as he desires.
 *
 * You may not include this software in a program or other software product
 * without supplying the source, or without informing the end-user that the
 * source is available for no extra charge.
 *
 * If you modify this software, you should include a notice giving the
 * name of the person performing the modification, the date of modification,
 * and the reason for such modification.
 */
/*
 * rletoraw.c - Convert the RLE format to the kitchen sink.
 *
 * Author:	Martin R. Friedmann
 * 		Vision and Modeling Group/Media Lab
 * 		Massachusetts Institute of Technology
 * Date:	Thu Sep 13 1990
 * Copyright (c) 1990, Martin R. Friedmann
 *
 * usage : rletoraw [-{Ns}] [-r] [-w width] [-h height] [-f header-size]
 *                   [-t tailer-size] [-n nchannels] [-a]
 *                   [-p scanline-pad] [-l left-scanline-pad] [-o outfile]
 *                   [infile]
 *
 * -a dont strip the alpha channel from the rle file
 * -s output data in scanline interleaved order
 * -N output data in non-interleaved order (eg. | split -Wid*Height -)
 * -r reverse the channel order (e.g. write data as ABGR instead of
 *    the default RGBA order)
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include "rle.h"

/* hey.. why spin normally! */
#define duff(counter, block) {\
  while (counter >= 4) {\
     { block; } \
     { block; } \
     { block; } \
     { block; } \
     counter -= 4;\
  } \
  switch (counter & 3) { \
     case 3:    { block; } \
     case 2:    { block; } \
     case 1:    { block; } \
     case 0:    counter = 0;\
     }\
}


#define WRITE_DATA() \
    if (fwrite( outrows, 1, fwrite_len, outfile ) != fwrite_len) {\
	perror( "write error" );\
	exit(-2);\
    }\


int
main(argc,argv)
int argc;
char *argv[];
{
    int i, rle_err;
    char *nullbytes = NULL;
    char *infname = NULL, *outfname = NULL, *progname;
    FILE *infile, *outfile;
    rle_hdr hdr;
    int oflag = 0;
    int fflag = 0, tflag = 0, Nflag = 0, rflag = 0;
    int header = 0, trailer = 0;
    int pflag= 0, right_pad = 0, lflag = 0, left_pad = 0;
    int aflag = 0, output_alpha = 0, sflag = 0;

    int height, width, nochan;
    int red_pos, alpha_pos, green_pos = 0, blue_pos = 0;
    int img_size;

    /* Default color values */
    unsigned char *outrows;
    rle_pixel **inrows;
    int outrows_size;
    int y;
    int line_pos;
    int fwrite_len;
    /* unsigned char *fwrite_pos; */

    progname = cmd_name( argv );

    if ( scanargs( argc, argv,
		  "% Ns%- r%- a%- f%-header-size!d t%-trailer-size!d \n\
\t\tp%-scanline-pad!d l%-left-scanline-pad!d o%-outfile!s \n\
\t\tinfile%s\n(\
\t-a\tDon't strip the alpha channel from the rle file.\n\
\t-f,-t\tEach output image is preceded (followed) by so many bytes.\n\
\t-l,-p\tScanlines are padded on left (right) end with so many bytes.\n\
\t\tAll padding is with null (0) bytes.\n\
\t-s\tOutput data in scanline interleaved order\n\
\t-N\tOutput data in non-interleaved order (eg. | split -Wid*Height -)\n\
\t-r\treverse the channel order (e.g. write data as ABGR instead of\n\
\t\tthe default RGBA order).)",
		  &Nflag, &rflag, &aflag, &fflag, &header,
		  &tflag, &trailer, &pflag, &right_pad, &lflag, &left_pad,
		  &oflag, &outfname, &infname ) == 0)
	exit( 1 );

    /* Initialize header. */
    hdr = *rle_hdr_init( (rle_hdr *)NULL );
    rle_names( &hdr, cmd_name( argv ), infname, 0 );

    if (Nflag) {
	if (Nflag & 1) {
	    Nflag = 0;
	    sflag = 1;
	} else {
	    Nflag = 1;
	    sflag = 0;
	}
    }


    /* Open Raw file */
    infile = rle_open_f( progname, infname, "r" );
    outfile = rle_open_f( progname, outfname, "w" );


    rle_dflt_hdr.rle_file = infile;

    if ( (rle_err = rle_get_setup(&rle_dflt_hdr)) < 0) {
	rle_get_error( rle_err, progname, infname );
	exit ( rle_err );
    }

    rle_dflt_hdr.xmax -= rle_dflt_hdr.xmin;
    rle_dflt_hdr.xmin = 0;
    rle_dflt_hdr.ymax -= rle_dflt_hdr.ymin;
    rle_dflt_hdr.ymin = 0;

    width = rle_dflt_hdr.xmax + 1;
    height = rle_dflt_hdr.ymax + 1;
    nochan = rle_dflt_hdr.ncolors;

    fprintf(stderr, "width %d, height %d, channels %d\n", width, height, nochan);

    if (! aflag)
	RLE_CLR_BIT(rle_dflt_hdr, RLE_ALPHA);
    output_alpha = (aflag && RLE_BIT(rle_dflt_hdr, RLE_ALPHA)) ? 1 : 0;

    /* for -Non-interleaved case, we need nochan-1 whole channels of buffer */
    /* HACK: we allocate more memory; we jack the size for the first fread */
    outrows_size = width * (nochan + output_alpha);
    if ( Nflag )
	outrows_size *= height;
    if ((outrows = (unsigned char *) malloc ( outrows_size )) == NULL ) {
	fprintf(stderr, "%s: No memory available for rows malloc\n", progname);
	exit(-2);
    }

    img_size = width * height;

    /* Were only interested in R, G, & B */
    for (i = 3; i < rle_dflt_hdr.ncolors; i++)
	RLE_CLR_BIT(rle_dflt_hdr, i);

    if (rle_row_alloc( &rle_dflt_hdr, &inrows )) {
	fprintf(stderr, "%s: No memory available for rle_row_alloc\n", progname);
	exit(-2);
    }

    /* maybe faster to malloc and fwrite than to do lots of GETCs, Idunno */
    if (fflag || tflag) {
	nullbytes = (char *) malloc ( (header > trailer) ? header : trailer );
	if (! nullbytes)
	    fprintf(stderr, "%s: No memory for nullbytes\n", progname);
	else
	    for( i = (header > trailer) ? header : trailer; i > 0; )
		nullbytes[--i] = 0;
    }

    /* setup byte positions for reversed colors or otherwise */
    if ( rflag ) {
	alpha_pos = 0;
	/* alpha comes first if it's there */
	if (nochan > 2) {
	    red_pos = 2 + output_alpha;
	    green_pos = 1 + output_alpha;
	    blue_pos = 0 + output_alpha;
	} else
	    red_pos = 0 + output_alpha;
    }
    else {
	alpha_pos = nochan;
	red_pos = 0;
	if (nochan > 2) {
	    green_pos = 1;
	    blue_pos = 2;
	}
    }

    if ( Nflag ) {
	red_pos *= img_size;
	green_pos *= img_size;
	blue_pos *= img_size;
	alpha_pos *= img_size;
    } else if ( sflag ) {
	red_pos *= width;
	green_pos *= width;
	blue_pos *= width;
	alpha_pos *= width;
    }

    y = height;
    line_pos = 0;
    fwrite_len = outrows_size;
    /* fwrite_pos = outrows; */

    /* write the header */
    if (fflag)
	fwrite( nullbytes, 1, header, outfile );

    while (--y >= 0) {
	register rle_pixel *p, *o;
	register int stride = nochan + output_alpha, count;

	rle_getrow(&rle_dflt_hdr, inrows);
	/* non-interleaved data is easier to compute than interleaved */
	if ( Nflag ) {
	    /*
	     * This is a wierd case...  We had to read in all of the
	     * scanlines for all but one of the channels...  Then we can
	     * handle things scanline by scanline...  We have to jack
	     * the fread parameters for all of the remaining scanlines
	     */

	    if ( output_alpha )
		bcopy(inrows[RLE_ALPHA], outrows + alpha_pos + line_pos,width);

	    bcopy(inrows[RLE_RED], outrows + red_pos + line_pos, width);

	    if (nochan > 2) {
		bcopy(inrows[RLE_GREEN], outrows + green_pos + line_pos,width);
		bcopy(inrows[RLE_BLUE], outrows + blue_pos + line_pos,width);
	    }
	    line_pos += width;
	} else if (sflag) {
	    /* scanline interleaved: we only need to copy the data */
	    if ( output_alpha )
		bcopy (inrows[RLE_ALPHA], outrows + alpha_pos, width);

	    bcopy (inrows[RLE_RED], outrows + red_pos, width);

	    if (nochan > 2) {
		bcopy(inrows[RLE_GREEN], outrows + green_pos, width);
		bcopy(inrows[RLE_BLUE], outrows + blue_pos, width);
	    }
	}
	else
	{
#define COPY_LINE() duff(count, *o = *p++; o += stride);

	    /* ahhh...  the default.  interleaved data */
	    if ( output_alpha ) {
		o = outrows + alpha_pos;
		p = inrows[RLE_ALPHA];
		count = width;
		COPY_LINE();
	    }

	    o = outrows + red_pos;
	    p = inrows[RLE_RED];
	    count = width;
	    COPY_LINE();

	    if (nochan > 2) {
		o = outrows + green_pos;
		p = inrows[RLE_GREEN];
		count = width;
		COPY_LINE();

		o = outrows + blue_pos;
		p = inrows[RLE_BLUE];
		count = width;
		COPY_LINE();
	    }
	}

	/* LEFT_PAD */
	for (count = 0; count < left_pad; count++)
	    putc('\0', outfile);

	/* WRITE_SCANLINE */
	if (! Nflag)
	    WRITE_DATA();

	/* RIGHT_PAD */
	for (count = 0; count < right_pad; count++)
	    putc('\0', outfile);

    }
    if ( Nflag )
	WRITE_DATA();

    /* write the trailer */
    if (tflag)
	fwrite( nullbytes, 1, trailer, outfile );

    exit(0);
}

@


1.4
log
@quell compiler warnings
@
text
@d3 1
a3 1
 * modified, and redistributed, provided that the copyright notice is 
d5 1
a5 1
 * 
d11 1
a11 1
 * without supplying the source, or without informing the end-user that the 
d18 1
a18 1
/* 
d20 1
a20 1
 * 
d67 1
a67 1
    
d70 1
a70 1
main(argc,argv) 
d73 1
a73 1
{ 
d100 1
a100 1
    if ( scanargs( argc, argv, 
d130 1
a130 1
	       
d138 1
a138 1
    
d148 1
a148 1
    
d152 1
a152 1
    
d158 1
a158 1
    
d168 1
a168 1
    
d209 1
a209 1
    
d230 1
a230 1
    
d234 1
a234 1
	
d244 2
a245 2
	    
	    if ( output_alpha ) 
d247 1
a247 1
	    
d249 1
a249 1
	    
d259 1
a259 1
	    
d261 1
a261 1
	    
d267 1
a267 1
	else 
d270 1
a270 1
	    
d277 2
a278 2
	    }	    
	    
d283 1
a283 1
	    
d289 1
a289 1
		
d296 1
a296 1
	
d300 1
a300 1
	
d304 1
a304 1
	
d308 1
a308 1
	
d312 1
a312 1
    
d316 1
a316 1
    
@


1.3
log
@include stdlib.h to quell ansi c warnings about exit being implicitly defined
@
text
@d69 1
a69 1
void
@


1.3.2.1
log
@update from HEAD
@
text
@d69 1
a69 1
int
@


1.2
log
@Changes to quell compiler warnings on SGI.
Mostly turning "static var" into "static int var" or similar,
and deleting unused variable declarations.
@
text
@d40 1
@


1.2.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@a39 1
#include <stdlib.h>
@


1.1
log
@upgrade from 3.0 to 3.1b1, files moved from src/other/URToolkit to cnv subdir
@
text
@d95 1
a95 1
    unsigned char *fwrite_pos;
d224 1
a224 1
    fwrite_pos = outrows;
@

