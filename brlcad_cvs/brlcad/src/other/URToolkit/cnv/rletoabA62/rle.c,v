head	1.2;
access;
symbols
	rel-7-10-4:1.1
	STABLE:1.1.0.10
	stable-branch:1.1
	rel-7-10-2:1.1
	rel-7-10-0:1.1
	rel-7-8-4:1.1
	rel-7-8-2:1.1
	rel-7-8-0:1.1
	trimnurbs-branch:1.1.0.8
	help:1.1
	temp_tag:1.1
	bobWinPort-20051223-freeze:1.1
	postmerge-20051223-bobWinPort:1.1
	premerge-20051223-bobWinPort:1.1
	rel-7-6-6:1.1
	rel-7-6-4:1.1
	rel-7-6-2:1.1
	rel-7-6-branch:1.1.0.6
	rel-7-6-0:1.1
	rel-7-4-2:1.1
	rel-7-4-branch:1.1.0.4
	bobWinPort:1.1.0.2
	rel-7-4-0:1.1
	rel-7-2-6:1.1
	rel-7-2-4:1.1
	rel-7-2-2:1.1
	rel-7-2-0:1.1
	rel-7-0-4:1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.09.14.15.21.11;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.24.04.57.04;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed trailing whitespace
@
text
@/*
 * Copyright (C) 1988 Research Institute for Advanced Computer Science.
 * All rights reserved.  The RIACS Software Policy contains specific
 * terms and conditions on the use of this software, and must be
 * distributed with any copies.  This file may be redistributed.  This
 * copyright and notice must be preserved in all copies made of this file.
 */
static char rcsid[] = "$Header: /cvsroot/brlcad/brlcad/src/other/URToolkit/cnv/rletoabA62/rle.c,v 1.1 2005/01/24 04:57:04 brlcad Exp $";

/*
 * Interface routines for Utah Raster Toolkit
 */

#include <stdio.h>
#include "rle.h"

/*
 * Globals are stored in a structure.
 */

rle_hdr hdr;

static struct {
    int             width;
    int             height;
    unsigned char **scan;
    int		    row;
} Globals;

void
rasterInit(fd, width, height)
int fd;
int width;
int height;
{
    FILE           *rleFile;
    int             i;

    hdr = *rle_hdr_init( (rle_hdr *)NULL );
    /* Fake the names, since we don't have argv. */
    rle_names( &hdr, "rletoabA62", fd == 0 ? NULL : "RLE file", 0 );

    Globals.width = width;
    Globals.height = height;
    if (fd == 0) {
	rleFile = stdin;
    } else {
	rleFile = fdopen(fd, "r");
    }
    hdr.rle_file = rleFile;
    rle_get_setup_ok(&hdr, NULL, NULL);

    if (hdr.xmax > width) {
	fprintf(stderr, "Warning: RLE width (%d) exceeds maximum (%d)\n",
	    hdr.xmax, width);
    }
    if (hdr.ymax > height) {
	fprintf(stderr, "Warning: RLE height (%d) exceeds maximum (%d)\n",
	    hdr.ymax, height);
    }
    Globals.row = 0;
    Globals.scan = (unsigned char **) malloc((hdr.ncolors +
				      hdr.alpha) *
				     sizeof(unsigned char *));
    for (i = 0; i < hdr.ncolors + hdr.alpha; i++)
	Globals.scan[i] =
	    (unsigned char *)malloc(hdr.xmax+1);

    if (hdr.alpha) {
	Globals.scan++;
    }
}

void
rasterRowGet(red, green, blue)
unsigned char *red, *green, *blue;
{
    int             i, max;

    if (Globals.row < hdr.ymin || Globals.row > hdr.ymax) {
	for (i = 0; i < Globals.width; i++) {
	    red[i] = 0;
	    green[i] = 0;
	    blue[i] = 0;
	}
    } else {
	rle_getrow(&hdr, Globals.scan);
	max = hdr.xmax < Globals.width ?
	    hdr.xmax : Globals.width;
	for (i = 0 ; i < max; i++) {
	    red[i] = Globals.scan[0][i];
	    green[i] = Globals.scan[1][i];
	    blue[i] = Globals.scan[2][i];
	}
	for (; i < Globals.width; i++) {
	    red[i] = green[i] = blue[i] = 0;
	}
    }
    Globals.row++;
}

void
rasterDone()
{
    rle_puteof(&hdr);
}
@


1.1
log
@upgrade from 3.0 to 3.1b1, files moved from src/other/URToolkit to cnv subdir
@
text
@d8 1
a8 1
static char rcsid[] = "$Header:$";
d54 1
a54 1
	fprintf(stderr, "Warning: RLE width (%d) exceeds maximum (%d)\n", 
d58 1
a58 1
	fprintf(stderr, "Warning: RLE height (%d) exceeds maximum (%d)\n", 
d66 1
a66 1
	Globals.scan[i] = 
@

