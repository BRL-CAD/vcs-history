head	1.3;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.4
	rel-7-10-2:1.2
	rel-7-10-0:1.2
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1.2.1
	postmerge-20051223-bobWinPort:1.2
	bobWinPort:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.09.14.15.21.20;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.23.21.26.36;	author bob1961;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.19.38.47;	author bob1961;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.09.08.19.38.47;	author bob1961;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed trailing whitespace
@
text
@#!../src/bltwish

package require BLT
# --------------------------------------------------------------------------
# Starting with Tcl 8.x, the BLT commands are stored in their own
# namespace called "blt".  The idea is to prevent name clashes with
# Tcl commands and variables from other packages, such as a "table"
# command in two different packages.
#
# You can access the BLT commands in a couple of ways.  You can prefix
# all the BLT commands with the namespace qualifier "blt::"
#
#    blt::graph .g
#    blt::table . .g -resize both
#
# or you can import all the command into the global namespace.
#
#    namespace import blt::*
#    graph .g
#    table . .g -resize both
#
# --------------------------------------------------------------------------
if { $tcl_version >= 8.0 } {
    namespace import blt::*
    namespace import -force blt::tile::*
}

source scripts/demo.tcl

image create photo bgTile -file ./images/chalk.gif
image create photo label1 -file ./images/mini-book1.gif
image create photo label2 -file ./images/mini-book2.gif

tabset .t -relief raised \
    -activebackground yellow \
    -bg red -borderwidth 0 -highlightthickness 0 \
    -scrollcommand { .s set } \
    -width 3i

#option add *iPadX 4
#option add *iPadY 2

.t insert end First \
    -image label1 \
    -anchor center \
    -selectbackground darkolivegreen2  \
    Again Next another test of \
    a -image label2 widget

scrollbar .s -command { .t view } -orient horizontal
table . \
    .t 0,0 -fill both \
    .s 1,0 -fill x

table configure . r1 -resize none
focus .t

@


1.2
log
@Merge of bobWinPort
@
text
@d5 1
a5 1
# Starting with Tcl 8.x, the BLT commands are stored in their own 
d8 1
a8 1
# command in two different packages.  
d12 1
a12 1
#  
d15 1
a15 1
# 
d38 1
a38 1
    -width 3i 
d48 1
a48 1
    a -image label2 widget 
d53 1
a53 1
    .s 1,0 -fill x 
@


1.1
log
@file tabset1.tcl was initially added on branch bobWinPort.
@
text
@d1 57
@


1.1.2.1
log
@Initial check-in
@
text
@a0 57
#!../src/bltwish

package require BLT
# --------------------------------------------------------------------------
# Starting with Tcl 8.x, the BLT commands are stored in their own 
# namespace called "blt".  The idea is to prevent name clashes with
# Tcl commands and variables from other packages, such as a "table"
# command in two different packages.  
#
# You can access the BLT commands in a couple of ways.  You can prefix
# all the BLT commands with the namespace qualifier "blt::"
#  
#    blt::graph .g
#    blt::table . .g -resize both
# 
# or you can import all the command into the global namespace.
#
#    namespace import blt::*
#    graph .g
#    table . .g -resize both
#
# --------------------------------------------------------------------------
if { $tcl_version >= 8.0 } {
    namespace import blt::*
    namespace import -force blt::tile::*
}

source scripts/demo.tcl

image create photo bgTile -file ./images/chalk.gif
image create photo label1 -file ./images/mini-book1.gif
image create photo label2 -file ./images/mini-book2.gif

tabset .t -relief raised \
    -activebackground yellow \
    -bg red -borderwidth 0 -highlightthickness 0 \
    -scrollcommand { .s set } \
    -width 3i 

#option add *iPadX 4
#option add *iPadY 2

.t insert end First \
    -image label1 \
    -anchor center \
    -selectbackground darkolivegreen2  \
    Again Next another test of \
    a -image label2 widget 

scrollbar .s -command { .t view } -orient horizontal
table . \
    .t 0,0 -fill both \
    .s 1,0 -fill x 

table configure . r1 -resize none
focus .t

@

