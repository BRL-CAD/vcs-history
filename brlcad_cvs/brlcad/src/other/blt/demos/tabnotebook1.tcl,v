head	1.3;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.4
	rel-7-10-2:1.2
	rel-7-10-0:1.2
	rel-7-8-4:1.2
	rel-7-8-2:1.2
	rel-7-8-0:1.2
	trimnurbs-branch:1.2.0.2
	help:1.2
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1.2.1
	postmerge-20051223-bobWinPort:1.2
	bobWinPort:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.09.14.15.21.19;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.23.21.26.36;	author bob1961;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.19.38.47;	author bob1961;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.09.08.19.38.47;	author bob1961;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed trailing whitespace
@
text
@#!../src/bltwish

package require BLT
# --------------------------------------------------------------------------
# Starting with Tcl 8.x, the BLT commands are stored in their own
# namespace called "blt".  The idea is to prevent name clashes with
# Tcl commands and variables from other packages, such as a "table"
# command in two different packages.
#
# You can access the BLT commands in a couple of ways.  You can prefix
# all the BLT commands with the namespace qualifier "blt::"
#
#    blt::graph .g
#    blt::table . .g -resize both
#
# or you can import all the command into the global namespace.
#
#    namespace import blt::*
#    graph .g
#    table . .g -resize both
#
# --------------------------------------------------------------------------
if { $tcl_version >= 8.0 } {
    namespace import blt::*
    namespace import -force blt::tile::*
}
source scripts/demo.tcl

# Create a tabnotebook widget.

tabnotebook .tnb

# The notebook is initially empty.  Insert tabs (pages) into the notebook.

foreach label { First Second Third Fourth } {
    .tnb insert end -text $label
}

# Tabs are referred to by their index.  Tab indices can be one of the
# following:
#
#	 number		Position of tab the notebook's list of tabs.
# 	 @@x,y		Tab closest to the specified X-Y screen coordinates.
# 	 "active"	Tab currently under the mouse pointer.
# 	 "focus"	Tab that has focus.
# 	 "select"	The currently selected tab.
# 	 "right"	Next tab from "focus".
# 	 "left"		Previous tab from "focus".
# 	 "up"		Next tab from "focus".
# 	 "down"		Previous tab from "focus".
# 	 "end"		Last tab in list.
#	 string		Tab identifier.  The "insert" operation returns
#			a unique identifier for the new tab (e.g. "tab0").
#			This ID is valid for the life of the tab, even if
#			the tabs are moved or reordered.

# Each tab has a text label and an optional Tk image.

set image [image create photo -file ./images/mini-book1.gif]
.tnb tab configure 0 -image $image

#
# How to embed a widget into a page.
#

# 1. The widget must be a child of the tabnotebook.

set image [image create photo -file ./images/blt98.gif]
label .tnb.label -image $image -relief sunken -bd 2

# 2. Use the -window option to embed the widget.

.tnb tab configure 0 -window .tnb.label

# The tearoff perforation, displayed on the selected tab, is
# controlled by the tabnotebook's -tearoff option.
#
# If you don't want tearoff pages, configure -tearoff to "no".

.tnb configure -tearoff yes

table . \
    0,0 .tnb -fill both

focus .tnb

@


1.2
log
@Merge of bobWinPort
@
text
@d5 1
a5 1
# Starting with Tcl 8.x, the BLT commands are stored in their own 
d8 1
a8 1
# command in two different packages.  
d12 1
a12 1
#  
d15 1
a15 1
# 
d29 1
a29 1
# Create a tabnotebook widget.  
d33 1
a33 1
# The notebook is initially empty.  Insert tabs (pages) into the notebook.  
d39 1
a39 1
# Tabs are referred to by their index.  Tab indices can be one of the 
d45 1
a45 1
# 	 "focus"	Tab that has focus.  
d52 2
a53 2
#	 string		Tab identifier.  The "insert" operation returns 
#			a unique identifier for the new tab (e.g. "tab0").  
d55 1
a55 1
#			the tabs are moved or reordered.  
d63 1
a63 1
# How to embed a widget into a page.  
d76 1
a76 1
# controlled by the tabnotebook's -tearoff option.  
d83 1
a83 1
    0,0 .tnb -fill both 
@


1.1
log
@file tabnotebook1.tcl was initially added on branch bobWinPort.
@
text
@d1 86
@


1.1.2.1
log
@Initial check-in
@
text
@a0 86
#!../src/bltwish

package require BLT
# --------------------------------------------------------------------------
# Starting with Tcl 8.x, the BLT commands are stored in their own 
# namespace called "blt".  The idea is to prevent name clashes with
# Tcl commands and variables from other packages, such as a "table"
# command in two different packages.  
#
# You can access the BLT commands in a couple of ways.  You can prefix
# all the BLT commands with the namespace qualifier "blt::"
#  
#    blt::graph .g
#    blt::table . .g -resize both
# 
# or you can import all the command into the global namespace.
#
#    namespace import blt::*
#    graph .g
#    table . .g -resize both
#
# --------------------------------------------------------------------------
if { $tcl_version >= 8.0 } {
    namespace import blt::*
    namespace import -force blt::tile::*
}
source scripts/demo.tcl

# Create a tabnotebook widget.  

tabnotebook .tnb

# The notebook is initially empty.  Insert tabs (pages) into the notebook.  

foreach label { First Second Third Fourth } {
    .tnb insert end -text $label
}

# Tabs are referred to by their index.  Tab indices can be one of the 
# following:
#
#	 number		Position of tab the notebook's list of tabs.
# 	 @@x,y		Tab closest to the specified X-Y screen coordinates.
# 	 "active"	Tab currently under the mouse pointer.
# 	 "focus"	Tab that has focus.  
# 	 "select"	The currently selected tab.
# 	 "right"	Next tab from "focus".
# 	 "left"		Previous tab from "focus".
# 	 "up"		Next tab from "focus".
# 	 "down"		Previous tab from "focus".
# 	 "end"		Last tab in list.
#	 string		Tab identifier.  The "insert" operation returns 
#			a unique identifier for the new tab (e.g. "tab0").  
#			This ID is valid for the life of the tab, even if
#			the tabs are moved or reordered.  

# Each tab has a text label and an optional Tk image.

set image [image create photo -file ./images/mini-book1.gif]
.tnb tab configure 0 -image $image

#
# How to embed a widget into a page.  
#

# 1. The widget must be a child of the tabnotebook.

set image [image create photo -file ./images/blt98.gif]
label .tnb.label -image $image -relief sunken -bd 2

# 2. Use the -window option to embed the widget.

.tnb tab configure 0 -window .tnb.label

# The tearoff perforation, displayed on the selected tab, is
# controlled by the tabnotebook's -tearoff option.  
#
# If you don't want tearoff pages, configure -tearoff to "no".

.tnb configure -tearoff yes

table . \
    0,0 .tnb -fill both 

focus .tnb

@

