head	14.6;
access;
symbols
	rel-7-10-4:14.4
	STABLE:14.4.0.2
	stable-branch:14.2
	rel-7-10-2:14.3
	rel-7-10-0:14.3
	rel-7-8-4:14.2
	rel-7-8-2:14.2
	rel-7-8-0:14.2
	trimnurbs-branch:14.2.0.8
	help:14.2
	temp_tag:14.2
	bobWinPort-20051223-freeze:14.2
	postmerge-20051223-bobWinPort:14.2
	premerge-20051223-bobWinPort:14.2
	rel-7-6-6:14.2
	rel-7-6-4:14.2
	rel-7-6-2:14.2
	rel-7-6-branch:14.2.0.6
	rel-7-6-0:14.2
	rel-7-4-2:14.2
	rel-7-4-branch:14.2.0.4
	bobWinPort:14.2.0.2
	rel-7-4-0:14.2
	rel-7-2-6:14.2
	rel-7-2-4:14.2
	rel-7-2-2:14.2
	rel-7-2-0:14.2
	rel-7-0-4:14.2
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.6
date	2007.10.24.21.38.23;	author erikgreenwald;	state Exp;
branches;
next	14.5;

14.5
date	2007.10.04.21.22.49;	author erikgreenwald;	state Exp;
branches;
next	14.4;

14.4
date	2007.08.18.20.15.33;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2007.02.02.07.30.45;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2005.01.23.01.30.49;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.20;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.50.33;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.6
log
@upgrade to 1.2.22 ("A new bug with decoding iCCP chunks was fixed.")
@
text
@
Installing libpng version 1.2.22 - October 13, 2007

On Unix/Linux and similar systems, you can simply type

    ./configure [--prefix=/path]
    make check
    make install

and ignore the rest of this document.

If configure does not work on your system and you have a reasonably
up-to-date set of tools, running ./autogen.sh before running ./configure
may fix the problem.  You can also run the individual commands in
autogen.sh with the --force option, if supported by your version of
the tools.  If you run 'libtoolize --force', though, this will replace
the distributed, patched, version of ltmain.sh with an unpatched version
and your shared library builds may fail to produce libraries with the
correct version numbers.

Instead, you can use one of the custom-built makefiles in the
"scripts" directory

    cp scripts/makefile.system makefile
    make test
    make install

Or you can use one of the "projects" in the "projects" directory.

If you want to use "cmake" (see www.cmake.org), copy CMakeLists.txt
from the "scripts" directory to this directory and type

   cmake . [-DPNG_MMX=YES] -DCMAKE_INSTALL_PREFIX=/path
   make
   make install

Before installing libpng, you must first install zlib, if it
is not already on your system.  zlib can usually be found
wherever you got libpng.  zlib can be placed in another directory,
at the same level as libpng.

If your system already has a preinstalled zlib you will still need
to have access to the zlib.h and zconf.h include files that
correspond to the version of zlib that's installed.

You can rename the directories that you downloaded (they
might be called "libpng-1.2.22" or "lpng109" and "zlib-1.2.1"
or "zlib121") so that you have directories called "zlib" and "libpng".

Your directory structure should look like this:

   ..       (the parent directory)
      libpng  (this directory)
          INSTALL (this file)
          README
          *.h
          *.c
          contrib
             gregbook
             pngminus
             pngsuite
             visupng
          projects
             beos
             c5builder (Borland)
             visualc6 (msvc)
             netware.txt
             wince.txt
          scripts
             makefile.*
          pngtest.png
          etc.
      zlib
          README
          *.h
          *.c
          contrib
          etc.

If the line endings in the files look funny, you may wish to get the other
distribution of libpng.  It is available in both tar.gz (UNIX style line
endings) and zip (DOS style line endings) formats.

If you are building libpng with MSVC, you can enter the
libpng projects\visualc6 directory and follow the instructions in
projects\visualc6\README.txt.

You can build libpng for WindowsCE by downloading and installing
the projects\wince directory as instructed in the projects\wince.txt file, and
then following the instructions in the README* files.  Similarly, you can
build libpng for Netware or Beos as instructed in projects\netware.txt
or projects\beos.

Else enter the zlib directory and follow the instructions in zlib/README,
then come back here and run "configure" or choose the appropriate
makefile.sys in the scripts directory.

The files that are presently available in the scripts directory
include

 CMakeLists.txt    =>  "cmake" script
 makefile.std      =>  Generic UNIX makefile (cc, creates static libpng.a)
 makefile.elf      =>  Linux/ELF makefile symbol versioning,
                       gcc, creates libpng12.so.0.1.2.22)
 makefile.linux    =>  Linux/ELF makefile
                       (gcc, creates libpng12.so.0.1.2.22)
 makefile.gcc      =>  Generic makefile (gcc, creates static libpng.a)
 makefile.knr      =>  Archaic UNIX Makefile that converts files with
                       ansi2knr (Requires ansi2knr.c from
                       ftp://ftp.cs.wisc.edu/ghost)
 makefile.aix      =>  AIX/gcc makefile
 makefile.cygwin   =>  Cygwin/gcc makefile
 makefile.darwin   =>  Darwin makefile, can use on MacosX
 makefile.dec      =>  DEC Alpha UNIX makefile
 makefile.freebsd  =>  FreeBSD makefile
 makefile.hpgcc    =>  HPUX makefile using gcc
 makefile.hpux     =>  HPUX (10.20 and 11.00) makefile
 makefile.hp64     =>  HPUX (10.20 and 11.00) makefile, 64-bit
 makefile.ibmc     =>  IBM C/C++ version 3.x for Win32 and OS/2 (static)
 makefile.intel    =>  Intel C/C++ version 4.0 and later
 libpng.icc        =>  Project file for IBM VisualAge/C++ version 4.0 or later
 makefile.netbsd   =>  NetBSD/cc makefile, uses PNGGCCRD, makes libpng.so.
 makefile.ne12bsd  =>  NetBSD/cc makefile, uses PNGGCCRD,
                       makes libpng12.so
 makefile.openbsd  =>  OpenBSD makefile
 makefile.sgi      =>  Silicon Graphics IRIX makefile (cc, creates static lib)
 makefile.sggcc    =>  Silicon Graphics (gcc,
                       creates libpng12.so.0.1.2.22)
 makefile.sunos    =>  Sun makefile
 makefile.solaris  =>  Solaris 2.X makefile (gcc,
                       creates libpng12.so.0.1.2.22)
 makefile.solaris-x86 =>  Solaris/intelMMX 2.X makefile (gcc,
                       creates libpng12.so.0.1.2.22)
 makefile.so9      =>  Solaris 9 makefile (gcc,
                       creates libpng12.so.0.1.2.22)
 makefile.32sunu   =>  Sun Ultra 32-bit makefile
 makefile.64sunu   =>  Sun Ultra 64-bit makefile
 makefile.sco      =>  For SCO OSr5  ELF and Unixware 7 with Native cc
 makefile.mips     =>  MIPS makefile
 makefile.acorn    =>  Acorn makefile
 makefile.amiga    =>  Amiga makefile
 smakefile.ppc     =>  AMIGA smakefile for SAS C V6.58/7.00 PPC compiler
                       (Requires SCOPTIONS, copied from scripts/SCOPTIONS.ppc)
 makefile.atari    =>  Atari makefile
 makefile.beos     =>  BEOS makefile for X86
 makefile.bor      =>  Borland makefile (uses bcc)
 makefile.bc32     =>  32-bit Borland C++ (all modules compiled in C mode)
 makefile.tc3      =>  Turbo C 3.0 makefile
 makefile.dj2      =>  DJGPP 2 makefile
 makefile.msc      =>  Microsoft C makefile
 makefile.vcwin32  =>  makefile for Microsoft Visual C++ 4.0 and later
 makefile.os2      =>  OS/2 Makefile (gcc and emx, requires pngos2.def)
 pngos2.def        =>  OS/2 module definition file used by makefile.os2
 makefile.watcom   =>  Watcom 10a+ Makefile, 32-bit flat memory model
 makevms.com       =>  VMS build script
 descrip.mms       =>  VMS makefile for MMS or MMK
 SCOPTIONS.ppc     =>  Used with smakefile.ppc

Copy the file (or files) that you need from the
scripts directory into this directory, for example

   MSDOS example: copy scripts\makefile.msc makefile
   UNIX example:    cp scripts/makefile.std makefile

Read the makefile to see if you need to change any source or
target directories to match your preferences.

Then read pngconf.h to see if you want to make any configuration
changes.

Then just run "make" which will create the libpng library in
this directory and "make test" which will run a quick test that reads
the "pngtest.png" file and writes a "pngout.png" file that should be
identical to it.  Look for "9782 zero samples" in the output of the
test.  For more confidence, you can run another test by typing
"pngtest pngnow.png" and looking for "289 zero samples" in the output.
Also, you can run "pngtest -m contrib/pngsuite/*.png" and compare
your output with the result shown in contrib/pngsuite/README.

Most of the makefiles will allow you to run "make install" to
put the library in its final resting place (if you want to
do that, run "make install" in the zlib directory first if necessary).
Some also allow you to run "make test-installed" after you have
run "make install".

If you encounter a compiler error message complaining about the
lines
      __png.h__ already includes setjmp.h;
      __dont__ include it again.;
This means you have compiled another module that includes setjmp.h,
which is hazardous because the two modules might not include exactly
the same setjmp.h.  If you are sure that you know what you are doing
and that they are exactly the same, then you can comment out or
delete the two lines.  Better yet, use the cexcept interface
instead, as demonstrated in contrib/visupng of the libpng distribution.

Further information can be found in the README and libpng.txt
files, in the individual makefiles, in png.h, and the manual pages
libpng.3 and png.5.


Using the ./configure script -- 16 December 2002.
=================================================


The ./configure script should work compatibly with what scripts/makefile.*
did, however there are some options you need to add to configure explicitly,
which previously was done semi-automatically (if you didn't edit
scripts/makefile.* yourself, that is)


CFLAGS="-Wall -O -funroll-loops \
-malign-loops=2 -malign-functions=2" ./configure --prefix=/usr/include \
--with-pkgconfigdir=/usr/lib/pkgconfig --includedir=/usr/include

You can alternatively specify --includedir=/usr/include, /usr/local/include,
/usr/include/png12, or whatever.


@


14.5
log
@Upgrade to 1.2.21. Fixes several bugs introduced in 1.2.19, possible overflows, and has some code cleanup.
@
text
@d2 1
a2 1
Installing libpng version 1.2.21 - October 4, 2007
d47 1
a47 1
might be called "libpng-1.2.21" or "lpng109" and "zlib-1.2.1"
d104 1
a104 1
                       gcc, creates libpng12.so.0.1.2.21)
d106 1
a106 1
                       (gcc, creates libpng12.so.0.1.2.21)
d128 1
a128 1
                       creates libpng12.so.0.1.2.21)
d131 1
a131 1
                       creates libpng12.so.0.1.2.21)
d133 1
a133 1
                       creates libpng12.so.0.1.2.21)
d135 1
a135 1
                       creates libpng12.so.0.1.2.21)
@


14.4
log
@update from libpng 1.2.16 to 1.2.19, picking up a handful of fixes.  nothing too critical as far as I can tell, but does reportedly include a minor security fix and major bug fixes (going from freshmeat categories)
@
text
@d2 1
a2 1
Installing libpng version 1.2.19 - August 18, 2007
d47 1
a47 1
might be called "libpng-1.2.19" or "lpng109" and "zlib-1.2.1"
d104 1
a104 1
                       gcc, creates libpng12.so.0.1.2.19)
d106 1
a106 7
                       (gcc, creates libpng12.so.0.1.2.19)
 makefile.gcmmx    =>  Linux/ELF makefile
                       (gcc, creates libpng12.so.0.1.2.19,
                       uses assembler code tuned for Intel MMX platform)
 makefile.nommx    =>  Linux/ELF makefile
                       (gcc, creates libpng12.so.0.1.2.19
                       does not use Intel MMX assembler code)
d128 1
a128 1
                       creates libpng12.so.0.1.2.19)
d131 1
a131 1
                       creates libpng12.so.0.1.2.19)
d133 1
a133 1
                       creates libpng12.so.0.1.2.19)
d135 1
a135 1
                       creates libpng12.so.0.1.2.19)
d151 1
a151 4
 makefile.vcawin32 =>  makefile for Microsoft Visual C++ 5.0 and later (uses
                       assembler code tuned for Intel MMX platform)
 makefile.vcwin32  =>  makefile for Microsoft Visual C++ 4.0 and later (does
                       not use assembler code)
@


14.3
log
@Updated to the latest release of libpng, from version 1.2.8 to version 1.2.16.  Includes all of their ('without config script' distribution) files.
@
text
@d2 1
a2 1
Installing libpng version 1.2.16 - January 31, 2007
d47 1
a47 1
might be called "libpng-1.2.16" or "lpng109" and "zlib-1.2.1"
d104 1
a104 1
                       gcc, creates libpng12.so.0.1.2.16)
d106 1
a106 1
                       (gcc, creates libpng12.so.0.1.2.16)
d108 1
a108 1
                       (gcc, creates libpng12.so.0.1.2.16,
d111 1
a111 1
                       (gcc, creates libpng12.so.0.1.2.16
d134 1
a134 1
                       creates libpng12.so.0.1.2.16)
d137 3
a139 1
                       creates libpng12.so.0.1.2.16)
d141 1
a141 1
                       creates libpng12.so.0.1.2.16)
d209 20
@


14.2
log
@update of libpng from 1.2.5 to 1.2.8
@
text
@d2 1
a2 1
Installing libpng version 1.2.8 - December 3, 2004
d4 41
a44 7
Before installing libpng, you must first install zlib.  zlib
can usually be found wherever you got libpng.  zlib can be
placed in another directory, at the same level as libpng.
Note that your system might already have a preinstalled
zlib, but you will still need to have access to the
zlib.h and zconf.h include files that correspond to the
version of zlib that's installed.
d47 1
a47 1
might be called "libpng-1.2.8" or "lpng109" and "zlib-1.2.1"
a83 1

d95 2
a96 2
then come back here and choose the appropriate makefile.sys in the scripts
directory.
d101 1
d104 1
a104 1
                       gcc, creates libpng12.so.0.1.2.8)
d106 1
a106 1
                       (gcc, creates libpng12.so.0.1.2.8)
d108 1
a108 1
                       (gcc, creates libpng12.so.0.1.2.8,
d110 3
d134 1
a134 1
                       creates libpng12.so.0.1.2.8)
d137 1
a137 1
                       creates libpng12.so.0.1.2.8)
d139 1
a139 1
                       creates libpng12.so.0.1.2.8)
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d2 1
a2 1
Installing libpng version 1.2.5 - October 3, 2002
d13 2
a14 2
might be called "libpng-1.2.5" or "lpng109" and "zlib-1.1.4"
or "zlib114") so that you have directories called "zlib" and "libpng".
a25 1
             msvctest
d31 2
a32 2
             borland
             msvc
a36 1
             libpng*.in
a49 2
If you are building libpng with MSVC, you can enter the libpng\msvc directory
and follow the instructions in msvc\README.txt.
d51 6
a56 2
You can build libpng for WindowsCE by entering the downloading and installing
the libpng\wince directory as instructed in the projects\wince.txt file, and
d58 2
a59 1
build libpng for Netware as instructed in projects\netware.txt.
d69 6
a74 2
 makefile.linux    =>  Linux/ELF makefile (gcc, creates libpng12.so.0.1.2.5)
 makefile.gcmmx    =>  Linux/ELF makefile (gcc, creates libpng12.so.0.1.2.5,
d82 1
a82 1
 makefile.darwin   =>  Darwin makefile
d84 1
a84 1
 makefile.hpgcc    =>  FreeBSD makefile
d87 1
a90 1
 makefile.macosx   =>  MACOS X Makefile
d92 2
a93 1
 makefile.ne0bsd  =>  NetBSD/cc makefile, uses PNGGCCRD, makes libpng0.so
d96 2
a97 1
 makefile.sggcc    =>  Silicon Graphics (gcc, creates libpng12.so.0.1.2.5)
d99 4
a102 2
 makefile.solaris  =>  Solaris 2.X makefile (gcc, creates libpng12.so.0.1.2.5)
 makefile.so9      =>  Solaris 9 makefile (gcc, creates libpng12.so.0.1.2.5)
a114 1
 makefile.bd32     =>  To make a png32bd.dll with Borland C++ 4.5
a126 1
 pngdef.pas        =>  Defines for a png32bd.dll with Borland C++ 4.5
d141 7
a147 7
Then just run "make test" which will create the libpng library in
this directory and run a quick test that reads the "pngtest.png"
file and writes a "pngout.png" file that should be identical to it.
Look for "9782 zero samples" in the output of the test.  For more
confidence, you can run another test by typing "pngtest pngnow.png"
and looking for "289 zero samples" in the output.  Also, you can
run "pngtest -m *.png" in the "contrib/pngsuite" directory and compare
d156 11
d168 2
a169 2
files, in the individual makefiles, in png.h, in the README files in
subdirectories of the LIB directory, and the manual pages libpng.3 and png.5.
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@@

