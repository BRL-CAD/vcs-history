head	14.2;
access;
symbols
	stable-branch:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@ * @;


14.2
date	2007.03.02.21.47.42;	author brlcad;	state dead;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.27;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.53.20;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@/*
 * tkMacInt.h --
 *
 *	Declarations of Macintosh specific shared variables and procedures.
 *
 * Copyright (c) 1995-1997 Sun Microsystems, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tkMacInt.h,v 14.1 2004/11/16 19:42:27 morrison Exp $
 */

#ifndef _TKMACINT
#define _TKMACINT

#ifndef _TKINT
#include "tkInt.h"
#endif

/*
 * Include platform specific public interfaces.
 */

#ifndef _TKMAC
#include "tkMac.h"
#endif

#ifndef _TKPORT
#include "tkPort.h"
#endif

#include <AppleEvents.h>
#include <Windows.h>
#include <QDOffscreen.h>
#include <Menus.h>

#define TK_MAC_68K_STACK_GROWTH (256*1024)

struct TkWindowPrivate {
    TkWindow *winPtr;     	/* Ptr to tk window or NULL if Pixmap */
    GWorldPtr portPtr;     	/* Either WindowRef or off screen world */
    int xOff;	       		/* X offset from toplevel window */
    int yOff;		       	/* Y offset from toplevel window */
    RgnHandle clipRgn;		/* Visable region of window */
    RgnHandle aboveClipRgn;	/* Visable region of window & it's children */
    int referenceCount;		/* Don't delete toplevel until children are
				 * gone. */
    struct TkWindowPrivate *toplevel;	/* Pointer to the toplevel
					 * datastruct. */
    int flags;			/* Various state see defines below. */
};
typedef struct TkWindowPrivate MacDrawable;

/*
 * This list is used to keep track of toplevel windows that have a Mac
 * window attached. This is useful for several things, not the least
 * of which is maintaining floating windows.
 */

typedef struct TkMacWindowList {
    struct TkMacWindowList *nextPtr;	/* The next window in the list. */
    TkWindow *winPtr;			/* This window */
} TkMacWindowList;

/*
 * Defines use for the flags field of the MacDrawable data structure.
 */
 
#define TK_SCROLLBAR_GROW	1
#define TK_CLIP_INVALID		2
#define TK_HOST_EXISTS		4
#define TK_DRAWN_UNDER_MENU	8

/*
 * I am reserving TK_EMBEDDED = 0x100 in the MacDrawable flags
 * This is defined in tk.h. We need to duplicate the TK_EMBEDDED flag in the
 * TkWindow structure for the window,  but in the MacWin.  This way we can still tell
 * what the correct port is after the TKWindow  structure has been freed.  This 
 * actually happens when you bind destroy of a toplevel to Destroy of a child.
 */

/*
 * This structure is for handling Netscape-type in process
 * embedding where Tk does not control the top-level.  It contains
 * various functions that are needed by Mac specific routines, like
 * TkMacGetDrawablePort.  The definitions of the function types
 * are in tkMac.h.
 */

typedef struct {
	Tk_MacEmbedRegisterWinProc *registerWinProc;
	Tk_MacEmbedGetGrafPortProc *getPortProc;
	Tk_MacEmbedMakeContainerExistProc *containerExistProc;
	Tk_MacEmbedGetClipProc *getClipProc;
	Tk_MacEmbedGetOffsetInParentProc *getOffsetProc;
} TkMacEmbedHandler;

extern TkMacEmbedHandler *gMacEmbedHandler;

/*
 * Defines used for TkMacInvalidateWindow
 */
 
#define TK_WINDOW_ONLY 0
#define TK_PARENT_WINDOW 1

/*
 * Accessor for the privatePtr flags field for the TK_HOST_EXISTS field
 */
 
#define TkMacHostToplevelExists(tkwin) \
    (((TkWindow *) (tkwin))->privatePtr->toplevel->flags & TK_HOST_EXISTS)

/*
 * Defines use for the flags argument to TkGenWMConfigureEvent.
 */
 
#define TK_LOCATION_CHANGED	1
#define TK_SIZE_CHANGED		2
#define TK_BOTH_CHANGED		3

/*
 * Variables shared among various Mac Tk modules but are not
 * exported to the outside world.
 */
 
extern int tkMacAppInFront;

/*
 * Globals shared among Macintosh Tk
 */
 
extern MenuHandle tkAppleMenu;		/* Handle to the Apple Menu */
extern MenuHandle tkFileMenu;		/* Handles to menus */
extern MenuHandle tkEditMenu;		/* Handles to menus */
extern RgnHandle tkMenuCascadeRgn;	/* A region to clip with. */
extern int tkUseMenuCascadeRgn;		/* If this is 1, clipping code
					 * should intersect tkMenuCascadeRgn
					 * before drawing occurs.
					 * tkMenuCascadeRgn will only
					 * be valid when the value of this
					 * variable is 1. */
extern TkMacWindowList *tkMacWindowListPtr;
					/* The list of toplevels */

/*
 * The following types and defines are for MDEF support.
 */

#if STRUCTALIGNMENTSUPPORTED
#pragma options align=mac8k
#endif
typedef struct TkMenuLowMemGlobals {
    long menuDisable;			/* A combination of the menu and the item
    					 * that the mouse is currently over. */
    short menuTop;			/* Where in global coords the top of the
    					 * menu is. */
    short menuBottom;			/* Where in global coords the bottom of
    					 * the menu is. */
    Rect itemRect;			/* This is the rectangle of the currently
    					 * selected item. */
    short scrollFlag;			/* This is used by the MDEF and the
    					 * Menu Manager to control when scrolling
    					 * starts. With hierarchicals, an
    					 * mChooseMsg can come before an
    					 * mDrawMsg, and scrolling should not
    					 * occur until after the mDrawMsg.
    					 * The mDrawMsg sets this flag;
    					 * mChooseMsg checks the flag and
    					 * does not scroll if it is set;
    					 * and then resets the flag. */
} TkMenuLowMemGlobals;
#if STRUCTALIGNMENTSUPPORTED
#pragma options align=reset
#endif

typedef pascal void (*TkMenuDefProcPtr) (short message, MenuHandle theMenu,
	Rect *menuRectPtr, Point hitPt, short *whichItemPtr,
	TkMenuLowMemGlobals *globalsPtr);
enum {
    tkUppMenuDefProcInfo = kPascalStackBased
	    | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(short)))
	    | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(MenuRef)))
	    | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Rect*)))
	    | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Point)))
	    | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(short*)))
	    | STACK_ROUTINE_PARAMETER(6, SIZE_CODE(sizeof(TkMenuLowMemGlobals *)))
};

#if GENERATINGCFM
typedef UniversalProcPtr TkMenuDefUPP;
#else
typedef TkMenuDefProcPtr TkMenuDefUPP;
#endif

#if GENERATINGCFM
#define TkNewMenuDefProc(userRoutine)	\
	(TkMenuDefUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), \
	tkUppMenuDefProcInfo, GetCurrentArchitecture())
#else
#define TkNewMenuDefProc(userRoutine) 	\
	((TkMenuDefUPP) (userRoutine))
#endif

#if GENERATINGCFM
#define TkCallMenuDefProc(userRoutine, message, theMenu, menuRectPtr, hitPt, \
	whichItemPtr, globalsPtr) \
	CallUniversalProc((UniversalProcPtr)(userRoutine), TkUppMenuDefProcInfo, \
	(message), (theMenu), (menuRectPtr), (hitPt), (whichItemPtr), \
	(globalsPtr))
#else
#define TkCallMenuDefProc(userRoutine, message, theMenu, menuRectPtr, hitPt, \
	whichItemPtr, globalsPtr) \
	(*(userRoutine))((message), (theMenu), (menuRectPtr), (hitPt), \
	(whichItemPtr), (globalsPtr))
#endif

#include "tkIntPlatDecls.h"

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * mac specific procedures exported from the DLL
 */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TKMACINT */
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id: tkMacInt.h,v 1.1 2004/05/20 14:53:20 morrison Exp $
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d11 1
a11 1
 * RCS: @@(#) $Id: tkMacInt.h,v 1.3 2004/03/04 19:49:22 morrison Exp $
@

