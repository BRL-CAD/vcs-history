head	14.2;
access;
symbols
	stable-branch:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.03.02.21.47.46;	author brlcad;	state dead;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.28;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.53.34;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@# Tests for the grab command.
#
# This file contains a collection of tests for one or more of the Tk
# built-in commands.  Sourcing this file runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 by Ajuba Solutions.
# All rights reserved.
#
# RCS: @@(#) $Id: grab.test,v 14.1 2004/11/16 19:42:28 morrison Exp $

package require tcltest 2.1
namespace import -force tcltest::configure
namespace import -force tcltest::testsDirectory
configure -testdir [file join [pwd] [file dirname [info script]]]
configure -loadfile [file join [testsDirectory] constraints.tcl]
tcltest::loadTestedCommands

# There's currently no way to test the actual grab effect, per se,
# in an automated test.  Therefore, this test suite only covers the
# interface to the grab command (ie, error messages, etc.)

test grab-1.1 {Tk_GrabObjCmd} {
    list [catch {grab} msg] $msg
} [list 1 "wrong # args: should be \"grab ?-global? window\" or \"grab option ?arg arg ...?\""]
test grab-1.2 {Tk_GrabObjCmd} {
    rename grab grabTest1.2
    set res [list [catch {grabTest1.2} msg] $msg]
    rename grabTest1.2 grab
    set res
} [list 1 "wrong # args: should be \"grabTest1.2 ?-global? window\" or \"grabTest1.2 option ?arg arg ...?\""]

test grab-1.3 {Tk_GrabObjCmd, "grab ?-global? window"} {
    list [catch {grab .foo bar baz} msg] $msg
} [list 1 "wrong # args: should be \"grab ?-global? window\""]
test grab-1.4 {Tk_GrabObjCmd, "grab ?-global? window"} {
    catch {destroy .foo}
    list [catch {grab .foo} msg] $msg
} [list 1 "bad window path name \".foo\""]
test grab-1.5 {Tk_GrabObjCmd, "grab ?-global? window"} {
    list [catch {grab -foo bar} msg] $msg
} [list 1 "bad option \"-foo\": must be -global"]
test grab-1.6 {Tk_GrabObjCmd, "grab ?-global? window"} {
    catch {destroy .foo}
    list [catch {grab -global .foo} msg] $msg
} [list 1 "bad window path name \".foo\""]

test grab-1.7 {Tk_GrabObjCmd} {
    list [catch {grab foo} msg] $msg
} [list 1 "bad option \"foo\": must be current, release, set, or status"]

test grab-1.8 {Tk_GrabObjCmd, "grab current ?window?"} {
    list [catch {grab current foo bar} msg] $msg
} [list 1 "wrong # args: should be \"grab current ?window?\""]
test grab-1.9 {Tk_GrabObjCmd, "grab current ?window?"} {
    catch {destroy .foo}
    list [catch {grab current .foo} msg] $msg
} [list 1 "bad window path name \".foo\""]

test grab-1.10 {Tk_GrabObjCmd, "grab release window"} {
    list [catch {grab release} msg] $msg
} [list 1 "wrong # args: should be \"grab release window\""]
test grab-1.11 {Tk_GrabObjCmd, "grab release window"} {
    catch {destroy .foo}
    list [catch {grab release .foo} msg] $msg
} [list 0 ""]
test grab-1.12 {Tk_GrabObjCmd, "grab release window"} {
    list [catch {grab release foo} msg] $msg
} [list 0 ""]

test grab-1.13 {Tk_GrabObjCmd, "grab set ?-global? window"} {
    list [catch {grab set} msg] $msg
} [list 1 "wrong # args: should be \"grab set ?-global? window\""]
test grab-1.14 {Tk_GrabObjCmd, "grab set ?-global? window"} {
    list [catch {grab set foo bar baz} msg] $msg
} [list 1 "wrong # args: should be \"grab set ?-global? window\""]
test grab-1.15 {Tk_GrabObjCmd, "grab set ?-global? window"} {
    catch {destroy .foo}
    list [catch {grab set .foo} msg] $msg
} [list 1 "bad window path name \".foo\""]
test grab-1.16 {Tk_GrabObjCmd, "grab set ?-global? window"} {
    list [catch {grab set -foo bar} msg] $msg
} [list 1 "bad option \"-foo\": must be -global"]
test grab-1.17 {Tk_GrabObjCmd, "grab set ?-global? window"} {
    catch {destroy .foo}
    list [catch {grab set -global .foo} msg] $msg
} [list 1 "bad window path name \".foo\""]

test grab-1.18 {Tk_GrabObjCmd, "grab status window"} {
    list [catch {grab status} msg] $msg
} [list 1 "wrong # args: should be \"grab status window\""]
test grab-1.19 {Tk_GrabObjCmd, "grab status window"} {
    list [catch {grab status foo bar} msg] $msg
} [list 1 "wrong # args: should be \"grab status window\""]
test grab-1.20 {Tk_GrabObjCmd, "grab status window"} {
    catch {destroy .foo}
    list [catch {grab status .foo} msg] $msg
} [list 1 "bad window path name \".foo\""]

test grab-2.1 {Tk_GrabObjCmd, grab status gives correct status} {
    set curr [grab current .]
    if { [string length $curr] > 0 } {
	grab release $curr
    }
    set result [grab status .]
    grab release .
    set result
} "none"
test grab-2.2 {Tk_GrabObjCmd, grab status gives correct status} {
    set curr [grab current .]
    if { [string length $curr] > 0 } {
	grab release $curr
    }
    grab .
    set result [grab status .]
    grab release .
    set result
} "local"
test grab-2.3 {Tk_GrabObjCmd, grab status gives correct status} {
    set curr [grab current .]
    if { [string length $curr] > 0 } {
	grab release $curr
    }
    grab -global .
    set result [grab status .]
    grab release .
    set result
} "global"

test grab-3.1 {Tk_GrabObjCmd, grab current gives correct information} {
    set curr [grab current .]
    if { [string length $curr] > 0 } {
	grab release $curr
    }
    set curr
} ""
test grab-3.2 {Tk_GrabObjCmd, grab current gives correct information} {
    set curr [grab current .]
    if { [string length $curr] > 0 } {
	grab release $curr
    }
    grab .
    set curr [grab current]
    grab release .
    set curr
} "."

test grab-4.1 {Tk_GrabObjCmd, grab release releases grab} {
    set curr [grab current .]
    if { [string length $curr] > 0 } {
	grab release $curr
    }
    grab .
    set result [grab status .]
    grab release .
    lappend result [grab status .]
    grab -global .
    lappend result [grab status .]
    grab release .
    lappend result [grab status .]
} [list "local" "none" "global" "none"]

test grab-5.1 {Tk_GrabObjCmd, grab set} {
    set curr [grab current .]
    if { [string length $curr] > 0 } {
	grab release $curr
    }
    grab set .
    set result [list [grab current .] [grab status .]]
    grab release .
    set result
} [list "." "local"]
test grab-5.2 {Tk_GrabObjCmd, grab set} {
    set curr [grab current .]
    if { [string length $curr] > 0 } {
	grab release $curr
    }
    grab set -global .
    set result [list [grab current .] [grab status .]]
    grab release .
    set result
} [list "." "global"]

tcltest::cleanupTests
return
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d10 1
a10 1
# RCS: @@(#) $Id: grab.test,v 1.1 2004/05/20 14:53:34 morrison Exp $
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d10 1
a10 1
# RCS: @@(#) $Id: grab.test,v 1.3 2004/03/04 19:49:26 morrison Exp $
@

