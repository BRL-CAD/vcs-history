head	14.2;
access;
symbols
	rel-7-10-4:14.1
	STABLE:14.1.0.10
	stable-branch:14.1
	rel-7-10-2:14.1
	rel-7-10-0:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.09.14.15.21.36;	author erikgreenwald;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.19;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.49.56;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@removed trailing whitespace
@
text
@# This file is a Tcl script to test out [incr Widgets] Selectiondialog class.
# It is organized in the standard fashion for Tcl tests with the following
# notation for test case labels:
#
#   1.x - Construction/Destruction tests
#   2.x - Configuration option tests
#   3.x - Method tests
#   4.x - Other tests
#
# Copyright (c) 1995 DSC Technologies Corporation
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @@(#) $Id: selectiondialog.test,v 14.1 2004/11/16 19:42:19 morrison Exp $

package require tcltest
namespace import -force ::tcltest::*

if [catch {package require Iwidgets 4.0}] {
  # Let's try modifying the auto_path.  Note that the IWIDGETS_LIBRARY
  # env var is initialized in the Makefile when doing a 'make test'.
  # If sourcing this file independently, this variable must be set manually.
  if ![info exists env(IWIDGETS_LIBRARY)] {
    error "Unable to locate Iwidgets package.  Set your IWIDGETS_LIBRARY\
      environment\nvariable to the directory that contains iwidgets.tcl"
  }
  lappend auto_path $env(IWIDGETS_LIBRARY)
  package require Iwidgets 4.0
}

if {[string compare test [info procs test]] == 1} {
    source defs
}

wm geometry . {}
raise .

set c 1
set o 1
set m 1

#
# Initial construction test
#
test Selectiondialog-1.$c {Selectiondialog construction} {
    iwidgets::Selectiondialog .sd
    .sd insert items end Hello {Out There} World
    .sd activate
} {}

incr c

#
# Option tests which are successful.
#
test Selectiondialog-2.$o {configuration option} {
    llength [.sd configure]
} {44}

incr o

foreach test {
    {-width 340 340}
    {-width 360 360}
    {-activerelief raised raised}
    {-borderwidth 2 2}
    {-background #d9d9d9 #d9d9d9}
    {-buttonboxpos n n}
    {-buttonboxpadx 10 10}
    {-buttonboxpos e e}
    {-buttonboxpos w w}
    {-buttonboxpady 10 10}
    {-buttonboxpos s s}
    {-cursor gumby gumby}
    {-foreground Black Black}
    {-highlightcolor Black Black}
    {-highlightthickness 2 2}
    {-modality global global}
    {-modality application application}
    {-modality none none}
    {-padx 15 15}
    {-pady 15 15}
    {-textbackground GhostWhite GhostWhite}
    {-separator off off}
    {-thickness 4 4}
    {-separator on on}
    {-title Selectiondialog Selectiondialog}
    {-childsitepos n n}
    {-childsitepos s s}
    {-childsitepos e e}
    {-childsitepos w w}
    {-childsitepos center center}
    {-cursor gumby gumby}
    {-exportselection 0 0}
    {-insertbackground Blue Blue}
    {-insertbackground Black Black}
    {-insertborderwidth 1 1}
    {-insertofftime 200 200}
    {-insertontime  500 500}
    {-insertwidth 3 3}
    {-itemslabel "Items Label" "Items Label"}
    {-itemson no no}
    {-labelfont 6x13 6x13}
    {-itemson yes yes}
    {-selectbackground #c3c3c3 #c3c3c3}
    {-selectborderwidth 2 2}
    {-selectforeground Black Black}
    {-selectionlabel "Selection Label" "Selection Label"}
    {-selectionon no no}
    {-selectionon yes yes}
    {-width 0 0}
    {-height 0 0}
    {-textfont 6x13 6x13}} {
	set option [lindex $test 0]
	test Selectiondialog-2.$o "configuration options, $option" {
	    .sd configure $option [lindex $test 1]
	    lindex [.sd configure $option] 4
	} [lindex $test 2]
	update
	incr o
}

#
# Method tests which are successful.
#
foreach test {
    {{.sd childsite} {.sd.shellchildsite.dschildsite.selectionbox.sbchildsite}}
    {{.sd clear items} {}}
    {{.sd component selectionbox component items get 0 end} {}}
    {{.sd insert items 0 One Two Three Four Five Six} {}}
    {{.sd component selectionbox component items get 0 end} {One Two Three Four Five Six}}
    {{.sd size} 6}
    {{.sd clear selection} {}}
    {{.sd insert selection 0 One} {}}
    {{.sd get} One}
    {{.sd index end} 6}
    {{.sd index Six} 5}
    {{.sd selection set 1} {}}
    {{.sd selectitem} {}}
    {{.sd curselection} 1}
    {{.sd get} Two}
    {{.sd delete Three} {}}
    {{.sd clear items} {}}
    {{.sd hide Help} {}}
    {{.sd hide Cancel} {}}
    {{.sd default Apply} {}}
    {{.sd show Cancel} {}}
    {{.sd deactivate} {}}} {
	set method [lindex [lindex $test 0] 1]
	test Selectiondialog-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 0 [lindex $test 1]]
	update
	incr m
}

#
# Method tests which fail and produce errors
#
foreach test {
    {{.sd clear bogus} {bad clear argument "bogus": should be selection or items}}
    {{.sd insert bogus bogus} {bad insert argument "bogus": should be selection or items}}} {
	set method [lindex [lindex $test 0] 1]
	test Selectiondialog-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 1 [lindex $test 1]]
	incr m
}

#
# Conclusion of constrcution/destruction tests
#
test Selectiondialog-1.$c {Selectiondialog destruction} {
    destroy .sd
    update
} {}

incr c

test Selectiondialog-1.$c {Selectiondialog construction} {
    iwidgets::selectiondialog .sd
    update
} {}

incr c

test Selectiondialog-1.$c {Selectiondialog destruction} {
    destroy .sd
    update
} {}

incr c

test Selectiondialog-1.$c {Selectiondialog destruction} {
    iwidgets::selectiondialog .sd
    destroy .sd
    update
} {}

::tcltest::cleanupTests
exit
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d15 1
a15 1
# @@(#) $Id: selectiondialog.test,v 1.1 2004/05/20 14:49:56 morrison Exp $
d68 8
a75 8
    {-background #d9d9d9 #d9d9d9} 
    {-buttonboxpos n n} 
    {-buttonboxpadx 10 10} 
    {-buttonboxpos e e} 
    {-buttonboxpos w w} 
    {-buttonboxpady 10 10} 
    {-buttonboxpos s s} 
    {-cursor gumby gumby} 
d79 9
a87 9
    {-modality global global} 
    {-modality application application} 
    {-modality none none} 
    {-padx 15 15} 
    {-pady 15 15} 
    {-textbackground GhostWhite GhostWhite} 
    {-separator off off} 
    {-thickness 4 4} 
    {-separator on on} 
d89 23
a111 23
    {-childsitepos n n} 
    {-childsitepos s s} 
    {-childsitepos e e} 
    {-childsitepos w w} 
    {-childsitepos center center} 
    {-cursor gumby gumby} 
    {-exportselection 0 0} 
    {-insertbackground Blue Blue} 
    {-insertbackground Black Black} 
    {-insertborderwidth 1 1} 
    {-insertofftime 200 200} 
    {-insertontime  500 500} 
    {-insertwidth 3 3} 
    {-itemslabel "Items Label" "Items Label"} 
    {-itemson no no} 
    {-labelfont 6x13 6x13} 
    {-itemson yes yes} 
    {-selectbackground #c3c3c3 #c3c3c3} 
    {-selectborderwidth 2 2} 
    {-selectforeground Black Black} 
    {-selectionlabel "Selection Label" "Selection Label"} 
    {-selectionon no no} 
    {-selectionon yes yes} 
d120 1
a120 1
	update 
d154 1
a154 1
	update 
d176 1
a176 1
    update 
d183 1
a183 1
    update 
d190 1
a190 1
    update 
d198 1
a198 1
    update 
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d15 1
a15 1
# @@(#) $Id: selectiondialog.test,v 1.1 2003/03/13 13:20:43 jra Exp $
@

