head	14.2;
access;
symbols
	rel-7-10-4:14.1
	STABLE:14.1.0.10
	stable-branch:14.1
	rel-7-10-2:14.1
	rel-7-10-0:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.09.14.15.21.37;	author erikgreenwald;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.20;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.49.57;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@removed trailing whitespace
@
text
@# This file is a Tcl script to test out [incr Widgets] Tabset class.
# It is organized in the standard fashion for Tcl tests with the following
# notation for test case labels:
#
#   1.x - Construction/Destruction tests
#   2.x - Configuration option tests
#   3.x - Method tests
#
# Copyright (c) 1995 DSC Technologies Corporation
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @@(#) $Id: tabset.test,v 14.1 2004/11/16 19:42:20 morrison Exp $

package require tcltest
namespace import -force ::tcltest::*

if [catch {package require Iwidgets 4.0}] {
  # Let's try modifying the auto_path.  Note that the IWIDGETS_LIBRARY
  # env var is initialized in the Makefile when doing a 'make test'.
  # If sourcing this file independently, this variable must be set manually.
  if ![info exists env(IWIDGETS_LIBRARY)] {
    error "Unable to locate Iwidgets package.  Set your IWIDGETS_LIBRARY\
      environment\nvariable to the directory that contains iwidgets.tcl"
  }
  lappend auto_path $env(IWIDGETS_LIBRARY)
  package require Iwidgets 4.0
}

if {[string compare test [info procs test]] == 1} {
    source defs
}

wm geometry . {}
raise .

set c 1
set o 1
set m 1

#
# Initial construction test
#
test Tabset-1.$c {Tabset construction} {
    iwidgets::Tabset .ts
    pack .ts
    update
    .ts add -label one
    update
    .ts add -label two
    update
    .ts add -label three
    update
} {}

incr c

#
# Option tests which are successful.
#
test Tabset-2.$o {configuration option} {
    llength [.ts configure]
} {24}

incr o

foreach test {
	{-disabledforeground #a3a3a3 #a3a3a3 }
	{-backdrop white white }
	{-start 4 4 }
	{-command   }
	{-font fixed fixed }
	{-selectbackground #ececec #ececec }
	{-gap overlap overlap }
	{-background #CDCDB7B7B5B5 #CDCDB7B7B5B5 }
	{-state normal normal }
	{-equaltabs true true }
	{-bevelamount 0 0 }
	{-selectforeground black black }
	{-foreground #000000000000 #000000000000 }
	{-raiseselect false false }
	{-padx 4 4 }
	{-pady 4 4 }
	{-cursor   }
	{-margin 5 5 }
	{-angle 20 20 }
	{-width 0 0 }
	{-tabborders true true }
	{-height 0 0 }
	{-tabpos s s }
	} {
	set option [lindex $test 0]
	test Tabset-2.$o "configuration options, $option" {
	    .ts configure $option [lindex $test 1]
		lindex [.ts configure $option] 4
	} [lindex $test 2]
	update
	incr o
}

#
# Tabconfigure Option tests which are successful.
#
test Tabset-2.$o {tab configuration option} {
    llength [.ts tabconfigure 0]
} {22}

# do tabconfigure tests also...
foreach test {
	{0 -bevelamount 0 0}
	{0 -state normal normal}
	{0 -anchor c c}
	{0 -image {} {}}
	{0 -bitmap {} {}}
	{0 -label Hello Hello}
	{0 -label "Hello World" "Hello World"}
	{0 -padx 4 4}
	{0 -pady 4 4}
	{0 -selectbackground gray70 gray70}
	{0 -selectforeground black black}
	{0 -disabledforeground gray gray}
	{0 -background white white}
	{0 -foreground black black}
	{0 -orient vertical vertical}
	{0 -invert false false}
	{0 -angle 20 20}
	{0 -font "-adobe-helvetica-bold-r-normal--34-240-100-100-p-182-iso8859-1" "-adobe-helvetica-bold-r-normal--34-240-100-100-p-182-iso8859-1"}
	{0 -tabborders true true}
	} {
		set index  [lindex $test 0]
		set option [lindex $test 1]
		test Tabset-2.$o "tab configuration options, $option" {
			.ts tabconfigure $index $option [lindex $test 2]
			.ts tabcget $index $option
		} [lindex $test 3]
	update
	incr o
}

#
# Option tests which fail and produce errors.
#
#foreach test {
#	{ -OPTION BADVALUE {ERROR_MESSAGE} }
#	} {
#	set option [lindex $test 0]
#        test Tabset-2.$o "configuration options, $option" {
#	    list [catch {.bb configure $option [lindex $test 1]} msg] $msg
#	} [list 1 [lindex $test 2]]
#	incr o
#}

#
# Method tests which are successful.
#
foreach test {
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add -label Never}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
	{{.ts add -label "Hello World" -disabledforeground gray}
		{::.ts-tab[0-9]+}}
    {{.ts index end}
		{[0-9]+}}
    {{.ts index Never}
		{[0-9]+}}
    {{.ts index 0}
		{0}}
    {{.ts select 0}
		{0}}
    {{.ts select select}
		{0}}
    {{.ts select end}
		{[0-9]+}}
    {{.ts select "Hello World"}
		{[0-9]+}}
    {{.ts insert 0}
		{::.ts-tab[0-9]+}}
    {{.ts insert select -label "An Insert"}
		{::.ts-tab[0-9]+}}
    {{.ts insert end -label "Next To Last"}
		{::.ts-tab[0-9]+}}
    {{.ts select 0}
		{0}}
    {{.ts next}
		{1}}
    {{.ts next}
		{2}}
    {{.ts prev}
		{1}}
    {{.ts prev}
		{0}}
    {{.ts delete Never}
		{}}
    {{.ts delete 1 2}
		{}}
    {{.ts delete 0 "Hello World"}
		{}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts delete 0 end}
		{}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts add}
		{::.ts-tab[0-9]+}}
    {{.ts select 2}
		{[-]*[0-9]+}}
    {{.ts delete select end}
		{}}
    {{.ts delete 0 end}
		{}}
    {{.ts add -label "First Page"}
		{::.ts-tab[0-9]+}}
    {{.ts add -label "Second Page"}
		{::.ts-tab[0-9]+}}
    {{.ts add -label "Third Page"}
		{::.ts-tab[0-9]+}}
    {{.ts add -label "Fourth Page"}
		{::.ts-tab[0-9]+}}
    {{.ts add -label "Fifth Page"}
		{::.ts-tab[0-9]+}}
    {{.ts add -label "Sixth Page"}
		{::.ts-tab[0-9]+}}
    {{.ts select "First Page"}
		{[-]*[0-9]+}}
    {{.ts delete select "Second Page"}
		{}}
    {{.ts delete "Third Page" 1}
		{}}
    {{.ts delete "Fifth Page" "Sixth Page"}
		{}}
	} {
	set method [lindex [lindex $test 0] 1]
	set method_invoke [lindex $test 0]

	set testContents "set msg {}\n"
	append testContents \
	    "set result \[catch \{[lindex $test 0]\} msg\]\n"
	append testContents \
	    "lappend result \[regexp -- \{[lindex $test 1]\} \$msg\] \n"
	append testContents "set result\n"
	test Tabset-3.$m "\[$method_invoke\]" $testContents \
		[list 0 1]
	update
	incr m
}

#
# Method tests which fail and produce errors
#
set m 1
foreach test {
		{1 {.ts delete 0 end} {can't delete tab}}
		{0 {.ts add} {}}
		{0 {.ts delete 0} {}}
		{1 {.ts delete 0} {can't delete tabs, no tabs}}
		{0 {.ts add} {}}
		{1 {.ts delete 1} {bad value for index1}}
		{1 {.ts delete select} {bad value for index1}}
		{0 {.ts delete 0} {}}
		{0 {.ts add} {}}
		{1 {.ts delete 0 1} {bad value for index2}}
		{1 {.ts delete 1 4} {bad value for index1}}
		{0 {.ts add} {}}
		{0 {.ts delete 0 1} {}}
		{0 {.ts add} {}}
		{1 {.ts delete 0 1 4 5 6} {wrong # args}}
		{1 {.ts delete} {wrong # args}}
		{0 {.ts delete 0} {}}
		{1 {.ts delete 0} {can't delete tabs}}
		{1 {.ts delete select} {can't delete tabs}}
		{1 {.ts insert 0} {no tab to insert before, tabset}}
		{0 {.ts add} {}}
		{0 {.ts add} {}}
		{1 {.ts insert 2} {bad value}}
		{1 {.ts insert -1} {bad option}}
		{0 {.ts delete 0 end} {}}
		{1 {.ts next} {can't goto next tab, no tabs in the tabset}}
		{1 {.ts prev} {can't goto previous tab, no tabs in the tabset}}
		{1 {.ts select 0} {can't activate a tab, no tabs in the tabset}}
		{0 {.ts add} {}}
		{1 {.ts select 1} {bad value}}
		{0 {.ts delete 0} {}}
	} {
		set method_status [lindex $test 0]
		set method_invoke [lindex $test 1]
		set method [lindex $method_invoke 1]

		set testContents "set msg {}\n"
		append testContents \
		    "set result \[catch \{$method_invoke\} msg\]\n"
		append testContents \
		    "lappend result \[regexp -- \{[lindex $test 2]\} \$msg\] \n"
		append testContents "set result\n"
		test Tabset-4.$m "\[$method_invoke\]" $testContents \
			[list $method_status 1]
	incr m
	}

# Conclusion of constrcution/destruction tests
#
test Tabset-1.$c {Tabset destruction} {
    destroy .ts
    update
} {}

incr c

test Tabset-1.$c {Tabset construction} {
    iwidgets::Tabset .ts -width 100 -height 100
    pack .ts
    update
    .ts add -label one
    update
    .ts add -label two
    update
    .ts add -label three
    update
} {}

incr c

test Tabset-1.$c {Tabset destruction} {
	destroy .ts
    update
} {}

::tcltest::cleanupTests
exit
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d14 1
a14 1
# @@(#) $Id: tabset.test,v 1.1 2004/05/20 14:49:57 morrison Exp $
d47 2
a48 2
    pack .ts 
    update 
d50 1
a50 1
    update 
d52 1
a52 1
    update 
d54 1
a54 1
    update 
d95 1
a95 1
	    .ts configure $option [lindex $test 1] 
d98 1
a98 1
	update 
d134 1
a134 1
			.ts tabconfigure $index $option [lindex $test 2] 
d137 1
a137 1
	update 
d158 1
a158 1
    {{.ts add} 
d160 1
a160 1
    {{.ts add} 
d162 1
a162 1
    {{.ts add} 
d164 1
a164 1
    {{.ts add -label Never} 
d166 1
a166 1
    {{.ts add} 
d168 1
a168 1
	{{.ts add -label "Hello World" -disabledforeground gray} 
d170 1
a170 1
    {{.ts index end} 
d172 1
a172 1
    {{.ts index Never} 
d174 1
a174 1
    {{.ts index 0} 
d176 1
a176 1
    {{.ts select 0} 
d178 1
a178 1
    {{.ts select select} 
d180 1
a180 1
    {{.ts select end} 
d182 1
a182 1
    {{.ts select "Hello World"} 
d184 1
a184 1
    {{.ts insert 0} 
d186 1
a186 1
    {{.ts insert select -label "An Insert"} 
d188 1
a188 1
    {{.ts insert end -label "Next To Last"} 
d190 1
a190 1
    {{.ts select 0} 
d192 1
a192 1
    {{.ts next} 
d194 1
a194 1
    {{.ts next} 
d196 1
a196 1
    {{.ts prev} 
d198 1
a198 1
    {{.ts prev} 
d200 1
a200 1
    {{.ts delete Never} 
d202 1
a202 1
    {{.ts delete 1 2} 
d204 1
a204 1
    {{.ts delete 0 "Hello World"} 
d206 1
a206 1
    {{.ts add} 
d208 1
a208 1
    {{.ts add} 
d210 1
a210 1
    {{.ts add} 
d212 1
a212 1
    {{.ts add} 
d214 1
a214 1
    {{.ts delete 0 end} 
d216 1
a216 1
    {{.ts add} 
d218 1
a218 1
    {{.ts add} 
d220 1
a220 1
    {{.ts add} 
d222 1
a222 1
    {{.ts add} 
d224 1
a224 1
    {{.ts select 2} 
d226 1
a226 1
    {{.ts delete select end} 
d228 1
a228 1
    {{.ts delete 0 end} 
d230 1
a230 1
    {{.ts add -label "First Page"} 
d232 1
a232 1
    {{.ts add -label "Second Page"} 
d234 1
a234 1
    {{.ts add -label "Third Page"} 
d236 1
a236 1
    {{.ts add -label "Fourth Page"} 
d238 1
a238 1
    {{.ts add -label "Fifth Page"} 
d240 1
a240 1
    {{.ts add -label "Sixth Page"} 
d242 1
a242 1
    {{.ts select "First Page"} 
d244 1
a244 1
    {{.ts delete select "Second Page"} 
d246 1
a246 1
    {{.ts delete "Third Page" 1} 
d248 1
a248 1
    {{.ts delete "Fifth Page" "Sixth Page"} 
d262 1
a262 1
	update 
d322 1
a322 1
    update 
d329 2
a330 2
    pack .ts 
    update 
d332 1
a332 1
    update 
d334 1
a334 1
    update 
d336 1
a336 1
    update 
d343 1
a343 1
    update 
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d14 1
a14 1
# @@(#) $Id: tabset.test,v 1.1 2003/03/13 13:20:44 jra Exp $
@

