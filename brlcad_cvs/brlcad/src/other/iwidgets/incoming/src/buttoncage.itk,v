head	14.2;
access;
symbols
	rel-7-10-4:14.1
	STABLE:14.1.0.10
	stable-branch:14.1
	rel-7-10-2:14.1
	rel-7-10-0:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.09.14.15.21.36;	author erikgreenwald;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.19;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.49.51;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@removed trailing whitespace
@
text
@#
# Buttoncage
# ----------------------------------------------------------------------
# Manages a framed area with Motif style buttons.
#
#
#  AUTHOR: Mark Alston          EMAIL: mark@@beernut.com
#
# ----------------------------------------------------------------------
#  Almost entirely Based on Button Box written by:
#          Mark L. Ulferts              EMAIL: mulferts@@austin.dsccc.com
#          Bret A. Schuhmacher          EMAIL: bas@@wn.com
#
#  @@(#) $Id: buttoncage.itk,v 14.1 2004/11/16 19:42:19 morrison Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1995 DSC Technologies Corporation
# ======================================================================
# Permission to use, copy, modify, distribute and license this software
# and its documentation for any purpose, and without fee or written
# agreement with DSC, is hereby granted, provided that the above copyright
# notice appears in all copies and that both the copyright notice and
# warranty disclaimer below appear in supporting documentation, and that
# the names of DSC Technologies Corporation or DSC Communications
# Corporation not be used in advertising or publicity pertaining to the
# software without specific, written prior permission.
#
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, AND NON-
# INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, AND THE
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE,
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTUOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
# ======================================================================

#
# Usual options.
#

itk::usual Buttoncage {
    keep -background -cursor -foreground
}

# ------------------------------------------------------------------
#                            BUTTONCAGE
# ------------------------------------------------------------------
itcl::class iwidgets::Buttoncage {
    inherit itk::Widget

    constructor {args} {}
    destructor {}

    itk_option define -pady padY Pad 5
    itk_option define -padx padX Pad 5
    itk_option define -width width Width 1
    itk_option define -height height Height 1
    itk_option define -foreground foreground Foreground black

    public method index {args}
    public method add {args}
    public method insert {args}
    public method delete {args}
    public method default {args}
    public method hide {args}
    public method show {args}
    public method invoke {args}
    public method buttonconfigure {args}
    public method buttoncget {index option}

    private method _positionButtons {}
    private method _setBoxSize {{when later}}
    private method _getMaxWidth {}
    private method _getMaxHeight {}
    private method _getNumButtons {}

    private variable _resizeFlag {}         ;# Flag for resize needed.
    private variable _buttonList {}         ;# List of all buttons in box.
    private variable _displayList {}        ;# List of displayed buttons.
    private variable _unique 0              ;# Counter for button widget ids.
}

namespace eval iwidgets::Buttoncage {
    #
    # Set up some class level bindings for map and configure events.
    #
    bind bcage-map <Map> [itcl::code %W _setBoxSize]
    bind bcage-config <Configure> [itcl::code %W _positionButtons]
}

#
# Provide a lowercased access method for the Buttoncage class.
#
proc ::iwidgets::buttoncage {pathName args} {
    uplevel ::iwidgets::Buttoncage $pathName $args
}

# ------------------------------------------------------------------
#                        CONSTRUCTOR
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::constructor {args} {
    #
    # Add Configure bindings for geometry management.
    #
    bindtags $itk_component(hull) \
	    [linsert [bindtags $itk_component(hull)] 0 bcage-map]
    bindtags $itk_component(hull) \
	    [linsert [bindtags $itk_component(hull)] 1 bcage-config]

    pack propagate $itk_component(hull) no

    #
    # Initialize the widget based on the command line options.
    #
    eval itk_initialize $args
}

# ------------------------------------------------------------------
#                           DESTRUCTOR
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::destructor {} {
    if {$_resizeFlag != ""} {after cancel $_resizeFlag}
}

# ------------------------------------------------------------------
#                             OPTIONS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# OPTION: -pady
#
# Pad the y space between the button box frame and the hull.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Buttoncage::pady {
    _setBoxSize
}

# ------------------------------------------------------------------
# OPTION: -padx
#
# Pad the x space between the button box frame and the hull.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Buttoncage::padx {
    _setBoxSize
}

# ------------------------------------------------------------------
# OPTION: -height
#
# Set buttonbox height in buttons
# ------------------------------------------------------------------
itcl::configbody iwidgets::Buttoncage::height {
    if { [regexp {^[0-9]*$} $itk_option(-height)] } {
	_setBoxSize
    } else {
	error "bad height option \"$itk_option(-height)\",\
		    should be an integer."
    }
}

# ------------------------------------------------------------------
# OPTION: -width
#
# Set buttonbox width in buttons
# ------------------------------------------------------------------
itcl::configbody iwidgets::Buttoncage::width {
    if { [regexp {^[0-9]*$} $itk_option(-width)] } {
	_setBoxSize
    } else {
	error "bad width option \"$itk_option(-width)\",\
		should be an integer."
    }
}

# ------------------------------------------------------------------
#                            METHODS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# METHOD: index index
#
# Searches the buttons in the box for the one with the requested tag,
# numerical index, keyword "end" or "default".  Returns the button's
# tag if found, otherwise error.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::index {index} {
    if {[llength $_buttonList] > 0} {
	if {[regexp {(^[0-9]+$)} $index]} {
	    if {$index < [llength $_buttonList]} {
		return $index
	    } else {
		error "Buttoncage index \"$index\" is out of range"
	    }

	} elseif {$index == "end"} {
	    return [expr {[llength $_buttonList] - 1}]

	} elseif {$index == "default"} {
	    foreach knownButton $_buttonList {
		if {[$itk_component($knownButton) cget -defaultring]} {
		    return [lsearch -exact $_buttonList $knownButton]
		}
	    }

	    error "Buttoncage \"$itk_component(hull)\" has no default"

	} else {
	    if {[set idx [lsearch $_buttonList $index]] != -1} {
		return $idx
	    }

	    error "bad Buttoncage index \"$index\": must be number, end,\
		    default, or pattern"
	}

    } else {
	error "Buttoncage \"$itk_component(hull)\" has no buttons"
    }
}

# ------------------------------------------------------------------
# METHOD: add tag ?option value option value ...?
#
# Add the specified button to the button box.  All PushButton options
# are allowed.  New buttons are added to the list of buttons and the
# list of displayed buttons.  The PushButton path name is returned.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::add {tag args} {
    itk_component add $tag {
	iwidgets::Pushbutton $itk_component(hull).[incr _unique]
    } {
	usual
	rename -highlightbackground -background background Background

    }

    if {$args != ""} {
	uplevel $itk_component($tag) configure $args
    }

    if { [llength $_buttonList] < [_getNumButtons] } {
	lappend _buttonList $tag
	lappend _displayList $tag

	_setBoxSize
    } else {
	error "can't insert more buttons. \
		Buttoncage \"$itk_component(hull)\" is full."
    }
}

# ------------------------------------------------------------------
# METHOD: insert index tag ?option value option value ...?
#
# Insert the specified button in the button box just before the one
# given by index.  All PushButton options are allowed.  New buttons
# are added to the list of buttons and the list of displayed buttons.
# The PushButton path name is returned.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::insert {index tag args} {
    itk_component add $tag {
	iwidgets::Pushbutton $itk_component(hull).[incr _unique]
    } {
	usual
	rename -highlightbackground -background background Background
    }

    if {$args != ""} {
	uplevel $itk_component($tag) configure $args
    }

    if { [llength $_buttonList] < [_getNumButtons] } {
	set index [index $index]
	set _buttonList [linsert $_buttonList $index $tag]
	set _displayList [linsert $_displayList $index $tag]

	_setBoxSize
    } else {
	error "can't insert more buttons. \
		Buttoncage \"$itk_component(hull)\" is full."
    }

}

# ------------------------------------------------------------------
# METHOD: delete index
#
# Delete the specified button from the button box.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::delete {index} {
    set index [index $index]
    set tag [lindex $_buttonList $index]

    destroy $itk_component($tag)

    set _buttonList [lreplace $_buttonList $index $index]

    if {[set dind [lsearch $_displayList $tag]] != -1} {
	set _displayList [lreplace $_displayList $dind $dind]
    }

    _setBoxSize
    update idletasks
}

# ------------------------------------------------------------------
# METHOD: default index
#
# Sets the default to the push button given by index.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::default {index} {
    set index [index $index]

    set defbtn [lindex $_buttonList $index]

    foreach knownButton $_displayList {
	if {$knownButton == $defbtn} {
	    $itk_component($knownButton) configure -defaultring yes
	} else {
	    $itk_component($knownButton) configure -defaultring no
	}
    }
}

# ------------------------------------------------------------------
# METHOD: hide index
#
# Hide the push button given by index.  This doesn't remove the button
# permanently from the display list, just inhibits its display.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::hide {index} {
    set index [index $index]
    set tag [lindex $_buttonList $index]

    if {[set dind [lsearch $_displayList $tag]] != -1} {
	place forget $itk_component($tag)
	set _displayList [lreplace $_displayList $dind $dind]

	_setBoxSize
    }
}

# ------------------------------------------------------------------
# METHOD: show index
#
# Displays a previously hidden push button given by index.  Check if
# the button is already in the display list.  If not then add it back
# at it's original location and redisplay.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::show {index} {
    set index [index $index]
    set tag [lindex $_buttonList $index]

    if {[lsearch $_displayList $tag] == -1} {
	set _displayList [linsert $_displayList $index $tag]

	_setBoxSize
    }
}

# ------------------------------------------------------------------
# METHOD: invoke ?index?
#
# Invoke the command associated with a push button.  If no arguments
# are given then the default button is invoked, otherwise the argument
# is expected to be a button index.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::invoke {args} {
    if {[llength $args] == 0} {
	$itk_component([lindex $_buttonList [index default]]) invoke

    } else {
	$itk_component([lindex $_buttonList [index [lindex $args 0]]]) \
		invoke
    }
}

# ------------------------------------------------------------------
# METHOD: buttonconfigure index ?option? ?value option value ...?
#
# Configure a push button given by index.  This method allows
# configuration of pushbuttons from the Buttoncage level.  The options
# may have any of the values accepted by the add method.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::buttonconfigure {index args} {
    set tag [lindex $_buttonList [index $index]]

    set retstr [uplevel $itk_component($tag) configure $args]

    _setBoxSize

    return $retstr
}

# ------------------------------------------------------------------
# METHOD: buttoncget index option
#
# Return value of option for push button given by index.  Option may
# have any of the values accepted by the add method.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::buttoncget {index option} {
    set tag [lindex $_buttonList [index $index]]

    set retstr [uplevel $itk_component($tag) cget [list $option]]

    return $retstr
}

# -----------------------------------------------------------------
# PRIVATE METHOD: _getNumButtons
#
# Returns the max number of buttons.
# -----------------------------------------------------------------
itcl::body iwidgets::Buttoncage::_getNumButtons {} {
    set max [expr $itk_option(-width) * $itk_option(-height)]
    return $max
}

# -----------------------------------------------------------------
# PRIVATE METHOD: _getMaxWidth
#
# Returns the required width of the largest button.
# -----------------------------------------------------------------
itcl::body iwidgets::Buttoncage::_getMaxWidth {} {
    set max 0

    foreach tag $_displayList {
	set w [winfo reqwidth $itk_component($tag)]

	if {$w > $max} {
	    set max $w
	}
    }

    return $max
}

# -----------------------------------------------------------------
# PRIVATE METHOD: _getMaxHeight
#
# Returns the required height of the largest button.
# -----------------------------------------------------------------
itcl::body iwidgets::Buttoncage::_getMaxHeight {} {
    set max 0

    foreach tag $_displayList {
	set h [winfo reqheight $itk_component($tag)]

	if {$h > $max} {
	    set max $h
	}
    }

    return $max
}

# ------------------------------------------------------------------
# METHOD: _setBoxSize ?when?
#
# Sets the proper size of the frame surrounding all the buttons.
# If "when" is "now", the change is applied immediately.  If it is
# "later" or it is not specified, then the change is applied later,
# when the application is idle.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::_setBoxSize {{when later}} {
    if {[winfo ismapped $itk_component(hull)]} {
	if {$when == "later"} {
	    if {$_resizeFlag == ""} {
		set _resizeFlag [after idle [itcl::code $this _setBoxSize now]]
	    }
	    return
	} elseif {$when != "now"} {
	    error "bad option \"$when\": should be now or later"
	}

	set _resizeFlag ""

	set minw [expr { $itk_option(-width) * [_getMaxWidth] \
		+ ($itk_option(-width) ) * $itk_option(-padx)}]
	set minh [expr {$itk_option(-height) * [_getMaxHeight] \
		    + ($itk_option(-height)) * $itk_option(-pady)}]


	#
	# Remove the configure event bindings on the hull while we adjust the
	# width/height and re-position the buttons.  Once we're through, we'll
	# update and reinstall them.  This prevents double calls to position
	# the buttons.
	#
	set tags [bindtags $itk_component(hull)]
	if {[set i [lsearch $tags bcage-config]] != -1} {
	    set tags [lreplace $tags $i $i]
	    bindtags $itk_component(hull) $tags
	}

	component hull configure -width $minw -height $minh

	update idletasks

	_positionButtons

	bindtags $itk_component(hull) [linsert $tags 0 bcage-config]
    }
}

# ------------------------------------------------------------------
# METHOD: _positionButtons
#
# This method is responsible setting the width/height of all the
# displayed buttons to the same value and for placing all the buttons
# in equidistant locations.
# ------------------------------------------------------------------
itcl::body iwidgets::Buttoncage::_positionButtons {} {
    set bf $itk_component(hull)
    set numBtns [llength $_displayList]

    #
    # First, determine the common width and height for all the
    # displayed buttons.
    #
    if {$numBtns > 0} {
	set bfWidth [winfo width $itk_component(hull)]
	set bfHeight [winfo height $itk_component(hull)]

	if {$bfWidth >= [winfo reqwidth $itk_component(hull)]} {
	    set _btnWidth [_getMaxWidth]

	} else {
	    set _btnWidth [expr {$bfWidth / $itk_option(-width)}]
	}


	if {$bfHeight >= [winfo reqheight $itk_component(hull)]} {
	    set _btnHeight [_getMaxHeight]

	} else {
	    set _btnHeight [expr {$bfHeight / $itk_option(-height)}]
	}
    }

    #
    # Place the buttons at the proper locations.
    #
    if {$numBtns > 0} {
	set leftover_width [expr {[winfo width $bf] \
		- 2 * $itk_option(-padx) - $_btnWidth * $itk_option(-width)}]
	set offset_width [expr {$leftover_width / ($itk_option(-width) + 1)}]
	if {$offset_width < 0} {set offset_width 0}

	set xDist [expr {$itk_option(-padx) + $offset_width}]
	set startxDist $xDist

	set incrAmountX [expr {$_btnWidth + $offset_width}]


	set leftover_height [expr {[winfo height $bf] \
		- 2 * $itk_option(-pady) - $_btnHeight * $itk_option(-height)}]
	set offset_height [expr {$leftover_height / ($itk_option(-height) + 1)}]
	if {$offset_height < 0} {set offset_height 0}



	set yDist [expr {$itk_option(-pady) + $offset_height} + .5 * $_btnHeight]
	set incrAmountY [expr {$_btnHeight + $offset_height}]

	set i 1
	foreach button $_displayList {
	    place $itk_component($button) -anchor w \
			-x $xDist -rely 0 -y $yDist -relx 0 \
			-width $_btnWidth -height $_btnHeight
	    if { $i == $itk_option(-width) } {
		set yDist [expr {$yDist + $incrAmountY}]
		set xDist $startxDist
		set i 1
	    } else {
		set xDist [expr {$xDist + $incrAmountX}]
		incr i
	    }
	}
    }
}


@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d4 1
a4 1
# Manages a framed area with Motif style buttons.  
d14 1
a14 1
#  @@(#) $Id: buttoncage.itk,v 1.1 2004/05/20 14:49:51 morrison Exp $
d18 7
a24 7
# Permission to use, copy, modify, distribute and license this software 
# and its documentation for any purpose, and without fee or written 
# agreement with DSC, is hereby granted, provided that the above copyright 
# notice appears in all copies and that both the copyright notice and 
# warranty disclaimer below appear in supporting documentation, and that 
# the names of DSC Technologies Corporation or DSC Communications 
# Corporation not be used in advertising or publicity pertaining to the 
d26 2
a27 2
# 
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 
d30 4
a33 4
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, 
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL 
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR 
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
d35 1
a35 1
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS 
d61 1
a61 1
    
d95 1
a95 1
# 
d99 1
a99 1
    
d104 2
a105 2
    # 
    # Add Configure bindings for geometry management.  
d111 1
a111 1
    
d113 1
a113 1
    
d185 1
a185 1
# numerical index, keyword "end" or "default".  Returns the button's 
d187 1
a187 1
# ------------------------------------------------------------------    
d196 1
a196 1
	    
d199 1
a199 1
	    
d206 1
a206 1
	    
d208 1
a208 1
	    
d213 1
a213 1
	    
d217 1
a217 1
	
d227 1
a227 1
# are allowed.  New buttons are added to the list of buttons and the 
d236 1
a236 1
	
d238 1
a238 1
    
d242 1
a242 1
    
d246 2
a247 2
    
	_setBoxSize 
d257 2
a258 2
# Insert the specified button in the button box just before the one 
# given by index.  All PushButton options are allowed.  New buttons 
d269 1
a269 1
    
d273 1
a273 1
    
d278 1
a278 1
	
d295 1
a295 1
    
d297 1
a297 1
    
d299 1
a299 1
    
d303 1
a303 1
    
d315 1
a315 1
    
d317 1
a317 1
    
d330 1
a330 1
# Hide the push button given by index.  This doesn't remove the button 
d336 1
a336 1
    
d339 2
a340 2
	set _displayList [lreplace $_displayList $dind $dind] 
	
d348 2
a349 2
# Displays a previously hidden push button given by index.  Check if 
# the button is already in the display list.  If not then add it back 
d355 1
a355 1
    
d358 1
a358 1
	
d373 1
a373 1
	
d383 1
a383 1
# Configure a push button given by index.  This method allows 
d389 1
a389 1
    
d391 1
a391 1
    
d393 1
a393 1
    
d405 1
a405 1
    
d407 1
a407 1
    
d428 1
a428 1
    
d431 1
a431 1
	
d436 1
a436 1
    
d447 1
a447 1
    
d450 1
a450 1
	
d455 1
a455 1
    
d463 2
a464 2
# If "when" is "now", the change is applied immediately.  If it is 
# "later" or it is not specified, then the change is applied later, 
d485 1
a485 1
	
d497 1
a497 1
	
d499 1
a499 1
	
d501 1
a501 1
	    
d503 1
a503 1
	
d507 1
a507 1
    
d510 2
a511 2
# 
# This method is responsible setting the width/height of all the 
d518 3
a520 3
    
    # 
    # First, determine the common width and height for all the 
d526 1
a526 1
	
d528 2
a529 2
	    set _btnWidth [_getMaxWidth] 
	    
d533 2
a534 2
    	    
	
d537 1
a537 1
	    
d540 1
a540 1
	}	    
d542 1
a542 1
    
d551 1
a551 1
	    
d556 1
a556 1
	    
d562 1
a562 1
	    
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d14 1
a14 1
#  @@(#) $Id: buttoncage.itk,v 1.1 2003/03/13 13:42:58 jra Exp $
@

