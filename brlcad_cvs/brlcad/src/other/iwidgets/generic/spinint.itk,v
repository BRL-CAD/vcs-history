head	14.2;
access;
symbols
	rel-7-10-4:14.1
	STABLE:14.1.0.10
	stable-branch:14.1
	rel-7-10-2:14.1
	rel-7-10-0:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.09.14.15.21.36;	author erikgreenwald;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.19;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.49.47;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@removed trailing whitespace
@
text
@# Spinint
# ----------------------------------------------------------------------
# Implements an integer spinner widget.  It inherits basic spinner
# functionality from Spinner and adds specific features to create
# an integer-only spinner.
# Arrows may be placed horizontally or vertically.
# User may specify an integer range and step value.
# Spinner may be configured to wrap when min or max value is reached.
#
# NOTE:
# Spinint integer values should not exceed the size of a long integer.
# For a 32 bit long the integer range is -2147483648 to 2147483647.
#
# ----------------------------------------------------------------------
#   AUTHOR:  Sue Yockey               Phone: (214) 519-2517
#                                     E-mail: syockey@@spd.dsccc.com
#                                             yockey@@acm.org
#
#   @@(#) $Id: spinint.itk,v 14.1 2004/11/16 19:42:19 morrison Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1995 DSC Technologies Corporation
# ======================================================================
# Permission to use, copy, modify, distribute and license this software
# and its documentation for any purpose, and without fee or written
# agreement with DSC, is hereby granted, provided that the above copyright
# notice appears in all copies and that both the copyright notice and
# warranty disclaimer below appear in supporting documentation, and that
# the names of DSC Technologies Corporation or DSC Communications
# Corporation not be used in advertising or publicity pertaining to the
# software without specific, written prior permission.
#
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, AND NON-
# INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, AND THE
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE,
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTUOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
# ======================================================================

#
# Usual options.
#
itk::usual Spinint {
    keep -background -borderwidth -cursor -foreground -highlightcolor \
	 -highlightthickness -insertbackground  -insertborderwidth \
	 -insertofftime -insertontime -insertwidth -labelfont \
	 -selectbackground -selectborderwidth -selectforeground \
	 -textbackground -textfont
}

# ------------------------------------------------------------------
#                            SPININT
# ------------------------------------------------------------------
itcl::class iwidgets::Spinint {
    inherit iwidgets::Spinner

    constructor {args} {
	Spinner::constructor -validate numeric
    } {}

    itk_option define -range range Range ""
    itk_option define -step step Step 1
    itk_option define -wrap wrap Wrap true

    public method up {}
    public method down {}
}

#
# Provide a lowercased access method for the Spinint class.
#
proc ::iwidgets::spinint {pathName args} {
    uplevel ::iwidgets::Spinint $pathName $args
}

# ------------------------------------------------------------------
#                        CONSTRUCTOR
# ------------------------------------------------------------------
itcl::body iwidgets::Spinint::constructor {args} {
    eval itk_initialize $args

    $itk_component(entry) delete 0 end

    if {[lindex $itk_option(-range) 0] == ""} {
	$itk_component(entry) insert 0 "0"
    } else {
	$itk_component(entry) insert 0 [lindex $itk_option(-range) 0]
    }
}

# ------------------------------------------------------------------
#                             OPTIONS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# OPTION: -range
#
# Set min and max values for spinner.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinint::range {
    if {$itk_option(-range) != ""} {
	if {[llength $itk_option(-range)] != 2} {
	    error "wrong # args: should be\
		    \"$itk_component(hull) configure -range {begin end}\""
    	}

    	set min [lindex $itk_option(-range) 0]
    	set max [lindex $itk_option(-range) 1]

    	if {![regexp {^-?[0-9]+$} $min]} {
    	    error "bad range option \"$min\": begin value must be\
		    an integer"
    	}
    	if {![regexp {^-?[0-9]+$} $max]} {
    	    error "bad range option \"$max\": end value must be\
		    an integer"
    	}
    	if {$min > $max} {
    	    error "bad option starting range \"$min\": must be less\
		    than ending: \"$max\""
    	}
    }
}

# ------------------------------------------------------------------
# OPTION: -step
#
# Increment spinner by step value.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinint::step {
}

# ------------------------------------------------------------------
# OPTION: -wrap
#
# Specify whether spinner should wrap value if at min or max.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinint::wrap {
}

# ------------------------------------------------------------------
#                            METHODS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# METHOD: up
#
# Up arrow button press event.  Increment value in entry.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinint::up {} {
    set min_range [lindex $itk_option(-range) 0]
    set max_range [lindex $itk_option(-range) 1]

    set val [$itk_component(entry) get]
    if {[lindex $itk_option(-range) 0] != ""} {

	#
	# Check boundaries.
	#
	if {$val >= $min_range && $val < $max_range} {
	    incr val $itk_option(-step)
	    $itk_component(entry) delete 0 end
	    $itk_component(entry) insert 0 $val
	} else {
	    if {$itk_option(-wrap)} {
		if {$val >= $max_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $min_range
		} elseif {$val < $min_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $min_range
		} else {
		    uplevel #0 $itk_option(-invalid)
		}
	    } else {
		uplevel #0 $itk_option(-invalid)
	    }
	}
    } else {

	#
	# No boundaries.
	#
	incr val $itk_option(-step)
	$itk_component(entry) delete 0 end
	$itk_component(entry) insert 0 $val
    }
}

# ------------------------------------------------------------------
# METHOD: down
#
# Down arrow button press event.  Decrement value in entry.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinint::down {} {
    set min_range [lindex $itk_option(-range) 0]
    set max_range [lindex $itk_option(-range) 1]

    set val [$itk_component(entry) get]
    if {[lindex $itk_option(-range) 0] != ""} {

	#
	# Check boundaries.
	#
	if {$val > $min_range && $val <= $max_range} {
	    incr val -$itk_option(-step)
	    $itk_component(entry) delete 0 end
	    $itk_component(entry) insert 0 $val
	} else {
	    if {$itk_option(-wrap)} {
		if {$val <= $min_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $max_range
		} elseif {$val > $max_range} {
		    $itk_component(entry) delete 0 end
		    $itk_component(entry) insert 0 $max_range
		} else {
		    uplevel #0 $itk_option(-invalid)
		}
	    } else {
		uplevel #0 $itk_option(-invalid)
	    }
	}
    } else {

	#
	# No boundaries.
	#
	incr val -$itk_option(-step)
	$itk_component(entry) delete 0 end
	$itk_component(entry) insert 0 $val
    }
}
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 1
a1 1
# Spinint 
d4 2
a5 2
# functionality from Spinner and adds specific features to create 
# an integer-only spinner. 
d19 1
a19 1
#   @@(#) $Id: spinint.itk,v 1.1 2004/05/20 14:49:47 morrison Exp $
d23 7
a29 7
# Permission to use, copy, modify, distribute and license this software 
# and its documentation for any purpose, and without fee or written 
# agreement with DSC, is hereby granted, provided that the above copyright 
# notice appears in all copies and that both the copyright notice and 
# warranty disclaimer below appear in supporting documentation, and that 
# the names of DSC Technologies Corporation or DSC Communications 
# Corporation not be used in advertising or publicity pertaining to the 
d31 2
a32 2
# 
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 
d35 4
a38 4
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, 
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL 
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR 
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
d40 1
a40 1
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS 
d59 1
a59 1
    inherit iwidgets::Spinner 
d62 1
a62 1
	Spinner::constructor -validate numeric 
d65 3
a67 3
    itk_option define -range range Range "" 
    itk_option define -step step Step 1 
    itk_option define -wrap wrap Wrap true 
d75 1
a75 1
# 
d85 1
a85 1
    
d87 1
a87 1
    
d90 2
a91 2
    } else { 
	$itk_component(entry) insert 0 [lindex $itk_option(-range) 0] 
d126 1
a126 1
    } 
d157 1
a157 1
    
d160 1
a160 1
	
d172 1
a172 1
		    $itk_component(entry) insert 0 $min_range 
d175 1
a175 1
		    $itk_component(entry) insert 0 $min_range 
d184 1
a184 1
	
d195 1
a195 1
# METHOD: down 
d202 1
a202 1
    
d205 1
a205 1
	
d229 1
a229 1
	
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d19 1
a19 1
#   @@(#) $Id: spinint.itk,v 1.1 2003/03/13 13:20:37 jra Exp $
@

