head	14.3;
access;
symbols
	rel-7-10-4:14.2
	STABLE:14.2.0.4
	stable-branch:14.1
	rel-7-10-2:14.2
	rel-7-10-0:14.2
	rel-7-8-4:14.2
	rel-7-8-2:14.2
	rel-7-8-0:14.2
	trimnurbs-branch:14.2.0.2
	help:14.2
	temp_tag:14.2
	bobWinPort-20051223-freeze:14.1.2.1
	postmerge-20051223-bobWinPort:14.2
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.3
date	2007.09.14.15.21.36;	author erikgreenwald;	state Exp;
branches;
next	14.2;

14.2
date	2005.12.23.21.26.42;	author bob1961;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.19;	author morrison;	state Exp;
branches
	14.1.2.1;
next	1.1;

1.1
date	2004.05.20.14.49.48;	author morrison;	state Exp;
branches;
next	;

14.1.2.1
date	2005.09.20.14.51.05;	author bob1961;	state Exp;
branches;
next	;


desc
@@


14.3
log
@removed trailing whitespace
@
text
@#
# Toolbar
# ----------------------------------------------------------------------
#
# The Toolbar command creates a new window (given by the pathName
# argument) and makes it into a Tool Bar widget. Additional options,
# described above may be specified on the command line or in the
# option database to configure aspects of the Toolbar such as its
# colors, font, and orientation. The Toolbar command returns its
# pathName argument. At the time this command is invoked, there
# must not exist a window named pathName, but pathName's parent
# must exist.
#
# A Toolbar is a widget that displays a collection of widgets arranged
# either in a row or a column (depending on the value of the -orient
# option). This collection of widgets is usually for user convenience
# to give access to a set of commands or settings. Any widget may be
# placed on a Toolbar. However, command or value-oriented widgets (such
# as button, radiobutton, etc.) are usually the most useful kind of
# widgets to appear on a Toolbar.
#
# WISH LIST:
#   This section lists possible future enhancements.
#
#	Toggle between text and image/bitmap so that the toolbar could
#     display either all text or all image/bitmaps.
#   Implementation of the -toolbarfile option that allows toolbar
#     add commands to be read in from a file.
# ----------------------------------------------------------------------
#  AUTHOR: Bill W. Scott                 EMAIL: bscott@@spd.dsccc.com
#
#  @@(#) $Id: toolbar.itk,v 14.2 2005/12/23 21:26:42 bob1961 Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1995 DSC Technologies Corporation
# ======================================================================
# Permission to use, copy, modify, distribute and license this software
# and its documentation for any purpose, and without fee or written
# agreement with DSC, is hereby granted, provided that the above copyright
# notice appears in all copies and that both the copyright notice and
# warranty disclaimer below appear in supporting documentation, and that
# the names of DSC Technologies Corporation or DSC Communications
# Corporation not be used in advertising or publicity pertaining to the
# software without specific, written prior permission.
#
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, AND NON-
# INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, AND THE
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE,
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTUOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
# ======================================================================

#
# Default resources.
#
option add *Toolbar*padX 2 widgetDefault
option add *Toolbar*padY 0 widgetDefault
#option add *Toolbar*padX 5 widgetDefault
#option add *Toolbar*padY 5 widgetDefault
option add *Toolbar*orient horizontal widgetDefault
option add *Toolbar*highlightThickness 0 widgetDefault
option add *Toolbar*indicatorOn false widgetDefault
option add *Toolbar*selectColor [. cget -bg] widgetDefault

#
# Usual options.
#
itk::usual Toolbar {
    keep -activebackground -activeforeground -background -balloonbackground \
	 -balloondelay1 -balloondelay2 -balloonfont -balloonforeground \
	 -borderwidth -cursor -disabledforeground -font -foreground \
	 -highlightbackground -highlightcolor -highlightthickness \
	 -insertbackground -insertforeground -selectbackground \
	 -selectborderwidth -selectcolor -selectforeground -troughcolor
}

# ------------------------------------------------------------------
#                            TOOLBAR
# ------------------------------------------------------------------
itcl::class iwidgets::Toolbar {
    inherit itk::Widget

    constructor {args} {}
    destructor {}

    itk_option define -balloonbackground \
	    balloonBackground BalloonBackground yellow
    itk_option define -balloonforeground \
	    balloonForeground BalloonForeground black
    itk_option define -balloonfont balloonFont BalloonFont 6x10
    itk_option define -balloondelay1 \
	    balloonDelay1 BalloonDelay1 1000
    itk_option define -balloondelay2 \
	    balloonDelay2 BalloonDelay2 200
    itk_option define -helpvariable helpVariable HelpVariable {}
    itk_option define -orient orient Orient "horizontal"

    #
    # The following options implement propogated configurations to
    # any widget that might be added to us. The problem is this is
    # not deterministic as someone might add a new kind of widget with
    # and option like -armbackground, so we would not be aware of
    # this kind of option. Anyway we support as many of the obvious
    # ones that we can. They can always configure them with itemconfigures.
    #
    itk_option define -activebackground activeBackground Foreground #c3c3c3
    itk_option define -activeforeground activeForeground Background Black
    itk_option define -background background Background #d9d9d9
    itk_option define -borderwidth borderWidth BorderWidth 2
    itk_option define -cursor cursor Cursor {}
    itk_option define -disabledforeground \
	    disabledForeground DisabledForeground #a3a3a3
    itk_option define -font \
	    font Font "-Adobe-Helvetica-Bold-R-Normal--*-120-*-*-*-*-*-*"
    itk_option define -foreground foreground Foreground #000000000000
    itk_option define -highlightbackground \
	    highlightBackground HighlightBackground #d9d9d9
    itk_option define -highlightcolor highlightColor HighlightColor Black
    itk_option define -highlightthickness \
	    highlightThickness HighlightThickness 0
    itk_option define -insertforeground insertForeground Background #c3c3c3
    itk_option define -insertbackground insertBackground Foreground Black
    itk_option define -selectbackground selectBackground Foreground #c3c3c3
    itk_option define -selectborderwidth selectBorderWidth BorderWidth {}
    itk_option define -selectcolor selectColor Background #b03060
    itk_option define -selectforeground selectForeground Background Black
    itk_option define -state state State normal
    itk_option define -troughcolor troughColor Background #c3c3c3

    public method add {widgetCommand name args}
    public method delete {args}
    public method index {index}
    public method insert {beforeIndex widgetCommand name args}
    public method itemcget {index args}
    public method itemconfigure {index args}

    public method _resetBalloonTimer {}
    public method _startBalloonDelay {window}
    public method _stopBalloonDelay {window balloonClick}

    private method _deleteWidgets {index1 index2}
    private method _addWidget {widgetCommand name args}
    private method _index {toolList index}
    private method _getAttachedOption {optionListName widget args retValue}
    private method _setAttachedOption {optionListName widget option args}
    private method _packToolbar {}

    public method hideHelp {}
    public method showHelp {window}
    public method showBalloon {window}
    public method hideBalloon {}

    private variable _balloonTimer 0
    private variable _balloonAfterID 0
    private variable _balloonClick false

    private variable _interior {}
    private variable _initialMapping 1   ;# Is this the first mapping?
    private variable _toolList {}        ;# List of all widgets on toolbar
    private variable _opts               ;# New options for child widgets
    private variable _currHelpWidget {}  ;# Widget currently displaying help for
    private variable _hintWindow {}      ;# Balloon help bubble.

    # list of options we want to propogate to widgets added to toolbar.
    private common _optionList {
	-activebackground \
		-activeforeground \
		-background \
		-borderwidth \
		-cursor \
		-disabledforeground \
		-font \
		-foreground \
		-highlightbackground \
		-highlightcolor \
		-highlightthickness \
		-insertbackground \
		-insertforeground \
		-selectbackground \
		-selectborderwidth \
		-selectcolor \
		-selectforeground \
		-state \
		-troughcolor \
	    }
}

# ------------------------------------------------------------------
#                            CONSTRUCTOR
# ------------------------------------------------------------------
itcl::body iwidgets::Toolbar::constructor {args} {
    component hull configure -borderwidth 0
    set _interior $itk_interior

    #
    # Handle configs
    #
    eval itk_initialize $args

    # build balloon help window
    set _hintWindow [toplevel $itk_component(hull).balloonHintWindow \
			 -padx 0 \
			 -pady 0 \
			 -bg black]
    wm withdraw $_hintWindow
    label $_hintWindow.label \
	-foreground $itk_option(-balloonforeground) \
	-background $itk_option(-balloonbackground) \
	-font $itk_option(-balloonfont) \
	-relief flat \
	-borderwidth 0
    pack $_hintWindow.label -expand yes -fill both -padx 1 -pady 1

    # ... Attach help handler to this widget
    bind toolbar-help-$itk_component(hull) \
	    <Enter> "+[itcl::code $this showHelp %W]"
    bind toolbar-help-$itk_component(hull) \
	    <Leave> "+[itcl::code $this hideHelp]"

    # ... Set up Microsoft style balloon help display.
    set _balloonTimer $itk_option(-balloondelay1)
    bind $_interior \
	    <Leave> "+[itcl::code $this _resetBalloonTimer]"
    bind toolbar-balloon-$itk_component(hull) \
	    <Enter> "+[itcl::code $this _startBalloonDelay %W]"
    bind toolbar-balloon-$itk_component(hull) \
	    <Leave> "+[itcl::code $this _stopBalloonDelay %W false]"
    bind toolbar-balloon-$itk_component(hull) \
	    <Button-1> "+[itcl::code $this _stopBalloonDelay %W true]"
}

#
# Provide a lowercase access method for the Toolbar class
#
proc ::iwidgets::toolbar {pathName args} {
    uplevel ::iwidgets::Toolbar $pathName $args
}

# ------------------------------------------------------------------
#                           DESTURCTOR
# ------------------------------------------------------------------
itcl::body iwidgets::Toolbar::destructor {} {
    if {$_balloonAfterID != 0} {after cancel $_balloonAfterID}
}

# ------------------------------------------------------------------
#                            OPTIONS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# OPTION -balloonbackground
# ------------------------------------------------------------------
itcl::configbody iwidgets::Toolbar::balloonbackground {
    if { $_hintWindow != {} } {
	if { $itk_option(-balloonbackground) != {} } {
	    $_hintWindow.label configure \
		-background $itk_option(-balloonbackground)
	}
    }
}

# ------------------------------------------------------------------
# OPTION -balloonforeground
# ------------------------------------------------------------------
itcl::configbody iwidgets::Toolbar::balloonforeground {
    if { $_hintWindow != {} } {
	if { $itk_option(-balloonforeground) != {} } {
	    $_hintWindow.label configure \
		-foreground $itk_option(-balloonforeground)
	}
    }
}

# ------------------------------------------------------------------
# OPTION -balloonfont
# ------------------------------------------------------------------
itcl::configbody iwidgets::Toolbar::balloonfont {
    if { $_hintWindow != {} } {
	if { $itk_option(-balloonfont) != {} } {
	    $_hintWindow.label configure \
		-font $itk_option(-balloonfont)
	}
    }
}

# ------------------------------------------------------------------
# OPTION: -orient
#
# Position buttons either horizontally or vertically.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Toolbar::orient {
    switch $itk_option(-orient) {
	"horizontal" - "vertical" {
	    _packToolbar
	}
	default {error "Invalid orientation. Must be either \
		horizontal or vertical"
        }
    }
}

# ------------------------------------------------------------------
#                            METHODS
# ------------------------------------------------------------------

# -------------------------------------------------------------
# METHOD: add widgetCommand name ?option value?
#
# Adds a widget with the command widgetCommand whose name is
# name to the Toolbar.   If widgetCommand is radiobutton
# or checkbutton, its packing is slightly padded to match the
# geometry of button widgets.
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::add { widgetCommand name args } {

    eval "_addWidget $widgetCommand $name $args"

    lappend _toolList $itk_component($name)

    if { $widgetCommand == "radiobutton" || \
	    $widgetCommand == "checkbutton" } {
	set iPad 1
    } else {
	set iPad 0
    }

    # repack the tool bar
    _packToolbar

    return $itk_component($name)

}

# -------------------------------------------------------------
#
# METHOD: delete index ?index2?
#
# This command deletes all components between index and
# index2 inclusive. If index2 is omitted then it defaults
# to index. Returns an empty string
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::delete { args } {
    # empty toolbar
    if { $_toolList == {} } {
	error "can't delete widget, no widgets in the Toolbar \
		\"$itk_component(hull)\""
    }

    set len [llength $args]
    switch -- $len {
	1 {
	    set fromWidget [_index $_toolList [lindex $args 0]]

	    if { $fromWidget < 0 || $fromWidget >= [llength $_toolList] } {
		error "bad Toolbar widget index in delete method: \
		  should be between 0 and [expr {[llength $_toolList] - 1} ]"
	    }

	    set toWidget $fromWidget
	    _deleteWidgets $fromWidget $toWidget
	}

	2 {
	    set fromWidget [_index $_toolList [lindex $args 0]]

	    if { $fromWidget < 0 || $fromWidget >= [llength $_toolList] } {
		error "bad Toolbar widget index1 in delete method: \
		  should be between 0 and [expr {[llength $_toolList] - 1} ]"
	    }

	    set toWidget [_index $_toolList [lindex $args 1]]

	    if { $toWidget < 0 || $toWidget >= [llength $_toolList] } {
		error "bad Toolbar widget index2 in delete method: \
		  should be between 0 and [expr {[llength $_toolList] - 1} ]"
	    }

	    if { $fromWidget > $toWidget } {
		error "bad Toolbar widget index1 in delete method: \
			index1 is greater than index2"
	    }

	    _deleteWidgets $fromWidget $toWidget
	}

	default {
	    # ... too few/many parameters passed
	    error "wrong # args: should be \
		    \"$itk_component(hull) delete index1 ?index2?\""
	}
    }

    return {}
}


# -------------------------------------------------------------
#
# METHOD: index index
#
# Returns the widget's numerical index for the entry corresponding
# to index. If index is not found, -1 is returned
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::index { index } {

    return [_index $_toolList $index]

}

# -------------------------------------------------------------
#
# METHOD: insert beforeIndex widgetCommand name ?option value?
#
# Insert a new component named name with the command
# widgetCommand before the com ponent specified by beforeIndex.
# If widgetCommand is radiobutton or checkbutton, its packing
# is slightly padded to match the geometry of button widgets.
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::insert {  beforeIndex widgetCommand name args } {

    set beforeIndex [_index $_toolList $beforeIndex]

    if {$beforeIndex < 0 || $beforeIndex > [llength $_toolList] } {
	error "bad toolbar entry index $beforeIndex"
    }

    eval "_addWidget $widgetCommand $name $args"

    # linsert into list
    set _toolList [linsert $_toolList $beforeIndex $itk_component($name)]

    # repack the tool bar
    _packToolbar

    return $itk_component($name)

}

# ----------------------------------------------------------------------
# METHOD: itemcget index ?option?
#
# Returns the value for the option setting of the widget at index $index.
# index can be numeric or widget name
#
# ----------------------------------------------------------------------
itcl::body iwidgets::Toolbar::itemcget { index args} {

    return [lindex [eval itemconfigure $index $args] 4]
}

# -------------------------------------------------------------
#
# METHOD: itemconfigure index ?option? ?value? ?option value...?
#
# Query or modify the configuration options of the widget of
# the Toolbar specified by index. If no option is specified,
# returns a list describing all of the available options for
# index (see Tk_ConfigureInfo for information on the format
# of this list). If option is specified with no value, then
# the command returns a list describing the one named option
# (this list will be identical to the corresponding sublist
# of the value returned if no option is specified). If one
# or more option-value pairs are specified, then the command
# modifies the given widget option(s) to have the given
# value(s); in this case the command returns an empty string.
# The component type of index determines the valid available options.
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::itemconfigure { index args } {

    # Get a numeric index.
    set index [_index $_toolList $index]

    # Get the tool path
    set toolPath [lindex $_toolList $index]

    set len [llength $args]

    switch $len {
	0 {
	    # show all options
	    # ''''''''''''''''

	    # support display of -helpstr and -balloonstr configs
	    set optList [$toolPath configure]

	    ## @@@@@@ might want to use _getAttachedOption instead...
	    if { [info exists _opts($toolPath,-helpstr)] } {
		set value $_opts($toolPath,-helpstr)
	    } else {
		set value {}
	    }
	    lappend optList [list -helpstr helpStr HelpStr {} $value]
	    if { [info exists _opts($toolPath,-balloonstr)] } {
		set value $_opts($toolPath,-balloonstr)
	    } else {
		set value {}
	    }
	    lappend optList [list -balloonstr balloonStr BalloonStr {} $value]
	    return $optList
	}
	1 {
	    # show only option specified
	    # ''''''''''''''''''''''''''
	    # did we satisfy the option get request?

	    if { [regexp -- {-helpstr} $args] } {
		if { [info exists _opts($toolPath,-helpstr)] } {
		    set value $_opts($toolPath,-helpstr)
		} else {
		    set value {}
		}
		return [list -helpstr helpStr HelpStr {} $value]
	    } elseif { [regexp -- {-balloonstr} $args] } {
		if { [info exists _opts($toolPath,-balloonstr)] } {
		    set value $_opts($toolPath,-balloonstr)
		} else {
		    set value {}
		}
		return [list -balloonstr balloonStr BalloonStr {} $value]
	    } else {
		return [eval $toolPath configure $args]
	    }

	}
	default {
	    # ... do a normal configure

	    # first screen for all our child options we are adding
	    _setAttachedOption \
		    _opts \
		    $toolPath \
		    "-helpstr" \
		    $args

	    _setAttachedOption \
		    _opts \
		    $toolPath \
		    "-balloonstr" \
		    $args

	    # with a clean args list do a configure

	    # if the stripping process brought us down to no options
	    # to set, then forget the configure of widget.
	    if { [llength $args] != 0 } {
		return [eval $toolPath configure $args]
	    } else {
		return ""
	    }
	}
    }

}

# -------------------------------------------------------------
#
# METHOD: _resetBalloonDelay1
#
# Sets the delay that will occur before a balloon could be popped
# up to balloonDelay1
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_resetBalloonTimer {} {
    set _balloonTimer $itk_option(-balloondelay1)

    # reset the <1> longer delay
    set _balloonClick false
}

# -------------------------------------------------------------
#
# METHOD: _startBalloonDelay
#
# Starts waiting to pop up a balloon id
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_startBalloonDelay {window} {
    if {$_balloonAfterID != 0} {
	after cancel $_balloonAfterID
    }
    set _balloonAfterID [after $_balloonTimer [itcl::code $this showBalloon $window]]
}

# -------------------------------------------------------------
#
# METHOD: _stopBalloonDelay
#
# This method will stop the timer for a balloon popup if one is
# in progress. If however there is already a balloon window up
# it will hide the balloon window and set timing to delay 2 stage.
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_stopBalloonDelay { window balloonClick } {

    # If <1> then got a click cancel
    if { $balloonClick } {
	set _balloonClick true
    }
    if { $_balloonAfterID != 0 } {
	after cancel $_balloonAfterID
	set _balloonAfterID 0
    } else {
	hideBalloon

	# If this was cancelled with a <1> use longer delay.
	if { $_balloonClick } {
	    set _balloonTimer $itk_option(-balloondelay1)
	} else {
	    set _balloonTimer $itk_option(-balloondelay2)
	}
    }
}

# -------------------------------------------------------------
# PRIVATE METHOD: _addWidget
#
# widgetCommand : command to invoke to create the added widget
# name          : name of the new widget to add
# args          : options for the widget create command
#
# Looks for -helpstr, -balloonstr and grabs them, strips from
# args list. Then tries to add a component and keeps based
# on known type. If it fails, it tries to clean up. Then it
# binds handlers for helpstatus and balloon help.
#
# Returns the path of the widget added.
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_addWidget { widgetCommand name args } {

    # ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
    # Add the widget to the tool bar
    # '''''''''''''''''''''''''''''''''''''''''''''''''''''

    # ... Strip out and save the -helpstr, -balloonstr options from args
    #     and save it in _opts
    _setAttachedOption \
	    _opts \
	    $_interior.$name \
	    -helpstr \
	    $args

    _setAttachedOption \
	    _opts \
	    $_interior.$name \
	    -balloonstr \
	    $args


    # ... Add the new widget as a component (catch an error if occurs)
    set createFailed [catch {
	itk_component add $name {
	    eval $widgetCommand $_interior.$name $args
	} {
	}
    } errMsg]

    # ... Clean up if the create failed, and exit.
    #     The _opts list if it has -helpstr, -balloonstr just entered for
    #     this, it must be cleaned up.
    if { $createFailed } {
	# clean up
	if {![catch {set _opts($_interior.$name,-helpstr)}]} {
	    set lastIndex [\
		    expr {[llength \
		    $_opts($_interior.$name,-helpstr) ]-1}]
	    lreplace $_opts($_interior.$name,-helpstr) \
		    $lastIndex $lastIndex ""
	}
	if {![catch {set _opts($_interior.$name,-balloonstr)}]} {
	    set lastIndex [\
		    expr {[llength \
		    $_opts($_interior.$name,-balloonstr) ]-1}]
	    lreplace $_opts($_interior.$name,-balloonstr) \
		    $lastIndex $lastIndex ""
	}
	error $errMsg
    }

    # ... Add in dynamic options that apply from the _optionList
    foreach optionSet [$itk_component($name) configure] {
	set option [lindex $optionSet 0]
	if { [lsearch $_optionList $option] != -1 } {
	    itk_option add $name.$option
	}
    }

    bindtags $itk_component($name) \
	    [linsert [bindtags $itk_component($name)] end \
	    toolbar-help-$itk_component(hull)]
    bindtags $itk_component($name) \
	    [linsert [bindtags $itk_component($name)] end \
	    toolbar-balloon-$itk_component(hull)]

    return $itk_component($name)
}

# -------------------------------------------------------------
#
# PRIVATE METHOD: _deleteWidgets
#
# deletes widget range by numerical index numbers.
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_deleteWidgets { index1 index2 } {

    for { set index $index1 } { $index <= $index2 } { incr index } {

	# kill the widget
	set component [lindex $_toolList $index]
	destroy $component

    }

    # physically remove the page
    set _toolList [lreplace $_toolList $index1 $index2]

}

# -------------------------------------------------------------
# PRIVATE METHOD: _index
#
# toolList : list of widget names to search thru if index
#            is non-numeric
# index    : either number, 'end', 'last', or pattern
#
# _index takes takes the value $index converts it to
# a numeric identifier. If the value is not already
# an integer it looks it up in the $toolList array.
# If it fails it returns -1
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_index { toolList index } {

    switch -- $index {
	end - last {
	    set number [expr {[llength $toolList] -1}]
	}
	default {
	    # is it a number already? Then just use the number
	    if { [regexp {^[0-9]+$} $index] } {
		set number $index
		# check bounds
		if { $number < 0 || $number >= [llength $toolList] } {
		    set number -1
		}
		# otherwise it is a widget name
	    } else {
		if { [catch { set itk_component($index) } ] } {
		    set number -1
		} else {
		    set number [lsearch -exact $toolList \
			    $itk_component($index)]
		}
	    }
	}
    }

    return $number
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# STATUS HELP for linking to helpVariable
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# -------------------------------------------------------------
#
# PUBLIC METHOD: hideHelp
#
# Bound to the <Leave> event on a toolbar widget. This clears the
# status widget help area and resets the help entry.
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::hideHelp {} {
    if { $itk_option(-helpvariable) != {} } {
        upvar #0 $itk_option(-helpvariable) helpvar
	set helpvar {}
    }
    set _currHelpWidget {}
}

# -------------------------------------------------------------
#
# PUBLIC METHOD: showHelp
#
# Bound to the <Motion> event on a tool bar widget. This puts the
# help string associated with the tool bar widget into the
# status widget help area. If no help exists for the current
# entry, the status widget is cleared.
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::showHelp { window } {

    set widgetPath $window
    # already on this item?
    if { $window == $_currHelpWidget } {
	return
    }

    set _currHelpWidget $window

    # Do we have a helpvariable set on the toolbar?
    if { $itk_option(-helpvariable) != {} } {
        upvar #0 $itk_option(-helpvariable) helpvar

	# is the -helpstr set for this widget?
	set args "-helpstr"
	if {[_getAttachedOption _opts \
		$window args value]} {
	    set helpvar $value.
	} else {
	    set helpvar {}
	}
    }
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# BALLOON HELP for show/hide of hint window
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# -------------------------------------------------------------
#
# PUBLIC METHOD: showBalloon
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::showBalloon {window} {
    set _balloonClick false
    set _balloonAfterID 0
    # Are we still inside the window?
    set mouseWindow \
	    [winfo containing [winfo pointerx .] [winfo pointery .]]

    if { [string match $window* $mouseWindow] } {
	# set up the balloonString
	set args "-balloonstr"
	if {[_getAttachedOption _opts \
		$window args hintStr]} {
	    # configure the balloon help
	    $_hintWindow.label configure -text $hintStr

	    # Coordinates of the balloon
	    set balloonLeft \
		    [expr {[winfo rootx $window] + round(([winfo width $window]/2.0))}]
	    set balloonTop \
		    [expr {[winfo rooty $window] + [winfo height $window]}]

	    #Bob Modifications Begin
	    set _stringwidth [font measure $itk_option(-balloonfont) $hintStr]
	    set _padx 8
	    set _screenwidth [winfo screenwidth $_hintWindow.label]
	    set balloonRight [expr {$balloonLeft + $_stringwidth + $_padx}]

	    # Adjust balloonLeft so that the balloon
	    # help window's right side is visible
	    if {$_screenwidth < $balloonRight} {
		set balloonLeft [expr {$balloonLeft - $_stringwidth - $_padx}]
	    }

	    set _stringheight [winfo height $_hintWindow]
	    set _pady 24
	    set _screenheight [winfo screenheight $_hintWindow.label]
	    set balloonBottom [expr {$balloonTop + $_stringheight + $_pady}]

	    # Adjust balloonTop so that the balloon
	    # help window's bottom side is visible
	    if {$_screenheight < $balloonBottom} {
		set balloonTop [expr {[winfo rooty $window] - $_stringheight}]
	    }
	    #Bob Modifications End

	    # put up balloon window
	    wm overrideredirect $_hintWindow 0
	    wm geometry $_hintWindow "+$balloonLeft+$balloonTop"
	    wm overrideredirect $_hintWindow 1
	    wm deiconify $_hintWindow
	    raise $_hintWindow
	} else {
	    #NO BALLOON HELP AVAILABLE
	}
    } else {
	#NOT IN BUTTON
    }

}

# -------------------------------------------------------------
#
# PUBLIC METHOD: hideBalloon
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::hideBalloon {} {
    wm withdraw $_hintWindow
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# OPTION MANAGEMENT for -helpstr, -balloonstr
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# -------------------------------------------------------------
# PRIVATE METHOD: _getAttachedOption
#
# optionListName : the name of the array that holds all attached
#              options. It is indexed via widget,option to get
#              the value.
# widget     : the widget that the option is associated with
# option     : the option whose value we are looking for on
#              this widget.
#
# expects to be called only if the $option is length 1
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_getAttachedOption { optionListName widget args retValue} {

    # get a reference to the option, so we can change it.
    upvar $args argsRef
    upvar $retValue retValueRef

    set success false

    if { ![catch { set retValueRef \
	    [eval set [subst [set optionListName]]($widget,$argsRef)]}]} {

	# remove the option argument
	set success true
	set argsRef ""
    }

    return $success
}

# -------------------------------------------------------------
# PRIVATE METHOD: _setAttachedOption
#
# This method allows us to attach new options to a widget. It
# catches the 'option' to be attached, strips it out of 'args'
# attaches it to the 'widget' by stuffing the value into
# 'optionList(widget,option)'
#
# optionListName:  where to store the option and widget association
# widget: is the widget we want to associate the attached option
# option: is the attached option (unknown to this widget)
# args:   the arg list to search and remove the option from (if found)
#
# Modifies the args parameter.
# Returns boolean indicating the success of the method
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_setAttachedOption {optionListName widget option args} {

    upvar args argsRef

    set success false

    # check for 'option' in the 'args' list for the 'widget'
    set optPos [eval lsearch $args $option]

    # ... found it
    if { $optPos != -1 } {
	# grab a copy of the option from arg list
	set [subst [set optionListName]]($widget,$option) \
		[eval lindex $args [expr {$optPos + 1}]]

	# remove the option argument and value from the arg list
	set argsRef [eval lreplace $args $optPos [expr {$optPos + 1}]]
	set success true
    }
    # ... if not found, will leave args alone

    return $success
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# GEOMETRY MANAGEMENT for tool widgets
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# -------------------------------------------------------------
#
# PRIVATE METHOD: _packToolbar
#
#
#
# -------------------------------------------------------------
itcl::body iwidgets::Toolbar::_packToolbar {} {

    # forget the previous locations
    foreach tool $_toolList {
	pack forget $tool
    }

    # pack in order of _toolList.
    foreach tool $_toolList {
	# adjust for radios and checks to match buttons
	if { [winfo class $tool] == "Radiobutton" ||
	[winfo class $tool] == "Checkbutton" } {
	    set iPad 1
	} else {
	    set iPad 0
	}

	# pack by horizontal or vertical orientation
	if {$itk_option(-orient) == "horizontal" } {
	    pack $tool -side left -fill y \
		    -ipadx $iPad -ipady $iPad
	} else {
	    pack $tool -side top -fill x \
		    -ipadx $iPad -ipady $iPad
	}
    }
}
@


14.2
log
@Merge of bobWinPort
@
text
@d5 7
a11 7
# The Toolbar command creates a new window (given by the pathName 
# argument) and makes it into a Tool Bar widget. Additional options, 
# described above may be specified on the command line or in the 
# option database to configure aspects of the Toolbar such as its 
# colors, font, and orientation. The Toolbar command returns its 
# pathName argument. At the time this command is invoked, there 
# must not exist a window named pathName, but pathName's parent 
d13 7
a19 7
# 
# A Toolbar is a widget that displays a collection of widgets arranged 
# either in a row or a column (depending on the value of the -orient 
# option). This collection of widgets is usually for user convenience 
# to give access to a set of commands or settings. Any widget may be 
# placed on a Toolbar. However, command or value-oriented widgets (such 
# as button, radiobutton, etc.) are usually the most useful kind of 
d22 2
a23 2
# WISH LIST: 
#   This section lists possible future enhancements.  
d32 1
a32 1
#  @@(#) $Id: toolbar.itk,v 14.1 2004/11/16 19:42:19 morrison Exp $
d36 7
a42 7
# Permission to use, copy, modify, distribute and license this software 
# and its documentation for any purpose, and without fee or written 
# agreement with DSC, is hereby granted, provided that the above copyright 
# notice appears in all copies and that both the copyright notice and 
# warranty disclaimer below appear in supporting documentation, and that 
# the names of DSC Technologies Corporation or DSC Communications 
# Corporation not be used in advertising or publicity pertaining to the 
d44 2
a45 2
# 
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 
d48 4
a51 4
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, 
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL 
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR 
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
d53 1
a53 1
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS 
d86 1
a86 1
    
d89 1
a89 1
    
d91 1
a91 1
	    balloonBackground BalloonBackground yellow 
d93 2
a94 2
	    balloonForeground BalloonForeground black 
    itk_option define -balloonfont balloonFont BalloonFont 6x10 
d99 3
a101 3
    itk_option define -helpvariable helpVariable HelpVariable {} 
    itk_option define -orient orient Orient "horizontal" 
    
d111 3
a113 3
    itk_option define -activeforeground activeForeground Background Black 
    itk_option define -background background Background #d9d9d9 
    itk_option define -borderwidth borderWidth BorderWidth 2 
d116 1
a116 1
	    disabledForeground DisabledForeground #a3a3a3 
d118 2
a119 2
	    font Font "-Adobe-Helvetica-Bold-R-Normal--*-120-*-*-*-*-*-*" 
    itk_option define -foreground foreground Foreground #000000000000 
d121 2
a122 2
	    highlightBackground HighlightBackground #d9d9d9 
    itk_option define -highlightcolor highlightColor HighlightColor Black 
d124 17
a140 17
	    highlightThickness HighlightThickness 0 
    itk_option define -insertforeground insertForeground Background #c3c3c3 
    itk_option define -insertbackground insertBackground Foreground Black 
    itk_option define -selectbackground selectBackground Foreground #c3c3c3 
    itk_option define -selectborderwidth selectBorderWidth BorderWidth {} 
    itk_option define -selectcolor selectColor Background #b03060 
    itk_option define -selectforeground selectForeground Background Black 
    itk_option define -state state State normal 
    itk_option define -troughcolor troughColor Background #c3c3c3 
    
    public method add {widgetCommand name args} 
    public method delete {args} 
    public method index {index} 
    public method insert {beforeIndex widgetCommand name args} 
    public method itemcget {index args} 
    public method itemconfigure {index args} 
    
d145 1
a145 1
    private method _deleteWidgets {index1 index2} 
d147 10
a156 10
    private method _index {toolList index} 
    private method _getAttachedOption {optionListName widget args retValue} 
    private method _setAttachedOption {optionListName widget option args} 
    private method _packToolbar {} 
    
    public method hideHelp {} 
    public method showHelp {window} 
    public method showBalloon {window} 
    public method hideBalloon {} 
    
d160 1
a160 1
    
d167 1
a167 1
    
d193 1
a193 1
#                            CONSTRUCTOR 
d217 1
a217 1
    
d223 1
a223 1
    
d285 1
a285 1
		-font $itk_option(-balloonfont) 
d309 1
a309 1
    
d313 3
a315 3
# Adds a widget with the command widgetCommand whose name is 
# name to the Toolbar.   If widgetCommand is radiobutton 
# or checkbutton, its packing is slightly padded to match the 
d319 1
a319 1
    
d321 1
a321 1
    
d323 1
a323 1
    
d330 1
a330 1
    
d333 1
a333 1
    
d335 1
a335 1
    
d342 2
a343 2
# This command deletes all components between index and 
# index2 inclusive. If index2 is omitted then it defaults 
d353 1
a353 1
    
d358 1
a358 1
	    
d363 1
a363 1
	    
d367 1
a367 1
	
d370 1
a370 1
	    
d375 1
a375 1
	    
d377 1
a377 1
	    
d382 1
a382 1
	    
d387 1
a387 1
	    
d390 1
a390 1
	
d397 1
a397 1
    
d404 1
a404 1
# METHOD: index index 
d406 1
a406 1
# Returns the widget's numerical index for the entry corresponding 
d411 1
a411 1
    
d413 1
a413 1
    
d420 3
a422 3
# Insert a new component named name with the command 
# widgetCommand before the com ponent specified by beforeIndex. 
# If widgetCommand is radiobutton or checkbutton, its packing 
d427 1
a427 1
    
d429 1
a429 1
    
d433 1
a433 1
    
d435 1
a435 1
    
d438 1
a438 1
    
d441 1
a441 1
    
d443 1
a443 1
    
d447 1
a447 1
# METHOD: itemcget index ?option? 
d454 1
a454 1
    
d462 11
a472 11
# Query or modify the configuration options of the widget of 
# the Toolbar specified by index. If no option is specified, 
# returns a list describing all of the available options for 
# index (see Tk_ConfigureInfo for information on the format 
# of this list). If option is specified with no value, then 
# the command returns a list describing the one named option 
# (this list will be identical to the corresponding sublist 
# of the value returned if no option is specified). If one 
# or more option-value pairs are specified, then the command 
# modifies the given widget option(s) to have the given 
# value(s); in this case the command returns an empty string. 
d477 1
a477 1
    
d480 1
a480 1
    
d483 1
a483 1
    
d485 1
a485 1
    
d490 1
a490 1
	    
d493 1
a493 1
	    
d513 1
a513 1
	    
d531 1
a531 1
	    
d535 1
a535 1
	    
d542 1
a542 1
	    
d547 2
a548 2
		    $args 
	    
d550 1
a550 1
	    
d560 1
a560 1
    
d565 1
a565 1
# METHOD: _resetBalloonDelay1 
d573 1
a573 1
    
d580 1
a580 1
# METHOD: _startBalloonDelay 
d594 1
a594 1
# METHOD: _stopBalloonDelay  
d602 1
a602 1
    
d612 1
a612 1
	
d638 1
a638 1
    
d642 1
a642 1
    
d649 2
a650 2
	    $args 
    
d656 2
a657 2
    
    
d659 1
a659 1
    set createFailed [catch { 
d665 1
a665 1
	
d687 1
a687 1
    
d695 1
a695 1
    
d702 1
a702 1
    
d714 1
a714 1
    
d716 1
a716 1
	
d720 1
a720 1
	
d722 1
a722 1
    
d725 1
a725 1
    
d731 1
a731 1
# toolList : list of widget names to search thru if index 
d742 1
a742 1
    
d766 1
a766 1
    
d769 1
a769 1
    
d774 1
a774 1
# 
d790 1
a790 1
# 
d794 1
a794 1
# help string associated with the tool bar widget into the 
d800 1
a800 1
    
d806 1
a806 1
    
d808 1
a808 1
    
d812 1
a812 1
	
d828 1
a828 1
# 
d852 1
a852 1
	    
d889 1
a889 1
    
d893 1
a893 1
# 
d911 1
a911 1
# option     : the option whose value we are looking for on 
d917 1
a917 1
    
d921 1
a921 1
    
d923 1
a923 1
    
d926 2
a927 2
	
	# remove the option argument 
d931 1
a931 1
    
d953 1
a953 1
    
d955 1
a955 1
    
d957 1
a957 1
    
d960 1
a960 1
    
d966 1
a966 1
	
d972 1
a972 1
    
d980 1
a980 1
# 
d992 1
a992 1
    
d996 1
a996 1
	if { [winfo class $tool] == "Radiobutton" || 
d1002 1
a1002 1
	
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d32 1
a32 1
#  @@(#) $Id: toolbar.itk,v 1.1 2004/05/20 14:49:48 morrison Exp $
d60 4
a63 2
option add *Toolbar*padX 5 widgetDefault
option add *Toolbar*padY 5 widgetDefault
d205 4
a208 1
    set _hintWindow [toplevel $itk_component(hull).balloonHintWindow]
d214 3
a216 3
	-relief raised \
	-borderwidth 1
    pack $_hintWindow.label
d845 2
a846 2
	    $_hintWindow.label configure -text $hintStr		
	    
d853 24
@


14.1.2.1
log
@Add mods to ensure that the balloon help window is not clipped by the screen
@
text
@d32 1
a32 1
#  @@(#) $Id: toolbar.itk,v 14.1 2004/11/16 19:42:19 morrison Exp $
d60 2
a61 4
option add *Toolbar*padX 2 widgetDefault
option add *Toolbar*padY 0 widgetDefault
#option add *Toolbar*padX 5 widgetDefault
#option add *Toolbar*padY 5 widgetDefault
d203 1
a203 4
    set _hintWindow [toplevel $itk_component(hull).balloonHintWindow \
			 -padx 0 \
			 -pady 0 \
			 -bg black]
d209 3
a211 3
	-relief flat \
	-borderwidth 0
    pack $_hintWindow.label -expand yes -fill both -padx 1 -pady 1
d840 2
a841 2
	    $_hintWindow.label configure -text $hintStr

a847 24
	    #Bob Modifications Begin
	    set _stringwidth [font measure $itk_option(-balloonfont) $hintStr]
	    set _padx 8
	    set _screenwidth [winfo screenwidth $_hintWindow.label]
	    set balloonRight [expr {$balloonLeft + $_stringwidth + $_padx}]

	    # Adjust balloonLeft so that the balloon
	    # help window's right side is visible
	    if {$_screenwidth < $balloonRight} {
		set balloonLeft [expr {$balloonLeft - $_stringwidth - $_padx}]
	    }

	    set _stringheight [winfo height $_hintWindow]
	    set _pady 24
	    set _screenheight [winfo screenheight $_hintWindow.label]
	    set balloonBottom [expr {$balloonTop + $_stringheight + $_pady}]

	    # Adjust balloonTop so that the balloon
	    # help window's bottom side is visible
	    if {$_screenheight < $balloonBottom} {
		set balloonTop [expr {[winfo rooty $window] - $_stringheight}]
	    }
	    #Bob Modifications End

@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d32 1
a32 1
#  @@(#) $Id: toolbar.itk,v 1.1 2003/03/13 13:20:38 jra Exp $
@

