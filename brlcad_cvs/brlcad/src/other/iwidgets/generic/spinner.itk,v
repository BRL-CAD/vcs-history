head	14.2;
access;
symbols
	rel-7-10-4:14.1
	STABLE:14.1.0.10
	stable-branch:14.1
	rel-7-10-2:14.1
	rel-7-10-0:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.2
date	2007.09.14.15.21.36;	author erikgreenwald;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.19;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.49.47;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.2
log
@removed trailing whitespace
@
text
@# Spinner
# ----------------------------------------------------------------------
# Implements a spinner widget.  The Spinner is comprised of an
# EntryField plus up and down arrow buttons.
# Spinner is meant to be used as a base class for creating more
# specific spinners such as SpinInt.itk
# Arrows may be drawn horizontally or vertically.
# User may define arrow behavior or accept the default arrow behavior.
#
# ----------------------------------------------------------------------
#   AUTHOR:  Sue Yockey               Phone: (214) 519-2517
#                                     E-mail: syockey@@spd.dsccc.com
#                                             yockey@@acm.org
#
#   @@(#) $Id: spinner.itk,v 14.1 2004/11/16 19:42:19 morrison Exp $
# ----------------------------------------------------------------------
#            Copyright (c) 1995 DSC Technologies Corporation
# ======================================================================
# Permission to use, copy, modify, distribute and license this software
# and its documentation for any purpose, and without fee or written
# agreement with DSC, is hereby granted, provided that the above copyright
# notice appears in all copies and that both the copyright notice and
# warranty disclaimer below appear in supporting documentation, and that
# the names of DSC Technologies Corporation or DSC Communications
# Corporation not be used in advertising or publicity pertaining to the
# software without specific, written prior permission.
#
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, AND NON-
# INFRINGEMENT. THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, AND THE
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE,
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTUOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
# ======================================================================

#
# Usual options.
#
itk::usual Spinner {
    keep -background -borderwidth -cursor -foreground -highlightcolor \
	 -highlightthickness -insertbackground -insertborderwidth \
	 -insertofftime -insertontime -insertwidth -labelfont \
	 -selectbackground -selectborderwidth -selectforeground \
	 -textbackground -textfont
}

# ------------------------------------------------------------------
#                              SPINNER
# ------------------------------------------------------------------
itcl::class iwidgets::Spinner {
    inherit iwidgets::Entryfield

    constructor {args} {}
    destructor {}

    itk_option define -arroworient arrowOrient Orient vertical
    itk_option define -textfont textFont \
	    Font -Adobe-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-*
    itk_option define -borderwidth borderWidth BorderWidth 2
    itk_option define -highlightthickness highlightThickness \
	    HighlightThickness 2
    itk_option define -increment increment Command {}
    itk_option define -decrement decrement Command {}
    itk_option define -repeatdelay repeatDelay RepeatDelay 300
    itk_option define -repeatinterval repeatInterval RepeatInterval 100
    itk_option define -foreground foreground Foreground black

    public method down {}
    public method up {}

    protected method _pushup {}
    protected method _pushdown {}
    protected method _relup {}
    protected method _reldown {}
    protected method _doup {rate}
    protected method _dodown {rate}
    protected method _up {}
    protected method _down {}

    protected method _positionArrows {{when later}}

    protected variable _interior {}
    protected variable _reposition ""  ;# non-null => _positionArrows pending
    protected variable _uptimer ""     ;# non-null => _uptimer pending
    protected variable _downtimer ""   ;# non-null => _downtimer pending
}

#
# Provide a lowercased access method for the Spinner class.
#
proc ::iwidgets::spinner {pathName args} {
    uplevel ::iwidgets::Spinner $pathName $args
}

# ------------------------------------------------------------------
#                        CONSTRUCTOR
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::constructor {args} {
    #
    # Save off the interior for later use.
    #
    set _interior $itk_interior

    #
    # Create up arrow button.
    #
    itk_component add uparrow {
	canvas $itk_interior.uparrow -height 10 -width 10 \
		-relief raised -highlightthickness 0
    } {
	keep -background -borderwidth
    }

    #
    # Create down arrow button.
    #
    itk_component add downarrow {
	canvas $itk_interior.downarrow -height 10 -width 10 \
		-relief raised -highlightthickness 0
    } {
	keep -background -borderwidth
    }

    #
    # Add bindings for button press events on the up and down buttons.
    #
    bind $itk_component(uparrow) <ButtonPress-1> [itcl::code $this _pushup]
    bind $itk_component(uparrow) <ButtonRelease-1> [itcl::code $this _relup]

    bind $itk_component(downarrow)  <ButtonPress-1> [itcl::code $this _pushdown]
    bind $itk_component(downarrow) <ButtonRelease-1> [itcl::code $this _reldown]

    eval itk_initialize $args

    #
    # When idle, position the arrows.
    #
    _positionArrows
}

# ------------------------------------------------------------------
#                          DESTRUCTOR
# ------------------------------------------------------------------

itcl::body iwidgets::Spinner::destructor {} {
    if {$_reposition != ""} {after cancel $_reposition}
    if {$_uptimer != ""} {after cancel $_uptimer}
    if {$_downtimer != ""} {after cancel $_downtimer}
}

# ------------------------------------------------------------------
#                             OPTIONS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# OPTION: -arroworient
#
# Place arrows vertically or horizontally .
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::arroworient {
    _positionArrows
}

# ------------------------------------------------------------------
# OPTION: -textfont
#
# Change font, resize arrow buttons.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::textfont {
    _positionArrows
}

# ------------------------------------------------------------------
# OPTION: -highlightthickness
#
# Change highlightthickness, resize arrow buttons.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::highlightthickness {
    _positionArrows
}

# ------------------------------------------------------------------
# OPTION: -borderwidth
#
# Change borderwidth, resize arrow buttons.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::borderwidth {
    _positionArrows
}

# ------------------------------------------------------------------
# OPTION: -increment
#
# Up arrow callback.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::increment {
    if {$itk_option(-increment) == {}} {
	set itk_option(-increment) [itcl::code $this up]
    }
}

# ------------------------------------------------------------------
# OPTION: -decrement
#
# Down arrow callback.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::decrement {
    if {$itk_option(-decrement) == {}} {
	set itk_option(-decrement) [itcl::code $this down]
    }
}

# ------------------------------------------------------------------
# OPTION: -repeatinterval
#
# Arrow repeat rate in milliseconds. A repeatinterval of 0 disables
# button repeat.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::repeatinterval {
    if {$itk_option(-repeatinterval) < 0} {
       set itk_option(-repeatinterval) 0
    }
}

# ------------------------------------------------------------------
# OPTION: -repeatdelay
#
# Arrow repeat delay in milliseconds.
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::repeatdelay {
    if {$itk_option(-repeatdelay) < 0} {
       set itk_option(-repeatdelay) 0
    }
}

# ------------------------------------------------------------------
# OPTION: -foreground
#
# Set the foreground color of the up and down arrows. Remember
# to make sure the "tag" exists before setting them...
# ------------------------------------------------------------------
itcl::configbody iwidgets::Spinner::foreground {

    if { [$itk_component(uparrow) gettags up] != "" } {
	$itk_component(uparrow) itemconfigure up \
		-fill $itk_option(-foreground)
    }

    if { [$itk_component(downarrow) gettags down] != "" } {
	$itk_component(downarrow) itemconfigure down \
		-fill $itk_option(-foreground)
    }
}

# ------------------------------------------------------------------
#                            METHODS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# METHOD: up
#
# Up arrow command.  Meant to be overloaded by derived class.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::up {} {
}

# ------------------------------------------------------------------
# METHOD: down
#
# Down arrow command.  Meant to be overloaded by derived class.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::down {} {
}

# ------------------------------------------------------------------
# PROTECTED METHOD: _positionArrows ?when?
#
# Draw Arrows for spinner. If "when" is "now", the change is applied
# immediately.  If it is "later" or it is not specified, then the
# change is applied later, when the application is idle.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_positionArrows {{when later}} {
    if {$when == "later"} {
	if {$_reposition == ""} {
	    set _reposition [after idle [itcl::code $this _positionArrows now]]
	}
	return
    } elseif {$when != "now"} {
	error "bad option \"$when\": should be now or later"
    }

    set _reposition ""

    set bdw [cget -borderwidth]

    #
    # Based on the orientation of the arrows, pack them accordingly and
    # determine the width and height of the spinners.  For vertical
    # orientation, it is really tight in the y direction, so we'll take
    # advantage of the highlightthickness.  Horizontal alignment has
    # plenty of space vertically, thus we'll ignore the thickness.
    #
    switch $itk_option(-arroworient) {
	vertical {
	    grid $itk_component(uparrow) -row 0 -column 0
	    grid $itk_component(downarrow) -row 1 -column 0

	    set totalHgt [winfo reqheight $itk_component(entry)]
	    set spinHgt [expr {$totalHgt / 2}]
	    set spinWid [expr {round ($spinHgt * 1.6)}]
	}
	horizontal {
	    grid $itk_component(uparrow) -row 0 -column 0
	    grid $itk_component(downarrow) -row 0 -column 1

	    set spinHgt [expr {[winfo reqheight $itk_component(entry)] - \
		    (2 * [$itk_component(entry) cget -highlightthickness])}]
	    set spinWid $spinHgt
	}
	default {
	    error "bad orientation option \"$itk_option(-arroworient)\",\
		   should be horizontal or vertical"
	}
    }

    #
    # Configure the width and height of the spinners minus the borderwidth.
    # Next delete the previous spinner polygons and create new ones.
    #
    $itk_component(uparrow) config \
	    -height [expr {$spinHgt - (2 * $bdw)}] \
	    -width [expr {$spinWid - (2 * $bdw)}]
    $itk_component(uparrow) delete up
    $itk_component(uparrow) create polygon \
	    [expr {$spinWid / 2}] $bdw \
	    [expr {$spinWid - $bdw - 1}] [expr {$spinHgt - $bdw -1}] \
	    [expr {$bdw + 1}] [expr {$spinHgt - $bdw - 1}] \
	    -fill $itk_option(-foreground) -tags up

    $itk_component(downarrow) config \
	    -height [expr {$spinHgt - (2 * $bdw)}] \
	    -width [expr {$spinWid - (2 * $bdw)}]
    $itk_component(downarrow) delete down
    $itk_component(downarrow) create polygon \
	    [expr {$spinWid / 2}] [expr {($spinHgt - $bdw) - 1}] \
	    [expr {$bdw + 2}] [expr {$bdw + 1}] \
	    [expr {$spinWid - $bdw - 2}] [expr {$bdw + 1}] \
	    -fill $itk_option(-foreground) -tags down
}

# ------------------------------------------------------------------
# PRIVATE METHOD: _pushup
#
# Up arrow button press event.  Call _doup with repeatdelay.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_pushup {} {
    $itk_component(uparrow) config -relief sunken
    _doup $itk_option(-repeatdelay)
}

# ------------------------------------------------------------------
# PRIVATE METHOD: _pushdown
#
# Down arrow button press event.  Call _dodown with repeatdelay.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_pushdown {} {
    $itk_component(downarrow) config -relief sunken
    _dodown $itk_option(-repeatdelay)
}

# ------------------------------------------------------------------
# PRIVATE METHOD: _doup
#
# Call _up and post to do another one after "rate" milliseconds if
# repeatinterval > 0.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_doup {rate} {
    _up

    if {$itk_option(-repeatinterval) > 0} {
	set _uptimer [after $rate [itcl::code $this _doup $itk_option(-repeatinterval)]]
    }
}

# ------------------------------------------------------------------
# PRIVATE METHOD: _dodown
#
# Call _down and post to do another one after "rate" milliseconds if
# repeatinterval > 0.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_dodown {rate} {
    _down

    if {$itk_option(-repeatinterval) > 0} {
	set _downtimer \
		[after $rate [itcl::code $this _dodown $itk_option(-repeatinterval)]]
    }
}

# ------------------------------------------------------------------
# PRIVATE METHOD: _relup
#
# Up arrow button release event.  Cancel pending up timer.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_relup {} {
    $itk_component(uparrow) config -relief raised

    if {$_uptimer != ""} {
	after cancel $_uptimer
	set _uptimer ""
    }
}

# ------------------------------------------------------------------
# PRIVATE METHOD: _reldown
#
# Up arrow button release event.  Cancel pending down timer.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_reldown {} {
    $itk_component(downarrow) config -relief raised

    if {$_downtimer != ""} {
	after cancel $_downtimer
	set _downtimer ""
    }
}

# ------------------------------------------------------------------
# PRIVATE METHOD: _up
#
# Up arrow button press event.  Call defined increment command.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_up {} {
    uplevel #0 $itk_option(-increment)
}

# ------------------------------------------------------------------
# PRIVATE METHOD: _down
#
# Down arrow button press event.  Call defined decrement command.
# ------------------------------------------------------------------
itcl::body iwidgets::Spinner::_down {} {
    uplevel #0 $itk_option(-decrement)
}
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 1
a1 1
# Spinner 
d3 2
a4 2
# Implements a spinner widget.  The Spinner is comprised of an  
# EntryField plus up and down arrow buttons. 
d15 1
a15 1
#   @@(#) $Id: spinner.itk,v 1.1 2004/05/20 14:49:47 morrison Exp $
d19 7
a25 7
# Permission to use, copy, modify, distribute and license this software 
# and its documentation for any purpose, and without fee or written 
# agreement with DSC, is hereby granted, provided that the above copyright 
# notice appears in all copies and that both the copyright notice and 
# warranty disclaimer below appear in supporting documentation, and that 
# the names of DSC Technologies Corporation or DSC Communications 
# Corporation not be used in advertising or publicity pertaining to the 
d27 2
a28 2
# 
# DSC DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 
d31 4
a34 4
# AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, 
# SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS. IN NO EVENT SHALL 
# DSC BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR 
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
d36 1
a36 1
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS 
d55 1
a55 1
    inherit iwidgets::Entryfield 
d68 1
a68 1
    itk_option define -repeatdelay repeatDelay RepeatDelay 300 
d91 1
a91 1
    
d94 1
a94 1
# 
d107 1
a107 1
    
d110 1
a110 1
    # 
d117 1
a117 1
    
d120 1
a120 1
    # 
d136 1
a136 1
    
d139 1
a139 1
    # 
d198 1
a198 1
# Up arrow callback. 
d209 1
a209 1
# Down arrow callback. 
d220 1
a220 1
# Arrow repeat rate in milliseconds. A repeatinterval of 0 disables 
d226 1
a226 1
    } 
d232 1
a232 1
# Arrow repeat delay in milliseconds. 
d237 1
a237 1
    } 
d266 1
a266 1
# Up arrow command.  Meant to be overloaded by derived class. 
d272 1
a272 1
# METHOD: down 
d283 1
a283 1
# immediately.  If it is "later" or it is not specified, then the 
d302 3
a304 3
    # determine the width and height of the spinners.  For vertical 
    # orientation, it is really tight in the y direction, so we'll take 
    # advantage of the highlightthickness.  Horizontal alignment has 
d306 1
a306 1
    # 
d312 1
a312 1
	    set totalHgt [winfo reqheight $itk_component(entry)] 
d343 1
a343 1
	    
d358 1
a358 1
# Up arrow button press event.  Call _doup with repeatdelay. 
d368 1
a368 1
# Down arrow button press event.  Call _dodown with repeatdelay. 
d382 1
a382 1
    _up 
d392 1
a392 1
# Call _down and post to do another one after "rate" milliseconds if 
d396 1
a396 1
    _down 
d413 1
a413 1
	after cancel $_uptimer 
d426 1
a426 1
    if {$_downtimer != ""} { 
d435 1
a435 1
# Up arrow button press event.  Call defined increment command. 
d442 1
a442 1
# PRIVATE METHOD: _down 
d444 1
a444 1
# Down arrow button press event.  Call defined decrement command. 
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@d15 1
a15 1
#   @@(#) $Id: spinner.itk,v 1.1 2003/03/13 13:20:37 jra Exp $
@

