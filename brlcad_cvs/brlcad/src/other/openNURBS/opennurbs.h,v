head	1.8;
access;
symbols
	rel-7-10-4:1.7
	STABLE:1.7.0.2
	rel-7-10-2:1.7
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.8
date	2007.09.14.15.21.39;	author erikgreenwald;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.13.20.32.05;	author jlowenz;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.12.06.22.47;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.18.20.19.56;	author jlowenz;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.31.18.51.12;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.31.14.11.59;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.31.13.42.09;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.05.15.20.06;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.8
log
@removed trailing whitespace
@
text
@/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs.h,v 1.7 2007/07/13 20:32:05 jlowenz Exp $ */
/* $NoKeywords: $ */
/*
//
// Copyright (c) 1993-2001 Robert McNeel & Associates. All rights reserved.
// Rhinoceros is a registered trademark of Robert McNeel & Assoicates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//
// For complete openNURBS copyright information see <http://www.opennurbs.org>.
//
////////////////////////////////////////////////////////////////
*/

////////////////////////////////////////////////////////////////
//
//   Includes all openNURBS toolkit headers required to use the
//   openNURBS toolkit library.  See readme.txt for details.
//
////////////////////////////////////////////////////////////////

#if !defined(OPENNURBS_INC_)
#define OPENNURBS_INC_

#include <iostream>
//#define ON_TRACE(m) std::cout << m << std::endl
#define ON_TRACE(m)

#include "opennurbs_system.h"       /* system headers used by openNURBS code */

#include "opennurbs_3dm.h"          /* 3DM typecode (TCODE) definitions */

#include "opennurbs_defines.h"      /* openNURBS defines and enums */
#include "opennurbs_error.h"        /* error handling */
#include "opennurbs_memory.h"       /* memory managment (onmalloc(), onrealloc(), onfree(), ...) */
#include "opennurbs_crc.h"          /* cyclic redundancy check tool */
#include "opennurbs_uuid.h"         /* universally unique identifiers (UUID, a.k.a, GUID) */

#if defined(ON_CPLUSPLUS)

#include "opennurbs_string.h"         // dynamic string classes (single and double byte)
#include "opennurbs_color.h"          // R G B color
#include "opennurbs_linestyle.h"      // line pattern, scale, and width
#include "opennurbs_point.h"          // double precision 2d, 3d, 4d points and 2d, 3d vectors
#include "opennurbs_fpoint.h"         // float precision 2d, 3d, 4d points and 2d, 3d vectors
#include "opennurbs_array.h"          // dynamic array templates
#include "opennurbs_pluginlist.h"
#include "opennurbs_bounding_box.h"   // simple 3d axis aligned bounding box
#include "opennurbs_matrix.h"         // general m X n matrix
#include "opennurbs_xform.h"          // 4 X 4 transformation matrix
#include "opennurbs_workspace.h"      // workspace memory allocation
#include "opennurbs_plane.h"          // simple 3d plane
#include "opennurbs_circle.h"         // simple 3d circle
#include "opennurbs_ellipse.h"        // simple 3d ellipse
#include "opennurbs_x.h"              // intersection events
#include "opennurbs_line.h"           // simple line
#include "opennurbs_polyline.h"       // simple polyline
#include "opennurbs_cylinder.h"       // simple 3d elliptical cylinder
#include "opennurbs_cone.h"           // simple 3d right circular cone
#include "opennurbs_sphere.h"         // simple 3d sphere
#include "opennurbs_torus.h"          // simple 3d torus
#include "opennurbs_bezier.h"         // simple bezier and polynomial curves and surfaces
#include "opennurbs_math.h"           // utilities for performing simple calculations
#include "opennurbs_intersect.h"      // utilities for performing simple intersections
#include "opennurbs_optimize.h"       // utilities for finding extrema and zeros
#include "opennurbs_knot.h"           // utilities for working with NURBS knot vectors
#include "opennurbs_evaluate_nurbs.h" // utilities for evaluating Beziers and NURBS
#include "opennurbs_textlog.h"        // text log for dumps, error logs, etc.
#include "opennurbs_zlib.h"           // ON_BinaryArchive needs z_stream definition.
#include "opennurbs_mapchan.h"
#include "opennurbs_rendering.h"
#include "opennurbs_archive.h"        // binary arcive objects for serialization to file, memory blocks, etc.
#include "opennurbs_massprop.h"       // mass properties values
#include "opennurbs_arc.h"            // simple 3d circular arc
#include "opennurbs_object.h"         // virtual base class for all openNURBS objects
#include "opennurbs_userdata.h"       // class for attaching persistent user information to openNURBS objects
#include "opennurbs_geometry.h"       // virtual base class for geometric objects
#include "opennurbs_curve.h"          // virtual parametric curve
#include "opennurbs_surface.h"        // virtual parametric surface
#include "opennurbs_viewport.h"       // simple renering projection
#include "opennurbs_texture_mapping.h" // texture coordinate evaluation
#include "opennurbs_texture.h"        // texture definition
#include "opennurbs_material.h"       // simple rendering material
#include "opennurbs_layer.h"          // layer definition
#include "opennurbs_linetype.h"          // linetype definition
#include "opennurbs_group.h"          // group name and index
#include "opennurbs_font.h"           // font name and index
#include "opennurbs_light.h"          // light
#include "opennurbs_pointgeometry.h"  // single point
#include "opennurbs_pointcloud.h"     // point set
#include "opennurbs_curveproxy.h"     // proxy curve provides a way to use an existing curve
#include "opennurbs_surfaceproxy.h"   // proxy surface provides a way to use another surface
#include "opennurbs_mesh.h"           // render mesh object
#include "opennurbs_pointgrid.h"      // point grid object
#include "opennurbs_linecurve.h"      // line as a paramtric curve object
#include "opennurbs_arccurve.h"       // arc/circle as a paramtric curve object
#include "opennurbs_polylinecurve.h"  // polyline as a paramtric curve object
#include "opennurbs_nurbscurve.h"     // NURBS curve
#include "opennurbs_polycurve.h"      // polycurve (composite curve)
#include "opennurbs_curveonsurface.h" // curve on surface (other kind of composite curve)
#include "opennurbs_nurbssurface.h"   // NURBS surface
#include "opennurbs_planesurface.h"   // plane surface
#include "opennurbs_revsurface.h"     // surface of revolution
#include "opennurbs_sumsurface.h"     // sum surface
#include "opennurbs_brep.h"           // boundary rep
#include "opennurbs_bitmap.h"         // Windows and OpenGL bitmaps
#include "opennurbs_instance.h"       // instance definitions and references
#include "opennurbs_3dm_properties.h"
#include "opennurbs_3dm_settings.h"
#include "opennurbs_3dm_attributes.h"
#include "opennurbs_annotation.h"     // used to serialize annotation objects
#include "opennurbs_annotation2.h"    // used to serialize annotation2 objects
#include "opennurbs_hatch.h"          // hatch geometry definitions
#include "opennurbs_dimstyle.h"       // dimstyle name and index
#include "opennurbs_hatch.h"          // hatch geometry definitions
#include "opennurbs_linetype.h"       // linetype pattern definitions
#include "opennurbs_objref.h"         // ON_ObjRef definition
#include "opennurbs_offsetsurface.h"  // ON_OffsetSurface definition
#include "opennurbs_detail.h"         // ON_Detail definition
#include "opennurbs_object_history.h"

#include "opennurbs_extensions.h"

#endif

#endif
@


1.7
log
@quell my openNURBS debugging statements
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs.h,v 1.6 2007/07/12 06:22:47 brlcad Exp $ */
d11 1
a11 1
//				
@


1.6
log
@include assert.h, thx louipc
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs.h,v 1.5 2007/06/18 20:19:56 jlowenz Exp $ */
d28 2
a29 2

#define ON_TRACE(m) std::cout << m << std::endl
@


1.5
log
@add some stupid simple debugging capability to openNURBS
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs.h,v 1.4 2007/05/31 18:51:12 brlcad Exp $ */
d28 1
@


1.4
log
@opennurbs_system.h has compiler checks for alloca and inclusion of alloca -- just needs another for sun.  not as robust as the lengths autoconf suggests, but then neither is using our brlcad_config.h in a public header.  need to retest on sun/irix to see if the ON_COMPILER_IRIX and ON_COMPILER_SUN work (else tweak the defines).
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs.h,v 1.3 2007/05/31 14:11:59 erikgreenwald Exp $ */
d27 3
@


1.3
log
@grab brlcad_config.h to make sure the right things are defined
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs.h,v 1.2 2007/05/31 13:42:09 erikgreenwald Exp $ */
a26 23
#include "brlcad_config.h"

/* 
 * cribbed from the autoconf manual, putting it here instead of the 17
 * files that SHOULD have it.
 */
#ifdef HAVE_ALLOCA_H
# include <alloca.h>
#elif defined __GNUC__
# define alloca __builtin_alloca
#elif defined _AIX
# define alloca __alloca
#elif defined _MSC_VER
# include <malloc.h>
# define alloca _alloca
#else
# include <stddef.h>
# ifdef  __cplusplus
extern "C"
# endif
void *alloca (size_t);
#endif

@


1.2
log
@cope with alloca issue in openNURBS
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs.h,v 1.1 2007/01/05 15:20:06 brlcad Exp $ */
d27 2
@


1.1
log
@initial import of the openNURBS initiative's nurbs toolkit.  the toolkit consists of code for reading/writing .3dm files used by Rhino as well as nurbs evaluation and other geometry processing facilities.  the library is being evaluated for .3dm support as well as potentially gutting the existing nurbs primitive and using openNURBS evaluation routines instead (still probably need to implement ray shot evaluation).  this is version 200612050 (aka 4.0).

this is also a C++ library, the first integration of an external C++ dependency into BRL-CAD.  additional support/infrastructure will be needed to support this in configure.  there's still, however, a policy/convention of "containment" so that C++ does not propagate into the existing BRL-CAD libraries.  any additions that utilize c++ still have to be entirely modular (and optional) for the time being.
@
text
@d1 1
a1 1
/* $Header: /src4/opennurbs/opennurbs.h 23    9/05/06 9:19a Dalelear $ */
d27 21
@

