head	1.8;
access;
symbols
	rel-7-10-4:1.7
	STABLE:1.7.0.2
	rel-7-10-2:1.7
	rel-7-10-0:1.3;
locks; strict;
comment	@ * @;


1.8
date	2007.09.14.15.21.45;	author erikgreenwald;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.13.00.14.42;	author poolio;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.04.03.07.56;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.01.15.38.33;	author erikgreenwald;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.31.18.51.12;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.16.12.26.08;	author d_rossberg;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.06.04.06.38;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.05.15.20.37;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.8
log
@removed trailing whitespace
@
text
@/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_system.h,v 1.7 2007/07/13 00:14:42 poolio Exp $ */
/* $NoKeywords: $ */
/*
//
// Copyright (c) 1993-2001 Robert McNeel & Associates. All rights reserved.
// Rhinoceros is a registered trademark of Robert McNeel & Assoicates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//
// For complete openNURBS copyright information see <http://www.opennurbs.org>.
//
////////////////////////////////////////////////////////////////
*/

/*
////////////////////////////////////////////////////////////////
//
//   Includes all system headers required to use the openNURBS toolkit.
//
////////////////////////////////////////////////////////////////
*/

#if !defined(OPENNURBS_SYSTEM_INC_)
#define OPENNURBS_SYSTEM_INC_


/* compiler choice */
#if defined(_MSC_VER)

/* using a Microsoft compiler */
#define ON_COMPILER_MSC

#if _MSC_VER >= 1300
#define ON_COMPILER_MSC1300
// If you are using VC7/.NET and are having trouble linking
// to functions that have whcar_t types in arguments, then
// read the documentation about the wchar_t type and
// the /Zc:wchar_t compiler option.

#if _MSC_VER >= 1400
#define ON_COMPILER_MSC1400

#if !defined(_CRT_SECURE_NO_DEPRECATE)
#define _CRT_SECURE_NO_DEPRECATE
// Visual Studio 2005 issues a C4996 warning for lots of
// standard C runtime functions that take string pointers.
// The _CRT_SECURE_NO_DEPRECATE suppresses these warnings.
// If you are an IT manager type and really care about these
// sorts of things, then comment out the define.
#endif

#endif

#endif

#endif

#if defined(__GNUC__) || defined(__GNUG_) || defined(__GNUC_) || defined(_GNU_SOURCE)
/* using Gnu's compiler */
#if !defined(ON_COMPILER_GNU)
#define ON_COMPILER_GNU
#endif
#endif

#if defined(__BORLANDC__)
/* using Borland's compiler */
#define ON_COMPILER_BORLAND
#endif

#if defined(sgi) || defined(__sgi)
#define ON_COMPILER_IRIX
#endif

#if defined(sun) || defined(__sun)
#define ON_COMPILER_SUN
#endif


/*
// Define ON_NO_WINDOWS if you are compiling on a Windows system but want
// to explicitly exclude inclusion of windows.h.
*/

#if !defined(ON_NO_WINDOWS)

/*
/////////////////////////////////////////////////////////////////////////
//
// Begin Windows system includes -
*/
#if defined(_WIN32) || defined(WIN32) || defined(_WIN64) || defined(WIN64)

/*
// From windows.h openNURBS only needs definitions of BOOL, TRUE,
// and FALSE, and a declarations of OutputDebugString(), and
// WideCharToMultiByte().  These
// defines disable the inclusion of most of the Windows garbage.
*/

#if !defined(_WINDOWS_)
/* windows.h has not been read - read just what we need */
#define WIN32_LEAN_AND_MEAN  /* Exclude rarely-used stuff from Windows headers */
#include <windows.h>
#endif

/*
// if ON_OS_WINDOWS is defined, debugging and error
// handing uses some Windows calls and ON_String
// includes resource support.
*/

#if !defined(ON_OS_WINDOWS)
#define ON_OS_WINDOWS
#endif

#if defined(ON_OS_WINDOWS) && !defined(NOGDI)
// ok to use Windows GDI RECT, LOGFONT, ... stucts.
#define ON_OS_WINDOWS_GDI
#endif

#if defined(_MSC_VER)
/* Microsoft's Visual C/C++ requires functions that use vargs to be declared with __cdecl */
#define ON_VARG_CDECL __cdecl
#endif

#endif

#endif

#include <stdlib.h>
#include <memory.h>
//#include <malloc.h>
#include <string.h>
#include <math.h>
#include <stdio.h>
#include <stdarg.h>
#include <float.h>
#include <time.h>
#include <limits.h>
#include <ctype.h>
#include <assert.h>

#if defined(ON_COMPILER_IRIX) || defined(ON_COMPILER_SUN)
#include <alloca.h>
#endif

#if !defined(ON_COMPILER_BORLAND)
#include <wchar.h>
#endif

#if defined(ON_OS_WINDOWS)
#include <io.h>
#include <sys\stat.h>
#include <tchar.h>

// alloca
#include <malloc.h>

// ON_CreateUuid calls Windows's ::UuidCreate() which
// is declared in Rpcdce.h and defined in Rpcrt4.lib.
#include <Rpc.h>

#endif

#if defined(ON_COMPILER_GNU)
#include <sys/types.h>
#include <sys/stat.h>
#include <wctype.h>
#endif

#if defined (cplusplus) || defined(_cplusplus) || defined(__cplusplus)
// C++ system includes

#if !defined(ON_CPLUSPLUS)
#define ON_CPLUSPLUS
#endif

#include <new> // for declaration of placement versions of new used in onClassArray<>.

#endif

#if !defined(ON_VARG_CDECL)
#define ON_VARG_CDECL
#endif

#if !defined(ON_OS_WINDOWS)

/* define wchar_t, BOOL, TRUE, FALSE, NULL */

#if !defined(BOOL) && !defined(_WINDEF_)
typedef int BOOL;
#endif

#if !defined(TRUE)
#define TRUE true
#endif

#if !defined(FALSE)
#define FALSE false
#endif

#if !defined(NULL)
#define NULL 0
#endif

#if !defined(_WCHAR_T_DEFINED)
// If you are using VC7/.NET and are having trouble linking
// to functions that have whcar_t types in arguments, then
// read the documentation about the wchar_t type and
// the /Zc:wchar_t compiler option.  Since

/* 16-bit wide character ("UNICODE") */

#if !defined(ON_COMPILER_MSC) && !defined(ON_COMPILER_GNU)
typedef unsigned short wchar_t;
#endif

#define _WCHAR_T_DEFINED
#endif

#endif


// As 64 bit compilers become more common, the definitions
// of the next 6 typedefs may need to vary with compiler.
// As much as possible, the size of runtime types is left
// up to the compiler so performance and ease of use can
// be maximized.  In the rare cases where it is critical
// to use an integer that is exactly 16 bits, 32 bits
// or 64 bits, the ON__INT16, ON__INT32, and ON__INT64
// typedefs are used.


#if defined(_WIN64) || defined(WIN64) || defined(__LP64__)
// 64 bit (8 byte) pointers
#define ON_SIZEOF_POINTER 8
#else
// 32 bit (4 byte) pointers
#define ON_SIZEOF_POINTER 4
#endif

// 16 bit integer
typedef short ON__INT16;

// 16 bit unsigned integer
typedef unsigned short ON__UINT16;

// 32 bit integer
typedef int ON__INT32;

// 32 bit unsigned integer
typedef unsigned int ON__UINT32;

#if defined(ON_COMPILER_GNU)

// GNU uses long long

// 64 bit integer
typedef long long ON__INT64;

// 64 bit unsigned integer
typedef unsigned long long ON__UINT64;

#else

// Microsoft uses __int64

// 64 bit integer
typedef __int64 ON__INT64;

// 64 bit unsigned integer
typedef unsigned __int64 ON__UINT64;

#endif


// on_vsnprintf()/on_vsnwprintf() call _vsnprintf()/_vsnwprintf() in Windows
// and something equivalent in other OSs

int on_vsnprintf( char *buffer, size_t count, const char *format, va_list argptr );

int on_vsnwprintf( wchar_t *buffer, size_t count, const wchar_t *format, va_list argptr );


#endif

@


1.7
log
@include assert.h moved from opennurbs_curve.h to opennurbs_system.h
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_system.h,v 1.6 2007/06/04 03:07:56 brlcad Exp $ */
d11 1
a11 1
//				
d37 1
a37 1
// If you are using VC7/.NET and are having trouble linking 
d76 1
a76 1
#if defined(sun) || defined(__sun) 
d91 1
a91 1
// Begin Windows system includes - 
d98 1
a98 1
// WideCharToMultiByte().  These 
d209 1
a209 1
// If you are using VC7/.NET and are having trouble linking 
d212 1
a212 1
// the /Zc:wchar_t compiler option.  Since 
d228 4
a231 4
// As much as possible, the size of runtime types is left 
// up to the compiler so performance and ease of use can 
// be maximized.  In the rare cases where it is critical 
// to use an integer that is exactly 16 bits, 32 bits 
@


1.6
log
@don't need SUNOS now that he found the right one
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_system.h,v 1.5 2007/06/01 15:38:33 erikgreenwald Exp $ */
d143 1
@


1.5
log
@fix for solaris/gcc (SUNOS is not defined, but __sun is)
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_system.h,v 1.4 2007/05/31 18:51:12 brlcad Exp $ */
d72 1
a72 1
#if defined(sgi)
d76 1
a76 1
#if defined(SUNOS) || defined(__sun) 
@


1.4
log
@opennurbs_system.h has compiler checks for alloca and inclusion of alloca -- just needs another for sun.  not as robust as the lengths autoconf suggests, but then neither is using our brlcad_config.h in a public header.  need to retest on sun/irix to see if the ON_COMPILER_IRIX and ON_COMPILER_SUN work (else tweak the defines).
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_system.h,v 1.3 2007/01/16 12:26:08 d_rossberg Exp $ */
d76 1
a76 1
#if defined(SUNOS)
@


1.3
log
@prepare openNURBS for win32-msvc runtime libraries branch
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_system.h,v 1.2 2007/01/06 04:06:38 brlcad Exp $ */
d72 9
d144 1
a144 1
#if defined(ON_COMPILER_IRIX)
@


1.2
log
@gcc 4 at least uses __GNU_C__, encourage ON_COMPILER_GNU to get defined
@
text
@d1 1
a1 1
/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_system.h,v 1.1 2007/01/05 15:20:37 brlcad Exp $ */
d148 3
@


1.1
log
@initial import of the openNURBS initiative's nurbs toolkit.  the toolkit consists of code for reading/writing .3dm files used by Rhino as well as nurbs evaluation and other geometry processing facilities.  the library is being evaluated for .3dm support as well as potentially gutting the existing nurbs primitive and using openNURBS evaluation routines instead (still probably need to implement ray shot evaluation).  this is version 200612050 (aka 4.0).

this is also a C++ library, the first integration of an external C++ dependency into BRL-CAD.  additional support/infrastructure will be needed to support this in configure.  there's still, however, a policy/convention of "containment" so that C++ does not propagate into the existing BRL-CAD libraries.  any additions that utilize c++ still have to be entirely modular (and optional) for the time being.
@
text
@d1 1
a1 1
/* $Header: /src4/opennurbs/opennurbs_system.h 17    11/15/06 11:30a Dalelear $ */
d60 1
a60 1
#if defined(__GNUG_) || defined(__GNUC_) || defined(_GNU_SOURCE)
@

