head	1.2;
access;
symbols
	rel-7-10-4:1.1
	STABLE:1.1.0.2
	rel-7-10-2:1.1
	rel-7-10-0:1.1;
locks; strict;
comment	@// @;


1.2
date	2007.09.14.15.21.45;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.05.15.20.36;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed trailing whitespace
@
text
@/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_pointgeometry.cpp,v 1.1 2007/01/05 15:20:36 brlcad Exp $ */
/* $NoKeywords: $ */
/*
//
// Copyright (c) 1993-2001 Robert McNeel & Associates. All rights reserved.
// Rhinoceros is a registered trademark of Robert McNeel & Assoicates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//
// For complete openNURBS copyright information see <http://www.opennurbs.org>.
//
////////////////////////////////////////////////////////////////
*/

#include "opennurbs.h"

ON_OBJECT_IMPLEMENT( ON_Point, ON_Geometry, "C3101A1D-F157-11d3-BFE7-0010830122F0" );

BOOL ON_Point::IsValid( ON_TextLog* text_log ) const
{
  return TRUE;
}

void ON_Point::Dump( ON_TextLog& dump ) const
{
  dump.Print("ON_Point: ");
  dump.Print(point);
  dump.Print("\n");
}

BOOL ON_Point::Write( ON_BinaryArchive& file ) const
{
  BOOL rc = file.Write3dmChunkVersion(1,0);
  if (rc) rc = file.WritePoint( point );
  return rc;
}

BOOL ON_Point::Read( ON_BinaryArchive& file )
{
  int major_version = 0;
  int minor_version = 0;
  BOOL rc = file.Read3dmChunkVersion(&major_version,&minor_version);
  if (rc && major_version==1) {
    // common to all 1.x versions
    rc = file.ReadPoint(point);
  }
  return rc;
}

ON::object_type ON_Point::ObjectType() const
{
  return ON::point_object;
}

int ON_Point::Dimension() const
{
  return 3;
}

BOOL ON_Point::GetBBox( double* boxmin, double* boxmax, BOOL bGrowBox ) const
{
  return ON_GetPointListBoundingBox( 3, 0, 1, 3, &point.x, boxmin, boxmax, bGrowBox?true:false );
}

bool ON_Point::IsDeformable() const
{
  return true;
}

bool ON_Point::MakeDeformable()
{
  return true;
}

BOOL ON_Point::Transform( const ON_Xform& xform )
{
  TransformUserData(xform);
  return ON_TransformPointList(3,0,1,3,&point.x,xform);
}

BOOL ON_Point::SwapCoordinates( int i, int j )
{
  return ON_SwapPointListCoordinates( 1, 3, &point.x, i, j );
}

ON_Point::ON_Point() : point(0.0,0.0,0.0)
{}

ON_Point::ON_Point(const ON_Point& src) : ON_Geometry(src), point(src.point)
{}

ON_Point::ON_Point(const ON_3dPoint& pt) : point(pt)
{}

ON_Point::ON_Point(double x,double y,double z) : point(x,y,z)
{}

ON_Point::~ON_Point()
{}

ON_Point& ON_Point::operator=(const ON_Point& src)
{
  if ( this != &src ) {
    ON_Geometry::operator=(src);
    point=src.point;
  }
  return *this;
}

ON_Point& ON_Point::operator=(const ON_3dPoint& pt)
{
  point=pt;
  return *this;
}

ON_Point::operator double*()
{
  return &point.x;
}

ON_Point::operator const double*() const
{
  return &point.x;
}

ON_Point::operator ON_3dPoint*()
{
  return &point;
}

ON_Point::operator const ON_3dPoint*() const
{
  return &point;
}

ON_Point::operator ON_3dPoint&()
{
  return point;
}

ON_Point::operator const ON_3dPoint&() const
{
  return point;
}
@


1.1
log
@initial import of the openNURBS initiative's nurbs toolkit.  the toolkit consists of code for reading/writing .3dm files used by Rhino as well as nurbs evaluation and other geometry processing facilities.  the library is being evaluated for .3dm support as well as potentially gutting the existing nurbs primitive and using openNURBS evaluation routines instead (still probably need to implement ray shot evaluation).  this is version 200612050 (aka 4.0).

this is also a C++ library, the first integration of an external C++ dependency into BRL-CAD.  additional support/infrastructure will be needed to support this in configure.  there's still, however, a policy/convention of "containment" so that C++ does not propagate into the existing BRL-CAD libraries.  any additions that utilize c++ still have to be entirely modular (and optional) for the time being.
@
text
@d1 1
a1 1
/* $Header: /src4/opennurbs/opennurbs_pointgeometry.cpp 2     6/29/05 4:08p Dalelear $ */
d11 1
a11 1
//				
d21 1
a21 1
BOOL ON_Point::IsValid( ON_TextLog* text_log ) const 
d88 1
a88 1
ON_Point::ON_Point() : point(0.0,0.0,0.0) 
d91 1
a91 1
ON_Point::ON_Point(const ON_Point& src) : ON_Geometry(src), point(src.point) 
d94 1
a94 1
ON_Point::ON_Point(const ON_3dPoint& pt) : point(pt) 
d100 1
a100 1
ON_Point::~ON_Point() 
d103 1
a103 1
ON_Point& ON_Point::operator=(const ON_Point& src) 
d112 1
a112 1
ON_Point& ON_Point::operator=(const ON_3dPoint& pt) 
d118 1
a118 1
ON_Point::operator double*() 
d123 1
a123 1
ON_Point::operator const double*() const 
d128 1
a128 1
ON_Point::operator ON_3dPoint*() 
d133 1
a133 1
ON_Point::operator const ON_3dPoint*() const 
d138 1
a138 1
ON_Point::operator ON_3dPoint&() 
d143 1
a143 1
ON_Point::operator const ON_3dPoint&() const 
@

