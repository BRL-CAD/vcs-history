head	1.2;
access;
symbols
	rel-7-10-4:1.1
	STABLE:1.1.0.2
	rel-7-10-2:1.1
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.09.14.15.21.44;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.05.15.20.28;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed trailing whitespace
@
text
@/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_linestyle.h,v 1.1 2007/01/05 15:20:28 brlcad Exp $ */
/* $NoKeywords: $ */
/*
//
// Copyright (c) 1993-2001 Robert McNeel & Associates. All rights reserved.
// Rhinoceros is a registered trademark of Robert McNeel & Assoicates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//
// For complete openNURBS copyright information see <http://www.opennurbs.org>.
//
////////////////////////////////////////////////////////////////
*/

#if !defined(OPENNURBS_LINESTYLE_INC_)
#define OPENNURBS_LINESTYLE_INC_


///////////////////////////////////////////////////////////////////////////////
//
// Class ON_DisplayMaterialRef
//

/*
Description:
  Objects can have per viewport display properties
  that override a viewport's default display
  properties.  These overrides are stored on
  ON_3dmObjectAttributes as a list of
  ON_DisplayMaterialRefs.

Example:
  For example, by default a viewport
  might display objects using a wireframe, but
  one special object may need to be shaded.
  In this case the special object would have
  a display material ref with the "wireframe"
  viewport's id and the id of a display material
  that specified shading.
*/
class ON_CLASS ON_DisplayMaterialRef
{
public:
  /*
  Description:
    Default constructor sets both ids to nil.
  */
  ON_DisplayMaterialRef();
  int Compare(const ON_DisplayMaterialRef& other) const;
  bool operator==(const ON_DisplayMaterialRef& other) const;
  bool operator!=(const ON_DisplayMaterialRef& other) const;
  bool operator<(const ON_DisplayMaterialRef& other) const;
  bool operator<=(const ON_DisplayMaterialRef& other) const;
  bool operator>(const ON_DisplayMaterialRef& other) const;
  bool operator>=(const ON_DisplayMaterialRef& other) const;

  // C++ default destructor, copy constructor and operator=
  // work fine.

  ON_UUID m_viewport_id;          // identifies the ON_Viewport
                                  //   If nil, then the display material
                                  //   will be used in all viewports
                                  //   that are not explictly referenced
                                  //   in other ON_DisplayMaterialRefs.

  ON_UUID m_display_material_id;  // id used to find display attributes

  // For Rhino V4 the per detail visibility attribute is implemented
  // through a display material reference on an object. This is ONLY
  // for for detail viewports and only for V4. Keep this uuid around
  // so the per detail attributes in future versions of Rhino can be
  // implemented a different way.
  // {1403A7E4-E7AD-4a01-A2AA-41DAE6BE7ECB}
  static const ON_UUID m_invisible_in_detail_id;
};


//////////////////////////////////////////////////////////////////////
// class ON_LinetypeSegment

class ON_CLASS ON_LinetypeSegment
{
public:
  ON_LinetypeSegment();

  bool operator==( const ON_LinetypeSegment& src) const;
  bool operator!=( const ON_LinetypeSegment& src) const;

  // For a curve to be drawn starting at the start point
  // and ending at the endpoint, the first segment
  // in the pattern must be a stLine type
  enum eSegType
  {
    stLine,
    stSpace,
  };

  void Dump( class ON_TextLog& ) const;

  // do not add read/write functions to this class

  double m_length; // length in millimeters on printed output
  eSegType m_seg_type;
};

#endif
@


1.1
log
@initial import of the openNURBS initiative's nurbs toolkit.  the toolkit consists of code for reading/writing .3dm files used by Rhino as well as nurbs evaluation and other geometry processing facilities.  the library is being evaluated for .3dm support as well as potentially gutting the existing nurbs primitive and using openNURBS evaluation routines instead (still probably need to implement ray shot evaluation).  this is version 200612050 (aka 4.0).

this is also a C++ library, the first integration of an external C++ dependency into BRL-CAD.  additional support/infrastructure will be needed to support this in configure.  there's still, however, a policy/convention of "containment" so that C++ does not propagate into the existing BRL-CAD libraries.  any additions that utilize c++ still have to be entirely modular (and optional) for the time being.
@
text
@d1 1
a1 1
/* $Header: /src4/opennurbs/opennurbs_linestyle.h 9     9/26/06 4:25p Dalelear $ */
d11 1
a11 1
//				
d24 1
a24 1
// 
d30 2
a31 2
  properties.  These overrides are stored on 
  ON_3dmObjectAttributes as a list of 
d33 1
a33 1
  
@

