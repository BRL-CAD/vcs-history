head	1.2;
access;
symbols
	rel-7-10-4:1.1
	STABLE:1.1.0.2
	rel-7-10-2:1.1
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.09.14.15.21.40;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.05.15.20.24;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed trailing whitespace
@
text
@/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_detail.h,v 1.1 2007/01/05 15:20:24 brlcad Exp $ */
/* $NoKeywords: $ */
/*
//
// Copyright (c) 1993-2006 Robert McNeel & Associates. All rights reserved.
// Rhinoceros is a registered trademark of Robert McNeel & Assoicates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//
// For complete openNURBS copyright information see <http://www.opennurbs.org>.
//
////////////////////////////////////////////////////////////////
*/

#if !defined(ON_DETAIL_OBJECTY_INC_)
#define ON_DETAIL_OBJECTY_INC_

class ON_CLASS ON_DetailView : public ON_Geometry
{
  ON_OBJECT_DECLARE(ON_DetailView);

public:
  ON_DetailView();
  ~ON_DetailView();

  // C++ defaults for copy constructor and
  // operator= work fine.

  //////////////////////////////////////////////////////
  //
  // virtual ON_Object overrides
  //
  void MemoryRelocate();

  BOOL IsValid( ON_TextLog* text_log = NULL ) const;

  void Dump( ON_TextLog& ) const;

  unsigned int SizeOf() const;

  BOOL Write(
         ON_BinaryArchive& binary_archive
       ) const;

  BOOL Read(
         ON_BinaryArchive& binary_archive
       );

  ON::object_type ObjectType() const; // returns ON::detail_object

  //////////////////////////////////////////////////////
  //
  // virtual ON_Geometry overrides
  // The m_boundary determines all bounding boxes
  //
  int Dimension() const;

  BOOL GetBBox(
         double* boxmin,
         double* boxmax,
         int bGrowBox = false
         ) const;

	bool GetTightBoundingBox(
			ON_BoundingBox& tight_bbox,
      int bGrowBox = false,
			const ON_Xform* xform = 0
      ) const;

  BOOL Transform( const ON_Xform& xform );

  // m_page_per_model_ratio is the ratio of page length / model length
  // where both lengths are in the same unit system
  // (ex. 1/4" on page = 1' in model = 0.25/12 = 0.02083)
  // (    1mm on page  = 1m in model = 1/1000  = 0.001)
  // If m_page_per_model_ratio > 0.0, then the detail
  // is drawn using the specified scale.
  double m_page_per_model_ratio;

  // A view with ON_3dmView::m_view_type = ON::nested_view_type
  // This field is used for IO purposes only.  Runtime detail
  // view projection information is on CRhDetailViewObject.
  ON_3dmView m_view;

  // 2d curve in page layout coordinates in mm
  // (0,0) = lower left corner of page
  ON_NurbsCurve m_boundary;
};



#endif

@


1.1
log
@initial import of the openNURBS initiative's nurbs toolkit.  the toolkit consists of code for reading/writing .3dm files used by Rhino as well as nurbs evaluation and other geometry processing facilities.  the library is being evaluated for .3dm support as well as potentially gutting the existing nurbs primitive and using openNURBS evaluation routines instead (still probably need to implement ray shot evaluation).  this is version 200612050 (aka 4.0).

this is also a C++ library, the first integration of an external C++ dependency into BRL-CAD.  additional support/infrastructure will be needed to support this in configure.  there's still, however, a policy/convention of "containment" so that C++ does not propagate into the existing BRL-CAD libraries.  any additions that utilize c++ still have to be entirely modular (and optional) for the time being.
@
text
@d1 1
a1 1
/* $Header: /src4/opennurbs/opennurbs_detail.h 4     4/19/06 9:44a A-steve $ */
d11 1
a11 1
//				
d56 1
a56 1
  // The m_boundary determines all bounding boxes 
d66 2
a67 2
	bool GetTightBoundingBox( 
			ON_BoundingBox& tight_bbox, 
@

