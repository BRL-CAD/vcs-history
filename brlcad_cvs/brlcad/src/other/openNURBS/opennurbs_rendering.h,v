head	1.2;
access;
symbols
	rel-7-10-4:1.1
	STABLE:1.1.0.2
	rel-7-10-2:1.1
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.09.14.15.21.45;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.05.15.20.36;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed trailing whitespace
@
text
@/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_rendering.h,v 1.1 2007/01/05 15:20:36 brlcad Exp $ */
/* $NoKeywords: $ */
/*
//
// Copyright (c) 1993-2005 Robert McNeel & Associates. All rights reserved.
// Rhinoceros is a registered trademark of Robert McNeel & Assoicates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//
// For complete openNURBS copyright information see <http://www.opennurbs.org>.
//
////////////////////////////////////////////////////////////////
*/

#if !defined(OPENNURBS_RENDERING_INC_)
#define OPENNURBS_RENDERING_INC_


class ON_CLASS ON_RenderingAttributes
{
public:
  ON_RenderingAttributes();
  void Default();
  int Compare( const ON_RenderingAttributes& other ) const;
  bool Write( ON_BinaryArchive& archive ) const;
  bool Read( ON_BinaryArchive& archive );

  bool IsValid( ON_TextLog* text_log ) const;


  const ON_MaterialRef* MaterialRef( const ON_UUID& plugin_id ) const;

  ON_ClassArray<ON_MaterialRef> m_materials;
};

class ON_CLASS ON_ObjectRenderingAttributes : public ON_RenderingAttributes
{
public:
  ON_ObjectRenderingAttributes();
  void Default();
  int Compare( const ON_ObjectRenderingAttributes& other ) const;
  bool Write( ON_BinaryArchive& archive ) const;
  bool Read( ON_BinaryArchive& archive );

  bool IsValid( ON_TextLog* text_log ) const;

  /*
  Description:
    Update mapping channel transformations.
  Parameters:
    xform - [in]
      Transformation applied to parent object.
  Returns:
    True is successful.  False if there are mapping channels
    and xform cannot be inverted.
  */
  bool Transform( const ON_Xform& xform );

  /*
  Parameters:
    plugin_id - [in]
  Returns:
    A pointer to the plug-in's mapping reference, if there
    is one. Otherwise NULL is returned.
  */
  const ON_MappingRef* MappingRef(
    const ON_UUID& plugin_id
    ) const;

  /*
  Parameters:
    plugin_id - [in]
  Returns:
    If a mapping ref exists, it is returned.  Otherwise
    one is added.
  */
  ON_MappingRef* AddMappingRef(
    const ON_UUID& plugin_id
    );

  /*
  Parameters:
    plugin_id - [in]
  Returns:
    If a mapping ref exists, it is returned.  Otherwise
    one is added.
  */
  bool DeleteMappingRef(
    const ON_UUID& plugin_id
    );


  /*
  Parameters:
    plugin_id - [in]
    mapping_channel_id - [in]
    mapping_id - [in]
      ON_TextureMapping id
  Returns:
    A pointer to the plug-in's mapping channel, if there
    is one. Otherwise NULL is returned.
  */
  const ON_MappingChannel* MappingChannel(
    const ON_UUID& plugin_id,
    int mapping_channel_id
    ) const;

  const ON_MappingChannel* MappingChannel(
    const ON_UUID& plugin_id,
    const ON_UUID& mapping_id
    ) const;


  /*
  Parameters:
    plugin_id - [in]
    mapping_channel_id - [in]
    mapping_id - [in]
      ON_TextureMapping id
  Returns:
    True if the mapping channel was added or a pefect
    match already existed.  False if a mapping channel
    with a different mapping_id already exists for this
    plug-in and channel.
  */
  bool AddMappingChannel(
    const ON_UUID& plugin_id,
    int mapping_channel_id,
    const ON_UUID& mapping_id
    );

  /*
  Parameters:
    plugin_id - [in]
    mapping_channel_id - [in]
    mapping_id - [in]
      ON_TextureMapping id
  Returns:
    True if a matching mapping channel was deleted.
  */
  bool DeleteMappingChannel(
    const ON_UUID& plugin_id,
    int mapping_channel_id
    );

  bool DeleteMappingChannel(
    const ON_UUID& plugin_id,
    const ON_UUID& mapping_id
    );

  /*
  Parameters:
    plugin_id - [in]
    old_mapping_channel_id - [in]
    new_mapping_channel_id - [in]
  Returns:
    True if a matching mapping channel was found and changed.
  */
  bool ChangeMappingChannel(
    const ON_UUID& plugin_id,
    int old_mapping_channel_id,
    int new_mapping_channel_id
    );

  // Use AddMappingRef() or AddMappingChannel() if you
  // want to add an element to this array.
  //
  // Every mapping ref in this array must have
  // a distinct value of ON_MappingRef.m_plugin_id.
  ON_ClassArray<ON_MappingRef> m_mappings;

  bool m_bCastsShadows;    // default is true
  bool m_bReceivesShadows; // default is true
  bool m_bReserved1;
  bool m_bReserved2;
};

#if defined(ON_DLL_TEMPLATE)
// This stuff is here because of a limitation in the way Microsoft
// handles templates and DLLs.  See Microsoft's knowledge base
// article ID Q168958 for details.
#pragma warning( push )
#pragma warning( disable : 4231 )
ON_DLL_TEMPLATE template class ON_CLASS ON_ClassArray<ON_RenderingAttributes>;
ON_DLL_TEMPLATE template class ON_CLASS ON_ClassArray<ON_ObjectRenderingAttributes>;
#pragma warning( pop )
#endif


#endif

@


1.1
log
@initial import of the openNURBS initiative's nurbs toolkit.  the toolkit consists of code for reading/writing .3dm files used by Rhino as well as nurbs evaluation and other geometry processing facilities.  the library is being evaluated for .3dm support as well as potentially gutting the existing nurbs primitive and using openNURBS evaluation routines instead (still probably need to implement ray shot evaluation).  this is version 200612050 (aka 4.0).

this is also a C++ library, the first integration of an external C++ dependency into BRL-CAD.  additional support/infrastructure will be needed to support this in configure.  there's still, however, a policy/convention of "containment" so that C++ does not propagate into the existing BRL-CAD libraries.  any additions that utilize c++ still have to be entirely modular (and optional) for the time being.
@
text
@d1 1
a1 1
/* $Header: /src4/opennurbs/opennurbs_rendering.h 5     11/29/06 10:34a Dalelear $ */
d11 1
a11 1
//				
d68 2
a69 2
  const ON_MappingRef* MappingRef( 
    const ON_UUID& plugin_id 
d79 2
a80 2
  ON_MappingRef* AddMappingRef( 
    const ON_UUID& plugin_id 
d90 2
a91 2
  bool DeleteMappingRef( 
    const ON_UUID& plugin_id 
d105 2
a106 2
  const ON_MappingChannel* MappingChannel( 
    const ON_UUID& plugin_id, 
d110 2
a111 2
  const ON_MappingChannel* MappingChannel( 
    const ON_UUID& plugin_id, 
d124 1
a124 1
    match already existed.  False if a mapping channel 
d129 1
a129 1
    const ON_UUID& plugin_id, 
d144 1
a144 1
    const ON_UUID& plugin_id, 
d149 1
a149 1
    const ON_UUID& plugin_id, 
d162 1
a162 1
    const ON_UUID& plugin_id, 
d167 1
a167 1
  // Use AddMappingRef() or AddMappingChannel() if you 
d182 1
a182 1
// handles templates and DLLs.  See Microsoft's knowledge base 
@

