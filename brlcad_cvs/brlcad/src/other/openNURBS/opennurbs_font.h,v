head	1.2;
access;
symbols
	rel-7-10-4:1.1
	STABLE:1.1.0.2
	rel-7-10-2:1.1
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.09.14.15.21.41;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.05.15.20.26;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed trailing whitespace
@
text
@/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_font.h,v 1.1 2007/01/05 15:20:26 brlcad Exp $ */
/* $NoKeywords: $ */
/*
//
// Copyright (c) 1993-2005 Robert McNeel & Associates. All rights reserved.
// Rhinoceros is a registered trademark of Robert McNeel & Assoicates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//
// For complete openNURBS copyright information see <http://www.opennurbs.org>.
//
////////////////////////////////////////////////////////////////
*/

#if !defined(OPENNURBS_FONT_INC_)
#define OPENNURBS_FONT_INC_

class ON_CLASS ON_Font : public ON_Object
{
  ON_OBJECT_DECLARE(ON_Font);
public:
  ON_Font();
  ~ON_Font();
  // C++ default copy construction and operator= work fine.

#if defined(ON_OS_WINDOWS_GDI)
  ON_Font( const LOGFONT& logfont );
  ON_Font& operator=( const LOGFONT& logfont );
#endif

  //////////////////////////////////////////////////////////////////////
  //
  // ON_Object overrides

  /*
  Description:
    Tests an object to see if its data members are correctly
    initialized.
  Parameters:
    text_log - [in] if the object is not valid and text_log
        is not NULL, then a brief englis description of the
        reason the object is not valid is appened to the log.
        The information appended to text_log is suitable for
        low-level debugging purposes by programmers and is
        not intended to be useful as a high level user
        interface tool.
  Returns:
    @@untitled table
    TRUE     object is valid
    FALSE    object is invalid, uninitialized, etc.
  Remarks:
    Overrides virtual ON_Object::IsValid
  */
  BOOL IsValid( ON_TextLog* text_log = NULL ) const;

  // virtual
  void Dump( ON_TextLog& ) const; // for debugging

  // virtual
  BOOL Write(
         ON_BinaryArchive&  // serialize definition to binary archive
       ) const;

  // virtual
  BOOL Read(
         ON_BinaryArchive&  // restore definition from binary archive
       );

  // virtual
  ON_UUID ModelObjectId() const;

  //////////////////////////////////////////////////////////////////////
  //
  // Interface

  enum
  {

#if defined(ON_ON_WINDOWS_GDI)

    // Windows GDI facename length
    face_name_size = LF_FACESIZE+1,

    // Windows GDI font weights
    bold_weight   = FW_BOLD,
    medium_weight = FW_MEDIUM,
    normal_weight = FW_NORMAL,
    light_weight  = FW_LIGHT,

    // Windows GDI character sets
    default_charset = DEFAULT_CHARSET,
    symbol_charset  = SYMBOL_CHARSET,

#else

    face_name_size = 65, // must be >= 33

    bold_weight   = 700,
    medium_weight = 500,
    normal_weight = 400,
    light_weight  = 300,

    default_charset = 1,
    symbol_charset  = 2,

#endif

    normal_font_height = 256
  };

  // Ratio of linefeed to character height (1.6)
  static
  const double m_default_linefeed_ratio;

  static
  const int m_metrics_char; // ASCII code of character to used
                            // to get runtime "default" glyph
                            // metrics. (Currently an "I").

  /*
  Returns:
    True if the font's character set should be SYMBOL_CHARSET;
  */
  static
  bool IsSymbolFontFaceName(
          const wchar_t* facename
          );

  void SetFontName( const wchar_t* );
  void SetFontName( const char* );

  void GetFontName( ON_wString& ) const;
  const wchar_t* FontName() const;

  void SetFontIndex(int);
  int FontIndex() const;

  /*
  Returns:
    The ratio (height of linefeed)/(height of I).
  */
  double LinefeedRatio() const;

  void SetLinefeedRatio( double linefeed_ratio );

  bool SetFontFaceName( const wchar_t* );
  bool SetFontFaceName( const char* );

  void GetFontFaceName( ON_wString& ) const;
  const wchar_t* FontFaceName() const;

  int FontWeight() const;
  void SetFontWeight( int);

  bool IsItalic() const;
  void SetIsItalic( bool );

  bool IsBold() const;
  void SetBold( bool );

  void Defaults();

  /*
  Returns:
    Height of the 'I' character when the font is drawn
    with m_logfont.lfHeight = ON_Font::normal_font_height.
  */
  int HeightOfI() const;

  /*
  Returns:
    Height of a linefeed when the font is drawn
    with m_logfont.lfHeight = ON_Font::normal_font_height.
  */
  int HeightOfLinefeed() const;

  /*
    Description:
      Returns the ratio of the height of a typical upper case letter
      to the height of a whole character cell.

  Parameters:
    none

  Returns:
    double - ratio of Windows Font Height / m_HeightOfH
  */
  double AscentRatio() const;

#if defined(ON_OS_WINDOWS_GDI)
  bool SetLogFont( const LOGFONT& logfont );
  const LOGFONT& LogFont() const;
#endif

public:
  ON_wString m_font_name;      // Name of this font in the Rhino UI
  int        m_font_weight;    // Same as m_logfont.lfWeight
  bool       m_font_italic;    // Same as m_logfont.lfItalic
  double     m_linefeed_ratio; // defaults to static s_linefeed_ratio.
  int        m_font_index;     // font index in Rhino font table
  ON_UUID    m_font_id;
  wchar_t    m_facename[face_name_size]; // same as m_logfont.lfFaceName (

public:
#if defined(ON_OS_WINDOWS_GDI)
  LOGFONT m_logfont;
#endif

private:
  // volitile - can be changed by ON_Font::HeightOfI() const.
  int m_I_height; // height of the 'I' character when the font is drawn
                  // with m_logfont.lfHeight = 256.
};

#endif
@


1.1
log
@initial import of the openNURBS initiative's nurbs toolkit.  the toolkit consists of code for reading/writing .3dm files used by Rhino as well as nurbs evaluation and other geometry processing facilities.  the library is being evaluated for .3dm support as well as potentially gutting the existing nurbs primitive and using openNURBS evaluation routines instead (still probably need to implement ray shot evaluation).  this is version 200612050 (aka 4.0).

this is also a C++ library, the first integration of an external C++ dependency into BRL-CAD.  additional support/infrastructure will be needed to support this in configure.  there's still, however, a policy/convention of "containment" so that C++ does not propagate into the existing BRL-CAD libraries.  any additions that utilize c++ still have to be entirely modular (and optional) for the time being.
@
text
@d1 1
a1 1
/* $Header: /src4/opennurbs/opennurbs_font.h 8     3/14/06 11:38a Dalelear $ */
d11 1
a11 1
//				
d45 3
a47 3
        The information appended to text_log is suitable for 
        low-level debugging purposes by programmers and is 
        not intended to be useful as a high level user 
d78 2
a79 2
  enum 
  { 
d111 1
a111 1
  }; 
d114 1
a114 1
  static 
d127 1
a127 1
  bool IsSymbolFontFaceName( 
d133 1
a133 1
  
d150 1
a150 1
  
d167 1
a167 1
    Height of the 'I' character when the font is drawn 
d174 1
a174 1
    Height of a linefeed when the font is drawn 
d181 1
a181 1
      Returns the ratio of the height of a typical upper case letter 
d204 1
a204 1
  wchar_t    m_facename[face_name_size]; // same as m_logfont.lfFaceName ( 
d213 1
a213 1
  int m_I_height; // height of the 'I' character when the font is drawn 
@

