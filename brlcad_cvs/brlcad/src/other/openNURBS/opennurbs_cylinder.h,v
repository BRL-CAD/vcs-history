head	1.2;
access;
symbols
	rel-7-10-4:1.1
	STABLE:1.1.0.2
	rel-7-10-2:1.1
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.09.14.15.21.40;	author erikgreenwald;	state Exp;
branches;
next	1.1;

1.1
date	2007.01.05.15.20.24;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed trailing whitespace
@
text
@/* $Header: /cvsroot/brlcad/brlcad/src/other/openNURBS/opennurbs_cylinder.h,v 1.1 2007/01/05 15:20:24 brlcad Exp $ */
/* $NoKeywords: $ */
/*
//
// Copyright (c) 1993-2001 Robert McNeel & Associates. All rights reserved.
// Rhinoceros is a registered trademark of Robert McNeel & Assoicates.
//
// THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
// ALL IMPLIED WARRANTIES OF FITNESS FOR ANY PARTICULAR PURPOSE AND OF
// MERCHANTABILITY ARE HEREBY DISCLAIMED.
//
// For complete openNURBS copyright information see <http://www.opennurbs.org>.
//
////////////////////////////////////////////////////////////////
*/

#if !defined(OPENNURBS_CYLINDER_INC_)
#define OPENNURBS_CYLINDER_INC_

class ON_NurbsSurface;
class ON_RevSurface;
class ON_Brep;

/*
Description:
  ON_Cylinder is a right circular cylinder.
*/
class ON_CLASS ON_Cylinder
{
public:
  ON_Cylinder(); // zeros all fields - cylinder is invalid

  ON_Cylinder( // infinte cylinder
    const ON_Circle&  // point on the bottom plane
    );

  ON_Cylinder( // infinte cylinder
    const ON_Circle&,  // point on the bottom plane
    double             // height
    );

  ~ON_Cylinder();

  bool Create(
    const ON_Circle&  // point on the bottom plane
    );

  bool Create(
    const ON_Circle&,  // point on the bottom plane
    double               // height
    );

  bool IsValid() const; // returns TRUE if all fields contain reasonable
                        // information and equation jibes with point and Z.

  bool IsFinite() const; // returns TRUE if the cylinder is finite
                         // (height[0] != height[1]) and FALSE if the
                         // cylinder is infinite.

  const ON_3dVector& Axis() const;
  const ON_3dPoint& Center() const;
  double Height() const; // returns 0 for infinite cylinder
  ON_Circle CircleAt(
        double // linear parameter
        ) const;
  ON_Line LineAt(
        double // angular parameter
        ) const;

  // evaluate parameters and return point
  ON_3dPoint PointAt(
    double, // angular parameter [0,2pi]
    double  // linear parameter (height from base circle's plane)
    ) const;
  ON_3dPoint NormalAt(
    double, // angular parameter [0,2pi]
    double  // linear parameter (height from base circle's plane)
    ) const;

  // returns parameters of point on cylinder that is closest to given point
  bool ClosestPointTo(
         ON_3dPoint,
         double*, // angular parameter [0,2pi]
         double*  // linear parameter (height from base circle's plane)
         ) const;
  // returns point on cylinder that is closest to given point
  ON_3dPoint ClosestPointTo(
         ON_3dPoint
         ) const;

  // For intersections see ON_Intersect();

  // rotate cylinder about its origin
  bool Rotate(
        double,               // sin(angle)
        double,               // cos(angle)
        const ON_3dVector&  // axis of rotation
        );
  bool Rotate(
        double,               // angle in radians
        const ON_3dVector&  // axis of rotation
        );

  // rotate cylinder about a point and axis
  bool Rotate(
        double,               // sin(angle)
        double,               // cos(angle)
        const ON_3dVector&, // axis of rotation
        const ON_3dPoint&   // center of rotation
        );
  bool Rotate(
        double,              // angle in radians
        const ON_3dVector&, // axis of rotation
        const ON_3dPoint&   // center of rotation
        );

  bool Translate(
        const ON_3dVector&
        );

  // parameterization of NURBS surface does not match cylinder's transcendental paramaterization
  int GetNurbForm( ON_NurbsSurface& ) const; // returns 0=failure, 2=success

  /*
  Description:
    Creates a surface of revolution definition of the cylinder.
  Parameters:
    srf - [in] if not NULL, then this srf is used.
  Result:
    A surface of revolution or NULL if the cylinder is not
    valid or is infinite.
  */
  ON_RevSurface* RevSurfaceForm( ON_RevSurface* srf = NULL ) const;

public: // members left public
  // base circle
  ON_Circle  circle;


  // If height[0] = height[1], the cylinder is infinite,
  // Otherwise, height[0] < height[1] and the center of
  // the "bottom" cap is
  //
  //          circle.plane.origin + height[0]*circle.plane.zaxis,
  //
  // and the center of the top cap is
  //
  //          circle.plane.origin + height[1]*circle.plane.zaxis.
  double height[2];
};

#endif
@


1.1
log
@initial import of the openNURBS initiative's nurbs toolkit.  the toolkit consists of code for reading/writing .3dm files used by Rhino as well as nurbs evaluation and other geometry processing facilities.  the library is being evaluated for .3dm support as well as potentially gutting the existing nurbs primitive and using openNURBS evaluation routines instead (still probably need to implement ray shot evaluation).  this is version 200612050 (aka 4.0).

this is also a C++ library, the first integration of an external C++ dependency into BRL-CAD.  additional support/infrastructure will be needed to support this in configure.  there's still, however, a policy/convention of "containment" so that C++ does not propagate into the existing BRL-CAD libraries.  any additions that utilize c++ still have to be entirely modular (and optional) for the time being.
@
text
@d1 1
a1 1
/* $Header: /src4/opennurbs/opennurbs_cylinder.h 2     5/13/05 10:36a Dalelear $ */
d11 1
a11 1
//				
d63 1
a63 1
  ON_Circle CircleAt( 
d66 1
a66 1
  ON_Line LineAt( 
d81 2
a82 2
  bool ClosestPointTo( 
         ON_3dPoint, 
d87 2
a88 2
  ON_3dPoint ClosestPointTo( 
         ON_3dPoint 
d130 1
a130 1
    A surface of revolution or NULL if the cylinder is not 
d139 1
a139 1
  
d142 1
a142 1
  // the "bottom" cap is 
d146 1
a146 1
  // and the center of the top cap is 
@

