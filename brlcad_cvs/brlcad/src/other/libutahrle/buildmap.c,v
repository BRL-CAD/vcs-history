head	14.4;
access;
symbols
	rel-7-10-4:14.3
	STABLE:14.3.0.4
	stable-branch:14.2
	rel-7-10-2:14.3
	rel-7-10-0:14.3
	rel-7-8-4:14.3
	rel-7-8-2:14.3
	rel-7-8-0:14.3
	trimnurbs-branch:14.3.0.2
	help:14.3
	temp_tag:14.2
	bobWinPort-20051223-freeze:14.2
	postmerge-20051223-bobWinPort:14.2
	premerge-20051223-bobWinPort:14.2
	rel-7-6-6:14.2
	rel-7-6-4:14.2
	rel-7-6-2:14.2
	rel-7-6-branch:14.2.0.6
	rel-7-6-0:14.2
	rel-7-4-2:14.2
	rel-7-4-branch:14.2.0.4
	bobWinPort:14.2.0.2
	rel-7-4-0:14.2
	rel-7-2-6:14.2
	rel-7-2-4:14.2
	rel-7-2-2:14.2
	rel-7-2-0:14.2
	rel-7-0-4:14.2
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.4
	rel-7-0-branch:1.4.0.2
	rel-7-0:1.4;
locks; strict;
comment	@ * @;


14.4
date	2007.09.14.15.21.38;	author erikgreenwald;	state Exp;
branches;
next	14.3;

14.3
date	2006.01.28.00.36.29;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2005.01.23.14.29.55;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.30;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.07.22.19.56;	author kermit;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.52;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.18.30.55;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.14.54.04;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.4
log
@removed trailing whitespace
@
text
@/*
 * This software is copyrighted as noted below.  It may be freely copied,
 * modified, and redistributed, provided that the copyright notice is
 * preserved on all copies.
 *
 * There is no warranty or other guarantee of fitness for this software,
 * it is provided solely "as is".  Bug reports or fixes may be sent
 * to the author, who may or may not act on them as he desires.
 *
 * You may not include this software in a program or other software product
 * without supplying the source, or without informing the end-user that the
 * source is available for no extra charge.
 *
 * If you modify this software, you should include a notice giving the
 * name of the person performing the modification, the date of modification,
 * and the reason for such modification.
 */
/*
 * buildmap.c - Build a color map from the RLE file color map.
 *
 * Author:	Spencer W. Thomas
 * 		Computer Science Dept.
 * 		University of Utah
 * Date:	Sat Jan 24 1987
 * Copyright (c) 1987, University of Utah
 */

#include <stdlib.h>
#include <stdio.h>
#include "rle.h"
#include <math.h>

/*****************************************************************
 * TAG( buildmap )
 *
 * Returns a color map that can easily be used to map the pixel values in
 * an RLE file.  Map is built from the color map in the input file.
 * Inputs:
 * 	the_hdr:	rle_hdr structure containing color map.
 *	minmap:		Minimum number of channels in output map.
 *	orig_gamma:	Adjust color map for this image gamma value
 *			(1.0 means no adjustment).
 *	new_gamma:	Gamma of new display.
 * Outputs:
 * 	Returns an array of pointers to arrays of rle_pixels.  The array
 *	of pointers contains max(ncolors, ncmap) elements, each
 *	array of pixels contains 2^cmaplen elements.  The pixel arrays
 *	should be considered read-only.
 * Assumptions:
 * 	[None]
 * Algorithm:
 *	Ensure that there are at least ncolors rows in the map, and
 *	that each has at least 256 elements in it (largest map that can
 *	be addressed by an rle_pixel).
 */
rle_pixel **
buildmap( the_hdr, minmap, orig_gamma, new_gamma )
rle_hdr *the_hdr;
int minmap;
double orig_gamma;
double new_gamma;
{
    rle_pixel ** cmap, * gammap;
    double gamma;
    register int i, j;
    int maplen, cmaplen, nmap;

    if ( the_hdr->ncmap == 0 )	/* make identity map */
    {
	nmap = (minmap < the_hdr->ncolors) ? the_hdr->ncolors : minmap;
	cmap = (rle_pixel **)malloc( nmap * sizeof(rle_pixel *) );
	cmap[0] = (rle_pixel *)malloc( nmap * 256 * sizeof(rle_pixel) );
	for ( j = 1; j < nmap; j++ )
	    cmap[j] = cmap[j-1] + 256;
	for ( i = 0; i < 256; i++ )
	    for ( j = 0; j < nmap; j++ )
		cmap[j][i] = i;
	maplen = 256;
    }
    else			/* make map from the_hdr */
    {
	/* Map is at least 256 long */
	cmaplen = (1 << the_hdr->cmaplen);
	if ( cmaplen < 256 )
	    maplen = 256;
	else
	    maplen = cmaplen;

	/* Nmap is max( minmap, the_hdr->ncmap, the_hdr->ncolors ). */
	nmap = minmap;
	if ( nmap < the_hdr->ncmap )
	    nmap = the_hdr->ncmap;
	if ( nmap < the_hdr->ncolors )
	    nmap = the_hdr->ncolors;

	/* Allocate memory for the map and secondary pointers. */
	cmap = (rle_pixel **)malloc( nmap * sizeof(rle_pixel *) );
	cmap[0] = (rle_pixel *)malloc( nmap * maplen * sizeof(rle_pixel) );
	for ( i = 1; i < nmap; i++ )
	    cmap[i] = cmap[0] + i * maplen;

	/* Fill it in. */
	for ( i = 0; i < maplen; i++ )
	{
	    for ( j = 0; j < the_hdr->ncmap; j++ )
		if ( i < cmaplen )
		    cmap[j][i] = the_hdr->cmap[j*cmaplen + i] >> 8;
		else
		    cmap[j][i] = i;
	    for ( ; j < nmap; j++ )
		cmap[j][i] = cmap[j-1][i];
	}
    }

    /* Gamma compensate if requested */
    if ( orig_gamma == 0 )
    {
	char *v;
	if ( (v = rle_getcom( "image_gamma", the_hdr )) != NULL )
	{
	    orig_gamma = atof( v );
	    /* Protect against bogus information */
	    if ( orig_gamma == 0.0 )
		orig_gamma = 1.0;
	    else
		orig_gamma = 1.0 / orig_gamma;
	}
	else if ( (v = rle_getcom( "display_gamma", the_hdr )) != NULL)
	{
	    orig_gamma = atof( v );
	    /* Protect */
	    if ( orig_gamma == 0.0 )
		orig_gamma = 1.0;
	}
	else
	    orig_gamma = 1.0;
    }

    /* Now, compensate for the gamma of the new display, too. */
    if ( new_gamma != 0.0 )
	gamma = orig_gamma / new_gamma;
    else
	gamma = orig_gamma;

    if ( gamma != 1.0 )
    {
	gammap = (rle_pixel *)malloc( 256 * sizeof(rle_pixel) );
	for ( i = 0; i < 256; i++ )
	    gammap[i] = (int)(0.5 + 255.0 * pow( i / 255.0, gamma ));
	for ( i = 0; i < nmap; i++ )
	    for ( j = 0; j < maplen; j++ )
		cmap[i][j] = gammap[cmap[i][j]];
	free( gammap );
    }

    return cmap;
}
@


14.3
log
@header cleanup, atof() requires stdlib.h on altix/posix, fix 64-bitness
@
text
@d3 1
a3 1
 * modified, and redistributed, provided that the copyright notice is 
d5 1
a5 1
 * 
d11 1
a11 1
 * without supplying the source, or without informing the end-user that the 
d18 1
a18 1
/* 
d20 1
a20 1
 * 
d35 1
a35 1
 * 
d46 1
a46 1
 *	of pointers contains max(ncolors, ncmap) elements, each 
d95 1
a95 1
	
d101 1
a101 1
	
d114 1
a114 1
    
@


14.2
log
@update from a patched 3.0 to urt 3.1b1 (library)
@
text
@d28 1
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@a27 3
#include "common.h"

#include <stdlib.h>
d29 1
a31 4
#include "machine.h"
#include "rle.h"


d56 5
a60 1
buildmap(rle_hdr *the_hdr, int minmap, double orig_gamma, double new_gamma)
d63 1
a63 1
    double gamma2;
d110 1
a110 1
		cmap[j][i] = cmap[j-i][i];
d140 1
a140 1
	gamma2 = orig_gamma / new_gamma;
d142 1
a142 1
	gamma2 = orig_gamma;
d144 1
a144 1
    if ( gamma2 != 1.0 )
d148 1
a148 1
	    gammap[i] = (int)(0.5 + 255.0 * pow( i / 255.0, gamma2 ));
@


1.4
log
@Added missing <stdlib.h> headers for malloc, calloc (for IA64 architecture).
@
text
@@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d30 1
a30 2


@


1.2
log
@externs.h is no longer needed and is going away .. config.h can be used instead if needed
@
text
@d28 1
a28 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Sources that are external to BRL-CAD are moved from the top level to src/other/.
@
text
@a37 1
#include "externs.h"
@

