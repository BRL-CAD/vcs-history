head	14.2;
access;
symbols
	rel-7-10-4:14.1
	STABLE:14.1.0.10
	stable-branch:14.1
	rel-7-10-2:14.1
	rel-7-10-0:14.1
	rel-7-8-4:14.1
	rel-7-8-2:14.1
	rel-7-8-0:14.1
	trimnurbs-branch:14.1.0.8
	help:14.1
	temp_tag:14.1
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.1
	premerge-20051223-bobWinPort:14.1
	rel-7-6-6:14.1
	rel-7-6-4:14.1
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1;
locks; strict;
comment	@ * @;


14.2
date	2007.09.14.15.21.38;	author erikgreenwald;	state Exp;
branches;
next	14.1;

14.1
date	2005.01.23.14.29.55;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.2
log
@removed trailing whitespace
@
text
@/*
 * This software is copyrighted as noted below.  It may be freely copied,
 * modified, and redistributed, provided that the copyright notice is
 * preserved on all copies.
 *
 * There is no warranty or other guarantee of fitness for this software,
 * it is provided solely "as is".  Bug reports or fixes may be sent
 * to the author, who may or may not act on them as he desires.
 *
 * You may not include this software in a program or other software product
 * without supplying the source, or without informing the end-user that the
 * source is available for no extra charge.
 *
 * If you modify this software, you should include a notice giving the
 * name of the person performing the modification, the date of modification,
 * and the reason for such modification.
 */
/*
 * rle_error.c - Error message stuff for URT.
 *
 * Author:	Spencer W. Thomas
 * 		EECS Dept.
 * 		University of Michigan
 * Date:	Mon Mar  2 1992
 * Copyright (c) 1992, University of Michigan
 */
#ifndef lint
static char rcs_id[] = "$Header: /cvsroot/brlcad/brlcad/src/other/libutahrle/rle_error.c,v 14.1 2005/01/23 14:29:55 brlcad Exp $";
#endif

#include "rle.h"

/*****************************************************************
 * TAG( rle_alloc_error )
 *
 * Print memory allocation error message and exit.
 * Inputs:
 * 	pgm:		Name of this program.
 * 	name:		Name of memory trying to be allocated.
 * Outputs:
 * 	Prints message and exits.
 *
 * Returns int because it's used in a conditional expression.
 */
int
rle_alloc_error( pgm, name )
CONST_DECL char *pgm, *name;
{
    if ( name )
	fprintf( stderr, "%s: memory allocation failed.\n", pgm );
    else
	fprintf( stderr, "%s: memory allocation failed (no space for %s).\n",
		 pgm, name );

    exit( RLE_NO_SPACE );

    /* Will some compilers bitch about this because they know exit
     * doesn't return??
     */
    return 0;
}

/*****************************************************************
 * TAG( rle_get_error )
 *
 * Print an error message for the return code from rle_get_setup
 * Inputs:
 * 	code:		The return code from rle_get_setup.
 *	pgmname:	Name of this program (argv[0]).
 *	fname:		Name of the input file.
 * Outputs:
 * 	Prints an error message on standard output.
 *	Returns code.
 */
int
rle_get_error( code, pgmname, fname )
int code;
CONST_DECL char *pgmname;
CONST_DECL char *fname;
{
    if (! fname || strcmp( fname, "-" ) == 0 )
	fname = "Standard Input";

    switch( code )
    {
    case RLE_SUCCESS:		/* success */
	break;

    case RLE_NOT_RLE:		/* Not an RLE file */
	fprintf( stderr, "%s: %s is not an RLE file\n",
		 pgmname, fname );
	break;

    case RLE_NO_SPACE:			/* malloc failed */
	fprintf( stderr,
		 "%s: Malloc failed reading header of file %s\n",
		 pgmname, fname );
	break;

    case RLE_EMPTY:
	fprintf( stderr, "%s: %s is an empty file\n",
		 pgmname, fname );
	break;

    case RLE_EOF:
	fprintf( stderr,
		 "%s: RLE header of %s is incomplete (premature EOF)\n",
		 pgmname, fname );
	break;

    default:
	fprintf( stderr, "%s: Error encountered reading header of %s\n",
		 pgmname, fname );
	break;
    }
    return code;
}


@


14.1
log
@update from a patched 3.0 to urt 3.1b1 (library)
@
text
@d3 1
a3 1
 * modified, and redistributed, provided that the copyright notice is 
d5 1
a5 1
 * 
d11 1
a11 1
 * without supplying the source, or without informing the end-user that the 
d18 1
a18 1
/* 
d20 1
a20 1
 * 
d28 1
a28 1
static char rcs_id[] = "$Header: /l/spencer/src/urt/lib/RCS/rle_error.c,v 3.0.1.1 1992/03/04 19:33:27 spencer Exp $";
d35 1
a35 1
 * 
d65 1
a65 1
 * 
@

