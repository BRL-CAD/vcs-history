head	1.3;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.2
	rel-7-10-2:1.2
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.3
date	2007.11.06.21.38.50;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.07.04.17.45;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.02.21.49.55;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@tk 8.5a6->8.5b1
@
text
@/*
 * tkMacOSXFont.h --
 *
 *	Contains the Macintosh implementation of the platform-independant
 *	font package interface.
 *
 * Copyright (c) 1990-1994 The Regents of the University of California.
 * Copyright (c) 1994-1997 Sun Microsystems, Inc.
 * Copyright 2001, Apple Computer, Inc.
 * Copyright (c) 2006-2007 Daniel A. Steffen <das@@users.sourceforge.net>
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tkMacOSXFont.h,v 1.5 2007/04/23 21:24:33 das Exp $
 */

#ifndef TKMACOSXFONT_H
#define TKMACOSXFONT_H 1

#include "tkFont.h"

#ifndef _TKMACINT
#include "tkMacOSXInt.h"
#endif

/*
 * Function prototypes
 */

MODULE_SCOPE void TkMacOSXInitControlFontStyle(Tk_Font tkfont,
	ControlFontStylePtr fsPtr);

#endif /*TKMACOSXFONT_H*/
@


1.2
log
@upgrade to tcl/tk 8.5a6 (from 8.5a5) .. includes even more (extensive) aquatk fixes/enhancements
@
text
@@


1.1
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@d4 2
a5 2
 *      Private functions and structs exported from tkMacOSXFont.c
 *      for use in ATSU specific extensions.
d7 4
a10 1
 * Copyright 2002-2004 Benjamin Riefenstahl, Benjamin.Riefenstahl@@epost.de
d15 1
a15 1
 * RCS: @@(#) $Id: tkMacOSXFont.h,v 1.4 2006/04/28 06:02:48 das Exp $
d18 2
a19 2
#ifndef	TKMACOSXFONT_H
#define	TKMACOSXFONT_H	1
a27 73
 * Switches
 */

#define TK_MAC_USE_QUARZ 1

/*
 * Types
 */

/*
 * The following structure represents our Macintosh-specific implementation
 * of a font object.
 */

typedef struct {
    TkFont font;                /* Stuff used by generic font package.  Must
                                 * be first in structure. */

    /*
     * The ATSU view of the font and other text properties.  Used for drawing
     * and measuring.
     */

    ATSUFontID atsuFontId;      /* == FMFont. */
    ATSUTextLayout atsuLayout;  /* ATSU layout object, representing the whole
                                 * text that ATSU sees with some option
                                 * bits. */
    ATSUStyle atsuStyle;        /* ATSU style object, representing a run of
                                 * text with the same properties. */

    /*
     * The QuickDraw view of the font.  Used to configure controls.
     */

    FMFontFamily qdFont;        /* == FMFontFamilyId, Carbon replacement for
                                 * QD face numbers. */
    short qdSize;               /* Font size in points. */
    short qdStyle;              /* QuickDraw style bits. */
} TkMacOSXFont;


#if TK_MAC_USE_QUARZ

/*
 * To use Quarz drawing we need some additional context.  FIXME: We would
 * have liked to use the similar functions from tkMacOSXDraw.c to do this
 * (TkMacOSXSetUpCGContext(), etc), but a) those don't quite work for us
 * (e.g. we can't use a simple upside-down coordinate system transformation,
 * as we don't want upside-down characters ;-), and b) we don't have the
 * necessary context information (MacDrawable), that we need as parameter for
 * those functions.  So I just cobbled together a limited edition, getting
 * the necessary parameters from the current QD GraphPort.
 */

typedef struct {
    CGContextRef cgContext;     /* Quarz context. */
    CGrafPtr graphPort;         /* QD graph port to which this belongs.
                                 * Needed for releasing cgContext. */
    Rect portRect;              /* Cached size of port. */
} TkMacOSXFontDrawingContext;

#else /* ! TK_MAC_USE_QUARZ */

/*
 * Just a dummy, so we don't have to #ifdef the parameter lists of functions
 * that use this.
 */

typedef struct {} DrawingContext;

#endif /* ? TK_MAC_USE_QUARZ */

/*
d31 2
a32 12
MODULE_SCOPE void	TkMacOSXLayoutSetString(const TkMacOSXFont * fontPtr,
			    const TkMacOSXFontDrawingContext *drawingContextPtr,
			    const UniChar * uchars, int ulen);
MODULE_SCOPE void	TkMacOSXInitControlFontStyle(Tk_Font tkfont,
			    ControlFontStylePtr fsPtr);

#if TK_MAC_USE_QUARZ
MODULE_SCOPE void	TkMacOSXQuarzStartDraw(
			    TkMacOSXFontDrawingContext * contextPtr);
MODULE_SCOPE void	TkMacOSXQuarzEndDraw(
			    TkMacOSXFontDrawingContext * contextPtr);
#endif /* TK_MAC_USE_QUARZ */
d34 1
a34 1
#endif	/*TKMACOSXFONT_H*/
@

