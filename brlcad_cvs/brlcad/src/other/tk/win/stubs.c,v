head	1.2;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.2
	rel-7-10-2:1.2
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.05.07.04.17.50;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.02.21.50.04;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@upgrade to tcl/tk 8.5a6 (from 8.5a5) .. includes even more (extensive) aquatk fixes/enhancements
@
text
@#include "tk.h"

/*
 * Undocumented Xlib internal function
 */

int
_XInitImageFuncPtrs(
    XImage *image)
{
    return 0;
}

/*
 * From Xutil.h
 */

void
XSetWMClientMachine(
    Display *display,
    Window w,
    XTextProperty *text_prop)
{
}

Status
XStringListToTextProperty(
    char **list,
    int count,
    XTextProperty *text_prop_return)
{
    return (Status) NULL;
}

/*
 * From Xlib.h
 */

void
XChangeProperty(
    Display *display,
    Window w,
    Atom property,
    Atom type,
    int format,
    int mode,
    _Xconst unsigned char *data,
    int nelements)
{
}

Cursor
XCreateGlyphCursor(
    Display *display,
    Font source_font,
    Font mask_font,
    unsigned int source_char,
    unsigned int mask_char,
    XColor *foreground_color,
    XColor *background_color)
{
    return 1;
}

XIC
XCreateIC(void)
{
    return NULL;
}

Cursor
XCreatePixmapCursor(
    Display *display,
    Pixmap source,
    Pixmap mask,
    XColor *foreground_color,
    XColor *background_color,
    unsigned int x,
    unsigned int y)
{
    return (Cursor) NULL;
}

void
XDeleteProperty(
    Display *display,
    Window w,
    Atom property)
{
}

void
XDestroyIC(
    XIC ic)
{
}

Bool
XFilterEvent(
    XEvent *event,
    Window window)
{
    return 0;
}

void
XForceScreenSaver(
    Display *display,
    int mode)
{
}

void
XFreeCursor(
    Display *display,
    Cursor cursor)
{
}

GContext
XGContextFromGC(
    GC gc)
{
    return (GContext) NULL;
}

char *
XGetAtomName(
    Display *display,
    Atom atom)
{
    return NULL;
}

int
XGetWindowAttributes(
    Display *display,
    Window w,
    XWindowAttributes *window_attributes_return)
{
    return 0;
}

Status
XGetWMColormapWindows(
    Display *display,
    Window w,
    Window **windows_return,
    int *count_return)
{
    return (Status) NULL;
}

int
XIconifyWindow(
    Display *display,
    Window w,
    int screen_number)
{
    return 0;
}

XHostAddress *
XListHosts(
    Display *display,
    int *nhosts_return,
    Bool *state_return)
{
    return NULL;
}

int
XLookupColor(
    Display *display,
    Colormap colormap,
    _Xconst char *color_name,
    XColor *exact_def_return,
    XColor *screen_def_return)
{
    return 0;
}

void
XNextEvent(
    Display *display,
    XEvent *event_return)
{
}

void
XPutBackEvent(
    Display *display,
    XEvent *event)
{
}

void
XQueryColors(
    Display *display,
    Colormap colormap,
    XColor *defs_in_out,
    int ncolors)
{
}

int
XQueryTree(
    Display *display,
    Window w,
    Window *root_return,
    Window *parent_return,
    Window **children_return,
    unsigned int *nchildren_return)
{
    return 0;
}

void
XRefreshKeyboardMapping(
    XMappingEvent *event_map)
{
}

Window
XRootWindow(
    Display *display,
    int screen_number)
{
    return (Window) NULL;
}

void
XSelectInput(
    Display *display,
    Window w,
    long event_mask)
{
}

int
XSendEvent(
    Display *display,
    Window w,
    Bool propagate,
    long event_mask,
    XEvent *event_send)
{
    return 0;
}

void
XSetCommand(
    Display *display,
    Window w,
    CONST char **argv,
    int argc)
{
}

XErrorHandler
XSetErrorHandler(
    XErrorHandler handler)
{
    return NULL;
}

void
XSetIconName(
    Display *display,
    Window w,
    _Xconst char *icon_name)
{
}

void
XSetWindowBackground(
    Display *display,
    Window w,
    unsigned long background_pixel)
{
}

void
XSetWindowBackgroundPixmap(
    Display *display,
    Window w,
    Pixmap background_pixmap)
{
}

void
XSetWindowBorder(
    Display *display,
    Window w,
    unsigned long border_pixel)
{
}

void
XSetWindowBorderPixmap(
    Display *display,
    Window w,
    Pixmap border_pixmap)
{
}

void
XSetWindowBorderWidth(
    Display *display,
    Window w,
    unsigned int width)
{
}

void
XSetWindowColormap(
    Display *display,
    Window w,
    Colormap colormap)
{
}

Bool
XTranslateCoordinates(
    Display *display,
    Window src_w,
    Window dest_w,
    int src_x,
    int src_y,
    int *dest_x_return,
    int *dest_y_return,
    Window *child_return)
{
    return 0;
}

void
XWindowEvent(
    Display *display,
    Window w,
    long event_mask,
    XEvent *event_return)
{
}

int
XWithdrawWindow(
    Display *display,
    Window w,
    int screen_number)
{
    return 0;
}

int
XmbLookupString(
    XIC ic,
    XKeyPressedEvent *event,
    char *buffer_return,
    int bytes_buffer,
    KeySym *keysym_return,
    Status *status_return)
{
    return 0;
}

int
XGetWindowProperty(
    Display *display,
    Window w,
    Atom property,
    long long_offset,
    long long_length,
    Bool delete,
    Atom req_type,
    Atom *actual_type_return,
    int *actual_format_return,
    unsigned long *nitems_return,
    unsigned long *bytes_after_return,
    unsigned char **prop_return)
{
    *actual_type_return = None;
    *actual_format_return = 0;
    *nitems_return = 0;
    *bytes_after_return = 0;
    *prop_return = NULL;
    return BadValue;
}
@


1.1
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@d7 3
a9 1
int _XInitImageFuncPtrs(XImage *image)
d19 4
a22 4
XSetWMClientMachine(display, w, text_prop)
    Display* display;
    Window w;
    XTextProperty* text_prop;
d27 4
a30 4
XStringListToTextProperty(list, count, text_prop_return)
    char** list;
    int count;
    XTextProperty* text_prop_return;
d40 9
a48 9
XChangeProperty(display, w, property, type, format, mode, data, nelements)
    Display* display;
    Window w;
    Atom property;
    Atom type;
    int format;
    int mode;
    _Xconst unsigned char* data;
    int nelements;
d53 8
a60 9
XCreateGlyphCursor(display, source_font, mask_font, source_char, mask_char,
	foreground_color, background_color)
    Display* display;
    Font source_font;
    Font mask_font;
    unsigned int source_char;
    unsigned int mask_char;
    XColor* foreground_color;
    XColor* background_color;
d66 1
a66 1
XCreateIC()
d72 8
a79 9
XCreatePixmapCursor(display, source, mask, foreground_color,
	background_color, x, y)
    Display* display;
    Pixmap source;
    Pixmap mask;
    XColor* foreground_color;
    XColor* background_color;
    unsigned int x;
    unsigned int y;
d85 4
a88 4
XDeleteProperty(display, w, property)
    Display* display;
    Window w;
    Atom property;
d93 2
a94 2
XDestroyIC(ic)
    XIC ic;
d99 3
a101 3
XFilterEvent(event, window)
    XEvent* event;
    Window window;
d106 4
a109 3
extern void XForceScreenSaver(display, mode)
    Display* display;
    int mode;
d114 3
a116 3
XFreeCursor(display, cursor)
    Display* display;
    Cursor cursor;
d121 2
a122 2
XGContextFromGC(gc)
    GC gc;
d128 3
a130 3
XGetAtomName(display, atom)
    Display* display;
    Atom atom;
d136 4
a139 4
XGetWindowAttributes(display, w, window_attributes_return)
    Display* display;
    Window w;
    XWindowAttributes* window_attributes_return;
d145 5
a149 5
XGetWMColormapWindows(display, w, windows_return, count_return)
    Display* display;
    Window w;
    Window** windows_return;
    int* count_return;
d155 4
a158 4
XIconifyWindow(display, w, screen_number)
    Display* display;
    Window w;
    int screen_number;
d164 4
a167 4
XListHosts(display, nhosts_return, state_return)
    Display* display;
    int* nhosts_return;
    Bool* state_return;
d173 6
a178 7
XLookupColor(display, colormap, color_name, exact_def_return,
	screen_def_return)
    Display* display;
    Colormap colormap;
    _Xconst char* color_name;
    XColor* exact_def_return;
    XColor* screen_def_return;
d184 3
a186 3
XNextEvent(display, event_return)
    Display* display;
    XEvent* event_return;
d191 3
a193 3
XPutBackEvent(display, event)
    Display* display;
    XEvent* event;
d198 5
a202 5
XQueryColors(display, colormap, defs_in_out, ncolors)
    Display* display;
    Colormap colormap;
    XColor* defs_in_out;
    int ncolors;
d207 7
a213 8
XQueryTree(display, w, root_return, parent_return, children_return,
	nchildren_return)
    Display* display;
    Window w;
    Window* root_return;
    Window* parent_return;
    Window** children_return;
    unsigned int* nchildren_return;
d219 2
a220 2
XRefreshKeyboardMapping(event_map)
    XMappingEvent* event_map;
d225 3
a227 3
XRootWindow(display, screen_number)
    Display* display;
    int screen_number;
d233 4
a236 4
XSelectInput(display, w, event_mask)
    Display* display;
    Window w;
    long event_mask;
d241 6
a246 6
XSendEvent(display, w, propagate, event_mask, event_send)
    Display* display;
    Window w;
    Bool propagate;
    long event_mask;
    XEvent* event_send;
d252 5
a256 5
XSetCommand(display, w, argv, argc)
    Display* display;
    Window w;
    CONST char** argv;
    int argc;
d261 2
a262 2
XSetErrorHandler (handler)
    XErrorHandler handler;
d268 4
a271 4
XSetIconName(display, w, icon_name)
    Display* display;
    Window w;
    _Xconst char* icon_name;
d276 4
a279 4
XSetWindowBackground(display, w, background_pixel)
    Display* display;
    Window w;
    unsigned long background_pixel;
d284 4
a287 4
XSetWindowBackgroundPixmap(display, w, background_pixmap)
    Display* display;
    Window w;
    Pixmap background_pixmap;
d292 4
a295 4
XSetWindowBorder(display, w, border_pixel)
    Display* display;
    Window w;
    unsigned long border_pixel;
d300 4
a303 4
XSetWindowBorderPixmap(display, w, border_pixmap)
    Display* display;
    Window w;
    Pixmap border_pixmap;
d308 4
a311 4
XSetWindowBorderWidth(display, w, width)
    Display* display;
    Window w;
    unsigned int width;
d316 4
a319 4
XSetWindowColormap(display, w, colormap)
    Display* display;
    Window w;
    Colormap colormap;
d324 9
a332 10
XTranslateCoordinates(display, src_w, dest_w, src_x, src_y, dest_x_return,
	dest_y_return, child_return)
    Display* display;
    Window src_w;
    Window dest_w;
    int src_x;
    int src_y;
    int* dest_x_return;
    int* dest_y_return;
    Window* child_return;
d338 5
a342 5
XWindowEvent(display, w, event_mask, event_return)
    Display* display;
    Window w;
    long event_mask;
    XEvent* event_return;
d347 4
a350 4
XWithdrawWindow(display, w, screen_number)
    Display* display;
    Window w;
    int screen_number;
d356 7
a362 8
XmbLookupString(ic, event, buffer_return, bytes_buffer, keysym_return,
	status_return)
    XIC ic;
    XKeyPressedEvent* event;
    char* buffer_return;
    int bytes_buffer;
    KeySym* keysym_return;
    Status* status_return;
d368 13
a380 15
XGetWindowProperty(display, w, property, long_offset, long_length, delete,
	req_type, actual_type_return, actual_format_return, nitems_return,
	bytes_after_return, prop_return)
    Display* display;
    Window w;
    Atom property;
    long long_offset;
    long long_length;
    Bool delete;
    Atom req_type;
    Atom* actual_type_return;
    int* actual_format_return;
    unsigned long* nitems_return;
    unsigned long* bytes_after_return;
    unsigned char** prop_return;
@

