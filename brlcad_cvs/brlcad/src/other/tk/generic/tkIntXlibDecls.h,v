head	1.4;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.2
	rel-7-10-2:1.2
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.4
date	2007.11.06.21.38.41;	author erikgreenwald;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.14.15.21.58;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.07.04.17.40;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.02.21.49.46;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tk 8.5a6->8.5b1
@
text
@/*
 * tkIntXlibDecls.h --
 *
 *	This file contains the declarations for all platform dependent
 *	unsupported functions that are exported by the Tk library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 * All rights reserved.
 *
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.21 2006/12/18 16:42:46 dgp Exp $
 */

#ifndef _TKINTXLIBDECLS
#define _TKINTXLIBDECLS

#include "X11/Xutil.h"

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tkInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifdef __WIN32__
#ifndef XSetDashes_TCL_DECLARED
#define XSetDashes_TCL_DECLARED
/* 0 */
EXTERN void		XSetDashes (Display * display, GC gc, 
				int dash_offset, _Xconst char * dash_list, 
				int n);
#endif
#ifndef XGetModifierMapping_TCL_DECLARED
#define XGetModifierMapping_TCL_DECLARED
/* 1 */
EXTERN XModifierKeymap * XGetModifierMapping (Display * d);
#endif
#ifndef XCreateImage_TCL_DECLARED
#define XCreateImage_TCL_DECLARED
/* 2 */
EXTERN XImage *		XCreateImage (Display * d, Visual * v, 
				unsigned int ui1, int i1, int i2, char * cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
				int i4);
#endif
#ifndef XGetImage_TCL_DECLARED
#define XGetImage_TCL_DECLARED
/* 3 */
EXTERN XImage *		XGetImage (Display * d, Drawable dr, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, 
				unsigned long ul, int i3);
#endif
#ifndef XGetAtomName_TCL_DECLARED
#define XGetAtomName_TCL_DECLARED
/* 4 */
EXTERN char *		XGetAtomName (Display * d, Atom a);
#endif
#ifndef XKeysymToString_TCL_DECLARED
#define XKeysymToString_TCL_DECLARED
/* 5 */
EXTERN char *		XKeysymToString (KeySym k);
#endif
#ifndef XCreateColormap_TCL_DECLARED
#define XCreateColormap_TCL_DECLARED
/* 6 */
EXTERN Colormap		XCreateColormap (Display * d, Window w, Visual * v, 
				int i);
#endif
#ifndef XCreatePixmapCursor_TCL_DECLARED
#define XCreatePixmapCursor_TCL_DECLARED
/* 7 */
EXTERN Cursor		XCreatePixmapCursor (Display * d, Pixmap p1, 
				Pixmap p2, XColor * x1, XColor * x2, 
				unsigned int ui1, unsigned int ui2);
#endif
#ifndef XCreateGlyphCursor_TCL_DECLARED
#define XCreateGlyphCursor_TCL_DECLARED
/* 8 */
EXTERN Cursor		XCreateGlyphCursor (Display * d, Font f1, Font f2, 
				unsigned int ui1, unsigned int ui2, 
				XColor * x1, XColor * x2);
#endif
#ifndef XGContextFromGC_TCL_DECLARED
#define XGContextFromGC_TCL_DECLARED
/* 9 */
EXTERN GContext		XGContextFromGC (GC g);
#endif
#ifndef XListHosts_TCL_DECLARED
#define XListHosts_TCL_DECLARED
/* 10 */
EXTERN XHostAddress *	XListHosts (Display * d, int * i, Bool * b);
#endif
#ifndef XKeycodeToKeysym_TCL_DECLARED
#define XKeycodeToKeysym_TCL_DECLARED
/* 11 */
EXTERN KeySym		XKeycodeToKeysym (Display * d, unsigned int k, int i);
#endif
#ifndef XStringToKeysym_TCL_DECLARED
#define XStringToKeysym_TCL_DECLARED
/* 12 */
EXTERN KeySym		XStringToKeysym (_Xconst char * c);
#endif
#ifndef XRootWindow_TCL_DECLARED
#define XRootWindow_TCL_DECLARED
/* 13 */
EXTERN Window		XRootWindow (Display * d, int i);
#endif
#ifndef XSetErrorHandler_TCL_DECLARED
#define XSetErrorHandler_TCL_DECLARED
/* 14 */
EXTERN XErrorHandler	XSetErrorHandler (XErrorHandler x);
#endif
#ifndef XIconifyWindow_TCL_DECLARED
#define XIconifyWindow_TCL_DECLARED
/* 15 */
EXTERN Status		XIconifyWindow (Display * d, Window w, int i);
#endif
#ifndef XWithdrawWindow_TCL_DECLARED
#define XWithdrawWindow_TCL_DECLARED
/* 16 */
EXTERN Status		XWithdrawWindow (Display * d, Window w, int i);
#endif
#ifndef XGetWMColormapWindows_TCL_DECLARED
#define XGetWMColormapWindows_TCL_DECLARED
/* 17 */
EXTERN Status		XGetWMColormapWindows (Display * d, Window w, 
				Window ** wpp, int * ip);
#endif
#ifndef XAllocColor_TCL_DECLARED
#define XAllocColor_TCL_DECLARED
/* 18 */
EXTERN Status		XAllocColor (Display * d, Colormap c, XColor * xp);
#endif
#ifndef XBell_TCL_DECLARED
#define XBell_TCL_DECLARED
/* 19 */
EXTERN void		XBell (Display * d, int i);
#endif
#ifndef XChangeProperty_TCL_DECLARED
#define XChangeProperty_TCL_DECLARED
/* 20 */
EXTERN void		XChangeProperty (Display * d, Window w, Atom a1, 
				Atom a2, int i1, int i2, 
				_Xconst unsigned char * c, int i3);
#endif
#ifndef XChangeWindowAttributes_TCL_DECLARED
#define XChangeWindowAttributes_TCL_DECLARED
/* 21 */
EXTERN void		XChangeWindowAttributes (Display * d, Window w, 
				unsigned long ul, XSetWindowAttributes * x);
#endif
#ifndef XClearWindow_TCL_DECLARED
#define XClearWindow_TCL_DECLARED
/* 22 */
EXTERN void		XClearWindow (Display * d, Window w);
#endif
#ifndef XConfigureWindow_TCL_DECLARED
#define XConfigureWindow_TCL_DECLARED
/* 23 */
EXTERN void		XConfigureWindow (Display * d, Window w, 
				unsigned int i, XWindowChanges * x);
#endif
#ifndef XCopyArea_TCL_DECLARED
#define XCopyArea_TCL_DECLARED
/* 24 */
EXTERN void		XCopyArea (Display * d, Drawable dr1, Drawable dr2, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4);
#endif
#ifndef XCopyPlane_TCL_DECLARED
#define XCopyPlane_TCL_DECLARED
/* 25 */
EXTERN void		XCopyPlane (Display * d, Drawable dr1, Drawable dr2, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4, 
				unsigned long ul);
#endif
#ifndef XCreateBitmapFromData_TCL_DECLARED
#define XCreateBitmapFromData_TCL_DECLARED
/* 26 */
EXTERN Pixmap		XCreateBitmapFromData (Display * display, Drawable d, 
				_Xconst char * data, unsigned int width, 
				unsigned int height);
#endif
#ifndef XDefineCursor_TCL_DECLARED
#define XDefineCursor_TCL_DECLARED
/* 27 */
EXTERN void		XDefineCursor (Display * d, Window w, Cursor c);
#endif
#ifndef XDeleteProperty_TCL_DECLARED
#define XDeleteProperty_TCL_DECLARED
/* 28 */
EXTERN void		XDeleteProperty (Display * d, Window w, Atom a);
#endif
#ifndef XDestroyWindow_TCL_DECLARED
#define XDestroyWindow_TCL_DECLARED
/* 29 */
EXTERN void		XDestroyWindow (Display * d, Window w);
#endif
#ifndef XDrawArc_TCL_DECLARED
#define XDrawArc_TCL_DECLARED
/* 30 */
EXTERN void		XDrawArc (Display * d, Drawable dr, GC g, int i1, 
				int i2, unsigned int ui1, unsigned int ui2, 
				int i3, int i4);
#endif
#ifndef XDrawLines_TCL_DECLARED
#define XDrawLines_TCL_DECLARED
/* 31 */
EXTERN void		XDrawLines (Display * d, Drawable dr, GC g, 
				XPoint * x, int i1, int i2);
#endif
#ifndef XDrawRectangle_TCL_DECLARED
#define XDrawRectangle_TCL_DECLARED
/* 32 */
EXTERN void		XDrawRectangle (Display * d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2);
#endif
#ifndef XFillArc_TCL_DECLARED
#define XFillArc_TCL_DECLARED
/* 33 */
EXTERN void		XFillArc (Display * d, Drawable dr, GC g, int i1, 
				int i2, unsigned int ui1, unsigned int ui2, 
				int i3, int i4);
#endif
#ifndef XFillPolygon_TCL_DECLARED
#define XFillPolygon_TCL_DECLARED
/* 34 */
EXTERN void		XFillPolygon (Display * d, Drawable dr, GC g, 
				XPoint * x, int i1, int i2, int i3);
#endif
#ifndef XFillRectangles_TCL_DECLARED
#define XFillRectangles_TCL_DECLARED
/* 35 */
EXTERN void		XFillRectangles (Display * d, Drawable dr, GC g, 
				XRectangle * x, int i);
#endif
#ifndef XForceScreenSaver_TCL_DECLARED
#define XForceScreenSaver_TCL_DECLARED
/* 36 */
EXTERN void		XForceScreenSaver (Display * d, int i);
#endif
#ifndef XFreeColormap_TCL_DECLARED
#define XFreeColormap_TCL_DECLARED
/* 37 */
EXTERN void		XFreeColormap (Display * d, Colormap c);
#endif
#ifndef XFreeColors_TCL_DECLARED
#define XFreeColors_TCL_DECLARED
/* 38 */
EXTERN void		XFreeColors (Display * d, Colormap c, 
				unsigned long * ulp, int i, unsigned long ul);
#endif
#ifndef XFreeCursor_TCL_DECLARED
#define XFreeCursor_TCL_DECLARED
/* 39 */
EXTERN void		XFreeCursor (Display * d, Cursor c);
#endif
#ifndef XFreeModifiermap_TCL_DECLARED
#define XFreeModifiermap_TCL_DECLARED
/* 40 */
EXTERN void		XFreeModifiermap (XModifierKeymap * x);
#endif
#ifndef XGetGeometry_TCL_DECLARED
#define XGetGeometry_TCL_DECLARED
/* 41 */
EXTERN Status		XGetGeometry (Display * d, Drawable dr, Window * w, 
				int * i1, int * i2, unsigned int * ui1, 
				unsigned int * ui2, unsigned int * ui3, 
				unsigned int * ui4);
#endif
#ifndef XGetInputFocus_TCL_DECLARED
#define XGetInputFocus_TCL_DECLARED
/* 42 */
EXTERN void		XGetInputFocus (Display * d, Window * w, int * i);
#endif
#ifndef XGetWindowProperty_TCL_DECLARED
#define XGetWindowProperty_TCL_DECLARED
/* 43 */
EXTERN int		XGetWindowProperty (Display * d, Window w, Atom a1, 
				long l1, long l2, Bool b, Atom a2, Atom * ap, 
				int * ip, unsigned long * ulp1, 
				unsigned long * ulp2, unsigned char ** cpp);
#endif
#ifndef XGetWindowAttributes_TCL_DECLARED
#define XGetWindowAttributes_TCL_DECLARED
/* 44 */
EXTERN Status		XGetWindowAttributes (Display * d, Window w, 
				XWindowAttributes * x);
#endif
#ifndef XGrabKeyboard_TCL_DECLARED
#define XGrabKeyboard_TCL_DECLARED
/* 45 */
EXTERN int		XGrabKeyboard (Display * d, Window w, Bool b, int i1, 
				int i2, Time t);
#endif
#ifndef XGrabPointer_TCL_DECLARED
#define XGrabPointer_TCL_DECLARED
/* 46 */
EXTERN int		XGrabPointer (Display * d, Window w1, Bool b, 
				unsigned int ui, int i1, int i2, Window w2, 
				Cursor c, Time t);
#endif
#ifndef XKeysymToKeycode_TCL_DECLARED
#define XKeysymToKeycode_TCL_DECLARED
/* 47 */
EXTERN KeyCode		XKeysymToKeycode (Display * d, KeySym k);
#endif
#ifndef XLookupColor_TCL_DECLARED
#define XLookupColor_TCL_DECLARED
/* 48 */
EXTERN Status		XLookupColor (Display * d, Colormap c1, 
				_Xconst char * c2, XColor * x1, XColor * x2);
#endif
#ifndef XMapWindow_TCL_DECLARED
#define XMapWindow_TCL_DECLARED
/* 49 */
EXTERN void		XMapWindow (Display * d, Window w);
#endif
#ifndef XMoveResizeWindow_TCL_DECLARED
#define XMoveResizeWindow_TCL_DECLARED
/* 50 */
EXTERN void		XMoveResizeWindow (Display * d, Window w, int i1, 
				int i2, unsigned int ui1, unsigned int ui2);
#endif
#ifndef XMoveWindow_TCL_DECLARED
#define XMoveWindow_TCL_DECLARED
/* 51 */
EXTERN void		XMoveWindow (Display * d, Window w, int i1, int i2);
#endif
#ifndef XNextEvent_TCL_DECLARED
#define XNextEvent_TCL_DECLARED
/* 52 */
EXTERN void		XNextEvent (Display * d, XEvent * x);
#endif
#ifndef XPutBackEvent_TCL_DECLARED
#define XPutBackEvent_TCL_DECLARED
/* 53 */
EXTERN void		XPutBackEvent (Display * d, XEvent * x);
#endif
#ifndef XQueryColors_TCL_DECLARED
#define XQueryColors_TCL_DECLARED
/* 54 */
EXTERN void		XQueryColors (Display * d, Colormap c, XColor * x, 
				int i);
#endif
#ifndef XQueryPointer_TCL_DECLARED
#define XQueryPointer_TCL_DECLARED
/* 55 */
EXTERN Bool		XQueryPointer (Display * d, Window w1, Window * w2, 
				Window * w3, int * i1, int * i2, int * i3, 
				int * i4, unsigned int * ui);
#endif
#ifndef XQueryTree_TCL_DECLARED
#define XQueryTree_TCL_DECLARED
/* 56 */
EXTERN Status		XQueryTree (Display * d, Window w1, Window * w2, 
				Window * w3, Window ** w4, unsigned int * ui);
#endif
#ifndef XRaiseWindow_TCL_DECLARED
#define XRaiseWindow_TCL_DECLARED
/* 57 */
EXTERN void		XRaiseWindow (Display * d, Window w);
#endif
#ifndef XRefreshKeyboardMapping_TCL_DECLARED
#define XRefreshKeyboardMapping_TCL_DECLARED
/* 58 */
EXTERN void		XRefreshKeyboardMapping (XMappingEvent * x);
#endif
#ifndef XResizeWindow_TCL_DECLARED
#define XResizeWindow_TCL_DECLARED
/* 59 */
EXTERN void		XResizeWindow (Display * d, Window w, 
				unsigned int ui1, unsigned int ui2);
#endif
#ifndef XSelectInput_TCL_DECLARED
#define XSelectInput_TCL_DECLARED
/* 60 */
EXTERN void		XSelectInput (Display * d, Window w, long l);
#endif
#ifndef XSendEvent_TCL_DECLARED
#define XSendEvent_TCL_DECLARED
/* 61 */
EXTERN Status		XSendEvent (Display * d, Window w, Bool b, long l, 
				XEvent * x);
#endif
#ifndef XSetCommand_TCL_DECLARED
#define XSetCommand_TCL_DECLARED
/* 62 */
EXTERN void		XSetCommand (Display * d, Window w, CONST char ** c, 
				int i);
#endif
#ifndef XSetIconName_TCL_DECLARED
#define XSetIconName_TCL_DECLARED
/* 63 */
EXTERN void		XSetIconName (Display * d, Window w, 
				_Xconst char * c);
#endif
#ifndef XSetInputFocus_TCL_DECLARED
#define XSetInputFocus_TCL_DECLARED
/* 64 */
EXTERN void		XSetInputFocus (Display * d, Window w, int i, Time t);
#endif
#ifndef XSetSelectionOwner_TCL_DECLARED
#define XSetSelectionOwner_TCL_DECLARED
/* 65 */
EXTERN void		XSetSelectionOwner (Display * d, Atom a, Window w, 
				Time t);
#endif
#ifndef XSetWindowBackground_TCL_DECLARED
#define XSetWindowBackground_TCL_DECLARED
/* 66 */
EXTERN void		XSetWindowBackground (Display * d, Window w, 
				unsigned long ul);
#endif
#ifndef XSetWindowBackgroundPixmap_TCL_DECLARED
#define XSetWindowBackgroundPixmap_TCL_DECLARED
/* 67 */
EXTERN void		XSetWindowBackgroundPixmap (Display * d, Window w, 
				Pixmap p);
#endif
#ifndef XSetWindowBorder_TCL_DECLARED
#define XSetWindowBorder_TCL_DECLARED
/* 68 */
EXTERN void		XSetWindowBorder (Display * d, Window w, 
				unsigned long ul);
#endif
#ifndef XSetWindowBorderPixmap_TCL_DECLARED
#define XSetWindowBorderPixmap_TCL_DECLARED
/* 69 */
EXTERN void		XSetWindowBorderPixmap (Display * d, Window w, 
				Pixmap p);
#endif
#ifndef XSetWindowBorderWidth_TCL_DECLARED
#define XSetWindowBorderWidth_TCL_DECLARED
/* 70 */
EXTERN void		XSetWindowBorderWidth (Display * d, Window w, 
				unsigned int ui);
#endif
#ifndef XSetWindowColormap_TCL_DECLARED
#define XSetWindowColormap_TCL_DECLARED
/* 71 */
EXTERN void		XSetWindowColormap (Display * d, Window w, 
				Colormap c);
#endif
#ifndef XTranslateCoordinates_TCL_DECLARED
#define XTranslateCoordinates_TCL_DECLARED
/* 72 */
EXTERN Bool		XTranslateCoordinates (Display * d, Window w1, 
				Window w2, int i1, int i2, int * i3, 
				int * i4, Window * w3);
#endif
#ifndef XUngrabKeyboard_TCL_DECLARED
#define XUngrabKeyboard_TCL_DECLARED
/* 73 */
EXTERN void		XUngrabKeyboard (Display * d, Time t);
#endif
#ifndef XUngrabPointer_TCL_DECLARED
#define XUngrabPointer_TCL_DECLARED
/* 74 */
EXTERN void		XUngrabPointer (Display * d, Time t);
#endif
#ifndef XUnmapWindow_TCL_DECLARED
#define XUnmapWindow_TCL_DECLARED
/* 75 */
EXTERN void		XUnmapWindow (Display * d, Window w);
#endif
#ifndef XWindowEvent_TCL_DECLARED
#define XWindowEvent_TCL_DECLARED
/* 76 */
EXTERN void		XWindowEvent (Display * d, Window w, long l, 
				XEvent * x);
#endif
#ifndef XDestroyIC_TCL_DECLARED
#define XDestroyIC_TCL_DECLARED
/* 77 */
EXTERN void		XDestroyIC (XIC x);
#endif
#ifndef XFilterEvent_TCL_DECLARED
#define XFilterEvent_TCL_DECLARED
/* 78 */
EXTERN Bool		XFilterEvent (XEvent * x, Window w);
#endif
#ifndef XmbLookupString_TCL_DECLARED
#define XmbLookupString_TCL_DECLARED
/* 79 */
EXTERN int		XmbLookupString (XIC xi, XKeyPressedEvent * xk, 
				char * c, int i, KeySym * k, Status * s);
#endif
#ifndef TkPutImage_TCL_DECLARED
#define TkPutImage_TCL_DECLARED
/* 80 */
EXTERN void		TkPutImage (unsigned long * colors, int ncolors, 
				Display * display, Drawable d, GC gc, 
				XImage * image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
				unsigned int height);
#endif
/* Slot 81 is reserved */
#ifndef XParseColor_TCL_DECLARED
#define XParseColor_TCL_DECLARED
/* 82 */
EXTERN Status		XParseColor (Display * display, Colormap map, 
				_Xconst char * spec, XColor * colorPtr);
#endif
#ifndef XCreateGC_TCL_DECLARED
#define XCreateGC_TCL_DECLARED
/* 83 */
EXTERN GC		XCreateGC (Display * display, Drawable d, 
				unsigned long valuemask, XGCValues * values);
#endif
#ifndef XFreeGC_TCL_DECLARED
#define XFreeGC_TCL_DECLARED
/* 84 */
EXTERN void		XFreeGC (Display * display, GC gc);
#endif
#ifndef XInternAtom_TCL_DECLARED
#define XInternAtom_TCL_DECLARED
/* 85 */
EXTERN Atom		XInternAtom (Display * display, 
				_Xconst char * atom_name, 
				Bool only_if_exists);
#endif
#ifndef XSetBackground_TCL_DECLARED
#define XSetBackground_TCL_DECLARED
/* 86 */
EXTERN void		XSetBackground (Display * display, GC gc, 
				unsigned long foreground);
#endif
#ifndef XSetForeground_TCL_DECLARED
#define XSetForeground_TCL_DECLARED
/* 87 */
EXTERN void		XSetForeground (Display * display, GC gc, 
				unsigned long foreground);
#endif
#ifndef XSetClipMask_TCL_DECLARED
#define XSetClipMask_TCL_DECLARED
/* 88 */
EXTERN void		XSetClipMask (Display * display, GC gc, 
				Pixmap pixmap);
#endif
#ifndef XSetClipOrigin_TCL_DECLARED
#define XSetClipOrigin_TCL_DECLARED
/* 89 */
EXTERN void		XSetClipOrigin (Display * display, GC gc, 
				int clip_x_origin, int clip_y_origin);
#endif
#ifndef XSetTSOrigin_TCL_DECLARED
#define XSetTSOrigin_TCL_DECLARED
/* 90 */
EXTERN void		XSetTSOrigin (Display * display, GC gc, 
				int ts_x_origin, int ts_y_origin);
#endif
#ifndef XChangeGC_TCL_DECLARED
#define XChangeGC_TCL_DECLARED
/* 91 */
EXTERN void		XChangeGC (Display * d, GC gc, unsigned long mask, 
				XGCValues * values);
#endif
#ifndef XSetFont_TCL_DECLARED
#define XSetFont_TCL_DECLARED
/* 92 */
EXTERN void		XSetFont (Display * display, GC gc, Font font);
#endif
#ifndef XSetArcMode_TCL_DECLARED
#define XSetArcMode_TCL_DECLARED
/* 93 */
EXTERN void		XSetArcMode (Display * display, GC gc, int arc_mode);
#endif
#ifndef XSetStipple_TCL_DECLARED
#define XSetStipple_TCL_DECLARED
/* 94 */
EXTERN void		XSetStipple (Display * display, GC gc, 
				Pixmap stipple);
#endif
#ifndef XSetFillRule_TCL_DECLARED
#define XSetFillRule_TCL_DECLARED
/* 95 */
EXTERN void		XSetFillRule (Display * display, GC gc, 
				int fill_rule);
#endif
#ifndef XSetFillStyle_TCL_DECLARED
#define XSetFillStyle_TCL_DECLARED
/* 96 */
EXTERN void		XSetFillStyle (Display * display, GC gc, 
				int fill_style);
#endif
#ifndef XSetFunction_TCL_DECLARED
#define XSetFunction_TCL_DECLARED
/* 97 */
EXTERN void		XSetFunction (Display * display, GC gc, int function);
#endif
#ifndef XSetLineAttributes_TCL_DECLARED
#define XSetLineAttributes_TCL_DECLARED
/* 98 */
EXTERN void		XSetLineAttributes (Display * display, GC gc, 
				unsigned int line_width, int line_style, 
				int cap_style, int join_style);
#endif
#ifndef _XInitImageFuncPtrs_TCL_DECLARED
#define _XInitImageFuncPtrs_TCL_DECLARED
/* 99 */
EXTERN int		_XInitImageFuncPtrs (XImage * image);
#endif
#ifndef XCreateIC_TCL_DECLARED
#define XCreateIC_TCL_DECLARED
/* 100 */
EXTERN XIC		XCreateIC (void);
#endif
#ifndef XGetVisualInfo_TCL_DECLARED
#define XGetVisualInfo_TCL_DECLARED
/* 101 */
EXTERN XVisualInfo *	XGetVisualInfo (Display * display, long vinfo_mask, 
				XVisualInfo * vinfo_template, 
				int * nitems_return);
#endif
#ifndef XSetWMClientMachine_TCL_DECLARED
#define XSetWMClientMachine_TCL_DECLARED
/* 102 */
EXTERN void		XSetWMClientMachine (Display * display, Window w, 
				XTextProperty * text_prop);
#endif
#ifndef XStringListToTextProperty_TCL_DECLARED
#define XStringListToTextProperty_TCL_DECLARED
/* 103 */
EXTERN Status		XStringListToTextProperty (char ** list, int count, 
				XTextProperty * text_prop_return);
#endif
#ifndef XDrawLine_TCL_DECLARED
#define XDrawLine_TCL_DECLARED
/* 104 */
EXTERN void		XDrawLine (Display * d, Drawable dr, GC g, int x1, 
				int y1, int x2, int y2);
#endif
#ifndef XWarpPointer_TCL_DECLARED
#define XWarpPointer_TCL_DECLARED
/* 105 */
EXTERN void		XWarpPointer (Display * d, Window s, Window dw, 
				int sx, int sy, unsigned int sw, 
				unsigned int sh, int dx, int dy);
#endif
#ifndef XFillRectangle_TCL_DECLARED
#define XFillRectangle_TCL_DECLARED
/* 106 */
EXTERN void		XFillRectangle (Display * display, Drawable d, GC gc, 
				int x, int y, unsigned int width, 
				unsigned int height);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef XSetDashes_TCL_DECLARED
#define XSetDashes_TCL_DECLARED
/* 0 */
EXTERN void		XSetDashes (Display * display, GC gc, 
				int dash_offset, _Xconst char * dash_list, 
				int n);
#endif
#ifndef XGetModifierMapping_TCL_DECLARED
#define XGetModifierMapping_TCL_DECLARED
/* 1 */
EXTERN XModifierKeymap * XGetModifierMapping (Display * d);
#endif
#ifndef XCreateImage_TCL_DECLARED
#define XCreateImage_TCL_DECLARED
/* 2 */
EXTERN XImage *		XCreateImage (Display * d, Visual * v, 
				unsigned int ui1, int i1, int i2, char * cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
				int i4);
#endif
#ifndef XGetImage_TCL_DECLARED
#define XGetImage_TCL_DECLARED
/* 3 */
EXTERN XImage *		XGetImage (Display * d, Drawable dr, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, 
				unsigned long ul, int i3);
#endif
#ifndef XGetAtomName_TCL_DECLARED
#define XGetAtomName_TCL_DECLARED
/* 4 */
EXTERN char *		XGetAtomName (Display * d, Atom a);
#endif
#ifndef XKeysymToString_TCL_DECLARED
#define XKeysymToString_TCL_DECLARED
/* 5 */
EXTERN char *		XKeysymToString (KeySym k);
#endif
#ifndef XCreateColormap_TCL_DECLARED
#define XCreateColormap_TCL_DECLARED
/* 6 */
EXTERN Colormap		XCreateColormap (Display * d, Window w, Visual * v, 
				int i);
#endif
#ifndef XGContextFromGC_TCL_DECLARED
#define XGContextFromGC_TCL_DECLARED
/* 7 */
EXTERN GContext		XGContextFromGC (GC g);
#endif
#ifndef XKeycodeToKeysym_TCL_DECLARED
#define XKeycodeToKeysym_TCL_DECLARED
/* 8 */
EXTERN KeySym		XKeycodeToKeysym (Display * d, KeyCode k, int i);
#endif
#ifndef XStringToKeysym_TCL_DECLARED
#define XStringToKeysym_TCL_DECLARED
/* 9 */
EXTERN KeySym		XStringToKeysym (_Xconst char * c);
#endif
#ifndef XRootWindow_TCL_DECLARED
#define XRootWindow_TCL_DECLARED
/* 10 */
EXTERN Window		XRootWindow (Display * d, int i);
#endif
#ifndef XSetErrorHandler_TCL_DECLARED
#define XSetErrorHandler_TCL_DECLARED
/* 11 */
EXTERN XErrorHandler	XSetErrorHandler (XErrorHandler x);
#endif
#ifndef XAllocColor_TCL_DECLARED
#define XAllocColor_TCL_DECLARED
/* 12 */
EXTERN Status		XAllocColor (Display * d, Colormap c, XColor * xp);
#endif
#ifndef XBell_TCL_DECLARED
#define XBell_TCL_DECLARED
/* 13 */
EXTERN void		XBell (Display * d, int i);
#endif
#ifndef XChangeProperty_TCL_DECLARED
#define XChangeProperty_TCL_DECLARED
/* 14 */
EXTERN void		XChangeProperty (Display * d, Window w, Atom a1, 
				Atom a2, int i1, int i2, 
				_Xconst unsigned char * c, int i3);
#endif
#ifndef XChangeWindowAttributes_TCL_DECLARED
#define XChangeWindowAttributes_TCL_DECLARED
/* 15 */
EXTERN void		XChangeWindowAttributes (Display * d, Window w, 
				unsigned long ul, XSetWindowAttributes * x);
#endif
#ifndef XConfigureWindow_TCL_DECLARED
#define XConfigureWindow_TCL_DECLARED
/* 16 */
EXTERN void		XConfigureWindow (Display * d, Window w, 
				unsigned int i, XWindowChanges * x);
#endif
#ifndef XCopyArea_TCL_DECLARED
#define XCopyArea_TCL_DECLARED
/* 17 */
EXTERN void		XCopyArea (Display * d, Drawable dr1, Drawable dr2, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4);
#endif
#ifndef XCopyPlane_TCL_DECLARED
#define XCopyPlane_TCL_DECLARED
/* 18 */
EXTERN void		XCopyPlane (Display * d, Drawable dr1, Drawable dr2, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4, 
				unsigned long ul);
#endif
#ifndef XCreateBitmapFromData_TCL_DECLARED
#define XCreateBitmapFromData_TCL_DECLARED
/* 19 */
EXTERN Pixmap		XCreateBitmapFromData (Display * display, Drawable d, 
				_Xconst char * data, unsigned int width, 
				unsigned int height);
#endif
#ifndef XDefineCursor_TCL_DECLARED
#define XDefineCursor_TCL_DECLARED
/* 20 */
EXTERN void		XDefineCursor (Display * d, Window w, Cursor c);
#endif
#ifndef XDestroyWindow_TCL_DECLARED
#define XDestroyWindow_TCL_DECLARED
/* 21 */
EXTERN void		XDestroyWindow (Display * d, Window w);
#endif
#ifndef XDrawArc_TCL_DECLARED
#define XDrawArc_TCL_DECLARED
/* 22 */
EXTERN void		XDrawArc (Display * d, Drawable dr, GC g, int i1, 
				int i2, unsigned int ui1, unsigned int ui2, 
				int i3, int i4);
#endif
#ifndef XDrawLines_TCL_DECLARED
#define XDrawLines_TCL_DECLARED
/* 23 */
EXTERN void		XDrawLines (Display * d, Drawable dr, GC g, 
				XPoint * x, int i1, int i2);
#endif
#ifndef XDrawRectangle_TCL_DECLARED
#define XDrawRectangle_TCL_DECLARED
/* 24 */
EXTERN void		XDrawRectangle (Display * d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2);
#endif
#ifndef XFillArc_TCL_DECLARED
#define XFillArc_TCL_DECLARED
/* 25 */
EXTERN void		XFillArc (Display * d, Drawable dr, GC g, int i1, 
				int i2, unsigned int ui1, unsigned int ui2, 
				int i3, int i4);
#endif
#ifndef XFillPolygon_TCL_DECLARED
#define XFillPolygon_TCL_DECLARED
/* 26 */
EXTERN void		XFillPolygon (Display * d, Drawable dr, GC g, 
				XPoint * x, int i1, int i2, int i3);
#endif
#ifndef XFillRectangles_TCL_DECLARED
#define XFillRectangles_TCL_DECLARED
/* 27 */
EXTERN void		XFillRectangles (Display * d, Drawable dr, GC g, 
				XRectangle * x, int i);
#endif
#ifndef XFreeColormap_TCL_DECLARED
#define XFreeColormap_TCL_DECLARED
/* 28 */
EXTERN void		XFreeColormap (Display * d, Colormap c);
#endif
#ifndef XFreeColors_TCL_DECLARED
#define XFreeColors_TCL_DECLARED
/* 29 */
EXTERN void		XFreeColors (Display * d, Colormap c, 
				unsigned long * ulp, int i, unsigned long ul);
#endif
#ifndef XFreeModifiermap_TCL_DECLARED
#define XFreeModifiermap_TCL_DECLARED
/* 30 */
EXTERN void		XFreeModifiermap (XModifierKeymap * x);
#endif
#ifndef XGetGeometry_TCL_DECLARED
#define XGetGeometry_TCL_DECLARED
/* 31 */
EXTERN Status		XGetGeometry (Display * d, Drawable dr, Window * w, 
				int * i1, int * i2, unsigned int * ui1, 
				unsigned int * ui2, unsigned int * ui3, 
				unsigned int * ui4);
#endif
#ifndef XGetWindowProperty_TCL_DECLARED
#define XGetWindowProperty_TCL_DECLARED
/* 32 */
EXTERN int		XGetWindowProperty (Display * d, Window w, Atom a1, 
				long l1, long l2, Bool b, Atom a2, Atom * ap, 
				int * ip, unsigned long * ulp1, 
				unsigned long * ulp2, unsigned char ** cpp);
#endif
#ifndef XGrabKeyboard_TCL_DECLARED
#define XGrabKeyboard_TCL_DECLARED
/* 33 */
EXTERN int		XGrabKeyboard (Display * d, Window w, Bool b, int i1, 
				int i2, Time t);
#endif
#ifndef XGrabPointer_TCL_DECLARED
#define XGrabPointer_TCL_DECLARED
/* 34 */
EXTERN int		XGrabPointer (Display * d, Window w1, Bool b, 
				unsigned int ui, int i1, int i2, Window w2, 
				Cursor c, Time t);
#endif
#ifndef XKeysymToKeycode_TCL_DECLARED
#define XKeysymToKeycode_TCL_DECLARED
/* 35 */
EXTERN KeyCode		XKeysymToKeycode (Display * d, KeySym k);
#endif
#ifndef XMapWindow_TCL_DECLARED
#define XMapWindow_TCL_DECLARED
/* 36 */
EXTERN void		XMapWindow (Display * d, Window w);
#endif
#ifndef XMoveResizeWindow_TCL_DECLARED
#define XMoveResizeWindow_TCL_DECLARED
/* 37 */
EXTERN void		XMoveResizeWindow (Display * d, Window w, int i1, 
				int i2, unsigned int ui1, unsigned int ui2);
#endif
#ifndef XMoveWindow_TCL_DECLARED
#define XMoveWindow_TCL_DECLARED
/* 38 */
EXTERN void		XMoveWindow (Display * d, Window w, int i1, int i2);
#endif
#ifndef XQueryPointer_TCL_DECLARED
#define XQueryPointer_TCL_DECLARED
/* 39 */
EXTERN Bool		XQueryPointer (Display * d, Window w1, Window * w2, 
				Window * w3, int * i1, int * i2, int * i3, 
				int * i4, unsigned int * ui);
#endif
#ifndef XRaiseWindow_TCL_DECLARED
#define XRaiseWindow_TCL_DECLARED
/* 40 */
EXTERN void		XRaiseWindow (Display * d, Window w);
#endif
#ifndef XRefreshKeyboardMapping_TCL_DECLARED
#define XRefreshKeyboardMapping_TCL_DECLARED
/* 41 */
EXTERN void		XRefreshKeyboardMapping (XMappingEvent * x);
#endif
#ifndef XResizeWindow_TCL_DECLARED
#define XResizeWindow_TCL_DECLARED
/* 42 */
EXTERN void		XResizeWindow (Display * d, Window w, 
				unsigned int ui1, unsigned int ui2);
#endif
#ifndef XSelectInput_TCL_DECLARED
#define XSelectInput_TCL_DECLARED
/* 43 */
EXTERN void		XSelectInput (Display * d, Window w, long l);
#endif
#ifndef XSendEvent_TCL_DECLARED
#define XSendEvent_TCL_DECLARED
/* 44 */
EXTERN Status		XSendEvent (Display * d, Window w, Bool b, long l, 
				XEvent * x);
#endif
#ifndef XSetIconName_TCL_DECLARED
#define XSetIconName_TCL_DECLARED
/* 45 */
EXTERN void		XSetIconName (Display * d, Window w, 
				_Xconst char * c);
#endif
#ifndef XSetInputFocus_TCL_DECLARED
#define XSetInputFocus_TCL_DECLARED
/* 46 */
EXTERN void		XSetInputFocus (Display * d, Window w, int i, Time t);
#endif
#ifndef XSetSelectionOwner_TCL_DECLARED
#define XSetSelectionOwner_TCL_DECLARED
/* 47 */
EXTERN void		XSetSelectionOwner (Display * d, Atom a, Window w, 
				Time t);
#endif
#ifndef XSetWindowBackground_TCL_DECLARED
#define XSetWindowBackground_TCL_DECLARED
/* 48 */
EXTERN void		XSetWindowBackground (Display * d, Window w, 
				unsigned long ul);
#endif
#ifndef XSetWindowBackgroundPixmap_TCL_DECLARED
#define XSetWindowBackgroundPixmap_TCL_DECLARED
/* 49 */
EXTERN void		XSetWindowBackgroundPixmap (Display * d, Window w, 
				Pixmap p);
#endif
#ifndef XSetWindowBorder_TCL_DECLARED
#define XSetWindowBorder_TCL_DECLARED
/* 50 */
EXTERN void		XSetWindowBorder (Display * d, Window w, 
				unsigned long ul);
#endif
#ifndef XSetWindowBorderPixmap_TCL_DECLARED
#define XSetWindowBorderPixmap_TCL_DECLARED
/* 51 */
EXTERN void		XSetWindowBorderPixmap (Display * d, Window w, 
				Pixmap p);
#endif
#ifndef XSetWindowBorderWidth_TCL_DECLARED
#define XSetWindowBorderWidth_TCL_DECLARED
/* 52 */
EXTERN void		XSetWindowBorderWidth (Display * d, Window w, 
				unsigned int ui);
#endif
#ifndef XSetWindowColormap_TCL_DECLARED
#define XSetWindowColormap_TCL_DECLARED
/* 53 */
EXTERN void		XSetWindowColormap (Display * d, Window w, 
				Colormap c);
#endif
#ifndef XUngrabKeyboard_TCL_DECLARED
#define XUngrabKeyboard_TCL_DECLARED
/* 54 */
EXTERN void		XUngrabKeyboard (Display * d, Time t);
#endif
#ifndef XUngrabPointer_TCL_DECLARED
#define XUngrabPointer_TCL_DECLARED
/* 55 */
EXTERN void		XUngrabPointer (Display * d, Time t);
#endif
#ifndef XUnmapWindow_TCL_DECLARED
#define XUnmapWindow_TCL_DECLARED
/* 56 */
EXTERN void		XUnmapWindow (Display * d, Window w);
#endif
#ifndef TkPutImage_TCL_DECLARED
#define TkPutImage_TCL_DECLARED
/* 57 */
EXTERN void		TkPutImage (unsigned long * colors, int ncolors, 
				Display * display, Drawable d, GC gc, 
				XImage * image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
				unsigned int height);
#endif
#ifndef XParseColor_TCL_DECLARED
#define XParseColor_TCL_DECLARED
/* 58 */
EXTERN Status		XParseColor (Display * display, Colormap map, 
				_Xconst char * spec, XColor * colorPtr);
#endif
#ifndef XCreateGC_TCL_DECLARED
#define XCreateGC_TCL_DECLARED
/* 59 */
EXTERN GC		XCreateGC (Display * display, Drawable d, 
				unsigned long valuemask, XGCValues * values);
#endif
#ifndef XFreeGC_TCL_DECLARED
#define XFreeGC_TCL_DECLARED
/* 60 */
EXTERN void		XFreeGC (Display * display, GC gc);
#endif
#ifndef XInternAtom_TCL_DECLARED
#define XInternAtom_TCL_DECLARED
/* 61 */
EXTERN Atom		XInternAtom (Display * display, 
				_Xconst char * atom_name, 
				Bool only_if_exists);
#endif
#ifndef XSetBackground_TCL_DECLARED
#define XSetBackground_TCL_DECLARED
/* 62 */
EXTERN void		XSetBackground (Display * display, GC gc, 
				unsigned long foreground);
#endif
#ifndef XSetForeground_TCL_DECLARED
#define XSetForeground_TCL_DECLARED
/* 63 */
EXTERN void		XSetForeground (Display * display, GC gc, 
				unsigned long foreground);
#endif
#ifndef XSetClipMask_TCL_DECLARED
#define XSetClipMask_TCL_DECLARED
/* 64 */
EXTERN void		XSetClipMask (Display * display, GC gc, 
				Pixmap pixmap);
#endif
#ifndef XSetClipOrigin_TCL_DECLARED
#define XSetClipOrigin_TCL_DECLARED
/* 65 */
EXTERN void		XSetClipOrigin (Display * display, GC gc, 
				int clip_x_origin, int clip_y_origin);
#endif
#ifndef XSetTSOrigin_TCL_DECLARED
#define XSetTSOrigin_TCL_DECLARED
/* 66 */
EXTERN void		XSetTSOrigin (Display * display, GC gc, 
				int ts_x_origin, int ts_y_origin);
#endif
#ifndef XChangeGC_TCL_DECLARED
#define XChangeGC_TCL_DECLARED
/* 67 */
EXTERN void		XChangeGC (Display * d, GC gc, unsigned long mask, 
				XGCValues * values);
#endif
#ifndef XSetFont_TCL_DECLARED
#define XSetFont_TCL_DECLARED
/* 68 */
EXTERN void		XSetFont (Display * display, GC gc, Font font);
#endif
#ifndef XSetArcMode_TCL_DECLARED
#define XSetArcMode_TCL_DECLARED
/* 69 */
EXTERN void		XSetArcMode (Display * display, GC gc, int arc_mode);
#endif
#ifndef XSetStipple_TCL_DECLARED
#define XSetStipple_TCL_DECLARED
/* 70 */
EXTERN void		XSetStipple (Display * display, GC gc, 
				Pixmap stipple);
#endif
#ifndef XSetFillRule_TCL_DECLARED
#define XSetFillRule_TCL_DECLARED
/* 71 */
EXTERN void		XSetFillRule (Display * display, GC gc, 
				int fill_rule);
#endif
#ifndef XSetFillStyle_TCL_DECLARED
#define XSetFillStyle_TCL_DECLARED
/* 72 */
EXTERN void		XSetFillStyle (Display * display, GC gc, 
				int fill_style);
#endif
#ifndef XSetFunction_TCL_DECLARED
#define XSetFunction_TCL_DECLARED
/* 73 */
EXTERN void		XSetFunction (Display * display, GC gc, int function);
#endif
#ifndef XSetLineAttributes_TCL_DECLARED
#define XSetLineAttributes_TCL_DECLARED
/* 74 */
EXTERN void		XSetLineAttributes (Display * display, GC gc, 
				unsigned int line_width, int line_style, 
				int cap_style, int join_style);
#endif
#ifndef _XInitImageFuncPtrs_TCL_DECLARED
#define _XInitImageFuncPtrs_TCL_DECLARED
/* 75 */
EXTERN int		_XInitImageFuncPtrs (XImage * image);
#endif
#ifndef XCreateIC_TCL_DECLARED
#define XCreateIC_TCL_DECLARED
/* 76 */
EXTERN XIC		XCreateIC (void);
#endif
#ifndef XGetVisualInfo_TCL_DECLARED
#define XGetVisualInfo_TCL_DECLARED
/* 77 */
EXTERN XVisualInfo *	XGetVisualInfo (Display * display, long vinfo_mask, 
				XVisualInfo * vinfo_template, 
				int * nitems_return);
#endif
#ifndef XSetWMClientMachine_TCL_DECLARED
#define XSetWMClientMachine_TCL_DECLARED
/* 78 */
EXTERN void		XSetWMClientMachine (Display * display, Window w, 
				XTextProperty * text_prop);
#endif
#ifndef XStringListToTextProperty_TCL_DECLARED
#define XStringListToTextProperty_TCL_DECLARED
/* 79 */
EXTERN Status		XStringListToTextProperty (char ** list, int count, 
				XTextProperty * text_prop_return);
#endif
#ifndef XDrawSegments_TCL_DECLARED
#define XDrawSegments_TCL_DECLARED
/* 80 */
EXTERN void		XDrawSegments (Display * display, Drawable d, GC gc, 
				XSegment * segments, int nsegments);
#endif
#ifndef XForceScreenSaver_TCL_DECLARED
#define XForceScreenSaver_TCL_DECLARED
/* 81 */
EXTERN void		XForceScreenSaver (Display * display, int mode);
#endif
#ifndef XDrawLine_TCL_DECLARED
#define XDrawLine_TCL_DECLARED
/* 82 */
EXTERN void		XDrawLine (Display * d, Drawable dr, GC g, int x1, 
				int y1, int x2, int y2);
#endif
#ifndef XFillRectangle_TCL_DECLARED
#define XFillRectangle_TCL_DECLARED
/* 83 */
EXTERN void		XFillRectangle (Display * display, Drawable d, GC gc, 
				int x, int y, unsigned int width, 
				unsigned int height);
#endif
#ifndef XClearWindow_TCL_DECLARED
#define XClearWindow_TCL_DECLARED
/* 84 */
EXTERN void		XClearWindow (Display * d, Window w);
#endif
#ifndef XDrawPoint_TCL_DECLARED
#define XDrawPoint_TCL_DECLARED
/* 85 */
EXTERN void		XDrawPoint (Display * display, Drawable d, GC gc, 
				int x, int y);
#endif
#ifndef XDrawPoints_TCL_DECLARED
#define XDrawPoints_TCL_DECLARED
/* 86 */
EXTERN void		XDrawPoints (Display * display, Drawable d, GC gc, 
				XPoint * points, int npoints, int mode);
#endif
#ifndef XWarpPointer_TCL_DECLARED
#define XWarpPointer_TCL_DECLARED
/* 87 */
EXTERN void		XWarpPointer (Display * display, Window src_w, 
				Window dest_w, int src_x, int src_y, 
				unsigned int src_width, 
				unsigned int src_height, int dest_x, 
				int dest_y);
#endif
#ifndef XQueryColor_TCL_DECLARED
#define XQueryColor_TCL_DECLARED
/* 88 */
EXTERN void		XQueryColor (Display * display, Colormap colormap, 
				XColor * def_in_out);
#endif
#ifndef XQueryColors_TCL_DECLARED
#define XQueryColors_TCL_DECLARED
/* 89 */
EXTERN void		XQueryColors (Display * display, Colormap colormap, 
				XColor * defs_in_out, int ncolors);
#endif
#ifndef XQueryTree_TCL_DECLARED
#define XQueryTree_TCL_DECLARED
/* 90 */
EXTERN Status		XQueryTree (Display * d, Window w1, Window * w2, 
				Window * w3, Window ** w4, unsigned int * ui);
#endif
#ifndef XSync_TCL_DECLARED
#define XSync_TCL_DECLARED
/* 91 */
EXTERN int		XSync (Display * display, Bool flag);
#endif
#endif /* MAC_OSX_TK */

typedef struct TkIntXlibStubs {
    int magic;
    struct TkIntXlibStubHooks *hooks;

#ifdef __WIN32__
    void (*xSetDashes) (Display * display, GC gc, int dash_offset, _Xconst char * dash_list, int n); /* 0 */
    XModifierKeymap * (*xGetModifierMapping) (Display * d); /* 1 */
    XImage * (*xCreateImage) (Display * d, Visual * v, unsigned int ui1, int i1, int i2, char * cp, unsigned int ui2, unsigned int ui3, int i3, int i4); /* 2 */
    XImage * (*xGetImage) (Display * d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3); /* 3 */
    char * (*xGetAtomName) (Display * d, Atom a); /* 4 */
    char * (*xKeysymToString) (KeySym k); /* 5 */
    Colormap (*xCreateColormap) (Display * d, Window w, Visual * v, int i); /* 6 */
    Cursor (*xCreatePixmapCursor) (Display * d, Pixmap p1, Pixmap p2, XColor * x1, XColor * x2, unsigned int ui1, unsigned int ui2); /* 7 */
    Cursor (*xCreateGlyphCursor) (Display * d, Font f1, Font f2, unsigned int ui1, unsigned int ui2, XColor * x1, XColor * x2); /* 8 */
    GContext (*xGContextFromGC) (GC g); /* 9 */
    XHostAddress * (*xListHosts) (Display * d, int * i, Bool * b); /* 10 */
    KeySym (*xKeycodeToKeysym) (Display * d, unsigned int k, int i); /* 11 */
    KeySym (*xStringToKeysym) (_Xconst char * c); /* 12 */
    Window (*xRootWindow) (Display * d, int i); /* 13 */
    XErrorHandler (*xSetErrorHandler) (XErrorHandler x); /* 14 */
    Status (*xIconifyWindow) (Display * d, Window w, int i); /* 15 */
    Status (*xWithdrawWindow) (Display * d, Window w, int i); /* 16 */
    Status (*xGetWMColormapWindows) (Display * d, Window w, Window ** wpp, int * ip); /* 17 */
    Status (*xAllocColor) (Display * d, Colormap c, XColor * xp); /* 18 */
    void (*xBell) (Display * d, int i); /* 19 */
    void (*xChangeProperty) (Display * d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char * c, int i3); /* 20 */
    void (*xChangeWindowAttributes) (Display * d, Window w, unsigned long ul, XSetWindowAttributes * x); /* 21 */
    void (*xClearWindow) (Display * d, Window w); /* 22 */
    void (*xConfigureWindow) (Display * d, Window w, unsigned int i, XWindowChanges * x); /* 23 */
    void (*xCopyArea) (Display * d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4); /* 24 */
    void (*xCopyPlane) (Display * d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul); /* 25 */
    Pixmap (*xCreateBitmapFromData) (Display * display, Drawable d, _Xconst char * data, unsigned int width, unsigned int height); /* 26 */
    void (*xDefineCursor) (Display * d, Window w, Cursor c); /* 27 */
    void (*xDeleteProperty) (Display * d, Window w, Atom a); /* 28 */
    void (*xDestroyWindow) (Display * d, Window w); /* 29 */
    void (*xDrawArc) (Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4); /* 30 */
    void (*xDrawLines) (Display * d, Drawable dr, GC g, XPoint * x, int i1, int i2); /* 31 */
    void (*xDrawRectangle) (Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2); /* 32 */
    void (*xFillArc) (Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4); /* 33 */
    void (*xFillPolygon) (Display * d, Drawable dr, GC g, XPoint * x, int i1, int i2, int i3); /* 34 */
    void (*xFillRectangles) (Display * d, Drawable dr, GC g, XRectangle * x, int i); /* 35 */
    void (*xForceScreenSaver) (Display * d, int i); /* 36 */
    void (*xFreeColormap) (Display * d, Colormap c); /* 37 */
    void (*xFreeColors) (Display * d, Colormap c, unsigned long * ulp, int i, unsigned long ul); /* 38 */
    void (*xFreeCursor) (Display * d, Cursor c); /* 39 */
    void (*xFreeModifiermap) (XModifierKeymap * x); /* 40 */
    Status (*xGetGeometry) (Display * d, Drawable dr, Window * w, int * i1, int * i2, unsigned int * ui1, unsigned int * ui2, unsigned int * ui3, unsigned int * ui4); /* 41 */
    void (*xGetInputFocus) (Display * d, Window * w, int * i); /* 42 */
    int (*xGetWindowProperty) (Display * d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom * ap, int * ip, unsigned long * ulp1, unsigned long * ulp2, unsigned char ** cpp); /* 43 */
    Status (*xGetWindowAttributes) (Display * d, Window w, XWindowAttributes * x); /* 44 */
    int (*xGrabKeyboard) (Display * d, Window w, Bool b, int i1, int i2, Time t); /* 45 */
    int (*xGrabPointer) (Display * d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t); /* 46 */
    KeyCode (*xKeysymToKeycode) (Display * d, KeySym k); /* 47 */
    Status (*xLookupColor) (Display * d, Colormap c1, _Xconst char * c2, XColor * x1, XColor * x2); /* 48 */
    void (*xMapWindow) (Display * d, Window w); /* 49 */
    void (*xMoveResizeWindow) (Display * d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2); /* 50 */
    void (*xMoveWindow) (Display * d, Window w, int i1, int i2); /* 51 */
    void (*xNextEvent) (Display * d, XEvent * x); /* 52 */
    void (*xPutBackEvent) (Display * d, XEvent * x); /* 53 */
    void (*xQueryColors) (Display * d, Colormap c, XColor * x, int i); /* 54 */
    Bool (*xQueryPointer) (Display * d, Window w1, Window * w2, Window * w3, int * i1, int * i2, int * i3, int * i4, unsigned int * ui); /* 55 */
    Status (*xQueryTree) (Display * d, Window w1, Window * w2, Window * w3, Window ** w4, unsigned int * ui); /* 56 */
    void (*xRaiseWindow) (Display * d, Window w); /* 57 */
    void (*xRefreshKeyboardMapping) (XMappingEvent * x); /* 58 */
    void (*xResizeWindow) (Display * d, Window w, unsigned int ui1, unsigned int ui2); /* 59 */
    void (*xSelectInput) (Display * d, Window w, long l); /* 60 */
    Status (*xSendEvent) (Display * d, Window w, Bool b, long l, XEvent * x); /* 61 */
    void (*xSetCommand) (Display * d, Window w, CONST char ** c, int i); /* 62 */
    void (*xSetIconName) (Display * d, Window w, _Xconst char * c); /* 63 */
    void (*xSetInputFocus) (Display * d, Window w, int i, Time t); /* 64 */
    void (*xSetSelectionOwner) (Display * d, Atom a, Window w, Time t); /* 65 */
    void (*xSetWindowBackground) (Display * d, Window w, unsigned long ul); /* 66 */
    void (*xSetWindowBackgroundPixmap) (Display * d, Window w, Pixmap p); /* 67 */
    void (*xSetWindowBorder) (Display * d, Window w, unsigned long ul); /* 68 */
    void (*xSetWindowBorderPixmap) (Display * d, Window w, Pixmap p); /* 69 */
    void (*xSetWindowBorderWidth) (Display * d, Window w, unsigned int ui); /* 70 */
    void (*xSetWindowColormap) (Display * d, Window w, Colormap c); /* 71 */
    Bool (*xTranslateCoordinates) (Display * d, Window w1, Window w2, int i1, int i2, int * i3, int * i4, Window * w3); /* 72 */
    void (*xUngrabKeyboard) (Display * d, Time t); /* 73 */
    void (*xUngrabPointer) (Display * d, Time t); /* 74 */
    void (*xUnmapWindow) (Display * d, Window w); /* 75 */
    void (*xWindowEvent) (Display * d, Window w, long l, XEvent * x); /* 76 */
    void (*xDestroyIC) (XIC x); /* 77 */
    Bool (*xFilterEvent) (XEvent * x, Window w); /* 78 */
    int (*xmbLookupString) (XIC xi, XKeyPressedEvent * xk, char * c, int i, KeySym * k, Status * s); /* 79 */
    void (*tkPutImage) (unsigned long * colors, int ncolors, Display * display, Drawable d, GC gc, XImage * image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height); /* 80 */
    void *reserved81;
    Status (*xParseColor) (Display * display, Colormap map, _Xconst char * spec, XColor * colorPtr); /* 82 */
    GC (*xCreateGC) (Display * display, Drawable d, unsigned long valuemask, XGCValues * values); /* 83 */
    void (*xFreeGC) (Display * display, GC gc); /* 84 */
    Atom (*xInternAtom) (Display * display, _Xconst char * atom_name, Bool only_if_exists); /* 85 */
    void (*xSetBackground) (Display * display, GC gc, unsigned long foreground); /* 86 */
    void (*xSetForeground) (Display * display, GC gc, unsigned long foreground); /* 87 */
    void (*xSetClipMask) (Display * display, GC gc, Pixmap pixmap); /* 88 */
    void (*xSetClipOrigin) (Display * display, GC gc, int clip_x_origin, int clip_y_origin); /* 89 */
    void (*xSetTSOrigin) (Display * display, GC gc, int ts_x_origin, int ts_y_origin); /* 90 */
    void (*xChangeGC) (Display * d, GC gc, unsigned long mask, XGCValues * values); /* 91 */
    void (*xSetFont) (Display * display, GC gc, Font font); /* 92 */
    void (*xSetArcMode) (Display * display, GC gc, int arc_mode); /* 93 */
    void (*xSetStipple) (Display * display, GC gc, Pixmap stipple); /* 94 */
    void (*xSetFillRule) (Display * display, GC gc, int fill_rule); /* 95 */
    void (*xSetFillStyle) (Display * display, GC gc, int fill_style); /* 96 */
    void (*xSetFunction) (Display * display, GC gc, int function); /* 97 */
    void (*xSetLineAttributes) (Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style); /* 98 */
    int (*_XInitImageFuncPtrs) (XImage * image); /* 99 */
    XIC (*xCreateIC) (void); /* 100 */
    XVisualInfo * (*xGetVisualInfo) (Display * display, long vinfo_mask, XVisualInfo * vinfo_template, int * nitems_return); /* 101 */
    void (*xSetWMClientMachine) (Display * display, Window w, XTextProperty * text_prop); /* 102 */
    Status (*xStringListToTextProperty) (char ** list, int count, XTextProperty * text_prop_return); /* 103 */
    void (*xDrawLine) (Display * d, Drawable dr, GC g, int x1, int y1, int x2, int y2); /* 104 */
    void (*xWarpPointer) (Display * d, Window s, Window dw, int sx, int sy, unsigned int sw, unsigned int sh, int dx, int dy); /* 105 */
    void (*xFillRectangle) (Display * display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height); /* 106 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*xSetDashes) (Display * display, GC gc, int dash_offset, _Xconst char * dash_list, int n); /* 0 */
    XModifierKeymap * (*xGetModifierMapping) (Display * d); /* 1 */
    XImage * (*xCreateImage) (Display * d, Visual * v, unsigned int ui1, int i1, int i2, char * cp, unsigned int ui2, unsigned int ui3, int i3, int i4); /* 2 */
    XImage * (*xGetImage) (Display * d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3); /* 3 */
    char * (*xGetAtomName) (Display * d, Atom a); /* 4 */
    char * (*xKeysymToString) (KeySym k); /* 5 */
    Colormap (*xCreateColormap) (Display * d, Window w, Visual * v, int i); /* 6 */
    GContext (*xGContextFromGC) (GC g); /* 7 */
    KeySym (*xKeycodeToKeysym) (Display * d, KeyCode k, int i); /* 8 */
    KeySym (*xStringToKeysym) (_Xconst char * c); /* 9 */
    Window (*xRootWindow) (Display * d, int i); /* 10 */
    XErrorHandler (*xSetErrorHandler) (XErrorHandler x); /* 11 */
    Status (*xAllocColor) (Display * d, Colormap c, XColor * xp); /* 12 */
    void (*xBell) (Display * d, int i); /* 13 */
    void (*xChangeProperty) (Display * d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char * c, int i3); /* 14 */
    void (*xChangeWindowAttributes) (Display * d, Window w, unsigned long ul, XSetWindowAttributes * x); /* 15 */
    void (*xConfigureWindow) (Display * d, Window w, unsigned int i, XWindowChanges * x); /* 16 */
    void (*xCopyArea) (Display * d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4); /* 17 */
    void (*xCopyPlane) (Display * d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul); /* 18 */
    Pixmap (*xCreateBitmapFromData) (Display * display, Drawable d, _Xconst char * data, unsigned int width, unsigned int height); /* 19 */
    void (*xDefineCursor) (Display * d, Window w, Cursor c); /* 20 */
    void (*xDestroyWindow) (Display * d, Window w); /* 21 */
    void (*xDrawArc) (Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4); /* 22 */
    void (*xDrawLines) (Display * d, Drawable dr, GC g, XPoint * x, int i1, int i2); /* 23 */
    void (*xDrawRectangle) (Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2); /* 24 */
    void (*xFillArc) (Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4); /* 25 */
    void (*xFillPolygon) (Display * d, Drawable dr, GC g, XPoint * x, int i1, int i2, int i3); /* 26 */
    void (*xFillRectangles) (Display * d, Drawable dr, GC g, XRectangle * x, int i); /* 27 */
    void (*xFreeColormap) (Display * d, Colormap c); /* 28 */
    void (*xFreeColors) (Display * d, Colormap c, unsigned long * ulp, int i, unsigned long ul); /* 29 */
    void (*xFreeModifiermap) (XModifierKeymap * x); /* 30 */
    Status (*xGetGeometry) (Display * d, Drawable dr, Window * w, int * i1, int * i2, unsigned int * ui1, unsigned int * ui2, unsigned int * ui3, unsigned int * ui4); /* 31 */
    int (*xGetWindowProperty) (Display * d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom * ap, int * ip, unsigned long * ulp1, unsigned long * ulp2, unsigned char ** cpp); /* 32 */
    int (*xGrabKeyboard) (Display * d, Window w, Bool b, int i1, int i2, Time t); /* 33 */
    int (*xGrabPointer) (Display * d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t); /* 34 */
    KeyCode (*xKeysymToKeycode) (Display * d, KeySym k); /* 35 */
    void (*xMapWindow) (Display * d, Window w); /* 36 */
    void (*xMoveResizeWindow) (Display * d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2); /* 37 */
    void (*xMoveWindow) (Display * d, Window w, int i1, int i2); /* 38 */
    Bool (*xQueryPointer) (Display * d, Window w1, Window * w2, Window * w3, int * i1, int * i2, int * i3, int * i4, unsigned int * ui); /* 39 */
    void (*xRaiseWindow) (Display * d, Window w); /* 40 */
    void (*xRefreshKeyboardMapping) (XMappingEvent * x); /* 41 */
    void (*xResizeWindow) (Display * d, Window w, unsigned int ui1, unsigned int ui2); /* 42 */
    void (*xSelectInput) (Display * d, Window w, long l); /* 43 */
    Status (*xSendEvent) (Display * d, Window w, Bool b, long l, XEvent * x); /* 44 */
    void (*xSetIconName) (Display * d, Window w, _Xconst char * c); /* 45 */
    void (*xSetInputFocus) (Display * d, Window w, int i, Time t); /* 46 */
    void (*xSetSelectionOwner) (Display * d, Atom a, Window w, Time t); /* 47 */
    void (*xSetWindowBackground) (Display * d, Window w, unsigned long ul); /* 48 */
    void (*xSetWindowBackgroundPixmap) (Display * d, Window w, Pixmap p); /* 49 */
    void (*xSetWindowBorder) (Display * d, Window w, unsigned long ul); /* 50 */
    void (*xSetWindowBorderPixmap) (Display * d, Window w, Pixmap p); /* 51 */
    void (*xSetWindowBorderWidth) (Display * d, Window w, unsigned int ui); /* 52 */
    void (*xSetWindowColormap) (Display * d, Window w, Colormap c); /* 53 */
    void (*xUngrabKeyboard) (Display * d, Time t); /* 54 */
    void (*xUngrabPointer) (Display * d, Time t); /* 55 */
    void (*xUnmapWindow) (Display * d, Window w); /* 56 */
    void (*tkPutImage) (unsigned long * colors, int ncolors, Display * display, Drawable d, GC gc, XImage * image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height); /* 57 */
    Status (*xParseColor) (Display * display, Colormap map, _Xconst char * spec, XColor * colorPtr); /* 58 */
    GC (*xCreateGC) (Display * display, Drawable d, unsigned long valuemask, XGCValues * values); /* 59 */
    void (*xFreeGC) (Display * display, GC gc); /* 60 */
    Atom (*xInternAtom) (Display * display, _Xconst char * atom_name, Bool only_if_exists); /* 61 */
    void (*xSetBackground) (Display * display, GC gc, unsigned long foreground); /* 62 */
    void (*xSetForeground) (Display * display, GC gc, unsigned long foreground); /* 63 */
    void (*xSetClipMask) (Display * display, GC gc, Pixmap pixmap); /* 64 */
    void (*xSetClipOrigin) (Display * display, GC gc, int clip_x_origin, int clip_y_origin); /* 65 */
    void (*xSetTSOrigin) (Display * display, GC gc, int ts_x_origin, int ts_y_origin); /* 66 */
    void (*xChangeGC) (Display * d, GC gc, unsigned long mask, XGCValues * values); /* 67 */
    void (*xSetFont) (Display * display, GC gc, Font font); /* 68 */
    void (*xSetArcMode) (Display * display, GC gc, int arc_mode); /* 69 */
    void (*xSetStipple) (Display * display, GC gc, Pixmap stipple); /* 70 */
    void (*xSetFillRule) (Display * display, GC gc, int fill_rule); /* 71 */
    void (*xSetFillStyle) (Display * display, GC gc, int fill_style); /* 72 */
    void (*xSetFunction) (Display * display, GC gc, int function); /* 73 */
    void (*xSetLineAttributes) (Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style); /* 74 */
    int (*_XInitImageFuncPtrs) (XImage * image); /* 75 */
    XIC (*xCreateIC) (void); /* 76 */
    XVisualInfo * (*xGetVisualInfo) (Display * display, long vinfo_mask, XVisualInfo * vinfo_template, int * nitems_return); /* 77 */
    void (*xSetWMClientMachine) (Display * display, Window w, XTextProperty * text_prop); /* 78 */
    Status (*xStringListToTextProperty) (char ** list, int count, XTextProperty * text_prop_return); /* 79 */
    void (*xDrawSegments) (Display * display, Drawable d, GC gc, XSegment * segments, int nsegments); /* 80 */
    void (*xForceScreenSaver) (Display * display, int mode); /* 81 */
    void (*xDrawLine) (Display * d, Drawable dr, GC g, int x1, int y1, int x2, int y2); /* 82 */
    void (*xFillRectangle) (Display * display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height); /* 83 */
    void (*xClearWindow) (Display * d, Window w); /* 84 */
    void (*xDrawPoint) (Display * display, Drawable d, GC gc, int x, int y); /* 85 */
    void (*xDrawPoints) (Display * display, Drawable d, GC gc, XPoint * points, int npoints, int mode); /* 86 */
    void (*xWarpPointer) (Display * display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y); /* 87 */
    void (*xQueryColor) (Display * display, Colormap colormap, XColor * def_in_out); /* 88 */
    void (*xQueryColors) (Display * display, Colormap colormap, XColor * defs_in_out, int ncolors); /* 89 */
    Status (*xQueryTree) (Display * d, Window w1, Window * w2, Window * w3, Window ** w4, unsigned int * ui); /* 90 */
    int (*xSync) (Display * display, Bool flag); /* 91 */
#endif /* MAC_OSX_TK */
} TkIntXlibStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern TkIntXlibStubs *tkIntXlibStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifdef __WIN32__
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XCreatePixmapCursor
#define XCreatePixmapCursor \
	(tkIntXlibStubsPtr->xCreatePixmapCursor) /* 7 */
#endif
#ifndef XCreateGlyphCursor
#define XCreateGlyphCursor \
	(tkIntXlibStubsPtr->xCreateGlyphCursor) /* 8 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 9 */
#endif
#ifndef XListHosts
#define XListHosts \
	(tkIntXlibStubsPtr->xListHosts) /* 10 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 11 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 12 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 13 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 14 */
#endif
#ifndef XIconifyWindow
#define XIconifyWindow \
	(tkIntXlibStubsPtr->xIconifyWindow) /* 15 */
#endif
#ifndef XWithdrawWindow
#define XWithdrawWindow \
	(tkIntXlibStubsPtr->xWithdrawWindow) /* 16 */
#endif
#ifndef XGetWMColormapWindows
#define XGetWMColormapWindows \
	(tkIntXlibStubsPtr->xGetWMColormapWindows) /* 17 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 18 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 19 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 20 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 21 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 22 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 23 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 24 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 25 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 26 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 27 */
#endif
#ifndef XDeleteProperty
#define XDeleteProperty \
	(tkIntXlibStubsPtr->xDeleteProperty) /* 28 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 29 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 30 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 31 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 32 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 33 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 34 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 35 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 36 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 37 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 38 */
#endif
#ifndef XFreeCursor
#define XFreeCursor \
	(tkIntXlibStubsPtr->xFreeCursor) /* 39 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 40 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 41 */
#endif
#ifndef XGetInputFocus
#define XGetInputFocus \
	(tkIntXlibStubsPtr->xGetInputFocus) /* 42 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 43 */
#endif
#ifndef XGetWindowAttributes
#define XGetWindowAttributes \
	(tkIntXlibStubsPtr->xGetWindowAttributes) /* 44 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 45 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 46 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 47 */
#endif
#ifndef XLookupColor
#define XLookupColor \
	(tkIntXlibStubsPtr->xLookupColor) /* 48 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 49 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 50 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 51 */
#endif
#ifndef XNextEvent
#define XNextEvent \
	(tkIntXlibStubsPtr->xNextEvent) /* 52 */
#endif
#ifndef XPutBackEvent
#define XPutBackEvent \
	(tkIntXlibStubsPtr->xPutBackEvent) /* 53 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 54 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 55 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 56 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 57 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 58 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 59 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 60 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 61 */
#endif
#ifndef XSetCommand
#define XSetCommand \
	(tkIntXlibStubsPtr->xSetCommand) /* 62 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 63 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 64 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 65 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 66 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 67 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 68 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 69 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 70 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 71 */
#endif
#ifndef XTranslateCoordinates
#define XTranslateCoordinates \
	(tkIntXlibStubsPtr->xTranslateCoordinates) /* 72 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 73 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 74 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 75 */
#endif
#ifndef XWindowEvent
#define XWindowEvent \
	(tkIntXlibStubsPtr->xWindowEvent) /* 76 */
#endif
#ifndef XDestroyIC
#define XDestroyIC \
	(tkIntXlibStubsPtr->xDestroyIC) /* 77 */
#endif
#ifndef XFilterEvent
#define XFilterEvent \
	(tkIntXlibStubsPtr->xFilterEvent) /* 78 */
#endif
#ifndef XmbLookupString
#define XmbLookupString \
	(tkIntXlibStubsPtr->xmbLookupString) /* 79 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 80 */
#endif
/* Slot 81 is reserved */
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 82 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 83 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 84 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 85 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 86 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 87 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 88 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 89 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 90 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 91 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 92 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 93 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 94 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 95 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 96 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 97 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 98 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 99 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 100 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 101 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 102 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 103 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 104 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 105 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 106 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef XSetDashes
#define XSetDashes \
	(tkIntXlibStubsPtr->xSetDashes) /* 0 */
#endif
#ifndef XGetModifierMapping
#define XGetModifierMapping \
	(tkIntXlibStubsPtr->xGetModifierMapping) /* 1 */
#endif
#ifndef XCreateImage
#define XCreateImage \
	(tkIntXlibStubsPtr->xCreateImage) /* 2 */
#endif
#ifndef XGetImage
#define XGetImage \
	(tkIntXlibStubsPtr->xGetImage) /* 3 */
#endif
#ifndef XGetAtomName
#define XGetAtomName \
	(tkIntXlibStubsPtr->xGetAtomName) /* 4 */
#endif
#ifndef XKeysymToString
#define XKeysymToString \
	(tkIntXlibStubsPtr->xKeysymToString) /* 5 */
#endif
#ifndef XCreateColormap
#define XCreateColormap \
	(tkIntXlibStubsPtr->xCreateColormap) /* 6 */
#endif
#ifndef XGContextFromGC
#define XGContextFromGC \
	(tkIntXlibStubsPtr->xGContextFromGC) /* 7 */
#endif
#ifndef XKeycodeToKeysym
#define XKeycodeToKeysym \
	(tkIntXlibStubsPtr->xKeycodeToKeysym) /* 8 */
#endif
#ifndef XStringToKeysym
#define XStringToKeysym \
	(tkIntXlibStubsPtr->xStringToKeysym) /* 9 */
#endif
#ifndef XRootWindow
#define XRootWindow \
	(tkIntXlibStubsPtr->xRootWindow) /* 10 */
#endif
#ifndef XSetErrorHandler
#define XSetErrorHandler \
	(tkIntXlibStubsPtr->xSetErrorHandler) /* 11 */
#endif
#ifndef XAllocColor
#define XAllocColor \
	(tkIntXlibStubsPtr->xAllocColor) /* 12 */
#endif
#ifndef XBell
#define XBell \
	(tkIntXlibStubsPtr->xBell) /* 13 */
#endif
#ifndef XChangeProperty
#define XChangeProperty \
	(tkIntXlibStubsPtr->xChangeProperty) /* 14 */
#endif
#ifndef XChangeWindowAttributes
#define XChangeWindowAttributes \
	(tkIntXlibStubsPtr->xChangeWindowAttributes) /* 15 */
#endif
#ifndef XConfigureWindow
#define XConfigureWindow \
	(tkIntXlibStubsPtr->xConfigureWindow) /* 16 */
#endif
#ifndef XCopyArea
#define XCopyArea \
	(tkIntXlibStubsPtr->xCopyArea) /* 17 */
#endif
#ifndef XCopyPlane
#define XCopyPlane \
	(tkIntXlibStubsPtr->xCopyPlane) /* 18 */
#endif
#ifndef XCreateBitmapFromData
#define XCreateBitmapFromData \
	(tkIntXlibStubsPtr->xCreateBitmapFromData) /* 19 */
#endif
#ifndef XDefineCursor
#define XDefineCursor \
	(tkIntXlibStubsPtr->xDefineCursor) /* 20 */
#endif
#ifndef XDestroyWindow
#define XDestroyWindow \
	(tkIntXlibStubsPtr->xDestroyWindow) /* 21 */
#endif
#ifndef XDrawArc
#define XDrawArc \
	(tkIntXlibStubsPtr->xDrawArc) /* 22 */
#endif
#ifndef XDrawLines
#define XDrawLines \
	(tkIntXlibStubsPtr->xDrawLines) /* 23 */
#endif
#ifndef XDrawRectangle
#define XDrawRectangle \
	(tkIntXlibStubsPtr->xDrawRectangle) /* 24 */
#endif
#ifndef XFillArc
#define XFillArc \
	(tkIntXlibStubsPtr->xFillArc) /* 25 */
#endif
#ifndef XFillPolygon
#define XFillPolygon \
	(tkIntXlibStubsPtr->xFillPolygon) /* 26 */
#endif
#ifndef XFillRectangles
#define XFillRectangles \
	(tkIntXlibStubsPtr->xFillRectangles) /* 27 */
#endif
#ifndef XFreeColormap
#define XFreeColormap \
	(tkIntXlibStubsPtr->xFreeColormap) /* 28 */
#endif
#ifndef XFreeColors
#define XFreeColors \
	(tkIntXlibStubsPtr->xFreeColors) /* 29 */
#endif
#ifndef XFreeModifiermap
#define XFreeModifiermap \
	(tkIntXlibStubsPtr->xFreeModifiermap) /* 30 */
#endif
#ifndef XGetGeometry
#define XGetGeometry \
	(tkIntXlibStubsPtr->xGetGeometry) /* 31 */
#endif
#ifndef XGetWindowProperty
#define XGetWindowProperty \
	(tkIntXlibStubsPtr->xGetWindowProperty) /* 32 */
#endif
#ifndef XGrabKeyboard
#define XGrabKeyboard \
	(tkIntXlibStubsPtr->xGrabKeyboard) /* 33 */
#endif
#ifndef XGrabPointer
#define XGrabPointer \
	(tkIntXlibStubsPtr->xGrabPointer) /* 34 */
#endif
#ifndef XKeysymToKeycode
#define XKeysymToKeycode \
	(tkIntXlibStubsPtr->xKeysymToKeycode) /* 35 */
#endif
#ifndef XMapWindow
#define XMapWindow \
	(tkIntXlibStubsPtr->xMapWindow) /* 36 */
#endif
#ifndef XMoveResizeWindow
#define XMoveResizeWindow \
	(tkIntXlibStubsPtr->xMoveResizeWindow) /* 37 */
#endif
#ifndef XMoveWindow
#define XMoveWindow \
	(tkIntXlibStubsPtr->xMoveWindow) /* 38 */
#endif
#ifndef XQueryPointer
#define XQueryPointer \
	(tkIntXlibStubsPtr->xQueryPointer) /* 39 */
#endif
#ifndef XRaiseWindow
#define XRaiseWindow \
	(tkIntXlibStubsPtr->xRaiseWindow) /* 40 */
#endif
#ifndef XRefreshKeyboardMapping
#define XRefreshKeyboardMapping \
	(tkIntXlibStubsPtr->xRefreshKeyboardMapping) /* 41 */
#endif
#ifndef XResizeWindow
#define XResizeWindow \
	(tkIntXlibStubsPtr->xResizeWindow) /* 42 */
#endif
#ifndef XSelectInput
#define XSelectInput \
	(tkIntXlibStubsPtr->xSelectInput) /* 43 */
#endif
#ifndef XSendEvent
#define XSendEvent \
	(tkIntXlibStubsPtr->xSendEvent) /* 44 */
#endif
#ifndef XSetIconName
#define XSetIconName \
	(tkIntXlibStubsPtr->xSetIconName) /* 45 */
#endif
#ifndef XSetInputFocus
#define XSetInputFocus \
	(tkIntXlibStubsPtr->xSetInputFocus) /* 46 */
#endif
#ifndef XSetSelectionOwner
#define XSetSelectionOwner \
	(tkIntXlibStubsPtr->xSetSelectionOwner) /* 47 */
#endif
#ifndef XSetWindowBackground
#define XSetWindowBackground \
	(tkIntXlibStubsPtr->xSetWindowBackground) /* 48 */
#endif
#ifndef XSetWindowBackgroundPixmap
#define XSetWindowBackgroundPixmap \
	(tkIntXlibStubsPtr->xSetWindowBackgroundPixmap) /* 49 */
#endif
#ifndef XSetWindowBorder
#define XSetWindowBorder \
	(tkIntXlibStubsPtr->xSetWindowBorder) /* 50 */
#endif
#ifndef XSetWindowBorderPixmap
#define XSetWindowBorderPixmap \
	(tkIntXlibStubsPtr->xSetWindowBorderPixmap) /* 51 */
#endif
#ifndef XSetWindowBorderWidth
#define XSetWindowBorderWidth \
	(tkIntXlibStubsPtr->xSetWindowBorderWidth) /* 52 */
#endif
#ifndef XSetWindowColormap
#define XSetWindowColormap \
	(tkIntXlibStubsPtr->xSetWindowColormap) /* 53 */
#endif
#ifndef XUngrabKeyboard
#define XUngrabKeyboard \
	(tkIntXlibStubsPtr->xUngrabKeyboard) /* 54 */
#endif
#ifndef XUngrabPointer
#define XUngrabPointer \
	(tkIntXlibStubsPtr->xUngrabPointer) /* 55 */
#endif
#ifndef XUnmapWindow
#define XUnmapWindow \
	(tkIntXlibStubsPtr->xUnmapWindow) /* 56 */
#endif
#ifndef TkPutImage
#define TkPutImage \
	(tkIntXlibStubsPtr->tkPutImage) /* 57 */
#endif
#ifndef XParseColor
#define XParseColor \
	(tkIntXlibStubsPtr->xParseColor) /* 58 */
#endif
#ifndef XCreateGC
#define XCreateGC \
	(tkIntXlibStubsPtr->xCreateGC) /* 59 */
#endif
#ifndef XFreeGC
#define XFreeGC \
	(tkIntXlibStubsPtr->xFreeGC) /* 60 */
#endif
#ifndef XInternAtom
#define XInternAtom \
	(tkIntXlibStubsPtr->xInternAtom) /* 61 */
#endif
#ifndef XSetBackground
#define XSetBackground \
	(tkIntXlibStubsPtr->xSetBackground) /* 62 */
#endif
#ifndef XSetForeground
#define XSetForeground \
	(tkIntXlibStubsPtr->xSetForeground) /* 63 */
#endif
#ifndef XSetClipMask
#define XSetClipMask \
	(tkIntXlibStubsPtr->xSetClipMask) /* 64 */
#endif
#ifndef XSetClipOrigin
#define XSetClipOrigin \
	(tkIntXlibStubsPtr->xSetClipOrigin) /* 65 */
#endif
#ifndef XSetTSOrigin
#define XSetTSOrigin \
	(tkIntXlibStubsPtr->xSetTSOrigin) /* 66 */
#endif
#ifndef XChangeGC
#define XChangeGC \
	(tkIntXlibStubsPtr->xChangeGC) /* 67 */
#endif
#ifndef XSetFont
#define XSetFont \
	(tkIntXlibStubsPtr->xSetFont) /* 68 */
#endif
#ifndef XSetArcMode
#define XSetArcMode \
	(tkIntXlibStubsPtr->xSetArcMode) /* 69 */
#endif
#ifndef XSetStipple
#define XSetStipple \
	(tkIntXlibStubsPtr->xSetStipple) /* 70 */
#endif
#ifndef XSetFillRule
#define XSetFillRule \
	(tkIntXlibStubsPtr->xSetFillRule) /* 71 */
#endif
#ifndef XSetFillStyle
#define XSetFillStyle \
	(tkIntXlibStubsPtr->xSetFillStyle) /* 72 */
#endif
#ifndef XSetFunction
#define XSetFunction \
	(tkIntXlibStubsPtr->xSetFunction) /* 73 */
#endif
#ifndef XSetLineAttributes
#define XSetLineAttributes \
	(tkIntXlibStubsPtr->xSetLineAttributes) /* 74 */
#endif
#ifndef _XInitImageFuncPtrs
#define _XInitImageFuncPtrs \
	(tkIntXlibStubsPtr->_XInitImageFuncPtrs) /* 75 */
#endif
#ifndef XCreateIC
#define XCreateIC \
	(tkIntXlibStubsPtr->xCreateIC) /* 76 */
#endif
#ifndef XGetVisualInfo
#define XGetVisualInfo \
	(tkIntXlibStubsPtr->xGetVisualInfo) /* 77 */
#endif
#ifndef XSetWMClientMachine
#define XSetWMClientMachine \
	(tkIntXlibStubsPtr->xSetWMClientMachine) /* 78 */
#endif
#ifndef XStringListToTextProperty
#define XStringListToTextProperty \
	(tkIntXlibStubsPtr->xStringListToTextProperty) /* 79 */
#endif
#ifndef XDrawSegments
#define XDrawSegments \
	(tkIntXlibStubsPtr->xDrawSegments) /* 80 */
#endif
#ifndef XForceScreenSaver
#define XForceScreenSaver \
	(tkIntXlibStubsPtr->xForceScreenSaver) /* 81 */
#endif
#ifndef XDrawLine
#define XDrawLine \
	(tkIntXlibStubsPtr->xDrawLine) /* 82 */
#endif
#ifndef XFillRectangle
#define XFillRectangle \
	(tkIntXlibStubsPtr->xFillRectangle) /* 83 */
#endif
#ifndef XClearWindow
#define XClearWindow \
	(tkIntXlibStubsPtr->xClearWindow) /* 84 */
#endif
#ifndef XDrawPoint
#define XDrawPoint \
	(tkIntXlibStubsPtr->xDrawPoint) /* 85 */
#endif
#ifndef XDrawPoints
#define XDrawPoints \
	(tkIntXlibStubsPtr->xDrawPoints) /* 86 */
#endif
#ifndef XWarpPointer
#define XWarpPointer \
	(tkIntXlibStubsPtr->xWarpPointer) /* 87 */
#endif
#ifndef XQueryColor
#define XQueryColor \
	(tkIntXlibStubsPtr->xQueryColor) /* 88 */
#endif
#ifndef XQueryColors
#define XQueryColors \
	(tkIntXlibStubsPtr->xQueryColors) /* 89 */
#endif
#ifndef XQueryTree
#define XQueryTree \
	(tkIntXlibStubsPtr->xQueryTree) /* 90 */
#endif
#ifndef XSync
#define XSync \
	(tkIntXlibStubsPtr->xSync) /* 91 */
#endif
#endif /* MAC_OSX_TK */

#endif /* defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TKINTXLIBDECLS */
@


1.3
log
@removed trailing whitespace
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.2 2007/05/07 04:17:40 brlcad Exp $
d41 2
a42 2
EXTERN void		XSetDashes (Display * display, GC gc,
				int dash_offset, _Xconst char * dash_list,
d53 3
a55 3
EXTERN XImage *		XCreateImage (Display * d, Visual * v,
				unsigned int ui1, int i1, int i2, char * cp,
				unsigned int ui2, unsigned int ui3, int i3,
d61 2
a62 2
EXTERN XImage *		XGetImage (Display * d, Drawable dr, int i1, int i2,
				unsigned int ui1, unsigned int ui2,
d78 1
a78 1
EXTERN Colormap		XCreateColormap (Display * d, Window w, Visual * v,
d84 2
a85 2
EXTERN Cursor		XCreatePixmapCursor (Display * d, Pixmap p1,
				Pixmap p2, XColor * x1, XColor * x2,
d91 2
a92 2
EXTERN Cursor		XCreateGlyphCursor (Display * d, Font f1, Font f2,
				unsigned int ui1, unsigned int ui2,
d138 1
a138 1
EXTERN Status		XGetWMColormapWindows (Display * d, Window w,
d154 2
a155 2
EXTERN void		XChangeProperty (Display * d, Window w, Atom a1,
				Atom a2, int i1, int i2,
d161 1
a161 1
EXTERN void		XChangeWindowAttributes (Display * d, Window w,
d172 1
a172 1
EXTERN void		XConfigureWindow (Display * d, Window w,
d178 2
a179 2
EXTERN void		XCopyArea (Display * d, Drawable dr1, Drawable dr2,
				GC g, int i1, int i2, unsigned int ui1,
d185 3
a187 3
EXTERN void		XCopyPlane (Display * d, Drawable dr1, Drawable dr2,
				GC g, int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4,
d193 2
a194 2
EXTERN Pixmap		XCreateBitmapFromData (Display * display, Drawable d,
				_Xconst char * data, unsigned int width,
d215 2
a216 2
EXTERN void		XDrawArc (Display * d, Drawable dr, GC g, int i1,
				int i2, unsigned int ui1, unsigned int ui2,
d222 1
a222 1
EXTERN void		XDrawLines (Display * d, Drawable dr, GC g,
d228 2
a229 2
EXTERN void		XDrawRectangle (Display * d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
d235 2
a236 2
EXTERN void		XFillArc (Display * d, Drawable dr, GC g, int i1,
				int i2, unsigned int ui1, unsigned int ui2,
d242 1
a242 1
EXTERN void		XFillPolygon (Display * d, Drawable dr, GC g,
d248 1
a248 1
EXTERN void		XFillRectangles (Display * d, Drawable dr, GC g,
d264 1
a264 1
EXTERN void		XFreeColors (Display * d, Colormap c,
d280 3
a282 3
EXTERN Status		XGetGeometry (Display * d, Drawable dr, Window * w,
				int * i1, int * i2, unsigned int * ui1,
				unsigned int * ui2, unsigned int * ui3,
d293 3
a295 3
EXTERN int		XGetWindowProperty (Display * d, Window w, Atom a1,
				long l1, long l2, Bool b, Atom a2, Atom * ap,
				int * ip, unsigned long * ulp1,
d301 1
a301 1
EXTERN Status		XGetWindowAttributes (Display * d, Window w,
d307 1
a307 1
EXTERN int		XGrabKeyboard (Display * d, Window w, Bool b, int i1,
d313 2
a314 2
EXTERN int		XGrabPointer (Display * d, Window w1, Bool b,
				unsigned int ui, int i1, int i2, Window w2,
d325 1
a325 1
EXTERN Status		XLookupColor (Display * d, Colormap c1,
d336 1
a336 1
EXTERN void		XMoveResizeWindow (Display * d, Window w, int i1,
d357 1
a357 1
EXTERN void		XQueryColors (Display * d, Colormap c, XColor * x,
d363 2
a364 2
EXTERN Bool		XQueryPointer (Display * d, Window w1, Window * w2,
				Window * w3, int * i1, int * i2, int * i3,
d370 1
a370 1
EXTERN Status		XQueryTree (Display * d, Window w1, Window * w2,
d386 1
a386 1
EXTERN void		XResizeWindow (Display * d, Window w,
d397 1
a397 1
EXTERN Status		XSendEvent (Display * d, Window w, Bool b, long l,
d403 1
a403 1
EXTERN void		XSetCommand (Display * d, Window w, CONST char ** c,
d409 1
a409 1
EXTERN void		XSetIconName (Display * d, Window w,
d420 1
a420 1
EXTERN void		XSetSelectionOwner (Display * d, Atom a, Window w,
d426 1
a426 1
EXTERN void		XSetWindowBackground (Display * d, Window w,
d432 1
a432 1
EXTERN void		XSetWindowBackgroundPixmap (Display * d, Window w,
d438 1
a438 1
EXTERN void		XSetWindowBorder (Display * d, Window w,
d444 1
a444 1
EXTERN void		XSetWindowBorderPixmap (Display * d, Window w,
d450 1
a450 1
EXTERN void		XSetWindowBorderWidth (Display * d, Window w,
d456 1
a456 1
EXTERN void		XSetWindowColormap (Display * d, Window w,
d462 2
a463 2
EXTERN Bool		XTranslateCoordinates (Display * d, Window w1,
				Window w2, int i1, int i2, int * i3,
d484 1
a484 1
EXTERN void		XWindowEvent (Display * d, Window w, long l,
d500 1
a500 1
EXTERN int		XmbLookupString (XIC xi, XKeyPressedEvent * xk,
d506 4
a509 4
EXTERN void		TkPutImage (unsigned long * colors, int ncolors,
				Display * display, Drawable d, GC gc,
				XImage * image, int src_x, int src_y,
				int dest_x, int dest_y, unsigned int width,
d516 1
a516 1
EXTERN Status		XParseColor (Display * display, Colormap map,
d522 1
a522 1
EXTERN GC		XCreateGC (Display * display, Drawable d,
d533 2
a534 2
EXTERN Atom		XInternAtom (Display * display,
				_Xconst char * atom_name,
d540 1
a540 1
EXTERN void		XSetBackground (Display * display, GC gc,
d546 1
a546 1
EXTERN void		XSetForeground (Display * display, GC gc,
d552 1
a552 1
EXTERN void		XSetClipMask (Display * display, GC gc,
d558 1
a558 1
EXTERN void		XSetClipOrigin (Display * display, GC gc,
d564 1
a564 1
EXTERN void		XSetTSOrigin (Display * display, GC gc,
d570 1
a570 1
EXTERN void		XChangeGC (Display * d, GC gc, unsigned long mask,
d586 1
a586 1
EXTERN void		XSetStipple (Display * display, GC gc,
d592 1
a592 1
EXTERN void		XSetFillRule (Display * display, GC gc,
d598 1
a598 1
EXTERN void		XSetFillStyle (Display * display, GC gc,
d609 2
a610 2
EXTERN void		XSetLineAttributes (Display * display, GC gc,
				unsigned int line_width, int line_style,
d626 2
a627 2
EXTERN XVisualInfo *	XGetVisualInfo (Display * display, long vinfo_mask,
				XVisualInfo * vinfo_template,
d633 1
a633 1
EXTERN void		XSetWMClientMachine (Display * display, Window w,
d639 1
a639 1
EXTERN Status		XStringListToTextProperty (char ** list, int count,
d645 1
a645 1
EXTERN void		XDrawLine (Display * d, Drawable dr, GC g, int x1,
d651 2
a652 2
EXTERN void		XWarpPointer (Display * d, Window s, Window dw,
				int sx, int sy, unsigned int sw,
d658 2
a659 2
EXTERN void		XFillRectangle (Display * display, Drawable d, GC gc,
				int x, int y, unsigned int width,
d667 2
a668 2
EXTERN void		XSetDashes (Display * display, GC gc,
				int dash_offset, _Xconst char * dash_list,
d679 3
a681 3
EXTERN XImage *		XCreateImage (Display * d, Visual * v,
				unsigned int ui1, int i1, int i2, char * cp,
				unsigned int ui2, unsigned int ui3, int i3,
d687 2
a688 2
EXTERN XImage *		XGetImage (Display * d, Drawable dr, int i1, int i2,
				unsigned int ui1, unsigned int ui2,
d704 1
a704 1
EXTERN Colormap		XCreateColormap (Display * d, Window w, Visual * v,
d745 2
a746 2
EXTERN void		XChangeProperty (Display * d, Window w, Atom a1,
				Atom a2, int i1, int i2,
d752 1
a752 1
EXTERN void		XChangeWindowAttributes (Display * d, Window w,
d758 1
a758 1
EXTERN void		XConfigureWindow (Display * d, Window w,
d764 2
a765 2
EXTERN void		XCopyArea (Display * d, Drawable dr1, Drawable dr2,
				GC g, int i1, int i2, unsigned int ui1,
d771 3
a773 3
EXTERN void		XCopyPlane (Display * d, Drawable dr1, Drawable dr2,
				GC g, int i1, int i2, unsigned int ui1,
				unsigned int ui2, int i3, int i4,
d779 2
a780 2
EXTERN Pixmap		XCreateBitmapFromData (Display * display, Drawable d,
				_Xconst char * data, unsigned int width,
d796 2
a797 2
EXTERN void		XDrawArc (Display * d, Drawable dr, GC g, int i1,
				int i2, unsigned int ui1, unsigned int ui2,
d803 1
a803 1
EXTERN void		XDrawLines (Display * d, Drawable dr, GC g,
d809 2
a810 2
EXTERN void		XDrawRectangle (Display * d, Drawable dr, GC g,
				int i1, int i2, unsigned int ui1,
d816 2
a817 2
EXTERN void		XFillArc (Display * d, Drawable dr, GC g, int i1,
				int i2, unsigned int ui1, unsigned int ui2,
d823 1
a823 1
EXTERN void		XFillPolygon (Display * d, Drawable dr, GC g,
d829 1
a829 1
EXTERN void		XFillRectangles (Display * d, Drawable dr, GC g,
d840 1
a840 1
EXTERN void		XFreeColors (Display * d, Colormap c,
d851 3
a853 3
EXTERN Status		XGetGeometry (Display * d, Drawable dr, Window * w,
				int * i1, int * i2, unsigned int * ui1,
				unsigned int * ui2, unsigned int * ui3,
d859 3
a861 3
EXTERN int		XGetWindowProperty (Display * d, Window w, Atom a1,
				long l1, long l2, Bool b, Atom a2, Atom * ap,
				int * ip, unsigned long * ulp1,
d867 1
a867 1
EXTERN int		XGrabKeyboard (Display * d, Window w, Bool b, int i1,
d873 2
a874 2
EXTERN int		XGrabPointer (Display * d, Window w1, Bool b,
				unsigned int ui, int i1, int i2, Window w2,
d890 1
a890 1
EXTERN void		XMoveResizeWindow (Display * d, Window w, int i1,
d901 2
a902 2
EXTERN Bool		XQueryPointer (Display * d, Window w1, Window * w2,
				Window * w3, int * i1, int * i2, int * i3,
d918 1
a918 1
EXTERN void		XResizeWindow (Display * d, Window w,
d929 1
a929 1
EXTERN Status		XSendEvent (Display * d, Window w, Bool b, long l,
d935 1
a935 1
EXTERN void		XSetIconName (Display * d, Window w,
d946 1
a946 1
EXTERN void		XSetSelectionOwner (Display * d, Atom a, Window w,
d952 1
a952 1
EXTERN void		XSetWindowBackground (Display * d, Window w,
d958 1
a958 1
EXTERN void		XSetWindowBackgroundPixmap (Display * d, Window w,
d964 1
a964 1
EXTERN void		XSetWindowBorder (Display * d, Window w,
d970 1
a970 1
EXTERN void		XSetWindowBorderPixmap (Display * d, Window w,
d976 1
a976 1
EXTERN void		XSetWindowBorderWidth (Display * d, Window w,
d982 1
a982 1
EXTERN void		XSetWindowColormap (Display * d, Window w,
d1003 4
a1006 4
EXTERN void		TkPutImage (unsigned long * colors, int ncolors,
				Display * display, Drawable d, GC gc,
				XImage * image, int src_x, int src_y,
				int dest_x, int dest_y, unsigned int width,
d1012 1
a1012 1
EXTERN Status		XParseColor (Display * display, Colormap map,
d1018 1
a1018 1
EXTERN GC		XCreateGC (Display * display, Drawable d,
d1029 2
a1030 2
EXTERN Atom		XInternAtom (Display * display,
				_Xconst char * atom_name,
d1036 1
a1036 1
EXTERN void		XSetBackground (Display * display, GC gc,
d1042 1
a1042 1
EXTERN void		XSetForeground (Display * display, GC gc,
d1048 1
a1048 1
EXTERN void		XSetClipMask (Display * display, GC gc,
d1054 1
a1054 1
EXTERN void		XSetClipOrigin (Display * display, GC gc,
d1060 1
a1060 1
EXTERN void		XSetTSOrigin (Display * display, GC gc,
d1066 1
a1066 1
EXTERN void		XChangeGC (Display * d, GC gc, unsigned long mask,
d1082 1
a1082 1
EXTERN void		XSetStipple (Display * display, GC gc,
d1088 1
a1088 1
EXTERN void		XSetFillRule (Display * display, GC gc,
d1094 1
a1094 1
EXTERN void		XSetFillStyle (Display * display, GC gc,
d1105 2
a1106 2
EXTERN void		XSetLineAttributes (Display * display, GC gc,
				unsigned int line_width, int line_style,
d1122 2
a1123 2
EXTERN XVisualInfo *	XGetVisualInfo (Display * display, long vinfo_mask,
				XVisualInfo * vinfo_template,
d1129 1
a1129 1
EXTERN void		XSetWMClientMachine (Display * display, Window w,
d1135 1
a1135 1
EXTERN Status		XStringListToTextProperty (char ** list, int count,
d1141 1
a1141 1
EXTERN void		XDrawSegments (Display * display, Drawable d, GC gc,
d1152 1
a1152 1
EXTERN void		XDrawLine (Display * d, Drawable dr, GC g, int x1,
d1158 2
a1159 2
EXTERN void		XFillRectangle (Display * display, Drawable d, GC gc,
				int x, int y, unsigned int width,
d1170 1
a1170 1
EXTERN void		XDrawPoint (Display * display, Drawable d, GC gc,
d1176 1
a1176 1
EXTERN void		XDrawPoints (Display * display, Drawable d, GC gc,
d1182 4
a1185 4
EXTERN void		XWarpPointer (Display * display, Window src_w,
				Window dest_w, int src_x, int src_y,
				unsigned int src_width,
				unsigned int src_height, int dest_x,
d1191 1
a1191 1
EXTERN void		XQueryColor (Display * display, Colormap colormap,
d1197 1
a1197 1
EXTERN void		XQueryColors (Display * display, Colormap colormap,
d1203 1
a1203 1
EXTERN Status		XQueryTree (Display * d, Window w1, Window * w2,
@


1.2
log
@upgrade to tcl/tk 8.5a6 (from 8.5a5) .. includes even more (extensive) aquatk fixes/enhancements
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.21 2006/12/18 16:42:46 dgp Exp $
d41 2
a42 2
EXTERN void		XSetDashes (Display * display, GC gc, 
				int dash_offset, _Xconst char * dash_list, 
d53 3
a55 3
EXTERN XImage *		XCreateImage (Display * d, Visual * v, 
				unsigned int ui1, int i1, int i2, char * cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
d61 2
a62 2
EXTERN XImage *		XGetImage (Display * d, Drawable dr, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, 
d78 1
a78 1
EXTERN Colormap		XCreateColormap (Display * d, Window w, Visual * v, 
d84 2
a85 2
EXTERN Cursor		XCreatePixmapCursor (Display * d, Pixmap p1, 
				Pixmap p2, XColor * x1, XColor * x2, 
d91 2
a92 2
EXTERN Cursor		XCreateGlyphCursor (Display * d, Font f1, Font f2, 
				unsigned int ui1, unsigned int ui2, 
d138 1
a138 1
EXTERN Status		XGetWMColormapWindows (Display * d, Window w, 
d154 2
a155 2
EXTERN void		XChangeProperty (Display * d, Window w, Atom a1, 
				Atom a2, int i1, int i2, 
d161 1
a161 1
EXTERN void		XChangeWindowAttributes (Display * d, Window w, 
d172 1
a172 1
EXTERN void		XConfigureWindow (Display * d, Window w, 
d178 2
a179 2
EXTERN void		XCopyArea (Display * d, Drawable dr1, Drawable dr2, 
				GC g, int i1, int i2, unsigned int ui1, 
d185 3
a187 3
EXTERN void		XCopyPlane (Display * d, Drawable dr1, Drawable dr2, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4, 
d193 2
a194 2
EXTERN Pixmap		XCreateBitmapFromData (Display * display, Drawable d, 
				_Xconst char * data, unsigned int width, 
d215 2
a216 2
EXTERN void		XDrawArc (Display * d, Drawable dr, GC g, int i1, 
				int i2, unsigned int ui1, unsigned int ui2, 
d222 1
a222 1
EXTERN void		XDrawLines (Display * d, Drawable dr, GC g, 
d228 2
a229 2
EXTERN void		XDrawRectangle (Display * d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
d235 2
a236 2
EXTERN void		XFillArc (Display * d, Drawable dr, GC g, int i1, 
				int i2, unsigned int ui1, unsigned int ui2, 
d242 1
a242 1
EXTERN void		XFillPolygon (Display * d, Drawable dr, GC g, 
d248 1
a248 1
EXTERN void		XFillRectangles (Display * d, Drawable dr, GC g, 
d264 1
a264 1
EXTERN void		XFreeColors (Display * d, Colormap c, 
d280 3
a282 3
EXTERN Status		XGetGeometry (Display * d, Drawable dr, Window * w, 
				int * i1, int * i2, unsigned int * ui1, 
				unsigned int * ui2, unsigned int * ui3, 
d293 3
a295 3
EXTERN int		XGetWindowProperty (Display * d, Window w, Atom a1, 
				long l1, long l2, Bool b, Atom a2, Atom * ap, 
				int * ip, unsigned long * ulp1, 
d301 1
a301 1
EXTERN Status		XGetWindowAttributes (Display * d, Window w, 
d307 1
a307 1
EXTERN int		XGrabKeyboard (Display * d, Window w, Bool b, int i1, 
d313 2
a314 2
EXTERN int		XGrabPointer (Display * d, Window w1, Bool b, 
				unsigned int ui, int i1, int i2, Window w2, 
d325 1
a325 1
EXTERN Status		XLookupColor (Display * d, Colormap c1, 
d336 1
a336 1
EXTERN void		XMoveResizeWindow (Display * d, Window w, int i1, 
d357 1
a357 1
EXTERN void		XQueryColors (Display * d, Colormap c, XColor * x, 
d363 2
a364 2
EXTERN Bool		XQueryPointer (Display * d, Window w1, Window * w2, 
				Window * w3, int * i1, int * i2, int * i3, 
d370 1
a370 1
EXTERN Status		XQueryTree (Display * d, Window w1, Window * w2, 
d386 1
a386 1
EXTERN void		XResizeWindow (Display * d, Window w, 
d397 1
a397 1
EXTERN Status		XSendEvent (Display * d, Window w, Bool b, long l, 
d403 1
a403 1
EXTERN void		XSetCommand (Display * d, Window w, CONST char ** c, 
d409 1
a409 1
EXTERN void		XSetIconName (Display * d, Window w, 
d420 1
a420 1
EXTERN void		XSetSelectionOwner (Display * d, Atom a, Window w, 
d426 1
a426 1
EXTERN void		XSetWindowBackground (Display * d, Window w, 
d432 1
a432 1
EXTERN void		XSetWindowBackgroundPixmap (Display * d, Window w, 
d438 1
a438 1
EXTERN void		XSetWindowBorder (Display * d, Window w, 
d444 1
a444 1
EXTERN void		XSetWindowBorderPixmap (Display * d, Window w, 
d450 1
a450 1
EXTERN void		XSetWindowBorderWidth (Display * d, Window w, 
d456 1
a456 1
EXTERN void		XSetWindowColormap (Display * d, Window w, 
d462 2
a463 2
EXTERN Bool		XTranslateCoordinates (Display * d, Window w1, 
				Window w2, int i1, int i2, int * i3, 
d484 1
a484 1
EXTERN void		XWindowEvent (Display * d, Window w, long l, 
d500 1
a500 1
EXTERN int		XmbLookupString (XIC xi, XKeyPressedEvent * xk, 
d506 4
a509 4
EXTERN void		TkPutImage (unsigned long * colors, int ncolors, 
				Display * display, Drawable d, GC gc, 
				XImage * image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
d516 1
a516 1
EXTERN Status		XParseColor (Display * display, Colormap map, 
d522 1
a522 1
EXTERN GC		XCreateGC (Display * display, Drawable d, 
d533 2
a534 2
EXTERN Atom		XInternAtom (Display * display, 
				_Xconst char * atom_name, 
d540 1
a540 1
EXTERN void		XSetBackground (Display * display, GC gc, 
d546 1
a546 1
EXTERN void		XSetForeground (Display * display, GC gc, 
d552 1
a552 1
EXTERN void		XSetClipMask (Display * display, GC gc, 
d558 1
a558 1
EXTERN void		XSetClipOrigin (Display * display, GC gc, 
d564 1
a564 1
EXTERN void		XSetTSOrigin (Display * display, GC gc, 
d570 1
a570 1
EXTERN void		XChangeGC (Display * d, GC gc, unsigned long mask, 
d586 1
a586 1
EXTERN void		XSetStipple (Display * display, GC gc, 
d592 1
a592 1
EXTERN void		XSetFillRule (Display * display, GC gc, 
d598 1
a598 1
EXTERN void		XSetFillStyle (Display * display, GC gc, 
d609 2
a610 2
EXTERN void		XSetLineAttributes (Display * display, GC gc, 
				unsigned int line_width, int line_style, 
d626 2
a627 2
EXTERN XVisualInfo *	XGetVisualInfo (Display * display, long vinfo_mask, 
				XVisualInfo * vinfo_template, 
d633 1
a633 1
EXTERN void		XSetWMClientMachine (Display * display, Window w, 
d639 1
a639 1
EXTERN Status		XStringListToTextProperty (char ** list, int count, 
d645 1
a645 1
EXTERN void		XDrawLine (Display * d, Drawable dr, GC g, int x1, 
d651 2
a652 2
EXTERN void		XWarpPointer (Display * d, Window s, Window dw, 
				int sx, int sy, unsigned int sw, 
d658 2
a659 2
EXTERN void		XFillRectangle (Display * display, Drawable d, GC gc, 
				int x, int y, unsigned int width, 
d667 2
a668 2
EXTERN void		XSetDashes (Display * display, GC gc, 
				int dash_offset, _Xconst char * dash_list, 
d679 3
a681 3
EXTERN XImage *		XCreateImage (Display * d, Visual * v, 
				unsigned int ui1, int i1, int i2, char * cp, 
				unsigned int ui2, unsigned int ui3, int i3, 
d687 2
a688 2
EXTERN XImage *		XGetImage (Display * d, Drawable dr, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, 
d704 1
a704 1
EXTERN Colormap		XCreateColormap (Display * d, Window w, Visual * v, 
d745 2
a746 2
EXTERN void		XChangeProperty (Display * d, Window w, Atom a1, 
				Atom a2, int i1, int i2, 
d752 1
a752 1
EXTERN void		XChangeWindowAttributes (Display * d, Window w, 
d758 1
a758 1
EXTERN void		XConfigureWindow (Display * d, Window w, 
d764 2
a765 2
EXTERN void		XCopyArea (Display * d, Drawable dr1, Drawable dr2, 
				GC g, int i1, int i2, unsigned int ui1, 
d771 3
a773 3
EXTERN void		XCopyPlane (Display * d, Drawable dr1, Drawable dr2, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4, 
d779 2
a780 2
EXTERN Pixmap		XCreateBitmapFromData (Display * display, Drawable d, 
				_Xconst char * data, unsigned int width, 
d796 2
a797 2
EXTERN void		XDrawArc (Display * d, Drawable dr, GC g, int i1, 
				int i2, unsigned int ui1, unsigned int ui2, 
d803 1
a803 1
EXTERN void		XDrawLines (Display * d, Drawable dr, GC g, 
d809 2
a810 2
EXTERN void		XDrawRectangle (Display * d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
d816 2
a817 2
EXTERN void		XFillArc (Display * d, Drawable dr, GC g, int i1, 
				int i2, unsigned int ui1, unsigned int ui2, 
d823 1
a823 1
EXTERN void		XFillPolygon (Display * d, Drawable dr, GC g, 
d829 1
a829 1
EXTERN void		XFillRectangles (Display * d, Drawable dr, GC g, 
d840 1
a840 1
EXTERN void		XFreeColors (Display * d, Colormap c, 
d851 3
a853 3
EXTERN Status		XGetGeometry (Display * d, Drawable dr, Window * w, 
				int * i1, int * i2, unsigned int * ui1, 
				unsigned int * ui2, unsigned int * ui3, 
d859 3
a861 3
EXTERN int		XGetWindowProperty (Display * d, Window w, Atom a1, 
				long l1, long l2, Bool b, Atom a2, Atom * ap, 
				int * ip, unsigned long * ulp1, 
d867 1
a867 1
EXTERN int		XGrabKeyboard (Display * d, Window w, Bool b, int i1, 
d873 2
a874 2
EXTERN int		XGrabPointer (Display * d, Window w1, Bool b, 
				unsigned int ui, int i1, int i2, Window w2, 
d890 1
a890 1
EXTERN void		XMoveResizeWindow (Display * d, Window w, int i1, 
d901 2
a902 2
EXTERN Bool		XQueryPointer (Display * d, Window w1, Window * w2, 
				Window * w3, int * i1, int * i2, int * i3, 
d918 1
a918 1
EXTERN void		XResizeWindow (Display * d, Window w, 
d929 1
a929 1
EXTERN Status		XSendEvent (Display * d, Window w, Bool b, long l, 
d935 1
a935 1
EXTERN void		XSetIconName (Display * d, Window w, 
d946 1
a946 1
EXTERN void		XSetSelectionOwner (Display * d, Atom a, Window w, 
d952 1
a952 1
EXTERN void		XSetWindowBackground (Display * d, Window w, 
d958 1
a958 1
EXTERN void		XSetWindowBackgroundPixmap (Display * d, Window w, 
d964 1
a964 1
EXTERN void		XSetWindowBorder (Display * d, Window w, 
d970 1
a970 1
EXTERN void		XSetWindowBorderPixmap (Display * d, Window w, 
d976 1
a976 1
EXTERN void		XSetWindowBorderWidth (Display * d, Window w, 
d982 1
a982 1
EXTERN void		XSetWindowColormap (Display * d, Window w, 
d1003 4
a1006 4
EXTERN void		TkPutImage (unsigned long * colors, int ncolors, 
				Display * display, Drawable d, GC gc, 
				XImage * image, int src_x, int src_y, 
				int dest_x, int dest_y, unsigned int width, 
d1012 1
a1012 1
EXTERN Status		XParseColor (Display * display, Colormap map, 
d1018 1
a1018 1
EXTERN GC		XCreateGC (Display * display, Drawable d, 
d1029 2
a1030 2
EXTERN Atom		XInternAtom (Display * display, 
				_Xconst char * atom_name, 
d1036 1
a1036 1
EXTERN void		XSetBackground (Display * display, GC gc, 
d1042 1
a1042 1
EXTERN void		XSetForeground (Display * display, GC gc, 
d1048 1
a1048 1
EXTERN void		XSetClipMask (Display * display, GC gc, 
d1054 1
a1054 1
EXTERN void		XSetClipOrigin (Display * display, GC gc, 
d1060 1
a1060 1
EXTERN void		XSetTSOrigin (Display * display, GC gc, 
d1066 1
a1066 1
EXTERN void		XChangeGC (Display * d, GC gc, unsigned long mask, 
d1082 1
a1082 1
EXTERN void		XSetStipple (Display * display, GC gc, 
d1088 1
a1088 1
EXTERN void		XSetFillRule (Display * display, GC gc, 
d1094 1
a1094 1
EXTERN void		XSetFillStyle (Display * display, GC gc, 
d1105 2
a1106 2
EXTERN void		XSetLineAttributes (Display * display, GC gc, 
				unsigned int line_width, int line_style, 
d1122 2
a1123 2
EXTERN XVisualInfo *	XGetVisualInfo (Display * display, long vinfo_mask, 
				XVisualInfo * vinfo_template, 
d1129 1
a1129 1
EXTERN void		XSetWMClientMachine (Display * display, Window w, 
d1135 1
a1135 1
EXTERN Status		XStringListToTextProperty (char ** list, int count, 
d1141 1
a1141 1
EXTERN void		XDrawSegments (Display * display, Drawable d, GC gc, 
d1152 1
a1152 1
EXTERN void		XDrawLine (Display * d, Drawable dr, GC g, int x1, 
d1158 2
a1159 2
EXTERN void		XFillRectangle (Display * display, Drawable d, GC gc, 
				int x, int y, unsigned int width, 
d1170 1
a1170 1
EXTERN void		XDrawPoint (Display * display, Drawable d, GC gc, 
d1176 1
a1176 1
EXTERN void		XDrawPoints (Display * display, Drawable d, GC gc, 
d1182 4
a1185 4
EXTERN void		XWarpPointer (Display * display, Window src_w, 
				Window dest_w, int src_x, int src_y, 
				unsigned int src_width, 
				unsigned int src_height, int dest_x, 
d1191 1
a1191 1
EXTERN void		XQueryColor (Display * display, Colormap colormap, 
d1197 1
a1197 1
EXTERN void		XQueryColors (Display * display, Colormap colormap, 
d1203 1
a1203 1
EXTERN Status		XQueryTree (Display * d, Window w1, Window * w2, 
@


1.1
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntXlibDecls.h,v 1.20 2005/11/27 02:36:14 das Exp $
d41 1
a41 1
EXTERN void		XSetDashes _ANSI_ARGS_((Display * display, GC gc, 
d43 1
a43 1
				int n));
d48 1
a48 1
EXTERN XModifierKeymap * XGetModifierMapping _ANSI_ARGS_((Display * d));
d53 1
a53 1
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display * d, Visual * v, 
d56 1
a56 1
				int i4));
d61 3
a63 3
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display * d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, unsigned long ul, int i3));
d68 1
a68 1
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display * d, Atom a));
d73 1
a73 1
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
d78 2
a79 2
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display * d, Window w, 
				Visual * v, int i));
d84 3
a86 4
EXTERN Cursor		XCreatePixmapCursor _ANSI_ARGS_((Display * d, 
				Pixmap p1, Pixmap p2, XColor * x1, 
				XColor * x2, unsigned int ui1, 
				unsigned int ui2));
d91 3
a93 3
EXTERN Cursor		XCreateGlyphCursor _ANSI_ARGS_((Display * d, Font f1, 
				Font f2, unsigned int ui1, unsigned int ui2, 
				XColor * x1, XColor * x2));
d98 1
a98 1
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
d103 1
a103 2
EXTERN XHostAddress *	XListHosts _ANSI_ARGS_((Display * d, int * i, 
				Bool * b));
d108 1
a108 2
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display * d, 
				unsigned int k, int i));
d113 1
a113 1
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char * c));
d118 1
a118 1
EXTERN Window		XRootWindow _ANSI_ARGS_((Display * d, int i));
d123 1
a123 1
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
d128 1
a128 2
EXTERN Status		XIconifyWindow _ANSI_ARGS_((Display * d, Window w, 
				int i));
d133 1
a133 2
EXTERN Status		XWithdrawWindow _ANSI_ARGS_((Display * d, Window w, 
				int i));
d138 2
a139 2
EXTERN Status		XGetWMColormapWindows _ANSI_ARGS_((Display * d, 
				Window w, Window ** wpp, int * ip));
d144 1
a144 2
EXTERN Status		XAllocColor _ANSI_ARGS_((Display * d, Colormap c, 
				XColor * xp));
d149 1
a149 1
EXTERN void		XBell _ANSI_ARGS_((Display * d, int i));
d154 3
a156 3
EXTERN void		XChangeProperty _ANSI_ARGS_((Display * d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
				_Xconst unsigned char * c, int i3));
d161 2
a162 3
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display * d, 
				Window w, unsigned long ul, 
				XSetWindowAttributes * x));
d167 1
a167 1
EXTERN void		XClearWindow _ANSI_ARGS_((Display * d, Window w));
d172 2
a173 2
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display * d, Window w, 
				unsigned int i, XWindowChanges * x));
d178 3
a180 4
EXTERN void		XCopyArea _ANSI_ARGS_((Display * d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4));
d185 4
a188 4
EXTERN void		XCopyPlane _ANSI_ARGS_((Display * d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4, unsigned long ul));
d193 3
a195 3
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display * display, 
				Drawable d, _Xconst char * data, 
				unsigned int width, unsigned int height));
d200 1
a200 2
EXTERN void		XDefineCursor _ANSI_ARGS_((Display * d, Window w, 
				Cursor c));
d205 1
a205 2
EXTERN void		XDeleteProperty _ANSI_ARGS_((Display * d, Window w, 
				Atom a));
d210 1
a210 1
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display * d, Window w));
d215 3
a217 3
EXTERN void		XDrawArc _ANSI_ARGS_((Display * d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
d222 2
a223 2
EXTERN void		XDrawLines _ANSI_ARGS_((Display * d, Drawable dr, 
				GC g, XPoint * x, int i1, int i2));
d228 3
a230 3
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display * d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
d235 3
a237 3
EXTERN void		XFillArc _ANSI_ARGS_((Display * d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
d242 2
a243 2
EXTERN void		XFillPolygon _ANSI_ARGS_((Display * d, Drawable dr, 
				GC g, XPoint * x, int i1, int i2, int i3));
d248 2
a249 2
EXTERN void		XFillRectangles _ANSI_ARGS_((Display * d, 
				Drawable dr, GC g, XRectangle * x, int i));
d254 1
a254 1
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display * d, int i));
d259 1
a259 1
EXTERN void		XFreeColormap _ANSI_ARGS_((Display * d, Colormap c));
d264 2
a265 2
EXTERN void		XFreeColors _ANSI_ARGS_((Display * d, Colormap c, 
				unsigned long * ulp, int i, unsigned long ul));
d270 1
a270 1
EXTERN void		XFreeCursor _ANSI_ARGS_((Display * d, Cursor c));
d275 1
a275 1
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap * x));
d280 4
a283 4
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display * d, Drawable dr, 
				Window * w, int * i1, int * i2, 
				unsigned int * ui1, unsigned int * ui2, 
				unsigned int * ui3, unsigned int * ui4));
d288 1
a288 2
EXTERN void		XGetInputFocus _ANSI_ARGS_((Display * d, Window * w, 
				int * i));
d293 4
a296 5
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display * d, 
				Window w, Atom a1, long l1, long l2, Bool b, 
				Atom a2, Atom * ap, int * ip, 
				unsigned long * ulp1, unsigned long * ulp2, 
				unsigned char ** cpp));
d301 2
a302 2
EXTERN Status		XGetWindowAttributes _ANSI_ARGS_((Display * d, 
				Window w, XWindowAttributes * x));
d307 2
a308 2
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display * d, Window w, 
				Bool b, int i1, int i2, Time t));
d313 3
a315 3
EXTERN int		XGrabPointer _ANSI_ARGS_((Display * d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
				Window w2, Cursor c, Time t));
d320 1
a320 1
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display * d, KeySym k));
d325 2
a326 2
EXTERN Status		XLookupColor _ANSI_ARGS_((Display * d, Colormap c1, 
				_Xconst char * c2, XColor * x1, XColor * x2));
d331 1
a331 1
EXTERN void		XMapWindow _ANSI_ARGS_((Display * d, Window w));
d336 2
a337 3
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display * d, Window w, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
d342 1
a342 2
EXTERN void		XMoveWindow _ANSI_ARGS_((Display * d, Window w, 
				int i1, int i2));
d347 1
a347 1
EXTERN void		XNextEvent _ANSI_ARGS_((Display * d, XEvent * x));
d352 1
a352 1
EXTERN void		XPutBackEvent _ANSI_ARGS_((Display * d, XEvent * x));
d357 2
a358 2
EXTERN void		XQueryColors _ANSI_ARGS_((Display * d, Colormap c, 
				XColor * x, int i));
d363 3
a365 3
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display * d, Window w1, 
				Window * w2, Window * w3, int * i1, int * i2, 
				int * i3, int * i4, unsigned int * ui));
d370 2
a371 3
EXTERN Status		XQueryTree _ANSI_ARGS_((Display * d, Window w1, 
				Window * w2, Window * w3, Window ** w4, 
				unsigned int * ui));
d376 1
a376 1
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display * d, Window w));
d381 1
a381 2
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent * x));
d386 2
a387 2
EXTERN void		XResizeWindow _ANSI_ARGS_((Display * d, Window w, 
				unsigned int ui1, unsigned int ui2));
d392 1
a392 2
EXTERN void		XSelectInput _ANSI_ARGS_((Display * d, Window w, 
				long l));
d397 2
a398 2
EXTERN Status		XSendEvent _ANSI_ARGS_((Display * d, Window w, 
				Bool b, long l, XEvent * x));
d403 2
a404 2
EXTERN void		XSetCommand _ANSI_ARGS_((Display * d, Window w, 
				CONST char ** c, int i));
d409 2
a410 2
EXTERN void		XSetIconName _ANSI_ARGS_((Display * d, Window w, 
				_Xconst char * c));
d415 1
a415 2
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display * d, Window w, 
				int i, Time t));
d420 2
a421 2
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display * d, Atom a, 
				Window w, Time t));
d426 2
a427 2
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display * d, 
				Window w, unsigned long ul));
d432 2
a433 2
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display * d, 
				Window w, Pixmap p));
d438 2
a439 2
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display * d, Window w, 
				unsigned long ul));
d444 2
a445 2
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display * d, 
				Window w, Pixmap p));
d450 2
a451 2
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display * d, 
				Window w, unsigned int ui));
d456 2
a457 2
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display * d, 
				Window w, Colormap c));
d462 3
a464 3
EXTERN Bool		XTranslateCoordinates _ANSI_ARGS_((Display * d, 
				Window w1, Window w2, int i1, int i2, 
				int * i3, int * i4, Window * w3));
d469 1
a469 1
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display * d, Time t));
d474 1
a474 1
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display * d, Time t));
d479 1
a479 1
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display * d, Window w));
d484 2
a485 2
EXTERN void		XWindowEvent _ANSI_ARGS_((Display * d, Window w, 
				long l, XEvent * x));
d490 1
a490 1
EXTERN void		XDestroyIC _ANSI_ARGS_((XIC x));
d495 1
a495 1
EXTERN Bool		XFilterEvent _ANSI_ARGS_((XEvent * x, Window w));
d500 2
a501 3
EXTERN int		XmbLookupString _ANSI_ARGS_((XIC xi, 
				XKeyPressedEvent * xk, char * c, int i, 
				KeySym * k, Status * s));
d506 3
a508 3
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display * display, Drawable d, 
				GC gc, XImage * image, int src_x, int src_y, 
d510 1
a510 1
				unsigned int height));
d516 2
a517 3
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char * spec, 
				XColor * colorPtr));
d522 2
a523 2
EXTERN GC		XCreateGC _ANSI_ARGS_((Display * display, Drawable d, 
				unsigned long valuemask, XGCValues * values));
d528 1
a528 1
EXTERN void		XFreeGC _ANSI_ARGS_((Display * display, GC gc));
d533 1
a533 1
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display * display, 
d535 1
a535 1
				Bool only_if_exists));
d540 2
a541 2
EXTERN void		XSetBackground _ANSI_ARGS_((Display * display, GC gc, 
				unsigned long foreground));
d546 2
a547 2
EXTERN void		XSetForeground _ANSI_ARGS_((Display * display, GC gc, 
				unsigned long foreground));
d552 2
a553 2
EXTERN void		XSetClipMask _ANSI_ARGS_((Display * display, GC gc, 
				Pixmap pixmap));
d558 2
a559 2
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display * display, GC gc, 
				int clip_x_origin, int clip_y_origin));
d564 2
a565 2
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display * display, GC gc, 
				int ts_x_origin, int ts_y_origin));
d570 2
a571 2
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
				unsigned long mask, XGCValues * values));
d576 1
a576 2
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
				Font font));
d581 1
a581 2
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
				int arc_mode));
d586 2
a587 2
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
				Pixmap stipple));
d592 2
a593 2
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
				int fill_rule));
d598 2
a599 2
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
				int fill_style));
d604 1
a604 2
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
				int function));
d609 3
a611 4
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
				int join_style));
d616 1
a616 1
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
d621 1
a621 1
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
d626 1
a626 2
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display * display, 
				long vinfo_mask, 
d628 1
a628 1
				int * nitems_return));
d633 2
a634 2
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display * display, 
				Window w, XTextProperty * text_prop));
d639 2
a640 2
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char ** list, 
				int count, XTextProperty * text_prop_return));
d645 2
a646 2
EXTERN void		XDrawLine _ANSI_ARGS_((Display * d, Drawable dr, 
				GC g, int x1, int y1, int x2, int y2));
d651 3
a653 3
EXTERN void		XWarpPointer _ANSI_ARGS_((Display * d, Window s, 
				Window dw, int sx, int sy, unsigned int sw, 
				unsigned int sh, int dx, int dy));
d658 3
a660 3
EXTERN void		XFillRectangle _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, int x, int y, 
				unsigned int width, unsigned int height));
d667 1
a667 1
EXTERN void		XSetDashes _ANSI_ARGS_((Display * display, GC gc, 
d669 1
a669 1
				int n));
d674 1
a674 1
EXTERN XModifierKeymap * XGetModifierMapping _ANSI_ARGS_((Display * d));
d679 1
a679 1
EXTERN XImage *		XCreateImage _ANSI_ARGS_((Display * d, Visual * v, 
d682 1
a682 1
				int i4));
d687 3
a689 3
EXTERN XImage *		XGetImage _ANSI_ARGS_((Display * d, Drawable dr, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, unsigned long ul, int i3));
d694 1
a694 1
EXTERN char *		XGetAtomName _ANSI_ARGS_((Display * d, Atom a));
d699 1
a699 1
EXTERN char *		XKeysymToString _ANSI_ARGS_((KeySym k));
d704 2
a705 2
EXTERN Colormap		XCreateColormap _ANSI_ARGS_((Display * d, Window w, 
				Visual * v, int i));
d710 1
a710 1
EXTERN GContext		XGContextFromGC _ANSI_ARGS_((GC g));
d715 1
a715 2
EXTERN KeySym		XKeycodeToKeysym _ANSI_ARGS_((Display * d, KeyCode k, 
				int i));
d720 1
a720 1
EXTERN KeySym		XStringToKeysym _ANSI_ARGS_((_Xconst char * c));
d725 1
a725 1
EXTERN Window		XRootWindow _ANSI_ARGS_((Display * d, int i));
d730 1
a730 1
EXTERN XErrorHandler	XSetErrorHandler _ANSI_ARGS_((XErrorHandler x));
d735 1
a735 2
EXTERN Status		XAllocColor _ANSI_ARGS_((Display * d, Colormap c, 
				XColor * xp));
d740 1
a740 1
EXTERN void		XBell _ANSI_ARGS_((Display * d, int i));
d745 3
a747 3
EXTERN void		XChangeProperty _ANSI_ARGS_((Display * d, Window w, 
				Atom a1, Atom a2, int i1, int i2, 
				_Xconst unsigned char * c, int i3));
d752 2
a753 3
EXTERN void		XChangeWindowAttributes _ANSI_ARGS_((Display * d, 
				Window w, unsigned long ul, 
				XSetWindowAttributes * x));
d758 2
a759 2
EXTERN void		XConfigureWindow _ANSI_ARGS_((Display * d, Window w, 
				unsigned int i, XWindowChanges * x));
d764 3
a766 4
EXTERN void		XCopyArea _ANSI_ARGS_((Display * d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4));
d771 4
a774 4
EXTERN void		XCopyPlane _ANSI_ARGS_((Display * d, Drawable dr1, 
				Drawable dr2, GC g, int i1, int i2, 
				unsigned int ui1, unsigned int ui2, int i3, 
				int i4, unsigned long ul));
d779 3
a781 3
EXTERN Pixmap		XCreateBitmapFromData _ANSI_ARGS_((Display * display, 
				Drawable d, _Xconst char * data, 
				unsigned int width, unsigned int height));
d786 1
a786 2
EXTERN void		XDefineCursor _ANSI_ARGS_((Display * d, Window w, 
				Cursor c));
d791 1
a791 1
EXTERN void		XDestroyWindow _ANSI_ARGS_((Display * d, Window w));
d796 3
a798 3
EXTERN void		XDrawArc _ANSI_ARGS_((Display * d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
d803 2
a804 2
EXTERN void		XDrawLines _ANSI_ARGS_((Display * d, Drawable dr, 
				GC g, XPoint * x, int i1, int i2));
d809 3
a811 3
EXTERN void		XDrawRectangle _ANSI_ARGS_((Display * d, Drawable dr, 
				GC g, int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
d816 3
a818 3
EXTERN void		XFillArc _ANSI_ARGS_((Display * d, Drawable dr, GC g, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2, int i3, int i4));
d823 2
a824 2
EXTERN void		XFillPolygon _ANSI_ARGS_((Display * d, Drawable dr, 
				GC g, XPoint * x, int i1, int i2, int i3));
d829 2
a830 2
EXTERN void		XFillRectangles _ANSI_ARGS_((Display * d, 
				Drawable dr, GC g, XRectangle * x, int i));
d835 1
a835 1
EXTERN void		XFreeColormap _ANSI_ARGS_((Display * d, Colormap c));
d840 2
a841 2
EXTERN void		XFreeColors _ANSI_ARGS_((Display * d, Colormap c, 
				unsigned long * ulp, int i, unsigned long ul));
d846 1
a846 1
EXTERN void		XFreeModifiermap _ANSI_ARGS_((XModifierKeymap * x));
d851 4
a854 4
EXTERN Status		XGetGeometry _ANSI_ARGS_((Display * d, Drawable dr, 
				Window * w, int * i1, int * i2, 
				unsigned int * ui1, unsigned int * ui2, 
				unsigned int * ui3, unsigned int * ui4));
d859 4
a862 5
EXTERN int		XGetWindowProperty _ANSI_ARGS_((Display * d, 
				Window w, Atom a1, long l1, long l2, Bool b, 
				Atom a2, Atom * ap, int * ip, 
				unsigned long * ulp1, unsigned long * ulp2, 
				unsigned char ** cpp));
d867 2
a868 2
EXTERN int		XGrabKeyboard _ANSI_ARGS_((Display * d, Window w, 
				Bool b, int i1, int i2, Time t));
d873 3
a875 3
EXTERN int		XGrabPointer _ANSI_ARGS_((Display * d, Window w1, 
				Bool b, unsigned int ui, int i1, int i2, 
				Window w2, Cursor c, Time t));
d880 1
a880 1
EXTERN KeyCode		XKeysymToKeycode _ANSI_ARGS_((Display * d, KeySym k));
d885 1
a885 1
EXTERN void		XMapWindow _ANSI_ARGS_((Display * d, Window w));
d890 2
a891 3
EXTERN void		XMoveResizeWindow _ANSI_ARGS_((Display * d, Window w, 
				int i1, int i2, unsigned int ui1, 
				unsigned int ui2));
d896 1
a896 2
EXTERN void		XMoveWindow _ANSI_ARGS_((Display * d, Window w, 
				int i1, int i2));
d901 3
a903 3
EXTERN Bool		XQueryPointer _ANSI_ARGS_((Display * d, Window w1, 
				Window * w2, Window * w3, int * i1, int * i2, 
				int * i3, int * i4, unsigned int * ui));
d908 1
a908 1
EXTERN void		XRaiseWindow _ANSI_ARGS_((Display * d, Window w));
d913 1
a913 2
EXTERN void		XRefreshKeyboardMapping _ANSI_ARGS_((
				XMappingEvent * x));
d918 2
a919 2
EXTERN void		XResizeWindow _ANSI_ARGS_((Display * d, Window w, 
				unsigned int ui1, unsigned int ui2));
d924 1
a924 2
EXTERN void		XSelectInput _ANSI_ARGS_((Display * d, Window w, 
				long l));
d929 2
a930 2
EXTERN Status		XSendEvent _ANSI_ARGS_((Display * d, Window w, 
				Bool b, long l, XEvent * x));
d935 2
a936 2
EXTERN void		XSetIconName _ANSI_ARGS_((Display * d, Window w, 
				_Xconst char * c));
d941 1
a941 2
EXTERN void		XSetInputFocus _ANSI_ARGS_((Display * d, Window w, 
				int i, Time t));
d946 2
a947 2
EXTERN void		XSetSelectionOwner _ANSI_ARGS_((Display * d, Atom a, 
				Window w, Time t));
d952 2
a953 2
EXTERN void		XSetWindowBackground _ANSI_ARGS_((Display * d, 
				Window w, unsigned long ul));
d958 2
a959 2
EXTERN void		XSetWindowBackgroundPixmap _ANSI_ARGS_((Display * d, 
				Window w, Pixmap p));
d964 2
a965 2
EXTERN void		XSetWindowBorder _ANSI_ARGS_((Display * d, Window w, 
				unsigned long ul));
d970 2
a971 2
EXTERN void		XSetWindowBorderPixmap _ANSI_ARGS_((Display * d, 
				Window w, Pixmap p));
d976 2
a977 2
EXTERN void		XSetWindowBorderWidth _ANSI_ARGS_((Display * d, 
				Window w, unsigned int ui));
d982 2
a983 2
EXTERN void		XSetWindowColormap _ANSI_ARGS_((Display * d, 
				Window w, Colormap c));
d988 1
a988 1
EXTERN void		XUngrabKeyboard _ANSI_ARGS_((Display * d, Time t));
d993 1
a993 1
EXTERN void		XUngrabPointer _ANSI_ARGS_((Display * d, Time t));
d998 1
a998 1
EXTERN void		XUnmapWindow _ANSI_ARGS_((Display * d, Window w));
d1003 3
a1005 3
EXTERN void		TkPutImage _ANSI_ARGS_((unsigned long * colors, 
				int ncolors, Display * display, Drawable d, 
				GC gc, XImage * image, int src_x, int src_y, 
d1007 1
a1007 1
				unsigned int height));
d1012 2
a1013 3
EXTERN Status		XParseColor _ANSI_ARGS_((Display * display, 
				Colormap map, _Xconst char * spec, 
				XColor * colorPtr));
d1018 2
a1019 2
EXTERN GC		XCreateGC _ANSI_ARGS_((Display * display, Drawable d, 
				unsigned long valuemask, XGCValues * values));
d1024 1
a1024 1
EXTERN void		XFreeGC _ANSI_ARGS_((Display * display, GC gc));
d1029 1
a1029 1
EXTERN Atom		XInternAtom _ANSI_ARGS_((Display * display, 
d1031 1
a1031 1
				Bool only_if_exists));
d1036 2
a1037 2
EXTERN void		XSetBackground _ANSI_ARGS_((Display * display, GC gc, 
				unsigned long foreground));
d1042 2
a1043 2
EXTERN void		XSetForeground _ANSI_ARGS_((Display * display, GC gc, 
				unsigned long foreground));
d1048 2
a1049 2
EXTERN void		XSetClipMask _ANSI_ARGS_((Display * display, GC gc, 
				Pixmap pixmap));
d1054 2
a1055 2
EXTERN void		XSetClipOrigin _ANSI_ARGS_((Display * display, GC gc, 
				int clip_x_origin, int clip_y_origin));
d1060 2
a1061 2
EXTERN void		XSetTSOrigin _ANSI_ARGS_((Display * display, GC gc, 
				int ts_x_origin, int ts_y_origin));
d1066 2
a1067 2
EXTERN void		XChangeGC _ANSI_ARGS_((Display * d, GC gc, 
				unsigned long mask, XGCValues * values));
d1072 1
a1072 2
EXTERN void		XSetFont _ANSI_ARGS_((Display * display, GC gc, 
				Font font));
d1077 1
a1077 2
EXTERN void		XSetArcMode _ANSI_ARGS_((Display * display, GC gc, 
				int arc_mode));
d1082 2
a1083 2
EXTERN void		XSetStipple _ANSI_ARGS_((Display * display, GC gc, 
				Pixmap stipple));
d1088 2
a1089 2
EXTERN void		XSetFillRule _ANSI_ARGS_((Display * display, GC gc, 
				int fill_rule));
d1094 2
a1095 2
EXTERN void		XSetFillStyle _ANSI_ARGS_((Display * display, GC gc, 
				int fill_style));
d1100 1
a1100 2
EXTERN void		XSetFunction _ANSI_ARGS_((Display * display, GC gc, 
				int function));
d1105 3
a1107 4
EXTERN void		XSetLineAttributes _ANSI_ARGS_((Display * display, 
				GC gc, unsigned int line_width, 
				int line_style, int cap_style, 
				int join_style));
d1112 1
a1112 1
EXTERN int		_XInitImageFuncPtrs _ANSI_ARGS_((XImage * image));
d1117 1
a1117 1
EXTERN XIC		XCreateIC _ANSI_ARGS_((void));
d1122 1
a1122 2
EXTERN XVisualInfo *	XGetVisualInfo _ANSI_ARGS_((Display * display, 
				long vinfo_mask, 
d1124 1
a1124 1
				int * nitems_return));
d1129 2
a1130 2
EXTERN void		XSetWMClientMachine _ANSI_ARGS_((Display * display, 
				Window w, XTextProperty * text_prop));
d1135 2
a1136 2
EXTERN Status		XStringListToTextProperty _ANSI_ARGS_((char ** list, 
				int count, XTextProperty * text_prop_return));
d1141 2
a1142 3
EXTERN void		XDrawSegments _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, XSegment * segments, 
				int nsegments));
d1147 1
a1147 2
EXTERN void		XForceScreenSaver _ANSI_ARGS_((Display * display, 
				int mode));
d1152 2
a1153 2
EXTERN void		XDrawLine _ANSI_ARGS_((Display * d, Drawable dr, 
				GC g, int x1, int y1, int x2, int y2));
d1158 3
a1160 3
EXTERN void		XFillRectangle _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, int x, int y, 
				unsigned int width, unsigned int height));
d1165 1
a1165 1
EXTERN void		XClearWindow _ANSI_ARGS_((Display * d, Window w));
d1170 2
a1171 2
EXTERN void		XDrawPoint _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, int x, int y));
d1176 2
a1177 3
EXTERN void		XDrawPoints _ANSI_ARGS_((Display * display, 
				Drawable d, GC gc, XPoint * points, 
				int npoints, int mode));
d1182 3
a1184 3
EXTERN void		XWarpPointer _ANSI_ARGS_((Display * display, 
				Window src_w, Window dest_w, int src_x, 
				int src_y, unsigned int src_width, 
d1186 1
a1186 1
				int dest_y));
d1191 2
a1192 2
EXTERN void		XQueryColor _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * def_in_out));
d1197 2
a1198 3
EXTERN void		XQueryColors _ANSI_ARGS_((Display * display, 
				Colormap colormap, XColor * defs_in_out, 
				int ncolors));
d1203 2
a1204 3
EXTERN Status		XQueryTree _ANSI_ARGS_((Display * d, Window w1, 
				Window * w2, Window * w3, Window ** w4, 
				unsigned int * ui));
d1209 1
a1209 1
EXTERN int		XSync _ANSI_ARGS_((Display * display, Bool flag));
d1218 81
a1298 81
    void (*xSetDashes) _ANSI_ARGS_((Display * display, GC gc, int dash_offset, _Xconst char * dash_list, int n)); /* 0 */
    XModifierKeymap * (*xGetModifierMapping) _ANSI_ARGS_((Display * d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display * d, Visual * v, unsigned int ui1, int i1, int i2, char * cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display * d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display * d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display * d, Window w, Visual * v, int i)); /* 6 */
    Cursor (*xCreatePixmapCursor) _ANSI_ARGS_((Display * d, Pixmap p1, Pixmap p2, XColor * x1, XColor * x2, unsigned int ui1, unsigned int ui2)); /* 7 */
    Cursor (*xCreateGlyphCursor) _ANSI_ARGS_((Display * d, Font f1, Font f2, unsigned int ui1, unsigned int ui2, XColor * x1, XColor * x2)); /* 8 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 9 */
    XHostAddress * (*xListHosts) _ANSI_ARGS_((Display * d, int * i, Bool * b)); /* 10 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display * d, unsigned int k, int i)); /* 11 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char * c)); /* 12 */
    Window (*xRootWindow) _ANSI_ARGS_((Display * d, int i)); /* 13 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 14 */
    Status (*xIconifyWindow) _ANSI_ARGS_((Display * d, Window w, int i)); /* 15 */
    Status (*xWithdrawWindow) _ANSI_ARGS_((Display * d, Window w, int i)); /* 16 */
    Status (*xGetWMColormapWindows) _ANSI_ARGS_((Display * d, Window w, Window ** wpp, int * ip)); /* 17 */
    Status (*xAllocColor) _ANSI_ARGS_((Display * d, Colormap c, XColor * xp)); /* 18 */
    void (*xBell) _ANSI_ARGS_((Display * d, int i)); /* 19 */
    void (*xChangeProperty) _ANSI_ARGS_((Display * d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char * c, int i3)); /* 20 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display * d, Window w, unsigned long ul, XSetWindowAttributes * x)); /* 21 */
    void (*xClearWindow) _ANSI_ARGS_((Display * d, Window w)); /* 22 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display * d, Window w, unsigned int i, XWindowChanges * x)); /* 23 */
    void (*xCopyArea) _ANSI_ARGS_((Display * d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 24 */
    void (*xCopyPlane) _ANSI_ARGS_((Display * d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 25 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display * display, Drawable d, _Xconst char * data, unsigned int width, unsigned int height)); /* 26 */
    void (*xDefineCursor) _ANSI_ARGS_((Display * d, Window w, Cursor c)); /* 27 */
    void (*xDeleteProperty) _ANSI_ARGS_((Display * d, Window w, Atom a)); /* 28 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display * d, Window w)); /* 29 */
    void (*xDrawArc) _ANSI_ARGS_((Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 30 */
    void (*xDrawLines) _ANSI_ARGS_((Display * d, Drawable dr, GC g, XPoint * x, int i1, int i2)); /* 31 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 32 */
    void (*xFillArc) _ANSI_ARGS_((Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 33 */
    void (*xFillPolygon) _ANSI_ARGS_((Display * d, Drawable dr, GC g, XPoint * x, int i1, int i2, int i3)); /* 34 */
    void (*xFillRectangles) _ANSI_ARGS_((Display * d, Drawable dr, GC g, XRectangle * x, int i)); /* 35 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display * d, int i)); /* 36 */
    void (*xFreeColormap) _ANSI_ARGS_((Display * d, Colormap c)); /* 37 */
    void (*xFreeColors) _ANSI_ARGS_((Display * d, Colormap c, unsigned long * ulp, int i, unsigned long ul)); /* 38 */
    void (*xFreeCursor) _ANSI_ARGS_((Display * d, Cursor c)); /* 39 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap * x)); /* 40 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display * d, Drawable dr, Window * w, int * i1, int * i2, unsigned int * ui1, unsigned int * ui2, unsigned int * ui3, unsigned int * ui4)); /* 41 */
    void (*xGetInputFocus) _ANSI_ARGS_((Display * d, Window * w, int * i)); /* 42 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display * d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom * ap, int * ip, unsigned long * ulp1, unsigned long * ulp2, unsigned char ** cpp)); /* 43 */
    Status (*xGetWindowAttributes) _ANSI_ARGS_((Display * d, Window w, XWindowAttributes * x)); /* 44 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display * d, Window w, Bool b, int i1, int i2, Time t)); /* 45 */
    int (*xGrabPointer) _ANSI_ARGS_((Display * d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 46 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display * d, KeySym k)); /* 47 */
    Status (*xLookupColor) _ANSI_ARGS_((Display * d, Colormap c1, _Xconst char * c2, XColor * x1, XColor * x2)); /* 48 */
    void (*xMapWindow) _ANSI_ARGS_((Display * d, Window w)); /* 49 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display * d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 50 */
    void (*xMoveWindow) _ANSI_ARGS_((Display * d, Window w, int i1, int i2)); /* 51 */
    void (*xNextEvent) _ANSI_ARGS_((Display * d, XEvent * x)); /* 52 */
    void (*xPutBackEvent) _ANSI_ARGS_((Display * d, XEvent * x)); /* 53 */
    void (*xQueryColors) _ANSI_ARGS_((Display * d, Colormap c, XColor * x, int i)); /* 54 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display * d, Window w1, Window * w2, Window * w3, int * i1, int * i2, int * i3, int * i4, unsigned int * ui)); /* 55 */
    Status (*xQueryTree) _ANSI_ARGS_((Display * d, Window w1, Window * w2, Window * w3, Window ** w4, unsigned int * ui)); /* 56 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display * d, Window w)); /* 57 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent * x)); /* 58 */
    void (*xResizeWindow) _ANSI_ARGS_((Display * d, Window w, unsigned int ui1, unsigned int ui2)); /* 59 */
    void (*xSelectInput) _ANSI_ARGS_((Display * d, Window w, long l)); /* 60 */
    Status (*xSendEvent) _ANSI_ARGS_((Display * d, Window w, Bool b, long l, XEvent * x)); /* 61 */
    void (*xSetCommand) _ANSI_ARGS_((Display * d, Window w, CONST char ** c, int i)); /* 62 */
    void (*xSetIconName) _ANSI_ARGS_((Display * d, Window w, _Xconst char * c)); /* 63 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display * d, Window w, int i, Time t)); /* 64 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display * d, Atom a, Window w, Time t)); /* 65 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display * d, Window w, unsigned long ul)); /* 66 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display * d, Window w, Pixmap p)); /* 67 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display * d, Window w, unsigned long ul)); /* 68 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display * d, Window w, Pixmap p)); /* 69 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display * d, Window w, unsigned int ui)); /* 70 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display * d, Window w, Colormap c)); /* 71 */
    Bool (*xTranslateCoordinates) _ANSI_ARGS_((Display * d, Window w1, Window w2, int i1, int i2, int * i3, int * i4, Window * w3)); /* 72 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display * d, Time t)); /* 73 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display * d, Time t)); /* 74 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display * d, Window w)); /* 75 */
    void (*xWindowEvent) _ANSI_ARGS_((Display * d, Window w, long l, XEvent * x)); /* 76 */
    void (*xDestroyIC) _ANSI_ARGS_((XIC x)); /* 77 */
    Bool (*xFilterEvent) _ANSI_ARGS_((XEvent * x, Window w)); /* 78 */
    int (*xmbLookupString) _ANSI_ARGS_((XIC xi, XKeyPressedEvent * xk, char * c, int i, KeySym * k, Status * s)); /* 79 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display * display, Drawable d, GC gc, XImage * image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 80 */
d1300 25
a1324 25
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char * spec, XColor * colorPtr)); /* 82 */
    GC (*xCreateGC) _ANSI_ARGS_((Display * display, Drawable d, unsigned long valuemask, XGCValues * values)); /* 83 */
    void (*xFreeGC) _ANSI_ARGS_((Display * display, GC gc)); /* 84 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display * display, _Xconst char * atom_name, Bool only_if_exists)); /* 85 */
    void (*xSetBackground) _ANSI_ARGS_((Display * display, GC gc, unsigned long foreground)); /* 86 */
    void (*xSetForeground) _ANSI_ARGS_((Display * display, GC gc, unsigned long foreground)); /* 87 */
    void (*xSetClipMask) _ANSI_ARGS_((Display * display, GC gc, Pixmap pixmap)); /* 88 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display * display, GC gc, int clip_x_origin, int clip_y_origin)); /* 89 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display * display, GC gc, int ts_x_origin, int ts_y_origin)); /* 90 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 91 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 92 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 93 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 94 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 95 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 96 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 97 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 98 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 99 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 100 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display * display, long vinfo_mask, XVisualInfo * vinfo_template, int * nitems_return)); /* 101 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display * display, Window w, XTextProperty * text_prop)); /* 102 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char ** list, int count, XTextProperty * text_prop_return)); /* 103 */
    void (*xDrawLine) _ANSI_ARGS_((Display * d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 104 */
    void (*xWarpPointer) _ANSI_ARGS_((Display * d, Window s, Window dw, int sx, int sy, unsigned int sw, unsigned int sh, int dx, int dy)); /* 105 */
    void (*xFillRectangle) _ANSI_ARGS_((Display * display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 106 */
d1327 92
a1418 92
    void (*xSetDashes) _ANSI_ARGS_((Display * display, GC gc, int dash_offset, _Xconst char * dash_list, int n)); /* 0 */
    XModifierKeymap * (*xGetModifierMapping) _ANSI_ARGS_((Display * d)); /* 1 */
    XImage * (*xCreateImage) _ANSI_ARGS_((Display * d, Visual * v, unsigned int ui1, int i1, int i2, char * cp, unsigned int ui2, unsigned int ui3, int i3, int i4)); /* 2 */
    XImage * (*xGetImage) _ANSI_ARGS_((Display * d, Drawable dr, int i1, int i2, unsigned int ui1, unsigned int ui2, unsigned long ul, int i3)); /* 3 */
    char * (*xGetAtomName) _ANSI_ARGS_((Display * d, Atom a)); /* 4 */
    char * (*xKeysymToString) _ANSI_ARGS_((KeySym k)); /* 5 */
    Colormap (*xCreateColormap) _ANSI_ARGS_((Display * d, Window w, Visual * v, int i)); /* 6 */
    GContext (*xGContextFromGC) _ANSI_ARGS_((GC g)); /* 7 */
    KeySym (*xKeycodeToKeysym) _ANSI_ARGS_((Display * d, KeyCode k, int i)); /* 8 */
    KeySym (*xStringToKeysym) _ANSI_ARGS_((_Xconst char * c)); /* 9 */
    Window (*xRootWindow) _ANSI_ARGS_((Display * d, int i)); /* 10 */
    XErrorHandler (*xSetErrorHandler) _ANSI_ARGS_((XErrorHandler x)); /* 11 */
    Status (*xAllocColor) _ANSI_ARGS_((Display * d, Colormap c, XColor * xp)); /* 12 */
    void (*xBell) _ANSI_ARGS_((Display * d, int i)); /* 13 */
    void (*xChangeProperty) _ANSI_ARGS_((Display * d, Window w, Atom a1, Atom a2, int i1, int i2, _Xconst unsigned char * c, int i3)); /* 14 */
    void (*xChangeWindowAttributes) _ANSI_ARGS_((Display * d, Window w, unsigned long ul, XSetWindowAttributes * x)); /* 15 */
    void (*xConfigureWindow) _ANSI_ARGS_((Display * d, Window w, unsigned int i, XWindowChanges * x)); /* 16 */
    void (*xCopyArea) _ANSI_ARGS_((Display * d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 17 */
    void (*xCopyPlane) _ANSI_ARGS_((Display * d, Drawable dr1, Drawable dr2, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4, unsigned long ul)); /* 18 */
    Pixmap (*xCreateBitmapFromData) _ANSI_ARGS_((Display * display, Drawable d, _Xconst char * data, unsigned int width, unsigned int height)); /* 19 */
    void (*xDefineCursor) _ANSI_ARGS_((Display * d, Window w, Cursor c)); /* 20 */
    void (*xDestroyWindow) _ANSI_ARGS_((Display * d, Window w)); /* 21 */
    void (*xDrawArc) _ANSI_ARGS_((Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 22 */
    void (*xDrawLines) _ANSI_ARGS_((Display * d, Drawable dr, GC g, XPoint * x, int i1, int i2)); /* 23 */
    void (*xDrawRectangle) _ANSI_ARGS_((Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 24 */
    void (*xFillArc) _ANSI_ARGS_((Display * d, Drawable dr, GC g, int i1, int i2, unsigned int ui1, unsigned int ui2, int i3, int i4)); /* 25 */
    void (*xFillPolygon) _ANSI_ARGS_((Display * d, Drawable dr, GC g, XPoint * x, int i1, int i2, int i3)); /* 26 */
    void (*xFillRectangles) _ANSI_ARGS_((Display * d, Drawable dr, GC g, XRectangle * x, int i)); /* 27 */
    void (*xFreeColormap) _ANSI_ARGS_((Display * d, Colormap c)); /* 28 */
    void (*xFreeColors) _ANSI_ARGS_((Display * d, Colormap c, unsigned long * ulp, int i, unsigned long ul)); /* 29 */
    void (*xFreeModifiermap) _ANSI_ARGS_((XModifierKeymap * x)); /* 30 */
    Status (*xGetGeometry) _ANSI_ARGS_((Display * d, Drawable dr, Window * w, int * i1, int * i2, unsigned int * ui1, unsigned int * ui2, unsigned int * ui3, unsigned int * ui4)); /* 31 */
    int (*xGetWindowProperty) _ANSI_ARGS_((Display * d, Window w, Atom a1, long l1, long l2, Bool b, Atom a2, Atom * ap, int * ip, unsigned long * ulp1, unsigned long * ulp2, unsigned char ** cpp)); /* 32 */
    int (*xGrabKeyboard) _ANSI_ARGS_((Display * d, Window w, Bool b, int i1, int i2, Time t)); /* 33 */
    int (*xGrabPointer) _ANSI_ARGS_((Display * d, Window w1, Bool b, unsigned int ui, int i1, int i2, Window w2, Cursor c, Time t)); /* 34 */
    KeyCode (*xKeysymToKeycode) _ANSI_ARGS_((Display * d, KeySym k)); /* 35 */
    void (*xMapWindow) _ANSI_ARGS_((Display * d, Window w)); /* 36 */
    void (*xMoveResizeWindow) _ANSI_ARGS_((Display * d, Window w, int i1, int i2, unsigned int ui1, unsigned int ui2)); /* 37 */
    void (*xMoveWindow) _ANSI_ARGS_((Display * d, Window w, int i1, int i2)); /* 38 */
    Bool (*xQueryPointer) _ANSI_ARGS_((Display * d, Window w1, Window * w2, Window * w3, int * i1, int * i2, int * i3, int * i4, unsigned int * ui)); /* 39 */
    void (*xRaiseWindow) _ANSI_ARGS_((Display * d, Window w)); /* 40 */
    void (*xRefreshKeyboardMapping) _ANSI_ARGS_((XMappingEvent * x)); /* 41 */
    void (*xResizeWindow) _ANSI_ARGS_((Display * d, Window w, unsigned int ui1, unsigned int ui2)); /* 42 */
    void (*xSelectInput) _ANSI_ARGS_((Display * d, Window w, long l)); /* 43 */
    Status (*xSendEvent) _ANSI_ARGS_((Display * d, Window w, Bool b, long l, XEvent * x)); /* 44 */
    void (*xSetIconName) _ANSI_ARGS_((Display * d, Window w, _Xconst char * c)); /* 45 */
    void (*xSetInputFocus) _ANSI_ARGS_((Display * d, Window w, int i, Time t)); /* 46 */
    void (*xSetSelectionOwner) _ANSI_ARGS_((Display * d, Atom a, Window w, Time t)); /* 47 */
    void (*xSetWindowBackground) _ANSI_ARGS_((Display * d, Window w, unsigned long ul)); /* 48 */
    void (*xSetWindowBackgroundPixmap) _ANSI_ARGS_((Display * d, Window w, Pixmap p)); /* 49 */
    void (*xSetWindowBorder) _ANSI_ARGS_((Display * d, Window w, unsigned long ul)); /* 50 */
    void (*xSetWindowBorderPixmap) _ANSI_ARGS_((Display * d, Window w, Pixmap p)); /* 51 */
    void (*xSetWindowBorderWidth) _ANSI_ARGS_((Display * d, Window w, unsigned int ui)); /* 52 */
    void (*xSetWindowColormap) _ANSI_ARGS_((Display * d, Window w, Colormap c)); /* 53 */
    void (*xUngrabKeyboard) _ANSI_ARGS_((Display * d, Time t)); /* 54 */
    void (*xUngrabPointer) _ANSI_ARGS_((Display * d, Time t)); /* 55 */
    void (*xUnmapWindow) _ANSI_ARGS_((Display * d, Window w)); /* 56 */
    void (*tkPutImage) _ANSI_ARGS_((unsigned long * colors, int ncolors, Display * display, Drawable d, GC gc, XImage * image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height)); /* 57 */
    Status (*xParseColor) _ANSI_ARGS_((Display * display, Colormap map, _Xconst char * spec, XColor * colorPtr)); /* 58 */
    GC (*xCreateGC) _ANSI_ARGS_((Display * display, Drawable d, unsigned long valuemask, XGCValues * values)); /* 59 */
    void (*xFreeGC) _ANSI_ARGS_((Display * display, GC gc)); /* 60 */
    Atom (*xInternAtom) _ANSI_ARGS_((Display * display, _Xconst char * atom_name, Bool only_if_exists)); /* 61 */
    void (*xSetBackground) _ANSI_ARGS_((Display * display, GC gc, unsigned long foreground)); /* 62 */
    void (*xSetForeground) _ANSI_ARGS_((Display * display, GC gc, unsigned long foreground)); /* 63 */
    void (*xSetClipMask) _ANSI_ARGS_((Display * display, GC gc, Pixmap pixmap)); /* 64 */
    void (*xSetClipOrigin) _ANSI_ARGS_((Display * display, GC gc, int clip_x_origin, int clip_y_origin)); /* 65 */
    void (*xSetTSOrigin) _ANSI_ARGS_((Display * display, GC gc, int ts_x_origin, int ts_y_origin)); /* 66 */
    void (*xChangeGC) _ANSI_ARGS_((Display * d, GC gc, unsigned long mask, XGCValues * values)); /* 67 */
    void (*xSetFont) _ANSI_ARGS_((Display * display, GC gc, Font font)); /* 68 */
    void (*xSetArcMode) _ANSI_ARGS_((Display * display, GC gc, int arc_mode)); /* 69 */
    void (*xSetStipple) _ANSI_ARGS_((Display * display, GC gc, Pixmap stipple)); /* 70 */
    void (*xSetFillRule) _ANSI_ARGS_((Display * display, GC gc, int fill_rule)); /* 71 */
    void (*xSetFillStyle) _ANSI_ARGS_((Display * display, GC gc, int fill_style)); /* 72 */
    void (*xSetFunction) _ANSI_ARGS_((Display * display, GC gc, int function)); /* 73 */
    void (*xSetLineAttributes) _ANSI_ARGS_((Display * display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style)); /* 74 */
    int (*_XInitImageFuncPtrs) _ANSI_ARGS_((XImage * image)); /* 75 */
    XIC (*xCreateIC) _ANSI_ARGS_((void)); /* 76 */
    XVisualInfo * (*xGetVisualInfo) _ANSI_ARGS_((Display * display, long vinfo_mask, XVisualInfo * vinfo_template, int * nitems_return)); /* 77 */
    void (*xSetWMClientMachine) _ANSI_ARGS_((Display * display, Window w, XTextProperty * text_prop)); /* 78 */
    Status (*xStringListToTextProperty) _ANSI_ARGS_((char ** list, int count, XTextProperty * text_prop_return)); /* 79 */
    void (*xDrawSegments) _ANSI_ARGS_((Display * display, Drawable d, GC gc, XSegment * segments, int nsegments)); /* 80 */
    void (*xForceScreenSaver) _ANSI_ARGS_((Display * display, int mode)); /* 81 */
    void (*xDrawLine) _ANSI_ARGS_((Display * d, Drawable dr, GC g, int x1, int y1, int x2, int y2)); /* 82 */
    void (*xFillRectangle) _ANSI_ARGS_((Display * display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height)); /* 83 */
    void (*xClearWindow) _ANSI_ARGS_((Display * d, Window w)); /* 84 */
    void (*xDrawPoint) _ANSI_ARGS_((Display * display, Drawable d, GC gc, int x, int y)); /* 85 */
    void (*xDrawPoints) _ANSI_ARGS_((Display * display, Drawable d, GC gc, XPoint * points, int npoints, int mode)); /* 86 */
    void (*xWarpPointer) _ANSI_ARGS_((Display * display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y)); /* 87 */
    void (*xQueryColor) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * def_in_out)); /* 88 */
    void (*xQueryColors) _ANSI_ARGS_((Display * display, Colormap colormap, XColor * defs_in_out, int ncolors)); /* 89 */
    Status (*xQueryTree) _ANSI_ARGS_((Display * d, Window w1, Window * w2, Window * w3, Window ** w4, unsigned int * ui)); /* 90 */
    int (*xSync) _ANSI_ARGS_((Display * display, Bool flag)); /* 91 */
@

