head	1.4;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.2
	rel-7-10-2:1.2
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.4
date	2007.11.06.21.38.41;	author erikgreenwald;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.14.15.21.58;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.07.04.17.40;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.02.21.49.46;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tk 8.5a6->8.5b1
@
text
@/*
 * tkIntPlatDecls.h --
 *
 *	This file contains the declarations for all platform dependent
 *	unsupported functions that are exported by the Tk library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 * All rights reserved.
 *
 * RCS: @@(#) $Id: tkIntPlatDecls.h,v 1.27 2006/12/18 16:42:46 dgp Exp $
 */

#ifndef _TKINTPLATDECLS
#define _TKINTPLATDECLS

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tkInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifdef __WIN32__
#ifndef TkAlignImageData_TCL_DECLARED
#define TkAlignImageData_TCL_DECLARED
/* 0 */
EXTERN char *		TkAlignImageData (XImage * image, int alignment, 
				int bitOrder);
#endif
/* Slot 1 is reserved */
#ifndef TkGenerateActivateEvents_TCL_DECLARED
#define TkGenerateActivateEvents_TCL_DECLARED
/* 2 */
EXTERN void		TkGenerateActivateEvents (TkWindow * winPtr, 
				int active);
#endif
#ifndef TkpGetMS_TCL_DECLARED
#define TkpGetMS_TCL_DECLARED
/* 3 */
EXTERN unsigned long	TkpGetMS (void);
#endif
#ifndef TkPointerDeadWindow_TCL_DECLARED
#define TkPointerDeadWindow_TCL_DECLARED
/* 4 */
EXTERN void		TkPointerDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkpPrintWindowId_TCL_DECLARED
#define TkpPrintWindowId_TCL_DECLARED
/* 5 */
EXTERN void		TkpPrintWindowId (char * buf, Window window);
#endif
#ifndef TkpScanWindowId_TCL_DECLARED
#define TkpScanWindowId_TCL_DECLARED
/* 6 */
EXTERN int		TkpScanWindowId (Tcl_Interp * interp, 
				CONST char * string, Window * idPtr);
#endif
#ifndef TkpSetCapture_TCL_DECLARED
#define TkpSetCapture_TCL_DECLARED
/* 7 */
EXTERN void		TkpSetCapture (TkWindow * winPtr);
#endif
#ifndef TkpSetCursor_TCL_DECLARED
#define TkpSetCursor_TCL_DECLARED
/* 8 */
EXTERN void		TkpSetCursor (TkpCursor cursor);
#endif
#ifndef TkpWmSetState_TCL_DECLARED
#define TkpWmSetState_TCL_DECLARED
/* 9 */
EXTERN void		TkpWmSetState (TkWindow * winPtr, int state);
#endif
#ifndef TkSetPixmapColormap_TCL_DECLARED
#define TkSetPixmapColormap_TCL_DECLARED
/* 10 */
EXTERN void		TkSetPixmapColormap (Pixmap pixmap, 
				Colormap colormap);
#endif
#ifndef TkWinCancelMouseTimer_TCL_DECLARED
#define TkWinCancelMouseTimer_TCL_DECLARED
/* 11 */
EXTERN void		TkWinCancelMouseTimer (void);
#endif
#ifndef TkWinClipboardRender_TCL_DECLARED
#define TkWinClipboardRender_TCL_DECLARED
/* 12 */
EXTERN void		TkWinClipboardRender (TkDisplay * dispPtr, 
				UINT format);
#endif
#ifndef TkWinEmbeddedEventProc_TCL_DECLARED
#define TkWinEmbeddedEventProc_TCL_DECLARED
/* 13 */
EXTERN LRESULT		TkWinEmbeddedEventProc (HWND hwnd, UINT message, 
				WPARAM wParam, LPARAM lParam);
#endif
#ifndef TkWinFillRect_TCL_DECLARED
#define TkWinFillRect_TCL_DECLARED
/* 14 */
EXTERN void		TkWinFillRect (HDC dc, int x, int y, int width, 
				int height, int pixel);
#endif
#ifndef TkWinGetBorderPixels_TCL_DECLARED
#define TkWinGetBorderPixels_TCL_DECLARED
/* 15 */
EXTERN COLORREF		TkWinGetBorderPixels (Tk_Window tkwin, 
				Tk_3DBorder border, int which);
#endif
#ifndef TkWinGetDrawableDC_TCL_DECLARED
#define TkWinGetDrawableDC_TCL_DECLARED
/* 16 */
EXTERN HDC		TkWinGetDrawableDC (Display * display, Drawable d, 
				TkWinDCState * state);
#endif
#ifndef TkWinGetModifierState_TCL_DECLARED
#define TkWinGetModifierState_TCL_DECLARED
/* 17 */
EXTERN int		TkWinGetModifierState (void);
#endif
#ifndef TkWinGetSystemPalette_TCL_DECLARED
#define TkWinGetSystemPalette_TCL_DECLARED
/* 18 */
EXTERN HPALETTE		TkWinGetSystemPalette (void);
#endif
#ifndef TkWinGetWrapperWindow_TCL_DECLARED
#define TkWinGetWrapperWindow_TCL_DECLARED
/* 19 */
EXTERN HWND		TkWinGetWrapperWindow (Tk_Window tkwin);
#endif
#ifndef TkWinHandleMenuEvent_TCL_DECLARED
#define TkWinHandleMenuEvent_TCL_DECLARED
/* 20 */
EXTERN int		TkWinHandleMenuEvent (HWND * phwnd, UINT * pMessage, 
				WPARAM * pwParam, LPARAM * plParam, 
				LRESULT * plResult);
#endif
#ifndef TkWinIndexOfColor_TCL_DECLARED
#define TkWinIndexOfColor_TCL_DECLARED
/* 21 */
EXTERN int		TkWinIndexOfColor (XColor * colorPtr);
#endif
#ifndef TkWinReleaseDrawableDC_TCL_DECLARED
#define TkWinReleaseDrawableDC_TCL_DECLARED
/* 22 */
EXTERN void		TkWinReleaseDrawableDC (Drawable d, HDC hdc, 
				TkWinDCState * state);
#endif
#ifndef TkWinResendEvent_TCL_DECLARED
#define TkWinResendEvent_TCL_DECLARED
/* 23 */
EXTERN LRESULT		TkWinResendEvent (WNDPROC wndproc, HWND hwnd, 
				XEvent * eventPtr);
#endif
#ifndef TkWinSelectPalette_TCL_DECLARED
#define TkWinSelectPalette_TCL_DECLARED
/* 24 */
EXTERN HPALETTE		TkWinSelectPalette (HDC dc, Colormap colormap);
#endif
#ifndef TkWinSetMenu_TCL_DECLARED
#define TkWinSetMenu_TCL_DECLARED
/* 25 */
EXTERN void		TkWinSetMenu (Tk_Window tkwin, HMENU hMenu);
#endif
#ifndef TkWinSetWindowPos_TCL_DECLARED
#define TkWinSetWindowPos_TCL_DECLARED
/* 26 */
EXTERN void		TkWinSetWindowPos (HWND hwnd, HWND siblingHwnd, 
				int pos);
#endif
#ifndef TkWinWmCleanup_TCL_DECLARED
#define TkWinWmCleanup_TCL_DECLARED
/* 27 */
EXTERN void		TkWinWmCleanup (HINSTANCE hInstance);
#endif
#ifndef TkWinXCleanup_TCL_DECLARED
#define TkWinXCleanup_TCL_DECLARED
/* 28 */
EXTERN void		TkWinXCleanup (ClientData clientData);
#endif
#ifndef TkWinXInit_TCL_DECLARED
#define TkWinXInit_TCL_DECLARED
/* 29 */
EXTERN void		TkWinXInit (HINSTANCE hInstance);
#endif
#ifndef TkWinSetForegroundWindow_TCL_DECLARED
#define TkWinSetForegroundWindow_TCL_DECLARED
/* 30 */
EXTERN void		TkWinSetForegroundWindow (TkWindow * winPtr);
#endif
#ifndef TkWinDialogDebug_TCL_DECLARED
#define TkWinDialogDebug_TCL_DECLARED
/* 31 */
EXTERN void		TkWinDialogDebug (int debug);
#endif
#ifndef TkWinGetMenuSystemDefault_TCL_DECLARED
#define TkWinGetMenuSystemDefault_TCL_DECLARED
/* 32 */
EXTERN Tcl_Obj *	TkWinGetMenuSystemDefault (Tk_Window tkwin, 
				CONST char * dbName, CONST char * className);
#endif
#ifndef TkWinGetPlatformId_TCL_DECLARED
#define TkWinGetPlatformId_TCL_DECLARED
/* 33 */
EXTERN int		TkWinGetPlatformId (void);
#endif
#ifndef TkWinSetHINSTANCE_TCL_DECLARED
#define TkWinSetHINSTANCE_TCL_DECLARED
/* 34 */
EXTERN void		TkWinSetHINSTANCE (HINSTANCE hInstance);
#endif
#ifndef TkWinGetPlatformTheme_TCL_DECLARED
#define TkWinGetPlatformTheme_TCL_DECLARED
/* 35 */
EXTERN int		TkWinGetPlatformTheme (void);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkGenerateActivateEvents_TCL_DECLARED
#define TkGenerateActivateEvents_TCL_DECLARED
/* 0 */
EXTERN void		TkGenerateActivateEvents (TkWindow * winPtr, 
				int active);
#endif
/* Slot 1 is reserved */
/* Slot 2 is reserved */
#ifndef TkPointerDeadWindow_TCL_DECLARED
#define TkPointerDeadWindow_TCL_DECLARED
/* 3 */
EXTERN void		TkPointerDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkpSetCapture_TCL_DECLARED
#define TkpSetCapture_TCL_DECLARED
/* 4 */
EXTERN void		TkpSetCapture (TkWindow * winPtr);
#endif
#ifndef TkpSetCursor_TCL_DECLARED
#define TkpSetCursor_TCL_DECLARED
/* 5 */
EXTERN void		TkpSetCursor (TkpCursor cursor);
#endif
#ifndef TkpWmSetState_TCL_DECLARED
#define TkpWmSetState_TCL_DECLARED
/* 6 */
EXTERN void		TkpWmSetState (TkWindow * winPtr, int state);
#endif
#ifndef TkAboutDlg_TCL_DECLARED
#define TkAboutDlg_TCL_DECLARED
/* 7 */
EXTERN void		TkAboutDlg (void);
#endif
#ifndef TkMacOSXButtonKeyState_TCL_DECLARED
#define TkMacOSXButtonKeyState_TCL_DECLARED
/* 8 */
EXTERN unsigned int	TkMacOSXButtonKeyState (void);
#endif
#ifndef TkMacOSXClearMenubarActive_TCL_DECLARED
#define TkMacOSXClearMenubarActive_TCL_DECLARED
/* 9 */
EXTERN void		TkMacOSXClearMenubarActive (void);
#endif
#ifndef TkMacOSXDispatchMenuEvent_TCL_DECLARED
#define TkMacOSXDispatchMenuEvent_TCL_DECLARED
/* 10 */
EXTERN int		TkMacOSXDispatchMenuEvent (int menuID, int index);
#endif
#ifndef TkMacOSXInstallCursor_TCL_DECLARED
#define TkMacOSXInstallCursor_TCL_DECLARED
/* 11 */
EXTERN void		TkMacOSXInstallCursor (int resizeOverride);
#endif
#ifndef TkMacOSXHandleTearoffMenu_TCL_DECLARED
#define TkMacOSXHandleTearoffMenu_TCL_DECLARED
/* 12 */
EXTERN void		TkMacOSXHandleTearoffMenu (void);
#endif
/* Slot 13 is reserved */
#ifndef TkMacOSXDoHLEvent_TCL_DECLARED
#define TkMacOSXDoHLEvent_TCL_DECLARED
/* 14 */
EXTERN int		TkMacOSXDoHLEvent (EventRecord * theEvent);
#endif
/* Slot 15 is reserved */
#ifndef TkMacOSXGetXWindow_TCL_DECLARED
#define TkMacOSXGetXWindow_TCL_DECLARED
/* 16 */
EXTERN Window		TkMacOSXGetXWindow (WindowRef macWinPtr);
#endif
#ifndef TkMacOSXGrowToplevel_TCL_DECLARED
#define TkMacOSXGrowToplevel_TCL_DECLARED
/* 17 */
EXTERN int		TkMacOSXGrowToplevel (WindowRef whichWindow, 
				Point start);
#endif
#ifndef TkMacOSXHandleMenuSelect_TCL_DECLARED
#define TkMacOSXHandleMenuSelect_TCL_DECLARED
/* 18 */
EXTERN void		TkMacOSXHandleMenuSelect (MenuID theMenu, 
				MenuItemIndex theItem, int optionKeyPressed);
#endif
/* Slot 19 is reserved */
/* Slot 20 is reserved */
#ifndef TkMacOSXInvalidateWindow_TCL_DECLARED
#define TkMacOSXInvalidateWindow_TCL_DECLARED
/* 21 */
EXTERN void		TkMacOSXInvalidateWindow (MacDrawable * macWin, 
				int flag);
#endif
#ifndef TkMacOSXIsCharacterMissing_TCL_DECLARED
#define TkMacOSXIsCharacterMissing_TCL_DECLARED
/* 22 */
EXTERN int		TkMacOSXIsCharacterMissing (Tk_Font tkfont, 
				unsigned int searchChar);
#endif
#ifndef TkMacOSXMakeRealWindowExist_TCL_DECLARED
#define TkMacOSXMakeRealWindowExist_TCL_DECLARED
/* 23 */
EXTERN void		TkMacOSXMakeRealWindowExist (TkWindow * winPtr);
#endif
#ifndef TkMacOSXMakeStippleMap_TCL_DECLARED
#define TkMacOSXMakeStippleMap_TCL_DECLARED
/* 24 */
EXTERN BitMapPtr	TkMacOSXMakeStippleMap (Drawable d1, Drawable d2);
#endif
#ifndef TkMacOSXMenuClick_TCL_DECLARED
#define TkMacOSXMenuClick_TCL_DECLARED
/* 25 */
EXTERN void		TkMacOSXMenuClick (void);
#endif
#ifndef TkMacOSXRegisterOffScreenWindow_TCL_DECLARED
#define TkMacOSXRegisterOffScreenWindow_TCL_DECLARED
/* 26 */
EXTERN void		TkMacOSXRegisterOffScreenWindow (Window window, 
				GWorldPtr portPtr);
#endif
#ifndef TkMacOSXResizable_TCL_DECLARED
#define TkMacOSXResizable_TCL_DECLARED
/* 27 */
EXTERN int		TkMacOSXResizable (TkWindow * winPtr);
#endif
#ifndef TkMacOSXSetHelpMenuItemCount_TCL_DECLARED
#define TkMacOSXSetHelpMenuItemCount_TCL_DECLARED
/* 28 */
EXTERN void		TkMacOSXSetHelpMenuItemCount (void);
#endif
#ifndef TkMacOSXSetScrollbarGrow_TCL_DECLARED
#define TkMacOSXSetScrollbarGrow_TCL_DECLARED
/* 29 */
EXTERN void		TkMacOSXSetScrollbarGrow (TkWindow * winPtr, 
				int flag);
#endif
#ifndef TkMacOSXSetUpClippingRgn_TCL_DECLARED
#define TkMacOSXSetUpClippingRgn_TCL_DECLARED
/* 30 */
EXTERN void		TkMacOSXSetUpClippingRgn (Drawable drawable);
#endif
#ifndef TkMacOSXSetUpGraphicsPort_TCL_DECLARED
#define TkMacOSXSetUpGraphicsPort_TCL_DECLARED
/* 31 */
EXTERN void		TkMacOSXSetUpGraphicsPort (GC gc, GWorldPtr destPort);
#endif
#ifndef TkMacOSXUpdateClipRgn_TCL_DECLARED
#define TkMacOSXUpdateClipRgn_TCL_DECLARED
/* 32 */
EXTERN void		TkMacOSXUpdateClipRgn (TkWindow * winPtr);
#endif
#ifndef TkMacOSXUnregisterMacWindow_TCL_DECLARED
#define TkMacOSXUnregisterMacWindow_TCL_DECLARED
/* 33 */
EXTERN void		TkMacOSXUnregisterMacWindow (WindowRef portPtr);
#endif
#ifndef TkMacOSXUseMenuID_TCL_DECLARED
#define TkMacOSXUseMenuID_TCL_DECLARED
/* 34 */
EXTERN int		TkMacOSXUseMenuID (short macID);
#endif
#ifndef TkMacOSXVisableClipRgn_TCL_DECLARED
#define TkMacOSXVisableClipRgn_TCL_DECLARED
/* 35 */
EXTERN RgnHandle	TkMacOSXVisableClipRgn (TkWindow * winPtr);
#endif
#ifndef TkMacOSXWinBounds_TCL_DECLARED
#define TkMacOSXWinBounds_TCL_DECLARED
/* 36 */
EXTERN void		TkMacOSXWinBounds (TkWindow * winPtr, 
				Rect * geometry);
#endif
#ifndef TkMacOSXWindowOffset_TCL_DECLARED
#define TkMacOSXWindowOffset_TCL_DECLARED
/* 37 */
EXTERN void		TkMacOSXWindowOffset (WindowRef wRef, int * xOffset, 
				int * yOffset);
#endif
#ifndef TkSetMacColor_TCL_DECLARED
#define TkSetMacColor_TCL_DECLARED
/* 38 */
EXTERN int		TkSetMacColor (unsigned long pixel, 
				RGBColor * macColor);
#endif
#ifndef TkSetWMName_TCL_DECLARED
#define TkSetWMName_TCL_DECLARED
/* 39 */
EXTERN void		TkSetWMName (TkWindow * winPtr, Tk_Uid titleUid);
#endif
#ifndef TkSuspendClipboard_TCL_DECLARED
#define TkSuspendClipboard_TCL_DECLARED
/* 40 */
EXTERN void		TkSuspendClipboard (void);
#endif
#ifndef TkMacOSXZoomToplevel_TCL_DECLARED
#define TkMacOSXZoomToplevel_TCL_DECLARED
/* 41 */
EXTERN int		TkMacOSXZoomToplevel (WindowPtr whichWindow, 
				short zoomPart);
#endif
#ifndef Tk_TopCoordsToWindow_TCL_DECLARED
#define Tk_TopCoordsToWindow_TCL_DECLARED
/* 42 */
EXTERN Tk_Window	Tk_TopCoordsToWindow (Tk_Window tkwin, int rootX, 
				int rootY, int * newX, int * newY);
#endif
#ifndef TkMacOSXContainerId_TCL_DECLARED
#define TkMacOSXContainerId_TCL_DECLARED
/* 43 */
EXTERN MacDrawable *	TkMacOSXContainerId (TkWindow * winPtr);
#endif
#ifndef TkMacOSXGetHostToplevel_TCL_DECLARED
#define TkMacOSXGetHostToplevel_TCL_DECLARED
/* 44 */
EXTERN MacDrawable *	TkMacOSXGetHostToplevel (TkWindow * winPtr);
#endif
#ifndef TkMacOSXPreprocessMenu_TCL_DECLARED
#define TkMacOSXPreprocessMenu_TCL_DECLARED
/* 45 */
EXTERN void		TkMacOSXPreprocessMenu (void);
#endif
#ifndef TkpIsWindowFloating_TCL_DECLARED
#define TkpIsWindowFloating_TCL_DECLARED
/* 46 */
EXTERN int		TkpIsWindowFloating (WindowRef window);
#endif
#ifndef TkMacOSXGetCapture_TCL_DECLARED
#define TkMacOSXGetCapture_TCL_DECLARED
/* 47 */
EXTERN Tk_Window	TkMacOSXGetCapture (void);
#endif
/* Slot 48 is reserved */
#ifndef TkGetTransientMaster_TCL_DECLARED
#define TkGetTransientMaster_TCL_DECLARED
/* 49 */
EXTERN Window		TkGetTransientMaster (TkWindow * winPtr);
#endif
#ifndef TkGenerateButtonEvent_TCL_DECLARED
#define TkGenerateButtonEvent_TCL_DECLARED
/* 50 */
EXTERN int		TkGenerateButtonEvent (int x, int y, Window window, 
				unsigned int state);
#endif
#ifndef TkGenWMDestroyEvent_TCL_DECLARED
#define TkGenWMDestroyEvent_TCL_DECLARED
/* 51 */
EXTERN void		TkGenWMDestroyEvent (Tk_Window tkwin);
#endif
/* Slot 52 is reserved */
#ifndef TkpGetMS_TCL_DECLARED
#define TkpGetMS_TCL_DECLARED
/* 53 */
EXTERN unsigned long	TkpGetMS (void);
#endif
#endif /* MAC_OSX_TK */
#if !(defined(__WIN32__) || defined(MAC_OSX_TK)) /* X11 */
#ifndef TkCreateXEventSource_TCL_DECLARED
#define TkCreateXEventSource_TCL_DECLARED
/* 0 */
EXTERN void		TkCreateXEventSource (void);
#endif
#ifndef TkFreeWindowId_TCL_DECLARED
#define TkFreeWindowId_TCL_DECLARED
/* 1 */
EXTERN void		TkFreeWindowId (TkDisplay * dispPtr, Window w);
#endif
#ifndef TkInitXId_TCL_DECLARED
#define TkInitXId_TCL_DECLARED
/* 2 */
EXTERN void		TkInitXId (TkDisplay * dispPtr);
#endif
#ifndef TkpCmapStressed_TCL_DECLARED
#define TkpCmapStressed_TCL_DECLARED
/* 3 */
EXTERN int		TkpCmapStressed (Tk_Window tkwin, Colormap colormap);
#endif
#ifndef TkpSync_TCL_DECLARED
#define TkpSync_TCL_DECLARED
/* 4 */
EXTERN void		TkpSync (Display * display);
#endif
#ifndef TkUnixContainerId_TCL_DECLARED
#define TkUnixContainerId_TCL_DECLARED
/* 5 */
EXTERN Window		TkUnixContainerId (TkWindow * winPtr);
#endif
#ifndef TkUnixDoOneXEvent_TCL_DECLARED
#define TkUnixDoOneXEvent_TCL_DECLARED
/* 6 */
EXTERN int		TkUnixDoOneXEvent (Tcl_Time * timePtr);
#endif
#ifndef TkUnixSetMenubar_TCL_DECLARED
#define TkUnixSetMenubar_TCL_DECLARED
/* 7 */
EXTERN void		TkUnixSetMenubar (Tk_Window tkwin, Tk_Window menubar);
#endif
#ifndef TkpScanWindowId_TCL_DECLARED
#define TkpScanWindowId_TCL_DECLARED
/* 8 */
EXTERN int		TkpScanWindowId (Tcl_Interp * interp, 
				CONST char * string, Window * idPtr);
#endif
#ifndef TkWmCleanup_TCL_DECLARED
#define TkWmCleanup_TCL_DECLARED
/* 9 */
EXTERN void		TkWmCleanup (TkDisplay * dispPtr);
#endif
#ifndef TkSendCleanup_TCL_DECLARED
#define TkSendCleanup_TCL_DECLARED
/* 10 */
EXTERN void		TkSendCleanup (TkDisplay * dispPtr);
#endif
#ifndef TkFreeXId_TCL_DECLARED
#define TkFreeXId_TCL_DECLARED
/* 11 */
EXTERN void		TkFreeXId (TkDisplay * dispPtr);
#endif
#ifndef TkpWmSetState_TCL_DECLARED
#define TkpWmSetState_TCL_DECLARED
/* 12 */
EXTERN int		TkpWmSetState (TkWindow * winPtr, int state);
#endif
#ifndef TkpTestsendCmd_TCL_DECLARED
#define TkpTestsendCmd_TCL_DECLARED
/* 13 */
EXTERN int		TkpTestsendCmd (ClientData clientData, 
				Tcl_Interp * interp, int argc, 
				CONST char ** argv);
#endif
#endif /* X11 */

typedef struct TkIntPlatStubs {
    int magic;
    struct TkIntPlatStubHooks *hooks;

#ifdef __WIN32__
    char * (*tkAlignImageData) (XImage * image, int alignment, int bitOrder); /* 0 */
    void *reserved1;
    void (*tkGenerateActivateEvents) (TkWindow * winPtr, int active); /* 2 */
    unsigned long (*tkpGetMS) (void); /* 3 */
    void (*tkPointerDeadWindow) (TkWindow * winPtr); /* 4 */
    void (*tkpPrintWindowId) (char * buf, Window window); /* 5 */
    int (*tkpScanWindowId) (Tcl_Interp * interp, CONST char * string, Window * idPtr); /* 6 */
    void (*tkpSetCapture) (TkWindow * winPtr); /* 7 */
    void (*tkpSetCursor) (TkpCursor cursor); /* 8 */
    void (*tkpWmSetState) (TkWindow * winPtr, int state); /* 9 */
    void (*tkSetPixmapColormap) (Pixmap pixmap, Colormap colormap); /* 10 */
    void (*tkWinCancelMouseTimer) (void); /* 11 */
    void (*tkWinClipboardRender) (TkDisplay * dispPtr, UINT format); /* 12 */
    LRESULT (*tkWinEmbeddedEventProc) (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam); /* 13 */
    void (*tkWinFillRect) (HDC dc, int x, int y, int width, int height, int pixel); /* 14 */
    COLORREF (*tkWinGetBorderPixels) (Tk_Window tkwin, Tk_3DBorder border, int which); /* 15 */
    HDC (*tkWinGetDrawableDC) (Display * display, Drawable d, TkWinDCState * state); /* 16 */
    int (*tkWinGetModifierState) (void); /* 17 */
    HPALETTE (*tkWinGetSystemPalette) (void); /* 18 */
    HWND (*tkWinGetWrapperWindow) (Tk_Window tkwin); /* 19 */
    int (*tkWinHandleMenuEvent) (HWND * phwnd, UINT * pMessage, WPARAM * pwParam, LPARAM * plParam, LRESULT * plResult); /* 20 */
    int (*tkWinIndexOfColor) (XColor * colorPtr); /* 21 */
    void (*tkWinReleaseDrawableDC) (Drawable d, HDC hdc, TkWinDCState * state); /* 22 */
    LRESULT (*tkWinResendEvent) (WNDPROC wndproc, HWND hwnd, XEvent * eventPtr); /* 23 */
    HPALETTE (*tkWinSelectPalette) (HDC dc, Colormap colormap); /* 24 */
    void (*tkWinSetMenu) (Tk_Window tkwin, HMENU hMenu); /* 25 */
    void (*tkWinSetWindowPos) (HWND hwnd, HWND siblingHwnd, int pos); /* 26 */
    void (*tkWinWmCleanup) (HINSTANCE hInstance); /* 27 */
    void (*tkWinXCleanup) (ClientData clientData); /* 28 */
    void (*tkWinXInit) (HINSTANCE hInstance); /* 29 */
    void (*tkWinSetForegroundWindow) (TkWindow * winPtr); /* 30 */
    void (*tkWinDialogDebug) (int debug); /* 31 */
    Tcl_Obj * (*tkWinGetMenuSystemDefault) (Tk_Window tkwin, CONST char * dbName, CONST char * className); /* 32 */
    int (*tkWinGetPlatformId) (void); /* 33 */
    void (*tkWinSetHINSTANCE) (HINSTANCE hInstance); /* 34 */
    int (*tkWinGetPlatformTheme) (void); /* 35 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*tkGenerateActivateEvents) (TkWindow * winPtr, int active); /* 0 */
    void *reserved1;
    void *reserved2;
    void (*tkPointerDeadWindow) (TkWindow * winPtr); /* 3 */
    void (*tkpSetCapture) (TkWindow * winPtr); /* 4 */
    void (*tkpSetCursor) (TkpCursor cursor); /* 5 */
    void (*tkpWmSetState) (TkWindow * winPtr, int state); /* 6 */
    void (*tkAboutDlg) (void); /* 7 */
    unsigned int (*tkMacOSXButtonKeyState) (void); /* 8 */
    void (*tkMacOSXClearMenubarActive) (void); /* 9 */
    int (*tkMacOSXDispatchMenuEvent) (int menuID, int index); /* 10 */
    void (*tkMacOSXInstallCursor) (int resizeOverride); /* 11 */
    void (*tkMacOSXHandleTearoffMenu) (void); /* 12 */
    void *reserved13;
    int (*tkMacOSXDoHLEvent) (EventRecord * theEvent); /* 14 */
    void *reserved15;
    Window (*tkMacOSXGetXWindow) (WindowRef macWinPtr); /* 16 */
    int (*tkMacOSXGrowToplevel) (WindowRef whichWindow, Point start); /* 17 */
    void (*tkMacOSXHandleMenuSelect) (MenuID theMenu, MenuItemIndex theItem, int optionKeyPressed); /* 18 */
    void *reserved19;
    void *reserved20;
    void (*tkMacOSXInvalidateWindow) (MacDrawable * macWin, int flag); /* 21 */
    int (*tkMacOSXIsCharacterMissing) (Tk_Font tkfont, unsigned int searchChar); /* 22 */
    void (*tkMacOSXMakeRealWindowExist) (TkWindow * winPtr); /* 23 */
    BitMapPtr (*tkMacOSXMakeStippleMap) (Drawable d1, Drawable d2); /* 24 */
    void (*tkMacOSXMenuClick) (void); /* 25 */
    void (*tkMacOSXRegisterOffScreenWindow) (Window window, GWorldPtr portPtr); /* 26 */
    int (*tkMacOSXResizable) (TkWindow * winPtr); /* 27 */
    void (*tkMacOSXSetHelpMenuItemCount) (void); /* 28 */
    void (*tkMacOSXSetScrollbarGrow) (TkWindow * winPtr, int flag); /* 29 */
    void (*tkMacOSXSetUpClippingRgn) (Drawable drawable); /* 30 */
    void (*tkMacOSXSetUpGraphicsPort) (GC gc, GWorldPtr destPort); /* 31 */
    void (*tkMacOSXUpdateClipRgn) (TkWindow * winPtr); /* 32 */
    void (*tkMacOSXUnregisterMacWindow) (WindowRef portPtr); /* 33 */
    int (*tkMacOSXUseMenuID) (short macID); /* 34 */
    RgnHandle (*tkMacOSXVisableClipRgn) (TkWindow * winPtr); /* 35 */
    void (*tkMacOSXWinBounds) (TkWindow * winPtr, Rect * geometry); /* 36 */
    void (*tkMacOSXWindowOffset) (WindowRef wRef, int * xOffset, int * yOffset); /* 37 */
    int (*tkSetMacColor) (unsigned long pixel, RGBColor * macColor); /* 38 */
    void (*tkSetWMName) (TkWindow * winPtr, Tk_Uid titleUid); /* 39 */
    void (*tkSuspendClipboard) (void); /* 40 */
    int (*tkMacOSXZoomToplevel) (WindowPtr whichWindow, short zoomPart); /* 41 */
    Tk_Window (*tk_TopCoordsToWindow) (Tk_Window tkwin, int rootX, int rootY, int * newX, int * newY); /* 42 */
    MacDrawable * (*tkMacOSXContainerId) (TkWindow * winPtr); /* 43 */
    MacDrawable * (*tkMacOSXGetHostToplevel) (TkWindow * winPtr); /* 44 */
    void (*tkMacOSXPreprocessMenu) (void); /* 45 */
    int (*tkpIsWindowFloating) (WindowRef window); /* 46 */
    Tk_Window (*tkMacOSXGetCapture) (void); /* 47 */
    void *reserved48;
    Window (*tkGetTransientMaster) (TkWindow * winPtr); /* 49 */
    int (*tkGenerateButtonEvent) (int x, int y, Window window, unsigned int state); /* 50 */
    void (*tkGenWMDestroyEvent) (Tk_Window tkwin); /* 51 */
    void *reserved52;
    unsigned long (*tkpGetMS) (void); /* 53 */
#endif /* MAC_OSX_TK */
#if !(defined(__WIN32__) || defined(MAC_OSX_TK)) /* X11 */
    void (*tkCreateXEventSource) (void); /* 0 */
    void (*tkFreeWindowId) (TkDisplay * dispPtr, Window w); /* 1 */
    void (*tkInitXId) (TkDisplay * dispPtr); /* 2 */
    int (*tkpCmapStressed) (Tk_Window tkwin, Colormap colormap); /* 3 */
    void (*tkpSync) (Display * display); /* 4 */
    Window (*tkUnixContainerId) (TkWindow * winPtr); /* 5 */
    int (*tkUnixDoOneXEvent) (Tcl_Time * timePtr); /* 6 */
    void (*tkUnixSetMenubar) (Tk_Window tkwin, Tk_Window menubar); /* 7 */
    int (*tkpScanWindowId) (Tcl_Interp * interp, CONST char * string, Window * idPtr); /* 8 */
    void (*tkWmCleanup) (TkDisplay * dispPtr); /* 9 */
    void (*tkSendCleanup) (TkDisplay * dispPtr); /* 10 */
    void (*tkFreeXId) (TkDisplay * dispPtr); /* 11 */
    int (*tkpWmSetState) (TkWindow * winPtr, int state); /* 12 */
    int (*tkpTestsendCmd) (ClientData clientData, Tcl_Interp * interp, int argc, CONST char ** argv); /* 13 */
#endif /* X11 */
} TkIntPlatStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern TkIntPlatStubs *tkIntPlatStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifdef __WIN32__
#ifndef TkAlignImageData
#define TkAlignImageData \
	(tkIntPlatStubsPtr->tkAlignImageData) /* 0 */
#endif
/* Slot 1 is reserved */
#ifndef TkGenerateActivateEvents
#define TkGenerateActivateEvents \
	(tkIntPlatStubsPtr->tkGenerateActivateEvents) /* 2 */
#endif
#ifndef TkpGetMS
#define TkpGetMS \
	(tkIntPlatStubsPtr->tkpGetMS) /* 3 */
#endif
#ifndef TkPointerDeadWindow
#define TkPointerDeadWindow \
	(tkIntPlatStubsPtr->tkPointerDeadWindow) /* 4 */
#endif
#ifndef TkpPrintWindowId
#define TkpPrintWindowId \
	(tkIntPlatStubsPtr->tkpPrintWindowId) /* 5 */
#endif
#ifndef TkpScanWindowId
#define TkpScanWindowId \
	(tkIntPlatStubsPtr->tkpScanWindowId) /* 6 */
#endif
#ifndef TkpSetCapture
#define TkpSetCapture \
	(tkIntPlatStubsPtr->tkpSetCapture) /* 7 */
#endif
#ifndef TkpSetCursor
#define TkpSetCursor \
	(tkIntPlatStubsPtr->tkpSetCursor) /* 8 */
#endif
#ifndef TkpWmSetState
#define TkpWmSetState \
	(tkIntPlatStubsPtr->tkpWmSetState) /* 9 */
#endif
#ifndef TkSetPixmapColormap
#define TkSetPixmapColormap \
	(tkIntPlatStubsPtr->tkSetPixmapColormap) /* 10 */
#endif
#ifndef TkWinCancelMouseTimer
#define TkWinCancelMouseTimer \
	(tkIntPlatStubsPtr->tkWinCancelMouseTimer) /* 11 */
#endif
#ifndef TkWinClipboardRender
#define TkWinClipboardRender \
	(tkIntPlatStubsPtr->tkWinClipboardRender) /* 12 */
#endif
#ifndef TkWinEmbeddedEventProc
#define TkWinEmbeddedEventProc \
	(tkIntPlatStubsPtr->tkWinEmbeddedEventProc) /* 13 */
#endif
#ifndef TkWinFillRect
#define TkWinFillRect \
	(tkIntPlatStubsPtr->tkWinFillRect) /* 14 */
#endif
#ifndef TkWinGetBorderPixels
#define TkWinGetBorderPixels \
	(tkIntPlatStubsPtr->tkWinGetBorderPixels) /* 15 */
#endif
#ifndef TkWinGetDrawableDC
#define TkWinGetDrawableDC \
	(tkIntPlatStubsPtr->tkWinGetDrawableDC) /* 16 */
#endif
#ifndef TkWinGetModifierState
#define TkWinGetModifierState \
	(tkIntPlatStubsPtr->tkWinGetModifierState) /* 17 */
#endif
#ifndef TkWinGetSystemPalette
#define TkWinGetSystemPalette \
	(tkIntPlatStubsPtr->tkWinGetSystemPalette) /* 18 */
#endif
#ifndef TkWinGetWrapperWindow
#define TkWinGetWrapperWindow \
	(tkIntPlatStubsPtr->tkWinGetWrapperWindow) /* 19 */
#endif
#ifndef TkWinHandleMenuEvent
#define TkWinHandleMenuEvent \
	(tkIntPlatStubsPtr->tkWinHandleMenuEvent) /* 20 */
#endif
#ifndef TkWinIndexOfColor
#define TkWinIndexOfColor \
	(tkIntPlatStubsPtr->tkWinIndexOfColor) /* 21 */
#endif
#ifndef TkWinReleaseDrawableDC
#define TkWinReleaseDrawableDC \
	(tkIntPlatStubsPtr->tkWinReleaseDrawableDC) /* 22 */
#endif
#ifndef TkWinResendEvent
#define TkWinResendEvent \
	(tkIntPlatStubsPtr->tkWinResendEvent) /* 23 */
#endif
#ifndef TkWinSelectPalette
#define TkWinSelectPalette \
	(tkIntPlatStubsPtr->tkWinSelectPalette) /* 24 */
#endif
#ifndef TkWinSetMenu
#define TkWinSetMenu \
	(tkIntPlatStubsPtr->tkWinSetMenu) /* 25 */
#endif
#ifndef TkWinSetWindowPos
#define TkWinSetWindowPos \
	(tkIntPlatStubsPtr->tkWinSetWindowPos) /* 26 */
#endif
#ifndef TkWinWmCleanup
#define TkWinWmCleanup \
	(tkIntPlatStubsPtr->tkWinWmCleanup) /* 27 */
#endif
#ifndef TkWinXCleanup
#define TkWinXCleanup \
	(tkIntPlatStubsPtr->tkWinXCleanup) /* 28 */
#endif
#ifndef TkWinXInit
#define TkWinXInit \
	(tkIntPlatStubsPtr->tkWinXInit) /* 29 */
#endif
#ifndef TkWinSetForegroundWindow
#define TkWinSetForegroundWindow \
	(tkIntPlatStubsPtr->tkWinSetForegroundWindow) /* 30 */
#endif
#ifndef TkWinDialogDebug
#define TkWinDialogDebug \
	(tkIntPlatStubsPtr->tkWinDialogDebug) /* 31 */
#endif
#ifndef TkWinGetMenuSystemDefault
#define TkWinGetMenuSystemDefault \
	(tkIntPlatStubsPtr->tkWinGetMenuSystemDefault) /* 32 */
#endif
#ifndef TkWinGetPlatformId
#define TkWinGetPlatformId \
	(tkIntPlatStubsPtr->tkWinGetPlatformId) /* 33 */
#endif
#ifndef TkWinSetHINSTANCE
#define TkWinSetHINSTANCE \
	(tkIntPlatStubsPtr->tkWinSetHINSTANCE) /* 34 */
#endif
#ifndef TkWinGetPlatformTheme
#define TkWinGetPlatformTheme \
	(tkIntPlatStubsPtr->tkWinGetPlatformTheme) /* 35 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkGenerateActivateEvents
#define TkGenerateActivateEvents \
	(tkIntPlatStubsPtr->tkGenerateActivateEvents) /* 0 */
#endif
/* Slot 1 is reserved */
/* Slot 2 is reserved */
#ifndef TkPointerDeadWindow
#define TkPointerDeadWindow \
	(tkIntPlatStubsPtr->tkPointerDeadWindow) /* 3 */
#endif
#ifndef TkpSetCapture
#define TkpSetCapture \
	(tkIntPlatStubsPtr->tkpSetCapture) /* 4 */
#endif
#ifndef TkpSetCursor
#define TkpSetCursor \
	(tkIntPlatStubsPtr->tkpSetCursor) /* 5 */
#endif
#ifndef TkpWmSetState
#define TkpWmSetState \
	(tkIntPlatStubsPtr->tkpWmSetState) /* 6 */
#endif
#ifndef TkAboutDlg
#define TkAboutDlg \
	(tkIntPlatStubsPtr->tkAboutDlg) /* 7 */
#endif
#ifndef TkMacOSXButtonKeyState
#define TkMacOSXButtonKeyState \
	(tkIntPlatStubsPtr->tkMacOSXButtonKeyState) /* 8 */
#endif
#ifndef TkMacOSXClearMenubarActive
#define TkMacOSXClearMenubarActive \
	(tkIntPlatStubsPtr->tkMacOSXClearMenubarActive) /* 9 */
#endif
#ifndef TkMacOSXDispatchMenuEvent
#define TkMacOSXDispatchMenuEvent \
	(tkIntPlatStubsPtr->tkMacOSXDispatchMenuEvent) /* 10 */
#endif
#ifndef TkMacOSXInstallCursor
#define TkMacOSXInstallCursor \
	(tkIntPlatStubsPtr->tkMacOSXInstallCursor) /* 11 */
#endif
#ifndef TkMacOSXHandleTearoffMenu
#define TkMacOSXHandleTearoffMenu \
	(tkIntPlatStubsPtr->tkMacOSXHandleTearoffMenu) /* 12 */
#endif
/* Slot 13 is reserved */
#ifndef TkMacOSXDoHLEvent
#define TkMacOSXDoHLEvent \
	(tkIntPlatStubsPtr->tkMacOSXDoHLEvent) /* 14 */
#endif
/* Slot 15 is reserved */
#ifndef TkMacOSXGetXWindow
#define TkMacOSXGetXWindow \
	(tkIntPlatStubsPtr->tkMacOSXGetXWindow) /* 16 */
#endif
#ifndef TkMacOSXGrowToplevel
#define TkMacOSXGrowToplevel \
	(tkIntPlatStubsPtr->tkMacOSXGrowToplevel) /* 17 */
#endif
#ifndef TkMacOSXHandleMenuSelect
#define TkMacOSXHandleMenuSelect \
	(tkIntPlatStubsPtr->tkMacOSXHandleMenuSelect) /* 18 */
#endif
/* Slot 19 is reserved */
/* Slot 20 is reserved */
#ifndef TkMacOSXInvalidateWindow
#define TkMacOSXInvalidateWindow \
	(tkIntPlatStubsPtr->tkMacOSXInvalidateWindow) /* 21 */
#endif
#ifndef TkMacOSXIsCharacterMissing
#define TkMacOSXIsCharacterMissing \
	(tkIntPlatStubsPtr->tkMacOSXIsCharacterMissing) /* 22 */
#endif
#ifndef TkMacOSXMakeRealWindowExist
#define TkMacOSXMakeRealWindowExist \
	(tkIntPlatStubsPtr->tkMacOSXMakeRealWindowExist) /* 23 */
#endif
#ifndef TkMacOSXMakeStippleMap
#define TkMacOSXMakeStippleMap \
	(tkIntPlatStubsPtr->tkMacOSXMakeStippleMap) /* 24 */
#endif
#ifndef TkMacOSXMenuClick
#define TkMacOSXMenuClick \
	(tkIntPlatStubsPtr->tkMacOSXMenuClick) /* 25 */
#endif
#ifndef TkMacOSXRegisterOffScreenWindow
#define TkMacOSXRegisterOffScreenWindow \
	(tkIntPlatStubsPtr->tkMacOSXRegisterOffScreenWindow) /* 26 */
#endif
#ifndef TkMacOSXResizable
#define TkMacOSXResizable \
	(tkIntPlatStubsPtr->tkMacOSXResizable) /* 27 */
#endif
#ifndef TkMacOSXSetHelpMenuItemCount
#define TkMacOSXSetHelpMenuItemCount \
	(tkIntPlatStubsPtr->tkMacOSXSetHelpMenuItemCount) /* 28 */
#endif
#ifndef TkMacOSXSetScrollbarGrow
#define TkMacOSXSetScrollbarGrow \
	(tkIntPlatStubsPtr->tkMacOSXSetScrollbarGrow) /* 29 */
#endif
#ifndef TkMacOSXSetUpClippingRgn
#define TkMacOSXSetUpClippingRgn \
	(tkIntPlatStubsPtr->tkMacOSXSetUpClippingRgn) /* 30 */
#endif
#ifndef TkMacOSXSetUpGraphicsPort
#define TkMacOSXSetUpGraphicsPort \
	(tkIntPlatStubsPtr->tkMacOSXSetUpGraphicsPort) /* 31 */
#endif
#ifndef TkMacOSXUpdateClipRgn
#define TkMacOSXUpdateClipRgn \
	(tkIntPlatStubsPtr->tkMacOSXUpdateClipRgn) /* 32 */
#endif
#ifndef TkMacOSXUnregisterMacWindow
#define TkMacOSXUnregisterMacWindow \
	(tkIntPlatStubsPtr->tkMacOSXUnregisterMacWindow) /* 33 */
#endif
#ifndef TkMacOSXUseMenuID
#define TkMacOSXUseMenuID \
	(tkIntPlatStubsPtr->tkMacOSXUseMenuID) /* 34 */
#endif
#ifndef TkMacOSXVisableClipRgn
#define TkMacOSXVisableClipRgn \
	(tkIntPlatStubsPtr->tkMacOSXVisableClipRgn) /* 35 */
#endif
#ifndef TkMacOSXWinBounds
#define TkMacOSXWinBounds \
	(tkIntPlatStubsPtr->tkMacOSXWinBounds) /* 36 */
#endif
#ifndef TkMacOSXWindowOffset
#define TkMacOSXWindowOffset \
	(tkIntPlatStubsPtr->tkMacOSXWindowOffset) /* 37 */
#endif
#ifndef TkSetMacColor
#define TkSetMacColor \
	(tkIntPlatStubsPtr->tkSetMacColor) /* 38 */
#endif
#ifndef TkSetWMName
#define TkSetWMName \
	(tkIntPlatStubsPtr->tkSetWMName) /* 39 */
#endif
#ifndef TkSuspendClipboard
#define TkSuspendClipboard \
	(tkIntPlatStubsPtr->tkSuspendClipboard) /* 40 */
#endif
#ifndef TkMacOSXZoomToplevel
#define TkMacOSXZoomToplevel \
	(tkIntPlatStubsPtr->tkMacOSXZoomToplevel) /* 41 */
#endif
#ifndef Tk_TopCoordsToWindow
#define Tk_TopCoordsToWindow \
	(tkIntPlatStubsPtr->tk_TopCoordsToWindow) /* 42 */
#endif
#ifndef TkMacOSXContainerId
#define TkMacOSXContainerId \
	(tkIntPlatStubsPtr->tkMacOSXContainerId) /* 43 */
#endif
#ifndef TkMacOSXGetHostToplevel
#define TkMacOSXGetHostToplevel \
	(tkIntPlatStubsPtr->tkMacOSXGetHostToplevel) /* 44 */
#endif
#ifndef TkMacOSXPreprocessMenu
#define TkMacOSXPreprocessMenu \
	(tkIntPlatStubsPtr->tkMacOSXPreprocessMenu) /* 45 */
#endif
#ifndef TkpIsWindowFloating
#define TkpIsWindowFloating \
	(tkIntPlatStubsPtr->tkpIsWindowFloating) /* 46 */
#endif
#ifndef TkMacOSXGetCapture
#define TkMacOSXGetCapture \
	(tkIntPlatStubsPtr->tkMacOSXGetCapture) /* 47 */
#endif
/* Slot 48 is reserved */
#ifndef TkGetTransientMaster
#define TkGetTransientMaster \
	(tkIntPlatStubsPtr->tkGetTransientMaster) /* 49 */
#endif
#ifndef TkGenerateButtonEvent
#define TkGenerateButtonEvent \
	(tkIntPlatStubsPtr->tkGenerateButtonEvent) /* 50 */
#endif
#ifndef TkGenWMDestroyEvent
#define TkGenWMDestroyEvent \
	(tkIntPlatStubsPtr->tkGenWMDestroyEvent) /* 51 */
#endif
/* Slot 52 is reserved */
#ifndef TkpGetMS
#define TkpGetMS \
	(tkIntPlatStubsPtr->tkpGetMS) /* 53 */
#endif
#endif /* MAC_OSX_TK */
#if !(defined(__WIN32__) || defined(MAC_OSX_TK)) /* X11 */
#ifndef TkCreateXEventSource
#define TkCreateXEventSource \
	(tkIntPlatStubsPtr->tkCreateXEventSource) /* 0 */
#endif
#ifndef TkFreeWindowId
#define TkFreeWindowId \
	(tkIntPlatStubsPtr->tkFreeWindowId) /* 1 */
#endif
#ifndef TkInitXId
#define TkInitXId \
	(tkIntPlatStubsPtr->tkInitXId) /* 2 */
#endif
#ifndef TkpCmapStressed
#define TkpCmapStressed \
	(tkIntPlatStubsPtr->tkpCmapStressed) /* 3 */
#endif
#ifndef TkpSync
#define TkpSync \
	(tkIntPlatStubsPtr->tkpSync) /* 4 */
#endif
#ifndef TkUnixContainerId
#define TkUnixContainerId \
	(tkIntPlatStubsPtr->tkUnixContainerId) /* 5 */
#endif
#ifndef TkUnixDoOneXEvent
#define TkUnixDoOneXEvent \
	(tkIntPlatStubsPtr->tkUnixDoOneXEvent) /* 6 */
#endif
#ifndef TkUnixSetMenubar
#define TkUnixSetMenubar \
	(tkIntPlatStubsPtr->tkUnixSetMenubar) /* 7 */
#endif
#ifndef TkpScanWindowId
#define TkpScanWindowId \
	(tkIntPlatStubsPtr->tkpScanWindowId) /* 8 */
#endif
#ifndef TkWmCleanup
#define TkWmCleanup \
	(tkIntPlatStubsPtr->tkWmCleanup) /* 9 */
#endif
#ifndef TkSendCleanup
#define TkSendCleanup \
	(tkIntPlatStubsPtr->tkSendCleanup) /* 10 */
#endif
#ifndef TkFreeXId
#define TkFreeXId \
	(tkIntPlatStubsPtr->tkFreeXId) /* 11 */
#endif
#ifndef TkpWmSetState
#define TkpWmSetState \
	(tkIntPlatStubsPtr->tkpWmSetState) /* 12 */
#endif
#ifndef TkpTestsendCmd
#define TkpTestsendCmd \
	(tkIntPlatStubsPtr->tkpTestsendCmd) /* 13 */
#endif
#endif /* X11 */

#endif /* defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TKINTPLATDECLS */
@


1.3
log
@removed trailing whitespace
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntPlatDecls.h,v 1.2 2007/05/07 04:17:40 brlcad Exp $
d39 1
a39 1
EXTERN char *		TkAlignImageData (XImage * image, int alignment,
d46 1
a46 1
EXTERN void		TkGenerateActivateEvents (TkWindow * winPtr,
d67 1
a67 1
EXTERN int		TkpScanWindowId (Tcl_Interp * interp,
d88 1
a88 1
EXTERN void		TkSetPixmapColormap (Pixmap pixmap,
d99 1
a99 1
EXTERN void		TkWinClipboardRender (TkDisplay * dispPtr,
d105 1
a105 1
EXTERN LRESULT		TkWinEmbeddedEventProc (HWND hwnd, UINT message,
d111 1
a111 1
EXTERN void		TkWinFillRect (HDC dc, int x, int y, int width,
d117 1
a117 1
EXTERN COLORREF		TkWinGetBorderPixels (Tk_Window tkwin,
d123 1
a123 1
EXTERN HDC		TkWinGetDrawableDC (Display * display, Drawable d,
d144 2
a145 2
EXTERN int		TkWinHandleMenuEvent (HWND * phwnd, UINT * pMessage,
				WPARAM * pwParam, LPARAM * plParam,
d156 1
a156 1
EXTERN void		TkWinReleaseDrawableDC (Drawable d, HDC hdc,
d162 1
a162 1
EXTERN LRESULT		TkWinResendEvent (WNDPROC wndproc, HWND hwnd,
d178 1
a178 1
EXTERN void		TkWinSetWindowPos (HWND hwnd, HWND siblingHwnd,
d209 1
a209 1
EXTERN Tcl_Obj *	TkWinGetMenuSystemDefault (Tk_Window tkwin,
d232 1
a232 1
EXTERN void		TkGenerateActivateEvents (TkWindow * winPtr,
d302 1
a302 1
EXTERN int		TkMacOSXGrowToplevel (WindowRef whichWindow,
d308 1
a308 1
EXTERN void		TkMacOSXHandleMenuSelect (MenuID theMenu,
d316 1
a316 1
EXTERN void		TkMacOSXInvalidateWindow (MacDrawable * macWin,
d322 1
a322 1
EXTERN int		TkMacOSXIsCharacterMissing (Tk_Font tkfont,
d343 1
a343 1
EXTERN void		TkMacOSXRegisterOffScreenWindow (Window window,
d359 1
a359 1
EXTERN void		TkMacOSXSetScrollbarGrow (TkWindow * winPtr,
d395 1
a395 1
EXTERN void		TkMacOSXWinBounds (TkWindow * winPtr,
d401 1
a401 1
EXTERN void		TkMacOSXWindowOffset (WindowRef wRef, int * xOffset,
d407 1
a407 1
EXTERN int		TkSetMacColor (unsigned long pixel,
d423 1
a423 1
EXTERN int		TkMacOSXZoomToplevel (WindowPtr whichWindow,
d429 1
a429 1
EXTERN Tk_Window	Tk_TopCoordsToWindow (Tk_Window tkwin, int rootX,
d466 1
a466 1
EXTERN int		TkGenerateButtonEvent (int x, int y, Window window,
d525 1
a525 1
EXTERN int		TkpScanWindowId (Tcl_Interp * interp,
d551 2
a552 2
EXTERN int		TkpTestsendCmd (ClientData clientData,
				Tcl_Interp * interp, int argc,
@


1.2
log
@upgrade to tcl/tk 8.5a6 (from 8.5a5) .. includes even more (extensive) aquatk fixes/enhancements
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntPlatDecls.h,v 1.27 2006/12/18 16:42:46 dgp Exp $
d39 1
a39 1
EXTERN char *		TkAlignImageData (XImage * image, int alignment, 
d46 1
a46 1
EXTERN void		TkGenerateActivateEvents (TkWindow * winPtr, 
d67 1
a67 1
EXTERN int		TkpScanWindowId (Tcl_Interp * interp, 
d88 1
a88 1
EXTERN void		TkSetPixmapColormap (Pixmap pixmap, 
d99 1
a99 1
EXTERN void		TkWinClipboardRender (TkDisplay * dispPtr, 
d105 1
a105 1
EXTERN LRESULT		TkWinEmbeddedEventProc (HWND hwnd, UINT message, 
d111 1
a111 1
EXTERN void		TkWinFillRect (HDC dc, int x, int y, int width, 
d117 1
a117 1
EXTERN COLORREF		TkWinGetBorderPixels (Tk_Window tkwin, 
d123 1
a123 1
EXTERN HDC		TkWinGetDrawableDC (Display * display, Drawable d, 
d144 2
a145 2
EXTERN int		TkWinHandleMenuEvent (HWND * phwnd, UINT * pMessage, 
				WPARAM * pwParam, LPARAM * plParam, 
d156 1
a156 1
EXTERN void		TkWinReleaseDrawableDC (Drawable d, HDC hdc, 
d162 1
a162 1
EXTERN LRESULT		TkWinResendEvent (WNDPROC wndproc, HWND hwnd, 
d178 1
a178 1
EXTERN void		TkWinSetWindowPos (HWND hwnd, HWND siblingHwnd, 
d209 1
a209 1
EXTERN Tcl_Obj *	TkWinGetMenuSystemDefault (Tk_Window tkwin, 
d232 1
a232 1
EXTERN void		TkGenerateActivateEvents (TkWindow * winPtr, 
d302 1
a302 1
EXTERN int		TkMacOSXGrowToplevel (WindowRef whichWindow, 
d308 1
a308 1
EXTERN void		TkMacOSXHandleMenuSelect (MenuID theMenu, 
d316 1
a316 1
EXTERN void		TkMacOSXInvalidateWindow (MacDrawable * macWin, 
d322 1
a322 1
EXTERN int		TkMacOSXIsCharacterMissing (Tk_Font tkfont, 
d343 1
a343 1
EXTERN void		TkMacOSXRegisterOffScreenWindow (Window window, 
d359 1
a359 1
EXTERN void		TkMacOSXSetScrollbarGrow (TkWindow * winPtr, 
d395 1
a395 1
EXTERN void		TkMacOSXWinBounds (TkWindow * winPtr, 
d401 1
a401 1
EXTERN void		TkMacOSXWindowOffset (WindowRef wRef, int * xOffset, 
d407 1
a407 1
EXTERN int		TkSetMacColor (unsigned long pixel, 
d423 1
a423 1
EXTERN int		TkMacOSXZoomToplevel (WindowPtr whichWindow, 
d429 1
a429 1
EXTERN Tk_Window	Tk_TopCoordsToWindow (Tk_Window tkwin, int rootX, 
d466 1
a466 1
EXTERN int		TkGenerateButtonEvent (int x, int y, Window window, 
d525 1
a525 1
EXTERN int		TkpScanWindowId (Tcl_Interp * interp, 
d551 2
a552 2
EXTERN int		TkpTestsendCmd (ClientData clientData, 
				Tcl_Interp * interp, int argc, 
@


1.1
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkIntPlatDecls.h,v 1.26 2005/12/09 00:48:54 das Exp $
d39 2
a40 2
EXTERN char *		TkAlignImageData _ANSI_ARGS_((XImage * image, 
				int alignment, int bitOrder));
d46 2
a47 2
EXTERN void		TkGenerateActivateEvents _ANSI_ARGS_((
				TkWindow * winPtr, int active));
d52 1
a52 1
EXTERN unsigned long	TkpGetMS _ANSI_ARGS_((void));
d57 1
a57 1
EXTERN void		TkPointerDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d62 1
a62 2
EXTERN void		TkpPrintWindowId _ANSI_ARGS_((char * buf, 
				Window window));
d67 2
a68 2
EXTERN int		TkpScanWindowId _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * string, Window * idPtr));
d73 1
a73 1
EXTERN void		TkpSetCapture _ANSI_ARGS_((TkWindow * winPtr));
d78 1
a78 1
EXTERN void		TkpSetCursor _ANSI_ARGS_((TkpCursor cursor));
d83 1
a83 2
EXTERN void		TkpWmSetState _ANSI_ARGS_((TkWindow * winPtr, 
				int state));
d88 2
a89 2
EXTERN void		TkSetPixmapColormap _ANSI_ARGS_((Pixmap pixmap, 
				Colormap colormap));
d94 1
a94 1
EXTERN void		TkWinCancelMouseTimer _ANSI_ARGS_((void));
d99 2
a100 2
EXTERN void		TkWinClipboardRender _ANSI_ARGS_((
				TkDisplay * dispPtr, UINT format));
d105 2
a106 2
EXTERN LRESULT		TkWinEmbeddedEventProc _ANSI_ARGS_((HWND hwnd, 
				UINT message, WPARAM wParam, LPARAM lParam));
d111 2
a112 2
EXTERN void		TkWinFillRect _ANSI_ARGS_((HDC dc, int x, int y, 
				int width, int height, int pixel));
d117 2
a118 2
EXTERN COLORREF		TkWinGetBorderPixels _ANSI_ARGS_((Tk_Window tkwin, 
				Tk_3DBorder border, int which));
d123 2
a124 2
EXTERN HDC		TkWinGetDrawableDC _ANSI_ARGS_((Display * display, 
				Drawable d, TkWinDCState * state));
d129 1
a129 1
EXTERN int		TkWinGetModifierState _ANSI_ARGS_((void));
d134 1
a134 1
EXTERN HPALETTE		TkWinGetSystemPalette _ANSI_ARGS_((void));
d139 1
a139 1
EXTERN HWND		TkWinGetWrapperWindow _ANSI_ARGS_((Tk_Window tkwin));
d144 3
a146 3
EXTERN int		TkWinHandleMenuEvent _ANSI_ARGS_((HWND * phwnd, 
				UINT * pMessage, WPARAM * pwParam, 
				LPARAM * plParam, LRESULT * plResult));
d151 1
a151 1
EXTERN int		TkWinIndexOfColor _ANSI_ARGS_((XColor * colorPtr));
d156 2
a157 2
EXTERN void		TkWinReleaseDrawableDC _ANSI_ARGS_((Drawable d, 
				HDC hdc, TkWinDCState * state));
d162 2
a163 2
EXTERN LRESULT		TkWinResendEvent _ANSI_ARGS_((WNDPROC wndproc, 
				HWND hwnd, XEvent * eventPtr));
d168 1
a168 2
EXTERN HPALETTE		TkWinSelectPalette _ANSI_ARGS_((HDC dc, 
				Colormap colormap));
d173 1
a173 2
EXTERN void		TkWinSetMenu _ANSI_ARGS_((Tk_Window tkwin, 
				HMENU hMenu));
d178 2
a179 2
EXTERN void		TkWinSetWindowPos _ANSI_ARGS_((HWND hwnd, 
				HWND siblingHwnd, int pos));
d184 1
a184 1
EXTERN void		TkWinWmCleanup _ANSI_ARGS_((HINSTANCE hInstance));
d189 1
a189 1
EXTERN void		TkWinXCleanup _ANSI_ARGS_((ClientData clientData));
d194 1
a194 1
EXTERN void		TkWinXInit _ANSI_ARGS_((HINSTANCE hInstance));
d199 1
a199 2
EXTERN void		TkWinSetForegroundWindow _ANSI_ARGS_((
				TkWindow * winPtr));
d204 1
a204 1
EXTERN void		TkWinDialogDebug _ANSI_ARGS_((int debug));
d209 2
a210 3
EXTERN Tcl_Obj *	TkWinGetMenuSystemDefault _ANSI_ARGS_((
				Tk_Window tkwin, CONST char * dbName, 
				CONST char * className));
d215 1
a215 1
EXTERN int		TkWinGetPlatformId _ANSI_ARGS_((void));
d220 1
a220 1
EXTERN void		TkWinSetHINSTANCE _ANSI_ARGS_((HINSTANCE hInstance));
d225 1
a225 1
EXTERN int		TkWinGetPlatformTheme _ANSI_ARGS_((void));
d232 2
a233 2
EXTERN void		TkGenerateActivateEvents _ANSI_ARGS_((
				TkWindow * winPtr, int active));
d240 1
a240 1
EXTERN void		TkPointerDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d245 1
a245 1
EXTERN void		TkpSetCapture _ANSI_ARGS_((TkWindow * winPtr));
d250 1
a250 1
EXTERN void		TkpSetCursor _ANSI_ARGS_((TkpCursor cursor));
d255 1
a255 2
EXTERN void		TkpWmSetState _ANSI_ARGS_((TkWindow * winPtr, 
				int state));
d260 1
a260 1
EXTERN void		TkAboutDlg _ANSI_ARGS_((void));
d265 1
a265 1
EXTERN unsigned int	TkMacOSXButtonKeyState _ANSI_ARGS_((void));
d270 1
a270 1
EXTERN void		TkMacOSXClearMenubarActive _ANSI_ARGS_((void));
d275 1
a275 2
EXTERN int		TkMacOSXDispatchMenuEvent _ANSI_ARGS_((int menuID, 
				int index));
d280 1
a280 2
EXTERN void		TkMacOSXInstallCursor _ANSI_ARGS_((
				int resizeOverride));
d285 1
a285 1
EXTERN void		TkMacOSXHandleTearoffMenu _ANSI_ARGS_((void));
d291 1
a291 2
EXTERN int		TkMacOSXDoHLEvent _ANSI_ARGS_((
				EventRecord * theEvent));
d297 1
a297 1
EXTERN Window		TkMacOSXGetXWindow _ANSI_ARGS_((WindowRef macWinPtr));
d302 2
a303 2
EXTERN int		TkMacOSXGrowToplevel _ANSI_ARGS_((
				WindowRef whichWindow, Point start));
d308 2
a309 2
EXTERN void		TkMacOSXHandleMenuSelect _ANSI_ARGS_((MenuID theMenu, 
				MenuItemIndex theItem, int optionKeyPressed));
d316 2
a317 2
EXTERN void		TkMacOSXInvalidateWindow _ANSI_ARGS_((
				MacDrawable * macWin, int flag));
d322 2
a323 2
EXTERN int		TkMacOSXIsCharacterMissing _ANSI_ARGS_((
				Tk_Font tkfont, unsigned int searchChar));
d328 1
a328 2
EXTERN void		TkMacOSXMakeRealWindowExist _ANSI_ARGS_((
				TkWindow * winPtr));
d333 1
a333 2
EXTERN BitMapPtr	TkMacOSXMakeStippleMap _ANSI_ARGS_((Drawable d1, 
				Drawable d2));
d338 1
a338 1
EXTERN void		TkMacOSXMenuClick _ANSI_ARGS_((void));
d343 2
a344 2
EXTERN void		TkMacOSXRegisterOffScreenWindow _ANSI_ARGS_((
				Window window, GWorldPtr portPtr));
d349 1
a349 1
EXTERN int		TkMacOSXResizable _ANSI_ARGS_((TkWindow * winPtr));
d354 1
a354 1
EXTERN void		TkMacOSXSetHelpMenuItemCount _ANSI_ARGS_((void));
d359 2
a360 2
EXTERN void		TkMacOSXSetScrollbarGrow _ANSI_ARGS_((
				TkWindow * winPtr, int flag));
d365 1
a365 2
EXTERN void		TkMacOSXSetUpClippingRgn _ANSI_ARGS_((
				Drawable drawable));
d370 1
a370 2
EXTERN void		TkMacOSXSetUpGraphicsPort _ANSI_ARGS_((GC gc, 
				GWorldPtr destPort));
d375 1
a375 1
EXTERN void		TkMacOSXUpdateClipRgn _ANSI_ARGS_((TkWindow * winPtr));
d380 1
a380 2
EXTERN void		TkMacOSXUnregisterMacWindow _ANSI_ARGS_((
				WindowRef portPtr));
d385 1
a385 1
EXTERN int		TkMacOSXUseMenuID _ANSI_ARGS_((short macID));
d390 1
a390 2
EXTERN RgnHandle	TkMacOSXVisableClipRgn _ANSI_ARGS_((
				TkWindow * winPtr));
d395 2
a396 2
EXTERN void		TkMacOSXWinBounds _ANSI_ARGS_((TkWindow * winPtr, 
				Rect * geometry));
d401 2
a402 2
EXTERN void		TkMacOSXWindowOffset _ANSI_ARGS_((WindowRef wRef, 
				int * xOffset, int * yOffset));
d407 2
a408 2
EXTERN int		TkSetMacColor _ANSI_ARGS_((unsigned long pixel, 
				RGBColor * macColor));
d413 1
a413 2
EXTERN void		TkSetWMName _ANSI_ARGS_((TkWindow * winPtr, 
				Tk_Uid titleUid));
d418 1
a418 1
EXTERN void		TkSuspendClipboard _ANSI_ARGS_((void));
d423 2
a424 2
EXTERN int		TkMacOSXZoomToplevel _ANSI_ARGS_((
				WindowPtr whichWindow, short zoomPart));
d429 2
a430 2
EXTERN Tk_Window	Tk_TopCoordsToWindow _ANSI_ARGS_((Tk_Window tkwin, 
				int rootX, int rootY, int * newX, int * newY));
d435 1
a435 1
EXTERN MacDrawable *	TkMacOSXContainerId _ANSI_ARGS_((TkWindow * winPtr));
d440 1
a440 2
EXTERN MacDrawable *	TkMacOSXGetHostToplevel _ANSI_ARGS_((
				TkWindow * winPtr));
d445 1
a445 1
EXTERN void		TkMacOSXPreprocessMenu _ANSI_ARGS_((void));
d450 1
a450 1
EXTERN int		TkpIsWindowFloating _ANSI_ARGS_((WindowRef window));
d455 1
a455 1
EXTERN Tk_Window	TkMacOSXGetCapture _ANSI_ARGS_((void));
d461 1
a461 1
EXTERN Window		TkGetTransientMaster _ANSI_ARGS_((TkWindow * winPtr));
d466 2
a467 2
EXTERN int		TkGenerateButtonEvent _ANSI_ARGS_((int x, int y, 
				Window window, unsigned int state));
d472 1
a472 1
EXTERN void		TkGenWMDestroyEvent _ANSI_ARGS_((Tk_Window tkwin));
d478 1
a478 1
EXTERN unsigned long	TkpGetMS _ANSI_ARGS_((void));
d485 1
a485 1
EXTERN void		TkCreateXEventSource _ANSI_ARGS_((void));
d490 1
a490 2
EXTERN void		TkFreeWindowId _ANSI_ARGS_((TkDisplay * dispPtr, 
				Window w));
d495 1
a495 1
EXTERN void		TkInitXId _ANSI_ARGS_((TkDisplay * dispPtr));
d500 1
a500 2
EXTERN int		TkpCmapStressed _ANSI_ARGS_((Tk_Window tkwin, 
				Colormap colormap));
d505 1
a505 1
EXTERN void		TkpSync _ANSI_ARGS_((Display * display));
d510 1
a510 1
EXTERN Window		TkUnixContainerId _ANSI_ARGS_((TkWindow * winPtr));
d515 1
a515 1
EXTERN int		TkUnixDoOneXEvent _ANSI_ARGS_((Tcl_Time * timePtr));
d520 1
a520 2
EXTERN void		TkUnixSetMenubar _ANSI_ARGS_((Tk_Window tkwin, 
				Tk_Window menubar));
d525 2
a526 2
EXTERN int		TkpScanWindowId _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * string, Window * idPtr));
d531 1
a531 1
EXTERN void		TkWmCleanup _ANSI_ARGS_((TkDisplay * dispPtr));
d536 1
a536 1
EXTERN void		TkSendCleanup _ANSI_ARGS_((TkDisplay * dispPtr));
d541 1
a541 1
EXTERN void		TkFreeXId _ANSI_ARGS_((TkDisplay * dispPtr));
d546 1
a546 2
EXTERN int		TkpWmSetState _ANSI_ARGS_((TkWindow * winPtr, 
				int state));
d551 1
a551 1
EXTERN int		TkpTestsendCmd _ANSI_ARGS_((ClientData clientData, 
d553 1
a553 1
				CONST char ** argv));
d562 1
a562 1
    char * (*tkAlignImageData) _ANSI_ARGS_((XImage * image, int alignment, int bitOrder)); /* 0 */
d564 34
a597 34
    void (*tkGenerateActivateEvents) _ANSI_ARGS_((TkWindow * winPtr, int active)); /* 2 */
    unsigned long (*tkpGetMS) _ANSI_ARGS_((void)); /* 3 */
    void (*tkPointerDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 4 */
    void (*tkpPrintWindowId) _ANSI_ARGS_((char * buf, Window window)); /* 5 */
    int (*tkpScanWindowId) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * string, Window * idPtr)); /* 6 */
    void (*tkpSetCapture) _ANSI_ARGS_((TkWindow * winPtr)); /* 7 */
    void (*tkpSetCursor) _ANSI_ARGS_((TkpCursor cursor)); /* 8 */
    void (*tkpWmSetState) _ANSI_ARGS_((TkWindow * winPtr, int state)); /* 9 */
    void (*tkSetPixmapColormap) _ANSI_ARGS_((Pixmap pixmap, Colormap colormap)); /* 10 */
    void (*tkWinCancelMouseTimer) _ANSI_ARGS_((void)); /* 11 */
    void (*tkWinClipboardRender) _ANSI_ARGS_((TkDisplay * dispPtr, UINT format)); /* 12 */
    LRESULT (*tkWinEmbeddedEventProc) _ANSI_ARGS_((HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)); /* 13 */
    void (*tkWinFillRect) _ANSI_ARGS_((HDC dc, int x, int y, int width, int height, int pixel)); /* 14 */
    COLORREF (*tkWinGetBorderPixels) _ANSI_ARGS_((Tk_Window tkwin, Tk_3DBorder border, int which)); /* 15 */
    HDC (*tkWinGetDrawableDC) _ANSI_ARGS_((Display * display, Drawable d, TkWinDCState * state)); /* 16 */
    int (*tkWinGetModifierState) _ANSI_ARGS_((void)); /* 17 */
    HPALETTE (*tkWinGetSystemPalette) _ANSI_ARGS_((void)); /* 18 */
    HWND (*tkWinGetWrapperWindow) _ANSI_ARGS_((Tk_Window tkwin)); /* 19 */
    int (*tkWinHandleMenuEvent) _ANSI_ARGS_((HWND * phwnd, UINT * pMessage, WPARAM * pwParam, LPARAM * plParam, LRESULT * plResult)); /* 20 */
    int (*tkWinIndexOfColor) _ANSI_ARGS_((XColor * colorPtr)); /* 21 */
    void (*tkWinReleaseDrawableDC) _ANSI_ARGS_((Drawable d, HDC hdc, TkWinDCState * state)); /* 22 */
    LRESULT (*tkWinResendEvent) _ANSI_ARGS_((WNDPROC wndproc, HWND hwnd, XEvent * eventPtr)); /* 23 */
    HPALETTE (*tkWinSelectPalette) _ANSI_ARGS_((HDC dc, Colormap colormap)); /* 24 */
    void (*tkWinSetMenu) _ANSI_ARGS_((Tk_Window tkwin, HMENU hMenu)); /* 25 */
    void (*tkWinSetWindowPos) _ANSI_ARGS_((HWND hwnd, HWND siblingHwnd, int pos)); /* 26 */
    void (*tkWinWmCleanup) _ANSI_ARGS_((HINSTANCE hInstance)); /* 27 */
    void (*tkWinXCleanup) _ANSI_ARGS_((ClientData clientData)); /* 28 */
    void (*tkWinXInit) _ANSI_ARGS_((HINSTANCE hInstance)); /* 29 */
    void (*tkWinSetForegroundWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 30 */
    void (*tkWinDialogDebug) _ANSI_ARGS_((int debug)); /* 31 */
    Tcl_Obj * (*tkWinGetMenuSystemDefault) _ANSI_ARGS_((Tk_Window tkwin, CONST char * dbName, CONST char * className)); /* 32 */
    int (*tkWinGetPlatformId) _ANSI_ARGS_((void)); /* 33 */
    void (*tkWinSetHINSTANCE) _ANSI_ARGS_((HINSTANCE hInstance)); /* 34 */
    int (*tkWinGetPlatformTheme) _ANSI_ARGS_((void)); /* 35 */
d600 1
a600 1
    void (*tkGenerateActivateEvents) _ANSI_ARGS_((TkWindow * winPtr, int active)); /* 0 */
d603 10
a612 10
    void (*tkPointerDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 3 */
    void (*tkpSetCapture) _ANSI_ARGS_((TkWindow * winPtr)); /* 4 */
    void (*tkpSetCursor) _ANSI_ARGS_((TkpCursor cursor)); /* 5 */
    void (*tkpWmSetState) _ANSI_ARGS_((TkWindow * winPtr, int state)); /* 6 */
    void (*tkAboutDlg) _ANSI_ARGS_((void)); /* 7 */
    unsigned int (*tkMacOSXButtonKeyState) _ANSI_ARGS_((void)); /* 8 */
    void (*tkMacOSXClearMenubarActive) _ANSI_ARGS_((void)); /* 9 */
    int (*tkMacOSXDispatchMenuEvent) _ANSI_ARGS_((int menuID, int index)); /* 10 */
    void (*tkMacOSXInstallCursor) _ANSI_ARGS_((int resizeOverride)); /* 11 */
    void (*tkMacOSXHandleTearoffMenu) _ANSI_ARGS_((void)); /* 12 */
d614 1
a614 1
    int (*tkMacOSXDoHLEvent) _ANSI_ARGS_((EventRecord * theEvent)); /* 14 */
d616 3
a618 3
    Window (*tkMacOSXGetXWindow) _ANSI_ARGS_((WindowRef macWinPtr)); /* 16 */
    int (*tkMacOSXGrowToplevel) _ANSI_ARGS_((WindowRef whichWindow, Point start)); /* 17 */
    void (*tkMacOSXHandleMenuSelect) _ANSI_ARGS_((MenuID theMenu, MenuItemIndex theItem, int optionKeyPressed)); /* 18 */
d621 27
a647 27
    void (*tkMacOSXInvalidateWindow) _ANSI_ARGS_((MacDrawable * macWin, int flag)); /* 21 */
    int (*tkMacOSXIsCharacterMissing) _ANSI_ARGS_((Tk_Font tkfont, unsigned int searchChar)); /* 22 */
    void (*tkMacOSXMakeRealWindowExist) _ANSI_ARGS_((TkWindow * winPtr)); /* 23 */
    BitMapPtr (*tkMacOSXMakeStippleMap) _ANSI_ARGS_((Drawable d1, Drawable d2)); /* 24 */
    void (*tkMacOSXMenuClick) _ANSI_ARGS_((void)); /* 25 */
    void (*tkMacOSXRegisterOffScreenWindow) _ANSI_ARGS_((Window window, GWorldPtr portPtr)); /* 26 */
    int (*tkMacOSXResizable) _ANSI_ARGS_((TkWindow * winPtr)); /* 27 */
    void (*tkMacOSXSetHelpMenuItemCount) _ANSI_ARGS_((void)); /* 28 */
    void (*tkMacOSXSetScrollbarGrow) _ANSI_ARGS_((TkWindow * winPtr, int flag)); /* 29 */
    void (*tkMacOSXSetUpClippingRgn) _ANSI_ARGS_((Drawable drawable)); /* 30 */
    void (*tkMacOSXSetUpGraphicsPort) _ANSI_ARGS_((GC gc, GWorldPtr destPort)); /* 31 */
    void (*tkMacOSXUpdateClipRgn) _ANSI_ARGS_((TkWindow * winPtr)); /* 32 */
    void (*tkMacOSXUnregisterMacWindow) _ANSI_ARGS_((WindowRef portPtr)); /* 33 */
    int (*tkMacOSXUseMenuID) _ANSI_ARGS_((short macID)); /* 34 */
    RgnHandle (*tkMacOSXVisableClipRgn) _ANSI_ARGS_((TkWindow * winPtr)); /* 35 */
    void (*tkMacOSXWinBounds) _ANSI_ARGS_((TkWindow * winPtr, Rect * geometry)); /* 36 */
    void (*tkMacOSXWindowOffset) _ANSI_ARGS_((WindowRef wRef, int * xOffset, int * yOffset)); /* 37 */
    int (*tkSetMacColor) _ANSI_ARGS_((unsigned long pixel, RGBColor * macColor)); /* 38 */
    void (*tkSetWMName) _ANSI_ARGS_((TkWindow * winPtr, Tk_Uid titleUid)); /* 39 */
    void (*tkSuspendClipboard) _ANSI_ARGS_((void)); /* 40 */
    int (*tkMacOSXZoomToplevel) _ANSI_ARGS_((WindowPtr whichWindow, short zoomPart)); /* 41 */
    Tk_Window (*tk_TopCoordsToWindow) _ANSI_ARGS_((Tk_Window tkwin, int rootX, int rootY, int * newX, int * newY)); /* 42 */
    MacDrawable * (*tkMacOSXContainerId) _ANSI_ARGS_((TkWindow * winPtr)); /* 43 */
    MacDrawable * (*tkMacOSXGetHostToplevel) _ANSI_ARGS_((TkWindow * winPtr)); /* 44 */
    void (*tkMacOSXPreprocessMenu) _ANSI_ARGS_((void)); /* 45 */
    int (*tkpIsWindowFloating) _ANSI_ARGS_((WindowRef window)); /* 46 */
    Tk_Window (*tkMacOSXGetCapture) _ANSI_ARGS_((void)); /* 47 */
d649 3
a651 3
    Window (*tkGetTransientMaster) _ANSI_ARGS_((TkWindow * winPtr)); /* 49 */
    int (*tkGenerateButtonEvent) _ANSI_ARGS_((int x, int y, Window window, unsigned int state)); /* 50 */
    void (*tkGenWMDestroyEvent) _ANSI_ARGS_((Tk_Window tkwin)); /* 51 */
d653 1
a653 1
    unsigned long (*tkpGetMS) _ANSI_ARGS_((void)); /* 53 */
d656 14
a669 14
    void (*tkCreateXEventSource) _ANSI_ARGS_((void)); /* 0 */
    void (*tkFreeWindowId) _ANSI_ARGS_((TkDisplay * dispPtr, Window w)); /* 1 */
    void (*tkInitXId) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 2 */
    int (*tkpCmapStressed) _ANSI_ARGS_((Tk_Window tkwin, Colormap colormap)); /* 3 */
    void (*tkpSync) _ANSI_ARGS_((Display * display)); /* 4 */
    Window (*tkUnixContainerId) _ANSI_ARGS_((TkWindow * winPtr)); /* 5 */
    int (*tkUnixDoOneXEvent) _ANSI_ARGS_((Tcl_Time * timePtr)); /* 6 */
    void (*tkUnixSetMenubar) _ANSI_ARGS_((Tk_Window tkwin, Tk_Window menubar)); /* 7 */
    int (*tkpScanWindowId) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * string, Window * idPtr)); /* 8 */
    void (*tkWmCleanup) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 9 */
    void (*tkSendCleanup) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 10 */
    void (*tkFreeXId) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 11 */
    int (*tkpWmSetState) _ANSI_ARGS_((TkWindow * winPtr, int state)); /* 12 */
    int (*tkpTestsendCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int argc, CONST char ** argv)); /* 13 */
@

