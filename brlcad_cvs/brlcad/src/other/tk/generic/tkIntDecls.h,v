head	1.4;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.2
	rel-7-10-2:1.2
	rel-7-10-0:1.1;
locks; strict;
comment	@ * @;


1.4
date	2007.11.06.21.38.41;	author erikgreenwald;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.14.15.21.58;	author erikgreenwald;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.07.04.17.40;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.02.21.49.46;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tk 8.5a6->8.5b1
@
text
@/*
 * tkIntDecls.h --
 *
 *	This file contains the declarations for all unsupported
 *	functions that are exported by the Tk library.  These
 *	interfaces are not guaranteed to remain the same between
 *	versions.  Use at your own risk.
 *
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tkIntDecls.h,v 1.29 2006/12/18 16:42:46 dgp Exp $
 */

#ifndef _TKINTDECLS
#define _TKINTDECLS

#ifdef BUILD_tk
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * WARNING: This file is automatically generated by the tools/genStubs.tcl
 * script.  Any modifications to the function declarations below should be made
 * in the generic/tkInt.decls script.
 */

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifndef TkAllocWindow_TCL_DECLARED
#define TkAllocWindow_TCL_DECLARED
/* 0 */
EXTERN TkWindow *	TkAllocWindow (TkDisplay * dispPtr, int screenNum, 
				TkWindow * parentPtr);
#endif
#ifndef TkBezierPoints_TCL_DECLARED
#define TkBezierPoints_TCL_DECLARED
/* 1 */
EXTERN void		TkBezierPoints (double control[], int numSteps, 
				double * coordPtr);
#endif
#ifndef TkBezierScreenPoints_TCL_DECLARED
#define TkBezierScreenPoints_TCL_DECLARED
/* 2 */
EXTERN void		TkBezierScreenPoints (Tk_Canvas canvas, 
				double control[], int numSteps, 
				XPoint * xPointPtr);
#endif
#ifndef TkBindDeadWindow_TCL_DECLARED
#define TkBindDeadWindow_TCL_DECLARED
/* 3 */
EXTERN void		TkBindDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkBindEventProc_TCL_DECLARED
#define TkBindEventProc_TCL_DECLARED
/* 4 */
EXTERN void		TkBindEventProc (TkWindow * winPtr, 
				XEvent * eventPtr);
#endif
#ifndef TkBindFree_TCL_DECLARED
#define TkBindFree_TCL_DECLARED
/* 5 */
EXTERN void		TkBindFree (TkMainInfo * mainPtr);
#endif
#ifndef TkBindInit_TCL_DECLARED
#define TkBindInit_TCL_DECLARED
/* 6 */
EXTERN void		TkBindInit (TkMainInfo * mainPtr);
#endif
#ifndef TkChangeEventWindow_TCL_DECLARED
#define TkChangeEventWindow_TCL_DECLARED
/* 7 */
EXTERN void		TkChangeEventWindow (XEvent * eventPtr, 
				TkWindow * winPtr);
#endif
#ifndef TkClipInit_TCL_DECLARED
#define TkClipInit_TCL_DECLARED
/* 8 */
EXTERN int		TkClipInit (Tcl_Interp * interp, TkDisplay * dispPtr);
#endif
#ifndef TkComputeAnchor_TCL_DECLARED
#define TkComputeAnchor_TCL_DECLARED
/* 9 */
EXTERN void		TkComputeAnchor (Tk_Anchor anchor, Tk_Window tkwin, 
				int padX, int padY, int innerWidth, 
				int innerHeight, int * xPtr, int * yPtr);
#endif
#ifndef TkCopyAndGlobalEval_TCL_DECLARED
#define TkCopyAndGlobalEval_TCL_DECLARED
/* 10 */
EXTERN int		TkCopyAndGlobalEval (Tcl_Interp * interp, 
				char * script);
#endif
#ifndef TkCreateBindingProcedure_TCL_DECLARED
#define TkCreateBindingProcedure_TCL_DECLARED
/* 11 */
EXTERN unsigned long	TkCreateBindingProcedure (Tcl_Interp * interp, 
				Tk_BindingTable bindingTable, 
				ClientData object, CONST char * eventString, 
				TkBindEvalProc * evalProc, 
				TkBindFreeProc * freeProc, 
				ClientData clientData);
#endif
#ifndef TkCreateCursorFromData_TCL_DECLARED
#define TkCreateCursorFromData_TCL_DECLARED
/* 12 */
EXTERN TkCursor *	TkCreateCursorFromData (Tk_Window tkwin, 
				CONST char * source, CONST char * mask, 
				int width, int height, int xHot, int yHot, 
				XColor fg, XColor bg);
#endif
#ifndef TkCreateFrame_TCL_DECLARED
#define TkCreateFrame_TCL_DECLARED
/* 13 */
EXTERN int		TkCreateFrame (ClientData clientData, 
				Tcl_Interp * interp, int argc, char ** argv, 
				int toplevel, char * appName);
#endif
#ifndef TkCreateMainWindow_TCL_DECLARED
#define TkCreateMainWindow_TCL_DECLARED
/* 14 */
EXTERN Tk_Window	TkCreateMainWindow (Tcl_Interp * interp, 
				CONST char * screenName, char * baseName);
#endif
#ifndef TkCurrentTime_TCL_DECLARED
#define TkCurrentTime_TCL_DECLARED
/* 15 */
EXTERN Time		TkCurrentTime (TkDisplay * dispPtr);
#endif
#ifndef TkDeleteAllImages_TCL_DECLARED
#define TkDeleteAllImages_TCL_DECLARED
/* 16 */
EXTERN void		TkDeleteAllImages (TkMainInfo * mainPtr);
#endif
#ifndef TkDoConfigureNotify_TCL_DECLARED
#define TkDoConfigureNotify_TCL_DECLARED
/* 17 */
EXTERN void		TkDoConfigureNotify (TkWindow * winPtr);
#endif
#ifndef TkDrawInsetFocusHighlight_TCL_DECLARED
#define TkDrawInsetFocusHighlight_TCL_DECLARED
/* 18 */
EXTERN void		TkDrawInsetFocusHighlight (Tk_Window tkwin, GC gc, 
				int width, Drawable drawable, int padding);
#endif
#ifndef TkEventDeadWindow_TCL_DECLARED
#define TkEventDeadWindow_TCL_DECLARED
/* 19 */
EXTERN void		TkEventDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkFillPolygon_TCL_DECLARED
#define TkFillPolygon_TCL_DECLARED
/* 20 */
EXTERN void		TkFillPolygon (Tk_Canvas canvas, double * coordPtr, 
				int numPoints, Display * display, 
				Drawable drawable, GC gc, GC outlineGC);
#endif
#ifndef TkFindStateNum_TCL_DECLARED
#define TkFindStateNum_TCL_DECLARED
/* 21 */
EXTERN int		TkFindStateNum (Tcl_Interp * interp, 
				CONST char * option, 
				CONST TkStateMap * mapPtr, 
				CONST char * strKey);
#endif
#ifndef TkFindStateString_TCL_DECLARED
#define TkFindStateString_TCL_DECLARED
/* 22 */
EXTERN char *		TkFindStateString (CONST TkStateMap * mapPtr, 
				int numKey);
#endif
#ifndef TkFocusDeadWindow_TCL_DECLARED
#define TkFocusDeadWindow_TCL_DECLARED
/* 23 */
EXTERN void		TkFocusDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkFocusFilterEvent_TCL_DECLARED
#define TkFocusFilterEvent_TCL_DECLARED
/* 24 */
EXTERN int		TkFocusFilterEvent (TkWindow * winPtr, 
				XEvent * eventPtr);
#endif
#ifndef TkFocusKeyEvent_TCL_DECLARED
#define TkFocusKeyEvent_TCL_DECLARED
/* 25 */
EXTERN TkWindow *	TkFocusKeyEvent (TkWindow * winPtr, 
				XEvent * eventPtr);
#endif
#ifndef TkFontPkgInit_TCL_DECLARED
#define TkFontPkgInit_TCL_DECLARED
/* 26 */
EXTERN void		TkFontPkgInit (TkMainInfo * mainPtr);
#endif
#ifndef TkFontPkgFree_TCL_DECLARED
#define TkFontPkgFree_TCL_DECLARED
/* 27 */
EXTERN void		TkFontPkgFree (TkMainInfo * mainPtr);
#endif
#ifndef TkFreeBindingTags_TCL_DECLARED
#define TkFreeBindingTags_TCL_DECLARED
/* 28 */
EXTERN void		TkFreeBindingTags (TkWindow * winPtr);
#endif
#ifndef TkpFreeCursor_TCL_DECLARED
#define TkpFreeCursor_TCL_DECLARED
/* 29 */
EXTERN void		TkpFreeCursor (TkCursor * cursorPtr);
#endif
#ifndef TkGetBitmapData_TCL_DECLARED
#define TkGetBitmapData_TCL_DECLARED
/* 30 */
EXTERN char *		TkGetBitmapData (Tcl_Interp * interp, char * string, 
				char * fileName, int * widthPtr, 
				int * heightPtr, int * hotXPtr, 
				int * hotYPtr);
#endif
#ifndef TkGetButtPoints_TCL_DECLARED
#define TkGetButtPoints_TCL_DECLARED
/* 31 */
EXTERN void		TkGetButtPoints (double p1[], double p2[], 
				double width, int project, double m1[], 
				double m2[]);
#endif
#ifndef TkGetCursorByName_TCL_DECLARED
#define TkGetCursorByName_TCL_DECLARED
/* 32 */
EXTERN TkCursor *	TkGetCursorByName (Tcl_Interp * interp, 
				Tk_Window tkwin, Tk_Uid string);
#endif
#ifndef TkGetDefaultScreenName_TCL_DECLARED
#define TkGetDefaultScreenName_TCL_DECLARED
/* 33 */
EXTERN CONST84_RETURN char * TkGetDefaultScreenName (Tcl_Interp * interp, 
				CONST char * screenName);
#endif
#ifndef TkGetDisplay_TCL_DECLARED
#define TkGetDisplay_TCL_DECLARED
/* 34 */
EXTERN TkDisplay *	TkGetDisplay (Display * display);
#endif
#ifndef TkGetDisplayOf_TCL_DECLARED
#define TkGetDisplayOf_TCL_DECLARED
/* 35 */
EXTERN int		TkGetDisplayOf (Tcl_Interp * interp, int objc, 
				Tcl_Obj *CONST objv[], Tk_Window * tkwinPtr);
#endif
#ifndef TkGetFocusWin_TCL_DECLARED
#define TkGetFocusWin_TCL_DECLARED
/* 36 */
EXTERN TkWindow *	TkGetFocusWin (TkWindow * winPtr);
#endif
#ifndef TkGetInterpNames_TCL_DECLARED
#define TkGetInterpNames_TCL_DECLARED
/* 37 */
EXTERN int		TkGetInterpNames (Tcl_Interp * interp, 
				Tk_Window tkwin);
#endif
#ifndef TkGetMiterPoints_TCL_DECLARED
#define TkGetMiterPoints_TCL_DECLARED
/* 38 */
EXTERN int		TkGetMiterPoints (double p1[], double p2[], 
				double p3[], double width, double m1[], 
				double m2[]);
#endif
#ifndef TkGetPointerCoords_TCL_DECLARED
#define TkGetPointerCoords_TCL_DECLARED
/* 39 */
EXTERN void		TkGetPointerCoords (Tk_Window tkwin, int * xPtr, 
				int * yPtr);
#endif
#ifndef TkGetServerInfo_TCL_DECLARED
#define TkGetServerInfo_TCL_DECLARED
/* 40 */
EXTERN void		TkGetServerInfo (Tcl_Interp * interp, 
				Tk_Window tkwin);
#endif
#ifndef TkGrabDeadWindow_TCL_DECLARED
#define TkGrabDeadWindow_TCL_DECLARED
/* 41 */
EXTERN void		TkGrabDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkGrabState_TCL_DECLARED
#define TkGrabState_TCL_DECLARED
/* 42 */
EXTERN int		TkGrabState (TkWindow * winPtr);
#endif
#ifndef TkIncludePoint_TCL_DECLARED
#define TkIncludePoint_TCL_DECLARED
/* 43 */
EXTERN void		TkIncludePoint (Tk_Item * itemPtr, double * pointPtr);
#endif
#ifndef TkInOutEvents_TCL_DECLARED
#define TkInOutEvents_TCL_DECLARED
/* 44 */
EXTERN void		TkInOutEvents (XEvent * eventPtr, 
				TkWindow * sourcePtr, TkWindow * destPtr, 
				int leaveType, int enterType, 
				Tcl_QueuePosition position);
#endif
#ifndef TkInstallFrameMenu_TCL_DECLARED
#define TkInstallFrameMenu_TCL_DECLARED
/* 45 */
EXTERN void		TkInstallFrameMenu (Tk_Window tkwin);
#endif
#ifndef TkKeysymToString_TCL_DECLARED
#define TkKeysymToString_TCL_DECLARED
/* 46 */
EXTERN char *		TkKeysymToString (KeySym keysym);
#endif
#ifndef TkLineToArea_TCL_DECLARED
#define TkLineToArea_TCL_DECLARED
/* 47 */
EXTERN int		TkLineToArea (double end1Ptr[], double end2Ptr[], 
				double rectPtr[]);
#endif
#ifndef TkLineToPoint_TCL_DECLARED
#define TkLineToPoint_TCL_DECLARED
/* 48 */
EXTERN double		TkLineToPoint (double end1Ptr[], double end2Ptr[], 
				double pointPtr[]);
#endif
#ifndef TkMakeBezierCurve_TCL_DECLARED
#define TkMakeBezierCurve_TCL_DECLARED
/* 49 */
EXTERN int		TkMakeBezierCurve (Tk_Canvas canvas, 
				double * pointPtr, int numPoints, 
				int numSteps, XPoint xPoints[], 
				double dblPoints[]);
#endif
#ifndef TkMakeBezierPostscript_TCL_DECLARED
#define TkMakeBezierPostscript_TCL_DECLARED
/* 50 */
EXTERN void		TkMakeBezierPostscript (Tcl_Interp * interp, 
				Tk_Canvas canvas, double * pointPtr, 
				int numPoints);
#endif
#ifndef TkOptionClassChanged_TCL_DECLARED
#define TkOptionClassChanged_TCL_DECLARED
/* 51 */
EXTERN void		TkOptionClassChanged (TkWindow * winPtr);
#endif
#ifndef TkOptionDeadWindow_TCL_DECLARED
#define TkOptionDeadWindow_TCL_DECLARED
/* 52 */
EXTERN void		TkOptionDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkOvalToArea_TCL_DECLARED
#define TkOvalToArea_TCL_DECLARED
/* 53 */
EXTERN int		TkOvalToArea (double * ovalPtr, double * rectPtr);
#endif
#ifndef TkOvalToPoint_TCL_DECLARED
#define TkOvalToPoint_TCL_DECLARED
/* 54 */
EXTERN double		TkOvalToPoint (double ovalPtr[], double width, 
				int filled, double pointPtr[]);
#endif
#ifndef TkpChangeFocus_TCL_DECLARED
#define TkpChangeFocus_TCL_DECLARED
/* 55 */
EXTERN int		TkpChangeFocus (TkWindow * winPtr, int force);
#endif
#ifndef TkpCloseDisplay_TCL_DECLARED
#define TkpCloseDisplay_TCL_DECLARED
/* 56 */
EXTERN void		TkpCloseDisplay (TkDisplay * dispPtr);
#endif
#ifndef TkpClaimFocus_TCL_DECLARED
#define TkpClaimFocus_TCL_DECLARED
/* 57 */
EXTERN void		TkpClaimFocus (TkWindow * topLevelPtr, int force);
#endif
#ifndef TkpDisplayWarning_TCL_DECLARED
#define TkpDisplayWarning_TCL_DECLARED
/* 58 */
EXTERN void		TkpDisplayWarning (CONST char * msg, 
				CONST char * title);
#endif
#ifndef TkpGetAppName_TCL_DECLARED
#define TkpGetAppName_TCL_DECLARED
/* 59 */
EXTERN void		TkpGetAppName (Tcl_Interp * interp, 
				Tcl_DString * name);
#endif
#ifndef TkpGetOtherWindow_TCL_DECLARED
#define TkpGetOtherWindow_TCL_DECLARED
/* 60 */
EXTERN TkWindow *	TkpGetOtherWindow (TkWindow * winPtr);
#endif
#ifndef TkpGetWrapperWindow_TCL_DECLARED
#define TkpGetWrapperWindow_TCL_DECLARED
/* 61 */
EXTERN TkWindow *	TkpGetWrapperWindow (TkWindow * winPtr);
#endif
#ifndef TkpInit_TCL_DECLARED
#define TkpInit_TCL_DECLARED
/* 62 */
EXTERN int		TkpInit (Tcl_Interp * interp);
#endif
#ifndef TkpInitializeMenuBindings_TCL_DECLARED
#define TkpInitializeMenuBindings_TCL_DECLARED
/* 63 */
EXTERN void		TkpInitializeMenuBindings (Tcl_Interp * interp, 
				Tk_BindingTable bindingTable);
#endif
#ifndef TkpMakeContainer_TCL_DECLARED
#define TkpMakeContainer_TCL_DECLARED
/* 64 */
EXTERN void		TkpMakeContainer (Tk_Window tkwin);
#endif
#ifndef TkpMakeMenuWindow_TCL_DECLARED
#define TkpMakeMenuWindow_TCL_DECLARED
/* 65 */
EXTERN void		TkpMakeMenuWindow (Tk_Window tkwin, int transient);
#endif
#ifndef TkpMakeWindow_TCL_DECLARED
#define TkpMakeWindow_TCL_DECLARED
/* 66 */
EXTERN Window		TkpMakeWindow (TkWindow * winPtr, Window parent);
#endif
#ifndef TkpMenuNotifyToplevelCreate_TCL_DECLARED
#define TkpMenuNotifyToplevelCreate_TCL_DECLARED
/* 67 */
EXTERN void		TkpMenuNotifyToplevelCreate (Tcl_Interp * interp1, 
				char * menuName);
#endif
#ifndef TkpOpenDisplay_TCL_DECLARED
#define TkpOpenDisplay_TCL_DECLARED
/* 68 */
EXTERN TkDisplay *	TkpOpenDisplay (CONST char * display_name);
#endif
#ifndef TkPointerEvent_TCL_DECLARED
#define TkPointerEvent_TCL_DECLARED
/* 69 */
EXTERN int		TkPointerEvent (XEvent * eventPtr, TkWindow * winPtr);
#endif
#ifndef TkPolygonToArea_TCL_DECLARED
#define TkPolygonToArea_TCL_DECLARED
/* 70 */
EXTERN int		TkPolygonToArea (double * polyPtr, int numPoints, 
				double * rectPtr);
#endif
#ifndef TkPolygonToPoint_TCL_DECLARED
#define TkPolygonToPoint_TCL_DECLARED
/* 71 */
EXTERN double		TkPolygonToPoint (double * polyPtr, int numPoints, 
				double * pointPtr);
#endif
#ifndef TkPositionInTree_TCL_DECLARED
#define TkPositionInTree_TCL_DECLARED
/* 72 */
EXTERN int		TkPositionInTree (TkWindow * winPtr, 
				TkWindow * treePtr);
#endif
#ifndef TkpRedirectKeyEvent_TCL_DECLARED
#define TkpRedirectKeyEvent_TCL_DECLARED
/* 73 */
EXTERN void		TkpRedirectKeyEvent (TkWindow * winPtr, 
				XEvent * eventPtr);
#endif
#ifndef TkpSetMainMenubar_TCL_DECLARED
#define TkpSetMainMenubar_TCL_DECLARED
/* 74 */
EXTERN void		TkpSetMainMenubar (Tcl_Interp * interp, 
				Tk_Window tkwin, char * menuName);
#endif
#ifndef TkpUseWindow_TCL_DECLARED
#define TkpUseWindow_TCL_DECLARED
/* 75 */
EXTERN int		TkpUseWindow (Tcl_Interp * interp, Tk_Window tkwin, 
				CONST char * string);
#endif
#ifndef TkpWindowWasRecentlyDeleted_TCL_DECLARED
#define TkpWindowWasRecentlyDeleted_TCL_DECLARED
/* 76 */
EXTERN int		TkpWindowWasRecentlyDeleted (Window win, 
				TkDisplay * dispPtr);
#endif
#ifndef TkQueueEventForAllChildren_TCL_DECLARED
#define TkQueueEventForAllChildren_TCL_DECLARED
/* 77 */
EXTERN void		TkQueueEventForAllChildren (TkWindow * winPtr, 
				XEvent * eventPtr);
#endif
#ifndef TkReadBitmapFile_TCL_DECLARED
#define TkReadBitmapFile_TCL_DECLARED
/* 78 */
EXTERN int		TkReadBitmapFile (Display * display, Drawable d, 
				CONST char * filename, 
				unsigned int * width_return, 
				unsigned int * height_return, 
				Pixmap * bitmap_return, int * x_hot_return, 
				int * y_hot_return);
#endif
#ifndef TkScrollWindow_TCL_DECLARED
#define TkScrollWindow_TCL_DECLARED
/* 79 */
EXTERN int		TkScrollWindow (Tk_Window tkwin, GC gc, int x, int y, 
				int width, int height, int dx, int dy, 
				TkRegion damageRgn);
#endif
#ifndef TkSelDeadWindow_TCL_DECLARED
#define TkSelDeadWindow_TCL_DECLARED
/* 80 */
EXTERN void		TkSelDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkSelEventProc_TCL_DECLARED
#define TkSelEventProc_TCL_DECLARED
/* 81 */
EXTERN void		TkSelEventProc (Tk_Window tkwin, XEvent * eventPtr);
#endif
#ifndef TkSelInit_TCL_DECLARED
#define TkSelInit_TCL_DECLARED
/* 82 */
EXTERN void		TkSelInit (Tk_Window tkwin);
#endif
#ifndef TkSelPropProc_TCL_DECLARED
#define TkSelPropProc_TCL_DECLARED
/* 83 */
EXTERN void		TkSelPropProc (XEvent * eventPtr);
#endif
/* Slot 84 is reserved */
#ifndef TkSetWindowMenuBar_TCL_DECLARED
#define TkSetWindowMenuBar_TCL_DECLARED
/* 85 */
EXTERN void		TkSetWindowMenuBar (Tcl_Interp * interp, 
				Tk_Window tkwin, char * oldMenuName, 
				char * menuName);
#endif
#ifndef TkStringToKeysym_TCL_DECLARED
#define TkStringToKeysym_TCL_DECLARED
/* 86 */
EXTERN KeySym		TkStringToKeysym (char * name);
#endif
#ifndef TkThickPolyLineToArea_TCL_DECLARED
#define TkThickPolyLineToArea_TCL_DECLARED
/* 87 */
EXTERN int		TkThickPolyLineToArea (double * coordPtr, 
				int numPoints, double width, int capStyle, 
				int joinStyle, double * rectPtr);
#endif
#ifndef TkWmAddToColormapWindows_TCL_DECLARED
#define TkWmAddToColormapWindows_TCL_DECLARED
/* 88 */
EXTERN void		TkWmAddToColormapWindows (TkWindow * winPtr);
#endif
#ifndef TkWmDeadWindow_TCL_DECLARED
#define TkWmDeadWindow_TCL_DECLARED
/* 89 */
EXTERN void		TkWmDeadWindow (TkWindow * winPtr);
#endif
#ifndef TkWmFocusToplevel_TCL_DECLARED
#define TkWmFocusToplevel_TCL_DECLARED
/* 90 */
EXTERN TkWindow *	TkWmFocusToplevel (TkWindow * winPtr);
#endif
#ifndef TkWmMapWindow_TCL_DECLARED
#define TkWmMapWindow_TCL_DECLARED
/* 91 */
EXTERN void		TkWmMapWindow (TkWindow * winPtr);
#endif
#ifndef TkWmNewWindow_TCL_DECLARED
#define TkWmNewWindow_TCL_DECLARED
/* 92 */
EXTERN void		TkWmNewWindow (TkWindow * winPtr);
#endif
#ifndef TkWmProtocolEventProc_TCL_DECLARED
#define TkWmProtocolEventProc_TCL_DECLARED
/* 93 */
EXTERN void		TkWmProtocolEventProc (TkWindow * winPtr, 
				XEvent * evenvPtr);
#endif
#ifndef TkWmRemoveFromColormapWindows_TCL_DECLARED
#define TkWmRemoveFromColormapWindows_TCL_DECLARED
/* 94 */
EXTERN void		TkWmRemoveFromColormapWindows (TkWindow * winPtr);
#endif
#ifndef TkWmRestackToplevel_TCL_DECLARED
#define TkWmRestackToplevel_TCL_DECLARED
/* 95 */
EXTERN void		TkWmRestackToplevel (TkWindow * winPtr, 
				int aboveBelow, TkWindow * otherPtr);
#endif
#ifndef TkWmSetClass_TCL_DECLARED
#define TkWmSetClass_TCL_DECLARED
/* 96 */
EXTERN void		TkWmSetClass (TkWindow * winPtr);
#endif
#ifndef TkWmUnmapWindow_TCL_DECLARED
#define TkWmUnmapWindow_TCL_DECLARED
/* 97 */
EXTERN void		TkWmUnmapWindow (TkWindow * winPtr);
#endif
#ifndef TkDebugBitmap_TCL_DECLARED
#define TkDebugBitmap_TCL_DECLARED
/* 98 */
EXTERN Tcl_Obj *	TkDebugBitmap (Tk_Window tkwin, char * name);
#endif
#ifndef TkDebugBorder_TCL_DECLARED
#define TkDebugBorder_TCL_DECLARED
/* 99 */
EXTERN Tcl_Obj *	TkDebugBorder (Tk_Window tkwin, char * name);
#endif
#ifndef TkDebugCursor_TCL_DECLARED
#define TkDebugCursor_TCL_DECLARED
/* 100 */
EXTERN Tcl_Obj *	TkDebugCursor (Tk_Window tkwin, char * name);
#endif
#ifndef TkDebugColor_TCL_DECLARED
#define TkDebugColor_TCL_DECLARED
/* 101 */
EXTERN Tcl_Obj *	TkDebugColor (Tk_Window tkwin, char * name);
#endif
#ifndef TkDebugConfig_TCL_DECLARED
#define TkDebugConfig_TCL_DECLARED
/* 102 */
EXTERN Tcl_Obj *	TkDebugConfig (Tcl_Interp * interp, 
				Tk_OptionTable table);
#endif
#ifndef TkDebugFont_TCL_DECLARED
#define TkDebugFont_TCL_DECLARED
/* 103 */
EXTERN Tcl_Obj *	TkDebugFont (Tk_Window tkwin, char * name);
#endif
#ifndef TkFindStateNumObj_TCL_DECLARED
#define TkFindStateNumObj_TCL_DECLARED
/* 104 */
EXTERN int		TkFindStateNumObj (Tcl_Interp * interp, 
				Tcl_Obj * optionPtr, 
				CONST TkStateMap * mapPtr, Tcl_Obj * keyPtr);
#endif
#ifndef TkGetBitmapPredefTable_TCL_DECLARED
#define TkGetBitmapPredefTable_TCL_DECLARED
/* 105 */
EXTERN Tcl_HashTable *	TkGetBitmapPredefTable (void);
#endif
#ifndef TkGetDisplayList_TCL_DECLARED
#define TkGetDisplayList_TCL_DECLARED
/* 106 */
EXTERN TkDisplay *	TkGetDisplayList (void);
#endif
#ifndef TkGetMainInfoList_TCL_DECLARED
#define TkGetMainInfoList_TCL_DECLARED
/* 107 */
EXTERN TkMainInfo *	TkGetMainInfoList (void);
#endif
#ifndef TkGetWindowFromObj_TCL_DECLARED
#define TkGetWindowFromObj_TCL_DECLARED
/* 108 */
EXTERN int		TkGetWindowFromObj (Tcl_Interp * interp, 
				Tk_Window tkwin, Tcl_Obj * objPtr, 
				Tk_Window * windowPtr);
#endif
#ifndef TkpGetString_TCL_DECLARED
#define TkpGetString_TCL_DECLARED
/* 109 */
EXTERN char *		TkpGetString (TkWindow * winPtr, XEvent * eventPtr, 
				Tcl_DString * dsPtr);
#endif
#ifndef TkpGetSubFonts_TCL_DECLARED
#define TkpGetSubFonts_TCL_DECLARED
/* 110 */
EXTERN void		TkpGetSubFonts (Tcl_Interp * interp, Tk_Font tkfont);
#endif
#ifndef TkpGetSystemDefault_TCL_DECLARED
#define TkpGetSystemDefault_TCL_DECLARED
/* 111 */
EXTERN Tcl_Obj *	TkpGetSystemDefault (Tk_Window tkwin, 
				CONST char * dbName, CONST char * className);
#endif
#ifndef TkpMenuThreadInit_TCL_DECLARED
#define TkpMenuThreadInit_TCL_DECLARED
/* 112 */
EXTERN void		TkpMenuThreadInit (void);
#endif
#ifdef __WIN32__
#ifndef TkClipBox_TCL_DECLARED
#define TkClipBox_TCL_DECLARED
/* 113 */
EXTERN void		TkClipBox (TkRegion rgn, XRectangle * rect_return);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkClipBox_TCL_DECLARED
#define TkClipBox_TCL_DECLARED
/* 113 */
EXTERN void		TkClipBox (TkRegion rgn, XRectangle * rect_return);
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkCreateRegion_TCL_DECLARED
#define TkCreateRegion_TCL_DECLARED
/* 114 */
EXTERN TkRegion		TkCreateRegion (void);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkCreateRegion_TCL_DECLARED
#define TkCreateRegion_TCL_DECLARED
/* 114 */
EXTERN TkRegion		TkCreateRegion (void);
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkDestroyRegion_TCL_DECLARED
#define TkDestroyRegion_TCL_DECLARED
/* 115 */
EXTERN void		TkDestroyRegion (TkRegion rgn);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkDestroyRegion_TCL_DECLARED
#define TkDestroyRegion_TCL_DECLARED
/* 115 */
EXTERN void		TkDestroyRegion (TkRegion rgn);
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkIntersectRegion_TCL_DECLARED
#define TkIntersectRegion_TCL_DECLARED
/* 116 */
EXTERN void		TkIntersectRegion (TkRegion sra, TkRegion srcb, 
				TkRegion dr_return);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkIntersectRegion_TCL_DECLARED
#define TkIntersectRegion_TCL_DECLARED
/* 116 */
EXTERN void		TkIntersectRegion (TkRegion sra, TkRegion srcb, 
				TkRegion dr_return);
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkRectInRegion_TCL_DECLARED
#define TkRectInRegion_TCL_DECLARED
/* 117 */
EXTERN int		TkRectInRegion (TkRegion rgn, int x, int y, 
				unsigned int width, unsigned int height);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkRectInRegion_TCL_DECLARED
#define TkRectInRegion_TCL_DECLARED
/* 117 */
EXTERN int		TkRectInRegion (TkRegion rgn, int x, int y, 
				unsigned int width, unsigned int height);
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkSetRegion_TCL_DECLARED
#define TkSetRegion_TCL_DECLARED
/* 118 */
EXTERN void		TkSetRegion (Display * display, GC gc, TkRegion rgn);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkSetRegion_TCL_DECLARED
#define TkSetRegion_TCL_DECLARED
/* 118 */
EXTERN void		TkSetRegion (Display * display, GC gc, TkRegion rgn);
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkUnionRectWithRegion_TCL_DECLARED
#define TkUnionRectWithRegion_TCL_DECLARED
/* 119 */
EXTERN void		TkUnionRectWithRegion (XRectangle * rect, 
				TkRegion src, TkRegion dr_return);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkUnionRectWithRegion_TCL_DECLARED
#define TkUnionRectWithRegion_TCL_DECLARED
/* 119 */
EXTERN void		TkUnionRectWithRegion (XRectangle * rect, 
				TkRegion src, TkRegion dr_return);
#endif
#endif /* MAC_OSX_TK */
/* Slot 120 is reserved */
#ifdef MAC_OSX_TK
#ifndef TkpCreateNativeBitmap_TCL_DECLARED
#define TkpCreateNativeBitmap_TCL_DECLARED
/* 121 */
EXTERN Pixmap		TkpCreateNativeBitmap (Display * display, 
				CONST char * source);
#endif
#endif /* MAC_OSX_TK */
#ifdef MAC_OSX_TK
#ifndef TkpDefineNativeBitmaps_TCL_DECLARED
#define TkpDefineNativeBitmaps_TCL_DECLARED
/* 122 */
EXTERN void		TkpDefineNativeBitmaps (void);
#endif
#endif /* MAC_OSX_TK */
/* Slot 123 is reserved */
#ifdef MAC_OSX_TK
#ifndef TkpGetNativeAppBitmap_TCL_DECLARED
#define TkpGetNativeAppBitmap_TCL_DECLARED
/* 124 */
EXTERN Pixmap		TkpGetNativeAppBitmap (Display * display, 
				CONST char * name, int * width, int * height);
#endif
#endif /* MAC_OSX_TK */
/* Slot 125 is reserved */
/* Slot 126 is reserved */
/* Slot 127 is reserved */
/* Slot 128 is reserved */
/* Slot 129 is reserved */
/* Slot 130 is reserved */
/* Slot 131 is reserved */
/* Slot 132 is reserved */
/* Slot 133 is reserved */
/* Slot 134 is reserved */
#ifndef TkpDrawHighlightBorder_TCL_DECLARED
#define TkpDrawHighlightBorder_TCL_DECLARED
/* 135 */
EXTERN void		TkpDrawHighlightBorder (Tk_Window tkwin, GC fgGC, 
				GC bgGC, int highlightWidth, 
				Drawable drawable);
#endif
#ifndef TkSetFocusWin_TCL_DECLARED
#define TkSetFocusWin_TCL_DECLARED
/* 136 */
EXTERN void		TkSetFocusWin (TkWindow * winPtr, int force);
#endif
#ifndef TkpSetKeycodeAndState_TCL_DECLARED
#define TkpSetKeycodeAndState_TCL_DECLARED
/* 137 */
EXTERN void		TkpSetKeycodeAndState (Tk_Window tkwin, 
				KeySym keySym, XEvent * eventPtr);
#endif
#ifndef TkpGetKeySym_TCL_DECLARED
#define TkpGetKeySym_TCL_DECLARED
/* 138 */
EXTERN KeySym		TkpGetKeySym (TkDisplay * dispPtr, XEvent * eventPtr);
#endif
#ifndef TkpInitKeymapInfo_TCL_DECLARED
#define TkpInitKeymapInfo_TCL_DECLARED
/* 139 */
EXTERN void		TkpInitKeymapInfo (TkDisplay * dispPtr);
#endif
#ifndef TkPhotoGetValidRegion_TCL_DECLARED
#define TkPhotoGetValidRegion_TCL_DECLARED
/* 140 */
EXTERN TkRegion		TkPhotoGetValidRegion (Tk_PhotoHandle handle);
#endif
#ifndef TkWmStackorderToplevel_TCL_DECLARED
#define TkWmStackorderToplevel_TCL_DECLARED
/* 141 */
EXTERN TkWindow **	TkWmStackorderToplevel (TkWindow * parentPtr);
#endif
#ifndef TkFocusFree_TCL_DECLARED
#define TkFocusFree_TCL_DECLARED
/* 142 */
EXTERN void		TkFocusFree (TkMainInfo * mainPtr);
#endif
#ifndef TkClipCleanup_TCL_DECLARED
#define TkClipCleanup_TCL_DECLARED
/* 143 */
EXTERN void		TkClipCleanup (TkDisplay * dispPtr);
#endif
#ifndef TkGCCleanup_TCL_DECLARED
#define TkGCCleanup_TCL_DECLARED
/* 144 */
EXTERN void		TkGCCleanup (TkDisplay * dispPtr);
#endif
#ifdef __WIN32__
#ifndef TkSubtractRegion_TCL_DECLARED
#define TkSubtractRegion_TCL_DECLARED
/* 145 */
EXTERN void		TkSubtractRegion (TkRegion sra, TkRegion srcb, 
				TkRegion dr_return);
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkSubtractRegion_TCL_DECLARED
#define TkSubtractRegion_TCL_DECLARED
/* 145 */
EXTERN void		TkSubtractRegion (TkRegion sra, TkRegion srcb, 
				TkRegion dr_return);
#endif
#endif /* MAC_OSX_TK */
#ifndef TkStylePkgInit_TCL_DECLARED
#define TkStylePkgInit_TCL_DECLARED
/* 146 */
EXTERN void		TkStylePkgInit (TkMainInfo * mainPtr);
#endif
#ifndef TkStylePkgFree_TCL_DECLARED
#define TkStylePkgFree_TCL_DECLARED
/* 147 */
EXTERN void		TkStylePkgFree (TkMainInfo * mainPtr);
#endif
#ifndef TkToplevelWindowForCommand_TCL_DECLARED
#define TkToplevelWindowForCommand_TCL_DECLARED
/* 148 */
EXTERN Tk_Window	TkToplevelWindowForCommand (Tcl_Interp * interp, 
				CONST char * cmdName);
#endif
#ifndef TkGetOptionSpec_TCL_DECLARED
#define TkGetOptionSpec_TCL_DECLARED
/* 149 */
EXTERN CONST Tk_OptionSpec * TkGetOptionSpec (CONST char * name, 
				Tk_OptionTable optionTable);
#endif
#ifndef TkMakeRawCurve_TCL_DECLARED
#define TkMakeRawCurve_TCL_DECLARED
/* 150 */
EXTERN int		TkMakeRawCurve (Tk_Canvas canvas, double * pointPtr, 
				int numPoints, int numSteps, 
				XPoint xPoints[], double dblPoints[]);
#endif
#ifndef TkMakeRawCurvePostscript_TCL_DECLARED
#define TkMakeRawCurvePostscript_TCL_DECLARED
/* 151 */
EXTERN void		TkMakeRawCurvePostscript (Tcl_Interp * interp, 
				Tk_Canvas canvas, double * pointPtr, 
				int numPoints);
#endif
#ifndef TkpDrawFrame_TCL_DECLARED
#define TkpDrawFrame_TCL_DECLARED
/* 152 */
EXTERN void		TkpDrawFrame (Tk_Window tkwin, Tk_3DBorder border, 
				int highlightWidth, int borderWidth, 
				int relief);
#endif
#ifndef TkCreateThreadExitHandler_TCL_DECLARED
#define TkCreateThreadExitHandler_TCL_DECLARED
/* 153 */
EXTERN void		TkCreateThreadExitHandler (Tcl_ExitProc * proc, 
				ClientData clientData);
#endif
#ifndef TkDeleteThreadExitHandler_TCL_DECLARED
#define TkDeleteThreadExitHandler_TCL_DECLARED
/* 154 */
EXTERN void		TkDeleteThreadExitHandler (Tcl_ExitProc * proc, 
				ClientData clientData);
#endif
/* Slot 155 is reserved */
#ifndef TkpTestembedCmd_TCL_DECLARED
#define TkpTestembedCmd_TCL_DECLARED
/* 156 */
EXTERN int		TkpTestembedCmd (ClientData clientData, 
				Tcl_Interp * interp, int argc, 
				CONST char ** argv);
#endif
#ifndef TkpTesttextCmd_TCL_DECLARED
#define TkpTesttextCmd_TCL_DECLARED
/* 157 */
EXTERN int		TkpTesttextCmd (ClientData dummy, 
				Tcl_Interp * interp, int argc, 
				CONST char ** argv);
#endif

typedef struct TkIntStubs {
    int magic;
    struct TkIntStubHooks *hooks;

    TkWindow * (*tkAllocWindow) (TkDisplay * dispPtr, int screenNum, TkWindow * parentPtr); /* 0 */
    void (*tkBezierPoints) (double control[], int numSteps, double * coordPtr); /* 1 */
    void (*tkBezierScreenPoints) (Tk_Canvas canvas, double control[], int numSteps, XPoint * xPointPtr); /* 2 */
    void (*tkBindDeadWindow) (TkWindow * winPtr); /* 3 */
    void (*tkBindEventProc) (TkWindow * winPtr, XEvent * eventPtr); /* 4 */
    void (*tkBindFree) (TkMainInfo * mainPtr); /* 5 */
    void (*tkBindInit) (TkMainInfo * mainPtr); /* 6 */
    void (*tkChangeEventWindow) (XEvent * eventPtr, TkWindow * winPtr); /* 7 */
    int (*tkClipInit) (Tcl_Interp * interp, TkDisplay * dispPtr); /* 8 */
    void (*tkComputeAnchor) (Tk_Anchor anchor, Tk_Window tkwin, int padX, int padY, int innerWidth, int innerHeight, int * xPtr, int * yPtr); /* 9 */
    int (*tkCopyAndGlobalEval) (Tcl_Interp * interp, char * script); /* 10 */
    unsigned long (*tkCreateBindingProcedure) (Tcl_Interp * interp, Tk_BindingTable bindingTable, ClientData object, CONST char * eventString, TkBindEvalProc * evalProc, TkBindFreeProc * freeProc, ClientData clientData); /* 11 */
    TkCursor * (*tkCreateCursorFromData) (Tk_Window tkwin, CONST char * source, CONST char * mask, int width, int height, int xHot, int yHot, XColor fg, XColor bg); /* 12 */
    int (*tkCreateFrame) (ClientData clientData, Tcl_Interp * interp, int argc, char ** argv, int toplevel, char * appName); /* 13 */
    Tk_Window (*tkCreateMainWindow) (Tcl_Interp * interp, CONST char * screenName, char * baseName); /* 14 */
    Time (*tkCurrentTime) (TkDisplay * dispPtr); /* 15 */
    void (*tkDeleteAllImages) (TkMainInfo * mainPtr); /* 16 */
    void (*tkDoConfigureNotify) (TkWindow * winPtr); /* 17 */
    void (*tkDrawInsetFocusHighlight) (Tk_Window tkwin, GC gc, int width, Drawable drawable, int padding); /* 18 */
    void (*tkEventDeadWindow) (TkWindow * winPtr); /* 19 */
    void (*tkFillPolygon) (Tk_Canvas canvas, double * coordPtr, int numPoints, Display * display, Drawable drawable, GC gc, GC outlineGC); /* 20 */
    int (*tkFindStateNum) (Tcl_Interp * interp, CONST char * option, CONST TkStateMap * mapPtr, CONST char * strKey); /* 21 */
    char * (*tkFindStateString) (CONST TkStateMap * mapPtr, int numKey); /* 22 */
    void (*tkFocusDeadWindow) (TkWindow * winPtr); /* 23 */
    int (*tkFocusFilterEvent) (TkWindow * winPtr, XEvent * eventPtr); /* 24 */
    TkWindow * (*tkFocusKeyEvent) (TkWindow * winPtr, XEvent * eventPtr); /* 25 */
    void (*tkFontPkgInit) (TkMainInfo * mainPtr); /* 26 */
    void (*tkFontPkgFree) (TkMainInfo * mainPtr); /* 27 */
    void (*tkFreeBindingTags) (TkWindow * winPtr); /* 28 */
    void (*tkpFreeCursor) (TkCursor * cursorPtr); /* 29 */
    char * (*tkGetBitmapData) (Tcl_Interp * interp, char * string, char * fileName, int * widthPtr, int * heightPtr, int * hotXPtr, int * hotYPtr); /* 30 */
    void (*tkGetButtPoints) (double p1[], double p2[], double width, int project, double m1[], double m2[]); /* 31 */
    TkCursor * (*tkGetCursorByName) (Tcl_Interp * interp, Tk_Window tkwin, Tk_Uid string); /* 32 */
    CONST84_RETURN char * (*tkGetDefaultScreenName) (Tcl_Interp * interp, CONST char * screenName); /* 33 */
    TkDisplay * (*tkGetDisplay) (Display * display); /* 34 */
    int (*tkGetDisplayOf) (Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[], Tk_Window * tkwinPtr); /* 35 */
    TkWindow * (*tkGetFocusWin) (TkWindow * winPtr); /* 36 */
    int (*tkGetInterpNames) (Tcl_Interp * interp, Tk_Window tkwin); /* 37 */
    int (*tkGetMiterPoints) (double p1[], double p2[], double p3[], double width, double m1[], double m2[]); /* 38 */
    void (*tkGetPointerCoords) (Tk_Window tkwin, int * xPtr, int * yPtr); /* 39 */
    void (*tkGetServerInfo) (Tcl_Interp * interp, Tk_Window tkwin); /* 40 */
    void (*tkGrabDeadWindow) (TkWindow * winPtr); /* 41 */
    int (*tkGrabState) (TkWindow * winPtr); /* 42 */
    void (*tkIncludePoint) (Tk_Item * itemPtr, double * pointPtr); /* 43 */
    void (*tkInOutEvents) (XEvent * eventPtr, TkWindow * sourcePtr, TkWindow * destPtr, int leaveType, int enterType, Tcl_QueuePosition position); /* 44 */
    void (*tkInstallFrameMenu) (Tk_Window tkwin); /* 45 */
    char * (*tkKeysymToString) (KeySym keysym); /* 46 */
    int (*tkLineToArea) (double end1Ptr[], double end2Ptr[], double rectPtr[]); /* 47 */
    double (*tkLineToPoint) (double end1Ptr[], double end2Ptr[], double pointPtr[]); /* 48 */
    int (*tkMakeBezierCurve) (Tk_Canvas canvas, double * pointPtr, int numPoints, int numSteps, XPoint xPoints[], double dblPoints[]); /* 49 */
    void (*tkMakeBezierPostscript) (Tcl_Interp * interp, Tk_Canvas canvas, double * pointPtr, int numPoints); /* 50 */
    void (*tkOptionClassChanged) (TkWindow * winPtr); /* 51 */
    void (*tkOptionDeadWindow) (TkWindow * winPtr); /* 52 */
    int (*tkOvalToArea) (double * ovalPtr, double * rectPtr); /* 53 */
    double (*tkOvalToPoint) (double ovalPtr[], double width, int filled, double pointPtr[]); /* 54 */
    int (*tkpChangeFocus) (TkWindow * winPtr, int force); /* 55 */
    void (*tkpCloseDisplay) (TkDisplay * dispPtr); /* 56 */
    void (*tkpClaimFocus) (TkWindow * topLevelPtr, int force); /* 57 */
    void (*tkpDisplayWarning) (CONST char * msg, CONST char * title); /* 58 */
    void (*tkpGetAppName) (Tcl_Interp * interp, Tcl_DString * name); /* 59 */
    TkWindow * (*tkpGetOtherWindow) (TkWindow * winPtr); /* 60 */
    TkWindow * (*tkpGetWrapperWindow) (TkWindow * winPtr); /* 61 */
    int (*tkpInit) (Tcl_Interp * interp); /* 62 */
    void (*tkpInitializeMenuBindings) (Tcl_Interp * interp, Tk_BindingTable bindingTable); /* 63 */
    void (*tkpMakeContainer) (Tk_Window tkwin); /* 64 */
    void (*tkpMakeMenuWindow) (Tk_Window tkwin, int transient); /* 65 */
    Window (*tkpMakeWindow) (TkWindow * winPtr, Window parent); /* 66 */
    void (*tkpMenuNotifyToplevelCreate) (Tcl_Interp * interp1, char * menuName); /* 67 */
    TkDisplay * (*tkpOpenDisplay) (CONST char * display_name); /* 68 */
    int (*tkPointerEvent) (XEvent * eventPtr, TkWindow * winPtr); /* 69 */
    int (*tkPolygonToArea) (double * polyPtr, int numPoints, double * rectPtr); /* 70 */
    double (*tkPolygonToPoint) (double * polyPtr, int numPoints, double * pointPtr); /* 71 */
    int (*tkPositionInTree) (TkWindow * winPtr, TkWindow * treePtr); /* 72 */
    void (*tkpRedirectKeyEvent) (TkWindow * winPtr, XEvent * eventPtr); /* 73 */
    void (*tkpSetMainMenubar) (Tcl_Interp * interp, Tk_Window tkwin, char * menuName); /* 74 */
    int (*tkpUseWindow) (Tcl_Interp * interp, Tk_Window tkwin, CONST char * string); /* 75 */
    int (*tkpWindowWasRecentlyDeleted) (Window win, TkDisplay * dispPtr); /* 76 */
    void (*tkQueueEventForAllChildren) (TkWindow * winPtr, XEvent * eventPtr); /* 77 */
    int (*tkReadBitmapFile) (Display * display, Drawable d, CONST char * filename, unsigned int * width_return, unsigned int * height_return, Pixmap * bitmap_return, int * x_hot_return, int * y_hot_return); /* 78 */
    int (*tkScrollWindow) (Tk_Window tkwin, GC gc, int x, int y, int width, int height, int dx, int dy, TkRegion damageRgn); /* 79 */
    void (*tkSelDeadWindow) (TkWindow * winPtr); /* 80 */
    void (*tkSelEventProc) (Tk_Window tkwin, XEvent * eventPtr); /* 81 */
    void (*tkSelInit) (Tk_Window tkwin); /* 82 */
    void (*tkSelPropProc) (XEvent * eventPtr); /* 83 */
    void *reserved84;
    void (*tkSetWindowMenuBar) (Tcl_Interp * interp, Tk_Window tkwin, char * oldMenuName, char * menuName); /* 85 */
    KeySym (*tkStringToKeysym) (char * name); /* 86 */
    int (*tkThickPolyLineToArea) (double * coordPtr, int numPoints, double width, int capStyle, int joinStyle, double * rectPtr); /* 87 */
    void (*tkWmAddToColormapWindows) (TkWindow * winPtr); /* 88 */
    void (*tkWmDeadWindow) (TkWindow * winPtr); /* 89 */
    TkWindow * (*tkWmFocusToplevel) (TkWindow * winPtr); /* 90 */
    void (*tkWmMapWindow) (TkWindow * winPtr); /* 91 */
    void (*tkWmNewWindow) (TkWindow * winPtr); /* 92 */
    void (*tkWmProtocolEventProc) (TkWindow * winPtr, XEvent * evenvPtr); /* 93 */
    void (*tkWmRemoveFromColormapWindows) (TkWindow * winPtr); /* 94 */
    void (*tkWmRestackToplevel) (TkWindow * winPtr, int aboveBelow, TkWindow * otherPtr); /* 95 */
    void (*tkWmSetClass) (TkWindow * winPtr); /* 96 */
    void (*tkWmUnmapWindow) (TkWindow * winPtr); /* 97 */
    Tcl_Obj * (*tkDebugBitmap) (Tk_Window tkwin, char * name); /* 98 */
    Tcl_Obj * (*tkDebugBorder) (Tk_Window tkwin, char * name); /* 99 */
    Tcl_Obj * (*tkDebugCursor) (Tk_Window tkwin, char * name); /* 100 */
    Tcl_Obj * (*tkDebugColor) (Tk_Window tkwin, char * name); /* 101 */
    Tcl_Obj * (*tkDebugConfig) (Tcl_Interp * interp, Tk_OptionTable table); /* 102 */
    Tcl_Obj * (*tkDebugFont) (Tk_Window tkwin, char * name); /* 103 */
    int (*tkFindStateNumObj) (Tcl_Interp * interp, Tcl_Obj * optionPtr, CONST TkStateMap * mapPtr, Tcl_Obj * keyPtr); /* 104 */
    Tcl_HashTable * (*tkGetBitmapPredefTable) (void); /* 105 */
    TkDisplay * (*tkGetDisplayList) (void); /* 106 */
    TkMainInfo * (*tkGetMainInfoList) (void); /* 107 */
    int (*tkGetWindowFromObj) (Tcl_Interp * interp, Tk_Window tkwin, Tcl_Obj * objPtr, Tk_Window * windowPtr); /* 108 */
    char * (*tkpGetString) (TkWindow * winPtr, XEvent * eventPtr, Tcl_DString * dsPtr); /* 109 */
    void (*tkpGetSubFonts) (Tcl_Interp * interp, Tk_Font tkfont); /* 110 */
    Tcl_Obj * (*tkpGetSystemDefault) (Tk_Window tkwin, CONST char * dbName, CONST char * className); /* 111 */
    void (*tkpMenuThreadInit) (void); /* 112 */
#if !defined(__WIN32__) /* UNIX */
    void *reserved113;
#endif /* UNIX */
#ifdef __WIN32__
    void (*tkClipBox) (TkRegion rgn, XRectangle * rect_return); /* 113 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*tkClipBox) (TkRegion rgn, XRectangle * rect_return); /* 113 */
#endif /* MAC_OSX_TK */
#if !defined(__WIN32__) /* UNIX */
    void *reserved114;
#endif /* UNIX */
#ifdef __WIN32__
    TkRegion (*tkCreateRegion) (void); /* 114 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    TkRegion (*tkCreateRegion) (void); /* 114 */
#endif /* MAC_OSX_TK */
#if !defined(__WIN32__) /* UNIX */
    void *reserved115;
#endif /* UNIX */
#ifdef __WIN32__
    void (*tkDestroyRegion) (TkRegion rgn); /* 115 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*tkDestroyRegion) (TkRegion rgn); /* 115 */
#endif /* MAC_OSX_TK */
#if !defined(__WIN32__) /* UNIX */
    void *reserved116;
#endif /* UNIX */
#ifdef __WIN32__
    void (*tkIntersectRegion) (TkRegion sra, TkRegion srcb, TkRegion dr_return); /* 116 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*tkIntersectRegion) (TkRegion sra, TkRegion srcb, TkRegion dr_return); /* 116 */
#endif /* MAC_OSX_TK */
#if !defined(__WIN32__) /* UNIX */
    void *reserved117;
#endif /* UNIX */
#ifdef __WIN32__
    int (*tkRectInRegion) (TkRegion rgn, int x, int y, unsigned int width, unsigned int height); /* 117 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    int (*tkRectInRegion) (TkRegion rgn, int x, int y, unsigned int width, unsigned int height); /* 117 */
#endif /* MAC_OSX_TK */
#if !defined(__WIN32__) /* UNIX */
    void *reserved118;
#endif /* UNIX */
#ifdef __WIN32__
    void (*tkSetRegion) (Display * display, GC gc, TkRegion rgn); /* 118 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*tkSetRegion) (Display * display, GC gc, TkRegion rgn); /* 118 */
#endif /* MAC_OSX_TK */
#if !defined(__WIN32__) /* UNIX */
    void *reserved119;
#endif /* UNIX */
#ifdef __WIN32__
    void (*tkUnionRectWithRegion) (XRectangle * rect, TkRegion src, TkRegion dr_return); /* 119 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*tkUnionRectWithRegion) (XRectangle * rect, TkRegion src, TkRegion dr_return); /* 119 */
#endif /* MAC_OSX_TK */
    void *reserved120;
#if !defined(__WIN32__) /* UNIX */
    void *reserved121;
#endif /* UNIX */
#ifdef __WIN32__
    void *reserved121;
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    Pixmap (*tkpCreateNativeBitmap) (Display * display, CONST char * source); /* 121 */
#endif /* MAC_OSX_TK */
#if !defined(__WIN32__) /* UNIX */
    void *reserved122;
#endif /* UNIX */
#ifdef __WIN32__
    void *reserved122;
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*tkpDefineNativeBitmaps) (void); /* 122 */
#endif /* MAC_OSX_TK */
    void *reserved123;
#if !defined(__WIN32__) /* UNIX */
    void *reserved124;
#endif /* UNIX */
#ifdef __WIN32__
    void *reserved124;
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    Pixmap (*tkpGetNativeAppBitmap) (Display * display, CONST char * name, int * width, int * height); /* 124 */
#endif /* MAC_OSX_TK */
    void *reserved125;
    void *reserved126;
    void *reserved127;
    void *reserved128;
    void *reserved129;
    void *reserved130;
    void *reserved131;
    void *reserved132;
    void *reserved133;
    void *reserved134;
    void (*tkpDrawHighlightBorder) (Tk_Window tkwin, GC fgGC, GC bgGC, int highlightWidth, Drawable drawable); /* 135 */
    void (*tkSetFocusWin) (TkWindow * winPtr, int force); /* 136 */
    void (*tkpSetKeycodeAndState) (Tk_Window tkwin, KeySym keySym, XEvent * eventPtr); /* 137 */
    KeySym (*tkpGetKeySym) (TkDisplay * dispPtr, XEvent * eventPtr); /* 138 */
    void (*tkpInitKeymapInfo) (TkDisplay * dispPtr); /* 139 */
    TkRegion (*tkPhotoGetValidRegion) (Tk_PhotoHandle handle); /* 140 */
    TkWindow ** (*tkWmStackorderToplevel) (TkWindow * parentPtr); /* 141 */
    void (*tkFocusFree) (TkMainInfo * mainPtr); /* 142 */
    void (*tkClipCleanup) (TkDisplay * dispPtr); /* 143 */
    void (*tkGCCleanup) (TkDisplay * dispPtr); /* 144 */
#if !defined(__WIN32__) /* UNIX */
    void *reserved145;
#endif /* UNIX */
#ifdef __WIN32__
    void (*tkSubtractRegion) (TkRegion sra, TkRegion srcb, TkRegion dr_return); /* 145 */
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
    void (*tkSubtractRegion) (TkRegion sra, TkRegion srcb, TkRegion dr_return); /* 145 */
#endif /* MAC_OSX_TK */
    void (*tkStylePkgInit) (TkMainInfo * mainPtr); /* 146 */
    void (*tkStylePkgFree) (TkMainInfo * mainPtr); /* 147 */
    Tk_Window (*tkToplevelWindowForCommand) (Tcl_Interp * interp, CONST char * cmdName); /* 148 */
    CONST Tk_OptionSpec * (*tkGetOptionSpec) (CONST char * name, Tk_OptionTable optionTable); /* 149 */
    int (*tkMakeRawCurve) (Tk_Canvas canvas, double * pointPtr, int numPoints, int numSteps, XPoint xPoints[], double dblPoints[]); /* 150 */
    void (*tkMakeRawCurvePostscript) (Tcl_Interp * interp, Tk_Canvas canvas, double * pointPtr, int numPoints); /* 151 */
    void (*tkpDrawFrame) (Tk_Window tkwin, Tk_3DBorder border, int highlightWidth, int borderWidth, int relief); /* 152 */
    void (*tkCreateThreadExitHandler) (Tcl_ExitProc * proc, ClientData clientData); /* 153 */
    void (*tkDeleteThreadExitHandler) (Tcl_ExitProc * proc, ClientData clientData); /* 154 */
    void *reserved155;
    int (*tkpTestembedCmd) (ClientData clientData, Tcl_Interp * interp, int argc, CONST char ** argv); /* 156 */
    int (*tkpTesttextCmd) (ClientData dummy, Tcl_Interp * interp, int argc, CONST char ** argv); /* 157 */
} TkIntStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern TkIntStubs *tkIntStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifndef TkAllocWindow
#define TkAllocWindow \
	(tkIntStubsPtr->tkAllocWindow) /* 0 */
#endif
#ifndef TkBezierPoints
#define TkBezierPoints \
	(tkIntStubsPtr->tkBezierPoints) /* 1 */
#endif
#ifndef TkBezierScreenPoints
#define TkBezierScreenPoints \
	(tkIntStubsPtr->tkBezierScreenPoints) /* 2 */
#endif
#ifndef TkBindDeadWindow
#define TkBindDeadWindow \
	(tkIntStubsPtr->tkBindDeadWindow) /* 3 */
#endif
#ifndef TkBindEventProc
#define TkBindEventProc \
	(tkIntStubsPtr->tkBindEventProc) /* 4 */
#endif
#ifndef TkBindFree
#define TkBindFree \
	(tkIntStubsPtr->tkBindFree) /* 5 */
#endif
#ifndef TkBindInit
#define TkBindInit \
	(tkIntStubsPtr->tkBindInit) /* 6 */
#endif
#ifndef TkChangeEventWindow
#define TkChangeEventWindow \
	(tkIntStubsPtr->tkChangeEventWindow) /* 7 */
#endif
#ifndef TkClipInit
#define TkClipInit \
	(tkIntStubsPtr->tkClipInit) /* 8 */
#endif
#ifndef TkComputeAnchor
#define TkComputeAnchor \
	(tkIntStubsPtr->tkComputeAnchor) /* 9 */
#endif
#ifndef TkCopyAndGlobalEval
#define TkCopyAndGlobalEval \
	(tkIntStubsPtr->tkCopyAndGlobalEval) /* 10 */
#endif
#ifndef TkCreateBindingProcedure
#define TkCreateBindingProcedure \
	(tkIntStubsPtr->tkCreateBindingProcedure) /* 11 */
#endif
#ifndef TkCreateCursorFromData
#define TkCreateCursorFromData \
	(tkIntStubsPtr->tkCreateCursorFromData) /* 12 */
#endif
#ifndef TkCreateFrame
#define TkCreateFrame \
	(tkIntStubsPtr->tkCreateFrame) /* 13 */
#endif
#ifndef TkCreateMainWindow
#define TkCreateMainWindow \
	(tkIntStubsPtr->tkCreateMainWindow) /* 14 */
#endif
#ifndef TkCurrentTime
#define TkCurrentTime \
	(tkIntStubsPtr->tkCurrentTime) /* 15 */
#endif
#ifndef TkDeleteAllImages
#define TkDeleteAllImages \
	(tkIntStubsPtr->tkDeleteAllImages) /* 16 */
#endif
#ifndef TkDoConfigureNotify
#define TkDoConfigureNotify \
	(tkIntStubsPtr->tkDoConfigureNotify) /* 17 */
#endif
#ifndef TkDrawInsetFocusHighlight
#define TkDrawInsetFocusHighlight \
	(tkIntStubsPtr->tkDrawInsetFocusHighlight) /* 18 */
#endif
#ifndef TkEventDeadWindow
#define TkEventDeadWindow \
	(tkIntStubsPtr->tkEventDeadWindow) /* 19 */
#endif
#ifndef TkFillPolygon
#define TkFillPolygon \
	(tkIntStubsPtr->tkFillPolygon) /* 20 */
#endif
#ifndef TkFindStateNum
#define TkFindStateNum \
	(tkIntStubsPtr->tkFindStateNum) /* 21 */
#endif
#ifndef TkFindStateString
#define TkFindStateString \
	(tkIntStubsPtr->tkFindStateString) /* 22 */
#endif
#ifndef TkFocusDeadWindow
#define TkFocusDeadWindow \
	(tkIntStubsPtr->tkFocusDeadWindow) /* 23 */
#endif
#ifndef TkFocusFilterEvent
#define TkFocusFilterEvent \
	(tkIntStubsPtr->tkFocusFilterEvent) /* 24 */
#endif
#ifndef TkFocusKeyEvent
#define TkFocusKeyEvent \
	(tkIntStubsPtr->tkFocusKeyEvent) /* 25 */
#endif
#ifndef TkFontPkgInit
#define TkFontPkgInit \
	(tkIntStubsPtr->tkFontPkgInit) /* 26 */
#endif
#ifndef TkFontPkgFree
#define TkFontPkgFree \
	(tkIntStubsPtr->tkFontPkgFree) /* 27 */
#endif
#ifndef TkFreeBindingTags
#define TkFreeBindingTags \
	(tkIntStubsPtr->tkFreeBindingTags) /* 28 */
#endif
#ifndef TkpFreeCursor
#define TkpFreeCursor \
	(tkIntStubsPtr->tkpFreeCursor) /* 29 */
#endif
#ifndef TkGetBitmapData
#define TkGetBitmapData \
	(tkIntStubsPtr->tkGetBitmapData) /* 30 */
#endif
#ifndef TkGetButtPoints
#define TkGetButtPoints \
	(tkIntStubsPtr->tkGetButtPoints) /* 31 */
#endif
#ifndef TkGetCursorByName
#define TkGetCursorByName \
	(tkIntStubsPtr->tkGetCursorByName) /* 32 */
#endif
#ifndef TkGetDefaultScreenName
#define TkGetDefaultScreenName \
	(tkIntStubsPtr->tkGetDefaultScreenName) /* 33 */
#endif
#ifndef TkGetDisplay
#define TkGetDisplay \
	(tkIntStubsPtr->tkGetDisplay) /* 34 */
#endif
#ifndef TkGetDisplayOf
#define TkGetDisplayOf \
	(tkIntStubsPtr->tkGetDisplayOf) /* 35 */
#endif
#ifndef TkGetFocusWin
#define TkGetFocusWin \
	(tkIntStubsPtr->tkGetFocusWin) /* 36 */
#endif
#ifndef TkGetInterpNames
#define TkGetInterpNames \
	(tkIntStubsPtr->tkGetInterpNames) /* 37 */
#endif
#ifndef TkGetMiterPoints
#define TkGetMiterPoints \
	(tkIntStubsPtr->tkGetMiterPoints) /* 38 */
#endif
#ifndef TkGetPointerCoords
#define TkGetPointerCoords \
	(tkIntStubsPtr->tkGetPointerCoords) /* 39 */
#endif
#ifndef TkGetServerInfo
#define TkGetServerInfo \
	(tkIntStubsPtr->tkGetServerInfo) /* 40 */
#endif
#ifndef TkGrabDeadWindow
#define TkGrabDeadWindow \
	(tkIntStubsPtr->tkGrabDeadWindow) /* 41 */
#endif
#ifndef TkGrabState
#define TkGrabState \
	(tkIntStubsPtr->tkGrabState) /* 42 */
#endif
#ifndef TkIncludePoint
#define TkIncludePoint \
	(tkIntStubsPtr->tkIncludePoint) /* 43 */
#endif
#ifndef TkInOutEvents
#define TkInOutEvents \
	(tkIntStubsPtr->tkInOutEvents) /* 44 */
#endif
#ifndef TkInstallFrameMenu
#define TkInstallFrameMenu \
	(tkIntStubsPtr->tkInstallFrameMenu) /* 45 */
#endif
#ifndef TkKeysymToString
#define TkKeysymToString \
	(tkIntStubsPtr->tkKeysymToString) /* 46 */
#endif
#ifndef TkLineToArea
#define TkLineToArea \
	(tkIntStubsPtr->tkLineToArea) /* 47 */
#endif
#ifndef TkLineToPoint
#define TkLineToPoint \
	(tkIntStubsPtr->tkLineToPoint) /* 48 */
#endif
#ifndef TkMakeBezierCurve
#define TkMakeBezierCurve \
	(tkIntStubsPtr->tkMakeBezierCurve) /* 49 */
#endif
#ifndef TkMakeBezierPostscript
#define TkMakeBezierPostscript \
	(tkIntStubsPtr->tkMakeBezierPostscript) /* 50 */
#endif
#ifndef TkOptionClassChanged
#define TkOptionClassChanged \
	(tkIntStubsPtr->tkOptionClassChanged) /* 51 */
#endif
#ifndef TkOptionDeadWindow
#define TkOptionDeadWindow \
	(tkIntStubsPtr->tkOptionDeadWindow) /* 52 */
#endif
#ifndef TkOvalToArea
#define TkOvalToArea \
	(tkIntStubsPtr->tkOvalToArea) /* 53 */
#endif
#ifndef TkOvalToPoint
#define TkOvalToPoint \
	(tkIntStubsPtr->tkOvalToPoint) /* 54 */
#endif
#ifndef TkpChangeFocus
#define TkpChangeFocus \
	(tkIntStubsPtr->tkpChangeFocus) /* 55 */
#endif
#ifndef TkpCloseDisplay
#define TkpCloseDisplay \
	(tkIntStubsPtr->tkpCloseDisplay) /* 56 */
#endif
#ifndef TkpClaimFocus
#define TkpClaimFocus \
	(tkIntStubsPtr->tkpClaimFocus) /* 57 */
#endif
#ifndef TkpDisplayWarning
#define TkpDisplayWarning \
	(tkIntStubsPtr->tkpDisplayWarning) /* 58 */
#endif
#ifndef TkpGetAppName
#define TkpGetAppName \
	(tkIntStubsPtr->tkpGetAppName) /* 59 */
#endif
#ifndef TkpGetOtherWindow
#define TkpGetOtherWindow \
	(tkIntStubsPtr->tkpGetOtherWindow) /* 60 */
#endif
#ifndef TkpGetWrapperWindow
#define TkpGetWrapperWindow \
	(tkIntStubsPtr->tkpGetWrapperWindow) /* 61 */
#endif
#ifndef TkpInit
#define TkpInit \
	(tkIntStubsPtr->tkpInit) /* 62 */
#endif
#ifndef TkpInitializeMenuBindings
#define TkpInitializeMenuBindings \
	(tkIntStubsPtr->tkpInitializeMenuBindings) /* 63 */
#endif
#ifndef TkpMakeContainer
#define TkpMakeContainer \
	(tkIntStubsPtr->tkpMakeContainer) /* 64 */
#endif
#ifndef TkpMakeMenuWindow
#define TkpMakeMenuWindow \
	(tkIntStubsPtr->tkpMakeMenuWindow) /* 65 */
#endif
#ifndef TkpMakeWindow
#define TkpMakeWindow \
	(tkIntStubsPtr->tkpMakeWindow) /* 66 */
#endif
#ifndef TkpMenuNotifyToplevelCreate
#define TkpMenuNotifyToplevelCreate \
	(tkIntStubsPtr->tkpMenuNotifyToplevelCreate) /* 67 */
#endif
#ifndef TkpOpenDisplay
#define TkpOpenDisplay \
	(tkIntStubsPtr->tkpOpenDisplay) /* 68 */
#endif
#ifndef TkPointerEvent
#define TkPointerEvent \
	(tkIntStubsPtr->tkPointerEvent) /* 69 */
#endif
#ifndef TkPolygonToArea
#define TkPolygonToArea \
	(tkIntStubsPtr->tkPolygonToArea) /* 70 */
#endif
#ifndef TkPolygonToPoint
#define TkPolygonToPoint \
	(tkIntStubsPtr->tkPolygonToPoint) /* 71 */
#endif
#ifndef TkPositionInTree
#define TkPositionInTree \
	(tkIntStubsPtr->tkPositionInTree) /* 72 */
#endif
#ifndef TkpRedirectKeyEvent
#define TkpRedirectKeyEvent \
	(tkIntStubsPtr->tkpRedirectKeyEvent) /* 73 */
#endif
#ifndef TkpSetMainMenubar
#define TkpSetMainMenubar \
	(tkIntStubsPtr->tkpSetMainMenubar) /* 74 */
#endif
#ifndef TkpUseWindow
#define TkpUseWindow \
	(tkIntStubsPtr->tkpUseWindow) /* 75 */
#endif
#ifndef TkpWindowWasRecentlyDeleted
#define TkpWindowWasRecentlyDeleted \
	(tkIntStubsPtr->tkpWindowWasRecentlyDeleted) /* 76 */
#endif
#ifndef TkQueueEventForAllChildren
#define TkQueueEventForAllChildren \
	(tkIntStubsPtr->tkQueueEventForAllChildren) /* 77 */
#endif
#ifndef TkReadBitmapFile
#define TkReadBitmapFile \
	(tkIntStubsPtr->tkReadBitmapFile) /* 78 */
#endif
#ifndef TkScrollWindow
#define TkScrollWindow \
	(tkIntStubsPtr->tkScrollWindow) /* 79 */
#endif
#ifndef TkSelDeadWindow
#define TkSelDeadWindow \
	(tkIntStubsPtr->tkSelDeadWindow) /* 80 */
#endif
#ifndef TkSelEventProc
#define TkSelEventProc \
	(tkIntStubsPtr->tkSelEventProc) /* 81 */
#endif
#ifndef TkSelInit
#define TkSelInit \
	(tkIntStubsPtr->tkSelInit) /* 82 */
#endif
#ifndef TkSelPropProc
#define TkSelPropProc \
	(tkIntStubsPtr->tkSelPropProc) /* 83 */
#endif
/* Slot 84 is reserved */
#ifndef TkSetWindowMenuBar
#define TkSetWindowMenuBar \
	(tkIntStubsPtr->tkSetWindowMenuBar) /* 85 */
#endif
#ifndef TkStringToKeysym
#define TkStringToKeysym \
	(tkIntStubsPtr->tkStringToKeysym) /* 86 */
#endif
#ifndef TkThickPolyLineToArea
#define TkThickPolyLineToArea \
	(tkIntStubsPtr->tkThickPolyLineToArea) /* 87 */
#endif
#ifndef TkWmAddToColormapWindows
#define TkWmAddToColormapWindows \
	(tkIntStubsPtr->tkWmAddToColormapWindows) /* 88 */
#endif
#ifndef TkWmDeadWindow
#define TkWmDeadWindow \
	(tkIntStubsPtr->tkWmDeadWindow) /* 89 */
#endif
#ifndef TkWmFocusToplevel
#define TkWmFocusToplevel \
	(tkIntStubsPtr->tkWmFocusToplevel) /* 90 */
#endif
#ifndef TkWmMapWindow
#define TkWmMapWindow \
	(tkIntStubsPtr->tkWmMapWindow) /* 91 */
#endif
#ifndef TkWmNewWindow
#define TkWmNewWindow \
	(tkIntStubsPtr->tkWmNewWindow) /* 92 */
#endif
#ifndef TkWmProtocolEventProc
#define TkWmProtocolEventProc \
	(tkIntStubsPtr->tkWmProtocolEventProc) /* 93 */
#endif
#ifndef TkWmRemoveFromColormapWindows
#define TkWmRemoveFromColormapWindows \
	(tkIntStubsPtr->tkWmRemoveFromColormapWindows) /* 94 */
#endif
#ifndef TkWmRestackToplevel
#define TkWmRestackToplevel \
	(tkIntStubsPtr->tkWmRestackToplevel) /* 95 */
#endif
#ifndef TkWmSetClass
#define TkWmSetClass \
	(tkIntStubsPtr->tkWmSetClass) /* 96 */
#endif
#ifndef TkWmUnmapWindow
#define TkWmUnmapWindow \
	(tkIntStubsPtr->tkWmUnmapWindow) /* 97 */
#endif
#ifndef TkDebugBitmap
#define TkDebugBitmap \
	(tkIntStubsPtr->tkDebugBitmap) /* 98 */
#endif
#ifndef TkDebugBorder
#define TkDebugBorder \
	(tkIntStubsPtr->tkDebugBorder) /* 99 */
#endif
#ifndef TkDebugCursor
#define TkDebugCursor \
	(tkIntStubsPtr->tkDebugCursor) /* 100 */
#endif
#ifndef TkDebugColor
#define TkDebugColor \
	(tkIntStubsPtr->tkDebugColor) /* 101 */
#endif
#ifndef TkDebugConfig
#define TkDebugConfig \
	(tkIntStubsPtr->tkDebugConfig) /* 102 */
#endif
#ifndef TkDebugFont
#define TkDebugFont \
	(tkIntStubsPtr->tkDebugFont) /* 103 */
#endif
#ifndef TkFindStateNumObj
#define TkFindStateNumObj \
	(tkIntStubsPtr->tkFindStateNumObj) /* 104 */
#endif
#ifndef TkGetBitmapPredefTable
#define TkGetBitmapPredefTable \
	(tkIntStubsPtr->tkGetBitmapPredefTable) /* 105 */
#endif
#ifndef TkGetDisplayList
#define TkGetDisplayList \
	(tkIntStubsPtr->tkGetDisplayList) /* 106 */
#endif
#ifndef TkGetMainInfoList
#define TkGetMainInfoList \
	(tkIntStubsPtr->tkGetMainInfoList) /* 107 */
#endif
#ifndef TkGetWindowFromObj
#define TkGetWindowFromObj \
	(tkIntStubsPtr->tkGetWindowFromObj) /* 108 */
#endif
#ifndef TkpGetString
#define TkpGetString \
	(tkIntStubsPtr->tkpGetString) /* 109 */
#endif
#ifndef TkpGetSubFonts
#define TkpGetSubFonts \
	(tkIntStubsPtr->tkpGetSubFonts) /* 110 */
#endif
#ifndef TkpGetSystemDefault
#define TkpGetSystemDefault \
	(tkIntStubsPtr->tkpGetSystemDefault) /* 111 */
#endif
#ifndef TkpMenuThreadInit
#define TkpMenuThreadInit \
	(tkIntStubsPtr->tkpMenuThreadInit) /* 112 */
#endif
#ifdef __WIN32__
#ifndef TkClipBox
#define TkClipBox \
	(tkIntStubsPtr->tkClipBox) /* 113 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkClipBox
#define TkClipBox \
	(tkIntStubsPtr->tkClipBox) /* 113 */
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkCreateRegion
#define TkCreateRegion \
	(tkIntStubsPtr->tkCreateRegion) /* 114 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkCreateRegion
#define TkCreateRegion \
	(tkIntStubsPtr->tkCreateRegion) /* 114 */
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkDestroyRegion
#define TkDestroyRegion \
	(tkIntStubsPtr->tkDestroyRegion) /* 115 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkDestroyRegion
#define TkDestroyRegion \
	(tkIntStubsPtr->tkDestroyRegion) /* 115 */
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkIntersectRegion
#define TkIntersectRegion \
	(tkIntStubsPtr->tkIntersectRegion) /* 116 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkIntersectRegion
#define TkIntersectRegion \
	(tkIntStubsPtr->tkIntersectRegion) /* 116 */
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkRectInRegion
#define TkRectInRegion \
	(tkIntStubsPtr->tkRectInRegion) /* 117 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkRectInRegion
#define TkRectInRegion \
	(tkIntStubsPtr->tkRectInRegion) /* 117 */
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkSetRegion
#define TkSetRegion \
	(tkIntStubsPtr->tkSetRegion) /* 118 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkSetRegion
#define TkSetRegion \
	(tkIntStubsPtr->tkSetRegion) /* 118 */
#endif
#endif /* MAC_OSX_TK */
#ifdef __WIN32__
#ifndef TkUnionRectWithRegion
#define TkUnionRectWithRegion \
	(tkIntStubsPtr->tkUnionRectWithRegion) /* 119 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkUnionRectWithRegion
#define TkUnionRectWithRegion \
	(tkIntStubsPtr->tkUnionRectWithRegion) /* 119 */
#endif
#endif /* MAC_OSX_TK */
/* Slot 120 is reserved */
#ifdef MAC_OSX_TK
#ifndef TkpCreateNativeBitmap
#define TkpCreateNativeBitmap \
	(tkIntStubsPtr->tkpCreateNativeBitmap) /* 121 */
#endif
#endif /* MAC_OSX_TK */
#ifdef MAC_OSX_TK
#ifndef TkpDefineNativeBitmaps
#define TkpDefineNativeBitmaps \
	(tkIntStubsPtr->tkpDefineNativeBitmaps) /* 122 */
#endif
#endif /* MAC_OSX_TK */
/* Slot 123 is reserved */
#ifdef MAC_OSX_TK
#ifndef TkpGetNativeAppBitmap
#define TkpGetNativeAppBitmap \
	(tkIntStubsPtr->tkpGetNativeAppBitmap) /* 124 */
#endif
#endif /* MAC_OSX_TK */
/* Slot 125 is reserved */
/* Slot 126 is reserved */
/* Slot 127 is reserved */
/* Slot 128 is reserved */
/* Slot 129 is reserved */
/* Slot 130 is reserved */
/* Slot 131 is reserved */
/* Slot 132 is reserved */
/* Slot 133 is reserved */
/* Slot 134 is reserved */
#ifndef TkpDrawHighlightBorder
#define TkpDrawHighlightBorder \
	(tkIntStubsPtr->tkpDrawHighlightBorder) /* 135 */
#endif
#ifndef TkSetFocusWin
#define TkSetFocusWin \
	(tkIntStubsPtr->tkSetFocusWin) /* 136 */
#endif
#ifndef TkpSetKeycodeAndState
#define TkpSetKeycodeAndState \
	(tkIntStubsPtr->tkpSetKeycodeAndState) /* 137 */
#endif
#ifndef TkpGetKeySym
#define TkpGetKeySym \
	(tkIntStubsPtr->tkpGetKeySym) /* 138 */
#endif
#ifndef TkpInitKeymapInfo
#define TkpInitKeymapInfo \
	(tkIntStubsPtr->tkpInitKeymapInfo) /* 139 */
#endif
#ifndef TkPhotoGetValidRegion
#define TkPhotoGetValidRegion \
	(tkIntStubsPtr->tkPhotoGetValidRegion) /* 140 */
#endif
#ifndef TkWmStackorderToplevel
#define TkWmStackorderToplevel \
	(tkIntStubsPtr->tkWmStackorderToplevel) /* 141 */
#endif
#ifndef TkFocusFree
#define TkFocusFree \
	(tkIntStubsPtr->tkFocusFree) /* 142 */
#endif
#ifndef TkClipCleanup
#define TkClipCleanup \
	(tkIntStubsPtr->tkClipCleanup) /* 143 */
#endif
#ifndef TkGCCleanup
#define TkGCCleanup \
	(tkIntStubsPtr->tkGCCleanup) /* 144 */
#endif
#ifdef __WIN32__
#ifndef TkSubtractRegion
#define TkSubtractRegion \
	(tkIntStubsPtr->tkSubtractRegion) /* 145 */
#endif
#endif /* __WIN32__ */
#ifdef MAC_OSX_TK
#ifndef TkSubtractRegion
#define TkSubtractRegion \
	(tkIntStubsPtr->tkSubtractRegion) /* 145 */
#endif
#endif /* MAC_OSX_TK */
#ifndef TkStylePkgInit
#define TkStylePkgInit \
	(tkIntStubsPtr->tkStylePkgInit) /* 146 */
#endif
#ifndef TkStylePkgFree
#define TkStylePkgFree \
	(tkIntStubsPtr->tkStylePkgFree) /* 147 */
#endif
#ifndef TkToplevelWindowForCommand
#define TkToplevelWindowForCommand \
	(tkIntStubsPtr->tkToplevelWindowForCommand) /* 148 */
#endif
#ifndef TkGetOptionSpec
#define TkGetOptionSpec \
	(tkIntStubsPtr->tkGetOptionSpec) /* 149 */
#endif
#ifndef TkMakeRawCurve
#define TkMakeRawCurve \
	(tkIntStubsPtr->tkMakeRawCurve) /* 150 */
#endif
#ifndef TkMakeRawCurvePostscript
#define TkMakeRawCurvePostscript \
	(tkIntStubsPtr->tkMakeRawCurvePostscript) /* 151 */
#endif
#ifndef TkpDrawFrame
#define TkpDrawFrame \
	(tkIntStubsPtr->tkpDrawFrame) /* 152 */
#endif
#ifndef TkCreateThreadExitHandler
#define TkCreateThreadExitHandler \
	(tkIntStubsPtr->tkCreateThreadExitHandler) /* 153 */
#endif
#ifndef TkDeleteThreadExitHandler
#define TkDeleteThreadExitHandler \
	(tkIntStubsPtr->tkDeleteThreadExitHandler) /* 154 */
#endif
/* Slot 155 is reserved */
#ifndef TkpTestembedCmd
#define TkpTestembedCmd \
	(tkIntStubsPtr->tkpTestembedCmd) /* 156 */
#endif
#ifndef TkpTesttextCmd
#define TkpTesttextCmd \
	(tkIntStubsPtr->tkpTesttextCmd) /* 157 */
#endif

#endif /* defined(USE_TK_STUBS) && !defined(USE_TK_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _TKINTDECLS */

@


1.3
log
@removed trailing whitespace
@
text
@d14 1
a14 1
 * RCS: @@(#) $Id: tkIntDecls.h,v 1.2 2007/05/07 04:17:40 brlcad Exp $
d40 1
a40 1
EXTERN TkWindow *	TkAllocWindow (TkDisplay * dispPtr, int screenNum,
d46 1
a46 1
EXTERN void		TkBezierPoints (double control[], int numSteps,
d52 2
a53 2
EXTERN void		TkBezierScreenPoints (Tk_Canvas canvas,
				double control[], int numSteps,
d64 1
a64 1
EXTERN void		TkBindEventProc (TkWindow * winPtr,
d80 1
a80 1
EXTERN void		TkChangeEventWindow (XEvent * eventPtr,
d91 2
a92 2
EXTERN void		TkComputeAnchor (Tk_Anchor anchor, Tk_Window tkwin,
				int padX, int padY, int innerWidth,
d98 1
a98 1
EXTERN int		TkCopyAndGlobalEval (Tcl_Interp * interp,
d104 5
a108 5
EXTERN unsigned long	TkCreateBindingProcedure (Tcl_Interp * interp,
				Tk_BindingTable bindingTable,
				ClientData object, CONST char * eventString,
				TkBindEvalProc * evalProc,
				TkBindFreeProc * freeProc,
d114 3
a116 3
EXTERN TkCursor *	TkCreateCursorFromData (Tk_Window tkwin,
				CONST char * source, CONST char * mask,
				int width, int height, int xHot, int yHot,
d122 2
a123 2
EXTERN int		TkCreateFrame (ClientData clientData,
				Tcl_Interp * interp, int argc, char ** argv,
d129 1
a129 1
EXTERN Tk_Window	TkCreateMainWindow (Tcl_Interp * interp,
d150 1
a150 1
EXTERN void		TkDrawInsetFocusHighlight (Tk_Window tkwin, GC gc,
d161 2
a162 2
EXTERN void		TkFillPolygon (Tk_Canvas canvas, double * coordPtr,
				int numPoints, Display * display,
d168 3
a170 3
EXTERN int		TkFindStateNum (Tcl_Interp * interp,
				CONST char * option,
				CONST TkStateMap * mapPtr,
d176 1
a176 1
EXTERN char *		TkFindStateString (CONST TkStateMap * mapPtr,
d187 1
a187 1
EXTERN int		TkFocusFilterEvent (TkWindow * winPtr,
d193 1
a193 1
EXTERN TkWindow *	TkFocusKeyEvent (TkWindow * winPtr,
d219 3
a221 3
EXTERN char *		TkGetBitmapData (Tcl_Interp * interp, char * string,
				char * fileName, int * widthPtr,
				int * heightPtr, int * hotXPtr,
d227 2
a228 2
EXTERN void		TkGetButtPoints (double p1[], double p2[],
				double width, int project, double m1[],
d234 1
a234 1
EXTERN TkCursor *	TkGetCursorByName (Tcl_Interp * interp,
d240 1
a240 1
EXTERN CONST84_RETURN char * TkGetDefaultScreenName (Tcl_Interp * interp,
d251 1
a251 1
EXTERN int		TkGetDisplayOf (Tcl_Interp * interp, int objc,
d262 1
a262 1
EXTERN int		TkGetInterpNames (Tcl_Interp * interp,
d268 2
a269 2
EXTERN int		TkGetMiterPoints (double p1[], double p2[],
				double p3[], double width, double m1[],
d275 1
a275 1
EXTERN void		TkGetPointerCoords (Tk_Window tkwin, int * xPtr,
d281 1
a281 1
EXTERN void		TkGetServerInfo (Tcl_Interp * interp,
d302 3
a304 3
EXTERN void		TkInOutEvents (XEvent * eventPtr,
				TkWindow * sourcePtr, TkWindow * destPtr,
				int leaveType, int enterType,
d320 1
a320 1
EXTERN int		TkLineToArea (double end1Ptr[], double end2Ptr[],
d326 1
a326 1
EXTERN double		TkLineToPoint (double end1Ptr[], double end2Ptr[],
d332 3
a334 3
EXTERN int		TkMakeBezierCurve (Tk_Canvas canvas,
				double * pointPtr, int numPoints,
				int numSteps, XPoint xPoints[],
d340 2
a341 2
EXTERN void		TkMakeBezierPostscript (Tcl_Interp * interp,
				Tk_Canvas canvas, double * pointPtr,
d362 1
a362 1
EXTERN double		TkOvalToPoint (double ovalPtr[], double width,
d383 1
a383 1
EXTERN void		TkpDisplayWarning (CONST char * msg,
d389 1
a389 1
EXTERN void		TkpGetAppName (Tcl_Interp * interp,
d410 1
a410 1
EXTERN void		TkpInitializeMenuBindings (Tcl_Interp * interp,
d431 1
a431 1
EXTERN void		TkpMenuNotifyToplevelCreate (Tcl_Interp * interp1,
d447 1
a447 1
EXTERN int		TkPolygonToArea (double * polyPtr, int numPoints,
d453 1
a453 1
EXTERN double		TkPolygonToPoint (double * polyPtr, int numPoints,
d459 1
a459 1
EXTERN int		TkPositionInTree (TkWindow * winPtr,
d465 1
a465 1
EXTERN void		TkpRedirectKeyEvent (TkWindow * winPtr,
d471 1
a471 1
EXTERN void		TkpSetMainMenubar (Tcl_Interp * interp,
d477 1
a477 1
EXTERN int		TkpUseWindow (Tcl_Interp * interp, Tk_Window tkwin,
d483 1
a483 1
EXTERN int		TkpWindowWasRecentlyDeleted (Window win,
d489 1
a489 1
EXTERN void		TkQueueEventForAllChildren (TkWindow * winPtr,
d495 5
a499 5
EXTERN int		TkReadBitmapFile (Display * display, Drawable d,
				CONST char * filename,
				unsigned int * width_return,
				unsigned int * height_return,
				Pixmap * bitmap_return, int * x_hot_return,
d505 2
a506 2
EXTERN int		TkScrollWindow (Tk_Window tkwin, GC gc, int x, int y,
				int width, int height, int dx, int dy,
d533 2
a534 2
EXTERN void		TkSetWindowMenuBar (Tcl_Interp * interp,
				Tk_Window tkwin, char * oldMenuName,
d545 2
a546 2
EXTERN int		TkThickPolyLineToArea (double * coordPtr,
				int numPoints, double width, int capStyle,
d577 1
a577 1
EXTERN void		TkWmProtocolEventProc (TkWindow * winPtr,
d588 1
a588 1
EXTERN void		TkWmRestackToplevel (TkWindow * winPtr,
d624 1
a624 1
EXTERN Tcl_Obj *	TkDebugConfig (Tcl_Interp * interp,
d635 2
a636 2
EXTERN int		TkFindStateNumObj (Tcl_Interp * interp,
				Tcl_Obj * optionPtr,
d657 2
a658 2
EXTERN int		TkGetWindowFromObj (Tcl_Interp * interp,
				Tk_Window tkwin, Tcl_Obj * objPtr,
d664 1
a664 1
EXTERN char *		TkpGetString (TkWindow * winPtr, XEvent * eventPtr,
d675 1
a675 1
EXTERN Tcl_Obj *	TkpGetSystemDefault (Tk_Window tkwin,
d729 1
a729 1
EXTERN void		TkIntersectRegion (TkRegion sra, TkRegion srcb,
d737 1
a737 1
EXTERN void		TkIntersectRegion (TkRegion sra, TkRegion srcb,
d745 1
a745 1
EXTERN int		TkRectInRegion (TkRegion rgn, int x, int y,
d753 1
a753 1
EXTERN int		TkRectInRegion (TkRegion rgn, int x, int y,
d775 1
a775 1
EXTERN void		TkUnionRectWithRegion (XRectangle * rect,
d783 1
a783 1
EXTERN void		TkUnionRectWithRegion (XRectangle * rect,
d792 1
a792 1
EXTERN Pixmap		TkpCreateNativeBitmap (Display * display,
d808 1
a808 1
EXTERN Pixmap		TkpGetNativeAppBitmap (Display * display,
d825 2
a826 2
EXTERN void		TkpDrawHighlightBorder (Tk_Window tkwin, GC fgGC,
				GC bgGC, int highlightWidth,
d837 1
a837 1
EXTERN void		TkpSetKeycodeAndState (Tk_Window tkwin,
d879 1
a879 1
EXTERN void		TkSubtractRegion (TkRegion sra, TkRegion srcb,
d887 1
a887 1
EXTERN void		TkSubtractRegion (TkRegion sra, TkRegion srcb,
d904 1
a904 1
EXTERN Tk_Window	TkToplevelWindowForCommand (Tcl_Interp * interp,
d910 1
a910 1
EXTERN CONST Tk_OptionSpec * TkGetOptionSpec (CONST char * name,
d916 2
a917 2
EXTERN int		TkMakeRawCurve (Tk_Canvas canvas, double * pointPtr,
				int numPoints, int numSteps,
d923 2
a924 2
EXTERN void		TkMakeRawCurvePostscript (Tcl_Interp * interp,
				Tk_Canvas canvas, double * pointPtr,
d930 2
a931 2
EXTERN void		TkpDrawFrame (Tk_Window tkwin, Tk_3DBorder border,
				int highlightWidth, int borderWidth,
d937 1
a937 1
EXTERN void		TkCreateThreadExitHandler (Tcl_ExitProc * proc,
d943 1
a943 1
EXTERN void		TkDeleteThreadExitHandler (Tcl_ExitProc * proc,
d950 2
a951 2
EXTERN int		TkpTestembedCmd (ClientData clientData,
				Tcl_Interp * interp, int argc,
d957 2
a958 2
EXTERN int		TkpTesttextCmd (ClientData dummy,
				Tcl_Interp * interp, int argc,
@


1.2
log
@upgrade to tcl/tk 8.5a6 (from 8.5a5) .. includes even more (extensive) aquatk fixes/enhancements
@
text
@d14 1
a14 1
 * RCS: @@(#) $Id: tkIntDecls.h,v 1.29 2006/12/18 16:42:46 dgp Exp $
d40 1
a40 1
EXTERN TkWindow *	TkAllocWindow (TkDisplay * dispPtr, int screenNum, 
d46 1
a46 1
EXTERN void		TkBezierPoints (double control[], int numSteps, 
d52 2
a53 2
EXTERN void		TkBezierScreenPoints (Tk_Canvas canvas, 
				double control[], int numSteps, 
d64 1
a64 1
EXTERN void		TkBindEventProc (TkWindow * winPtr, 
d80 1
a80 1
EXTERN void		TkChangeEventWindow (XEvent * eventPtr, 
d91 2
a92 2
EXTERN void		TkComputeAnchor (Tk_Anchor anchor, Tk_Window tkwin, 
				int padX, int padY, int innerWidth, 
d98 1
a98 1
EXTERN int		TkCopyAndGlobalEval (Tcl_Interp * interp, 
d104 5
a108 5
EXTERN unsigned long	TkCreateBindingProcedure (Tcl_Interp * interp, 
				Tk_BindingTable bindingTable, 
				ClientData object, CONST char * eventString, 
				TkBindEvalProc * evalProc, 
				TkBindFreeProc * freeProc, 
d114 3
a116 3
EXTERN TkCursor *	TkCreateCursorFromData (Tk_Window tkwin, 
				CONST char * source, CONST char * mask, 
				int width, int height, int xHot, int yHot, 
d122 2
a123 2
EXTERN int		TkCreateFrame (ClientData clientData, 
				Tcl_Interp * interp, int argc, char ** argv, 
d129 1
a129 1
EXTERN Tk_Window	TkCreateMainWindow (Tcl_Interp * interp, 
d150 1
a150 1
EXTERN void		TkDrawInsetFocusHighlight (Tk_Window tkwin, GC gc, 
d161 2
a162 2
EXTERN void		TkFillPolygon (Tk_Canvas canvas, double * coordPtr, 
				int numPoints, Display * display, 
d168 3
a170 3
EXTERN int		TkFindStateNum (Tcl_Interp * interp, 
				CONST char * option, 
				CONST TkStateMap * mapPtr, 
d176 1
a176 1
EXTERN char *		TkFindStateString (CONST TkStateMap * mapPtr, 
d187 1
a187 1
EXTERN int		TkFocusFilterEvent (TkWindow * winPtr, 
d193 1
a193 1
EXTERN TkWindow *	TkFocusKeyEvent (TkWindow * winPtr, 
d219 3
a221 3
EXTERN char *		TkGetBitmapData (Tcl_Interp * interp, char * string, 
				char * fileName, int * widthPtr, 
				int * heightPtr, int * hotXPtr, 
d227 2
a228 2
EXTERN void		TkGetButtPoints (double p1[], double p2[], 
				double width, int project, double m1[], 
d234 1
a234 1
EXTERN TkCursor *	TkGetCursorByName (Tcl_Interp * interp, 
d240 1
a240 1
EXTERN CONST84_RETURN char * TkGetDefaultScreenName (Tcl_Interp * interp, 
d251 1
a251 1
EXTERN int		TkGetDisplayOf (Tcl_Interp * interp, int objc, 
d262 1
a262 1
EXTERN int		TkGetInterpNames (Tcl_Interp * interp, 
d268 2
a269 2
EXTERN int		TkGetMiterPoints (double p1[], double p2[], 
				double p3[], double width, double m1[], 
d275 1
a275 1
EXTERN void		TkGetPointerCoords (Tk_Window tkwin, int * xPtr, 
d281 1
a281 1
EXTERN void		TkGetServerInfo (Tcl_Interp * interp, 
d302 3
a304 3
EXTERN void		TkInOutEvents (XEvent * eventPtr, 
				TkWindow * sourcePtr, TkWindow * destPtr, 
				int leaveType, int enterType, 
d320 1
a320 1
EXTERN int		TkLineToArea (double end1Ptr[], double end2Ptr[], 
d326 1
a326 1
EXTERN double		TkLineToPoint (double end1Ptr[], double end2Ptr[], 
d332 3
a334 3
EXTERN int		TkMakeBezierCurve (Tk_Canvas canvas, 
				double * pointPtr, int numPoints, 
				int numSteps, XPoint xPoints[], 
d340 2
a341 2
EXTERN void		TkMakeBezierPostscript (Tcl_Interp * interp, 
				Tk_Canvas canvas, double * pointPtr, 
d362 1
a362 1
EXTERN double		TkOvalToPoint (double ovalPtr[], double width, 
d383 1
a383 1
EXTERN void		TkpDisplayWarning (CONST char * msg, 
d389 1
a389 1
EXTERN void		TkpGetAppName (Tcl_Interp * interp, 
d410 1
a410 1
EXTERN void		TkpInitializeMenuBindings (Tcl_Interp * interp, 
d431 1
a431 1
EXTERN void		TkpMenuNotifyToplevelCreate (Tcl_Interp * interp1, 
d447 1
a447 1
EXTERN int		TkPolygonToArea (double * polyPtr, int numPoints, 
d453 1
a453 1
EXTERN double		TkPolygonToPoint (double * polyPtr, int numPoints, 
d459 1
a459 1
EXTERN int		TkPositionInTree (TkWindow * winPtr, 
d465 1
a465 1
EXTERN void		TkpRedirectKeyEvent (TkWindow * winPtr, 
d471 1
a471 1
EXTERN void		TkpSetMainMenubar (Tcl_Interp * interp, 
d477 1
a477 1
EXTERN int		TkpUseWindow (Tcl_Interp * interp, Tk_Window tkwin, 
d483 1
a483 1
EXTERN int		TkpWindowWasRecentlyDeleted (Window win, 
d489 1
a489 1
EXTERN void		TkQueueEventForAllChildren (TkWindow * winPtr, 
d495 5
a499 5
EXTERN int		TkReadBitmapFile (Display * display, Drawable d, 
				CONST char * filename, 
				unsigned int * width_return, 
				unsigned int * height_return, 
				Pixmap * bitmap_return, int * x_hot_return, 
d505 2
a506 2
EXTERN int		TkScrollWindow (Tk_Window tkwin, GC gc, int x, int y, 
				int width, int height, int dx, int dy, 
d533 2
a534 2
EXTERN void		TkSetWindowMenuBar (Tcl_Interp * interp, 
				Tk_Window tkwin, char * oldMenuName, 
d545 2
a546 2
EXTERN int		TkThickPolyLineToArea (double * coordPtr, 
				int numPoints, double width, int capStyle, 
d577 1
a577 1
EXTERN void		TkWmProtocolEventProc (TkWindow * winPtr, 
d588 1
a588 1
EXTERN void		TkWmRestackToplevel (TkWindow * winPtr, 
d624 1
a624 1
EXTERN Tcl_Obj *	TkDebugConfig (Tcl_Interp * interp, 
d635 2
a636 2
EXTERN int		TkFindStateNumObj (Tcl_Interp * interp, 
				Tcl_Obj * optionPtr, 
d657 2
a658 2
EXTERN int		TkGetWindowFromObj (Tcl_Interp * interp, 
				Tk_Window tkwin, Tcl_Obj * objPtr, 
d664 1
a664 1
EXTERN char *		TkpGetString (TkWindow * winPtr, XEvent * eventPtr, 
d675 1
a675 1
EXTERN Tcl_Obj *	TkpGetSystemDefault (Tk_Window tkwin, 
d729 1
a729 1
EXTERN void		TkIntersectRegion (TkRegion sra, TkRegion srcb, 
d737 1
a737 1
EXTERN void		TkIntersectRegion (TkRegion sra, TkRegion srcb, 
d745 1
a745 1
EXTERN int		TkRectInRegion (TkRegion rgn, int x, int y, 
d753 1
a753 1
EXTERN int		TkRectInRegion (TkRegion rgn, int x, int y, 
d775 1
a775 1
EXTERN void		TkUnionRectWithRegion (XRectangle * rect, 
d783 1
a783 1
EXTERN void		TkUnionRectWithRegion (XRectangle * rect, 
d792 1
a792 1
EXTERN Pixmap		TkpCreateNativeBitmap (Display * display, 
d808 1
a808 1
EXTERN Pixmap		TkpGetNativeAppBitmap (Display * display, 
d825 2
a826 2
EXTERN void		TkpDrawHighlightBorder (Tk_Window tkwin, GC fgGC, 
				GC bgGC, int highlightWidth, 
d837 1
a837 1
EXTERN void		TkpSetKeycodeAndState (Tk_Window tkwin, 
d879 1
a879 1
EXTERN void		TkSubtractRegion (TkRegion sra, TkRegion srcb, 
d887 1
a887 1
EXTERN void		TkSubtractRegion (TkRegion sra, TkRegion srcb, 
d904 1
a904 1
EXTERN Tk_Window	TkToplevelWindowForCommand (Tcl_Interp * interp, 
d910 1
a910 1
EXTERN CONST Tk_OptionSpec * TkGetOptionSpec (CONST char * name, 
d916 2
a917 2
EXTERN int		TkMakeRawCurve (Tk_Canvas canvas, double * pointPtr, 
				int numPoints, int numSteps, 
d923 2
a924 2
EXTERN void		TkMakeRawCurvePostscript (Tcl_Interp * interp, 
				Tk_Canvas canvas, double * pointPtr, 
d930 2
a931 2
EXTERN void		TkpDrawFrame (Tk_Window tkwin, Tk_3DBorder border, 
				int highlightWidth, int borderWidth, 
d937 1
a937 1
EXTERN void		TkCreateThreadExitHandler (Tcl_ExitProc * proc, 
d943 1
a943 1
EXTERN void		TkDeleteThreadExitHandler (Tcl_ExitProc * proc, 
d950 2
a951 2
EXTERN int		TkpTestembedCmd (ClientData clientData, 
				Tcl_Interp * interp, int argc, 
d957 2
a958 2
EXTERN int		TkpTesttextCmd (ClientData dummy, 
				Tcl_Interp * interp, int argc, 
@


1.1
log
@upgrade tcl/tk from 8.4.6 to 8.5a5; also move to a recursive configure, using AC_CONFIG_SUBDIRS to call upon tcl, tk, and enigma's configure scripts as needed instead of redoing their build systems for our purpose.  this has a rather drastic impact on the way the libraries are linked together, including the need to compile tcl/tk static so as to avoid libtool portability issues as well as letting us take advantage of their build system for reduced maintenance and easing future upgrades.  undoubtedly more build issues to be worked out with other platforms given the extent of this change.  this does move us one step closer towards correctly linking against system tcl/tk installations too.
@
text
@d14 1
a14 1
 * RCS: @@(#) $Id: tkIntDecls.h,v 1.28 2005/11/27 02:36:14 das Exp $
d40 2
a41 2
EXTERN TkWindow *	TkAllocWindow _ANSI_ARGS_((TkDisplay * dispPtr, 
				int screenNum, TkWindow * parentPtr));
d46 2
a47 2
EXTERN void		TkBezierPoints _ANSI_ARGS_((double control[], 
				int numSteps, double * coordPtr));
d52 1
a52 1
EXTERN void		TkBezierScreenPoints _ANSI_ARGS_((Tk_Canvas canvas, 
d54 1
a54 1
				XPoint * xPointPtr));
d59 1
a59 1
EXTERN void		TkBindDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d64 2
a65 2
EXTERN void		TkBindEventProc _ANSI_ARGS_((TkWindow * winPtr, 
				XEvent * eventPtr));
d70 1
a70 1
EXTERN void		TkBindFree _ANSI_ARGS_((TkMainInfo * mainPtr));
d75 1
a75 1
EXTERN void		TkBindInit _ANSI_ARGS_((TkMainInfo * mainPtr));
d80 2
a81 2
EXTERN void		TkChangeEventWindow _ANSI_ARGS_((XEvent * eventPtr, 
				TkWindow * winPtr));
d86 1
a86 2
EXTERN int		TkClipInit _ANSI_ARGS_((Tcl_Interp * interp, 
				TkDisplay * dispPtr));
d91 3
a93 4
EXTERN void		TkComputeAnchor _ANSI_ARGS_((Tk_Anchor anchor, 
				Tk_Window tkwin, int padX, int padY, 
				int innerWidth, int innerHeight, int * xPtr, 
				int * yPtr));
d98 2
a99 2
EXTERN int		TkCopyAndGlobalEval _ANSI_ARGS_((Tcl_Interp * interp, 
				char * script));
d104 1
a104 2
EXTERN unsigned long	TkCreateBindingProcedure _ANSI_ARGS_((
				Tcl_Interp * interp, 
d109 1
a109 1
				ClientData clientData));
d114 1
a114 1
EXTERN TkCursor *	TkCreateCursorFromData _ANSI_ARGS_((Tk_Window tkwin, 
d117 1
a117 1
				XColor fg, XColor bg));
d122 1
a122 1
EXTERN int		TkCreateFrame _ANSI_ARGS_((ClientData clientData, 
d124 1
a124 1
				int toplevel, char * appName));
d129 2
a130 2
EXTERN Tk_Window	TkCreateMainWindow _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * screenName, char * baseName));
d135 1
a135 1
EXTERN Time		TkCurrentTime _ANSI_ARGS_((TkDisplay * dispPtr));
d140 1
a140 1
EXTERN void		TkDeleteAllImages _ANSI_ARGS_((TkMainInfo * mainPtr));
d145 1
a145 1
EXTERN void		TkDoConfigureNotify _ANSI_ARGS_((TkWindow * winPtr));
d150 2
a151 3
EXTERN void		TkDrawInsetFocusHighlight _ANSI_ARGS_((
				Tk_Window tkwin, GC gc, int width, 
				Drawable drawable, int padding));
d156 1
a156 1
EXTERN void		TkEventDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d161 3
a163 4
EXTERN void		TkFillPolygon _ANSI_ARGS_((Tk_Canvas canvas, 
				double * coordPtr, int numPoints, 
				Display * display, Drawable drawable, GC gc, 
				GC outlineGC));
d168 1
a168 1
EXTERN int		TkFindStateNum _ANSI_ARGS_((Tcl_Interp * interp, 
d171 1
a171 1
				CONST char * strKey));
d176 2
a177 2
EXTERN char *		TkFindStateString _ANSI_ARGS_((
				CONST TkStateMap * mapPtr, int numKey));
d182 1
a182 1
EXTERN void		TkFocusDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d187 2
a188 2
EXTERN int		TkFocusFilterEvent _ANSI_ARGS_((TkWindow * winPtr, 
				XEvent * eventPtr));
d193 2
a194 2
EXTERN TkWindow *	TkFocusKeyEvent _ANSI_ARGS_((TkWindow * winPtr, 
				XEvent * eventPtr));
d199 1
a199 1
EXTERN void		TkFontPkgInit _ANSI_ARGS_((TkMainInfo * mainPtr));
d204 1
a204 1
EXTERN void		TkFontPkgFree _ANSI_ARGS_((TkMainInfo * mainPtr));
d209 1
a209 1
EXTERN void		TkFreeBindingTags _ANSI_ARGS_((TkWindow * winPtr));
d214 1
a214 1
EXTERN void		TkpFreeCursor _ANSI_ARGS_((TkCursor * cursorPtr));
d219 4
a222 4
EXTERN char *		TkGetBitmapData _ANSI_ARGS_((Tcl_Interp * interp, 
				char * string, char * fileName, 
				int * widthPtr, int * heightPtr, 
				int * hotXPtr, int * hotYPtr));
d227 3
a229 3
EXTERN void		TkGetButtPoints _ANSI_ARGS_((double p1[], 
				double p2[], double width, int project, 
				double m1[], double m2[]));
d234 2
a235 2
EXTERN TkCursor *	TkGetCursorByName _ANSI_ARGS_((Tcl_Interp * interp, 
				Tk_Window tkwin, Tk_Uid string));
d240 2
a241 2
EXTERN CONST84_RETURN char * TkGetDefaultScreenName _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char * screenName));
d246 1
a246 1
EXTERN TkDisplay *	TkGetDisplay _ANSI_ARGS_((Display * display));
d251 2
a252 3
EXTERN int		TkGetDisplayOf _ANSI_ARGS_((Tcl_Interp * interp, 
				int objc, Tcl_Obj *CONST objv[], 
				Tk_Window * tkwinPtr));
d257 1
a257 1
EXTERN TkWindow *	TkGetFocusWin _ANSI_ARGS_((TkWindow * winPtr));
d262 2
a263 2
EXTERN int		TkGetInterpNames _ANSI_ARGS_((Tcl_Interp * interp, 
				Tk_Window tkwin));
d268 3
a270 3
EXTERN int		TkGetMiterPoints _ANSI_ARGS_((double p1[], 
				double p2[], double p3[], double width, 
				double m1[], double m2[]));
d275 2
a276 2
EXTERN void		TkGetPointerCoords _ANSI_ARGS_((Tk_Window tkwin, 
				int * xPtr, int * yPtr));
d281 2
a282 2
EXTERN void		TkGetServerInfo _ANSI_ARGS_((Tcl_Interp * interp, 
				Tk_Window tkwin));
d287 1
a287 1
EXTERN void		TkGrabDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d292 1
a292 1
EXTERN int		TkGrabState _ANSI_ARGS_((TkWindow * winPtr));
d297 1
a297 2
EXTERN void		TkIncludePoint _ANSI_ARGS_((Tk_Item * itemPtr, 
				double * pointPtr));
d302 1
a302 1
EXTERN void		TkInOutEvents _ANSI_ARGS_((XEvent * eventPtr, 
d305 1
a305 1
				Tcl_QueuePosition position));
d310 1
a310 1
EXTERN void		TkInstallFrameMenu _ANSI_ARGS_((Tk_Window tkwin));
d315 1
a315 1
EXTERN char *		TkKeysymToString _ANSI_ARGS_((KeySym keysym));
d320 2
a321 2
EXTERN int		TkLineToArea _ANSI_ARGS_((double end1Ptr[], 
				double end2Ptr[], double rectPtr[]));
d326 2
a327 2
EXTERN double		TkLineToPoint _ANSI_ARGS_((double end1Ptr[], 
				double end2Ptr[], double pointPtr[]));
d332 1
a332 1
EXTERN int		TkMakeBezierCurve _ANSI_ARGS_((Tk_Canvas canvas, 
d335 1
a335 1
				double dblPoints[]));
d340 3
a342 3
EXTERN void		TkMakeBezierPostscript _ANSI_ARGS_((
				Tcl_Interp * interp, Tk_Canvas canvas, 
				double * pointPtr, int numPoints));
d347 1
a347 1
EXTERN void		TkOptionClassChanged _ANSI_ARGS_((TkWindow * winPtr));
d352 1
a352 1
EXTERN void		TkOptionDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d357 1
a357 2
EXTERN int		TkOvalToArea _ANSI_ARGS_((double * ovalPtr, 
				double * rectPtr));
d362 2
a363 2
EXTERN double		TkOvalToPoint _ANSI_ARGS_((double ovalPtr[], 
				double width, int filled, double pointPtr[]));
d368 1
a368 2
EXTERN int		TkpChangeFocus _ANSI_ARGS_((TkWindow * winPtr, 
				int force));
d373 1
a373 1
EXTERN void		TkpCloseDisplay _ANSI_ARGS_((TkDisplay * dispPtr));
d378 1
a378 2
EXTERN void		TkpClaimFocus _ANSI_ARGS_((TkWindow * topLevelPtr, 
				int force));
d383 2
a384 2
EXTERN void		TkpDisplayWarning _ANSI_ARGS_((CONST char * msg, 
				CONST char * title));
d389 2
a390 2
EXTERN void		TkpGetAppName _ANSI_ARGS_((Tcl_Interp * interp, 
				Tcl_DString * name));
d395 1
a395 1
EXTERN TkWindow *	TkpGetOtherWindow _ANSI_ARGS_((TkWindow * winPtr));
d400 1
a400 1
EXTERN TkWindow *	TkpGetWrapperWindow _ANSI_ARGS_((TkWindow * winPtr));
d405 1
a405 1
EXTERN int		TkpInit _ANSI_ARGS_((Tcl_Interp * interp));
d410 2
a411 3
EXTERN void		TkpInitializeMenuBindings _ANSI_ARGS_((
				Tcl_Interp * interp, 
				Tk_BindingTable bindingTable));
d416 1
a416 1
EXTERN void		TkpMakeContainer _ANSI_ARGS_((Tk_Window tkwin));
d421 1
a421 2
EXTERN void		TkpMakeMenuWindow _ANSI_ARGS_((Tk_Window tkwin, 
				int transient));
d426 1
a426 2
EXTERN Window		TkpMakeWindow _ANSI_ARGS_((TkWindow * winPtr, 
				Window parent));
d431 2
a432 2
EXTERN void		TkpMenuNotifyToplevelCreate _ANSI_ARGS_((
				Tcl_Interp * interp1, char * menuName));
d437 1
a437 2
EXTERN TkDisplay *	TkpOpenDisplay _ANSI_ARGS_((
				CONST char * display_name));
d442 1
a442 2
EXTERN int		TkPointerEvent _ANSI_ARGS_((XEvent * eventPtr, 
				TkWindow * winPtr));
d447 2
a448 2
EXTERN int		TkPolygonToArea _ANSI_ARGS_((double * polyPtr, 
				int numPoints, double * rectPtr));
d453 2
a454 2
EXTERN double		TkPolygonToPoint _ANSI_ARGS_((double * polyPtr, 
				int numPoints, double * pointPtr));
d459 2
a460 2
EXTERN int		TkPositionInTree _ANSI_ARGS_((TkWindow * winPtr, 
				TkWindow * treePtr));
d465 2
a466 2
EXTERN void		TkpRedirectKeyEvent _ANSI_ARGS_((TkWindow * winPtr, 
				XEvent * eventPtr));
d471 2
a472 2
EXTERN void		TkpSetMainMenubar _ANSI_ARGS_((Tcl_Interp * interp, 
				Tk_Window tkwin, char * menuName));
d477 2
a478 2
EXTERN int		TkpUseWindow _ANSI_ARGS_((Tcl_Interp * interp, 
				Tk_Window tkwin, CONST char * string));
d483 2
a484 2
EXTERN int		TkpWindowWasRecentlyDeleted _ANSI_ARGS_((Window win, 
				TkDisplay * dispPtr));
d489 2
a490 2
EXTERN void		TkQueueEventForAllChildren _ANSI_ARGS_((
				TkWindow * winPtr, XEvent * eventPtr));
d495 2
a496 2
EXTERN int		TkReadBitmapFile _ANSI_ARGS_((Display * display, 
				Drawable d, CONST char * filename, 
d500 1
a500 1
				int * y_hot_return));
d505 3
a507 3
EXTERN int		TkScrollWindow _ANSI_ARGS_((Tk_Window tkwin, GC gc, 
				int x, int y, int width, int height, int dx, 
				int dy, TkRegion damageRgn));
d512 1
a512 1
EXTERN void		TkSelDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d517 1
a517 2
EXTERN void		TkSelEventProc _ANSI_ARGS_((Tk_Window tkwin, 
				XEvent * eventPtr));
d522 1
a522 1
EXTERN void		TkSelInit _ANSI_ARGS_((Tk_Window tkwin));
d527 1
a527 1
EXTERN void		TkSelPropProc _ANSI_ARGS_((XEvent * eventPtr));
d533 1
a533 1
EXTERN void		TkSetWindowMenuBar _ANSI_ARGS_((Tcl_Interp * interp, 
d535 1
a535 1
				char * menuName));
d540 1
a540 1
EXTERN KeySym		TkStringToKeysym _ANSI_ARGS_((char * name));
d545 1
a545 1
EXTERN int		TkThickPolyLineToArea _ANSI_ARGS_((double * coordPtr, 
d547 1
a547 1
				int joinStyle, double * rectPtr));
d552 1
a552 2
EXTERN void		TkWmAddToColormapWindows _ANSI_ARGS_((
				TkWindow * winPtr));
d557 1
a557 1
EXTERN void		TkWmDeadWindow _ANSI_ARGS_((TkWindow * winPtr));
d562 1
a562 1
EXTERN TkWindow *	TkWmFocusToplevel _ANSI_ARGS_((TkWindow * winPtr));
d567 1
a567 1
EXTERN void		TkWmMapWindow _ANSI_ARGS_((TkWindow * winPtr));
d572 1
a572 1
EXTERN void		TkWmNewWindow _ANSI_ARGS_((TkWindow * winPtr));
d577 2
a578 2
EXTERN void		TkWmProtocolEventProc _ANSI_ARGS_((TkWindow * winPtr, 
				XEvent * evenvPtr));
d583 1
a583 2
EXTERN void		TkWmRemoveFromColormapWindows _ANSI_ARGS_((
				TkWindow * winPtr));
d588 2
a589 2
EXTERN void		TkWmRestackToplevel _ANSI_ARGS_((TkWindow * winPtr, 
				int aboveBelow, TkWindow * otherPtr));
d594 1
a594 1
EXTERN void		TkWmSetClass _ANSI_ARGS_((TkWindow * winPtr));
d599 1
a599 1
EXTERN void		TkWmUnmapWindow _ANSI_ARGS_((TkWindow * winPtr));
d604 1
a604 2
EXTERN Tcl_Obj *	TkDebugBitmap _ANSI_ARGS_((Tk_Window tkwin, 
				char * name));
d609 1
a609 2
EXTERN Tcl_Obj *	TkDebugBorder _ANSI_ARGS_((Tk_Window tkwin, 
				char * name));
d614 1
a614 2
EXTERN Tcl_Obj *	TkDebugCursor _ANSI_ARGS_((Tk_Window tkwin, 
				char * name));
d619 1
a619 2
EXTERN Tcl_Obj *	TkDebugColor _ANSI_ARGS_((Tk_Window tkwin, 
				char * name));
d624 2
a625 2
EXTERN Tcl_Obj *	TkDebugConfig _ANSI_ARGS_((Tcl_Interp * interp, 
				Tk_OptionTable table));
d630 1
a630 2
EXTERN Tcl_Obj *	TkDebugFont _ANSI_ARGS_((Tk_Window tkwin, 
				char * name));
d635 1
a635 1
EXTERN int		TkFindStateNumObj _ANSI_ARGS_((Tcl_Interp * interp, 
d637 1
a637 1
				CONST TkStateMap * mapPtr, Tcl_Obj * keyPtr));
d642 1
a642 1
EXTERN Tcl_HashTable *	TkGetBitmapPredefTable _ANSI_ARGS_((void));
d647 1
a647 1
EXTERN TkDisplay *	TkGetDisplayList _ANSI_ARGS_((void));
d652 1
a652 1
EXTERN TkMainInfo *	TkGetMainInfoList _ANSI_ARGS_((void));
d657 1
a657 1
EXTERN int		TkGetWindowFromObj _ANSI_ARGS_((Tcl_Interp * interp, 
d659 1
a659 1
				Tk_Window * windowPtr));
d664 2
a665 2
EXTERN char *		TkpGetString _ANSI_ARGS_((TkWindow * winPtr, 
				XEvent * eventPtr, Tcl_DString * dsPtr));
d670 1
a670 2
EXTERN void		TkpGetSubFonts _ANSI_ARGS_((Tcl_Interp * interp, 
				Tk_Font tkfont));
d675 2
a676 2
EXTERN Tcl_Obj *	TkpGetSystemDefault _ANSI_ARGS_((Tk_Window tkwin, 
				CONST char * dbName, CONST char * className));
d681 1
a681 1
EXTERN void		TkpMenuThreadInit _ANSI_ARGS_((void));
d687 1
a687 2
EXTERN void		TkClipBox _ANSI_ARGS_((TkRegion rgn, 
				XRectangle * rect_return));
d694 1
a694 2
EXTERN void		TkClipBox _ANSI_ARGS_((TkRegion rgn, 
				XRectangle * rect_return));
d701 1
a701 1
EXTERN TkRegion		TkCreateRegion _ANSI_ARGS_((void));
d708 1
a708 1
EXTERN TkRegion		TkCreateRegion _ANSI_ARGS_((void));
d715 1
a715 1
EXTERN void		TkDestroyRegion _ANSI_ARGS_((TkRegion rgn));
d722 1
a722 1
EXTERN void		TkDestroyRegion _ANSI_ARGS_((TkRegion rgn));
d729 2
a730 2
EXTERN void		TkIntersectRegion _ANSI_ARGS_((TkRegion sra, 
				TkRegion srcb, TkRegion dr_return));
d737 2
a738 2
EXTERN void		TkIntersectRegion _ANSI_ARGS_((TkRegion sra, 
				TkRegion srcb, TkRegion dr_return));
d745 2
a746 3
EXTERN int		TkRectInRegion _ANSI_ARGS_((TkRegion rgn, int x, 
				int y, unsigned int width, 
				unsigned int height));
d753 2
a754 3
EXTERN int		TkRectInRegion _ANSI_ARGS_((TkRegion rgn, int x, 
				int y, unsigned int width, 
				unsigned int height));
d761 1
a761 2
EXTERN void		TkSetRegion _ANSI_ARGS_((Display * display, GC gc, 
				TkRegion rgn));
d768 1
a768 2
EXTERN void		TkSetRegion _ANSI_ARGS_((Display * display, GC gc, 
				TkRegion rgn));
d775 2
a776 2
EXTERN void		TkUnionRectWithRegion _ANSI_ARGS_((XRectangle * rect, 
				TkRegion src, TkRegion dr_return));
d783 2
a784 2
EXTERN void		TkUnionRectWithRegion _ANSI_ARGS_((XRectangle * rect, 
				TkRegion src, TkRegion dr_return));
d792 2
a793 2
EXTERN Pixmap		TkpCreateNativeBitmap _ANSI_ARGS_((Display * display, 
				CONST char * source));
d800 1
a800 1
EXTERN void		TkpDefineNativeBitmaps _ANSI_ARGS_((void));
d808 2
a809 2
EXTERN Pixmap		TkpGetNativeAppBitmap _ANSI_ARGS_((Display * display, 
				CONST char * name, int * width, int * height));
d825 3
a827 3
EXTERN void		TkpDrawHighlightBorder _ANSI_ARGS_((Tk_Window tkwin, 
				GC fgGC, GC bgGC, int highlightWidth, 
				Drawable drawable));
d832 1
a832 2
EXTERN void		TkSetFocusWin _ANSI_ARGS_((TkWindow * winPtr, 
				int force));
d837 2
a838 2
EXTERN void		TkpSetKeycodeAndState _ANSI_ARGS_((Tk_Window tkwin, 
				KeySym keySym, XEvent * eventPtr));
d843 1
a843 2
EXTERN KeySym		TkpGetKeySym _ANSI_ARGS_((TkDisplay * dispPtr, 
				XEvent * eventPtr));
d848 1
a848 1
EXTERN void		TkpInitKeymapInfo _ANSI_ARGS_((TkDisplay * dispPtr));
d853 1
a853 2
EXTERN TkRegion		TkPhotoGetValidRegion _ANSI_ARGS_((
				Tk_PhotoHandle handle));
d858 1
a858 2
EXTERN TkWindow **	TkWmStackorderToplevel _ANSI_ARGS_((
				TkWindow * parentPtr));
d863 1
a863 1
EXTERN void		TkFocusFree _ANSI_ARGS_((TkMainInfo * mainPtr));
d868 1
a868 1
EXTERN void		TkClipCleanup _ANSI_ARGS_((TkDisplay * dispPtr));
d873 1
a873 1
EXTERN void		TkGCCleanup _ANSI_ARGS_((TkDisplay * dispPtr));
d879 2
a880 2
EXTERN void		TkSubtractRegion _ANSI_ARGS_((TkRegion sra, 
				TkRegion srcb, TkRegion dr_return));
d887 2
a888 2
EXTERN void		TkSubtractRegion _ANSI_ARGS_((TkRegion sra, 
				TkRegion srcb, TkRegion dr_return));
d894 1
a894 1
EXTERN void		TkStylePkgInit _ANSI_ARGS_((TkMainInfo * mainPtr));
d899 1
a899 1
EXTERN void		TkStylePkgFree _ANSI_ARGS_((TkMainInfo * mainPtr));
d904 2
a905 2
EXTERN Tk_Window	TkToplevelWindowForCommand _ANSI_ARGS_((
				Tcl_Interp * interp, CONST char * cmdName));
d910 2
a911 2
EXTERN CONST Tk_OptionSpec * TkGetOptionSpec _ANSI_ARGS_((CONST char * name, 
				Tk_OptionTable optionTable));
d916 3
a918 4
EXTERN int		TkMakeRawCurve _ANSI_ARGS_((Tk_Canvas canvas, 
				double * pointPtr, int numPoints, 
				int numSteps, XPoint xPoints[], 
				double dblPoints[]));
d923 3
a925 3
EXTERN void		TkMakeRawCurvePostscript _ANSI_ARGS_((
				Tcl_Interp * interp, Tk_Canvas canvas, 
				double * pointPtr, int numPoints));
d930 3
a932 3
EXTERN void		TkpDrawFrame _ANSI_ARGS_((Tk_Window tkwin, 
				Tk_3DBorder border, int highlightWidth, 
				int borderWidth, int relief));
d937 2
a938 2
EXTERN void		TkCreateThreadExitHandler _ANSI_ARGS_((
				Tcl_ExitProc * proc, ClientData clientData));
d943 2
a944 2
EXTERN void		TkDeleteThreadExitHandler _ANSI_ARGS_((
				Tcl_ExitProc * proc, ClientData clientData));
d950 1
a950 1
EXTERN int		TkpTestembedCmd _ANSI_ARGS_((ClientData clientData, 
d952 1
a952 1
				CONST char ** argv));
d957 1
a957 1
EXTERN int		TkpTesttextCmd _ANSI_ARGS_((ClientData dummy, 
d959 1
a959 1
				CONST char ** argv));
d966 84
a1049 84
    TkWindow * (*tkAllocWindow) _ANSI_ARGS_((TkDisplay * dispPtr, int screenNum, TkWindow * parentPtr)); /* 0 */
    void (*tkBezierPoints) _ANSI_ARGS_((double control[], int numSteps, double * coordPtr)); /* 1 */
    void (*tkBezierScreenPoints) _ANSI_ARGS_((Tk_Canvas canvas, double control[], int numSteps, XPoint * xPointPtr)); /* 2 */
    void (*tkBindDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 3 */
    void (*tkBindEventProc) _ANSI_ARGS_((TkWindow * winPtr, XEvent * eventPtr)); /* 4 */
    void (*tkBindFree) _ANSI_ARGS_((TkMainInfo * mainPtr)); /* 5 */
    void (*tkBindInit) _ANSI_ARGS_((TkMainInfo * mainPtr)); /* 6 */
    void (*tkChangeEventWindow) _ANSI_ARGS_((XEvent * eventPtr, TkWindow * winPtr)); /* 7 */
    int (*tkClipInit) _ANSI_ARGS_((Tcl_Interp * interp, TkDisplay * dispPtr)); /* 8 */
    void (*tkComputeAnchor) _ANSI_ARGS_((Tk_Anchor anchor, Tk_Window tkwin, int padX, int padY, int innerWidth, int innerHeight, int * xPtr, int * yPtr)); /* 9 */
    int (*tkCopyAndGlobalEval) _ANSI_ARGS_((Tcl_Interp * interp, char * script)); /* 10 */
    unsigned long (*tkCreateBindingProcedure) _ANSI_ARGS_((Tcl_Interp * interp, Tk_BindingTable bindingTable, ClientData object, CONST char * eventString, TkBindEvalProc * evalProc, TkBindFreeProc * freeProc, ClientData clientData)); /* 11 */
    TkCursor * (*tkCreateCursorFromData) _ANSI_ARGS_((Tk_Window tkwin, CONST char * source, CONST char * mask, int width, int height, int xHot, int yHot, XColor fg, XColor bg)); /* 12 */
    int (*tkCreateFrame) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int argc, char ** argv, int toplevel, char * appName)); /* 13 */
    Tk_Window (*tkCreateMainWindow) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * screenName, char * baseName)); /* 14 */
    Time (*tkCurrentTime) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 15 */
    void (*tkDeleteAllImages) _ANSI_ARGS_((TkMainInfo * mainPtr)); /* 16 */
    void (*tkDoConfigureNotify) _ANSI_ARGS_((TkWindow * winPtr)); /* 17 */
    void (*tkDrawInsetFocusHighlight) _ANSI_ARGS_((Tk_Window tkwin, GC gc, int width, Drawable drawable, int padding)); /* 18 */
    void (*tkEventDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 19 */
    void (*tkFillPolygon) _ANSI_ARGS_((Tk_Canvas canvas, double * coordPtr, int numPoints, Display * display, Drawable drawable, GC gc, GC outlineGC)); /* 20 */
    int (*tkFindStateNum) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * option, CONST TkStateMap * mapPtr, CONST char * strKey)); /* 21 */
    char * (*tkFindStateString) _ANSI_ARGS_((CONST TkStateMap * mapPtr, int numKey)); /* 22 */
    void (*tkFocusDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 23 */
    int (*tkFocusFilterEvent) _ANSI_ARGS_((TkWindow * winPtr, XEvent * eventPtr)); /* 24 */
    TkWindow * (*tkFocusKeyEvent) _ANSI_ARGS_((TkWindow * winPtr, XEvent * eventPtr)); /* 25 */
    void (*tkFontPkgInit) _ANSI_ARGS_((TkMainInfo * mainPtr)); /* 26 */
    void (*tkFontPkgFree) _ANSI_ARGS_((TkMainInfo * mainPtr)); /* 27 */
    void (*tkFreeBindingTags) _ANSI_ARGS_((TkWindow * winPtr)); /* 28 */
    void (*tkpFreeCursor) _ANSI_ARGS_((TkCursor * cursorPtr)); /* 29 */
    char * (*tkGetBitmapData) _ANSI_ARGS_((Tcl_Interp * interp, char * string, char * fileName, int * widthPtr, int * heightPtr, int * hotXPtr, int * hotYPtr)); /* 30 */
    void (*tkGetButtPoints) _ANSI_ARGS_((double p1[], double p2[], double width, int project, double m1[], double m2[])); /* 31 */
    TkCursor * (*tkGetCursorByName) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Window tkwin, Tk_Uid string)); /* 32 */
    CONST84_RETURN char * (*tkGetDefaultScreenName) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * screenName)); /* 33 */
    TkDisplay * (*tkGetDisplay) _ANSI_ARGS_((Display * display)); /* 34 */
    int (*tkGetDisplayOf) _ANSI_ARGS_((Tcl_Interp * interp, int objc, Tcl_Obj *CONST objv[], Tk_Window * tkwinPtr)); /* 35 */
    TkWindow * (*tkGetFocusWin) _ANSI_ARGS_((TkWindow * winPtr)); /* 36 */
    int (*tkGetInterpNames) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Window tkwin)); /* 37 */
    int (*tkGetMiterPoints) _ANSI_ARGS_((double p1[], double p2[], double p3[], double width, double m1[], double m2[])); /* 38 */
    void (*tkGetPointerCoords) _ANSI_ARGS_((Tk_Window tkwin, int * xPtr, int * yPtr)); /* 39 */
    void (*tkGetServerInfo) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Window tkwin)); /* 40 */
    void (*tkGrabDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 41 */
    int (*tkGrabState) _ANSI_ARGS_((TkWindow * winPtr)); /* 42 */
    void (*tkIncludePoint) _ANSI_ARGS_((Tk_Item * itemPtr, double * pointPtr)); /* 43 */
    void (*tkInOutEvents) _ANSI_ARGS_((XEvent * eventPtr, TkWindow * sourcePtr, TkWindow * destPtr, int leaveType, int enterType, Tcl_QueuePosition position)); /* 44 */
    void (*tkInstallFrameMenu) _ANSI_ARGS_((Tk_Window tkwin)); /* 45 */
    char * (*tkKeysymToString) _ANSI_ARGS_((KeySym keysym)); /* 46 */
    int (*tkLineToArea) _ANSI_ARGS_((double end1Ptr[], double end2Ptr[], double rectPtr[])); /* 47 */
    double (*tkLineToPoint) _ANSI_ARGS_((double end1Ptr[], double end2Ptr[], double pointPtr[])); /* 48 */
    int (*tkMakeBezierCurve) _ANSI_ARGS_((Tk_Canvas canvas, double * pointPtr, int numPoints, int numSteps, XPoint xPoints[], double dblPoints[])); /* 49 */
    void (*tkMakeBezierPostscript) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Canvas canvas, double * pointPtr, int numPoints)); /* 50 */
    void (*tkOptionClassChanged) _ANSI_ARGS_((TkWindow * winPtr)); /* 51 */
    void (*tkOptionDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 52 */
    int (*tkOvalToArea) _ANSI_ARGS_((double * ovalPtr, double * rectPtr)); /* 53 */
    double (*tkOvalToPoint) _ANSI_ARGS_((double ovalPtr[], double width, int filled, double pointPtr[])); /* 54 */
    int (*tkpChangeFocus) _ANSI_ARGS_((TkWindow * winPtr, int force)); /* 55 */
    void (*tkpCloseDisplay) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 56 */
    void (*tkpClaimFocus) _ANSI_ARGS_((TkWindow * topLevelPtr, int force)); /* 57 */
    void (*tkpDisplayWarning) _ANSI_ARGS_((CONST char * msg, CONST char * title)); /* 58 */
    void (*tkpGetAppName) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_DString * name)); /* 59 */
    TkWindow * (*tkpGetOtherWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 60 */
    TkWindow * (*tkpGetWrapperWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 61 */
    int (*tkpInit) _ANSI_ARGS_((Tcl_Interp * interp)); /* 62 */
    void (*tkpInitializeMenuBindings) _ANSI_ARGS_((Tcl_Interp * interp, Tk_BindingTable bindingTable)); /* 63 */
    void (*tkpMakeContainer) _ANSI_ARGS_((Tk_Window tkwin)); /* 64 */
    void (*tkpMakeMenuWindow) _ANSI_ARGS_((Tk_Window tkwin, int transient)); /* 65 */
    Window (*tkpMakeWindow) _ANSI_ARGS_((TkWindow * winPtr, Window parent)); /* 66 */
    void (*tkpMenuNotifyToplevelCreate) _ANSI_ARGS_((Tcl_Interp * interp1, char * menuName)); /* 67 */
    TkDisplay * (*tkpOpenDisplay) _ANSI_ARGS_((CONST char * display_name)); /* 68 */
    int (*tkPointerEvent) _ANSI_ARGS_((XEvent * eventPtr, TkWindow * winPtr)); /* 69 */
    int (*tkPolygonToArea) _ANSI_ARGS_((double * polyPtr, int numPoints, double * rectPtr)); /* 70 */
    double (*tkPolygonToPoint) _ANSI_ARGS_((double * polyPtr, int numPoints, double * pointPtr)); /* 71 */
    int (*tkPositionInTree) _ANSI_ARGS_((TkWindow * winPtr, TkWindow * treePtr)); /* 72 */
    void (*tkpRedirectKeyEvent) _ANSI_ARGS_((TkWindow * winPtr, XEvent * eventPtr)); /* 73 */
    void (*tkpSetMainMenubar) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Window tkwin, char * menuName)); /* 74 */
    int (*tkpUseWindow) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Window tkwin, CONST char * string)); /* 75 */
    int (*tkpWindowWasRecentlyDeleted) _ANSI_ARGS_((Window win, TkDisplay * dispPtr)); /* 76 */
    void (*tkQueueEventForAllChildren) _ANSI_ARGS_((TkWindow * winPtr, XEvent * eventPtr)); /* 77 */
    int (*tkReadBitmapFile) _ANSI_ARGS_((Display * display, Drawable d, CONST char * filename, unsigned int * width_return, unsigned int * height_return, Pixmap * bitmap_return, int * x_hot_return, int * y_hot_return)); /* 78 */
    int (*tkScrollWindow) _ANSI_ARGS_((Tk_Window tkwin, GC gc, int x, int y, int width, int height, int dx, int dy, TkRegion damageRgn)); /* 79 */
    void (*tkSelDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 80 */
    void (*tkSelEventProc) _ANSI_ARGS_((Tk_Window tkwin, XEvent * eventPtr)); /* 81 */
    void (*tkSelInit) _ANSI_ARGS_((Tk_Window tkwin)); /* 82 */
    void (*tkSelPropProc) _ANSI_ARGS_((XEvent * eventPtr)); /* 83 */
d1051 28
a1078 28
    void (*tkSetWindowMenuBar) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Window tkwin, char * oldMenuName, char * menuName)); /* 85 */
    KeySym (*tkStringToKeysym) _ANSI_ARGS_((char * name)); /* 86 */
    int (*tkThickPolyLineToArea) _ANSI_ARGS_((double * coordPtr, int numPoints, double width, int capStyle, int joinStyle, double * rectPtr)); /* 87 */
    void (*tkWmAddToColormapWindows) _ANSI_ARGS_((TkWindow * winPtr)); /* 88 */
    void (*tkWmDeadWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 89 */
    TkWindow * (*tkWmFocusToplevel) _ANSI_ARGS_((TkWindow * winPtr)); /* 90 */
    void (*tkWmMapWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 91 */
    void (*tkWmNewWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 92 */
    void (*tkWmProtocolEventProc) _ANSI_ARGS_((TkWindow * winPtr, XEvent * evenvPtr)); /* 93 */
    void (*tkWmRemoveFromColormapWindows) _ANSI_ARGS_((TkWindow * winPtr)); /* 94 */
    void (*tkWmRestackToplevel) _ANSI_ARGS_((TkWindow * winPtr, int aboveBelow, TkWindow * otherPtr)); /* 95 */
    void (*tkWmSetClass) _ANSI_ARGS_((TkWindow * winPtr)); /* 96 */
    void (*tkWmUnmapWindow) _ANSI_ARGS_((TkWindow * winPtr)); /* 97 */
    Tcl_Obj * (*tkDebugBitmap) _ANSI_ARGS_((Tk_Window tkwin, char * name)); /* 98 */
    Tcl_Obj * (*tkDebugBorder) _ANSI_ARGS_((Tk_Window tkwin, char * name)); /* 99 */
    Tcl_Obj * (*tkDebugCursor) _ANSI_ARGS_((Tk_Window tkwin, char * name)); /* 100 */
    Tcl_Obj * (*tkDebugColor) _ANSI_ARGS_((Tk_Window tkwin, char * name)); /* 101 */
    Tcl_Obj * (*tkDebugConfig) _ANSI_ARGS_((Tcl_Interp * interp, Tk_OptionTable table)); /* 102 */
    Tcl_Obj * (*tkDebugFont) _ANSI_ARGS_((Tk_Window tkwin, char * name)); /* 103 */
    int (*tkFindStateNumObj) _ANSI_ARGS_((Tcl_Interp * interp, Tcl_Obj * optionPtr, CONST TkStateMap * mapPtr, Tcl_Obj * keyPtr)); /* 104 */
    Tcl_HashTable * (*tkGetBitmapPredefTable) _ANSI_ARGS_((void)); /* 105 */
    TkDisplay * (*tkGetDisplayList) _ANSI_ARGS_((void)); /* 106 */
    TkMainInfo * (*tkGetMainInfoList) _ANSI_ARGS_((void)); /* 107 */
    int (*tkGetWindowFromObj) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Window tkwin, Tcl_Obj * objPtr, Tk_Window * windowPtr)); /* 108 */
    char * (*tkpGetString) _ANSI_ARGS_((TkWindow * winPtr, XEvent * eventPtr, Tcl_DString * dsPtr)); /* 109 */
    void (*tkpGetSubFonts) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Font tkfont)); /* 110 */
    Tcl_Obj * (*tkpGetSystemDefault) _ANSI_ARGS_((Tk_Window tkwin, CONST char * dbName, CONST char * className)); /* 111 */
    void (*tkpMenuThreadInit) _ANSI_ARGS_((void)); /* 112 */
d1083 1
a1083 1
    void (*tkClipBox) _ANSI_ARGS_((TkRegion rgn, XRectangle * rect_return)); /* 113 */
d1086 1
a1086 1
    void (*tkClipBox) _ANSI_ARGS_((TkRegion rgn, XRectangle * rect_return)); /* 113 */
d1092 1
a1092 1
    TkRegion (*tkCreateRegion) _ANSI_ARGS_((void)); /* 114 */
d1095 1
a1095 1
    TkRegion (*tkCreateRegion) _ANSI_ARGS_((void)); /* 114 */
d1101 1
a1101 1
    void (*tkDestroyRegion) _ANSI_ARGS_((TkRegion rgn)); /* 115 */
d1104 1
a1104 1
    void (*tkDestroyRegion) _ANSI_ARGS_((TkRegion rgn)); /* 115 */
d1110 1
a1110 1
    void (*tkIntersectRegion) _ANSI_ARGS_((TkRegion sra, TkRegion srcb, TkRegion dr_return)); /* 116 */
d1113 1
a1113 1
    void (*tkIntersectRegion) _ANSI_ARGS_((TkRegion sra, TkRegion srcb, TkRegion dr_return)); /* 116 */
d1119 1
a1119 1
    int (*tkRectInRegion) _ANSI_ARGS_((TkRegion rgn, int x, int y, unsigned int width, unsigned int height)); /* 117 */
d1122 1
a1122 1
    int (*tkRectInRegion) _ANSI_ARGS_((TkRegion rgn, int x, int y, unsigned int width, unsigned int height)); /* 117 */
d1128 1
a1128 1
    void (*tkSetRegion) _ANSI_ARGS_((Display * display, GC gc, TkRegion rgn)); /* 118 */
d1131 1
a1131 1
    void (*tkSetRegion) _ANSI_ARGS_((Display * display, GC gc, TkRegion rgn)); /* 118 */
d1137 1
a1137 1
    void (*tkUnionRectWithRegion) _ANSI_ARGS_((XRectangle * rect, TkRegion src, TkRegion dr_return)); /* 119 */
d1140 1
a1140 1
    void (*tkUnionRectWithRegion) _ANSI_ARGS_((XRectangle * rect, TkRegion src, TkRegion dr_return)); /* 119 */
d1150 1
a1150 1
    Pixmap (*tkpCreateNativeBitmap) _ANSI_ARGS_((Display * display, CONST char * source)); /* 121 */
d1159 1
a1159 1
    void (*tkpDefineNativeBitmaps) _ANSI_ARGS_((void)); /* 122 */
d1169 1
a1169 1
    Pixmap (*tkpGetNativeAppBitmap) _ANSI_ARGS_((Display * display, CONST char * name, int * width, int * height)); /* 124 */
d1181 10
a1190 10
    void (*tkpDrawHighlightBorder) _ANSI_ARGS_((Tk_Window tkwin, GC fgGC, GC bgGC, int highlightWidth, Drawable drawable)); /* 135 */
    void (*tkSetFocusWin) _ANSI_ARGS_((TkWindow * winPtr, int force)); /* 136 */
    void (*tkpSetKeycodeAndState) _ANSI_ARGS_((Tk_Window tkwin, KeySym keySym, XEvent * eventPtr)); /* 137 */
    KeySym (*tkpGetKeySym) _ANSI_ARGS_((TkDisplay * dispPtr, XEvent * eventPtr)); /* 138 */
    void (*tkpInitKeymapInfo) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 139 */
    TkRegion (*tkPhotoGetValidRegion) _ANSI_ARGS_((Tk_PhotoHandle handle)); /* 140 */
    TkWindow ** (*tkWmStackorderToplevel) _ANSI_ARGS_((TkWindow * parentPtr)); /* 141 */
    void (*tkFocusFree) _ANSI_ARGS_((TkMainInfo * mainPtr)); /* 142 */
    void (*tkClipCleanup) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 143 */
    void (*tkGCCleanup) _ANSI_ARGS_((TkDisplay * dispPtr)); /* 144 */
d1195 1
a1195 1
    void (*tkSubtractRegion) _ANSI_ARGS_((TkRegion sra, TkRegion srcb, TkRegion dr_return)); /* 145 */
d1198 1
a1198 1
    void (*tkSubtractRegion) _ANSI_ARGS_((TkRegion sra, TkRegion srcb, TkRegion dr_return)); /* 145 */
d1200 9
a1208 9
    void (*tkStylePkgInit) _ANSI_ARGS_((TkMainInfo * mainPtr)); /* 146 */
    void (*tkStylePkgFree) _ANSI_ARGS_((TkMainInfo * mainPtr)); /* 147 */
    Tk_Window (*tkToplevelWindowForCommand) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * cmdName)); /* 148 */
    CONST Tk_OptionSpec * (*tkGetOptionSpec) _ANSI_ARGS_((CONST char * name, Tk_OptionTable optionTable)); /* 149 */
    int (*tkMakeRawCurve) _ANSI_ARGS_((Tk_Canvas canvas, double * pointPtr, int numPoints, int numSteps, XPoint xPoints[], double dblPoints[])); /* 150 */
    void (*tkMakeRawCurvePostscript) _ANSI_ARGS_((Tcl_Interp * interp, Tk_Canvas canvas, double * pointPtr, int numPoints)); /* 151 */
    void (*tkpDrawFrame) _ANSI_ARGS_((Tk_Window tkwin, Tk_3DBorder border, int highlightWidth, int borderWidth, int relief)); /* 152 */
    void (*tkCreateThreadExitHandler) _ANSI_ARGS_((Tcl_ExitProc * proc, ClientData clientData)); /* 153 */
    void (*tkDeleteThreadExitHandler) _ANSI_ARGS_((Tcl_ExitProc * proc, ClientData clientData)); /* 154 */
d1210 2
a1211 2
    int (*tkpTestembedCmd) _ANSI_ARGS_((ClientData clientData, Tcl_Interp * interp, int argc, CONST char ** argv)); /* 156 */
    int (*tkpTesttextCmd) _ANSI_ARGS_((ClientData dummy, Tcl_Interp * interp, int argc, CONST char ** argv)); /* 157 */
@

