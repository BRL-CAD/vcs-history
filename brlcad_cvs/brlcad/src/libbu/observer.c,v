head	14.17;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.8
	rel-7-10-2:14.16
	rel-7-10-0:14.16
	rel-7-8-4:14.13
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.17
date	2007.09.15.16.23.09;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.21.04.45.42;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.09.03.15.14.07;	author lbutler;	state Exp;
branches;
next	14.12;

14.12
date	2006.08.31.23.16.38;	author lbutler;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.29.23;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.01.30.20.30.46;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.25.29;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.42;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.32;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.21;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.49.00;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.14;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.28.50;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.34;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                      O B S E R V E R . C
 * BRL-CAD
 *
 * Copyright (c) 1997-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup butcl */
/** @@{ */
/** @@file observer.c
 *
 * @@brief
 * Routines for implementing the observer pattern.
 *
 * @@par Source
 *	SLAD CAD Team
 * @@n	The U. S. Army Research Laboratory
 * @@n	Aberdeen Proving Ground, Maryland  21005
 *
 * @@author
 *	Robert G. Parker
 */

#include "common.h"

#include <string.h>

#include "tcl.h"
#include "machine.h"
#include "cmd.h"                  /* includes bu.h */

static int bu_observer_attach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int bu_observer_detach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int bu_observer_show_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);

struct bu_cmdtab bu_observer_cmds[] = {
	{"attach",	bu_observer_attach_tcl},
	{"detach",	bu_observer_detach_tcl},
	{"show",	bu_observer_show_tcl},
	{(char *)0,	(int (*)())0}
};

/**
 * Attach observer.
 *
 * Usage:
 *	  attach observer [cmd]
 *
 */
static int
bu_observer_attach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_observer *headp = (struct bu_observer *)clientData;
	struct bu_observer *op;

	if (argc < 2 || 3 < argc) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib bu_observer_attach");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	/* see if it already exists, if so, modify it */
	for (BU_LIST_FOR(op, bu_observer, &headp->l))
		if (strcmp(bu_vls_addr(&op->observer), argv[1]) == 0) {
			if (argc == 2)
				/* clobber cmd */
				bu_vls_init(&op->cmd);
			else
				/* overwrite cmd */
				bu_vls_strcpy(&op->cmd, argv[2]);

			return TCL_OK;
		}

	/* acquire bu_observer struct */
	BU_GETSTRUCT(op, bu_observer);

	/* initialize observer */
	bu_vls_init(&op->observer);
	bu_vls_strcpy(&op->observer, argv[1]);
	bu_vls_init(&op->cmd);

	if (argc == 3)
		bu_vls_strcpy(&op->cmd, argv[2]);

	/* append to list of bu_observer's */
	BU_LIST_APPEND(&headp->l, &op->l);

	return TCL_OK;
}

/**
 * Detach observer.
 *
 * Usage:
 *	  detach observer
 *
 */
static int
bu_observer_detach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_observer *headp = (struct bu_observer *)clientData;
	struct bu_observer *op;

	if (argc != 2) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib bu_observer_attach");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	/* search for observer and remove from list */
	for (BU_LIST_FOR(op, bu_observer, &headp->l))
		if (strcmp(bu_vls_addr(&op->observer), argv[1]) == 0) {
			BU_LIST_DEQUEUE(&op->l);
			bu_vls_free(&op->observer);
			bu_vls_free(&op->cmd);
			bu_free((genptr_t)op, "bu_observer_detach_tcl: op");

			return TCL_OK;
		}

	Tcl_AppendResult(interp, "detach: ", argv[1], " not found", (char *)NULL);
	return TCL_ERROR;
}

/**
 * Show/list observers.
 *
 * Usage:
 *	  show
 *
 */
static int
bu_observer_show_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_observer *headp = (struct bu_observer *)clientData;
	struct bu_observer *op;

	for (BU_LIST_FOR(op, bu_observer, &headp->l)) {
		Tcl_AppendResult(interp, bu_vls_addr(&op->observer), " - ",
				 bu_vls_addr(&op->cmd), "\n", (char *)NULL);
	}

	return TCL_OK;
}

/**
 * Notify observers.
 */
void
bu_observer_notify(Tcl_Interp *interp, struct bu_observer *headp, char *this)
{
	struct bu_observer *op;
	struct bu_vls vls;

	bu_vls_init(&vls);
	for (BU_LIST_FOR(op, bu_observer, &headp->l)) {
		if (bu_vls_strlen(&op->cmd) > 0) {
			/* Execute cmd */
			bu_vls_strcpy(&vls, bu_vls_addr(&op->cmd));
			Tcl_Eval(interp, bu_vls_addr(&vls));
		} else {
			/* Assume that observer is some object that has an update method */
			bu_vls_trunc(&vls, 0);
			bu_vls_printf(&vls, "%s update %s", bu_vls_addr(&op->observer), this);
			Tcl_Eval(interp, bu_vls_addr(&vls));
		}
	}
	bu_vls_free(&vls);
}

/**
 * Free observers.
 */
void
bu_observer_free(struct bu_observer *headp)
{
	struct bu_observer *op;
	struct bu_observer *nop;

	op = BU_LIST_FIRST(bu_observer, &headp->l);
	while (BU_LIST_NOT_HEAD(op, &headp->l)) {
		nop = BU_LIST_PNEXT(bu_observer, op);
		BU_LIST_DEQUEUE(&op->l);
		bu_vls_free(&op->observer);
		bu_vls_free(&op->cmd);
		bu_free((genptr_t)op, "bu_observer_free: op");
		op = nop;
	}
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.16
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a35 1

a37 2

#ifdef HAVE_STRING_H
a38 1
#endif
@


14.15
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.14
log
@update copyright to 2007
@
text
@d21 2
a22 4

/** \addtogroup butcl */
/*@@{*/

d24 3
a26 1
 * @@brief Routines for implementing the observer pattern.
d217 1
a217 1
/*@@}*/
@


14.13
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 1997-2006 United States Government as represented by
@


14.12
log
@Doxygen comments
@
text
@d26 1
a26 1
 * Routines for implementing the observer pattern.
@


14.11
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup libbu */
d28 1
a28 1
 * Source -
d30 2
a31 2
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
d33 1
a33 1
 * Author -
d36 1
a36 1
/*@@}*/
d60 1
a60 1
/*
d113 1
a113 1
/*
d151 1
a151 1
/*
d172 1
a172 1
/*
d197 1
a197 1
/*
d217 1
@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1997-2005 United States Government as represented by
@


14.9
log
@Doxygen changes
@
text
@d27 1
a27 1
 * 
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d27 1
a27 1
 *
@


14.8
log
@update copyright to 2005
@
text
@d21 4
a25 1
 *
d36 1
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1997-2004 United States Government as represented by
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a31 2
 *
 *
@


14.5
log
@remove the old distribution notice section
@
text
@a33 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1997-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *				O B S E R V E R . C
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d202 10
@


1.2
log
@poof goes the silly externs.h
@
text
@d24 1
a24 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a34 1
#include "externs.h"
@

