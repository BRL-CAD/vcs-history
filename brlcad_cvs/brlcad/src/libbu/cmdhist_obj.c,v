head	14.16;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	stable-branch:14.8
	rel-7-10-2:14.15
	rel-7-10-0:14.15
	rel-7-8-4:14.12
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.4
	rel-7-6-0:14.9
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.2
	bobWinPort:14.9.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.8
	rel-7-0-4:14.7
	rel-7-0-2:14.7
	rel-7-0-1:14.7
	opensource-post:14.7
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@ * @;


14.16
date	2007.09.15.16.23.08;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.08.31.05.50.24;	author lbutler;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.08.12.22.29.23;	author lbutler;	state Exp;
branches
	14.9.4.1;
next	14.8;

14.8
date	2005.01.30.20.30.45;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2004.12.21.07.25.29;	author morrison;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.42;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.32;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.49.00;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.28.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.31;	author morrison;	state Exp;
branches;
next	;

14.9.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.16
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                   C M D H I S T _ O B J . C
 * BRL-CAD
 *
 * Copyright (c) 1998-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup butcl */
/** @@{ */
/** @@file cmdhist_obj.c
 *
 * A cmdhist object contains the attributes and
 * methods for maintaining command history.
 *
 *  @@author
 *	  Robert G. Parker
 *
 *  @@par Source -
 *	The U. S. Army Research Laboratory			@@n
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"

#include <string.h>

#include "tcl.h"

#include "machine.h"
#include "cmd.h"

/* bu_cmdhist routines are defined in libbu/cmdhist.c */
extern int bu_cmdhist_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
extern int bu_cmdhist_add(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
extern int bu_cmdhist_curr(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
extern int bu_cmdhist_next(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
extern int bu_cmdhist_prev(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);

int cho_open_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);

static struct bu_cmdhist_obj HeadCmdHistObj;		/* head of command history object list */

static struct bu_cmdtab ch_cmds[] =
{
	{"add",		bu_cmdhist_add},
	{"curr",	bu_cmdhist_curr},
	{"next",	bu_cmdhist_next},
	{"prev",	bu_cmdhist_prev},
	{(char *)NULL,	CMD_NULL}
};

/**
 *
 */
int
cho_hist(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	return bu_cmd(clientData, interp, argc, argv, ch_cmds, 1);
}


/**
 *
 */
static struct bu_cmdtab cho_cmds[] =
{
	{"add",		bu_cmdhist_add},
	{"curr",	bu_cmdhist_curr},
	{"history",	bu_cmdhist_history},
	{"next",	bu_cmdhist_next},
	{"prev",	bu_cmdhist_prev},
	{(char *)NULL,	CMD_NULL}
};


/**
 *
 */
static int
cho_cmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	return bu_cmd(clientData, interp, argc, argv, cho_cmds, 1);
}


/**
 *
 */
int
Cho_Init(Tcl_Interp *interp)
{
	BU_LIST_INIT(&HeadCmdHistObj.l);
	(void)Tcl_CreateCommand(interp, "ch_open", (Tcl_CmdProc *)cho_open_tcl,
				(ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);

	return TCL_OK;
}


/**
 *
 */
static void
cho_deleteProc(ClientData clientData)
{
	struct bu_cmdhist_obj *chop = (struct  bu_cmdhist_obj *)clientData;
	struct bu_cmdhist *curr, *next;

	/* free list of commands */
	curr = BU_LIST_NEXT(bu_cmdhist, &chop->cho_head.l);
	while(BU_LIST_NOT_HEAD(curr,&chop->cho_head.l)) {
		curr = BU_LIST_NEXT(bu_cmdhist, &chop->cho_head.l);
		next = BU_LIST_PNEXT(bu_cmdhist, curr);

		bu_vls_free(&curr->h_command);

		BU_LIST_DEQUEUE(&curr->l);
		bu_free((genptr_t)curr, "cho_deleteProc: curr");
		curr = next;
	}

	bu_vls_free(&chop->cho_name);
	bu_vls_free(&chop->cho_head.h_command);

	BU_LIST_DEQUEUE(&chop->l);
	bu_free((genptr_t)chop, "cho_deleteProc: chop");
}

#if 0			/* As far as I can tell, this is not used.  CTJ */
/*
 * Close a command history object.
 *
 * USAGE:
 *        procname close
 */
static int
cho_close_tcl(clientData, interp, argc, argv)
     ClientData      clientData;
     Tcl_Interp      *interp;
     int             argc;
     char            **argv;
{
	struct bu_cmdhist_obj *chop = (struct  bu_cmdhist_obj *)clientData;
	struct bu_vls vls;

	if (argc != 2) {
		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib cho_close");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	/* Among other things, this will call cho_deleteProc. */
	Tcl_DeleteCommand(interp, bu_vls_addr(&chop->cho_name));

	return TCL_OK;
}
#endif


/**
 *
 */
static struct bu_cmdhist_obj *
cho_open(ClientData clientData, Tcl_Interp *interp, char *name)
{
	struct bu_cmdhist_obj *chop;

	/* check to see if command history object exists */
	for (BU_LIST_FOR(chop, bu_cmdhist_obj, &HeadCmdHistObj.l)) {
		if (strcmp(name,bu_vls_addr(&chop->cho_name)) == 0) {
			Tcl_AppendResult(interp, "ch_open: ", name,
					 " exists.\n", (char *)NULL);
			return CMDHIST_OBJ_NULL;
		}
	}

	BU_GETSTRUCT(chop, bu_cmdhist_obj);
	bu_vls_init(&chop->cho_name);
	bu_vls_strcpy(&chop->cho_name, name);
	BU_LIST_INIT(&chop->cho_head.l);
	bu_vls_init(&chop->cho_head.h_command);
	chop->cho_head.h_start.tv_sec = chop->cho_head.h_start.tv_usec =
		chop->cho_head.h_finish.tv_sec = chop->cho_head.h_finish.tv_usec = 0L;
	chop->cho_head.h_status = TCL_OK;
	chop->cho_curr = &chop->cho_head;

	BU_LIST_APPEND(&HeadCmdHistObj.l, &chop->l);
	return chop;
}

/**
 * @@brief
 * Open a command history object.
 *
 * USAGE:
 *        ch_open name
 */
int
cho_open_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_cmdhist_obj *chop;
	struct bu_vls vls;

	if (argc == 1) {
		/* get list of command history objects */
		for (BU_LIST_FOR(chop, bu_cmdhist_obj, &HeadCmdHistObj.l))
			Tcl_AppendResult(interp, bu_vls_addr(&chop->cho_name), " ", (char *)NULL);

		return TCL_OK;
	}

	if (argc == 2) {
		if ((chop = cho_open(clientData, interp, argv[1])) == CMDHIST_OBJ_NULL)
			return TCL_ERROR;

		(void)Tcl_CreateCommand(interp,
					bu_vls_addr(&chop->cho_name),
					(Tcl_CmdProc *)cho_cmd,
					(ClientData)chop,
					cho_deleteProc);

		/* Return new function name as result */
		Tcl_ResetResult(interp);
		Tcl_AppendResult(interp, bu_vls_addr(&chop->cho_name), (char *)NULL);
		return TCL_OK;
	}

	bu_vls_init(&vls);
	bu_vls_printf(&vls, "helplib ch_open");
	Tcl_Eval(interp, bu_vls_addr(&vls));
	bu_vls_free(&vls);
	return TCL_ERROR;
}
/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a34 1

d37 1
d40 1
a40 3
#ifdef HAVE_STRING_H
#include <string.h>
#endif
@


14.14
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
@


14.13
log
@update copyright to 2007
@
text
@d21 2
a22 3

/** \addtogroup butcl */
/*@@{*/
a27 1
 *
a33 1
 *
d251 1
a251 1
/*@@}*/
@


14.12
log
@Mostly doxygen formatting.
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2006 United States Government as represented by
@


14.11
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup cmd */
d25 1
d30 1
a30 1
 *  Author -
d33 2
a34 2
 *  Source -
 *	The U. S. Army Research Laboratory
d38 1
a38 1
/*@@}*/
d70 3
d79 4
d93 4
d103 4
d117 4
d179 4
d211 2
a212 1
/*
d254 1
a254 1

@


14.10
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 1998-2005 United States Government as represented by
@


14.9
log
@Doxygen changes
@
text
@d35 1
a35 1
 *  
d60 1
a60 1
static struct bu_cmdtab ch_cmds[] = 
d75 1
a75 1
static struct bu_cmdtab cho_cmds[] = 
@


14.9.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d35 1
a35 1
 *
d60 1
a60 1
static struct bu_cmdtab ch_cmds[] =
d75 1
a75 1
static struct bu_cmdtab cho_cmds[] =
@


14.8
log
@update copyright to 2005
@
text
@d21 3
a24 2
 *				C M D H I S T . C
 *
d37 1
@


14.7
log
@tidy up a lil bit
@
text
@d4 1
a4 1
 * Copyright (c) 1998-2004 United States Government as represented by
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@a34 2
 *
 *
@


14.5
log
@remove the old distribution notice section
@
text
@a35 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a34 4
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
/*
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d216 10
@


1.2
log
@poof goes the silly externs.h
@
text
@d26 1
a26 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a35 1
#include "externs.h"
@

