head	14.24;
access;
symbols
	rel-7-10-4:14.15
	STABLE:14.15.0.2
	rel-7-10-2:14.15
	rel-7-10-0:14.13
	rel-7-8-4:14.8
	rel-7-8-2:14.7
	rel-7-8-0:14.7
	trimnurbs-branch:14.7.0.2
	help:14.7
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.2
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.5
	rel-7-6-2:14.3
	rel-7-6-branch:14.3.0.2
	rel-7-6-0:14.3
	rel-7-4-2:14.2.4.2
	rel-7-4-branch:14.2.0.4
	bobWinPort:14.2.0.2;
locks; strict;
comment	@ * @;


14.24
date	2007.12.09.17.32.28;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.12.09.04.03.10;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.12.09.04.01.38;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.12.08.23.02.46;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.12.08.22.56.02;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.12.08.22.53.49;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.12.08.22.42.58;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2007.09.14.15.21.06;	author erikgreenwald;	state Exp;
branches;
next	14.15;

14.15
date	2007.05.13.18.51.28;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.05.13.07.11.14;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.02.26.09.37.44;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.02.26.09.22.46;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.21.04.45.42;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.08.31.23.16.39;	author lbutler;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.12.17.19.17.35;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.13.14.50.03;	author d_rossberg;	state Exp;
branches;
next	14.3;

14.3
date	2005.08.21.07.56.53;	author brlcad;	state Exp;
branches
	14.3.2.1;
next	14.2;

14.2
date	2005.08.15.20.59.50;	author bob1961;	state Exp;
branches
	14.2.4.1;
next	14.1;

14.1
date	2005.07.24.17.02.16;	author brlcad;	state Exp;
branches;
next	;

14.2.4.1
date	2005.08.15.20.59.50;	author brlcad;	state dead;
branches;
next	14.2.4.2;

14.2.4.2
date	2005.08.16.21.03.49;	author brlcad;	state Exp;
branches;
next	;

14.3.2.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.24
log
@heh, oops -- stat returns 0 on success, -1 on failure.
@
text
@/*                         S T A T . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup bu_log */
/** @@{ */
/** @@file stat.c
 *
 *  Support routines for identifying properties of files and
 *  directories such as whether they exist or are the same as another
 *  given file.
 *
 *  @@author
 *	Christopher Sean Morrison
 *
 * @@par  Source -
 *	The U. S. Army Research Laboratory
 * @@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *
 */

#include "common.h"

#include <stdio.h>

#ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>
#endif
#ifdef HAVE_SYS_STAT_H
#  include <sys/stat.h>
#endif
#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
#ifdef HAVE_PWD_H
#  include <pwd.h>
#endif
#ifdef HAVE_GRP_H
#  include <grp.h>
#endif

#include "machine.h"
#include "bu.h"

#ifndef R_OK
#  define R_OK 4
#endif
#ifndef W_OK
#  define W_OK 2
#endif
#ifndef X_OK
#  define X_OK 1
#endif


/**
 *			B U _ F I L E _ E X I S T S
 *
 *  @@return	1	The given filename exists.
 *  @@return	0	The given filename does not exist.
 */
int
bu_file_exists(const char *path)
{
    struct stat sbuf;

    if (bu_debug & BU_DEBUG_PATHS) {
	bu_log("Does [%s] exist? ", path);
    }

    if(!path) {
	if (bu_debug & BU_DEBUG_PATHS) {
	    bu_log("NO\n");
	}
	/* FAIL */
	return 0;
    }

    /* does it exist as a filesystem entity? */
    if( stat( path, &sbuf ) == 0 ) {
	if (bu_debug & BU_DEBUG_PATHS) {
	    bu_log("YES\n");
	}
	/* OK */
	return 1;
    }

    if (bu_debug & BU_DEBUG_PATHS) {
	bu_log("NO\n");
    }
    /* FAIL */
    return 0;
}


/**
 * b u _ s a m e _ f i l e
 *
 * returns truthfully as to whether or not the two provided filenames
 * are the same file.  if either file does not exist, the result is
 * false.
 */
int
bu_same_file(const char *fn1, const char *fn2)
{
    struct stat sb1, sb2;

    if (!fn1 || !fn2) {
	return 0;
    }

    if (!bu_file_exists(fn1) || !bu_file_exists(fn2)) {
	return 0;
    }

    if ((stat(fn1, &sb1) == 0) &&
	(stat(fn2, &sb2) == 0) &&
	(sb1.st_dev == sb2.st_dev) &&
	(sb1.st_ino == sb2.st_ino)) {
	return 1;
    }

    return 0;
}


/**
 * b u _ s a m e _ f d
 *
 * returns truthfully as to whether or not the two provided file
 * descriptors are the same file.  if either file does not exist, the
 * result is false.
 */
int
bu_same_fd(int fd1, int fd2)
{
    struct stat sb1, sb2;

    if (fd1<0 || fd2<0) {
	return 0;
    }

    /* ares files the same inode on same device? */
    if ((fstat(fd1, &sb1) == 0) && (fstat(fd2, &sb2) == 0) && (sb1.st_dev == sb2.st_dev) && (sb1.st_ino == sb2.st_ino)) {
	return 1;
    }

    return 0;
}


/**
 * _ b u _ f i l e _ a c c e s s
 *
 * common guts to the file access functions that returns truthfully if
 * the current user has the ability permission-wise to access the
 * specified file.
 */
static int
_bu_file_access(const char *path, int access)
{
    struct stat sb;
    int mask;

    /* 0 is root or Windows user */
    uid_t uid = 0;

    /* 0 is wheel or Windows group */
    gid_t gid = 0;

    int usr_mask = S_IRUSR | S_IWUSR | S_IXUSR;
    int grp_mask = S_IRGRP | S_IWGRP | S_IXGRP;
    int oth_mask = S_IROTH | S_IWOTH | S_IXOTH;

    if (!path || (path[0] == '\0')) {
	return 0;
    }

    if (stat(path, &sb) == -1) {
	return 0;
    }

    if (access & R_OK) {
	mask = S_IRUSR | S_IRGRP | S_IROTH;
    }
    if (access & W_OK) {
	mask = S_IWUSR | S_IWGRP | S_IWOTH;
    }
    if (access & X_OK) {
	mask = S_IXUSR | S_IXGRP | S_IXOTH;
    }

#ifdef HAVE_GETEUID
    uid = geteuid();
#endif
#ifdef HAVE_GETEGID
    gid = getegid();
#endif

    if (sb.st_uid == uid) {
	/* we own it */
	return sb.st_mode & (mask & usr_mask);
    } else if (sb.st_gid == gid) {
	/* our primary group */
	return sb.st_mode & (mask & grp_mask);
    }

    /* search group database to see if we're in the file's group */
#if defined(HAVE_PWD_H) && defined (HAVE_GRP_H)
    {
	struct passwd *pwdb = getpwuid(uid);
	if (pwdb && pwdb->pw_name) {
	    int i;
	    struct group *grdb = getgrgid(sb.st_gid);
	    for (i = 0; grdb && grdb->gr_mem[i]; i++) {
		if (strcmp(grdb->gr_mem[i], pwdb->pw_name) == 0) {
		    /* one of our other groups */
		    return sb.st_mode & (mask & grp_mask);
		}
	    }
	}
    }
#endif

    /* check other */
    return sb.st_mode & (mask & oth_mask);;
}


/**
 * b u _ f i l e _ r e a d a b l e
 *
 * returns truthfully if current user can read the specified file or
 * directory.
 */
int
bu_file_readable(const char *path)
{
    return _bu_file_access(path, R_OK);
}


/**
 * b u _ f i l e _ w r i t a b l e
 *
 * returns truthfully if current user can write to the specified file
 * or directory.
 */
int
bu_file_writable(const char *path)
{
    return _bu_file_access(path, W_OK);
}


/**
 * b u _ f i l e _ e x e c u t a b l e
 *
 * returns truthfully if current user can run the specified file or
 * directory.
 */
int
bu_file_executable(const char *path)
{
    return _bu_file_access(path, X_OK);
}


/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.23
log
@geez, finish typing before hitting the send
@
text
@d194 1
a194 1
    if (stat(path, &sb) == 0) {
@


14.22
log
@handle null/empty path
@
text
@a35 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.21 2007/12/08 23:02:46 brlcad Exp $";
d190 1
a190 1
    if (!path || path[0] = '\0') {
@


14.21
log
@don't need to check for HAVE_STAT, assume it's available per c89
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.20 2007/12/08 22:56:02 brlcad Exp $";
d191 4
@


14.20
log
@just in case we don't have the access() interface defines for R_OK, W_OK, and X_OK that we're privately using, define them if needed
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.19 2007/12/08 22:53:49 brlcad Exp $";
d122 2
d132 5
a136 10
#if defined(HAVE_STAT)
#  define bu_same_file_method 1
    {
	struct stat sb1, sb2;
	if ((stat(fn1, &sb1) == 0) &&
	    (stat(fn2, &sb2) == 0) &&
	    (sb1.st_dev == sb2.st_dev) &&
	    (sb1.st_ino == sb2.st_ino)) {
	    return 1;
	}
a137 5
#endif

#ifndef bu_same_file_method
#  error "Do not know how to test if two files are the same on this system"
#endif
d153 2
d159 3
a161 13
    /* use HAVE_STAT configure test for now until we find a need to
     * test for HAVE_FSTAT instead.
     */
#if defined(HAVE_STAT)
#  define bu_same_file_method 1
    {
	struct stat sb1, sb2;
	if ((fstat(fd1, &sb1) == 0) &&
	    (fstat(fd2, &sb2) == 0) &&
	    (sb1.st_dev == sb2.st_dev) &&
	    (sb1.st_ino == sb2.st_ino)) {
	    return 1;
	}
a162 5
#endif

#ifndef bu_same_file_method
#  error "Do not know how to test if two files are the same on this system"
#endif
@


14.19
log
@remove the access() approach in bu_file_exists() and take stat() for granted since it's c89 and doesn't have the security problems access has
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.18 2007/12/08 22:42:58 brlcad Exp $";
d61 10
@


14.18
log
@add new file stat routines to libbu, bu_file_readable() and bu_file_writable() and bu_file_executable(), for determining permissions on a given file name for the current user.  check the appropriate user, group, or other permission, and should work on windows too.  these routines make it easy to completely avoid access() as well as a means to improve error checking throughout.
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.17 2007/10/26 21:51:26 brlcad Exp $";
d71 2
d86 1
a86 19
#if defined(HAVE_STAT)
#  define bu_file_exists_method 1
    {
	struct stat sbuf;
	/* stat() is posix */
	if( stat( path, &sbuf ) == 0 ) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("YES\n");
	    }
	    /* OK */
	    return 1;
	}
    }
#endif

#if defined(HAVE_ACCESS) && defined(F_OK)
#  define bu_file_exists_method 1
    /* access() is posix */
    if( access( path, F_OK )  == 0 ) {
a92 5
#endif

#ifndef bu_file_exists_method
#  error "Do not know how to check whether a file exists on this system"
#endif
@


14.17
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.16 2007/09/14 15:21:06 erikgreenwald Exp $";
d42 6
d51 5
a55 2
#ifdef HAVE_SYS_STAT_H
#  include <sys/stat.h>
d200 113
@


14.16
log
@removed trailing whitespace
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.15 2007/05/13 18:51:28 brlcad Exp $";
a73 12
#if defined(HAVE_ACCESS) && defined(F_OK)
#  define bu_file_exists_method 1
    /* access() is posix */
    if( access( path, F_OK )  == 0 ) {
	if (bu_debug & BU_DEBUG_PATHS) {
	    bu_log("YES\n");
	}
	/* OK */
	return 1;
    }
#endif

d90 12
@


14.15
log
@debug printing
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.14 2007/05/13 07:11:14 brlcad Exp $";
d127 1
a127 1
    
d148 1
a148 1
    
d186 1
a186 1
    
@


14.14
log
@use bu_debug & BU_DEBUG_PATHS
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.13 2007/02/26 09:37:44 brlcad Exp $";
d63 1
a63 1
	bu_log("Does %s exist? ", path);
@


14.13
log
@add the similar routine bu_same_fd() to compare two file descriptors returned by open()
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.12 2007/02/26 09:22:46 brlcad Exp $";
d62 2
a63 2
    if (bu_debug) {
	printf("Does %s exist? ", path);
d67 2
a68 2
	if (bu_debug) {
	    printf("NO\n");
d78 2
a79 2
	if (bu_debug) {
	    printf("YES\n");
d93 2
a94 2
	    if (bu_debug) {
		printf("YES\n");
d106 2
a107 2
    if (bu_debug) {
	printf("NO\n");
@


14.12
log
@add bu_same_file() routine to determine whether two file names are indeed the same file or not.  presently, the routine falls back to stat() to compare the inode numbers of the files in question
@
text
@d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.11 2007/01/23 01:13:34 brlcad Exp $";
d153 38
@


14.11
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d24 3
a26 2
 *  Support routine for identifying whether files and directories
 *  exist or not.
d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.10 2007/01/21 04:45:42 brlcad Exp $";
a61 2
    struct stat sbuf;

d66 7
a72 1
    if( path == NULL )  return 0;			/* FAIL */
a73 1
    /* defined in unistd.h */
d76 1
d81 2
a82 1
	return 1;	/* OK */
d89 9
a97 3
    if( stat( path, &sbuf ) == 0 ) {
	if (bu_debug) {
	    printf("YES\n");
a98 1
	return 1;	/* OK */
d109 2
a110 1
    return 0;					/* FAIL */
d112 41
@


14.10
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d35 1
a35 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.9 2007/01/20 14:36:51 brlcad Exp $";
@


14.9
log
@update copyright to 2007
@
text
@d22 1
a22 1
/*@@{*/
d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.8 2006/08/31 23:16:39 lbutler Exp $";
d101 1
a101 1
/*@@}*/
@


14.8
log
@Doxygen comments
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.7 2006/01/18 06:46:16 brlcad Exp $";
@


14.7
log
@update copyright to 2006
@
text
@d21 2
d28 1
a28 1
 *  Author -
d31 1
a31 1
 *  Source -
d33 1
a33 1
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
d36 1
a36 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.6 2005/12/17 19:17:35 brlcad Exp $";
d53 1
a53 1
/*
d56 2
a57 3
 *  Returns boolean -
 *	1	The given filename exists.
 *	0	The given filename does not exist.
d101 1
a101 1

@


14.6
log
@add debug printing for all files that are checked for existence
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d34 1
a34 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.5 2005/10/23 04:44:32 brlcad Exp $";
@


14.5
log
@trailing ws
@
text
@d34 1
a34 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.4 2005/10/13 14:50:03 d_rossberg Exp $";
d61 1
a61 1
	struct	stat	sbuf;
d63 3
a65 1
	if( path == NULL )  return 0;			/* FAIL */
d67 3
a69 1
	/* defined in unistd.h */
d72 6
a77 1
	if( access( path, F_OK )  == 0 )  return 1;	/* OK */
d80 1
a80 1
	/* does it exist as a filesystem entity? */
d83 6
a88 1
	if( stat( path, &sbuf ) == 0 )  return 1;	/* OK */
d95 4
a98 1
	return 0;					/* FAIL */
@


14.4
log
@machine.h requires stdio.h to be included first
@
text
@d32 1
a32 1
 *  
d34 1
a34 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.3 2005/08/21 07:56:53 brlcad Exp $";
@


14.3
log
@merge version changes from 7.4.2 (from rel-7-4-branch)
@
text
@d34 1
a34 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.2 2005/08/15 20:59:50 bob1961 Exp $";
d38 2
@


14.3.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d32 1
a32 1
 *
d34 1
a34 1
static const char RCS_stat[] = "@@(#)$Header$";
a37 2
#include <stdio.h>

@


14.2
log
@include stdio.h to get rid of FOPEN_MAX redefinition warning
@
text
@d34 1
a34 1
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.1 2005/07/24 17:02:16 brlcad Exp $";
a37 1
#include <stdio.h>
@


14.2.4.1
log
@file stat.c was added on branch rel-7-4-branch on 2005-08-16 21:03:49 +0000
@
text
@d1 91
@


14.2.4.2
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@a0 90
/*                         S T A T . C
 * BRL-CAD
 *
 * Copyright (C) 2004-2005 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@file stat.c
 *
 *  Support routine for identifying whether files and directories
 *  exist or not.
 *
 *  Author -
 *	Christopher Sean Morrison
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 */
static const char RCS_stat[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/stat.c,v 14.1 2005/07/24 17:02:16 brlcad Exp $";

#include "common.h"

#ifdef HAVE_UNISTD_H
#  include <unistd.h>
#endif
#ifdef HAVE_SYS_STAT_H
#  include <sys/stat.h>
#endif

#include "machine.h"
#include "bu.h"


/*
 *			B U _ F I L E _ E X I S T S
 *
 *  Returns boolean -
 *	1	The given filename exists.
 *	0	The given filename does not exist.
 */
int
bu_file_exists(const char *path)
{
	struct	stat	sbuf;

	if( path == NULL )  return 0;			/* FAIL */

	/* defined in unistd.h */
#if defined(HAVE_ACCESS) && defined(F_OK)
#  define bu_file_exists_method 1
	if( access( path, F_OK )  == 0 )  return 1;	/* OK */
#endif

	/* does it exist as a filesystem entity? */
#if defined(HAVE_STAT)
#  define bu_file_exists_method 1
	if( stat( path, &sbuf ) == 0 )  return 1;	/* OK */
#endif

#ifndef bu_file_exists_method
#  error "Do not know how to check whether a file exists on this system"
#endif

	return 0;					/* FAIL */
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.1
log
@separate bu_file_exists out of brlcad_path.c into its own file stat.c
@
text
@d34 1
a34 1
static const char RCS_stat[] = "@@(#)$Header: $";
d38 1
@

