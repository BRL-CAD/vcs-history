head	14.58;
access;
symbols
	rel-7-10-4:14.48
	STABLE:14.48.0.2
	stable-branch:14.8
	rel-7-10-2:14.48
	rel-7-10-0:14.41
	rel-7-8-4:14.29
	rel-7-8-2:14.27
	rel-7-8-0:14.27
	trimnurbs-branch:14.27.0.2
	help:14.27
	temp_tag:14.24
	bobWinPort-20051223-freeze:14.21.2.1
	postmerge-20051223-bobWinPort:14.24
	premerge-20051223-bobWinPort:14.23
	rel-7-6-6:14.23
	rel-7-6-4:14.23
	rel-7-6-2:14.22
	rel-7-6-branch:14.22.0.2
	rel-7-6-0:14.22
	rel-7-4-2:14.12.2.1
	rel-7-4-branch:14.12.0.2
	bobWinPort:14.21.0.2
	rel-7-4-0:14.12
	rel-7-2-6:14.9
	rel-7-2-4:14.8
	rel-7-2-2:14.8
	rel-7-2-0:14.7
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.7
	rel-7-0-branch:1.7.0.2
	rel-7-0:1.7
	release-7-0:1.7;
locks; strict;
comment	@ * @;


14.58
date	2007.12.31.17.45.04;	author brlcad;	state Exp;
branches;
next	14.57;

14.57
date	2007.12.06.17.39.55;	author erikgreenwald;	state Exp;
branches;
next	14.56;

14.56
date	2007.12.06.16.11.27;	author brlcad;	state Exp;
branches;
next	14.55;

14.55
date	2007.12.06.15.26.06;	author brlcad;	state Exp;
branches;
next	14.54;

14.54
date	2007.12.03.09.33.48;	author d_rossberg;	state Exp;
branches;
next	14.53;

14.53
date	2007.10.26.21.51.26;	author brlcad;	state Exp;
branches;
next	14.52;

14.52
date	2007.10.01.07.53.21;	author brlcad;	state Exp;
branches;
next	14.51;

14.51
date	2007.10.01.03.14.41;	author brlcad;	state Exp;
branches;
next	14.50;

14.50
date	2007.09.15.16.23.08;	author brlcad;	state Exp;
branches;
next	14.49;

14.49
date	2007.09.14.15.21.06;	author erikgreenwald;	state Exp;
branches;
next	14.48;

14.48
date	2007.05.20.21.54.58;	author brlcad;	state Exp;
branches;
next	14.47;

14.47
date	2007.05.20.20.20.44;	author brlcad;	state Exp;
branches;
next	14.46;

14.46
date	2007.05.15.07.26.50;	author brlcad;	state Exp;
branches;
next	14.45;

14.45
date	2007.05.13.08.23.40;	author brlcad;	state Exp;
branches;
next	14.44;

14.44
date	2007.05.12.00.10.24;	author brlcad;	state Exp;
branches;
next	14.43;

14.43
date	2007.04.18.04.47.19;	author brlcad;	state Exp;
branches;
next	14.42;

14.42
date	2007.04.18.04.38.23;	author brlcad;	state Exp;
branches;
next	14.41;

14.41
date	2007.03.07.13.18.15;	author d_rossberg;	state Exp;
branches;
next	14.40;

14.40
date	2007.03.06.21.05.17;	author brlcad;	state Exp;
branches;
next	14.39;

14.39
date	2007.02.27.13.03.23;	author d_rossberg;	state Exp;
branches;
next	14.38;

14.38
date	2007.02.20.03.42.32;	author brlcad;	state Exp;
branches;
next	14.37;

14.37
date	2007.02.18.20.23.14;	author brlcad;	state Exp;
branches;
next	14.36;

14.36
date	2007.02.18.20.08.13;	author brlcad;	state Exp;
branches;
next	14.35;

14.35
date	2007.02.01.20.26.55;	author brlcad;	state Exp;
branches;
next	14.34;

14.34
date	2007.01.27.01.41.36;	author brlcad;	state Exp;
branches;
next	14.33;

14.33
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.32;

14.32
date	2007.01.21.04.45.41;	author brlcad;	state Exp;
branches;
next	14.31;

14.31
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.30;

14.30
date	2007.01.17.19.36.49;	author erikgreenwald;	state Exp;
branches;
next	14.29;

14.29
date	2006.08.31.23.16.38;	author lbutler;	state Exp;
branches;
next	14.28;

14.28
date	2006.08.31.05.50.24;	author lbutler;	state Exp;
branches;
next	14.27;

14.27
date	2006.02.03.02.07.53;	author brlcad;	state Exp;
branches;
next	14.26;

14.26
date	2006.02.03.01.49.42;	author brlcad;	state Exp;
branches;
next	14.25;

14.25
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.24;

14.24
date	2005.12.23.21.26.30;	author bob1961;	state Exp;
branches;
next	14.23;

14.23
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2005.08.16.20.33.48;	author brlcad;	state Exp;
branches
	14.22.2.1;
next	14.21;

14.21
date	2005.08.15.20.57.41;	author bob1961;	state Exp;
branches
	14.21.2.1;
next	14.20;

14.20
date	2005.08.12.22.29.23;	author lbutler;	state Exp;
branches;
next	14.19;

14.19
date	2005.07.25.05.57.10;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2005.07.24.19.47.41;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2005.07.24.17.02.16;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2005.07.18.05.12.52;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2005.07.18.02.21.57;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2005.07.18.02.09.34;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2005.07.17.04.10.35;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2005.07.11.01.10.57;	author brlcad;	state Exp;
branches
	14.12.2.1;
next	14.11;

14.11
date	2005.07.11.00.58.47;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.07.08.00.00.48;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.05.28.02.14.50;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.03.24.16.16.10;	author bob1961;	state Exp;
branches;
next	14.7;

14.7
date	2005.01.30.20.30.45;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.01.29.04.37.15;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.20;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.49.00;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.13;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2004.10.29.21.45.31;	author butler;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.22.18.44.30;	author butler;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.14.19.19.29;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.03.23.30.57;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.08.19.28.49;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.31;	author morrison;	state Exp;
branches;
next	;

14.12.2.1
date	2005.08.16.21.03.49;	author brlcad;	state Exp;
branches;
next	;

14.21.2.1
date	2005.09.08.16.23.20;	author bob1961;	state Exp;
branches;
next	;

14.22.2.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.58
log
@consistently lowercase
@
text
@/*                   B R L C A D _ P A T H . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup filesystem */
/** @@{ */
/** @@file brlcad_path.c
 *
 * @@brief
 *  A support routine to provide the executable code with the path
 *  to where the BRL-CAD programs and libraries are installed.
 *
 * @@author	Christopher Sean Morrison
 * @@author	Michael John Muuss
 *
 * @@par Source
 *	The U. S. Army Research Laboratory			@@n
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef HAVE_SYS_PARAM_H
#  include <sys/param.h>
#endif

#include "machine.h"
#include "bu.h"
#include "sysv.h"

/* private headers */
#include "brlcad_version.h"


/* defaults for configure-less compiles */
#ifndef BRLCAD_ROOT
#  define BRLCAD_ROOT "/usr/brlcad"
#endif


/* internal storage for bu_getprogname/bu_setprogname */
static char bu_progname[MAXPATHLEN] = {0};


static const char *
brlcad_data()
{
#ifndef BRLCAD_DATA
    static char path[512] = {0};
    snprintf(path, 512, "%s/share/brlcad/%s", BRLCAD_ROOT, brlcad_version());
    return path;
#else
    return BRLCAD_DATA;
#endif
}


/**
 * b u _ i p w d
 *
 * set/return the path to the initial working directory.
 * bu_setprogname() must be called on app startup for the correct pwd to
 * be acquired/set.
 */
static const char *
bu_ipwd()
{
    /* private stash */
    static const char *ipwd = NULL;
    static char buffer[MAXPATHLEN] = {0};

    if (ipwd) {
	return ipwd;
    }

    ipwd = getenv("PWD"); /* not our memory to free */

    if (!ipwd && (ipwd = bu_which("pwd"))) {
	FILE *fp;

	fp = popen(ipwd, "r");
	if (fp) {
	    if (bu_fgets(buffer, MAXPATHLEN, fp)) {
		ipwd = buffer;
	    } else {
		ipwd = ".";
	    }
	} else {
	    ipwd = ".";
	}
    } else {
	ipwd = ".";
    }

    return ipwd;
}


/**
 * b u _ a r g v 0
 *
 * this routine is used by the brlcad-path-finding routines when
 * attempting to locate binaries, libraries, and resources.  This
 * routine will set argv0 if path is provided and should generally be
 * set early on by bu_setprogname().
 */
const char *
bu_argv0(void)
{
    /* private stash */
    static const char *argv0 = NULL;

    /* set initial pwd if we have not already */
    (void)bu_ipwd();

    if (bu_progname[0] != '\0') {
	argv0 = bu_progname;
    }

#ifdef HAVE_GETPROGNAME
    if (!argv0) {
	/* do not call bu_getgrogname() */
	argv0 = getprogname(); /* not malloc'd memory */
    }
#endif

    return argv0;
}


/**
 * b u _ a r g v 0 _ f u l l _ p a t h
 *
 * returns the full path to argv0, regardless of how the application
 * was invoked.
 */
const char *
bu_argv0_full_path(void)
{
    static char buffer[MAXPATHLEN] = {0};

    const char *argv0 = bu_argv0();
    const char *ipwd = bu_ipwd();

    const char *which = bu_which(argv0);

    if (argv0[0] == BU_DIR_SEPARATOR) {
	/* seems to be a full path */
	snprintf(buffer, MAXPATHLEN, "%s", argv0);
	return buffer;
    }

    if (argv0[0] == '.' && argv0[1] == BU_DIR_SEPARATOR) {
	/* remove a ./ if present */
	argv0 += 2;
    }

    /* running from installed */
    if (which) {
	snprintf(buffer, MAXPATHLEN, "%s", which);
	return buffer;
    }

    /* running from source dir */
    snprintf(buffer, MAXPATHLEN, "%s%c%s", ipwd, BU_DIR_SEPARATOR, argv0);
    if (bu_file_exists(buffer)) {
	return buffer;
    }

    /* give up */
    snprintf(buffer, MAXPATHLEN, "%s", argv0);
    return buffer;
}


/** b u _ g e t p r o g n a m e
 *
 * get the name of the running application if they ran
 * bu_setprogname() first or if we know what it's supposed to be
 * anyways.
 */
const char *
bu_getprogname(void) {
    const char *name = NULL;

    if (bu_progname[0] != '\0') {
	return bu_basename(bu_progname);
    }

#ifdef HAVE_GETPROGNAME
    name = getprogname(); /* not malloc'd memory */
#endif

    if (!name) {
	name = bu_argv0();
    }

    snprintf(bu_progname, MAXPATHLEN, "%s", name?name:"unknown");

    return bu_basename(bu_progname);
}


/** b u _ s e t p r o g n a m e
 *
 * Set the name of the running application.  This isn't necessary on
 * modern systems that support getprogname() and call setprogname()
 * before main() for you, but necessary otherwise for portability.
 */
void
bu_setprogname(const char *argv0) {
    const char *base = bu_basename(argv0);

#ifdef HAVE_SETPROGNAME
    setprogname(argv0);
#endif

    if (argv0) {
	snprintf(bu_progname, MAXPATHLEN, "%s", argv0);
    }

    (void)bu_ipwd();

    return;
}


/** b u _ r o o t _ m i s s i n g
 *
 *print out an error/warning message if we cannot find the specified
 * BRLCAD_ROOT (compile-time install path)
 */
static void
bu_root_missing(const char *paths)
{
    bu_log("\
Unable to locate where BRL-CAD %s is installed while searching:\n\
%s\n\
This version of BRL-CAD was compiled to be installed at:\n\
	%s\n\n", brlcad_version(), paths, BRLCAD_ROOT);

#ifndef _WIN32
    bu_log("\
You may specify where to locate BRL-CAD by setting the BRLCAD_ROOT\n\
environment variable.  For example:\n\
\n\
for csh/tcsh users:\n\
	setenv BRLCAD_ROOT /path/to/brlcad\n\
for sh/bash users:\n\
	BRLCAD_ROOT=/path/to/brlcad ; export BRLCAD_ROOT\n\n");
#endif

    return;
}


/**
 * b u _ d a t a _ m i s s i n g
 *
 * print out an error/warning message if we cannot find the specified
 * BRLCAD_DATA (compile-time install path)
 */
static void
bu_data_missing(const char *paths)
{
    bu_log("\
Unable to locate where BRL-CAD %s data resources are installed\n\
while searching:\n\
%s\n\
This release of BRL-CAD expects data resources to be at:\n\
	%s\n\n", brlcad_version(), paths, brlcad_data());

#ifndef _WIN32
    bu_log("\
You may specify where to locate BRL-CAD data resources by setting\n\
the BRLCAD_DATA environment variable.  For example:\n\
\n\
for csh/tcsh users:\n\
	setenv BRLCAD_DATA /path/to/brlcad/data\n\
for sh/bash users:\n\
	BRLCAD_DATA=/path/to/brlcad/data ; export BRLCAD_DATA\n\n");
#endif

    return;
}


/**
 * put a left-hand and right-hand path together and test whether they
 * exist or not.
 *
 * @@return boolean on whether a match was found.
 */
static int
bu_find_path(char result[MAXPATHLEN], const char *lhs, const char *rhs, struct bu_vls *searched, const char *where)
{
    int llen,rlen;
    static const char *currdir=".";

    /* swap right with left if there is no left so logic is simplified
     * later on.
     */
    if (lhs == NULL && rhs != NULL) {
	lhs = rhs;
	rhs = NULL;
    }

    if (lhs == NULL) {
	if (searched && where) {
	    bu_vls_strcat(searched, where);
	}
	return 0;
    }

    rlen = llen = 0;
    if (rhs) {
	rlen = strlen(rhs);
    }

    /* be safe */
    if (rlen + 2 > MAXPATHLEN) {
	bu_log("Warning: path is way too long (%d characters > %d)\n", rlen+2, MAXPATHLEN);
	if (searched && where) {
	    bu_vls_strcat(searched, where);
	}
	return 0;
    }

    /* an empty left hand implies current directory (plus a slash is appended later) */
    if (lhs[0] == '\0') {
	lhs = currdir;
    }

    /* left-hand path should exist independent of right-hand path */
    if (!bu_file_exists(lhs)) {
	if (searched && where) {
	    bu_vls_strcat(searched, where);
	}
	return 0;
    }

    /* start fresh */
    memset(result, 0, (size_t)MAXPATHLEN);
    strncpy(result, lhs, (size_t)MAXPATHLEN);

    /* nothing to add, so just return what we have */
    if (!rhs || (rlen == 0)) {
	return 1;
    }

    /* be safe again */
    llen = strlen(result);
    if (llen + rlen + 3 > MAXPATHLEN) {
	bu_log("Warning: path is way too long (%d characters > %d)\n", llen+rlen+3, MAXPATHLEN);
	if (searched && where) {
	    bu_vls_strcat(searched, where);
	}
	return 0;
    }

    if ( (*(result+llen-1) != BU_DIR_SEPARATOR) && (rhs[0] != BU_DIR_SEPARATOR) ) {
	/* let the caller give "/usr/brlcad" and "bin" and get "/usr/brlcad/bin" */
	*(result+llen) = BU_DIR_SEPARATOR;
	llen++;
    } else if ( (*(result+llen-1) == BU_DIR_SEPARATOR) && (rhs[0] == BU_DIR_SEPARATOR) ) {
	/* let the caller give "/usr/brlcad/" and "/bin" and get "/usr/brlcad/bin"*/
	rhs++;
	rlen--;
    }

    /* found a match */
    strncpy(result+llen, rhs, (size_t)(MAXPATHLEN - llen));
    if (bu_file_exists(result)) {
	return 1;
    }

    /* close, but no match */
    if (searched && where) {
	bu_vls_strcat(searched, where);
    }
    return 0;
}


/**
 * b u _ b r l c a d _ r o o t
 *
 * Locate where the BRL-CAD applications and libraries are installed.
 *
 * The BRL-CAD root is searched for in the following order of
 * precedence by testing for the rhs existence if provided or the
 * directory existence otherwise:
 *
 *   BRLCAD_ROOT environment variable if set
 *   BRLCAD_ROOT compile-time path
 *   run-time path identification
 *   /usr/brlcad static path
 *   current directory
 *
 * @@return
 * A STATIC buffer is returned.
 * It is the caller's responsibility to call bu_strdup() or make
 * other provisions to save the returned string, before calling again.
 */
char *
bu_brlcad_root(const char *rhs, int fail_quietly)
{
    static char result[MAXPATHLEN] = {0};
    const char *lhs;
    struct bu_vls searched;
    char where[(size_t)(MAXPATHLEN + 64)] = {0};

    bu_vls_init(&searched);

    if (bu_debug & BU_DEBUG_PATHS) {
	bu_log("bu_brlcad_root: searching for [%s]\n", rhs?rhs:"");
    }

    /* BRLCAD_ROOT environment variable if set */
    lhs = getenv("BRLCAD_ROOT");
    if (lhs) {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_ROOT environment variable [%s]\n", lhs);
	if (bu_find_path(result, lhs, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: BRLCAD_ROOT environment variable [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    } else {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_ROOT environment variable\n");
	bu_vls_strcat(&searched, where);
    }

    /* BRLCAD_ROOT compile-time path */
    lhs = BRLCAD_ROOT;
    if (lhs) {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_ROOT compile-time path [%s]\n", lhs);
	if (bu_find_path(result, lhs, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: BRLCAD_ROOT compile-time path [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    } else {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_ROOT compile-time path [UNKNOWN]\n");
	bu_vls_strcat(&searched, where);
    }

    /* run-time path identification */
    lhs = bu_getprogname();
    if (lhs) {
	char argv0[(size_t)(MAXPATHLEN + 64)] = {0};
	int len = strlen(lhs);
	snprintf(argv0, (size_t)(MAXPATHLEN + 64), "%s", lhs);

	/* need to trim off the trailing binary */
	while (len-1 > 0) {
	    if (argv0[len-1] == BU_DIR_SEPARATOR) {
		argv0[len] = '.';
		argv0[len+1] = '.';
		argv0[len+2] = '\0';
		break;
	    }
	    len--;
	}

	snprintf(where, (size_t)(MAXPATHLEN + 64), "\trun-time path identification [%s]\n", argv0);
	if (bu_find_path(result, argv0, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: Run-time path identification [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    } else {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\trun-time path identification [UNKNOWN]\n");
	bu_vls_strcat(&searched, where);
    }

    /* /usr/brlcad static path */
    if (strncmp("/usr/brlcad", BRLCAD_ROOT, (size_t)12) != 0) {
	if (bu_find_path(result, "/usr/brlcad", rhs, &searched, "\t/usr/brlcad default path\n")) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: /usr/brlcad default path [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }

    /* current directory */
    if (bu_find_path(result, ".", rhs, &searched, "\tcurrent directory\n")) {
	if (bu_debug & BU_DEBUG_PATHS) {
	    bu_log("Found: current directory [%s]\n", result);
	}
	bu_vls_free(&searched);
	return result;
    }

    if (!fail_quietly) {
	bu_root_missing(bu_vls_addr(&searched));
	if (rhs) {
	    bu_log("Unable to find '%s' within the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n", rhs);
	} else {
	    bu_log("Unable to find the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n");
	}
    }

    bu_vls_free(&searched);
    return NULL;
}


/**
 * b u _ b r l c a d _ d a t a
 *
 * Locate where the BRL-CAD data resources are installed.
 *
 * The BRL-CAD data resources are searched for in the following order
 * of precedence by testing for the existence of rhs if provided or
 * the directory existence otherwise:
 *
 *   BRLCAD_DATA environment variable if set
 *   BRLCAD_DATA compile-time path
 *   bu_brlcad_root/share/brlcad/VERSION path
 *   bu_brlcad_root path
 *   current directory
 *
 * A STATIC buffer is returned.
 * It is the caller's responsibility to call bu_strdup() or make
 * other provisions to save the returned string, before calling again.
 */
char *
bu_brlcad_data(const char *rhs, int fail_quietly)
{
    static char result[MAXPATHLEN] = {0};
    const char *lhs;
    struct bu_vls searched;
    char where[(size_t)(MAXPATHLEN + 64)] = {0};
    char path[64] = {0};

    bu_vls_init(&searched);

    if (bu_debug & BU_DEBUG_PATHS) {
	bu_log("bu_brlcad_data: looking for [%s]\n", rhs?rhs:"");
    }

    /* BRLCAD_DATA environment variable if set */
    lhs = getenv("BRLCAD_DATA");
    if (lhs) {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_DATA environment variable [%s]\n", lhs);
	if (bu_find_path(result, lhs, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: BRLCAD_DATA environment variable [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    } else {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_DATA environment variable\n");
	bu_vls_strcat(&searched, where);
    }

    /* BRLCAD_DATA compile-time path */
    lhs = brlcad_data();
    if (lhs) {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_DATA compile-time path [%s]\n", lhs);
	if (bu_find_path(result, lhs, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: BRLCAD_DATA compile-time path [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    } else {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_DATA compile-time path [UNKNOWN]\n");
	bu_vls_strcat(&searched, where);
    }

    /* bu_brlcad_root/share/brlcad/VERSION path */
    snprintf(path, (size_t)MAXPATHLEN, "share/brlcad/%s", brlcad_version());
    lhs = bu_brlcad_root(path, 1);
    if (lhs) {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_ROOT common data path  [%s]\n", path);
	if (bu_find_path(result, lhs, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: BRLCAD_ROOT common data path [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }

    /* bu_brlcad_root/share/brlcad path */
    lhs = bu_brlcad_root("share/brlcad", 1);
    if (lhs) {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
	if (bu_find_path(result, lhs, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: BRLCAD_ROOT common data path [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }

    /* bu_brlcad_root/share path */
    lhs = bu_brlcad_root("share", 1);
    if (lhs) {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
	if (bu_find_path(result, lhs, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: BRLCAD_ROOT common data path [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }

    /* bu_brlcad_root path */
    lhs = bu_brlcad_root("", 1);
    if (lhs) {
	snprintf(where, (size_t)(MAXPATHLEN + 64), "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
	if (bu_find_path(result, lhs, rhs, &searched, where)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: BRLCAD_ROOT common data path [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }

    /* current directory (running from uninstalled source distribution) */
    if (bu_find_path(result, ".", rhs, &searched, "\tcurrent directory\n")) {
	if (bu_debug & BU_DEBUG_PATHS) {
	    bu_log("Found: current directory [%s]\n", result);
	}
	bu_vls_free(&searched);
	return result;
    }

    /* running from uninstalled source distribution, look for THIS file */
#define BPC "/src/libbu/" __FILE__
    if (bu_file_exists("." BPC)) {
	if (bu_find_path(result, ".", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	} else if (bu_find_path(result, "./src", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }
    if (bu_file_exists(".." BPC)) {
	if (bu_find_path(result, "..", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	} else if (bu_find_path(result, "../src", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }
    if (bu_file_exists("../.." BPC)) {
	if (bu_find_path(result, "../..", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	} else if (bu_find_path(result, "../../src", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }
    if (bu_file_exists("../../.." BPC)) {
	if (bu_find_path(result, "../../..", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	} else if (bu_find_path(result, "../../../src", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }
    if (bu_file_exists("../../../.." BPC)) {
	if (bu_find_path(result, "../../../..", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	} else if (bu_find_path(result, "../../../../src", rhs, NULL, NULL)) {
	    if (bu_debug & BU_DEBUG_PATHS) {
		bu_log("Found: source directory [%s]\n", result);
	    }
	    bu_vls_free(&searched);
	    return result;
	}
    }

    if (!fail_quietly) {
	bu_data_missing(bu_vls_addr(&searched));
	if (rhs) {
	    bu_log("Unable to find '%s' within the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n", rhs);
	} else {
	    bu_log("Unable to find the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n");
	}
    }

    bu_vls_free(&searched);
    return NULL;
}

/** @@} */
/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.57
log
@add missing closing paren.
@
text
@a34 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.56 2007/12/06 16:11:27 brlcad Exp $ (BRL)";
d276 2
a277 1
/** b u _ d a t a _ m i s s i n g
d404 3
a406 2
/**	B U _ B R L C A D _ R O O T
 *@@brief
d536 1
a536 1
 *	B U _ B R L C A D _ D A T A
a537 1
 * @@brief
@


14.56
log
@finally obsolete bu_brlcad_path() and bu_tcl_brlcad_path(), which were marked deprecated back in 7.4; callers should now be using bu_brlcad_data() and bu_brlcad_root() depending on the nature of the lookup.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.55 2007/12/06 15:26:06 brlcad Exp $ (BRL)";
d98 1
a98 1
    if (!ipwd && (ipwd = bu_which("pwd")) {
@


14.55
log
@use bu_which() to find pwd instead of relying on popen
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.54 2007/12/03 09:33:48 d_rossberg Exp $ (BRL)";
a753 25
/**
 *	B U _ B R L C A D _ P A T H
 *
 *  @@deprecated
 *  Do not use.  Locate where the BRL-CAD programs and
 *  libraries are located, contatenate on the rest of the string
 *  provided by the caller, and return a pointer to a STATIC buffer
 *  with the full path.  It is the caller's responsibility to call
 *  bu_strdup() or make other provisions to save the returned string,
 *  before calling again.  bu_bomb() if unable to find the base path.
 *
 */
char *
bu_brlcad_path(const char *rhs, int fail_quietly)
{
	bu_log("\
WARNING: bu_brlcad_path is deprecated and will likely disappear in\n\
a future release of BRL-CAD.  Programs and scripts should utilize\n\
bu_brlcad_root and bu_brlcad_data instead.\n\
\n\
Use bu_brlcad_root for the path of applications and libraries.\n\
Use bu_brlcad_data for the path to the data resources.\n\n");

	return bu_brlcad_root(rhs, fail_quietly);
}
@


14.54
log
@do not return a pointer to a temporary variable, made variable static
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.53 2007/10/26 21:51:26 brlcad Exp $ (BRL)";
d98 1
a98 1
    if (!ipwd) {
d100 2
a101 1
	fp = popen("pwd", "r");
d111 2
@


14.53
log
@yet another surge of level 4 flawfinder string length checks. somewhere around 30-40% done.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.52 2007/10/01 07:53:21 brlcad Exp $ (BRL)";
d69 1
a69 1
    char path[512] = {0};
@


14.52
log
@need to only return successful if we find it, otherwise needs to return NULL
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.51 2007/10/01 03:14:41 brlcad Exp $ (BRL)";
d215 1
a215 2
    snprintf(bu_progname, MAXPATHLEN, name ? name : "unknown");

d236 1
a236 1
	snprintf(bu_progname, MAXPATHLEN, argv0);
@


14.51
log
@fugly modification to permit running from finding uninstalled source directory resources (e.g. tclscripts).  searches for this particular file for finding whether we're in a recognizable source directory.  only search four levels deep (should be enough for archer/mged in most of the hierarchy).
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.50 2007/09/15 16:23:08 brlcad Exp $ (BRL)";
d668 2
d674 2
a676 2
	bu_vls_free(&searched);
	return result;
d683 2
d689 2
a691 2
	bu_vls_free(&searched);
	return result;
d698 2
d704 2
a706 2
	bu_vls_free(&searched);
	return result;
d713 2
d719 2
a721 2
	bu_vls_free(&searched);
	return result;
d728 2
d734 2
a736 2
	bu_vls_free(&searched);
	return result;
@


14.50
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.49 2007/09/14 15:21:06 erikgreenwald Exp $ (BRL)";
d661 68
@


14.49
log
@removed trailing whitespace
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.48 2007/05/20 21:54:58 brlcad Exp $ (BRL)";
d41 2
a42 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


14.48
log
@plug a leak valgrind detected, free the searched vls in root/data routines.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.47 2007/05/20 20:20:44 brlcad Exp $ (BRL)";
d244 1
a244 1
    
@


14.47
log
@revamp the implementation of most path-finding routines, and add a new bu_argv0_full_path() routine for determining the full-path to the current executing binary.  remove the atexit memory handler, instead using static buffers.  give bu_ipwd() one more means to determine the current path (via invoking pwd).
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.46 2007/05/15 07:26:50 brlcad Exp $ (BRL)";
d446 1
d462 1
d493 1
d507 1
d517 1
d529 2
d578 1
d594 1
d611 1
d624 1
d637 1
d650 1
d660 1
d672 2
@


14.46
log
@warn during compilation if we don't know how to get the executable's name.  check for null types and values so we at least don't crash.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.45 2007/05/13 08:23:40 brlcad Exp $ (BRL)";
d63 5
d82 2
a83 2
 *	b u _ i p w d
 * @@brief
d93 1
a98 1
#ifdef HAVE_GETENV
d100 14
a113 1
#endif
d120 1
a120 1
 *		b u _ a r g v 0
d128 1
a128 1
bu_argv0(const char *path)
d133 1
a133 1
    /* set our initial pwd if we have not already */
d136 2
a137 2
    if (path) {
	argv0 = path;
a140 1
    /* fallback to getprogname() before returning NULL. */
d142 1
a144 5
#else
#warning "Do not know how to get the name of a running executable on this sytem"
    if (!argv0) {
	argv0 = "unknown"; /* not malloc'd memory */
    }
d151 15
a165 2
/* internal storage for bu_getprogname */
static const char *progname = NULL;
d167 21
a187 6
/* release memory for progname on application exit */
static void
_free_progname(void) {
    if (progname) {
	free((char *)progname);
	progname = NULL;
d189 4
d204 1
a204 1
    const char *name;
d206 2
a207 2
    if (progname) {
	return progname;
d210 6
a215 6
    name = bu_basename(bu_argv0(NULL));
    /* string returned by basename is not ours, get a copy */
    if (name) {
	progname = bu_strdup(name); 
    } else {
	progname = bu_strdup("unknown");
a216 1
    atexit(_free_progname);
d218 4
a221 1
    return progname;
d232 3
a234 1
bu_setprogname(const char *prog) {
d236 5
a240 5
    const char *base = bu_basename(prog);
    if (base) {
	setprogname(base);
    } else {
	setprogname("unknown");
a241 1
#endif
d243 2
a244 1
    (void)bu_argv0(prog);
@


14.45
log
@minor, set to null when freed
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.44 2007/05/12 00:10:24 brlcad Exp $ (BRL)";
d127 5
d167 5
a171 1
    progname = strdup(name); 
d187 6
a192 1
    setprogname(bu_basename(prog));
@


14.44
log
@debug the paths only when BU_DEBUG_PATHS is enabled
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.43 2007/04/18 04:47:19 brlcad Exp $ (BRL)";
d138 1
a138 1
free_progname(void) {
d141 1
d163 1
a163 1
    atexit(free_progname);
@


14.43
log
@BRLCAD_VERSION is now obsolete, remove all references, use brlcad_version() instead for the triplet.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.42 2007/04/18 04:38:23 brlcad Exp $ (BRL)";
a367 2
    /* !!!   bu_debug=1; */

d370 1
a370 1
    if (bu_debug) {
d379 1
a379 1
	    if (bu_debug) {
d394 1
a394 1
	    if (bu_debug) {
d424 1
a424 1
	    if (bu_debug) {
d437 1
a437 1
	    if (bu_debug) {
d446 1
a446 1
	if (bu_debug) {
a492 2
    /* !!!   bu_debug=1; */

d495 1
a495 1
    if (bu_debug) {
d504 1
a504 1
	    if (bu_debug) {
d519 1
a519 1
	    if (bu_debug) {
d535 1
a535 1
	    if (bu_debug) {
d547 1
a547 1
	    if (bu_debug) {
d559 1
a559 1
	    if (bu_debug) {
d571 1
a571 1
	    if (bu_debug) {
d580 1
a580 1
	if (bu_debug) {
@


14.42
log
@remove reference to BRLCAD_VERSION, create brlcad_data() func as needed instead of using BRLCAD_DATA directly
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.41 2007/03/07 13:18:15 d_rossberg Exp $ (BRL)";
d54 4
d197 1
a197 1
	%s\n\n", BRLCAD_VERSION, paths, BRLCAD_ROOT);
d227 1
a227 1
	%s\n\n", BRLCAD_VERSION, paths, brlcad_data());
d534 1
a534 1
    snprintf(path, (size_t)MAXPATHLEN, "share/brlcad/%s", BRLCAD_VERSION);
@


14.41
log
@bu_basename returns a const: variable type fixed (compiler warning)
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.40 2007/03/06 21:05:17 brlcad Exp $ (BRL)";
a54 3
#ifndef BRLCAD_VERSION
#  define BRLCAD_VERSION "xx.xx.xx"
#endif
d58 4
d63 5
a67 1
#  define BRLCAD_DATA BRLCAD_ROOT"/share/brlcad/"BRLCAD_VERSION
d69 1
a69 1

d223 1
a223 1
	%s\n\n", BRLCAD_VERSION, paths, BRLCAD_DATA);
d515 1
a515 1
    lhs = BRLCAD_DATA;
@


14.40
log
@use bu_basename() instead of basename() to encapsulate the portability.  don't need libgen.h header any more.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.39 2007/02/27 13:03:23 d_rossberg Exp $ (BRL)";
d144 1
a144 1
    char *name;
@


14.39
log
@include sysv.h to get the basename prototype (in case HAVE_BASENAME is not defined)
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.38 2007/02/20 03:42:32 brlcad Exp $ (BRL)";
a48 3
#ifdef HAVE_LIBGEN_H
#  include <libgen.h>
#endif
d150 1
a150 1
    name = basename(bu_argv0(NULL));
d168 1
a168 1
    setprogname(basename(prog));
@


14.38
log
@use a filesystem group, these routines have nothing to do with logging
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.37 2007/02/18 20:23:14 brlcad Exp $ (BRL)";
d55 1
@


14.37
log
@basename() is guaranteed by libsysv now, so no need to check for HAVE_BASENAME
@
text
@d20 1
a20 1
/** @@addtogroup bu_log */
d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.36 2007/02/18 20:08:13 brlcad Exp $ (BRL)";
@


14.36
log
@progname is often not the same as argv[0], so modify bu_getprogname() accordingly and expose the bu_argv0() function to distinguish between the two.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.35 2007/02/01 20:26:55 brlcad Exp $ (BRL)";
d146 2
d152 4
a155 11
#ifdef HAVE_BASENAME
    {
	char *name;
	if (!progname) {
	    name = basename(bu_argv0(NULL));
	    /* string returned by basename is not ours, get a copy */
	    progname = strdup(name); 
	    atexit(free_progname);
	}
    }
#endif
a169 1
#  ifdef HAVE_BASENAME
a170 3
#  else
    setprogname(prog);
#  endif
@


14.35
log
@define some default for a configless compile
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.34 2007/01/27 01:41:36 brlcad Exp $ (BRL)";
d49 3
d68 1
d79 2
a80 1
    static const char *pwd = NULL;
d82 2
a83 2
    if (pwd) {
	return pwd;
d87 1
a87 3
    pwd = getenv("PWD");
#else
    pwd = (char *)NULL;
d90 1
a90 1
    return pwd;
d97 4
a100 3
 * set the location of argv[0], used by the brlcad-path-finding
 * routines when attempting to locate binaries, libraries, and
 * resources.  This routine may only be called once to set argv0.
d102 1
a102 1
static const char *
d105 1
d115 4
a118 2
    if (argv0) {
	return (argv0);
a119 6

    /* we were called without a bu_setprogname() so fallback to
     * getprogname() before returning NULL.
     */
#ifdef HAVE_GETPROGNAME
    argv0 = getprogname();
d126 12
d146 17
a162 1
    return bu_argv0(NULL);
d173 1
a173 1
bu_setprogname(const char *progname) {
d175 5
a179 1
    setprogname(progname);
d181 2
a182 1
    (void)bu_argv0(progname);
d375 1
a375 1
	bu_log("bu_brlcad_root: searching for [%s]\n", rhs);
d502 1
a502 1
	bu_log("bu_brlcad_data: looking for [%s]\n", rhs);
@


14.34
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.33 2007/01/23 01:13:34 brlcad Exp $ (BRL)";
d53 11
@


14.33
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.32 2007/01/21 04:45:41 brlcad Exp $ (BRL)";
d54 1
a54 1
/** 
d80 1
a80 1
/** 
a125 1

d203 1
a203 1
 * exist or not.  
d505 1
a505 1
    if (lhs) {	
d517 1
a517 1
    if (lhs) {	
d529 1
a529 1
    if (lhs) {	
@


14.32
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.31 2007/01/20 14:36:51 brlcad Exp $ (BRL)";
@


14.31
log
@update copyright to 2007
@
text
@a20 1

d22 3
a24 2
/*@@{*/
/**  @@file brlcad_path.c
d29 2
a30 2
 *  @@author	Christopher Sean Morrison
 *  @@author	Michael John Muuss
d32 1
a32 1
 *  @@par Source
d36 1
a36 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.30 2007/01/17 19:36:49 erikgreenwald Exp $ (BRL)";
d585 1
a585 1
/*@@}*/
@


14.30
log
@type fixes (size_t isn't necessarily unsigned int, signed vs unsigned, etc)
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d36 1
a36 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.29 2006/08/31 23:16:38 lbutler Exp $ (BRL)";
@


14.29
log
@Doxygen comments
@
text
@d36 1
a36 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.28 2006/08/31 05:50:24 lbutler Exp $ (BRL)";
d258 2
a259 2
    memset(result, 0, MAXPATHLEN);
    strncpy(result, lhs, MAXPATHLEN);
d287 1
a287 1
    strncpy(result+llen, rhs, MAXPATHLEN - llen);
d325 1
a325 1
    char where[MAXPATHLEN + 64] = {0};
d338 1
a338 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT environment variable [%s]\n", lhs);
d346 1
a346 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT environment variable\n");
d353 1
a353 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT compile-time path [%s]\n", lhs);
d361 1
a361 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT compile-time path [UNKNOWN]\n");
d368 1
a368 1
	char argv0[MAXPATHLEN + 64] = {0};
d370 1
a370 1
	snprintf(argv0, MAXPATHLEN + 64, "%s", lhs);
d383 1
a383 1
	snprintf(where, MAXPATHLEN + 64, "\trun-time path identification [%s]\n", argv0);
d391 1
a391 1
	snprintf(where, MAXPATHLEN + 64, "\trun-time path identification [UNKNOWN]\n");
d396 1
a396 1
    if (strncmp("/usr/brlcad", BRLCAD_ROOT, 12) != 0) {
d451 1
a451 1
    char where[MAXPATHLEN + 64] = {0};
d465 1
a465 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA environment variable [%s]\n", lhs);
d473 1
a473 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA environment variable\n");
d480 1
a480 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA compile-time path [%s]\n", lhs);
d488 1
a488 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA compile-time path [UNKNOWN]\n");
d493 1
a493 1
    snprintf(path, MAXPATHLEN, "share/brlcad/%s", BRLCAD_VERSION);
d496 1
a496 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", path);
d508 1
a508 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
d520 1
a520 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
d532 1
a532 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
@


14.28
log
@Mostly doxygen formatting.
@
text
@d22 1
a22 1
/** @@addtogroup libbu */
d36 1
a36 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.27 2006/02/03 02:07:53 brlcad Exp $ (BRL)";
@


14.27
log
@use bu_getprogname/bu_setprogname instead of bu_argv0
@
text
@d22 1
a22 1
/** \addtogroup libbu */
d24 2
a25 1
/** @@file brlcad_path.c
d29 2
a30 3
 *  Author -
 *	Christopher Sean Morrison
 *	Michael John Muuss
d32 2
a33 2
 *  Source -
 *	The U. S. Army Research Laboratory
a34 1
 *
d36 1
a36 2
/*@@}*/
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.26 2006/02/03 01:49:42 brlcad Exp $ (BRL)";
d55 3
a57 2
/** b u _ i p w d
 *
d81 2
a82 1
/** b u _ a r g v 0
d86 1
a86 1
 * resources.  this routine may only be called once to set argv0.
d130 1
a130 1
 * set the name of the running application.  this isn't necessary on
d203 5
a207 2
/* put a left-hand and right-hand path together and test whether they
 * exist or not.  returns boolean on whether a match was found.
d300 2
a301 2
/*	B U _ B R L C A D _ R O O T
 *
d314 1
d425 2
a426 1
/*	B U _ B R L C A D _ D A T A
d428 1
d560 1
a560 1
/*
d563 2
a564 1
 *  DEPRECATED, do not use.  Locate where the BRL-CAD programs and
d585 1
a585 1

@


14.26
log
@make bu_argv0() static, it shouldn't be called by programs any longer.  instead, programs should use bu_getprogname() and bu_setprogname() to mimic the stdlib interface functions of similar name.  if the stdlib interface routines are available, they'll get used.
@
text
@d38 1
a38 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.25 2006/01/18 06:46:16 brlcad Exp $ (BRL)";
d362 1
a362 1
    lhs = bu_argv0(NULL);
@


14.25
log
@update copyright to 2006
@
text
@a36 1

d38 1
a38 4


static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.24 2005/12/23 21:26:30 bob1961 Exp $ (BRL)";

d42 1
a43 3
#ifdef HAVE_STDLIB_H
#  include <stdlib.h>
#endif
d60 1
a60 1
 * bu_set_argv0() must be called on app startup for the correct pwd to
d75 1
a75 1
    pwd = ".";
d88 1
a88 1
const char *
d93 7
d104 6
a109 4
    if (path) {
	argv0 = path;
	(void)bu_ipwd();
    }
d114 10
a123 3
void prtarg() {
    bu_log("argv0 is %s\n", bu_argv0(NULL));
    bu_log("pwd is %s\n", bu_ipwd());
d126 18
d557 6
a562 6
 *  Locate where the BRL-CAD programs and libraries are located,
 *  contatenate on the rest of the string provided by the caller,
 *  and return a pointer to a STATIC buffer with the full path.
 *  It is the caller's responsibility to call bu_strdup() or make
 *  other provisions to save the returned string, before calling again.
 *  bu_bomb() if unable to find the base path.
@


14.24
log
@Merge of bobWinPort
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d41 1
a41 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.23 2005/10/23 04:44:32 brlcad Exp $ (BRL)";
@


14.23
log
@trailing ws
@
text
@d41 1
a41 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.22 2005/08/16 20:33:48 brlcad Exp $ (BRL)";
d473 1
a473 1
    if (lhs) {
d485 1
a485 1
    if (lhs) {
d497 1
a497 1
    if (lhs) {
@


14.22
log
@remove the SNPRINTF define since it should be safe to use snprintf() now that it's properly accounted for in config_win.h as a compat function
@
text
@d35 1
a35 1
 *  
d41 1
a41 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.21 2005/08/15 20:57:41 bob1961 Exp $ (BRL)";
d107 1
a107 1
    
d203 1
a203 1
    
d225 1
a225 1
    
d229 1
a229 1
    
d234 1
a234 1
    
d260 1
a260 1
    
d473 1
a473 1
    if (lhs) {	
d485 1
a485 1
    if (lhs) {	
d497 1
a497 1
    if (lhs) {	
@


14.22.2.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d35 1
a35 1
 *
d41 1
a41 1
static const char RCSbrlcad_path[] = "@@(#)$Header$ (BRL)";
d107 1
a107 1

d203 1
a203 1

d225 1
a225 1

d229 1
a229 1

d234 1
a234 1

d260 1
a260 1

d473 1
a473 1
    if (lhs) {
d485 1
a485 1
    if (lhs) {
d497 1
a497 1
    if (lhs) {
@


14.21
log
@Use SNPRINTF macro defined in bu.h
@
text
@d41 1
a41 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.20 2005/08/12 22:29:23 lbutler Exp $ (BRL)";
d306 1
a306 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT environment variable [%s]\n", lhs);
d314 1
a314 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT environment variable\n");
d321 1
a321 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT compile-time path [%s]\n", lhs);
d329 1
a329 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT compile-time path [UNKNOWN]\n");
d338 1
a338 1
	SNPRINTF(argv0, MAXPATHLEN + 64, "%s", lhs);
d351 1
a351 1
	SNPRINTF(where, MAXPATHLEN + 64, "\trun-time path identification [%s]\n", argv0);
d359 1
a359 1
	SNPRINTF(where, MAXPATHLEN + 64, "\trun-time path identification [UNKNOWN]\n");
d431 1
a431 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_DATA environment variable [%s]\n", lhs);
d439 1
a439 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_DATA environment variable\n");
d446 1
a446 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_DATA compile-time path [%s]\n", lhs);
d454 1
a454 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_DATA compile-time path [UNKNOWN]\n");
d459 1
a459 1
    SNPRINTF(path, MAXPATHLEN, "share/brlcad/%s", BRLCAD_VERSION);
d462 1
a462 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", path);
d474 1
a474 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
d486 1
a486 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
d498 1
a498 1
	SNPRINTF(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
@


14.21.2.1
log
@Mods for windows port
@
text
@d41 1
a41 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.21 2005/08/15 20:57:41 bob1961 Exp $ (BRL)";
d306 1
a306 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT environment variable [%s]\n", lhs);
d314 1
a314 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT environment variable\n");
d321 1
a321 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT compile-time path [%s]\n", lhs);
d329 1
a329 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT compile-time path [UNKNOWN]\n");
d338 1
a338 1
	snprintf(argv0, MAXPATHLEN + 64, "%s", lhs);
d351 1
a351 1
	snprintf(where, MAXPATHLEN + 64, "\trun-time path identification [%s]\n", argv0);
d359 1
a359 1
	snprintf(where, MAXPATHLEN + 64, "\trun-time path identification [UNKNOWN]\n");
d431 1
a431 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA environment variable [%s]\n", lhs);
d439 1
a439 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA environment variable\n");
d446 1
a446 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA compile-time path [%s]\n", lhs);
d454 1
a454 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA compile-time path [UNKNOWN]\n");
d459 1
a459 1
    snprintf(path, MAXPATHLEN, "share/brlcad/%s", BRLCAD_VERSION);
d462 1
a462 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", path);
d474 1
a474 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
d486 1
a486 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
d498 1
a498 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
@


14.20
log
@Doxygen changes
@
text
@d41 1
a41 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.19 2005/07/25 05:57:10 brlcad Exp $ (BRL)";
d306 1
a306 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT environment variable [%s]\n", lhs);
d314 1
a314 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT environment variable\n");
d321 1
a321 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT compile-time path [%s]\n", lhs);
d329 1
a329 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT compile-time path [UNKNOWN]\n");
d338 1
a338 1
	snprintf(argv0, MAXPATHLEN + 64, "%s", lhs);
d351 1
a351 1
	snprintf(where, MAXPATHLEN + 64, "\trun-time path identification [%s]\n", argv0);
d359 1
a359 1
	snprintf(where, MAXPATHLEN + 64, "\trun-time path identification [UNKNOWN]\n");
d431 1
a431 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA environment variable [%s]\n", lhs);
d439 1
a439 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA environment variable\n");
d446 1
a446 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA compile-time path [%s]\n", lhs);
d454 1
a454 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_DATA compile-time path [UNKNOWN]\n");
d459 1
a459 1
    snprintf(path, MAXPATHLEN, "share/brlcad/%s", BRLCAD_VERSION);
d462 1
a462 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", path);
d474 1
a474 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
d486 1
a486 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
d498 1
a498 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
@


14.19
log
@add run-time path locating, using the argv[0] value along with bu_which to find where we're running the binary from.  the path given may then be relatively checked for a lib/resource dir.  add debug messages for testing controlled by the bu_debug global
@
text
@d21 3
a24 1
 *
d37 6
a42 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.18 2005/07/24 19:47:41 brlcad Exp $ (BRL)";
@


14.18
log
@add a bu_argv0 and bu_ipwd for setting/getting the initial argv[0] value and the initial pwd
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.17 2005/07/24 17:02:16 brlcad Exp $ (BRL)";
d272 1
a272 1
 *   [ Unimplemented: run-time identification ]
d288 2
d292 4
d301 3
d316 3
d326 29
a354 2
    /* [ Unimplemented: run-time identification ] */
    /* ... */
d359 3
d368 3
d413 2
d417 4
d426 3
d441 3
d457 3
d463 1
a463 1
	
d469 3
d475 1
a475 1
	
d481 3
d493 3
d502 3
@


14.17
log
@separate bu_file_exists out of brlcad_path.c into its own file stat.c
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.16 2005/07/18 05:12:52 brlcad Exp $ (BRL)";
d56 57
a112 2
/* print out an error/warning message if we cannot find the specified
 * BRLCAD_ROOT
d138 4
a141 2
/* print out an error/warning message if we cannot find the specified
 * BRLCAD_DATA
@


14.16
log
@MAXPATHLEN is now in bu.h, no need to abort if searched and where arguments to bu_find_path are NULL, make bu_find_path static like it is supposed to be
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.15 2005/07/18 02:21:57 brlcad Exp $ (BRL)";
a47 3
#ifdef HAVE_SYS_STAT_H
#  include <sys/stat.h>
#endif
a55 26
/*
 *			B U _ F I L E _ E X I S T S
 *
 *  Returns boolean -
 *	1	The given filename exists.
 *	0	The given filename does not exist.
 */
int
bu_file_exists(const char *path)
{
	struct	stat	sbuf;

	if( path == NULL )  return 0;			/* FAIL */

	/* defined in unistd.h */
#if defined(F_OK)
	if( access( path, F_OK )  == 0 )  return 1;	/* OK */
#endif

	/* does it exist as a filesystem entity? */
	if( stat( path, &sbuf ) == 0 )  return 1;	/* OK */

	return 0;					/* FAIL */
}


@


14.15
log
@searched results string is optional
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.14 2005/07/18 02:09:34 brlcad Exp $ (BRL)";
a57 4
#ifndef MAXPATHLEN
#  define MAXPATHLEN 1024
#endif

d143 1
a143 1
int
a176 3
    if (!searched || !where) {
	bu_bomb("someone is using the presumably static bu_find_path function wrong");
    }
@


14.14
log
@improve the path failure reporting with customized messages for data vs root searching.  fix the 'bug' of adding a trailing slash when there is no right-hand side.  if the left-hand side is empty, let that imply a current directory.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.13 2005/07/17 04:10:35 brlcad Exp $ (BRL)";
d162 3
a164 1
	bu_vls_strcat(searched, where);
d176 3
a178 1
	bu_vls_strcat(searched, where);
d192 3
a194 1
	bu_vls_strcat(searched, where);
d211 3
a213 1
	bu_vls_strcat(searched, where);
d234 3
a236 1
    bu_vls_strcat(searched, where);
@


14.13
log
@report what right-hand path is being searched for correctly
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.12 2005/07/11 01:10:57 brlcad Exp $ (BRL)";
d90 1
a90 1
 * paths.
d93 1
a93 1
bu_path_results(const char *paths)
d96 1
a96 1
Unable to locate where BRL-CAD is installed while searching:\n\
d98 2
a99 2
This version of BRL-CAD (%s) was compiled to be installed at:\n\
	%s\n\n", paths, BRLCAD_VERSION, BRLCAD_ROOT);
d104 1
a104 1
environment variable.\n\
d106 1
a106 1
For csh/tcsh users:\n\
d108 30
a137 3
For sh/bash users:\n\
	BRLCAD_ROOT=/path/to/brlcad\n\
	export BRLCAD_ROOT\n\n");
d151 1
d180 6
a185 1
        
d197 1
a197 1
    if (!rhs) {
d218 1
a218 1
        
d220 1
a220 1
   strncpy(result+llen, rhs, MAXPATHLEN - llen);
d299 1
a299 1
	bu_path_results(bu_vls_addr(&searched));
a320 1
 *   bu_brlcad_root/share/brlcad path
a321 1
 *   current directory/src
d365 3
a367 3
    lhs = bu_brlcad_root(path, fail_quietly);
    if (lhs) {	
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path [%s]\n", path);
d374 1
a374 1
    lhs = bu_brlcad_root("share/brlcad", fail_quietly);
d376 1
a376 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path [%s]\n", path);
d383 1
a383 1
    lhs = bu_brlcad_root("share", fail_quietly);
d385 1
a385 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path [%s]\n", path);
d392 1
a392 1
    lhs = bu_brlcad_root("", fail_quietly);
d394 1
a394 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path [%s]\n", path);
a399 5
    /* current directory/src (running from uninstalled source distribution) */
    if (bu_find_path(result, "./src", rhs, &searched, "\t'src' in current directory\n")) {
	return result;
    }

d406 6
a411 2
	bu_path_results(bu_vls_addr(&searched));
	bu_log("Unable to find '%s' within the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n");
@


14.12
log
@another off-by-one -- it should be '/usr/brlcad/bin' not '/usr/brlcad/\0bin'
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.11 2005/07/11 00:58:47 brlcad Exp $ (BRL)";
d267 5
a271 1
	bu_log("Unable to find '%s' within the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n");
@


14.12.2.1
log
@merge in changes through Aug10 for 7.4.2 release
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.19 2005/07/25 05:57:10 brlcad Exp $ (BRL)";
d48 3
d58 4
d63 2
a64 1
/** b u _ i p w d
d66 3
a68 3
 * set/return the path to the initial working directory.
 * bu_set_argv0() must be called on app startup for the correct pwd to
 * be acquired/set.
d70 2
a71 2
static const char *
bu_ipwd()
d73 1
a73 1
    static const char *pwd = NULL;
d75 1
a75 3
    if (pwd) {
	return pwd;
    }
d77 3
a79 4
#ifdef HAVE_GETENV
    pwd = getenv("PWD");
#else
    pwd = ".";
d82 2
a83 18
    return pwd;
}


/** b u _ a r g v 0
 *
 * set the location of argv[0], used by the brlcad-path-finding
 * routines when attempting to locate binaries, libraries, and
 * resources.  this routine may only be called once to set argv0.
 */
const char *
bu_argv0(const char *path)
{
    static const char *argv0 = NULL;

    if (argv0) {
	return (argv0);
    }
d85 1
a85 6
    if (path) {
	argv0 = path;
	(void)bu_ipwd();
    }
    
    return argv0;
a87 4
void prtarg() {
    bu_log("argv0 is %s\n", bu_argv0(NULL));
    bu_log("pwd is %s\n", bu_ipwd());
}
d89 2
a90 4
/** b u _ r o o t _ m i s s i n g
 *
 *print out an error/warning message if we cannot find the specified
 * BRLCAD_ROOT (compile-time install path)
d93 1
a93 1
bu_root_missing(const char *paths)
d96 1
a96 1
Unable to locate where BRL-CAD %s is installed while searching:\n\
d98 2
a99 2
This version of BRL-CAD was compiled to be installed at:\n\
	%s\n\n", BRLCAD_VERSION, paths, BRLCAD_ROOT);
d104 1
a104 1
environment variable.  For example:\n\
d106 1
a106 1
for csh/tcsh users:\n\
d108 3
a110 32
for sh/bash users:\n\
	BRLCAD_ROOT=/path/to/brlcad ; export BRLCAD_ROOT\n\n");
#endif

    return;
}


/** b u _ d a t a _ m i s s i n g
 *
 * print out an error/warning message if we cannot find the specified
 * BRLCAD_DATA (compile-time install path)
 */
static void
bu_data_missing(const char *paths)
{
    bu_log("\
Unable to locate where BRL-CAD %s data resources are installed\n\
while searching:\n\
%s\n\
This release of BRL-CAD expects data resources to be at:\n\
	%s\n\n", BRLCAD_VERSION, paths, BRLCAD_DATA);

#ifndef _WIN32
    bu_log("\
You may specify where to locate BRL-CAD data resources by setting\n\
the BRLCAD_DATA environment variable.  For example:\n\
\n\
for csh/tcsh users:\n\
	setenv BRLCAD_DATA /path/to/brlcad/data\n\
for sh/bash users:\n\
	BRLCAD_DATA=/path/to/brlcad/data ; export BRLCAD_DATA\n\n");
d120 1
a120 1
static int
a123 1
    static const char *currdir=".";
d134 1
a134 3
	if (searched && where) {
	    bu_vls_strcat(searched, where);
	}
d146 1
a146 3
	if (searched && where) {
	    bu_vls_strcat(searched, where);
	}
d149 2
a150 4

    /* an empty left hand implies current directory (plus a slash is appended later) */
    if (lhs[0] == '\0') {
	lhs = currdir;
d152 1
a152 1

d155 1
a155 3
	if (searched && where) {
	    bu_vls_strcat(searched, where);
	}
d164 1
a164 1
    if (!rhs || (rlen == 0)) {
d172 1
a172 3
	if (searched && where) {
	    bu_vls_strcat(searched, where);
	}
d185 1
a185 1

d187 1
a187 1
    strncpy(result+llen, rhs, MAXPATHLEN - llen);
d193 1
a193 3
    if (searched && where) {
	bu_vls_strcat(searched, where);
    }
d208 1
a208 1
 *   run-time path identification
a223 2
    /* !!!   bu_debug=1; */

a225 4
    if (bu_debug) {
	bu_log("bu_brlcad_root: searching for [%s]\n", rhs);
    }

a230 3
	    if (bu_debug) {
		bu_log("Found: BRLCAD_ROOT environment variable [%s]\n", result);
	    }
a242 3
	    if (bu_debug) {
		bu_log("Found: BRLCAD_ROOT compile-time path [%s]\n", result);
	    }
d250 2
a251 29
    /* run-time path identification */
    lhs = bu_argv0(NULL);
    if (lhs) {
	char argv0[MAXPATHLEN + 64] = {0};
	int len = strlen(lhs);
	snprintf(argv0, MAXPATHLEN + 64, "%s", lhs);

	/* need to trim off the trailing binary */
	while (len-1 > 0) {
	    if (argv0[len-1] == BU_DIR_SEPARATOR) {
		argv0[len] = '.';
		argv0[len+1] = '.';
		argv0[len+2] = '\0';
		break;
	    }
	    len--;
	}

	snprintf(where, MAXPATHLEN + 64, "\trun-time path identification [%s]\n", argv0);
	if (bu_find_path(result, argv0, rhs, &searched, where)) {
	    if (bu_debug) {
		bu_log("Found: Run-time path identification [%s]\n", result);
	    }
	    return result;
	}
    } else {
	snprintf(where, MAXPATHLEN + 64, "\trun-time path identification [UNKNOWN]\n");
	bu_vls_strcat(&searched, where);
    }
a255 3
	    if (bu_debug) {
		bu_log("Found: /usr/brlcad default path [%s]\n", result);
	    }
a261 3
	if (bu_debug) {
	    bu_log("Found: current directory [%s]\n", result);
	}
d266 2
a267 6
	bu_root_missing(bu_vls_addr(&searched));
	if (rhs) {
	    bu_log("Unable to find '%s' within the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n", rhs);
	} else {
	    bu_log("Unable to find the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n");
	}
d284 1
d286 1
a301 2
    /* !!!   bu_debug=1; */

a303 4
    if (bu_debug) {
	bu_log("bu_brlcad_data: looking for [%s]\n", rhs);
    }

a308 3
	    if (bu_debug) {
		bu_log("Found: BRLCAD_DATA environment variable [%s]\n", result);
	    }
a320 3
	    if (bu_debug) {
		bu_log("Found: BRLCAD_DATA compile-time path [%s]\n", result);
	    }
d330 3
a332 3
    lhs = bu_brlcad_root(path, 1);
    if (lhs) {
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", path);
a333 3
	    if (bu_debug) {
		bu_log("Found: BRLCAD_ROOT common data path [%s]\n", result);
	    }
d337 1
a337 1

d339 1
a339 1
    lhs = bu_brlcad_root("share/brlcad", 1);
d341 1
a341 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
a342 3
	    if (bu_debug) {
		bu_log("Found: BRLCAD_ROOT common data path [%s]\n", result);
	    }
d346 1
a346 1

d348 1
a348 1
    lhs = bu_brlcad_root("share", 1);
d350 1
a350 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
a351 3
	    if (bu_debug) {
		bu_log("Found: BRLCAD_ROOT common data path [%s]\n", result);
	    }
d357 1
a357 1
    lhs = bu_brlcad_root("", 1);
d359 1
a359 1
	snprintf(where, MAXPATHLEN + 64, "\tBRLCAD_ROOT common data path  [%s]\n", lhs);
a360 3
	    if (bu_debug) {
		bu_log("Found: BRLCAD_ROOT common data path [%s]\n", result);
	    }
d365 5
a371 3
	if (bu_debug) {
	    bu_log("Found: current directory [%s]\n", result);
	}
d376 2
a377 6
	bu_data_missing(bu_vls_addr(&searched));
	if (rhs) {
	    bu_log("Unable to find '%s' within the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n", rhs);
	} else {
	    bu_log("Unable to find the BRL-CAD software installation.\nThis copy of BRL-CAD may not be properly installed.\n\n");
	}
@


14.11
log
@compute the left-hand path length _before_ using it so that it doesn't end up smushing together something like /usr/brlcadtclscripts.  also only need to match one of two join cases since rhs is only one or the other.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.10 2005/07/08 00:00:48 brlcad Exp $ (BRL)";
d187 1
a187 1
    strncpy(result+llen+1, rhs, MAXPATHLEN - llen);
@


14.10
log
@woosh! a complete rewrite of the brl-cad location routine.. bu_brlcad_path is now quite deprecated, being replaced by bu_brlcad_data and bu_brlcad_root depending on wheter you are looking for data resources or not.  the routines presently no longer bomb and search with quite a bit more methodology than before.  for bu_brlcad_root, the search order is now BRLCAD_ROOT environment variable then BRLCAD_ROOT compile-time path then /usr/brlcad then current dir.  for bu_brlcad_path, the search order is now BRLCAD_DATA environment variable then BRLCAD_DATA compile-time path then bu_brlcad_root/share/brlcad/VERSION then bu_brlcad_root/share/brlcad then bu_brlcad_root then ./src then current dir.  this separation allows for a fully-integrated system installation.
@
text
@d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.9 2005/05/28 02:14:50 brlcad Exp $ (BRL)";
a167 12
    /* let the caller give "/usr/brlcad" and "bin" and get "/usr/brlcad/bin" */
    if ( (*(result+llen-1) != BU_DIR_SEPARATOR) && (rhs[0] != BU_DIR_SEPARATOR) ) {
	*(result+llen) = BU_DIR_SEPARATOR;
	llen++;
    }
    
    /* let the caller give "/usr/brlcad/" and "/bin" and get "/usr/brlcad/bin" */
    if ( (*(result+llen-1) == BU_DIR_SEPARATOR) && (rhs[0] == BU_DIR_SEPARATOR) ) {
	rhs++;
	rlen--;
    }
    
d175 11
a185 1
    
@


14.9
log
@convert WIN32 define checks to _WIN32 since the latter is one of the defaults provided by MSVC whereas the prior is not.  remove some of them related to header inclusions using HAVE_ defines instead.
@
text
@d27 1
d35 1
a35 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.8 2005/03/24 16:16:10 bob1961 Exp $ (BRL)";
a38 2


d40 3
a42 1
#include <sys/stat.h>
d44 1
a44 1
#include <string.h>
d46 7
a52 1
#include <strings.h>
d58 5
d82 1
d84 1
d88 296
d385 1
a385 1
 *			B U _ B R L C A D _ P A T H
a397 48
	static char	result[256];
	char		*lhs;

	lhs = BRLCAD_ROOT;
	if( bu_file_exists(lhs) )
		goto ok;

	if( (lhs = getenv("BRLCAD_ROOT")) != NULL )  {
#ifdef _WIN32
	    {
		int len = strlen(lhs);

		if (lhs[len-1] == '\\')
		    lhs[len-1] = '\0';
	    }
#endif

		if( bu_file_exists(lhs) )
			goto ok;
		if (fail_quietly) {
		  return NULL;
		}

		bu_log("\
Unable to find the directory that BRL-CAD is installed in while seeking: \n\
	%s\n\
This version of LIBBU was compiled to expect BRL-CAD in: \n\
	%s\n\
but it is no longer there. \n\
  After you manually locate BRL-CAD,\n\
please set your environment variable BRLCAD_ROOT to the correct path,\n\
and re-run this program.\n\
\n\
csh/tcsh users:\n\
	setenv BRLCAD_ROOT %s\n\
sh/bash users:\n\
	BRLCAD_ROOT=%s; export BRLCAD_ROOT\n",
	       rhs, BRLCAD_ROOT , lhs, lhs);
	}

	/* Can't find the BRL-CAD root directory, this is fatal! */
	/* Could use some huristics here, but being overly clever is probably bad. */

	if (fail_quietly) {
	  return NULL;
	}


d399 3
a401 8
Unable to find the directory that BRL-CAD is installed in while seeking: \n\
	%s\n\
This version of LIBBU was compiled to expect BRL-CAD in: \n\
	%s\n\
but it is no longer there. \n\
  After you manually locate BRL-CAD,\n\
please set your environment variable BRLCAD_ROOT to the correct path,\n\
and re-run this program.\n\
d403 2
a404 31
csh/tcsh users:\n\
	setenv BRLCAD_ROOT /path/to/brlcad\n\
sh/bash users:\n\
	BRLCAD_ROOT=/path/to/brlcad; export BRLCAD_ROOT\n",
	       rhs, BRLCAD_ROOT );

	bu_bomb("bu_brlcad_path()");

ok:
#ifndef _WIN32
	sprintf(result, "%s/%s", lhs, rhs );
#else
	if(strcmp(rhs,"")==0)
		sprintf(result, "%s", lhs );
	else
		sprintf(result, "%s\\%s", lhs, rhs );
#endif
	if( bu_file_exists(result) )
		return result;			/* OK */

	if (fail_quietly) {
	  return NULL;
	}

	bu_log("\
Unable to find '%s' within the BRL-CAD\n\
software installed in '%s'.\n\
This copy of BRL-CAD does not appear to be fully installed.\n\
Please contact your system administrator for assistance.\n",
	rhs, lhs );
	bu_bomb("bu_brlcad_path()");
d406 1
a406 1
	return NULL;				/* NOTREACHED */
@


14.8
log
@Add code to remove '\' from the end of the path (Windows Only); it causes bu_file_exists test to fail
@
text
@d34 1
a34 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.7 2005/01/30 20:30:45 brlcad Exp $ (BRL)";
d96 1
a96 1
#ifdef WIN32
d155 1
a155 1
#ifndef WIN32
@


14.7
log
@update copyright to 2005
@
text
@d34 1
a34 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.6 2005/01/29 04:37:15 brlcad Exp $ (BRL)";
d96 9
@


14.6
log
@s/INSTALL_DIRECTORY/BRLCAD_ROOT/ whilst fixing the undefined prefix configure problem
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d34 1
a34 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/brlcad_path.c,v 14.5 2004/12/21 07:18:57 morrison Exp $ (BRL)";
@


14.5
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d34 1
a34 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 14.4 2004/12/21 06:18:43 morrison Exp $ (BRL)";
d91 1
a91 1
	lhs = INSTALL_DIRECTORY ;
d116 1
a116 1
	       rhs, INSTALL_DIRECTORY , lhs, lhs);
d141 1
a141 1
	       rhs, INSTALL_DIRECTORY );
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 2
 *  Distribution Status -
 *      Public Domain, Distribution Unlimitied.
d34 1
a34 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 14.3 2004/12/21 05:45:20 morrison Exp $ (BRL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d36 1
a36 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 14.2 2004/12/21 03:49:00 morrison Exp $ (BRL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d36 1
a36 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 14.1 2004/11/16 19:42:13 morrison Exp $ (BRL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			B R L C A D _ P A T H . C
d36 1
a36 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 1.7 2004/10/29 21:45:31 butler Exp $ (BRL)";
@


1.7
log
@Changes to allow BRLCAD to be relocated after installation.  We now look in
the installed path, and ONLY IF THAT ISN'T FOUND do we look at the BRLCAD_ROOT
environment variable.  This will allow the AJEM folks to run BRLCAD from
anywhere (since their installer wraps ajem in a script that sets all the
necessary environment variables) while still eliminating the problem we have
at ARL with people running one version of BRLCAD with the scripts and
libraries from another version of BRLCAD.

With luck, this is the last !@@#$%^ patch before Release 7.0 is really, truly
actually absolutely out the door.
@
text
@d17 1
a17 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 1.6 2004/10/22 18:44:30 butler Exp $ (BRL)";
d154 10
@


1.6
log
@changes to eliminate BRLCAD_ROOT
@
text
@d17 1
a17 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 1.5 2004/10/14 19:19:29 morrison Exp $ (BRL)";
d74 4
a77 6
/* The BRLCAD_ROOT symbol has given us loads of problems.
 * This replaces it with the (hopefully more reasonable)
 * directory path specified at compilation time.
 */
#if USE_BRLCAD_ROOT
	/* The environment variable, if set, takes priority */
d84 16
a99 2
		bu_log("You set environment variable BRLCAD_ROOT to '%s', which does not exist.  Seeking=%s\n", lhs, rhs);
		bu_bomb("bu_brlcad_path()");
a101 17
	/* The compiled-in path is used next. */
# ifdef BRLCAD_ROOT
	lhs = BRLCAD_ROOT;
# else
#   ifndef WIN32
	lhs = PREFIX;
#   else
	/* XXX nastiness that will need to be made dynamic
	lhs = "C:\\brlcad";  /* change as needed*/
#   endif
# endif
#else
	lhs = INSTALL_DIRECTORY ;
#endif
	if( bu_file_exists(lhs) )
		goto ok;

d108 2
a109 1
#if USE_BRLCAD_ROOT
d121 1
a121 1
	setenv BRLCAD_ROOT %s\n\
d123 3
a125 11
	BRLCAD_ROOT=%s; export BRLCAD_ROOT\n",
	       rhs, lhs, lhs, lhs);
#else
	bu_log("\
Unable to find the directory that BRL-CAD is installed in while seeking: \n\
	%s\n\
This version of LIBBU was compiled to expect BRL-CAD in: \n\
	%s\n\
but it is no longer there.\n",
	       rhs, lhs);
#endif
d145 1
a145 1
Unable to find the '%s' subdirectory within the BRL-CAD\n\
@


1.5
log
@add an option to bu_brlcad_path to fail quietly, returning a NULL string instead of gobs of output and bu_bomb'ing
@
text
@d17 1
a17 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 1.4 2004/09/03 23:30:57 morrison Exp $ (BRL)";
d74 5
d91 1
a91 1
#ifdef BRLCAD_ROOT
d93 2
a94 2
#else
#ifndef WIN32
d96 1
a96 1
#else
d99 4
a102 1
#endif
d113 1
d119 2
a120 1
but it is no longer there.  After you manually locate BRL-CAD,\n\
d129 9
@


1.4
log
@USE_STRING_H is no more.. it's HAVE_STRING_H
@
text
@d17 1
a17 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 1.3 2004/08/02 23:01:48 morrison Exp $ (BRL)";
d69 1
a69 1
bu_brlcad_path(const char *rhs)
d78 3
d102 3
d118 1
a118 1
		rhs, lhs, lhs, lhs);
d132 4
@


1.3
log
@replace the wrapped config.h block with common.h
@
text
@d17 1
a17 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/src/libbu/brlcad_path.c,v 1.2 2004/06/08 19:28:49 morrison Exp $ (BRL)";
d25 1
a25 1
#ifdef USE_STRING_H
@


1.2
log
@poof goes the silly externs.h
@
text
@d17 1
a17 1
static const char RCSbrlcad_path[] = "@@(#)$Header$ (BRL)";
d19 1
a19 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d17 1
a17 1
static const char RCSbrlcad_path[] = "@@(#)$Header: /cvs/brlcad/libbu/brlcad_path.c,v 11.13 2004/05/10 15:30:44 erikg Exp $ (BRL)";
a33 1
#include "externs.h"
@

