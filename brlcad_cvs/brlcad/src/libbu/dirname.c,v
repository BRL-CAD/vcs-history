head	1.3;
access;
symbols
	rel-7-10-4:1.2
	STABLE:1.2.0.2
	rel-7-10-2:1.2
	rel-7-10-0:1.2;
locks; strict;
comment	@ * @;


1.3
date	2007.09.15.16.23.08;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.06.20.35.30;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.20.01.03.49;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@more c89 embracing.  c89 provides string.h for all of the various str*() and mem*() functions, so remove the check for its presence.  there is still likely to be work required for strict c89 conformance for the various bsd strings.h functions that may be in use.
@
text
@/*                      D I R N A M E . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup filesystem */
/** @@{ */
/** @@file dirname.c
 *
 * @@brief
 * Routines to process path names.
 *
 * @@author      Christopher Sean Morrison
 */

#ifndef lint
static const char RCSmalloc[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/dirname.c,v 1.2 2007/03/06 20:35:30 brlcad Exp $ (ARL)";
#endif

#include "common.h"

#include <string.h>

#include "machine.h"
#include "bu.h"


/**
 *			B U _ D I R N A M E
 *
 *  Given a filesystem pathname, return a pointer to a dynamic string
 *  which is the parent directory of that file/directory.
 *
 *	/usr/dir/file	/usr/dir
 * @@n	/usr/dir/	/usr
 * @@n	/usr/file	/usr
 * @@n	/usr/		/
 * @@n	/usr		/
 * @@n	/		/
 * @@n	.		.
 * @@n	..		.
 * @@n	usr		.
 * @@n	a/b		a
 * @@n	a/		.
 * @@n	../a/b		../a
 */
char *
bu_dirname(const char *cp)
{
    char	*ret;
    char	*slash;
    int	len;

    /* Special cases */
    if( cp == NULL )  return bu_strdup(".");
    if( strcmp( cp, "/" ) == 0 )
	return bu_strdup("/");
    if( strcmp( cp, "." ) == 0 ||
	strcmp( cp, ".." ) == 0 ||
	strrchr(cp, '/') == NULL )
	return bu_strdup(".");

    /* Make a duplicate copy of the string, and shorten it in place */
    ret = bu_strdup(cp);

    /* A trailing slash doesn't count */
    len = strlen(ret);
    if( ret[len-1] == '/' )  ret[len-1] = '\0';

    /* If no slashes remain, return "." */
    if( (slash = strrchr(ret, '/')) == NULL )  {
	bu_free( ret, "bu_dirname" );
	return bu_strdup(".");
    }

    /* Remove trailing slash, unless it's at front */
    if( slash == ret )
	ret[1] = '\0';		/* ret == "/" */
    else
	*slash = '\0';

    return ret;
}

/** @@} */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


1.2
log
@ws
@
text
@d31 1
a31 1
static const char RCSmalloc[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/dirname.c,v 1.1 2007/02/20 01:03:49 brlcad Exp $ (ARL)";
d36 1
a36 5
#ifdef HAVE_STRING_H
#  include <string.h>
#else
#  include <strings.h>
#endif
@


1.1
log
@extract bu_dirname() from malloc.c and put it in its own file.  should consider using dirname() since it's part of posix (along with rt_basename() -> basename()).
@
text
@d31 1
a31 1
static const char RCSmalloc[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/malloc.c,v 14.33 2007/01/31 21:40:17 brlcad Exp $ (ARL)";
d68 31
a98 31
	char	*ret;
	char	*slash;
	int	len;

	/* Special cases */
	if( cp == NULL )  return bu_strdup(".");
	if( strcmp( cp, "/" ) == 0 )
		return bu_strdup("/");
	if( strcmp( cp, "." ) == 0 ||
	    strcmp( cp, ".." ) == 0 ||
	    strrchr(cp, '/') == NULL )
		return bu_strdup(".");

	/* Make a duplicate copy of the string, and shorten it in place */
	ret = bu_strdup(cp);

	/* A trailing slash doesn't count */
	len = strlen(ret);
	if( ret[len-1] == '/' )  ret[len-1] = '\0';

	/* If no slashes remain, return "." */
	if( (slash = strrchr(ret, '/')) == NULL )  {
		bu_free( ret, "bu_dirname" );
		return bu_strdup(".");
	}

	/* Remove trailing slash, unless it's at front */
	if( slash == ret )
		ret[1] = '\0';		/* ret == "/" */
	else
		*slash = '\0';
d100 1
a100 1
	return ret;
@

