head	14.9;
access;
symbols
	rel-7-10-4:14.9
	STABLE:14.9.0.2
	stable-branch:14.1
	rel-7-10-2:14.9
	rel-7-10-0:14.9
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.4
	bobWinPort-20051223-freeze:14.1
	postmerge-20051223-bobWinPort:14.4
	premerge-20051223-bobWinPort:14.4
	rel-7-6-6:14.4
	rel-7-6-4:14.4
	rel-7-6-2:14.1
	rel-7-6-branch:14.1.0.6
	rel-7-6-0:14.1
	rel-7-4-2:14.1
	rel-7-4-branch:14.1.0.4
	bobWinPort:14.1.0.2
	rel-7-4-0:14.1
	rel-7-2-6:14.1
	rel-7-2-4:14.1
	rel-7-2-2:14.1
	rel-7-2-0:14.1
	rel-7-0-4:14.1
	rel-7-0-2:14.1
	rel-7-0-1:14.1
	opensource-post:14.1
	opensource-pre:1.3
	rel-7-0-branch:1.3.0.2
	rel-7-0:1.3;
locks; strict;
comment	@.\" @;


14.9
date	2007.01.27.01.41.37;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2006.01.17.05.54.48;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.09.09.04.17.39;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2005.09.09.03.29.35;	author brlcad;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.14;	author morrison;	state Exp;
branches
	14.1.6.1;
next	1.3;

1.3
date	2004.08.02.23.05.56;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.25.04.35.42;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.35;	author morrison;	state Exp;
branches;
next	;

14.1.6.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.9
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@.TH REDBLACK 3B BRL-CAD
.\"                     R E D B L A C K . 3
.\" BRL-CAD
.\"
.\" Copyright (c) 2005-2007 United States Government as represented by
.\" the U.S. Army Research Laboratory.
.\"
.\" Redistribution and use in source (Docbook format) and 'compiled'
.\" forms (PDF, PostScript, HTML, RTF, etc), with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code (Docbook format) must retain the
.\" above copyright notice, this list of conditions and the following
.\" disclaimer.
.\"
.\" 2. Redistributions in compiled form (transformed to other DTDs,
.\" converted to PDF, PostScript, HTML, RTF, and other formats) must
.\" reproduce the above copyright notice, this list of conditions and
.\" the following disclaimer in the documentation and/or other
.\" materials provided with the distribution.
.\"
.\" 3. The name of the author may not be used to endorse or promote
.\" products derived from this documentation without specific prior
.\" written permission.
.\"
.\" THIS DOCUMENTATION IS PROVIDED BY THE AUTHOR AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
.\" OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
.\" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
.\" USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\".\".\"
.\" Set the interparagraph spacing to 1 (default is 0.4)
.PD 1v
.\"
.\" The man page begins...
.\"
.\"
.SH NAME
redblack \- red-black tree operations
.\"
.SH SYNOPSIS
\fB#include "common.h"
.br
\fB#include <stdio.h>
.br
\fB#include "machine.h"
.br
\fB#include "bu.h"
.\"
.PP
.B bu_rb_tree *bu_rb_create (description, nm_orders, order_funcs)
.br
.B char *description;
.br
.B int nm_orders;
.br
.B int (**order_funcs)();
.\"
.PP
.B bu_rb_tree *bu_rb_create1 (description, order_func)
.br
.B char *description;
.br
.B int (*order_func)();
.\"
.PP
.B void *bu_rb_curr (tree, order)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.\"
.PP
.B void bu_rb_delete (tree, order)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.\"
.PP
.B void bu_rb_diagnose_tree (tree, order, trav_type)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.br
.B int trav_type;
.\"
.PP
.B void *bu_rb_extreme (tree, order, sense)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.br
.B int sense;
.\"
.PP
.B void bu_rb_free (tree, free_data)
.br
.B bu_rb_tree *tree;
.br
.B void (*free_data)();
.\"
.PP
.B int bu_rb_insert (tree, data)
.br
.B bu_rb_tree *tree;
.br
.B void *data;
.\"
.PP
.B int bu_rb_is_uniq (tree, order)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.\"
.PP
.B void *bu_rb_neighbor (tree, order, sense)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.br
.B int sense;
.\"
.PP
.B int bu_rb_rank (tree, order)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.\"
.PP
.B void *bu_rb_search (tree, order, data)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.br
.B void *data;
.\"
.PP
.B void *bu_rb_select (tree, order, k)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.br
.B int k;
.\"
.PP
.B void bu_rb_set_uniqv (tree, vec)
.br
.B bu_rb_tree *tree;
.br
.B bitv_t vec;
.\"
.PP
.B void bu_rb_summarize_tree (tree)
.br
.B bu_rb_tree *tree;
.\"
.PP
.B void bu_rb_uniq_all_off (tree)
.br
.B bu_rb_tree *tree;
.\"
.PP
.B void bu_rb_uniq_all_on (tree)
.br
.B bu_rb_tree *tree;
.\"
.PP
.B int bu_rb_uniq_off (tree, order)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.\"
.PP
.B int bu_rb_uniq_on (tree, order)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.\"
.PP
.B void bu_rb_walk (tree, order, visit, trav_type)
.br
.B bu_rb_tree *tree;
.br
.B int order;
.br
.B void (*visit)();
.br
.B int trav_type;
.\"
.\"
.SH DESCRIPTION
These routines implement red-black trees,
a form of balanced binary trees,
in such a way that all the basic dynamic set operations
(e.g., insertion, deletion, search, minimum, maximum,
predecessor, and successor)
and order-statistic operations
(i.e., select and rank)
require no more than
.IR "O(" "log " "n)"
time,
where
.I n
is the number of nodes.
They allow storage of arbitrary data structures
at tree nodes
and also support multiple simultaneous orders (trees)
on the same nodes.
The trees are based on comparison functions
like those used by
.I qsort(3).
The routines are available only in
.I libbu(3B).
.PP
.I bu_rb_create
allocates storage for
and initializes
the tree header.
.I Description
is an explanatory comment that
the red-black tree package
prints in its diagnostics,
.I nm_orders
is the number of simultaneous orders,
and
.I order_funcs
points to the table of comparison functions
(one for each order).
These are called with two arguments
that point to the application data blocks being compared.
Each function must return an integer
less than, equal to, or greater than zero
according as the first argument is to be considered
less than, equal to, or greater than the second.
.I bu_rb_create
returns a pointer to
a
.I bu_rb_tree.
This pointer must be saved,
as it is a required argument to all the other routines.
.I bu_rb_create1
is similar,
except that it creates a tree that supports only the single order
specified by
.I order_func.
.PP
The application can specify that
the red-black tree package
may not insert new nodes that compare equal in any of the orders
to an existing node.
Such uniqueness enforcement is switch selectable
and may be controlled independently for each order
and modified dynamically.
The default behavior is not to enforce any uniqueness.
.PP
.I bu_rb_free
relinquishes the storage used by
.I tree,
calling
.I free_data
to dispose of the application data in the nodes.
If
.I free_data
equals
.I BU_RB_RETAIN_DATA
(defined in \fI"bu.h"\fR),
then the application data blocks are left unaffected.
Otherwise,
.IR bu_rb_free " calls " free_data
once for each block of application data,
passing a pointer to the data.
Since
.I bu_rb_create1
allocates its own table of comparison functions,
a memory leak will result if
a tree returned by
.I bu_rb_create1
is freed before this table is freed.
For this reason,
.I "bu.h"
provides the macro
.I bu_rb_free1(tree, free_data),
which should be used instead of
.I bu_rb_free
when relinquishing a tree created by
.I bu_rb_create1.
.PP
.I bu_rb_insert
creates a new node containing
.I data
and adds it to
.I tree,
provided that doing so would not violate current uniqueness requirements.
If a uniqueness requirement would be violated,
.I bu_rb_insert
does nothing but return a negative integer,
the absolute value of which is the first order for which a violation exists.
Otherwise,
the node is inserted in the appropriate place
in each order,
as determined by the comparison functions,
and
.I bu_rb_insert
returns the number of orders
for which the new node compared equal to an existing node in the tree.
.PP
.I bu_rb_uniq_on
specifies that subsequent insertion of nodes into
.I tree
should enforce uniqueness on
.I order,
and returns the previous setting of the switch.
.I bu_rb_uniq_off
specifies that subsequent insertion of nodes into
.I tree
should proceed without regard for uniqueness on
.I order,
and returns the previous setting of the switch.
The macros
.I bu_rb_uniq_on1(tree)
and
.I bu_rb_uniq_off1(tree)
available in
\fI"bu.h"\fR,
are similar,
except that they control the first (perhaps only) order.
.I bu_rb_is_uniq
returns 1 if uniqueness is currently enforced
for
.I order
in
.I tree,
and 0 otherwise.
The macro
.I bu_rb_is_uniq1(tree)
available in
\fI"bu.h"\fR,
is similar,
except that it queries the first (perhaps only) order.
.I bu_rb_uniq_all_on
and
.I bu_rb_uniq_all_off
set all
.I nm_orders
orders identically on or off,
and
.I bu_rb_set_uniqv
sets the orders according to the bit vector
.I vec.
.PP
.I bu_rb_extreme
searches through
.I tree
to find a minimum or maximum node in one of the orders
as determined by the corresponding comparison function.
.I Sense
is either
.I SENSE_MIN
or
.I SENSE_MAX,
and
.I order
specifies which order to search.
.I bu_rb_extreme
returns a pointer to the extreme data.
The macros
.I bu_rb_min(tree, order)
and
.I bu_rb_max(tree, order),
available in
\fI"bu.h"\fR,
are implemented in terms of
.I bu_rb_extreme
in the obvious way.
.PP
.I bu_rb_search
traverses
.I tree
searching for a node of which the contents equals
.I data
according to the comparison function
specified by
.I order.
On success,
.I bu_rb_search
returns a pointer to the data in the
matching node.
Otherwise, it returns
.I NULL.
The macro
.I bu_rb_search1(tree, data),
available in
\fI"bu.h"\fR,
is similar,
except that it searches the first (perhaps only) order.
.PP
.I bu_rb_select
traverses
.I tree
to retrieve the \fIk\fRth order statistic
(i.e.,
the data block of rank
.I k,
the \fIk\fRth-smallest data block)
according to the comparison function
specified by
.I order,
where
.I k
is between 1 and the number of nodes in
.I tree,
inclusive.
On success,
.I bu_rb_select
returns a pointer to the block of data of rank
.I k.
Otherwise, it returns
.I NULL.
The macro
.I bu_rb_select1(tree, k),
available in
\fI"bu.h"\fR,
is similar,
except that it uses the first (perhaps only) order.
.PP
.I bu_rb_walk
traverses
.I tree
according to the comparison function specified by
.I order.
The function
.I visit
is called for each node in turn,
being passed two arguments:
a pointer to the data at that node
and the depth of the node in the tree for the specified order.
The type of tree traversal to perform,
specified by
.I trav_type,
may be any one of
.I PREORDER, INORDER,
and
.I POSTORDER.
The macro
.I bu_rb_walk1(tree, visit, trav_type),
available in
\fI"bu.h"\fR,
is similar,
except that it walks the first (perhaps only) order.
.PP
.I bu_rb_diagnose_tree
traverses
.I tree
according to the comparison function specified by
.I order,
printing information about the various structures.
The application may optionally store in the
.I rbt_print
member of the
.I bu_rb_tree
structure
the address of an application-specific print routine.
If this pointer is nonzero,
.I bu_rb_diagnose_tree
dereferences it to print information for the data at each node.
The type of tree traversal to perform,
specified by
.I trav_type,
may be any one of
.I PREORDER, INORDER,
and
.I POSTORDER.
.PP
The
.I bu_rb_tree
structure contains a pointer to
the node most recently accessed
(e.g., inserted, discovered in a search, or selected by rank).
When the most recent access failed,
this current node is undefined.
The following commands make use of
the current node:
.PP
.I bu_rb_curr
returns a pointer to the data in the current node in
.I order,
or
.I NULL
if the current node is undefined.
The macro
.I bu_rb_curr1(tree),
available in
\fI"bu.h"\fR,
is similar,
except that it returns a pointer to the data in the current node
in the first (perhaps only) order.
.PP
.I bu_rb_delete
removes a block of application data from
.I tree.
Because the algorithms sometimes cause a single block of data
to be stored in different nodes for the different orders,
the application specifies
.I order,
which indicates the block of data
(in the current node) to be removed.
If the current node is defined,
.I bu_rb_delete
removes this block of data from every order.
Otherwise,
it prints a warning and returns.
The macro
.I bu_rb_delete1(tree),
available in
\fI"bu.h"\fR,
is similar,
except that it removes the block of data in the first (perhaps only) order.
.PP
.I bu_rb_neighbor
returns a pointer to the data in the node adjacent (in \fIorder\fR) to
the current node,
or
.I NULL
if the current node is undefined.
.I sense,
which may be one of
.I SENSE_MIN
and
.I SENSE_MAX,
specifies either predecessor or successor, respectively.
The macros
.I bu_rb_pred(tree, order)
and
.I bu_rb_succ(tree, order),
available in
\fI"bu.h"\fR,
are implemented in terms of
.I bu_rb_neighbor
in the obvious way.
.\"
.PP
.I bu_rb_rank
returns the the rank
(i.e., position expressed as an integer between
1 and the number of nodes in
.I tree,
inclusive)
of the current node in
.I order,
or
.I NULL
if the current node is undefined.
The macro
.I bu_rb_rank1(tree),
available in
\fI"bu.h"\fR,
is similar,
except that it uses the first (perhaps only) order.
.\"
.PP
The members
of the
.I bu_rb_tree
structure,
as defined in
\fI"bu.h"\fR,
are classified into three classes
based on their suitability for direct manipulation by applications.
Class I,
members that applications may read directly,
includes
.PP
    long rbt_magic;     /* Magic no. for integrity check */
    int  rbt_nm_nodes;  /* Number of nodes */
.PP
Class II,
members that applications may read or write directly
as necessary,
includes
.PP
    void (*rbt_print)();   /* Data pretty-print function */
    int  rbt_debug;        /* Debug bits */
    char *rbt_description; /* Comment for diagnostics */
.PP
Class III comprises
members that applications should not manipulate directly;
any access should be through the routines provided by
the red-black tree package.
They include
.PP
    int               rbt_nm_orders;   /* Number of orders */
    int               (**rbt_order)(); /* Comparison funcs */
    struct bu_rb_node **rbt_root;      /* The actual trees */
    char              *rbt_unique;     /* Uniqueness flags */
    struct bu_rb_node *rbt_current;    /* Current node */
    struct bu_rb_list rbt_nodes;       /* All nodes */
    struct bu_rb_list rbt_packages;    /* All packages */
    struct bu_rb_node *rbt_empty_node; /* Sentinel for nil */
.PP
The distinction between classes I and III is not critical,
but any direct modification of members in either class
will result in unpredictable (probably dire) results.
The order of the members within the
.I bu_rb_tree
structure
is subject to change in future releases.
.PP
Diagnostic output may be requested
by setting the debug bits in the
.I bu_rb_tree
structure
using the debug bit flags defined in
\fI"bu.h"\fR.
.\"
.SH SEE ALSO
libbu(3B), qsort(3).
.\"
.SH AUTHOR
Paul Tanenbaum
@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d12 1
a12 1
.\" 
d16 1
a16 1
.\" 
d22 1
a22 1
.\" 
d26 1
a26 1
.\" 
@


14.7
log
@update copyright to 2007
@
text
@d8 31
a38 15
.\" This document is made available under the terms of the GNU Free
.\" Documentation License or, at your option, under the terms of the
.\" GNU General Public License as published by the Free Software
.\" Foundation.  Permission is granted to copy, distribute and/or
.\" modify this document under the terms of the GNU Free Documentation
.\" License, Version 1.2 or any later version published by the Free
.\" Software Foundation; with no Invariant Sections, no Front-Cover
.\" Texts, and no Back-Cover Texts.  Permission is also granted to
.\" redistribute this document under the terms of the GNU General
.\" Public License; either version 2 of the License, or (at your
.\" option) any later version.
.\"
.\" You should have received a copy of the GNU Free Documentation
.\" License and/or the GNU General Public License along with this
.\" document; see the file named COPYING for more information.
@


14.6
log
@update copyright to 2006
@
text
@d5 1
a5 1
.\" Copyright (c) 2005-2006 United States Government as represented by
@


14.5
log
@fix the manpage commments via s/\.\/"/.\\\"/g
@
text
@d5 1
a5 1
.\" Copyright (c) 2005 United States Government as represented by
@


14.4
log
@trailing ws
@
text
@d2 23
a24 23
./"                     R E D B L A C K . 3
./" BRL-CAD
./"
./" Copyright (c) 2005 United States Government as represented by
./" the U.S. Army Research Laboratory.
./"
./" This document is made available under the terms of the GNU Free
./" Documentation License or, at your option, under the terms of the
./" GNU General Public License as published by the Free Software
./" Foundation.  Permission is granted to copy, distribute and/or
./" modify this document under the terms of the GNU Free Documentation
./" License, Version 1.2 or any later version published by the Free
./" Software Foundation; with no Invariant Sections, no Front-Cover
./" Texts, and no Back-Cover Texts.  Permission is also granted to
./" redistribute this document under the terms of the GNU General
./" Public License; either version 2 of the License, or (at your
./" option) any later version.
./"
./" You should have received a copy of the GNU Free Documentation
./" License and/or the GNU General Public License along with this
./" document; see the file named COPYING for more information.
./"
./"./"./"
@


14.3
log
@BRL-CAD not BRL/CAD
@
text
@d488 1
a488 1
returns a pointer to the data in the current node in 
@


14.2
log
@add the standard documentation gfdl/gpl license header and copyright/distribution notice
@
text
@d1 1
a1 1
.TH REDBLACK 3B BRL/CAD
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 24
a29 1
.TH REDBLACK 3B BRL/CAD
@


14.1.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@a0 24
.TH REDBLACK 3B BRL-CAD
./"                     R E D B L A C K . 3
./" BRL-CAD
./"
./" Copyright (c) 2005 United States Government as represented by
./" the U.S. Army Research Laboratory.
./"
./" This document is made available under the terms of the GNU Free
./" Documentation License or, at your option, under the terms of the
./" GNU General Public License as published by the Free Software
./" Foundation.  Permission is granted to copy, distribute and/or
./" modify this document under the terms of the GNU Free Documentation
./" License, Version 1.2 or any later version published by the Free
./" Software Foundation; with no Invariant Sections, no Front-Cover
./" Texts, and no Back-Cover Texts.  Permission is also granted to
./" redistribute this document under the terms of the GNU General
./" Public License; either version 2 of the License, or (at your
./" option) any later version.
./"
./" You should have received a copy of the GNU Free Documentation
./" License and/or the GNU General Public License along with this
./" document; see the file named COPYING for more information.
./"
./"./"./"
d6 1
d465 1
a465 1
returns a pointer to the data in the current node in
@


1.3
log
@s/config.h/common.h
@
text
@@


1.2
log
@refer to the new config.h instead of conf.h
@
text
@d12 1
a12 1
\fB#include "config.h"
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d12 1
a12 1
\fB#include "conf.h"
@

