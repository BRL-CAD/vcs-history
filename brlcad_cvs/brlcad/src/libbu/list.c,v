head	14.15;
access;
symbols
	rel-7-10-4:14.14
	STABLE:14.14.0.2
	stable-branch:14.6
	rel-7-10-2:14.14
	rel-7-10-0:14.14
	rel-7-8-4:14.11
	rel-7-8-2:14.9
	rel-7-8-0:14.9
	trimnurbs-branch:14.9.0.2
	help:14.9
	temp_tag:14.8
	bobWinPort-20051223-freeze:14.7
	postmerge-20051223-bobWinPort:14.8
	premerge-20051223-bobWinPort:14.8
	rel-7-6-6:14.8
	rel-7-6-4:14.8
	rel-7-6-2:14.7
	rel-7-6-branch:14.7.0.4
	rel-7-6-0:14.7
	rel-7-4-2:14.6
	rel-7-4-branch:14.6.0.2
	bobWinPort:14.7.0.2
	rel-7-4-0:14.6
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.6
	rel-7-0-4:14.5
	rel-7-0-2:14.5
	rel-7-0-1:14.5
	opensource-post:14.5
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@ * @;


14.15
date	2007.12.31.17.47.10;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.23.01.13.34;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2007.01.21.04.45.42;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.20.14.36.51;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2006.09.03.15.14.07;	author lbutler;	state Exp;
branches;
next	14.10;

14.10
date	2006.08.31.23.16.38;	author lbutler;	state Exp;
branches;
next	14.9;

14.9
date	2006.01.18.06.46.16;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.10.23.04.44.32;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.08.12.22.29.23;	author lbutler;	state Exp;
branches
	14.7.4.1;
next	14.6;

14.6
date	2005.01.30.20.30.45;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.07.18.57;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.43;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.21;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.03.49.00;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.14;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.02.23.01.48;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.19.33;	author morrison;	state Exp;
branches;
next	;

14.7.4.1
date	2005.11.13.13.46.15;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.15
log
@no longer need assert.h
@
text
@/*                          L I S T . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2007 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 */
/** @@addtogroup bu_list */
/** @@{ */
/** @@file ./libbu/list.c
 *
 *  @@brief Support routines for linked lists.
 *
 *  Generic bu_list routines.
 *
 *  @@author	Michael John Muuss
 *  @@author	Lee A. Butler
 *
 *  @@par Source -
 *  @@n	The U. S. Army Research Laboratory
 *  @@n	Aberdeen Proving Ground, Maryland  21005-5068  USA
 */

#include "common.h"

#include <stdio.h>
#include "machine.h"
#include "bu.h"


/**
 *			B U _ L I S T _ N E W
 *
 *	Creates and initializes a bu_list head structure
 */
struct bu_list *
bu_list_new(void)
{
	struct bu_list *new;

	BU_GETSTRUCT( new, bu_list );
	BU_LIST_INIT( new );

	return( new );
}

/**
 *			B U _ L I S T _ P O P
 *
 *	Returns the results of BU_LIST_POP
 */
struct bu_list *
bu_list_pop( struct bu_list *hp )
{
	struct bu_list *p;

	BU_LIST_POP( bu_list, hp, p );

	return( p );
}

/**
 *			B U _ L I S T _ L E N
 *
 *  Returns the number of elements on a bu_list brand linked list.
 */
int
bu_list_len(register const struct bu_list *hd)
{
	register int			count = 0;
	register const struct bu_list	*ep;

	for( BU_LIST_FOR( ep, bu_list, hd ) )  {
		count++;
	}
	return count;
}

/**
 *			B U _ L I S T _ R E V E R S E
 *
 *	Reverses the order of elements in a bu_list linked list.
 */
void
bu_list_reverse(register struct bu_list *hd)
{
	struct bu_list tmp_hd;
	register struct bu_list *ep;

	BU_CK_LIST_HEAD( hd );

	BU_LIST_INIT( &tmp_hd );
	BU_LIST_INSERT_LIST( &tmp_hd, hd );

	while( BU_LIST_WHILE( ep, bu_list, &tmp_hd ) )  {
		BU_LIST_DEQUEUE( ep );
		BU_LIST_APPEND( hd, ep );
	}
}

/**
 *			B U _ L I S T _ F R E E
 *
 *  Given a list of structures allocated with bu_malloc() enrolled
 *  on a bu_list head, walk the list and free the structures.
 *  This routine can only be used when the structures have no interior
 *  pointers.
 */
void
bu_list_free(struct bu_list *hd)
{
	struct bu_list	*p;

	while( BU_LIST_WHILE( p, bu_list, hd ) )  {
		BU_LIST_DEQUEUE( p );
		bu_free( (genptr_t)p, "struct bu_list" );
	}
}

/**
 *			B U _ L I S T _ P A R A L L E L _ A P P E N D
 *
 *  Simple parallel-safe routine for appending a data structure to the end
 *  of a bu_list doubly-linked list.
 *  @@par Issues:
 *  	Only one semaphore shared by all list heads.
 *  @@n	No portable way to notify waiting thread(s) that are sleeping
 */
void
bu_list_parallel_append(struct bu_list *headp, struct bu_list *itemp)
{
	bu_semaphore_acquire(BU_SEM_LISTS);
	BU_LIST_INSERT( headp, itemp );		/* insert before head = append */
	bu_semaphore_release(BU_SEM_LISTS);
}

/**
 *			B U _ L I S T _ P A R A L L E L _ D E Q U E U E
 *
 *  Simple parallel-safe routine for dequeueing one data structure from
 *  the head of a bu_list doubly-linked list.
 *  If the list is empty, wait until some other thread puts something on
 *  the list.
 *
 *  @@par Issues:
 *	No portable way to not spin and burn CPU time while waiting
 *  @@n	for something to show up on the list.
 */
struct bu_list *
bu_list_parallel_dequeue(struct bu_list *headp)
{
	for(;;)  {
		register struct bu_list *p;

		bu_semaphore_acquire(BU_SEM_LISTS);
		p = BU_LIST_FIRST(bu_list, headp);
		if( BU_LIST_NOT_HEAD( p, headp ) )  {
			BU_LIST_DEQUEUE(p);
			bu_semaphore_release(BU_SEM_LISTS);
			return p;
		}
		bu_semaphore_release(BU_SEM_LISTS);

		/* List is empty, wait a moment and peek again */
#if (defined(sgi) && defined(mips)) || (defined(__sgi) && defined(__mips))
		sginap(1);
#endif
	}
	/* NOTREACHED */
}

/**
 *			B U _ C K _ L I S T
 *
 *  Generic bu_list doubly-linked list checker.
 */
void
bu_ck_list(const struct bu_list *hd, const char *str)
{
	register const struct bu_list	*cur;
	int	head_count = 0;

	cur = hd;
	do  {
		if( cur->magic == BU_LIST_HEAD_MAGIC )  head_count++;
		if( !cur->forw )  {
			bu_log("bu_ck_list(%s) cur=x%x, cur->forw=x%x, hd=x%x\n",
				str, cur, cur->forw, hd );
			bu_bomb("bu_ck_list() forw\n");
		}
		if( cur->forw->back != cur )  {
			bu_log("bu_ck_list(%s) cur=x%x, cur->forw=x%x, cur->forw->back=x%x, hd=x%x\n",
				str, cur, cur->forw, cur->forw->back, hd );
			bu_bomb("bu_ck_list() forw->back\n");
		}
		if( !cur->back )  {
			bu_log("bu_ck_list(%s) cur=x%x, cur->back=x%x, hd=x%x\n",
				str, cur, cur->back, hd );
			bu_bomb("bu_ck_list() back\n");
		}
		if( cur->back->forw != cur )  {
			bu_log("bu_ck_list(%s) cur=x%x, cur->back=x%x, cur->back->forw=x%x, hd=x%x\n",
				str, cur, cur->back, cur->back->forw, hd );
			bu_bomb("bu_ck_list() back->forw\n");
		}
		cur = cur->forw;
	} while( cur != hd );

	if( head_count != 1 )  {
		bu_log("bu_ck_list(%s) head_count = %d, hd=x%x\n", str, head_count, hd);
		bu_bomb("bu_ck_list() headless!\n");
	}
}

/**
 *			B U _ C K _ L I S T _ M A G I C
 *
 *  bu_list doubly-linked list checker which checks the magic number for
 *	all elements in the linked list
 */
void
bu_ck_list_magic(const struct bu_list *hd, const char *str, const long int magic)
{
	register const struct bu_list	*cur;
	int	head_count = 0;
	int	item = 0;

	cur = hd;
	do  {
		if( cur->magic == BU_LIST_HEAD_MAGIC )  {
			head_count++;
		} else if( cur->magic != magic ) {
			bu_log("bu_ck_list(%s) cur magic=(%s)x%x, cur->forw magic=(%s)x%x, hd magic=(%s)x%x, item=%d\n",
				str, bu_identify_magic(cur->magic), cur->magic,
				bu_identify_magic(cur->forw->magic), cur->forw->magic,
				bu_identify_magic(hd->magic), hd->magic,
				item);
			bu_bomb("bu_ck_list_magic() cur->magic\n");
		}

		if( !cur->forw )  {
			bu_log("bu_ck_list_magic(%s) cur=x%x, cur->forw=x%x, hd=x%x, item=%d\n",
				str, cur, cur->forw, hd, item );
			bu_bomb("bu_ck_list_magic() forw NULL\n");
		}
		if( cur->forw->back != cur )  {
			bu_log("bu_ck_list_magic(%s) cur=x%x, cur->forw=x%x, cur->forw->back=x%x, hd=x%x, item=%d\n",
				str, cur, cur->forw, cur->forw->back, hd, item );
			bu_log(" cur=%s, cur->forw=%s, cur->forw->back=%s\n",
				bu_identify_magic(cur->magic),
				bu_identify_magic(cur->forw->magic),
				bu_identify_magic(cur->forw->back->magic) );
			bu_bomb("bu_ck_list_magic() cur->forw->back != cur\n");
		}
		if( !cur->back )  {
			bu_log("bu_ck_list_magic(%s) cur=x%x, cur->back=x%x, hd=x%x, item=%d\n",
				str, cur, cur->back, hd, item );
			bu_bomb("bu_ck_list_magic() back NULL\n");
		}
		if( cur->back->forw != cur )  {
			bu_log("bu_ck_list_magic(%s) cur=x%x, cur->back=x%x, cur->back->forw=x%x, hd=x%x, item=%d\n",
				str, cur, cur->back, cur->back->forw, hd, item );
			bu_bomb("bu_ck_list_magic() cur->back->forw != cur\n");
		}
		cur = cur->forw;
		item++;
	} while( cur != hd );

	if( head_count != 1 )  {
		bu_log("bu_ck_list_magic(%s) head_count = %d, hd=x%x, items=%d\n", str, head_count, hd, item);
		bu_bomb("bu_ck_list_magic() headless!\n");
	}
}

/* XXX - apparently needed by muves */
struct bu_list *
bu_list_dequeue_next( struct bu_list *hp, struct bu_list *p )
{
	struct bu_list *p2;

	hp = hp;
	p2 = BU_LIST_NEXT( bu_list, p );
	BU_LIST_DEQUEUE( p2 );

	return( p2 );
}

/** @@} */

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * c-basic-offset: 4
 * indent-tabs-mode: t
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
@


14.14
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a35 4
#ifndef lint
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.13 2007/01/21 04:45:42 brlcad Exp $ (ARL)";
#endif

a37 1

a41 1
#include <assert.h>
@


14.13
log
@ugh, what tedium.  put some effort towards cleaning up the doxygen labels and making the headers more consistent.  also exclusively using @@ for doxygen instead of \ to try to keep things more consistent.
@
text
@d9 1
a9 2
 * as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
d14 1
a14 1
 * Library General Public License for more details.
d37 1
a37 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.12 2007/01/20 14:36:51 brlcad Exp $ (ARL)";
@


14.12
log
@update copyright to 2007
@
text
@d21 2
a22 3

/** \addtogroup bu_list */
/*@@{*/
d25 1
a25 1
 * @@brief Support routines for linked lists.
d38 1
a38 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.11 2006/09/03 15:14:07 lbutler Exp $ (ARL)";
d307 1
a307 1
/*@@}*/
@


14.11
log
@Doxygen updates
@
text
@d4 1
a4 1
 * Copyright (c) 2004-2006 United States Government as represented by
d39 1
a39 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.10 2006/08/31 23:16:38 lbutler Exp $ (ARL)";
@


14.10
log
@Doxygen comments
@
text
@d25 3
d39 1
a39 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.9 2006/01/18 06:46:16 brlcad Exp $ (ARL)";
@


14.9
log
@update copyright to 2006
@
text
@d22 1
a22 1
/** \addtogroup libbu */
a23 1

d27 2
a28 7
 *  Authors -
 *	Michael John Muuss
 *	Lee A. Butler
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
d30 3
a33 1
/*@@}*/
d36 1
a36 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.8 2005/10/23 04:44:32 brlcad Exp $ (ARL)";
d48 1
a48 1
/*
d64 1
a64 1
/*
d79 1
a79 1
/*
d96 1
a96 1
/*
d118 1
a118 1
/*
d137 1
a137 1
/*
d142 3
a144 3
 *  Issues:
 *	Only one semaphore shared by all list heads.
 *	No portable way to notify waiting thread(s) that are sleeping
d154 1
a154 1
/*
d162 1
a162 1
 *  Issues:
d164 1
a164 1
 *	for something to show up on the list.
d189 1
a189 1
/*
d232 1
a232 1
/*
d305 2
@


14.8
log
@trailing ws
@
text
@d4 1
a4 1
 * Copyright (C) 2004-2005 United States Government as represented by
d40 1
a40 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.7 2005/08/12 22:29:23 lbutler Exp $ (ARL)";
@


14.7
log
@Doxygen changes
@
text
@d31 1
a31 1
 *  
d35 1
a35 1
 *  
d40 1
a40 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.6 2005/01/30 20:30:45 brlcad Exp $ (ARL)";
@


14.7.4.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d31 1
a31 1
 *
d35 1
a35 1
 *
d40 1
a40 1
static const char libbu_list_RCSid[] = "@@(#)$Header$ (ARL)";
@


14.6
log
@update copyright to 2005
@
text
@d21 6
a26 3
/** @@file list.c
 *
 *  Generic bu_list routines
d37 2
d40 1
a40 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvsroot/brlcad/brlcad/src/libbu/list.c,v 14.5 2004/12/21 07:18:57 morrison Exp $ (ARL)";
@


14.5
log
@the significantly modified pd files are incorporated as new works and assigned copyright, so remove the old statement.
@
text
@d4 2
a5 2
 * Copyright (c) 2004 United States Government as represented by the
 * U.S. Army Research Laboratory.
d35 1
a35 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbu/list.c,v 14.4 2004/12/21 06:18:43 morrison Exp $ (ARL)";
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a32 2
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
d35 1
a35 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbu/list.c,v 14.3 2004/12/21 05:45:21 morrison Exp $ (ARL)";
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
 * You should have received a copy of the GNU General Public License
 * along with this file; see the file named COPYING for more
d37 1
a37 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbu/list.c,v 14.2 2004/12/21 03:49:00 morrison Exp $ (ARL)";
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
 * modify it under the terms of the GNU Library General Public License
d37 1
a37 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbu/list.c,v 14.1 2004/11/16 19:42:14 morrison Exp $ (ARL)";
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 2
/*
 *			L I S T . C
d37 1
a37 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbu/list.c,v 1.2 2004/08/02 23:01:48 morrison Exp $ (ARL)";
@


1.2
log
@replace the wrapped config.h block with common.h
@
text
@d18 1
a18 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvs/brlcad/src/libbu/list.c,v 1.1 2004/05/20 15:19:33 morrison Exp $ (ARL)";
d286 10
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d18 1
a18 1
static const char libbu_list_RCSid[] = "@@(#)$Header: /cvs/brlcad/libbu/list.c,v 1.17 2004/05/10 15:30:44 erikg Exp $ (ARL)";
d21 1
a21 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@

