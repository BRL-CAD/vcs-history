head	14.11;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	stable-branch:14.5
	rel-7-10-2:14.11
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.7
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.7
	premerge-20051223-bobWinPort:14.7
	rel-7-6-6:14.7
	rel-7-6-4:14.7
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.11
date	2007.01.27.01.41.47;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.50;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.03;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.18.06.46.25;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.11.06.05.27.48;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.38;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.31.13;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2004.12.21.06.18.49;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.27;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.46.06;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.03;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@#                    B I N D I N G S . T C L
# BRL-CAD
#
# Copyright (c) 2004-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
if ![info exists mged_players] {
    set mged_players {}
}

proc mged_bind_dm { w } {
    global hot_key
    global forwarding_key
    global tcl_platform

    set hot_key 65478

#make this the current display manager
    if { $::tcl_platform(platform) != "windows" && $::tcl_platform(os) != "Darwin" } {
	bind $w <Enter> "winset $w; focus $w;"
    } else {
	# some platforms should not be forced window activiation (winset)
	bind $w <Enter> "winset $w;"
    }

#default mouse bindings
    default_mouse_bindings $w

#default key bindings
    set forwarding_key($w) 0
    default_key_bindings $w
}

proc print_return_val str {
    if {$str != ""} {
	distribute_text "" "" $str
	stuff_str $str
    }
}

if ![info exists mged_default(dm_key_bindings)] {
    set mged_default(dm_key_bindings) "\tKey Sequence\t\tBehavior
\ta\t\t\ttoggle angle distance cursor (ADC)
\te\t\t\ttoggle edit axes
\tm\t\t\ttoggle model axes
\tv\t\t\ttoggle view axes
\ti\t\t\tadvance illumation pointer forward
\tI\t\t\tadvance illumation pointer backward
\tp\t\t\tsimulate mouse press (i.e. to pick a solid)
\t0\t\t\tzero knobs
\tx\t\t\trate rotate about x axis
\ty\t\t\trate rotate about y axis
\tz\t\t\trate rotate about z axis
\tX\t\t\trate translate in X direction
\tY\t\t\trate translate in Y direction
\tZ\t\t\trate translate in Z direction
\t3\t\t\tview - ae 35 25
\t4\t\t\tview - ae 45 45
\tf\t\t\tfront view
\tt\t\t\ttop view
\tb\t\t\tbottom view
\tl\t\t\tleft view
\tr\t\t\tright view
\tR\t\t\trear view
\ts\t\t\tenter solid illumination state
\to\t\t\tenter object illumination state
\tq\t\t\treject edit
\tu\t\t\tzero knobs and sliders
\t<F1>\t\t\ttoggle depthcue
\t<F2>\t\t\ttoggle zclip
\t<F3>\t\t\ttoggle perspective
\t<F4>\t\t\ttoggle zbuffer
\t<F5>\t\t\ttoggle lighting
\t<F6>\t\t\ttoggle perspective angle
\t<F7>\t\t\ttoggle faceplate
\t<F8>\t\t\ttoggle faceplate GUI
\t<F9>\t\t\ttoggle keystroke forwarding
\t<F12>\t\t\tzero knobs
\t<Left>\t\t\tabsolute rotate about y axis
\t<Right>\t\t\tabsolute rotate about y axis
\t<Down>\t\t\tabsolute rotate about x axis
\t<Up>\t\t\tabsolute rotate about x axis
\t<Shift-Left>\t\tabsolute translate in X direction
\t<Shift-Right>\t\tabsolute translate in X direction
\t<Shift-Down>\t\tabsolute translate in Z direction
\t<Shift-Up>\t\tabsolute translate in Z direction
\t<Control-Shift-Left>\tabsolute rotate about z axis
\t<Control-Shift-Right>\tabsolute rotate about z axis
\t<Control-Shift-Down>\tabsolute translate in Y direction
\t<Control-Shift-Up>\tabsolute translate in Y direction
\t<Control-n>\t\tgoto next view
\t<Control-p>\t\tgoto previous view
\t<Control-t>\t\ttoggle between the current view and the last view"
}

proc default_key_bindings { w } {
    bind $w a "winset $w; adc; break"
    bind $w e "winset $w; rset ax edit_draw !;\
	    update_gui $w edit_draw \[rset ax edit_draw\]; break"
    bind $w m "winset $w; rset ax model_draw !;\
	    update_gui $w model_draw \[rset ax model_draw\]; break"
    bind $w v "winset $w; rset ax view_draw !;\
	    update_gui $w view_draw \[rset ax view_draw\]; break"
    bind $w i "winset $w; aip f; break"
    bind $w I "winset $w; aip b; break"
    bind $w p "winset $w; M 1 0 0; break"
    bind $w 0 "winset $w; knob zero; break"
    bind $w x "winset $w; knob -i x 0.3; break"
    bind $w y "winset $w; knob -i y 0.3; break"
    bind $w z "winset $w; knob -i z 0.3; break"
    bind $w X "winset $w; knob -i x -0.3; break"
    bind $w Y "winset $w; knob -i y -0.3; break"
    bind $w Z "winset $w; knob -i z -0.3; break"
    bind $w 3 "winset $w; press 35,25; break"
    bind $w 4 "winset $w; press 45,45; break"
    bind $w f "winset $w; press front; break"
    bind $w t "winset $w; press top; break"
    bind $w b "winset $w; press bottom; break"
    bind $w l "winset $w; press left; break"
    bind $w r "winset $w; press right; break"
    bind $w R "winset $w; press rear; break"
    bind $w s "winset $w; press sill; break"
    bind $w o "winset $w; press oill; break"
    bind $w q "winset $w; press reject; break"
    bind $w A "winset $w; press accept; break"
    bind $w P "winset $w; sed_apply; break"
    bind $w S "winset $w; sed_reset; break"
    bind $w u "winset $w; svb; break"
    bind $w <F1> "winset $w; dm set depthcue !; update_gui $w depthcue \[dm set depthcue\]; break"
    bind $w <F2> "winset $w; dm set zclip !; update_gui $w zclip \[dm set zclip\]; break"
    bind $w <F3> "winset $w; set perspective_mode !; update_gui $w perspective_mode \$perspective_mode; break"
    bind $w <F4> "winset $w; dm set zbuffer !; update_gui $w zbuffer \[dm set zbuffer\]; break"
    bind $w <F5> "winset $w; dm set lighting !; update_gui $w lighting \[dm set lighting\]; break"
    bind $w <F6> "winset $w; set toggle_perspective !; break"
    bind $w <F7> "winset $w; set faceplate !; update_gui $w faceplate \$faceplate; break"
    bind $w <F8> "winset $w; set orig_gui !; update_gui $w orig_gui \$orig_gui; break"
# KeySym for <F9> --> 0xffc6 --> 65478
    bind $w <F9> "toggle_forward_key_bindings $w; update_gui $w forward_keys \$forwarding_key($w); break"
    bind $w <F12> "winset $w; knob zero; break"

    bind $w <Left> "winset $w; knob -i ay -\$mged_default(rot_factor); break"
    bind $w <Right> "winset $w; knob -i ay \$mged_default(rot_factor); break"
    bind $w <Down> "winset $w; knob -i ax \$mged_default(rot_factor); break"
    bind $w <Up> "winset $w; knob -i ax -\$mged_default(rot_factor); break"
    bind $w <Shift-Left> "winset $w; knob -i aX \$mged_default(tran_factor); break"
    bind $w <Shift-Right> "winset $w; knob -i aX -\$mged_default(tran_factor); break"
    bind $w <Shift-Down> "winset $w; knob -i aZ -\$mged_default(tran_factor); break"
    bind $w <Shift-Up> "winset $w; knob -i aZ \$mged_default(tran_factor); break"
    bind $w <Control-Shift-Left> "winset $w; knob -i az \$mged_default(rot_factor); break"
    bind $w <Control-Shift-Right> "winset $w; knob -i az -\$mged_default(rot_factor); break"
    bind $w <Control-Shift-Down> "winset $w; knob -i aY \$mged_default(tran_factor); break"
    bind $w <Control-Shift-Up> "winset $w; knob -i aY -\$mged_default(tran_factor); break"

    bind $w <Control-n> "winset $w; _mged_view_ring next; break"
    bind $w <Control-p> "winset $w; _mged_view_ring prev; break"
    bind $w <Control-t> "winset $w; _mged_view_ring toggle; break"

    bind $w <Escape> "winset $w; press reject ; break"

    # Throw away other key events
    bind $w <KeyPress> {
	break
    }
}

proc set_forward_keys { w val } {
    global forwarding_key

    set forwarding_key($w) $val
    if {$forwarding_key($w)} {
	forward_key_bindings $w
    } else {
	default_key_bindings $w
    }
}

proc toggle_forward_key_bindings { w } {
    global forwarding_key

    if {$forwarding_key($w)} {
	default_key_bindings $w
	set forwarding_key($w) 0
    } else {
	forward_key_bindings $w
	set forwarding_key($w) 1
    }
}

proc forward_key_bindings { w } {
    set id [get_player_id_dm $w]

    if {$id == "mged"} {
	return
    }

# First, unset the default key bindings
    bind $w a {}
    bind $w e {}
    bind $w m {}
    bind $w v {}
    bind $w i {}
    bind $w I {}
    bind $w p {}
    bind $w 0 {}
    bind $w x {}
    bind $w y {}
    bind $w z {}
    bind $w X {}
    bind $w Y {}
    bind $w Z {}
    bind $w 3 {}
    bind $w 4 {}
    bind $w f {}
    bind $w t {}
    bind $w b {}
    bind $w l {}
    bind $w r {}
    bind $w R {}
    bind $w s {}
    bind $w o {}
    bind $w q {}
    bind $w u {}
    bind $w <F1> {}
    bind $w <F2> {}
    bind $w <F3> {}
    bind $w <F4> {}
    bind $w <F5> {}
    bind $w <F6> {}
    bind $w <F7> {}
    bind $w <F8> {}
    bind $w <F12> {}

    bind $w <Left> {}
    bind $w <Right> {}
    bind $w <Down> {}
    bind $w <Up> {}
    bind $w <Shift-Left> {}
    bind $w <Shift-Right> {}
    bind $w <Shift-Down> {}
    bind $w <Shift-Up> {}
    bind $w <Control-Shift-Left> {}
    bind $w <Control-Shift-Right> {}
    bind $w <Control-Shift-Down> {}
    bind $w <Control-Shift-Up> {}

    bind $w <Control-n> {}
    bind $w <Control-p> {}
    bind $w <Control-t> {}

# The focus commands in the binding below are necessary to insure
# that .$id.t gets the event.
    bind $w <KeyPress> "\
	    focus .$id.t;\
	    set mged_gui(.$id.t,insert_char_flag) 1;\
	    event generate .$id.t <KeyPress> -state %s -keysym %K;\
	    set mged_gui(.$id.t,insert_char_flag) 0;\
	    focus %W;\
	    break"
}

proc default_mouse_bindings { w } {
    global transform

    # default button bindings
    bind $w <1> "winset $w; focus $w; zoom 0.5; break"
    bind $w <2> "winset $w; focus $w; set tmpstr \[dm m %x %y\]; print_return_val \$tmpstr; break"
    bind $w <3> "winset $w; focus $w; zoom 2.0; break"

    bind $w <ButtonRelease> "winset $w; dm idle; break"
    bind $w <KeyRelease-Control_L> "winset $w; dm idle; break"
    bind $w <KeyRelease-Control_R> "winset $w; dm idle; break"
    bind $w <KeyRelease-Shift_L> "winset $w; dm idle; break"
    bind $w <KeyRelease-Shift_R> "winset $w; dm idle; break"
    bind $w <KeyRelease-Alt_L> "winset $w; dm idle; break"
    bind $w <KeyRelease-Alt_R> "winset $w; dm idle; break"

    if ![catch {adc draw} result] {
	set adcflag $result
    } else {
	set adcflag 0
    }

    if {$adcflag == "1" && $transform == "a"} {
	bind $w <Shift-ButtonPress-1> "winset $w; dm adc t %x %y; \
		shift_grip_hints $w \"Translate ADC\"; break"
	bind $w <Shift-ButtonPress-2> "winset $w; dm adc t %x %y; \
		shift_grip_hints $w \"Translate ADC\"; break"
	bind $w <Shift-ButtonPress-3> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

	bind $w <Control-ButtonPress-1> "winset $w; dm adc 1 %x %y; \
		shift_grip_hints $w \"Rotate Angle 1\"; break"
	bind $w <Control-ButtonPress-2> "winset $w; dm adc 2 %x %y; \
		shift_grip_hints $w \"Rotate Angle 2\"; break"
	bind $w <Control-ButtonPress-3> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

#constrained adc defaults
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con a x %x %y; \
		shift_grip_hints $w \"X Translate ADC\"; break"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con a y %x %y; \
		shift_grip_hints $w \"Y Translate ADC\"; break"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con a 1 %x %y; \
		shift_grip_hints $w \"Rotate Angle 1\"; break"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con a 2 %x %y; \
		shift_grip_hints $w \"Rotate Angle 2\"; break"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
    } else {
	bind $w <Shift-ButtonPress-1> "winset $w; dm am t %x %y; \
		shift_grip_hints $w Translate; break"
	bind $w <Shift-ButtonPress-2> "winset $w; dm am t %x %y; \
		shift_grip_hints $w Translate; break"
	bind $w <Shift-ButtonPress-3> "winset $w; dm am t %x %y; \
		shift_grip_hints $w Translate; break"

	bind $w <Control-ButtonPress-1> "winset $w; dm am r %x %y; \
		shift_grip_hints $w Rotate; break"
	bind $w <Control-ButtonPress-2> "winset $w; dm am r %x %y; \
		shift_grip_hints $w Rotate; break"
	bind $w <Control-ButtonPress-3> "winset $w; dm am r %x %y; \
		shift_grip_hints $w Rotate; break"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm am s %x %y; \
		shift_grip_hints $w Scale/Zoom; break"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm am s %x %y; \
		shift_grip_hints $w Scale/Zoom; break"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm am s %x %y; \
		shift_grip_hints $w Scale/Zoom; break"

#constrained defaults
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con t x %x %y; \
		shift_grip_hints $w \"X Translation\"; break"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con t y %x %y; \
		shift_grip_hints $w \"Y Translation\"; break"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con t z %x %y; \
		shift_grip_hints $w \"Z Translation\"; break"

	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con r x %x %y; \
		shift_grip_hints $w \"X Rotation\"; break"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con r y %x %y; \
		shift_grip_hints $w \"Y Rotation\"; break"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con r z %x %y; \
		shift_grip_hints $w \"Z Rotation\"; break"

	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con s x %x %y; \
		scale_shift_grip_hints $w X; break"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con s y %x %y; \
		scale_shift_grip_hints $w Y; break"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con s z %x %y; \
		scale_shift_grip_hints $w Z; break"
    }
}

proc shift_grip_hints { w hint } {
    global mged_display
    global mged_gui
    global win_to_id

    if ![info exists win_to_id($w)] {
	return
    }

    set id $win_to_id($w)
    set mged_gui($id,illum_label) $hint
}

proc scale_shift_grip_hints { w axis } {
    if {[status state] == "OBJ EDIT"} {
	shift_grip_hints $w "$axis Scale"
    } else {
	shift_grip_hints $w "Scale/Zoom"
    }
}

proc update_gui { w vname val } {
    global mged_players
    global mged_gui

    foreach id $mged_players {
	if {$mged_gui($id,active_dm) == $w} {
	    set mged_gui($id,$vname) $val
	    return
	}
    }
}


# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d34 1
a34 1
        bind $w <Enter> "winset $w; focus $w;"
d36 2
a37 2
        # some platforms should not be forced window activiation (winset)
        bind $w <Enter> "winset $w;"
@


14.9
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
d14 1
a14 1
# Library General Public License for more details.
@


14.8
log
@update copyright to 2006
@
text
@d4 1
a4 1
# Copyright (c) 2004-2006 United States Government as represented by
@


14.7
log
@set default mged Escape key binding to reject
@
text
@d4 1
a4 1
# Copyright (C) 2004-2005 United States Government as represented by
@


14.6
log
@trailing ws
@
text
@d173 2
@


14.5
log
@update copyright to 2005
@
text
@d382 1
a382 1
    }   
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@a172 2
    bind $w <Escape> "winset $w; press reject ; break"

d382 1
a382 1
    }
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
# Copyright (c) 2004 United States Government as represented by the
# U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d397 9
@

