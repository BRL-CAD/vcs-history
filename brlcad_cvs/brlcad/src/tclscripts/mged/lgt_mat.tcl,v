head	14.8;
access;
symbols
	rel-7-10-4:14.8
	STABLE:14.8.0.2
	stable-branch:14.5
	rel-7-10-2:14.8
	rel-7-10-0:14.8
	rel-7-8-4:14.6
	rel-7-8-2:14.6
	rel-7-8-0:14.6
	trimnurbs-branch:14.6.0.2
	help:14.6
	temp_tag:14.5
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.5
	premerge-20051223-bobWinPort:14.5
	rel-7-6-6:14.5
	rel-7-6-4:14.5
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.8
date	2007.01.23.01.13.51;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2007.01.20.14.37.03;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2006.01.18.06.46.25;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.31.14;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.52;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.28;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.46.06;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.10;	author morrison;	state Exp;
branches;
next	;


desc
@@


14.8
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@#                     L G T _ M A T . T C L
# BRL-CAD
#
# Copyright (c) 2004-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
proc process_mdb { mdb_file array_name } {
    upvar $array_name mdb_array

    # open material database file
    if { [string length $mdb_file] == 0 } {
	puts "ERROR: missing name of material database"
	exit
    }

    if { [catch {open $mdb_file} fdb] } {
	puts "ERROR opening database file ($mdb_file)"
	puts $fdb
	exit
    }

    #read material database
    set mdb [split [read $fdb] "\n"]

    # process MDB into an array

    set max_index 0
    set index 0
    set len [llength $mdb]

    while { $index < $len } {
	set m_name [string trim [lindex $mdb $index]]
	incr index
	if { $index >= $len } break
	set m_index [string trim [lindex $mdb $index]]
	incr index
	set m_shine [string trim [lindex $mdb $index]]
	incr index
	set m_spec_wgt [string trim [lindex $mdb $index]]
	incr index
	set m_diff_wgt [string trim [lindex $mdb $index]]
	incr index
	set m_trans [string trim [lindex $mdb $index]]
	incr index
	set m_refl [string trim [lindex $mdb $index]]
	incr index
	set m_ri [string trim [lindex $mdb $index]]
	incr index
	set m_rgb [string trim [lindex $mdb $index]]
	incr index
	set m_mode [string trim [lindex $mdb $index]]
	incr index

	if { $m_name == "(null)" } continue

	set mdb_array($m_index) [list $m_name "sh" $m_shine "sp" $m_spec_wgt "di" $m_diff_wgt "tr" $m_trans "re" $m_refl "ri" $m_ri $m_rgb $m_mode]

    }
}

proc apply_lgt_mat { args } {

    # set defaults
    set mode 0
    set mdb_file ""

    # mode: Tcl
    #    0 - initially apply lgt material database to model
    #    1 - reapply lgt material database (using info stored in attributes)
    #    2 - undo (revert to old shader parameters using saved attributes)

    # process options
    set argc [llength $args]
    for { set index 0 } { $index < $argc } { incr index } {
	set argv [lindex $args $index ]
	switch -exact -- $argv {
	    "-r" {
		set mode 1
	    }
	    "-u" {
		set mode 2
	    }
	    default {
		if { [string index $argv 0] == "-" } {
		    puts "Illegal option $argv"
		    puts "\tChoices are:"
		    puts "\t\t no options - apply lgt material database"
		    puts "\t\t -r         - reapply lgt material database"
		    puts "\t\t -u         - undo (remove lgt database info)"
		    exit
		} else {
		    set mdb_file $argv
		}
	    }
	}
    }

    if { $mode < 2 } {
	process_mdb $mdb_file "mdb_array"
    }


    foreach comb [ls -c] {

	if { $mode == 0 } {
	    # initial application, check shader params for "mid"
	    set shader [db get $comb shader]
	} elseif { $mode == 1 } {
	    # reapply, find "mid" in attribute "lgt_mdb_params"
	    if { [catch {attr get $comb "lgt_mdb_params"} shader] } continue
	} elseif { $mode == 2 } {
	    # undo, restore the saved parameters from attributes
	    if { [catch {attr get $comb "lgt_mdb_params"} shader] } continue
	    if { [catch {attr get $comb "old_inherit"} inherit] } continue
	    if { [catch {attr get $comb "old_rgb"} rgb] } {set rgb "none"}
	    puts " restoring saved values to $comb"
	    db adjust $comb shader $shader inherit $inherit rgb $rgb
	    continue
	}
	if { [llength $shader] < 2 } continue

	set shader_name [lindex $shader 0]
	set shader_params [lindex $shader 1]
	set index [lsearch -exact $shader_params "mid"]
	if { $index == -1 } continue

	incr index
	set mid [lindex $shader_params $index]

	if { [info exists mdb_array($mid)] } {
	    set mdb_entry $mdb_array($mid)

	    puts " Adjusting $comb"
	    if { $mode == 0 } {
		# initial application, save the current settings in attributes
		if { ![catch {attr get $comb lgt_mdb_params} old_attr ] } {
		    if { [string compare $old_attr $shader] != 0 } {
			puts "WARNING: $comb already has LGT parameters saved"
			puts "\tand they are different from the current settings"
			puts "\tthe old saved settings will be overwritten"
			puts "\t old settings: $old_attr"
		    }
		}
		set old_rgb [db get $comb "rgb"]
		if { [string compare $old_rgb "invalid"] == 0 } {
		    attr set $comb "lgt_mdb_params" $shader \
			    "old_inherit" [db get $comb "inherit"]
		} else {
		    attr set $comb "lgt_mdb_params" $shader "old_rgb"\
			    $old_rgb "old_inherit" [db get $comb "inherit"]
		}
	    }

	    # apply the lgt material properties
	    db adjust $comb shader [list "plastic" [lrange $mdb_entry 1 12]]
	    db adjust $comb inherit yes rgb [lindex $mdb_entry 13]
	}
    }
}

proc make_lgt_light { args } {
    set num_args [llength $args]
    if { $num_args != 1 && $num_args != 4 } {
	puts "ERROR: usage:"
	puts "\tmake_lgt_light light_region [x y z]"
	return
    }

    set light [lindex $args 0]
    if { $num_args == 4 } {
	set x [lindex $args 1]
	set y [lindex $args 2]
	set z [lindex $args 3]
    } else {
	set x 2500
	set y 4330
	set z 8660
    }

    if { [catch {db get $light tree} light_tree] } {
	# light object does not exist, create a new one
	set light_solid [make_name s.light@@]
	db put $light_solid sph V "$x $y $z" A { 0.1 0 0 } \
		B { 0 0.1 0 } C { 0 0 0.1 }
	db put $light comb region yes id 1 shader light tree "l $light_solid"
    } else {
	# move existing light to the LGT default position
	set mged_state [status state]

	if { $mged_state != "VIEWING" } {
	    puts "This command cannot be run in $mged_state state, must be viewing"
	    return
	}

	set operator [lindex $light_tree 0]
	while { $operator != "l" } {
	    set light_tree [lindex $light_tree 1]
	    set operator [lindex $light_tree 0]
	}

	set member_name [lindex $light_tree 1]

	draw $light
	oed $light $member_name
	translate $x $y $z
	press accept
    }
}
# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.7
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
d14 1
a14 1
# Library General Public License for more details.
@


14.6
log
@update copyright to 2006
@
text
@d4 1
a4 1
# Copyright (c) 2004-2006 United States Government as represented by
@


14.5
log
@update copyright to 2005
@
text
@d4 1
a4 1
# Copyright (C) 2004-2005 United States Government as represented by
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
# Copyright (c) 2004 United States Government as represented by the
# U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d61 1
a61 1
    # mode:
d202 9
a210 1
}@

