head	14.11;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.11
date	2007.01.27.01.41.52;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.51;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.04;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.31.02.05.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.31.30;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2004.12.21.06.18.54;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.29;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.49.31;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.24;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@#                    M G E D P A G E . I T K
# BRL-CAD
#
# Copyright (c) 2004-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
#
# This megawidget is the general viewer/selector page.
#

package require Itcl
package require Itk
package require Iwidgets

namespace eval RtWizard {

    package provide MGEDpage 1.0

    #
    # mgedpage - Provides a lowercased access method for the
    #            MGED page class
    #
    proc mgedpage {pathName args} {
	uplevel MGEDpage $pathName $arg
    }

    #
    # Add options
    #
    option add *MGEDpage.borderWidth 2 widgetDefault
    option add *MGEDpage.labelPos nw widgetDefault
    option add *MGEDpage.listHeight 150 widgetDefault
    option add *MGEDpage.hscrollMode dynamic widgetDefault
    option add *MGEDpage.vscrollMode dynamic widgetDefault
    option add *MGEDpage.textBackground seashell
    option add *MGEDpage.stepName "No Step" widgetDefault
    option add *MGEDpage.helpText "You're on your own!" widgetDefault
    option add *MGEDpage.relief groove widgetDefault
    option add *MGEDpage.onSelectCallback {} widgetDefault
    option add *MGEDpage.onDeselectCallback {} widgetDefault
    option add *MGEDpage.statusCallback {} widgetDefault


    ::itk::usual MGEDpage {
	keep    -background \
		-borderwidth \
		-cursor \
		-elementborderwidth \
		-foreground \
		-highlightcolor \
		-highlightthickness \
		-insertbackground \
		-insertborderwidth \
		-insertofftime \
		-insertontime \
		-insertwidth \
		-jump \
		-labelfont \
		-selectbackground \
		-selectborderwidth \
		-textbackground \
		-textfont \
		-troughcolor \
		-stepName
    }

    ::itcl::class MGEDpage {
	inherit ::iwidgets::Labeledwidget

	constructor {database args} { }

	#
	# Configuration variables
	#
	itk_option define -stepName stepName StepName "No Step"
	itk_option define -helpText helptext HelpText ""

	itk_option define -onSelectCallback \
		onselectcallback \
		OnSelectCallback \
		{}
	itk_option define -onDeselectCallback \
		ondeselectcallback \
		OnDeselectCallback \
		{}
	itk_option define -statusCallback \
		statuscallback \
		StatusCallback \
		{}

	#
	# All pages must support these methods
	#
	public {
	    method onSelect {}
	    method onDeselect {}
	    method getStepInfo {}
	    method setHelpText {text}
	    method getObjects {}
	    method getAzimuth {}
	    method getElevation {}
	    method getSize {}
	    method getPerspective {}
	    method getOrientation
	    method getEyepoint
	    method getLineColor {} {return $lineColor}
	    method getNonLineColor {} {return $nonLineColor}
	    method getBackgroundColor {} {return $backgroundColor}
	    method getIntensity {} {return $intensity}
	    method getEyeModel {}
	    method getRegionColorFlag {} {return $useRegionColors}
	    method getOcclusionMode {}
	}

	protected {
	    method getChildren {parent}
	    method selectNode {tags isOn}
	    method clearDisplay {}
	    method refreshDisplay {}
	    method setAzEl {ignored}

	    method updateStatus {}

	    method captureView {}
	    method restoreView {}

	    method createAzimuthDialog {parent}
	    method azimuthDialogReveal {}
	    method azimuthDialogOK {}
	    method azimuthDialogApply {}
	    method azimuthDialogCancel {}

	    method createElevationDialog {parent}
	    method elevationDialogReveal {}
	    method elevationDialogOK {}
	    method elevationDialogApply {}
	    method elevationDialogCancel {}

	    method createSizeDialog {parent}
	    method sizeDialogReveal {}
	    method sizeDialogOK {}
	    method sizeDialogApply {}
	    method sizeDialogCancel {}

	    method createPerspectiveDialog {parent}
	    method perspectiveDialogReveal {}
	    method perspectiveDialogOK {}
	    method perspectiveDialogApply {}
	    method perspectiveDialogCancel {}

	    method lineColorChooser {}
	    method nonLineColorChooser {}
	    method backgroundColorChooser {}

	    method createOccModeDialog {parent}
	    method occModeDialogReveal {}
	    method occModeDialogOK {}
	    method occModeDialogApply {}
	    method occModeDialogCancel {}

	    method createIntensityDialog {parent}
	    method intensityDialogReveal {}
	    method intensityDialogOK {}
	    method intensityDialogApply {}
	    method intensityDialogCancel {}
	}

	private {
	    #
	    # Am I currently selected
	    #
	    variable isSelected false

	    # View storage and restoration

	    variable selected ""
	    variable currentEye {742.404 519.837 422.618}
	    variable currentSize 2000
	    variable currentCenter {0 0 0}
	    variable currentRmat \
		    {-0.573576  0.819152  0         0  \
		    -0.346189 -0.242404  0.906308  0  \
		    0.742404  0.519837  0.422618  0  \
		    0         0         0         1}
	    variable currentAzimuth 35
	    variable currentElevation 25
	    variable currentPerspective 0
	    variable currentEyemodel ""

	    # Azimuth Stuff
	    variable oldAzimuth

	    # Elevation Stuff
	    variable oldElevation

	    # Size Stuff
	    variable oldSize

	    # Perspective Stuff
	    variable oldPerspective

	    # Line-color stuff
	    variable lineColor "#000000"
	    variable useRegionColors false

	    #
	    # nonlinecolor stuff
	    #
	    variable nonLineColor "#ffffff"

	    # Background Color stuff
	    variable backgroundColor "#ffffff"

	    # Occlusion Mode stuff
	    variable occMode 1

	    # Intensity Stuff
	    variable oldIntensity 25

	    # Menu stuff
	    variable viewMenu ""
	    common viewCount 0

	    variable optionsMenu ""
	    common optionsCount 0

	    variable status
	}
    }

    #--------------------#
    #   Public Methods   #
    #--------------------#
    #
    # constructor
    #
    itcl::body MGEDpage::constructor {database args} {

	#
	# The database must exist for the MGED object to be created.
	# Test it.
	#
	if { ! [file exists $database] } {
	    error "$database does not exist."
	}

	#
	# Set up the childsite
	#
	set cs [ $this childsite ]
	$cs configure -relief groove -bd 2

	#
	# Create the help panel
	#
	itk_component add helpPanel {
	    ::iwidgets::scrolledtext $cs.helpPanel \
		    -hscrollmode none \
		    -vscrollmode dynamic \
		    -visibleitems 80x3 \
		    -wrap word \
		    -relief flat\
		    -textfont {helvetica 12 italic}
	} {
	    usual
	    ignore -textbackground
	}

	#
	# Create a frame for the center of the panel. On the left
	# will be the hierachy window, on the right will be the
	# mged window over its controls
	#
	itk_component add midFrame {
	    frame $cs.midFrame \
		    -relief flat
	} {
	    usual
	}

	#
	# Create a frame for the mged object and its controls
	#
	itk_component add mgedFrame {
	    frame $itk_component(midFrame).mgedFrame \
		    -relief flat
	} {
	    usual
	}

	#
	# Note that the MGED object is produced separately.
	# It resides in global scope. The pages pack/pack forget
	# it as necessary.
	#


	#
	# Create a frame for the hierarchy widgets and controls
	#
	itk_component add hierFrame {
	    frame $itk_component(midFrame).hierFrame \
		    -relief flat
	} {
	    usual
	}

	#
	# Create a frame to manage the contols
	#
	itk_component add conFrame {
	    iwidgets::labeledframe $itk_component(hierFrame).conFrame \
		    -background #666699 \
		    -relief groove \
		    -labeltext {} \
		    -labelpos se
	}
	set conFrameCS [ $itk_component(conFrame) childsite ]

	# Refresh
	itk_component add refresh {
	    button $conFrameCS.refresh \
		    -text Refresh \
		    -width 8 \
		    -command "[itcl::code $this refreshDisplay]"
	} {
	    usual
	}

	# Clear
	itk_component add clear {
	    button $conFrameCS.clear \
		    -text Clear \
		    -width 8 \
		    -command "[itcl::code $this clearDisplay]"
	} {
	    usual
	}

	#
	# Create the selection radiobox
	#
	itk_component add useMe {
	    radiobutton $conFrameCS.useMe \
		    -text "Use this view for image" \
		    -variable ::RtWizard::ExamplePage::viewPage \
		    -value $this
	} {
	    usual
	}

#	# Previous
#	itk_component add prev {
#	    button $conFrameCS.prev \
#		    -text "Previous" \
#		    -width 8 \
#		    -command "[itcl::code $this goPrev]"
#	} {
#	    usual
#	}

#	# Next
#	itk_component add next {
#	    button $conFrameCS.next \
#		    -text Next \
#		    -width 8 \
#		    -command "[itcl::code $this goNext]"
#	} {
#	    usual
#	}

	#
	# Create the hierarchy browser
	#
	itk_component add hier {
	    hierarchy $itk_component(hierFrame).#auto \
		    -querycommand  "[itcl::code $this getChildren] %n " \
		    -selectcommand "[itcl::code $this selectNode] %n %s " \
		    -alwaysquery 0 \
		    -expanded 0 \
		    -visibleitems 30x20 \
		    -vscrollmode dynamic \
		    -hscrollmode dynamic \
		    -labeltext $database \
		    -labelpos nw

	} {
	    usual
	}

	#
	# Create the dialogs
	#
	createElevationDialog   $itk_interior
	createAzimuthDialog     $itk_interior
	createSizeDialog        $itk_interior
	createPerspectiveDialog $itk_interior
	createIntensityDialog $itk_interior
	createOccModeDialog   $itk_interior

	#
	# Grid/Pack the items
	#
	grid $itk_component(clear) \
		-row 0 \
		-column 0 \
		-padx 10 \
		-pady 5
	grid $itk_component(refresh) \
		-row 0 \
		-column 1 \
		-padx 10 \
		-pady 5
	grid $itk_component(useMe) \
		-row 1 \
		-column 0 \
		-columnspan 2 \
		-padx 10 \
		-pady 5
#	grid $itk_component(prev) -row 2 -column 0
#	grid $itk_component(next) -row 2 -column 1

	pack $itk_component(hier) -expand 1 -fill both -anchor w
	pack $itk_component(conFrame) -anchor s

	pack $itk_component(hierFrame) -side left -anchor w -fill both -expand 1
	pack $itk_component(mgedFrame) -padx 10 -pady 23 \
	    -expand 1 -fill both -anchor e -side right

	pack $itk_component(helpPanel) -anchor s
	pack $itk_component(midFrame) -expand 1 -fill both

	eval itk_initialize $args

    }

    #
    # getStepInfo
    #
    # Returns the name of the this step, and the variable that monitors
    # the state of the step.
    #
    itcl::body MGEDpage::getStepInfo {} {
	set a [cget -stepName]
	set b [itcl::scope status]
	return [ list $a $b ]
    }

    #
    # onSelect
    #
    # Does stuff when the page is selected
    #
    itcl::body MGEDpage::onSelect {} {
	#
	# update isSelected flag
	#
	set isSelected true

	updateStatus

	#
	# Restore the view
	#
	restoreView

	#
	# Pack the mged object in _my_ mged frame
	#
	pack $::mgedObj \
		-in $itk_component(mgedFrame) \
		 -anchor e \
		 -expand 1 -fill both

	#
	# Create menus - use the singleton
	#
	global wizardInstance
	set w $wizardInstance

	#
	# Generate a unique name
	#
	set viewMenu ""
	append viewMenu "view" $viewCount

	incr viewCount

	$w menubar add menubutton $viewMenu \
		-text "View" \
		-menu {
	    options -tearoff true -selectcolor green
	}

	$w menubar add command .$viewMenu.azimuth -label "Azimuth..." \
		-helpstr "Set azimuth value" \
		-command "[::itcl::code $this azimuthDialogReveal]"

	$w menubar add command .$viewMenu.elevation -label "Elevation..." \
		-helpstr "Set elevation value" \
		-command "[::itcl::code $this elevationDialogReveal]"

	$w menubar add command .$viewMenu.size -label "Size..." \
		-helpstr "Set view size" \
		-command "[::itcl::code $this sizeDialogReveal]"

	$w menubar add command .$viewMenu.perspective -label "Perspective..." \
	       -helpstr "Set view perspective" \
	       -command "[::itcl::code $this perspectiveDialogReveal]"

	#
	# Do the options menu, callback to the child
	#
	set optionsMenu ""
	append optionsMenu "rtOptMenu" $optionsCount

	incr optionsCount

	$w menubar add menubutton $optionsMenu \
		-text "Options" \
		-menu {
	    options -selectcolor green
	}

	if {[cget -onSelectCallback] != ""} {
	    eval [cget -onSelectCallback] $optionsMenu
	}
    }

    #
    # onDeselect
    #
    # Cleans up when a page is deselected
    #
    itcl::body MGEDpage::onDeselect {} {
	updateStatus

	#
	# Capture the current view
	#
	captureView

	#
	# Unpack the mged object from my mgedFrame so that
	# someone else may pack it in theirs.
	#
	pack forget $::mgedObj
	#
	# Delete our specific menu entries
	#
	global wizardInstance
	set w $wizardInstance

	if { [string length $viewMenu] > 0 } {
	    $w menubar delete $viewMenu
	}

	if { [string length $optionsMenu] > 0 } {
	    $w menubar delete $optionsMenu
	}

	if {[cget -onDeselectCallback] != ""} {
	    eval [cget -onDeselectCallback]
	}

	#
	# update isSelectedFlag
	#
	set isSelected false
    }

    #
    # getObjects - returns the list of currently selected objects
    #
    ::itcl::body MGEDpage::getObjects { } {
	if {$isSelected == "true"} {
	    set selected [$itk_component(hier) selection get]
	}
	return $selected
    }

    #
    # getAzimuth - returns the current view azimuth
    #
    ::itcl::body MGEDpage::getAzimuth { } {
	if {$isSelected == "true"} {
	    set currentAzimuth [lindex [$::mgedObj ae] 0 ]
	}
	return $currentAzimuth
    }

    #
    # getElevation - returns the current view elevation
    #
    ::itcl::body MGEDpage::getElevation { } {
	if {$isSelected == "true"} {
	    set currentElevation [lindex [$::mgedObj ae] 1 ]
	}
	return $currentElevation
    }

    #
    # getSize - returns the current size
    #
    itcl::body MGEDpage::getSize {} {
	if {$isSelected == "true"} {
	    set currentSize [$::mgedObj size]
	}
	return $currentSize
    }

    #
    # getOrientation - returns the current orientation quaternion
    #
    itcl::body MGEDpage::getOrientation {} {
	if {$isSelected == "true"} {
	    set currentRmat [ $::mgedObj rmat ]
	}
	return [ quat_mat2quat $currentRmat]
    }

    #
    # getEyeModel - returns the full specification of the view.
    #               Note the "kludge" necessary to get the view info
    #               from the Mged object.
    #
    itcl::body MGEDpage::getEyeModel {} {
	if {$isSelected == "true"} {
	    set vu [$::mgedObj component [$::mgedObj cget -pane]]
	    append view "::" $vu "_view"
	    set currentEyemodel [$::mgedObj get_eyemodel $view]
	}
	return $currentEyemodel

    }

    #
    # getEyepoint - returns the current eyepoint
    #
    itcl::body MGEDpage::getEyepoint {} {
	if {$isSelected == "true"} {
	    set currentEye [$::mgedObj eye]
	}
	return $currentEye
    }

    #
    # getPerspective - returns the current view perspective
    #
    itcl::body MGEDpage::getPerspective { } {
	if {$isSelected == "true"} {
	    set currentPerspective [$::mgedObj perspective_angle]
	}
	return $currentPerspective
    }

    #--------------------#
    #  Private Methods   #
    #--------------------#
    #
    # getChildren - returns the children of the given parent.
    #
    #
    ::itcl::body MGEDpage::getChildren {parent} {

	set objs {}

	if { [string length $parent] == 0 } {
	    #
	    # When the widget is initially opened, the parent is null.
	    # In this case, use tops.
	    #
	    set raw [ $::mgedObj tops ]
	    foreach i $raw {
		if { $i != "_GLOBAL" } {
		    regsub {/R*} $i {} clean
		    lappend objs $clean
		}
	    }
	} else {
	    #
	    # For the given parent, get its consituents using the 'lt'
	    # command. This produces a tcl list of the items.
	    #
	    set t [file tail $parent]
	    set raw [ $::mgedObj lt $t ]
	    foreach i $raw {
		set obj [lindex $i 1]
		lappend objs [list [file join $parent $obj] $obj]
	    }
	}

	return $objs
    }

    #
    # selectNode - toggles a node selection state.
    #
    itcl::body MGEDpage::selectNode {tag isOn} {

	if {$isOn} {
	    $::mgedObj erase $tag
	    $itk_component(hier) selection remove $tag
	} else {
	    $::mgedObj draw $tag
	    $itk_component(hier) selection add $tag
	}
	updateStatus
    }

    #
    # setHelpText - sets the contents of the help widget
    #
    ::itcl::body MGEDpage::setHelpText { text } {

	$itk_component(helpPanel) clear
	$itk_component(helpPanel) insert end $text
    }

    #
    # clearDisplay - clears the mged display and the selections in the
    #                hierarchy widget.
    #
    ::itcl::body MGEDpage::clearDisplay { } {

	$itk_component(hier) selection clear
	$::mgedObj zap
	updateStatus
    }

    #
    # refreshDisplay - clears the mged display, and redraws the selected items.
    #
    ::itcl::body MGEDpage::refreshDisplay { } {

	# get the list of currently selected items
	set selected [$itk_component(hier) selection get]

	# clear the display
	$::mgedObj zap

	# redraw the selection list
	eval $::mgedObj draw $selected

	updateStatus
    }

    #
    # captureView - executed by onDeselect, this method records the
    #               currently selected objects and the view info so
    #               that it may be restored by onSelect
    #
    ::itcl::body MGEDpage::captureView {} {
	#
	# All of the get* methods set the current values, so we'll
	# use them.
	#
	set selected  [$itk_component(hier) selection get]

	getAzimuth
	getElevation
	getSize
	getOrientation
	getEyeModel
	getPerspective

	set currentEye [$::mgedObj eye]
	set currentSize [$::mgedObj size]
	set currentRmat [$::mgedObj rmat]
	set currentCenter [$::mgedObj center]
    }

    #
    # restoreView - restores the mgedObj to its previous state.
    #
    ::itcl::body MGEDpage::restoreView {} {
	$::mgedObj zap

	#
	# Reselect the objects - XXX
	#
	if {[llength $selected] > 0} {
	    eval $::mgedObj draw $selected
	}

	#
	# Reset the view
	#
	$::mgedObj eye $currentEye
	$::mgedObj center $currentCenter
	$::mgedObj size $currentSize
	$::mgedObj rmat $currentRmat
    }

    #
    # setAzEl - changes the view to match the selected Azimuth and
    #           Elevation
    #
    ::itcl::body MGEDpage::setAzEl { ignored } {
	set az [ $itk_component(azimuth) get ]
	set el [ $itk_component(elevation) get ]
	$::mgedObj ae $az $el 0
	updateStatus

    }

    #
    # updateStatus
    #
    ::itcl::body MGEDpage::updateStatus { } {

	#
	# Something must be selected for the page to be ready.
	# If nothing is selected, then the wrong picture type
	# has been picked.
	#
	set selected [$itk_component(hier) selection get]

	if {[llength $selected] == 0 } {
	    set status 0
	    $::wizardInstance updateRenderMenu
	    return
	}
	if {[cget -statusCallback] != ""} {
	    if {[eval [cget -statusCallback]] == 0} {
		set status 0
		$::wizardInstance updateRenderMenu
		return
	    }
	}

	set status 1
	$::wizardInstance updateRenderMenu
	return
    }


    #--------------------#
    #  Azimuth Control   #
    #--------------------#
    #
    # createAzimuthDialog - creates a dialog window that allows the user
    #                       to set the view azimuth
    #
    ::itcl::body MGEDpage::createAzimuthDialog {parent} {

	itk_component add azimuthDialog {
	    iwidgets::dialog $parent.#auto -title Azimuth
	} {
	    usual
	}

	set cs [ eval $itk_component(azimuthDialog) childsite ]

	itk_component add azimuth {
	    scale $cs.az \
		    -orient horizontal \
		    -from 0 \
		    -to 360 \
		    -length 360 \
		    -resolution 1\
		    -tickinterval 45 \
		    -font {Helvetica 8  bold} \
		    -repeatinterval 3000 \
		    -repeatdelay 3000 \
		    -command {}
	    #		-command "[itcl::code $this setAzEl]"
	} {
	    usual
	}

	$itk_component(azimuth) set [ getAzimuth ]
	$itk_component(azimuthDialog) hide Help
	$itk_component(azimuthDialog) buttonconfigure OK \
		-command "[::itcl::code $this azimuthDialogOK]"
	$itk_component(azimuthDialog) buttonconfigure Apply \
		-command "[::itcl::code $this azimuthDialogApply]"
	$itk_component(azimuthDialog) buttonconfigure Cancel \
		-command "[::itcl::code $this azimuthDialogCancel]"
	pack $itk_component(azimuth)
	$itk_component(azimuthDialog) deactivate
    }

    #
    # azimuthDialogReveal - executed when the azimuth dialog window
    #                       is requested from the menu bar
    #
    ::itcl::body MGEDpage::azimuthDialogReveal {} {
	set oldAzimuth [ getAzimuth ]
	$itk_component(azimuth) set $oldAzimuth
	$itk_component(azimuthDialog) activate
    }

    #
    # azimuthDialogOK - executed when the OK button is pressed.
    #
    ::itcl::body MGEDpage::azimuthDialogOK {} {
	setAzEl " "
	$itk_component(azimuthDialog) deactivate
	updateStatus
    }

    #
    # azimuthDialogApply - executed when the apply button is pressed.
    #
    ::itcl::body MGEDpage::azimuthDialogApply {} {
	setAzEl " "
	updateStatus
    }

    #
    # azimuthDialogCancel - executed when the close button is pressed.
    #
    ::itcl::body MGEDpage::azimuthDialogCancel {} {
	$itk_component(azimuth) set $oldAzimuth
	setAzEl " "
	$itk_component(azimuthDialog) deactivate
	updateStatus
    }

    #--------------------#
    #  Elevation Control #
    #--------------------#
    #
    # createElevationDialog - creates a dialog window that allows the user
    #                         to set the view elevation
    #
    ::itcl::body MGEDpage::createElevationDialog {parent} {

	itk_component add elevationDialog {
	    iwidgets::dialog $parent.#auto -title Elevation
	} {
	    usual
	}

	set cs [ eval $itk_component(elevationDialog) childsite ]

	itk_component add elevation {
	    scale $cs.el \
		    -orient vertical \
		    -from 90 \
		    -to -90 \
		    -length 180 \
		    -resolution 1\
		    -tickinterval 30 \
		    -font {Helvetica 8  bold} \
		    -repeatinterval 3000 \
		    -repeatdelay 3000 \
		    -command {}
	    #		-command "[itcl::code $this setAzEl]"
	} {
	    usual
	}

	$itk_component(elevation) set [ getElevation ]
	$itk_component(elevationDialog) hide Help
	$itk_component(elevationDialog) buttonconfigure OK \
		-command "[::itcl::code $this elevationDialogOK]"
	$itk_component(elevationDialog) buttonconfigure Apply \
		-command "[::itcl::code $this elevationDialogApply]"
	$itk_component(elevationDialog) buttonconfigure Cancel \
		-command "[::itcl::code $this elevationDialogCancel]"
	pack $itk_component(elevation)
	$itk_component(elevationDialog) deactivate
    }

    #
    # elevationDialogReveal - executed when the elevation dialog window
    #                       is requested from the menu bar
    #
    ::itcl::body MGEDpage::elevationDialogReveal {} {
	set oldElevation [ getElevation ]
	$itk_component(elevation) set $oldElevation
	$itk_component(elevationDialog) activate
    }

    #
    # elevationDialogOK - executed when the OK button is pressed.
    #
    ::itcl::body MGEDpage::elevationDialogOK {} {
	setAzEl " "
	$itk_component(elevationDialog) deactivate
	updateStatus
    }

    #
    # elevationDialogApply - executed when the apply button is pressed.
    #
    ::itcl::body MGEDpage::elevationDialogApply {} {
	setAzEl " "
	updateStatus
    }

    #
    # elevationDialogCancel - executed when the close button is pressed.
    #
    ::itcl::body MGEDpage::elevationDialogCancel {} {
	$itk_component(elevation) set $oldElevation
	setAzEl " "
	$itk_component(elevationDialog) deactivate
	updateStatus
    }

    #--------------------#
    #    Size Control    #
    #--------------------#
    #
    # createSizeDialog - creates a dialog window that allows the user
    #                         to set the view size
    #
    ::itcl::body MGEDpage::createSizeDialog {parent} {

	#
	# Get the units
	#
	set rawUnits [ $::mgedObj units ]
	set units [ string trim [ lindex $rawUnits 4 ] {'.} ]

	#
	# Get the current size
	#
	set currSize  [ $::mgedObj size ]

	#
	# Build the dialog
	#
	itk_component add sizeDialog {
	    iwidgets::dialog $parent.#auto -title Size
	} {
	    usual
	}

	set cs [ eval $itk_component(sizeDialog) childsite ]

	#
	# Build the current size indicator
	#
	itk_component add sizeLabel {
	    labeledwidget $cs.scl \
		    -labeltext "Current Size:" \
		    -labelpos "w"
	} {
	    usual
	}

	set cs2 [$itk_component(sizeLabel) childsite]

	itk_component add sizeCurrent {
	    label $cs2.l1 \
		    -text $currSize \
		    -width 10
	} {
	    usual
	}

	itk_component add sizeUnits1 {
	    label $cs2.l2 \
		    -text $units
	} {
	    usual
	}

	#
	# Build the entry field for the size.
	#
	itk_component add sizeEntry {
	    entryfield $cs.sze \
		    -labeltext "Desired Size:" \
		    -labelpos w \
		    -width 10\
		    -command "[::itcl::code $this sizeDialogApply]"
	} {
	    usual
	}

	set cs3 [ $itk_component(sizeEntry) childsite ]

	# units
	itk_component add sizeUnits2 {
	    label $cs3.l1 \
		    -text $units
	} {
	    usual
	}


	$itk_component(sizeDialog) hide Help
	$itk_component(sizeDialog) buttonconfigure OK \
		-command "[::itcl::code $this sizeDialogOK]"
	$itk_component(sizeDialog) buttonconfigure Apply \
		-command "[::itcl::code $this sizeDialogApply]"
	$itk_component(sizeDialog) buttonconfigure Cancel \
		-command "[::itcl::code $this sizeDialogCancel]"

	pack $itk_component(sizeCurrent) -side left
	pack $itk_component(sizeUnits1)

	pack $itk_component(sizeUnits2)

	pack $itk_component(sizeLabel) -anchor c
	pack $itk_component(sizeEntry) -anchor c

	#
	# Align the widgets
	#
	eval iwidgets::Labeledwidget::alignlabels \
		$itk_component(sizeLabel) \
		$itk_component(sizeEntry)

	$itk_component(sizeDialog) deactivate
    }

    #
    # sizeDialogReveal - executed when the size dialog window
    #                       is requested from the menu bar
    #
    ::itcl::body MGEDpage::sizeDialogReveal {} {
	set oldSize [ $::mgedObj size ]
	$itk_component(sizeCurrent) configure -text $oldSize
	$itk_component(sizeEntry) clear
	$itk_component(sizeEntry) insert 0 $oldSize
	$itk_component(sizeDialog) activate
    }

    #
    # sizeDialogOK - executed when the OK button is pressed.
    #
    ::itcl::body MGEDpage::sizeDialogOK {} {
	$::mgedObj size [ $itk_component(sizeEntry) get ]
	$itk_component(sizeDialog) deactivate
	updateStatus
    }

    #
    # sizeDialogApply - executed when the apply button is pressed.
    #
    ::itcl::body MGEDpage::sizeDialogApply {} {
	set newSize [ $itk_component(sizeEntry) get ]
	$::mgedObj size $newSize
	$itk_component(sizeCurrent) configure -text $newSize
	updateStatus
    }

    #
    # sizeDialogCancel - executed when the close button is pressed.
    #
    ::itcl::body MGEDpage::sizeDialogCancel {} {
	$::mgedObj size $oldSize
	$itk_component(sizeDialog) deactivate
	updateStatus
    }

    #---------------------#
    # Perspective Control #
    #---------------------#
    #
    # createPerspectiveDialog - creates a dialog window that allows the user
    #                         to set the view perspective
    #
    ::itcl::body MGEDpage::createPerspectiveDialog {parent} {

	itk_component add perspectiveDialog {
	    iwidgets::dialog $parent.#auto -title Perspective
	} {
	    usual
	}

	set cs [ eval $itk_component(perspectiveDialog) childsite ]

	itk_component add perspective {
	    scale $cs.el \
		    -orient horizontal \
		    -from 0 \
		    -to 180 \
		    -length 180 \
		    -resolution 1\
		    -tickinterval 45 \
		    -font {Helvetica 8  bold} \
		    -repeatinterval 3000 \
		    -repeatdelay 3000 \
		    -command {}
	} {
	    usual
	}

	$itk_component(perspective) set [ getPerspective ]
	$itk_component(perspectiveDialog) hide Help
	$itk_component(perspectiveDialog) buttonconfigure OK \
		-command "[::itcl::code $this perspectiveDialogOK]"
	$itk_component(perspectiveDialog) buttonconfigure Apply \
		-command "[::itcl::code $this perspectiveDialogApply]"
	$itk_component(perspectiveDialog) buttonconfigure Cancel \
		-command "[::itcl::code $this perspectiveDialogCancel]"
	pack $itk_component(perspective)
	$itk_component(perspectiveDialog) deactivate
    }

    #
    # perspectiveDialogReveal - executed when the perspective dialog window
    #                       is requested from the menu bar
    #
    ::itcl::body MGEDpage::perspectiveDialogReveal {} {
	set oldPerspective [ getPerspective ]
	$itk_component(perspective) set $oldPerspective
	$itk_component(perspectiveDialog) activate
    }

    #
    # perspectiveDialogOK - executed when the OK button is pressed.
    #
    ::itcl::body MGEDpage::perspectiveDialogOK {} {
	set oldPerspective [ $itk_component(perspective) get]
	$::mgedObj perspective_angle $oldPerspective
	$itk_component(perspectiveDialog) deactivate
	updateStatus
    }

    #
    # perspectiveDialogApply - executed when the apply button is pressed.
    #
    ::itcl::body MGEDpage::perspectiveDialogApply {} {
	set oldPerspective [ $itk_component(perspective) get]
	$::mgedObj perspective_angle $oldPerspective
	updateStatus
    }

    #
    # perspectiveDialogCancel - executed when the close button is pressed.
    #
    ::itcl::body MGEDpage::perspectiveDialogCancel {} {
	$itk_component(perspective) set $oldPerspective
	$::mgedObj perspective $oldPerspective
	$itk_component(perspectiveDialog) deactivate
	updateStatus
    }

    #--------------------#
    # Line Color Control #
    #--------------------#
    #
    # The LineColor dialog uses the existing tk_chooseColor widget.
    # This widget is created on demand rather than created beforehand
    # and activated.
    #
    #
    # lineColorChooser - executed when the line color dialog window
    #                    is requested from the menu bar
    #
    ::itcl::body MGEDpage::lineColorChooser {} {
	set inColor $lineColor

	set outColor [tk_chooseColor \
		-initialcolor $inColor \
		-title "Line Color"]

	if {[string length $outColor] == 7 } {
	    set lineColor $outColor

	    #
	    # Since the user has chosen a color, unselect the
	    # useRegionColors field
	    #
	    set useRegionColors false
	}
	updateStatus
    }

    #------------------------#
    # Non-Line Color Control #
    #------------------------#
    #
    # Non-Line colors are colors for non-edge hits when occMode > 1
    #
    #
    # nonLineColorChooser - executed when the line color dialog window
    #                    is requested from the menu bar
    #
    ::itcl::body MGEDpage::nonLineColorChooser {} {
	set inColor $nonLineColor

	set outColor [tk_chooseColor \
		-initialcolor $inColor \
		-title "Non-Line Color"]

	if {[string length $outColor] == 7 } {
	    set nonLineColor $outColor
	}
	updateStatus
    }

    #--------------------------#
    # Background Color Control #
    #--------------------------#
    #
    # The Background Color dialog uses the existing tk_chooseColor widget.
    # This widget is created on demand rather than created beforehand
    # and activated.
    #
    #
    # BackgroundColorChooser - executed when the line color dialog window
    #                          is requested from the menu bar
    #
    ::itcl::body MGEDpage::backgroundColorChooser {} {
	set inColor $backgroundColor

	set outColor [tk_chooseColor \
		-initialcolor $inColor \
		-title "Background Color"]

	if {[string length $outColor] == 7 } {
	    set backgroundColor $outColor
	}
	updateStatus
    }

    #------------------------#
    # Occlusion Mode Control #
    #------------------------#
    #
    # createOccModeDialog - creates a dialog window that allows the user
    #                       to set the occlusion mode
    #
    ::itcl::body MGEDpage::createOccModeDialog {parent} {

	#
	# Build the dialog
	#
	itk_component add occModeDialog {
	    iwidgets::dialog $parent.#auto -title "Occlusion Mode"
	} {
	    usual
	}

	set cs [ eval $itk_component(occModeDialog) childsite ]

	#
	# Build the radiobox
	#
	itk_component add occModeRB {
	    radiobox $cs.rb \
		    -labeltext "Select the Occlusion Mode:" \
		    -labelpos "nw" \
		    -ipady 10
	} {
	    usual
	}

	$itk_component(occModeRB) add "mode1" \
		-text "Draw foreground lines only"
	$itk_component(occModeRB) add "mode2" \
		-text "Also draw non-line surfaces in the background color"
	$itk_component(occModeRB) add "mode3" \
		-text "Dither the non-line surfaces (semi-transparent)"
	$itk_component(occModeRB) select mode1

	$itk_component(occModeDialog) hide Help
	$itk_component(occModeDialog) buttonconfigure OK \
		-command "[::itcl::code $this occModeDialogOK]"
	$itk_component(occModeDialog) buttonconfigure Apply \
		-command "[::itcl::code $this occModeDialogApply]"
	$itk_component(occModeDialog) buttonconfigure Cancel \
		-command "[::itcl::code $this occModeDialogCancel]"

	pack $itk_component(occModeRB)

	$itk_component(sizeDialog) deactivate
    }

    #
    # occModeDialogReveal - executed when the occlusion mode dialog
    #                       window is requested from the menu bar
    #
    ::itcl::body MGEDpage::occModeDialogReveal {} {
	set occMode [$itk_component(occModeRB) get]
	$itk_component(occModeDialog) activate
    }

    #
    # occModeDialogOK - executed when the OK button is pressed.
    #
    ::itcl::body MGEDpage::occModeDialogOK {} {
	set occMode [ $itk_component(occModeRB) get ]
	$itk_component(occModeDialog) deactivate
	updateStatus
    }

    #
    # occModeDialogApply - executed when the apply button is pressed.
    #
    ::itcl::body MGEDpage::occModeDialogApply {} {
	set occMode [ $itk_component(occModeRB) get ]
	updateStatus
    }

    #
    # occModeDialogCancel - executed when the close button is pressed.
    #
    ::itcl::body MGEDpage::occModeDialogCancel {} {
	$itk_component(occModeRB) select $oldOccMode
	$itk_component(occModeDialog) deactivate
	updateStatus
    }

    #
    # getOcclusionMode
    #
    ::itcl::body MGEDpage::getOcclusionMode {} {
	switch $occMode {
	    "mode1" { return 1 }
	    "mode2" { return 2 }
	    "mode3" { return 3 }
	}
	return 0
    }

    #--------------------#
    #  Intensity Control #
    #--------------------#
    #
    # createIntensityDialog - creates a dialog window that allows the user
    #                         to set the intensity of the ghost image
    #
    ::itcl::body MGEDpage::createIntensityDialog {parent} {

	itk_component add intensityDialog {
	    iwidgets::dialog $parent.#auto -title Intensity
	} {
	    usual
	}

	set cs [ eval $itk_component(intensityDialog) childsite ]

	itk_component add intensity {
	    scale $cs.#auto \
		    -orient horizontal \
		    -from 0 \
		    -to 100 \
		    -length 180 \
		    -resolution 1\
		    -tickinterval 20 \
		    -font {Helvetica 8  bold} \
	} {
	    usual
	}

	$itk_component(intensity) set $oldIntensity
	$itk_component(intensityDialog) hide Help
	$itk_component(intensityDialog) buttonconfigure OK \
		-command "[::itcl::code $this intensityDialogOK]"
	$itk_component(intensityDialog) buttonconfigure Apply \
		-command "[::itcl::code $this intensityDialogApply]"
	$itk_component(intensityDialog) buttonconfigure Cancel \
		-command "[::itcl::code $this intensityDialogCancel]"
	pack $itk_component(intensity)
	$itk_component(intensityDialog) deactivate
    }

    #
    # intensityDialogReveal - executed when the intensity dialog window
    #                       is requested from the menu bar
    #
    ::itcl::body MGEDpage::intensityDialogReveal {} {
	$itk_component(intensityDialog) activate
    }

    #
    # intensityDialogOK - executed when the OK button is pressed.
    #
    ::itcl::body MGEDpage::intensityDialogOK {} {
	set oldIntensity [ getIntensity ]
	$itk_component(intensityDialog) deactivate
	updateStatus
    }

    #
    # intensityDialogApply - executed when the apply button is pressed.
    #
    ::itcl::body MGEDpage::intensityDialogApply {} {
	set oldIntensity [ getIntensity ]
	updateStatus
    }

    #
    # intensityDialogCancel - executed when the close button is pressed.
    #
    ::itcl::body MGEDpage::intensityDialogCancel {} {
	$itk_component(intensity) set $oldIntensity
	$itk_component(intensityDialog) deactivate
	updateStatus
    }

}; # end namespace


# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d116 1
a116 1
 	    method getSize {}
d118 1
a118 1
            method getOrientation
d386 5
a390 5
        #
        # Create the hierarchy browser
        #
        itk_component add hier {
            hierarchy $itk_component(hierFrame).#auto \
d507 1
a507 1
        }
d537 1
a537 1
        }
a1508 2


@


14.9
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
@


14.8
log
@legal header changed from Library to Lesser to reflect current 'official' name of the license
@
text
@d4 1
a4 1
# Copyright (c) 2004-2006 United States Government as represented by
@


14.7
log
@update copyright to 2006
@
text
@d15 1
a15 1
# Library General Public License for more details.
a22 2
# MGEDpage.itk
#
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
# Copyright (C) 2004-2005 United States Government as represented by
@


14.5
log
@update copyright to 2005
@
text
@d52 1
a52 1
    option add *MGEDpage.textBackground seashell 
d59 2
a60 2
    
    
d86 1
a86 1
	
d109 1
a109 1
	# All pages must support these methods 
d113 1
a113 1
	    method onDeselect {} 
d131 1
a131 1
    
d138 1
a138 1
	    
d176 1
a176 1
	    method occModeDialogCancel {}	
d182 1
a182 1
	    method intensityDialogCancel {}	    
d190 1
a190 1
	    
d192 1
a192 1
	    
d206 1
a206 1
	    
d209 1
a209 1
	    
d212 1
a212 1
	    
d215 1
a215 1
	    
d218 1
a218 1
	    
d222 1
a222 1
	    
d227 1
a227 1
	    
d230 1
a230 1
	    
d233 1
a233 1
	    
d245 1
a245 1
	}	
d250 1
a250 1
    #--------------------#    
d255 1
a255 1
	
d263 1
a263 1
	
d269 1
a269 1
	
d285 1
a285 1
	
d287 1
a287 1
	# Create a frame for the center of the panel. On the left 
d297 1
a297 1
	
d300 1
a300 1
	# 
d314 1
a314 1
	
d317 1
a317 1
	# 
d324 1
a324 1
		
d334 1
a334 1
	} 
d336 1
a336 1
	
d346 1
a346 1
	
d352 1
a352 1
		    -command "[itcl::code $this clearDisplay]" 
d356 1
a356 1
	
d368 1
a368 1
		
d374 1
a374 1
#		    -command "[itcl::code $this goPrev]" 
d384 1
a384 1
#		    -command "[itcl::code $this goNext]" 
d388 1
a388 1
	
d403 1
a403 1
	    
d407 1
a407 1
	
d420 1
a420 1
	#    
d442 1
a442 1
	
d446 1
a446 1
	
d451 1
a451 1
	
d453 1
a453 1
    
d457 1
a457 1
    # Returns the name of the this step, and the variable that monitors 
d463 1
a463 1
	return [ list $a $b ]	
d465 1
a465 1
    
d476 1
a476 1
	
d490 1
a490 1
		 -expand 1 -fill both 
d495 1
a495 1
	global wizardInstance	
d497 1
a497 1
	
d503 1
a503 1
	
d505 1
a505 1
	
d511 1
a511 1
	
d515 1
a515 1
	
d519 1
a519 1
	
d523 1
a523 1
	
d533 1
a533 1
	
d535 1
a535 1
	
d546 1
a546 1
    
d570 1
a570 1
	
d578 1
a578 1
	
d582 1
a582 1
	
d588 1
a588 1
    
d636 1
a636 1
	return [ quat_mat2quat $currentRmat]	
d676 1
a676 1
    #--------------------#    
d682 1
a682 1
	
d684 1
a684 1
	
d706 1
a706 1
		lappend objs [list [file join $parent $obj] $obj] 
d709 1
a709 1
	
d712 1
a712 1
    
d715 1
a715 1
    # 
d717 1
a717 1
	
d727 1
a727 1
    
d732 1
a732 1
	
d734 1
a734 1
	$itk_component(helpPanel) insert end $text	
d736 1
a736 1
    
d742 1
a742 1
	
d747 1
a747 1
    
d752 1
a752 1
	
d755 1
a755 1
	
d758 1
a758 1
	
d764 1
a764 1
    
d776 1
a776 1
	
d823 1
a823 1
    
d833 1
a833 1
	# 
d853 2
a854 2
    
    
d863 1
a863 1
	
d869 1
a869 1
	
d871 1
a871 1
	
d888 1
a888 1
	
d898 1
a898 1
	$itk_component(azimuthDialog) deactivate 
d900 1
a900 1
    
d903 1
a903 1
    #                       is requested from the menu bar 
d910 1
a910 1
    
d919 1
a919 1
    
d927 1
a927 1
    
d937 1
a937 1
 
d946 1
a946 1
	
d952 1
a952 1
	
d954 1
a954 1
	
d971 1
a971 1
	
d981 1
a981 1
	$itk_component(elevationDialog) deactivate 
d983 1
a983 1
    
d986 1
a986 1
    #                       is requested from the menu bar 
d993 1
a993 1
    
d1002 1
a1002 1
    
d1010 1
a1010 1
    
d1020 1
a1020 1
       
d1029 1
a1029 1
	
d1035 1
a1035 1
	
d1040 1
a1040 1
	
d1049 1
a1049 1
	
d1051 1
a1051 1
	
d1062 1
a1062 1
	
d1064 1
a1064 1
	
d1072 1
a1072 1
	
d1079 1
a1079 1
	
d1092 1
a1092 1
	
d1094 1
a1094 1
    
d1127 1
a1127 1
	$itk_component(sizeDialog) deactivate 
d1132 1
a1132 1
    #                       is requested from the menu bar 
d1178 1
a1178 1
	
d1184 1
a1184 1
	
d1186 1
a1186 1
	
d1202 1
a1202 1
	
d1212 1
a1212 1
	$itk_component(perspectiveDialog) deactivate 
d1214 1
a1214 1
    
d1217 1
a1217 1
    #                       is requested from the menu bar 
d1224 1
a1224 1
    
d1234 1
a1234 1
    
d1243 1
a1243 1
    
d1253 1
a1253 1
    
d1260 1
a1260 1
    # and activated. 
d1264 1
a1264 1
    #                    is requested from the menu bar 
d1275 1
a1275 1
	    
d1277 1
a1277 1
	    # Since the user has chosen a color, unselect the 
d1293 1
a1293 1
    #                    is requested from the menu bar 
d1314 1
a1314 1
    # and activated. 
d1318 1
a1318 1
    #                          is requested from the menu bar 
d1341 1
a1341 1
	
d1350 1
a1350 1
	
d1352 1
a1352 1
	
d1383 1
a1383 1
	$itk_component(sizeDialog) deactivate 
d1387 2
a1388 2
    # occModeDialogReveal - executed when the occlusion mode dialog 
    #                       window is requested from the menu bar 
d1441 1
a1441 1
	
d1447 1
a1447 1
	
d1449 1
a1449 1
	
d1462 1
a1462 1
	
d1472 1
a1472 1
	$itk_component(intensityDialog) deactivate 
d1474 1
a1474 1
    
d1477 1
a1477 1
    #                       is requested from the menu bar 
d1482 1
a1482 1
    
d1491 1
a1491 1
    
d1499 1
a1499 1
    
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d52 1
a52 1
    option add *MGEDpage.textBackground seashell
d59 2
a60 2


d86 1
a86 1

d109 1
a109 1
	# All pages must support these methods
d113 1
a113 1
	    method onDeselect {}
d131 1
a131 1

d138 1
a138 1

d176 1
a176 1
	    method occModeDialogCancel {}
d182 1
a182 1
	    method intensityDialogCancel {}
d190 1
a190 1

d192 1
a192 1

d206 1
a206 1

d209 1
a209 1

d212 1
a212 1

d215 1
a215 1

d218 1
a218 1

d222 1
a222 1

d227 1
a227 1

d230 1
a230 1

d233 1
a233 1

d245 1
a245 1
	}
d250 1
a250 1
    #--------------------#
d255 1
a255 1

d263 1
a263 1

d269 1
a269 1

d285 1
a285 1

d287 1
a287 1
	# Create a frame for the center of the panel. On the left
d297 1
a297 1

d300 1
a300 1
	#
d314 1
a314 1

d317 1
a317 1
	#
d324 1
a324 1

d334 1
a334 1
	}
d336 1
a336 1

d346 1
a346 1

d352 1
a352 1
		    -command "[itcl::code $this clearDisplay]"
d356 1
a356 1

d368 1
a368 1

d374 1
a374 1
#		    -command "[itcl::code $this goPrev]"
d384 1
a384 1
#		    -command "[itcl::code $this goNext]"
d388 1
a388 1

d403 1
a403 1

d407 1
a407 1

d420 1
a420 1
	#
d442 1
a442 1

d446 1
a446 1

d451 1
a451 1

d453 1
a453 1

d457 1
a457 1
    # Returns the name of the this step, and the variable that monitors
d463 1
a463 1
	return [ list $a $b ]
d465 1
a465 1

d476 1
a476 1

d490 1
a490 1
		 -expand 1 -fill both
d495 1
a495 1
	global wizardInstance
d497 1
a497 1

d503 1
a503 1

d505 1
a505 1

d511 1
a511 1

d515 1
a515 1

d519 1
a519 1

d523 1
a523 1

d533 1
a533 1

d535 1
a535 1

d546 1
a546 1

d570 1
a570 1

d578 1
a578 1

d582 1
a582 1

d588 1
a588 1

d636 1
a636 1
	return [ quat_mat2quat $currentRmat]
d676 1
a676 1
    #--------------------#
d682 1
a682 1

d684 1
a684 1

d706 1
a706 1
		lappend objs [list [file join $parent $obj] $obj]
d709 1
a709 1

d712 1
a712 1

d715 1
a715 1
    #
d717 1
a717 1

d727 1
a727 1

d732 1
a732 1

d734 1
a734 1
	$itk_component(helpPanel) insert end $text
d736 1
a736 1

d742 1
a742 1

d747 1
a747 1

d752 1
a752 1

d755 1
a755 1

d758 1
a758 1

d764 1
a764 1

d776 1
a776 1

d823 1
a823 1

d833 1
a833 1
	#
d853 2
a854 2


d863 1
a863 1

d869 1
a869 1

d871 1
a871 1

d888 1
a888 1

d898 1
a898 1
	$itk_component(azimuthDialog) deactivate
d900 1
a900 1

d903 1
a903 1
    #                       is requested from the menu bar
d910 1
a910 1

d919 1
a919 1

d927 1
a927 1

d937 1
a937 1

d946 1
a946 1

d952 1
a952 1

d954 1
a954 1

d971 1
a971 1

d981 1
a981 1
	$itk_component(elevationDialog) deactivate
d983 1
a983 1

d986 1
a986 1
    #                       is requested from the menu bar
d993 1
a993 1

d1002 1
a1002 1

d1010 1
a1010 1

d1020 1
a1020 1

d1029 1
a1029 1

d1035 1
a1035 1

d1040 1
a1040 1

d1049 1
a1049 1

d1051 1
a1051 1

d1062 1
a1062 1

d1064 1
a1064 1

d1072 1
a1072 1

d1079 1
a1079 1

d1092 1
a1092 1

d1094 1
a1094 1

d1127 1
a1127 1
	$itk_component(sizeDialog) deactivate
d1132 1
a1132 1
    #                       is requested from the menu bar
d1178 1
a1178 1

d1184 1
a1184 1

d1186 1
a1186 1

d1202 1
a1202 1

d1212 1
a1212 1
	$itk_component(perspectiveDialog) deactivate
d1214 1
a1214 1

d1217 1
a1217 1
    #                       is requested from the menu bar
d1224 1
a1224 1

d1234 1
a1234 1

d1243 1
a1243 1

d1253 1
a1253 1

d1260 1
a1260 1
    # and activated.
d1264 1
a1264 1
    #                    is requested from the menu bar
d1275 1
a1275 1

d1277 1
a1277 1
	    # Since the user has chosen a color, unselect the
d1293 1
a1293 1
    #                    is requested from the menu bar
d1314 1
a1314 1
    # and activated.
d1318 1
a1318 1
    #                          is requested from the menu bar
d1341 1
a1341 1

d1350 1
a1350 1

d1352 1
a1352 1

d1383 1
a1383 1
	$itk_component(sizeDialog) deactivate
d1387 2
a1388 2
    # occModeDialogReveal - executed when the occlusion mode dialog
    #                       window is requested from the menu bar
d1441 1
a1441 1

d1447 1
a1447 1

d1449 1
a1449 1

d1462 1
a1462 1

d1472 1
a1472 1
	$itk_component(intensityDialog) deactivate
d1474 1
a1474 1

d1477 1
a1477 1
    #                       is requested from the menu bar
d1482 1
a1482 1

d1491 1
a1491 1

d1499 1
a1499 1

@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
# Copyright (c) 2004 United States Government as represented by the
# U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d1492 9
@

