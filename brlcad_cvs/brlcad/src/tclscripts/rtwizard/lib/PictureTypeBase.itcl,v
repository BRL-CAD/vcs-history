head	14.11;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@# @;


14.11
date	2007.01.27.01.41.52;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.51;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.04;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.31.02.05.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.31.30;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2004.12.21.06.18.54;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.29;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.49.32;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.22.18.41.38;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.25;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@#            P I C T U R E T Y P E B A S E . I T C L
# BRL-CAD
#
# Copyright (c) 2004-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
#
# This is the base class for the various picture types (duh!).
#  It provides the shared methods.
#

#
# Required packages
#
package require Itcl
package require Itk
package require Iwidgets

namespace eval RtWizard {

    package provide PictureTypeBase 1.0

    #
    # Required packages
    #

    # None!

    #
    # The PictureTypeBase class should not be instantiated!
    #
    ::itcl::class PictureTypeBase {

	public {
	    constructor {args} {}

	    #
	    # These methods handle when a picture type is chosen
	    # or replaced.
	    #
	    method activate {}
	    method deactivate {}

	    #
	    # Accessor methods
	    #
	    method getTitle {} {
		return $title
	    }

	    method getSampleImage {} {
		return $sampleImage
	    }

	    method getDescText {} {
		return $descText
	    }

	    method getHelpStr {} {
		return $helpStr
	    }

	    #
	    # These methods generate pictures. They query the
	    # individual pages for the information they need.
	    #
	    method preview {}
	    method fullSize {}
	}

	protected {
	    method rtCmd {objPage width height fb} {}
	    method rtedgeCmd \
		    {objPage fb width height \
		    {overlay 0} \
		    {occMode 0} \
		    {occObjsPage {}}}  {}
	    method hexToRGB {hexRGB} {}

	    variable title
	    variable sampleImage
	    variable descText
	    variable helpStr
	    variable introText
	    variable startPage
	}

	private {
	    method runRtCmd {cmd {viewInfo {}}}
	    method testRead {pipe}

	    variable waiting ""
	}
    }

    #--------------------#
    #   Public Methods   #
    #--------------------#
    #
    # constructor - Loads all of the information necessary
    #               to support this image type. This includes
    #               the sample image, the descriptive text,
    #
    itcl::body PictureTypeBase::constructor { args } {
	#
	# Protect against instantiation. This is an _abstract_
	# class.
	#
	set type [namespace tail [$this info class]]
	if { $type == "PictureTypeBase" } {
	    error "Can't instantiate the abstract PictureTypeBase class."
	}

	#
	# The support directory name is the same as the
	# class type.
	#

	#
	# Load the title string
	#
	set title ""

	set success 0

	foreach i $::auto_path {
	    set dir [file join $i {..} tclscripts rtwizard examples $type ]
	    if {[file exists [file join $dir title.txt ]]} {
		set fd [open [file join $dir title.txt] r]
		set title [read -nonewline $fd]
		close $fd
		set success 1
		break
	    }
	}

	if { $success == 0 } {
	    puts "Could not find tclscripts/rtwizard/examples/$type/title.txt\ninautopath:\n $::auto_path"
	    exit
	}

	#
	# Create an image object to hold the sample image.
	#
	set tmpFile [ file join $dir preview.small.gif ]
	set sampleImage [ image create photo -file $tmpFile ]

	#
	# Load the text that describes the sample.
	#
	set tmpFile [file join $dir desc.txt]
	set fd [open $tmpFile r]
	set descText [read -nonewline $fd]
	close $fd

	#
	# Load the help string.
	#
	set tmpFile [file join $dir helpstr.txt]
	set fd [open $tmpFile r]
	set helpStr [read -nonewline $fd]
	close $fd

	#
	# Load the introtext.
	#
	set tmpFile [file join $dir intro.txt]
	set fd [open $tmpFile r]
	set introText [read -nonewline $fd]
	close $fd
    }

    #
    # activate - called when this picture type is selected.
    #
    itcl::body PictureTypeBase::activate { } {
	append msg "PictureTypeBase::activate called" \
		" - should be overloaded by derived class."
	error $msg
    }

    #
    # deactivate - called when this picture type is deselected.
    #
    itcl::body PictureTypeBase::deactivate { } {
	append msg "PictureTypeBase::deactivate called" \
		" - should be overloaded by derived class."
	error $msg
    }

    #
    # preview - generates a 1/4 size preview image
    #
    itcl::body PictureTypeBase::preview { } {
	append msg "PictureTypeBase::preview called" \
		" - should be overloaded by derived class."
	error $msg
    }

    #
    # fullSize - generates the full size image
    #
    itcl::body PictureTypeBase::fullSize { } {
	append msg "PictureTypeBase::fullSize called" \
		" - should be overloaded by derived class."
	error $msg
    }

    #-------------------#
    # Protected Methods #
    #-------------------#
    #
    # rtCmd - formats an rt command to generate a picture.
    #         Width, height, and framebuffer are passed in
    #         because they differ for fullSize and preview
    #
    itcl::body PictureTypeBase::rtCmd \
	    {objPage fb width height } {
	#
	# Get the page that contains the view information.
	#
	set viewPage [$::exp getViewPage]

	#
	# Get the view info
	#
	set viewInfo [$viewPage getEyeModel]

	#
	# Get the background color
	#
	set bgHex [$objPage getBackgroundColor]
	set bg [hexToRGB $bgHex]

	#
	# Get the object list, the file is global
	#
	set objects [$objPage getObjects]

	#
	# compute the aspect ratio. Note how floating point
	# math is forced.
	#
	set ar [ expr $width.0 / $height.0 ]

	#
	# Assemble the rt command - note that it is a
	# full-blown script.
	#
	set cmd [list rt -M -R -F $fb -w $width \
		-n $height -V $ar -A 0.9 \
		-C [lindex $bg 0]/[lindex $bg 1]/[lindex $bg 2] \
		$::RtWizard::dbFile]

	foreach obj $objects {
	    lappend cmd $obj
	}

	runRtCmd $cmd $viewInfo
    }

    #
    # rtedgeCmd - formats an rtedge command to generate a picture.
    #
    itcl::body PictureTypeBase::rtedgeCmd \
	    {objPage fb width height \
	    {overlay 0} \
	    {occMode 0} \
	    {occObjsPage {}}} {
	#
	# Get the page that contains the view information.
	#
	set viewPage [$::exp getViewPage]

	#
	# Get the view info
	#
	set viewInfo [$viewPage getEyeModel]

	#
	# Get the edge color color
	#
	set lineHex [$objPage getLineColor]
	set l [hexToRGB $lineHex]

	#
	# Get the non-line color
	#
	set nonLineHex [$objPage getNonLineColor]
	set nl [hexToRGB $nonLineHex]

	#
	# Get the object list, the file is global
	#
	set objects [$objPage getObjects]

	#
	# compute the aspect ratio. Note how floating point
	# math is forced.
	#
	set ar [ expr $width.0 / $height.0 ]

	#
	# Determine if region colors were requested, if so, use them.
	# Otherwise, use the specified foreground colors.
	#
	if {[$objPage getRegionColorFlag] == "true"} {
	    set fgMode [list set rc=1]
	} else {
	    set fgMode [list set fg=[lindex $l 0],[lindex $l 1],[lindex $l 2]]
	}

	#
	# Assemble the rtedge command - note that it is a
	# full-blown script.
	#
	if {$occMode != 0} {
	    #
	    # If required, get occlusion objects
	    #
	    set occObjects [$occObjsPage getObjects]

	    set cmd [list rtedge -M -R -F $fb -w $width \
		    -n $height -V $ar -A 0.9 \
		    -c "$fgMode" \
		    -c "set bg=[lindex $nl 0],[lindex $nl 1],[lindex $nl 2]" \
		    -c "set om=$occMode" \
		    -c "set oo=\"$occObjects\"" \
		    $::RtWizard::dbFile]
	} else {

	    set cmd [list rtedge -M -R -F $fb -w $width \
		    -n $height -V $ar -A 0.9 \
		    -c "$fgMode" \
		    -c "set bg=[lindex $nl 0],[lindex $nl 1],[lindex $nl 2]" \
		    -c "set ov=$overlay" \
		    $::RtWizard::dbFile]
	}

	#
	# Add the objects
	#
	foreach obj $objects {
	    lappend cmd $obj
	}

	runRtCmd $cmd $viewInfo

    }


    #
    # hexToRGB - converts an RGB color in hex #rrggbb format to
    #            decimal {rrr ggg bbb} format
    #
    itcl::body PictureTypeBase::hexToRGB {hexRGB} {

	scan [string range $hexRGB 1 2] "%x" redDec
	scan [string range $hexRGB 3 4] "%x" greenDec
	scan [string range $hexRGB 5 6] "%x" blueDec

	return [list $redDec $greenDec $blueDec]
    }

    #
    # runRtCmd - common method for event-handling the rt commands
    #
    itcl::body PictureTypeBase::runRtCmd {cmd {viewInfo {}}} {
	set ::waiting ""
	#
	# open the pipe
	#
	set pipe [open "| $cmd" r+]

	#
	# puts the matrix info to the pipe
	#
	if {[string length $viewInfo] != 0} {
	    puts $pipe "$viewInfo"
	    puts $pipe "start 0; clean; end;\n\n"
	    flush $pipe
	}

	#
	# Set up a callback for readable events, and wait!
	#
# 	fileevent $pipe readable [ list testRead $pipe ]
#	fileevent $pipe writable [ list testWrite $pipe ]
#	vwait ::waiting
	fconfigure $pipe -blocking true

	catch "close $pipe" catchResult
	puts $catchResult
    }

    #
    # TestRead - pipe fileevent callback
    #
    itcl::body PictureTypeBase::testRead {pipe} {

	set waiting "Done"
    }
}; # end namespace

#
# TestRead - pipe fileevent callback
#
proc testRead {pipe} {
	set ::waiting "Done"
}

#
# TestWrite - pipe fileevent callback
#
proc testWrite {pipe} {
    if [eof $pipe] {
	set ::waiting "Done"
    }
}


# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a435 36




































@


14.9
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
@


14.8
log
@legal header changed from Library to Lesser to reflect current 'official' name of the license
@
text
@d4 1
a4 1
# Copyright (c) 2004-2006 United States Government as represented by
@


14.7
log
@update copyright to 2006
@
text
@d15 1
a15 1
# Library General Public License for more details.
a22 2
# PictureTypeBase.itcl
#
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
# Copyright (C) 2004-2005 United States Government as represented by
@


14.5
log
@update copyright to 2005
@
text
@d37 1
a37 1
  
d58 1
a58 1
	    method activate {}	    
d81 1
a81 1
	    # These methods generate pictures. They query the 
d85 1
a85 1
	    method fullSize {} 
d104 2
a105 2
	
	private { 
d108 1
a108 1
	    
d115 1
a115 1
    #--------------------#    
d132 1
a132 1
	# The support directory name is the same as the 
d167 1
a167 1
	#	
d174 1
a174 1
	# Load the help string. 
d182 1
a182 1
	# Load the introtext. 
d230 1
a230 1
    # rtCmd - formats an rt command to generate a picture. 
d245 1
a245 1
	
d264 1
a264 1
	# Assemble the rt command - note that it is a 
d280 1
a280 1
    # rtedgeCmd - formats an rtedge command to generate a picture. 
d331 1
a331 1
	# Assemble the rtedge command - note that it is a 
d337 1
a337 1
	    #	    
d355 1
a355 1
	}	
d370 1
a370 1
    # hexToRGB - converts an RGB color in hex #rrggbb format to 
d378 1
a378 1
	
d417 1
a417 1
	
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d37 1
a37 1

d58 1
a58 1
	    method activate {}
d81 1
a81 1
	    # These methods generate pictures. They query the
d85 1
a85 1
	    method fullSize {}
d104 2
a105 2

	private {
d108 1
a108 1

d115 1
a115 1
    #--------------------#
d132 1
a132 1
	# The support directory name is the same as the
d167 1
a167 1
	#
d174 1
a174 1
	# Load the help string.
d182 1
a182 1
	# Load the introtext.
d230 1
a230 1
    # rtCmd - formats an rt command to generate a picture.
d245 1
a245 1

d264 1
a264 1
	# Assemble the rt command - note that it is a
d280 1
a280 1
    # rtedgeCmd - formats an rtedge command to generate a picture.
d331 1
a331 1
	# Assemble the rtedge command - note that it is a
d337 1
a337 1
	    #
d355 1
a355 1
	}
d370 1
a370 1
    # hexToRGB - converts an RGB color in hex #rrggbb format to
d378 1
a378 1

d417 1
a417 1

@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
# Copyright (c) 2004 United States Government as represented by the
# U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
@


1.2
log
@Changes to eliminate BRLCAD_ROOT
@
text
@d453 9
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@a113 7
	if { [info exists ::env(BRLCAD_ROOT)] } {
	    set rootDir $::env(BRLCAD_ROOT)
	} else {
	    set rootDir [file join / usr brlcad ]
	} 
	set dir [ file join $rootDir tclscripts rtwizard examples \
		$type ]
d118 19
a136 4
	set tmpFile [file join $dir title.txt]
	set fd [open $tmpFile r]
	set title [read -nonewline $fd]
	close $fd
@

