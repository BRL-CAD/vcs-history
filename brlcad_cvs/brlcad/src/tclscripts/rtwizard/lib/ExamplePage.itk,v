head	14.11;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.11
date	2007.01.27.01.41.52;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.51;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.04;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.31.02.05.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.31.30;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2004.12.21.06.18.54;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.29;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.49.31;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.24;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@#                 E X A M P L E P A G E . I T K
# BRL-CAD
#
# Copyright (c) 2004-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
#
# This page provides the user with a set of examples from which they
# can choose the type of picture they would like to make.
#

namespace eval RtWizard {

    package provide ExamplePage 1.0

    #
    # Add options
    #
    option add *ExamplePage.borderWidth 2 widgetDefault
    option add *ExamplePage.labelPos wn widgetDefault
    option add *ExamplePage.listHeight 150 widgetDefault
    option add *ExamplePage.hscrollMode dynamic widgetDefault
    option add *ExamplePage.vscrollMode dynamic widgetDefault
    option add *ExamplePage.textBackground seashell

    #
    # Define the usual options
    #
    ::itk::usual ExamplePage {
	keep -activebackground \
		-activerelief \
		-background \
		-borderwidth \
		-cursor \
		-elementborderwidth \
		-foreground \
		-highlightcolor \
		-highlightthickness \
		-insertbackground \
		-insertborderwidth \
		-insertofftime \
		-insertontime \
		-insertwidth \
		-jump \
		-labelfont \
		-selectbackground \
		-selectborderwidth \
		-textbackground \
		-textfont \
		-troughcolor
    }

    #
    # ExamplePage
    #
    # The example page class provides a series of pictures that
    # show examples of the type of pictures that can be made with
    # the wizard.
    #
    ::itcl::class ExamplePage {
	inherit ::iwidgets::Labeledwidget

	#
	# Configuration variables
	#

	# None!

	#
	# Public interface
	#
	public {
	    constructor {args} {}

	    method onSelect {}
	    method onDeselect {}
	    method getStepInfo {}

	    method addType {type token args}
	    method setType {}
	    method changePicType {}
	    method getImageType {} {return $imageType}

	    # XXX something to get script info
	    method getCurrentTypeObj {} {return $currentTypeObj}
	    method getViewPage {} {return $viewPage}
	    method setViewPage {page} {
		set viewPage $page
	    }
	}

	private {
	    method updatePreview {}
	    method onOK {}
	    method onCancel {}
	    method insertHelpText {}

	    variable typeObjects

	    variable imageType
	    variable currentTypeObj ""

	    variable previewImages
	    variable descText
	    variable keyMap

	    common viewPage
	}
    }

    #--------------------#
    #   Public Methods   #
    #--------------------#
    #
    # constructor - builds the Example Page
    #
    itcl::body ExamplePage::constructor {args} {

	set cs [ $this childsite ]
	$cs configure -relief groove -bd 2

	#
	# Create the help panel
	#
	itk_component add helpPanel {
	    ::iwidgets::scrolledtext $cs.helpPanel \
		    -hscrollmode none \
		    -vscrollmode none \
		    -visibleitems 80x8 \
		    -wrap word \
		    -relief flat \
		    -textfont $::RtWizard::helpFont
	} {
	    usual
	    ignore -textbackground
	}

	#
	# Create a frame for the center of the panel. On the left
	# will be the hierachy window, on the right will be the
	# mged window over its controls
	#
	itk_component add midFrame {
	    frame $cs.midFrame \
		    -relief flat
	} {
	    usual
	}

	#
	# Build the middle, the left side contains an option menu over
	# descriptive text, the right is an a sample image
	#
	itk_component add leftFrame {
	    frame $itk_component(midFrame).lf \
		    -relief flat
	} {
	    usual
	}

	itk_component add picTypes {
	    iwidgets::optionmenu $itk_component(leftFrame).pt \
		    -labeltext "Select an Image Type" \
		    -labelpos nw \
		    -command "[::itcl::code $this updatePreview]"
	} {
	    usual
	}

	#
	# Add text description
	#
	itk_component add descBox {
	    iwidgets::scrolledtext $itk_component(leftFrame).descBox \
		    -visibleitems 40x12 \
		    -hscrollmode dynamic \
		    -vscrollmode dynamic \
		    -wrap word \
		    -textbackground seashell
	} {
	    usual
	}

	#
	# Pack the optionmenu and the descriptive text within
	# the left frame
	#
	pack $itk_component(picTypes) \
		-side top \
		-anchor w \
		-pady 5 \
		-fill x \
		-expand y
	pack $itk_component(descBox) \
		-fill both \
		-expand y \
		-pady 5

	#
	# On the right side, put the preview image
	#
	itk_component add previewImg  {
	label $itk_component(midFrame).pimg \
		-relief sunken
	} {
	    usual
	}

	#
	# Create a button box for the OK button
	#
	itk_component add bbox {
	    ::iwidgets::buttonbox $cs.#auto
	} {
	    usual
	}

	$itk_component(bbox) add OK \
		-text "OK" \
		-command "[::itcl::code $this onOK]"

	$itk_component(bbox) add cancel \
		-text "Cancel" \
		-command "[::itcl::code $this onCancel]"

	$itk_component(bbox) default cancel

	#
	# Now pack the left frame and the preview image.
	#
	pack $itk_component(leftFrame) \
		-side left \
		-anchor n \
		-padx 5 \
		-fill y \
		-expand y

	pack $itk_component(previewImg) \
		-anchor center \
		-padx 5 \
		-pady 5

	#
	# Pack the top
	#
	pack $itk_component(helpPanel)
	pack $itk_component(midFrame)
	pack $itk_component(bbox) -side right

	#
	# Configure the labeled widget
	#
	$this configure -labeltext "Select Image Type"
	$this configure -labelpos nw

	#
	# Insert help text
	#
	insertHelpText

	#
	# Evaluate any user supplied args.
	#
	eval configure $args

    }

    #
    # onSelect
    #
    # Makes any necessary changes to the Wizard configuration
    # when this page is selected.
    #
    itcl::body ExamplePage::onSelect {} {
	#
	# Nothing yet!
	#
    }

    #
    # onDeselect
    #
    # Cleans up when the page is deselected
    #
    itcl::body ExamplePage::onDeselect {} {
	#
	# Nothing yet!
	#
    }

    #
    # getStepInfo
    #
    # In principal, returns a name for the step, and a variable that
    # can be queried for state. The database page is not a 'step', so
    # it returns "No Step"
    #
    itcl::body ExamplePage::getStepInfo {} {
	set a "No Step"
	set b "banana"
	return [list $a $b]
    }

    #
    # addType
    #
    # Adds a picture type to the set of supported pictures.
    #
    itcl::body ExamplePage::addType { type token args } {

	#
	# Create the picture type object. Note that it defines
	# steps and the "preview" and "fullSize" methods. It
	# provides the sample image and the help text.
	#
	set typeObj [ $type #auto $args ]
	set typeObjects($token) $typeObj

	#
	# Set up the arrays that map the option menu.
	# entries to the sample image and the descriptive
	# text.
	#
	# The option menu outputs the "title" string. We
	# get the token via the keyMap. That then lets us
	# access the text and image.
	#
	set title [$typeObj getTitle]
	set keyMap($title) $token
	set previewImages($token)  [$typeObj getSampleImage]
	set descText($token) [$typeObj getDescText]

	#
	# Add this type to the radiobox in the Image
	# menu. If changed, it calls the setType method.
	#
	$::wizardInstance menubar add radiobutton .image.$token \
		-label $title \
		-variable [itcl::scope imageType] \
		-value $title \
		-helpstr [$typeObj getHelpStr] \
		-command "[itcl::code $this changePicType]"

	#
	# Finally, add the new type (title) to the option
	# menu
	#
	$itk_component(picTypes) insert end  [$typeObj getTitle]
	$itk_component(picTypes) select 0
	updatePreview
    }

    #
    # changePicType
    #
    # This method is activated when the radiobuttons are changed.
    #
    itcl::body ExamplePage::changePicType {} {
	#
	# update the optionmenu
	#
	$itk_component(picTypes) select $imageType

	#
	# call setType
	#
	setType
    }

    #
    # setType
    #
    # Sets the current picture type to whatever is specified in the
    # option menu.
    #
    itcl::body ExamplePage::setType {} {

	#
	# deactivate the current type object
	#
	if {[string length $currentTypeObj] != 0} {
	    $currentTypeObj deactivate
	}
	#
	# Get the new type selection
	#
	set title [ $itk_component(picTypes) get ]
	set token $keyMap($title)
	set typeObj $typeObjects($token)
	set imageType $title

	#
	# activate the new type
	#
	$typeObj activate
	set currentTypeObj $typeObj
    }

    #--------------------#
    #  Private Methods   #
    #--------------------#
    #
    # updatePreview -
    #
    # Called whenever the optionmenu is changed, this method updates the
    # sample image and the help text.
    #
    ::itcl::body ExamplePage::updatePreview {} {
	set selection [ $itk_component(picTypes) get ]

	if {[string length $selection] == 0} {
	    return
	}

	#
	# Convert the long string to the key
	#
	set key $keyMap($selection)

	$itk_component(previewImg) configure \
		-image $previewImages($key)
	$itk_component(descBox) configure -state normal
	$itk_component(descBox) delete 1.0 end
	$itk_component(descBox) insert end $descText($key)
	$itk_component(descBox) configure -state disabled

    }

    #
    # onOK - called when the OK button is called
    #
    ::itcl::body ExamplePage::onOK {} {

	#
	# Select the new picture type
	#
	$this setType

	#
	# Activate the introductory page
	#
	$::wizardInstance select intro
    }

    #
    # onCancel - called when the OK button is called
    #
    ::itcl::body ExamplePage::onCancel {} {
	$::wizardInstance selectPrev
    }

    #
    # insertHelpText - puts in the helpful text at the top of the
    #                  page
    #
    ::itcl::body ExamplePage::insertHelpText {} {

	#
	# Short alias
	#
	set hw $itk_component(helpPanel)

	$hw configure -state normal

	$hw insert end \
		"Please select the type of image that you would like to "
	$hw insert end \
		"make. There are currently six types from which to choose. "
	$hw insert end \
		"Each image type requires slightly different information "
	$hw insert end \
		"to configure. "
	$hw insert end \
		"Use the menu button below to view an example of each type "
	$hw insert end \
		"of picture. \n\nWhen you have decided on a type, select it "
	$hw insert end \
		"and hit \"OK\"."

	$hw configure -state disabled
    }
}
#end namespace


# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d491 1
a491 1
 	$hw insert end \
a499 21





















@


14.9
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
@


14.8
log
@legal header changed from Library to Lesser to reflect current 'official' name of the license
@
text
@d4 1
a4 1
# Copyright (c) 2004-2006 United States Government as represented by
@


14.7
log
@update copyright to 2006
@
text
@d15 1
a15 1
# Library General Public License for more details.
a22 2
# ExamplePage.itk
#
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
# Copyright (C) 2004-2005 United States Government as represented by
@


14.5
log
@update copyright to 2005
@
text
@d26 1
a26 1
# can choose the type of picture they would like to make. 
d75 1
a75 1
    # the wizard. 
d83 1
a83 1
	
d115 1
a115 1
	    variable typeObjects 
d119 1
a119 1
	    
d130 1
a130 1
    #--------------------#    
d135 1
a135 1
	
d156 1
a156 1
	# Create a frame for the center of the panel. On the left 
d165 2
a166 2
	}    
	
d168 1
a168 1
	# Build the middle, the left side contains an option menu over 
d186 1
a186 1
	
d202 1
a202 1
	# Pack the optionmenu and the descriptive text within 
d245 3
a247 3
	# 
	# Now pack the left frame and the preview image. 
	# 
d259 1
a259 1
	
d284 1
a284 1
    
d302 1
a302 1
    itcl::body ExamplePage::onDeselect {} {	
d327 1
a327 1
	
d340 1
a340 1
	# 
d362 1
a362 1
	# Finally, add the new type (title) to the option 
d384 1
a384 1
	setType 
d390 1
a390 1
    # Sets the current picture type to whatever is specified in the 
d404 1
a404 1
	set title [ $itk_component(picTypes) get ]	
d408 1
a408 1
	
d418 1
a418 1
    #--------------------#    
d420 1
a420 1
    # updatePreview - 
d436 1
a436 1
	
d442 2
a443 2
	$itk_component(descBox) configure -state disabled    
	
d455 1
a455 1
	
d468 1
a468 1
    
d470 1
a470 1
    # insertHelpText - puts in the helpful text at the top of the 
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d26 1
a26 1
# can choose the type of picture they would like to make.
d75 1
a75 1
    # the wizard.
d83 1
a83 1

d115 1
a115 1
	    variable typeObjects
d119 1
a119 1

d130 1
a130 1
    #--------------------#
d135 1
a135 1

d156 1
a156 1
	# Create a frame for the center of the panel. On the left
d165 2
a166 2
	}

d168 1
a168 1
	# Build the middle, the left side contains an option menu over
d186 1
a186 1

d202 1
a202 1
	# Pack the optionmenu and the descriptive text within
d245 3
a247 3
	#
	# Now pack the left frame and the preview image.
	#
d259 1
a259 1

d284 1
a284 1

d302 1
a302 1
    itcl::body ExamplePage::onDeselect {} {
d327 1
a327 1

d340 1
a340 1
	#
d362 1
a362 1
	# Finally, add the new type (title) to the option
d384 1
a384 1
	setType
d390 1
a390 1
    # Sets the current picture type to whatever is specified in the
d404 1
a404 1
	set title [ $itk_component(picTypes) get ]
d408 1
a408 1

d418 1
a418 1
    #--------------------#
d420 1
a420 1
    # updatePreview -
d436 1
a436 1

d442 2
a443 2
	$itk_component(descBox) configure -state disabled

d455 1
a455 1

d468 1
a468 1

d470 1
a470 1
    # insertHelpText - puts in the helpful text at the top of the
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
# Copyright (c) 2004 United States Government as represented by the
# U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d502 9
@

