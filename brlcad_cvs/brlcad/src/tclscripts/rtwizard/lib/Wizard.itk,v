head	14.11;
access;
symbols
	rel-7-10-4:14.11
	STABLE:14.11.0.2
	rel-7-10-2:14.11
	rel-7-10-0:14.11
	rel-7-8-4:14.8
	rel-7-8-2:14.8
	rel-7-8-0:14.8
	trimnurbs-branch:14.8.0.2
	help:14.8
	temp_tag:14.6
	bobWinPort-20051223-freeze:14.5
	postmerge-20051223-bobWinPort:14.6
	premerge-20051223-bobWinPort:14.6
	rel-7-6-6:14.6
	rel-7-6-4:14.6
	rel-7-6-2:14.5
	rel-7-6-branch:14.5.0.6
	rel-7-6-0:14.5
	rel-7-4-2:14.5
	rel-7-4-branch:14.5.0.4
	bobWinPort:14.5.0.2
	rel-7-4-0:14.5
	rel-7-2-6:14.5
	rel-7-2-4:14.5
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.4
	rel-7-0-2:14.4
	rel-7-0-1:14.4
	opensource-post:14.4
	opensource-pre:1.1
	rel-7-0-branch:1.1.0.2
	rel-7-0:1.1;
locks; strict;
comment	@# @;


14.11
date	2007.01.27.01.41.52;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2007.01.23.01.13.51;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2007.01.20.14.37.04;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2006.01.31.02.05.59;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2006.01.18.06.46.27;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.10.23.04.44.39;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.01.30.20.31.30;	author brlcad;	state Exp;
branches
	14.5.6.1;
next	14.4;

14.4
date	2004.12.21.06.18.54;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.29;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.49.32;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.32;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.26;	author morrison;	state Exp;
branches;
next	;

14.5.6.1
date	2005.11.13.13.46.20;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.11
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@#                      W I Z A R D . I T K
# BRL-CAD
#
# Copyright (c) 2004-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
#
# This is the 'revised' Wizard class. It uses a notebook like the
# original version, but it ditches the Prev/Next/Cancel buttons.
# Rather it incoporates a menubar and help frame. Switching between
# steps is accomplished using a menu with checkboxes. The check-
# boxes indicate whether a particular step has been accomplished.
#
# Individual pages can take addvantage of the fact that the menubar
# is dynamic.
#

package require Itcl
package require Itk
package require Iwidgets

namespace eval RtWizard {

    package provide Wizard 1.0

    #
    # wizard - Provides a lowercased access method for the
    #          Wizard class.
    #
    proc wizard {pathName args} {
	uplevel Wizard $pathName $args
    }

    #
    # Add options
    #
    option add *Wizard.borderWidth 2 widgetDefault
    option add *Wizard.labelPos wn widgetDefault
    option add *Wizard.listHeight 150 widgetDefault
    option add *Wizard.hscrollMode dynamic widgetDefault
    option add *Wizard.vscrollMode dynamic widgetDefault
    option add *Wizard.textBackground seashell

    #
    # Define the usual options
    #
    itk::usual Wizard {
	keep -activebackground \
		-activerelief \
		-background \
		-borderwidth -cursor \
		-elementborderwidth \
		-foreground \
		-highlightcolor \
		-highlightthickness \
		-insertbackground \
		-insertborderwidth \
		-insertofftime \
		-insertontime \
		-insertwidth \
		-jump \
		-labelfont \
		-selectbackground \
		-selectborderwidth \
		-textbackground \
		-textfont \
		-troughcolor
    }

    #
    # Wizard
    #
    # The wizard class provides the framework in which the RtWizard
    # operates. The wizard holds a series of pages (e.g. Color-
    # ObjSelector). Individual picture types (e.g. TypeF) use a subset
    # of the available pages to gather the information the need to
    # create an image.
    #
    # Use the singleton pattern to allow the pages to invoke wizard methods
    #
    set ::wizardInstance ""

    ::itcl::class Wizard {
	inherit ::itk::Widget

	public {
	    #
	    # methods
	    #
	    constructor {args} {}
	    method add {type token args}
	    method delete {token}
	    method enable {token}
	    method disable {toke}

	    method select {token}
	    method selectPrev {}

	    method menubar {args}

	    method setType {token}
	    method addType {type token}
	    method getTypeInfo {token}

	    method getIntroPage {}

	    method openSteps {}
	    method closeSteps {}

	    method fullSize {}
	    method preview {}

	    method updateRenderMenu {}
	}

	private {
	    #
	    # methods
	    #
	    method setupDefaultMenus {}

	    #
	    # variables
	    #
	    variable DEF_WIDTH 600

	    variable currentPageToken
	    variable prevPageToken

	    variable pagePaths ""
	    variable helpVar

	    variable statusVariables ""

	    variable pages
	    variable enabledPages

	    variable imageType

	    variable stepCount 0
	    variable currentStepMenu ""


	}
    }

    #
    # The Wizard class follows the singleton design pattern. If
    # a Wizard has already been created, the constructor throws.
    #
    itcl::body Wizard::constructor {args} {

	global wizardInstance

	if { [string length $wizardInstance] > 0 } {
	    error "Can not instantiate a second wizard object."
	}

	#
	# Create the menubar
	#
	itk_component add menubar {
	    iwidgets::menubar $itk_interior.menubar \
		    -helpvariable [ itcl::scope helpVar ]
	} {
	    usual
	}

	#
	# Configure the File, Image, and Help menus.
	#
	setupDefaultMenus

	#
	# Create the notebook
	#
	itk_component add notebook {
	    iwidgets::notebook $itk_interior.notebook \
		    -width $DEF_WIDTH \
		    -height 500
	} {
	    usual
	}

	#
	# Create the help label at the bottom of the screen
	#
	itk_component add helpThing {
	    label $itk_interior.helpThing \
		    -anchor w \
		    -textvariable [itcl::scope helpVar] \
		    -width 40 \
		    -relief sunken
	} {
	    usual
	}

	#
	# Pack em!
	#
	pack $itk_component(menubar) -fill x
	pack $itk_component(notebook) -fill both -expand 1
	pack $itk_component(helpThing) -fill x

	set wizardInstance $this
    }

    #
    # setupDefaultMenus
    #
    # Adds the initial set of menus to the menubar. These menus should
    # not be changed by the content objects.
    #
    itcl::body Wizard::setupDefaultMenus { } {

	#
	# File menu
	#
	$itk_component(menubar) add menubutton file \
		-text File \
		-menu {
	    options -tearoff false -selectcolor blue
	}

	$itk_component(menubar) add command .file.goNew \
		-label "New" \
		-helpstr "Create a new images." \
		-command {puts "New Selected"}

	$itk_component(menubar) menuconfigure .file.goNew \
		-state disabled

	$itk_component(menubar) add command .file.goOpen \
		-label "Open BRL-CAD Database" \
		-helpstr "Open a BRL-CAD database." \
		-command {puts "Open Selected"}

	$itk_component(menubar) menuconfigure .file.goOpen \
		-state disabled

	$itk_component(menubar) add separator .file.sep

	$itk_component(menubar) add command .file.Quit \
		-label "Quit" -underline 0 \
		-helpstr "Quit the RtWizard." \
		-command {exit}

	#
	# Image Menu
	#
	$itk_component(menubar) add menubutton image \
		-text "Image" \
		-menu {
	    options -tearoff false -selectcolor blue
	}

	$itk_component(menubar) add command .image.SelectType \
		-label "New Image..." \
		-helpstr "View examples of different image types." \
		-command "[itcl::code $this select exp]"

	$itk_component(menubar) add separator .image.sep1

	#
	# Steps menu
	#

	#
	# Render Menu
	#
	$itk_component(menubar) add menubutton render \
		-text "Render" \
		-state disabled \
		-menu {
	    options -tearoff false -selectcolor blue
	}

	$itk_component(menubar) add command .render.preview \
		-label "Preview" \
		-helpstr "Generate a quarter-size preview image" \
		-command "[itcl::code $this preview]"

	$itk_component(menubar) add command .render.render \
		-label "Full-Size" \
		-helpstr "Generate a full-size picture with the current." \
		-command "[itcl::code $this fullSize]"

	#
	# Help menu
	#
	$itk_component(menubar) add menubutton help \
		-text Help \
		-menu {
	    options -tearoff true -selectcolor green
	}

	$itk_component(menubar) add command .help.goHelp \
		-label "Help..." \
		-helpstr "Detailed help" \
		-command "[::itcl::code $this select] help"

	$itk_component(menubar) add command .help.goAbout \
		-label "About..." \
		-helpstr "About the RtWizard" \
		-command {puts "selected: About..."}
    }

    #
    # add
    #
    # Adds a content page to the Wizard. The page should be implemented
    # as an iwidget that inherits from labeledframe. This is primarily
    # for consistancy.
    #
    # The content page must support these puplic methods.
    #
    # 1. onSelect - called when the page is exposed.
    # 2. onDeselect - callback for hide events
    # 3. getStepInfo - gets the name of the step provided, and the
    #                  status variable.
    #
    itcl::body Wizard::add { type token args } {

	#
	# Create the page. First, we need to get the parent from the
	# notebook
	#
	set path [ $itk_component(notebook) add -label $token ]

	#
	# Instantiate the page, pass the arguments.
	#
	set pageName [ eval $type ${path}.#auto $args ]

	#
	# Add to the pages array
	#
	set pages($token) $pageName

	#
	# Pack it!
	#
	pack $pageName \
		-fill both -expand 1
	pack propagate $pageName

	set currentPageToken $token

	return $pageName
    }

    #
    # select
    #
    # Calls the onDeselect method for the current page.
    # Changes the notebook to the requested page.
    # Calls the onShow method for the new page.
    #
    itcl::body Wizard::select { token } {

	# onHide
	eval $pages($currentPageToken) onDeselect
	set prevPageToken $currentPageToken

	# switch pages
	set index [ $itk_component(notebook) index $token ]
	$itk_component(notebook) select $index

	set currentPageToken $token

	# onShow
	eval $pages($currentPageToken) onSelect
    }

    #
    # selectPrev
    #
    # Selects the previous viewed page. All pop-ups should
    # call this from their onOK and onCancel methods
    #
    itcl::body Wizard::selectPrev { } {
	select $prevPageToken
    }

    #
    # menubar
    #
    # Routes menubar configuration commands to the menubar.
    #
    itcl::body Wizard::menubar {args} {
	eval $itk_component(menubar) $args
    }

    #
    # enable
    #
    # Enables a page, loads its step into the steps menu, and
    # adds the page to the list of enabled pages.
    #
    itcl::body Wizard::enable {token} {

	#
	# Get the pageName, this is the object path.
	#
	set pageName $pages($token)

	#
	# Get the Step name and status variable
	#
	set si [ $pageName getStepInfo ]
	set stepName [ lindex $si 0 ]
	set stepVar [ lindex $si 1 ]

	#
	# Add the step to the step menu. If the page does not correspond
	# to a required step, skip.
	#
	if { $stepName != "No Step" } {
	    $itk_component(menubar) insert .$currentStepMenu.sep2 \
		    checkbutton $token \
		    -label $stepName \
		    -variable $stepVar \
		    -command "[itcl::code $this select] $token" \
		    -selectcolor green \
		    -helpstr [concat "Go to the \" " $stepName "\" page"]

	    #
	    # Add status variable to the list
	    #
	    lappend statusVariables $stepVar

	} else {
	#    puts "Page does not require user interaction"
	}

	lappend enabledPages $token

	return $pageName
    }

    #
    # disable
    #
    # Disables a page. The step is removed from the steps menu and
    # the token is removed from the list of enabled pages.
    #
    itcl::body Wizard::disable {token} {

	#
	# Change to the intro page. It won't go away
	#
	select intro

	if { $token == "intro" } {
	    return
	}

	set index [lsearch $enabledPages $token]

	if { $index >= 0 } {
	    #
	    # delete menu entry
	    #
	    $itk_component(menubar) delete .$currentStepMenu.$token

	    #
	    # delete from list of enabled pages.
	    #
	    set enabledPages [ lreplace $enabledPages $index $index ]
	}
    }

    #
    # openSteps - opens the step menu.
    #
    itcl::body Wizard::openSteps {} {
	#
	# Generate a unique name for the steps menu. They cannot
	# be reused even if they are deleted. It seems odd, but its
	# is true.
	#
	set stepMenu ""
	append stepMenu "step" $stepCount

	incr stepCount

	set currentStepMenu $stepMenu
	set statusVariables ""

	$itk_component(menubar) add menubutton $stepMenu \
		-text Steps \
		-menu {
	    options -tearoff true -selectcolor blue
	}

	$itk_component(menubar) add command .$stepMenu.goGreet \
		-label "Greeting" \
		-helpstr "Return to the greeting page." \
		-command "[itcl::code $this select intro]"

	$itk_component(menubar) add separator .$stepMenu.sep1

	$itk_component(menubar) add separator .$stepMenu.sep2

	$itk_component(menubar) add command .$stepMenu.fb \
		-label "Configure Framebuffer" \
		-helpstr "Configure the framebuffer" \
		-command "[itcl::code $this select fbp]"
    }

    #
    # closeSteps - closes the step menu. The step menu should be
    #              active only when there is an active picture
    #              process.
    #
    itcl::body Wizard::closeSteps { } {
	if { [string length $currentStepMenu] > 0 } {
	    $itk_component(menubar) delete $currentStepMenu
	    set currentStepMenu ""
	}
	set statusVariables ""
    }

    #
    # getIntroPage - returns the text widget in the intro page
    #                so that the text may be modified.
    #
    itcl::body Wizard::getIntroPage { } {

    }

    #
    # fullSize - front-end to the type specific method
    #
    itcl::body Wizard::fullSize { } {
	set obj [$::exp getCurrentTypeObj]
	namespace inscope ::RtWizard::ExamplePage $obj fullSize
    }

    #
    # preview - front-end to the type specific method
    #
    itcl::body Wizard::preview { } {
	set obj [$::exp getCurrentTypeObj]
	namespace inscope ::RtWizard::ExamplePage $obj preview
    }

    #
    # updateRenderMenu - activates or deactivates render menu
    #                    based on the status variables
    #
    itcl::body Wizard::updateRenderMenu {} {

	if {[llength $statusVariables] == 0} {
	    return
	}

	set state 1
	foreach var $statusVariables {

	    #
	    # Retrieve the value of the variable whose name is
	    # stored in $var.
	    #
	    upvar #0 $var val

	    if { $state == 1 && $val == 1} {
		set state 1
	    } else {
		set state 0
	    }
	}

	if {$state == 1} {
	    $itk_component(menubar) menuconfigure render \
		    -state normal
	} else {
	    $itk_component(menubar) menuconfigure render \
		    -state disabled
	}
    }

}; # end namespace


# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.10
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@a599 18


















@


14.9
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
@


14.8
log
@legal header changed from Library to Lesser to reflect current 'official' name of the license
@
text
@d4 1
a4 1
# Copyright (c) 2004-2006 United States Government as represented by
@


14.7
log
@update copyright to 2006
@
text
@d15 1
a15 1
# Library General Public License for more details.
a22 2
# Wizard.itk
#
@


14.6
log
@trailing ws
@
text
@d4 1
a4 1
# Copyright (C) 2004-2005 United States Government as represented by
@


14.5
log
@update copyright to 2005
@
text
@d25 1
a25 1
# This is the 'revised' Wizard class. It uses a notebook like the 
d44 1
a44 1
    # wizard - Provides a lowercased access method for the 
d90 1
a90 1
    # The wizard class provides the framework in which the RtWizard 
d92 1
a92 1
    # ObjSelector). Individual picture types (e.g. TypeF) use a subset 
d94 1
a94 1
    # create an image. 
d97 1
a97 1
    # 
d123 1
a123 1
	    
d138 1
a138 1
	    
d165 1
a165 1
    # The Wizard class follows the singleton design pattern. If 
d185 1
a185 1
	
d201 1
a201 1
	
d219 1
a219 1
	pack $itk_component(notebook) -fill both -expand 1 
d221 1
a221 1
	
d224 1
a224 1
    
d228 1
a228 1
    # Adds the initial set of menus to the menubar. These menus should 
d232 1
a232 1
	
d245 1
a245 1
		-command {puts "New Selected"} 
d299 1
a299 1
	
d312 2
a313 2
	}	    
	
d318 1
a318 1
	    
d324 1
a324 1
    
d330 1
a330 1
    # for consistancy. 
d340 1
a340 1
	
d342 1
a342 1
	# Create the page. First, we need to get the parent from the 
d346 1
a346 1
	
d351 1
a351 1
	
d356 1
a356 1
	
d363 2
a364 2
	
	set currentPageToken $token	
d368 1
a368 1
        
d373 1
a373 1
    # Changes the notebook to the requested page. 
d377 1
a377 1
	
d385 1
a385 1
	
d387 1
a387 1
	
d389 1
a389 1
	eval $pages($currentPageToken) onSelect	
d391 1
a391 1
    
d398 1
a398 1
    itcl::body Wizard::selectPrev { } {	
d420 1
a420 1
	# Get the pageName, this is the object path. 
d429 2
a430 2
	set stepVar [ lindex $si 1 ]    
	
d448 1
a448 1
	    
d471 3
a473 3
	if { $token == "intro" } { 
	    return 
	} 
d477 1
a477 1
	if { $index >= 0 } {	
d485 2
a486 2
	    #	    
	    set enabledPages [ lreplace $enabledPages $index $index ]	
d491 1
a491 1
    # openSteps - opens the step menu. 
d501 1
a501 1
	
d516 3
a518 3
		-command "[itcl::code $this select intro]" 
	
	$itk_component(menubar) add separator .$stepMenu.sep1	    
d529 2
a530 2
    # closeSteps - closes the step menu. The step menu should be 
    #              active only when there is an active picture 
d533 1
a533 1
    itcl::body Wizard::closeSteps { } {	
d537 1
a537 1
	}	
d568 1
a568 1
    # 
d570 1
a570 1
	
d572 2
a573 2
	    return 
	}	
d577 1
a577 1
	    
d590 1
a590 1
	
@


14.5.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d25 1
a25 1
# This is the 'revised' Wizard class. It uses a notebook like the
d44 1
a44 1
    # wizard - Provides a lowercased access method for the
d90 1
a90 1
    # The wizard class provides the framework in which the RtWizard
d92 1
a92 1
    # ObjSelector). Individual picture types (e.g. TypeF) use a subset
d94 1
a94 1
    # create an image.
d97 1
a97 1
    #
d123 1
a123 1

d138 1
a138 1

d165 1
a165 1
    # The Wizard class follows the singleton design pattern. If
d185 1
a185 1

d201 1
a201 1

d219 1
a219 1
	pack $itk_component(notebook) -fill both -expand 1
d221 1
a221 1

d224 1
a224 1

d228 1
a228 1
    # Adds the initial set of menus to the menubar. These menus should
d232 1
a232 1

d245 1
a245 1
		-command {puts "New Selected"}
d299 1
a299 1

d312 2
a313 2
	}

d318 1
a318 1

d324 1
a324 1

d330 1
a330 1
    # for consistancy.
d340 1
a340 1

d342 1
a342 1
	# Create the page. First, we need to get the parent from the
d346 1
a346 1

d351 1
a351 1

d356 1
a356 1

d363 2
a364 2

	set currentPageToken $token
d368 1
a368 1

d373 1
a373 1
    # Changes the notebook to the requested page.
d377 1
a377 1

d385 1
a385 1

d387 1
a387 1

d389 1
a389 1
	eval $pages($currentPageToken) onSelect
d391 1
a391 1

d398 1
a398 1
    itcl::body Wizard::selectPrev { } {
d420 1
a420 1
	# Get the pageName, this is the object path.
d429 2
a430 2
	set stepVar [ lindex $si 1 ]

d448 1
a448 1

d471 3
a473 3
	if { $token == "intro" } {
	    return
	}
d477 1
a477 1
	if { $index >= 0 } {
d485 2
a486 2
	    #
	    set enabledPages [ lreplace $enabledPages $index $index ]
d491 1
a491 1
    # openSteps - opens the step menu.
d501 1
a501 1

d516 3
a518 3
		-command "[itcl::code $this select intro]"

	$itk_component(menubar) add separator .$stepMenu.sep1
d529 2
a530 2
    # closeSteps - closes the step menu. The step menu should be
    #              active only when there is an active picture
d533 1
a533 1
    itcl::body Wizard::closeSteps { } {
d537 1
a537 1
	}
d568 1
a568 1
    #
d570 1
a570 1

d572 2
a573 2
	    return
	}
d577 1
a577 1

d590 1
a590 1

@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@d4 2
a5 2
# Copyright (c) 2004 United States Government as represented by the
# U.S. Army Research Laboratory.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d599 9
@

