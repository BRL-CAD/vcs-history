head	14.18;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.9
	rel-7-10-2:14.16
	rel-7-10-0:14.15
	rel-7-8-4:14.13
	rel-7-8-2:14.12
	rel-7-8-0:14.12
	trimnurbs-branch:14.12.0.2
	help:14.12
	temp_tag:14.11
	bobWinPort-20051223-freeze:14.10.2.2
	postmerge-20051223-bobWinPort:14.11
	premerge-20051223-bobWinPort:14.10
	rel-7-6-6:14.10
	rel-7-6-4:14.10
	rel-7-6-2:14.10
	rel-7-6-branch:14.10.0.6
	rel-7-6-0:14.10
	rel-7-4-2:14.10
	rel-7-4-branch:14.10.0.4
	bobWinPort:14.10.0.2
	rel-7-4-0:14.10
	rel-7-2-6:14.9
	rel-7-2-4:14.9
	rel-7-2-2:14.8
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@# @;


14.18
date	2007.12.18.21.06.14;	author bob1961;	state Exp;
branches;
next	14.17;

14.17
date	2007.11.04.16.08.31;	author bob1961;	state Exp;
branches;
next	14.16;

14.16
date	2007.04.11.18.33.18;	author bob1961;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.50;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.37.02;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.07.26.15.55.13;	author bob1961;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.18.06.46.25;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.12.23.21.26.48;	author bob1961;	state Exp;
branches;
next	14.10;

14.10
date	2005.06.24.23.34.13;	author brlcad;	state Exp;
branches
	14.10.2.1;
next	14.9;

14.9
date	2005.04.15.18.03.01;	author bob1961;	state Exp;
branches;
next	14.8;

14.8
date	2005.03.24.18.37.42;	author bob1961;	state Exp;
branches;
next	14.7;

14.7
date	2005.01.30.20.31.13;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.44;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.34;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.48;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.27;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.43.00;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.03.20.42.30;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.00;	author morrison;	state Exp;
branches;
next	;

14.10.2.1
date	2005.09.08.16.18.33;	author bob1961;	state Exp;
branches;
next	14.10.2.2;

14.10.2.2
date	2005.12.05.22.59.23;	author bob1961;	state Exp;
branches;
next	;


desc
@@


14.18
log
@Added ae2dir.
@
text
@#                 Q U A D D I S P L A Y . T C L
# BRL-CAD
#
# Copyright (c) 1998-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
#
#
# Description -
#	The QuadDisplay class is comprised of four Display objects. This class
#       keeps track of the current Display object and provides the means to toggle
#       between showing all four Display objects or just the current one.
#

option add *Pane*margin 0 widgetDefault
option add *QuadDisplay.width 400 widgetDefault
option add *QuadDisplay.height 400 widgetDefault

::itcl::class QuadDisplay {
    inherit iwidgets::Panedwindow

    itk_option define -pane pane Pane ur
    itk_option define -multi_pane multi_pane Multi_pane 0
    itk_option define -paneCallback paneCallback PaneCallback ""

    constructor {args} {}
    destructor {}

    public method getDrawLabelsHook {args}
    public method setDrawLabelsHook {args}
    public method setDrawLabelsHookAll {args}

    public method pane {args}
    public method multi_pane {args}
    public method refresh {}
    public method refreshAll {}

    # methods for controlling the view object
    public method ae {args}
    public method ae2dir {args}
    public method arot {args}
    public method base2local {}
    public method center {args}
    public method coord {args}
    public method viewDir {args}
    public method eye {args}
    public method eye_pos {args}
    public method invSize {args}
    public method keypoint {args}
    public method local2base {}
    public method lookat {args}
    public method m2vPoint {args}
    public method model2view {args}
    public method mrot {args}
    public method mrotPoint {args}
    public method orientation {args}
    public method pmat {args}
    public method pmodel2view {args}
    public method pov {args}
    public method rmat {args}
    public method rot {args}
    public method rotate_about {args}
    public method sca {args}
    public method setview {args}
    public method size {args}
    public method slew {args}
    public method tra {args}
    public method units {args}
    public method v2mPoint {args}
    public method view2model {args}
    public method vrot {args}
    public method vtra {args}
    public method zoom {args}

    public method autoview {{gindex 0}}
    public method autoviewAll {{gindex 0}}

    public method add {glist}
    public method addAll {glist}
    public method remove {glist}
    public method removeAll {glist}
    public method contents {}

    public method bg {args}
    public method bgAll {args}
    public method bounds {args}
    public method boundsAll {args}
    public method depthMask {args}
    public method light {args}
    public method linestyle {args}
    public method linewidth {args}
    public method listen {args}
    public method perspective {args}
    public method perspective_angle {args}
    public method sync {}
    public method png {args}
    public method mouse_nirt {x y}
    public method nirt {args}
    public method vnirt {vx vy}
    public method qray {args}
    public method rt {args}
    public method rtabort {{gi 0}}
    public method rtarea {args}
    public method rtcheck {args}
    public method rtedge {args}
    public method rtweight {args}
    public method transparency {args}
    public method zbuffer {args}
    public method zclip {args}

    if {$tcl_platform(os) != "Windows NT"} {
    }
    public method fb_active {args}
    public method fb_observe {args}

    public method toggle_centerDotEnable {args}
    public method toggle_centerDotEnableAll {}
    public method toggle_viewAxesEnable {args}
    public method toggle_viewAxesEnableAll {}
    public method toggle_modelAxesEnable {args}
    public method toggle_modelAxesEnableAll {}
    public method toggle_modelAxesTickEnable {args}
    public method toggle_modelAxesTickEnableAll {}
    public method toggle_scaleEnable {args}
    public method toggle_scaleEnableAll {}

    public method resetAll {}
    public method default_views {}
    public method attach_view {}
    public method attach_viewAll {}
    public method attach_drawable {dg}
    public method attach_drawableAll {dg}
    public method detach_view {}
    public method detach_viewAll {}
    public method detach_drawable {dg}
    public method detach_drawableAll {dg}

    public method lightAll {args}
    public method transparencyAll {args}
    public method zbufferAll {args}
    public method zclipAll {args}

    public method setCenterDotEnable {args}
    public method setViewAxesEnable {args}
    public method setModelAxesEnable {args}
    public method setModelAxesTickEnable {args}
    public method setViewAxesPosition {args}
    public method setModelAxesPosition {args}
    public method setModelAxesTickInterval {args}
    public method setModelAxesTicksPerMajor {args}
    public method setScaleEnable {args}

    public method idle_mode {}
    public method rotate_mode {x y}
    public method translate_mode {x y}
    public method scale_mode {x y}
    public method orotate_mode {x y func obj kx ky kz}
    public method oscale_mode {x y func obj kx ky kz}
    public method otranslate_mode {x y func obj}
    public method screen2model {x y}
    public method screen2view {x y}

    public method resetBindings {}
    public method resetBindingsAll {}

    public method ? {}
    public method apropos {key}
    public method getUserCmds {}
    public method help {args}

    protected method toggle_multi_pane {}

    private variable priv_pane ur
    private variable priv_multi_pane 1
}

::itcl::body QuadDisplay::constructor {args} {
    iwidgets::Panedwindow::add upper
    iwidgets::Panedwindow::add lower

    # create two more panedwindows
    itk_component add upw {
	::iwidgets::Panedwindow [childsite upper].pw -orient vertical
    } {
	usual
	keep -sashwidth -sashheight
	keep -sashborderwidth -sashindent
	keep -thickness -showhandle
	rename -sashcursor -hsashcursor hsashcursor HSashCursor
    }

    itk_component add lpw {
	::iwidgets::Panedwindow [childsite lower].pw -orient vertical
    } {
	usual
	keep -sashwidth -sashheight
	keep -sashborderwidth -sashindent
	keep -thickness -showhandle
	rename -sashcursor -hsashcursor hsashcursor HSashCursor
    }

    $itk_component(upw) add ulp
    $itk_component(upw) add urp
    $itk_component(lpw) add llp
    $itk_component(lpw) add lrp

    # create four instances of Display
    itk_component add ul {
	Display [$itk_component(upw) childsite ulp].display
    } {
	usual
    }

    itk_component add ur {
	Display [$itk_component(upw) childsite urp].display
    } {
	usual
    }

    itk_component add ll {
	Display [$itk_component(lpw) childsite llp].display
    } {
	usual
    }

    itk_component add lr {
	Display [$itk_component(lpw) childsite lrp].display
    } {
	usual
    }

    # initialize the views
    default_views

    pack $itk_component(ul) -fill both -expand yes
    pack $itk_component(ur) -fill both -expand yes
    pack $itk_component(ll) -fill both -expand yes
    pack $itk_component(lr) -fill both -expand yes

    pack $itk_component(upw) -fill both -expand yes
    pack $itk_component(lpw) -fill both -expand yes

    catch {eval itk_initialize $args}
}

::itcl::configbody QuadDisplay::pane {
    pane $itk_option(-pane)
}

::itcl::configbody QuadDisplay::multi_pane {
    multi_pane $itk_option(-multi_pane)
}

::itcl::body QuadDisplay::getDrawLabelsHook {args} {
    eval $itk_component($itk_option(-pane)) getDrawLabelsHook $args
}

::itcl::body QuadDisplay::setDrawLabelsHook {args} {
    eval $itk_component($itk_option(-pane)) setDrawLabelsHook $args
}

::itcl::body QuadDisplay::setDrawLabelsHookAll {args} {
    eval $itk_component(ul) setDrawLabelsHook $args
    eval $itk_component(ur) setDrawLabelsHook $args
    eval $itk_component(ll) setDrawLabelsHook $args
    eval $itk_component(lr) setDrawLabelsHook $args
}

::itcl::body QuadDisplay::pane {args} {
    # get the active pane
    if {$args == ""} {
	return $itk_option(-pane)
    }

    # set the active pane
    switch $args {
	ul -
	ur -
	ll -
	lr {
	    set itk_option(-pane) $args
	}
	default {
	    return -code error "pane: bad value - $args"
	}
    }

    if {!$itk_option(-multi_pane)} {
	# nothing to do
	if {$priv_pane == $itk_option(-pane)} {
	    return
	}

	switch $priv_pane {
	    ul {
		switch $itk_option(-pane) {
		    ur {
			$itk_component(upw) hide ulp
			$itk_component(upw) show urp
		    }
		    ll {
			iwidgets::Panedwindow::hide upper
			$itk_component(upw) show urp
			iwidgets::Panedwindow::show lower
			$itk_component(lpw) show llp
			$itk_component(lpw) hide lrp
		    }
		    lr {
			iwidgets::Panedwindow::hide upper
			$itk_component(upw) show urp
			iwidgets::Panedwindow::show lower
			$itk_component(lpw) hide llp
			$itk_component(lpw) show lrp
		    }
		}
	    }
	    ur {
		switch $itk_option(-pane) {
		    ul {
			$itk_component(upw) hide urp
			$itk_component(upw) show ulp
		    }
		    ll {
			iwidgets::Panedwindow::hide upper
			$itk_component(upw) show ulp
			iwidgets::Panedwindow::show lower
			$itk_component(lpw) show llp
			$itk_component(lpw) hide lrp
		    }
		    lr {
			iwidgets::Panedwindow::hide upper
			$itk_component(upw) show ulp
			iwidgets::Panedwindow::show lower
			$itk_component(lpw) hide llp
			$itk_component(lpw) show lrp
		    }
		}
	    }
	    ll {
		switch $itk_option(-pane) {
		    ul {
			iwidgets::Panedwindow::hide lower
			$itk_component(lpw) show lrp
			iwidgets::Panedwindow::show upper
			$itk_component(upw) hide urp
			$itk_component(upw) show ulp
		    }
		    ur {
			iwidgets::Panedwindow::hide lower
			$itk_component(lpw) show lrp
			iwidgets::Panedwindow::show upper
			$itk_component(upw) hide ulp
			$itk_component(upw) show urp
		    }
		    lr {
			$itk_component(lpw) hide llp
			$itk_component(lpw) show lrp
		    }
		}
	    }
	    lr {
		switch $itk_option(-pane) {
		    ul {
			iwidgets::Panedwindow::hide lower
			$itk_component(lpw) show llp
			iwidgets::Panedwindow::show upper
			$itk_component(upw) hide urp
			$itk_component(upw) show ulp
		    }
		    ur {
			iwidgets::Panedwindow::hide lower
			$itk_component(lpw) show llp
			iwidgets::Panedwindow::show upper
			$itk_component(upw) hide ulp
			$itk_component(upw) show urp
		    }
		    ll {
			$itk_component(lpw) hide lrp
			$itk_component(lpw) show llp
		    }
		}
	    }
	}
    }

    set priv_pane $itk_option(-pane)

    if {$itk_option(-paneCallback) != ""} {
	catch {eval $itk_option(-paneCallback) $args}
    }
}

::itcl::body QuadDisplay::multi_pane {args} {
    # get multi_pane
    if {$args == ""} {
	return $itk_option(-multi_pane)
    }

    # nothing to do
    if {$args == $priv_multi_pane} {
	return
    }

    switch $args {
	0 -
	1 {
	    toggle_multi_pane
	}
	default {
	    return -code error "mult_pane: bad value - $args"
	}
    }
}

::itcl::body QuadDisplay::refresh {} {
    $itk_component($itk_option(-pane)) refresh
}

::itcl::body QuadDisplay::refreshAll {} {
    $itk_component(ul) refresh
    $itk_component(ur) refresh
    $itk_component(ll) refresh
    $itk_component(lr) refresh
}

::itcl::body QuadDisplay::ae {args} {
    eval $itk_component($itk_option(-pane)) ae $args
}

::itcl::body QuadDisplay::ae2dir {args} {
    eval $itk_component($itk_option(-pane)) ae2dir $args
}

::itcl::body QuadDisplay::arot {args} {
    eval $itk_component($itk_option(-pane)) arot $args
}

::itcl::body QuadDisplay::base2local {} {
    $itk_component($itk_option(-pane)) base2local
}

::itcl::body QuadDisplay::center {args} {
    eval $itk_component($itk_option(-pane)) center $args
}

::itcl::body QuadDisplay::coord {args} {
    eval $itk_component($itk_option(-pane)) coord $args
}

::itcl::body QuadDisplay::viewDir {args} {
    eval $itk_component($itk_option(-pane)) viewDir $args
}

::itcl::body QuadDisplay::eye {args} {
    eval $itk_component($itk_option(-pane)) eye $args
}

::itcl::body QuadDisplay::eye_pos {args} {
    eval $itk_component($itk_option(-pane)) eye_pos $args
}

::itcl::body QuadDisplay::invSize {args} {
    eval $itk_component($itk_option(-pane)) invSize $args
}

::itcl::body QuadDisplay::keypoint {args} {
    eval $itk_component($itk_option(-pane)) keypoint $args
}

::itcl::body QuadDisplay::local2base {} {
    $itk_component($itk_option(-pane)) local2base
}

::itcl::body QuadDisplay::lookat {args} {
    eval $itk_component($itk_option(-pane)) lookat $args
}

::itcl::body QuadDisplay::m2vPoint {args} {
    eval $itk_component($itk_option(-pane)) m2vPoint $args
}

::itcl::body QuadDisplay::model2view {args} {
    eval $itk_component($itk_option(-pane)) model2view $args
}

::itcl::body QuadDisplay::mrot {args} {
    eval $itk_component($itk_option(-pane)) mrot $args
}

::itcl::body QuadDisplay::mrotPoint {args} {
    eval $itk_component($itk_option(-pane)) mrotPoint $args
}

::itcl::body QuadDisplay::orientation {args} {
    eval $itk_component($itk_option(-pane)) orientation $args
}

::itcl::body QuadDisplay::pmat {args} {
    eval $itk_component($itk_option(-pane)) pmat $args
}

::itcl::body QuadDisplay::pmodel2view {args} {
    eval $itk_component($itk_option(-pane)) pmodel2view $args
}

::itcl::body QuadDisplay::pov {args} {
    eval $itk_component($itk_option(-pane)) pov $args
}

::itcl::body QuadDisplay::rmat {args} {
    eval $itk_component($itk_option(-pane)) rmat $args
}

::itcl::body QuadDisplay::rot {args} {
    eval $itk_component($itk_option(-pane)) rot $args
}

::itcl::body QuadDisplay::rotate_about {args} {
    eval $itk_component($itk_option(-pane)) rotate_about $args
}

::itcl::body QuadDisplay::slew {args} {
    eval $itk_component($itk_option(-pane)) slew $args
}

::itcl::body QuadDisplay::sca {args} {
    eval $itk_component($itk_option(-pane)) sca $args
}

::itcl::body QuadDisplay::setview {args} {
    eval $itk_component($itk_option(-pane)) setview $args
}

::itcl::body QuadDisplay::size {args} {
    eval $itk_component($itk_option(-pane)) size $args
}

::itcl::body QuadDisplay::tra {args} {
    eval $itk_component($itk_option(-pane)) tra $args
}

::itcl::body QuadDisplay::units {args} {
    if {$args == ""} {
	return [$itk_component(ul) units]
    }

    eval $itk_component(ul) units $args
    eval $itk_component(ur) units $args
    eval $itk_component(ll) units $args
    eval $itk_component(lr) units $args
}

::itcl::body QuadDisplay::v2mPoint {args} {
    eval $itk_component($itk_option(-pane)) v2mPoint $args
}

::itcl::body QuadDisplay::view2model {args} {
    eval $itk_component($itk_option(-pane)) view2model $args
}

::itcl::body QuadDisplay::vrot {args} {
    eval $itk_component($itk_option(-pane)) vrot $args
}

::itcl::body QuadDisplay::vtra {args} {
    eval $itk_component($itk_option(-pane)) vtra $args
}

::itcl::body QuadDisplay::zoom {args} {
    eval $itk_component($itk_option(-pane)) zoom $args
}

::itcl::body QuadDisplay::autoview {{gindex 0}} {
    $itk_component($itk_option(-pane)) autoview $gindex
}

::itcl::body QuadDisplay::autoviewAll {{gindex 0}} {
    $itk_component(ul) autoview $gindex
    $itk_component(ur) autoview $gindex
    $itk_component(ll) autoview $gindex
    $itk_component(lr) autoview $gindex
}

::itcl::body QuadDisplay::add {glist} {
    $itk_component($itk_option(-pane)) add $glist
}

::itcl::body QuadDisplay::addAll {glist} {
    $itk_component(ul) add $glist
    $itk_component(ur) add $glist
    $itk_component(ll) add $glist
    $itk_component(lr) add $glist
}

::itcl::body QuadDisplay::remove {glist} {
    $itk_component($itk_option(-pane)) remove $glist
}

::itcl::body QuadDisplay::removeAll {glist} {
    $itk_component(ul) remove $glist
    $itk_component(ur) remove $glist
    $itk_component(ll) remove $glist
    $itk_component(lr) remove $glist
}

::itcl::body QuadDisplay::contents {} {
    $itk_component($itk_option(-pane)) contents
}

::itcl::body QuadDisplay::listen {args} {
    eval $itk_component($itk_option(-pane)) listen $args
}

::itcl::body QuadDisplay::linewidth {args} {
    set result [eval $itk_component($itk_option(-pane)) linewidth $args]
    if {$args != ""} {
	refresh
	return
    }
    return $result
}

::itcl::body QuadDisplay::linestyle {args} {
    eval $itk_component($itk_option(-pane)) linestyle $args
}

::itcl::body QuadDisplay::zclip {args} {
    eval $itk_component($itk_option(-pane)) zclip $args
}

::itcl::body QuadDisplay::toggle_modelAxesEnable {args} {
    switch -- $args {
	ul -
	ur -
	ll -
	lr {
	    eval $itk_component($args) toggle_modelAxesEnable
	}
	default {
	    eval $itk_component($itk_option(-pane)) toggle_modelAxesEnable
	}
    }
}

::itcl::body QuadDisplay::toggle_modelAxesEnableAll {} {
    eval $itk_component(ul) toggle_modelAxesEnable
    eval $itk_component(ur) toggle_modelAxesEnable
    eval $itk_component(ll) toggle_modelAxesEnable
    eval $itk_component(lr) toggle_modelAxesEnable
}

::itcl::body QuadDisplay::toggle_modelAxesTickEnable {args} {
    switch -- $args {
	ul -
	ur -
	ll -
	lr {
	    eval $itk_component($args) toggle_modelAxesTickEnable
	}
	default {
	    eval $itk_component($itk_option(-pane)) toggle_modelAxesTickEnable
	}
    }
}

::itcl::body QuadDisplay::toggle_modelAxesTickEnableAll {} {
    eval $itk_component(ul) toggle_modelAxesTickEnable
    eval $itk_component(ur) toggle_modelAxesTickEnable
    eval $itk_component(ll) toggle_modelAxesTickEnable
    eval $itk_component(lr) toggle_modelAxesTickEnable
}

::itcl::body QuadDisplay::toggle_viewAxesEnable {args} {
    switch -- $args {
	ul -
	ur -
	ll -
	lr {
	    eval $itk_component($args) toggle_viewAxesEnable
	}
	default {
	    eval $itk_component($itk_option(-pane)) toggle_viewAxesEnable
	}
    }
}

::itcl::body QuadDisplay::toggle_viewAxesEnableAll {} {
    eval $itk_component(ul) toggle_viewAxesEnable
    eval $itk_component(ur) toggle_viewAxesEnable
    eval $itk_component(ll) toggle_viewAxesEnable
    eval $itk_component(lr) toggle_viewAxesEnable
}

::itcl::body QuadDisplay::toggle_centerDotEnable {args} {
    switch -- $args {
	ul -
	ur -
	ll -
	lr {
	    eval $itk_component($args) toggle_centerDotEnable
	}
	default {
	    eval $itk_component($itk_option(-pane)) toggle_centerDotEnable
	}
    }
}

::itcl::body QuadDisplay::toggle_centerDotEnableAll {} {
    eval $itk_component(ul) toggle_centerDotEnable
    eval $itk_component(ur) toggle_centerDotEnable
    eval $itk_component(ll) toggle_centerDotEnable
    eval $itk_component(lr) toggle_centerDotEnable
}

::itcl::body QuadDisplay::toggle_scaleEnable {args} {
    switch -- $args {
	ul -
	ur -
	ll -
	lr {
	    eval $itk_component($args) toggle_scaleEnable
	}
	default {
	    eval $itk_component($itk_option(-pane)) toggle_scaleEnable
	}
    }
}

::itcl::body QuadDisplay::toggle_scaleEnableAll {} {
    eval $itk_component(ul) toggle_scaleEnable
    eval $itk_component(ur) toggle_scaleEnable
    eval $itk_component(ll) toggle_scaleEnable
    eval $itk_component(lr) toggle_scaleEnable
}

::itcl::body QuadDisplay::zclipAll {args} {
    eval $itk_component(ul) zclip $args
    eval $itk_component(ur) zclip $args
    eval $itk_component(ll) zclip $args
    eval $itk_component(lr) zclip $args
}

::itcl::body QuadDisplay::setCenterDotEnable {args} {
    set ve [eval $itk_component($itk_option(-pane)) configure -centerDotEnable $args]

    # we must be doing a "get"
    if {$ve != ""} {
	return [lindex $ve 4]
    }
}

::itcl::body QuadDisplay::setScaleEnable {args} {
    set ve [eval $itk_component($itk_option(-pane)) configure -scaleEnable $args]

    # we must be doing a "get"
    if {$ve != ""} {
	return [lindex $ve 4]
    }
}

::itcl::body QuadDisplay::setViewAxesEnable {args} {
    set ve [eval $itk_component($itk_option(-pane)) configure -viewAxesEnable $args]

    # we must be doing a "get"
    if {$ve != ""} {
	return [lindex $ve 4]
    }
}

::itcl::body QuadDisplay::setModelAxesEnable {args} {
    set me [eval $itk_component($itk_option(-pane)) configure -modelAxesEnable $args]

    # we must be doing a "get"
    if {$me != ""} {
	return [lindex $me 4]
    }
}

::itcl::body QuadDisplay::setViewAxesPosition {args} {
    set vap [eval $itk_component($itk_option(-pane)) configure -viewAxesPosition $args]

    # we must be doing a "get"
    if {$vap != ""} {
	return [lindex $vap 4]
    }
}

::itcl::body QuadDisplay::setModelAxesPosition {args} {
    set map [eval $itk_component($itk_option(-pane)) configure -modelAxesPosition $args]

    # we must be doing a "get"
    if {$map != ""} {
	set mm2local [$itk_component($itk_option(-pane)) base2local]
	set map [lindex $map 4]
	set x [lindex $map 0]
	set y [lindex $map 1]
	set z [lindex $map 2]

	return [list [expr {$x * $mm2local}] \
		     [expr {$y * $mm2local}] \
		     [expr {$z * $mm2local}]]
    }
}

::itcl::body QuadDisplay::setModelAxesTickEnable {args} {
    set te [eval $itk_component($itk_option(-pane)) configure -modelAxesTickEnable $args]

    # we must be doing a "get"
    if {$te != ""} {
	return [lindex $te 4]
    }
}

::itcl::body QuadDisplay::setModelAxesTickInterval {args} {
    set ti [eval $itk_component($itk_option(-pane)) configure -modelAxesTickInterval $args]

    # we must be doing a "get"
    if {$ti != ""} {
	set ti [lindex $ti 4]
	return [expr {$ti * [$itk_component($itk_option(-pane)) base2local]}]
    }
}

::itcl::body QuadDisplay::setModelAxesTicksPerMajor {args} {
    set tpm [eval $itk_component($itk_option(-pane)) configure -modelAxesTicksPerMajor $args]

    # we must be doing a "get"
    if {$tpm != ""} {
	return [lindex $tpm 4]
    }
}

::itcl::body QuadDisplay::idle_mode {} {
    eval $itk_component($itk_option(-pane)) idle_mode
}

::itcl::body QuadDisplay::rotate_mode {x y} {
    eval $itk_component($itk_option(-pane)) rotate_mode $x $y
}

::itcl::body QuadDisplay::translate_mode {x y} {
    eval $itk_component($itk_option(-pane)) translate_mode $x $y
}

::itcl::body QuadDisplay::scale_mode {x y} {
    eval $itk_component($itk_option(-pane)) scale_mode $x $y
}

::itcl::body QuadDisplay::orotate_mode {x y func obj kx ky kz} {
    eval $itk_component($itk_option(-pane)) orotate_mode $x $y $func $obj $kx $ky $kz
}

::itcl::body QuadDisplay::oscale_mode {x y func obj kx ky kz} {
    eval $itk_component($itk_option(-pane)) oscale_mode $x $y $func $obj $kx $ky $kz
}

::itcl::body QuadDisplay::otranslate_mode {x y func obj} {
    eval $itk_component($itk_option(-pane)) otranslate_mode $x $y $func $obj
}

::itcl::body QuadDisplay::screen2model {x y} {
    eval $itk_component($itk_option(-pane)) screen2model $x $y
}

::itcl::body QuadDisplay::screen2view {x y} {
    eval $itk_component($itk_option(-pane)) screen2view $x $y
}

::itcl::body QuadDisplay::transparency {args} {
    eval $itk_component($itk_option(-pane)) transparency $args
}

::itcl::body QuadDisplay::transparencyAll {args} {
    eval $itk_component(ul) transparency $args
    eval $itk_component(ur) transparency $args
    eval $itk_component(ll) transparency $args
    eval $itk_component(lr) transparency $args
}

::itcl::body QuadDisplay::zbuffer {args} {
    eval $itk_component($itk_option(-pane)) zbuffer $args
}

::itcl::body QuadDisplay::zbufferAll {args} {
    eval $itk_component(ul) zbuffer $args
    eval $itk_component(ur) zbuffer $args
    eval $itk_component(ll) zbuffer $args
    eval $itk_component(lr) zbuffer $args
}

::itcl::body QuadDisplay::depthMask {args} {
    eval $itk_component($itk_option(-pane)) depthMask $args
}

::itcl::body QuadDisplay::light {args} {
    eval $itk_component($itk_option(-pane)) light $args
}

::itcl::body QuadDisplay::lightAll {args} {
    eval $itk_component(ul) light $args
    eval $itk_component(ur) light $args
    eval $itk_component(ll) light $args
    eval $itk_component(lr) light $args
}

::itcl::body QuadDisplay::perspective {args} {
    eval $itk_component($itk_option(-pane)) perspective $args
}

::itcl::body QuadDisplay::perspective_angle {args} {
    eval $itk_component($itk_option(-pane)) perspective_angle $args
}

::itcl::body QuadDisplay::sync {} {
    $itk_component($itk_option(-pane)) sync
}

::itcl::body QuadDisplay::png {args} {
    eval $itk_component($itk_option(-pane)) png $args
}

::itcl::body QuadDisplay::bg {args} {
    set result [eval $itk_component($itk_option(-pane)) bg $args]
    if {$args != ""} {
	refresh
	return
    }
    return $result
}

::itcl::body QuadDisplay::bgAll {args} {
    set result [eval $itk_component(ul) bg $args]
    eval $itk_component(ur) bg $args
    eval $itk_component(ll) bg $args
    eval $itk_component(lr) bg $args

    if {$args != ""} {
	refreshAll
	return
    }

    return $result
}

::itcl::body QuadDisplay::bounds {args} {
    eval $itk_component($itk_option(-pane)) bounds $args
}

::itcl::body QuadDisplay::boundsAll {args} {
    eval $itk_component(ul) bounds $args
    eval $itk_component(ur) bounds $args
    eval $itk_component(ll) bounds $args
    eval $itk_component(lr) bounds $args
}

if {$tcl_platform(os) != "Windows NT"} {
}
::itcl::body QuadDisplay::fb_active {args} {
    eval $itk_component($itk_option(-pane)) fb_active $args
}

::itcl::body QuadDisplay::fb_observe {args} {
    eval $itk_component($itk_option(-pane)) fb_observe $args
}

::itcl::body QuadDisplay::mouse_nirt {x y} {
    eval $itk_component($itk_option(-pane)) mouse_nirt $x $y
}

::itcl::body QuadDisplay::nirt {args} {
    eval $itk_component($itk_option(-pane)) nirt $args
}

::itcl::body QuadDisplay::vnirt {vx vy} {
    eval $itk_component($itk_option(-pane)) vnirt $vx $vy
}

::itcl::body QuadDisplay::qray {args} {
    eval $itk_component($itk_option(-pane)) qray $args
}

::itcl::body QuadDisplay::rt {args} {
    eval $itk_component($itk_option(-pane)) rt $args
}

::itcl::body QuadDisplay::rtabort {{gi 0}} {
    $itk_component($itk_option(-pane)) rtabort $gi
}

::itcl::body QuadDisplay::rtarea {args} {
    eval $itk_component($itk_option(-pane)) rtarea $args
}

::itcl::body QuadDisplay::rtcheck {args} {
    eval $itk_component($itk_option(-pane)) rtcheck $args
}

::itcl::body QuadDisplay::rtedge {args} {
    eval $itk_component($itk_option(-pane)) rtedge $args
}

::itcl::body QuadDisplay::rtweight {args} {
    eval $itk_component($itk_option(-pane)) rtweight $args
}

::itcl::body QuadDisplay::resetAll {} {
    reset
    $itk_component(upw) reset
    $itk_component(lpw) reset
}

::itcl::body QuadDisplay::default_views {} {
    $itk_component(ul) ae 0 90 0
    $itk_component(ur) ae 35 25 0
    $itk_component(ll) ae 0 0 0
    $itk_component(lr) ae 90 0 0
}

::itcl::body QuadDisplay::attach_view {} {
    $itk_component($itk_option(-pane)) attach_view
}

::itcl::body QuadDisplay::attach_viewAll {} {
    $itk_component(ul) attach_view
    $itk_component(ur) attach_view
    $itk_component(ll) attach_view
    $itk_component(lr) attach_view
}

::itcl::body QuadDisplay::attach_drawable {dg} {
    $itk_component($itk_option(-pane)) attach_drawable $dg
}

::itcl::body QuadDisplay::attach_drawableAll {dg} {
    $itk_component(ul) attach_drawable $dg
    $itk_component(ur) attach_drawable $dg
    $itk_component(ll) attach_drawable $dg
    $itk_component(lr) attach_drawable $dg
}

::itcl::body QuadDisplay::detach_view {} {
    $itk_component($itk_option(-pane)) detach_view
}

::itcl::body QuadDisplay::detach_viewAll {} {
    $itk_component(ul) detach_view
    $itk_component(ur) detach_view
    $itk_component(ll) detach_view
    $itk_component(lr) detach_view
}

::itcl::body QuadDisplay::detach_drawable {dg} {
    $itk_component($itk_option(-pane)) detach_drawable $dg
}

::itcl::body QuadDisplay::detach_drawableAll {dg} {
    $itk_component(ul) detach_drawable $dg
    $itk_component(ur) detach_drawable $dg
    $itk_component(ll) detach_drawable $dg
    $itk_component(lr) detach_drawable $dg
}

::itcl::body QuadDisplay::toggle_multi_pane {} {
    if {$priv_multi_pane} {
	set itk_option(-multi_pane) 0
	set priv_multi_pane 0

	switch $itk_option(-pane) {
	    ul {
		iwidgets::Panedwindow::hide lower
		$itk_component(upw) hide urp
	    }
	    ur {
		iwidgets::Panedwindow::hide lower
		$itk_component(upw) hide ulp
	    }
	    ll {
		iwidgets::Panedwindow::hide upper
		$itk_component(lpw) hide lrp
	    }
	    lr {
		iwidgets::Panedwindow::hide upper
		$itk_component(lpw) hide llp
	    }
	}
    } else {
	set itk_option(-multi_pane) 1
	set priv_multi_pane 1

	switch $itk_option(-pane) {
	    ul {
		iwidgets::Panedwindow::show lower
		$itk_component(upw) show urp
	    }
	    ur {
		iwidgets::Panedwindow::show lower
		$itk_component(upw) show ulp
	    }
	    ll {
		iwidgets::Panedwindow::show upper
		$itk_component(lpw) show lrp
	    }
	    lr {
		iwidgets::Panedwindow::show upper
		$itk_component(lpw) show llp
	    }
	}
    }
}

::itcl::body QuadDisplay::resetBindings {} {
    $itk_component($itk_option(-pane)) resetBindings
}

::itcl::body QuadDisplay::resetBindingsAll {} {
    $itk_component(ul) resetBindings
    $itk_component(ur) resetBindings
    $itk_component(ll) resetBindings
    $itk_component(lr) resetBindings
}

::itcl::body QuadDisplay::? {} {
    return [$itk_component(ur) ?]
}

::itcl::body QuadDisplay::apropos {key} {
    return [$itk_component(ur) apropos $key]
}

::itcl::body QuadDisplay::getUserCmds {} {
    return [$itk_component(ur) getUserCmds]
}

::itcl::body QuadDisplay::help {args} {
    return [eval $itk_component(ur) help $args]
}

# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.17
log
@Activate the fbserv capability on Windows.
@
text
@d62 1
d452 4
@


14.16
log
@Update the units command to return the current units if args is an empty string.
@
text
@a132 2
	public method fb_active {args}
	public method fb_observe {args}
d134 2
d974 4
a977 3
    ::itcl::body QuadDisplay::fb_active {args} {
	eval $itk_component($itk_option(-pane)) fb_active $args
    }
d979 2
a980 3
    ::itcl::body QuadDisplay::fb_observe {args} {
	eval $itk_component($itk_option(-pane)) fb_observe $args
    }
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d560 4
@


14.14
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
d14 1
a14 1
# Library General Public License for more details.
@


14.13
log
@Add viewDir method. Add methods to support the scale.
@
text
@d4 1
a4 1
# Copyright (c) 1998-2006 United States Government as represented by
@


14.12
log
@update copyright to 2006
@
text
@d67 1
d146 2
d173 1
d468 4
d729 21
d766 9
@


14.11
log
@Merge of bobWinPort
@
text
@d4 1
a4 1
# Copyright (C) 1998-2005 United States Government as represented by
@


14.10
log
@add rtarea and rtweight to the mged classes.. no idea if this is right or all that's needed, but seemed reasonable.
@
text
@d73 1
d76 1
d90 1
d124 1
a125 1
    public method rtarea {args}
d175 5
d488 4
d500 4
d559 4
d825 20
d966 4
d978 4
@


14.10.2.1
log
@Add methods for rtarea and rtweight
@
text
@d121 1
a122 1
    public method rtcheck {args}
a925 4
::itcl::body QuadDisplay::rtarea {args} {
    eval $itk_component($itk_option(-pane)) rtarea $args
}

a933 4
::itcl::body QuadDisplay::rtweight {args} {
    eval $itk_component($itk_option(-pane)) rtweight $args
}

@


14.10.2.2
log
@Added the following methods: m2vPoint, v2mPoint, orotate_mode, oscale_mode, otranslate_mode, screen2model and screen2view.
@
text
@a72 1
    public method m2vPoint {args}
a74 1
    public method mrotPoint {args}
a87 1
    public method v2mPoint {args}
a171 5
    public method orotate_mode {x y func obj kx ky kz}
    public method oscale_mode {x y func obj kx ky kz}
    public method otranslate_mode {x y func obj}
    public method screen2model {x y}
    public method screen2view {x y}
a479 4
::itcl::body QuadDisplay::m2vPoint {args} {
    eval $itk_component($itk_option(-pane)) m2vPoint $args
}

a487 4
::itcl::body QuadDisplay::mrotPoint {args} {
    eval $itk_component($itk_option(-pane)) mrotPoint $args
}

a542 4
::itcl::body QuadDisplay::v2mPoint {args} {
    eval $itk_component($itk_option(-pane)) v2mPoint $args
}

a804 20
::itcl::body QuadDisplay::orotate_mode {x y func obj kx ky kz} {
    eval $itk_component($itk_option(-pane)) orotate_mode $x $y $func $obj $kx $ky $kz
}

::itcl::body QuadDisplay::oscale_mode {x y func obj kx ky kz} {
    eval $itk_component($itk_option(-pane)) oscale_mode $x $y $func $obj $kx $ky $kz
}

::itcl::body QuadDisplay::otranslate_mode {x y func obj} {
    eval $itk_component($itk_option(-pane)) otranslate_mode $x $y $func $obj
}

::itcl::body QuadDisplay::screen2model {x y} {
    eval $itk_component($itk_option(-pane)) screen2model $x $y
}

::itcl::body QuadDisplay::screen2view {x y} {
    eval $itk_component($itk_option(-pane)) screen2view $x $y
}

@


14.9
log
@Added idle_mode method.
@
text
@d122 1
d124 1
@


14.8
log
@Add the following methods: getDrawLabelsHook, setDrawLabelsHook, setDrawLabelsHookAll
@
text
@d166 1
d787 4
@


14.7
log
@update copyright to 2005
@
text
@d52 4
a139 2
    public method toggle_autoViewEnable {args}
    public method toggle_autoViewEnableAll {args}
d261 15
a697 21
::itcl::body QuadDisplay::toggle_autoViewEnable {args} {
    switch -- $args {
	ul -
	ur -
	ll -
	lr {
	    eval $itk_component($args) toggle_autoViewEnable
	}
	default {
	    eval $itk_component($itk_option(-pane)) toggle_autoViewEnable
	}
    }
}

::itcl::body QuadDisplay::toggle_autoViewEnableAll {} {
    eval $itk_component(ul) toggle_autoViewEnable
    eval $itk_component(ur) toggle_autoViewEnable
    eval $itk_component(ll) toggle_autoViewEnable
    eval $itk_component(lr) toggle_autoViewEnable
}

a1058 1

@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@d4 1
a4 1
# Copyright (c) 1998-2004 United States Government as represented by
@


14.5
log
@remove the old distribution notice section
@
text
@a30 3
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a29 4
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d2 20
@


1.2
log
@apply Bob's provided patches from 20040630.  this includes itcl namespace scoping, windows DLL exporting, and wdb arb edit support
@
text
@d1050 9
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d29 1
a29 1
class QuadDisplay {
a88 2
    public method fb_active {args}
    public method fb_observe {args}
d110 9
d123 2
a124 4
    public method toggle_viewAxesEnable {args}
    public method toggle_viewAxesEnableAll {}
    public method toggle_centerDotEnable {args}
    public method toggle_centerDotEnableAll {}
d145 1
a147 1
    public method setModelAxesTickEnable {args}
d169 1
a169 1
body QuadDisplay::constructor {args} {
d178 4
a181 2
	keep -sashwidth -sashheight -sashborderwidth
	keep -sashindent -thickness
d188 4
a191 2
	keep -sashwidth -sashheight -sashborderwidth
	keep -sashindent -thickness
d238 1
a238 1
configbody QuadDisplay::pane {
d242 1
a242 1
configbody QuadDisplay::multi_pane {
d246 1
a246 1
body QuadDisplay::pane {args} {
d363 1
a363 1
	set priv_pane $itk_option(-pane)
d370 1
a370 1
body QuadDisplay::multi_pane {args} {
d392 1
a392 1
body QuadDisplay::refresh {} {
d396 1
a396 1
body QuadDisplay::refreshAll {} {
d403 1
a403 1
body QuadDisplay::ae {args} {
d407 1
a407 1
body QuadDisplay::arot {args} {
d411 1
a411 1
body QuadDisplay::base2local {} {
d415 1
a415 1
body QuadDisplay::center {args} {
d419 1
a419 1
body QuadDisplay::coord {args} {
d423 1
a423 1
body QuadDisplay::eye {args} {
d427 1
a427 1
body QuadDisplay::eye_pos {args} {
d431 1
a431 1
body QuadDisplay::invSize {args} {
d435 1
a435 1
body QuadDisplay::keypoint {args} {
d439 1
a439 1
body QuadDisplay::local2base {} {
d443 1
a443 1
body QuadDisplay::lookat {args} {
d447 1
a447 1
body QuadDisplay::model2view {args} {
d451 1
a451 1
body QuadDisplay::mrot {args} {
d455 1
a455 1
body QuadDisplay::orientation {args} {
d459 1
a459 1
body QuadDisplay::pmat {args} {
d463 1
a463 1
body QuadDisplay::pmodel2view {args} {
d467 1
a467 1
body QuadDisplay::pov {args} {
d471 1
a471 1
body QuadDisplay::rmat {args} {
d475 1
a475 1
body QuadDisplay::rot {args} {
d479 1
a479 1
body QuadDisplay::rotate_about {args} {
d483 1
a483 1
body QuadDisplay::slew {args} {
d487 1
a487 1
body QuadDisplay::sca {args} {
d491 1
a491 1
body QuadDisplay::setview {args} {
d495 1
a495 1
body QuadDisplay::size {args} {
d499 1
a499 1
body QuadDisplay::tra {args} {
d503 1
a503 1
body QuadDisplay::units {args} {
d510 1
a510 1
body QuadDisplay::view2model {args} {
d514 1
a514 1
body QuadDisplay::vrot {args} {
d518 1
a518 1
body QuadDisplay::vtra {args} {
d522 1
a522 1
body QuadDisplay::zoom {args} {
d526 1
a526 1
body QuadDisplay::autoview {{gindex 0}} {
d530 1
a530 1
body QuadDisplay::autoviewAll {{gindex 0}} {
d537 1
a537 1
body QuadDisplay::add {glist} {
d541 1
a541 1
body QuadDisplay::addAll {glist} {
d548 1
a548 1
body QuadDisplay::remove {glist} {
d552 1
a552 1
body QuadDisplay::removeAll {glist} {
d559 1
a559 1
body QuadDisplay::contents {} {
d563 1
a563 1
body QuadDisplay::listen {args} {
d567 1
a567 1
body QuadDisplay::linewidth {args} {
d576 1
a576 1
body QuadDisplay::linestyle {args} {
d580 1
a580 1
body QuadDisplay::zclip {args} {
d584 1
a584 1
body QuadDisplay::toggle_modelAxesEnable {args} {
d598 1
a598 1
body QuadDisplay::toggle_modelAxesEnableAll {} {
d605 1
a605 1
body QuadDisplay::toggle_modelAxesTickEnable {args} {
d619 1
a619 1
body QuadDisplay::toggle_modelAxesTickEnableAll {} {
d626 1
a626 1
body QuadDisplay::toggle_viewAxesEnable {args} {
d640 1
a640 1
body QuadDisplay::toggle_viewAxesEnableAll {} {
d647 1
a647 1
body QuadDisplay::toggle_centerDotEnable {args} {
d661 1
a661 1
body QuadDisplay::toggle_centerDotEnableAll {} {
d668 22
a689 1
body QuadDisplay::zclipAll {args} {
d696 1
a696 1
body QuadDisplay::setCenterDotEnable {args} {
d705 1
a705 1
body QuadDisplay::setViewAxesEnable {args} {
d714 1
a714 1
body QuadDisplay::setModelAxesEnable {args} {
d723 1
a723 1
body QuadDisplay::setViewAxesPosition {args} {
d732 1
a732 1
body QuadDisplay::setModelAxesPosition {args} {
d749 1
a749 1
body QuadDisplay::setModelAxesTickEnable {args} {
d758 1
a758 1
body QuadDisplay::setModelAxesTickInterval {args} {
d768 1
a768 1
body QuadDisplay::setModelAxesTicksPerMajor {args} {
d777 1
a777 1
body QuadDisplay::rotate_mode {x y} {
d781 1
a781 1
body QuadDisplay::translate_mode {x y} {
d785 1
a785 1
body QuadDisplay::scale_mode {x y} {
d789 1
a789 1
body QuadDisplay::transparency {args} {
d793 1
a793 1
body QuadDisplay::transparencyAll {args} {
d800 1
a800 1
body QuadDisplay::zbuffer {args} {
d804 1
a804 1
body QuadDisplay::zbufferAll {args} {
d811 1
a811 1
body QuadDisplay::depthMask {args} {
d815 1
a815 1
body QuadDisplay::light {args} {
d819 1
a819 1
body QuadDisplay::lightAll {args} {
d826 1
a826 1
body QuadDisplay::perspective {args} {
d830 1
a830 1
body QuadDisplay::perspective_angle {args} {
d834 1
a834 1
body QuadDisplay::sync {} {
d838 1
a838 1
body QuadDisplay::png {args} {
d842 1
a842 1
body QuadDisplay::bg {args} {
d851 1
a851 1
body QuadDisplay::bgAll {args} {
d865 1
a865 1
body QuadDisplay::bounds {args} {
d869 1
a869 1
body QuadDisplay::boundsAll {args} {
d876 4
a879 3
body QuadDisplay::fb_active {args} {
    eval $itk_component($itk_option(-pane)) fb_active $args
}
d881 3
a883 2
body QuadDisplay::fb_observe {args} {
    eval $itk_component($itk_option(-pane)) fb_observe $args
d886 1
a886 1
body QuadDisplay::mouse_nirt {x y} {
d890 1
a890 1
body QuadDisplay::nirt {args} {
d894 1
a894 1
body QuadDisplay::vnirt {vx vy} {
d898 1
a898 1
body QuadDisplay::qray {args} {
d902 1
a902 1
body QuadDisplay::rt {args} {
d906 1
a906 1
body QuadDisplay::rtabort {{gi 0}} {
d910 1
a910 1
body QuadDisplay::rtcheck {args} {
d914 1
a914 1
body QuadDisplay::rtedge {args} {
d918 1
a918 1
body QuadDisplay::resetAll {} {
d924 1
a924 1
body QuadDisplay::default_views {} {
d931 1
a931 1
body QuadDisplay::attach_view {} {
d935 1
a935 1
body QuadDisplay::attach_viewAll {} {
d942 1
a942 1
body QuadDisplay::attach_drawable {dg} {
d946 1
a946 1
body QuadDisplay::attach_drawableAll {dg} {
d953 1
a953 1
body QuadDisplay::detach_view {} {
d957 1
a957 1
body QuadDisplay::detach_viewAll {} {
d964 1
a964 1
body QuadDisplay::detach_drawable {dg} {
d968 1
a968 1
body QuadDisplay::detach_drawableAll {dg} {
d975 1
a975 1
body QuadDisplay::toggle_multi_pane {} {
d1023 1
a1023 1
body QuadDisplay::resetBindings {} {
d1027 1
a1027 1
body QuadDisplay::resetBindingsAll {} {
d1034 1
a1034 1
body QuadDisplay::? {} {
d1038 1
a1038 1
body QuadDisplay::apropos {key} {
d1042 1
a1042 1
body QuadDisplay::getUserCmds {} {
d1046 1
a1046 1
body QuadDisplay::help {args} {
@

