head	14.22;
access;
symbols
	rel-7-10-4:14.21
	STABLE:14.21.0.2
	stable-branch:14.9
	rel-7-10-2:14.21
	rel-7-10-0:14.20
	rel-7-8-4:14.17
	rel-7-8-2:14.15
	rel-7-8-0:14.15
	trimnurbs-branch:14.15.0.2
	help:14.15
	temp_tag:14.14
	bobWinPort-20051223-freeze:14.11.2.2
	postmerge-20051223-bobWinPort:14.14
	premerge-20051223-bobWinPort:14.13
	rel-7-6-6:14.13
	rel-7-6-4:14.13
	rel-7-6-2:14.11.4.1
	rel-7-6-branch:14.11.0.4
	rel-7-6-0:14.11
	rel-7-4-2:14.10
	rel-7-4-branch:14.10.0.2
	bobWinPort:14.11.0.2
	rel-7-4-0:14.10
	rel-7-2-6:14.9
	rel-7-2-4:14.9
	rel-7-2-2:14.8
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@# @;


14.22
date	2007.11.04.16.08.31;	author bob1961;	state Exp;
branches;
next	14.21;

14.21
date	2007.04.11.18.28.52;	author bob1961;	state Exp;
branches;
next	14.20;

14.20
date	2007.01.27.01.41.47;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.01.23.01.13.50;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.01.20.14.37.01;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2006.07.26.15.57.06;	author bob1961;	state Exp;
branches;
next	14.16;

14.16
date	2006.06.29.12.45.32;	author bob1961;	state Exp;
branches;
next	14.15;

14.15
date	2006.01.18.06.46.25;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2005.12.23.21.26.48;	author bob1961;	state Exp;
branches;
next	14.13;

14.13
date	2005.10.23.04.44.38;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2005.09.21.17.32.59;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.08.15.19.43.41;	author bob1961;	state Exp;
branches
	14.11.2.1
	14.11.4.1;
next	14.10;

14.10
date	2005.06.24.23.34.13;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.04.13.15.20.08;	author bob1961;	state Exp;
branches;
next	14.8;

14.8
date	2005.03.24.17.52.56;	author bob1961;	state Exp;
branches;
next	14.7;

14.7
date	2005.01.30.20.31.13;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.58.44;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.44.34;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.48;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.27;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.43.00;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.03.20.42.30;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.20.59;	author morrison;	state Exp;
branches;
next	;

14.11.2.1
date	2005.09.08.16.18.33;	author bob1961;	state Exp;
branches;
next	14.11.2.2;

14.11.2.2
date	2005.12.05.22.55.38;	author bob1961;	state Exp;
branches;
next	;

14.11.4.1
date	2005.09.29.06.21.33;	author brlcad;	state Exp;
branches;
next	14.11.4.2;

14.11.4.2
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.22
log
@Activate the fbserv capability on Windows.
@
text
@#                     D I S P L A Y . T C L
# BRL-CAD
#
# Copyright (c) 1998-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
#
#
# Description -
#	The Display class inherits from View and Dm. This
#       class also maintains a list of drawable geometry objects
#       which it can display. It now becomes possible to bind
#       view commands to window events to automatically update the
#       Dm window when the view changes.
#

#
# Usual options.
#
::itk::usual Display {
    keep -linewidth
    keep -rscale
    keep -sscale
    keep -usePhony
    keep -type

    keep -primitiveLabels
    keep -primitiveLabelColor

    keep -centerDotEnable
    keep -centerDotColor

    keep -modelAxesEnable
    keep -modelAxesLineWidth
    keep -modelAxesPosition
    keep -modelAxesSize
    keep -modelAxesColor
    keep -modelAxesLabelColor
    keep -modelAxesTripleColor

    keep -modelAxesTickEnable
    keep -modelAxesTickLength
    keep -modelAxesTickMajorLength
    keep -modelAxesTickInterval
    keep -modelAxesTicksPerMajor
    keep -modelAxesTickColor
    keep -modelAxesTickMajorColor
    keep -modelAxesTickThreshold

    keep -viewAxesEnable
    keep -viewAxesLineWidth
    keep -viewAxesPosition
    keep -viewAxesSize
    keep -viewAxesColor
    keep -viewAxesLabelColor
    keep -viewAxesTripleColor

    keep -showViewingParams
    keep -viewingParamsColor

    keep -scaleEnable
    keep -scaleColor
}

::itcl::class Display {
    inherit Dm View

    itk_option define -rscale rscale Rscale 0.4
    itk_option define -sscale sscale Sscale 2.0

    itk_option define -usePhony usePhony UsePhony 0

    itk_option define -centerDotEnable centerDotEnable CenterDotEnable 1
    itk_option define -centerDotColor centerDotColor CenterDotColor {255 255 0}

    itk_option define -scaleEnable scaleEnable ScaleEnable 0
    itk_option define -scaleColor scaleColor ScaleColor {255 255 0}

    itk_option define -primitiveLabels primitiveLabels PrimitiveLabels {}
    itk_option define -primitiveLabelColor primitiveLabelColor PrimitiveLabelColor {255 255 0}

    itk_option define -modelAxesEnable modelAxesEnable AxesEnable 0
    itk_option define -modelAxesLineWidth modelAxesLineWidth AxesLineWidth 0
    itk_option define -modelAxesPosition modelAxesPosition AxesPosition {0 0 0}
    itk_option define -modelAxesSize modelAxesSize AxesSize 2.0
    itk_option define -modelAxesColor modelAxesColor AxesColor {255 255 255}
    itk_option define -modelAxesLabelColor modelAxesLabelColor AxesLabelColor {255 255 0}
    itk_option define -modelAxesTripleColor modelAxesTripleColor AxesTripleColor 0

    itk_option define -modelAxesTickEnable modelAxesTickEnable AxesTickEnable 1
    itk_option define -modelAxesTickLength modelAxesTickLength AxesTickLength 4
    itk_option define -modelAxesTickMajorLength modelAxesTickMajorLength AxesTickMajorLength 8
    itk_option define -modelAxesTickInterval modelAxesTickInterval AxesTickInterval 100
    itk_option define -modelAxesTicksPerMajor modelAxesTicksPerMajor AxesTicksPerMajor 10
    itk_option define -modelAxesTickColor modelAxesTickColor AxesTickColor {255 255 0}
    itk_option define -modelAxesTickMajorColor modelAxesTickMajorColor AxesTickMajorColor {255 0 0}
    itk_option define -modelAxesTickThreshold modelAxesTickThreshold AxesTickThreshold 8

    itk_option define -viewAxesEnable viewAxesEnable AxesEnable 1
    itk_option define -viewAxesLineWidth viewAxesLineWidth AxesLineWidth 0
    itk_option define -viewAxesPosition viewAxesPosition AxesPosition {-0.85 -0.85 0}
    itk_option define -viewAxesSize viewAxesSize AxesSize 0.2
    itk_option define -viewAxesColor viewAxesColor AxesColor {255 255 255}
    itk_option define -viewAxesLabelColor viewAxesLabelColor AxesLabelColor {255 255 0}
    itk_option define -viewAxesTripleColor viewAxesTripleColor AxesTripleColor 1

    itk_option define -showViewingParams showViewingParams ShowViewingParams 0
    itk_option define -viewingParamsColor viewingParamsColor ViewingParamsColor {255 255 0}

    constructor {args} {
	Dm::constructor
	View::constructor
    } {}
    destructor {}

    public method mouse_nirt {_x _y {gi 0}}
    public method nirt {args}
    public method vnirt {vx vy {gi 0}}
    public method qray {args}
    public method refresh {}
    public method rt {args}
    public method rtabort {{gi 0}}
    public method rtarea {args}
    public method rtcheck {args}
    public method rtedge {args}
    public method rtweight {args}
    public method autoview {{g_index 0}}
    public method attach_view {}
    public method attach_drawable {dg}
    public method detach_view {}
    public method detach_drawable {dg}
    public method update {obj}

    # methods for maintaining the list of geometry objects
    public method add {glist}
    public method contents {}
    public method remove {glist}

    # methods that override methods inherited from View
    public method slew {args}
    public method perspective_angle {args}
    public method units {args}

    # methods that override methods inherited from Dm
    public method bounds {args}
    public method depthMask {args}
    public method perspective {args}
    public method light {args}
    public method transparency {args}
    public method zbuffer {args}
    public method zclip {args}
    if {$tcl_platform(os) != "Windows NT"} {
    }
    public method fb_active {args}

    public method toggle_modelAxesEnable {}
    public method toggle_modelAxesTickEnable {}
    public method toggle_viewAxesEnable {}
    public method toggle_centerDotEnable {}
    public method toggle_scaleEnable {}

    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}

    protected method toggle_zclip {}
    protected method toggle_zbuffer {}
    protected method toggle_light {}
    protected method toggle_perspective {}
    protected method toggle_perspective_angle {}
    protected method toggle_transparency {}

    public method idle_mode {}
    public method rotate_mode {x y}
    public method scale_mode {x y}
    public method translate_mode {x y}
    public method orotate_mode {x y func obj kx ky kz}
    public method oscale_mode {x y func obj kx ky kz}
    public method otranslate_mode {x y func obj}
    public method screen2model {x y}
    public method screen2view {x y}

    protected method constrain_rmode {coord x y}
    protected method constrain_tmode {coord x y}
    protected method handle_rotation {x y}
    protected method handle_translation {x y}
    protected method handle_scale {x y}
    protected method handle_orotation {x y}
    protected method handle_oscale {x y}
    protected method handle_otranslation {x y}
    protected method handle_constrain_rot {coord x y}
    protected method handle_constrain_tran {coord x y}
    protected method handle_configure {}
    protected method handle_expose {}
    protected method doBindings {}
    public method resetBindings {}

    protected variable minScale 0.0001
    protected variable minAxesSize 0.1
    protected variable minAxesLineWidth 0
    protected variable minAxesTickLength 1
    protected variable minAxesTickMajorLength 1
    protected variable minMouseDelta -20
    protected variable maxMouseDelta 20

    protected {
	variable keyPointX 0
	variable keyPointY 0
	variable keyPointZ 0

	variable object ""
	variable mouseFunc ""
    }

    private variable prevMouseX ""
    private variable prevMouseY ""
    private variable geolist ""
    private variable perspective_angle_index 0
    private variable perspective_angles {90 60 45 30}
    private variable doingInit 1
}

########################### Public/Interface Methods ###########################

::itcl::body Display::constructor {args} {
    attach_view
    doBindings
    handle_configure
    eval itk_initialize $args
    set doingInit 0
}

::itcl::configbody Display::rscale {
    if {$itk_option(-rscale) < $minScale} {
	error "rscale must be >= $minScale"
    }
}

::itcl::configbody Display::sscale {
    if {$itk_option(-sscale) < $minScale} {
	error "sscale must be >= $minScale"
    }
}

::itcl::configbody Display::centerDotEnable {
    if {$itk_option(-centerDotEnable) != 0 &&
	$itk_option(-centerDotEnable) != 1} {
	error "value must be 0, 1"
    }

    refresh
}

::itcl::configbody Display::centerDotColor {
    if {[llength $itk_option(-centerDotColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-centerDotColor) 0]
    set g [lindex $itk_option(-centerDotColor) 1]
    set b [lindex $itk_option(-centerDotColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

#::itcl::configbody Display::showViewingParams {
#    if {$itk_option(-showViewingParams) != 0 &&
#        $itk_option(-showViewingParams) != 1} {
#	error "value must be 0, 1"
#    }
#
#    refresh
#}
#
#::itcl::configbody Display::scaleEnable {
#    if {$itk_option(-scaleEnable) != 0 &&
#        $itk_option(-scaleEnable) != 1} {
#	error "value must be 0, 1"
#    }
#
#    refresh
#}

::itcl::configbody Display::scaleColor {
    if {[llength $itk_option(-scaleColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-scaleColor) 0]
    set g [lindex $itk_option(-scaleColor) 1]
    set b [lindex $itk_option(-scaleColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::primitiveLabelColor {
    if {[llength $itk_option(-primitiveLabelColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-primitiveLabelColor) 0]
    set g [lindex $itk_option(-primitiveLabelColor) 1]
    set b [lindex $itk_option(-primitiveLabelColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::viewingParamsColor {
    if {[llength $itk_option(-viewingParamsColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-viewingParamsColor) 0]
    set g [lindex $itk_option(-viewingParamsColor) 1]
    set b [lindex $itk_option(-viewingParamsColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::viewAxesEnable {
    if {$itk_option(-viewAxesEnable) != 0 &&
	$itk_option(-viewAxesEnable) != 1} {
	error "value must be 0, 1"
    }

    refresh
}

::itcl::configbody Display::modelAxesEnable {
    if {$itk_option(-modelAxesEnable) != 0 &&
	$itk_option(-modelAxesEnable) != 1} {
	error "value must be 0, 1"
    }

    refresh
}

::itcl::configbody Display::viewAxesSize {
    # validate size
    if {![string is double $itk_option(-viewAxesSize)] ||
	$itk_option(-viewAxesSize) < $minAxesSize} {
	    error "-viewAxesSize must be >= $minAxesSize"
    }

    refresh
}

::itcl::configbody Display::modelAxesSize {
    # validate size
    if {![string is double $itk_option(-modelAxesSize)] ||
	$itk_option(-modelAxesSize) < $minAxesSize} {
	    error "-modelAxesSize must be >= $minAxesSize"
    }

    refresh
}

::itcl::configbody Display::viewAxesPosition {
    if {[llength $itk_option(-viewAxesPosition)] != 3} {
	error "values must be {x y z} where x, y and z are numeric"
    }

    set x [lindex $itk_option(-viewAxesPosition) 0]
    set y [lindex $itk_option(-viewAxesPosition) 1]
    set z [lindex $itk_option(-viewAxesPosition) 2]

    # validate center
    if {![string is double $x] ||
	![string is double $y] ||
	![string is double $z]} {

	error "values must be {x y z} where x, y and z are numeric"
    }

    refresh
}

::itcl::configbody Display::modelAxesPosition {
    if {[llength $itk_option(-modelAxesPosition)] != 3} {
	error "values must be {x y z} where x, y and z are numeric"
    }

    set x [lindex $itk_option(-modelAxesPosition) 0]
    set y [lindex $itk_option(-modelAxesPosition) 1]
    set z [lindex $itk_option(-modelAxesPosition) 2]

    # validate center
    if {![string is double $x] ||
	![string is double $y] ||
	![string is double $z]} {

	error "values must be {x y z} where x, y and z are numeric"
    }

    # convert to mm
    set local2mm [local2base]
    set itk_option(-modelAxesPosition) [list [expr {$local2mm * $x}] \
					     [expr {$local2mm * $y}] \
					     [expr {$local2mm * $z}]]

    refresh
}

::itcl::configbody Display::viewAxesLineWidth {
    # validate line width
    if {![string is digit $itk_option(-viewAxesLineWidth)] ||
	$itk_option(-viewAxesLineWidth) < $minAxesLineWidth} {
	    error "-viewAxesLineWidth must be >= $minAxesLineWidth"
    }

    refresh
}

::itcl::configbody Display::modelAxesLineWidth {
    # validate line width
    if {![string is digit $itk_option(-modelAxesLineWidth)] ||
	$itk_option(-modelAxesLineWidth) < $minAxesLineWidth} {
	    error "-modelAxesLineWidth must be >= $minAxesLineWidth"
    }

    refresh
}

::itcl::configbody Display::viewAxesTripleColor {
    if {$itk_option(-viewAxesTripleColor) != 0 &&
	$itk_option(-viewAxesTripleColor) != 1} {
	error "value must be 0 or 1"
    }

    refresh
}

::itcl::configbody Display::modelAxesTripleColor {
    if {$itk_option(-modelAxesTripleColor) != 0 &&
	$itk_option(-modelAxesTripleColor) != 1} {
	error "value must be 0 or 1"
    }

    refresh
}

::itcl::configbody Display::viewAxesColor {
    if {[llength $itk_option(-viewAxesColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-viewAxesColor) 0]
    set g [lindex $itk_option(-viewAxesColor) 1]
    set b [lindex $itk_option(-viewAxesColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::modelAxesColor {
    if {[llength $itk_option(-modelAxesColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-modelAxesColor) 0]
    set g [lindex $itk_option(-modelAxesColor) 1]
    set b [lindex $itk_option(-modelAxesColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::viewAxesLabelColor {
    if {[llength $itk_option(-viewAxesLabelColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-viewAxesLabelColor) 0]
    set g [lindex $itk_option(-viewAxesLabelColor) 1]
    set b [lindex $itk_option(-viewAxesLabelColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::modelAxesLabelColor {
    if {[llength $itk_option(-modelAxesLabelColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-modelAxesLabelColor) 0]
    set g [lindex $itk_option(-modelAxesLabelColor) 1]
    set b [lindex $itk_option(-modelAxesLabelColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::modelAxesTickEnable {
    if {$itk_option(-modelAxesTickEnable) != 0 &&
	$itk_option(-modelAxesTickEnable) != 1} {
	error "value must be 0, 1"
    }

    refresh
}

::itcl::configbody Display::modelAxesTickLength {
    # validate tick length
    if {![string is digit $itk_option(-modelAxesTickLength)] ||
	$itk_option(-modelAxesTickLength) < $minAxesTickLength} {
	    error "-modelAxesTickLength must be >= $minAxesTickLength"
    }

    refresh
}

::itcl::configbody Display::modelAxesTickMajorLength {
    # validate major tick length
    if {![string is digit $itk_option(-modelAxesTickMajorLength)] ||
	$itk_option(-modelAxesTickMajorLength) < $minAxesTickMajorLength} {
	    error "-modelAxesTickMajorLength must be >= $minAxesTickMajorLength"
    }

    refresh
}

::itcl::configbody Display::modelAxesTickInterval {
    if {![string is double $itk_option(-modelAxesTickInterval)] ||
	$itk_option(-modelAxesTickInterval) <= 0} {
	error "-modelAxesTickInterval must be > 0"
    }

    # convert to mm
    set itk_option(-modelAxesTickInterval) [expr {[local2base] * $itk_option(-modelAxesTickInterval)}]
    refresh
}

::itcl::configbody Display::modelAxesTicksPerMajor {
    if {![string is digit $itk_option(-modelAxesTicksPerMajor)]} {
	error "-modelAxesTicksPerMajor must be > 0"
    }

    refresh
}

::itcl::configbody Display::modelAxesTickColor {
    if {[llength $itk_option(-modelAxesTickColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-modelAxesTickColor) 0]
    set g [lindex $itk_option(-modelAxesTickColor) 1]
    set b [lindex $itk_option(-modelAxesTickColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::modelAxesTickMajorColor {
    if {[llength $itk_option(-modelAxesTickMajorColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-modelAxesTickMajorColor) 0]
    set g [lindex $itk_option(-modelAxesTickMajorColor) 1]
    set b [lindex $itk_option(-modelAxesTickMajorColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
	$r < 0 || 255 < $r ||
	$g < 0 || 255 < $g ||
	$b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

::itcl::configbody Display::modelAxesTickThreshold {
    if {![string is digit $itk_option(-modelAxesTickThreshold)]} {
	error "-modelAxesTickThreshold must be > 1"
    }

    refresh
}

::itcl::body Display::update {obj} {
    refresh
}

::itcl::body Display::refresh {} {
    global tcl_platform

    if {$doingInit} {
	return
    }

    Dm::drawBegin

    if {$itk_option(-perspective)} {
	Dm::loadmat [View::pmodel2view] 0
    } else {
	Dm::loadmat [View::model2view] 0
    }

    if {![info exists itk_option(-fb_active)] || $itk_option(-fb_active) < 2} {

	if {$itk_option(-fb_active)} {
	    # underlay
	    Dm::refreshfb
	}

	foreach geo $geolist {
	    Dm::drawGeom $geo
	}

	Dm::normal

	if {$itk_option(-showViewingParams)} {
	    #set ae [View::ae]
	    set azel [View::ae]
	    set cent [View::center]
	    #set vstr [format "units:%s  size:%g  center:(%g %g %g)  az:%g  el:%g  tw::%g"
	    set vstr [format "units:%s  size:%.2f  center:(%.2f, %.2f, %.2f)  az:%.2f  el:%.2f  tw::%.2f" \
			  [View::units] \
			  [View::size] \
			  [lindex $cent 0] [lindex $cent 1] [lindex $cent 2] \
			  [lindex $azel 0] \
			  [lindex $azel 1] \
			  [lindex $azel 2]]
	    #Dm::drawString $vstr 0.0 -0.965 10 0
	    eval Dm::fg $itk_option(-viewingParamsColor)
	    Dm::drawString $vstr -0.98 -0.965 10 0
	}

	if {$itk_option(-scaleEnable)} {
	    Dm::drawScale [View::size] $itk_option(-scaleColor)
	}

	if {$itk_option(-primitiveLabels) != {}} {
	    ####
	    #XXX At the moment primitive labels are only supported
	    #    for the first drawable geometry object in the list.
	    #
	    set geo [lindex $geolist 0]
	    eval Dm::drawLabels $geo [list $itk_option(-primitiveLabelColor)] $itk_option(-primitiveLabels)
	}

	if {$itk_option(-viewAxesEnable) ||
	    $itk_option(-modelAxesEnable)} {
		set vsize [expr {[View::local2base] * [View::size]}]
		set rmat [View::rmat]
		set model2view [View::model2view]

		if {$itk_option(-viewAxesEnable)} {
		    set x [lindex $itk_option(-viewAxesPosition) 0]
		    set y [lindex $itk_option(-viewAxesPosition) 1]
		    set z [lindex $itk_option(-viewAxesPosition) 2]
		    set y [expr {$y * $invAspect}]
		    set modVAP "$x $y $z"

		    Dm::drawViewAxes $vsize $rmat $modVAP \
			    $itk_option(-viewAxesSize) $itk_option(-viewAxesColor) \
			    $itk_option(-viewAxesLabelColor) $itk_option(-viewAxesLineWidth) \
			    1 $itk_option(-viewAxesTripleColor)
		}

		if {$itk_option(-modelAxesEnable)} {
		    Dm::drawModelAxes $vsize $rmat $itk_option(-modelAxesPosition) \
			    $itk_option(-modelAxesSize) $itk_option(-modelAxesColor) \
			    $itk_option(-modelAxesLabelColor) $itk_option(-modelAxesLineWidth) \
			    0 $itk_option(-modelAxesTripleColor) \
			    $model2view \
			    $itk_option(-modelAxesTickEnable) \
			    $itk_option(-modelAxesTickLength) \
			    $itk_option(-modelAxesTickMajorLength) \
			    $itk_option(-modelAxesTickInterval) \
			    $itk_option(-modelAxesTicksPerMajor) \
			    $itk_option(-modelAxesTickColor) \
			    $itk_option(-modelAxesTickMajorColor) \
			    $itk_option(-modelAxesTickThreshold)
		}
	}

	if {$itk_option(-centerDotEnable)} {
	    Dm::drawCenterDot $itk_option(-centerDotColor)
	}

    } else {
	Dm::refreshfb
    }

    Dm::drawEnd
}

::itcl::body Display::mouse_nirt {_x _y {gi 0}} {
    set geo [lindex $geolist $gi]

    if {$geo == ""} {
	return "mouse_nirt: bad geometry index - $gi"
    }

    # transform X screen coordinates into normalized view coordinates
    set nvx [expr ($_x * $invWidth - 0.5) * 2.0]
    set nvy [expr (0.5 - $_y * $invHeight) * 2.0 * $invAspect]

    # transform normalized view coordinates into model coordinates
    set mc [mat4x3pnt [view2model] "$nvx $nvy 0"]
    set mc [vscale $mc [base2local]]

    # finally, call nirt (backing out of geometry)
    set v_obj [View::get_viewname]
    eval $geo nirt $v_obj -b $mc
}

::itcl::body Display::nirt {args} {
    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "nirt: bad geometry index"
    }

    set v_obj [View::get_viewname]
    eval $geo nirt $v_obj $args
}

::itcl::body Display::vnirt {vx vy {gi 0}} {
    set geo [lindex $geolist $gi]

    if {$geo == ""} {
	return "vnirt: bad geometry index - $gi"
    }

    # finally, call vnirt (backing out of geometry)
    set v_obj [View::get_viewname]
    eval $geo vnirt $v_obj -b $vx $vy
}

::itcl::body Display::qray {args} {
    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "qray: bad geometry index"
    }

    eval $geo qray $args
}

::itcl::body Display::rt {args} {
    global tcl_platform

    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rt: bad geometry index"
    }

    set v_obj [View::get_viewname]
#    if {$tcl_platform(os) != "Windows NT"} {
#	eval $geo rt $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
#    } else {
#	eval $geo rt $v_obj $args
#    }

    eval $geo rt $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
}

::itcl::body Display::rtabort {{gi 0}} {
    set geo [lindex $geolist $gi]

    if {$geo == ""} {
	return "rtabort: bad geometry index"
    }

    $geo rtabort
}

::itcl::body Display::rtarea {args} {
    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rtarea: bad geometry index"
    }

    set v_obj [View::get_viewname]
    eval $geo rtarea $v_obj -V $aspect $args
}

::itcl::body Display::rtcheck {args} {
    global tcl_platform

    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rtcheck: bad geometry index"
    }

    set v_obj [View::get_viewname]
    eval $geo rtcheck $v_obj $args
}

::itcl::body Display::rtedge {args} {
    global tcl_platform

    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rtedge: bad geometry index"
    }

    set v_obj [View::get_viewname]
#    if {$tcl_platform(os) != "Windows NT"} {
#	eval $geo rtedge $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
#    } else {
#	eval $geo rtedge $v_obj $args
#    }

    eval $geo rtedge $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
}

::itcl::body Display::rtweight {args} {
    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rtweight: bad geometry index"
    }

    set v_obj [View::get_viewname]
    eval $geo rtweight $v_obj -V $aspect $args
}

::itcl::body Display::autoview {{g_index 0}} {
    if {$g_index < [llength $geolist]} {
	set geo [lindex $geolist $g_index]
	if {$itk_option(-usePhony)} {
	    set aview [$geo get_autoview -p]
	} else {
	    set aview [$geo get_autoview]
	}
	catch {eval [lrange $aview 0 1]}
	catch {eval [lrange $aview 2 3]}
    }
}

::itcl::body Display::attach_view {} {
    View::observer attach $this
}

::itcl::body Display::attach_drawable {dg} {
    $dg observer attach $this
}

::itcl::body Display::detach_view {} {
    View::observer detach $this
}

::itcl::body Display::detach_drawable {dg} {
    $dg observer detach $this
}

::itcl::body Display::add {glist} {
    if [llength $geolist] {
	set blank 0
    } else {
	set blank 1
    }

    foreach geo $glist {
	set index [lsearch $geolist $geo]

	# already in list
	if {$index != -1} {
	    continue
	}

	lappend geolist $geo
	attach_drawable $geo
    }

    if {$blank} {
	detach_view
	autoview
	attach_view
    }

    refresh
}

::itcl::body Display::remove {glist} {
    foreach geo $glist {
	set index [lsearch $geolist $geo]
	if {$index == -1} {
	    continue
	}

	set geolist [lreplace $geolist $index $index]
	detach_drawable $geo
    }

    refresh
}

::itcl::body Display::contents {} {
    return $geolist
}

########################### Public Methods That Override ###########################
::itcl::body Display::slew {args} {
    if {[llength $args] == 2} {
	set x1 [lindex $args 0]
	set y1 [lindex $args 1]

	set x2 [expr $width * 0.5]
	set y2 [expr $height * 0.5]
	set sf [expr 2.0 * $invWidth]

	set _x [expr ($x1 - $x2) * $sf]
	set _y [expr ($y2 - $y1) * $sf]
	View::slew $_x $_y
    } else {
	eval View::slew $args
    }
}

::itcl::body Display::perspective_angle {args} {
    if {$args == ""} {
	# get perspective angle
	return $perspective_angle
    } else {
	# set perspective angle
	View::perspective $args
    }

    if {$perspective_angle > 0} {
	# turn perspective mode on
	Dm::perspective 1
    } else {
	# turn perspective mode off
	Dm::perspective 0
    }

    refresh
    return $perspective_angle
}

::itcl::body Display::units {args} {
    # Call the view object directly, alteast
    # until I can resolve an apparent timing
    # issue with Itcl. This may well be a misuse
    # of Itcl/Itk.
    eval $view units $args
}

::itcl::body Display::perspective {args} {
    eval Dm::perspective $args

    if {$itk_option(-perspective)} {
	View::perspective [lindex $perspective_angles $perspective_angle_index]
    } else {
	View::perspective -1
    }

    refresh
    return $itk_option(-perspective)
}

if {$tcl_platform(os) != "Windows NT"} {
}
::itcl::body Display::fb_active {args} {
    if {$args == ""} {
	return $itk_option(-fb_active)
    } else {
	eval Dm::fb_active $args
	refresh
    }
}

::itcl::body Display::light {args} {
    eval Dm::light $args
    refresh
    return $itk_option(-light)
}

::itcl::body Display::transparency {args} {
    eval Dm::transparency $args
    refresh
    return $itk_option(-transparency)
}

::itcl::body Display::bounds {args} {
    if {$args == ""} {
	return [Dm::bounds]
    }

    eval Dm::bounds $args
    refresh
}

::itcl::body Display::depthMask {args} {
    eval Dm::depthMask $args
    refresh
    return $itk_option(-depthMask)
}

::itcl::body Display::zbuffer {args} {
    eval Dm::zbuffer $args
    refresh
    return $itk_option(-zbuffer)
}

::itcl::body Display::zclip {args} {
    eval Dm::zclip $args
    refresh
    return $itk_option(-zclip)
}

########################### Protected Methods ###########################
::itcl::body Display::toggle_modelAxesEnable {} {
    if {$itk_option(-modelAxesEnable)} {
	set itk_option(-modelAxesEnable) 0
    } else {
	set itk_option(-modelAxesEnable) 1
    }

    refresh
}

::itcl::body Display::toggle_modelAxesTickEnable {} {
    if {$itk_option(-modelAxesTickEnable)} {
	set itk_option(-modelAxesTickEnable) 0
    } else {
	set itk_option(-modelAxesTickEnable) 1
    }

    refresh
}

::itcl::body Display::toggle_viewAxesEnable {} {
    if {$itk_option(-viewAxesEnable)} {
	set itk_option(-viewAxesEnable) 0
    } else {
	set itk_option(-viewAxesEnable) 1
    }

    refresh
}

::itcl::body Display::toggle_centerDotEnable {} {
    if {$itk_option(-centerDotEnable)} {
	set itk_option(-centerDotEnable) 0
    } else {
	set itk_option(-centerDotEnable) 1
    }

    refresh
}

::itcl::body Display::toggle_scaleEnable {} {
    if {$itk_option(-scaleEnable)} {
	set itk_option(-scaleEnable) 0
    } else {
	set itk_option(-scaleEnable) 1
    }

    refresh
}

::itcl::body Display::? {} {
    return "[View::?][Dm::?]"
}

::itcl::body Display::apropos {key} {
    return "[View::apropos $key] [Dm::apropos $key]"
}

::itcl::body Display::help {args} {
    if {[llength $args] && [lindex $args 0] != {}} {
	if {[catch {eval View::help $args} result]} {
	    set result [eval Dm::help $args]
	}

	return $result
    }

    # list all help messages for QuadDisplay and Db
    return "[View::help][Dm::help]"
}

::itcl::body Display::getUserCmds {} {
    eval lappend cmds [View::getUserCmds] [Dm::getUserCmds]
    return $cmds
}

::itcl::body Display::toggle_zclip {} {
    Dm::toggle_zclip
    refresh
    return $itk_option(-zclip)
}

::itcl::body Display::toggle_zbuffer {} {
    Dm::toggle_zbuffer
    refresh
    return $itk_option(-zbuffer)
}

::itcl::body Display::toggle_light {} {
    Dm::toggle_light
    refresh
    return $itk_option(-light)
}

::itcl::body Display::toggle_perspective {} {
    Dm::toggle_perspective

    if {$itk_option(-perspective)} {
	View::perspective [lindex $perspective_angles $perspective_angle_index]
    } else {
	View::perspective -1
    }

    refresh
    return $itk_option(-perspective)
}

::itcl::body Display::toggle_perspective_angle {} {
    if {$perspective_angle_index == 3} {
	set perspective_angle_index 0
    } else {
	incr perspective_angle_index
    }

    if {$itk_option(-perspective)} {
	View::perspective [lindex $perspective_angles $perspective_angle_index]
    }
}

::itcl::body Display::toggle_transparency {} {
    Dm::toggle_transparency
    refresh
    return $itk_option(-transparency)
}

::itcl::body Display::idle_mode {} {
    # stop receiving motion events
    bind $itk_component(dm) <Motion> {}
}

::itcl::body Display::rotate_mode {_x _y} {
    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_rotation %x %y]; break"
}

::itcl::body Display::translate_mode {_x _y} {
    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_translation %x %y]; break"
}

::itcl::body Display::scale_mode {_x _y} {
    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_scale %x %y]; break"
}

::itcl::body Display::orotate_mode {_x _y func obj kx ky kz} {
    set mouseFunc $func
    set object $obj
    set keyPointX $kx
    set keyPointY $ky
    set keyPointZ $kz

    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_orotation %x %y]; break"
}

::itcl::body Display::oscale_mode {_x _y func obj kx ky kz} {
    set mouseFunc $func
    set object $obj
    set keyPointX $kx
    set keyPointY $ky
    set keyPointZ $kz

    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_oscale %x %y]; break"
}

::itcl::body Display::otranslate_mode {_x _y func obj} {
    set mouseFunc $func
    set object $obj

    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_otranslation %x %y]; break"
}

::itcl::body Display::screen2model {x y} {
    return [eval v2mPoint [screen2view $x $y]]
}

::itcl::body Display::screen2view {x y} {
    set vx [expr {$x * $invWidth * 2.0 - 1.0}]
    set vy [expr {(-$y * $invHeight * 2.0 + 1.0) * $invAspect}]

    return [list $vx $vy 0]
}

::itcl::body Display::constrain_rmode {coord _x _y} {
    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_constrain_rot $coord %x %y]; break"
}

::itcl::body Display::constrain_tmode {coord _x _y} {
    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_constrain_tran $coord %x %y]; break"
}

::itcl::body Display::handle_rotation {_x _y} {
    set dx [expr {$prevMouseY - $_y}]
    set dy [expr {$prevMouseX - $_x}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set dx [expr {$dx * $itk_option(-rscale)}]
    set dy [expr {$dy * $itk_option(-rscale)}]

    catch {vrot $dx $dy 0}
}

::itcl::body Display::handle_translation {_x _y} {
    set dx [expr {$prevMouseX - $_x}]
    set dy [expr {$_y - $prevMouseY}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set size [View::size]
    set dx [expr {$dx * $invWidth * $size}]
    set dy [expr {$dy * $invWidth * $size}]

    catch {vtra $dx $dy 0}
}

::itcl::body Display::handle_scale {_x _y} {
    set dx [expr {$_x - $prevMouseX}]
    set dy [expr {$prevMouseY - $_y}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set dx [expr {$dx * $invWidth * $itk_option(-sscale)}]
    set dy [expr {$dy * $invWidth * $itk_option(-sscale)}]

    if {[expr {abs($dx) > abs($dy)}]} {
	set f [expr 1.0 + $dx]
    } else {
	set f [expr 1.0 + $dy]
    }

    catch {zoom $f}
}

::itcl::body Display::handle_orotation {_x _y} {
    set dx [expr {$_y - $prevMouseY}]
    set dy [expr {$_x - $prevMouseX}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set dx [expr {$dx * $itk_option(-rscale)}]
    set dy [expr {$dy * $itk_option(-rscale)}]
    set model [mrotPoint $dx $dy 0]
    set mx [lindex $model 0]
    set my [lindex $model 1]
    set mz [lindex $model 2]

    catch {$mouseFunc $object $mx $my $mz $keyPointX $keyPointY $keyPointZ}
}

::itcl::body Display::handle_oscale {_x _y} {
    set dx [expr {$_x - $prevMouseX}]
    set dy [expr {$prevMouseY - $_y}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set dx [expr {$dx * $invWidth * $itk_option(-sscale)}]
    set dy [expr {$dy * $invWidth * $itk_option(-sscale)}]

    if {[expr {abs($dx) > abs($dy)}]} {
	set sf [expr 1.0 + $dx]
    } else {
	set sf [expr 1.0 + $dy]
    }

    catch {$mouseFunc $object $sf $keyPointX $keyPointY $keyPointZ}
}

::itcl::body Display::handle_otranslation {_x _y} {
    set dx [expr {$_x - $prevMouseX}]
    set dy [expr {$prevMouseY - $_y}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set size [View::size]
    set dx [expr {$dx * $invWidth * $size}]
    set dy [expr {$dy * $invWidth * $size}]
    set model [mrotPoint $dx $dy 0]
    set mx [lindex $model 0]
    set my [lindex $model 1]
    set mz [lindex $model 2]

    catch {$mouseFunc $object $mx $my $mz}
}

::itcl::body Display::handle_constrain_rot {coord _x _y} {
    set dx [expr {$prevMouseX - $_x}]
    set dy [expr {$_y - $prevMouseY}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set dx [expr {$dx * $itk_option(-rscale)}]
    set dy [expr {$dy * $itk_option(-rscale)}]

    if [expr abs($dx) > abs($dy)] {
	set f $dx
    } else {
	set f $dy
    }
    switch $coord {
	x {
	    catch {rot $f 0 0}
	}
	y {
	    catch {rot 0 $f 0}
	}
	z {
	    catch {rot 0 0 $f}
	}
    }
}

::itcl::body Display::handle_constrain_tran {coord _x _y} {
    set dx [expr {$prevMouseX - $_x}]
    set dy [expr {$_y - $prevMouseY}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set dx [expr {$dx * $invWidth * [View::size]}]
    set dy [expr {$dy * $invWidth * [View::size]}]

    if {[expr {abs($dx) > abs($dy)}]} {
	set f $dx
    } else {
	set f $dy
    }
    switch $coord {
	x {
	    catch {tra $f 0 0}
	}
	y {
	    catch {tra 0 $f 0}
	}
	z {
	    catch {tra 0 0 $f}
	}
    }
}

::itcl::body Display::handle_configure {} {
    Dm::handle_configure
    refresh
}

::itcl::body Display::handle_expose {} {
    refresh
}

::itcl::body Display::doBindings {} {
    global tcl_platform

    if {$tcl_platform(os) != "Windows NT"} {
	bind $itk_component(dm) <Enter> "focus $itk_component(dm);"
    }

    bind $itk_component(dm) <Configure> "[::itcl::code $this handle_configure]; break"
    bind $itk_component(dm) <Expose> "[::itcl::code $this handle_expose]; break"

    # Mouse Bindings
    bind $itk_component(dm) <1> "$this zoom 0.5; break"
    bind $itk_component(dm) <2> "$this slew %x %y; break"
    bind $itk_component(dm) <3> "$this zoom 2.0; break"

    # Idle Mode
    bind $itk_component(dm) <ButtonRelease> "[::itcl::code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Control_L> "[::itcl::code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Control_R> "[::itcl::code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Shift_L> "[::itcl::code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Shift_R> "[::itcl::code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Alt_L> "[::itcl::code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Alt_R> "[::itcl::code $this idle_mode]; break"

    # Rotate Mode
    bind $itk_component(dm) <Control-ButtonPress-1> "[::itcl::code $this rotate_mode %x %y]; break"
    bind $itk_component(dm) <Control-ButtonPress-2> "[::itcl::code $this rotate_mode %x %y]; break"
    bind $itk_component(dm) <Control-ButtonPress-3> "[::itcl::code $this rotate_mode %x %y]; break"

    # Translate Mode
    bind $itk_component(dm) <Shift-ButtonPress-1> "[::itcl::code $this translate_mode %x %y]; break"
    bind $itk_component(dm) <Shift-ButtonPress-2> "[::itcl::code $this translate_mode %x %y]; break"
    bind $itk_component(dm) <Shift-ButtonPress-3> "[::itcl::code $this translate_mode %x %y]; break"

    # Scale Mode
    bind $itk_component(dm) <Control-Shift-ButtonPress-1> "[::itcl::code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Control-Shift-ButtonPress-2> "[::itcl::code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Control-Shift-ButtonPress-3> "[::itcl::code $this scale_mode %x %y]; break"

    # Constrained Rotate Mode
    bind $itk_component(dm) <Alt-Control-ButtonPress-1> "[::itcl::code $this constrain_rmode x %x %y]; break"
    bind $itk_component(dm) <Alt-Control-ButtonPress-2> "[::itcl::code $this constrain_rmode y %x %y]; break"
    bind $itk_component(dm) <Alt-Control-ButtonPress-3> "[::itcl::code $this constrain_rmode z %x %y]; break"

    # Constrained Translate Mode
    bind $itk_component(dm) <Alt-Shift-ButtonPress-1> "[::itcl::code $this constrain_tmode x %x %y]; break"
    bind $itk_component(dm) <Alt-Shift-ButtonPress-2> "[::itcl::code $this constrain_tmode y %x %y]; break"
    bind $itk_component(dm) <Alt-Shift-ButtonPress-3> "[::itcl::code $this constrain_tmode z %x %y]; break"

    # Constrained Scale Mode
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-1> "[::itcl::code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-2> "[::itcl::code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-3> "[::itcl::code $this scale_mode %x %y]; break"

    # Key Bindings
    bind $itk_component(dm) 3 "$this ae \"35 25 0\"; break"
    bind $itk_component(dm) 4 "$this ae \"45 45 0\"; break"
    bind $itk_component(dm) f "$this ae \"0 0 0\"; break"
    bind $itk_component(dm) R "$this ae \"180 0 0\"; break"
    bind $itk_component(dm) r "$this ae \"270 0 0\"; break"
    bind $itk_component(dm) l "$this ae \"90 0 0\"; break"
    bind $itk_component(dm) t "$this ae \"0 90 0\"; break"
    bind $itk_component(dm) b "$this ae \"0 270 0\"; break"
    bind $itk_component(dm) m "[::itcl::code $this toggle_modelAxesEnable]; break"
    bind $itk_component(dm) T "[::itcl::code $this toggle_modelAxesTickEnable]; break"
    bind $itk_component(dm) v "[::itcl::code $this toggle_viewAxesEnable]; break"
    bind $itk_component(dm) <F2> "[::itcl::code $this toggle_zclip]; break"
    bind $itk_component(dm) <F3> "[::itcl::code $this toggle_perspective]; break"
    bind $itk_component(dm) <F4> "[::itcl::code $this toggle_zbuffer]; break"
    bind $itk_component(dm) <F5> "[::itcl::code $this toggle_light]; break"
    bind $itk_component(dm) <F6> "[::itcl::code $this toggle_perspective_angle]; break"
    bind $itk_component(dm) <F10> "[::itcl::code $this toggle_transparency]; break"
}

::itcl::body Display::resetBindings {} {
    Dm::doBindings
    doBindings
}

# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.21
log
@Added a units method.
@
text
@a174 1
	public method fb_active {args}
d176 1
d724 3
a726 5
	if {$tcl_platform(os) != "Windows NT"} {
	    if {$itk_option(-fb_active)} {
		# underlay
		Dm::refreshfb
	    }
d805 1
a805 2
    } elseif {$tcl_platform(os) != "Windows NT"} {
	# overlay
d899 7
a905 5
    if {$tcl_platform(os) != "Windows NT"} {
	eval $geo rt $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
    } else {
	eval $geo rt $v_obj $args
    }
d976 7
a982 5
    if {$tcl_platform(os) != "Windows NT"} {
	eval $geo rtedge $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
    } else {
	eval $geo rtedge $v_obj $args
    }
d1140 7
a1146 7
    ::itcl::body Display::fb_active {args} {
	if {$args == ""} {
	    return $itk_option(-fb_active)
	} else {
	    eval Dm::fb_active $args
	    refresh
	}
@


14.20
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@d164 1
d1117 8
@


14.19
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d269 1
a269 1
        $itk_option(-centerDotEnable) != 1} {
d288 4
a291 4
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d329 4
a332 4
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d352 4
a355 4
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d375 4
a378 4
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d388 1
a388 1
        $itk_option(-viewAxesEnable) != 1} {
d397 1
a397 1
        $itk_option(-modelAxesEnable) != 1} {
d407 1
a407 1
        $itk_option(-viewAxesSize) < $minAxesSize} {
d417 1
a417 1
        $itk_option(-modelAxesSize) < $minAxesSize} {
d436 1
a436 1
        ![string is double $z]} {
d456 1
a456 1
        ![string is double $z]} {
d464 1
a464 1
	                                     [expr {$local2mm * $y}] \
d473 1
a473 1
        $itk_option(-viewAxesLineWidth) < $minAxesLineWidth} {
d483 1
a483 1
        $itk_option(-modelAxesLineWidth) < $minAxesLineWidth} {
d492 1
a492 1
        $itk_option(-viewAxesTripleColor) != 1} {
d501 1
a501 1
        $itk_option(-modelAxesTripleColor) != 1} {
d520 4
a523 4
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d544 3
a546 3
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d566 4
a569 4
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d590 3
a592 3
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d602 1
a602 1
        $itk_option(-modelAxesTickEnable) != 1} {
d612 1
a612 1
        $itk_option(-modelAxesTickLength) < $minAxesTickLength} {
d622 1
a622 1
        $itk_option(-modelAxesTickMajorLength) < $minAxesTickMajorLength} {
d631 1
a631 1
        $itk_option(-modelAxesTickInterval) <= 0} {
d661 3
a663 3
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
d684 3
a686 3
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {
@


14.18
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
d14 1
a14 1
# Library General Public License for more details.
@


14.17
log
@Add support for displaying a scale.
@
text
@d4 1
a4 1
# Copyright (c) 1998-2006 United States Government as represented by
@


14.16
log
@Added code for displaying the viewing parameters.
@
text
@d83 3
d99 3
d182 1
d300 41
d754 4
d1221 10
@


14.15
log
@update copyright to 2006
@
text
@d80 3
d124 3
d316 23
d689 17
@


14.14
log
@Merge of bobWinPort
@
text
@d4 1
a4 1
# Copyright (C) 1998-2005 United States Government as represented by
@


14.13
log
@trailing ws
@
text
@d185 1
d187 5
a191 1
    public method scale_mode {x y}
d198 3
d213 7
a219 2
    protected variable minMouse -20
    protected variable maxMouse 20
d221 6
a226 2
    private variable x ""
    private variable y ""
d821 1
a821 3
::itcl::body Display::rtcheck {args} {
    global tcl_platform

d833 1
a833 1
	return "rtcheck: bad geometry index"
d837 1
a837 1
    eval $geo rtcheck $v_obj $args
d840 3
a842 1
::itcl::body Display::rtarea {args} {
d854 1
a854 1
	return "rtarea: bad geometry index"
d858 1
a858 1
    eval $geo rtarea $v_obj -V $aspect $args
d1204 2
a1205 2
    set x $_x
    set y $_y
d1212 2
a1213 2
    set x $_x
    set y $_y
d1220 2
a1221 2
    set x $_x
    set y $_y
d1227 50
d1278 2
a1279 2
    set x $_x
    set y $_y
d1286 2
a1287 2
    set x $_x
    set y $_y
d1294 2
a1295 2
    set dx [expr {$y - $_y}]
    set dy [expr {$x - $_x}]
d1297 2
a1298 5
    if {$dx < $minMouse} {
	set dx $minMouse
    } elseif {$maxMouse < $dx} {
	set dx $maxMouse
    }
d1300 10
a1309 4
    if {$dy < $minMouse} {
	set dy $minMouse
    } elseif {$maxMouse < $dy} {
	set dy $maxMouse
a1315 4

    #update instance variables x and y
    set x $_x
    set y $_y
d1319 5
a1323 2
    set dx [expr {$x - $_x}]
    set dy [expr {$_y - $y}]
d1325 4
a1328 4
    if {$dx < $minMouse} {
	set dx $minMouse
    } elseif {$maxMouse < $dx} {
	set dx $maxMouse
d1331 4
a1334 4
    if {$dy < $minMouse} {
	set dy $minMouse
    } elseif {$maxMouse < $dy} {
	set dy $maxMouse
d1337 3
a1339 2
    set dx [expr {$dx * $invWidth * [View::size]}]
    set dy [expr {$dy * $invWidth * [View::size]}]
a1341 4

    #update instance variables x and y
    set x $_x
    set y $_y
d1345 2
a1346 2
    set dx [expr {$_x - $x}]
    set dy [expr {$y - $_y}]
d1348 2
a1349 5
    if {$dx < $minMouse} {
	set dx $minMouse
    } elseif {$maxMouse < $dx} {
	set dx $maxMouse
    }
d1351 10
a1360 4
    if {$dy < $minMouse} {
	set dy $minMouse
    } elseif {$maxMouse < $dy} {
	set dy $maxMouse
d1373 1
d1375 88
a1462 3
    #update instance variables x and y
    set x $_x
    set y $_y
d1466 2
a1467 2
    set dx [expr {$x - $_x}]
    set dy [expr {$_y - $y}]
d1469 2
a1470 5
    if {$dx < $minMouse} {
	set dx $minMouse
    } elseif {$maxMouse < $dx} {
	set dx $maxMouse
    }
d1472 10
a1481 4
    if {$dy < $minMouse} {
	set dy $minMouse
    } elseif {$maxMouse < $dy} {
	set dy $maxMouse
a1502 4

    #update instance variables x and y
    set x $_x
    set y $_y
d1506 2
a1507 2
    set dx [expr {$x - $_x}]
    set dy [expr {$_y - $y}]
d1509 2
a1510 5
    if {$dx < $minMouse} {
	set dx $minMouse
    } elseif {$maxMouse < $dx} {
	set dx $maxMouse
    }
d1512 10
a1521 4
    if {$dy < $minMouse} {
	set dy $minMouse
    } elseif {$maxMouse < $dy} {
	set dy $maxMouse
a1542 4

    #update instance variables x and y
    set x $_x
    set y $_y
@


14.12
log
@declare rtarea and rtweight (found by Karen Murray)
@
text
@d657 1
a657 1
	
@


14.11
log
@Mods for rt and rtedge to work on Windows
@
text
@d134 1
d137 1
@


14.11.4.1
log
@add the missing rtarea/rtweight declarations
@
text
@a133 1
    public method rtarea {args}
a135 1
    public method rtweight {args}
@


14.11.4.2
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d657 1
a657 1

@


14.11.2.1
log
@Add methods for rtarea and rtweight
@
text
@a133 1
    public method rtarea {args}
a135 1
    public method rtweight {args}
d802 3
a804 1
::itcl::body Display::rtarea {args} {
d816 1
a816 1
	return "rtarea: bad geometry index"
d820 1
a820 1
    eval $geo rtarea $v_obj -V $aspect $args
d823 1
a823 3
::itcl::body Display::rtcheck {args} {
    global tcl_platform

d835 1
a835 1
	return "rtcheck: bad geometry index"
d839 1
a839 1
    eval $geo rtcheck $v_obj $args
@


14.11.2.2
log
@Added the following methods: orotate_mode, oscale_mode, otranslate_mode, screen2model, screen2view, handle_orotation, handle_oscale and handle_otranslation. Other minor stuff.
@
text
@d185 1
a186 6
    public method translate_mode {x y}
    public method orotate_mode {x y func obj kx ky kz}
    public method oscale_mode {x y func obj kx ky kz}
    public method otranslate_mode {x y func obj}
    public method screen2model {x y}
    public method screen2view {x y}
a192 3
    protected method handle_orotation {x y}
    protected method handle_oscale {x y}
    protected method handle_otranslation {x y}
d205 2
a206 11
    protected variable minMouseDelta -20
    protected variable maxMouseDelta 20

    protected {
	variable keyPointX 0
	variable keyPointY 0
	variable keyPointZ 0

	variable object ""
	variable mouseFunc ""
    }
d208 2
a209 2
    private variable prevMouseX ""
    private variable prevMouseY ""
d1187 2
a1188 2
    set prevMouseX $_x
    set prevMouseY $_y
d1195 2
a1196 2
    set prevMouseX $_x
    set prevMouseY $_y
d1203 2
a1204 2
    set prevMouseX $_x
    set prevMouseY $_y
a1209 50
::itcl::body Display::orotate_mode {_x _y func obj kx ky kz} {
    set mouseFunc $func
    set object $obj
    set keyPointX $kx
    set keyPointY $ky
    set keyPointZ $kz

    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_orotation %x %y]; break"
}

::itcl::body Display::oscale_mode {_x _y func obj kx ky kz} {
    set mouseFunc $func
    set object $obj
    set keyPointX $kx
    set keyPointY $ky
    set keyPointZ $kz

    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_oscale %x %y]; break"
}

::itcl::body Display::otranslate_mode {_x _y func obj} {
    set mouseFunc $func
    set object $obj

    set prevMouseX $_x
    set prevMouseY $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[::itcl::code $this handle_otranslation %x %y]; break"
}

::itcl::body Display::screen2model {x y} {
    return [eval v2mPoint [screen2view $x $y]]
}

::itcl::body Display::screen2view {x y} {
    set vx [expr {$x * $invWidth * 2.0 - 1.0}]
    set vy [expr {(-$y * $invHeight * 2.0 + 1.0) * $invAspect}]

    return [list $vx $vy 0]
}

d1211 2
a1212 2
    set prevMouseX $_x
    set prevMouseY $_y
d1219 2
a1220 2
    set prevMouseX $_x
    set prevMouseY $_y
d1227 2
a1228 2
    set dx [expr {$prevMouseY - $_y}]
    set dy [expr {$prevMouseX - $_x}]
d1230 5
a1234 2
    set prevMouseX $_x
    set prevMouseY $_y
d1236 4
a1239 10
    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
d1246 4
d1253 2
a1254 2
    set dx [expr {$prevMouseX - $_x}]
    set dy [expr {$_y - $prevMouseY}]
d1256 4
a1259 7
    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
d1262 4
a1265 4
    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
d1268 2
a1269 3
    set size [View::size]
    set dx [expr {$dx * $invWidth * $size}]
    set dy [expr {$dy * $invWidth * $size}]
d1272 4
d1279 2
a1280 2
    set dx [expr {$_x - $prevMouseX}]
    set dy [expr {$prevMouseY - $_y}]
d1282 5
a1286 2
    set prevMouseX $_x
    set prevMouseY $_y
d1288 4
a1291 10
    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
a1303 1
}
d1305 3
a1307 27
::itcl::body Display::handle_orotation {_x _y} {
    set dx [expr {$_y - $prevMouseY}]
    set dy [expr {$_x - $prevMouseX}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set dx [expr {$dx * $itk_option(-rscale)}]
    set dy [expr {$dy * $itk_option(-rscale)}]
    set model [mrotPoint $dx $dy 0]
    set mx [lindex $model 0]
    set my [lindex $model 1]
    set mz [lindex $model 2]

    catch {$mouseFunc $object $mx $my $mz $keyPointX $keyPointY $keyPointZ}
d1310 3
a1312 6
::itcl::body Display::handle_oscale {_x _y} {
    set dx [expr {$_x - $prevMouseX}]
    set dy [expr {$prevMouseY - $_y}]

    set prevMouseX $_x
    set prevMouseY $_y
d1314 4
a1317 4
    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
d1320 4
a1323 65
    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set dx [expr {$dx * $invWidth * $itk_option(-sscale)}]
    set dy [expr {$dy * $invWidth * $itk_option(-sscale)}]

    if {[expr {abs($dx) > abs($dy)}]} {
	set sf [expr 1.0 + $dx]
    } else {
	set sf [expr 1.0 + $dy]
    }

    catch {$mouseFunc $object $sf $keyPointX $keyPointY $keyPointZ}
}

::itcl::body Display::handle_otranslation {_x _y} {
    set dx [expr {$_x - $prevMouseX}]
    set dy [expr {$prevMouseY - $_y}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
    }

    set size [View::size]
    set dx [expr {$dx * $invWidth * $size}]
    set dy [expr {$dy * $invWidth * $size}]
    set model [mrotPoint $dx $dy 0]
    set mx [lindex $model 0]
    set my [lindex $model 1]
    set mz [lindex $model 2]

    catch {$mouseFunc $object $mx $my $mz}
}

::itcl::body Display::handle_constrain_rot {coord _x _y} {
    set dx [expr {$prevMouseX - $_x}]
    set dy [expr {$_y - $prevMouseY}]

    set prevMouseX $_x
    set prevMouseY $_y

    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
d1345 4
d1352 2
a1353 2
    set dx [expr {$prevMouseX - $_x}]
    set dy [expr {$_y - $prevMouseY}]
d1355 5
a1359 2
    set prevMouseX $_x
    set prevMouseY $_y
d1361 4
a1364 10
    if {$dx < $minMouseDelta} {
	set dx $minMouseDelta
    } elseif {$maxMouseDelta < $dx} {
	set dx $maxMouseDelta
    }

    if {$dy < $minMouseDelta} {
	set dy $minMouseDelta
    } elseif {$maxMouseDelta < $dy} {
	set dy $maxMouseDelta
d1386 4
@


14.10
log
@add rtarea and rtweight to the mged classes.. no idea if this is right or all that's needed, but seemed reasonable.
@
text
@a733 1

d768 1
a768 3
#    if {$itk_option(-listen) < 0} {
#	return "rt: not listening"
#    }
d785 5
a789 1
    eval $geo rt $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
d803 1
a803 3
    if {$itk_option(-listen) < 0} {
	return "rtcheck: not listening"
    }
d820 1
a820 1
    eval $geo rtcheck $v_obj -F $itk_option(-listen) $args
d843 2
d860 5
a864 1
    eval $geo rtedge $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
@


14.9
log
@Make the idle_mode method public
@
text
@d824 19
d862 19
@


14.8
log
@Add the following options: -primitiveLabels, -primitiveLabelsColor and -usePhony. Add code to limit the mouse dx and dy's that are calculated. This affects rotation, translation and scaling via the mouse
@
text
@a179 1
    protected method idle_mode {}
d181 1
@


14.7
log
@update copyright to 2005
@
text
@d47 1
d50 3
d88 2
d93 3
d203 2
d268 23
d641 9
d846 7
a852 3
	set aview [$geo get_autoview]
	eval [lrange $aview 0 1]
	eval [lrange $aview 2 3]
d1182 19
a1200 3
    set dx [expr ($y - $_y) * $itk_option(-rscale)]
    set dy [expr ($x - $_x) * $itk_option(-rscale)]
    vrot $dx $dy 0
d1208 19
a1226 3
    set dx [expr {($x - $_x) * $invWidth * [View::size]}]
    set dy [expr {($_y - $y) * $invWidth * [View::size]}]
    vtra $dx $dy 0
d1234 17
a1250 2
    set dx [expr {($_x - $x) * $invWidth * $itk_option(-sscale)}]
    set dy [expr {($y - $_y) * $invWidth * $itk_option(-sscale)}]
d1258 1
a1258 1
    zoom $f
d1266 17
a1282 2
    set dx [expr {($x - $_x) * $itk_option(-rscale)}]
    set dy [expr {($_y - $y) * $itk_option(-rscale)}]
d1291 1
a1291 1
	    rot $f 0 0
d1294 1
a1294 1
	    rot 0 $f 0
d1297 1
a1297 1
	    rot 0 0 $f
d1307 17
a1323 2
    set dx [expr {($x - $_x) * $invWidth * [View::size]}]
    set dy [expr {($_y - $y) * $invWidth * [View::size]}]
d1332 1
a1332 1
	    tra $f 0 0
d1335 1
a1335 1
	    tra 0 $f 0
d1338 1
a1338 1
	    tra 0 0 $f
@


14.6
log
@remove the old copyright notice section as it's been supplanted (and copyright is now claimable in the us via assignmgent)
@
text
@d4 1
a4 1
# Copyright (c) 1998-2004 United States Government as represented by
@


14.5
log
@remove the old distribution notice section
@
text
@a30 3
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a29 4
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
a21 1
##                 D I S P L A Y . T C L
@


1.2
log
@apply Bob's provided patches from 20040630.  this includes itcl namespace scoping, windows DLL exporting, and wdb arb edit support
@
text
@d1297 9
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d30 1
a30 1
itk::usual Display {
d65 1
a65 1
class Display {
a133 1
    public method fb_active {args}
d138 3
d192 1
a192 1
body Display::constructor {args} {
d200 1
a200 1
configbody Display::rscale {
d206 1
a206 1
configbody Display::sscale {
d212 1
a212 1
configbody Display::centerDotEnable {
d221 1
a221 1
configbody Display::centerDotColor {
d244 1
a244 1
configbody Display::viewAxesEnable {
d253 1
a253 1
configbody Display::modelAxesEnable {
d262 1
a262 1
configbody Display::viewAxesSize {
d272 1
a272 1
configbody Display::modelAxesSize {
d282 1
a282 1
configbody Display::viewAxesPosition {
d302 1
a302 1
configbody Display::modelAxesPosition {
d328 1
a328 1
configbody Display::viewAxesLineWidth {
d338 1
a338 1
configbody Display::modelAxesLineWidth {
d348 1
a348 1
configbody Display::viewAxesTripleColor {
d357 1
a357 1
configbody Display::modelAxesTripleColor {
d366 1
a366 1
configbody Display::viewAxesColor {
d389 1
a389 1
configbody Display::modelAxesColor {
d412 1
a412 1
configbody Display::viewAxesLabelColor {
d435 1
a435 1
configbody Display::modelAxesLabelColor {
d458 1
a458 1
configbody Display::modelAxesTickEnable {
d467 1
a467 1
configbody Display::modelAxesTickLength {
d477 1
a477 1
configbody Display::modelAxesTickMajorLength {
d487 1
a487 1
configbody Display::modelAxesTickInterval {
d498 1
a498 1
configbody Display::modelAxesTicksPerMajor {
d506 1
a506 1
configbody Display::modelAxesTickColor {
d529 1
a529 1
configbody Display::modelAxesTickMajorColor {
d552 1
a552 1
configbody Display::modelAxesTickThreshold {
d560 1
a560 1
body Display::update {obj} {
d564 3
a566 1
body Display::refresh {} {
d579 7
a585 4
    if {$itk_option(-fb_active) < 2} {
	if {$itk_option(-fb_active)} {
	    # underlay
	    Dm::refreshfb
d634 1
a634 1
    } else {
d638 1
d642 1
a642 1
body Display::mouse_nirt {_x _y {gi 0}} {
d662 1
a662 1
body Display::nirt {args} {
d682 1
a682 1
body Display::vnirt {vx vy {gi 0}} {
d694 1
a694 1
body Display::qray {args} {
d712 1
a712 1
body Display::rt {args} {
d735 1
a735 1
body Display::rtabort {{gi 0}} {
d745 1
a745 1
body Display::rtcheck {args} {
d768 1
a768 1
body Display::rtedge {args} {
d787 1
a787 1
body Display::autoview {{g_index 0}} {
d796 1
a796 1
body Display::attach_view {} {
d800 1
a800 1
body Display::attach_drawable {dg} {
d804 1
a804 1
body Display::detach_view {} {
d808 1
a808 1
body Display::detach_drawable {dg} {
d812 1
a812 1
body Display::add {glist} {
d840 1
a840 1
body Display::remove {glist} {
d854 1
a854 1
body Display::contents {} {
d859 1
a859 1
body Display::slew {args} {
d876 1
a876 1
body Display::perspective_angle {args} {
d897 1
a897 1
body Display::perspective {args} {
d910 8
a917 6
body Display::fb_active {args} {
    if {$args == ""} {
	return $itk_option(-fb_active)
    } else {
	eval Dm::fb_active $args
	refresh
d921 1
a921 1
body Display::light {args} {
d927 1
a927 1
body Display::transparency {args} {
d933 1
a933 1
body Display::bounds {args} {
d942 1
a942 1
body Display::depthMask {args} {
d948 1
a948 1
body Display::zbuffer {args} {
d954 1
a954 1
body Display::zclip {args} {
d961 1
a961 1
body Display::toggle_modelAxesEnable {} {
d971 1
a971 1
body Display::toggle_modelAxesTickEnable {} {
d981 1
a981 1
body Display::toggle_viewAxesEnable {} {
d991 1
a991 1
body Display::toggle_centerDotEnable {} {
d1001 1
a1001 1
body Display::? {} {
d1005 1
a1005 1
body Display::apropos {key} {
d1009 1
a1009 1
body Display::help {args} {
d1022 1
a1022 1
body Display::getUserCmds {} {
d1027 1
a1027 1
body Display::toggle_zclip {} {
d1033 1
a1033 1
body Display::toggle_zbuffer {} {
d1039 1
a1039 1
body Display::toggle_light {} {
d1045 1
a1045 1
body Display::toggle_perspective {} {
d1058 1
a1058 1
body Display::toggle_perspective_angle {} {
d1070 1
a1070 1
body Display::toggle_transparency {} {
d1076 1
a1076 1
body Display::idle_mode {} {
d1081 1
a1081 1
body Display::rotate_mode {_x _y} {
d1086 1
a1086 1
    bind $itk_component(dm) <Motion> "[code $this handle_rotation %x %y]; break"
d1089 1
a1089 1
body Display::translate_mode {_x _y} {
d1094 1
a1094 1
    bind $itk_component(dm) <Motion> "[code $this handle_translation %x %y]; break"
d1097 1
a1097 1
body Display::scale_mode {_x _y} {
d1102 1
a1102 1
    bind $itk_component(dm) <Motion> "[code $this handle_scale %x %y]; break"
d1105 1
a1105 1
body Display::constrain_rmode {coord _x _y} {
d1110 1
a1110 1
    bind $itk_component(dm) <Motion> "[code $this handle_constrain_rot $coord %x %y]; break"
d1113 1
a1113 1
body Display::constrain_tmode {coord _x _y} {
d1118 1
a1118 1
    bind $itk_component(dm) <Motion> "[code $this handle_constrain_tran $coord %x %y]; break"
d1121 1
a1121 1
body Display::handle_rotation {_x _y} {
d1131 1
a1131 1
body Display::handle_translation {_x _y} {
d1141 1
a1141 1
body Display::handle_scale {_x _y} {
d1158 1
a1158 1
body Display::handle_constrain_rot {coord _x _y} {
d1184 1
a1184 1
body Display::handle_constrain_tran {coord _x _y} {
d1210 1
a1210 1
body Display::handle_configure {} {
d1215 1
a1215 1
body Display::handle_expose {} {
d1219 9
a1227 4
body Display::doBindings {} {
    bind $itk_component(dm) <Enter> "focus $itk_component(dm);"
    bind $itk_component(dm) <Configure> "[code $this handle_configure]; break"
    bind $itk_component(dm) <Expose> "[code $this handle_expose]; break"
d1235 7
a1241 7
    bind $itk_component(dm) <ButtonRelease> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Control_L> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Control_R> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Shift_L> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Shift_R> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Alt_L> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Alt_R> "[code $this idle_mode]; break"
d1244 3
a1246 3
    bind $itk_component(dm) <Control-ButtonPress-1> "[code $this rotate_mode %x %y]; break"
    bind $itk_component(dm) <Control-ButtonPress-2> "[code $this rotate_mode %x %y]; break"
    bind $itk_component(dm) <Control-ButtonPress-3> "[code $this rotate_mode %x %y]; break"
d1249 3
a1251 3
    bind $itk_component(dm) <Shift-ButtonPress-1> "[code $this translate_mode %x %y]; break"
    bind $itk_component(dm) <Shift-ButtonPress-2> "[code $this translate_mode %x %y]; break"
    bind $itk_component(dm) <Shift-ButtonPress-3> "[code $this translate_mode %x %y]; break"
d1254 3
a1256 3
    bind $itk_component(dm) <Control-Shift-ButtonPress-1> "[code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Control-Shift-ButtonPress-2> "[code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Control-Shift-ButtonPress-3> "[code $this scale_mode %x %y]; break"
d1259 3
a1261 3
    bind $itk_component(dm) <Alt-Control-ButtonPress-1> "[code $this constrain_rmode x %x %y]; break"
    bind $itk_component(dm) <Alt-Control-ButtonPress-2> "[code $this constrain_rmode y %x %y]; break"
    bind $itk_component(dm) <Alt-Control-ButtonPress-3> "[code $this constrain_rmode z %x %y]; break"
d1264 3
a1266 3
    bind $itk_component(dm) <Alt-Shift-ButtonPress-1> "[code $this constrain_tmode x %x %y]; break"
    bind $itk_component(dm) <Alt-Shift-ButtonPress-2> "[code $this constrain_tmode y %x %y]; break"
    bind $itk_component(dm) <Alt-Shift-ButtonPress-3> "[code $this constrain_tmode z %x %y]; break"
d1269 3
a1271 3
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-1> "[code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-2> "[code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-3> "[code $this scale_mode %x %y]; break"
d1282 9
a1290 9
    bind $itk_component(dm) m "[code $this toggle_modelAxesEnable]; break"
    bind $itk_component(dm) T "[code $this toggle_modelAxesTickEnable]; break"
    bind $itk_component(dm) v "[code $this toggle_viewAxesEnable]; break"
    bind $itk_component(dm) <F2> "[code $this toggle_zclip]; break"
    bind $itk_component(dm) <F3> "[code $this toggle_perspective]; break"
    bind $itk_component(dm) <F4> "[code $this toggle_zbuffer]; break"
    bind $itk_component(dm) <F5> "[code $this toggle_light]; break"
    bind $itk_component(dm) <F6> "[code $this toggle_perspective_angle]; break"
    bind $itk_component(dm) <F10> "[code $this toggle_transparency]; break"
d1293 1
a1293 1
body Display::resetBindings {} {
@

