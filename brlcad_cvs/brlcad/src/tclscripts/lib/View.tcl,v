head	14.17;
access;
symbols
	rel-7-10-4:14.16
	STABLE:14.16.0.2
	stable-branch:14.8
	rel-7-10-2:14.16
	rel-7-10-0:14.15
	rel-7-8-4:14.13
	rel-7-8-2:14.11
	rel-7-8-0:14.11
	trimnurbs-branch:14.11.0.2
	help:14.11
	temp_tag:14.10
	bobWinPort-20051223-freeze:14.8.2.1
	postmerge-20051223-bobWinPort:14.10
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.8
	rel-7-2-2:14.7
	rel-7-2-0:14.7
	rel-7-0-4:14.6
	rel-7-0-2:14.6
	rel-7-0-1:14.6
	opensource-post:14.6
	opensource-pre:1.2
	rel-7-0-branch:1.2.0.2
	rel-7-0:1.2;
locks; strict;
comment	@# @;


14.17
date	2007.12.18.21.06.14;	author bob1961;	state Exp;
branches;
next	14.16;

14.16
date	2007.04.11.18.44.41;	author bob1961;	state Exp;
branches;
next	14.15;

14.15
date	2007.01.23.01.13.50;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2007.01.20.14.37.02;	author brlcad;	state Exp;
branches;
next	14.13;

14.13
date	2006.07.26.15.53.14;	author bob1961;	state Exp;
branches;
next	14.12;

14.12
date	2006.06.29.12.44.02;	author bob1961;	state Exp;
branches;
next	14.11;

14.11
date	2006.01.18.06.46.25;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.12.23.21.26.48;	author bob1961;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.23.04.44.38;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.04.14.14.55.34;	author bob1961;	state Exp;
branches
	14.8.2.1
	14.8.6.1;
next	14.7;

14.7
date	2005.01.30.20.31.13;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2004.12.21.06.44.34;	author morrison;	state Exp;
branches;
next	14.5;

14.5
date	2004.12.21.06.38.23;	author morrison;	state Exp;
branches;
next	14.4;

14.4
date	2004.12.21.06.18.49;	author morrison;	state Exp;
branches;
next	14.3;

14.3
date	2004.12.21.05.45.27;	author morrison;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.21.04.43.00;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.31;	author morrison;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.03.20.42.30;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.20.15.21.01;	author morrison;	state Exp;
branches;
next	;

14.8.2.1
date	2005.12.05.22.47.59;	author bob1961;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.19;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.17
log
@Added ae2dir.
@
text
@#                        V I E W . T C L
# BRL-CAD
#
# Copyright (c) 1998-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
##                 V I E W . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
#
#
# Description -
#	The View class wraps LIBRT's view object.
#
::itcl::class View {
    public variable center {0 0 0}
    public variable ae "0 90 0"
    public variable perspective_angle 0
    public variable coord "v"
    public variable rotate_about "v"
    public variable keypoint "0 0 0"
    public variable units "mm"

    constructor {args} {}
    destructor {}

    public method ae {args}
    public method ae2dir {args}
    public method arot {args}
    public method base2local {args}
    public method center {args}
    public method coord {args}
    public method viewDir {args}
    public method eye {args}
    public method eye_pos {args}
    public method get_viewname {}
    public method invSize {args}
    public method keypoint {args}
    public method local2base {args}
    public method lookat {args}
    public method m2vPoint {args}
    public method model2view {args}
    public method mrot {args}
    public method mrotPoint {args}
    public method observer {args}
    public method orientation {args}
    public method perspective {args}
    public method pmat {args}
    public method pmodel2view {args}
    public method pov {args}
    public method rmat {args}
    public method rot {args}
    public method rotate_about {args}
    public method sca {args}
    public method setview {args}
    public method size {args}
    public method slew {args}
    public method tra {args}
    public method units {args}
    public method v2mPoint {args}
    public method view2model {args}
    public method vrot {args}
    public method vtra {args}
    public method zoom {args}

    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}

    private method init {}
    private method help_init {}

    #private variable view
    protected variable view
    private variable help
}

::itcl::configbody View::center {
    eval View::center $center
}

::itcl::configbody View::ae {
    eval View::ae $ae
}

::itcl::configbody View::perspective_angle {
    View::perspective $perspective_angle
}

::itcl::configbody View::coord {
    View::coord $coord
}

::itcl::configbody View::rotate_about {
    View::rotate_about $rotate_about
}

::itcl::configbody View::keypoint {
    eval View::keypoint $keypoint
}

::itcl::configbody View::units {
    View::units $units
}

::itcl::body View::constructor {args} {
    # first create view object
    set view [v_open $this\_view]

    # process options
    eval configure $args

    View::init
}

::itcl::body View::destructor {} {
    rename $view ""
    catch {delete object $help}
}

::itcl::body View::get_viewname {} {
    return $view
}

::itcl::body View::ae {args} {
    # get ae
    if {$args == ""} {
	return [$view ae]
    }

    # set ae
    eval $view ae $args
    set ae $args

    return
}

::itcl::body View::ae2dir {args} {
    eval $view ae2dir $args
}

::itcl::body View::arot {args} {
    eval $view arot $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::base2local {} {
    $view base2local
}

::itcl::body View::center {args} {
    # get center
    if {$args == ""} {
	return [$view center]
    }

    # set center
    eval $view center $args
    set center $args
    return
}

::itcl::body View::coord {args} {
    # get coord
    if {$args == ""} {
	return $coord
    }

    eval $view coord $args
    set coord $args
    return
}

::itcl::body View::viewDir {args} {
    eval $view viewDir $args
}

::itcl::body View::eye {args} {
    # get eye
    if {$args == ""} {
	return [$view eye]
    }

    eval $view eye $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::eye_pos {args} {
    eval $view eye_pos $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::invSize {args} {
    eval $view invSize $args
}

::itcl::body View::keypoint {args} {
    # get keypoint
    if {$args == ""} {
	return [list [$view keypoint]]
    }

    eval $view keypoint $args
    set keypoint $args
    return
}

::itcl::body View::local2base {} {
    $view local2base
}

::itcl::body View::lookat {args} {
    eval $view lookat $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::m2vPoint {args} {
    eval $view m2vPoint $args
}

::itcl::body View::model2view {args} {
    eval $view model2view $args
}

::itcl::body View::mrot {args} {
    eval $view mrot $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::mrotPoint {args} {
    eval $view mrotPoint $args
}

::itcl::body View::observer {args} {
    eval $view observer $args
}

::itcl::body View::orientation {args} {
    eval $view orientation $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::perspective {args} {
    # get perspective angle
    if {$args == ""} {
	return $perspective_angle
    }

    eval $view perspective $args
    set perspective_angle $args
    return
}

::itcl::body View::pmat {args} {
    eval $view pmat $args
}

::itcl::body View::pmodel2view {args} {
    eval $view pmodel2view $args
}

::itcl::body View::pov {args} {
    eval $view pov $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::rmat {args} {
    # get rotation matrix
    if {$args == ""} {
	return [$view rmat]
    }

    eval $view rmat $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::rot {args} {
    # rotate view
    eval $view rot $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::rotate_about {args} {
    # get rotate_about
    if {$args == ""} {
	return $rotate_about
    }

    eval $view rotate_about $args
    set rotate_about $args
    return
}

::itcl::body View::sca {args} {
    eval $view sca $args
    set size [$view size]
    return
}

::itcl::body View::setview {args} {
    eval $view setview $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::size {args} {
#    eval $view size $args
    return [eval $view size $args]
}

::itcl::body View::slew {args} {
    # slew the view
    eval $view slew $args

    set center [$view center]
    return
}

::itcl::body View::tra {args} {
    # translate view
    eval $view tra $args

    set center [$view center]
    return
}

::itcl::body View::units {args} {
    if {$args == ""} {
	set units [$view units]
	return $units
    }

    # set units
    eval $view units $args
    set units $args
}

::itcl::body View::v2mPoint {args} {
    eval $view v2mPoint $args
}

::itcl::body View::view2model {args} {
    eval $view view2model
}

::itcl::body View::vrot {args} {
    # rotate view
    eval $view rot -v $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::vtra {args} {
    # translate view
    eval $view tra -v $args

    set center [$view center]
    return
}

::itcl::body View::zoom {args} {
    eval $view zoom $args

    set size [$view size]
    return
}

::itcl::body View::? {} {
    return [$help ? 20 4]
}

::itcl::body View::apropos {key} {
    return [$help apropos $key]
}

::itcl::body View::getUserCmds {} {
    return [$help getCmds]
}

::itcl::body View::help {args} {
    return [eval $help get $args]
}

::itcl::body View::init {} {
    eval View::center $center
    eval View::ae $ae
    View::perspective $perspective_angle
    View::coord $coord
    View::rotate_about $rotate_about
    View::keypoint $keypoint
    View::units $units
    View::help_init
}

::itcl::body View::help_init {} {
    set help [cadwidgets::Help #auto]

    $help add ae		{{["az el tw"]} {set/get the azimuth, elevation and twist}}
    $help add ae2dir		{{[-i] az el} {return the view direction}}
    $help add arot		{{x y z angle} {rotate about axis x,y,z by angle (degrees)}}
    $help add center		{{["x y z"]} {set/get the view center}}
    $help add coord		{{[m|v]} {set/get the coodinate system}}
    $help add eye		{{mx my mz} {set eye point to given model coordinates}}
    $help add eye_pos		{{mx my mz} {set eye position to given model coordinates}}
    $help add invSize		{{} {returns the inverse of view size}}
    $help add keypoint		{{[point]} {set/get the keypoint}}
    $help add lookat		{{x y z} {adjust view to look at given coordinates}}
    $help add model2view	{{} {returns the model2view matrix}}
    $help add mrot		{{x y z} {rotate view using model x,y,z}}
    $help add mrotPoint		{{x y z} {rotate point into model space}}
    $help add orientation	{{x y z w} {set view direction from quaternion}}
    $help add perspective	{{[angle]} {set/get the perspective angle}}
    $help add pmat		{{} {get the perspective matrix}}
    $help add pmodel2view	{{} {get the pmodel2view matrix}}
    $help add pov		{{args}	{experimental:  set point-of-view}}
    $help add rmat		{{} {get/set the rotation matrix}}
    $help add rot		{{"x y z"} {rotate the view}}
    $help add rotate_about	{{[e|k|m|v]} {set/get the rotate about point}}
    $help add sca		{{sfactor} {scale by sfactor}}
    $help add setview		{{x y z} {set the view given angles x, y, and z in degrees}}
    $help add size		{{vsize} {set/get the view size}}
    $help add slew		{{"x y"} {slew the view}}
    $help add tra		{{[-v|-m] "x y z"} {translate the view}}
    $help add units		{{[unit]} {get/set the local units}}
    $help add viewDir		{{[-i]} {return the view direction}}
    $help add vrot		{{xdeg ydeg zdeg} {rotate viewpoint}}
    $help add vtra		{{"x y z"} {translate the view}}
    $help add zoom		{{sf} {zoom view by specified scale factor}}
}

# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.16
log
@Mods to help keep thing in sync wrt units.
@
text
@d48 1
d159 4
d451 1
d477 1
a477 1
    $help add viewDir		{{[-1]} {return the view direction}}
@


14.15
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d93 2
a94 1
    private variable view
a372 1
    # get units
d374 1
@


14.14
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
d14 1
a14 1
# Library General Public License for more details.
@


14.13
log
@Add method/wrapper for the viewDir command.
@
text
@d4 1
a4 1
# Copyright (c) 1998-2006 United States Government as represented by
@


14.12
log
@Modified the ae method to call the view object's ae command when getting the azel.
@
text
@d53 1
d193 4
d471 1
@


14.11
log
@update copyright to 2006
@
text
@d147 1
a147 1
	return $ae
d153 1
@


14.10
log
@Merge of bobWinPort
@
text
@d4 1
a4 1
# Copyright (C) 1998-2005 United States Government as represented by
@


14.9
log
@trailing ws
@
text
@d60 1
d63 1
d79 1
d239 4
d255 4
d377 4
d450 1
@


14.8
log
@Remove carriage-return newline sequences
@
text
@d428 1
a428 1
    $help add eye		{{mx my mz} {set eye point to given model coordinates}}	
@


14.8.2.1
log
@Added m2vPoint, v2mPoint and mrotPoint methods
@
text
@a59 1
    public method m2vPoint {args}
a61 1
    public method mrotPoint {args}
a76 1
    public method v2mPoint {args}
a235 4
::itcl::body View::m2vPoint {args} {
    eval $view m2vPoint $args
}

a247 4
::itcl::body View::mrotPoint {args} {
    eval $view mrotPoint $args
}

a365 4
::itcl::body View::v2mPoint {args} {
    eval $view v2mPoint $args
}

a434 1
    $help add mrotPoint		{{x y z} {rotate point into model space}}
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d428 1
a428 1
    $help add eye		{{mx my mz} {set eye point to given model coordinates}}
@


14.7
log
@update copyright to 2005
@
text
@d22 431
a452 431
##                 V I E W . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
#
#
# Description -
#	The View class wraps LIBRT's view object.
#
::itcl::class View {
    public variable center {0 0 0}
    public variable ae "0 90 0"
    public variable perspective_angle 0
    public variable coord "v"
    public variable rotate_about "v"
    public variable keypoint "0 0 0"
    public variable units "mm"

    constructor {args} {}
    destructor {}

    public method ae {args}
    public method arot {args}
    public method base2local {args}
    public method center {args}
    public method coord {args}
    public method eye {args}
    public method eye_pos {args}
    public method get_viewname {}
    public method invSize {args}
    public method keypoint {args}
    public method local2base {args}
    public method lookat {args}
    public method model2view {args}
    public method mrot {args}
    public method observer {args}
    public method orientation {args}
    public method perspective {args}
    public method pmat {args}
    public method pmodel2view {args}
    public method pov {args}
    public method rmat {args}
    public method rot {args}
    public method rotate_about {args}
    public method sca {args}
    public method setview {args}
    public method size {args}
    public method slew {args}
    public method tra {args}
    public method units {args}
    public method view2model {args}
    public method vrot {args}
    public method vtra {args}
    public method zoom {args}

    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}

    private method init {}
    private method help_init {}

    private variable view
    private variable help
}

::itcl::configbody View::center {
    eval View::center $center
}

::itcl::configbody View::ae {
    eval View::ae $ae
}

::itcl::configbody View::perspective_angle {
    View::perspective $perspective_angle
}

::itcl::configbody View::coord {
    View::coord $coord
}

::itcl::configbody View::rotate_about {
    View::rotate_about $rotate_about
}

::itcl::configbody View::keypoint {
    eval View::keypoint $keypoint
}

::itcl::configbody View::units {
    View::units $units
}

::itcl::body View::constructor {args} {
    # first create view object
    set view [v_open $this\_view]

    # process options
    eval configure $args

    View::init
}

::itcl::body View::destructor {} {
    rename $view ""
    catch {delete object $help}
}

::itcl::body View::get_viewname {} {
    return $view
}

::itcl::body View::ae {args} {
    # get ae
    if {$args == ""} {
	return $ae
    }

    # set ae
    eval $view ae $args
    set ae $args
    return
}

::itcl::body View::arot {args} {
    eval $view arot $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::base2local {} {
    $view base2local
}

::itcl::body View::center {args} {
    # get center
    if {$args == ""} {
	return [$view center]
    }

    # set center
    eval $view center $args
    set center $args
    return
}

::itcl::body View::coord {args} {
    # get coord
    if {$args == ""} {
	return $coord
    }

    eval $view coord $args
    set coord $args
    return
}

::itcl::body View::eye {args} {
    # get eye
    if {$args == ""} {
	return [$view eye]
    }

    eval $view eye $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::eye_pos {args} {
    eval $view eye_pos $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::invSize {args} {
    eval $view invSize $args
}

::itcl::body View::keypoint {args} {
    # get keypoint
    if {$args == ""} {
	return [list [$view keypoint]]
    }

    eval $view keypoint $args
    set keypoint $args
    return
}

::itcl::body View::local2base {} {
    $view local2base
}

::itcl::body View::lookat {args} {
    eval $view lookat $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::model2view {args} {
    eval $view model2view $args
}

::itcl::body View::mrot {args} {
    eval $view mrot $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::observer {args} {
    eval $view observer $args
}

::itcl::body View::orientation {args} {
    eval $view orientation $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::perspective {args} {
    # get perspective angle
    if {$args == ""} {
	return $perspective_angle
    }

    eval $view perspective $args
    set perspective_angle $args
    return
}

::itcl::body View::pmat {args} {
    eval $view pmat $args
}

::itcl::body View::pmodel2view {args} {
    eval $view pmodel2view $args
}

::itcl::body View::pov {args} {
    eval $view pov $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::rmat {args} {
    # get rotation matrix
    if {$args == ""} {
	return [$view rmat]
    }

    eval $view rmat $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::rot {args} {
    # rotate view
    eval $view rot $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::rotate_about {args} {
    # get rotate_about
    if {$args == ""} {
	return $rotate_about
    }

    eval $view rotate_about $args
    set rotate_about $args
    return
}

::itcl::body View::sca {args} {
    eval $view sca $args
    set size [$view size]
    return
}

::itcl::body View::setview {args} {
    eval $view setview $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::size {args} {
#    eval $view size $args
    return [eval $view size $args]
}

::itcl::body View::slew {args} {
    # slew the view
    eval $view slew $args

    set center [$view center]
    return
}

::itcl::body View::tra {args} {
    # translate view
    eval $view tra $args

    set center [$view center]
    return
}

::itcl::body View::units {args} {
    # get units
    if {$args == ""} {
	return $units
    }

    # set units
    eval $view units $args
    set units $args
}

::itcl::body View::view2model {args} {
    eval $view view2model
}

::itcl::body View::vrot {args} {
    # rotate view
    eval $view rot -v $args

    set ae [$view ae]
    set center [$view center]
    return
}

::itcl::body View::vtra {args} {
    # translate view
    eval $view tra -v $args

    set center [$view center]
    return
}

::itcl::body View::zoom {args} {
    eval $view zoom $args

    set size [$view size]
    return
}

::itcl::body View::? {} {
    return [$help ? 20 4]
}

::itcl::body View::apropos {key} {
    return [$help apropos $key]
}

::itcl::body View::getUserCmds {} {
    return [$help getCmds]
}

::itcl::body View::help {args} {
    return [eval $help get $args]
}

::itcl::body View::init {} {
    eval View::center $center
    eval View::ae $ae
    View::perspective $perspective_angle
    View::coord $coord
    View::rotate_about $rotate_about
    View::keypoint $keypoint
    View::units $units
    View::help_init
}

::itcl::body View::help_init {} {
    set help [cadwidgets::Help #auto]

    $help add ae		{{["az el tw"]} {set/get the azimuth, elevation and twist}}
    $help add arot		{{x y z angle} {rotate about axis x,y,z by angle (degrees)}}
    $help add center		{{["x y z"]} {set/get the view center}}
    $help add coord		{{[m|v]} {set/get the coodinate system}}
    $help add eye		{{mx my mz} {set eye point to given model coordinates}}	
    $help add eye_pos		{{mx my mz} {set eye position to given model coordinates}}
    $help add invSize		{{} {returns the inverse of view size}}
    $help add keypoint		{{[point]} {set/get the keypoint}}
    $help add lookat		{{x y z} {adjust view to look at given coordinates}}
    $help add model2view	{{} {returns the model2view matrix}}
    $help add mrot		{{x y z} {rotate view using model x,y,z}}
    $help add orientation	{{x y z w} {set view direction from quaternion}}
    $help add perspective	{{[angle]} {set/get the perspective angle}}
    $help add pmat		{{} {get the perspective matrix}}
    $help add pmodel2view	{{} {get the pmodel2view matrix}}
    $help add pov		{{args}	{experimental:  set point-of-view}}
    $help add rmat		{{} {get/set the rotation matrix}}
    $help add rot		{{"x y z"} {rotate the view}}
    $help add rotate_about	{{[e|k|m|v]} {set/get the rotate about point}}
    $help add sca		{{sfactor} {scale by sfactor}}
    $help add setview		{{x y z} {set the view given angles x, y, and z in degrees}}
    $help add size		{{vsize} {set/get the view size}}
    $help add slew		{{"x y"} {slew the view}}
    $help add tra		{{[-v|-m] "x y z"} {translate the view}}
    $help add units		{{[unit]} {get/set the local units}}
    $help add vrot		{{xdeg ydeg zdeg} {rotate viewpoint}}
    $help add vtra		{{"x y z"} {translate the view}}
    $help add zoom		{{sf} {zoom view by specified scale factor}}
}
@


14.6
log
@remove the old distribution notice section
@
text
@d4 1
a4 1
# Copyright (c) 1998-2004 United States Government as represented by
@


14.5
log
@remove the old copyright notice section
@
text
@a30 4
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
@


14.4
log
@they should have received a copy of the LGPL with LGPL'd files
@
text
@a35 3
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
@


14.3
log
@s/GNU Library General/GNU Lesser General/g
@
text
@d17 2
a18 2
# You should have received a copy of the GNU General Public License
# along with this file; see the file named COPYING for more
@


14.2
log
@assign copyright and LGPL
@
text
@d8 1
a8 1
# modify it under the terms of the GNU Library General Public License
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d1 21
@


1.2
log
@apply Bob's provided patches from 20040630.  this includes itcl namespace scoping, windows DLL exporting, and wdb arb edit support
@
text
@d439 9
@


1.1
log
@Vast reorganization begins.  Sources moved from top-level directories into src/.
@
text
@d22 1
a22 1
class View {
d80 1
a80 1
configbody View::center {
d84 1
a84 1
configbody View::ae {
d88 1
a88 1
configbody View::perspective_angle {
d92 1
a92 1
configbody View::coord {
d96 1
a96 1
configbody View::rotate_about {
d100 1
a100 1
configbody View::keypoint {
d104 1
a104 1
configbody View::units {
d108 1
a108 1
body View::constructor {args} {
d118 1
a118 1
body View::destructor {} {
d123 1
a123 1
body View::get_viewname {} {
d127 1
a127 1
body View::ae {args} {
d139 1
a139 1
body View::arot {args} {
d147 1
a147 1
body View::base2local {} {
d151 1
a151 1
body View::center {args} {
d154 1
a154 1
      return [$view center]
d163 1
a163 1
body View::coord {args} {
d174 1
a174 1
body View::eye {args} {
d187 1
a187 1
body View::eye_pos {args} {
d195 1
a195 1
body View::invSize {args} {
d199 1
a199 1
body View::keypoint {args} {
d202 1
a202 1
        return [list [$view keypoint]]
d210 1
a210 1
body View::local2base {} {
d214 1
a214 1
body View::lookat {args} {
d222 1
a222 1
body View::model2view {args} {
d226 1
a226 1
body View::mrot {args} {
d234 1
a234 1
body View::observer {args} {
d238 1
a238 1
body View::orientation {args} {
d246 1
a246 1
body View::perspective {args} {
d257 1
a257 1
body View::pmat {args} {
d261 1
a261 1
body View::pmodel2view {args} {
d265 1
a265 1
body View::pov {args} {
d273 1
a273 1
body View::rmat {args} {
d286 1
a286 1
body View::rot {args} {
d295 1
a295 1
body View::rotate_about {args} {
d306 1
a306 1
body View::sca {args} {
d312 1
a312 1
body View::setview {args} {
d320 2
a321 2
body View::size {args} {
    # eval $view size $args
d325 1
a325 1
body View::slew {args} {
d333 1
a333 1
body View::tra {args} {
d341 1
a341 1
body View::units {args} {
d352 1
a352 1
body View::view2model {args} {
d356 1
a356 1
body View::vrot {args} {
d365 1
a365 1
body View::vtra {args} {
d373 1
a373 1
body View::zoom {args} {
d380 1
a380 1
body View::? {} {
d384 1
a384 1
body View::apropos {key} {
d388 1
a388 1
body View::getUserCmds {} {
d392 1
a392 1
body View::help {args} {
d396 1
a396 1
body View::init {} {
d407 1
a407 1
body View::help_init {} {
@

