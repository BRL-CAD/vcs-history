head	1.6;
access;
symbols
	rel-7-10-4:1.6
	STABLE:1.6.0.2
	rel-7-10-2:1.6
	rel-7-10-0:1.6
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.3.0.2
	help:1.3
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1.2.1
	postmerge-20051223-bobWinPort:1.2
	bobWinPort:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2007.01.27.01.41.52;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.23.01.13.51;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.20.14.37.05;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.31.02.08.24;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.23.21.26.49;	author bob1961;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.14.14.17.20;	author bob1961;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.09.14.14.17.20;	author bob1961;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@#                 T O G G L E A R R O W . I T K
# BRL-CAD
#
# Copyright (c) 2006-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
#
# Description:
#    An arrow that toggle things open an closed.
#
##############################################################

#
# Default resources.
#


#
# Usual options.
#
itk::usual swidgets::Togglearrow {
#    keep -togglestate
#    keep -color -outline -disabledcolor -disabledoutline \
#	    -state \
#	    -borderwidth -relief
}


# ------------------------------------------------------------
#                     TOGGLEARROW
# ------------------------------------------------------------
itcl::class swidgets::Togglearrow {
    inherit itk::Widget

    constructor {args} {}
    destructor {}

    itk_option define -color color Color "blue"
    itk_option define -outline outline Outline "grey"
    itk_option define -disabledcolor disabledColor DisalbledColor "grey"
    itk_option define -disabledoutline disabledOutline DisalbledOutline "black"

    itk_option define -command command Command {}
    itk_option define -state state State normal
    itk_option define -togglestate toggleState ToggleState "closed"

    public {
    }

    private {
	method _cleararrows {}
	method _createpolys {}
	method _open {}
	method _close {}
    }
}

#
# Provide a lowercased access method for the Togglearrow class.
#
proc ::swidgets::togglearrow {args} {
    uplevel ::swidgets::Togglearrow $args
}

# ------------------------------------------------------------
#                      CONSTRUCTOR
# ------------------------------------------------------------
::itcl::body swidgets::Togglearrow::constructor {args} {

    itk_component add frame {
	frame $itk_interior.frame
    } {
	usual
	keep -borderwidth -relief
    }

    itk_component add closed {
	canvas $itk_component(frame).closed -width 16 -height 16 \
		-highlightthickness 1
    }

    itk_component add open {
	canvas $itk_component(frame).open -width 16 -height 16 \
		-highlightthickness 1
    }

    #
    # Initialize the widget based on the command line options
    #
    eval itk_initialize $args

    _createpolys
    pack $itk_component(frame) -fill both -expand yes
}

# ------------------------------------------------------------
#                       DESTRUCTOR
# ------------------------------------------------------------
::itcl::body swidgets::Togglearrow::destructor {} {
}

# ------------------------------------------------------------
#                        OPTIONS
# ------------------------------------------------------------
::itcl::configbody swidgets::Togglearrow::color {
    _cleararrows
    _createpolys
}

::itcl::configbody swidgets::Togglearrow::outline {
    _cleararrows
    _createpolys
}

::itcl::configbody swidgets::Togglearrow::command {}

::itcl::configbody swidgets::Togglearrow::state {
    switch $itk_option(-state) {
	normal -
	disabled {
	    _cleararrows
	    _createpolys
	}
	default {
	    error "bad state option \"$itk_option(-state)\":\
		    should be disabled or normal"
	}
    }
}

::itcl::configbody swidgets::Togglearrow::togglestate {
    switch $itk_option(-togglestate) {
	"open" {
	    _open
	}
	"closed" {
	    _close
	}
	default {
	    error "bad togglestate option \"$itk_option(-togglestate)\":\
		    should be open or closed"
	}
    }
}

# ------------------------------------------------------------
#                        METHODS
# ------------------------------------------------------------
::itcl::body swidgets::Togglearrow::_cleararrows {} {
    # clear canvases
    foreach tag [$itk_component(closed) find all] {
	$itk_component(closed) delete $tag
    }
    foreach tag [$itk_component(open) find all] {
	$itk_component(open) delete $tag
    }
}

::itcl::body swidgets::Togglearrow::_createpolys {} {
    # pick appropriate colors
    set color $itk_option(-color)
    set outline $itk_option(-outline)
    if {$itk_option(-state) == "disabled"} {
	set color $itk_option(-disabledcolor)
	set outline $itk_option(-disabledoutline)
    }

    # create closed arrow
    $itk_component(closed) create polygon 2 2 14 8 2 14 2 2 \
	    -fill $color -outline $outline \
	    -width 1 -tag closed

    # bind click for closed arrow
    bind $itk_component(closed) <ButtonPress-1> [::itcl::code $this _open]

    # create open arrow
    $itk_component(open) create polygon 2 2 14 2 8 14 2 2 \
	    -fill $color -outline $outline \
	    -width 1 -tag open

    # bind click for open arrow
    bind $itk_component(open) <ButtonPress-1> [::itcl::code $this _close]

    # decide which one to show
    switch -- $itk_option(-togglestate) {
	"closed" {pack $itk_component(closed) -fill both}
	"open"   {pack $itk_component(open) -fill both}
    }
}

::itcl::body swidgets::Togglearrow::_open {} {
    # if disabled ... do nothing
    if {$itk_option(-state) == "disabled"} {return}

    # remove closed arrow and replace with open arrow
    pack forget $itk_component(closed)
    pack $itk_component(open) -fill both

    # set proper toggle state
    set itk_option(-togglestate) "open"

    # perform command
    if {$itk_option(-command) != {}} {
	eval $itk_option(-command)
    }
}

::itcl::body swidgets::Togglearrow::_close {} {
    # if disabled ... do nothing
    if {$itk_option(-state) == "disabled"} {return}

    # remove open arrow and replace with open arrow
    pack forget $itk_component(open)
    pack $itk_component(closed) -fill both

    # set proper toggle state
    set itk_option(-togglestate) "closed"

    # perform command
    if {$itk_option(-command) != {}} {
	eval $itk_option(-command)
    }
}

# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


1.5
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d117 1
a117 1
#                        OPTIONS 
d161 1
a161 1
#                        METHODS 
d186 1
a186 1
    
d194 1
a194 1
	    
@


1.4
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
@


1.3
log
@to quote Bob's commit to src/archer/archer "All of archer including the tclscripts is assigned to u.s. government and should be under the LGPL" so add the boilerplate legal header.  the COPYING file requires this regardless for all commits whether implicit or explicit.  also add the boilerplate variables footer while we're at it.
@
text
@d4 1
a4 1
# Copyright (c) 2006 United States Government as represented by
@


1.2
log
@Merge of bobWinPort
@
text
@d1 19
a19 4
# TYPE: tcltk
##############################################################
# 
# togglearrow.itk
d21 1
a21 1
##############################################################
d239 9
@


1.1
log
@file togglearrow.itk was initially added on branch bobWinPort.
@
text
@d1 223
@


1.1.2.1
log
@Initial check-in
@
text
@a0 223
# TYPE: tcltk
##############################################################
# 
# togglearrow.itk
#
##############################################################
#
# Description:
#    An arrow that toggle things open an closed.
#
##############################################################

#
# Default resources.
#


#
# Usual options.
#
itk::usual swidgets::Togglearrow {
#    keep -togglestate
#    keep -color -outline -disabledcolor -disabledoutline \
#	    -state \
#	    -borderwidth -relief
}


# ------------------------------------------------------------
#                     TOGGLEARROW
# ------------------------------------------------------------
itcl::class swidgets::Togglearrow {
    inherit itk::Widget

    constructor {args} {}
    destructor {}

    itk_option define -color color Color "blue"
    itk_option define -outline outline Outline "grey"
    itk_option define -disabledcolor disabledColor DisalbledColor "grey"
    itk_option define -disabledoutline disabledOutline DisalbledOutline "black"

    itk_option define -command command Command {}
    itk_option define -state state State normal
    itk_option define -togglestate toggleState ToggleState "closed"

    public {
    }

    private {
	method _cleararrows {}
	method _createpolys {}
	method _open {}
	method _close {}
    }
}

#
# Provide a lowercased access method for the Togglearrow class.
#
proc ::swidgets::togglearrow {args} {
    uplevel ::swidgets::Togglearrow $args
}

# ------------------------------------------------------------
#                      CONSTRUCTOR
# ------------------------------------------------------------
::itcl::body swidgets::Togglearrow::constructor {args} {

    itk_component add frame {
	frame $itk_interior.frame
    } {
	usual
	keep -borderwidth -relief
    }

    itk_component add closed {
	canvas $itk_component(frame).closed -width 16 -height 16 \
		-highlightthickness 1
    }

    itk_component add open {
	canvas $itk_component(frame).open -width 16 -height 16 \
		-highlightthickness 1
    }

    #
    # Initialize the widget based on the command line options
    #
    eval itk_initialize $args

    _createpolys
    pack $itk_component(frame) -fill both -expand yes
}

# ------------------------------------------------------------
#                       DESTRUCTOR
# ------------------------------------------------------------
::itcl::body swidgets::Togglearrow::destructor {} {
}

# ------------------------------------------------------------
#                        OPTIONS 
# ------------------------------------------------------------
::itcl::configbody swidgets::Togglearrow::color {
    _cleararrows
    _createpolys
}

::itcl::configbody swidgets::Togglearrow::outline {
    _cleararrows
    _createpolys
}

::itcl::configbody swidgets::Togglearrow::command {}

::itcl::configbody swidgets::Togglearrow::state {
    switch $itk_option(-state) {
	normal -
	disabled {
	    _cleararrows
	    _createpolys
	}
	default {
	    error "bad state option \"$itk_option(-state)\":\
		    should be disabled or normal"
	}
    }
}

::itcl::configbody swidgets::Togglearrow::togglestate {
    switch $itk_option(-togglestate) {
	"open" {
	    _open
	}
	"closed" {
	    _close
	}
	default {
	    error "bad togglestate option \"$itk_option(-togglestate)\":\
		    should be open or closed"
	}
    }
}

# ------------------------------------------------------------
#                        METHODS 
# ------------------------------------------------------------
::itcl::body swidgets::Togglearrow::_cleararrows {} {
    # clear canvases
    foreach tag [$itk_component(closed) find all] {
	$itk_component(closed) delete $tag
    }
    foreach tag [$itk_component(open) find all] {
	$itk_component(open) delete $tag
    }
}

::itcl::body swidgets::Togglearrow::_createpolys {} {
    # pick appropriate colors
    set color $itk_option(-color)
    set outline $itk_option(-outline)
    if {$itk_option(-state) == "disabled"} {
	set color $itk_option(-disabledcolor)
	set outline $itk_option(-disabledoutline)
    }

    # create closed arrow
    $itk_component(closed) create polygon 2 2 14 8 2 14 2 2 \
	    -fill $color -outline $outline \
	    -width 1 -tag closed
    
    # bind click for closed arrow
    bind $itk_component(closed) <ButtonPress-1> [::itcl::code $this _open]

    # create open arrow
    $itk_component(open) create polygon 2 2 14 2 8 14 2 2 \
	    -fill $color -outline $outline \
	    -width 1 -tag open
	    
    # bind click for open arrow
    bind $itk_component(open) <ButtonPress-1> [::itcl::code $this _close]

    # decide which one to show
    switch -- $itk_option(-togglestate) {
	"closed" {pack $itk_component(closed) -fill both}
	"open"   {pack $itk_component(open) -fill both}
    }
}

::itcl::body swidgets::Togglearrow::_open {} {
    # if disabled ... do nothing
    if {$itk_option(-state) == "disabled"} {return}

    # remove closed arrow and replace with open arrow
    pack forget $itk_component(closed)
    pack $itk_component(open) -fill both

    # set proper toggle state
    set itk_option(-togglestate) "open"

    # perform command
    if {$itk_option(-command) != {}} {
	eval $itk_option(-command)
    }
}

::itcl::body swidgets::Togglearrow::_close {} {
    # if disabled ... do nothing
    if {$itk_option(-state) == "disabled"} {return}

    # remove open arrow and replace with open arrow
    pack forget $itk_component(open)
    pack $itk_component(closed) -fill both

    # set proper toggle state
    set itk_option(-togglestate) "closed"

    # perform command
    if {$itk_option(-command) != {}} {
	eval $itk_option(-command)
    }
}
@

