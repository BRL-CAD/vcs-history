head	1.6;
access;
symbols
	rel-7-10-4:1.6
	STABLE:1.6.0.2
	rel-7-10-2:1.6
	rel-7-10-0:1.6
	rel-7-8-4:1.3
	rel-7-8-2:1.3
	rel-7-8-0:1.3
	trimnurbs-branch:1.3.0.2
	help:1.3
	temp_tag:1.2
	bobWinPort-20051223-freeze:1.1.2.1
	postmerge-20051223-bobWinPort:1.2
	bobWinPort:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2007.01.27.01.41.52;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.23.01.13.52;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.20.14.37.05;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.31.02.08.24;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.23.21.26.49;	author bob1961;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.14.14.17.20;	author bob1961;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.09.14.14.17.20;	author bob1961;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ws. lots and lots of ws.  see sh/ws.sh for details (cases 'abcdeg').
@
text
@#                     T O O L T I P . I T K
# BRL-CAD
#
# Copyright (c) 2006-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file; see the file named COPYING for more
# information.
#
###
#
# Description:
#    This is a tool tip displayer.
#
##############################################################

namespace eval swidgets::tooltiprandom {
    # Create a variable inside the namespace
    variable seed [clock seconds]
}

proc swidgets::tooltiprandom::init {seed} {
    set ::swidgets::tooltiprandom::seed $seed
}

proc swidgets::tooltiprandom::random {} {
    variable seed
    set seed [expr ($seed*9301 + 49297) % 233280]
    return [expr $seed/double(233280)]
}

proc swidgets::tooltiprandom::range {range} {
    expr int([random]*$range)
}

itcl::class swidgets::Tooltip {
    inherit itk::Toplevel

    itk_option define -geometry geometry Geometry ""
    itk_option define -title title Title ""
    itk_option define -tips tips Tips ""
    itk_option define -parent parent Parent "."
    itk_option define -showtip showTip Boolean 1
    itk_option define -introcommand introCommand Command {}
    itk_option define -closecommand closeCommand Command {}

    constructor {args} {}
    destructor {}

    public {
	method Activate     {}
	method Hide         {}
	method Close        {}
    }

    private {
	variable index 0
	common c_tipimg [image create photo -file [file join $::swidgets::library "images" tip.gif]]

	method next {}
	method intro {}
    }
}

#
# Provide a lowercased access method for the Tooltip class.
#
proc ::swidgets::tooltip {args} {
    uplevel ::swidgets::Tooltip $args
}

# ------------------------------------------------------------
#                      CONSTRUCTOR
# ------------------------------------------------------------
::itcl::body swidgets::Tooltip::constructor {args} {

    # image
    itk_component add image {
	::label $itk_interior.image
    } {
	keep -image
    }

    set frm [::frame $itk_interior.frm -relief groove\
	    -borderwidth 1]

    # textm & scrollbar
    itk_component add text {
	::text $frm.text -wrap word \
		-state disabled \
		-height 15 -width 60
    } {
	keep -font
	rename -background -textbackground textBackground Background
    }

    itk_component add scroll {
	::scrollbar $frm.scroll -orient vertical
    } {
    }

    $itk_component(text) configure -yscrollcommand "$itk_component(scroll) set"
    $itk_component(scroll) configure -command "$itk_component(text) yview"

    # checkbutton
    itk_component add check {
	::checkbutton $itk_interior.check -text "Show tips at startup" \
		-onvalue 1 -offvalue 0 -variable [::itcl::scope itk_option(-showtip)]
    } {
	keep -selectcolor
    }

    # buttons
    ::frame $itk_interior.sep -borderwidth 2 -height 2 -relief sunken
    itk_component add bbox {
	::frame $itk_interior.bbox
    } {
    }

    itk_component add next {
	::button $itk_component(bbox).next -text "Next" \
		-width 15 -command [::itcl::code $this next]
    } {
    }

    itk_component add intro {
	::button $itk_component(bbox).intro -text "Introduction" \
		-width 15 -command [::itcl::code $this intro]
    } {
    }

    itk_component add close {
	::button $itk_component(bbox).close -text "Close" \
		-width 15 -command [::itcl::code $this Close]
    } {
    }

    #
    # pack widgets
    #
    pack $itk_component(text)   -side left -expand yes -fill both -pady 3
    pack $itk_component(scroll) -side right -fill y
    grid $itk_component(check)  -column 1 -row 1 -sticky w
    grid $frm                   -column 1 -row 0  -sticky news
    grid $itk_component(image)  -column 0 -row 0 -sticky n -rowspan 2 -pady 3

    grid $itk_interior.sep      -column 0 -row 2 -padx 3 -pady 3 -sticky ew -columnspan 2
    grid $itk_component(next)   -column 0 -row 0 -sticky ew
    grid $itk_component(intro)  -column 1 -row 0 -sticky ew -padx 3
    grid $itk_component(close)  -column 2 -row 0 -sticky ew
    grid $itk_component(bbox)   -column 0 -row 3 -sticky new -columnspan 2

    eval itk_initialize $args

    if {[$itk_component(image) cget -image] == {}} {
	$itk_component(image) configure -image $c_tipimg
    }

    # set starting tip
    if {[llength $itk_option(-tips)]} {
	set index [swidgets::tooltiprandom::range [llength $itk_option(-tips)]]
	if {$index > 0} {incr index -1}
	$itk_component(text) configure -state normal
	$itk_component(text) delete 1.0 end
	$itk_component(text) insert 1.0 "[lindex $itk_option(-tips) $index]"
	$itk_component(text) configure -state disabled
     }
}

::itcl::body swidgets::Tooltip::destructor {} {
}

# -----------------------------------------------------------------------------
#                                  OPTIONS
# -----------------------------------------------------------------------------
::itcl::configbody swidgets::Tooltip::geometry {
    wm geometry $itk_interior $itk_option(-geometry)
}
::itcl::configbody swidgets::Tooltip::title {
    wm title $itk_interior $itk_option(-title)
}
::itcl::configbody swidgets::Tooltip::tips {}
::itcl::configbody swidgets::Tooltip::parent {
    wm transient $itk_interior $itk_option(-parent)
}
::itcl::configbody swidgets::Tooltip::showtip {}
::itcl::configbody swidgets::Tooltip::introcommand {}
::itcl::configbody swidgets::Tooltip::closecommand {}

# -----------------------------------------------------------------------------
#                                  METHODS
# -----------------------------------------------------------------------------
::itcl::body swidgets::Tooltip::Activate {} {
    update
    wm deiconify $itk_interior
    raise $itk_interior
    focus $itk_interior
}

::itcl::body swidgets::Tooltip::Hide {} {
    wm withdraw $itk_interior
    update
}

::itcl::body swidgets::Tooltip::Close {} {
    Hide

    if {$itk_option(-closecommand) != {}} {
	eval $itk_option(-closecommand)
    }

    destroy object [namespace tail $this]
}

::itcl::body swidgets::Tooltip::next {} {
    incr index
    if {$index >= [llength $itk_option(-tips)]} {set index 0}
    $itk_component(text) configure -state normal
    $itk_component(text) delete 1.0 end
    $itk_component(text) insert 1.0 "[lindex $itk_option(-tips) $index]"
    $itk_component(text) configure -state disabled
}

::itcl::body swidgets::Tooltip::intro {} {
    if {$itk_option(-introcommand) != {}} {
	eval $itk_option(-introcommand)
    }
}

# Local Variables:
# mode: Tcl
# tab-width: 8
# c-basic-offset: 4
# tcl-indent-level: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


1.5
log
@Sweeping license updates.  Documentation is fully relicensed to the BSD Documentation License (a minor variant of the FreeBSD Documentation License and BSD License).  All GPL code (mostly application code) is converted to the LGPL and now also specifically declares version 2.1, revoking the blank check to the FSF.  The intent of these sweeping changes are to simplify the licensing terms and increase overall flexibility of use, both externally (to users for their purposes) and internally (to allow application code to be migrated to libraries without creating GPL libraries).  As a collective work, BRL-CAD is now LGPL.
@
text
@d26 1
a26 1
 
d61 3
a63 3
        method Activate     {}
        method Hide         {}
        method Close        {}
d140 1
a140 1
    }	
d175 1
a175 1
	$itk_component(text) insert 1.0 "[lindex $itk_option(-tips) $index]" 
d207 1
a207 1
    focus $itk_interior    
d230 1
a230 1
    $itk_component(text) insert 1.0 "[lindex $itk_option(-tips) $index]" 
@


1.4
log
@update copyright to 2007
@
text
@d9 1
a9 2
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
@


1.3
log
@to quote Bob's commit to src/archer/archer "All of archer including the tclscripts is assigned to u.s. government and should be under the LGPL" so add the boilerplate legal header.  the COPYING file requires this regardless for all commits whether implicit or explicit.  also add the boilerplate variables footer while we're at it.
@
text
@d4 1
a4 1
# Copyright (c) 2006 United States Government as represented by
@


1.2
log
@Merge of bobWinPort
@
text
@d1 5
a5 2
# TYPE: tcltk
##############################################################
d7 13
a19 1
# tooltip.itk
d21 1
a21 1
##############################################################
d240 9
@


1.1
log
@file tooltip.itk was initially added on branch bobWinPort.
@
text
@d1 224
@


1.1.2.1
log
@Initial check-in
@
text
@a0 224
# TYPE: tcltk
##############################################################
#
# tooltip.itk
#
##############################################################
#
# Description:
#    This is a tool tip displayer.
#
##############################################################
 
namespace eval swidgets::tooltiprandom {
    # Create a variable inside the namespace
    variable seed [clock seconds]
}

proc swidgets::tooltiprandom::init {seed} {
    set ::swidgets::tooltiprandom::seed $seed
}

proc swidgets::tooltiprandom::random {} {
    variable seed
    set seed [expr ($seed*9301 + 49297) % 233280]
    return [expr $seed/double(233280)]
}

proc swidgets::tooltiprandom::range {range} {
    expr int([random]*$range)
}

itcl::class swidgets::Tooltip {
    inherit itk::Toplevel

    itk_option define -geometry geometry Geometry ""
    itk_option define -title title Title ""
    itk_option define -tips tips Tips ""
    itk_option define -parent parent Parent "."
    itk_option define -showtip showTip Boolean 1
    itk_option define -introcommand introCommand Command {}
    itk_option define -closecommand closeCommand Command {}

    constructor {args} {}
    destructor {}

    public {
        method Activate     {}
        method Hide         {}
        method Close        {}
    }

    private {
	variable index 0
	common c_tipimg [image create photo -file [file join $::swidgets::library "images" tip.gif]]

	method next {}
	method intro {}
    }
}

#
# Provide a lowercased access method for the Tooltip class.
#
proc ::swidgets::tooltip {args} {
    uplevel ::swidgets::Tooltip $args
}

# ------------------------------------------------------------
#                      CONSTRUCTOR
# ------------------------------------------------------------
::itcl::body swidgets::Tooltip::constructor {args} {

    # image
    itk_component add image {
	::label $itk_interior.image
    } {
	keep -image
    }

    set frm [::frame $itk_interior.frm -relief groove\
	    -borderwidth 1]

    # textm & scrollbar
    itk_component add text {
	::text $frm.text -wrap word \
		-state disabled \
		-height 15 -width 60
    } {
	keep -font
	rename -background -textbackground textBackground Background
    }

    itk_component add scroll {
	::scrollbar $frm.scroll -orient vertical
    } {
    }

    $itk_component(text) configure -yscrollcommand "$itk_component(scroll) set"
    $itk_component(scroll) configure -command "$itk_component(text) yview"

    # checkbutton
    itk_component add check {
	::checkbutton $itk_interior.check -text "Show tips at startup" \
		-onvalue 1 -offvalue 0 -variable [::itcl::scope itk_option(-showtip)]
    } {
	keep -selectcolor
    }

    # buttons
    ::frame $itk_interior.sep -borderwidth 2 -height 2 -relief sunken
    itk_component add bbox {
	::frame $itk_interior.bbox
    } {
    }

    itk_component add next {
	::button $itk_component(bbox).next -text "Next" \
		-width 15 -command [::itcl::code $this next]
    } {
    }

    itk_component add intro {
	::button $itk_component(bbox).intro -text "Introduction" \
		-width 15 -command [::itcl::code $this intro]
    } {
    }	

    itk_component add close {
	::button $itk_component(bbox).close -text "Close" \
		-width 15 -command [::itcl::code $this Close]
    } {
    }

    #
    # pack widgets
    #
    pack $itk_component(text)   -side left -expand yes -fill both -pady 3
    pack $itk_component(scroll) -side right -fill y
    grid $itk_component(check)  -column 1 -row 1 -sticky w
    grid $frm                   -column 1 -row 0  -sticky news
    grid $itk_component(image)  -column 0 -row 0 -sticky n -rowspan 2 -pady 3

    grid $itk_interior.sep      -column 0 -row 2 -padx 3 -pady 3 -sticky ew -columnspan 2
    grid $itk_component(next)   -column 0 -row 0 -sticky ew
    grid $itk_component(intro)  -column 1 -row 0 -sticky ew -padx 3
    grid $itk_component(close)  -column 2 -row 0 -sticky ew
    grid $itk_component(bbox)   -column 0 -row 3 -sticky new -columnspan 2

    eval itk_initialize $args

    if {[$itk_component(image) cget -image] == {}} {
	$itk_component(image) configure -image $c_tipimg
    }

    # set starting tip
    if {[llength $itk_option(-tips)]} {
	set index [swidgets::tooltiprandom::range [llength $itk_option(-tips)]]
	if {$index > 0} {incr index -1}
	$itk_component(text) configure -state normal
	$itk_component(text) delete 1.0 end
	$itk_component(text) insert 1.0 "[lindex $itk_option(-tips) $index]" 
	$itk_component(text) configure -state disabled
     }
}

::itcl::body swidgets::Tooltip::destructor {} {
}

# -----------------------------------------------------------------------------
#                                  OPTIONS
# -----------------------------------------------------------------------------
::itcl::configbody swidgets::Tooltip::geometry {
    wm geometry $itk_interior $itk_option(-geometry)
}
::itcl::configbody swidgets::Tooltip::title {
    wm title $itk_interior $itk_option(-title)
}
::itcl::configbody swidgets::Tooltip::tips {}
::itcl::configbody swidgets::Tooltip::parent {
    wm transient $itk_interior $itk_option(-parent)
}
::itcl::configbody swidgets::Tooltip::showtip {}
::itcl::configbody swidgets::Tooltip::introcommand {}
::itcl::configbody swidgets::Tooltip::closecommand {}

# -----------------------------------------------------------------------------
#                                  METHODS
# -----------------------------------------------------------------------------
::itcl::body swidgets::Tooltip::Activate {} {
    update
    wm deiconify $itk_interior
    raise $itk_interior
    focus $itk_interior    
}

::itcl::body swidgets::Tooltip::Hide {} {
    wm withdraw $itk_interior
    update
}

::itcl::body swidgets::Tooltip::Close {} {
    Hide

    if {$itk_option(-closecommand) != {}} {
	eval $itk_option(-closecommand)
    }

    destroy object [namespace tail $this]
}

::itcl::body swidgets::Tooltip::next {} {
    incr index
    if {$index >= [llength $itk_option(-tips)]} {set index 0}
    $itk_component(text) configure -state normal
    $itk_component(text) delete 1.0 end
    $itk_component(text) insert 1.0 "[lindex $itk_option(-tips) $index]" 
    $itk_component(text) configure -state disabled
}

::itcl::body swidgets::Tooltip::intro {} {
    if {$itk_option(-introcommand) != {}} {
	eval $itk_option(-introcommand)
    }
}
@

