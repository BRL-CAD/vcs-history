head	1.2;
access;
symbols
	rel-6-1-DP:1.1.1.1
	rel-6-0-2:1.1.1.1
	rel-6-0-1-branch:1.1.1.1.0.4
	hartley-6-0-post:1.1.1.1
	hartley-6-0-pre:1.1.1.1
	rel-6-0-1:1.1.1.1
	rel-6-0:1.1.1.1
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	windows-6-0-branch:1.1.1.1.0.8
	ansi-6-0-branch:1.1.1.1.0.6
	tk8-3:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.03.13.19.14.01;	author jra;	state dead;
branches;
next	1.1;

1.1
date	2000.12.06.21.34.19;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.34.19;	author bparker;	state Exp;
branches
	1.1.1.1.6.1
	1.1.1.1.8.1;
next	;

1.1.1.1.6.1
date	2004.03.17.07.31.42;	author morrison;	state dead;
branches;
next	;

1.1.1.1.8.1
date	2004.03.15.17.37.22;	author morrison;	state dead;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@# This file is a Tcl script to test out the procedures in the file
# tkId.c, which recycle X resource identifiers.  It is organized in
# the standard fashion for Tcl tests.
#
# Copyright (c) 1995 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: id.test,v 1.1 2000/12/06 21:34:19 bparker Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {[string compare testwrapper [info commands testwrapper]] != 0} {
    puts "This application hasn't been compiled with the testwrapper command,"
    puts "therefore I am skipping all of these tests."
    ::tcltest::cleanupTests
    return
}

foreach i [winfo children .] {
    destroy $i
}
wm geometry . {}
raise .

test id-1.1 {WindowIdCleanup, delaying window release} {unixOnly} {
    bind all <Destroy> {lappend x %W}
    catch {unset map}
    frame .f
    set j 0
    foreach i {a b c d e f g h i j k l m n o p q} {
	toplevel .f.$i -height 50 -width 100
	wm geometry .f.$i +$j+$j
	incr j 10
	update
	set map([winfo id .f.$i]) .f.$i
	set map([testwrapper .f.$i]) wrapper.f.$i
    }
    set x {}
    destroy .f

    # Destroy events should have occurred for all windows.
    set result [list [lsort $x]]

    set x {}
    update idletasks
    set reused {}
    foreach i {a b c d e} {
	set w .${i}2
	frame $w -height 20 -width 100 -bd 2 -relief raised
	pack $w
	if [info exists map([winfo id $w])] {
	    lappend reused $map([winfo id $w])
	}
	set map([winfo id $w]) $w
    }

    # No window ids should have been reused: stale Destroy events still
    # pending in queue.
    lappend result [lsort $reused]

    # Wait a few seconds, then try again;  ids should still not have
    # been re-used.

    set y 0
    after 2000 {set y 1}
    tkwait variable y
    foreach i {a b c} {
	set w .${i}3
	frame $w -height 20 -width 100 -bd 2 -relief raised
	pack $w
	if [info exists map([winfo id $w])] {
	    lappend reused $map([winfo id $w])
	}
	set map([winfo id $w])] $w
    }

    # Ids should not yet have been reused.
    lappend result [lsort $reused]


    # Wait a few more seconds, to give ids enough time to be recycled.
    set y 0
    after 6000 {set y 1}
    tkwait variable y
    foreach i {a b c d e f} {
	set w .${i}4
	frame $w -height 20 -width 100 -bd 2 -relief raised
	pack $w
	if [info exists map([winfo id $w])] {
	    lappend reused $map([winfo id $w])
	}
	set map([winfo id $w])] $w
    }

    # Ids should be reused now, due to time delay.  Destroy events should
    # have been discarded.
    lappend result [lsort $reused] [lsort $x]
} {{.f .f.a .f.b .f.c .f.d .f.e .f.f .f.g .f.h .f.i .f.j .f.k .f.l .f.m .f.n .f.o .f.p .f.q} {} {} {.f.o .f.p .f.q wrapper.f.p wrapper.f.q} {}}
bind all <Destroy> {}

# cleanup
::tcltest::cleanupTests
return













@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: id.test,v 1.4 1999/04/16 01:51:38 stanton Exp $
@


1.1.1.1
log
@Import tk8.3
@
text
@@


1.1.1.1.6.1
log
@sync branch with HEAD
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: id.test,v 1.1.1.1 2000/12/06 21:34:19 bparker Exp $
@


1.1.1.1.8.1
log
@sync with HEAD -- libtk8.3 is now libtk8.4
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: id.test,v 1.1.1.1 2000/12/06 21:34:19 bparker Exp $
@

