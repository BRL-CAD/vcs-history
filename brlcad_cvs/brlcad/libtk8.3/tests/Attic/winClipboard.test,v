head	1.2;
access;
symbols
	rel-6-1-DP:1.1.1.1
	rel-6-0-2:1.1.1.1
	rel-6-0-1-branch:1.1.1.1.0.4
	hartley-6-0-post:1.1.1.1
	hartley-6-0-pre:1.1.1.1
	rel-6-0-1:1.1.1.1
	rel-6-0:1.1.1.1
	rel-5-4:1.1.1.1
	offsite-5-3-pre:1.1.1.1
	rel-5-3:1.1.1.1
	rel-5-1-branch:1.1.1.1.0.2
	windows-6-0-branch:1.1.1.1.0.8
	ansi-6-0-branch:1.1.1.1.0.6
	tk8-3:1.1.1.1
	scriptics:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.03.13.19.14.07;	author jra;	state dead;
branches;
next	1.1;

1.1
date	2000.12.06.21.34.19;	author bparker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.12.06.21.34.19;	author bparker;	state Exp;
branches
	1.1.1.1.6.1
	1.1.1.1.8.1;
next	;

1.1.1.1.6.1
date	2004.03.17.07.31.45;	author morrison;	state dead;
branches;
next	;

1.1.1.1.8.1
date	2004.03.15.17.37.24;	author morrison;	state dead;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@# This file is a Tcl script to test out Tk's Windows specific
# clipboard code.  It is organized in the standard fashion for Tcl
# tests.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1997 by Sun Microsystems, Inc.
# Copyright (c) 1998-2000 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: winClipboard.test,v 1.1 2000/12/06 21:34:19 bparker Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

# Note that these tests may fail if another application is grabbing the
# clipboard (e.g. an X server)

if {[llength [info command testclipboard]] == 0} {
    puts "\"testclipboard\" isn't defined, skipping winClipboard tests"
    ::tcltest::cleanupTests
    return
}

test winClipboard-1.1 {TkSelGetSelection} {pcOnly} {
    clipboard clear
    catch {selection get -selection CLIPBOARD} msg
    set msg
} {CLIPBOARD selection doesn't exist or form "STRING" not defined}
test winClipboard-1.2 {TkSelGetSelection} {pcOnly} {
    clipboard clear
    clipboard append {}
    list [selection get -selection CLIPBOARD] [testclipboard]
} {{} {}}
test winClipboard-1.3 {TkSelGetSelection & TkWinClipboardRender} {pcOnly} {
    clipboard clear
    clipboard append abcd
    update
    list [selection get -selection CLIPBOARD] [testclipboard]
} {abcd abcd}
test winClipboard-1.4 {TkSelGetSelection & TkWinClipboardRender} {pcOnly} {
    clipboard clear
    clipboard append "line 1\nline 2"
    list [selection get -selection CLIPBOARD] [testclipboard]
} [list "line 1\nline 2" "line 1\r\nline 2"]
test winClipboard-1.5 {TkSelGetSelection & TkWinClipboardRender} {pcOnly} {
    clipboard clear
    clipboard append "line 1\u00c7\nline 2"
    list [selection get -selection CLIPBOARD] [testclipboard]
} [list "line 1\u00c7\nline 2" [bytestring "line 1\u00c7\r\nline 2"]]

test winClipboard-2.1 {TkSelUpdateClipboard reentrancy problem} {pcOnly} {
    clipboard clear
    clipboard append -type OUR_ACTION "action data"
    clipboard append "string data"
    update
    list [selection get -selection CLIPBOARD -type OUR_ACTION] [testclipboard]
} [list "action data" "string data"]
test winClipboard-2.2 {TkSelUpdateClipboard reentrancy problem} {pcOnly} {
    clipboard clear
    clipboard append -type OUR_ACTION "new data"
    clipboard append "more data in string"
    update
    list [testclipboard] [selection get -selection CLIPBOARD -type OUR_ACTION]
} [list "more data in string" "new data"]

# cleanup
::tcltest::cleanupTests
return













@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: winClipboard.test,v 1.7 2000/04/12 18:52:14 hobbs Exp $
@


1.1.1.1
log
@Import tk8.3
@
text
@@


1.1.1.1.6.1
log
@sync branch with HEAD
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: winClipboard.test,v 1.1.1.1 2000/12/06 21:34:19 bparker Exp $
@


1.1.1.1.8.1
log
@sync with HEAD -- libtk8.3 is now libtk8.4
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: winClipboard.test,v 1.1.1.1 2000/12/06 21:34:19 bparker Exp $
@

