head	1.4;
access;
symbols
	ansi-20040405-merged:1.3.4.1
	postmerge-20040405-ansi:1.3
	premerge-20040404-ansi:1.3
	postmerge-autoconf:1.3
	autoconf-freeze:1.1.6.4
	premerge-autoconf:1.3
	postmerge-20040315-windows:1.3
	premerge-20040315-windows:1.3
	windows-20040315-freeze:1.3.2.1
	autoconf-20031203:1.1.6.1
	autoconf-20031202:1.1
	autoconf-branch:1.1.0.6
	phong-branch:1.1.0.4
	photonmap-branch:1.1.0.2
	windows-branch:1.3.0.2
	ansi-branch:1.3.0.4;
locks; strict;
comment	@# @;


1.4
date	2004.05.21.18.04.49;	author morrison;	state dead;
branches;
next	1.3;

1.3
date	2004.03.04.19.47.19;	author morrison;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2003.11.07.14.54.44;	author morrison;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.13.19.18.34;	author jra;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2003.12.03.16.24.48;	author erikg;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2004.02.12.18.56.39;	author erikg;	state Exp;
branches;
next	1.1.6.3;

1.1.6.3
date	2004.03.15.12.10.35;	author erikg;	state Exp;
branches;
next	1.1.6.4;

1.1.6.4
date	2004.03.15.14.01.27;	author erikg;	state Exp;
branches;
next	;

1.3.2.1
date	2004.03.12.09.59.18;	author morrison;	state Exp;
branches;
next	;

1.3.4.1
date	2004.03.17.21.20.02;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.4
log
@moved from top-level to src/other/.
@
text
@#  -*- tcl -*-
#
# notify.test --
#
# This file tests several functions in the file, 'generic/tclNotify.c'.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 2003 by Kevin B. Kenny.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: notify.test,v 1.3 2004/03/04 19:47:19 morrison Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

testConstraint testevent [llength [info commands testevent]]

test notify-1.1 {Tcl_QueueEvent and delivery of a single event} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	vwait done
	set delivered
    } \
    -result {one}

test notify-1.2 {Tcl_QueueEvent and delivery of events in order} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent queue three tail {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {one two three}

test notify-1.3 {Tcl_QueueEvent at head} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one head {lappend delivered one; expr 1}
	vwait done
	set delivered
    } \
    -result one

test notify-1.4 {Tcl_QueueEvent multiple events at head} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one head {lappend delivered one; expr 1}
	testevent queue two head {lappend delivered two; expr 1}
	testevent queue three head {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {three two one}

test notify-1.5 {Tcl_QueueEvent marker event into an empty queue} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	vwait done
	set delivered
    } \
    -result one

test notify-1.6 {Tcl_QueueEvent first marker event in a nonempty queue} \
    -constraints {testevent}  \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent queue three head {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {three two one}

test notify-1.7 {Tcl_QueueEvent second marker event} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	vwait done
	set delivered
    } \
    -result {one two}

test notify-1.8 {Tcl_QueueEvent preexisting event following second marker} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent queue three mark {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {one three two}

test notify-2.1 {remove sole element, don't replace } \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent delete one
	vwait done
	set delivered
    } \
    -result {}

test notify-2.2 {remove and replace sole element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent delete one
	testevent queue two tail {lappend delivered two; expr 1}
	vwait done
	set delivered
    } \
    -result two

test notify-2.3 {remove first element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete one
	vwait done
	set delivered
    } \
    -result {two}

test notify-2.4 {remove and replace first element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete one
	testevent queue three head {lappend delivered three; expr 1};
	vwait done
	set delivered
    } \
    -result {three two}

test notify-2.5 {remove last element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete two
	vwait done
	set delivered
    } \
    -result {one}


test notify-2.6 {remove and replace last element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete two
	testevent queue three tail {lappend delivered three; expr 1};
	vwait done
	set delivered
    } \
    -result {one three}

test notify-2.7 {remove a middle element} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one tail {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent queue three tail {lappend delivered three; expr 1}
	testevent delete two
	vwait done
	set delivered
    } \
    -result {one three}

test notify-2.8 {remove a marker event that's the sole event in the queue} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent delete one
	vwait done
	set delivered
    } \
    -result {}

test notify-2.9 {remove and replace a marker event that's the sole event} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent delete one
	testevent queue two mark {lappend delivered two; expr 1}
	vwait done
	set delivered
    } \
    -result two

test notify-2.10 {remove marker event from head} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent delete one
	vwait done
	set delivered
    } \
    -result two

test notify-2.11 {remove and replace marker event at head} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two tail {lappend delivered two; expr 1}
	testevent delete one
	testevent queue three mark {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {three two}

test notify-2.12 {remove marker event at tail} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent delete two
	vwait done
	set delivered
    } \
    -result {one}

test notify-2.13 {remove and replace marker event at tail} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent delete two
	testevent queue three mark {lappend delivered three; expr 1}
	vwait done
	set delivered
    } \
    -result {one three}

test notify-2.14 {remove marker event from middle} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent queue three mark {lappend delivered three; expr 1}
	testevent delete two
	vwait done
	set delivered
    } \
    -result {one three}

test notify-2.15 {remove and replace marker event at middle} \
    -constraints {testevent} \
    -body {
	set delivered {}
	after 10 set done 1
	testevent queue one mark {lappend delivered one; expr 1}
	testevent queue two mark {lappend delivered two; expr 1}
	testevent queue three tail {lappend delivered three; expr 1}
	testevent delete two
	testevent queue four mark {lappend delivered four; expr 1};
	vwait done
	set delivered
    } \
    -result {one four three}

# cleanup
::tcltest::cleanupTests
return
@


1.3
log
@Updated to tcl 8.4.6
@
text
@d16 1
a16 1
# RCS: @@(#) $Id: notify.test,v 1.2.2.1 2003/10/06 13:55:38 dgp Exp $
@


1.3.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
# RCS: @@(#) $Id$
@


1.3.2.1
log
@merge from HEAD
@
text
@d16 1
a16 1
# RCS: @@(#) $Id$
@


1.2
log
@updated tcl to 8.4.4
@
text
@d16 1
a16 1
# RCS: @@(#) $Id: notify.test,v 1.2 2003/02/17 17:23:57 kennykb Exp $
d19 1
a19 1
    package require tcltest
@


1.1
log
@*** empty log message ***
@
text
@@


1.1.6.1
log
@updates from HEAD, part 1
@
text
@d16 1
a16 1
# RCS: @@(#) $Id: notify.test,v 1.2 2003/11/07 14:54:44 morrison Exp $
@


1.1.6.2
log
@merge from HEAD
@
text
@@


1.1.6.3
log
@merge from head
@
text
@d16 1
a16 1
# RCS: @@(#) $Id: notify.test,v 1.3 2004/03/04 19:47:19 morrison Exp $
d19 1
a19 1
    package require tcltest 2
@


1.1.6.4
log
@merge from head...
@
text
@d16 1
a16 1
# RCS: @@(#) $Id: notify.test,v 1.1.6.3 2004/03/15 12:10:35 erikg Exp $
@


