head	1.17;
access;
symbols
	ansi-20040405-merged:1.13.2.2
	postmerge-20040405-ansi:1.15
	premerge-20040404-ansi:1.14
	postmerge-autoconf:1.14
	autoconf-freeze:1.13.10.1
	premerge-autoconf:1.14
	ansi-20040316-freeze:1.13.2.1
	postmerge-20040315-windows:1.14
	premerge-20040315-windows:1.14
	windows-20040315-freeze:1.13.4.1
	autoconf-20031203:1.13
	autoconf-20031202:1.13
	autoconf-branch:1.13.0.10
	phong-branch:1.13.0.8
	photonmap-branch:1.13.0.6
	rel-6-1-DP:1.13
	windows-branch:1.13.0.4
	rel-6-0-2:1.11
	ansi-branch:1.13.0.2
	rel-6-0-1-branch:1.11.0.2
	hartley-6-0-post:1.12
	hartley-6-0-pre:1.11
	rel-6-0-1:1.11
	rel-6-0:1.11
	rel-5-4:1.2.2.1
	offsite-5-3-pre:1.5
	rel-5-3:1.2.2.1
	rel-5-2:1.2.2.1
	rel-5-1-branch:1.2.0.2;
locks; strict;
comment	@ * @;


1.17
date	2004.05.24.04.18.40;	author morrison;	state dead;
branches;
next	1.16;

1.16
date	2004.05.10.15.30.41;	author erikg;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.05.07.50.06;	author morrison;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.02.17.38.58;	author morrison;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.20.17.07.19;	author jra;	state Exp;
branches
	1.13.2.1
	1.13.4.1
	1.13.10.1;
next	1.12;

1.12
date	2002.08.15.20.54.32;	author hartley;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.08.20.27.35;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.03.14.12.40;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.18.22.20.45;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.18.21.05.22;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.17.20.37.36;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.12.18.18.13;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.05.21.27;	author jra;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.06.20.40.07;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.30.20.45.08;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.16.17.52.05;	author bparker;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.08.16.17.29.02;	author bparker;	state Exp;
branches;
next	;

1.2.2.1
date	2000.08.16.18.00.43;	author bparker;	state Exp;
branches;
next	;

1.13.2.1
date	2002.09.19.18.00.33;	author morrison;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2004.03.17.21.15.51;	author morrison;	state Exp;
branches;
next	;

1.13.4.1
date	2004.03.11.23.40.27;	author morrison;	state Exp;
branches;
next	;

1.13.10.1
date	2004.02.12.18.39.43;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.17
log
@moved to src/bwish/
@
text
@/*
 *				C M D . C
 *
 * This is the place where BWISH/BTCLSH's commands live.
 * The history routines were borrowed from mged/history.c
 * and modified for use in this application.
 *
 *  Author -
 *	   Robert G. Parker
 *
 *  Authors of mged/history.c -
 *	   Glenn Durfee
 *	   Bob Parker
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 *
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#ifdef BWISH
#include "tk.h"
#else
#include "tcl.h"
#endif

#include "machine.h"
#include "externs.h"
#include "cmd.h"
#include "libtermio.h"

/* defined in tcl.c */
extern void Cad_Exit(int status);

HIDDEN void historyInit(void);
HIDDEN int cmd_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
HIDDEN int cmd_hist(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
HIDDEN int cmd_quit(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);

HIDDEN struct bu_cmdhist histHead;
HIDDEN struct bu_cmdhist *currHist;

HIDDEN struct bu_cmdtab bwish_cmds[] =
{
	{"exit",		cmd_quit},
	{"history",		cmd_history},
	{"hist",		cmd_hist},
	{"q",			cmd_quit},
	{(char *)NULL,		CMD_NULL}
};

#ifdef BWISH
extern Tk_PhotoImageFormat tkImgFmtPIX;
#endif

int
cmdInit(Tcl_Interp *interp)
{
	/* Register bwish/btclsh commands */
	bu_register_cmds(interp, bwish_cmds);

#ifdef BWISH
	/* Add pix format for images */
	Tk_CreatePhotoImageFormat(&tkImgFmtPIX);
#endif

	/* initialize command history */
	historyInit();
	return TCL_OK;
}

/***************************** BWISH/BTCLSH COMMANDS *****************************/

HIDDEN int
cmd_quit(ClientData	clientData,
	 Tcl_Interp	*interp,
	 int		argc,
	 char		**argv)
{
	int status;

	if (argc == 2)
		status = atoi(argv[1]);
	else
		status = 0;

	Cad_Exit(status);

	/* NOT REACHED */
	return TCL_OK;
}

/***************************** BWISH/BTCLSH COMMAND HISTORY *****************************/

HIDDEN void
historyInit(void)
{
	BU_LIST_INIT(&(histHead.l));
	bu_vls_init(&(histHead.h_command));
	histHead.h_start.tv_sec = histHead.h_start.tv_usec =
		histHead.h_finish.tv_sec = histHead.h_finish.tv_usec = 0L;
	histHead.h_status = TCL_OK;
	currHist = &histHead;
#if 0
	journalfp = NULL;
#endif
}

/*
 *	H I S T O R Y _ R E C O R D
 *
 *	Stores the given command with start and finish times in the
 *	history vls'es.
 */
void
history_record(struct bu_vls *cmdp, struct timeval *start, struct timeval *finish, int status)
                         
                                    
                   /* Either TCL_OK or TCL_ERROR */
{
	struct bu_cmdhist *new_hist;

	if (strcmp(bu_vls_addr(cmdp), "\n") == 0)
		return;

	new_hist = (struct bu_cmdhist *)bu_malloc(sizeof(struct bu_cmdhist),
					       "mged history");
	bu_vls_init(&(new_hist->h_command));
	bu_vls_vlscat(&(new_hist->h_command), cmdp);
	new_hist->h_start = *start;
	new_hist->h_finish = *finish;
	new_hist->h_status = status;
	BU_LIST_INSERT(&(histHead.l), &(new_hist->l));

	/* As long as this isn't our first command to record after setting
	   up the journal (which would be "journal", which we don't want
	   recorded!)... */

#if 0
	if (journalfp != NULL && !firstjournal)
		history_journalize(new_hist);
#endif

	currHist = &histHead;
#if 0
	firstjournal = 0;
#endif
}

HIDDEN int
timediff(struct timeval *tvdiff, struct timeval *start, struct timeval *finish)
{
	if (finish->tv_sec == 0 && finish->tv_usec == 0)
		return -1;
	if (start->tv_sec == 0 && start->tv_usec == 0)
		return -1;
    
	tvdiff->tv_sec = finish->tv_sec - start->tv_sec;
	tvdiff->tv_usec = finish->tv_usec - start->tv_usec;
	if (tvdiff->tv_usec < 0) {
		--tvdiff->tv_sec;
		tvdiff->tv_usec += 1000000L;
	}

	return 0;
}

#if 0
void
history_journalize(hptr)
     struct bu_cmdhist *hptr;
{
	struct timeval tvdiff;
	struct bu_cmdhist *lasthptr;

	lasthptr = BU_LIST_PREV(bu_cmdhist, &(hptr->l));

	if (journal_delay && timediff(&tvdiff, &(lasthptr->h_finish), &(hptr->h_start)) >= 0)
		fprintf(journalfp, "delay %d %ld\n", tvdiff.tv_sec, tvdiff.tv_usec);

	if (hptr->h_status == TCL_ERROR)
		fprintf(journalfp, "# ");
	fprintf(journalfp, "%s", bu_vls_addr(&hptr->h_command));

	if (journal_delay)
		fprintf(journalfp, "mged_update 1\n");
}

/*
 *	F _ J O U R N A L
 *
 *	Opens the journal file, so each command and the time since the previous
 *	  one will be recorded.  Or, if called with no arguments, closes the
 *	  journal file.
 */
int
cmd_journal(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
{
	if(argc < 1 || 3 < argc){
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "help journal");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	/* close previously open journal file */
	if (journalfp != NULL) {
		fclose(journalfp);
		journalfp = NULL;
	}
	journal_delay = 0;

	if (argc < 2)
		return TCL_OK;

	if(argv[1][0] == '-' && argv[1][1] == 'd'){
		journal_delay = 1;
		++argv;
		--argc;
	}

	if (argc < 2) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "help journal");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	journalfp = fopen(argv[1], "a+");
	if (journalfp == NULL) {
		Tcl_AppendResult(interp, "Error opening ", argv[1],
				 " for appending\n", (char *)NULL);
		return TCL_ERROR;
	}
	firstjournal = 1;

	return TCL_OK;
}

/*
 *	F _ D E L A Y
 *
 * 	Uses select to delay for the specified amount of seconds and 
 *	  microseconds.
 */

int
f_delay(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
{
	struct timeval tv;

	if(argc < 3 || 3 < argc){
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "help delay");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	tv.tv_sec = atoi(argv[1]);
	tv.tv_usec = atoi(argv[2]);
	select(0, NULL, NULL, NULL, &tv);

	return TCL_OK;
}
#endif

/*
 *	F _ H I S T O R Y
 *
 *	Prints out the command history, either to bu_log or to a file.
 */

int
cmd_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	FILE *fp;
	int with_delays = 0;
	struct bu_cmdhist *hp, *hp_prev;
	struct bu_vls str;
	struct timeval tvdiff;

	if (argc < 1 || 4 < argc) {
		Tcl_AppendResult(interp, "history [-delays] [-outfile file]\n\tlist command history", (char *)0);
		return TCL_ERROR;
	}

	fp = NULL;
	while (argc > 1) {
		if (strcmp(argv[1], "-delays") == 0)
			with_delays = 1;
		else if (strcmp(argv[1], "-outfile") == 0) {
			if (fp != NULL) {
				fclose(fp);
				Tcl_AppendResult(interp, "history: -outfile option given more than once\n",
						 (char *)NULL);
				return TCL_ERROR;
			} else if (argc < 3 || strcmp(argv[2], "-delays") == 0) {
				Tcl_AppendResult(interp, "history: I need a file name\n", (char *)NULL);
				return TCL_ERROR;
			} else {
				fp = fopen( argv[2], "a+" );
				if (fp == NULL) {
					Tcl_AppendResult(interp, "history: error opening file", (char *)NULL);
					return TCL_ERROR;
				}
				--argc;
				++argv;
			}
		} else {
			Tcl_AppendResult(interp, "Invalid option ", argv[1], "\n", (char *)NULL);
		}

		--argc;
		++argv;
	}

	bu_vls_init(&str);
	for (BU_LIST_FOR(hp, bu_cmdhist, &(histHead.l))) {
		bu_vls_trunc(&str, 0);
		hp_prev = BU_LIST_PREV(bu_cmdhist, &(hp->l));
		if (with_delays && BU_LIST_NOT_HEAD(hp_prev, &(histHead.l))) {
			if (timediff(&tvdiff, &(hp_prev->h_finish), &(hp->h_start)) >= 0)
				bu_vls_printf(&str, "delay %d %d\n", tvdiff.tv_sec,
					      tvdiff.tv_usec);
		}

		if (hp->h_status == TCL_ERROR)
			bu_vls_printf(&str, "# ");
		bu_vls_vlscat(&str, &(hp->h_command));

		if (fp != NULL)
			bu_vls_fwrite(fp, &str);
		else
			Tcl_AppendResult(interp, bu_vls_addr(&str), (char *)NULL);
	}

	if (fp != NULL)
		fclose(fp);

	return TCL_OK;
}

/*
 *      H I S T O R Y _ P R E V
 */
struct bu_vls *
history_prev(void)
{
	struct bu_cmdhist *hp;

	hp = BU_LIST_PREV(bu_cmdhist, &(currHist->l));
	if (BU_LIST_IS_HEAD(hp, &(histHead.l)))
		return NULL;
	else {
		currHist = hp;
		return &(hp->h_command);
	}
}

/*
 *      H I S T O R Y _ C U R
 */
struct bu_vls *
history_cur(void)
{
	if (BU_LIST_IS_HEAD(currHist, &(histHead.l)))
		return NULL;
	else
		return &(currHist->h_command);
}

/*
 *      H I S T O R Y _ N E X T
 */
struct bu_vls *
history_next(void)
{
	struct bu_cmdhist *hp;

	if (BU_LIST_IS_HEAD(currHist, &(histHead.l))) {
		return 0;
	}
    
	hp = BU_LIST_NEXT(bu_cmdhist, &(currHist->l));
	if (BU_LIST_IS_HEAD(hp, &(histHead.l))) {
		currHist = hp;
		return 0;
	} else {
		currHist = hp;
		return &(hp->h_command);
	}
}

int
cmd_hist(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_vls *vp;
	struct bu_vls vls;

	bu_vls_init(&vls);

	if(argc < 2){
		Tcl_AppendResult(interp, "hist command\n\troutine for maintaining command history", (char *)0);
		return TCL_ERROR;
	}

	if(strcmp(argv[1], "add") == 0){
		struct timeval zero;

		if(argc != 3){
			Tcl_AppendResult(interp, "hist add command\n\tadd command to history", (char *)0);
			return TCL_ERROR;
		}

		if (argv[2][0] == '\n' || argv[2][0] == '\0')
			return TCL_OK;

		bu_vls_strcpy(&vls, argv[2]);
		if (argv[2][strlen(argv[2])-1] != '\n')
			bu_vls_putc(&vls, '\n');

		zero.tv_sec = zero.tv_usec = 0L;
		history_record(&vls, &zero, &zero, TCL_OK);

		bu_vls_free(&vls);
		return TCL_OK;
	}

	if(strcmp(argv[1], "next") == 0){
		if(argc != 2){
			Tcl_AppendResult(interp, "hist next\n\treturn next command in history", (char *)0);
			return TCL_ERROR;
		}

		vp = history_next();
		if (vp == NULL)
			return TCL_ERROR;

		Tcl_AppendResult(interp, bu_vls_addr(vp), (char *)NULL);
		bu_vls_free(&vls);
		return TCL_OK;
	}

	if(strcmp(argv[1], "prev") == 0){
		if(argc != 2){
			Tcl_AppendResult(interp, "hist prev\n\treturn previous command in history", (char *)0);
			return TCL_ERROR;
		}

		vp = history_prev();
		if (vp == NULL)
			return TCL_ERROR;

		Tcl_AppendResult(interp, bu_vls_addr(vp), (char *)NULL);
		bu_vls_free(&vls);
		return TCL_OK;
	}

	Tcl_AppendResult(interp, "hist command\n\troutine for maintaining command history", (char *)0);
	return TCL_ERROR;
}
@


1.16
log
@change conf.h to a wrapped config.h
@
text
@@


1.15
log
@merge of ansi-6-0-branch into HEAD
@
text
@d30 5
a34 1
#include "conf.h"
@


1.14
log
@update copyright to include span through 2003
@
text
@d49 1
a49 1
extern void Cad_Exit();
d51 4
a54 4
HIDDEN void historyInit();
HIDDEN int cmd_history();
HIDDEN int cmd_hist();
HIDDEN int cmd_quit();
d73 1
a73 2
cmdInit(interp)
     Tcl_Interp *interp;
d112 1
a112 1
historyInit()
d132 4
a135 4
history_record(cmdp, start, finish, status)
     struct bu_vls *cmdp;
     struct timeval *start, *finish;
     int status;   /* Either TCL_OK or TCL_ERROR */
d167 1
a167 2
timediff(tvdiff, start, finish)
     struct timeval *tvdiff, *start, *finish;
d307 1
a307 5
cmd_history(clientData, interp, argc, argv )
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d380 1
a380 1
history_prev()
d397 1
a397 1
history_cur()
d409 1
a409 1
history_next()
d428 1
a428 5
cmd_hist(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
@


1.13
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d25 1
a25 1
 *	This software is Copyright (C) 1998 by the United States Army
@


1.13.4.1
log
@sync to HEAD...
@
text
@d25 1
a25 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
@


1.13.10.1
log
@merge from HEAD
@
text
@d25 1
a25 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
@


1.13.2.1
log
@Initial ANSIfication
@
text
@d49 1
a49 1
extern void Cad_Exit(int status);
d51 4
a54 4
HIDDEN void historyInit(void);
HIDDEN int cmd_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
HIDDEN int cmd_hist(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
HIDDEN int cmd_quit(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
d73 2
a74 1
cmdInit(Tcl_Interp *interp)
d113 1
a113 1
historyInit(void)
d133 4
a136 4
history_record(struct bu_vls *cmdp, struct timeval *start, struct timeval *finish, int status)
                         
                                    
                   /* Either TCL_OK or TCL_ERROR */
d168 2
a169 1
timediff(struct timeval *tvdiff, struct timeval *start, struct timeval *finish)
d309 5
a313 1
cmd_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d386 1
a386 1
history_prev(void)
d403 1
a403 1
history_cur(void)
d415 1
a415 1
history_next(void)
d434 5
a438 1
cmd_hist(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


1.13.2.2
log
@sync branch with HEAD
@
text
@d25 1
a25 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
@


1.12
log
@Converted from K&R to ANSI C - RFH
@
text
@d49 1
a49 1
extern void Cad_Exit(int status);
d51 4
a54 4
HIDDEN void historyInit(void);
HIDDEN int cmd_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
HIDDEN int cmd_hist(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
HIDDEN int cmd_quit(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
d73 2
a74 1
cmdInit(Tcl_Interp *interp)
d113 1
a113 1
historyInit(void)
d133 4
a136 4
history_record(struct bu_vls *cmdp, struct timeval *start, struct timeval *finish, int status)
                         
                                    
                   /* Either TCL_OK or TCL_ERROR */
d168 2
a169 1
timediff(struct timeval *tvdiff, struct timeval *start, struct timeval *finish)
d309 5
a313 1
cmd_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d386 1
a386 1
history_prev(void)
d403 1
a403 1
history_cur(void)
d415 1
a415 1
history_next(void)
d434 5
a438 1
cmd_hist(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


1.11
log
@*- fixed the help for hist and history
*- mods to cmd_quit to pass on the status
@
text
@d49 1
a49 1
extern void Cad_Exit();
d51 4
a54 4
HIDDEN void historyInit();
HIDDEN int cmd_history();
HIDDEN int cmd_hist();
HIDDEN int cmd_quit();
d73 1
a73 2
cmdInit(interp)
     Tcl_Interp *interp;
d112 1
a112 1
historyInit()
d132 4
a135 4
history_record(cmdp, start, finish, status)
     struct bu_vls *cmdp;
     struct timeval *start, *finish;
     int status;   /* Either TCL_OK or TCL_ERROR */
d167 1
a167 2
timediff(tvdiff, start, finish)
     struct timeval *tvdiff, *start, *finish;
d307 1
a307 5
cmd_history(clientData, interp, argc, argv )
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d380 1
a380 1
history_prev()
d397 1
a397 1
history_cur()
d409 1
a409 1
history_next()
d428 1
a428 5
cmd_hist(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
@


1.10
log
@*- added "#ifdef BWISH" around "#include tk.h"
@
text
@d92 4
a95 5
cmd_quit(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d97 10
a106 2
	Cad_Exit(TCL_OK);
	/* NOTREACHED */
d321 2
a322 7
	if(argc < 1 || 4 < argc){
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "help history");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
d327 2
a328 2
	while( argc >= 2 ) {
		if( strcmp(argv[1], "-delays") == 0 )
d330 2
a331 2
		else if( strcmp(argv[1], "-outfile") == 0 ) {
			if( fp != NULL ) {
d336 1
a336 1
			} else if( argc < 3 || strcmp(argv[2], "-delays") == 0 ) {
d341 1
a341 1
				if( fp == NULL ) {
d351 1
d446 1
a446 3
		bu_vls_printf(&vls, "helpdevel hist");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
d454 1
a454 3
			bu_vls_printf(&vls, "helpdevel hist");
			Tcl_Eval(interp, bu_vls_addr(&vls));
			bu_vls_free(&vls);
d474 1
a474 3
			bu_vls_printf(&vls, "helpdevel hist");
			Tcl_Eval(interp, bu_vls_addr(&vls));
			bu_vls_free(&vls);
d489 1
a489 3
			bu_vls_printf(&vls, "helpdevel hist");
			Tcl_Eval(interp, bu_vls_addr(&vls));
			bu_vls_free(&vls);
d502 1
a502 3
	bu_vls_printf(&vls, "helpdevel hist");
	Tcl_Eval(interp, bu_vls_addr(&vls));
	bu_vls_free(&vls);
@


1.9
log
@*- use Cad_Exit() instead of quit()
@
text
@d37 3
d41 1
a41 1
#include "tk.h"
@


1.8
log
@*- delete unnecessary reference to global interp
*- removed quit() (using Cad_Exit instead)
@
text
@d4 1
a4 1
 * This is the place where BWISH's commands live.
d73 1
a73 1
	/* Register bwish commands */
d86 1
a86 1
/***************************** BWISH COMMANDS *****************************/
d95 1
a95 1
	Cad_Exit(interp, 0);
d100 1
a100 1
/***************************** BWISH COMMAND HISTORY *****************************/
@


1.7
log
@*- mods to use in both BWISH and BTCLSH
@
text
@d45 2
a46 1
extern Tcl_Interp *interp;
a51 1
void quit();
d95 1
a95 1
	quit(0);
a97 11
}

void
quit(status)
     int status;
{
	reset_Tty(fileno(stdin)); 
#if 0
	Tcl_DeleteInterp(interp);
#endif
	Tcl_Exit(status);
@


1.6
log
@*- remove more warnings
@
text
@d65 1
d67 1
d76 1
d79 1
@


1.5
log
@Added pix image format
@
text
@d31 6
@


1.4
log
@
lint
@
text
@d32 1
d59 2
d67 3
@


1.3
log
@Use braces to initialize array of structures.
@
text
@d36 1
@


1.2
log
@replace cwish with bwish
@
text
@d50 5
a54 5
	"exit",		cmd_quit,
	"history",	cmd_history,
	"hist",		cmd_hist,
	"q",		cmd_quit,
	(char *)NULL,	CMD_NULL
@


1.2.2.1
log
@moved from cwish
@
text
@@


1.1
log
@everything is from the old cwish
@
text
@d4 1
a4 1
 * This is the place where CWISH's commands live.
d48 1
a48 1
HIDDEN struct bu_cmdtab cwish_cmds[] =
d61 2
a62 2
	/* Register cwish commands */
	bu_register_cmds(interp, cwish_cmds);
d69 1
a69 1
/***************************** CWISH COMMANDS *****************************/
d94 1
a94 1
/***************************** CWISH COMMAND HISTORY *****************************/
@

