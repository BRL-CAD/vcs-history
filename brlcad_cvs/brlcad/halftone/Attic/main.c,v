head	11.10;
access;
symbols
	ansi-20040405-merged:11.7.2.1
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.7
	postmerge-autoconf:11.7
	autoconf-freeze:11.7
	premerge-autoconf:11.7
	ansi-20040316-freeze:11.7.2.1
	postmerge-20040315-windows:11.7
	premerge-20040315-windows:11.7
	windows-20040315-freeze:11.7
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.2
	offsite-5-3-pre:11.5
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.10
date	2004.05.24.04.01.39;	author morrison;	state dead;
branches;
next	11.9;

11.9
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.8;

11.8
date	2004.04.05.07.47.59;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.07.30;	author jra;	state Exp;
branches
	11.7.2.1;
next	11.6;

11.6
date	2002.08.15.20.54.43;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2000.09.01.02.48.08;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.08.24.23.09.00;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.24.23.07.42;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.12.13.14.33.46;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.21.51;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.23.17.50.01;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.53.18;	author mike;	state Rel4_0;
branches;
next	2.5;

2.5
date	91.09.23.05.47.40;	author mike;	state Exp;
branches;
next	2.4;

2.4
date	91.07.27.01.58.57;	author mike;	state Exp;
branches;
next	2.3;

2.3
date	91.07.26.21.46.22;	author mike;	state Exp;
branches;
next	2.2;

2.2
date	91.06.22.05.41.08;	author cjohnson;	state Exp;
branches;
next	2.1;

2.1
date	90.04.13.01.22.48;	author cjohnson;	state Rel;
branches;
next	1.6;

1.6
date	90.04.13.00.29.10;	author cjohnson;	state Exp;
branches;
next	1.5;

1.5
date	90.04.10.05.22.54;	author cjohnson;	state Exp;
branches;
next	1.4;

1.4
date	90.04.10.03.34.21;	author cjohnson;	state Exp;
branches;
next	1.3;

1.3
date	90.04.10.01.04.08;	author cjohnson;	state Exp;
branches;
next	1.2;

1.2
date	90.04.09.17.12.26;	author cjohnson;	state Exp;
branches;
next	1.1;

1.1
date	90.04.09.16.13.04;	author cjohnson;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.00.58;	author morrison;	state Exp;
branches;
next	;


desc
@main for 'halftone'
@


11.10
log
@moved to src/halftone/
@
text
@#ifndef lint
static const char RCSid[] = "$Header: /n/xoff/cvs/brlcad/halftone/main.c,v 11.9 2004/05/10 15:30:42 erikg Exp $";
#endif
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include "machine.h"
#include "externs.h"
#include "vmath.h"
#include "raytrace.h"
#include "msr.h"
/*	halftone	given a bw file, generate a ht file.
 *
 * Usage:
 *	halftone
 *		-s	square size
 *		-n	number of lines
 *		-w	width
 *		-h	same as -s 1024
 *		-a	Automatic bw file sizing.
 *		-B	Beta for sharpining
 *		-I	number of intensity levels
 *		-M	method
 *			0 Floyd-Steinburg
 *			1 45 degree classical halftone screen
 *			2 Threshold
 *			3 0 degree dispersed halftone screen.
 *		-R	Add some noise.
 *		-S	Surpent flag.
 *		-T	tonescale points
 *
 * Exit:
 *	writes a ht(bw) file.
 *		an ht file is a bw file with a limited set of values
 *		ranging from 0 to -I(n) as integers.
 *
 * Uses:
 *	None.
 *
 * Calls:
 *	sharpen()	- get a line from the file that has been sharpened
 *	tone_simple()	- Threshold halftone.
 *	tone_floyd()	- Floyd-Steinburg halftone.
 *	tone_folly()	- 0 degree halftone screen (from Folly and Van Dam)
 *	tone_classic()	- 45 degree classical halftone screen.
 *	tonescale()	- Generates a tone scale map default is 0,0 to 255,255
 *	cubic_init()	- Generates "cubics" for tonescale for a set of points.
 *
 * Method:
 *	Fairly simple.  Most of the algorthems are inspired by
 *		Digital Halftoning by Robert Ulichney
 *
 * Author:
 *	Christopher T. Johnson	- 90/03/21
 *
 * $Log: main.c,v $
 * Revision 11.9  2004/05/10 15:30:42  erikg
 * change conf.h to a wrapped config.h
 *
 * Revision 11.8  2004/04/05 07:47:59  morrison
 * merge of ansi-6-0-branch into HEAD
 *
 * Revision 11.7.2.1  2002/09/19 18:00:58  morrison
 * Initial ANSIfication
 *
 * Revision 11.7  2002/08/20 17:07:30  jra
 * Restoration of entire source tree to Pre-Hartley state
 *
 * Revision 11.5  2000/09/01 02:48:08  mike
 *
 * lint
 *
 * Revision 11.4  2000/08/24 23:09:00  mike
 *
 * lint
 *
 * Revision 11.3  2000/08/24 23:07:42  mike
 *
 * lint
 *
 * Revision 11.2  1996/12/13  14:33:46  jra
 * pix_common_file_size is now bn_common_file_size.
 *
 * Revision 11.1  1995/01/04  10:21:51  mike
 * Release_4.4
 *
 * Revision 10.2  94/08/23  17:50:01  gdurf
 * Added include of conf.h, removed unnecessary externs
 * 
 * Revision 10.1  1991/10/12  06:53:18  mike
 * Release_4.0
 *
 * Revision 2.5  91/09/23  05:47:40  mike
 * Eliminated prototype warning on atof()
 * 
 * Revision 2.4  91/07/27  01:58:57  mike
 * Removed ^X from end of #include directive.  IBM objects, strenuously.
 * 
 * Revision 2.3  91/07/26  21:46:22  mike
 * Made explicit the includes of machine.h, vmath.h, and raytrace.h
 * (Butler fix)
 * 
 * Revision 2.2  91/06/22  05:41:08  cjohnson
 * Add -a flag (Autosizing)
 * Change from local Random numbers to msr_* code from librt
 * 
 * Revision 2.1  90/04/13  01:22:48  cjohnson
 * First Relese.
 * 
 * Revision 1.6  90/04/13  00:29:10  cjohnson
 * Add sharpening.
 * Clean up comments.
 * 
 * Revision 1.5  90/04/10  05:22:54  cjohnson
 * add Floyd-Steinburg dither
 * Add Surpentine processing.
 * 
 * Revision 1.4  90/04/10  03:34:21  cjohnson
 * Add Intensity Levels
 * Add tonescale mapping
 * 
 * Revision 1.3  90/04/10  01:04:08  cjohnson
 * Add Classic halftone method
 * 
 * Revision 1.2  90/04/09  17:12:26  cjohnson
 * Finished parameter cracking and processing threshold halftoning.
 * 
 * Revision 1.1  90/04/09  16:13:04  cjohnson
 * Initial revision
 * 
 */
int width=512;		/* width of pixture */
int height=512;		/* height of pixture */
double Beta=0.0;	/* Beta for sharpening */

#define	M_FLOYD	0
#define	M_CLASSIC 1
#define	M_THRESH 2
#define	M_FOLLY 3
int Method=M_FLOYD;	/* Method of halftoning */

int Surpent=0;		/* use serpentine scan lines */
int Levels=1;		/* Number of levels-1 */
int Debug=0;
struct msr_unif *RandomFlag=0;	/* Use random numbers ? */

void cubic_init(int n, int *x, int *y);
void tonescale(unsigned char *map, float Slope, float B, int (*eqptr)() );
int sharpen(unsigned char *buf, int size, int num, FILE *file, unsigned char *Map);
int tone_floyd(int pix, int x, int y, int nx, int ny, int new);
int tone_folly(int pix, int x, int y, int nx, int ny, int new);
int tone_simple(int pix, int x, int y, int nx, int ny, int new);
int tone_classic(int pix, int x, int y, int nx, int ny, int new);

static char usage[] = "\
Usage: halftone [ -h -R -S -a] [-D Debug Level]\n\
	[-s squarefilesize] [-w file_width] [-n file_height]\n\
	[-B contrast] [-I intensity_levels] [-T x y ... tone_curve]\n\
	[-M Method] [file.bw]\n\
	Floyd-Steinberg=0	45 Degree Classic Screen=1\n\
	Thresholding=2		0 Degree Dispersed Screen=3\n";

/*	setup	process parameters and setup working enviroment
 *
 * Entry:
 *	argc	- number of arguments.
 *	argv	- the arguments.
 *
 * Exit:
 *	parameters have been set.
 *	if there is a fatal error exit(!0)
 *
 * Uses:
 *	width	- width of pixture
 *	height	- height of pixture
 *	Beta	- sharpening value.
 *	surpent	- to surpenten rasters?
 *	Levels	- number of intensity levels.
 *	Debug	- debug level
 *	RandomFlag - Add noise to processes.
 *
 * Calls:
 *	cubic_init - setup for tonescale.
 *
 * Method:
 *	straight-forward.
 */
void
setup(int argc, char **argv)
{
	int c;
	int i,j;
	int *Xlist, *Ylist;
	int	autosize = 0;

	while ((c = getopt(argc, argv, "D:hsa:n:w:B:M:RSI:T:")) != EOF) {
		switch(c) {
		case 's':
			width = height = atoi(optarg);
		break;
		case 'n':
			height = atoi(optarg);
		break;
		case 'w':
			width = atoi(optarg);
		break;
		case 'h':
			width = height = 1024;
		break;
		case 'a':
			autosize = 1;
		break;
		case 'B':
			Beta = atof(optarg);
		break;
		case 'M':
			Method = atoi(optarg);
		break;
		case 'R':
			RandomFlag = msr_unif_init(1,0);
		break;
		case 'S':
			Surpent = 1;
		break;
		case 'I':
			Levels = atoi(optarg)-1;
			if (Levels < 1) Levels = 1;
		break;
/*
 * Tone scale processing is a little strange.  The -T option is followed
 * be a list of points.  The points are collected and one point is added
 * at 1024,1024 to let tonescale be stupid.  Cubic_init takes the list
 * of points and generates "cubics" for tonescale to use in generating
 * curve to use for the tone map.  If tonescale is called with no cubics
 * defined tonescale will generate a straight-line (generaly from 0,0 to
 * 255,255).
 */
		case 'T':
			--optind;
			for(i=optind; i < argc && (isdigit(*argv[i]) || 
			    (*argv[i] == '-' && isdigit(*(argv[i]+1)))) ; i++);
			if ((c=i-optind) % 2) {
				fprintf(stderr,"Missing Y coordent for tone map.\n");
				exit(1);
			}
			Xlist = (int *) malloc((c+2)*sizeof(int));
			Ylist = (int *) malloc((c+2)*sizeof(int));

			for (j=0;optind < i; ) {
				Xlist[j] = atoi(argv[optind++]);
				Ylist[j] = atoi(argv[optind++]);
				j++;
			}
			Xlist[j] = 1024;
			Ylist[j] = 1024;
			if (Debug>6) fprintf(stderr,"Number points=%d\n",j+1);
			(void) cubic_init(j+1,Xlist,Ylist);
			free(Xlist);
			free(Ylist);
		break;
/*
 * Debug is not well used at this point a value of 9 will get all 
 * debug statements.  Debug is a level indicator NOT a bit flag.
 */
		case 'D':
			Debug = atoi(optarg);
		break;
		case '?':
			fprintf(stderr,usage);
			exit(1);
		break;
		}
	}
/*
 *	if there are no extra arguments and stdin is a tty then 
 *	the user has given us no input file.  Spit a usage message
 * 	at them and exit.
 */
	if (optind >= argc) {
		if ( isatty(fileno(stdin)) ) {
			(void) fprintf(stderr,usage);
			exit(1);
		}
		if (autosize) {
			(void) fprintf(stderr, usage);
			(void) fprintf(stderr, "Automatic sizing can not be used with pipes.\n");
			exit(1);
		}
	} else {
		if (freopen(argv[optind],"r",stdin) == NULL ) {
			(void) fprintf( stderr,
			    "halftone: cannot open \"%s\" for reading.\n",
			    argv[optind]);
			exit(1);
		}
		if (autosize) {
			if ( !bn_common_file_size(&width, &height, argv[optind], 1)) {
				(void) fprintf(stderr,"halftone: unable to autosize.\n");
			}
		}
	}

	if ( argc > ++optind) {
		(void) fprintf(stderr,"halftone: excess argument(s) ignored.\n");
	}
}

int
main(int argc, char **argv)
{
	int pixel,x,y,i;
	unsigned char *Line, *Out;
	int NewFlag = 1;
	int Scale;
	unsigned char Map[256];
/*
 *	parameter processing.
 */
	setup(argc,argv);
/*
 *	Get a tone map.  Map is the result.  1.0 is slope, 0.0 is
 *	the Y intercept (y=mx+b). 0 is the address of a function to
 *	do a x to y mapping, 0 means use the default function.
 */
	(void) tonescale(Map,1.0,0.0,0);

/*
 * Currently the halftone file is scaled from 0 to 255 on output to
 * ease display via bw-fb.  In the future there might be flag to
 * set Scale to 1 to get a unscaled output.
 */
	Scale = 255/Levels;

	if (Debug) {
		fprintf(stderr,"Debug = %d, Scale = %d\n",Debug, Scale);
	}

	if (Debug>2) {
		for(i=0;i<256;i++) fprintf(stderr,"%d ",Map[i]);
		fprintf(stderr,"\n");
	}

	Line = (unsigned char *) malloc(width);
	Out = (unsigned char *) malloc(width);
/*
 * should be a test here to make sure we got the memory requested.
 */

/*
 *	Currently only the Floyd-Steinburg method uses the surpent flag
 *	so we make things easy with in the 'y' loop by reseting surpent
 *	for all other methods to "No Surpent".
 */
	if (Method != M_FLOYD) Surpent = 0;

	for (y=0; y<height; y++) {
		int NextX;
/*
 * 		A few of the methods benefit by knowing when a new line is
 *		started.
 */
		NewFlag = 1;
		(void) sharpen(Line,1,width,stdin,Map);
/*
 *		Only M_FLOYD will have Surpent != 0.
 */
		if (Surpent && y % 2) {
			for (x=width-1; x>=0; x--) {
				pixel = Line[x];
				Out[x] = Scale*tone_floyd(pixel, x, y, x-1,
				    y+1, NewFlag);
				NewFlag = 0;
			}
		} else {
			for (x=0; x<width; x++) {
				NextX = x+1;
				pixel = Line[x];
				switch (Method) {
				case M_FOLLY:
					Out[x] = Scale*tone_folly(pixel, x, y,
					    NextX, y+1, NewFlag);
				break;
				case M_FLOYD:
					Out[x] = Scale*tone_floyd(pixel, x, y,
					    NextX, y+1, NewFlag);
				break;
				case M_THRESH:
					Out[x]=Scale*tone_simple(pixel, x, y,
					    NextX, y+1, NewFlag);
				break;
				case M_CLASSIC:
					Out[x]=Scale*tone_classic(pixel, x, y,
					    NextX, y+1, NewFlag);
				break;
			}
			NewFlag=0;
		}
		}
		fwrite(Out,1,width,stdout);
	}
	return 0;
}
@


11.9
log
@change conf.h to a wrapped config.h
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /cvs/brlcad/halftone/main.c,v 11.8 2004/04/05 07:47:59 morrison Exp $";
d63 3
@


11.8
log
@merge of ansi-6-0-branch into HEAD
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header$";
d4 5
a8 1
#include "conf.h"
d62 4
a65 1
 * $Log$
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/halftone/main.c,v 11.5 2000/09/01 02:48:08 mike Exp $";
d58 7
a64 1
 * $Log: main.c,v $
d185 1
a185 3
setup(argc,argv)
int argc;
char **argv;
d305 1
a305 3
main(argc,argv)
int argc;
char **argv;
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/halftone/main.c,v 11.7 2002/08/20 17:07:30 jra Exp $";
a58 3
 * Revision 11.7  2002/08/20 17:07:30  jra
 * Restoration of entire source tree to Pre-Hartley state
 *
d179 3
a181 1
setup(int argc, char **argv)
d301 3
a303 1
main(int argc, char **argv)
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d179 3
a181 1
setup(int argc, char **argv)
d301 3
a303 1
main(int argc, char **argv)
@


11.5
log
@
lint
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/halftone/main.c,v 11.4 2000/08/24 23:09:00 mike Exp $";
d59 4
d179 1
a179 3
setup(argc,argv)
int argc;
char **argv;
d299 1
a299 3
main(argc,argv)
int argc;
char **argv;
@


11.4
log
@
lint
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/halftone/main.c,v 11.3 2000/08/24 23:07:42 mike Exp $";
d59 4
d132 8
@


11.3
log
@
lint
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /c/CVS/brlcad/halftone/main.c,v 11.2 1996/12/13 14:33:46 jra Exp $";
d59 4
d283 2
d379 1
@


11.2
log
@pix_common_file_size is now bn_common_file_size.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/main.c,v 11.1 1995/01/04 10:21:51 mike Rel4_4 jra $";
d59 3
@


11.1
log
@Release_4.4
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/main.c,v 10.2 94/08/23 17:50:01 gdurf Exp $";
d58 4
a61 1
 * $Log:	main.c,v $
d266 1
a266 1
			if ( !fb_common_file_size(&width, &height, argv[optind], 1)) {
@


10.2
log
@Added include of conf.h, removed unnecessary externs
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/main.c,v 10.1 1991/10/12 06:53:18 mike Rel4_0 gdurf $";
d58 4
a61 1
 * $Log: main.c,v $
@


10.1
log
@Release_4.0
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/main.c,v 2.5 91/09/23 05:47:40 mike Exp $";
d4 2
d58 4
a61 1
 * $Log:	main.c,v $
a153 2
	extern char	*optarg;
	extern int	optind;
@


2.5
log
@Eliminated prototype warning on atof()
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/main.c,v 2.4 91/07/27 01:58:57 mike Exp $";
d57 3
@


2.4
log
@Removed ^X from end of #include directive.  IBM objects, strenuously.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/main.c,v 2.3 91/07/26 21:46:22 mike Exp $";
d6 1
d8 1
d57 3
a150 1
	double atof();
@


2.3
log
@Made explicit the includes of machine.h, vmath.h, and raytrace.h
(Butler fix)
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/main.c,v 2.2 91/06/22 05:41:08 cjohnson Exp $";
d8 1
a8 1
#include "raytrace.h"
d55 4
@


2.2
log
@Add -a flag (Autosizing)
Change from local Random numbers to msr_* code from librt
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/main.c,v 2.1 90/04/13 01:22:48 cjohnson Rel $";
d6 3
d55 4
@


2.1
log
@First Relese.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: main.c,v 1.6 90/04/13 00:29:10 cjohnson Locked $";
d6 1
d15 1
d52 3
d90 1
a90 1
int RandomFlag=0;	/* Use random numbers ? */
d93 1
a93 1
Usage: halftone [ -h -R -S ] [-D Debug Level]\n\
d136 1
d138 1
a138 1
	while ((c = getopt(argc, argv, "D:hs:n:w:B:M:RSI:T:")) != EOF) {
d152 3
d162 1
a162 1
			RandomFlag = 1;
d226 5
d237 5
@


1.6
log
@Add sharpening.
Clean up comments.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: main.c,v 1.5 90/04/10 05:22:54 cjohnson Locked $";
d50 4
@


1.5
log
@add Floyd-Steinburg dither
Add Surpentine processing.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: main.c,v 1.4 90/04/10 03:34:21 cjohnson Locked $";
d13 1
d15 7
a21 4
 *		-m	method
 *			0 thresh hold method.
 *			1 ordered dither
 *			2 Floyd-Steinburg
a22 1
 *		-I	number of intensities.
d34 7
a40 1
 *	None.
d43 2
a44 1
 *	
d50 4
d68 4
a71 3
int width=512;	/* width of pixture */
int height=512;	/* height of pixture */
double Beta;	/* Beta for sharpening */
d77 1
d81 1
d83 7
d91 25
d126 1
d128 1
a128 1
	while ((c = getopt(argc, argv, "D:s:n:w:B:m:SI:T:")) != EOF) {
d139 3
d145 1
a145 1
		case 'm':
d148 3
d158 9
d185 2
a186 1
			(void) cubic_init(c-1,Xlist,Ylist);
d190 4
d198 1
a198 1
			fprintf(stderr,"Read the usage message.\n");
d203 22
d233 1
a233 1
	int scale;
d235 3
a237 1

d239 5
a244 1
	scale = 255/Levels;
d246 7
d254 1
a254 1
		fprintf(stderr,"Debug = %d, scale = %d\n",Debug, scale);
d256 1
d261 1
d264 3
d268 5
d274 1
d277 9
a285 2
		NewFlag =1;
(void)		fread(Line,1,width,stdin);
d288 2
a289 2
				pixel = Map[Line[x]];
				Out[x] = scale*tone_floyd(pixel, x, y, x-1,
d294 20
a313 20
		for (x=0; x<width; x++) {
			NextX = x+1;
			pixel = Map[Line[x]];
			switch (Method) {
			case M_FOLLY:
				Out[x] = scale*tone_folly(pixel, x, y, NextX,
				    y+1, NewFlag);
			break;
			case M_FLOYD:
				Out[x] = scale*tone_floyd(pixel, x, y, NextX,
				    y+1, NewFlag);
			break;
			case M_THRESH:
				Out[x] = scale*tone_simple(pixel, x, y, NextX,
				    y+1, NewFlag);
			break;
			case M_CLASSIC:
				Out[x] = scale*tone_classic(pixel, x, y, NextX,
				    y+1, NewFlag);
			break;
@


1.4
log
@Add Intensity Levels
Add tonescale mapping
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: main.c,v 1.3 90/04/10 01:04:08 cjohnson Locked $";
d40 4
d139 1
a139 1
	unsigned char *Line;
d156 1
d158 1
d163 8
d172 1
a172 1
			NextX = (x == width-1) ? 0 : x+1;
d176 2
a177 2
				putchar(scale*tone_folly(pixel, x, y, NextX,
				    y+1, NewFlag));
d180 3
d184 2
a185 2
				putchar(scale*tone_simple(pixel, x, y, NextX,
				    y+1, NewFlag));
d188 2
a189 2
				putchar(scale*tone_classic(pixel, x, y, NextX,
				    y+1, NewFlag));
d194 2
@


1.3
log
@Add Classic halftone method
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: main.c,v 1.2 90/04/09 17:12:26 cjohnson Locked $";
d40 3
d59 1
a59 1
int Levels=2;		/* Number of levels */
d95 2
a96 1
			Levels = atoi(optarg);
d98 2
a99 1
		case 't':
d109 1
a109 1
			for (j=0;optind <= i; optind++) {
d116 1
a116 1
			(void) cubic_init(c,Xlist,Ylist);
d134 1
a134 1
	int pixel,x,y;
d137 2
d141 10
a150 1
	
d159 1
a159 1
			pixel = Line[x];
d161 4
a165 1
			case M_FOLLY:
d167 1
a167 1
				putchar(255*tone_simple(pixel, x, y, NextX,
d171 1
a171 1
				putchar(255*tone_classic(pixel, x, y, NextX,
@


1.2
log
@Finished parameter cracking and processing threshold halftoning.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header$";
a5 1
int Debug=0;
d40 3
d47 2
a48 2
int width;	/* width of pixture */
int height;	/* height of pixture */
d57 5
a61 1
main(argc,argv)
a69 1
	unsigned int pixel;
d71 1
a71 1
	while ((c = getopt(argc, argv, "s:n:w:B:m:SI:T:")) != EOF) {
d115 3
d124 8
d133 1
d135 22
a156 5
	while((pixel = (unsigned int) getchar()) != (unsigned) EOF) {
		if (tone_simple(pixel,0,0,0,0,0)) {
			putchar('\255');
		} else {
			putchar('\0');
@


1.1
log
@Initial revision
@
text
@d1 3
d5 1
d21 2
a22 7
 *		-t	tonescale selector
 *			0 line
 *			1 cubic
 *		-x	first X parameter
 *		-X	second X parameter
 *		-y	first Y parameter
 *		-Y	second Y parametetr
d40 4
a43 2
 * $Header$
 * $Log$
d45 10
a54 2
extern char	*optarg;
extern int	optind;
d59 2
d62 3
d66 1
a66 1
	while ((c = getopt(argc, argv, "s:n:w:B:m:SI:t:x:X:y:Y:") != EOF)
d81 1
a81 1
			method = atoi(optarg);
d84 1
a84 1
			surpent = 2;
d87 1
a87 1
			levels = atoi(optarg);
d90 19
a108 1
			tone = atoi(optarg);
d110 3
a112 2
		case 'x':
			PX[0] = atof(optarg);
d114 12
a125 10
		case 'X':
			PX[1] = atof(optarg);
		break;
		case 'y':
			PY[0] = atof(optarg);
		break;
		case 'Y':
			PY[1] = atof(optarg);
		break;
		
@
