head	11.9;
access;
symbols
	ansi-20040405-merged:11.6.2.1
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.6
	premerge-autoconf:11.6
	ansi-20040316-freeze:11.6.2.1
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.6
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.3
	offsite-5-3-pre:11.4
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.24.04.01.40;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.07.47.59;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.07.31;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	2002.08.15.20.54.43;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2000.08.24.23.09.00;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.01.31.16.20.25;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	96.07.17.17.02.46;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.21.56;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.23.17.58.17;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.53.23;	author mike;	state Rel4_0;
branches;
next	2.2;

2.2
date	91.07.19.01.51.34;	author mike;	state Exp;
branches;
next	2.1;

2.1
date	90.04.13.01.23.27;	author cjohnson;	state Rel;
branches;
next	1.3;

1.3
date	90.04.13.01.13.52;	author cjohnson;	state Exp;
branches;
next	1.2;

1.2
date	90.04.10.03.29.34;	author cjohnson;	state Exp;
branches;
next	1.1;

1.1
date	90.04.09.16.18.47;	author cjohnson;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.00.59;	author morrison;	state Exp;
branches;
next	;


desc
@Tone scale mapping routine with cubic fit.
@


11.9
log
@moved to src/halftone/
@
text
@#ifndef lint
static const char RCSid[] = "$Header: /n/xoff/cvs/brlcad/halftone/tonescale.c,v 11.8 2004/05/10 15:30:42 erikg Exp $";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#include "machine.h"
#include "externs.h"		/* For alloc */

#define	DLEVEL	1
extern int Debug;
typedef struct Cubic {
	double	x,A,B,C,D;
} C;
static struct Cubic	*EqCubics=0;
int eq_cubic(int x);

/*	tonescale	Given a raw pixel value, return a scaled value
 *
 * This is normally used to map the output devices characteristics to
 * the input intinsites.  There can be a diffrent map for each color.
 *
 * Entry:
 *	map	pointer to a 256 byte map
 *	Slope	Slope of a line
 *	B	offset of line.
 *	eqptr	Null or the pointer to a equation for generating a curve
 *
 * Exit:
 *	map	is filled using eqptr 
 *
 * Uses:
 *	EqCubics	x,A,B,C,D of a set of cubics for a curve
 *
 * Calls:
 *	eq_line	given x return y; requires EqLineSlope and EqLineB
 *	eqptr	if not null.
 *
 * Method:
 *	straight-forward.
 *
 * Author:
 *	Christopher T. Johnson	- 90/03/22
 *
 * Change History:
 *	ctj 90/04/04 - change to use a standard cubic line format for the
 *	tone scale.  If eqptr is null then Set EqCubic to evaluate to a line.
 *
 * $Log: tonescale.c,v $
 * Revision 11.8  2004/05/10 15:30:42  erikg
 * change conf.h to a wrapped config.h
 *
 * Revision 11.7  2004/04/05 07:47:59  morrison
 * merge of ansi-6-0-branch into HEAD
 *
 * Revision 11.6.2.1  2002/09/19 18:00:59  morrison
 * Initial ANSIfication
 *
 * Revision 11.6  2002/08/20 17:07:31  jra
 * Restoration of entire source tree to Pre-Hartley state
 *
 * Revision 11.4  2000/08/24 23:09:00  mike
 *
 * lint
 *
 * Revision 11.3  2000/01/31 16:20:25  jra
 * Eliminated an unused variable
 *
 * Revision 11.2  1996/07/17 17:02:46  jra
 * Minor Mods for IRIX 6.2
 *
 * Revision 11.1  1995/01/04  10:21:56  mike
 * Release_4.4
 *
 * Revision 10.2  94/08/23  17:58:17  gdurf
 * Added include of conf.h, machine.h and externs.h, the last for malloc()
 * 
 * Revision 10.1  1991/10/12  06:53:23  mike
 * Release_4.0
 *
 * Revision 2.2  91/07/19  01:51:34  mike
 * Can't declare something static and extern both
 * 
 * Revision 2.1  90/04/13  01:23:27  cjohnson
 * First Relese.
 * 
 * Revision 1.3  90/04/13  01:13:52  cjohnson
 * Cleanup the comments.
 * 
 * Revision 1.2  90/04/10  03:29:34  cjohnson
 * Bug fixes to allow Tonescale to be used.
 * added debug to print Cubics
 * 
 * Revision 1.1  90/04/09  16:18:47  cjohnson
 * Initial revision
 * 
 */
void
tonescale(unsigned char *map, float Slope, float B, int (*eqptr) (/* ??? */))
{
	int i,result;

/*
 * 	Is there a function we should be using?
 * N.B.	This code has not been tested with a funtion being passed in.
 */
	if (!eqptr ) eqptr=eq_cubic;

/*
 *	If there is no defined Cubics then set a straight line.
 */
	if (!EqCubics) {
/*
 *		We need an extra cubic to make eq_cubic processing
 *		easier.
 */
		EqCubics = (struct Cubic *)malloc(2*sizeof(struct Cubic));
		EqCubics[0].x = 0.0;
		EqCubics[0].A = B;
		EqCubics[0].B = Slope;
		EqCubics[1].x = 256.0;
		EqCubics[0].C = EqCubics[0].D =	EqCubics[1].A =
		    EqCubics[1].B = EqCubics[1].C = EqCubics[1].D = 0.0;
	}

	for (i=0;i<256;i++) {
		result=eqptr(i);
		if (result<0) {
			if (Debug >= DLEVEL) {
				fprintf(stderr,"tonescale: y=%d, x=%d\n",
				    result, i);
			}
			result=0;
		} else if (result > 255) {
			if (Debug >= DLEVEL) {
				fprintf(stderr,"tonescale: y=%d, x=%d\n",
				    result, i);
			}
			result=255;
		}

		map[i] = result;
	}
}

/* eq_cubic	default tone scale alorithm
 *
 * impliment
 *	y = A+B*(X-x)+C*(X-x)^2+D*(X-x)^3
 * as a default tonescale algorithm;
 *
 * Entry:
 *	x	x value for equation.
 *
 * Exit:
 *	returns	y in the range 0-255  reqires clipping.
 *
 * Calls:
 *	none.
 *
 * Uses:
 *	EqCubic		list of Cubic equations.
 *
 * Method:
 *	straight-forward.
 *
 * Author:
 *	Christopher T. Johnson - 90/03/22
 */
int
eq_cubic(int x)
{
	int y;
	struct Cubic *p = EqCubics;

	if (!p) {
		fprintf(stderr,"eq_cubic called with no cubics!\n");
		return(x);
	}
	while (x >= (p+1)->x) p++;
	
	y = ((p->D * (x - p->x) + p->C) * (x - p->x) + p->B)
	    * (x - p->x) + p->A;

	if (y<0) y = 0;
	if (y>255) y = 255;
	return(y);
}

/* cubic_init	initialize a cubic list given a set of points.
 *
 * Entry:
 *	n	number of points
 *	x	list of x points.
 *	y	list of y points.
 *
 * Exit:
 *	EqCubic	is set to a list of cubics
 *
 * Calls:
 *	none.
 *
 * Uses:
 *	none.
 *
 * Method:
 *	Cubic Spline Interpolation
 *	Taken from page 107 of:
 *		Numerical Analysis 2nd Edition by
 *		Richard L. Burden, J. Douglas Faires and
 *		    Albert C. Reynalds.
 *
 * I.e.  I don't have a clue to what is going on...... :-(
 *	
 */
void
cubic_init(int n, int *x, int *y)
{
	int i;
	double *h,*alpha,*mi,*z,*l;

	h = (double *) malloc(n*sizeof(double));
	alpha = (double *) malloc(n*sizeof(double));
	mi = (double *) malloc(n*sizeof(double));
	z = (double *) malloc(n*sizeof(double));
	l = (double *) malloc(n*sizeof(double));

	EqCubics = (struct Cubic *) malloc(n*sizeof(struct Cubic));

	for (i=0; i<n-1; i++) {
		h[i] = x[i+1] - x[i];
		EqCubics[i].x = x[i];
		EqCubics[i].A = y[i];
	}

	EqCubics[i].x = x[i];
	EqCubics[i].A = y[i];

	for (i=1; i<n-1; i++) {
		alpha[i] = 3.0*(y[i+1]*h[i-1] - y[i]*(x[i+1]-x[i-1]) +
		    y[i-1]*h[i]) / (h[i-1]*h[i]);
	}

	z[0] = 0;
	mi[0] = 0;

	for (i=1; i<n-1; i++) {
		l[i] = 2.0*(x[i+1] - x[i-1]) - h[i-1]*mi[i-1];
		mi[i] = h[i]/l[i];
		z[i] = (alpha[i]-h[i-1]*z[i-1]) / l[i];
	}

	l[i] = 1.0;
	z[i] = 0.0;
	EqCubics[i].C = z[i];

	for (i=n-2; i>=0; i--) {
		EqCubics[i].C = z[i] - mi[i]*EqCubics[i+1].C;
		EqCubics[i].B = (y[i+1] - y[i])/h[i] -
		    h[i]*(EqCubics[i+1].C + 2.0*EqCubics[i].C)/3.0;
		EqCubics[i].D = (EqCubics[i+1].C - EqCubics[i].C)/(3.0*h[i]);
	}

	free(h);
	free(alpha);
	free(mi);
	free(z);
	free(l);
	if (Debug>1) {
		for(i=0;i<n;i++) {
			fprintf(stderr,"x=%g, A=%g, B=%g, C=%g, D=%g\n",
			EqCubics[i].x,EqCubics[i].A,EqCubics[i].B,
			EqCubics[i].C,EqCubics[i].D);
		}
	}
}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /cvs/brlcad/halftone/tonescale.c,v 11.7 2004/04/05 07:47:59 morrison Exp $";
d56 3
@


11.7
log
@merge of ansi-6-0-branch into HEAD
@
text
@d2 5
a6 1
static const char RCSid[] = "$Header$";
d9 1
a9 1
#include "conf.h"
d55 4
a58 1
 * $Log$
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/halftone/tonescale.c,v 11.4 2000/08/24 23:09:00 mike Exp $";
d18 1
a18 1
int eq_cubic();
d51 7
a57 1
 * $Log: tonescale.c,v $
d95 1
a95 5
tonescale(map,Slope,B,eqptr)
unsigned char	*map;
float		Slope,
		B;
int 		(*eqptr)();
d167 1
a167 2
eq_cubic(x)
int x;
d213 1
a213 3
cubic_init(n,x,y)
int n;
int *x,*y;
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/halftone/tonescale.c,v 11.6 2002/08/20 17:07:31 jra Exp $";
d18 1
a18 1
int eq_cubic(int x);
a51 3
 * Revision 11.6  2002/08/20 17:07:31  jra
 * Restoration of entire source tree to Pre-Hartley state
 *
d89 5
a93 1
tonescale(unsigned char *map, float Slope, float B, int (*eqptr) (/* ??? */))
d165 2
a166 1
eq_cubic(int x)
d212 3
a214 1
cubic_init(int n, int *x, int *y)
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d18 1
a18 1
int eq_cubic(int x);
d89 5
a93 1
tonescale(unsigned char *map, float Slope, float B, int (*eqptr) (/* ??? */))
d165 2
a166 1
eq_cubic(int x)
d212 3
a214 1
cubic_init(int n, int *x, int *y)
@


11.4
log
@
lint
@
text
@d2 1
a2 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/halftone/tonescale.c,v 11.3 2000/01/31 16:20:25 jra Exp $";
d18 1
a18 1
int eq_cubic();
d52 4
d89 1
a89 5
tonescale(map,Slope,B,eqptr)
unsigned char	*map;
float		Slope,
		B;
int 		(*eqptr)();
d161 1
a161 2
eq_cubic(x)
int x;
d207 1
a207 3
cubic_init(n,x,y)
int n;
int *x,*y;
@


11.3
log
@Eliminated an unused variable
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /c/CVS/brlcad/halftone/tonescale.c,v 11.2 1996/07/17 17:02:46 jra Exp $";
d52 3
d160 1
@


11.2
log
@Minor Mods for IRIX 6.2
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/tonescale.c,v 11.1 1995/01/04 10:21:56 mike Rel4_4 jra $";
d52 3
d208 1
a208 1
	int i,j;
@


11.1
log
@Release_4.4
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/tonescale.c,v 10.2 94/08/23 17:58:17 gdurf Exp $";
d51 4
a54 1
 * $Log:	tonescale.c,v $
d200 1
@


10.2
log
@Added include of conf.h, machine.h and externs.h, the last for malloc()
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/tonescale.c,v 10.1 1991/10/12 06:53:23 mike Rel4_0 gdurf $";
d51 4
a54 1
 * $Log: tonescale.c,v $
@


10.1
log
@Release_4.0
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/tonescale.c,v 2.2 91/07/19 01:51:34 mike Exp $";
d4 3
d8 4
d51 4
a54 1
 * $Log:	tonescale.c,v $
@


2.2
log
@Can't declare something static and extern both
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: /m/cad/halftone/RCS/tonescale.c,v 2.1 90/04/13 01:23:27 cjohnson Rel $";
d45 3
@


2.1
log
@First Relese.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: tonescale.c,v 1.3 90/04/13 01:13:52 cjohnson Locked $";
d10 1
a10 1
extern struct Cubic *EqCubics;
d45 3
a110 1
static struct Cubic	*EqCubics=0;
@


1.3
log
@Cleanup the comments.
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: tonescale.c,v 1.2 90/04/10 03:29:34 cjohnson Locked $";
d45 3
@


1.2
log
@Bug fixes to allow Tonescale to be used.
added debug to print Cubics
@
text
@d2 1
a2 1
static char rcsid[] = "$Header: tonescale.c,v 1.1 90/04/09 16:18:47 cjohnson Locked $";
d10 3
d45 4
a52 2
extern struct Cubic *EqCubics;
int eq_cubic();
d62 4
d68 3
d72 4
d104 1
d116 1
a116 1
 *	returns	y in the range 0-255  reqires a clipping.
d149 1
d167 8
a174 1
 *	diagnal solution to cubics taken from Lee Butler's book.
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
static char rcsid[] = "$Header$";
d41 4
a44 1
 * $Log$
d57 3
a59 2
	if (!eqptr) {
		eqptr=eq_cubic;
d88 1
a88 1
static struct Cubic	*EqCubics;
d205 7
@
