head	1.3;
access;
symbols
	rel-5-2:1.2
	rel-5-1-patches:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.1
	rel-5-0beta:1.1;
locks; strict;
comment	@# @;


1.3
date	2000.12.06.21.21.56;	author bparker;	state dead;
branches;
next	1.2;

1.2
date	99.10.19.20.02.53;	author jra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.06.02.19.52.04;	author jra;	state Exp;
branches;
next	;

1.2.2.1
date	2000.12.06.21.27.01;	author bparker;	state dead;
branches;
next	;


desc
@Original
@


1.3
log
@Upgrading to newer version
@
text
@# This file is a Tcl script to test menus in Tk.  It is
# organized in the standard fashion for Tcl tests. It tests
# the common implementation of Macintosh and Windows menus.
#
# Copyright (c) 1995-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
# All rights reserved.
#
# RCS: @@(#) $Id: macWinMenu.test,v 1.2 1999/10/19 20:02:53 jra Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {[lsearch [image types] test] < 0} {
    puts "This application hasn't been compiled with the \"test\" image"
    puts "type, so I can't run this test.  Are you sure you're using"
    puts "tktest instead of wish?"
    ::tcltest::cleanupTests
    return
}

# Some tests require user interaction on non-unix platform
set ::tcltest::testConfig(nonUnixUserInteraction) \
    [expr {$::tcltest::testConfig(userInteraction) || \
	$::tcltest::testConfig(unixOnly)}]

proc deleteWindows {} {
    foreach i [winfo children .] {
    	catch [destroy $i]
    }
}

deleteWindows
wm geometry . {}
raise .

test macWinMenu-1.1 {PreprocessMenu} {macOrPc nonUnixUserInteraction} {
    catch {destroy .m1}
    menu .m1 -postcommand "destroy .m1"
    .m1 add command -label "macWinMenu-1.1: Hit Escape"
    list [catch {.m1 post 40 40} msg] $msg
} {0 {}}
test macWinMenu-1.2 {PreprocessMenu} {macOrPc nonUnixUserInteraction} {
    catch {destroy .m1}
    catch {destroy .m2}
    set foo1 foo
    set foo2 foo
    menu .m1 -postcommand "set foo1 .m1"
    .m1 add cascade -menu .m2 -label "macWinMenu-1.2: Hit Escape"
    menu .m2 -postcommand "set foo2 .m2"
    update idletasks
    list [catch {.m1 post 40 40} msg] $msg [set foo1] [set foo2] \
	    [destroy .m1 .m2] [catch {unset foo1}] [catch {unset foo2}]
} {0 .m2 .m1 .m2 {} 0 0}

test macWinMenu-1.3 {PreprocessMenu} {macOrPc nonUnixUserInteraction} {
    catch {destroy .l1}
    catch {destroy .m1}
    catch {destroy .m2}
    catch {destroy .m3}
    label .l1 -text "Preparing menus..."
    pack .l1
    update idletasks
    menu .m1 -postcommand ".l1 configure -text \"Destroying .m1...\"; update idletasks; destroy .m1"
    menu .m2 -postcommand ".l1 configure -text \"Destroying .m2...\"; update idletasks; destroy .m2"
    menu .m3 -postcommand ".l1 configure -text \"Destroying .m3...\"; update idletasks; destroy .m3"
    .m1 add cascade -menu .m2 -label "macWinMenu-1.3: Hit Escape (.m2)"
    .m1 add cascade -menu .m3 -label ".m3"
    update idletasks
    list [catch {.m1 post 40 40} msg] $msg [destroy .l1 .m2 .m3]
} {0 {} {}}
test macWinMenu-1.4 {PreprocessMenu} {macOrPc} {
    catch {destroy .l1}
    catch {destroy .m1}
    catch {destroy .m2}
    catch {destroy .m3}
    catch {destroy .m4}
    label .l1 -text "Preparing menus..."
    pack .l1
    update idletasks
    menu .m1 -postcommand ".l1 configure -text \"Destroying .m1...\"; update idletasks; destroy .m1"
    .m1 add cascade -menu .m2 -label "macWinMenu-1.4: Hit Escape (.m2)"
    .m1 add cascade -menu .m3 -label ".m3"
    menu .m2 -postcommand ".l1 configure -text \"Destroying .m2...\"; update idletasks; destroy .m2"
    .m2 add cascade -menu .m4 -label ".m4"
    menu .m3 -postcommand ".l1 configure -text \"Destroying .m3...\"; update idletasks; destroy .m3"
    menu .m4 -postcommand ".l1 configure -text \"Destroying .m4...\"; update idletasks; destroy .m4"
    update idletasks
    list [catch {.m1 post 40 40} msg] $msg [destroy .l1 .m2 .m3 .m4]
} {0 {} {}}
test macWinMenu-1.5 {PreprocessMenu} {macOrPc} {
    catch {destroy .m1}
    catch {destroy .m2}
    menu .m1
    .m1 add cascade -menu .m2 -label "You may need to hit Escape to get this menu to go away."
    menu .m2 -postcommand glorp
    list [catch {.m1 post 40 40} msg] $msg [destroy .m1 .m2]
} {1 {invalid command name "glorp"} {}}

test macWinMenu-2.1 {TkPreprocessMenu} {macOrPc nonUnixUserInteraction} {
    catch {destroy .m1}
    set foo test
    menu .m1 -postcommand "set foo 2.1"
    .m1 add command -label "macWinMenu-2.1: Hit Escape"
    list [catch {.m1 post 40 40} msg] $msg [set foo] [destroy .m1] [unset foo]
} {0 2.1 2.1 {} {}}

# cleanup
deleteWindows
::tcltest::cleanupTests
return













@


1.2
log
@tk 8.2.1 update
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: macWinMenu.test,v 1.3 1999/04/16 01:51:39 stanton Exp $
@


1.2.2.1
log
@Upgrading to newer version
@
text
@d9 1
a9 1
# RCS: @@(#) $Id: macWinMenu.test,v 1.2 1999/10/19 20:02:53 jra Exp $
@


1.1
log
@Initial revision
@
text
@d6 2
d9 1
a9 4
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# SCCS: @@(#) macWinMenu.test 1.13 97/04/10 14:41:29
d11 2
a12 2
if {$tcl_platform(platform) == "unix"} {
    return
d19 1
d23 4
a26 3
if {[info procs test] != "test"} {
    source defs
}
d38 1
a38 8
if {$tcl_platform(platform) == "windows" && ![info exists INTERACTIVE]} {
    puts " Some tests were skipped because they could not be performed"
    puts " automatically on this platform. If you wish to execute them"
    puts " interactively, set the TCL variable INTERACTIVE and re-run"
    puts " the test."
}

test macWinMenu-1.1 {PreprocessMenu} {
d44 14
a57 14
if {$tcl_platform(platform) != "windows" || [info exists INTERACTIVE]} {
    test macWinMenu-1.2 {PreprocessMenu} {
	catch {destroy .m1}
	catch {destroy .m2}
	set foo1 foo
	set foo2 foo
	menu .m1 -postcommand "set foo1 .m1"
	.m1 add cascade -menu .m2 -label "macWinMenu-1.2: Hit Escape"
	menu .m2 -postcommand "set foo2 .m2"
	update idletasks
	list [catch {.m1 post 40 40} msg] $msg [set foo1] [set foo2] [destroy .m1 .m2] [catch {unset foo1}] [catch {unset foo2}]
    } {0 .m2 .m1 .m2 {} 0 0}
}
test macWinMenu-1.3 {PreprocessMenu} {
d73 1
a73 1
test macWinMenu-1.4 {PreprocessMenu} {
d92 1
a92 1
test macWinMenu-1.5 {PreprocessMenu} {
d101 7
a107 9
if {$tcl_platform(platform) != "windows" || [info exists INTERACTIVE]} {
    test macWinMenu-2.1 {TkPreprocessMenu} {
	catch {destroy .m1}
	set foo test
	menu .m1 -postcommand "set foo 2.1"
	.m1 add command -label "macWinMenu-2.1: Hit Escape"
	list [catch {.m1 post 40 40} msg] $msg [set foo] [destroy .m1] [unset foo]
    } {0 2.1 2.1 {} {}}
}
d109 1
d111 15
@

