head	1.3;
access;
symbols
	rel-5-2:1.2
	rel-5-1-patches:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.1
	rel-5-0beta:1.1;
locks; strict;
comment	@# @;


1.3
date	2000.12.06.21.21.51;	author bparker;	state dead;
branches;
next	1.2;

1.2
date	99.10.19.20.02.50;	author jra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.06.02.19.52.04;	author jra;	state Exp;
branches;
next	;

1.2.2.1
date	2000.12.06.21.26.57;	author bparker;	state dead;
branches;
next	;


desc
@Original
@


1.3
log
@Upgrading to newer version
@
text
@README -- Tk test suite design document.

RCS: @@(#) $Id: README,v 1.2 1999/10/19 20:02:50 jra Exp $

This directory contains a set of validation tests for the Tk commands.
Please see the tests/README file in the Tcl source distribution for
information about the test suite.
@


1.2
log
@tk 8.2.1 update
@
text
@d3 1
a3 1
RCS: @@(#) $Id: README,v 1.3 1999/04/16 01:51:33 stanton Exp $
@


1.2.2.1
log
@Upgrading to newer version
@
text
@d3 1
a3 1
RCS: @@(#) $Id: README,v 1.2 1999/10/19 20:02:50 jra Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2
Tk Test Suite
--------------
d3 1
a3 1
SCCS: @@(#) README 1.2 96/03/27 08:52:21
d5 3
a7 25
This directory contains a set of validation tests for Tk.
Each of the files whose name ends in ".test" is intended to
fully exercise one or a few Tk features.  The features
tested by a given file are listed in the first line of the
file.  The test suite is nowhere near complete yet.  Contributions
of additional tests would be most welcome.

You can run the tests in two ways:
    (a) type "make test" in the directory ../unix; this will run all of
        the tests.
    (b) start up tktest in this directory, then "source" the test
        file (for example, type "source pack.test").  To run all
	of the tests, type "source all".
In either case no output will be generated if all goes well, except
for a listing of the tests.  If there are errors then additional
messages will appear.

For more details on the testing environment, see the README
file in the Tcl test directory.

You can also run a set of visual tests, which create various screens
that you can verify visually for appropriate behavior.  The visual
tests are available through the "visual" script:  if you invoke this
script, it creates a main window with a bunch of menus.  Each menu
runs a particular test.
@

