head	1.3;
access;
symbols
	rel-5-2:1.2
	rel-5-1-patches:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.1
	rel-5-0beta:1.1;
locks; strict;
comment	@ * @;


1.3
date	2000.12.06.21.21.24;	author bparker;	state dead;
branches;
next	1.2;

1.2
date	99.10.19.20.02.29;	author jra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.06.02.19.47.54;	author jra;	state Exp;
branches;
next	;

1.2.2.1
date	2000.12.06.21.26.37;	author bparker;	state dead;
branches;
next	;


desc
@Original
@


1.3
log
@Upgrading to newer version
@
text
@/* 
 * tkInitScript.h --
 *
 *	This file contains Unix & Windows common init script
 *      It is not used on the Mac. (the mac init script is in tkMacInit.c)
 *
 * Copyright (c) 1997 Sun Microsystems, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tkInitScript.h,v 1.2 1999/10/19 20:02:29 jra Exp $
 */



/*
 * In order to find tk.tcl during initialization, the following script
 * is invoked by Tk_Init().  It looks in several different directories:
 *
 *	$tk_library		- can specify a primary location, if set
 *				  no other locations will be checked
 *
 *	$env(TK_LIBRARY)	- highest priority so user can always override
 *				  the search path unless the application has
 *				  specified an exact directory above
 *
 *	$tcl_library/../tk$tk_version
 *				- look relative to init.tcl in an installed
 *				  lib directory (e.g. /usr/local)
 *
 *	<executable directory>/../lib/tk$tk_version
 *				- look for a lib/tk<ver> in a sibling of
 *				  the bin directory (e.g. /usr/local)
 *
 *	<executable directory>/../library
 *				- look in Tk build directory
 *
 *	<executable directory>/../../tk$tk_patchLevel/library
 *				- look for Tk build directory relative
 *				  to a parallel build directory
 *
 * The first directory on this path that contains a valid tk.tcl script
 * will be set ast the value of tk_library.
 *
 * Note that this entire search mechanism can be bypassed by defining an
 * alternate tkInit procedure before calling Tk_Init().
 */

static char initScript[] = "if {[info proc tkInit]==\"\"} {\n\
  proc tkInit {} {\n\
    global tk_library tk_version tk_patchLevel\n\
      rename tkInit {}\n\
    tcl_findLibrary tk $tk_version $tk_patchLevel tk.tcl TK_LIBRARY tk_library\n\
  }\n\
}\n\
tkInit";

@


1.2
log
@tk 8.2.1 update
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkInitScript.h,v 1.8 1999/04/16 01:51:15 stanton Exp $
@


1.2.2.1
log
@Upgrading to newer version
@
text
@d12 1
a12 1
 * RCS: @@(#) $Id: tkInitScript.h,v 1.2 1999/10/19 20:02:29 jra Exp $
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
 * SCCS: @@(#) tkInitScript.h 1.3 97/08/11 19:12:28
d18 30
a47 7
 * The following string is the startup script executed in new
 * interpreters.  It looks in several different directories
 * for a script "tk.tcl" that is compatible with this version
 * of Tk.  The tk.tcl script does all of the real work of
 * initialization.
 * When called from a safe interpreter, it does not use file exists.
 * we don't use pwd either because of safe interpreters.
d50 6
a55 44
static char initScript[] =
"proc tkInit {} {\n\
    global tk_library tk_version tk_patchLevel env errorInfo\n\
    rename tkInit {}\n\
    set errors \"\"\n\
    if {![info exists tk_library]} {\n\
	set tk_library .\n\
    }\n\
    set dirs {}\n\
    if {[info exists env(TK_LIBRARY)]} {\n\
	lappend dirs $env(TK_LIBRARY)\n\
    }\n\
    lappend dirs $tk_library\n\
    lappend dirs [file join [file dirname [info library]] tk$tk_version]\n\
    set parentDir [file dirname [file dirname [info nameofexecutable]]]\n\
    lappend dirs [file join $parentDir tk$tk_version]\n\
    lappend dirs [file join $parentDir lib tk$tk_version]\n\
    lappend dirs [file join $parentDir library]\n\
    set parentParentDir [file dirname $parentDir]\n\
    if [string match {*[ab]*} $tk_patchLevel] {\n\
        set dirSuffix $tk_patchLevel\n\
    } else {\n\
        set dirSuffix $tk_version\n\
    }\n\
    lappend dirs [file join $parentParentDir tk$dirSuffix library]\n\
    lappend dirs [file join $parentParentDir library]\n\
    lappend dirs [file join [file dirname \
	[file dirname [info library]]] tk$dirSuffix library]\n\
    foreach i $dirs {\n\
	set tk_library $i\n\
	set tkfile [file join $i tk.tcl]\n\
        if {[interp issafe] || [file exists $tkfile]} {\n\
	    if {![catch {uplevel #0 [list source $tkfile]} msg]} {\n\
		return\n\
	    } else {\n\
		append errors \"$tkfile: $msg\n$errorInfo\n\"\n\
	    }\n\
	}\n\
    }\n\
    set msg \"Can't find a usable tk.tcl in the following directories: \n\"\n\
    append msg \"    $dirs\n\n\"\n\
    append msg \"$errors\n\n\"\n\
    append msg \"This probably means that Tk wasn't installed properly.\n\"\n\
    error $msg\n\
@

