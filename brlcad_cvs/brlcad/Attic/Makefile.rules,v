head	7.3;
access;
symbols
	ansi-20040405-merged:7.2
	premerge-autoconf:7.2
	ansi-20040316-freeze:7.2
	postmerge-20040315-windows:7.2
	premerge-20040315-windows:7.2
	windows-20040315-freeze:7.2
	autoconf-20031203:7.2
	autoconf-20031202:7.2
	phong-branch:7.2.0.12
	photonmap-branch:7.2.0.10
	rel-6-1-DP:7.2
	windows-branch:7.2.0.8
	rel-6-0-2:7.2
	ansi-branch:7.2.0.6
	rel-6-0-1-branch:7.2.0.4
	hartley-6-0-post:7.2
	hartley-6-0-pre:7.2
	rel-6-0-1:7.2
	rel-6-0:7.2
	rel-5-4:7.2
	offsite-5-3-pre:7.2
	rel-5-3:7.2
	rel-5-2:7.2
	rel-5-1-branch:7.2.0.2
	rel-5-1:7.2
	rel-5-0:7.2
	rel-5-0-beta:7.2
	rel-4-5:7.2
	ctj-4-5-post:7.2
	ctj-4-5-pre:7.2
	rel-4-4:7.2
	rel-4-0:7.2
	rel-3-5:7.2
	rel-3-0:7.2
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:1.2
	AUTOCONF:7.2.0.14;
locks; strict;


7.3
date	2004.03.18.18.15.13;	author erikg;	state dead;
branches;
next	7.2;

7.2
date	88.09.17.04.11.32;	author mike;	state Exp;
branches
	7.2.14.1;
next	7.1;

7.1
date	87.11.02.23.22.10;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.07.47.58;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.21.46.54;	author mike;	state Rel;
branches;
next	1.3;

1.3
date	87.06.24.21.30.53;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	87.02.13.00.50.12;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	87.02.12.21.49.58;	author mike;	state Exp;
branches;
next	;

7.2.14.1
date	2004.03.18.18.08.49;	author erikg;	state dead;
branches;
next	;


desc
@Rules for 2nd level CAD Makefiles
@


7.3
log
@merge of AUTOCONF branch in to HEAD
@
text
@#################################################################
#								#
#			Makefile.rules				#
#								#
#  Author -							#
#	Michael John Muuss					#
#								#
#  Source -							#
#	SECAD/VLD Computing Consortium, Bldg 394		#
#	The U. S. Army Ballistic Research Laboratory		#
#	Aberdeen Proving Ground, Maryland  21005		#
#								#
#  $Header: /cvs/brlcad/Makefile.rules,v 7.2 1988/09/17 04:11:32 mike Exp $	#
#								#
#################################################################

#  Define default list of targets to be made
all:		${PRODUCTS}

#	Generic SCCS rule:
#.DEFAULT:
#	$(GET) $(GFLAGS) -p s.$@@ > $@@
#	touch $@@

# This is how to make the product, but may not always apply (eg, libs).
# Also, this construct only works with the SysV make.
#${PRODUCTS}:	$$@@.o ${OBJS}
#	$(CC) -o $@@ ${LDFLAGS} $@@.o ${OBJS} ${LIBES} 
#	size $@@

# Format sources for printing on stdout.
# The invoker is responsible for diverting to their printer of choice.
print:		${MAKEFILE} ${HEADERS} ${CFILES} ${TFILES}
	@@pr ${MAKEFILE} ${HEADERS} ${CFILES} ${TFILES} *.${MANSECTION}
	@@nroff -Tlp -man *.${MANSECTION}

# Don't bother doing the stub pages
typeset:
	${TYPESET_MAN1} *.${MANSECTION} ${TYPESET_MAN2}

lint:		${HEADERS} ${CFILES}
	${LINT} ${LFLAGS} -I${INCDIR} ${CFILES} ${LLIBES} > ${SRCDIR}.lint


tags:		${HEADERS} ${CFILES}
	ctags ${HEADERS} ${CFILES}

flow:		${HEADERS} ${CFILES}
	cflow -I${INCDIR} ${CFILES} > ${SRCDIR}.flow

xref:		${HEADERS} ${CFILES}
	cxref -c -s -w132 -I${INCDIR} ${CFILES} > ${SRCDIR}.xref

compare:	all
	for prod in ${PRODUCTS} ; \
		do	cmp ${BINDIR}/$$prod $$prod; \
		done

uninstall:	all
	-@@if test -n "${PRODUCTS}" ; \
	then	$(MAKE) $(MFLAGS) -$(MAKEFLAGS) uninst-prod ; \
	fi
	-@@files=`echo *.${MANSECTION}` ; \
	if test "$$files" != '*'.${MANSECTION} ; \
	then	$(MAKE) $(MFLAGS) -$(MAKEFLAGS) uninst-man ; \
	fi
	-@@files=`echo *.${MANSECTION}.stub` ; \
	if test "$$files" != '*'.${MANSECTION}.stub ; \
	then	$(MAKE) $(MFLAGS) -$(MAKEFLAGS) uninst-stub ; \
	fi

uninst-prod:
	-@@for prod in ${PRODUCTS} ; \
	do	rm -f ${BINDIR}/$$prod ${BINDIR}/$$prod.bak 2>/dev/null; \
	done

uninst-man:
	-@@for man in *.${MANSECTION} ; \
	do	rm -f ${MANDIR}${MANSECTION}/$$man \
		    ${MANDIR}${MANSECTION}/$$man.bak 2>/dev/null ; \
	done

uninst-stub:
	-@@for stub in *.${MANSECTION}.stub ; \
	do	man=`basename $$stub .stub`; \
		rm -f ${MANDIR}${MANSECTION}/$$man \
		    ${MANDIR}${MANSECTION}/$$man.bak 2>/dev/null ; \
	done

# Handle all phases of final installation
install:	all
	-@@if test -n "${PRODUCTS}" ; \
	then	$(MAKE) $(MFLAGS) -$(MAKEFLAGS) inst-prod ; \
	fi
	-@@files=`echo *.${MANSECTION}` ; \
	if test "$$files" != '*'.${MANSECTION} ; \
	then	$(MAKE) $(MFLAGS) -$(MAKEFLAGS) inst-man ; \
	fi
	-@@files=`echo *.${MANSECTION}.stub` ; \
	if test "$$files" != '*'.${MANSECTION}.stub ; \
	then	$(MAKE) $(MFLAGS) -$(MAKEFLAGS) inst-stub ; \
	fi
	-@@sh -c "if test `${GETHOST}` = ${MASTERHOST} ; then $(MAKE) inst-dist; else exit 0 ; fi"

# Install all products
inst-prod:	${PRODUCTS}
	-@@for prod in ${PRODUCTS} ; \
	do	if cmp -s ${BINDIR}/$$prod $$prod; \
		 then	echo $$prod unchanged; \
		 else	mv -f ${BINDIR}/$$prod ${BINDIR}/$$prod.bak 2>/dev/null; \
			${INS} $$prod ${BINDIR} && \
			${AFTERINSTALL} ${BINDIR}/$$prod && \
			echo "++++++INSTALLED" ${BINDIR}/$$prod && \
			${AFTERINSTALL} ${BINDIR}/$$prod.bak && \
			chmod ${BINPERM} ${BINDIR}/$$prod; \
		 fi \
	done

# Install the actual manual pages
inst-man:
	-@@for man in *.${MANSECTION} ; \
	do	if cmp -s ${MANDIR}${MANSECTION}/$$man $$man; \
		 then	echo $$man unchanged; \
		 else	mv -f ${MANDIR}${MANSECTION}/$$man \
			    ${MANDIR}${MANSECTION}/$$man.bak 2>/dev/null ; \
			${INS} $$man ${MANDIR}${MANSECTION} && \
			echo "++++++INSTALLED" ${MANDIR}${MANSECTION}/$$man && \
			chmod ${MANPERM} ${MANDIR}${MANSECTION}/$$man; \
		 fi \
	done

# Install the "stub" manual pages, which just source some other page
inst-stub:
	-@@for stub in *.${MANSECTION}.stub ; \
	do	man=`basename $$stub .stub`; \
		if cmp -s ${MANDIR}${MANSECTION}/$$man $$stub; \
		 then	echo $$man unchanged; \
		 else	mv -f ${MANDIR}${MANSECTION}/$$man \
			    ${MANDIR}${MANSECTION}/$$man.bak 2>/dev/null ; \
			${INS} $$stub ${MANDIR}${MANSECTION}/$$man && \
			echo "++++++INSTALLED" ${MANDIR}${MANSECTION}/$$man && \
			chmod ${MANPERM} ${MANDIR}${MANSECTION}/$$man; \
		 fi \
	done


# It might be better to say ${HEADERS} ${CFILES} ${SFILES},
# but that would miss routines that were not configured in a particular system.
inst-dist:
	-rm -fr ${DISTRIBUTION}/${SRCDIR}/*
	-${INS} ./Makefile.loc Makefile *.[hcfs] ${SHFILES} \
		*.${MANSECTION} *.${MANSECTION}.stub \
		*.doc \
		${DISTRIBUTION}/${SRCDIR}/.

#  running "make clobber" or "make clean noprod" will remove all binary files.
#  "clean" is intended to remove .o files and by-products.
#  "noprod" is intended to remove the final executables.
#  Either can be used without the other, depending on the effect desired.
clobber:	clean noprod

clean:
	-rm -f core *~ *.o \
		${SRCDIR}.out ${SRCDIR}.err ${SRCDIR}.xref \
		${SRCDIR}.flow ${SRCDIR}.lint

noprod:
	-rm -f ${PRODUCTS}


#
#  Automaticly build #include dependencies.
#
#  This code can't be simply replaced by the 4.3 BSD "cc -M".
#
#  The convention for writing #include directives is:
#	#include "./file"	gives file in current directory
#	#include "/file"	gives file at absolute path
#	#include "file"		gives file in ${INCDIR}
#	#include <file>		leaves to CPP
#
#  Note that there MUST be a SPACE after the "#include" in order to
#  be seen;  this allows conditional includes (if needed) to be indicated
#  by a #include TAB, so as to not cause trouble.
depend:
	-@@if test -n "${CFILES}" ; \
	then	$(MAKE) $(MFLAGS) -$(MAKEFLAGS) do-depend ; \
	fi

do-depend:
	cd ../${SRCDIR}; \
	mv -f Makefile.loc Makefile.bak; \
	cp Makefile.bak Makefile.loc; \
	chmod 664 Makefile.loc; \
	for k in ${CFILES}; do \
		i=`basename $$k .c`; \
		echo $$i.o: ../${SRCDIR}/$$k >>makedep; \
		grep '^#include ' /dev/null ../${SRCDIR}/$$k | sed \
			-e 's,^../'${SRCDIR}'/,,' \
			-e 's,c:[^"]*"\./\([^"]*\)".*,o: \1,' \
			-e 's,c:[^"]*"/\([^"]*\)".*,o: /\1,' \
			-e 's,c:[^"]*"\([^"]*\)".*,o: '${INCDIR}'/\1,' \
			-e '/debug.h/d' \
			-e '/c:[^<]*<\(.*\)>/d' \
			>>makedep; \
		echo '	$$(CC) $$(CFLAGS) -c ../'${SRCDIR}/$$k >>makedep; \
	done; \
	echo '# DO NOT DELETE THIS LINE -- make depend uses it' >>Makefile.loc; \
	echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> Makefile.loc; \
	echo '/^# DO NOT DELETE THIS LINE/+1,$$d' >eddep; \
	echo '$$r makedep' >>eddep; \
	echo 'w' >>eddep; \
	ed - Makefile.loc < eddep; \
	rm eddep makedep; \
	echo '# DEPENDENCIES MUST END AT END OF FILE' >> Makefile.loc; \
	echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> Makefile.loc; \
	echo '# see make depend above' >> Makefile.loc
@


7.2
log
@Multi-machine stuff
@
text
@d13 1
a13 1
#  $Header: Makefile.rules,v 7.1 87/11/02 23:22:10 mike Rel $	#
@


7.2.14.1
log
@merge from head
@
text
@d13 1
a13 1
#  $Header: /cvs/brlcad/Makefile.rules,v 7.2 1988/09/17 04:11:32 mike Exp $	#
@


7.1
log
@Release 2.3
@
text
@d13 1
a13 1
#  $Header: Makefile.rules,v 6.1 87/07/11 07:47:58 mike Rel $	#
d174 1
a174 2
#  Two versions are supplied.  Comment out the one that does not apply.
#  The default will work on all systems
d182 1
a182 1
#  Note that there MUST be a SPACE after the #include in order to
d185 1
a185 1
depend:		${CFILES}
d190 6
a195 6
#  Default:  For sites without "cc -M".
do-depend:		${CFILES}
	@@mv -f Makefile.loc Makefile.bak
	@@cp Makefile.bak Makefile.loc
	@@chmod 664 Makefile.loc
	@@for k in ${CFILES}; do \
d197 3
a199 2
		(echo $$i.o: $$i.c >>makedep; \
		grep '^#include ' /dev/null $$i.c | sed \
d205 13
a217 29
			>>makedep); done
	@@echo '# DO NOT DELETE THIS LINE -- make depend uses it' >>Makefile.loc
	@@echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> Makefile.loc
	@@echo '/^# DO NOT DELETE THIS LINE/+1,$$d' >eddep
	@@echo '$$r makedep' >>eddep
	@@echo 'w' >>eddep
	@@ed - Makefile.loc < eddep
	@@rm eddep makedep
	@@echo '# DEPENDENCIES MUST END AT END OF FILE' >> Makefile.loc
	@@echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> Makefile.loc
	@@echo '# see make depend above' >> Makefile.loc

#  For sites with cc -M (ie, 4.3BSD).
#do-depend:		${CFILES}
#	( for i in ${CFILES} ; do \
#		${CC} -M ${CFLAGS} $$i.c ; done ) | \
#	awk ' { if ($$1 != prev) { print rec; rec = $$0; prev = $$1; } \
#		else { if (length(rec $$2) > 78) { print rec; rec = $$0; } \
#		       else rec = rec " " $$2 } } \
#	      END { print rec } ' > makedep
#	echo '/^# DO NOT DELETE THIS LINE/+2,$$d' >eddep
#	echo '$$r makedep' >>eddep
#	echo 'w' >>eddep
#	cp Makefile.loc Makefile.bak
#	ed - Makefile.loc < eddep
#	rm eddep makedep
#	echo '# DEPENDENCIES MUST END AT END OF FILE' >> Makefile.loc
#	echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> Makefile.loc
#	echo '# see make depend above' >> Makefile.loc
@


6.1
log
@Release 2.0
@
text
@d13 1
a13 1
#  $Header: Makefile.rules,v 5.1 87/06/24 21:46:54 mike Rel $	#
@


5.1
log
@Release 1.24
@
text
@d13 1
a13 1
#  $Header: Makefile.rules,v 1.3 87/06/24 21:30:53 mike Exp $		#
d34 2
a35 2
	pr ${MAKEFILE} ${HEADERS} ${CFILES} ${TFILES} *.${MANSECTION}
	nroff -Tlp -man *.${MANSECTION}
d156 1
a156 1
#  running "make clean clobber" will remove all binary files.
d158 1
a158 1
#  "clobber" is intended to remove the final executables.
d160 2
d167 1
a167 1
clobber:
@


1.3
log
@Added FORTRAN sources to the install tree.
@
text
@d13 1
a13 1
#  $Header: pkg.h,v 4.5 87/06/24 20:32:34 mike Exp $		#
@


1.2
log
@Protection fix
@
text
@d1 15
a15 11
#
#			Makefile.rules
#
#  Source -
#	SECAD/VLD Computing Consortium, Bldg 394
#	The U. S. Army Ballistic Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
#  This Makefile draws heavily on the experiences of Doug Gwyn's
#  VLD Standard Makefile, and Doug Kingston's MMDF Global Makefile.
#	-Mike Muuss, BRL/SECAD, August 1986.
a16 1

a53 9
#test:		${PRODUCTS} ${TFILES}
#	${PRODUCT} < ${PRODUCT}.in > ${PRODUCT}.out 2> ${PRODUCT}.err
#	@@if cmp ${PRODUCT}.exp ${PRODUCT}.out ; \
#	then	echo 'Tested okay' ; \
#	else	echo 'Test failed; differences:' ; \
#		diff ${PRODUCT}.exp ${PRODUCT}.out ; \
#		exit 1 ; \
#	fi

d90 1
d105 1
d151 1
a151 1
	-${INS} ./Makefile.loc Makefile *.[hcs] ${SHFILES} \
@


1.1
log
@Release 1.20 -- First Formal Release
@
text
@d195 3
a197 1
	@@cp Makefile.loc Makefile.bak
@
