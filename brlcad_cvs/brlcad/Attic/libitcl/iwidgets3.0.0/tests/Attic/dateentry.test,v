head	1.2;
access;
symbols
	rel-5-2:1.1
	rel-5-1-patches:1.1.0.2
	rel-5-1:1.1;
locks; strict;
comment	@# @;


1.2
date	2000.12.06.21.24.05;	author bparker;	state dead;
branches;
next	1.1;

1.1
date	99.10.22.19.05.51;	author jra;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.12.06.21.28.41;	author bparker;	state dead;
branches;
next	;


desc
@@


1.2
log
@Upgrading to newer version
@
text
@# This file is a Tcl script to test out [incr Widgets] Dateentry class.
# It is organized in the standard fashion for Tcl tests with the following
# notation for test case labels:
#
#   1.x - Construction/Destruction tests
#   2.x - Configuration option tests
#   3.x - Method tests
#
# Copyright (c) 1995 DSC Technologies Corporation
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @@(#) $Id: dateentry.test,v 1.1 1999/10/22 19:05:51 jra Exp $

package require Iwidgets 3.0

if {[string compare test [info procs test]] == 1} {
    source defs
}

wm geometry . {}
raise .

set c 1
set o 1
set m 1

#
# Initial construction test
#
test Dateentry-1.$c {Dateentry construction} {
    iwidgets::Dateentry .de -labeltext "Date Field"
    pack .de -padx 10 -pady 10 -fill both -expand yes
    update 
} {}

incr c

#
# Option tests which are successful.
#
test Dateentry-2.$o {configuration option} {
    llength [.de configure]
} {43}

incr o

foreach test {
    {-background #d9d9d9 #d9d9d9}
    {-buttonforeground green green}
    {-borderwidth 4 4} 
    {-borderwidth 2 2} 
    {-command {.de configure -background red} {.de configure -background red}}
    {-cursor gumby gumby} 
    {-exportselection 0 0} 
    {-foreground Green Green} 
    {-foreground Black Black} 
    {-highlightcolor Red Red}
    {-highlightthickness 2 2}
    {-insertbackground Yellow Yellow} 
    {-insertbackground Black Black} 
    {-iq low low}
    {-iq average average}
    {-iq high high}
    {-justify right right}
    {-justify center center}
    {-justify left left}
    {-labelmargin 5 5} 
    {-labelpos w w} 
    {-labelpos nw nw} 
    {-labelpos n n} 
    {-labelpos ne ne} 
    {-labelpos e e} 
    {-labelpos se se} 
    {-labelpos s s} 
    {-labelpos sw sw} 
    {-labeltext Label Label} 
    {-relief raised raised} 
    {-relief sunken sunken} 
    {-currentdatefont -*-helvetica-bold-r-normal--*-120-* -*-helvetica-bold-r-normal--*-120-*}
    {-datefont -*-helvetica-medium-r-normal--*-120-* -*-helvetica-medium-r-normal--*-120-*}
    {-dayfont -*-helvetica-medium-r-normal--*-120-* -*-helvetica-medium-r-normal--*-120-*}
    {-days {M T W T F S S} {M T W T F S S}}
    {-foreground black black}
    {-height 300 300}
    {-outline black black}
    {-selectcolor blue blue}
    {-selectthickness 2 2}
    {-startday monday monday}
    {-titlefont -*-helvetica-bold-r-normal--*-140-* -*-helvetica-bold-r-normal--*-140-*}
    {-weekdaybackground mistyrose mistyrose}
    {-weekendbackground white white}
    {-width 350 350}
    {-textbackground GhostWhite GhostWhite} 
    {-textbackground #d9d9d9 #d9d9d9}} {
	set option [lindex $test 0]
	test Dateentry-2.$o "configuration options, $option" {
	    .de configure $option [lindex $test 1]
	    lindex [.de configure $option] 4
	} [lindex $test 2]
	update 
	incr o
}

#
# Option tests which fail and produce errors.
#
foreach test {
  {-iq bogus {bad iq option "bogus": should be high, average or low}}
  {-childsitepos bogus {bad childsite option "bogus": should be n, e, s, or w}}} {
	set option [lindex $test 0]
        test Dateentry-2.$o "configuration options, $option" {
	    list [catch {.de configure $option [lindex $test 1]} msg] $msg
	} [list 1 [lindex $test 2]]
	incr o
}

#
# Method tests which are successful.
#
foreach test {
    {{.de childsite} {.de.lwchildsite}}
    {{.de show 03/03/1960} {}}
    {{.de get} {03/03/1960}}
    {{.de get -string} {03/03/1960}}
    {{.de isvalid} {1}}
    {{.de component date delete 0 end} {}}
    {{.de component date insert end 03/32/1960} {}}
    {{.de isvalid} {0}}
    {{.de show 03/03/1960} {}}
    {{.de show now} {}}} {
	set method [lindex [lindex $test 0] 1]
	test Dateentry-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 0 [lindex $test 1]]
	update 
	incr m
}

test Dateentry-3.$m "object methods, clock clicks" {
    set clicks [clock scan "06/08/1964"]
    .de show $clicks
    update 
    .de get 
} {06/08/1964}
incr m

#
# Method tests which fail and produce errors
#
foreach test {
    {{.de get bogus} {bad format option "bogus": should be -string or -clicks}}
    {{.de show bogus} {bad date: "bogus", must be a valid date string, clock clicks value or the keyword now}}} {
	set method [lindex [lindex $test 0] 1]
	test Dateentry-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 1 [lindex $test 1]]
	incr m
}

#
# Conclusion of constrcution/destruction tests
#
test Dateentry-1.$c {Dateentry destruction} {
    destroy .de
    update 
} {}

incr c

test Dateentry-1.$c {Dateentry construction} {
    iwidgets::dateentry .de 
    pack .de -padx 10 -pady 10
    update 
} {}

incr c

test Dateentry-1.$c {Dateentry destruction} {
    destroy .de
    update 
} {}
@


1.1
log
@Initial version of incrtcl
@
text
@d14 1
a14 1
# @@(#) $Id: dateentry.test,v 1.1 1996/01/02 15:21:45 mulferts Exp $
@


1.1.2.1
log
@Upgrading to newer version
@
text
@d14 1
a14 1
# @@(#) $Id: dateentry.test,v 1.1 1999/10/22 19:05:51 jra Exp $
@


