head	1.2;
access;
symbols
	rel-5-2:1.1
	rel-5-1-patches:1.1.0.2
	rel-5-1:1.1;
locks; strict;
comment	@# @;


1.2
date	2000.12.06.21.23.23;	author bparker;	state dead;
branches;
next	1.1;

1.1
date	99.10.22.19.05.23;	author jra;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.12.06.21.28.08;	author bparker;	state dead;
branches;
next	;


desc
@@


1.2
log
@Upgrading to newer version
@
text
@# This file is a Tcl script to test out [incr Widgets] Shell class.
# It is organized in the standard fashion for Tcl tests with the following
# notation for test case labels:
#
#   1.x - Construction/Destruction tests
#   2.x - Configuration option tests
#   3.x - Method tests
#   4.x - Other tests
#
# Copyright (c) 1995 DSC Technologies Corporation
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @@(#) $Id: shell.test,v 1.1 1999/10/22 19:05:23 jra Exp $

package require -exact Iwidgets 2.2

if {[string compare test [info procs test]] == 1} {
    source defs
}

wm geometry . {}
raise .

set c 1
set o 1
set m 1

#
# Initial construction test
#
test Shell-1.$c {Shell construction} {
    iwidgets::Shell .sh

    listbox [.sh childsite].lb -relief sunken
    pack [.sh childsite].lb -fill both -expand yes

    .sh activate
} {}

incr c

#
# Option tests which are successful.
#
test Shell-2.$o {configuration option} {
    llength [.sh configure]
} {9}

incr o

foreach test {
    {-background #d9d9d9 #d9d9d9} 
    {-cursor gumby gumby} 
    {-modality global global} 
    {-modality application application} 
    {-modality none none} 
    {-padx 15 15} 
    {-pady 15 15} 
    {-title "Shell" "Shell"}} {
	set option [lindex $test 0]
	test Shell-2.$o "configuration options, $option" {
	    .sh configure $option [lindex $test 1]
	    lindex [.sh configure $option] 4
	} [lindex $test 2]
	update 
	incr o
}

#
# Option tests which fail and produce errors.
#
foreach test {
  {-modality bogus {bad modality option "bogus": should be none, application, or global}}} {
	set option [lindex $test 0]
        test Shell-2.$o "configuration options, $option" {
	    list [catch {.sh configure $option [lindex $test 1]} msg] $msg
	} [list 1 [lindex $test 2]]
	incr o
}

#
# Method tests which are successful.
#
foreach test {
    {{.sh childsite} {.sh.shellchildsite}}
    {{.sh center .} {}}
    {{.sh center} {}}} {
	set method [lindex [lindex $test 0] 1]
	test Shell-3.$m "object methods, $method" {
	    list [catch {eval [lindex $test 0]} msg] $msg
	} [list 0 [lindex $test 1]]
	update 
	incr m
}

#
# Method tests which fail and produce errors
#
test Shell-3.$m "object methods, activate already active" {
    list [catch {.sh activate} msg] $msg
} [list 1 {".sh" is already active}]
update
incr m

#
# Deactivate test
#
test Shell-3.$m "object methods, deactivate" {
    list [catch {.sh deactivate} msg] $msg
} [list 0 {}]
update
incr m

#
# Destruction test
#
test Shell-1.$c {Shell destruction} {
    destroy .sh
    update 
} {}
incr c

#
# Global modality test.
#
test Shell-4.2 "global modality, activation, and deactivation" {
    iwidgets::shell .sh -modality global
    pack [label [.sh childsite].l -text "Global Modal Shell"]
    after 2000 {.sh deactivate Test}
    list [catch {.sh activate} msg] $msg
} [list 0 Test]
update

#
# Destruction test
#
test Shell-1.$c {Shell destruction} {
    destroy .sh
    update 
} {}
incr c

#
# None modality test.
#
test Shell-4.3 "no modality, activation, and deactivation" {
    iwidgets::shell .sh -modality none
    pack [label [.sh childsite].l -text "Non-Modal Shell"]
    .sh activate
    update
    after 2000
    .sh deactivate
} {}
update

#
# Destruction test
#
test Shell-1.$c {Shell destruction} {
    destroy .sh
    update 
} {}

incr c

#
# Application modality test.
#
test Shell-4.4 "application modality, activation, and deactivation" {
    iwidgets::shell .sh -modality application
    pack [label [.sh childsite].l -text "Application Modal Shell"]
    after 2000 {.sh deactivate Test}
    list [catch {.sh activate} msg] $msg
} [list 0 Test]
update

#
# Destruction test
#
test Shell-1.$c {Shell destruction} {
    destroy .sh
    update 
} {}

incr c

test Shell-1.$c {Shell destruction} {
    iwidgets::shell .sh
    destroy .sh
    update 
} {}

@


1.1
log
@Initial version of incrtcl
@
text
@d15 1
a15 1
# @@(#) $Id: shell.test,v 1.2 1996/06/26 19:25:39 mulferts Exp $
@


1.1.2.1
log
@Upgrading to newer version
@
text
@d15 1
a15 1
# @@(#) $Id: shell.test,v 1.1 1999/10/22 19:05:23 jra Exp $
@


