head	1.3;
access;
symbols
	rel-5-2:1.2
	rel-5-1-patches:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.1
	rel-5-0beta:1.1;
locks; strict;
comment	@# @;


1.3
date	2000.12.06.21.20.35;	author bparker;	state dead;
branches;
next	1.2;

1.2
date	99.10.19.19.36.13;	author jra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.06.02.19.42.05;	author jra;	state Exp;
branches;
next	;

1.2.2.1
date	2000.12.06.21.25.57;	author bparker;	state dead;
branches;
next	;


desc
@Original
@


1.3
log
@Upgrading to newer version
@
text
@# Commands covered:  none
#
# This file contains a collection of tests for the procedures in the
# file tclGet.c.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1995-1996 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: get.test,v 1.2 1999/10/19 19:36:13 jra Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

test get-1.1 {Tcl_GetInt procedure} {
    set x 44
    incr x { 	  22}
} {66}
test get-1.2 {Tcl_GetInt procedure} {
    set x 44
    incr x -3
} {41}
test get-1.3 {Tcl_GetInt procedure} {
    set x 44
    incr x +8
} {52}
test get-1.4 {Tcl_GetInt procedure} {
    set x 44
    list [catch {incr x foo} msg] $msg
} {1 {expected integer but got "foo"}}
test get-1.5 {Tcl_GetInt procedure} {
    set x 44
    list [catch {incr x {16	 }} msg] $msg
} {0 60}
test get-1.6 {Tcl_GetInt procedure} {
    set x 44
    list [catch {incr x {16	 x}} msg] $msg
} {1 {expected integer but got "16	 x"}}

# The following tests are non-portable because they depend on
# word size.

if {0x80000000 > 0} {
    test get-1.7 {Tcl_GetInt procedure} {
	set x 44
	list [catch {incr x 18446744073709551616} msg] $msg $errorCode
    } {1 {integer value too large to represent} {ARITH IOVERFLOW {integer value too large to represent}}}
    test get-1.8 {Tcl_GetInt procedure} {
	set x 0
	list [catch {incr x 18446744073709551614} msg] $msg
    } {0 -2}
    test get-1.9 {Tcl_GetInt procedure} {
	set x 0
	list [catch {incr x +18446744073709551614} msg] $msg
    } {0 -2}
    test get-1.10 {Tcl_GetInt procedure} {
	set x 0
	list [catch {incr x -18446744073709551614} msg] $msg
    } {0 2}
} else {
    test get-1.7 {Tcl_GetInt procedure} {
	set x 44
	list [catch {incr x 4294967296} msg] $msg $errorCode
    } {1 {integer value too large to represent} {ARITH IOVERFLOW {integer value too large to represent}}}
    test get-1.8 {Tcl_GetInt procedure} {
	set x 0
	list [catch {incr x 4294967294} msg] $msg
    } {0 -2}
    test get-1.9 {Tcl_GetInt procedure} {
	set x 0
	list [catch {incr x +4294967294} msg] $msg
    } {0 -2}
    test get-1.10 {Tcl_GetInt procedure} {
	set x 0
	list [catch {incr x -4294967294} msg] $msg
    } {0 2}
}

test get-2.1 {Tcl_GetInt procedure} {
    format %g 1.23
} {1.23}
test get-2.2 {Tcl_GetInt procedure} {
    format %g { 	 1.23 	}
} {1.23}
test get-2.3 {Tcl_GetInt procedure} {
    list [catch {format %g clip} msg] $msg
} {1 {expected floating-point number but got "clip"}}
test get-2.4 {Tcl_GetInt procedure} {nonPortable} {
    list [catch {format %g .000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001} msg] $msg $errorCode
} {1 {floating-point value too small to represent} {ARITH UNDERFLOW {floating-point value too small to represent}}}

# cleanup
::tcltest::cleanupTests
return












@


1.2
log
@TCL 8.2.1 update
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: get.test,v 1.4 1999/06/26 03:54:14 jenn Exp $
@


1.2.2.1
log
@Upgrading to newer version
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: get.test,v 1.2 1999/10/19 19:36:13 jra Exp $
@


1.1
log
@Initial revision
@
text
@d8 1
d13 1
a13 1
# SCCS: @@(#) get.test 1.7 97/10/31 17:23:00
d15 4
a18 1
if {[string compare test [info procs test]] == 1} then {source defs}
d46 1
a46 1
# word size.  18446744073709551614
d49 1
a49 1
    test get-1.7 {Tcl_GetInt procedure} {nonPortable unixOnly} {
d53 1
a53 1
    test get-1.8 {Tcl_GetInt procedure} {nonPortable} {
d57 1
a57 1
    test get-1.9 {Tcl_GetInt procedure} {nonPortable} {
d61 1
a61 1
    test get-1.10 {Tcl_GetInt procedure} {nonPortable} {
d66 1
a66 1
    test get-1.7 {Tcl_GetInt procedure} {nonPortable unixOnly} {
d70 1
a70 1
    test get-1.8 {Tcl_GetInt procedure} {nonPortable} {
d74 1
a74 1
    test get-1.9 {Tcl_GetInt procedure} {nonPortable} {
d78 1
a78 1
    test get-1.10 {Tcl_GetInt procedure} {nonPortable} {
d96 16
@

