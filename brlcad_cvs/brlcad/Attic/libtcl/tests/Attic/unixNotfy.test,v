head	1.3;
access;
symbols
	rel-5-2:1.2
	rel-5-1-patches:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.1
	rel-5-0beta:1.1;
locks; strict;
comment	@# @;


1.3
date	2000.12.06.21.20.41;	author bparker;	state dead;
branches;
next	1.2;

1.2
date	99.10.19.19.36.18;	author jra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.06.02.19.42.05;	author jra;	state Exp;
branches;
next	;

1.2.2.1
date	2000.12.06.21.26.03;	author bparker;	state dead;
branches;
next	;


desc
@Original
@


1.3
log
@Upgrading to newer version
@
text
@# This file contains tests for tclUnixNotfy.c.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1997 by Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @@(#) $Id: unixNotfy.test,v 1.2 1999/10/19 19:36:18 jra Exp $

# The tests should not be run if you have a notifier which is unable to
# detect infinite vwaits, as the tests below will hang. The presence of
# the "testthread" command indicates that this is the case.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

set ::tcltest::testConstraints(testthread) \
	[expr {[info commands testthread] != {}}]

# The next two tests will hang if threads are enabled because the notifier
# will not necessarily wait for ever in this case, so it does not generate
# an error.

test unixNotfy-1.1 {Tcl_DeleteFileHandler} {unixOnly && !testthread} {
    catch {vwait x}
    set f [open foo w]
    fileevent $f writable {set x 1}
    vwait x
    close $f
    list [catch {vwait x} msg] $msg
} {1 {can't wait for variable "x":  would wait forever}}
test unixNotfy-1.2 {Tcl_DeleteFileHandler} {unixOnly && !testthread} {
    catch {vwait x}
    set f1 [open foo w]
    set f2 [open foo2 w]
    fileevent $f1 writable {set x 1}
    fileevent $f2 writable {set y 1}
    vwait x
    close $f1
    vwait y
    close $f2
    list [catch {vwait x} msg] $msg
} {1 {can't wait for variable "x":  would wait forever}}


test unixNotfy-2.1 {Tcl_DeleteFileHandler} {unixOnly testthread} {
    update
    set f [open foo w]
    fileevent $f writable {set x 1}
    vwait x
    close $f
    testthread create "after 500
    testthread send [testthread id] {set x ok}
    testthread exit"
    vwait x
    set x
} {ok}
test unixNotfy-1.2 {Tcl_DeleteFileHandler} {unixOnly testthread} {
    update
    set f1 [open foo w]
    set f2 [open foo2 w]
    fileevent $f1 writable {set x 1}
    fileevent $f2 writable {set y 1}
    vwait x
    close $f1
    vwait y
    close $f2
    testthread create "after 500
    testthread send [testthread id] {set x ok}
    testthread exit"
    vwait x
    set x
} {ok}



# cleanup
file delete foo
file delete foo2
::tcltest::cleanupTests
return












@


1.2
log
@TCL 8.2.1 update
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: unixNotfy.test,v 1.7 1999/07/01 17:36:20 jenn Exp $
@


1.2.2.1
log
@Upgrading to newer version
@
text
@d13 1
a13 1
# RCS: @@(#) $Id: unixNotfy.test,v 1.2 1999/10/19 19:36:18 jra Exp $
@


1.1
log
@Initial revision
@
text
@d8 1
d13 1
a13 1
# SCCS: @@(#) unixNotfy.test 1.3 97/09/15 15:39:53
d15 3
a17 1
if {[string compare test [info procs test]] == 1} then {source defs}
d19 3
a21 2
if {$tcl_platform(platform) != "unix"} {
    return
d24 2
a25 3
# The tests should not be run if you have a notifier which is unable to
# detect infinite vwaits, as the tests below will hang. The presence of
# the "testeventloop" command indicates that this is the case.
d27 3
a29 3
if {"[info commands testeventloop]" == "testeventloop"} {
    return
}
d31 1
a31 1
test unixNotfy-1.1 {Tcl_DeleteFileHandler} {
d39 1
a39 1
test unixNotfy-1.2 {Tcl_DeleteFileHandler} {
d52 33
d86 15
@

