head	1.3;
access;
symbols
	rel-5-2:1.2
	rel-5-1-patches:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.1
	rel-5-0beta:1.1;
locks; strict;
comment	@ * @;


1.3
date	2000.12.06.21.20.05;	author bparker;	state dead;
branches;
next	1.2;

1.2
date	99.10.19.19.35.59;	author jra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.06.02.19.37.39;	author jra;	state Exp;
branches;
next	;

1.2.2.1
date	2000.12.06.21.25.35;	author bparker;	state dead;
branches;
next	;


desc
@Original
@


1.3
log
@Upgrading to newer version
@
text
@/* 
 * tclRegexp.h --
 *
 * 	This file contains definitions used internally by Henry
 *	Spencer's regular expression code.
 *
 * Copyright (c) 1998 by Sun Microsystems, Inc.
 * Copyright (c) 1998-1999 by Scriptics Corporation.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 * RCS: @@(#) $Id: tclRegexp.h,v 1.2 1999/10/19 19:35:59 jra Exp $
 */

#ifndef _TCLREGEXP
#define _TCLREGEXP

#include "regex.h"

#ifdef BUILD_tcl
# undef TCL_STORAGE_CLASS
# define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
 * The TclRegexp structure encapsulates a compiled regex_t,
 * the flags that were used to compile it, and an array of pointers
 * that are used to indicate subexpressions after a call to Tcl_RegExpExec.
 * Note that the string and objPtr are mutually exclusive.  These values
 * are needed by Tcl_RegExpRange in order to return pointers into the
 * original string.
 */

typedef struct TclRegexp {
    int flags;			/* Regexp compile flags. */
    regex_t re;			/* Compiled re, includes number of
				 * subexpressions. */
    CONST char *string;		/* Last string passed to Tcl_RegExpExec. */
    Tcl_Obj *objPtr;		/* Last object passed to Tcl_RegExpExecObj. */
    regmatch_t *matches;	/* Array of indices into the Tcl_UniChar
				 * representation of the last string matched
				 * with this regexp to indicate the location
				 * of subexpressions. */
    rm_detail_t details;	/* Detailed information on match (currently
				 * used only for REG_EXPECT). */
    int refCount;		/* Count of number of references to this
				 * compiled regexp. */
} TclRegexp;

#endif /* _TCLREGEXP */
@


1.2
log
@TCL 8.2.1 update
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclRegexp.h,v 1.11 1999/08/02 17:45:38 redman Exp $
@


1.2.2.1
log
@Upgrading to newer version
@
text
@d13 1
a13 1
 * RCS: @@(#) $Id: tclRegexp.h,v 1.2 1999/10/19 19:35:59 jra Exp $
@


1.1
log
@Initial revision
@
text
@d1 8
a8 2
/*
 * Definitions etc. for regexp(3) routines.
d10 2
a11 2
 * Caveat:  this is V8 regexp(3) [actually, a reimplementation thereof],
 * not the System V one.
d13 1
a13 1
 * SCCS: @@(#) tclRegexp.h 1.6 96/04/02 18:43:57
d16 2
a17 2
#ifndef _REGEXP
#define _REGEXP 1
d19 5
a23 2
#ifndef _TCL
#include "tcl.h"
d27 6
a32 2
 * NSUBEXP must be at least 10, and no greater than 117 or the parser
 * will not work properly.
d35 15
a49 17
#define NSUBEXP  20

typedef struct regexp {
	char *startp[NSUBEXP];
	char *endp[NSUBEXP];
	char regstart;		/* Internal use only. */
	char reganch;		/* Internal use only. */
	char *regmust;		/* Internal use only. */
	int regmlen;		/* Internal use only. */
	char program[1];	/* Unwarranted chumminess with compiler. */
} regexp;

EXTERN regexp *TclRegComp _ANSI_ARGS_((char *exp));
EXTERN int TclRegExec _ANSI_ARGS_((regexp *prog, char *string, char *start));
EXTERN void TclRegSub _ANSI_ARGS_((regexp *prog, char *source, char *dest));
EXTERN void TclRegError _ANSI_ARGS_((char *msg));
EXTERN char *TclGetRegError _ANSI_ARGS_((void));
d51 1
a51 1
#endif /* REGEXP */
@

