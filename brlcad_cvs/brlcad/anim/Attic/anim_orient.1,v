head	11.9;
access;
symbols
	ansi-20040405-merged:11.6.6.1
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.6.1
	premerge-autoconf:11.8
	ansi-20040316-freeze:11.6
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.6.8.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.6
	phong-branch:11.7.0.4
	photonmap-branch:11.7.0.2
	rel-6-1-DP:11.6
	windows-branch:11.6.0.8
	rel-6-0-2:11.6
	ansi-branch:11.6.0.6
	rel-6-0-1-branch:11.6.0.4
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.6
	offsite-5-3-pre:11.6
	rel-5-3:11.6
	rel-5-2:11.6
	rel-5-1-branch:11.6.0.2
	rel-5-1:11.6
	rel-5-0:11.6
	rel-5-0-beta:11.6
	rel-4-5:11.6
	ctj-4-5-post:11.6
	ctj-4-5-pre:11.6
	rel-4-4:11.1;
locks; strict;
comment	@# @;


11.9
date	2004.05.24.04.17.00;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.02.02.17.38.57;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2003.01.07.13.31.58;	author jra;	state Exp;
branches
	11.7.6.1;
next	11.6;

11.6
date	96.08.29.01.42.59;	author cnuzman;	state Exp;
branches
	11.6.6.1
	11.6.8.1;
next	11.5;

11.5
date	96.07.26.20.41.43;	author cnuzman;	state Exp;
branches;
next	11.4;

11.4
date	96.06.25.23.09.55;	author cnuzman;	state Exp;
branches;
next	11.3;

11.3
date	96.06.24.18.33.56;	author cnuzman;	state Exp;
branches;
next	11.2;

11.2
date	96.06.21.20.05.53;	author cnuzman;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.34.04;	author mike;	state Rel4_4;
branches;
next	1.1;

1.1
date	94.08.04.19.57.49;	author cnuzman;	state Exp;
branches;
next	;

11.6.6.1
date	2004.03.17.21.15.48;	author morrison;	state Exp;
branches;
next	;

11.6.8.1
date	2004.03.11.23.40.25;	author morrison;	state Exp;
branches;
next	;

11.7.6.1
date	2004.02.12.19.40.40;	author erikg;	state Exp;
branches;
next	;


desc
@manual page for anim_orient
@


11.9
log
@moved to src/anim/
@
text
@.TH ANIM_ORIENT 1 BRL/CAD
.SH NAME
anim_orient - convert between orientation formats
.SH SYNOPSIS
.B anim_orient 
.B [q|y|a|z|m][vri]
.B [q|y|a|z|m][vriu]
.B < in.table 
.B > out.table
.SH DESCRIPTION
.I Anim_orient
is a filter which translates a table of orientation
information from one format to another. The method used is to convert
the input format to a matrix, then convert the matrix to the desired
output format. The input format is specified in the first argument, and
the output format is specified in the second. 
The orientation formats
must be one of the following: 
.B q 
(quaternion), 
.B y
(yaw,pitch, and roll), 
.B a
(azimuth, elevation, and twist), 
.B z 
(x-y-z angles), or
.B m 
(rotation matrix).
In addition, the output format may be modified by the
.B u 
option, and the input and output formats may be modified by the 
.BR r ,
.BR i ,
and
.B v
options. The 
.B r 
option specifies that angles are read or written in radians, rather
than degrees. The
.BR i , v ,
and 
.B u
options are explained below.
.PP
To clearly understand the operation of anim_orient, it is important to
examine the difference between orientation and rotation.
The matrices, quaternions, and angles
used by anim_orient specify rotations. These are transformations
which, when applied to an object, preserve its shape but change its
orientation with respect to a fixed set of axes. Given the initial
orientation of an object, a rotation defines the final orientation, but
different initial orientations will yield different final orientations. 
In order
to represent orientations with rotations, we
must define a default initial orientation for the object.
Then a given matrix, quaternion, or set of angles represents the orientation 
resulting from applying the rotation to the initial object orientation.
.PP
If no modifying codes are specified, anim_orient assumes that the
default orientation of the object in question faces the positive
x-direction, with the world y-axis pointing to the object's left and the
z-axis pointing up. This is the orientation in which many 
.I brlcad 
objects
are modeled, and the default assumed by other animation routines such as
anim_script. If the 
.B v 
code is specified, then the default orientation  
is taken to be facing the negative z-direction, with the world x-axis
pointing to the object's right and the y-axis pointing up. This is the
default orientation of the eye in 
.I mged 
and 
.IR rt . 
Some common uses of the v
option are demonstrated in the examples section.
.PP
The input and output format codes are:
.TP
.BR q : 
Quaternions, in the order x,y,z,w. This is the default input and
output format. The output will
always be unit quaternions. For a unit quaternion, the
xyz-vector represents an axis of rotation and and w represents 
cos(omega/2), where
omega is the angle to be rotated about the given axis.
.TP
.BR z : 
x-y-z angles, in the order x, y, z. They represent a rotation
of z degrees around the z-axis, followed by y degrees around the y-axis,
followed by x degrees around the x-axis. If the code 
.B zr 
is used
then the angles will be read or written in radians
rather than degrees.
.TP
.BR y : 
yaw-pitch-roll format, in that order. They represent
a rotation of +roll degrees about the x-axis, -pitch degrees about
the y-axis, followed by +yaw degrees about the z-axis. If the code
.B yr 
is used, angles are in radians rather than degrees. 
.TP
.BR a :
azimuth, elevation, twist, in that order. They represent a rotation of
-twist degrees about the x-axis, +elevation degrees about the y-axis,
and +azimuth + 180 degrees about the z-axis. Alternatively, they can
be thought of as a 180 degree rotation about the z-axis followed by a
rotation of +twist degrees about the x-axis, -elevation degrees about
the y-axis, and +azimuth degrees about the z-axis.
.TP
.BR m : 
pre-multiplication rotation matrix. Sixteen
numbers form a 4x4 matrix, although only the nine elements in the upper
left corner are actually used. This is the format used at the interior of
the conversion routine. It is a transformation from initial orientation to 
a new orientation.
.PP
The input and ouput modification codes are:
.TP
.B i
This code is used in conjunction with any of the format codes to represent
the inverse transformation. Under the 
.B i 
code, a matrix, quaternion, or
set of angles represents the inverse of the rotation that it normally
represents.
For example, normally, the orientation
corresponding to a given matrix is the orientation that the default
object ends up in after the matrix is applied to it. With the 
.B i 
code,
a given matrix represents the orientation an object should be placed
in so that the applying the matrix puts it back in the default
orientation. 

One common use of the 
.B i 
option is for handling "Viewrot" matrices used
by 
.I mged 
and 
.IR rt . 
The viewrot matrix is a model-to-view matrix, which is
the transpose (inverse) of the matrix which would conceptually be
applied to an eye object to put it in the desired place in the model.
.TP
.B v
When this option is specified, the corresponding rotation is considered
applied to the default view orientation, rather than the default object
orientation, as explained above.
.TP
.B u
This option forces the output orientation to be upright, or "right-side
up", where the z-axis is the up direction. In terms of yaw, pitch, and
roll, this means that the roll is forced to zero. Because this is a 
one-way operation, it can only be applied to the output orientation, not
the input.

.SH EXAMPLES
.sp
Normalize a table of quaternions to unit magnitude. (quaternions are the
default format).
.sp
	anim_orient < in.table > out.table 
.sp
change xyz angles to a rotation matrix
.sp
	anim_orient z m < in.table > out.table
.sp
change azimuth,elevation, and twist to a matrix suitable for the 
.I rt
viewrot command
.sp
	anim_orient a miv < in.table > out.table
.sp
transpose matrices
.sp
	anim_orient m mi < in.table > out.table
.sp
change radian xyz angles to yaw-pitch-roll in degrees
.sp
	anim_orient zr y < in.table > out.table
.sp
given a quaternion being applied to an object facing the x-axis, 
find the quaternion needed
to turn the virtual camera in the same direction using 
.IR rt 's 
orientation command
.sp
	anim_orient q qv < in.table > out.table
.sp
Given the yaw, pitch, and roll of an object, find the yaw, pitch, and
roll which would bring it back to the default position.
.sp
	anim_orient y yi < in.table > out.table
.sp
Force a table of view quaternions to represent "right-side up"
orientations.
.sp 
	anim_orient qv qvu < in.table > out.table
.SH BUGS
There are built-in trouble spots which occur, in ypr, xyz, or aet
formats, when the pitch, y-rotation, or elevation is an odd multiple of 90
degrees, because at this point the other two angles become
indistinguishable. The program makes the arbitrary assumption that the
roll is zero or that the x-rotation is zero, depending on the format,
and gives a warning to that effect on standard error.
.SH AUTHOR
Carl J. Nuzman
.SH COPYRIGHT
	This software is Copyright (C) 1993-2004 by the United States Army
in all countries except the USA.  All rights reserved.
.SH "BUG REPORTS"
Reports of bugs or problems should be submitted via electronic
mail to <CAD@@ARL.ARMY.MIL>.

@


11.8
log
@update copyright to include span through 2003
@
text
@@


11.7
log
@Corrected email address
@
text
@d212 1
a212 1
	This software is Copyright (C) 1993 by the United States Army
@


11.7.6.1
log
@merge from HEAD
@
text
@d212 1
a212 1
	This software is Copyright (C) 1993-2004 by the United States Army
@


11.6
log
@fixed typo
@
text
@d216 1
a216 1
mail to <CAD@@BRL.MIL>.
@


11.6.6.1
log
@sync branch with HEAD
@
text
@d212 1
a212 1
	This software is Copyright (C) 1993-2004 by the United States Army
d216 1
a216 1
mail to <CAD@@ARL.ARMY.MIL>.
@


11.6.8.1
log
@sync to HEAD...
@
text
@d212 1
a212 1
	This software is Copyright (C) 1993-2004 by the United States Army
d216 1
a216 1
mail to <CAD@@ARL.ARMY.MIL>.
@


11.5
log
@added force upright option
@
text
@d30 2
a31 1
.B u option, and the input and output formats may be modified by the 
d44 1
a44 1

d58 1
a58 1

@


11.4
log
@replaced t format with more general i modifier. clarified explanations
@
text
@d7 1
a7 1
.B [q|y|a|z|m][vri]
d16 2
a17 1
the output format is specified in the second. The orientation formats
d29 2
a30 1
In addition, the input and output formats may be modified by the 
d33 1
a33 1
or
d39 1
a39 1
.B i
d41 1
a41 1
.B v 
d56 1
a56 1
resulting from applying the rotation to the object.
d67 1
a67 1
code is specified, then the default orientation
d76 1
a76 1

d117 3
a119 2

The
d121 1
a121 1
code is used in conjunction with any of the format codes to represent
d143 1
a143 1
The viewrot matrix is a model-to-view matrix, which
d146 12
d196 5
@


11.3
log
@minor clarification
@
text
@d6 2
a7 2
.B [qyazmt][vr]
.B [qyazmt][vr]
d25 1
a25 1
(x-y-z angles), 
d27 1
a27 4
(rotation matrix), or 
.B t 
(transposed matrix). These are described in greater detail below. 

d29 2
a30 1
.B r 
d36 28
a63 13
than degrees. 
.sp
The 
.B v
option specifies an alternate starting point for the orientation
transformation. By default, the object being oriented is assumed
initially to face the positive x direction, with the y-axis to the left 
and the z-axis leading upwards. All of the orientation formats define
transformations which are applied to this initial object to achieve the
desired orientation.  This is the convention for vehicles modeled
in 
.IR brlcad .
The 
d65 9
a73 6
option facilitates animating the virtual camera in 
.IR brlcad .
In this case, the object is assumed to initially face the negative z
direction, with the x-axis to the right and the y-axis going up (the
default position of the virtual camera). 
See the Examples section for more information.
d115 23
a137 14
.TP
.BR t : 
Transposed matrix. A matrix which is the transpose of the 
.B m
matrix. Because these are rotation matrices, the transposed matrix is
also the inverse of the 
.B m 
matrix, and can be though of the transformation from the new orientation
back into the initial orientation space. The
.B t 
and
.B v
options together represent the "Viewrot" transformation used by 
.I mged
d139 4
a142 2
.IR rt.
See the examples below.
d146 2
a147 1
Normalize a table of quaternions to unit magnitude.
d159 1
a159 1
	anim_orient a tv < in.table > out.table
d163 1
a163 1
	anim_orient m t < in.table > out.table
d169 5
a173 3
given quaternion being applied to an object, find the quaternion needed
to turn the virtual camera in the same direction using rt's orientation
command
d176 5
d182 1
a182 1
There are built in trouble spots which occur, in ypr, xyz, or aet
d187 1
a187 1
and gives a warning to that effect on stderr.
@


11.2
log
@overhaul and clarification to match work on anim_orient.c
@
text
@d142 2
a143 1
to turn the virtual camera in the same direction
@


11.1
log
@Release_4.4
@
text
@d6 2
a7 4
.B [-i{yzvo}] 
.B [-o{yzvo}] 
.B [-p] 
.B [-r] 
d15 45
a59 7
output format. The input format is specified by a one or two letter code
following the 
.B -i 
option. Similarly, the output format is specified by
the 
.B -o 
option. The possible formats are:
d61 3
a63 2
.BR default : 
quaternions. These are in the order x,y,z,w. The output will
d65 2
a66 1
xyz-vector represents an axis and and w represents cos(omega/2), where
d69 2
a70 4
.B z
or 
.BR zr : 
xyz angles, in the order x, y, z. They represent a rotation
a74 2
instead of 
.B z, 
d78 1
a78 3
.B y
or 
.BR yr : 
d83 33
a115 20
is used, angles are in radians rather than degrees. If used in
conjuction with the 
.B \-p 
permutation option, then the definition of the
yaw-pitch-roll format is that the virtual camera on the z-axis is rotated
down to face the positive x-direction before applying the above
mentioned rotations. This should be used when the yaw, pitch, and roll 
are supposed to refer to the virtual camera.
.TP
.BR o : 
pre-multiplication matrix (used for animating "objects"). Sixteen
numbers form a 4x4 matrix. This is the format used at the interior of
the conversion routine.
.TP
.BR v : 
post-multiplication matrix (used by 
.I rt 
for animating the virtual camera,
with the "viewrot" command). Sixteen numbers form a 4x4 matrix, which is
the transpose of a pre-multiplication matrix. 
a116 18
OPTIONS:
.TP
.B \-r 
Input and output in radians, if they are angle formats.
.TP
.B \-p 
Permute the interior matrix, in situations where yaw, pitch, and roll 
are being
used to control the virtual camera. The virtual camera is normally
facing the negative z-direction, with the x-axis to the right and the
y-axis going up. The permutation moves the virtual camera to the position
in which vehicles are usually modelled (facing the positive x
direction, with the y-axis to the left and the z-axis going up). The
yaw, pitch, and roll would be applied from this point.
In a word, the 
.B \-p 
option should be used whevever yaw, pitch, and roll are
involved and the orientation refers to the virtual camera.
d119 1
a119 1
Unitize a table of quaternions.
d123 1
a123 1
change xyz-angles to view matrix format
d125 1
a125 1
	anim_orient -iz -ov < in.table > out.table
d127 6
d135 1
a135 1
	anim_orient -iv -oo < in.table > out.table
d139 1
a139 5
	anim_orient -izr -oy < in.table > out.table
.sp
change yaw, pitch, roll to an object matrix
.sp
	anim_orient -iy -oo < in.table > out.table
d141 2
a142 4
change yaw, pitch, and roll to a view matrix, including a permutation which 
brings
the camera from the z-axis to the negative x-axis before beginning the
specified rotations.
d144 1
a144 6
	anim_orient -iy -ov -p < in.table > out.table
.sp
change a quaternion representation of the view orientation to an
yaw, pitch, roll form
.sp
	anim_orient -oy -p < in.table > out.table
d146 2
a147 2
There are built in trouble spots which occur, in ypr or xyz
formats, when the pitch or the y-rotation is an odd multiple of 90
d151 1
a151 1
and gives a warning to that effect.
d160 1
@


1.1
log
@Initial revision
@
text
@@
