head	11.7;
access;
symbols
	ansi-20040405-merged:11.4.6.1
	postmerge-20040405-ansi:11.6
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.5.6.1
	premerge-autoconf:11.6
	ansi-20040316-freeze:11.4
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.4.8.1
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.6
	phong-branch:11.5.0.4
	photonmap-branch:11.5.0.2
	rel-6-1-DP:11.4
	windows-branch:11.4.0.8
	rel-6-0-2:11.4
	ansi-branch:11.4.0.6
	rel-6-0-1-branch:11.4.0.4
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.4
	offsite-5-3-pre:11.4
	rel-5-3:11.4
	rel-5-2:11.4
	rel-5-1-branch:11.4.0.2
	rel-5-1:11.4
	rel-5-0:11.4
	rel-5-0-beta:11.4
	rel-4-5:11.4
	ctj-4-5-post:11.4
	ctj-4-5-pre:11.4
	rel-4-4:11.1;
locks; strict;
comment	@# @;


11.7
date	2004.05.24.04.17.00;	author morrison;	state dead;
branches;
next	11.6;

11.6
date	2004.02.02.17.38.57;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2003.01.07.13.31.58;	author jra;	state Exp;
branches
	11.5.6.1;
next	11.4;

11.4
date	96.08.29.01.23.24;	author cnuzman;	state Exp;
branches
	11.4.6.1
	11.4.8.1;
next	11.3;

11.3
date	96.07.30.01.06.37;	author cnuzman;	state Exp;
branches;
next	11.2;

11.2
date	96.07.05.17.33.08;	author cnuzman;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.33.58;	author mike;	state Rel4_4;
branches;
next	1.1;

1.1
date	94.08.04.21.20.39;	author cnuzman;	state Exp;
branches;
next	;

11.4.6.1
date	2004.03.17.21.15.47;	author morrison;	state Exp;
branches;
next	;

11.4.8.1
date	2004.03.11.23.40.24;	author morrison;	state Exp;
branches;
next	;

11.5.6.1
date	2004.02.12.19.40.39;	author erikg;	state Exp;
branches;
next	;


desc
@manual page for anim_hardtrack
@


11.7
log
@moved to src/anim/
@
text
@.TH ANIM_HARDTRACK 1 BRL/CAD
.SH NAME
anim_hardtrack - make an animation script for the links and/or wheels of a
tracked vehicle with rigid axles.
.SH SYNOPSIS
.B 
anim_hardtrack [-l num_links linkname] [-w wheelname] [options] wheelfile < in.table > out.script
.SH DESCRIPTION
.I Anim_hardtrack 
is designed to produce an animation script for the
animation of a track and/or the wheels defining a track, where the wheels
are rigidly fixed in place with respect to the vehicle. The main
difference between
.I anim_hardtrack
and 
.I anim_track
is that 
.I anim_track
handles vehicles with dynamic axles. Both are designed to be use in 
conjunction with
.I anim_script, 
to achieve the final result.
.PP
.B in.table 
is the file that will be used to animate the
vehicle itself. By default, it is assumed that it contains a time column,
three columns of translation information, and three columns specifying the
vehicle's yaw, pitch, and roll. If it is desired that the vehicle be steered
automatically, then the table should contain only time and position, and the
.B -s 
option should be used.
.PP
The track's
geometry is defined by 
.BR wheelfile , 
a table which contains one row for each wheel defining the track. The
first three columns of the table specify the x, y, and z coordinates of
the wheel centers. The fourth column specifies the radius of each wheel.
.PP
The order in which the wheels are listed should be the order in which a 
link of the track would move around the wheels when the vehicle is moving
forward. (clockwise, when looking from the right of the vehicle).
The wheel centers should all lie in a plane perpendicular to the vehicle's
left-right axis. If this is not the case,
.I anim_hardtrack
uses the first wheel as the standard and projects all the other wheels into
the same plane as the first wheel. By default, it is assumed that the
vehicle's left-right axis is the y-axis. If the modeled vehicle has some
other orientation, this must be specified with the
.B -b 
option.
.PP
By default, it is
assumed that 
all of the link objects are modeled at the model origin,
with the wheel-contacting surface centered on the origin and the
ground-contacting surface facing up. The sides of each link which
connect to other links should face the positive and negative x-axes.
.I Anim_hardtrack 
prints the appropriate
commands to move the links from 
the origin to the correct place around the wheels.
.PP
If the links are modeled in place around the wheels to begin with, the
the 
.B -p 
and 
.B -i 
options are needed.

.SH OPTIONS:
.PP
One or both of the first two options should always be specified.
.TP
.B \-l num linkname
Print animation scripts to animate the links of the track. Animation
commands will be printed for
.I num 
different links 
named 
.IR linkname .0, linkname .1, 
up through 
.IR linkname .( num -1). 
A typical example of a linkname might
be "tank/righttrack/links/link". The full pathname must be specified,
because anim_hardtrack's method is to roll the links around within
the vehicle's tree structure so that when the whole vehicle "tank" is
animated, the complete combination of rolling around and translating is
achieved. 
.TP
.B \-w wheelname
Print animation
scripts to rotate each wheel. The wheels are named wheelname.0, wheelname.1, 
and so on, where wheelname.0 is the first wheel listed in 
.BR wheelfile . 
As with the links, the full pathname for the wheels should be specified.
.TP
.B \-b # # #
Specify the yaw, pitch, and roll of the vehicle's axes
with respect to the world axes. By default, the vehicle is assumed to
have a yaw, pitch, and roll of 0.
.TP
.B \-d # # #
Specify (in world coordinates) the centroid of the vehicle
of which the track is a part. By default, the vehicle is assumed
centered at the origin.
.PP
When calling 
.I anim_script 
to handle the animation of the vehicle
itself, the parameters following the 
.B -b 
and 
.B -d 
options should be identical
to those used for 
.IR anim_hardtrack .
.TP
.B \-r #
Specify the common radius of all wheels. In this case the fourth column
should be omitted from the
.BR wheelfile .
.TP
.B \-s
Automatic steering. In this case, 
.B in.table 
specifies only the time and position 
of the vehicle. The orientation is calculated to always face the vehicle
in the direction of motion.
This should be used when the 
.B \-s 
option is used by 
.I anim_script
to animate the vehicle.
.PP
.TP
.B \-f#
Specify the integer with which to begin numbering frames.
Default is zero.
.TP
.B \-p
Animate placed links, rather than links stored at the origin.
In order for placed links to be animated, they must be equally spaced
around the wheels defining the track. The track must be formed of arcs
around the wheels and straight lines between the wheels, and the links
must be numbered clockwise as seen from the right.
By default, it is assumed that the
center of the first link, linkname.0, is at the beginning of the
straight track segment between wheel.(n-1) and wheel.0 . If this is
not the case, the position of the first link must be identified with the
.B \-i#
option.
.TP
.B \-i#
Specify the initial offset of the first link. If this option is
not used, the initial position of linkname.0 is assumed to be the
beginning of the straight track segment between wheel.(n-1) and wheel.0.
If it is used, the argument specifies the distance clockwise around the
track from the default position to the actual desired offset. If the
links are modeled at the origin, the user can choose any offset. This
can be useful for lining up the links with gears of a drive wheel, for
example.
If the 
.B -p 
option is being used to animated pre-placed links, then it is essential
that the actual offset of the first pre-placed link be specified.
.SS Output:
.PP
The output is a script containing as many frames as there
are positions in 
.BR in.table . 
If there are 
.I n 
links and 
.I k 
wheels, each
frame contains up to 
.IR  n + k 
anim commands, either:
.nf

anim linkname.i matrix lmul
[... matrix ...] ;
				or
anim wheelname.j matrix lmul
[... matrix ...] ;
 
for 0<=i<n and 0<=j<k. 

.fi
.SH EXAMPLES
Suppose you want to make an animation of a tank rolling across
flat ground. A list of desired positions is created, perhaps by
interpolating between a few key positions; this information is placed
in a four column animation table, in.table. The model of the tank is stored in
model.g as a combination named "tank". Its centroid is at the
point (0,0,1000) and it faces the y-axis. An animation script for the
tank itself is created as follows:
.PP
anim_script -s -d 0 0 1000 -b 90 0 0 /tank < in.table > tank.script
.PP
Suppose that there are two
roadwheels and a drivewheel (tank/rwheel/wheel.i, 0<=i<3) which define
the shape of the right track. 
A file called 
.B rwheelfile 
is created:
.nf

1500   -2000    30      30
1500   0        1000    35
1500   2000     30      30

.fi
This 
.B rwheelfile 
lists the position and
radius of each of the three wheels.
.PP
There are eighty links which make up the right track 
(tank/rtrack/link.i, 0<=i<80).
The links of the right track are all modeled
at the origin with the outer, ground-contacting surface
facing up and the inner, wheel-contacting surface centered at the
origin.
.PP
The appropriate call to 
.I anim_hardtrack 
is now:
.sp
anim_hardtrack -d 0 0 1000 -b 90 0 0 -w tank/rwheel -l 80 tank/rtrack/link 
	rwheelfile < in.table > rtrack.script
.sp
Suppose that the left track is similar to the right track,
except that all the wheels are of radius 30 units, and the links, rather
than being stored at the origin, are actually placed in position around
the left wheels to begin with. The 
.B lwheelfile 
would be:
.nf

-1500   -2000   30
-1500   0       1000
-1500   2000    30

.fi
and the call would be:
.sp
anim_hardtrack -p -r 30 -d 0 0 1000 -b 90 0 0 -w tank/lwheel 
	-l 80 tank/ltrack/link lwheelfile <in.table > ltrack.script
.sp
Here, it is assumed that tank/ltrack/link.0 is initially at the
beginning of the straight track segment between lwheel.2 and lwheel.0,
that is, at the point (2000,1500,-1000) in the vehicle's coordinates.
If, instead, the first link is initially centered halfway between the
two roadwheels, this must be specified with the 
.B -i# 
option. If the link's
actual position is 2000 units farther around the track than expected:
.sp
anim_hardtrack -i 2000 -p -r 30 -d 0 0 1000 -b 90 0 0 -w tank/lwheel 
	-l 80 tank/ltrack/link lwheelfile <in.table > ltrack.script
.sp
One final step may remain. The above procedure produces a script with rigid
naming conventions, in order to make input simple. This may mean that
the names in the script do not match the names in model.g. An editor
should then be used at the end to replace all instances of the
conventional name with the real name; for example, in this case it may
be necessary to replace "rwheel.1" with "r_drivewheel".
.PP
.BR Tank.script , 
.BR rtrack.script , 
and 
.B ltrack.script 
can be combined
with 
.I anim_sort 
to make the complete script.
.PP
.SH BUGS
Tracks must have at least two wheels, and they must be listed in clockwise
order, or the results are unpredictable.
.SH SEE ALSO
anim_script(1), anim_track(1)
.SH AUTHOR
Carl J. Nuzman
.SH COPYRIGHT
	This software is Copyright (C) 1993-2004 by the United States Army
in all countries except the USA.  All rights reserved.
.SH "BUG REPORTS"
Reports of bugs or problems should be submitted via electronic
mail to <CAD@@ARL.ARMY.MIL>.

@


11.6
log
@update copyright to include span through 2003
@
text
@@


11.5
log
@Corrected email address
@
text
@d288 1
a288 1
	This software is Copyright (C) 1993 by the United States Army
@


11.5.6.1
log
@merge from HEAD
@
text
@d288 1
a288 1
	This software is Copyright (C) 1993-2004 by the United States Army
@


11.4
log
@glitch
@
text
@d292 1
a292 1
mail to <CAD@@BRL.MIL>.
@


11.4.6.1
log
@sync branch with HEAD
@
text
@d288 1
a288 1
	This software is Copyright (C) 1993-2004 by the United States Army
d292 1
a292 1
mail to <CAD@@ARL.ARMY.MIL>.
@


11.4.8.1
log
@sync to HEAD...
@
text
@d288 1
a288 1
	This software is Copyright (C) 1993-2004 by the United States Army
d292 1
a292 1
mail to <CAD@@ARL.ARMY.MIL>.
@


11.3
log
@reflected changes to -p, -l options
@
text
@d71 1
a71 2
.SH
OPTIONS:
@


11.2
log
@-s replaces -u option, meaning of trackfile changed
@
text
@d3 1
a3 1
anim_hardtrack - make an animation script for the links and wheels of a
d7 1
a7 1
anim_hardtrack [options] linkname trackfile < in.table > out.script
d35 5
a39 21
.BR trackfile , 
which has the following format:
.nf

num_wheels num_links
x   y   z   (radius)		
x   y   z   (radius)
x   y   z   (radius)
etc.

.fi
The number of wheels and number of links are specified on the first line.
The remaining lines of
.B trackfile 
indicate the centerpoint and radius of each wheel.
If all the wheels have the same radius,
the radius can be specified with the 
.B \-r#
option, in
which case the radii should not appear in 
.BR trackfile . 
d53 34
a86 6
The 
.B linkname 
is the base name shared by all of the track's links. The
output script will contain animation commands for a series of objects,
linkname.0, linkname.1, and so on. A typical example of a linkname might
be "tank/track_rt/links/link". The full pathname must be specified,
a90 35
.SH
OPTIONS:
.TP
.B \-l
.I Track 
can handle two different types of models. By default, it is
assumed that 
.B num_links 
copies of the link are stored at the model's
origin. The program prints the appropriate commands to move them from
the origin to the correct place on the track. The other possibility is
that the links are already in position around the wheels of the model
vehicle. This is indicated by the 
.B -l 
option. It is assumed that the
center of the first link, linkname.0, is at the beginning of the
straight track segment between wheel.(n-1) and wheel.0 . If this is
not the case, the position of the first link must be identified with the
.B \-i#
option.
.TP
.B \-i#
Specify the initial offset of the first link. If this option is
not used, the initial position of linkname.0 is assumed to be the
beginning of the straight track segment between wheel.(n-1) and wheel.0.
If it is used, the argument specifies the distance clockwise around the
track from the default position to the actual desired offset. If the
links are modeled at the origin, the user can choose any offset. The
option can be useful for lining up the links with gears of a drive
wheel, for example. If the links are actually in position in the model
to begin with 
(see the 
.B \-l 
option), then the user must specify the actual offset of
linkname.0, in order for the program to work correctly.
d92 6
a97 3
.B \-f#
Specify the integer with which to begin numbering frames.
Default is zero.
d121 3
a123 13
Specify the common radius of all wheels - otherwise the radii
must be provided in 
.BR infofile .
.TP
.B \-w wname
Along with scripts to animate the links, print animation
scripts to rotate each wheel. The wheels are named wname.0, wname.1, and
so on, where wname.0 is the first wheel listed in 
.BR trackfile .
If only the wheels are to be animated, the 
.B num_links 
should be set to zero in 
.BR trackfile .
d137 31
a167 1
.PP
d170 1
a170 1
	The output is a script containing as many frames as there
d178 2
a179 2
frame contain 
.I n+k 
d186 1
a186 1
anim wname.j matrix lmul		(see -w option)
d203 1
a203 5
Now, a file called
.B rtrackfile 
is created, using the following information: There are eighty
links which make up the track (tank/rtrack/link.i, 0<=i<80).
There are two
d207 1
a207 1
.B rtrackfile 
a210 1
3      80
d217 2
a218 2
.B rtrackfile 
shows that there are three wheels, 80 links, and lists the position and
d221 6
a226 4
The links of the right track are all
stored at the origin. The outer, ground contacting surface should be
facing up and the inner, wheel-contacting surface should be facing down,
with the center of the surface facing the origin. 
d230 1
a230 1
would now be:
d232 2
a233 2
anim_hardtrack -w tank/rwheel -d 0 0 1000 -b 90 0 0 tank/rtrack/link rtrackfile 
< in.table > rtrack.script
d239 1
a239 1
.B ltrackfile 
a242 1
3       80
d250 2
a251 2
anim_hardtrack -l -r 30 -w tank/lwheel -d 0 0 1000 -b 90 0 0 tank/ltrack/link 
ltrackfile <in.table > ltrack.script
d262 2
a263 2
anim_hardtrack -i 2000 -l -r 30 -w tank/lwheel -d 0 0 1000 -b 90 0 0 tank/ltrack/link 
ltrackfile <in.table > ltrack.script
@


11.1
log
@Release_4.4
@
text
@d22 1
a22 1
to acheive the final result.
d26 4
a29 5
vehicle itself. By default, it is assumed that it contains a time column
and three columns of translation information, and that the vehicle will
be steered by 
.I anim_script 
using the 
d31 3
a33 13
option. Otherwise, user-controlled
orientation can be signaled withe the 
.B -u 
flag, in which case 
.B in.table
should also contain three columns of orientation information, in yaw, pitch,
roll format.
.PP
For the purposes of 
.I anim_hardtrack, 
the x-axis is the direction the
vehicle faces, y is to the left and the z-axis is up. In terms of these
coordinates, the wheels are required to lie in an xz plane. The track's
d39 4
a42 4
num_wheels num_links y_offset
x_pos  z_pos  (radius)		
x_pos  z_pos  (radius)
x_pos  z_pos  (radius)
d46 1
a46 8
The number of wheels and number of links are specified on the first line,
followed by the distance between the center of the vehicle and the xz
plane that intersects the wheels. A positive 
.B y_offset 
means that the
track is to the left of the vehicle's center, and a negative 
.B y_offset
means that the track is to the right.
d49 3
a51 3
indicate the x and z coordinates
and radius of each of the wheels which define the track. If they all
have the same radius, the radius can be specified with the 
d56 12
a67 2
The wheels
should be listed in clockwise order, looking from the right.
d78 1
a78 4
achieved. When the linkname is large and cumbersome, it is sometimes
more convenient to substitute a simpler name and then restore it in the
output script using an editor such as 
.IR jove .
d120 3
a122 2
Specify the yaw, pitch, and roll of the track's axes
with respect to the world axes.
d126 2
a127 16
of which the track is a part.
.PP
The 
.B trackfile 
explains the shape of the track and its
relationship to the center of the whole vehicle, but the 
.B -b 
and 
.B -d
options are necessary to specify where the centroid is and what the
vehicle's orientation is. By default, the vehicle faces the x-axis and
its centroid is at the origin. The information in 
.B trackfile 
is
interpreted to be displacement from the vehicle's centroid, with respect
to its own axes.
d155 2
a156 2
.B \-u
User specified rotation. 
d158 9
a166 12
specifies the position and
orientation of the vehicle. Otherwise it is assumed that position 
alone will be specified in 
.BR in.table , 
and that the vehicle
should be "steered" automatically.
.PP
For 
.I anim_script, 
the default is user-specified orientation. For 
.I anim_hardtrack,
the default is automatic steering.
d209 2
a210 7
the shape of the right track. In the tank's coordinate system, the plane
of the right track lies 1500 units to the right of the center. The rear
roadwheel, of radius 30, lies 2000 units behind and 970 units below
the center, the drivewheel, of radius 35 units, is exactly
in line with the center point, and the front roadwheel, of radius 30,
lies 2000 units in front of and 970 units below the center. The
resulting 
d212 1
a212 1
is:
d215 4
a218 4
3 80 -1500
-2000  -970     30
    0     0     35
 2000  -970     30
d223 3
a225 3
would be the same, regardless of the position and
orientation of the vehicle in the model, because the displacements are
relative to the vehicle's own coordinates (x = front, y=  left, z = up).
d246 4
a249 4
3 80 1500
-2000  -970
    0     0
 2000  -970
d263 1
a263 1
option. The link's
@


1.1
log
@Initial revision
@
text
@@
