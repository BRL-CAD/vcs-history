head	11.12;
access;
symbols
	ansi-20040405-merged:11.8.2.2
	postmerge-20040405-ansi:11.10
	premerge-20040404-ansi:11.9
	postmerge-autoconf:11.9
	autoconf-freeze:11.8.10.1
	premerge-autoconf:11.9
	ansi-20040316-freeze:11.8.2.1
	postmerge-20040315-windows:11.9
	premerge-20040315-windows:11.9
	windows-20040315-freeze:11.8.4.1
	autoconf-20031203:11.8
	autoconf-20031202:11.8
	autoconf-branch:11.8.0.10
	phong-branch:11.8.0.8
	photonmap-branch:11.8.0.6
	rel-6-1-DP:11.8
	windows-branch:11.8.0.4
	rel-6-0-2:11.6
	ansi-branch:11.8.0.2
	rel-6-0-1-branch:11.6.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.6
	rel-6-0-1:11.6
	rel-6-0:11.6
	rel-5-4:11.5
	offsite-5-3-pre:11.5
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.5
	rel-5-0-beta:11.4
	rel-4-5:11.4
	ctj-4-5-post:11.3
	ctj-4-5-pre:11.3
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.12
date	2004.05.24.04.17.00;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2004.05.10.15.30.41;	author erikg;	state Exp;
branches;
next	11.10;

11.10
date	2004.04.05.07.50.19;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2004.02.02.17.38.58;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2002.08.20.17.07.18;	author jra;	state Exp;
branches
	11.8.2.1
	11.8.4.1
	11.8.10.1;
next	11.7;

11.7
date	2002.08.15.20.54.06;	author hartley;	state Exp;
branches;
next	11.6;

11.6
date	2001.08.21.20.41.59;	author jra;	state Exp;
branches;
next	11.5;

11.5
date	99.07.02.22.07.12;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	97.08.22.22.48.24;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	96.07.30.21.15.22;	author cnuzman;	state Exp;
branches;
next	11.2;

11.2
date	95.07.10.23.36.47;	author cnuzman;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.34.11;	author mike;	state Rel4_4;
branches;
next	1.3;

1.3
date	94.11.30.09.36.55;	author jra;	state Exp;
branches;
next	1.2;

1.2
date	94.08.25.11.07.12;	author cnuzman;	state Exp;
branches;
next	1.1;

1.1
date	94.08.04.22.04.42;	author cnuzman;	state Exp;
branches;
next	;

11.8.2.1
date	2002.09.19.18.00.32;	author morrison;	state Exp;
branches;
next	11.8.2.2;

11.8.2.2
date	2004.03.17.21.15.49;	author morrison;	state Exp;
branches;
next	;

11.8.4.1
date	2004.03.11.23.40.26;	author morrison;	state Exp;
branches;
next	;

11.8.10.1
date	2004.02.12.19.40.40;	author erikg;	state Exp;
branches;
next	;


desc
@filter to create animation table for front wheel steered vehicle.
@


11.12
log
@moved to src/anim/
@
text
@/*			A N I M _ T U R N . C
 *
 *	Animate front-wheel steered vehicles.
 *
 *  This is a filter which operates on animation tables. Given an
 *  animation table for the position of the front axle, anim_turn produces
 *  an animation table for position and orientation. Options provide for
 *  animating the wheels and/or steering wheel.
 * 
 *  Author -
 *	Carl J. Nuzman
 *  
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
 *
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#include <math.h>
#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "bu.h"
#include "anim.h"

#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif

int		get_args(int argc, char **argv);
extern void	anim_y_p_r2mat(fastf_t *, double, double, double);
extern void	anim_add_trans(fastf_t *, const fastf_t *, const fastf_t *);

extern int bu_optind;
extern char *bu_optarg;

int print_int = 1;
int angle_set = 0;
int turn_wheels = 0;
fastf_t length, angle, radius;
fastf_t factor = 1.0;

int
main(int argc, char **argv)
{
	int count;
	fastf_t val, time, roll_ang, yaw,sign;
	vect_t v, point, front, back, zero, temp1, temp2;
	mat_t m_from_world, m_to_world;
	double bn_atan2(double, double);

	/* initialize variables */
	VSETALL(zero, 0.0);
	VSETALL( v , 0.0 );
	VSETALL( point, 0.0 );
	VSETALL( front, 0.0 );
	VSETALL( back, 0.0 );
	VSETALL( temp1, 0.0 );
	VSETALL( temp2, 0.0 );
	for( count=0 ; count<ELEMENTS_PER_MAT ; count++ )
		m_from_world[count]=m_to_world[count]=0.0;
	length = angle = radius = roll_ang = 0.0;

	if (!get_args(argc,argv))
		fprintf(stderr,"ascript: Get_args error");

	if (!angle_set) { /* set angle if not yet done */
		scanf("%*f%*[^-0123456789]");
		VSCAN(temp1);
		scanf("%*f%*[^-0123456789]");
		VSCAN(temp2);
		angle = bn_atan2( (temp2[1]-temp1[1]),(temp2[0]-temp1[0]) );
		rewind(stdin);
	}
	count = 0;
	while (1) {
		/* read one line of table */
		val = scanf("%lf%*[^-0123456789]",&time); /*read time,ignore garbage*/
		val = scanf("%lf %lf %lf", point, point+1, point +2);
		if (val < 3) {
			break;
		}

		/*update to and from matrices */

		if (count) { /* not first time through */
			/* calculate matrices corrsponding to last position*/
			anim_y_p_r2mat(m_to_world,angle,0.0,0.0);
			anim_add_trans(m_to_world,front,zero);
			anim_y_p_r2mat(m_from_world,-angle,0.0,0.0);
			VREVERSE(temp1,front);
			anim_add_trans(m_from_world,zero,temp1);
		
			/* calculate new position for front and back axles */
			/* front goes to the point, back slides along objects*/
			/* current front to back axis */
			MAT4X3PNT(v,m_from_world,point);/* put point in vehicle coordinates*/
			if (v[1] > length) {
				fprintf(stderr,"anim_turn: Distance between positions greater than length of vehicle - ABORTING\n");
				break;
			}
			temp2[0] = v[0] - sqrt(length*length - v[1]*v[1]); /*calculate back*/
			temp2[1] = temp2[2] = 0.0;
			MAT4X3PNT(back,m_to_world,temp2);/*put "back" in world coordinates*/
			VMOVE(front,point);

			/*calculate new angle of vehicle*/
			VSUB2(temp1,front,back);
			angle = bn_atan2(temp1[1],temp1[0]);
		}
		else { /*first time through */
			/*angle is already determined*/
			VMOVE(front, point);
		}

		/*calculate turn angles and print table*/
		
		if (turn_wheels){ 
			if (v[0] >= 0)
				sign = 1.0;
			else
				sign = -1.0;
			yaw = bn_atan2(sign*v[1],sign*v[0]);
			if (radius > VDIVIDE_TOL)
				roll_ang -= sign * MAGNITUDE(v) / radius;

			if (!(count%print_int))
				printf("%.10g %.10g %.10g 0.0\n",time,factor*RTOD*yaw,RTOD*roll_ang);
		}
		else { /* print position and orientation of vehicle */
			if (!(count%print_int))
				printf("%.10g %.10g %.10g %.10g %.10g 0.0 0.0\n",time,front[0],front[1],front[2], RTOD * angle);
		}
		count++;
	}
	return( 0 );
}

#define OPT_STR "r:l:a:f:p:"

int get_args(int argc, char **argv)
{
	int c;
	while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
		switch(c){
		case 'l':
			sscanf(bu_optarg,"%lf",&length);
			break;
		case 'a':
			sscanf(bu_optarg,"%lf",&angle);
			angle *= DTOR; /* degrees to radians */
			angle_set = 1;
			break;
		case 'r':
			sscanf(bu_optarg,"%lf",&radius);
			turn_wheels = 1;
			break;
		case 'f':
			turn_wheels = 1;
			sscanf(bu_optarg,"%lf",&factor);
			break;
		case 'p':
			sscanf(bu_optarg,"%d",&print_int);
			break;
		default:
			fprintf(stderr,"Unknown option: -%c\n",c);
			return(0);
		}
	}
	return(1);
}

@


11.11
log
@change conf.h to a wrapped config.h
@
text
@@


11.10
log
@merge of ansi-6-0-branch into HEAD
@
text
@d27 5
a31 1
#include "conf.h"
@


11.9
log
@update copyright to include span through 2003
@
text
@d39 3
a41 3
int		get_args();
extern void	anim_y_p_r2mat();
extern void	anim_add_trans();
d53 1
a53 3
main(argc,argv)
int argc;
char **argv;
d59 1
a59 1
	double bn_atan2();
d150 1
a150 3
int get_args(argc,argv)
int argc;
char **argv;
@


11.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d23 1
a23 1
 *      This software is Copyright (C) 1993 by the United States Army
@


11.8.4.1
log
@sync to HEAD...
@
text
@d23 1
a23 1
 *      This software is Copyright (C) 1993-2004 by the United States Army
@


11.8.10.1
log
@merge from HEAD
@
text
@d23 1
a23 1
 *      This software is Copyright (C) 1993-2004 by the United States Army
@


11.8.2.1
log
@Initial ANSIfication
@
text
@d39 3
a41 3
int		get_args(int argc, char **argv);
extern void	anim_y_p_r2mat(fastf_t *, double, double, double);
extern void	anim_add_trans(fastf_t *, const fastf_t *, const fastf_t *);
d53 3
a55 1
main(int argc, char **argv)
d61 1
a61 1
	double bn_atan2(double, double);
d152 3
a154 1
int get_args(int argc, char **argv)
@


11.8.2.2
log
@sync branch with HEAD
@
text
@d23 1
a23 1
 *      This software is Copyright (C) 1993-2004 by the United States Army
@


11.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d39 3
a41 3
int		get_args(int argc, char **argv);
extern void	anim_y_p_r2mat(fastf_t *, double, double, double);
extern void	anim_add_trans(fastf_t *, const fastf_t *, const fastf_t *);
d53 3
a55 1
main(int argc, char **argv)
d61 1
a61 1
	double bn_atan2(double, double);
d152 3
a154 1
int get_args(int argc, char **argv)
@


11.6
log
@lint
@
text
@d39 3
a41 3
int		get_args();
extern void	anim_y_p_r2mat();
extern void	anim_add_trans();
d53 1
a53 3
main(argc,argv)
int argc;
char **argv;
d59 1
a59 1
	double bn_atan2();
d150 1
a150 3
int get_args(argc,argv)
int argc;
char **argv;
@


11.5
log
@
Eliminated dependence on compat4.h
@
text
@d32 1
d39 3
d52 1
d147 1
a147 1

@


11.4
log
@Made dependence on bu_getopt() explicit.
@
text
@d56 1
a56 1
	double mat_atan2();
d78 1
a78 1
		angle = mat_atan2( (temp2[1]-temp1[1]),(temp2[0]-temp1[0]) );
d115 1
a115 1
			angle = mat_atan2(temp1[1],temp1[0]);
d129 1
a129 1
			yaw = mat_atan2(sign*v[1],sign*v[0]);
@


11.3
log
@output formatting
@
text
@d39 2
a40 2
extern int optind;
extern char *optarg;
d152 1
a152 1
	while ( (c=getopt(argc,argv,OPT_STR)) != EOF) {
d155 1
a155 1
			sscanf(optarg,"%lf",&length);
d158 1
a158 1
			sscanf(optarg,"%lf",&angle);
d163 1
a163 1
			sscanf(optarg,"%lf",&radius);
d168 1
a168 1
			sscanf(optarg,"%lf",&factor);
d171 1
a171 1
			sscanf(optarg,"%d",&print_int);
@


11.2
log
@updated anim.c routine names
@
text
@d134 1
a134 1
				printf("%f %f %f 0.0\n",time,factor*RTOD*yaw,RTOD*roll_ang);
d138 1
a138 1
				printf("%f %f %f %f %f 0.0 0.0\n",time,front[0],front[1],front[2], RTOD * angle);
@


11.1
log
@Release_4.4
@
text
@d94 3
a96 3
			y_p_r2mat(m_to_world,angle,0.0,0.0);
			add_trans(m_to_world,front,zero);
			y_p_r2mat(m_from_world,-angle,0.0,0.0);
d98 1
a98 1
			add_trans(m_from_world,zero,temp1);
@


1.3
log
@initialized variables.
@
text
@@


1.2
log
@included conf.h
@
text
@d58 1
d60 8
@


1.1
log
@Initial revision
@
text
@d27 1
d122 1
a122 1
				roll_ang += sign * MAGNITUDE(v) / radius;
@
