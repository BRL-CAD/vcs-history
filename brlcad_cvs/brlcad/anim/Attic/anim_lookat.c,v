head	11.15;
access;
symbols
	ansi-20040405-merged:11.11.2.2
	postmerge-20040405-ansi:11.13
	premerge-20040404-ansi:11.12
	postmerge-autoconf:11.12
	autoconf-freeze:11.11.10.1
	premerge-autoconf:11.12
	ansi-20040316-freeze:11.11.2.1
	postmerge-20040315-windows:11.12
	premerge-20040315-windows:11.12
	windows-20040315-freeze:11.11.4.1
	autoconf-20031203:11.11
	autoconf-20031202:11.11
	autoconf-branch:11.11.0.10
	phong-branch:11.11.0.8
	photonmap-branch:11.11.0.6
	rel-6-1-DP:11.11
	windows-branch:11.11.0.4
	rel-6-0-2:11.9
	ansi-branch:11.11.0.2
	rel-6-0-1-branch:11.9.0.2
	hartley-6-0-post:11.10
	hartley-6-0-pre:11.9
	rel-6-0-1:11.9
	rel-6-0:11.9
	rel-5-4:11.8
	offsite-5-3-pre:11.8
	rel-5-3:11.8
	rel-5-2:11.8
	rel-5-1-branch:11.8.0.2
	rel-5-1:11.8
	rel-5-0:11.7
	rel-5-0-beta:11.7
	rel-4-5:11.7
	ctj-4-5-post:11.6
	ctj-4-5-pre:11.6
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.15
date	2004.05.24.04.17.00;	author morrison;	state dead;
branches;
next	11.14;

11.14
date	2004.05.10.15.30.41;	author erikg;	state Exp;
branches;
next	11.13;

11.13
date	2004.04.05.07.50.19;	author morrison;	state Exp;
branches;
next	11.12;

11.12
date	2004.02.02.17.38.57;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2002.08.20.17.07.18;	author jra;	state Exp;
branches
	11.11.2.1
	11.11.4.1
	11.11.10.1;
next	11.10;

11.10
date	2002.08.15.20.54.06;	author hartley;	state Exp;
branches;
next	11.9;

11.9
date	2001.08.21.19.01.10;	author jra;	state Exp;
branches;
next	11.8;

11.8
date	99.12.30.19.03.19;	author jra;	state Exp;
branches;
next	11.7;

11.7
date	97.08.22.22.48.24;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	96.07.30.21.13.16;	author cnuzman;	state Exp;
branches;
next	11.5;

11.5
date	96.06.25.16.54.53;	author cnuzman;	state Exp;
branches;
next	11.4;

11.4
date	96.06.24.15.14.43;	author cnuzman;	state Exp;
branches;
next	11.3;

11.3
date	96.01.26.20.38.33;	author cnuzman;	state Exp;
branches;
next	11.2;

11.2
date	95.07.10.23.34.53;	author cnuzman;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.34.02;	author mike;	state Rel4_4;
branches;
next	1.4;

1.4
date	94.08.25.11.03.51;	author cnuzman;	state Exp;
branches;
next	1.3;

1.3
date	94.08.24.14.53.43;	author cnuzman;	state Exp;
branches;
next	1.2;

1.2
date	94.08.19.14.00.34;	author cnuzman;	state Exp;
branches;
next	1.1;

1.1
date	94.08.04.20.51.06;	author cnuzman;	state Exp;
branches;
next	;

11.11.2.1
date	2002.09.19.18.00.31;	author morrison;	state Exp;
branches;
next	11.11.2.2;

11.11.2.2
date	2004.03.17.21.15.47;	author morrison;	state Exp;
branches;
next	;

11.11.4.1
date	2004.03.11.23.40.24;	author morrison;	state Exp;
branches;
next	;

11.11.10.1
date	2004.02.12.19.40.40;	author erikg;	state Exp;
branches;
next	;


desc
@make a camera animation script given eyepoints and lookat points
@


11.15
log
@moved to src/anim/
@
text
@/*			A N I M _ L O O K A T . C
 *
 *	Given animation tables for the position of the virtual camera 
 * and a point to look at at each time, this program produces an animation
 * script to control the camera. The view is kept rightside up, whenever 
 * possible. When looking vertically up or down, the exact orientation 
 * depends on the previous orientation.
 *
 *  Author -
 *	Carl J. Nuzman
 *  
 *  Source -
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *      Re-distribution of this software is restricted, as described in
 *      your "Statement of Terms and Conditions for the Release of
 *      The BRL-CAD Pacakge" agreement.
 *
 *  Copyright Notice -
 *      This software is Copyright (C) 1993-2004 by the United States Army
 *      in all countries except the USA.  All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "anim.h"
#include "bu.h"

#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif
#ifndef RTOD
#define RTOD	(180/M_PI)
#endif


#define LOOKAT_SCRIPT	0
#define	LOOKAT_YPR	1
#define LOOKAT_QUAT	2


extern int bu_optind;
extern char *bu_optarg;

int frame = 0;
int print_mode = LOOKAT_SCRIPT;
int print_viewsize = 0;

int get_args(int argc, char **argv);
extern void anim_dirn2mat(fastf_t *, const fastf_t *, const fastf_t *);
extern int anim_mat2ypr(fastf_t *, fastf_t *);
extern int anim_mat2quat(fastf_t *, const fastf_t *);

int
main(int argc, char **argv)
{
	fastf_t time, vsize=0.0;
	vect_t eye,look,dir, angles, norm, temp;
	quat_t quat;
	mat_t mat;
	int val = 0;

	VSETALL(look,0.0);
	VSETALL(eye,0.0);

	if (argc > 1)
		get_args(argc,argv);

	VSET(norm, 0.0, 1.0, 0.0);
	while (!feof(stdin)){
		val=scanf("%lf %lf %lf %lf %lf %lf %lf",&time,eye,eye+1,eye+2,look,look+1,look+2);
		if (val < 7){
			break;
		}

		if (print_viewsize) {
			VSUB2(temp, eye, look);
			vsize = MAGNITUDE(temp);
			vsize *= 2.0;
		}

		VSUBUNIT(dir,look,eye);
		anim_dirn2mat(mat,dir,norm);
		VSET(norm, mat[1],mat[5], 0.0); 
		switch (print_mode) {
		case LOOKAT_SCRIPT:
			printf("start %d;\n",frame++);
			printf("clean;\n");
			if (print_viewsize)
				printf("viewsize %.10g;\n",vsize);
	                printf("eye_pt %.10g %.10g %.10g;\n",eye[0],eye[1],eye[2]);
			printf("viewrot %.10g\t%.10g\t%.10g\t0\n", -mat[1], -mat[5], -mat[9]);
	                printf("%.10g\t%.10f\t%.10g\t0\n", mat[2], mat[6], mat[10]);
	                printf("%.10g\t%.10g\t%.10g\t0\n", -mat[0], -mat[4], -mat[8]);
	                printf("0\t0\t0\t1;\n");
			printf("end;\n");
			break;
		case LOOKAT_YPR:
			anim_mat2ypr(angles,mat);
			angles[0] *= RTOD;
			angles[1] *= RTOD;
			angles[2] *= RTOD;
			printf("%.10g",time);
			if (print_viewsize)
				printf("\t%.10g",vsize);
			printf("\t%.10g\t%.10g\t%.10g",eye[0],eye[1],eye[2]);
			printf("\t%.10g\t%.10g\t%.10g\n",angles[0],angles[1],angles[2]);
			break;
		case LOOKAT_QUAT:
			anim_mat2quat(quat,mat);
			printf("%.10g",time);
			if (print_viewsize)
				printf("\t%.10g",vsize);
			printf("\t%.10g\t%.10g\t%.10g",eye[0],eye[1],eye[2]);
			printf("\t%.10g\t%.10g\t%.10g\t%.10g\n",quat[0],quat[1],quat[2],quat[3]);
			break;
		}


	}
	return( 0 );
}

#define OPT_STR "f:yqv"

int get_args(int argc, char **argv)
{
	int c;
	while ( (c=bu_getopt(argc,argv,OPT_STR)) != EOF) {
		switch(c){
		case 'f':
			sscanf(bu_optarg,"%d",&frame);
			break;
		case 'y':
			print_mode = LOOKAT_YPR;
			break;
		case 'q':
			print_mode = LOOKAT_QUAT;
			break;
		case 'v':
			print_viewsize = 1;
			break;
		default:
			fprintf(stderr,"Unknown option: -%c\n",c);
			return(0);
		}
	}
	return(1);
}

@


11.14
log
@change conf.h to a wrapped config.h
@
text
@@


11.13
log
@merge of ansi-6-0-branch into HEAD
@
text
@d26 5
a30 1
#include "conf.h"
@


11.12
log
@update copyright to include span through 2003
@
text
@d54 4
a57 4
int get_args();
extern void anim_dirn2mat();
extern int anim_mat2ypr();
extern int anim_mat2quat();
d60 1
a60 3
main(argc,argv)
int argc;
char **argv;
d131 1
a131 3
int get_args(argc,argv)
int argc;
char **argv;
@


11.11
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d22 1
a22 1
 *      This software is Copyright (C) 1993 by the United States Army
@


11.11.4.1
log
@sync to HEAD...
@
text
@d22 1
a22 1
 *      This software is Copyright (C) 1993-2004 by the United States Army
@


11.11.10.1
log
@merge from HEAD
@
text
@d22 1
a22 1
 *      This software is Copyright (C) 1993-2004 by the United States Army
@


11.11.2.1
log
@Initial ANSIfication
@
text
@d54 4
a57 4
int get_args(int argc, char **argv);
extern void anim_dirn2mat(fastf_t *, const fastf_t *, const fastf_t *);
extern int anim_mat2ypr(fastf_t *, fastf_t *);
extern int anim_mat2quat(fastf_t *, const fastf_t *);
d60 3
a62 1
main(int argc, char **argv)
d133 3
a135 1
int get_args(int argc, char **argv)
@


11.11.2.2
log
@sync branch with HEAD
@
text
@d22 1
a22 1
 *      This software is Copyright (C) 1993-2004 by the United States Army
@


11.10
log
@Converted from K&R to ANSI C - RFH
@
text
@d54 4
a57 4
int get_args(int argc, char **argv);
extern void anim_dirn2mat(fastf_t *, const fastf_t *, const fastf_t *);
extern int anim_mat2ypr(fastf_t *, fastf_t *);
extern int anim_mat2quat(fastf_t *, const fastf_t *);
d60 3
a62 1
main(int argc, char **argv)
d133 3
a135 1
int get_args(int argc, char **argv)
@


11.9
log
@lint
@
text
@d54 4
a57 4
int get_args();
extern void anim_dirn2mat();
extern int anim_mat2ypr();
extern int anim_mat2quat();
d60 1
a60 3
main(argc,argv)
int argc;
char **argv;
d131 1
a131 3
int get_args(argc,argv)
int argc;
char **argv;
@


11.8
log
@Eliminated an unused variable
@
text
@d32 1
d54 6
d64 1
a64 1
	fastf_t time, vsize;
d128 1
@


11.7
log
@Made dependence on bu_getopt() explicit.
@
text
@d58 1
a58 1
	vect_t eye,look,dir,prev_dir, angles, norm, temp;
a70 1
		VMOVE(prev_dir,dir);
@


11.6
log
@output formatting
@
text
@d46 2
a47 2
extern int optind;
extern char *optarg;
d131 1
a131 1
	while ( (c=getopt(argc,argv,OPT_STR)) != EOF) {
d134 1
a134 1
			sscanf(optarg,"%d",&frame);
@


11.5
log
@added -v option to show viewsize
@
text
@d91 1
a91 1
				printf("viewsize %f;\n",vsize);
@


11.4
log
@added quat option, made more robust with anim_dirn2mat
@
text
@d45 1
d51 1
d57 2
a58 2
	fastf_t time;
	vect_t eye,look,dir,prev_dir, angles, norm;
d77 6
d90 7
a96 5
	                printf("eye_pt %f %f %f;\n",eye[0],eye[1],eye[2]);
			printf("viewrot %f %f %f 0\n", -mat[1], -mat[5], -mat[9]);
	                printf("%f %f %f 0\n", mat[2], mat[6], mat[10]);
	                printf("%f %f %f 0\n", -mat[0], -mat[4], -mat[8]);
	                printf("0 0 0 1;\n");
d104 5
a108 2
			printf("%g\t%g\t%g\t%g\t",time,eye[0],eye[1],eye[2]);
			printf("%g\t%g\t%g\n",angles[0],angles[1],angles[2]);
d112 5
a116 2
			printf("%g\t%g\t%g\t%g\t",time,eye[0],eye[1],eye[2]);
			printf("%g\t%g\t%g\t%g\n",quat[0],quat[1],quat[2],quat[3]);
d124 1
a124 1
#define OPT_STR "f:yq"
d141 3
@


11.3
log
@-y output fixed to degrees rather than radians
@
text
@d40 5
d49 1
a49 1
int print_ypr = 0;
d56 2
a57 1
	vect_t eye,look,dir,prev_dir, angles;
d67 1
d76 4
a79 2
		anim_dir2mat(mat,dir,prev_dir);
		if (!print_ypr){
d88 2
a89 2
		}
		else {
d96 6
d104 1
d108 1
a108 1
#define OPT_STR "f:y"
d121 4
a124 1
			print_ypr=1;
@


11.2
log
@updated anim.c routine names
@
text
@d33 7
d82 3
@


11.1
log
@Release_4.4
@
text
@d62 1
a62 1
		dir2mat(mat,dir,prev_dir);
d74 1
a74 1
			mat2ypr(angles,mat);
@


1.4
log
@included conf.h
@
text
@@


1.3
log
@added "clean" command
@
text
@d26 1
@


1.2
log
@added choice of output with -y flag.
@
text
@d64 1
@


1.1
log
@Initial revision
@
text
@d36 1
d43 1
a43 1
	vect_t eye,look,dir,prev_dir;
d56 2
a57 2
		if (val == 7){
			VSUBUNIT(dir,look,eye);
d59 11
a69 2
		else{
			VMOVE(dir,prev_dir);
d71 6
a76 8
		dir2mat(mat,dir,prev_dir);
		printf("start %d;\n",frame++);
                printf("eye_pt %f %f %f;\n",eye[0],eye[1],eye[2]);
		printf("viewrot %f %f %f 0\n", -mat[1], -mat[5], -mat[9]);
                printf("%f %f %f 0\n", mat[2], mat[6], mat[10]);
                printf("%f %f %f 0\n", -mat[0], -mat[4], -mat[8]);
                printf("0 0 0 1;\n");
		printf("end;\n");
d80 2
d87 1
a87 1
	while ( (c=getopt(argc,argv,"f:")) != EOF) {
d91 3
@
