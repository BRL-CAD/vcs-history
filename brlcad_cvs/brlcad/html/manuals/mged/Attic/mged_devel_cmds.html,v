head	1.12;
access;
symbols
	rel-5-4:1.10
	offsite-5-3-pre:1.10
	rel-5-3:1.10
	rel-5-2:1.10
	rel-5-1-branch:1.10.0.2
	rel-5-1:1.10
	rel-5-0:1.10
	rel-5-0-beta:1.9;
locks; strict;
comment	@# @;


1.12
date	2002.03.20.00.37.23;	author morrison;	state dead;
branches;
next	1.11;

1.11
date	2001.09.17.19.51.52;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	99.08.27.20.13.54;	author pjt;	state Exp;
branches;
next	1.9;

1.9
date	99.03.12.19.56.28;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	99.02.24.15.31.59;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	99.02.18.17.21.45;	author pjt;	state Exp;
branches;
next	1.6;

1.6
date	99.02.17.20.00.15;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	99.02.17.16.46.23;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	99.01.29.13.57.09;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	99.01.27.21.46.23;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	99.01.26.22.32.06;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	99.01.25.18.25.14;	author bparker;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Updated the Mged Command listing (html) to match the master list held in the (currently) MGED Users Guide (see pdf in doc/).  Since the two html files (mged_cmds.html & mged_devel_cmds.html) are no longer in sync, they are removed for the time being (so someone does not accidentally editthem (you know who you are\!)) until a more proper system is in place.  hopefully a docbook/xml-based solution..
@
text
@<DL>
<DT><a NAME="aip"><B>aip</B> [<I>f|b</I>]</DT>

<DD> The ``aip'' command advances the <a href="mged_cmds.html#ill">illumination</a> pointer when
<I>mged</I> is in the <a href="mged_cmds.html#ill">solid illuminate</a> state or the
<a href="mged_cmds.html#ill">object illuminate</a> state.
In either of the <I>illuminate</I> states,
a single primitive solid is highlighted at one time, and the path to that solid is displayed.
Moving the mouse vertically in the <I>mged</I> display causes different
solids to be highlighted and their paths to be displayed.
The <I>aip</I> command causes the next solid in
the list to be highlighted (if used with no arguments or the <I>f</I> argument), or
it causes the previous solid in the list to be highlighted (if used with the <I>b</I>
argument). Once the desired solid is highlighted, it is selected by clicking the middle
mouse button or by using the <a href="mged_cmds.html#M">M</a> command.
If <I>mged</I> is in the <a href="mged_cmds.html#ill">object path</a> state, the place
along the path where the edit is to take place will advance.
Once the desired path position is displayed, it is selected by
clicking the middle mouse button or by using the
<a href="mged_cmds.html#M">M</a> command.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b><a href="mged_cmds.html#press">press</a> sill</b><br> -- enter solid illuminate mode
	    <br>mged> <b>aip</b><br> -- hightlight the next solid
	    <br>mged> <b>aip b</b><br> -- highlight the previous solid
	    <br>mged> <b><a href="mged_cmds.html#M">M</a> 1 0 0</b><br> -- select the highlighted solid
       </DD>
     </DL>
</DD>
<HR>

<DT><a NAME="cmd_win"><B>cmd_win</B> <I>subcommand</I></DT>
<DD>This command is used to maintain internal command window structures.
<I>Cmd_win</I> accepts the following subcommands:
<br><br>
	<DL>
	<DT><B>open</B> <I>id</I></DT>
	<DD>This subcommand is used to create the internal data structures
		for a new command window. If <I>id</I> is already in use,
		nothing is changed.
	</DD>

	<DT><B>close</B> <I>id</I></DT>
	<DD>This subcommand releases <I>id</I>'s internal data structures. If the referenced
	command window is <a href="#tie">tied</a> to a display
	manager, then that association is also removed.
	</DD>

	<DT><B>set</B> <I>id</I></DT>
	<DD>This subcommand sets the current command window to <I>id</I>. If this
	     command window is <a href="#tie">tied</a> to a display manager, that display
	     manager becomes the current display manager.
	</DD>

	<DT><B>get</B></DT>
	<DD>This subcommand returns the id of the current command window.
	</DD>
	</DL>
<br>
	<DL>
		<DT><big>Examples:</big></DT>
		<DD>
		mged> <b>cmd_win open my_id</b><br>
		-- create a command window named <I>my_id</I><br>
		mged> <b>cmd_win close my_id</b><br>
		-- closes the command window <I>my_id</I><br>
		mged> <b>cmd_win set my_id</b><br>
		-- <I>my_id</I> becomes the current command window<br>
		mged> <b>cmd_win get</b><br>
		-- gets the current command window
		</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="collaborate"><B>collaborate</B> <I>subcommand</I></DT>

<DD> This command is used to maintain the ``collaborative session''. The
``collaborative session'' is a list whose members share a view and view ring among
the upper right display manager panes. <I>Collaborate</I> accepts the following
subcommands:
<br><br>
	<DL>
	<DT><B>join</B> <I>id</I></DT>
	<DD> This causes the GUI associated with <I>id</I> to join
	the collaborative session.
	</DD>

	<DT><B>quit</B> <I>id</I></DT>
	<DD> This causes the GUI associated with <I>id</I> to quit
	the collaborative session.
	</DD>

	<DT><B>show</B></DT>
	<DD> This returns the list of participants (ids) in the
	collaborative session.
	</DD>
	</DL>
<br>
	<DL>
		<DT><big>Examples:</big></DT>
		<DD>
		mged> <b>collaborate join bill</b><br>
		-- bill is added to the collaborative session<br>
		mged> <b>collaborate quit bill</b><br>
		-- bill is removed from the collaborative session<br>
		mged> <b>collaborate show</b><br>
		-- show list of collaborative participants<br>
		</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="get_comb"><B>get_comb</B> <I>comb_name</I></DT>

<DD> The ``get_comb'' command returns a Tcl list of information about
     <I>comb_name</I>. If <I>comb_name</I> is a region,
     the following information is returned:
     <center>
     <br>
     <I>NAME REGION REGION_ID AIRCODE GIFT_MATERIAL
     <br>LOS COLOR SHADER INHERIT BOOLEAN_FORMULA</I>
     </center>
     <br>Otherwise, the following shorter list is returned: 
     <center>
     <br>
     <I>NAME REGION COLOR SHADER INHERIT BOOLEAN_FORMULA</I>
     </center>
     
     <DL>
       <DT><big>Examples:</big></DT>
       <DD>
	mged> <b>get_comb some_region</b><br> 
	some_region Yes 1000 0 1 100 {0 220 220} plastic No { u box - ball }<br>
	mged> <b>get_comb some_non_region</b><br>
	some_non_region No {0 220 220} plastic No { u box2 - ball2 }<br>
       </DD>
     </DL>
</DD>
<HR>

<DT><a NAME="get_dm_list"><B>get_dm_list</B></DT>

<DD> The ``get_dm_list'' command returns a list of all open display managers.
The members of this list are the actual Tcl/Tk window names of the open display managers.
</DD>
<HR>

<DT><a NAME="get_edit_solid"><B>get_edit_solid</B> [<I>-c</I>]</DT>

<DD>Returns a list of keyword/value pairs for the solid currently being edited.
The first two values are the name and type of the solid followed
by keyword/value pairs. The solid type determines the keyword/value
pairs that follow. The <I>-c</I> option returns values that
have the matrices along the path applied. Note - these values are
retrieved from MGED's internal copy (i.e. es_int) of the solid being edited.

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>mged> <b>get_edit_solid</b><br>
	sph ell V {0 0 0} A {500 0 0} B {0 500 0} C {0 0 500}
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="get_more_default"><B>get_more_default</B></DT>

<DD>Returns the current default input value.
</DD>
<HR>

<DT><a NAME="grid2model_lu"><B>grid2model_lu</B> <I>gx gy</I></DT>

<DD>Given a point in grid coordinates (local units),
convert it to model coordinates (local units).
</DD>
<HR>

<DT><a NAME="grid2view_lu"><B>grid2view_lu</B> <I>gx gy</I></DT>

<DD>Given a point in grid coordinates (local units),
convert it to view coordinates (local units).
</DD>
<HR>

<DT><a NAME="gui_destroy"><B>gui_destroy</B> <I>id</I></DT>

<DD>Destroy the GUI (Graphical User Interface) represented by <I>id</I>.
Note that this GUI must have been created with the
<a href="mged_cmds.html#gui">gui</a> command.
</DD>
<HR>

<DT><a NAME="hist"><B>hist</B> <I>subcommand</I></DT>
<DD>This command is used to maintain command history. <I>Hist</I> accepts
the following subcommands:
<br><br>
	<DL>
	<DT><B>add</B> <I>command</I></DT>
	<DD> This adds <I>command</I> to the <a href="mged_cmds.html#history">history</a>
	list of commands executed during the current <I>mged</I> session.
	If <I>command</I> is more than one word, it must be surrounded
	by braces (i.e. {make box arb8}).
	</DD>

	<DT><B>next</B></DT>
	<DD> This returns the next command in the command history list.
	</DD>

	<DT><B>prev</B></DT>
	<DD> This returns the previous command in the command history list.
	</DD>
	</DL>
<br>
	<DL>
	<DT><big>Examples:</big></DT>
		<DD>
		mged> <b>hist add {ae 35 25}</b><br>
		-- add the command ''ae 35 25'' to the history list<br>
		mged> <b>ae 0 90</b><br>
		mged> <b>hist prev</b><br>
		-- return the previous command (i.e. <b>ae 0 90</b>).
		</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="make_name"><B>make_name</B> <I>template</I></DT>
<DT><B>make_name</B> <I>-s [num]</I></DT>

<DD>This command generates an object name that does not occur in the database.
The name, which is generated in the format specified by <I>template</I>,
contains an integer count.
By default, this count appears at the end of the generated name,
but if <I>template</I> contains the '@@' character,
then the count appears at that position in the name.
	<DL>
	<DT><big>Examples:</big></DT>
	<DD>
	mged> <b>make_name wheel</b><br>
	-- returns, say ``wheel5''<br>
	mged> <b>make_name tree@@trunk</b><br>
	-- returns ``tree6trunk''
	</DD>
	</DL>
The two-character string '@@@@' is interpreted as the literal '@@',
and thus is ignored for the purposes of positioning the name count.
<br><br>
The integer counter starts at 0 and, by default, it is incremented
each time <I>make_name</I> is executed.
The <I>-s</I> option resets this counter.
If the argument <I>num</I> is specified,
the counter is set to this value.
Otherwise it is set to 0.
</DD>
<HR>

<DT><a NAME="mged_update"><B>mged_update</B> <I>non_blocking</I></DT>

<DD>This command is used to handle outstanding events and to
refresh the <I>mged</I> display(s). This may be useful in certain Tcl scripts
to maintain interactivity while waiting for user input. Note that if
<I>non_blocking</I> is negative, outstanding events will not be processed.
That is, only the <I>mged</I> display(s) will be refreshed.

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>
	mged> <b>mged_update 0</b><br>
	-- update the <I>mged</I> display, blocking
	(i.e. handle all outstanding events, if none, wait for one)<br>
	mged> <b>mged_update 1</b><br>
	-- update the <I>mged</I> display, non-blocking
	(i.e. handle all outstanding events, if none, return immediately)<br>
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="mmenu_get"><B>mmenu_get</B> [<I>i</I>]</DT>

<DD>This command is used to get MGED's internal menus.
If <I>i</I> is not specified, return all three internal menus.
Otherwise, return the <I>i'th</I> menu. Note - valid values
for <I>i</I> are 0, 1 or 2.

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>
	mged> <b>mmenu_get</b><br>
	-- return all internal menus<br>
	mged> <b>mmenu_get 2</b><br>
	-- return the 2nd internal menu
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="mmenu_set"><B>mmenu_set</B> <I>id i</I></DT>

<DD>This Tcl proc is used to set/install MGED's <I>i</I>'th internal
menu in the Tcl/Tk button menu owned by <I>id</I>.

	<DL>
	<DD>
	mged> <b>mmenu_set bill 0</b><br>
	-- install MGED's 0'th internal menu into <I>id</I>'s button menu.
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="model2grid_lu"><B>model2grid_lu</B> <I>mx my mz</I></DT>

<DD>Convert a point in model coords (local units) to a point in
grid coords (local units).
</DD>
<HR>

<DT><a NAME="model2view"><B>model2view</B> <I>x y z</I></DT>

<DD>The ``model2view'' command converts the supplied point (in model coordinates)
to view coordinates. View coordinates are the coordinates in the viewing cube
with values between -1.0 and +1.0 being inside the viewing cube.

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>
	mged> <b>model2view 10 20 30</b><br>
	-- display the view coordinates that correspond to the point (10 20 30)
	in model space.
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="model2view_lu"><B>model2view_lu</B> <I>mx my mz</I></DT>

<DD>Convert a point in model coordinates (local units) to a point
in view coordinates (local units).
</DD>
<HR>

<DT><a NAME="output_hook"><B>output_hook</B> [<I>hook_cmd</I>]</DT>

<DD>Set up to have output from bu_log sent to <I>hook_cmd</I>.
If <I>hook_cmd</I> is not specified, the output hook is deleted.
</DD>
<HR>

<DT><a NAME="put_comb"><B>put_comb</B> <I>comb_name is_Region</I> [<I>id air gift los</I>] color shader inherit boolean_expr</I></DT>

<DD>The ``put_comb'' command defines the combination <I>comb_name</I>.
     If <I>is_Region</I> is <I>Yes</I>, then
     <I>id, air, gift</I> and <I>los</I> must be specified. If <I>is_Region</I>
     is <I>No</I>, then <I>id, air, gift</I> and <I>los</I> must not be
     specified.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>put_comb not_region No \"0 220 220\" plastic No \"u box\\n- ball\"</b>
	    <br> -- defines a combination called <I>not_region</I>
	    <br>mged> <b>put_comb my_region Yes 1000 0 1 100 \"0 220 220\" plastic No \"u box\\n- ball\"</b>
	    <br> -- defines a region called <I>my_region</I>
       </DD>
     </DL>
</DD>
<HR>

<DT><a NAME="put_edit_solid"><B>put_edit_solid</B> <I>solid parameters</I></DT>

<DD>Put <I>solid parameters</I> into the in-memory (i.e. es_int)
solid currently being edited. The solid type determines the keyword/value
pairs expected.

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>
	mged> <b>get_edit_solid</b><br>
	sph ell V {0 0 0} A {500 0 0} B {0 500 0} C {0 0 500}<br>
	mged> <b>put_edit_solid ell V {100 0 0} A {500 0 0} B {0 500 0} C {0 0 500}</b><br>
	-- move center of ellipse to (100, 0, 0)<br>
	mged> <b>Z</b><br>
	mged> <b>make box arb8</b><br>
	mged> <b>sed box</b><br>
	mged> <b>get_edit_solid</b><br>
	box arb8 V1 {500 -500 -500} V2 {500 500 -500} V3 {500 500 500} V4 {500 -500 500} V5 {-500 -500 -500} V6 {-500 500 -500} V7 {-500 500 500} V8 {-500 -500 500}<br>
	mged> <b>put_edit_solid arb8 V1 {1000 -1000 -1000} V2 {1000 1000 -1000}
	V3 {1000 1000 1000} V4 {1000 -1000 1000} V5 {-1000 -1000 -1000}
	V6 {-1000 1000 -1000} V7 {-1000 1000 1000} V8 {-1000 -1000 1000}</b><br>
	-- make box twice as big
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="reset_edit_solid"><B>reset_edit_solid</B></DT>

<DD>Reset the parameters for the currently edited solid (i.e. es_int) to the database
values.
</DD>
<HR>

<DT><a NAME="rset"><B>rset</B> [<I>res_type</I> [<I>res</I> [<I>vals</I>]]]</DT>

<DD>Provides a mechanism to get/set resource values for the given resource types.
The supported resource types are:
ax (Axes), c (Color Schemes), g (Grid), r (Rubber Band), and var (MGED Variables).
Basically, <I>rset</I> always gets a value unless
enough information is given to set a value. 
For example, with no parameters, <I>rset</I> returns a list of all resource values for the
supported resource types.
If <I>rset</I> is executed with only the <I>res_type</I> given, then a list of all
resource values for the given <I>res_type</I> is returned.


	<DL>
        <DT><big>Examples:</big></DT>
        <DD>
	mged> <b>rset g</b><br>
	Grid<br>
	 draw=0<br>
	 snap=0<br>
	 anchor=0,0,0<br>
	 rh=1<br>
	 rv=1<br>
	 mrh=5<br>
	 mrv=5<br>
	mged> <b>rset g snap</b><br>
	-- get value for grid snapping<br>
	0<br>
	mged> <b>rset g snap 1</b><br>
	-- enable snapping<br>
	mged> <b>rset r</b><br>
	Rubber Band<br>
	 draw=0<br>
	 linewidth=0<br>
	 linestyle='s'<br>
	 pos=0,0<br>
	 dim=0,0<br>
	mged> <b>rset r draw</b><br>
	-- get value for "Rubber Band"'s draw variable<br>
	0<br>
	mged> <b>rset r draw 1</b><br>
	-- draw rubber band
	mged> <b>rset ax</b><br>
	Axes<br>
	 model_draw=0<br>
	 model_size=500<br>
	 model_linewidth=1<br>
	 model_pos=0,0,0<br>
	 view_draw=0<br>
	 view_size=500<br>
	 view_linewidth=1<br>
	 view_pos=0,0<br>
	 edit_draw=0<br>
	 edit_size1=500<br>
	 edit_size2=500<br>
	 edit_linewidth1=1<br>
	 edit_linewidth2=1<br>
	mged> <b>rset ax model_size</b><br>
	-- get size of model axes<br>
	500<br>
	</DD>
        </DL>
</DD>
<HR>

<DT><a NAME="set_more_default"><B>set_more_default</B> <I>more_default</I></DT>

<DD>Set the current default input value.
</DD>
<HR>

<DT><a NAME="share"><B>share</B> <I>[-u] resource dm1 [dm2]</I></DT>

<DD>The ''share'' command provides a mechanism to (un)share resources among display managers.
When a resource is shared between two or more display managers, any change to
that resource is seen only in the sharing display managers.
The supported resource types are:
ad (ADC), ax (Axes), c (Color Schemes), d (Display Lists), g (Grid),
m (Menu), r (Rubber Band), vi (View) and var (MGED Variables).

	<DL>
        <DT><big>Examples:</big></DT>
        <DD>
	mged> <b>share g .dm_ogl0 .dm_ogl1</b><br>
	-- .dm_ogl0 shares its grid resource with .dm_ogl1<br>
	mged> <b>share -u g .dm_ogl1</b><br>
	-- .dm_ogl1 acquires a private copy of the grid resource
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="solids_on_ray"><B>solids_on_ray</B> <I>h v</I></DT>

<DD>List all displayed solids along a ray.
</DD>
<HR>

<DT><a NAME="stuff_str"><B>stuff_str</B> <I>string</I></DT>

<DD>Sends a string to MGED's tty while leaving the current
command-line alone. This is used to relay the activity of
Tcl/Tk command windows to MGED's tty. If MGED is no longer
attached to a tty, nothing happens.
</DD>
<HR>

<DT><a NAME="svb"><B>svb</B></DT>
<DD>The ``svb'' command sets the view reference base variables.
     These variables
     are used internally by the <a href="mged_cmds.html#knob">knob</a> command to implement
     absolute rotation, translation, and scale.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>svb</b>
	    <br> -- set the view reference base variables with respect to the current view
       </DD>
     </DL>
</DD>
<HR>

<DT><a NAME="tie"><B>tie</B> [[<I>-u</I>] <I>command_window</I> [<I>display_window</I>]]</DT>

<DD> The ``tie'' command is used to create (or untie/destroy with the <b>-u</b> option)
     an association between
     a command window and a display window. When there exists such an
     association, all commands entered
     from the command window will be directed at the associated
     display window. The <I>command_window</I> can be specified with <I>mged</I>
     to refer to the tty MGED was started from, or an id associated with
     a Tcl/Tk interface window <a href="mged_cmds.html#gui"> created with <I>gui</I> </a>.
     The <I>display_window</I> is specified with its Tcl/Tk pathname.
     If no parameters are given, a listing of the current
     <I>command_window</I>/<I>display_window</I> pairs is returned.
     If only the <I>command_window</I> is given, the <I>display_window</I>
     associated with <I>command_window</I> is returned. If both parameters are given, the
     <I>command_window</I>/<I>display_window</I> association is created.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>tie my_id .my_display_window</b>
	    <br> -- Create the association between my_id and .my_display_window
	    <br>mged> <b>tie my_id</b>
	    <br>.my_display_window
	    <br> -- returns the display window associated with my_id
	    <br>mged> <b>tie</b>
	    <br>{my_id .my_window} {mged {}}
	    <br> -- list all of the command_window/display_window pairs
	    <br>
       </DD>
     </DL>
</DD>
<HR>
	
<DT><a NAME="view2grid_lu"><B>view2grid_lu</B> <I>vx vy vz</I></DT>

<DD>Given a point in view coordinates (local units),
convert it to grid coordinates (local units).
</DD>
<HR>

<DT><a NAME="view2model"><B>view2model</B> <I>x y z</I></DT>

<DD>The ``view2model'' command converts the specified point (<I>x y z</I>) in
view coordinates to model coordinates (mm). The part of view space displayed by <I>mged</I>
is the cube -1.0 <= x,y,z <= +1.0.
 

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>mged> <b>view2model 1 1 0</b><br>
		-- list the model coordinates of the upper right corner of the
		<I>mged</I> display (in a plane at the center of the viewing cube).
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="view2model_lu"><B>view2model_lu</B> <I>vx vy vz</I></DT>

<DD>Given a point in view coordinates (local units),
convert it to model coordinates (local units).
</DD>
<HR>

<DT><a NAME="view2model_vec"><B>view2model_vec</B> <I>vx vy vz</I></DT>

<DD>Given a vector in view coordinates, convert it to model coordinates.
</DD>
<HR>

<DT><a NAME="view_ring"><B>view_ring</B> <I>subcommand</I></DT>

<DD>This command manipulates the view ring for the current display manager.
The view ring is simply a list of views that is owned by a display manager.
Views can be added or removed from this list. The views on this list can
also be traversed or queried.
<I>View_ring</I> accepts the following subcommands.
<br><br>
	<DL>
	<DT><B>add</B></DT>
	<DD>This subcommand adds the current view to the view ring.
	</DD>
	
	<DT><B>next</B></DT>
	<DD>This subcommand makes the next view on the view ring the current view.
	</DD>

	<DT><B>prev</B></DT>
	<DD>This subcommand makes the previous view on the view ring the current view.
	</DD>

	<DT><B>toggle</B></DT>
	<DD>This subcommand toggles between the current view and the last view.
	</DD>
	
	<DT><B>delete</B> <I>vid</I></DT>
	<DD>This subcommand removes/deletes the view with a view id of <I>vid</I>
	from the view ring. Note - the last view cannot be removed (i.e. there is
	always one view on the view ring).
	</DD>
	
	<DT><B>goto</B> <I>vid</I></DT>
	<DD>This subcommand makes the view with a view id of <I>vid</I>
	the current view.
	</DD>
	
	<DT><B>get</B> [<I>-a</I>]</DT>
	<DD>This subcommand returns the id of the current view. If <I>-a</I> is specified,
	all view ids on the view ring are returned.
	</DD>
	</DL>
<br>
	<DL>
	<DT><big>Examples:</big></DT>
		<DD>
		mged> <b>view_ring add</b><br>
		-- add the current view to the view ring<br>
		mged> <b>view_ring goto 1</b><br>
		-- go to view 1<br>
		mged> <b>view_ring delete 1</b><br>
		-- delete view 1 from the view ring<br>
		</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="winset"><B>winset</B> [<I>pathName</I>]</DT>
<DD>The ``winset'' command sets the current display manager to <I>pathName</I>.
     If <I>pathName</I> is not given, the current display manager is returned.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>winset .my_window</b>
	    <br> -- .my_window is now the current display manager
	    <br>mged> <b>winset</b>
	    <br> -- returns the current display manager (i.e. .my_window)
       </DD>
     </DL>
</DD>
<HR>
</DL>
@


1.11
log
@*- remove documentation on viewget and viewset
@
text
@@


1.10
log
@Added -s option to make_name
@
text
@a653 55
<DT><a NAME="viewget"><B>viewget</B> <I>parameter</I></DT>

<DD>The ``viewget'' command displays various <I>mged</I> view parameters. The
possible parameters are:
<ul>
	<li>aet -- list the <a href="brlcad_glossary.html#AZIMUTH">azimuth</a>,
		<a href="brlcad_glossary.html#ELEVATION">elevation</a>,
		and <a href="brlcad_glossary.html#TWIST">twist</a> for the current
		viewing aspect.</li>
	<li>center -- list the model coordinates (mm) of the center of the viewing cube.</li>
	<li>size -- list the size (mm) of a side the current <I>mged</I> display.</li>
	<li>eye -- list the model coordinates (mm) of the current eye point.</li>
	<li>ypr -- list the yaw, pitch, and roll angles (degrees) of the current viewing aspect.</li>
	<li>quat -- list the quaternion for the current viewing aspect.</li>
</ul>
 

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>mged> <b>viewget center</b><br>
		-- list the model coordinates of the center of the
		<I>mged</I> viewing cube
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="viewset"><B>viewset</B> &lt;<I>parameter value</I>&gt</DT>

<DD>The ``viewset'' command sets various <I>mged</I> view parameters.
More than one parameter may be set with one command.
The possible parameters are:
<ul>
	<li>aet -- set the <a href="brlcad_glossary.html#AZIMUTH">azimuth</a>,
		<a href="brlcad_glossary.html#ELEVATION">elevation</a>,
		and <a href="brlcad_glossary.html#TWIST">twist</a> for the current
		viewing aspect.</li>
	<li>center -- set the model coordinates (mm) of the center of the viewing cube.</li>
	<li>size -- set the size (mm) of a side the current <I>mged</I> display.</li>
	<li>eye -- set the model coordinates (mm) of the current eye point.</li>
	<li>ypr -- set the yaw, pitch, and roll angles (degrees) of the current viewing aspect.</li>
	<li>quat -- set the quaternion for the current viewing aspect.</li>
</ul>
 

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>mged> <b>viewset center 1 2 3 size 100</b><br>
		-- set the model coordinates of the center of the
		<I>mged</I> viewing cube to the point (1 2 3) and set the size of the viewing cube to 100 mm
	</DD>
	</DL>
</DD>
<HR>

@


1.9
log
@*- mods to mged_update
@
text
@d231 1
d250 7
@


1.8
log
@*- more updates
@
text
@d256 3
a258 1
to maintain interactivity while waiting for user input.
@


1.7
log
@Added entry for make_name
@
text
@d35 4
a38 5
<I>Cmd_win</I> accepts several subcommands to accomplish
this task.

	<ul>
	<li><DT><B>open</B> <I>id</I></DT>
d44 1
a44 1
	<li><DT><B>close</B> <I>id</I></DT>
d50 1
a50 1
	<li><DT><B>set</B> <I>id</I></DT>
d56 1
a56 1
	<li><DT><B>get</B></DT>
d59 2
a60 2
	</ul>

d81 5
a85 5
the upper right display manager panes. <I>Collaborate</I> accepts several
subcommands to accomplish this task.

	<ul>
	<li><DT><B>join</B> <I>id</I></DT>
d90 1
a90 1
	<li><DT><B>quit</B> <I>id</I></DT>
d95 1
a95 1
	<li><DT><B>show</B></DT>
d99 2
a100 2
	</ul>

d198 4
a201 4
several subcommands.

	<ul>
	<li><DT><B>add</B> <I>command</I></DT>
d208 1
a208 1
	<li><DT><B>next</B></DT>
d212 1
a212 1
	<li><DT><B>prev</B></DT>
d215 2
a216 2
	</ul>

d594 4
a597 4
<I>View_ring</I> accepts several subcommands.

	<ul>
	<li><DT><B>add</B></DT>
d600 2
a601 1
	<li><DT><B>next</B></DT>
d604 2
a605 1
	<li><DT><B>prev</B></DT>
d608 2
a609 1
	<li><DT><B>toggle</B></DT>
d612 2
a613 1
	<li><DT><B>delete</B> <I>vid</I></DT>
d618 2
a619 1
	<li><DT><B>goto</B> <I>vid</I></DT>
d623 2
a624 1
	<li><DT><B>get</B> [<I>-a</I>]</DT>
d628 2
a629 2
	</ul>

@


1.6
log
@*- update cmd_win, collaborate, hist and view_ring
@
text
@d233 17
a249 1
<DD>Make an object name not occuring in the database.
@


1.5
log
@*- removed: jcs, pcs, qcs, pmp
*- updates for:
	cmd_win, get_comb, get_dm_list, hist, mged_update,
	mmenu_get, mmenu_set, put_edit_solid, rset, share,
	view_ring
*- added the following commands:
	collaborate
@
text
@d33 1
a33 1
<DT><a NAME="cmd_win"><B>cmd_win</B> <I>open</I> | <I>close</I> | <I>set</I> | <I>get</I></DT>
d78 1
a78 1
<DT><a NAME="collaborate"><B>collaborate</B> <I>join | quit | show</I></DT>
d197 1
a197 1
<DT><a NAME="hist"><B>hist</B> <I>command</I></DT>
d573 1
a573 1
<DT><a NAME="view_ring"><B>view_ring</B> <I>command</I></DT>
@


1.4
log
@*- more updates
@
text
@d6 6
a11 4
<a href="mged_cmds.html#ill">object illuminate</a> state. In either of the <I>illuminate</I>
states, a single primitive solid is highlighted at one time, and the path to that solid
is displayed. Moving the mouse vertically in the <I>mged</I> display causes different
solids to be highlighted and their paths to be displayed. The <I>aip</I> command causes the next solid in
d16 5
a20 6
     If <I>mged</I> is in the <a href="mged_cmds.html#ill">object path</a> state, the place
     along the path where the edit is to take place will advance.
     Once the desired path position is displayed, it is selected by
     clicking the middle mouse button or by using the
     <a href="mged_cmds.html#M">M</a> command.
     This command was designed to be used within a Tcl script.
d35 1
a35 1
<I>Cmd_win</I> accepts several different subcommands to accomplish
d43 1
a44 7
	     <DL>
	       <DT><big>Examples:</big></DT>
	       <DD>mged> <b>cmd_open my_id</b>
		    <br> -- create a command window named <I>my_id</I>
	       </DD>
	     </DL>
	</DD>
d46 1
a46 2
	<DD>This subcommand releases <I>id</I>'s (i.e. <I>id</I> is a
	command window) internal data structures. If the referenced
d49 1
a50 7
	     <DL>
	       <DT><big>Examples:</big></DT>
	       <DD>mged> <b>cmd_close my_id</b>
		    <br> -- closes the command window <I>my_id</I>
	       </DD>
	     </DL>
	</DD>
d55 1
a56 7
	     <DL>
	       <DT><big>Examples:</big></DT>
	       <DD>mged> <b>cmd_set my_id</b>
		    <br> -- <I>my_id</I> becomes the current command window
	       </DD>
	     </DL>
	</DD>
d59 40
a98 7
	     <DL>
	       <DT><big>Examples:</big></DT>
	       <DD>mged> <b>cmd_get</b>
		<br>me
		<br> -- the current command window is <I>me</I>.
	       </DD>
	     </DL>
d101 12
d134 5
a138 8
       <DD>mged> <b>get_comb some_region</b>
	    <br> some_region Yes 1000 0 1 100 {0 220 220} plastic No { u box
	    <br> - ball
	    <br> }
	    <br>mged> <b>get_comb some_non_region</b>
	    <br>some_non_region No {0 220 220} plastic No { u box2
	    <br> - ball2
	    <br> }
d146 2
a147 1
<DD> The ``get_dm_list'' command returns a list of all display managers.
d199 1
a199 1
several different subcommands to accomplish this task.
d203 1
a203 1
	<DD> This subcommand adds <I>command</I> to the <a href="mged_cmds.html#history">history</a>
d205 3
a207 1
	If <I>command</I> is more than one word, it must be surrounded by ``{'' and ``}''.
a208 7
		<DL>
		<DT><big>Examples:</big></DT>
		<DD>mged> <b>hist add {ae 35 25}</b><br>
		<br>-- add the command ``ae 35 25'' to the history list
		</DD>
		</DL>
	</DD>
d210 1
a210 1
	<DD> This subcommand returns the next command in the command history list.
d212 1
d214 1
a214 9
	<DD> This subcommand returns the previous command in the command history list.

		<DL>
		<DT><big>Examples:</big></DT>
		<DD>mged> <b>ae 35 25</b><br>
		<DD>mged> <b>hist prev</b><br>
		-- return the previous command (i.e. <b>ae 35 25</b>).
		</DD>
		</DL>
a216 2
</DD>
<HR>
d218 10
a227 12
<DT><a NAME="jcs"><B>jcs</B> <I>id</I></DT>

<DD> The ``jcs'' command is a tcl script that takes care of setting up the
     Tcl/Tk interface windows associated with <I>id</I> (i.e. windows created
     with <a href="mged_cmds.html#gui">gui</a>) to join the collaborative session.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>jcs its_me</b>
	    <br> -- its_me joined the collaborative session
       </DD>
     </DL>
d239 1
a239 1
<DD>The ``mged_update'' command is used to handle outstanding events and to
d245 7
a251 6
	<DD>mged> <b>mged_update 0</b><br>
		-- update the <I>mged</I> display, blocking
	(i.e. handle all outstanding events, if none, wait for one)
	<DD>mged> <b>mged_update 1</b><br>
		-- update the <I>mged</I> display, non-blocking
	(i.e. handle all outstanding events, if none, return immediately )
d259 5
a263 2
<DD>If <I>i</I> is not specified, then return all three
of MGED's internal menus. Otherwise return the <I>i'th</I> menu.
d266 5
a270 4
	<DD>mged> <b>mmenu_get</b><br>
		-- return all internal menus
	<DD>mged> <b>mmenu_get 2</b><br>
		-- return the 2nd internal menu
d276 1
a276 1
<DT><a NAME="mmenu_set"><B>mmenu_set</B> <I>w id i menu</I></DT>
d278 9
a286 1
<DD>This Tcl proc is used to set/install menu "i". 
d305 4
a308 3
	<DD>mged> <b>model2view 10 20 30</b><br>
		-- display the view coordinates that correspond to the point (10 20 30)
		in model space.
a327 32
<DT><a NAME="pcs"><B>pcs</B></DT>

<DD>The ``pcs'' command prints a list of the mged players (i.e. the id's
     associated with the Tcl/Tk interface windows created with
     <a href="mged_cmds.html#gui">gui</a>)
     taking part in the collaborative session.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>pcs
	    <br>lisa joe mike sue</b>
	    <br> -- shows that lisa, joe, mike, and sue are part of the collaborative session
       </DD>
     </DL>
</DD>
<HR>

<DT><a NAME="pmp"><B>pmp</B></DT>
<DD>This command prints a list of the mged players (i.e. the id's
     associated with the Tcl/Tk interface windows created with
     <a href="mged_cmds.html#gui">gui</a>).

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>pmp
	    <br>lisa joe mike sue larry moe curly</b>
	    <br> -- shows the current mged players
       </DD>
     </DL>
</DD>
<HR>
     
d334 1
a334 1
     specified. This command was designed to be used from within a script.
d350 2
a351 3
solid currently being edited.
</DD>
<HR>
d353 18
a370 9
<DT><a NAME="qcs"><B>qcs</B> <I>id</I></DT>

<DD>The ``qcs'' command is used to quit the collaborative session.
     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>qcs my_id</b>
	    <br> -- <I>my_id</I> is removed from the collaborative session.
       </DD>
     </DL>
d376 2
a377 1
<DD>Reset the parameters for the currently edited solid (i.e. es_int).
d383 60
a442 1
<DD>Provides a mechanism to get/set resource values.
d452 1
a452 1
<DT><a NAME="share"><B>share</B> <I>resource dm1 dm2</I></DT>
d454 16
a469 2
<DD>Set things up so that <I>dm1</I> (display manager 1) will share
its <I>resource</I> with <I>dm2</I>.
d482 3
a484 1
command-line alone.
d491 1
a491 1
     are used internally by the <a href="mged_cmds.html#knob">knob</a> command to calculate
d509 1
a509 1
     from the command window will be directed at the
d573 35
a607 1
<DT><a NAME="view_ring"><B>view_ring</B> <I>cmd</I> [<I>i</I>]</DT>
d609 11
a619 1
<DD>Manipulates the view_ring for the current display manager.
@


1.3
log
@*- more updates
@
text
@d1 1
a1 10
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<TITLE>MGED Developer Commands</Title>
</HEAD>

<BODY BGCOLOR="#E0D8c8" TEXT="#000000">
<CENTER><H1>MGED Developer Commands</H1></CENTER>

d337 1
a337 1
<DT><a NAME="put_comb"><B>put_comb</B> <I>comb_name is_Region</I> [<I>id air gift los</I>] color shader inherit boolean_expr</I>
d461 1
a461 1
<DT><a NAME="view2grid_lu"><B>view2grid_lu <I>vx vy vz</I></B></DT>
d559 1
a559 1
<DT><a NAME="winset"><B>winset</B> [<I>pathName</I>]
d573 1
a573 3

</BODY>
</HTML>
@


1.2
log
@*- replace cmd_init, cmd_close, cmd_get and cmd_set
	with cmd_win
*- mods to the "tie" command
@
text
@d42 2
a43 2
<DD>This command is used to create, destroy and/or manipulate internal command
window structures. <I>Cmd_win</I> accepts four different subcommands to accomplish
d181 3
a183 1
<DT><a NAME="hist_add"><B>hist_add</B> [<I>command</I>]</DT>
d185 26
a210 8
<DD> The ``hist_add'' command adds <I>command</I> to the <I>history</I>
list of commands executed during the current <I>mged</I> session without actually executing it.
If <I>command</I> is more than one word, it must be surrounded by ``{'' and ``}''.

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>mged> <b>hist_add {ae 35 25}</b><br>
		-- add the command ``ae 35 25'' to the history list without actually executing it.
d212 1
a212 29
	</DL>
</DD>
<HR>

<DT><a NAME="hist_next"><B>hist_next</B></DT>

<DD> The ``hist_next'' command returns the next command in the command history list.
This command is used in the implementation of the command line editing available in <I>mged</I>.

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>mged> <b>hist_next</b><br>
		-- return the next command in the command history list.
	</DD>
	</DL>
</DD>
<HR>

<DT><a NAME="hist_prev"><B>hist_prev</B></DT>

<DD> The ``hist_prev'' command returns the previous command in the command history list.
This command is used in the implimentation of the command line editing available in <I>mged</I>.

	<DL>
	<DT><big>Examples:</big></DT>
	<DD>mged> <b>hist_prev</b><br>
		-- return the previous command in the command history list.
	</DD>
	</DL>
d237 1
a237 1
<DT><a NAME="mged_update"><B>mged_update</B></DT>
d239 3
a241 3
<DD>The ``mged_update'' command refreshes the <I>mged</I> display. This is used
internally in <I>mged</I>. It may be useful in Tcl scripts to get the <I>mged</I>
display to update.
d245 6
a250 2
	<DD>mged> <b>mged_update</b><br>
		-- update the <I>mged</I> display
@


1.1
log
@MGED commands intended for use by software developers.
@
text
@d41 54
a94 39
<DT><a NAME="cmd_close"><B>cmd_close</B> <I>id</I></DT>
<DD>This command releases <I>id</I>'s internal data structures.
     The parameter, <I>id</I>, refers to a command window.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>cmd_close my_id</b>
	    <br> -- closes the command window <I>my_id</I>
       </DD>
     </DL>
</DD>
<HR>

<DT><a NAME="cmd_get"><B>cmd_get</B></DT>
<DD>This command returns information about the current command
     window. More specifically, it returns the following:
     <UL>
       <LI>the display manager associated with the current command window
       <LI>the display manager that is sharing its view state with the above display manager
       <LI>the id of the command window
       <LI>a list of command window ids associated with the current command window
	    (Note: a command window is considered to be associated with another
	    command window if each is being tied to some
	    display manager and these display managers are sharing their
	    view state.)
     </UL>
     This command was designed to be used within a Tcl script.
     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>cmd_get</b>
	    <br><b>.my_window .their_window me {{them} {me} }</b>
	    <br> -- the current command window is <I>me</I> and is
	    <a href="#tie">tied</a> to <I>.my_window</I>.
	    The display window <I>.their_window</I> is sharing its
	    view state with <I>.my_window</I>.
	    Also, <I>.their_window</I> is sharing its view state with the
	    display manager window that is tied to <I>them</I>.
       </DD>
     </DL>
a97 28
<DT><a NAME="cmd_init"><B>cmd_init</B> <I>id</I></DT>
<DD>This command is used to create the internal data structures
     for a new command window.
     This command was designed to be used within a Tcl script.

     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>cmd_init my_id</b>
	    <br> -- create another command window named <I>my_id</I>
       </DD>
     </DL>
</DD>
<HR>

<DT><a NAME="cmd_set"><B>cmd_set</B> <I>id</I></DT>
<DD>This command sets the current command window to <I>id</I>. If this
     command window is associated with a display manager, that display
     manager becomes the current display manager. This command was
     designed to be used within a Tcl script.
     <DL>
       <DT><big>Examples:</big></DT>
       <DD>mged> <b>cmd_set my_id</b>
	    <br> -- <I>my_id</I> becomes the current command window
       </DD>
     </DL>
</DD>
<HR>
     
a112 1
     <br>This command was designed to be used within a Tcl/Tk interface script.
d131 1
a131 1
<DD> The ``get_dm_list'' returns a list of all display managers.
d176 2
d443 2
a444 1
<DD> The ``tie'' command is used to create (or destroy with the <b>-u</b> option) an association between
d453 3
a455 3
     <I>command_window</I>/<I>display_window</I> associations is returned.
     If only the <I>command_window</I> is given, the <I>command_window</I>/<I>display_window</I>
     association is returned. If both parameters are given, the
d460 8
a467 9
       <DD>mged> <b>tie my_id .my_window</b>
	    <br> -- Create the association between my_id and .my_window
	    <br>mged> <b>tie my_id
	    <br>my_id ---> .my_window</b>
	    <br> -- list the command_window/display_window association for my_id
	    <br>mged> <b>tie
	    <br>my_id ---> .my_window
	    <br>mged ---></b>
	    <br> -- list all of the command_window/display_window associations
@
