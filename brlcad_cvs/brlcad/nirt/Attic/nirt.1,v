head	11.12;
access;
symbols
	ansi-20040405-merged:11.11
	postmerge-20040405-ansi:11.11
	premerge-20040404-ansi:11.11
	postmerge-autoconf:11.11
	autoconf-freeze:11.11
	premerge-autoconf:11.11
	postmerge-20040315-windows:11.11
	premerge-20040315-windows:11.11
	windows-20040315-freeze:11.11
	autoconf-20031203:11.11
	autoconf-20031202:11.11
	autoconf-branch:11.11.0.12
	phong-branch:11.11.0.10
	photonmap-branch:11.11.0.8
	rel-6-1-DP:11.11
	windows-branch:11.11.0.6
	rel-6-0-2:11.11
	ansi-branch:11.11.0.4
	rel-6-0-1-branch:11.11.0.2
	hartley-6-0-post:11.11
	hartley-6-0-pre:11.11
	rel-6-0-1:11.11
	rel-6-0:11.10
	rel-5-4:11.8
	offsite-5-3-pre:11.8
	rel-5-3:11.8
	rel-5-2:11.8
	rel-5-1-branch:11.8.0.2
	rel-5-1:11.8
	rel-5-0:11.6
	rel-5-0-beta:11.6
	rel-4-5:11.6
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;


11.12
date	2004.05.21.17.47.08;	author morrison;	state dead;
branches;
next	11.11;

11.11
date	2002.05.08.13.55.38;	author jra;	state Exp;
branches;
next	11.10;

11.10
date	2002.02.20.21.06.21;	author butler;	state Exp;
branches;
next	11.9;

11.9
date	2002.02.19.22.05.15;	author butler;	state Exp;
branches;
next	11.8;

11.8
date	2000.05.22.15.59.05;	author pjt;	state Exp;
branches;
next	11.7;

11.7
date	99.11.08.20.25.23;	author pjt;	state Exp;
branches;
next	11.6;

11.6
date	97.12.11.19.08.54;	author pjt;	state Exp;
branches;
next	11.5;

11.5
date	97.12.08.19.30.38;	author pjt;	state Exp;
branches;
next	11.4;

11.4
date	97.12.05.20.55.12;	author pjt;	state Exp;
branches;
next	11.3;

11.3
date	97.12.04.18.54.52;	author pjt;	state Exp;
branches;
next	11.2;

11.2
date	97.02.07.15.04.50;	author pjt;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.22.17;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.12.21.10.29.10;	author pjt;	state Exp;
branches;
next	10.2;

10.2
date	94.04.05.11.02.14;	author pjt;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.53.31;	author mike;	state Rel4_0;
branches;
next	1.13;

1.13
date	91.08.30.09.12.39;	author pjt;	state Exp;
branches;
next	1.12;

1.12
date	91.08.29.16.26.43;	author pjt;	state Exp;
branches;
next	1.11;

1.11
date	91.07.25.12.39.45;	author pjt;	state Exp;
branches;
next	1.10;

1.10
date	91.07.24.11.20.01;	author pjt;	state Exp;
branches;
next	1.9;

1.9
date	91.07.18.14.46.53;	author pjt;	state Exp;
branches;
next	1.8;

1.8
date	91.06.25.12.35.02;	author pjt;	state Exp;
branches;
next	1.7;

1.7
date	91.06.18.16.29.28;	author pjt;	state Exp;
branches;
next	1.6;

1.6
date	91.03.15.08.37.16;	author pjt;	state Exp;
branches;
next	1.5;

1.5
date	91.02.26.09.24.58;	author pjt;	state Exp;
branches;
next	1.4;

1.4
date	91.02.25.16.19.22;	author pjt;	state Exp;
branches;
next	1.3;

1.3
date	91.02.25.15.38.55;	author pjt;	state Exp;
branches;
next	1.2;

1.2
date	91.02.21.14.28.48;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	91.02.19.16.21.28;	author pjt;	state Exp;
branches;
next	;


desc
@The man page for nirt
@


11.12
log
@moved to src/nirt/
@
text
@.\" Set the interparagraph spacing to 1 (default is 0.4)
.PD 1v
.\"
.\" The man page begins...
.\"
.TH NIRT 1
.SH NAME
nirt \- interactively ray trace a BRL-CAD geometric model
.SH SYNOPSIS
.BR "nirt  [" " options " "] " "model.g objects ..."
.SH DESCRIPTION
.I Nirt
operates on the specified
.I objects
in the database
.I model.g,
using
.IR librt (3)
to trace rays according to commands read from the standard input
and producing an ASCII report of the results.
By default, the user can interact with
.I nirt,
repeatedly specifying origination points and directions for rays
and the format and destination for the reports.
Locations may be input and output in either
model coordinates (\fIx\fR, \fIy\fR, \fIz\fR)
or view (a.k.a. grid-plane) coordinates (\fIh\fR, \fIv\fR, \fId\fR).
Similarly, direction may be input and output either as
vectors expressed in model coordinates or as
angles of azimuth and elevation.

.SS Options
.TP
.B -A attribute_name...
Adds the names to the list of attributes that will be reported
when the "attributes" partition information value is specified.
See also the 
.B attr
command below.
.TP
.B -M
causes
.I nirt
to read the eye point and
either the orientation quaternion (new format)
or the view-rotation matrix (old format) from the standard input,
and fire a single ray from the point in the specified direction.
This option allows
.I nirt
to be called directly from within
.I mged
using the
.BR nirt " and " rrt
commands.
.TP
.B -b
causes
.I nirt
to perform a
.B backout
command before the first
.B shoot
command (see the description of these two commands below).
This is probably only useful with the
.B -M
option.
.TP
.BI -B " rt_bot_minpieces"
causes
.I nirt
to adjust the setting of
.I rt_bot_minpieces
to the indicated value. A value of zero here indicates that the "pieces" methodology should not
be used. A value greater than zero indicates that all BOT primitives containing more than
.I rt_bot_minpieces
triangles should be broken down into a seperate piece for each triangle. This can result
in significant improvement in raytrace speed at the cost of more memory use.
.TP
.BI -e " script"
causes
.I nirt
to run the
.I script
string before reading the standard input.
Multiple commands in
.I script
may be separated with a semicolon ';'.
Scripts specified with either the
.BR -e " or " -f
options are executed in the order in which they are specified
on the command line.
.TP
.B -E
causes
.I nirt
to ignore any
.BR -e " or " -f
options specified previously on the command line.
.TP
.BI -f " sfile"
causes
.I nirt
to run the script file
.I sfile
before reading the standard input.
Scripts specified with either the
.BR -e " or " -f
options are executed in the order in which they are specified
on the command line.
.TP
.B -s
causes
.I nirt
to run in short (that is, non-verbose) mode.
In this mode,
which is useful in a pipeline,
.I nirt
does not print its initial lines of output or the prompt.
.TP
.B -v
causes
.I nirt
to run in verbose mode.
The default is verbose mode,
except if standard input has been redirected,
in which case the default is short mode.
.TP
.BI -u " n"
sets the \fIuseair\fR member
of the \fIrt_i\fR structure to \fIn\fR.
See the discussion of the
.I useair
command below.
.TP
.BI -O " n"
causes
.I nirt
to handle multiple regions' claims to segments of a ray
according to action
.IR n "."
The argument
.I n
may be any of the values 0, 1, 2, or 3,
or their corresponding key words
``resolve'', ``rebuild_fastgen'', ``rebuild_all'', or ``retain''.
See the discussion of the
.I overlap_claims
command below.
.TP
.BI -x " v"
sets the
.IR librt (3)
debug flags to the hexadecimal bit vector \fIv\fR.
See the discussion of the
.I libdebug
command below.
.TP
.BI -X " v"
sets
.IR nirt "'s"
own debug flags to the hexadecimal bit vector \fIv\fR.
See the discussion of the
.I debug
command below.

If there is a file called .nirtrc in the current directory,
otherwise in the user's home directory,
.I nirt
begins by reading from it.  This start-up file may contain any
.I nirt
commands
and is useful for loading predefined states
or initializing actions for output statements.
.SS Commands
.TP 12
.BI "xyz [" "x y z" "]"
Sets the ray origination point to
(\fIx\fR, \fIy\fR, \fIz\fR).
If this command is invoked with no arguments,
.I nirt
prints the current ray origination point in model coordinates.
Default is (0, 0, 0).
Changing (\fIx\fR, \fIy\fR, \fIz\fR) will change
(\fIh\fR, \fIv\fR, \fId\fR),
according to the current direction vector.
.TP 12
.BI "hv [" "h v" "[" d "]]"
Sets the ray origination point to
(\fIh\fR, \fIv\fR, \fId\fR).
If this command is invoked with only two arguments,
.I nirt
interprets them as \fIh\fR and \fIv\fR,
and \fId\fR retains its previous value.
If invoked with no argument, the command causes
.I nirt
to print the current ray origination point in view coordinates.
Default is (0, 0, 0).
Changing (\fIh\fR, \fIv\fR, \fId\fR) will change
(\fIx\fR, \fIy\fR, \fIz\fR),
according to the current direction vector.
.TP 12
.BI "dir [" "dx dy dz" "]"
Sets the direction vector to the unit vector in direction
(\fIdx\fR, \fIdy\fR, \fIdz\fR).
If this command is invoked with no arguments,
.I nirt
prints the current direction vector.
Default is (\-1, 0, 0).
Changing (\fIdx\fR, \fIdy\fR, \fIdz\fR) will change
the azimuth and elevation angles.
.TP 12
.BI "ae [" "az el" "]"
Sets the direction vector to point
.I from
azimuth = \fIaz\fR and elevation = \fIel\fR.
If this command is invoked with no arguments,
.I nirt
prints the current values of the azimuth and elevation angles.
Default is (0, 0).
Changing azimuth and elevation will change the direction vector.
.TP 12
.B s
Fires a ray from the current origination point in the current direction.
.TP 12
.B bot_minpieces [n]
Sets "rt_bot_minpieces" to the new value
.I n.
If
.I n
is not provided, the current value of "rt_bot_minpieces" is diplayed.
See the discussion of the
.I -B
option above for more details.
.TP 12
.B backout
Backs the ray origination point out of the geometry:
.IR h " and " v
retain their previous values and
.I d
is set to
.I Dmax,
the largest value of
.I d
anywhere in the geometry.
.TP 12
.BI "useair [" n "]"
Sets the \fIuseair\fR member
of the \fIrt_i\fR structure to the integer \fIn\fR.
If \fIn\fR is 0, then
.I nirt
ignores any air in the geometry.
If this command is invoked with no arguments,
.I nirt
prints the current value of
.I useair.
Default is 0.
.TP 12
.BI "overlap_claims [" n "]"
Specifies how to handle multiple regions' claims to segments of a ray.
If
.I n
is 0 or ``resolve'',
then all overlaps are resolved in favor of a single region
and any other claimants are ignored.
If
.I n
is 2 or ``rebuild_all'',
then all overlaps are rebuilt,
so any overlapping regions along the ray create individual
(geometrically intersecting) partitions.
If
.I n
is 3 or ``retain'',
then all overlaps are retained.
In this case, the resulting partitions are always geometrically disjoint,
each one is owned by a single region
according to the current overlap resolution strategy,
but every claimant is recorded.
If
.I n
is 1 or ``rebuild_fastgen'',
then
.I nirt
takes on
.I FASTGEN
behavior,
so overlaps of plate-mode primitives are rebuilt,
but other overlaps are retained.
This command is useful with the
.I claimant_count,
.I claimant_list,
and
.I claimant_listn
output items.
Default is ``resolve''.
.TP 12
.BI "attr {-f|-p|attr_names...}"
When used with one or more names, adds the names to the list of attributes
that will be printed when the "attributes" value is requested in the output
format string.
.sp 1
The
.B "-p"
option to the attr command causes it to print the list of attributes that will
be reported.  
.sp 1
The 
.B "-f"
option clears the attributes table.
.TP 12
.BI "units [" u "]"
Causes
.I nirt
to read and write all distances and locations in units of \fIu\fR.
Valid choices for \fIu\fR are ``mm,'' ``cm,'' ``m,'' ``in,'' and ``ft.''
If this command is invoked with no arguments,
.I nirt
prints the current choice of I/O units.
Default is the units of
.I model.g.
.TP 12
.BI "fmt [" "t format item item ..." "]"
Sets the action for output statements of type \fIt\fR.
If this command is invoked with only one argument,
a valid statement type,
.I nirt
prints the current format and items for the specified type.
See the discussion of output statements below.
.TP 12
.BI "dest [" d "]"
Sets the destination for subsequent output actions to \fId\fR.
If the first character of \fId\fR is `|',
then
\fId\fR is interpreted as a pipeline to which to write its output.
Otherwise if \fId\fR is the string ``default,''
.I nirt
sets the destination to the standard output.
Otherwise \fId\fR is interpreted as a file.
In any event, \fId\fR is not closed until the user quits
.I nirt
or resets the destination by another invocation of the
.I dest
command.
If this command is invoked with no arguments,
.I nirt
prints the current value of \fId\fR.
Default is ``default,'' that is, the standard output.
.TP 12
.BI "statefile [" f "]"
Sets the name of the state file to which to dump
and from which to load state information.
See the discussion of the
.IR dump " and " load
commands below.
If this command is invoked with no arguments,
.I nirt
prints the current name of the state file.
Default is ``nirt_state.''
.TP 12
.B dump
Writes state information to the state file.
The ray origination point and direction vector,
useair, units, destination, and all the output actions are dumped.
.TP 12
.B load
Reads state information from the state file.
The state file loaded may contain any
.I nirt
commands.
.TP 12
.BI print " item"
Prints the current value of the output item \fIitem\fR.
See the discussion of output statements below.
.TP 12
.BI libdebug " v"
Sets the
.IR librt (3)
debug flags
(the \fIdebug\fR member of the \fIrt_g\fR structure)
to the hexadecimal bit vector \fIv\fR.
These flags control the amount and kind of diagnostic print statements
.IR librt (3)
executes.
If \fIv\fR is 0,
then no diagnostics are produced.
If this command is invoked with no arguments,
.I nirt
prints the current value of \fIv\fR
and the names of any of its bits that are set.
Default is 0.
.TP 12
.BI debug " v"
Sets
.IR nirt "'s"
internal debug flags
to the hexadecimal bit vector \fIv\fR.
These flags control the amount and kind of diagnostic print statements
.I nirt
executes.
If \fIv\fR is 0,
then no diagnostics are produced.
If this command is invoked with no arguments,
.I nirt
prints the current value of \fIv\fR
and the names of any of its bits that are set.
Default is 0.
.TP 12
.BI "! [" command "]"
Executes the shell pipeline
.I command.
If this command is invoked with no arguments,
.I nirt
spins off a subshell, executing the program named in the environment variable
SHELL.
.TP 12
.B ?
Prints a help menu to the standard output.
.TP 12
.B q
Quits
.I nirt.
.SS Output Statements
.I Nirt
allows the user a high degree of control,
via the
.I fmt
command,
over what information gets printed out for each ray and in what format.
There are six types of output statement,
each of which is executed under appropriate circumstances.
The types and their use are:
.TP
.B r
Ray.
The first output statement executed
whenever the
.I s
command is invoked.
.TP
.B h
Head.
Executed immediately after the ray statement
if the ray hits anything.
.TP
.B p
Partition.
Executed once for each partition along the ray
if the ray hits anything.
.TP
.B f
Foot.
The last output statement executed
if the ray hits anything.
.TP
.B m
Miss.
Executed immediately after the ray statement
if the ray hits nothing.
.TP
.B o
Overlap.
Executed once for each overlap along the ray
if the ray hits anything.
.P
The action associated with each output statement type is essentially a
.IR printf (3)
statement,
with a format string and a list of output items.
The items may be chosen from a set of values that
.I nirt
updates according to user commands and location along the ray.
These values may be categorized as pertaining to the entire ray,
partitions along the ray,
or overlaps.
The values are explained in the following table.

.ce
Ray Information
.PD .6v
.TP 18
.B x_orig
\fIx\fR coordinate of ray origination point.
.TP 18
.B y_orig
\fIy\fR coordinate of ray origination point.
.TP 18
.B z_orig
\fIz\fR coordinate of ray origination point.
.TP 18
.B d_orig
\fId\fR coordinate of ray origination point.
.TP 18
.B h
\fIh\fR coordinate for the entire ray.
.TP 18
.B v
\fIv\fR coordinate for the entire ray.
.TP 18
.B x_dir
\fIx\fR component of direction vector.
.TP 18
.B y_dir
\fIy\fR component of direction vector.
.TP 18
.B z_dir
\fIz\fR component of direction vector.
.TP 18
.B a
azimuth of view (i.e., of ray direction).
.TP 18
.B e
elevation of view (i.e., of ray direction).

.ce
Partition Information
.TP 18
.B attributes
A string variable consisting of the names and values of the attributes
requested by the 
.B attr
command or the 
.B -A
command line option.
.TP 18
.B x_in
\fIx\fR coordinate of entry into current region.
.TP 18
.B y_in
\fIy\fR coordinate of entry into current region.
.TP 18
.B z_in
\fIz\fR coordinate of entry into current region.
.TP 18
.B d_in
\fId\fR coordinate of entry into current region.
.TP 18
.B x_out
\fIx\fR coordinate of exit from current region.
.TP 18
.B y_out
\fIy\fR coordinate of exit from current region.
.TP 18
.B z_out
\fIz\fR coordinate of exit from current region.
.TP 18
.B d_out
\fId\fR coordinate of exit from current region.
.TP 18
.B los
line-of-sight distance through current region.
.TP 18
.B scaled_los
scaled line of sight:
product of line-of-sight distance through current region
and region solidity (sometimes called ``percent LOS'').
.TP 18
.B path_name
full path name of current region.
.TP 18
.B reg_name
name of current region, as might be obtained by passing
.B path_name
to
.IR basename (1).
.TP 18
.B reg_id
region ID of current region.
.TP 18
.B claimant_count
number of regions claiming this partition
(that is, participating in a retained overlap).
.TP 18
.B claimant_list
space-separated list of names of regions claiming this partition
(that is, participating in a retained overlap).
.TP 18
.B claimant_listn
Same as
.I claimant_list,
except that it is newline-, rather than space-separated.
.TP 18
.B obliq_in
entry obliquity for current region.
.TP 18
.B obliq_out
exit obliquity for current region.
.TP 18
.B nm_x_in
\fIx\fR component of entry normal vector
.TP 18
.B nm_y_in
\fIy\fR component of entry normal vector
.TP 18
.B nm_z_in
\fIz\fR component of entry normal vector
.TP 18
.B nm_h_in
\fIh\fR component of entry normal vector
.TP 18
.B nm_v_in
\fIv\fR component of entry normal vector
.TP 18
.B nm_d_in
\fId\fR component of entry normal vector
.TP 18
.B nm_x_out
\fIx\fR component of exit normal vector
.TP 18
.B nm_y_out
\fIy\fR component of exit normal vector
.TP 18
.B nm_z_out
\fIz\fR component of exit normal vector
.TP 18
.B nm_h_out
\fIh\fR component of exit normal vector
.TP 18
.B nm_v_out
\fIv\fR component of exit normal vector
.TP 18
.B nm_d_out
\fId\fR component of exit normal vector
.TP 18
.B surf_num_in
entry-surface ID of entry solid.
.TP 18
.B surf_num_out
exit-surface ID of exit solid.

.ce
Overlap Information
.TP 18
.B ov_reg1_name
name of one of the overlapping regions.
.TP 18
.B ov_reg2_name
name of the other overlapping region.
.TP 18
.B ov_reg1_id
region ID of one of the overlapping regions.
.TP 18
.B ov_reg2_id
region ID of the other overlapping region.
.TP 18
.B ov_sol_in
name of one of the overlapping solids.
.TP 18
.B ov_sol_out
name of the other overlapping solid.
.TP 18
.B ov_los
line-of-sight distance through the overlap.
.TP 18
.B ov_x_in
\fIx\fR coordinate of entry into overlap.
.TP 18
.B ov_y_in
\fIy\fR coordinate of entry into overlap.
.TP 18
.B ov_z_in
\fIz\fR coordinate of entry into overlap.
.TP 18
.B ov_d_in
\fId\fR coordinate of entry into overlap.
.TP 18
.B ov_x_out
\fIx\fR coordinate of exit from overlap.
.TP 18
.B ov_y_out
\fIy\fR coordinate of exit from overlap.
.TP 18
.B ov_z_out
\fIz\fR coordinate of exit from overlap.
.TP 18
.B ov_d_out
\fId\fR coordinate of exit from overlap.
.PD 1v
.SH HINTS
Ray origination coordinates specified with the
.I hv
command are immediately converted for internal use
to model coordinates,
according to the current direction vector.
If you want to change the ray direction and origination point,
and you're using view coordinates,
you probably want to change the ray direction
.I before
you use the
.I hv
command.

The name ``nirt'' stands for ``Natalie's interactive ray tracer.''
.SH DEFINITIONS
The usage in
.I nirt
of the following terms corresponds to that found in
.IR mged (1)
and elsewhere throughout BRL CAD.
We provide the definitions here for reference.
.SS View Coordinates
We define the view coordinate system
(more precisely its basis vectors \fBm\fR, \fBn\fR, and \fBo\fR)
in terms of the basis vectors
\fBi\fR, \fBj\fR, and \fBk\fR
of the model coordinate system as follows:
.in +5m

\fBm\fR is the opposite of the direction vector and corresponds to \fId\fR,
.br
\fBn\fR = \fBk\fR \(mu \fBm\fR corresponds to \fIh\fR, and
.br
\fBo\fR = \fBm\fR \(mu \fBn\fR corresponds to \fIv\fR.

.in -5m
Thus if the direction vector is (\-1, 0, 0),
then
(\fId\fR, \fIh\fR, \fIv\fR) =
(\fIx\fR, \fIy\fR, \fIz\fR).
.SS Azimuth and Elevation
Azimuth is the angle measured around \fBk\fR (right-hand rule)
from the \fIxz\fR plane to \fBm\fR.
Elevation is the angle measured toward \fBk\fR
from the \fIxy\fR plane to \fBm\fR.
.SH FILES
 .nirtrc \h12m run-time configuration file
.SH SEE ALSO
mged(1), librt(3), printf(3)
.SH BUGS
The program sometimes complains about ``previously unreported overlaps.''
To the best of our knowledge, this complaint may be safely ignored.
We hope to fix this soon.
.SH AUTHORS
Natalie Eberius
.br
Paul Tanenbaum
@


11.11
log
@Added support for rt_bot_minpieces
@
text
@@


11.10
log
@A nicer implementation that uses the string format for the "attributes" value
@
text
@d68 11
d224 10
@


11.9
log
@updated man page to reflect attribute usage
@
text
@d34 4
a37 4
.B -A attribute_name
Adds the named attributes to the list of attributes that will be reported
with the %A action.
See the 
d277 4
a280 3
When used with one or more attribute names, adds them to the list
of attributes that will be printed for each invokation of the %A action
directive.
d284 3
a286 1
be reported.  The 
d289 1
d497 6
a502 4
print the attributes specified in the attribute list.  Note that this
uses the special action directive 
.B %A 
in the format string.  For example: '"The attr are: %A\n" attributes'
@


11.8
log
@Added support for overlap claimants
@
text
@d34 7
d276 10
d491 6
@


11.7
log
@Added 'debug' command
@
text
@d117 15
d230 39
d518 13
@


11.6
log
@1. The -e and -f options now accumulate
2. Implemented the -E option
@
text
@d129 3
d287 16
@


11.5
log
@Added the -e option and abbreviated the synopsis,
pulling individual options out.
@
text
@d70 1
a70 1
This option overrides any
d72 2
a73 1
options earlier on the command line.
d75 7
d88 1
a88 1
This option overrides any
d90 2
a91 1
options earlier on the command line.
@


11.4
log
@1. Added -X option for nirt's own diagnostics
2. Added -f sfile option
@
text
@d8 1
a8 1
nirt \- interactively ray trace an MGED model
d10 1
a10 3
.BR "nirt  [ -M ] [-sv] [-b] [-f sfile] [ -u " n " ]
.br
.BR "      [ -x " v " ] [ -X " v " ] " "model.g objects ..."
d32 2
a33 1
The
d35 1
a35 1
option causes
d48 1
a48 1
The
d50 1
a50 1
option causes
d60 14
a73 1
If the
d75 1
a75 1
option is specified,
d77 1
a77 1
runs the script
d80 4
a83 1
Given the
d85 1
a85 1
option,
d87 1
a87 1
runs in short (that is, non-verbose) mode.
d92 1
a92 1
The
d94 1
a94 1
option, on the other hand, causes
d100 1
a100 1
The
d102 1
a102 1
option sets the \fIuseair\fR member
d107 1
a107 1
The
d109 1
a109 1
option sets the
d115 1
a115 1
The
d117 1
a117 1
option sets the
@


11.3
log
@Implemented -b option
@
text
@d10 3
a12 1
.BR "nirt  [ -M ] [-sv] [-b] [ -u " n " ] [ -x " v " ] " "model.g objects ..."
d61 7
d100 5
@


11.2
log
@Added output items for entry- and exit-surface numbers
for the entry and exit solids of each partition
@
text
@d10 1
a10 1
.BR "nirt  [ -M ] [-sv] [ -u " n " ] [ -x " v " ] " "model.g objects ..."
d47 12
@


11.1
log
@Release_4.4
@
text
@d437 6
@


10.3
log
@Added output item for scaled LOS for each partition
@
text
@@


10.2
log
@Added documentation for -v option and described
when -v is default and when -s is
@
text
@d379 5
@


10.1
log
@Release_4.0
@
text
@d10 1
a10 1
.BR "nirt  [ -M ] [-s] [ -u " n " ] [ -x " v " ] " "model.g objects ..."
d52 12
a63 3
In this mode, it does not print its initial lines of output or the prompt.
Short-mode output, useful for piping to other programs,
is also produced whenever standard input has been redirected.
@


1.13
log
@The "nm" output items are now labeled as
components of normal vectors
@
text
@@


1.12
log
@Added output items for entry and exit normals
for each partition.
@
text
@d389 1
a389 1
\fIx\fR coordinate of entry normal
d392 1
a392 1
\fIy\fR coordinate of entry normal
d395 1
a395 1
\fIz\fR coordinate of entry normal
d398 1
a398 1
\fIh\fR coordinate of entry normal
d401 1
a401 1
\fIv\fR coordinate of entry normal
d404 1
a404 1
\fId\fR coordinate of entry normal
d407 1
a407 1
\fIx\fR coordinate of exit normal
d410 1
a410 1
\fIy\fR coordinate of exit normal
d413 1
a413 1
\fIz\fR coordinate of exit normal
d416 1
a416 1
\fIh\fR coordinate of exit normal
d419 1
a419 1
\fIv\fR coordinate of exit normal
d422 1
a422 1
\fId\fR coordinate of exit normal
@


1.11
log
@Fixed the entry for the quit command (said "quit", it's now
corrected to "q")
@
text
@d387 36
@


1.10
log
@Implemented short (non-verbose) mode
@
text
@d245 1
a245 1
.B quit
@


1.9
log
@Added the backout command
@
text
@d10 1
a10 1
.BR "nirt  [ -M ] [ -u " n " ] [ -x " v " ] " "model.g objects ..."
d47 8
@


1.8
log
@Updated description of -M option
@
text
@d105 1
a105 1
Default is (-1, 0, 0).
d122 11
d465 1
a465 1
Thus if the direction vector is (-1, 0, 0),
@


1.7
log
@Added -M option
@
text
@d36 4
a39 2
to read the eye point and the view-rotation matrix from the standard input,
and fire a single ray from the point in the view direction.
d45 2
a46 2
.B rrt
command.
@


1.6
log
@Added path_name output item
@
text
@d10 1
a10 1
.BR "nirt  [ -u " n " ] [ -x " v " ] " "model.g objects ..."
d21 1
a21 1
The user can interact with
d33 13
d173 1
a173 1
See the
@


1.5
log
@Added the libdebug command
@
text
@d336 3
d340 4
a343 1
name of current region.
@


1.4
log
@Added the -x option
@
text
@d10 1
a10 1
.BR "nirt  [ -u " n " ] [ -x " f " ] " "model.g objects ..."
d40 1
a40 1
.BI -x " f"
d43 4
a46 1
debug flags to the hexadecimal bit vector \fIf\fR.
a56 1
The commands and their meanings are given below.
d108 2
a109 5
Sets the
.I useair
member of the
.I rt_i
structure to the integer \fIn\fR.
d182 17
@


1.3
log
@First complete man page?
@
text
@d10 1
a10 1
.BR "nirt  [ -u " n " ] " "model.g objects ..."
d39 5
@


1.2
log
@Partial explanation of output statements
@
text
@a0 1
'\"	last edit:	91/02/15	P J Tanenbaum
d17 3
a19 1
tracing rays according to commands read from the standard input
d23 1
a23 1
repeatedly specifying origination points and directions from which to fire rays
d28 1
a28 1
Similarly, directions may be input and output either as
d31 17
d52 1
a52 1
Causes future rays to be fired from the point
d54 1
a54 1
Without arguments, this command causes
d56 1
a56 1
to print the current ray origination point in model coordinates.
d63 1
a63 1
Causes future rays to be fired from the point
d65 1
a65 1
If this command is given with only two arguments,
d69 1
a69 1
Without arguments, the command causes
d78 1
a78 1
Causes future rays to be fired in the direction aligned with
d80 1
a80 1
Without arguments, this command causes
d82 1
a82 1
to print the current (unit-length) direction vector.
d87 3
a89 2
.BI "ae [" " az el" "]"
Causes future rays to be fired from
d91 1
a91 1
Without arguments, this command causes
d93 1
a93 1
to print the current values of the azimuth and elevation angles.
d98 1
a98 3
Causes
.I nirt
to fire a ray from the current origination point in the current direction.
d105 1
a105 1
structure to \fIn\fR.
d109 1
a109 1
Without arguments, this command causes
d111 1
a111 1
to print the current value of
d120 1
a120 1
Without arguments, this command causes
d122 1
a122 1
to print the current choice of I/O units.
d128 1
a128 1
If this command is given with only one argument,
d148 1
a148 1
Without arguments, this command causes
d150 1
a150 1
to print the current value of \fId\fR.
d159 1
a159 1
Without arguments, this command causes
d161 1
a161 1
to print the current name of the state file.
d174 19
d209 1
a209 1
command is given.
d214 1
a214 2
if the ray hits any of the
.I objects.
d219 1
a219 2
if the ray hits any of the
.I objects.
d224 1
a224 2
if the ray hits any of the
.I objects.
d229 1
a229 2
if the ray does not hit any of the
.I objects.
d234 4
a237 5
if the ray hits any of the
.I objects.

Each of the output statement types is essentially a
.I printf(3)
d242 152
a393 5
updates according to user commands and location along a ray.
.SH DIAGNOSTICS
If
\fIname\fR.s
is longer than the fifteen-character limit imposed by
d395 18
a412 1
or the input stream does not conform to the expected format,
d414 9
a422 2
.IR showshot
complains and exits with status 1.
d424 6
a429 2
mged(1), nirt(1)
.SH AUTHOR
@


1.1
log
@Initial revision
@
text
@d111 4
d159 2
a160 3
allows the user a high degree of control of
what information gets printed out for each ray and in what format.
This control is exercised via the
d162 50
a211 1
command.
@
