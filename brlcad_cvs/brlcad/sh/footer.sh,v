head	14.27;
access;
symbols
	rel-7-10-4:14.27
	STABLE:14.27.0.2
	stable-branch:14.6
	rel-7-10-2:14.27
	rel-7-10-0:14.23
	rel-7-8-4:14.17
	rel-7-8-2:14.15
	rel-7-8-0:14.15
	trimnurbs-branch:14.14.0.2
	help:14.14
	temp_tag:14.11
	bobWinPort-20051223-freeze:14.9
	postmerge-20051223-bobWinPort:14.11
	premerge-20051223-bobWinPort:14.11
	rel-7-6-6:14.11
	rel-7-6-4:14.11
	rel-7-6-2:14.9
	rel-7-6-branch:14.9.0.6
	rel-7-6-0:14.9
	rel-7-4-2:14.9
	rel-7-4-branch:14.9.0.4
	bobWinPort:14.9.0.2
	rel-7-4-0:14.9
	rel-7-2-6:14.6
	rel-7-2-4:14.6
	rel-7-2-2:14.6
	rel-7-2-0:14.5
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2;
locks; strict;
comment	@# @;


14.27
date	2007.07.07.18.29.25;	author brlcad;	state Exp;
branches;
next	14.26;

14.26
date	2007.07.07.16.26.14;	author brlcad;	state Exp;
branches;
next	14.25;

14.25
date	2007.05.14.21.34.08;	author brlcad;	state Exp;
branches;
next	14.24;

14.24
date	2007.05.14.21.32.32;	author brlcad;	state Exp;
branches;
next	14.23;

14.23
date	2007.02.08.05.14.04;	author brlcad;	state Exp;
branches;
next	14.22;

14.22
date	2007.02.08.02.31.01;	author brlcad;	state Exp;
branches;
next	14.21;

14.21
date	2007.02.08.00.58.09;	author brlcad;	state Exp;
branches;
next	14.20;

14.20
date	2007.01.20.23.50.44;	author brlcad;	state Exp;
branches;
next	14.19;

14.19
date	2007.01.20.13.57.25;	author brlcad;	state Exp;
branches;
next	14.18;

14.18
date	2007.01.10.08.43.03;	author brlcad;	state Exp;
branches;
next	14.17;

14.17
date	2006.09.28.03.18.30;	author brlcad;	state Exp;
branches;
next	14.16;

14.16
date	2006.09.18.09.39.18;	author brlcad;	state Exp;
branches;
next	14.15;

14.15
date	2006.03.10.04.58.07;	author brlcad;	state Exp;
branches;
next	14.14;

14.14
date	2006.02.18.23.37.27;	author brlcad;	state Exp;
branches
	14.14.2.1;
next	14.13;

14.13
date	2006.01.18.06.46.11;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2006.01.04.22.04.56;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2005.10.23.04.44.27;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2005.10.22.17.36.02;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.06.25.15.53.21;	author brlcad;	state Exp;
branches
	14.9.6.1;
next	14.8;

14.8
date	2005.06.25.15.42.18;	author brlcad;	state Exp;
branches;
next	14.7;

14.7
date	2005.06.25.15.35.32;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.03.18.18.40.15;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.02.21.18.02.53;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.31.04.09.04;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.30.12;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.17.21.01.05;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	11.3;

11.3
date	2004.11.16.07.04.46;	author morrison;	state Exp;
branches;
next	11.2;

11.2
date	2004.11.16.07.03.43;	author morrison;	state Exp;
branches;
next	11.1;

11.1
date	2004.11.15.23.09.57;	author morrison;	state Exp;
branches;
next	;

14.9.6.1
date	2005.11.13.13.46.10;	author brlcad;	state Exp;
branches;
next	;

14.14.2.1
date	2006.03.13.18.44.57;	author jlowenz;	state Exp;
branches;
next	;


desc
@@


14.27
log
@change default to // comments for C++ files, fix a bug related to having that as a comment character block when updating files that already have a footer too (encountered processing bzflag files)
@
text
@#!/usr/bin/env bash
#                       F O O T E R . S H
# BRL-CAD
#
# Copyright (c) 2004-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. The name of the author may not be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
###
#
# This script ensures that a file has an emacs/vi variable footer with
# the requested indentation settings.
#
# The script assumes one file as the argument, so example use might be:
#   find . -type f -and \( -name \*.cxx -or -or -name \*.h \) -not -regex '.*src/other.*' -exec sh/footer.sh {} \;
#
# bash arrays are actually used for convenience, hence why bash and
# not sh.
#
# Author -
#   Christopher Sean Morrison
###

FILE="$1"

# where are the tap stops?
tab_width=8

# what level indentation?
indentation=4

# force locale setting to C so things like date output as expected
LC_ALL=C

##################
# validate input #
##################
if [ "x$FILE" = "x" ] ; then
    echo "ERROR: must give the name/path of a file to check/update"
    exit 1
elif [ ! -f "$FILE" ] ; then
    echo "ERROR: unable to find $FILE"
    exit 1
elif [ ! -r "$FILE" ] ; then
    echo "ERROR: unable to read $FILE"
    exit 2
elif [ ! -w "$FILE" ] ; then
    echo "ERROR: unable to write to $FILE"
    exit 2
fi

if [ "x$2" != "x" ] ; then
    echo "ERROR: script only supports single file arguments"
    exit 3
fi


########################
# figure out file type #
########################
# mode is the emacs major mode
# mode_vars are the indentation variables that need to be set
# wrap is whether or not in needs to be incased in /* */
# commentchar is the comment character to prefex each line
##
mode=""
mode_vars=""
wrap=0
commentchar=""

case $FILE in
    *.sh )
	echo "$FILE is a shell script"
	mode="sh"
	mode_vars="sh-indentation sh-basic-offset"
	wrap=0
	commentchar="#"
	;;
    *.c )
	echo "$FILE is a C source file"
	mode="C"
	mode_vars="c-basic-offset"
	wrap=1
	commentchar="*"
	;;
    *.h )
	echo "$FILE is a C header"
	mode="C"
	mode_vars="c-basic-offset"
	wrap=0
	commentchar="//"
	;;
    *.cc | *.cp | *.cxx | *.cpp | *.CPP | *.c++ | *.C )
	echo "$FILE is a C++ source file"
	mode="C++"
	mode_vars="c-basic-offset"
	wrap=0
	commentchar="//"
	;;
    *.hh | *.hp | *.hxx | *.hpp | *.HPP | *.h++ | *.H )
	echo "$FILE is a C++ header"
	mode="C++"
	mode_vars="c-basic-offset"
	wrap=0
	commentchar="//"
	;;
    *.m )
	echo "$FILE is an Objective C-source file"
	mode="objc"
	mode_vars="c-basic-offset"
	wrap=1
	commentchar="*"
	;;
    *.mm | *.M )
	echo "$FILE is an Objective-C++ source file"
	mode="objc"
	mode_vars="c-basic-offset"
	wrap=1
	commentchar="*"
	;;
    *.l )
	echo "$FILE is a Lex/Flex lexer source file"
	mode="C"
	mode_vars="c-basic-offset"
	wrap=1
	commentchar="*"
	;;
    *.y )
	echo "$FILE is a Yacc parser source file"
	mode="C"
	mode_vars="c-basic-offset"
	wrap=1
	commentchar="*"
	;;
    *.tcl )
	echo "$FILE is a Tcl source file"
	mode="Tcl"
	mode_vars="c-basic-offset tcl-indent-level"
	wrap=0
	commentchar="#"
	;;
    *.tk )
	echo "$FILE is a Tk source file"
	mode="Tcl"
	mode_vars="c-basic-offset tcl-indent-level"
	wrap=0
	commentchar="#"
	;;
    *.itcl )
	echo "$FILE is a IncrTcl source file"
	mode="Tcl"
	mode_vars="c-basic-offset tcl-indent-level"
	wrap=0
	commentchar="#"
	;;
    *.itk )
	echo "$FILE is a IncrTk source file"
	mode="Tcl"
	mode_vars="c-basic-offset tcl-indent-level"
	wrap=0
	commentchar="#"
	;;
    *.pl )
	echo "$FILE is a Perl source file"
	mode="Perl"
	mode_vars="c-basic-offset perl-indent-level"
	wrap=0
	commentchar="#"
	;;
    *.py )
	echo "$FILE is a Python source file"
	mode="Python"
	mode_vars="c-basic-offset python-indent-level"
	wrap=0
	commentchar="#"
	;;
    *.m4 )
	echo "$FILE is an M4 source file"
	mode="m4"
	mode_vars="standard-indent"
	wrap=0
	commentchar="#"
	;;
    *.am )
	echo "$FILE is an Automake template file"
	mode="Makefile"
	wrap=0
	commentchar="#"
	# override any indent since 8 is required
	indentation=8
	tab_width=8
	;;
    *.ac )
	echo "$FILE is an Autoconf template file"
	mode="autoconf"
	wrap=0
	commentchar="#"
	;;
    *.in )
	echo "$FILE is an Autoconf template file"
	mode="autoconf"
	wrap=0
	commentchar="#"
	;;
    *.m4 )
	echo "$FILE is an m4 macro file"
	mode="m4"
	wrap=0
	commentchar="#"
	# override any indent since 8 is required
	indentation=8
	tab_width=8
	;;
    *.mk )
	echo "$FILE is a make file"
	mode="Makefile"
	wrap=0
	commentchar="#"
	# override any indent since 8 is required
	indentation=8
	tab_width=8
	;;
    *.bat )
	echo "$FILE is a batch shell script"
	mode="sh"
	mode_vars="sh-indentation sh-basic-offset"
	wrap=0
	commentchar="REM"
	;;
    *.vim )
	echo "$FILE is a VIM syntax file"
	mode="tcl"
	mode_vars="c-basic-offset tcl-indent-level"
	wrap=0
	commentchar="\""
	;;
    *.el )
	echo "$FILE is an Emacs Lisp file"
	mode="Lisp"
	mode_vars="lisp-indent-offset"
	wrap=0
	commentchar=";;"
	;;
    *.[0-9] )
	echo "$FILE is a manual page"
	mode="nroff"
	wrap=0
	commentchar=".\\\""
	# override any indent since 8 is required
	indentation=8
	tab_width=8
	;;
    * )
	# check the first line, see if it is a script
	filesig="`head -n 1 $FILE`"
	case $filesig in
	    */bin/sh )
		echo "$FILE is a shell script"
		mode="sh"
		mode_vars="sh-indentation sh-basic-offset"
		wrap=0
		commentchar="#"
		;;
	    */bin/tclsh )
		echo "$FILE is a Tcl script"
		mode="Tcl"
		mode_vars="c-basic-offset tcl-indent-level"
		wrap=0
		commentchar="#"
		;;
	    */bin/wish )
		echo "$FILE is a Tk script"
		mode="Tcl"
		mode_vars="c-basic-offset tcl-indent-level"
		wrap=0
		commentchar="#"
		;;
	    */bin/perl )
		echo "$FILE is a Perl script"
		mode="Perl"
		mode_vars="c-basic-offset perl-indent-level"
		wrap=0
		commentchar="#"
		;;
	    */bin/python )
		echo "$FILE is a Python script"
		mode="Python"
		mode_vars="c-basic-offset python-indent-level"
		wrap=0
		commentchar="#"
		;;
	    * )
		echo "ERROR: $FILE has an unknown filetype"
		exit 4
		;;
	esac
esac


#################################
# prepare emacs variable arrays #
#################################
variables=( mode ${variables[@@]} )
values=( $mode ${values[@@]} )
variables=( tab-width ${variables[@@]} )
values=( $tab_width ${values[@@]} )
for mv in $mode_vars ; do
    variables=( ${variables[@@]} $mv )
    values=( ${values[@@]} $indentation )
done
variables=( ${variables[@@]} indent-tabs-mode )
values=( ${values[@@]} t )


##############################
# generate the comment block #
##############################
comment_block="
"
if [ "x$wrap" = "x1" ] ; then
    comment_block="${comment_block}/`echo "${commentchar}"`
"
fi

if [ "x$wrap" = "x1" ] ; then
    # pretty-indent the comment block
    prefixspace=" "
fi

# use temp vars so that emacs doesn't think this line is a local var block too
do_not="Local"
parse="Variables"
comment_block="${comment_block}`echo "${prefixspace}${commentchar} ${do_not} ${parse}:"`
"

index=0
for var in ${variables[@@]} ; do
    comment_block="${comment_block}`echo "${prefixspace}${commentchar} ${var}: ${values[$index]}"`
"
    index="`expr $index \+ 1`"
done

comment_block="${comment_block}`echo "${prefixspace}${commentchar} End:"`
"
comment_block="${comment_block}`echo "${prefixspace}${commentchar} ex: shiftwidth=$indentation tabstop=$tab_width"`"

if [ "x$wrap" = "x1" ] ; then
    comment_block="${comment_block}
"
    comment_block="${comment_block}`echo " ${commentchar}/"`"
fi


#########################
# check the emacs block #
#########################
matching_found=0
index=0
for var in ${variables[@@]} ; do
    if [ ! "x$commentchar" = "x" ] ; then
	existing_var=`cat $FILE | grep -i "${prefixspace}[${commentchar}][${commentchar}]* ${var}:" | sed 's/:/ /g' | awk '{print $3}'`
	existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}][${commentchar}]* ${var}:" | sed 's/:/ /g' | awk '{print $4}'`
    fi

    if [ "x$existing_var" = "x" ] ; then
	echo "$var not found"
    else
	matching_found="`expr $matching_found \+ 1`"

#    echo "found $var=$existing_var"
	if [ "x$existing_var" != "x${values[$index]}" ] ; then
	    echo "$var does not match ... fixing"
	    perl -pi -e "s,(${prefixspace}[${commentchar}]+ ${var}:.*),${prefixspace}${commentchar} ${var}: ${values[$index]},i" $FILE
	elif [ "x$existing_suffix" != "x" ] ; then
	    echo "$var has trailing goo ... fixing"
	    perl -pi -e "s,(${prefixspace}[${commentchar}]+ ${var}:.*),${prefixspace}${commentchar} ${var}: ${values[$index]},i" $FILE
	fi

    fi
    index="`expr $index \+ 1`"
done


######################
# check the vi block #
######################
existing_vi="`cat $FILE | grep -i "${prefixspace}${commentchar} ex:"`"
if [ "x$existing_vi" = "x" ] ; then
    echo "No vi line found..."
else
    vi_line="${prefixspace}${commentchar} ex: shiftwidth=$indentation tabstop=$tab_width"
    if [ "x$existing_vi" != "x$vi_line" ] ; then
	echo "vi line is wrong ... fixing"
	perl -pi -e "s,(${prefixspace}[${commentchar}]+ ex:.*),${prefixspace}${commentchar} ex: shiftwidth=${indentation} tabstop=${tab_width},i" $FILE
    fi
fi


###################################
# final sanitization of the block #
###################################
if [ $matching_found -eq 0 ] ; then
    # make sure there are no local vars
    do_not="Local"
    match="Variables"
    local=`cat "$FILE" | grep -i "${do_not} ${match}:" | awk '{print $1}'`
    # w00t, no local vars so just dump a shiney new block at the end of the file
    if [ "x$local" = "x" ] ; then
	cat >> $FILE <<EOF
$comment_block
EOF
    else
	echo "Darn.. existing local var block somewhere with no matches (${FILE})"
    fi
elif [ $matching_found -ne $index ] ; then
    echo "Darn.. partial match on needs to be resolved manually (${FILE})"
else
    # make sure open and closing do not have trailing comment chars too
    do_not="Local"
    match="Variables"

    if [ ! "x$commentchar" = "x" ] ; then
	existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}][${commentchar}]* ${do_not} ${match}:" | sed 's/:/ /g' | awk '{print $4}'`
    fi
    if [ "x$existing_suffix" != "x" ] ; then
	echo "loc. var has trailing goo ... fixing"
	perl -pi -e "s,(${prefixspace}[${commentchar}]+ ${do_not} ${match}:.*),${prefixspace}${commentchar} ${do_not} ${match}:,i" $FILE
    fi
    if [ ! "x$commentchar" = "x" ] ; then
	existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}][${commentchar}]* End:" | sed 's/:/ /g' | awk '{print $3}'`
    fi
    if [ "x$existing_suffix" != "x" ] ; then
	echo "end has trailing goo ... fixing"
	perl -pi -e "s,(${prefixspace}[${commentchar}]+ End:.*),${prefixspace}${commentchar} End:,i" $FILE
    fi
fi


# Local Variables:
# mode: sh
# tab-width: 8
# sh-indentation: 4
# sh-basic-offset: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.26
log
@should use /usr/bin/env instead of assuming /bin/bash since it's not using /bin/sh
@
text
@d42 1
a42 1
#   find . -type f -and \( -name \*.sh -or -name \*.c -or -name \*.h -or -name \*.tcl -or -name \*.tk -or -name \*.itcl -or -name \*.itk -or -name \*.pl -or -name \*.py \) -not -regex '.*src/other.*' -exec sh/footer.sh {} \;
a48 4
#
# Source -
#   The U.S. Army Research Laboratory
#   Aberdeen Proving Ground, Maryland 21005-5068  USA
d117 2
a118 2
	wrap=1
	commentchar="*"
d124 2
a125 2
	wrap=1
	commentchar="*"
d131 2
a132 2
	wrap=1
	commentchar="*"
d388 2
a389 2
	existing_var=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${var}:" | sed 's/:/ /g' | awk '{print $3}'`
	existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${var}:" | sed 's/:/ /g' | awk '{print $4}'`
d400 1
a400 1
	    perl -pi -e "s/(${prefixspace}[${commentchar}] ${var}:.*)/${prefixspace}${commentchar} ${var}: ${values[$index]}/i" $FILE
d403 1
a403 1
	    perl -pi -e "s/(${prefixspace}[${commentchar}] ${var}:.*)/${prefixspace}${commentchar} ${var}: ${values[$index]}/i" $FILE
d421 1
a421 1
	perl -pi -e "s/(${prefixspace}[${commentchar}] ex:.*)/${prefixspace}${commentchar} ex: shiftwidth=${indentation} tabstop=${tab_width}/i" $FILE
d450 1
a450 1
	existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${do_not} ${match}:" | sed 's/:/ /g' | awk '{print $4}'`
d454 1
a454 1
	perl -pi -e "s/(${prefixspace}[${commentchar}] ${do_not} ${match}:.*)/${prefixspace}${commentchar} ${do_not} ${match}:/i" $FILE
d457 1
a457 1
	existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] End:" | sed 's/:/ /g' | awk '{print $3}'`
d461 1
a461 1
	perl -pi -e "s/(${prefixspace}[${commentchar}] End:.*)/${prefixspace}${commentchar} End:/i" $FILE
@


14.25
log
@add additional c++ header name suffixes
@
text
@d1 1
a1 1
#!/bin/bash
@


14.24
log
@not knowing the file type should report a non-zero error
@
text
@d131 1
a131 1
    *.hh | *.H )
@


14.23
log
@recognize lexer and parser files, keep mode and tab-width first in the variable list in case variables/values is ever customized
@
text
@d325 1
a325 1
		exit 0
@


14.22
log
@let .ac and .in files use the specified indent instead of forcing 8
@
text
@d152 14
d334 4
a337 4
variables=( ${variables[@@]} mode )
values=( ${values[@@]} $mode )
variables=( ${variables[@@]} tab-width )
values=( ${values[@@]} $tab_width )
@


14.21
log
@make .in and .ac files use the autoconf major mode instead of Makefile
@
text
@a214 3
	# override any indent since 8 is required
	indentation=8
	tab_width=8
a220 3
	# override any indent since 8 is required
	indentation=8
	tab_width=8
@


14.20
log
@add recognition of python
@
text
@d212 1
a212 1
	mode="Makefile"
d221 1
a221 1
	mode="Makefile"
@


14.19
log
@update copyright to 2007
@
text
@d42 1
a42 1
#   find . -type f -and \( -name \*.sh -or -name \*.c -or -name \*.h -or -name \*.tcl -or -name \*.tk -or -name \*.itcl -or -name \*.itk -or -name \*.pl \) -not -regex '.*src/other.*' -exec sh/footer.sh {} \;
d187 7
d308 7
@


14.18
log
@add support for emacs lisp files
@
text
@d5 1
a5 1
# Copyright (c) 2004-2006 United States Government as represented by
@


14.17
log
@add support for C++ and Objective-C/C++ to the mix
@
text
@d253 7
@


14.16
log
@automatically detect a slew of script types by looking at the first line of the file -- if the /bin/* is recognizable, then the file doesn't need a suffix after all.
@
text
@d103 1
a103 1
    *.sh)
d110 1
a110 1
    *.c)
d117 1
a117 1
    *.h)
d124 29
a152 1
    *.tcl)
d159 1
a159 1
    *.tk)
d166 1
a166 1
    *.itcl)
d173 1
a173 1
    *.itk)
d180 1
a180 1
    *.pl)
d187 1
a187 1
    *.m4)
d194 1
a194 1
    *.am)
d203 1
a203 1
    *.ac)
d212 1
a212 1
    *.in)
d221 1
a221 1
    *.m4)
d230 1
a230 1
    *.mk)
d239 1
a239 1
    *.bat)
d246 1
a246 1
    *.vim)
d253 1
a253 1
    *.[0-9])
d262 1
a262 1
    *)
d266 1
a266 1
	    */bin/sh)
d273 1
a273 1
	    */bin/tclsh)
d280 1
a280 1
	    */bin/wish)
d287 1
a287 1
	    */bin/perl)
d294 1
a294 1
	    *)
@


14.15
log
@add support for m4 files and make sure it's consistent on template files between the header and footer scripts
@
text
@d235 36
a270 3
	echo "ERROR: $FILE has an unknown filetype"
	exit 0
	;;
@


14.14
log
@add support for .vim files; also manual page comment character to an escaped quote
@
text
@d175 27
@


14.14.2.1
log
@Changes from HEAD merge.
@
text
@a174 27
    *.ac)
	echo "$FILE is an Autoconf template file"
	mode="Makefile"
	wrap=0
	commentchar="#"
	# override any indent since 8 is required
	indentation=8
	tab_width=8
	;;
    *.in)
	echo "$FILE is an Autoconf template file"
	mode="Makefile"
	wrap=0
	commentchar="#"
	# override any indent since 8 is required
	indentation=8
	tab_width=8
	;;
    *.m4)
	echo "$FILE is an m4 macro file"
	mode="m4"
	wrap=0
	commentchar="#"
	# override any indent since 8 is required
	indentation=8
	tab_width=8
	;;
@


14.13
log
@update copyright to 2006
@
text
@d191 16
@


14.12
log
@add support for DOS batch script files, using REM as the comment
@
text
@d5 1
a5 1
# Copyright (C) 2004-2005 United States Government as represented by
@


14.11
log
@trailing ws
@
text
@d184 7
@


14.10
log
@ws
@
text
@d47 2
a48 2
# Author - 
#   Christopher Sean Morrison 
d102 1
a102 1
case $FILE in 
d255 1
a255 1
    
@


14.9
log
@oops, add the right mask and terminate the case properly
@
text
@d15 1
a15 1
# 2. Redistributions in binary form must reproduce the above 
@


14.9.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d15 1
a15 1
# 2. Redistributions in binary form must reproduce the above
d47 2
a48 2
# Author -
#   Christopher Sean Morrison
d102 1
a102 1
case $FILE in
d255 1
a255 1

@


14.8
log
@recognize .am and .mk files
@
text
@d166 1
a166 1
    .am)
d174 2
a175 1
    .mk)
d183 1
@


14.7
log
@abort if we do not know the file type
@
text
@d166 16
@


14.6
log
@add support for m4 files too -- m4 files don't seem to have an emacs m4-mode variable that controls indentation, so just make sure the standard indent is set.
@
text
@d167 2
a168 1
	echo "WARNING: $FILE has an unknown filetype"
@


14.5
log
@force locale setting to C so things like date output as expected
@
text
@d159 7
d262 6
a267 3
elif [ "x$existing_vi" != "x${prefixspace}${commentchar} ex: shiftwidth=$indentation tabstop=$tab_width" ] ; then
    echo "vi line is wrong ... fixing"
    perl -pi -e "s/(${prefixspace}[${commentchar}] ex:.*)/${prefixspace}${commentchar} ex: shiftwidth=${indentation} tabstop=${tab_width}/i" $FILE
@


14.4
log
@initialize vars and avoid grep error output on unknown files (with an unknown commentchar)
@
text
@d63 2
@


14.3
log
@update copyright to 2005
@
text
@d94 6
a99 1
###
d223 4
a226 2
    existing_var=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${var}:" | sed 's/:/ /g' | awk '{print $3}'`
    existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${var}:" | sed 's/:/ /g' | awk '{print $4}'`
d281 4
a284 1
    existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${do_not} ${match}:" | sed 's/:/ /g' | awk '{print $4}'`
d289 3
a291 1
    existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] End:" | sed 's/:/ /g' | awk '{print $3}'`
@


14.2
log
@assignment of copyright and BSD license
@
text
@d5 2
a6 2
# Copyright (c) 2004 United States Government as represented by the
# U.S. Army Research Laboratory.
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d2 35
@


11.3
log
@ws
@
text
@d7 1
a7 1
#   find . -type f -and \( -name \*.sh -or -name \*.c -or -name \*.h -or -name \*.tcl -or -name \*.tk -or -name \*.itcl -or -name \*.itk -or -name \*.pl \) -exec ./footer.sh {} \;
@


11.2
log
@don't append the additional newline since the substitution will add one for us (and we don't want an extra at the end)
@
text
@d33 2
a34 2
  echo "ERROR: must give the name/path of a file to check/update"
  exit 1
d36 2
a37 2
  echo "ERROR: unable to find $FILE"
  exit 1
d39 2
a40 2
  echo "ERROR: unable to read $FILE"
  exit 2
d42 2
a43 2
  echo "ERROR: unable to write to $FILE"
  exit 2
d47 2
a48 2
  echo "ERROR: script only supports single file arguments"
  exit 3
d61 59
a119 59
  *.sh)
    echo "$FILE is a shell script"
    mode="sh"
    mode_vars="sh-indentation sh-basic-offset"
    wrap=0
    commentchar="#"
    ;;
  *.c)
    echo "$FILE is a C source file"
    mode="C"
    mode_vars="c-basic-offset"
    wrap=1
    commentchar="*"
    ;;
  *.h)
    echo "$FILE is a C header"
    mode="C"
    mode_vars="c-basic-offset"
    wrap=1
    commentchar="*"
    ;;
  *.tcl)
    echo "$FILE is a Tcl source file"
    mode="Tcl"
    mode_vars="c-basic-offset tcl-indent-level"
    wrap=0
    commentchar="#"
    ;;
  *.tk)
    echo "$FILE is a Tk source file"
    mode="Tcl"
    mode_vars="c-basic-offset tcl-indent-level"
    wrap=0
    commentchar="#"
    ;;
  *.itcl)
    echo "$FILE is a IncrTcl source file"
    mode="Tcl"
    mode_vars="c-basic-offset tcl-indent-level"
    wrap=0
    commentchar="#"
    ;;
  *.itk)
    echo "$FILE is a IncrTk source file"
    mode="Tcl"
    mode_vars="c-basic-offset tcl-indent-level"
    wrap=0
    commentchar="#"
    ;;
  *.pl)
    echo "$FILE is a Perl source file"
    mode="Perl"
    mode_vars="c-basic-offset perl-indent-level"
    wrap=0
    commentchar="#"
    ;;
  *)
    echo "WARNING: $FILE has an unknown filetype"
    ;;
d131 2
a132 2
  variables=( ${variables[@@]} $mv )
  values=( ${values[@@]} $indentation )
d144 1
a144 1
  comment_block="${comment_block}/`echo "${commentchar}"`
d149 2
a150 2
  # pretty-indent the comment block
  prefixspace=" "
d171 1
a171 1
  comment_block="${comment_block}
d173 1
a173 1
  comment_block="${comment_block}`echo " ${commentchar}/"`"
d183 7
a189 7
  existing_var=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${var}:" | sed 's/:/ /g' | awk '{print $3}'`
  existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${var}:" | sed 's/:/ /g' | awk '{print $4}'`
  
  if [ "x$existing_var" = "x" ] ; then
    echo "$var not found"
  else
    matching_found="`expr $matching_found \+ 1`"
d192 8
a199 6
    if [ "x$existing_var" != "x${values[$index]}" ] ; then
      echo "$var does not match ... fixing"
      perl -pi -e "s/(${prefixspace}[${commentchar}] ${var}:.*)/${prefixspace}${commentchar} ${var}: ${values[$index]}/i" $FILE
    elif [ "x$existing_suffix" != "x" ] ; then
      echo "$var has trailing goo ... fixing"
      perl -pi -e "s/(${prefixspace}[${commentchar}] ${var}:.*)/${prefixspace}${commentchar} ${var}: ${values[$index]}/i" $FILE
d201 1
a201 3

  fi
  index="`expr $index \+ 1`"
d210 1
a210 1
  echo "No vi line found..."
d212 2
a213 2
  echo "vi line is wrong ... fixing"
  perl -pi -e "s/(${prefixspace}[${commentchar}] ex:.*)/${prefixspace}${commentchar} ex: shiftwidth=${indentation} tabstop=${tab_width}/i" $FILE
d221 7
a227 7
  # make sure there are no local vars
  do_not="Local"
  match="Variables"
  local=`cat "$FILE" | grep -i "${do_not} ${match}:" | awk '{print $1}'`
  # w00t, no local vars so just dump a shiney new block at the end of the file
  if [ "x$local" = "x" ] ; then
    cat >> $FILE <<EOF
d230 3
a232 3
  else
    echo "Darn.. existing local var block somewhere with no matches (${FILE})"
  fi
d234 1
a234 1
  echo "Darn.. partial match on needs to be resolved manually (${FILE})"
d236 13
a248 13
  # make sure open and closing do not have trailing comment chars too
  do_not="Local"
  match="Variables"
  existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] ${do_not} ${match}:" | sed 's/:/ /g' | awk '{print $4}'`
  if [ "x$existing_suffix" != "x" ] ; then
    echo "loc. var has trailing goo ... fixing"
    perl -pi -e "s/(${prefixspace}[${commentchar}] ${do_not} ${match}:.*)/${prefixspace}${commentchar} ${do_not} ${match}:/i" $FILE
  fi
  existing_suffix=`cat $FILE | grep -i "${prefixspace}[${commentchar}] End:" | sed 's/:/ /g' | awk '{print $3}'`
  if [ "x$existing_suffix" != "x" ] ; then
    echo "end has trailing goo ... fixing"
    perl -pi -e "s/(${prefixspace}[${commentchar}] End:.*)/${prefixspace}${commentchar} End:/i" $FILE
  fi
@


11.1
log
@initial footer file that adds/updates an emacs/vi style variables block at the bottom of a file.
@
text
@d168 1
a168 2
comment_block="${comment_block}`echo "${prefixspace}${commentchar} ex: shiftwidth=$indentation tabstop=$tab_width"`
"
d171 1
a171 1
  comment_block="${comment_block}`echo " ${commentchar}/"`
d173 1
@

