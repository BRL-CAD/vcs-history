head	1.24;
access;
symbols
	rel-7-10-4:1.23
	STABLE:1.23.0.2
	stable-branch:1.17
	rel-7-10-2:1.23
	rel-7-10-0:1.23
	rel-7-8-4:1.21
	rel-7-8-2:1.21
	rel-7-8-0:1.21
	trimnurbs-branch:1.21.0.2
	help:1.21
	temp_tag:1.20
	bobWinPort-20051223-freeze:1.18
	postmerge-20051223-bobWinPort:1.20
	premerge-20051223-bobWinPort:1.20
	rel-7-6-6:1.20
	rel-7-6-4:1.20
	rel-7-6-2:1.18
	rel-7-6-branch:1.18.0.6
	rel-7-6-0:1.18
	rel-7-4-2:1.18
	rel-7-4-branch:1.18.0.4
	bobWinPort:1.18.0.2
	rel-7-4-0:1.18
	rel-7-2-6:1.17
	rel-7-2-4:1.17
	rel-7-2-2:1.10
	rel-7-2-0:1.5;
locks; strict;
comment	@# @;


1.24
date	2007.12.04.19.54.06;	author brlcad;	state Exp;
branches;
next	1.23;

1.23
date	2007.01.26.23.32.26;	author brlcad;	state Exp;
branches;
next	1.22;

1.22
date	2007.01.20.13.57.25;	author brlcad;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.18.06.46.11;	author brlcad;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.23.04.44.27;	author brlcad;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.22.17.36.02;	author brlcad;	state Exp;
branches;
next	1.18;

1.18
date	2005.06.14.14.12.33;	author brlcad;	state Exp;
branches
	1.18.6.1;
next	1.17;

1.17
date	2005.04.12.04.12.44;	author brlcad;	state Exp;
branches;
next	1.16;

1.16
date	2005.04.12.03.31.37;	author brlcad;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.11.05.07.37;	author brlcad;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.11.02.51.16;	author brlcad;	state Exp;
branches;
next	1.13;

1.13
date	2005.04.10.15.55.33;	author brlcad;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.07.04.35.31;	author brlcad;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.06.04.02.10;	author brlcad;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.11.05.16.05;	author brlcad;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.07.01.17.15;	author brlcad;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.06.09.20.13;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.06.02.52.52;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.06.02.05.20;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.01.00.05.38;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.31.06.35.45;	author brlcad;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.31.06.28.11;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.31.04.16.17;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.30.04.21.35;	author brlcad;	state Exp;
branches;
next	;

1.18.6.1
date	2005.11.13.13.46.10;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.24
log
@update the helper build scripts to the new version variables now that MAJOR_, MINOR_, and PATCH_ are no longer being individually subst'd.  simplify them to only require a single version number in triplet form instead of separated out individually (only mac make_pkg script needed it broken up anyways).
@
text
@#!/bin/sh
#                     M A K E _ P K G . S H
# BRL-CAD
#
# Copyright (c) 2005-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. The name of the author may not be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
###
#
# Script for generating a Mac OS X Installer package (.pkg) from a
# clean package installation.  The package should be compatible with
# old and new versions of Installer.
#
# Author: Christopher Sean Morrison
#
######################################################################

NAME="$1"
VERSION="$2"
ARCHIVE="$3"
RESOURCES="$4"
if [ "x$NAME" = "x" ] ; then
    echo "Usage: $0 title version archive_dir [resource_dir]"
    echo "ERROR: must specify a title for the package name"
    exit 1
fi
if [ "x$VERSION" = "x" ] ; then
    echo "Usage: $0 title version archive_dir [resource_dir]"
    echo "ERROR: must specify a version"
    exit 1
fi
if [ "x$ARCHIVE" = "x" ] ; then
    echo "Usage: $0 title version archive_dir [resource_dir]"
    echo "ERROR: must specify an archive directory"
    exit 1
fi
if [ ! -d "$ARCHIVE" ] ; then
    echo "ERROR: specified archive path (${ARCHIVE}) is not a directory"
    exit 1
fi
if [ "x$RESOURCES" = "x" ] ; then
    RESOURCES="none>>make_pkg_sh<<none"
else
    if [ ! -d "$RESOURCES" ] ; then
	echo "ERROR: specified resource path (${RESOURCES}) is not a readable directory"
	exit 1
    fi
fi

MAJOR_VERSION="`echo $VERSION | cut -f1 -d.`""
MINOR_VERSION="`echo $VERSION | cut -f2 -d.`""
PATCH_VERSION="`echo $VERSION | cut -f3 -d.`""
if [ "x$MAJOR_VERSION" = "x" ] ; then
    echo "Usage: $0 title version archive_dir [resource_dir]"
    echo "ERROR: unable to get major version number from [$VERSION]"
    exit 1
fi
if [ "x$MINOR_VERSION" = "x" ] ; then
    echo "Usage: $0 title version archive_dir [resource_dir]"
    echo "ERROR: unable to get minor version number from [$VERSION]"
    exit 1
fi
if [ "x$PATCH_VERSION" = "x" ] ; then
    echo "Usage: $0 title version archive_dir [resource_dir]"
    echo "ERROR: unable to get patch version number from [$VERSION]"
    exit 1
fi

PATH=/bin:/usr/bin:/usr/sbin
LC_ALL=C
umask 002

# TMPDIR=/tmp
if [ "x$TMPDIR" = "x" ] || [ ! -w $TMPDIR ] ; then
    if [ -w /usr/tmp ] ; then
	TMPDIR=/usr/tmp
    elif [ -w /var/tmp ] ; then
	TMPDIR=/var/tmp
    elif [ -w /tmp ] ; then
	TMPDIR=/tmp
    else
	TMPDIR=.
    fi
fi

PRE_PWD="`pwd`"
PKG_NAME="${NAME}-${VERSION}"
PKG="${PKG_NAME}.pkg"

if [ -f "$PKG" ] ; then
    echo "ERROR: there is a file with the same name in the way of creating $PKG"
    exit 1
fi

if [ "x`id -u`" != "x0" ] ; then
    echo "$0 requires superuser privileges, restarting via sudo"
    sudo "$0" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
    retval="$?"
    if [ ! "x$retval" = "x0" ] ; then
	exit $retval
    fi
    if [ ! -d "$PKG" ] ; then
	if [ -d "${TMPDIR}/$PKG" ] ; then
	    cp -pR ${TMPDIR}/$PKG .
	    if [ ! "x$?" = "x0" ] ; then
		echo "ERROR: unsuccessfully moved ${TMPDIR}/$PKG to `pwd`"
		exit 1
	    fi
	    if [ ! -d "$PKG" ] ; then
		echo "ERROR: unable to move ${TMPDIR}/$PKG to `pwd`"
		exit 1
	    fi
	else
	    echo "ERROR: sanity check .. could not find $PKG"
	    exit 1
	fi
    fi
    if [ -d "$PKG" ] ; then
	echo "CREATED `pwd`/$PKG"
    fi

    exit 0
fi

exists_writeable=no
if [ -d "$PKG" ] ; then
    if [ -w "$PKG" ] ; then
	exists_writeable=yes
    fi

else
    mkdir "$PKG" > /dev/null 2>&1
    if [ ! -d "$PKG" ] ; then
	echo "WARNING: unable to create the package directory in `pwd` (perhaps it's an NFS filesystem?)"

	if [ ! -w ${TMPDIR}/. ] ; then
	    echo "ERROR: unable to write to ${TMPDIR} for creating the package"
	    exit 1
	fi

	cd ${TMPDIR}

	if [ -d "$PKG" ] ; then
	    if [ -w "$PKG" ] ; then
		exists_writeable=yes
	    fi
	else
	    mkdir "$PKG"
	    if [ ! -d "$PKG" ] ; then
		echo "ERROR: unable to use ${TMPDIR} for creating the package"
		exit 1
	    fi

	    rmdir "$PKG"
	    if [ ! "x$?" = "x0" ] ; then
		echo "ERROR: unexpected failure while testing removal of $PKG"
		exit 1
	    fi
	fi

	if [ ! -d "${RESOURCES}" ] ; then
	    if [ -d "${PRE_PWD}/${RESOURCES}" ] ; then
		RESOURCES="${PRE_PWD}/${RESOURCES}"
	    fi
	fi
    else
	rmdir "$PKG"
	if [ ! "x$?" = "x0" ] ; then
	    echo "ERROR: unexpected failure while testing removal of $PKG"
	    exit 1
	fi
    fi
fi

if [ "x$exists_writeable" = "xyes" ] ; then
    remove=""
    while [ "x$remove" = "x" ] ; do
	echo "WARNING: Installer package ($PKG) already exists in `pwd`, remove it?"
	echo -n "yes/no? "
	read remove
	case x$remove in
	    x[yY][eE][sS])
		remove=yes
		;;
	    x[yY])
		remove=yes
		;;
	    x[nN][oO])
		remove=no
		;;
	    x[nN])
		remove=no
		;;
	    *)
		remove=""
		;;
	esac
    done

    if [ "x$remove" = "xyes" ] ; then
	rm -rf "$PKG"
    fi
fi

if [ -f "$PKG" ] ; then
    echo "ERROR: cannot continue with $PKG in the way"
    exit 1
fi
if [ -d "$PKG" ] ; then
    echo "ERROR: cannot continue with directory $PKG in the way"
    exit 1
fi

mkdir "$PKG" > /dev/null 2>&1
if [ ! -d "$PKG" ] ; then
    echo "ERROR: unable to create the package directory"
    exit 1
fi

mkdir "$PKG/Contents"
if [ ! -d "$PKG/Contents" ] ; then
    echo "ERROR: unable to create the package contents directory"
    exit 1
fi

mkdir "$PKG/Contents/Resources"
if [ ! -d "$PKG/Contents/Resources" ] ; then
    echo "ERROR: unable to create the package resources directory"
    exit 1
fi

if [ ! "x$RESOURCES" = "xnone>>make_pkg_sh<<none" ] ; then
    if [ ! -d "$RESOURCES" ] ; then
	echo "ERROR: sanity check failure -- resources directory disappeared?"
	exit 1
    fi

    cp -R "${RESOURCES}/" "$PKG/Contents/Resources"
    if [ $? != 0 ] ; then
	echo "ERROR: unable to copy the resource directory contents"
	exit 1
    fi
fi

cat > "$PKG/Contents/PkgInfo" <<EOF
pmkrpkg1
EOF
if [ ! -f "$PKG/Contents/PkgInfo" ] ; then
    echo "ERROR: unable to create PkgInfo file"
    exit 1
fi

cat > "$PKG/Contents/Info.plist" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleGetInfoString</key>
	<string>${NAME} ${VERSION}</string>
	<key>CFBundleIdentifier</key>
	<string>org.brlcad.${NAME}</string>
	<key>CFBundleName</key>
	<string>${NAME}</string>
	<key>CFBundleShortVersionString</key>
	<string>${MAJOR_VERSION}.${MINOR_VERSION}</string>
	<key>IFMajorVersion</key>
	<integer>${MAJOR_VERSION}</integer>
	<key>IFMinorVersion</key>
	<integer>${MINOR_VERSION}</integer>
	<key>IFPkgFlagAllowBackRev</key>
	<true/>
	<key>IFPkgFlagAuthorizationAction</key>
	<string>RootAuthorization</string>
	<key>IFPkgFlagDefaultLocation</key>
	<string>/</string>
	<key>IFPkgFlagInstallFat</key>
	<false/>
	<key>IFPkgFlagIsRequired</key>
	<true/>
	<key>IFPkgFlagRelocatable</key>
	<false/>
	<key>IFPkgFlagRestartAction</key>
	<string>NoRestart</string>
	<key>IFPkgFlagRootVolumeOnly</key>
	<false/>
	<key>IFPkgFlagUpdateInstalledLanguages</key>
	<false/>
	<key>IFPkgFormatVersion</key>
	<real>0.10000000149011612</real>
</dict>
</plist>
EOF
if [ ! -f "$PKG/Contents/Info.plist" ] ; then
    echo "ERROR: unable to create Info.plist file"
    exit 1
fi

mkdir "$PKG/Contents/Root"
if [ $? != 0 ] ; then
    echo "ERROR: unable to successfully create the archive root"
    exit 1
fi
if [ ! -d "$PKG/Contents/Root" ] ; then
    echo "ERROR: $PKG/Contents/Root could not be created"
    exit 1
fi

chmod 1775 "$PKG/Contents/Root"
if [ $? != 0 ] ; then
    echo "ERROR: unable to set the mode on the archive root"
    exit 1
fi

chown root:admin "$PKG/Contents/Root"
if [ $? != 0 ] ; then
    echo "ERROR: unable to set the owner/group on the archive root"
    exit 1
fi

pax -L -p e -rw "$ARCHIVE" "$PKG/Contents/Root"
if [ $? != 0 ] ; then
    echo "ERROR: unable to successfully create the archive root of $ARCHIVE"
    exit 1
fi

pax -z -w -x cpio -s ",$PKG/Contents/Root,.," "$PKG/Contents/Root" > "$PKG/Contents/Archive.pax.gz"
if [ $? != 0 ] ; then
    echo "ERROR: unable to successfully create a compressed pax archive"
    exit 1
fi
if [ ! -f "$PKG/Contents/Archive.pax.gz" ] ; then
    echo "ERROR: compressed pax archive does not exist"
    exit 1
fi

mkbom "$PKG/Contents/Root" "$PKG/Contents/Archive.bom"
if [ $? != 0 ] ; then
    echo "ERROR: unable to successfully generate a bill of materials"
    exit 1
fi
if [ ! -f "$PKG/Contents/Archive.bom" ] ; then
    echo "ERROR: bill of materials file does not exist"
    exit 1
fi

rm -rf "$PKG/Contents/Root"
if [ -d "$PKG/Contents/Root" ] ; then
    echo "ERROR: unable to remove temporary BOM root"
    exit 1
fi

NUM_FILES=`find -L "${ARCHIVE}" -type f | wc | awk '{print $1}'`
if [ "x$NUM_FILES" = "x" ] ; then
    echo "ERROR: unable to get a file count from $ARCHIVE"
    exit 1
fi
if [ "x$NUM_FILES" = "x0" ] ; then
    echo "ERROR: there are no files to archive"
    exit 1
fi

INST_SIZE=`du -L -k -s "${ARCHIVE}" | awk '{print $1}'`
if [ "x$INST_SIZE" = "x" ] ; then
    echo "ERROR: unable to get a usage size from $ARCHIVE"
    exit 1
fi
if [ "x$INST_SIZE" = "x0" ] ; then
    echo "ERROR: install size is empty"
    exit 1
fi

COMP_SIZE=`ls -l "$PKG/Contents/Archive.pax.gz" | awk '{print $5}'`
COMP_SIZE=`echo "$COMP_SIZE 1024 / p" | dc`
if [ "x$COMP_SIZE" = "x" ] ; then
    echo "ERROR: unable to get the compressed archive size"
    exit 1
fi
if [ "x$COMP_SIZE" = "x0" ] ; then
    echo "ERROR: compressed archive is empty"
    exit 1
fi

cat > "$PKG/Contents/Resources/${PKG_NAME}.sizes" <<EOF
NumFiles $NUM_FILES
InstalledSize $INST_SIZE
CompressedSize $COMP_SIZE
EOF
if [ ! -f "$PKG/Contents/Resources/${PKG_NAME}.sizes" ] ; then
    echo "ERROR: unable to create the ${PKG_NAME}.size file"
    exit 1
fi

cat > "$PKG/Contents/Resources/${PKG_NAME}.info" <<EOF
Title $NAME
Version $VERSION
Description $NAME $VERSION
DefaultLocation /
DeleteWarning Don't do it... untested.

### Package Flags

NeedsAuthorization YES
Required YES
Relocatable NO
RequiresReboot NO
UseUserMask YES
OverwritePermissions NO
InstallFat NO
RootVolumeOnly NO
EOF
if [ ! -f "$PKG/Contents/Resources/${PKG_NAME}.info" ] ; then
    echo "ERROR: unable to create the ${PKG_NAME}.info file"
    exit 1
fi

cat > "$PKG/Contents/Resources/Description.plist" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IFPkgDescriptionDeleteWarning</key>
	<string>Don't do it... untested.</string>
	<key>IFPkgDescriptionDescription</key>
	<string>${NAME} ${VERSION}</string>
	<key>IFPkgDescriptionTitle</key>
	<string>${NAME}</string>
	<key>IFPkgDescriptionVersion</key>
	<string>${VERSION}</string>
</dict>
</plist>
EOF
if [ ! -f "$PKG/Contents/Resources/Description.plist" ] ; then
    echo "ERROR: unable to create the Description.plist file"
    exit 1
fi

ln -s ../Archive.bom "$PKG/Contents/Resources/${PKG_NAME}.bom"
if [ $? != 0 ] ; then
    echo "ERROR: unable to successfully create a symbolic link to the Archive.bom"
    exit 1
fi
if [ ! -h "$PKG/Contents/Resources/${PKG_NAME}.bom" ] ; then
    echo "ERROR: symbolic link ${PKG_NAME}.bom does not exist"
    exit 1
fi

ln -s ../Archive.pax.gz "$PKG/Contents/Resources/${PKG_NAME}.pax.gz"
if [ $? != 0 ] ; then
    echo "ERROR: unable to successfully create a symbolic link to the Archive.pax.gz"
    exit 1
fi
if [ ! -h "$PKG/Contents/Resources/${PKG_NAME}.pax.gz" ] ; then
    echo "ERROR: symbolic link ${PKG_NAME}.pax.gz does not exist"
    exit 1
fi

cd "$PRE_PWD"
# woo hoo .. done

# Local Variables:
# mode: sh
# tab-width: 8
# sh-indentation: 4
# sh-basic-offset: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


1.23
log
@ws
@
text
@d47 3
a49 5
MAJOR_VERSION="$2"
MINOR_VERSION="$3"
PATCH_VERSION="$4"
ARCHIVE="$5"
RESOURCES="$6"
d51 1
a51 1
    echo "Usage: $0 title major_version minor_version patch_version archive_dir [resource_dir]"
d55 3
a57 13
if [ "x$MINOR_VERSION" = "x" ] ; then
    echo "Usage: $0 title major_version minor_version patch_version archive_dir [resource_dir]"
    echo "ERROR: must specify a major package version"
    exit 1
fi
if [ "x$MINOR_VERSION" = "x" ] ; then
    echo "ERROR: must specify a minor package version"
    echo "Usage: $0 title major_version minor_version patch_version archive_dir [resource_dir]"
    exit 1
fi
if [ "x$PATCH_VERSION" = "x" ] ; then
    echo "Usage: $0 title major_version minor_version patch_version archive_dir [resource_dir]"
    echo "ERROR: must specify a patch package version"
d61 1
a61 1
    echo "Usage: $0 title major_version minor_version patch_version archive_dir [resource_dir]"
d78 19
a114 1
VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
@


1.22
log
@update copyright to 2007
@
text
@d205 1
a205 1
	        remove=yes
d208 1
a208 1
	        remove=yes
d211 1
a211 1
	        remove=no
d214 1
a214 1
	        remove=no
d280 32
a311 32
        <key>CFBundleGetInfoString</key>
        <string>${NAME} ${VERSION}</string>
        <key>CFBundleIdentifier</key>
        <string>org.brlcad.${NAME}</string>
        <key>CFBundleName</key>
        <string>${NAME}</string>
        <key>CFBundleShortVersionString</key>
        <string>${MAJOR_VERSION}.${MINOR_VERSION}</string>
        <key>IFMajorVersion</key>
        <integer>${MAJOR_VERSION}</integer>
        <key>IFMinorVersion</key>
        <integer>${MINOR_VERSION}</integer>
        <key>IFPkgFlagAllowBackRev</key>
        <true/>
        <key>IFPkgFlagAuthorizationAction</key>
        <string>RootAuthorization</string>
        <key>IFPkgFlagDefaultLocation</key>
        <string>/</string>
        <key>IFPkgFlagInstallFat</key>
        <false/>
        <key>IFPkgFlagIsRequired</key>
        <true/>
        <key>IFPkgFlagRelocatable</key>
        <false/>
        <key>IFPkgFlagRestartAction</key>
        <string>NoRestart</string>
        <key>IFPkgFlagRootVolumeOnly</key>
        <false/>
        <key>IFPkgFlagUpdateInstalledLanguages</key>
        <false/>
        <key>IFPkgFormatVersion</key>
        <real>0.10000000149011612</real>
d443 8
a450 8
        <key>IFPkgDescriptionDeleteWarning</key>
        <string>Don't do it... untested.</string>
        <key>IFPkgDescriptionDescription</key>
        <string>${NAME} ${VERSION}</string>
        <key>IFPkgDescriptionTitle</key>
        <string>${NAME}</string>
        <key>IFPkgDescriptionVersion</key>
        <string>${VERSION}</string>
@


1.21
log
@update copyright to 2006
@
text
@d5 1
a5 1
# Copyright (c) 2005-2006 United States Government as represented by
@


1.20
log
@trailing ws
@
text
@d5 1
a5 1
# Copyright (c) 2005 United States Government as represented by
@


1.19
log
@ws
@
text
@d88 1
a88 1
fi    
d157 1
a157 1
	
d182 1
a182 1
	
d235 1
a235 1
    
d259 1
a259 1
    
@


1.18
log
@take symbolic links into account so that if the archive root is a symbolic link, it will still become properly archived
@
text
@d15 1
a15 1
# 2. Redistributions in binary form must reproduce the above 
@


1.18.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d15 1
a15 1
# 2. Redistributions in binary form must reproduce the above
d88 1
a88 1
fi
d157 1
a157 1

d182 1
a182 1

d235 1
a235 1

d259 1
a259 1

@


1.17
log
@search /usr/sbin too
@
text
@d342 1
a342 1
pax -p e -rw "$ARCHIVE" "$PKG/Contents/Root"
d374 1
a374 1
NUM_FILES=`find "${ARCHIVE}" -type f | wc | awk '{print $1}'`
d379 4
d384 1
a384 1
INST_SIZE=`du -k -s "${ARCHIVE}" | awk '{print $1}'`
d389 4
d400 4
@


1.16
log
@ensure the environment by overriding the path, the locale, and the umask.  search for a suitable tmpdir.
@
text
@d90 1
a90 1
PATH=/bin:/usr/bin
@


1.15
log
@add the trailing slash for cp so that the contents are copied instead of the whole dir
@
text
@d90 17
d125 2
a126 2
	if [ -d "/tmp/$PKG" ] ; then
	    cp -pR /tmp/$PKG .
d128 1
a128 1
		echo "ERROR: unsuccessfully moved /tmp/$PKG to `pwd`"
d132 1
a132 1
		echo "ERROR: unable to move /tmp/$PKG to `pwd`"
d158 2
a159 2
	if [ ! -w /tmp/. ] ; then
	    echo "ERROR: unable to write to /tmp for creating the package"
d163 1
a163 1
	cd /tmp
d172 1
a172 1
		echo "ERROR: unable to use /tmp for creating the package"
@


1.14
log
@copy the package from /tmp to the build directory when we're done making it
@
text
@d243 1
a243 1
    cp -R "${RESOURCES}" "$PKG/Contents/Resources"
@


1.13
log
@improvement that allows the script to work with NFS mounted home directories, defaulting to try making the package in /tmp.  if an existing package exists, they are warned now and asked if they want to delete it.
@
text
@d103 25
a127 1
    exit $?
a449 1
echo "CREATED `pwd`/$PKG"
@


1.12
log
@give the script a name when restarting via sudo
@
text
@d85 1
a85 1
	echo "ERROR: specified resource path (${RESOURCES}) is not a directory"
d90 10
d106 74
d181 16
a196 4
VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
PKG_NAME="${NAME}-${VERSION}"
mkdir "${PKG_NAME}.pkg"
if [ ! -d "${PKG_NAME}.pkg" ] ; then
d201 2
a202 2
mkdir "${PKG_NAME}.pkg/Contents"
if [ ! -d "${PKG_NAME}.pkg/Contents" ] ; then
d207 2
a208 2
mkdir "${PKG_NAME}.pkg/Contents/Resources"
if [ ! -d "${PKG_NAME}.pkg/Contents/Resources" ] ; then
d219 1
a219 1
    cp -R "${RESOURCES}/" "${PKG_NAME}.pkg/Contents/Resources"
d226 1
a226 1
cat > "${PKG_NAME}.pkg/Contents/PkgInfo" <<EOF
d229 1
a229 1
if [ ! -f "${PKG_NAME}.pkg/Contents/PkgInfo" ] ; then
d234 1
a234 1
cat > "${PKG_NAME}.pkg/Contents/Info.plist" <<EOF
d274 1
a274 1
if [ ! -f "${PKG_NAME}.pkg/Contents/Info.plist" ] ; then
d279 1
a279 1
mkdir ${PKG_NAME}.pkg/Contents/Root
d284 2
a285 2
if [ ! -d "${PKG_NAME}.pkg/Contents/Root" ] ; then
    echo "ERROR: ${PKG_NAME}.pkg/Contents/Root could not be created"
d289 1
a289 1
chmod 1775 "${PKG_NAME}.pkg/Contents/Root"
d295 1
a295 1
chown root:admin "${PKG_NAME}.pkg/Contents/Root"
d301 1
a301 1
pax -p e -rw "$ARCHIVE" "${PKG_NAME}.pkg/Contents/Root"
d307 1
a307 1
pax -z -w -x cpio -s ",${PKG_NAME}.pkg/Contents/Root,.," "${PKG_NAME}.pkg/Contents/Root" > "${PKG_NAME}.pkg/Contents/Archive.pax.gz"
d312 1
a312 1
if [ ! -f "${PKG_NAME}.pkg/Contents/Archive.pax.gz" ] ; then
d317 1
a317 1
mkbom "${PKG_NAME}.pkg/Contents/Root" "${PKG_NAME}.pkg/Contents/Archive.bom"
d322 1
a322 1
if [ ! -f "${PKG_NAME}.pkg/Contents/Archive.bom" ] ; then
d327 2
a328 2
rm -rf "${PKG_NAME}.pkg/Contents/Root"
if [ -d "${PKG_NAME}.pkg/Contents/Root" ] ; then
d345 1
a345 1
COMP_SIZE=`ls -l "${PKG_NAME}.pkg/Contents/Archive.pax.gz" | awk '{print $5}'`
d352 1
a352 1
cat > "${PKG_NAME}.pkg/Contents/Resources/${PKG_NAME}.sizes" <<EOF
d357 1
a357 1
if [ ! -f "${PKG_NAME}.pkg/Contents/Resources/${PKG_NAME}.sizes" ] ; then
d362 1
a362 1
cat > "${PKG_NAME}.pkg/Contents/Resources/${PKG_NAME}.info" <<EOF
d380 1
a380 1
if [ ! -f "${PKG_NAME}.pkg/Contents/Resources/${PKG_NAME}.info" ] ; then
d385 1
a385 1
cat > "${PKG_NAME}.pkg/Contents/Resources/Description.plist" <<EOF
d401 1
a401 1
if [ ! -f "${PKG_NAME}.pkg/Contents/Resources/Description.plist" ] ; then
d406 1
a406 1
ln -s ../Archive.bom "${PKG_NAME}.pkg/Contents/Resources/${PKG_NAME}.bom"
d411 1
a411 1
if [ ! -h "${PKG_NAME}.pkg/Contents/Resources/${PKG_NAME}.bom" ] ; then
d416 1
a416 1
ln -s ../Archive.pax.gz "${PKG_NAME}.pkg/Contents/Resources/${PKG_NAME}.pax.gz"
d421 1
a421 1
if [ ! -h "${PKG_NAME}.pkg/Contents/Resources/${PKG_NAME}.pax.gz" ] ; then
d426 2
@


1.11
log
@wording of title and name
@
text
@d91 1
a91 1
    echo "This script requires superuser privileges, restarting via sudo"
@


1.10
log
@add an optional 6th argument for a resources directory -- if given, copy the contents to the resource dir in the package
@
text
@d54 1
a54 1
    echo "ERROR: must specify a package name"
@


1.9
log
@woo hoo .. the pax archive now correctly includes it's full heirarchy and sets permissions correctly.  the package will now generate and install correctly.
@
text
@d51 1
d53 1
a53 1
    echo "Usage: $0 title major_version minor_version patch_version archive_dir"
d58 1
a58 1
    echo "Usage: $0 title major_version minor_version patch_version archive_dir"
d64 1
a64 1
    echo "Usage: $0 title major_version minor_version patch_version archive_dir"
d68 1
a68 1
    echo "Usage: $0 title major_version minor_version patch_version archive_dir"
d73 1
a73 1
    echo "Usage: $0 title major_version minor_version patch_version archive_dir"
d81 8
d92 1
a92 1
    sudo "$0" "$1" "$2" "$3" "$4" "$5"
d117 13
@


1.8
log
@copy the archive into a temporary root for creating a proper bill of materials
@
text
@d81 7
d161 1
a161 2
# strip any trailing slash so that the archive location is relative
pax -w -x cpio -s ',^//*,,' -f "${PKG_NAME}.pkg/Contents/Archive.pax" "$ARCHIVE"
d163 1
a163 1
    echo "ERROR: unable to successfully create a pax archive of $ARCHIVE"
d166 2
a167 2
if [ ! -f "${PKG_NAME}.pkg/Contents/Archive.pax" ] ; then
    echo "ERROR: pax archive does not exist"
d171 1
a171 1
gzip -c "${PKG_NAME}.pkg/Contents/Archive.pax" > "${PKG_NAME}.pkg/Contents/Archive.pax.gz"
d173 1
a173 1
    echo "ERROR: unable to successfully compress the pax archive"
d176 4
a179 2
if [ ! -f "${PKG_NAME}.pkg/Contents/Archive.pax.gz" ] ; then
    echo "ERROR: compressed pax archive does not exist"
d183 3
a185 3
rm -f "${PKG_NAME}.pkg/Contents/Archive.pax"
if [ -f "${PKG_NAME}.pkg/Contents/Archive.pax" ] ; then
    echo "ERROR: unable to remove uncompressed pax archive"
d189 1
a189 2
# make a temporary root directory for making the bill of materials
mkdir ${PKG_NAME}.pkg/Contents/Root
d191 1
a191 1
    echo "ERROR: unable to successfully create the BOM root"
d194 2
a195 9
if [ ! -d "${PKG_NAME}.pkg/Contents/Root" ] ; then
    echo "ERROR: ${PKG_NAME}.pkg/Contents/Root could not be created"
    exit 1
fi

# fill the bom root
pax -rw "$ARCHIVE" "${PKG_NAME}.pkg/Contents/Root"
if [ $? != 0 ] ; then
    echo "ERROR: unable to successfully create the BOM root of $ARCHIVE"
a208 1
# remove the bom root
@


1.7
log
@create pax files in cpio format and strip the leading slash so that the stored archive loation is relative
@
text
@d181 19
a199 1
mkbom "$ARCHIVE" "${PKG_NAME}.pkg/Contents/Archive.bom"
d209 7
@


1.6
log
@root authorization and yes, it's required for the compat folks too
@
text
@d154 2
a155 1
pax -w -f "${PKG_NAME}.pkg/Contents/Archive.pax" "$ARCHIVE"
@


1.5
log
@ls file sizes are in bytes, we need kilobytes
@
text
@d129 1
a129 1
        <string>AdminAuthorization</string>
d228 1
a228 1
NeedsAuthorization NO
@


1.4
log
@cool, only missing a single quote char
@
text
@d203 1
@


1.3
log
@initial untested implementation that should generate an installer pkg that is compatible with both the old and new Installer
@
text
@d190 1
a190 1
NUM_FILES=`find "${ARCHIVE} -type f | wc | awk '{print $1}'`
@


1.2
log
@headers and footers
@
text
@d39 2
a40 1
# clean BRL-CAD installation.
d46 237
@


1.1
log
@initial stub script to make a package distribution
@
text
@d2 52
@

