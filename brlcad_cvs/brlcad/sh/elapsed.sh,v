head	14.13;
access;
symbols
	rel-7-10-4:14.13
	STABLE:14.13.0.2
	stable-branch:14.5
	rel-7-10-2:14.13
	rel-7-10-0:14.12
	rel-7-8-4:14.10
	rel-7-8-2:14.10
	rel-7-8-0:14.10
	trimnurbs-branch:14.10.0.2
	help:14.10
	temp_tag:14.9
	bobWinPort-20051223-freeze:14.8
	postmerge-20051223-bobWinPort:14.9
	premerge-20051223-bobWinPort:14.9
	rel-7-6-6:14.9
	rel-7-6-4:14.9
	rel-7-6-2:14.8
	rel-7-6-branch:14.8.0.6
	rel-7-6-0:14.8
	rel-7-4-2:14.8
	rel-7-4-branch:14.8.0.4
	bobWinPort:14.8.0.2
	rel-7-4-0:14.8
	rel-7-2-6:14.8
	rel-7-2-4:14.7
	rel-7-2-2:14.5
	rel-7-2-0:14.5
	rel-7-0-4:14.2
	rel-7-0-2:14.2
	rel-7-0-1:14.2
	opensource-post:14.2
	opensource-pre:11.3
	rel-7-0-branch:11.3.0.2
	rel-7-0:11.3;
locks; strict;
comment	@# @;


14.13
date	2007.05.05.00.35.21;	author brlcad;	state Exp;
branches;
next	14.12;

14.12
date	2007.01.26.23.32.26;	author brlcad;	state Exp;
branches;
next	14.11;

14.11
date	2007.01.20.13.57.25;	author brlcad;	state Exp;
branches;
next	14.10;

14.10
date	2006.01.18.06.46.11;	author brlcad;	state Exp;
branches;
next	14.9;

14.9
date	2005.10.22.17.36.02;	author brlcad;	state Exp;
branches;
next	14.8;

14.8
date	2005.05.16.01.34.09;	author brlcad;	state Exp;
branches
	14.8.6.1;
next	14.7;

14.7
date	2005.05.11.03.27.15;	author brlcad;	state Exp;
branches;
next	14.6;

14.6
date	2005.04.22.13.55.29;	author brlcad;	state Exp;
branches;
next	14.5;

14.5
date	2005.02.21.18.02.53;	author brlcad;	state Exp;
branches;
next	14.4;

14.4
date	2005.01.31.08.34.39;	author brlcad;	state Exp;
branches;
next	14.3;

14.3
date	2005.01.30.20.30.12;	author brlcad;	state Exp;
branches;
next	14.2;

14.2
date	2004.12.17.21.01.05;	author morrison;	state Exp;
branches;
next	14.1;

14.1
date	2004.11.16.19.42.12;	author morrison;	state Exp;
branches;
next	11.3;

11.3
date	2004.08.30.13.30.46;	author morrison;	state Exp;
branches;
next	11.2;

11.2
date	2004.07.26.17.30.46;	author morrison;	state Exp;
branches;
next	11.1;

11.1
date	2004.07.25.05.47.45;	author morrison;	state Exp;
branches;
next	;

14.8.6.1
date	2005.11.13.13.46.10;	author brlcad;	state Exp;
branches;
next	;


desc
@@


14.13
log
@credit authorship on our script
@
text
@#!/bin/sh
#                      E L A P S E D . S H
# BRL-CAD
#
# Copyright (c) 2004-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. The name of the author may not be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
###
#
# Compute the amount of time elapsed and format the results for
# printing.  Script takes three arguments: a number for the hour,
# minute, and seconds.  Presently does not support times that
# span days or multiple days.
#
# sh elapsed.sh 12 03 24
#   or
# some_date=`date`
# ..
# sh elapsed.sh $some_date
#
# Alternatively, the script can be used as a utility function in
# scripts.  With the --seconds argument, the number of seconds that
# have elapsed since the given date is output as a single number
# instead of "pretty printing" the elapsed time.  This is often useful
# for scripts that need to track elapsed time.  Another special mode
# is when you only pass a single number to the script, it is presumed
# to be an elapsed number of seconds that you simply wish to "pretty
# print".  The --seconds and single number mode complement each other.
#
# sh elapsed.sh --seconds $some_prev_date
#   or
# sh elapsed.sh 542
#   or
# sh elapsed.sh `sh elapsed.sh --seconds $some_prev_date`
#
# Author -
#   Christopher Sean Morrison
#
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.12 2007/01/26 23:32:26 brlcad Exp $ (BRL)

ARGS="$*"
ARG_1="$1"
ARG_2="$2"
ARG_4="$4"
CONFIG_TIME="$ARGS"

ONLY_SECONDS=no
case "x$ARG_1" in
    x-[sS]) ONLY_SECONDS=yes ; shift ;;
    x--[sS]) ONLY_SECONDS=yes ; shift ;;
    x-[sS][eE][cC][oO][nN][dD][sS]) ONLY_SECONDS=yes ; shift ;;
    x--[sS][eE][cC][oO][nN][dD][sS]) ONLY_SECONDS=yes ; shift ;;
    x-*) usage="Usage: $0 time"
	echo "$usage" 1>&2
	echo "Unrecognized option [$1]"
	exit 1
	;;
esac
if test "x$ONLY_SECONDS" = "xyes" ; then
    ARGS="$*"
    ARG_1="$1"
    ARG_2="$2"
    ARG_4="$4"
    CONFIG_TIME="$ARGS"
fi

# force locale setting to C so things like date output as expected
LC_ALL=C

# make sure an argument is given
if test "x$CONFIG_TIME" = "x" ; then
	usage="Usage: $0 time"
	echo "$usage" 1>&2
	exit 1
fi

# if there is no second argument, assume it's just the time
if test "x$ARG_2" = "x" ; then
	CONFIG_TIME="`echo $ARGS | tr : ' '`"
fi

# if there is a fourth, assume date format string
if test ! "x$ARG_4" = "x" ; then
	CONFIG_TIME="`echo $ARGS | awk '{print $4}' | tr : ' '`"
fi

# parse the end time and convert to a seconds count
post_conf_time="`date '+%H %M %S'`"
post_hour="`echo $post_conf_time | awk '{print $1}'`"
post_min="`echo $post_conf_time | awk '{print $2}'`"
post_sec="`echo $post_conf_time | awk '{print $3}'`"
hour_seconds_after="`expr $post_hour \* 60 \* 60`"
min_seconds_after="`expr $post_min \* 60`"
total_post="`expr $hour_seconds_after + $min_seconds_after + $post_sec`"

if test "x$CONFIG_TIME" = "x" ; then
    CONFIG_TIME="$post_conf_time"
fi

# parse the start time and convert to a seconds count
pre_hour="`echo $CONFIG_TIME | awk '{print $1}'`"
pre_min="`echo $CONFIG_TIME | awk '{print $2}'`"
pre_sec="`echo $CONFIG_TIME | awk '{print $3}'`"

if test "x$pre_sec" = "x" ; then
    if test "x$pre_min" = "x" ; then
	# presume single value in CONFIG_TIME is elapsed seconds
	if test ! "x$pre_hour" = "x" ; then
	   pre_sec="`expr $post_sec - $pre_hour`"
	   pre_hour=""
	fi
    fi
fi

if test "x$pre_hour" = "x" ; then
    pre_hour="$post_hour"
fi
if test "x$pre_min" = "x" ; then
    pre_min="$post_min"
fi
if test "x$pre_sec" = "x" ; then
    pre_sec="$post_sec"
fi

hour_seconds_before="`expr $pre_hour \* 60 \* 60`"
min_seconds_before="`expr $pre_min \* 60`"
total_pre="`expr $hour_seconds_before + $min_seconds_before + $pre_sec`"


# if the end time is smaller than the start time, we have gone back in
# time so assume that the clock turned over a day.
if test $total_post -lt $total_pre ; then
    total_post="`expr $total_post + 86400`"
fi

# break out the elapsed time into seconds, minutes, and hours
sec_elapsed="`expr $total_post - $total_pre`"
# echo sec_elapsed is $total_post - $total_pre 1>&2

# if we only need to report the number of seconds elapsed, then we're done
if test "x$ONLY_SECONDS" = "xyes" ; then
    echo "$sec_elapsed"
    exit 0
fi

min_elapsed="0"
if test ! "x$sec_elapsed" = "x0" ; then
	min_elapsed="`expr $sec_elapsed / 60`"
	sec_elapsed2="`expr $min_elapsed \* 60`"
	sec_elapsed="`expr $sec_elapsed - $sec_elapsed2`"
fi
hour_elapsed="0"
if test ! "x$min_elapsed" = "x0" ; then
	hour_elapsed="`expr $min_elapsed / 60`"
	min_elapsed2="`expr $hour_elapsed \* 60`"
	min_elapsed="`expr $min_elapsed - $min_elapsed2`"
fi

# generate a human-readable elapsed time message
time_elapsed=""
if test ! "x$hour_elapsed" = "x0" ; then
	if test "x$hour_elapsed" = "x1" ; then
	       time_elapsed="$hour_elapsed hour"
	else
	       time_elapsed="$hour_elapsed hours"
	fi
fi
if test ! "x$min_elapsed" = "x0" ; then
	if test ! "x$time_elapsed" = "x" ; then
	       time_elapsed="${time_elapsed}, "
	fi
	time_elapsed="${time_elapsed}${min_elapsed}"
	if test "x$min_elapsed" = "x1" ; then
	       time_elapsed="${time_elapsed} minute"
	else
	       time_elapsed="${time_elapsed} minutes"
	fi
fi
if test ! "x$sec_elapsed" = "x0" ; then
	if test ! "x$time_elapsed" = "x" ; then
		  time_elapsed="${time_elapsed}, "
	fi
	time_elapsed="${time_elapsed}${sec_elapsed}"
	if test "x$sec_elapsed" = "x1" ; then
	       time_elapsed="${time_elapsed} second"
	else
	       time_elapsed="${time_elapsed} seconds"
	fi
fi
if test "x$time_elapsed" = "x" ; then
	time_elapsed="0 seconds"
fi

# output the time elapsed
echo "$time_elapsed"

# Local Variables:
# mode: sh
# tab-width: 8
# sh-indentation: 4
# sh-basic-offset: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


14.12
log
@ws
@
text
@d64 4
a67 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.11 2007/01/20 13:57:25 brlcad Exp $ (BRL)
@


14.11
log
@update copyright to 2007
@
text
@d64 1
a64 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.10 2006/01/18 06:46:11 brlcad Exp $ (BRL)
d132 1
a132 1
        # presume single value in CONFIG_TIME is elapsed seconds
d134 2
a135 2
	    pre_sec="`expr $post_sec - $pre_hour`"
	    pre_hour=""
d158 1
a158 1
	total_post="`expr $total_post + 86400`"
d188 1
a188 1
		time_elapsed="$hour_elapsed hour"
d190 1
a190 1
		time_elapsed="$hour_elapsed hours"
d195 1
a195 1
		time_elapsed="${time_elapsed}, "
d199 1
a199 1
		time_elapsed="${time_elapsed} minute"
d201 1
a201 1
		time_elapsed="${time_elapsed} minutes"
d206 1
a206 1
		time_elapsed="${time_elapsed}, "
d210 1
a210 1
		time_elapsed="${time_elapsed} second"
d212 1
a212 1
		time_elapsed="${time_elapsed} seconds"
@


14.10
log
@update copyright to 2006
@
text
@d5 1
a5 1
# Copyright (c) 2004-2006 United States Government as represented by
d64 1
a64 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.9 2005/10/22 17:36:02 brlcad Exp $ (BRL)
@


14.9
log
@ws
@
text
@d5 1
a5 1
# Copyright (C) 2004-2005 United States Government as represented by
d64 1
a64 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.8 2005/05/16 01:34:09 brlcad Exp $ (BRL)
@


14.8
log
@if the script is passed a single number value, then treat it as the complement to the --seconds mode.  that single number will be presumed to be an elapsed number of seconds that the caller wants to have pretty-printed.  add header documentation describing these two new modes.
@
text
@d15 1
a15 1
# 2. Redistributions in binary form must reproduce the above 
d64 1
a64 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.7 2005/05/11 03:27:15 brlcad Exp $ (BRL)
@


14.8.6.1
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@d15 1
a15 1
# 2. Redistributions in binary form must reproduce the above
d64 1
a64 1
# $(#)$Header$ (BRL)
@


14.7
log
@if the start and end times are actually equal, elapsed needs to be zero seconds not 86400.  more likely that we ran elapsed within a second than it is that it took exactly a day to the second..
@
text
@d49 16
a64 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.6 2005/04/22 13:55:29 brlcad Exp $ (BRL)
d129 11
@


14.6
log
@add support for an optional --seconds argument that makes the elapsed script simply report the number of total seconds that have elapsed instead of the longer human-readable string.  intend to use this feature with the benchmark suite
@
text
@d49 1
a49 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.5 2005/02/21 18:02:53 brlcad Exp $ (BRL)
d131 1
a131 1
if test $total_post -le $total_pre ; then
@


14.5
log
@force locale setting to C so things like date output as expected
@
text
@d44 4
d49 1
a49 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.4 2005/01/31 08:34:39 brlcad Exp $ (BRL)
d52 1
d57 20
d137 8
@


14.4
log
@should prevent error messages on malformed input better.  args are stashed before proceeding now.  checks are made to handle if we were actually passed a familiar date string, defaulting to the current time otherwise.
@
text
@d45 1
a45 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.3 2005/01/30 20:30:12 brlcad Exp $ (BRL)
d52 3
@


14.3
log
@update copyright to 2005
@
text
@d45 1
a45 1
# $(#)$Header: /cvsroot/brlcad/brlcad/sh/elapsed.sh,v 14.2 2004/12/17 21:01:05 morrison Exp $ (BRL)
d47 4
a50 1
CONFIG_TIME="$*"
d60 2
a61 2
if test "x$2" = "x" ; then
	CONFIG_TIME="`echo $* | tr : ' '`"
d65 15
a79 2
if test ! "x$4" = "x" ; then
	CONFIG_TIME="`echo $* | awk '{print $4}' | tr : ' '`"
a82 1
time_elapsed=""
d86 10
a99 8
# parse the end time and convert to a seconds count
post_conf_time="`date '+%H %M %S'`"
post_hour="`echo $post_conf_time | awk '{print $1}'`"
post_min="`echo $post_conf_time | awk '{print $2}'`"
post_sec="`echo $post_conf_time | awk '{print $3}'`"
hour_seconds_after="`expr $post_hour \* 60 \* 60`"
min_seconds_after="`expr $post_min \* 60`"
total_post="`expr $hour_seconds_after + $min_seconds_after + $post_sec`"
d123 1
@


14.2
log
@assignment of copyright and BSD license
@
text
@d5 2
a6 2
# Copyright (c) 2004 United States Government as represented by the
# U.S. Army Research Laboratory.
d45 1
a45 1
# $(#)$Header: /cvs/brlcad/sh/elapsed.sh,v 14.1 2004/11/16 19:42:12 morrison Exp $ (BRL)
@


14.1
log
@dawn of a new revision.  it shall be numbered 14 to match release 7.  begin the convergence by adding emacs/vi local variable footer blocks to encourage consistent formatting.
@
text
@d2 35
a36 1
#  e l a p s e d . s h
d45 1
a45 1
# $(#)$Header: /cvs/brlcad/sh/elapsed.sh,v 11.3 2004/08/30 13:30:46 morrison Exp $ (BRL)
@


11.3
log
@avoid going back in time.  if the elapsed time is negative, the time stamp was from the previous day so account for it. (still only supports up to 24-hour timeframes)
@
text
@d11 1
a11 1
# $(#)$Header: /cvs/brlcad/sh/elapsed.sh,v 11.2 2004/07/26 17:30:46 morrison Exp $ (BRL)
d107 9
@


11.2
log
@solaris shell does not support the bang, make test handle it
@
text
@d11 1
a11 1
# $(#)$Header: /n/xoff/cvs/brlcad/sh/elapsed.sh,v 11.1 2004/07/25 05:47:45 morrison Exp $ (BRL)
d32 1
d41 1
d50 7
d71 1
@


11.1
log
@initial script for computing time elapsed since some timestamp.  the result is a pretty-printed string in the form of hours, minutes, seconds taking into account proper printing of count names (1 second vs 1 seconds) and removal of 0 times.  script does not presently support date/times that span days or multiple days.
@
text
@d11 1
a11 1
# $(#)$Header: $ (BRL)
d28 1
a28 1
if ! test "x$4" = "x" ; then
d50 1
a50 1
if ! test "x$sec_elapsed" = "x0" ; then
d56 1
a56 1
if ! test "x$min_elapsed" = "x0" ; then
d62 1
a62 1
if ! test "x$hour_elapsed" = "x0" ; then
d69 2
a70 2
if ! test "x$min_elapsed" = "x0" ; then
	if ! test "x$time_elapsed" = "x" ; then
d80 2
a81 2
if ! test "x$sec_elapsed" = "x0" ; then
	if ! test "x$time_elapsed" = "x" ; then
@

