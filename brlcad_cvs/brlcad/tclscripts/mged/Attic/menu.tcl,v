head	1.27;
access;
symbols
	ansi-20040405-merged:1.26
	postmerge-20040405-ansi:1.26
	premerge-20040404-ansi:1.26
	postmerge-autoconf:1.26
	autoconf-freeze:1.26
	premerge-autoconf:1.26
	postmerge-20040315-windows:1.26
	premerge-20040315-windows:1.26
	windows-20040315-freeze:1.26
	autoconf-20031203:1.26
	autoconf-20031202:1.26
	autoconf-branch:1.26.0.14
	phong-branch:1.26.0.12
	photonmap-branch:1.26.0.10
	rel-6-1-DP:1.26
	windows-branch:1.26.0.8
	rel-6-0-2:1.26
	ansi-branch:1.26.0.6
	rel-6-0-1-branch:1.26.0.4
	hartley-6-0-post:1.26
	hartley-6-0-pre:1.26
	rel-6-0-1:1.26
	rel-6-0:1.26
	rel-5-4:1.26
	offsite-5-3-pre:1.26
	rel-5-3:1.26
	rel-5-2:1.26
	rel-5-1-branch:1.26.0.2
	rel-5-1:1.26
	rel-5-0:1.26
	rel-5-0-beta:1.26
	rel-4-5:1.7;
locks; strict;
comment	@# @;


1.27
date	2004.05.21.16.41.27;	author morrison;	state dead;
branches;
next	1.26;

1.26
date	99.05.06.17.34.13;	author bparker;	state Exp;
branches;
next	1.25;

1.25
date	99.05.03.17.28.55;	author bparker;	state Exp;
branches;
next	1.24;

1.24
date	99.02.22.18.14.24;	author bparker;	state Exp;
branches;
next	1.23;

1.23
date	99.02.22.17.46.08;	author bparker;	state Exp;
branches;
next	1.22;

1.22
date	99.02.17.19.42.59;	author bparker;	state Exp;
branches;
next	1.21;

1.21
date	99.01.26.19.05.19;	author bparker;	state Exp;
branches;
next	1.20;

1.20
date	99.01.19.22.31.30;	author bparker;	state Exp;
branches;
next	1.19;

1.19
date	98.08.13.12.44.45;	author bparker;	state Exp;
branches;
next	1.18;

1.18
date	98.07.15.18.42.00;	author bparker;	state Exp;
branches;
next	1.17;

1.17
date	98.07.15.16.12.05;	author bparker;	state Exp;
branches;
next	1.16;

1.16
date	98.06.30.18.07.05;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	98.06.15.19.28.24;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	98.05.15.14.49.24;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	98.04.27.15.58.37;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	98.04.23.13.46.30;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	98.04.01.22.23.01;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	98.03.20.22.47.49;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	98.03.13.22.44.29;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	98.03.06.22.53.01;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	97.11.06.19.56.31;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	97.09.29.16.21.50;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	97.07.17.20.42.35;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	97.05.08.18.30.47;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	97.04.18.13.22.09;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	96.07.09.19.47.27;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	95.08.03.21.47.04;	author gdurf;	state Exp;
branches;
next	;


desc
@Tk code to display button menus
@


1.27
log
@moved to src/tclscripts/
@
text
@#
# Description -
#	The routines herein are used to implement traditional MGED
#	menus in Tcl/Tk.
#
# Modifications -
#	Bob Parker:
#               *- use grid instead of pack
#		*- Generalized the code to accommodate multiple instances
#		   of the classic MGED "Button Menu" interface.

proc mmenu_set { id i } {
    global mmenu

    set w .mmenu$id

    if {![winfo exists $w]} {
	return
    }

    set result [catch {mmenu_get $i} menu]
    if {$result != 0} {
	return
    }

    set mmenu($id,$i) $menu

    if { [llength $menu]<=0 } {
	grid forget $w.f$i
	return
    }

    $w.f$i.l delete 0 end
    foreach item $menu {
	$w.f$i.l insert end $item
    }
    $w.f$i.l configure -height [llength $menu]

    set row [expr $i + 1]
    grid $w.f$i -row $row -sticky nsew
}

proc mmenu_init { id } {
    global mmenu
    global mged_gui
    global mged_display

    cmd_win set $id
    set w .mmenu$id
    catch { destroy $w }
    toplevel $w -screen $mged_gui($id,screen)

    label $w.state -textvariable mged_display(state)
    grid $w.state -row 0
    
    set mmenu($id,num) 3

    for { set i 0 } { $i < $mmenu($id,num) } { incr i } {
	frame $w.f$i -relief raised -bd 1
	listbox $w.f$i.l -bd 2 -exportselection false
        grid $w.f$i.l -sticky nsew -row 0 -column 0
	grid columnconfigure $w.f$i 0 -weight 1
	grid rowconfigure $w.f$i 0 -weight 1

	bind $w.f$i.l <Button-1> "handle_select %W %y; mged_press $id %W; break"
	bind $w.f$i.l <Button-2> "handle_select %W %y; mged_press $id %W; break"

	mmenu_set $id $i
    }

    grid columnconfigure $w 0 -weight 1
    grid rowconfigure $w 1 -weight 1
    grid rowconfigure $w 2 -weight 1
    grid rowconfigure $w 3 -weight 1

    wm title $w "MGED Button Menu ($id)"
    wm protocol $w WM_DELETE_WINDOW "toggle_button_menu $id"
    wm resizable $w 0 0

    return
}

proc mged_press { id w } {
    cmd_win set $id
    press [$w get [$w curselection]]
}

proc reconfig_mmenu { id } {
    global mmenu

    if {![winfo exists .mmenu$id]} {
	return
    }

    set w .mmenu$id

    for { set i 0 } { $i < $mmenu($id,num) } { incr i } {
	mmenu_set $id $i
    }
}
@


1.26
log
@*- removed edit menu stuff
@
text
@@


1.25
log
@*- add reset button to edit menu
@
text
@d8 3
a10 4
#		*- Generalized the code to accommodate multiple instances of the
#		   classic MGED "Button Menu" interface.
#		*- Added procs to implement edit menus
#
a98 266
    }
}

proc do_arb_edit_menu { type menu1 menu2 menu3 } {
    global mged_players
    global mged_gui
    global mged_default
    global edit_type

    if ![info exists mged_players] {
	return
    }

    set edit_type "none of above"
    foreach id $mged_players {
	.$id.menubar.settings.transform entryconfigure 2 -state normal
	set mged_gui($id,transform) "e"
	set_transform $id

	.$id.menubar.settings.coord entryconfigure 2 -state normal
	set mged_gui($id,coords) "o"
	mged_apply $id "set coords $mged_gui($id,coords)"

	.$id.menubar.settings.origin entryconfigure 3 -state normal
	set mged_gui($id,rotate_about) "k"
	mged_apply $id "set rotate_about $mged_gui($id,rotate_about)"

	.$id.menubar.edit entryconfigure 0 -state disabled
	.$id.menubar.edit entryconfigure 1 -state disabled
#	.$id.menubar.edit entryconfigure 2 -state disabled
#	.$id.menubar.edit entryconfigure 3 -state disabled
#	.$id.menubar.edit entryconfigure 4 -state disabled

	.$id.menubar.edit insert 0 cascade -label "move edges" \
		-menu .$id.menubar.edit.mvedges
	.$id.menubar.edit insert 1 cascade -label "move faces" \
		-menu .$id.menubar.edit.mvfaces
	.$id.menubar.edit insert 2 cascade -label "rotate faces" \
		-menu .$id.menubar.edit.rotfaces
	.$id.menubar.edit insert 3 separator
	.$id.menubar.edit insert 4 radiobutton -variable edit_type \
		-label "Rotate" -underline 0 -command "press srot; \
		set mged_gui($id,transform) e; set_transform $id"
	.$id.menubar.edit insert 5 radiobutton -variable edit_type \
		-label "Translate" -underline 0 -command "press sxy; \
		set mged_gui($id,transform) e; set_transform $id"
	.$id.menubar.edit insert 6 radiobutton -variable edit_type \
		-label "Scale" -underline 0 -command "press sscale; \
		set mged_gui($id,transform) e; set_transform $id"
	.$id.menubar.edit insert 7 radiobutton -variable edit_type \
		 -label "none of above" -command "press \"edit menu\"; \
		 set mged_gui($id,transform) e; set_transform $id"
	.$id.menubar.edit insert 8 separator
	.$id.menubar.edit insert 9 command -label "Reject" -underline 0 \
		-command "press reject"
	.$id.menubar.edit insert 10 command -label "Accept" -underline 0 \
		-command "press accept"
	.$id.menubar.edit insert 11 command -label "Reset" -underline 0 \
		-command "reset_edit_solid"
	.$id.menubar.edit insert 12 separator

	menu .$id.menubar.edit.mvedges -tearoff $mged_default(tearoff_menus)
	foreach item $menu1 {
	    if {$item != "RETURN"} {
		.$id.menubar.edit.mvedges add radiobutton -variable edit_type -label $item \
			-command "press \"edit menu\"; press \"move edges\"; \
			press \"$item\"; set mged_gui($id,transform) e; set_transform $id"
	    }
	}

	menu .$id.menubar.edit.mvfaces -tearoff $mged_default(tearoff_menus)
	foreach item $menu2 {
	    if {$item != "RETURN"} {
		.$id.menubar.edit.mvfaces add radiobutton -variable edit_type -label $item \
			-command "press \"edit menu\"; press \"move faces\"; \
			press \"$item\"; set mged_gui($id,transform) e; set_transform $id"
	    }
	}
    
	menu .$id.menubar.edit.rotfaces -tearoff $mged_default(tearoff_menus)
	foreach item $menu3 {
	    if {$item != "RETURN"} {
		.$id.menubar.edit.rotfaces add radiobutton -variable edit_type -label $item \
			-command "press \"edit menu\"; press \"rotate faces\"; \
			press \"$item\"; set mged_gui($id,transform) e; set_transform $id"
	    }
	}
    }
}

proc do_edit_menu { type menu1 } {
    global mged_display
    global mged_players
    global mged_gui
    global edit_type

    if ![info exists mged_players] {
	return
    }

    set edit_type "none of above"
    foreach id $mged_players {
	.$id.menubar.settings.transform entryconfigure 2 -state normal
	set mged_gui($id,transform) "e"
	set_transform $id

	.$id.menubar.settings.coord entryconfigure 2 -state normal
	set mged_gui($id,coords) "o"
	mged_apply $id "set coords $mged_gui($id,coords)"

	.$id.menubar.settings.origin entryconfigure 3 -state normal
	set mged_gui($id,rotate_about) "k"
	mged_apply $id "set rotate_about $mged_gui($id,rotate_about)"

	.$id.menubar.edit entryconfigure 0 -state disabled
	.$id.menubar.edit entryconfigure 1 -state disabled
#	.$id.menubar.edit entryconfigure 2 -state disabled
#	.$id.menubar.edit entryconfigure 3 -state disabled
#	.$id.menubar.edit entryconfigure 4 -state disabled

	set i 0
	foreach item $menu1 {
	    if {$item != "RETURN"} {
		.$id.menubar.edit insert $i radiobutton -variable edit_type \
			-label $item -command "press \"edit menu\"; press \"$item\"; \
			set mged_gui($id,transform) e; set_transform $id"
		incr i
	    }
	}

	if {[llength $menu1]} {
	    .$id.menubar.edit insert $i separator
	    incr i
	}

	if {$mged_display(state) == "SOL EDIT"} {
	    set reset_cmd "reset_edit_solid"

	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Rotate" -underline 0 -command "press srot; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Translate" -underline 0 -command "press sxy; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Scale" -underline 0 -command "press sscale; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "none of above" -command "set edit_solid_flag 0; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i separator
	    incr i
	} else {
	    set reset_cmd "reset_edit_matrix"

	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Scale" -command "press \"Scale\"; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "X move" -command "press \"X move\"; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Y move" -command "press \"Y move\"; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "XY move" -command "press \"XY move\"; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Rotate" -command "press \"Rotate\"; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Scale X" -command "press \"Scale X\"; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Scale Y" -command "press \"Scale Y\"; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "Scale Z" -command "press \"Scale Z\"; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i radiobutton -variable edit_type \
		    -label "none of above" -command "set edit_object_flag 0; \
		    set mged_gui($id,transform) e; set_transform $id"
	    incr i
	    .$id.menubar.edit insert $i separator
	    incr i
	}

	.$id.menubar.edit insert $i command -label "Reject" -underline 0 \
		-command "press reject"
	incr i
	.$id.menubar.edit insert $i command -label "Accept" -underline 0 \
		-command "press accept"
	incr i
	.$id.menubar.edit insert $i command -label "Reset" -underline 0 \
		-command $reset_cmd

	incr i
	.$id.menubar.edit insert $i separator
    }
}

proc undo_edit_menu {} {
    global mged_players
    global mged_gui

    if ![info exists mged_players] {
	return
    }

    foreach id $mged_players {
	destroy_edit_info $id

	while {1} {
	    if {[.$id.menubar.edit type 0] == "separator"} {
		.$id.menubar.edit delete 0
		continue
	    }

	    if {[.$id.menubar.edit entrycget 0 -label] != "Solid Selection..."} {
		.$id.menubar.edit delete 0
	    } else {
		break
	    }
	}

	if {[winfo exists .$id.menubar.edit.mvedges]} {
	    destroy .$id.menubar.edit.mvedges
	    destroy .$id.menubar.edit.mvfaces
	    destroy .$id.menubar.edit.rotfaces
	}

	.$id.menubar.edit entryconfigure 0 -state normal
	.$id.menubar.edit entryconfigure 1 -state normal
#	.$id.menubar.edit entryconfigure 2 -state normal
#	.$id.menubar.edit entryconfigure 3 -state normal
#	.$id.menubar.edit entryconfigure 4 -state normal

	.$id.menubar.settings.transform entryconfigure 2 -state disabled
	if {$mged_gui($id,transform) == "e"} {
	    set mged_gui($id,transform) "v"
	    set_transform $id
	}

	.$id.menubar.settings.coord entryconfigure 2 -state disabled
	if {$mged_gui($id,coords) == "o"} {
	    set mged_gui($id,coords) "v"
	    mged_apply $id "set coords $mged_gui($id,coords)"
	}

	.$id.menubar.settings.origin entryconfigure 3 -state disabled
	if {$mged_gui($id,rotate_about) == "k"} {
	    set mged_gui($id,rotate_about) "v"
	    mged_apply $id "set rotate_about $mged_gui($id,rotate_about)"
	}
@


1.24
log
@*- using Tk's "grid" geometry manager instead of "pack"
@
text
@d157 3
a159 1
	.$id.menubar.edit insert 11 separator
d236 2
d257 2
a300 1

d304 3
@


1.23
log
@*- modified do_edit_menu to fix bug that jra uncovered.
@
text
@d30 1
a30 1
	pack forget $w.f$i
d40 2
a41 16
    if { [winfo ismapped $w.f$i]==0 } {
	set packcmd "pack $w.f$i -side top -fill both -expand yes"
	for { set scan [expr $i-1] } { $scan >= 0 } { incr scan -1 } {
	    if { [llength $mmenu($id,$scan)]>0 } {
		lappend packcmd -after $w.f$scan
		break
	    }
	}
	for { set scan [expr $i+1] } { $scan < $mmenu($id,num) } { incr scan } {
	    if { [llength $mmenu($id,$scan)]>0 } then {
		lappend packcmd -before $w.f$scan
		break
	    }
	}
	eval $packcmd
    }
d55 1
a55 1
    pack $w.state -side top
d62 3
a64 1
        pack $w.f$i.l -side left -fill both -expand yes
d71 5
@


1.22
log
@*- mods to mmenu_set, mmenu_init and reconfig_mmenu
@
text
@d229 1
a229 1
			-label $item -command "press \"$item\"; \
@


1.21
log
@*- use cmd_win instead of cmd_set
@
text
@d13 1
a13 1
proc mmenu_set { w id i menu } {
d16 2
d22 5
a57 1

d71 1
a71 2
    set i 0
    set mmenu($id,num) 0
d73 1
a73 3
    foreach menu [mmenu_get] {
	incr mmenu($id,num)
	
d81 1
a81 3
	mmenu_set $w $id $i $menu

	incr i
a103 17
    for {set i 0} {$i < 3} {incr i} {
	catch { destroy $w.f$i } 
    }

    set i 0
    set mmenu($id,num) 0
    foreach menu [mmenu_get] {
	incr mmenu($id,num)
	
	frame $w.f$i -relief raised -bd 1
	listbox $w.f$i.l -bd 2 -exportselection false
        pack $w.f$i.l -side left -fill both -expand yes

	bind $w.f$i.l <Button-1> "handle_select %W %y; mged_press $id %W; break"
	bind $w.f$i.l <Button-2> "handle_select %W %y; mged_press $id %W; break"

	mmenu_set $w $id $i $menu
d105 2
a106 1
	incr i
@


1.20
log
@*- cleanup variables
@
text
@d57 1
a57 1
    cmd_set $id
d91 1
a91 1
    cmd_set $id
@


1.19
log
@*** empty log message ***
@
text
@d2 4
a15 2
#    do_edit_pulldown $id $i $menu

d54 1
a54 1
    global player_screen
d60 1
a60 1
    toplevel $w -screen $player_screen($id)
d127 2
a128 1
    global mged_top
a129 4
    global mged_transform
    global mged_coords
    global mged_rotate_about
    global do_tearoffs
d138 1
a138 1
	set mged_transform($id) "e"
d142 2
a143 2
	set mged_coords($id) "o"
	mged_apply $id "set coords $mged_coords($id)"
d146 2
a147 2
	set mged_rotate_about($id) "k"
	mged_apply $id "set rotate_about $mged_rotate_about($id)"
d164 1
a164 1
		set mged_transform($id) e; set_transform $id"
d167 1
a167 1
		set mged_transform($id) e; set_transform $id"
d170 1
a170 1
		set mged_transform($id) e; set_transform $id"
d173 1
a173 1
		 set mged_transform($id) e; set_transform $id"
d181 1
a181 1
	menu .$id.menubar.edit.mvedges -tearoff $do_tearoffs
d186 1
a186 1
			press \"$item\"; set mged_transform($id) e; set_transform $id"
d190 1
a190 1
	menu .$id.menubar.edit.mvfaces -tearoff $do_tearoffs
d195 1
a195 1
			press \"$item\"; set mged_transform($id) e; set_transform $id"
d199 1
a199 1
	menu .$id.menubar.edit.rotfaces -tearoff $do_tearoffs
d204 1
a204 1
			press \"$item\"; set mged_transform($id) e; set_transform $id"
d213 1
a213 1
    global mged_top
a214 3
    global mged_transform
    global mged_coords
    global mged_rotate_about
d223 1
a223 1
	set mged_transform($id) "e"
d227 2
a228 2
	set mged_coords($id) "o"
	mged_apply $id "set coords $mged_coords($id)"
d231 2
a232 2
	set mged_rotate_about($id) "k"
	mged_apply $id "set rotate_about $mged_rotate_about($id)"
d245 1
a245 1
			set mged_transform($id) e; set_transform $id"
d258 1
a258 1
		    set mged_transform($id) e; set_transform $id"
d262 1
a262 1
		    set mged_transform($id) e; set_transform $id"
d266 1
a266 1
		    set mged_transform($id) e; set_transform $id"
d270 1
a270 1
		    set mged_transform($id) e; set_transform $id"
d277 1
a277 1
		    set mged_transform($id) e; set_transform $id"
d281 1
a281 1
		    set mged_transform($id) e; set_transform $id"
d285 1
a285 1
		    set mged_transform($id) e; set_transform $id"
d289 1
a289 1
		    set mged_transform($id) e; set_transform $id"
d293 1
a293 1
		    set mged_transform($id) e; set_transform $id"
d297 1
a297 1
		    set mged_transform($id) e; set_transform $id"
d301 1
a301 1
		    set mged_transform($id) e; set_transform $id"
d305 1
a305 1
		    set mged_transform($id) e; set_transform $id"
d309 1
a309 1
		    set mged_transform($id) e; set_transform $id"
d329 1
a329 4
    global mged_top
    global mged_transform
    global mged_coords
    global mged_rotate_about
d364 2
a365 2
	if {$mged_transform($id) == "e"} {
	    set mged_transform($id) "v"
d370 3
a372 3
	if {$mged_coords($id) == "o"} {
	    set mged_coords($id) "v"
	    mged_apply $id "set coords $mged_coords($id)"
d376 3
a378 3
	if {$mged_rotate_about($id) == "k"} {
	    set mged_rotate_about($id) "v"
	    mged_apply $id "set rotate_about $mged_rotate_about($id)"
@


1.18
log
@*- update undo_edit_menu
@
text
@a137 2
	post_edit_info $id $type

d152 3
a154 2
	.$id.menubar.edit entryconfigure 2 -state disabled
	.$id.menubar.edit entryconfigure 3 -state disabled
a225 2
	post_edit_info $id $type

d366 3
a368 2
	.$id.menubar.edit entryconfigure 2 -state normal
	.$id.menubar.edit entryconfigure 3 -state normal
a386 18
    }
}

proc post_edit_info { id type } {
    global debug_edit_info_type
    global debug_edit_info_form

    set result [catch { db form $type } form]

    set debug_edit_info_type $type
    set debug_edit_info_form $form

    if $result {
	# form does not exist for this type, so just display info
	build_edit_info $id
    } else {
	# eventually allow edits -- for now just display info
	build_edit_info $id
@


1.17
log
@*** empty log message ***
@
text
@d243 1
a243 1
	.$id.menubar.edit entryconfigure 2 -state disabled
d245 1
d354 1
a354 1
	    if {[.$id.menubar.edit entrycget 0 -label] != "Solid..."} {
a408 1

@


1.16
log
@*- mods to do_edit_menu and do_arb_edit_menu
@
text
@d3 4
a6 3
#        (Bob Parker):
#             Generalized the code to accommodate multiple instances of the
#             user interface.
d123 1
a123 1
proc do_arb_edit_menu { menu1 menu2 menu3 } {
d138 1
a138 1
	build_edit_info $id
d212 1
a212 1
proc do_edit_menu { menu1 } {
d227 1
a227 1
	build_edit_info $id
d390 19
@


1.15
log
@*- append "break" to bindings to prevent further processing
@
text
@d164 2
a165 1
		-label "Rotate" -underline 0 -command "press srot"
d167 2
a168 1
		-label "Translate" -underline 0 -command "press sxy"
d170 2
a171 1
		-label "Scale" -underline 0 -command "press sscale"
d173 2
a174 1
		 -label "none of above" -command "press \"edit menu\""
d187 1
a187 1
			press \"$item\""
d196 1
a196 1
			press \"$item\""
d205 1
a205 1
			press \"$item\""
d249 2
a250 1
			-label $item -command "press \"$item\""
d262 2
a263 1
		    -label "Rotate" -underline 0 -command "press srot"
d266 2
a267 1
		    -label "Translate" -underline 0 -command "press sxy"
d270 2
a271 1
		    -label "Scale" -underline 0 -command "press sscale"
d274 2
a275 1
		    -label "none of above" -command "set edit_solid_flag 0"
d281 2
a282 1
		    -label "Scale" -command "press \"Scale\""
d285 2
a286 1
		    -label "X move" -command "press \"X move\""
d289 2
a290 1
		    -label "Y move" -command "press \"Y move\""
d293 2
a294 1
		    -label "XY move" -command "press \"XY move\""
d297 2
a298 1
		    -label "Rotate" -command "press \"Rotate\""
d301 2
a302 1
		    -label "Scale X" -command "press \"Scale X\""
d305 2
a306 1
		    -label "Scale Y" -command "press \"Scale Y\""
d309 2
a310 1
		    -label "Scale Z" -command "press \"Scale Z\""
d313 2
a314 1
		    -label "none of above" -command "set edit_object_flag 0"
@


1.14
log
@checkin for pjt/jra demo
@
text
@d72 2
a73 2
	bind $w.f$i.l <Button-1> "handle_select %W %y; mged_press $id %W"
	bind $w.f$i.l <Button-2> "handle_select %W %y; mged_press $id %W"
d113 2
a114 2
	bind $w.f$i.l <Button-1> "handle_select %W %y; mged_press $id %W"
	bind $w.f$i.l <Button-2> "handle_select %W %y; mged_press $id %W"
@


1.13
log
@mods to menu names
@
text
@d334 1
a334 1
	    if {[.$id.menubar.edit entrycget 0 -label] != "Solid"} {
@


1.12
log
@changed some names
@
text
@d139 1
a139 1
	.$id.settings.m.cm_transform entryconfigure 2 -state normal
d143 1
a143 1
	.$id.settings.m.cm_coord entryconfigure 2 -state normal
d147 1
a147 1
	.$id.settings.m.cm_origin entryconfigure 3 -state normal
d151 13
a163 13
	.$id.edit.m entryconfigure 0 -state disabled
	.$id.edit.m entryconfigure 1 -state disabled
	.$id.edit.m entryconfigure 2 -state disabled
	.$id.edit.m entryconfigure 3 -state disabled

	.$id.edit.m insert 0 cascade -label "move edges" \
		-menu .$id.edit.m.cm_mvedges
	.$id.edit.m insert 1 cascade -label "move faces" \
		-menu .$id.edit.m.cm_mvfaces
	.$id.edit.m insert 2 cascade -label "rotate faces" \
		-menu .$id.edit.m.cm_rotfaces
	.$id.edit.m insert 3 separator
	.$id.edit.m insert 4 radiobutton -variable edit_type \
d165 1
a165 1
	.$id.edit.m insert 5 radiobutton -variable edit_type \
d167 1
a167 1
	.$id.edit.m insert 6 radiobutton -variable edit_type \
d169 1
a169 1
	.$id.edit.m insert 7 radiobutton -variable edit_type \
d171 2
a172 2
	.$id.edit.m insert 8 separator
	.$id.edit.m insert 9 command -label "Reject" -underline 0 \
d174 1
a174 1
	.$id.edit.m insert 10 command -label "Accept" -underline 0 \
d176 1
a176 1
	.$id.edit.m insert 11 separator
d178 1
a178 1
	menu .$id.edit.m.cm_mvedges -tearoff $do_tearoffs
d181 1
a181 1
		.$id.edit.m.cm_mvedges add radiobutton -variable edit_type -label $item \
d187 1
a187 1
	menu .$id.edit.m.cm_mvfaces -tearoff $do_tearoffs
d190 1
a190 1
		.$id.edit.m.cm_mvfaces add radiobutton -variable edit_type -label $item \
d196 1
a196 1
	menu .$id.edit.m.cm_rotfaces -tearoff $do_tearoffs
d199 1
a199 1
		.$id.edit.m.cm_rotfaces add radiobutton -variable edit_type -label $item \
d224 1
a224 1
	.$id.settings.m.cm_transform entryconfigure 2 -state normal
d228 1
a228 1
	.$id.settings.m.cm_coord entryconfigure 2 -state normal
d232 1
a232 1
	.$id.settings.m.cm_origin entryconfigure 3 -state normal
d236 4
a239 4
	.$id.edit.m entryconfigure 0 -state disabled
	.$id.edit.m entryconfigure 1 -state disabled
	.$id.edit.m entryconfigure 2 -state disabled
#	.$id.edit.m entryconfigure 3 -state disabled
d244 1
a244 1
		.$id.edit.m insert $i radiobutton -variable edit_type \
d251 1
a251 1
	    .$id.edit.m insert $i separator
d256 1
a256 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d259 1
a259 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d262 1
a262 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d265 1
a265 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d268 1
a268 1
	    .$id.edit.m insert $i separator
d271 1
a271 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d274 1
a274 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d277 1
a277 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d280 1
a280 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d283 1
a283 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d286 1
a286 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d289 1
a289 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d292 1
a292 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d295 1
a295 1
	    .$id.edit.m insert $i radiobutton -variable edit_type \
d298 1
a298 1
	    .$id.edit.m insert $i separator
d302 1
a302 1
	.$id.edit.m insert $i command -label "Reject" -underline 0 \
d306 1
a306 1
	.$id.edit.m insert $i command -label "Accept" -underline 0 \
d310 1
a310 1
	.$id.edit.m insert $i separator
d329 2
a330 2
	    if {[.$id.edit.m type 0] == "separator"} {
		.$id.edit.m delete 0
d334 2
a335 2
	    if {[.$id.edit.m entrycget 0 -label] != "Solid"} {
		.$id.edit.m delete 0
d341 4
a344 4
	if {[winfo exists .$id.edit.m.cm_mvedges]} {
	    destroy .$id.edit.m.cm_mvedges
	    destroy .$id.edit.m.cm_mvfaces
	    destroy .$id.edit.m.cm_rotfaces
d347 4
a350 4
	.$id.edit.m entryconfigure 0 -state normal
	.$id.edit.m entryconfigure 1 -state normal
	.$id.edit.m entryconfigure 2 -state normal
	.$id.edit.m entryconfigure 3 -state normal
d352 1
a352 1
	.$id.settings.m.cm_transform entryconfigure 2 -state disabled
d358 1
a358 1
	.$id.settings.m.cm_coord entryconfigure 2 -state disabled
d364 1
a364 1
	.$id.settings.m.cm_origin entryconfigure 3 -state disabled
@


1.11
log
@*- mods to automatically build/destroy the edit_info window
	based on the edit state
@
text
@d139 1
a139 1
	.$id.m.settings.m.cm_transform entryconfigure 2 -state normal
d143 1
a143 1
	.$id.m.settings.m.cm_coord entryconfigure 2 -state normal
d147 1
a147 1
	.$id.m.settings.m.cm_origin entryconfigure 3 -state normal
d151 13
a163 13
	.$id.m.edit.m entryconfigure 0 -state disabled
	.$id.m.edit.m entryconfigure 1 -state disabled
	.$id.m.edit.m entryconfigure 2 -state disabled
	.$id.m.edit.m entryconfigure 3 -state disabled

	.$id.m.edit.m insert 0 cascade -label "move edges" \
		-menu .$id.m.edit.m.cm_mvedges
	.$id.m.edit.m insert 1 cascade -label "move faces" \
		-menu .$id.m.edit.m.cm_mvfaces
	.$id.m.edit.m insert 2 cascade -label "rotate faces" \
		-menu .$id.m.edit.m.cm_rotfaces
	.$id.m.edit.m insert 3 separator
	.$id.m.edit.m insert 4 radiobutton -variable edit_type \
d165 1
a165 1
	.$id.m.edit.m insert 5 radiobutton -variable edit_type \
d167 1
a167 1
	.$id.m.edit.m insert 6 radiobutton -variable edit_type \
d169 1
a169 1
	.$id.m.edit.m insert 7 radiobutton -variable edit_type \
d171 2
a172 2
	.$id.m.edit.m insert 8 separator
	.$id.m.edit.m insert 9 command -label "Reject" -underline 0 \
d174 1
a174 1
	.$id.m.edit.m insert 10 command -label "Accept" -underline 0 \
d176 1
a176 1
	.$id.m.edit.m insert 11 separator
d178 1
a178 1
	menu .$id.m.edit.m.cm_mvedges -tearoff $do_tearoffs
d181 1
a181 1
		.$id.m.edit.m.cm_mvedges add radiobutton -variable edit_type -label $item \
d187 1
a187 1
	menu .$id.m.edit.m.cm_mvfaces -tearoff $do_tearoffs
d190 1
a190 1
		.$id.m.edit.m.cm_mvfaces add radiobutton -variable edit_type -label $item \
d196 1
a196 1
	menu .$id.m.edit.m.cm_rotfaces -tearoff $do_tearoffs
d199 1
a199 1
		.$id.m.edit.m.cm_rotfaces add radiobutton -variable edit_type -label $item \
d224 1
a224 1
	.$id.m.settings.m.cm_transform entryconfigure 2 -state normal
d228 1
a228 1
	.$id.m.settings.m.cm_coord entryconfigure 2 -state normal
d232 1
a232 1
	.$id.m.settings.m.cm_origin entryconfigure 3 -state normal
d236 4
a239 4
	.$id.m.edit.m entryconfigure 0 -state disabled
	.$id.m.edit.m entryconfigure 1 -state disabled
	.$id.m.edit.m entryconfigure 2 -state disabled
	.$id.m.edit.m entryconfigure 3 -state disabled
d244 1
a244 1
		.$id.m.edit.m insert $i radiobutton -variable edit_type \
d251 1
a251 1
	    .$id.m.edit.m insert $i separator
d256 1
a256 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d259 1
a259 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d262 1
a262 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d265 1
a265 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d268 1
a268 1
	    .$id.m.edit.m insert $i separator
d271 1
a271 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d274 1
a274 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d277 1
a277 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d280 1
a280 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d283 1
a283 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d286 1
a286 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d289 1
a289 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d292 1
a292 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d295 1
a295 1
	    .$id.m.edit.m insert $i radiobutton -variable edit_type \
d298 1
a298 1
	    .$id.m.edit.m insert $i separator
d302 1
a302 1
	.$id.m.edit.m insert $i command -label "Reject" -underline 0 \
d306 1
a306 1
	.$id.m.edit.m insert $i command -label "Accept" -underline 0 \
d310 1
a310 1
	.$id.m.edit.m insert $i separator
d329 2
a330 2
	    if {[.$id.m.edit.m type 0] == "separator"} {
		.$id.m.edit.m delete 0
d334 2
a335 2
	    if {[.$id.m.edit.m entrycget 0 -label] != "Add"} {
		.$id.m.edit.m delete 0
d341 4
a344 4
	if {[winfo exists .$id.m.edit.m.cm_mvedges]} {
	    destroy .$id.m.edit.m.cm_mvedges
	    destroy .$id.m.edit.m.cm_mvfaces
	    destroy .$id.m.edit.m.cm_rotfaces
d347 4
a350 4
	.$id.m.edit.m entryconfigure 0 -state normal
	.$id.m.edit.m entryconfigure 1 -state normal
	.$id.m.edit.m entryconfigure 2 -state normal
	.$id.m.edit.m entryconfigure 3 -state normal
d352 1
a352 1
	.$id.m.settings.m.cm_transform entryconfigure 2 -state disabled
d358 1
a358 1
	.$id.m.settings.m.cm_coord entryconfigure 2 -state disabled
d364 1
a364 1
	.$id.m.settings.m.cm_origin entryconfigure 3 -state disabled
@


1.10
log
@changed doit to mged_apply
@
text
@d137 2
d222 2
d326 2
@


1.9
log
@fixed typo
@
text
@d72 2
a73 2
	bind $w.f$i.l <Button-1> "handle_select %W %y; doit_press $id %W"
	bind $w.f$i.l <Button-2> "handle_select %W %y; doit_press $id %W"
d87 1
a87 1
proc doit_press { id w } {
d113 2
a114 2
	bind $w.f$i.l <Button-1> "handle_select %W %y; doit_press $id %W"
	bind $w.f$i.l <Button-2> "handle_select %W %y; doit_press $id %W"
d143 1
a143 1
	doit $id "set coords $mged_coords($id)"
d147 1
a147 1
	doit $id "set rotate_about $mged_rotate_about($id)"
d226 1
a226 1
	doit $id "set coords $mged_coords($id)"
d230 1
a230 1
	doit $id "set rotate_about $mged_rotate_about($id)"
d355 1
a355 1
	    doit $id "set coords $mged_coords($id)"
d361 1
a361 1
	    doit $id "set rotate_about $mged_rotate_about($id)"
@


1.8
log
@*- changes to the way mged_variables are being set
*- changed the names of some global variables
@
text
@d359 2
a360 2
	if {$mged_rotate($id) == "k"} {
	    set mged_rotate($id) "v"
@


1.7
log
@mods to make use of two new mged variables: ecoords and erotate_about
@
text
@d126 4
a129 5
    global transform_what
    global erotate_about
    global rotate_about_what
    global ecoords
    global coord_type
d137 2
a138 2
	.$id.m.options.m.cm_transform entryconfigure 3 -state normal
	set transform_what($id) "e"
d141 7
a147 15
	.$id.m.options.m.cm_origin entryconfigure 0 -command "set_erotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 1 -command "set_erotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 2 -command "set_erotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 3 -command "set_erotate_about $id"\
		-state normal
	.$id.m.options.m.cm_coord entryconfigure 0 -command "set_ecoords $id"
	.$id.m.options.m.cm_coord entryconfigure 1 -command "set_ecoords $id"
	.$id.m.options.m.cm_coord entryconfigure 2 -command "set_ecoords $id"\
		-state normal

	winset $mged_top($id).ul
	set rotate_about_what($id) $erotate_about
	set coord_type($id) $ecoords
	set_erotate_about $id
	set_ecoords $id
d152 1
d176 1
a176 1
	menu .$id.m.edit.m.cm_mvedges
d185 1
a185 1
	menu .$id.m.edit.m.cm_mvfaces
d194 1
a194 1
	menu .$id.m.edit.m.cm_rotfaces
d210 3
a212 5
    global transform_what
    global erotate_about
    global rotate_about_what
    global ecoords
    global coord_type
d220 2
a221 2
	.$id.m.options.m.cm_transform entryconfigure 3 -state normal
	set transform_what($id) "e"
d224 7
a230 15
	.$id.m.options.m.cm_origin entryconfigure 0 -command "set_erotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 1 -command "set_erotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 2 -command "set_erotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 3 -command "set_erotate_about $id"\
		-state normal
	.$id.m.options.m.cm_coord entryconfigure 0 -command "set_ecoords $id"
	.$id.m.options.m.cm_coord entryconfigure 1 -command "set_ecoords $id"
	.$id.m.options.m.cm_coord entryconfigure 2 -command "set_ecoords $id"\
		-state normal

	winset $mged_top($id).ul
	set rotate_about_what($id) $erotate_about
	set coord_type($id) $ecoords
	set_erotate_about $id
	set_ecoords $id
d235 1
d313 3
a315 5
    global transform_what
    global rotate_about
    global rotate_about_what
    global coords
    global coord_type
d344 1
d346 3
a348 3
	.$id.m.options.m.cm_transform entryconfigure 3 -state disabled
	if {$transform_what($id) == "e"} {
	    set transform_what($id) "v"
d352 11
a362 15
	.$id.m.options.m.cm_origin entryconfigure 0 -command "set_rotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 1 -command "set_rotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 2 -command "set_rotate_about $id"
	.$id.m.options.m.cm_origin entryconfigure 3 -command "set_rotate_about $id"\
		-state disabled
	.$id.m.options.m.cm_coord entryconfigure 0 -command "set_coords $id"
	.$id.m.options.m.cm_coord entryconfigure 1 -command "set_coords $id"
	.$id.m.options.m.cm_coord entryconfigure 2 -command "set_coords $id"\
		-state disabled

	winset $mged_top($id).ul
	set rotate_about_what($id) $rotate_about
	set coord_type($id) $coords
	set_rotate_about $id
	set_coords $id
@


1.6
log
@*** empty log message ***
@
text
@d124 1
d127 1
d129 1
d142 15
a156 7
	.$id.m.options.m.cm_origin entryconfigure 4 -state normal
	set rotate_about_what($id) "k"
	set_rotate_about $id

	.$id.m.options.m.cm_coord entryconfigure 3 -state normal
	set coord_type($id) "o"
	set_coords $id
d216 1
d219 1
d221 1
d234 15
a248 7
	.$id.m.options.m.cm_origin entryconfigure 4 -state normal
	set rotate_about_what($id) "k"
	set_rotate_about $id

	.$id.m.options.m.cm_coord entryconfigure 3 -state normal
	set coord_type($id) "o"
	set_coords $id
d329 1
d331 1
d333 1
d370 15
a384 11
	.$id.m.options.m.cm_origin entryconfigure 4 -state disabled
	if {$rotate_about_what($id) == "k"} {
	    set rotate_about_what($id) "v"
	    set_rotate_about $id
	}

	.$id.m.options.m.cm_coord entryconfigure 3 -state disabled
	if {$coord_type($id) == "o"} {
	    set coord_type($id) "v"
	    set_coords $id
	}
@


1.5
log
@edit menus
@
text
@d129 4
d147 1
a149 1
	.$id.m.edit.m entryconfigure 3 -state disabled
d151 1
a151 1
	.$id.m.edit.m insert 1 cascade -label "move edges" \
d153 1
a153 1
	.$id.m.edit.m insert 2 cascade -label "move faces" \
d155 1
a155 1
	.$id.m.edit.m insert 3 cascade -label "rotate faces" \
d157 3
a159 1
	.$id.m.edit.m insert 4 separator
d161 1
a161 1
		-label "Rotate" -underline 0 -command "press srot"
d163 1
a163 1
		-label "Translate" -underline 0 -command "press sxy"
a164 2
		-label "Scale" -underline 0 -command "press sscale"
	.$id.m.edit.m insert 8 radiobutton -variable edit_type \
d166 2
a167 2
	.$id.m.edit.m insert 9 separator
	.$id.m.edit.m insert 10 command -label "Reject" -underline 0 \
d169 1
a169 1
	.$id.m.edit.m insert 11 command -label "Accept" -underline 0 \
d171 1
a171 1
	.$id.m.edit.m insert 12 separator
d210 4
d228 1
a230 1
	.$id.m.edit.m entryconfigure 3 -state disabled
d232 1
a232 1
	set i 1
d257 10
a266 1
		    -label "none of above" -command "press \"edit menu\""
d268 21
d311 4
d317 2
a318 2
	    if {[.$id.m.edit.m type 1] == "separator"} {
		.$id.m.edit.m delete 1
d322 2
a323 2
	    if {[.$id.m.edit.m entrycget 1 -label] != "Add"} {
		.$id.m.edit.m delete 1
d335 1
a337 1
	.$id.m.edit.m entryconfigure 3 -state normal
@


1.4
log
@*** empty log message ***
@
text
@d11 2
d80 1
a80 1
    wm title $w "$id\'s MGED Button Menu"
d119 195
@


1.3
log
@more mods to enhance use with multiple instances
@
text
@a10 1
    set mmenu($id,$i) $menu
d14 2
@


1.2
log
@ generalized to allow multiple instances
@
text
@d8 1
a8 1
proc mmenu_set { i menu } {
a9 2
    global player_count
    global player_ids
d11 4
a14 3
    set mmenu($i) $menu
    for { set j 0} { $j < $player_count } { incr j } {
	set w .mmenu$player_ids($j)
d16 4
a19 3
	if {![winfo exists $w]} {
	    return
	}
d21 5
a25 4
	if { [llength $menu]<=0 } then {
	    pack forget $w.f$i
	    continue
	}
d27 7
a33 3
	$w.f$i.l delete 0 end
	foreach item $menu {
	    $w.f$i.l insert end $item
d35 4
a38 9
	$w.f$i.l configure -height [llength $menu]

	if { [winfo ismapped $w.f$i]==0 } then {
	    set packcmd "pack $w.f$i -side top -fill both -expand yes"
	    for { set scan [expr $i-1] } { $scan >= 0 } { incr scan -1 } {
		if { [llength $mmenu($scan)]>0 } then {
		    lappend packcmd -after $w.f$scan
		    break
		}
a39 7
	    for { set scan [expr $i+1] } { $scan < $mmenu(num) } { incr scan } {
		if { [llength $mmenu($scan)]>0 } then {
		    lappend packcmd -before $w.f$scan
		    break
		}
	    }
	    eval $packcmd
d41 1
d45 1
a47 2
    global player_ids
    global player_count
d49 1
d51 1
a54 1
    wm title $w "MGED Button Menu"
d60 1
a60 1
    set mmenu(num) 0
d63 1
a63 1
	incr mmenu(num)
d69 1
a69 1
	bind $w.f$i.l <Double-Button-1> "doit_press $id %W"
d72 2
a73 1
	mmenu_set $i $menu
d77 4
d87 30
@


1.1
log
@Initial revision
@
text
@d1 7
d10 2
a11 1
    set w .mmenu
d14 11
a24 5
   
    if { [llength $menu]<=0 } then {
	pack forget $w.f$i
	return
    }
d26 5
a30 5
    .mmenu.f$i.l delete 0 end
    foreach item $menu {
	.mmenu.f$i.l insert end $item
    }
    .mmenu.f$i.l configure -height [llength $menu]
d32 7
a38 6
    if { [winfo ismapped $w.f$i]==0 } then {
	set packcmd "pack $w.f$i -side top -fill both -expand yes"
	for { set scan [expr $i-1] } { $scan >= 0 } { incr scan -1 } {
	    if { [llength $mmenu($scan)]>0 } then {
		lappend packcmd -after $w.f$scan
		break
d40 5
a44 5
	}
	for { set scan [expr $i+1] } { $scan < $mmenu(num) } { incr scan } {
	    if { [llength $mmenu($scan)]>0 } then {
		lappend packcmd -before $w.f$scan
		break
d46 1
a47 1
	eval $packcmd
d51 1
a51 1
proc mmenu_init { } {
d53 5
a57 2
    
    set w .mmenu
d59 1
a59 1
    toplevel $w
d72 1
a72 4
#	scrollbar $w.f$i.s -command "$w.f$i.l yview"
#	listbox $w.f$i.l -bd 2 -yscroll "$w.f$i.s set"
#	pack $w.f$i.s -side right -fill y
	listbox $w.f$i.l -bd 2
d74 4
a77 8
	bind $w.f$i.l <Double-Button-1> {
	    press [selection get]
	}
	bind $w.f$i.l <Button-2> {
	    tkListboxBeginSelect %W [%W index @@%x,%y]
	    press [selection get]
	}
	
a81 1
    set mmenu(num) $i
d85 4
a88 1
mmenu_init
@
