head	1.27;
access;
symbols
	ansi-20040405-merged:1.24.4.1
	postmerge-20040405-ansi:1.26
	premerge-20040404-ansi:1.26
	postmerge-autoconf:1.26
	autoconf-freeze:1.24.12.1
	premerge-autoconf:1.26
	postmerge-20040315-windows:1.26
	premerge-20040315-windows:1.26
	windows-20040315-freeze:1.24.6.2
	autoconf-20031203:1.24
	autoconf-20031202:1.24
	autoconf-branch:1.24.0.12
	phong-branch:1.24.0.10
	photonmap-branch:1.24.0.8
	rel-6-1-DP:1.24
	windows-branch:1.24.0.6
	rel-6-0-2:1.24
	ansi-branch:1.24.0.4
	rel-6-0-1-branch:1.24.0.2
	hartley-6-0-post:1.24
	hartley-6-0-pre:1.24
	rel-6-0-1:1.24
	rel-6-0:1.24
	rel-5-4:1.22.2.1
	offsite-5-3-pre:1.23
	rel-5-3:1.22.2.1
	rel-5-2:1.22
	rel-5-1-branch:1.22.0.2
	rel-5-1:1.22
	rel-5-0:1.22
	rel-5-0-beta:1.19
	rel-4-5:1.4;
locks; strict;
comment	@# @;


1.27
date	2004.05.21.16.41.22;	author morrison;	state dead;
branches;
next	1.26;

1.26
date	2004.03.15.20.20.21;	author morrison;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.15.14.48.38;	author morrison;	state Exp;
branches;
next	1.24;

1.24
date	2001.09.05.21.41.24;	author bparker;	state Exp;
branches
	1.24.4.1
	1.24.6.1
	1.24.12.1;
next	1.23;

1.23
date	2000.11.14.22.40.26;	author bparker;	state Exp;
branches;
next	1.22;

1.22
date	99.09.01.18.41.56;	author bparker;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	99.07.07.17.39.29;	author bparker;	state Exp;
branches;
next	1.20;

1.20
date	99.06.21.17.04.02;	author bparker;	state Exp;
branches;
next	1.19;

1.19
date	99.04.23.17.49.59;	author bparker;	state Exp;
branches;
next	1.18;

1.18
date	99.03.12.19.37.58;	author bparker;	state Exp;
branches;
next	1.17;

1.17
date	99.03.09.22.09.00;	author bparker;	state Exp;
branches;
next	1.16;

1.16
date	99.02.23.22.52.21;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	99.01.19.22.31.27;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	98.11.06.21.22.16;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	98.10.21.17.37.39;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	98.06.15.19.28.19;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	98.06.12.17.15.33;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	98.05.07.15.15.17;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	98.05.07.15.00.13;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	98.04.23.13.41.09;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	98.03.20.22.43.32;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	98.03.13.22.46.41;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.03.06.22.51.58;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	97.11.21.21.44.37;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	97.11.04.20.08.47;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	97.09.29.16.23.15;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	97.07.17.20.44.33;	author bparker;	state Exp;
branches;
next	;

1.22.2.1
date	2000.11.14.22.38.09;	author bparker;	state Exp;
branches;
next	;

1.24.4.1
date	2004.03.17.21.23.10;	author morrison;	state Exp;
branches;
next	;

1.24.6.1
date	2003.08.14.08.07.27;	author morrison;	state Exp;
branches;
next	1.24.6.2;

1.24.6.2
date	2004.03.15.20.17.09;	author morrison;	state Exp;
branches;
next	;

1.24.12.1
date	2004.03.18.18.10.33;	author erikg;	state Exp;
branches;
next	;


desc
@default mged bindings
@


1.27
log
@moved to src/tclscripts/
@
text
@if ![info exists mged_players] {
    set mged_players {}
}

proc mged_bind_dm { w } {
    global hot_key
    global forwarding_key
    global tcl_platform

    set hot_key 65478

#make this the current display manager
    if { $::tcl_platform(platform) != "windows" && $::tcl_platform(os) != "Darwin" } {
        bind $w <Enter> "winset $w; focus $w;"
    } else {
        # some platforms should not be forced window activiation (winset)
        bind $w <Enter> "winset $w;"
    }

#default mouse bindings
    default_mouse_bindings $w

#default key bindings
    set forwarding_key($w) 0
    default_key_bindings $w
}

proc print_return_val str {
    if {$str != ""} {
	distribute_text "" "" $str
	stuff_str $str
    }
}

if ![info exists mged_default(dm_key_bindings)] {
    set mged_default(dm_key_bindings) "\tKey Sequence\t\tBehavior
\ta\t\t\ttoggle angle distance cursor (ADC)
\te\t\t\ttoggle edit axes
\tm\t\t\ttoggle model axes
\tv\t\t\ttoggle view axes
\ti\t\t\tadvance illumation pointer forward
\tI\t\t\tadvance illumation pointer backward
\tp\t\t\tsimulate mouse press (i.e. to pick a solid)
\t0\t\t\tzero knobs
\tx\t\t\trate rotate about x axis
\ty\t\t\trate rotate about y axis
\tz\t\t\trate rotate about z axis
\tX\t\t\trate translate in X direction
\tY\t\t\trate translate in Y direction
\tZ\t\t\trate translate in Z direction
\t3\t\t\tview - ae 35 25
\t4\t\t\tview - ae 45 45
\tf\t\t\tfront view
\tt\t\t\ttop view
\tb\t\t\tbottom view
\tl\t\t\tleft view
\tr\t\t\tright view
\tR\t\t\trear view
\ts\t\t\tenter solid illumination state
\to\t\t\tenter object illumination state
\tq\t\t\treject edit
\tu\t\t\tzero knobs and sliders
\t<F1>\t\t\ttoggle depthcue
\t<F2>\t\t\ttoggle zclip
\t<F3>\t\t\ttoggle perspective
\t<F4>\t\t\ttoggle zbuffer
\t<F5>\t\t\ttoggle lighting
\t<F6>\t\t\ttoggle perspective angle
\t<F7>\t\t\ttoggle faceplate
\t<F8>\t\t\ttoggle faceplate GUI
\t<F9>\t\t\ttoggle keystroke forwarding
\t<F12>\t\t\tzero knobs
\t<Left>\t\t\tabsolute rotate about y axis
\t<Right>\t\t\tabsolute rotate about y axis
\t<Down>\t\t\tabsolute rotate about x axis
\t<Up>\t\t\tabsolute rotate about x axis
\t<Shift-Left>\t\tabsolute translate in X direction
\t<Shift-Right>\t\tabsolute translate in X direction
\t<Shift-Down>\t\tabsolute translate in Z direction
\t<Shift-Up>\t\tabsolute translate in Z direction
\t<Control-Shift-Left>\tabsolute rotate about z axis
\t<Control-Shift-Right>\tabsolute rotate about z axis
\t<Control-Shift-Down>\tabsolute translate in Y direction
\t<Control-Shift-Up>\tabsolute translate in Y direction
\t<Control-n>\t\tgoto next view
\t<Control-p>\t\tgoto previous view
\t<Control-t>\t\ttoggle between the current view and the last view"
}

proc default_key_bindings { w } {
    bind $w a "winset $w; adc; break"
    bind $w e "winset $w; rset ax edit_draw !;\
	    update_gui $w edit_draw \[rset ax edit_draw\]; break"
    bind $w m "winset $w; rset ax model_draw !;\
	    update_gui $w model_draw \[rset ax model_draw\]; break"
    bind $w v "winset $w; rset ax view_draw !;\
	    update_gui $w view_draw \[rset ax view_draw\]; break"
    bind $w i "winset $w; aip f; break"
    bind $w I "winset $w; aip b; break"
    bind $w p "winset $w; M 1 0 0; break"
    bind $w 0 "winset $w; knob zero; break"
    bind $w x "winset $w; knob -i x 0.3; break"
    bind $w y "winset $w; knob -i y 0.3; break"
    bind $w z "winset $w; knob -i z 0.3; break"
    bind $w X "winset $w; knob -i x -0.3; break"
    bind $w Y "winset $w; knob -i y -0.3; break"
    bind $w Z "winset $w; knob -i z -0.3; break"
    bind $w 3 "winset $w; press 35,25; break"
    bind $w 4 "winset $w; press 45,45; break"
    bind $w f "winset $w; press front; break"
    bind $w t "winset $w; press top; break"
    bind $w b "winset $w; press bottom; break"
    bind $w l "winset $w; press left; break"
    bind $w r "winset $w; press right; break"
    bind $w R "winset $w; press rear; break"
    bind $w s "winset $w; press sill; break"
    bind $w o "winset $w; press oill; break"
    bind $w q "winset $w; press reject; break"
    bind $w A "winset $w; press accept; break"
    bind $w P "winset $w; sed_apply; break"
    bind $w S "winset $w; sed_reset; break"
    bind $w u "winset $w; svb; break"
    bind $w <F1> "winset $w; dm set depthcue !; update_gui $w depthcue \[dm set depthcue\]; break"
    bind $w <F2> "winset $w; dm set zclip !; update_gui $w zclip \[dm set zclip\]; break"
    bind $w <F3> "winset $w; set perspective_mode !; update_gui $w perspective_mode \$perspective_mode; break"
    bind $w <F4> "winset $w; dm set zbuffer !; update_gui $w zbuffer \[dm set zbuffer\]; break"
    bind $w <F5> "winset $w; dm set lighting !; update_gui $w lighting \[dm set lighting\]; break"
    bind $w <F6> "winset $w; set toggle_perspective !; break"
    bind $w <F7> "winset $w; set faceplate !; update_gui $w faceplate \$faceplate; break"
    bind $w <F8> "winset $w; set orig_gui !; update_gui $w orig_gui \$orig_gui; break"
# KeySym for <F9> --> 0xffc6 --> 65478
    bind $w <F9> "toggle_forward_key_bindings $w; update_gui $w forward_keys \$forwarding_key($w); break"
    bind $w <F12> "winset $w; knob zero; break"

    bind $w <Left> "winset $w; knob -i ay -\$mged_default(rot_factor); break"
    bind $w <Right> "winset $w; knob -i ay \$mged_default(rot_factor); break"
    bind $w <Down> "winset $w; knob -i ax \$mged_default(rot_factor); break"
    bind $w <Up> "winset $w; knob -i ax -\$mged_default(rot_factor); break"
    bind $w <Shift-Left> "winset $w; knob -i aX \$mged_default(tran_factor); break"
    bind $w <Shift-Right> "winset $w; knob -i aX -\$mged_default(tran_factor); break"
    bind $w <Shift-Down> "winset $w; knob -i aZ -\$mged_default(tran_factor); break"
    bind $w <Shift-Up> "winset $w; knob -i aZ \$mged_default(tran_factor); break"
    bind $w <Control-Shift-Left> "winset $w; knob -i az \$mged_default(rot_factor); break"
    bind $w <Control-Shift-Right> "winset $w; knob -i az -\$mged_default(rot_factor); break"
    bind $w <Control-Shift-Down> "winset $w; knob -i aY \$mged_default(tran_factor); break"
    bind $w <Control-Shift-Up> "winset $w; knob -i aY -\$mged_default(tran_factor); break"

    bind $w <Control-n> "winset $w; _mged_view_ring next; break"
    bind $w <Control-p> "winset $w; _mged_view_ring prev; break"
    bind $w <Control-t> "winset $w; _mged_view_ring toggle; break"

    # Throw away other key events
    bind $w <KeyPress> {
	break
    }
}

proc set_forward_keys { w val } {
    global forwarding_key

    set forwarding_key($w) $val
    if {$forwarding_key($w)} {
	forward_key_bindings $w
    } else {
	default_key_bindings $w
    }
}

proc toggle_forward_key_bindings { w } {
    global forwarding_key

    if {$forwarding_key($w)} {
	default_key_bindings $w
	set forwarding_key($w) 0
    } else {
	forward_key_bindings $w
	set forwarding_key($w) 1
    }
}

proc forward_key_bindings { w } {
    set id [get_player_id_dm $w]

    if {$id == "mged"} {
	return
    }

# First, unset the default key bindings
    bind $w a {}
    bind $w e {}
    bind $w m {}
    bind $w v {}
    bind $w i {}
    bind $w I {}
    bind $w p {}
    bind $w 0 {}
    bind $w x {}
    bind $w y {}
    bind $w z {}
    bind $w X {}
    bind $w Y {}
    bind $w Z {}
    bind $w 3 {}
    bind $w 4 {}
    bind $w f {}
    bind $w t {}
    bind $w b {}
    bind $w l {}
    bind $w r {}
    bind $w R {}
    bind $w s {}
    bind $w o {}
    bind $w q {}
    bind $w u {}
    bind $w <F1> {}
    bind $w <F2> {}
    bind $w <F3> {}
    bind $w <F4> {}
    bind $w <F5> {}
    bind $w <F6> {}
    bind $w <F7> {}
    bind $w <F8> {}
    bind $w <F12> {}

    bind $w <Left> {}
    bind $w <Right> {}
    bind $w <Down> {}
    bind $w <Up> {}
    bind $w <Shift-Left> {}
    bind $w <Shift-Right> {}
    bind $w <Shift-Down> {}
    bind $w <Shift-Up> {}
    bind $w <Control-Shift-Left> {}
    bind $w <Control-Shift-Right> {}
    bind $w <Control-Shift-Down> {}
    bind $w <Control-Shift-Up> {}

    bind $w <Control-n> {}
    bind $w <Control-p> {}
    bind $w <Control-t> {}

# The focus commands in the binding below are necessary to insure
# that .$id.t gets the event.
    bind $w <KeyPress> "\
	    focus .$id.t;\
	    set mged_gui(.$id.t,insert_char_flag) 1;\
	    event generate .$id.t <KeyPress> -state %s -keysym %K;\
	    set mged_gui(.$id.t,insert_char_flag) 0;\
	    focus %W;\
	    break"
}

proc default_mouse_bindings { w } {
    global transform

    # default button bindings
    bind $w <1> "winset $w; focus $w; zoom 0.5; break"
    bind $w <2> "winset $w; focus $w; set tmpstr \[dm m %x %y\]; print_return_val \$tmpstr; break"
    bind $w <3> "winset $w; focus $w; zoom 2.0; break"

    bind $w <ButtonRelease> "winset $w; dm idle; break"
    bind $w <KeyRelease-Control_L> "winset $w; dm idle; break"
    bind $w <KeyRelease-Control_R> "winset $w; dm idle; break"
    bind $w <KeyRelease-Shift_L> "winset $w; dm idle; break"
    bind $w <KeyRelease-Shift_R> "winset $w; dm idle; break"
    bind $w <KeyRelease-Alt_L> "winset $w; dm idle; break"
    bind $w <KeyRelease-Alt_R> "winset $w; dm idle; break"

    if ![catch {adc draw} result] {
	set adcflag $result
    } else {
	set adcflag 0
    }

    if {$adcflag == "1" && $transform == "a"} {
	bind $w <Shift-ButtonPress-1> "winset $w; dm adc t %x %y; \
		shift_grip_hints $w \"Translate ADC\"; break"
	bind $w <Shift-ButtonPress-2> "winset $w; dm adc t %x %y; \
		shift_grip_hints $w \"Translate ADC\"; break"
	bind $w <Shift-ButtonPress-3> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

	bind $w <Control-ButtonPress-1> "winset $w; dm adc 1 %x %y; \
		shift_grip_hints $w \"Rotate Angle 1\"; break"
	bind $w <Control-ButtonPress-2> "winset $w; dm adc 2 %x %y; \
		shift_grip_hints $w \"Rotate Angle 2\"; break"
	bind $w <Control-ButtonPress-3> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm adc d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

#constrained adc defaults
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con a x %x %y; \
		shift_grip_hints $w \"X Translate ADC\"; break"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con a y %x %y; \
		shift_grip_hints $w \"Y Translate ADC\"; break"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con a 1 %x %y; \
		shift_grip_hints $w \"Rotate Angle 1\"; break"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con a 2 %x %y; \
		shift_grip_hints $w \"Rotate Angle 2\"; break"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"

	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con a d %x %y; \
		shift_grip_hints $w \"Translate Tick Distance\"; break"
    } else {
	bind $w <Shift-ButtonPress-1> "winset $w; dm am t %x %y; \
		shift_grip_hints $w Translate; break"
	bind $w <Shift-ButtonPress-2> "winset $w; dm am t %x %y; \
		shift_grip_hints $w Translate; break"
	bind $w <Shift-ButtonPress-3> "winset $w; dm am t %x %y; \
		shift_grip_hints $w Translate; break"

	bind $w <Control-ButtonPress-1> "winset $w; dm am r %x %y; \
		shift_grip_hints $w Rotate; break"
	bind $w <Control-ButtonPress-2> "winset $w; dm am r %x %y; \
		shift_grip_hints $w Rotate; break"
	bind $w <Control-ButtonPress-3> "winset $w; dm am r %x %y; \
		shift_grip_hints $w Rotate; break"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm am s %x %y; \
		shift_grip_hints $w Scale/Zoom; break"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm am s %x %y; \
		shift_grip_hints $w Scale/Zoom; break"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm am s %x %y; \
		shift_grip_hints $w Scale/Zoom; break"

#constrained defaults
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con t x %x %y; \
		shift_grip_hints $w \"X Translation\"; break"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con t y %x %y; \
		shift_grip_hints $w \"Y Translation\"; break"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con t z %x %y; \
		shift_grip_hints $w \"Z Translation\"; break"

	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con r x %x %y; \
		shift_grip_hints $w \"X Rotation\"; break"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con r y %x %y; \
		shift_grip_hints $w \"Y Rotation\"; break"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con r z %x %y; \
		shift_grip_hints $w \"Z Rotation\"; break"

	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con s x %x %y; \
		scale_shift_grip_hints $w X; break"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con s y %x %y; \
		scale_shift_grip_hints $w Y; break"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con s z %x %y; \
		scale_shift_grip_hints $w Z; break"
    }   
}

proc shift_grip_hints { w hint } {
    global mged_display
    global mged_gui
    global win_to_id

    if ![info exists win_to_id($w)] {
	return
    }

    set id $win_to_id($w)
    set mged_gui($id,illum_label) $hint
}

proc scale_shift_grip_hints { w axis } {
    if {[status state] == "OBJ EDIT"} {
	shift_grip_hints $w "$axis Scale"
    } else {
	shift_grip_hints $w "Scale/Zoom"
    }
}

proc update_gui { w vname val } {
    global mged_players
    global mged_gui

    foreach id $mged_players {
	if {$mged_gui($id,active_dm) == $w} {
	    set mged_gui($id,$vname) $val
	    return
	}
    }
}

@


1.26
log
@ws
@
text
@@


1.25
log
@do not do focus-follows-mouse when we are on windows or mac
@
text
@d8 1
d256 2
a257 2
# default button bindings
  bind $w <1> "winset $w; focus $w; zoom 0.5; break"
@


1.24
log
@*- add bindings for edit accept, apply and reset
@
text
@d12 6
a17 1
    bind $w <Enter> "winset $w; focus $w;"
d256 3
a258 3
    bind $w <1> "winset $w; zoom 0.5; break"
    bind $w <2> "winset $w; set tmpstr \[dm m %x %y\]; print_return_val \$tmpstr; break"
    bind $w <3> "winset $w; zoom 2.0; break"
@


1.24.12.1
log
@merge from head
@
text
@a7 1
    global tcl_platform
d12 1
a12 6
    if { $::tcl_platform(platform) != "windows" && $::tcl_platform(os) != "Darwin" } {
        bind $w <Enter> "winset $w; focus $w;"
    } else {
        # some platforms should not be forced window activiation (winset)
        bind $w <Enter> "winset $w;"
    }
d250 4
a253 4
    # default button bindings
    bind $w <1> "winset $w; focus $w; zoom 0.5; break"
    bind $w <2> "winset $w; focus $w; set tmpstr \[dm m %x %y\]; print_return_val \$tmpstr; break"
    bind $w <3> "winset $w; focus $w; zoom 2.0; break"
@


1.24.4.1
log
@sync branch with HEAD
@
text
@a7 1
    global tcl_platform
d12 1
a12 6
    if { $::tcl_platform(platform) != "windows" && $::tcl_platform(os) != "Darwin" } {
        bind $w <Enter> "winset $w; focus $w;"
    } else {
        # some platforms should not be forced window activiation (winset)
        bind $w <Enter> "winset $w;"
    }
d250 4
a253 4
    # default button bindings
    bind $w <1> "winset $w; focus $w; zoom 0.5; break"
    bind $w <2> "winset $w; focus $w; set tmpstr \[dm m %x %y\]; print_return_val \$tmpstr; break"
    bind $w <3> "winset $w; focus $w; zoom 2.0; break"
@


1.24.6.1
log
@Survice Engineering patch to clean up the build environment and several runtime issues
@
text
@a7 1
    global tcl_platform
a11 1
	if { $tcl_platform(os) != "Windows NT" } {
a12 6
  } else {
    # focus binding under windows platform causes
    # window activation (bring-to-front), which
    # is not desireable or expected on that platform
    focus $w;
  }
d251 3
a253 3
	bind $w <1> "winset $w; focus $w; zoom 0.5; break"
	bind $w <2> "winset $w; focus $w; set tmpstr \[dm m %x %y\]; print_return_val \$tmpstr; break"
	bind $w <3> "winset $w; focus $w; zoom 2.0; break"
@


1.24.6.2
log
@merge from head
@
text
@d13 8
a20 6
    if { $::tcl_platform(platform) != "windows" && $::tcl_platform(os) != "Darwin" } {
        bind $w <Enter> "winset $w; focus $w;"
    } else {
        # some platforms should not be forced window activiation (winset)
        bind $w <Enter> "winset $w;"
    }
d258 4
a261 4
    # default button bindings
    bind $w <1> "winset $w; focus $w; zoom 0.5; break"
    bind $w <2> "winset $w; focus $w; set tmpstr \[dm m %x %y\]; print_return_val \$tmpstr; break"
    bind $w <3> "winset $w; focus $w; zoom 2.0; break"
@


1.23
log
@Add two new mged_default variables:
	rot_factor and tran_factor
They are used to control how fast the arrow
keys will rotate or translate the view.
@
text
@d113 3
@


1.22
log
@*- mods to run more robustly without an open database
@
text
@a0 3
set mged_rotate_factor 1
set mged_tran_factor .01

a6 2
    global mged_rotate_factor
    global mged_tran_factor
d126 12
a137 12
    bind $w <Left> "winset $w; knob -i ay -\$mged_rotate_factor; break"
    bind $w <Right> "winset $w; knob -i ay \$mged_rotate_factor; break"
    bind $w <Down> "winset $w; knob -i ax \$mged_rotate_factor; break"
    bind $w <Up> "winset $w; knob -i ax -\$mged_rotate_factor; break"
    bind $w <Shift-Left> "winset $w; knob -i aX \$mged_tran_factor; break"
    bind $w <Shift-Right> "winset $w; knob -i aX -\$mged_tran_factor; break"
    bind $w <Shift-Down> "winset $w; knob -i aZ -\$mged_tran_factor; break"
    bind $w <Shift-Up> "winset $w; knob -i aZ \$mged_tran_factor; break"
    bind $w <Control-Shift-Left> "winset $w; knob -i az \$mged_rotate_factor; break"
    bind $w <Control-Shift-Right> "winset $w; knob -i az -\$mged_rotate_factor; break"
    bind $w <Control-Shift-Down> "winset $w; knob -i aY \$mged_tran_factor; break"
    bind $w <Control-Shift-Up> "winset $w; knob -i aY -\$mged_tran_factor; break"
@


1.22.2.1
log
@Add support for two new mged_default variables:
	rot_factor and tran_factor.
They control how fast to rotate or translate
using the arrow keys.
@
text
@d1 3
d10 2
d131 12
a142 12
    bind $w <Left> "winset $w; knob -i ay -\$mged_default(rot_factor); break"
    bind $w <Right> "winset $w; knob -i ay \$mged_default(rot_factor); break"
    bind $w <Down> "winset $w; knob -i ax \$mged_default(rot_factor); break"
    bind $w <Up> "winset $w; knob -i ax -\$mged_default(rot_factor); break"
    bind $w <Shift-Left> "winset $w; knob -i aX \$mged_default(tran_factor); break"
    bind $w <Shift-Right> "winset $w; knob -i aX -\$mged_default(tran_factor); break"
    bind $w <Shift-Down> "winset $w; knob -i aZ -\$mged_default(tran_factor); break"
    bind $w <Shift-Up> "winset $w; knob -i aZ \$mged_default(tran_factor); break"
    bind $w <Control-Shift-Left> "winset $w; knob -i az \$mged_default(rot_factor); break"
    bind $w <Control-Shift-Right> "winset $w; knob -i az -\$mged_default(rot_factor); break"
    bind $w <Control-Shift-Down> "winset $w; knob -i aY \$mged_default(tran_factor); break"
    bind $w <Control-Shift-Up> "winset $w; knob -i aY -\$mged_default(tran_factor); break"
@


1.21
log
@*- mod to shift_grip_hints() to check that an id
   can be obtained
@
text
@d265 5
a269 1
    set adcflag [adc draw]
@


1.20
log
@*- add code to provide shift grip hints
@
text
@d361 4
@


1.19
log
@*- typo
@
text
@d268 20
a287 11
	bind $w <Shift-ButtonPress-1> "winset $w; dm adc t %x %y; break"
	bind $w <Shift-ButtonPress-2> "winset $w; dm adc t %x %y; break"
	bind $w <Shift-ButtonPress-3> "winset $w; dm adc d %x %y; break"

	bind $w <Control-ButtonPress-1> "winset $w; dm adc 1 %x %y; break"
	bind $w <Control-ButtonPress-2> "winset $w; dm adc 2 %x %y; break"
	bind $w <Control-ButtonPress-3> "winset $w; dm adc d %x %y; break"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm adc d %x %y; break"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm adc d %x %y; break"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm adc d %x %y; break"
d290 20
a309 11
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con a x %x %y; break"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con a y %x %y; break"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con a d %x %y; break"

	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con a 1 %x %y; break"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con a 2 %x %y; break"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con a d %x %y; break"

	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con a d %x %y; break"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con a d %x %y; break"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con a d %x %y; break"
d311 20
a330 11
	bind $w <Shift-ButtonPress-1> "winset $w; dm am t %x %y; break"
	bind $w <Shift-ButtonPress-2> "winset $w; dm am t %x %y; break"
	bind $w <Shift-ButtonPress-3> "winset $w; dm am t %x %y; break"

	bind $w <Control-ButtonPress-1> "winset $w; dm am r %x %y; break"
	bind $w <Control-ButtonPress-2> "winset $w; dm am r %x %y; break"
	bind $w <Control-ButtonPress-3> "winset $w; dm am r %x %y; break"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm am s %x %y; break"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm am s %x %y; break"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm am s %x %y; break"
d333 20
a352 11
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con t x %x %y; break"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con t y %x %y; break"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con t z %x %y; break"

	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con r x %x %y; break"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con r y %x %y; break"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con r z %x %y; break"

	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con s x %x %y; break"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con s y %x %y; break"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con s z %x %y; break"
d356 17
d384 1
@


1.18
log
@*- initialized mged_default(dm_key_bindings)
@
text
@d35 1
a35 1
    set mged_default(dm_key_bindings) "\tKey\t\t\tBehavior
@


1.17
log
@*- modify F[1-9] key bindings to possibly modify the GUI
@
text
@d34 55
@


1.16
log
@*- remove unneeded reference to slidersflag
@
text
@d4 4
d36 6
a41 3
    bind $w e "update_axes_draw $w edit; break"
    bind $w m "update_axes_draw $w model; break"
    bind $w v "update_axes_draw $w view; break"
d64 5
a68 5
    bind $w <F1> "winset $w; dm set depthcue !; break"
    bind $w <F2> "winset $w; dm set zclip !; break"
    bind $w <F3> "winset $w; set perspective_mode !; break"
    bind $w <F4> "winset $w; dm set zbuffer !; break"
    bind $w <F5> "winset $w; dm set lighting !; break"
d70 2
a71 2
    bind $w <F7> "winset $w; set faceplate !; break"
    bind $w <F8> "winset $w; set orig_gui !; break"
d73 1
a73 1
    bind $w <F9> "toggle_forward_key_bindings $w; break"
d99 11
d190 2
a191 1
	    focus %W; break"
d265 1
a265 1
proc update_axes_draw { w type } {
a268 3
    winset $w;
    rset ax $type\_draw !

d271 2
a272 2
	    set mged_gui($id,$type\_draw) [rset ax $type\_draw]
	    break
@


1.15
log
@*- cleanup variables
@
text
@a7 1
    global slidersflag
@


1.14
log
@*- use view_ring command
*- use rset command
@
text
@d170 1
a170 1
	    set dm_insert_char_flag(.$id.t) 1;\
d172 1
a172 1
	    set dm_insert_char_flag(.$id.t) 0;\
d249 1
a249 2
    global mged_active_dm
    global mged_axes
d255 2
a256 2
	if {$mged_active_dm($id) == $w} {
	    set mged_axes($id,$type\_draw) [rset ax $type\_draw]
@


1.13
log
@*- bug fix in default_mouse_bindings
@
text
@d33 3
a35 3
    bind $w e "winset $w; set e_axes !; break"
    bind $w v "winset $w; set v_axes !; break"
    bind $w w "winset $w; set m_axes !; break"
d83 3
a85 3
    bind $w <Control-n> "winset $w; next_view; break"
    bind $w <Control-p> "winset $w; prev_view; break"
    bind $w <Control-t> "winset $w; toggle_view; break"
d115 1
a116 1
    bind $w w {}
d245 16
@


1.12
log
@*- append "break" to bindings to prevent further processing
@
text
@d194 1
a194 1
    if {$adcflag && $transform == "a"} {
@


1.11
log
@*- mods to key bindings
@
text
@d32 34
a65 34
    bind $w a "winset $w; adc"
    bind $w e "winset $w; set e_axes !"
    bind $w v "winset $w; set v_axes !"
    bind $w w "winset $w; set m_axes !"
    bind $w i "winset $w; aip f"
    bind $w I "winset $w; aip b"
    bind $w p "winset $w; M 1 0 0"
    bind $w 0 "winset $w; knob zero"
    bind $w x "winset $w; knob -i x 0.3"
    bind $w y "winset $w; knob -i y 0.3"
    bind $w z "winset $w; knob -i z 0.3"
    bind $w X "winset $w; knob -i x -0.3"
    bind $w Y "winset $w; knob -i y -0.3"
    bind $w Z "winset $w; knob -i z -0.3"
    bind $w 3 "winset $w; press 35,25"
    bind $w 4 "winset $w; press 45,45"
    bind $w f "winset $w; press front"
    bind $w t "winset $w; press top"
    bind $w b "winset $w; press bottom"
    bind $w l "winset $w; press left"
    bind $w r "winset $w; press right"
    bind $w R "winset $w; press rear"
    bind $w s "winset $w; press sill"
    bind $w o "winset $w; press oill"
    bind $w q "winset $w; press reject"
    bind $w u "winset $w; svb"
    bind $w <F1> "winset $w; dm set depthcue !"
    bind $w <F2> "winset $w; dm set zclip !"
    bind $w <F3> "winset $w; set perspective_mode !"
    bind $w <F4> "winset $w; dm set zbuffer !"
    bind $w <F5> "winset $w; dm set lighting !"
    bind $w <F6> "winset $w; set toggle_perspective !"
    bind $w <F7> "winset $w; set faceplate !"
    bind $w <F8> "winset $w; set orig_gui !"
d67 2
a68 2
    bind $w <F9> "toggle_forward_key_bindings $w"
    bind $w <F12> "winset $w; knob zero"
d70 16
a85 16
    bind $w <Left> "winset $w; knob -i ay -\$mged_rotate_factor"
    bind $w <Right> "winset $w; knob -i ay \$mged_rotate_factor"
    bind $w <Down> "winset $w; knob -i ax \$mged_rotate_factor"
    bind $w <Up> "winset $w; knob -i ax -\$mged_rotate_factor"
    bind $w <Shift-Left> "winset $w; knob -i aX \$mged_tran_factor"
    bind $w <Shift-Right> "winset $w; knob -i aX -\$mged_tran_factor"
    bind $w <Shift-Down> "winset $w; knob -i aZ -\$mged_tran_factor"
    bind $w <Shift-Up> "winset $w; knob -i aZ \$mged_tran_factor"
    bind $w <Control-Shift-Left> "winset $w; knob -i az \$mged_rotate_factor"
    bind $w <Control-Shift-Right> "winset $w; knob -i az -\$mged_rotate_factor"
    bind $w <Control-Shift-Down> "winset $w; knob -i aY \$mged_tran_factor"
    bind $w <Control-Shift-Up> "winset $w; knob -i aY -\$mged_tran_factor"

    bind $w <Control-n> "winset $w; next_view"
    bind $w <Control-p> "winset $w; prev_view"
    bind $w <Control-t> "winset $w; toggle_view"
d87 2
a88 2
    # troubled ones
    bind $w <Alt-Key> {
a90 10

    bind $w <Tab> {
	break
    }

    bind $w <Shift-Tab> {
	break
    }

    bind $w <KeyPress> {}
a165 4
    bind $w <Alt-Key> {}
    bind $w <Tab> {}
    bind $w <Shift-Tab> {}

d173 1
a173 1
	    focus %W"
d180 3
a182 3
    bind $w <1> "winset $w; zoom 0.5"
    bind $w <2> "winset $w; set tmpstr \[dm m %x %y\]; print_return_val \$tmpstr"
    bind $w <3> "winset $w; zoom 2.0"
d184 1
a184 1
    bind $w <ButtonRelease> "winset $w; dm idle"
d195 11
a205 11
	bind $w <Shift-ButtonPress-1> "winset $w; dm adc t %x %y"
	bind $w <Shift-ButtonPress-2> "winset $w; dm adc t %x %y"
	bind $w <Shift-ButtonPress-3> "winset $w; dm adc d %x %y"

	bind $w <Control-ButtonPress-1> "winset $w; dm adc 1 %x %y"
	bind $w <Control-ButtonPress-2> "winset $w; dm adc 2 %x %y"
	bind $w <Control-ButtonPress-3> "winset $w; dm adc d %x %y"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm adc d %x %y"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm adc d %x %y"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm adc d %x %y"
d208 11
a218 11
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con a x %x %y"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con a y %x %y"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con a d %x %y"

	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con a 1 %x %y"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con a 2 %x %y"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con a d %x %y"

	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con a d %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con a d %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con a d %x %y"
d220 11
a230 11
	bind $w <Shift-ButtonPress-1> "winset $w; dm am t %x %y"
	bind $w <Shift-ButtonPress-2> "winset $w; dm am t %x %y"
	bind $w <Shift-ButtonPress-3> "winset $w; dm am t %x %y"

	bind $w <Control-ButtonPress-1> "winset $w; dm am r %x %y"
	bind $w <Control-ButtonPress-2> "winset $w; dm am r %x %y"
	bind $w <Control-ButtonPress-3> "winset $w; dm am r %x %y"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm am s %x %y"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm am s %x %y"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm am s %x %y"
d233 11
a243 11
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con t x %x %y"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con t y %x %y"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con t z %x %y"

	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con r x %x %y"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con r y %x %y"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con r z %x %y"

	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con s x %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con s y %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con s z %x %y"
@


1.10
log
@*- dm_insert_char_flag is now an array
@
text
@d99 2
d184 1
a184 1
	    set dm_insert_char_flag(%W) 1;\
d186 1
a186 1
	    set dm_insert_char_flag(%W) 0;\
@


1.9
log
@*- new procs --- default_key_bindings, toggle_forward_key_bindings
	and forward_key_bindings
@
text
@d182 1
a182 1
	    set dm_insert_char_flag 1;\
d184 1
a184 1
	    set dm_insert_char_flag 0;\
@


1.8
log
@added proc bind_troubled_ones
@
text
@d9 1
d17 1
a17 1
    do_mouse_bindings $w
d20 12
d67 1
a67 1
    bind $w <F9> "winset $w; set send_key !"
d87 12
a98 1
    bind_troubled_ones $w
d101 2
a102 81
proc bind_troubled_ones { w } {
    bind $w <Alt-A> "break"
    bind $w <Alt-a> "break"
    bind $w <Alt-B> "break"
    bind $w <Alt-b> "break"
    bind $w <Alt-C> "break"
    bind $w <Alt-c> "break"
    bind $w <Alt-D> "break"
    bind $w <Alt-d> "break"
    bind $w <Alt-E> "break"
    bind $w <Alt-e> "break"
    bind $w <Alt-F> "break"
    bind $w <Alt-f> "break"
    bind $w <Alt-G> "break"
    bind $w <Alt-g> "break"
    bind $w <Alt-H> "break"
    bind $w <Alt-h> "break"
    bind $w <Alt-I> "break"
    bind $w <Alt-i> "break"
    bind $w <Alt-J> "break"
    bind $w <Alt-j> "break"
    bind $w <Alt-K> "break"
    bind $w <Alt-k> "break"
    bind $w <Alt-L> "break"
    bind $w <Alt-l> "break"
    bind $w <Alt-M> "break"
    bind $w <Alt-m> "break"
    bind $w <Alt-N> "break"
    bind $w <Alt-n> "break"
    bind $w <Alt-O> "break"
    bind $w <Alt-o> "break"
    bind $w <Alt-P> "break"
    bind $w <Alt-p> "break"
    bind $w <Alt-Q> "break"
    bind $w <Alt-q> "break"
    bind $w <Alt-R> "break"
    bind $w <Alt-r> "break"
    bind $w <Alt-S> "break"
    bind $w <Alt-s> "break"
    bind $w <Alt-T> "break"
    bind $w <Alt-t> "break"
    bind $w <Alt-U> "break"
    bind $w <Alt-u> "break"
    bind $w <Alt-V> "break"
    bind $w <Alt-v> "break"
    bind $w <Alt-W> "break"
    bind $w <Alt-w> "break"
    bind $w <Alt-X> "break"
    bind $w <Alt-x> "break"
    bind $w <Alt-Y> "break"
    bind $w <Alt-y> "break"
    bind $w <Alt-Z> "break"
    bind $w <Alt-z> "break"

#    bind $w <Alt-`> "break"
    bind $w <Alt-KeyPress-1> "break"
    bind $w <Alt-KeyPress-2> "break"
    bind $w <Alt-KeyPress-3> "break"
    bind $w <Alt-KeyPress-4> "break"
    bind $w <Alt-KeyPress-5> "break"
    bind $w <Alt-KeyPress-6> "break"
    bind $w <Alt-KeyPress-7> "break"
    bind $w <Alt-KeyPress-8> "break"
    bind $w <Alt-KeyPress-9> "break"
    bind $w <Alt-KeyPress-0> "break"
#    bind $w <Alt--> "break"
#    bind $w <Alt-=> "break"
#    bind $w <Alt-~> "break"
#    bind $w <Alt-!> "break"
#    bind $w <Alt-@@> "break"
#    bind $w <Alt-#> "break"
#    bind $w <Alt-$> "break"
#    bind $w <Alt-%> "break"
#    bind $w <Alt-^> "break"
#    bind $w <Alt-&> "break"
#    bind $w <Alt-*> "break"
#    bind $w <Alt-(> "break"
#    bind $w <Alt-)> "break"
#    bind $w <Alt-_> "break"
#    bind $w <Alt-+> "break"
    bind $w <Alt-KeyPress> "break"
d104 7
a110 1
    bind $w <Tab> "break"
d113 5
a117 4
proc print_return_val str {
    if {$str != ""} {
	distribute_text "" "" $str
	stuff_str $str
d119 67
d188 1
a188 1
proc do_mouse_bindings { w } {
@


1.7
log
@rewrote binding for <Tab> to do nothing
@
text
@d74 85
a158 1
# troublesome ones
a168 1

d178 6
a183 6
    bind $w <KeyRelease-Control_L> "winset $w; dm idle"
    bind $w <KeyRelease-Control_R> "winset $w; dm idle"
    bind $w <KeyRelease-Shift_L> "winset $w; dm idle"
    bind $w <KeyRelease-Shift_R> "winset $w; dm idle"
    bind $w <KeyRelease-Alt_L> "winset $w; dm idle"
    bind $w <KeyRelease-Alt_R> "winset $w; dm idle"
d238 1
a238 1
}@


1.6
log
@mods to reflect that adcflag is no longer an mged_variable
.,
@
text
@d73 3
@


1.5
log
@*- mods to reflect change to "dm m" command
@
text
@a83 1
    global adcflag
d98 2
@


1.4
log
@*** empty log message ***
@
text
@d89 1
a89 1
    bind $w <2> "winset $w; set tmpstr \[dm m %b %x %y\]; print_return_val \$tmpstr"
@


1.3
log
@mods to reflect changes in the dm command
@
text
@d47 1
a47 1
    bind $w <F3> "winset $w; dm set perspective !"
d50 1
a50 1
    bind $w <F6> "winset $w; dm set set_perspective !"
@


1.2
log
@*** empty log message ***
@
text
@d57 4
a60 4
    bind $w <Left> {knob -i ay -$mged_rotate_factor}
    bind $w <Right> {knob -i ay $mged_rotate_factor}
    bind $w <Down> {knob -i ax $mged_rotate_factor}
    bind $w <Up> {knob -i ax -$mged_rotate_factor}
d89 1
a89 1
    bind $w <2> "winset $w; set tmpstr \[dm m %b 1 %x %y\]; print_return_val \$tmpstr"
d92 7
a98 7
    bind $w <ButtonRelease> "winset $w; dm am t 0 0 0"
    bind $w <KeyRelease-Control_L> "winset $w; dm am t 0 0 0"
    bind $w <KeyRelease-Control_R> "winset $w; dm am t 0 0 0"
    bind $w <KeyRelease-Shift_L> "winset $w; dm am t 0 0 0"
    bind $w <KeyRelease-Shift_R> "winset $w; dm am t 0 0 0"
    bind $w <KeyRelease-Alt_L> "winset $w; dm am t 0 0 0"
    bind $w <KeyRelease-Alt_R> "winset $w; dm am t 0 0 0"
d101 11
a111 11
	bind $w <Shift-ButtonPress-1> "winset $w; dm adc t 1 %x %y"
	bind $w <Shift-ButtonPress-2> "winset $w; dm adc t 1 %x %y"
	bind $w <Shift-ButtonPress-3> "winset $w; dm adc d 1 %x %y"

	bind $w <Control-ButtonPress-1> "winset $w; dm adc 1 1 %x %y"
	bind $w <Control-ButtonPress-2> "winset $w; dm adc 2 1 %x %y"
	bind $w <Control-ButtonPress-3> "winset $w; dm adc d 1 %x %y"

	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm adc d 1 %x %y"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm adc d 1 %x %y"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm adc d 1 %x %y"
d114 11
a124 9
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con a x 1 %x %y"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con a y 1 %x %y"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con a d 1 %x %y"
	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con a 1 1 %x %y"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con a 2 1 %x %y"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con a d 1 %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con a d 1 %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con a d 1 %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con a d 1 %x %y"
d126 11
a136 9
	bind $w <Shift-ButtonPress-1> "winset $w; dm am t 1 %x %y"
	bind $w <Control-ButtonPress-1> "winset $w; dm am r 1 %x %y"
	bind $w <Shift-ButtonPress-2> "winset $w; dm am t 1 %x %y"
	bind $w <Control-ButtonPress-2> "winset $w; dm am r 1 %x %y"
	bind $w <Shift-ButtonPress-3> "winset $w; dm am t 1 %x %y"
	bind $w <Control-ButtonPress-3> "winset $w; dm am r 1 %x %y"
	bind $w <Shift-Control-ButtonPress-1> "winset $w; dm am s 1 %x %y"
	bind $w <Shift-Control-ButtonPress-2> "winset $w; dm am s 1 %x %y"
	bind $w <Shift-Control-ButtonPress-3> "winset $w; dm am s 1 %x %y"
d139 11
a149 9
	bind $w <Alt-Shift-ButtonPress-1> "winset $w; dm con t x 1 %x %y"
	bind $w <Alt-Shift-ButtonPress-2> "winset $w; dm con t y 1 %x %y"
	bind $w <Alt-Shift-ButtonPress-3> "winset $w; dm con t z 1 %x %y"
	bind $w <Alt-Control-ButtonPress-1> "winset $w; dm con r x 1 %x %y"
	bind $w <Alt-Control-ButtonPress-2> "winset $w; dm con r y 1 %x %y"
	bind $w <Alt-Control-ButtonPress-3> "winset $w; dm con r z 1 %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-1> "winset $w; dm con s x 1 %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-2> "winset $w; dm con s y 1 %x %y"
	bind $w <Alt-Shift-Control-ButtonPress-3> "winset $w; dm con s z 1 %x %y"
@


1.1
log
@Initial revision
@
text
@d103 1
a103 1
	bind $w <Shift-ButtonPress-3> "winset $w; dm adc t 1 %x %y"
d107 1
a107 1
	bind $w <Control-ButtonPress-3> "winset $w; dm adc 1 1 %x %y"
d120 3
@
