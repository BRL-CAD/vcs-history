head	1.21;
access;
symbols
	ansi-20040405-merged:1.19.4.1
	postmerge-20040405-ansi:1.20
	premerge-20040404-ansi:1.20
	postmerge-autoconf:1.20
	autoconf-freeze:1.20
	premerge-autoconf:1.20
	postmerge-20040315-windows:1.20
	premerge-20040315-windows:1.20
	windows-20040315-freeze:1.19.6.2
	autoconf-20031203:1.20
	autoconf-20031202:1.20
	autoconf-branch:1.20.0.6
	phong-branch:1.20.0.4
	photonmap-branch:1.20.0.2
	rel-6-1-DP:1.19
	windows-branch:1.19.0.6
	rel-6-0-2:1.19
	ansi-branch:1.19.0.4
	rel-6-0-1-branch:1.19.0.2
	hartley-6-0-post:1.19
	hartley-6-0-pre:1.19
	rel-6-0-1:1.19
	rel-6-0:1.19
	rel-5-4:1.11.2.7
	offsite-5-3-pre:1.17
	rel-5-3:1.11.2.7
	rel-5-2:1.11
	rel-5-1-branch:1.11.0.2
	rel-5-1:1.11
	rel-5-0:1.9
	rel-5-0-beta:1.8;
locks; strict;
comment	@# @;


1.21
date	2004.05.21.16.41.23;	author morrison;	state dead;
branches;
next	1.20;

1.20
date	2003.03.13.19.45.31;	author jra;	state Exp;
branches;
next	1.19;

1.19
date	2001.10.15.17.53.41;	author bparker;	state Exp;
branches
	1.19.4.1
	1.19.6.1;
next	1.18;

1.18
date	2001.08.02.17.40.12;	author bparker;	state Exp;
branches;
next	1.17;

1.17
date	2001.02.16.22.30.02;	author bparker;	state Exp;
branches;
next	1.16;

1.16
date	2001.02.02.14.50.24;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.09.21.11.31;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.22.00.35.15;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.09.19.55.44;	author jra;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.01.16.44.47;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.06.20.47.36;	author bparker;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	99.10.08.21.55.08;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	99.09.08.13.20.18;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	99.04.09.21.27.10;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	99.01.19.22.31.28;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	98.06.15.19.28.21;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.06.09.18.11.32;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.05.01.21.06.41;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.04.23.13.44.23;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.04.09.21.23.02;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.04.09.14.43.17;	author bparker;	state Exp;
branches;
next	;

1.11.2.1
date	2000.10.20.17.20.52;	author bparker;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2000.11.01.16.41.50;	author bparker;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2000.11.09.19.53.24;	author jra;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2000.12.22.00.02.28;	author bparker;	state Exp;
branches;
next	1.11.2.5;

1.11.2.5
date	2001.01.09.21.10.38;	author bparker;	state Exp;
branches;
next	1.11.2.6;

1.11.2.6
date	2001.02.02.14.46.53;	author bparker;	state Exp;
branches;
next	1.11.2.7;

1.11.2.7
date	2001.02.08.21.53.24;	author bparker;	state Exp;
branches;
next	;

1.19.4.1
date	2004.03.17.21.23.11;	author morrison;	state Exp;
branches;
next	;

1.19.6.1
date	2002.09.26.23.04.17;	author morrison;	state Exp;
branches;
next	1.19.6.2;

1.19.6.2
date	2004.03.11.23.48.58;	author morrison;	state Exp;
branches;
next	;


desc
@Tcl routines for MGED(1) to specify a solid/matrix for editing.
@


1.21
log
@moved to src/tclscripts/
@
text
@#
#			E D I T M E N U . T C L
#
#	TCL macros for MGED(1) to specify a solid/obj_path for editing
#	from among those currently being displayed.
#
#	Authors -
#		Paul Tanenbaum
#		Robert Parker
#

if ![info exists mged_default(display)] {
    if [info exists env(DISPLAY)] {
	set mged_default(display) $env(DISPLAY)
    } else {
	set mged_default(display) :0
    }
}

if ![info exists mged_gui(mged,screen)] {
    set mged_gui(mged,screen) $mged_default(display)
}

#	Ensure that all commands that this script uses without defining
#	are provided by the calling application
check_externs "_mged_x _mged_press _mged_who _mged_ill"

proc build_edit_menu_all { type } {
    global mged_players
    global mged_gui
    global mouse_behavior
    global ::tk::Priv

    set win [winset]
    set id [get_player_id_dm $win]

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    if {[info exists mged_gui($id,edit_menu)] && \
	    [winfo exists $mged_gui($id,edit_menu)]} {
	destroy $mged_gui($id,edit_menu)
    }

    set paths [_mged_x -1]
    if {![llength $paths]} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"No primitives are being displayed!"\
		"No primitives are being displayed!"\
		"" 0 OK
	return
    }

    _mged_press reject
    build_solid_menu $type $id $paths

    mged_apply_all [winset] "set mouse_behavior d"
    foreach id $mged_players {
	set mged_gui($id,mouse_behavior) d
    }
}

proc ray_build_edit_menu { type x y } {
    global mged_players
    global mged_gui
    global mouse_behavior
    global ::tk::Priv

    set win [winset]
    set id [get_player_id_dm $win]

    if {[info exists mged_gui($id,edit_menu)] && \
	    [winfo exists $mged_gui($id,edit_menu)]} {
	destroy $mged_gui($id,edit_menu)
    }

    set ray [mouse_shoot_ray $x $y]
    set paths [ray_get_info $ray in path]

    if {![llength $paths]} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"Nothing was hit!"\
		"Nothing was hit!"\
		"" 0 OK
	return
    }

    _mged_press reject

    switch $type {
	s {
	    if {[llength $paths] == 1} {
		_mged_press sill
		_mged_ill -i 1 [lindex $paths 0]
	    } elseif {[llength $paths] > 1} {
		build_solid_menu s1 $id $paths
	    }
	}
	o {
	    if {[llength $paths] == 1} {
		_mged_press oill
		_mged_ill -i 1 [lindex $paths 0]
		build_matrix_menu $id [lindex $paths 0]
	    } elseif {[llength $paths] > 1} {
		build_solid_menu o $id $paths
	    }
	}
	default {
	    return "ray_build_edit_menu: bad type - $type"
	}
    }

    mged_apply_all [winset] "set mouse_behavior d"
    foreach id $mged_players {
	set mged_gui($id,mouse_behavior) d
    }
}

proc build_solid_menu { type id paths } {
    global mged_gui

    if {[info exists mged_gui($id,edit_menu)] && \
	    [winfo exists $mged_gui($id,edit_menu)]} {
	destroy $mged_gui($id,edit_menu)
    }

    set top .em$id
    if [winfo exists $top] {
	destroy $top
    }

    if [info exists mged_gui($id,screen)] {
	set screen $mged_gui($id,screen)
    } else {
	set win [winset]
	set screen [winfo screen $win]
    }

    # reverse paths
    for {set i [expr [llength $paths] - 1]} {0 <= $i} {incr i -1} {
	lappend rpaths [lindex $paths $i]
    }

    create_listbox $top $screen Primitive $rpaths "destroy $top"
    set mged_gui($id,edit_menu) $top

    bind_listbox $top <B1-Motion> \
	    "set item \[get_listbox_entry %W %x %y\];\
	    solid_illum \$item"
    bind_listbox $top "<ButtonPress-1>" \
	    "lbdcHack %W %x %y %t $id $type junkpath"
    bind_listbox $top "<ButtonRelease-1>" \
	    "%W selection clear 0 end; _mged_press reject"
}

proc build_matrix_menu { id path } {
    global mged_gui

    if {[info exists mged_gui($id,edit_menu)] && \
	    [winfo exists $mged_gui($id,edit_menu)]} {
	destroy $mged_gui($id,edit_menu)
    }

    set top .mm$id
    if [winfo exists $top] {
	destroy $top
    }

    if [info exists mged_gui($id,screen)] {
	set screen $mged_gui($id,screen)
    } else {
	set win [winset]
	set screen [winfo screen $win]
    }

    regexp "\[^/\].*" $path match
    set path_components [split $match /]
    create_listbox $top $screen Matrix $path_components "_mged_press reject; destroy $top"
    set mged_gui($id,edit_menu) $top

    bind_listbox $top "<B1-Motion>" \
	    "set path_pos \[%W index @@%x,%y\];\
	    matrix_illum $path \$path_pos"
    bind_listbox $top "<ButtonPress-1>" \
	    "lbdcHack %W %x %y %t $id m1 $path"
    bind_listbox $top "<ButtonRelease-1>" \
	    "%W selection clear 0 end; _mged_press reject"
}
@


1.20
log
@*** empty log message ***
@
text
@@


1.19
log
@*- mods to warn user if database is not open
@
text
@d32 1
a32 1
    global tkPriv
d38 1
a38 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d50 1
a50 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d70 1
a70 1
    global tkPriv
d84 1
a84 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.19.4.1
log
@sync branch with HEAD
@
text
@d32 1
a32 1
    global ::tk::Priv
d38 1
a38 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d50 1
a50 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d70 1
a70 1
    global ::tk::Priv
d84 1
a84 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.19.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d32 1
a32 1
    variable ::tk::Priv
d38 1
a38 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d50 1
a50 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
d70 1
a70 1
    variable ::tk::Priv
d84 1
a84 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
@


1.19.6.2
log
@sync to HEAD...
@
text
@d32 1
a32 1
    global ::tk::Priv
d38 1
a38 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d50 1
a50 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d70 1
a70 1
    global ::tk::Priv
d84 1
a84 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.18
log
@*- remove old proc - doubleClickHack
@
text
@d37 6
@


1.17
log
@*- use lbdcHack to get around the <Double-1> problem
   (i.e. this event is not consistently recognized)
@
text
@a185 58

proc doubleClickHack {w x y t id type path} {
    global mged_gui
    global mged_default

    switch $type {
	s -
	o {
	    set item [get_listbox_entry $w $x $y]
	}
	m {
	    set item [$w index @@$x,$y]
	}
    }

    if {$mged_gui($id,lastButtonPress) == 0 ||
        $mged_gui($id,lastItem) != $item ||
        [expr {abs($mged_gui($id,lastButtonPress) - $t) > $mged_default(doubleClickTol)}]} {

	switch $type {
	    s -
	    o {
		solid_illum $item
	    }
	    m {
		matrix_illum $path $item
	    }
	}
    } else {
	switch $type {
	    s {
		set sol_data [db get $item]
		set sol_type [lindex $sol_data 0]
		if { $sol_type == "sketch" } {
		    Sketch_editor .#auto $item
		} else {
		    _mged_sed -i 1 $item
		}
		bind $w <ButtonRelease-1> \
			"destroy [winfo parent $w]; break"
	    }
	    o {
		bind $w <ButtonRelease-1> \
			"destroy [winfo parent $w]; build_matrix_menu $id $item; break"
	    }
	    m {
		_mged_press oill
		_mged_ill -i 1 $path
		_mged_matpick $item
		bind $w <ButtonRelease-1> \
			"destroy [winfo parent $w]; break"
	    }
	}
    }

    set mged_gui($id,lastButtonPress) $t
    set mged_gui($id,lastItem) $item
}
@


1.16
log
@*- change solid to primitive
@
text
@d93 1
a93 1
		build_solid_menu s $id $paths
d148 1
a148 1
	    "doubleClickHack %W %x %y %t $id $type junkpath"
d182 1
a182 1
	    "doubleClickHack %W %x %y %t $id m $path"
@


1.15
log
@*- Mods to the doubleClickHack proc to arrange for
   the listbox to be destroyed after it receives
   the <ButtonRelease-1> event. This prevents Tk
   from passing the event along to the main window,
   thus causing strange behavior.
@
text
@d45 2
a46 2
		"No solids are being displayed!"\
		"No solids are being displayed!"\
d141 1
a141 1
    create_listbox $top $screen Solid $rpaths "destroy $top"
@


1.14
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d144 1
a144 1
    bind_listbox $top "<B1-Motion>"\
d147 4
a150 2
    bind_listbox $top "<ButtonPress-1>" "doubleClickHack %W %x %y %t $id $type junkpath"
    bind_listbox $top "<ButtonRelease-1>" "%W selection clear 0 end; _mged_press reject"
d178 1
a178 1
    bind_listbox $top "<B1-Motion>"\
d181 4
a184 4
    bind_listbox $top "<ButtonPress-1>" "doubleClickHack %W %x %y %t $id m $path"
    bind_listbox $top "<ButtonRelease-1>"\
	    "%W selection clear 0 end;\
	    _mged_press reject"
d220 1
a220 1
			Sketch_editor .#auto $item
d222 1
a222 1
			_mged_sed -i 1 $item
d224 2
a225 1
		destroy [winfo parent $w]
d228 2
a229 2
		destroy [winfo parent $w]
		build_matrix_menu $id $item
d235 2
a236 1
		destroy [winfo parent $w]
@


1.13
log
@Added support for SketchEditor
@
text
@d32 1
d44 1
a44 1
	cad_dialog .$id.editDialog $mged_gui($id,screen)\
d64 1
d78 1
a78 1
	cad_dialog .$id.editDialog $mged_gui($id,screen)\
@


1.12
log
@Use ill's and sed's -i option (gets around
the multiply referenced problem).
Hack to fix double-click problem in listbox.
@
text
@d213 7
a219 1
		_mged_sed -i 1 $item
@


1.11
log
@List last e'd solid first in listbox.
@
text
@d89 1
a89 1
		_mged_ill [lindex $paths 0]
d97 1
a97 1
		_mged_ill [lindex $paths 0]
d142 4
a145 31
    switch $type {
	s {
	    bind_listbox $top "<B1-Motion>"\
		    "set item \[get_listbox_entry %W %x %y\];\
		    solid_illum \$item"
	    bind_listbox $top "<ButtonPress-1>"\
		    "set item \[get_listbox_entry %W %x %y\];\
		    solid_illum \$item"
	    bind_listbox $top "<Double-1>"\
		    "set item \[get_listbox_entry %W %x %y\];\
		    _mged_sed \$item;\ 
		    destroy $top"
	}
	o {
	    bind_listbox $top "<B1-Motion>"\
		    "set item \[get_listbox_entry %W %x %y\];\
		    solid_illum \$item"
	    bind_listbox $top "<ButtonPress-1>"\
		    "set item \[get_listbox_entry %W %x %y\];\
		    solid_illum \$item"
	    bind_listbox $top "<Double-1>"\
		    "set item \[get_listbox_entry %W %x %y\];\
		    build_matrix_menu $id \$item;\
		    destroy $top"
	}
	default {
	    destroy $top
	    return "build_solid_menu: bad type - $type"
	}
    }

d177 1
a177 9
    bind_listbox $top "<ButtonPress-1>"\
	    "set path_pos \[%W index @@%x,%y\];\
	    matrix_illum $path \$path_pos"
    bind_listbox $top "<Double-1>"\
	    "set path_pos \[%W index @@%x,%y\];\
	    _mged_press oill;\
	    _mged_ill $path;\
	    _mged_matpick \$path_pos;\
	    destroy $top"
d181 50
@


1.11.2.1
log
@Use the new -i option for the
sed and ill commands.
@
text
@d89 1
a89 1
		_mged_ill -i 1 [lindex $paths 0]
d97 1
a97 1
		_mged_ill -i 1 [lindex $paths 0]
d152 1
a152 1
		    _mged_sed -i 1 \$item;\ 
d210 1
a210 1
	    _mged_ill -i 1 $path;\
@


1.11.2.2
log
@Hack to fix double-click problem in listbox.
@
text
@d142 31
a172 4
    bind_listbox $top "<B1-Motion>"\
	    "set item \[get_listbox_entry %W %x %y\];\
	    solid_illum \$item"
    bind_listbox $top "<ButtonPress-1>" "doubleClickHack %W %x %y %t $id $type junkpath"
d204 9
a212 1
    bind_listbox $top "<ButtonPress-1>" "doubleClickHack %W %x %y %t $id m $path"
a215 50
}

proc doubleClickHack {w x y t id type path} {
    global mged_gui
    global mged_default

    switch $type {
	s -
	o {
	    set item [get_listbox_entry $w $x $y]
	}
	m {
	    set item [$w index @@$x,$y]
	}
    }

    if {$mged_gui($id,lastButtonPress) == 0 ||
        $mged_gui($id,lastItem) != $item ||
        [expr {abs($mged_gui($id,lastButtonPress) - $t) > $mged_default(doubleClickTol)}]} {

	switch $type {
	    s -
	    o {
		solid_illum $item
	    }
	    m {
		matrix_illum $path $item
	    }
	}
    } else {
	switch $type {
	    s {
		_mged_sed -i 1 $item
		destroy [winfo parent $w]
	    }
	    o {
		destroy [winfo parent $w]
		build_matrix_menu $id $item
	    }
	    m {
		_mged_press oill
		_mged_ill -i 1 $path
		_mged_matpick $item
		destroy [winfo parent $w]
	    }
	}
    }

    set mged_gui($id,lastButtonPress) $t
    set mged_gui($id,lastItem) $item
@


1.11.2.3
log
@Added support for SketchEditor
@
text
@d213 1
a213 7
		set sol_data [db get $item]
		set sol_type [lindex $sol_data 0]
		if { $sol_type == "sketch" } {
			Sketch_editor .#auto $item
		} else {
			_mged_sed -i 1 $item
		}
@


1.11.2.4
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@a31 1
    global tkPriv
d43 1
a43 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
a62 1
    global tkPriv
d76 1
a76 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.11.2.5
log
@*- Mods to the doubleClickHack proc to arrange for
   the listbox to be destroyed after it receives
   the <ButtonRelease-1> event. This prevents Tk
   from passing the event along to the main window,
   thus causing strange behavior.
@
text
@d144 1
a144 1
    bind_listbox $top <B1-Motion> \
d147 2
a148 4
    bind_listbox $top "<ButtonPress-1>" \
	    "doubleClickHack %W %x %y %t $id $type junkpath"
    bind_listbox $top "<ButtonRelease-1>" \
	    "%W selection clear 0 end; _mged_press reject"
d176 1
a176 1
    bind_listbox $top "<B1-Motion>" \
d179 4
a182 4
    bind_listbox $top "<ButtonPress-1>" \
	    "doubleClickHack %W %x %y %t $id m $path"
    bind_listbox $top "<ButtonRelease-1>" \
	    "%W selection clear 0 end; _mged_press reject"
d218 1
a218 1
		    Sketch_editor .#auto $item
d220 1
a220 1
		    _mged_sed -i 1 $item
d222 1
a222 2
		bind $w <ButtonRelease-1> \
			"destroy [winfo parent $w]; break"
d225 2
a226 2
		bind $w <ButtonRelease-1> \
			"destroy [winfo parent $w]; build_matrix_menu $id $item; break"
d232 1
a232 2
		bind $w <ButtonRelease-1> \
			"destroy [winfo parent $w]; break"
@


1.11.2.6
log
@*- change solid to primitive
@
text
@d45 2
a46 2
		"No primitives are being displayed!"\
		"No primitives are being displayed!"\
d141 1
a141 1
    create_listbox $top $screen Primitive $rpaths "destroy $top"
@


1.11.2.7
log
@*- use lbdcHack
@
text
@d93 1
a93 1
		build_solid_menu s1 $id $paths
d148 1
a148 1
	    "lbdcHack %W %x %y %t $id $type junkpath"
d182 1
a182 1
	    "lbdcHack %W %x %y %t $id m1 $path"
@


1.10
log
@*- now calling _mged_sed to enter solid edit
@
text
@d134 6
a139 1
    create_listbox $top $screen Solid $paths "destroy $top"
@


1.9
log
@*- add motion bindings to highlight geometric objects
   as the mouse traverses items in the list
@
text
@d147 1
a147 2
		    _mged_press sill;\
		    _mged_ill \$item;\
@


1.8
log
@*- call mged_apply_all with pathname of current display manager window
@
text
@d139 3
d144 1
a144 1
		    solid_illum \$item; break"
d149 1
a149 1
		    destroy $top; break"
d152 3
d157 1
a157 1
		    solid_illum \$item; break"
d161 1
a161 1
		    destroy $top; break"
d169 1
a169 1
    bind_listbox $top "<ButtonRelease-1>" "%W selection clear 0 end; _mged_press reject; break"
d197 3
d202 1
a202 1
	    matrix_illum $path \$path_pos; break"
d208 1
a208 1
	    destroy $top; break"
d211 1
a211 1
	    _mged_press reject; break"
@


1.7
log
@*- cleanup variables
@
text
@d53 1
a53 1
    mged_apply_all "set mouse_behavior d"
d108 1
a108 1
    mged_apply_all "set mouse_behavior d"
@


1.6
log
@*- append "break" to bindings to prevent further processing
@
text
@d12 1
a12 1
if ![info exists mged_default_display] {
d14 1
a14 1
	set mged_default_display $env(DISPLAY)
d16 1
a16 1
	set mged_default_display :0
d20 2
a21 2
if ![info exists player_screen(mged)] {
    set player_screen(mged) $mged_default_display
a28 1
    global player_screen
d30 1
a30 1
    global mged_mouse_behavior
a31 2
    global mged_active_dm
    global mged_edit_menu
d36 3
a38 3
    if {[info exists mged_edit_menu($id)] && \
	    [winfo exists $mged_edit_menu($id)]} {
	destroy $mged_edit_menu($id)
d43 1
a43 1
	cad_dialog .$id.editDialog $player_screen($id)\
d55 1
a55 1
	set mged_mouse_behavior($id) d
a59 1
    global player_screen
d61 1
a61 1
    global mged_mouse_behavior
a62 2
    global mged_active_dm
    global mged_edit_menu
d67 3
a69 3
    if {[info exists mged_edit_menu($id)] && \
	    [winfo exists $mged_edit_menu($id)]} {
	destroy $mged_edit_menu($id)
d76 1
a76 1
	cad_dialog .$id.editDialog $player_screen($id)\
d110 1
a110 1
	set mged_mouse_behavior($id) d
d115 1
a115 2
    global player_screen
    global mged_edit_menu
d117 3
a119 3
    if {[info exists mged_edit_menu($id)] && \
	    [winfo exists $mged_edit_menu($id)]} {
	destroy $mged_edit_menu($id)
d127 2
a128 2
    if [info exists player_screen($id)] {
	set screen $player_screen($id)
d135 1
a135 1
    set mged_edit_menu($id) $top
d167 1
a167 2
    global player_screen
    global mged_edit_menu
d169 3
a171 3
    if {[info exists mged_edit_menu($id)] && \
	    [winfo exists $mged_edit_menu($id)]} {
	destroy $mged_edit_menu($id)
d179 2
a180 2
    if [info exists player_screen($id)] {
	set screen $player_screen($id)
d189 1
a189 1
    set mged_edit_menu($id) $top
@


1.5
log
@*- use cad_dialog instead of mged_dialog
@
text
@d148 1
a148 1
		    solid_illum \$item"
d153 1
a153 1
		    destroy $top"
d158 1
a158 1
		    solid_illum \$item"
d162 1
a162 1
		    destroy $top"
d170 1
a170 1
    bind_listbox $top "<ButtonRelease-1>" "%W selection clear 0 end; _mged_press reject"
d201 1
a201 1
	    matrix_illum $path \$path_pos"
d207 1
a207 1
	    destroy $top"
d210 1
a210 1
	    _mged_press reject"
@


1.4
log
@modified procs: build_solid_menu and build_matrix_menu
@
text
@d46 1
a46 1
	mged_dialog .$id.editDialog $player_screen($id)\
d82 1
a82 1
	mged_dialog .$id.editDialog $player_screen($id)\
@


1.3
log
@*- mods to proc build_solid_menu and build_matrix_menu
@
text
@d30 1
d56 4
a59 9
#    if {$mouse_behavior == "c" || \
#	    $mouse_behavior == "o" || \
#	    $mouse_behavior == "s"} {
#	set mouse_behavior d
#	if {[info exists mged_active_dm($id)] && $win == $mged_active_dm($id)} {
#	    set mged_mouse_behavior($id) d
#	    set tmp ""
#	}
#    }
d64 1
d114 4
a117 9
#    if {$mouse_behavior == "c" || \
#	    $mouse_behavior == "o" || \
#	    $mouse_behavior == "s"} {
#	set mouse_behavior d
#	if {[info exists mged_active_dm($id)] && $win == $mged_active_dm($id)} {
#	    set mged_mouse_behavior($id) d
#	    set tmp ""
#	}
#    }
d146 8
a153 2
	    bind_listbox $top "<ButtonPress-1>" "solid_illum %W %x %y 1"
	    bind_listbox $top "<Double-1>" "solid_illum %W %x %y 0; destroy $top"
d156 7
a162 2
	    bind_listbox $top "<ButtonPress-1>" "obj_illum $id %W %x %y 1"
	    bind_listbox $top "<Double-1>" "obj_illum $id %W %x %y 0; destroy $top"
d199 12
a210 4
    bind_listbox $top "<ButtonPress-1>" "matrix_illum %W %x %y 1"
    bind_listbox $top "<Double-1>" "matrix_illum %W %x %y 0; destroy $top"
    bind_listbox $top "<ButtonRelease-1>" "%W selection clear 0 end; _mged_press reject;\
	    _mged_press oill; _mged_ill $path"
@


1.2
log
@*- add code to destroy any existing edit menus before creating
	a new one
@
text
@d149 1
a149 1
    create_listbox $top $screen Solid $paths
d193 1
a193 2
    create_listbox $top $screen Matrix $path_components

@


1.1
log
@Initial revision
@
text
@d33 1
d38 5
d71 1
d76 5
d130 6
a137 1

d150 1
d172 6
a179 1

d194 2
@
