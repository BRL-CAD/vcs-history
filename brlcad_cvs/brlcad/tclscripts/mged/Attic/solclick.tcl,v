head	1.9;
access;
symbols
	ansi-20040405-merged:1.8
	postmerge-20040405-ansi:1.8
	premerge-20040404-ansi:1.8
	postmerge-autoconf:1.8
	autoconf-freeze:1.8
	premerge-autoconf:1.8
	postmerge-20040315-windows:1.8
	premerge-20040315-windows:1.8
	windows-20040315-freeze:1.8
	autoconf-20031203:1.8
	autoconf-20031202:1.8
	autoconf-branch:1.8.0.12
	phong-branch:1.8.0.10
	photonmap-branch:1.8.0.8
	rel-6-1-DP:1.8
	windows-branch:1.8.0.6
	rel-6-0-2:1.8
	ansi-branch:1.8.0.4
	rel-6-0-1-branch:1.8.0.2
	hartley-6-0-post:1.8
	hartley-6-0-pre:1.8
	rel-6-0-1:1.8
	rel-6-0:1.8
	rel-5-4:1.6
	offsite-5-3-pre:1.6
	rel-5-3:1.6
	rel-5-2:1.6
	rel-5-1-branch:1.6.0.2
	rel-5-1:1.6
	rel-5-0:1.6
	rel-5-0-beta:1.6
	rel-4-5:1.5;
locks; strict;
comment	@# @;


1.9
date	2004.05.21.16.41.32;	author morrison;	state dead;
branches;
next	1.8;

1.8
date	2001.11.05.21.20.07;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.03.22.33.04;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	99.01.19.22.31.31;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	96.08.26.17.43.30;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	96.07.09.19.42.50;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	95.07.25.17.54.08;	author gdurf;	state Exp;
branches;
next	1.2;

1.2
date	95.07.20.15.14.44;	author gdurf;	state Exp;
branches;
next	1.1;

1.1
date	95.07.20.13.46.48;	author gdurf;	state Exp;
branches;
next	;


desc
@Tk script for clicking on a solid
@


1.9
log
@moved to src/tclscripts/
@
text
@#
# Modifications -
#        (Bob Parker):
#             Generalized the code to accommodate multiple instances of the
#             user interface.
#

#
#    Preliminary...
#    Ensure that all commands used here but not defined herein
#    are provided by the application
#

set extern_commands "M _mged_M"
foreach cmd $extern_commands {
    if {[expr [string compare [info command $cmd] $cmd] != 0]} {
	puts stderr "Application fails to provide command '$cmd'"
	return
    }
}

proc solclick { } {
    echo \nShoot a ray by clicking the middle mouse button.
    # Replace mouse event handler
    proc M { up x y } {
	if {$up == 0} {
	    return
	}

	# Reset mouse event handler
	proc M args {
	    eval [concat _mged_M $args]
	}	

#	set w .solclick$id
	set w .metasolclick.solclick

	catch { destroy $w }

	set solids [solids_on_ray $x $y]

#	toplevel $w -screen $mged_gui($id,screen)
	toplevel $w
	wm title $w "Primitive edit"
	set i 0
	foreach solid $solids {
	    button $w.s$i -text [lindex [split $solid /] end] \
		    -command "destroy $w; sed $solid"
	    pack $w.s$i -side top -fill x -expand yes
	    incr i
	}
	button $w.s$i -text "Cancel" -command "destroy $w"
	pack $w.s$i -side top -fill x -expand yes
    }
}

proc init_solclick { id } {
    global mged_gui
    global solclick_user

    set w .metasolclick
    if [winfo exists $w] {
	mged_dialog .solclick_dialog $mged_gui($id,screen) "In Use" "The primitive click tool is in use by $solclick_user" info 0 OK
	return
    }
    
#    catch { destroy $w }
    set solclick_user $id
    toplevel $w -screen $mged_gui($id,screen)
    wm title $w "My 1st menu"
    button $w.s0 -text "PRIMITIVE CLICK" -command "solclick"
    pack $w.s0 -side top -fill x -fill y -expand yes
}
@


1.8
log
@Solid to Primitive naming convention conversions
@
text
@@


1.7
log
@*- mods requested by Eric regarding consistency
   when using capitalization in the GUI
@
text
@d44 1
a44 1
	wm title $w "Solid edit"
d63 1
a63 1
	mged_dialog .solclick_dialog $mged_gui($id,screen) "In Use" "The solid click tool is in use by $solclick_user" info 0 OK
d71 1
a71 1
    button $w.s0 -text "SOLID CLICK" -command "solclick"
@


1.6
log
@*- cleanup variables
@
text
@d52 1
a52 1
	button $w.s$i -text "CANCEL" -command "destroy $w"
@


1.5
log
@provide check to ensure that all commands used here but not
defined herein are provided by the application
@
text
@d42 1
a42 1
#	toplevel $w -screen $player_screen($id)
d58 1
a58 1
    global player_screen
d63 1
a63 1
	mged_dialog .solclick_dialog $player_screen($id) "In Use" "The solid click tool is in use by $solclick_user" info 0 OK
d69 1
a69 1
    toplevel $w -screen $player_screen($id)
@


1.4
log
@generalized to allow multiple instances
@
text
@d7 15
@


1.3
log
@Cleanup
@
text
@d1 6
d11 4
d18 6
a23 2
	}
	catch { destroy .solclick }
d26 4
a29 3
	
	toplevel .solclick
	wm title .solclick "Solid edit"
d32 3
a34 3
	    button .solclick.s$i -text [lindex [split $solid /] end] \
		    -command "destroy .solclick; sed $solid"
	    pack .solclick.s$i -side top -fill x -expand yes
d37 2
a38 2
	button .solclick.s$i -text "CANCEL" -command "destroy .solclick"
	pack .solclick.s$i -side top -fill x -expand yes
d42 3
a44 1
catch { destroy .metasolclick }
d46 13
a58 4
toplevel .metasolclick
wm title .metasolclick "My 1st menu"
button .metasolclick.s0 -text "SOLID CLICK" -command "solclick"
pack .metasolclick.s0 -side top -fill x -fill y -expand yes
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
    echo Shoot a ray by clicking the middle mouse button.
a11 4
	set len [llength $solids]
	echo \"solids_on_ray $x $y\" sees $len solid(s)
	if { $len<=0 } then return
	echo Solid list: $solids
d17 1
a17 1
	    button .solclick.s$i -text $solid \
d19 1
a19 1
	    pack .solclick.s$i -side top -fill x
d22 2
a23 3
	button .solclick.s$i -text "CANCEL" \
	    -command "destroy .solclick"
	pack .solclick.s$i -side top -fill x
d32 1
a32 1
pack .metasolclick.s0 -side top -fill x
@


1.1
log
@Initial revision
@
text
@d32 2
d36 1
a36 2
button .metasolclick.s0 -text "SOLID CLICK" \
	-command "solclick"
@
