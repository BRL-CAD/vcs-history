head	1.21;
access;
symbols
	ansi-20040405-merged:1.18.4.1
	postmerge-20040405-ansi:1.20
	premerge-20040404-ansi:1.20
	postmerge-autoconf:1.20
	autoconf-freeze:1.19.6.1
	premerge-autoconf:1.20
	postmerge-20040315-windows:1.20
	premerge-20040315-windows:1.20
	windows-20040315-freeze:1.18.6.2
	autoconf-20031203:1.19
	autoconf-20031202:1.19
	autoconf-branch:1.19.0.6
	phong-branch:1.19.0.4
	photonmap-branch:1.19.0.2
	rel-6-1-DP:1.18
	windows-branch:1.18.0.6
	rel-6-0-2:1.18
	ansi-branch:1.18.0.4
	rel-6-0-1-branch:1.18.0.2
	hartley-6-0-post:1.18
	hartley-6-0-pre:1.18
	rel-6-0-1:1.18
	rel-6-0:1.18
	rel-5-4:1.14.2.2
	offsite-5-3-pre:1.16
	rel-5-3:1.14.2.2
	rel-5-2:1.14
	rel-5-1-branch:1.14.0.2
	rel-5-1:1.14
	rel-5-0:1.14
	rel-5-0-beta:1.13;
locks; strict;
comment	@# @;


1.21
date	2004.05.21.16.41.33;	author morrison;	state dead;
branches;
next	1.20;

1.20
date	2004.02.02.17.39.44;	author morrison;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.13.19.45.33;	author jra;	state Exp;
branches
	1.19.6.1;
next	1.18;

1.18
date	2001.06.18.19.28.16;	author bparker;	state Exp;
branches
	1.18.4.1
	1.18.6.1;
next	1.17;

1.17
date	2001.06.13.21.07.43;	author bparker;	state Exp;
branches;
next	1.16;

1.16
date	2000.11.01.21.58.20;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	2000.10.23.21.41.21;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	99.09.08.13.09.13;	author bparker;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	99.04.12.21.45.30;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	99.01.27.20.36.25;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	99.01.26.19.05.18;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	99.01.19.22.31.31;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	98.12.18.21.57.35;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	98.10.22.18.38.39;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	98.10.21.17.45.56;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	98.05.07.14.36.58;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.05.01.12.56.18;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.04.06.17.07.33;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.04.01.17.57.42;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.03.20.22.38.41;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.03.06.22.56.23;	author bparker;	state Exp;
branches;
next	;

1.14.2.1
date	2000.10.23.21.37.46;	author bparker;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2000.11.01.21.58.50;	author bparker;	state Exp;
branches;
next	;

1.18.4.1
date	2004.03.17.21.23.16;	author morrison;	state Exp;
branches;
next	;

1.18.6.1
date	2002.09.26.23.04.21;	author morrison;	state Exp;
branches;
next	1.18.6.2;

1.18.6.2
date	2004.03.11.23.49.00;	author morrison;	state Exp;
branches;
next	;

1.19.6.1
date	2004.02.12.18.34.49;	author erikg;	state Exp;
branches;
next	;


desc
@Utility routines called by MGED's Tcl/Tk command window(s)
@


1.21
log
@moved to src/tclscripts/
@
text
@#                            T E X T . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Ballistic Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1995-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	Utility routines called by MGED's Tcl/Tk command window(s).
#
# $Revision:
#

proc distribute_text { w cmd str } {
    global mged_players
    global mged_default

    set src_id [get_player_id_t $w]
    foreach id $mged_players {
	set _w .$id.t
	if [winfo exists $_w] {
	    if {$w != $_w} {
		set _promptBegin [$_w index {end - 1 l}]
		$_w mark set curr insert
		$_w mark set insert $_promptBegin

		if {$cmd != ""} {
		    mged_print_tag $_w "mged:$src_id> " prompt
		    mged_print_tag $_w $cmd\n oldcmd
		}

		if {$str != ""} {
		    if {[string index $str end] == "\n"} {
			mged_print_tag $_w $str result
		    } else {
			mged_print_tag $_w $str\n result
		    }
		}

		$_w mark set insert curr
		$_w see insert
	    }

	    # get rid of oldest output
	    set nlines [expr int([$_w index end])]
	    if {$nlines > $mged_default(max_text_lines)} {
		$_w delete 1.0 [expr $nlines - $mged_default(max_text_lines)].end
	    }
	}
    }
}

proc get_player_id_dm { win } {
    global win_to_id

    if [info exists win_to_id($win)] {
	return $win_to_id($win)
    }

    return "mged"
}

proc first_char_in_line { w } {
    $w mark set insert promptEnd
    set c [$w get insert]
    if {$c == " "} {
	forward_word $w
    }
    cursor_highlight $w
}

proc beginning_of_line { w } {
    $w mark set insert promptEnd
    cursor_highlight $w
}

proc end_of_line { w } {
    $w mark set insert {end - 2c}
    cursor_highlight $w
    $w see insert
}

proc backward_char { w } {
    if [$w compare insert > promptEnd] {
	$w mark set insert {insert - 1c}
	cursor_highlight $w
    }
}

proc forward_char { w } {
    if [$w compare insert < {end - 2c}] {
	$w mark set insert {insert + 1c}
	cursor_highlight $w
    }
}

proc backward_word { w } {
    set ti [$w search -backwards -regexp "\[ \t\]\[^ \t\]" {insert - 1c} promptEnd]
    if [string length $ti] {
	$w mark set insert "$ti + 1c"
    } else {
	$w mark set insert promptEnd
    }

    cursor_highlight $w
}

proc forward_word { w } {
    set ti [$w search -forward -regexp "\[ \t\]\[^ \t\]" insert {end - 2c}]
    if [string length $ti] {
	$w mark set insert "$ti + 1c"
	cursor_highlight $w
    }
}

proc end_word { w } {
    set ti [$w search -forward -regexp "\[^ \t\]\[ \t\]" {insert + 1c} {end - 2c}]
    if [string length $ti] {
	$w mark set insert $ti
    } else {
	$w mark set insert {end - 2c}
    }

    cursor_highlight $w
}

proc backward_delete_char { w } {
#    catch {$w tag remove sel sel.first promptEnd}
    if [$w compare insert > promptEnd] {
	$w mark set insert {insert - 1c}
	$w delete insert
	cursor_highlight $w
    }
}

proc delete_char { w } {
#    catch {$w tag remove sel sel.first promptEnd}
    if {[$w compare insert >= promptEnd] && [$w compare insert < {end - 2c}]} {
	$w delete insert
	cursor_highlight $w
    }
}

proc backward_delete_word { w } {
    set ti [$w search -backwards -regexp "\[ \t\]\[^ \t\]" {insert - 1c} promptEnd]
    if [string length $ti] {
	$w delete "$ti + 1c" insert
    } else {
	$w delete promptEnd insert
    }
    cursor_highlight $w
}

proc delete_word { w } {
    set ti [$w search -forward -regexp "\[ \t\]\[^ \t\]" {insert + 1c} {end - 2c}]
    if [string length $ti] {
	$w delete insert "$ti + 1c"
    } else {
	$w delete insert "end - 2c"
    }

    cursor_highlight $w
}

proc delete_end_word { w } {
    set ti [$w search -forward -regexp "\[^ \t\]\[ \t\]" {insert + 1c} {end - 2c}]
    if [string length $ti] {
	$w delete insert "$ti + 1c"
    } else {
	$w delete insert "end - 2c"
    }

    cursor_highlight $w
}


proc delete_line { w } {
    $w delete promptEnd end-2c
    cursor_highlight $w
}

proc delete_end_of_line { w } {
    $w delete insert end-2c
    cursor_highlight $w
}

proc delete_beginning_of_line { w } {
    $w delete promptEnd insert
    cursor_highlight $w
}

proc next_command { w } {
    global mged_gui

    set id [get_player_id_t $w]
    cmd_win set $id
    set result [catch {hist next} msg]

    if {$result==0} {
	$w delete promptEnd {end - 2c}
	$w mark set insert promptEnd
	$w insert insert [string range $msg 0 \
		[expr [string length $msg]-2]]

	cursor_highlight $w
	$w see insert
    } else {
	if {!$mged_gui($w,freshline)} {
	    $w delete promptEnd {end - 2c}
	    $w mark set insert promptEnd
	    $w insert insert [string range $mged_gui($w,scratchline) 0\
		    [expr [string length $mged_gui($w,scratchline)] - 1]]
	    set mged_gui($w,freshline) 1
	    cursor_highlight $w
	}
    }
}

proc prev_command { w } {
    global mged_gui

    set id [get_player_id_t $w]
    cmd_win set $id
    set result [catch {hist prev} msg]

    if {$result==0} {
	if {$mged_gui($w,freshline)} {
	    set mged_gui($w,scratchline) [$w get promptEnd {end -2c}]
	    set mged_gui($w,freshline) 0
	}

	$w delete promptEnd {end - 2c}
	$w mark set insert promptEnd

	$w insert insert [string range $msg 0 \
		[expr [string length $msg]-2]]

	cursor_highlight $w
	$w see insert
    }
}

proc transpose { w } {
    if {[$w compare insert > promptEnd] && [$w compare {end - 2c} > {promptEnd + 1c}]} {
	if [$w compare insert >= {end - 2c}] {
	    set before [$w get {insert - 2c}]
	    $w delete {insert - 2c}
	    $w insert insert $before
	} else {
	    set before [$w get {insert - 1c}]
	    $w delete {insert - 1c}
	    $w insert {insert + 1c} $before
	    $w mark set insert {insert + 2c}
	}
    }
    cursor_highlight $w
}

proc execute_cmd { w } {
    global mged_gui

    $w mark set insert {end - 2c}
    $w insert insert \n

    $w see insert
    update

    ia_invoke $w
    set mged_gui($w,freshline) 1
    cursor_highlight $w
}

proc interrupt_cmd { w } {
    global mged_gui

    set id [get_player_id_t $w]
    set mged_gui($id,cmd_prefix) ""
    set mged_gui($id,more_default) ""
    $w insert insert \n
    mged_print_prompt $w "mged> "
    $w see insert
}

##################################################################################
#                                                                                #
#                        VI Specific Callbacks                                   #
#                                                                                #
##################################################################################
proc vi_edit_mode { w } {
    bind $w <BackSpace> {
	backward_char %W
	break
    }

    bind $w <space> {
	forward_char %W
	break
    }

    bind $w <KeyPress> {
	vi_process_edit_cmd %W %A %s
	break
    }
}

proc vi_overwrite_mode { w } {
    bind $w <BackSpace> {
	backward_delete_char %W
	break
    }

    bind $w <space> {
	delete_char %W
	%W insert insert %A
	break
    }

    bind $w <KeyPress> {
	vi_process_overwrite %W %A %s
	break
    }
}

proc vi_insert_mode { w } {
    bind $w <BackSpace> {
	backward_delete_char %W
	break
    }

    bind $w <space> {}

    bind $w <KeyPress> {}
}

proc vi_process_edit_cmd { w c state } {
    global vi_state

    set vi_state($w,debug) $c

    # Throw away all non-visible characters
    if {![string match \[!-~\] $c] || $state > 1} {
	return
    }

    if {$vi_state($w,overwrite_flag)} {
	delete_char $w
	$w insert insert $c
	set vi_state($w,overwrite_flag) 0

	return
    }

    switch $vi_state($w,search_flag) {
	f {
	    set vi_state($w,search_dir) forward
	    set vi_state($w,search_char) $c
	    set newindex [$w search $c {insert + 1c} {end - 2c}]
	    if {$newindex != ""} {
		if {$vi_state($w,delete_flag)} {
		    $w delete insert $newindex+1c
		} elseif {$vi_state($w,change_flag)} {
		    $w delete insert $newindex+1c
		    vi_insert_mode $w
		} else {
		    $w mark set insert $newindex
		}

		cursor_highlight $w
	    }

	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	    set vi_state($w,search_flag) 0

	    return
	}
	F {
	    set vi_state($w,search_dir) backward
	    set vi_state($w,search_char) $c
	    set newindex [$w search -backwards $c {insert - 1c} promptEnd]
	    if {$newindex != ""} {
		if {$vi_state($w,delete_flag)} {
		    $w delete $newindex insert
		} elseif {$vi_state($w,change_flag)} {
		    $w delete $newindex insert
		    vi_insert_mode $w
		} else {
		    $w mark set insert $newindex
		}

		cursor_highlight $w
	    }

	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	    set vi_state($w,search_flag) 0

	    return
	}
    }

    switch $c {
	; {
	    set vi_state($w,delete_flag) 0
	    if {$vi_state($w,search_char) == ""} {
		return
	    }

	    switch $vi_state($w,search_dir) {
		forward {
		    set newindex [$w search $vi_state($w,search_char) {insert + 1c} {end - 2c}]
		    if {$newindex != ""} {
			if {$vi_state($w,delete_flag)} {
			    $w delete insert $newindex+1c
			    set vi_state($w,delete_flag) 0
			} elseif {$vi_state($w,change_flag)} {
			    $w delete insert $newindex+1c
			    vi_insert_mode $w
			    set vi_state($w,change_flag) 0
			} else {
			    $w mark set insert $newindex
			}
			cursor_highlight $w
		    }
		}
		backward {
		    set newindex [$w search -backwards $vi_state($w,search_char) {insert - 1c} promptEnd]
		    if {$newindex != ""} {
			if {$vi_state($w,delete_flag)} {
			    $w delete $newindex insert
			    set vi_state($w,delete_flag) 0
			} elseif {$vi_state($w,change_flag)} {
			    $w delete $newindex insert
			    vi_insert_mode $w
			    set vi_state($w,change_flag) 0
			} else {
			    $w mark set insert $newindex
			}
			cursor_highlight $w
		    }
		}
	    }
	}
	, {
	    set vi_state($w,delete_flag) 0
	    if {$vi_state($w,search_char) == ""} {
		return
	    }

	    switch $vi_state($w,search_dir) {
		backward {
		    set newindex [$w search $vi_state($w,search_char) {insert + 1c} {end - 2c}]
		    if {$newindex != ""} {
			if {$vi_state($w,delete_flag)} {
			    $w delete insert $newindex+1c
			    set vi_state($w,delete_flag) 0
			} elseif {$vi_state($w,change_flag)} {
			    $w delete insert $newindex+1c
			    vi_insert_mode $w
			    set vi_state($w,change_flag) 0
			} else {
			    $w mark set insert $newindex
			}
			cursor_highlight $w
		    }
		}
		forward {
		    set newindex [$w search -backwards $vi_state($w,search_char) {insert - 1c} promptEnd]
		    if {$newindex != ""} {
			if {$vi_state($w,delete_flag)} {
			    $w delete $newindex insert
			    set vi_state($w,delete_flag) 0
			} elseif {$vi_state($w,change_flag)} {
			    $w delete $newindex insert
			    vi_insert_mode $w
			    set vi_state($w,change_flag) 0
			} else {
			    $w mark set insert $newindex
			}
			cursor_highlight $w
		    }
		}
	    }
	}
	0 {
	    if {$vi_state($w,delete_flag)} {
		delete_beginning_of_line $w
		set vi_state($w,delete_flag) 0
	    } elseif {$vi_state($w,change_flag)} {
		delete_beginning_of_line $w
		vi_insert_mode $w
		set vi_state($w,change_flag) 0
	    } else {
		beginning_of_line $w
	    }
	}
	a {
	    forward_char $w
	    vi_insert_mode $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	b {
	    if {$vi_state($w,delete_flag)} {
		backward_delete_word $w
		set vi_state($w,delete_flag) 0
	    } elseif {$vi_state($w,change_flag)} {
		backward_delete_word $w
		vi_insert_mode $w
		set vi_state($w,change_flag) 0
	    } else {
		backward_word $w
	    }
	}
	c {
	    if {$vi_state($w,change_flag)} {
		delete_line $w
		vi_insert_mode $w
		set vi_state($w,change_flag) 0
	    } else {
		set vi_state($w,change_flag) 1
	    }
	    set vi_state($w,delete_flag) 0
	}
	d {
	    if {$vi_state($w,delete_flag)} {
		delete_line $w
		set vi_state($w,delete_flag) 0
	    } else {
		set vi_state($w,delete_flag) 1
	    }
	    set vi_state($w,change_flag) 0
	}
	e {
	    if {$vi_state($w,delete_flag)} {
		delete_end_word $w
	    } elseif {$vi_state($w,change_flag)} {
		delete_end_word $w
		vi_insert_mode $w
		set vi_state($w,change_flag) 0
	    } else {
		end_word $w
	    }
	    set vi_state($w,delete_flag) 0
	}
	f {
	    set vi_state($w,search_flag) f
	}
	h {
	    if {$vi_state($w,delete_flag)} {
		backward_delete_char $w
		set vi_state($w,delete_flag) 0
	    } elseif {$vi_state($w,change_flag)} {
		backward_delete_char $w
		vi_insert_mode $w
		set vi_state($w,change_flag) 0
	    } else {
		backward_char $w
	    }
	}
	i {
	    vi_insert_mode $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	j {
	    next_command $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	k {
	    prev_command $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	l {
	    if {$vi_state($w,delete_flag)} {
		delete_char $w
		set vi_state($w,delete_flag) 0
	    } elseif {$vi_state($w,change_flag)} {
		delete_char $w
		vi_insert_mode $w
		set vi_state($w,change_flag) 0
	    } else {
		forward_char $w
	    }
	}
	r {
	    set vi_state($w,overwrite_flag) 1
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	s {
	    delete_char $w
	    vi_insert_mode $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	w {
	    if {$vi_state($w,delete_flag)} {
		delete_word $w
		set vi_state($w,delete_flag) 0
	    } elseif {$vi_state($w,change_flag)} {
		delete_word $w
		vi_insert_mode $w
		set vi_state($w,change_flag) 0
	    } else {
		forward_word $w
	    }
	}
	x {
	    delete_char $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	A {
	    end_of_line $w
	    vi_insert_mode $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	C {
	    delete_end_of_line $w
	    vi_insert_mode $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	D {
	    delete_end_of_line $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	F {
	    set vi_state($w,search_flag) F
	}
	I {
	    beginning_of_line $w
	    vi_insert_mode $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	R {
	    vi_overwrite_mode $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	X {
	    backward_delete_char $w
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
	$ {
	    if {$vi_state($w,delete_flag)} {
		delete_end_of_line $w
		set vi_state($w,delete_flag) 0
	    } elseif {$vi_state($w,change_flag)} {
		delete_end_of_line $w
		vi_insert_mode $w
		set vi_state($w,change_flag) 0
	    } else {
		end_of_line $w
	    }
	}
	default {
	    set vi_state($w,delete_flag) 0
	    set vi_state($w,change_flag) 0
	}
    }
}

proc vi_process_overwrite { w c state } {
    # Throw away all non-visible characters
    if {![string match \[!-~\] $c] || $state > 1} {
	return
    }

    delete_char $w
    $w insert insert $c
}
# End - VI Specific Callbacks


proc text_op_begin { w x y } {
    global mged_gui

    set mged_gui($w,moveView) 0
    set mged_gui($w,omx) $x
    set mged_gui($w,omy) $y
    $w scan mark $x $y
}

proc text_paste { w } {
    global mged_gui

    if {!$mged_gui($w,moveView)} {
	catch {$w insert insert [selection get -displayof $w]}
	$w see insert
    }

    if {[$w cget -state] == "normal"} {
	focus $w
    }
}

proc text_scroll { w x y } {
    global mged_gui

    if [expr {abs($mged_gui($w,omx) - $x) > 4 ||
              abs($mged_gui($w,omy) - $y) > 4}] {
	set mged_gui($w,moveView) 1
	$w scan dragto $x $y
    }
}

proc selection_begin { w x y } {
    $w mark set anchor [::tk::TextClosestGap $w $x $y]
    $w tag remove sel 0.0 end

    if {[$w cget -state] == "normal"} {
	focus $w
    }
}

proc selection_add { w x y } {
    set cur [::tk::TextClosestGap $w $x $y]

    if [catch {$w index anchor}] {
	$w mark set anchor $cur
    }

    if [$w compare $cur < anchor] {
	set first $cur
	set last anchor
    } else {
	set first anchor
	set last $cur
    }

    $w tag remove sel 0.0 $first
    $w tag add sel $first $last
    $w tag remove sel $last end
}

proc select_word { w x y } {
    set cur [::tk::TextClosestGap $w $x $y]

    if [catch {$w index anchor}] {
	$w mark set anchor $cur
    }

    if [$w compare $cur < anchor] {
	set first [::tk::TextPrevPos $w "$cur + 1c" tcl_wordBreakBefore]
	set last [::tk::TextNextPos $w "anchor" tcl_wordBreakAfter]
    } else {
	set first [::tk::TextPrevPos $w anchor tcl_wordBreakBefore]
	set last [::tk::TextNextPos $w "$cur - 1c" tcl_wordBreakAfter]
    }

    $w tag remove sel 0.0 $first
    $w tag add sel $first $last
    $w tag remove sel $last end
}

proc select_line { w x y } {
    set cur [::tk::TextClosestGap $w $x $y]

    if [catch {$w index anchor}] {
	$w mark set anchor $cur
    }

    if [$w compare $cur < anchor] {
	set first [$w index "$cur linestart"]
	set last [$w index "anchor - 1c lineend + 1c"]
    } else {
	set first [$w index "anchor linestart"]
	set last [$w index "$cur lineend + 1c"]
    }

    $w tag remove sel 0.0 $first
    $w tag add sel $first $last
    $w tag remove sel $last end
}

proc selection_modify { w x y } {
    ::tk::TextResetAnchor $w @@$x,$y
    selection_add $w $x $y
}

proc mged_print { w str } {
    $w insert insert $str
}

proc mged_print_prompt { w str } {
    mged_print_tag $w $str prompt
    $w mark set promptEnd insert
    $w mark gravity promptEnd left
}

proc mged_print_tag { w str tag } {
    set first [$w index insert]
    $w insert insert $str
    set last [$w index insert]
    $w tag add $tag $first $last
}

proc cursor_highlight { w } {
    $w tag delete hlt
    $w tag add hlt insert
    $w tag configure hlt -background yellow
}

proc set_text_key_bindings { id } {
    global mged_gui

    set w .$id.t
    switch $mged_gui($id,edit_style) {
	vi {
	    vi_insert_mode $w

	    bind $w <Escape> {
		vi_edit_mode %W
		break
	    }

	    bind $w <Left> {
		backward_char %W
		vi_edit_mode %W
		break
	    }

	    bind $w <Right> {
		forward_char %W
		vi_edit_mode %W
		break
	    }


	    bind $w <Control-d> {
		break
	    }

	    bind $w <Control-u> {
		delete_beginning_of_line %W
		break
	    }

	    bind $w <Return> {
		execute_cmd %W
		vi_insert_mode %W
		break
	    }

	    bind $w <KP_Enter> {
		execute_cmd %W
		vi_insert_mode %W
		break
	    }

	    bind $w <Delete> {
		backward_delete_char %W
		break
	    }
	}
	default
	    -
	emacs {
	    bind $w <Escape> {
		break
	    }

	    bind $w <Left> {
		backward_char %W
		break
	    }

	    bind $w <Right> {
		forward_char %W
		break
	    }

	    bind $w <Control-d> {
		delete_char %W
		break
	    }

	    bind $w <Control-u> {
		delete_line %W
		break
	    }

	    bind $w <BackSpace> {
		backward_delete_char %W
		break
	    }

	    bind $w <Delete> {
		backward_delete_char %W
		break
	    }

	    bind $w <Return> {
		execute_cmd %W
		break
	    }

	    bind $w <KP_Enter> {
		execute_cmd %W
		break
	    }

	    bind $w <space> {}

	    bind $w <KeyPress> {}
	}
    }

# Common Key Bindings
    bind $w <Control-a> "\
	if {\$mged_gui($id,edit_style) == \"vi\"} {\
	    first_char_in_line %W\
	} else {\
	    beginning_of_line %W\
	};\
	break"

    bind $w <Control-b> {
	backward_char %W
	break
    }

    bind $w <Control-c> "\
	interrupt_cmd %W;\
	if {\$mged_gui($id,edit_style) == \"vi\"} {\
	    vi_insert_mode %W\
	};\
	break"

    bind $w <Control-e> {
	end_of_line %W
	break
    }

    bind $w <Control-f> {
	forward_char %W
	break
    }

    bind $w <Control-k> {
	delete_end_of_line %W
	break
    }

    bind $w <Control-n> {
	next_command %W
	break
    }

    bind $w <Control-o> {
	break
    }

    bind $w <Control-p> {
	prev_command %W
	break
    }

    bind $w <Control-t> {
	transpose %W
	break
    }

    bind $w <Control-w> {
	backward_delete_word %W
	break
    }

    bind $w <Up> {
	prev_command %W
	break
    }

    bind $w <Down> {
	next_command %W
	break
    }

    bind $w <Home> {
	beginning_of_line %W
	break
    }

    bind $w <End> {
	end_of_line %W
	break
    }

    bind $w <Meta-d> {
	if [%W compare insert < promptEnd] {
	    break
	}
	cursor_highlight %W
    }

    bind $w <Meta-BackSpace> {
	if [%W compare insert <= promptEnd] {
	    break
	}
	cursor_highlight %W
    }

    bind $w <Alt-Key> {
	::tk::TraverseToMenu %W %A
	break
    }
}

proc set_text_button_bindings { w } {
    bind $w <1> {
	selection_begin %W %x %y
	break
    }

    bind $w <B1-Motion> {
	selection_add %W %x %y
	break
    }

    bind $w <Double-1> {
	select_word %W %x %y
	break
    }

    bind $w <Triple-1> {
	select_line %W %x %y
	break
    }

    bind $w <Shift-1> {
	selection_modify %W %x %y
	break
    }

    bind $w <Double-Shift-1> {
	break
    }

    bind $w <Triple-Shift-1> {
	break
    }

    bind $w <B1-Leave> {
	break
    }

    bind $w <B1-Enter> {
	break
    }

    bind $w <ButtonRelease-1> {
	break
    }

    bind $w <Control-1> {
	break
    }

    bind $w <ButtonRelease-2> {
	text_paste %W
	break
    }

    bind $w <2> {
	text_op_begin %W %x %y
	break
    }

    bind $w <B2-Motion> {
	text_scroll %W %x %y
	break
    }
}
@


1.20
log
@update copyright to include span through 2003
@
text
@@


1.19
log
@*** empty log message ***
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1995 by the United States Army
@


1.19.6.1
log
@merge from HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1995-2004 by the United States Army
@


1.18
log
@*- mods to distribute_text
@
text
@d727 1
a727 1
    $w mark set anchor [tkTextClosestGap $w $x $y]
d736 1
a736 1
    set cur [tkTextClosestGap $w $x $y]
d756 1
a756 1
    set cur [tkTextClosestGap $w $x $y]
d763 2
a764 2
	set first [tkTextPrevPos $w "$cur + 1c" tcl_wordBreakBefore]
	set last [tkTextNextPos $w "anchor" tcl_wordBreakAfter]
d766 2
a767 2
	set first [tkTextPrevPos $w anchor tcl_wordBreakBefore]
	set last [tkTextNextPos $w "$cur - 1c" tcl_wordBreakAfter]
d776 1
a776 1
    set cur [tkTextClosestGap $w $x $y]
d796 1
a796 1
    tkTextResetAnchor $w @@$x,$y
d1023 1
a1023 1
	tkTraverseToMenu %W %A
@


1.18.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1995-2004 by the United States Army
d727 1
a727 1
    $w mark set anchor [::tk::TextClosestGap $w $x $y]
d736 1
a736 1
    set cur [::tk::TextClosestGap $w $x $y]
d756 1
a756 1
    set cur [::tk::TextClosestGap $w $x $y]
d763 2
a764 2
	set first [::tk::TextPrevPos $w "$cur + 1c" tcl_wordBreakBefore]
	set last [::tk::TextNextPos $w "anchor" tcl_wordBreakAfter]
d766 2
a767 2
	set first [::tk::TextPrevPos $w anchor tcl_wordBreakBefore]
	set last [::tk::TextNextPos $w "$cur - 1c" tcl_wordBreakAfter]
d776 1
a776 1
    set cur [::tk::TextClosestGap $w $x $y]
d796 1
a796 1
    ::tk::TextResetAnchor $w @@$x,$y
d1023 1
a1023 1
	::tk::TraverseToMenu %W %A
@


1.18.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d727 1
a727 1
    $w mark set anchor [::tk::TextClosestGap $w $x $y]
d736 1
a736 1
    set cur [::tk::TextClosestGap $w $x $y]
d756 1
a756 1
    set cur [::tk::TextClosestGap $w $x $y]
d763 2
a764 2
	set first [::tk::TextPrevPos $w "$cur + 1c" tcl_wordBreakBefore]
	set last [::tk::TextNextPos $w "anchor" tcl_wordBreakAfter]
d766 2
a767 2
	set first [::tk::TextPrevPos $w anchor tcl_wordBreakBefore]
	set last [::tk::TextNextPos $w "$cur - 1c" tcl_wordBreakAfter]
d776 1
a776 1
    set cur [::tk::TextClosestGap $w $x $y]
d796 1
a796 1
    ::tk::TextResetAnchor $w @@$x,$y
d1023 1
a1023 1
	::tk::TraverseToMenu %W %A
@


1.18.6.2
log
@sync to HEAD...
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1995-2004 by the United States Army
@


1.17
log
@*- fix for BackSpace, Delete and Ctrl-d
   (They were clearing the cut buffer)
@
text
@d44 5
a48 1
		    mged_print_tag $_w $str\n result
@


1.16
log
@Code to make command window
less sensitive when pasting.
@
text
@d135 1
a135 1
    catch {$w tag remove sel sel.first promptEnd}
d144 1
a144 1
    catch {$w tag remove sel sel.first promptEnd}
@


1.15
log
@When the number of lines in the command window
exceeds mged_default(max_text_lines), get rid
of older excess lines.
@
text
@d694 2
d715 5
a719 2
    set mged_gui($w,moveView) 1
    $w scan dragto $x $y
@


1.14
log
@*- add bindings for KP_Enter
@
text
@d27 1
d49 6
@


1.14.2.1
log
@When the number of text lines in the command
window exceeds mged_default(max_text_lines),
get rid of older output.
@
text
@a26 1
    global mged_default
a47 6
	    }

	    # get rid of oldest output
	    set nlines [expr int([$_w index end])]
	    if {$nlines > $mged_default(max_text_lines)} {
		$_w delete 1.0 [expr $nlines - $mged_default(max_text_lines)].end
@


1.14.2.2
log
@Code to make command window
less sensitive when pasting.
@
text
@a693 2
    set mged_gui($w,omx) $x
    set mged_gui($w,omy) $y
d713 2
a714 5
    if [expr {abs($mged_gui($w,omx) - $x) > 4 ||
              abs($mged_gui($w,omy) - $y) > 4}] {
	set mged_gui($w,moveView) 1
	$w scan dragto $x $y
    }
@


1.13
log
@*-
@
text
@d848 6
d897 5
@


1.12
log
@*- collapse hist_add, hist_next and hist_prev into hist
@
text
@d25 1
a25 1
proc distribute_text { w cmd str} {
@


1.11
log
@*- use cmd_win instead of cmd_set
@
text
@d197 1
a197 1
    set result [catch hist_next msg]
d224 1
a224 1
    set result [catch hist_prev msg]
@


1.10
log
@*- cleanup variables
@
text
@d196 1
a196 1
    cmd_set $id
d223 1
a223 1
    cmd_set $id
@


1.9
log
@*- override binding for <Control-o>
@
text
@d193 1
a193 2
    global freshline
    global scratchline
d208 1
a208 1
	if {!$freshline($w)} {
d211 3
a213 3
	    $w insert insert [string range $scratchline($w) 0\
		    [expr [string length $scratchline($w)] - 1]]
	    set freshline($w) 1
d220 1
a220 2
    global freshline
    global scratchline
d227 3
a229 3
	if {$freshline($w)} {
	    set scratchline($w) [$w get promptEnd {end -2c}]
	    set freshline($w) 0
d260 1
a260 1
    global freshline
d269 1
a269 1
    set freshline($w) 1
d274 1
a274 2
    global ia_cmd_prefix
    global ia_more_default
d277 2
a278 2
    set ia_cmd_prefix($id) ""
    set ia_more_default(id) ""
d336 1
a336 7
    global vi_overwrite_flag
    global vi_change_flag
    global vi_delete_flag
    global vi_search_flag
    global vi_search_char
    global vi_search_dir
    global vi_debug
d338 1
a338 1
    set vi_debug($w) $c
d345 1
a345 1
    if {$vi_overwrite_flag($w)} {
d348 1
a348 1
	set vi_overwrite_flag($w) 0
d353 1
a353 1
    switch $vi_search_flag($w) {
d355 2
a356 2
	    set vi_search_dir($w) forward
	    set vi_search_char($w) $c
d359 1
a359 1
		if {$vi_delete_flag($w)} {
d361 1
a361 1
		} elseif {$vi_change_flag($w)} {
d371 3
a373 3
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
	    set vi_search_flag($w) 0
d378 2
a379 2
	    set vi_search_dir($w) backward
	    set vi_search_char($w) $c
d382 1
a382 1
		if {$vi_delete_flag($w)} {
d384 1
a384 1
		} elseif {$vi_change_flag($w)} {
d394 3
a396 3
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
	    set vi_search_flag($w) 0
d404 2
a405 2
	    set vi_delete_flag($w) 0
	    if {$vi_search_char($w) == ""} {
d409 1
a409 1
	    switch $vi_search_dir($w) {
d411 1
a411 1
		    set newindex [$w search $vi_search_char($w) {insert + 1c} {end - 2c}]
d413 1
a413 1
			if {$vi_delete_flag($w)} {
d415 2
a416 2
			    set vi_delete_flag($w) 0
			} elseif {$vi_change_flag($w)} {
d419 1
a419 1
			    set vi_change_flag($w) 0
d427 1
a427 1
		    set newindex [$w search -backwards $vi_search_char($w) {insert - 1c} promptEnd]
d429 1
a429 1
			if {$vi_delete_flag($w)} {
d431 2
a432 2
			    set vi_delete_flag($w) 0
			} elseif {$vi_change_flag($w)} {
d435 1
a435 1
			    set vi_change_flag($w) 0
d445 2
a446 2
	    set vi_delete_flag($w) 0
	    if {$vi_search_char($w) == ""} {
d450 1
a450 1
	    switch $vi_search_dir($w) {
d452 1
a452 1
		    set newindex [$w search $vi_search_char($w) {insert + 1c} {end - 2c}]
d454 1
a454 1
			if {$vi_delete_flag($w)} {
d456 2
a457 2
			    set vi_delete_flag($w) 0
			} elseif {$vi_change_flag($w)} {
d460 1
a460 1
			    set vi_change_flag($w) 0
d468 1
a468 1
		    set newindex [$w search -backwards $vi_search_char($w) {insert - 1c} promptEnd]
d470 1
a470 1
			if {$vi_delete_flag($w)} {
d472 2
a473 2
			    set vi_delete_flag($w) 0
			} elseif {$vi_change_flag($w)} {
d476 1
a476 1
			    set vi_change_flag($w) 0
d486 1
a486 1
	    if {$vi_delete_flag($w)} {
d488 2
a489 2
		set vi_delete_flag($w) 0
	    } elseif {$vi_change_flag($w)} {
d492 1
a492 1
		set vi_change_flag($w) 0
d500 2
a501 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d504 1
a504 1
	    if {$vi_delete_flag($w)} {
d506 2
a507 2
		set vi_delete_flag($w) 0
	    } elseif {$vi_change_flag($w)} {
d510 1
a510 1
		set vi_change_flag($w) 0
d516 1
a516 1
	    if {$vi_change_flag($w)} {
d519 1
a519 1
		set vi_change_flag($w) 0
d521 1
a521 1
		set vi_change_flag($w) 1
d523 1
a523 1
	    set vi_delete_flag($w) 0
d526 1
a526 1
	    if {$vi_delete_flag($w)} {
d528 1
a528 1
		set vi_delete_flag($w) 0
d530 1
a530 1
		set vi_delete_flag($w) 1
d532 1
a532 1
	    set vi_change_flag($w) 0
d535 1
a535 1
	    if {$vi_delete_flag($w)} {
d537 1
a537 1
	    } elseif {$vi_change_flag($w)} {
d540 1
a540 1
		set vi_change_flag($w) 0
d544 1
a544 1
	    set vi_delete_flag($w) 0
d547 1
a547 1
	    set vi_search_flag($w) f
d550 1
a550 1
	    if {$vi_delete_flag($w)} {
d552 2
a553 2
		set vi_delete_flag($w) 0
	    } elseif {$vi_change_flag($w)} {
d556 1
a556 1
		set vi_change_flag($w) 0
d563 2
a564 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d568 2
a569 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d573 2
a574 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d577 1
a577 1
	    if {$vi_delete_flag($w)} {
d579 2
a580 2
		set vi_delete_flag($w) 0
	    } elseif {$vi_change_flag($w)} {
d583 1
a583 1
		set vi_change_flag($w) 0
d589 3
a591 3
	    set vi_overwrite_flag($w) 1
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d596 2
a597 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d600 1
a600 1
	    if {$vi_delete_flag($w)} {
d602 2
a603 2
		set vi_delete_flag($w) 0
	    } elseif {$vi_change_flag($w)} {
d606 1
a606 1
		set vi_change_flag($w) 0
d613 2
a614 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d619 2
a620 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d625 2
a626 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d630 2
a631 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d634 1
a634 1
	    set vi_search_flag($w) F
d639 2
a640 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d644 2
a645 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d649 2
a650 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d653 1
a653 1
	    if {$vi_delete_flag($w)} {
d655 2
a656 2
		set vi_delete_flag($w) 0
	    } elseif {$vi_change_flag($w)} {
d659 1
a659 1
		set vi_change_flag($w) 0
d665 2
a666 2
	    set vi_delete_flag($w) 0
	    set vi_change_flag($w) 0
d684 1
a684 1
    global moveView
d686 1
a686 1
    set moveView($w) 0
d691 1
a691 1
    global moveView
d693 1
a693 1
    if {!$moveView($w)} {
d704 1
a704 1
    global moveView
d706 1
a706 1
    set moveView($w) 1
d808 1
a808 2
    global mged_edit_style
    global vi_debug_char
d811 1
a811 1
    switch $mged_edit_style($id) {
d903 1
a903 1
	if {\$mged_edit_style($id) == \"vi\"} {\
d917 1
a917 1
	if {\$mged_edit_style($id) == \"vi\"} {\
@


1.8
log
@*- adjust view only if pasting text
@
text
@d952 4
@


1.7
log
@*- mods to move to the next line while waiting for
	a user issued command to finish
*- mods to improve behavior while cycling through history
@
text
@d704 1
a709 2

    $w see insert
@


1.6
log
@*- added more vi bindings
*- some clean up
@
text
@d80 1
d207 1
d241 1
a261 1
#    global mged_edit_style
d266 4
a272 6

#    set win [winset]
#    set id [get_player_id_dm $win]
#    if {$id != "mged" && $mged_edit_style($id) == "vi"} {
#	vi_insert_mode $w
#    }
d709 2
@


1.5
log
@mods to support more vi bindings
@
text
@a52 28
proc insert_char { c } {
    global mged_edit_style
    global dm_insert_char_flag

    set win [winset]
    set id [get_player_id_dm $win]

    if {$id == "mged"} {
	return "mged"
    } else {
	set dm_insert_char_flag 1
	set w .$id.t
	cmd_set $id
	winset $win

	switch $mged_edit_style($id) {
	    vi {
		vi_style $w $c
	    }
	    emacs {
		emacs_style $w $c
	    }
	}

	set dm_insert_char_flag 0
    }
}

a62 218
proc vi_style { w c } {
    global vi_mode
    global vi_debug_char

    set vi_debug_char $c

    switch $vi_mode($w) {
	insert {
	    switch $c {
		"\r"
		    -
		"\n" {
		    # <Return>
		    execute_cmd $w
		}
		"\a" {
		    # <Control-g>
		}
		"\b" {
		    # <Control-h> or <Backspace>
		    backward_delete_char $w
		}
		"\f" {
		    # <Control-l>
		}
		"\v" {
		    # <Control-k>
		}
		"\x01" {
		    # <Control-a>
		}
		"\x02" {
		    # <Control-b>
		}
		"\x03" {
		    # <Control-c>
		}
		"\x04" {
		    # <Control-d>
		}
		"\x05" {
		    # <Control-e>
		}
		"\x06" {
		    # <Control-f>
		}
		"\x0e" {
		    # <Control-n>
		}
		"\x0f" {
		    # <Control-o>
		}
		"\x10" {
		    # <Control-p>
		}
		"\x11" {
		    # <Control-q>
		}
		"\x12" {
		    # <Control-r>
		}
		"\x13" {
		    # <Control-s>
		}
		"\x14" {
		    # <Control-t>
		}
		"\x15" {
		    # <Control-u>
		}
		"\x16" {
		    # <Control-v>
		}
		"\x17" {
		    # <Control-w>
		}
		"\x18" {
		    # <Control-x>
		}
		"\x19" {
		    # <Control-y>
		}
		"\x1a" {
		    # <Control-z>
		}
		"\x1b" {
		    # <Escape>
		    vi_edit_mode $w
		}
		"\x7f" {
		    # <Delete>
		    delete_char $w
		}
		default {
		    $w insert insert $c
		}
	    }
	}
	edit {
	    switch $c {
		"\r"
		    -
		"\n" {
		    # <Return>
		    execute_cmd $w
		}
		default {
		    vi_process_edit_cmd $w $c
		}
	    }
	}
    }
}

proc emacs_style { w c } {
    switch $c {
	"\r"
	     -
	"\n" {
	    # <Return>
	    execute_cmd $w
	}
	"\a" {
	    # <Control-g>
	}
	"\b" {
	    # <Control-h> or <Backspace>
	    backward_delete_char $w
	}
	"\f" {
	    # <Control-l>
	}
	"\v" {
	    # <Control-k>
	    delete_end_of_line $w
	}
	"\x01" {
	    # <Control-a>
	    beginning_of_line $w
	}
	"\x02" {
	    # <Control-b>
	    backward_char $w
	}
	"\x03" {
	    # <Control-c>
	    interrupt_cmd $w
	}
	"\x04" {
	    # <Control-d>
	    delete_char $w
	}
	"\x05" {
	    # <Control-e>
	    end_of_line $w
	}
	"\x06" {
	    # <Control-f>
	    forward_char $w
	}
	"\x0e" {
	    # <Control-n>
	    next_command $w
	}
	"\x0f" {
	    # <Control-o>
	}
	"\x10" {
	    # <Control-p>
	    prev_command $w
	}
	"\x11" {
	    # <Control-q>
	}
	"\x12" {
	    # <Control-r>
	}
	"\x13" {
	    # <Control-s>
	}
	"\x14" {
	    <Control-t>
	    transpose $w
	}
	"\x15" {
	    # <Control-u>
	    delete_line $w
	}
	"\x16" {
	    # <Control-v>
	}
	"\x17" {
	    # <Control-w>
	    backward_delete_word $w
	}
	"\x18" {
	    # <Control-x>
	}
	"\x19" {
	    # <Control-y>
	}
	"\x1a" {
	    # <Control-z>
	}
	"\x1b" {
	    # <Escape>
	    vi_edit_mode $w
	}
	"\x7f" {
	    # <Delete>
	    delete_char $w
	}
	default {
	    $w insert insert $c
	}
    }
}

d259 1
a259 1
    global mged_edit_style
d268 5
a272 5
    set win [winset]
    set id [get_player_id_dm $win]
    if {$id != "mged" && $mged_edit_style($id) == "vi"} {
	vi_insert_mode $w
    }
a292 4
    global vi_mode

    set vi_mode($w) edit

d304 1
a304 1
	vi_process_edit_cmd %W %A
d309 11
a319 2
proc vi_insert_mode { w } {
    global vi_mode
d321 5
a325 1
    set vi_mode($w) insert
d327 1
d334 1
d338 2
a339 1
proc vi_process_edit_cmd { w c } {
d344 1
d349 13
d364 1
d387 1
d417 33
a449 11
	    set newindex [$w search $vi_search_char($w) {insert + 1c} {end - 2c}]
	    if {$newindex != ""} {
		if {$vi_delete_flag($w)} {
		    $w delete insert $newindex+1c
		    set vi_delete_flag($w) 0
		} elseif {$vi_change_flag($w)} {
		    $w delete insert $newindex+1c
		    vi_insert_mode $w
		    set vi_change_flag($w) 0
		} else {
		    $w mark set insert $newindex
a450 1
		cursor_highlight $w
d458 33
a490 11
	    set newindex [$w search -backwards $vi_search_char($w) {insert - 1c} promptEnd]
	    if {$newindex != ""} {
		if {$vi_delete_flag($w)} {
		    $w delete $newindex insert
		    set vi_delete_flag($w) 0
		} elseif {$vi_change_flag($w)} {
		    $w delete $newindex insert
		    vi_insert_mode $w
		    set vi_change_flag($w) 0
		} else {
		    $w mark set insert $newindex
a491 1
		cursor_highlight $w
d597 5
d651 5
a672 2
	"" {
	}
d675 1
d679 10
d817 1
a817 1
    global vi_mode
d895 1
a895 1
		delete_char %W
d903 2
@


1.4
log
@*- add search for char in "vi mode"
@
text
@d103 1
d106 13
d120 1
a120 1
		    break
d123 1
a123 1
		    break
d126 1
a126 1
		    break
d129 1
a129 1
		    break
d132 1
a132 1
		    break
d135 1
a135 1
		    break
d137 8
a144 2
		"\x08" {
		    break
d146 2
a147 2
		"\x0b" {
		    break
d149 2
a150 2
		"\x0e" {
		    break
d152 2
a153 2
		"\x10" {
		    break
d156 1
a156 1
		    break
d159 1
a159 1
		    break
d161 3
d165 4
a168 1
		    break
d170 6
d177 1
a178 1
		    break
d181 2
a182 1
		    break
d194 1
d198 1
a198 1
		    vi_process_edit_cmd $w $c 0
d210 1
d213 14
d228 1
d232 1
d236 1
d240 1
d244 1
d248 1
a250 6
	"\x08" {
	    backward_delete_char $w
	}
	"\x0b" {
	    delete_end_of_line $w
	}
d252 1
d255 3
d259 1
d262 9
d272 1
d276 1
d279 3
d283 1
d286 13
d300 1
d309 9
d423 1
a423 2
    $w delete promptEnd {end - 2c}
    $w mark set insert promptEnd
d428 7
a434 4
    if [$w compare insert >= promptEnd] {
	$w delete insert {end - 2c}
	cursor_highlight $w
    }
d542 11
d554 1
a554 1
	vi_process_edit_cmd %W %K 1
a556 2
    bind $w <Delete> {}
    bind $w <BackSpace> {}
d563 7
a570 2
    bind $w <Delete> { break }
    bind $w <BackSpace> { break }
d573 2
a574 1
proc vi_process_edit_cmd { w c iskeysym } {
d577 1
d584 1
d587 9
a595 1
		$w mark set insert $newindex
d598 3
d602 1
d606 1
d609 9
a617 1
		$w mark set insert $newindex
d620 3
d624 1
d630 40
d671 10
a680 2
	    beginning_of_line $w
	    set vi_delete_flag($w) 0
d686 1
d691 5
d699 9
d711 1
a711 1
	    if { $vi_delete_flag($w)} {
d717 1
d722 4
a732 1
	    set vi_delete_flag($w) 0
d735 10
a744 2
	    backward_char $w
	    set vi_delete_flag($w) 0
d749 1
d754 1
d759 1
d762 14
a775 1
	    forward_char $w
d777 1
d782 5
a789 1
	    set vi_delete_flag($w) 0
d794 1
d800 7
d811 1
a814 1
	    set vi_delete_flag($w) 0
d820 1
d825 1
d827 8
a834 13
	default {
	    if { $iskeysym } {
		switch $c {
		    BackSpace {
			backward_delete_char $w
		    }
		    Delete {
			delete_char $w
		    }
		    dollar {
			end_of_line $w
		    }
		}
d836 1
a836 11
		switch $c {
		    "\b" {
			backward_delete_char $w
		    }
		    "\x7f" {
			delete_char $w
		    }
		    $ {
			end_of_line $w
		    }
		}
d838 4
a841 1

d988 1
d994 1
a994 16
		break
	    }

	    bind $w <Up> {
		break
	    }

	    bind $w <Down> {
		break
	    }

	    bind $w <Control-a> {
		break
	    }

	    bind $w <Control-b> {
a997 3
	    bind $w <Control-c> {
		break
	    }
a1002 24
	    bind $w <Control-e> {
		break
	    }

	    bind $w <Control-f> {
		break
	    }

	    bind $w <Control-k> {
		break
	    }

	    bind $w <Control-n> {
		break
	    }

	    bind $w <Control-p> {
		break
	    }

	    bind $w <Control-t> {
		break
	    }

d1004 1
d1008 3
a1010 1
	    bind $w <Control-w> {
d1014 2
a1015 5
	    bind $w <Meta-d> {
		break
	    }

	    bind $w <Meta-BackSpace> {
d1036 2
a1037 1
	    bind $w <Up> {
d1041 2
a1042 1
	    bind $w <Down> {
d1046 2
a1047 2
	    bind $w <Control-a> {
		beginning_of_line %W
d1051 2
a1052 2
	    bind $w <Control-b> {
		backward_char %W
d1056 2
a1057 2
	    bind $w <Control-c> {
		interrupt_cmd %W
d1061 24
a1084 4
	    bind $w <Control-d> {
		delete_char %W
		break
	    }
d1086 4
a1089 4
	    bind $w <Control-e> {
		end_of_line %W
		break
	    }
d1091 4
a1094 4
	    bind $w <Control-f> {
		forward_char %W
		break
	    }
d1096 4
a1099 4
	    bind $w <Control-k> {
		delete_end_of_line %W
		break
	    }
d1101 4
a1104 4
	    bind $w <Control-n> {
		next_command %W
		break
	    }
d1106 4
a1109 4
	    bind $w <Control-p> {
		prev_command %W
		break
	    }
d1111 4
a1114 4
	    bind $w <Control-t> {
		transpose %W
		break
	    }
d1116 4
a1119 4
	    bind $w <Control-u> {
		delete_line %W
		break
	    }
d1121 4
a1124 4
	    bind $w <Control-w> {
		backward_delete_word %W
		break
	    }
d1126 4
a1129 6
	    bind $w <Meta-d> {
		if [%W compare insert < promptEnd] {
		    break
		}
		cursor_highlight %W
	    }
d1131 4
a1134 6
	    bind $w <Meta-BackSpace> {
		if [%W compare insert <= promptEnd] {
		    break
		}
		cursor_highlight %W
	    }
d1136 4
a1139 4
	    bind $w <Delete> {
		delete_char %W
		break
	    }
d1141 6
a1146 4
	    bind $w <BackSpace> {
		backward_delete_char %W
		break
	    }
d1148 3
a1150 1
	    bind $w <KeyPress> {}
d1152 1
d1155 2
a1156 3
# Common Key Bindings
    bind $w <Return> {
	execute_cmd %W
@


1.3
log
@*- added vi style bindings
*- modified proc names to better reflect their purpose
*- modified next_command and prev_command to remember current command line
@
text
@d411 1
d419 6
d467 1
d472 21
d527 4
d572 4
d938 2
@


1.2
log
@*- routines to support rewrite of text widgets mouse button bindings
*- code to implement use of color in MGED's command window
@
text
@d54 1
d67 10
a76 1
	do_keypress $w $c
d91 77
a167 33
proc do_keypress { w c } {
    if {$c == "\r" || $c == "\n"} {
	do_return $w
    } elseif {$c == "\x01"} {
	do_ctrl_a $w
    } elseif {$c == "\x02"} {
	do_ctrl_b $w
    } elseif {$c == "\x03"} {
	do_ctrl_c $w
    } elseif {$c == "\x04"} {
	do_ctrl_d $w
    } elseif {$c == "\x05"} {
	do_ctrl_e $w
    } elseif {$c == "\x06"} {
	do_ctrl_f $w
    } elseif {$c == "\x08"} {
	do_backspace $w
    } elseif {$c == "\x0b"} {
	do_ctrl_k $w
    } elseif {$c == "\x0e"} {
	do_ctrl_n $w
    } elseif {$c == "\x10"} {
	do_ctrl_p $w
    } elseif {$c == "\x14"} {
	do_ctrl_t $w
    } elseif {$c == "\x15"} {
	do_ctrl_u $w
    } elseif {$c == "\x17"} {
	do_ctrl_w $w
    } elseif {$c == "\x7f"} {
	do_delete $w
    } else {
	$w insert insert $c
d171 53
a223 5
proc do_return { w } {
    $w mark set insert {end - 2c}
    $w insert insert \n
    ia_invoke $w
    do_text_highlight $w
d226 1
a226 1
proc do_ctrl_a { w } {
d228 6
a233 1
    do_text_highlight $w
d236 1
a236 1
proc do_ctrl_b { w } {
d239 1
a239 1
	do_text_highlight $w
d243 36
a278 3
proc do_ctrl_c { w } {
    global ia_cmd_prefix
    global ia_more_default
d280 7
a286 6
    set id [get_player_id_t $w]
    set ia_cmd_prefix($id) ""
    set ia_more_default(id) ""
    $w insert insert \n
    mged_print_prompt $w "mged> "
    $w see insert
d289 1
a289 1
proc do_ctrl_d { w } {
d293 10
a302 1
	do_text_highlight $w
d304 1
d307 9
a315 3
proc do_ctrl_e { w } {
    $w mark set insert {end - 2c}
    do_text_highlight $w
d318 6
a323 4
proc do_ctrl_f { w } {
    if [$w compare insert < {end - 2c}] {
	$w mark set insert {insert + 1c}
	do_text_highlight $w
d325 9
d336 1
a336 1
proc do_ctrl_k { w } {
d339 1
a339 1
	do_text_highlight $w
d343 4
a346 3
proc do_ctrl_n { w } {
    $w delete promptEnd {end - 2c}
    $w mark set insert promptEnd
d350 1
d352 2
d356 11
a367 1
    do_text_highlight $w
d370 4
a373 3
proc do_ctrl_p { w } {
    $w delete promptEnd {end - 2c}
    $w mark set insert promptEnd
d377 1
d379 8
d389 2
a391 1
    do_text_highlight $w
d394 1
a394 1
proc do_ctrl_t { w } {
d407 11
a417 1
    do_text_highlight $w
d420 10
a429 4
proc do_ctrl_u { w } {
    $w delete promptEnd {end - 2c}
    $w mark set insert promptEnd
    do_text_highlight $w
d432 145
a576 6
proc do_ctrl_w { w } {
    set ti [$w search -backwards -regexp "\[ \t\]\[^ \t\]+\[ \t\]*" insert promptEnd]
    if [string length $ti] {
	$w delete "$ti + 1c" insert
    } else {
	$w delete promptEnd insert
d578 9
a586 1
    do_text_highlight $w
d589 5
a593 6
proc do_backspace { w } {
    catch {$w tag remove sel sel.first promptEnd}
    if [$w compare insert > promptEnd] {
	$w mark set insert {insert - 1c}
	$w delete insert
	do_text_highlight $w
a594 1
}
d596 2
a597 4
proc do_delete { w } {
    catch {$w tag remove sel sel.first promptEnd}
    if {[$w compare insert >= promptEnd] && [$w compare insert < {end - 2c}]} {
	$w delete insert
a598 1
    do_text_highlight $w
d601 2
a602 5
proc do_text_highlight { w } {
    $w tag delete hlt
    $w tag add hlt insert
    $w tag configure hlt -background yellow
}
d604 2
a605 3
proc reset_input_strings {} {
    set id [lindex [cmd_get] 2]
    do_ctrl_c .$id.t
d608 1
a608 1
proc do_B1 { w x y } {
d617 1
a617 1
proc do_B1_Motion { w x y } {
d637 1
a637 27
proc do_ButtonRelease2 { w } {
    global moveView

    if {!$moveView($w)} {
	catch {$w insert insert [selection get -displayof $w]}
    }

    if {[$w cget -state] == "normal"} {
	focus $w
    }
}

proc do_B2 { w x y } {
    global moveView

    set moveView($w) 0
    $w scan mark $x $y
}

proc do_B2_Motion { w x y } {
    global moveView

    set moveView($w) 1
    $w scan dragto $x $y
}

proc do_Double1 { w x y } {
d657 1
a657 1
proc do_Triple1 { w x y } {
d677 1
a677 1
proc do_Shift1 { w x y } {
d679 1
a679 1
    do_B1_Motion $w $x $y
d697 279
a975 1
}@


1.1
log
@Initial revision
@
text
@d38 2
a39 2
		    ia_rtlog_bold $_w "mged:$src_id> "
		    ia_rtlog_bold $_w $cmd\n
d43 1
a43 1
		    ia_rtlog_bold $_w $str\n
d144 1
a144 1
    ia_print_prompt $w "mged> "
d260 117
@
