head	1.14;
access;
symbols
	ansi-20040405-merged:1.12.4.1
	postmerge-20040405-ansi:1.13
	premerge-20040404-ansi:1.13
	postmerge-autoconf:1.13
	autoconf-freeze:1.13
	premerge-autoconf:1.13
	postmerge-20040315-windows:1.13
	premerge-20040315-windows:1.13
	windows-20040315-freeze:1.12.6.2
	autoconf-20031203:1.13
	autoconf-20031202:1.13
	autoconf-branch:1.13.0.6
	phong-branch:1.13.0.4
	photonmap-branch:1.13.0.2
	rel-6-1-DP:1.12
	windows-branch:1.12.0.6
	rel-6-0-2:1.12
	ansi-branch:1.12.0.4
	rel-6-0-1-branch:1.12.0.2
	hartley-6-0-post:1.12
	hartley-6-0-pre:1.12
	rel-6-0-1:1.12
	rel-6-0:1.12
	rel-5-4:1.8.2.3
	offsite-5-3-pre:1.11
	rel-5-3:1.8.2.3
	rel-5-2:1.8
	rel-5-1-branch:1.8.0.2
	rel-5-1:1.8
	rel-5-0:1.8
	rel-5-0-beta:1.7
	rel-4-5:1.1;
locks; strict;
comment	@# @;


1.14
date	2004.05.21.16.41.23;	author morrison;	state dead;
branches;
next	1.13;

1.13
date	2003.03.13.19.45.31;	author jra;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.03.22.33.03;	author bparker;	state Exp;
branches
	1.12.4.1
	1.12.6.1;
next	1.11;

1.11
date	2000.12.22.00.35.15;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.03.14.00.13;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.02.17.42.58;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	99.09.01.18.08.25;	author bparker;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	99.05.06.17.36.05;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	99.02.10.15.21.12;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	99.01.26.19.05.19;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	99.01.19.22.31.29;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.06.09.18.11.01;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.05.18.19.36.03;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	97.09.29.16.06.22;	author bparker;	state Exp;
branches;
next	;

1.8.2.1
date	2000.11.02.17.41.55;	author bparker;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2000.11.03.13.41.19;	author bparker;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2000.12.22.00.02.28;	author bparker;	state Exp;
branches;
next	;

1.12.4.1
date	2004.03.17.21.23.11;	author morrison;	state Exp;
branches;
next	;

1.12.6.1
date	2002.09.26.23.04.17;	author morrison;	state Exp;
branches;
next	1.12.6.2;

1.12.6.2
date	2004.03.11.23.48.58;	author morrison;	state Exp;
branches;
next	;


desc
@widget for extracting objects out of an MGED database
@


1.14
log
@moved to src/tclscripts/
@
text
@#
#			E X T R A C T . T C L
#
#	Tool for extracting objects out of the current MGED database.
#
#	Author - Robert G. Parker
#

check_externs "_mged_opendb _mged_keep db_glob"

proc init_extractTool { id } {
    global mged_gui
    global ex_control
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set top .$id.do_extract

    if [winfo exists $top] {
	raise $top
	return
    }

    if ![info exists ex_control($id,file)] {
	regsub \.g$ [_mged_opendb] _keep.g default_file
	set ex_control($id,file) $default_file
    }

    set ex_control($id,objects) [_mged_who]

    toplevel $top -screen $mged_gui($id,screen)

    frame $top.gridF
    frame $top.gridF2

    set tmp_hoc_data {{summary "Enter a filename specifying where to put
the extracted objects."} {see_also keep}}
    label $top.fileL -text "File Name" -anchor w
    hoc_register_data $top.fileL "File Name" $tmp_hoc_data
    entry $top.fileE -width 24 -textvar ex_control($id,file)
    hoc_register_data $top.fileE "File Name" $tmp_hoc_data

    set tmp_hoc_data {{summary "Enter the objects to extract."}
	    {see_also keep}}
    label $top.objectsL -text "Objects" -anchor w
    hoc_register_data $top.objectsL "Objects" $tmp_hoc_data
    entry $top.objectsE -width 24 -textvar ex_control($id,objects)
    hoc_register_data $top.objectsE "Objects" $tmp_hoc_data

    button $top.okB -relief raised -text "OK"\
	    -command "do_extract $id; catch {destroy $top}"
    hoc_register_data $top.okB "Extract" {{summary "
Extract the listed objects from the current database
and put them into the specified file. The extract dialog
is then dismissed. Note - these objects are not removed
from the current database."} {see_also keep}}
    button $top.extractB -relief raised -text "Extract"\
	    -command "do_extract $id"
    hoc_register_data $top.extractB "Extract" {{summary "
Extract the listed objects from the current database
and put them into the specified file. Note - these
objects are not removed from the current database."} {see_also keep}}
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"
    hoc_register_data $top.dismissB "Dismiss" {{summary "Dismiss the entry dialog without
extracting database objects."}}

    grid $top.fileE $top.fileL -sticky "ew" -in $top.gridF -pady 4
    grid $top.objectsE $top.objectsL -sticky "ew" -in $top.gridF -pady 4
    grid columnconfigure $top.gridF 0 -weight 1

    grid  $top.okB $top.extractB x $top.dismissB -in $top.gridF2
    grid columnconfigure $top.gridF2 2 -weight 1

    pack $top.gridF $top.gridF2 -side top -expand 1 -fill both\
	    -padx 8 -pady 8

    place_near_mouse $top
    wm title $top "Extract Objects"
}

proc do_extract { id } {
    global mged_gui
    global ex_control
    global ::tk::Priv

    cmd_win set $id
    set ex_cmd "_mged_keep"

    if {$ex_control($id,file) != ""} {
	if [file exists $ex_control($id,file)] {
	    set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		    "Append to $ex_control($id,file)?"\
		    "Append to $ex_control($id,file)?"\
		    "" 0 OK Cancel]

	    if {$result} {
		return
	    }
	}
    } else {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"No file name specified!"\
		"No file name specified!"\
		"" 0 OK

	return
    }

    append ex_cmd " $ex_control($id,file)"

    if {$ex_control($id,objects) != ""} {
	set globbed_str [db_glob $ex_control($id,objects)]
	append ex_cmd " $globbed_str"
    } else {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"No objects specified!"\
		"No objects specified!"\
		"" 0 OK

	return
    }

    set result [catch {eval $ex_cmd}]
    return $result
}@


1.13
log
@*** empty log message ***
@
text
@@


1.12
log
@*- mods requested by Eric regarding consistency
   when using capitalization in the GUI
@
text
@d14 1
a14 1
    global tkPriv
d17 1
a17 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d90 1
a90 1
    global tkPriv
d97 1
a97 1
	    set result [cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d107 1
a107 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d121 1
a121 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.12.4.1
log
@sync branch with HEAD
@
text
@d14 1
a14 1
    global ::tk::Priv
d17 1
a17 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d90 1
a90 1
    global ::tk::Priv
d97 1
a97 1
	    set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d107 1
a107 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d121 1
a121 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.12.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d14 1
a14 1
    variable ::tk::Priv
d17 1
a17 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d90 1
a90 1
    variable ::tk::Priv
d97 1
a97 1
	    set result [cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
d107 1
a107 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
d121 1
a121 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
@


1.12.6.2
log
@sync to HEAD...
@
text
@d14 1
a14 1
    global ::tk::Priv
d17 1
a17 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d90 1
a90 1
    global ::tk::Priv
d97 1
a97 1
	    set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d107 1
a107 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d121 1
a121 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.11
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d100 1
a100 1
		    "" 0 OK CANCEL]
@


1.10
log
@change the column, not the weight
@
text
@d14 1
d17 1
a17 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d90 1
d97 1
a97 1
	    set result [cad_dialog .$id.exDialog $mged_gui($id,screen)\
d107 1
a107 1
	cad_dialog .$id.exDialog $mged_gui($id,screen)\
d121 1
a121 1
	cad_dialog .$id.exDialog $mged_gui($id,screen)\
@


1.9
log
@Add OK button.
@
text
@d77 1
a77 1
    grid columnconfigure $top.gridF2 1 -weight 2
@


1.8
log
@*- check for no database open
@
text
@d29 1
a29 1
	regsub \.g$ [_mged_opendb] .keep default_file
d33 1
a33 7
    if { 1 } {
	set ex_control($id,objects) [_mged_who]
    } else {
	if ![info exists ex_control($id,objects)] {
	    set ex_control($id,objects) ""
	}
    }
d54 7
d76 2
a77 2
    grid $top.extractB x $top.dismissB -in $top.gridF2
    grid columnconfigure $top.gridF2 1 -weight 1
@


1.8.2.1
log
@Add OK button.
@
text
@d29 1
a29 1
	regsub \.g$ [_mged_opendb] _keep.g default_file
d33 7
a39 1
    set ex_control($id,objects) [_mged_who]
a59 7
    button $top.okB -relief raised -text "OK"\
	    -command "do_extract $id; catch {destroy $top}"
    hoc_register_data $top.okB "Extract" {{summary "
Extract the listed objects from the current database
and put them into the specified file. The extract dialog
is then dismissed. Note - these objects are not removed
from the current database."} {see_also keep}}
d75 2
a76 2
    grid  $top.okB $top.extractB x $top.dismissB -in $top.gridF2
    grid columnconfigure $top.gridF2 1 -weight 2
@


1.8.2.2
log
@change the column, not the weight
@
text
@d77 1
a77 1
    grid columnconfigure $top.gridF2 2 -weight 1
@


1.8.2.3
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@a13 1
    global tkPriv
d16 1
a16 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a88 1
    global tkPriv
d95 1
a95 1
	    set result [cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d105 1
a105 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d119 1
a119 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.7
log
@*- add help on context
@
text
@d15 6
@


1.6
log
@*- use place_near_mouse proc to position widgets near the mouse
@
text
@d40 2
d43 1
d45 1
d47 2
d50 1
d52 1
d56 4
d62 2
d76 1
a76 1
    wm title $top "Extract Objects..."
@


1.5
log
@*- use cmd_win instead of cmd_set
@
text
@d61 1
a61 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]
    wm geometry $top +$x+$y
@


1.4
log
@*- cleanup variables
@
text
@d72 1
a72 1
    cmd_set $id
@


1.3
log
@*- use cad_dialog instead of mged_dialog
@
text
@d12 2
a13 3
    global player_screen
    global ex_file
    global ex_objects
d22 1
a22 1
    if ![info exists ex_file($id)] {
d24 1
a24 1
	set ex_file($id) $default_file
d28 1
a28 1
	set ex_objects($id) [_mged_who]
d30 2
a31 2
	if ![info exists ex_objects($id)] {
	    set ex_objects($id) ""
d35 1
a35 1
    toplevel $top -screen $player_screen($id)
d41 1
a41 1
    entry $top.fileE -width 24 -textvar ex_file($id)
d44 1
a44 1
    entry $top.objectsE -width 24 -textvar ex_objects($id)
d69 2
a70 3
    global player_screen
    global ex_file
    global ex_objects
d75 5
a79 5
    if {$ex_file($id) != ""} {
	if [file exists $ex_file($id)] {
	    set result [cad_dialog .$id.exDialog $player_screen($id)\
		    "Append to $ex_file($id)?"\
		    "Append to $ex_file($id)?"\
d87 1
a87 1
	cad_dialog .$id.exDialog $player_screen($id)\
d95 1
a95 1
    append ex_cmd " $ex_file($id)"
d97 2
a98 2
    if {$ex_objects($id) != ""} {
	set globbed_str [db_glob $ex_objects($id)]
d101 1
a101 1
	cad_dialog .$id.exDialog $player_screen($id)\
@


1.2
log
@*- mods for pjt demo
@
text
@d79 1
a79 1
	    set result [mged_dialog .$id.exDialog $player_screen($id)\
d89 1
a89 1
	mged_dialog .$id.exDialog $player_screen($id)\
d103 1
a103 1
	mged_dialog .$id.exDialog $player_screen($id)\
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
#	Widget for extracting objects out of the current MGED database.
d28 6
a33 2
    if ![info exists ex_objects($id)] {
	set ex_objects($id) ""
d44 1
a44 1
    label $top.objectsL -text "Objects..." -anchor w
@
