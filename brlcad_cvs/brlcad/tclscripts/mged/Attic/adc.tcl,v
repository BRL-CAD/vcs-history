head	1.17;
access;
symbols
	ansi-20040405-merged:1.15.4.1
	postmerge-20040405-ansi:1.16
	premerge-20040404-ansi:1.16
	postmerge-autoconf:1.16
	autoconf-freeze:1.16
	premerge-autoconf:1.16
	postmerge-20040315-windows:1.16
	premerge-20040315-windows:1.16
	windows-20040315-freeze:1.15.6.2
	autoconf-20031203:1.16
	autoconf-20031202:1.16
	autoconf-branch:1.16.0.6
	phong-branch:1.16.0.4
	photonmap-branch:1.16.0.2
	rel-6-1-DP:1.15
	windows-branch:1.15.0.6
	rel-6-0-2:1.15
	ansi-branch:1.15.0.4
	rel-6-0-1-branch:1.15.0.2
	hartley-6-0-post:1.15
	hartley-6-0-pre:1.15
	rel-6-0-1:1.15
	rel-6-0:1.15
	rel-5-4:1.13.2.1
	offsite-5-3-pre:1.14
	rel-5-3:1.13.2.1
	rel-5-2:1.13
	rel-5-1-branch:1.13.0.2
	rel-5-1:1.13
	rel-5-0:1.13
	rel-5-0-beta:1.12;
locks; strict;
comment	@# @;


1.17
date	2004.05.21.16.41.21;	author morrison;	state dead;
branches;
next	1.16;

1.16
date	2003.03.13.19.45.30;	author jra;	state Exp;
branches;
next	1.15;

1.15
date	2001.04.03.22.33.03;	author bparker;	state Exp;
branches
	1.15.4.1
	1.15.6.1;
next	1.14;

1.14
date	2000.12.22.00.35.15;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	99.09.01.18.44.30;	author bparker;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	99.02.10.15.21.11;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	99.01.19.22.28.36;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	99.01.05.23.14.24;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	98.12.30.22.08.49;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	98.12.18.20.25.45;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	98.12.15.18.09.19;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	98.12.09.22.13.13;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.11.24.21.47.35;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.11.19.15.04.32;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.08.13.12.45.48;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.03.20.22.45.52;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.03.13.22.44.03;	author bparker;	state Exp;
branches;
next	;

1.13.2.1
date	2000.12.22.00.02.28;	author bparker;	state Exp;
branches;
next	;

1.15.4.1
date	2004.03.17.21.23.09;	author morrison;	state Exp;
branches;
next	;

1.15.6.1
date	2002.09.26.23.04.16;	author morrison;	state Exp;
branches;
next	1.15.6.2;

1.15.6.2
date	2004.03.11.23.48.57;	author morrison;	state Exp;
branches;
next	;


desc
@Control Panel for the Angle/Distance Cursor
@


1.17
log
@moved to src/tclscripts/
@
text
@#
#			A D C . T C L
#
# Author -
#	Robert G. Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Description -
#	Control Panel for the Angle/Distance Cursor
#

proc init_adc_control { id } {
    global mged_gui
    global mged_adc_control
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    winset $mged_gui($id,active_dm)
    set top .$id.adc_control

    if [winfo exists $top] {
	raise $top
	set mged_adc_control($id) 1

	return
    }

    set padx 4
    set pady 4

    if ![info exists mged_adc_control($id,coords)] {
	set mged_adc_control($id,coords) model
	adc reset
    }

    set mged_adc_control($id,last_coords) $mged_adc_control($id,coords)

    if ![info exists mged_adc_control($id,interpval)] {
	set mged_adc_control($id,interpval) abs
    }

    toplevel $top -screen $mged_gui($id,screen)

    frame $top.gridF1
    menubutton $top.coordsMB -textvariable mged_adc_control($id,coords_text)\
	    -menu $top.coordsMB.m -indicatoron 1
    menu $top.coordsMB.m -title "Coordinates" -tearoff 0
    $top.coordsMB.m add radiobutton -value model -variable mged_adc_control($id,coords)\
	    -label "Model" -command "adc_adjust_coords $id"
    hoc_register_menu_data "Coordinates" "Model" "Model Coordinates"\
	    { { summary "Set coordinate system type to model.
The model coordinate system is the
coordinate system that the MGED
database lives in." } }
    $top.coordsMB.m add radiobutton -value grid -variable mged_adc_control($id,coords)\
	    -label "Grid" -command "adc_adjust_coords $id"
    hoc_register_menu_data "Coordinates" "Grid" "Grid Coordinates"\
	    { { summary "Set coordinate system type to grid.
The grid coordinate system is 2D and
lives in the view plane. The origin
of this system is located by projecting
the model origin onto the view plane." } }
    menubutton $top.interpvalMB -textvariable mged_adc_control($id,interpval_text)\
	    -menu $top.interpvalMB.m -indicatoron 1
    hoc_register_data $top.interpvalMB "Value Interpretation Type"\
	    { { summary "This is a menu of the interpretation types.
There are two interpretation types - absolute
and relative. With absolute, the value is used
as is. However, with relative the value is treated
as an offset." } }
    menu $top.interpvalMB.m -title "Interpretation" -tearoff 0
    $top.interpvalMB.m add radiobutton -value abs -variable mged_adc_control($id,interpval)\
	    -label "Absolute" -command "adc_interpval $id"
    hoc_register_menu_data "Interpretation" "Absolute" "Interpret as absolute."\
	    { { summary "Interpret values at face value." } }
    $top.interpvalMB.m add radiobutton -value rel -variable mged_adc_control($id,interpval)\
	    -label "Relative" -command "adc_interpval $id"
    hoc_register_menu_data "Interpretation" "Relative" "Interpret as relative."\
	    { { summary "Interpret values as relative to current ADC values." } }
    grid $top.coordsMB x $top.interpvalMB x -sticky "nw" -in $top.gridF1 -padx $padx
    grid columnconfigure $top.gridF1 3 -weight 1

    frame $top.gridF2 -relief groove -bd 2
    frame $top.gridFF2
    label $top.posL -text "Position" -anchor e
    entry $top.posE -relief sunken -textvar mged_adc_control($id,pos)

    set hoc_data { { summary "The tick distance indicates the distance (local units)
from the ADC position to one of its ticks." } }
    label $top.tickL -text "Tick Distance" -anchor e
    hoc_register_data $top.tickL "Tick Distance" $hoc_data
    entry $top.tickE -relief sunken -width 15 -textvar mged_adc_control($id,dst)
    hoc_register_data $top.tickE "Tick Distance" $hoc_data

    set hoc_data { { summary "Angle 1 is one of two axes used to measure angles." } }
    label $top.a1L -text "Angle 1" -anchor e
    hoc_register_data $top.a1L "Angle 1" $hoc_data
    entry $top.a1E -relief sunken -width 15 -textvar mged_adc_control($id,a1)
    hoc_register_data $top.a1E "Angle 1" $hoc_data

    set hoc_data { { summary "Angle 2 is one of two axes used to measure angles." } }
    label $top.a2L -text "Angle 2" -anchor e
    hoc_register_data $top.a2L "Angle 2" $hoc_data
    entry $top.a2E -relief sunken -width 15 -textvar mged_adc_control($id,a2)
    hoc_register_data $top.a2E "Angle 2" $hoc_data

    grid $top.posL $top.posE -sticky "nsew" -in $top.gridFF2
    grid $top.tickL $top.tickE -sticky "nsew" -in $top.gridFF2
    grid $top.a1L $top.a1E -sticky "nsew" -in $top.gridFF2
    grid $top.a2L $top.a2E -sticky "nsew" -in $top.gridFF2
    grid columnconfigure $top.gridFF2 1 -weight 1
    grid rowconfigure $top.gridFF2 0 -weight 1
    grid rowconfigure $top.gridFF2 1 -weight 1
    grid rowconfigure $top.gridFF2 2 -weight 1
    grid rowconfigure $top.gridFF2 3 -weight 1
    grid $top.gridFF2 -sticky "nsew" -in $top.gridF2 -padx $padx -pady $pady
    grid columnconfigure $top.gridF2 0 -weight 1
    grid rowconfigure $top.gridF2 0 -weight 1

    frame $top.gridF3 -relief groove -bd 2
    frame $top.gridFF3
    label $top.anchorL -text "Anchor Points"
    label $top.enableL -text "Enable"
    hoc_register_data $top.enableL "Enable"\
	    { { summary "The \"Enable\" checkbuttons are used
to toggle anchoring for the participating
ADC attributes." } }
    label $top.anchor_xyzL -text "Position" -anchor e
    entry $top.anchor_xyzE -relief sunken -textvar mged_adc_control($id,pos)
    checkbutton $top.anchor_xyzCB -relief flat\
	    -offvalue 0 -onvalue 1 -variable mged_adc_control($id,anchor_pos)
    hoc_register_data $top.anchor_xyzCB "Anchor Position"\
	    { { summary "Toggle anchoring of the ADC position.
If anchoring is enabled, the ADC will remain
positioned at the anchor point. So if the view
changes while the ADC position is anchored, the
ADC will move with respect to the view." } }
    label $top.anchor_tickL -text "Tick Distance" -anchor e
    entry $top.anchor_tickE -relief sunken -textvar mged_adc_control($id,anchor_pt_dst)
    checkbutton $top.anchor_tickCB -relief flat\
	    -offvalue 0 -onvalue 1 -variable mged_adc_control($id,anchor_dst)
    hoc_register_data $top.anchor_tickCB "Tick Distance Anchor Point"\
	    { { summary "Toggle anchoring of the tick distance.
If anchoring is enabled, the tick is drawn at
a distance from the ADC center position that is
equal to the distance between the ADC center
position and the anchor point." } }
    label $top.anchor_a1L -text "Angle 1" -anchor e
    entry $top.anchor_a1E -relief sunken -textvar mged_adc_control($id,anchor_pt_a1)
    checkbutton $top.anchor_a1CB -relief flat\
	    -offvalue 0 -onvalue 1 -variable mged_adc_control($id,anchor_a1)
    hoc_register_data $top.anchor_a1CB "Angle 1 Anchor Point"\
	    { { summary "Toggle anchoring of angle 1. If anchoring
is enabled, angle 1 is always drawn through
its anchor point." } }
    label $top.anchor_a2L -text "Angle 2" -anchor e
    entry $top.anchor_a2E -relief sunken -textvar mged_adc_control($id,anchor_pt_a2)
    checkbutton $top.anchor_a2CB -relief flat\
	    -offvalue 0 -onvalue 1 -variable mged_adc_control($id,anchor_a2)
    hoc_register_data $top.anchor_a2CB "Angle 2 Anchor Point"\
	    { { summary "Toggle anchoring of angle 2. If anchoring
is enabled, angle 2 is always drawn through
its anchor point." } }
    grid $top.anchorL - $top.enableL -sticky "ew" -in $top.gridFF3
    grid $top.anchor_xyzL $top.anchor_xyzE $top.anchor_xyzCB -sticky "nsew" -in $top.gridFF3
    grid $top.anchor_tickL $top.anchor_tickE $top.anchor_tickCB -sticky "nsew" -in $top.gridFF3
    grid $top.anchor_a1L $top.anchor_a1E $top.anchor_a1CB -sticky "nsew" -in $top.gridFF3
    grid $top.anchor_a2L $top.anchor_a2E $top.anchor_a2CB -sticky "nsew" -in $top.gridFF3
    grid columnconfigure $top.gridFF3 1 -weight 1
    grid rowconfigure $top.gridFF3 1 -weight 1
    grid rowconfigure $top.gridFF3 2 -weight 1
    grid rowconfigure $top.gridFF3 3 -weight 1
    grid rowconfigure $top.gridFF3 4 -weight 1
    grid $top.gridFF3 -sticky "nsew" -in $top.gridF3 -padx $padx -pady $pady
    grid columnconfigure $top.gridF3 0 -weight 1
    grid rowconfigure $top.gridF3 0 -weight 1

    frame $top.gridF4
    checkbutton $top.drawB -relief flat -text "Draw"\
	    -offvalue 0 -onvalue 1 -variable mged_adc_control($id,draw)
    hoc_register_data $top.drawB "Draw"\
	    { { summary "Toggle drawing of the angle distance cursor." } }
    grid $top.drawB -in $top.gridF4

    frame $top.gridF5
    button $top.okB -relief raised -text "OK"\
	    -command "adc_ok $id $top"
    hoc_register_data $top.okB "OK"\
	    { { summary "Apply the values in the ADC control panel
to the angle distance cursor then close
the control panel."} }
    button $top.applyB -relief raised -text "Apply"\
	    -command "mged_apply $id \"adc_apply $id\";\
	    if {\$mged_adc_control($id,interpval) == \"abs\"} {
	        adc_load $id
            }"
    hoc_register_data $top.applyB "Apply"\
	    { { summary "Apply the values in the ADC control panel
to the angle distance cursor." } }
    button $top.resetB -relief raised -text "Reset"\
	    -command "mged_apply $id \"adc reset\";\
	    if {\$mged_adc_control($id,interpval) == \"abs\"} {
	        adc_load $id
            }"
    hoc_register_data $top.resetB "Reset"\
	    { { summary "Reset the angle distance cursor to its
default values." } }
    button $top.loadB -relief raised
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top; set mged_adc_control($id) 0 }"
    hoc_register_data $top.dismissB "Dismiss"\
	    { { summary "Dismiss/close the ADC control panel." } }
    grid $top.okB $top.applyB x $top.resetB $top.loadB x $top.dismissB -sticky "ew" -in $top.gridF5
    grid columnconfigure $top.gridF5 2 -weight 1
    grid columnconfigure $top.gridF5 5 -weight 1

    grid $top.gridF1 -sticky "ew" -padx $padx -pady $pady
    grid $top.gridF2 -sticky "nsew" -padx $padx -pady $pady
    grid $top.gridF3 -sticky "nsew" -padx $padx -pady $pady
    grid $top.gridF4 -sticky "ew" -padx $padx -pady $pady
    grid $top.gridF5 -sticky "ew" -padx $padx -pady $pady
    grid columnconfigure $top 0 -weight 1
    grid rowconfigure $top 1 -weight 1
    grid rowconfigure $top 2 -weight 1

    adc_interpval $id
    adc_adjust_coords $id

    place_near_mouse $top
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top; set mged_adc_control($id) 0 }"
    wm title $top "ADC Control Panel ($id)"
}

proc adc_ok { id top } {
    global mged_adc_control

    mged_apply $id "adc_apply $id"
    catch { destroy $top }

    set mged_adc_control($id) 0
}

proc adc_apply { id } {
    global mged_adc_control

    adc anchor_pos 0
    adc anchor_a1 0
    adc anchor_a2 0
    adc anchor_dst 0

    switch $mged_adc_control($id,interpval) {
	abs {
	    adc a1 $mged_adc_control($id,a1)
	    adc a2 $mged_adc_control($id,a2)
	    adc dst $mged_adc_control($id,dst)

	    adc_apply_abs $id
	}
	rel {
	    adc -i a1 $mged_adc_control($id,a1)
	    adc -i a2 $mged_adc_control($id,a2)
	    adc -i dst $mged_adc_control($id,dst)

	    adc_apply_rel $id
	}
    }

    switch $mged_adc_control($id,coords) {
	model {
	    if {$mged_adc_control($id,anchor_pos)} {
		adc anchor_pos 1
	    }
	}
	grid {
	    if {$mged_adc_control($id,anchor_pos)} {
		adc anchor_pos 2
	    }
	}
    }

    adc anchor_a1 $mged_adc_control($id,anchor_a1)
    adc anchor_a2 $mged_adc_control($id,anchor_a2)
    adc anchor_dst $mged_adc_control($id,anchor_dst)
    adc draw $mged_adc_control($id,draw)
}

proc adc_apply_abs { id } {
    global mged_adc_control

    switch $mged_adc_control($id,coords) {
	model {
	    eval adc xyz $mged_adc_control($id,pos)
	    eval adc anchorpoint_dst $mged_adc_control($id,anchor_pt_dst)
	    eval adc anchorpoint_a1 $mged_adc_control($id,anchor_pt_a1)
	    eval adc anchorpoint_a2 $mged_adc_control($id,anchor_pt_a2)
	}
	grid {
	    eval adc hv $mged_adc_control($id,pos)
	    eval adc anchorpoint_dst [eval grid2model_lu $mged_adc_control($id,anchor_pt_dst)]
	    eval adc anchorpoint_a1 [eval grid2model_lu $mged_adc_control($id,anchor_pt_a1)]
	    eval adc anchorpoint_a2 [eval grid2model_lu $mged_adc_control($id,anchor_pt_a2)]
	}
    }
}

proc adc_apply_rel { id } {
    global mged_gui
    global mged_adc_control

    switch $mged_adc_control($id,coords) {
	model {
	    eval adc -i xyz $mged_adc_control($id,pos)
	    eval adc -i anchorpoint_dst $mged_adc_control($id,anchor_pt_dst)
	    eval adc -i anchorpoint_a1 $mged_adc_control($id,anchor_pt_a1)
	    eval adc -i anchorpoint_a2 $mged_adc_control($id,anchor_pt_a2)
	}
	grid {
	    eval adc -i xyz [eval view2model_vec $mged_adc_control($id,pos) 0.0]
	    eval adc -i anchorpoint_dst [eval view2model_vec $mged_adc_control($id,anchor_pt_dst) 0.0]
	    eval adc -i anchorpoint_a1 [eval view2model_vec $mged_adc_control($id,anchor_pt_a1) 0.0]
	    eval adc -i anchorpoint_a2 [eval view2model_vec $mged_adc_control($id,anchor_pt_a2) 0.0]
	}
    }
}

proc adc_load { id } {
    global mged_gui
    global mged_adc_control

    if ![winfo exists .$id.adc_control] {
	return
    }

    winset $mged_gui($id,active_dm)

    set mged_adc_control($id,draw) [adc draw]
    set mged_adc_control($id,dst) [format "%.4f" [adc dst]]
    set mged_adc_control($id,a1) [format "%.4f" [adc a1]]
    set mged_adc_control($id,a2) [format "%.4f" [adc a2]]
    set mged_adc_control($id,anchor_dst) [adc anchor_dst]
    set mged_adc_control($id,anchor_a1) [adc anchor_a1]
    set mged_adc_control($id,anchor_a2) [adc anchor_a2]
    set mged_adc_control($id,anchor_pos) [adc anchor_pos]

    if {$mged_adc_control($id,anchor_pos) > 1} {
	set mged_adc_control($id,anchor_pos) 1
    }

    switch $mged_adc_control($id,coords) {
	model {
	    set mged_adc_control($id,pos) [eval format \"%.4f %.4f %.4f\" [adc xyz]]
	    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f %.4f\" [adc anchorpoint_dst]]
	    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f %.4f\" [adc anchorpoint_a1]]
	    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f %.4f\" [adc anchorpoint_a2]]
	}
	grid {
	    set mged_adc_control($id,pos) [eval format \"%.4f %.4f\" [adc hv]]
	    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f\" [eval model2grid_lu [adc anchorpoint_dst]]]
	    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f\" [eval model2grid_lu [adc anchorpoint_a1]]]
	    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f\" [eval model2grid_lu [adc anchorpoint_a2]]]
	}
    }
}

proc convert_coords { id } {
    global mged_gui
    global mged_adc_control

    if {$mged_adc_control($id,coords) == $mged_adc_control($id,last_coords)} {
	return
    }

    winset $mged_gui($id,active_dm)

    switch $mged_adc_control($id,coords) {
	model {
	    if { $mged_adc_control($id,last_coords) == "grid" } {
		set mged_adc_control($id,pos) [eval format \"%.4f %.4f %.4f\"\
			[eval grid2model_lu $mged_adc_control($id,pos)]]
		set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f %.4f\"\
			[eval grid2model_lu $mged_adc_control($id,anchor_pt_dst)]]
		set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f %.4f\"\
			[eval grid2model_lu $mged_adc_control($id,anchor_pt_a1)]]
		set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f %.4f\"\
			[eval grid2model_lu $mged_adc_control($id,anchor_pt_a2)]]
	    }
	}
	grid {
	    if { $mged_adc_control($id,last_coords) == "model" } {
		set mged_adc_control($id,pos) [eval format \"%.4f %.4f\"\
			[eval model2grid_lu $mged_adc_control($id,pos)]]
		set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f\"\
			[eval model2grid_lu $mged_adc_control($id,anchor_pt_dst)]]
		set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f\"\
			[eval model2grid_lu $mged_adc_control($id,anchor_pt_a1)]]
		set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f\"\
			[eval model2grid_lu $mged_adc_control($id,anchor_pt_a2)]]
	    }
	}
    }

    set mged_adc_control($id,last_coords) $mged_adc_control($id,coords)
}

proc adc_adjust_coords { id } {
    global mged_adc_control

    set top .$id.adc_control

    switch $mged_adc_control($id,coords) {
	model {
	    set mged_adc_control($id,coords_text) "Model Coords"
	    hoc_register_data $top.coordsMB "Coordinate System Type"\
		    { { summary "This is a menu of the two coordinate system
types - model and grid. The current coordinate
system type is model. This is the coordinate system
type that the MGED database lives in." } }

            set hoc_data { { summary "Indicates the angle distance cursor's position
in model coordinates (local units)." } }
            hoc_register_data $top.posL "ADC Position" $hoc_data
            hoc_register_data $top.posE "ADC Position" $hoc_data

            hoc_register_data $top.anchorL "Anchor Points"\
		    { { summary "Anchor points are currently used to \"anchor\"
certain ADC attributes to a point in model space.
For example, if the ADC position is anchored to the
model origin, the angle distance cursor will always be
drawn with its center at the model origin. The following
four attributes can be anchored: position, tick distance,
angle1 and angle2." } }

            set hoc_data { { summary "Indicates the angle distance cursor's position
in model coordinates (local units). If the
ADC position is anchored, the ADC will remain
positioned at the anchor point. So if the view
changes while the ADC position is anchored, the
ADC will move with respect to the view." } }
            hoc_register_data $top.anchor_xyzL "Position" $hoc_data
            hoc_register_data $top.anchor_xyzE "Position" $hoc_data

            set hoc_data { { summary "If anchoring, the tick is drawn at
a distance from the ADC center position
that is equal to the distance between the
ADC center position and the anchor point.
Note - the anchor point is currently specified
in model coordinates (local units)." } }
            hoc_register_data $top.anchor_tickL "Tick Distance Anchor Point" $hoc_data
            hoc_register_data $top.anchor_tickE "Tick Distance Ancor Point" $hoc_data

            set hoc_data { { summary "If anchoring is enabled, then angle 1 is always
drawn through its anchor point. Note - the
anchor point is currently specified in model
coordinates (local units)." } }
            hoc_register_data $top.anchor_a1L "Angle 1 Anchor Point" $hoc_data
            hoc_register_data $top.anchor_a1E "Angle 1 Anchor Point" $hoc_data

            set hoc_data { { summary "If anchoring is enabled, then angle 2 is always
drawn through its anchor point. Note - the
anchor point is currently specified in model
coordinates (local units)." } }
            hoc_register_data $top.anchor_a2L "Angle 2 Anchor Point" $hoc_data
            hoc_register_data $top.anchor_a2E "Angle 2 Anchor Point" $hoc_data
	}
	grid {
	    set mged_adc_control($id,coords_text) "Grid Coords"
	    hoc_register_data $top.coordsMB "Coordinate System Type"\
		    { { summary "This is a menu of the two coordinate system
types - model and grid. The current coordinate
system type is grid. This coordinate system is
2D and lives in the view plane. The origin of
this system is located by projecting the model
origin onto the view plane." } }

            set hoc_data { { summary "Indicates the angle distance cursor's position
in grid coordinates (local units)." } }
            hoc_register_data $top.posL "ADC Position" $hoc_data
            hoc_register_data $top.posE "ADC Position" $hoc_data

            hoc_register_data $top.anchorL "Anchor Points"\
		    { { summary "Anchor points are currently used to \"anchor\"
certain ADC attributes to a point in grid space.
For example, if the ADC position is anchored to the
grid origin, the angle distance cursor will always be
drawn with its center at the grid origin. The following
four attributes can be anchored: position, tick distance,
angle1 and angle2." } }

            set hoc_data { { summary "Indicates the angle distance cursor's position
in grid coordinates (local units)." } }
            hoc_register_data $top.anchor_xyzL "Position" $hoc_data
            hoc_register_data $top.anchor_xyzE "Position" $hoc_data

            set hoc_data { { summary "If anchoring is enabled, the tick is always
drawn at a distance from the ADC center
position that is equal to the distance between the
the ADC center position and the anchor point.
Note - the anchor point is currently specified
in grid coordinates (local units)." } }
            hoc_register_data $top.anchor_tickL "Tick Distance Anchor Point" $hoc_data
	    hoc_register_data $top.anchor_tickE "Tick Distance Ancor Point" $hoc_data

            set hoc_data { { summary "If anchoring is enabled, then angle 1 is always
drawn through its anchor point. Note - the
anchor point is currently specified in grid
coordinates (local units)." } }
            hoc_register_data $top.anchor_a1L "Angle 1 Anchor Point" $hoc_data
            hoc_register_data $top.anchor_a1E "Angle 1 Anchor Point" $hoc_data

            set hoc_data { { summary "If anchoring is enabled, then angle 2 is always
drawn through its anchor point. Note - the
anchor point is currently specified in grid
coordinates (local units)." } }
            hoc_register_data $top.anchor_a2L "Angle 2 Anchor Point" $hoc_data
            hoc_register_data $top.anchor_a2E "Angle 2 Anchor Point" $hoc_data
	}
    }

    if {$mged_adc_control($id,interpval) == "abs"} {
	convert_coords $id
    } else {
	adc_clear $id
    }
}

proc adc_interpval { id } {
    global mged_adc_control

    set top .$id.adc_control

    switch $mged_adc_control($id,interpval) {
	abs {
	    $top.loadB configure -text "Load"\
		    -command "adc_load $id"
	    set mged_adc_control($id,interpval_text) "Absolute"
	    adc_load $id

	    hoc_register_data $top.loadB "Load"\
		    { { summary "Load the ADC control panel with
values from the angle distance cursor." } }
	}
	rel {
	    $top.loadB configure -text "Clear"\
		    -command "adc_clear $id"
	    set mged_adc_control($id,interpval_text) "Relative"
	    adc_clear $id

	    hoc_register_data $top.loadB "Clear"\
		    { { summary "Clear all relative values to zero." } }
	}
    }
}

proc adc_clear { id } {
    global mged_adc_control

    if {$mged_adc_control($id,coords) == "grid"} {
	set mged_adc_control($id,pos) "0.0 0.0"
	set mged_adc_control($id,anchor_pt_dst) "0.0 0.0"
	set mged_adc_control($id,anchor_pt_a1) "0.0 0.0"
	set mged_adc_control($id,anchor_pt_a2) "0.0 0.0"
    } else {
	set mged_adc_control($id,pos) "0.0 0.0 0.0"
	set mged_adc_control($id,anchor_pt_dst) "0.0 0.0 0.0"
	set mged_adc_control($id,anchor_pt_a1) "0.0 0.0 0.0"
	set mged_adc_control($id,anchor_pt_a2) "0.0 0.0 0.0"
    }

    set mged_adc_control($id,a1) "0.0"
    set mged_adc_control($id,a2) "0.0"
    set mged_adc_control($id,dst) "0.0"

    set mged_adc_control($id,anchor_pos) 0
    set mged_adc_control($id,anchor_a1) 0
    set mged_adc_control($id,anchor_a2) 0
    set mged_adc_control($id,anchor_dst) 0
}

proc adc_CBHandler { id } {
    global mged_gui
    global ::tk::Priv

    if {[opendb] == ""} {
	set mged_gui($id,adc_draw) 0
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    mged_apply $id "adc draw $mged_gui($id,adc_draw)"
}@


1.16
log
@*** empty log message ***
@
text
@@


1.15
log
@*- mods requested by Eric regarding consistency
   when using capitalization in the GUI
@
text
@d23 1
a23 1
    global tkPriv
d26 1
a26 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d594 1
a594 1
    global tkPriv
d598 1
a598 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.15.4.1
log
@sync branch with HEAD
@
text
@d23 1
a23 1
    global ::tk::Priv
d26 1
a26 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d594 1
a594 1
    global ::tk::Priv
d598 1
a598 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.15.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d23 1
a23 1
    variable ::tk::Priv
d26 1
a26 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d594 1
a594 1
    variable ::tk::Priv
d598 1
a598 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.15.6.2
log
@sync to HEAD...
@
text
@d23 1
a23 1
    global ::tk::Priv
d26 1
a26 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d594 1
a594 1
    global ::tk::Priv
d598 1
a598 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.14
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d199 1
a199 1
    button $top.okB -relief raised -text "Ok"\
d201 1
a201 1
    hoc_register_data $top.okB "Ok"\
@


1.13
log
@*- check for open database
*- add ADC checkbutton handler
@
text
@d23 1
d26 1
a26 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d594 1
d598 1
a598 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
@


1.13.2.1
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@a22 1
    global tkPriv
d25 1
a25 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a592 1
    global tkPriv
d596 1
a596 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.12
log
@*- use place_near_mouse proc to position widgets near the mouse
@
text
@d24 6
d590 13
@


1.11
log
@*- cleanup variables
@
text
@d235 1
a235 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

a236 1
    wm geometry $top +$x+$y
@


1.10
log
@*- move entry labels beside entry widgets
*- better resizing
@
text
@d21 1
a21 2
    global player_screen
    global mged_active_dm
d24 1
a24 1
    winset $mged_active_dm($id)
d48 1
a48 1
    toplevel $top -screen $player_screen($id)
d317 1
a317 1
    global mged_active_dm
d337 1
a337 1
    global mged_active_dm
d344 1
a344 1
    winset $mged_active_dm($id)
d376 1
a376 1
    global mged_active_dm
d383 1
a383 1
    winset $mged_active_dm($id)
@


1.9
log
@*- mods to adc_load
@
text
@d91 2
a92 5
    frame $top.posF
    frame $top.tickF
    frame $top.a1F
    frame $top.a2F
    label $top.posL -text "Position" -anchor w
d97 1
a97 1
    label $top.tickL -text "Tick Distance" -anchor w
d103 1
a103 1
    label $top.a1L -text "Angle 1" -anchor w
d109 1
a109 1
    label $top.a2L -text "Angle 2" -anchor w
d114 10
a123 14
    grid $top.posL -sticky "ew" -in $top.posF
    grid $top.posE -sticky "ew" -in $top.posF
    grid columnconfigure $top.posF 0 -weight 1
    grid $top.a1L -sticky "ew" -in $top.a1F
    grid $top.a1E -sticky "ew" -in $top.a1F
    grid columnconfigure $top.a1F 0 -weight 1
    grid $top.a2L -sticky "ew" -in $top.a2F
    grid $top.a2E -sticky "ew" -in $top.a2F
    grid columnconfigure $top.a2F 0 -weight 1
    grid $top.tickL -sticky "ew" -in $top.tickF
    grid $top.tickE -sticky "ew" -in $top.tickF
    grid columnconfigure $top.tickF 0 -weight 1
    grid $top.posF - - -sticky "ew" -in $top.gridF2 -padx $padx -pady $pady
    grid $top.tickF $top.a1F $top.a2F -sticky "ew" -in $top.gridF2 -padx $padx -pady $pady
d125 1
a125 2
    grid columnconfigure $top.gridF2 1 -weight 1
    grid columnconfigure $top.gridF2 2 -weight 1
d128 1
a128 4
    frame $top.anchor_xyzF
    frame $top.anchor_tickF
    frame $top.anchor_a1F
    frame $top.anchor_a2F
d135 1
a135 1
    label $top.anchor_xyzL -text "Position" -anchor w
d145 1
a145 1
    label $top.anchor_tickL -text "Tick Distance" -anchor w
d155 1
a155 1
    label $top.anchor_a1L -text "Angle 1" -anchor w
d163 1
a163 1
    label $top.anchor_a2L -text "Angle 2" -anchor w
d171 11
a181 17
    grid $top.anchor_xyzL -sticky "ew" -in $top.anchor_xyzF
    grid $top.anchor_xyzE -sticky "ew" -in $top.anchor_xyzF
    grid $top.anchor_tickL -sticky "ew" -in $top.anchor_tickF
    grid $top.anchor_tickE -sticky "ew" -in $top.anchor_tickF
    grid $top.anchor_a1L -sticky "ew" -in $top.anchor_a1F
    grid $top.anchor_a1E -sticky "ew" -in $top.anchor_a1F
    grid $top.anchor_a2L -sticky "ew" -in $top.anchor_a2F
    grid $top.anchor_a2E -sticky "ew" -in $top.anchor_a2F
    grid $top.anchorL $top.enableL -sticky "ew" -in $top.gridF3 -padx $padx
    grid $top.anchor_xyzF $top.anchor_xyzCB -sticky "ew" -in $top.gridF3 -padx $padx -pady $pady
    grid $top.anchor_tickF $top.anchor_tickCB -sticky "ew" -in $top.gridF3 -padx $padx -pady $pady
    grid $top.anchor_a1F $top.anchor_a1CB -sticky "ew" -in $top.gridF3 -padx $padx -pady $pady
    grid $top.anchor_a2F $top.anchor_a2CB -sticky "ew" -in $top.gridF3 -padx $padx -pady $pady
    grid columnconfigure $top.anchor_xyzF 0 -weight 1
    grid columnconfigure $top.anchor_tickF 0 -weight 1
    grid columnconfigure $top.anchor_a1F 0 -weight 1
    grid columnconfigure $top.anchor_a2F 0 -weight 1
d183 1
d225 2
a226 2
    grid $top.gridF2 -sticky "ew" -padx $padx -pady $pady
    grid $top.gridF3 -sticky "ew" -padx $padx -pady $pady
d230 2
d256 5
@


1.8
log
@*- modified use of mged_apply
@
text
@d350 4
@


1.7
log
@*- mods to help
@
text
@d210 1
a210 1
	    -command "mged_apply $id \"adc_ok $id $top\""
d216 4
a219 1
	    -command "mged_apply $id \"adc_apply $id\""
d224 4
a227 1
	    -command "mged_apply $id \"adc_reset $id\""
d262 1
a262 1
    adc_apply $id
a268 1
    global mged_active_dm
a270 8
    winset $mged_active_dm($id)

    adc anchor_pos 0
    adc anchor_a1 0
    adc anchor_a2 0
    adc anchor_dst 0
    adc draw $mged_adc_control($id,draw)

d300 1
d304 1
a304 4

    if {$mged_adc_control($id,interpval) == "abs"} {
	adc_load $id
    }
a307 1
    global mged_active_dm
a309 2
    winset $mged_active_dm($id)

a329 2
    winset $mged_active_dm($id)

a345 12
proc adc_reset { id } {
    global mged_active_dm
    global mged_adc_control

    winset $mged_active_dm($id)
    adc reset

    if {$mged_adc_control($id,interpval) == "abs"} {
	adc_load $id
    }
}

d550 1
a550 1
		    -command "mged_apply $id \"adc_load $id\""
d560 1
a560 1
		    -command "mged_apply $id \"adc_clear $id\""
@


1.6
log
@*- add Ok button
@
text
@d60 2
a61 2
coordinate system that the MGED database
lives in." } }
d97 3
d101 1
a101 3
    hoc_register_data $top.tickL "Tick Distance"\
	    { { summary "The tick distance indicates the distance (local units)
from the ADC position to one of its ticks." } }
d103 3
a105 2
    hoc_register_data $top.tickE "Tick Distance"\
	    { { summary "Enter the tick distance (local units)." } }
d107 1
a107 2
    hoc_register_data $top.a1L "Angle 1"\
	    { { summary "Angle 1 is one of two axes used to measure angles." } }
d109 3
a111 2
    hoc_register_data $top.a1E "Angle 1"\
	    { { summary "Enter angle 1." } }
d113 1
a113 2
    hoc_register_data $top.a2L "Angle 2"\
	    { { summary "Angle 2 is one of two axes used to measure angles." } }
d115 2
a116 2
    hoc_register_data $top.a2E "Angle 2"\
	    { { summary "Enter angle 2." } }
d172 1
a172 1
is enabled angle 1 is always drawn through
d180 2
a181 2
is enabled angle 2 is always drawn through its anchor
point." } }
d211 4
d456 2
a457 2
            hoc_register_data $top.posL "ADC Position"\
		    { { summary "Indicates the angle distance cursor's position
d459 3
a461 3
            hoc_register_data $top.posE "ADC Position"\
		    { { summary "Enter the ADC position in model
coordinates (local units)." } }
d466 1
a466 1
model origin the angle distance cursor will always be
d468 2
a469 1
four attributes can be anchored:
d471 1
a471 3
        position, tick distance, angle1 and angle2." } }
            hoc_register_data $top.anchor_xyzL "Position"\
		    { { summary "Indicates the angle distance cursor's position
d477 4
a480 5
            hoc_register_data $top.anchor_xyzE "Position"\
		    { { summary "Enter the ADC position in model
coordinates (local units)." } }
            hoc_register_data $top.anchor_tickL "Tick Distance Anchor Point"\
		    { { summary "If anchoring, the tick is drawn at
d486 4
a489 5
            hoc_register_data $top.anchor_tickE "Tick Distance Ancor Point"\
		    { { summary "Enter the tick distance anchor point in
model coordinates (local units)." } }
            hoc_register_data $top.anchor_a1L "Angle 1 Anchor Point"\
		    { { summary "If anchoring is enabled, then angle 1 is always
d493 4
a496 5
            hoc_register_data $top.anchor_a1E "Angle 1 Anchor Point"\
		    { { summary "Enter angle 1's anchor point in
model coordinates (local units)." } }
            hoc_register_data $top.anchor_a2L "Angle 2 Anchor Point"\
		    { { summary "If anchoring is enabled, then angle 2 is always
d500 2
a501 3
            hoc_register_data $top.anchor_a2E "Angle 2 Anchor Point"\
		    { { summary "Enter angle 2's anchor point in
model coordinates (local units)." } }
d512 2
a513 2
            hoc_register_data $top.posL "ADC Position"\
		    { { summary "Indicates the angle distance cursor's position
d515 3
a517 3
            hoc_register_data $top.posE "ADC Position"\
		    { { summary "Enter the ADC position in grid
coordinates (local units)." } }
d522 1
a522 1
grid origin the angle distance cursor will always be
d524 2
a525 1
four attributes can be anchored:
d527 1
a527 3
        position, tick distance, angle1 and angle2." } }
            hoc_register_data $top.anchor_xyzL "Position"\
		    { { summary "Indicates the angle distance cursor's position
d529 4
a532 5
            hoc_register_data $top.anchor_xyzE "Position"\
		    { { summary "Enter the ADC position in grid
coordinates (local units)." } }
            hoc_register_data $top.anchor_tickL "Tick Distance Anchor Point"\
		    { { summary "If anchoring is enabled, the tick is always
d538 4
a541 5
    hoc_register_data $top.anchor_tickE "Tick Distance Ancor Point"\
	    { { summary "Enter the tick distance anchor point in
grid coordinates (local units)." } }
            hoc_register_data $top.anchor_a1L "Angle 1 Anchor Point"\
		    { { summary "If anchoring is enabled, then angle 1 is always
d545 4
a548 5
            hoc_register_data $top.anchor_a1E "Angle 1 Anchor Point"\
		    { { summary "Enter angle 1's anchor point in
grid coordinates (local units)." } }
            hoc_register_data $top.anchor_a2L "Angle 2 Anchor Point"\
		    { { summary "If anchoring is enabled, then angle 2 is always
d552 2
a553 3
            hoc_register_data $top.anchor_a2E "Angle 2 Anchor Point"\
		    { { summary "Enter angle 2's anchor point in
grid coordinates (local units)." } }
@


1.5
log
@*- add help messages
*- remove "view" from list of coordinate system choices.
@
text
@d208 2
d225 3
a227 3
    grid $top.applyB x $top.resetB $top.loadB x $top.dismissB -sticky "ew" -in $top.gridF5
    grid columnconfigure $top.gridF5 1 -weight 1
    grid columnconfigure $top.gridF5 4 -weight 1
d246 9
@


1.4
log
@*- mods to use the single global variable "mged_adc_control"
@
text
@d22 1
d25 1
d35 3
d54 1
a54 1
    menu $top.coordsMB.m -tearoff 0
d57 5
a61 2
    $top.coordsMB.m add radiobutton -value view -variable mged_adc_control($id,coords)\
	    -label "View" -command "adc_adjust_coords $id"
d64 6
d72 7
a78 1
    menu $top.interpvalMB.m -tearoff 0
d81 2
d85 3
a87 1
    grid $top.coordsMB x $top.interpvalMB x -sticky "nw" -in $top.gridF1 -padx 8
d98 3
d102 2
d105 2
d108 2
d111 2
d114 2
d128 2
a129 2
    grid $top.posF - - -sticky "ew" -in $top.gridF2 -padx 12 -pady 12
    grid $top.tickF $top.a1F $top.a2F -sticky "ew" -in $top.gridF2 -padx 12 -pady 12
d141 5
a146 1
    label $top.anchor_xyzL -text "Position" -anchor w
d149 7
a156 1
    label $top.anchor_tickL -text "Tick Distance" -anchor w
d159 7
a166 1
    label $top.anchor_a1L -text "Angle 1" -anchor w
d169 5
a174 1
    label $top.anchor_a2L -text "Angle 2" -anchor w
d177 4
d189 5
a193 5
    grid $top.anchorL $top.enableL -sticky "ew" -in $top.gridF3 -padx 8
    grid $top.anchor_xyzF $top.anchor_xyzCB -sticky "ew" -in $top.gridF3 -padx 8 -pady 8
    grid $top.anchor_tickF $top.anchor_tickCB -sticky "ew" -in $top.gridF3 -padx 8 -pady 8
    grid $top.anchor_a1F $top.anchor_a1CB -sticky "ew" -in $top.gridF3 -padx 8 -pady 8
    grid $top.anchor_a2F $top.anchor_a2CB -sticky "ew" -in $top.gridF3 -padx 8 -pady 8
d203 2
d210 3
d215 3
d221 2
d227 5
a231 5
    grid $top.gridF1 -sticky "ew" -padx 8 -pady 8
    grid $top.gridF2 -sticky "ew" -padx 8 -pady 8
    grid $top.gridF3 -sticky "ew" -padx 8 -pady 8
    grid $top.gridF4 -sticky "ew" -padx 8 -pady 8
    grid $top.gridF5 -sticky "ew" -padx 8 -pady 8
d250 2
a251 1
#    winset $mged_active_dm($id)
a280 5
	view {
	    if {$mged_adc_control($id,anchor_pos)} {
		adc anchor_pos 1
	    }
	}
d297 1
d300 2
a308 6
	view {
	    eval adc xyz [eval view2model_lu $mged_adc_control($id,pos)]
	    eval adc anchorpoint_dst [eval view2model_lu $mged_adc_control($id,anchor_pt_dst)]
	    eval adc anchorpoint_a1 [eval view2model_lu $mged_adc_control($id,anchor_pt_a1)]
	    eval adc anchorpoint_a2 [eval view2model_lu $mged_adc_control($id,anchor_pt_a2)]
	}
d319 1
d322 2
a330 6
	view {
	    eval adc -i xyz [eval view2model_vec $mged_adc_control($id,pos)]
	    eval adc -i anchorpoint_dst [eval view2model_vec $mged_adc_control($id,anchor_pt_dst)]
	    eval adc -i anchorpoint_a1 [eval view2model_vec $mged_adc_control($id,anchor_pt_a1)]
	    eval adc -i anchorpoint_a2 [eval view2model_vec $mged_adc_control($id,anchor_pt_a2)]
	}
d344 1
a344 1
#    winset $mged_active_dm($id)
d356 1
a356 1
#    winset $mged_active_dm($id)
a361 1
    set mged_adc_control($id,anchor_pos) [adc anchor_pos]
d365 5
a377 6
	view {
	    set mged_adc_control($id,pos) [eval format \"%.4f %.4f %.4f\" [eval model2view_lu [adc xyz]]]
	    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f %.4f\" [eval model2view_lu [adc anchorpoint_dst]]]
	    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f %.4f\" [eval model2view_lu [adc anchorpoint_a1]]]
	    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f %.4f\" [eval model2view_lu [adc anchorpoint_a2]]]
	}
d388 1
d395 2
d399 9
a407 45
	    switch $mged_adc_control($id,last_coords) {
		view {
		    set mged_adc_control($id,pos) [eval format \"%.4f %.4f %.4f\"\
			    [eval view2model_lu $mged_adc_control($id,pos)]]
		    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f %.4f\"\
			    [eval view2model_lu $mged_adc_control($id,anchor_pt_dst)]]
		    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f %.4f\"\
			    [eval view2model_lu $mged_adc_control($id,anchor_pt_a1)]]
		    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f %.4f\"\
			    [eval view2model_lu $mged_adc_control($id,anchor_pt_a2)]]
		}
		grid {
		    set mged_adc_control($id,pos) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2model_lu $mged_adc_control($id,pos)]]
		    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2model_lu $mged_adc_control($id,anchor_pt_dst)]]
		    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2model_lu $mged_adc_control($id,anchor_pt_a1)]]
		    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2model_lu $mged_adc_control($id,anchor_pt_a2)]]
		}
	    }
	}
	view {
	    switch $mged_adc_control($id,last_coords) {
		model {
		    set mged_adc_control($id,pos) [eval format \"%.4f %.4f %.4f\"\
			    [eval model2view_lu $mged_adc_control($id,pos)]]
		    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f %.4f\"\
			    [eval model2view_lu $mged_adc_control($id,anchor_pt_dst)]]
		    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f %.4f\"\
			    [eval model2view_lu $mged_adc_control($id,anchor_pt_a1)]]
		    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f %.4f\"\
			    [eval model2view_lu $mged_adc_control($id,anchor_pt_a2)]]
		}
		grid {
		    set mged_adc_control($id,pos) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2view_lu $mged_adc_control($id,pos)]]
		    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2view_lu $mged_adc_control($id,anchor_pt_dst)]]
		    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2view_lu $mged_adc_control($id,anchor_pt_a1)]]
		    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2view_lu $mged_adc_control($id,anchor_pt_a2)]]
		}
d411 9
a419 21
	    switch $mged_adc_control($id,last_coords) {
		model {
		    set mged_adc_control($id,pos) [eval format \"%.4f %.4f\"\
			    [eval model2grid_lu $mged_adc_control($id,pos)]]
		    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f\"\
			    [eval model2grid_lu $mged_adc_control($id,anchor_pt_dst)]]
		    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f\"\
			    [eval model2grid_lu $mged_adc_control($id,anchor_pt_a1)]]
		    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f\"\
			    [eval model2grid_lu $mged_adc_control($id,anchor_pt_a2)]]
		}
		view {
		    set mged_adc_control($id,pos) [eval format \"%.4f %.4f\"\
			    [eval view2grid_lu $mged_adc_control($id,pos)]]
		    set mged_adc_control($id,anchor_pt_dst) [eval format \"%.4f %.4f\"\
			    [eval view2grid_lu $mged_adc_control($id,anchor_pt_dst)]]
		    set mged_adc_control($id,anchor_pt_a1) [eval format \"%.4f %.4f\"\
			    [eval view2grid_lu $mged_adc_control($id,anchor_pt_a1)]]
		    set mged_adc_control($id,anchor_pt_a2) [eval format \"%.4f %.4f\"\
			    [eval view2grid_lu $mged_adc_control($id,anchor_pt_a2)]]
		}
d435 56
a491 3
	view {
	    set mged_adc_control($id,coords_text) "View Coords"
	}
d494 54
d569 4
d578 1
d580 2
a581 1
	    adc_clear $id
@


1.3
log
@*- added (id) to the title
@
text
@a22 17
    global mged_adc_draw
    global mged_adc_coords
    global last_mged_adc_coords
    global mged_adc_coords_text
    global mged_adc_interpval
    global mged_adc_interpval_text
    global mged_adc_pos
    global mged_adc_a1
    global mged_adc_a2
    global mged_adc_dst
    global mged_adc_anchor_pos
    global mged_adc_anchor_a1
    global mged_adc_anchor_pt_a1
    global mged_adc_anchor_a2
    global mged_adc_anchor_pt_a2
    global mged_adc_anchor_dst
    global mged_adc_anchor_pt_dst
d33 2
a34 2
    if ![info exists mged_adc_coords($id)] {
	set mged_adc_coords($id) model
d38 1
a38 1
    set last_mged_adc_coords($id) $mged_adc_coords($id)
d40 2
a41 2
    if ![info exists mged_adc_interpval($id)] {
	set mged_adc_interpval($id) abs
d47 1
a47 1
    menubutton $top.coordsMB -textvariable mged_adc_coords_text($id)\
d50 1
a50 1
    $top.coordsMB.m add radiobutton -value model -variable mged_adc_coords($id)\
d52 1
a52 1
    $top.coordsMB.m add radiobutton -value view -variable mged_adc_coords($id)\
d54 1
a54 1
    $top.coordsMB.m add radiobutton -value grid -variable mged_adc_coords($id)\
d56 1
a56 1
    menubutton $top.interpvalMB -textvariable mged_adc_interpval_text($id)\
d59 1
a59 1
    $top.interpvalMB.m add radiobutton -value abs -variable mged_adc_interpval($id)\
d61 1
a61 1
    $top.interpvalMB.m add radiobutton -value rel -variable mged_adc_interpval($id)\
d72 1
a72 1
    entry $top.posE -relief sunken -textvar mged_adc_pos($id)
d74 1
a74 1
    entry $top.tickE -relief sunken -width 15 -textvar mged_adc_dst($id)
d76 1
a76 1
    entry $top.a1E -relief sunken -width 15 -textvar mged_adc_a1($id)
d78 1
a78 1
    entry $top.a2E -relief sunken -width 15 -textvar mged_adc_a2($id)
d104 1
a104 1
    entry $top.anchor_xyzE -relief sunken -textvar mged_adc_pos($id)
d107 2
a108 2
	    -offvalue 0 -onvalue 1 -variable mged_adc_anchor_pos($id)
    entry $top.anchor_tickE -relief sunken -textvar mged_adc_anchor_pt_dst($id)
d111 2
a112 2
	    -offvalue 0 -onvalue 1 -variable mged_adc_anchor_dst($id)
    entry $top.anchor_a1E -relief sunken -textvar mged_adc_anchor_pt_a1($id)
d115 2
a116 2
	    -offvalue 0 -onvalue 1 -variable mged_adc_anchor_a1($id)
    entry $top.anchor_a2E -relief sunken -textvar mged_adc_anchor_pt_a2($id)
d119 1
a119 1
	    -offvalue 0 -onvalue 1 -variable mged_adc_anchor_a2($id)
d141 1
a141 1
	    -offvalue 0 -onvalue 1 -variable mged_adc_draw($id)
d177 1
a177 10
    global mged_adc_draw
    global mged_adc_coords
    global mged_adc_interpval
    global mged_adc_a1
    global mged_adc_a2
    global mged_adc_dst
    global mged_adc_anchor_pos
    global mged_adc_anchor_a1
    global mged_adc_anchor_a2
    global mged_adc_anchor_dst
d184 1
a184 1
    adc draw $mged_adc_draw($id)
d186 1
a186 1
    switch $mged_adc_interpval($id) {
d188 3
a190 3
	    adc a1 $mged_adc_a1($id)
	    adc a2 $mged_adc_a2($id)
	    adc dst $mged_adc_dst($id)
d195 3
a197 3
	    adc -i a1 $mged_adc_a1($id)
	    adc -i a2 $mged_adc_a2($id)
	    adc -i dst $mged_adc_dst($id)
d203 1
a203 1
    switch $mged_adc_coords($id) {
d205 1
a205 1
	    if {$mged_adc_anchor_pos($id)} {
d210 1
a210 1
	    if {$mged_adc_anchor_pos($id)} {
d215 1
a215 1
	    if {$mged_adc_anchor_pos($id)} {
d220 3
a222 3
    adc anchor_a1 $mged_adc_anchor_a1($id)
    adc anchor_a2 $mged_adc_anchor_a2($id)
    adc anchor_dst $mged_adc_anchor_dst($id)
d224 1
a224 1
    if {$mged_adc_interpval($id) == "abs"} {
d230 1
a230 6
    global mged_adc_coords
    global mged_adc_pos
    global mged_adc_anchor_pos
    global mged_adc_anchor_pt_a1
    global mged_adc_anchor_pt_a2
    global mged_adc_anchor_pt_dst
d232 1
a232 1
    switch $mged_adc_coords($id) {
d234 4
a237 4
	    eval adc xyz $mged_adc_pos($id)
	    eval adc anchorpoint_dst $mged_adc_anchor_pt_dst($id)
	    eval adc anchorpoint_a1 $mged_adc_anchor_pt_a1($id)
	    eval adc anchorpoint_a2 $mged_adc_anchor_pt_a2($id)
d240 4
a243 4
	    eval adc xyz [eval view2model_lu $mged_adc_pos($id)]
	    eval adc anchorpoint_dst [eval view2model_lu $mged_adc_anchor_pt_dst($id)]
	    eval adc anchorpoint_a1 [eval view2model_lu $mged_adc_anchor_pt_a1($id)]
	    eval adc anchorpoint_a2 [eval view2model_lu $mged_adc_anchor_pt_a2($id)]
d246 4
a249 4
	    eval adc hv $mged_adc_pos($id)
	    eval adc anchorpoint_dst [eval grid2model_lu $mged_adc_anchor_pt_dst($id)]
	    eval adc anchorpoint_a1 [eval grid2model_lu $mged_adc_anchor_pt_a1($id)]
	    eval adc anchorpoint_a2 [eval grid2model_lu $mged_adc_anchor_pt_a2($id)]
d255 1
a255 6
    global mged_adc_coords
    global mged_adc_pos
    global mged_adc_anchor_pos
    global mged_adc_anchor_pt_a1
    global mged_adc_anchor_pt_a2
    global mged_adc_anchor_pt_dst
d257 1
a257 1
    switch $mged_adc_coords($id) {
d259 4
a262 4
	    eval adc -i xyz $mged_adc_pos($id)
	    eval adc -i anchorpoint_dst $mged_adc_anchor_pt_dst($id)
	    eval adc -i anchorpoint_a1 $mged_adc_anchor_pt_a1($id)
	    eval adc -i anchorpoint_a2 $mged_adc_anchor_pt_a2($id)
d265 4
a268 4
	    eval adc -i xyz [eval view2model_vec $mged_adc_pos($id)]
	    eval adc -i anchorpoint_dst [eval view2model_vec $mged_adc_anchor_pt_dst($id)]
	    eval adc -i anchorpoint_a1 [eval view2model_vec $mged_adc_anchor_pt_a1($id)]
	    eval adc -i anchorpoint_a2 [eval view2model_vec $mged_adc_anchor_pt_a2($id)]
d271 4
a274 4
	    eval adc -i xyz [eval view2model_vec $mged_adc_pos($id) 0.0]
	    eval adc -i anchorpoint_dst [eval view2model_vec $mged_adc_anchor_pt_dst($id) 0.0]
	    eval adc -i anchorpoint_a1 [eval view2model_vec $mged_adc_anchor_pt_a1($id) 0.0]
	    eval adc -i anchorpoint_a2 [eval view2model_vec $mged_adc_anchor_pt_a2($id) 0.0]
d281 1
a281 1
    global mged_adc_interpval
d286 1
a286 1
    if {$mged_adc_interpval($id) == "abs"} {
d293 1
a293 14
    global mged_adc_draw
    global mged_adc_coords
    global mged_adc_coords_text
    global mged_adc_pos
    global mged_adc_a1
    global mged_adc_a2
    global mged_adc_dst
    global mged_adc_anchor_pos
    global mged_adc_anchor_a1
    global mged_adc_anchor_pt_a1
    global mged_adc_anchor_a2
    global mged_adc_anchor_pt_a2
    global mged_adc_anchor_dst
    global mged_adc_anchor_pt_dst
d297 8
a304 8
    set mged_adc_draw($id) [adc draw]
    set mged_adc_dst($id) [format "%.4f" [adc dst]]
    set mged_adc_a1($id) [format "%.4f" [adc a1]]
    set mged_adc_a2($id) [format "%.4f" [adc a2]]
    set mged_adc_anchor_pos($id) [adc anchor_pos]
    set mged_adc_anchor_dst($id) [adc anchor_dst]
    set mged_adc_anchor_a1($id) [adc anchor_a1]
    set mged_adc_anchor_a2($id) [adc anchor_a2]
d306 1
a306 1
    switch $mged_adc_coords($id) {
d308 4
a311 4
	    set mged_adc_pos($id) [eval format \"%.4f %.4f %.4f\" [adc xyz]]
	    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f %.4f\" [adc anchorpoint_dst]]
	    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f %.4f\" [adc anchorpoint_a1]]
	    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f %.4f\" [adc anchorpoint_a2]]
d314 4
a317 4
	    set mged_adc_pos($id) [eval format \"%.4f %.4f %.4f\" [eval model2view_lu [adc xyz]]]
	    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f %.4f\" [eval model2view_lu [adc anchorpoint_dst]]]
	    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f %.4f\" [eval model2view_lu [adc anchorpoint_a1]]]
	    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f %.4f\" [eval model2view_lu [adc anchorpoint_a2]]]
d320 4
a323 4
	    set mged_adc_pos($id) [eval format \"%.4f %.4f\" [adc hv]]
	    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f\" [eval model2grid_lu [adc anchorpoint_dst]]]
	    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f\" [eval model2grid_lu [adc anchorpoint_a1]]]
	    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f\" [eval model2grid_lu [adc anchorpoint_a2]]]
d329 1
a329 7
    global mged_adc_coords
    global last_mged_adc_coords
    global mged_adc_pos
    global mged_adc_anchor_pos
    global mged_adc_anchor_pt_dst
    global mged_adc_anchor_pt_a1
    global mged_adc_anchor_pt_a2
d331 1
a331 1
    if {$mged_adc_coords($id) == $last_mged_adc_coords($id)} {
d335 1
a335 1
    switch $mged_adc_coords($id) {
d337 1
a337 1
	    switch $last_mged_adc_coords($id) {
d339 8
a346 8
		    set mged_adc_pos($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval view2model_lu $mged_adc_pos($id)]]
		    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval view2model_lu $mged_adc_anchor_pt_dst($id)]]
		    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval view2model_lu $mged_adc_anchor_pt_a1($id)]]
		    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval view2model_lu $mged_adc_anchor_pt_a2($id)]]
d349 8
a356 8
		    set mged_adc_pos($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2model_lu $mged_adc_pos($id)]]
		    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2model_lu $mged_adc_anchor_pt_dst($id)]]
		    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2model_lu $mged_adc_anchor_pt_a1($id)]]
		    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2model_lu $mged_adc_anchor_pt_a2($id)]]
d361 1
a361 1
	    switch $last_mged_adc_coords($id) {
d363 8
a370 8
		    set mged_adc_pos($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval model2view_lu $mged_adc_pos($id)]]
		    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval model2view_lu $mged_adc_anchor_pt_dst($id)]]
		    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval model2view_lu $mged_adc_anchor_pt_a1($id)]]
		    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval model2view_lu $mged_adc_anchor_pt_a2($id)]]
d373 8
a380 8
		    set mged_adc_pos($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2view_lu $mged_adc_pos($id)]]
		    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2view_lu $mged_adc_anchor_pt_dst($id)]]
		    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2view_lu $mged_adc_anchor_pt_a1($id)]]
		    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f %.4f\"\
			    [eval grid2view_lu $mged_adc_anchor_pt_a2($id)]]
d385 1
a385 1
	    switch $last_mged_adc_coords($id) {
d387 8
a394 8
		    set mged_adc_pos($id) [eval format \"%.4f %.4f\"\
			    [eval model2grid_lu $mged_adc_pos($id)]]
		    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f\"\
			    [eval model2grid_lu $mged_adc_anchor_pt_dst($id)]]
		    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f\"\
			    [eval model2grid_lu $mged_adc_anchor_pt_a1($id)]]
		    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f\"\
			    [eval model2grid_lu $mged_adc_anchor_pt_a2($id)]]
d397 8
a404 8
		    set mged_adc_pos($id) [eval format \"%.4f %.4f\"\
			    [eval view2grid_lu $mged_adc_pos($id)]]
		    set mged_adc_anchor_pt_dst($id) [eval format \"%.4f %.4f\"\
			    [eval view2grid_lu $mged_adc_anchor_pt_dst($id)]]
		    set mged_adc_anchor_pt_a1($id) [eval format \"%.4f %.4f\"\
			    [eval view2grid_lu $mged_adc_anchor_pt_a1($id)]]
		    set mged_adc_anchor_pt_a2($id) [eval format \"%.4f %.4f\"\
			    [eval view2grid_lu $mged_adc_anchor_pt_a2($id)]]
d410 1
a410 1
    set last_mged_adc_coords($id) $mged_adc_coords($id)
d414 1
a414 3
    global mged_adc_coords
    global mged_adc_coords_text
    global mged_adc_interpval
d418 1
a418 1
    switch $mged_adc_coords($id) {
d420 1
a420 1
	    set mged_adc_coords_text($id) "Model Coords"
d423 1
a423 1
	    set mged_adc_coords_text($id) "View Coords"
d426 1
a426 1
	    set mged_adc_coords_text($id) "Grid Coords"
d430 1
a430 1
    if {$mged_adc_interpval($id) == "abs"} {
d438 1
a438 10
    global mged_adc_interpval
    global mged_adc_interpval_text
    global mged_adc_pos
    global mged_adc_a1
    global mged_adc_a2
    global mged_adc_dst
    global mged_adc_anchor_pos
    global mged_adc_anchor_pt_dst
    global mged_adc_anchor_pt_a1
    global mged_adc_anchor_pt_a2
d442 1
a442 1
    switch $mged_adc_interpval($id) {
d446 1
a446 1
	    set mged_adc_interpval_text($id) "Absolute"
d452 1
a452 1
	    set mged_adc_interpval_text($id) "Relative"
d460 7
a466 15
    global mged_adc_coords
    global mged_adc_pos
    global mged_adc_a1
    global mged_adc_a2
    global mged_adc_dst
    global mged_adc_anchor_pos
    global mged_adc_anchor_pt_dst
    global mged_adc_anchor_pt_a1
    global mged_adc_anchor_pt_a2

    if {$mged_adc_coords($id) == "grid"} {
	set mged_adc_pos($id) "0.0 0.0"
	set mged_adc_anchor_pt_dst($id) "0.0 0.0"
	set mged_adc_anchor_pt_a1($id) "0.0 0.0"
	set mged_adc_anchor_pt_a2($id) "0.0 0.0"
d468 4
a471 4
	set mged_adc_pos($id) "0.0 0.0 0.0"
	set mged_adc_anchor_pt_dst($id) "0.0 0.0 0.0"
	set mged_adc_anchor_pt_a1($id) "0.0 0.0 0.0"
	set mged_adc_anchor_pt_a2($id) "0.0 0.0 0.0"
d474 8
a481 8
    set mged_adc_a1($id) "0.0"
    set mged_adc_a2($id) "0.0"
    set mged_adc_dst($id) "0.0"

    set mged_adc_anchor_pos($id) 0
    set mged_adc_anchor_a1($id) 0
    set mged_adc_anchor_a2($id) 0
    set mged_adc_anchor_dst($id) 0
@


1.2
log
@some clean up
@
text
@d189 1
a189 1
    wm title $top "ADC Control Panel"
@


1.1
log
@Initial revision
@
text
@d64 1
a64 1
    menubutton $top.coordsMB -relief groove -bd 2 -textvariable mged_adc_coords_text($id)\
d73 1
a73 2
    menubutton $top.interpvalMB -relief groove -bd 2\
	    -textvariable mged_adc_interpval_text($id)\
d80 1
a80 1
    grid $top.coordsMB x $top.interpvalMB x -sticky "nw" -in $top.gridF1
d108 2
a109 4
#    grid $top.posF x $top.tickF -sticky "ew" -in $top.gridF2 -padx 8 -pady 8
#    grid $top.a1F x $top.a2F -sticky "ew" -in $top.gridF2 -padx 8 -pady 8
    grid $top.posF - - -sticky "ew" -in $top.gridF2 -padx 8 -pady 8
    grid $top.tickF $top.a1F $top.a2F -sticky "ew" -in $top.gridF2 -padx 8 -pady 8
d119 1
a119 1
    label $top.positionL -text "Anchor Points"
d145 1
a145 5
#    grid $top.anchor_xyzE $top.anchor_xyzL -sticky "ew" -in $top.anchor_xyzF
#    grid $top.anchor_tickE $top.anchor_tickL -sticky "ew" -in $top.anchor_tickF
#    grid $top.anchor_a1E $top.anchor_a1L -sticky "ew" -in $top.anchor_a1F
#    grid $top.anchor_a2E $top.anchor_a2L -sticky "ew" -in $top.anchor_a2F
    grid $top.positionL $top.enableL -sticky "ew" -in $top.gridF3 -padx 8 -pady 8
d163 1
a163 1
	    -command "adc_control_apply $id"
d165 1
a165 1
	    -command "adc_control_reset $id"
d192 1
a192 1
proc adc_control_apply { id } {
d195 1
d200 1
d205 1
a205 1
    winset $mged_active_dm($id)
d218 1
a218 5
	    adc anchor_a1 $mged_adc_anchor_a1($id)
	    adc anchor_a2 $mged_adc_anchor_a2($id)
	    adc anchor_dst $mged_adc_anchor_dst($id)

	    adc_control_apply_abs $id
d225 3
a227 3
	    adc anchor_a1 $mged_adc_anchor_a1($id)
	    adc anchor_a2 $mged_adc_anchor_a2($id)
	    adc anchor_dst $mged_adc_anchor_dst($id)
d229 15
a243 1
	    adc_control_apply_rel $id
a245 1

d249 4
d255 1
a255 1
proc adc_control_apply_abs { id } {
a268 4

	    if {$mged_adc_anchor_pos($id)} {
		adc anchor_pos 1
	    }
a274 4

	    if {$mged_adc_anchor_pos($id)} {
		adc anchor_pos 1
	    }
a280 4

	    if {$mged_adc_anchor_pos($id)} {
		adc anchor_pos 2
	    }
d285 1
a285 1
proc adc_control_apply_rel { id } {
a298 4

	    if {$mged_adc_anchor_pos($id)} {
		adc anchor_pos 1
	    }
d301 4
a304 8
	    eval adc -i xyz [eval view2model_dist $mged_adc_pos($id)]
	    eval adc -i anchorpoint_dst [eval view2model_dist $mged_adc_anchor_pt_dst($id)]
	    eval adc -i anchorpoint_a1 [eval view2model_dist $mged_adc_anchor_pt_a1($id)]
	    eval adc -i anchorpoint_a2 [eval view2model_dist $mged_adc_anchor_pt_a2($id)]

	    if {$mged_adc_anchor_pos($id)} {
		adc anchor_pos 1
	    }
d307 4
a310 8
	    eval adc -i xyz [eval view2model_dist $mged_adc_pos($id) 0.0]
	    eval adc -i anchorpoint_dst [eval view2model_dist $mged_adc_anchor_pt_dst($id) 0.0]
	    eval adc -i anchorpoint_a1 [eval view2model_dist $mged_adc_anchor_pt_a1($id) 0.0]
	    eval adc -i anchorpoint_a2 [eval view2model_dist $mged_adc_anchor_pt_a2($id) 0.0]

	    if {$mged_adc_anchor_pos($id)} {
		adc anchor_pos 2
	    }
d315 1
a315 1
proc adc_control_reset { id } {
d319 1
a319 1
    winset $mged_active_dm($id)
d323 1
a323 1
	adc_control_load $id
d327 1
a327 1
proc adc_control_load { id } {
d344 1
a344 1
    winset $mged_active_dm($id)
d490 1
a490 1
	adc_control_clear $id
d511 3
a513 3
		    -command "adc_control_load $id"
	    set mged_adc_interpval_text($id) "Absolute Value"
	    adc_control_load $id
d517 2
a518 2
		    -command "adc_control_clear $id"
	    set mged_adc_interpval_text($id) "Relative Value"
d520 1
a520 1
	    adc_control_clear $id
d525 1
a525 1
proc adc_control_clear { id } {
@
