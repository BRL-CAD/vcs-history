head	1.15;
access;
symbols
	ansi-20040405-merged:1.13.4.1
	postmerge-20040405-ansi:1.14
	premerge-20040404-ansi:1.14
	postmerge-autoconf:1.14
	autoconf-freeze:1.14
	premerge-autoconf:1.14
	postmerge-20040315-windows:1.14
	premerge-20040315-windows:1.14
	windows-20040315-freeze:1.13.6.2
	autoconf-20031203:1.14
	autoconf-20031202:1.14
	autoconf-branch:1.14.0.6
	phong-branch:1.14.0.4
	photonmap-branch:1.14.0.2
	rel-6-1-DP:1.13
	windows-branch:1.13.0.6
	rel-6-0-2:1.13
	ansi-branch:1.13.0.4
	rel-6-0-1-branch:1.13.0.2
	hartley-6-0-post:1.13
	hartley-6-0-pre:1.13
	rel-6-0-1:1.13
	rel-6-0:1.13
	rel-5-4:1.10.2.2
	offsite-5-3-pre:1.12
	rel-5-3:1.10.2.2
	rel-5-2:1.10
	rel-5-1-branch:1.10.0.2
	rel-5-1:1.10
	rel-5-0:1.10
	rel-5-0-beta:1.9
	rel-4-5:1.2;
locks; strict;
comment	@# @;


1.15
date	2004.05.21.16.41.31;	author morrison;	state dead;
branches;
next	1.14;

1.14
date	2003.03.13.19.45.32;	author jra;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.03.22.33.03;	author bparker;	state Exp;
branches
	1.13.4.1
	1.13.6.1;
next	1.12;

1.12
date	2000.12.22.00.35.15;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.02.17.42.58;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	99.09.01.18.08.25;	author bparker;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	99.05.06.17.36.04;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	99.02.10.15.21.14;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	99.01.26.19.05.18;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	99.01.19.22.31.31;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.08.13.12.38.59;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.06.09.17.55.32;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.05.18.19.36.05;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	97.09.29.16.02.51;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	97.09.17.21.09.28;	author bparker;	state Exp;
branches;
next	;

1.10.2.1
date	2000.11.02.17.41.55;	author bparker;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2000.12.22.00.02.27;	author bparker;	state Exp;
branches;
next	;

1.13.4.1
date	2004.03.17.21.23.13;	author morrison;	state Exp;
branches;
next	;

1.13.6.1
date	2002.09.26.23.04.20;	author morrison;	state Exp;
branches;
next	1.13.6.2;

1.13.6.2
date	2004.03.11.23.48.59;	author morrison;	state Exp;
branches;
next	;


desc
@Tcl/Tk widget for producing PostScript files of MGED's current view
@


1.15
log
@moved to src/tclscripts/
@
text
@#
#			P S . T C L
#
#	Tool for producing PostScript files of MGED's current view.
#
#	Author - Robert G. Parker
#

check_externs "_mged_opendb _mged_ps"

proc init_psTool { id } {
    global mged_gui
    global ps_control
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set top .$id.do_ps

    if [winfo exists $top] {
	raise $top
	return
    }

    if ![info exists ps_control($id,file)] {
	regsub \.g$ [_mged_opendb] .ps default_file
	set ps_control($id,file) $default_file
    }

    if ![info exists ps_control($id,title)] {
	set ps_control($id,title) "No Title"
    }

    if ![info exists ps_control($id,creator)] {
	set ps_control($id,creator) "$id"
    }

    if ![info exists ps_control($id,font)] {
	set ps_control($id,font) "Courier"
    }

    if ![info exists ps_control($id,size)] {
	set ps_control($id,size) 4.5
    }

    if ![info exists ps_control($id,linewidth)] {
	set ps_control($id,linewidth) 1
    }

    if ![info exists ps_control($id,zclip)] {
	set ps_control($id,zclip) 1
    }

    toplevel $top -screen $mged_gui($id,screen)

    frame $top.elF
    frame $top.fileF -relief sunken -bd 2
    frame $top.titleF -relief sunken -bd 2
    frame $top.creatorF -relief sunken -bd 2
    frame $top.fontF -relief sunken -bd 2
    frame $top.sizeF -relief sunken -bd 2
    frame $top.linewidthF -relief sunken -bd 2
    frame $top.buttonF
    frame $top.buttonF2

    set tmp_hoc_data {{summary "Enter a filename specifying where
to put the generated postscript
description of the current view."} {see_also "ps"}}
    label $top.fileL -text "File Name" -anchor w
    hoc_register_data $top.fileL "File Name" $tmp_hoc_data
    entry $top.fileE -relief flat -width 10 -textvar ps_control($id,file)
    hoc_register_data $top.fileE "File Name" $tmp_hoc_data

    set tmp_hoc_data {{summary "Enter a title for the postscript file."} {see_also "ps"}}
    label $top.titleL -text "Title" -anchor w
    hoc_register_data $top.titleL "Title" $tmp_hoc_data
    entry $top.titleE -relief flat -width 10 -textvar ps_control($id,title)
    hoc_register_data $top.titleE "Title" $tmp_hoc_data

    set tmp_hoc_data {{summary "Enter the creator of the postscript file."} {see_also "ps"}}
    label $top.creatorL -text "Creator" -anchor w
    hoc_register_data $top.creatorL "Creator" $tmp_hoc_data
    entry $top.creatorE -relief flat -width 10 -textvar ps_control($id,creator)
    hoc_register_data $top.creatorE "Creator" $tmp_hoc_data

    set tmp_hoc_data {{summary "Enter the desired text font."} {see_also "ps"}}
    label $top.fontL -text "Font" -anchor w
    hoc_register_data $top.fontL "Font" $tmp_hoc_data
    entry $top.fontE -relief flat -width 17 -textvar ps_control($id,font)
    hoc_register_data $top.fontE "Font" $tmp_hoc_data
    menubutton $top.fontMB -relief raised -bd 2\
	    -menu $top.fontMB.fontM -indicatoron 1
    hoc_register_data $top.fontMB "Font"\
	    {{summary "Pops up a menu of known
postscript fonts."}}
    menu $top.fontMB.fontM -tearoff 0
    $top.fontMB.fontM add cascade -label "Courier"\
	    -menu $top.fontMB.fontM.courierM
    $top.fontMB.fontM add cascade -label "Helvetica"\
	    -menu $top.fontMB.fontM.helveticaM
    $top.fontMB.fontM add cascade -label "Times"\
	    -menu $top.fontMB.fontM.timesM

    menu $top.fontMB.fontM.courierM -tearoff 0
    $top.fontMB.fontM.courierM add command -label "Normal"\
	    -command "set ps_control($id,font) Courier"
    $top.fontMB.fontM.courierM add command -label "Oblique"\
	    -command "set ps_control($id,font) Courier-Oblique"
    $top.fontMB.fontM.courierM add command -label "Bold"\
	    -command "set ps_control($id,font) Courier-Bold"
    $top.fontMB.fontM.courierM add command -label "BoldOblique"\
	    -command "set ps_control($id,font) Courier-BoldOblique"

    menu $top.fontMB.fontM.helveticaM -tearoff 0
    $top.fontMB.fontM.helveticaM add command -label "Normal"\
	    -command "set ps_control($id,font) Helvetica"
    $top.fontMB.fontM.helveticaM add command -label "Oblique"\
	    -command "set ps_control($id,font) Helvetica-Oblique"
    $top.fontMB.fontM.helveticaM add command -label "Bold"\
	    -command "set ps_control($id,font) Helvetica-Bold"
    $top.fontMB.fontM.helveticaM add command -label "BoldOblique"\
	    -command "set ps_control($id,font) Helvetica-BoldOblique"

    menu $top.fontMB.fontM.timesM -tearoff 0
    $top.fontMB.fontM.timesM add command -label "Roman"\
	    -command "set ps_control($id,font) Times-Roman"
    $top.fontMB.fontM.timesM add command -label "Italic"\
	    -command "set ps_control($id,font) Times-Italic"
    $top.fontMB.fontM.timesM add command -label "Bold"\
	    -command "set ps_control($id,font) Times-Bold"
    $top.fontMB.fontM.timesM add command -label "BoldItalic"\
	    -command "set ps_control($id,font) Times-BoldItalic"

    set tmp_hoc_data {{summary "Enter the image size."} {see_also "ps"}}
    label $top.sizeL -text "Size" -anchor w
    hoc_register_data $top.sizeL "Size" $tmp_hoc_data
    entry $top.sizeE -relief flat -width 10 -textvar ps_control($id,size)
    hoc_register_data $top.sizeE "Size" $tmp_hoc_data

    set tmp_hoc_data {{summary "Enter the line width used when
drawing lines."} {see_also "ps"}}
    label $top.linewidthL -text "Line Width" -anchor w
    hoc_register_data $top.linewidthL "Line Width" $tmp_hoc_data
    entry $top.linewidthE -relief flat -width 10 -textvar ps_control($id,linewidth)
    hoc_register_data $top.linewidthE "Line Width" $tmp_hoc_data

    checkbutton $top.zclipCB -relief raised -text "Z Clipping"\
	    -variable ps_control($id,zclip)
    hoc_register_data $top.zclipCB "Z Clipping"\
	    {{summary "If checked, clip to the viewing cube."}
            {see_also "ps"}}

    button $top.okB -relief raised -text "OK"\
	    -command "do_ps $id; catch {destroy $top}"
    hoc_register_data $top.okB "Create"\
	    {{summary "Create the postscript file. The
postscript dialog is then dismissed."} {see_also "ps"}}
    button $top.createB -relief raised -text "Create"\
	    -command "do_ps $id"
    hoc_register_data $top.createB "Create"\
	    {{summary "Create the postscript file."} {see_also "ps"}}
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"
    hoc_register_data $top.dismissB "Dismiss"\
	    {{summary "Dismiss the postscript tool."} {see_also "ps"}}

    grid $top.fileE -sticky "ew" -in $top.fileF
    grid $top.fileF  $top.fileL -sticky "ew" -in $top.elF -pady 4
    grid $top.titleE -sticky "ew" -in $top.titleF
    grid $top.titleF $top.titleL -sticky "ew" -in $top.elF -pady 4
    grid $top.creatorE -sticky "ew" -in $top.creatorF
    grid $top.creatorF $top.creatorL -sticky "ew" -in $top.elF -pady 4
    grid $top.fontE $top.fontMB -sticky "ew" -in $top.fontF
    grid $top.fontF $top.fontL -sticky "ew" -in $top.elF -pady 4
    grid $top.sizeE -sticky "ew" -in $top.sizeF
    grid $top.sizeF $top.sizeL -sticky "ew" -in $top.elF -pady 4
    grid $top.linewidthE -sticky "ew" -in $top.linewidthF
    grid $top.linewidthF $top.linewidthL -sticky "ew" -in $top.elF -pady 4
    grid columnconfigure $top.fileF 0 -weight 1
    grid columnconfigure $top.titleF 0 -weight 1
    grid columnconfigure $top.creatorF 0 -weight 1
    grid columnconfigure $top.fontF 0 -weight 1
    grid columnconfigure $top.sizeF 0 -weight 1
    grid columnconfigure $top.linewidthF 0 -weight 1
    grid columnconfigure $top.elF 0 -weight 1

    grid $top.zclipCB x -sticky "ew" -in $top.buttonF -ipadx 4 -ipady 4
    grid columnconfigure $top.buttonF 1 -weight 1

    grid $top.okB $top.createB x $top.dismissB -sticky "ew" -in $top.buttonF2
    grid columnconfigure $top.buttonF2 2 -weight 1 -minsize 40

    pack $top.elF $top.buttonF $top.buttonF2 -expand 1 -fill both -padx 8 -pady 8

    place_near_mouse $top
    wm title $top "PostScript Tool ($id)"
}

proc do_ps { id } {
    global mged_gui
    global ps_control
    global ::tk::Priv

    cmd_win set $id
    set ps_cmd "_mged_ps"

    if {$ps_control($id,file) != ""} {
	if {[file exists $ps_control($id,file)]} {
	    set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		    "Overwrite $ps_control($id,file)?"\
		    "Overwrite $ps_control($id,file)?"\
		    "" 0 OK Cancel]

	    if {$result} {
		return
	    }
	}
    } else {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"No file name specified!"\
		"No file name specified!"\
		"" 0 OK
	return
    }

    if {$ps_control($id,title) != ""} {
	append ps_cmd " -t \"$ps_control($id,title)\""
    }

    if {$ps_control($id,creator) != ""} {
	 append ps_cmd " -c \"$ps_control($id,creator)\""
    }

    if {$ps_control($id,font) != ""} {
	 append ps_cmd " -f $ps_control($id,font)"
    }

    if {$ps_control($id,size) != ""} {
	 append ps_cmd " -s $ps_control($id,size)"
    }

    if {$ps_control($id,linewidth) != ""} {
	 append ps_cmd " -l $ps_control($id,linewidth)"
    }

    if {$ps_control($id,zclip) != 0} {
	append ps_cmd " -z"
    }

    append ps_cmd " $ps_control($id,file)"
    catch {eval $ps_cmd}
}@


1.14
log
@*** empty log message ***
@
text
@@


1.13
log
@*- mods requested by Eric regarding consistency
   when using capitalization in the GUI
@
text
@d14 1
a14 1
    global tkPriv
d17 1
a17 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d206 1
a206 1
    global tkPriv
d213 1
a213 1
	    set result [cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d223 1
a223 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.13.4.1
log
@sync branch with HEAD
@
text
@d14 1
a14 1
    global ::tk::Priv
d17 1
a17 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d206 1
a206 1
    global ::tk::Priv
d213 1
a213 1
	    set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d223 1
a223 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.13.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d14 1
a14 1
    variable ::tk::Priv
d17 1
a17 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d206 1
a206 1
    variable ::tk::Priv
d213 1
a213 1
	    set result [cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
d223 1
a223 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
@


1.13.6.2
log
@sync to HEAD...
@
text
@d14 1
a14 1
    global ::tk::Priv
d17 1
a17 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d206 1
a206 1
    global ::tk::Priv
d213 1
a213 1
	    set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d223 1
a223 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.12
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d216 1
a216 1
		    "" 0 OK CANCEL]
@


1.11
log
@Add OK button.
@
text
@d14 1
d17 1
a17 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d206 1
d213 1
a213 1
	    set result [cad_dialog .$id.psDialog $mged_gui($id,screen)\
d223 1
a223 1
	cad_dialog .$id.psDialog $mged_gui($id,screen)\
@


1.10
log
@*- check for no database open
@
text
@d156 5
d193 2
a194 2
    grid $top.createB x $top.dismissB -sticky "ew" -in $top.buttonF2
    grid columnconfigure $top.buttonF2 1 -weight 1 -minsize 40
@


1.10.2.1
log
@Add OK button.
@
text
@a155 5
    button $top.okB -relief raised -text "OK"\
	    -command "do_ps $id; catch {destroy $top}"
    hoc_register_data $top.okB "Create"\
	    {{summary "Create the postscript file. The
postscript dialog is then dismissed."} {see_also "ps"}}
d188 2
a189 2
    grid $top.okB $top.createB x $top.dismissB -sticky "ew" -in $top.buttonF2
    grid columnconfigure $top.buttonF2 2 -weight 1 -minsize 40
@


1.10.2.2
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@a13 1
    global tkPriv
d16 1
a16 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a204 1
    global tkPriv
d211 1
a211 1
	    set result [cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d221 1
a221 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.9
log
@*- add help on context
@
text
@d15 6
@


1.8
log
@*- use place_near_mouse proc to position widgets near the mouse
@
text
@d63 3
d67 1
d69 1
d71 1
d73 1
d75 1
d77 1
d79 1
d81 1
d83 1
d85 1
d87 1
d90 3
d131 1
d133 1
d135 1
d137 2
d140 1
d142 1
d146 3
d152 2
d156 2
@


1.7
log
@*- use cmd_win instead of cmd_set
@
text
@d156 1
a156 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]
    wm geometry $top +$x+$y
@


1.6
log
@*- cleanup variables
@
text
@d167 1
a167 1
    cmd_set $id
@


1.5
log
@*- put (id) in the title
@
text
@d12 2
a13 8
    global player_screen
    global ps_file
    global ps_title
    global ps_creator
    global ps_font
    global ps_size
    global ps_linewidth
    global ps_zclip
d22 1
a22 1
    if ![info exists ps_file($id)] {
d24 1
a24 1
	set ps_file($id) $default_file
d27 2
a28 2
    if ![info exists ps_title($id)] {
	set ps_title($id) "No Title"
d31 2
a32 2
    if ![info exists ps_creator($id)] {
	set ps_creator($id) "$id"
d35 2
a36 2
    if ![info exists ps_font($id)] {
	set ps_font($id) "Courier"
d39 2
a40 2
    if ![info exists ps_size($id)] {
	set ps_size($id) 4.5
d43 2
a44 2
    if ![info exists ps_linewidth($id)] {
	set ps_linewidth($id) 1
d47 2
a48 2
    if ![info exists ps_zclip($id)] {
	set ps_zclip($id) 1
d51 1
a51 1
    toplevel $top -screen $player_screen($id)
d64 1
a64 1
    entry $top.fileE -relief flat -width 10 -textvar ps_file($id)
d67 1
a67 1
    entry $top.titleE -relief flat -width 10 -textvar ps_title($id)
d70 1
a70 1
    entry $top.creatorE -relief flat -width 10 -textvar ps_creator($id)
d73 1
a73 1
    entry $top.fontE -relief flat -width 17 -textvar ps_font($id)
d86 1
a86 1
	    -command "set ps_font($id) Courier"
d88 1
a88 1
	    -command "set ps_font($id) Courier-Oblique"
d90 1
a90 1
	    -command "set ps_font($id) Courier-Bold"
d92 1
a92 1
	    -command "set ps_font($id) Courier-BoldOblique"
d96 1
a96 1
	    -command "set ps_font($id) Helvetica"
d98 1
a98 1
	    -command "set ps_font($id) Helvetica-Oblique"
d100 1
a100 1
	    -command "set ps_font($id) Helvetica-Bold"
d102 1
a102 1
	    -command "set ps_font($id) Helvetica-BoldOblique"
d106 1
a106 1
	    -command "set ps_font($id) Times-Roman"
d108 1
a108 1
	    -command "set ps_font($id) Times-Italic"
d110 1
a110 1
	    -command "set ps_font($id) Times-Bold"
d112 1
a112 1
	    -command "set ps_font($id) Times-BoldItalic"
d115 1
a115 1
    entry $top.sizeE -relief flat -width 10 -textvar ps_size($id)
d118 1
a118 1
    entry $top.linewidthE -relief flat -width 10 -textvar ps_linewidth($id)
d121 1
a121 1
	    -variable ps_zclip($id)
d164 2
a165 8
    global player_screen
    global ps_file
    global ps_title
    global ps_creator
    global ps_font
    global ps_size
    global ps_linewidth
    global ps_zclip
d170 5
a174 5
    if {$ps_file($id) != ""} {
	if {[file exists $ps_file($id)]} {
	    set result [cad_dialog .$id.psDialog $player_screen($id)\
		    "Overwrite $ps_file($id)?"\
		    "Overwrite $ps_file($id)?"\
d182 1
a182 1
	cad_dialog .$id.psDialog $player_screen($id)\
d189 2
a190 2
    if {$ps_title($id) != ""} {
	append ps_cmd " -t \"$ps_title($id)\""
d193 2
a194 2
    if {$ps_creator($id) != ""} {
	 append ps_cmd " -c \"$ps_creator($id)\""
d197 2
a198 2
    if {$ps_font($id) != ""} {
	 append ps_cmd " -f $ps_font($id)"
d201 2
a202 2
    if {$ps_size($id) != ""} {
	 append ps_cmd " -s $ps_size($id)"
d205 2
a206 2
    if {$ps_linewidth($id) != ""} {
	 append ps_cmd " -l $ps_linewidth($id)"
d209 1
a209 1
    if {$ps_zclip($id) != 0} {
d213 1
a213 1
    append ps_cmd " $ps_file($id)"
@


1.4
log
@*- using cad_dialog instead of mged_dialog
@
text
@d166 1
a166 1
    wm title $top "PostScript Tool..."
@


1.3
log
@*- mods for pjt demo
@
text
@d184 1
a184 1
	    set result [mged_dialog .$id.psDialog $player_screen($id)\
d194 1
a194 1
	mged_dialog .$id.psDialog $player_screen($id)\
@


1.2
log
@*** empty log message ***
@
text
@d4 1
a4 1
#	Widget for producing PostScript files of MGED's current view.
@


1.1
log
@Initial revision
@
text
@d9 2
d29 1
a29 1
	regsub \.g$ [opendb] .ps default_file
d180 1
a180 1
    set ps_cmd "ps"
d195 2
a196 2
		"You must specify a file name!"\
		"You must specify a file name!"\
@
