head	1.22;
access;
symbols
	ansi-20040405-merged:1.20.4.1
	postmerge-20040405-ansi:1.21
	premerge-20040404-ansi:1.21
	postmerge-autoconf:1.21
	autoconf-freeze:1.21
	premerge-autoconf:1.21
	postmerge-20040315-windows:1.21
	premerge-20040315-windows:1.21
	windows-20040315-freeze:1.20.6.2
	autoconf-20031203:1.21
	autoconf-20031202:1.21
	autoconf-branch:1.21.0.6
	phong-branch:1.21.0.4
	photonmap-branch:1.21.0.2
	rel-6-1-DP:1.20
	windows-branch:1.20.0.6
	rel-6-0-2:1.20
	ansi-branch:1.20.0.4
	rel-6-0-1-branch:1.20.0.2
	hartley-6-0-post:1.20
	hartley-6-0-pre:1.20
	rel-6-0-1:1.20
	rel-6-0:1.20
	rel-5-4:1.17.2.1
	offsite-5-3-pre:1.18
	rel-5-3:1.17.2.1
	rel-5-2:1.17
	rel-5-1-branch:1.17.0.2
	rel-5-1:1.17
	rel-5-0:1.17
	rel-5-0-beta:1.12;
locks; strict;
comment	@# @;


1.22
date	2004.05.21.16.41.31;	author morrison;	state dead;
branches;
next	1.21;

1.21
date	2003.03.13.19.45.32;	author jra;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.30.20.25.17;	author bparker;	state Exp;
branches
	1.20.4.1
	1.20.6.1;
next	1.19;

1.19
date	2001.04.03.22.33.03;	author bparker;	state Exp;
branches;
next	1.18;

1.18
date	2000.12.22.00.35.14;	author bparker;	state Exp;
branches;
next	1.17;

1.17
date	99.09.10.23.07.08;	author bparker;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	99.09.01.21.26.15;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	99.09.01.18.05.56;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	99.06.22.22.25.18;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	99.06.11.20.09.24;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	99.02.10.15.21.14;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	99.01.19.22.31.31;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	99.01.05.21.17.32;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	98.12.30.22.04.12;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	98.12.18.20.26.59;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	98.12.09.22.07.15;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	98.11.06.20.58.59;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.08.13.12.38.32;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.06.24.18.38.06;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.06.09.17.54.48;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.04.23.13.20.25;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.03.20.22.42.46;	author bparker;	state Exp;
branches;
next	;

1.17.2.1
date	2000.12.22.00.02.27;	author bparker;	state Exp;
branches;
next	;

1.20.4.1
date	2004.03.17.21.23.13;	author morrison;	state Exp;
branches;
next	;

1.20.6.1
date	2002.09.26.23.04.20;	author morrison;	state Exp;
branches;
next	1.20.6.2;

1.20.6.2
date	2004.03.11.23.48.59;	author morrison;	state Exp;
branches;
next	;


desc
@Control Panel for MGED's Query Ray behavior.
@


1.22
log
@moved to src/tclscripts/
@
text
@#
#                       Q R A Y . T C L
#
# Author -
#	Robert G. Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Description -
#	Control Panel for MGED's Query Ray behavior.
#

proc init_qray_control { id } {
    global mged_gui
    global qray_control
    global mouse_behavior
    global use_air
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set qray_control($id,top) .$id.qray_control
    set top $qray_control($id,top)

    if [winfo exists $top] {
	raise $top

	return
    }

    if {$mouse_behavior == "q"} {
	set qray_control($id,active) 1
    } else {
	set qray_control($id,active) 0
    }

    set qray_control($id,use_air) $use_air
    set qray_control($id,cmd_echo) [_mged_qray echo]
    set qray_control($id,effects) [_mged_qray effects]
    set qray_control($id,basename) [_mged_qray basename]
    set qray_control($id,oddcolor) [_mged_qray oddcolor]
    set qray_control($id,evencolor) [_mged_qray evencolor]
    set qray_control($id,voidcolor) [_mged_qray voidcolor]
    set qray_control($id,overlapcolor) [_mged_qray overlapcolor]

    set qray_control($id,padx) 4
    set qray_control($id,pady) 4

    toplevel $top -screen $mged_gui($id,screen)

    frame $top.gridF1 -relief groove -bd 2
    frame $top.gridFF1
    label $top.colorL -text "Query Ray Colors"
    hoc_register_data $top.colorL "Query Ray Colors"\
	    { { summary "A query ray is a ray that is fired from
a point in the view plane as specified by
the user with a mouse click. The user can
fire from precise points by activating grid
snapping. In general, the query ray is used
to hit objects in model space. The user can
then select among those that are hit for the
purposes of editing or for getting specific
information about the objects. By enabling
graphics effects the user can see the ray
drawn through the geometry with the color of
the ray segments changing as the ray enters/leaves
an object. More specifically, the \"odd\" objects
encountered can be colored one way, while the
\"even\" objects can be colored another. Where
no objects were hit (i.e. void), yet another
color can be used. Lastly, overlaps can also be
colored, distinguishing them from everything else." } }

    frame $top.oddColorFF
    label $top.oddColorL -text "odd" -anchor e
    hoc_register_data $top.oddColorL "Odd Color"\
	    { { summary "The odd ray segments encountered along the
ray have their own color specification. This
allows the user to better visualize when the
ray enters/leaves an object." } }
    color_entry_build $top oddColor qray_control($id,oddcolor)\
	    "color_entry_chooser $id $top oddColor \"Odd Color\"\
	    qray_control $id,oddcolor"\
	    12 $qray_control($id,oddcolor) not_rt

    frame $top.evenColorFF
    label $top.evenColorL -text "even" -anchor e
    hoc_register_data $top.evenColorL "Even Color"\
	    { { summary "The even ray segments encountered along the
ray have their own color specification. This
allows the user to better visualize when the
ray enters/leaves an object." } }
    color_entry_build $top evenColor qray_control($id,evencolor)\
	    "color_entry_chooser $id $top evenColor \"Even Color\"\
	    qray_control $id,evencolor"\
	    8 $qray_control($id,evencolor) not_rt

    frame $top.voidColorFF
    label $top.voidColorL -text "void" -anchor e
    hoc_register_data $top.voidColorL "Void Color"\
	    { { summary "The void ray segments encountered along the
ray have their own color specification. This
allows the user to better visualize when the
ray enters/leaves an object." } }
    color_entry_build $top voidColor qray_control($id,voidcolor)\
	    "color_entry_chooser $id $top voidColor \"Void Color\"\
	    qray_control $id,voidcolor"\
	    8 $qray_control($id,voidcolor) not_rt

    frame $top.overlapColorFF
    label $top.overlapColorL -text "overlap" -anchor e
    hoc_register_data $top.overlapColorL "Overlap Color"\
	    { { summary "The overlap ray segments encountered along the
ray have their own color specification. This
allows the user to better visualize when the
ray enters/leaves an object." } }
    color_entry_build $top overlapColor qray_control($id,overlapcolor)\
	    "color_entry_chooser $id $top overlapColor \"Overlap Color\"\
	    qray_control $id,overlapcolor"\
	    8 $qray_control($id,overlapcolor) not_rt

    grid $top.colorL - -sticky "ew" -in $top.gridFF1
    grid $top.oddColorL $top.oddColorF -sticky "nsew" -in $top.gridFF1
    grid $top.evenColorL $top.evenColorF -sticky "nsew" -in $top.gridFF1
    grid $top.voidColorL $top.voidColorF -sticky "nsew" -in $top.gridFF1
    grid $top.overlapColorL $top.overlapColorF -sticky "nsew" -in $top.gridFF1
    grid columnconfigure $top.gridFF1 1 -weight 1
    grid rowconfigure $top.gridFF1 1 -weight 1
    grid rowconfigure $top.gridFF1 2 -weight 1
    grid rowconfigure $top.gridFF1 3 -weight 1
    grid rowconfigure $top.gridFF1 4 -weight 1
    grid $top.gridFF1 -sticky "nsew" -in $top.gridF1 \
	    -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid columnconfigure $top.gridF1 0 -weight 1
    grid rowconfigure $top.gridF1 0 -weight 1

    frame $top.gridF2 -relief groove -bd 2
    frame $top.gridFF2
    set hoc_data { { summary "The base name is used to build the names
of fake solids that are created for the ray.
Specifically, there is one solid created for
each color used. Note that it is possible to
create a maximum of four fake solids as a
result of firing a query ray." } }
    label $top.bnameL -text "Base Name" -anchor e
    hoc_register_data $top.bnameL "Base Name" $hoc_data
    entry $top.bnameE -relief sunken -bd 2 -textvar qray_control($id,basename)
    hoc_register_data $top.bnameE "Base Name" $hoc_data
    grid $top.bnameL $top.bnameE -sticky "nsew" -in $top.gridFF2
    grid columnconfigure $top.gridFF2 1 -weight 1
    grid rowconfigure $top.gridFF2 0 -weight 1
    grid $top.gridFF2 -sticky "nsew" -in $top.gridF2 \
	    -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid columnconfigure $top.gridF2 0 -weight 1
    grid rowconfigure $top.gridF2 0 -weight 1

    frame $top.gridF3 -relief groove -bd 2
    label $top.effectsL -text "Effects" -anchor w
    hoc_register_data $top.effectsL "Query Ray Effects"\
	    { { summary "The query ray can produce textual
and graphical output. The textual output
consists of information about the ray
as specified by the format strings.
Graphical output consists of the query
rays being drawn through the geometry." } }
    checkbutton $top.cmd_echoCB -relief flat -text "Echo Cmd"\
	    -offvalue 0 -onvalue 1 -variable qray_control($id,cmd_echo)
    hoc_register_data $top.cmd_echoCB "Echo Cmd"\
	    { { summary "Toggle echoing of the command used
to fire a query ray." }
              { see_also "nirt" } }
    menubutton $top.effectsMB -textvariable qray_control($id,text_effects)\
	    -menu $top.effectsMB.m -indicatoron 1
    hoc_register_data $top.effectsMB "Query Ray Effects"\
	    { { summary "Pops up a menu of query ray effects." } }
    menu $top.effectsMB.m -title "Query Ray Effects" -tearoff 0
    $top.effectsMB.m add radiobutton -value t -variable qray_control($id,effects)\
	    -label "Text" -command "qray_effects $id"
    hoc_register_menu_data "Query Ray Effects" "Text" "Query Ray Effects - Text"\
	    { { summary "Produce only textual output. This consists
of information about the ray as specified
by the format strings." } }
    $top.effectsMB.m add radiobutton -value g -variable qray_control($id,effects)\
	    -label "Graphics" -command "qray_effects $id"
    hoc_register_menu_data "Query Ray Effects" "Graphics" "Query Ray Effects - Graphics"\
	    { { summary "Produce only graphical output. This consists
of the query rays being drawn through
the geometry." } }
    $top.effectsMB.m add radiobutton -value b -variable qray_control($id,effects)\
	    -label "Both" -command "qray_effects $id"
    hoc_register_menu_data "Query Ray Effects" "Both" "Query Ray Effects - Both"\
	    { { summary "Produce both textual and graphical output.
The textual output consists of information
about the ray as specified by the format
strings. Graphical output consists of the
query rays being drawn through the geometry." } }
    grid $top.effectsL x $top.cmd_echoCB x $top.effectsMB\
	    -sticky "ew" -in $top.gridF3 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid columnconfigure $top.gridF3 1 -weight 1
    grid columnconfigure $top.gridF3 3 -weight 1

    frame $top.gridF4
    checkbutton $top.activeCB -relief flat -text "Mouse Active"\
	    -offvalue 0 -onvalue 1 -variable qray_control($id,active)
    hoc_register_data $top.activeCB "Mouse Active"\
	    { { summary "Toggle query ray mode. When the mouse
behavior mode is \"query ray\" the mouse
can be used to fire query rays through
the geometry. This is done by pressing
the same mouse button that is used to
center the view in default mouse behavior
mode." } }
    checkbutton $top.use_airCB -relief flat -text "Use Air"\
	    -offvalue 0 -onvalue 1 -variable qray_control($id,use_air)
    hoc_register_data $top.use_airCB "Use Air"\
	    { { summary "Toggle whether or not to use air. By
default air is ignored." } }
    button $top.advB -relief raised -text "Advanced..."\
	    -command "init_qray_adv $id"
    hoc_register_data $top.advB "Advanced Query Ray Settings"\
	    { { summary "Pop up the advanced query ray settings
control panel." } }
    grid $top.activeCB $top.use_airCB x $top.advB -in $top.gridF4 -padx $qray_control($id,padx)

    frame $top.gridF5
    button $top.okB -relief raised -text "OK"\
	    -command "qray_ok $id $top"
    hoc_register_data $top.okB "OK"\
	    { { summary "Apply the query ray control panel settings
to MGED's internal state, then close the
query ray control panel." } }
    button $top.applyB -relief raised -text "Apply"\
	    -command "qray_apply $id"
    hoc_register_data $top.applyB "Apply"\
	    { { summary "Apply the query ray control panel settings
to MGED's internal state." } }
    button $top.resetB -relief raised -text "Reset"\
	    -command "qray_reset $id"
    hoc_register_data $top.resetB "Reset"\
	    { { summary "Set the query ray control panel according
to MGED's internal state." } }
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"
    hoc_register_data $top.dismissB "Dismiss"\
	    { { summary "Close the query ray control panel." } }
    grid $top.okB $top.applyB x $top.resetB x $top.dismissB -sticky "ew" -in $top.gridF5
    grid columnconfigure $top.gridF5 2 -weight 1
    grid columnconfigure $top.gridF5 4 -weight 1

    grid $top.gridF1 -sticky "nsew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid $top.gridF2 -sticky "nsew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid $top.gridF3 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid $top.gridF4 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid $top.gridF5 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid columnconfigure $top 0 -weight 1
    grid rowconfigure $top 0 -weight 4
    grid rowconfigure $top 1 -weight 1

    qray_reset $id
    set qray_control($id,effects) [_mged_qray effects]
    qray_effects $id

    place_near_mouse $top
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top }"
    wm title $top "Query Ray Control Panel ($id)"
}

proc qray_ok { id top } {
    qray_apply $id
    catch { destroy $top }
}

proc qray_apply { id } {
    global mged_gui
    global use_air
    global mouse_behavior
    global qray_control

    if {$qray_control($id,active)} {
	set mged_gui($id,mouse_behavior) q
    } elseif {$mouse_behavior == "q"} {
	set mged_gui($id,mouse_behavior) d
    }

    set mged_gui($id,use_air) $qray_control($id,use_air)

    mged_apply $id "set mouse_behavior $mged_gui($id,mouse_behavior);\
	    set use_air $qray_control($id,use_air);\
	    qray echo $qray_control($id,cmd_echo);\
	    qray effects $qray_control($id,effects);\
	    qray basename $qray_control($id,basename);\
	    eval qray oddcolor [getRGBorReset $qray_control($id,top).oddColorMB qray_control($id,oddcolor) $qray_control($id,oddcolor)];\
	    eval qray evencolor [getRGBorReset $qray_control($id,top).evenColorMB qray_control($id,evencolor) $qray_control($id,evencolor)];\
	    eval qray voidcolor [getRGBorReset $qray_control($id,top).voidColorMB qray_control($id,voidcolor) $qray_control($id,voidcolor)];\
	    eval qray overlapcolor [getRGBorReset $qray_control($id,top).overlapColorMB qray_control($id,overlapcolor) $qray_control($id,overlapcolor)]"
}

proc qray_reset { id } {
    global mged_gui
    global qray_control
    global use_air
    global mouse_behavior

    set top .$id.qray_control

    if ![winfo exists $top] {
	return
    }

    winset $mged_gui($id,active_dm)

    if {$mouse_behavior == "q"} {
	set qray_control($id,active) 1
    } else {
	set qray_control($id,active) 0
    }

    set qray_control($id,use_air) $use_air
    set qray_control($id,cmd_echo) [_mged_qray echo]
    set qray_control($id,effects) [_mged_qray effects]
    set qray_control($id,basename) [_mged_qray basename]

    # update qray_control($id,text_effects)
    qray_effects $id

    set qray_control($id,oddcolor) [_mged_qray oddcolor]
    setWidgetRGBColor $top.oddColorMB qray_control($id,oddcolor) \
	    $qray_control($id,oddcolor)

    set qray_control($id,evencolor) [_mged_qray evencolor]
    setWidgetRGBColor $top.evenColorMB qray_control($id,evencolor) \
	    $qray_control($id,evencolor)

    set qray_control($id,voidcolor) [_mged_qray voidcolor]
    setWidgetRGBColor $top.voidColorMB qray_control($id,voidcolor) \
	    $qray_control($id,voidcolor)

    set qray_control($id,overlapcolor) [_mged_qray overlapcolor]
    setWidgetRGBColor $top.overlapColorMB qray_control($id,overlapcolor) \
	    $qray_control($id,overlapcolor)
}

## - qray_effects
#
# Update qray_control($id,text_effects)
#
proc qray_effects { id } {
    global qray_control

    set top .$id.qray_control

    switch $qray_control($id,effects) {
	t {
	    set qray_control($id,text_effects) "Text"
	}
	g {
	    set qray_control($id,text_effects) "Graphics"
	}
	b {
	    set qray_control($id,text_effects) "Both"
	}
    }
}

proc init_qray_adv { id } {
    global mged_gui
    global qray_control

    set top .$id.qray_adv

    if [winfo exists $top] {
	raise $top

	return
    }

    toplevel $top -screen $mged_gui($id,screen)
    qray_reset_fmt $id

    frame $top.gridF1 -relief groove -bd 2
    frame $top.gridFF1
    label $top.fmtL -text "Query Ray Formats"
    hoc_register_data $top.fmtL "Query Ray Formats"\
	    { { summary "Ask pjt@@arl.mil about the six different
format strings that can be set." } }

    label $top.rayL  -text "Ray" -anchor e
    hoc_register_data $top.rayL "Ray Format String"\
	    { { summary "Enter/edit the ray format string." }
              { see_also "nirt" } }
    entry $top.rayE -relief sunken -bd 2 -width 80 -textvar qray_control($id,fmt_ray)
    hoc_register_data $top.rayE "Ray Format String"\
	    { { summary "Enter/edit the ray format string. Note that the
middle mouse button can be used to scroll
the entry widget. Also, by default, the
entry widget supports some emacs style
bindings." }
              { see_also "nirt" } }

    label $top.headL -text "Head" -anchor e
    hoc_register_data $top.headL "Head Format String"\
	    { { summary "Enter/edit the head format string." }
              { see_also "nirt" } }
    entry $top.headE -relief sunken -bd 2 -width 80 -textvar qray_control($id,fmt_head)
    hoc_register_data $top.headE "Head Format String"\
	    { { summary "Enter/edit the head format string. Note that the
middle mouse button can be used to scroll
the entry widget. Also, by default, the
entry widget supports some emacs style
bindings." }
              { see_also "nirt" } }

    label $top.partitionL -text "Partition" -anchor e
    hoc_register_data $top.partitionL "Partition Format String"\
	    { { summary "Enter/edit the partition format string." }
              { see_also "nirt" } }
    entry $top.partitionE -relief sunken -bd 2 -width 80 -textvar qray_control($id,fmt_partition)
    hoc_register_data $top.partitionE "Partition Format String"\
	    { { summary "Enter/edit the partition format string. Note that the
middle mouse button can be used to scroll
the entry widget. Also, by default, the
entry widget supports some emacs style
bindings." }
              { see_also "nirt" } }

    label $top.footL -text "Foot" -anchor e
    hoc_register_data $top.footL "Foot Format String"\
	    { { summary "Enter/edit the foot format string." } 
              { see_also "nirt" } }
    entry $top.footE -relief sunken -bd 2 -width 80 -textvar qray_control($id,fmt_foot)
    hoc_register_data $top.footE "Foot Format String"\
	    { { summary "Enter/edit the foot format string. Note that the
middle mouse button can be used to scroll
the entry widget. Also, by default, the
entry widget supports some emacs style
bindings." }
              { see_also "nirt" } }

    label $top.missL -text "Miss" -anchor e
    hoc_register_data $top.missL "Miss Format String"\
	    { { summary "Enter/edit the miss format string." }
              { see_also "nirt" } }
    entry $top.missE -relief sunken -bd 2 -width 80 -textvar qray_control($id,fmt_miss)
    hoc_register_data $top.missE "Miss Format String"\
	    { { summary "Enter/edit the miss format string. Note that the
middle mouse button can be used to scroll
the entry widget. Also, by default, the
entry widget supports some emacs style
bindings." }
              { see_also "nirt" } }

    label $top.overlapL -text "Overlap" -anchor e
    hoc_register_data $top.overlapL "Overlap Format String"\
	    { { summary "Enter/edit the overlay format string." }
              { see_also "nirt" } }
    entry $top.overlapE -relief sunken -bd 2 -width 80 -textvar qray_control($id,fmt_overlap)
    hoc_register_data $top.overlapE "Overlap Format String"\
	    { { summary "Enter/edit the overlap format string. Note that the
middle mouse button can be used to scroll
the entry widget. Also, by default, the
entry widget supports some emacs style
bindings." }
              { see_also "nirt" } }

    label $top.scriptL -text "Script" -anchor e
    hoc_register_data $top.scriptL "Script String"\
	    { { summary "Enter/edit the nirt script string." }
              { see_also "nirt" } }
    entry $top.scriptE -relief sunken -bd 2 -width 80 -textvar qray_control($id,script)
    hoc_register_data $top.scriptE "Script String"\
	    { { summary "Enter/edit the nirt script string. Note that the
middle mouse button can be used to scroll
the entry widget. Also, by default, the
entry widget supports some emacs style
bindings." }
              { see_also "nirt" } }

    frame $top.gridF2
    button $top.okB -relief raised -text "OK"\
	    -command "qray_ok_fmt $id $top"
    hoc_register_data $top.okB "OK"\
	    { { summary "Apply the format string settings to
MGED's internal state, then close the
advanced settings control panel." } }
    button $top.applyB -relief raised -text "Apply"\
	    -command "qray_apply_fmt $id"
    hoc_register_data $top.applyB "Apply"\
	    { { summary "Apply the format string settings to
MGED's internal state." } }
    button $top.resetB -relief raised -text "Reset"\
	    -command "qray_reset_fmt $id"
    hoc_register_data $top.resetB "Reset"\
	    { { summary "Set the format strings in the control
panel according to MGED's internal state." } }
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"
    hoc_register_data $top.dismissB "Dismiss"\
	    { { summary "Close the advanced settings control panel." } }

    grid $top.fmtL - -sticky "ew" -in $top.gridFF1
    grid $top.rayL $top.rayE -sticky "nsew" -in $top.gridFF1
    grid $top.headL $top.headE -sticky "nsew" -in $top.gridFF1
    grid $top.partitionL $top.partitionE -sticky "nsew" -in $top.gridFF1
    grid $top.footL $top.footE -sticky "nsew" -in $top.gridFF1
    grid $top.missL $top.missE -sticky "nsew" -in $top.gridFF1
    grid $top.overlapL $top.overlapE -sticky "nsew" -in $top.gridFF1
    grid $top.scriptL $top.scriptE -sticky "nsew" -in $top.gridFF1
    grid columnconfigure $top.gridFF1 1 -weight 1
    grid rowconfigure $top.gridFF1 1 -weight 1
    grid rowconfigure $top.gridFF1 2 -weight 1
    grid rowconfigure $top.gridFF1 3 -weight 1
    grid rowconfigure $top.gridFF1 4 -weight 1
    grid rowconfigure $top.gridFF1 5 -weight 1
    grid rowconfigure $top.gridFF1 6 -weight 1
    grid rowconfigure $top.gridFF1 7 -weight 1
    grid $top.gridFF1 -sticky "nsew" -in $top.gridF1 \
	    -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid columnconfigure $top.gridF1 0 -weight 1
    grid rowconfigure $top.gridF1 0 -weight 1

    grid $top.okB $top.applyB x $top.resetB x $top.dismissB -sticky "ew" -in $top.gridF2
    grid columnconfigure $top.gridF2 2 -weight 1
    grid columnconfigure $top.gridF2 4 -weight 1

    grid $top.gridF1 -sticky "nsew" \
	    -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid $top.gridF2 -sticky "ew" \
	    -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid columnconfigure $top 0 -weight 1
    grid rowconfigure $top 0 -weight 1

    place_near_mouse $top
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top }"
    wm title $top "Query Ray Advanced Settings ($id)"
}

proc qray_ok_fmt { id top } {
    qray_apply_fmt $id
    catch { destroy $top }
}

proc qray_apply_fmt { id } {
    global mged_gui
    global qray_control

    winset $mged_gui($id,active_dm)
    qray fmt r $qray_control($id,fmt_ray)
    qray fmt h $qray_control($id,fmt_head)
    qray fmt p $qray_control($id,fmt_partition)
    qray fmt f $qray_control($id,fmt_foot)
    qray fmt m $qray_control($id,fmt_miss)
    qray fmt o $qray_control($id,fmt_overlap)
    qray script $qray_control($id,script)
}

proc qray_reset_fmt { id } {
    global mged_gui
    global qray_control

    winset $mged_gui($id,active_dm)
    set qray_control($id,fmt_ray) [_mged_qray fmt r]
    set qray_control($id,fmt_head) [_mged_qray fmt h]
    set qray_control($id,fmt_partition) [_mged_qray fmt p]
    set qray_control($id,fmt_foot) [_mged_qray fmt f]
    set qray_control($id,fmt_miss) [_mged_qray fmt m]
    set qray_control($id,fmt_overlap) [_mged_qray fmt o]
    set qray_control($id,script) [_mged_qray script]
}

## - qray_nirt
#
# Delete phony solids from the display list before calling nirt.
#
proc qray_nirt { args } {
    # delete phony solids
    catch {eval _mged_d [_mged_who phony]}

    eval _mged_nirt $args
}
@


1.21
log
@*** empty log message ***
@
text
@@


1.20
log
@*- add parameter to color_entry_build to indicate
   whether or not to use background colors for rt
@
text
@d25 1
a25 1
    global tkPriv
d28 1
a28 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.20.4.1
log
@sync branch with HEAD
@
text
@d25 1
a25 1
    global ::tk::Priv
d28 1
a28 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.20.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d25 1
a25 1
    variable ::tk::Priv
d28 1
a28 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.20.6.2
log
@sync to HEAD...
@
text
@d25 1
a25 1
    global ::tk::Priv
d28 1
a28 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.19
log
@*- mods requested by Eric regarding consistency
   when using capitalization in the GUI
@
text
@d95 1
a95 1
	    12 $qray_control($id,oddcolor)
d107 1
a107 1
	    8 $qray_control($id,evencolor)
d119 1
a119 1
	    8 $qray_control($id,voidcolor)
d131 1
a131 1
	    8 $qray_control($id,overlapcolor)
@


1.18
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d237 1
a237 1
    button $top.okB -relief raised -text "Ok"\
d239 1
a239 1
    hoc_register_data $top.okB "Ok"\
d490 1
a490 1
    button $top.okB -relief raised -text "Ok"\
d492 1
a492 1
    hoc_register_data $top.okB "Ok"\
@


1.17
log
@*- mods convert non-rgb entries to rgb before feeding
   to MGED
@
text
@d25 1
d28 1
a28 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
@


1.17.2.1
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@a24 1
    global tkPriv
d27 1
a27 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.16
log
@*- call _mged_qray instead of qray
*- mods to qray_reset to update the effects menubutton text
*- new proc called qray_nirt that deletes phony solids
   before calling _mged_nirt
@
text
@d32 2
a33 1
    set top .$id.qray_control
d302 4
a305 4
	    eval qray oddcolor $qray_control($id,oddcolor);\
	    eval qray evencolor $qray_control($id,evencolor);\
	    eval qray voidcolor $qray_control($id,voidcolor);\
	    eval qray overlapcolor $qray_control($id,overlapcolor)"
@


1.15
log
@*- check for no open database
*- call set_WidgetRGBColor with new signature
@
text
@d47 7
a53 7
    set qray_control($id,cmd_echo) [qray echo]
    set qray_control($id,effects) [qray effects]
    set qray_control($id,basename) [qray basename]
    set qray_control($id,oddcolor) [qray oddcolor]
    set qray_control($id,evencolor) [qray evencolor]
    set qray_control($id,voidcolor) [qray voidcolor]
    set qray_control($id,overlapcolor) [qray overlapcolor]
d269 1
a269 1
    set qray_control($id,effects) [qray effects]
d328 3
a330 3
    set qray_control($id,cmd_echo) [qray echo]
    set qray_control($id,effects) [qray effects]
    set qray_control($id,basename) [qray basename]
d332 4
a335 1
    set qray_control($id,oddcolor) [qray oddcolor]
d339 1
a339 1
    set qray_control($id,evencolor) [qray evencolor]
d343 1
a343 1
    set qray_control($id,voidcolor) [qray voidcolor]
d347 1
a347 1
    set qray_control($id,overlapcolor) [qray overlapcolor]
d352 4
d570 18
a587 7
    set qray_control($id,fmt_ray) [qray fmt r]
    set qray_control($id,fmt_head) [qray fmt h]
    set qray_control($id,fmt_partition) [qray fmt p]
    set qray_control($id,fmt_foot) [qray fmt f]
    set qray_control($id,fmt_miss) [qray fmt m]
    set qray_control($id,fmt_overlap) [qray fmt o]
    set qray_control($id,script) [qray script]
@


1.14
log
@*- typo
@
text
@d26 6
d333 2
a334 1
    set_WidgetRGBColor $top.oddColorMB $qray_control($id,oddcolor)
d337 2
a338 1
    set_WidgetRGBColor $top.evenColorMB $qray_control($id,evencolor)
d341 2
a342 1
    set_WidgetRGBColor $top.voidColorMB $qray_control($id,voidcolor)
d345 2
a346 1
    set_WidgetRGBColor $top.overlapColorMB $qray_control($id,overlapcolor)
@


1.13
log
@*- add entry for nirt script
@
text
@d352 1
a352 1
	    set qray_control($id,text_effects) "both"
@


1.12
log
@*- use place_near_mouse proc to position widgets near the mouse
@
text
@d34 5
a38 6
    if ![info exists qray_control($id,oddcolor)] {
	if {$mouse_behavior == "q"} {
	    set qray_control($id,active) 1
	} else {
	    set qray_control($id,active) 0
	}
d40 8
a47 9
	set qray_control($id,use_air) $use_air
	set qray_control($id,cmd_echo) [qray echo]
	set qray_control($id,effects) [qray effects]
	set qray_control($id,basename) [qray basename]
	set qray_control($id,oddcolor) [qray oddcolor]
	set qray_control($id,evencolor) [qray evencolor]
	set qray_control($id,voidcolor) [qray voidcolor]
	set qray_control($id,overlapcolor) [qray overlapcolor]
    }
d381 1
a381 1
	    { { summary "Ask pjt@@arl.mil about the ray format string." }
d385 1
a385 1
	    { { summary "Enter the ray format string. Note that the
d394 1
a394 1
	    { { summary "Ask pjt@@arl.mil about the head format string." }
d398 1
a398 1
	    { { summary "Enter the head format string. Note that the
d407 1
a407 1
	    { { summary "Ask pjt@@arl.mil about the partition format string." }
d411 1
a411 1
	    { { summary "Enter the partition format string. Note that the
d420 1
a420 1
	    { { summary "Ask pjt@@arl.mil about the foot format string." } 
d424 1
a424 1
	    { { summary "Enter the foot format string. Note that the
d433 1
a433 1
	    { { summary "Ask pjt@@arl.mil about the miss format string." }
d437 1
a437 1
	    { { summary "Enter the miss format string. Note that the
d446 1
a446 1
	    { { summary "Ask pjt@@arl.mil about the overlay format string." }
d450 14
a463 1
	    { { summary "Enter the overlap format string. Note that the
d499 1
d507 1
d545 1
d559 1
@


1.11
log
@*- cleanup variables
@
text
@d268 1
a268 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

a269 1
    wm geometry $top +$x+$y
d511 1
a511 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

a512 1
    wm geometry $top +$x+$y
@


1.10
log
@*- move entry labels beside the entry widgets
*- better resizing
@
text
@d21 1
a21 3
    global player_screen
    global mged_qray_control
    global mged_qray_effects
a29 1
	set mged_qray_control($id) 1
d54 1
a54 1
    toplevel $top -screen $player_screen($id)
d248 1
a248 1
	    -command "catch { destroy $top; set mged_qray_control($id) 0 }"
d272 1
a272 1
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top; set mged_qray_control($id) 0 }"
a277 2
    global mged_qray_control

a279 2

    set mged_qray_control($id) 0
d283 1
a283 3
    global mged_mouse_behavior
    global mged_use_air
    global mged_qray_effects
d289 1
a289 1
	set mged_mouse_behavior($id) q
d291 1
a291 1
	set mged_mouse_behavior($id) d
d294 1
a294 2
    set mged_use_air($id) $qray_control($id,use_air)
    set mged_qray_control($id,effects) $qray_control($id,effects)
d296 1
a296 1
    mged_apply $id "set mouse_behavior $mged_mouse_behavior($id);\
d308 1
a308 2
    global mged_active_dm
    global mged_use_air
d319 1
a319 1
    winset $mged_active_dm($id)
a345 1
    global mged_qray_effects
d364 1
a364 1
    global player_screen
d375 1
a375 1
    toplevel $top -screen $player_screen($id)
d530 1
a530 1
    global mged_active_dm
d533 1
a533 1
    winset $mged_active_dm($id)
d543 1
a543 1
    global mged_active_dm
d546 1
a546 1
    winset $mged_active_dm($id)
@


1.9
log
@*- mods to qray_reset
@
text
@d60 1
d83 1
a83 1
    label $top.oddColorL -text "odd" -anchor w
a92 3
    grid $top.oddColorL -sticky "ew" -in $top.oddColorFF
    grid $top.oddColorF -sticky "ew" -in $top.oddColorFF
    grid columnconfigure $top.oddColorFF 0 -weight 1
d95 1
a95 1
    label $top.evenColorL -text "even" -anchor w
d104 1
a104 4
	    12 $qray_control($id,evencolor)
    grid $top.evenColorL -sticky "ew" -in $top.evenColorFF
    grid $top.evenColorF -sticky "ew" -in $top.evenColorFF
    grid columnconfigure $top.evenColorFF 0 -weight 1
d107 1
a107 1
    label $top.voidColorL -text "void" -anchor w
d116 1
a116 4
	    12 $qray_control($id,voidcolor)
    grid $top.voidColorL -sticky "ew" -in $top.voidColorFF
    grid $top.voidColorF -sticky "ew" -in $top.voidColorFF
    grid columnconfigure $top.voidColorFF 0 -weight 1
d119 1
a119 1
    label $top.overlapColorL -text "overlap" -anchor w
d128 14
a141 8
	    12 $qray_control($id,overlapcolor)
    grid $top.overlapColorL -sticky "ew" -in $top.overlapColorFF
    grid $top.overlapColorF -sticky "ew" -in $top.overlapColorFF
    grid columnconfigure $top.overlapColorFF 0 -weight 1

    grid $top.colorL - -sticky "n" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid $top.oddColorFF $top.evenColorFF -sticky "ew" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid $top.voidColorFF $top.overlapColorFF -sticky "ew" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
d143 1
a143 2
    grid columnconfigure $top.gridF1 1 -weight 1
    grid $top.gridF1 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
d146 1
a146 1
    frame $top.bnameF
d153 1
a153 1
    label $top.bnameL -text "Base Name" -anchor w
d157 5
a161 4
    grid $top.bnameL -sticky "ew" -in $top.bnameF
    grid $top.bnameE -sticky "ew" -in $top.bnameF
    grid columnconfigure $top.bnameF 0 -weight 1
    grid $top.bnameF -sticky "ew" -in $top.gridF2 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
d163 1
a163 1
    grid $top.gridF2 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
a208 1
    grid $top.gridF3 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
a231 1
    grid $top.gridF4 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
d257 5
a262 1

d264 2
d391 1
d396 2
a397 3
    grid $top.fmtL -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    frame $top.rayF
    label $top.rayL  -text "Ray" -anchor w
d409 2
a410 6
    grid $top.rayL -sticky "ew" -in $top.rayF
    grid $top.rayE -sticky "ew" -in $top.rayF
    grid columnconfigure $top.rayF 0 -weight 1
    grid $top.rayF -sticky "ew" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    frame $top.headF
    label $top.headL -text "Head" -anchor w
d422 2
a423 6
    grid $top.headL -sticky "ew" -in $top.headF
    grid $top.headE -sticky "ew" -in $top.headF
    grid columnconfigure $top.headF 0 -weight 1
    grid $top.headF -sticky "ew" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    frame $top.partitionF
    label $top.partitionL -text "Partition" -anchor w
d435 2
a436 6
    grid $top.partitionL -sticky "ew" -in $top.partitionF
    grid $top.partitionE -sticky "ew" -in $top.partitionF
    grid columnconfigure $top.partitionF 0 -weight 1
    grid $top.partitionF -sticky "ew" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    frame $top.footF
    label $top.footL -text "Foot" -anchor w
d448 2
a449 6
    grid $top.footL -sticky "ew" -in $top.footF
    grid $top.footE -sticky "ew" -in $top.footF
    grid columnconfigure $top.footF 0 -weight 1
    grid $top.footF -sticky "ew" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    frame $top.missF
    label $top.missL -text "Miss" -anchor w
d461 2
a462 6
    grid $top.missL -sticky "ew" -in $top.missF
    grid $top.missE -sticky "ew" -in $top.missF
    grid columnconfigure $top.missF 0 -weight 1
    grid $top.missF -sticky "ew" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    frame $top.overlapF
    label $top.overlapL -text "Overlap" -anchor w
a473 6
    grid $top.overlapL -sticky "ew" -in $top.overlapF
    grid $top.overlapE -sticky "ew" -in $top.overlapF
    grid columnconfigure $top.overlapF 0 -weight 1
    grid $top.overlapF -sticky "ew" -in $top.gridF1 -padx $qray_control($id,padx) -pady $qray_control($id,pady)
    grid columnconfigure $top.gridF1 0 -weight 1
    grid $top.gridF1 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
d496 20
a518 1
    grid $top.gridF2 -sticky "ew" -padx $qray_control($id,padx) -pady $qray_control($id,pady)
d520 4
d525 1
@


1.8
log
@*- use mged_apply
*- mods to help messages
@
text
@d322 6
a328 2

    set top .$id.qray_control
@


1.7
log
@*- use qray_control
*- add help messages
@
text
@d150 1
a150 3
    label $top.bnameL -text "Base Name" -anchor w
    hoc_register_data $top.bnameL "Base Name"\
	    { { summary "The base name is used to build the names
d156 2
d159 1
a159 2
    hoc_register_data $top.bnameE "Base Name"\
	    { { summary "Enter base name for query ray." } }
d179 3
a181 1
	    { { summary "Toggle echoing of the command." } }
d184 2
d242 1
a242 1
to MGED's internal state then close the
d288 1
a288 1
    global mged_active_dm
a289 1
    global mged_mouse_behavior
a294 2
    winset $mged_active_dm($id)

a295 1
	set mouse_behavior q
a297 1
	set mouse_behavior d
a300 1
    set use_air $qray_control($id,use_air)
a301 4

    qray echo $qray_control($id,cmd_echo)

    qray effects $qray_control($id,effects)
d304 9
a312 6
    qray basename $qray_control($id,basename)

    eval qray oddcolor $qray_control($id,oddcolor)
    eval qray evencolor $qray_control($id,evencolor)
    eval qray voidcolor $qray_control($id,voidcolor)
    eval qray overlapcolor $qray_control($id,overlapcolor)
d500 1
a500 1
MGED's internal state then close the
@


1.6
log
@*- change load to reset
@
text
@d24 3
a26 3
    global qray_active_mouse
    global qray_use_air
    global qray_cmd_echo
d37 20
d61 21
a81 2
    frame $top.oddColorF
    frame $top.oddColorFF -relief sunken -bd 2
d83 11
a93 33
    entry $top.oddColorE -relief flat -width 12 -textvar qray_oddColor($id)
    menubutton $top.oddColorMB -relief raised -bd 2\
	    -menu $top.oddColorMB.m -indicatoron 1
    menu $top.oddColorMB.m -tearoff 0
    $top.oddColorMB.m add command -label black\
	    -command "set qray_oddColor($id) \"0 0 0\";\
	    set_WidgetRGBColor $top.oddColorMB \$qray_oddColor($id)"
    $top.oddColorMB.m add command -label white\
	    -command "set qray_oddColor($id) \"255 255 255\";\
	    set_WidgetRGBColor $top.oddColorMB \$qray_oddColor($id)"
    $top.oddColorMB.m add command -label red\
	    -command "set qray_oddColor($id) \"255 0 0\";\
	    set_WidgetRGBColor $top.oddColorMB \$qray_oddColor($id)"
    $top.oddColorMB.m add command -label green\
	    -command "set qray_oddColor($id) \"0 255 0\";\
	    set_WidgetRGBColor $top.oddColorMB \$qray_oddColor($id)"
    $top.oddColorMB.m add command -label blue\
	    -command "set qray_oddColor($id) \"0 0 255\";\
	    set_WidgetRGBColor $top.oddColorMB \$qray_oddColor($id)"
    $top.oddColorMB.m add command -label yellow\
	    -command "set qray_oddColor($id) \"255 255 0\";\
	    set_WidgetRGBColor $top.oddColorMB \$qray_oddColor($id)"
    $top.oddColorMB.m add command -label cyan\
	    -command "set qray_oddColor($id) \"0 255 255\";\
	    set_WidgetRGBColor $top.oddColorMB \$qray_oddColor($id)"
    $top.oddColorMB.m add command -label magenta\
	    -command "set qray_oddColor($id) \"255 0 255\";\
	    set_WidgetRGBColor $top.oddColorMB \$qray_oddColor($id)"
    $top.oddColorMB.m add separator
    $top.oddColorMB.m add command -label "Color Tool..."\
	    -command "qray_choose_color $id $top odd"
    grid $top.oddColorL -sticky "ew" -in $top.oddColorF
    grid $top.oddColorE $top.oddColorMB -sticky "ew" -in $top.oddColorFF
a94 2
    grid $top.oddColorFF -sticky "ew" -in $top.oddColorF
    grid columnconfigure $top.oddColorF 0 -weight 1
d96 1
a96 2
    frame $top.evenColorF
    frame $top.evenColorFF -relief sunken -bd 2
d98 11
a108 33
    entry $top.evenColorE -relief flat -width 12 -textvar qray_evenColor($id)
    menubutton $top.evenColorMB -relief raised -bd 2\
	    -menu $top.evenColorMB.m -indicatoron 1
    menu $top.evenColorMB.m -tearoff 0
    $top.evenColorMB.m add command -label black\
	    -command "set qray_evenColor($id) \"0 0 0\";\
	    set_WidgetRGBColor $top.evenColorMB \$qray_evenColor($id)"
    $top.evenColorMB.m add command -label white\
	    -command "set qray_evenColor($id) \"255 255 255\";\
	    set_WidgetRGBColor $top.evenColorMB \$qray_evenColor($id)"
    $top.evenColorMB.m add command -label red\
	    -command "set qray_evenColor($id) \"255 0 0\";\
	    set_WidgetRGBColor $top.evenColorMB \$qray_evenColor($id)"
    $top.evenColorMB.m add command -label green\
	    -command "set qray_evenColor($id) \"0 255 0\";\
	    set_WidgetRGBColor $top.evenColorMB \$qray_evenColor($id)"
    $top.evenColorMB.m add command -label blue\
	    -command "set qray_evenColor($id) \"0 0 255\";\
	    set_WidgetRGBColor $top.evenColorMB \$qray_evenColor($id)"
    $top.evenColorMB.m add command -label yellow\
	    -command "set qray_evenColor($id) \"255 255 0\";\
	    set_WidgetRGBColor $top.evenColorMB \$qray_evenColor($id)"
    $top.evenColorMB.m add command -label cyan\
	    -command "set qray_evenColor($id) \"0 255 255\";\
	    set_WidgetRGBColor $top.evenColorMB \$qray_evenColor($id)"
    $top.evenColorMB.m add command -label magenta\
	    -command "set qray_evenColor($id) \"255 0 255\";\
	    set_WidgetRGBColor $top.evenColorMB \$qray_evenColor($id)"
    $top.evenColorMB.m add separator
    $top.evenColorMB.m add command -label "Color Tool..."\
	    -command "qray_choose_color $id $top even"
    grid $top.evenColorL -sticky "ew" -in $top.evenColorF
    grid $top.evenColorE $top.evenColorMB -sticky "ew" -in $top.evenColorFF
a109 2
    grid $top.evenColorFF -sticky "ew" -in $top.evenColorF
    grid columnconfigure $top.evenColorF 0 -weight 1
d111 1
a111 2
    frame $top.voidColorF
    frame $top.voidColorFF -relief sunken -bd 2
d113 11
a123 33
    entry $top.voidColorE -relief flat -width 12 -textvar qray_voidColor($id)
    menubutton $top.voidColorMB -relief raised -bd 2\
	    -menu $top.voidColorMB.m -indicatoron 1
    menu $top.voidColorMB.m -tearoff 0
    $top.voidColorMB.m add command -label black\
	    -command "set qray_voidColor($id) \"0 0 0\";\
	    set_WidgetRGBColor $top.voidColorMB \$qray_voidColor($id)"
    $top.voidColorMB.m add command -label white\
	    -command "set qray_voidColor($id) \"255 255 255\";\
	    set_WidgetRGBColor $top.voidColorMB \$qray_voidColor($id)"
    $top.voidColorMB.m add command -label red\
	    -command "set qray_voidColor($id) \"255 0 0\";\
	    set_WidgetRGBColor $top.voidColorMB \$qray_voidColor($id)"
    $top.voidColorMB.m add command -label green\
	    -command "set qray_voidColor($id) \"0 255 0\";\
	    set_WidgetRGBColor $top.voidColorMB \$qray_voidColor($id)"
    $top.voidColorMB.m add command -label blue\
	    -command "set qray_voidColor($id) \"0 0 255\";\
	    set_WidgetRGBColor $top.voidColorMB \$qray_voidColor($id)"
    $top.voidColorMB.m add command -label yellow\
	    -command "set qray_voidColor($id) \"255 255 0\";\
	    set_WidgetRGBColor $top.voidColorMB \$qray_voidColor($id)"
    $top.voidColorMB.m add command -label cyan\
	    -command "set qray_voidColor($id) \"0 255 255\";\
	    set_WidgetRGBColor $top.voidColorMB \$qray_voidColor($id)"
    $top.voidColorMB.m add command -label magenta\
	    -command "set qray_voidColor($id) \"255 0 255\";\
	    set_WidgetRGBColor $top.voidColorMB \$qray_voidColor($id)"
    $top.voidColorMB.m add separator
    $top.voidColorMB.m add command -label "Color Tool..."\
	    -command "qray_choose_color $id $top void"
    grid $top.voidColorL -sticky "ew" -in $top.voidColorF
    grid $top.voidColorE $top.voidColorMB -sticky "ew" -in $top.voidColorFF
a124 2
    grid $top.voidColorFF -sticky "ew" -in $top.voidColorF
    grid columnconfigure $top.voidColorF 0 -weight 1
d126 1
a126 2
    frame $top.overlapColorF
    frame $top.overlapColorFF -relief sunken -bd 2
d128 11
a138 33
    entry $top.overlapColorE -relief flat -width 12 -textvar qray_overlapColor($id)
    menubutton $top.overlapColorMB -relief raised -bd 2\
	    -menu $top.overlapColorMB.m -indicatoron 1
    menu $top.overlapColorMB.m -tearoff 0
    $top.overlapColorMB.m add command -label black\
	    -command "set qray_overlapColor($id) \"0 0 0\";\
	    set_WidgetRGBColor $top.overlapColorMB \$qray_overlapColor($id)"
    $top.overlapColorMB.m add command -label white\
	    -command "set qray_overlapColor($id) \"255 255 255\";\
	    set_WidgetRGBColor $top.overlapColorMB \$qray_overlapColor($id)"
    $top.overlapColorMB.m add command -label red\
	    -command "set qray_overlapColor($id) \"255 0 0\";\
	    set_WidgetRGBColor $top.overlapColorMB \$qray_overlapColor($id)"
    $top.overlapColorMB.m add command -label green\
	    -command "set qray_overlapColor($id) \"0 255 0\";\
	    set_WidgetRGBColor $top.overlapColorMB \$qray_overlapColor($id)"
    $top.overlapColorMB.m add command -label blue\
	    -command "set qray_overlapColor($id) \"0 0 255\";\
	    set_WidgetRGBColor $top.overlapColorMB \$qray_overlapColor($id)"
    $top.overlapColorMB.m add command -label yellow\
	    -command "set qray_overlapColor($id) \"255 255 0\";\
	    set_WidgetRGBColor $top.overlapColorMB \$qray_overlapColor($id)"
    $top.overlapColorMB.m add command -label cyan\
	    -command "set qray_overlapColor($id) \"0 255 255\";\
	    set_WidgetRGBColor $top.overlapColorMB \$qray_overlapColor($id)"
    $top.overlapColorMB.m add command -label magenta\
	    -command "set qray_overlapColor($id) \"255 0 255\";\
	    set_WidgetRGBColor $top.overlapColorMB \$qray_overlapColor($id)"
    $top.overlapColorMB.m add separator
    $top.overlapColorMB.m add command -label "Color Tool..."\
	    -command "qray_choose_color $id $top overlap"
    grid $top.overlapColorL -sticky "ew" -in $top.overlapColorF
    grid $top.overlapColorE $top.overlapColorMB -sticky "ew" -in $top.overlapColorFF
a139 2
    grid $top.overlapColorFF -sticky "ew" -in $top.overlapColorF
    grid columnconfigure $top.overlapColorF 0 -weight 1
d141 3
a143 3
    grid $top.colorL - -sticky "n" -in $top.gridF1 -padx 8 -pady 8
    grid $top.oddColorF $top.evenColorF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
    grid $top.voidColorF $top.overlapColorF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
d146 1
a146 1
    grid $top.gridF1 -sticky "ew" -padx 8 -pady 8
d151 10
a160 1
    entry $top.bnameE -relief sunken -bd 2 -textvar qray_basename($id)
d164 1
a164 1
    grid $top.bnameF -sticky "ew" -in $top.gridF2 -padx 8 -pady 8
d166 1
a166 1
    grid $top.gridF2 -sticky "ew" -padx 8 -pady 8
d170 7
d178 4
a181 2
	    -offvalue 0 -onvalue 1 -variable qray_cmd_echo($id)
    menubutton $top.effectsMB -textvariable qray_effects_text($id)\
d183 2
a184 2
    menu $top.effectsMB.m -tearoff 0
    $top.effectsMB.m add radiobutton -value t -variable qray_effects($id)\
d186 5
a190 1
    $top.effectsMB.m add radiobutton -value g -variable qray_effects($id)\
d192 12
a203 2
    $top.effectsMB.m add radiobutton -value b -variable qray_effects($id)\
	    -label "both" -command "qray_effects $id"
d205 1
a205 1
	    -sticky "ew" -in $top.gridF3 -padx 8 -pady 8
d208 1
a208 1
    grid $top.gridF3 -sticky "ew" -padx 8 -pady 8
d212 9
a220 1
	    -offvalue 0 -onvalue 1 -variable qray_active_mouse($id)
d222 4
a225 1
	    -offvalue 0 -onvalue 1 -variable qray_use_air($id)
d228 5
a232 2
    grid $top.activeCB $top.use_airCB x $top.advB -in $top.gridF4 -padx 8
    grid $top.gridF4 -sticky "ew" -padx 8 -pady 8
d235 6
d243 3
d248 3
d253 6
a258 4
    grid $top.applyB x $top.resetB x $top.dismissB -sticky "ew" -in $top.gridF5
    grid columnconfigure $top.gridF5 1 -weight 1
    grid columnconfigure $top.gridF5 3 -weight 1
    grid $top.gridF5 -sticky "ew" -padx 8 -pady 8
d263 1
a263 1
    set qray_effects($id) [qray effects]
d275 9
a288 9
    global qray_active_mouse
    global qray_use_air
    global qray_cmd_echo
    global qray_effects
    global qray_basename
    global qray_oddColor
    global qray_evenColor
    global qray_voidColor
    global qray_overlapColor
d291 1
d295 1
a295 1
    if {$qray_active_mouse($id)} {
d303 2
a304 2
    set use_air $qray_use_air($id)
    set mged_use_air($id) $qray_use_air($id)
d306 1
a306 1
    qray echo $qray_cmd_echo($id)
d308 2
a309 2
    qray effects $qray_effects($id)
    set mged_qray_effects($id) $qray_effects($id)
d311 1
a311 1
    qray basename $qray_basename($id)
d313 4
a316 4
    eval qray oddcolor $qray_oddColor($id)
    eval qray evencolor $qray_evenColor($id)
    eval qray voidcolor $qray_voidColor($id)
    eval qray overlapcolor $qray_overlapColor($id)
d322 1
a322 9
    global qray_active_mouse
    global qray_use_air
    global qray_cmd_echo
    global qray_effects
    global qray_basename
    global qray_oddColor
    global qray_evenColor
    global qray_voidColor
    global qray_overlapColor
d331 1
a331 1
	set qray_active_mouse($id) 1
d333 1
a333 1
	set qray_active_mouse($id) 0
d336 7
a342 10
    set qray_use_air($id) $use_air
    set qray_cmd_echo($id) [qray echo]
    set qray_effects($id) [qray effects]
    set qray_basename($id) [qray basename]

    set qray_oddColor($id) [qray oddcolor]
    set_WidgetRGBColor $top.oddColorMB $qray_oddColor($id)

    set qray_evenColor($id) [qray evencolor]
    set_WidgetRGBColor $top.evenColorMB $qray_evenColor($id)
d344 2
a345 2
    set qray_voidColor($id) [qray voidcolor]
    set_WidgetRGBColor $top.voidColorMB $qray_voidColor($id)
d347 2
a348 71
    set qray_overlapColor($id) [qray overlapcolor]
    set_WidgetRGBColor $top.overlapColorMB $qray_overlapColor($id)
}

proc qray_choose_color { id parent ray } {
    global player_screen
    global qray_oddColor
    global qray_evenColor
    global qray_voidColor
    global qray_overlapColor

    set child $ray\_color

    switch $ray {
	odd {
	    cadColorWidget dialog $parent $child\
		    -title "Query Ray Color - Odd"\
		    -initialcolor [$parent.oddColorMB cget -background]\
		    -ok "qray_color_ok $id $parent $ray $parent.$child"\
		    -cancel "cadColorWidget_destroy $parent.$child"
	}
	even {
	    cadColorWidget dialog $parent $child\
		    -title "Query Ray Color - Even"\
		    -initialcolor [$parent.evenColorMB cget -background]\
		    -ok "qray_color_ok $id $parent $ray $parent.$child"\
		    -cancel "cadColorWidget_destroy $parent.$child"
	}
	void {
	    cadColorWidget dialog $parent $child\
		    -title "Query Ray Color - Void"\
		    -initialcolor [$parent.voidColorMB cget -background]\
		    -ok "qray_color_ok $id $parent $ray $parent.$child"\
		    -cancel "cadColorWidget_destroy $parent.$child"
	}
	overlap {
	    cadColorWidget dialog $parent $child\
		    -title "Query Ray Color - Overlap"\
		    -initialcolor [$parent.overlapColorMB cget -background]\
		    -ok "qray_color_ok $id $parent $ray $parent.$child"\
		    -cancel "cadColorWidget_destroy $parent.$child"
	}
    }
}

proc qray_color_ok { id parent ray w } {
    global qray_oddColor
    global qray_evenColor
    global qray_voidColor
    global qray_overlapColor

    upvar #0 $w data

    switch $ray {
	 odd {
	     $parent.oddColorMB configure -bg $data(finalColor)
	     set qray_oddColor($id) "$data(red) $data(green) $data(blue)"
	 }
	 even {
	     $parent.evenColorMB configure -bg $data(finalColor)
	     set qray_evenColor($id) "$data(red) $data(green) $data(blue)"
	 }
	 void {
	     $parent.voidColorMB configure -bg $data(finalColor)
	     set qray_voidColor($id) "$data(red) $data(green) $data(blue)"
	 }
	 overlap {
	     $parent.overlapColorMB configure -bg $data(finalColor)
	     set qray_overlapColor($id) "$data(red) $data(green) $data(blue)"
	 }
    }
d350 2
a351 2
    destroy $w
    unset data
d356 1
a356 2
    global qray_effects_text
    global qray_effects
d360 1
a360 1
    switch $qray_effects($id) {
d362 1
a362 1
	    set qray_effects_text($id) "Text"
d365 1
a365 1
	    set qray_effects_text($id) "Graphics"
d368 1
a368 1
	    set qray_effects_text($id) "both"
d375 1
a375 6
    global qray_fmt_ray
    global qray_fmt_head
    global qray_fmt_partition
    global qray_fmt_foot
    global qray_fmt_miss
    global qray_fmt_overlap
d390 4
a393 1
    grid $top.fmtL -in $top.gridF1 -padx 8 -pady 8
d396 11
a406 1
    entry $top.rayE -relief sunken -bd 2 -width 135 -textvar qray_fmt_ray($id)
d410 1
a410 1
    grid $top.rayF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
d413 11
a423 1
    entry $top.headE -relief sunken -bd 2 -width 135 -textvar qray_fmt_head($id)
d427 1
a427 1
    grid $top.headF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
d430 11
a440 1
    entry $top.partitionE -relief sunken -bd 2 -width 140 -textvar qray_fmt_partition($id)
d444 1
a444 1
    grid $top.partitionF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
d447 11
a457 1
    entry $top.footE -relief sunken -bd 2 -width 140 -textvar qray_fmt_foot($id)
d461 1
a461 1
    grid $top.footF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
d464 11
a474 1
    entry $top.missE -relief sunken -bd 2 -width 140 -textvar qray_fmt_miss($id)
d478 1
a478 1
    grid $top.missF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
d481 11
a491 1
    entry $top.overlapE -relief sunken -bd 2 -width 140 -textvar qray_fmt_overlap($id)
d495 1
a495 1
    grid $top.overlapF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
d497 1
a497 1
    grid $top.gridF1 -sticky "ew" -padx 8 -pady 8
d500 6
d508 3
d513 3
d517 7
a523 5
	    -command "catch { destroy $top; }"
    grid $top.applyB x $top.resetB x $top.dismissB -sticky "ew" -in $top.gridF2
    grid columnconfigure $top.gridF2 1 -weight 1
    grid columnconfigure $top.gridF2 3 -weight 1
    grid $top.gridF2 -sticky "ew" -padx 8 -pady 8
d536 5
d543 1
a543 6
    global qray_fmt_ray
    global qray_fmt_head
    global qray_fmt_partition
    global qray_fmt_foot
    global qray_fmt_miss
    global qray_fmt_overlap
d546 6
a551 6
    qray fmt r $qray_fmt_ray($id)
    qray fmt h $qray_fmt_head($id)
    qray fmt p $qray_fmt_partition($id)
    qray fmt f $qray_fmt_foot($id)
    qray fmt m $qray_fmt_miss($id)
    qray fmt o $qray_fmt_overlap($id)
d556 1
a556 6
    global qray_fmt_ray
    global qray_fmt_head
    global qray_fmt_partition
    global qray_fmt_foot
    global qray_fmt_miss
    global qray_fmt_overlap
d559 6
a564 6
    set qray_fmt_ray($id) [qray fmt r]
    set qray_fmt_head($id) [qray fmt h]
    set qray_fmt_partition($id) [qray fmt p]
    set qray_fmt_foot($id) [qray fmt f]
    set qray_fmt_miss($id) [qray fmt m]
    set qray_fmt_overlap($id) [qray fmt o]
@


1.5
log
@*- put (id) in the title
@
text
@d251 2
a252 2
    button $top.loadB -relief raised -text "Load"\
	    -command "qray_load $id"
d255 1
a255 1
    grid $top.applyB x $top.loadB x $top.dismissB -sticky "ew" -in $top.gridF5
d262 1
a262 1
    qray_load $id
d318 1
a318 1
proc qray_load { id } {
d471 1
a471 1
    qray_load_fmt $id
d524 2
a525 2
    button $top.loadB -relief raised -text "Load"\
	    -command "qray_load_fmt $id"
d528 1
a528 1
    grid $top.applyB x $top.loadB x $top.dismissB -sticky "ew" -in $top.gridF2
d562 1
a562 1
proc qray_load_fmt { id } {
@


1.4
log
@*- mods to reflect parameter change in cadColorWidget()
*- a little house cleaning
@
text
@d272 1
a272 1
    wm title $top "Query Ray Control Panel"
d541 1
a541 1
    wm title $top "Query Ray Advanced Settings"
@


1.3
log
@*- using cad_dialog instead of mged_dialog
*- using the new cadColorWidget
@
text
@d74 1
a74 1
	    -command "qray_choose_color $id odd"
d114 1
a114 1
	    -command "qray_choose_color $id even"
d154 1
a154 1
	    -command "qray_choose_color $id void"
d194 1
a194 1
	    -command "qray_choose_color $id overlap"
d361 1
a361 1
proc qray_choose_color { id ray } {
d368 1
a368 1
    set top .$id.qray_control
d372 5
a376 4
	    cadColorWidget dialog $top.oddColorMB -title "Query Ray Color - Odd"\
		    -initialcolor [$top.oddColorMB cget -background]\
		    -ok "qray_color_ok $id $ray $top.oddColorMB.colorWidget"\
		    -cancel "qray_color_cancel $id $top.oddColorMB.colorWidget"
d379 5
a383 4
	    cadColorWidget dialog $top.evenColorMB -title "Query Ray Color - Even"\
		    -initialcolor [$top.evenColorMB cget -background]\
		    -ok "qray_color_ok $id $ray $top.evenColorMB.colorWidget"\
		    -cancel "qray_color_cancel $id $top.evenColorMB.colorWidget"
d386 5
a390 4
	    cadColorWidget dialog $top.voidColorMB -title "Query Ray Color - Void"\
		    -initialcolor [$top.voidColorMB cget -background]\
		    -ok "qray_color_ok $id $ray $top.voidColorMB.colorWidget"\
		    -cancel "qray_color_cancel $id $top.voidColorMB.colorWidget"
d393 5
a397 4
	    cadColorWidget dialog $top.overlapColorMB -title "Query Ray Color - Overlap"\
		    -initialcolor [$top.overlapColorMB cget -background]\
		    -ok "qray_color_ok $id $ray $top.overlapColorMB.colorWidget"\
		    -cancel "qray_color_cancel $id $top.overlapColorMB.colorWidget"
d402 1
a402 1
proc qray_color_ok { id ray w } {
a409 1
    set top .$id.qray_control
d412 1
a412 1
	     $top.oddColorMB configure -bg $data(finalColor)
d416 1
a416 1
	     $top.evenColorMB configure -bg $data(finalColor)
d420 1
a420 1
	     $top.voidColorMB configure -bg $data(finalColor)
d424 1
a424 1
	     $top.overlapColorMB configure -bg $data(finalColor)
a427 7

    destroy $w
    unset data
}

proc qray_color_cancel { id w } {
    upvar #0 $w data
@


1.2
log
@change checkbutton name
@
text
@a369 14
    set colors [chooseColor $top]

    if {[llength $colors] == 0} {
	return
    }

    if {[llength $colors] != 2} {
	mged_dialog .$id.gridDialog $player_screen($id)\
		"Error choosing a color!"\
		"Error choosing a color!"\
		"" 0 OK
	return
    }

d372 4
a375 2
	    $top.oddColorMB configure -bg [lindex $colors 0]
	    set qray_oddColor($id) [lindex $colors 1]
d378 4
a381 2
	    $top.evenColorMB configure -bg [lindex $colors 0]
	    set qray_evenColor($id) [lindex $colors 1]
d384 4
a387 2
	    $top.voidColorMB configure -bg [lindex $colors 0]
	    set qray_voidColor($id) [lindex $colors 1]
d390 4
a393 2
	    $top.overlapColorMB configure -bg [lindex $colors 0]
	    set qray_overlapColor($id) [lindex $colors 1]
d396 39
@


1.1
log
@Initial revision
@
text
@d239 1
a239 1
    checkbutton $top.activeCB -relief flat -text "Active Mouse"\
@
