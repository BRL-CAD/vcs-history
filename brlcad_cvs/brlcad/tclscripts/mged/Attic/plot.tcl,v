head	1.14;
access;
symbols
	ansi-20040405-merged:1.12.4.1
	postmerge-20040405-ansi:1.13
	premerge-20040404-ansi:1.13
	postmerge-autoconf:1.13
	autoconf-freeze:1.13
	premerge-autoconf:1.13
	postmerge-20040315-windows:1.13
	premerge-20040315-windows:1.13
	windows-20040315-freeze:1.12.6.2
	autoconf-20031203:1.13
	autoconf-20031202:1.13
	autoconf-branch:1.13.0.6
	phong-branch:1.13.0.4
	photonmap-branch:1.13.0.2
	rel-6-1-DP:1.12
	windows-branch:1.12.0.6
	rel-6-0-2:1.12
	ansi-branch:1.12.0.4
	rel-6-0-1-branch:1.12.0.2
	hartley-6-0-post:1.12
	hartley-6-0-pre:1.12
	rel-6-0-1:1.12
	rel-6-0:1.12
	rel-5-4:1.8.2.3
	offsite-5-3-pre:1.11
	rel-5-3:1.8.2.3
	rel-5-2:1.8
	rel-5-1-branch:1.8.0.2
	rel-5-1:1.8
	rel-5-0:1.8
	rel-5-0-beta:1.7
	rel-4-5:1.1;
locks; strict;
comment	@# @;


1.14
date	2004.05.21.16.41.30;	author morrison;	state dead;
branches;
next	1.13;

1.13
date	2003.03.13.19.45.32;	author jra;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.03.22.33.03;	author bparker;	state Exp;
branches
	1.12.4.1
	1.12.6.1;
next	1.11;

1.11
date	2000.12.22.00.35.15;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.03.14.00.13;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.02.17.42.58;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	99.09.01.18.08.25;	author bparker;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	99.05.06.17.36.05;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	99.02.10.15.21.13;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	99.01.26.19.05.18;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	99.01.19.22.31.30;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.08.13.12.39.17;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.06.09.17.56.01;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	97.09.29.16.07.05;	author bparker;	state Exp;
branches;
next	;

1.8.2.1
date	2000.11.02.17.41.55;	author bparker;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2000.11.03.13.41.19;	author bparker;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2000.12.22.00.02.27;	author bparker;	state Exp;
branches;
next	;

1.12.4.1
date	2004.03.17.21.23.12;	author morrison;	state Exp;
branches;
next	;

1.12.6.1
date	2002.09.26.23.04.20;	author morrison;	state Exp;
branches;
next	1.12.6.2;

1.12.6.2
date	2004.03.11.23.48.59;	author morrison;	state Exp;
branches;
next	;


desc
@widget for creating Unix Plot files of MGED's current view
@


1.14
log
@moved to src/tclscripts/
@
text
@#
#			P L O T . T C L
#
#	Widget for producing Unix Plot files of MGED's current view.
#
#	Author - Robert G. Parker
#

check_externs "_mged_opendb _mged_pl"

proc init_plotTool { id } {
    global mged_gui
    global pl_control
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set top .$id.do_plot

    if [winfo exists $top] {
	raise $top
	return
    }

    if ![info exists pl_control($id,file_or_filter)] {
	set pl_control($id,file_or_filter) file
    }

    if ![info exists pl_control($id,file)] {
	regsub \.g$ [_mged_opendb] .plot default_file
	set pl_control($id,file) $default_file
    }

    if ![info exists pl_control($id,filter)] {
	set pl_control($id,filter) ""
    }

    if ![info exists pl_control($id,zclip)] {
	set pl_control($id,zclip) 1
    }

    if ![info exists pl_control($id,2d)] {
	set pl_control($id,2d) 0
    }

    if ![info exists pl_control($id,float)] {
	set pl_control($id,float) 0
    }

    toplevel $top -screen $mged_gui($id,screen)

    frame $top.gridF
    frame $top.gridF2
    frame $top.gridF3

    if {$pl_control($id,file_or_filter) == "file"} {
	set file_state normal
	set filter_state disabled
    } else {
	set filter_state normal
	set file_state disabled
    }

    entry $top.fileE -width 12 -textvar pl_control($id,file)\
	    -state $file_state
    hoc_register_data $top.fileE "File Name"\
	    {{summary "Enter a filename specifying where
to put the UNIX-plot of the displayed
geometry."} {see_also pl}}
    radiobutton $top.fileRB -text "File Name" -anchor w\
	    -value file -variable pl_control($id,file_or_filter)\
	    -command "pl_set_file_state $id"
    hoc_register_data $top.fileRB "File"\
	    {{summary "Activate the filename entry."}}

    entry $top.filterE -width 12 -textvar pl_control($id,filter)\
	    -state $filter_state
    hoc_register_data $top.filterE "Filter"\
	    {{summary "If a filter is specified, the
output is sent there."} {see_also pl}}
    radiobutton $top.filterRB -text "Filter" -anchor w\
	    -value filter -variable pl_control($id,file_or_filter)\
	    -command "pl_set_filter_state $id"
    hoc_register_data $top.filterRB "Filter"\
	    {{summary "Activate the filter entry."}}

    checkbutton $top.zclipCB -relief raised -text "Z Clipping"\
	    -variable pl_control($id,zclip)
    hoc_register_data $top.zclipCB "Z Clipping"\
	    {{summary "If checked, the plot will be
clipped to the viewing cube."} {see_also pl}}
    checkbutton $top.twoDCB -relief raised -text "2D"\
	    -variable pl_control($id,2d)
    hoc_register_data $top.twoDCB "2D"\
	    {{summary "If checked, the plot will be
two-dimensional instead of three-dimensional."} {see_also pl}}
    checkbutton $top.floatCB -relief raised -text "Float"\
	    -variable pl_control($id,float)
    hoc_register_data $top.floatCB "Float"\
	    {{summary "If checked, the plot file will use floating
point numbers instead of integers."}}

    button $top.okB -relief raised -text "OK"\
	    -command "do_plot $id; catch {destroy $top}"
    hoc_register_data $top.okB "Create"\
	    {{summary "Create a plot file of the current view.
The plot dialog is then dismissed."} {see_also pl}}
    button $top.createB -relief raised -text "Create"\
	    -command "do_plot $id"
    hoc_register_data $top.createB "Create"\
	    {{summary "Create a plot file of the current view."} {see_also pl}}
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"
    hoc_register_data $top.dismissB "Dismiss"\
	    {{summary "Dismiss the plot tool."}}

    grid $top.fileE $top.fileRB -sticky "ew" -in $top.gridF -pady 4
    grid $top.filterE $top.filterRB -sticky "ew" -in $top.gridF -pady 4
    grid columnconfigure $top.gridF 0 -weight 1

    grid $top.zclipCB x $top.twoDCB x $top.floatCB -sticky "ew"\
	    -in $top.gridF2 -padx 4 -pady 4
    grid columnconfigure $top.gridF2 1 -weight 1
    grid columnconfigure $top.gridF2 3 -weight 1

    grid $top.okB $top.createB x $top.dismissB -sticky "ew" -in $top.gridF3 -pady 4
    grid columnconfigure $top.gridF3 2 -weight 1

    pack $top.gridF $top.gridF2 $top.gridF3 -side top -expand 1 -fill both\
	    -padx 8 -pady 8

    place_near_mouse $top
    wm title $top "Unix Plot Tool ($id)"
}

proc do_plot { id } {
    global mged_gui
    global pl_control
    global ::tk::Priv

    cmd_win set $id
    set pl_cmd "_mged_pl"

    if {$pl_control($id,zclip)} {
	append pl_cmd " -zclip"
    }

    if {$pl_control($id,2d)} {
	append pl_cmd " -2d"
    }

    if {$pl_control($id,float)} {
	append pl_cmd " -float"
    }

    if {$pl_control($id,file_or_filter) == "file"} {
	if {$pl_control($id,file) != ""} {
	    if [file exists $pl_control($id,file)] {
		set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
			"Overwrite $pl_control($id,file)?"\
			"Overwrite $pl_control($id,file)?"\
			"" 0 OK Cancel]

		if {$result} {
		    return
		}
	    }
	} else {
	    cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		    "No file name specified!"\
		    "No file name specified!"\
		    "" 0 OK

	    return
	}

	append pl_cmd " $pl_control($id,file)"
    } else {
	if {$pl_control($id,filter) == ""} {
	    cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		    "No filter specified!"\
		    "No filter specified!"\
		    "" 0 OK

	    return
	}

	append pl_cmd " |$pl_control($id,filter)"
    }

    catch {eval $pl_cmd}
}

proc pl_set_file_state { id } {
    set top .$id.do_plot

    $top.fileE configure -state normal
    $top.filterE configure -state disabled

    focus $top.fileE
}

proc pl_set_filter_state { id } {
    set top .$id.do_plot

    $top.filterE configure -state normal
    $top.fileE configure -state disabled

    focus $top.filterE
}@


1.13
log
@*** empty log message ***
@
text
@@


1.12
log
@*- mods requested by Eric regarding consistency
   when using capitalization in the GUI
@
text
@d14 1
a14 1
    global tkPriv
d17 1
a17 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d143 1
a143 1
    global tkPriv
d163 1
a163 1
		set result [cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d173 1
a173 1
	    cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d184 1
a184 1
	    cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.12.4.1
log
@sync branch with HEAD
@
text
@d14 1
a14 1
    global ::tk::Priv
d17 1
a17 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d143 1
a143 1
    global ::tk::Priv
d163 1
a163 1
		set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d173 1
a173 1
	    cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d184 1
a184 1
	    cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.12.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d14 1
a14 1
    variable ::tk::Priv
d17 1
a17 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d143 1
a143 1
    variable ::tk::Priv
d163 1
a163 1
		set result [cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
d173 1
a173 1
	    cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
d184 1
a184 1
	    cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
@


1.12.6.2
log
@sync to HEAD...
@
text
@d14 1
a14 1
    global ::tk::Priv
d17 1
a17 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d143 1
a143 1
    global ::tk::Priv
d163 1
a163 1
		set result [cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d173 1
a173 1
	    cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d184 1
a184 1
	    cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.11
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d166 1
a166 1
			"" 0 OK CANCEL]
@


1.10
log
@change the column, not the weight
@
text
@d14 1
d17 1
a17 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d143 1
d163 1
a163 1
		set result [cad_dialog .$id.plotDialog $mged_gui($id,screen)\
d173 1
a173 1
	    cad_dialog .$id.plotDialog $mged_gui($id,screen)\
d184 1
a184 1
	    cad_dialog .$id.plotDialog $mged_gui($id,screen)\
@


1.9
log
@Add OK button.
@
text
@d130 1
a130 1
    grid columnconfigure $top.gridF3 1 -weight 2
@


1.8
log
@*- check for no database open
@
text
@d106 5
d129 2
a130 2
    grid $top.createB x $top.dismissB -sticky "ew" -in $top.gridF3 -pady 4
    grid columnconfigure $top.gridF3 1 -weight 1
@


1.8.2.1
log
@Add OK button.
@
text
@a105 5
    button $top.okB -relief raised -text "OK"\
	    -command "do_plot $id; catch {destroy $top}"
    hoc_register_data $top.okB "Create"\
	    {{summary "Create a plot file of the current view.
The plot dialog is then dismissed."} {see_also pl}}
d124 2
a125 2
    grid $top.okB $top.createB x $top.dismissB -sticky "ew" -in $top.gridF3 -pady 4
    grid columnconfigure $top.gridF3 1 -weight 2
@


1.8.2.2
log
@change the column, not the weight
@
text
@d130 1
a130 1
    grid columnconfigure $top.gridF3 2 -weight 1
@


1.8.2.3
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@a13 1
    global tkPriv
d16 1
a16 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a141 1
    global tkPriv
d161 1
a161 1
		set result [cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d171 1
a171 1
	    cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d182 1
a182 1
	    cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.7
log
@*- add help on context
@
text
@d15 6
@


1.6
log
@*- use place_near_mouse proc to position widgets near the mouse
@
text
@d63 4
d70 2
d75 3
d81 2
d84 1
a84 1
    checkbutton $top.zclip -relief raised -text "Z Clipping"\
d86 3
d91 3
d96 3
d102 2
d106 2
d113 1
a113 1
    grid $top.zclip x $top.twoDCB x $top.floatCB -sticky "ew"\
@


1.5
log
@*- use cmd_win instead of cmd_set
@
text
@d100 1
a100 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]
    wm geometry $top +$x+$y
@


1.4
log
@*- cleanup variables
@
text
@d111 1
a111 1
    cmd_set $id
@


1.3
log
@*- put (id) in the title
@
text
@d12 2
a13 7
    global player_screen
    global pl_file_or_filter
    global pl_file
    global pl_filter
    global pl_zclip
    global pl_2d
    global pl_float
d22 2
a23 2
    if ![info exists pl_file_or_filter($id)] {
	set pl_file_or_filter($id) file
d26 1
a26 1
    if ![info exists pl_file($id)] {
d28 1
a28 1
	set pl_file($id) $default_file
d31 2
a32 2
    if ![info exists pl_filter($id)] {
	set pl_filter($id) ""
d35 2
a36 2
    if ![info exists pl_zclip($id)] {
	set pl_zclip($id) 1
d39 2
a40 2
    if ![info exists pl_2d($id)] {
	set pl_2d($id) 0
d43 2
a44 2
    if ![info exists pl_float($id)] {
	set pl_float($id) 0
d47 1
a47 1
    toplevel $top -screen $player_screen($id)
d53 1
a53 1
    if {$pl_file_or_filter($id) == "file"} {
d61 1
a61 1
    entry $top.fileE -width 12 -textvar pl_file($id)\
d64 1
a64 1
	    -value file -variable pl_file_or_filter($id)\
d67 1
a67 1
    entry $top.filterE -width 12 -textvar pl_filter($id)\
d70 1
a70 1
	    -value filter -variable pl_file_or_filter($id)\
d74 1
a74 1
	    -variable pl_zclip($id)
d76 1
a76 1
	    -variable pl_2d($id)
d78 1
a78 1
	    -variable pl_float($id)
d108 2
a109 7
    global player_screen
    global pl_file_or_filter
    global pl_file
    global pl_filter
    global pl_zclip
    global pl_2d
    global pl_float
d114 1
a114 1
    if {$pl_zclip($id)} {
d118 1
a118 1
    if {$pl_2d($id)} {
d122 1
a122 1
    if {$pl_float($id)} {
d126 6
a131 6
    if {$pl_file_or_filter($id) == "file"} {
	if {$pl_file($id) != ""} {
	    if [file exists $pl_file($id)] {
		set result [cad_dialog .$id.plotDialog $player_screen($id)\
			"Overwrite $pl_file($id)?"\
			"Overwrite $pl_file($id)?"\
d139 1
a139 1
	    cad_dialog .$id.plotDialog $player_screen($id)\
d147 1
a147 1
	append pl_cmd " $pl_file($id)"
d149 2
a150 2
	if {$pl_filter($id) == ""} {
	    cad_dialog .$id.plotDialog $player_screen($id)\
d158 1
a158 1
	append pl_cmd " |$pl_filter($id)"
@


1.2
log
@*- using cad_dialog instead of mged_dialog
@
text
@d109 1
a109 1
    wm title $top "Unix Plot Tool..."
@


1.1
log
@Initial revision
@
text
@d139 1
a139 1
		set result [mged_dialog .$id.plotDialog $player_screen($id)\
d149 1
a149 1
	    mged_dialog .$id.plotDialog $player_screen($id)\
d160 1
a160 1
	    mged_dialog .$id.plotDialog $player_screen($id)\
@
