head	1.6;
access;
symbols
	ansi-20040405-merged:1.5
	postmerge-20040405-ansi:1.5
	premerge-20040404-ansi:1.5
	postmerge-autoconf:1.5
	autoconf-freeze:1.5
	premerge-autoconf:1.5
	postmerge-20040315-windows:1.5
	premerge-20040315-windows:1.5
	windows-20040315-freeze:1.5
	autoconf-20031203:1.5
	autoconf-20031202:1.5
	autoconf-branch:1.5.0.14
	phong-branch:1.5.0.12
	photonmap-branch:1.5.0.10
	rel-6-1-DP:1.5
	windows-branch:1.5.0.8
	rel-6-0-2:1.5
	ansi-branch:1.5.0.6
	rel-6-0-1-branch:1.5.0.4
	hartley-6-0-post:1.5
	hartley-6-0-pre:1.5
	rel-6-0-1:1.5
	rel-6-0:1.5
	rel-5-4:1.5
	offsite-5-3-pre:1.5
	rel-5-3:1.5
	rel-5-2:1.5
	rel-5-1-branch:1.5.0.2
	rel-5-1:1.5
	rel-5-0:1.5
	rel-5-0-beta:1.5
	rel-4-5:1.5;
locks; strict;
comment	@# @;


1.6
date	2004.05.21.16.41.23;	author morrison;	state dead;
branches;
next	1.5;

1.5
date	96.10.11.13.36.04;	author pjt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.09.13.54.00;	author pjt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.01.20.14.12;	author pjt;	state Exp;
branches;
next	1.2;

1.2
date	96.07.01.19.22.05;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	96.07.01.19.19.20;	author pjt;	state Exp;
branches;
next	;


desc
@     A TCL macro for MGED(1) to edit all
     objects with specified ident numbers
@


1.6
log
@moved to src/tclscripts/
@
text
@#
#				E _ I D
#
#	TCL macro for MGED(1) to edit all objects w/ specified ident numbers
#
#	Usage -  'e_id ident[-ident] ...'
#	Author - Paul Tanenbaum
#
#	Grab the output of MGED's 'whichid' command, and use it to construct
#	an invocation of its 'e' command to display exactly the objects with
#	the specified ident.

#
#    Preliminary...
#    Ensure that all commands used here but not defined herein
#    are provided by the application
#
set extern_commands "whichid e"
foreach cmd $extern_commands {
    if {[expr [string compare [info command $cmd] $cmd] != 0]} {
	puts stderr "[info script]: Application fails to provide command '$cmd'"
	return
    }
}

#
#    The actual macro
#
proc e_id {args} {
    #
    #	Ensure that at least one argument was given
    #
    if {$args == ""} {
	puts "Usage: e_id <idents and/or ident_ranges>\n       \
		(edit object(s) with the specified idents)"
	return
    }
    #
    #	Construct a list of all the specified identifiers
    #
    set ident_list {}
    foreach arg $args {
	if {[regexp {([0-9]+)-([0-9]+)} $arg range lo hi] == 1} {
	    if {$lo > $hi} {
		puts "Illegal ident range: '$arg'"
	    }
	    for {set i $lo} {$i <= $hi} {incr i} {
		lappend ident_list $i
	    }
	} elseif {[regexp {([0-9]+)} $arg lo] == 1} {
	    lappend ident_list $lo
	} else {
	    puts "Invalid ident specification: '$arg'"
	}
    }
    #
    #	Sort the specified identifiers, throwing out any duplicates
    #
    set ident_list [lsort $ident_list]
    set uniq_ident_list {}
    set prev_ident ""
    foreach ident $ident_list {
	if {$ident != $prev_ident} {
	    lappend uniq_ident_list $ident
	}
	set prev_ident $ident
    }
    #
    #	Construct a list of the names of the appropriate regions
    #
    set cmd "whichid $uniq_ident_list"
    set raw_list [split [eval $cmd] \n]
    set result {}
    foreach element $raw_list {
	set non_null [expr {$element != {}}]
	set header [regexp {Region\[s\] with ident [0-9]+:} $element]
	if {[expr ($non_null && !$header)]} {
	    lappend result [string trim $element]
	}
    }
    #
    #	If any regions are appropriate, go ahead and 'e' them
    #
    if {$result == {}} {
	puts "There are no objects with idents '$args'"
    } else {
	puts "objects found: $result"
	eval [concat [list e] $result]
    }
}
@


1.5
log
@Cleaned up some comments
@
text
@@


1.4
log
@Changed name from e-id to e_id
@
text
@d4 1
a4 1
#	A TCL macro for MGED(1) to edit all objects with specified ident numbers
d9 2
a10 2
#	Grab the output of MGED's 'whichid' command, and use that to construct
#	an invocation of its 'e' command to display exactly those objects with
@


1.3
log
@No longer attempts to restrict its use to calls by MGED.
Now tolerates any application willing to satisfy its externals,
viz. 'whichid' and 'e'.
@
text
@d2 1
a2 1
#				E - I D
d6 1
a6 1
#	Usage -  'e-id ident[-ident] ...'
d29 1
a29 1
proc e-id {args} {
d34 1
a34 1
	puts "Usage: e-id <idents and/or ident_ranges>\n       \
@


1.2
log
@1. Now handles multiple idents on command line, including ranges
2. Improved test of whether the application is MGED
@
text
@d15 2
a16 2
#    If any application besides MGED tries to run this script,
#    print a warning message
d18 6
a23 3
if {[info exists mged_display] == 0} {
    set f_name [info script]
    puts "Warning: script '$f_name' contains MGED(1)-specific macros"
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
#	A TCL macro for MGED(1) to edit all objects with a specified ident number
d6 1
a6 1
#	Usage -  'e-id ident'
d18 1
a18 1
if {[winfo name .] != "MGED"} {
d26 1
a26 1
proc e-id {{ident ""}} {
d28 1
a28 1
    #	Handle command-line syntax
d30 3
a32 3
    if {$ident == ""} {
	puts "Usage: e-id <ident>\n       \
		(edit object(s) with the specified ident)"
d36 30
d68 2
a69 3
    set raw_result [whichid $ident]
    set index [string first "\n" $raw_result]
    set reg_list [split [string trim [string range $raw_result $index end]]]
d71 5
a75 3
    foreach element $reg_list {
	if {$element != {}} {
	    set result [lappend result $element]
d81 2
a82 2
    if {$reg_list == {}} {
	puts "There are no objects with ident '$ident'"
@
