head	1.26;
access;
symbols
	ansi-20040405-merged:1.23.4.1
	postmerge-20040405-ansi:1.25
	premerge-20040404-ansi:1.25
	postmerge-autoconf:1.25
	autoconf-freeze:1.24.6.1
	premerge-autoconf:1.25
	postmerge-20040315-windows:1.25
	premerge-20040315-windows:1.25
	windows-20040315-freeze:1.23.6.2
	autoconf-20031203:1.24
	autoconf-20031202:1.24
	autoconf-branch:1.24.0.6
	phong-branch:1.24.0.4
	photonmap-branch:1.24.0.2
	rel-6-1-DP:1.23
	windows-branch:1.23.0.6
	rel-6-0-2:1.23
	ansi-branch:1.23.0.4
	rel-6-0-1-branch:1.23.0.2
	hartley-6-0-post:1.23
	hartley-6-0-pre:1.23
	rel-6-0-1:1.23
	rel-6-0:1.23
	rel-5-4:1.17.2.6
	offsite-5-3-pre:1.22
	rel-5-3:1.17.2.6
	rel-5-2:1.17
	rel-5-1-branch:1.17.0.2
	rel-5-1:1.17
	rel-5-0:1.17
	rel-5-0-beta:1.15;
locks; strict;
comment	@# @;


1.26
date	2004.05.21.16.41.28;	author morrison;	state dead;
branches;
next	1.25;

1.25
date	2004.02.02.17.39.44;	author morrison;	state Exp;
branches;
next	1.24;

1.24
date	2003.03.13.19.45.32;	author jra;	state Exp;
branches
	1.24.6.1;
next	1.23;

1.23
date	2001.08.02.17.43.04;	author bparker;	state Exp;
branches
	1.23.4.1
	1.23.6.1;
next	1.22;

1.22
date	2001.02.16.22.30.02;	author bparker;	state Exp;
branches;
next	1.21;

1.21
date	2001.02.02.22.28.02;	author bparker;	state Exp;
branches;
next	1.20;

1.20
date	2001.02.02.14.50.24;	author bparker;	state Exp;
branches;
next	1.19;

1.19
date	2000.12.22.00.35.15;	author bparker;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.17.15.37.44;	author bparker;	state Exp;
branches;
next	1.17;

1.17
date	99.09.08.13.17.47;	author bparker;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	99.09.01.18.08.25;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	99.04.16.18.13.21;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	99.04.13.21.57.57;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	99.04.09.21.27.10;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	99.04.09.00.00.05;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	99.04.07.17.01.01;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	99.02.10.15.20.36;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	99.02.05.17.35.03;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	99.01.27.20.35.31;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	99.01.19.22.31.30;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	98.12.30.22.06.32;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.11.13.22.20.55;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.06.15.19.28.25;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.06.09.17.59.29;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.05.01.21.02.27;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.05.01.13.06.58;	author bparker;	state Exp;
branches;
next	;

1.17.2.1
date	2000.10.20.17.20.52;	author bparker;	state Exp;
branches;
next	1.17.2.2;

1.17.2.2
date	2000.11.17.15.21.43;	author bparker;	state Exp;
branches;
next	1.17.2.3;

1.17.2.3
date	2000.12.22.00.02.27;	author bparker;	state Exp;
branches;
next	1.17.2.4;

1.17.2.4
date	2001.02.02.14.46.53;	author bparker;	state Exp;
branches;
next	1.17.2.5;

1.17.2.5
date	2001.02.02.22.25.51;	author bparker;	state Exp;
branches;
next	1.17.2.6;

1.17.2.6
date	2001.02.08.21.53.24;	author bparker;	state Exp;
branches;
next	;

1.23.4.1
date	2004.03.17.21.23.12;	author morrison;	state Exp;
branches;
next	;

1.23.6.1
date	2002.09.26.23.04.19;	author morrison;	state Exp;
branches;
next	1.23.6.2;

1.23.6.2
date	2004.03.11.23.48.59;	author morrison;	state Exp;
branches;
next	;

1.24.6.1
date	2004.02.12.18.34.49;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.26
log
@moved to src/tclscripts/
@
text
@#			M O U S E . T C L
#
# Author -
#	Robert Parker
#
# Source -
#	The U. S. Army Ballistic Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#  
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#	your "Statement of Terms and Conditions for the Release of
#	The BRL-CAD Package" agreement.
#
# Copyright Notice -
#	This software is Copyright (C) 1995-2004 by the United States Army
#	in all countries except the USA.  All rights reserved.
#
# Description -
#       Mouse routines.

proc mouse_get_spath { x y } {
    global mged_gui
    global ::tk::Priv

    set win [winset]
    set id [get_player_id_dm $win]
    if {$id == "mged"} {
	mouse_init_mged_gui
    }

    if {[info exists mged_gui($id,edit_menu)] && \
	    [winfo exists $mged_gui($id,edit_menu)]} {
	destroy $mged_gui($id,edit_menu)
    }

    set mged_gui($id,mgs_path) ""
    set ray [mouse_shoot_ray $x $y]
    set paths [ray_get_info $ray in path]

    if {![llength $paths]} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"Nothing was hit!"\
		"Nothing was hit!"\
		"" 0 OK
	return ""
    }

    if {[llength $paths] == 1} {
	return [lindex $paths 0]
    }

    set top .mgs$id
    if [winfo exists $top] {
	destroy $top
    }

    if [info exists mged_gui($id,screen)] {
	set screen $mged_gui($id,screen)
    } else {
	set screen [winfo screen $win]
    }

    create_listbox $top $screen Primitive $paths "mouse_spath_destroy $id $top"
    set mged_gui($id,edit_menu) $top

    bind_listbox $top "<B1-Motion>"\
	    "set item \[get_listbox_entry %W %x %y\];\
	    solid_illum \$item"
if 0 {
    bind_listbox $top "<ButtonPress-1>"\
	    "set item \[get_listbox_entry %W %x %y\];\
	    solid_illum \$item"
    bind_listbox $top "<Double-1>"\
	    "set mged_gui($id,mgs_path) \[get_listbox_entry %W %x %y\];\
	    destroy $top"
} else {
    bind_listbox $top "<ButtonPress-1>" \
	    "lbdcHack %W %x %y %t $id s2 junkpath"
}
    bind_listbox $top "<ButtonRelease-1>" \
	    "%W selection clear 0 end; _mged_press reject"

    wm protocol $top WM_DELETE_WINDOW "mouse_spath_destroy $id $top"

    while {$mged_gui($id,mgs_path) == ""} {
	mged_update 0
    }

    return $mged_gui($id,mgs_path)
}

proc mouse_spath_destroy { id top } {
    global mged_gui

    set mged_gui($id,mgs_path) " "
    destroy $top
}

proc mouse_get_spath_and_pos { x y } {
    global mged_gui

    set win [winset]
    set id [get_player_id_dm $win]
    if {$id == "mged"} {
	mouse_init_mged_gui
    }

    set mged_gui($id,mgs_path) [mouse_get_spath $x $y]

    if {$mged_gui($id,mgs_path) == "" || $mged_gui($id,mgs_path) == " "} {
	return ""
    }

    set mged_gui($id,mgs_pos) -1
    set top .mgsp$id

    if [info exists mged_gui($id,screen)] {
	set screen $mged_gui($id,screen)
    } else {
	set screen [winfo screen $win]
    }
    regexp "\[^/\].*" $mged_gui($id,mgs_path) match
    set path_components [split $match /]
    create_listbox $top $screen Matrix $path_components "mouse_spath_and_pos_destroy $id $top"
    set mged_gui($id,edit_menu) $top

    bind_listbox $top "<B1-Motion>"\
	    "set item \[%W index @@%x,%y\];\
	    _mged_press reject;\
	    _mged_press oill;\
	    _mged_ill -i 1 \$mged_gui($id,mgs_path);\
	    _mged_matpick -n \$item"
if 0 {
    bind_listbox $top "<ButtonPress-1>"\
	    "set item \[%W index @@%x,%y\];\
	    _mged_press oill;\
	    _mged_ill -i 1 \$mged_gui($id,mgs_path);\
	    _mged_matpick -n \$item"
    bind_listbox $top "<Double-1>"\
	    "set mged_gui($id,mgs_pos) \[%W index @@%x,%y\];\
	    destroy $top"
} else {
    bind_listbox $top "<ButtonPress-1>" \
	    "lbdcHack %W %x %y %t $id m2 \$mged_gui($id,mgs_path)"
}
    bind_listbox $top "<ButtonRelease-1>" \
	    "%W selection clear 0 end; _mged_press reject"

    wm protocol $top WM_DELETE_WINDOW "mouse_spath_and_pos_destroy $id $top"

    while {$mged_gui($id,mgs_pos) == -1} {
	mged_update 0
    }

    return "$mged_gui($id,mgs_path) $mged_gui($id,mgs_pos)"
}

proc mouse_spath_and_pos_destroy { id top } {
    global mged_gui

    set mged_gui($id,mgs_pos) -2
    set mged_gui($id,mgs_path) ""
    destroy $top
}

proc mouse_get_comb { x y } {
    global mged_gui
    global ::tk::Priv

    set win [winset]
    set id [get_player_id_dm $win]
    if {$id == "mged"} {
	mouse_init_mged_gui
    }

    if {[info exists mged_gui($id,edit_menu)] && \
	    [winfo exists $mged_gui($id,edit_menu)]} {
	destroy $mged_gui($id,edit_menu)
    }

    set mged_gui($id,mgc_comb) ""
    set ray [mouse_shoot_ray $x $y]
    set paths [ray_get_info $ray in path]
    if {![llength $paths]} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"Nothing was hit!"\
		"Nothing was hit!"\
		"" 0 OK
	return ""
    }
    set combs [build_comb_list $paths]

    if {[llength $combs] == 1} {
	set mged_gui($id,mgc_comb) [lindex $combs 0]
	return $mged_gui($id,mgc_comb)
    }

    set top .mgc$id
    if [winfo exists $top] {
	destroy $top
    }

    if [info exists mged_gui($id,screen)] {
	set screen $mged_gui($id,screen)
    } else {
	set win [winset]
	set screen [winfo screen $win]
    }

    create_listbox $top $screen Combination $combs "mouse_comb_destroy $id $top"
    set mged_gui($id,edit_menu) $top

    bind_listbox $top "<B1-Motion>"\
	    "set comb \[%W get @@%x,%y\];\
	    set spath \[comb_get_solid_path \$comb\];\
	    set path_pos \[comb_get_path_pos \$spath \$comb\];\
	    matrix_illum \$spath \$path_pos"
if 0 {
    bind_listbox $top "<ButtonPress-1>"\
	    "set comb \[%W get @@%x,%y\];\
	    set spath \[comb_get_solid_path \$comb\];\
	    set path_pos \[comb_get_path_pos \$spath \$comb\];\
	    matrix_illum \$spath \$path_pos"
    bind_listbox $top "<Double-1>"\
	    "set mged_gui($id,mgc_comb) \[%W get @@%x,%y\];\
	    destroy $top"
} else {
    bind_listbox $top "<ButtonPress-1>" \
	    "lbdcHack %W %x %y %t $id c1 junkpath"
}
    bind_listbox $top "<ButtonRelease-1>"\
	    "%W selection clear 0 end;\
	    _mged_press reject"

    wm protocol $top WM_DELETE_WINDOW "mouse_comb_destroy $id $top"

    while {$mged_gui($id,mgc_comb) == ""} {
	mged_update 0
    }

    return $mged_gui($id,mgc_comb)
}

proc mouse_comb_destroy { id top } {
    global mged_gui

    set mged_gui($id,mgc_comb) " "
    destroy $top
}

proc mouse_solid_edit_select { x y } {
    global mged_players
    global mged_gui

    if {[opendb] == ""} {
	return
    }

    set spath [mouse_get_spath $x $y]
    if {$spath == "" || $spath == " "} {
	return
    }

    _mged_sed -i 1 $spath

    mged_apply_all [winset] "set mouse_behavior d"
    foreach id $mged_players {
	set mged_gui($id,mouse_behavior) d
    }
}

proc mouse_matrix_edit_select { x y } {
    global mged_players
    global mged_gui

    if {[opendb] == ""} {
	return
    }

    set spath_and_pos [mouse_get_spath_and_pos $x $y]
    if {[llength $spath_and_pos] != 2} {
	return
    }

    _mged_press oill
    _mged_ill -i 1 [lindex $spath_and_pos 0]
    _mged_matpick [lindex $spath_and_pos 1]

    mged_apply_all [winset] "set mouse_behavior d"
    foreach id $mged_players {
	set mged_gui($id,mouse_behavior) d
    }
}

proc mouse_rt_obj_select { x y } {
    global mged_players
    global mged_gui
    global rt_control
    global port

    if {[opendb] == ""} {
	return
    }

    set win [winset]
    set id [get_player_id_dm $win]
    if {$id == "mged"} {
	mouse_init_mged_gui
    }

    set spath_and_pos [mouse_get_spath_and_pos $x $y]
    if {[llength $spath_and_pos] != 2} {
	return
    }

    set spath [lindex $spath_and_pos 0]
    set sindex [lindex $spath_and_pos 1]

    # remove leading /
    if {[string index $spath 0] == "/"} {
	set spath [string range $spath 1 end]
    }

    set components [split $spath /]
    if ![llength $components] {
	return
    }

    set component [lindex $components 0]
    for {set i 1} {$i <= $sindex} {incr i} {
	set component $component/[lindex $components $i]
    }

    rt_init_vars $id $win

    switch $rt_control($id,omode) {
	all
            -
	one {
	    rt_olist_set $id $component
	    do_Raytrace $id
	}
	several {
	    rt_olist_add $id $component
	}
    }

    return
}

proc mouse_comb_edit_select { x y } {
    global mged_players
    global mged_gui
    global comb_control

    if {[opendb] == ""} {
	return
    }

    set win [winset]
    set id [get_player_id_dm $win]
    if {$id == "mged"} {
	mouse_init_mged_gui
    }

    set comb [mouse_get_comb $x $y]
    if {$comb == "" || $comb == " "} {
	return
    }

    init_comb $id
    set comb_control($id,name) $comb
    comb_reset $id

    mged_apply_all [winset] "set mouse_behavior d"
    foreach id $mged_players {
	set mged_gui($id,mouse_behavior) d
    }
}

##
#
# Hack to use new mouse utilities with an arbitrary 
# display manager window.
#
proc mouse_init_mged_gui {} {
    global mged_gui

    set mged_gui(mged,active_dm) ""
}
@


1.25
log
@update copyright to include span through 2003
@
text
@@


1.24
log
@*** empty log message ***
@
text
@d16 1
a16 1
#	This software is Copyright (C) 1995 by the United States Army
@


1.24.6.1
log
@merge from HEAD
@
text
@d16 1
a16 1
#	This software is Copyright (C) 1995-2004 by the United States Army
@


1.23
log
@*- remove special code for handling sketch primitives;
   this now lives in callbacks.tcl
@
text
@d24 1
a24 1
    global tkPriv
d42 1
a42 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d169 1
a169 1
    global tkPriv
d186 1
a186 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.23.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
#	This software is Copyright (C) 1995-2004 by the United States Army
d24 1
a24 1
    global ::tk::Priv
d42 1
a42 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d169 1
a169 1
    global ::tk::Priv
d186 1
a186 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.23.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d24 1
a24 1
    variable ::tk::Priv
d42 1
a42 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
d169 1
a169 1
    variable ::tk::Priv
d186 1
a186 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
@


1.23.6.2
log
@sync to HEAD...
@
text
@d16 1
a16 1
#	This software is Copyright (C) 1995-2004 by the United States Army
d24 1
a24 1
    global ::tk::Priv
d42 1
a42 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d169 1
a169 1
    global ::tk::Priv
d186 1
a186 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.22
log
@*- use lbdcHack to get around the <Double-1> problem
   (i.e. this event is not consistently recognized)
@
text
@d265 1
a265 6
    set sol_type [lindex [db get $spath] 0]
    if {$sol_type == "sketch"} {
	Sketch_editor .#auto $spath
    } else {
	_mged_sed -i 1 $spath
    }
@


1.21
log
@*- mods that get around an apparent Tcl bug
   when selecting on <Double-1> events.
@
text
@d79 1
a79 1
	    "lbdcHack %W %x %y %t $id s junkpath"
d145 1
a145 1
	    "lbdcHack %W %x %y %t $id m \$mged_gui($id,mgs_path)"
d230 1
a230 1
	    "lbdcHack %W %x %y %t $id c junkpath"
@


1.20
log
@*- change solid to primitive
@
text
@d70 1
d77 5
a81 1
    bind_listbox $top "<ButtonRelease-1>"\
d134 1
d143 5
a147 1
    bind_listbox $top "<ButtonRelease-1>"\
d219 1
d228 4
d265 6
a270 2
    _mged_press sill
    _mged_ill -i 1 $spath
d396 1
a396 1
}@


1.19
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d64 1
a64 1
    create_listbox $top $screen Solid $paths "mouse_spath_destroy $id $top"
@


1.18
log
@place_near_mouse proc moved to mouse.tcl
in tclscripts directory
@
text
@d24 1
d42 1
a42 1
	cad_dialog .$id.spathDialog $mged_gui($id,screen)\
d159 1
d176 1
a176 1
	cad_dialog .$id.combDialog $mged_gui($id,screen)\
@


1.17
log
@*- add motion bindings to highlight objects as the
   mouse traverses items in the list
@
text
@d3 2
a4 1
#	TCL macros for selecting among the solids/objects being displayed.
d6 8
a13 2
#	Author -
#		Robert Parker
d15 6
d124 1
d126 1
a126 1
	    _mged_ill \$mged_gui($id,mgs_path);\
d131 1
a131 1
	    _mged_ill \$mged_gui($id,mgs_path);\
d249 1
a249 1
    _mged_ill $spath
d271 1
a271 1
    _mged_ill [lindex $spath_and_pos 0]
a363 8
}

proc place_near_mouse { top } {
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

    catch { wm geometry $top +$x+$y }
@


1.17.2.1
log
@Use the new -i option for the
sed and ill commands.
@
text
@a110 1
	    _mged_press reject;\
d112 1
a112 1
	    _mged_ill -i 1 \$mged_gui($id,mgs_path);\
d117 1
a117 1
	    _mged_ill -i 1 \$mged_gui($id,mgs_path);\
d235 1
a235 1
    _mged_ill -i 1 $spath
d257 1
a257 1
    _mged_ill -i 1 [lindex $spath_and_pos 0]
@


1.17.2.2
log
@place_near_mouse proc moved to mouse.tcl
in tclscripts directory
@
text
@d3 1
a3 2
# Author -
#	Robert Parker
d5 2
a6 8
# Source -
#	The U. S. Army Ballistic Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#  
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#	your "Statement of Terms and Conditions for the Release of
#	The BRL-CAD Package" agreement.
a7 6
# Copyright Notice -
#	This software is Copyright (C) 1995 by the United States Army
#	in all countries except the USA.  All rights reserved.
#
# Description -
#       Mouse routines.
d351 8
@


1.17.2.3
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@a23 1
    global tkPriv
d41 1
a41 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
a157 1
    global tkPriv
d174 1
a174 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.17.2.4
log
@*- change solid to primitive
@
text
@d64 1
a64 1
    create_listbox $top $screen Primitive $paths "mouse_spath_destroy $id $top"
@


1.17.2.5
log
@*- mods that get around an apparent Tcl bug
   when selecting <Double-1> events
@
text
@a69 1
if 0 {
d76 1
a76 5
} else {
    bind_listbox $top "<ButtonPress-1>" \
	    "lbdcHack %W %x %y %t $id s junkpath"
}
    bind_listbox $top "<ButtonRelease-1>" \
a128 1
if 0 {
d137 1
a137 5
} else {
    bind_listbox $top "<ButtonPress-1>" \
	    "lbdcHack %W %x %y %t $id m \$mged_gui($id,mgs_path)"
}
    bind_listbox $top "<ButtonRelease-1>" \
a208 1
if 0 {
a216 4
} else {
    bind_listbox $top "<ButtonPress-1>" \
	    "lbdcHack %W %x %y %t $id c junkpath"
}
d250 2
a251 6
    set sol_type [lindex [db get $spath] 0]
    if {$sol_type == "sketch"} {
	Sketch_editor .#auto $spath
    } else {
	_mged_sed -i 1 $spath
    }
d377 1
a377 1
}
@


1.17.2.6
log
@*- use lbdcHack
@
text
@d79 1
a79 1
	    "lbdcHack %W %x %y %t $id s2 junkpath"
d145 1
a145 1
	    "lbdcHack %W %x %y %t $id m2 \$mged_gui($id,mgs_path)"
d230 1
a230 1
	    "lbdcHack %W %x %y %t $id c1 junkpath"
@


1.16
log
@*- check for no database open
@
text
@d53 3
d58 1
a58 1
	    solid_illum \$item; break"
d61 1
a61 1
	    destroy $top; break"
d63 1
a63 1
	    "%W selection clear 0 end; _mged_press reject; break"
d109 5
d118 1
a118 1
	    _mged_matpick -n \$item; break"
d121 1
a121 1
	    destroy $top; break"
d123 1
a123 1
	    "%W selection clear 0 end; _mged_press reject; break"
d188 5
d197 1
a197 1
	    matrix_illum \$spath \$path_pos; break"
d200 1
a200 1
	    destroy $top; break"
d203 1
a203 1
	    _mged_press reject; break"
@


1.15
log
@*- mods to mouse_rt_obj_select
@
text
@d212 4
d234 4
d259 4
d313 4
@


1.14
log
@*- call rt_olist_add to either add to object list
	editor if it exists, otherwise append to olist
@
text
@a263 2
    incr sindex
    set component [lindex [split $spath /] $sindex]
d265 15
d286 1
a286 1
	    set rt_control($id,olist) $component
@


1.13
log
@*- call mged_apply_all with pathname of current display manager window
@
text
@d277 1
a277 1
	    lappend rt_control($id,olist) $component
@


1.12
log
@*- mods to allow use of the new mouse utilities
	with an arbitrary display manager window
@
text
@d220 1
a220 1
    mged_apply_all "set mouse_behavior d"
d239 1
a239 1
    mged_apply_all "set mouse_behavior d"
d304 1
a304 1
    mged_apply_all "set mouse_behavior d"
@


1.11
log
@*- mouse_update_rt_vars, initialize rt_control variables
*- mouse_rt_obj_select, handles new mouse behavior - o
	- allows the use to select objects to be raytraced
	or to raytrace the currently selected object
*- more error checking
@
text
@d15 1
a15 1
	return
d84 1
a84 1
	return
d140 1
a140 1
	return
d254 1
a254 1
	return
d267 1
a267 1
    mouse_update_rt_vars $id $win
d292 1
a292 1
	return
d318 1
a318 2

## - mouse_update_rt_vars
d320 2
a321 1
# Assumes that winset has been called prior to invoking this proc.
d323 2
a324 22
proc mouse_update_rt_vars { id win } {
    global rt_control

    if ![info exists rt_control($id,top)] {
	set rt_control($id,top) .$id.rt
	set rt_control($id,topAS) .$id.rtAS
	set rt_control($id,color) [rset cs bg]
	set rt_control($id,nproc) 1
	set rt_control($id,hsample) 0
	set rt_control($id,jitter) 0
	set rt_control($id,jitterTitle) "None"
	set rt_control($id,lmodel) 0
	set rt_control($id,lmodelTitle) "Full"

	# set widget padding
	set rt_control($id,padx) 4
	set rt_control($id,pady) 2
    }

    set rt_control($id,color) [rset cs bg]
    rt_cook_src $id $win
    rt_cook_dest $id $win
d326 1
a326 2
    set size [dm size]
    set rt_control($id,size) "[lindex $size 0]x[lindex $size 1]"
@


1.10
log
@*- added place_near_mouse proc
@
text
@d14 3
d83 3
d139 3
d245 39
d289 6
a299 2
    set win [winset]
    set id [get_player_id_dm $win]
d317 32
@


1.9
log
@*- fixed a bug that left MGED at Tcl level 2 or deeper
@
text
@d257 8
@


1.8
log
@*- now calling mged_update with a parameter (non_blocking)
@
text
@d47 1
a47 1
    create_listbox $top $screen Solid $paths "destroy $top"
d59 2
d68 7
d83 1
a83 1
    if {$mged_gui($id,mgs_path) == ""} {
d97 1
a97 1
    create_listbox $top $screen Matrix $path_components "destroy $top"
d111 2
d120 8
d168 1
a168 1
    create_listbox $top $screen Combination $combs "destroy $top"
d183 2
d192 7
d204 1
a204 1
    if {$spath == ""} {
d242 1
a242 1
    if {$comb == ""} {
@


1.7
log
@*- cleanup variables
@
text
@d60 1
a60 1
	mged_update
d103 1
a103 1
	mged_update
d165 1
a165 1
	mged_update
@


1.6
log
@*- changed comb_name($id) to comb_control($id,name)
@
text
@d10 1
a10 3
    global player_screen
    global mged_edit_menu
    global mgs_spath
d15 3
a17 3
    if {[info exists mged_edit_menu($id)] && \
	    [winfo exists $mged_edit_menu($id)]} {
	destroy $mged_edit_menu($id)
d20 1
a20 1
    set mgs_spath ""
d25 1
a25 1
	cad_dialog .$id.spathDialog $player_screen($id)\
d41 2
a42 2
    if [info exists player_screen($id)] {
	set screen $player_screen($id)
d48 1
a48 1
    set mged_edit_menu($id) $top
d54 1
a54 1
	    "set mgs_spath \[get_listbox_entry %W %x %y\];\
d59 1
a59 1
    while {$mgs_spath == ""} {
d63 1
a63 1
    return $mgs_spath
d67 1
a67 4
    global player_screen
    global mged_edit_menu
    global mgsp_spath
    global mgsp_path_pos
d72 1
a72 1
    set mgsp_spath [mouse_get_spath $x $y]
d74 1
a74 1
    if {$mgsp_spath == ""} {
d78 1
a78 1
    set mgsp_path_pos -1
d81 2
a82 2
    if [info exists player_screen($id)] {
	set screen $player_screen($id)
d86 1
a86 1
    regexp "\[^/\].*" $mgsp_spath match
d89 1
a89 1
    set mged_edit_menu($id) $top
d94 1
a94 1
	    _mged_ill \$mgsp_spath;\
d97 1
a97 1
	    "set mgsp_path_pos \[%W index @@%x,%y\];\
d102 1
a102 1
    while {$mgsp_path_pos == -1} {
d106 1
a106 1
    return "$mgsp_spath $mgsp_path_pos"
d110 1
a110 3
    global player_screen
    global mged_edit_menu
    global mgc_comb
d115 3
a117 3
    if {[info exists mged_edit_menu($id)] && \
	    [winfo exists $mged_edit_menu($id)]} {
	destroy $mged_edit_menu($id)
d120 1
a120 1
    set mgc_comb ""
d124 1
a124 1
	cad_dialog .$id.combDialog $player_screen($id)\
d133 2
a134 2
	set mgc_comb [lindex $combs 0]
	return $mgc_comb
d142 2
a143 2
    if [info exists player_screen($id)] {
	set screen $player_screen($id)
d150 1
a150 1
    set mged_edit_menu($id) $top
d158 1
a158 1
	    "set mgc_comb \[%W get @@%x,%y\];\
d164 1
a164 1
    while {$mgc_comb == ""} {
d168 1
a168 1
    return $mgc_comb
d173 1
a173 1
    global mged_mouse_behavior
d185 1
a185 1
	set mged_mouse_behavior($id) d
d191 1
a191 1
    global mged_mouse_behavior
d204 1
a204 1
	set mged_mouse_behavior($id) d
d210 1
a210 1
    global mged_mouse_behavior
d226 1
a226 1
	set mged_mouse_behavior($id) d
@


1.5
log
@*- a few name changes
@
text
@d218 1
a218 1
    global comb_name
d228 1
a228 1
    set comb_name($id) $comb
@


1.4
log
@*- append "break" to bindings to prevent further processing
@
text
@d196 1
a196 1
proc mouse_object_edit_select { x y } {
d229 1
a229 1
    comb_load_defaults $id
@


1.3
log
@*- use cad_dialog instead of mged_dialog
@
text
@d54 1
a54 1
	    solid_illum \$item"
d57 1
a57 1
	    destroy $top"
d59 1
a59 1
	    "%W selection clear 0 end; _mged_press reject"
d100 1
a100 1
	    _mged_matpick -n \$item"
d103 1
a103 1
	    destroy $top"
d105 1
a105 1
	    "%W selection clear 0 end; _mged_press reject"
d163 1
a163 1
	    matrix_illum \$spath \$path_pos"
d166 1
a166 1
	    destroy $top"
d169 1
a169 1
	    _mged_press reject"
@


1.2
log
@added procs: mouse_get_comb, mouse_solid_edit_select,
	mouse_object_edit_select and mouse_comb_edit_select.

modified procs: mouse_get_spath and mouse_get_spath_and_pos
@
text
@d27 1
a27 1
	mged_dialog .$id.spathDialog $player_screen($id)\
d131 1
a131 1
	mged_dialog .$id.combDialog $player_screen($id)\
@


1.1
log
@TCL macros for selecting among the solids/objects being displayed.
@
text
@d9 1
a9 1
proc mouse_get_solid { x y } {
d27 1
a27 1
	mged_dialog .$id.editDialog $player_screen($id)\
a37 1
    _mged_press reject
d39 3
d54 1
a54 1
	    new_solid_illum \$item"
d68 1
a68 1
proc mouse_get_solid_and_matrix { x y } {
d71 2
a72 2
    global mgsm_spath
    global mgsm_matrix
d77 1
a77 1
    set mgsm_spath [mouse_get_solid $x $y]
d79 1
a79 1
    if {$mgsm_spath == ""} {
d83 2
a84 2
    set mgsm_matrix -1
    set top .mgsm$id
d91 1
a91 1
    regexp "\[^/\].*" $mgsm_spath match
d93 1
a93 1
    create_listbox $top $screen Matrix $path_components "_mged_press reject; destroy $top"
d99 1
a99 1
	    _mged_ill \$mgsm_spath;\
d102 1
a102 1
	    "set mgsm_matrix \[%W index @@%x,%y\];\
d107 65
a171 1
    while {$mgsm_matrix == -1} {
d175 60
a234 1
    return "$mgsm_spath $mgsm_matrix"
@
