head	1.32;
access;
symbols
	ansi-20040405-merged:1.30.4.1
	postmerge-20040405-ansi:1.31
	premerge-20040404-ansi:1.31
	postmerge-autoconf:1.31
	autoconf-freeze:1.31
	premerge-autoconf:1.31
	postmerge-20040315-windows:1.31
	premerge-20040315-windows:1.31
	windows-20040315-freeze:1.30.6.2
	autoconf-20031203:1.31
	autoconf-20031202:1.31
	autoconf-branch:1.31.0.6
	phong-branch:1.31.0.4
	photonmap-branch:1.31.0.2
	rel-6-1-DP:1.30
	windows-branch:1.30.0.6
	rel-6-0-2:1.30
	ansi-branch:1.30.0.4
	rel-6-0-1-branch:1.30.0.2
	hartley-6-0-post:1.30
	hartley-6-0-pre:1.30
	rel-6-0-1:1.30
	rel-6-0:1.30
	rel-5-4:1.27.2.2
	offsite-5-3-pre:1.29
	rel-5-3:1.27.2.2
	rel-5-2:1.27
	rel-5-1-branch:1.27.0.2
	rel-5-1:1.27
	rel-5-0:1.27
	rel-5-0-beta:1.24;
locks; strict;
comment	@# @;


1.32
date	2004.05.21.16.41.24;	author morrison;	state dead;
branches;
next	1.31;

1.31
date	2003.03.13.19.45.31;	author jra;	state Exp;
branches;
next	1.30;

1.30
date	2001.04.03.22.33.03;	author bparker;	state Exp;
branches
	1.30.4.1
	1.30.6.1;
next	1.29;

1.29
date	2000.12.22.00.35.15;	author bparker;	state Exp;
branches;
next	1.28;

1.28
date	2000.10.18.20.03.19;	author bparker;	state Exp;
branches;
next	1.27;

1.27
date	99.09.01.18.08.25;	author bparker;	state Exp;
branches
	1.27.2.1;
next	1.26;

1.26
date	99.08.05.17.38.20;	author bparker;	state Exp;
branches;
next	1.25;

1.25
date	99.07.26.15.23.12;	author bparker;	state Exp;
branches;
next	1.24;

1.24
date	99.04.23.17.47.53;	author bparker;	state Exp;
branches;
next	1.23;

1.23
date	99.02.10.15.21.12;	author bparker;	state Exp;
branches;
next	1.22;

1.22
date	99.01.19.22.31.29;	author bparker;	state Exp;
branches;
next	1.21;

1.21
date	99.01.05.23.12.46;	author bparker;	state Exp;
branches;
next	1.20;

1.20
date	99.01.05.15.56.13;	author bparker;	state Exp;
branches;
next	1.19;

1.19
date	98.12.30.22.07.21;	author bparker;	state Exp;
branches;
next	1.18;

1.18
date	98.12.18.22.02.04;	author bparker;	state Exp;
branches;
next	1.17;

1.17
date	98.12.09.22.53.50;	author bparker;	state Exp;
branches;
next	1.16;

1.16
date	98.12.09.22.11.00;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	98.11.24.21.50.12;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	98.11.13.22.15.39;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	98.11.06.21.16.41;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	98.10.21.17.50.26;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	98.08.13.12.45.21;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	98.07.15.16.34.32;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	98.06.24.18.38.05;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	98.06.15.19.28.22;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	98.06.09.18.04.19;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	98.05.26.14.38.02;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.04.23.12.59.59;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.03.20.22.47.10;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.03.13.22.45.11;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.03.06.22.47.29;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.02.20.23.23.36;	author bparker;	state Exp;
branches;
next	;

1.27.2.1
date	2000.10.18.20.03.58;	author bparker;	state Exp;
branches;
next	1.27.2.2;

1.27.2.2
date	2000.12.22.00.02.28;	author bparker;	state Exp;
branches;
next	;

1.30.4.1
date	2004.03.17.21.23.11;	author morrison;	state Exp;
branches;
next	;

1.30.6.1
date	2002.09.26.23.04.17;	author morrison;	state Exp;
branches;
next	1.30.6.2;

1.30.6.2
date	2004.03.11.23.48.58;	author morrison;	state Exp;
branches;
next	;


desc
@Grid Control Panel
@


1.32
log
@moved to src/tclscripts/
@
text
@##
#                       G R I D . T C L
#
# Author -
#	Robert G. Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Description -
#	Control Panel for MGED's grid.
#

proc do_grid_spacing { id spacing_type } {
    global mged_gui
    global grid_control_spacing
    global localunit
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set top .$id.grid_spacing

    if [winfo exists $top] {
	raise $top
	return
    }

    toplevel $top -screen $mged_gui($id,screen)

    frame $top.gridF1 -relief groove -bd 2
    frame $top.gridF2

    if {$spacing_type == "h"} {
	label $top.resL -text "Horiz." -anchor w
	entry $top.resE -relief sunken -width 12 -textvar grid_control_spacing($id,tick)
	entry $top.maj_resE -relief sunken -width 12 -textvar grid_control_spacing($id,ticksPerMajor)
    } elseif {$spacing_type == "v"} {
	label $top.resL -text "Vert." -anchor w
	entry $top.resE -relief sunken -width 12 -textvar grid_control_spacing($id,tick)
	entry $top.maj_resE -relief sunken -width 12 -textvar grid_control_spacing($id,ticksPerMajor)
    } elseif {$spacing_type == "b"} {
	label $top.resL -text "Horiz. & Vert." -anchor w
	hoc_register_data $top.resL "Horiz. & Vert."\
		{ { summary "The tick spacing and major spacing are set
for both horizontal and vertical directions." } }

	set hoc_data { { summary "Tick spacing, here, is the distance between each
tick in both the horizontal and vertical directions." } }
	label $top.tickSpacingL -text "Tick Spacing\n($localunit/tick)"
	hoc_register_data $top.tickSpacingL "Tick Spacing" $hoc_data
	entry $top.resE -relief sunken -width 12 -textvar grid_control_spacing($id,tick)
	hoc_register_data $top.resE "Tick Spacing" $hoc_data

        set hoc_data { { summary "Major spacing is measured in ticks
and determines how often lines of
ticks are drawn." } }
        label $top.majorSpacingL -text "Major Spacing\n(ticks/major)"
        hoc_register_data $top.majorSpacingL "Major Spacing" $hoc_data
	entry $top.maj_resE -relief sunken -width 12 -textvar grid_control_spacing($id,ticksPerMajor)
	hoc_register_data $top.maj_resE "Major Spacing" $hoc_data
    } else {
	catch {destroy $top}
	return
    }

    button $top.okB -relief raised -text "OK"\
	    -command "grid_spacing_ok $id $spacing_type $top"
    hoc_register_data $top.okB "OK"\
	    { { summary "Apply the grid spacing settings
to the grid, then close the grid
spacing control panel." } }
    button $top.applyB -relief raised -text "Apply"\
	    -command "grid_spacing_apply $id $spacing_type"
    hoc_register_data $top.applyB "Apply"\
	    { { summary "Apply the grid spacing settings
to the grid." } }
    button $top.resetB -relief raised -text "Reset"\
	    -command "grid_spacing_reset $id $spacing_type"
    hoc_register_data $top.resetB "Reset"\
	    { { summary "Reset the control panel from the grid." } }
    button $top.autosizeB -relief raised -text "Autosize"\
	    -command "grid_spacing_autosize $id"
    hoc_register_data $top.autosizeB "Autosize"\
	    { { summary "Set the grid spacing according to the view
size. The number of ticks will be between 20
and 200. The tick spacing will be a power of
10 in local units." } }
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"
    hoc_register_data $top.dismissB "Dismiss"\
	    { { summary "Dismiss/close the grid spacing control panel." } }

    grid x $top.tickSpacingL x $top.majorSpacingL -in $top.gridF1 -padx 8 -pady 8
    grid $top.resL $top.resE x $top.maj_resE -sticky "ew" -in $top.gridF1 -padx 8 -pady 8

    grid columnconfigure $top.gridF1 1 -weight 1
    grid columnconfigure $top.gridF1 3 -weight 1

    grid $top.okB $top.applyB x $top.resetB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF2
    grid columnconfigure $top.gridF2 2 -weight 1
    grid columnconfigure $top.gridF2 2 -minsize 10
    grid columnconfigure $top.gridF2 5 -weight 1
    grid columnconfigure $top.gridF2 5 -minsize 10

    grid $top.gridF1 -sticky "ew" -padx 8 -pady 8
    grid $top.gridF2 -sticky "ew" -padx 8 -pady 8

    grid columnconfigure $top 0 -weight 1

    grid_spacing_reset $id $spacing_type

    place_near_mouse $top
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top }"
    wm title $top "Grid Spacing ($id)"
}

proc do_grid_anchor { id } {
    global mged_gui
    global grid_control_anchor
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set top .$id.grid_anchor

    if [winfo exists $top] {
	raise $top

	return
    }

    # Initialize variables
    winset $mged_gui($id,active_dm)
    set grid_control_anchor($id) [_mged_rset grid anchor]

    toplevel $top -screen $mged_gui($id,screen)

    frame $top.gridF1 -relief groove -bd 2
    frame $top.gridF2

    frame $top.anchorF

    set hoc_data { { summary "The grid anchor point is a point such that
when the grid is drawn, one of its points
must be located exactly at the anchor point.
The anchor point is specified using model
coordinates and local units. The anchor point
and tick spacings work together to give the
user accurate information about where things
are in the view as well as a high degree of
accuracy when snapping." } }
    label $top.anchorL -text "Anchor Point" -anchor e
    hoc_register_data $top.anchorL "Anchor Point" $hoc_data
    entry $top.anchorE -relief sunken -bd 2 -width 12 -textvar grid_control_anchor($id)
    hoc_register_data $top.anchorE "Anchor Point" $hoc_data

    button $top.okB -relief raised -text "OK"\
	    -command "mged_apply $id \"rset grid anchor \\\$grid_control_anchor($id)\";
                      catch { destroy $top }"
    hoc_register_data $top.okB "OK"\
	    { { summary "Apply the grid anchor control panel
settings to the grid, then close the
control panel." } }
    button $top.applyB -relief raised -text "Apply"\
	    -command "mged_apply $id \"rset grid anchor \\\$grid_control_anchor($id)\""
    hoc_register_data $top.applyB "Apply"\
	    { { summary "Apply the grid anchor control panel
settings to the grid." } }
    button $top.resetB -relief raised -text "Reset"\
	    -command "winset \$mged_gui($id,active_dm);\
	    set grid_control_anchor($id) \[rset grid anchor\]"
    hoc_register_data $top.resetB "Reset"\
	    { { summary "Reset the control panel from the grid." } }
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"
    hoc_register_data $top.dismissB "Dismiss"\
	    { { summary "Dismiss/close the grid anchor control panel." } }

    grid $top.anchorL $top.anchorE -sticky "ew" -in $top.anchorF
    grid columnconfigure $top.anchorF 1 -weight 1

    grid $top.anchorF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
    grid columnconfigure $top.gridF1 0 -weight 1

    grid $top.okB $top.applyB x $top.resetB x $top.dismissB -sticky "ew" -in $top.gridF2
    grid columnconfigure $top.gridF2 2 -weight 1
    grid columnconfigure $top.gridF2 4 -weight 3

    grid $top.gridF1 -sticky "ew" -padx 8 -pady 8
    grid $top.gridF2 -sticky "ew" -padx 8 -pady 8

    grid columnconfigure $top 0 -weight 1

    place_near_mouse $top
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top }"
    wm title $top "Grid Anchor Point ($id)"
}

proc init_grid_control { id } {
    global mged_gui
    global mged_default
    global grid_control
    global localunit
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set top .$id.grid_control

    if [winfo exists $top] {
	raise $top

	return
    }

    if ![info exists grid_control($id,rh)] {
	set init_grid_vars 1
    } else {
	set init_grid_vars 0
    }

    set grid_control($id,padx) 4
    set grid_control($id,pady) 4

    toplevel $top -screen $mged_gui($id,screen) -menu $top.menubar

    menu $top.menubar -tearoff $mged_default(tearoff_menus)
    $top.menubar add cascade -label "Apply To" -underline 0\
	    -menu $top.menubar.applyTo
    menu $top.menubar.applyTo -title "Apply To"\
	    -tearoff $mged_default(tearoff_menus)
    # The help on context for the applyTo menu was already defined in openw.tcl
    $top.menubar.applyTo add radiobutton -value 0\
	    -variable mged_gui($id,apply_to)\
	    -label "Active Pane" -underline 0
    $top.menubar.applyTo add radiobutton -value 1\
	    -variable mged_gui($id,apply_to)\
	    -label "Local Panes" -underline 0
    $top.menubar.applyTo add radiobutton -value 2\
	    -variable mged_gui($id,apply_to)\
	    -label "Listed Panes" -underline 1
    $top.menubar.applyTo add radiobutton -value 3\
	    -variable mged_gui($id,apply_to)\
	    -label "All Panes" -underline 4

    frame $top.gridF1
    frame $top.gridFF1 -relief groove -bd 2
    frame $top.gridF2
    frame $top.gridFF2 -relief groove -bd 2
    frame $top.gridF3
    frame $top.gridFF3 -relief groove -bd 2
    frame $top.gridF4

    frame $top.hF -relief sunken -bd 2
    frame $top.maj_hF -relief sunken -bd 2
    frame $top.vF -relief sunken -bd 2
    frame $top.maj_vF -relief sunken -bd 2

    frame $top.anchorF

    label $top.tickSpacingL -text "Tick Spacing\n($localunit/tick)"
    hoc_register_data $top.tickSpacingL "Tick Spacing"\
	    { { summary "Tick spacing is the distance between each tick
in either the horizontal or vertical direction." } }
    label $top.majorSpacingL -text "Major Spacing\n(ticks/major)"
    hoc_register_data $top.majorSpacingL "Major Spacing"\
	    { { summary "Major spacing is measured in ticks and determines
how often lines of ticks are drawn." } }

    set hoc_data { { summary "This row is for horizontal tick spacing
and horizontal major spacing. These two
attributes help determine how the grid is
drawn and how snapping is performed." } }
    label $top.hL -text "Horiz." -anchor w
    hoc_register_data $top.hL "Horizontal Spacing" $hoc_data
    entry $top.hE -relief flat -width 12 -textvar grid_control($id,rh)
    hoc_register_data $top.hE "Horizontal Tick Spacing" $hoc_data
    menubutton $top.hMB -relief raised -bd 2\
	    -menu $top.hMB.spacing -indicatoron 1
    hoc_register_data $top.hMB "Horizontal Tick Spacings"\
	    { { summary "Pops up a menu of distances to choose
from for horizontal tick spacing." } }
    menu $top.hMB.spacing -title "Grid Spacing" -tearoff 0
    $top.hMB.spacing add command -label "Micrometer" -underline 4\
	    -command "set_grid_spacing_htick $id micrometer"
    $top.hMB.spacing add command -label "Millimeter" -underline 2\
	    -command "set_grid_spacing_htick $id millimeter"
    $top.hMB.spacing add command -label "Centimeter" -underline 0\
	    -command "set_grid_spacing_htick $id centimeter"
    $top.hMB.spacing add command -label "Decimeter" -underline 0\
	    -command "set_grid_spacing_htick $id decimeter"
    $top.hMB.spacing add command -label "Meter" -underline 0\
	    -command "set_grid_spacing_htick $id meter"
    $top.hMB.spacing add command -label "Kilometer" -underline 0\
	    -command "set_grid_spacing_htick $id kilometer"
    $top.hMB.spacing add separator
    $top.hMB.spacing add command -label "1/10 Inch" -underline 0\
	    -command "set_grid_spacing_htick $id \"1/10 inch\""
    $top.hMB.spacing add command -label "1/4 Inch" -underline 2\
	    -command "set_grid_spacing_htick $id \"1/4 inch\""
    $top.hMB.spacing add command -label "1/2 Inch" -underline 2\
	    -command "set_grid_spacing_htick $id \"1/2 inch\""
    $top.hMB.spacing add command -label "Inch" -underline 0\
	    -command "set_grid_spacing_htick $id inch"
    $top.hMB.spacing add command -label "Foot" -underline 0\
	    -command "set_grid_spacing_htick $id foot"
    $top.hMB.spacing add command -label "Yard" -underline 0\
	    -command "set_grid_spacing_htick $id yard"
    $top.hMB.spacing add command -label "Mile" -underline 3\
	    -command "set_grid_spacing_htick $id mile"
    entry $top.maj_hE -relief flat -width 12 -textvar grid_control($id,mrh)
    hoc_register_data $top.maj_hE "Horizontal Major Spacing"\
	    { { summary "Enter horizontal major spacing here." } }

    set hoc_data { { summary "This row is for vertical tick spacing
and vertical major spacing. These two
attributes help determine how the grid
is drawn and how snapping is performed." } }
    label $top.vL -text "Vert." -anchor w
    hoc_register_data $top.vL "Vertical Spacing" $hoc_data
    entry $top.vE -relief flat -width 12 -textvar grid_control($id,rv)
    hoc_register_data $top.vE "Vertical Tick Spacing" $hoc_data
    menubutton $top.vMB -relief raised -bd 2\
	    -menu $top.vMB.spacing -indicatoron 1
    hoc_register_data $top.vMB "Vertical Tick Spacings"\
	    { { summary "Pops up a menu of distances to choose from for
vertical tick spacing." } }
    menu $top.vMB.spacing -title "Grid Spacing" -tearoff 0
    $top.vMB.spacing add command -label "Micrometer" -underline 4\
	    -command "set_grid_spacing_vtick $id micrometer"
    $top.vMB.spacing add command -label "Millimeter" -underline 2\
	    -command "set_grid_spacing_vtick $id millimeter"
    $top.vMB.spacing add command -label "Centimeter" -underline 0\
	    -command "set_grid_spacing_vtick $id centimeter"
    $top.vMB.spacing add command -label "Decimeter" -underline 0\
	    -command "set_grid_spacing_vtick $id decimeter"
    $top.vMB.spacing add command -label "Meter" -underline 0\
	    -command "set_grid_spacing_vtick $id meter"
    $top.vMB.spacing add command -label "Kilometer" -underline 0\
	    -command "set_grid_spacing_vtick $id kilometer"
    $top.vMB.spacing add separator
    $top.vMB.spacing add command -label "1/10 Inch" -underline 0\
	    -command "set_grid_spacing_vtick $id \"1/10 inch\""
    $top.vMB.spacing add command -label "1/4 Inch" -underline 2\
	    -command "set_grid_spacing_vtick $id \"1/4 inch\""
    $top.vMB.spacing add command -label "1/2 Inch" -underline 2\
	    -command "set_grid_spacing_vtick $id \"1/2 inch\""
    $top.vMB.spacing add command -label "Inch" -underline 0\
	    -command "set_grid_spacing_vtick $id inch"
    $top.vMB.spacing add command -label "Foot" -underline 0\
	    -command "set_grid_spacing_vtick $id foot"
    $top.vMB.spacing add command -label "Yard" -underline 0\
	    -command "set_grid_spacing_vtick $id yard"
    $top.vMB.spacing add command -label "Mile" -underline 3\
	    -command "set_grid_spacing_vtick $id mile"
    entry $top.maj_vE -relief flat -width 12 -textvar grid_control($id,mrv)
    hoc_register_data $top.maj_vE "Vertical Major Spacing"\
	    { { summary "Enter vertical major spacing here." } }

    checkbutton $top.squareGridCB -relief flat -text "Square Grid"\
	    -offvalue 0 -onvalue 1 -variable grid_control($id,square)\
	    -command "set_grid_square $id"
    hoc_register_data $top.squareGridCB "Square Grid"\
	    { { synopsis "Toggle square grid mode." }
              { description "In square grid mode the horizontal and
vertical attributes are the same. For
example, if the horizontal tick spacing
is 12 inches, then the vertical tick spacing
is 12 inches. And if the horizontal major
spacing is 10 ticks, then the vertical major
spacing is 10 ticks." } }

    set hoc_data { { summary "The grid anchor point is a point such that
when the grid is drawn, one of its points
must be located exactly at the anchor point.
The anchor point is specified using model
coordinates and local units. The anchor point
and tick spacings work together to give the
user accurate information about where things
are in the view as well as a high degree of
accuracy when snapping." } }
    label $top.anchorL -text "Anchor Point" -anchor e
    hoc_register_data $top.anchorL "Grid Anchor Point" $hoc_data
    entry $top.anchorE -relief sunken -bd 2 -width 12 -textvar grid_control($id,anchor)
    hoc_register_data $top.anchorE "Grid Anchor Point" $hoc_data

    label $top.gridEffectsL -text "Grid Effects" -anchor w
    hoc_register_data $top.gridEffectsL "Grid Effects"\
	    { { summary "The grid can be drawn on the screen and
it can be used for snapping. Note - the
grid exists whether it is drawn or not." } }

    checkbutton $top.drawCB -relief flat -text "Draw"\
	    -offvalue 0 -onvalue 1 -variable grid_control($id,draw)
    hoc_register_data $top.drawCB "Draw Grid"\
	    { { synopsis "Toggle drawing the grid." }
              { description "The grid is a lattice of points over the pane
(geometry window). The regular spacing between
the points gives the user accurate visual cues
regarding dimension. This spacing can be set by
the user." }
            { see_also "rset" } }

    checkbutton $top.snapCB -relief flat -text "Snap"\
	    -offvalue 0 -onvalue 1 -variable grid_control($id,snap)
    hoc_register_data $top.snapCB "Snap To Grid"\
	    { { synopsis "Toggle grid snapping." }
              { description "When snapping to grid, the internal routines
that use the mouse pointer location, move/snap
that location to the nearest grid point. This
gives the user high accuracy with the mouse for
transforming the view or editing solids/matrices." }
            { see_also "rset" } }

    button $top.okB -relief raised -text "OK"\
	    -command "grid_control_ok $id $top"
    hoc_register_data $top.okB "OK"\
	    { { summary "Apply grid control panel settings to
the grid, then close the control panel." } }
    button $top.applyB -relief raised -text "Apply"\
	    -command "grid_control_apply $id"
    hoc_register_data $top.applyB "Apply"\
	    { { summary "Apply grid control panel settings to the grid." } }
    button $top.resetB -relief raised -text "Reset"\
	    -command "grid_control_reset $id"
    hoc_register_data $top.resetB "Reset"\
	    { { summary "Reset the control panel from the grid." } }
    button $top.autosizeB -relief raised -text "Autosize"\
	    -command "grid_control_autosize $id"
    hoc_register_data $top.autosizeB "Autosize"\
	    { { summary "Set the grid spacing according to the view
size. The number of ticks will be between 20 and 200.
The tick spacing will be a power of 10 in local units." } }
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"
    hoc_register_data $top.dismissB "Dismiss"\
	    { { summary "Dismiss/close the grid control panel." } }

    grid x $top.tickSpacingL x $top.majorSpacingL -in $top.gridFF1 \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid $top.hE $top.hMB -sticky nsew -in $top.hF
    grid columnconfigure $top.hF 0 -weight 1
    grid rowconfigure $top.hF 0 -weight 1
    grid $top.maj_hE -sticky nsew -in $top.maj_hF
    grid columnconfigure $top.maj_hF 0 -weight 1
    grid rowconfigure $top.maj_hF 0 -weight 1
    grid $top.hL $top.hF x $top.maj_hF -sticky nsew -in $top.gridFF1 \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid $top.vE $top.vMB -sticky nsew -in $top.vF
    grid columnconfigure $top.vF 0 -weight 1
    grid rowconfigure $top.vF 0 -weight 1
    grid $top.maj_vE -sticky nsew -in $top.maj_vF
    grid columnconfigure $top.maj_vF 0 -weight 1
    grid rowconfigure $top.maj_vF 0 -weight 1
    grid $top.vL $top.vF x $top.maj_vF -sticky nsew -in $top.gridFF1 \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid $top.squareGridCB - - - -in $top.gridFF1 \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid columnconfigure $top.gridFF1 1 -weight 1
    grid columnconfigure $top.gridFF1 3 -weight 1
    grid rowconfigure $top.gridFF1 1 -weight 1
    grid rowconfigure $top.gridFF1 2 -weight 1
    grid $top.gridFF1 -sticky nsew -in $top.gridF1 \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid columnconfigure $top.gridF1 0 -weight 1
    grid rowconfigure $top.gridF1 0 -weight 1
    
    grid $top.anchorL $top.anchorE -sticky nsew -in $top.anchorF
    grid columnconfigure $top.anchorF 1 -weight 1
    grid rowconfigure $top.anchorF 0 -weight 1
    grid $top.anchorF -sticky nsew -in $top.gridFF2 \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid columnconfigure $top.gridFF2 0 -weight 1
    grid rowconfigure $top.gridFF2 0 -weight 1
    grid $top.gridFF2 -sticky nsew -in $top.gridF2 -padx $grid_control($id,padx)
    grid columnconfigure $top.gridF2 0 -weight 1
    grid rowconfigure $top.gridF2 0 -weight 1

    grid $top.gridEffectsL x $top.drawCB x $top.snapCB x -sticky "ew" -in $top.gridFF3\
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid columnconfigure $top.gridFF3 0 -weight 0
    grid columnconfigure $top.gridFF3 1 -weight 1
    grid columnconfigure $top.gridFF3 3 -minsize 20
    grid columnconfigure $top.gridFF3 5 -weight 1
    grid $top.gridFF3 -sticky "ew" -in $top.gridF3 \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid columnconfigure $top.gridF3 0 -weight 1

    grid $top.okB $top.applyB x $top.resetB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF4
    grid columnconfigure $top.gridF4 2 -weight 1
    grid columnconfigure $top.gridF4 5 -weight 1

    grid $top.gridF1 -sticky nsew \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid $top.gridF2 -sticky nsew \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid $top.gridF3 -sticky "ew" \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid $top.gridF4 -sticky "ew" \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid columnconfigure $top 0 -weight 1
    grid rowconfigure $top 0 -weight 2
    grid rowconfigure $top 1 -weight 1

    if {$init_grid_vars} {
	grid_control_reset $id
	grid_control_autosize $id
	set grid_control($id,square) 1
    } else {
	grid_control_reset $id
    }
    set_grid_square $id

    place_near_mouse $top
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top }"
    wm title $top "Grid Control Panel ($id)"
}

proc grid_control_ok { id top } {
    grid_control_apply $id
    catch { destroy $top }
}

proc grid_control_apply { id } {
    global grid_control
    global mged_gui

    if {$grid_control($id,square)} {
	mged_apply $id "rset grid anchor $grid_control($id,anchor);\
		rset grid rh $grid_control($id,rh);\
		rset grid mrh $grid_control($id,mrh);\
		rset grid rv $grid_control($id,rh);\
		rset grid mrv $grid_control($id,mrh);\
		rset grid snap $grid_control($id,snap);\
		rset grid draw $grid_control($id,draw)"

	set grid_control($id,rv) $grid_control($id,rh)
	set grid_control($id,mrv) $grid_control($id,mrh)
    } else {
	mged_apply $id "rset grid anchor $grid_control($id,anchor);\
		rset grid rh $grid_control($id,rh);\
		rset grid mrh $grid_control($id,mrh);\
		rset grid rv $grid_control($id,rv);\
		rset grid mrv $grid_control($id,mrv);\
		rset grid snap $grid_control($id,snap);\
		rset grid draw $grid_control($id,draw)"
    }

    # update the main GUI
    set mged_gui($id,grid_draw) $grid_control($id,draw)
    set mged_gui($id,grid_snap) $grid_control($id,snap)
}

proc grid_control_reset { id } {
    global mged_gui
    global grid_control

    if ![winfo exists .$id.grid_control] {
	return
    }

    winset $mged_gui($id,active_dm)

    set grid_control($id,draw) [rset grid draw]
    set grid_control($id,snap) [rset grid snap]
    set grid_control($id,anchor) [rset grid anchor]
    set grid_control($id,rh) [eval format "%.5f" [rset grid rh]]
    set grid_control($id,mrh) [rset grid mrh]
    set grid_control($id,rv) [eval format "%.5f" [rset grid rv]]
    set grid_control($id,mrv) [rset grid mrv]

    if {$grid_control($id,rh) != $grid_control($id,rv) ||\
	$grid_control($id,mrh) != $grid_control($id,mrv)} {
	set grid_control($id,square) 0
	set_grid_square $id
    }

    set mged_gui($id,grid_draw) $grid_control($id,draw)
    set mged_gui($id,grid_snap) $grid_control($id,snap)
}

proc set_grid_square { id } {
    global grid_control

    set top .$id.grid_control
    if [winfo exists $top] {
	if {$grid_control($id,square)} {
	    $top.vE configure -textvar grid_control($id,rh)
	    $top.maj_vE configure -textvar grid_control($id,mrh)
	} else {
	    $top.vE configure -textvar grid_control($id,rv)
	    $top.maj_vE configure -textvar grid_control($id,mrv)
	}
    }
}

proc grid_control_update { sf } {
    global mged_players
    global grid_control
    global localunit

    foreach id $mged_players {
	if {[info exists grid_control($id,anchor)] &&\
		[llength $grid_control($id,anchor)] == 3} {
	    set x [lindex $grid_control($id,anchor) 0]
	    set y [lindex $grid_control($id,anchor) 1]
	    set z [lindex $grid_control($id,anchor) 2]

	    set x [expr $sf * $x]
	    set y [expr $sf * $y]
	    set z [expr $sf * $z]

	    set grid_control($id,anchor) "$x $y $z"
	}

	if [info exists grid_control($id,rh)] {
	    set grid_control($id,rh) [expr $sf * $grid_control($id,rh)]
	    set grid_control($id,rv) [expr $sf * $grid_control($id,rv)]
	}

	set top .$id.grid_control
	if [winfo exists $top] {
	    $top.tickSpacingL configure -text "Tick Spacing\n($localunit/tick)"
	}

	set top .$id.grid_spacing
	if [winfo exists $top] {
	    $top.tickSpacingL configure -text "Tick Spacing\n($localunit/tick)"
	}
    }
}

proc grid_autosize {} {
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

# Gives between 20 and 200 ticks in user units
    set lower [expr log10(20)]
    set upper [expr $lower+1]
    set s [expr log10([_mged_view size])]

    if {$s < $lower} {
	set val [expr pow(10, floor($s - $lower))]
    } elseif {$upper < $s} {
	set val [expr pow(10, ceil($s - $upper))]
    } else {
	set val 1.0
    }

    return $val
}

proc grid_spacing_autosize { id } {
    global mged_gui
    global grid_control_spacing
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    winset $mged_gui($id,active_dm)
    set val [grid_autosize]

    set grid_control_spacing($id,tick) $val
    set grid_control_spacing($id,ticksPerMajor) 10
}

proc grid_control_autosize { id } {
    global mged_gui
    global grid_control

    winset $mged_gui($id,active_dm)
    set val [grid_autosize]

    set grid_control($id,rh) $val
    set grid_control($id,rv) $val
    set grid_control($id,mrh) 10
    set grid_control($id,mrv) 10
}

proc grid_spacing_ok { id spacing_type top } {
    grid_spacing_apply $id $spacing_type
    catch { destroy $top }
}

proc grid_spacing_apply { id spacing_type } {
    global mged_gui
    global grid_control_spacing

    if {[opendb] == ""} {
	return
    }

    if {$spacing_type == "h"} {
	mged_apply $id "rset grid rh $grid_control_spacing($id,tick);\
		rset grid mrh $grid_control_spacing($id,ticksPerMajor)"
    } elseif {$spacing_type == "v"} {
	mged_apply $id "rset grid rv $grid_control_spacing($id,tick);\
		rset grid mrv $grid_control_spacing($id,ticksPerMajor)"
    } else {
	mged_apply $id "rset grid rh $grid_control_spacing($id,tick);\
		rset grid mrh $grid_control_spacing($id,ticksPerMajor);\
		rset grid rv $grid_control_spacing($id,tick);\
		rset grid mrv $grid_control_spacing($id,ticksPerMajor)"
    }
}

proc grid_spacing_reset { id spacing_type } {
    global mged_gui
    global grid_control_spacing

    winset $mged_gui($id,active_dm)

    if {$spacing_type == "v"} {
	set grid_control_spacing($id,tick) [eval format "%.5f" [rset grid rv]]
	set grid_control_spacing($id,ticksPerMajor) [eval format "%.5f" [rset grid mrv]]
    } else {
	set grid_control_spacing($id,tick) [eval format "%.5f" [rset grid rh]]
	set grid_control_spacing($id,ticksPerMajor) [eval format "%.5f" [rset grid mrh]]
    }
}

proc set_grid_spacing { id grid_unit apply } {
    global mged_gui
    global grid_control
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set_grid_res res res_major $grid_unit

    if {$apply} {
	mged_apply $id "rset grid rh $res; rset grid rv $res;\
		rset grid mrh $res_major; rset grid mrv $res_major"
    } else {
	set grid_control($id,rh) $res
	set grid_control($id,rv) $res
	set grid_control($id,mrh) $res_major
	set grid_control($id,mrv) $res_major
    }
}

proc set_grid_spacing_htick { id grid_unit } {
    global mged_gui
    global grid_control
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    # set res according to grid_unit
    set_grid_res res res_major $grid_unit

    # set the horizontal tick resolution
    set grid_control($id,rh) $res

    if {$grid_control($id,square)} {
	set grid_control($id,rv) $res
    }
}

proc set_grid_spacing_vtick { id grid_unit } {
    global mged_gui
    global grid_control
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    # set res according to grid_unit
    set_grid_res res res_major $grid_unit

    # set the vertical tick resolution
    set grid_control($id,rv) $res

    if {$grid_control($id,square)} {
	set grid_control($id,rh) $res
    }
}

proc set_grid_res { r rm grid_unit } {
    global base2local

    upvar $r res $rm res_major

    switch $grid_unit {
	micrometer {
	    set res [expr 0.001 * $base2local]
	    set res_major 10
	}
	millimeter {
	    set res $base2local
	    set res_major 10
	}
	centimeter {
	    set res [expr 10 * $base2local]
	    set res_major 10
	}
	decimeter {
	    set res [expr 100 * $base2local]
	    set res_major 10
	}
	meter {
	    set res [expr 1000 * $base2local]
	    set res_major 10
	}
	kilometer {
	    set res [expr 1000000 * $base2local]
	    set res_major 10
	}
	"1/10 inch" {
	    set res [expr 2.54 * $base2local]
	    set res_major 10
	}
	"1/4 inch" {
	    set res [expr 6.35 * $base2local]
	    set res_major 4
	}
	"1/2 inch" {
	    set res [expr 12.7 * $base2local]
	    set res_major 2
	}
	inch {
	    set res [expr 25.4 * $base2local]
	    set res_major 12
	}
	foot {
	    set res [expr 304.8 * $base2local]
	    set res_major 10
	}
	yard {
	    set res [expr 914.4 * $base2local]
	    set res_major 10
	}
	mile {
	    set res [expr 1609344 * $base2local]
	    set res_major 10
	}
    }

}
@


1.31
log
@*** empty log message ***
@
text
@@


1.30
log
@*- mods requested by Eric regarding consistency
   when using capitalization in the GUI
@
text
@d24 1
a24 1
    global tkPriv
d27 1
a27 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d131 1
a131 1
    global tkPriv
d134 1
a134 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d219 1
a219 1
    global tkPriv
d222 1
a222 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d653 1
a653 1
    global tkPriv
d656 1
a656 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d680 1
a680 1
    global tkPriv
d683 1
a683 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d753 1
a753 1
    global tkPriv
d756 1
a756 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d777 1
a777 1
    global tkPriv
d780 1
a780 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d799 1
a799 1
    global tkPriv
d802 1
a802 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.30.4.1
log
@sync branch with HEAD
@
text
@d24 1
a24 1
    global ::tk::Priv
d27 1
a27 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d131 1
a131 1
    global ::tk::Priv
d134 1
a134 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d219 1
a219 1
    global ::tk::Priv
d222 1
a222 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d653 1
a653 1
    global ::tk::Priv
d656 1
a656 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d680 1
a680 1
    global ::tk::Priv
d683 1
a683 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d753 1
a753 1
    global ::tk::Priv
d756 1
a756 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d777 1
a777 1
    global ::tk::Priv
d780 1
a780 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d799 1
a799 1
    global ::tk::Priv
d802 1
a802 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.30.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d24 1
a24 1
    variable ::tk::Priv
d27 1
a27 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d131 1
a131 1
    variable ::tk::Priv
d134 1
a134 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d219 1
a219 1
    variable ::tk::Priv
d222 1
a222 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d653 1
a653 1
    variable ::tk::Priv
d656 1
a656 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d680 1
a680 1
    variable ::tk::Priv
d683 1
a683 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d753 1
a753 1
    variable ::tk::Priv
d756 1
a756 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d777 1
a777 1
    variable ::tk::Priv
d780 1
a780 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d799 1
a799 1
    variable ::tk::Priv
d802 1
a802 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.30.6.2
log
@sync to HEAD...
@
text
@d24 1
a24 1
    global ::tk::Priv
d27 1
a27 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d131 1
a131 1
    global ::tk::Priv
d134 1
a134 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d219 1
a219 1
    global ::tk::Priv
d222 1
a222 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d653 1
a653 1
    global ::tk::Priv
d656 1
a656 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d680 1
a680 1
    global ::tk::Priv
d683 1
a683 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d753 1
a753 1
    global ::tk::Priv
d756 1
a756 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d777 1
a777 1
    global ::tk::Priv
d780 1
a780 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d799 1
a799 1
    global ::tk::Priv
d802 1
a802 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.29
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d77 1
a77 1
    button $top.okB -relief raised -text "Ok"\
d79 1
a79 1
    hoc_register_data $top.okB "Ok"\
d172 1
a172 1
    button $top.okB -relief raised -text "Ok"\
d175 1
a175 1
    hoc_register_data $top.okB "Ok"\
d434 1
a434 1
    button $top.okB -relief raised -text "Ok"\
d436 1
a436 1
    hoc_register_data $top.okB "Ok"\
@


1.28
log
@Remember grid settings.
@
text
@d24 1
d27 1
a27 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d131 1
d134 1
a134 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d219 1
d222 1
a222 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d653 2
d656 1
a656 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d680 1
d683 1
a683 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d753 1
d756 1
a756 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d777 1
d780 1
a780 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d799 1
d802 1
a802 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
@


1.27
log
@*- check for no database open
@
text
@d232 6
d521 7
a527 3
    grid_control_reset $id
    grid_control_autosize $id
    set grid_control($id,square) 1
@


1.27.2.1
log
@Remember grid settings.
@
text
@a231 6
    if ![info exists grid_control($id,rh)] {
	set init_grid_vars 1
    } else {
	set init_grid_vars 0
    }

d515 3
a517 7
    if {$init_grid_vars} {
	grid_control_reset $id
	grid_control_autosize $id
	set grid_control($id,square) 1
    } else {
	grid_control_reset $id
    }
@


1.27.2.2
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@a23 1
    global tkPriv
d26 1
a26 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a129 1
    global tkPriv
d132 1
a132 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a216 1
    global tkPriv
d219 1
a219 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a649 2
    global tkPriv

d651 1
a651 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a674 1
    global tkPriv
d677 1
a677 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a746 1
    global tkPriv
d749 1
a749 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a769 1
    global tkPriv
d772 1
a772 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a790 1
    global tkPriv
d793 1
a793 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
@


1.26
log
@*- capitalize units
@
text
@d25 6
d131 6
d218 6
d640 6
d666 6
d698 1
d701 4
d735 1
d738 6
d758 1
d761 6
d779 1
d781 6
@


1.25
log
@*- do autosize before popping up the grid
   control panel
@
text
@d276 1
a276 1
    $top.hMB.spacing add command -label "micrometer" -underline 4\
d278 1
a278 1
    $top.hMB.spacing add command -label "millimeter" -underline 2\
d280 1
a280 1
    $top.hMB.spacing add command -label "centimeter" -underline 0\
d282 1
a282 1
    $top.hMB.spacing add command -label "decimeter" -underline 0\
d284 1
a284 1
    $top.hMB.spacing add command -label "meter" -underline 0\
d286 1
a286 1
    $top.hMB.spacing add command -label "kilometer" -underline 0\
d289 1
a289 1
    $top.hMB.spacing add command -label "1/10 inch" -underline 0\
d291 1
a291 1
    $top.hMB.spacing add command -label "1/4 inch" -underline 2\
d293 1
a293 1
    $top.hMB.spacing add command -label "1/2 inch" -underline 2\
d295 1
a295 1
    $top.hMB.spacing add command -label "inch" -underline 0\
d297 1
a297 1
    $top.hMB.spacing add command -label "foot" -underline 0\
d299 1
a299 1
    $top.hMB.spacing add command -label "yard" -underline 0\
d301 1
a301 1
    $top.hMB.spacing add command -label "mile" -underline 0\
d321 1
a321 1
    $top.vMB.spacing add command -label "micrometer" -underline 4\
d323 1
a323 1
    $top.vMB.spacing add command -label "millimeter" -underline 2\
d325 1
a325 1
    $top.vMB.spacing add command -label "centimeter" -underline 0\
d327 1
a327 1
    $top.vMB.spacing add command -label "decimeter" -underline 0\
d329 1
a329 1
    $top.vMB.spacing add command -label "meter" -underline 0\
d331 1
a331 1
    $top.vMB.spacing add command -label "kilometer" -underline 0\
d334 1
a334 1
    $top.vMB.spacing add command -label "1/10 inch" -underline 0\
d336 1
a336 1
    $top.vMB.spacing add command -label "1/4 inch" -underline 2\
d338 1
a338 1
    $top.vMB.spacing add command -label "1/2 inch" -underline 2\
d340 1
a340 1
    $top.vMB.spacing add command -label "inch" -underline 0\
d342 1
a342 1
    $top.vMB.spacing add command -label "foot" -underline 0\
d344 1
a344 1
    $top.vMB.spacing add command -label "yard" -underline 0\
d346 1
a346 1
    $top.vMB.spacing add command -label "mile" -underline 0\
@


1.24
log
@*- add menubar and "Apply To" menu
@
text
@d498 1
@


1.23
log
@*- use place_near_mouse proc to position widgets near the mouse
@
text
@d202 1
d217 1
a217 1
    toplevel $top -screen $mged_gui($id,screen)
d219 19
d802 1
a802 1
}@


1.22
log
@*- cleanup variables
@
text
@d116 1
a116 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

a117 1
    wm geometry $top +$x+$y
d195 1
a195 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

a196 1
    wm geometry $top +$x+$y
d481 1
a481 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

a482 1
    wm geometry $top +$x+$y
@


1.21
log
@*- better resizing
@
text
@d21 1
a21 1
    global player_screen
d32 1
a32 1
    toplevel $top -screen $player_screen($id)
d126 1
a126 2
    global player_screen
    global mged_active_dm
d138 1
a138 1
    winset $mged_active_dm($id)
d141 1
a141 1
    toplevel $top -screen $player_screen($id)
d175 1
a175 1
	    -command "winset \$mged_active_dm($id);\
d209 1
a209 1
    global player_screen
a210 1
    global mged_grid
d224 1
a224 1
    toplevel $top -screen $player_screen($id)
d505 1
a505 1
    global mged_grid
d529 2
a530 2
    set mged_grid($id,draw) $grid_control($id,draw)
    set mged_grid($id,snap) $grid_control($id,snap)
d534 1
a534 2
    global mged_active_dm
    global mged_grid
d541 1
a541 1
    winset $mged_active_dm($id)
d557 2
a558 2
    set mged_grid($id,draw) $grid_control($id,draw)
    set mged_grid($id,snap) $grid_control($id,snap)
d630 1
a630 1
    global mged_active_dm
d633 1
a633 1
    winset $mged_active_dm($id)
d641 1
a641 1
    global mged_active_dm
d644 1
a644 1
    winset $mged_active_dm($id)
d676 1
a676 1
    global mged_active_dm
d679 1
a679 1
    winset $mged_active_dm($id)
@


1.20
log
@*- move entry labels beside entry widgets
@
text
@d423 1
a423 1
    grid $top.hE $top.hMB -sticky ew -in $top.hF
d425 2
a426 1
    grid $top.maj_hE -sticky ew -in $top.maj_hF
d428 2
a429 1
    grid $top.hL $top.hF x $top.maj_hF -sticky "ew" -in $top.gridFF1 \
d431 1
a431 1
    grid $top.vE $top.vMB -sticky ew -in $top.vF
d433 2
a434 1
    grid $top.maj_vE -sticky ew -in $top.maj_vF
d436 2
a437 1
    grid $top.vL $top.vF x $top.maj_vF -sticky "ew" -in $top.gridFF1 \
d443 3
a445 1
    grid $top.gridFF1 -sticky "ew" -in $top.gridF1 \
d448 1
a448 2
    grid $top.gridF1 -sticky "ew" \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
d450 1
a450 1
    grid $top.anchorL $top.anchorE -sticky "ew" -in $top.anchorF
d452 2
a453 1
    grid $top.anchorF -sticky "ew" -in $top.gridFF2 \
d456 2
a457 1
    grid $top.gridFF2 -sticky "ew" -in $top.gridF2 -padx $grid_control($id,padx)
d459 1
a459 1
    grid $top.gridF2 -sticky "ew" -padx $grid_control($id,padx) -pady $grid_control($id,pady)
a469 2
    grid $top.gridF3 -sticky "ew" \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
d474 7
a482 1

d484 2
@


1.19
log
@*- mods to grid_control_reset
@
text
@d158 1
a158 1
    label $top.anchorL -text "Anchor Point" -anchor w
d185 2
a186 3
    grid $top.anchorL -sticky "ew" -in $top.anchorF
    grid $top.anchorE -sticky "ew" -in $top.anchorF
    grid columnconfigure $top.anchorF 0 -weight 1
a241 1
    frame $top.anchorFF -relief sunken -bd 2
d364 1
a364 1
    label $top.anchorL -text "Anchor Point" -anchor w
d366 1
a366 1
    entry $top.anchorE -relief flat -width 12 -textvar grid_control($id,anchor)
a436 14

    grid $top.anchorL -sticky "ew" -in $top.anchorF
    grid $top.anchorE -sticky "ew" -in $top.anchorFF
    grid $top.anchorFF -sticky "ew" -in $top.anchorF
    grid $top.anchorF x x -sticky "ew" -in $top.gridFF2 \
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)
    grid columnconfigure $top.anchorF 0 -weight 1
    grid columnconfigure $top.anchorFF 0 -weight 1

    grid $top.gridEffectsL x $top.drawCB x $top.snapCB x -sticky "ew" -in $top.gridFF3\
	    -padx $grid_control($id,padx) -pady $grid_control($id,pady)

    grid $top.okB $top.applyB x $top.resetB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF4

a438 1
    grid columnconfigure $top.gridF1 0 -weight 1
d441 1
d445 4
d450 1
a450 2
    grid columnconfigure $top.gridFF2 1 -minsize 20
    grid columnconfigure $top.gridFF2 2 -weight 1
a451 1
    grid $top.gridFF2 -sticky "ew" -in $top.gridF2 -padx $grid_control($id,padx)
d454 2
a459 1
    grid columnconfigure $top.gridF3 0 -weight 1
d462 1
d466 1
a472 1
    grid columnconfigure $top 0 -minsize 400
@


1.18
log
@*- help messages
*- modified use of mged_apply
@
text
@d409 1
a409 1
	    -command "grid_control_reset $id $top"
d486 1
a486 1
    grid_control_reset $id $top
d534 1
a534 1
proc grid_control_reset { id top } {
d538 4
@


1.17
log
@*- fixed typo
@
text
@a36 3
    label $top.tickSpacingL -text "Tick Spacing\n($localunit/tick)"
    label $top.majorSpacingL -text "Major Spacing\n(ticks/major)"

d47 8
d56 7
d64 1
d70 6
d78 3
d83 2
d87 5
d94 2
d103 5
a107 5
    grid $top.applyB x $top.resetB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF2
    grid columnconfigure $top.gridF2 1 -weight 1
    grid columnconfigure $top.gridF2 1 -minsize 10
    grid columnconfigure $top.gridF2 4 -weight 1
    grid columnconfigure $top.gridF2 4 -minsize 10
d149 9
d159 1
d161 1
d163 7
d172 3
d178 2
d182 2
d192 3
a194 3
    grid $top.applyB x $top.resetB x $top.dismissB -sticky "ew" -in $top.gridF2
    grid columnconfigure $top.gridF2 1 -weight 1
    grid columnconfigure $top.gridF2 1 -weight 3
d254 4
d259 1
a259 5
    hoc_register_data $top.hL "Horizontal Spacing"\
	    { { summary "This row is for horizontal tick spacing
and horizontal major spacing. These two attributes
help determine how the grid is drawn and how snapping
is performed." } }
d261 1
a261 2
    hoc_register_data $top.hE "Horizontal Tick Spacing"\
	    { { summary "Enter the horizontal tick spacing here." } }
d265 2
a266 2
	    { { summary "Pops up a menu of distances to choose from for
horizontal tick spacing." } }
d269 1
a269 1
	    -command "set_grid_spacing_htick $id micrometer 0"
d271 1
a271 1
	    -command "set_grid_spacing_htick $id millimeter 0"
d273 1
a273 1
	    -command "set_grid_spacing_htick $id centimeter 0"
d275 1
a275 1
	    -command "set_grid_spacing_htick $id decimeter 0"
d277 1
a277 1
	    -command "set_grid_spacing_htick $id meter 0"
d279 1
a279 1
	    -command "set_grid_spacing_htick $id kilometer 0"
d282 1
a282 1
	    -command "set_grid_spacing_htick $id \"1/10 inch\" 0"
d284 1
a284 1
	    -command "set_grid_spacing_htick $id \"1/4 inch\" 0"
d286 1
a286 1
	    -command "set_grid_spacing_htick $id \"1/2 inch\" 0"
d288 1
a288 1
	    -command "set_grid_spacing_htick $id inch 0"
d290 1
a290 1
	    -command "set_grid_spacing_htick $id foot 0"
d292 1
a292 1
	    -command "set_grid_spacing_htick $id yard 0"
d294 1
a294 1
	    -command "set_grid_spacing_htick $id mile 0"
d299 4
d304 1
a304 5
    hoc_register_data $top.vL "Vertical Spacing"\
	    { { summary "This row is for vertical tick spacing
and vertical major spacing. These two attributes
help determine how the grid is drawn and how snapping
is performed." } }
d306 1
a306 2
    hoc_register_data $top.vE "Vertical Tick Spacing"\
	    { { summary "Enter the vertical tick spacing here." } }
d314 1
a314 1
	    -command "set_grid_spacing_vtick $id micrometer 0"
d316 1
a316 1
	    -command "set_grid_spacing_vtick $id millimeter 0"
d318 1
a318 1
	    -command "set_grid_spacing_vtick $id centimeter 0"
d320 1
a320 1
	    -command "set_grid_spacing_vtick $id decimeter 0"
d322 1
a322 1
	    -command "set_grid_spacing_vtick $id meter 0"
d324 1
a324 1
	    -command "set_grid_spacing_vtick $id kilometer 0"
d327 1
a327 1
	    -command "set_grid_spacing_vtick $id \"1/10 inch\" 0"
d329 1
a329 1
	    -command "set_grid_spacing_vtick $id \"1/4 inch\" 0"
d331 1
a331 1
	    -command "set_grid_spacing_vtick $id \"1/2 inch\" 0"
d333 1
a333 1
	    -command "set_grid_spacing_vtick $id inch 0"
d335 1
a335 1
	    -command "set_grid_spacing_vtick $id foot 0"
d337 1
a337 1
	    -command "set_grid_spacing_vtick $id yard 0"
d339 1
a339 1
	    -command "set_grid_spacing_vtick $id mile 0"
d349 17
a365 6
              { description "In square grid mode the horizontal and vertical
attributes are the same. For example, if the horizontal
tick spacing is 12 inches, then the vertical tick spacing
is 12 inches. And if the horizontal major spacing is 10
ticks, then the vertical major spacing is 10 ticks." } }

d367 1
a367 9
    hoc_register_data $top.anchorL "Grid Anchor Point"\
	    { { summary "The grid anchor point is a point such that
when the grid is drawn, one of its points must
be located exactly at the anchor point. The anchor
point is specified using model coordinates and local
units. The anchor point and tick spacings work
together to give the user accurate information about
where things are in the view as well as a high degree
of accuracy when snapping." } }
d369 1
a369 2
    hoc_register_data $top.anchorE "Grid Anchor Point"\
	    { { summary "Enter grid anchor point here." } }
d374 2
a375 2
it can be used for snapping. Note - the grid exists
whether it is drawn or not." } }
d382 4
a385 3
(geometry window). The regular spacing between the
points gives the user accurate visual cues regarding
dimension. This spacing can be set by the user." }
d392 5
a396 5
              { description "When snapping to grid the internal routines
that use the mouse pointer location, move/snap that
location to the nearest grid point. This gives the
user high accuracy with the mouse for transforming
the view or editing solids/matrices." }
d401 3
d508 8
a515 3
    mged_apply $id "rset grid anchor \$grid_control($id,anchor)"
    mged_apply $id "rset grid rh \$grid_control($id,rh)"
    mged_apply $id "rset grid mrh \$grid_control($id,mrh)"
a516 3
    if {$grid_control($id,square)} {
	mged_apply $id "rset grid rv \$grid_control($id,rh)"
	mged_apply $id "rset grid mrv \$grid_control($id,mrh)"
d520 7
a526 2
	mged_apply $id "rset grid rv \$grid_control($id,rv)"
	mged_apply $id "rset grid mrv \$grid_control($id,mrv)"
a528 3
    mged_apply $id "rset grid snap \$grid_control($id,snap)"
    mged_apply $id "rset grid draw \$grid_control($id,draw)"

d544 1
a544 1
    set grid_control($id,rh) [rset grid rh]
d546 1
a546 1
    set grid_control($id,rv) [rset grid rv]
d651 5
a656 1
    global mged_active_dm
a658 2
    winset $mged_active_dm($id)

d660 2
a661 2
	rset grid rh $grid_control_spacing($id,tick)
	rset grid mrh $grid_control_spacing($id,ticksPerMajor)
d663 2
a664 2
	rset grid rv $grid_control_spacing($id,tick)
	rset grid mrv $grid_control_spacing($id,ticksPerMajor)
d666 4
a669 4
	rset grid rh $grid_control_spacing($id,tick)
	rset grid mrh $grid_control_spacing($id,ticksPerMajor)
	rset grid rv $grid_control_spacing($id,tick)
	rset grid mrv $grid_control_spacing($id,ticksPerMajor)
a670 2

    catch { destroy .$id.grid_spacing }
d680 2
a681 2
	set grid_control_spacing($id,tick) [rset grid rv]
	set grid_control_spacing($id,ticksPerMajor) [rset grid mrv]
d683 2
a684 2
	set grid_control_spacing($id,tick) [rset grid rh]
	set grid_control_spacing($id,ticksPerMajor) [rset grid mrh]
d694 2
a695 4
	mged_apply $id "rset grid rh $res"
	mged_apply $id "rset grid rv $res"
	mged_apply $id "rset grid mrh $res_major"
	mged_apply $id "rset grid mrv $res_major"
d704 1
a704 1
proc set_grid_spacing_htick { id grid_unit apply } {
d707 2
a708 4
    if {$grid_control($id,square)} {
	set_grid_spacing $id $grid_unit $apply
	return
    }
d710 2
a711 1
    set_grid_res res res_major $grid_unit
d713 2
a714 4
    if {$apply} {
	mged_apply $id "rset grid rh $res"
    } else {
	set grid_control($id,rh) $res
d718 1
a718 1
proc set_grid_spacing_vtick { id grid_unit apply } {
d721 2
a722 4
    if {$grid_control($id,square)} {
	set_grid_spacing $id $grid_unit $apply
	return
    }
d724 2
a725 1
    set_grid_res res res_major $grid_unit
d727 2
a728 4
    if {$apply} {
	mged_apply $id "rset grid rv $res"
    } else {
	set grid_control($id,rv) $res
@


1.16
log
@*- add Ok button
@
text
@d218 1
a218 1
	    -command "set_grid_spacing_htick $id centimeter"
@


1.15
log
@*- add help messages
*- cleanup
@
text
@d168 3
d342 2
d363 2
a364 1
    grid x $top.tickSpacingL x $top.majorSpacingL -in $top.gridFF1 -padx 8 -pady 8
d369 2
a370 1
    grid $top.hL $top.hF x $top.maj_hF -sticky "ew" -in $top.gridFF1 -padx 8 -pady 8
d375 4
a378 2
    grid $top.vL $top.vF x $top.maj_vF -sticky "ew" -in $top.gridFF1 -padx 8 -pady 8
    grid $top.squareGridCB - - - -in $top.gridFF1 -padx 8 -pady 8
d383 2
a384 1
    grid $top.anchorF x x -sticky "ew" -in $top.gridFF2 -padx 8 -pady 8
d389 1
a389 1
	    -padx 8 -pady 8
d391 1
a391 1
    grid $top.applyB x $top.resetB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF4
d396 4
a399 2
    grid $top.gridFF1 -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
    grid $top.gridF1 -sticky "ew" -padx 8 -pady 8
a400 1

d405 2
a406 2
    grid $top.gridFF2 -sticky "ew" -in $top.gridF2 -padx 8
    grid $top.gridF2 -sticky "ew" -padx 8 -pady 8
d413 9
a421 2
    grid $top.gridFF3 -sticky "ew" -in $top.gridF3 -padx 8 -pady 8
    grid $top.gridF3 -sticky "ew" -padx 8 -pady 8
a422 4
    grid columnconfigure $top.gridF4 1 -weight 1
    grid columnconfigure $top.gridF4 4 -weight 1
    grid $top.gridF4 -sticky "ew" -padx 8 -pady 8

d437 5
@


1.14
log
@*-
@
text
@d187 3
d191 3
d196 5
d202 2
d206 4
a209 1
    menu $top.hMB.spacing -tearoff 0
d211 1
a211 1
	    -command "set_grid_spacing $id micrometer 0"
d213 1
a213 1
	    -command "set_grid_spacing $id millimeter 0"
d215 1
a215 1
	    -command "set_grid_spacing $id centimeter 0"
d217 1
a217 1
	    -command "set_grid_spacing $id decimeter 0"
d219 1
a219 1
	    -command "set_grid_spacing $id meter 0"
d221 1
a221 1
	    -command "set_grid_spacing $id kilometer 0"
d224 1
a224 1
	    -command "set_grid_spacing $id \"1/10 inch\" 0"
d226 1
a226 1
	    -command "set_grid_spacing $id \"1/4 inch\" 0"
d228 1
a228 1
	    -command "set_grid_spacing $id \"1/2 inch\" 0"
d230 1
a230 1
	    -command "set_grid_spacing $id inch 0"
d232 1
a232 1
	    -command "set_grid_spacing $id foot 0"
d234 1
a234 1
	    -command "set_grid_spacing $id yard 0"
d236 1
a236 1
	    -command "set_grid_spacing $id mile 0"
d238 2
d242 5
d248 2
d252 4
a255 1
    menu $top.vMB.spacing -tearoff 0
d257 1
a257 1
	    -command "set_grid_spacing $id micrometer 0"
d259 1
a259 1
	    -command "set_grid_spacing $id millimeter 0"
d261 1
a261 1
	    -command "set_grid_spacing $id centimeter 0"
d263 1
a263 1
	    -command "set_grid_spacing $id decimeter 0"
d265 1
a265 1
	    -command "set_grid_spacing $id meter 0"
d267 1
a267 1
	    -command "set_grid_spacing $id kilometer 0"
d270 1
a270 1
	    -command "set_grid_spacing $id \"1/10 inch\" 0"
d272 1
a272 1
	    -command "set_grid_spacing $id \"1/4 inch\" 0"
d274 1
a274 1
	    -command "set_grid_spacing $id \"1/2 inch\" 0"
d276 1
a276 1
	    -command "set_grid_spacing $id inch 0"
d278 1
a278 1
	    -command "set_grid_spacing $id foot 0"
d280 1
a280 1
	    -command "set_grid_spacing $id yard 0"
d282 1
a282 1
	    -command "set_grid_spacing $id mile 0"
d284 2
d290 7
d299 9
d309 2
d313 4
d320 7
d330 8
d341 2
d345 2
d349 4
d355 2
d545 1
d548 1
d556 1
d559 1
d606 52
d659 2
a660 1
    global grid_control
d717 1
a717 12
    if {$apply} {
	mged_apply $id "rset grid rh $res"
	mged_apply $id "rset grid rv $res"
	mged_apply $id "rset grid mrh $res_major"
	mged_apply $id "rset grid mrv $res_major"
    } else {
	set grid_control($id,rh) $res
	set grid_control($id,rv) $res
	set grid_control($id,mrh) $res_major
	set grid_control($id,mrv) $res_major
    }
}
@


1.13
log
@*- use separate global variable for main grid control GUI
*- remove color stuff
*- change Load to Reset
*- cleanup
@
text
@a355 2
    mged_apply $id "rset cs grid \$grid_control($id,color)"

a387 1
    set grid_control($id,color) [rset cs grid]
a396 2

    grid_control_set_colorMB $id $top
@


1.12
log
@*- remove part of GUI for setting color
@
text
@d22 1
a22 4
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
d42 2
a43 2
	entry $top.resE -relief sunken -width 12 -textvar grid_control_h($id)
	entry $top.maj_resE -relief sunken -width 12 -textvar grid_control_maj_h($id)
d46 2
a47 2
	entry $top.resE -relief sunken -width 12 -textvar grid_control_v($id)
	entry $top.maj_resE -relief sunken -width 12 -textvar grid_control_maj_v($id)
d50 2
a51 2
	entry $top.resE -relief sunken -width 12 -textvar grid_control_h($id)
	entry $top.maj_resE -relief sunken -width 12 -textvar grid_control_maj_h($id)
d59 2
a60 2
    button $top.loadB -relief raised -text "Load"\
	    -command "grid_spacing_load $id $spacing_type"
d62 1
a62 1
	    -command "grid_control_autosize $id"
d72 1
a72 1
    grid $top.applyB x $top.loadB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF2
d83 1
a83 1
    grid_spacing_load $id $spacing_type
d96 1
a97 1
    global grid_anchor
d107 4
d122 4
a125 3
	    -command "mged_apply $id \"set grid_anchor \\\$grid_control_anchor($id)\""
    button $top.loadB -relief raised -text "Load"\
	    -command "winset \$mged_active_dm($id); set grid_control_anchor($id) \$grid_anchor"
d136 1
a136 1
    grid $top.applyB x $top.loadB x $top.dismissB -sticky "ew" -in $top.gridF2
a153 88
proc do_grid_color { id } {
    global player_screen
    global mged_active_dm
    global grid_control_color

    set top .$id.grid_color

    if [winfo exists $top] {
	raise $top

	return
    }

    toplevel $top -screen $player_screen($id)

    frame $top.gridF1 -relief groove -bd 2
    frame $top.gridF2

    frame $top.colorF
    frame $top.colorFF -relief sunken -bd 2

    label $top.colorL -text "Color" -anchor w
    entry $top.colorE -relief flat -width 12 -textvar grid_control_color($id)
    menubutton $top.colorMB -relief raised -bd 2\
	    -menu $top.colorMB.m -indicatoron 1
    menu $top.colorMB.m -tearoff 0
    $top.colorMB.m add command -label black\
	    -command "set grid_control_color($id) \"0 0 0\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label white\
	    -command "set grid_control_color($id) \"255 255 255\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label red\
	    -command "set grid_control_color($id) \"255 0 0\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label green\
	    -command "set grid_control_color($id) \"0 255 0\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label blue\
	    -command "set grid_control_color($id) \"0 0 255\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label yellow\
	    -command "set grid_control_color($id) \"255 255 0\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label cyan\
	    -command "set grid_control_color($id) \"0 255 255\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label magenta\
	    -command "set grid_control_color($id) \"255 0 255\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add separator
    $top.colorMB.m add command -label "Color Tool..."\
	    -command "grid_control_choose_color $id $top"

    button $top.applyB -relief raised -text "Apply"\
	    -command "mged_apply $id \"cs_set grid \\\$grid_control_color($id)\""
    button $top.loadB -relief raised -text "Load"\
	    -command "winset \$mged_active_dm($id);\
	    set grid_control_color($id) \[cs_set grid\];\
	    grid_control_set_colorMB $id $top;"
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }" 

    grid $top.colorL -sticky "ew" -in $top.colorF
    grid $top.colorE $top.colorMB -sticky "ew" -in $top.colorFF
    grid $top.colorFF -sticky "ew" -in $top.colorF
    grid columnconfigure $top.colorFF 0 -weight 1
    grid columnconfigure $top.colorF 0 -weight 1

    grid $top.colorF -sticky "ew" -in $top.gridF1 -padx 8 -pady 8
    grid columnconfigure $top.gridF1 0 -weight 1

    grid $top.applyB x $top.loadB x $top.dismissB -sticky "ew" -in $top.gridF2
    grid columnconfigure $top.gridF2 1 -weight 1
    grid columnconfigure $top.gridF2 3 -weight 1

    grid $top.gridF1 -sticky "ew" -padx 8 -pady 8
    grid $top.gridF2 -sticky "ew" -padx 8 -pady 8

    grid columnconfigure $top 0 -weight 1

    bind $top.colorE <Return> "grid_control_set_colorMB $id $top; break"

    winset $mged_active_dm($id)
    set grid_control_color($id) [cs_set grid]
    grid_control_set_colorMB $id $top

    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top }"
    wm geometry $top +$x+$y
    wm title $top "Grid Color ($id)"
}

d156 2
a157 19
    global mged_grid_control
    global mged_grid_draw
    global mged_grid_snap
    global grid_control_draw
    global grid_control_snap
    global grid_control_square
    global grid_control_color
    global grid_control_anchor
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
    global grid_draw
    global grid_snap
    global grid anchor
    global grid_res_h
    global grid_res_v
    global grid_res_major_h
    global grid_res_major_v
a163 1
	set mged_grid_control($id) 1
a184 2
#    frame $top.colorF
#    frame $top.colorFF -relief sunken -bd 2
d190 1
a190 1
    entry $top.hE -relief flat -width 12 -textvar grid_control_h($id)
d221 1
a221 1
    entry $top.maj_hE -relief flat -width 12 -textvar grid_control_maj_h($id)
d224 1
a224 1
    entry $top.vE -relief flat -width 12 -textvar grid_control_v($id)
d255 1
a255 1
    entry $top.maj_vE -relief flat -width 12 -textvar grid_control_maj_v($id)
d258 1
a258 1
	    -offvalue 0 -onvalue 1 -variable grid_control_square($id)\
d262 1
a262 26
    entry $top.anchorE -relief flat -width 12 -textvar grid_control_anchor($id)

#    label $top.colorL -text "Color" -anchor w
#    entry $top.colorE -relief flat -width 12 -textvar grid_control_color($id)
#    menubutton $top.colorMB -relief raised -bd 2\
#	    -menu $top.colorMB.m -indicatoron 1
#    menu $top.colorMB.m -tearoff 0
#    $top.colorMB.m add command -label black\
#	    -command "set grid_control_color($id) \"0 0 0\"; grid_control_set_colorMB $id $top"
#    $top.colorMB.m add command -label white\
#	    -command "set grid_control_color($id) \"255 255 255\"; grid_control_set_colorMB $id $top"
#    $top.colorMB.m add command -label red\
#	    -command "set grid_control_color($id) \"255 0 0\"; grid_control_set_colorMB $id $top"
#    $top.colorMB.m add command -label green\
#	    -command "set grid_control_color($id) \"0 255 0\"; grid_control_set_colorMB $id $top"
#    $top.colorMB.m add command -label blue\
#	    -command "set grid_control_color($id) \"0 0 255\"; grid_control_set_colorMB $id $top"
#    $top.colorMB.m add command -label yellow\
#	    -command "set grid_control_color($id) \"255 255 0\"; grid_control_set_colorMB $id $top"
#    $top.colorMB.m add command -label cyan\
#	    -command "set grid_control_color($id) \"0 255 255\"; grid_control_set_colorMB $id $top"
#    $top.colorMB.m add command -label magenta\
#	    -command "set grid_control_color($id) \"255 0 255\"; grid_control_set_colorMB $id $top"
#    $top.colorMB.m add separator
#    $top.colorMB.m add command -label "Color Tool..."\
#	    -command "grid_control_choose_color $id $top"
d267 1
a267 1
	    -offvalue 0 -onvalue 1 -variable grid_control_draw($id)
d270 1
a270 1
	    -offvalue 0 -onvalue 1 -variable grid_control_snap($id)
d274 2
a275 2
    button $top.loadB -relief raised -text "Load"\
	    -command "grid_control_load $id $top"
d279 1
a279 1
	    -command "catch { destroy $top; set mged_grid_control($id) 0 }"
a296 4
#    grid $top.colorL -sticky "ew" -in $top.colorF
#    grid $top.colorE $top.colorMB -sticky "ew" -in $top.colorFF
#    grid $top.colorFF -sticky "ew" -in $top.colorF
#    grid $top.anchorF x $top.colorF -sticky "ew" -in $top.gridFF2 -padx 8 -pady 8
a299 2
#    grid columnconfigure $top.colorF 0 -weight 1
#    grid columnconfigure $top.colorFF 0 -weight 1
d304 1
a304 1
    grid $top.applyB x $top.loadB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF4
d335 2
a336 5
#    bind $top.colorE <Return> "grid_control_set_colorMB $id $top; break"

    grid_control_load $id $top
#    grid_control_set_colorMB $id $top
    set grid_control_square($id) 1
d343 1
a343 1
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top; set mged_grid_control($id) 0 }"
d348 3
a350 17
proc grid_control_choose_color { id parent } {
    set child color

    cadColorWidget dialog $parent $child\
	    -title "Grid Color"\
	    -initialcolor [$parent.colorMB cget -background]\
	    -ok "grid_color_ok $id $parent $parent.$child"\
	    -cancel "cadColorWidget_destroy $parent.$child"
}

proc grid_color_ok { id parent w } {
    global grid_control_color

    upvar #0 $w data

    $parent.colorMB configure -bg $data(finalColor)
    set grid_control_color($id) "$data(red) $data(green) $data(blue)"
d352 11
a362 45
    destroy $w
    unset data
}

proc grid_control_set_colorMB { id top } {
    global grid_control_color

    set_WidgetRGBColor $top.colorMB $grid_control_color($id)
}

proc grid_control_apply { id } {
    global mged_active_dm
    global grid_control_draw
    global grid_control_snap
    global grid_control_color
    global grid_control_anchor
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
    global grid_draw
    global mged_grid_draw
    global grid_snap
    global mged_grid_snap
    global grid_anchor
    global grid_res_h
    global grid_res_v
    global grid_res_major_h
    global grid_res_major_v
    global grid_control_square

#    winset $mged_active_dm($id)
    mged_apply $id "set grid_draw \$grid_control_draw($id)"
    mged_apply $id "set grid_snap \$grid_control_snap($id)"
    mged_apply $id "cs_set grid \$grid_control_color($id)"
    mged_apply $id "set grid_anchor \$grid_control_anchor($id)"

    mged_apply $id "set grid_res_h \$grid_control_h($id)"
    mged_apply $id "set grid_res_major_h \$grid_control_maj_h($id)"

    if {$grid_control_square($id)} {
	mged_apply $id "set grid_res_v \$grid_control_h($id)"
	mged_apply $id "set grid_res_major_v \$grid_control_maj_h($id)"
	mged_apply $id "set grid_control_v($id) \$grid_control_h($id)"
	mged_apply $id "set grid_control_maj_v($id) \$grid_control_maj_h($id)"
d364 2
a365 2
	mged_apply $id "set grid_res_v \$grid_control_v($id)"
	mged_apply $id "set grid_res_major_v \$grid_control_maj_v($id)"
d368 6
a373 2
    set mged_grid_draw($id) $grid_control_draw($id)
    set mged_grid_snap($id) $grid_control_snap($id)
d376 1
a376 1
proc grid_control_load { id top } {
d378 2
a379 18
    global grid_control_draw
    global grid_control_snap
    global grid_control_color
    global grid_control_anchor
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
    global grid_draw
    global mged_grid_draw
    global grid_snap
    global mged_grid_snap
    global grid_anchor
    global grid_res_h
    global grid_res_v
    global grid_res_major_h
    global grid_res_major_v
    global grid_control_square
a381 4
    set grid_control_draw($id) $grid_draw
    set grid_control_snap($id) $grid_snap
    set grid_control_color($id) [cs_set grid]
    set grid_control_anchor($id) $grid_anchor
d383 13
a395 6
    set grid_control_h($id) $grid_res_h
    set grid_control_maj_h($id) $grid_res_major_h

    if {!$grid_control_square($id)} {
	set grid_control_v($id) $grid_res_v
	set grid_control_maj_v($id) $grid_res_major_v
d398 2
a399 2
    set mged_grid_draw($id) $grid_control_draw($id)
    set mged_grid_snap($id) $grid_control_snap($id)
d405 1
a405 5
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
    global grid_control_square
d409 3
a411 3
	if {$grid_control_square($id)} {
	    $top.vE configure -textvar grid_control_h($id)
	    $top.maj_vE configure -textvar grid_control_maj_h($id)
d413 2
a414 2
	    $top.vE configure -textvar grid_control_v($id)
	    $top.maj_vE configure -textvar grid_control_maj_v($id)
d421 1
a421 3
    global grid_control_h
    global grid_control_v
    global grid_control_anchor
d425 5
a429 5
	if {[info exists grid_control_anchor($id)] &&\
		[llength $grid_control_anchor($id)] == 3} {
	    set x [lindex $grid_control_anchor($id) 0]
	    set y [lindex $grid_control_anchor($id) 1]
	    set z [lindex $grid_control_anchor($id) 2]
d435 1
a435 1
	    set grid_control_anchor($id) "$x $y $z"
d438 3
a440 3
	if [info exists grid_control_h($id)] {
	    set grid_control_h($id) [expr $sf * $grid_control_h($id)]
	    set grid_control_v($id) [expr $sf * $grid_control_v($id)]
d455 1
a455 9
proc grid_control_autosize { id } {
    global mged_display
    global mged_active_dm
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
    global base2local

d469 21
a489 4
    set grid_control_h($id) $val
    set grid_control_v($id) $val
    set grid_control_maj_h($id) 10
    set grid_control_maj_v($id) 10
d494 1
a494 9
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
    global grid_res_h
    global grid_res_v
    global grid_res_major_h
    global grid_res_major_v
    global grid_control_square
d499 2
a500 7
	set grid_control_square($id) 0
	set_grid_square $id
	set grid_control_v($id) $grid_res_v
	set grid_control_maj_v($id) $grid_res_major_v

	set grid_res_h $grid_control_h($id)
	set grid_res_major_h $grid_control_maj_h($id)
d502 2
a503 7
	set grid_control_square($id) 0
	set_grid_square $id
	set grid_control_h($id) $grid_res_h
	set grid_control_maj_h($id) $grid_res_major_h

	set grid_res_v $grid_control_v($id)
	set grid_res_major_v $grid_control_maj_v($id)
d505 4
a508 6
	set grid_res_h $grid_control_h($id)
	set grid_res_major_h $grid_control_maj_h($id)
	set grid_res_v $grid_control_h($id)
	set grid_res_major_v $grid_control_maj_h($id)
	set grid_control_v($id) $grid_control_h($id)
	set grid_control_maj_v($id) $grid_control_maj_h($id)
d514 1
a514 1
proc grid_spacing_load { id spacing_type } {
d516 1
a516 8
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
    global grid_res_h
    global grid_res_v
    global grid_res_major_h
    global grid_res_major_v
d520 3
a522 6
    if {$spacing_type == "h"} {
	set grid_control_h($id) $grid_res_h
	set grid_control_maj_h($id) $grid_res_major_h
    } elseif {$spacing_type == "v"} {
	set grid_control_v($id) $grid_res_v
	set grid_control_maj_v($id) $grid_res_major_v
d524 2
a525 2
	set grid_control_h($id) $grid_res_h
	set grid_control_maj_h($id) $grid_res_major_h
a529 10
#    global mged_active_dm
    global grid_control_h
    global grid_control_v
    global grid_control_maj_h
    global grid_control_maj_v
    global grid_res_h
    global grid_res_v
    global grid_res_major_h
    global grid_res_major_v
    global grid_control_square
d531 1
a532 2
#    winset $mged_active_dm($id)

d588 10
a597 10
    set grid_control_h($id) $res
    set grid_control_v($id) $res
    set grid_control_maj_h($id) $res_major
    set grid_control_maj_h($id) $res_major

    if { $apply } {
	mged_apply $id "set grid_res_h $res"
	mged_apply $id "set grid_res_v $res"
	mged_apply $id "set grid_res_major_h $res_major"
	mged_apply $id "set grid_res_major_v $res_major"
@


1.11
log
@*- added (id) to the title
@
text
@d1 1
a1 1
#
d18 1
a155 1
    global grid_color
d199 1
a199 1
	    -command "mged_apply $id \"set grid_color \\\$grid_control_color($id)\""
d202 1
a202 1
	    set grid_control_color($id) \$grid_color;\
d228 1
a228 1
    set grid_control_color($id) $grid_color
a255 1
    global grid_color
d289 2
a290 2
    frame $top.colorF
    frame $top.colorFF -relief sunken -bd 2
d370 24
a393 24
    label $top.colorL -text "Color" -anchor w
    entry $top.colorE -relief flat -width 12 -textvar grid_control_color($id)
    menubutton $top.colorMB -relief raised -bd 2\
	    -menu $top.colorMB.m -indicatoron 1
    menu $top.colorMB.m -tearoff 0
    $top.colorMB.m add command -label black\
	    -command "set grid_control_color($id) \"0 0 0\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label white\
	    -command "set grid_control_color($id) \"255 255 255\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label red\
	    -command "set grid_control_color($id) \"255 0 0\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label green\
	    -command "set grid_control_color($id) \"0 255 0\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label blue\
	    -command "set grid_control_color($id) \"0 0 255\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label yellow\
	    -command "set grid_control_color($id) \"255 255 0\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label cyan\
	    -command "set grid_control_color($id) \"0 255 255\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add command -label magenta\
	    -command "set grid_control_color($id) \"255 0 255\"; grid_control_set_colorMB $id $top"
    $top.colorMB.m add separator
    $top.colorMB.m add command -label "Color Tool..."\
	    -command "grid_control_choose_color $id $top"
d428 5
a432 4
    grid $top.colorL -sticky "ew" -in $top.colorF
    grid $top.colorE $top.colorMB -sticky "ew" -in $top.colorFF
    grid $top.colorFF -sticky "ew" -in $top.colorF
    grid $top.anchorF x $top.colorF -sticky "ew" -in $top.gridFF2 -padx 8 -pady 8
d435 2
a436 2
    grid columnconfigure $top.colorF 0 -weight 1
    grid columnconfigure $top.colorFF 0 -weight 1
d472 1
a472 1
    bind $top.colorE <Return> "grid_control_set_colorMB $id $top; break"
d475 1
a475 1
    grid_control_set_colorMB $id $top
a488 2
    global grid_control_color

a529 1
    global grid_color
d540 1
a540 1
    mged_apply $id "set grid_color \$grid_control_color($id)"
a573 1
    global grid_color
d584 1
a584 1
    set grid_control_color($id) $grid_color
@


1.10
log
@*** empty log message ***
@
text
@d93 1
a93 1
    wm title $top "Grid Spacing"
d148 1
a148 1
    wm title $top "Grid Anchor Point"
d237 1
a237 1
    wm title $top "Grid Color"
d485 1
a485 1
    wm title $top "Grid Control Panel"
@


1.9
log
@*- mods to reflect parameter change in cadColorWidget()
*- a little house cleaning
@
text
@a30 1

@


1.8
log
@*- append "break" to bindings to prevent further processing
@
text
@d489 1
a489 1
proc grid_control_choose_color { id top } {
d492 7
a498 4
    cadColorWidget dialog $top -title "Grid Color"\
	    -initialcolor [$top.colorMB cget -background]\
	    -ok "grid_color_ok $id $top $top.colorWidget"\
	    -cancel "grid_color_cancel $id $top.colorWidget"
d501 1
a501 1
proc grid_color_ok { id top w } {
d506 1
a506 1
    $top.colorMB configure -bg $data(finalColor)
a507 7

    destroy $w
    unset data
}

proc grid_color_cancel { id w } {
    upvar #0 $w data
@


1.7
log
@*- use new cadColorWidget
*- modified set_grid_spacing()
*- new procs: grid_color_ok and grid_color_cancel
@
text
@d226 1
a226 1
    bind $top.colorE <Return> "grid_control_set_colorMB $id $top"
d473 1
a473 1
    bind $top.colorE <Return> "grid_control_set_colorMB $id $top"
@


1.6
log
@*- add spacing menus to the horizontal/vertical entry widgets
@
text
@d303 1
a303 1
	    -command "set_grid_spacing $id micrometer"
d305 1
a305 1
	    -command "set_grid_spacing $id millimeter"
d307 1
a307 1
	    -command "set_grid_spacing $id centimeter"
d309 1
a309 1
	    -command "set_grid_spacing $id decimeter"
d311 1
a311 1
	    -command "set_grid_spacing $id meter"
d313 1
a313 1
	    -command "set_grid_spacing $id kilometer"
d316 1
a316 1
	    -command "set_grid_spacing $id \"1/10 inch\""
d318 1
a318 1
	    -command "set_grid_spacing $id \"1/4 inch\""
d320 1
a320 1
	    -command "set_grid_spacing $id \"1/2 inch\""
d322 1
a322 1
	    -command "set_grid_spacing $id inch"
d324 1
a324 1
	    -command "set_grid_spacing $id foot"
d326 1
a326 1
	    -command "set_grid_spacing $id yard"
d328 1
a328 1
	    -command "set_grid_spacing $id mile"
d337 1
a337 1
	    -command "set_grid_spacing $id micrometer"
d339 1
a339 1
	    -command "set_grid_spacing $id millimeter"
d341 1
a341 1
	    -command "set_grid_spacing $id centimeter"
d343 1
a343 1
	    -command "set_grid_spacing $id decimeter"
d345 1
a345 1
	    -command "set_grid_spacing $id meter"
d347 1
a347 1
	    -command "set_grid_spacing $id kilometer"
d350 1
a350 1
	    -command "set_grid_spacing $id \"1/10 inch\""
d352 1
a352 1
	    -command "set_grid_spacing $id \"1/4 inch\""
d354 1
a354 1
	    -command "set_grid_spacing $id \"1/2 inch\""
d356 1
a356 1
	    -command "set_grid_spacing $id inch"
d358 1
a358 1
	    -command "set_grid_spacing $id foot"
d360 1
a360 1
	    -command "set_grid_spacing $id yard"
d362 1
a362 1
	    -command "set_grid_spacing $id mile"
a489 1
    global player_screen
d492 10
a501 1
    set colors [chooseColor $top]
d503 6
a508 3
    if {[llength $colors] == 0} {
	return
    }
d510 2
a511 7
    if {[llength $colors] != 2} {
	mged_dialog .$id.gridDialog $player_screen($id)\
		"Error choosing a color!"\
		"Error choosing a color!"\
		"" 0 OK
	return
    }
d513 2
a514 2
    $top.colorMB configure -bg [lindex $colors 0]
    set grid_control_color($id) [lindex $colors 1]
d545 1
a545 1
    winset $mged_active_dm($id)
a675 5
# Gives between 10 and 100 ticks in metric units
#    set result [regexp "\(\[0-9\]+\)" [_mged_viewget size] match val]
#    set pow [expr [string length $val] - 1]
#    set val [expr pow(10,$pow-1) * $base2local]

a717 3
#	set save_v $grid_control_v($id)
#	set save_maj_v $grid_control_maj_v($id)

a722 2
#	set grid_control_v($id) $save_v
#	set grid_control_maj_v($id) $save_maj_v
d762 2
a763 2
proc set_grid_spacing { id grid_unit } {
    global mged_active_dm
d775 1
a775 1
    winset $mged_active_dm($id)
a831 5
    set grid_res_h $res
    set grid_res_v $res
    set grid_res_major_h $res_major
    set grid_res_major_v $res_major

d836 7
@


1.5
log
@*- mods to proc grid_control_autosize
*- proc set_grid_spacing that sets the grid resolution
	given some unit (i.e. meter, centimeter etc.)
@
text
@d284 5
d298 32
a329 2
    entry $top.hE -relief sunken -width 12 -textvar grid_control_h($id)
    entry $top.maj_hE -relief sunken -width 12 -textvar grid_control_maj_h($id)
d332 32
a363 2
    entry $top.vE -relief sunken -width 12 -textvar grid_control_v($id)
    entry $top.maj_vE -relief sunken -width 12 -textvar grid_control_maj_v($id)
d415 10
a424 2
    grid $top.hL $top.hE x $top.maj_hE -sticky "ew" -in $top.gridFF1 -padx 8 -pady 8
    grid $top.vL $top.vE x $top.maj_vE -sticky "ew" -in $top.gridFF1 -padx 8 -pady 8
d831 1
a831 1
	    set res [expr 63360 * $base2local]
@


1.4
log
@changed doit to mged_apply
@
text
@d40 2
a41 2
    label $top.tickSpacingL -text "Tick Spacing\n($localunit per tick)"
    label $top.majorSpacingL -text "Major Spacing\n(ticks per major)"
d289 2
a290 2
    label $top.tickSpacingL -text "Tick Spacing\n($localunit per tick)"
    label $top.majorSpacingL -text "Major Spacing\n(ticks per major)"
d404 1
a543 3
#	    set grid_control_v($id) $grid_control_h($id)
#	    set grid_control_maj_v($id) $grid_control_maj_h($id)

d578 1
a578 1
	    $top.tickSpacingL configure -text "Tick Spacing\n($localunit per tick)"
d583 1
a583 1
	    $top.tickSpacingL configure -text "Tick Spacing\n($localunit per tick)"
d595 1
d597 17
a613 2
    set result [regexp "^.*=\(.*\)" $mged_display($mged_active_dm($id),size) match size]
    set val [expr $size / 64]
d617 2
a618 2
    set grid_control_maj_h($id) 5
    set grid_control_maj_v($id) 5
d691 81
@


1.3
log
@name change --- reset to load
@
text
@d121 1
a121 1
	    -command "doit $id \"set grid_anchor \\\$grid_control_anchor($id)\""
d200 1
a200 1
	    -command "doit $id \"set grid_color \\\$grid_control_color($id)\""
d426 1
a426 1
	mged_dialog .$id.redDialog $player_screen($id)\
d466 4
a469 4
    doit $id "set grid_draw \$grid_control_draw($id)"
    doit $id "set grid_snap \$grid_control_snap($id)"
    doit $id "set grid_color \$grid_control_color($id)"
    doit $id "set grid_anchor \$grid_control_anchor($id)"
d471 2
a472 2
    doit $id "set grid_res_h \$grid_control_h($id)"
    doit $id "set grid_res_major_h \$grid_control_maj_h($id)"
d475 4
a478 4
	doit $id "set grid_res_v \$grid_control_h($id)"
	doit $id "set grid_res_major_v \$grid_control_maj_h($id)"
	doit $id "set grid_control_v($id) \$grid_control_h($id)"
	doit $id "set grid_control_maj_v($id) \$grid_control_maj_h($id)"
d480 2
a481 2
	doit $id "set grid_res_v \$grid_control_v($id)"
	doit $id "set grid_res_major_v \$grid_control_maj_v($id)"
@


1.2
log
@*- code to set mged_variables using the "doit" proc
@
text
@d62 2
a63 2
    button $top.resetB -relief raised -text "Reset"\
	    -command "grid_spacing_reset $id $spacing_type"
d75 1
a75 1
    grid $top.applyB x $top.resetB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF2
d86 1
a86 1
    grid_spacing_reset $id $spacing_type
d122 1
a122 1
    button $top.resetB -relief raised -text "Reset"\
d134 1
a134 1
    grid $top.applyB x $top.resetB x $top.dismissB -sticky "ew" -in $top.gridF2
d201 1
a201 1
    button $top.resetB -relief raised -text "Reset"\
d217 1
a217 1
    grid $top.applyB x $top.resetB x $top.dismissB -sticky "ew" -in $top.gridF2
d342 2
a343 2
    button $top.resetB -relief raised -text "Reset"\
	    -command "grid_control_reset $id $top"
d369 1
a369 1
    grid $top.applyB x $top.resetB $top.autosizeB x $top.dismissB -sticky "ew" -in $top.gridF4
d402 1
a402 1
    grid_control_reset $id $top
d488 1
a488 1
proc grid_control_reset { id top } {
d654 1
a654 1
proc grid_spacing_reset { id spacing_type } {
@


1.1
log
@Initial revision
@
text
@d4 2
a5 1
#       Widget(s) for setting grid options.
d7 3
a9 1
#       Author - Robert G. Parker
d11 7
d352 1
a352 1
    grid $top.squareGridCB - - - x -in $top.gridFF1 -padx 8 -pady 8
d466 4
a469 4
    set grid_draw $grid_control_draw($id)
    set grid_snap $grid_control_snap($id)
    set grid_color $grid_control_color($id)
    set grid_anchor $grid_control_anchor($id)
d471 2
a472 2
    set grid_res_h $grid_control_h($id)
    set grid_res_major_h $grid_control_maj_h($id)
d475 4
a478 4
	set grid_res_v $grid_control_h($id)
	set grid_res_major_v $grid_control_maj_h($id)
	set grid_control_v($id) $grid_control_h($id)
	set grid_control_maj_v($id) $grid_control_maj_h($id)
d480 2
a481 2
	set grid_res_v $grid_control_v($id)
	set grid_res_major_v $grid_control_maj_v($id)
@
