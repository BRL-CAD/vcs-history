head	1.19;
access;
symbols
	ansi-20040405-merged:1.16.4.1
	postmerge-20040405-ansi:1.18
	premerge-20040404-ansi:1.18
	postmerge-autoconf:1.18
	autoconf-freeze:1.17.6.1
	premerge-autoconf:1.18
	postmerge-20040315-windows:1.18
	premerge-20040315-windows:1.18
	windows-20040315-freeze:1.16.6.2
	autoconf-20031203:1.17
	autoconf-20031202:1.17
	autoconf-branch:1.17.0.6
	phong-branch:1.17.0.4
	photonmap-branch:1.17.0.2
	rel-6-1-DP:1.16
	windows-branch:1.16.0.6
	rel-6-0-2:1.16
	ansi-branch:1.16.0.4
	rel-6-0-1-branch:1.16.0.2
	hartley-6-0-post:1.16
	hartley-6-0-pre:1.16
	rel-6-0-1:1.16
	rel-6-0:1.15
	rel-5-4:1.11.2.2
	offsite-5-3-pre:1.13
	rel-5-3:1.11.2.2
	rel-5-2:1.11
	rel-5-1-branch:1.11.0.2
	rel-5-1:1.11
	rel-5-0:1.10
	rel-5-0-beta:1.7;
locks; strict;
comment	@# @;


1.19
date	2004.05.21.16.41.27;	author morrison;	state dead;
branches;
next	1.18;

1.18
date	2004.02.02.17.39.43;	author morrison;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.13.19.45.31;	author jra;	state Exp;
branches
	1.17.6.1;
next	1.16;

1.16
date	2002.06.21.17.49.31;	author butler;	state Exp;
branches
	1.16.4.1
	1.16.6.1;
next	1.15;

1.15
date	2002.03.01.21.18.37;	author butler;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.15.17.53.41;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.02.14.50.24;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	2000.12.22.00.35.15;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.14.04.42.17;	author butler;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	99.09.01.18.08.25;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	99.08.27.19.41.20;	author pjt;	state Exp;
branches;
next	1.8;

1.8
date	99.07.23.20.57.15;	author jra;	state Exp;
branches;
next	1.7;

1.7
date	99.02.10.15.21.13;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	99.01.19.22.31.29;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.12.30.22.08.09;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.06.15.19.28.24;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.06.09.18.02.16;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.05.18.19.36.03;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.05.07.15.31.28;	author bparker;	state Exp;
branches;
next	;

1.11.2.1
date	2000.12.22.00.02.28;	author bparker;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2001.02.02.14.46.53;	author bparker;	state Exp;
branches;
next	;

1.16.4.1
date	2004.03.17.21.23.11;	author morrison;	state Exp;
branches;
next	;

1.16.6.1
date	2002.09.26.23.04.18;	author morrison;	state Exp;
branches;
next	1.16.6.2;

1.16.6.2
date	2004.03.11.23.48.58;	author morrison;	state Exp;
branches;
next	;

1.17.6.1
date	2004.02.12.18.34.49;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.19
log
@moved to src/tclscripts/
@
text
@# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	Tcl/Tk interface to MGED's "make" command.

if ![info exists mged_default(solid_name_fmt)] {
    set mged_default(solid_name_fmt) "s@@"
}

proc make_dsp { id top } {
    global mged_gui
    global ::tk::Priv

	if { ![info exists mged_gui($id,solid_name)] } {
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
		return
	}

	if { [string length $mged_gui($id,solid_name)] < 1 } {
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
		return
	}

	set command {_mged_in $mged_gui($id,solid_name) dsp f \
		$mged_gui($id,dsp_file_name) $mged_gui($id,dsp_file_width) \
		$mged_gui($id,dsp_file_length) $mged_gui($id,dsp_smooth) ad \
		$mged_gui($id,dsp_cell_size) $mged_gui($id,dsp_elev_size)}

	set ret [catch $command result]
	if { $ret != 0 } {
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creaing DSP" $result "" 0 OK
	}

	catch {_mged_sed $mged_gui($id,solid_name)}
	catch "destroy $top"
    }

proc dsp_create { id } {
    global mged_gui
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

	set top .$id.make_dsp

	if [winfo exists $top] {
		raise $top
		return
	}

	toplevel $top -screen $mged_gui($id,screen)

	set dsp_dscr "The DSP solid is a set of displacements on a regularly spaced grid. These displacements\n\
		are often used to represent terrain, but may be used for any surface where such displacement data\n\
		is available. The displacements are expected to be unsigned short integers (2 bytes each), stored\n\
		in binary format in a file."

	label $top.nameL -text "Primitive name:"
	entry $top.nameE -relief sunken -bd 2 -textvar mged_gui($id,solid_name)
	set tmp_hoc [list [list summary $dsp_dscr] [list description "This is the BRL-CAD name for this solid (it must be unique)" ]]
	hoc_register_data $top.nameL "Primitive Name" $tmp_hoc
	hoc_register_data $top.nameE "Primitive Name" $tmp_hoc
	label $top.fileL -text "File name:"
	entry $top.fileE -relief sunken -bd 2 -textvar mged_gui($id,dsp_file_name)
	set tmp_hoc [list [list summary $dsp_dscr] [list description "This is the name of the file containing the displacements" ]]
	hoc_register_data $top.fileL "File Name" $tmp_hoc
	hoc_register_data $top.fileE "File Name" $tmp_hoc
	label $top.widthL -text "File width:"
	entry $top.widthE -relief sunken -bd 2 -textvar mged_gui($id,dsp_file_width)
	set tmp_hoc [list [list summary $dsp_dscr] [list description "This is the width of the displacement map (number of values per row)" ]]
	hoc_register_data $top.widthL "File width" $tmp_hoc
	hoc_register_data $top.widthE "File width" $tmp_hoc
	label $top.heightL -text "File length:"
	entry $top.heightE -relief sunken -bd 2 -textvar mged_gui($id,dsp_file_length)
	set tmp_hoc [list [list summary $dsp_dscr] [list description "This is the length of the displacement map (number of rows)" ]]
	hoc_register_data $top.heightL "File width" $tmp_hoc
	hoc_register_data $top.heightE "File width" $tmp_hoc
	set mged_gui($id,dsp_smooth) 0
	label $top.smoothL -text "Use smoothing"
	checkbutton $top.smoothC -bd 2 -variable mged_gui($id,dsp_smooth)	
	set tmp_hoc [list [list summary $dsp_dscr] [list description "If this is checked, the displacememt surface will be smoothed" ]]
	hoc_register_data $top.smoothL "Smoothing" $tmp_hoc
	hoc_register_data $top.smoothC "Smoothing" $tmp_hoc

	label $top.celldimL -text "Cell size:"
	entry $top.celldimE -relief sunken -bd 2 -textvar mged_gui($id,dsp_cell_size)
	set tmp_hoc [list [list summary $dsp_dscr] [list description "This is the size of a cell in the X and Y dimension"]]
	hoc_register_data $top.celldimL "Cell Size" $tmp_hoc
	hoc_register_data $top.celldimE "Cell Size" $tmp_hoc

	label $top.cellelevL -text "Unit Elevation:"
	entry $top.cellelevE -relief sunken -bd 2 -textvar mged_gui($id,dsp_elev_size)
	set tmp_hoc [list [list summary $dsp_dscr] [list description "This is the distance represented by each step in elevation"]]

	hoc_register_data $top.cellelevL "Unit Elevation" $tmp_hoc
	hoc_register_data $top.cellelevE "Unit Elevation" $tmp_hoc


	button $top.applyB -text Apply -command "make_dsp $id $top"
	button $top.autonameB -text "Autoname" -command "solid_auto_name $id"
	button $top.dismissB -text Dismiss -command "catch {destroy $top}"
	set tmp_hoc [list [list summary $dsp_dscr] [list description "Pressing this button will create the DSP solid and dismiss this window" ]]
	hoc_register_data $top.applyB "Apply" $tmp_hoc
	set tmp_hoc [list [list summary $dsp_dscr] [list description "Pressing this button will create a unique name for the DSP solid" ]]
	hoc_register_data $top.autonameB "Autoname" $tmp_hoc
	set tmp_hoc [list [list summary $dsp_dscr] [list description "Pressing this button will dismiss this window without creating a DSP solid" ]]
	hoc_register_data $top.dismissB "Dismiss" $tmp_hoc

	grid $top.nameL -sticky "w" -row 0 -column 0
	grid $top.nameE -sticky "ew" -row 0 -column 1
	grid $top.fileL -sticky "w" -row 1 -column 0
	grid $top.fileE -sticky "ew" -row 1 -column 1
	grid $top.widthL -sticky "w" -row 2 -column 0
	grid $top.widthE -sticky "ew" -row 2 -column 1
	grid $top.heightL -sticky "w" -row 3 -column 0
	grid $top.heightE -sticky "ew" -row 3 -column 1
	grid $top.smoothC -sticky "e" -row 4 -column 0
	grid $top.smoothL -sticky "w" -row 4 -column 1
	grid $top.celldimL -sticky "w" -row 5 -column 0
	grid $top.celldimE -sticky "ew" -row 5 -column 1
	grid $top.cellelevL -sticky "w" -row 6 -column 0
	grid $top.cellelevE -sticky "ew" -row 6 -column 1
	grid $top.applyB $top.autonameB $top.dismissB -sticky "ew" -padx 8 -pady 8

    bind $top <Return> "make_dsp $id $top; break"

    place_near_mouse $top
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top }"
    wm title $top "Enter Dsp Primitive Name"
}

proc init_solid_create { id type } {
    global mged_gui
    global ::tk::Priv

    if {[opendb] == ""} {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
		"No database has been opened!" info 0 OK
	return
    }

    set top .$id.make_solid

    if [winfo exists $top] {
	raise $top
	return
    }

    toplevel $top -screen $mged_gui($id,screen)

    frame $top.nameF 
    label $top.nameL -text "Enter name for $type:" -anchor w
    entry $top.nameE -relief sunken -bd 2 -textvar mged_gui($id,solid_name)
    button $top.applyB -relief raised -text "Apply"\
	    -command "make_solid $id $top $type"
    button $top.autonameB -relief raised -text "Autoname"\
	    -command "solid_auto_name $id"
    button $top.dismissB -relief raised -text "Dismiss"\
	    -command "catch { destroy $top }"

    grid $top.nameL -sticky "w" -in $top.nameF
    grid $top.nameE -sticky "ew" -in $top.nameF
    grid $top.nameF - - - - -sticky "ew" -padx 8 -pady 8
    grid columnconfigure $top.nameF 0 -weight 1
    grid $top.applyB x $top.autonameB x $top.dismissB -sticky "ew" -padx 8 -pady 8
    grid columnconfigure $top 1 -weight 1
    grid columnconfigure $top 3 -weight 1

    bind $top <Return> "make_solid $id $top $type; break"

    place_near_mouse $top
    wm protocol $top WM_DELETE_WINDOW "catch { destroy $top }"
    wm title $top "Enter Primitive Name"
}

proc solid_auto_name { id } {
    global mged_gui
    global mged_default
    global ::tk::Priv

    set result [catch {_mged_make_name $mged_default(solid_name_fmt)} name]

    if {$result == 0} {
	set mged_gui($id,solid_name) $name
    } else {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"Failed to automatically create a solid name!"\
		$name\
		"" 0 OK
	return
    }
}

proc make_solid { id w type } {
    global mged_gui
    global ::tk::Priv

    set result [catch {_mged_make $mged_gui($id,solid_name) $type} msg]

    if {$result == 0} {
	catch {_mged_sed $mged_gui($id,solid_name)}
	catch {destroy $w}
    } else {
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
		"Bad solid name!"\
		$msg\
		"" 0 OK
	return
    }
}
@


1.18
log
@update copyright to include span through 2003
@
text
@@


1.17
log
@*** empty log message ***
@
text
@d14 1
a14 1
#       This software is Copyright (C) 1998 by the United States Army
@


1.17.6.1
log
@merge from HEAD
@
text
@d14 1
a14 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.16
log
@Added extra parameters required to make DSP
@
text
@d26 1
a26 1
    global tkPriv
d29 1
a29 1
		cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d34 1
a34 1
		cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d45 1
a45 1
		cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "ERROR creaing DSP" $result "" 0 OK
d54 1
a54 1
    global tkPriv
d57 1
a57 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d152 1
a152 1
    global tkPriv
d155 1
a155 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
d197 1
a197 1
    global tkPriv
d204 1
a204 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
d214 1
a214 1
    global tkPriv
d222 1
a222 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.16.4.1
log
@sync branch with HEAD
@
text
@d14 1
a14 1
#       This software is Copyright (C) 1998-2004 by the United States Army
d26 1
a26 1
    global ::tk::Priv
d29 1
a29 1
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d34 1
a34 1
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d45 1
a45 1
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creaing DSP" $result "" 0 OK
d54 1
a54 1
    global ::tk::Priv
d57 1
a57 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d152 1
a152 1
    global ::tk::Priv
d155 1
a155 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d197 1
a197 1
    global ::tk::Priv
d204 1
a204 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d214 1
a214 1
    global ::tk::Priv
d222 1
a222 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.16.6.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d26 1
a26 1
    variable ::tk::Priv
d29 1
a29 1
		cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d34 1
a34 1
		cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d45 1
a45 1
		cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "ERROR creaing DSP" $result "" 0 OK
d54 1
a54 1
    variable ::tk::Priv
d57 1
a57 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d152 1
a152 1
    variable ::tk::Priv
d155 1
a155 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d197 1
a197 1
    variable ::tk::Priv
d204 1
a204 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
d214 1
a214 1
    variable ::tk::Priv
d222 1
a222 1
	cad_dialog $Priv(cad_dialog) $mged_gui($id,screen)\
@


1.16.6.2
log
@sync to HEAD...
@
text
@d14 1
a14 1
#       This software is Copyright (C) 1998-2004 by the United States Army
d26 1
a26 1
    global ::tk::Priv
d29 1
a29 1
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d34 1
a34 1
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d45 1
a45 1
		cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "ERROR creaing DSP" $result "" 0 OK
d54 1
a54 1
    global ::tk::Priv
d57 1
a57 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d152 1
a152 1
    global ::tk::Priv
d155 1
a155 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen) "No database." \
d197 1
a197 1
    global ::tk::Priv
d204 1
a204 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
d214 1
a214 1
    global ::tk::Priv
d222 1
a222 1
	cad_dialog $::tk::Priv(cad_dialog) $mged_gui($id,screen)\
@


1.15
log
@Corrected typo
@
text
@d38 6
a43 1
	set ret [catch {_mged_in $mged_gui($id,solid_name) dsp $mged_gui($id,dsp_file_name) $mged_gui($id,dsp_file_width) $mged_gui($id,dsp_file_length) $mged_gui($id,dsp_smooth) $mged_gui($id,dsp_cell_size) $mged_gui($id,dsp_elev_size)} result]
@


1.14
log
@*- mods to warn user if database is not open
@
text
@d40 1
a40 1
		cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "ERROR creaing DSP" $reslult "" 0 OK
@


1.13
log
@*- change solid to primitive
@
text
@d48 8
a55 1
	global mged_gui
@


1.12
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d64 1
a64 1
	label $top.nameL -text "Solid name:"
d67 2
a68 2
	hoc_register_data $top.nameL "Solid Name" $tmp_hoc
	hoc_register_data $top.nameE "Solid Name" $tmp_hoc
d135 1
a135 1
    wm title $top "Enter Dsp Solid Name"
d179 1
a179 1
    wm title $top "Enter Solid Name"
@


1.11
log
@Changes to support more arguments to the DSP
@
text
@d25 2
a26 1
	global mged_gui
d29 1
a29 1
		cad_dialog .$id.solidDialog $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d34 1
a34 1
		cad_dialog .$id.solidDialog $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d40 1
a40 1
		cad_dialog .$id.solidDialog $mged_gui($id,screen) "ERROR creaing DSP" $reslult "" 0 OK
d140 1
d143 1
a143 1
	cad_dialog .$id.uncool $mged_gui($id,screen) "No database." \
d185 1
d192 1
a192 1
	cad_dialog .$id.solidDialog $mged_gui($id,screen)\
d202 1
d210 1
a210 1
	cad_dialog .$id.solidDialog $mged_gui($id,screen)\
@


1.11.2.1
log
@Use tkPriv(cad_dialog) for dialog name.
@
text
@d25 1
a25 2
    global mged_gui
    global tkPriv
d28 1
a28 1
		cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d33 1
a33 1
		cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "ERROR creating DSP" "No solid name provided!!!!" "" 0 OK
d39 1
a39 1
		cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "ERROR creaing DSP" $reslult "" 0 OK
a138 1
    global tkPriv
d141 1
a141 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen) "No database." \
a182 1
    global tkPriv
d189 1
a189 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
a198 1
    global tkPriv
d206 1
a206 1
	cad_dialog $tkPriv(cad_dialog) $mged_gui($id,screen)\
@


1.11.2.2
log
@*- change solid to primitive
@
text
@d64 1
a64 1
	label $top.nameL -text "Primitive name:"
d67 2
a68 2
	hoc_register_data $top.nameL "Primitive Name" $tmp_hoc
	hoc_register_data $top.nameE "Primitive Name" $tmp_hoc
d135 1
a135 1
    wm title $top "Enter Dsp Primitive Name"
d179 1
a179 1
    wm title $top "Enter Primitive Name"
@


1.10
log
@*- check for no database open
@
text
@d37 1
a37 1
	set ret [catch {_mged_in $mged_gui($id,solid_name) dsp $mged_gui($id,dsp_file_name) $mged_gui($id,dsp_file_width) $mged_gui($id,dsp_file_length) $mged_gui($id,dsp_smooth) } result]
d44 1
a44 1
}
d90 14
d124 4
@


1.9
log
@Changed the template for autonaming solids in Create->solid
@
text
@d122 6
@


1.8
log
@Added DSP solid to create menu
@
text
@d21 1
a21 1
    set mged_default(solid_name_fmt) "default_name"
@


1.7
log
@*- use place_near_mouse proc to position widgets near the mouse
@
text
@d24 95
@


1.6
log
@*- cleanup variables
@
text
@d56 1
a56 4
    set pxy [winfo pointerxy $top]
    set x [lindex $pxy 0]
    set y [lindex $pxy 1]

a57 1
    wm geometry $top +$x+$y
@


1.5
log
@*- use catch around call to _mged_sed
@
text
@d20 2
a21 2
if ![info exists mged_solid_name_fmt] {
    set mged_solid_name_fmt "default_name"
d25 1
a25 1
    global player_screen
d34 1
a34 1
    toplevel $top -screen $player_screen($id)
d38 1
a38 1
    entry $top.nameE -relief sunken -bd 2 -textvar mged_solid_name($id)
d66 2
a67 2
    global mged_solid_name
    global mged_solid_name_fmt
d69 1
a69 1
    set result [catch {_mged_make_name $mged_solid_name_fmt} name]
d72 1
a72 1
	set mged_solid_name($id) $name
d74 1
a74 1
	cad_dialog .$id.solidDialog $player_screen($id)\
d83 1
a83 2
    global player_screen
    global mged_solid_name
d85 1
a85 1
    set result [catch {_mged_make $mged_solid_name($id) $type} msg]
d88 1
a88 1
	catch {_mged_sed $mged_solid_name($id)}
d91 1
a91 1
	cad_dialog .$id.solidDialog $player_screen($id)\
@


1.4
log
@*- append "break" to bindings to prevent further processing
@
text
@d89 1
a89 1
	_mged_sed $mged_solid_name($id)
@


1.3
log
@*- use cad_dialog instead of mged_dialog
@
text
@d54 1
a54 1
    bind $top <Return> "make_solid $id $top $type"
@


1.2
log
@*- mods for pjt demo
@
text
@d74 1
a74 1
	mged_dialog .$id.solidDialog $player_screen($id)\
d92 1
a92 1
	mged_dialog .$id.solidDialog $player_screen($id)\
@


1.1
log
@Tcl/Tk interface to MGED's "make" command.
@
text
@d89 1
@
