head	1.7;
access;
symbols
	ansi-20040405-merged:1.5.4.1
	postmerge-20040405-ansi:1.6
	premerge-20040404-ansi:1.6
	postmerge-autoconf:1.6
	autoconf-freeze:1.5.12.1
	premerge-autoconf:1.6
	postmerge-20040315-windows:1.6
	premerge-20040315-windows:1.6
	windows-20040315-freeze:1.5.6.1
	autoconf-20031203:1.5
	autoconf-20031202:1.5
	autoconf-branch:1.5.0.12
	phong-branch:1.5.0.10
	photonmap-branch:1.5.0.8
	rel-6-1-DP:1.5
	windows-branch:1.5.0.6
	rel-6-0-2:1.5
	ansi-branch:1.5.0.4
	rel-6-0-1-branch:1.5.0.2
	hartley-6-0-post:1.5
	hartley-6-0-pre:1.5
	rel-6-0-1:1.5
	rel-6-0:1.5
	rel-5-4:1.2.2.4
	offsite-5-3-pre:1.5
	rel-5-3:1.2.2.4
	rel-5-2:1.2.2.1
	rel-5-1-branch:1.2.0.2;
locks; strict;
comment	@# @;


1.7
date	2004.05.21.16.41.20;	author morrison;	state dead;
branches;
next	1.6;

1.6
date	2004.02.02.17.39.43;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.01.17.51.28;	author bparker;	state Exp;
branches
	1.5.4.1
	1.5.6.1
	1.5.12.1;
next	1.4;

1.4
date	2001.01.30.15.14.33;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.08.22.03.02;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.16.14.25.10;	author bparker;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.08.09.22.07.29;	author bparker;	state Exp;
branches;
next	;

1.2.2.1
date	2000.08.16.16.56.02;	author bparker;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.01.29.23.16.15;	author bparker;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2001.01.30.14.58.39;	author bparker;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2001.02.01.17.50.53;	author bparker;	state Exp;
branches;
next	;

1.5.4.1
date	2004.03.17.21.23.07;	author morrison;	state Exp;
branches;
next	;

1.5.6.1
date	2004.03.11.23.48.52;	author morrison;	state Exp;
branches;
next	;

1.5.12.1
date	2004.02.12.18.34.48;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.7
log
@moved to src/tclscripts/
@
text
@##                 L E G E N D . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#       Widget for displaying colors and their corresponding values.
#

option add *Legend.height 30 widgetDefault

class cadwidgets::Legend {
    inherit itk::Widget

    constructor {args} {}
    destructor {}

    itk_option define -range range Range {0.0 1.0}
    itk_option define -rgbRange rgbRange RgbRange {{255 255 255} {255 0 0}}
    itk_option define -slots slots Slots 10
    itk_option define -colorFunc colorFunc ColorFunc ""

    public method drawToCanvas {c x y w h tags}
    public method update {}
    public method getColor {val}
    public method rampRGB {val}
    public method postscript {args}
    public method rgbValid {r g b}

    private variable low 0.0
    private variable high 1.0
    private variable dv 1.0
    private variable invDv 1.0

    # colors to ramp between
    private variable r1 255
    private variable g1 255
    private variable b1 255
    private variable r2 255
    private variable g2 0
    private variable b2 0

    # ranges for r, g and b
    private variable dR 0
    private variable dG -255
    private variable dB -255

    # used for clamping
    private variable lowR 255
    private variable lowG 0
    private variable lowB 0
    private variable highR 255
    private variable highG 255
    private variable highB 255

    # x and y offsets for drawing legend
    private variable xoff 20
    private variable yoff 15
}

configbody cadwidgets::Legend::range {
    if {[llength $itk_option(-range)] != 2} {
	error "range: must specify min and max"
    }

    set min [lindex $itk_option(-range) 0]
    set max [lindex $itk_option(-range) 1]

    if {![string is double $min]} {
	error "range: bad value - $min"
    }

    if {![string is double $max]} {
	error "range: bad value - $max"
    }

    if {$max <= $min} {
	error "range: max <= min not allowed"
    }

    set low $min
    set high $max
    set dv [expr {$high - $low}]
    set invDv [expr {1.0 / $dv}]

    cadwidgets::Legend::update
}

configbody cadwidgets::Legend::rgbRange {
    if {[llength $itk_option(-rgbRange)] != 2} {
	error "rgbRange: must specify two RGB's"
    }

    set rgb1 [lindex $itk_option(-rgbRange) 0]
    set rgb2 [lindex $itk_option(-rgbRange) 1]

    # must have three values for each color
    if {[llength $rgb1] != 3} {
	error "rgbRange: must specify R, G, and B for each color"
    }

    if {[llength $rgb2] != 3} {
	error "rgbRange: must specify R, G, and B for each color"
    }

    if {![eval cadwidgets::Legend::rgbValid $rgb1]} {
	error "Improper color specification - $rgb1"
    }

    if {![eval cadwidgets::Legend::rgbValid $rgb2]} {
	error "Improper color specification - $rgb2"
    }

    set r1 [lindex $rgb1 0]
    set g1 [lindex $rgb1 1]
    set b1 [lindex $rgb1 2]
    set r2 [lindex $rgb2 0]
    set g2 [lindex $rgb2 1]
    set b2 [lindex $rgb2 2]

    set dR [expr $r2 - $r1]
    set dG [expr $g2 - $g1]
    set dB [expr $b2 - $b1]

    if {$r1 <= $r2} {
	set lowR $r1
	set highR $r2
    } else {
	set lowR $r2
	set highR $r1
    }

    if {$g1 <= $g2} {
	set lowG $g1
	set highG $g2
    } else {
	set lowG $g2
	set highG $g1
    }

    if {$b1 <= $b2} {
	set lowB $b1
	set highB $b2
    } else {
	set lowB $b2
	set highB $b1
    }

    cadwidgets::Legend::update
}

configbody cadwidgets::Legend::slots {
    if {$itk_option(-slots) < 2} {
	error "Must be 2 or greater"
    }

    cadwidgets::Legend::update
}

body cadwidgets::Legend::constructor {args} {
    itk_component add canvas {
	::canvas $itk_interior.canvas
    } {
	usual
	keep -width -height
    }

    eval itk_initialize $args
    ::bind $itk_component(canvas) <Configure> [code $this update]
    pack $itk_component(canvas) -expand yes -fill both
}

body cadwidgets::Legend::destructor {} {
}

body cadwidgets::Legend::drawToCanvas {c x y w h tags} {
    # calculate slot increment
    set si [expr {$w / double($itk_option(-slots))}]

    # calculate value increment
    set vi [expr {$dv / double($itk_option(-slots) - 1)}]

    set y1 $y
    set y2 [expr {$h + $y1}]
    for {set i 0} {$i < $itk_option(-slots)} {incr i} {
	set x1 [expr {int($i * $si) + $x}]
	set x2 [expr {int(($i + 1) * $si) + $x}]
	set val [expr {$vi * $i + $low}]
	if {$itk_option(-colorFunc) == ""} {
	    set rgb [eval format "#%.2x%.2x%.2x" [rampRGB $val]]
	} else {
	    set rgb [eval format "#%.2x%.2x%.2x" [eval $itk_option(-colorFunc) $low $high $val]]
	}
	$c create rectangle $x1 $y1 $x2 $y2 \
		-outline "" -fill $rgb -tags $tags
    }
    $c create text $x $y -text $low -anchor s -tags $tags
    $c create text [expr {$w + $x}] $y -text $high -anchor s -tags $tags

    return
}

body cadwidgets::Legend::update {} {
    $itk_component(canvas) delete all
    set w [expr {[winfo width $itk_component(canvas)] - (2 * $xoff)}]
    set h [expr {[winfo height $itk_component(canvas)] - $yoff}]
    drawToCanvas $itk_component(canvas) $xoff $yoff $w $h legend
}

body cadwidgets::Legend::getColor {val} {
    if {$itk_option(-colorFunc) != ""} {
	return [$itk_option(-colorFunc) $low $high $val]
    } else {
	return [rampRGB $val]
    }
}

body cadwidgets::Legend::rampRGB {val} {
    set sv [expr {($val - $low) * $invDv}]
    set r [expr {int($r1 + $sv * $dR)}]
    set g [expr {int($g1 + $sv * $dG)}]
    set b [expr {int($b1 + $sv * $dB)}]

    # clamp r, g and b
    if {$r < $lowR} {
	set r $lowR
    } elseif {$highR < $r} {
	set r $highR
    }

    if {$g < $lowG} {
	set g $lowG
    } elseif {$highG < $g} {
	set g $highG
    }

    if {$b < $lowB} {
	set b $lowB
    } elseif {$highB < $b} {
	set b $highB
    }

    return "$r $g $b"
}

body cadwidgets::Legend::postscript {args} {
    eval $itk_component(canvas) postscript $args
}

body cadwidgets::Legend::rgbValid {r g b} {
    if {![string is integer $r]} {
	    return 0
    }
    if {![string is integer $g]} {
	    return 0
    }
    if {![string is integer $b]} {
	    return 0
    }
    if {$r < 0 || 255 < $r} {
	return 0
    }
    if {$g < 0 || 255 < $g} {
	return 0
    }
    if {$b < 0 || 255 < $b} {
	return 0
    }

    return 1
}
@


1.6
log
@update copyright to include span through 2003
@
text
@@


1.5
log
@OOPS - putting back the x, y arguments to drawToCanvas
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998 by the United States Army
@


1.5.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.5.6.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.5.12.1
log
@merge from HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.4
log
@*- add variables to keep track of x and y offsets
*- add configbody for -slots
*- mods to drawToCanvas
@
text
@d36 1
a36 1
    public method drawToCanvas {c w h tags}
d189 1
a189 1
body cadwidgets::Legend::drawToCanvas {c w h tags} {
d196 1
a196 1
    set y1 $yoff
d199 2
a200 2
	set x1 [expr {int($i * $si) + $xoff}]
	set x2 [expr {int(($i + 1) * $si) + $xoff}]
d210 2
a211 2
    $c create text $xoff $yoff -text $low -anchor s -tags $tags
    $c create text [expr {$w + $xoff}] $yoff -text $high -anchor s -tags $tags
d220 1
a220 1
    drawToCanvas $itk_component(canvas) $w $h legend
@


1.3
log
@Add method rgbValid.
Fix typo in rgbRange configbody.
@
text
@d36 1
a36 1
    public method drawToCanvas {c x y w h tags}
d68 4
d165 8
d189 2
a190 1
body cadwidgets::Legend::drawToCanvas {c xoff yoff w h tags} {
d192 2
d201 1
a201 1
	set val [expr {$vi * $i}]
a216 3
    set xoff 20
    set yoff 15

d220 1
a220 1
    drawToCanvas $itk_component(canvas) $xoff $yoff $w $h legend
@


1.2
log
@Add methods: postscript, drawToCanvas
@
text
@d41 1
d111 1
a111 1
    if {[llength $rgb1] != 3} {
d115 8
d249 24
a272 1
}@


1.2.2.1
log
@Adding classes from main branch of source tree.
@
text
@@


1.2.2.2
log
@*- Add private vars to keep track of x and y offsets
*- Add configbody for -slots
*- mods to drawToCanvas
@
text
@d36 1
a36 1
    public method drawToCanvas {c w h tags}
a66 4

    # x and y offsets for drawing legend
    private variable xoff 20
    private variable yoff 15
d110 1
a110 1
    if {[llength $rgb2] != 3} {
a151 8
configbody cadwidgets::Legend::slots {
    if {$itk_option(-slots) < 2} {
	error "Must be 2 or greater"
    }

    cadwidgets::Legend::update
}

d168 1
a168 2
body cadwidgets::Legend::drawToCanvas {c w h tags} {
    # calculate slot increment
a169 2

    # calculate value increment
d177 1
a177 1
	set val [expr {$vi * $i + $low}]
d193 3
d199 1
a199 1
    drawToCanvas $itk_component(canvas) $w $h legend
d240 1
a240 1
}
@


1.2.2.3
log
@*- add rgbValid
@
text
@a40 1
    public method rgbValid {r g b}
a117 8
    if {![eval cadwidgets::Legend::rgbValid $rgb1]} {
	error "Improper color specification - $rgb1"
    }

    if {![eval cadwidgets::Legend::rgbValid $rgb2]} {
	error "Improper color specification - $rgb2"
    }

a251 23
}

body cadwidgets::Legend::rgbValid {r g b} {
    if {![string is integer $r]} {
	    return 0
    }
    if {![string is integer $g]} {
	    return 0
    }
    if {![string is integer $b]} {
	    return 0
    }
    if {$r < 0 || 255 < $r} {
	return 0
    }
    if {$g < 0 || 255 < $g} {
	return 0
    }
    if {$b < 0 || 255 < $b} {
	return 0
    }

    return 1
@


1.2.2.4
log
@OOPS - putting back the x, y arguments to drawToCanvas
@
text
@d36 1
a36 1
    public method drawToCanvas {c x y w h tags}
d189 1
a189 1
body cadwidgets::Legend::drawToCanvas {c x y w h tags} {
d196 1
a196 1
    set y1 $y
d199 2
a200 2
	set x1 [expr {int($i * $si) + $x}]
	set x2 [expr {int(($i + 1) * $si) + $x}]
d210 2
a211 2
    $c create text $x $y -text $low -anchor s -tags $tags
    $c create text [expr {$w + $x}] $y -text $high -anchor s -tags $tags
d220 1
a220 1
    drawToCanvas $itk_component(canvas) $xoff $yoff $w $h legend
@


1.1
log
@Widget for displaying colors and their corresponding values.
@
text
@d36 1
d40 1
d168 1
a168 7
body cadwidgets::Legend::update {} {
    set xoff 10
    set yoff 15

    $itk_component(canvas) delete all
    set w [expr {[winfo width $itk_component(canvas)] - (2 * $xoff)}]
    set h [winfo height $itk_component(canvas)]
d173 1
a173 1
    set y2 [expr {$h - 1}]
d183 2
a184 2
	$itk_component(canvas) create rectangle $x1 $y1 $x2 $y2 \
		-outline "" -fill $rgb
d186 2
a187 2
    $itk_component(canvas) create text $xoff $yoff -text $low -anchor s
    $itk_component(canvas) create text [expr {$w + $xoff}] $yoff -text $high -anchor s
d192 10
d237 4
@

