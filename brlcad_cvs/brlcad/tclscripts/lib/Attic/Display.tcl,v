head	1.27;
access;
symbols
	ansi-20040405-merged:1.24.4.1
	postmerge-20040405-ansi:1.25
	premerge-20040404-ansi:1.25
	postmerge-autoconf:1.25
	autoconf-freeze:1.24.12.1
	premerge-autoconf:1.25
	postmerge-20040315-windows:1.25
	premerge-20040315-windows:1.25
	windows-20040315-freeze:1.24.6.1
	autoconf-20031203:1.24
	autoconf-20031202:1.24
	autoconf-branch:1.24.0.12
	phong-branch:1.24.0.10
	photonmap-branch:1.24.0.8
	rel-6-1-DP:1.24
	windows-branch:1.24.0.6
	rel-6-0-2:1.24
	ansi-branch:1.24.0.4
	rel-6-0-1-branch:1.24.0.2
	hartley-6-0-post:1.24
	hartley-6-0-pre:1.24
	rel-6-0-1:1.24
	rel-6-0:1.24
	rel-5-4:1.16.2.1
	offsite-5-3-pre:1.18
	rel-5-3:1.16.2.1
	rel-5-2:1.16
	rel-5-1-branch:1.16.0.2
	rel-5-1:1.16;
locks; strict;
comment	@# @;


1.27
date	2004.05.21.16.41.19;	author morrison;	state dead;
branches;
next	1.26;

1.26
date	2004.05.10.15.25.29;	author morrison;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.02.17.39.43;	author morrison;	state Exp;
branches;
next	1.24;

1.24
date	2001.12.03.23.14.16;	author bparker;	state Exp;
branches
	1.24.4.1
	1.24.6.1
	1.24.12.1;
next	1.23;

1.23
date	2001.11.27.17.55.45;	author bparker;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.03.21.36.30;	author bparker;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.03.15.32.53;	author bparker;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.14.16.56.15;	author bparker;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.01.19.26.00;	author bparker;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.09.15.48.40;	author bparker;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.11.23.20.25;	author bparker;	state Exp;
branches;
next	1.16;

1.16
date	2000.05.19.20.57.46;	author bparker;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2000.05.18.21.43.17;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	2000.05.12.21.58.18;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.05.13.28.43;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.03.18.13.12;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.02.20.55.47;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.28.21.01.00;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.16.21.47.14;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.03.23.06.17;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.02.23.00.43;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.29.22.23.06;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.25.21.44.16;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.22.17.24.09;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.04.21.13.46;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.01.20.36.50;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.31.21.00.22;	author bparker;	state Exp;
branches;
next	;

1.16.2.1
date	2001.01.11.23.14.31;	author bparker;	state Exp;
branches;
next	;

1.24.4.1
date	2004.03.17.21.23.05;	author morrison;	state Exp;
branches;
next	;

1.24.6.1
date	2004.03.11.23.48.51;	author morrison;	state Exp;
branches;
next	;

1.24.12.1
date	2004.02.12.18.34.48;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.27
log
@moved to src/tclscripts/
@
text
@##                 D I S P L A Y . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	The Display class inherits from View and Dm. This
#       class also maintains a list of drawable geometry objects
#       which it can display. It now becomes possible to bind
#       view commands to window events to automatically update the
#       Dm window when the view changes.
#

#
# Usual options.
#
itk::usual Display {
    keep -linewidth
    keep -rscale
    keep -sscale
    keep -type

    keep -centerDotEnable
    keep -centerDotColor

    keep -modelAxesEnable
    keep -modelAxesLineWidth
    keep -modelAxesPosition
    keep -modelAxesSize
    keep -modelAxesColor
    keep -modelAxesLabelColor
    keep -modelAxesTripleColor

    keep -modelAxesTickEnable
    keep -modelAxesTickLength
    keep -modelAxesTickMajorLength
    keep -modelAxesTickInterval
    keep -modelAxesTicksPerMajor
    keep -modelAxesTickColor
    keep -modelAxesTickMajorColor
    keep -modelAxesTickThreshold

    keep -viewAxesEnable
    keep -viewAxesLineWidth
    keep -viewAxesPosition
    keep -viewAxesSize
    keep -viewAxesColor
    keep -viewAxesLabelColor
    keep -viewAxesTripleColor
}

class Display {
    inherit Dm View

    itk_option define -rscale rscale Rscale 0.4
    itk_option define -sscale sscale Sscale 2.0

    itk_option define -centerDotEnable centerDotEnable CenterDotEnable 1
    itk_option define -centerDotColor centerDotColor CenterDotColor {255 255 0}

    itk_option define -modelAxesEnable modelAxesEnable AxesEnable 0
    itk_option define -modelAxesLineWidth modelAxesLineWidth AxesLineWidth 0
    itk_option define -modelAxesPosition modelAxesPosition AxesPosition {0 0 0}
    itk_option define -modelAxesSize modelAxesSize AxesSize 2.0
    itk_option define -modelAxesColor modelAxesColor AxesColor {255 255 255}
    itk_option define -modelAxesLabelColor modelAxesLabelColor AxesLabelColor {255 255 0}
    itk_option define -modelAxesTripleColor modelAxesTripleColor AxesTripleColor 0

    itk_option define -modelAxesTickEnable modelAxesTickEnable AxesTickEnable 1
    itk_option define -modelAxesTickLength modelAxesTickLength AxesTickLength 4
    itk_option define -modelAxesTickMajorLength modelAxesTickMajorLength AxesTickMajorLength 8
    itk_option define -modelAxesTickInterval modelAxesTickInterval AxesTickInterval 100
    itk_option define -modelAxesTicksPerMajor modelAxesTicksPerMajor AxesTicksPerMajor 10
    itk_option define -modelAxesTickColor modelAxesTickColor AxesTickColor {255 255 0}
    itk_option define -modelAxesTickMajorColor modelAxesTickMajorColor AxesTickMajorColor {255 0 0}
    itk_option define -modelAxesTickThreshold modelAxesTickThreshold AxesTickThreshold 8

    itk_option define -viewAxesEnable viewAxesEnable AxesEnable 1
    itk_option define -viewAxesLineWidth viewAxesLineWidth AxesLineWidth 0
    itk_option define -viewAxesPosition viewAxesPosition AxesPosition {-0.85 -0.85 0}
    itk_option define -viewAxesSize viewAxesSize AxesSize 0.2
    itk_option define -viewAxesColor viewAxesColor AxesColor {255 255 255}
    itk_option define -viewAxesLabelColor viewAxesLabelColor AxesLabelColor {255 255 0}
    itk_option define -viewAxesTripleColor viewAxesTripleColor AxesTripleColor 1

    constructor {args} {
	Dm::constructor
	View::constructor
    } {}
    destructor {}

    public method mouse_nirt {_x _y {gi 0}}
    public method nirt {args}
    public method vnirt {vx vy {gi 0}}
    public method qray {args}
    public method refresh {}
    public method rt {args}
    public method rtabort {{gi 0}}
    public method rtcheck {args}
    public method rtedge {args}
    public method autoview {{g_index 0}}
    public method attach_view {}
    public method attach_drawable {dg}
    public method detach_view {}
    public method detach_drawable {dg}
    public method update {obj}

    # methods for maintaining the list of geometry objects
    public method add {glist}
    public method contents {}
    public method remove {glist}

    # methods that override methods inherited from View
    public method slew {args}
    public method perspective_angle {args}

    # methods that override methods inherited from Dm
    public method bounds {args}
    public method depthMask {args}
    public method perspective {args}
    public method fb_active {args}
    public method light {args}
    public method transparency {args}
    public method zbuffer {args}
    public method zclip {args}

    public method toggle_modelAxesEnable {}
    public method toggle_modelAxesTickEnable {}
    public method toggle_viewAxesEnable {}
    public method toggle_centerDotEnable {}

    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}

    protected method toggle_zclip {}
    protected method toggle_zbuffer {}
    protected method toggle_light {}
    protected method toggle_perspective {}
    protected method toggle_perspective_angle {}
    protected method toggle_transparency {}
    protected method idle_mode {}

    public method rotate_mode {x y}
    public method translate_mode {x y}
    public method scale_mode {x y}

    protected method constrain_rmode {coord x y}
    protected method constrain_tmode {coord x y}
    protected method handle_rotation {x y}
    protected method handle_translation {x y}
    protected method handle_scale {x y}
    protected method handle_constrain_rot {coord x y}
    protected method handle_constrain_tran {coord x y}
    protected method handle_configure {}
    protected method handle_expose {}
    protected method doBindings {}
    public method resetBindings {}

    protected variable minScale 0.0001
    protected variable minAxesSize 0.1
    protected variable minAxesLineWidth 0
    protected variable minAxesTickLength 1
    protected variable minAxesTickMajorLength 1

    private variable x ""
    private variable y ""
    private variable geolist ""
    private variable perspective_angle_index 0
    private variable perspective_angles {90 60 45 30}
    private variable doingInit 1
}

########################### Public/Interface Methods ###########################

body Display::constructor {args} {
    attach_view
    doBindings
    handle_configure
    eval itk_initialize $args
    set doingInit 0
}

configbody Display::rscale {
    if {$itk_option(-rscale) < $minScale} {
	error "rscale must be >= $minScale"
    }
}

configbody Display::sscale {
    if {$itk_option(-sscale) < $minScale} {
	error "sscale must be >= $minScale"
    }
}

configbody Display::centerDotEnable {
    if {$itk_option(-centerDotEnable) != 0 &&
        $itk_option(-centerDotEnable) != 1} {
	error "value must be 0, 1"
    }

    refresh
}

configbody Display::centerDotColor {
    if {[llength $itk_option(-centerDotColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-centerDotColor) 0]
    set g [lindex $itk_option(-centerDotColor) 1]
    set b [lindex $itk_option(-centerDotColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

configbody Display::viewAxesEnable {
    if {$itk_option(-viewAxesEnable) != 0 &&
        $itk_option(-viewAxesEnable) != 1} {
	error "value must be 0, 1"
    }

    refresh
}

configbody Display::modelAxesEnable {
    if {$itk_option(-modelAxesEnable) != 0 &&
        $itk_option(-modelAxesEnable) != 1} {
	error "value must be 0, 1"
    }

    refresh
}

configbody Display::viewAxesSize {
    # validate size
    if {![string is double $itk_option(-viewAxesSize)] ||
        $itk_option(-viewAxesSize) < $minAxesSize} {
	    error "-viewAxesSize must be >= $minAxesSize"
    }

    refresh
}

configbody Display::modelAxesSize {
    # validate size
    if {![string is double $itk_option(-modelAxesSize)] ||
        $itk_option(-modelAxesSize) < $minAxesSize} {
	    error "-modelAxesSize must be >= $minAxesSize"
    }

    refresh
}

configbody Display::viewAxesPosition {
    if {[llength $itk_option(-viewAxesPosition)] != 3} {
	error "values must be {x y z} where x, y and z are numeric"
    }

    set x [lindex $itk_option(-viewAxesPosition) 0]
    set y [lindex $itk_option(-viewAxesPosition) 1]
    set z [lindex $itk_option(-viewAxesPosition) 2]

    # validate center
    if {![string is double $x] ||
	![string is double $y] ||
        ![string is double $z]} {

	error "values must be {x y z} where x, y and z are numeric"
    }

    refresh
}

configbody Display::modelAxesPosition {
    if {[llength $itk_option(-modelAxesPosition)] != 3} {
	error "values must be {x y z} where x, y and z are numeric"
    }

    set x [lindex $itk_option(-modelAxesPosition) 0]
    set y [lindex $itk_option(-modelAxesPosition) 1]
    set z [lindex $itk_option(-modelAxesPosition) 2]

    # validate center
    if {![string is double $x] ||
	![string is double $y] ||
        ![string is double $z]} {

	error "values must be {x y z} where x, y and z are numeric"
    }

    # convert to mm
    set local2mm [local2base]
    set itk_option(-modelAxesPosition) [list [expr {$local2mm * $x}] \
	                                     [expr {$local2mm * $y}] \
					     [expr {$local2mm * $z}]]

    refresh
}

configbody Display::viewAxesLineWidth {
    # validate line width
    if {![string is digit $itk_option(-viewAxesLineWidth)] ||
        $itk_option(-viewAxesLineWidth) < $minAxesLineWidth} {
	    error "-viewAxesLineWidth must be >= $minAxesLineWidth"
    }

    refresh
}

configbody Display::modelAxesLineWidth {
    # validate line width
    if {![string is digit $itk_option(-modelAxesLineWidth)] ||
        $itk_option(-modelAxesLineWidth) < $minAxesLineWidth} {
	    error "-modelAxesLineWidth must be >= $minAxesLineWidth"
    }

    refresh
}

configbody Display::viewAxesTripleColor {
    if {$itk_option(-viewAxesTripleColor) != 0 &&
        $itk_option(-viewAxesTripleColor) != 1} {
	error "value must be 0 or 1"
    }

    refresh
}

configbody Display::modelAxesTripleColor {
    if {$itk_option(-modelAxesTripleColor) != 0 &&
        $itk_option(-modelAxesTripleColor) != 1} {
	error "value must be 0 or 1"
    }

    refresh
}

configbody Display::viewAxesColor {
    if {[llength $itk_option(-viewAxesColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-viewAxesColor) 0]
    set g [lindex $itk_option(-viewAxesColor) 1]
    set b [lindex $itk_option(-viewAxesColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

configbody Display::modelAxesColor {
    if {[llength $itk_option(-modelAxesColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-modelAxesColor) 0]
    set g [lindex $itk_option(-modelAxesColor) 1]
    set b [lindex $itk_option(-modelAxesColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

configbody Display::viewAxesLabelColor {
    if {[llength $itk_option(-viewAxesLabelColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-viewAxesLabelColor) 0]
    set g [lindex $itk_option(-viewAxesLabelColor) 1]
    set b [lindex $itk_option(-viewAxesLabelColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
        ![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

configbody Display::modelAxesLabelColor {
    if {[llength $itk_option(-modelAxesLabelColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-modelAxesLabelColor) 0]
    set g [lindex $itk_option(-modelAxesLabelColor) 1]
    set b [lindex $itk_option(-modelAxesLabelColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

configbody Display::modelAxesTickEnable {
    if {$itk_option(-modelAxesTickEnable) != 0 &&
        $itk_option(-modelAxesTickEnable) != 1} {
	error "value must be 0, 1"
    }

    refresh
}

configbody Display::modelAxesTickLength {
    # validate tick length
    if {![string is digit $itk_option(-modelAxesTickLength)] ||
        $itk_option(-modelAxesTickLength) < $minAxesTickLength} {
	    error "-modelAxesTickLength must be >= $minAxesTickLength"
    }

    refresh
}

configbody Display::modelAxesTickMajorLength {
    # validate major tick length
    if {![string is digit $itk_option(-modelAxesTickMajorLength)] ||
        $itk_option(-modelAxesTickMajorLength) < $minAxesTickMajorLength} {
	    error "-modelAxesTickMajorLength must be >= $minAxesTickMajorLength"
    }

    refresh
}

configbody Display::modelAxesTickInterval {
    if {![string is double $itk_option(-modelAxesTickInterval)] ||
        $itk_option(-modelAxesTickInterval) <= 0} {
	error "-modelAxesTickInterval must be > 0"
    }

    # convert to mm
    set itk_option(-modelAxesTickInterval) [expr {[local2base] * $itk_option(-modelAxesTickInterval)}]
    refresh
}

configbody Display::modelAxesTicksPerMajor {
    if {![string is digit $itk_option(-modelAxesTicksPerMajor)]} {
	error "-modelAxesTicksPerMajor must be > 0"
    }

    refresh
}

configbody Display::modelAxesTickColor {
    if {[llength $itk_option(-modelAxesTickColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-modelAxesTickColor) 0]
    set g [lindex $itk_option(-modelAxesTickColor) 1]
    set b [lindex $itk_option(-modelAxesTickColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

configbody Display::modelAxesTickMajorColor {
    if {[llength $itk_option(-modelAxesTickMajorColor)] != 3} {
	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    set r [lindex $itk_option(-modelAxesTickMajorColor) 0]
    set g [lindex $itk_option(-modelAxesTickMajorColor) 1]
    set b [lindex $itk_option(-modelAxesTickMajorColor) 2]

    # validate color
    if {![string is digit $r] ||
	![string is digit $g] ||
	![string is digit $b] ||
        $r < 0 || 255 < $r ||
        $g < 0 || 255 < $g ||
        $b < 0 || 255 < $b} {

	error "values must be {r g b} where 0 <= r/g/b <= 255"
    }

    refresh
}

configbody Display::modelAxesTickThreshold {
    if {![string is digit $itk_option(-modelAxesTickThreshold)]} {
	error "-modelAxesTickThreshold must be > 1"
    }

    refresh
}

body Display::update {obj} {
    refresh
}

body Display::refresh {} {
    if {$doingInit} {
	return
    }

    Dm::drawBegin

    if {$itk_option(-perspective)} {
	Dm::loadmat [View::pmodel2view] 0
    } else {
	Dm::loadmat [View::model2view] 0
    }

    if {$itk_option(-fb_active) < 2} {
	if {$itk_option(-fb_active)} {
	    # underlay
	    Dm::refreshfb
	}

	foreach geo $geolist {
	    Dm::drawGeom $geo
	}

	Dm::normal

	if {$itk_option(-viewAxesEnable) ||
	    $itk_option(-modelAxesEnable)} {
		set vsize [expr {[View::local2base] * [View::size]}]
		set rmat [View::rmat]
		set model2view [View::model2view]
	
		if {$itk_option(-viewAxesEnable)} {
		    set x [lindex $itk_option(-viewAxesPosition) 0]
		    set y [lindex $itk_option(-viewAxesPosition) 1]
		    set z [lindex $itk_option(-viewAxesPosition) 2]
		    set y [expr {$y * $invAspect}]
		    set modVAP "$x $y $z"

		    Dm::drawViewAxes $vsize $rmat $modVAP \
			    $itk_option(-viewAxesSize) $itk_option(-viewAxesColor) \
			    $itk_option(-viewAxesLabelColor) $itk_option(-viewAxesLineWidth) \
			    1 $itk_option(-viewAxesTripleColor)
		}

		if {$itk_option(-modelAxesEnable)} {
		    Dm::drawModelAxes $vsize $rmat $itk_option(-modelAxesPosition) \
			    $itk_option(-modelAxesSize) $itk_option(-modelAxesColor) \
			    $itk_option(-modelAxesLabelColor) $itk_option(-modelAxesLineWidth) \
			    0 $itk_option(-modelAxesTripleColor) \
			    $model2view \
			    $itk_option(-modelAxesTickEnable) \
			    $itk_option(-modelAxesTickLength) \
			    $itk_option(-modelAxesTickMajorLength) \
			    $itk_option(-modelAxesTickInterval) \
			    $itk_option(-modelAxesTicksPerMajor) \
			    $itk_option(-modelAxesTickColor) \
			    $itk_option(-modelAxesTickMajorColor) \
			    $itk_option(-modelAxesTickThreshold)
		}
	}

	if {$itk_option(-centerDotEnable)} {
	    Dm::drawCenterDot $itk_option(-centerDotColor)
	}

    } else {
	# overlay
	Dm::refreshfb
    }
    Dm::drawEnd
}

body Display::mouse_nirt {_x _y {gi 0}} {
    set geo [lindex $geolist $gi]

    if {$geo == ""} {
	return "mouse_nirt: bad geometry index - $gi"
    }

    # transform X screen coordinates into normalized view coordinates
    set nvx [expr ($_x * $invWidth - 0.5) * 2.0]
    set nvy [expr (0.5 - $_y * $invHeight) * 2.0 * $invAspect]

    # transform normalized view coordinates into model coordinates
    set mc [mat4x3pnt [view2model] "$nvx $nvy 0"]
    set mc [vscale $mc [base2local]]

    # finally, call nirt (backing out of geometry)
    set v_obj [View::get_viewname]
    eval $geo nirt $v_obj -b $mc
}

body Display::nirt {args} {
    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "nirt: bad geometry index"
    }

    set v_obj [View::get_viewname]

    eval $geo nirt $v_obj $args
}

body Display::vnirt {vx vy {gi 0}} {
    set geo [lindex $geolist $gi]

    if {$geo == ""} {
	return "vnirt: bad geometry index - $gi"
    }

    # finally, call vnirt (backing out of geometry)
    set v_obj [View::get_viewname]
    eval $geo vnirt $v_obj -b $vx $vy
}

body Display::qray {args} {
    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "qray: bad geometry index"
    }

    eval $geo qray $args
}

body Display::rt {args} {
#    if {$itk_option(-listen) < 0} {
#	return "rt: not listening"
#    }

    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rt: bad geometry index"
    }

    set v_obj [View::get_viewname]
    eval $geo rt $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
}

body Display::rtabort {{gi 0}} {
    set geo [lindex $geolist $gi]

    if {$geo == ""} {
	return "rtabort: bad geometry index"
    }

    $geo rtabort
}

body Display::rtcheck {args} {
    if {$itk_option(-listen) < 0} {
	return "rtcheck: not listening"
    }

    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rtcheck: bad geometry index"
    }

    set v_obj [View::get_viewname]
    eval $geo rtcheck $v_obj -F $itk_option(-listen) $args
}

body Display::rtedge {args} {
    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rtedge: bad geometry index"
    }

    set v_obj [View::get_viewname]
    eval $geo rtedge $v_obj -F $itk_option(-listen) -w $width -n $height -V $aspect $args
}

body Display::autoview {{g_index 0}} {
    if {$g_index < [llength $geolist]} {
	set geo [lindex $geolist $g_index]
	set aview [$geo get_autoview]
	eval [lrange $aview 0 1]
	eval [lrange $aview 2 3]
    }
}

body Display::attach_view {} {
    View::observer attach $this
}

body Display::attach_drawable {dg} {
    $dg observer attach $this
}

body Display::detach_view {} {
    View::observer detach $this
}

body Display::detach_drawable {dg} {
    $dg observer detach $this
}

body Display::add {glist} {
    if [llength $geolist] {
	set blank 0
    } else {
	set blank 1
    }

    foreach geo $glist {
	set index [lsearch $geolist $geo]

	# already in list
	if {$index != -1} {
	    continue
	}

	lappend geolist $geo
	attach_drawable $geo
    }

    if {$blank} {
	detach_view
	autoview
	attach_view
    }

    refresh
}

body Display::remove {glist} {
    foreach geo $glist {
	set index [lsearch $geolist $geo]
	if {$index == -1} {
	    continue
	}

	set geolist [lreplace $geolist $index $index]
	detach_drawable $geo
    }

    refresh
}

body Display::contents {} {
    return $geolist
}

########################### Public Methods That Override ###########################
body Display::slew {args} {
    if {[llength $args] == 2} {
	set x1 [lindex $args 0]
	set y1 [lindex $args 1]

	set x2 [expr $width * 0.5]
	set y2 [expr $height * 0.5]
	set sf [expr 2.0 * $invWidth]

	set _x [expr ($x1 - $x2) * $sf]
	set _y [expr ($y2 - $y1) * $sf]
	View::slew $_x $_y
    } else {
	eval View::slew $args
    }
}

body Display::perspective_angle {args} {
    if {$args == ""} {
	# get perspective angle
	return $perspective_angle
    } else {
	# set perspective angle
	View::perspective $args
    }

    if {$perspective_angle > 0} {
	# turn perspective mode on
	Dm::perspective 1
    } else {
	# turn perspective mode off
	Dm::perspective 0
    }

    refresh
    return $perspective_angle
}

body Display::perspective {args} {
    eval Dm::perspective $args

    if {$itk_option(-perspective)} {
	View::perspective [lindex $perspective_angles $perspective_angle_index]
    } else {
	View::perspective -1
    }

    refresh
    return $itk_option(-perspective)
}

body Display::fb_active {args} {
    if {$args == ""} {
	return $itk_option(-fb_active)
    } else {
	eval Dm::fb_active $args
	refresh
    }
}

body Display::light {args} {
    eval Dm::light $args
    refresh
    return $itk_option(-light)
}

body Display::transparency {args} {
    eval Dm::transparency $args
    refresh
    return $itk_option(-transparency)
}

body Display::bounds {args} {
    if {$args == ""} {
	return [Dm::bounds]
    }

    eval Dm::bounds $args
    refresh
}

body Display::depthMask {args} {
    eval Dm::depthMask $args
    refresh
    return $itk_option(-depthMask)
}

body Display::zbuffer {args} {
    eval Dm::zbuffer $args
    refresh
    return $itk_option(-zbuffer)
}

body Display::zclip {args} {
    eval Dm::zclip $args
    refresh
    return $itk_option(-zclip)
}

########################### Protected Methods ###########################
body Display::toggle_modelAxesEnable {} {
    if {$itk_option(-modelAxesEnable)} {
	set itk_option(-modelAxesEnable) 0
    } else {
	set itk_option(-modelAxesEnable) 1
    }

    refresh
}

body Display::toggle_modelAxesTickEnable {} {
    if {$itk_option(-modelAxesTickEnable)} {
	set itk_option(-modelAxesTickEnable) 0
    } else {
	set itk_option(-modelAxesTickEnable) 1
    }

    refresh
}

body Display::toggle_viewAxesEnable {} {
    if {$itk_option(-viewAxesEnable)} {
	set itk_option(-viewAxesEnable) 0
    } else {
	set itk_option(-viewAxesEnable) 1
    }

    refresh
}

body Display::toggle_centerDotEnable {} {
    if {$itk_option(-centerDotEnable)} {
	set itk_option(-centerDotEnable) 0
    } else {
	set itk_option(-centerDotEnable) 1
    }

    refresh
}

body Display::? {} {
    return "[View::?][Dm::?]"
}

body Display::apropos {key} {
    return "[View::apropos $key] [Dm::apropos $key]"
}

body Display::help {args} {
    if {[llength $args] && [lindex $args 0] != {}} {
	if {[catch {eval View::help $args} result]} {
	    set result [eval Dm::help $args]
	}

	return $result
    }

    # list all help messages for QuadDisplay and Db
    return "[View::help][Dm::help]"
}

body Display::getUserCmds {} {
    eval lappend cmds [View::getUserCmds] [Dm::getUserCmds]
    return $cmds
}

body Display::toggle_zclip {} {
    Dm::toggle_zclip
    refresh
    return $itk_option(-zclip)
}

body Display::toggle_zbuffer {} {
    Dm::toggle_zbuffer
    refresh
    return $itk_option(-zbuffer)
}

body Display::toggle_light {} {
    Dm::toggle_light
    refresh
    return $itk_option(-light)
}

body Display::toggle_perspective {} {
    Dm::toggle_perspective

    if {$itk_option(-perspective)} {
	View::perspective [lindex $perspective_angles $perspective_angle_index]
    } else {
	View::perspective -1
    }

    refresh
    return $itk_option(-perspective)
}

body Display::toggle_perspective_angle {} {
    if {$perspective_angle_index == 3} {
	set perspective_angle_index 0
    } else {
	incr perspective_angle_index
    }

    if {$itk_option(-perspective)} {
	View::perspective [lindex $perspective_angles $perspective_angle_index]
    }
}

body Display::toggle_transparency {} {
    Dm::toggle_transparency
    refresh
    return $itk_option(-transparency)
}

body Display::idle_mode {} {
    # stop receiving motion events
    bind $itk_component(dm) <Motion> {}
}

body Display::rotate_mode {_x _y} {
    set x $_x
    set y $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[code $this handle_rotation %x %y]; break"
}

body Display::translate_mode {_x _y} {
    set x $_x
    set y $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[code $this handle_translation %x %y]; break"
}

body Display::scale_mode {_x _y} {
    set x $_x
    set y $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[code $this handle_scale %x %y]; break"
}

body Display::constrain_rmode {coord _x _y} {
    set x $_x
    set y $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[code $this handle_constrain_rot $coord %x %y]; break"
}

body Display::constrain_tmode {coord _x _y} {
    set x $_x
    set y $_y

    # start receiving motion events
    bind $itk_component(dm) <Motion> "[code $this handle_constrain_tran $coord %x %y]; break"
}

body Display::handle_rotation {_x _y} {
    set dx [expr ($y - $_y) * $itk_option(-rscale)]
    set dy [expr ($x - $_x) * $itk_option(-rscale)]
    vrot $dx $dy 0

    #update instance variables x and y
    set x $_x
    set y $_y
}

body Display::handle_translation {_x _y} {
    set dx [expr {($x - $_x) * $invWidth * [View::size]}]
    set dy [expr {($_y - $y) * $invWidth * [View::size]}]
    vtra $dx $dy 0

    #update instance variables x and y
    set x $_x
    set y $_y
}

body Display::handle_scale {_x _y} {
    set dx [expr {($_x - $x) * $invWidth * $itk_option(-sscale)}]
    set dy [expr {($y - $_y) * $invWidth * $itk_option(-sscale)}]

    if {[expr {abs($dx) > abs($dy)}]} {
	set f [expr 1.0 + $dx]
    } else {
	set f [expr 1.0 + $dy]
    }

    zoom $f

    #update instance variables x and y
    set x $_x
    set y $_y
}

body Display::handle_constrain_rot {coord _x _y} {
    set dx [expr {($x - $_x) * $itk_option(-rscale)}]
    set dy [expr {($_y - $y) * $itk_option(-rscale)}]

    if [expr abs($dx) > abs($dy)] {
	set f $dx
    } else {
	set f $dy
    }
    switch $coord {
	x {
	    rot $f 0 0
	}
	y {
	    rot 0 $f 0
	}
	z {
	    rot 0 0 $f
	}
    }

    #update instance variables x and y
    set x $_x
    set y $_y
}

body Display::handle_constrain_tran {coord _x _y} {
    set dx [expr {($x - $_x) * $invWidth * [View::size]}]
    set dy [expr {($_y - $y) * $invWidth * [View::size]}]

    if {[expr {abs($dx) > abs($dy)}]} {
	set f $dx
    } else {
	set f $dy
    }
    switch $coord {
	x {
	    tra $f 0 0
	}
	y {
	    tra 0 $f 0
	}
	z {
	    tra 0 0 $f
	}
    }

    #update instance variables x and y
    set x $_x
    set y $_y
}

body Display::handle_configure {} {
    Dm::handle_configure
    refresh
}

body Display::handle_expose {} {
    refresh
}

body Display::doBindings {} {
    bind $itk_component(dm) <Enter> "focus $itk_component(dm);"
    bind $itk_component(dm) <Configure> "[code $this handle_configure]; break"
    bind $itk_component(dm) <Expose> "[code $this handle_expose]; break"

    # Mouse Bindings
    bind $itk_component(dm) <1> "$this zoom 0.5; break"
    bind $itk_component(dm) <2> "$this slew %x %y; break"
    bind $itk_component(dm) <3> "$this zoom 2.0; break"

    # Idle Mode
    bind $itk_component(dm) <ButtonRelease> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Control_L> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Control_R> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Shift_L> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Shift_R> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Alt_L> "[code $this idle_mode]; break"
    bind $itk_component(dm) <KeyRelease-Alt_R> "[code $this idle_mode]; break"

    # Rotate Mode
    bind $itk_component(dm) <Control-ButtonPress-1> "[code $this rotate_mode %x %y]; break"
    bind $itk_component(dm) <Control-ButtonPress-2> "[code $this rotate_mode %x %y]; break"
    bind $itk_component(dm) <Control-ButtonPress-3> "[code $this rotate_mode %x %y]; break"

    # Translate Mode
    bind $itk_component(dm) <Shift-ButtonPress-1> "[code $this translate_mode %x %y]; break"
    bind $itk_component(dm) <Shift-ButtonPress-2> "[code $this translate_mode %x %y]; break"
    bind $itk_component(dm) <Shift-ButtonPress-3> "[code $this translate_mode %x %y]; break"

    # Scale Mode
    bind $itk_component(dm) <Control-Shift-ButtonPress-1> "[code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Control-Shift-ButtonPress-2> "[code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Control-Shift-ButtonPress-3> "[code $this scale_mode %x %y]; break"

    # Constrained Rotate Mode
    bind $itk_component(dm) <Alt-Control-ButtonPress-1> "[code $this constrain_rmode x %x %y]; break"
    bind $itk_component(dm) <Alt-Control-ButtonPress-2> "[code $this constrain_rmode y %x %y]; break"
    bind $itk_component(dm) <Alt-Control-ButtonPress-3> "[code $this constrain_rmode z %x %y]; break"

    # Constrained Translate Mode
    bind $itk_component(dm) <Alt-Shift-ButtonPress-1> "[code $this constrain_tmode x %x %y]; break"
    bind $itk_component(dm) <Alt-Shift-ButtonPress-2> "[code $this constrain_tmode y %x %y]; break"
    bind $itk_component(dm) <Alt-Shift-ButtonPress-3> "[code $this constrain_tmode z %x %y]; break"

    # Constrained Scale Mode
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-1> "[code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-2> "[code $this scale_mode %x %y]; break"
    bind $itk_component(dm) <Alt-Control-Shift-ButtonPress-3> "[code $this scale_mode %x %y]; break"

    # Key Bindings
    bind $itk_component(dm) 3 "$this ae \"35 25 0\"; break"
    bind $itk_component(dm) 4 "$this ae \"45 45 0\"; break"
    bind $itk_component(dm) f "$this ae \"0 0 0\"; break"
    bind $itk_component(dm) R "$this ae \"180 0 0\"; break"
    bind $itk_component(dm) r "$this ae \"270 0 0\"; break"
    bind $itk_component(dm) l "$this ae \"90 0 0\"; break"
    bind $itk_component(dm) t "$this ae \"0 90 0\"; break"
    bind $itk_component(dm) b "$this ae \"0 270 0\"; break"
    bind $itk_component(dm) m "[code $this toggle_modelAxesEnable]; break"
    bind $itk_component(dm) T "[code $this toggle_modelAxesTickEnable]; break"
    bind $itk_component(dm) v "[code $this toggle_viewAxesEnable]; break"
    bind $itk_component(dm) <F2> "[code $this toggle_zclip]; break"
    bind $itk_component(dm) <F3> "[code $this toggle_perspective]; break"
    bind $itk_component(dm) <F4> "[code $this toggle_zbuffer]; break"
    bind $itk_component(dm) <F5> "[code $this toggle_light]; break"
    bind $itk_component(dm) <F6> "[code $this toggle_perspective_angle]; break"
    bind $itk_component(dm) <F10> "[code $this toggle_transparency]; break"
}

body Display::resetBindings {} {
    Dm::doBindings
    doBindings
}
@


1.26
log
@Bob Parker's view modifications, png framebuffer support, shaded drawing mode
@
text
@@


1.25
log
@update copyright to include span through 2003
@
text
@d31 32
a62 1
    keep -rscale -sscale -type
d71 28
d107 1
d131 2
d136 1
d140 10
d155 1
d157 5
a161 3
    protected method rotate_mode {x y}
    protected method translate_mode {x y}
    protected method scale_mode {x y}
d172 7
d185 1
d195 361
d563 4
d584 43
d647 1
d674 12
d917 21
d951 66
d1060 6
d1122 2
a1123 2
    set dx [expr ($x - $_x) * $invWidth * $View::size]
    set dy [expr ($_y - $y) * $invWidth * $View::size]
d1132 2
a1133 2
    set dx [expr ($_x - $x) * $invWidth * $itk_option(-sscale)]
    set dy [expr ($y - $_y) * $invWidth * $itk_option(-sscale)]
d1135 1
a1135 1
    if [expr abs($dx) > abs($dy)] {
d1149 2
a1150 2
    set dx [expr ($x - $_x) * $itk_option(-rscale)]
    set dy [expr ($_y - $y) * $itk_option(-rscale)]
d1175 2
a1176 2
    set dx [expr ($x - $_x) * $invWidth * $View::size]
    set dy [expr ($_y - $y) * $invWidth * $View::size]
d1178 1
a1178 1
    if [expr abs($dx) > abs($dy)] {
d1267 3
d1275 6
@


1.24
log
@*- added mouse_nirt method
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998 by the United States Army
@


1.24.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.24.6.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.24.12.1
log
@merge from HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.23
log
@*- add qray and nirt methods
@
text
@d46 1
a46 2
    public method update {obj}
    public method refresh {}
d49 1
d59 1
d140 19
@


1.22
log
@*- changed slew's arguments
@
text
@d48 2
d139 38
@


1.21
log
@Added the rtedge method.
@
text
@d64 1
a64 1
    public method slew {x y}
d286 15
a300 10
body Display::slew {x1 y1} {
    set x2 [expr $width * 0.5]
    set y2 [expr $height * 0.5]
    set sf [expr 2.0 * $invWidth]

    set _x [expr ($x1 - $x2) * $sf]
    set _y [expr ($y2 - $y1) * $sf]
#    set _y [expr (-1.0 * $y1 + $y2) * $sf]
	
    View::slew $_x $_y
@


1.20
log
@*- add new method called perspective_angle
@
text
@d51 1
d195 19
d596 8
a603 8
    bind $itk_component(dm) 3 "$this aet \"35 25 0\"; break"
    bind $itk_component(dm) 4 "$this aet \"45 45 0\"; break"
    bind $itk_component(dm) f "$this aet \"0 0 0\"; break"
    bind $itk_component(dm) R "$this aet \"180 0 0\"; break"
    bind $itk_component(dm) r "$this aet \"270 0 0\"; break"
    bind $itk_component(dm) l "$this aet \"90 0 0\"; break"
    bind $itk_component(dm) t "$this aet \"0 90 0\"; break"
    bind $itk_component(dm) b "$this aet \"0 270 0\"; break"
@


1.19
log
@*- simplified the expression
@
text
@d64 1
d67 1
a69 1
    public method perspective {args}
d278 8
a285 5
body Display::zclip {args} {
    eval Dm::zclip $args
    refresh
    return $itk_option(-zclip)
}
d287 7
a293 5
body Display::zbuffer {args} {
    eval Dm::zbuffer $args
    refresh
    return $itk_option(-zbuffer)
}
a294 2
body Display::light {args} {
    eval Dm::light $args
d296 1
a296 1
    return $itk_option(-light)
d301 7
d321 18
d360 7
d378 3
a380 1
    View::perspective [lindex $perspective_angles $perspective_angle_index]
@


1.18
log
@*- remove unnecessary calls to refresh
*- call vrot when doing unconstrained rotations
*- call vtra when doing unconstrained translations
*- call rot and tra with separate arguments
@
text
@d271 2
a272 1
    set _y [expr (-1.0 * $y1 + $y2) * $sf]
@


1.17
log
@*- added rtabort
@
text
@d392 1
a392 2
    rot "$dx $dy 0"
    refresh
d402 1
a402 2
    tra "$dx $dy 0"
    refresh
a419 1
    refresh
d437 1
a437 1
	    rot "$f 0 0"
d440 1
a440 1
	    rot "0 $f 0"
d443 1
a443 1
	    rot "0 0 $f"
a445 1
    refresh
d463 1
a463 1
	    tra "$f 0 0"
d466 1
a466 1
	    tra "0 $f 0"
d469 1
a469 1
	    tra "0 0 $f"
a471 1
    refresh
@


1.16
log
@*- remove type from constructors parameter list
@
text
@d49 1
d138 3
a140 3
    if {$itk_option(-listen) < 0} {
	return "rt: not listening"
    }
d158 10
@


1.16.2.1
log
@*- added rtabort
@
text
@a48 1
    public method rtabort {{gi 0}}
d137 3
a139 3
#    if {$itk_option(-listen) < 0} {
#	return "rt: not listening"
#    }
a156 10
}

body Display::rtabort {{gi 0}} {
    set geo [lindex $geolist $gi]

    if {$geo == ""} {
	return "rtabort: bad geometry index"
    }

    $geo rtabort
@


1.15
log
@*- alphabetize method names (easier to document)
@
text
@d40 2
a41 2
    constructor {{type X} args} {
	eval Dm::constructor -type $type
d100 1
a100 1
body Display::constructor {{type X} args} {
@


1.14
log
@*- made toggle routines protected
*- change get_name to get_viewname
@
text
@d58 1
a59 1
    public method contents {}
d65 1
a65 2
    public method zclip {args}
    public method zbuffer {args}
d68 2
a69 1
    public method fb_active {args}
@


1.13
log
@*- provide "usual" options for Display class
@
text
@a64 1
    public method fb_active {args}
d69 1
a69 5
    public method toggle_zclip {}
    public method toggle_zbuffer {}
    public method toggle_light {}
    public method toggle_perspective {}
    public method toggle_perspective_angle {}
d71 5
a97 1
########################### ###########################
d155 1
a155 1
    set v_obj [View::get_name]
d178 1
a178 1
    set v_obj [View::get_name]
a264 9
body Display::fb_active {args} {
    if {$args == ""} {
	return $itk_option(-fb_active)
    } else {
	eval Dm::fb_active $args
	refresh
    }
}

d289 10
a332 1
########################### Protected Methods ###########################
@


1.12
log
@*- reintroduce type as an argument to the constructor
@
text
@d26 8
a101 1
    eval itk_initialize $args
d105 1
@


1.11
log
@*- moved constructor implementation outside
   of class body
*- simplified constructor's signature
@
text
@d32 2
a33 2
    constructor {args} {
	eval Dm::constructor $args
d93 2
a94 1
body Display::constructor {args} {
@


1.10
log
@*-
@
text
@d23 1
a23 1
#       window events to view commands to automatically update the
d32 2
a33 2
    constructor {{_type X} args} {
	eval Dm::constructor $_type
d35 1
a35 7
    } {
	attach_view
	doBindings
	handle_configure
	eval itk_initialize $args
    }

a82 1
    private variable view ""
d92 7
@


1.9
log
@*- provide default for display manager type
@
text
@d59 1
a59 1
    # methods that override method inherited from View
d62 1
a62 1
    # methods that override method inherited from Dm
@


1.8
log
@*- remove a few debug lines that had been commented out
*- mods to fb_active
@
text
@d32 1
a32 1
    constructor {_type args} {
@


1.7
log
@*- new methods: attach_view, attach_drawable,
   detach_view, detach_drawable
*- add parameter with default to autoview
@
text
@a99 1
#puts "Display::update: obj - $obj" 
a103 1
#puts "Display::refresh - enter, [get_name]"
d253 1
a253 1

d258 6
a263 3
    eval Dm::fb_active $args
    refresh
    return $itk_option(-fb_active)
@


1.6
log
@*- add method rtcheck
@
text
@d36 1
a36 1
	attach
d48 5
a52 1
    public method autoview {}
a73 2
    protected method attach {}
    protected method detach {}
d100 1
d105 1
d176 3
a178 4

body Display::autoview {} {
    if [llength $geolist] {
	set geo [lindex $geolist 0]
d185 16
d210 2
d217 1
a217 1
	$geo observer attach $this
d221 1
a221 1
	detach
d223 1
a223 1
	attach
d237 1
a237 1
	$geo observer detach $this
a323 10
body Display::attach {} {
    Dm::observer attach $this
    View::observer attach $this
}

body Display::detach {} {
    Dm::observer detach $this
    View::observer detach $this
}

@


1.5
log
@*- mods to reflect changes in inherited classes
@
text
@d47 1
d147 23
@


1.4
log
@The Display class now inherits from Dm and View classes.
@
text
@d20 5
a24 3
#	The Display class inherits from View and Dm. 
#       This class is capable of displaying one or more drawable
#       geometry objects.
d27 1
a27 1
    inherit View Dm
d29 2
a30 5
    private variable x ""
    private variable y ""
    private variable geolist ""
    private variable perspective_angle_index 0
    private variable perspective_angles {90 60 45 30}
d32 3
a34 6
    public variable rscale 0.4
    public variable sscale 2.0

    constructor {view_args dm_args args} {
	eval View::constructor $view_args
	eval Dm::constructor $dm_args
a35 3
	# process options
	eval configure $args

d37 1
a37 1

d39 1
a39 1
	doBindings
d54 1
a54 1
    # methods that override inherited methods
d56 2
d85 7
d103 1
a103 1
    if {$perspective} {
d109 2
a110 2
    if {$fb_active < 2} {
	if {$fb_active} {
d126 1
a126 1
    if {$listen < 0} {
d145 1
a145 1
    eval $geo rt $v_obj -F $listen -w $width -n $height -V $aspect $args
d217 1
a217 1
    return $fb_active
d223 1
a223 1
    return $zclip
d229 1
a229 1
    return $zbuffer
d235 1
a235 1
    return $light
d241 1
a241 1
    return $perspective
d247 1
a247 1
    return $zclip
d253 1
a253 1
    return $zbuffer
d259 1
a259 1
    return $light
d265 1
a265 1
    return $perspective
d291 1
a291 1
    bind $dm <Motion> {}
d299 1
a299 1
    bind $dm <Motion> "[code $this handle_rotation %x %y]; break"
d307 1
a307 1
    bind $dm <Motion> "[code $this handle_translation %x %y]; break"
d315 1
a315 1
    bind $dm <Motion> "[code $this handle_scale %x %y]; break"
d323 1
a323 1
    bind $dm <Motion> "[code $this handle_constrain_rot $coord %x %y]; break"
d331 1
a331 1
    bind $dm <Motion> "[code $this handle_constrain_tran $coord %x %y]; break"
d335 2
a336 2
    set dx [expr ($y - $_y) * $rscale]
    set dy [expr ($x - $_x) * $rscale]
d346 2
a347 2
    set dx [expr ($x - $_x) * $invWidth * $size]
    set dy [expr ($_y - $y) * $invWidth * $size]
d357 2
a358 2
    set dx [expr ($_x - $x) * $invWidth * $sscale]
    set dy [expr ($y - $_y) * $invWidth * $sscale]
d375 2
a376 2
    set dx [expr ($x - $_x) * $rscale]
    set dy [expr ($_y - $y) * $rscale]
d402 2
a403 2
    set dx [expr ($x - $_x) * $invWidth * $size]
    set dy [expr ($_y - $y) * $invWidth * $size]
d438 3
a440 3
    bind $dm <Enter> "focus $dm;"
    bind $dm <Configure> "[code $this handle_configure]; break"
    bind $dm <Expose> "[code $this handle_expose]; break"
d443 3
a445 3
    bind $dm <1> "$this zoom 0.5; break"
    bind $dm <2> "$this slew %x %y; break"
    bind $dm <3> "$this zoom 2.0; break"
d448 7
a454 7
    bind $dm <ButtonRelease> "[code $this idle_mode]; break"
    bind $dm <KeyRelease-Control_L> "[code $this idle_mode]; break"
    bind $dm <KeyRelease-Control_R> "[code $this idle_mode]; break"
    bind $dm <KeyRelease-Shift_L> "[code $this idle_mode]; break"
    bind $dm <KeyRelease-Shift_R> "[code $this idle_mode]; break"
    bind $dm <KeyRelease-Alt_L> "[code $this idle_mode]; break"
    bind $dm <KeyRelease-Alt_R> "[code $this idle_mode]; break"
d457 3
a459 3
    bind $dm <Control-ButtonPress-1> "[code $this rotate_mode %x %y]; break"
    bind $dm <Control-ButtonPress-2> "[code $this rotate_mode %x %y]; break"
    bind $dm <Control-ButtonPress-3> "[code $this rotate_mode %x %y]; break"
d462 3
a464 3
    bind $dm <Shift-ButtonPress-1> "[code $this translate_mode %x %y]; break"
    bind $dm <Shift-ButtonPress-2> "[code $this translate_mode %x %y]; break"
    bind $dm <Shift-ButtonPress-3> "[code $this translate_mode %x %y]; break"
d467 3
a469 3
    bind $dm <Control-Shift-ButtonPress-1> "[code $this scale_mode %x %y]; break"
    bind $dm <Control-Shift-ButtonPress-2> "[code $this scale_mode %x %y]; break"
    bind $dm <Control-Shift-ButtonPress-3> "[code $this scale_mode %x %y]; break"
d472 3
a474 3
    bind $dm <Alt-Control-ButtonPress-1> "[code $this constrain_rmode x %x %y]; break"
    bind $dm <Alt-Control-ButtonPress-2> "[code $this constrain_rmode y %x %y]; break"
    bind $dm <Alt-Control-ButtonPress-3> "[code $this constrain_rmode z %x %y]; break"
d477 3
a479 3
    bind $dm <Alt-Shift-ButtonPress-1> "[code $this constrain_tmode x %x %y]; break"
    bind $dm <Alt-Shift-ButtonPress-2> "[code $this constrain_tmode y %x %y]; break"
    bind $dm <Alt-Shift-ButtonPress-3> "[code $this constrain_tmode z %x %y]; break"
d482 3
a484 3
    bind $dm <Alt-Control-Shift-ButtonPress-1> "[code $this scale_mode %x %y]; break"
    bind $dm <Alt-Control-Shift-ButtonPress-2> "[code $this scale_mode %x %y]; break"
    bind $dm <Alt-Control-Shift-ButtonPress-3> "[code $this scale_mode %x %y]; break"
d487 13
a499 13
    bind $dm 3 "$this aet \"35 25 0\"; break"
    bind $dm 4 "$this aet \"45 45 0\"; break"
    bind $dm f "$this aet \"0 0 0\"; break"
    bind $dm R "$this aet \"180 0 0\"; break"
    bind $dm r "$this aet \"270 0 0\"; break"
    bind $dm l "$this aet \"90 0 0\"; break"
    bind $dm t "$this aet \"0 90 0\"; break"
    bind $dm b "$this aet \"0 270 0\"; break"
    bind $dm <F2> "[code $this toggle_zclip]; break"
    bind $dm <F3> "[code $this toggle_perspective]; break"
    bind $dm <F4> "[code $this toggle_zbuffer]; break"
    bind $dm <F5> "[code $this toggle_light]; break"
    bind $dm <F6> "[code $this toggle_perspective_angle]; break"
@


1.3
log
@*- add bg variable and command
@
text
@d20 2
a21 2
#	The Display class is comprised of a display manager object and
#       a view object. This class is capable of displaying one or more drawable
d25 2
a26 3
    private common dlist ""
    private variable dm ""
    private variable view ""
d29 4
a32 11
    private variable invWidth ""
    private variable aspect ""
    private variable initializing 1
    private variable width 512
    private variable height 512

    public variable dm_name ""
    public variable istoplevel 1
    public variable type X
    public variable dm_size 512
    public variable size 2000
a34 6
    public variable title ""
    public variable geolist ""
    public variable listen -1
    public variable fb_active 0
    public variable fb_update 1
    public variable bg "0 0 0"
d36 4
a39 1
    constructor {args} {
d43 1
a43 7
	# create default dm_name
	if {$dm_name == ""} {
	    set dm_name .[string map {:: ""} $this]
	}

	# create display manager object
	set dm [dm_open $dm_name $type -t $istoplevel -W $width -N $height]
d45 1
a45 10
	# create view object
	set view [v_open $this\_view]
	$view center {0 0 0}
	$view scale [expr 0.5 * $size]

	# initialize display manager object's view
	$dm clear
	$dm loadmat [$view model2view] 0

	# event bindings
a46 17

	if {$istoplevel} {
	    wm title $dm $title
	}

	if {$geolist != ""} {
	    autoview
	}

	if {$listen != -1} {
	    listen $listen
	}

	# append to list of Display objects
	lappend dlist $this

	set initializing 0
d49 1
a49 29
    destructor {
	if {$listen >= 0} {
	    $dm listen -1
	}
	$dm close
	$view close

	# remove from list of Display objects
	set index [lsearch $dlist $this]
	set dlist [lreplace $dlist $index $index]
    }

    private method toggle_zclip {}
    private method toggle_zbuffer {}
    private method toggle_light {}
    private method idle_mode {}
    private method rotate_mode {_x _y}
    private method translate_mode {_x _y}
    private method scale_mode {_x _y}
    private method constrain_rmode {coord _x _y}
    private method constrain_tmode {coord _x _y}
    private method handle_rotation {_x _y}
    private method handle_translation {_x _y}
    private method handle_scale {_x _y}
    private method handle_constrain_rot {coord _x _y}
    private method handle_constrain_tran {coord _x _y}
    private method handle_configure {}
    private method handle_expose {}
    private method doBindings {}
d51 1
a51 1
    # methods for controlling the display manager object
d53 1
a53 14
    public method clear {}
    public method bg {args}
    public method dm_size {args}
    public method dm_name {}

    # methods for controlling the view object
    public method aet {args}
    public method center {args}
    public method rot {args}
    public method slew {args}
    public method tra {args}
    public method size {args}
    public method scale {args}
    public method zoom {sf}
d61 2
a62 2
    # methods for interacting with the framebuffer
    public method listen {args}
d64 32
a95 2
    public method fb_update {args}
    public method rt {args}
d98 7
a104 3
configbody Display::dm_name {
    if {!$initializing} {
	return -code error "dm_name is read-only"
a105 1
}
d107 5
a111 3
configbody Display::dm_size {
    # save dm_size
    set s $dm_size
d113 6
a118 12
    # For now, put back the old value.
    # If the size really does change, dm_size will
    # be set in the handle_configure method.
    set dm_size "$width $height"

    # request a size change
    eval dm_size $s
}

configbody Display::title {
    if {$istoplevel && [winfo exists $dm]} {
	wm title $dm $title
d120 1
d123 3
a125 3
configbody Display::istoplevel {
    if {!$initializing} {
	return -code error "istoplevel is read-only"
a126 1
}
d128 1
a128 14
configbody Display::type {
    if {!$initializing} {
	return -code error "type is read-only"
    }
    
    switch $type {
	X -
	ogl {
	}
	default {
	    set type X
	}
    }
}
d130 6
a135 3
configbody Display::geolist {
    if {!$initializing} {
	autoview
a136 1
}
d138 2
a139 3
configbody Display::listen {
    if {!$initializing} {
	listen $listen
a140 1
}
d142 2
a143 2
configbody Display::fb_active {
    fb_active $fb_active
a145 3
configbody Display::fb_update {
    fb_update $fb_update
}
d147 6
a152 3
configbody Display::size {
    if {!$initializing} {
	size $size
d156 5
a160 3
configbody Display::bg {
    if {!$initializing} {
	bg $bg
a161 1
}
d163 4
a166 7
body Display::refresh {} {
    $dm drawBegin
    $dm loadmat [$view model2view] 0
    if {$fb_active < 2} {
	if {$fb_active} {
	    # underlay
	    $dm refreshfb
d169 2
a170 6
	foreach geo $geolist {
	    $dm drawGeom $geo
	}
    } else {
	# overlay
	$dm refreshfb
a171 2
    $dm drawEnd
}
d173 4
a176 21
# Clear the display manager window
body Display::clear {} {
    $dm clear
}

# Get/set the background color
body Display::bg {args} {
    if {$args == ""} {
	$dm bg
    } else {
	$dm bg $args
	refresh
    }
}

body Display::aet {args} {
    set len [llength $args]

    # get aet
    if {$len == 0} {
	return [$view aet]
a178 2
    # set aet
    $view aet $args
d182 6
a187 2
body Display::center {args} {
    set len [llength $args]
d189 2
a190 3
    # get center
    if {$len == 0} {
	return [$view center]
a192 2
    # set center
    $view center $args
d196 2
a197 4
body Display::rot {args} {
    # rotate view
    $view rot $args
    refresh
d200 2
a201 5
body Display::slew {args} {
    if {[llength $args] != 2} {
	return -code error "Display::slew - need two numbers"
    }

d206 2
a207 2
    set _x [expr ([lindex $args 0] - $x2) * $sf]
    set _y [expr (-1.0 * [lindex $args 1] + $y2) * $sf]
d209 1
a209 2
    $view slew "$_x $_y"
    refresh
d212 2
a213 3
body Display::tra {args} {
    # translate view
    $view tra $args
d215 1
d218 2
a219 12
body Display::size {args} {
    set len [llength $args]

    # get size
    if {$len == 0} {
	return [$view size]
    }

    # set size
    $view size $args

    set size [$view size]
d221 1
d224 2
a225 12
body Display::scale {args} {
    set len [llength $args]

    # get scale
    if {$len == 0} {
	return [$view scale]
    }

    # set scale
    $view scale $args

    set size [$view size]
d227 1
d230 2
a231 3
body Display::zoom {sf} {
    $view zoom $sf
    set size [$view size]
d233 1
d236 4
a239 9
body Display::autoview {} {
    if [llength $geolist] {
	set geo [lindex $geolist 0]
	set aview [$geo get_autoview]
	eval $view [lrange $aview 0 1]
	eval $view [lrange $aview 2 3]
	set size [$view size]
	refresh
    }
d242 4
a245 13
body Display::add {glist} {
    if [llength $geolist] {
	set empty_screen 0
    } else {
	set empty_screen 1
    }
    eval lappend geolist $glist

    if $empty_screen {
	autoview
    } else {
	refresh
    }
d248 2
a249 9
body Display::remove {glist} {
    foreach geo $glist {
	set index [lsearch $geolist $geo]
	if {$index == -1} {
	    continue
	}

	set geolist [lreplace $geolist $index $index]
    }
d251 1
d254 4
a257 2
body Display::contents {} {
    return $geolist
d260 2
a261 9
body Display::toggle_zclip {} {
    set zclip [$dm zclip]

    if $zclip {
	$dm zclip 0
    } else {
	$dm zclip 1
    }

d263 1
d266 3
a268 5
body Display::toggle_zbuffer {} {
    set zbuffer [$dm zbuffer]

    if $zbuffer {
	$dm zbuffer 0
d270 1
a270 1
	$dm zbuffer 1
d273 1
a273 1
    refresh
d276 5
a280 2
body Display::toggle_light {} {
    set light [$dm light]
d282 3
a284 7
    if $light {
	$dm light 0
    } else {
	$dm light 1
    }

    refresh
d335 1
a335 1
    $view rot "$dx $dy 0"
d346 1
a346 1
    $view tra "$dx $dy 0"
d364 1
a364 1
    $view zoom $f
d383 1
a383 1
	    $view rot "$f 0 0"
d386 1
a386 1
	    $view rot "0 $f 0"
d389 1
a389 1
	    $view rot "0 0 $f"
d410 1
a410 1
	    $view tra "$f 0 0"
d413 1
a413 1
	    $view tra "0 $f 0"
d416 1
a416 1
	    $view tra "0 0 $f"
d426 9
d493 5
a497 161
    bind $dm <F2> "$this toggle_zclip; break"
    bind $dm <F4> "$this toggle_zbuffer; break"
    bind $dm <F5> "$this toggle_light; break"
}

body Display::handle_configure {} {
    $dm configure
    set dm_size [$dm size]
    set width [lindex $dm_size 0]
    set height [lindex $dm_size 1]
    set invWidth [expr 1.0 / $width]
    set aspect [expr (1.0 * $width) / $height]
    refresh
}

body Display::handle_expose {} {
    refresh
}

body Display::listen {args} {
    set len [llength $args]

    if {$len > 1} {
	return "Usage: $this listen \[port\]"
    }

    if {$len} {
	set port [lindex $args 0]
	set listen [$dm listen $port]
    }

    return $listen
}

body Display::rt {args} {
    if {$listen < 0} {
	return "rt: not listening"
    }

    set len [llength $args]

    if {$len > 1 && [lindex $args 0] == "-geo"} {
	set index [lindex $args 1]
	set args [lrange $args 2 end]
	set geo [lindex $geolist $index]
    } else {
	set geo [lindex $geolist 0]
    }

    if {$geo == ""} {
	return "rt: bad geometry index"
    }

    eval $geo rt $view -F $listen -w $width -n $height -V $aspect $args
#    eval $geo rt $view -F $listen $args
}

body Display::fb_active {args} {
    set len [llength $args]

    if {$len > 1} {
	return "Usage: $this fb_active \[0|1|2\]"
    }

    if {$len} {
	set fba [lindex $args 0]
	if {$fba < 0 || 2 < $fba} {
	    return -code error "Usage: $this fb_active \[0|1|2\]"
	}

	# update saved value
	set fb_active $fba
    }

    refresh
    return $fb_active
}

body Display::fb_update {args} {
    set len [llength $args]

    if {$len > 1} {
	return "Usage: $this fb_update \[0|1\]"
    }

    if {$len} {
	set fbu [lindex $args 0]
	if {$fbu < 0 || 1 < $fbu} {
	    return -code error "Usage: $this fb_update \[0|1\]"
	}

	# update saved value
	set fb_update $fbu
    }

    return $fb_update
}

body Display::dm_size {args} {
    set nargs [llength $args]

    # get display manager window size
    if {$nargs == 0} {
	return $dm_size
    }

    if {$nargs == 1} {
	set w $args
	set h $args
    } elseif {$nargs == 2} {
	set w [lindex $args 0]
	set h [lindex $args 1]
    } else {
	return -code error "dm_size: bad size - $args"
    }

    if {$initializing} {
	set width $w
	set height $h
	set dm_size $args
    } else {
	# make request to set display manager window size
	if {$istoplevel} {
	    wm geometry $dm $w\x$h
	} else {
	    $dm size $w $h
	}
    }
}

body Display::dm_name {} {
    return $dm_name
}

## - fbs_callback
#
# This is called by the display manager object
# when it's framebuffer receives data.
#
proc fbs_callback {dm_obj} {
    foreach obj $::Display::dlist {
	if {$dm_obj == [$obj dm_name]} {
	    if [$obj fb_update] {
		$obj refresh
	    }
	    break
	}
    }
}

## - dgo_callback
#
# This is called by the drawable geometry object.
#
proc dgo_callback {dg_obj} {
    foreach obj $::Display::dlist {
	set contents [$obj contents]
	if {[lsearch $contents $dg_obj] != -1} {
	    $obj refresh
	}
    }
@


1.2
log
@*- code to validate type
@
text
@d48 1
a103 24
    method refresh {}
    method clear {}

    # methods for controlling the view object
    method aet {args}
    method center {args}
    method rot {args}
    method slew {args}
    method tra {args}
    method size {args}
    method scale {args}
    method zoom {sf}
    method autoview {}

    # methods for maintaining the list of geometry objects
    method add {glist}
    method remove {glist}
    method contents {}

    method listen {args}
    method fb_active {args}
    method fb_update {args}
    method rt {args}

d122 28
a149 2
    method dm_size {args}
    method dm_name {}
d224 6
d252 10
@


1.1
log
@Display class
@
text
@d184 9
@

