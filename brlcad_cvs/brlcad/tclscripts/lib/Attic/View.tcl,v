head	1.18;
access;
symbols
	ansi-20040405-merged:1.15.4.1
	postmerge-20040405-ansi:1.16
	premerge-20040404-ansi:1.16
	postmerge-autoconf:1.16
	autoconf-freeze:1.15.12.1
	premerge-autoconf:1.16
	postmerge-20040315-windows:1.16
	premerge-20040315-windows:1.16
	windows-20040315-freeze:1.15.6.1
	autoconf-20031203:1.15
	autoconf-20031202:1.15
	autoconf-branch:1.15.0.12
	phong-branch:1.15.0.10
	photonmap-branch:1.15.0.8
	rel-6-1-DP:1.15
	windows-branch:1.15.0.6
	rel-6-0-2:1.15
	ansi-branch:1.15.0.4
	rel-6-0-1-branch:1.15.0.2
	hartley-6-0-post:1.15
	hartley-6-0-pre:1.15
	rel-6-0-1:1.15
	rel-6-0:1.13
	rel-5-4:1.7.2.1
	offsite-5-3-pre:1.9
	rel-5-3:1.7.2.1
	rel-5-2:1.7.2.1
	rel-5-1-branch:1.7.0.2
	rel-5-1:1.7;
locks; strict;
comment	@# @;


1.18
date	2004.05.21.16.41.21;	author morrison;	state dead;
branches;
next	1.17;

1.17
date	2004.05.10.15.25.29;	author morrison;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.02.17.39.43;	author morrison;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.09.12.22.03;	author rbowers;	state Exp;
branches
	1.15.4.1
	1.15.6.1
	1.15.12.1;
next	1.14;

1.14
date	2002.06.18.20.20.12;	author rbowers;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.03.21.35.11;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	2001.10.03.15.30.17;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.14.16.55.09;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.02.22.28.10;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.09.15.34.39;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.21.21.07.30;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.12.21.53.54;	author bparker;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.05.02.20.47.43;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.28.21.01.00;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.25.21.42.42;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.22.17.27.16;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.18.21.35.37;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.15.22.01.42;	author bparker;	state Exp;
branches;
next	;

1.7.2.1
date	2000.08.16.17.02.25;	author bparker;	state Exp;
branches;
next	;

1.15.4.1
date	2004.03.17.21.23.09;	author morrison;	state Exp;
branches;
next	;

1.15.6.1
date	2004.03.11.23.48.52;	author morrison;	state Exp;
branches;
next	;

1.15.12.1
date	2004.02.12.18.34.48;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.18
log
@moved to src/tclscripts/
@
text
@##                 V I E W . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	The View class wraps LIBRT's view object.
#
class View {
    public variable center {0 0 0}
    public variable ae "0 90 0"
    public variable perspective_angle 0
    public variable coord "v"
    public variable rotate_about "v"
    public variable keypoint "0 0 0"
    public variable units "mm"

    constructor {args} {}
    destructor {}

    public method ae {args}
    public method arot {args}
    public method base2local {args}
    public method center {args}
    public method coord {args}
    public method eye {args}
    public method eye_pos {args}
    public method get_viewname {}
    public method invSize {args}
    public method keypoint {args}
    public method local2base {args}
    public method lookat {args}
    public method model2view {args}
    public method mrot {args}
    public method observer {args}
    public method orientation {args}
    public method perspective {args}
    public method pmat {args}
    public method pmodel2view {args}
    public method pov {args}
    public method rmat {args}
    public method rot {args}
    public method rotate_about {args}
    public method sca {args}
    public method setview {args}
    public method size {args}
    public method slew {args}
    public method tra {args}
    public method units {args}
    public method view2model {args}
    public method vrot {args}
    public method vtra {args}
    public method zoom {args}

    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}

    private method init {}
    private method help_init {}

    private variable view
    private variable help
}

configbody View::center {
    eval View::center $center
}

configbody View::ae {
    eval View::ae $ae
}

configbody View::perspective_angle {
    View::perspective $perspective_angle
}

configbody View::coord {
    View::coord $coord
}

configbody View::rotate_about {
    View::rotate_about $rotate_about
}

configbody View::keypoint {
    eval View::keypoint $keypoint
}

configbody View::units {
    View::units $units
}

body View::constructor {args} {
    # first create view object
    set view [v_open $this\_view]

    # process options
    eval configure $args

    View::init
}

body View::destructor {} {
    rename $view ""
    catch {delete object $help}
}

body View::get_viewname {} {
    return $view
}

body View::ae {args} {
    # get ae
    if {$args == ""} {
	return $ae
    }

    # set ae
    eval $view ae $args
    set ae $args
    return
}

body View::arot {args} {
    eval $view arot $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::base2local {} {
    $view base2local
}

body View::center {args} {
    # get center
    if {$args == ""} {
      return [$view center]
    }

    # set center
    eval $view center $args
    set center $args
    return
}

body View::coord {args} {
    # get coord
    if {$args == ""} {
	return $coord
    }

    eval $view coord $args
    set coord $args
    return
}

body View::eye {args} {
    # get eye
    if {$args == ""} {
	return [$view eye]
    }

    eval $view eye $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::eye_pos {args} {
    eval $view eye_pos $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::invSize {args} {
    eval $view invSize $args
}

body View::keypoint {args} {
    # get keypoint
    if {$args == ""} {
        return [list [$view keypoint]]
    }

    eval $view keypoint $args
    set keypoint $args
    return
}

body View::local2base {} {
    $view local2base
}

body View::lookat {args} {
    eval $view lookat $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::model2view {args} {
    eval $view model2view $args
}

body View::mrot {args} {
    eval $view mrot $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::observer {args} {
    eval $view observer $args
}

body View::orientation {args} {
    eval $view orientation $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::perspective {args} {
    # get perspective angle
    if {$args == ""} {
	return $perspective_angle
    }

    eval $view perspective $args
    set perspective_angle $args
    return
}

body View::pmat {args} {
    eval $view pmat $args
}

body View::pmodel2view {args} {
    eval $view pmodel2view $args
}

body View::pov {args} {
    eval $view pov $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::rmat {args} {
    # get rotation matrix
    if {$args == ""} {
	return [$view rmat]
    }

    eval $view rmat $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::rot {args} {
    # rotate view
    eval $view rot $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::rotate_about {args} {
    # get rotate_about
    if {$args == ""} {
	return $rotate_about
    }

    eval $view rotate_about $args
    set rotate_about $args
    return
}

body View::sca {args} {
    eval $view sca $args
    set size [$view size]
    return
}

body View::setview {args} {
    eval $view setview $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::size {args} {
    # eval $view size $args
    return [eval $view size $args]
}

body View::slew {args} {
    # slew the view
    eval $view slew $args

    set center [$view center]
    return
}

body View::tra {args} {
    # translate view
    eval $view tra $args

    set center [$view center]
    return
}

body View::units {args} {
    # get units
    if {$args == ""} {
	return $units
    }

    # set units
    eval $view units $args
    set units $args
}

body View::view2model {args} {
    eval $view view2model
}

body View::vrot {args} {
    # rotate view
    eval $view rot -v $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::vtra {args} {
    # translate view
    eval $view tra -v $args

    set center [$view center]
    return
}

body View::zoom {args} {
    eval $view zoom $args

    set size [$view size]
    return
}

body View::? {} {
    return [$help ? 20 4]
}

body View::apropos {key} {
    return [$help apropos $key]
}

body View::getUserCmds {} {
    return [$help getCmds]
}

body View::help {args} {
    return [eval $help get $args]
}

body View::init {} {
    eval View::center $center
    eval View::ae $ae
    View::perspective $perspective_angle
    View::coord $coord
    View::rotate_about $rotate_about
    View::keypoint $keypoint
    View::units $units
    View::help_init
}

body View::help_init {} {
    set help [cadwidgets::Help #auto]

    $help add ae		{{["az el tw"]} {set/get the azimuth, elevation and twist}}
    $help add arot		{{x y z angle} {rotate about axis x,y,z by angle (degrees)}}
    $help add center		{{["x y z"]} {set/get the view center}}
    $help add coord		{{[m|v]} {set/get the coodinate system}}
    $help add eye		{{mx my mz} {set eye point to given model coordinates}}	
    $help add eye_pos		{{mx my mz} {set eye position to given model coordinates}}
    $help add invSize		{{} {returns the inverse of view size}}
    $help add keypoint		{{[point]} {set/get the keypoint}}
    $help add lookat		{{x y z} {adjust view to look at given coordinates}}
    $help add model2view	{{} {returns the model2view matrix}}
    $help add mrot		{{x y z} {rotate view using model x,y,z}}
    $help add orientation	{{x y z w} {set view direction from quaternion}}
    $help add perspective	{{[angle]} {set/get the perspective angle}}
    $help add pmat		{{} {get the perspective matrix}}
    $help add pmodel2view	{{} {get the pmodel2view matrix}}
    $help add pov		{{args}	{experimental:  set point-of-view}}
    $help add rmat		{{} {get/set the rotation matrix}}
    $help add rot		{{"x y z"} {rotate the view}}
    $help add rotate_about	{{[e|k|m|v]} {set/get the rotate about point}}
    $help add sca		{{sfactor} {scale by sfactor}}
    $help add setview		{{x y z} {set the view given angles x, y, and z in degrees}}
    $help add size		{{vsize} {set/get the view size}}
    $help add slew		{{"x y"} {slew the view}}
    $help add tra		{{[-v|-m] "x y z"} {translate the view}}
    $help add units		{{[unit]} {get/set the local units}}
    $help add vrot		{{xdeg ydeg zdeg} {rotate viewpoint}}
    $help add vtra		{{"x y z"} {translate the view}}
    $help add zoom		{{sf} {zoom view by specified scale factor}}
}
@


1.17
log
@Bob Parker's view modifications, png framebuffer support, shaded drawing mode
@
text
@@


1.16
log
@update copyright to include span through 2003
@
text
@a22 1
    public variable size 1000
d36 1
d44 1
a79 4
configbody View::size {
    View::size $size
}

d147 4
d154 1
a154 1
	return $center
d202 1
a202 1
	return $keypoint
d210 4
d321 2
a322 9
    # get size
    if {$args == ""} {
	return $size
    }

    # set size
    eval $view size $args
    set size $args
    return
a396 1
    View::size $size
@


1.15
log
@-* Bob Parker added support for get_eyepoint
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998 by the United States Army
@


1.15.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.15.6.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.15.12.1
log
@merge from HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.14
log
@-* Improved "eye" command by Bob Parker
@
text
@d1 441
a441 441
##                 V I E W . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	The View class wraps LIBRT's view object.
#
class View {
    public variable size 1000
    public variable center {0 0 0}
    public variable ae "0 90 0"
    public variable perspective_angle 0
    public variable coord "v"
    public variable rotate_about "v"
    public variable keypoint "0 0 0"
    public variable units "mm"

    constructor {args} {}
    destructor {}

    public method ae {args}
    public method arot {args}
    public method center {args}
    public method coord {args}
    public method eye {args}
    public method eye_pos {args}
    public method get_viewname {}
    public method invSize {args}
    public method keypoint {args}
    public method lookat {args}
    public method model2view {args}
    public method mrot {args}
    public method observer {args}
    public method orientation {args}
    public method perspective {args}
    public method pmat {args}
    public method pmodel2view {args}
    public method pov {args}
    public method rmat {args}
    public method rot {args}
    public method rotate_about {args}
    public method sca {args}
    public method setview {args}
    public method size {args}
    public method slew {args}
    public method tra {args}
    public method units {args}
    public method view2model {args}
    public method vrot {args}
    public method vtra {args}
    public method zoom {args}

    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}

    private method init {}
    private method help_init {}

    private variable view
    private variable help
}

configbody View::size {
    View::size $size
}

configbody View::center {
    eval View::center $center
}

configbody View::ae {
    eval View::ae $ae
}

configbody View::perspective_angle {
    View::perspective $perspective_angle
}

configbody View::coord {
    View::coord $coord
}

configbody View::rotate_about {
    View::rotate_about $rotate_about
}

configbody View::keypoint {
    eval View::keypoint $keypoint
}

configbody View::units {
    View::units $units
}

body View::constructor {args} {
    # first create view object
    set view [v_open $this\_view]

    # process options
    eval configure $args

    View::init
}

body View::destructor {} {
    rename $view ""
    catch {delete object $help}
}

body View::get_viewname {} {
    return $view
}

body View::ae {args} {
    # get ae
    if {$args == ""} {
	return $ae
    }

    # set ae
    eval $view ae $args
    set ae $args
    return
}

body View::arot {args} {
    eval $view arot $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::center {args} {
    # get center
    if {$args == ""} {
	return $center
    }

    # set center
    eval $view center $args
    set center $args
    return
}

body View::coord {args} {
    # get coord
    if {$args == ""} {
	return $coord
    }

    eval $view coord $args
    set coord $args
    return
}

body View::eye {args} {
    # get eye
    if {$args == ""} {
	return [$view eye]
    }

    eval $view eye $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::eye_pos {args} {
    eval $view eye_pos $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::invSize {args} {
    eval $view invSize $args
}

body View::keypoint {args} {
    # get keypoint
    if {$args == ""} {
	return $keypoint
    }

    eval $view keypoint $args
    set keypoint $args
    return
}

body View::lookat {args} {
    eval $view lookat $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::model2view {args} {
    eval $view model2view $args
}

body View::mrot {args} {
    eval $view mrot $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::observer {args} {
    eval $view observer $args
}

body View::orientation {args} {
    eval $view orientation $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::perspective {args} {
    # get perspective angle
    if {$args == ""} {
	return $perspective_angle
    }

    eval $view perspective $args
    set perspective_angle $args
    return
}

body View::pmat {args} {
    eval $view pmat $args
}

body View::pmodel2view {args} {
    eval $view pmodel2view $args
}

body View::pov {args} {
    eval $view pov $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::rmat {args} {
    # get rotation matrix
    if {$args == ""} {
	return [$view rmat]
    }

    eval $view rmat $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::rot {args} {
    # rotate view
    eval $view rot $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::rotate_about {args} {
    # get rotate_about
    if {$args == ""} {
	return $rotate_about
    }

    eval $view rotate_about $args
    set rotate_about $args
    return
}

body View::sca {args} {
    eval $view sca $args
    set size [$view size]
    return
}

body View::setview {args} {
    eval $view setview $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::size {args} {
    # get size
    if {$args == ""} {
	return $size
    }

    # set size
    eval $view size $args
    set size $args
    return
}

body View::slew {args} {
    # slew the view
    eval $view slew $args

    set center [$view center]
    return
}

body View::tra {args} {
    # translate view
    eval $view tra $args

    set center [$view center]
    return
}

body View::units {args} {
    # get units
    if {$args == ""} {
	return $units
    }

    # set units
    eval $view units $args
    set units $args
}

body View::view2model {args} {
    eval $view view2model
}

body View::vrot {args} {
    # rotate view
    eval $view rot -v $args

    set ae [$view ae]
    set center [$view center]
    return
}

body View::vtra {args} {
    # translate view
    eval $view tra -v $args

    set center [$view center]
    return
}

body View::zoom {args} {
    eval $view zoom $args

    set size [$view size]
    return
}

body View::? {} {
    return [$help ? 20 4]
}

body View::apropos {key} {
    return [$help apropos $key]
}

body View::getUserCmds {} {
    return [$help getCmds]
}

body View::help {args} {
    return [eval $help get $args]
}

body View::init {} {
    View::size $size
    eval View::center $center
    eval View::ae $ae
    View::perspective $perspective_angle
    View::coord $coord
    View::rotate_about $rotate_about
    View::keypoint $keypoint
    View::units $units
    View::help_init
}

body View::help_init {} {
    set help [cadwidgets::Help #auto]

    $help add ae		{{["az el tw"]} {set/get the azimuth, elevation and twist}}
    $help add arot		{{x y z angle} {rotate about axis x,y,z by angle (degrees)}}
    $help add center		{{["x y z"]} {set/get the view center}}
    $help add coord		{{[m|v]} {set/get the coodinate system}}
    $help add eye		{{mx my mz} {set eye point to given model coordinates}}	
    $help add eye_pos		{{mx my mz} {set eye position to given model coordinates}}
    $help add invSize		{{} {returns the inverse of view size}}
    $help add keypoint		{{[point]} {set/get the keypoint}}
    $help add lookat		{{x y z} {adjust view to look at given coordinates}}
    $help add model2view	{{} {returns the model2view matrix}}
    $help add mrot		{{x y z} {rotate view using model x,y,z}}
    $help add orientation	{{x y z w} {set view direction from quaternion}}
    $help add perspective	{{[angle]} {set/get the perspective angle}}
    $help add pmat		{{} {get the perspective matrix}}
    $help add pmodel2view	{{} {get the pmodel2view matrix}}
    $help add pov		{{args}	{experimental:  set point-of-view}}
    $help add rmat		{{} {get/set the rotation matrix}}
    $help add rot		{{"x y z"} {rotate the view}}
    $help add rotate_about	{{[e|k|m|v]} {set/get the rotate about point}}
    $help add sca		{{sfactor} {scale by sfactor}}
    $help add setview		{{x y z} {set the view given angles x, y, and z in degrees}}
    $help add size		{{vsize} {set/get the view size}}
    $help add slew		{{"x y"} {slew the view}}
    $help add tra		{{[-v|-m] "x y z"} {translate the view}}
    $help add units		{{[unit]} {get/set the local units}}
    $help add vrot		{{xdeg ydeg zdeg} {rotate viewpoint}}
    $help add vtra		{{"x y z"} {translate the view}}
    $help add zoom		{{sf} {zoom view by specified scale factor}}
}
@


1.13
log
@*- changed individual arguments to args (in slew and zoom) to let
   the "command" return a usage message instead of letting
   tcl do it
@
text
@d174 5
@


1.12
log
@Added the following methods:
  arot eye eye_pos invSize lookat model2view mrot orientation
  pmat pmodel2view pov rmat sca setview view2model vrot vtra
@
text
@d59 1
a59 1
    public method slew {x y}
d65 1
a65 1
    public method zoom {sf}
d139 1
d147 1
d159 1
d170 1
d175 4
d183 4
d201 1
d206 4
d218 4
d230 4
d244 1
d257 4
d264 5
d270 4
d282 1
d293 1
d298 2
d304 4
d319 1
d322 1
a322 1
body View::slew {x y} {
d324 1
a324 1
    $view slew [list $x $y]
d327 1
d335 1
d359 1
d367 1
d370 2
a371 2
body View::zoom {sf} {
    eval $view zoom $sf
d374 1
@


1.11
log
@*- initialize perspective_angle to 0
@
text
@d25 1
a25 1
    public variable aet "0 90 0"
d35 2
a36 1
    public method aet {args}
d39 2
d42 1
d44 3
a46 1
    public method model2view {}
d48 1
d50 4
a53 1
    public method pmodel2view {}
d56 2
d62 1
d87 2
a88 2
configbody View::aet {
    eval View::aet $aet
d130 9
a138 2
body View::observer {args} {
    eval $view observer $args
d141 2
a142 5
body View::aet {args} {
    # get aet
    if {$args == ""} {
	return $aet
    }
d144 2
a145 3
    # set aet
    $view aet $args
    set aet $args
d155 1
a155 1
    $view center $args
d159 78
d239 1
a239 1
    $view rot $args
d241 1
a241 1
    set aet [$view aet]
d245 5
a249 3
body View::slew {x y} {
    # slew the view
    $view slew [list $x $y]
d251 2
a252 1
    set center [$view center]
d255 3
a257 3
body View::tra {args} {
    # translate view
    $view tra $args
d259 2
a260 1
    set center [$view center]
d270 1
a270 1
    $view size $args
d274 14
d295 1
a295 1
    $view units $args
d299 4
d305 1
a305 1
    $view rot -v $args
d307 1
a307 1
    set aet [$view aet]
d313 1
a313 1
    $view tra -v $args
d319 1
a319 1
    $view zoom $sf
a323 48
body View::model2view {} {
    $view model2view
}

body View::pmodel2view {} {
    $view pmodel2view
}

body View::perspective {args} {
    # get perspective angle
    if {$args == ""} {
	return $perspective_angle
    }

    $view perspective $args
    set perspective_angle $args
}

body View::coord {args} {
    # get coord
    if {$args == ""} {
	return $coord
    }

    $view coord $args
    set coord $args
}

body View::keypoint {args} {
    # get keypoint
    if {$args == ""} {
	return $keypoint
    }

    $view keypoint $args
    set keypoint $args
}

body View::rotate_about {args} {
    # get rotate_about
    if {$args == ""} {
	return $rotate_about
    }

    $view rotate_about $args
    set rotate_about $args
}

d343 1
a343 1
    eval View::aet $aet
d355 2
a356 1
    $help add aet		{{["az el tw"]} {set/get the azimuth, elevation and twist}}
d359 3
d363 4
d368 4
d374 2
d378 4
a381 1
    $help add tra		{{"x y z"} {translate the view}}
@


1.10
log
@*- use rename instead of calling the embedded
   object's close command
@
text
@d26 1
a26 1
    public variable perspective_angle 90
@


1.9
log
@*- add the following methods:
   units, vrot, vtra, coord,
   keypoint, rotate_about, init
*- add the following public variables:
   coord, rotate_about, keypoint units
@
text
@d109 2
a110 2
    $view close
    delete object $help
@


1.8
log
@Add help methods.
@
text
@d27 4
d37 1
d39 1
d45 1
d49 3
d58 2
d82 16
d105 1
a105 5
    View::size $size
    eval View::center $center
    eval View::aet $aet
    View::perspective $perspective_angle
    View::help_init
d148 1
d173 25
d199 1
a199 1
    set size $args
d226 30
d272 12
d289 2
d293 1
@


1.7
log
@*- remove scale method and variable
*- alphabetized method names
@
text
@d44 8
a51 1
    private variable view ""
d81 1
d86 1
d174 29
@


1.7.2.1
log
@Make use of Help object.
@
text
@d44 1
a44 8
    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}
    private method help_init {}

    private variable view
    private variable help
a73 1
    View::help_init
a77 1
    delete object $help
a164 29
}

body View::? {} {
    return [$help ? 20 4]
}

body View::apropos {key} {
    return [$help apropos $key]
}

body View::getUserCmds {} {
    return [$help getCmds]
}

body View::help {args} {
    return [eval $help get $args]
}

body View::help_init {} {
    set help [cadwidgets::Help #auto]

    $help add aet		{{["az el tw"]} {set/get the azimuth, elevation and twist}}
    $help add center		{{["x y z"]} {set/get the view center}}
    $help add perspective	{{[angle]} {set/get the perspective angle}}
    $help add rot		{{"x y z"} {rotate the view}}
    $help add size		{{vsize} {set/get the view size}}
    $help add slew		{{"x y"} {slew the view}}
    $help add tra		{{"x y z"} {translate the view}}
    $help add zoom		{{sf} {zoom view by specified scale factor}}
@


1.6
log
@*- move constructor and destructor implementation
   outside of class body
@
text
@a23 1
    public variable scale 500
a30 2
    public method get_name {}
    public method observer {args}
d33 5
d39 1
a41 2
    public method size {args}
    public method scale {args}
a42 3
    public method model2view {}
    public method pmodel2view {}
    public method perspective {args}
a50 4
configbody View::scale {
    View::scale $scale
}

d80 1
a80 1
body View::get_name {} {
a139 1
    set scale [$view scale]
a142 13
body View::scale {args} {
    # get scale
    if {$args == ""} {
	return $scale
    }

    # set scale
    $view scale $args

    set size [$view size]
    set scale $args
}

a146 1
    set scale [$view scale]
@


1.5
log
@*-
@
text
@a22 2
    protected variable view ""

d29 2
a30 16
    constructor {args} {
	# first create view object
	set view [v_open $this\_view]

	# process options
	eval configure $args

        View::size $size
	eval View::center $center
	eval View::aet $aet
	View::perspective $perspective_angle
    }

    destructor {
	$view close
    }
d45 2
d67 17
@


1.4
log
@*- during construction set the imbedded view_obj
   according to the options
@
text
@a48 1

@


1.3
log
@*- new variable: perspective_angle
*- add methods: perspective, pmodel2view, get_name
*- modify slew's argument list
@
text
@d23 1
a23 1
    private variable view ""
d25 4
a28 4
    public variable size ""
    public variable scale ""
    public variable center ""
    public variable aet ""
d35 1
a35 1
	# now safe to process options
d38 4
a41 6
	# initialize public variables
	set size [$view size]
	set scale [$view scale]
	set center [$view center]
	set aet [$view aet]
	$view perspective $perspective_angle
d73 1
a73 1
    View::center $center
d77 1
a77 1
    View::aet $aet
@


1.2
log
@*- add methods model2view and observer
@
text
@d29 1
d43 1
d50 2
d56 1
a56 1
    public method slew {args}
d62 2
d67 1
a67 1
    size $size
d71 1
a71 1
    scale $scale
d75 1
a75 1
    center $center
d79 9
a87 1
    aet $aet
d123 1
a123 1
body View::slew {args} {
d125 1
a125 1
    $view slew $args
d172 14
@


1.1
log
@The View class wraps LIBRT's view object.
@
text
@d48 1
d57 1
d76 4
a80 2
    set len [llength $args]

d82 1
a82 1
    if {$len == 0} {
d88 1
a88 1
    set aet [$view aet]
a91 2
    set len [llength $args]

d93 1
a93 1
    if {$len == 0} {
d99 1
a99 1
    set center [$view center]
d105 1
d119 1
a123 2
    set len [llength $args]

d125 1
a125 1
    if {$len == 0} {
a131 1
    set size [$view size]
d133 1
a136 2
    set len [llength $args]

d138 1
a138 1
    if {$len == 0} {
d146 1
a146 1
    set scale [$view scale]
d154 4
@

