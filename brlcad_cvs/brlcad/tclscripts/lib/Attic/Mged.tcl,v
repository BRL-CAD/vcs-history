head	1.31;
access;
symbols
	ansi-20040405-merged:1.28.4.1
	postmerge-20040405-ansi:1.29
	premerge-20040404-ansi:1.29
	postmerge-autoconf:1.29
	autoconf-freeze:1.28.12.1
	premerge-autoconf:1.29
	postmerge-20040315-windows:1.29
	premerge-20040315-windows:1.29
	windows-20040315-freeze:1.28.6.1
	autoconf-20031203:1.28
	autoconf-20031202:1.28
	autoconf-branch:1.28.0.12
	phong-branch:1.28.0.10
	photonmap-branch:1.28.0.8
	rel-6-1-DP:1.28
	windows-branch:1.28.0.6
	rel-6-0-2:1.28
	ansi-branch:1.28.0.4
	rel-6-0-1-branch:1.28.0.2
	hartley-6-0-post:1.28
	hartley-6-0-pre:1.28
	rel-6-0-1:1.28
	rel-6-0:1.26
	rel-5-4:1.15.2.5
	offsite-5-3-pre:1.19
	rel-5-3:1.15.2.5
	rel-5-2:1.15.2.1
	rel-5-1-branch:1.15.0.2
	rel-5-1:1.15;
locks; strict;
comment	@# @;


1.31
date	2004.05.21.16.41.20;	author morrison;	state dead;
branches;
next	1.30;

1.30
date	2004.05.10.15.25.29;	author morrison;	state Exp;
branches;
next	1.29;

1.29
date	2004.02.02.17.39.43;	author morrison;	state Exp;
branches;
next	1.28;

1.28
date	2002.07.09.20.30.22;	author rbowers;	state Exp;
branches
	1.28.4.1
	1.28.6.1
	1.28.12.1;
next	1.27;

1.27
date	2002.06.19.20.17.26;	author butler;	state Exp;
branches;
next	1.26;

1.26
date	2002.02.05.03.17.37;	author jra;	state Exp;
branches;
next	1.25;

1.25
date	2001.12.03.23.17.42;	author bparker;	state Exp;
branches;
next	1.24;

1.24
date	2001.11.29.17.22.49;	author bparker;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.27.17.56.39;	author bparker;	state Exp;
branches;
next	1.22;

1.22
date	2001.11.16.21.37.15;	author bparker;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.03.15.35.34;	author bparker;	state Exp;
branches;
next	1.20;

1.20
date	2001.03.26.19.01.50;	author bparker;	state Exp;
branches;
next	1.19;

1.19
date	2001.02.27.19.12.41;	author bparker;	state Exp;
branches;
next	1.18;

1.18
date	2001.02.16.22.34.12;	author bparker;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.19.22.30.12;	author bparker;	state Exp;
branches;
next	1.16;

1.16
date	2000.07.21.21.09.11;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	2000.05.26.20.11.53;	author bparker;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2000.05.19.20.57.46;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.18.21.43.17;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.12.21.55.16;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.05.13.31.38;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.03.18.15.16;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.02.21.00.17;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.16.21.48.02;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.07.22.21.32;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.03.23.09.11;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.02.23.07.16;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.29.22.24.53;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.29.19.15.53;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.01.20.17.58;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.31.21.01.38;	author bparker;	state Exp;
branches;
next	;

1.15.2.1
date	2000.08.16.17.02.25;	author bparker;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2001.01.11.23.13.36;	author bparker;	state Exp;
branches;
next	1.15.2.3;

1.15.2.3
date	2001.02.05.18.20.46;	author bparker;	state Exp;
branches;
next	1.15.2.4;

1.15.2.4
date	2001.02.05.21.05.17;	author bparker;	state Exp;
branches;
next	1.15.2.5;

1.15.2.5
date	2001.02.27.16.15.10;	author bparker;	state Exp;
branches;
next	;

1.28.4.1
date	2004.03.17.21.23.09;	author morrison;	state Exp;
branches;
next	;

1.28.6.1
date	2004.03.11.23.48.52;	author morrison;	state Exp;
branches;
next	;

1.28.12.1
date	2004.02.12.18.34.48;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.31
log
@moved to src/tclscripts/
@
text
@##                 M G E D . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	The Mged class inherits from QuadDisplay and contains
#       a Database object.
#

option add *Mged.width 400 widgetDefault
option add *Mged.height 400 widgetDefault

itcl::class Mged {
    inherit QuadDisplay

    itk_option define -unitsCallback unitsCallback UnitsCallback ""

    constructor {file args} {
	eval QuadDisplay::constructor
    } {}
    destructor {}

    #----------------------------------#
    # Commands related to the Database #
    #----------------------------------#
    #
    public {
	method adjust {args}
	method attr {args}
	method binary {args}
	method blast {args}
	method c {args}
	method cat {args}
	method clear {args}
	method color {args}
	method comb {args}
	method concat {args}
	method copyeval {args}
	method cp {args}
	method dbip {args}
	method draw {args}
	method dump {args}
	method dup {args}
	method E {args}
	method erase {args}
	method erase_all {args}
	method ev {args}
	method expand {args}
	method find {args}
	method form {args}
	method g {args}
	method get {args}
	method get_eyemodel {viewObj}
	method hide {args}
	method how {args}
	method i {args}
	method illum {obj}
	method keep {args}
	method kill {args}
	method killall {args}
	method killtree {args}
	method l {args}
	method label {args}
	method listeval {args}
	method ls {args}
	method lt {args}
	method make_bb {name args}
	method make_name {args}
	method match {args}
	method mv {args}
	method mvall {args}
	method nmg_collapse {args}
	method nmg_simplify {args}
	method opendb {args}
	method overlay {args}
	method pathlist {args}
	method paths {args}
	method prcolor {args}
	method push {args}
	method put {args}
	method r {args}
	method report {args}
	method rm {args}
	method rt_gettrees {args}
	method set_transparency {args}
	method shaded_mode {args}
	method shells {args}
	method showmats {args}
	method summary {args}
	method title {args}
	method tol {args}
	method tops {args}
	method track {args}
	method tree {args}
	method unhide {args}
	method units {args}
	method vdraw {args}
	method whatid {args}
	method whichair {args}
	method whichid {args}
	method who {args}
	method xpush {args}
	method zap {args}
	
	method ? {}
	method apropos {key}
	method help {args}
	method getUserCmds {}
    }

    private {
	variable db
	variable dg
    }
}

itcl::body Mged::constructor {file args} {
    set db [Database #auto $file]
    set dg [$db Drawable::get_dgname]
    addAll $dg

    # sync up the units between the Database and QuadDisplay
    QuadDisplay::units [$db units -s]

    catch {eval itk_initialize $args}
}

itcl::body Mged::destructor {} {
    ::delete object $db
}

#----------------------------------#
# Commands related to the Database #
#----------------------------------#
#
itcl::body Mged::opendb {args} {
    eval $db open $args
}

itcl::body Mged::match {args} {
    eval $db match $args
}

itcl::body Mged::get {args} {
    eval $db get $args
}

itcl::body Mged::put {args} {
    eval $db put $args
}

itcl::body Mged::adjust {args} {
    eval $db adjust $args
}

itcl::body Mged::attr {args} {
    eval $db attr $args
}

itcl::body Mged::form {args} {
    eval $db form $args
}

itcl::body Mged::tops {args} {
    eval $db tops $args
}

itcl::body Mged::shells {args} {
    eval $db shells $args
}

itcl::body Mged::showmats {args} {
    eval $db showmats $args
}

itcl::body Mged::summary {args} {
    eval $db summary $args
}

itcl::body Mged::rt_gettrees {args} {
    eval $db rt_gettrees $args
}

itcl::body Mged::set_transparency {args} {
    eval $db set_transparency $args
}

itcl::body Mged::shaded_mode {args} {
    eval $db shaded_mode $args
}

itcl::body Mged::dump {args} {
    eval $db dump $args
}

itcl::body Mged::dbip {args} {
    eval $db dbip $args
}

itcl::body Mged::l {args} {
    eval $db l $args
}

itcl::body Mged::listeval {args} {
    eval $db listeval $args
}

itcl::body Mged::ls {args} {
    eval $db ls $args
}

itcl::body Mged::lt {args} {
    eval $db lt $args
}

itcl::body Mged::pathlist {args} {
    eval $db pathlist $args
}

itcl::body Mged::paths {args} {
    eval $db paths $args
}

itcl::body Mged::expand {args} {
    eval $db expand $args
}

itcl::body Mged::kill {args} {
    eval $db kill $args
}

itcl::body Mged::killall {args} {
    eval $db killall $args
}

itcl::body Mged::killtree {args} {
    eval $db killtree $args
}

itcl::body Mged::cp {args} {
    eval $db cp $args
}

itcl::body Mged::mv {args} {
    eval $db mv $args
}

itcl::body Mged::mvall {args} {
    eval $db mvall $args
}

itcl::body Mged::nmg_collapse {args} {
    eval $db nmg_collapse $args
}

itcl::body Mged::nmg_simplify {args} {
    eval $db nmg_simplify $args
}

itcl::body Mged::copyeval {args} {
    eval $db copyeval $args
}

itcl::body Mged::concat {args} {
    eval $db concat $args
}

itcl::body Mged::dup {args} {
    eval $db dup $args
}

itcl::body Mged::g {args} {
    eval $db g $args
}

itcl::body Mged::rm {args} {
    eval $db rm $args
}

itcl::body Mged::c {args} {
    eval $db c $args
}

itcl::body Mged::comb {args} {
    eval $db comb $args
}

itcl::body Mged::find {args} {
    eval $db find $args
}

itcl::body Mged::whichair {args} {
    eval $db whichair $args
}

itcl::body Mged::whichid {args} {
    eval $db whichid $args
}

itcl::body Mged::title {args} {
    eval $db title $args
}

itcl::body Mged::track {args} {
    eval $db track $args
}

itcl::body Mged::tree {args} {
    eval $db tree $args
}

itcl::body Mged::unhide {args} {
    eval $db unhide $args
}

itcl::body Mged::color {args} {
    eval $db color $args
}

itcl::body Mged::prcolor {args} {
    eval $db prcolor $args
}

itcl::body Mged::tol {args} {
    eval $db tol $args
}

itcl::body Mged::push {args} {
    eval $db push $args
}

itcl::body Mged::whatid {args} {
    eval $db whatid $args
}

itcl::body Mged::keep {args} {
    eval $db keep $args
}

itcl::body Mged::cat {args} {
    eval $db cat $args
}

itcl::body Mged::hide {args} {
    eval $db hide $args
}

itcl::body Mged::how {args} {
    eval $db how $args
}

itcl::body Mged::i {args} {
    eval $db i $args
}

itcl::body Mged::make_bb {name args} {
    eval $db make_bb $name $args
}

itcl::body Mged::make_name {args} {
    eval $db make_name $args
}

itcl::body Mged::units {args} {
    set rval [eval QuadDisplay::units $args]

    # must be a "get"
    if {[llength $args] == 0} {
	return $rval
    }

    if {$itk_option(-unitsCallback) != ""} {
	catch {eval $itk_option(-unitsCallback) $args}
    }

    eval $db units $args
}

#
# get_eyemodel - returns a list containing the viewsize, orientation,
#                and eye_pt strings. Useful for constructing Rt scripts
#
itcl::body Mged::get_eyemodel {viewObj} {
    return [eval $db get_eyemodel $viewObj]
}

itcl::body Mged::draw {args} {
    set who [who]

    if {$who == ""} {
	set blank 1
    } else {
	set blank 0
    }

    if {$blank} {
	# stop observing the Drawable
	detach_drawableAll $dg
	set result [eval $db draw $args]
	# resume observing the Drawable
	attach_drawableAll $dg

	# stop observing the View
	detach_viewAll
	autoviewAll
	# resume observing the View
	attach_viewAll

	# We need to refresh here because nobody was observing
	# during the changes to the Drawable and the View. This
	# was done in order to prevent multiple refreshes.
	refreshAll
    } else {
	set result [eval $db draw $args]
    }

    return $result
}

itcl::body Mged::E {args} {
    set who [who]

    if {$who == ""} {
	set blank 1
    } else {
	set blank 0
    }

    if {$blank} {
	# stop observing the Drawable
	detach_drawableAll $dg
	set result [eval $db E $args]
	# resume observing the Drawable
	attach_drawableAll $dg

	# stop observing the View
	detach_viewAll
	autoviewall
	# resume observing the View
	attach_viewAll

	# We need to refresh here because nobody was observing
	# during the changes to the Drawable and the View. This
	# was done in order to prevent multiple refreshes.
	refreshAll
    } else {
	set result [eval $db E $args]

	#XXX This is a temporary hack. I need to look at why
	#    the Drawable's observers are not being notified.
	refreshAll
    }

    return $result
}

itcl::body Mged::erase {args} {
    eval $db erase $args
}

itcl::body Mged::who {args} {
    eval $db who $args
}

itcl::body Mged::xpush {args} {
    eval $db xpush $args
}

itcl::body Mged::zap {args} {
    eval $db zap $args
}

itcl::body Mged::binary {args} {
    eval $db binary $args
}

itcl::body Mged::blast {args} {
    eval $db blast $args
}

itcl::body Mged::clear {args} {
    eval $db clear $args
}

itcl::body Mged::ev {args} {
    eval $db ev $args
}

itcl::body Mged::erase_all {args} {
    eval $db erase_all $args
}

itcl::body Mged::overlay {args} {
    eval $db overlay $args
}

itcl::body Mged::vdraw {args} {
    eval $db vdraw $args
}

itcl::body Mged::illum {args} {
    eval $db illum $args
}

itcl::body Mged::label {args} {
    eval $db label $args
}

itcl::body Mged::r {args} {
    eval $db r $args
}

itcl::body Mged::report {args} {
    eval $db report $args
}

itcl::body Mged::? {} {
    return "[QuadDisplay::?]\n[$db ?]"
}

itcl::body Mged::apropos {key} {
    return "[QuadDisplay::apropos $key] [$db apropos $key]"
}

itcl::body Mged::help {args} {
    if {[llength $args] && [lindex $args 0] != {}} {
	if {[catch {eval QuadDisplay::help $args} result]} {
	    set result [eval $db help $args]
	}

	return $result
    }

    # list all help messages for QuadDisplay and Db
    return "[QuadDisplay::help][$db help]"
}

itcl::body Mged::getUserCmds {} {
    return "? apropos help [QuadDisplay::getUserCmds] [$db getUserCmds]"
}
@


1.30
log
@Bob Parker's view modifications, png framebuffer support, shaded drawing mode
@
text
@@


1.29
log
@update copyright to include span through 2003
@
text
@d30 2
d69 1
d99 2
d107 1
d134 4
a137 1
    addall $dg
d198 8
d318 4
d362 4
d379 11
d412 1
a412 1
	detach_drawableall $dg
d415 1
a415 1
	attach_drawableall $dg
d418 2
a419 2
	detach_viewall
	autoviewall
d421 1
a421 1
	attach_viewall
d426 1
a426 1
	refreshall
d435 34
a468 1
    eval $db E $args
@


1.28
log
@-* add get_eyemodel cmd
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998 by the United States Army
@


1.28.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.28.6.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.28.12.1
log
@merge from HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.27
log
@SURVICE mods
@
text
@d27 1
a27 1
class Mged {
d35 83
a117 78
    ######################### Commands related to the Database #########################
    public method adjust {args}
    public method attr {args}
    public method binary {args}
    public method blast {args}
    public method c {args}
    public method cat {args}
    public method clear {args}
    public method color {args}
    public method comb {args}
    public method concat {args}
    public method copyeval {args}
    public method cp {args}
    public method dbip {args}
    public method draw {args}
    public method dump {args}
    public method dup {args}
    public method E {args}
    public method erase {args}
    public method erase_all {args}
    public method ev {args}
    public method expand {args}
    public method find {args}
    public method form {args}
    public method g {args}
    public method get {args}
    public method hide {args}
    public method i {args}
    public method illum {obj}
    public method keep {args}
    public method kill {args}
    public method killall {args}
    public method killtree {args}
    public method l {args}
    public method label {args}
    public method listeval {args}
    public method ls {args}
    public method lt {args}
    public method make_bb {name args}
    public method make_name {args}
    public method match {args}
    public method mv {args}
    public method mvall {args}
    public method nmg_collapse {args}
    public method nmg_simplify {args}
    public method opendb {args}
    public method overlay {args}
    public method pathlist {args}
    public method paths {args}
    public method prcolor {args}
    public method push {args}
    public method put {args}
    public method r {args}
    public method report {args}
    public method rm {args}
    public method rt_gettrees {args}
    public method shaded_mode {args}
    public method shells {args}
    public method showmats {args}
    public method summary {args}
    public method title {args}
    public method tol {args}
    public method tops {args}
    public method tree {args}
    public method unhide {args}
    public method units {args}
    public method vdraw {args}
    public method whatid {args}
    public method whichair {args}
    public method whichid {args}
    public method who {args}
    public method xpush {args}
    public method zap {args}

    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}
d119 4
a122 2
    private variable db
    private variable dg
d125 1
a125 1
body Mged::constructor {file args} {
d133 1
a133 1
body Mged::destructor {} {
d137 5
a141 2
######################### Commands related to the Database #########################
body Mged::opendb {args} {
d145 1
a145 1
body Mged::match {args} {
d149 1
a149 1
body Mged::get {args} {
d153 1
a153 1
body Mged::put {args} {
d157 1
a157 1
body Mged::adjust {args} {
d161 1
a161 1
body Mged::attr {args} {
d165 1
a165 1
body Mged::form {args} {
d169 1
a169 1
body Mged::tops {args} {
d173 1
a173 1
body Mged::shells {args} {
d177 1
a177 1
body Mged::showmats {args} {
d181 1
a181 1
body Mged::summary {args} {
d185 1
a185 1
body Mged::rt_gettrees {args} {
d189 1
a189 1
body Mged::dump {args} {
d193 1
a193 1
body Mged::dbip {args} {
d197 1
a197 1
body Mged::l {args} {
d201 1
a201 1
body Mged::listeval {args} {
d205 1
a205 1
body Mged::ls {args} {
d209 1
a209 1
body Mged::lt {args} {
d213 1
a213 1
body Mged::pathlist {args} {
d217 1
a217 1
body Mged::paths {args} {
d221 1
a221 1
body Mged::expand {args} {
d225 1
a225 1
body Mged::kill {args} {
d229 1
a229 1
body Mged::killall {args} {
d233 1
a233 1
body Mged::killtree {args} {
d237 1
a237 1
body Mged::cp {args} {
d241 1
a241 1
body Mged::mv {args} {
d245 1
a245 1
body Mged::mvall {args} {
d249 1
a249 1
body Mged::nmg_collapse {args} {
d253 1
a253 1
body Mged::nmg_simplify {args} {
d257 1
a257 1
body Mged::copyeval {args} {
d261 1
a261 1
body Mged::concat {args} {
d265 1
a265 1
body Mged::dup {args} {
d269 1
a269 1
body Mged::g {args} {
d273 1
a273 1
body Mged::rm {args} {
d277 1
a277 1
body Mged::c {args} {
d281 1
a281 1
body Mged::comb {args} {
d285 1
a285 1
body Mged::find {args} {
d289 1
a289 1
body Mged::whichair {args} {
d293 1
a293 1
body Mged::whichid {args} {
d297 1
a297 1
body Mged::title {args} {
d301 1
a301 1
body Mged::tree {args} {
d305 1
a305 1
body Mged::unhide {args} {
d309 1
a309 1
body Mged::color {args} {
d313 1
a313 1
body Mged::prcolor {args} {
d317 1
a317 1
body Mged::tol {args} {
d321 1
a321 1
body Mged::push {args} {
d325 1
a325 1
body Mged::whatid {args} {
d329 1
a329 1
body Mged::keep {args} {
d333 1
a333 1
body Mged::cat {args} {
d337 1
a337 1
body Mged::hide {args} {
d341 1
a341 1
body Mged::i {args} {
d345 1
a345 1
body Mged::make_bb {name args} {
d349 1
a349 1
body Mged::make_name {args} {
d353 1
a353 1
body Mged::units {args} {
d357 9
a365 1
body Mged::draw {args} {
d398 1
a398 1
body Mged::E {args} {
d402 1
a402 1
body Mged::erase {args} {
d406 1
a406 1
body Mged::who {args} {
d410 1
a410 1
body Mged::xpush {args} {
d414 1
a414 1
body Mged::zap {args} {
d418 1
a418 1
body Mged::binary {args} {
d422 1
a422 1
body Mged::blast {args} {
d426 1
a426 1
body Mged::clear {args} {
d430 1
a430 1
body Mged::ev {args} {
d434 1
a434 1
body Mged::erase_all {args} {
d438 1
a438 1
body Mged::overlay {args} {
d442 1
a442 1
body Mged::vdraw {args} {
d446 1
a446 1
body Mged::illum {args} {
d450 1
a450 1
body Mged::label {args} {
d454 1
a454 1
body Mged::r {args} {
d458 1
a458 5
body Mged::shaded_mode {args} {
    eval $db shaded_mode $args
}

body Mged::report {args} {
d462 1
a462 1
body Mged::? {} {
d466 1
a466 1
body Mged::apropos {key} {
d470 1
a470 1
body Mged::help {args} {
d483 1
a483 1
body Mged::getUserCmds {} {
@


1.26
log
@mods to reflect chnages in "attr" command (elimination of attr_rm)
@
text
@d91 1
d438 4
@


1.25
log
@*- modified getUserCmds to also return "? apropos help"
@
text
@a37 1
    public method attr_rm {args}
a151 4
}

body Mged::attr_rm {args} {
    eval $db attr_rm $args
@


1.24
log
@*- add "args" parameter to the "clear" and "dbip" methods
*- use eval in the clear, dbip and zap methods
@
text
@d470 1
a470 1
    return "[QuadDisplay::getUserCmds] [$db getUserCmds]"
@


1.23
log
@*- fixed bug in the "who" method
@
text
@d43 1
a43 1
    public method clear {}
d49 1
a49 1
    public method dbip {}
d70 1
a70 1
    public method label {obj}
d187 2
a188 2
body Mged::dbip {} {
    $db dbip
d401 1
a401 1
    $db zap $args
d412 2
a413 2
body Mged::clear {} {
    $db clear
@


1.22
log
@*- add binary method
@
text
@d392 2
a393 2
body Mged::who {} {
    $db who
@


1.21
log
@Added the following methods:
   attr attr_rm copyeval hide lt nmg_collapse nmg_simplify
   pathlist shells showmats summary unhide version xpush
@
text
@d39 1
d402 4
@


1.20
log
@*- add "r" method
@
text
@d37 2
d46 1
d52 1
d61 1
d72 1
d78 2
d82 1
d91 3
d98 1
d105 2
a106 1
    public method zap {}
d150 8
d166 12
d190 8
d202 2
a203 2
body Mged::l {args} {
    eval $db l $args
d206 2
a207 2
body Mged::listeval {args} {
    eval $db listeval $args
d242 12
d298 4
d330 4
d383 4
d391 6
a396 2
body Mged::zap {} {
    $db zap
d399 2
a400 2
body Mged::who {} {
    $db who
@


1.19
log
@*- add "units" method
@
text
@d365 4
@


1.18
log
@*- add make_bb and make_name methods to
   the wdb_obj
@
text
@d86 1
d282 4
@


1.17
log
@*- set default width and height
@
text
@d67 2
d273 8
@


1.16
log
@Add help methods.
@
text
@d23 4
@


1.15
log
@*- add report method
@
text
@d73 1
a73 1
    public method report_on_drawable {args}
d87 7
a93 2
    private variable db ""
    private variable dg ""
d346 1
a346 1
body Mged::report_on_drawable {args} {
d348 25
@


1.15.2.1
log
@Make use of Help object.
@
text
@d73 1
a73 1
    public method report {args}
d87 2
a88 7
    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}

    private variable db
    private variable dg
d341 1
a341 1
body Mged::report {args} {
a342 25
}

body Mged::? {} {
    return "[QuadDisplay::?]\n[$db ?]"
}

body Mged::apropos {key} {
    return "[QuadDisplay::apropos $key] [$db apropos $key]"
}

body Mged::help {args} {
    if {[llength $args] && [lindex $args 0] != {}} {
	if {[catch {eval QuadDisplay::help $args} result]} {
	    set result [eval $db help $args]
	}

	return $result
    }

    # list all help messages for QuadDisplay and Db
    return "[QuadDisplay::help][$db help]"
}

body Mged::getUserCmds {} {
    return "[QuadDisplay::getUserCmds] [$db getUserCmds]"
@


1.15.2.2
log
@*- set a few options
@
text
@a22 4

option add *Mged.width 400 widgetDefault
option add *Mged.height 400 widgetDefault

@


1.15.2.3
log
@Add make_bb method.
@
text
@a66 1
    public method make_bb {name args}
a270 4
}

body Mged::make_bb {name args} {
    eval $db make_bb $name $args
@


1.15.2.4
log
@Add make_name method (imported and modified from MGED).
@
text
@a67 1
    public method make_name {args}
a275 4
}

body Mged::make_name {args} {
    eval $db make_name $args
@


1.15.2.5
log
@*- add units member function
@
text
@a85 1
    public method units {args}
a280 4
}

body Mged::units {args} {
    eval $db units $args
@


1.14
log
@*- remove type from constructors parameter list
@
text
@d73 1
d339 4
@


1.13
log
@*- alphabetize method names (easier to document)
@
text
@d26 2
a27 2
    constructor {file {type X} args} {
	eval QuadDisplay::constructor $type
d90 1
a90 1
body Mged::constructor {file {type X} args} {
@


1.12
log
@*- changed get_name to get_dgname
@
text
@a31 4
    public method opendb {args}
    public method match {args}
    public method get {args}
    public method put {args}
d33 10
a42 3
    public method form {args}
    public method tops {args}
    public method rt_gettrees {args}
d44 4
a47 5
    public method dbip {}
    public method ls {args}
    public method l {args}
    public method listeval {args}
    public method paths {args}
d49 7
d59 5
a63 1
    public method cp {args}
d66 7
a72 3
    public method concat {args}
    public method dup {args}
    public method g {args}
d74 1
a74 6
    public method r {args}
    public method c {args}
    public method comb {args}
    public method find {args}
    public method whichair {args}
    public method whichid {args}
d76 2
d79 1
a79 4
    public method color {args}
    public method prcolor {args}
    public method tol {args}
    public method push {args}
d81 3
a83 5
    public method keep {args}
    public method cat {args}
    public method i {args}
    public method draw {args}
    public method erase {args}
a84 9
    public method who {args}
    public method blast {args}
    public method clear {}
    public method ev {args}
    public method erase_all {args}
    public method overlay {args}
    public method vdraw {args}
    public method illum {obj}
    public method label {obj}
@


1.11
log
@*- catch itk_initialize to get around
   a potential bug in [incr Tcl/Tk]
@
text
@d92 1
a92 1
    set dg [$db Drawable::get_name]
@


1.10
log
@*- reintroduce type as an argument to the constructor
@
text
@d94 2
a95 1
    eval itk_initialize $args
@


1.9
log
@*- This class no longer contains a command window. It
   also inherits from QuadDisplay instead of
   iwidgets::Panedwindow.
@
text
@d26 2
a27 2
    constructor {file args} {
	eval QuadDisplay::constructor $args
d90 1
a90 1
body Mged::constructor {file args} {
d94 1
d103 1
a103 3
    set file [eval $db open $args]
    wm title $top $file
    return $file
@


1.8
log
@*- define option: dmtype
@
text
@d20 2
a21 2
#	The Mged class inherits from Panedwindow and contains a QuadDisplay
#       object and a Command object.
d24 1
a24 1
    inherit iwidgets::Panedwindow
d26 3
a28 1
    constructor {file args} {}
d31 1
a31 3
    itk_option define -prompt prompt Prompt "mged> "
    itk_option define -dmtype dmtype Dmtype X

a32 1
    public method openFile {}
a85 29
    public method pane {args}
    public method multi_pane {args}
    public method toggle_multi_pane {}
    public method aet {args}
    public method center {args}
    public method rot {args}
    public method slew {x y}
    public method tra {args}
    public method size {args}
    public method scale {args}
    public method zoom {sf}
    public method autoview {}
    public method listen {args}
    public method fb_active {args}
    public method fb_update {args}
    public method rt {args}
    public method rtcheck {args}

    public method reset_panes {}
    public method default_views {}
    public method edit_style {style}

    protected method attach_view {}
    protected method attach_drawable {}
    protected method detach_view {}
    protected method detach_drawable {}
    protected method refresh {}

    private variable qd ""
a87 7
    private variable cmd ""
    private variable top ""
    private variable screen ""
    private variable fsd ""

    private variable ftypes {{{MGED Database} {.g}} {{All Files} {*}}}
    private variable dir ""
a90 12
    # process options
    eval itk_initialize $args

    add qd
    set qd [QuadDisplay [childsite qd].qd $itk_option(-dmtype)]
    pack $qd -fill both -expand yes

    add cmd
    set cmd [Command [childsite cmd].cmd -prompt $itk_option(-prompt) -wrap word \
	    -hscrollmode dynamic -vscrollmode dynamic -cmd_prefix $this]
    pack $cmd -fill both -expand yes

d93 1
a93 16
    $qd addall $dg

    # initialize pane
    paneconfigure 0 -margin 0
    paneconfigure 1 -margin 4

    # default real estate allocation:  geometry ---> 75%, command window ---> 25%
    fraction 75 25

    set dir [pwd]
    set top [winfo toplevel [string map {:: ""} $this]]
    set screen [winfo screen $top]
    wm title $top $file

    # create and initialize file selection dialog
    set fsd [fileselectiondialog $top#auto -modality application]
a96 2
    ::delete object $qd
    ::delete object $cmd
a99 2
######################### User Interface #########################

a106 14
body Mged::openFile {} {
    #XXX the fileselectiondialog is slow to activate
    if {[$fsd activate]} {
	set filename [$fsd get]
	if {$filename != ""} {
	    set ret [catch {opendb $filename} msg]
	    if {$ret} {
		cad_dialog .uncool $screen "Error" \
			$msg info 0 OK
	    }
	}
    }
}

d274 1
a274 1
	detach_drawable
d277 1
a277 1
	attach_drawable
d280 2
a281 2
	detach_view
	autoview
d283 1
a283 1
	attach_view
d288 1
a288 1
	refresh
a338 106

######################### Commands related to QuadDisplay #########################
body Mged::pane {args} {
    eval $qd pane $args
}

body Mged::multi_pane {args} {
    eval $qd multi_pane $args
}

body Mged::toggle_multi_pane {} {
    eval $qd toggle_multi_pane
}

body Mged::aet {args} {
    eval $qd aet $args
}

body Mged::center {args} {
    eval $qd center $args
}

body Mged::rot {args} {
    eval $qd rot $args
}

body Mged::slew {x y} {
    eval $qd slew $x $y
}

body Mged::tra {args} {
    eval $qd tra $args
}

body Mged::size {args} {
    eval $qd size $args
}

body Mged::scale {args} {
    eval $qd scale $args
}

body Mged::zoom {sf} {
    eval $qd zoom $sf
}

body Mged::autoview {} {
    $qd autoviewall
}

body Mged::listen {args} {
    eval $qd listen $args
}

body Mged::fb_active {args} {
    eval $qd fb_active $args
}

body Mged::fb_update {args} {
    eval $qd fb_update $args
}

body Mged::rt {args} {
    eval $qd rt $args
}

body Mged::rtcheck {args} {
    eval $qd rtcheck $args
}

body Mged::default_views {} {
    $qd default_views
}

body Mged::edit_style {args} {
    eval $cmd edit_style $args
}

body Mged::attach_view {} {
    $qd attach_viewall
}

body Mged::attach_drawable {} {
    $qd attach_drawableall $dg
}

body Mged::detach_view {} {
    $qd detach_viewall
}

body Mged::detach_drawable {} {
    $qd detach_drawableall $dg
}

body Mged::refresh {} {
    $qd refreshall
}

######################### Other Public Methods #########################
body Mged::reset_panes {} {
    # default real estate allocation:  geometry ---> 75%, command window ---> 25%
    fraction 75 25
    $qd resetall
}

######################### Private Methods #########################
@


1.7
log
@*- add methods: illum, label
@
text
@d30 1
d132 1
a132 1
    set qd [QuadDisplay [childsite qd].qd ogl]
@


1.6
log
@*- add method edit_style
*- changed opendbFile to openFile
@
text
@d83 2
d411 8
@


1.5
log
@*- new methods: opendbFile, default_views, attach_view,
   attach_drawable, detach_view, detach_drawable, refresh
*- new variables: dg, top, screen, ftypes, dir
*- mods to Mged::draw to reduce the number of refreshes
   when going from a blank screen to non-blank
@
text
@d32 1
a32 1
    public method opendbFile {}
d104 1
d118 1
d133 2
a134 1
    set cmd [Command [childsite cmd].cmd -prompt $itk_option(-prompt) -cmd_prefix $this]
d152 3
d172 10
a181 15
body Mged::opendbFile {} {
    set filename [tk_getOpenFile -parent $top -filetypes $ftypes \
	    -initialdir $dir -title "Open MGED Database"]

    if {$filename != ""} {
	# save the directory
	set dir [file dirname $filename]

	set ret [catch {opendb $filename} msg]
	if {$ret} {
	    cad_dialog .uncool $screen "Error" \
		    $msg info 0 OK
	} else {
	    cad_dialog .cool $screen "File loaded" \
		    $msg info 0 OK
d482 4
@


1.4
log
@*- added lots of methods
@
text
@d32 1
d103 7
d113 1
d115 5
d135 2
a136 1
    $qd addall [$db Drawable::get_name]
d144 5
d153 1
a154 1
    ::delete object $cmd
d161 22
a182 1
    eval $db open $args
d350 6
a355 1
    set result [eval $db draw $args]
d357 2
a358 1
    if {$blank} {
d360 9
d477 24
@


1.3
log
@*- inherit only from iwidgets::Panedwindow
*- many other mods
@
text
@d32 40
d73 1
d75 8
a82 5
    public method ls {args}
    public method l {args}
    public method tops {}
    public method who {}
    public method autoview {}
d84 2
a85 2
    public method exit {}
    public method q {}
d94 7
a100 1
    public method multi_pane {args}
d137 101
a237 3
#########################  User Interface #########################
body Mged::exit {} {
    ::q
d240 2
a241 2
body Mged::q {} {
    ::q
d244 54
a297 2
body Mged::opendb {args} {
    eval $db open $args
d318 4
d326 10
a335 2
body Mged::ls {args} {
    eval $db ls $args
d338 2
a339 2
body Mged::l {args} {
    eval $db l $args
d342 2
a343 2
body Mged::tops {} {
    $db tops
d346 2
a347 2
body Mged::who {} {
    $db who
d350 2
a351 2
body Mged::autoview {} {
    $qd autoviewall
d354 1
d359 8
d399 22
a420 2
body Mged::multi_pane {args} {
    eval $qd multi_pane $args
d423 1
@


1.2
log
@*- hide open
@
text
@d20 2
a21 1
#	The Mged class inherits from Database and MultiDisplay.
d24 1
a24 1
    inherit MultiDisplay Database
d26 2
a27 5
    constructor {args} {
	Database::constructor
	eval MultiDisplay::constructor $args
    } {
    }
d29 1
a29 2
    destructor {
    }
a30 4
    private method add {geo}
    private method remove {geo}
    private method contents {}
    private method open {}
d33 52
d87 7
a93 5
body Mged::add {geo} {
    MultiDisplay::$ul configure -geolist $dg
    MultiDisplay::$ur configure -geolist $dg
    MultiDisplay::$ll configure -geolist $dg
    MultiDisplay::$lr configure -geolist $dg
d97 2
a98 2
    set len [llength $args]
    set result [catch {eval Database::open $args} msg]
d100 7
a106 2
    if {$len} {
	add $dg
d109 27
a135 1
    return -code $result $msg
d138 43
a180 3
body Mged::draw {args} {
    set geo [$dg who]
    eval $dg draw $args
d182 4
a185 6
    if {$geo == ""} {
	MultiDisplay::$ul autoview
	MultiDisplay::$ur autoview
	MultiDisplay::$ll autoview
	MultiDisplay::$lr autoview
    }
d187 2
@


1.1
log
@Mged class
@
text
@d37 1
d51 1
a51 1
    set result [catch {eval open $args} msg]
@

