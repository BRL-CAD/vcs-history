head	1.21;
access;
symbols
	ansi-20040405-merged:1.18.4.1
	postmerge-20040405-ansi:1.19
	premerge-20040404-ansi:1.19
	postmerge-autoconf:1.19
	autoconf-freeze:1.18.12.1
	premerge-autoconf:1.19
	postmerge-20040315-windows:1.19
	premerge-20040315-windows:1.19
	windows-20040315-freeze:1.18.6.1
	autoconf-20031203:1.18
	autoconf-20031202:1.18
	autoconf-branch:1.18.0.12
	phong-branch:1.18.0.10
	photonmap-branch:1.18.0.8
	rel-6-1-DP:1.18
	windows-branch:1.18.0.6
	rel-6-0-2:1.18
	ansi-branch:1.18.0.4
	rel-6-0-1-branch:1.18.0.2
	hartley-6-0-post:1.18
	hartley-6-0-pre:1.18
	rel-6-0-1:1.18
	rel-6-0:1.17
	rel-5-4:1.12.2.2
	offsite-5-3-pre:1.15
	rel-5-3:1.12.2.2
	rel-5-2:1.12
	rel-5-1-branch:1.12.0.2
	rel-5-1:1.12;
locks; strict;
comment	@# @;


1.21
date	2004.05.21.16.41.20;	author morrison;	state dead;
branches;
next	1.20;

1.20
date	2004.05.10.15.25.29;	author morrison;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.02.17.39.43;	author morrison;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.19.20.17.26;	author butler;	state Exp;
branches
	1.18.4.1
	1.18.6.1
	1.18.12.1;
next	1.17;

1.17
date	2001.12.03.23.15.04;	author bparker;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.02.22.28.10;	author bparker;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.30.15.19.16;	author bparker;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.08.17.16.44;	author bparker;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.06.21.59.27;	author bparker;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.12.22.00.11;	author bparker;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2000.05.05.13.30.29;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.03.16.43.14;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.02.20.52.13;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.16.21.47.13;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.03.23.21.00;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.03.23.14.30;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.29.22.18.10;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.29.19.16.44;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.25.21.39.35;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.22.17.31.09;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.18.21.38.20;	author bparker;	state Exp;
branches;
next	;

1.12.2.1
date	2000.12.06.22.00.21;	author bparker;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2001.01.08.17.18.19;	author bparker;	state Exp;
branches;
next	;

1.18.4.1
date	2004.03.17.21.23.05;	author morrison;	state Exp;
branches;
next	;

1.18.6.1
date	2004.03.11.23.48.51;	author morrison;	state Exp;
branches;
next	;

1.18.12.1
date	2004.02.12.18.34.48;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.21
log
@moved to src/tclscripts/
@
text
@##                 D M . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	The Dm class wraps LIBDM's display manager object.
#
class Dm {
    inherit itk::Widget

    itk_option define -bg bg Bg {0 0 0}
    itk_option define -debug debug Debug 0
    itk_option define -depthMask depthMask DepthMask 1
    itk_option define -dmsize dmsize Dmsize {512 512}
    itk_option define -fb_active fb_active Fb_active 0
    itk_option define -fb_observe fb_observe Fb_observe 1
    itk_option define -light light Light 0
    itk_option define -linestyle linestyle Linestyle 0
    itk_option define -linewidth linewidth Linewidth 0
    itk_option define -listen listen Listen -1
    itk_option define -perspective perspective Perspective 0
    itk_option define -transparency transparency Transparency 0
    itk_option define -type type Type X
    itk_option define -zbuffer zbuffer Zbuffer 0
    itk_option define -zclip zclip Zclip 0

    constructor {args} {}
    destructor {}

    # methods that wrap LIBDM-display-manager-object commands
    public method bg {args}
    public method bounds {args}
    public method clear {}
    public method debug {args}
    public method depthMask {args}
    public method dmsize {args}
    public method drawBegin {}
    public method drawEnd {}
    public method drawGeom {args}
    public method drawLine {x1 y1 x2 y2}
    public method drawPoint {x y}
    public method drawString {str x y size use_aspect}
    public method drawModelAxes {args}
    public method drawViewAxes {args}
    public method drawCenterDot {args}
    public method fg {args}
    public method flush {}
    public method get_aspect {}
    public method light {args}
    public method linestyle {args}
    public method linewidth {args}
    public method listen {args}
    public method loadmat {mat eye}
    public method normal {}
    public method observer {args}
    public method perspective {args}
    public method png {args}
    public method refreshfb {}
    public method sync {}
    public method transparency {args}
    public method zbuffer {args}
    public method zclip {args}

    public method fb_active {args}
    public method fb_observe {args}

    public method ? {}
    public method apropos {key}
    public method help {args}
    public method getUserCmds {}

    # methods for handling window events
    protected method toggle_zclip {}
    protected method toggle_zbuffer {}
    protected method toggle_light {}
    protected method toggle_perspective {}
    protected method toggle_transparency {}
    protected method handle_configure {}
    protected method doBindings {}
    protected method changeType {type}
    protected method createDm {type}
    protected method initDm {}

    protected variable width 512
    protected variable height 512
    protected variable invWidth 0.001953125
    protected variable invHeight 0.001953125
    protected variable aspect 1.0
    protected variable invAspect 1.0

    private method helpInit {}

    private variable initializing 1
    private variable priv_type X
    private variable tkwin

    private variable help
}

body Dm::constructor {args} {
    if {[catch {dm_bestXType :0} priv_type]} {
	set priv_type X
    }

    # process options now (i.e. -type may have been specified)
    eval itk_initialize $args
    set initializing 0

    set itk_option(-type) $priv_type
    createDm $itk_option(-type)
    initDm
    helpInit
}

body Dm::destructor {} {
    $tkwin listen -1
    rename $tkwin ""

    catch {delete object $help}
}

configbody Dm::dmsize {
    if {!$initializing} {
	# save size
	set s $itk_option(-dmsize)

	# For now, put back the old value.
	# If the size really does change, size will
	# be set in the handle_configure method.
	set itk_option(-dmsize) "$width $height"

	# request a size change
	eval Dm::dmsize $s
    }
}

configbody Dm::listen {
    if {!$initializing} {
	Dm::listen $itk_option(-listen)
    }
}

configbody Dm::fb_active {
    if {!$initializing} {
	Dm::fb_active $itk_option(-fb_active)
    }
}

configbody Dm::fb_observe {
    if {!$initializing} {
	Dm::fb_observe $itk_option(-fb_observe)
    }
}

configbody Dm::bg {
    if {!$initializing} {
	eval Dm::bg $itk_option(-bg)
    }
}

configbody Dm::light {
    if {!$initializing} {
	Dm::light $itk_option(-light)
    }
}

configbody Dm::depthMask {
    if {!$initializing} {
	Dm::depthMask $itk_option(-depthMask)
    }
}

configbody Dm::transparency {
    if {!$initializing} {
	Dm::transparency $itk_option(-transparency)
    }
}

configbody Dm::zclip {
    if {!$initializing} {
	Dm::zclip $itk_option(-zclip)
    }
}

configbody Dm::zbuffer {
    if {!$initializing} {
	Dm::zbuffer $itk_option(-zbuffer)
    }
}

configbody Dm::perspective {
    if {!$initializing} {
	Dm::perspective $itk_option(-perspective)
    }
}

configbody Dm::debug {
    if {!$initializing} {
	Dm::debug $itk_option(-debug)
    }
}

configbody Dm::linewidth {
    if {!$initializing} {
	Dm::linewidth $itk_option(-linewidth)
    }
}

configbody Dm::type {
    switch $itk_option(-type) {
	X -
	ogl {
	    if {$initializing} {
		set priv_type $itk_option(-type)
	    } else {
		changeType $itk_option(-type)
	    }
	}
	default {
	    error "bad type - $itk_option(-type)"
	}
    }
}

body Dm::observer {args} {
    eval $itk_component(dm) observer $args
}

body Dm::drawBegin {} {
    $itk_component(dm) drawBegin
}

body Dm::drawEnd {} {
    $itk_component(dm) drawEnd
}

# Clear the display manager window
body Dm::clear {} {
    $itk_component(dm) clear
}

body Dm::normal {} {
    $itk_component(dm) normal
}

body Dm::loadmat {mat eye} {
    $itk_component(dm) loadmat $mat $eye
}

body Dm::drawGeom {args} {
    eval $itk_component(dm) drawGeom $args
}

body Dm::drawLine {x1 y1 x2 y2} {
    $itk_component(dm) drawLine $x1 $y1 $x2 $y2
}

body Dm::drawPoint {x y} {
    $itk_component(dm) drawPoint $x $y
}

body Dm::drawString {str x y size use_aspect} {
    $itk_component(dm) drawString $str $x $y $size $use_aspect
}

body Dm::drawModelAxes {args} {
    eval $itk_component(dm) drawModelAxes $args
}

body Dm::drawViewAxes {args} {
    eval $itk_component(dm) drawViewAxes $args
}

body Dm::drawCenterDot {args} {
    eval $itk_component(dm) drawCenterDot $args
}

# Get/set the background color
body Dm::bg {args} {
    if {$args == ""} {
	return $itk_option(-bg)
    }

    $itk_component(dm) bg $args
    set itk_option(-bg) $args
}

# Get/set the foreground color
body Dm::fg {args} {
    if {$args == ""} {
	$itk_component(dm) fg
    } else {
	$itk_component(dm) fg $args
    }
}

# Get/set the line width
body Dm::linewidth {args} {
    if {$args == ""} {
	return $itk_option(-linewidth)
    }

    $itk_component(dm) linewidth $args
    set itk_option(-linewidth) $args
}

# Get/set the line style
body Dm::linestyle {args} {
    if {$args == ""} {
	return $itk_option(-linestyle)
    }

    $itk_component(dm) linestyle $args
    set itk_option(-linestyle) $args
}

body Dm::zclip {args} {
    if {$args == ""} {
	return $itk_option(-zclip)
    }

    $itk_component(dm) zclip $args
    set itk_option(-zclip) $args
}

body Dm::zbuffer {args} {
    if {$args == ""} {
	return $itk_option(-zbuffer)
    }

    $itk_component(dm) zbuffer $args
    set itk_option(-zbuffer) $args
}

# Get/set light
body Dm::light {args} {
    if {$args == ""} {
	return $itk_option(-light)
    }

    $itk_component(dm) light $args
    set itk_option(-light) $args
}

# Get/set depthMask
body Dm::depthMask {args} {
    if {$args == ""} {
	return $itk_option(-depthMask)
    }

    $itk_component(dm) depthMask $args
    set itk_option(-depthMask) $args
}

# Get/set transparency
body Dm::transparency {args} {
    if {$args == ""} {
	return $itk_option(-transparency)
    }

    $itk_component(dm) transparency $args
    set itk_option(-transparency) $args
}

body Dm::perspective {args} {
    if {$args == ""} {
	return $itk_option(-perspective)
    }

    $itk_component(dm) perspective $args
    set itk_option(-perspective) $args
}

body Dm::png {args} {
    eval $itk_component(dm) png $args
}

body Dm::bounds {args} {
    eval $itk_component(dm) bounds $args
}

body Dm::debug {args} {
    if {$args == ""} {
	return $itk_option(-debug)
    }

    $itk_component(dm) debug $args
    set itk_option(-debug) $args
}

body Dm::listen {args} {
    if {$args == ""} {
	return $itk_option(-listen)
    }

    set itk_option(-listen) [$itk_component(dm) listen $args]
}

body Dm::refreshfb {} {
    $itk_component(dm) refreshfb
}

body Dm::flush {} {
    $itk_component(dm) flush
}

body Dm::sync {} {
    $itk_component(dm) sync
}

body Dm::dmsize {args} {
    set nargs [llength $args]

    # get display manager window size
    if {$nargs == 0} {
	return $itk_option(-dmsize)
    }

    if {$nargs == 1} {
	set w $args
	set h $args
    } elseif {$nargs == 2} {
	set w [lindex $args 0]
	set h [lindex $args 1]
    } else {
	error "size: bad size - $args"
    }

    $itk_component(dm) size $w $h
}

body Dm::get_aspect {} {
    $itk_component(dm) get_aspect
}

body Dm::fb_active {args} {
    if {$args == ""} {
	return $itk_option(-fb_active)
    }

    if {$args < 0 || 2 < $args} {
	error "Usage: fb_active \[0|1|2\]"
    }

    # update saved value
    set itk_option(-fb_active) $args
}

body Dm::fb_observe {args} {
    if {$args == ""} {
	return $itk_option(-fb_observe)
    }

    if {$args != 0 && $args != 1} {
	error "Usage: fb_observe \[0|1\]"
    }

    # update saved value
    set itk_option(-fb_observe) $args

    switch $itk_option(-fb_observe) {
	0 {
	    catch {Dm::observer detach $this}
	    return ""
	}
	1 {
	    Dm::observer attach $this
	}
    }
}

body Dm::toggle_zclip {} {
    if {$itk_option(-zclip)} {
	$itk_component(dm) zclip 0
	set itk_option(-zclip) 0
    } else {
	$itk_component(dm) zclip 1
	set itk_option(-zclip) 1
    }
}

body Dm::toggle_zbuffer {} {
    if {$itk_option(-zbuffer)} {
	$itk_component(dm) zbuffer 0
	set itk_option(-zbuffer) 0
    } else {
	$itk_component(dm) zbuffer 1
	set itk_option(-zbuffer) 1
    }
}

body Dm::toggle_light {} {
    if {$itk_option(-light)} {
	$itk_component(dm) light 0
	set itk_option(-light) 0
    } else {
	$itk_component(dm) light 1
	set itk_option(-light) 1
    }
}

body Dm::toggle_perspective {} {
    if {$itk_option(-perspective)} {
	$itk_component(dm) perspective 0
	set itk_option(-perspective) 0
    } else {
	$itk_component(dm) perspective 1
	set itk_option(-perspective) 1
    }
}

body Dm::toggle_transparency {} {
    if {$itk_option(-transparency)} {
	$itk_component(dm) transparency 0
	set itk_option(-transparency) 0
    } else {
	$itk_component(dm) transparency 1
	set itk_option(-transparency) 1
    }
}

body Dm::handle_configure {} {
    $itk_component(dm) configure

    set itk_option(-dmsize) [$itk_component(dm) size]
    set width [lindex $itk_option(-dmsize) 0]
    set height [lindex $itk_option(-dmsize) 1]
    set invWidth [expr 1.0 / $width]
    set invHeight [expr 1.0 / $height]
    set aspect [get_aspect]
    set invAspect [expr 1.0 / $aspect]
}

body Dm::changeType {type} {
    if {$type != $priv_type} {
	$itk_component(dm) listen -1

	# the close method no longer exists
	#$itk_component(dm) close
	rename $itk_component(dm) ""

	createDm $type
	initDm
	set priv_type $type
    }
}

body Dm::createDm {type} {
    itk_component add dm {
	dm_open $itk_interior.dm $type -t 0 -W $width -N $height
    } {}

    pack $itk_component(dm) -fill both -expand yes
    set tkwin $itk_component(dm)
} 

body Dm::initDm {} {
    eval Dm::dmsize $itk_option(-dmsize)
    Dm::listen $itk_option(-listen)
    Dm::fb_active $itk_option(-fb_active)
    Dm::fb_observe $itk_option(-fb_observe)
    eval Dm::bg $itk_option(-bg)
    Dm::light $itk_option(-light)
    Dm::zclip $itk_option(-zclip)
    Dm::zbuffer $itk_option(-zbuffer)
    Dm::perspective $itk_option(-perspective)
    Dm::debug $itk_option(-debug)
    Dm::linewidth $itk_option(-linewidth)
    Dm::linestyle $itk_option(-linestyle)
    Dm::depthMask $itk_option(-depthMask)
    Dm::transparency $itk_option(-transparency)

    # event bindings
    doBindings
}

body Dm::doBindings {} {
    bind $itk_component(dm) <Enter> "focus $itk_component(dm);"
    bind $itk_component(dm) <Configure> "[code $this Dm::handle_configure]; break"

    # Key Bindings
    bind $itk_component(dm) <F2> "[code $this Dm::toggle_zclip]; break"
    bind $itk_component(dm) <F3> "[code $this Dm::toggle_perspective]; break"
    bind $itk_component(dm) <F4> "[code $this Dm::toggle_zbuffer]; break"
    bind $itk_component(dm) <F5> "[code $this Dm::toggle_light]; break"
    bind $itk_component(dm) <F10> "[code $this Dm::toggle_transparency]; break"
}

body Dm::? {} {
    return [$help ? 20 4]
}

body Dm::apropos {key} {
    return [$help apropos $key]
}

body Dm::help {args} {
    return [eval $help get $args]
}

body Dm::getUserCmds {} {
    return {png}
}

body Dm::helpInit {} {
    set help [cadwidgets::Help #auto]

    $help add png		{{file} {Dump contents of window to a png file}}
}
@


1.20
log
@Bob Parker's view modifications, png framebuffer support, shaded drawing mode
@
text
@@


1.19
log
@update copyright to include span through 2003
@
text
@d27 1
d36 1
d49 1
d57 3
d71 1
d74 1
d81 5
d91 1
d104 3
d110 2
d115 4
d123 1
d126 1
a129 5
#    $itk_component(dm) listen -1
#    $itk_component(dm) close

# Hack around problem that showed up in Itcl3.2
# 
d132 2
d181 12
d264 12
d280 2
a281 2
body Dm::drawPoint {x y} {
    $itk_component(dm) drawPoint $x $y
d284 2
a285 2
body Dm::drawLine {x1 y1 x2 y2} {
    $itk_component(dm) drawLine $x1 $y1 $x2 $y2
d288 2
a289 2
body Dm::drawGeom {args} {
    eval $itk_component(dm) drawGeom $args
d359 20
d388 4
d526 10
d584 2
d596 27
a622 4
    bind $itk_component(dm) <F2> "$this Dm::toggle_zclip; break"
    bind $itk_component(dm) <F3> "$this Dm::toggle_perspective; break"
    bind $itk_component(dm) <F4> "$this Dm::toggle_zbuffer; break"
    bind $itk_component(dm) <F5> "$this Dm::toggle_light; break"
@


1.18
log
@SURVICE mods
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998 by the United States Army
@


1.18.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.18.6.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.18.12.1
log
@merge from HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.17
log
@*- added invHeight and invAspect variables
@
text
@d442 1
a442 1
	set itk_opton(-light) 1
d471 5
a475 1
	$itk_component(dm) close
@


1.16
log
@*- use rename instead of calling the embedded
   object's close command
@
text
@d86 2
a87 1
    protected variable invWidth ""
d89 1
d463 1
d465 1
@


1.15
log
@*- Mods to make 5-1-patches and 6.0 the same
@
text
@d109 1
a109 1
    $tkwin close
@


1.14
log
@Mod to Dm::listen to properly set itk_option(-listen).
@
text
@d480 1
@


1.13
log
@Hack to fix problem that shows up in itcl3.2
@
text
@d338 1
a338 2
    $itk_component(dm) listen $args
    set itk_option(-listen) $args
a339 1

@


1.12
log
@*- alphabetized method names
*- allow type to be dynamically changed
@
text
@d90 1
d103 7
a109 2
    $itk_component(dm) listen -1
    $itk_component(dm) close
@


1.12.2.1
log
@Hack to fix problem that shows up in itcl3.2
@
text
@a89 1
    private variable tkwin
d102 2
a103 7
#    $itk_component(dm) listen -1
#    $itk_component(dm) close

# Hack around problem that showed up in Itcl3.2
# 
    $tkwin listen -1
    $tkwin close
a475 1
    set tkwin $itk_component(dm)
@


1.12.2.2
log
@*- Mod to Dm::listen to properly set itk_option(-listen)
@
text
@d338 2
a339 1
    set itk_option(-listen) [$itk_component(dm) listen $args]
d341 1
@


1.11
log
@*- use error command instead of "return -code error"
*- remove get_name method
@
text
@d25 2
a27 1
    itk_option define -listen listen Listen -1
d29 1
a29 2
    itk_option define -fb_update fb_update Fb_update 1
    itk_option define -bg bg Bg {0 0 0}
d31 3
a33 2
    itk_option define -zclip zclip Zclip 0
    itk_option define -zbuffer zbuffer Zbuffer 0
a34 3
    itk_option define -debug debug Debug 0
    itk_option define -linewidth linewidth Linewidth 0
    itk_option define -linestyle linestyle Linestyle 0
d36 2
d43 5
a47 1
    public method observer {args}
d50 3
a52 3
    public method clear {}
    public method normal {}
    public method loadmat {mat eye}
a53 4
    public method drawPoint {x y}
    public method drawLine {x1 y1 x2 y2}
    public method drawGeom {args}
    public method bg {args}
d55 4
d60 4
a63 5
    public method linestyle {args}
    public method handle_configure {}
    public method zclip {args}
    public method zbuffer {args}
    public method light {args}
a64 3
    public method bounds {args}
    public method debug {args}
    public method listen {args}
a65 1
    public method flush {}
d67 2
a68 2
    public method dmsize {args}
    public method get_aspect {}
a69 1
    # new methods
d71 1
a71 1
    public method fb_update {args}
d78 1
d80 3
d89 1
d97 2
a98 22
    itk_component add dm {
	dm_open $itk_interior.dm $itk_option(-type) -t 0 -W $width -N $height
    } {}

    pack $itk_component(dm) -fill both -expand yes

    # initialize display manager object
    eval Dm::dmsize $itk_option(-dmsize)
    Dm::listen $itk_option(-listen)
    Dm::fb_active $itk_option(-fb_active)
    Dm::fb_update $itk_option(-fb_update)
    eval Dm::bg $itk_option(-bg)
    Dm::light $itk_option(-light)
    Dm::zclip $itk_option(-zclip)
    Dm::zbuffer $itk_option(-zbuffer)
    Dm::perspective $itk_option(-perspective)
    Dm::debug $itk_option(-debug)
    Dm::linewidth $itk_option(-linewidth)
    Dm::linestyle $itk_option(-linestyle)

    # event bindings
    doBindings
d133 1
a133 1
configbody Dm::fb_update {
d135 1
a135 1
	Dm::fb_update $itk_option(-fb_update)
d182 7
a188 7
    if {$initializing} {
	switch $itk_option(-type) {
	    X -
	    ogl {
	    }
	    default {
		error "bad type - $itk_option(-type)"
d190 3
a276 10
body Dm::handle_configure {} {
    $itk_component(dm) configure

    set itk_option(-dmsize) [$itk_component(dm) size]
    set width [lindex $itk_option(-dmsize) 0]
    set height [lindex $itk_option(-dmsize) 1]
    set invWidth [expr 1.0 / $width]
    set aspect [get_aspect]
}

d387 1
a387 1
body Dm::fb_update {args} {
d389 1
a389 1
	return $itk_option(-fb_update)
d392 2
a393 2
    if {$args < 0 || 1 < $args} {
	error "Usage: fb_update \[0|1\]"
d397 1
a397 1
    set itk_option(-fb_update) $args
d399 1
a399 1
    switch $itk_option(-fb_update) {
d448 46
@


1.10
log
@*- remove read-only restriction for -type
   Note - setting this has no effect after initialization
@
text
@a71 1
    public method get_name {}
d293 1
d388 1
a388 1
	return -code error "size: bad size - $args"
a391 1
    set itk_option(-dmsize) "$w $h"
a397 4
body Dm::get_name {} {
    return $itk_component(dm)
}

d404 1
a404 1
	return -code error "Usage: fb_active \[0|1|2\]"
d417 1
a417 1
	return -code error "Usage: fb_update \[0|1\]"
@


1.9
log
@*- simplified the constructor's signature
*- added a few itk_options
@
text
@a208 2
    } else {
	error "type is read-only"
@


1.8
log
@*- provide default for display manager type
@
text
@a24 3
    constructor {{type X} args} {}
    destructor {}

d36 5
a72 1
    public method get_type {}
a82 1
    protected variable dm ""
d87 1
a87 2

    private variable type X
d90 4
a93 10
body Dm::constructor {{_type X} args} {
    switch $_type {
	X -
	ogl {
	    set type $_type
	}
	default {
	    set type X
	}
    }
d96 1
a96 1
	dm_open $itk_interior.dm $type -t 0 -W $width -N $height
a100 3
    # process options
    eval itk_initialize $args

d102 4
d108 1
d110 1
a110 1
    Dm::zclip $itk_option(-zclip)
a111 1
    Dm::listen $itk_option(-listen)
d113 1
a113 1
    Dm::fb_update $itk_option(-fb_update)
d125 8
a132 2
    # save size
    set s $itk_option(-dmsize)
d134 3
a136 7
    # For now, put back the old value.
    # If the size really does change, size will
    # be set in the handle_configure method.
    set itk_option(-dmsize) "$width $height"

    # request a size change
    eval Dm::dmsize $s
d140 3
a142 1
    Dm::listen $itk_option(-listen)
d146 3
a148 1
    Dm::fb_active $itk_option(-fb_active)
d152 3
a154 1
    Dm::fb_update $itk_option(-fb_update)
d158 3
a160 1
    eval Dm::bg $itk_option(-bg)
d164 3
a166 1
    Dm::light $itk_option(-light)
d170 3
a172 1
    Dm::zclip $itk_option(-zclip)
d176 3
a178 1
    Dm::zbuffer $itk_option(-zbuffer)
d182 3
a184 1
    Dm::perspective $itk_option(-perspective)
d188 3
a190 1
    Dm::debug $itk_option(-debug)
d194 18
a211 1
    Dm::linewidth $itk_option(-linewidth)
d258 1
a258 1
	return $bg
d262 1
a262 1
    set bg $args
d277 1
a277 1
	return $linewidth
d281 1
a281 1
    set linewidth $args
d287 1
a287 3
	$itk_component(dm) linestyle
    } else {
	$itk_component(dm) linestyle $args
d289 3
d314 1
a314 1
	return $itk_optoin(-zbuffer)
d380 1
a380 1
	return $itk_option(-size)
a402 4
}

body Dm::get_type {} {
    return $type
@


1.7
log
@*- catch the call to detach observer
@
text
@d25 1
a25 1
    constructor {args} {}
d91 1
a91 1
body Dm::constructor {_type args} {
@


1.6
log
@*- mods to fb_active and fb_update
@
text
@d404 2
a405 1
	    Dm::observer detach $this
@


1.5
log
@*- initialize aspect to 1.0
*- fixed typo
*- use get_aspect instead of calculating it
@
text
@d119 1
d378 3
a380 1
    set len [llength $args]
d382 2
a383 2
    if {$len > 1} {
	return "Usage: $this fb_active \[0|1|2\]"
d386 2
a387 9
    if {$len} {
	set fba [lindex $args 0]
	if {$fba < 0 || 2 < $fba} {
	    return -code error "Usage: $this fb_active \[0|1|2\]"
	}

	# update saved value
	set itk_option(-fb_active) $fba
    }
d391 3
a393 1
    set len [llength $args]
d395 2
a396 2
    if {$len > 1} {
	return "Usage: $this fb_update \[0|1\]"
d399 9
a407 4
    if {$len} {
	set fbu [lindex $args 0]
	if {$fbu < 0 || 1 < $fbu} {
	    return -code error "Usage: $this fb_update \[0|1\]"
a408 3

	# update saved value
	set itk_option(-fb_update) $fbu
@


1.4
log
@*- a little cleanup
@
text
@d86 1
a86 1
    protected variable aspect ""
d263 1
a263 1
    set $itk_option(-dmsize) [$itk_component(dm) size]
d267 1
a267 1
    set aspect [expr (1.0 * $width) / $height]
@


1.3
log
@*- mods to inherit from itk::Widget
@
text
@d104 1
a104 2
    } {
    }
d108 1
a108 1
    # prcess options
@


1.2
log
@*- mods to change protection level of various variables
   and methods
*- other stuff
@
text
@d23 1
a23 6
    protected variable dm ""
    protected variable width 512
    protected variable height 512
    protected variable invWidth ""
    protected variable aspect ""
    private variable initializing 1
d25 2
a26 24
    public variable name ""
    public variable istoplevel 1
    public variable type X
    public variable size 512
    public variable title ""
    public variable listen -1
    public variable fb_active 0
    public variable fb_update 1
    public variable bg "0 0 0"
    public variable light 0
    public variable zclip 0
    public variable zbuffer 0
    public variable perspective 0
    public variable debug 0
    public variable linewidth 0

    constructor {args} {
	# process options
	eval configure $args

	# create default name
	if {$name == ""} {
	    set name .[string map {:: ""} $this]
	}
d28 11
a38 17
	# create default title
	if {$title == ""} {
	    set title $this
	}

	# create display manager object
	set dm [dm_open $name $type -t $istoplevel -W $width -N $height]

	# initialize display manager object
	$dm clear
	eval bg $bg
	light $light
	zclip $zclip
	zbuffer $zbuffer
	debug $debug
	listen $listen
	linewidth $linewidth
d40 1
a40 23
	# event bindings
	doBindings

	if {$istoplevel} {
	    wm title $dm $title
	}

	set initializing 0
    }

    destructor {
	$dm listen -1
	$dm close
    }

    # methods for handling window events
    protected method toggle_zclip {}
    protected method toggle_zbuffer {}
    protected method toggle_light {}
    protected method toggle_perspective {}
    protected method doBindings {}

    # methods that wrap LIBDM display manager object commands
d66 1
a66 1
    public method size {args}
d71 1
d74 15
d91 14
a104 3
configbody Dm::name {
    if {!$initializing} {
	return -code error "name is read-only"
d106 17
d125 6
a130 1
configbody Dm::size {
d132 1
a132 1
    set s $size
d137 1
a137 1
    set size "$width $height"
d140 1
a140 28
    eval Dm::size $s
}

configbody Dm::title {
    if {$istoplevel && [winfo exists $dm]} {
	wm title $dm $title
    }
}

configbody Dm::istoplevel {
    if {!$initializing} {
	return -code error "istoplevel is read-only"
    }
}

configbody Dm::type {
    if {!$initializing} {
	return -code error "type is read-only"
    }
    
    switch $type {
	X -
	ogl {
	}
	default {
	    set type X
	}
    }
d144 1
a144 3
    if {!$initializing} {
	Dm::listen $listen
    }
d148 1
a148 1
    Dm::fb_active $fb_active
d152 1
a152 1
    Dm::fb_update $fb_update
d156 1
a156 3
    if {!$initializing} {
	Dm::bg $bg
    }
d160 1
a160 3
    if {!$initializing} {
	Dm::light $light
    }
d164 1
a164 3
    if {!$initializing} {
	Dm::zclip $zclip
    }
d168 1
a168 3
    if {!$initializing} {
	Dm::zbuffer $zbuffer
    }
d172 1
a172 3
    if {!$initializing} {
	Dm::perspective $perspective
    }
d176 1
a176 3
    if {!$initializing} {
	Dm::debug $debug
    }
d180 1
a180 3
    if {!$initializing} {
	Dm::linewidth $linewidth
    }
d184 1
a184 1
    eval $dm observer $args
d188 1
a188 1
    $dm drawBegin
d192 1
a192 1
    $dm drawEnd
d197 1
a197 1
    $dm clear
d201 1
a201 1
    $dm normal
d205 1
a205 1
    $dm loadmat $mat $eye
d209 1
a209 1
    $dm drawString $str $x $y $size $use_aspect
d213 1
a213 1
    $dm drawPoint $x $y
d217 1
a217 1
    $dm drawLine $x1 $y1 $x2 $y2
d221 1
a221 1
    eval $dm drawGeom $args
d230 1
a230 1
    $dm bg $args
d237 1
a237 1
	$dm fg
d239 1
a239 1
	$dm fg $args
d249 1
a249 1
    $dm linewidth $args
d256 1
a256 1
	$dm linestyle
d258 1
a258 1
	$dm linestyle $args
d263 4
a266 4
    $dm configure
    set size [$dm size]
    set width [lindex $size 0]
    set height [lindex $size 1]
d273 1
a273 1
	return $zclip
d276 2
a277 2
    $dm zclip $args
    set zclip $args
d282 1
a282 1
	return $zbuffer
d285 2
a286 2
    $dm zbuffer $args
    set zbuffer $args
d292 1
a292 1
	return $light
d295 2
a296 2
    $dm light $args
    set light $args
d301 1
a301 1
	return $perspective
d304 2
a305 2
    $dm perspective $args
    set perspective $args
d309 1
a309 1
    eval $dm bounds $args
d314 1
a314 1
	return $debug
d317 2
a318 2
    $dm debug $args
    set debug $args
d323 1
a323 1
	return $listen
d326 2
a327 2
    $dm listen $args
    set listen $args
d332 1
a332 1
    $dm refreshfb
d336 1
a336 1
    $dm flush
d340 1
a340 1
    $dm sync
d343 1
a343 1
body Dm::size {args} {
d348 1
a348 1
	return $size
d361 2
a362 12
    if {$initializing} {
	set width $w
	set height $h
	set size $args
    } else {
	# make request to set display manager window size
	if {$istoplevel} {
	    wm geometry $dm $w\x$h
	} else {
	    $dm size $w $h
	}
    }
d366 1
a366 1
    $dm get_aspect
d370 5
a374 1
    return $dm
d391 1
a391 1
	set fb_active $fba
a392 2

    return $fb_active
d409 1
a409 1
	set fb_update $fbu
a410 2

    return $fb_update
d414 3
a416 3
    if {$zclip} {
	$dm zclip 0
	set zclip 0
d418 2
a419 2
	$dm zclip 1
	set zclip 1
d424 3
a426 3
    if {$zbuffer} {
	$dm zbuffer 0
	set zbuffer 0
d428 2
a429 2
	$dm zbuffer 1
	set zbuffer 1
d434 3
a436 3
    if {$light} {
	$dm light 0
	set light 0
d438 2
a439 2
	$dm light 1
	set light 1
d444 3
a446 3
    if {$perspective} {
	$dm perspective 0
	set perspective 0
d448 2
a449 2
	$dm perspective 1
	set perspective 1
d454 2
a455 2
    bind $dm <Enter> "focus $dm;"
    bind $dm <Configure> "[code $this Dm::handle_configure]; break"
d458 4
a461 4
    bind $dm <F2> "$this Dm::toggle_zclip; break"
    bind $dm <F3> "$this Dm::toggle_perspective; break"
    bind $dm <F4> "$this Dm::toggle_zbuffer; break"
    bind $dm <F5> "$this Dm::toggle_light; break"
@


1.1
log
@*- [incr Tcl] class that wraps dm_obj
@
text
@d23 5
a27 5
    private variable dm ""
    private variable width 512
    private variable height 512
    private variable invWidth ""
    private variable aspect ""
d89 5
a93 5
    private method toggle_zclip {}
    private method toggle_zbuffer {}
    private method toggle_light {}
    private method toggle_perspective {}
    private method doBindings {}
d110 3
a112 1
    public method dm_configure {}
d114 1
a114 2
    public method zbuffer {args}
    public method zclip {args}
a115 1
    public method perspective {args}
d142 1
a142 1
    # be set in the dm_configure method.
d146 1
a146 1
    eval size $s
d178 1
a178 1
	listen $listen
d183 1
a183 1
    fb_active $fb_active
d187 1
a187 1
    fb_update $fb_update
d192 1
a192 1
	bg $bg
d198 1
a198 1
	light $light
d204 1
a204 1
	zclip $zclip
d210 1
a210 1
	zbuffer $zbuffer
d216 1
a216 1
	perspective $perspective
d222 1
a222 1
	debug $debug
d228 1
a228 1
	linewidth $linewidth
d311 1
a311 1
body Dm::dm_configure {} {
d320 1
a320 2
# Get/set light
body Dm::light {args} {
d322 1
a322 1
	return $light
d325 2
a326 2
    $dm light $args
    set light $args
d338 2
a339 1
body Dm::zclip {args} {
d341 1
a341 1
	return $zclip
d344 2
a345 6
    $dm zclip $args
    set zclip $args
}

body Dm::bounds {args} {
    eval $dm bounds $args
d354 5
a358 1
    set perspective $perspective
d429 1
a429 1
    return $name
d488 1
a488 1
	set zbuffer 0
d498 1
a498 1
	set light 0
d508 1
a508 1
	set perspective 0
d514 1
a514 1
    bind $dm <Configure> "[code $this dm_configure]; break"
d517 4
a520 4
    bind $dm <F2> "$this toggle_zclip; break"
    bind $dm <F3> "$this toggle_perspective; break"
    bind $dm <F4> "$this toggle_zbuffer; break"
    bind $dm <F5> "$this toggle_light; break"
@

