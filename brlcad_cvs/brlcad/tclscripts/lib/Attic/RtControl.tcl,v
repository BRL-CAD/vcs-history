head	1.10;
access;
symbols
	ansi-20040405-merged:1.7.4.1
	postmerge-20040405-ansi:1.8
	premerge-20040404-ansi:1.8
	postmerge-autoconf:1.8
	autoconf-freeze:1.7.12.1
	premerge-autoconf:1.8
	postmerge-20040315-windows:1.8
	premerge-20040315-windows:1.8
	windows-20040315-freeze:1.7.6.1
	autoconf-20031203:1.7
	autoconf-20031202:1.7
	autoconf-branch:1.7.0.12
	phong-branch:1.7.0.10
	photonmap-branch:1.7.0.8
	rel-6-1-DP:1.7
	windows-branch:1.7.0.6
	rel-6-0-2:1.7
	ansi-branch:1.7.0.4
	rel-6-0-1-branch:1.7.0.2
	hartley-6-0-post:1.7
	hartley-6-0-pre:1.7
	rel-6-0-1:1.7
	rel-6-0:1.7
	rel-5-4:1.1.2.7
	offsite-5-3-pre:1.7
	rel-5-3:1.1.2.7
	rel-5-1-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.10
date	2004.05.21.16.41.20;	author morrison;	state dead;
branches;
next	1.9;

1.9
date	2004.05.10.15.25.29;	author morrison;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.02.17.39.43;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.30.15.12.35;	author bparker;	state Exp;
branches
	1.7.4.1
	1.7.6.1
	1.7.12.1;
next	1.6;

1.6
date	2001.01.23.21.03.45;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.22.23.48.02;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.19.22.22.40;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.17.16.05.25;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.11.23.08.45;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.10.23.13.32;	author bparker;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.01.10.23.13.32;	author bparker;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.01.11.23.07.15;	author bparker;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.01.17.16.04.14;	author bparker;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.01.19.21.57.59;	author bparker;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2001.01.22.23.47.42;	author bparker;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2001.01.23.21.02.48;	author bparker;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2001.01.29.23.17.26;	author bparker;	state Exp;
branches;
next	;

1.7.4.1
date	2004.03.17.21.23.09;	author morrison;	state Exp;
branches;
next	;

1.7.6.1
date	2004.03.11.23.48.52;	author morrison;	state Exp;
branches;
next	;

1.7.12.1
date	2004.02.12.18.34.48;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@moved to src/tclscripts/
@
text
@##                 R T C O N T R O L . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998-2004 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	The raytrace control panel is designed to be used with an
#	Mged object. It probably should be an inner class of the Mged
#	class.
#

::itk::usual RtControl {
    keep -tearoff
}

#XXX This should work.
option add *RtControl*tearoff 0 widgetDefault

::itcl::class RtControl {
    inherit ::itk::Toplevel

    itk_option define -olist olist Olist {}
    itk_option define -omode omode Omode {}
    itk_option define -nproc nproc Nproc 1
    itk_option define -hsample hsample Hsample 0
    itk_option define -jitter jitter Jitter 0
    itk_option define -lmodel lmodel Lmodel 0
    itk_option define -other other Other "-A 0.9"
    itk_option define -size size Size 512
    itk_option define -color color Color {0 0 0}
    itk_option define -dest dest Dest ""
    itk_option define -mged mged Mged ""

    public method activate {}
    public method activate_adv {}
    public method deactivate {}
    public method deactivate_adv {}
    public method center {w gs {cw ""}}
    public method update_fb_mode {}

    private method build_adv {}
    private method set_src {pane}
    private method set_dest {pane}
    private method set_size {size}
    private method set_jitter {j}
    private method set_lmodel {lm}
    private method cook_dest {dest}
    private method fb_mode {}
    private method ok {}
    private method raytrace {}
    private method abort {}
    private method clear {}
    private method get_color {}
    private method get_size {}
    private method get_cooked_dest {}
    private method update_control_panel {}
    private method menuStatusCB {w}
    private method leaveCB {}
    private method enterAdvCB {}
    private method enterOkCB {}
    private method enterRaytraceCB {}
    private method enterAbortCB {}
    private method enterClearCB {}
    private method enterDismissCB {}
    private method enterDestCB {}
    private method enterSizeCB {}
    private method enterColorCB {}
    private method getPane {}
    private method getPaneStr {}
    private method getSize {}

    private method menuStatusAdvCB {w}
    private method leaveAdvCB {}
    private method enterDismissAdvCB {}
    private method enterNProcCB {}
    private method enterHSampleCB {}
    private method enterOtherCB {}

    private variable fb_mode 0
    private variable raw_src ""
    private variable win_geom ""
    private variable win_geom_adv ""
    private variable msg ""
    private variable msg_adv ""
    private variable srcM
    private variable destM
    private variable destE
    private variable sizeM
    private variable sizeE
    private variable colorM
    private variable colorE
    private variable jitterM
    private variable lmodelM

    constructor {args} {}
}

::itcl::body RtControl::constructor {args} {
    # revive a few ignored options
    #itk_option add hull.screen

    itk_component add gridF1 {
	::frame $itk_interior.gridF1
    } {
	usual
    }

    itk_component add gridF2 {
	::frame $itk_interior.gridF2 -relief groove -bd 2
    } {
	usual
    }

    itk_component add gridF3 {
	::frame $itk_interior.gridF3
    } {
	usual
    }

    itk_component add menubar {
	::menu $itk_interior.menubar
    } {
	usual
    }
# Why doesn't this work???
#    $itk_component(hull) configure -menu $itk_component(menubar)
    $this component hull configure -menu $itk_component(menubar)

    itk_component add fbM {
	::menu $itk_component(menubar).fb -title "Framebuffer"
    } {
	usual
    }
    bind $itk_component(fbM) <<MenuSelect>> [::itcl::code $this menuStatusCB %W]

    $itk_component(menubar) add cascade -label "Framebuffer" -underline 0 -menu $itk_component(fbM)

    if {0} {
	itk_component add objM {
	    ::menu $itk_component(menubar).obj -title "Objects"
	} {
	    usual
	}

	$itk_component(menubar) add cascade -label "Objects" -underline 0 -menu $itk_component(objM)
    }

    $itk_component(fbM) add radiobutton -value 2 -variable [::itcl::scope fb_mode] \
	    -label "Overlay" -underline 0 \
	    -command [::itcl::code $this fb_mode]
    $itk_component(fbM) add radiobutton -value 1 -variable [::itcl::scope fb_mode] \
	    -label "Underlay" -underline 0 \
	    -command [::itcl::code $this fb_mode]
    $itk_component(fbM) add radiobutton -value 0 -variable [::itcl::scope fb_mode] \
	    -label "Inactive" -underline 0 \
	    -command [::itcl::code $this fb_mode]

    itk_component add srcL {
	::label $itk_interior.srcL -text "Source" -anchor e
    } {
	usual
    }

    itk_component add srcCB {
	cadwidgets::ComboBox $itk_interior.srcCB
    } {
	usual
	rename -state -sourceState sourceState SourceState
    }
    set srcM [$itk_component(srcCB) component menu]
    bind $srcM <<MenuSelect>> [::itcl::code $this menuStatusCB %W]

    # populate source's combobox menu
    $itk_component(srcCB) add command -label "Active Pane" \
	    -command [::itcl::code $this set_src active]
    $itk_component(srcCB) add separator
    $itk_component(srcCB) add command -label "Upper Left" \
	    -command [::itcl::code $this set_src ul]
    $itk_component(srcCB) add command -label "Upper Right" \
	    -command [::itcl::code $this set_src ur]
    $itk_component(srcCB) add command -label "Lower Left" \
	    -command [::itcl::code $this set_src ll]
    $itk_component(srcCB) add command -label "Lower Right" \
	    -command [::itcl::code $this set_src lr]

    itk_component add destL {
	::label $itk_interior.destL -text "Destination" -anchor e
    } {
	usual
    }

    itk_component add destCB {
	cadwidgets::ComboBox $itk_interior.destCB
    } {
	usual
    }
    set destM [$itk_component(destCB) component menu]
    set destE [$itk_component(destCB) component entry]
    bind $destM <<MenuSelect>> [::itcl::code $this menuStatusCB %W]
    bind $destE <Enter> [::itcl::code $this enterDestCB]
    bind $destE <Leave> [::itcl::code $this leaveCB]

    # populate destination's combobox menu
    $itk_component(destCB) add command -label "Active Pane" \
	    -command [::itcl::code $this set_dest active]
    $itk_component(destCB) add separator
    $itk_component(destCB) add command -label "Upper Left" \
	    -command [::itcl::code $this set_dest ul]
    $itk_component(destCB) add command -label "Upper Right" \
	    -command [::itcl::code $this set_dest ur]
    $itk_component(destCB) add command -label "Lower Left" \
	    -command [::itcl::code $this set_dest ll]
    $itk_component(destCB) add command -label "Lower Right" \
	    -command [::itcl::code $this set_dest lr]

#    bind [$itk_component(destCB) component entry] <KeyRelease> [::itcl::code $this cook_dest]

    itk_component add sizeL {
	::label $itk_interior.sizeL -text "Size" -anchor e
    } {
	usual
    }

    itk_component add sizeCB {
	cadwidgets::ComboBox $itk_interior.sizeCB
    } {
	usual
    }
    set sizeM [$itk_component(sizeCB) component menu]
    set sizeE [$itk_component(sizeCB) component entry]
    bind $sizeM <<MenuSelect>> [::itcl::code $this menuStatusCB %W]
    bind $sizeE <Enter> [::itcl::code $this enterSizeCB]
    bind $sizeE <Leave> [::itcl::code $this leaveCB]

    # populate size's combobox
    $itk_component(sizeCB) add command -label "Size of Pane" \
	    -command [::itcl::code $this set_size "Size of Pane"]
    $itk_component(sizeCB) add command -label "128" \
	    -command [::itcl::code $this set_size 128]
    $itk_component(sizeCB) add command -label "256" \
	    -command [::itcl::code $this set_size 256]
    $itk_component(sizeCB) add command -label "512" \
	    -command [::itcl::code $this set_size 512]
    $itk_component(sizeCB) add command -label "640x480" \
	    -command [::itcl::code $this set_size "640x480"]
    $itk_component(sizeCB) add command -label "720x486" \
	    -command [::itcl::code $this set_size "720x486"]
    $itk_component(sizeCB) add command -label "1024" \
	    -command [::itcl::code $this set_size 1024]

    itk_component add bgcolorL {
	::label $itk_interior.bgcolorL -text "Background Color" -anchor e
    } {
	usual
    }

    itk_component add bgcolorCB {
	cadwidgets::ColorEntry $itk_interior.bgcolorCB
    } {
	usual
    }
    set colorM [$itk_component(bgcolorCB) component menu]
    set colorE [$itk_component(bgcolorCB) component entry]
    bind $colorM <<MenuSelect>> [::itcl::code $this menuStatusCB %W]
    bind $colorE <Enter> [::itcl::code $this enterColorCB]
    bind $colorE <Leave> [::itcl::code $this leaveCB]

    itk_component add advB {
	::button $itk_interior.advB -relief raised -text "Advanced Settings..." \
		-command [::itcl::code $this activate_adv]
    } {
	usual
    }
    bind $itk_component(advB) <Enter> [::itcl::code $this enterAdvCB]
    bind $itk_component(advB) <Leave> [::itcl::code $this leaveCB]

    itk_component add okB {
	::button $itk_interior.okB  -relief raised -text "Ok" \
		-command [::itcl::code $this ok]
    } {
	usual
    }
    bind $itk_component(okB) <Enter> [::itcl::code $this enterOkCB]
    bind $itk_component(okB) <Leave> [::itcl::code $this leaveCB]

    itk_component add raytraceB {
	::button $itk_interior.raytraceB  -relief raised -text "Raytrace" \
		-command [::itcl::code $this raytrace]
    } {
	usual
    }
    bind $itk_component(raytraceB) <Enter> [::itcl::code $this enterRaytraceCB]
    bind $itk_component(raytraceB) <Leave> [::itcl::code $this leaveCB]

    itk_component add abortB {
	::button $itk_interior.abortB  -relief raised -text "Abort" \
		-command [::itcl::code $this abort]
    } {
	usual
    }
    bind $itk_component(abortB) <Enter> [::itcl::code $this enterAbortCB]
    bind $itk_component(abortB) <Leave> [::itcl::code $this leaveCB]

    itk_component add clearB {
	::button $itk_interior.clearB  -relief raised -text "Clear" \
		-command [::itcl::code $this clear]
    } {
	usual
    }
    bind $itk_component(clearB) <Enter> [::itcl::code $this enterClearCB]
    bind $itk_component(clearB) <Leave> [::itcl::code $this leaveCB]

    itk_component add dismissB {
	::button $itk_interior.dismissB  -relief raised -text "Dismiss" \
		-command [::itcl::code $this deactivate]
    } {
	usual
    }
    bind $itk_component(dismissB) <Enter> [::itcl::code $this enterDismissCB]
    bind $itk_component(dismissB) <Leave> [::itcl::code $this leaveCB]

    itk_component add statusL {
	::label $itk_interior.statusL -anchor w -relief sunken -bd 2 -textvar [::itcl::scope msg]
    } {
	usual
    }

    grid $itk_component(srcL) $itk_component(srcCB) -pady 1 -sticky nsew -in $itk_component(gridF1)
    grid $itk_component(destL) $itk_component(destCB) -pady 1 -sticky nsew -in $itk_component(gridF1)
    grid $itk_component(sizeL) $itk_component(sizeCB) -pady 1 -sticky nsew -in $itk_component(gridF1)
    grid $itk_component(bgcolorL) $itk_component(bgcolorCB) -pady 1 -sticky nsew -in $itk_component(gridF1)
    grid $itk_component(advB) - -pady 1 -sticky ns -in $itk_component(gridF1)

    grid columnconfigure $itk_component(gridF1) 1 -weight 1
    grid rowconfigure $itk_component(gridF1) 0 -weight 1
    grid rowconfigure $itk_component(gridF1) 1 -weight 1
    grid rowconfigure $itk_component(gridF1) 2 -weight 1
    grid rowconfigure $itk_component(gridF1) 3 -weight 1

    grid $itk_component(gridF1) -padx 4 -pady 4 -sticky nsew -in $itk_component(gridF2)
    grid columnconfigure $itk_component(gridF2) 0 -weight 1
    grid rowconfigure $itk_component(gridF2) 0 -weight 1

    grid $itk_component(okB) $itk_component(raytraceB) \
	    $itk_component(abortB) x $itk_component(clearB) x \
	    $itk_component(dismissB) -sticky "nsew" -in $itk_component(gridF3)
    grid columnconfigure $itk_component(gridF3) 3 -weight 1
    grid columnconfigure $itk_component(gridF3) 5 -weight 1

    grid $itk_component(gridF2) -padx 4 -pady 4 -sticky nsew
    grid $itk_component(gridF3) -padx 4 -pady 4 -sticky nsew
    grid $itk_component(statusL) -padx 2 -pady 2 -sticky nsew
    grid columnconfigure $itk_component(hull) 0 -weight 1
    grid rowconfigure $itk_component(hull) 0 -weight 1

    # build the advanced settings panel
    build_adv

    # process options
    eval itk_initialize $args

    # Disable the source, jitter and lmodel CombBox's entry widgets
    configure -sourceState disabled -jitterState disabled -lmodelState disabled

    # Link the ComboBox's entry widgets to this class' variables
    $itk_component(sizeCB) configure -entryvariable [::itcl::scope itk_option(-size)]
    $itk_component(bgcolorCB) configure -entryvariable [::itcl::scope itk_option(-color)]
    $itk_component(destCB) configure -entryvariable [::itcl::scope itk_option(-dest)]

    wm withdraw $itk_component(hull)
    wm title $itk_component(hull) "Raytrace Control Panel"
}

::itcl::body RtControl::build_adv {} {
    itk_component add adv {
	::toplevel $itk_interior.adv
    }

    itk_component add adv_gridF1 {
	::frame $itk_component(adv).gridF1
    } {
	usual
    }

    itk_component add adv_gridF2 {
	::frame $itk_component(adv).gridF2 -relief groove -bd 2
    } {
	usual
    }

    itk_component add adv_nprocL {
	::label $itk_component(adv).nprocL -text "# of Processors" -anchor e
    } {
	usual
    }

    itk_component add adv_nprocE {
	::entry $itk_component(adv).nprocE -relief sunken -bd 2 -width 2 \
		-textvar [::itcl::scope itk_option(-nproc)]
    } {
	usual
    }
    bind $itk_component(adv_nprocE) <Enter> [::itcl::code $this enterNProcCB]
    bind $itk_component(adv_nprocE) <Leave> [::itcl::code $this leaveAdvCB]

    itk_component add adv_hsampleL {
	::label $itk_component(adv).hsampleL -text "Hypersample" -anchor e
    } {
	usual
    }

    itk_component add adv_hsampleE {
	::entry $itk_component(adv).hsampleE -relief sunken -bd 2 -width 2 \
		-textvar [::itcl::scope itk_option(-hsample)]
    } {
	usual
    }
    bind $itk_component(adv_hsampleE) <Enter> [::itcl::code $this enterHSampleCB]
    bind $itk_component(adv_hsampleE) <Leave> [::itcl::code $this leaveAdvCB]

    itk_component add adv_jitterL {
	::label $itk_component(adv).jitterL -text "Jitter" -anchor e
    } {
	usual
    }

    itk_component add adv_jitterCB {
	cadwidgets::ComboBox $itk_component(adv).jitterCB
    } {
	usual
	rename -state -jitterState jitterState JitterState
    }
    set jitterM [$itk_component(adv_jitterCB) component menu]
    bind $jitterM <<MenuSelect>> [::itcl::code $this menuStatusAdvCB %W]

    # populate jitter's combobox menu
    $itk_component(adv_jitterCB) add command -label "None" \
	    -command [::itcl::code $this set_jitter 0]
    $itk_component(adv_jitterCB) add command -label "Cell" \
	    -command [::itcl::code $this set_jitter 1]
    $itk_component(adv_jitterCB) add command -label "Frame" \
	    -command [::itcl::code $this set_jitter 2]
    $itk_component(adv_jitterCB) add command -label "Both" \
	    -command [::itcl::code $this set_jitter 3]

    itk_component add adv_lmodelL {
	::label $itk_component(adv).lightL -text "Light Model" -anchor e
    } {
	usual
    }

    itk_component add adv_lmodelCB {
	cadwidgets::ComboBox $itk_component(adv).lightCB
    } {
	usual
	rename -state -lmodelState lmodelState LmodelState
    }
    set lmodelM [$itk_component(adv_lmodelCB) component menu]
    bind $lmodelM <<MenuSelect>> [::itcl::code $this menuStatusAdvCB %W]

    # populate lmodel's combobox menu
    $itk_component(adv_lmodelCB) add command -label "Full" \
	    -command [::itcl::code $this set_lmodel 0]
    $itk_component(adv_lmodelCB) add command -label "Diffuse" \
	    -command [::itcl::code $this set_lmodel 1]
    $itk_component(adv_lmodelCB) add command -label "Surface Normals" \
	    -command [::itcl::code $this set_lmodel 2]
    $itk_component(adv_lmodelCB) add command -label "Diffuse - 3 light" \
	    -command [::itcl::code $this set_lmodel 3]
    $itk_component(adv_lmodelCB) add command -label "Curvature - inverse radius" \
	    -command [::itcl::code $this set_lmodel 4]
    $itk_component(adv_lmodelCB) add command -label "Curvature - direction vector" \
	    -command [::itcl::code $this set_lmodel 5]

    itk_component add adv_otherL {
	::label $itk_component(adv).otherL -text "Other Options" -anchor e
    } {
	usual
    }

    itk_component add adv_otherE {
	::entry $itk_component(adv).otherE -relief sunken -bd 2 -width 2 \
		-textvar [::itcl::scope itk_option(-other)]
    } {
	usual
    }
    bind $itk_component(adv_otherE) <Enter> [::itcl::code $this enterOtherCB]
    bind $itk_component(adv_otherE) <Leave> [::itcl::code $this leaveAdvCB]

    itk_component add adv_dismissB {
	::button $itk_component(adv).buttonB -relief raised -text "Dismiss" \
		-command [::itcl::code $this deactivate_adv]
    } {
	usual
    }
    bind $itk_component(adv_dismissB) <Enter> [::itcl::code $this enterDismissAdvCB]
    bind $itk_component(adv_dismissB) <Leave> [::itcl::code $this leaveAdvCB]

    itk_component add adv_statusL {
	::label $itk_component(adv).statusL -anchor w -relief sunken -bd 2 -textvar [::itcl::scope msg_adv]
    } {
	usual
    }

    # remove labels from the ComboBox
    grid forget [$itk_component(adv_jitterCB) component label]
    grid forget [$itk_component(adv_lmodelCB) component label]

    grid $itk_component(adv_lmodelL) $itk_component(adv_lmodelCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_jitterL) $itk_component(adv_jitterCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_nprocL) $itk_component(adv_nprocE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_hsampleL) $itk_component(adv_hsampleE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_otherL) $itk_component(adv_otherE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid columnconfigure $itk_component(adv_gridF1) 1 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 0 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 1 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 2 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 3 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 4 -weight 1

    grid $itk_component(adv_gridF1) -sticky nsew -padx 8 -pady 8 -in $itk_component(adv_gridF2)
    grid columnconfigure $itk_component(adv_gridF2) 0 -weight 1
    grid rowconfigure $itk_component(adv_gridF2) 0 -weight 1

    grid $itk_component(adv_gridF2) -sticky nsew -padx 2 -pady 2
    grid $itk_component(adv_dismissB) -sticky s -padx 2 -pady 2
    grid $itk_component(adv_statusL) -padx 2 -pady 2 -sticky nsew
    grid columnconfigure $itk_component(adv) 0 -weight 1
    grid rowconfigure $itk_component(adv) 0 -weight 1

    wm withdraw $itk_component(adv)
    wm title $itk_component(adv) "Advanced Settings"
}

::itcl::configbody RtControl::nproc {
    if {![regexp "^\[0-9\]+$" $itk_option(-nproc)]} {
	error "Bad value - $itk_option(-nproc)"
    }
}

::itcl::configbody RtControl::hsample {
    if {![regexp "^\[0-9\]+$" $itk_option(-hsample)]} {
	error "Bad value - $itk_option(-hsample)"
    }
}

::itcl::configbody RtControl::jitter {
    set_jitter $itk_option(-jitter)
}

::itcl::configbody RtControl::lmodel {
    set_lmodel $itk_option(-lmodel)
}

::itcl::configbody RtControl::size {
    set_size $itk_option(-size)
}

::itcl::configbody RtControl::color {
    eval $itk_component(bgcolorCB) setColor $itk_option(-color)
}

::itcl::configbody RtControl::mged {
    if {$itk_option(-mged) == ""} {
	return
    }

    update_control_panel
}

::itcl::body RtControl::activate {} {
    raise $itk_component(hull)

    # center on screen
    if {$win_geom == ""} {
	center $itk_component(hull) win_geom
    }
    wm geometry $itk_component(hull) $win_geom
    wm deiconify $itk_component(hull)
}

::itcl::body RtControl::activate_adv {} {
    raise $itk_component(adv)

    # center over control panel
    if {$win_geom_adv == ""} {
	center $itk_component(adv) win_geom_adv $itk_component(hull)
    }
    wm geometry $itk_component(adv) $win_geom_adv
    wm deiconify $itk_component(adv)
}

::itcl::body RtControl::deactivate {} {
    set win_geom [wm geometry $itk_component(hull)]
    wm withdraw $itk_component(hull)
    deactivate_adv
}

::itcl::body RtControl::deactivate_adv {} {
    set win_geom_adv [wm geometry $itk_component(adv)]
    wm withdraw $itk_component(adv)
}

::itcl::body RtControl::center {w gs {cw ""}} {
    upvar $gs geom

    update idletasks

    if {$cw != "" && [winfo exists $cw]} {
	set x [expr {int([winfo reqwidth $cw] * 0.5 + [winfo x $cw] - [winfo reqwidth $w] * 0.5)}]
	set y [expr {int([winfo reqheight $cw] * 0.5 + [winfo y $cw] - [winfo reqheight $w] * 0.5)}]
    } else {
	set x [expr {int([winfo screenwidth $w] * 0.5 - [winfo reqwidth $w] * 0.5)}]
	set y [expr {int([winfo screenheight $w] * 0.5 - [winfo reqheight $w] * 0.5)}]
    }

    wm geometry $w +$x+$y
    set geom +$x+$y
}

::itcl::body RtControl::update_fb_mode {} {
    # update the Inactive/Underlay/Overlay radiobutton
    set fb_mode [$itk_option(-mged) component $itk_option(-dest) fb_active]
}

::itcl::body RtControl::set_src {pane} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    if {$pane == "active"} {
	set pane [$itk_option(-mged) pane]
    }

    $itk_component(srcCB) setText $pane
}

::itcl::body RtControl::set_dest {pane} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    if {$pane == "active"} {
	set pane [$itk_option(-mged) pane]
    }

    # update the destCB entry
    set itk_option(-dest) $pane

    # update the Inactive/Underlay/Overlay radiobutton
    set fb_mode [$itk_option(-mged) component $itk_option(-dest) fb_active]
}

::itcl::body RtControl::set_size {size} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    if {$size == "Size of Pane"} {
	set itk_option(-size) [getSize]
	return
    }

    if {![regexp "^(\[ \]*\[0-9\]+)((\[ \]*\[xX\]?\[ \]*)|(\[ \]+))(\[0-9\]*\[ \]*)$" $size]} {
	error "Bad size - $size"
    }
    set itk_option(-size) $size
}

::itcl::body RtControl::set_jitter {j} {
    switch -- $j {
	0 {
	    set itk_option(-jitter) 0
	    $itk_component(adv_jitterCB) setText "None"
	}
	1 {
	    set itk_option(-jitter) 1
	    $itk_component(adv_jitterCB) setText "Cell"
	}
	2 {
	    set itk_option(-jitter) 2
	    $itk_component(adv_jitterCB) setText "Frame"
	}
	3 {
	    set itk_option(-jitter) 3
	    $itk_component(adv_jitterCB) setText "Both"
	}
	default {
	    error "RtControl::set_jitter: bad value - $j"
	}
    }
}

::itcl::body RtControl::set_lmodel {lm} {
    switch -- $lm {
	0 {
	    set itk_option(-lmodel) 0
	    $itk_component(adv_lmodelCB) setText "Full"
	}
	1 {
	    set itk_option(-lmodel) 1
	    $itk_component(adv_lmodelCB) setText "Diffuse"
	}
	2 {
	    set itk_option(-lmodel) 2
	    $itk_component(adv_lmodelCB) setText "Surface Normals"
	}
	3 {
	    set itk_option(-lmodel) 3
	    $itk_component(adv_lmodelCB) setText "Diffuse - 3 light"
	}
	4 {
	    set itk_option(-lmodel) 4
	    $itk_component(adv_lmodelCB) setText "Curvature - inverse radius"
	}
	5 {
	    set itk_option(-lmodel) 5
	    $itk_component(adv_lmodelCB) setText "Curvature - directioin vector"
	}
	default {
	    error "RtControl::set_lmodel: bad value - $lm"
	}
    }
}

## - cook_dest
#
# Return a port number if possible. Otherwise, return
# whatever the user specified (i.e. it's already cooked)
#
::itcl::body RtControl::cook_dest {dest} {
    switch -- $dest {
	ul -
	ur -
	ll -
	lr {
	    if {![$itk_option(-mged) component $dest fb_active]} {
		$itk_option(-mged) component $dest fb_active 1

		# update the Inactive/Underlay/Overlay radiobutton
		set fb_mode 1
	    }
	    return [$itk_option(-mged) component $dest listen]
	}
	default {
	    # Already cooked.
	    return $dest
	}
    }
}

::itcl::body RtControl::fb_mode {} {
    set pane [getPane]
    $itk_option(-mged) component $pane fb_active $fb_mode
}

::itcl::body RtControl::ok {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    raytrace
    deactivate
}

::itcl::body RtControl::raytrace {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    set rt_cmd "$itk_option(-mged) component [$itk_component(srcCB) getText] \
	    rt -F [get_cooked_dest]"

    if {$itk_option(-size) != ""} {
	set result [regexp "^(\[ \]*\[0-9\]+)((\[ \]*\[xX\]?\[ \]*)|(\[ \]+))(\[0-9\]*\[ \]*)$"\
		$itk_option(-size) smatch width junkA junkB junkC height]
	if {$result} {
	    if {$height != ""} {
		append rt_cmd " -w $width -n $height"
		set width $width.0
		set height $height.0
		set aspect [expr {$width / $height}]
		append rt_cmd " -V $aspect"
	    } else {
		append rt_cmd " -s $width"
	    }
	} else {
	    error "Bad size - $itk_option(-size)"
	}
    }

    set color [get_color]
    if {$color != ""} {
	append rt_cmd " -C[lindex $color 0]/[lindex $color 1]/[lindex $color 2]"
    }

    if {$itk_option(-nproc) != ""} {
	append rt_cmd " -P$itk_option(-nproc)"
    }

    if {$itk_option(-hsample) != ""} {
	append rt_cmd " -H$itk_option(-hsample)"
    }

    append rt_cmd " -J$itk_option(-jitter)"

    if {$itk_option(-lmodel) != ""} {
	append rt_cmd " -l$itk_option(-lmodel)"
    }

    if {$itk_option(-other) != ""} {
	append rt_cmd " $itk_option(-other)"
    }

    set result [catch {eval $rt_cmd} rt_error]
    if {$result} {
	error $rt_error
    }
}

::itcl::body RtControl::abort {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    $itk_option(-mged) component [$itk_component(srcCB) getText] rtabort
}

::itcl::body RtControl::clear {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    set cooked_dest [get_cooked_dest]
    set color [get_color]

    if {$color == ""} {
	set result [catch {exec fbclear -F $cooked_dest 0 0 0 &} rt_error]
    } else {
	set result [catch {eval exec fbclear -F $cooked_dest $color &} rt_error]
    }

    if {$result} {
	error $rt_error
    }
}

::itcl::body RtControl::get_color {} {
    if {$itk_option(-color) != ""} {
	set result [regexp "^\[0-9\]+\[ \]+\[0-9\]+\[ \]+\[0-9\]+$" $itk_option(-color)]
	if {!$result} {
	    error "Improper color specification: $itk_option(-color)"
	}
    }

    return $itk_option(-color)
}

::itcl::body RtControl::get_size {} {
    return $size
}

## - get_cooked_dest
#
# Returns a port number or something specified by
# the user (i.e. hostname:port, or filename). No error
# checking is performed on user specified strings.
#
::itcl::body RtControl::get_cooked_dest {} {
    set dest $itk_option(-dest)
    if {$dest == ""} {
	# use the active pane
	set dest [$itk_option(-mged) pane]
    }
    set cooked_dest [cook_dest $dest]
    if {$cooked_dest == -1} {
	switch -- $dest {
	    ul -
	    ur -
	    ll -
	    lr {
		# Cause the framebuffer to listen for clients on port 0.
		# If port 0 isn't available, the next available port will
		# be returned.
		set cooked_dest [$itk_option(-mged) component $dest listen 0]
	    }
	    default {
		# We should only get here if $dest is -1,
		# which had to be specified by the user.
		error "Invalid destination - $dest"
	    }
	}
    }

    return $cooked_dest
}

::itcl::body RtControl::update_control_panel {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

#    if {![$itk_option(-mged) fb_active]} {
	# Framebuffer is not active, so activate it
	# by putting it in "Underlay" mode.
#	$itk_option(-mged) fb_active 1
#	set fb_mode 1
#    }

    set pane [$itk_option(-mged) pane]
    $itk_component(srcCB) setText $pane
#    $itk_component(destCB) setText $pane
    set itk_option(-dest) $pane
    set_size "Size of Pane"

    # Calling setColor so that the menubutton color gets set.
    eval $itk_component(bgcolorCB) setColor [$itk_option(-mged) bg]
}

::itcl::body RtControl::menuStatusCB {w} {
    if {[catch {$w entrycget active -label} op]} {
	# probably a tearoff entry
	set op ""
    }

    switch -- $op {
	"Inactive" {
	    if {[catch {getPaneStr} result]} {
		set msg $result
	    } else {
		set msg "Make the $result framebuffer inactive"
	    }
	}
	"Underlay" {
	    if {[catch {getPaneStr} result]} {
		set msg $result
	    } else {
		set msg "Put the $result framebuffer in underlay mode"
	    }
	}
	"Overlay" {
	    if {[catch {getPaneStr} result]} {
		set msg $result
	    } else {
		set msg "Put the $result framebuffer in overlay mode"
	    }
	}
	"Active Pane" {
	    if {[catch {getPaneStr} result]} {
		set msg $result
	    } else {
		if {$srcM == $w} {
		    set msg "Make the $result pane the source"
		} else {
		    set msg "Make the $result pane the destination"
		}
	    }
	}
	"Upper Left" {
	    if {$srcM == $w} {
		set msg "Make the upper left pane the source"
	    } else {
		set msg "Make the upper left pane the destination"
	    }
	}
	"Upper Right" {
	    if {$srcM == $w} {
		set msg "Make the upper right pane the source"
	    } else {
		set msg "Make the upper right pane the destination"
	    }
	}
	"Lower Left" {
	    if {$srcM == $w} {
		set msg "Make the lower left pane the source"
	    } else {
		set msg "Make the lower left pane the destination"
	    }
	}
	"Lower Right" {
	    if {$srcM == $w} {
		set msg "Make the lower right pane the source"
	    } else {
		set msg "Make the lower right pane the destination"
	    }
	}
	"Size of Pane" {
	    if {[catch {getSize} result]} {
		set msg $result
	    } else {
		set msg "Make the image size $result"
	    }
	}
	"128" -
	"256" -
	"512" -
	"1024" {
	    set msg "Make the image size ${op}x${op}"
	}
	"640x480" -
	"720x486" {
	    set msg "Make the image size $op"
	}
	"black" {
	    set msg "Make the background color black"
	}
	"white" {
	    set msg "Make the background color white"
	}
	"red" {
	    set msg "Make the background color red"
	}
	"green" {
	    set msg "Make the background color green"
	}
	"blue" {
	    set msg "Make the background color blue"
	}
	"yellow" {
	    set msg "Make the background color yellow"
	}
	"cyan" {
	    set msg "Make the background color cyan"
	}
	"magenta" {
	    set msg "Make the background color magenta"
	}
	"Color Tool..." {
	    set msg "Activate the color tool"
	}
	default {
	    set msg ""
	}
    }
}

::itcl::body RtControl::leaveCB {} {
    set msg ""
}

::itcl::body RtControl::enterAdvCB {} {
    set msg "Activate the advanced settings dialog"
}

::itcl::body RtControl::enterOkCB {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	set msg "Not associated with an Mged object"
    } else {
	set msg "Raytrace [$itk_component(srcCB) getText]'s view into $itk_option(-dest) and dismiss"
    }
}

::itcl::body RtControl::enterRaytraceCB {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	set msg "Not associated with an Mged object"
    } else {
	set msg "Raytrace [$itk_component(srcCB) getText]'s view into $itk_option(-dest)"
    }
}

::itcl::body RtControl::enterAbortCB {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	set msg "Not associated with an Mged object"
    } else {
	set msg "Abort all raytraces started from [$itk_component(srcCB) getText]"
    }
}

::itcl::body RtControl::enterClearCB {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	set msg "Not associated with an Mged object"
    } else {
	set msg "Clear $itk_option(-dest) with the following color - $itk_option(-color)"
    }
}

::itcl::body RtControl::enterDismissCB {} {
    set msg "Dismiss the raytrace control panel"
}

::itcl::body RtControl::enterDestCB {} {
    set msg "Specify a destination (i.e. framebuffer or file)"
}

::itcl::body RtControl::enterSizeCB {} {
    set msg "Specify an image size" 
}

::itcl::body RtControl::enterColorCB {} {
    set msg "Specify an RGB color"
}

## - getPane
#
# Return a pane associated with $itk_option(-mged)
# according to $itk_option(-dest).
#
# Note - if $itk_option(-dest) is not a pane (i.e. it's a
#        file or some other framebuffer) then the active
#        pane is returned.
#
::itcl::body RtControl::getPane {} {
    if {[catch {$itk_option(-mged) isa Mged}]} {
	error "Not associated with an Mged object"
    }

    switch -- $itk_option(-dest) {
	ul -
	ur -
	ll -
	lr {
	    return $itk_option(-dest)
	}
	default {
	    # Use the active pane
	    return [$itk_option(-mged) pane]
	}
    }
}

::itcl::body RtControl::getPaneStr {} {
    if {[catch {getPane} result]} {
	return $result
    }

    switch -- $result {
	ul {
	    return "upper left"
	}
	ur {
	    return "upper right"
	}
	ll {
	    return "lower left"
	}
	lr {
	    return "lower right"
	}
    }
}

## - getSize
#
#
#
::itcl::body RtControl::getSize {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Not associated with an Mged object"
    }

    # Try using the destination for obtaining the size.
    switch -- $itk_option(-dest) {
	ul -
	ur -
	ll -
	lr {
	    set size [$itk_option(-mged) component $itk_option(-dest) cget -dmsize]
	    return "[lindex $size 0]x[lindex $size 1]"
	}
    }

    # The destination could be a file or a framebuffer.
    # We don't know what its size is so try to use the
    # source pane for obtaining the size.
    set pane [$itk_component(srcCB) getText]
    switch -- $pane {
	ul -
	ur -
	ll -
	lr {
	    set size [$itk_option(-mged) component $pane cget -dmsize]
	    return "[lindex $size 0]x[lindex $size 1]"
	}
    }

    # We failed to get the size using the destination and source panes.
    # So, we use the active pane for obtaining the size.
    set size [$itk_option(-mged) component [$itk_option(-mged) pane] cget -dmsize]
    return "[lindex $size 0]x[lindex $size 1]"
}

::itcl::body RtControl::menuStatusAdvCB {w} {
    if {[catch {$w entrycget active -label} op]} {
	# probably a tearoff entry
	set op ""
    }

    switch -- $op {
	"Full" {
	    set msg_adv "Full lighting model"
	}
	"Diffuse" {
	    set msg_adv "Diffuse lighting model (debugging)"
	}
	"Surface Normals" {
	    set msg_adv "Display surface normals"
	}
	"Diffuse - 3 light" {
	    set msg_adv "3-light diffuse (debugging)"
	}
	"Curvature - inverse radius" {
	    set msg_adv "Curvature debugging - inverse radius"
	}
	"Curvature - direction vector" {
	    set msg_adv "Curvature debugging - direction vector"
	}
	"None" {
	    set msg_adv "Fire rays from center of cell"
	}
	"Cell" {
	    set msg_adv "Jitter each cell by +/- one half pixel"
	}
	"Frame" {
	    set msg_adv "Jitter the frame by +/- one half pixel"
	}
	"Both" {
	    set msg_adv "Jitter the cells and the frame"
	}
	default {
	    set msg_adv ""
	}
    }
}

::itcl::body RtControl::leaveAdvCB {} {
    set msg_adv ""
}

::itcl::body RtControl::enterDismissAdvCB {} {
    set msg_adv "Dismiss the advanced settings dialog"
}

::itcl::body RtControl::enterNProcCB {} {
    set msg_adv "Requested number of processors"
}

::itcl::body RtControl::enterHSampleCB {} {
    set msg_adv "Extra rays to fire per pixel"
}

::itcl::body RtControl::enterOtherCB {} {
    set msg_adv "Other rt options"
}
@


1.9
log
@Bob Parker's view modifications, png framebuffer support, shaded drawing mode
@
text
@@


1.8
log
@update copyright to include span through 2003
@
text
@d25 1
a25 1
itk::usual RtControl {
d32 2
a33 2
class RtControl {
    inherit itk::Toplevel
d52 1
d111 1
a111 1
body RtControl::constructor {args} {
d147 1
a147 1
    bind $itk_component(fbM) <<MenuSelect>> [code $this menuStatusCB %W]
d161 1
a161 1
    $itk_component(fbM) add radiobutton -value 2 -variable [scope fb_mode] \
d163 2
a164 2
	    -command [code $this fb_mode]
    $itk_component(fbM) add radiobutton -value 1 -variable [scope fb_mode] \
d166 2
a167 2
	    -command [code $this fb_mode]
    $itk_component(fbM) add radiobutton -value 0 -variable [scope fb_mode] \
d169 1
a169 1
	    -command [code $this fb_mode]
d184 1
a184 1
    bind $srcM <<MenuSelect>> [code $this menuStatusCB %W]
d188 1
a188 1
	    -command [code $this set_src active]
d191 1
a191 1
	    -command [code $this set_src ul]
d193 1
a193 1
	    -command [code $this set_src ur]
d195 1
a195 1
	    -command [code $this set_src ll]
d197 1
a197 1
	    -command [code $this set_src lr]
d212 3
a214 3
    bind $destM <<MenuSelect>> [code $this menuStatusCB %W]
    bind $destE <Enter> [code $this enterDestCB]
    bind $destE <Leave> [code $this leaveCB]
d218 1
a218 1
	    -command [code $this set_dest active]
d221 1
a221 1
	    -command [code $this set_dest ul]
d223 1
a223 1
	    -command [code $this set_dest ur]
d225 1
a225 1
	    -command [code $this set_dest ll]
d227 1
a227 1
	    -command [code $this set_dest lr]
d229 1
a229 1
#    bind [$itk_component(destCB) component entry] <KeyRelease> [code $this cook_dest]
d244 3
a246 3
    bind $sizeM <<MenuSelect>> [code $this menuStatusCB %W]
    bind $sizeE <Enter> [code $this enterSizeCB]
    bind $sizeE <Leave> [code $this leaveCB]
d250 1
a250 1
	    -command [code $this set_size "Size of Pane"]
d252 1
a252 1
	    -command [code $this set_size 128]
d254 1
a254 1
	    -command [code $this set_size 256]
d256 1
a256 1
	    -command [code $this set_size 512]
d258 1
a258 1
	    -command [code $this set_size "640x480"]
d260 1
a260 1
	    -command [code $this set_size "720x486"]
d262 1
a262 1
	    -command [code $this set_size 1024]
d277 3
a279 3
    bind $colorM <<MenuSelect>> [code $this menuStatusCB %W]
    bind $colorE <Enter> [code $this enterColorCB]
    bind $colorE <Leave> [code $this leaveCB]
d283 1
a283 1
		-command [code $this activate_adv]
d287 2
a288 2
    bind $itk_component(advB) <Enter> [code $this enterAdvCB]
    bind $itk_component(advB) <Leave> [code $this leaveCB]
d292 1
a292 1
		-command [code $this ok]
d296 2
a297 2
    bind $itk_component(okB) <Enter> [code $this enterOkCB]
    bind $itk_component(okB) <Leave> [code $this leaveCB]
d301 1
a301 1
		-command [code $this raytrace]
d305 2
a306 2
    bind $itk_component(raytraceB) <Enter> [code $this enterRaytraceCB]
    bind $itk_component(raytraceB) <Leave> [code $this leaveCB]
d310 1
a310 1
		-command [code $this abort]
d314 2
a315 2
    bind $itk_component(abortB) <Enter> [code $this enterAbortCB]
    bind $itk_component(abortB) <Leave> [code $this leaveCB]
d319 1
a319 1
		-command [code $this clear]
d323 2
a324 2
    bind $itk_component(clearB) <Enter> [code $this enterClearCB]
    bind $itk_component(clearB) <Leave> [code $this leaveCB]
d328 1
a328 1
		-command [code $this deactivate]
d332 2
a333 2
    bind $itk_component(dismissB) <Enter> [code $this enterDismissCB]
    bind $itk_component(dismissB) <Leave> [code $this leaveCB]
d336 1
a336 1
	::label $itk_interior.statusL -anchor w -relief sunken -bd 2 -textvar [scope msg]
d379 3
a381 3
    $itk_component(sizeCB) configure -entryvariable [scope itk_option(-size)]
    $itk_component(bgcolorCB) configure -entryvariable [scope itk_option(-color)]
    $itk_component(destCB) configure -entryvariable [scope itk_option(-dest)]
d387 1
a387 1
itcl::body RtControl::build_adv {} {
d389 1
a389 1
	toplevel $itk_interior.adv
d412 1
a412 1
		-textvar [scope itk_option(-nproc)]
d416 2
a417 2
    bind $itk_component(adv_nprocE) <Enter> [code $this enterNProcCB]
    bind $itk_component(adv_nprocE) <Leave> [code $this leaveAdvCB]
d427 1
a427 1
		-textvar [scope itk_option(-hsample)]
d431 2
a432 2
    bind $itk_component(adv_hsampleE) <Enter> [code $this enterHSampleCB]
    bind $itk_component(adv_hsampleE) <Leave> [code $this leaveAdvCB]
d447 1
a447 1
    bind $jitterM <<MenuSelect>> [code $this menuStatusAdvCB %W]
d451 1
a451 1
	    -command [code $this set_jitter 0]
d453 1
a453 1
	    -command [code $this set_jitter 1]
d455 1
a455 1
	    -command [code $this set_jitter 2]
d457 1
a457 1
	    -command [code $this set_jitter 3]
d472 1
a472 1
    bind $lmodelM <<MenuSelect>> [code $this menuStatusAdvCB %W]
d476 1
a476 1
	    -command [code $this set_lmodel 0]
d478 1
a478 1
	    -command [code $this set_lmodel 1]
d480 1
a480 1
	    -command [code $this set_lmodel 2]
d482 1
a482 1
	    -command [code $this set_lmodel 3]
d484 1
a484 1
	    -command [code $this set_lmodel 4]
d486 1
a486 1
	    -command [code $this set_lmodel 5]
d496 1
a496 1
		-textvar [scope itk_option(-other)]
d500 2
a501 2
    bind $itk_component(adv_otherE) <Enter> [code $this enterOtherCB]
    bind $itk_component(adv_otherE) <Leave> [code $this leaveAdvCB]
d505 1
a505 1
		-command [code $this deactivate_adv]
d509 2
a510 2
    bind $itk_component(adv_dismissB) <Enter> [code $this enterDismissAdvCB]
    bind $itk_component(adv_dismissB) <Leave> [code $this leaveAdvCB]
d513 1
a513 1
	::label $itk_component(adv).statusL -anchor w -relief sunken -bd 2 -textvar [scope msg_adv]
d553 1
a553 1
configbody RtControl::nproc {
d559 1
a559 1
configbody RtControl::hsample {
d565 1
a565 1
configbody RtControl::jitter {
d569 1
a569 1
configbody RtControl::lmodel {
d573 1
a573 1
configbody RtControl::size {
d577 1
a577 1
configbody RtControl::color {
d581 1
a581 1
configbody RtControl::mged {
d589 1
a589 1
itcl::body RtControl::activate {} {
d600 1
a600 1
itcl::body RtControl::activate_adv {} {
d611 1
a611 1
itcl::body RtControl::deactivate {} {
d617 1
a617 1
itcl::body RtControl::deactivate_adv {} {
d622 1
a622 1
itcl::body RtControl::center {w gs {cw ""}} {
d639 6
a644 1
itcl::body RtControl::set_src {pane} {
d656 1
a656 1
itcl::body RtControl::set_dest {pane} {
d672 1
a672 1
itcl::body RtControl::set_size {size} {
d688 1
a688 1
itcl::body RtControl::set_jitter {j} {
d712 1
a712 1
itcl::body RtControl::set_lmodel {lm} {
d749 1
a749 1
itcl::body RtControl::cook_dest {dest} {
d770 1
a770 1
itcl::body RtControl::fb_mode {} {
d775 1
a775 1
itcl::body RtControl::ok {} {
d784 1
a784 1
itcl::body RtControl::raytrace {} {
d839 1
a839 1
itcl::body RtControl::abort {} {
d847 1
a847 1
itcl::body RtControl::clear {} {
d866 1
a866 1
itcl::body RtControl::get_color {} {
d877 1
a877 1
itcl::body RtControl::get_size {} {
d887 1
a887 1
itcl::body RtControl::get_cooked_dest {} {
d916 1
a916 1
itcl::body RtControl::update_control_panel {} {
d921 1
a921 1
    if {![$itk_option(-mged) fb_active]} {
d924 3
a926 3
	$itk_option(-mged) fb_active 1
	set fb_mode 1
    }
d938 1
a938 1
itcl::body RtControl::menuStatusCB {w} {
d1055 1
a1055 1
itcl::body RtControl::leaveCB {} {
d1059 1
a1059 1
itcl::body RtControl::enterAdvCB {} {
d1063 1
a1063 1
itcl::body RtControl::enterOkCB {} {
d1071 1
a1071 1
itcl::body RtControl::enterRaytraceCB {} {
d1079 1
a1079 1
itcl::body RtControl::enterAbortCB {} {
d1087 1
a1087 1
itcl::body RtControl::enterClearCB {} {
d1095 1
a1095 1
itcl::body RtControl::enterDismissCB {} {
d1099 1
a1099 1
itcl::body RtControl::enterDestCB {} {
d1103 1
a1103 1
itcl::body RtControl::enterSizeCB {} {
d1107 1
a1107 1
itcl::body RtControl::enterColorCB {} {
d1120 1
a1120 1
itcl::body RtControl::getPane {} {
d1139 1
a1139 1
itcl::body RtControl::getPaneStr {} {
d1164 1
a1164 1
itcl::body RtControl::getSize {} {
d1200 1
a1200 1
itcl::body RtControl::menuStatusAdvCB {w} {
d1243 1
a1243 1
itcl::body RtControl::leaveAdvCB {} {
d1247 1
a1247 1
itcl::body RtControl::enterDismissAdvCB {} {
d1251 1
a1251 1
itcl::body RtControl::enterNProcCB {} {
d1255 1
a1255 1
itcl::body RtControl::enterHSampleCB {} {
d1259 1
a1259 1
itcl::body RtControl::enterOtherCB {} {
@


1.7
log
@*- change order of items in the "Framebuffer" menu
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998 by the United States Army
@


1.7.4.1
log
@sync branch with HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.7.6.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.7.12.1
log
@merge from HEAD
@
text
@d16 1
a16 1
#       This software is Copyright (C) 1998-2004 by the United States Army
@


1.6
log
@*- Added the last of the status code
@
text
@d160 2
a161 2
    $itk_component(fbM) add radiobutton -value 0 -variable [scope fb_mode] \
	    -label "Inactive" -underline 0 \
d166 2
a167 2
    $itk_component(fbM) add radiobutton -value 2 -variable [scope fb_mode] \
	    -label "Overlay" -underline 0 \
@


1.5
log
@Add more status code.
@
text
@d77 3
d84 7
d96 1
d99 1
d101 5
d210 1
d212 2
d242 1
d244 2
d274 5
d383 1
d415 2
d430 2
d445 2
d470 2
d499 2
d508 8
d521 4
a528 4
    grid $itk_component(adv_jitterL) $itk_component(adv_jitterCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_lmodelL) $itk_component(adv_lmodelCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
d544 1
d549 1
a549 1
    wm title $itk_component(adv) "Advanced Settings ($itk_component(adv))"
d672 1
a672 30
	# Try using the destination for obtaining the size.
	set pane $itk_option(-dest)
	switch -- $pane {
	    ul -
	    ur -
	    ll -
	    lr {
		set itk_option(-size) [$itk_option(-mged) component $pane cget -dmsize]
		return
	    }
	}

	# The destination could be a file or a framebuffer.
	# We don't know what its size is so try to use the
	# source pane for obtaining the size.
	set pane [$itk_component(srcCB) getText]
	switch -- $pane {
	    ul -
	    ur -
	    ll -
	    lr {
		set itk_option(-size) [$itk_option(-mged) component $pane cget -dmsize]
		return
	    }
	}

	# We failed to get the size using the destination and source panes.
	# So, we use the active pane for obtaining the size.
	set pane [$itk_option(-mged) pane]
	set itk_option(-size) [$itk_option(-mged) component $pane cget -dmsize]
a932 2
    global myjunk

d1016 27
d1093 12
d1192 63
@


1.4
log
@*- Add code for obtaining status about
   buttons and menu items (not done yet)
*- Modify center method to optionally
   center the window on another window.
@
text
@d71 2
d74 6
d85 4
d129 1
d131 1
a131 5
    itk_component add objM {
	::menu $itk_component(menubar).obj -title "Objects"
    } {
	usual
    }
a132 1
    $itk_component(menubar) add cascade -label "Framebuffer" -underline 0 -menu $itk_component(fbM)
d134 6
d165 2
d192 2
d221 2
d258 2
d267 2
d285 2
d294 2
d303 2
d307 1
a307 1
	::label $itk_interior.statusL -anchor w -relief sunken -bd 2
d746 2
a747 16
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    switch -- $itk_option(-dest) {
	ul -
	ur -
	ll -
	lr {
	    $itk_option(-mged) component $itk_option(-dest) fb_active $fb_mode
	}
	default {
	    # Use the active pane
	    $itk_option(-mged) fb_active $fb_mode
	}
    }
d914 7
a920 1
    set op [$w entrycget active -label]
d922 77
d1006 5
a1010 1
    $itk_component(statusL) configure -text ""
d1015 1
a1015 1
	$itk_component(statusL) configure -text "Not associated with an Mged object"
d1017 1
a1017 1
	$itk_component(statusL) configure -text "Raytrace [$itk_component(srcCB) getText]'s view into $itk_option(-dest)"
d1023 17
a1039 1
	$itk_component(statusL) configure -text "Not associated with an Mged object"
d1041 54
a1094 1
	$itk_component(statusL) configure -text "Raytrace [$itk_component(srcCB) getText]'s view into $itk_option(-dest)"
d1096 40
@


1.3
log
@*- Finished the advanced settings dialog
*- added a few configbody's
*- other stuff
@
text
@d25 4
d41 1
a41 1
    itk_option define -other other Other {}
d51 1
a51 1
    public method center {}
d53 1
d69 3
a71 1
    private method build_adv {}
d86 1
a86 1
	frame $itk_interior.gridF1
d92 1
a92 1
	frame $itk_interior.gridF2 -relief groove -bd 2
d98 1
a98 1
	frame $itk_interior.gridF3
d104 1
a104 1
	menu $itk_interior.menubar
d113 1
a113 1
	menu $itk_component(menubar).fb -title "Framebuffer"
d119 1
a119 1
	menu $itk_component(menubar).obj -title "Objects"
d140 4
a143 2
	label $itk_interior.srcL -text "Source" -anchor e
    } {}
d148 1
d166 4
a169 2
	label $itk_interior.destL -text "Destination" -anchor e
    } {}
d174 1
d193 4
a196 2
	label $itk_interior.sizeL -text "Size" -anchor e
    } {}
d201 1
d221 4
a224 2
	label $itk_interior.bgcolorL -text "Background Color" -anchor e
    } {}
d229 1
d233 1
a233 1
	button $itk_interior.advB -relief raised -text "Advanced Settings..." \
d240 1
a240 1
	button $itk_interior.okB  -relief raised -text "Ok" \
d247 1
a247 1
	button $itk_interior.raytraceB  -relief raised -text "Raytrace" \
d252 2
d256 1
a256 1
	button $itk_interior.abortB  -relief raised -text "Abort" \
d263 1
a263 1
	button $itk_interior.clearB  -relief raised -text "Clear" \
d270 1
a270 1
	button $itk_interior.dismissB  -relief raised -text "Dismiss" \
d276 6
d306 1
d325 147
a471 1
    center
d512 5
d523 5
d543 3
a545 1
itcl::body RtControl::center {} {
d547 11
a557 9
    set width [winfo reqwidth $itk_component(hull)]
    set height [winfo reqheight $itk_component(hull)]
    set screenwidth [winfo screenwidth $itk_component(hull)]
    set screenheight [winfo screenheight $itk_component(hull)]

    set x [expr {int($screenwidth * 0.5 - $width * 0.5)}]
    set y [expr {int($screenheight * 0.5 - $height * 0.5)}]
    wm geometry $itk_component(hull) +$x+$y
    set win_geom +$x+$y
d897 6
a902 3
itcl::body RtControl::build_adv {} {
    itk_component add adv {
	toplevel $itk_interior.adv
d904 1
d906 3
a908 5
    itk_component add adv_gridF1 {
	frame $itk_component(adv).gridF1
    } {
	usual
    }
d910 5
a914 4
    itk_component add adv_gridF2 {
	frame $itk_component(adv).gridF2 -relief groove -bd 2
    } {
	usual
d916 1
d918 5
a922 92
    itk_component add adv_nprocL {
	label $itk_component(adv).nprocL -text "# of Processors" -anchor e
    } {
	usual
    }

    itk_component add adv_nprocE {
	entry $itk_component(adv).nprocE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-nproc)]
    } {
	usual
    }

    itk_component add adv_hsampleL {
	label $itk_component(adv).hsampleL -text "Hypersample" -anchor e
    } {
	usual
    }

    itk_component add adv_hsampleE {
	entry $itk_component(adv).hsampleE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-hsample)]
    } {
	usual
    }

    itk_component add adv_jitterL {
	label $itk_component(adv).jitterL -text "Jitter" -anchor e
    } {
	usual
    }

    itk_component add adv_jitterCB {
	cadwidgets::ComboBox $itk_component(adv).jitterCB
    } {
	rename -state -jitterState jitterState JitterState
    }

    # populate jitter's combobox menu
    $itk_component(adv_jitterCB) add command -label "None" \
	    -command [code $this set_jitter 0]
    $itk_component(adv_jitterCB) add command -label "Cell" \
	    -command [code $this set_jitter 1]
    $itk_component(adv_jitterCB) add command -label "Frame" \
	    -command [code $this set_jitter 2]
    $itk_component(adv_jitterCB) add command -label "Both" \
	    -command [code $this set_jitter 3]

    itk_component add adv_lmodelL {
	label $itk_component(adv).lightL -text "Light Model" -anchor e
    } {
	usual
    }

    itk_component add adv_lmodelCB {
	cadwidgets::ComboBox $itk_component(adv).lightCB
    } {
	rename -state -lmodelState lmodelState LmodelState
    }

    # populate lmodel's combobox menu
    $itk_component(adv_lmodelCB) add command -label "Full" \
	    -command [code $this set_lmodel 0]
    $itk_component(adv_lmodelCB) add command -label "Diffuse" \
	    -command [code $this set_lmodel 1]
    $itk_component(adv_lmodelCB) add command -label "Surface Normals" \
	    -command [code $this set_lmodel 2]
    $itk_component(adv_lmodelCB) add command -label "Diffuse - 3 light" \
	    -command [code $this set_lmodel 3]
    $itk_component(adv_lmodelCB) add command -label "Curvature - inverse radius" \
	    -command [code $this set_lmodel 4]
    $itk_component(adv_lmodelCB) add command -label "Curvature - direction vector" \
	    -command [code $this set_lmodel 5]

    itk_component add adv_otherL {
	label $itk_component(adv).otherL -text "Other Options" -anchor e
    } {
	usual
    }

    itk_component add adv_otherE {
	entry $itk_component(adv).otherE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-other)]
    } {
	usual
    }

    itk_component add adv_dismissB {
	button $itk_component(adv).buttonB -relief raised -text "Dismiss" \
		-command [code $this deactivate_adv]
    } {
	usual
a923 33

    # remove labels from the ComboBox
    grid forget [$itk_component(adv_jitterCB) component label]
    grid forget [$itk_component(adv_lmodelCB) component label]

    grid $itk_component(adv_nprocL) $itk_component(adv_nprocE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_hsampleL) $itk_component(adv_hsampleE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_jitterL) $itk_component(adv_jitterCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_lmodelL) $itk_component(adv_lmodelCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_otherL) $itk_component(adv_otherE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid columnconfigure $itk_component(adv_gridF1) 1 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 0 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 1 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 2 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 3 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 4 -weight 1

    grid $itk_component(adv_gridF1) -sticky nsew -padx 8 -pady 8 -in $itk_component(adv_gridF2)
    grid columnconfigure $itk_component(adv_gridF2) 0 -weight 1
    grid rowconfigure $itk_component(adv_gridF2) 0 -weight 1

    grid $itk_component(adv_gridF2) -sticky nsew -padx 2 -pady 2
    grid $itk_component(adv_dismissB) -sticky s -padx 2 -pady 2
    grid columnconfigure $itk_component(adv) 0 -weight 1
    grid rowconfigure $itk_component(adv) 0 -weight 1

    wm withdraw $itk_component(adv)
    wm title $itk_component(adv) "Advanced Settings ($itk_component(adv))"
@


1.2
log
@The raytrace control panel is designed to be used with an Mged
object. It probably should be an inner class of the Mged class.
It's not quite finished. I'm just checking it in to be safe.
@
text
@d35 1
a35 1
    itk_option define -jitter jitter Jitter "None"
d53 1
a70 5
    # This variable is used to determine
    # what value gets passed to rt
    private variable jitter_val 0
    private variable jitter_name 0

d288 2
a289 2
    # Disable the source CombBox's entry widget
    configure -sourceState disabled
a294 2
    $itk_component(adv_jitterCB) configure -entryvariable [scope jitter_name]
    $itk_component(adv_lmodelCB) configure -entryvariable [scope itk_option(-lmodel)]
d300 12
d316 12
d439 3
d447 15
a461 19
	0 -
	None {
	    set jitter_val 0
	    set jitter_name "None"
	}
	1 -
	Cell {
	    set jitter_val 1
	    set jitter_name "Cell"
	}
	2 -
	Frame {
	    set jitter_val 2
	    set jitter_name "Frame"
	}
	3 -
	Both {
	    set jitter_val 3
	    set jitter_name "Both"
d469 32
d594 1
a594 1
    append rt_cmd " -J$jitter_val"
d766 1
a766 1
	    -command [code $this set_jitter "None"]
d768 1
a768 1
	    -command [code $this set_jitter "Cell"]
d770 1
a770 1
	    -command [code $this set_jitter "Frame"]
d772 1
a772 1
	    -command [code $this set_jitter "Both"]
d785 14
@


1.1
log
@file RtControl.tcl was initially added on branch rel-5-1-patches.
@
text
@d1 789
@


1.1.2.1
log
@The raytrace control panel is designed to be used with an Mged
object. It probably should be an inner class of the Mged class.
It's not quite finished. I'm just checking it in to be safe.
@
text
@a0 593
##                 R T C O N T R O L . T C L
#
# Author -
#	Bob Parker
#
# Source -
#	The U. S. Army Research Laboratory
#	Aberdeen Proving Ground, Maryland  21005
#
# Distribution Notice -
#	Re-distribution of this software is restricted, as described in
#       your "Statement of Terms and Conditions for the Release of
#       The BRL-CAD Package" agreement.
#
# Copyright Notice -
#       This software is Copyright (C) 1998 by the United States Army
#       in all countries except the USA.  All rights reserved.
#
# Description -
#	The raytrace control panel is designed to be used with an
#	Mged object. It probably should be an inner class of the Mged
#	class.
#

#XXX This should work.
option add *RtControl*tearoff 0 widgetDefault

class RtControl {
    inherit itk::Toplevel

    itk_option define -olist olist Olist {}
    itk_option define -omode omode Omode {}
    itk_option define -nproc nproc Nproc 1
    itk_option define -hsample hsample Hsample 0
    itk_option define -jitter jitter Jitter 0
    itk_option define -jitterTitle jitterTitle JitterTitle "None"
    itk_option define -lmodel lmodel Lmodel 0
    itk_option define -lmodelTitle lmodelTitle LmodelTitle "Full"
    itk_option define -other other Other {}
    itk_option define -size size Size 512
    itk_option define -color color Color {0 0 0}
    itk_option define -dest dest Dest ""
    itk_option define -mged mged Mged ""

    public method activate {}
    public method deactivate {}
    public method center {}

    private method set_src {pane}
    private method set_dest {pane}
    private method set_size {size}
    private method cook_dest {dest}
    private method fb_mode {}
    private method ok {}
    private method raytrace {}
    private method abort {}
    private method clear {}
    private method get_color {}
    private method get_size {}
    private method get_cooked_dest {}
    private method update_control_panel {}

    private variable fb_mode 0
    private variable raw_src ""
    private variable win_geom ""

    constructor {args} {}
}

body RtControl::constructor {args} {
    # revive a few ignored options
    #itk_option add hull.screen

    itk_component add gridF1 {
	frame $itk_interior.gridF1
    } {
	usual
    }

    itk_component add gridF2 {
	frame $itk_interior.gridF2 -relief groove -bd 2
    } {
	usual
    }

    itk_component add gridF3 {
	frame $itk_interior.gridF3
    } {
	usual
    }

    itk_component add menubar {
	menu $itk_interior.menubar
    } {
	usual
    }
# Why doesn't this work???
#    $itk_component(hull) configure -menu $itk_component(menubar)
    $this component hull configure -menu $itk_component(menubar)

    itk_component add fbM {
	menu $itk_component(menubar).fb -title "Framebuffer"
    } {
	usual
    }

    itk_component add objM {
	menu $itk_component(menubar).obj -title "Objects"
    } {
	usual
    }

    $itk_component(menubar) add cascade -label "Framebuffer" -underline 0 -menu $itk_component(fbM)
    $itk_component(menubar) add cascade -label "Objects" -underline 0 -menu $itk_component(objM)

    $itk_component(fbM) add radiobutton -value 0 -variable [scope fb_mode] \
	    -label "Inactive" -underline 0 \
	    -command [code $this fb_mode]
    $itk_component(fbM) add radiobutton -value 1 -variable [scope fb_mode] \
	    -label "Underlay" -underline 0 \
	    -command [code $this fb_mode]
    $itk_component(fbM) add radiobutton -value 2 -variable [scope fb_mode] \
	    -label "Overlay" -underline 0 \
	    -command [code $this fb_mode]

    itk_component add srcL {
	label $itk_interior.srcL -text "Source" -anchor e
    } {}

    itk_component add srcCB {
	cadwidgets::ComboBox $itk_interior.srcCB -state disabled
    } {
	rename -state -sourceState sourceState SourceState
    }

    # populate source's combobox menu
    $itk_component(srcCB) add command -label "Active Pane" \
	    -command [code $this set_src active]
    $itk_component(srcCB) add separator
    $itk_component(srcCB) add command -label "Upper Left" \
	    -command [code $this set_src ul]
    $itk_component(srcCB) add command -label "Upper Right" \
	    -command [code $this set_src ur]
    $itk_component(srcCB) add command -label "Lower Left" \
	    -command [code $this set_src ll]
    $itk_component(srcCB) add command -label "Lower Right" \
	    -command [code $this set_src lr]

    itk_component add destL {
	label $itk_interior.destL -text "Destination" -anchor e
    } {}

    itk_component add destCB {
	cadwidgets::ComboBox $itk_interior.destCB
    } {
    }

    # populate destination's combobox menu
    $itk_component(destCB) add command -label "Active Pane" \
	    -command [code $this set_dest active]
    $itk_component(destCB) add separator
    $itk_component(destCB) add command -label "Upper Left" \
	    -command [code $this set_dest ul]
    $itk_component(destCB) add command -label "Upper Right" \
	    -command [code $this set_dest ur]
    $itk_component(destCB) add command -label "Lower Left" \
	    -command [code $this set_dest ll]
    $itk_component(destCB) add command -label "Lower Right" \
	    -command [code $this set_dest lr]

#    bind [$itk_component(destCB) component entry] <KeyRelease> [code $this cook_dest]

    itk_component add sizeL {
	label $itk_interior.sizeL -text "Size" -anchor e
    } {}

    itk_component add sizeCB {
	cadwidgets::ComboBox $itk_interior.sizeCB
    } {
    }

    # populate size's combobox
    $itk_component(sizeCB) add command -label "Size of Pane" \
	    -command [code $this set_size "Size of Pane"]
    $itk_component(sizeCB) add command -label "128" \
	    -command [code $this set_size 128]
    $itk_component(sizeCB) add command -label "256" \
	    -command [code $this set_size 256]
    $itk_component(sizeCB) add command -label "512" \
	    -command [code $this set_size 512]
    $itk_component(sizeCB) add command -label "640x480" \
	    -command [code $this set_size "640x480"]
    $itk_component(sizeCB) add command -label "720x486" \
	    -command [code $this set_size "720x486"]
    $itk_component(sizeCB) add command -label "1024" \
	    -command [code $this set_size 1024]

    itk_component add bgcolorL {
	label $itk_interior.bgcolorL -text "Background Color" -anchor e
    } {}

    itk_component add bgcolorCB {
	cadwidgets::ColorEntry $itk_interior.bgcolorCB
    } {
    }

    itk_component add advB {
	button $itk_interior.advB -relief raised -text "Advanced Settings..." \
		-command {puts "do advanced settings"}
    } {
	usual
    }

    itk_component add okB {
	button $itk_interior.okB  -relief raised -text "Ok" \
		-command [code $this ok]
    } {
	usual
    }

    itk_component add raytraceB {
	button $itk_interior.raytraceB  -relief raised -text "Raytrace" \
		-command [code $this raytrace]
    } {
	usual
    }

    itk_component add abortB {
	button $itk_interior.abortB  -relief raised -text "Abort" \
		-command [code $this abort]
    } {
	usual
    }

    itk_component add clearB {
	button $itk_interior.clearB  -relief raised -text "Clear" \
		-command [code $this clear]
    } {
	usual
    }

    itk_component add dismissB {
	button $itk_interior.dismissB  -relief raised -text "Dismiss" \
		-command [code $this deactivate]
    } {
	usual
    }

    grid $itk_component(srcL) $itk_component(srcCB) -pady 1 -sticky nsew -in $itk_component(gridF1)
    grid $itk_component(destL) $itk_component(destCB) -pady 1 -sticky nsew -in $itk_component(gridF1)
    grid $itk_component(sizeL) $itk_component(sizeCB) -pady 1 -sticky nsew -in $itk_component(gridF1)
    grid $itk_component(bgcolorL) $itk_component(bgcolorCB) -pady 1 -sticky nsew -in $itk_component(gridF1)
    grid $itk_component(advB) - -pady 1 -sticky ns -in $itk_component(gridF1)

    grid columnconfigure $itk_component(gridF1) 1 -weight 1
    grid rowconfigure $itk_component(gridF1) 0 -weight 1
    grid rowconfigure $itk_component(gridF1) 1 -weight 1
    grid rowconfigure $itk_component(gridF1) 2 -weight 1
    grid rowconfigure $itk_component(gridF1) 3 -weight 1

    grid $itk_component(gridF1) -padx 4 -pady 4 -sticky nsew -in $itk_component(gridF2)
    grid columnconfigure $itk_component(gridF2) 0 -weight 1
    grid rowconfigure $itk_component(gridF2) 0 -weight 1

    grid $itk_component(okB) $itk_component(raytraceB) \
	    $itk_component(abortB) x $itk_component(clearB) x \
	    $itk_component(dismissB) -sticky "nsew" -in $itk_component(gridF3)
    grid columnconfigure $itk_component(gridF3) 3 -weight 1
    grid columnconfigure $itk_component(gridF3) 5 -weight 1

    grid $itk_component(gridF2) -padx 4 -pady 4 -sticky nsew
    grid $itk_component(gridF3) -padx 4 -pady 4 -sticky nsew
    grid columnconfigure $itk_component(hull) 0 -weight 1
    grid rowconfigure $itk_component(hull) 0 -weight 1

    # process options
    eval itk_initialize $args

    # Link the ComboBox's entry widgets to this class' variables
    $itk_component(sizeCB) configure -entryvariable [scope itk_option(-size)]
    $itk_component(bgcolorCB) configure -entryvariable [scope itk_option(-color)]
    $itk_component(destCB) configure -entryvariable [scope itk_option(-dest)]

    wm withdraw $itk_component(hull)
    center
}

configbody RtControl::mged {
    if {$itk_option(-mged) == ""} {
	return
    }

    update_control_panel
}

itcl::body RtControl::activate {} {
    puts "activate: win_geom - $win_geom"
    wm geometry $itk_component(hull) $win_geom
    wm deiconify $itk_component(hull)
}

itcl::body RtControl::deactivate {} {
    set win_geom [wm geometry $itk_component(hull)]
    wm withdraw $itk_component(hull)
}

itcl::body RtControl::center {} {
    update idletasks
    set width [winfo reqwidth $itk_component(hull)]
    set height [winfo reqheight $itk_component(hull)]
    set screenwidth [winfo screenwidth $itk_component(hull)]
    set screenheight [winfo screenheight $itk_component(hull)]

    set x [expr {int($screenwidth * 0.5 - $width * 0.5)}]
    set y [expr {int($screenheight * 0.5 - $height * 0.5)}]
    wm geometry $itk_component(hull) +$x+$y
    set win_geom +$x+$y
}

itcl::body RtControl::set_src {pane} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    if {$pane == "active"} {
	set pane [$itk_option(-mged) pane]
    }

    $itk_component(srcCB) setText $pane
}

itcl::body RtControl::set_dest {pane} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    if {$pane == "active"} {
	set pane [$itk_option(-mged) pane]
    }

#    $itk_component(destCB) setText $pane
    set itk_option(-dest) $pane
}

itcl::body RtControl::set_size {size} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    if {$size == "Size of Pane"} {
	# Try using the destination for obtaining the size.
#	set pane [$itk_component(destCB) getText]
	set pane $itk_option(-dest)
	switch -- $pane {
	    ul -
	    ur -
	    ll -
	    lr {
		set itk_option(-size) [$itk_option(-mged) component $pane cget -dmsize]
		return
	    }
	}

	# The destination could be a file or a framebuffer.
	# We don't know what its size is so try to use the
	# source pane for obtaining the size.
	set pane [$itk_component(srcCB) getText]
	switch -- $pane {
	    ul -
	    ur -
	    ll -
	    lr {
		set itk_option(-size) [$itk_option(-mged) component $pane cget -dmsize]
		return
	    }
	}

	# We failed to get the size using the destination and source panes.
	# So, we use the active pane for obtaining the size.
	set pane [$itk_option(-mged) pane]
	set itk_option(-size) [$itk_option(-mged) component $pane cget -dmsize]
	return
    }

    set itk_option(-size) $size
}

## - cook_dest
#
# Return a port number if possible. Otherwise, return
# whatever the user specified (i.e. it's already cooked)
#
itcl::body RtControl::cook_dest {dest} {
    switch -- $dest {
	ul -
	ur -
	ll -
	lr {
	    if {![$itk_option(-mged) component $dest fb_active]} {
		$itk_option(-mged) component $dest fb_active 1
	    }
	    return [$itk_option(-mged) component $dest listen]
	}
	default {
	    # Already cooked.
	    return $dest
	}
    }
}

itcl::body RtControl::fb_mode {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    switch -- $itk_option(-dest) {
	ul -
	ur -
	ll -
	lr {
	    $itk_option(-mged) component $itk_option(-dest) fb_active $fb_mode
	}
	default {
	    # Use the active pane
	    $itk_option(-mged) fb_active $fb_mode
	}
    }
}

itcl::body RtControl::ok {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    raytrace
    deactivate
}

itcl::body RtControl::raytrace {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    set rt_cmd "$itk_option(-mged) component [$itk_component(srcCB) getText] \
	    rt -F [get_cooked_dest]"

    if {$itk_option(-size) != ""} {
	set result [regexp "^(\[ \]*\[0-9\]+)((\[ \]*\[xX\]?\[ \]*)|(\[ \]+))(\[0-9\]*\[ \]*)$"\
		$itk_option(-size) smatch width junkA junkB junkC height]
	if {$result} {
	    if {$height != ""} {
		append rt_cmd " -w $width -n $height"
		set width $width.0
		set height $height.0
		set aspect [expr {$width / $height}]
		append rt_cmd " -V $aspect"
	    } else {
		append rt_cmd " -s $width"
	    }
	} else {
	    error "Bad size - $itk_option(-size)"
	}
    }

    set color [get_color]
    if {$color != ""} {
	append rt_cmd " -C[lindex $color 0]/[lindex $color 1]/[lindex $color 2]"
    }

    if {$itk_option(-nproc) != ""} {
	append rt_cmd " -P$itk_option(-nproc)"
    }

    if {$itk_option(-hsample) != ""} {
	append rt_cmd " -H$itk_option(-hsample)"
    }

    if {$itk_option(-jitter) != ""} {
	append rt_cmd " -J$itk_option(-jitter)"
    }

    if {$itk_option(-lmodel) != ""} {
	append rt_cmd " -l$itk_option(-lmodel)"
    }

    if {$itk_option(-other) != ""} {
	append rt_cmd " $itk_option(-other)"
    }

    set result [catch {eval $rt_cmd} rt_error]
    if {$result} {
	error $rt_error
    }
}

itcl::body RtControl::abort {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }
    puts "RtControl::abort - fix me!"
}

itcl::body RtControl::clear {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    set cooked_dest [get_cooked_dest]
    set color [get_color]

    if {$color == ""} {
	set result [catch {exec fbclear -F $cooked_dest 0 0 0 &} rt_error]
    } else {
	set result [catch {eval exec fbclear -F $cooked_dest $color &} rt_error]
    }

    if {$result} {
	error $rt_error
    }
}

itcl::body RtControl::get_color {} {
    if {$itk_option(-color) != ""} {
	set result [regexp "^\[0-9\]+\[ \]+\[0-9\]+\[ \]+\[0-9\]+$" $itk_option(-color)]
	if {!$result} {
	    error "Improper color specification: $itk_option(-color)"
	}
    }

    return $itk_option(-color)
}

itcl::body RtControl::get_size {} {
    return $size
}

## - get_cooked_dest
#
# Returns a port number or something specified by
# the user (i.e. hostname:port, or filename). No error
# checking is performed on user specified strings.
#
itcl::body RtControl::get_cooked_dest {} {
#    set dest [$itk_component(destCB) getText]
    set dest $itk_option(-dest)
    if {$dest == ""} {
	# use the active pane
	set dest [$itk_option(-mged) pane]
    }
    set cooked_dest [cook_dest $dest]
    if {$cooked_dest == -1} {
	switch -- $dest {
	    ul -
	    ur -
	    ll -
	    lr {
		# Cause the framebuffer to listen for clients on port 0.
		# If port 0 isn't available, the next available port will
		# be returned.
		set cooked_dest [$itk_option(-mged) component $dest listen 0]
	    }
	    default {
		# We should only get here if $dest is -1,
		# which had to be specified by the user.
		error "Invalid destination - $dest"
	    }
	}
    }

    return $cooked_dest
}

itcl::body RtControl::update_control_panel {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Raytrace Control Panel($this) is not associated with an Mged object"
    }

    if {![$itk_option(-mged) fb_active]} {
	# Framebuffer is not active, so activate it
	# by putting it in "Underlay" mode.
	$itk_option(-mged) fb_active 1
	set fb_mode 1
    }

    set pane [$itk_option(-mged) pane]
    $itk_component(srcCB) setText $pane
#    $itk_component(destCB) setText $pane
    set itk_option(-dest) $pane
    set_size "Size of Pane"

    # Calling setColor so that the menubutton color gets set.
    eval $itk_component(bgcolorCB) setColor [$itk_option(-mged) bg]
}
@


1.1.2.2
log
@Added code that mostly implements the advanced
settings popup dialog (not done yet).
@
text
@d35 2
a36 1
    itk_option define -jitter jitter Jitter "None"
d38 1
a45 1
    public method activate_adv {}
a46 1
    public method deactivate_adv {}
a51 1
    private method set_jitter {j}
a61 1
    private method build_adv {}
a65 6
    private variable win_geom_adv ""

    # This variable is used to determine
    # what value gets passed to rt
    private variable jitter_val 0
    private variable jitter_name 0
d114 1
a114 3
    if {0} {
	$itk_component(menubar) add cascade -label "Objects" -underline 0 -menu $itk_component(objM)
    }
d131 1
a131 1
	cadwidgets::ComboBox $itk_interior.srcCB
d209 1
a209 1
		-command [code $this activate_adv]
a275 3
    # build the advanced settings panel
    build_adv

a278 3
    # Disable the source CombBox's entry widget
    configure -sourceState disabled

a282 2
    $itk_component(adv_jitterCB) configure -entryvariable [scope jitter_name]
    $itk_component(adv_lmodelCB) configure -entryvariable [scope itk_option(-lmodel)]
a287 4
configbody RtControl::jitter {
    set_jitter $itk_option(-jitter)
}

d297 1
a297 1
    raise $itk_component(hull)
a301 6
itcl::body RtControl::activate_adv {} {
    raise $itk_component(adv)
    wm geometry $itk_component(adv) $win_geom_adv
    wm deiconify $itk_component(adv)
}

a304 6
    deactivate_adv
}

itcl::body RtControl::deactivate_adv {} {
    set win_geom_adv [wm geometry $itk_component(adv)]
    wm withdraw $itk_component(adv)
d341 1
a341 1
    # update the destCB entry
a342 3

    # update the Inactive/Underlay/Overlay radiobutton
    set fb_mode [$itk_option(-mged) component $itk_option(-dest) fb_active]
d352 1
a387 28
itcl::body RtControl::set_jitter {j} {
    switch -- $j {
	0 -
	None {
	    set jitter_val 0
	    set jitter_name "None"
	}
	1 -
	Cell {
	    set jitter_val 1
	    set jitter_name "Cell"
	}
	2 -
	Frame {
	    set jitter_val 2
	    set jitter_name "Frame"
	}
	3 -
	Both {
	    set jitter_val 3
	    set jitter_name "Both"
	}
	default {
	    error "RtControl::set_jitter: bad value - $j"
	}
    }
}

a400 3

		# update the Inactive/Underlay/Overlay radiobutton
		set fb_mode 1
d478 3
a480 1
    append rt_cmd " -J$jitter_val"
d500 1
a500 2

    $itk_option(-mged) component [$itk_component(srcCB) getText] rtabort
d544 1
a592 131
}

itcl::body RtControl::build_adv {} {
    itk_component add adv {
	toplevel $itk_interior.adv
    }

    itk_component add adv_gridF1 {
	frame $itk_component(adv).gridF1
    } {
	usual
    }

    itk_component add adv_gridF2 {
	frame $itk_component(adv).gridF2 -relief groove -bd 2
    } {
	usual
    }

    itk_component add adv_nprocL {
	label $itk_component(adv).nprocL -text "# of Processors" -anchor e
    } {
	usual
    }

    itk_component add adv_nprocE {
	entry $itk_component(adv).nprocE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-nproc)]
    } {
	usual
    }

    itk_component add adv_hsampleL {
	label $itk_component(adv).hsampleL -text "Hypersample" -anchor e
    } {
	usual
    }

    itk_component add adv_hsampleE {
	entry $itk_component(adv).hsampleE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-hsample)]
    } {
	usual
    }

    itk_component add adv_jitterL {
	label $itk_component(adv).jitterL -text "Jitter" -anchor e
    } {
	usual
    }

    itk_component add adv_jitterCB {
	cadwidgets::ComboBox $itk_component(adv).jitterCB
    } {
	rename -state -jitterState jitterState JitterState
    }

    # populate jitter's combobox menu
    $itk_component(adv_jitterCB) add command -label "None" \
	    -command [code $this set_jitter "None"]
    $itk_component(adv_jitterCB) add command -label "Cell" \
	    -command [code $this set_jitter "Cell"]
    $itk_component(adv_jitterCB) add command -label "Frame" \
	    -command [code $this set_jitter "Frame"]
    $itk_component(adv_jitterCB) add command -label "Both" \
	    -command [code $this set_jitter "Both"]

    itk_component add adv_lmodelL {
	label $itk_component(adv).lightL -text "Light Model" -anchor e
    } {
	usual
    }

    itk_component add adv_lmodelCB {
	cadwidgets::ComboBox $itk_component(adv).lightCB
    } {
	rename -state -lmodelState lmodelState LmodelState
    }

    itk_component add adv_otherL {
	label $itk_component(adv).otherL -text "Other Options" -anchor e
    } {
	usual
    }

    itk_component add adv_otherE {
	entry $itk_component(adv).otherE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-other)]
    } {
	usual
    }

    itk_component add adv_dismissB {
	button $itk_component(adv).buttonB -relief raised -text "Dismiss" \
		-command [code $this deactivate_adv]
    } {
	usual
    }

    # remove labels from the ComboBox
    grid forget [$itk_component(adv_jitterCB) component label]
    grid forget [$itk_component(adv_lmodelCB) component label]

    grid $itk_component(adv_nprocL) $itk_component(adv_nprocE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_hsampleL) $itk_component(adv_hsampleE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_jitterL) $itk_component(adv_jitterCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_lmodelL) $itk_component(adv_lmodelCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_otherL) $itk_component(adv_otherE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid columnconfigure $itk_component(adv_gridF1) 1 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 0 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 1 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 2 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 3 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 4 -weight 1

    grid $itk_component(adv_gridF1) -sticky nsew -padx 8 -pady 8 -in $itk_component(adv_gridF2)
    grid columnconfigure $itk_component(adv_gridF2) 0 -weight 1
    grid rowconfigure $itk_component(adv_gridF2) 0 -weight 1

    grid $itk_component(adv_gridF2) -sticky nsew -padx 2 -pady 2
    grid $itk_component(adv_dismissB) -sticky s -padx 2 -pady 2
    grid columnconfigure $itk_component(adv) 0 -weight 1
    grid rowconfigure $itk_component(adv) 0 -weight 1

    wm withdraw $itk_component(adv)
    wm title $itk_component(adv) "Advanced Settings ($itk_component(adv))"
@


1.1.2.3
log
@*- Finished the advanced settings dialog
*- added a few configbody's
*- other stuff
@
text
@d35 1
a35 1
    itk_option define -jitter jitter Jitter 0
a52 1
    private method set_lmodel {lm}
d70 5
d292 2
a293 2
    # Disable the source, jitter and lmodel CombBox's entry widgets
    configure -sourceState disabled -jitterState disabled -lmodelState disabled
d299 2
a305 12
configbody RtControl::nproc {
    if {![regexp "^\[0-9\]+$" $itk_option(-nproc)]} {
	error "Bad value - $itk_option(-nproc)"
    }
}

configbody RtControl::hsample {
    if {![regexp "^\[0-9\]+$" $itk_option(-hsample)]} {
	error "Bad value - $itk_option(-hsample)"
    }
}

a309 12
configbody RtControl::lmodel {
    set_lmodel $itk_option(-lmodel)
}

configbody RtControl::size {
    set_size $itk_option(-size)
}

configbody RtControl::color {
    eval $itk_component(bgcolorCB) setColor $itk_option(-color)
}

a420 3
    if {![regexp "^(\[ \]*\[0-9\]+)((\[ \]*\[xX\]?\[ \]*)|(\[ \]+))(\[0-9\]*\[ \]*)$" $size]} {
	error "Bad size - $size"
    }
d426 19
a444 15
	0 {
	    set itk_option(-jitter) 0
	    $itk_component(adv_jitterCB) setText "None"
	}
	1 {
	    set itk_option(-jitter) 1
	    $itk_component(adv_jitterCB) setText "Cell"
	}
	2 {
	    set itk_option(-jitter) 2
	    $itk_component(adv_jitterCB) setText "Frame"
	}
	3 {
	    set itk_option(-jitter) 3
	    $itk_component(adv_jitterCB) setText "Both"
a451 32
itcl::body RtControl::set_lmodel {lm} {
    switch -- $lm {
	0 {
	    set itk_option(-lmodel) 0
	    $itk_component(adv_lmodelCB) setText "Full"
	}
	1 {
	    set itk_option(-lmodel) 1
	    $itk_component(adv_lmodelCB) setText "Diffuse"
	}
	2 {
	    set itk_option(-lmodel) 2
	    $itk_component(adv_lmodelCB) setText "Surface Normals"
	}
	3 {
	    set itk_option(-lmodel) 3
	    $itk_component(adv_lmodelCB) setText "Diffuse - 3 light"
	}
	4 {
	    set itk_option(-lmodel) 4
	    $itk_component(adv_lmodelCB) setText "Curvature - inverse radius"
	}
	5 {
	    set itk_option(-lmodel) 5
	    $itk_component(adv_lmodelCB) setText "Curvature - directioin vector"
	}
	default {
	    error "RtControl::set_lmodel: bad value - $lm"
	}
    }
}

d545 1
a545 1
    append rt_cmd " -J$itk_option(-jitter)"
d717 1
a717 1
	    -command [code $this set_jitter 0]
d719 1
a719 1
	    -command [code $this set_jitter 1]
d721 1
a721 1
	    -command [code $this set_jitter 2]
d723 1
a723 1
	    -command [code $this set_jitter 3]
a735 14

    # populate lmodel's combobox menu
    $itk_component(adv_lmodelCB) add command -label "Full" \
	    -command [code $this set_lmodel 0]
    $itk_component(adv_lmodelCB) add command -label "Diffuse" \
	    -command [code $this set_lmodel 1]
    $itk_component(adv_lmodelCB) add command -label "Surface Normals" \
	    -command [code $this set_lmodel 2]
    $itk_component(adv_lmodelCB) add command -label "Diffuse - 3 light" \
	    -command [code $this set_lmodel 3]
    $itk_component(adv_lmodelCB) add command -label "Curvature - inverse radius" \
	    -command [code $this set_lmodel 4]
    $itk_component(adv_lmodelCB) add command -label "Curvature - direction vector" \
	    -command [code $this set_lmodel 5]
@


1.1.2.4
log
@Add code to provide status (not done yet).
@
text
@a24 4
itk::usual RtControl {
    keep -tearoff
}

d37 1
a37 1
    itk_option define -other other Other "-A 0.9"
d47 1
a47 1
    public method center {w gs {cw ""}}
a48 1
    private method build_adv {}
d64 1
a64 3
    private method menuStatusCB {w}
    private method leaveCB {}
    private method enterRaytraceCB {}
d79 1
a79 1
	::frame $itk_interior.gridF1
d85 1
a85 1
	::frame $itk_interior.gridF2 -relief groove -bd 2
d91 1
a91 1
	::frame $itk_interior.gridF3
d97 1
a97 1
	::menu $itk_interior.menubar
d106 1
a106 1
	::menu $itk_component(menubar).fb -title "Framebuffer"
d112 1
a112 1
	::menu $itk_component(menubar).obj -title "Objects"
d133 2
a134 4
	::label $itk_interior.srcL -text "Source" -anchor e
    } {
	usual
    }
a138 1
	usual
d156 2
a157 4
	::label $itk_interior.destL -text "Destination" -anchor e
    } {
	usual
    }
a161 1
	usual
d180 2
a181 4
	::label $itk_interior.sizeL -text "Size" -anchor e
    } {
	usual
    }
a185 1
	usual
d205 2
a206 4
	::label $itk_interior.bgcolorL -text "Background Color" -anchor e
    } {
	usual
    }
a210 1
	usual
d214 1
a214 1
	::button $itk_interior.advB -relief raised -text "Advanced Settings..." \
d221 1
a221 1
	::button $itk_interior.okB  -relief raised -text "Ok" \
d228 1
a228 1
	::button $itk_interior.raytraceB  -relief raised -text "Raytrace" \
a232 2
    bind $itk_component(raytraceB) <Enter> [code $this enterRaytraceCB]
    bind $itk_component(raytraceB) <Leave> [code $this leaveCB]
d235 1
a235 1
	::button $itk_interior.abortB  -relief raised -text "Abort" \
d242 1
a242 1
	::button $itk_interior.clearB  -relief raised -text "Clear" \
d249 1
a249 1
	::button $itk_interior.dismissB  -relief raised -text "Dismiss" \
a254 6
    itk_component add statusL {
	::label $itk_interior.statusL -anchor w -relief sunken -bd 2
    } {
	usual
    }

a278 1
    grid $itk_component(statusL) -padx 2 -pady 2 -sticky nsew
d297 1
a297 147
}

itcl::body RtControl::build_adv {} {
    itk_component add adv {
	toplevel $itk_interior.adv
    }

    itk_component add adv_gridF1 {
	::frame $itk_component(adv).gridF1
    } {
	usual
    }

    itk_component add adv_gridF2 {
	::frame $itk_component(adv).gridF2 -relief groove -bd 2
    } {
	usual
    }

    itk_component add adv_nprocL {
	::label $itk_component(adv).nprocL -text "# of Processors" -anchor e
    } {
	usual
    }

    itk_component add adv_nprocE {
	::entry $itk_component(adv).nprocE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-nproc)]
    } {
	usual
    }

    itk_component add adv_hsampleL {
	::label $itk_component(adv).hsampleL -text "Hypersample" -anchor e
    } {
	usual
    }

    itk_component add adv_hsampleE {
	::entry $itk_component(adv).hsampleE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-hsample)]
    } {
	usual
    }

    itk_component add adv_jitterL {
	::label $itk_component(adv).jitterL -text "Jitter" -anchor e
    } {
	usual
    }

    itk_component add adv_jitterCB {
	cadwidgets::ComboBox $itk_component(adv).jitterCB
    } {
	usual
	rename -state -jitterState jitterState JitterState
    }

    # populate jitter's combobox menu
    $itk_component(adv_jitterCB) add command -label "None" \
	    -command [code $this set_jitter 0]
    $itk_component(adv_jitterCB) add command -label "Cell" \
	    -command [code $this set_jitter 1]
    $itk_component(adv_jitterCB) add command -label "Frame" \
	    -command [code $this set_jitter 2]
    $itk_component(adv_jitterCB) add command -label "Both" \
	    -command [code $this set_jitter 3]

    itk_component add adv_lmodelL {
	::label $itk_component(adv).lightL -text "Light Model" -anchor e
    } {
	usual
    }

    itk_component add adv_lmodelCB {
	cadwidgets::ComboBox $itk_component(adv).lightCB
    } {
	usual
	rename -state -lmodelState lmodelState LmodelState
    }

    # populate lmodel's combobox menu
    $itk_component(adv_lmodelCB) add command -label "Full" \
	    -command [code $this set_lmodel 0]
    $itk_component(adv_lmodelCB) add command -label "Diffuse" \
	    -command [code $this set_lmodel 1]
    $itk_component(adv_lmodelCB) add command -label "Surface Normals" \
	    -command [code $this set_lmodel 2]
    $itk_component(adv_lmodelCB) add command -label "Diffuse - 3 light" \
	    -command [code $this set_lmodel 3]
    $itk_component(adv_lmodelCB) add command -label "Curvature - inverse radius" \
	    -command [code $this set_lmodel 4]
    $itk_component(adv_lmodelCB) add command -label "Curvature - direction vector" \
	    -command [code $this set_lmodel 5]

    itk_component add adv_otherL {
	::label $itk_component(adv).otherL -text "Other Options" -anchor e
    } {
	usual
    }

    itk_component add adv_otherE {
	::entry $itk_component(adv).otherE -relief sunken -bd 2 -width 2 \
		-textvar [scope itk_option(-other)]
    } {
	usual
    }

    itk_component add adv_dismissB {
	::button $itk_component(adv).buttonB -relief raised -text "Dismiss" \
		-command [code $this deactivate_adv]
    } {
	usual
    }

    # remove labels from the ComboBox
    grid forget [$itk_component(adv_jitterCB) component label]
    grid forget [$itk_component(adv_lmodelCB) component label]

    grid $itk_component(adv_nprocL) $itk_component(adv_nprocE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_hsampleL) $itk_component(adv_hsampleE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_jitterL) $itk_component(adv_jitterCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_lmodelL) $itk_component(adv_lmodelCB) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_otherL) $itk_component(adv_otherE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid columnconfigure $itk_component(adv_gridF1) 1 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 0 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 1 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 2 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 3 -weight 1
    grid rowconfigure $itk_component(adv_gridF1) 4 -weight 1

    grid $itk_component(adv_gridF1) -sticky nsew -padx 8 -pady 8 -in $itk_component(adv_gridF2)
    grid columnconfigure $itk_component(adv_gridF2) 0 -weight 1
    grid rowconfigure $itk_component(adv_gridF2) 0 -weight 1

    grid $itk_component(adv_gridF2) -sticky nsew -padx 2 -pady 2
    grid $itk_component(adv_dismissB) -sticky s -padx 2 -pady 2
    grid columnconfigure $itk_component(adv) 0 -weight 1
    grid rowconfigure $itk_component(adv) 0 -weight 1

    wm withdraw $itk_component(adv)
    wm title $itk_component(adv) "Advanced Settings ($itk_component(adv))"
a337 5

    # center on screen
    if {$win_geom == ""} {
	center $itk_component(hull) win_geom
    }
a343 5

    # center over control panel
    if {$win_geom_adv == ""} {
	center $itk_component(adv) win_geom_adv $itk_component(hull)
    }
d359 1
a359 3
itcl::body RtControl::center {w gs {cw ""}} {
    upvar $gs geom

d361 9
a369 11

    if {$cw != "" && [winfo exists $cw]} {
	set x [expr {int([winfo reqwidth $cw] * 0.5 + [winfo x $cw] - [winfo reqwidth $w] * 0.5)}]
	set y [expr {int([winfo reqheight $cw] * 0.5 + [winfo y $cw] - [winfo reqheight $w] * 0.5)}]
    } else {
	set x [expr {int([winfo screenwidth $w] * 0.5 - [winfo reqwidth $w] * 0.5)}]
	set y [expr {int([winfo screenheight $w] * 0.5 - [winfo reqheight $w] * 0.5)}]
    }

    wm geometry $w +$x+$y
    set geom +$x+$y
d709 75
a783 6
itcl::body RtControl::menuStatusCB {w} {
    set op [$w entrycget active -label]
    switch -- $op {
	default {
	    set msg ""
	}
a784 1
}
d786 19
a804 3
itcl::body RtControl::leaveCB {} {
    $itk_component(statusL) configure -text ""
}
d806 5
a810 5
itcl::body RtControl::enterOkCB {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	$itk_component(statusL) configure -text "Not associated with an Mged object"
    } else {
	$itk_component(statusL) configure -text "Raytrace [$itk_component(srcCB) getText]'s view into $itk_option(-dest)"
a811 1
}
d813 5
a817 5
itcl::body RtControl::enterRaytraceCB {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	$itk_component(statusL) configure -text "Not associated with an Mged object"
    } else {
	$itk_component(statusL) configure -text "Raytrace [$itk_component(srcCB) getText]'s view into $itk_option(-dest)"
d819 33
@


1.1.2.5
log
@Add more status code.
@
text
@a70 2
    private method enterAdvCB {}
    private method enterOkCB {}
a71 6
    private method enterAbortCB {}
    private method enterClearCB {}
    private method enterDismissCB {}
    private method getPane {}
    private method getPaneStr {}
    private method getSize {}
a76 4
    private variable msg ""
    private variable srcM
    private variable destM
    private variable sizeM
d117 6
a122 1
    bind $itk_component(fbM) <<MenuSelect>> [code $this menuStatusCB %W]
a124 1

a125 6
	itk_component add objM {
	    ::menu $itk_component(menubar).obj -title "Objects"
	} {
	    usual
	}

a150 2
    set srcM [$itk_component(srcCB) component menu]
    bind $srcM <<MenuSelect>> [code $this menuStatusCB %W]
a175 2
    set destM [$itk_component(destCB) component menu]
    bind $destM <<MenuSelect>> [code $this menuStatusCB %W]
a202 2
    set sizeM [$itk_component(sizeCB) component menu]
    bind $sizeM <<MenuSelect>> [code $this menuStatusCB %W]
a237 2
    bind $itk_component(advB) <Enter> [code $this enterAdvCB]
    bind $itk_component(advB) <Leave> [code $this leaveCB]
a244 2
    bind $itk_component(okB) <Enter> [code $this enterOkCB]
    bind $itk_component(okB) <Leave> [code $this leaveCB]
a260 2
    bind $itk_component(abortB) <Enter> [code $this enterAbortCB]
    bind $itk_component(abortB) <Leave> [code $this leaveCB]
a267 2
    bind $itk_component(clearB) <Enter> [code $this enterClearCB]
    bind $itk_component(clearB) <Leave> [code $this leaveCB]
a274 2
    bind $itk_component(dismissB) <Enter> [code $this enterDismissCB]
    bind $itk_component(dismissB) <Leave> [code $this leaveCB]
d277 1
a277 1
	::label $itk_interior.statusL -anchor w -relief sunken -bd 2 -textvar [scope msg]
d716 16
a731 2
    set pane [getPane]
    $itk_option(-mged) component $pane fb_active $fb_mode
d898 1
a898 7
    global myjunk

    if {[catch {$w entrycget active -label} op]} {
	# probably a tearoff entry
	set op ""
    }

a899 77
	"Inactive" {
	    if {[catch {getPaneStr} result]} {
		set msg $result
	    } else {
		set msg "Make the $result framebuffer inactive"
	    }
	}
	"Underlay" {
	    if {[catch {getPaneStr} result]} {
		set msg $result
	    } else {
		set msg "Put the $result framebuffer in underlay mode"
	    }
	}
	"Overlay" {
	    if {[catch {getPaneStr} result]} {
		set msg $result
	    } else {
		set msg "Put the $result framebuffer in overlay mode"
	    }
	}
	"Active Pane" {
	    if {[catch {getPaneStr} result]} {
		set msg $result
	    } else {
		if {$srcM == $w} {
		    set msg "Make the $result pane the source"
		} else {
		    set msg "Make the $result pane the destination"
		}
	    }
	}
	"Upper Left" {
	    if {$srcM == $w} {
		set msg "Make the upper left pane the source"
	    } else {
		set msg "Make the upper left pane the destination"
	    }
	}
	"Upper Right" {
	    if {$srcM == $w} {
		set msg "Make the upper right pane the source"
	    } else {
		set msg "Make the upper right pane the destination"
	    }
	}
	"Lower Left" {
	    if {$srcM == $w} {
		set msg "Make the lower left pane the source"
	    } else {
		set msg "Make the lower left pane the destination"
	    }
	}
	"Lower Right" {
	    if {$srcM == $w} {
		set msg "Make the lower right pane the source"
	    } else {
		set msg "Make the lower right pane the destination"
	    }
	}
	"Size of Pane" {
	    if {[catch {getSize} result]} {
		set msg $result
	    } else {
		set msg "Make the image size $result"
	    }
	}
	"128" -
	"256" -
	"512" -
	"1024" {
	    set msg "Make the image size ${op}x${op}"
	}
	"640x480" -
	"720x486" {
	    set msg "Make the image size $op"
	}
d907 1
a907 5
    set msg ""
}

itcl::body RtControl::enterAdvCB {} {
    set msg "Activate the advanced settings dialog"
d912 1
a912 1
	set msg "Not associated with an Mged object"
d914 1
a914 1
	set msg "Raytrace [$itk_component(srcCB) getText]'s view into $itk_option(-dest) and dismiss"
d920 1
a920 17
	set msg "Not associated with an Mged object"
    } else {
	set msg "Raytrace [$itk_component(srcCB) getText]'s view into $itk_option(-dest)"
    }
}

itcl::body RtControl::enterAbortCB {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	set msg "Not associated with an Mged object"
    } else {
	set msg "Abort all raytraces started from [$itk_component(srcCB) getText]"
    }
}

itcl::body RtControl::enterClearCB {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	set msg "Not associated with an Mged object"
d922 1
a922 54
	set msg "Clear $itk_option(-dest) with the following color - $itk_option(-color)"
    }
}

itcl::body RtControl::enterDismissCB {} {
    set msg "Dismiss the raytrace control panel"
}

## - getPane
#
# Return a pane associated with $itk_option(-mged)
# according to $itk_option(-dest).
#
# Note - if $itk_option(-dest) is not a pane (i.e. it's a
#        file or some other framebuffer) then the active
#        pane is returned.
#
itcl::body RtControl::getPane {} {
    if {[catch {$itk_option(-mged) isa Mged}]} {
	error "Not associated with an Mged object"
    }

    switch -- $itk_option(-dest) {
	ul -
	ur -
	ll -
	lr {
	    return $itk_option(-dest)
	}
	default {
	    # Use the active pane
	    return [$itk_option(-mged) pane]
	}
    }
}

itcl::body RtControl::getPaneStr {} {
    if {[catch {getPane} result]} {
	return $result
    }

    switch -- $result {
	ul {
	    return "upper left"
	}
	ur {
	    return "upper right"
	}
	ll {
	    return "lower left"
	}
	lr {
	    return "lower right"
	}
a923 40
}

## - getSize
#
#
#
itcl::body RtControl::getSize {} {
    if {[catch {$itk_option(-mged) isa Mged} result]} {
	error "Not associated with an Mged object"
    }

    # Try using the destination for obtaining the size.
    switch -- $itk_option(-dest) {
	ul -
	ur -
	ll -
	lr {
	    set size [$itk_option(-mged) component $itk_option(-dest) cget -dmsize]
	    return "[lindex $size 0]x[lindex $size 1]"
	}
    }

    # The destination could be a file or a framebuffer.
    # We don't know what its size is so try to use the
    # source pane for obtaining the size.
    set pane [$itk_component(srcCB) getText]
    switch -- $pane {
	ul -
	ur -
	ll -
	lr {
	    set size [$itk_option(-mged) component $pane cget -dmsize]
	    return "[lindex $size 0]x[lindex $size 1]"
	}
    }

    # We failed to get the size using the destination and source panes.
    # So, we use the active pane for obtaining the size.
    set size [$itk_option(-mged) component [$itk_option(-mged) pane] cget -dmsize]
    return "[lindex $size 0]x[lindex $size 1]"
@


1.1.2.6
log
@*- Added the last of the status code
@
text
@a76 3
    private method enterDestCB {}
    private method enterSizeCB {}
    private method enterColorCB {}
a80 7
    private method menuStatusAdvCB {w}
    private method leaveAdvCB {}
    private method enterDismissAdvCB {}
    private method enterNProcCB {}
    private method enterHSampleCB {}
    private method enterOtherCB {}

a85 1
    private variable msg_adv ""
a87 1
    private variable destE
a88 5
    private variable sizeE
    private variable colorM
    private variable colorE
    private variable jitterM
    private variable lmodelM
a192 1
    set destE [$itk_component(destCB) component entry]
a193 2
    bind $destE <Enter> [code $this enterDestCB]
    bind $destE <Leave> [code $this leaveCB]
a221 1
    set sizeE [$itk_component(sizeCB) component entry]
a222 2
    bind $sizeE <Enter> [code $this enterSizeCB]
    bind $sizeE <Leave> [code $this leaveCB]
a250 5
    set colorM [$itk_component(bgcolorCB) component menu]
    set colorE [$itk_component(bgcolorCB) component entry]
    bind $colorM <<MenuSelect>> [code $this menuStatusCB %W]
    bind $colorE <Enter> [code $this enterColorCB]
    bind $colorE <Leave> [code $this leaveCB]
a354 1
    wm title $itk_component(hull) "Raytrace Control Panel"
a385 2
    bind $itk_component(adv_nprocE) <Enter> [code $this enterNProcCB]
    bind $itk_component(adv_nprocE) <Leave> [code $this leaveAdvCB]
a398 2
    bind $itk_component(adv_hsampleE) <Enter> [code $this enterHSampleCB]
    bind $itk_component(adv_hsampleE) <Leave> [code $this leaveAdvCB]
a411 2
    set jitterM [$itk_component(adv_jitterCB) component menu]
    bind $jitterM <<MenuSelect>> [code $this menuStatusAdvCB %W]
a434 2
    set lmodelM [$itk_component(adv_lmodelCB) component menu]
    bind $lmodelM <<MenuSelect>> [code $this menuStatusAdvCB %W]
a461 2
    bind $itk_component(adv_otherE) <Enter> [code $this enterOtherCB]
    bind $itk_component(adv_otherE) <Leave> [code $this leaveAdvCB]
a468 8
    bind $itk_component(adv_dismissB) <Enter> [code $this enterDismissAdvCB]
    bind $itk_component(adv_dismissB) <Leave> [code $this leaveAdvCB]

    itk_component add adv_statusL {
	::label $itk_component(adv).statusL -anchor w -relief sunken -bd 2 -textvar [scope msg_adv]
    } {
	usual
    }
d474 3
a476 1
    grid $itk_component(adv_lmodelL) $itk_component(adv_lmodelCB) \
d480 1
a480 3
    grid $itk_component(adv_nprocL) $itk_component(adv_nprocE) \
	    -sticky nsew -pady 1 -in $itk_component(adv_gridF1)
    grid $itk_component(adv_hsampleL) $itk_component(adv_hsampleE) \
a496 1
    grid $itk_component(adv_statusL) -padx 2 -pady 2 -sticky nsew
d501 1
a501 1
    wm title $itk_component(adv) "Advanced Settings"
d624 30
a653 1
	set itk_option(-size) [getSize]
d914 2
a998 27
	"black" {
	    set msg "Make the background color black"
	}
	"white" {
	    set msg "Make the background color white"
	}
	"red" {
	    set msg "Make the background color red"
	}
	"green" {
	    set msg "Make the background color green"
	}
	"blue" {
	    set msg "Make the background color blue"
	}
	"yellow" {
	    set msg "Make the background color yellow"
	}
	"cyan" {
	    set msg "Make the background color cyan"
	}
	"magenta" {
	    set msg "Make the background color magenta"
	}
	"Color Tool..." {
	    set msg "Activate the color tool"
	}
a1048 12
itcl::body RtControl::enterDestCB {} {
    set msg "Specify a destination (i.e. framebuffer or file)"
}

itcl::body RtControl::enterSizeCB {} {
    set msg "Specify an image size" 
}

itcl::body RtControl::enterColorCB {} {
    set msg "Specify an RGB color"
}

a1135 63
}

itcl::body RtControl::menuStatusAdvCB {w} {
    if {[catch {$w entrycget active -label} op]} {
	# probably a tearoff entry
	set op ""
    }

    switch -- $op {
	"Full" {
	    set msg_adv "Full lighting model"
	}
	"Diffuse" {
	    set msg_adv "Diffuse lighting model (debugging)"
	}
	"Surface Normals" {
	    set msg_adv "Display surface normals"
	}
	"Diffuse - 3 light" {
	    set msg_adv "3-light diffuse (debugging)"
	}
	"Curvature - inverse radius" {
	    set msg_adv "Curvature debugging - inverse radius"
	}
	"Curvature - direction vector" {
	    set msg_adv "Curvature debugging - direction vector"
	}
	"None" {
	    set msg_adv "Fire rays from center of cell"
	}
	"Cell" {
	    set msg_adv "Jitter each cell by +/- one half pixel"
	}
	"Frame" {
	    set msg_adv "Jitter the frame by +/- one half pixel"
	}
	"Both" {
	    set msg_adv "Jitter the cells and the frame"
	}
	default {
	    set msg_adv ""
	}
    }
}

itcl::body RtControl::leaveAdvCB {} {
    set msg_adv ""
}

itcl::body RtControl::enterDismissAdvCB {} {
    set msg_adv "Dismiss the advanced settings dialog"
}

itcl::body RtControl::enterNProcCB {} {
    set msg_adv "Requested number of processors"
}

itcl::body RtControl::enterHSampleCB {} {
    set msg_adv "Extra rays to fire per pixel"
}

itcl::body RtControl::enterOtherCB {} {
    set msg_adv "Other rt options"
@


1.1.2.7
log
@*- Change the order of items in
   the Framebuffer menu
@
text
@d160 2
a161 2
    $itk_component(fbM) add radiobutton -value 2 -variable [scope fb_mode] \
	    -label "Overlay" -underline 0 \
d166 2
a167 2
    $itk_component(fbM) add radiobutton -value 0 -variable [scope fb_mode] \
	    -label "Inactive" -underline 0 \
@


