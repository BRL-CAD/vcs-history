head	1.4;
access;
symbols
	ansi-20040405-merged:1.3
	postmerge-20040405-ansi:1.3
	premerge-20040404-ansi:1.3
	postmerge-autoconf:1.3
	autoconf-freeze:1.3
	premerge-autoconf:1.3
	postmerge-20040315-windows:1.3
	premerge-20040315-windows:1.3
	windows-20040315-freeze:1.3
	autoconf-20031203:1.3
	autoconf-20031202:1.3
	autoconf-branch:1.3.0.12
	phong-branch:1.3.0.10
	photonmap-branch:1.3.0.8
	rel-6-1-DP:1.3
	windows-branch:1.3.0.6
	rel-6-0-2:1.3
	ansi-branch:1.3.0.4
	rel-6-0-1-branch:1.3.0.2
	hartley-6-0-post:1.3
	hartley-6-0-pre:1.3
	rel-6-0-1:1.3
	rel-6-0:1.3
	rel-5-4:1.2.2.1
	offsite-5-3-pre:1.3
	rel-5-3:1.2.2.1
	rel-5-2:1.2
	rel-5-1-branch:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.1
	rel-5-0-beta:1.1
	rel-4-5:1.1
	ctj-4-5-post:1.1
	ctj-4-5-pre:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.05.21.16.41.17;	author morrison;	state dead;
branches;
next	1.3;

1.3
date	2001.02.16.22.36.56;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	99.09.21.12.50.34;	author jra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	97.01.27.21.11.47;	author pjt;	state Exp;
branches;
next	;

1.2.2.1
date	2001.02.09.15.22.34;	author bparker;	state Exp;
branches;
next	;


desc
@     Ensure that all commands that the caller uses but doesn't define
     are provided by the application
@


1.4
log
@moved to src/tclscripts/
@
text
@#
#			C H E C K _ E X T E R N S
#
#	Ensure that all commands that the caller uses but doesn't define
#	are provided by the application
#
proc check_externs {extern_list} {
    set unsat 0
    set s [info script]
    upvar #0 argv0 app
    set msg ""
    foreach cmd $extern_list {
	if {[info command $cmd] == ""} {
	    # append this string once
	    if {$msg == ""} {
		if {[info exists app]} {
		    append msg "Application '$app' unsuited to use Tcl script '$s':\n"
		} else {
		    append msg "Application unsuited to use Tcl script '$s':\n"
		}

		append msg " Fails to define the following commands: $cmd"
		continue
	    }
	    append msg ", $cmd"
	}
    }
    if {$msg != ""} {
	error $msg
    }
}

#
#			D E L E T E _ P R O C S
#
#		    Silently delete Tcl procedures
#
#	Delete each of the specified procedures that exist.
#	This guard is necessary since Tcl's rename command
#	squawks whenever its argument is not the name of
#	an existing procedure.
#
proc delete_procs {proc_list} {
    foreach proc_name $proc_list {
	if {[string length [info command $proc_name]] != 0} {
	    rename $proc_name {}
	}
    }
}
@


1.3
log
@*- mods to check_externs
@
text
@@


1.2
log
@Was assuming existence of 'app' variable. Modified to check for existence.
@
text
@d11 1
d13 11
a23 5
	if {[string length [info command $cmd]] == 0} {
	    if { [info exists app] } {
		    puts stderr "Application '$app' unsuited to use Tcl script '$s':"
	    } else {
		    puts stderr "Application unsuited to use Tcl script '$s':"
d25 1
a25 2
	    puts stderr " Fails to define command '$cmd'"
	    set unsat 1
d28 2
a29 3
    if {$unsat == 1} {
	puts "Tcl script '$s' aborting"
	return -code return
@


1.2.2.1
log
@*- Modified check_externs to include only once the string
  "Application unsuited to use Tcl script". Also, have it
  throw an error.
@
text
@a10 1
    set msg ""
d12 5
a16 11
	if {[info command $cmd] == ""} {
	    # append this string once
	    if {$msg == ""} {
		if {[info exists app]} {
		    append msg "Application '$app' unsuited to use Tcl script '$s':\n"
		} else {
		    append msg "Application unsuited to use Tcl script '$s':\n"
		}

		append msg " Fails to define the following commands: $cmd"
		continue
d18 2
a19 1
	    append msg ", $cmd"
d22 3
a24 2
    if {$msg != ""} {
	error $msg
@


1.1
log
@Initial revision
@
text
@d13 5
a17 1
	    puts stderr "Application '$app' unsuited to use Tcl script '$s':"
@

