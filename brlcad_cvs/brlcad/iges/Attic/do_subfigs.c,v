head	1.11;
access;
symbols
	ansi-20040405-merged:1.9.4.1
	postmerge-20040405-ansi:1.10
	premerge-20040404-ansi:1.10
	postmerge-autoconf:1.10
	autoconf-freeze:1.9.12.2
	premerge-autoconf:1.10
	ansi-20040316-freeze:1.9
	postmerge-20040315-windows:1.10
	premerge-20040315-windows:1.10
	windows-20040315-freeze:1.9.6.1
	autoconf-20031203:1.9
	autoconf-20031202:1.9
	autoconf-branch:1.9.0.12
	phong-branch:1.9.0.10
	photonmap-branch:1.9.0.8
	rel-6-1-DP:1.9
	windows-branch:1.9.0.6
	rel-6-0-2:1.9
	ansi-branch:1.9.0.4
	rel-6-0-1-branch:1.9.0.2
	hartley-6-0-post:1.9
	hartley-6-0-pre:1.9
	rel-6-0-1:1.9
	rel-6-0:1.8
	rel-5-4:1.5
	offsite-5-3-pre:1.6
	rel-5-3:1.5
	rel-5-2:1.5
	rel-5-1-branch:1.5.0.2
	rel-5-1:1.5
	rel-5-0:1.3
	rel-5-0-beta:1.3
	rel-4-5:1.3
	ctj-4-5-post:1.3
	ctj-4-5-pre:1.3;
locks; strict;
comment	@ * @;


1.11
date	2004.05.24.04.01.08;	author morrison;	state dead;
branches;
next	1.10;

1.10
date	2004.02.02.17.39.04;	author morrison;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.17.12.49.27;	author morrison;	state Exp;
branches
	1.9.4.1
	1.9.6.1
	1.9.12.1;
next	1.8;

1.8
date	2001.08.08.20.25.12;	author jra;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.17.20.05.03;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.24.04.10.47;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.29.18.42.43;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.05.14.16.08;	author jra;	state Exp;
branches;
next	1.3;

1.3
date	97.01.08.03.17.57;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	95.12.08.17.49.39;	author jra;	state Exp;
branches;
next	1.1;

1.1
date	95.12.05.22.01.46;	author jra;	state Exp;
branches;
next	;

1.9.4.1
date	2004.03.17.21.16.31;	author morrison;	state Exp;
branches;
next	;

1.9.6.1
date	2004.03.11.23.41.13;	author morrison;	state Exp;
branches;
next	;

1.9.12.1
date	2004.02.12.19.41.38;	author erikg;	state Exp;
branches;
next	1.9.12.2;

1.9.12.2
date	2004.03.15.14.06.12;	author erikg;	state Exp;
branches;
next	;


desc
@Routine to handle subfigure instances.
@


1.11
log
@moved to src/iges/
@
text
@/*
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	SLAD/BVLD/VMB
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1995-2004 by the United States Army
 *	in all countries except the USA. All rights reserved.
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/iges/do_subfigs.c,v 1.10 2004/02/02 17:39:04 morrison Exp $ (BRL)";
#endif

#include "./iges_struct.h"
#include "./iges_extern.h"
#include "../librt/debug.h"

void
Do_subfigs()
{
	int i,j;
	int entity_type;
	struct wmember head1;
	struct wmember *wmem;

	if( RT_G_DEBUG & DEBUG_MEM_FULL )
		bu_mem_barriercheck();

	BU_LIST_INIT( &head1.l );

	for( i=0 ; i<totentities ; i++ )
	{
		int subfigdef_de;
		int subfigdef_index;
		int no_of_members;
		int *members;
		char *name=NULL;
		struct wmember head2;
		double mat_scale[3];
		int non_unit;

		if( dir[i]->type != 408 )
			continue;

		if( RT_G_DEBUG & DEBUG_MEM_FULL )
			bu_mem_barriercheck();

		if( dir[i]->param <= pstart )
		{
			bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
					dir[i]->direct , dir[i]->name );
			continue;
		}

		Readrec( dir[i]->param );
		Readint( &entity_type , "" );
		if( entity_type != 408 )
		{
			bu_log( "Expected Singular Subfigure Instance Entity, found %s\n",
				iges_type(entity_type) );
			continue;
		}

		Readint( &subfigdef_de, "" );
		subfigdef_index = (subfigdef_de - 1)/2;
		if( subfigdef_index >= totentities )
		{
			bu_log( "Singular Subfigure Instance Entity gives Subfigure Definition" );
			bu_log( "\tEntity DE of %d, largest DE in file is %d\n",
				subfigdef_de, (totentities * 2) - 1 );
			continue;
		}
		if( dir[subfigdef_index]->type != 308 )
		{
			bu_log( "Expected Subfigure Definition Entity, found %s\n",
				iges_type(dir[subfigdef_index]->type) );
			continue;
		}

		if( dir[subfigdef_index]->param <= pstart )
		{
			bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
					dir[subfigdef_index]->direct , dir[subfigdef_index]->name );
			continue;
		}
		Readrec( dir[subfigdef_index]->param );
		Readint( &entity_type , "" );
		if( entity_type != 308 )
		{
			bu_log( "Expected Subfigure Definition Entity, found %s\n",
				iges_type(entity_type) );
			continue;
		}

		Readint( &j, "" );	/* ignore depth */
		Readstrg( "");		/* ignore subfigure name */

		wmem = mk_addmember( dir[subfigdef_index]->name, &head1.l, NULL, WMOP_UNION );
		non_unit = 0;
		for( j=0 ; j<3 ; j++ )
		{
			double mag_sq;

			mat_scale[j] = 1.0;
			mag_sq = MAGSQ( &(*dir[i]->rot)[j*4] );
			if( !NEAR_ZERO( mag_sq - 1.0, 100.0*SQRT_SMALL_FASTF ) )
			{
				mat_scale[j] = 1.0/sqrt( mag_sq );
				non_unit = 1;
			}
		}

		if( non_unit )
		{
			bu_log( "Illegal transformation matrix in %s for member %s\n",
				curr_file->obj_name, wmem->wm_name );
			bu_log( " row vector magnitudes are %g, %g, and %g\n", 
				1.0/mat_scale[0], 1.0/mat_scale[1], 1.0/mat_scale[2] );
			bn_mat_print( "", *dir[i]->rot );
			for( j=0 ; j<11 ; j++ )
			{
				if( (j+1)%4 == 0 )
					continue;
				(*dir[i]->rot)[j] *= mat_scale[0];
			}
			bn_mat_print( "After scaling:", *dir[i]->rot );
			
		}
		bcopy( *dir[i]->rot, wmem->wm_mat, sizeof( mat_t ) );

		Readint( &no_of_members, "" );	/* get number of members */
		members = (int *)bu_calloc( no_of_members, sizeof( int ), "Do_subfigs: members" );
		for( j=0 ; j<no_of_members ; j++ )
			Readint( &members[j], "" );

		BU_LIST_INIT( &head2.l );
		for( j=0 ; j<no_of_members ; j++ )
		{
			int index;

			index = (members[j] - 1)/2;

			if( index >= totentities )
			{
				bu_log( "Subfigure Definition Entity gives Member Entity" );
				bu_log( "\tDE of %d, largest DE in file is %d\n",
					members[j], (totentities * 2) - 1 );
				continue;
			}
			if( dir[index]->param <= pstart )
			{
				bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
						dir[index]->direct , dir[index]->name );
				continue;
			}

			if( dir[index]->type == 416 )
			{
				struct file_list *list_ptr;
				char *file_name;
				int found=0;

				/* external reference */

				Readrec( dir[index]->param );
				Readint( &entity_type, "" );

				if( entity_type != 416 )
				{
					bu_log( "Expected External reference Entity, found %s\n",
						iges_type(entity_type) );
					continue;
				}

				if( dir[index]->form != 1 )
				{
					bu_log( "External Reference Entity of form #%d found\n",
						dir[index]->form );
					bu_log( "\tOnly form #1 is currnetly handled\n" );
					continue;
				}

				Readname( &file_name, "" );

				/* Check if this external reference is already on the list */
				for( BU_LIST_FOR( list_ptr, file_list, &iges_list.l ) )
				{
					if( !strcmp( file_name, list_ptr->file_name ) )
					{
						found = 1;
						name = list_ptr->obj_name;
						break;
					}
				}

				if( !found )
				{
					/* Need to add this one to the list */
					list_ptr = (struct file_list *)bu_malloc( sizeof( struct file_list ),
							"Do_subfigs: list_ptr" );

					list_ptr->file_name = file_name;
					if( no_of_members == 1 )
						strcpy( list_ptr->obj_name, dir[subfigdef_index]->name );
					else
					{
						strcpy( list_ptr->obj_name, "subfig" );
						(void) Make_unique_brl_name( list_ptr->obj_name );
					}


					BU_LIST_APPEND( &curr_file->l, &list_ptr->l );

					name = list_ptr->obj_name;
				}
				else
					bu_free( (char *)file_name, "Do_subfigs: file_name" );

			}
			else
				name = dir[index]->name;

			if( no_of_members > 1 )
			{
				wmem = mk_addmember( name, &head2.l, NULL, WMOP_UNION );
				bcopy( dir[index]->rot, wmem->wm_mat, sizeof( mat_t ) );
			}
		}

		if( no_of_members > 1 )
			(void)mk_lcomb( fdout, dir[subfigdef_index]->name, &head2, 0, 
					(char *)NULL, (char *)NULL, (unsigned char *)NULL, 0 );
	}

	if( RT_G_DEBUG & DEBUG_MEM_FULL )
		bu_mem_barriercheck();

	if( BU_LIST_IS_EMPTY( &head1.l ) )
		return;

	(void) mk_lcomb( fdout, curr_file->obj_name, &head1, 0,
			(char *)NULL, (char *)NULL, (unsigned char *)NULL, 0 );

	if( RT_G_DEBUG & DEBUG_MEM_FULL )
		bu_mem_barriercheck();

}
@


1.10
log
@update copyright to include span through 2003
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.9 2002/05/17 12:49:27 morrison Exp $ (BRL)";
@


1.9
log
@added matrix parameter to mk_addmember()
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1995 by the United States Army
d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.8 2001/08/08 20:25:12 jra Exp $ (BRL)";
@


1.9.4.1
log
@sync branch with HEAD
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
d16 1
a16 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


1.9.6.1
log
@sync to HEAD...
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/iges/do_subfigs.c,v 1.10 2004/02/02 17:39:04 morrison Exp $ (BRL)";
@


1.9.12.1
log
@merge from HEAD
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.10 2004/02/02 17:39:04 morrison Exp $ (BRL)";
@


1.9.12.2
log
@merge from head
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.9.12.1 2004/02/12 19:41:38 erikg Exp $ (BRL)";
@


1.8
log
@Lint
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.7 2001/05/17 20:05:03 morrison Exp $ (BRL)";
d103 1
a103 1
		wmem = mk_addmember( dir[subfigdef_index]->name, &head1.l, WMOP_UNION );
d230 1
a230 1
				wmem = mk_addmember( name, &head2.l, WMOP_UNION );
@


1.7
log
@rt_g.debug -> RT_G_DEBUG
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.6 2000/08/24 04:10:47 mike Exp $ (BRL)";
d42 1
a42 1
		char *name;
@


1.6
log
@
mk_addmember
RCSid
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.5 2000/03/29 18:42:43 mike Exp $ (BRL)";
d31 1
a31 1
	if( rt_g.debug & DEBUG_MEM_FULL )
d50 1
a50 1
		if( rt_g.debug & DEBUG_MEM_FULL )
d240 1
a240 1
	if( rt_g.debug & DEBUG_MEM_FULL )
d249 1
a249 1
	if( rt_g.debug & DEBUG_MEM_FULL )
@


1.5
log
@
Converted from Release 4 names to know about libbu and libbn
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.4 2000/01/05 14:16:08 jra Exp $ (BRL)";
d103 1
a103 1
		wmem = mk_addmember( dir[subfigdef_index]->name, &head1, WMOP_UNION );
d230 1
a230 1
				wmem = mk_addmember( name, &head2, WMOP_UNION );
@


1.4
log
@Eliminated some unused variables
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/iges/do_subfigs.c,v 1.3 1997/01/08 03:17:57 mike Exp $ (BRL)";
d32 1
a32 1
		rt_mem_barriercheck();
d34 1
a34 1
	RT_LIST_INIT( &head1.l );
d51 1
a51 1
			rt_mem_barriercheck();
d55 1
a55 1
			rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d64 1
a64 1
			rt_log( "Expected Singular Subfigure Instance Entity, found %s\n",
d73 2
a74 2
			rt_log( "Singular Subfigure Instance Entity gives Subfigure Definition" );
			rt_log( "\tEntity DE of %d, largest DE in file is %d\n",
d80 1
a80 1
			rt_log( "Expected Subfigure Definition Entity, found %s\n",
d87 1
a87 1
			rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d95 1
a95 1
			rt_log( "Expected Subfigure Definition Entity, found %s\n",
d120 1
a120 1
			rt_log( "Illegal transformation matrix in %s for member %s\n",
d122 1
a122 1
			rt_log( " row vector magnitudes are %g, %g, and %g\n", 
d124 1
a124 1
			mat_print( "", *dir[i]->rot );
d131 1
a131 1
			mat_print( "After scaling:", *dir[i]->rot );
d137 1
a137 1
		members = (int *)rt_calloc( no_of_members, sizeof( int ), "Do_subfigs: members" );
d141 1
a141 1
		RT_LIST_INIT( &head2.l );
d150 2
a151 2
				rt_log( "Subfigure Definition Entity gives Member Entity" );
				rt_log( "\tDE of %d, largest DE in file is %d\n",
d157 1
a157 1
				rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d175 1
a175 1
					rt_log( "Expected External reference Entity, found %s\n",
d182 1
a182 1
					rt_log( "External Reference Entity of form #%d found\n",
d184 1
a184 1
					rt_log( "\tOnly form #1 is currnetly handled\n" );
d191 1
a191 1
				for( RT_LIST_FOR( list_ptr, file_list, &iges_list.l ) )
d204 1
a204 1
					list_ptr = (struct file_list *)rt_malloc( sizeof( struct file_list ),
d217 1
a217 1
					RT_LIST_APPEND( &curr_file->l, &list_ptr->l );
d222 1
a222 1
					rt_free( (char *)file_name, "Do_subfigs: file_name" );
d241 1
a241 1
		rt_mem_barriercheck();
d243 1
a243 1
	if( RT_LIST_IS_EMPTY( &head1.l ) )
d250 1
a250 1
		rt_mem_barriercheck();
@


1.3
log
@Changed to relative path for #include
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /m/cad/iges/RCS/do_subfigs.c,v 1.2 1995/12/08 17:49:39 jra Exp mike $ (BRL)";
a43 1
		vect_t tmp_vec;
@


1.2
log
@Mods to get trimmed surfaces with subfigures working.
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /m/cad/iges/RCS/do_subfigs.c,v 1.1 1995/12/05 22:01:46 jra Exp jra $ (BRL)";
d21 1
a21 1
#include "/m/cad/librt/debug.h"
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /m/cad/iges/RCS/trimsurf.c,v 11.8 1995/12/04 19:35:47 jra Exp jra $ (BRL)";
d21 1
d31 3
d44 3
d51 3
d62 1
a62 1
		Readint( &entity_type , "Entity Type: " );
d70 1
a70 1
		Readint( &subfigdef_de, "Subfigure DE: " );
d93 1
a93 1
		Readint( &entity_type , "Entity Type: " );
d101 8
a108 2
		Readint( &j, "" );		/* ignore depth */
		Readname( &name, "Name: ");		/* get subfigure name */
d110 8
a117 2
		dir[subfigdef_index]->name = Make_unique_brl_name( name );
		rt_free( name, "Do_subfigs: name" );
d119 17
a135 2
		wmem = mk_addmember( dir[subfigdef_index]->name, &head1, WMOP_UNION );
		bcopy( dir[subfigdef_index]->rot, wmem->wm_mat, sizeof( mat_t ) );
d137 1
a137 1
		Readint( &no_of_members, "No. of members: " );	/* get number of members */
d166 2
d172 1
a172 1
				Readint( &entity_type, "Entity type: " );
d189 1
a189 2
				list_ptr = (struct file_list *)rt_malloc( sizeof( struct file_list ),
						"Do_subfigs: list_ptr" );
d191 2
a192 4
				Readname( &list_ptr->file_name, "File Name: " );
				if( no_of_members == 1 )
					strcpy( list_ptr->obj_name, dir[subfigdef_index]->name );
				else
d194 6
a199 2
					strcpy( list_ptr->obj_name, "subfig" );
					(void) Make_unique_brl_name( list_ptr->obj_name );
d202 17
a218 1
				RT_LIST_APPEND( &curr_file->l, &list_ptr->l );
d220 4
a223 1
				name = list_ptr->obj_name;
a236 4
		{
rt_log( "Making group (%s)\n", dir[subfigdef_index]->name );
for( RT_LIST_FOR( wmem, wmember, &head2.l ) )
	rt_log( "\tu %s\n", wmem->wm_name );
a238 1
		}
d241 3
a246 3
rt_log( "Making group (%s)\n", curr_file->obj_name );
for( RT_LIST_FOR( wmem, wmember, &head1.l ) )
	rt_log( "\tu %s\n", wmem->wm_name );
d249 4
@
