head	11.16;
access;
symbols
	ansi-20040405-merged:11.14.4.1
	postmerge-20040405-ansi:11.15
	premerge-20040404-ansi:11.15
	postmerge-autoconf:11.15
	autoconf-freeze:11.14.12.1
	premerge-autoconf:11.15
	ansi-20040316-freeze:11.14
	postmerge-20040315-windows:11.15
	premerge-20040315-windows:11.15
	windows-20040315-freeze:11.14.6.1
	autoconf-20031203:11.14
	autoconf-20031202:11.14
	autoconf-branch:11.14.0.12
	phong-branch:11.14.0.10
	photonmap-branch:11.14.0.8
	rel-6-1-DP:11.14
	windows-branch:11.14.0.6
	rel-6-0-2:11.14
	ansi-branch:11.14.0.4
	rel-6-0-1-branch:11.14.0.2
	hartley-6-0-post:11.14
	hartley-6-0-pre:11.14
	rel-6-0-1:11.14
	rel-6-0:11.14
	rel-5-4:11.12
	offsite-5-3-pre:11.14
	rel-5-3:11.12
	rel-5-2:11.12
	rel-5-1-branch:11.12.0.2
	rel-5-1:11.12
	rel-5-0:11.10
	rel-5-0-beta:11.10
	rel-4-5:11.10
	ctj-4-5-post:11.10
	ctj-4-5-pre:11.10
	rel-4-4:11.5
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.16
date	2004.05.24.04.01.07;	author morrison;	state dead;
branches;
next	11.15;

11.15
date	2004.02.02.17.39.04;	author morrison;	state Exp;
branches;
next	11.14;

11.14
date	2001.02.06.15.13.42;	author jra;	state Exp;
branches
	11.14.4.1
	11.14.6.1
	11.14.12.1;
next	11.13;

11.13
date	2000.09.08.05.56.35;	author mike;	state Exp;
branches;
next	11.12;

11.12
date	2000.03.29.18.42.42;	author mike;	state Exp;
branches;
next	11.11;

11.11
date	2000.01.05.14.16.08;	author jra;	state Exp;
branches;
next	11.10;

11.10
date	97.03.14.21.07.44;	author jra;	state Exp;
branches;
next	11.9;

11.9
date	97.03.14.20.53.37;	author jra;	state Exp;
branches;
next	11.8;

11.8
date	96.07.15.19.19.47;	author jra;	state Exp;
branches;
next	11.7;

11.7
date	95.12.06.13.25.06;	author jra;	state Exp;
branches;
next	11.6;

11.6
date	95.11.28.21.35.45;	author jra;	state Exp;
branches;
next	11.5;

11.5
date	95.01.04.10.07.36;	author mike;	state Rel4_4;
branches;
next	11.4;

11.4
date	94.10.21.20.15.25;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	94.08.22.18.42.47;	author gdurf;	state Exp;
branches;
next	11.2;

11.2
date	93.09.17.10.34.14;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	93.06.28.10.00.26;	author jra;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.45.12;	author mike;	state Rel4_0;
branches;
next	1.3;

1.3
date	91.07.06.00.17.58;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	91.06.12.20.27.39;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	91.06.12.19.59.13;	author mike;	state Exp;
branches;
next	;

11.14.4.1
date	2004.03.17.21.16.30;	author morrison;	state Exp;
branches;
next	;

11.14.6.1
date	2004.03.11.23.41.13;	author morrison;	state Exp;
branches;
next	;

11.14.12.1
date	2004.02.12.19.41.38;	author erikg;	state Exp;
branches;
next	;


desc
@IGES converter
@


11.16
log
@moved to src/iges/
@
text
@/*
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */

/*	This routine controls the conversion of IGES boolean trees
	to BRLCAD objects	*/

#include "./iges_struct.h"
#include "./iges_extern.h"

void
Convtree()
{

	int			conv=0;
	int			tottrees=0;
	union tree		*ptr;
	union tree		*Readtree(),*Copytree();
	struct rt_comb_internal	*comb;
	int			no_of_assoc=0;
	int			no_of_props=0;
	int			att_de=0;
	struct brlcad_att	brl_att;
	int			i,j,k;

	if( bu_debug & BU_DEBUG_MEM_CHECK )
		bu_log( "Doing memory checking in Convtree()\n" );
	MEMCHECK

	bu_log( "\nConverting boolean tree entities:\n" );

	for( i=0 ; i<totentities ; i++ ) /* loop through all entities */
	{
		if( dir[i]->type != 180 )	/* This is not a tree */
			continue;

		att_de = 0;			/* For default if there is no attribute entity */

		tottrees++;

		if( dir[i]->param <= pstart )	/* Illegal parameter address */
		{
			bu_log( "Entity number %d (Boolean Tree) does not have a legal parameter pointer\n" , i );
			continue;
		}

		Readrec( dir[i]->param ); /* read first record into buffer */

		MEMCHECK

		ptr = Readtree( dir[i]->rot ); /* construct the tree */

		MEMCHECK

		if( !ptr )	/* failure */
		{
			bu_log( "\tFailed to convert Boolean tree at D%07d\n", dir[i]->direct );
			continue;
		}

		/* skip over the associativities */
		Readint( &no_of_assoc , "" );
		for( k=0 ; k<no_of_assoc ; k++ )
			Readint( &j , "" );

		/* get property entity DE's */
		Readint( &no_of_props , "" );
		for( k=0 ; k<no_of_props ; k++ )
		{
			Readint( &j , "" );
			if( dir[(j-1)/2]->type == 422 &&
				 dir[(j-1)/2]->referenced == brlcad_att_de )
			{
				/* this is one of our attribute instances */
				att_de = j;
			}
		}

		Read_att( att_de , &brl_att );
		/* Read_att will supply defaults if att_de is 0 */
		if( att_de == 0 )
			brl_att.region_flag = 1;

		BU_GETSTRUCT( comb, rt_comb_internal );
		comb->magic = RT_COMB_MAGIC;
		comb->tree = ptr;
		comb->is_fastgen = REGION_NON_FASTGEN;
		comb->temperature = 0;
		if( brl_att.region_flag )
		{
			comb->region_flag = 1;
			comb->region_id = brl_att.ident;
			comb->aircode = brl_att.air_code;
			comb->GIFTmater = brl_att.material_code;
			comb->los = brl_att.los_density;
		}
		if( dir[i]->colorp != 0 )
		{
			comb->rgb_valid = 1;
			comb->rgb[0] = dir[i]->rgb[0];
			comb->rgb[1] = dir[i]->rgb[1];
			comb->rgb[2] = dir[i]->rgb[2];
		}
		comb->inherit = brl_att.inherit;
		bu_vls_init( &comb->shader );
		if( brl_att.material_name )
		{
			bu_vls_strcpy( &comb->shader, brl_att.material_name );
			if( brl_att.material_params )
			{
				bu_vls_putc( &comb->shader, ' ' );
				bu_vls_strcat( &comb->shader, brl_att.material_params );
			}
		}
		bu_vls_init( &comb->material );

		MEMCHECK
		if( wdb_export( fdout, dir[i]->name, (genptr_t)comb, ID_COMBINATION, mk_conv2mm ) )
		{
			bu_log( "mk_export_fwrite() failed for combination (%s)\n", dir[i]->name );
			exit( 1 );
		}

		conv++;

		MEMCHECK
	}

	bu_log( "Converted %d trees successfully out of %d total trees\n", conv , tottrees );
	MEMCHECK
}
@


11.15
log
@update copyright to include span through 2003
@
text
@@


11.14
log
@Mods to get IGES working with new database format (v5)
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990 by the United States Army.
@


11.14.4.1
log
@sync branch with HEAD
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.14.6.1
log
@sync to HEAD...
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.14.12.1
log
@merge from HEAD
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.13
log
@
Tree routines need resource pointer.
@
text
@d38 4
d60 3
d64 3
d99 2
d129 2
a130 1
		if( mk_export_fwrite( fdout, dir[i]->name, (genptr_t)comb, ID_COMBINATION ) )
d135 1
a135 5
		if(comb->tree) db_free_tree( comb->tree , &rt_uniresource);
		comb->tree = NULL;
		bu_vls_free( &comb->shader );
		bu_vls_free( &comb->material );
		bu_free( (genptr_t)comb, "comb ifree" );
d137 2
d140 1
d142 1
@


11.12
log
@
Converted from Release 4 names to know about libbu and libbn
@
text
@d122 1
a122 1
		if(comb->tree) db_free_tree( comb->tree );
@


11.11
log
@Eliminated some unused variables
@
text
@d38 1
a38 1
	rt_log( "\nConverting boolean tree entities:\n" );
d51 1
a51 1
			rt_log( "Entity number %d (Boolean Tree) does not have a legal parameter pointer\n" , i );
d129 1
a129 1
	rt_log( "Converted %d trees successfully out of %d total trees\n", conv , tottrees );
@


11.10
log
@Added code to free rt_comb_internal structures.
@
text
@a26 1
	int			notdone=2;
d29 1
a29 1
	union tree		*ptr,*oldptr;
a34 1
	unsigned char 		*rgb;
@


11.9
log
@Converted to use rt_comb_internal.
@
text
@d124 5
@


11.8
log
@Minor Mods for IRIX 6.2
@
text
@d30 3
a32 2
	struct node		*ptr,*oldptr;
	struct node		*Readtree(),*Copytree();
d58 6
a63 1
		ptr = Readtree(); /* construct the tree */
d88 4
a91 6
		oldptr = Copytree( ptr , (struct node *)NULL ); /* save a copy */

		/* keep calling the tree manipulating routines until they
			stop working	*/
		notdone = 2;
		while( notdone )
d93 5
a97 3
			notdone = 2;
			notdone -= Arrange( ptr );
			notdone -= Bubbleup( ptr );
d99 1
a99 3

		/* Check for success of above routines */
		if( Treecheck( ptr ) )
d101 4
a104 27
			struct wmember head;

			RT_LIST_INIT( &head.l );

			/* make member records */
			Makemembers( ptr , &head );

			/* Make the object */
			if( dir[i]->colorp != 0 )
				rgb = (unsigned char*)dir[i]->rgb;
			else
				rgb = (unsigned char *)0;

			mk_lrcomb( fdout , 
				dir[i]->name,		/* name */
				&head,			/* members */
				brl_att.region_flag,	/* region flag */
				brl_att.material_name,	/* material name */
				brl_att.material_params, /* material parameters */
				rgb,			/* color */
				brl_att.ident,		/* ident */
				brl_att.air_code,	/* air code */
				brl_att.material_code,	/* GIFT material */
				brl_att.los_density,	/* los density */
				brl_att.inherit );	/* inherit */

			conv++;
d106 3
a108 1
		else
d110 6
a115 5
			rt_log( "'%s'Tree cannot be converted to BRLCAD format\n",dir[i]->name );
			rt_log( "\tOriginal tree from IGES file:\n\t" );
			Showtree( oldptr );
			rt_log( "\tAfter attempted conversion to BRLCAD format:\n\t" );
			Showtree( ptr );
d117 1
d119 6
a124 2
		Freetree( ptr );
		Freetree( oldptr );
@


11.7
log
@All logging done via rt_log
@
text
@d23 1
@


11.6
log
@Mods to handle TNURB BREP. Also added RT_EXTERNS to iges_struct.h.
@
text
@d38 1
a38 1
	printf( "\nConverting boolean tree entities:\n" );
d51 1
a51 1
			printf( "Entity number %d (Boolean Tree) does not have a legal parameter pointer\n" , i );
d126 2
a127 2
			printf( "'%s'Tree cannot be converted to BRLCAD format\n",dir[i]->name );
			printf( "\tOriginal tree from IGES file:\n\t" );
d129 1
a129 1
			printf( "\tAfter attempted conversion to BRLCAD format:\n\t" );
d136 1
a136 1
	printf( "Converted %d trees successfully out of %d total trees\n", conv , tottrees );
@


11.5
log
@Release_4.4
@
text
@a19 6
#include "conf.h"

#include <stdio.h>
#include "machine.h"
#include "vmath.h"
#include "rtlist.h"
a21 3
#include "wdb.h"

void Read_att();
d31 3
a33 3
	int			no_of_assoc;
	int			no_of_props;
	int			att_de;
@


11.4
log
@rgb is now unsigned char
@
text
@@


11.3
log
@Added include of conf.h
@
text
@d43 1
a43 1
	char 			*rgb;
d114 1
a114 1
				rgb = (char*)dir[i]->rgb;
d116 1
a116 1
				rgb = (char *)0;
@


11.2
log
@Added default value for "att_de".
@
text
@d20 2
@


11.1
log
@Major Upgrade to IGES 5.1
@
text
@d52 2
@


10.1
log
@Release_4.0
@
text
@d28 2
d33 11
a43 2
	int i,notdone=2,conv=0,tottrees=0;
	struct node *ptr,*Readtree(),*oldptr,*Copytree();
d63 23
d108 18
a125 10
			/* Make the object (Not using regions to take advantage of nesting) */
			if( dir[i]->colorp != 0 )  {
				mk_lcomb( fdout , dir[i]->name , &head , 0 ,
					(char *)NULL , (char *)NULL ,
					(char *)(dir[i]->rgb) , 1 );
			}  else  {
				mk_lcomb( fdout , dir[i]->name , &head , 0 ,
					(char *)NULL , (char *)NULL ,
					(char *)0 , 1 );
			}
@


1.3
log
@ANSI lint
@
text
@@


1.2
log
@Modified for Release 4.0
@
text
@d75 9
a83 4
			if( dir[i]->colorp != 0 )
				mk_lcomb( fdout , dir[i]->name , &head , 0 , (char *)NULL , (char *)NULL , dir[i]->rgb , 1 );
			else
				mk_lcomb( fdout , dir[i]->name , &head , 0 , (char *)NULL , (char *)NULL , (char *)0 , 1 );
@


1.1
log
@Initial revision
@
text
@d21 3
d69 1
a69 3
			head.wm_forw = &head;
			head.wm_back = &head;

@
