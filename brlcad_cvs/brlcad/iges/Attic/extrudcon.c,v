head	11.9;
access;
symbols
	ansi-20040405-merged:11.7.4.1
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.8
	postmerge-autoconf:11.8
	autoconf-freeze:11.7.12.1
	premerge-autoconf:11.8
	ansi-20040316-freeze:11.7
	postmerge-20040315-windows:11.8
	premerge-20040315-windows:11.8
	windows-20040315-freeze:11.7.6.1
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.12
	phong-branch:11.7.0.10
	photonmap-branch:11.7.0.8
	rel-6-1-DP:11.7
	windows-branch:11.7.0.6
	rel-6-0-2:11.7
	ansi-branch:11.7.0.4
	rel-6-0-1-branch:11.7.0.2
	hartley-6-0-post:11.7
	hartley-6-0-pre:11.7
	rel-6-0-1:11.7
	rel-6-0:11.7
	rel-5-4:11.6
	offsite-5-3-pre:11.7
	rel-5-3:11.6
	rel-5-2:11.6
	rel-5-1-branch:11.6.0.2
	rel-5-1:11.6
	rel-5-0:11.5
	rel-5-0-beta:11.5
	rel-4-5:11.5
	ctj-4-5-post:11.5
	ctj-4-5-pre:11.5
	rel-4-4:11.3
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.24.04.01.08;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.02.02.17.39.04;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2001.02.06.15.13.42;	author jra;	state Exp;
branches
	11.7.4.1
	11.7.6.1
	11.7.12.1;
next	11.6;

11.6
date	2000.03.29.18.42.43;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	95.12.06.13.25.06;	author jra;	state Exp;
branches;
next	11.4;

11.4
date	95.11.28.21.35.45;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	95.01.04.10.07.40;	author mike;	state Rel4_4;
branches;
next	11.2;

11.2
date	94.08.22.19.31.43;	author gdurf;	state Exp;
branches;
next	11.1;

11.1
date	93.06.28.10.37.15;	author jra;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.45.16;	author mike;	state Rel4_0;
branches;
next	1.2;

1.2
date	91.06.12.20.27.44;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	91.06.12.19.59.19;	author mike;	state Exp;
branches;
next	;

11.7.4.1
date	2004.03.17.21.16.31;	author morrison;	state Exp;
branches;
next	;

11.7.6.1
date	2004.03.11.23.41.14;	author morrison;	state Exp;
branches;
next	;

11.7.12.1
date	2004.02.12.19.41.38;	author erikg;	state Exp;
branches;
next	;


desc
@IGES converter
@


11.9
log
@moved to src/iges/
@
text
@/*
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */

/*	Create a TGC from a ellipse extrusion */

#include "./iges_struct.h"
#include "./iges_extern.h"

int
Extrudcon( entityno , curve , evect )
int entityno;	/* extrusion entity number */
int curve;	/* elliptical arc entity number */
vect_t evect;	/* extrusion vector */
{
	fastf_t		a,b,c,d,e,f;	/* Coefficients of conic equation
					  a*X*X + b*X*Y + c*Y*Y + d*X + e*Y + f = 0 */
	fastf_t		conv_sq;	/* conv-factor squared */
	point_t		start,stop;	/* starting and stopping points on arc */
	int		sol_num;	/* Solid number */
	fastf_t		q1,q2,q3;	/* terms for determining type of conic */
	int		ellipse;	/* flag to indicate eillipse */
	fastf_t		tmp;		/* scratch */
	point_t		center;		/* center of ellipse */
	fastf_t		theta;		/* angle that elipse is rotated */
	fastf_t		a1,c1,f1;	/* coefficients of translated and rotated ellipse */
	vect_t		r1,r2;		/* radii vectors for ellipse and TGC */

	/* Acquiring Data */

	if( dir[curve]->form > 1 )
	{
		bu_log( "Conic arc for extrusion is not closed:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	if( dir[curve]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[curve]->direct , dir[curve]->name );
		return(0);
	}
	Readrec( dir[curve]->param );
	Readint( &sol_num , "" );
	Readflt( &a , "" );
	Readflt( &b , "" );
	Readflt( &c , "" );
	Readflt( &d , "" );
	Readflt( &e , "" );
	Readflt( &f , "" );
	Readcnv( &start[Z] , "" );
	Readcnv( &start[X] , "" );
	Readcnv( &start[Y] , "" );
	Readcnv( &stop[X] , "" );
	Readcnv( &stop[Y] , "" );
	stop[Z] = start[Z];

	/* Convert coefficients to "mm" units */

	conv_sq = conv_factor*conv_factor;
	a = a/conv_sq;
	b = b/conv_sq;
	c = c/conv_sq;
	d = d/conv_factor;
	e = e/conv_factor;

	/* set "a" to 1.0 */

	tmp = fabs( a );
	if( fabs( b ) < tmp && b != 0.0 )
		tmp = fabs( b );
	if( fabs( c ) < tmp )
		tmp = fabs( c );
	a = a/tmp;
	b = b/tmp;
	c = c/tmp;
	d = d/tmp;
	e = e/tmp;
	f = f/tmp;

	/* Check for closure */

	if( start[X] != stop[X] || start[Y] != stop[Y] )
	{
		bu_log( "Conic arc for extrusion is not closed:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	/* Check type of conic */

	q2 = a*c - b*b/4.0;
	ellipse = 1;
	if( q2 <= 0.0 )
		ellipse = 0;
	else
	{
		q3 = a + c;
		q1 = a*(c*f - e*e/4.0) - 0.5*b*(b*f/2.0 + e*d/4.0) + 0.5*d*(b*e/4.0 - d*c/2.0);
		if( q1*q3 >= 0.0 )
			ellipse = 0;
	}

	if( !ellipse )
	{
		bu_log( "Conic arc for extrusion is not an elipse:\n" );
		bu_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
			dir[entityno]->name );
		bu_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
		return( 0 );
	}

	/* Calculate center of ellipse */

	center[X] = (b*e/4.0 - d*c/2.0)/q2;
	center[Y] = (b*d/4.0 - a*e/2.0)/q2;
	center[Z] = start[Z];

	/* calculate rotation about z-axis */
	if( b == 0.0 )
		theta = 0.0;
	else
		theta = 0.5*atan2( b , a-c );

	/* calculate coefficients for same ellipse, but translated to
	   origin, and rotated to align with axes */

	a1 = a + 0.5*b*tan( theta );
	c1 = c - 0.5*b*tan( theta );
	f1 = f - a*center[X]*center[X] - b*center[X]*center[Y] - c*center[Y]*center[Y];

	/* Calculate radii vectors */

	tmp = sqrt( -f1/a1 );
	r1[X] = tmp*cos(theta);
	r1[Y] = tmp*sin(theta);
	r1[Z] = 0.0;

	tmp = sqrt( -f1/c1 );
	r2[X] = tmp*(-sin(theta));
	r2[Y] = tmp*cos(theta);
	r2[Z] = 0.0;

	/* Construct solid */
	mk_tgc( fdout , dir[entityno]->name , center , evect , r1 , r2 , r1 , r2 );

	return( 1 );
}
@


11.8
log
@update copyright to include span through 2003
@
text
@@


11.7
log
@Mods to get IGES working with new database format (v5)
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990 by the United States Army.
@


11.7.4.1
log
@sync branch with HEAD
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.7.6.1
log
@sync to HEAD...
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.7.12.1
log
@merge from HEAD
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.6
log
@
Converted from Release 4 names to know about libbu and libbn
@
text
@d22 1
@


11.5
log
@All logging done via rt_log
@
text
@d44 2
a45 2
		rt_log( "Conic arc for extrusion is not closed:\n" );
		rt_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
d47 1
a47 1
		rt_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
d53 1
a53 1
		rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d99 2
a100 2
		rt_log( "Conic arc for extrusion is not closed:\n" );
		rt_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
d102 1
a102 1
		rt_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
d122 2
a123 2
		rt_log( "Conic arc for extrusion is not an elipse:\n" );
		rt_log( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
d125 1
a125 1
		rt_log( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
@


11.4
log
@Mods to handle TNURB BREP. Also added RT_EXTERNS to iges_struct.h.
@
text
@d44 2
a45 2
		printf( "Conic arc for extrusion is not closed:\n" );
		printf( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
d47 1
a47 1
		printf( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
d53 1
a53 1
		printf( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d99 2
a100 2
		printf( "Conic arc for extrusion is not closed:\n" );
		printf( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
d102 1
a102 1
		printf( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
d122 2
a123 2
		printf( "Conic arc for extrusion is not an elipse:\n" );
		printf( "\textrusion entity D%07d (%s)\n" , dir[entityno]->direct ,
d125 1
a125 1
		printf( "\tarc entity D%07d (%s)\n" , dir[curve]->direct , dir[curve]->name );
@


11.3
log
@Release_4.4
@
text
@a17 1
#include "conf.h"
a18 5
#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "vmath.h"
@


11.2
log
@Factored ifdefs
@
text
@@


11.1
log
@Major Upgrade to IGES 5.1
@
text
@d18 2
d21 2
a24 1
#include <math.h>
@


10.1
log
@Release_4.0
@
text
@@


1.2
log
@Modified for Release 4.0
@
text
@@


1.1
log
@Initial revision
@
text
@d19 2
@
