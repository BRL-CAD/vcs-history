head	11.18;
access;
symbols
	ansi-20040405-merged:11.16.4.1
	postmerge-20040405-ansi:11.17
	premerge-20040404-ansi:11.17
	postmerge-autoconf:11.17
	autoconf-freeze:11.16.12.1
	premerge-autoconf:11.17
	ansi-20040316-freeze:11.16
	postmerge-20040315-windows:11.17
	premerge-20040315-windows:11.17
	windows-20040315-freeze:11.16.6.1
	autoconf-20031203:11.16
	autoconf-20031202:11.16
	autoconf-branch:11.16.0.12
	phong-branch:11.16.0.10
	photonmap-branch:11.16.0.8
	rel-6-1-DP:11.16
	windows-branch:11.16.0.6
	rel-6-0-2:11.16
	ansi-branch:11.16.0.4
	rel-6-0-1-branch:11.16.0.2
	hartley-6-0-post:11.16
	hartley-6-0-pre:11.16
	rel-6-0-1:11.16
	rel-6-0:11.16
	rel-5-4:11.15
	offsite-5-3-pre:11.16
	rel-5-3:11.15
	rel-5-2:11.15
	rel-5-1-branch:11.15.0.2
	rel-5-1:11.15
	rel-5-0:11.13
	rel-5-0-beta:11.13
	rel-4-5:11.13
	ctj-4-5-post:11.13
	ctj-4-5-pre:11.13
	rel-4-4:11.8;
locks; strict;
comment	@ * @;


11.18
date	2004.05.24.04.01.07;	author morrison;	state dead;
branches;
next	11.17;

11.17
date	2004.02.02.17.39.04;	author morrison;	state Exp;
branches;
next	11.16;

11.16
date	2001.02.06.15.13.41;	author jra;	state Exp;
branches
	11.16.4.1
	11.16.6.1
	11.16.12.1;
next	11.15;

11.15
date	2000.03.29.18.42.41;	author mike;	state Exp;
branches;
next	11.14;

11.14
date	2000.01.05.14.16.08;	author jra;	state Exp;
branches;
next	11.13;

11.13
date	96.07.15.19.19.47;	author jra;	state Exp;
branches;
next	11.12;

11.12
date	95.12.08.17.49.39;	author jra;	state Exp;
branches;
next	11.11;

11.11
date	95.12.06.13.25.06;	author jra;	state Exp;
branches;
next	11.10;

11.10
date	95.12.05.22.02.45;	author jra;	state Exp;
branches;
next	11.9;

11.9
date	95.11.28.21.35.45;	author jra;	state Exp;
branches;
next	11.8;

11.8
date	95.01.04.10.07.32;	author mike;	state Rel4_4;
branches;
next	11.7;

11.7
date	94.11.08.14.49.58;	author jra;	state Exp;
branches;
next	11.6;

11.6
date	94.08.22.19.31.39;	author gdurf;	state Exp;
branches;
next	11.5;

11.5
date	94.08.22.18.32.31;	author gdurf;	state Exp;
branches;
next	11.4;

11.4
date	94.01.10.16.18.11;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	94.01.07.15.16.08;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	93.08.18.09.42.55;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	93.06.28.09.59.10;	author jra;	state Exp;
branches;
next	;

11.16.4.1
date	2004.03.17.21.16.30;	author morrison;	state Exp;
branches;
next	;

11.16.6.1
date	2004.03.11.23.41.13;	author morrison;	state Exp;
branches;
next	;

11.16.12.1
date	2004.02.12.19.41.38;	author erikg;	state Exp;
branches;
next	;


desc
@Look for IGES names (property entities, form 15)
@


11.18
log
@moved to src/iges/
@
text
@/*
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	SLAD/BVLD/VMB
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1993-2004 by the United States Army.
 *	All rights reserved.
 */
#include "./iges_struct.h"
#include "./iges_extern.h"
#include <ctype.h>

char *
Add_brl_name( name )
char *name;
{
	struct name_list *ptr;
	int namelen;
	int i;

	/* replace white space */
	namelen = strlen( name );
	if( namelen > NAMESIZE)
	{
		namelen = NAMESIZE;
		name[namelen] = '\0';
	}
	for( i=0 ; i<namelen ; i++ )
	{
		if( isspace( name[i] ) || name[i] == '/' )
			name[i] = '_';
	}

	/* Check if name already in list */
	ptr = name_root;
	while( ptr )
	{
		if( !strncmp( ptr->name, name, NAMESIZE ) )
			return( ptr->name );
		ptr = ptr->next;
	}

	/* add this name to the list */
	ptr = (struct name_list *)bu_malloc( sizeof( struct name_list ), "Add_brl_name: ptr" );
	strcpy( ptr->name, name );
	ptr->next = name_root;
	name_root = ptr;

	return( ptr->name );
}

char *
Make_unique_brl_name( name )
char *name;
{
	struct name_list *ptr;
	int found;
	int namelen;
	int char_ptr;
	int i,j;

	/* replace white space */
	namelen = strlen( name );
	for( i=0 ; i<namelen ; i++ )
	{
		if( isspace( name[i] ) || name[i] == '/' )
			name[i] = '_';
	}

	/* check if name is already unique */
	found = 0;
	ptr = name_root;
	while( ptr )
	{
		if( !strncmp( ptr->name, name, NAMESIZE ) )
		{
			found = 1;
			break;
		}
		ptr = ptr->next;
	}

	if( !found )
		return( Add_brl_name( name ) );

	/* name is not unique, make it unique with a single character suffix */
	if( namelen < NAMESIZE )
		char_ptr = namelen;
	else
		char_ptr = NAMESIZE - 1;

	i = 0;
	while( found && 'A'+i <= 'z' )
	{
		name[char_ptr] = 'A' + i;
		name[char_ptr+1] = '\0';
		found = 0;
		ptr = name_root;
		while( ptr )
		{
			if( !strncmp( ptr->name, name, NAMESIZE ) )
			{
				found = 1;
				break;
			}
			ptr = ptr->next;
		}
		i++;
		if( 'A'+i == '[' )
			i = 'a' - 'A';
	}

	if( !found )
		return( Add_brl_name( name ) );


	/* still not unique!!! Try two character suffix */
	char_ptr--;
	i = 0;
	j = 0;
	while( found && 'A'+i <= 'z' && 'A'+j <= 'z' )
	{
		name[char_ptr] = 'A'+i;
		name[char_ptr+1] = 'A'+j;
		name[char_ptr+2] = '\0';
		found = 0;
		ptr = name_root;
		while( ptr )
		{
			if( !strncmp( ptr->name, name, NAMESIZE ) )
			{
				found = 1;
				break;
			}
			ptr = ptr->next;
		}
		j++;
		if( 'A'+j == '[' )
			j = 'a' - 'A';

		if( 'A'+j > 'z' )
		{
			j = 0;
			i++;
		}

		if( 'A'+i == '[' )
			i = 'a' - 'A';
	}

	if( !found )
	{
		/* not likely */
		bu_log( "Could not make name unique: (%s)\n", name );
		rt_bomb( "Make_unique_brl_name: failed\n" );
		return( (char *)NULL );		/* make the compilers happy */
	}
	else
		return( Add_brl_name( name ) );
}


void
Skip_field()
{
	int		done=0;
	int		lencard;

	if( card[counter] == eof ) /* This is an empty field */
	{
		counter++;
		return;
	}
	else if( card[counter] == eor ) /* Up against the end of record */
		return;

	if( card[72] == 'P' )
		lencard = PARAMLEN;
	else
		lencard = CARDLEN;

	if( counter >= lencard )
		Readrec( ++currec );

	while( !done )
	{
		while( card[counter++] != eof && card[counter] != eor &&
			counter <= lencard );
		if( counter > lencard && card[counter] != eor && card[counter] != eof )
			Readrec( ++currec );
		else
			done = 1;
	}

	if( card[counter] == eor )
		counter--;
}

void
Get_name( entityno , skip )
int entityno;
int skip;
{
	int			sol_num;
	int			i,j,k;
	int			no_of_assoc=0;
	int			no_of_props=0;
	int			name_de=0;
	char			*name;

	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return;
	}

	Readrec( dir[entityno]->param );
	Readint( &sol_num , "" );
	for( i=0 ; i<skip ; i++ )
		Skip_field();

	/* skip over the associativities */
	Readint( &no_of_assoc , "" );
	for( k=0 ; k<no_of_assoc ; k++ )
		Readint( &j , "" );

	/* get property entity DE's */
	Readint( &no_of_props , "" );
	for( k=0 ; k<no_of_props ; k++ )
	{
		j = 0;
		Readint( &j , "" );
		if( dir[(j-1)/2]->type == 406 &&
		    dir[(j-1)/2]->form == 15 )
		{
			/* this is a name */
			name_de = j;
			break;
		}
	}

	if( !name_de )
		return;

	Readrec( dir[(name_de-1)/2]->param );
	Readint( &sol_num , "" );
	if( sol_num != 406 )
	{
		/* this is not a property entity */
		bu_log( "Check_names: entity at DE %d is not a property entity\n" , name_de );
		return;
	}

	Readint( &i , "" );
	if( i != 1 )
	{
		bu_log( "Bad property entity, form 15 (name) should have only one value, not %d\n" , i );
		return;
	}

	Readname( &name , "" );
	dir[entityno]->name = Make_unique_brl_name( name );
	bu_free( (char *)name, "Get_name: name" );

}

void
Get_drawing_name( entityno )
int entityno;
{
	int entity_type;
	int no_of_views;
	int no_of_annot;
	int no_of_assoc;
	int no_of_props;
	int i,j,k;
	int name_de=0;
	char *name;

	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return;
	}

	Readrec( dir[entityno]->param );
	Readint( &entity_type , "" );
	if( entity_type != 404 )
	{
		bu_log( "Get_drawing_name: entity at P%07d (type %d) is not a drawing entity\n" , dir[entityno]->param , entity_type );
		return;
	}

	Readint( &no_of_views , "" );
	for( i=0 ; i<no_of_views ; i++ )
	{
		for( j=0 ; j<3 ; j++ )
			Skip_field();
	}

	Readint( &no_of_annot , "" );
	for( i=0 ; i<no_of_annot ; i++ )
		Skip_field();
	/* skip over the associativities */
	Readint( &no_of_assoc , "" );
	for( k=0 ; k<no_of_assoc ; k++ )
		Readint( &j , "" );

	/* get property entity DE's */
	Readint( &no_of_props , "" );
	for( k=0 ; k<no_of_props ; k++ )
	{
		j = 0;
		Readint( &j , "" );
		if( dir[(j-1)/2]->type == 406 &&
		    dir[(j-1)/2]->form == 15 )
		{
			/* this is a name */
			name_de = j;
			break;
		}
	}

	if( !name_de )
		return;

	Readrec( dir[(name_de-1)/2]->param );
	Readint( &entity_type , "" );
	if( entity_type != 406 )
	{
		/* this is not a property entity */
		bu_log( "Get_drawing_name: entity at DE %d is not a property entity\n" , name_de );
		return;
	}

	Readint( &i , "" );
	if( i != 1 )
	{
		bu_log( "Bad property entity, form 15 (name) should have only one value, not %d\n" , i );
		return;
	}

	Readname( &name , "" );
	dir[entityno]->name = Make_unique_brl_name( name );
	bu_free( (char *)name, "Get_name: name" );
}

void
Get_csg_name( entityno )
int entityno;
{
	int			sol_num;
	int			i,j,k;
	int			num;
	int			skip;
	int			no_of_assoc=0;
	int			no_of_props=0;
	int			name_de=0;
	char			*name;

	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return;
	}

	Readrec( dir[entityno]->param );
	Readint( &sol_num , "" );
	Readint( &num , "" );
	if( sol_num == 180 )
		skip = num;
	else if( sol_num == 184 )
		skip = 2*num;
	else
	{
		bu_log( "Get_csg_name: entity (type %d), not a CSG\n" , sol_num );
		return;
	}

	for( i=0 ; i<skip ; i++ )
		Skip_field();

	/* skip over the associativities */
	Readint( &no_of_assoc , "" );
	for( k=0 ; k<no_of_assoc ; k++ )
		Readint( &j , "" );

	/* get property entity DE's */
	Readint( &no_of_props , "" );
	for( k=0 ; k<no_of_props ; k++ )
	{
		j = 0;
		Readint( &j , "" );
		if( dir[(j-1)/2]->type == 406 &&
		    dir[(j-1)/2]->form == 15 )
		{
			/* this is a name */
			name_de = j;
			break;
		}
	}

	if( !name_de )
		return;

	Readrec( dir[(name_de-1)/2]->param );
	Readint( &sol_num , "" );
	if( sol_num != 406 )
	{
		/* this is not a property entity */
		bu_log( "Check_names: entity at DE %d is not a property entity\n" , name_de );
		return;
	}

	Readint( &i , "" );
	if( i != 1 )
	{
		bu_log( "Bad property entity, form 15 (name) should have only one value, not %d\n" , i );
		return;
	}

	Readname( &name , "" );
	dir[entityno]->name = Make_unique_brl_name( name );
	bu_free( (char *)name, "Get_name: name" );
}


void
Get_brep_name( entityno )
int entityno;
{
	int			sol_num;
	int			i,j,k;
	int			num;
	int			skip;
	int			no_of_assoc=0;
	int			no_of_props=0;
	int			name_de=0;
	char			*name;

	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return;
	}

	Readrec( dir[entityno]->param );
	Readint( &sol_num , "" );
	if( sol_num != 186 )
	{
		bu_log( "Get_brep_name: Entity (type %d) is not a BREP\n" , sol_num );
		return;
	}
	Skip_field();
	Skip_field();
	Readint( &num , "" );
	skip = 2*num;

	for( i=0 ; i<skip ; i++ )
		Skip_field();

	/* skip over the associativities */
	Readint( &no_of_assoc , "" );
	for( k=0 ; k<no_of_assoc ; k++ )
		Readint( &j , "" );

	/* get property entity DE's */
	Readint( &no_of_props , "" );
	for( k=0 ; k<no_of_props ; k++ )
	{
		j = 0;
		Readint( &j , "" );
		if( dir[(j-1)/2]->type == 406 &&
		    dir[(j-1)/2]->form == 15 )
		{
			/* this is a name */
			name_de = j;
			break;
		}
	}

	if( !name_de )
		return;

	Readrec( dir[(name_de-1)/2]->param );
	Readint( &sol_num , "" );
	if( sol_num != 406 )
	{
		/* this is not a property entity */
		bu_log( "Check_names: entity at DE %d is not a property entity\n" , name_de );
		return;
	}

	Readint( &i , "" );
	if( i != 1 )
	{
		bu_log( "Bad property entity, form 15 (name) should have only one value, not %d\n" , i );
		return;
	}

	Readname( &name , "" );
	dir[entityno]->name = Make_unique_brl_name( name );
	bu_free( (char *)name, "Get_name: name" );
}

void
Get_subfig_name( entityno )
int entityno;
{
	int i;
	int entity_type;
	char *name;

	if( entityno >= totentities )
		rt_bomb( "Get_subfig_name: entityno too big!!\n" );

	if( dir[entityno]->type != 308 )
	{
		bu_log( "Get_subfig_name called with entity type %s, should be Subfigure Definition\n",
			iges_type( dir[entityno]->type  ) );
		rt_bomb( "Get_subfig_name: bad type\n" );
	}

	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		rt_bomb( "Get_subfig_name: Bad entity\n" );
	}

	Readrec( dir[entityno]->param );

	Readint( &entity_type, "" );
	if( entity_type != 308 )
	{
		bu_log( "Get_subfig_name: Read entity type %s, should be Subfigure Definition\n",
			iges_type( dir[entityno]->type  ) );
		rt_bomb( "Get_subfig_name: bad type\n" );
	}

	Readint( &i, "" );	/* ignore depth */
	Readname( &name, "" );	/* get subfigure name */

	dir[entityno]->name = Add_brl_name( name );
	bu_free( (char *)name, "Get_name: name" );
}

void
Check_names()
{

	int i;

	bu_log( "Looking for Name Entities...\n" );
	for( i=0 ; i < totentities ; i++ )
	{
		switch( dir[i]->type )
		{
			case 152:
				Get_name( i , 13 );
				break;
			case 150:
			case 168:
				Get_name( i , 12 );
				break;
			case 156:
				Get_name( i , 9 );
				break;
			case 154:
			case 160:
			case 162:
				Get_name( i , 8 );
				break;
			case 164:
				Get_name( i , 5 );
				break;
			case 158:
				Get_name( i , 4 );
				break;
			case 180:
			case 184:
				Get_csg_name( i );
				break;
			case 186:
				Get_brep_name( i );
				break;
			case 308:
				Get_subfig_name( i );
				break;
			case 404:
				Get_drawing_name( i );
				break;
			case 410:
				if( dir[i]->form == 0 )
					Get_name( i , 8 );
				else if( dir[i]->form == 1 )
					Get_name( i , 22 );
				break;
			case 430:
				Get_name( i , 1 );
				break;
			default:
				break;
		}
	}

	bu_log( "Assigning names to entities without names...\n" );
	for( i=0 ; i < totentities ; i++ )
	{
		char tmp_name[NAMESIZE + 1];

		if( dir[i]->name == (char *)NULL )
		{
			switch( dir[i]->type )
			{
				case 150:
					sprintf( tmp_name , "block.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 152:
					sprintf( tmp_name , "wedge.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 154:
					sprintf( tmp_name , "cyl.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 156:
					sprintf( tmp_name , "cone.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 158:
					sprintf( tmp_name , "sphere.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 160:
					sprintf( tmp_name , "torus.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 162:
					sprintf( tmp_name , "revolution.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 164:
					sprintf( tmp_name , "extrusion.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 168:
					sprintf( tmp_name , "ell.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 180:
					sprintf( tmp_name , "region.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 184:
					sprintf( tmp_name , "group.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 186:
					sprintf( tmp_name , "brep.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 404:
					sprintf( tmp_name , "drawing.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 410:
					sprintf( tmp_name , "view.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
				case 430:
					sprintf( tmp_name , "inst.%d" , i );
					dir[i]->name = Make_unique_brl_name( tmp_name );
					break;
			}
		}
	}
}
@


11.17
log
@update copyright to include span through 2003
@
text
@@


11.16
log
@Mods to get IGES working with new database format (v5)
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1993 by the United States Army.
@


11.16.4.1
log
@sync branch with HEAD
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
@


11.16.6.1
log
@sync to HEAD...
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
@


11.16.12.1
log
@merge from HEAD
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
@


11.15
log
@
Converted from Release 4 names to know about libbu and libbn
@
text
@d16 1
@


11.14
log
@Eliminated some unused variables
@
text
@d48 1
a48 1
	ptr = (struct name_list *)rt_malloc( sizeof( struct name_list ), "Add_brl_name: ptr" );
d158 1
a158 1
		rt_log( "Could not make name unique: (%s)\n", name );
d217 1
a217 1
		rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d255 1
a255 1
		rt_log( "Check_names: entity at DE %d is not a property entity\n" , name_de );
d262 1
a262 1
		rt_log( "Bad property entity, form 15 (name) should have only one value, not %d\n" , i );
d268 1
a268 1
	rt_free( (char *)name, "Get_name: name" );
d287 1
a287 1
		rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d296 1
a296 1
		rt_log( "Get_drawing_name: entity at P%07d (type %d) is not a drawing entity\n" , dir[entityno]->param , entity_type );
d338 1
a338 1
		rt_log( "Get_drawing_name: entity at DE %d is not a property entity\n" , name_de );
d345 1
a345 1
		rt_log( "Bad property entity, form 15 (name) should have only one value, not %d\n" , i );
d351 1
a351 1
	rt_free( (char *)name, "Get_name: name" );
d369 1
a369 1
		rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d383 1
a383 1
		rt_log( "Get_csg_name: entity (type %d), not a CSG\n" , sol_num );
d418 1
a418 1
		rt_log( "Check_names: entity at DE %d is not a property entity\n" , name_de );
d425 1
a425 1
		rt_log( "Bad property entity, form 15 (name) should have only one value, not %d\n" , i );
d431 1
a431 1
	rt_free( (char *)name, "Get_name: name" );
d450 1
a450 1
		rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d459 1
a459 1
		rt_log( "Get_brep_name: Entity (type %d) is not a BREP\n" , sol_num );
d498 1
a498 1
		rt_log( "Check_names: entity at DE %d is not a property entity\n" , name_de );
d505 1
a505 1
		rt_log( "Bad property entity, form 15 (name) should have only one value, not %d\n" , i );
d511 1
a511 1
	rt_free( (char *)name, "Get_name: name" );
d527 1
a527 1
		rt_log( "Get_subfig_name called with entity type %s, should be Subfigure Definition\n",
d534 1
a534 1
		rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d544 1
a544 1
		rt_log( "Get_subfig_name: Read entity type %s, should be Subfigure Definition\n",
d553 1
a553 1
	rt_free( (char *)name, "Get_name: name" );
d562 1
a562 1
	rt_log( "Looking for Name Entities...\n" );
d615 1
a615 1
	rt_log( "Assigning names to entities without names...\n" );
@


11.13
log
@Minor Mods for IRIX 6.2
@
text
@a23 1
	int found=0;
a42 2
		{
			found = 1;
a43 1
		}
a518 2
	int def_de;
	int def_index;
@


11.12
log
@Mods to get trimmed surfaces with subfigures working.
@
text
@a45 1
rt_log( "Add_brl_name: %s already in list\n" , name );
d56 1
a56 1
rt_log( "Add_brl_name: new name is %s\n", ptr->name );
a93 2
rt_log( "Make_unique_brl_name: name is already in list: %s\n", name );

d164 1
@


11.11
log
@All logging done via rt_log
@
text
@d18 44
d93 3
a95 8
	{
		/* add this name to the list */
		ptr = (struct name_list *)rt_malloc( sizeof( struct name_list ), "Make_unique_brl_name: ptr" );
		strcpy( ptr->name, name );
		ptr->next = name_root;
		name_root = ptr;
		return( ptr->name );
	}
d125 2
a126 8
	{
		/* add this name to the list */
		ptr = (struct name_list *)rt_malloc( sizeof( struct name_list ), "Make_unique_brl_name: ptr" );
		strcpy( ptr->name, name );
		ptr->next = name_root;
		name_root = ptr;
		return( ptr->name );
	}
d169 1
a169 8
	{
		/* add this name to the list */
		ptr = (struct name_list *)rt_malloc( sizeof( struct name_list ), "Make_unique_brl_name: ptr" );
		strcpy( ptr->name, name );
		ptr->next = name_root;
		name_root = ptr;
		return( ptr->name );
	}
d521 44
d602 3
@


11.10
log
@Checkpoint in mods for handling assemblies (subfigures).
@
text
@d197 1
a197 1
		printf( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d267 1
a267 1
		printf( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d349 1
a349 1
		printf( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d430 1
a430 1
		printf( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d500 1
a500 1
	printf( "Looking for Name Entities...\n" );
d550 1
a550 1
	printf( "Assigning names to entities without names...\n" );
@


11.9
log
@Mods to handle TNURB BREP. Also added RT_EXTERNS to iges_struct.h.
@
text
@d17 3
a19 3
int
Fix_name( entityno )
int entityno;
d21 42
a62 2
	char *ptr;
	int i;
a63 1
	ptr = dir[entityno]->name;
d65 1
a65 1
	while( *ptr != '\0' && i < NAMELEN )
d67 13
d81 12
a92 3
		if( isspace(*ptr) || *ptr == '/' )
			*ptr = '_';
		ptr++;
a93 1
	*ptr = '\0';
d95 5
a99 1
	for( i=0 ; i<totentities ; i++ )
d101 6
a106 7
		if( dir[i]->name == (char *)NULL )
			continue;
		if( i == entityno )
			continue;
		if( (dir[i]->type > 149 && dir[i]->type < 187)
			|| dir[i]->type == 128
			|| dir[i]->type == 430 )
d108 1
a108 1
			if( !strcmp( dir[i]->name , ptr ) )
d110 2
a111 2
				printf( "Name (%s) already used\n" , ptr );
				return( 0 );
d113 1
d115 12
d129 15
a143 1
	return( 1 );
d146 1
d193 1
d246 3
a248 1
	Readname( &dir[entityno]->name , "" );
a249 5
	if( !Fix_name( entityno ) )
	{
		rt_free( (char *)dir[entityno]->name , "Get_name: name" );
		dir[entityno]->name = (char *)NULL;
	}
d263 1
d329 3
a331 7
	Readname( &dir[entityno]->name , "" );

	if( !Fix_name( entityno ) )
	{
		rt_free( (char *)dir[entityno]->name , "Get_name: name" );
		dir[entityno]->name = (char *)NULL;
	}
d345 1
d409 3
a411 7
	Readname( &dir[entityno]->name , "" );

	if( !Fix_name( entityno ) )
	{
		rt_free( (char *)dir[entityno]->name , "Get_name: name" );
		dir[entityno]->name = (char *)NULL;
	}
d426 1
d489 3
a491 7
	Readname( &dir[entityno]->name , "" );

	if( !Fix_name( entityno ) )
	{
		rt_free( (char *)dir[entityno]->name , "Get_name: name" );
		dir[entityno]->name = (char *)NULL;
	}
d553 2
a558 4
				case 128:
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "nurb.%d" , i );
					break;
d560 2
a561 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "block.%d" , i );
d564 2
a565 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "wedge.%d" , i );
d568 2
a569 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "cyl.%d" , i );
d572 2
a573 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "cone.%d" , i );
d576 2
a577 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "sphere.%d" , i );
d580 2
a581 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "torus.%d" , i );
d584 2
a585 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "revolution.%d" , i );
d588 2
a589 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "extrusion.%d" , i );
d592 2
a593 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "ell.%d" , i );
d596 2
a597 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "region.%d" , i );
d600 2
a601 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "group.%d" , i );
d604 2
a605 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "brep.%d" , i );
d608 2
a609 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "drawing.%d" , i );
d612 2
a613 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "view.%d" , i );
d616 2
a617 2
					dir[i]->name = (char *)rt_malloc( NAMELEN+1 , "Check_names: dir->name" );
					sprintf( dir[i]->name , "inst.%d" , i );
@


11.8
log
@Release_4.4
@
text
@a13 13
#include "conf.h"

#include <stdio.h>
#include <ctype.h>
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "vmath.h"

a15 1
#include "raytrace.h"
d173 1
a173 1
	int name_de;
@


11.7
log
@Mods for Irix 6.
@
text
@@


11.6
log
@Factored ifdefs
@
text
@a115 1
	char			*name;
a272 1
	char			*name;
a356 1
	char			*name;
@


11.5
log
@Changes by jra
@
text
@d14 2
d18 6
d26 1
a26 5
#ifdef BSD
#include <strings.h>
#else
#include <string.h>
#endif
@


11.4
log
@Added names for drawings
@
text
@d469 6
d545 4
@


11.3
log
@Modified header files
@
text
@d175 85
d466 3
d535 4
@


11.2
log
@fixed minor bugs
@
text
@a24 3
#include "rtlist.h"
#include "rtstring.h"
#include "nmg.h"
@


11.1
log
@Major Upgrade to IGES 5.1
@
text
@d112 3
a114 3
	int			no_of_assoc;
	int			no_of_props;
	int			name_de;
d138 1
d149 3
d185 3
a187 3
	int			no_of_assoc;
	int			no_of_props;
	int			name_de;
d222 1
d233 3
d270 3
a272 3
	int			no_of_assoc;
	int			no_of_props;
	int			name_de;
d306 1
d316 3
@
