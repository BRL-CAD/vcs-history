head	11.7;
access;
symbols
	ansi-20040405-merged:11.5
	postmerge-20040405-ansi:11.5
	premerge-20040404-ansi:11.5
	postmerge-autoconf:11.5
	autoconf-freeze:11.5
	premerge-autoconf:11.5
	ansi-20040316-freeze:11.5
	postmerge-20040315-windows:11.5
	premerge-20040315-windows:11.5
	windows-20040315-freeze:11.5
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.14
	phong-branch:11.5.0.12
	photonmap-branch:11.5.0.10
	rel-6-1-DP:11.5
	windows-branch:11.5.0.8
	rel-6-0-2:11.5
	ansi-branch:11.5.0.6
	rel-6-0-1-branch:11.5.0.4
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.5
	offsite-5-3-pre:11.5
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.4
	rel-5-0-beta:11.4
	rel-4-5:11.4
	ctj-4-5-post:11.4
	ctj-4-5-pre:11.4
	rel-4-4:11.1
	rel-4-0:1.2;
locks; strict;
comment	@ * @;


11.7
date	2004.05.24.04.01.09;	author morrison;	state dead;
branches;
next	11.6;

11.6
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.5;

11.5
date	2000.03.29.18.42.50;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	95.12.01.15.47.52;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	95.11.28.21.35.45;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	95.06.28.15.23.43;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.08.12;	author mike;	state Rel4_4;
branches;
next	1.2;

1.2
date	91.06.12.20.27.58;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	91.06.12.19.59.45;	author mike;	state Exp;
branches;
next	;


desc
@IGES converter
@


11.7
log
@moved to src/iges/
@
text
@#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "vmath.h"
#include "nmg.h"
#include "raytrace.h"
#include "nurb.h"
#include "./b_spline.h"

struct b_spline *
spl_new(u_order, v_order, n_u, n_v, n_rows, n_cols, evp)
int u_order, v_order, n_u, n_v, n_rows, n_cols, evp;
{
	struct b_spline *srf;

	srf = (struct b_spline *) bu_malloc(sizeof(struct b_spline), "spl_new: srf");

	srf->next = (struct b_spline *)0;
	srf->order[0] = u_order;
	srf->order[1] = v_order;

	srf->u_kv = (struct knot_vec *) bu_malloc(sizeof(struct knot_vec), "spl_new: srf->u_kv");
	srf->v_kv = (struct knot_vec *) bu_malloc(sizeof(struct knot_vec), "spl_new: srf->v_kv");

	srf->u_kv->k_size = n_u;
	srf->v_kv->k_size = n_v;

	srf->u_kv->knots = (fastf_t *) bu_calloc(n_u, sizeof(fastf_t), "spl_new: srf->u_kv->knots");
	srf->v_kv->knots = (fastf_t *) bu_calloc(n_v, sizeof(fastf_t), "spl_new: srf->v_kv->knots");

	srf->ctl_mesh = (struct b_mesh *) bu_malloc(sizeof(struct b_mesh), "spl_new: srf->ctl_mesh");

	srf->ctl_mesh->mesh = (fastf_t *) bu_calloc(n_rows * n_cols * evp,
		sizeof (fastf_t), "spl_new: srf->ctl_mesh->mesh");

	srf->ctl_mesh->pt_type = evp;
	srf->ctl_mesh->mesh_size[0] = n_rows;
	srf->ctl_mesh->mesh_size[1] = n_cols;

	return srf;
}

void
spl_sfree(srf)
struct b_spline * srf;
{
	bu_free((char *)srf->u_kv->knots, "spl_sfree: srf->u_kv->knots");
	bu_free((char *)srf->v_kv->knots, "spl_sfree: srf->v_kv->knots");
	bu_free((char *)srf->u_kv, "spl_sfree: srf->u_kv");
	bu_free((char *)srf->v_kv, "spl_sfree: srf->v_kv");

	bu_free((char *)srf->ctl_mesh->mesh, "spl_sfree: srf->ctl_mesh->mesh");
	bu_free((char *)srf->ctl_mesh, "spl_sfree: srf->ctl_mesh");

	bu_free((char *)srf, "spl_sfree: srf");
}

struct knot_vec *
spl_kvknot(order, lower, upper, num)
int order, num;
fastf_t lower, upper;
{
	register int i;
	int total;
	fastf_t knot_step;
	register struct knot_vec *new_knots;

	total = order * 2 + num;

	knot_step = (upper - lower) / ( num + 1 );

	new_knots = (struct knot_vec *) bu_malloc(sizeof(struct knot_vec), "spl_kvknot: new_knots");
	new_knots->k_size = total;

	new_knots->knots = (fastf_t *) bu_calloc(total, sizeof(fastf_t), "spl_kvknot: new_knots->knots");

	for (i = 0; i < order; i++)
		new_knots->knots[i] = lower;

	for (i = order; i <= (num + order -1); i++)
		new_knots->knots[i] = new_knots->knots[i-1] + knot_step;

	for (i = num + order; i < total; i++)
		new_knots->knots[i] = upper;

	return new_knots;
}
@


11.6
log
@change conf.h to a wrapped config.h
@
text
@@


11.5
log
@
Converted from Release 4 names to know about libbu and libbn
@
text
@d1 5
a5 1
#include "conf.h"
@


11.4
log
@LIBNURBS has been converted over to using t-NURBS NMG data structures
@
text
@d23 1
a23 1
	srf = (struct b_spline *) rt_malloc(sizeof(struct b_spline), "spl_new: srf");
d29 2
a30 2
	srf->u_kv = (struct knot_vec *) rt_malloc(sizeof(struct knot_vec), "spl_new: srf->u_kv");
	srf->v_kv = (struct knot_vec *) rt_malloc(sizeof(struct knot_vec), "spl_new: srf->v_kv");
d35 2
a36 2
	srf->u_kv->knots = (fastf_t *) rt_calloc(n_u, sizeof(fastf_t), "spl_new: srf->u_kv->knots");
	srf->v_kv->knots = (fastf_t *) rt_calloc(n_v, sizeof(fastf_t), "spl_new: srf->v_kv->knots");
d38 1
a38 1
	srf->ctl_mesh = (struct b_mesh *) rt_malloc(sizeof(struct b_mesh), "spl_new: srf->ctl_mesh");
d40 1
a40 1
	srf->ctl_mesh->mesh = (fastf_t *) rt_calloc(n_rows * n_cols * evp,
d54 4
a57 4
	rt_free((char *)srf->u_kv->knots, "spl_sfree: srf->u_kv->knots");
	rt_free((char *)srf->v_kv->knots, "spl_sfree: srf->v_kv->knots");
	rt_free((char *)srf->u_kv, "spl_sfree: srf->u_kv");
	rt_free((char *)srf->v_kv, "spl_sfree: srf->v_kv");
d59 2
a60 2
	rt_free((char *)srf->ctl_mesh->mesh, "spl_sfree: srf->ctl_mesh->mesh");
	rt_free((char *)srf->ctl_mesh, "spl_sfree: srf->ctl_mesh");
d62 1
a62 1
	rt_free((char *)srf, "spl_sfree: srf");
d79 1
a79 1
	new_knots = (struct knot_vec *) rt_malloc(sizeof(struct knot_vec), "spl_kvknot: new_knots");
d82 1
a82 1
	new_knots->knots = (fastf_t *) rt_calloc(total, sizeof(fastf_t), "spl_kvknot: new_knots->knots");
@


11.3
log
@Mods to handle TNURB BREP. Also added RT_EXTERNS to iges_struct.h.
@
text
@d18 2
a19 2
spl_new(u_order, v_order, n_u_knots, n_v_knots, n_rows, n_cols, evp)
int u_order, v_order, n_u_knots, n_v_knots, n_rows, n_cols, evp;
d32 2
a33 2
	srf->u_kv->k_size = n_u_knots;
	srf->v_kv->k_size = n_v_knots;
d35 2
a36 2
	srf->u_kv->knots = (fastf_t *) rt_calloc(n_u_knots, sizeof(fastf_t), "spl_new: srf->u_kv->knots");
	srf->v_kv->knots = (fastf_t *) rt_calloc(n_v_knots, sizeof(fastf_t), "spl_new: srf->v_kv->knots");
@


11.2
log
@Converted to use rt_malloc family.
@
text
@d1 2
d4 6
d12 3
a14 2
#include "machine.h"
#include "vmath.h"
@


11.1
log
@Release_4.4
@
text
@d14 1
a14 1
	srf = (struct b_spline *) malloc(sizeof(struct b_spline));
d20 2
a21 2
	srf->u_kv = (struct knot_vec *) malloc(sizeof(struct knot_vec));
	srf->v_kv = (struct knot_vec *) malloc(sizeof(struct knot_vec));
d26 2
a27 2
	srf->u_kv->knots = (fastf_t *) calloc(n_u_knots, sizeof(fastf_t));
	srf->v_kv->knots = (fastf_t *) calloc(n_v_knots, sizeof(fastf_t));
d29 1
a29 1
	srf->ctl_mesh = (struct b_mesh *) malloc(sizeof(struct b_mesh));
d31 2
a32 2
	srf->ctl_mesh->mesh = (fastf_t *) calloc(n_rows * n_cols * evp,
		sizeof (fastf_t));
d45 4
a48 4
	free((char *)srf->u_kv->knots);
	free((char *)srf->v_kv->knots);
	free((char *)srf->u_kv);
	free((char *)srf->v_kv);
d50 2
a51 2
	free((char *)srf->ctl_mesh->mesh);
	free((char *)srf->ctl_mesh);
d53 1
a53 1
	free((char *)srf);
d70 1
a70 1
	new_knots = (struct knot_vec *) malloc(sizeof(struct knot_vec));
d73 1
a73 1
	new_knots->knots = (fastf_t *) calloc(total, sizeof(fastf_t));
@


1.2
log
@Modified for Release 4.0
@
text
@@


1.1
log
@Initial revision
@
text
@d4 2
@
