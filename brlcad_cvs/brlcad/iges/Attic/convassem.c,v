head	11.13;
access;
symbols
	ansi-20040405-merged:11.11.4.1
	postmerge-20040405-ansi:11.12
	premerge-20040404-ansi:11.12
	postmerge-autoconf:11.12
	autoconf-freeze:11.11.12.1
	premerge-autoconf:11.12
	ansi-20040316-freeze:11.11
	postmerge-20040315-windows:11.12
	premerge-20040315-windows:11.12
	windows-20040315-freeze:11.11.6.1
	autoconf-20031203:11.11
	autoconf-20031202:11.11
	autoconf-branch:11.11.0.12
	phong-branch:11.11.0.10
	photonmap-branch:11.11.0.8
	rel-6-1-DP:11.11
	windows-branch:11.11.0.6
	rel-6-0-2:11.11
	ansi-branch:11.11.0.4
	rel-6-0-1-branch:11.11.0.2
	hartley-6-0-post:11.11
	hartley-6-0-pre:11.11
	rel-6-0-1:11.11
	rel-6-0:11.10
	rel-5-4:11.9
	offsite-5-3-pre:11.10
	rel-5-3:11.9
	rel-5-2:11.9
	rel-5-1-branch:11.9.0.2
	rel-5-1:11.9
	rel-5-0:11.8
	rel-5-0-beta:11.8
	rel-4-5:11.8
	ctj-4-5-post:11.8
	ctj-4-5-pre:11.8
	rel-4-4:11.5
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.13
date	2004.05.24.04.01.07;	author morrison;	state dead;
branches;
next	11.12;

11.12
date	2004.02.02.17.39.04;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2002.05.17.12.49.27;	author morrison;	state Exp;
branches
	11.11.4.1
	11.11.6.1
	11.11.12.1;
next	11.10;

11.10
date	2000.08.24.04.10.47;	author mike;	state Exp;
branches;
next	11.9;

11.9
date	2000.03.29.18.42.42;	author mike;	state Exp;
branches;
next	11.8;

11.8
date	95.12.06.13.25.06;	author jra;	state Exp;
branches;
next	11.7;

11.7
date	95.11.28.21.35.45;	author jra;	state Exp;
branches;
next	11.6;

11.6
date	95.06.28.15.23.43;	author jra;	state Exp;
branches;
next	11.5;

11.5
date	95.01.04.10.07.34;	author mike;	state Rel4_4;
branches;
next	11.4;

11.4
date	94.10.21.20.15.24;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	94.08.22.19.31.42;	author gdurf;	state Exp;
branches;
next	11.2;

11.2
date	93.12.16.08.58.12;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	93.06.28.10.00.14;	author jra;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.45.10;	author mike;	state Rel4_0;
branches;
next	1.4;

1.4
date	91.07.06.00.17.53;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	91.06.14.08.06.03;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	91.06.12.20.27.36;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	91.06.12.19.59.09;	author mike;	state Exp;
branches;
next	;

11.11.4.1
date	2004.03.17.21.16.30;	author morrison;	state Exp;
branches;
next	;

11.11.6.1
date	2004.03.11.23.41.13;	author morrison;	state Exp;
branches;
next	;

11.11.12.1
date	2004.02.12.19.41.38;	author erikg;	state Exp;
branches;
next	;


desc
@IGES converter
@


11.13
log
@moved to src/iges/
@
text
@/*
 *  Authors -
 *	John R. Anderson
 *	Susanne L. Muuss
 *	Earl P. Weaver
 *
 *  Source -
 *	VLD/ASB Building 1065
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */


/*	This routine controls the conversion of IGES solid assemblies
	to BRLCAD groups	*/

#include "./iges_struct.h"
#include "./iges_extern.h"

/* Linked list to hold needed data for the group members */
struct solid_list
{
	int item;	/* Index into "dir" structure for this group member */
	int matrix;	/* Pointer to transformation entity for this member */
	char *name;	/* BRLCAD name for this member */
	mat_t rot;	/* Pointer to BRLCAD matrix */
	struct solid_list *next;
};

void
Convassem()
{
	int			i,j,k,comblen,conv=0,totass=0;
	struct solid_list	*root,*ptr;
	struct wmember		head,*wmem;
	int			no_of_assoc=0;
	int			no_of_props=0;
	int			att_de=0;
	unsigned char		*rgb;
	struct brlcad_att	brl_att;
	fastf_t			*flt;

	bu_log( "\nConverting solid assembly entities:\n" );

	ptr = NULL;
	root = NULL;
	BU_LIST_INIT( &head.l );

	for( i=0 ; i<totentities ; i++ ) /* loop through all entities */
	{
		if( dir[i]->type != 184 )	/* This is not a solid assembly */
			continue;

		/* Increment count of solid assemblies */
		totass++;

		if( dir[i]->param <= pstart )
		{
			bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
					dir[i]->direct , dir[i]->name );
			continue;
		}
		Readrec( dir[i]->param ); /* read first record into buffer */

		Readint( &j , "" );	/* read entity type */
		if( j != 184 )
		{
			bu_log( "Incorrect entity type in Parameter section for entity %d\n" , i );
			return;
		}

		Readint( &comblen , "" );	/* read number of members in group */

		/* Read pointers to group members */
		for( j=0 ; j<comblen ; j++ )
		{
			if( ptr == NULL )
			{
				root = (struct solid_list *)bu_malloc( sizeof( struct solid_list ),
						"Convassem: root" );
				ptr = root;
			}
			else
			{
				ptr->next = (struct solid_list *)bu_malloc( sizeof( struct solid_list ),
						"Convassem: ptr->next" );
				ptr = ptr->next;
			}
			ptr->next = NULL;

			/* Read pointer to an object */
			Readint( &ptr->item , "" );
			if( ptr->item < 0 )
				ptr->item = (-ptr->item);

			/* Convert pointer to a "dir" index */
			ptr->item = (ptr->item-1)/2;

			/* Save name of object */
			ptr->name = dir[ptr->item]->name;

			/* increment reference count */
			dir[ptr->item]->referenced++;
		}

		/* Read pointer to transformation matrix for each member */
		ptr = root;
		for( j=0 ; j<comblen ; j++ )
		{
			ptr->matrix = 0;

			/* Read pointer to a transformation */
			Readint( &ptr->matrix , "" );

			if( ptr->matrix < 0 )
				ptr->matrix = (-ptr->matrix);

			/* Convert to a "dir" index */
			if( ptr->matrix )
				ptr->matrix = (ptr->matrix-1)/2;
			else
				ptr->matrix = (-1); /* flag to indicate "none" */

			ptr = ptr->next;
		}

		/* skip over the associativities */
		Readint( &no_of_assoc , "" );
		for( k=0 ; k<no_of_assoc ; k++ )
			Readint( &j , "" );

		/* get property entity DE's */
		Readint( &no_of_props , "" );
		for( k=0 ; k<no_of_props ; k++ )
		{
			Readint( &j , "" );
			if( dir[(j-1)/2]->type == 422 &&
				 dir[(j-1)/2]->referenced == brlcad_att_de )
			{
				/* this is one of our attribute instances */
				att_de = j;
			}
		}

		Read_att( att_de , &brl_att );

		/* Make the members */
		ptr = root;
		while( ptr != NULL )
		{
			/* copy the members original transformation matrix */
			for( j=0 ; j<16 ; j++ )
				ptr->rot[j] = (*dir[ptr->item]->rot)[j];

			/* Apply any matrix indicated for this group member */
			if( ptr->matrix > (-1) )
				Matmult( ptr->rot , *(dir[ptr->matrix]->rot)  , ptr->rot );

			wmem = mk_addmember( ptr->name , &head.l, NULL, operator[Union] );
			flt = (fastf_t *)ptr->rot;
			for( j=0 ; j<16 ; j++ )
			{
				wmem->wm_mat[j] = (*flt);
				flt++;
			}
			ptr = ptr->next;
		}

		/* Make the object */
		if( dir[i]->colorp != 0 )
			rgb = (unsigned char*)dir[i]->rgb;
		else
			rgb = (unsigned char *)0;

		mk_lrcomb( fdout , 
			dir[i]->name,		/* name */
			&head,			/* members */
			brl_att.region_flag,	/* region flag */
			brl_att.material_name,	/* material name */
			brl_att.material_params, /* material parameters */
			rgb,			/* color */
			brl_att.ident,		/* ident */
			brl_att.air_code,	/* air code */
			brl_att.material_code,	/* GIFT material */
			brl_att.los_density,	/* los density */
			brl_att.inherit );	/* inherit */


		/* Increment the count of successful conversions */
		conv++;

		/* Free some memory */
		ptr = root;
		while( ptr != NULL )
		{
			bu_free( (char *)ptr, "convassem: ptr" );
			ptr = ptr->next;
		}
	}
	bu_log( "Converted %d solid assemblies successfully out of %d total assemblies\n" , conv , totass );
}
@


11.12
log
@update copyright to include span through 2003
@
text
@@


11.11
log
@added matrix parameter to mk_addmember()
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990 by the United States Army.
@


11.11.4.1
log
@sync branch with HEAD
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.11.6.1
log
@sync to HEAD...
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.11.12.1
log
@merge from HEAD
@
text
@d13 1
a13 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
@


11.10
log
@
mk_addmember
RCSid
@
text
@d163 1
a163 1
			wmem = mk_addmember( ptr->name , &head.l, operator[Union] );
@


11.9
log
@
Converted from Release 4 names to know about libbu and libbn
@
text
@d163 1
a163 1
			wmem = mk_addmember( ptr->name , &head, operator[Union] );
@


11.8
log
@All logging done via rt_log
@
text
@d47 1
a47 1
	rt_log( "\nConverting solid assembly entities:\n" );
d51 1
a51 1
	RT_LIST_INIT( &head.l );
d63 1
a63 1
			rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d72 1
a72 1
			rt_log( "Incorrect entity type in Parameter section for entity %d\n" , i );
d83 1
a83 1
				root = (struct solid_list *)rt_malloc( sizeof( struct solid_list ),
d89 1
a89 1
				ptr->next = (struct solid_list *)rt_malloc( sizeof( struct solid_list ),
d200 1
a200 1
			rt_free( (char *)ptr, "convassem: ptr" );
d204 1
a204 1
	rt_log( "Converted %d solid assemblies successfully out of %d total assemblies\n" , conv , totass );
@


11.7
log
@Mods to handle TNURB BREP. Also added RT_EXTERNS to iges_struct.h.
@
text
@d47 1
a47 1
	printf( "\nConverting solid assembly entities:\n" );
d63 1
a63 1
			printf( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d72 1
a72 1
			fprintf( stderr , "Incorrect entity type in Parameter section for entity %d\n" , i );
d204 1
a204 1
	printf( "Converted %d solid assemblies successfully out of %d total assemblies\n" , conv , totass );
@


11.6
log
@Converted to use rt_malloc family.
@
text
@a20 5
#include "conf.h"

#include <stdio.h>
#include "machine.h"
#include "vmath.h"
a22 3
#include "wdb.h"

void Read_att();
d40 3
a42 3
	int			no_of_assoc;
	int			no_of_props;
	int			att_de;
@


11.5
log
@Release_4.4
@
text
@d91 2
a92 1
				root = (struct solid_list *)malloc( sizeof( struct solid_list ) );
d97 2
a98 1
				ptr->next = (struct solid_list *)malloc( sizeof( struct solid_list ) );
d208 1
a208 1
			free( ptr );
@


11.4
log
@rgb is now unsigned char
@
text
@@


11.3
log
@Factored ifdefs
@
text
@d51 1
a51 1
	char 			*rgb;
d181 1
a181 1
			rgb = (char*)dir[i]->rgb;
d183 1
a183 1
			rgb = (char *)0;
@


11.2
log
@changed function declaration to void
@
text
@d21 2
@


11.1
log
@Major Upgrade to IGES 5.1
@
text
@d40 1
@


10.1
log
@Release_4.0
@
text
@d28 2
d42 9
a51 5
	int i,j,comblen,conv=0,totass=0;
	struct solid_list *root,*ptr;
	struct wmember head,*wmem;
	fastf_t *flt;

d134 4
d139 15
d176 19
a194 9
		if( dir[i]->colorp != 0 )  {
			mk_lcomb( fdout , dir[i]->name , &head , 0 ,
				(char *)0 , (char *)0 ,
				(char *)dir[i]->rgb , 0 );
		}  else  {
			mk_lcomb( fdout , dir[i]->name , &head , 0 ,
				(char *)0 , (char *)0 ,
				(char *)0 , 0 );
		}
@


1.4
log
@ANSI lint
@
text
@@


1.3
log
@Changed for more modern LIBWBD interface.
Added error checking
@
text
@d151 9
a159 4
		if( dir[i]->colorp != 0 )
			mk_lcomb( fdout , dir[i]->name , &head , 0 , (char *)0 , (char *)0 , dir[i]->rgb , 0 );
		else
			mk_lcomb( fdout , dir[i]->name , &head , 0 , (char *)0 , (char *)0 , (char *)0 , 0 );
@


1.2
log
@Modified for Release 4.0
@
text
@d141 1
a141 2
			wmem = mk_addmember( ptr->name , &head );
			wmem->wm_op = operator[Union];
@


1.1
log
@Initial revision
@
text
@d22 2
d50 1
a50 2
	head.wm_forw = &head;
	head.wm_back = &head;
@
