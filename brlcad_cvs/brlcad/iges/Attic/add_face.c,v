head	11.15;
access;
symbols
	ansi-20040405-merged:11.13.6.1
	postmerge-20040405-ansi:11.14
	premerge-20040404-ansi:11.14
	postmerge-autoconf:11.14
	autoconf-freeze:11.13.14.1
	premerge-autoconf:11.14
	ansi-20040316-freeze:11.13
	postmerge-20040315-windows:11.14
	premerge-20040315-windows:11.14
	windows-20040315-freeze:11.13.8.1
	autoconf-20031203:11.13
	autoconf-20031202:11.13
	autoconf-branch:11.13.0.14
	phong-branch:11.13.0.12
	photonmap-branch:11.13.0.10
	rel-6-1-DP:11.13
	windows-branch:11.13.0.8
	rel-6-0-2:11.13
	ansi-branch:11.13.0.6
	rel-6-0-1-branch:11.13.0.4
	hartley-6-0-post:11.13
	hartley-6-0-pre:11.13
	rel-6-0-1:11.13
	rel-6-0:11.13
	rel-5-4:11.13
	offsite-5-3-pre:11.13
	rel-5-3:11.13
	rel-5-2:11.13
	rel-5-1-branch:11.13.0.2
	rel-5-1:11.13
	rel-5-0:11.12
	rel-5-0-beta:11.12
	rel-4-5:11.12
	ctj-4-5-post:11.12
	ctj-4-5-pre:11.12
	rel-4-4:11.7;
locks; strict;
comment	@ * @;


11.15
date	2004.05.24.04.01.07;	author morrison;	state dead;
branches;
next	11.14;

11.14
date	2004.02.02.17.39.04;	author morrison;	state Exp;
branches;
next	11.13;

11.13
date	2000.03.29.18.42.40;	author mike;	state Exp;
branches
	11.13.6.1
	11.13.8.1
	11.13.14.1;
next	11.12;

11.12
date	95.12.06.13.25.06;	author jra;	state Exp;
branches;
next	11.11;

11.11
date	95.12.04.19.35.47;	author jra;	state Exp;
branches;
next	11.10;

11.10
date	95.12.01.15.47.52;	author mike;	state Exp;
branches;
next	11.9;

11.9
date	95.11.30.16.18.17;	author jra;	state Exp;
branches;
next	11.8;

11.8
date	95.11.28.21.35.45;	author jra;	state Exp;
branches;
next	11.7;

11.7
date	95.01.04.10.07.26;	author mike;	state Rel4_4;
branches;
next	11.6;

11.6
date	94.11.08.14.49.35;	author jra;	state Exp;
branches;
next	11.5;

11.5
date	94.08.26.10.42.45;	author jra;	state Exp;
branches;
next	11.4;

11.4
date	94.08.22.19.31.32;	author gdurf;	state Exp;
branches;
next	11.3;

11.3
date	94.01.07.15.16.06;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	93.08.18.10.01.10;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	93.06.28.09.56.23;	author jra;	state Exp;
branches;
next	;

11.13.6.1
date	2004.03.17.21.16.30;	author morrison;	state Exp;
branches;
next	;

11.13.8.1
date	2004.03.11.23.41.12;	author morrison;	state Exp;
branches;
next	;

11.13.14.1
date	2004.02.12.19.41.38;	author erikg;	state Exp;
branches;
next	;


desc
@Add a face to a shell
@


11.15
log
@moved to src/iges/
@
text
@/*
 *  Authors -
 *	John R. Anderson
 *
 *  Source -
 *	SLAD/BVLD/VMB
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1993-2004 by the United States Army.
 *	All rights reserved.
 */

#include "./iges_struct.h"
#include "./iges_extern.h"

struct faceuse *
Add_face_to_shell( s , entityno , face_orient )
struct shell *s;
int entityno;
int face_orient;
{ 

	int		sol_num;		/* IGES solid type number */
	int		surf_de;		/* Directory sequence number for underlying surface */
	int		no_of_loops;		/* Number of loops in face */
	int		outer_loop_flag;	/* Indicates if first loop is an the outer loop */
	int		*loop_de;		/* Directory seqence numbers for loops */
	int		loop;
	int		planar=0;
	struct faceuse	*fu;			/* NMG face use */

	/* Acquiring Data */

	if( dir[entityno]->param <= pstart )
	{
		bu_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
				dir[entityno]->direct , dir[entityno]->name );
		return( (struct faceuse *)NULL );
	}

	Readrec( dir[entityno]->param );
	Readint( &sol_num , "" );
	Readint( &surf_de , "" );
	Readint( &no_of_loops , "" );
	Readint( &outer_loop_flag , "" );
	loop_de = (int *)bu_calloc( no_of_loops , sizeof( int ) , "Get_outer_face loop DE's" );
	for( loop=0 ; loop<no_of_loops ; loop++ )
		Readint( &loop_de[loop] , "" );

	/* Check that this is a planar surface */
	if( dir[(surf_de-1)/2]->type == 190 ) /* plane entity */
		planar = 1;
#if 0
	else if( dir[(surf_de-1)/2]->type == 128 )
	{
		/* This is a NURB, but it might still be planar */
		if( dir[(surf_de-1)/2]->form == 1 ) /* planar form */
			planar = 1;
		else if( dir[(surf_de-1)/2]->form == 0 )
		{
			/* They don't want to tell us */
			if( planar_nurb( (surf_de-1)/2 ) )
				planar = 1;
		}
	}
#endif

	if( planar )
	{
		fu = Make_planar_face( s , (loop_de[0]-1)/2 , face_orient );
		if( !fu )
			goto err;
		for( loop=1 ; loop<no_of_loops ; loop++ )
		{
			if( !Add_loop_to_face( s , fu , ((loop_de[loop]-1)/2) , face_orient ))
				goto err;
		}
	}
	else if( dir[(surf_de-1)/2]->type == 128 )
	{
		struct face *f;

		fu = Make_nurb_face( s, (surf_de-1)/2 );
		NMG_CK_FACEUSE( fu );
		if( !face_orient )
		{
			f = fu->f_p;
			NMG_CK_FACE( f );
			f->flip = 1;
		}

NMG_CK_FACE_G_SNURB( fu->f_p->g.snurb_p );
		
		for( loop=0 ; loop<no_of_loops ; loop++ )
		{
			if( !Add_nurb_loop_to_face( s, fu, ((loop_de[loop]-1)/2) , face_orient ))
				goto err;
		}
NMG_CK_FACE_G_SNURB( fu->f_p->g.snurb_p );
	}
	else
	{
		fu = (struct faceuse *)NULL;
		bu_log( "Add_face_to_shell: face at DE%d is neither planar nor NURB, ignoring\n", surf_de );
	}

  err :
	bu_free( (char *)loop_de , "Add_face_to_shell: loop DE's" );
	return( fu );
}
@


11.14
log
@update copyright to include span through 2003
@
text
@@


11.13
log
@
Converted from Release 4 names to know about libbu and libbn
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1993 by the United States Army.
@


11.13.6.1
log
@sync branch with HEAD
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
@


11.13.8.1
log
@sync to HEAD...
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
@


11.13.14.1
log
@merge from HEAD
@
text
@d11 1
a11 1
 *	This software is Copyright (C) 1993-2004 by the United States Army.
@


11.12
log
@All logging done via rt_log
@
text
@d38 1
a38 1
		rt_log( "Illegal parameter pointer for entity D%07d (%s)\n" ,
d48 1
a48 1
	loop_de = (int *)rt_calloc( no_of_loops , sizeof( int ) , "Get_outer_face loop DE's" );
d106 1
a106 1
		rt_log( "Add_face_to_shell: face at DE%d is neither planar nor NURB, ignoring\n", surf_de );
d110 1
a110 1
	rt_free( (char *)loop_de , "Add_face_to_shell: loop DE's" );
@


11.11
log
@Mods for new SNURB struct.
@
text
@d38 1
a38 1
		printf( "Illegal parameter pointer for entity D%07d (%s)\n" ,
@


11.10
log
@LIBNURBS has been converted over to using t-NURBS NMG data structures
@
text
@a32 1
	struct face_g_snurb	*srf;			/* NURB Surface */
d85 1
a85 1
		fu = Make_nurb_face( &srf, s, (surf_de-1)/2 );
d93 2
d98 1
a98 1
			if( !Add_nurb_loop_to_face( s, fu, srf, ((loop_de[loop]-1)/2) , face_orient ))
d101 1
@


11.9
log
@Mods to correctly handle the face orientation.
@
text
@d33 1
a33 1
	struct snurb	*srf;			/* NURB Surface */
@


11.8
log
@Mods to handle TNURB BREP. Also added RT_EXTERNS to iges_struct.h.
@
text
@d84 2
d87 8
@


11.7
log
@Release_4.4
@
text
@a14 17
#include "conf.h"

#include <stdio.h>

#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "vmath.h"
#include "rtlist.h"
#include "rtstring.h"
#include "nmg.h"
#include "raytrace.h"
#include "wdb.h"
a17 4
RT_EXTERN( struct faceuse *Make_face , ( struct shell *s , int entityno , int face_orient ) );
RT_EXTERN( int Add_loop_to_face , (struct shell *s , struct faceuse *fu , int entityno , int face_orient ));
RT_EXTERN( int planar_nurb , ( int entityno ) );

d33 1
d56 1
d69 1
d71 12
a82 1
	if( !planar )
d84 6
a89 2
		rt_log( "Face entity at DE=%d is not planar, object not converted\n" , (entityno*2+1) );
		return( (struct faceuse *)NULL );
d91 1
a91 3

	fu = Make_face( s , (loop_de[0]-1)/2 , face_orient );
	for( loop=1 ; loop<no_of_loops ; loop++ )
d93 2
a94 2
		if( !Add_loop_to_face( s , fu , ((loop_de[loop]-1)/2) , face_orient ))
			goto err;
a95 1

@


11.6
log
@Mods for Irix 6.
@
text
@@


11.5
log
@Cleanup.
@
text
@a53 1
	struct loopuse	*lu;			/* NMG loop use */
@


11.4
log
@Factored ifdefs
@
text
@a18 2
#include "machine.h"
#include "vmath.h"
d24 3
d54 1
d62 1
a62 1
		return(0);
d93 1
a93 1
		return( 0 );
a102 2
	rt_free( (char *)loop_de , "Add_face_to_shell: loop DE's" );
	return( fu );
@


11.3
log
@Modified header files
@
text
@d14 3
d18 1
d21 3
a23 1
#ifdef BSD
a24 2
#else
#include <string.h>
@


11.2
log
@Added check for planar nurbs and correct faceuse orientation
@
text
@a21 2
#include "./iges_struct.h"
#include "./iges_extern.h"
d27 2
@


11.1
log
@Major Upgrade to IGES 5.1
@
text
@d30 3
a32 1
RT_EXTERN( struct faceuse *Make_face , ( struct shell *s , int entityno , int loop_orient) );
d35 1
a35 1
Add_face_to_shell( s , entityno , shell_orient )
d38 1
a38 1
int shell_orient;
a45 1
	int		*loop_orient;		/* Orientation of loops */
d47 1
d62 5
d69 3
a71 1
	if( dir[(surf_de-1)/2]->type  != 190 )
d73 9
a81 2
		rt_log( "Face entity at DE=%d is not planar, object not converted\n" , (entityno*2+1) );
		return( 0 );
d84 1
a84 5
	Readint( &no_of_loops , "" );
	Readint( &outer_loop_flag , "" );
	loop_de = (int *)rt_calloc( no_of_loops , sizeof( int ) , "Get_outer_face loop DE's" );
	loop_orient = (int *)rt_calloc( no_of_loops , sizeof( int ) , "Get_outer_face orients" );
	for( loop=0 ; loop<no_of_loops ; loop++ )
d86 2
a87 2
		Readint( &loop_de[loop] , "" );
		Readint( &loop_orient[loop] , "" );
d90 1
a90 1
	fu = Make_face( s , (loop_de[0]-1)/2 , loop_orient[0] );
d93 1
a93 1
		if( !Add_loop_to_face( fu , (loop_de[loop]-1)/2 , loop_orient[loop] ) )
d97 1
a97 2
	rt_free( (char *)loop_de , "Get_outer_face: loop DE's" );
	rt_free( (char *)loop_orient , "Get_outer_face: loop orients" );
d101 1
a101 2
	rt_free( (char *)loop_de , "Get_outer_face: loop DE's" );
	rt_free( (char *)loop_orient , "Get_outer_face: loop orients" );
@
