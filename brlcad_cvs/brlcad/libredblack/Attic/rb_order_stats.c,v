head	1.6;
access;
symbols
	rel-4-5:1.5
	ctj-4-5-post:1.5
	ctj-4-5-pre:1.5;
locks; strict;
comment	@ * @;


1.6
date	98.12.30.04.24.10;	author mike;	state dead;
branches;
next	1.5;

1.5
date	96.08.27.07.10.51;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	95.09.20.16.00.44;	author pjt;	state Exp;
branches;
next	1.3;

1.3
date	95.09.20.14.25.31;	author pjt;	state Exp;
branches;
next	1.2;

1.2
date	95.09.20.13.54.30;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	95.09.20.12.07.33;	author pjt;	state Exp;
branches;
next	;


desc
@     Routines to support order-statistic operations for a red-black tree
@


1.6
log
@All moved to libbu
@
text
@/*			R B _ O R D E R _ S T A T S . C
 *
 *	Routines to support order-statistic operations for a red-black tree
 *
 *	Author:	Paul Tanenbaum
 *
 */
#ifndef lint
static char RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libredblack/rb_order_stats.c,v 1.5 1996/08/27 07:10:51 mike Exp mike $";
#endif

#include "conf.h"

#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "rtlist.h"
#include "bu.h"
#include "compat4.h"
#include "redblack.h"
#include "./rb_internals.h"

/*		        _ R B _ S E L E C T ( )
 *
 *	Retrieve the element of rank k in one order of a red-black tree
 *
 *	This function has three parameters: the root of the tree to search,
 *	the order on which to do the searching, and the rank of interest.
 *	_rb_select() returns the discovered node.  It is an implemenation
 *	of the routine OS-SELECT on p. 282 of Cormen et al.
 */
static struct rb_node *_rb_select (root, order, k)

struct rb_node	*root;
int		order;
int		k;

{
    int		rank;

    RB_CKMAG(root, RB_NODE_MAGIC, "red-black node");

    rank = rb_size(rb_left_child(root, order), order) + 1;
    if (root -> rbn_tree -> rbt_debug & RB_DEBUG_OS)
	rt_log("_rb_select(<%x>, %d, %d): rank=%d\n",
	    root, order, k, rank);
    
    if (rank == k)
	return (root);
    else if (rank > k)
	return (_rb_select(rb_left_child(root, order), order, k));
    else
	return (_rb_select(rb_right_child(root, order), order, k - rank));
}

/*		        R B _ S E L E C T ( )
 *
 *		Applications interface to _rb_select()
 *
 *	This function has three parameters: the tree in which to search,
 *	the order on which to do the searching, and the rank of interest.
 *	On success, rb_select() returns a pointer to the data block in
 *	the discovered node.  Otherwise, it returns NULL.
 */
void *rb_select (tree, order, k)

rb_tree	*tree;
int	order;
int	k;

{
    struct rb_node	*node;

    RB_CKMAG(tree, RB_TREE_MAGIC, "red-black tree");
    RB_CKORDER(tree, order);

    if ((k < 1) || (k > tree -> rbt_nm_nodes))
    {
	if (tree -> rbt_debug & RB_DEBUG_OS)
	    rt_log("rb_select(<%x>, %d, %d): k out of bounds [1, %d]\n",
		tree, order, k, tree -> rbt_nm_nodes);
	rb_current(tree) = rb_null(tree);
	return (NULL);
    }
    if (tree -> rbt_debug & RB_DEBUG_OS)
	rt_log("rb_select(<%x>, %d, %d): root=<%x>\n",
	    tree, order, k, rb_root(tree, order));

    rb_current(tree) = node = _rb_select(rb_root(tree, order), order, k);
    return (rb_data(node, order));
}

/*		        R B _ R A N K ( )
 *
 *	Determines the rank of a node in one order of a red-black tree
 *
 *	This function has two parameters: the tree in which to search
 *	and the order on which to do the searching.  If the current node
 *	is null, rb_rank() returns 0.  Otherwise, it returns the rank
 *	of the current node in the specified order.  rb_rank() is an
 *	implementation of the routine OS-RANK on p. 283 of Cormen et al.
 */
int rb_rank (tree, order)

rb_tree	*tree;
int	order;

{
    int			rank;
    struct rb_node	*node;
    struct rb_node	*parent;
    struct rb_node	*root;

    RB_CKMAG(tree, RB_TREE_MAGIC, "red-black tree");
    RB_CKORDER(tree, order);

    if ((node = rb_current(tree)) == rb_null(tree))
	return (0);

    root = rb_root(tree, order);
    rank = rb_size(rb_left_child(node, order), order) + 1;
    while (node != root)
    {
	parent = rb_parent(node, order);
	if (node == rb_right_child(parent, order)) 
	    rank += rb_size(rb_left_child(parent, order), order) + 1;
	node = parent;
    }

    return (rank);
}
@


1.5
log
@Changed over to bu.h
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_order_stats.c,v 1.4 1995/09/20 16:00:44 pjt Exp pjt $";
@


1.4
log
@Changed a comment
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_order_stats.c,v 1.3 1995/09/20 14:25:31 pjt Exp pjt $";
d18 2
@


1.3
log
@1. Changed type of _rb_select() from (void *) to (struct rb_node *)
2. rb_select() now checks for k out of bounds and sets rbt_current
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_order_stats.c,v 1.2 1995/09/20 13:54:30 pjt Exp pjt $";
d27 2
a28 3
 *	On success, _rb_select() returns a pointer to the data block in
 *	the discovered node.  Otherwise, it returns NULL.  _rb_select() is
 *	an implementation of the routine OS-SELECT on p. 282 of Cormen et al.
@


1.2
log
@1. Renamed _rb_get_kth() and rb_get_kth()
   _rb_select() and rb_select(), respectively.
2. Fleshed out implementation of rb_rank().
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_order_stats.c,v 1.1 1995/09/20 12:07:33 pjt Exp pjt $";
d31 1
a31 1
static void *_rb_select (root, order, k)
d48 1
a48 1
	return (rb_data(root, order));
d76 8
d88 2
a89 1
    return (_rb_select(rb_root(tree, order), order, k));
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_search.c,v 11.3 1995/07/10 20:17:51 pjt Exp pjt $";
d21 1
a21 1
/*		        _ R B _ G E T _ K T H ( )
d27 3
a29 2
 *	On success, _rb_get_kth() returns a pointer to the data block in
 *	the discovered node.  Otherwise, it returns NULL.
d31 1
a31 1
static void *_rb_get_kth (root, order, k)
d38 1
a38 1
    int			rank;
d44 1
a44 1
	rt_log("_rb_get_kth(<%x>, %d, %d): rank=%d\n",
d50 1
a50 1
	return (_rb_get_kth(rb_left_child(root, order), order, k));
d52 1
a52 1
	return (_rb_get_kth(rb_right_child(root, order), order, k - rank));
d55 1
a55 1
/*		        R B _ G E T _ K T H ( )
d57 1
a57 1
 *		Applications interface to _rb_get_kth()
d61 1
a61 1
 *	On success, rb_get_kth() returns a pointer to the data block in
d64 1
a64 1
void *rb_get_kth (tree, order, k)
d77 1
a77 1
	rt_log("rb_get_kth(<%x>, %d, %d): root=<%x>\n",
d80 1
a80 1
    return (_rb_get_kth(rb_root(tree, order), order, k));
d88 4
a91 2
 *	and the order on which to do the searching.  Rb_rank() returns
 *	the rank of the current node in the specified order.
d99 1
d101 2
d107 1
a107 1
    if (node == rb_null(tree))
d109 12
a120 2
    else
	return (1);
@
