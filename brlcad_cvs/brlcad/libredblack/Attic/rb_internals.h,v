head	11.9;
access;
symbols
	rel-4-5:11.7
	ctj-4-5-post:11.7
	ctj-4-5-pre:11.7
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.9
date	98.12.30.04.24.10;	author mike;	state dead;
branches;
next	11.8;

11.8
date	98.03.19.17.45.43;	author pjt;	state Exp;
branches;
next	11.7;

11.7
date	96.08.31.09.39.13;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	95.09.20.12.03.38;	author pjt;	state Exp;
branches;
next	11.5;

11.5
date	95.09.19.17.44.13;	author pjt;	state Exp;
branches;
next	11.4;

11.4
date	95.07.10.20.19.07;	author pjt;	state Exp;
branches;
next	11.3;

11.3
date	95.04.21.13.33.47;	author pjt;	state Exp;
branches;
next	11.2;

11.2
date	95.04.19.19.04.45;	author pjt;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.05.56;	author mike;	state Rel4_4;
branches;
next	2.2;

2.2
date	94.09.26.08.00.21;	author jra;	state Exp;
branches;
next	2.1;

2.1
date	93.03.25.11.03.24;	author pjt;	state Exp;
branches;
next	1.9;

1.9
date	93.01.21.14.27.28;	author pjt;	state zero_1;
branches;
next	1.8;

1.8
date	93.01.15.13.07.55;	author pjt;	state Exp;
branches;
next	1.7;

1.7
date	93.01.15.10.44.18;	author pjt;	state zero_0;
branches;
next	1.6;

1.6
date	93.01.14.15.03.34;	author pjt;	state Exp;
branches;
next	1.5;

1.5
date	93.01.14.09.29.07;	author pjt;	state Exp;
branches;
next	1.4;

1.4
date	92.11.06.13.49.51;	author pjt;	state Exp;
branches;
next	1.3;

1.3
date	92.11.05.11.31.32;	author pjt;	state Exp;
branches;
next	1.2;

1.2
date	92.11.04.12.16.08;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	92.11.04.10.28.34;	author pjt;	state Exp;
branches;
next	;


desc
@
     Header file for use within LIBREDBLACK(3)

@


11.9
log
@All moved to libbu
@
text
@/*			R B _ I N T E R N A L S . H
 *
 *	The constants, macro functions, etc. need within LIBREDBLACK(3),
 *	the BRL-CAD red-black tree library.
 *
 *	Author:	Paul Tanenbaum
 *
 *  $Header: /c/CVS/brlcad/libredblack/rb_internals.h,v 11.8 1998/03/19 17:45:43 pjt Exp mike $
 */
#include "compat4.h"

#ifndef REDBLACK_H
#include "redblack.h"
#endif

#ifndef RB_INTERNALS_H
#define RB_INTERNALS_H seen

/*			R B _ C K M A G ( )
 *	    Check and validate a structure pointer
 *
 *	This macro has three parameters: a pointer, the magic number
 *	expected at that location, and a string describing the expected
 *	structure type.
 */
#define	RB_CKMAG		BU_CKMAG
#define	RB_NODE_MAGIC		0x72626e6f
#define	RB_PKG_MAGIC		0x7262706b
#define	RB_LIST_MAGIC		0x72626c73

/*			R B _ C K O R D E R ( )
 *
 *	This macro has two parameters: a tree and an order number.
 *	It ensures that the order number is valid for the tree.
 */
#define RB_CKORDER(t, o)					\
    if (((o) < 0) || ((o) >= (t) -> rbt_nm_orders))		\
    {								\
	bu_log(							\
	    "Error: Order %d outside 0..%d (nm_orders-1), file %s, line %d\n", \
	    (o), (t) -> rbt_nm_orders - 1, __FILE__, __LINE__);	\
	exit (0);						\
    }

/*
 *	Access functions for fields of rb_tree
 */
#define	rb_order_func(t, o)	(((t) -> rbt_order)[o])
#define	rb_print(t, p)		(((t) -> rbt_print)((p) -> rbp_data))
#define	rb_root(t, o)		(((t) -> rbt_root)[o])
#define rb_current(t)		((t) -> rbt_current)
#define rb_null(t)		((t) -> rbt_empty_node)
#define	rb_get_uniqueness(t, o)						\
(									\
    (((t) -> rbt_unique)[(o)/8] & (0x1 << ((o) % 8))) ? 1 : 0		\
)
#define	rb_set_uniqueness(t, o, u)					\
{									\
    int	_b = (o) / 8;							\
    int _p = (o) - _b * 8;						\
									\
    ((t) -> rbt_unique)[_b] &= ~(0x1 << _p);				\
    ((t) -> rbt_unique)[_b] |= (u) << _p;				\
}

/*
 *	Access functions for fields of (struct rb_node)
 */
#define	rb_parent(n, o)		(((n) -> rbn_parent)[o])
#define	rb_left_child(n, o)	(((n) -> rbn_left)[o])
#define	rb_right_child(n, o)	(((n) -> rbn_right)[o])
#define	RB_LEFT			0
#define	RB_RIGHT		1
#define	rb_child(n, o, d)	(((d) == RB_LEFT)		? 	\
				    rb_left_child((n), (o))	:	\
				    rb_right_child((n), (o)))
#define	rb_other_child(n, o, d)	(((d) == RB_LEFT)		?	\
				    rb_right_child((n), (o))	:	\
				    rb_left_child((n), (o)))
#define	rb_size(n, o)		(((n) -> rbn_size)[o])
#define	rb_get_color(n, o)						\
(									\
    (((n) -> rbn_color)[(o)/8] & (0x1 << ((o) % 8))) ? 1 : 0		\
)
#define	rb_set_color(n, o, c)						\
{									\
    int	_b = (o) / 8;							\
    int _p = (o) - _b * 8;						\
									\
    ((n) -> rbn_color)[_b] &= ~(0x1 << _p);				\
    ((n) -> rbn_color)[_b] |= (c) << _p;				\
}
#define	RB_RED			0
#define	RB_BLACK		1
#define	rb_data(n, o)		(((n) -> rbn_package)[o] -> rbp_data)

/*
 *	Interface to _rb_walk()
 *	(Valid values for the parameter what_to_walk)
 */
#define	WALK_NODES		0
#define	WALK_DATA		1

/*		    R B _ R O T A T E ( )
 *			    and
 *		R B _ O T H E R _ R O T A T E ( )
 *
 *	These macros have three parameters: the node about which
 *	to rotate, the order to be rotated, and the direction of
 *	rotation.  They allow indirection in the use of _rb_rot_left()
 *	and _rb_rot_right().
 */
#define	rb_rotate(n, o, d)	(((d) == RB_LEFT)		? 	\
				    _rb_rot_left((n), (o))	:	\
				    _rb_rot_right((n), (o)))
#define	rb_other_rotate(n, o, d) (((d) == RB_LEFT)		? 	\
				    _rb_rot_right((n), (o))	:	\
				    _rb_rot_left((n), (o)))

/*
 *	Functions internal to LIBREDBLACK
 */
BU_EXTERN(struct rb_node *_rb_neighbor,	(struct rb_node	*node,
					 int		order,
					 int		sense
					));
BU_EXTERN(void _rb_rot_left,		(struct rb_node	*x,
					 int		order
					));
BU_EXTERN(void _rb_rot_right,		(struct rb_node	*y,
					 int		order
					));
BU_EXTERN(void _rb_walk,		(rb_tree	*tree,
			    		 int		order,
					 void		(*visit)(),
					 int		what_to_visit,
					 int		trav_type
					));
BU_EXTERN(void rb_free_node,		(struct rb_node *node));
BU_EXTERN(void rb_free_package,		(struct rb_package *package));

#endif /* RB_INTERNALS_H */
@


11.8
log
@Deleted made_it() macro, which is now in bu.h
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 11.7 1996/08/31 09:39:13 mike Exp pjt $
@


11.7
log
@Converted to LIBBU
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 11.6 1995/09/20 12:03:38 pjt Exp mike $
a142 4

#define	made_it()	bu_log("Made it to file '%s' line %d\n", \
					__FILE__, __LINE__);

@


11.6
log
@1. Fixed bug in rb_ckorder()
2. Deleted prototype for _rb_search()
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 11.5 1995/09/19 17:44:13 pjt Exp pjt $
d10 1
d26 1
a26 14
#define	RB_CKMAG(p, m, _s)					\
    if ((p) == 0)						\
    {								\
	rt_log("Error: Null %s pointer, file %s, line %d\n",	\
	    (_s), __FILE__, __LINE__);				\
	exit (0);						\
    }								\
    else if (*((long *)(p)) != (m))				\
    {								\
	rt_log(							\
	    "Error: Bad %s pointer x%x s/b x%x was x%x, file %s, line %d\n", \
	    (_s), (p), (m), *((long *)(p)), __FILE__, __LINE__);\
	exit (0);						\
    }
d39 1
a39 1
	rt_log(							\
d123 1
a123 1
RB_EXTERN(struct rb_node *_rb_neighbor,	(struct rb_node	*node,
d127 1
a127 1
RB_EXTERN(void _rb_rot_left,		(struct rb_node	*x,
d130 1
a130 1
RB_EXTERN(void _rb_rot_right,		(struct rb_node	*y,
d133 1
a133 1
RB_EXTERN(void _rb_walk,		(rb_tree	*tree,
d139 2
a140 2
RB_EXTERN(void rb_free_node,		(struct rb_node *node));
RB_EXTERN(void rb_free_package,		(struct rb_package *package));
d144 2
a145 2
#define	made_it()	fprintf(stderr, "Made it to file '%s' line %d\n", \
					__FILE__, __LINE__);fflush(stderr);
@


11.5
log
@Added rb_size() macro
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 11.4 1995/07/10 20:19:07 pjt Exp pjt $
d52 1
a52 1
	    "Error: Order %d outside 0..%d (nm_orders-1), file %s, line %s\n", \
a143 5
					));
RB_EXTERN(struct rb_node *_rb_search,	(struct rb_node	*root,
			    		 int		order_nm,
					 int		(*order)(),
					 void		*data
@


11.4
log
@1.  Implemented struct rb_list, to record all nodes and all packages in
    tree.  This makes rb_free()'s job easier.
2. Implemented rb_free() and rb_free1().
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 11.3 1995/04/21 13:33:47 pjt Exp $
d92 1
@


11.3
log
@Moved RB_TREE_MAGIC from rb_internals.h to ../h/redblack.h
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 11.2 1995/04/19 19:04:45 pjt Exp $
d40 2
a41 1
#define	RB_PKG_MAGIC		0x7262504b
d155 2
@


11.2
log
@Implemented rb_get_uniqueness() and rb_set_uniqueness() macros
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 11.1 95/01/04 10:05:56 mike Rel4_4 $
a38 1
#define	RB_TREE_MAGIC		0x72627472
@


11.1
log
@Release_4.4
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 2.2 94/09/26 08:00:21 jra Exp $
d65 12
@


2.2
log
@PJT modified function declarations to use RT_EXTERN
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 2.1 93/03/25 11:03:24 pjt Exp $
@


2.1
log
@Installed into BRL CAD tree
@
text
@d8 1
a8 1
 *  $Header: /m/cad/libredblack/RCS/rb_internals.h,v 1.9 93/01/21 14:27:28 pjt zero_1 Locker: pjt $
d122 21
a142 26
struct rb_node *_rb_neighbor	(
				    struct rb_node	*node,
				    int			order,
				    int			sense
				);
void _rb_rot_left		(
				    struct rb_node	*x,
				    int order
				);
void _rb_rot_right		(
				    struct rb_node	*y,
				    int order
				);
struct rb_node *_rb_search	(
				    struct rb_node	*root,
				    int			order_nm,
				    int			(*order)(),
				    void		*data
				);
void _rb_walk			(
				    rb_tree		*tree,
				    int			order,
				    void		(*visit)(),
				    int			what_to_visit,
				    int			trav_type
				);
@


1.9
log
@1. Added prototypes for _rb_rot_left() and _rb_rot_right()
2. Moved defns of rb_rotate() and rb_other_rotate() from rb_delete.c
3. Fixed bug in rb_set_color()
@
text
@d8 1
a8 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_internals.h,v 1.8 93/01/15 13:07:55 pjt Exp Locker: pjt $
@


1.8
log
@Added comments and performed general clean up
@
text
@d8 1
a8 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_internals.h,v 1.7 93/01/15 10:44:18 pjt Exp Locker: pjt $
d89 1
a89 2
    RB_CKMAG((n), RB_NODE_MAGIC, "red-black node");			\
    ((n) -> rbn_color)[_b] &= 0x1 << _p;				\
d103 16
d127 8
d150 4
@


1.7
log
@1. Removed prototype info for functions in rb_rotate()
2. Added traversal type to _rb_walk()
@
text
@d3 2
a4 1
 *	Written by:	Paul Tanenbaum
d6 3
a8 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_internals.h,v 1.6 93/01/14 15:03:34 pjt Exp Locker: pjt $
d25 10
a34 10
#define	RB_CKMAG(p, m, _s)						\
    if ((p) == 0)							\
    {									\
	fprintf(stderr, "Error: Null %s pointer, file %s, line %d\n",	\
	    (_s), __FILE__, __LINE__);					\
	exit (0);							\
    }									\
    else if (*((long *)(p)) != (m))					\
    {									\
	fprintf(stderr,							\
d36 2
a37 2
	    (_s), (p), (m), *((long *)(p)), __FILE__, __LINE__);	\
	exit (0);							\
d48 4
a51 4
#define RB_CKORDER(t, o)						\
    if (((o) < 0) || ((o) >= (t) -> rbt_nm_orders))			\
    {									\
	fprintf(stderr,							\
d53 2
a54 2
	    (o), (t) -> rbt_nm_orders - 1, __FILE__, __LINE__);		\
	exit (0);							\
d58 1
a58 1
 *	Access functions for fields of rb_tree and (struct rb_node)
d61 1
d63 6
a71 1
#define	rb_data(n, o)		(((n) -> rbn_package)[o] -> rbp_data)
d95 1
a95 3
#define rb_current(t)		((t) -> rbt_current)
#define rb_null(t)		((t) -> rbt_empty_node)
#define	rb_print(t,p)		(((t) -> rbt_print)((p) -> rbp_data))
@


1.6
log
@1. Updated rb_data() to use rbn_package
2. Implemented rb_print() macro
3. replaced global (struct rb_node *) current_node with rb_current()
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_internals.h,v 1.5 93/01/14 09:29:07 pjt Exp Locker: pjt $
a74 1

d91 7
d100 5
d111 2
a112 16
void left_rotate		(
				    struct rb_node	*node,
				    int			order
				);
void right_rotate		(
				    struct rb_node	*node,
				    int			order
				);
#define	rb_rotate(n, o, d)	(((d) == RB_LEFT)		? 	\
				    left_rotate((n), (o))	:	\
				    right_rotate((n), (o)))
#define	rb_other_rotate(n, o, d) (((d) == RB_LEFT)		? 	\
				    right_rotate((n), (o))	:	\
				    left_rotate((n), (o)))
struct rb_node *_rb_neighbor	(
				    struct rb_node	*node,
d114 3
a116 1
				    int			sense
@


1.5
log
@1. Implemented rb_null() and rb_data()
2. Added prototype for _rb_search() and _rb_neighbor()
3. Implemented rb_rotate() and rb_other_rotate()
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_internals.h,v 1.4 92/11/06 13:49:51 pjt Exp Locker: pjt $
d38 1
d62 1
a62 1
#define	rb_data(n, o)		(((n) -> rbn_data)[o])
d87 1
d89 1
a89 9

/*
 *	Global variables within LIBREDBLACK
 */
#ifdef RB_CREATE
    struct rb_node		*current_node = RB_NODE_NULL;
#else
    extern struct rb_node	*current_node;
#endif
@


1.4
log
@Added left_rotate() and right_rotate().
Also implemented rb_child() and rb_other_child().
These last two may never be used.  May can them later.
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_internals.h,v 1.3 92/11/05 11:31:32 pjt Exp Locker: pjt $
d61 1
d86 1
d100 25
a124 8
void left_rotate	(
			    struct rb_node	*node,
			    int			order
			);
void right_rotate	(
			    struct rb_node	*node,
			    int			order
			);
@


1.3
log
@Implemented access function rb_root()
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_internals.h,v 1.2 92/11/04 12:16:08 pjt Exp Locker: pjt $
a14 8
/*
 *	Macros without parameters
 */
#define		RB_RED		0
#define		RB_BLACK	1
#define		RB_TREE_MAGIC	0x72627472
#define		RB_NODE_MAGIC	0x72626e6f

d36 2
d61 8
d83 2
d98 8
@


1.2
log
@Implemented RB_CKORDER()
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_internals.h,v 1.1 92/11/04 10:28:34 pjt Exp Locker: pjt $
d63 1
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *  $Header: /m/cad/h/RCS/raytrace.h,v 10.1 91/10/12 06:35:30 mike Rel4_0 $
d40 1
a40 1
	    "Error Bad %s pointer x%x s/b x%x was x%x, file %s, line %d\n", \
d43 15
a57 1
    }									\
@
