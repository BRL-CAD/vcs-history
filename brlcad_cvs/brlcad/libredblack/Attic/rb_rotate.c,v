head	11.6;
access;
symbols
	rel-4-5:11.5
	ctj-4-5-post:11.5
	ctj-4-5-pre:11.5
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.6
date	98.12.30.04.24.10;	author mike;	state dead;
branches;
next	11.5;

11.5
date	96.08.27.07.10.51;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	95.09.20.12.08.38;	author pjt;	state Exp;
branches;
next	11.3;

11.3
date	95.07.10.20.17.51;	author pjt;	state Exp;
branches;
next	11.2;

11.2
date	95.04.19.19.04.33;	author pjt;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.05.57;	author mike;	state Rel4_4;
branches;
next	2.5;

2.5
date	94.12.30.16.41.04;	author stay;	state Exp;
branches;
next	2.4;

2.4
date	94.09.26.12.21.10;	author jra;	state Exp;
branches;
next	2.3;

2.3
date	94.09.22.15.34.47;	author pjt;	state Exp;
branches;
next	2.2;

2.2
date	94.09.22.15.27.09;	author pjt;	state Exp;
branches;
next	2.1;

2.1
date	93.03.25.11.03.26;	author pjt;	state Exp;
branches;
next	1.5;

1.5
date	93.03.25.11.00.25;	author pjt;	state Exp;
branches;
next	1.4;

1.4
date	93.01.22.10.01.46;	author pjt;	state zero_1;
branches;
next	1.3;

1.3
date	93.01.14.10.52.35;	author pjt;	state Exp;
branches;
next	1.2;

1.2
date	93.01.14.09.28.15;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	92.11.06.13.53.51;	author pjt;	state Exp;
branches;
next	;


desc
@
     Left- and right-rotation routines for red-black trees

@


11.6
log
@All moved to libbu
@
text
@/*			R B _ R O T A T E . C
 *
 *	    Routines to perform rotations on a red-black tree
 *
 *	Author:	Paul Tanenbaum
 *
 */
#ifndef lint
static char RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libredblack/rb_rotate.c,v 11.5 1996/08/27 07:10:51 mike Exp mike $";
#endif

#include "conf.h"

#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "rtlist.h"
#include "bu.h"
#include "compat4.h"
#include "redblack.h"
#include "./rb_internals.h"

/*		    _ R B _ R O T _ L E F T ( )
 *
 *		Perfrom left rotation on a red-black tree
 *
 *	This function has two parameters: the node about which to rotate
 *	and the order to be rotated.  _rb_rot_left() is an implementation
 *	of the routine called LEFT-ROTATE on p. 266 of Cormen et al,
 *	with modification on p. 285.
 */
void _rb_rot_left (x, order)

struct rb_node	*x;
int		order;

{
    struct rb_node	*y;		/* x's child to pivot up */
    struct rb_node	*beta;		/* y's child in direction of rot. */
    struct rb_node	*x_parent;	/* x's parent */
    rb_tree		*tree = x -> rbn_tree;	/* Tree where it all happens */

    /*
     *	Set y and check data types of both x and y
     */
    RB_CKMAG(x, RB_NODE_MAGIC, "red-black node");
    RB_CKORDER(x -> rbn_tree, order);

    y = rb_right_child(x, order);

    if (tree -> rbt_debug & RB_DEBUG_ROTATE)
	rt_log("_rb_rot_left(<%x>, %d)...\n", x, order);

    rb_right_child(x, order) = beta = rb_left_child(y, order);
    if (beta != rb_null(tree))
	rb_parent(beta, order) = x;
    rb_parent(y, order) = x_parent = rb_parent(x, order);
    if (x_parent == rb_null(tree))
	rb_root(tree, order) = y;
    else if (x == rb_left_child(x_parent, order))
	rb_left_child(x_parent, order) = y;
    else
	rb_right_child(x_parent, order) = y;
    rb_left_child(y, order) = x;
    rb_parent(x, order) = y;

    rb_size(y, order) = rb_size(x, order);
    rb_size(x, order) =
	rb_size(rb_left_child(x, order), order) +
	rb_size(rb_right_child(x, order), order) + 1;
    if (tree -> rbt_debug & RB_DEBUG_OS)
	rt_log("After rotation, size(%x, %d)=%d, size(%x, %d)=%d\n",
	    x, order, rb_size(x, order), y, order, rb_size(y, order));
}

/*		    _ R B _ R O T _ R I G H T ( )
 *
 *		Perfrom right rotation on a red-black tree
 *
 *	This function has two parameters: the node about which to rotate
 *	and the order to be rotated.  _rb_rot_right() is hacked from
 *	_rb_rot_left() above.
 */
void _rb_rot_right (y, order)

struct rb_node	*y;
int		order;

{
    struct rb_node	*x;		/* y's child to pivot up */
    struct rb_node	*beta;		/* x's child in direction of rot. */
    struct rb_node	*y_parent;	/* y's parent */
    rb_tree		*tree = y -> rbn_tree;	/* Tree where it all happens */

    /*
     *	Set x and check data types of both x and y
     */
    RB_CKMAG(y, RB_NODE_MAGIC, "red-black node");
    RB_CKORDER(y -> rbn_tree, order);

    x = rb_left_child(y, order);

    if (tree -> rbt_debug & RB_DEBUG_ROTATE)
	rt_log("_rb_rot_right(<%x>, %d)...\n", y, order);

    rb_left_child(y, order) = beta = rb_right_child(x, order);
    if (beta != rb_null(tree))
	rb_parent(beta, order) = y;
    rb_parent(x, order) = y_parent = rb_parent(y, order);
    if (y_parent == rb_null(tree))
	rb_root(tree, order) = x;
    else if (y == rb_left_child(y_parent, order))
	rb_left_child(y_parent, order) = x;
    else
	rb_right_child(y_parent, order) = x;
    rb_right_child(x, order) = y;
    rb_parent(y, order) = x;

    rb_size(x, order) = rb_size(y, order);
    rb_size(y, order) =
	rb_size(rb_left_child(y, order), order) +
	rb_size(rb_right_child(y, order), order) + 1;
    if (tree -> rbt_debug & RB_DEBUG_OS)
	rt_log("After rotation, size(%x, %d)=%d, size(%x, %d)=%d\n",
	    x, order, rb_size(x, order), y, order, rb_size(y, order));
}
@


11.5
log
@Changed over to bu.h
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 11.4 1995/09/20 12:08:38 pjt Exp pjt $";
@


11.4
log
@Added maintenance of rbn_size member of struct rb_node
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 11.3 1995/07/10 20:17:51 pjt Exp pjt $";
d18 2
@


11.3
log
@Must now include rtlist.h before redblack.h
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 11.2 1995/04/19 19:04:33 pjt Exp $";
d27 2
a28 1
 *	of the routine called LEFT-ROTATE on p. 266 of Cormen et al.
d64 8
d116 8
@


11.2
log
@ Added debug prints controlled by rbt_debug
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 11.1 95/01/04 10:05:57 mike Rel4_4 $";
d17 1
@


11.1
log
@Release_4.4
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.5 94/12/30 16:41:04 stay Exp $";
d16 1
d47 3
d90 3
@


2.5
log
@deleted reference to stdlib, it wil be included in conf.h if
it exists or is STDC
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.4 1994/09/26 12:21:10 jra Exp stay $";
@


2.4
log
@Added #include "conf.h"
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.3 94/09/22 15:34:47 pjt Exp Locker: jra $";
a13 1
#include <stdlib.h>
@


2.3
log
@Changed "#include "rt_internals.h" to "#include "./rt_internals.h"
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.2 94/09/22 15:27:09 pjt Exp Locker: pjt $";
d11 2
@


2.2
log
@Replaced prototype-type definition with K&R type
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.1 93/03/25 11:03:26 pjt Exp $";
d16 1
a16 1
#include "rb_internals.h"
@


2.1
log
@Installed into BRL CAD tree
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 1.5 93/03/25 11:00:25 pjt Exp Locker: pjt $";
d26 5
a30 1
void _rb_rot_left (struct rb_node *x, int order)
d67 5
a71 1
void _rb_rot_right (struct rb_node *y, int order)
@


1.5
log
@Added authorship comment
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 1.4 93/01/22 10:01:46 pjt zero_1 Locker: pjt $";
@


1.4
log
@Pulled them back out of rb_delete.c and changed their names
to _rb_rot_left() and _rb_rot_right()
@
text
@d5 2
d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /arl/pjt/libredblack/RCS/rb_rotate.c,v 1.1 93/01/21 14:28:47 pjt Exp Locker: pjt $";
@


1.3
log
@1. Added calls to RB_CKORDER()
2. Removed superfluous (?) calls to RB_CKMAG()
@
text
@d3 1
a3 1
 *	Written by:	Paul Tanenbaum
a4 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_rotate.c,v 1.2 93/01/14 09:28:15 pjt Exp Locker: pjt $
d6 3
d16 1
a16 1
/*		    L E F T _ R O T A T E ( )
d21 2
a22 3
 *	and the order to be rotated.  The bulk of this code is from
 *	T. H. Cormen, C. E. Leiserson, and R. L. Rivest.  _Introduction
 *	to Algorithms_.  Cambridge, MA: MIT Press, 1990. p. 266.
d24 1
a24 1
void left_rotate (struct rb_node *x, int order)
d53 1
a53 1
/*		    R I G H T _ R O T A T E ( )
d58 2
a59 2
 *	and the order to be rotated.  This function is hacked from
 *	left_rotate() above.
d61 1
a61 1
void right_rotate (struct rb_node *y, int order)
@


1.2
log
@Now use rb_null()
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_rotate.c,v 1.1 92/11/06 13:53:51 pjt Exp Locker: pjt $
d34 2
a36 1
    RB_CKMAG(y, RB_NODE_MAGIC, "red-black node");
d71 2
a73 1
    RB_CKMAG(x, RB_NODE_MAGIC, "red-black node");
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_create.c,v 1.3 92/11/05 11:29:30 pjt Exp Locker: pjt $
d38 1
a38 1
    if (beta != RB_NODE_NULL)
d41 1
a41 1
    if (x_parent == RB_NODE_NULL)
d74 1
a74 1
    if (beta != RB_NODE_NULL)
d77 1
a77 1
    if (y_parent == RB_NODE_NULL)
@
