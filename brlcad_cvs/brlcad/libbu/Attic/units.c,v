head	1.19;
access;
symbols
	ansi-20040405-merged:1.15.2.2
	postmerge-20040405-ansi:1.17
	premerge-20040404-ansi:1.16
	postmerge-autoconf:1.16
	autoconf-freeze:1.15.10.2
	premerge-autoconf:1.16
	ansi-20040316-freeze:1.15.2.1
	postmerge-20040315-windows:1.16
	premerge-20040315-windows:1.16
	windows-20040315-freeze:1.15.4.1
	autoconf-20031203:1.15
	autoconf-20031202:1.15
	autoconf-branch:1.15.0.10
	phong-branch:1.15.0.8
	photonmap-branch:1.15.0.6
	rel-6-1-DP:1.15
	windows-branch:1.15.0.4
	rel-6-0-2:1.13
	ansi-branch:1.15.0.2
	rel-6-0-1-branch:1.13.0.2
	hartley-6-0-post:1.14
	hartley-6-0-pre:1.13
	rel-6-0-1:1.13
	rel-6-0:1.13
	rel-5-4:1.11
	offsite-5-3-pre:1.12
	rel-5-3:1.11
	rel-5-2:1.11
	rel-5-1-branch:1.11.0.2
	rel-5-1:1.11
	rel-5-0:1.6
	rel-5-0-beta:1.5
	rel-4-5:1.5
	ctj-4-5-post:1.5
	ctj-4-5-pre:1.5;
locks; strict;
comment	@ * @;


1.19
date	2004.05.21.18.06.25;	author morrison;	state dead;
branches;
next	1.18;

1.18
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.05.07.46.16;	author morrison;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.02.17.39.07;	author morrison;	state Exp;
branches;
next	1.15;

1.15
date	2002.08.20.17.07.42;	author jra;	state Exp;
branches
	1.15.2.1
	1.15.4.1
	1.15.10.1;
next	1.14;

1.14
date	2002.08.15.20.54.55;	author hartley;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.20.22.29.07;	author morrison;	state Exp;
branches;
next	1.12;

1.12
date	2000.07.07.05.20.14;	author cjohnson;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.28.18.55.11;	author mike;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.07.04.38.32;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.07.04.21.48;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.07.02.14.30;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.22.52.34;	author bparker;	state Exp;
branches;
next	1.6;

1.6
date	99.07.02.18.58.50;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	97.06.13.23.32.25;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	97.06.03.16.03.59;	author pjt;	state Exp;
branches;
next	1.3;

1.3
date	97.05.21.01.08.03;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	97.04.27.08.34.48;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	97.04.01.20.22.16;	author butler;	state Exp;
branches;
next	;

1.15.2.1
date	2002.09.19.18.01.14;	author morrison;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2004.03.17.21.16.51;	author morrison;	state Exp;
branches;
next	;

1.15.4.1
date	2004.03.11.23.41.50;	author morrison;	state Exp;
branches;
next	;

1.15.10.1
date	2004.02.12.18.39.19;	author erikg;	state Exp;
branches;
next	1.15.10.2;

1.15.10.2
date	2004.03.15.14.06.17;	author erikg;	state Exp;
branches;
next	;


desc
@Units manipulation routines
@


1.19
log
@moved to src/
@
text
@/*
 *			U N I T S . C
 * 
 *  Module of libbu to handle units conversion between strings and mm.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char libbu_units_RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libbu/units.c,v 1.18 2004/05/10 15:30:44 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <ctype.h>

#ifdef HAVE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include "machine.h"
#include "externs.h"	/* needed for things like strtod() */
#include "bu.h"

static const struct cvt_tab {
	double	val;
	char	name[32];
} bu_units_tab[] = {
	{0.0,		"none"},
	{1.0e-7,	"angstrom"},
	{1.0e-7,	"decinanometer"},
	{1.0e-6,	"nm"},
	{1.0e-6,	"nanometer"},
	{1.0e-3,	"um"},
	{1.0e-3,	"micrometer"},
	{1.0e-3,	"micron"},
	{1.0,		"mm"},
	{1.0,		"millimeter"},
	{10.0,		"cm"},
	{10.0,		"centimeter"},
	{1000.0,	"m"},
	{1000.0,	"meter"},
	{1000000.0,	"km"},
	{1000000.0,	"kilometer"},
	{25.4,		"in"},
	{25.4,		"inch"},
	{25.4,		"inche"},		/* for plural */
	{304.8,		"ft"},
	{304.8,		"foot"},
	{304.8,		"feet"},
	{456.2,		"cubit"},
	{914.4,		"yd"},
	{914.4,		"yard"},
	{5029.2,	"rd"},
	{5029.2,	"rod"},
	{1609344.0,	"mi"},
	{1609344.0,	"mile"},
	{1852000.0,	"nmile"},
	{1852000.0,	"nautical mile"},
	{1.495979e+14,	"AU"},
	{1.495979e+14,	"astronomical unit"},
	{9.460730e+18,	"lightyear"},
	{3.085678e+19,	"pc"},
	{3.085678e+19,	"parsec"},
	{0.0,		""}			/* LAST ENTRY */
};
#define BU_UNITS_TABLE_SIZE (sizeof(bu_units_tab) / sizeof(struct cvt_tab) - 1)

/*
 *			B U _ U N I T S _ C O N V E R S I O N
 *
 *  Given a string representation of a unit of distance (eg, "feet"),
 *  return the multiplier which will convert that unit into millimeters.
 *
 *  Returns -
 *	0.0	error
 *	>0.0	success
 */
double
bu_units_conversion(const char *str)
{
	register char	*ip;
	register int	c;
	register const struct cvt_tab	*tp;
	char		ubuf[256];
	int		len;

	strncpy( ubuf, str, sizeof(ubuf)-1 );
	ubuf[sizeof(ubuf)-1] = '\0';

	/* Copy the given string, making it lower case */
	ip = ubuf;
	while( (c = *ip) )  {
		if( !isascii(c) )
			*ip++ = '_';
		else if( isupper(c) )
			*ip++ = tolower(c);
		else
			ip++;
	}

	/* Remove any trailing "s" (plural) */
	len = strlen(ubuf);
	if( ubuf[len-1] == 's' )  ubuf[len-1] = '\0';

	/* Search for this string in the table */
	for( tp=bu_units_tab; tp->name[0]; tp++ )  {
		if( ubuf[0] != tp->name[0] )  continue;
		if( strcmp( ubuf, tp->name ) != 0 )  continue;
		return( tp->val );
	}
	return(0.0);		/* Unable to find it */
}

/*
 *			B U _ U N I T S _ S T R I N G
 *
 *  Given a conversion factor to mm, search the table to find
 *  what unit this represents.
 *  To accomodate floating point fuzz, a "near miss" is allowed.
 *  The algorithm depends on the table being sorted small-to-large.
 *
 *  Returns -
 *	char*	units string
 *	NULL	No known unit matches this conversion factor.
 */
const char *
bu_units_string(register const double mm)
{
	register const struct cvt_tab	*tp;

	if( mm <= 0 )  return (char *)NULL;

	/* Search for this string in the table */
	for( tp=bu_units_tab; tp->name[0]; tp++ )  {
		fastf_t	diff, bigger;
		if( mm == tp->val )  return tp->name;

		/* Check for near-miss */
		if( mm > tp->val )  {
			bigger = mm;
			diff = mm - tp->val;
		}  else  {
			bigger = tp->val;
			diff = tp->val - mm;
		}

		/* Absolute difference less than 0.1 angstrom */
		if( diff < 1.0e-8 )  return tp->name;

		/* Relative difference less than 1 part per billion */
		if( diff < 0.000000001 * bigger )  return tp->name;
	}
	return (char *)NULL;
}

/*
 *			B U _ M M _ V A L U E
 *
 * Given a string of the form "25cm" or "5.2ft" returns the 
 * corresponding distance in mm.
 *
 *  Returns -
 *	-1	on error
 *	>0	on success
 */
double
bu_mm_value(const char *s)
{
	double v;
	char *ptr;	
	register const struct cvt_tab	*tp;

	v = strtod(s, &ptr);

	if (ptr == s)  {
		/* No number could be found, unity is implied */
		/* e.g. interprept "ft" as "1ft" */
		v = 1.0;
	}
	if ( ! *ptr)  {
		/* There are no characters following the scaned number */
		return v;
	}

	for (tp=bu_units_tab; tp->name[0]; tp++ )  {
		if( *ptr != tp->name[0] )  continue;
		if( strcmp( ptr, tp->name ) == 0 ) {
			v *= tp->val;
			return v;
		}
	}

	/* A string was seen, but not found in the table.  Signal error */
	return -1;
}

/*	B U _ M M _ C V T
 *
 *  Used primarily as a hooked function for bu_structparse tables
 *  to allow input of floating point values in other units.
 */
void
bu_mm_cvt(register const struct bu_structparse *sdp, register const char *name, char *base, const char *value)
                                    	     	/* structure description */
                   			      	/* struct member name */
    					      	/* begining of structure */
          				       	/* string containing value */
{
	register double *p = (double *)(base+sdp->sp_offset);

	/* reconvert with optional units */
	*p = bu_mm_value(value);
}
@


1.18
log
@change conf.h to a wrapped config.h
@
text
@d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /cvs/brlcad/libbu/units.c,v 1.17 2004/04/05 07:46:16 morrison Exp $ (BRL)";
@


1.17
log
@merge of ansi-6-0-branch into HEAD
@
text
@d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header$ (BRL)";
d22 5
a26 1
#include "conf.h"
@


1.16
log
@update copyright to include span through 2003
@
text
@d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.15 2002/08/20 17:07:42 jra Exp $ (BRL)";
d92 1
a92 2
bu_units_conversion(str)
const char	*str;
d140 1
a140 2
bu_units_string(mm)
register const double	mm;
d180 1
a180 2
bu_mm_value(s)
const char *s;
d216 5
a220 5
bu_mm_cvt( sdp, name, base, value )
register const struct bu_structparse	*sdp;	/* structure description */
register const char			*name;	/* struct member name */
char					*base;	/* begining of structure */
const char				*value;	/* string containing value */
@


1.15
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1990 by the United States Army.
d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.13 2001/04/20 22:29:07 morrison Exp $ (BRL)";
@


1.15.4.1
log
@sync to HEAD...
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/libbu/units.c,v 1.16 2004/02/02 17:39:07 morrison Exp $ (BRL)";
@


1.15.10.1
log
@merge from HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.16 2004/02/02 17:39:07 morrison Exp $ (BRL)";
@


1.15.10.2
log
@merge from head
@
text
@d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.15.10.1 2004/02/12 18:39:19 erikg Exp $ (BRL)";
@


1.15.2.1
log
@Initial ANSIfication
@
text
@d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.15 2002/08/20 17:07:42 jra Exp $ (BRL)";
d92 2
a93 1
bu_units_conversion(const char *str)
d141 2
a142 1
bu_units_string(register const double mm)
d182 2
a183 1
bu_mm_value(const char *s)
d219 5
a223 5
bu_mm_cvt(register const struct bu_structparse *sdp, register const char *name, char *base, const char *value)
                                    	     	/* structure description */
                   			      	/* struct member name */
    					      	/* begining of structure */
          				       	/* string containing value */
@


1.15.2.2
log
@sync branch with HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header$ (BRL)";
@


1.14
log
@Converted from K&R to ANSI C - RFH
@
text
@d92 2
a93 1
bu_units_conversion(const char *str)
d141 2
a142 1
bu_units_string(register const double mm)
d182 2
a183 1
bu_mm_value(const char *s)
d219 5
a223 5
bu_mm_cvt(register const struct bu_structparse *sdp, register const char *name, char *base, const char *value)
                                    	     	/* structure description */
                   			      	/* struct member name */
    					      	/* begining of structure */
          				       	/* string containing value */
@


1.13
log
@CONST to const
@
text
@d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.12 2000/07/07 05:20:14 cjohnson Exp $ (BRL)";
d92 1
a92 2
bu_units_conversion(str)
const char	*str;
d140 1
a140 2
bu_units_string(mm)
register const double	mm;
d180 1
a180 2
bu_mm_value(s)
const char *s;
d216 5
a220 5
bu_mm_cvt( sdp, name, base, value )
register const struct bu_structparse	*sdp;	/* structure description */
register const char			*name;	/* struct member name */
char					*base;	/* begining of structure */
const char				*value;	/* string containing value */
@


1.12
log
@LINT
@
text
@d19 1
a19 1
static const char libbu_units_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.11 2000/03/28 18:55:11 mike Exp $ (BRL)";
d37 1
a37 1
static CONST struct cvt_tab {
d93 1
a93 1
CONST char	*str;
d97 1
a97 1
	register CONST struct cvt_tab	*tp;
d140 1
a140 1
CONST char *
d142 1
a142 1
register CONST double	mm;
d144 1
a144 1
	register CONST struct cvt_tab	*tp;
d183 1
a183 1
CONST char *s;
d187 1
a187 1
	register CONST struct cvt_tab	*tp;
d220 2
a221 2
register CONST struct bu_structparse	*sdp;	/* structure description */
register CONST char			*name;	/* struct member name */
d223 1
a223 1
CONST char				*value;	/* string containing value */
@


1.11
log
@
Put libbu_filename_ prefixes on RCSid variables.
@
text
@d19 1
a19 1
static char libbu_units_RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.10 2000/01/07 04:38:32 mike Exp $ (BRL)";
d27 6
d41 37
a77 37
	0.0,		"none",
	1.0e-7,		"angstrom",
	1.0e-7,		"decinanometer",
	1.0e-6,		"nm",
	1.0e-6,		"nanometer",
	1.0e-3,		"um",
	1.0e-3,		"micrometer",
	1.0e-3,		"micron",
	1.0,		"mm",
	1.0,		"millimeter",
	10.0,		"cm",
	10.0,		"centimeter",
	1000.0,		"m",
	1000.0,		"meter",
	1000000.0,	"km",
	1000000.0,	"kilometer",
	25.4,		"in",
	25.4,		"inch",
	25.4,		"inche",		/* for plural */
	304.8,		"ft",
	304.8,		"foot",
	304.8,		"feet",
	456.2,		"cubit",
	914.4,		"yd",
	914.4,		"yard",
	5029.2,		"rd",
	5029.2,		"rod",
	1609344.0,	"mi",
	1609344.0,	"mile",
	1852000.0,	"nmile",
	1852000.0,	"nautical mile",
	1.495979e+14,	"AU",
	1.495979e+14,	"astronomical unit",
	9.460730e+18,	"lightyear",
	3.085678e+19,	"pc",
	3.085678e+19,	"parsec",
	0.0,		""			/* LAST ENTRY */
@


1.10
log
@
Added one missing unit from NIRT's table
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.9 2000/01/07 04:21:48 mike Exp $ (BRL)";
@


1.9
log
@
Made local buffer larger.  A large number followed by a unit string
might use a lot of space.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.8 2000/01/07 02:14:30 mike Exp $ (BRL)";
d37 1
@


1.8
log
@
Improved version of bu_units_string()
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.7 2000/01/06 22:52:34 bparker Exp $ (BRL)";
d91 1
a91 1
	char		ubuf[64];
@


1.7
log
@*- new macro BU_UNITS_TABLE_SIZE
*- added entry to bn_units_tab
*- new commands bu_units_id_string and bu_units_id_valid
   (currently if'ed out)
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.6 1999/07/02 18:58:50 mike Exp $ (BRL)";
d121 12
d139 2
d143 17
a159 2
		if( mm != tp->val )  continue;
		return( tp->name );
d161 1
a161 1
	return (char *)0;
d164 9
a172 2
/* Given a string of the form "25cm" or "5.2ft" returns the 
 * corresponding distance in mm
d184 9
a192 2
	if (ptr == s) return 0.0;
	if ( ! *ptr) return v;
d198 1
a198 1
			break;
d202 2
a203 1
	return v;
d205 1
a222 22

#if 0
CONST char *
bu_units_id_string(id)
	int id;
{
	if (id >= BU_UNITS_TABLE_SIZE)
		return bu_units_tab[0].name; /* none */

	return bu_units_tab[id].name;
}

int
bu_units_id_valid(id)
	int id;
{
	if (0 <= id && id < BU_UNITS_TABLE_SIZE)
		return 1;	/* valid */

	return 0;		/* not valid */
}
#endif
@


1.6
log
@
Removed commented-out includes, to stop fooling my greps
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libbu/units.c,v 1.5 1997/06/13 23:32:25 mike Exp $ (BRL)";
d35 1
d70 1
a70 1
	0.0,		"",			/* LAST ENTRY */
d72 1
d178 22
@


1.5
log
@Fixed rt_ into bu_
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/libbu/RCS/units.c,v 1.4 1997/06/03 16:03:59 pjt Exp mike $ (BRL)";
a29 5
/* 
#include "vmath.h"

#include "raytrace.h"
*/
@


1.4
log
@Added units um, km, yd, mi, and other minor improvements
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/libbu/RCS/units.c,v 1.3 1997/05/21 01:08:03 butler Exp $ (BRL)";
d179 1
a179 1
	*p = rt_mm_value(value);
@


1.3
log
@added bu_mm_cvt() to support shaders in rt
@
text
@d4 1
a4 1
 *  Module of librt to handle units conversion between strings and mm.
d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/libbu/RCS/units.c,v 1.2 1997/04/27 08:34:48 butler Exp butler $ (BRL)";
d41 1
a41 1
	1.0e-7,		"decinanometer",
d43 2
a44 1
	1.0e-6,		"nm",
a45 1
	1.0e-3,		"micrometer",
d69 1
a69 1
	1.495979e+14,	"au",
d71 2
a72 1
	9.460530e+18,	"lightyear",
@


1.2
log
@must include "externs.h" for strtod()
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/libbu/RCS/units.c,v 1.1 1997/04/01 20:22:16 butler Exp butler $ (BRL)";
d29 1
d162 17
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/librt/RCS/units.c,v 11.4 1996/08/27 06:41:18 mike Exp $ (BRL)";
d28 1
d31 1
a31 1
#include "externs.h"
@
