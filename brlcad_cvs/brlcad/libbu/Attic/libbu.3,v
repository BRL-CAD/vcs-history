head	1.6;
access;
symbols
	ansi-20040405-merged:1.4.6.1
	postmerge-20040405-ansi:1.5
	premerge-20040404-ansi:1.5
	postmerge-autoconf:1.5
	autoconf-freeze:1.5
	premerge-autoconf:1.5
	ansi-20040316-freeze:1.4
	postmerge-20040315-windows:1.5
	premerge-20040315-windows:1.5
	windows-20040315-freeze:1.4.8.1
	autoconf-20031203:1.5
	autoconf-20031202:1.5
	autoconf-branch:1.5.0.6
	phong-branch:1.5.0.4
	photonmap-branch:1.5.0.2
	rel-6-1-DP:1.4
	windows-branch:1.4.0.8
	rel-6-0-2:1.4
	ansi-branch:1.4.0.6
	rel-6-0-1-branch:1.4.0.4
	hartley-6-0-post:1.4
	hartley-6-0-pre:1.4
	rel-6-0-1:1.4
	rel-6-0:1.4
	rel-5-4:1.4
	offsite-5-3-pre:1.4
	rel-5-3:1.4
	rel-5-2:1.4
	rel-5-1-branch:1.4.0.2
	rel-5-1:1.4
	rel-5-0:1.4
	rel-5-0-beta:1.4
	rel-4-5:1.3
	ctj-4-5-post:1.3
	ctj-4-5-pre:1.3;
locks; strict;
comment	@# @;


1.6
date	2004.05.21.18.06.24;	author morrison;	state dead;
branches;
next	1.5;

1.5
date	2003.01.07.13.42.19;	author jra;	state Exp;
branches;
next	1.4;

1.4
date	99.01.12.16.19.54;	author pjt;	state Exp;
branches
	1.4.6.1
	1.4.8.1;
next	1.3;

1.3
date	97.06.13.20.44.55;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	97.06.13.20.40.32;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	97.06.13.20.39.14;	author mike;	state Exp;
branches;
next	;

1.4.6.1
date	2004.03.17.21.16.49;	author morrison;	state Exp;
branches;
next	;

1.4.8.1
date	2004.03.11.23.41.49;	author morrison;	state Exp;
branches;
next	;


desc
@Man page for LIBBU
@


1.6
log
@moved to src/
@
text
@.TH LIBBU 3 BRL-CAD
.SH NAME
libbu \- The BRL-CAD Utility Library
.SH SYNOPSIS
.nf
\fB#include "conf.h"
\fB#include "<stdio.h>"
\fB#include "machine.h"
\fB#include "bu.h"
.sp
.SH DESCRIPTION
.I libbu
contains all of the basic "computer-science" integer utility subroutines
for The BRL-CAD Package;
the two letters "BU" stand for "BRL-CAD" and "Utility".
Numerical (floating-point math) routines are found in the separate library
.IR libbn .
All subroutines in
.I libbu
are designed to be "parallel-safe" (sometimes called "mp-safe"),
to greatly ease code development for multi-processor systems.
.PP
The header file
.I bu.h
contains several "packages" which are implemented entirely by
macros and have no corresponding source code.
This includes the portable interface for declaring function prototypes
.I BU_EXTERN
and
.IR BU_ARGS ,
the portable interface for declaring FORTRAN-callable C routines
.IR BU_FORTRAN ,
the object constructor macros
.I BU_GETSTRUCT
and
.IR BU_GETUNION ,
the magic-number checking macros
.IR BU_CKMAG ,
the entire doubly-linked list package (formerly found in h/rtlist.h)
.IR BU_LIST_xxx() .
.PP
In addition to the capabilities implemented as macros, there are
additional "packages" which have both macro and subroutine interfaces:
.PP
The arbitrary-length bit-vector routines
.IR bu_bitv_xxx() .
.PP
The standardized parallel-safe error logging and abort routines
.I bu_log()
and
.IR bu_bomb() .
.PP
A portable re-entrant implementation of the
.IR getopt (3)
library routine
.IR bu_getopt (3).
.PP
A set of data histogramming routines
.IR bu_hist_xxx() .
.PP
A set of portable vendor-independent routines for parallel processing
that include
.I bu_avail_cpus()
to determine how many CPUs are available on the current system,
.I bu_parallel()
to initiate a specified number of parallel \fIthreads\fR of execution,
and
.IR bu_semaphore_init() ,
.IR bu_semaphore_acquire() ,
and
.I bu_semaphore_release()
for portable handling of \fIsemaphores\fR
to protect critical sections of code.
.PP
The
.I bu_malloc()
family of parallel-safe
routines provide an interface to the system memory allocator
which include standardized error checking, optional memory-use logging, and
optional run-time pointer and memory corruption testing.
.PP
The
.I bu_open_mapped_file()
routines provide a standardized interface for acquiring the entire contents
of an existing file mapped into the current address space,
using the virtual-memory capabilities of the operating-system (such as
.IR mmap (2))
where available, or if all else fails,
allocating sufficient dynamic memory and reading the entire file.
.PP
The
.I bu_structparse
data structure and associated routines provide a convenient way of
describing a C data structure, and reading and writing it
in both human-readable ASCII and efficient binary forms.
.PP
The
.I bu_ptbl
"pointer table" data structure provides a convenient
mechanism for managing a collection of pointers to objects,
where the size of the array is not known in advance and may change with time.
It is very convenient to be able to write code that can say
"remember this object", and then later on iterate through the collection
of remembered objects.
When combined with the concept of placing "magic numbers" in the first
.B long
of each data structure, the pointers to the objects become
automatically typed.
.PP
The
.I bu_vls
structure provides support for variable length strings,
freeing the programmer from concerns about having
.B char
arrays large enough to hold strings.
A complete set of string routines are provided,
including
.IR bu_vls_gets() ,
.IR bu_vls_strdup() ,
.IR bu_vls_strcat() ,
.IR bu_vls_from_argv() ,
.IR bu_vls_fwrite() ,
and many others.
.PP
The red-black package of balanced binary tree operations
that provides all the basic dynamic set operations
(e.g., insertion, deletion, search, minimum, maximum,
predecessor, and successor)
and order-statistic operations
(i.e., select and rank)
with optimal
--
that is,
.IR "O(" "log " "n)"
--
performance
while sorting on multiple keys.
.PP
Finally, a set of routines exist for taking text descriptions of
distance units and converting them to millimeters and back,
including
.IR bu_units_conversion() .
.SH WARNING
.I libbu
is designed to run in parallel on multiprocessor machines.
On some such machines
system calls must be semaphore protected.  For this reason, 
.I libbu
provides:
.sp
.nf
.I bu_log()
.I bu_malloc() bu_free() bu_calloc() bu_realloc()
.I bu_strdup()
.fi
.PP
The function
.I bu_log()
is essentially a semaphore-protected version of
.I printf()
except that it uses the standard error (stderr) instead of the standard
output (stdout).
.PP
Dynamic memory handling in applications using
.I libbu
should use
the functions provided by
.I libbu
instead of the usual system runtime library
routines.  The
.I libbu
versions do not return to the caller unless they succeed,
thus sparing the programmer from constantly having to check
for NULL return code.
If a
.I libbu
routine fails with an unrecoverable error, it will call
.I bu_bomb
with their last argument (str) as the parameter.  The string parameter
usually indicates the purpose of the memory being allocated.
.PP
The function
.I bu_strdup()
calls bu_malloc() instead of malloc() to acquire memory.
Thus it should be used in place of strdup() in programs linking with 
.I libbu.
.SH "EXIT CODE"
All truly fatal errors detected by the library use
.I bu_bomb
to exit with a status of 12.
.SH RECOMMENDATION
You should study the macros and data structures in
.IR bu.h .
.sp
To convert programs written for BRL-CAD Release 4.4 and earlier,
where these routines were all part of
.IR librt ,
a compatibility header file is provided:
.sp
#include "compat4.h"
.sp
In addition, you can painlessly upgrade your source code to using
the new libraries by using the provided editor script:
.sp
ed yourprog.c < ../h/sed4
.sp
This will change all the subroutine, macro, and data structure names
from their old
.I rt_
prefix names to their new
.I bu_
prefix names.
.SH "SEE ALSO"
brlcad(1B), librt(1B), libbn(1B), redblack(3B).
.SH DIAGNOSTICS
``bu_malloc: malloc failure'',
if
.I libbu
is unable to allocate memory with
.IR malloc .
.SH AUTHORS
Michael John Muuss
.br
Lee A. Butler
.br
Glenn Durfee
.br
Paul J. Tanenbaum
.SH SOURCE
 The U. S. Army Research Laboratory
 Aberdeen Proving Ground, Maryland  21005-5068  USA
.SH COPYRIGHT
This portion of The BRL-CAD Package is intended for wide-spread use
and is Public Domain, Distribution Unlimited.
.SH "BUG REPORTS"
Reports of bugs or problems should be submitted via electronic
mail to <CAD@@ARL.ARMY.MIL>, or via the provided "cadbug.sh" script.
@


1.5
log
@Corrected email address
@
text
@@


1.4
log
@Various details concerning folding libredblack into libbu
@
text
@d237 1
a237 1
mail to <CAD@@ARL.MIL>, or via the provided "cadbug.sh" script.
@


1.4.6.1
log
@sync branch with HEAD
@
text
@d237 1
a237 1
mail to <CAD@@ARL.ARMY.MIL>, or via the provided "cadbug.sh" script.
@


1.4.8.1
log
@sync to HEAD...
@
text
@d237 1
a237 1
mail to <CAD@@ARL.ARMY.MIL>, or via the provided "cadbug.sh" script.
@


1.3
log
@Typo
@
text
@d24 1
a24 1
.I bh.h
d125 14
d214 1
a214 1
brlcad(1B), librt(1B), libbn(1B).
d227 2
@


1.2
log
@Spelling fixed
@
text
@d21 1
a21 1
for greatly ease code development for multi-processor systems.
@


1.1
log
@Initial revision
@
text
@d86 1
a86 1
using the virtual-memory cappabilities of the operating-system (such as
d125 2
a126 2
Finaly, a set of routines exist for taking text descriptions of
distance units and converting them to milimeters and back,
d143 1
a143 1
The fuction
d168 1
a168 1
The fuction
@
