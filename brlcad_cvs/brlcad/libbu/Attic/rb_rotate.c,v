head	11.15;
access;
symbols
	ansi-20040405-merged:11.11.2.2
	postmerge-20040405-ansi:11.13
	premerge-20040404-ansi:11.12
	postmerge-autoconf:11.12
	autoconf-freeze:11.11.10.2
	premerge-autoconf:11.12
	ansi-20040316-freeze:11.11.2.1
	postmerge-20040315-windows:11.12
	premerge-20040315-windows:11.12
	windows-20040315-freeze:11.11.4.1
	autoconf-20031203:11.11
	autoconf-20031202:11.11
	autoconf-branch:11.11.0.10
	phong-branch:11.11.0.8
	photonmap-branch:11.11.0.6
	rel-6-1-DP:11.11
	windows-branch:11.11.0.4
	rel-6-0-2:11.9
	ansi-branch:11.11.0.2
	rel-6-0-1-branch:11.9.0.2
	hartley-6-0-post:11.10
	hartley-6-0-pre:11.9
	rel-6-0-1:11.9
	rel-6-0:11.9
	rel-5-4:11.8
	offsite-5-3-pre:11.9
	rel-5-3:11.8
	rel-5-2:11.8
	rel-5-1-branch:11.8.0.2
	rel-5-1:11.8
	rel-5-0:11.7
	rel-5-0-beta:11.7
	rel-4-5:11.5
	ctj-4-5-post:11.5
	ctj-4-5-pre:11.5
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.15
date	2004.05.21.18.06.25;	author morrison;	state dead;
branches;
next	11.14;

11.14
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	11.13;

11.13
date	2004.04.05.07.46.16;	author morrison;	state Exp;
branches;
next	11.12;

11.12
date	2004.02.02.17.39.07;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2002.08.20.17.07.42;	author jra;	state Exp;
branches
	11.11.2.1
	11.11.4.1
	11.11.10.1;
next	11.10;

11.10
date	2002.08.15.20.54.55;	author hartley;	state Exp;
branches;
next	11.9;

11.9
date	2000.07.07.05.20.13;	author cjohnson;	state Exp;
branches;
next	11.8;

11.8
date	2000.03.28.18.55.10;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	99.01.12.16.19.56;	author pjt;	state Exp;
branches;
next	11.6;

11.6
date	98.12.30.01.25.45;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	96.08.27.07.10.51;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	95.09.20.12.08.38;	author pjt;	state Exp;
branches;
next	11.3;

11.3
date	95.07.10.20.17.51;	author pjt;	state Exp;
branches;
next	11.2;

11.2
date	95.04.19.19.04.33;	author pjt;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.05.57;	author mike;	state Rel4_4;
branches;
next	2.5;

2.5
date	94.12.30.16.41.04;	author stay;	state Exp;
branches;
next	2.4;

2.4
date	94.09.26.12.21.10;	author jra;	state Exp;
branches;
next	2.3;

2.3
date	94.09.22.15.34.47;	author pjt;	state Exp;
branches;
next	2.2;

2.2
date	94.09.22.15.27.09;	author pjt;	state Exp;
branches;
next	2.1;

2.1
date	93.03.25.11.03.26;	author pjt;	state Exp;
branches;
next	1.5;

1.5
date	93.03.25.11.00.25;	author pjt;	state Exp;
branches;
next	1.4;

1.4
date	93.01.22.10.01.46;	author pjt;	state zero_1;
branches;
next	1.3;

1.3
date	93.01.14.10.52.35;	author pjt;	state Exp;
branches;
next	1.2;

1.2
date	93.01.14.09.28.15;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	92.11.06.13.53.51;	author pjt;	state Exp;
branches;
next	;

11.11.2.1
date	2002.09.19.18.01.14;	author morrison;	state Exp;
branches;
next	11.11.2.2;

11.11.2.2
date	2004.03.17.21.16.51;	author morrison;	state Exp;
branches;
next	;

11.11.4.1
date	2004.03.11.23.41.50;	author morrison;	state Exp;
branches;
next	;

11.11.10.1
date	2004.02.12.18.39.19;	author erikg;	state Exp;
branches;
next	11.11.10.2;

11.11.10.2
date	2004.03.15.14.06.17;	author erikg;	state Exp;
branches;
next	;


desc
@
     Left- and right-rotation routines for red-black trees

@


11.15
log
@moved to src/
@
text
@/*			R B _ R O T A T E . C
 *
 *	    Routines to perform rotations on a red-black tree
 *
 *  Author -
 *	Paul J. Tanenbaum
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */
#ifndef lint
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /n/xoff/cvs/brlcad/libbu/rb_rotate.c,v 11.14 2004/05/10 15:30:44 erikg Exp $";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "rtlist.h"
#include "bu.h"
#include "compat4.h"
#include "./rb_internals.h"

/*		    _ R B _ R O T _ L E F T ( )
 *
 *		Perfrom left rotation on a red-black tree
 *
 *	This function has two parameters: the node about which to rotate
 *	and the order to be rotated.  _rb_rot_left() is an implementation
 *	of the routine called LEFT-ROTATE on p. 266 of Cormen et al,
 *	with modification on p. 285.
 */
void _rb_rot_left (struct bu_rb_node *x, int order)
{
    struct bu_rb_node	*y;		/* x's child to pivot up */
    struct bu_rb_node	*beta;		/* y's child in direction of rot. */
    struct bu_rb_node	*x_parent;	/* x's parent */
    bu_rb_tree		*tree = x -> rbn_tree;	/* Tree where it all happens */

    /*
     *	Set y and check data types of both x and y
     */
    BU_CKMAG(x, BU_RB_NODE_MAGIC, "red-black node");
    BU_RB_CKORDER(x -> rbn_tree, order);

    y = bu_rb_right_child(x, order);

    if (tree -> rbt_debug & BU_RB_DEBUG_ROTATE)
	bu_log("_rb_rot_left(<%x>, %d)...\n", x, order);

    bu_rb_right_child(x, order) = beta = bu_rb_left_child(y, order);
    if (beta != bu_rb_null(tree))
	bu_rb_parent(beta, order) = x;
    bu_rb_parent(y, order) = x_parent = bu_rb_parent(x, order);
    if (x_parent == bu_rb_null(tree))
	bu_rb_root(tree, order) = y;
    else if (x == bu_rb_left_child(x_parent, order))
	bu_rb_left_child(x_parent, order) = y;
    else
	bu_rb_right_child(x_parent, order) = y;
    bu_rb_left_child(y, order) = x;
    bu_rb_parent(x, order) = y;

    bu_rb_size(y, order) = bu_rb_size(x, order);
    bu_rb_size(x, order) =
	bu_rb_size(bu_rb_left_child(x, order), order) +
	bu_rb_size(bu_rb_right_child(x, order), order) + 1;
    if (tree -> rbt_debug & BU_RB_DEBUG_OS)
	bu_log("After rotation, size(%x, %d)=%d, size(%x, %d)=%d\n",
	    x, order, bu_rb_size(x, order), y, order, bu_rb_size(y, order));
}

/*		    _ R B _ R O T _ R I G H T ( )
 *
 *		Perfrom right rotation on a red-black tree
 *
 *	This function has two parameters: the node about which to rotate
 *	and the order to be rotated.  _rb_rot_right() is hacked from
 *	_rb_rot_left() above.
 */
void _rb_rot_right (struct bu_rb_node *y, int order)
{
    struct bu_rb_node	*x;		/* y's child to pivot up */
    struct bu_rb_node	*beta;		/* x's child in direction of rot. */
    struct bu_rb_node	*y_parent;	/* y's parent */
    bu_rb_tree		*tree = y -> rbn_tree;	/* Tree where it all happens */

    /*
     *	Set x and check data types of both x and y
     */
    BU_CKMAG(y, BU_RB_NODE_MAGIC, "red-black node");
    BU_RB_CKORDER(y -> rbn_tree, order);

    x = bu_rb_left_child(y, order);

    if (tree -> rbt_debug & BU_RB_DEBUG_ROTATE)
	bu_log("_rb_rot_right(<%x>, %d)...\n", y, order);

    bu_rb_left_child(y, order) = beta = bu_rb_right_child(x, order);
    if (beta != bu_rb_null(tree))
	bu_rb_parent(beta, order) = y;
    bu_rb_parent(x, order) = y_parent = bu_rb_parent(y, order);
    if (y_parent == bu_rb_null(tree))
	bu_rb_root(tree, order) = x;
    else if (y == bu_rb_left_child(y_parent, order))
	bu_rb_left_child(y_parent, order) = x;
    else
	bu_rb_right_child(y_parent, order) = x;
    bu_rb_right_child(x, order) = y;
    bu_rb_parent(y, order) = x;

    bu_rb_size(x, order) = bu_rb_size(y, order);
    bu_rb_size(y, order) =
	bu_rb_size(bu_rb_left_child(y, order), order) +
	bu_rb_size(bu_rb_right_child(y, order), order) + 1;
    if (tree -> rbt_debug & BU_RB_DEBUG_OS)
	bu_log("After rotation, size(%x, %d)=%d, size(%x, %d)=%d\n",
	    x, order, bu_rb_size(x, order), y, order, bu_rb_size(y, order));
}
@


11.14
log
@change conf.h to a wrapped config.h
@
text
@d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /cvs/brlcad/libbu/rb_rotate.c,v 11.13 2004/04/05 07:46:16 morrison Exp $";
@


11.13
log
@merge of ansi-6-0-branch into HEAD
@
text
@d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header$";
d25 5
a29 1
#include "conf.h"
@


11.12
log
@update copyright to include span through 2003
@
text
@d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.11 2002/08/20 17:07:42 jra Exp $";
d44 1
a44 5
void _rb_rot_left (x, order)

struct bu_rb_node	*x;
int			order;

d92 1
a92 5
void _rb_rot_right (y, order)

struct bu_rb_node	*y;
int		order;

@


11.11
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1998 by the United States Army
d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.9 2000/07/07 05:20:13 cjohnson Exp $";
@


11.11.4.1
log
@sync to HEAD...
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /n/cad/c/CVS/brlcad/libbu/rb_rotate.c,v 11.12 2004/02/02 17:39:07 morrison Exp $";
@


11.11.10.1
log
@merge from HEAD
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.12 2004/02/02 17:39:07 morrison Exp $";
@


11.11.10.2
log
@merge from head
@
text
@d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.11.10.1 2004/02/12 18:39:19 erikg Exp $";
@


11.11.2.1
log
@Initial ANSIfication
@
text
@d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.11 2002/08/20 17:07:42 jra Exp $";
d44 5
a48 1
void _rb_rot_left (struct bu_rb_node *x, int order)
d96 5
a100 1
void _rb_rot_right (struct bu_rb_node *y, int order)
@


11.11.2.2
log
@sync branch with HEAD
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header$";
@


11.10
log
@Converted from K&R to ANSI C - RFH
@
text
@d44 5
a48 1
void _rb_rot_left (struct bu_rb_node *x, int order)
d96 5
a100 1
void _rb_rot_right (struct bu_rb_node *y, int order)
@


11.9
log
@LINT
@
text
@d22 1
a22 1
static const char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.8 2000/03/28 18:55:10 mike Exp $";
d44 1
a44 5
void _rb_rot_left (x, order)

struct bu_rb_node	*x;
int			order;

d92 1
a92 5
void _rb_rot_right (y, order)

struct bu_rb_node	*y;
int		order;

@


11.8
log
@
Put libbu_filename_ prefixes on RCSid variables.
@
text
@d22 1
a22 1
static char libbu_rb_rotate_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.7 1999/01/12 16:19:56 pjt Exp $";
@


11.7
log
@Various details concerning folding libredblack into libbu
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.6 1998/12/30 01:25:45 mike Exp $";
@


11.6
log
@LibRedBlack routines now have a bu_ prefix.
@
text
@d1 1
a1 1
/*			B U _ R B _ R O T A T E . C
d22 1
a22 1
static char RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_rotate.c,v 11.5 1996/08/27 07:10:51 mike Exp $";
@


11.5
log
@Changed over to bu.h
@
text
@d1 1
a1 1
/*			R B _ R O T A T E . C
d5 15
a19 2
 *	Author:	Paul Tanenbaum
 *
d22 1
a22 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 11.4 1995/09/20 12:08:38 pjt Exp pjt $";
a32 1
#include "redblack.h"
d46 2
a47 2
struct rb_node	*x;
int		order;
d50 4
a53 4
    struct rb_node	*y;		/* x's child to pivot up */
    struct rb_node	*beta;		/* y's child in direction of rot. */
    struct rb_node	*x_parent;	/* x's parent */
    rb_tree		*tree = x -> rbn_tree;	/* Tree where it all happens */
d58 2
a59 2
    RB_CKMAG(x, RB_NODE_MAGIC, "red-black node");
    RB_CKORDER(x -> rbn_tree, order);
d61 1
a61 1
    y = rb_right_child(x, order);
d63 2
a64 2
    if (tree -> rbt_debug & RB_DEBUG_ROTATE)
	rt_log("_rb_rot_left(<%x>, %d)...\n", x, order);
d66 8
a73 8
    rb_right_child(x, order) = beta = rb_left_child(y, order);
    if (beta != rb_null(tree))
	rb_parent(beta, order) = x;
    rb_parent(y, order) = x_parent = rb_parent(x, order);
    if (x_parent == rb_null(tree))
	rb_root(tree, order) = y;
    else if (x == rb_left_child(x_parent, order))
	rb_left_child(x_parent, order) = y;
d75 11
a85 11
	rb_right_child(x_parent, order) = y;
    rb_left_child(y, order) = x;
    rb_parent(x, order) = y;

    rb_size(y, order) = rb_size(x, order);
    rb_size(x, order) =
	rb_size(rb_left_child(x, order), order) +
	rb_size(rb_right_child(x, order), order) + 1;
    if (tree -> rbt_debug & RB_DEBUG_OS)
	rt_log("After rotation, size(%x, %d)=%d, size(%x, %d)=%d\n",
	    x, order, rb_size(x, order), y, order, rb_size(y, order));
d98 1
a98 1
struct rb_node	*y;
d102 4
a105 4
    struct rb_node	*x;		/* y's child to pivot up */
    struct rb_node	*beta;		/* x's child in direction of rot. */
    struct rb_node	*y_parent;	/* y's parent */
    rb_tree		*tree = y -> rbn_tree;	/* Tree where it all happens */
d110 2
a111 2
    RB_CKMAG(y, RB_NODE_MAGIC, "red-black node");
    RB_CKORDER(y -> rbn_tree, order);
d113 1
a113 1
    x = rb_left_child(y, order);
d115 2
a116 2
    if (tree -> rbt_debug & RB_DEBUG_ROTATE)
	rt_log("_rb_rot_right(<%x>, %d)...\n", y, order);
d118 8
a125 8
    rb_left_child(y, order) = beta = rb_right_child(x, order);
    if (beta != rb_null(tree))
	rb_parent(beta, order) = y;
    rb_parent(x, order) = y_parent = rb_parent(y, order);
    if (y_parent == rb_null(tree))
	rb_root(tree, order) = x;
    else if (y == rb_left_child(y_parent, order))
	rb_left_child(y_parent, order) = x;
d127 11
a137 11
	rb_right_child(y_parent, order) = x;
    rb_right_child(x, order) = y;
    rb_parent(y, order) = x;

    rb_size(x, order) = rb_size(y, order);
    rb_size(y, order) =
	rb_size(rb_left_child(y, order), order) +
	rb_size(rb_right_child(y, order), order) + 1;
    if (tree -> rbt_debug & RB_DEBUG_OS)
	rt_log("After rotation, size(%x, %d)=%d, size(%x, %d)=%d\n",
	    x, order, rb_size(x, order), y, order, rb_size(y, order));
@


11.4
log
@Added maintenance of rbn_size member of struct rb_node
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 11.3 1995/07/10 20:17:51 pjt Exp pjt $";
d18 2
@


11.3
log
@Must now include rtlist.h before redblack.h
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 11.2 1995/04/19 19:04:33 pjt Exp $";
d27 2
a28 1
 *	of the routine called LEFT-ROTATE on p. 266 of Cormen et al.
d64 8
d116 8
@


11.2
log
@ Added debug prints controlled by rbt_debug
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 11.1 95/01/04 10:05:57 mike Rel4_4 $";
d17 1
@


11.1
log
@Release_4.4
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.5 94/12/30 16:41:04 stay Exp $";
d16 1
d47 3
d90 3
@


2.5
log
@deleted reference to stdlib, it wil be included in conf.h if
it exists or is STDC
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.4 1994/09/26 12:21:10 jra Exp stay $";
@


2.4
log
@Added #include "conf.h"
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.3 94/09/22 15:34:47 pjt Exp Locker: jra $";
a13 1
#include <stdlib.h>
@


2.3
log
@Changed "#include "rt_internals.h" to "#include "./rt_internals.h"
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.2 94/09/22 15:27:09 pjt Exp Locker: pjt $";
d11 2
@


2.2
log
@Replaced prototype-type definition with K&R type
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 2.1 93/03/25 11:03:26 pjt Exp $";
d16 1
a16 1
#include "rb_internals.h"
@


2.1
log
@Installed into BRL CAD tree
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 1.5 93/03/25 11:00:25 pjt Exp Locker: pjt $";
d26 5
a30 1
void _rb_rot_left (struct rb_node *x, int order)
d67 5
a71 1
void _rb_rot_right (struct rb_node *y, int order)
@


1.5
log
@Added authorship comment
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_rotate.c,v 1.4 93/01/22 10:01:46 pjt zero_1 Locker: pjt $";
@


1.4
log
@Pulled them back out of rb_delete.c and changed their names
to _rb_rot_left() and _rb_rot_right()
@
text
@d5 2
d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /arl/pjt/libredblack/RCS/rb_rotate.c,v 1.1 93/01/21 14:28:47 pjt Exp Locker: pjt $";
@


1.3
log
@1. Added calls to RB_CKORDER()
2. Removed superfluous (?) calls to RB_CKMAG()
@
text
@d3 1
a3 1
 *	Written by:	Paul Tanenbaum
a4 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_rotate.c,v 1.2 93/01/14 09:28:15 pjt Exp Locker: pjt $
d6 3
d16 1
a16 1
/*		    L E F T _ R O T A T E ( )
d21 2
a22 3
 *	and the order to be rotated.  The bulk of this code is from
 *	T. H. Cormen, C. E. Leiserson, and R. L. Rivest.  _Introduction
 *	to Algorithms_.  Cambridge, MA: MIT Press, 1990. p. 266.
d24 1
a24 1
void left_rotate (struct rb_node *x, int order)
d53 1
a53 1
/*		    R I G H T _ R O T A T E ( )
d58 2
a59 2
 *	and the order to be rotated.  This function is hacked from
 *	left_rotate() above.
d61 1
a61 1
void right_rotate (struct rb_node *y, int order)
@


1.2
log
@Now use rb_null()
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_rotate.c,v 1.1 92/11/06 13:53:51 pjt Exp Locker: pjt $
d34 2
a36 1
    RB_CKMAG(y, RB_NODE_MAGIC, "red-black node");
d71 2
a73 1
    RB_CKMAG(x, RB_NODE_MAGIC, "red-black node");
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 *  $Header: /arl/pjt/libredblack/RCS/rb_create.c,v 1.3 92/11/05 11:29:30 pjt Exp Locker: pjt $
d38 1
a38 1
    if (beta != RB_NODE_NULL)
d41 1
a41 1
    if (x_parent == RB_NODE_NULL)
d74 1
a74 1
    if (beta != RB_NODE_NULL)
d77 1
a77 1
    if (y_parent == RB_NODE_NULL)
@
