head	1.7;
access;
symbols
	ansi-20040405-merged:1.4.2.1
	postmerge-20040405-ansi:1.5
	premerge-20040404-ansi:1.4
	postmerge-autoconf:1.4
	autoconf-freeze:1.4
	premerge-autoconf:1.4
	ansi-20040316-freeze:1.4.2.1
	postmerge-20040315-windows:1.4
	premerge-20040315-windows:1.4
	windows-20040315-freeze:1.4
	autoconf-20031203:1.4
	autoconf-20031202:1.4
	autoconf-branch:1.4.0.10
	phong-branch:1.4.0.8
	photonmap-branch:1.4.0.6
	rel-6-1-DP:1.4
	windows-branch:1.4.0.4
	rel-6-0-2:1.2
	ansi-branch:1.4.0.2
	rel-6-0-1-branch:1.2.0.2
	hartley-6-0-post:1.3
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2
	offsite-5-3-pre:1.2;
locks; strict;
comment	@ * @;


1.7
date	2004.05.21.18.06.24;	author morrison;	state dead;
branches;
next	1.6;

1.6
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.05.07.46.16;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.20.17.07.40;	author jra;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2002.08.15.20.54.53;	author hartley;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.09.03.23.47;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.08.14.15.43;	author bparker;	state Exp;
branches;
next	;

1.4.2.1
date	2002.09.19.18.01.12;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.7
log
@moved to src/
@
text
@/*
 *			H O O K . C
 *
 * BRL-CAD support library's hook utility.
 *
 *  Authors -
 *	Robert G. Parker
 *	Michael John Muuss
 *	Glenn Durfee
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
 *
 * Acknowledgements -
 *	This builds on the work in libbu/log.c.
 *
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#include "machine.h"
#include "externs.h"
#include "bu.h"

void
bu_hook_list_init(struct bu_hook_list *hlp)
{
	BU_LIST_INIT(&hlp->l);
	hlp->hookfunc = BUHOOK_NULL;
	hlp->clientdata = GENPTR_NULL;
}

void
bu_add_hook(struct bu_hook_list *hlp, bu_hook_t func, genptr_t clientdata)
{
	struct bu_hook_list *new_hook;

	BU_GETSTRUCT(new_hook, bu_hook_list);
	new_hook->hookfunc = func;
	new_hook->clientdata = clientdata;
	new_hook->l.magic = BUHOOK_LIST_MAGIC;
	BU_LIST_APPEND(&hlp->l, &new_hook->l);
}

void
bu_delete_hook(struct bu_hook_list *hlp, bu_hook_t func, genptr_t clientdata)
{
	struct bu_hook_list *cur = hlp;

	for (BU_LIST_FOR(cur, bu_hook_list, &hlp->l)) {
		if (cur->hookfunc == func && cur->clientdata == clientdata) {
			struct bu_hook_list *old = BU_LIST_PLAST(bu_hook_list, cur);
			BU_LIST_DEQUEUE(&(cur->l));
			bu_free((genptr_t)cur, "bu_delete_hook");
			cur = old;
		}
	}    
}

void
bu_call_hook(struct bu_hook_list *hlp, genptr_t buf)
{
	struct bu_hook_list	*call_hook;

	for (BU_LIST_FOR(call_hook, bu_hook_list, &hlp->l)) {
		if( !(call_hook->hookfunc) )  abort();	/* don't call through 0! */
		call_hook->hookfunc(call_hook->clientdata, buf);
	}
}
@


1.6
log
@change conf.h to a wrapped config.h
@
text
@@


1.5
log
@merge of ansi-6-0-branch into HEAD
@
text
@d23 5
a27 1
#include "conf.h"
@


1.4
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d32 1
a32 2
bu_hook_list_init(hlp)
     struct bu_hook_list *hlp;
d40 1
a40 4
bu_add_hook(hlp, func, clientdata)
     struct bu_hook_list *hlp;
     bu_hook_t func;
     genptr_t clientdata;
d52 1
a52 4
bu_delete_hook(hlp, func, clientdata)
     struct bu_hook_list *hlp;
     bu_hook_t func;
     genptr_t clientdata;
d67 1
a67 3
bu_call_hook(hlp, buf)
     struct bu_hook_list *hlp;
     genptr_t	buf;
@


1.4.2.1
log
@Initial ANSIfication
@
text
@d32 2
a33 1
bu_hook_list_init(struct bu_hook_list *hlp)
d41 4
a44 1
bu_add_hook(struct bu_hook_list *hlp, bu_hook_t func, genptr_t clientdata)
d56 4
a59 1
bu_delete_hook(struct bu_hook_list *hlp, bu_hook_t func, genptr_t clientdata)
d74 3
a76 1
bu_call_hook(struct bu_hook_list *hlp, genptr_t buf)
@


1.3
log
@Converted from K&R to ANSI C - RFH
@
text
@d32 2
a33 1
bu_hook_list_init(struct bu_hook_list *hlp)
d41 4
a44 1
bu_add_hook(struct bu_hook_list *hlp, bu_hook_t func, genptr_t clientdata)
d56 4
a59 1
bu_delete_hook(struct bu_hook_list *hlp, bu_hook_t func, genptr_t clientdata)
d74 3
a76 1
bu_call_hook(struct bu_hook_list *hlp, genptr_t buf)
@


1.2
log
@
Process full list of callbacks, not just the first entry.
Especially since that might be the list header!!
Also, be certain not to call through a NULL pointer!
@
text
@d32 1
a32 2
bu_hook_list_init(hlp)
     struct bu_hook_list *hlp;
d40 1
a40 4
bu_add_hook(hlp, func, clientdata)
     struct bu_hook_list *hlp;
     bu_hook_t func;
     genptr_t clientdata;
d52 1
a52 4
bu_delete_hook(hlp, func, clientdata)
     struct bu_hook_list *hlp;
     bu_hook_t func;
     genptr_t clientdata;
d67 1
a67 3
bu_call_hook(hlp, buf)
     struct bu_hook_list *hlp;
     genptr_t	buf;
@


1.1
log
@Common code for handling hooks.
@
text
@d80 4
a83 2
	call_hook = BU_LIST_FIRST(bu_hook_list, &hlp->l);
	call_hook->hookfunc(call_hook->clientdata, buf);
@

