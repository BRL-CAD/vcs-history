head	1.11;
access;
symbols
	ansi-20040405-merged:1.7.2.2
	postmerge-20040405-ansi:1.9
	premerge-20040404-ansi:1.8
	postmerge-autoconf:1.8
	autoconf-freeze:1.7.10.1
	premerge-autoconf:1.8
	ansi-20040316-freeze:1.7.2.1
	postmerge-20040315-windows:1.8
	premerge-20040315-windows:1.8
	windows-20040315-freeze:1.7.4.1
	autoconf-20031203:1.7
	autoconf-20031202:1.7
	autoconf-branch:1.7.0.10
	phong-branch:1.7.0.8
	photonmap-branch:1.7.0.6
	rel-6-1-DP:1.7
	windows-branch:1.7.0.4
	rel-6-0-2:1.5
	ansi-branch:1.7.0.2
	rel-6-0-1-branch:1.5.0.2
	hartley-6-0-post:1.6
	hartley-6-0-pre:1.5
	rel-6-0-1:1.5
	rel-6-0:1.5
	rel-5-4:1.3
	offsite-5-3-pre:1.5
	rel-5-3:1.3
	rel-5-2:1.3
	rel-5-1-branch:1.3.0.2
	rel-5-1:1.3;
locks; strict;
comment	@ * @;


1.11
date	2004.05.21.18.06.24;	author morrison;	state dead;
branches;
next	1.10;

1.10
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.05.07.46.16;	author morrison;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.02.17.39.07;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.20.17.07.41;	author jra;	state Exp;
branches
	1.7.2.1
	1.7.4.1
	1.7.10.1;
next	1.6;

1.6
date	2002.08.15.20.54.54;	author hartley;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.18.18.10.33;	author butler;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.07.05.20.13;	author cjohnson;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.03.18.43.53;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.18.21.15.15;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.18.21.03.44;	author bparker;	state Exp;
branches;
next	;

1.7.2.1
date	2002.09.19.18.01.13;	author morrison;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2004.03.17.21.16.50;	author morrison;	state Exp;
branches;
next	;

1.7.4.1
date	2004.03.11.23.41.49;	author morrison;	state Exp;
branches;
next	;

1.7.10.1
date	2004.02.12.18.39.18;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.11
log
@moved to src/
@
text
@/*
 *				O B S E R V E R . C
 *
 * Routines for implementing the observer pattern.
 * 
 * Source -
 *	SLAD CAD Team
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 * Author -
 *	Robert G. Parker
 *
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1997-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#ifdef HAVE_STRING_H
#include <string.h>
#endif

#include "tcl.h"
#include "machine.h"
#include "externs.h"
#include "cmd.h"                  /* includes bu.h */

static int bu_observer_attach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int bu_observer_detach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int bu_observer_show_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);

struct bu_cmdtab bu_observer_cmds[] = {
	{"attach",	bu_observer_attach_tcl},
	{"detach",	bu_observer_detach_tcl},
	{"show",	bu_observer_show_tcl},
	{(char *)0,	(int (*)())0}
};

/*
 * Attach observer.
 *
 * Usage:
 *	  attach observer [cmd]
 *
 */
static int
bu_observer_attach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_observer *headp = (struct bu_observer *)clientData;
	struct bu_observer *op;

	if (argc < 2 || 3 < argc) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib bu_observer_attach");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	/* see if it already exists, if so, modify it */
	for (BU_LIST_FOR(op, bu_observer, &headp->l))
		if (strcmp(bu_vls_addr(&op->observer), argv[1]) == 0) {
			if (argc == 2)
				/* clobber cmd */
				bu_vls_init(&op->cmd);
			else
				/* overwrite cmd */
				bu_vls_strcpy(&op->cmd, argv[2]);

			return TCL_OK;
		}

	/* acquire bu_observer struct */
	BU_GETSTRUCT(op, bu_observer);

	/* initialize observer */
	bu_vls_init(&op->observer);
	bu_vls_strcpy(&op->observer, argv[1]);
	bu_vls_init(&op->cmd);

	if (argc == 3)
		bu_vls_strcpy(&op->cmd, argv[2]);

	/* append to list of bu_observer's */
	BU_LIST_APPEND(&headp->l, &op->l);

	return TCL_OK;
}

/*
 * Detach observer.
 *
 * Usage:
 *	  detach observer
 *
 */
static int
bu_observer_detach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_observer *headp = (struct bu_observer *)clientData;
	struct bu_observer *op;

	if (argc != 2) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib bu_observer_attach");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	/* search for observer and remove from list */
	for (BU_LIST_FOR(op, bu_observer, &headp->l))
		if (strcmp(bu_vls_addr(&op->observer), argv[1]) == 0) {
			BU_LIST_DEQUEUE(&op->l);
			bu_vls_free(&op->observer);
			bu_vls_free(&op->cmd);
			bu_free((genptr_t)op, "bu_observer_detach_tcl: op");

			return TCL_OK;
		}

	Tcl_AppendResult(interp, "detach: ", argv[1], " not found", (char *)NULL);
	return TCL_ERROR;
}

/*
 * Show/list observers.
 *
 * Usage:
 *	  show
 *
 */
static int
bu_observer_show_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_observer *headp = (struct bu_observer *)clientData;
	struct bu_observer *op;

	for (BU_LIST_FOR(op, bu_observer, &headp->l)) {
		Tcl_AppendResult(interp, bu_vls_addr(&op->observer), " - ",
				 bu_vls_addr(&op->cmd), "\n", (char *)NULL);
	}

	return TCL_OK;
}

/*
 * Notify observers.
 */
void
bu_observer_notify(Tcl_Interp *interp, struct bu_observer *headp, char *this)
{
	struct bu_observer *op;
	struct bu_vls vls;

	bu_vls_init(&vls);
	for (BU_LIST_FOR(op, bu_observer, &headp->l)) {
		if (bu_vls_strlen(&op->cmd) > 0) {
			/* Execute cmd */
			bu_vls_strcpy(&vls, bu_vls_addr(&op->cmd));
			Tcl_Eval(interp, bu_vls_addr(&vls));
		} else {
			/* Assume that observer is some object that has an update method */
			bu_vls_trunc(&vls, 0);
			bu_vls_printf(&vls, "%s update %s", bu_vls_addr(&op->observer), this);
			Tcl_Eval(interp, bu_vls_addr(&vls));
		}
	}
	bu_vls_free(&vls);
}

/*
 * Free observers.
 */
void
bu_observer_free(struct bu_observer *headp)
{
	struct bu_observer *op;
	struct bu_observer *nop;

	op = BU_LIST_FIRST(bu_observer, &headp->l);
	while (BU_LIST_NOT_HEAD(op, &headp->l)) {
		nop = BU_LIST_PNEXT(bu_observer, op);
		BU_LIST_DEQUEUE(&op->l);
		bu_vls_free(&op->observer);
		bu_vls_free(&op->cmd);
		bu_free((genptr_t)op, "bu_observer_free: op");
		op = nop;
	}
}
@


1.10
log
@change conf.h to a wrapped config.h
@
text
@@


1.9
log
@merge of ansi-6-0-branch into HEAD
@
text
@d24 5
a28 1
#include "conf.h"
@


1.8
log
@update copyright to include span through 2003
@
text
@d34 3
a36 3
static int bu_observer_attach_tcl();
static int bu_observer_detach_tcl();
static int bu_observer_show_tcl();
d53 1
a53 5
bu_observer_attach_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int     argc;
     char    **argv;
d106 1
a106 5
bu_observer_detach_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int     argc;
     char    **argv;
d144 1
a144 5
bu_observer_show_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int     argc;
     char    **argv;
d161 1
a161 4
bu_observer_notify(interp, headp, this)
     Tcl_Interp *interp;
     struct bu_observer *headp;
     char *this;
d186 1
a186 2
bu_observer_free(headp)
     struct bu_observer *headp;
@


1.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1997 by the United States Army
@


1.7.4.1
log
@sync to HEAD...
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1997-2004 by the United States Army
@


1.7.10.1
log
@merge from HEAD
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1997-2004 by the United States Army
@


1.7.2.1
log
@Initial ANSIfication
@
text
@d34 3
a36 3
static int bu_observer_attach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int bu_observer_detach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int bu_observer_show_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
d53 5
a57 1
bu_observer_attach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d110 5
a114 1
bu_observer_detach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d152 5
a156 1
bu_observer_show_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d173 4
a176 1
bu_observer_notify(Tcl_Interp *interp, struct bu_observer *headp, char *this)
d201 2
a202 1
bu_observer_free(struct bu_observer *headp)
@


1.7.2.2
log
@sync branch with HEAD
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1997-2004 by the United States Army
@


1.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d34 3
a36 3
static int bu_observer_attach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int bu_observer_detach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
static int bu_observer_show_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
d53 5
a57 1
bu_observer_attach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d110 5
a114 1
bu_observer_detach_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d152 5
a156 1
bu_observer_show_tcl(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d173 4
a176 1
bu_observer_notify(Tcl_Interp *interp, struct bu_observer *headp, char *this)
d201 2
a202 1
bu_observer_free(struct bu_observer *headp)
@


1.5
log
@Patches for compiling under RedHat 7.0
@
text
@d34 3
a36 3
static int bu_observer_attach_tcl();
static int bu_observer_detach_tcl();
static int bu_observer_show_tcl();
d53 1
a53 5
bu_observer_attach_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int     argc;
     char    **argv;
d106 1
a106 5
bu_observer_detach_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int     argc;
     char    **argv;
d144 1
a144 5
bu_observer_show_tcl(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int     argc;
     char    **argv;
d161 1
a161 4
bu_observer_notify(interp, headp, this)
     Tcl_Interp *interp;
     struct bu_observer *headp;
     char *this;
d186 1
a186 2
bu_observer_free(headp)
     struct bu_observer *headp;
@


1.4
log
@LINT
@
text
@d25 4
@


1.3
log
@*- document code source
@
text
@d35 4
a38 4
	"attach",	bu_observer_attach_tcl,
	"detach",	bu_observer_detach_tcl,
	"show",		bu_observer_show_tcl,
	(char *)0,	(int (*)())0
@


1.2
log
@*- remove debug statements
@
text
@d1 23
@


1.1
log
@Implements the Observer design pattern
@
text
@a34 1
	bu_log("bu_observer_attach_tcl: step1\n");
a43 1
	bu_log("bu_observer_attach_tcl: step2\n");
@

