head	1.10;
access;
symbols
	ansi-20040405-merged:1.6.2.2
	postmerge-20040405-ansi:1.8
	premerge-20040404-ansi:1.7
	postmerge-autoconf:1.7
	autoconf-freeze:1.6.10.1
	premerge-autoconf:1.7
	ansi-20040316-freeze:1.6.2.1
	postmerge-20040315-windows:1.7
	premerge-20040315-windows:1.6
	windows-20040315-freeze:1.6.4.1
	autoconf-20031203:1.6
	autoconf-20031202:1.6
	autoconf-branch:1.6.0.10
	phong-branch:1.6.0.8
	photonmap-branch:1.6.0.6
	rel-6-1-DP:1.6
	windows-branch:1.6.0.4
	rel-6-0-2:1.4
	ansi-branch:1.6.0.2
	rel-6-0-1-branch:1.4.0.2
	hartley-6-0-post:1.5
	hartley-6-0-pre:1.4
	rel-6-0-1:1.4
	rel-6-0:1.4
	rel-5-4:1.2
	offsite-5-3-pre:1.4
	rel-5-3:1.2
	rel-5-2:1.2
	rel-5-1-branch:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.2
	rel-5-0-beta:1.2
	rel-4-5:1.2
	ctj-4-5-post:1.1
	ctj-4-5-pre:1.1;
locks; strict;
comment	@ * @;


1.10
date	2004.05.21.18.06.24;	author morrison;	state dead;
branches;
next	1.9;

1.9
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.05.07.46.16;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.16.19.40.48;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.20.17.07.40;	author jra;	state Exp;
branches
	1.6.2.1
	1.6.4.1
	1.6.10.1;
next	1.5;

1.5
date	2002.08.15.20.54.53;	author hartley;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.07.05.21.21;	author cjohnson;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.07.00.37.35;	author cjohnson;	state Exp;
branches;
next	1.2;

1.2
date	97.11.22.02.58.27;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	96.08.29.05.53.28;	author mike;	state Exp;
branches;
next	;

1.6.2.1
date	2002.09.19.18.01.12;	author morrison;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2004.03.17.21.16.49;	author morrison;	state Exp;
branches;
next	;

1.6.4.1
date	2002.09.26.23.03.51;	author morrison;	state Exp;
branches;
next	;

1.6.10.1
date	2004.03.18.18.08.13;	author erikg;	state Exp;
branches;
next	;


desc
@ispar.c
@


1.10
log
@moved to src/
@
text
@/*
 *			I S P A R . C
 *
 *  This subroutine is separated off from parallel.c so that
 *  bu_bomb() and others can call it, without causing either
 *  parallel.c or semaphore.c to get referenced and thus causing
 *  the loader to drag in all the parallel processing stuff from
 *  the vendor library.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
 */
#ifndef lint
static const char RCSispar[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libbu/ispar.c,v 1.9 2004/05/10 15:30:44 erikg Exp $ (ARL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include <signal.h>
#include "machine.h"
#include "externs.h"
#include "bu.h"


int	bu_pid_of_initiating_thread = 0;	/* don't declare in h/bu.h */

/*
 *			B U _ I S _ P A R A L L E L
 *
 *  A clean way for bu_bomb() to tell if this is a parallel application.
 *  If bu_parallel() is active, this routine will return non-zero.
 */
#ifndef WIN32
int
bu_is_parallel(void)
{
	if( bu_pid_of_initiating_thread != 0 )  return 1;
	return 0;
}

/*
 *			B U _ K I L L _ P A R A L L E L
 *
 *  Used by bu_bomb() to help terminate parallel threads,
 *  without dragging in the whole parallel library if it isn't being used.
 */
void
bu_kill_parallel(void)
{
	if( bu_pid_of_initiating_thread == 0 )  return;
	if( bu_pid_of_initiating_thread == getpid() )  return;
	(void)kill( bu_pid_of_initiating_thread, 9 );
}
#else
int
bu_is_parallel()
{
	if( bu_pid_of_initiating_thread != 0 )  return 1;
	return 0;
}

/*
 *			B U _ K I L L _ P A R A L L E L
 *
 *  Used by bu_bomb() to help terminate parallel threads,
 *  without dragging in the whole parallel library if it isn't being used.
 */
void
bu_kill_parallel()
{
	return;
}
#endif
@


1.9
log
@change conf.h to a wrapped config.h
@
text
@d21 1
a21 1
static const char RCSispar[] = "@@(#)$Header: /cvs/brlcad/libbu/ispar.c,v 1.8 2004/04/05 07:46:16 morrison Exp $ (ARL)";
@


1.8
log
@merge of ansi-6-0-branch into HEAD
@
text
@d21 1
a21 1
static const char RCSispar[] = "@@(#)$Header$ (ARL)";
d24 5
a28 1
#include "conf.h"
@


1.7
log
@merge of windows-6-0-branch into head
@
text
@d44 1
a44 1
bu_is_parallel()
d57 1
a57 1
bu_kill_parallel()
@


1.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d21 1
a21 1
static const char RCSispar[] = "@@(#)$Header: /c/CVS/brlcad/libbu/ispar.c,v 1.4 2000/07/07 05:21:21 cjohnson Exp $ (ARL)";
d42 1
d63 20
@


1.6.10.1
log
@merge from head
@
text
@d21 1
a21 1
static const char RCSispar[] = "@@(#)$Header$ (ARL)";
a41 1
#ifndef WIN32
a61 20
#else
int
bu_is_parallel()
{
	if( bu_pid_of_initiating_thread != 0 )  return 1;
	return 0;
}

/*
 *			B U _ K I L L _ P A R A L L E L
 *
 *  Used by bu_bomb() to help terminate parallel threads,
 *  without dragging in the whole parallel library if it isn't being used.
 */
void
bu_kill_parallel()
{
	return;
}
#endif
@


1.6.4.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d21 1
a21 1
static const char RCSispar[] = "@@(#)$Header: /c/CVS/brlcad/libbu/ispar.c,v 1.6 2002/08/20 17:07:40 jra Exp $ (ARL)";
a41 1
#ifndef WIN32
a61 20
#else
int
bu_is_parallel()
{
	if( bu_pid_of_initiating_thread != 0 )  return 1;
	return 0;
}

/*
 *			B U _ K I L L _ P A R A L L E L
 *
 *  Used by bu_bomb() to help terminate parallel threads,
 *  without dragging in the whole parallel library if it isn't being used.
 */
void
bu_kill_parallel()
{
	return;
}
#endif
@


1.6.2.1
log
@Initial ANSIfication
@
text
@d21 1
a21 1
static const char RCSispar[] = "@@(#)$Header: /c/CVS/brlcad/libbu/ispar.c,v 1.6 2002/08/20 17:07:40 jra Exp $ (ARL)";
d43 1
a43 1
bu_is_parallel(void)
d56 1
a56 1
bu_kill_parallel(void)
@


1.6.2.2
log
@sync branch with HEAD
@
text
@d21 1
a21 1
static const char RCSispar[] = "@@(#)$Header$ (ARL)";
a41 1
#ifndef WIN32
a61 20
#else
int
bu_is_parallel()
{
	if( bu_pid_of_initiating_thread != 0 )  return 1;
	return 0;
}

/*
 *			B U _ K I L L _ P A R A L L E L
 *
 *  Used by bu_bomb() to help terminate parallel threads,
 *  without dragging in the whole parallel library if it isn't being used.
 */
void
bu_kill_parallel()
{
	return;
}
#endif
@


1.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d43 1
a43 1
bu_is_parallel(void)
d56 1
a56 1
bu_kill_parallel(void)
@


1.4
log
@LINT plus minor bug fix in bu_tcl.c
@
text
@d21 1
a21 1
static const char RCSispar[] = "@@(#)$Header: /c/CVS/brlcad/libbu/ispar.c,v 1.3 2000/07/07 00:37:35 cjohnson Exp $ (ARL)";
d43 1
a43 1
bu_is_parallel()
d56 1
a56 1
bu_kill_parallel()
@


1.3
log
@LINT
@
text
@d21 1
a21 1
static char RCSispar[] = "@@(#)$Header: /c/CVS/brlcad/libbu/ispar.c,v 1.2 1997/11/22 02:58:27 mike Exp $ (ARL)";
@


1.2
log
@Initialized global variables to zero, for safety sake.  (Irix 6.4 paranoia)
@
text
@d21 1
a21 1
static char RCSispar[] = "@@(#)$Header: /m/cad/libbu/RCS/ispar.c,v 1.1 1996/08/29 05:53:28 mike Exp $ (ARL)";
d28 1
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
static char RCSispar[] = "@@(#)$Header$ (ARL)";
d33 1
a33 1
int	bu_pid_of_initiating_thread;	/* don't declare in h/bu.h */
@
