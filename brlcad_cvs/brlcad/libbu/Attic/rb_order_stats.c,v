head	1.15;
access;
symbols
	ansi-20040405-merged:1.11.2.2
	postmerge-20040405-ansi:1.13
	premerge-20040404-ansi:1.12
	postmerge-autoconf:1.12
	autoconf-freeze:1.11.10.2
	premerge-autoconf:1.12
	ansi-20040316-freeze:1.11.2.1
	postmerge-20040315-windows:1.12
	premerge-20040315-windows:1.12
	windows-20040315-freeze:1.11.4.1
	autoconf-20031203:1.11
	autoconf-20031202:1.11
	autoconf-branch:1.11.0.10
	phong-branch:1.11.0.8
	photonmap-branch:1.11.0.6
	rel-6-1-DP:1.11
	windows-branch:1.11.0.4
	rel-6-0-2:1.9
	ansi-branch:1.11.0.2
	rel-6-0-1-branch:1.9.0.2
	hartley-6-0-post:1.10
	hartley-6-0-pre:1.9
	rel-6-0-1:1.9
	rel-6-0:1.9
	rel-5-4:1.8
	offsite-5-3-pre:1.9
	rel-5-3:1.8
	rel-5-2:1.8
	rel-5-1-branch:1.8.0.2
	rel-5-1:1.8
	rel-5-0:1.7
	rel-5-0-beta:1.7
	rel-4-5:1.5
	ctj-4-5-post:1.5
	ctj-4-5-pre:1.5;
locks; strict;
comment	@ * @;


1.15
date	2004.05.21.18.06.25;	author morrison;	state dead;
branches;
next	1.14;

1.14
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.05.07.46.16;	author morrison;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.02.17.39.07;	author morrison;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.20.17.07.42;	author jra;	state Exp;
branches
	1.11.2.1
	1.11.4.1
	1.11.10.1;
next	1.10;

1.10
date	2002.08.15.20.54.55;	author hartley;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.07.05.20.13;	author cjohnson;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.28.18.55.10;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	99.01.12.16.19.55;	author pjt;	state Exp;
branches;
next	1.6;

1.6
date	98.12.30.01.25.45;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	96.08.27.07.10.51;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	95.09.20.16.00.44;	author pjt;	state Exp;
branches;
next	1.3;

1.3
date	95.09.20.14.25.31;	author pjt;	state Exp;
branches;
next	1.2;

1.2
date	95.09.20.13.54.30;	author pjt;	state Exp;
branches;
next	1.1;

1.1
date	95.09.20.12.07.33;	author pjt;	state Exp;
branches;
next	;

1.11.2.1
date	2002.09.19.18.01.14;	author morrison;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2004.03.17.21.16.51;	author morrison;	state Exp;
branches;
next	;

1.11.4.1
date	2004.03.11.23.41.50;	author morrison;	state Exp;
branches;
next	;

1.11.10.1
date	2004.02.12.18.39.19;	author erikg;	state Exp;
branches;
next	1.11.10.2;

1.11.10.2
date	2004.03.15.14.06.17;	author erikg;	state Exp;
branches;
next	;


desc
@     Routines to support order-statistic operations for a red-black tree
@


1.15
log
@moved to src/
@
text
@/*			R B _ O R D E R _ S T A T S . C
 *
 *	Routines to support order-statistic operations for a red-black tree
 *
 *  Author -
 *	Paul J. Tanenbaum
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */
#ifndef lint
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /n/xoff/cvs/brlcad/libbu/rb_order_stats.c,v 1.14 2004/05/10 15:30:44 erikg Exp $";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "rtlist.h"
#include "bu.h"
#include "compat4.h"
#include "./rb_internals.h"

/*		        _ R B _ S E L E C T ( )
 *
 *	Retrieve the element of rank k in one order of a red-black tree
 *
 *	This function has three parameters: the root of the tree to search,
 *	the order on which to do the searching, and the rank of interest.
 *	_rb_select() returns the discovered node.  It is an implemenation
 *	of the routine OS-SELECT on p. 282 of Cormen et al.
 */
static struct bu_rb_node *_rb_select (struct bu_rb_node *root, int order, int k)
{
    int		rank;

    BU_CKMAG(root, BU_RB_NODE_MAGIC, "red-black node");

    rank = bu_rb_size(bu_rb_left_child(root, order), order) + 1;
    if (root -> rbn_tree -> rbt_debug & BU_RB_DEBUG_OS)
	bu_log("_rb_select(<%x>, %d, %d): rank=%d\n",
	    root, order, k, rank);
    
    if (rank == k)
	return (root);
    else if (rank > k)
	return (_rb_select(bu_rb_left_child(root, order), order, k));
    else
	return (_rb_select(bu_rb_right_child(root, order), order, k - rank));
}

/*		        B U _ R B _ S E L E C T ( )
 *
 *		Applications interface to _rb_select()
 *
 *	This function has three parameters: the tree in which to search,
 *	the order on which to do the searching, and the rank of interest.
 *	On success, bu_rb_select() returns a pointer to the data block in
 *	the discovered node.  Otherwise, it returns NULL.
 */
void *bu_rb_select (bu_rb_tree *tree, int order, int k)
{
    struct bu_rb_node	*node;

    BU_CKMAG(tree, BU_RB_TREE_MAGIC, "red-black tree");
    BU_RB_CKORDER(tree, order);

    if ((k < 1) || (k > tree -> rbt_nm_nodes))
    {
	if (tree -> rbt_debug & BU_RB_DEBUG_OS)
	    bu_log("bu_rb_select(<%x>, %d, %d): k out of bounds [1, %d]\n",
		tree, order, k, tree -> rbt_nm_nodes);
	bu_rb_current(tree) = bu_rb_null(tree);
	return (NULL);
    }
    if (tree -> rbt_debug & BU_RB_DEBUG_OS)
	bu_log("bu_rb_select(<%x>, %d, %d): root=<%x>\n",
	    tree, order, k, bu_rb_root(tree, order));

    bu_rb_current(tree) = node
			= _rb_select(bu_rb_root(tree, order), order, k);
    return (bu_rb_data(node, order));
}

/*		        B U _ R B _ R A N K ( )
 *
 *	Determines the rank of a node in one order of a red-black tree
 *
 *	This function has two parameters: the tree in which to search
 *	and the order on which to do the searching.  If the current node
 *	is null, bu_rb_rank() returns 0.  Otherwise, it returns the rank
 *	of the current node in the specified order.  bu_rb_rank() is an
 *	implementation of the routine OS-RANK on p. 283 of Cormen et al.
 */
int bu_rb_rank (bu_rb_tree *tree, int order)
{
    int			rank;
    struct bu_rb_node	*node;
    struct bu_rb_node	*parent;
    struct bu_rb_node	*root;

    BU_CKMAG(tree, BU_RB_TREE_MAGIC, "red-black tree");
    BU_RB_CKORDER(tree, order);

    if ((node = bu_rb_current(tree)) == bu_rb_null(tree))
	return (0);

    root = bu_rb_root(tree, order);
    rank = bu_rb_size(bu_rb_left_child(node, order), order) + 1;
    while (node != root)
    {
	parent = bu_rb_parent(node, order);
	if (node == bu_rb_right_child(parent, order)) 
	    rank += bu_rb_size(bu_rb_left_child(parent, order), order) + 1;
	node = parent;
    }

    return (rank);
}
@


1.14
log
@change conf.h to a wrapped config.h
@
text
@d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /cvs/brlcad/libbu/rb_order_stats.c,v 1.13 2004/04/05 07:46:16 morrison Exp $";
@


1.13
log
@merge of ansi-6-0-branch into HEAD
@
text
@d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header$";
d25 5
a29 1
#include "conf.h"
@


1.12
log
@update copyright to include span through 2003
@
text
@d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.11 2002/08/20 17:07:42 jra Exp $";
d44 1
a44 6
static struct bu_rb_node *_rb_select (root, order, k)

struct bu_rb_node	*root;
int			order;
int			k;

d72 1
a72 6
void *bu_rb_select (tree, order, k)

bu_rb_tree	*tree;
int		order;
int		k;

d106 1
a106 5
int bu_rb_rank (tree, order)

bu_rb_tree	*tree;
int		order;

@


1.11
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1998 by the United States Army
d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.9 2000/07/07 05:20:13 cjohnson Exp $";
@


1.11.4.1
log
@sync to HEAD...
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /n/cad/c/CVS/brlcad/libbu/rb_order_stats.c,v 1.12 2004/02/02 17:39:07 morrison Exp $";
@


1.11.10.1
log
@merge from HEAD
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.12 2004/02/02 17:39:07 morrison Exp $";
@


1.11.10.2
log
@merge from head
@
text
@d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.11.10.1 2004/02/12 18:39:19 erikg Exp $";
@


1.11.2.1
log
@Initial ANSIfication
@
text
@d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.11 2002/08/20 17:07:42 jra Exp $";
d44 6
a49 1
static struct bu_rb_node *_rb_select (struct bu_rb_node *root, int order, int k)
d77 6
a82 1
void *bu_rb_select (bu_rb_tree *tree, int order, int k)
d116 5
a120 1
int bu_rb_rank (bu_rb_tree *tree, int order)
@


1.11.2.2
log
@sync branch with HEAD
@
text
@d18 1
a18 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header$";
@


1.10
log
@Converted from K&R to ANSI C - RFH
@
text
@d44 6
a49 1
static struct bu_rb_node *_rb_select (struct bu_rb_node *root, int order, int k)
d77 6
a82 1
void *bu_rb_select (bu_rb_tree *tree, int order, int k)
d116 5
a120 1
int bu_rb_rank (bu_rb_tree *tree, int order)
@


1.9
log
@LINT
@
text
@d22 1
a22 1
static const char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.8 2000/03/28 18:55:10 mike Exp $";
d44 1
a44 6
static struct bu_rb_node *_rb_select (root, order, k)

struct bu_rb_node	*root;
int			order;
int			k;

d72 1
a72 6
void *bu_rb_select (tree, order, k)

bu_rb_tree	*tree;
int		order;
int		k;

d106 1
a106 5
int bu_rb_rank (tree, order)

bu_rb_tree	*tree;
int		order;

@


1.8
log
@
Put libbu_filename_ prefixes on RCSid variables.
@
text
@d22 1
a22 1
static char libbu_rb_order_stats_RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.7 1999/01/12 16:19:55 pjt Exp $";
@


1.7
log
@Various details concerning folding libredblack into libbu
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.6 1998/12/30 01:25:45 mike Exp $";
@


1.6
log
@LibRedBlack routines now have a bu_ prefix.
@
text
@d1 1
a1 1
/*			B U _ R B _ O R D E R _ S T A T S . C
d22 1
a22 1
static char RCSid[] = "@@(#) $Header: /c/CVS/brlcad/libbu/rb_order_stats.c,v 1.5 1996/08/27 07:10:51 mike Exp $";
@


1.5
log
@Changed over to bu.h
@
text
@d1 1
a1 1
/*			R B _ O R D E R _ S T A T S . C
d5 15
a19 2
 *	Author:	Paul Tanenbaum
 *
d22 1
a22 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_order_stats.c,v 1.4 1995/09/20 16:00:44 pjt Exp pjt $";
a32 1
#include "redblack.h"
d44 1
a44 1
static struct rb_node *_rb_select (root, order, k)
d46 3
a48 3
struct rb_node	*root;
int		order;
int		k;
d53 1
a53 1
    RB_CKMAG(root, RB_NODE_MAGIC, "red-black node");
d55 3
a57 3
    rank = rb_size(rb_left_child(root, order), order) + 1;
    if (root -> rbn_tree -> rbt_debug & RB_DEBUG_OS)
	rt_log("_rb_select(<%x>, %d, %d): rank=%d\n",
d63 1
a63 1
	return (_rb_select(rb_left_child(root, order), order, k));
d65 1
a65 1
	return (_rb_select(rb_right_child(root, order), order, k - rank));
d68 1
a68 1
/*		        R B _ S E L E C T ( )
d74 1
a74 1
 *	On success, rb_select() returns a pointer to the data block in
d77 1
a77 1
void *rb_select (tree, order, k)
d79 3
a81 3
rb_tree	*tree;
int	order;
int	k;
d84 1
a84 1
    struct rb_node	*node;
d86 2
a87 2
    RB_CKMAG(tree, RB_TREE_MAGIC, "red-black tree");
    RB_CKORDER(tree, order);
d91 2
a92 2
	if (tree -> rbt_debug & RB_DEBUG_OS)
	    rt_log("rb_select(<%x>, %d, %d): k out of bounds [1, %d]\n",
d94 1
a94 1
	rb_current(tree) = rb_null(tree);
d97 7
a103 6
    if (tree -> rbt_debug & RB_DEBUG_OS)
	rt_log("rb_select(<%x>, %d, %d): root=<%x>\n",
	    tree, order, k, rb_root(tree, order));

    rb_current(tree) = node = _rb_select(rb_root(tree, order), order, k);
    return (rb_data(node, order));
d106 1
a106 1
/*		        R B _ R A N K ( )
d112 2
a113 2
 *	is null, rb_rank() returns 0.  Otherwise, it returns the rank
 *	of the current node in the specified order.  rb_rank() is an
d116 1
a116 1
int rb_rank (tree, order)
d118 2
a119 2
rb_tree	*tree;
int	order;
d123 3
a125 3
    struct rb_node	*node;
    struct rb_node	*parent;
    struct rb_node	*root;
d127 2
a128 2
    RB_CKMAG(tree, RB_TREE_MAGIC, "red-black tree");
    RB_CKORDER(tree, order);
d130 1
a130 1
    if ((node = rb_current(tree)) == rb_null(tree))
d133 2
a134 2
    root = rb_root(tree, order);
    rank = rb_size(rb_left_child(node, order), order) + 1;
d137 3
a139 3
	parent = rb_parent(node, order);
	if (node == rb_right_child(parent, order)) 
	    rank += rb_size(rb_left_child(parent, order), order) + 1;
@


1.4
log
@Changed a comment
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_order_stats.c,v 1.3 1995/09/20 14:25:31 pjt Exp pjt $";
d18 2
@


1.3
log
@1. Changed type of _rb_select() from (void *) to (struct rb_node *)
2. rb_select() now checks for k out of bounds and sets rbt_current
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_order_stats.c,v 1.2 1995/09/20 13:54:30 pjt Exp pjt $";
d27 2
a28 3
 *	On success, _rb_select() returns a pointer to the data block in
 *	the discovered node.  Otherwise, it returns NULL.  _rb_select() is
 *	an implementation of the routine OS-SELECT on p. 282 of Cormen et al.
@


1.2
log
@1. Renamed _rb_get_kth() and rb_get_kth()
   _rb_select() and rb_select(), respectively.
2. Fleshed out implementation of rb_rank().
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_order_stats.c,v 1.1 1995/09/20 12:07:33 pjt Exp pjt $";
d31 1
a31 1
static void *_rb_select (root, order, k)
d48 1
a48 1
	return (rb_data(root, order));
d76 8
d88 2
a89 1
    return (_rb_select(rb_root(tree, order), order, k));
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
static char RCSid[] = "@@(#) $Header: /m/cad/libredblack/RCS/rb_search.c,v 11.3 1995/07/10 20:17:51 pjt Exp pjt $";
d21 1
a21 1
/*		        _ R B _ G E T _ K T H ( )
d27 3
a29 2
 *	On success, _rb_get_kth() returns a pointer to the data block in
 *	the discovered node.  Otherwise, it returns NULL.
d31 1
a31 1
static void *_rb_get_kth (root, order, k)
d38 1
a38 1
    int			rank;
d44 1
a44 1
	rt_log("_rb_get_kth(<%x>, %d, %d): rank=%d\n",
d50 1
a50 1
	return (_rb_get_kth(rb_left_child(root, order), order, k));
d52 1
a52 1
	return (_rb_get_kth(rb_right_child(root, order), order, k - rank));
d55 1
a55 1
/*		        R B _ G E T _ K T H ( )
d57 1
a57 1
 *		Applications interface to _rb_get_kth()
d61 1
a61 1
 *	On success, rb_get_kth() returns a pointer to the data block in
d64 1
a64 1
void *rb_get_kth (tree, order, k)
d77 1
a77 1
	rt_log("rb_get_kth(<%x>, %d, %d): root=<%x>\n",
d80 1
a80 1
    return (_rb_get_kth(rb_root(tree, order), order, k));
d88 4
a91 2
 *	and the order on which to do the searching.  Rb_rank() returns
 *	the rank of the current node in the specified order.
d99 1
d101 2
d107 1
a107 1
    if (node == rb_null(tree))
d109 12
a120 2
    else
	return (1);
@
