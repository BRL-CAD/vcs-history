head	1.10;
access;
symbols
	ansi-20040405-merged:1.5.2.2
	postmerge-20040405-ansi:1.8
	premerge-20040404-ansi:1.7
	postmerge-autoconf:1.7
	autoconf-freeze:1.5.10.2
	premerge-autoconf:1.7
	ansi-20040316-freeze:1.5.2.1
	postmerge-20040315-windows:1.7
	premerge-20040315-windows:1.6
	windows-20040315-freeze:1.5.4.2
	autoconf-20031203:1.5
	autoconf-20031202:1.5
	autoconf-branch:1.5.0.10
	phong-branch:1.5.0.8
	photonmap-branch:1.5.0.6
	rel-6-1-DP:1.5
	windows-branch:1.5.0.4
	rel-6-0-2:1.3
	ansi-branch:1.5.0.2
	rel-6-0-1-branch:1.3.0.2
	hartley-6-0-post:1.4
	hartley-6-0-pre:1.3
	rel-6-0-1:1.3
	rel-6-0:1.3
	rel-5-4:1.2
	offsite-5-3-pre:1.3
	rel-5-3:1.2
	rel-5-2:1.2
	rel-5-1-branch:1.2.0.2
	rel-5-1:1.2;
locks; strict;
comment	@ * @;


1.10
date	2004.05.21.18.06.23;	author morrison;	state dead;
branches;
next	1.9;

1.9
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.05.07.46.16;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.16.19.40.48;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.02.17.39.07;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.20.17.07.39;	author jra;	state Exp;
branches
	1.5.2.1
	1.5.4.1
	1.5.10.1;
next	1.4;

1.4
date	2002.08.15.20.54.51;	author hartley;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.18.18.10.33;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.04.19.22.55;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.04.14.32.23;	author bparker;	state Exp;
branches;
next	;

1.5.2.1
date	2002.09.19.18.01.11;	author morrison;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2004.03.17.21.16.49;	author morrison;	state Exp;
branches;
next	;

1.5.4.1
date	2002.09.26.23.03.51;	author morrison;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2004.03.11.23.41.48;	author morrison;	state Exp;
branches;
next	;

1.5.10.1
date	2004.02.12.18.39.18;	author erikg;	state Exp;
branches;
next	1.5.10.2;

1.5.10.2
date	2004.03.18.18.08.13;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@moved to src/
@
text
@/*
 *				C M D H I S T . C
 *
 * The history routines were borrowed from mged/history.c
 * and modified to work with command history objects.
 *
 *  Author -
 *	   Robert G. Parker
 *
 *  Authors of mged/history.c -
 *	   Glenn Durfee
 *	   Robert G. Parker
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1998-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 *
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#ifdef HAVE_STRING_H
#include <string.h>
#endif

#include "tcl.h"

#include "machine.h"
#include "externs.h"
#include "cmd.h"

/*
 *	H I S T O R Y _ R E C O R D
 *
 *	Stores the given command with start and finish times in the
 *	history vls'es.
 */
static void
history_record(struct bu_cmdhist_obj *chop, struct bu_vls *cmdp, struct timeval *start, struct timeval *finish, int status)
                                 
                         
                                    
                   /* Either TCL_OK or TCL_ERROR */
{
	struct bu_cmdhist *new_hist;

	if (strcmp(bu_vls_addr(cmdp), "\n") == 0)
		return;

	new_hist = (struct bu_cmdhist *)bu_malloc(sizeof(struct bu_cmdhist),
						  "mged history");
	bu_vls_init(&new_hist->h_command);
	bu_vls_vlscat(&new_hist->h_command, cmdp);
	new_hist->h_start = *start;
	new_hist->h_finish = *finish;
	new_hist->h_status = status;
	BU_LIST_INSERT(&chop->cho_head.l, &new_hist->l);

	chop->cho_curr = &chop->cho_head;
}

static int
timediff(struct timeval *tvdiff, struct timeval *start, struct timeval *finish)
{
	if (finish->tv_sec == 0 && finish->tv_usec == 0)
		return -1;
	if (start->tv_sec == 0 && start->tv_usec == 0)
		return -1;
    
	tvdiff->tv_sec = finish->tv_sec - start->tv_sec;
	tvdiff->tv_usec = finish->tv_usec - start->tv_usec;
	if (tvdiff->tv_usec < 0) {
		--tvdiff->tv_sec;
		tvdiff->tv_usec += 1000000L;
	}

	return 0;
}

/*
 * Prints out the command history.
 *
 * USAGE:
 *        procname history [-delays] [-outfile filename]
 */
int
bu_cmdhist_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_cmdhist_obj *chop = (struct  bu_cmdhist_obj *)clientData;
	FILE *fp;
	int with_delays = 0;
	struct bu_cmdhist *hp, *hp_prev;
	struct bu_vls str;
	struct timeval tvdiff;

	if (argc < 2 || 5 < argc) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "help history");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	fp = NULL;
	while (argc >= 3)  {
		if (strcmp(argv[2], "-delays") == 0)
			with_delays = 1;
		else if( strcmp(argv[2], "-outfile") == 0 ) {
			if (fp != NULL) {
				fclose(fp);
				Tcl_AppendResult(interp, "history: -outfile option given more than once\n",
						 (char *)NULL);
				return TCL_ERROR;
			} else if (argc < 4 || strcmp(argv[3], "-delays") == 0) {
				Tcl_AppendResult(interp, "history: I need a file name\n", (char *)NULL);
				return TCL_ERROR;
			} else {
				fp = fopen( argv[3], "a+" );
				if (fp == NULL) {
					Tcl_AppendResult(interp, "history: error opening file", (char *)NULL);
					return TCL_ERROR;
				}
				--argc;
				++argv;
			}
		} else {
			Tcl_AppendResult(interp, "Invalid option ", argv[2], "\n", (char *)NULL);
		}
		--argc;
		++argv;
	}

	bu_vls_init(&str);
	for (BU_LIST_FOR(hp, bu_cmdhist, &chop->cho_head.l)) {
		bu_vls_trunc(&str, 0);
		hp_prev = BU_LIST_PREV(bu_cmdhist, &hp->l);
		if (with_delays && BU_LIST_NOT_HEAD(hp_prev, &chop->cho_head.l)) {
			if (timediff(&tvdiff, &(hp_prev->h_finish), &(hp->h_start)) >= 0)
				bu_vls_printf(&str, "delay %d %d\n", tvdiff.tv_sec,
					      tvdiff.tv_usec);

		}

		if (hp->h_status == TCL_ERROR)
			bu_vls_printf(&str, "# ");
		bu_vls_vlscat(&str, &(hp->h_command));

		if (fp != NULL)
			bu_vls_fwrite(fp, &str);
		else
			Tcl_AppendResult(interp, bu_vls_addr(&str), (char *)NULL);
	}

	if (fp != NULL)
		fclose(fp);

	return TCL_OK;
}

/*
 * Add a command to the history list.
 *
 * USAGE:
 *        procname add cmd
 */
int
bu_cmdhist_add(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_cmdhist_obj *chop = (struct  bu_cmdhist_obj *)clientData;
	struct bu_vls vls;
	struct timeval zero;

	if(argc != 3){
		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib cmdhist_add");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	if (argv[2][0] == '\n' || argv[2][0] == '\0')
		return TCL_OK;

	bu_vls_init(&vls);
	bu_vls_strcpy(&vls, argv[2]);
	if (argv[2][strlen(argv[2])-1] != '\n')
		bu_vls_putc(&vls, '\n');

	zero.tv_sec = zero.tv_usec = 0L;
	history_record(chop, &vls, &zero, &zero, TCL_OK);

	bu_vls_free(&vls);
	return TCL_OK;
}

/*
 * Set the current command to the previous command.
 *
 * USAGE:
 *        procname prev
 */
int
bu_cmdhist_prev(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_cmdhist_obj *chop = (struct  bu_cmdhist_obj *)clientData;
	struct bu_cmdhist *hp;

	if (argc != 2) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib cmdhist_prev");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	hp = BU_LIST_PLAST(bu_cmdhist, chop->cho_curr);
	if (BU_LIST_NOT_HEAD(hp, &chop->cho_head.l))
		chop->cho_curr = hp;

	Tcl_AppendResult(interp, bu_vls_addr(&chop->cho_curr->h_command), (char *)NULL);
	return TCL_OK;
}

/*
 * Return the current command.
 *
 * USAGE:
 *        procname curr
 */
int
bu_cmdhist_curr(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_cmdhist_obj *chop = (struct  bu_cmdhist_obj *)clientData;

	if (argc != 2) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib cmdhist_curr");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	if (BU_LIST_NOT_HEAD(chop->cho_curr, &chop->cho_head.l))
		Tcl_AppendResult(interp, bu_vls_addr(&chop->cho_curr->h_command), (char *)NULL);

	return TCL_OK;
}

/*
 * Set the current command to the next command.
 *
 * USAGE:
 *        procname next
 */
int
bu_cmdhist_next(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	struct bu_cmdhist_obj *chop = (struct  bu_cmdhist_obj *)clientData;

	if (argc != 2) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helplib cmdhist_next");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	if (BU_LIST_IS_HEAD(chop->cho_curr, &chop->cho_head.l))
		return TCL_ERROR;
    
	chop->cho_curr = BU_LIST_PNEXT(bu_cmdhist, chop->cho_curr);
	if (BU_LIST_IS_HEAD(chop->cho_curr, &chop->cho_head.l))
		return TCL_ERROR;

	Tcl_AppendResult(interp, bu_vls_addr(&chop->cho_curr->h_command), (char *)NULL);
	return TCL_OK;
}

#if 0
/*
 *	F _ D E L A Y
 *
 * 	Uses select to delay for the specified amount of seconds and 
 *	  microseconds.
 */

int
f_delay(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
{
	struct timeval tv;

	if(argc < 3 || 3 < argc){
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "help delay");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	tv.tv_sec = atoi(argv[1]);
	tv.tv_usec = atoi(argv[2]);
	select(0, NULL, NULL, NULL, &tv);

	return TCL_OK;
}
#endif
@


1.9
log
@change conf.h to a wrapped config.h
@
text
@@


1.8
log
@merge of ansi-6-0-branch into HEAD
@
text
@d29 5
a33 1
#include "conf.h"
@


1.7
log
@merge of windows-6-0-branch into head
@
text
@d47 5
a51 5
history_record(chop, cmdp, start, finish, status)
     struct bu_cmdhist_obj *chop;
     struct bu_vls *cmdp;
     struct timeval *start, *finish;
     int status;   /* Either TCL_OK or TCL_ERROR */
d71 1
a71 2
timediff(tvdiff, start, finish)
	struct timeval *tvdiff, *start, *finish;
d95 1
a95 5
bu_cmdhist_history(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d177 1
a177 5
bu_cmdhist_add(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d213 1
a213 5
bu_cmdhist_prev(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d243 1
a243 5
bu_cmdhist_curr(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d270 1
a270 5
bu_cmdhist_next(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
@


1.6
log
@update copyright to include span through 2003
@
text
@d72 1
a72 1
     struct timeval *tvdiff, *start, *finish;
d156 1
@


1.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1998 by the United States Army
@


1.5.10.1
log
@merge from HEAD
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
@


1.5.10.2
log
@merge from head
@
text
@d72 1
a72 1
	struct timeval *tvdiff, *start, *finish;
a155 1

@


1.5.4.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d72 1
a72 1
	struct timeval *tvdiff, *start, *finish;
a155 1

@


1.5.4.2
log
@sync to HEAD...
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
@


1.5.2.1
log
@Initial ANSIfication
@
text
@d47 5
a51 5
history_record(struct bu_cmdhist_obj *chop, struct bu_vls *cmdp, struct timeval *start, struct timeval *finish, int status)
                                 
                         
                                    
                   /* Either TCL_OK or TCL_ERROR */
d71 2
a72 1
timediff(struct timeval *tvdiff, struct timeval *start, struct timeval *finish)
d96 5
a100 1
bu_cmdhist_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d181 5
a185 1
bu_cmdhist_add(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d221 5
a225 1
bu_cmdhist_prev(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d255 5
a259 1
bu_cmdhist_curr(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d286 5
a290 1
bu_cmdhist_next(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


1.5.2.2
log
@sync branch with HEAD
@
text
@d24 1
a24 1
 *	This software is Copyright (C) 1998-2004 by the United States Army
a150 1

@


1.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d47 5
a51 5
history_record(struct bu_cmdhist_obj *chop, struct bu_vls *cmdp, struct timeval *start, struct timeval *finish, int status)
                                 
                         
                                    
                   /* Either TCL_OK or TCL_ERROR */
d71 2
a72 1
timediff(struct timeval *tvdiff, struct timeval *start, struct timeval *finish)
d96 5
a100 1
bu_cmdhist_history(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d181 5
a185 1
bu_cmdhist_add(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d221 5
a225 1
bu_cmdhist_prev(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d255 5
a259 1
bu_cmdhist_curr(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d286 5
a290 1
bu_cmdhist_next(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


1.3
log
@Patches for compiling under RedHat 7.0
@
text
@d47 5
a51 5
history_record(chop, cmdp, start, finish, status)
     struct bu_cmdhist_obj *chop;
     struct bu_vls *cmdp;
     struct timeval *start, *finish;
     int status;   /* Either TCL_OK or TCL_ERROR */
d71 1
a71 2
timediff(tvdiff, start, finish)
     struct timeval *tvdiff, *start, *finish;
d95 1
a95 5
bu_cmdhist_history(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d176 1
a176 5
bu_cmdhist_add(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d212 1
a212 5
bu_cmdhist_prev(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d242 1
a242 5
bu_cmdhist_curr(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
d269 1
a269 5
bu_cmdhist_next(clientData, interp, argc, argv)
     ClientData clientData;
     Tcl_Interp *interp;
     int argc;
     char **argv;
@


1.2
log
@bu_cmdhist_history: mods to properly interpret argv
@
text
@d30 4
@


1.1
log
@Command History Objects and support routines
@
text
@d116 2
a117 2
	while (argc >= 2)  {
		if (strcmp(argv[1], "-delays") == 0)
d119 1
a119 1
		else if( strcmp(argv[1], "-outfile") == 0 ) {
d125 1
a125 1
			} else if (argc < 3 || strcmp(argv[2], "-delays") == 0) {
d129 1
a129 1
				fp = fopen( argv[2], "a+" );
d138 1
a138 1
			Tcl_AppendResult(interp, "Invalid option ", argv[1], "\n", (char *)NULL);
@

