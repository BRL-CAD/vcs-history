head	1.22;
access;
symbols
	ansi-20040405-merged:1.18.2.2
	postmerge-20040405-ansi:1.20
	premerge-20040404-ansi:1.19
	postmerge-autoconf:1.19
	autoconf-freeze:1.18.10.1
	premerge-autoconf:1.19
	ansi-20040316-freeze:1.18.2.1
	postmerge-20040315-windows:1.19
	premerge-20040315-windows:1.18
	windows-20040315-freeze:1.18.4.1
	autoconf-20031203:1.18
	autoconf-20031202:1.18
	autoconf-branch:1.18.0.10
	phong-branch:1.18.0.8
	photonmap-branch:1.18.0.6
	rel-6-1-DP:1.18
	windows-branch:1.18.0.4
	rel-6-0-2:1.16
	ansi-branch:1.18.0.2
	rel-6-0-1-branch:1.16.0.2
	hartley-6-0-post:1.17
	hartley-6-0-pre:1.16
	rel-6-0-1:1.16
	rel-6-0:1.16
	rel-5-4:1.9
	offsite-5-3-pre:1.15
	rel-5-3:1.9
	rel-5-2:1.9
	rel-5-1-branch:1.9.0.2
	rel-5-1:1.9
	rel-5-0:1.5
	rel-5-0-beta:1.5
	rel-4-5:1.4
	ctj-4-5-post:1.3
	ctj-4-5-pre:1.3;
locks; strict;
comment	@ * @;


1.22
date	2004.05.21.18.06.23;	author morrison;	state dead;
branches;
next	1.21;

1.21
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.20;

1.20
date	2004.04.05.07.46.16;	author morrison;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.16.19.40.48;	author morrison;	state Exp;
branches;
next	1.18;

1.18
date	2002.08.20.17.07.39;	author jra;	state Exp;
branches
	1.18.2.1
	1.18.4.1
	1.18.10.1;
next	1.17;

1.17
date	2002.08.15.20.54.50;	author hartley;	state Exp;
branches;
next	1.16;

1.16
date	2001.04.20.22.29.05;	author morrison;	state Exp;
branches;
next	1.15;

1.15
date	2000.10.18.18.10.33;	author butler;	state Exp;
branches;
next	1.14;

1.14
date	2000.09.09.04.08.17;	author mike;	state Exp;
branches;
next	1.13;

1.13
date	2000.09.09.03.24.38;	author mike;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.08.14.21.53;	author bparker;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.14.20.22.09;	author butler;	state Exp;
branches;
next	1.10;

1.10
date	2000.07.07.05.21.20;	author cjohnson;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.28.19.26.25;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.15.22.53.26;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	99.11.18.21.48.41;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	99.11.18.21.14.08;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	98.12.11.04.26.25;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	97.11.22.02.58.29;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	96.08.29.05.53.28;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	96.08.28.06.42.44;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.06.18.33;	author mike;	state Exp;
branches;
next	;

1.18.2.1
date	2002.09.19.18.01.11;	author morrison;	state Exp;
branches;
next	1.18.2.2;

1.18.2.2
date	2004.03.17.21.16.48;	author morrison;	state Exp;
branches;
next	;

1.18.4.1
date	2002.09.26.23.03.50;	author morrison;	state Exp;
branches;
next	;

1.18.10.1
date	2004.03.18.18.08.13;	author erikg;	state Exp;
branches;
next	;


desc
@bomb.c
@


1.22
log
@moved to src/
@
text
@/*
 *			B O M B . C
 *
 *  This routine is called on a fatal
 *  error, where no recovery is possible.
 *
 *  Functions -
 *	bu_bomb		Called upon fatal error.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimited.
 */
#ifndef lint
static const char RCSbomb[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libbu/bomb.c,v 1.21 2004/05/10 15:30:44 erikg Exp $ (ARL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <ctype.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#include "machine.h"
#include "externs.h"
#include "bu.h"

#ifdef HAVE_UNIX_IO
#include <fcntl.h>
#endif

#if 1
struct bu_hook_list bu_bomb_hook_list = {
	{	BU_LIST_HEAD_MAGIC, 
		&bu_bomb_hook_list.l, 
		&bu_bomb_hook_list.l
	}, 
	BUHOOK_NULL,
	GENPTR_NULL
};
#else
struct bu_hook_list bu_bomb_hook_list;
#endif

/*
 * These variables are global because BU_SETJUMP() *must* be a macro.
 * If you replace this version of bu_bomb() with one of your own,
 * you must also provide these variables, even if you don't use them.
 */
int		bu_setjmp_valid = 0;	/* !0 = bu_jmpbuf is valid */
jmp_buf		bu_jmpbuf;		/* for BU_SETJMP() */

/*
 *			B U _ B O M B
 *  
 *  Abort the program with a message.
 *  Only produce a core-dump when that debugging bit is set.
 */
void
bu_bomb(const char *str)
{

	/* First thing, always always always try to print the string */
	fprintf(stderr,"\n%s\n", str);
	fflush(stderr);

	/* MGED would like to be able to additional logging, do callbacks. */
	if (BU_LIST_NON_EMPTY(&bu_bomb_hook_list.l)) {
		bu_call_hook(&bu_bomb_hook_list, (genptr_t)str);
	}

	if( bu_setjmp_valid )  {
		/* Application is catching fatal errors */
		if( bu_is_parallel() )  {
			fprintf(stderr,"bu_bomb(): in parallel mode, could not longjmp up to application handler\n");
		} else {
			/* Application is non-parallel, so this is safe */
			fprintf(stderr,"bu_bomb(): taking longjmp up to application handler\n");
#if __STDC__
			longjmp( (void *)(bu_jmpbuf), 1 );
#else
			longjmp( (int *)(bu_jmpbuf), 1 );
#endif
			/* NOTREACHED */
		}
	}

#if defined(HAVE_UNIX_IO)
	/*
	 * No application level error handling,
	 * go to extra pains to ensure that user gets to see this message.
	 * For example, mged hijacks output sent to stderr.
	 */
	{
		int	fd = open("/dev/tty", 1);
		if( fd >= 0 )  {
			write( fd, str, strlen(str) );
			close(fd);
		}
	}
#endif

	/* If in parallel mode, try to signal the leader to die. */
	bu_kill_parallel();

	if( bu_debug & BU_DEBUG_COREDUMP )  {
		fprintf(stderr,"bu_bomb causing intentional core dump due to debug flag\n");
		abort();	/* should dump */
	}

	exit(12);
}
@


1.21
log
@change conf.h to a wrapped config.h
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /cvs/brlcad/libbu/bomb.c,v 1.20 2004/04/05 07:46:16 morrison Exp $ (ARL)";
@


1.20
log
@merge of ansi-6-0-branch into HEAD
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header$ (ARL)";
d24 5
a28 1
#include "conf.h"
@


1.19
log
@merge of windows-6-0-branch into head
@
text
@d70 1
a70 2
bu_bomb(str)
const char *str;
@


1.18
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.16 2001/04/20 22:29:05 morrison Exp $ (ARL)";
d28 1
d30 1
@


1.18.10.1
log
@merge from head
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header$ (ARL)";
a27 1
#ifdef HAVE_UNISTD_H
a28 1
#endif
@


1.18.4.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.18 2002/08/20 17:07:39 jra Exp $ (ARL)";
a27 1
#ifdef HAVE_UNISTD_H
a28 1
#endif
@


1.18.2.1
log
@Initial ANSIfication
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.18 2002/08/20 17:07:39 jra Exp $ (ARL)";
d68 2
a69 1
bu_bomb(const char *str)
@


1.18.2.2
log
@sync branch with HEAD
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header$ (ARL)";
a27 1
#ifdef HAVE_UNISTD_H
a28 1
#endif
@


1.17
log
@Converted from K&R to ANSI C - RFH
@
text
@d68 2
a69 1
bu_bomb(const char *str)
@


1.16
log
@CONST to const
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.15 2000/10/18 18:10:33 butler Exp $ (ARL)";
d68 1
a68 2
bu_bomb(str)
const char *str;
@


1.15
log
@Patches for compiling under RedHat 7.0
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.14 2000/09/09 04:08:17 mike Exp $ (ARL)";
d69 1
a69 1
CONST char *str;
@


1.14
log
@
Oops, left a debug fprintf() in.
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.13 2000/09/09 03:24:38 mike Exp $ (ARL)";
d29 3
@


1.13
log
@
always always always try to print the string.
Fixed incorrect initialization of structure.
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.12 2000/09/08 14:21:53 bparker Exp $ (ARL)";
a67 1
fprintf(stderr, "bu_bomb\n");
@


1.12
log
@Add call to bu_call_hook() to bu_bomb();
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.11 2000/07/14 20:22:09 butler Exp $ (ARL)";
d40 2
a41 2
		&bu_log_hook_list.l, 
		&bu_log_hook_list.l
d68 8
a75 4
	if (BU_LIST_IS_EMPTY(&bu_bomb_hook_list.l)) {
		fprintf(stderr,"\n%s\n", str);
		fflush(stderr);
	} else {
@


1.11
log
@Added include of unistd.h to get declaration of write()
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.10 2000/07/07 05:21:20 cjohnson Exp $ (ARL)";
d37 13
d68 6
a73 2
	fprintf(stderr,"\n%s\n", str);
	fflush(stderr);
@


1.10
log
@LINT plus minor bug fix in bu_tcl.c
@
text
@d21 1
a21 1
static const char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.9 2000/03/28 19:26:25 mike Exp $ (ARL)";
d28 1
@


1.9
log
@
HAVE_UNIX_IO
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.8 2000/03/15 22:53:26 mike Exp $ (ARL)";
@


1.8
log
@
Added comment providing more information about replacing
bu_bomb with a custom version.
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.7 1999/11/18 21:48:41 mike Exp $ (ARL)";
d32 4
d73 1
a73 1
#if defined(unix) || defined(__unix) || defined(O_WRONLY)
@


1.7
log
@
Try extra-hard to make sure user (me!!) sees bu_bomb() messages.
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.6 1999/11/18 21:14:08 mike Exp $ (ARL)";
d32 5
a36 1
/* These are global because BU_SETJUMP() *must* be a macro */
@


1.6
log
@
Signal parallel leader before dumping core, not afterward. :-)
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.5 1998/12/11 04:26:25 mike Exp $ (ARL)";
d64 15
@


1.5
log
@Fixed comment
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header: /c/CVS/brlcad/libbu/bomb.c,v 1.4 1997/11/22 02:58:29 mike Exp $ (ARL)";
d65 3
a71 3

	/* If in parallel mode, try to signal the leader to die. */
	bu_kill_parallel();
@


1.4
log
@Initialized global variables to zero, for safety sake.  (Irix 6.4 paranoia)
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header: /m/cad/libbu/RCS/bomb.c,v 1.3 1996/08/29 05:53:28 mike Exp $ (ARL)";
d37 1
a37 1
 *			R T _ B O M B
@


1.3
log
@Split off some parallel routines into ispar.c
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header: /m/cad/libbu/RCS/bomb.c,v 1.2 1996/08/28 06:42:44 mike Exp mike $ (ARL)";
d33 1
a33 1
int		bu_setjmp_valid;	/* !0 = bu_jmpbuf is valid */
@


1.2
log
@Asked question.
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header: /m/cad/libbu/RCS/bomb.c,v 1.1 1996/08/27 06:18:33 mike Exp mike $ (ARL)";
d70 2
a71 1
	/* In parallel mode, should we try to signal the others to die too? */
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
static char RCSbomb[] = "@@(#)$Header$ (ARL)";
d69 3
@
