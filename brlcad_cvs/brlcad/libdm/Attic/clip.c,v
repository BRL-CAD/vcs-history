head	1.8;
access;
symbols
	ansi-20040405-merged:1.4.2.2
	postmerge-20040405-ansi:1.6
	premerge-20040404-ansi:1.5
	postmerge-autoconf:1.5
	autoconf-freeze:1.4.10.2
	premerge-autoconf:1.5
	ansi-20040316-freeze:1.4.2.1
	postmerge-20040315-windows:1.5
	premerge-20040315-windows:1.5
	windows-20040315-freeze:1.4.4.1
	autoconf-20031203:1.4
	autoconf-20031202:1.4
	autoconf-branch:1.4.0.10
	phong-branch:1.4.0.8
	photonmap-branch:1.4.0.6
	rel-6-1-DP:1.4
	windows-branch:1.4.0.4
	rel-6-0-2:1.2
	ansi-branch:1.4.0.2
	rel-6-0-1-branch:1.2.0.2
	hartley-6-0-post:1.3
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2
	rel-5-4:1.1
	offsite-5-3-pre:1.2
	rel-5-3:1.1
	rel-5-2:1.1
	rel-5-1-branch:1.1.0.2
	rel-5-1:1.1
	rel-5-0:1.1
	rel-5-0-beta:1.1
	rel-4-5:1.1
	ctj-4-5-post:1.1
	ctj-4-5-pre:1.1;
locks; strict;
comment	@ * @;


1.8
date	2004.05.21.18.06.25;	author morrison;	state dead;
branches;
next	1.7;

1.7
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.05.07.45.07;	author morrison;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.02.17.39.08;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.20.17.07.44;	author jra;	state Exp;
branches
	1.4.2.1
	1.4.4.1
	1.4.10.1;
next	1.3;

1.3
date	2002.08.15.20.54.57;	author hartley;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.12.03.24.43;	author cjohnson;	state Exp;
branches;
next	1.1;

1.1
date	96.09.23.17.59.46;	author bparker;	state Exp;
branches;
next	;

1.4.2.1
date	2002.09.19.18.01.16;	author morrison;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2004.03.17.21.16.57;	author morrison;	state Exp;
branches;
next	;

1.4.4.1
date	2004.03.11.23.42.00;	author morrison;	state Exp;
branches;
next	;

1.4.10.1
date	2004.02.12.19.45.18;	author erikg;	state Exp;
branches;
next	1.4.10.2;

1.4.10.2
date	2004.03.15.14.06.18;	author erikg;	state Exp;
branches;
next	;


desc
@Clipping utilities for 2D and 3D line segments
@


1.8
log
@moved to src/
@
text
@/*
 *			C L I P . C
 *
 *  Functions -
 *	clip	clip a 2-D integer line seg against the size of the display
 *	vclip	clip a 3-D floating line segment against a bounding RPP.
 *
 *  Authors -
 *	clip() was written by Doug Kingston, 14 October 81
 *	Based on the clipping routine in "Principles of Computer
 *	Graphics" by Newman and Sproull, 1973, McGraw/Hill.
 *
 *	vclip() was adapted from RT by Mike Muuss, 17 January 1985.
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/libdm/clip.c,v 1.7 2004/05/10 15:30:44 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "vmath.h"

static int	code(fastf_t x, fastf_t y);

int
clip (fastf_t *xp1, fastf_t *yp1, fastf_t *xp2, fastf_t *yp2)
{
	char code1, code2;

	code1 = code (*xp1, *yp1);
	code2 = code (*xp2, *yp2);

	while (code1 || code2) {
		if (code1 & code2)
			return (-1);	/* No part is visible */

		/* SWAP codes, X's, and Y's */
		if (code1 == 0) {
			char ctemp;
			fastf_t temp;

			ctemp = code1;
			code1 = code2;
			code2 = ctemp;

			temp = *xp1;
			*xp1 = *xp2;
			*xp2 = temp;

			temp = *yp1;
			*yp1 = *yp2;
			*yp2 = temp;
		}

		if (code1 & 01)  {	/* Push toward left edge */
			*yp1 = *yp1 + (*yp2-*yp1)*(-2048.0-*xp1)/(*xp2-*xp1);
			*xp1 = -2048.0;
		}
		else if (code1 & 02)  {	/* Push toward right edge */
			*yp1 = *yp1 + (*yp2-*yp1)*(2047.0-*xp1)/(*xp2-*xp1);
			*xp1 = 2047.0;
		}
		else if (code1 & 04)  {	/* Push toward bottom edge */
			*xp1 = *xp1 + (*xp2-*xp1)*(-2048.0-*yp1)/(*yp2-*yp1);
			*yp1 = -2048.0;
		}
		else if (code1 & 010)  {	/* Push toward top edge */
			*xp1 = *xp1 + (*xp2-*xp1)*(2047.0-*yp1)/(*yp2-*yp1);
			*yp1 = 2047.0;
		}

		code1 = code (*xp1, *yp1);
	}

	return (0);
}

static int
code (fastf_t x, fastf_t y)
{
	int cval;

	cval = 0;
	if (x < -2048.0)
		cval |= 01;
	else if (x > 2047.0)
		cval |= 02;

	if (y < -2048.0)
		cval |= 04;
	else if (y > 2047.0)
		cval |= 010;

	return (cval);
}

#define EPSILON		0.0001
#define INFINITY	100000000.0


/*
 *			V C L I P
 *
 *  Clip a ray against a rectangular parallelpiped (RPP)
 *  that has faces parallel to the coordinate planes (a clipping RPP).
 *  The RPP is defined by a minimum point and a maximum point.
 *
 *  Returns -
 *	 0  if ray does not hit RPP,
 *	!0  if ray hits RPP.
 *
 *  Implicit Return -
 *	if !0 was returned, "a" and "b" have been clipped to the RPP.
 */
int
vclip(fastf_t *a, fastf_t *b, register fastf_t *min, register fastf_t *max)
{
	static vect_t diff;
	static double sv;
	static double st;
	static double mindist, maxdist;
	register fastf_t *pt = &a[0];
	register fastf_t *dir = &diff[0];
	register int i;

	mindist = -INFINITY;
	maxdist = INFINITY;
	VSUB2( diff, b, a );

	for( i=0; i < 3; i++, pt++, dir++, max++, min++ )  {
		if( *dir < -EPSILON )  {
			if( (sv = (*min - *pt) / *dir) < 0.0 )
				return(0);	/* MISS */
			if(maxdist > sv)
				maxdist = sv;
			if( mindist < (st = (*max - *pt) / *dir) )
				mindist = st;
		}  else if( *dir > EPSILON )  {
			if( (st = (*max - *pt) / *dir) < 0.0 )
				return(0);	/* MISS */
			if(maxdist > st)
				maxdist = st;
			if( mindist < ((sv = (*min - *pt) / *dir)) )
				mindist = sv;
		}  else  {
			/*
			 *  If direction component along this axis is NEAR 0,
			 *  (ie, this ray is aligned with this axis),
			 *  merely check against the boundaries.
			 */
			if( (*min > *pt) || (*max < *pt) )
				return(0);	/* MISS */;
		}
	}
	if( mindist >= maxdist )
		return(0);	/* MISS */

	if( mindist > 1 || maxdist < 0 )
		return(0);	/* MISS */

	if( mindist <= 0 && maxdist >= 1 )
		return(1);	/* HIT, no clipping needed */

	/* Don't grow one end of a contained segment */
	if( mindist < 0 )
		mindist = 0;
	if( maxdist > 1 )
		maxdist = 1;

	/* Compute actual intercept points */
	VJOIN1( b, a, maxdist, diff );		/* b must go first */
	VJOIN1( a, a, mindist, diff );
	return(1);		/* HIT */
}
@


1.7
log
@change conf.h to a wrapped config.h
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/libdm/clip.c,v 1.6 2004/04/05 07:45:07 morrison Exp $ (BRL)";
@


1.6
log
@merge of ansi-6-0-branch into HEAD
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d28 5
a32 1
#include "conf.h"
@


1.5
log
@update copyright to include span through 2003
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libdm/clip.c,v 1.4 2002/08/20 17:07:44 jra Exp $ (BRL)";
d34 1
a34 1
static int	code();
d37 1
a37 2
clip (xp1, yp1, xp2, yp2)
vect_t	xp1, yp1, xp2, yp2;
d90 1
a90 2
code (x, y)
fastf_t x, y;
d127 1
a127 3
vclip( a, b, min, max )
vect_t a, b;
register fastf_t *min, *max;
@


1.4
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d21 1
a21 1
 *	This software is Copyright (C) 1985 by the United States Army.
d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libdm/clip.c,v 1.2 2000/07/12 03:24:43 cjohnson Exp $ (BRL)";
@


1.4.4.1
log
@sync to HEAD...
@
text
@d21 1
a21 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/libdm/clip.c,v 1.5 2004/02/02 17:39:08 morrison Exp $ (BRL)";
@


1.4.10.1
log
@merge from HEAD
@
text
@d21 1
a21 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libdm/clip.c,v 1.5 2004/02/02 17:39:08 morrison Exp $ (BRL)";
@


1.4.10.2
log
@merge from head
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libdm/clip.c,v 1.4.10.1 2004/02/12 19:45:18 erikg Exp $ (BRL)";
@


1.4.2.1
log
@Initial ANSIfication
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libdm/clip.c,v 1.4 2002/08/20 17:07:44 jra Exp $ (BRL)";
d34 1
a34 1
static int	code(fastf_t x, fastf_t y);
d37 2
a38 1
clip (fastf_t *xp1, fastf_t *yp1, fastf_t *xp2, fastf_t *yp2)
d91 2
a92 1
code (fastf_t x, fastf_t y)
d129 3
a131 1
vclip(fastf_t *a, fastf_t *b, register fastf_t *min, register fastf_t *max)
@


1.4.2.2
log
@sync branch with HEAD
@
text
@d21 1
a21 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d25 1
a25 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


1.3
log
@Converted from K&R to ANSI C - RFH
@
text
@d34 1
a34 1
static int	code(fastf_t x, fastf_t y);
d37 2
a38 1
clip (fastf_t *xp1, fastf_t *yp1, fastf_t *xp2, fastf_t *yp2)
d91 2
a92 1
code (fastf_t x, fastf_t y)
d129 3
a131 1
vclip(fastf_t *a, fastf_t *b, register fastf_t *min, register fastf_t *max)
@


1.2
log
@LINT from gcc -Wall.  Includes some modifications to bu.h and fb.h
@
text
@d25 1
a25 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/libdm/clip.c,v 1.1 1996/09/23 17:59:46 bparker Exp $ (BRL)";
d34 1
a34 1
static int	code();
d37 1
a37 2
clip (xp1, yp1, xp2, yp2)
vect_t	xp1, yp1, xp2, yp2;
d90 1
a90 2
code (x, y)
fastf_t x, y;
d127 1
a127 3
vclip( a, b, min, max )
vect_t a, b;
register fastf_t *min, *max;
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/clip.c,v 11.1 1995/01/04 10:02:45 mike Rel4_4 $ (BRL)";
d128 1
@

