head	1.17;
access;
symbols
	ansi-20040405-merged:1.13.2.2
	postmerge-20040405-ansi:1.15
	premerge-20040404-ansi:1.14
	postmerge-autoconf:1.14
	autoconf-freeze:1.13.10.1
	premerge-autoconf:1.14
	ansi-20040316-freeze:1.13.2.1
	postmerge-20040315-windows:1.14
	premerge-20040315-windows:1.13
	windows-20040315-freeze:1.13.4.1
	autoconf-20031203:1.13
	autoconf-20031202:1.13
	autoconf-branch:1.13.0.10
	phong-branch:1.13.0.8
	photonmap-branch:1.13.0.6
	rel-6-1-DP:1.13
	windows-branch:1.13.0.4
	rel-6-0-2:1.11
	ansi-branch:1.13.0.2
	rel-6-0-1-branch:1.11.0.2
	hartley-6-0-post:1.12
	hartley-6-0-pre:1.11
	rel-6-0-1:1.11
	rel-6-0:1.11
	rel-5-4:1.6
	offsite-5-3-pre:1.9
	rel-5-3:1.6
	rel-5-2:1.6
	rel-5-1-branch:1.6.0.2
	rel-5-1:1.6
	rel-5-0:1.5
	rel-5-0-beta:1.4
	rel-4-5:1.3;
locks; strict;
comment	@ * @;


1.17
date	2004.05.21.18.06.26;	author morrison;	state dead;
branches;
next	1.16;

1.16
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.05.07.45.07;	author morrison;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.16.19.41.55;	author morrison;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.20.17.07.45;	author jra;	state Exp;
branches
	1.13.2.1
	1.13.4.1
	1.13.10.1;
next	1.12;

1.12
date	2002.08.15.20.54.58;	author hartley;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.03.18.48.30;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.02.21.20.39;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.18.18.10.33;	author butler;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.12.04.12.19;	author cjohnson;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.12.03.24.44;	author cjohnson;	state Exp;
branches;
next	1.6;

1.6
date	99.12.01.13.53.27;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	99.07.23.20.16.28;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.02.26.15.26.37;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	97.09.22.02.36.51;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	97.09.22.02.35.57;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	97.08.01.21.17.59;	author bparker;	state Exp;
branches;
next	;

1.13.2.1
date	2002.09.19.18.01.17;	author morrison;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2004.03.17.21.16.58;	author morrison;	state Exp;
branches;
next	;

1.13.4.1
date	2002.09.26.23.03.54;	author morrison;	state Exp;
branches;
next	;

1.13.10.1
date	2004.03.18.18.10.27;	author erikg;	state Exp;
branches;
next	;


desc
@routines to query libdm about display managers names and types
@


1.17
log
@moved to src/
@
text
@#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#ifdef HAVE_STRING_H
#include <string.h>
#endif

#if 0
#include "tk.h"
#else
#include "tcl.h"
#ifndef WIN32
#include <X11/Xlib.h>
#endif
#endif

#include "machine.h"
#include "externs.h"
#include "bu.h"
#include "vmath.h"
#include "dm.h"

int dm_validXType(char *dpy_string, char *name);
char *dm_bestXType(char *dpy_string);

int
dm_validXType(char	*dpy_string,
	      char	*name)
{
	int val = 0;

#ifdef WIN32
  if(!strcmp(name, "ogl"))
     return 1;
#else
#if !defined(USE_MESA_GL) && defined(DM_OGL)
	int return_val;
#endif

#ifdef USE_MESA_GL

#ifdef DM_OGL
	if (!strcmp(name, "ogl"))
		return 1;
#endif
#ifdef DM_X
	if (!strcmp(name, "X"))
		return 1;
#endif

#else /* Here we assume the X server supports OpenGL */
	Display *dpy;

	if ((dpy = XOpenDisplay(dpy_string)) == NULL) {
		bu_log("dm_validXType: failed to open display - %s\n", dpy_string);
		return val;
	}

#ifdef DM_OGL
	if (!strcmp(name, "ogl") &&
	    XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val))
		val = 1;
	else
#endif  
#ifdef DM_X
		if (!strcmp(name, "X"))
			val = 1;
#endif

	XCloseDisplay(dpy);

#endif

#endif /* WIN32*/

  return val;
}

char *
dm_bestXType(char *dpy_string)
{
	char *name = (char *)NULL;

#ifdef WIN32
  return "ogl";
#else

#if !defined(USE_MESA_GL) && defined(DM_OGL)
	int return_val;
#endif

#ifdef USE_MESA_GL

#ifdef DM_OGL
	return "ogl";
#endif
#ifdef DM_X
	return "X";
#endif

#else /* Here we assume the X server supports OpenGL */
	Display *dpy;

	if ((dpy = XOpenDisplay(dpy_string)) == NULL) {
		bu_log("dm_bestXType: failed to open display - %s\n", dpy_string);
		return name;
	}

#ifdef DM_OGL
	if (XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val))
		name = "ogl";
	else
#endif  
#ifdef DM_X
		name = "X";
#endif

	XCloseDisplay(dpy);

#endif
#endif /* WIN32 */

	return name;
}
@


1.16
log
@change conf.h to a wrapped config.h
@
text
@@


1.15
log
@merge of ansi-6-0-branch into HEAD
@
text
@d1 5
a5 1
#include "conf.h"
@


1.14
log
@merge of windows-6-0-branch into head
@
text
@d21 2
a22 2
int dm_validXType();
char *dm_bestXType();
@


1.13
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d10 1
d13 1
d29 5
d72 2
d81 5
d119 1
@


1.13.10.1
log
@merge from head
@
text
@a9 1
#ifndef WIN32
a11 1
#endif
a26 5

#ifdef WIN32
  if(!strcmp(name, "ogl"))
     return 1;
#else
a64 2
#endif /* WIN32*/

a71 5

#ifdef WIN32
  return "ogl";
#else

a104 1
#endif /* WIN32 */
@


1.13.4.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@a9 1
#ifndef WIN32
a11 1
#endif
a26 5

#ifdef WIN32
  if(!strcmp(name, "ogl"))
     return 1;
#else
a64 2
#endif /* WIN32*/

a71 5

#ifdef WIN32
  return "ogl";
#else

a104 1
#endif /* WIN32 */
@


1.13.2.1
log
@Initial ANSIfication
@
text
@d19 2
a20 2
int dm_validXType(char *dpy_string, char *name);
char *dm_bestXType(char *dpy_string);
@


1.13.2.2
log
@sync branch with HEAD
@
text
@a9 1
#ifndef WIN32
a11 1
#endif
a26 5

#ifdef WIN32
  if(!strcmp(name, "ogl"))
     return 1;
#else
a64 2
#endif /* WIN32*/

a71 5

#ifdef WIN32
  return "ogl";
#else

a104 1
#endif /* WIN32 */
@


1.12
log
@Converted from K&R to ANSI C - RFH
@
text
@d19 2
a20 2
int dm_validXType(char *dpy_string, char *name);
char *dm_bestXType(char *dpy_string);
@


1.11
log
@*- get rid of warnings
@
text
@d19 2
a20 2
int dm_validXType();
char *dm_bestXType();
@


1.10
log
@*- remove Tk dependencies
@
text
@d23 2
a24 3
dm_validXType(dpy_string, name)
char *dpy_string;
char *name;
d26 1
a26 2
  Display *dpy;
  int val = 0;
d28 1
a28 1
  int return_val;
d34 2
a35 2
  if(!strcmp(name, "ogl"))
     return 1;
d38 2
a39 2
  if(!strcmp(name, "X"))
     return 1;
d43 1
d45 4
a48 4
  if((dpy = XOpenDisplay(dpy_string)) == NULL){
    bu_log("dm_validXType: failed to open display - %s\n", dpy_string);
    return val;
  }
d51 4
a54 4
  if(!strcmp(name, "ogl") &&
     XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val))
     val = 1;
  else
d57 2
a58 2
    if(!strcmp(name, "X"))
      val = 1;
d61 1
a61 1
  XCloseDisplay(dpy);
d69 1
a69 2
dm_bestXType(dpy_string)
char *dpy_string;
d71 1
a71 2
  Display *dpy;
  char *name = (char *)NULL;
d73 1
a73 1
  int return_val;
d79 1
a79 1
  return "ogl";
d82 1
a82 1
  return "X";
d86 1
d88 4
a91 4
  if((dpy = XOpenDisplay(dpy_string)) == NULL){
    bu_log("dm_bestXType: failed to open display - %s\n", dpy_string);
    return name;
  }
d94 3
a96 3
  if(XQueryExtension(dpy, "GLX", &return_val, &return_val, &return_val))
    name = "ogl";
  else
d99 1
a99 1
    name = "X";
d102 1
a102 1
  XCloseDisplay(dpy);
d106 1
a106 1
  return name;
@


1.9
log
@Patches for compiling under RedHat 7.0
@
text
@d5 2
d8 5
@


1.8
log
@OpenGL really does need the return_val.
@
text
@d2 3
@


1.7
log
@LINT from gcc -Wall.  Includes some modifications to bu.h and fb.h
@
text
@d19 3
d65 3
@


1.6
log
@*- include vmath.h
@
text
@a17 1
  int return_val;
a60 1
  int return_val;
@


1.5
log
@*- mods to better support Mesa
@
text
@d6 1
@


1.4
log
@*- removed everything -- starting over
*- added dm_validXType() and dm_bestXType() which actually
	queries the X server to make a determination
@
text
@d20 13
d41 1
a41 1
      val = 1;
d51 2
d64 11
d90 2
@


1.3
log
@typo fix
@
text
@d8 2
a9 6
int dm_best_type();
char *dm_best_name();
int dm_name2type();
char **dm_names();
char *dm_type2name();
int *dm_types();
d12 3
a14 1
dm_best_type()
d16 8
a23 15
	int t;

	t = DM_TYPE_NULL;

#ifdef DM_X
	t = DM_TYPE_X;
#endif

#ifdef DM_GLX
	t = DM_TYPE_GLX;
#endif

#ifdef DM_OGL
	t = DM_TYPE_OGL;
#endif  
a24 6
	return t;
}

char *
dm_best_name()
{
d26 4
a29 1
  return dm_type2name(DM_TYPE_OGL);
a30 35

#ifdef DM_GLX
  return dm_type2name(DM_TYPE_GLX);
#endif

#ifdef DM_X
  return dm_type2name(DM_TYPE_X);
#endif

  return dm_type2name(DM_TYPE_BAD);
}

int
dm_name2type(name)
char *name;
{
  if(!strcmp("nu", name))
    return DM_TYPE_NULL;

  if(!strcmp("plot", name))
    return DM_TYPE_PLOT;

  if(!strcmp("ps", name))
    return DM_TYPE_PS;

#ifdef DM_OGL
  if(!strcmp("ogl", name))
    return DM_TYPE_OGL;
#endif

#ifdef DM_GLX
  if(!strcmp("glx", name))
    return DM_TYPE_GLX;
#endif

d32 2
a33 2
  if(!strcmp("X", name))
    return DM_TYPE_X;
d36 1
a36 17
  return DM_TYPE_BAD;
}

char **
dm_names()
{
  int *types;
  int i;
  char **names = (char **)NULL;

  types = dm_types();
  for(i = 0; types[i] != DM_TYPE_BAD; ++i){
    names = (char **)bu_realloc((genptr_t)names, sizeof(char **)*(i+1), "dm_names: names");
    names[i] = dm_type2name(types[i]);
  }
  names = (char **)bu_realloc((genptr_t)names, sizeof(char **)*(i+1), "dm_names: names");
  names[i] = (char *)NULL;
d38 1
a38 2
  bu_free((genptr_t)types, "dm_names: types");
  return names;
d42 2
a43 2
dm_type2name(type)
int type;
d45 7
a51 21
  switch(type){
  case DM_TYPE_NULL:
    return "nu";
  case DM_TYPE_PLOT:
    return "plot";
  case DM_TYPE_PS:
    return "ps";
#ifdef DM_OGL
  case DM_TYPE_OGL:
    return "ogl";
#endif
#ifdef DM_GLX
  case DM_TYPE_GLX:
    return "glx";
#endif
#ifdef DM_X
  case DM_TYPE_X:
    return "X";
#endif
  default:
    return (char *)NULL;
a52 13
}

int *
dm_types()
{
  int *types = (int *)NULL;
  int i = 4;

  types = (int *)bu_realloc((genptr_t)types, sizeof(int)*i, "dm_types: types");
  types[0] = DM_TYPE_NULL;
  types[1] = DM_TYPE_PLOT;
  types[2] = DM_TYPE_PS;
  types[3] = DM_TYPE_BAD;
d55 6
a60 11
  ++i;
  types = (int *)bu_realloc((genptr_t)types, sizeof(int)*i, "dm_types: types");
  types[i - 2] = DM_TYPE_OGL;
  types[i - 1] = DM_TYPE_BAD;
#endif

#ifdef DM_GLX
  ++i;
  types = (int *)bu_realloc((genptr_t)types, sizeof(int)*i, "dm_types: types");
  types[i - 2] = DM_TYPE_GLX;
  types[i - 1] = DM_TYPE_BAD;
d63 1
a63 6
#ifdef DM_X
  ++i;
  types = (int *)bu_realloc((genptr_t)types, sizeof(int)*i, "dm_types: types");
  types[i - 2] = DM_TYPE_X;
  types[i - 1] = DM_TYPE_BAD;
#endif
d65 1
a65 1
  return types;
@


1.2
log
@rearranged dm_best_type() to avoid compiler warnings
@
text
@d34 1
a34 1
	returnt;
@


1.1
log
@Initial revision
@
text
@d18 7
a24 3
#ifdef DM_OGL
  return DM_TYPE_OGL;
#endif  
d27 1
a27 1
  return DM_TYPE_GLX;
d30 3
a32 3
#ifdef DM_X
  return DM_TYPE_X;
#endif
d34 1
a34 1
  return DM_TYPE_NULL;
@
