head	1.10;
access;
symbols
	ansi-20040405-merged:1.7.2.1
	postmerge-20040405-ansi:1.8
	premerge-20040404-ansi:1.7
	postmerge-autoconf:1.7
	autoconf-freeze:1.7
	premerge-autoconf:1.7
	ansi-20040316-freeze:1.7.2.1
	postmerge-20040315-windows:1.7
	premerge-20040315-windows:1.7
	windows-20040315-freeze:1.7
	autoconf-20031203:1.7
	autoconf-20031202:1.7
	autoconf-branch:1.7.0.10
	phong-branch:1.7.0.8
	photonmap-branch:1.7.0.6
	rel-6-1-DP:1.7
	windows-branch:1.7.0.4
	rel-6-0-2:1.5
	ansi-branch:1.7.0.2
	rel-6-0-1-branch:1.5.0.2
	hartley-6-0-post:1.6
	hartley-6-0-pre:1.5
	rel-6-0-1:1.5
	rel-6-0:1.5
	rel-5-4:1.4
	offsite-5-3-pre:1.5
	rel-5-3:1.4
	rel-5-2:1.4
	rel-5-1-branch:1.4.0.2
	rel-5-1:1.4
	rel-5-0:1.2
	rel-5-0-beta:1.2
	rel-4-5:1.2
	ctj-4-5-post:1.1
	ctj-4-5-pre:1.1;
locks; strict;
comment	@ * @;


1.10
date	2004.05.21.18.06.25;	author morrison;	state dead;
branches;
next	1.9;

1.9
date	2004.05.10.15.30.44;	author erikg;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.05.07.45.07;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.20.17.07.44;	author jra;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2002.08.15.20.54.57;	author hartley;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.12.03.24.43;	author cjohnson;	state Exp;
branches;
next	1.4;

1.4
date	99.12.29.20.52.26;	author jra;	state Exp;
branches;
next	1.3;

1.3
date	99.12.01.13.54.41;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.01.05.20.32.18;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	96.10.24.22.11.54;	author bparker;	state Exp;
branches;
next	;

1.7.2.1
date	2002.09.19.18.01.17;	author morrison;	state Exp;
branches;
next	;


desc
@Colormap utilities.
@


1.10
log
@moved to src/
@
text
@#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <X11/Xlib.h>
#include "machine.h"
#include "bu.h"
#include "dm_color.h"

unsigned long dm_get_pixel(unsigned char r, unsigned char g, unsigned char b, long unsigned int *pixels, int cd);
void dm_copy_cmap(Display *dpy, Colormap dest, Colormap src, int low, int hi, int store);
void dm_allocate_color_cube(Display *dpy, Colormap cmap, long unsigned int *pixels, int cd, int cmap_base, int store);

/* Return the allocated pixel value that most closely represents
the color requested. */
unsigned long
dm_get_pixel(unsigned char r, unsigned char g, unsigned char b, long unsigned int *pixels, int cd)
                        /* values assumed to be [0,255] */
                      
        /* cube dimension */
{
  fastf_t f;
  int rf, gf, bf;
  int index;

  if(r == 0 && g == 0 && b == 0)
    return pixels[0];

  f = cd >> 8;
  rf = r * f;
  gf = g * f;
  bf = b * f;

  index = rf * cd * cd + gf * cd + bf;

  if(index == 0){
    if(r != 0)
      index = cd * cd;

    if(g != 0)
      index += cd;

    if(b != 0)
      index += 1;
  }

  return pixels[index];
}

/*
 * Alloc/Store (hi - low) colors from src colormap into dest.
 */
void
dm_copy_cmap(Display *dpy, Colormap dest, Colormap src, int low, int hi, int store)
{
  int i;
  int ncolors;
  XColor *colors;

  ncolors = hi - low;
  colors = (XColor *)bu_malloc(sizeof(XColor) * ncolors, "dm_load_cmap: colors");

  for(i = low; i < hi; ++i)
    colors[i].pixel = i;
  XQueryColors(dpy, src, colors, ncolors);

  if(store){
    XStoreColors(dpy, dest, colors, ncolors);
  }else{
    for(i = 0; i < ncolors; ++i){
      XAllocColor(dpy, dest, &colors[i]);
    }
  }

  bu_free((genptr_t)colors, "dm_load_cmap: colors");
}

void
dm_allocate_color_cube(Display *dpy, Colormap cmap, long unsigned int *pixels, int cd, int cmap_base, int store)
             
              
                      
          /* cube dimension */
              
          
{
  XColor color;
  Colormap default_cmap;
  int i;
  int r, g, b;
  int incr;  /* increment */

  /*
   * Copy default colors below cmap_base to private colormap to help
   * reduce flashing. Assuming cmap is private and empty, we can be
   * fairly certain to get the colors we want in the right order even
   * though cmap may be shared. 
   */
  default_cmap = DefaultColormap(dpy, DefaultScreen(dpy));
  dm_copy_cmap(dpy, cmap, default_cmap, 0, cmap_base, store);

  incr = 65535 / (cd - 1);

  /* store color cube at cmap_base and above */
  for(i = r = 0; r < 65536; r = r + incr)
    for(g = 0; g < 65536; g = g + incr)
      for(b = 0; b < 65536; b = b + incr, ++i){
	color.red = (unsigned short)r;
	color.green = (unsigned short)g;
	color.blue = (unsigned short)b;

	if(store){
	  color.flags = DoRed|DoGreen|DoBlue;
	  pixels[i] = color.pixel = i + cmap_base;
	  XStoreColor(dpy, cmap, &color);
	}else{
	  XAllocColor(dpy, cmap, &color);
	  pixels[i] = color.pixel;
	}
      }
}

@


1.9
log
@change conf.h to a wrapped config.h
@
text
@@


1.8
log
@merge of ansi-6-0-branch into HEAD
@
text
@d1 5
a5 1
#include "conf.h"
@


1.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d9 3
a11 3
unsigned long dm_get_pixel();
void dm_copy_cmap();
void dm_allocate_color_cube();
d16 4
a19 4
dm_get_pixel(r, g, b, pixels, cd)
unsigned char r, g, b;  /* values assumed to be [0,255] */
unsigned long *pixels;
int cd; /* cube dimension */
d53 1
a53 5
dm_copy_cmap(dpy, dest, src, low, hi, store)
Display *dpy;
Colormap dest, src;
int low, hi;
int store;
d78 7
a84 7
dm_allocate_color_cube(dpy, cmap, pixels, cd, cmap_base, store)
Display *dpy;
Colormap cmap;
unsigned long *pixels;
int cd;   /* cube dimension */
int cmap_base;
int store;
@


1.7.2.1
log
@Initial ANSIfication
@
text
@d9 3
a11 3
unsigned long dm_get_pixel(unsigned char r, unsigned char g, unsigned char b, long unsigned int *pixels, int cd);
void dm_copy_cmap(Display *dpy, Colormap dest, Colormap src, int low, int hi, int store);
void dm_allocate_color_cube(Display *dpy, Colormap cmap, long unsigned int *pixels, int cd, int cmap_base, int store);
d16 4
a19 4
dm_get_pixel(unsigned char r, unsigned char g, unsigned char b, long unsigned int *pixels, int cd)
                        /* values assumed to be [0,255] */
                      
        /* cube dimension */
d53 5
a57 1
dm_copy_cmap(Display *dpy, Colormap dest, Colormap src, int low, int hi, int store)
d82 7
a88 7
dm_allocate_color_cube(Display *dpy, Colormap cmap, long unsigned int *pixels, int cd, int cmap_base, int store)
             
              
                      
          /* cube dimension */
              
          
@


1.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d9 3
a11 3
unsigned long dm_get_pixel(unsigned char r, unsigned char g, unsigned char b, long unsigned int *pixels, int cd);
void dm_copy_cmap(Display *dpy, Colormap dest, Colormap src, int low, int hi, int store);
void dm_allocate_color_cube(Display *dpy, Colormap cmap, long unsigned int *pixels, int cd, int cmap_base, int store);
d16 4
a19 4
dm_get_pixel(unsigned char r, unsigned char g, unsigned char b, long unsigned int *pixels, int cd)
                        /* values assumed to be [0,255] */
                      
        /* cube dimension */
d53 5
a57 1
dm_copy_cmap(Display *dpy, Colormap dest, Colormap src, int low, int hi, int store)
d82 7
a88 7
dm_allocate_color_cube(Display *dpy, Colormap cmap, long unsigned int *pixels, int cd, int cmap_base, int store)
             
              
                      
          /* cube dimension */
              
          
@


1.5
log
@LINT from gcc -Wall.  Includes some modifications to bu.h and fb.h
@
text
@d9 3
a11 3
unsigned long dm_get_pixel();
void dm_copy_cmap();
void dm_allocate_color_cube();
d16 4
a19 4
dm_get_pixel(r, g, b, pixels, cd)
unsigned char r, g, b;  /* values assumed to be [0,255] */
unsigned long *pixels;
int cd; /* cube dimension */
d53 1
a53 5
dm_copy_cmap(dpy, dest, src, low, hi, store)
Display *dpy;
Colormap dest, src;
int low, hi;
int store;
d78 7
a84 7
dm_allocate_color_cube(dpy, cmap, pixels, cd, cmap_base, store)
Display *dpy;
Colormap cmap;
unsigned long *pixels;
int cd;   /* cube dimension */
int cmap_base;
int store;
@


1.4
log
@Eliminated an unused variable
@
text
@a12 2
static void get_color_slot();

@


1.3
log
@*- shift instead of divide
@
text
@a96 1
  int cs; /* cube size */
@


1.2
log
@mods to dm_get_pixel()
@
text
@d19 1
a19 1
short r, g, b;  /* value assumed to be [0,255] */
d30 1
a30 1
  f = cd / 256.0;
@


1.1
log
@Initial revision
@
text
@d25 1
d27 3
d35 14
a48 1
  return pixels[rf * cd * cd + gf * cd + bf];
@
