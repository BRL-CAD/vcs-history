head	1.10;
access;
symbols
	rel-7-10-4:1.10
	STABLE:1.10.0.2
	rel-7-10-2:1.10
	rel-7-10-0:1.9
	rel-7-8-4:1.6
	rel-7-8-2:1.6
	rel-7-8-0:1.6
	trimnurbs-branch:1.6.0.2
	help:1.6
	temp_tag:1.4
	postmerge-20051223-bobWinPort:1.4
	premerge-20051223-bobWinPort:1.4
	rel-7-6-6:1.4
	rel-7-6-branch:1.4.0.2
	rel-7-6-4:1.4;
locks; strict;
comment	@# @;


1.10
date	2007.07.31.07.47.28;	author brlcad;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.15.21.23.42;	author jlowenz;	state Exp;
branches;
next	1.8;

1.8
date	2007.01.20.14.36.40;	author brlcad;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.19.17.52.22;	author brlcad;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.18.06.46.10;	author brlcad;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.15.03.48.21;	author brlcad;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.08.13.04.20;	author brlcad;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.10.23.04.26.14;	author brlcad;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.21.03.06.00;	author brlcad;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.16.17.21.01;	author brlcad;	state Exp;
branches;
next	;

1.4.2.1
date	2005.11.08.13.04.20;	author brlcad;	state dead;
branches;
next	1.4.2.2;

1.4.2.2
date	2005.11.13.13.46.10;	author brlcad;	state Exp;
branches;
next	;


desc
@@


1.10
log
@move the sanity check to a BC_SANITY_CHECK macro
@
text
@#                   C O M P I L E R . M 4
# BRL-CAD
#
# Copyright (c) 2005-2007 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. The name of the author may not be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
###
#
# BC_COMPILER_AND_LINKER_RECOGNIZES
# checks if the compiler will work with the specified flags
#
# BC_COMPILER_RECOGNIZES
# checks if the compiler will work with the specified cflags
#
# BC_LINKER_RECOGNIZES
# checks if the linker will work with the specified ldflags
#
# BC_PREPROCESSOR_RECOGNIZES
# checks if the preprocessor will work with the specified cppflags
#
# BC_SANITY_CHECK
# make sure the compiler actually builds executables that run
#
###

AC_DEFUN([BC_COMPILER_AND_LINKER_RECOGNIZES], [
__flag="$1"
bc_[$2]_works=yes
__keep="$3"
AC_MSG_CHECKING([if compiler and linker recognize $__flag])
PRECFLAGS="$CFLAGS"
PRECXXFLAGS="$CXXFLAGS"
PRELDFLAGS="$LDFLAGS"
CFLAGS="$CFLAGS $__flag"
CXXFLAGS="$CXXFLAGS $__flag"
LDFLAGS="$LDFLAGS $__flag"
m4_pushdef([AC_TRY_EVAL], [_AC_EVAL_STDERR]($$[1]))
AC_TRY_COMPILE( [], [int i;], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
m4_popdef([AC_TRY_EVAL])
rm -f conftest.err
AC_TRY_RUN( [
#include <stdio.h>
int main(){exit(0);}
], [], [bc_[$2]_works=no])
AC_MSG_RESULT($bc_[$2]_works)
if test "x$bc_[$2]_works" = "xno" -o "x$__keep" != "x" ; then
	CFLAGS="$PRECFLAGS"
	CXXFLAGS="$PRECXXFLAGS"
	LDFLAGS="$PRELDFLAGS"
fi
])

AC_DEFUN([BC_COMPILER_AND_LINKER_RECOGNIZE], [
BC_COMPILER_AND_LINKER_RECOGNIZES([$1], [$2], [$3])
])


AC_DEFUN([BC_COMPILER_RECOGNIZES], [
__flag="$1"
AC_MSG_CHECKING([if compiler recognizes $__flag])
bc_[$2]_works=yes
__keep="$3"
PRECFLAGS="$CFLAGS"
PRECXXFLAGS="$CXXFLAGS"
CFLAGS="$CFLAGS $__flag"
CXXFLAGS="$CXXFLAGS $__flag"
m4_pushdef([AC_TRY_EVAL], [_AC_EVAL_STDERR]($$[1]))
AC_TRY_COMPILE( [], [int i;], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
m4_popdef([AC_TRY_EVAL])
rm -f conftest.err
AC_MSG_RESULT($bc_[$2]_works)
if test "x$bc_[$2]_works" = "xno" -o "x$__keep" != "x" ; then
	CFLAGS="$PRECFLAGS"
	CXXFLAGS="$PRECXXFLAGS"
fi
])

AC_DEFUN([BC_COMPILER_RECOGNIZE], [
BC_COMPILER_RECOGNIZES([$1], [$2], [$3])
])


AC_DEFUN([BC_LINKER_RECOGNIZES], [
__flag="$1"
AC_MSG_CHECKING([if linker recognizes $__flag])
bc_[$2]_works=yes
__keep="$3"
PRELDFLAGS="$LDFLAGS"
LDFLAGS="$LDFLAGS $__flag"
m4_pushdef([AC_TRY_EVAL], [_AC_EVAL_STDERR]($$[1]))
AC_TRY_LINK( [], [int i;], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
m4_popdef([AC_TRY_EVAL])
rm -f conftest.err
AC_MSG_RESULT($bc_[$2]_works)
if test "x$bc_[$2]_works" = "xno" -o "x$__keep" != "x" ; then
	LDFLAGS="$PRELDFLAGS"
fi
])

AC_DEFUN([BC_LINKER_RECOGNIZE], [
BC_LINKER_RECOGNIZES([$1], [$2], [$3])
])


AC_DEFUN([BC_PREPROCESSOR_RECOGNIZES], [
__flag="$1"
AC_MSG_CHECKING([if preprocesser recognizes $__flag])
bc_[$2]_works=yes
__keep="$3"
PRECPPFLAGS="$CPPFLAGS"
PRECXXCPPFLAGS="$CXXCPPFLAGS"
CPPFLAGS="$CPPFLAGS $__flag"
CXXCPPFLAGS="$CXXCPPFLAGS $__flag"
m4_pushdef([AC_TRY_EVAL], [_AC_EVAL_STDERR]($$[1]))
AC_TRY_COMPILE( [], [int i;], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
m4_popdef([AC_TRY_EVAL])
rm -f conftest.err
AC_MSG_RESULT($bc_[$2]_works)
if test "x$bc_[$2]_works" = "xno" -o "x$__keep" = "x" ; then
	CPPFLAGS="$PRECPPFLAGS"
	CXXCPPFLAGS="$PRECXXCPPFLAGS"
fi
])

AC_DEFUN([BC_PREPROCESSOR_RECOGNIZE], [
BC_PREPROCESSOR_RECOGNIZES([$1], [$2], [$3])
])

AC_DEFUN([BC_SANITY_CHECK], [
AC_MSG_CHECKING(compiler and flags for sanity)
AC_TRY_RUN([
#include <stdio.h>
int main(){exit(0);}
	],
	[	AC_MSG_RESULT(yes) ],
	[
		AC_MSG_RESULT(no)
		AC_MSG_NOTICE([}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}])
		AC_MSG_ERROR([*** compiler cannot create working executables, check config.log ***])
	]
)
])

# Local Variables:
# mode: m4
# tab-width: 8
# standard-indent: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


1.9
log
@Provide flag support for c++ (i.e. -g)
@
text
@d49 3
d157 15
@


1.8
log
@update copyright to 2007
@
text
@d57 1
d60 1
d73 1
d89 1
d91 1
d99 1
d136 1
d138 1
d146 1
@


1.7
log
@add an option, a third parameter, that if set to anything will inform the macro to not keep the flag as a CFLAG/LDFLAG/etc leaving it up to the user to do something with the provided bc_[param2]_works variable
@
text
@d4 1
a4 1
# Copyright (c) 2005-2006 United States Government as represented by
@


1.6
log
@update copyright to 2006
@
text
@d54 1
d69 1
a69 1
if test "x$bc_[$2]_works" = "xno" ; then
d76 1
a76 1
BC_COMPILER_AND_LINKER_RECOGNIZES([$1], [$2])
d84 1
d92 1
a92 1
if test "x$bc_[$2]_works" = "xno" ; then
d98 1
a98 1
BC_COMPILER_RECOGNIZES([$1], [$2])
d106 1
d114 1
a114 1
if test "x$bc_[$2]_works" = "xno" ; then
d120 1
a120 1
BC_LINKER_RECOGNIZES([$1], [$2])
d128 1
d136 1
a136 1
if test "x$bc_[$2]_works" = "xno" ; then
d142 1
a142 1
BC_PREPROCESSOR_RECOGNIZES([$1], [$2])
@


1.5
log
@meh
@
text
@d4 1
a4 1
# Copyright (C) 2005 United States Government as represented by
@


1.4
log
@give the tests something to compile, a simple int should do.
@
text
@d48 1
@


1.4.2.1
log
@file compiler.m4 was added on branch rel-7-6-branch on 2005-11-13 13:46:10 +0000
@
text
@d1 146
@


1.4.2.2
log
@merge changes from HEAD aka rel-7-6-4 to the rel-7-6-branch just in case someone peeks a gander or tries to continue/build the branch
@
text
@a0 146
#                   C O M P I L E R . M 4
# BRL-CAD
#
# Copyright (C) 2005 United States Government as represented by
# the U.S. Army Research Laboratory.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. The name of the author may not be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
###
#
# BC_COMPILER_AND_LINKER_RECOGNIZES
# checks if the compiler will work with the specified flags
#
# BC_COMPILER_RECOGNIZES
# checks if the compiler will work with the specified cflags
#
# BC_LINKER_RECOGNIZES
# checks if the linker will work with the specified ldflags
#
# BC_PREPROCESSOR_RECOGNIZES
# checks if the preprocessor will work with the specified cppflags
###

AC_DEFUN([BC_COMPILER_AND_LINKER_RECOGNIZES], [
__flag="$1"
bc_[$2]_works=yes
AC_MSG_CHECKING([if compiler and linker recognize $__flag])
PRECFLAGS="$CFLAGS"
PRELDFLAGS="$LDFLAGS"
CFLAGS="$CFLAGS $__flag"
LDFLAGS="$LDFLAGS $__flag"
m4_pushdef([AC_TRY_EVAL], [_AC_EVAL_STDERR]($$[1]))
AC_TRY_COMPILE( [], [int i;], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
m4_popdef([AC_TRY_EVAL])
rm -f conftest.err
AC_TRY_RUN( [
#include <stdio.h>
int main(){exit(0);}
], [], [bc_[$2]_works=no])
AC_MSG_RESULT($bc_[$2]_works)
if test "x$bc_[$2]_works" = "xno" ; then
	CFLAGS="$PRECFLAGS"
	LDFLAGS="$PRELDFLAGS"
fi
])

AC_DEFUN([BC_COMPILER_AND_LINKER_RECOGNIZE], [
BC_COMPILER_AND_LINKER_RECOGNIZES([$1], [$2])
])


AC_DEFUN([BC_COMPILER_RECOGNIZES], [
__flag="$1"
AC_MSG_CHECKING([if compiler recognizes $__flag])
bc_[$2]_works=yes
PRECFLAGS="$CFLAGS"
CFLAGS="$CFLAGS $__flag"
m4_pushdef([AC_TRY_EVAL], [_AC_EVAL_STDERR]($$[1]))
AC_TRY_COMPILE( [], [int i;], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
m4_popdef([AC_TRY_EVAL])
rm -f conftest.err
AC_MSG_RESULT($bc_[$2]_works)
if test "x$bc_[$2]_works" = "xno" ; then
	CFLAGS="$PRECFLAGS"
fi
])

AC_DEFUN([BC_COMPILER_RECOGNIZE], [
BC_COMPILER_RECOGNIZES([$1], [$2])
])


AC_DEFUN([BC_LINKER_RECOGNIZES], [
__flag="$1"
AC_MSG_CHECKING([if linker recognizes $__flag])
bc_[$2]_works=yes
PRELDFLAGS="$LDFLAGS"
LDFLAGS="$LDFLAGS $__flag"
m4_pushdef([AC_TRY_EVAL], [_AC_EVAL_STDERR]($$[1]))
AC_TRY_LINK( [], [int i;], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
m4_popdef([AC_TRY_EVAL])
rm -f conftest.err
AC_MSG_RESULT($bc_[$2]_works)
if test "x$bc_[$2]_works" = "xno" ; then
	LDFLAGS="$PRELDFLAGS"
fi
])

AC_DEFUN([BC_LINKER_RECOGNIZE], [
BC_LINKER_RECOGNIZES([$1], [$2])
])


AC_DEFUN([BC_PREPROCESSOR_RECOGNIZES], [
__flag="$1"
AC_MSG_CHECKING([if preprocesser recognizes $__flag])
bc_[$2]_works=yes
PRECPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $__flag"
m4_pushdef([AC_TRY_EVAL], [_AC_EVAL_STDERR]($$[1]))
AC_TRY_COMPILE( [], [int i;], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
m4_popdef([AC_TRY_EVAL])
rm -f conftest.err
AC_MSG_RESULT($bc_[$2]_works)
if test "x$bc_[$2]_works" = "xno" ; then
	CPPFLAGS="$PRECPPFLAGS"
fi
])

AC_DEFUN([BC_PREPROCESSOR_RECOGNIZE], [
BC_PREPROCESSOR_RECOGNIZES([$1], [$2])
])

# Local Variables:
# mode: m4
# tab-width: 8
# standard-indent: 4
# indent-tabs-mode: t
# End:
# ex: shiftwidth=4 tabstop=8
@


1.3
log
@trailing ws
@
text
@d59 1
a59 1
AC_TRY_COMPILE( [], [], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
d85 1
a85 1
AC_TRY_COMPILE( [], [], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
d106 1
a106 1
AC_TRY_LINK( [], [], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
d127 1
a127 1
AC_TRY_COMPILE( [], [], [if AC_TRY_COMMAND([grep "nrecognize" conftest.err >/dev/null 2>&1]) ; then bc_[$2]_works=no ; fi], [bc_[$2]_works=no])
@


1.2
log
@make the compiler, linker, and preprocessor checks look for 'nrecognize' in the test output in case the return value happens to be zero so that options are properly enabled/disabled.
@
text
@d14 1
a14 1
# 2. Redistributions in binary form must reproduce the above 
d48 1
a48 1
###	
d60 1
a60 1
m4_popdef([AC_TRY_EVAL]) 
d86 1
a86 1
m4_popdef([AC_TRY_EVAL]) 
d107 1
a107 1
m4_popdef([AC_TRY_EVAL]) 
d128 1
a128 1
m4_popdef([AC_TRY_EVAL]) 
@


1.1
log
@separate out the compiler, linker, and preprocessor checks into proper macros: BC_COMPILER_AND_LINKER_RECOGNIZES, BC_COMPILER_RECOGNIZES, BC_LINKER_RECOGNIZES, BC_PREPROCESSOR_RECOGNIZES
@
text
@d81 1
a81 1
__flag_works=yes
d84 6
a89 3
AC_TRY_COMPILE( [], [], [], [__flag_works=no])
AC_MSG_RESULT($__flag_works)
if test "x$__flag_works" = "xno" ; then
d102 1
a102 1
__flag_works=yes
d105 6
a110 3
AC_TRY_COMPILE( [], [], [], [__flag_works=no])
AC_MSG_RESULT($__flag_works)
if test "x$__flag_works" = "xno" ; then
d123 1
a123 1
__flag_works=yes
d126 6
a131 3
AC_TRY_COMPILE( [], [], [], [__flag_works=no])
AC_MSG_RESULT($__flag_works)
if test "x$__flag_works" = "xno" ; then
@

