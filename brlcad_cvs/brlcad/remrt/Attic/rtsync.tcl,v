head	1.37;
access;
symbols
	rel-4-5:1.28
	ctj-4-5-post:1.10
	ctj-4-5-pre:1.10;
locks; strict;
comment	@# @;


1.37
date	98.11.10.04.54.44;	author mike;	state dead;
branches;
next	1.36;

1.36
date	98.05.22.20.07.32;	author mike;	state Exp;
branches;
next	1.35;

1.35
date	98.05.22.19.45.27;	author mike;	state Exp;
branches;
next	1.34;

1.34
date	98.05.22.04.55.10;	author mike;	state Exp;
branches;
next	1.33;

1.33
date	98.05.13.02.44.16;	author mike;	state Exp;
branches;
next	1.32;

1.32
date	98.04.29.06.00.34;	author mike;	state Exp;
branches;
next	1.31;

1.31
date	98.04.29.05.49.52;	author mike;	state Exp;
branches;
next	1.30;

1.30
date	98.04.29.04.37.26;	author mike;	state Exp;
branches;
next	1.29;

1.29
date	98.04.28.03.43.50;	author mike;	state Exp;
branches;
next	1.28;

1.28
date	97.12.18.00.43.28;	author mike;	state Exp;
branches;
next	1.27;

1.27
date	97.12.18.00.04.14;	author mike;	state Exp;
branches;
next	1.26;

1.26
date	97.11.21.21.01.05;	author mike;	state Exp;
branches;
next	1.25;

1.25
date	97.11.21.04.41.03;	author mike;	state Exp;
branches;
next	1.24;

1.24
date	97.11.20.22.43.12;	author mike;	state Exp;
branches;
next	1.23;

1.23
date	97.08.26.07.08.51;	author mike;	state Exp;
branches;
next	1.22;

1.22
date	97.08.26.04.32.30;	author mike;	state Exp;
branches;
next	1.21;

1.21
date	97.08.26.03.47.32;	author mike;	state Exp;
branches;
next	1.20;

1.20
date	97.08.21.03.25.17;	author mike;	state Exp;
branches;
next	1.19;

1.19
date	97.08.21.00.56.22;	author mike;	state Exp;
branches;
next	1.18;

1.18
date	97.08.21.00.08.25;	author mike;	state Exp;
branches;
next	1.17;

1.17
date	97.08.20.07.51.46;	author mike;	state Exp;
branches;
next	1.16;

1.16
date	97.06.27.18.11.05;	author gdurf;	state Exp;
branches;
next	1.15;

1.15
date	97.06.26.01.13.23;	author mike;	state Exp;
branches;
next	1.14;

1.14
date	97.06.25.05.00.31;	author mike;	state Exp;
branches;
next	1.13;

1.13
date	97.06.25.03.08.59;	author mike;	state Exp;
branches;
next	1.12;

1.12
date	97.06.20.03.46.04;	author gdurf;	state Exp;
branches;
next	1.11;

1.11
date	97.06.20.01.41.05;	author mike;	state Exp;
branches;
next	1.10;

1.10
date	97.05.28.03.32.09;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	97.05.22.05.40.29;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	97.05.20.17.03.59;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	97.03.07.10.52.34;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	97.03.07.07.12.24;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	97.03.06.10.09.13;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	97.03.06.09.39.10;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	97.03.06.08.56.07;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	97.03.06.06.00.58;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	97.03.06.05.03.46;	author mike;	state Exp;
branches;
next	;


desc
@TCL GUI for rtsync
@


1.37
log
@Moved real-time ray-tracer over into "SWISS" directory
@
text
@# rtsync.tcl
# A prototype GUI for rtsync.
# This file is executed by the rtsync program, not directly from the shell.
# Depends on rtnode defining [get_dbip] and [get_rtip].
# Depends on rtnode & mged having executed {wdb_open .inmem inmem [get_dbip]}
# Uses various RTSYNC built-in commands, as well as LIBRT's Tcl commands.
#  -Mike Muuss, ARL, March 97.

# Set the application name by which other applications will be able to
# SEND commands to us with "send rtsync _stuff_".
tk appname rtsync
wm title . rtsync

puts "Remember, run ./dg.tcl for Dynamic Geometry control."

puts "running rtsync.tcl"
##option add *background #ffffff
##. configure -background #ffffff

# Create main interaction widget
frame .mbar -relief raised -bd 2 ; pack .mbar -side top
frame .title_fr ; pack .title_fr -side top
frame .status ; pack .status -side top

# Menu bar, acros very top
menubutton .mbar.file -text "File" -menu .mbar.file.menu
menubutton .mbar.debug -text "Debug" -menu .mbar.debug.menu
menubutton .mbar.reproject -text "Reproject" -menu .mbar.reproject.menu
menubutton .mbar.spacepart -text "SpacePart" -menu .mbar.spacepart.menu
menubutton .mbar.help -text "Help" -menu .mbar.help.menu
pack .mbar.file -side left -in .mbar -expand 1 -fill x
pack .mbar.debug -side left -in .mbar -expand 1 -fill x
pack .mbar.reproject -side left -in .mbar -expand 1 -fill x
pack .mbar.spacepart -side left -in .mbar -expand 1 -fill x
pack .mbar.help -side right -in .mbar
menu .mbar.file.menu
.mbar.file.menu add command -label "Exit" -command "exit"
menu .mbar.help.menu
.mbar.help.menu add command -label "Exit" -command "exit"
menu .mbar.reproject.menu
.mbar.reproject.menu add command -label "Reproject ON" -command "do_reproject_mode 1"
.mbar.reproject.menu add command -label "Reproject HOLD" -command "do_reproject_mode 2"
.mbar.reproject.menu add command -label "Reproject OFF" -command "do_reproject_mode 0"
menu .mbar.debug.menu
.mbar.debug.menu add command -label "DebugImage ON" -command "do_debugimage 1"
.mbar.debug.menu add command -label "DebugImage OFF" -command "do_debugimage 0"
.mbar.debug.menu add command -label "Net Speed Test ON" -command "net_speed_test 1"
.mbar.debug.menu add command -label "Net Speed Test OFF" -command "net_speed_test 0"
.mbar.debug.menu add command -label "Remote bu_log ON" -command "node_send set print_on 1"
.mbar.debug.menu add command -label "Remote bu_log OFF" -command "node_send set print_on 0"
menu .mbar.spacepart.menu
.mbar.spacepart.menu add command -label "Muuss NUBSP" -command "space_partitioning 1"
.mbar.spacepart.menu add command -label "Gigante NUgrid" -command "space_partitioning 0"

# Title, across the top
set cur_vrmgr_status {[vrmgr offline]}
frame .words_fr
frame .title3
image create photo .eagle -file "/m/cad/remrt/eagleCAD.gif"
label .logo -image .eagle
label .title1 -text "BRL-CAD's SWISS"
label .title2 -text "Real-Time Ray-Tracer"
label .title3a -textvariable cpu_count
label .title3b -text "CPUs "
label .title3c -textvariable cur_vrmgr_status
label .title4 -textvariable database
pack .title3a .title3b .title3c -side left -in .title3
pack .title1 .title2 .title3 .title4 -side top -in .words_fr
pack .logo .words_fr -side left -in .title_fr

# The Update CPU Status button
## No longer in it's own window.
##toplevel .status
frame .status.incr_fr
frame .status.update_fr
button .status.button -text "Update CPU Status" -command update_cpu_status
checkbutton .status.checkbutton -variable update_status_every_frame
label .status.checklabel -text "Continuous"
button .status.incr -text "NCPU++" -command \
	{cur_node_send {global npsw; incr npsw 1; set npsw}}
button .status.decr -text "NCPU--" -command \
	{cur_node_send {global npsw; incr npsw -1; set npsw}}
button .status.drop -text "DROP" -command \
	{set node_num [lindex [selection get] 0]; \
	drop_rtnode $node_num; update_cpu_status}
listbox .status.list -height 1 -width 60
label .status.global1 -textvariable cur_global1_status
label .status.global2 -textvariable cur_global2_status
label .status.global3 -textvariable cur_global3_status
label .status.global4 -textvariable cur_global4_status
label .status.global5 -textvariable cur_global5_status
pack .status.button .status.checkbutton .status.checklabel \
	-side left -in .status.update_fr
pack .status.incr .status.decr .status.drop -side left -in .status.incr_fr
pack .status.update_fr .status.incr_fr .status.list \
	.status.global1 .status.global2 .status.global3 \
	.status.global4 .status.global5 \
	-side top -in .status
	


proc update_cpu_status {} {
	global	cur_vrmgr_status
	global	cur_global1_status
	global	cur_global2_status
	global	cur_global3_status
	global	cur_global4_status
	global	cur_global5_status

	set cur_global1_status [get_stats -1]
	set cur_global2_status [get_stats -2]
	set cur_global3_status [get_stats -3]
	set cur_global4_status [get_stats -4]
	set cur_global5_status [get_stats -5]

	set nodes [list_rtnodes]

	.status.list delete 0 end
	.status.list configure -height [expr [llength $nodes] + 1]
	.status.list insert end [get_rtnode -1];# generate title
	foreach node $nodes {
		.status.list insert end [get_rtnode $node]
	}

	set name [vrmgr_hostname]
	if { [llength $name] } {
		set cur_vrmgr_status $name
	} else {
		set cur_vrmgr_status {[vrmgr offline]}
	}
}

proc cur_node_send {remote_cmd} {
	set node_num [lindex [selection get] 0]
	one_node_send $node_num $remote_cmd
}

proc net_speed_test {val} {
	node_send \
		set test_fb_speed $val ";" \
		set curframe 0
}

proc space_partitioning {val} {
	node_send \
		sh_opt -,$val ";" \
		set curframe 0
	reprep
}

proc do_reproject_mode {val} {
	node_send \
		set fullfloat_mode $val ";" \
		set reproject_mode $val ";" \
		set curframe 0
}

proc do_debugimage {val} {
	global debugimage
	set debugimage $val
	node_send \
		set debugimage $val
}

# Aids for memory debugging
proc memdebug {}  {
	node_send \
		set bu_debug 2 ";" \
		bu_printb bu_debug {$bu_debug} {$BU_DEBUG_FORMAT}
}
# Follow this up by issuing a:
# one_node_send 01 bu_prmem

puts "done rtsync.tcl"

# node_send sh_opt -P1 -x1 -X1
# node_send .inmem get LIGHT
# node_send {.inmem adjust LIGHT V {20 -13 5}}
# node_send {.inmem adjust LIGHT V {50 -13 5}} ; reprep; refresh
@


1.36
log
@Time the reprojection phase.
Account for bandwidth of debugimage
@
text
@@


1.35
log
@Added support for debugimage toggling
@
text
@d159 2
@


1.34
log
@Support for reproject_mode 2:  reproject without re-raytracing.
@
text
@d28 1
d33 1
d35 1
a35 1
pack .mbar.help -side right -in .mbar -expand 1 -fill x
d40 4
d45 2
a46 3
.mbar.debug.menu add command -label "Reproject ON" -command "do_reproject_mode 1"
.mbar.debug.menu add command -label "Reproject HOLD" -command "do_reproject_mode 2"
.mbar.debug.menu add command -label "Reproject OFF" -command "do_reproject_mode 0"
d156 5
@


1.33
log
@Added do_reproject_mode
@
text
@d40 1
@


1.32
log
@Added 5th line of status
@
text
@d39 2
d143 7
@


1.31
log
@Added continuous-update button
@
text
@d70 1
a70 1
label .status.checklabel -text "Continuously"
d83 1
d88 2
a89 1
	.status.global1 .status.global2 .status.global3 .status.global4 \
d100 1
d106 1
@


1.30
log
@Added global statistics info at bottom of window.
@
text
@d67 1
d69 2
d83 2
d86 1
a86 1
pack .status.button .status.incr_fr .status.list \
@


1.29
log
@Main faceplate now shows whether VRMGR link is online or not.
@
text
@d76 4
d81 4
a84 1
pack .status.button .status.incr_fr .status.list -side top -in .status
d89 9
@


1.28
log
@Moved all the dynamic geometry support off into a separate
(and optional) TCL program:  dg.tcl
The status window has been re-integrated into the main window
of rtsync.
@
text
@d48 1
d56 2
a57 1
label .title3b -text "CPUs active"
d59 1
a59 1
pack .title3a .title3b -side left -in .title3
d81 2
d90 7
@


1.27
log
@Made application name and title bar match.
@
text
@d14 1
a14 19
global red grn blu
set red 0
set grn 0
set blu 0

global sun_region_name
set sun_region_name "light.r"

global sun_solid_name
set sun_solid_name "LIGHT"
global sunx suny sunz
set sunx 0
set suny 0
set sunz 0

global air_shader1
set air_shader1 "200 200 255"
set air_shader2 "air dpm=.01"
set air_region_name "air.r"
a21 1
frame .logo_fr ; pack .logo_fr -side top
d23 1
a23 4
frame .sunangle_fr -relief ridge -bd 2 ; pack .sunangle_fr -side top -expand 1 -fill x
frame .suncolor_fr -relief ridge -bd 2 ; pack .suncolor_fr -side top -expand 1 -fill x
frame .air_fr  -relief ridge -bd 2 ; pack .air_fr -side top -expand 1 -fill x
frame .button_fr ; pack .button_fr -side top
d61 3
a63 122
# The sun angle
label .sunangle_title -text "Sun Angle, West to East"
scale .sunangle -from 180 -to 0 -orient horizontal -command new_sunangle
pack .sunangle_title .sunangle -side top -in .sunangle_fr -fill x
proc new_sunangle {degrees} {
	global sunx suny sunz

	set sunx [expr ( $degrees - 90) ]
	set suny -13
	set sunz 5
}

frame .sunangle_apply_fr
entry .sunangle_region -width 16 -relief sunken -bd 2 -textvariable sun_solid_name
button .sunangle_apply -text "Apply" -command apply_angle
pack .sunangle_region .sunangle_apply -side left -in .sunangle_apply_fr
pack .sunangle_apply_fr -side top -in .sunangle_fr

proc apply_angle {} {
	global sunx suny sunz
	global sun_solid_name

	puts "Sun pos = $sunx $suny $sunz"
	# send new stuff to servers
	node_send .inmem adjust $sun_solid_name V "{" $sunx $suny $sunz "}"

	# Have MGED update it's position too.
	vrmgr_send .inmem adjust $sun_solid_name V "{" $sunx $suny $sunz "}" ";" \
		redraw_vlist $sun_solid_name

	# indicate LIBRT re-prep required.
	reprep
	# Use new POV if one receieved, else repeat last POV.
	refresh
}

# The sun color
label .suncolor_title -text "Sun Color, Yellow to Blue"
scale .suncolor -from 0 -to 100 -orient horizontal -command new_suncolor
frame .suncolor_swatch -height 1c -width 6c
pack .suncolor_title .suncolor .suncolor_swatch -in .suncolor_fr -fill x
proc new_suncolor {percent} {
	global red grn blu

	if { $percent == 100 } {
		set red 255
		set grn 255
		set blu 255
	} else {
		# alpha is how much yellow, beta is how much blue.
		set beta [expr $percent / 100.0 ]
		set alpha [expr 1.0 - $beta ]
		# yellow is 255,255,0 and SkyBlue2 is 126 192 238
		set red [expr int(255 * $alpha + 126 * $beta)]
		set grn [expr int(255 * $alpha + 192 * $beta)]
		set blu [expr int(  0 * $alpha + 238 * $beta)]
	}
	set hexcolor [format #%02x%02x%02x $red $grn $blu]
	.suncolor_swatch config -background $hexcolor
	#puts "Sun color $percent percent of yellow = $red $grn $blu"
}

frame .suncolor_apply_fr
entry .suncolor_region -width 16 -relief sunken -bd 2 -textvariable sun_region_name
button .apply_color -text "Apply" -command apply_color
pack .suncolor_region .apply_color -side left -in .suncolor_apply_fr
pack .suncolor_apply_fr -side top -in .suncolor_fr

proc apply_color {} {
	global red grn blu
	global sun_region_name

	# send new stuff to servers.  No reprep needed for this.
	# However, change the inmem database too, for consistency.
	node_send \
	  sh_directchange_rgb {[get_rtip]} $sun_region_name $red $grn $blu ";" \
	    .inmem adjust $sun_region_name rgb "{" $red $grn $blu "}"

	# Have MGED update it's color too.  This doesn't work.
	#vrmgr_send .inmem adjust $sun_region_name rgb $red $grn $blu ";" \
	#	redraw_vlist $sun_region_name

	# Use new POV if one receieved, else repeat last POV.
	refresh
}

# The air shader
label .air_title -text "Air Shader"
entry .air_string1 -width 32 -relief sunken -bd 2 -textvariable air_shader1
entry .air_string2 -width 42 -relief sunken -bd 2 -textvariable air_shader2

frame .air_apply_fr
button .air_demo -text "Cloud" -command {\
	set air_shader1 "255 255 255";\
	set air_shader2 "scloud s=10/10/10 m=.05 d=10/21.25/10 o=3"}
entry .air_region -width 16 -relief sunken -bd 2 -textvariable air_region_name
button .air_apply -text "Apply" -command apply_air
pack .air_demo .air_region .air_apply -side left -in .air_apply_fr
pack .air_title .air_string1 .air_string2 .air_apply_fr -side top -in .air_fr

proc apply_air {} {
	global air_shader1
	global air_shader2
	global air_region_name

	# send new stuff to servers
	node_send .inmem adjust $air_region_name \
		rgb "{" $air_shader1 "}" \
		shader "{" $air_shader2 "}"
	vrmgr_send .inmem adjust $air_region_name \
		rgb "{" $air_shader1 "}" \
		shader "{" $air_shader2 "}"

	# indicate LIBRT re-prep required.
	reprep
	# XXX Need short (1 sec) delay here.
	# Use new POV if one receieved, else repeat last POV.
	refresh
}

# The Update CPU Status button, in it's own window
toplevel .status
@


1.26
log
@Made the cloud demo a built-in
@
text
@d9 5
a255 3

# Allow "send rtsync _stuff_" directives to reach us.
tk appname rtsync
@


1.25
log
@When dropping a CPU, update the status list, to avoid confusion.
@
text
@d167 1
a167 1
entry .air_string2 -width 32 -relief sunken -bd 2 -textvariable air_shader2
d170 3
d175 1
a175 1
pack .air_region .air_apply -side left -in .air_apply_fr
d184 6
a189 4
	node_send .inmem adjust $air_region_name rgb "{" $air_shader1 "}" ";" \
		  .inmem adjust $air_region_name shader "{" $air_shader2 "}"
	vrmgr_send .inmem adjust $air_region_name rgb "{" $air_shader1 "}" ";" \
		   .inmem adjust $air_region_name shader "{" $air_shader2 "}"
@


1.24
log
@Added DROP button
@
text
@d203 1
a203 1
	drop_rtnode $node_num}
@


1.23
log
@Added memdebug command
@
text
@d201 3
d205 1
a205 1
pack .status.incr .status.decr -side left -in .status.incr_fr
@


1.22
log
@Added NCPU++ and NCPU-- buttons
@
text
@d235 8
a242 2
# Create independent status window.  All further creates happen here.
frame .statusbut_fr; pack .statusbut_fr -side top
@


1.21
log
@Added one_node_send command, and GUI support to use it to change
number of CPUs being used.
@
text
@d197 4
a200 2
button .status.incr -text "NCPU++" -command {cur_node_send "incr npsw 1; set npsw"}
button .status.decr -text "NCPU--" -command {cur_node_send "incr npsw -1; set npsw"}
@


1.20
log
@Widened the listbox
@
text
@d195 1
d197 2
d200 2
a201 1
pack .status.button .status.list -side top -in .status
d203 1
d213 5
@


1.19
log
@Put title on CPU status list
@
text
@d196 1
a196 1
listbox .status.list -height 1 -width 48
@


1.18
log
@Added CPU status button
@
text
@d196 1
a196 1
listbox .status.list -width 48
d203 2
a204 1
	.status.list configure -height [llength $nodes]
@


1.17
log
@Added Remote bu_log control to menu
@
text
@d193 16
d221 3
@


1.16
log
@"adjust combname rgb" now takes a list {r g b} as an argument,
applied fix to one line
@
text
@d58 2
@


1.15
log
@Reorganized GUI
@
text
@d152 1
a152 1
	  .inmem adjust $sun_region_name rgb $red $grn $blu
@


1.14
log
@Can now adjust air-region's parameters.
@
text
@d27 1
d67 2
a68 2
label .title1 -text "RTSYNC"
label .title2 -text "The Real-Time Ray-Tracer"
d71 1
d73 1
a73 1
pack .title1 .title2 .title3 -side top -in .words_fr
d77 2
a78 3
label .sunangle_title -text "Sun Angle"
scale .sunangle -label "West to East" -from 180 -to 0 -orient horizontal \
	-command new_sunangle
a86 2
button .apply_angle -text "Apply" -command apply_angle
pack .apply_angle -side top -in .sunangle_fr
d88 6
d113 2
a114 3
label .suncolor_title -text "Sun Color"
scale .suncolor -label "Yellow to Blue" -from 0 -to 100 -orient horizontal \
	-command new_suncolor
d119 14
a132 7
	# alpha is how much yellow, beta is how much blue.
	set beta [expr $percent / 100.0 ]
	set alpha [expr 1.0 - $beta ]
	# yellow is 255,255,0 and SkyBlue2 is 126 192 238
	set red [expr int(255 * $alpha + 126 * $beta)]
	set grn [expr int(255 * $alpha + 192 * $beta)]
	set blu [expr int(  0 * $alpha + 238 * $beta)]
d138 2
d141 2
a142 4
pack .apply_color -side top -in .suncolor_fr

entry .suncolor_region -width 16 -relief sunken -bd 2 -textvariable sun_region_name
pack .suncolor_region -side top -in .suncolor_fr
d166 3
d170 2
a171 1
pack .air_title .air_string1 .air_string2 .air_apply -side top -in .air_fr
d176 1
d179 4
a182 5
	# XXX region name is hardcoded for now.
	node_send .inmem adjust air.r rgb "{" $air_shader1 "}" ";" \
		  .inmem adjust air.r shader "{" $air_shader2 "}"
	vrmgr_send .inmem adjust air.r rgb "{" $air_shader1 "}" ";" \
		   .inmem adjust air.r shader "{" $air_shader2 "}"
d186 1
d201 1
@


1.13
log
@Have MGED track along
@
text
@d24 4
d38 1
d147 24
@


1.12
log
@Changed to use db adjust command
@
text
@d5 1
a5 1
# Depends on rtnode having executed {wdb_open .inmem inmem [get_dbip]}
d91 6
a96 1
	# indicate re-prep required.
d98 2
a99 2
	# Send this to MGED to get pov message sent back.
	vrmgr_send refresh
d138 6
a143 2
	# Send 'refresh' command to MGED to get pov message sent back to us.
	vrmgr_send refresh
d166 1
a166 1
# node_send {.inmem adjust LIGHT V {50 -13 5}} ; reprep;vrmgr_send refresh
@


1.11
log
@Added selection of space partition tree
@
text
@d4 2
a5 2
# Depends on rtnode defining $dbip and $rtip.
# Depends on rtnode having executed {set wdbp [wdb_open .inmem inmem $dbip]}
a126 4
	# Less efficient way:
	##node_send rt_wdb_inmem_rgb {$wdbp} $sun_region_name $red $grn $blu
	##reprep

d130 2
a131 2
	  sh_directchange_rgb {$rtip} $sun_region_name $red $grn $blu ";" \
	  rt_wdb_inmem_rgb {$wdbp} $sun_region_name $red $grn $blu
@


1.10
log
@When toggling framebuffer testing, set curframe on all the nodes
to zero, so that any late joiners are synchronized.
@
text
@d39 1
d43 1
d52 3
d144 6
@


1.9
log
@Allow net test to be turned off and on.
@
text
@d138 2
a139 1
		set test_fb_speed $val
@


1.8
log
@Added net debug menu item
@
text
@d2 2
a3 1
# A prototype GUI for rtsync
d48 2
a49 1
.mbar.debug.menu add command -label "Net Speed Test" -command "net_speed_test"
d136 1
a136 1
proc net_speed_test {} {
d138 1
a138 1
		set test_fb_speed 1
d140 3
@


1.7
log
@Can now move "sun"!!
(Light source in moss.g)
@
text
@d24 2
a25 2
option add *background #ffffff
. configure -background #ffffff
d37 1
d40 1
d46 2
d132 5
@


1.6
log
@Changed comments
@
text
@d3 2
a4 1
# Depends on rtsync defining $dbip and $rtip.
d16 7
d64 5
a68 1
	puts "Sun angle ought to be $degrees"
d74 2
a75 2
	global red grn blu
	global sun_region_name
d77 1
a77 1
	puts "Sun color = $red $grn $blu"
d79 1
a79 1
	node_send rt_wdb_inmem_rgb {$dbip} $sun_region_name $red $grn $blu
d115 5
d121 6
a126 2
	node_send sh_directchange_rgb {$rtip} $sun_region_name $red $grn $blu
	# Send this to MGED to get pov message sent back.
d133 3
@


1.5
log
@Added helpful comment.
@
text
@d64 2
d91 1
a91 1
	puts "Sun color $percent percent of yellow = $red $grn $blu"
@


1.4
log
@Working version
@
text
@d108 2
@


1.3
log
@improvements
@
text
@d23 2
a24 2
frame .sunangle_fr -relief ridge ; pack .sunangle_fr -side top
frame .suncolor_fr -relief ridge ; pack .suncolor_fr -side top
d30 2
a31 2
pack .mbar.file -side left -in .mbar -expand 1
pack .mbar.help -side right -in .mbar -expand 1
d38 2
d42 7
a48 2
label .title -text "RTSYNC, the real-time ray-tracer"
pack .logo .title -side left -in .title_fr
d77 1
a77 1
pack .suncolor_title .suncolor .suncolor_swatch -in .suncolor_fr
d96 1
a96 1
pack .suncolor_region -side left -in .suncolor_fr
@


1.2
log
@Further expansion
@
text
@d3 2
d7 8
d23 2
a24 2
frame .sunangle_fr ; pack .sunangle_fr -side top
frame .suncolor_fr ; pack .suncolor_fr -side top
d51 2
d54 11
d72 1
a72 1
	global red,grn,blu
d85 2
a86 3
# The buttons
button .apply -text "Apply" -command apply_settings
pack .apply -side top -in .button_fr
d88 10
a97 3
proc apply_settings {} {
	# send new stuff to servers
	# indicate re-prep required.
@


1.1
log
@Initial revision
@
text
@d10 6
a15 8
frame .logo_fr
frame .title_fr
frame .sunangle_fr
frame .suncolor_fr
pack .logo_fr -side top
pack .title_fr -side top
pack .sunangle_fr -side top
pack .suncolor_fr -side top
d17 10
d33 37
a69 4
label .sunangle -text .sunangle
pack .sunangle -in .sunangle_fr
label .suncolor -text .suncolor
pack .suncolor -in .suncolor_fr
@
