head	1.13;
access;
symbols
	ansi-20040405-merged:1.9.2.2
	postmerge-20040405-ansi:1.11
	premerge-20040404-ansi:1.10
	postmerge-autoconf:1.10
	autoconf-freeze:1.9.10.2
	premerge-autoconf:1.10
	ansi-20040316-freeze:1.9.2.1
	postmerge-20040315-windows:1.10
	premerge-20040315-windows:1.10
	windows-20040315-freeze:1.9.4.1
	autoconf-20031203:1.9
	autoconf-20031202:1.9
	autoconf-branch:1.9.0.10
	phong-branch:1.9.0.8
	photonmap-branch:1.9.0.6
	rel-6-1-DP:1.9
	windows-branch:1.9.0.4
	rel-6-0-2:1.7
	ansi-branch:1.9.0.2
	rel-6-0-1-branch:1.7.0.2
	hartley-6-0-post:1.8
	hartley-6-0-pre:1.7
	rel-6-0-1:1.7
	rel-6-0:1.7
	rel-5-4:1.6
	offsite-5-3-pre:1.7
	rel-5-3:1.6
	rel-5-2:1.6
	rel-5-1-branch:1.6.0.2
	rel-5-1:1.6
	rel-5-0:1.4
	rel-5-0-beta:1.2
	rel-4-5:1.1
	ctj-4-5-post:1.1
	ctj-4-5-pre:1.1;
locks; strict;
comment	@ * @;


1.13
date	2004.05.21.18.07.27;	author morrison;	state dead;
branches;
next	1.12;

1.12
date	2004.05.10.15.30.45;	author erikg;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.05.07.43.37;	author morrison;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.02.17.39.13;	author morrison;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.20.17.07.50;	author jra;	state Exp;
branches
	1.9.2.1
	1.9.4.1
	1.9.10.1;
next	1.8;

1.8
date	2002.08.15.20.55.03;	author hartley;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.25.16.40.38;	author butler;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.19.21.05.01;	author butler;	state Exp;
branches;
next	1.5;

1.5
date	99.10.30.03.06.24;	author butler;	state Exp;
branches;
next	1.4;

1.4
date	99.07.02.22.20.40;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	99.07.01.20.08.45;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	98.09.22.01.29.54;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	95.05.27.02.13.10;	author butler;	state Exp;
branches;
next	;

1.9.2.1
date	2002.09.19.18.01.24;	author morrison;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2004.03.17.21.18.31;	author morrison;	state Exp;
branches;
next	;

1.9.4.1
date	2004.03.11.23.43.02;	author morrison;	state Exp;
branches;
next	;

1.9.10.1
date	2004.02.12.18.38.49;	author erikg;	state Exp;
branches;
next	1.9.10.2;

1.9.10.2
date	2004.03.15.14.07.13;	author erikg;	state Exp;
branches;
next	;


desc
@Fractional Brownian Motion bump map
@


1.13
log
@moved to src/
@
text
@/*
 *			S H _ F B M . C
 *  Author -
 *	Lee A. Butler
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" license agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1997-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */
#ifndef lint
static char RCSsh_fbm[] = "@@(#)$Header: /n/xoff/cvs/brlcad/liboptical/sh_fbm.c,v 1.12 2004/05/10 15:30:45 erikg Exp $ (ARL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "vmath.h"
#include "raytrace.h"
#include "shadefuncs.h"
#include "shadework.h"
#include "rtprivate.h"

#if !defined(M_PI)
#define M_PI            3.14159265358979323846
#endif

struct fbm_specific {
	double	lacunarity;
	double	h_val;
	double	octaves;
	double	offset;
	double	gain;
	double	distortion;
	point_t	scale;	/* scale coordinate space */
};

static struct fbm_specific fbm_defaults = {
	2.1753974,	/* lacunarity */
	1.0,		/* h_val */
	4,		/* octaves */
	0.0,		/* offset */
	0.0,		/* gain */
	1.0,		/* distortion */
	{ 1.0, 1.0, 1.0 }	/* scale */
	};

#define FBM_NULL	((struct fbm_specific *)0)
#define FBM_O(m)	offsetof(struct fbm_specific, m)
#define FBM_AO(m)	bu_offsetofarray(struct fbm_specific, m)

struct bu_structparse fbm_parse[] = {
	{"%f",	1, "lacunarity",	FBM_O(lacunarity),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "H", 		FBM_O(h_val),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "octaves", 		FBM_O(octaves),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "gain",		FBM_O(gain),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "distortion",	FBM_O(distortion),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "l",			FBM_O(lacunarity),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",	1, "o", 		FBM_O(octaves),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "g",			FBM_O(gain),		BU_STRUCTPARSE_FUNC_NULL },
	{"%f",	1, "d",			FBM_O(distortion),	BU_STRUCTPARSE_FUNC_NULL },
	{"%f",  3, "scale",		FBM_AO(scale),		BU_STRUCTPARSE_FUNC_NULL },
	{"",	0, (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};

HIDDEN int	fbm_setup(register struct region *rp, struct bu_vls *matparm, char **dpp), fbm_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp);
HIDDEN void	fbm_print(register struct region *rp, char *dp), fbm_free(char *cp);

struct mfuncs fbm_mfuncs[] = {
	{"bump_fbm",	0,		0,		MFI_NORMAL|MFI_HIT|MFI_UV,
	fbm_setup,	fbm_render,	fbm_print,	fbm_free },

	{(char *)0,	0,		0,		0,
	0,		0,		0,		0 }
};



/*
 *	F B M _ S E T U P
 */
HIDDEN int
fbm_setup(register struct region *rp, struct bu_vls *matparm, char **dpp)
{
	register struct fbm_specific *fbm;

	BU_CK_VLS( matparm );
	BU_GETSTRUCT( fbm, fbm_specific );
	*dpp = (char *)fbm;

	memcpy(fbm, &fbm_defaults, sizeof(struct fbm_specific) );
	if (rdebug&RDEBUG_SHADE)
		bu_log("fbm_setup\n");

	if (bu_struct_parse( matparm, fbm_parse, (char *)fbm ) < 0 )
		return(-1);

	if (rdebug&RDEBUG_SHADE)
		bu_struct_print( rp->reg_name, fbm_parse, (char *)fbm );

	return(1);
}

/*
 *	F B M _ P R I N T
 */
HIDDEN void
fbm_print(register struct region *rp, char *dp)
{
	bu_struct_print( rp->reg_name, fbm_parse, (char *)dp );
}

/*
 *	F B M _ F R E E
 */
HIDDEN void
fbm_free(char *cp)
{
	bu_free( cp, "fbm_specific" );
}

/*
 *	F B M _ R E N D E R
 */
int
fbm_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp)
{
	register struct fbm_specific *fbm_sp =
		(struct fbm_specific *)dp;
	vect_t v_noise;
	point_t pt;

	if (rdebug&RDEBUG_SHADE)
		bu_struct_print( "foo", fbm_parse, (char *)fbm_sp );

	pt[0] = swp->sw_hit.hit_point[0] * fbm_sp->scale[0];
	pt[1] = swp->sw_hit.hit_point[1] * fbm_sp->scale[1];
	pt[2] = swp->sw_hit.hit_point[2] * fbm_sp->scale[2];

	bn_noise_vec(pt, v_noise);

	VSCALE(v_noise, v_noise, fbm_sp->distortion);

	if (rdebug&RDEBUG_SHADE)
		bu_log("fbm_render: point (%g %g %g) becomes (%g %g %g)\n\tv_noise (%g %g %g)\n",
			V3ARGS(swp->sw_hit.hit_point),
			V3ARGS(pt),
			V3ARGS(v_noise));

	VADD2(swp->sw_hit.hit_normal, swp->sw_hit.hit_normal, v_noise);
	VUNITIZE(swp->sw_hit.hit_normal);

	return(1);
}
@


1.12
log
@change conf.h to a wrapped config.h
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /cvs/brlcad/liboptical/sh_fbm.c,v 1.11 2004/04/05 07:43:37 morrison Exp $ (ARL)";
@


1.11
log
@merge of ansi-6-0-branch into HEAD
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header$ (ARL)";
d23 5
a27 1
#include "conf.h"
@


1.10
log
@update copyright to include span through 2003
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.9 2002/08/20 17:07:50 jra Exp $ (ARL)";
d76 2
a77 2
HIDDEN int	fbm_setup(), fbm_render();
HIDDEN void	fbm_print(), fbm_free();
d93 1
a93 4
fbm_setup( rp, matparm, dpp )
register struct region *rp;
struct bu_vls	*matparm;
char	**dpp;
d118 1
a118 3
fbm_print( rp, dp )
register struct region *rp;
char	*dp;
d127 1
a127 2
fbm_free( cp )
char *cp;
d136 1
a136 5
fbm_render( ap, pp, swp, dp )
struct application	*ap;
struct partition	*pp;
struct shadework	*swp;
char	*dp;
@


1.9
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1997 by the United States Army
d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.7 2000/07/25 16:40:38 butler Exp $ (ARL)";
@


1.9.4.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1997-2004 by the United States Army
d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/liboptical/sh_fbm.c,v 1.10 2004/02/02 17:39:13 morrison Exp $ (ARL)";
@


1.9.10.1
log
@merge from HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1997-2004 by the United States Army
d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.10 2004/02/02 17:39:13 morrison Exp $ (ARL)";
@


1.9.10.2
log
@merge from head
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.9.10.1 2004/02/12 18:38:49 erikg Exp $ (ARL)";
@


1.9.2.1
log
@Initial ANSIfication
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.9 2002/08/20 17:07:50 jra Exp $ (ARL)";
d76 2
a77 2
HIDDEN int	fbm_setup(register struct region *rp, struct bu_vls *matparm, char **dpp), fbm_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp);
HIDDEN void	fbm_print(register struct region *rp, char *dp), fbm_free(char *cp);
d93 4
a96 1
fbm_setup(register struct region *rp, struct bu_vls *matparm, char **dpp)
d121 3
a123 1
fbm_print(register struct region *rp, char *dp)
d132 2
a133 1
fbm_free(char *cp)
d142 5
a146 1
fbm_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp)
@


1.9.2.2
log
@sync branch with HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1997-2004 by the United States Army
d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header$ (ARL)";
@


1.8
log
@Converted from K&R to ANSI C - RFH
@
text
@d76 2
a77 2
HIDDEN int	fbm_setup(register struct region *rp, struct bu_vls *matparm, char **dpp), fbm_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp);
HIDDEN void	fbm_print(register struct region *rp, char *dp), fbm_free(char *cp);
d93 4
a96 1
fbm_setup(register struct region *rp, struct bu_vls *matparm, char **dpp)
d121 3
a123 1
fbm_print(register struct region *rp, char *dp)
d132 2
a133 1
fbm_free(char *cp)
d142 5
a146 1
fbm_render(struct application *ap, struct partition *pp, struct shadework *swp, char *dp)
@


1.7
log
@Changes to use rtprivate.h instead of ../rt/rdebug.h
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.6 2000/02/19 21:05:01 butler Exp $ (ARL)";
d76 2
a77 2
HIDDEN int	fbm_setup(), fbm_render();
HIDDEN void	fbm_print(), fbm_free();
d93 1
a93 4
fbm_setup( rp, matparm, dpp )
register struct region *rp;
struct bu_vls	*matparm;
char	**dpp;
d118 1
a118 3
fbm_print( rp, dp )
register struct region *rp;
char	*dp;
d127 1
a127 2
fbm_free( cp )
char *cp;
d136 1
a136 5
fbm_render( ap, pp, swp, dp )
struct application	*ap;
struct partition	*pp;
struct shadework	*swp;
char	*dp;
@


1.6
log
@Changes to support movement of CLAMP() macro into vmath.h
Altered "if( " statements to "if (" for readability.
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.5 1999/10/30 03:06:24 butler Exp $ (ARL)";
d32 1
a32 1
#include "../rt/rdebug.h"
@


1.5
log
@Moved mathtab/rand_half from rt into libbn
Expanded structparse to include description and default
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.4 1999/07/02 22:20:40 mike Exp $ (ARL)";
d105 1
a105 1
	if( rdebug&RDEBUG_SHADE)
d108 1
a108 1
	if( bu_struct_parse( matparm, fbm_parse, (char *)fbm ) < 0 )
d111 1
a111 1
	if( rdebug&RDEBUG_SHADE)
d153 1
a153 1
	if( rdebug&RDEBUG_SHADE)
d164 1
a164 1
	if( rdebug&RDEBUG_SHADE)
@


1.4
log
@
Removed dependence on compat4.h
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.3 1999/07/01 20:08:45 mike Exp $ (ARL)";
a31 1
#include "../rt/mathtab.h"
@


1.3
log
@
compat4
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header: /c/CVS/brlcad/liboptical/sh_fbm.c,v 1.2 1998/09/22 01:29:54 mike Exp $ (ARL)";
d64 11
a74 11
	{"%f",	1, "lacunarity",	FBM_O(lacunarity),	FUNC_NULL },
	{"%f",	1, "H", 		FBM_O(h_val),		FUNC_NULL },
	{"%f",	1, "octaves", 		FBM_O(octaves),		FUNC_NULL },
	{"%f",	1, "gain",		FBM_O(gain),		FUNC_NULL },
	{"%f",	1, "distortion",	FBM_O(distortion),	FUNC_NULL },
	{"%f",	1, "l",			FBM_O(lacunarity),	FUNC_NULL },
	{"%d",	1, "o", 		FBM_O(octaves),		FUNC_NULL },
	{"%f",	1, "g",			FBM_O(gain),		FUNC_NULL },
	{"%f",	1, "d",			FBM_O(distortion),	FUNC_NULL },
	{"%f",  3, "scale",		FBM_AO(scale),		FUNC_NULL },
	{"",	0, (char *)0,		0,			FUNC_NULL }
@


1.2
log
@Moved optical shaders from rt/ to liboptical/
The only modifications involved moving and splitting
rt/material.h into h/shadefuncs.h and h/shadework.h,
and in changing the calling sequence to mlib_setup() in rt/material.c

Now the only shader function called directly by RT is
in liboptical/init.c: optical_shader_init().
It adds all the individual shaders to the "mfuncs" shader list.
@
text
@d20 1
a20 1
static char RCSsh_fbm[] = "@@(#)$Header$ (ARL)";
d61 1
a61 1
#define FBM_AO(m)	offsetofarray(struct fbm_specific, m)
d63 1
a63 1
struct structparse fbm_parse[] = {
d96 1
a96 1
struct rt_vls	*matparm;
d101 2
a102 2
	RT_VLS_CHECK( matparm );
	GETSTRUCT( fbm, fbm_specific );
d107 1
a107 1
		rt_log("fbm_setup\n");
d109 1
a109 1
	if( rt_structparse( matparm, fbm_parse, (char *)fbm ) < 0 )
d113 1
a113 1
		rt_structprint( rp->reg_name, fbm_parse, (char *)fbm );
d126 1
a126 1
	rt_structprint( rp->reg_name, fbm_parse, (char *)dp );
d136 1
a136 1
	rt_free( cp, "fbm_specific" );
d155 1
a155 1
		rt_structprint( "foo", fbm_parse, (char *)fbm_sp );
d161 1
a161 1
	noise_vec(pt, v_noise);
d166 1
a166 1
		rt_log("fbm_render: point (%g %g %g) becomes (%g %g %g)\n\tv_noise (%g %g %g)\n",
@


1.1
log
@Initial revision
@
text
@d2 16
a17 1
 *	F B M . C
d19 4
d30 6
a35 3
#include "./material.h"
#include "./mathtab.h"
#include "./rdebug.h"
d37 1
@
