head	1.13;
access;
symbols
	rel-4-5:1.10
	ctj-4-5-post:1.9
	ctj-4-5-pre:1.9;
locks; strict;
comment	@ * @;


1.13
date	99.02.04.06.47.12;	author butler;	state dead;
branches;
next	1.12;

1.12
date	98.09.22.01.29.54;	author mike;	state Exp;
branches;
next	1.11;

1.11
date	98.06.30.22.54.17;	author mike;	state Exp;
branches;
next	1.10;

1.10
date	97.12.31.09.01.40;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	97.01.07.23.58.14;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	96.09.27.04.30.27;	author butler;	state Exp;
branches;
next	1.7;

1.7
date	96.08.31.08.46.01;	author butler;	state Exp;
branches;
next	1.6;

1.6
date	96.08.31.08.29.28;	author butler;	state Exp;
branches;
next	1.5;

1.5
date	96.08.30.00.08.21;	author butler;	state Exp;
branches;
next	1.4;

1.4
date	96.07.22.20.34.18;	author jra;	state Exp;
branches;
next	1.3;

1.3
date	96.07.12.14.58.14;	author jra;	state Exp;
branches;
next	1.2;

1.2
date	96.01.05.23.46.06;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	96.01.04.23.57.42;	author butler;	state Exp;
branches;
next	;


desc
@color square shader
@


1.13
log
@cs shader was never completed, and is kinda stupid anyway.
@
text
@/*
 *	S H _ C S . C
 *
 *	Color Square shader.  Maps the shader space RPP onto the unit
 *	color cube.
 *
 */
#include "conf.h"

#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "shadefuncs.h"
#include "shadework.h"
#include "../rt/mathtab.h"
#include "../rt/rdebug.h"


#define cs_MAGIC 0x1834    /* make this a unique number for each shader */
#define CK_cs_SP(_p) RT_CKMAG(_p, cs_MAGIC, "cs_specific")

/*
 * the shader specific structure contains all variables which are unique
 * to any particular use of the shader.
 */
struct cs_specific {
	long	magic;	/* magic # for memory validity check, must come 1st */
	double	cs_val;
	char	*cs_reg_name;
	mat_t	cs_m_to_sh;	/* model to shader space matrix */
};

/* The default values for the variables in the shader specific structure */
static CONST
struct cs_specific cs_defaults = {
	cs_MAGIC,
	0.0,
	(char *) NULL,
	{	0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0 }
	};

#define SHDR_NULL	((struct cs_specific *)0)
#define SHDR_O(m)	offsetof(struct cs_specific, m)
#define SHDR_AO(m)	offsetofarray(struct cs_specific, m)

/* description of how to parse/print the arguments to the shader
 * There is at least one line here for each variable in the shader specific
 * structure above
 */
struct bu_structparse cs_print_tab[] = {
	{"%f",  1, "val",		SHDR_O(cs_val),		FUNC_NULL },
	{"",	0, (char *)0,		0,			FUNC_NULL }

};
struct bu_structparse cs_parse_tab[] = {
	{"i",	bu_byteoffset(cs_print_tab[0]), (char *)0, 0,		FUNC_NULL },
	{"%f",  1, "v",			SHDR_O(cs_val),		FUNC_NULL },
	{"",	0, (char *)0,		0,			FUNC_NULL }
};

HIDDEN int	cs_setup(), cs_render();
HIDDEN void	cs_print(), cs_free();

/* The "mfuncs" structure defines the external interface to the shader.
 * Note that more than one shader "name" can be associated with a given
 * shader by defining more than one mfuncs struct in this array.
 * See sh_phong.c for an example of building more than one shader "name"
 * from a set of source functions.  There you will find that "glass" "mirror"
 * and "plastic" are all names for the same shader with different default
 * values for the parameters.
 */
struct mfuncs cs_mfuncs[] = {
	{MF_MAGIC,	"cs",		0,		MFI_NORMAL|MFI_HIT|MFI_UV,	0,
	cs_setup,	cs_render,	cs_print,	cs_free },

	{0,		(char *)0,	0,		0,		0,
	0,		0,		0,		0 }
};


/*	C S _ S E T U P
 *
 *	This routine is called (at prep time)
 *	once for each region which uses this shader.
 *	Any shader-specific initialization should be done here.
 */
HIDDEN int
cs_setup( rp, matparm, dpp, mfp, rtip)
register struct region	*rp;
struct rt_vls		*matparm;
char			**dpp;	/* pointer to reg_udata in *rp */
struct mfuncs		*mfp;
struct rt_i		*rtip;	/* New since 4.4 release */
{
	register struct cs_specific	*cs_sp;
	mat_t	tmp;
	vect_t	bb_min, bb_max, v_tmp;

	/* check the arguments */
	RT_CHECK_RTI(rtip);
	RT_VLS_CHECK( matparm );
	RT_CK_REGION(rp);


	if( rdebug&RDEBUG_SHADE)
		rt_log("cs_setup(%s)\n", rp->reg_name);

	/* Get memory for the shader parameters and shader-specific data */
	GETSTRUCT( cs_sp, cs_specific );
	*dpp = (char *)cs_sp;

	/* initialize the default values for the shader */
	memcpy(cs_sp, &cs_defaults, sizeof(struct cs_specific) );

	/* parse the user's arguments for this use of the shader. */
	if( bu_struct_parse( matparm, cs_parse_tab, (char *)cs_sp ) < 0 )
		return(-1);

	/* Optional:
	 *
	 * If the shader needs to operate in a coordinate system which stays
	 * fixed on the region when the region is moved (as in animation)
	 * we need to get a matrix to perform the appropriate transform(s).
	 */

	db_shader_mat(cs_sp->cs_m_to_sh, rtip, rp, bb_min, bb_max);

	if( rdebug&RDEBUG_SHADE) {
		cs_sp->cs_reg_name = rt_strdup(rp->reg_name);

		bu_struct_print( " Parameters:", cs_print_tab, (char *)cs_sp );
		mat_print( "m_to_sh", cs_sp->cs_m_to_sh );
	}

	return(1);
}

/*
 *	C S _ P R I N T
 */
HIDDEN void
cs_print( rp, dp )
register struct region *rp;
char	*dp;
{
	bu_struct_print( rp->reg_name, cs_print_tab, (char *)dp );
}

/*
 *	C S _ F R E E
 */
HIDDEN void
cs_free( cp )
char *cp;
{
	register struct cs_specific *cs_sp =
		(struct cs_specific *)cp;

	if (cs_sp->cs_reg_name)
		rt_free(cs_sp->cs_reg_name, "cs_sp region name");

	rt_free( cp, "cs_specific" );
}

/*
 *	C S _ R E N D E R
 *
 *	This is called (from viewshade() in shade.c) once for each hit point
 *	to be shaded.  The purpose here is to fill in values in the shadework
 *	structure.
 */
int
cs_render( ap, pp, swp, dp )
struct application	*ap;
struct partition	*pp;
struct shadework	*swp;	/* defined in material.h */
char			*dp;	/* ptr to the shader-specific struct */
{
	register struct cs_specific *cs_sp =
		(struct cs_specific *)dp;
	point_t pt;

	/* check the validity of the arguments we got */
	RT_AP_CHECK(ap);
	RT_CHECK_PT(pp);
	CK_cs_SP(cs_sp);

	if( rdebug&RDEBUG_SHADE) {
		bu_log("cs_render(%s)\n", cs_sp->cs_reg_name);
		bu_struct_print( "Parameters:", cs_print_tab, (char *)cs_sp );
	}

	/* If we are performing the shading in "region" space, we must 
	 * transform the hit point from "model" space to "region" space.
	 * See the call to db_region_mat in cs_setup().
	 */
	MAT4X3PNT(pt, cs_sp->cs_m_to_sh, swp->sw_hit.hit_point);


	if( rdebug&RDEBUG_SHADE) {
		rt_log("cs_render(%s)  model:(%g %g %g)\n",
			cs_sp->cs_reg_name,
			V3ARGS(swp->sw_hit.hit_point) );

		rt_log("cs_render(%s) shader:(%g %g %g)\n", 
			cs_sp->cs_reg_name,
			V3ARGS(pt) );
	}


	/* XXX perform shading operations here */
	VMOVE(swp->sw_color, pt);

	/* caller will perform transmission/reflection calculations
	 * based upon the values of swp->sw_transmit and swp->sw_reflect
	 *
	 * 0 < swp->sw_transmit <= 1 causes transmission computations
	 * 0 < swp->sw_reflect <= 1 causes reflection computations
	 */

	return(1);
}
@


1.12
log
@Moved optical shaders from rt/ to liboptical/
The only modifications involved moving and splitting
rt/material.h into h/shadefuncs.h and h/shadework.h,
and in changing the calling sequence to mlib_setup() in rt/material.c

Now the only shader function called directly by RT is
in liboptical/init.c: optical_shader_init().
It adds all the individual shaders to the "mfuncs" shader list.
@
text
@@


1.11
log
@Can't make "struct mfuncs" a CONST, because the forward link needs
to be filled in at runtime, and some compilers put CONST data into
read-only pages (like FreeBSD).
@
text
@d16 4
a19 3
#include "./material.h"
#include "./mathtab.h"
#include "./rdebug.h"
@


1.10
log
@Required magic number to be first in mfunc table,
consistent with all other BRL-CAD magic numbers.
Required magic number to be initialized at compile time.
Added code to check the magic numbers.
Made the xxx_mfunc arrays CONST, so they can't get trashed by
runtime runaway pointer problems.
@
text
@d77 1
a77 1
CONST struct mfuncs cs_mfuncs[] = {
@


1.9
log
@Changed to bu_byteoffset
@
text
@d77 2
a78 2
struct mfuncs cs_mfuncs[] = {
	{"cs",	0,	0,		MFI_NORMAL|MFI_HIT|MFI_UV,	0,
d81 1
a81 1
	{(char *)0,	0,		0,		0,		0,
@


1.8
log
@db_shader_mat() parameter change
@
text
@d13 1
a45 15
#if CRAY
#	define byteoffset(_i)	(((int)&(_i)))	/* actually a word offset */
#else
#  if IRIX > 5
#	define byteoffset(_i)	((size_t)__INTADDR__(&(_i)))
#  else
#    if sgi || __convexc__ || ultrix || _HPUX_SOURCE
	/* "Lazy" way.  Works on reasonable machines with byte addressing */
#	define byteoffset(_i)	((int)((char *)&(_i)))
#    else
	/* "Conservative" way of finding # bytes as diff of 2 char ptrs */
#	define byteoffset(_i)	((int)(((char *)&(_i))-((char *)0)))
#    endif
#  endif
#endif
d61 1
a61 1
	{"i",	byteoffset(cs_print_tab[0]), (char *)0, 0,		FUNC_NULL },
d131 1
a131 1
	db_shader_mat(cs_sp->cs_m_to_sh, rtip, rp);
@


1.7
log
@bu_struct_print
@
text
@d145 1
a145 1
	db_shader_mat(cs_sp->cs_m_to_sh, rtip->rti_dbip, rp);
@


1.6
log
@bu_struct_parse
@
text
@d150 1
a150 1
		bu_structprint( " Parameters:", cs_print_tab, (char *)cs_sp );
d165 1
a165 1
	bu_structprint( rp->reg_name, cs_print_tab, (char *)dp );
d209 1
a209 1
		bu_structprint( "Parameters:", cs_print_tab, (char *)cs_sp );
@


1.5
log
@structparse moved to libbu
@
text
@d135 1
a135 1
	if( bu_structparse( matparm, cs_parse_tab, (char *)cs_sp ) < 0 )
@


1.4
log
@Minor Mods for IRIX 6.2
@
text
@d69 1
a69 1
struct structparse cs_print_tab[] = {
d74 1
a74 1
struct structparse cs_parse_tab[] = {
d135 1
a135 1
	if( rt_structparse( matparm, cs_parse_tab, (char *)cs_sp ) < 0 )
d150 1
a150 1
		rt_structprint( " Parameters:", cs_print_tab, (char *)cs_sp );
d165 1
a165 1
	rt_structprint( rp->reg_name, cs_print_tab, (char *)dp );
d208 2
a209 2
		rt_log("cs_render(%s)\n", cs_sp->cs_reg_name);
		rt_structprint( "Parameters:", cs_print_tab, (char *)cs_sp );
@


1.3
log
@Minor mod for IRIX 6.2
@
text
@d45 15
d75 1
a75 1
	{"i",	(long)(cs_print_tab), (char *)0, 0,		FUNC_NULL },
@


1.2
log
@remade from new sh_xxx.c
@
text
@d35 1
a35 1
CONST static
@


1.1
log
@Initial revision
@
text
@d6 1
d29 3
a31 4
	double	val;	/* variables for shader ... */
	vect_t	delta;
	mat_t	m_to_r;	/* model to region matrix */
	char	*name;
d38 2
a39 2
	1.0,
	{ 1.0, 1.0, 1.0 },
d55 1
a55 2
	{"%f",  1, "val",		SHDR_O(val),		FUNC_NULL },
	{"%f",  3, "delta",		SHDR_AO(delta),		FUNC_NULL },
d61 1
a61 2
	{"%f",  1, "v",			SHDR_O(val),		FUNC_NULL },
	{"%f",  3, "d",			SHDR_AO(delta),		FUNC_NULL },
d85 1
a85 1
/*	X X X _ S E T U P
d123 1
a123 4

#if 0
	/* Optional:  get the matrix which maps model space into
	 *  "region" or "shader" space.
d130 1
a130 1
	db_region_mat(cs_sp->m_to_r, rtip->rti_dbip, rp->reg_name);
d132 2
a133 25
	/* 
	 * scale space so that the range 0..1 in shader space covers 
	 * the region bounding box exactly
	 */

	VSETALL(bb_max, -INFINITY);
	VSETALL(bb_min, INFINITY);
	rt_bound_tree(rp->reg_treetop, bb_min, bb_max);

	if( rdebug&RDEBUG_SHADE)
		rt_log("bb_min(%g %g %g)   bb_max(%g %g %g)\n",
			V3ARGS(bb_min),		V3ARGS(bb_max) );

	VSUB2(v_tmp, bb_max, bb_min);
	VINVDIR(v_tmp, v_tmp);
	mat_idn(tmp);
	MAT_SCALE_VEC(tmp, v_tmp);
	mat_mul2(tmp, cs_sp->m_to_r);
#else
	db_shader_mat(cs_sp->m_to_r, rtip->rti_dbip, rp);
#endif
	/* 
	 * cs_sp->m_to_r now maps model-space coordinates
	 * into region-space coordinates
	 */
a134 1
	if( rdebug&RDEBUG_SHADE) {
d136 1
a136 1
		mat_print( "m_to_r", cs_sp->m_to_r );
d143 1
a143 1
 *	X X X _ P R I N T
d154 1
a154 1
 *	X X X _ F R E E
d160 6
d170 1
a170 1
 *	X X X _ R E N D E R
d192 4
a195 2
	if( rdebug&RDEBUG_SHADE)
		rt_structprint( "cs", cs_print_tab, (char *)cs_sp );
d201 2
a202 1
	MAT4X3PNT(pt, cs_sp->m_to_r, swp->sw_hit.hit_point);
d204 9
a213 6
	if( rdebug&RDEBUG_SHADE)
		rt_log("cs_render(%s)  model:(%g %g %g)\ncs_render(%s) region:(%g %g %g)\n", 
		cs_sp->name,
		V3ARGS(swp->sw_hit.hit_point),
		cs_sp->name,
		V3ARGS(pt) );
d216 1
a217 1

a223 2

	VMOVE(swp->sw_color, pt);
@
