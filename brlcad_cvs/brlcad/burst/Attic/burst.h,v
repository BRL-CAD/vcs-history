head	1.13;
access;
symbols
	ansi-20040405-merged:1.11.6.1
	postmerge-20040405-ansi:1.12
	premerge-20040404-ansi:1.12
	postmerge-autoconf:1.12
	autoconf-freeze:1.12
	premerge-autoconf:1.12
	ansi-20040316-freeze:1.11
	postmerge-20040315-windows:1.12
	premerge-20040315-windows:1.12
	windows-20040315-freeze:1.11.8.1
	autoconf-20031203:1.12
	autoconf-20031202:1.12
	autoconf-branch:1.12.0.2
	phong-branch:1.11.0.12
	photonmap-branch:1.11.0.10
	rel-6-1-DP:1.11
	windows-branch:1.11.0.8
	rel-6-0-2:1.11
	ansi-branch:1.11.0.6
	rel-6-0-1-branch:1.11.0.4
	hartley-6-0-post:1.11
	hartley-6-0-pre:1.11
	rel-6-0-1:1.11
	rel-6-0:1.11
	rel-5-4:1.11
	offsite-5-3-pre:1.11
	rel-5-3:1.11
	rel-5-2:1.11
	rel-5-1-branch:1.11.0.2
	rel-5-1:1.11
	rel-5-0:1.11
	rel-5-0-beta:1.11
	rel-4-5:1.10
	ctj-4-5-post:1.9
	ctj-4-5-pre:1.9
	rel-4-4:1.9
	rel-4-0:1.8
	rel-3-5:1.3;
locks; strict;
comment	@ * @;


1.13
date	2004.05.24.04.18.19;	author morrison;	state dead;
branches;
next	1.12;

1.12
date	2003.09.27.00.15.39;	author morrison;	state Exp;
branches;
next	1.11;

1.11
date	98.06.23.18.20.40;	author jra;	state Exp;
branches
	1.11.6.1
	1.11.8.1;
next	1.10;

1.10
date	97.12.16.03.45.56;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	92.05.05.15.09.28;	author moss;	state Exp;
branches;
next	1.8;

1.8
date	91.09.11.10.37.26;	author moss;	state Exp;
branches;
next	1.7;

1.7
date	91.01.15.13.53.15;	author moss;	state Exp;
branches;
next	1.6;

1.6
date	89.10.31.12.19.51;	author moss;	state Exp;
branches;
next	1.5;

1.5
date	89.07.14.12.59.28;	author moss;	state Exp;
branches;
next	1.4;

1.4
date	89.07.07.16.33.03;	author moss;	state Exp;
branches;
next	1.3;

1.3
date	89.01.20.15.21.02;	author moss;	state Exp;
branches;
next	1.2;

1.2
date	88.11.07.17.00.22;	author moss;	state Exp;
branches;
next	1.1;

1.1
date	88.10.28.17.02.12;	author moss;	state Exp;
branches;
next	;

1.11.6.1
date	2004.03.17.21.15.51;	author morrison;	state Exp;
branches;
next	;

1.11.8.1
date	2004.03.11.23.40.26;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.13
log
@moved to src/burst/
@
text
@/*
	Author:		Gary S. Moss
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066

	$Header: /n/xoff/cvs/brlcad/burst/burst.h,v 1.12 2003/09/27 00:15:39 morrison Exp $ (BRL)
 */
#ifndef INCL_BURST
#define INCL_BURST

/* NSIG not always defined in <signal.h> */
#ifndef NSIG
#define NSIG 64
#endif

/* Some useful stuff from Doug Gwyn's std.h. */
/* Extended data types */
typedef int bool;			/* Boolean data */
#define false	0
#define true	1
/* ANSI C definitions */
/* Defense against some silly systems defining __STDC__ to random things. */
#ifdef STD_C
#undef STD_C
#endif
#ifdef __STDC__
#if __STDC__ > 0
#define STD_C   __STDC__                /* use this instead of __STDC__ */
#endif
#endif
#if STD_C
typedef void *pointer;			/* generic pointer */
#else
typedef char *pointer;			/* generic pointer */
#define const		/* nothing */	/* ANSI C type qualifier */
/* There really is no substitute for the following, but these might work: */
#define signed          /* nothing */   /* ANSI C type specifier */
#define volatile        /* nothing */   /* ANSI C type qualifier */
#endif
#ifndef BURST_EXIT_SUCCESS
#define BURST_EXIT_SUCCESS	0
#endif
#ifndef BURST_EXIT_FAILURE
#define BURST_EXIT_FAILURE	1
#endif
#define DEGRAD	57.2957795130823208767981548141051703324054724665642

/* allow for SGI screw-up, the single-precision math libraries */
#if defined( sgi ) && ! defined( mips )
#define SINGLE_PRECISION 1
#else
#define SINGLE_PRECISION 0
#endif

/* allow for SGI screw-up, winclose() dumps core on some systems */
#if defined(SGI4D_Rel2)
#define SGI_WINCLOSE_BUG 1
#else
#define SGI_WINCLOSE_BUG 0
#endif

/* allow for BSD screw-up, declaring signal handlers as 'int' functions */
#if STD_C || (defined(SYSV) && ! defined(cray))
#define STD_SIGNAL_DECLS 1
#else
#define STD_SIGNAL_DECLS 0
#endif

/* menu configuration */
#define MENU_LFT	1
#define MENU_TOP	2
#define MENU_MAXVISITEMS	10

/* prompt line configuration */
#define PROMPT_X	HmXPROMPT
#define PROMPT_Y	HmYPROMPT

/* banner (border) configuration */
#define BORDER_CHR	'_'
#define BORDER_Y	(PROMPT_Y+1)

/* grid offset printing window */
#define GRID_X		55	/* where grid indices are printed */
#define GRID_Y		BORDER_Y

/* scroll region configuration */
#define SCROLL_TOP	(BORDER_Y+1)
#define SCROLL_BTM	(ScLI-1) /* bottom line causes scroll */

/* timer (cpu statistics) window configuration */
#define TIMER_X		1
#define TIMER_Y		1

/* buffer sizes */
#define LNBUFSZ		133	/* buffer for one-line messages */
#define MAXDEVWID	1024	/* maximum width of frame buffer */

#define CHAR_COMMENT	'#'
#define CMD_COMMENT	"comment"

/* default parameters */
#define DFL_AZIMUTH	0.0
#define DFL_BARRIERS	100
#define DFL_BDIST	0.0
#define DFL_CELLSIZE	101.6
#define DFL_CONEANGLE	(45.0/DEGRAD)
#define DFL_DEFLECT	false
#define DFL_DITHER	false
#define DFL_ELEVATION	0.0
#define DFL_NRAYS	200
#define DFL_OVERLAPS	true
#define DFL_RIPLEVELS	1
#define DFL_UNITS	U_MILLIMETERS

/* firing mode bit definitions */
#define ASNBIT(w,b)	(w = (b))
#define SETBIT(w,b)	(w |= (b))
#define CLRBIT(w,b)	(w &= ~(b))
#define TSTBIT(w,b)	((w)&(b))	
#define FM_GRID  0	/* generate grid of shotlines */
#define FM_DFLT	 FM_GRID
#define FM_PART  (1)	/* bit 0: ON = partial envelope, OFF = full */
#define FM_SHOT	 (1<<1)	/* bit 1: ON = discrete shots, OFF = gridding */
#define FM_FILE	 (1<<2)	/* bit 2: ON = file input, OFF = direct input */
#define FM_3DIM	 (1<<3)	/* bit 3: ON = 3-D coords., OFF = 2-D coords */
#define FM_BURST (1<<4) /* bit 4: ON = discrete burst points, OFF = shots */

/* flags for notify() */
#define	NOTIFY_APPEND	1
#define NOTIFY_DELETE	2
#define NOTIFY_ERASE	4

#define NOTIFY_DELIM	':'

#define PB_ASPECT_INIT		'1'
#define PB_CELL_IDENT		'2'
#define PB_RAY_INTERSECT	'3'
#define PB_RAY_HEADER		'4'
#define PB_REGION_HEADER	'5'

#define PS_ASPECT_INIT		'1'
#define PS_CELL_IDENT		'2'
#define PS_SHOT_INTERSECT	'3'

#define TITLE_LEN	72
#define TIMER_LEN	72

#define U_INCHES	0
#define U_FEET		1
#define U_MILLIMETERS	2
#define U_CENTIMETERS	3
#define U_METERS	4
#define U_BAD		-1

#define UNITS_INCHES		"inches"
#define UNITS_FEET		"feet"
#define UNITS_MILLIMETERS	"millimeters"
#define UNITS_CENTIMETERS	"centimeters"
#define UNITS_METERS		"meters"

/* white space in input tokens */
#define WHITESPACE	" \t"

/* colors for UNIX plot files */
#define R_GRID		255	/* grid - yellow */
#define G_GRID		255
#define B_GRID		0

#define R_BURST		255	/* burst cone - red */
#define G_BURST		0
#define B_BURST		0

#define R_OUTAIR	100	/* outside air - light blue */
#define G_OUTAIR	100
#define B_OUTAIR	255

#define R_INAIR		100	/* inside air - light green */
#define G_INAIR		255
#define B_INAIR		100

#define R_COMP		0	/* component (default) - blue */
#define G_COMP		0
#define B_COMP		255

#define R_CRIT		255	/* critical component (default) - purple */
#define G_CRIT		0
#define B_CRIT		255

#define C_MAIN		0
#define C_CRIT		1

#define TWO_PI		6.28318530717958647692528676655900576839433879875022

#define COS_TOL		0.01
#define LOS_TOL		0.1
#define VEC_TOL		0.001
#define OVERLAP_TOL	0.25	/* thinner overlaps not reported */
#define EXIT_AIR	9	/* exit air is called 09 air */
#define OUTSIDE_AIR	1	/* outside air is called 01 air */

#define Air(rp)		((rp)->reg_aircode > 0)
#define DiffAir(rp,sp)	((rp)->reg_aircode != (sp)->reg_aircode)
#define SameAir(rp,sp)	((rp)->reg_aircode == (sp)->reg_aircode)
#define SameCmp(rp,sp)	((rp)->reg_regionid == (sp)->reg_regionid)
#define OutsideAir(rp)	((rp)->reg_aircode == OUTSIDE_AIR)
#define InsideAir(rp)	(Air(rp)&& !OutsideAir(rp))

#define Malloc_Bomb( _bytes_ ) \
                brst_log( "\"%s\"(%d) : allocation of %d bytes failed.\n",\
                                __FILE__, __LINE__, _bytes_ )

#define Swap_Doubles( a_, b_ ) \
		{	fastf_t	f_ = a_; \
		a_ = b_; \
		b_ = f_; \
		}
#define Toggle(f)	(f) = !(f)

typedef struct ids	Ids;
struct ids
	{
	short	i_lower;
	short	i_upper;
	Ids	*i_next;
	};
#define IDS_NULL	(Ids *) 0

typedef struct colors	Colors;
struct colors
	{
	short	c_lower;
	short	c_upper;
	unsigned char	c_rgb[3];
	Colors	*c_next;
	};
#define COLORS_NULL	(Colors *) 0

typedef struct pt_queue	Pt_Queue;
struct pt_queue
	{
	struct partition	*q_part;
	Pt_Queue		*q_next;
	};

#define PT_Q_NULL	(Pt_Queue *) 0
#endif /* INCL_BURST */
@


1.12
log
@added a prefix to several #defines that conflicted with system defines on AIX
@
text
@d7 1
a7 1
	$Header: /c/CVS/brlcad/burst/burst.h,v 1.11 1998/06/23 18:20:40 jra Exp $ (BRL)
@


1.11
log
@convert bu_log to brst_log to avoid conflicts
@
text
@d7 1
a7 1
	$Header: /c/CVS/brlcad/burst/burst.h,v 1.10 1997/12/16 03:45:56 mike Exp $ (BRL)
d41 2
a42 2
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS	0
d44 2
a45 2
#ifndef EXIT_FAILURE
#define EXIT_FAILURE	1
@


1.11.6.1
log
@sync branch with HEAD
@
text
@d7 1
a7 1
	$Header$ (BRL)
d41 2
a42 2
#ifndef BURST_EXIT_SUCCESS
#define BURST_EXIT_SUCCESS	0
d44 2
a45 2
#ifndef BURST_EXIT_FAILURE
#define BURST_EXIT_FAILURE	1
@


1.11.8.1
log
@sync to HEAD...
@
text
@d7 1
a7 1
	$Header: /n/cad/c/CVS/brlcad/burst/burst.h,v 1.12 2003/09/27 00:15:39 morrison Exp $ (BRL)
d41 2
a42 2
#ifndef BURST_EXIT_SUCCESS
#define BURST_EXIT_SUCCESS	0
d44 2
a45 2
#ifndef BURST_EXIT_FAILURE
#define BURST_EXIT_FAILURE	1
@


1.10
log
@UPgraded using h/sed4
@
text
@d7 1
a7 1
	$Header: /m/cad/burst/RCS/burst.h,v 1.9 1992/05/05 15:09:28 moss Exp mike $ (BRL)
d210 1
a210 1
                bu_log( "\"%s\"(%d) : allocation of %d bytes failed.\n",\
@


1.9
log
@Added definition of NSIG, IRIX 4.0 doesn't define it in signal.h.
@
text
@d7 1
a7 1
	$Header: /vld/moss/src/burst/RCS/burst.h,v 1.8 91/09/11 10:37:26 moss Exp Locker: moss $ (BRL)
d210 1
a210 1
                rt_log( "\"%s\"(%d) : allocation of %d bytes failed.\n",\
@


1.8
log
@Removed Check_Iflip/Oflip macros.  These are now replaced by functions
chkEntryNorm() and chkExitNorm().
@
text
@d7 1
a7 1
	$Header: /vld/moss/src/burst/RCS/burst.h,v 1.7 91/01/15 13:53:15 moss Exp $ (BRL)
d11 5
@


1.7
log
@Removed author's phone number from top of file comment.  This will be
shipped as version 2.1.
@
text
@d7 1
a7 1
	$Header: /vld/moss/src/burst/RCS/burst.h,v 1.6 89/10/31 12:19:51 moss Exp $ (BRL)
a202 29

#define Check_Iflip( _pp, _normal, _rdir )\
	{	fastf_t	f;\
	if( _pp->pt_inflip )\
		{\
		ScaleVec( _normal, -1.0 );\
		_pp->pt_inflip = 0;\
		}\
	f = Dot( _rdir, _normal );\
	if( f >= 0.0 )\
		{\
		ScaleVec( _normal, -1.0 );\
		rt_log( "Fixed flipped entry normal\n" );\
		}\
	}
#define Check_Oflip( _pp, _normal, _rdir )\
	{	fastf_t	f;\
	if( _pp->pt_outflip )\
		{\
		ScaleVec( _normal, -1.0 );\
		_pp->pt_outflip = 0;\
		}\
	f = Dot( _rdir, _normal );\
	if( f <= 0.0 )\
		{\
		ScaleVec( _normal, -1.0 );\
		rt_log( "Fixed flipped exit normal\n" );\
		}\
	}
@


1.6
log
@This version released to Eglin and Service Engineering after BRL-CAD '89
Symposium.
@
text
@a5 1
			(301)278-6651 or AV-298-6651
d7 1
a7 1
	$Header: /usr/vld/moss/src/burst/RCS/burst.h,v 1.5 89/07/14 12:59:28 moss Exp $ (BRL)
@


1.5
log
@This is the pre-release copy that Bud took with him.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/burst.h,v 1.4 89/07/07 16:33:03 moss Exp $ (BRL)
d161 10
a170 1
#define R_OUTAIR	100
d173 2
a174 1
#define R_INAIR		100
d177 2
a178 1
#define R_COMP		0
d181 2
a182 1
#define R_CRIT		255
a184 3
#define R_SHIELD	255
#define G_SHIELD	255
#define B_SHIELD	255
a187 1
#define C_SHIELD	2
@


1.4
log
@Ready for Bud's visit.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/burst.h,v 1.3 89/01/20 15:21:02 moss Exp $ (BRL)
d96 1
d102 1
a102 1
#define DFL_CELLSIZE	1.0
@


1.3
log
@Just saving this version for backup purposes, recently added support for
explicitly inputing burst points.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/burst.h,v 1.2 88/11/07 17:00:22 moss Exp $ (BRL)
d12 33
a44 6
/* boolean types */
typedef int	bool;
#define true		1
#define false		0
#define success		0
#define failure		1
d47 1
a47 1
#define SINGLE_PRECISION true
d49 1
a49 1
#define SINGLE_PRECISION false
d51 15
d70 1
d74 1
d78 1
d82 1
d86 1
d90 1
d102 1
a102 1
#define DFL_CONEANGLE	90.0
d112 4
d131 5
a135 7
#define P_HEADER_INIT	'1'
#define P_ASPECT_INIT	'2'
#define P_CELL_IDENT	'3'
#define P_RAY_INTERSECT	'4'
#define P_BURST_HEADER	'5'
#define P_REGION_HEADER	'6'
#define P_SHIELD_COMP	'7'
d137 4
d182 1
a182 1
#define Epsilon		0.001
d184 1
a235 3
/* stolen from Doug Gwyn's /vld/include/std.h */
#define DEGRAD	57.2957795130823208767981548141051703324054724665642

a257 1
	int			q_space;
@


1.2
log
@Just saving this version for fallback.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/burst.h,v 1.1 88/10/28 17:02:12 moss Exp $ (BRL)
d18 6
d51 1
d60 1
d64 7
a70 6
#define FM_GRID 0	/* generate grid of shotlines */
#define FM_DFLT	FM_GRID
#define FM_PART (1)	/* bit 0: ON = partial envelope, OFF = full */
#define FM_SHOT	(1<<1)	/* bit 1: ON = discrete shots, OFF = gridding */
#define FM_FILE	(1<<2)	/* bit 2: ON = file input, OFF = direct input */
#define FM_3DIM	(1<<3)	/* bit 3: ON = 3-D coords., OFF = 2-D coords */
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
	$Header$ (BRL)
d39 4
a42 2
/* white space in input tokens */
#define WHITESPACE	" \t"
d55 7
a61 2
#define TITLE_LEN	72
#define TIMER_LEN	72
d63 4
a66 1
#define CHAR_COMMENT	'#'
d68 2
d78 3
d94 2
a95 6
/* firing mode bit definitions */
#define FM_GRID 0	/* generate grid of shotlines */
#define FM_DFLT	FM_GRID
#define FM_SHOT	1	/* bit 0: ON = discrete shots, OFF = gridding */
#define FM_FILE	(1<<2)	/* bit 1: ON = file input, OFF = direct input */
#define FM_3DIM	(1<<3)	/* bit 2: ON = 3-D coords., OFF = 2-D coords */
@
