head	1.22;
access;
symbols
	ansi-20040405-merged:1.19.4.2
	postmerge-20040405-ansi:1.20
	premerge-20040404-ansi:1.20
	postmerge-autoconf:1.20
	autoconf-freeze:1.20
	premerge-autoconf:1.20
	ansi-20040316-freeze:1.19.4.1
	postmerge-20040315-windows:1.20
	premerge-20040315-windows:1.20
	windows-20040315-freeze:1.19.6.1
	autoconf-20031203:1.20
	autoconf-20031202:1.20
	autoconf-branch:1.20.0.6
	phong-branch:1.20.0.4
	photonmap-branch:1.20.0.2
	rel-6-1-DP:1.20
	windows-branch:1.19.0.6
	rel-6-0-2:1.19
	ansi-branch:1.19.0.4
	rel-6-0-1-branch:1.19.0.2
	hartley-6-0-post:1.19
	hartley-6-0-pre:1.19
	rel-6-0-1:1.19
	rel-6-0:1.19
	rel-5-4:1.17
	offsite-5-3-pre:1.17
	rel-5-3:1.17
	rel-5-2:1.17
	rel-5-1-branch:1.17.0.2
	rel-5-1:1.17
	rel-5-0:1.17
	rel-5-0-beta:1.17
	rel-4-5:1.15
	ctj-4-5-post:1.14
	ctj-4-5-pre:1.14
	rel-4-4:1.12
	rel-4-0:1.12
	rel-3-5:1.3;
locks; strict;
comment	@ * @;


1.22
date	2004.05.24.04.18.19;	author morrison;	state dead;
branches;
next	1.21;

1.21
date	2004.05.10.15.30.41;	author erikg;	state Exp;
branches;
next	1.20;

1.20
date	2002.10.22.23.04.36;	author morrison;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.10.20.16.55;	author rbowers;	state Exp;
branches
	1.19.4.1
	1.19.6.1;
next	1.18;

1.18
date	2001.08.09.18.47.09;	author jra;	state Exp;
branches;
next	1.17;

1.17
date	98.10.28.17.11.14;	author jra;	state Exp;
branches;
next	1.16;

1.16
date	98.06.23.18.20.40;	author jra;	state Exp;
branches;
next	1.15;

1.15
date	97.12.16.03.45.56;	author mike;	state Exp;
branches;
next	1.14;

1.14
date	96.07.18.17.32.30;	author jra;	state Exp;
branches;
next	1.13;

1.13
date	95.02.28.09.15.33;	author jra;	state Exp;
branches;
next	1.12;

1.12
date	91.09.11.10.38.39;	author moss;	state Exp;
branches;
next	1.11;

1.11
date	91.08.26.11.05.15;	author moss;	state Exp;
branches;
next	1.10;

1.10
date	91.01.15.13.53.17;	author moss;	state Exp;
branches;
next	1.9;

1.9
date	91.01.15.13.40.02;	author moss;	state Exp;
branches;
next	1.8;

1.8
date	90.08.28.12.24.04;	author moss;	state Exp;
branches;
next	1.7;

1.7
date	90.08.22.09.39.12;	author moss;	state Exp;
branches;
next	1.6;

1.6
date	89.10.31.12.19.55;	author moss;	state Exp;
branches;
next	1.5;

1.5
date	89.07.14.12.59.32;	author moss;	state Exp;
branches;
next	1.4;

1.4
date	89.07.07.16.33.09;	author moss;	state Exp;
branches;
next	1.3;

1.3
date	89.01.20.15.21.08;	author moss;	state Exp;
branches;
next	1.2;

1.2
date	88.11.07.17.01.04;	author moss;	state Exp;
branches;
next	1.1;

1.1
date	88.10.28.17.02.15;	author moss;	state Exp;
branches;
next	;

1.19.4.1
date	2003.02.15.19.47.56;	author morrison;	state Exp;
branches;
next	1.19.4.2;

1.19.4.2
date	2004.03.17.21.15.51;	author morrison;	state Exp;
branches;
next	;

1.19.6.1
date	2004.03.11.23.40.27;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.22
log
@moved to src/burst/
@
text
@/*
	Author:		Gary S. Moss
			U. S. Army Ballistic Research Laboratory
			Aberdeen Proving Ground
			Maryland 21005-5066

	$Header: /n/xoff/cvs/brlcad/burst/extern.h,v 1.21 2004/05/10 15:30:41 erikg Exp $ (BRL)
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#if defined(HAVE_STDARG_H)
# include <stdarg.h>
#else
#include <varargs.h>
#endif

#if HAVE_UNISTD_H
#include <unistd.h>
#endif

#include <string.h>
#include "machine.h"
#include "fb.h"

#include "./burst.h"
#include "./trie.h"
#include "./Hm.h"

/* External functions from C library. */
#if (__STDC__ && ! apollo) || (sgi && mips && BRLCAD4_0)
#include <stdlib.h>
#else
extern char *fgets();
extern char *getenv();
extern char *malloc();
extern char *tmpnam();
#endif
#ifdef SYSV
extern long	lrand48();
#else
#if !defined(linux)
extern long	random();
#endif
#endif

/* External variables from termlib. */
extern char *CS, *DL;
extern int CO, LI;

/* External functions from application. */
extern Colors *findColors();
extern Func *getTrie();
extern Trie *addTrie();
extern bool chkEntryNorm();
extern bool chkExitNorm();
extern bool closFbDevice();
extern bool imageInit();
extern bool initUi();
extern bool openFbDevice();
extern bool findIdents();
extern bool readColors();
extern bool readIdents();
extern int notify();
extern int roundToInt();
extern void closeUi();
extern void colorPartition();
extern void exitCleanly();
extern void freeIdents();
extern void getRtHitNorm();
extern void gridInit();
extern void gridModel();
extern void gridToFb();
extern void locPerror();
extern void logCmd();
extern void paintCellFb();
extern void paintGridFb();
extern void paintSpallFb();
extern void plotGrid();
extern void plotInit();
extern void plotPartition();
extern void plotRay();
extern void prntAspectInit();
extern void prntBurstHdr();
extern void prntCellIdent();
extern void prntDbgPartitions();
extern void prntFiringCoords();
extern void prntFusingComp();
extern void prntGridOffsets();
extern void prntIdents();
extern void prntPhantom();
extern void prntRayHeader();
extern void prntRayIntersect();
extern void prntTimer();
extern void prompt();
extern void readCmdFile();
#if defined(HAVE_STDARG_H)
extern void prntScr( char *, ...);
extern void brst_log( char *, ... );
#else
extern void brst_log();
extern void prntScr();
#endif
extern void warning();
extern void prntUsage();
extern void clr_Tabs();
extern void prntShieldComp();
extern void qFree();
extern void prntRegionHdr();
extern int qAdd();
extern void prntSeg();
extern void gridRotate();
extern void HmBanner();
extern void spallInit();
extern void readBatchInput();
extern void set_Cbreak();
extern void clr_Echo();
extern void clr_Tabs();
extern void reset_Tty();
extern void save_Tty();

#if STD_SIGNAL_DECLS
extern void (*norml_sig)(), (*abort_sig)();
extern void abort_RT();
extern void intr_sig();
#else
extern int (*norml_sig)(), (*abort_sig)();
extern int abort_RT();
extern int intr_sig();
#endif

extern Colors colorids;
extern FBIO *fbiop;
extern FILE *burstfp;
extern FILE *gridfp;
extern FILE *histfp;
extern FILE *outfp;
extern FILE *plotfp;
extern FILE *shotfp;
extern FILE *shotlnfp;
extern FILE *tmpfp;
extern HmMenu *mainhmenu;
extern Ids airids;
extern Ids armorids;
extern Ids critids;
extern unsigned char *pixgrid;
extern unsigned char pixaxis[3];
extern unsigned char pixbkgr[3];
extern unsigned char pixbhit[3];
extern unsigned char pixblack[3];
extern unsigned char pixcrit[3];
extern unsigned char pixghit[3];
extern unsigned char pixmiss[3];
extern unsigned char pixtarg[3];
extern Trie *cmdtrie;

extern bool batchmode;
extern bool cantwarhead;
extern bool deflectcone;
extern bool dithercells;
extern bool fatalerror;
extern bool groundburst;
extern bool reportoverlaps;
extern bool reqburstair;
extern bool shotburst;
extern bool tty;
extern bool userinterrupt;

extern char airfile[];
extern char armorfile[];
extern char burstfile[];
extern char cmdbuf[];
extern char cmdname[];
extern char colorfile[];
extern char critfile[];
extern char errfile[];
extern char fbfile[];
extern char gedfile[];
extern char gridfile[];
extern char histfile[];
extern char objects[];
extern char outfile[];
extern char plotfile[];
extern char scrbuf[];
extern char scriptfile[];
extern char shotfile[];
extern char shotlnfile[];
extern char title[];
extern char timer[];
extern char tmpfname[];

extern char *cmdptr;

extern char **template;

extern fastf_t bdist;
extern fastf_t burstpoint[];
extern fastf_t cellsz;
extern fastf_t conehfangle;
extern fastf_t fire[];
extern fastf_t griddn;
extern fastf_t gridlf;
extern fastf_t gridrt;
extern fastf_t gridup;
extern fastf_t gridhor[];
extern fastf_t gridsoff[];
extern fastf_t gridver[];
extern fastf_t grndbk;
extern fastf_t grndht;
extern fastf_t grndfr;
extern fastf_t grndlf;
extern fastf_t grndrt;
extern fastf_t modlcntr[];
extern fastf_t modldn;
extern fastf_t modllf;
extern fastf_t modlrt;
extern fastf_t modlup;
extern fastf_t pitch;
extern fastf_t raysolidangle;
extern fastf_t standoff;
extern fastf_t unitconv;
extern fastf_t viewazim;
extern fastf_t viewelev;
extern fastf_t viewsize;
extern fastf_t yaw;
extern fastf_t xaxis[];
extern fastf_t zaxis[];
extern fastf_t negzaxis[];

extern int co;
extern int devhgt;
extern int devwid;
extern int firemode;
extern int gridsz;
extern int gridxfin;
extern int gridyfin;
extern int gridxorg;
extern int gridyorg;
extern int gridheight;
extern int gridwidth;
extern int li;
extern int nbarriers;
extern int noverlaps;
extern int nprocessors;
extern int nriplevels;
extern int nspallrays;
extern int units;
extern int zoom;

extern struct rt_i *rtip;
@


1.21
log
@change conf.h to a wrapped config.h
@
text
@d7 1
a7 1
	$Header: /cvs/brlcad/burst/extern.h,v 1.20 2002/10/22 23:04:36 morrison Exp $ (BRL)
@


1.20
log
@Modified round() to be roundToInt() to better describe what the function does, and to avoid clashing with a system round that may return a floating point value (macosx)
@
text
@d7 1
a7 1
	$Header: /c/CVS/brlcad/burst/extern.h,v 1.19 2001/08/10 20:16:55 rbowers Exp $ (BRL)
d10 3
a12 1
#include "conf.h"
@


1.19
log
@-* removed ancient declaration of sbrk that conflicted with that in
   unistd.h
@
text
@d7 1
a7 1
	$Header: /c/CVS/brlcad/burst/extern.h,v 1.18 2001/08/09 18:47:09 jra Exp $ (BRL)
d65 1
a65 1
extern int round();
@


1.19.6.1
log
@sync to HEAD...
@
text
@d7 1
a7 1
	$Header: /n/cad/c/CVS/brlcad/burst/extern.h,v 1.20 2002/10/22 23:04:36 morrison Exp $ (BRL)
d65 1
a65 1
extern int roundToInt();
@


1.19.4.1
log
@changed the name of the double->int round routine to fround so not to conflict with the system round call that does double->double
@
text
@d7 1
a7 1
	$Header: /c/CVS/brlcad/burst/extern.h,v 1.19 2001/08/10 20:16:55 rbowers Exp $ (BRL)
d65 1
a65 1
extern int fround();
@


1.19.4.2
log
@sync branch with HEAD
@
text
@d7 1
a7 1
	$Header$ (BRL)
d65 1
a65 1
extern int roundToInt();
@


1.18
log
@Lint
@
text
@d7 1
a7 1
	$Header: /c/CVS/brlcad/burst/extern.h,v 1.17 1998/10/28 17:11:14 jra Exp $ (BRL)
a32 1
extern pointer sbrk( int );
a37 1
extern pointer sbrk();
@


1.17
log
@Mods to get it to compile under Linux.
@
text
@d7 1
a7 1
	$Header: /c/CVS/brlcad/burst/extern.h,v 1.16 1998/06/23 18:20:40 jra Exp $ (BRL)
d18 3
d107 16
@


1.16
log
@convert bu_log to brst_log to avoid conflicts
@
text
@d7 1
a7 1
	$Header: /c/CVS/brlcad/burst/extern.h,v 1.15 1997/12/16 03:45:56 mike Exp $ (BRL)
d41 1
d43 1
@


1.15
log
@UPgraded using h/sed4
@
text
@d7 1
a7 1
	$Header: /m/cad/burst/RCS/extern.h,v 1.14 1996/07/18 17:32:30 jra Exp mike $ (BRL)
d96 1
a96 1
extern void bu_log( char *, ... );
d98 1
a98 1
extern void bu_log();
@


1.14
log
@Minor Mods for IRIX 6.2
@
text
@d7 1
a7 1
	$Header: /m/cad/burst/RCS/extern.h,v 1.13 1995/02/28 09:15:33 jra Exp jra $ (BRL)
d96 1
a96 1
extern void rt_log( char *, ... );
d98 1
a98 1
extern void rt_log();
@


1.13
log
@changes RGBpixel to unsigned char.
@
text
@d7 1
a7 1
	$Header: /m/cad/burst/RCS/extern.h,v 1.12 91/09/11 10:38:39 moss Exp Locker: jra $ (BRL)
d10 9
a90 1
extern void prntScr();
d94 2
a95 1
#if __STDC__
d99 1
@


1.12
log
@New function to act as wrapper around RT_HIT_NORM() macros called
getRtHitNorm(), also chkEntryNorm() and chkExitNorm() added to check
sense of normals, and prntDbgPartitions() added for debugging.
@
text
@d7 1
a7 1
	$Header: /vld/moss/src/burst/RCS/extern.h,v 1.11 91/08/26 11:05:15 moss Exp $ (BRL)
d117 9
a125 9
extern RGBpixel *pixgrid;
extern RGBpixel pixaxis;
extern RGBpixel pixbkgr;
extern RGBpixel pixbhit;
extern RGBpixel pixblack;
extern RGBpixel pixcrit;
extern RGBpixel pixghit;
extern RGBpixel pixmiss;
extern RGBpixel pixtarg;
@


1.11
log
@Ported to ANSI C compiler; tested on XMP under UNICOS 5.1 and on SGI under
IRIX 3.3.1.
This version tests correctly using BRLCAD3.7.
@
text
@d7 1
a7 1
	$Header: /vld/moss/src/burst/RCS/extern.h,v 1.10 91/01/15 13:53:17 moss Exp $ (BRL)
d43 2
d58 1
d74 1
@


1.10
log
@Removed author's phone number from top of file comment.  This will be
shipped as version 2.1.
@
text
@d7 1
a7 1
	$Header: /vld/moss/src/burst/RCS/extern.h,v 1.9 91/01/15 13:40:02 moss Exp $ (BRL)
d19 1
a19 1
#ifdef __STDC__
d82 3
d86 1
@


1.9
log
@Get Hm.h from current directory, and removed declaration of stop_sig.
.`
@
text
@a5 1
			(301)278-6651 or AV-298-6651
d7 1
a7 1
	$Header: /vld/moss/src/burst/RCS/extern.h,v 1.8 90/08/28 12:24:04 moss Exp $ (BRL)
@


1.8
log
@This is the official release of version 2.0 which includes mods in the
output format to both correct a misinterpretation of the ICD, facilitate
easier postprocessing, increase precision, etc.  Also an option to not
require burst air was added.  Finally, a bug fix involving adjacent inside
airs of the same type at the beginning of a shotline was implemented.
@
text
@d8 1
a8 1
	$Header: /vld/moss/src/burst/RCS/extern.h,v 1.7 90/08/22 09:39:12 moss Exp $ (BRL)
d17 1
a17 1
#include "Hm/Hm.h"
a89 1
extern void stop_sig();
a93 1
extern int stop_sig();
@


1.7
log
@About to make some sweeping revisions.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/extern.h,v 1.6 89/10/31 12:19:55 moss Exp $ (BRL)
d130 1
@


1.6
log
@This version released to Eglin and Service Engineering after BRL-CAD '89
Symposium.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/extern.h,v 1.5 89/07/14 12:59:32 moss Exp $ (BRL)
d130 1
@


1.5
log
@This is the pre-release copy that Bud took with him.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/extern.h,v 1.4 89/07/07 16:33:09 moss Exp $ (BRL)
d56 1
a68 1
extern void plotShieldComp();
@


1.4
log
@Ready for Bud's visit.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/extern.h,v 1.3 89/01/20 15:21:08 moss Exp $ (BRL)
a118 1
extern RGBpixel pixgrnd;
d178 4
@


1.3
log
@Just saving this version for backup purposes, recently added support for
explicitly inputing burst points.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/extern.h,v 1.2 88/11/07 17:01:04 moss Exp $ (BRL)
d10 2
a11 1
#include "string.h"
d14 1
d20 10
a29 5
extern char	*tmpnam();
extern char	*malloc();
extern char	*getenv();
extern char	*sbrk();
extern char	*strncpy();
d37 2
a38 2
extern char	*CS, *DL;
extern int	CO, LI;
d41 44
a84 43
extern Colors	*findColors();
extern Func	*getTrie();
extern Trie	*addTrie();
extern bool	closFbDevice();
extern bool	imageInit();
extern bool	initUi();
extern bool	openFbDevice();
extern bool	findIdents();
extern bool	readColors();
extern bool	readIdents();
extern int	notify();
extern int	round();
extern void	closeUi();
extern void	colorPartition();
extern void	exitCleanly();
extern void	gridInit();
extern void	gridModel();
extern void	gridToFb();
extern void	locPerror();
extern void	logCmd();
extern void	paintCellFb();
extern void	paintGridFb();
extern void	paintSpallFb();
extern void	plotGrid();
extern void	plotInit();
extern void	plotPartition();
extern void	plotRay();
extern void	plotShieldComp();
extern void	prntAspectInit();
extern void	prntBurstHdr();
extern void	prntCellIdent();
extern void	prntFiringCoords();
extern void	prntFusingComp();
extern void	prntGridOffsets();
extern void	prntIdents();
extern void	prntPhantom();
extern void	prntRayIntersect();
extern void	prntScr();
extern void	prntTimer();
extern void	prompt();
extern void	readCmdFile();
extern void	rt_log();
extern void	warning();
d86 5
a90 6

#if defined( SYSV )
extern void	(*norml_sig)(), (*abort_sig)();
extern void	abort_RT();
extern void	intr_sig();
extern void	stop_sig();
d92 4
a95 4
extern int	(*norml_sig)(), (*abort_sig)();
extern int	abort_RT();
extern int	intr_sig();
extern int	stop_sig();
d98 16
a113 15
extern Colors	colorids;
extern FBIO	*fbiop;
extern FILE	*burstfp;
extern FILE	*gridfp;
extern FILE	*histfp;
extern FILE	*outfp;
extern FILE	*plotfp;
extern FILE	*shotfp;
extern FILE	*tmpfp;
extern HmMenu	*mainhmenu;
extern Ids	airids;
extern Ids	armorids;
extern Ids	critids;
extern RGBpixel	*pixgrid;
extern RGBpixel	pixaxis;
d116 1
a116 1
extern RGBpixel	pixblack;
d120 3
a122 3
extern RGBpixel	pixmiss;
extern RGBpixel	pixtarg;
extern Trie	*cmdtrie;
d124 9
a132 9
extern bool	batchmode;
extern bool	cantwarhead;
extern bool	deflectcone;
extern bool	dithercells;
extern bool	fatalerror;
extern bool	groundburst;
extern bool	reportoverlaps;
extern bool	tty;
extern bool	userinterrupt;
d134 22
a155 21
extern char	airfile[];
extern char	armorfile[];
extern char	burstfile[];
extern char	cmdbuf[];
extern char	cmdname[];
extern char	colorfile[];
extern char	critfile[];
extern char	errfile[];
extern char	fbfile[];
extern char	gedfile[];
extern char	gridfile[];
extern char	histfile[];
extern char	objects[];
extern char	outfile[];
extern char	plotfile[];
extern char	scrbuf[];
extern char	scriptfile[];
extern char	shotfile[];
extern char	title[];
extern char	timer[];
extern char	tmpfname[];
d157 1
a157 1
extern char	*cmdptr;
d159 1
a159 1
extern char	**template;
d161 29
a189 26
extern fastf_t	bdist;
extern fastf_t	burstpoint[];
extern fastf_t	cellsz;
extern fastf_t	conehfangle;
extern fastf_t	fire[];
extern fastf_t	griddn;
extern fastf_t	gridlf;
extern fastf_t	gridrt;
extern fastf_t	gridup;
extern fastf_t	gridhor[];
extern fastf_t	gridsoff[];
extern fastf_t	gridver[];
extern fastf_t	grndbk;
extern fastf_t	grndht;
extern fastf_t	grndfr;
extern fastf_t	grndlf;
extern fastf_t	grndrt;
extern fastf_t	modlcntr[];
extern fastf_t	pitch;
extern fastf_t	raysolidangle;
extern fastf_t	standoff;
extern fastf_t	unitconv;
extern fastf_t	viewazim;
extern fastf_t	viewelev;
extern fastf_t	viewsize;
extern fastf_t	yaw;
d191 19
a209 19
extern int	co;
extern int	devhgt;
extern int	devwid;
extern int	firemode;
extern int	gridsz;
extern int	gridxfin;
extern int	gridyfin;
extern int	gridxorg;
extern int	gridyorg;
extern int	gridheight;
extern int	gridwidth;
extern int	li;
extern int	nbarriers;
extern int	noverlaps;
extern int	nprocessors;
extern int	nriplevels;
extern int	nspallrays;
extern int	units;
extern int	zoom;
d211 1
a211 1
extern struct rt_i	*rtip;
@


1.2
log
@Just saving this version for fallback.
@
text
@d8 1
a8 1
	$Header: /usr/vld/moss/src/burst/RCS/extern.h,v 1.1 88/10/28 17:02:15 moss Exp $ (BRL)
d38 1
d44 1
d47 1
a51 1
extern void	imageInit();
a53 1
extern int	notify();
d65 1
d93 1
d110 2
d121 1
d128 1
d157 1
a159 1
extern fastf_t	griddn;
d164 5
a171 1
extern fastf_t	setback;
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
	$Header$ (BRL)
a15 6
extern Func	*getTrie();
extern Trie	*addTrie();
extern bool	InitUi();
extern char	*malloc();
extern void	closeUi();
extern void	rt_log();
d35 5
a39 1

d43 2
a44 13

#if defined( SYSV )
extern void	(*norml_sig)(), (*abort_sig)();
extern void	abort_RT();
extern void	intr_sig();
extern void	stop_sig();
#else
extern int	(*norml_sig)(), (*abort_sig)();
extern int	abort_RT();
extern int	intr_sig();
extern int	stop_sig();
#endif

d48 2
d52 4
d71 1
d73 2
d76 13
d101 8
d150 7
d168 3
a170 1
extern int	co, li;
d177 3
@
