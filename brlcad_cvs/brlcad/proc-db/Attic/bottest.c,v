head	1.12;
access;
symbols
	ansi-20040405-merged:1.8.2.2
	postmerge-20040405-ansi:1.10
	premerge-20040404-ansi:1.9
	postmerge-autoconf:1.9
	autoconf-freeze:1.8.10.2
	premerge-autoconf:1.9
	postmerge-20040315-windows:1.9
	premerge-20040315-windows:1.9
	windows-20040315-freeze:1.8.4.1
	autoconf-20031203:1.8
	autoconf-20031202:1.8
	autoconf-branch:1.8.0.10
	phong-branch:1.8.0.8
	photonmap-branch:1.8.0.6
	rel-6-1-DP:1.8
	windows-branch:1.8.0.4
	rel-6-0-2:1.6
	ansi-branch:1.8.0.2
	rel-6-0-1-branch:1.6.0.2
	hartley-6-0-post:1.7
	hartley-6-0-pre:1.6
	rel-6-0-1:1.6
	rel-6-0:1.6
	rel-5-4:1.3
	offsite-5-3-pre:1.6
	rel-5-3:1.3
	rel-5-2:1.3
	rel-5-1-branch:1.3.0.2
	rel-5-1:1.3;
locks; strict;
comment	@ * @;


1.12
date	2004.05.21.17.33.43;	author morrison;	state dead;
branches;
next	1.11;

1.11
date	2004.05.10.15.30.49;	author erikg;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.05.05.45.58;	author morrison;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.02.17.39.37;	author morrison;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.20.17.08.33;	author jra;	state Exp;
branches
	1.8.2.1
	1.8.4.1
	1.8.10.1;
next	1.7;

1.7
date	2002.08.15.20.55.45;	author hartley;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.12.21.59.07;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.10.23.38.20;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.10.23.35.38;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	99.12.20.20.26.27;	author jra;	state Exp;
branches;
next	1.2;

1.2
date	99.12.16.17.37.48;	author jra;	state Exp;
branches;
next	1.1;

1.1
date	99.11.08.15.19.02;	author jra;	state Exp;
branches;
next	;

1.8.2.1
date	2002.09.19.18.02.11;	author morrison;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2004.03.17.21.22.54;	author morrison;	state Exp;
branches;
next	;

1.8.4.1
date	2004.03.10.15.06.36;	author morrison;	state Exp;
branches;
next	;

1.8.10.1
date	2004.02.12.19.50.50;	author erikg;	state Exp;
branches;
next	1.8.10.2;

1.8.10.2
date	2004.03.15.14.08.05;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.12
log
@moved to src/proc-db/
@
text
@/*
 *			B O T T E S T . C
 *
 *  Program to generate test BOT solids
 *
 *  Author -
 *	John Anderson
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1999-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/proc-db/bottest.c,v 1.11 2004/05/10 15:30:49 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "externs.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"
#include "rtgeom.h"

struct rt_wdb *outfp;

int
main(int argc, char **argv)
{
	fastf_t vertices[36];
	int faces[15];
	struct bu_bitv *face_mode;
	fastf_t thickness[4];

	outfp = wdb_fopen( "bot-test.g" );
	mk_id( outfp, "BOT test" );

	VSET( vertices, 0.0, 0.0, 0.0 )
	VSET( &vertices[3], 0.0, 100.0, 0.0 )
	VSET( &vertices[6], 0.0, 100.0, 50.0 )
	VSET( &vertices[9], 200.0, 0.0, 0.0 )

	/* face #1 */
	faces[0] = 0;
	faces[1] = 1;
	faces[2] = 2;

	/* face #2 */
	faces[3] = 0;
	faces[4] = 2;
	faces[5] = 3;

	/* face #3 */
	faces[6] = 0;
	faces[7] = 1;
	faces[8] = 3;

	/* face #4 */
	faces[9] = 1;
	faces[10] = 2;
	faces[11] = 3;

	mk_bot( outfp, "bot_u_surf", RT_BOT_SURFACE, RT_BOT_UNORIENTED, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );

	/* face #1 */
	faces[0] = 0;
	faces[1] = 2;
	faces[2] = 1;

	/* face #2 */
	faces[3] = 0;
	faces[4] = 3;
	faces[5] = 2;

	/* face #3 */
	faces[6] = 0;
	faces[7] = 1;
	faces[8] = 3;

	/* face #4 */
	faces[9] = 1;
	faces[10] = 2;
	faces[11] = 3;

	mk_bot( outfp, "bot_ccw_surf", RT_BOT_SURFACE, RT_BOT_CCW, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );


	/* face #1 */
	faces[0] = 1;
	faces[1] = 2;
	faces[2] = 0;

	/* face #2 */
	faces[3] = 2;
	faces[4] = 3;
	faces[5] = 0;

	/* face #3 */
	faces[6] = 3;
	faces[7] = 1;
	faces[8] = 0;

	/* face #4 */
	faces[9] = 3;
	faces[10] = 2;
	faces[11] = 1;

	mk_bot( outfp, "bot_cw_surf", RT_BOT_SURFACE, RT_BOT_CW, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );


	/* face #1 */
	faces[0] = 0;
	faces[1] = 1;
	faces[2] = 2;

	/* face #2 */
	faces[3] = 0;
	faces[4] = 2;
	faces[5] = 3;

	/* face #3 */
	faces[6] = 0;
	faces[7] = 1;
	faces[8] = 3;

	/* face #4 */
	faces[9] = 1;
	faces[10] = 2;
	faces[11] = 3;

	mk_bot( outfp, "bot_u_solid", RT_BOT_SOLID, RT_BOT_UNORIENTED, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );

	/* face #1 */
	faces[0] = 0;
	faces[1] = 2;
	faces[2] = 1;

	/* face #2 */
	faces[3] = 0;
	faces[4] = 3;
	faces[5] = 2;

	/* face #3 */
	faces[6] = 0;
	faces[7] = 1;
	faces[8] = 3;

	/* face #4 */
	faces[9] = 1;
	faces[10] = 2;
	faces[11] = 3;

	mk_bot( outfp, "bot_ccw_solid", RT_BOT_SOLID, RT_BOT_CCW, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );


	/* face #1 */
	faces[0] = 1;
	faces[1] = 2;
	faces[2] = 0;

	/* face #2 */
	faces[3] = 2;
	faces[4] = 3;
	faces[5] = 0;

	/* face #3 */
	faces[6] = 3;
	faces[7] = 1;
	faces[8] = 0;

	/* face #4 */
	faces[9] = 3;
	faces[10] = 2;
	faces[11] = 1;

	mk_bot( outfp, "bot_cw_solid", RT_BOT_SOLID, RT_BOT_CW, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );

	face_mode = bu_bitv_new( 4 );
	bu_bitv_clear( face_mode );
	BU_BITSET( face_mode, 1);

	thickness[0] = 2.1;
	thickness[1] = 2.2;
	thickness[2] = 2.3;
	thickness[3] = 2.4;

	/* face #1 */
	faces[0] = 0;
	faces[1] = 1;
	faces[2] = 2;

	/* face #2 */
	faces[3] = 0;
	faces[4] = 2;
	faces[5] = 3;

	/* face #3 */
	faces[6] = 0;
	faces[7] = 1;
	faces[8] = 3;

	/* face #4 */
	faces[9] = 1;
	faces[10] = 2;
	faces[11] = 3;

	mk_bot( outfp, "bot_u_plate", RT_BOT_PLATE, RT_BOT_UNORIENTED, 0, 4, 4, vertices, faces, thickness, face_mode );

	/* face #1 */
	faces[0] = 0;
	faces[1] = 2;
	faces[2] = 1;

	/* face #2 */
	faces[3] = 0;
	faces[4] = 3;
	faces[5] = 2;

	/* face #3 */
	faces[6] = 0;
	faces[7] = 1;
	faces[8] = 3;

	/* face #4 */
	faces[9] = 1;
	faces[10] = 2;
	faces[11] = 3;

	mk_bot( outfp, "bot_ccw_plate", RT_BOT_PLATE, RT_BOT_CCW, 0, 4, 4, vertices, faces, thickness, face_mode );


	/* face #1 */
	faces[0] = 1;
	faces[1] = 2;
	faces[2] = 0;

	/* face #2 */
	faces[3] = 2;
	faces[4] = 3;
	faces[5] = 0;

	/* face #3 */
	faces[6] = 3;
	faces[7] = 1;
	faces[8] = 0;

	/* face #4 */
	faces[9] = 3;
	faces[10] = 2;
	faces[11] = 1;

	mk_bot( outfp, "bot_cw_plate", RT_BOT_PLATE, RT_BOT_CW, 0, 4, 4, vertices, faces, thickness, face_mode );

	/* Make a bot with duplicate vertices to test the "fuse" and "condense" code */
	VSET( vertices, 0.0, 0.0, 0.0 )
	VSET( &vertices[3], 0.0, 100.0, 0.0 )
	VSET( &vertices[6], 0.0, 100.0, 50.0 )
	VMOVE( &vertices[9], &vertices[0] )
	VMOVE( &vertices[12], &vertices[6] )
	VSET( &vertices[15], 200.0, 0.0, 0.0 )
	VMOVE( &vertices[18], &vertices[0] )
	VMOVE( &vertices[21], &vertices[3] )
	VMOVE( &vertices[24], &vertices[15] )
	VMOVE( &vertices[27], &vertices[3] )
	VMOVE( &vertices[30], &vertices[6] )
	VMOVE( &vertices[33], &vertices[15] )

	/* face #1 */
	faces[0] = 0;
	faces[1] = 1;
	faces[2] = 2;

	/* face #2 */
	faces[3] = 3;
	faces[4] = 4;
	faces[5] = 5;

	/* face #3 */
	faces[6] = 6;
	faces[7] = 7;
	faces[8] = 8;

	/* face #4 */

	faces[9] = 9;
	faces[10] = 10;
	faces[11] = 11;

	mk_bot( outfp, "bot_solid_dup_vs", RT_BOT_SOLID, RT_BOT_UNORIENTED, 0, 12, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );

	faces[12] = 9;
	faces[13] = 10;
	faces[14] = 11;

	mk_bot( outfp, "bot_solid_dup_fs", RT_BOT_SOLID, RT_BOT_UNORIENTED, 0, 12, 5, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );

	bu_free( (char *)face_mode, "bottest: face_mode" );
	return 0;
}
@


1.11
log
@change conf.h to a wrapped config.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/proc-db/bottest.c,v 1.10 2004/04/05 05:45:58 morrison Exp $ (BRL)";
@


1.10
log
@merge of ansi-6-0-branch into head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d26 5
a30 1
#include "conf.h"
@


1.9
log
@update copyright to include span through 2003
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.8 2002/08/20 17:08:33 jra Exp $ (BRL)";
d41 1
a41 3
main( argc, argv )
int argc;
char *argv[];
@


1.8
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1999 by the United States Army
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.6 2000/07/12 21:59:07 mike Exp $ (BRL)";
@


1.8.4.1
log
@merge in updates from HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1999-2004 by the United States Army
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/proc-db/bottest.c,v 1.9 2004/02/02 17:39:37 morrison Exp $ (BRL)";
@


1.8.10.1
log
@merge from HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1999-2004 by the United States Army
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.9 2004/02/02 17:39:37 morrison Exp $ (BRL)";
@


1.8.10.2
log
@merge from head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.8.10.1 2004/02/12 19:50:50 erikg Exp $ (BRL)";
@


1.8.2.1
log
@Initial ANSIfication
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.8 2002/08/20 17:08:33 jra Exp $ (BRL)";
d41 3
a43 1
main(int argc, char **argv)
@


1.8.2.2
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1999-2004 by the United States Army
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


1.7
log
@Converted from K&R to ANSI C - RFH
@
text
@d41 3
a43 1
main(int argc, char **argv)
@


1.6
log
@
Converted to use new version of LIBWDB.
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.5 2000/07/10 23:38:20 mike Exp $ (BRL)";
d41 1
a41 3
main( argc, argv )
int argc;
char *argv[];
@


1.5
log
@
const RCSid
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.4 2000/07/10 23:35:38 mike Exp $ (BRL)";
d38 3
d50 2
a51 1
	mk_id( stdout, "BOT test" );
d78 1
a78 1
	mk_bot( stdout, "bot_u_surf", RT_BOT_SURFACE, RT_BOT_UNORIENTED, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );
d100 1
a100 1
	mk_bot( stdout, "bot_ccw_surf", RT_BOT_SURFACE, RT_BOT_CCW, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );
d123 1
a123 1
	mk_bot( stdout, "bot_cw_surf", RT_BOT_SURFACE, RT_BOT_CW, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );
d146 1
a146 1
	mk_bot( stdout, "bot_u_solid", RT_BOT_SOLID, RT_BOT_UNORIENTED, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );
d168 1
a168 1
	mk_bot( stdout, "bot_ccw_solid", RT_BOT_SOLID, RT_BOT_CCW, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );
d191 1
a191 1
	mk_bot( stdout, "bot_cw_solid", RT_BOT_SOLID, RT_BOT_CW, 0, 4, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );
d222 1
a222 1
	mk_bot( stdout, "bot_u_plate", RT_BOT_PLATE, RT_BOT_UNORIENTED, 0, 4, 4, vertices, faces, thickness, face_mode );
d244 1
a244 1
	mk_bot( stdout, "bot_ccw_plate", RT_BOT_PLATE, RT_BOT_CCW, 0, 4, 4, vertices, faces, thickness, face_mode );
d267 1
a267 1
	mk_bot( stdout, "bot_cw_plate", RT_BOT_PLATE, RT_BOT_CW, 0, 4, 4, vertices, faces, thickness, face_mode );
d304 1
a304 1
	mk_bot( stdout, "bot_solid_dup_vs", RT_BOT_SOLID, RT_BOT_UNORIENTED, 0, 12, 4, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );
d310 1
a310 1
	mk_bot( stdout, "bot_solid_dup_fs", RT_BOT_SOLID, RT_BOT_UNORIENTED, 0, 12, 5, vertices, faces, (fastf_t *)NULL, (struct bu_bitv *)NULL );
d313 1
@


1.4
log
@
raytrace.h before wdb.h
Eliminated use of db.h
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.3 1999/12/20 20:26:27 jra Exp $ (BRL)";
@


1.3
log
@Added another bot with a duplicate face
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.2 1999/12/16 17:37:48 jra Exp $ (BRL)";
d32 1
d34 1
a34 1
#include "rtlist.h"
@


1.2
log
@Added a case with repeated vertices
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/bottest.c,v 1.1 1999/11/08 15:19:02 jra Exp $ (BRL)";
d42 1
a42 1
	int faces[12];
d300 6
@


1.1
log
@
Test for BOT solid.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/platetest.c,v 11.1 1999/10/12 13:58:13 jra Exp $ (BRL)";
d41 1
a41 1
	fastf_t vertices[12];
d263 37
@

