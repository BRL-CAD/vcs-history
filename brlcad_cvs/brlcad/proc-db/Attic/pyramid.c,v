head	11.16;
access;
symbols
	ansi-20040405-merged:11.12.2.2
	postmerge-20040405-ansi:11.14
	premerge-20040404-ansi:11.13
	postmerge-autoconf:11.13
	autoconf-freeze:11.12.10.2
	premerge-autoconf:11.13
	postmerge-20040315-windows:11.13
	premerge-20040315-windows:11.13
	windows-20040315-freeze:11.12.4.1
	autoconf-20031203:11.12
	autoconf-20031202:11.12
	autoconf-branch:11.12.0.10
	phong-branch:11.12.0.8
	photonmap-branch:11.12.0.6
	rel-6-1-DP:11.12
	windows-branch:11.12.0.4
	rel-6-0-2:11.10
	ansi-branch:11.12.0.2
	rel-6-0-1-branch:11.10.0.2
	hartley-6-0-post:11.11
	hartley-6-0-pre:11.10
	rel-6-0-1:11.10
	rel-6-0:11.9
	rel-5-4:11.3
	offsite-5-3-pre:11.8
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:1.8
	rel-2-0:1.1
	rel-1-24:1.1
	rel-1-20:1.1;
locks; strict;
comment	@ * @;


11.16
date	2004.05.21.17.33.46;	author morrison;	state dead;
branches;
next	11.15;

11.15
date	2004.05.10.15.30.49;	author erikg;	state Exp;
branches;
next	11.14;

11.14
date	2004.04.05.05.45.58;	author morrison;	state Exp;
branches;
next	11.13;

11.13
date	2004.02.02.17.39.37;	author morrison;	state Exp;
branches;
next	11.12;

11.12
date	2002.08.20.17.08.34;	author jra;	state Exp;
branches
	11.12.2.1
	11.12.4.1
	11.12.10.1;
next	11.11;

11.11
date	2002.08.15.20.55.46;	author hartley;	state Exp;
branches;
next	11.10;

11.10
date	2002.05.17.12.42.24;	author morrison;	state Exp;
branches;
next	11.9;

11.9
date	2001.03.31.01.57.28;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2000.08.24.04.40.25;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	2000.07.12.21.59.07;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	2000.07.12.02.50.30;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	2000.07.10.23.38.22;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.07.10.23.35.39;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.03.31.03.07.31;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.12.04.03.54.00;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.06.18;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.10.20.00.09.37;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.09.19.41.05;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.44.41;	author mike;	state Rel4_0;
branches;
next	9.1;

9.1
date	89.05.19.06.04.51;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.38.25;	author mike;	state Rel3_0;
branches;
next	7.3;

7.3
date	88.08.20.07.26.40;	author phil;	state Exp;
branches;
next	7.2;

7.2
date	88.05.15.23.00.17;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.16.49.18;	author mike;	state Rel;
branches;
next	1.8;

1.8
date	87.10.30.15.34.35;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	87.10.30.15.13.42;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	87.09.25.23.20.21;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	87.09.21.22.14.10;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	87.09.20.07.12.30;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	87.09.18.00.36.16;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	87.09.16.23.01.32;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	87.01.12.14.47.26;	author mike;	state Exp;
branches;
next	;

11.12.2.1
date	2002.09.19.18.02.12;	author morrison;	state Exp;
branches;
next	11.12.2.2;

11.12.2.2
date	2004.03.17.21.22.54;	author morrison;	state Exp;
branches;
next	;

11.12.4.1
date	2004.03.10.15.06.37;	author morrison;	state Exp;
branches;
next	;

11.12.10.1
date	2004.02.12.19.50.51;	author erikg;	state Exp;
branches;
next	11.12.10.2;

11.12.10.2
date	2004.03.15.14.08.05;	author erikg;	state Exp;
branches;
next	;


desc
@Recursive triangle generator
@


11.16
log
@moved to src/proc-db/
@
text
@/*
 *			P Y R A M I D . C
 *
 *  Program to generate recursive 3-d pyramids (arb4).
 *  Inspired by the SigGraph paper of Glasser.
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/proc-db/pyramid.c,v 11.15 2004/05/10 15:30:49 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "wdb.h"

void	do_leaf(char *name), do_pleaf(), pnorms(fastf_t (*norms)[3], fastf_t (*verts)[3], fastf_t *centroid, int npts), do_tree(char *name, char *lname, int level);

double sin60;

struct rt_wdb *outfp;

int
main(int argc, char **argv)
{
	int depth;

	if( argc != 2 )  {
		fprintf(stderr, "Usage:  pyramid recursion\n");
		exit(1);
	}
	depth = atoi( argv[1] );
	sin60 = sin(60.0 * 3.14159265358979323846264 / 180.0);

	outfp = wdb_fopen( "pyramid.g" );

	mk_id( outfp, "3-D Pyramids" );

	do_leaf("leaf");
#if 0
	do_pleaf("polyleaf");
#endif
	do_tree("tree", "leaf", depth);

	return 0;
}

/* Make a leaf node out of an ARB4 */
void
do_leaf(char *name)
{
	point_t pt[4];

	VSET( pt[0], 0, 0, 0);
	VSET( pt[1], 100, 0, 0);
	VSET( pt[2], 50, 100*sin60, 0);
	VSET( pt[3], 50, 100*sin60/3, 100*sin60 );

	mk_arb4( outfp, name, &pt[0][X] );
}

#if 0
/* Make a leaf node out of 4 polygons */
void
do_pleaf(name)
char	*name;
{
	point_t pt[4];
	fastf_t	verts[5][3];
	fastf_t	norms[5][3];
	point_t	centroid;
	register int i;

	VSET( pt[0], 0, 0, 0);
	VSET( pt[1], 100, 0, 0);
	VSET( pt[2], 50, 100*sin60, 0);
	VSET( pt[3], 50, 100*sin60/3, 100*sin60 );

	VMOVE( centroid, pt[0] );
	for( i=1; i<4; i++ )  {
		VADD2( centroid, centroid, pt[i] );
	}
	VSCALE( centroid, centroid, 0.25 );

	mk_polysolid( outfp, name );

	VMOVE( verts[0], pt[0] );
	VMOVE( verts[1], pt[1] );
	VMOVE( verts[2], pt[2] );
	pnorms( norms, verts, centroid, 3 );
	mk_poly( outfp, 3, verts, norms );

	VMOVE( verts[0], pt[0] );
	VMOVE( verts[1], pt[1] );
	VMOVE( verts[2], pt[3] );
	pnorms( norms, verts, centroid, 3 );
	mk_poly( outfp, 3, verts, norms );

	VMOVE( verts[0], pt[0] );
	VMOVE( verts[1], pt[2] );
	VMOVE( verts[2], pt[3] );
	pnorms( norms, verts, centroid, 3 );
	mk_poly( outfp, 3, verts, norms );

	VMOVE( verts[0], pt[1] );
	VMOVE( verts[1], pt[2] );
	VMOVE( verts[2], pt[3] );
	pnorms( norms, verts, centroid, 3 );
	mk_poly( outfp, 3, verts, norms );
}
#endif

/*
 *  Find the single outward pointing normal for a facet.
 *  Assumes all points are coplanar (they better be!).
 */
void
pnorms(fastf_t (*norms)[3], fastf_t (*verts)[3], fastf_t *centroid, int npts)
{
	register int i;
	vect_t	ab, ac;
	vect_t	n;
	vect_t	out;		/* hopefully points outwards */

	VSUB2( ab, verts[1], verts[0] );
	VSUB2( ac, verts[2], verts[0] );
	VCROSS( n, ab, ac );
	VUNITIZE( n );

	/* If normal points inwards (towards centroid), flip it */
	VSUB2( out, verts[0], centroid );
	if( VDOT( n, out ) < 0 )  {
		VREVERSE( n, n );
	}

	/* Use same normal for all vertices (flat shading) */
	for( i=0; i<npts; i++ )  {
		VMOVE( norms[i], n );
	}
}

void
do_tree(char *name, char *lname, int level)
{
	register int i;
	char nm[64];
	char *leafp;
	int scale;
	struct wmember	head;
	struct wmember	*wp;

	BU_LIST_INIT(&head.l);

	if( level <= 1 )
		leafp = lname;
	else
		leafp = nm;

	scale = 100;
	for( i=1; i<level; i++ )
		scale *= 2;

	sprintf(nm, "%sL", name);
	wp = mk_addmember( leafp, &head.l, NULL, WMOP_UNION );
	MAT_IDN( wp->wm_mat );

	sprintf(nm, "%sR", name);
	wp = mk_addmember( leafp, &head.l, NULL, WMOP_UNION );
	MAT_DELTAS( wp->wm_mat, 1*scale, 0, 0 );

	sprintf(nm, "%sB", name);
	wp = mk_addmember( leafp, &head.l, NULL, WMOP_UNION );
	MAT_DELTAS( wp->wm_mat, 0.5*scale, sin60*scale, 0 );

	sprintf(nm, "%sT", name);
	wp = mk_addmember( leafp, &head.l, NULL, WMOP_UNION );
	MAT_DELTAS( wp->wm_mat, 0.5*scale, sin60/3*scale, sin60*scale );

	/* Set region flag on lowest level */
	mk_lcomb( outfp, name, &head, level<=1, NULL, NULL, NULL, 0 );

	/* Loop for children if level > 1 */
	if( level <= 1 )
		return;
	for( i=0; i<4; i++ )  {
		sprintf(nm, "%s%c", name, "LRBTx"[i] );
		do_tree( nm, lname, level-1 );
	}
}
@


11.15
log
@change conf.h to a wrapped config.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/proc-db/pyramid.c,v 11.14 2004/04/05 05:45:58 morrison Exp $ (BRL)";
@


11.14
log
@merge of ansi-6-0-branch into head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d23 5
a27 1
#include "conf.h"
@


11.13
log
@update copyright to include span through 2003
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.12 2002/08/20 17:08:34 jra Exp $ (BRL)";
d34 1
a34 1
void	do_leaf(), do_pleaf(), pnorms(), do_tree();
d41 1
a41 2
main(argc, argv)
char	**argv;
d67 1
a67 2
do_leaf(name)
char	*name;
d135 1
a135 5
pnorms( norms, verts, centroid, npts )
fastf_t	norms[5][3];
fastf_t	verts[5][3];
point_t	centroid;
int	npts;
d160 1
a160 4
do_tree(name, lname, level)
char	*name;
char	*lname;
int	level;
@


11.12
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.10 2002/05/17 12:42:24 morrison Exp $ (BRL)";
@


11.12.4.1
log
@merge in updates from HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/proc-db/pyramid.c,v 11.13 2004/02/02 17:39:37 morrison Exp $ (BRL)";
@


11.12.10.1
log
@merge from HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.13 2004/02/02 17:39:37 morrison Exp $ (BRL)";
@


11.12.10.2
log
@merge from head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.12.10.1 2004/02/12 19:50:51 erikg Exp $ (BRL)";
@


11.12.2.1
log
@Initial ANSIfication
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.12 2002/08/20 17:08:34 jra Exp $ (BRL)";
d34 1
a34 1
void	do_leaf(char *name), do_pleaf(), pnorms(fastf_t (*norms)[3], fastf_t (*verts)[3], fastf_t *centroid, int npts), do_tree(char *name, char *lname, int level);
d41 2
a42 1
main(int argc, char **argv)
d68 2
a69 1
do_leaf(char *name)
d137 5
a141 1
pnorms(fastf_t (*norms)[3], fastf_t (*verts)[3], fastf_t *centroid, int npts)
d166 4
a169 1
do_tree(char *name, char *lname, int level)
@


11.12.2.2
log
@sync branch with HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.11
log
@Converted from K&R to ANSI C - RFH
@
text
@d34 1
a34 1
void	do_leaf(char *name), do_pleaf(), pnorms(fastf_t (*norms)[3], fastf_t (*verts)[3], fastf_t *centroid, int npts), do_tree(char *name, char *lname, int level);
d41 2
a42 1
main(int argc, char **argv)
d68 2
a69 1
do_leaf(char *name)
d137 5
a141 1
pnorms(fastf_t (*norms)[3], fastf_t (*verts)[3], fastf_t *centroid, int npts)
d166 4
a169 1
do_tree(char *name, char *lname, int level)
@


11.10
log
@added matrix parameter to mk_addmember()
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.9 2001/03/31 01:57:28 morrison Exp $ (BRL)";
d34 1
a34 1
void	do_leaf(), do_pleaf(), pnorms(), do_tree();
d41 1
a41 2
main(argc, argv)
char	**argv;
d67 1
a67 2
do_leaf(name)
char	*name;
d135 1
a135 5
pnorms( norms, verts, centroid, npts )
fastf_t	norms[5][3];
fastf_t	verts[5][3];
point_t	centroid;
int	npts;
d160 1
a160 4
do_tree(name, lname, level)
char	*name;
char	*lname;
int	level;
@


11.9
log
@Deprecated bn_mat_idn() and bn_mat_zero(), updated calls to h/vmath.h's MAT_IDN() and MAT_ZERO() performance improved macros.
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.8 2000/08/24 04:40:25 mike Exp $ (BRL)";
d190 1
a190 1
	wp = mk_addmember( leafp, &head.l, WMOP_UNION );
d194 1
a194 1
	wp = mk_addmember( leafp, &head.l, WMOP_UNION );
d198 1
a198 1
	wp = mk_addmember( leafp, &head.l, WMOP_UNION );
d202 1
a202 1
	wp = mk_addmember( leafp, &head.l, WMOP_UNION );
@


11.8
log
@
mk_addmember
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.7 2000/07/12 21:59:07 mike Exp $ (BRL)";
d191 1
a191 1
	bn_mat_idn( wp->wm_mat );
@


11.7
log
@
Converted to use new version of LIBWDB.
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.6 2000/07/12 02:50:30 mike Exp $ (BRL)";
d190 1
a190 1
	wp = mk_addmember( leafp, &head, WMOP_UNION );
d194 1
a194 1
	wp = mk_addmember( leafp, &head, WMOP_UNION );
d198 1
a198 1
	wp = mk_addmember( leafp, &head, WMOP_UNION );
d202 1
a202 1
	wp = mk_addmember( leafp, &head, WMOP_UNION );
@


11.6
log
@
Converted over to new way to mk_lcomb()
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.5 2000/07/10 23:38:22 mike Exp $ (BRL)";
d38 2
d53 3
a55 1
	mk_id( stdout, "3-D Pyramids" );
d78 1
a78 1
	mk_arb4( stdout, name, &pt[0][X] );
d81 1
d104 1
a104 1
	mk_polysolid( stdout, name );
d110 1
a110 1
	mk_poly( stdout, 3, verts, norms );
d116 1
a116 1
	mk_poly( stdout, 3, verts, norms );
d122 1
a122 1
	mk_poly( stdout, 3, verts, norms );
d128 1
a128 1
	mk_poly( stdout, 3, verts, norms );
d130 1
d206 1
a206 1
	mk_lcomb( stdout, name, &head, level<=1, NULL, NULL, NULL, 0 );
@


11.5
log
@
const RCSid
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.4 2000/07/10 23:35:39 mike Exp $ (BRL)";
d51 1
a51 1
	mk_id( stdout, "Triangles" );
d54 1
d56 1
a165 1
	mat_t m;
d169 4
a182 4
	/* len = 4, set region on lowest level */
	mk_fcomb( stdout, name, 4, level<=1 );

	bn_mat_idn( m );
d184 2
a185 1
	mk_memb( stdout, leafp, m, WMOP_UNION );
a186 1
	MAT_DELTAS( m, 1*scale, 0, 0 );
d188 2
a189 1
	mk_memb( stdout, leafp, m, WMOP_UNION );
a190 1
	MAT_DELTAS( m, 0.5*scale, sin60*scale, 0 );
d192 2
a193 1
	mk_memb( stdout, leafp, m, WMOP_UNION );
a194 1
	MAT_DELTAS( m, 0.5*scale, sin60/3*scale, sin60*scale );
d196 5
a200 1
	mk_memb( stdout, leafp, m, WMOP_UNION );
@


11.4
log
@
raytrace.h before wdb.h
Eliminated use of db.h
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.3 2000/03/31 03:07:31 mike Exp $ (BRL)";
@


11.3
log
@
Changed RT_ to BU_ / BN_
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/proc-db/pyramid.c,v 11.2 1996/12/04 03:54:00 mike Exp $ (BRL)";
d31 1
@


11.2
log
@bu.h bn.h
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/proc-db/RCS/pyramid.c,v 11.1 1995/01/04 10:06:18 mike Rel4_4 mike $ (BRL)";
d180 1
a180 1
	mat_idn( m );
@


11.1
log
@Release_4.4
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/proc-db/RCS/pyramid.c,v 10.3 94/10/20 00:09:37 mike Exp $ (BRL)";
d28 1
a28 1
#include "db.h"
d30 2
a33 1
void	rt_log();
d182 1
a182 1
	mk_memb( stdout, leafp, m, UNION );
d186 1
a186 1
	mk_memb( stdout, leafp, m, UNION );
d190 1
a190 1
	mk_memb( stdout, leafp, m, UNION );
d194 1
a194 1
	mk_memb( stdout, leafp, m, UNION );
@


10.3
log
@mk_arb[48]() prototype change
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/proc-db/RCS/pyramid.c,v 10.2 94/08/09 19:41:05 gdurf Exp Locker: mike $ (BRL)";
@


10.2
log
@Added include of conf.h
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/proc-db/RCS/pyramid.c,v 10.1 1991/10/12 06:44:41 mike Rel4_0 gdurf $ (BRL)";
d70 1
a70 1
	mk_arb4( stdout, name, pt );
@


10.1
log
@Release_4.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/proc-db/RCS/pyramid.c,v 9.1 89/05/19 06:04:51 mike Rel3_5 $ (BRL)";
d23 2
d36 1
d54 2
@


9.1
log
@Release_3.5
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 8.1 88/10/05 00:38:25 mike Rel3_0 $ (BRL)";
@


8.1
log
@Release_3.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 7.3 88/08/20 07:26:40 phil Exp $ (BRL)";
@


7.3
log
@libwdb changes
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 7.2 88/05/15 23:00:17 phil Locked $ (BRL)";
@


7.2
log
@lint fixes
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 7.1 87/11/03 16:49:18 mike Locked $ (BRL)";
d96 1
a96 1
	mk_facet( stdout, 3, verts, norms );
d102 1
a102 1
	mk_facet( stdout, 3, verts, norms );
d108 1
a108 1
	mk_facet( stdout, 3, verts, norms );
d114 1
a114 1
	mk_facet( stdout, 3, verts, norms );
d172 1
a172 1
	mk_comb( stdout, name, 4, level<=1 );
@


7.1
log
@Release 2.3
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 1.8 87/10/30 15:34:35 mike Exp $ (BRL)";
d29 3
d54 1
d69 1
d121 1
d150 1
a197 2

rt_log(str) {fprintf(stderr,"rt_log: %s\n", str);}
@


1.8
log
@Added rt_log routine.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 1.7 87/10/30 15:13:42 mike Exp $ (BRL)";
@


1.7
log
@Neatened header
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 1.6 87/09/25 23:20:21 mike Exp $ (BRL)";
d191 2
@


1.6
log
@Changed for new mk_sph and mk_memb calling sequences.
@
text
@d2 1
a2 1
 *			T R I . C
d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 1.5 87/09/21 22:14:10 mike Locked $ (BRL)";
@


1.5
log
@Increased size of individual pyramids to be 100mm across, not 1mm,
as this gives librt some heartburn.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: pyramid.c,v 1.2 87/09/16 23:01:32 mike Locked $ (BRL)";
d169 1
a169 1
	mk_memb( stdout, UNION, leafp, m );
d173 1
a173 1
	mk_memb( stdout, UNION, leafp, m );
d177 1
a177 1
	mk_memb( stdout, UNION, leafp, m );
d181 1
a181 1
	mk_memb( stdout, UNION, leafp, m );
@


1.4
log
@Increased scale, made leaf name an internal prarmeter, rather than
wired into the subroutines.
@
text
@d57 3
a59 3
	VSET( pt[1], 1, 0, 0);
	VSET( pt[2], 0.5, sin60, 0);
	VSET( pt[3], 0.5, sin60/3, sin60 );
d75 3
a77 3
	VSET( pt[1], 1, 0, 0);
	VSET( pt[2], 0.5, sin60, 0);
	VSET( pt[3], 0.5, sin60/3, sin60 );
@


1.3
log
@Added creation of similar polygon leaf node.
@
text
@d47 1
a47 1
	do_tree("tree", depth);
d144 4
a147 3
do_tree(name, level)
char *name;
int level;
d156 1
a156 1
		leafp = "leaf";		/* XXX */
d160 1
a160 1
	scale = 1;
d188 1
a188 1
		do_tree( nm, level-1 );
@


1.2
log
@Updated to include stdio FILE pointer as first arg to
all mk_*() routines.
@
text
@d4 2
a5 2
 *  Program to generate recursive 3-d triangles (arb4).
 *  Inspired by the SigGraph paper of ???
d20 1
a20 1
static char RCSid[] = "@@(#)$Header: tri.c,v 1.1 87/01/12 14:47:26 mike Locked $ (BRL)";
d37 1
a37 1
		fprintf(stderr, "Usage:  tri recursion\n");
d45 2
a46 1
	do_leaf();
d50 3
a52 1
do_leaf()
d61 81
a141 1
	mk_arb4( stdout, "leaf", pt );
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d31 2
a32 1
main()
d34 1
a34 1
	sin60 = sin(3.14159265358979323846264/3.0);
d36 6
a41 1
	mk_id( "Triangles" );
d43 2
d46 1
a46 1
	do_tree("tree",4);
d51 1
a51 1
	point_t pt[8];
d56 1
a56 1
	VMOVE( pt[3], pt[2] );
d58 1
a58 7
	VSET( pt[4], 0.5, sin60/3, sin60 );

	VMOVE( pt[5], pt[1] );
	VMOVE( pt[6], pt[2] );
	VMOVE( pt[7], pt[4] );

	mk_arb( "leaf", pt, 8 );
d81 1
a81 1
	mk_comb( name, 4, level<=1 );
d85 1
a85 1
	mk_memb( UNION, leafp, m );
d89 1
a89 1
	mk_memb( UNION, leafp, m );
d93 1
a93 1
	mk_memb( UNION, leafp, m );
d97 1
a97 1
	mk_memb( UNION, leafp, m );
@
