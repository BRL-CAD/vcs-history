head	11.14;
access;
symbols
	ansi-20040405-merged:11.11.2.1
	postmerge-20040405-ansi:11.12
	premerge-20040404-ansi:11.11
	postmerge-autoconf:11.11
	autoconf-freeze:11.11
	premerge-autoconf:11.11
	postmerge-20040315-windows:11.11
	premerge-20040315-windows:11.11
	windows-20040315-freeze:11.11
	autoconf-20031203:11.11
	autoconf-20031202:11.11
	autoconf-branch:11.11.0.10
	phong-branch:11.11.0.8
	photonmap-branch:11.11.0.6
	rel-6-1-DP:11.11
	windows-branch:11.11.0.4
	rel-6-0-2:11.9
	ansi-branch:11.11.0.2
	rel-6-0-1-branch:11.9.0.2
	hartley-6-0-post:11.10
	hartley-6-0-pre:11.9
	rel-6-0-1:11.9
	rel-6-0:11.8
	rel-5-4:11.3
	offsite-5-3-pre:11.7
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:1.5
	rel-2-0:1.1
	rel-1-24:1.1
	rel-1-20:1.1;
locks; strict;
comment	@ * @;


11.14
date	2004.05.21.17.33.45;	author morrison;	state dead;
branches;
next	11.13;

11.13
date	2004.05.10.15.30.49;	author erikg;	state Exp;
branches;
next	11.12;

11.12
date	2004.04.05.05.45.58;	author morrison;	state Exp;
branches;
next	11.11;

11.11
date	2002.08.20.17.08.34;	author jra;	state Exp;
branches
	11.11.2.1;
next	11.10;

11.10
date	2002.08.15.20.55.46;	author hartley;	state Exp;
branches;
next	11.9;

11.9
date	2002.05.17.12.42.24;	author morrison;	state Exp;
branches;
next	11.8;

11.8
date	2001.04.20.22.31.15;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2000.08.24.04.40.25;	author mike;	state Exp;
branches;
next	11.6;

11.6
date	2000.07.12.21.59.07;	author mike;	state Exp;
branches;
next	11.5;

11.5
date	2000.07.12.02.59.30;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	2000.07.10.23.35.39;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.03.31.03.07.31;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.12.31.17.55.50;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.06.14;	author mike;	state Rel4_4;
branches;
next	10.5;

10.5
date	94.11.14.22.11.35;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.11.08.22.07.01;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	94.11.08.21.34.45;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.09.19.20.45;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.44.38;	author mike;	state Rel4_0;
branches;
next	9.1;

9.1
date	89.05.19.06.04.48;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.38.22;	author mike;	state Rel3_0;
branches;
next	7.4;

7.4
date	88.09.20.23.58.03;	author mike;	state Exp;
branches;
next	7.3;

7.3
date	88.08.20.07.26.37;	author phil;	state Exp;
branches;
next	7.2;

7.2
date	88.05.15.23.00.16;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.16.49.15;	author mike;	state Rel;
branches;
next	1.5;

1.5
date	87.10.30.15.34.30;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	87.10.30.15.13.56;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	87.09.25.23.19.59;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	87.09.16.23.01.28;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	87.01.12.14.48.50;	author mike;	state Exp;
branches;
next	;

11.11.2.1
date	2002.09.19.18.02.12;	author morrison;	state Exp;
branches;
next	;


desc
@Molecule maker
@


11.14
log
@moved to src/proc-db/
@
text
@/* 
 *			M O L E C U L E . C
 *
 * Create a molecule from G. Adams format
 * 
 * Author:	Paul R. Stay
 * 		Ballistic Research Labratory
 * 		Aberdeen Proving Ground, Md.
 * Date:	Mon Dec 29 1986
 */
static const char rcs_ident[] = "$Header: /n/xoff/cvs/brlcad/proc-db/molecule.c,v 11.13 2004/05/10 15:30:49 erikg Exp $";

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "externs.h"
#include "vmath.h"
#include "raytrace.h"
#include "wdb.h"


struct sphere  {
	struct sphere * next;		/* Next Sphere */
	int	s_id;			/* Sphere id */
	char	s_name[15];		/* Sphere name */
	point_t	s_center;		/* Sphere Center */
	fastf_t	s_rad;			/* Sphere radius */
	int	s_atom_type;		/* Atom Type */
};

struct sphere *s_list = (struct sphere *) 0;
struct sphere *s_head = (struct sphere *) 0;

struct atoms  {
	int a_id;
	char a_name[128];
	unsigned char red, green, blue;
};

struct atoms atom_list[50];

char * matname = "plastic";
char * matparm = "shine=100.0 diffuse=.8 specular=.2";

void	read_data(void), process_sphere(int id, fastf_t *center, double rad, int sph_type);
int	make_bond( int sp1, int sp2 );

struct wmember head;

static const char usage[] = "Usage: molecule db_title < mol-cube.dat > mol.g\n";

struct rt_wdb	*outfp;

int
main(int argc, char **argv)
{

	if( argc != 2 )  {
		fputs( usage, stderr );
		exit(1);
	}

	BU_LIST_INIT( &head.l );
	outfp = wdb_fopen( "molecule.g" );
	mk_id( outfp, argv[1] );
	read_data();

	/* Build the overall combination */
	mk_lfcomb( outfp, "mol.g", &head, 0 );

	wdb_close(outfp);
	return 0;
}

/* File format from stdin
 *
 * For a ATOM DATA_TYPE ATOM_ID ATOM_NAME RED GREEN BLUE
 * For a Sphere DATA_TYPE SPH_ID CENTER ( X, Y, Z) RADIUS ATOM_TYPE
 * For a Bond   DATA_TYPE SPH_ID SPH_ID
 * DATA_TYPE = 0 - Atom1 - Sphere 2 - Bond
 * SPH_ID = integer
 * CENTER = three float values x, y, z
 * RADIUS = Float
 * ATOM_TYPE = integer
 * ATOM_NAME = Character pointer to name value.
 */
void
read_data(void)
{

	int             data_type;
	int             sphere_id;
	point_t		center;
	float           x, y, z;
	float           sphere_radius;
	int             atom_type;
	int             b_1, b_2;
	int red, green, blue;
	int i = 0;
	

	while (scanf(" %d", &data_type) != 0) {

		switch (data_type) {
		case (0):
			scanf("%d", &i);
			scanf("%s", atom_list[i].a_name);
			scanf("%d", &red);
			scanf("%d", &green);
			scanf("%d", &blue);
			atom_list[i].red  = red;
			atom_list[i].green  = green;
			atom_list[i].blue  = blue;
			break;
		case (1):
		        scanf("%d", &sphere_id);
		        scanf("%f", &x );
		        scanf("%f", &y);
		        scanf("%f", &z);
		        scanf("%f", &sphere_radius);
		        scanf("%d", &atom_type);
			VSET( center, x, y, z );
			process_sphere(sphere_id, center, sphere_radius,
				atom_type);
			break;
		case (2):
			scanf("%d", &b_1);
			scanf("%d", &b_2);
			(void)make_bond( b_1, b_2);
			break;
		case (4):
			return;
		}
	}
}

void
process_sphere(int id, fastf_t *center, double rad, int sph_type)
{
	struct sphere * new = (struct sphere *)
	    malloc( sizeof ( struct sphere) );
	char nm[128], nm1[128];
	unsigned char rgb[3];
	struct wmember	reg_head;

	rgb[0] = atom_list[sph_type].red;
	rgb[1] = atom_list[sph_type].green;
	rgb[2] = atom_list[sph_type].blue;

	sprintf(nm1, "sph.%d", id );
	mk_sph( outfp, nm1, center, rad );

	/* Create a region nm to contain the solid nm1 */
	BU_LIST_INIT( &reg_head.l );
	(void)mk_addmember( nm1, &reg_head.l, NULL, WMOP_UNION );
	sprintf(nm, "SPH.%d", id );
	mk_lcomb( outfp, nm, &reg_head, 1, matname, matparm, rgb, 0 );

	/* Include this region in the larger group */
	(void)mk_addmember( nm, &head.l, NULL, WMOP_UNION );

	new->next = ( struct sphere *)0;
	new->s_id = id;
	strncpy(new->s_name, nm1, sizeof(nm1) );
	VMOVE( new->s_center, center );
	new->s_rad = rad;
	new->s_atom_type = sph_type;

	if ( s_head == (struct sphere *) 0 )
	{
		s_head = s_list = new;
	} else
	{
		s_list->next = new;
		s_list = new;
	}
}

int
make_bond( int sp1, int sp2 )
{
	struct sphere * s1, *s2, *s_ptr;
	point_t base;
	vect_t height;
	char nm[128], nm1[128];
	unsigned char rgb[3];
	struct wmember reg_head;

	s1 = s2 = (struct sphere *) 0;

	for( s_ptr = s_head; s_ptr != (struct sphere *)0; s_ptr = s_ptr->next )
	{
		if ( s_ptr->s_id == sp1 )
			s1 = s_ptr;
			
		if ( s_ptr->s_id == sp2 )
			s2 = s_ptr;
	}

	if( s1 == (struct sphere *) 0 || s2 == (struct sphere *)0 )
		return -1;		/* error */

	VMOVE( base, s1->s_center );
	VSUB2( height, s2->s_center, s1->s_center );

	sprintf( nm, "bond.%d.%d", sp1, sp2);

	rgb[0] = 191;
	rgb[1] = 142;
	rgb[2] = 57;

#if 1
	/* Use this for mol-cube.dat */
	mk_rcc( outfp, nm, base, height, s1->s_rad * 0.15 );
#else
	/* Use this for chemical molecules */
	mk_rcc( outfp, nm, base, height, s1->s_rad * 0.5 );
#endif

	BU_LIST_INIT( &reg_head.l );
	(void)mk_addmember( nm, &reg_head.l, NULL, WMOP_UNION );
	(void)mk_addmember( s1->s_name, &reg_head.l, NULL, WMOP_SUBTRACT );
	(void)mk_addmember( s2->s_name, &reg_head.l, NULL, WMOP_SUBTRACT );
	sprintf( nm1, "BOND.%d.%d", sp1, sp2);
	mk_lcomb( outfp, nm1, &reg_head, 1, matname, matparm, rgb, 0 );
	(void)mk_addmember( nm1, &head.l, NULL, WMOP_UNION );

	return(0);		/* OK */
}
@


11.13
log
@change conf.h to a wrapped config.h
@
text
@d11 1
a11 1
static const char rcs_ident[] = "$Header: /cvs/brlcad/proc-db/molecule.c,v 11.12 2004/04/05 05:45:58 morrison Exp $";
@


11.12
log
@merge of ansi-6-0-branch into head
@
text
@d11 6
a16 1
static const char rcs_ident[] = "$Header$";
a17 1
#include "conf.h"
@


11.11
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d11 1
a11 1
static const char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.9 2002/05/17 12:42:24 morrison Exp $";
d52 1
a52 1
void	read_data(), process_sphere();
d62 1
a62 3
main(argc, argv)
int argc;
char ** argv;
d95 1
a95 1
read_data( )
d145 1
a145 5
process_sphere(id, center, rad, sph_type)
int	id;
point_t	center;
double	rad;
int	sph_type;
@


11.11.2.1
log
@Initial ANSIfication
@
text
@d11 1
a11 1
static const char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.11 2002/08/20 17:08:34 jra Exp $";
d52 1
a52 1
void	read_data(void), process_sphere(int id, fastf_t *center, double rad, int sph_type);
d62 3
a64 1
main(int argc, char **argv)
d97 1
a97 1
read_data(void)
d147 5
a151 1
process_sphere(int id, fastf_t *center, double rad, int sph_type)
@


11.10
log
@Converted from K&R to ANSI C - RFH
@
text
@d52 1
a52 1
void	read_data(void), process_sphere(int id, fastf_t *center, double rad, int sph_type);
d62 3
a64 1
main(int argc, char **argv)
d97 1
a97 1
read_data(void)
d147 5
a151 1
process_sphere(int id, fastf_t *center, double rad, int sph_type)
@


11.9
log
@added matrix parameter to mk_addmember()
@
text
@d11 1
a11 1
static const char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.8 2001/04/20 22:31:15 morrison Exp $";
d52 1
a52 1
void	read_data(), process_sphere();
d62 1
a62 3
main(argc, argv)
int argc;
char ** argv;
d95 1
a95 1
read_data( )
d145 1
a145 5
process_sphere(id, center, rad, sph_type)
int	id;
point_t	center;
double	rad;
int	sph_type;
@


11.8
log
@CONST to const
@
text
@d11 1
a11 1
static const char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.7 2000/08/24 04:40:25 mike Exp $";
d168 1
a168 1
	(void)mk_addmember( nm1, &reg_head.l, WMOP_UNION );
d173 1
a173 1
	(void)mk_addmember( nm, &head.l, WMOP_UNION );
d234 3
a236 3
	(void)mk_addmember( nm, &reg_head.l, WMOP_UNION );
	(void)mk_addmember( s1->s_name, &reg_head.l, WMOP_SUBTRACT );
	(void)mk_addmember( s2->s_name, &reg_head.l, WMOP_SUBTRACT );
d239 1
a239 1
	(void)mk_addmember( nm1, &head.l, WMOP_UNION );
@


11.7
log
@
mk_addmember
@
text
@d11 1
a11 1
static const char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.6 2000/07/12 21:59:07 mike Exp $";
d57 1
a57 1
static CONST char usage[] = "Usage: molecule db_title < mol-cube.dat > mol.g\n";
@


11.6
log
@
Converted to use new version of LIBWDB.
@
text
@d11 1
a11 1
static const char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.5 2000/07/12 02:59:30 mike Exp $";
d168 1
a168 1
	(void)mk_addmember( nm1, &reg_head, WMOP_UNION );
d173 1
a173 1
	(void)mk_addmember( nm, &head, WMOP_UNION );
d234 3
a236 3
	(void)mk_addmember( nm, &reg_head, WMOP_UNION );
	(void)mk_addmember( s1->s_name, &reg_head, WMOP_SUBTRACT );
	(void)mk_addmember( s2->s_name, &reg_head, WMOP_SUBTRACT );
d239 1
a239 1
	(void)mk_addmember( nm1, &head, WMOP_UNION );
@


11.5
log
@
Modified to use mk_lcomb()
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.4 2000/07/10 23:35:39 mike Exp $";
d14 5
d53 1
d59 3
d73 2
a74 1
	mk_id( stdout, argv[1] );
d78 4
a81 1
	mk_lfcomb( stdout, "mol.g", &head, 0 );
d164 1
a164 1
	mk_sph( stdout, nm1, center, rad );
d170 1
a170 1
	mk_lcomb( stdout, nm, &reg_head, 1, matname, matparm, rgb, 0 );
d192 2
a193 2
make_bond( sp1, sp2 )
int sp1, sp2;
d227 1
a227 1
	mk_rcc( stdout, nm, base, height, s1->s_rad * 0.15 );
d230 1
a230 1
	mk_rcc( stdout, nm, base, height, s1->s_rad * 0.5 );
d238 1
a238 1
	mk_lcomb( stdout, nm1, &reg_head, 1, matname, matparm, rgb, 0 );
@


11.4
log
@
raytrace.h before wdb.h
Eliminated use of db.h
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.3 2000/03/31 03:07:31 mike Exp $";
a142 1
	mat_t m;
d144 1
a144 2

	bn_mat_idn( m);
d150 6
d157 3
a160 4
	sprintf(nm1, "sph.%d", id );
	mk_sph( stdout, nm1, center, rad );
	mk_comb( stdout, nm, 1, 1, matname, matparm, rgb, 0 );
	mk_memb( stdout, nm1, m, WMOP_UNION);
a184 1
	mat_t m;
d187 1
a187 2

	bn_mat_idn( m );
a206 2
	sprintf( nm1, "BOND.%d.%d", sp1, sp2);
	(void)mk_addmember( nm1, &head, WMOP_UNION );
d220 8
a227 4
	mk_comb( stdout, nm1, 3, 1, matname, matparm, rgb, 0 );
	mk_memb( stdout, nm, m, WMOP_UNION);
	mk_memb( stdout, s1->s_name, m, WMOP_SUBTRACT);
	mk_memb( stdout, s2->s_name, m, WMOP_SUBTRACT);
@


11.3
log
@
Changed RT_ to BU_ / BN_
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /c/CVS/brlcad/proc-db/molecule.c,v 11.2 1996/12/31 17:55:50 jra Exp $";
a18 1
#include "db.h"
d20 1
d157 1
a157 1
	mk_memb( stdout, nm1, m, UNION);
d161 1
a161 1
	NAMEMOVE(nm1, new->s_name);
d222 3
a224 3
	mk_memb( stdout, nm, m, UNION);
	mk_memb( stdout, s1->s_name, m, SUBTRACT);
	mk_memb( stdout, s2->s_name, m, SUBTRACT);
@


11.2
log
@changed "CONST static char usage[]" to "static CONST char usage[]".
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /m/cad/proc-db/RCS/molecule.c,v 11.1 1995/01/04 10:06:14 mike Rel4_4 jra $";
d63 1
a63 1
	RT_LIST_INIT( &head.l );
d146 1
a146 1
	mat_idn( m);
d186 1
a186 1
	mat_idn( m );
@


11.1
log
@Release_4.4
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /m/cad/proc-db/RCS/molecule.c,v 10.5 94/11/14 22:11:35 mike Exp $";
d51 1
a51 1
CONST static char usage[] = "Usage: molecule db_title < mol-cube.dat > mol.g\n";
@


10.5
log
@Irix 6
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /m/cad/proc-db/RCS/molecule.c,v 10.4 94/11/08 22:07:01 mike Exp Locker: mike $";
@


10.4
log
@Added overall combination.
Made connecting rods smaller.
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /m/cad/proc-db/RCS/molecule.c,v 10.3 94/11/08 21:34:45 mike Exp Locker: mike $";
d18 1
a92 2
	int             atom_id;
	char            atom_name[20];
@


10.3
log
@Fixed serious bugs.
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /m/cad/proc-db/RCS/molecule.c,v 10.2 94/08/09 19:20:45 gdurf Exp Locker: mike $";
d48 1
a48 1
CONST static char usage[] = "Usage: molecule db_title\n";
d50 2
d62 1
d65 3
d154 1
d208 1
d214 7
a220 1
	mk_rcc( stdout, nm, base, height, 5.0 );
@


10.2
log
@Added include of conf.h
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: /m/cad/proc-db/RCS/molecule.c,v 10.1 1991/10/12 06:44:38 mike Rel4_0 gdurf $";
d20 1
d37 1
a37 1
	char * a_name;
d48 2
d54 5
@


10.1
log
@Release_4.0
@
text
@d11 3
a13 1
static char rcs_ident[] = "$Header: /m/cad/proc-db/RCS/molecule.c,v 9.1 89/05/19 06:04:48 mike Rel3_5 $";
@


9.1
log
@Release_3.5
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 8.1 88/10/05 00:38:22 mike Rel3_0 $";
@


8.1
log
@Release_3.0
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 7.4 88/09/20 23:58:03 mike Exp $";
@


7.4
log
@lint
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 7.3 88/08/20 07:26:37 mike Locked $";
@


7.3
log
@libwdb changes
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 7.2 88/05/15 23:00:16 phil Locked $";
d110 1
a110 1
			make_bond( b_1, b_2);
d184 1
a184 1
		return -1;
d202 1
a202 1

@


7.2
log
@lint fixes
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 7.1 87/11/03 16:49:15 mike Locked $";
d50 1
a50 1
	mk_id( stdout, argv[1], ID_MM_UNIT );
d140 1
a140 1
	mk_mcomb( stdout, nm, 1, 1, matname, matparm, 1, rgb );
d198 1
a198 1
	mk_mcomb( stdout, nm1, 3, 1, matname, matparm, 1, rgb);
@


7.1
log
@Release 2.3
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 1.5 87/10/30 15:34:30 mike Exp $";
d43 2
d66 1
a66 1

d118 1
a118 1

a203 2

rt_log(str) {fprintf(stderr,"rt_log: %s\n", str);}
@


1.5
log
@Added rt_log routine.
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 1.4 87/10/30 15:13:56 mike Exp $";
@


1.4
log
@Neatened header
@
text
@d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 1.3 87/09/25 23:19:59 mike Exp $";
d202 2
@


1.3
log
@Changed for new mk_sph and mk_memb calling sequences.
@
text
@d2 3
a4 1
 * mol.c - Create a molecule from G. Adams format
d11 1
a11 1
static char rcs_ident[] = "$Header: molecule.c,v 1.2 87/09/16 23:01:28 mike Locked $";
@


1.2
log
@Updated to include stdio FILE pointer as first arg to
all mk_*() routines.
@
text
@d9 1
a9 1
static char rcs_ident[] = "$Header: mol.c,v 1.1 87/01/12 14:48:50 mike Locked $";
d68 1
d99 2
a100 1
			process_sphere(sphere_id, x,y,z, sphere_radius,
d115 5
a119 4
process_sphere(id, x, y, z, rad, sph_type)
int id;
float x, y, z, rad;
int sph_type;
d135 1
a135 1
	mk_sph( stdout, nm1, x, y, z, rad );
d137 1
a137 1
	mk_memb( stdout, UNION, nm1, m);
d142 1
a142 3
	new->s_center[0] = x;
	new->s_center[1] = y;
	new->s_center[2] = z;
d195 3
a197 3
	mk_memb( stdout, UNION, nm, m);
	mk_memb( stdout, SUBTRACT, s1->s_name, m);
	mk_memb( stdout, SUBTRACT, s2->s_name, m);
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
static char rcs_ident[] = "$Header:$";
d20 5
a24 5
	int  s_id;			/* Sphere id */
	char  s_name[15];			/* Sphere name */
	point_t s_center;		/* Sphere Center */
	fastf_t s_rad;			/* Sphere radius */
	int s_atom_type;		/* Atom Type */
d46 1
a46 1
	mk_id( argv[1], ID_MM_UNIT );
d104 1
a104 1
			mk_bond( b_1, b_2);
d132 3
a134 3
	mk_sph( nm1, x, y, z, rad );
	mk_mcomb( nm, 1, 1, matname, matparm, 1, rgb );
	mk_memb( UNION, nm1, m);
d155 1
a155 1
mk_bond( sp1, sp2 )
d191 1
a191 1
	mk_rcc( nm, base, height, 5.0 );
d193 4
a196 4
	mk_mcomb( nm1, 3, 1, matname, matparm, 1, rgb);
	mk_memb(UNION, nm, m);
	mk_memb(SUBTRACT, s1->s_name, m);
	mk_memb(SUBTRACT, s2->s_name, m);
a198 1

@
