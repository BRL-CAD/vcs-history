head	11.8;
access;
symbols
	ansi-20040405-merged:11.5.2.1
	postmerge-20040405-ansi:11.6
	premerge-20040404-ansi:11.5
	postmerge-autoconf:11.5
	autoconf-freeze:11.5
	premerge-autoconf:11.5
	postmerge-20040315-windows:11.5
	premerge-20040315-windows:11.5
	windows-20040315-freeze:11.5
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.2
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.8
date	2004.05.21.16.38.54;	author morrison;	state dead;
branches;
next	11.7;

11.7
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.6;

11.6
date	2004.04.05.05.46.01;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.08.50;	author jra;	state Exp;
branches
	11.5.2.1;
next	11.4;

11.4
date	2002.08.15.20.56.01;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	2001.08.10.20.44.36;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.24.22.46.21;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.21.03;	author mike;	state Rel4_4;
branches;
next	10.4;

10.4
date	95.01.04.07.16.44;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	94.10.11.20.24.11;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.11.20.09.06;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.52.42;	author mike;	state Rel4_0;
branches;
next	1.3;

1.3
date	91.08.27.15.23.45;	author stay;	state Exp;
branches;
next	1.2;

1.2
date	91.01.12.08.45.55;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	91.01.03.20.45.24;	author butler;	state Exp;
branches;
next	;

11.5.2.1
date	2002.09.19.18.02.29;	author morrison;	state Exp;
branches;
next	;


desc
@dist
@


11.8
log
@moved to src/tools/
@
text
@/* 
 * rlenoise.c - Add random (uniform) noise to an image.
 * 
 * Copyright 1988
 * Center for Information Technology Integration (CITI)
 * Information Technology Division
 * University of Michigan
 * Ann Arbor, Michigan
 *
 * Spencer W. Thomas
 *
 * Usage:
 * 	rlenoise [-a amount] [file]
 *
 * Adds random noise to an image.  May be useful when the image will
 * be output to a quantized display, and the display program doesn't
 * understand how to compensate.  (That's why I wrote it, anyway.)
 * Optionally, can specify the amount of noise (peak-to-peak) to add.
 * Default is 4 (because that's what I needed.)
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include <time.h>

#include "machine.h"
#include "externs.h"		/* For malloc and free */
#include "rle.h"

/* Change this according the value on your system.  This is a crock.
#define	RANDOM_MAX	((double)(int)(((unsigned int)~0)>>1))
 */
#define MALLOC_ERR {fprintf(stderr, "%s: ran out of heap space\n",\
			    cmd_name(argv));exit(-2);}

int
main(int argc, char **argv)
{
    int x, y, i;
    int oflag = 0, noise_amount = 4;
    char * in_fname = NULL, * out_fname = NULL;
    FILE *outfile = stdout;
    rle_hdr in_hdr, out_hdr;
    rle_pixel **inrows, **outrows;
    double rand_mult, newpix;
    int rle_err, rle_cnt;

#ifdef USE_RANDOM
    /* Use the BSD random() function */
    {
	long seed;
	(void)time( &seed );
	srandom( *(int *)&seed );
    }
#else
    /* use the standard Unix rand function if nothing better */
    {
	time_t seed;
	(void)time( &seed );
	srand( *(int *)&seed );
    }
#define random rand
#endif

    if ( scanargs( argc, argv, "% n%-amount!d o%-outfile!s infile%s",
		   &noise_amount, &noise_amount, &oflag, &out_fname, &in_fname) == 0 )
	exit( 1 );

#if defined(HUGE_VAL)
    rand_mult = noise_amount / HUGE_VAL;
#else
    rand_mult = noise_amount / HUGE;
#endif

    noise_amount /= 2;

    in_hdr.rle_file = rle_open_f(cmd_name( argv ), in_fname, "r");
   
    for ( rle_cnt = 0;
	  (rle_err = rle_get_setup( &in_hdr )) == RLE_SUCCESS;
	  rle_cnt++ )
    {
	/* Always write to stdout, well almost always */
	out_hdr = in_hdr;
	if ( rle_cnt == 0 )
	    outfile = rle_open_f( cmd_name( argv ), out_fname, "w" );
	out_hdr.rle_file = outfile;

	rle_addhist( argv, &in_hdr, &out_hdr );

	/* Init output file */
	rle_put_setup( &out_hdr );

	/* Get some memory */
	if ( rle_row_alloc( &in_hdr, &inrows ) )
	    MALLOC_ERR;
	/* Set up the output pointers.  This is a pain. */
	if ( (outrows = ((rle_pixel **) malloc(sizeof(rle_pixel *)
					       * out_hdr.ncolors + 1 ) + 1))
	     == NULL )
	    MALLOC_ERR;
	for ( i = -out_hdr.alpha; i < out_hdr.ncolors; i++ )
	    if ( inrows[i] )
		outrows[i] = inrows[i] + out_hdr.xmin;

	for ( y = in_hdr.ymin; y <= in_hdr.ymax; y++ )
	{
	    rle_getrow( &in_hdr, inrows );
	    for ( i = 0; i < in_hdr.ncolors; i++ )
		if ( inrows[i] != NULL )
		    for ( x = in_hdr.xmin; x <= in_hdr.xmax; x++ )
		    {
			newpix = inrows[i][x] + random() * rand_mult -
			    noise_amount + 0.5;
			if ( newpix < 0 )
			    newpix = 0;
			if ( newpix > 255 )
			    newpix = 255;
			inrows[i][x] = newpix;
		    }
	    rle_putrow( outrows, out_hdr.xmax - out_hdr.xmin + 1,
			&out_hdr );
	}

	rle_puteof( &out_hdr );

	/* Free memory. */
	rle_row_free( &in_hdr, inrows );
	free( outrows - 1 );
    }

    /* Check for an error.  EOF or EMPTY is ok if at least one image
     * has been read.  Otherwise, print an error message.
     */
    if ( rle_cnt == 0 || (rle_err != RLE_EOF && rle_err != RLE_EMPTY) )
	rle_get_error( rle_err, cmd_name( argv ), in_fname );

    exit( 0 );
}
@


11.7
log
@change conf.h to a wrapped config.h
@
text
@@


11.6
log
@merge of ansi-6-0-branch into head
@
text
@d22 5
a26 1
#include "conf.h"
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d39 1
a39 3
main( argc, argv )
int argc;
char ** argv;
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d39 3
a41 1
main(int argc, char **argv)
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d39 3
a41 1
main(int argc, char **argv)
@


11.3
log
@lint
@
text
@d39 1
a39 3
main( argc, argv )
int argc;
char ** argv;
@


11.2
log
@
lint
@
text
@d26 1
@


11.1
log
@Release_4.4
@
text
@d37 1
a37 1
void
@


10.4
log
@DEC Alpha
@
text
@@


10.3
log
@HUGE_VAL -vs- HUGE
@
text
@d61 1
a61 1
	long seed;
@


10.2
log
@Altered #defines and #includes to conform to BRL-CAD standards
@
text
@d72 1
a72 1
#if (defined(__EXTENSIONS__) || defined (_POSIX_SOURCE))
@


10.1
log
@Release_4.0
@
text
@d22 2
a24 1
#include <rle.h>
d27 3
a29 12
#ifdef USE_STDLIB_H
#include <stdlib.h>
#else

#ifdef VOID_STAR
extern void *malloc();
#else
extern char *malloc();
#endif
extern void free();

#endif /* USE_STDLIB_H */
@


1.3
log
@posix wants HUGE_VAL and not HUGE
@
text
@@


1.2
log
@changed RANDOM_MAX usage to HUGE (from math.h)
@
text
@d80 3
d84 2
@


1.1
log
@Initial revision
@
text
@d24 1
d39 1
a39 1
/* Change this according the value on your system.  This is a crock. */
d41 1
a41 1

d80 1
a80 1
    rand_mult = noise_amount / RANDOM_MAX;
@
