head	11.7;
access;
symbols
	ansi-20040405-merged:11.4.2.1
	postmerge-20040405-ansi:11.5
	premerge-20040404-ansi:11.4
	postmerge-autoconf:11.4
	autoconf-freeze:11.4
	premerge-autoconf:11.4
	postmerge-20040315-windows:11.4
	premerge-20040315-windows:11.4
	windows-20040315-freeze:11.4
	autoconf-20031203:11.4
	autoconf-20031202:11.4
	autoconf-branch:11.4.0.10
	phong-branch:11.4.0.8
	photonmap-branch:11.4.0.6
	rel-6-1-DP:11.4
	windows-branch:11.4.0.4
	rel-6-0-2:11.2
	ansi-branch:11.4.0.2
	rel-6-0-1-branch:11.2.0.2
	hartley-6-0-post:11.3
	hartley-6-0-pre:11.2
	rel-6-0-1:11.2
	rel-6-0:11.2
	rel-5-4:11.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.7
date	2004.05.21.16.38.55;	author morrison;	state dead;
branches;
next	11.6;

11.6
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.5;

11.5
date	2004.04.05.05.46.01;	author morrison;	state Exp;
branches;
next	11.4;

11.4
date	2002.08.20.17.08.50;	author jra;	state Exp;
branches
	11.4.2.1;
next	11.3;

11.3
date	2002.08.15.20.56.01;	author hartley;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.24.22.46.22;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.21.08;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.11.20.09.10;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.52.46;	author mike;	state Rel4_0;
branches;
next	1.1;

1.1
date	91.01.03.20.45.27;	author butler;	state Exp;
branches;
next	;

11.4.2.1
date	2002.09.19.18.02.29;	author morrison;	state Exp;
branches;
next	;


desc
@dist
@


11.7
log
@moved to src/tools/
@
text
@/* 
 * rlescale.c - Generate a gray-scale RLE file.
 * 
 * Author:	Spencer W. Thomas
 * 		Electrical Engineering & Computer Science Dept.
 * 		University of Michigan
 * Date:	Mon Jun 13 1988
 * Copyright (c) 1988, University of Michigan
 *
 * Usage:
 * 	rlescale [-c] [-n nsteps] [xsize] [ysize]
 *
 * Generates a xsize x ysize gray-scale RLE file (by default 480x512).
 * Has color squares along the bottom, with nsteps (default 16) gray
 * log stepped intensity gray rectangles above that.  If -c is
 * specified, does separate white, red, green, and blue scales. 
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>

#include "machine.h"
#include "externs.h"
#include "rle.h"
#include "rle_code.h"
#include "rle_raw.h"

int
main(int argc, char **argv)
{
    int xsize = 512, ysize = 480, nsteps = 16, cflag = 0, oflag = 0;
    int y, i, * nscan;
    rle_op ** scans;
    char buf[80], *out_fname = NULL;

    if ( scanargs(argc, argv, "% c%- n%-nsteps!d o%-outfile!s xsize%d ysize%d",
		  &cflag, &nsteps, &nsteps,
		  &oflag, &out_fname, &xsize, &ysize ) == 0 )
	exit( 1 );

    /* Sanity check parameters -- Runs must be at least 3 pixels long */
    if ( xsize < 3 * nsteps || xsize < 24 )
    {
	fprintf( stderr,
       "Image isn't wide enough for %d steps, should be at least %d pixels.\n",
		 nsteps, 24 < 3 * nsteps ? 3 * nsteps : 24 );
	exit( 1 );
    }

    rle_dflt_hdr.ncolors = 3;
    rle_dflt_hdr.alpha = 0;	/* No coverage mask */
    rle_dflt_hdr.xmax = xsize - 1;
    rle_dflt_hdr.ymax = ysize - 1;
    rle_dflt_hdr.rle_file = rle_open_f(cmd_name( argv ), out_fname, "w");

    rle_addhist( argv, (rle_hdr *)0, &rle_dflt_hdr );

    sprintf( buf, "IMAGE_TYPE=%s scale image with %d log steps",
	     cflag ? "Color" : "Gray", nsteps );  
    rle_putcom( buf, &rle_dflt_hdr );

    /* Allocate storage for the output rows */
    if ( rle_raw_alloc( &rle_dflt_hdr, &scans, &nscan ) )
    {
	fprintf( stderr, "%s: malloc failed\n", cmd_name( argv ) );
	exit( -2 );
    }

    /* Create the header in the output file */
    rle_put_setup( &rle_dflt_hdr );

    /* Create the scanline for the color squares */
    for ( i = 0; i < 8; i++ )
    {
	scans[0][i].u.run_val = (i & 1) ? 255 : 0;
	scans[0][i].opcode = RRunDataOp;
	scans[0][i].xloc = i * xsize / 8;
	scans[0][i].length = (i + 1) * xsize / 8 - scans[0][i].xloc;
	scans[1][i] = scans[0][i];
	scans[1][i].u.run_val = (i & 2) ? 255 : 0;
	scans[2][i] = scans[0][i];
	scans[2][i].u.run_val = (i & 4) ? 255 : 0;
    }
    nscan[0] = 8;
    nscan[1] = 8;
    nscan[2] = 8;

    /* Write the color squares */
    for ( y = 0; y < ysize / 8; y++ )
	rle_putraw( scans, nscan, &rle_dflt_hdr );

    /* Create the data for the scale */
    for ( i = 0; i < nsteps; i++ )
    {
	scans[0][i].u.run_val = (int)(255.0 / pow(2.0, i*(8.0/nsteps)) + 0.5);
	scans[0][i].opcode = RRunDataOp;
	scans[0][i].xloc = i * xsize / nsteps;
	scans[0][i].length = (i + 1) * xsize / nsteps - scans[0][i].xloc;
	scans[1][i] = scans[0][i];
	scans[2][i] = scans[0][i];
    }
    nscan[0] = nsteps;
    nscan[1] = nsteps;
    nscan[2] = nsteps;

    /* Draw the scale */
    if ( !cflag )
	for ( ; y < ysize; y++ )
	    rle_putraw( scans, nscan, &rle_dflt_hdr );
    else
    {
	/* blue scale */
	nscan[0] = nscan[1] = 0;
	for ( ; y < ysize * 11./32. ; y++ )
	    rle_putraw( scans, nscan, &rle_dflt_hdr );
	/* green scale */
	nscan[1] = nsteps;
	nscan[2] = 0;
	for ( ; y < ysize * 18./32.; y++ )
	    rle_putraw( scans, nscan, &rle_dflt_hdr );
	/* red scale */
	nscan[0] = nsteps;
	nscan[1] = 0;
	for ( ; y < ysize * 25./32.; y++ )
	    rle_putraw( scans, nscan, &rle_dflt_hdr );
	/* white scale */
	nscan[1] = nscan[2] = nsteps;
	for ( ; y < ysize; y++ )
	    rle_putraw( scans, nscan, &rle_dflt_hdr );
    }

    rle_raw_free( &rle_dflt_hdr, scans, nscan );

    rle_puteof( &rle_dflt_hdr );

    exit( 0 );
}
@


11.6
log
@change conf.h to a wrapped config.h
@
text
@@


11.5
log
@merge of ansi-6-0-branch into head
@
text
@d19 5
a23 1
#include "conf.h"
@


11.4
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d31 1
a31 3
main( argc, argv )
int argc;
char ** argv;
@


11.4.2.1
log
@Initial ANSIfication
@
text
@d31 3
a33 1
main(int argc, char **argv)
@


11.3
log
@Converted from K&R to ANSI C - RFH
@
text
@d31 3
a33 1
main(int argc, char **argv)
@


11.2
log
@
lint
@
text
@d31 1
a31 3
main( argc, argv )
int argc;
char ** argv;
@


11.1
log
@Release_4.4
@
text
@d30 1
a30 1
void
@


10.2
log
@Altered #defines and #includes to conform to BRL-CAD standards
@
text
@@


10.1
log
@Release_4.0
@
text
@d19 2
a21 2
#include <rle.h>
#include <rle_raw.h>
d23 6
@


1.1
log
@Initial revision
@
text
@@
