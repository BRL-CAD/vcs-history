head	11.10;
access;
symbols
	ansi-20040405-merged:11.7.2.1
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.7
	postmerge-autoconf:11.7
	autoconf-freeze:11.7
	premerge-autoconf:11.7
	postmerge-20040315-windows:11.7
	premerge-20040315-windows:11.7
	windows-20040315-freeze:11.7
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.2
	offsite-5-3-pre:11.4
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.10
date	2004.05.21.16.38.51;	author morrison;	state dead;
branches;
next	11.9;

11.9
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.8;

11.8
date	2004.04.05.05.46.00;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.49;	author jra;	state Exp;
branches
	11.7.2.1;
next	11.6;

11.6
date	2002.08.15.20.56.01;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2001.10.11.23.35.48;	author butler;	state Exp;
branches;
next	11.4;

11.4
date	2000.08.24.22.48.47;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.24.22.46.20;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	96.07.17.17.00.59;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.20.52;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.11.20.09.00;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.52.33;	author mike;	state Rel4_0;
branches;
next	1.2;

1.2
date	91.01.12.08.43.00;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	91.01.03.20.45.20;	author butler;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.28;	author morrison;	state Exp;
branches;
next	;


desc
@dist
@


11.10
log
@moved to src/tools/
@
text
@/* 
 * rlecat.c - Concatenate RLE files.
 * 
 * Author:	Spencer W. Thomas
 * 		EECS Dept.
 * 		University of Michigan
 * Date:	Mon Nov  5 1990
 * Copyright (c) 1990, University of Michigan
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#include "machine.h"
#include "externs.h"
#include "rle.h"
#include "rle_code.h"
#include "rle_raw.h"

void	rep_file(rle_hdr *in_hdr, rle_hdr *out_hdr, int rep_cnt);

/*
 * rlecat
 *
 * Concatenate RLE files, adding title comments, and/or repeating files.
 *
 * Usage:
 *  	rlecat [-c] [-n repeat-count] [-o outfile] [files...]
 * Inputs:
 *  	-c: 	"Collated"  Multiple input images will be repeated
 *  	    	(see -n) in sequence 1 2 3 ... 1 2 3 ...  The default
 *  	    	is uncolllated, 1 1 ... 2 2 ... 3 3 ...
 * 
 *  	-n repeat-count:
 *  	    	Repeat each input image 'repeat-count' times.  The -c
 *  	    	flag controls the ordering of the repeats.  Repeating
 *  	    	creates a temporary file in the "/tmp" directory that
 *  	    	is the size of a single "repeat unit".  In collated
 *  	    	mode, a repeat unit consists of the concatenation of
 *  	    	all the input images, otherwise it is just a single
 *  	    	image.
 *
 *  	files:	Input file names.  If none specified, input will be
 *  	    	read from the standard input.
 *
 * Outputs:
 *  	-o outfile:
 *  	    	Output file.  If not specified, output is written to
 *  	    	the standard output.
 *
 * Algorithm:
 *  	Reads each input image, adds a 'title' comment to it based on
 *  	the input file name (no title is added to images read from the
 *  	standard input), and writes it to the output.  If a repeat
 *  	count is specified, the image is written to a temporary file,
 *  	and this is repeatedly copied to the output according to the
 *  	repeat count.  If the collation flag (-c) is specified, then
 *  	all images will be read before starting to repeat.
 */
int
main(int argc, char **argv)
{
    char       **infname = NULL,
    	       *outfname = NULL;
    char       *dash = "-";	/* Used to fake a request for stdin. */
    static char temp[] = "/tmp/rlecatXXXXXXXX";
    int 	cflag = 0,
    	    	nflag = 0,
    	    	rep_cnt = 0,
    	    	oflag = 0,
    	    	nfiles = 0;
    int		rle_cnt, rle_err, y, nskip;
    int	    	file_cnt;
    FILE       *outfile, *tmpfile=NULL;
    rle_hdr in_hdr, out_hdr;	/* Headers for input and output files. */
    rle_hdr tmp_hdr;		/* Header for temp file for repeats. */
    char    	buf[BUFSIZ];	/* For building title comment. */
    rle_op    **rows;		/* Storage for input data. */
    int	       *n_op;		/* Number of ops per row. */
    
    if ( scanargs( argc, argv, "% c%- n%-repeat-count!d o%-outfile!s files%*s",
		   &cflag, &nflag, &rep_cnt,
		   &oflag, &outfname, &nfiles, &infname ) == 0 )
	exit( 1 );

    /* If no input, use standard input. */
    if ( nfiles == 0 )
    {
	nfiles = 1;
	infname = &dash;
    }

    /* Open the output file now, to make sure we can. */
    outfile = rle_open_f_noexit( cmd_name( argv ), outfname, "w" );
    
    /* If requesting repeats, create temp file. */
    if ( nflag )
    {
	if ( rep_cnt < 2 )
	    nflag = 0;		/* Not really repeating! */
	else
	{
	    mkstemp( temp );	/* Make a temporary file name */
	    tmpfile = rle_open_f( cmd_name( argv ), temp, "w+" );
	}
    }

    /* For each file, read it and write it. */
    for ( file_cnt = 0; file_cnt < nfiles; file_cnt++ )
    {
	/* Open the input file.
	 * The output file won't be opened until the first image header
	 * has been read.  This avoids unnecessarily wiping out a
	 * pre-existing file if the input is garbage.
	 */
	in_hdr.rle_file =
	    rle_open_f_noexit( cmd_name( argv ), infname[file_cnt], "r" );
	if ( in_hdr.rle_file == NULL )
	    continue;

	rle_cnt = 0;
	while ( (rle_err = rle_get_setup( &in_hdr )) == RLE_SUCCESS )
	{
	    /* Count the input images. */
	    rle_cnt++;

	    /* The output header is a copy of the input header.  The only
	     * difference is the FILE pointer.
	     */
	    out_hdr = in_hdr;
	    out_hdr.rle_file = outfile;

	    /* Add to the history comment. */
	    rle_addhist( argv, &in_hdr, &out_hdr );

	    /* Build the title comment. */
	    if ( rle_getcom( "title", &in_hdr ) ||
		 rle_getcom( "TITLE", &in_hdr ) )
		;		/* Don't disturb existing title. */
	    else
		if ( in_hdr.rle_file != stdin )
		{
		    if ( rle_cnt == 1 )
			sprintf( buf, "TITLE=%s", infname[file_cnt] );
		    else
			sprintf( buf, "TITLE=%s(%d)", infname[file_cnt],
				 rle_cnt );
		    rle_putcom( buf, &out_hdr );
		}

	    /* Write the output image header. */
	    rle_put_setup( &out_hdr );

	    if ( nflag )
	    {
		tmp_hdr = out_hdr;
		tmp_hdr.rle_file = tmpfile;
		rle_put_setup( &tmp_hdr );
	    }

	    /* Allocate memory into which the image scanlines can be read.
	     * This should happen after the above adjustment, to minimize
	     * the amount of memory allocated.
	     */
	    if ( rle_raw_alloc( &in_hdr, &rows, &n_op ) < 0 )
	    {
		fprintf( stderr, "rleskel: Unable to allocate image memory.\n" );
		exit( RLE_NO_SPACE );
	    }

	    /* Read the input image and copy it to the output file. */
	    y = in_hdr.ymin - 1;
	    while ( (nskip = rle_getraw( &in_hdr, rows, n_op )) != 32768 )
	    {
		nskip -= y;
		y += nskip;
		if ( nskip > 1 )
		    rle_skiprow( &out_hdr, nskip - 1 );

		/* Write the processed scanline. */
		rle_putraw( rows, n_op, &out_hdr );
		if ( nflag )
		{
		    if ( nskip > 1 )
			rle_skiprow( &tmp_hdr, nskip - 1 );
		    rle_putraw( rows, n_op, &tmp_hdr );
		}

		rle_freeraw( &in_hdr, rows, n_op );
	    }

	    /* Free memory. */
	    rle_raw_free( &in_hdr, rows, n_op );

	    /* Write an end-of-image code. */
	    rle_puteof( &out_hdr );
	    if ( nflag )
		rle_puteof( &tmp_hdr );

	    /* If not collating, do the repeats now. */
	    if ( !cflag && nflag )
		rep_file( &tmp_hdr, &out_hdr, rep_cnt );
	}

	/* Check for an error.  EOF or EMPTY is ok if at least one image
	 * has been read.  Otherwise, print an error message.
	 */
	if ( rle_cnt == 0 || (rle_err != RLE_EOF && rle_err != RLE_EMPTY) )
	    rle_get_error( rle_err, cmd_name( argv ), *infname );
    }

    /* If collating, do the repeats here. */
    if ( cflag && nflag )
	rep_file( &tmp_hdr, &out_hdr, rep_cnt );

    /* If repeating, delete the temp file. */
    if ( nflag )
	unlink( temp );

    exit( 0 );			/* All ok. */
}

/*****************************************************************
 * TAG( rep_file )
 * 
 * Copy an rle file repeatedly to the output file.
 * Inputs:
 * 	in_hdr:	    Header for the file to copy from.
 * 	rep_cnt:    Number of times to repeat + 1 (one copy has
 * 	    	    already been written at this point.)
 * Outputs:
 * 	out_hdr:    Header for the output file.
 * Assumptions:
 * 	in_hdr refers to a seekable file, file "cursor" is at the end
 * 	of the image(s) to be copied.
 * Algorithm:
 *  	Save current file position in nbytes.
 * 	Repeat rep_cnt-1 times:
 * 	    Rewind the input.
 * 	    Copy nbytes bytes from the input to the output.
 *  	Rewind the input.
 */
void
rep_file(rle_hdr *in_hdr, rle_hdr *out_hdr, int rep_cnt)
{
    long int pos = ftell( in_hdr->rle_file );
    char buf[BUFSIZ];
    int n, nr;

    while ( --rep_cnt > 0 )
    {
	rewind( in_hdr->rle_file );
	for ( n = 0;
	      n < pos && (nr = fread( buf, 1, BUFSIZ, in_hdr->rle_file )) > 0;
	      n += nr )
	{
	    if ( pos - n < nr )
		nr = pos - n;
	    fwrite( buf, 1, nr, out_hdr->rle_file );
	}
    }

    rewind( in_hdr->rle_file );
}
@


11.9
log
@change conf.h to a wrapped config.h
@
text
@@


11.8
log
@merge of ansi-6-0-branch into head
@
text
@d11 5
a15 1
#include "conf.h"
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d21 1
a21 1
void	rep_file();
d62 1
a62 3
main( argc, argv )
int argc;
char **argv;
d245 1
a245 3
rep_file( in_hdr, out_hdr, rep_cnt)
rle_hdr *in_hdr, *out_hdr;
int rep_cnt;
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d21 1
a21 1
void	rep_file(rle_hdr *in_hdr, rle_hdr *out_hdr, int rep_cnt);
d62 3
a64 1
main(int argc, char **argv)
d247 3
a249 1
rep_file(rle_hdr *in_hdr, rle_hdr *out_hdr, int rep_cnt)
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d21 1
a21 1
void	rep_file(rle_hdr *in_hdr, rle_hdr *out_hdr, int rep_cnt);
d62 3
a64 1
main(int argc, char **argv)
d247 3
a249 1
rep_file(rle_hdr *in_hdr, rle_hdr *out_hdr, int rep_cnt)
@


11.5
log
@converted mktemp to mkstemp
@
text
@d21 1
a21 1
void	rep_file();
d62 1
a62 3
main( argc, argv )
int argc;
char **argv;
d245 1
a245 3
rep_file( in_hdr, out_hdr, rep_cnt)
rle_hdr *in_hdr, *out_hdr;
int rep_cnt;
@


11.4
log
@
lint
@
text
@d106 1
a106 1
	    mktemp( temp );	/* Make a temporary file name */
@


11.3
log
@
lint
@
text
@d77 1
a77 1
    FILE       *outfile, *tmpfile;
@


11.2
log
@Minor Mods for IRIX 6.2
@
text
@d61 1
a61 1
void
@


11.1
log
@Release_4.4
@
text
@d21 2
d246 1
@


10.2
log
@Altered #defines and #includes to conform to BRL-CAD standards
@
text
@@


10.1
log
@Release_4.0
@
text
@d11 2
d14 3
d18 1
a19 13

#ifdef USE_STDLIB_H
#include <stdlib.h>
#else

#ifdef VOID_STAR
extern void *malloc();
#else
extern char *malloc();
#endif
extern void free();

#endif /* USE_STDLIB_H */
@


1.2
log
@added extra argument to rle_raw_free (n_op) which was missing
changed call to rle_get_error to use indirect through infname
@
text
@@


1.1
log
@Initial revision
@
text
@d201 1
a201 1
	    rle_raw_free( &in_hdr, rows );
d217 1
a217 1
	    rle_get_error( rle_err, cmd_name( argv ), infname );
@
