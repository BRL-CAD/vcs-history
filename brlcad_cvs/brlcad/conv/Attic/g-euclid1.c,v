head	11.26;
access;
symbols
	ansi-20040405-merged:11.23.2.1
	postmerge-20040405-ansi:11.24
	premerge-20040404-ansi:11.23
	postmerge-autoconf:11.23
	autoconf-freeze:11.23
	premerge-autoconf:11.23
	ansi-20040316-freeze:11.23.2.1
	postmerge-20040315-windows:11.23
	premerge-20040315-windows:11.23
	windows-20040315-freeze:11.23
	autoconf-20031203:11.23
	autoconf-20031202:11.23
	autoconf-branch:11.23.0.10
	phong-branch:11.23.0.8
	photonmap-branch:11.23.0.6
	rel-6-1-DP:11.23
	windows-branch:11.23.0.4
	rel-6-0-2:11.21
	ansi-branch:11.23.0.2
	rel-6-0-1-branch:11.21.0.2
	hartley-6-0-post:11.22
	hartley-6-0-pre:11.21
	rel-6-0-1:11.21
	rel-6-0:11.21
	rel-5-4:11.13
	offsite-5-3-pre:11.18
	rel-5-3:11.13
	rel-5-2:11.13
	rel-5-1-branch:11.13.0.2
	rel-5-1:11.13
	rel-5-0:11.8
	rel-5-0-beta:11.7
	rel-4-5:11.7
	ctj-4-5-post:11.7
	ctj-4-5-pre:11.7
	rel-4-4:11.1;
locks; strict;
comment	@ * @;


11.26
date	2004.05.24.04.16.12;	author morrison;	state dead;
branches;
next	11.25;

11.25
date	2004.05.10.15.30.41;	author erikg;	state Exp;
branches;
next	11.24;

11.24
date	2004.04.05.07.49.36;	author morrison;	state Exp;
branches;
next	11.23;

11.23
date	2002.08.20.17.07.21;	author jra;	state Exp;
branches
	11.23.2.1;
next	11.22;

11.22
date	2002.08.15.20.54.34;	author hartley;	state Exp;
branches;
next	11.21;

11.21
date	2001.08.10.21.22.53;	author butler;	state Exp;
branches;
next	11.20;

11.20
date	2001.05.17.20.03.14;	author morrison;	state Exp;
branches;
next	11.19;

11.19
date	2001.04.05.19.34.59;	author morrison;	state Exp;
branches;
next	11.18;

11.18
date	2000.10.31.22.35.11;	author mike;	state Exp;
branches;
next	11.17;

11.17
date	2000.09.08.05.55.42;	author mike;	state Exp;
branches;
next	11.16;

11.16
date	2000.08.24.03.17.53;	author mike;	state Exp;
branches;
next	11.15;

11.15
date	2000.07.21.12.44.34;	author jra;	state Exp;
branches;
next	11.14;

11.14
date	2000.07.10.23.53.57;	author mike;	state Exp;
branches;
next	11.13;

11.13
date	2000.03.29.18.15.15;	author mike;	state Exp;
branches;
next	11.12;

11.12
date	2000.03.29.18.07.44;	author mike;	state Exp;
branches;
next	11.11;

11.11
date	2000.01.04.17.58.19;	author bparker;	state Exp;
branches;
next	11.10;

11.10
date	99.12.30.18.34.42;	author jra;	state Exp;
branches;
next	11.9;

11.9
date	99.12.29.23.23.00;	author mike;	state Exp;
branches;
next	11.8;

11.8
date	99.06.03.21.54.20;	author mike;	state Exp;
branches;
next	11.7;

11.7
date	96.08.02.12.46.58;	author jra;	state Exp;
branches;
next	11.6;

11.6
date	95.04.03.19.48.38;	author jra;	state Exp;
branches;
next	11.5;

11.5
date	95.02.22.05.40.55;	author mike;	state Exp;
branches;
next	11.4;

11.4
date	95.02.22.05.38.26;	author mike;	state Exp;
branches;
next	11.3;

11.3
date	95.01.27.15.05.04;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	95.01.24.10.10.39;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.09.59.33;	author mike;	state Rel4_4;
branches;
next	1.10;

1.10
date	94.12.16.16.32.44;	author jra;	state Exp;
branches;
next	1.9;

1.9
date	94.12.08.17.56.24;	author jra;	state Exp;
branches;
next	1.8;

1.8
date	94.11.08.16.15.04;	author jra;	state Exp;
branches;
next	1.7;

1.7
date	94.10.17.16.59.11;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	94.08.11.00.05.53;	author gdurf;	state Exp;
branches;
next	1.5;

1.5
date	94.04.20.15.58.41;	author jra;	state Exp;
branches;
next	1.4;

1.4
date	94.04.15.16.30.35;	author jra;	state Exp;
branches;
next	1.3;

1.3
date	94.03.24.13.15.20;	author jra;	state Exp;
branches;
next	1.2;

1.2
date	94.03.19.21.28.31;	author jra;	state Exp;
branches;
next	1.1;

1.1
date	94.03.19.20.52.17;	author jra;	state Exp;
branches;
next	;

11.23.2.1
date	2002.09.19.18.00.36;	author morrison;	state Exp;
branches;
next	;


desc
@g-euclid converter to produce each region as a seperate file
@


11.26
log
@moved to src/conv/
@
text
@/*
 *			G - E U C L I D . C
 *
 *  Program to convert a BRL-CAD model (in a .g file) to a Euclid "decoded" facetted model
 *  by calling on the NMG booleans.
 *
 *  Author -
 *	John R. Anderson
 *  
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
 */

#ifndef lint
static const char RCSid[] = "$Header: /n/xoff/cvs/brlcad/conv/g-euclid1.c,v 11.25 2004/05/10 15:30:41 erikg Exp $";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <signal.h>

#include "machine.h"
#include "externs.h"
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "../librt/debug.h"

BU_EXTERN(union tree *do_region_end, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data));

static char	usage[] = "Usage: %s [-v] [-s alarm_seconds] [-xX lvl] [-a abs_tol] [-r rel_tol] [-n norm_tol] brlcad_db.g object(s)\n";

static int	NMG_debug;		/* saved arg of -X, for longjmp handling */
static int	verbose;
/* static int	ncpu = 1; */		/* Number of processors */
static int	face_count;		/* Count of faces output for a region id */
static int	alarm_secs;		/* Number of seconds to allow for conversion, 0 means no limit */
static struct db_i		*dbip;
static struct rt_tess_tol	ttol;
static struct bn_tol		tol;
static struct model		*the_model;

static struct db_tree_state	tree_state;	/* includes tol & model */

static int	regions_tried = 0;
static int	regions_converted = 0;
static int	regions_written = 0;

struct facets
{
	struct loopuse *lu;
	struct loopuse *outer_loop;
	fastf_t diag_len;
	int facet_type;
};

void
fastf_print(FILE *fp_out, int length, fastf_t f)
{
	char buffer[128];
	char *ptr;
	int i;
	int buf_len;

	sprintf( &buffer[1], "%f", f );
	buffer[0] = ' ';

	buf_len = strlen( buffer );
	if( buf_len <= length )
	{
		for( i=0 ; i<length ; i++ )
		{
			if( i < buf_len )
				fputc( buffer[i], fp_out );
			else
				fputc( ' ', fp_out );
		}

		return;
	}

	ptr = strchr( buffer, '.' );
	if( (ptr - buffer) > length )
	{
		bu_log( "Value (%f) too large for format length (%d)\n" , f, length );
		rt_bomb( "fastf_print\n" );
	}

	for( i=0 ; i<length ; i++ )
		fputc( buffer[i], fp_out );
}

void
handler(int code)
{
	rt_bomb( "ALARM boolean evaluation aborted\n" );
}

static void
Write_euclid_face(const struct loopuse *lu, const int facet_type, const int regionid, const int face_number, FILE *fp_out)
{
	struct faceuse *fu;
	struct edgeuse *eu;
	plane_t plane;
	int vertex_count=0;

	NMG_CK_LOOPUSE( lu );

	if( verbose )
		bu_log( "Write_euclid_face: lu=x%x, facet_type=%d, regionid=%d, face_number=%d\n",
			lu,facet_type,regionid,face_number );

	if( BU_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
		return;

	if( *lu->up.magic_p != NMG_FACEUSE_MAGIC )
		return;

	for( BU_LIST_FOR( eu , edgeuse , &lu->down_hd ) )
		vertex_count++;

	fprintf( fp_out , "%10d%3d     0.    1%5d" , regionid , facet_type , vertex_count );

	vertex_count = 0;
	for( BU_LIST_FOR( eu , edgeuse , &lu->down_hd ) )
	{
		struct vertex *v;
		int i;

		NMG_CK_EDGEUSE( eu );
		v = eu->vu_p->v_p;
		NMG_CK_VERTEX( v );
/*		fprintf( fp_out , "%10d%8f%8f%8f" , ++vertex_count , V3ARGS( v->vg_p->coord ) ); */
		vertex_count++;
		fprintf( fp_out, "%10d", vertex_count );

		for( i=X; i<=Z; i++ )
			fastf_print( fp_out, 8, v->vg_p->coord[i] );
	}

	fu = lu->up.fu_p;
	NMG_CK_FACEUSE( fu );
	NMG_GET_FU_PLANE( plane , fu );
	fprintf( fp_out , "%10d%15.5f%15.5f%15.5f%15.5f" , face_number , V4ARGS( plane ) );
}

/*	Routine to write an nmgregion in the Euclid "decoded" format */
static void
Write_euclid_region(struct nmgregion *r, struct db_tree_state *tsp, FILE *fp_out)
{
	struct shell *s;
	struct facets *faces = NULL;
	int i,j;

	NMG_CK_REGION( r );

	if( verbose )
		bu_log( "Write_euclid_region: r=x%x\n" , r );

	face_count = 0;

	/* if bounds haven't been calculated, do it now */
	if( r->ra_p == NULL )
		nmg_region_a( r , &tol );

	/* Check if region extents are beyond the limitations of the format */
	for( i=X ; i<ELEMENTS_PER_PT ; i++ )
	{
		if( r->ra_p->min_pt[i] < (-999999.0) )
		{
			bu_log( "g-euclid: Coordinates too large (%g) for Euclid format\n" , r->ra_p->min_pt[i] );
			return;
		}
		if( r->ra_p->max_pt[i] > 9999999.0 )
		{
			bu_log( "g-euclid: Coordinates too large (%g) for Euclid format\n" , r->ra_p->max_pt[i] );
			return;
		}
	}

	/* write out each face in the region */
	for( BU_LIST_FOR( s , shell , &r->s_hd ) )
	{
		struct faceuse *fu;

		for( BU_LIST_FOR( fu , faceuse , &s->fu_hd ) )
		{
			struct loopuse *lu;
			int no_of_loops=0;
			int no_of_holes=0;

			if( fu->orientation != OT_SAME )
				continue;

			/* count the loops in this face */
			for( BU_LIST_FOR( lu , loopuse , &fu->lu_hd ) )
			{
				if( BU_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
					continue;

				no_of_loops++;
			}

			if( !no_of_loops )
				continue;

			faces = (struct facets *)bu_calloc( no_of_loops , sizeof( struct facets ) , "g-euclid: faces" );

			i = 0;
			for( BU_LIST_FOR( lu , loopuse , &fu->lu_hd ) )
			{
				if( BU_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
					continue;

				faces[i].lu = lu;
				if( lu->orientation == OT_OPPOSITE )
					faces[i].facet_type = 1; /* this is a hole */
				else
					faces[i].facet_type = (-1); /* TBD */

				faces[i].outer_loop = NULL;
				i++;
			}

			/* determine type of face 
			 * 0 -> simple facet (no holes )
			 * 1 -> a hole
			 * 2 -> a facet that will have holes
			 */

			for( i=0 ; i<no_of_loops ; i++ )
			{
				if( faces[i].facet_type == 1 )
					no_of_holes++;
			}

			if( !no_of_holes )
			{
				/* no holes, so each loop is a simple face (type 0) */
				for( i=0 ; i<no_of_loops ; i++ )
					faces[i].facet_type = 0;
			}
			else if( no_of_loops == no_of_holes + 1 )
			{
				struct loopuse *outer_lu = NULL;

				/* only one outer loop, so find it */
				for( i=0 ; i<no_of_loops ; i++ )
				{
					if( faces[i].facet_type == (-1) )
					{
						outer_lu = faces[i].lu;
						faces[i].facet_type = 2;
						break;
					}
				}

				/* every hole must have this same outer_loop */
				for( i=0 ; i<no_of_loops ; i++ )
				{
					if( faces[i].facet_type == 1 )
						faces[i].outer_loop = outer_lu;
				}
			}
			else
			{
				int loop1,loop2;
				int outer_loop_count;

				/* must determine which holes go with which outer loops */
				for( loop1=0 ; loop1<no_of_loops ; loop1++ )
				{
					if( faces[loop1].facet_type != 1 )
						continue;

					/* loop1 is a hole look for loops containing loop1 */
					outer_loop_count = 0;
					for( loop2=0 ; loop2<no_of_loops ; loop2++ )
					{
						int class;

						if( faces[loop2].facet_type == 1 )
							continue;

						class = nmg_classify_lu_lu( faces[loop1].lu,
								faces[loop2].lu , &tol );

						if( class != NMG_CLASS_AinB )
							continue;

						/* loop1 is inside loop2, possible outer loop */
						faces[loop2].facet_type = (-2);
						outer_loop_count++;
					}

					if( outer_loop_count > 1 )
					{
						/* must choose outer loop from a list of candidates
						 * if any of these candidates contain one of the
						 * other candidates, the outer one can be eliminated
						 * as a possible choice */
						for( loop2=0 ; loop2<no_of_loops ; loop2++ )
						{
							if( faces[loop2].facet_type != (-2) )
								continue;

							for( i=0 ; i<no_of_loops ; i++ )
							{
								if( faces[i].facet_type != (-2) )
									continue;

								if( nmg_classify_lu_lu( faces[i].lu,
									faces[loop2].lu , &tol ) )
								{
									if( faces[i].facet_type != (-2) )
										continue;

									faces[loop2].facet_type = (-1);
									outer_loop_count--;
								}
							}
						}
					}

					if( outer_loop_count != 1 )
					{
						bu_log( "Failed to find outer loop for hole in component %d\n" , tsp->ts_regionid );
						goto outt;
					}

					for( i=0 ; i<no_of_loops ; i++ )
					{
						if( faces[i].facet_type == (-2) )
						{
							faces[i].facet_type = 2;
							faces[loop1].outer_loop = faces[i].lu;
						}
					}
				}

				/* Check */
				for( i=0 ; i<no_of_loops ; i++ )
				{
					if( faces[i].facet_type < 0 )
					{
						/* all holes have been placed 
						 * so these must be simple faces
						 */
						faces[i].facet_type = 0;
					}

					if( faces[i].facet_type == 1 && faces[i].outer_loop == NULL )
					{
						bu_log( "Failed to find outer loop for hole in component %d\n" , tsp->ts_regionid );
						goto outt;
					}
				}
			}
			/* output faces with holes first */
			for( i=0 ; i<no_of_loops ; i++ )
			{
				struct loopuse *outer_loop;

				if( faces[i].facet_type != 2 )
					continue;

				outer_loop = faces[i].lu;
				Write_euclid_face( outer_loop , 2 , tsp->ts_regionid , ++face_count , fp_out );

				/* output holes for this face */
				for( j=0 ; j<no_of_loops ; j++ )
				{
					if( j == i )
						continue;

					if( faces[j].outer_loop == outer_loop )
						Write_euclid_face( faces[j].lu , 1 , tsp->ts_regionid , ++face_count , fp_out );
				}
			}
			/* output simple faces */
			for( i=0 ; i<no_of_loops ; i++ )
			{
				if( faces[i].facet_type != 0 )
					continue;
				Write_euclid_face( faces[i].lu , 0 , tsp->ts_regionid , ++face_count , fp_out );
			}

			bu_free( (char *)faces , "g-euclid: faces" );
			faces = (struct facets*)NULL;
		}
	}

	regions_written++;

   outt:
	if( faces )
		bu_free( (char *)faces , "g-euclid: faces" );
	return;
}

/*
 *			M A I N
 */
int
main(int argc, char **argv)
{
	register int	c;
	double		percent;

	port_setlinebuf( stderr );

#if MEMORY_LEAK_CHECKING
	rt_g.debug |= DEBUG_MEM_FULL;
#endif

	ttol.magic = RT_TESS_TOL_MAGIC;
	/* Defaults, updated by command line options. */
	ttol.abs = 0.0;
	ttol.rel = 0.01;
	ttol.norm = 0.0;

	/* XXX These need to be improved */
	tol.magic = BN_TOL_MAGIC;
	tol.dist = 0.005;
	tol.dist_sq = tol.dist * tol.dist;
	tol.perp = 1e-6;
	tol.para = 1 - tol.perp;

	the_model = (struct model *)NULL;
	tree_state = rt_initial_tree_state;	/* struct copy */
	tree_state.ts_m = &the_model;
	tree_state.ts_tol = &tol;
	tree_state.ts_ttol = &ttol;

	BU_LIST_INIT( &rt_g.rtg_vlfree );	/* for vlist macros */

	rt_init_resource( &rt_uniresource, 0, NULL );

	/* Get command line arguments. */
	while ((c = getopt(argc, argv, "a:n:r:s:vx:P:X:")) != EOF) {
		switch (c) {
		case 's':
			alarm_secs = atoi( optarg );
			break;
		case 'a':		/* Absolute tolerance. */
			ttol.abs = atof(optarg);
			ttol.rel = 0.0;
			break;
		case 'n':		/* Surface normal tolerance. */
			ttol.norm = atof(optarg);
			ttol.rel = 0.0;
			break;
		case 'r':		/* Relative tolerance. */
			ttol.rel = atof(optarg);
			break;
		case 'v':
			verbose++;
			break;
		case 'P':
/*			ncpu = atoi( optarg ); */
			rt_g.debug = 1;	/* XXX DEBUG_ALLRAYS -- to get core dumps */
			break;
		case 'x':
			sscanf( optarg, "%x", (unsigned int *)&rt_g.debug );
			break;
		case 'X':
			sscanf( optarg, "%x", (unsigned int *)&rt_g.NMG_debug );
			NMG_debug = rt_g.NMG_debug;
			break;
		default:
			fprintf(stderr, usage, argv[0]);
			exit(1);
			break;
		}
	}

	if (optind+1 >= argc) {
		fprintf(stderr, usage, argv[0]);
		exit(1);
	}

	/* Open brl-cad database */
	if ((dbip = db_open( argv[optind] , "r")) == DBI_NULL)
	{
		bu_log( "Cannot open %s\n" , argv[optind] );
		perror(argv[0]);
		exit(1);
	}
	db_dirbuild( dbip );
	optind++;

	/* Walk indicated tree(s).  Each region will be output separately */

	tree_state = rt_initial_tree_state;	/* struct copy */
	the_model = nmg_mm();
	tree_state.ts_m = &the_model;
	tree_state.ts_tol = &tol;
	tree_state.ts_ttol = &ttol;

	(void)db_walk_tree(dbip, argc-optind, (const char **)(&argv[optind]),
		1,			/* ncpu */
		&tree_state,
		0,
		do_region_end,
		nmg_booltree_leaf_tess,
		(genptr_t)NULL);	/* in librt/nmg_bool.c */

	nmg_km( the_model );

#if MEMORY_LEAK_CHECKING
	bu_prmem("After conversions");
#endif

	percent = 0;
	if( regions_tried > 0 )
		percent = ((double)regions_converted * 100) / regions_tried;
	printf( "Tried %d regions, %d converted successfully.  %g%%\n",
		regions_tried, regions_converted, percent );
	percent = 0;
	if( regions_tried > 0 )
		percent = ((double)regions_written * 100) / regions_tried;
	printf( "                  %d written successfully. %g%%\n",
		regions_written, percent );

	/* Release dynamic storage */
	rt_vlist_cleanup();
	db_close(dbip);

#if MEMORY_LEAK_CHECKING
	bu_prmem("After complete G-EUCLID conversion");
#endif

	return 0;
}

/*
*			D O _ R E G I O N _ E N D
*
*  Called from db_walk_tree().
*
*  This routine must be prepared to run in parallel.
*/
union tree *do_region_end(register struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data)
{
	FILE			*fp_out;
	struct nmgregion	*r;
	struct bu_list		vhead;
	struct directory	*dir;
	union tree		*ret_tree;

	if( verbose )
		bu_log( "do_region_end: regionid = %d\n" , tsp->ts_regionid );

	RT_CK_TESS_TOL(tsp->ts_ttol);
	BN_CK_TOL(tsp->ts_tol);
	NMG_CK_MODEL(*tsp->ts_m);

	BU_LIST_INIT(&vhead);

	if (RT_G_DEBUG&DEBUG_TREEWALK || verbose) {
		char	*sofar = db_path_to_string(pathp);
		bu_log("\ndo_region_end(%d %d%%) %s\n",
			regions_tried,
			regions_tried>0 ? (regions_converted * 100) / regions_tried : 0,
			sofar);
		bu_free(sofar, "path string");
	}

	if (curtree->tr_op == OP_NOP)
		return  curtree;

	dir = DB_FULL_PATH_CUR_DIR( pathp );
	if( (fp_out = fopen( dir->d_namep , "w" )) == NULL )
	{
		bu_log(" Cannot open file %s\n" , dir->d_namep );
		perror( "g-euclid" );
		rt_bomb( "g-euclid: Cannot open output file\n" );
	}

	bu_log( "\n\nProcessing region %s:\n" , dir->d_namep );

	regions_tried++;
	/* Begin rt_bomb() protection */
	if( BU_SETJUMP )
	{
		/* Error, bail out */
		BU_UNSETJUMP;		/* Relinquish the protection */

		(void)alarm( 0 );

		/* Sometimes the NMG library adds debugging bits when
		 * it detects an internal error, before rt_bomb().
		 */
		rt_g.NMG_debug = NMG_debug;	/* restore mode */

		/* Release any intersector 2d tables */
		nmg_isect2d_final_cleanup();

		/* Release the tree memory & input regions */
		db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */

		rt_vlist_cleanup();

		/* Get rid of (m)any other intermediate structures */
		if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )
			nmg_km(*tsp->ts_m);
		else
			bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");

		/* Now, make a new, clean model structure for next pass. */
		*tsp->ts_m = nmg_mm();

#if MEMORY_LEAK_CHECKING
		bu_prmem("After Failure:");
#endif


		bu_log( "FAILED: %s\n" , dir->d_namep );
	
		goto out;
	}
	if( verbose )
		bu_log( "\tEvaluating region\n" );

	signal( SIGALRM , handler );

	(void)alarm( alarm_secs );

	(void)nmg_model_fuse(*tsp->ts_m, tsp->ts_tol);
	ret_tree = nmg_booltree_evaluate(curtree, tsp->ts_tol, &rt_uniresource);	/* librt/nmg_bool.c */

	if( ret_tree )
		r = ret_tree->tr_d.td_r;
	else
		r = (struct nmgregion *)NULL;

	(void)alarm( 0 );

	BU_UNSETJUMP;		/* Relinquish the protection */
	regions_converted++;
	if (r != 0)
	{
		struct shell *s;
		int empty_region=0;
		int empty_model=0;

		/* Kill cracks */
		s = BU_LIST_FIRST( shell, &r->s_hd );
		while( BU_LIST_NOT_HEAD( &s->l, &r->s_hd ) )
		{
			struct shell *next_s;

			next_s = BU_LIST_PNEXT( shell, &s->l );
			if( nmg_kill_cracks( s ) )
			{
				if( nmg_ks( s ) )
				{
					empty_region = 1;
					break;
				}
			}
			s = next_s;
		}

		/* kill zero length edgeuses */
		if( !empty_region )
		{
			 empty_model = nmg_kill_zero_length_edgeuses( *tsp->ts_m );
		}

		/* Write the region to the EUCLID file */
		if( !empty_region && !empty_model )
			Write_euclid_region( r , tsp , fp_out );

		bu_log( "Wrote region %s\n" , dir->d_namep );

		if( (*tsp->ts_m)->magic == NMG_MODEL_MAGIC )
			nmg_km(*tsp->ts_m);
		else
			bu_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");

		/* Now, make a new, clean model structure for next pass. */
		*tsp->ts_m = nmg_mm();

		rt_vlist_cleanup();
	}

	/*
	 *  Dispose of original tree, so that all associated dynamic
	 *  memory is released now, not at the end of all regions.
	 *  A return of TREE_NULL from this routine signals an error,
	 *  so we need to cons up an OP_NOP node to return.
	 */
	db_free_tree(curtree, &rt_uniresource);		/* Does an nmg_kr() */

#if MEMORY_LEAK_CHECKING
	bu_prmem("After Success:");
#endif

out:
	/* close any output file */
	if( fp_out )
		fclose( fp_out );

	BU_GETUNION(curtree, tree);
	curtree->magic = RT_TREE_MAGIC;
	curtree->tr_op = OP_NOP;
	return(curtree);
}
@


11.25
log
@change conf.h to a wrapped config.h
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /cvs/brlcad/conv/g-euclid1.c,v 11.24 2004/04/05 07:49:36 morrison Exp $";
@


11.24
log
@merge of ansi-6-0-branch into HEAD
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header$";
d22 5
a26 1
#include "conf.h"
@


11.23
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.21 2001/08/10 21:22:53 butler Exp $";
d70 1
a70 4
fastf_print( fp_out, length, f )
FILE *fp_out;
int length;
fastf_t f;
d106 1
a106 2
handler( code)
int code;
d112 1
a112 6
Write_euclid_face( lu , facet_type , regionid , face_number , fp_out )
const struct loopuse *lu;
const int facet_type;
const int regionid;
const int face_number;
FILE *fp_out;
d161 1
a161 4
Write_euclid_region( r , tsp , fp_out )
struct nmgregion *r;
struct db_tree_state *tsp;
FILE *fp_out;
d417 1
a417 3
main(argc, argv)
int	argc;
char	*argv[];
d555 1
a555 5
union tree *do_region_end(tsp, pathp, curtree, client_data)
register struct db_tree_state	*tsp;
struct db_full_path	*pathp;
union tree		*curtree;
genptr_t		client_data;
@


11.23.2.1
log
@Initial ANSIfication
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.23 2002/08/20 17:07:21 jra Exp $";
d70 4
a73 1
fastf_print(FILE *fp_out, int length, fastf_t f)
d109 2
a110 1
handler(int code)
d116 6
a121 1
Write_euclid_face(const struct loopuse *lu, const int facet_type, const int regionid, const int face_number, FILE *fp_out)
d170 4
a173 1
Write_euclid_region(struct nmgregion *r, struct db_tree_state *tsp, FILE *fp_out)
d429 3
a431 1
main(int argc, char **argv)
d569 5
a573 1
union tree *do_region_end(register struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data)
@


11.22
log
@Converted from K&R to ANSI C - RFH
@
text
@d70 4
a73 1
fastf_print(FILE *fp_out, int length, fastf_t f)
d109 2
a110 1
handler(int code)
d116 6
a121 1
Write_euclid_face(const struct loopuse *lu, const int facet_type, const int regionid, const int face_number, FILE *fp_out)
d170 4
a173 1
Write_euclid_region(struct nmgregion *r, struct db_tree_state *tsp, FILE *fp_out)
d429 3
a431 1
main(int argc, char **argv)
d569 5
a573 1
union tree *do_region_end(register struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data)
@


11.21
log
@Compiler warning patches
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.20 2001/05/17 20:03:14 morrison Exp $";
d70 1
a70 4
fastf_print( fp_out, length, f )
FILE *fp_out;
int length;
fastf_t f;
d106 1
a106 2
handler( code)
int code;
d112 1
a112 6
Write_euclid_face( lu , facet_type , regionid , face_number , fp_out )
const struct loopuse *lu;
const int facet_type;
const int regionid;
const int face_number;
FILE *fp_out;
d161 1
a161 4
Write_euclid_region( r , tsp , fp_out )
struct nmgregion *r;
struct db_tree_state *tsp;
FILE *fp_out;
d417 1
a417 3
main(argc, argv)
int	argc;
char	*argv[];
d555 1
a555 5
union tree *do_region_end(tsp, pathp, curtree, client_data)
register struct db_tree_state	*tsp;
struct db_full_path	*pathp;
union tree		*curtree;
genptr_t		client_data;
@


11.20
log
@rt_g.debug -> RT_G_DEBUG
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.19 2001/04/05 19:34:59 morrison Exp $";
d490 1
a490 1
			sscanf( optarg, "%x", &rt_g.debug );
d493 1
a493 1
			sscanf( optarg, "%x", &rt_g.NMG_debug );
@


11.19
log
@updated SIGNED to signed
updated CONST to const
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.18 2000/10/31 22:35:11 mike Exp $";
d590 1
a590 1
	if (rt_g.debug&DEBUG_TREEWALK || verbose) {
@


11.18
log
@
compiler lint
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.17 2000/09/08 05:55:42 mike Exp $";
d117 4
a120 4
CONST struct loopuse *lu;
CONST int facet_type;
CONST int regionid;
CONST int face_number;
d526 1
a526 1
	(void)db_walk_tree(dbip, argc-optind, (CONST char **)(&argv[optind]),
@


11.17
log
@
Tree routines now need resource structure.
Added rt_init_resource() call.
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.16 2000/08/24 03:17:53 mike Exp $";
d176 1
a176 1
	struct facets *faces;
d269 1
a269 1
				struct loopuse *outer_lu;
@


11.16
log
@
lint
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.15 2000/07/21 12:44:34 jra Exp $";
d463 2
d630 1
a630 1
		db_free_tree(curtree);		/* Does an nmg_kr() */
d660 1
a660 1
	ret_tree = nmg_booltree_evaluate(curtree, tsp->ts_tol);	/* librt/nmg_bool.c */
d724 1
a724 1
	db_free_tree(curtree);		/* Does an nmg_kr() */
@


11.15
log
@Replaced db_scan() calls with db_dirbuild()
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.14 2000/07/10 23:53:57 mike Exp $";
d550 1
a550 1
	bn_vlist_cleanup();
d630 1
a630 1
		bn_vlist_cleanup();
d713 1
a713 1
		bn_vlist_cleanup();
@


11.14
log
@
lint
@
text
@d19 1
a19 1
static const char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.13 2000/03/29 18:15:15 mike Exp $";
d513 1
a513 1
	db_scan(dbip, (int (*)())db_diradd, 1, NULL);
@


11.13
log
@
Eliminated macro which also appears in vmath.h now
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.12 2000/03/29 18:07:44 mike Exp $";
@


11.12
log
@
Removed stray RT_EXTERNs, added bn_ prefix.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.11 2000/01/04 17:58:19 bparker Exp $";
a67 5

#define V3RPP1_IN_RPP2( _lo1 , _hi1 , _lo2 , _hi2 )	( \
	(_lo1)[X] >= (_lo2)[X] && (_hi1)[X] <= (_hi2)[X] && \
	(_lo1)[Y] >= (_lo2)[Y] && (_hi1)[Y] <= (_hi2)[Y] && \
	(_lo1)[Z] >= (_lo2)[Z] && (_hi1)[Z] <= (_hi2)[Z] )
@


11.11
log
@*- add client_data to db_walk_tree
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.10 1999/12/30 18:34:42 jra Exp $";
d41 1
a41 2
RT_EXTERN(union tree *do_region_end, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree, genptr_t client_data));
RT_EXTERN( struct face *nmg_find_top_face , (struct shell *s , long *flags ));
@


11.10
log
@Eliminated an unused variable
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.9 1999/12/29 23:23:00 mike Exp $";
d41 1
a41 1
RT_EXTERN(union tree *do_region_end, (struct db_tree_state *tsp, struct db_full_path *pathp, union tree *curtree));
d535 2
a536 1
		nmg_booltree_leaf_tess);	/* in librt/nmg_bool.c */
d573 1
a573 1
union tree *do_region_end(tsp, pathp, curtree)
d577 1
@


11.9
log
@
db_scan() got a client_data argument, which
db_diradd() needed to learn to ignore.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.8 1999/06/03 21:54:20 mike Exp $";
d48 1
a48 1
static int	ncpu = 1;		/* Number of processors */
d490 1
a490 1
			ncpu = atoi( optarg );
@


11.8
log
@
sed4
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /c/CVS/brlcad/conv/g-euclid1.c,v 11.7 1996/08/02 12:46:58 jra Exp $";
d519 1
a519 1
	db_scan(dbip, (int (*)())db_diradd, 1);
@


11.7
log
@Corrected handling of tessellation tolerances options.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 11.6 1995/04/03 19:48:38 jra Exp jra $";
d53 1
a53 1
static struct rt_tol		tol;
d106 1
a106 1
		rt_log( "Value (%f) too large for format length (%d)\n" , f, length );
d137 1
a137 1
		rt_log( "Write_euclid_face: lu=x%x, facet_type=%d, regionid=%d, face_number=%d\n",
d140 1
a140 1
	if( RT_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
d146 1
a146 1
	for( RT_LIST_FOR( eu , edgeuse , &lu->down_hd ) )
d152 1
a152 1
	for( RT_LIST_FOR( eu , edgeuse , &lu->down_hd ) )
d188 1
a188 1
		rt_log( "Write_euclid_region: r=x%x\n" , r );
d201 1
a201 1
			rt_log( "g-euclid: Coordinates too large (%g) for Euclid format\n" , r->ra_p->min_pt[i] );
d206 1
a206 1
			rt_log( "g-euclid: Coordinates too large (%g) for Euclid format\n" , r->ra_p->max_pt[i] );
d212 1
a212 1
	for( RT_LIST_FOR( s , shell , &r->s_hd ) )
d216 1
a216 1
		for( RT_LIST_FOR( fu , faceuse , &s->fu_hd ) )
d226 1
a226 1
			for( RT_LIST_FOR( lu , loopuse , &fu->lu_hd ) )
d228 1
a228 1
				if( RT_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
d237 1
a237 1
			faces = (struct facets *)rt_calloc( no_of_loops , sizeof( struct facets ) , "g-euclid: faces" );
d240 1
a240 1
			for( RT_LIST_FOR( lu , loopuse , &fu->lu_hd ) )
d242 1
a242 1
				if( RT_LIST_FIRST_MAGIC(&lu->down_hd) != NMG_EDGEUSE_MAGIC )
d357 1
a357 1
						rt_log( "Failed to find outer loop for hole in component %d\n" , tsp->ts_regionid );
d384 1
a384 1
						rt_log( "Failed to find outer loop for hole in component %d\n" , tsp->ts_regionid );
d418 1
a418 1
			rt_free( (char *)faces , "g-euclid: faces" );
d427 1
a427 1
		rt_free( (char *)faces , "g-euclid: faces" );
d455 1
a455 1
	tol.magic = RT_TOL_MAGIC;
d467 1
a467 1
	RT_LIST_INIT( &rt_g.rtg_vlfree );	/* for vlist macros */
d515 1
a515 1
		rt_log( "Cannot open %s\n" , argv[optind] );
d540 1
a540 1
	rt_prmem("After conversions");
d555 1
a555 1
	rt_vlist_cleanup();
d559 1
a559 1
	rt_prmem("After complete G-EUCLID conversion");
d579 1
a579 1
	struct rt_list		vhead;
d584 1
a584 1
		rt_log( "do_region_end: regionid = %d\n" , tsp->ts_regionid );
d587 1
a587 1
	RT_CK_TOL(tsp->ts_tol);
d590 1
a590 1
	RT_LIST_INIT(&vhead);
d594 1
a594 1
		rt_log("\ndo_region_end(%d %d%%) %s\n",
d598 1
a598 1
		rt_free(sofar, "path string");
d607 1
a607 1
		rt_log(" Cannot open file %s\n" , dir->d_namep );
d612 1
a612 1
	rt_log( "\n\nProcessing region %s:\n" , dir->d_namep );
d616 1
a616 1
	if( RT_SETJUMP )
d619 1
a619 1
		RT_UNSETJUMP;		/* Relinquish the protection */
d634 1
a634 1
		rt_vlist_cleanup();
d640 1
a640 1
			rt_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
d646 1
a646 1
		rt_prmem("After Failure:");
d650 1
a650 1
		rt_log( "FAILED: %s\n" , dir->d_namep );
d655 1
a655 1
		rt_log( "\tEvaluating region\n" );
d671 1
a671 1
	RT_UNSETJUMP;		/* Relinquish the protection */
d680 2
a681 2
		s = RT_LIST_FIRST( shell, &r->s_hd );
		while( RT_LIST_NOT_HEAD( &s->l, &r->s_hd ) )
d685 1
a685 1
			next_s = RT_LIST_PNEXT( shell, &s->l );
d707 1
a707 1
		rt_log( "Wrote region %s\n" , dir->d_namep );
d712 1
a712 1
			rt_log("WARNING: tsp->ts_m pointer corrupted, ignoring it.\n");
d717 1
a717 1
		rt_vlist_cleanup();
d729 1
a729 1
	rt_prmem("After Success:");
d737 1
a737 1
	GETUNION(curtree, tree);
@


11.6
log
@Added calls to nmg_kill_cracks() and nmg_kill_zero_length_edgeuses().
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 11.5 1995/02/22 05:40:55 mike Exp jra $";
d477 1
d481 1
@


11.5
log
@nmg_model_fuse() is still accounting for 25% of the runtime.  In order
to correct this, it is necessary for me to make calling nmg_model_fuse()
a pre-condition of calling nmg_booltree_evaluate().  That way it's done
exactly once per region.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /n/wolf/m/cad/conv/RCS/g-euclid1.c,v 11.4 1995/02/22 05:38:26 mike Exp mike $";
d673 28
d702 2
a703 1
		Write_euclid_region( r , tsp , fp_out );
@


11.4
log
@JRA change to do ret_tree thing
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 11.3 1995/01/27 15:05:04 jra Exp jra $";
d659 1
@


11.3
log
@Made alarm time a command line parameter.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 11.2 95/01/24 10:10:39 jra Exp Locker: jra $";
d579 1
d659 6
a664 1
	r = nmg_booltree_evaluate(curtree, tsp->ts_tol);	/* librt/nmg_bool.c */
@


11.2
log
@Added missing "curtree->magic = RT_TREE_MAGIC;" and modified output technique
for vertex coordinates.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 11.1 95/01/04 09:59:33 mike Rel4_4 Locker: jra $";
d44 1
a44 1
static char	usage[] = "Usage: %s [-v] [-xX lvl] [-a abs_tol] [-r rel_tol] [-n norm_tol] brlcad_db.g object(s)\n";
d50 1
d472 3
d656 1
a656 1
	(void)alarm( 600 );
@


11.1
log
@Release_4.4
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 1.10 94/12/16 16:32:44 jra Exp $";
d75 39
d154 1
d159 6
a164 1
		fprintf( fp_out , "%10d%8f%8f%8f" , ++vertex_count , V3ARGS( v->vg_p->coord ) );
d696 1
@


1.10
log
@removed setjmp.h
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 1.9 94/12/08 17:56:24 jra Exp Locker: jra $";
@


1.9
log
@Mod for CRAY2.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /n/wolf/m/cad/conv/RCS/g-euclid1.c,v 1.8 94/11/08 16:15:04 jra Exp Locker: jra $";
a31 2

#include <setjmp.h>
@


1.8
log
@Mods for Irix 6.0
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /n/wolf/m/cad/conv/RCS/g-euclid1.c,v 1.7 1994/10/17 16:59:11 mike Exp jra $";
d33 2
d566 1
a566 1
	if( ncpu == 1 && RT_SETJUMP )
@


1.7
log
@Eliminated Solaris beef about signal handler.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 1.6 94/08/11 00:05:53 gdurf Exp Locker: mike $";
a30 3
#ifdef HAVE_UNISTD_H
#include <unistd.h>	/* XXX Don't really need this, included in externs.h */
#endif
a31 1
#include <setjmp.h>
d44 1
a44 1
static char	usage[] = "Usage: %s [-v] [-d] [-xX lvl] [-a abs_tol] [-r rel_tol] [-n norm_tol] brlcad_db.g object(s)\n";
a47 1
static int	debug_plots;		/* Make debugging plots */
a172 1
			int face_type=0;
a392 2
	char		*dot;
	int		i,j,ret;
d424 1
a424 1
	while ((c = getopt(argc, argv, "a:dn:r:s:vx:P:X:")) != EOF) {
a428 3
		case 'd':
			debug_plots = 1;
			break;
d479 1
a479 1
	ret = db_walk_tree(dbip, argc-optind, (CONST char **)(&argv[optind]),
@


1.6
log
@Factored ifdefs
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 1.5 1994/04/20 15:58:41 jra Exp gdurf $";
d80 1
a80 2
handler( sig, code, sc)
int sig;
a81 1
struct sigcontext *sc;
@


1.5
log
@minor formatting change for more precision
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 1.4 94/04/15 16:30:35 jra Exp $";
d22 2
a23 3
#include <unistd.h>
#include <signal.h>
#include <setjmp.h>
d26 1
d28 9
d406 1
a406 12
#ifdef BSD
	setlinebuf( stderr );
#else
#	if defined( SYSV ) && !defined( sgi ) && !defined(CRAY2) && \
	 !defined(n16)
		(void) setvbuf( stderr, (char *) NULL, _IOLBF, BUFSIZ );
#	endif
#	if defined(sgi) && defined(mips)
		if( setlinebuf( stderr ) != 0 )
			perror("setlinebuf(stderr)");
#	endif
#endif
@


1.4
log
@Cut alarm time down to 10 minutes
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 1.3 94/03/24 13:15:20 jra Exp Locker: jra $";
d117 1
a117 1
		fprintf( fp_out , "%10d%8.1f%8.1f%8.1f" , ++vertex_count , V3ARGS( v->vg_p->coord ) );
@


1.3
log
@Added 20 minute alarm
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 1.2 94/03/19 21:28:31 jra Exp $";
d23 2
d70 9
a544 1
	char			file_name[25];
d584 2
d620 1
a620 1
	(void)alarm( 1200 );
d622 2
d635 1
a635 1
		rt_log( "Wrote region %s to file %s\n" , dir->d_namep , file_name );
@


1.2
log
@Added code to log region names and status.
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid1.c,v 1.1 94/03/19 20:52:17 jra Exp Locker: jra $";
d22 1
d493 1
a493 1
	rt_prmem("After conversion of id");
d558 1
a558 2
	sprintf( file_name , "%05d.%s" , tsp->ts_regionid , dir->d_namep );
	if( (fp_out = fopen( file_name , "w" )) == NULL )
d560 1
a560 1
		rt_log(" Cannot open file %s\n" , file_name );
d585 2
d596 5
d607 3
d611 3
d623 9
a631 1
		nmg_kr( r );
d641 4
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char RCSid[] = "$Header: /m/cad/conv/RCS/g-euclid.c,v 1.4 94/03/18 10:32:23 jra Exp $";
a66 14
static int
select_region( tsp, pathp, curtree )
register struct db_tree_state	*tsp;
struct db_full_path	*pathp;
union tree		*curtree;
{
	struct directory *dir;

	dir = DB_FULL_PATH_CUR_DIR( pathp );
	rt_log( "Processing region %s id = %d\n" , dir->d_namep , tsp->ts_regionid);

	return( 0 );
}

d130 2
d472 1
a473 3
	/* Process regions */
	face_count = 0;

d485 1
a485 1
		select_region,
d565 2
d593 2
d607 2
@
