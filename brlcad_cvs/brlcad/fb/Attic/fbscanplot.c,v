head	11.10;
access;
symbols
	ansi-20040405-merged:11.6.2.2
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.7
	postmerge-autoconf:11.7
	autoconf-freeze:11.6.10.2
	premerge-autoconf:11.7
	ansi-20040316-freeze:11.6.2.1
	postmerge-20040315-windows:11.7
	premerge-20040315-windows:11.7
	windows-20040315-freeze:11.6.4.1
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.2
	offsite-5-3-pre:11.3
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:5.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.10
date	2004.05.24.04.13.26;	author morrison;	state dead;
branches;
next	11.9;

11.9
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.8;

11.8
date	2004.04.05.07.49.23;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2004.02.02.17.39.01;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.07.25;	author jra;	state Exp;
branches
	11.6.2.1
	11.6.4.1
	11.6.10.1;
next	11.5;

11.5
date	2002.08.15.20.54.38;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.04.12.17.44.08;	author bparker;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.24.03.58.32;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	97.04.17.04.41.29;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.09.30;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.23.18.49.08;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	94.08.11.15.06.10;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.46.35;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	91.08.30.03.04.15;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	90.11.04.02.17.35;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.09.11;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.41.54;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.02.11.06.43.57;	author stay;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.07.38;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.10.52;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.39.01;	author mike;	state Rel;
branches;
next	4.3;

4.3
date	87.05.30.02.20.52;	author mike;	state Exp;
branches;
next	4.2;

4.2
date	87.02.13.00.42.01;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.13.03;	author mike;	state Rel1;
branches;
next	1.2;

1.2
date	86.11.29.03.47.55;	author phil;	state Exp;
branches;
next	1.1;

1.1
date	86.11.29.01.19.05;	author phil;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.00.42;	author morrison;	state Exp;
branches;
next	11.6.2.2;

11.6.2.2
date	2004.03.17.21.16.08;	author morrison;	state Exp;
branches;
next	;

11.6.4.1
date	2004.03.11.23.40.44;	author morrison;	state Exp;
branches;
next	;

11.6.10.1
date	2004.02.12.19.40.46;	author erikg;	state Exp;
branches;
next	11.6.10.2;

11.6.10.2
date	2004.03.15.13.28.06;	author erikg;	state Exp;
branches;
next	;


desc
@Plot the RGB intensities of a framebuffer scanline
@


11.10
log
@moved to src/fb/
@
text
@/*
 *			F B S C A N P L O T . C
 *
 *  Plot an RGB profile of a framebuffer scanline.
 *
 *  Author -
 *	Phillip Dykstra
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/fb/fbscanplot.c,v 11.9 2004/05/10 15:30:42 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "externs.h"
#include "fb.h"

unsigned char	*scan;		/* Scanline to be examined */
unsigned char	*outline;	/* output line buffer */
unsigned char	*backgnd;	/* copy of line to be overlaid */

int	yline;			/* line to plot */
int	scr_width = 0;		/* framebuffer width */
int	scr_height = 0;		/* framebuffer height */
int	verbose = 0;		/* output scanline values to stdout */
int	fb_overlay = 0;		/* plot on background, else black with grid */
int	cmap_crunch = 0;	/* Plot values after passing through color map */
int	reverse = 0;		/* highlight chosen line by inverting it */
char	*outframebuffer = NULL;
FBIO	*fbp, *fboutp;
ColorMap map;

char usage[] = "\
Usage: fbscanplot [-h] [-v] [-c] [-o] [-r]\n\
	[-W scr_width] [-F outframebuffer] yline\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = getopt( argc, argv, "cvhorW:F:" )) != EOF ) {
		switch( c )  {
		case 'c':
			cmap_crunch++;
			break;
		case 'v':
			verbose++;
			break;
		case 'h':
			scr_width = scr_height = 1024;
			break;
		case 'o':
			fb_overlay++;
			break;
		case 'r':
			reverse++;
			break;
		case 'W':
			scr_width = atoi(optarg);
			break;
		case 'F':
			outframebuffer = optarg;
			break;
		default:		/* '?' */
			return(0);
		}
	}

	if( optind >= argc )
		return(0);
	else
		yline = atoi( argv[optind] );

	if ( argc > ++optind )
		return(0);	/* too many args */

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	register unsigned char *ip, *op;
	register int y;
	int	x;
	int	yoffset;	/* position of plot on screen */

	if ( !get_args( argc, argv ) )  {
		fprintf( stderr, usage );
		exit( 1 );
	}

	if( (fbp = fb_open( NULL, scr_width, scr_height )) == NULL )
		exit( 2 );
	scr_width = fb_getwidth(fbp);
	scr_height = fb_getheight(fbp);

	if( outframebuffer != NULL ) {
		if( (fboutp = fb_open( outframebuffer, scr_width, scr_width )) == NULL )
			exit( 3 );
	} else
		fboutp = fbp;

	/* Allocate the buffers */
	scan = (unsigned char *)malloc( (scr_width+2) * sizeof(RGBpixel) );
	outline = (unsigned char *)malloc( (scr_width+2) * sizeof(RGBpixel) );
	backgnd = (unsigned char *)malloc( (scr_width+2) * sizeof(RGBpixel) );

	/* Read the scanline to be examined */
	if( fb_read( fbp, 0, yline, scan+3, scr_width ) != scr_width )
		exit(4);

	fb_make_linear_cmap(&map);
	if( cmap_crunch )  {
		if( fb_rmap( fbp, &map ) < 0 )
			fprintf(stderr,"fbscanplot: error reading colormap\n");
	}

	/* extend the edges with one duplicate pixel each way */
	scan[0*3+RED] = scan[1*3+RED];
	scan[0*3+GRN] = scan[1*3+GRN];
	scan[0*3+BLU] = scan[1*3+BLU];
	scan[(scr_width+1)*3+RED] = scan[scr_width*3+RED];
	scan[(scr_width+1)*3+GRN] = scan[scr_width*3+GRN];
	scan[(scr_width+1)*3+BLU] = scan[scr_width*3+BLU];

	/* figure out where to put it on the screen */
	if( fb_overlay == 0 && fboutp == fbp && yline < scr_height/2 ) {
		yoffset = scr_height - 256;
		if( yoffset <= yline )
			yoffset = 0;
	} else
		yoffset = 0;

	if( reverse ) {
		/* Output the negative of the chosen line */
		for( x = 0; x < scr_width; x++ ) {
			outline[x*3+RED] = 255 - scan[(x+1)*3+RED];
			outline[x*3+GRN] = 255 - scan[(x+1)*3+GRN];
			outline[x*3+BLU] = 255 - scan[(x+1)*3+BLU];
		}
		fb_write( fbp, 0, yline, outline, scr_width );
	}

	/* The scanplot takes 256 lines, one for each intensity value */
	for( y = 0; y < 256; y++ ) {
		if( fb_overlay )
			fb_read( fboutp, 0, y+yoffset, backgnd, scr_width );

		ip = &scan[1*3+RED];
		op = &outline[0*3+RED];
		for( x = 0; x < scr_width; x++, op += 3, ip += 3 ) {
			if( y > (int)map.cm_red[ip[RED]]>>8 ) {
				op[RED] = 0;
			} else {
				if( y >= (int)map.cm_red[ip[RED-3]]>>8 ||
				    y >= (int)map.cm_red[ip[RED+3]]>>8 ||
				    y == (int)map.cm_red[ip[RED]]>>8 )
					op[RED] = 255;
				else
					op[RED] = 0;
			}

			if( y > (int)map.cm_green[ip[GRN]]>>8 ) {
				op[GRN] = 0;
			} else {
				if( y >= (int)map.cm_green[ip[GRN-3]]>>8 ||
				    y >= (int)map.cm_green[ip[GRN+3]]>>8 ||
				    y == (int)map.cm_green[ip[GRN]]>>8 )
					op[GRN] = 255;
				else
					op[GRN] = 0;
			}

			if( y > (int)map.cm_blue[ip[BLU]]>>8 ) {
				op[BLU] = 0;
			} else {
				if( y >= (int)map.cm_blue[ip[BLU-3]]>>8 ||
				    y >= (int)map.cm_blue[ip[BLU+3]]>>8 ||
				    y == (int)map.cm_blue[ip[BLU]]>>8 )
					op[BLU] = 255;
				else
					op[BLU] = 0;
			}

			if( fb_overlay ) {
				/* background */
				if( op[RED] == 0 && op[GRN] == 0 && op[BLU] == 0 ) {
					op[RED] = backgnd[x*3+RED];
					op[GRN] = backgnd[x*3+GRN];
					op[BLU] = backgnd[x*3+BLU];
				}
			} else {
				/* Grid lines */
				if( (y & 63) == 0 && op[RED] == 0
				 && op[GRN] == 0 && op[BLU] == 0 ) {
				 	op[RED] = 128;
				 	op[GRN] = 128;
				 	op[BLU] = 128;
				} else if( (y & 15) == 0 && op[RED] == 0
				 && op[GRN] == 0 && op[BLU] == 0 ) {
				 	op[RED] = 64;
				 	op[GRN] = 64;
				 	op[BLU] = 64;
				}
			}
		}

		fb_write( fboutp, 0, y+yoffset, outline, scr_width );
	}

	if( verbose ) {
		for( x = 0; x < scr_width; x++ )
			printf( "%3d: %3d %3d %3d\n", x,
			   scan[(x+1)*3+RED], scan[(x+1)*3+GRN], scan[(x+1)*3+BLU] );
	}

	fb_close( fbp );
	if( fboutp != fbp )
		fb_close( fboutp );

	exit( 0 );
}
@


11.9
log
@change conf.h to a wrapped config.h
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/fbscanplot.c,v 11.8 2004/04/05 07:49:23 morrison Exp $ (BRL)";
@


11.8
log
@merge of ansi-6-0-branch into HEAD
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d22 5
a26 1
#include "conf.h"
@


11.7
log
@update copyright to include span through 2003
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbscanplot.c,v 11.6 2002/08/20 17:07:25 jra Exp $ (BRL)";
d49 1
a49 2
get_args( argc, argv )
register char **argv;
d93 1
a93 2
main( argc, argv )
int argc; char **argv;
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1986 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbscanplot.c,v 11.4 2001/04/12 17:44:08 bparker Exp $ (BRL)";
@


11.6.4.1
log
@sync to HEAD...
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/fb/fbscanplot.c,v 11.7 2004/02/02 17:39:01 morrison Exp $ (BRL)";
@


11.6.10.1
log
@merge from HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbscanplot.c,v 11.7 2004/02/02 17:39:01 morrison Exp $ (BRL)";
@


11.6.10.2
log
@merge from head
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbscanplot.c,v 11.6.10.1 2004/02/12 19:40:46 erikg Exp $ (BRL)";
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbscanplot.c,v 11.6 2002/08/20 17:07:25 jra Exp $ (BRL)";
d49 2
a50 1
get_args(int argc, register char **argv)
d94 2
a95 1
main(int argc, char **argv)
@


11.6.2.2
log
@sync branch with HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d19 1
a19 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d49 2
a50 1
get_args(int argc, register char **argv)
d94 2
a95 1
main(int argc, char **argv)
@


11.4
log
@*- get rid of warnings
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbscanplot.c,v 11.3 2000/08/24 03:58:32 mike Exp $ (BRL)";
d49 1
a49 2
get_args( argc, argv )
register char **argv;
d93 1
a93 2
main( argc, argv )
int argc; char **argv;
@


11.3
log
@
const RCSid
@
text
@d19 1
a19 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbscanplot.c,v 11.2 1997/04/17 04:41:29 mike Exp $ (BRL)";
d48 1
d93 1
@


11.2
log
@Added -c option, to "crunch" in the color map before plotting.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbscanplot.c,v 11.1 1995/01/04 10:09:30 mike Rel4_4 mike $ (BRL)";
@


11.1
log
@Release_4.4
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbscanplot.c,v 10.3 94/08/23 18:49:08 gdurf Exp $ (BRL)";
d38 1
d42 1
d45 1
a45 1
Usage: fbscanplot [-h] [-v] [-o] [-r]\n\
d53 1
a53 1
	while ( (c = getopt( argc, argv, "vhorW:F:" )) != EOF ) {
d55 3
d125 6
d165 1
a165 1
			if( y > (int)ip[RED] ) {
d168 3
a170 1
				if( y >= (int)ip[RED-3] || y >= (int)ip[RED+3] || y == ip[RED] )
d176 1
a176 1
			if( y > (int)ip[GRN] ) {
d179 3
a181 1
				if( y >= (int)ip[GRN-3] || y >= (int)ip[GRN+3] || y == ip[GRN] )
d187 1
a187 1
			if( y > (int)ip[BLU] ) {
d190 3
a192 1
				if( y >= (int)ip[BLU-3] || y >= (int)ip[BLU+3] || y == ip[BLU] )
@


10.3
log
@Added includes, factored ifdefs
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbscanplot.c,v 10.2 1994/08/11 15:06:10 mike Exp gdurf $ (BRL)";
@


10.2
log
@Reduced use of RGBpixel
Now use (unsigned char *)
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbscanplot.c,v 10.1 91/10/12 06:46:35 mike Rel4_0 Locker: mike $ (BRL)";
d21 2
@


10.1
log
@Release_4.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbscanplot.c,v 9.3 91/08/30 03:04:15 mike Exp $ (BRL)";
d23 2
d27 3
a29 3
extern int	getopt();
extern char	*optarg;
extern int	optind;
a30 4
RGBpixel	*scan;		/* Scanline to be examined */
RGBpixel	*outline;	/* output line buffer */
RGBpixel	*backgnd;	/* copy of line to be overlaid */

d110 3
a112 3
	scan = (RGBpixel *)malloc( (scr_width+2) * sizeof(RGBpixel) );
	outline = (RGBpixel *)malloc( (scr_width+2) * sizeof(RGBpixel) );
	backgnd = (RGBpixel *)malloc( (scr_width+2) * sizeof(RGBpixel) );
d115 1
a115 1
	if( fb_read( fbp, 0, yline, &scan[1][RED], scr_width ) != scr_width )
d119 6
a124 6
	scan[0][RED] = scan[1][RED];
	scan[0][GRN] = scan[1][GRN];
	scan[0][BLU] = scan[1][BLU];
	scan[scr_width+1][RED] = scan[scr_width][RED];
	scan[scr_width+1][GRN] = scan[scr_width][GRN];
	scan[scr_width+1][BLU] = scan[scr_width][BLU];
d137 3
a139 3
			outline[x][RED] = 255 - scan[x+1][RED];
			outline[x][GRN] = 255 - scan[x+1][GRN];
			outline[x][BLU] = 255 - scan[x+1][BLU];
d149 2
a150 2
		ip = &scan[1][RED];
		op = &outline[0][RED];
d182 3
a184 3
					op[RED] = backgnd[x][RED];
					op[GRN] = backgnd[x][GRN];
					op[BLU] = backgnd[x][BLU];
d208 1
a208 1
			   scan[x+1][RED], scan[x+1][GRN], scan[x+1][BLU] );
@


9.3
log
@Stardent ANSI C
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbscanplot.c,v 9.2 90/11/04 02:17:35 mike Exp $ (BRL)";
@


9.2
log
@Modified to support scanlines of arbitrary width.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/fbscanplot.c,v 9.2 90/11/04 02:14:02 mike Exp $ (BRL)";
d154 1
a154 1
			if( y > ip[RED] ) {
d157 1
a157 1
				if( y >= ip[RED-3] || y >= ip[RED+3] || y == ip[RED] )
d163 1
a163 1
			if( y > ip[GRN] ) {
d166 1
a166 1
				if( y >= ip[GRN-3] || y >= ip[GRN+3] || y == ip[GRN] )
d172 1
a172 1
			if( y > ip[BLU] ) {
d175 1
a175 1
				if( y >= ip[BLU-3] || y >= ip[BLU+3] || y == ip[BLU] )
@


9.1
log
@Release_3.5
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 8.1 88/10/05 00:41:54 mike Rel3_0 $ (BRL)";
a24 3
RGBpixel scan[1024+2];
RGBpixel outline[1024], backgnd[1024];

d29 3
a31 7
int yline;		/* line to plot */
int width = 0;		/* framebuffer width */
int verbose = 0;	/* output scanline values to stdout */
int fb_overlay = 0;	/* plot on background, else black with grid */
int reverse = 0;	/* highlight chosen line by inverting it */
char *outframebuffer = NULL;
FBIO *fbp, *fboutp;
d33 9
d57 1
a57 1
			width = 1024;
d66 1
a66 1
			width = atoi(optarg);
d100 1
a100 1
	if( (fbp = fb_open( NULL, width, width )) == NULL )
d102 2
d106 1
a106 1
		if( (fboutp = fb_open( outframebuffer, width, width )) == NULL )
d111 4
a114 2
	width = fb_getwidth(fbp);
	fb_read( fbp, 0, yline, &scan[1][RED], width );
d116 5
a120 1
	/* extend the edges */
d124 3
a126 3
	scan[width+1][RED] = scan[width][RED];
	scan[width+1][GRN] = scan[width][GRN];
	scan[width+1][BLU] = scan[width][BLU];
d129 2
a130 2
	if( fb_overlay == 0 && fboutp == fbp && yline < fb_getheight(fbp)/2 ) {
		yoffset = fb_getheight(fbp) - 256;
d138 1
a138 1
		for( x = 0; x < width; x++ ) {
d143 1
a143 1
		fb_write( fbp, 0, yline, outline, width );
d146 1
d149 1
a149 1
			fb_read( fboutp, 0, y+yoffset, backgnd, width );
d153 1
a153 1
		for( x = 0; x < width; x++, op += 3, ip += 3 ) {
d204 1
a204 1
		fb_write( fboutp, 0, y+yoffset, outline, width );
d208 1
a208 1
		for( x = 0; x < width; x++ )
@


8.1
log
@Release_3.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 7.2 88/02/11 06:43:57 stay Exp $ (BRL)";
@


7.2
log
@Changed overlay to fb_overlay to avoid SGI library routine
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 7.1 87/11/03 00:07:38 stay Locked $ (BRL)";
@


7.1
log
@Release 2.3
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 6.1 87/07/11 08:10:52 mike Rel $ (BRL)";
d35 1
a35 1
int overlay = 0;	/* plot on background, else black with grid */
d58 1
a58 1
			overlay++;
d119 1
a119 1
	if( overlay == 0 && fboutp == fbp && yline < fb_getheight(fbp)/2 ) {
d137 1
a137 1
		if( overlay )
d170 1
a170 1
			if( overlay ) {
@


6.1
log
@Release 2.0
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 5.1 87/06/24 22:39:01 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 4.3 87/05/30 02:20:52 mike Exp $ (BRL)";
@


4.3
log
@Fixed selection of top/bottom positioning for the plot.
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 4.2 87/02/13 00:42:01 mike Locked $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 4.1 86/12/29 03:13:03 mike Rel1 $ (BRL)";
d119 1
a119 1
	if( overlay == 0 && fboutp == fbp && yline < 256 ) {
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 1.2 86/11/29 03:47:55 phil Exp $ (BRL)";
@


1.2
log
@added alternate output framebuffer
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header: fbscanplot.c,v 1.1 86/11/29 01:19:05 phil Locked $ (BRL)";
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d37 2
a38 1
FBIO *fbp;
d41 2
a42 1
Usage: fbscanplot [-h] [-v] [-o] [-r] [-W scr_width] yline\n";
d49 1
a49 1
	while ( (c = getopt( argc, argv, "vhorW" )) != EOF ) {
d66 3
d101 6
d119 1
a119 1
	if( overlay == 0 && yline < 256 )
d121 3
a123 1
	else
d138 1
a138 1
			fb_read( fbp, 0, y+yoffset, backgnd, width );
d193 1
a193 1
		fb_write( fbp, 0, y+yoffset, outline, width );
d201 6
@
