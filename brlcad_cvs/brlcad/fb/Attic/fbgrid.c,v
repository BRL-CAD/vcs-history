head	11.9;
access;
symbols
	ansi-20040405-merged:11.5.2.2
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.5.10.2
	premerge-autoconf:11.6
	ansi-20040316-freeze:11.5.2.1
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.5.4.1
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.2
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:5.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.24.04.13.26;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.07.49.23;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2004.02.02.17.39.01;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.07.25;	author jra;	state Exp;
branches
	11.5.2.1
	11.5.4.1
	11.5.10.1;
next	11.4;

11.4
date	2002.08.15.20.54.38;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	2001.04.12.17.44.07;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.24.03.58.30;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.09.23;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.11.19.24.07;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	94.08.11.15.06.07;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.46.28;	author mike;	state Rel4_0;
branches;
next	9.2;

9.2
date	89.10.12.18.03.20;	author phil;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.08.56;	author mike;	state Rel3_5;
branches;
next	8.3;

8.3
date	89.03.07.00.34.46;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	89.03.02.21.16.14;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.41.39;	author mike;	state Rel3_0;
branches;
next	7.4;

7.4
date	88.08.11.03.56.13;	author mike;	state Exp;
branches;
next	7.3;

7.3
date	88.06.21.23.47.25;	author reschly;	state Exp;
branches;
next	7.2;

7.2
date	88.05.16.00.06.37;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.07.25;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.10.37;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.38.41;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.13.00.41.36;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.12.57;	author mike;	state Rel1;
branches;
next	1.16;

1.16
date	86.11.28.19.04.14;	author mike;	state Exp;
branches;
next	1.15;

1.15
date	86.11.21.04.39.34;	author phil;	state Exp;
branches;
next	1.14;

1.14
date	86.11.15.02.15.42;	author phil;	state Exp;
branches;
next	1.13;

1.13
date	86.10.30.01.02.49;	author phil;	state Exp;
branches;
next	1.12;

1.12
date	86.10.25.10.34.10;	author phil;	state Exp;
branches;
next	1.11;

1.11
date	86.10.06.21.08.10;	author mike;	state Exp;
branches;
next	1.10;

1.10
date	86.10.03.19.23.36;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	86.10.03.05.57.40;	author phil;	state Exp;
branches;
next	1.8;

1.8
date	86.08.13.05.21.42;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	86.08.13.03.14.26;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	86.08.13.03.14.19;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	86.08.13.03.14.14;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	86.08.13.03.14.07;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.08.13.03.13.56;	author mike;	state Exp;
branches;
next	;

11.5.2.1
date	2002.09.19.18.00.41;	author morrison;	state Exp;
branches;
next	11.5.2.2;

11.5.2.2
date	2004.03.17.21.16.07;	author morrison;	state Exp;
branches;
next	;

11.5.4.1
date	2004.03.11.23.40.41;	author morrison;	state Exp;
branches;
next	;

11.5.10.1
date	2004.02.12.19.40.45;	author erikg;	state Exp;
branches;
next	11.5.10.2;

11.5.10.2
date	2004.03.15.13.28.06;	author erikg;	state Exp;
branches;
next	;


desc
@@


11.9
log
@moved to src/fb/
@
text
@/*
 *			F B G R I D . C
 *
 *  Author -
 *	Phillip Dykstra
 *  	Includes the old fbgrid code by:
 *	Michael John Muuss
 *	Gary S. Moss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/fb/fbgrid.c,v 11.8 2004/05/10 15:30:42 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "externs.h"
#include "fb.h"

static unsigned char	*white_line, *grey_line, *dark_line;
static FBIO	*fbp;
static char	*framebuffer = NULL;

#define OLD	0
#define	BINARY	1
#define	DECIMAL 2

static int	fbwidth = 0;
static int	fbheight = 0;
static int	flavor = DECIMAL;
static int	clear = 0;

void		grid(FBIO *fbp, unsigned char *line, int spacing), oldflavor(void);

static char usage[] = "\
Usage: fbgrid [-h -c] [-b | -d | -o] [-F framebuffer]\n\
	[-S squaresize] [-W width] [-N height]\n";

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = getopt( argc, argv, "hcbdoF:s:w:n:S:W:N:" )) != EOF )  {
		switch( c )  {
		case 'h':
			/* high-res */
			fbheight = fbwidth = 1024;
			break;
		case 'c':
			clear = 1;
			break;
		case 'b':
			flavor = BINARY;
			break;
		case 'd':
			flavor = DECIMAL;
			break;
		case 'o':
			flavor = OLD;
			break;
		case 'F':
			framebuffer = optarg;
			break;
		case 'S':
		case 's':
			/* square size */
			fbheight = fbwidth = atoi(optarg);
			break;
		case 'W':
		case 'w':
			fbwidth = atoi(optarg);
			break;
		case 'N':
		case 'n':
			fbheight = atoi(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if ( argc > ++optind )
		(void)fprintf( stderr, "fbgrid: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	int	i;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	if( flavor == OLD )
		oldflavor();	/* exits */

	if( (fbp = fb_open( framebuffer, fbwidth, fbheight )) == NULL )
		exit( 2 );

	fbwidth = fb_getwidth( fbp );
	fbheight = fb_getheight( fbp );

	/* Initialize the color lines */
	white_line = (unsigned char *)malloc( fbwidth * sizeof(RGBpixel) );
	grey_line  = (unsigned char *)malloc( fbwidth * sizeof(RGBpixel) );
	dark_line  = (unsigned char *)malloc( fbwidth * sizeof(RGBpixel) );
	for( i = 0; i < fbwidth; i++ ) {
		white_line[3*i+RED] = white_line[3*i+GRN] = white_line[3*i+BLU] = 255;
		grey_line[3*i+RED] = grey_line[3*i+GRN] = grey_line[3*i+BLU] = 128;
		dark_line[3*i+RED] = dark_line[3*i+GRN] = dark_line[3*i+BLU] = 64;
	}

	if( clear )
		fb_clear( fbp, PIXEL_NULL );

	if( flavor == BINARY ) {
		/* Dark lines every 8 */
		grid( fbp, dark_line, 8 );
		/* Grey lines every 64 */
		grid( fbp, grey_line, 64 );
		/* White line every 128 */
		grid( fbp, white_line, 128 );
	} else { /* DECIMAL */
		/* Dark lines every 10 */
		grid( fbp, dark_line, 10 );
		/* Grey lines every 50 */
		grid( fbp, grey_line, 50 );
		/* White line every 100 */
		grid( fbp, white_line, 100 );
	}

	fb_close( fbp );
	return(0);
}

void
grid(FBIO *fbp, unsigned char *line, int spacing)
{
	int	x, y;

	for( y = 0; y < fbheight; y += spacing )
		fb_write( fbp, 0, y, line, fbwidth );
	for( x = 0; x < fbwidth; x += spacing ) {
		fb_writerect( fbp, x, 0, 1, fbheight, line );
	}
}

void
oldflavor(void)
{
	register FBIO	*fbp;
	register int	x, y;
	register int	middle;
	register int	mask;
	register int	fb_sz;
	static RGBpixel	black, white, red;

	if( (fbp = fb_open( NULL, fbwidth, fbheight )) == NULL ) {
		exit( 1 );
	}

	fb_sz = fb_getwidth(fbp);
	white[RED] = white[GRN] = white[BLU] = 255;
	black[RED] = black[GRN] = black[BLU] = 0;
	red[RED] = 255;
	middle = fb_sz/2;
	fb_ioinit(fbp);
	if( fb_sz <= 512 )
		mask = 0x7;
	else
		mask = 0xf;

	for( y = fb_sz-1; y >= 0; y-- )  {
		for( x = 0; x < fb_sz; x++ ) {
			if( x == y || x == fb_sz - y ) {
				FB_WPIXEL( fbp, white );
			} else
			if( x == middle || y == middle ) {
				FB_WPIXEL( fbp, red );
			} else
			if( (x & mask) && (y & mask) ) {
				FB_WPIXEL( fbp, black );
			} else {
				FB_WPIXEL( fbp, white );
			}
		}
	}
	fb_close( fbp );
	exit( 0 );
}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/fbgrid.c,v 11.7 2004/04/05 07:49:23 morrison Exp $ (BRL)";
@


11.7
log
@merge of ansi-6-0-branch into HEAD
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d23 5
a27 1
#include "conf.h"
@


11.6
log
@update copyright to include span through 2003
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbgrid.c,v 11.5 2002/08/20 17:07:25 jra Exp $ (BRL)";
d43 1
a43 1
void		grid(), oldflavor();
d50 1
a50 2
get_args( argc, argv )
register char **argv;
d101 1
a101 2
main( argc, argv )
int argc; char **argv;
d153 1
a153 4
grid( fbp, line, spacing )
FBIO *fbp;
unsigned char line[];
int	spacing;
d165 1
a165 1
oldflavor()
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbgrid.c,v 11.3 2001/04/12 17:44:07 bparker Exp $ (BRL)";
@


11.5.4.1
log
@sync to HEAD...
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/fb/fbgrid.c,v 11.6 2004/02/02 17:39:01 morrison Exp $ (BRL)";
@


11.5.10.1
log
@merge from HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbgrid.c,v 11.6 2004/02/02 17:39:01 morrison Exp $ (BRL)";
@


11.5.10.2
log
@merge from head
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbgrid.c,v 11.5.10.1 2004/02/12 19:40:45 erikg Exp $ (BRL)";
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbgrid.c,v 11.5 2002/08/20 17:07:25 jra Exp $ (BRL)";
d43 1
a43 1
void		grid(FBIO *fbp, unsigned char *line, int spacing), oldflavor(void);
d50 2
a51 1
get_args(int argc, register char **argv)
d102 2
a103 1
main(int argc, char **argv)
d155 4
a158 1
grid(FBIO *fbp, unsigned char *line, int spacing)
d170 1
a170 1
oldflavor(void)
@


11.5.2.2
log
@sync branch with HEAD
@
text
@d16 1
a16 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d20 1
a20 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d43 1
a43 1
void		grid(FBIO *fbp, unsigned char *line, int spacing), oldflavor(void);
d50 2
a51 1
get_args(int argc, register char **argv)
d102 2
a103 1
main(int argc, char **argv)
d155 4
a158 1
grid(FBIO *fbp, unsigned char *line, int spacing)
d170 1
a170 1
oldflavor(void)
@


11.3
log
@*- get rid of warnings
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbgrid.c,v 11.2 2000/08/24 03:58:30 mike Exp $ (BRL)";
d43 1
a43 1
void		grid(), oldflavor();
d50 1
a50 2
get_args( argc, argv )
register char **argv;
d101 1
a101 2
main( argc, argv )
int argc; char **argv;
d153 1
a153 4
grid( fbp, line, spacing )
FBIO *fbp;
unsigned char line[];
int	spacing;
d165 1
a165 1
oldflavor()
@


11.2
log
@
const RCSid
@
text
@d20 1
a20 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbgrid.c,v 11.1 1995/01/04 10:09:23 mike Rel4_4 $ (BRL)";
d49 1
d101 1
d151 1
@


11.1
log
@Release_4.4
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbgrid.c,v 10.3 94/08/11 19:24:07 gdurf Exp $ (BRL)";
@


10.3
log
@Added include of conf.h
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbgrid.c,v 10.2 1994/08/11 15:06:07 mike Exp gdurf $ (BRL)";
@


10.2
log
@Reduced use of RGBpixel
Now use (unsigned char *)
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbgrid.c,v 10.1 91/10/12 06:46:28 mike Rel4_0 Locker: mike $ (BRL)";
d22 2
@


10.1
log
@Release_4.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbgrid.c,v 9.2 89/10/12 18:03:20 phil Exp $ (BRL)";
d24 2
d28 1
a28 6
extern int	getopt();
extern char	*optarg;
extern int	optind;
extern char	*malloc();

static RGBpixel	*white_line, *grey_line, *dark_line;
d118 3
a120 3
	white_line = (RGBpixel *)malloc( fbwidth * sizeof(RGBpixel) );
	grey_line  = (RGBpixel *)malloc( fbwidth * sizeof(RGBpixel) );
	dark_line  = (RGBpixel *)malloc( fbwidth * sizeof(RGBpixel) );
d122 3
a124 3
		white_line[i][RED] = white_line[i][GRN] = white_line[i][BLU] = 255;
		grey_line[i][RED] = grey_line[i][GRN] = grey_line[i][BLU] = 128;
		dark_line[i][RED] = dark_line[i][GRN] = dark_line[i][BLU] = 64;
d152 1
a152 1
RGBpixel line[];
a159 4
#if 0
		for( y = 0; y < fbheight; y++ )
			fb_write( fbp, x, y, line[0], 1 );
#else
a160 1
#endif
@


9.2
log
@It was ignoring its -F framebuffer argument!
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 9.1 89/05/19 06:08:56 phil Locked $ (BRL)";
@


9.1
log
@Release_3.5
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 8.3 89/03/07 00:34:46 mike Exp $ (BRL)";
d114 1
a114 1
	if( (fbp = fb_open( NULL, fbwidth, fbheight )) == NULL )
@


8.3
log
@Corrected fb_writerect
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 8.2 89/03/02 21:16:14 mike Locked $ (BRL)";
@


8.2
log
@Switched to fb_writerect
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 8.1 88/10/05 00:41:39 mike Locked $ (BRL)";
d167 1
a167 1
		fb_writerect( fbp, x, 0, x, fbheight-1, line );
@


8.1
log
@Release_3.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 7.4 88/08/11 03:56:13 mike Exp $ (BRL)";
d163 1
d166 3
@


7.4
log
@Changed default screen sizes to 0,0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 7.3 88/06/21 23:47:25 mike Locked $ (BRL)";
@


7.3
log
@Added getopt code for -s, -w, -n, -F, etc., and malloc'd line buffers.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 7.2 88/05/16 00:06:37 reschly Locked $ (BRL)";
d39 2
a40 2
static int	fbwidth = 512;
static int	fbheight = 512;
@


7.2
log
@lint fixes
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 7.1 87/11/03 00:07:25 mike Locked $ (BRL)";
d26 4
a29 2
static RGBpixel	white_line[1024], grey_line[1024], dark_line[1024];
static FBIO *fbp;
d31 4
d47 2
a48 1
Usage: fbgrid [-h -c] [-b | -d | -o]\n";
d50 51
d106 2
a107 2
	if( ! parse_argv( argc, argv ) ) {
		(void) fprintf( stderr, usage );
a118 1
	if( fbwidth > 1024 ) fbwidth = 1024;	/* XXX */
d120 4
a209 36
}

/*
 *	P A R S E _ A R G V
 */
int
parse_argv( argc, argv )
register char	**argv;
{
	register int	c;
	extern int	optind;

	while( (c = getopt( argc, argv, "hcbdo" )) != EOF ) {
		switch( c ) {
		case 'h':
			/* High resolution frame buffer */
			fbheight = fbwidth = 1024;
			break;
		case 'c':
			clear++;
			break;
		case 'b':
			flavor = BINARY;
			break;
		case 'd':
			flavor = DECIMAL;
			break;
		case 'o':
			flavor = OLD;
			break;
		case '?':
		default:
			return	0;
		}
	}
	return	1;
@


7.1
log
@Release 2.3
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 6.1 87/07/11 08:10:37 mike Rel $ (BRL)";
d38 2
d91 1
d107 1
@


6.1
log
@Release 2.0
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 5.1 87/06/24 22:38:41 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 4.2 87/02/13 00:41:36 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 4.1 86/12/29 03:12:57 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 1.16 86/11/28 19:04:14 mike Exp $ (BRL)";
@


1.16
log
@Made variables static, to prevent conflicts with frame buffer
libraries (like "clear" in SGI library).
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 1.15 86/11/21 04:39:34 mike Locked $ (BRL)";
@


1.15
log
@changed default to DECIMAL
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 1.14 86/11/15 02:15:42 phil Locked $ (BRL)";
d26 2
a27 2
RGBpixel white_line[1024], grey_line[1024], dark_line[1024];
FBIO *fbp;
d33 4
a36 4
int	fbwidth = 512;
int	fbheight = 512;
int	flavor = DECIMAL;
int	clear = 0;
d38 1
a38 1
char usage[] = "\
@


1.14
log
@An entirely new version.
@
text
@d20 1
a20 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d35 1
a35 1
int	flavor = BINARY;
@


1.13
log
@Converted to use FB_WPIXEL macro.
@
text
@d2 1
a2 1
 *			F B G R I D
d4 3
a6 4
 *  This program displays a grid pattern on a framebuffer.
 *  Useful for convergance alignment, etc.
 *
 *  Authors -
d20 1
a20 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 1.12 86/10/25 10:34:10 phil Locked $ (BRL)";
d26 2
a27 1
int	fbsize = 512;
d29 12
d42 64
a105 3
int	argc;
char	**argv;
	{
a111 1
	static int	val;
d113 4
a116 9
	if( ! pars_Argv( argc, argv ) )
		{
		(void) fprintf( stderr, "Usage : fbgrid	[-h]\n" );
		return	1;
		}
	if( (fbp = fb_open( NULL, fbsize, fbsize )) == NULL )
		{
		return	1;
		}
d144 2
a145 2
	return	0;
	}
d147 2
a148 1
/*	p a r s _ A r g v ( )
d151 1
a151 1
pars_Argv( argc, argv )
d153 1
a153 1
	{
d157 21
a177 10
	while( (c = getopt( argc, argv, "h" )) != EOF )
		{
		switch( c )
			{
			case 'h' : /* High resolution frame buffer.	*/
				fbsize = 1024;
				break;
			case '?' :
				return	0;
			}
d179 1
d181 1
a181 2
	}

@


1.12
log
@pixel conversion
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 1.11 86/10/06 21:08:10 phil Locked $ (BRL)";
a26 1
FBIO	*fbp;
d33 1
d35 2
a37 1
	register int	middle;
a39 1
	static int	mask;
d62 11
a72 12
		for( x = 0; x < fb_sz; x++ )
			{
			if( x == y || x == fb_sz - y )
				(void) fb_wpixel( fbp, white );
			else
			if( x == middle || y == middle )
				(void) fb_wpixel( fbp, red );
			else
			if( (x & mask) && (y & mask) )
				(void) fb_wpixel( fbp, black );
			else
				(void) fb_wpixel( fbp, white );
d75 1
@


1.11
log
@Converted to new libfb with 1st Quadrant semantics
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 1.10 86/10/03 19:23:36 mike Exp $ (BRL)";
d37 1
a37 1
	static Pixel	black, white, red;
d51 3
a53 3
	white.red = white.green = white.blue = 255;
	black.red = black.green = black.blue = 0;
	red.red = 255;
d65 1
a65 1
				(void) fb_wpixel( fbp, &white );
d68 1
a68 1
				(void) fb_wpixel( fbp, &red );
d71 1
a71 1
				(void) fb_wpixel( fbp, &black );
d73 1
a73 1
				(void) fb_wpixel( fbp, &white );
@


1.10
log
@Typo
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: fbgrid.c,v 1.9 86/10/03 05:57:40 phil Exp $ (BRL)";
d39 1
d56 2
a57 17
	if( fb_sz == 512 )
	for( y = 0; y < fb_sz; y++ )
		{
		for( x = 0; x < fb_sz; x++ )
			{
			if( x == y || x == fb_sz - y )
				(void) fb_wpixel( fbp, &white );
			else
			if( x == middle || y == middle )
				(void) fb_wpixel( fbp, &red );
			else
			if( (x & 0x7) && (y & 0x7) )
				(void) fb_wpixel( fbp, &black );
			else
				(void) fb_wpixel( fbp, &white );
			}
		}
d59 3
a61 2
	for( y = 0; y < fb_sz; y++ )
		{
d70 1
a70 1
			if( (x & 0xf) && (y & 0xf) )
@


1.9
log
@new libfb
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d54 1
a54 1
	fb_ioinit();
@


1.8
log
@Updated #includes for new conventions
@
text
@d2 20
a21 9
	SCCS id:	@@(#) fbgrid.c	1.7
	Last edit: 	4/3/85 at 09:24:36	G S M
	Retrieved: 	8/13/86 at 03:14:22
	SCCS archive:	/m/cad/fb_utils/RCS/s.fbgrid.c

*/
#if ! defined( lint )
static
char	sccsTag[] = "@@(#) fbgrid.c	1.7	last edit 4/3/85 at 09:24:36";
a22 2
/*
			F B G R I D
a23 8
	This program computes an image for the frame buffer.
	Mike Muuss, 7/19/82

	Conversion to generic frame buffer utility using libfb(3).
	In the process, the name has been changed to fbgrid from ikgrid.
	Gary S. Moss, BRL. 03/12/85
 */

d27 3
d45 1
a45 1
	if( fbopen( NULL, APPEND ) == -1 )
d49 1
a49 1
	fb_sz = fbgetsize();
d54 1
a54 1
	fbioinit();
d61 1
a61 1
				(void) fbwpixel( &white );
d64 1
a64 1
				(void) fbwpixel( &red );
d67 1
a67 1
				(void) fbwpixel( &black );
d69 1
a69 1
				(void) fbwpixel( &white );
d78 1
a78 1
				(void) fbwpixel( &white );
d81 1
a81 1
				(void) fbwpixel( &red );
d84 1
a84 1
				(void) fbwpixel( &black );
d86 1
a86 1
				(void) fbwpixel( &white );
d89 1
d107 1
a107 1
				fbsetsize( 1024 );
@


1.7
log
@Changed I/O.
@
text
@d22 1
d24 2
a25 1
#include <fb.h>
d102 1
a102 1
				setfbsize( 1024 );
@


1.6
log
@Let the libfb do the buffering.
@
text
@d2 3
a4 3
	SCCS id:	@@(#) fbgrid.c	1.6
	Last edit: 	3/29/85 at 15:38:54	G S M
	Retrieved: 	8/13/86 at 03:14:17
d10 1
a10 1
char	sccsTag[] = "@@(#) fbgrid.c	1.6	last edit 3/29/85 at 15:38:54";
d30 2
a31 1
	static Pixel	black, white;
d46 2
d49 1
d57 3
d61 17
@


1.5
log
@All utilities seem to work with the Ikonas, will test with 
UNIX files next.
@
text
@d2 3
a4 3
	SCCS id:	@@(#) fbgrid.c	1.5
	Last edit: 	3/14/85 at 17:57:48	G S M
	Retrieved: 	8/13/86 at 03:14:11
d10 1
a10 1
char	sccsTag[] = "@@(#) fbgrid.c	1.5	last edit 3/14/85 at 17:57:48";
a23 2
Pixel	line[1024]; /* Room for high or low resolution.			*/

d29 3
a31 3
	register int	hf_fbsz, fb_sz;
	static int val;
	static Pixel	*lp;
d42 5
a46 3
	fb_sz = getfbsize();
	hf_fbsz = fb_sz / 2;
	for( y = hf_fbsz; y < fb_sz; y++ )
d48 1
a48 1
		for( x = hf_fbsz; x < fb_sz; x++ )
d50 2
a51 5
			if(	x == y
			    ||	(x % 8) == 0
			    ||	(y % 8) == 0
				)
				val = 255;
d53 4
a56 19
				val = 0;
			lp = &line[x];
			lp->red = lp->green = lp->blue = val;
			lp = &line[fb_sz-x];
			lp->red = lp->green = lp->blue = val;
			}
		if(	fbwrite( 0, y, line, fb_sz )
		    ==	-1
			)
			{
			(void) fprintf( stderr, "Write failed!\n" );
			return	1;
			}
		if(	fbwrite( 0, fb_sz-y, line, fb_sz )
		    ==	-1
			)
			{
			(void) fprintf( stderr, "Write failed!\n" );
			return	1;
@


1.4
log
@fbclear, fbcmap, fbgrid, fbzoom, fb-rle, rle-fb look good.
@
text
@d2 3
a4 3
	SCCS id:	@@(#) fbgrid.c	1.4
	Last edit: 	3/13/85 at 22:13:12	G S M
	Retrieved: 	8/13/86 at 03:14:04
d10 1
a10 1
char	sccsTag[] = "@@(#) fbgrid.c	1.4	last edit 3/13/85 at 22:13:12";
@


1.1
log
@Initial revision
@
text
@d2 4
a5 6
 *			G R I D
 *
 * This program computes an image for the frame buffer.
 *
 * Mike Muuss, 7/19/82
 */
d7 7
a13 6
struct pixel {
	char R;
	char G;
	char B;
	char XXx;
} line[512];
d15 2
a16 1
extern ikfd;
d18 14
a31 2
main()  {
	register int x, y;
d33 1
a33 1
	static struct pixel *lp;
d35 19
a53 9
	ikopen();

	for( y = 256; y < 512; y++ )  {
		for( x = 256; x < 512; x++ )  {
			if(
				x == y  ||
				(x % 8) == 0  ||
				(y % 8) == 0
			)
a56 1

d58 18
a75 3
			lp->R = lp->G = lp->B = val;
			lp = &line[511-x];
			lp->R = lp->G = lp->B = val;
d77 2
d80 8
a87 4
		lseek( ikfd, ((long) y) << 11, 0 );
		if( write( ikfd, line, sizeof line ) != sizeof line )  {
			printf("Write failed\n");
		}
d89 10
a98 3
		lseek( ikfd, ((long) 511-y) << 11, 0 );
		if( write( ikfd, line, sizeof line ) != sizeof line )  {
			printf("Write failed\n");
d100 1
d102 1
a102 1
}
@
