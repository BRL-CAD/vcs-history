head	11.10;
access;
symbols
	ansi-20040405-merged:11.6.2.2
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.7
	postmerge-autoconf:11.7
	autoconf-freeze:11.6.10.2
	premerge-autoconf:11.7
	ansi-20040316-freeze:11.6.2.1
	postmerge-20040315-windows:11.7
	premerge-20040315-windows:11.7
	windows-20040315-freeze:11.6.4.1
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.2
	offsite-5-3-pre:11.3
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:5.1
	rel-1-24:5.1
	rel-1-20:4.3
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.10
date	2004.05.24.04.13.26;	author morrison;	state dead;
branches;
next	11.9;

11.9
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.8;

11.8
date	2004.04.05.07.49.23;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2004.02.02.17.39.01;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.07.25;	author jra;	state Exp;
branches
	11.6.2.1
	11.6.4.1
	11.6.10.1;
next	11.5;

11.5
date	2002.08.15.20.54.38;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.04.12.17.44.08;	author bparker;	state Exp;
branches;
next	11.3;

11.3
date	2000.08.24.03.58.32;	author mike;	state Exp;
branches;
next	11.2;

11.2
date	2000.05.10.01.25.49;	author cjohnson;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.09.33;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.23.18.49.10;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.46.38;	author mike;	state Rel4_0;
branches;
next	9.6;

9.6
date	91.06.18.20.25.54;	author phil;	state Exp;
branches;
next	9.5;

9.5
date	91.03.06.12.57.18;	author pjt;	state Exp;
branches;
next	9.4;

9.4
date	91.03.06.10.40.40;	author pjt;	state Exp;
branches;
next	9.3;

9.3
date	91.01.03.22.55.55;	author phil;	state Exp;
branches;
next	9.2;

9.2
date	89.08.29.21.25.28;	author phil;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.09.18;	author mike;	state Rel3_5;
branches;
next	8.3;

8.3
date	89.03.07.00.31.54;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.02.20.09.55;	author phil;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.41.57;	author mike;	state Rel3_0;
branches;
next	7.2;

7.2
date	88.05.21.10.24.12;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.07.43;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.10.57;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.39.06;	author mike;	state Rel;
branches;
next	4.4;

4.4
date	87.04.17.19.57.47;	author phil;	state Exp;
branches;
next	4.3;

4.3
date	87.02.13.00.42.05;	author mike;	state Exp;
branches;
next	4.2;

4.2
date	87.01.28.21.40.23;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.13.06;	author mike;	state Rel1;
branches;
next	1.15;

1.15
date	86.12.09.22.02.49;	author mike;	state Exp;
branches;
next	1.14;

1.14
date	86.12.09.01.54.44;	author mike;	state Exp;
branches;
next	1.13;

1.13
date	86.11.29.05.14.12;	author mike;	state Exp;
branches;
next	1.12;

1.12
date	86.11.05.06.22.30;	author mike;	state Exp;
branches;
next	1.11;

1.11
date	86.10.06.21.08.14;	author mike;	state Exp;
branches;
next	1.10;

1.10
date	86.10.03.06.17.46;	author phil;	state Exp;
branches;
next	1.9;

1.9
date	86.08.13.05.21.45;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	86.08.13.03.15.23;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	86.08.13.03.15.17;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	86.08.13.03.15.10;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	86.08.13.03.15.05;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	86.08.13.03.14.59;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	86.08.13.03.14.52;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.08.13.03.14.46;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.08.13.03.14.43;	author mike;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.00.42;	author morrison;	state Exp;
branches;
next	11.6.2.2;

11.6.2.2
date	2004.03.17.21.16.08;	author morrison;	state Exp;
branches;
next	;

11.6.4.1
date	2004.03.11.23.40.44;	author morrison;	state Exp;
branches;
next	;

11.6.10.1
date	2004.02.12.19.40.46;	author erikg;	state Exp;
branches;
next	11.6.10.2;

11.6.10.2
date	2004.03.15.13.28.06;	author erikg;	state Exp;
branches;
next	;


desc
@@


11.10
log
@moved to src/fb/
@
text
@/*
 *			F B Z O O M . C
 *
 * Function -
 *	Dynamicly modify Ikonas Zoom and Window parameters,
 *	using VI and/or EMACS-like keystrokes on a regular terminal.
 *
 *  Authors -
 *	Bob Suckling
 *	Michael John Muuss
 *	Gary S. Moss
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/fb/fbzoom.c,v 11.9 2004/05/10 15:30:42 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>	
#include "machine.h"
#include "externs.h"		/* For getopt() */
#include "fb.h"
#include "libtermio.h"

int pars_Argv(int argc, register char **argv);
int doKeyPad(void);

/* Zoom rate and limits */
#define MinZoom		(1)

/* Pan limits */
#define MaxXPan		(fb_getwidth(fbp)-1)
#define MaxYPan		(fb_getheight(fbp)-1)
#define MinPan		(0)

static int PanFactor;			/* Speed with whitch to pan.	*/
static int xPan, yPan;			/* Pan Location.		*/
static int xZoom, yZoom;		/* Zoom Factor.			*/
static int new_xPan, new_yPan;
static int new_xZoom, new_yZoom;

static int	scr_width = 0;		/* screen size */
static int	scr_height = 0;
static int	toggle_pan = 0;		/* Reverse sense of pan commands? */
static char	*framebuffer = NULL;
static FBIO	*fbp;

static char usage[] = "\
Usage: fbzoom [-hT] [-F framebuffer]\n\
	[-{sS} squarescrsize] [-{wW} scr_width] [-{nN} scr_height]\n";

int
main(int argc, char **argv)
{
	if( ! pars_Argv( argc, argv ) ) {
		(void)fputs(usage, stderr);
		exit(1);
	}
	if( (fbp = fb_open( framebuffer, scr_width, scr_height )) == NULL )
		exit(1);

	if( optind+4 == argc ) {
		xPan = atoi( argv[optind+0] );
		yPan = atoi( argv[optind+1] );
		xZoom = atoi( argv[optind+2] );
		yZoom = atoi( argv[optind+3] );
		fb_view(fbp, xPan, yPan, xZoom, yZoom);
	}

#if 0
	xZoom = 1;
	yZoom = 1;
	xPan = fb_getwidth(fbp)/2;
	yPan = fb_getheight(fbp)/2;
#else
	fb_getview(fbp, &xPan, &yPan, &xZoom, &yZoom);
#endif

	/* Set RAW mode */
	save_Tty( 0 );
	set_Raw( 0 );
	clr_Echo( 0 );

	PanFactor = fb_getwidth(fbp)/16;
	if( PanFactor < 2 )  PanFactor = 2;

	new_xPan = xPan;
	new_yPan = yPan;
	new_xZoom = xZoom;
	new_yZoom = yZoom;
	do  {
		/* Clip values against Min/Max */
		if (new_xPan > MaxXPan) new_xPan = MaxXPan;
		if (new_xPan < MinPan) new_xPan = MinPan;
		if (new_yPan > MaxYPan) new_yPan = MaxYPan;
		if (new_yPan < MinPan) new_yPan = MinPan;
		if (new_xZoom < MinZoom) new_xZoom = MinZoom;
		if (new_yZoom < MinZoom) new_yZoom = MinZoom;

		if( new_xPan != xPan || new_yPan != yPan
		  || new_xZoom != xZoom || new_yZoom != yZoom ) {
		  	/* values have changed, write them */
			if( fb_view(fbp, new_xPan, new_yPan,
			    new_xZoom, new_yZoom) >= 0 ) {
				/* good values, save them */
				xPan = new_xPan;
				yPan = new_yPan;
				xZoom = new_xZoom;
				yZoom = new_yZoom;
			} else {
				/* bad values, reset to old ones */
				new_xPan = xPan;
				new_yPan = yPan;
				new_xZoom = xZoom;
				new_yZoom = yZoom;
			}
		}
#if 0
		(void) fprintf( stdout,
				"Zoom: %2d %2d  Center Pixel: %4d %4d            \r",
				xZoom, yZoom, xPan, yPan );
#else
		(void) fprintf( stdout,
				"Center Pixel: %4d %4d   Zoom: %2d %2d   %s\r",
				xPan, yPan, xZoom, yZoom,
				toggle_pan ? "Pan: image "
					   : "Pan: window");
#endif
		(void) fflush( stdout );
	}  while( doKeyPad() );

	reset_Tty( 0 );
	(void) fb_view( fbp, xPan, yPan, xZoom, yZoom );
	(void) fb_close( fbp );
	(void) fprintf( stdout,  "\n");	/* Move off of the output line.	*/
	return	0;
}

char help[] = "\r\n\
Both VI and EMACS motions work.\r\n\
b ^V	zoom Bigger (*2)		s	zoom Smaller (*0.5)\r\n\
+ =	zoom Bigger (+1)		-	zoom Smaller (-1)\r\n\
(	zoom Y Bigger (*2)		)	zoom Y Smaller (*0.5)\r\n\
0	zoom Y Bigger (+1)		9	zoom Y Smaller (-1)\r\n\
<	zoom X Bigger (*2)		>	zoom X Smaller (*0.5)\r\n\
,	zoom X Bigger (+1)		.	zoom X Smaller (-1)\r\n\
h B 	pan Left (1)			l F	pan Right (1)\r\n\
H ^B	pan Left (many)			L ^F	pan Right (many)\r\n\
k P	pan Up (1)			j N	pan Down (1)\r\n\
K ^P	pan Up (many)			J ^N	pan Down (many)\r\n\
T	toggle sense of pan commands\r\n\
c	goto Center\r\n\
z	zoom 1 1\r\n\
r	Reset to normal\r\n\
q	Exit\r\n\
RETURN	Exit\r\n";

#define ctl(x)	(x&037)

int
doKeyPad(void)
{ 
	register int ch;

	if( (ch = getchar()) == EOF )
		return	0;		/* done */
	ch &= ~0x80;			/* strip off parity bit */
	switch( ch ) {
	default :
		(void) fprintf( stdout,
				"\r\n'%c' bad -- Type ? for help\r\n",
				ch );
	case '?' :
		(void) fprintf( stdout, "\r\n%s", help );
		break;

	case 'T' :
		toggle_pan = 1 - toggle_pan;
		break;
	case '\r' :				/* Done, leave "as is" */
	case '\n' :
	case 'q' :
	case 'Q' :				
		return	0;

	case 'c' :				/* Reset Pan (Center) */
	case 'C' :
		new_xPan = fb_getwidth(fbp)/2;
		new_yPan = fb_getheight(fbp)/2;
		break;
	case 'z' :				/* Reset Zoom */
	case 'Z' :
		new_xZoom = 1;
		new_yZoom = 1;
		break;
	case 'r' :				/* Reset Pan and Zoom */
	case 'R' :
		new_xZoom = 1;
		new_yZoom = 1;
		new_xPan = fb_getwidth(fbp)/2;
		new_yPan = fb_getheight(fbp)/2;
		break;

	case ctl('v') :
	case 'b' :				/* zoom BIG binary */
		new_xZoom *= 2;
		new_yZoom *= 2;
		break;
	case '=' :
	case '+' :				/* zoom BIG incr */
		new_xZoom++;
		new_yZoom++;
		break;
	case 's' :				/* zoom small binary */
		new_xZoom /= 2;
		new_yZoom /= 2;
		break;
	case '-' :				/* zoom small incr */
		--new_xZoom;
		--new_yZoom;
		break;

	case '>' :				/* X Zoom */
		new_xZoom *= 2;
		break;
	case '.' :
		++new_xZoom;
		break;
	case '<' :
		new_xZoom /= 2;
		break;
	case ',' :
		--new_xZoom;
		break;

	case ')' :				/* Y Zoom */
		new_yZoom *= 2;
		break;
	case '0' :
		++new_yZoom;
		break;
	case '(' :
		new_yZoom /= 2;
		break;
	case '9' :
		--new_yZoom;
		break;

	case 'h' :				/* pan LEFT.	*/
	case 'B' :
		new_xPan -= 1 - 2 * toggle_pan;
		break;
	case 'H' :
	case ctl('b') :
		new_xPan -= PanFactor * (1 - 2 * toggle_pan);
		break;
	case 'j' :				/* pan DOWN.	*/
	case 'N' :
		new_yPan -= 1 - 2 * toggle_pan;
		break;
	case 'J' :
	case ctl('n') :
		new_yPan -= PanFactor * (1 - 2 * toggle_pan);
		break;
	case 'k' :				/* pan UP.	*/
	case 'P' :
		new_yPan += 1 - 2 * toggle_pan;
		break;
	case 'K' :
	case ctl('p') :
		new_yPan += PanFactor * (1 - 2 * toggle_pan);
		break;
	case 'l' :				/* pan RIGHT.	*/
	case 'F' :
		new_xPan += 1 - 2 * toggle_pan;
		break;
	case 'L' :
	case ctl('f') :
		new_xPan += PanFactor * (1 - 2 * toggle_pan);
		break;
	}
	return	1;		/* keep going */
}

/*	p a r s _ A r g v ( )
 */
int
pars_Argv(int argc, register char **argv)
{
	register int	c;

	while( (c = getopt( argc, argv, "hTF:s:S:w:W:n:N:" )) != EOF )  {
		switch( c )  {
		case 'h':
			/* high-res */
			scr_height = scr_width = 1024;
			break;
		case 'T':
			/* reverse the sense of pan commands */
			toggle_pan = 1;
			break;
		case 'F':
			framebuffer = optarg;
			break;
		case 's':
		case 'S':
			scr_height = scr_width = atoi(optarg);
			break;
		case 'w':
		case 'W':
			scr_width = atoi(optarg);
			break;
		case 'n':
		case 'N':
			scr_height = atoi(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}
	return	1;
}
@


11.9
log
@change conf.h to a wrapped config.h
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/fbzoom.c,v 11.8 2004/04/05 07:49:23 morrison Exp $ (BRL)";
@


11.8
log
@merge of ansi-6-0-branch into HEAD
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d26 5
a30 1
#include "conf.h"
@


11.7
log
@update copyright to include span through 2003
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbzoom.c,v 11.6 2002/08/20 17:07:25 jra Exp $ (BRL)";
d34 2
a35 2
int pars_Argv();
int doKeyPad();
d62 1
a62 3
main(argc, argv )
int argc;
char **argv;
d170 1
a170 1
doKeyPad()
d297 1
a297 2
pars_Argv( argc, argv )
register char	**argv;
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1986 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbzoom.c,v 11.4 2001/04/12 17:44:08 bparker Exp $ (BRL)";
@


11.6.4.1
log
@sync to HEAD...
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/fb/fbzoom.c,v 11.7 2004/02/02 17:39:01 morrison Exp $ (BRL)";
@


11.6.10.1
log
@merge from HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbzoom.c,v 11.7 2004/02/02 17:39:01 morrison Exp $ (BRL)";
@


11.6.10.2
log
@merge from head
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbzoom.c,v 11.6.10.1 2004/02/12 19:40:46 erikg Exp $ (BRL)";
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbzoom.c,v 11.6 2002/08/20 17:07:25 jra Exp $ (BRL)";
d34 2
a35 2
int pars_Argv(int argc, register char **argv);
int doKeyPad(void);
d62 3
a64 1
main(int argc, char **argv)
d172 1
a172 1
doKeyPad(void)
d299 2
a300 1
pars_Argv(int argc, register char **argv)
@


11.6.2.2
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d23 1
a23 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d34 2
a35 2
int pars_Argv(int argc, register char **argv);
int doKeyPad(void);
d62 3
a64 1
main(int argc, char **argv)
d172 1
a172 1
doKeyPad(void)
d299 2
a300 1
pars_Argv(int argc, register char **argv)
@


11.4
log
@*- get rid of warnings
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbzoom.c,v 11.3 2000/08/24 03:58:32 mike Exp $ (BRL)";
d34 2
a35 2
int pars_Argv();
int doKeyPad();
d62 1
a62 3
main(argc, argv )
int argc;
char **argv;
d170 1
a170 1
doKeyPad()
d297 1
a297 2
pars_Argv( argc, argv )
register char	**argv;
@


11.3
log
@
const RCSid
@
text
@d23 1
a23 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbzoom.c,v 11.2 2000/05/10 01:25:49 cjohnson Exp $ (BRL)";
d32 4
d61 1
d171 1
@


11.2
log
@Document commands to zoom X and Y independently.
Add '=' as equivlent ot '+' for zooming.  (no need to shift)
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbzoom.c,v 11.1 1995/01/04 10:09:33 mike Rel4_4 $ (BRL)";
@


11.1
log
@Release_4.4
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbzoom.c,v 10.2 94/08/23 18:49:10 gdurf Exp $ (BRL)";
d147 10
a156 12
b ^V	zoom Bigger (*2)\r\n\
s	zoom Smaller (*0.5)\r\n\
+	zoom Bigger (+1)\r\n\
-	zoom Smaller (-1)\r\n\
h B 	pan Left (1)\r\n\
j N	pan Down (1)\r\n\
k P	pan Up (1)\r\n\
l F	pan Right (1)\r\n\
H ^B	pan Left (many)\r\n\
J ^N	pan Down (many)\r\n\
K ^P	pan Up (many)\r\n\
L ^F	pan Right (many)\r\n\
d214 1
@


10.2
log
@Added includes, factored ifdefs
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbzoom.c,v 10.1 1991/10/12 06:46:38 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbzoom.c,v 9.6 91/06/18 20:25:54 phil Exp $ (BRL)";
d26 2
d29 2
a31 4

extern int	getopt();
extern char	*optarg;
extern int	optind;
@


9.6
log
@Bug fix - I was clipping the wrong zoom values.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/fbzoom.c,v 9.5 91/03/06 12:57:18 pjt Exp $ (BRL)";
@


9.5
log
@1. Added T command and -T flag
2. Made VI and JOVE commands correspond
3. Made help menu tell the truth
4. Added pan sense to output line
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/fbzoom.c,v 9.4 91/03/06 10:40:40 pjt Exp $ (BRL)";
d103 2
a104 2
		if (xZoom < MinZoom) xZoom = MinZoom;
		if (yZoom < MinZoom) yZoom = MinZoom;
@


9.4
log
@Attempt to add -T option and correct j,J,k, and K commands
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/fbzoom.c,v 9.3 91/01/03 22:55:55 phil Exp $ (BRL)";
d54 1
a54 1
Usage: fbzoom [-h] [-F framebuffer]\n\
d130 4
a133 2
				"Center Pixel: %4d %4d   Zoom: %2d %2d            \r",
				xPan, yPan, xZoom, yZoom );
d151 9
a159 8
h B 	move Right (1)\r\n\
j P	move Up (1)\r\n\
k N	move Down (1)\r\n\
l F	move Left (1)\r\n\
H ^B	move Right (many)\r\n\
J ^P	move Up (many)\r\n\
K ^N	move Down (many)\r\n\
L ^F	move Left (many)\r\n\
d255 3
a257 3
	case 'F' :
	case 'l' :				/* move RIGHT.	*/
		new_xPan += 1 - 2 * toggle_pan;
d259 3
a261 3
	case ctl('f') :
	case 'L' :
		new_xPan += PanFactor * (1 - 2 * toggle_pan);
d263 1
a264 1
	case 'j' :				/* move DOWN.	*/
d267 1
a268 1
	case 'J' :
d271 1
a272 1
	case 'k' :				/* move UP.	*/
d275 1
a276 1
	case 'K' :
d279 3
a281 3
	case 'B' :
	case 'h' :				/* move LEFT.	*/
		new_xPan -= 1 - 2 * toggle_pan;
d283 3
a285 3
	case ctl('b') :
	case 'H' :
		new_xPan -= PanFactor * (1 - 2 * toggle_pan);
@


9.3
log
@Modified to take advantage of the framebuffer library
remembering previous zoom/pan settings
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/fbzoom.c,v 9.2 89/08/29 21:25:28 phil Exp $ (BRL)";
d49 1
d181 3
d253 2
a254 2
	case 'l' :				/* move LEFT.	*/
		++new_xPan;
d258 1
a258 1
		new_xPan += PanFactor;
d261 2
a262 2
	case 'k' :				/* move DOWN.	*/
		--new_yPan;
d265 2
a266 2
	case 'K' :
		new_yPan -= PanFactor;
d269 2
a270 2
	case 'j' :				/* move UP.	*/
		++new_yPan;
d273 2
a274 2
	case 'J' :
		new_yPan += PanFactor;
d277 2
a278 2
	case 'h' :				/* move RIGHT.	*/
		--new_xPan;
d282 1
a282 1
		new_xPan -= PanFactor;
d296 1
a296 1
	while( (c = getopt( argc, argv, "hF:s:S:w:W:n:N:" )) != EOF )  {
d301 4
@


9.2
log
@Init zoom to known value until (unless?) we can read the zoom
back from the frame buffer.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 9.1 89/05/19 06:09:18 phil Locked $ (BRL)";
d33 1
a33 1
/* Zoom rate and limits.	*/
d36 1
a36 1
/* Pan limits.	*/
a41 1
static int zoom;			/* Zoom Factor.			*/
d43 3
d57 1
d62 1
a62 1
		return	1;
d65 13
a77 2
		return	1;
	zoom = 1;
d80 3
d92 4
a95 1
	fb_zoom( fbp, zoom, zoom );
d97 27
a123 1
		fb_window( fbp, xPan, yPan );
d125 7
a131 3
				"zoom=%3d, Center Pixel is %4d,%4d            \r",
				zoom, xPan, yPan
				);
d136 1
a136 2
	(void) fb_zoom( fbp, zoom, zoom );
	(void) fb_window( fbp, xPan, yPan );
d157 1
d171 1
a171 2
	switch( ch )
		{
d175 1
a175 2
				ch
				);
d179 3
a181 2
	case '\r' :    
	case '\n' :				/* Done, return to normal */
d183 1
d185 5
a189 6
	case 'Q' :				/* Done, leave "as is" */
		return	0;
	case 'c' :	
	case 'C' :				/* Center */
		xPan = fb_getwidth(fbp)/2;
		yPan = fb_getheight(fbp)/2;
d191 4
a194 6
	case 'r' :	
	case 'R' :				/* Reset */
		(void)fb_zoom( fbp, 1, 1 );
		zoom = 1;
		xPan = fb_getwidth(fbp)/2;
		yPan = fb_getheight(fbp)/2;
d196 8
d206 2
a207 2
		if( fb_zoom(fbp, zoom*2, zoom*2 ) >= 0 )
			zoom *= 2;
d210 2
a211 2
		if( fb_zoom(fbp, zoom+1, zoom+1 ) >= 0 )
			++zoom;
d214 2
a215 3
		if(  (zoom /= 2) < MinZoom )
			zoom = MinZoom;
		(void)fb_zoom(fbp, zoom, zoom );
d218 2
a219 3
		if(  --zoom < MinZoom )
			zoom = MinZoom;
		(void)fb_zoom(fbp, zoom, zoom );
d221 27
d250 1
a250 2
		if( ++xPan > MaxXPan )
			xPan = MaxXPan;
d254 1
a254 2
		if( (xPan += PanFactor) > MaxXPan )
			xPan = MaxXPan;
d258 1
a258 2
		if( --yPan < MinPan )
			yPan = MinPan;
d262 1
a262 2
		if( (yPan -= PanFactor) < MinPan )
			yPan = MinPan;
d266 1
a266 2
		if( ++yPan > MaxYPan )
			yPan = MaxYPan;
d270 1
a270 2
		if( (yPan += PanFactor) > MaxYPan )
			yPan = MaxYPan;
d274 1
a274 2
		if( --xPan < MinPan )
			xPan = MinPan;
d278 1
a278 2
		if( (xPan -= PanFactor) < MinPan )
			xPan = MinPan;
d280 1
a280 1
		}
a319 1

@


9.1
log
@Release_3.5
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 8.3 89/03/07 00:31:54 mike Exp $ (BRL)";
d56 2
a57 3
	{
	if( ! pars_Argv( argc, argv ) )
		{
d60 1
a60 1
		}
d75 1
d91 1
a91 1
	}
d115 1
a115 1
	{ 
d210 1
a210 1
	}
@


8.3
log
@ANSII-ified, by changing ctl() macro
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 8.2 88/12/02 20:09:55 mike Locked $ (BRL)";
@


8.2
log
@MaxPan was getting clipped one pixel too late.
Separated into MaxXPan and MaxYPan while I was at it.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 8.1 88/10/05 00:41:57 phil Locked $ (BRL)";
d112 1
a112 1
#define ctl(x)	('x'&037)
d149 1
a149 1
	case ctl(v) :
d173 1
a173 1
	case ctl(f) :
d183 1
a183 1
	case ctl(n) :
d193 1
a193 1
	case ctl(p) :
d203 1
a203 1
	case ctl(b) :
@


8.1
log
@Release_3.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 7.2 88/05/21 10:24:12 mike Exp $ (BRL)";
d37 2
a38 1
#define MaxPan		fb_getwidth(fbp)
d170 2
a171 2
		if( ++xPan > MaxPan )
			xPan = MaxPan;
d175 2
a176 2
		if( (xPan += PanFactor) > MaxPan )
			xPan = MaxPan;
d190 2
a191 2
		if( ++yPan > MaxPan )
			yPan = MaxPan;
d195 2
a196 2
		if( (yPan += PanFactor) > MaxPan )
			yPan = MaxPan;
@


7.2
log
@Added -s, -w, -n, and -F flags.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 7.1 87/11/03 00:07:43 mike Locked $ (BRL)";
@


7.1
log
@Release 2.3
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 6.1 87/07/11 08:10:57 mike Rel $ (BRL)";
d29 4
d44 4
a47 2
static int fbsize = 512;
FBIO *fbp;
d49 4
d58 1
a58 1
		(void) fprintf( stderr, "Usage : fbzoom	[-h]\n" );
d61 1
a61 1
	if( (fbp = fb_open( NULL, fbsize, fbsize )) == NULL )
d78 1
a78 1
				"zoom=%d, Center Pixel is %d,%d            \r",
a84 1
	(void) fprintf( stdout,  "\n");	/* Move off of the output line.	*/
d88 1
d216 1
a216 1
	{
d218 25
a242 10
	while( (c = getopt( argc, argv, "h" )) != EOF )
		{
		switch( c )
			{
			case 'h' : /* High resolution frame buffer.	*/
				fbsize = 1024;
				break;
			case '?' :
				return	0;
			}
d244 1
d246 1
a246 1
	}
@


6.1
log
@Release 2.0
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 5.1 87/06/24 22:39:06 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 4.4 87/04/17 19:57:47 phil Exp $ (BRL)";
@


4.4
log
@fixed zoom reset
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 4.3 87/02/13 00:42:05 phil Locked $ (BRL)";
@


4.3
log
@Release 1.20 -- First Formal Release
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 4.2 87/01/28 21:40:23 mike Exp $ (BRL)";
d134 1
@


4.2
log
@Release 1.16:  Masked off parity bit when reading chars in raw mode.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 4.1 86/12/29 03:13:06 mike Locked $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 1.15 86/12/09 22:02:49 mike Exp $ (BRL)";
d105 1
a105 1
	register ch;	
d108 2
a109 2
			return	0;		/* done */

@


1.15
log
@Improved to limit max zoom.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 1.14 86/12/09 01:54:44 mike Locked $ (BRL)";
@


1.14
log
@Made jump for normal commands cover 1/16th of the original image,
regardless of zoom.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 1.13 86/11/29 05:14:12 mike Locked $ (BRL)";
d62 3
a65 3
		PanFactor = fb_getwidth(fbp)/16;
		if( PanFactor < 2 )  PanFactor = 2;
		(void) fb_zoom( fbp, zoom, zoom );
d128 2
a129 1
		xPan = yPan = 0;
d133 1
a133 1
		zoom = 1;
d139 2
a140 1
		zoom *= 2;
d143 2
a144 1
		++zoom;
d149 1
d154 1
@


1.13
log
@Eliminated max zoom limit,
made pan steps larger.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 1.12 86/11/05 06:22:30 mike Locked $ (BRL)";
d62 3
a64 3
	do
		{
		PanFactor = fb_getwidth(fbp)/zoom/16;
d72 1
a72 2
		}
	while( doKeyPad() );
@


1.12
log
@Added +/- commands for incremental zoom, rather than just binary.
Improved help message.
Removed erroneous -1's from fb_window() calls.
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 1.11 86/10/06 21:08:14 mike Locked $ (BRL)";
a29 1
#define MaxZoom		(16)
d64 1
a64 1
		PanFactor = 40 / zoom;
d139 1
a139 2
		if(  (zoom *= 2) > MaxZoom )
			zoom = MaxZoom;
d142 1
a142 2
		if(  ++zoom > MaxZoom )
			zoom = MaxZoom;
@


1.11
log
@Converted to new libfb with 1st Quadrant semantics
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 1.10 86/10/03 06:17:46 phil Exp $ (BRL)";
d56 1
a56 1
	yPan = fb_getheight(fbp)/2 - 1;
d85 13
a97 6
b ^V	zoom Bigger\r\n\
s	zoom Smaller\r\n\
h	move Right\r\n\
j	move Up\r\n\
k	move Down\r\n\
l	move Left\r\n\
d100 2
a101 4
^F ^B	Forward, Back\r\n\
^N ^P	Down, Up\r\n\
\\n	Exit\r\n\
Uppercase takes big steps.\r\n";
d110 1
a110 1
		return	0;		/* done */
d136 1
a136 1
		yPan = fb_getheight(fbp)/2 - 1;
d139 1
a139 1
	case 'b' :				/* zoom BIG.	*/
d143 5
a147 1
	case 's' :				/* zoom small.	*/
d149 4
@


1.10
log
@Converted to libfb
@
text
@d23 1
a23 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d154 2
a155 2
		if( ++yPan > MaxPan )
			yPan = MaxPan;
d159 2
a160 2
		if( (yPan += PanFactor) > MaxPan )
			yPan = MaxPan;
d164 2
a165 2
		if( --yPan < MinPan )
			yPan = MinPan;
d169 2
a170 2
		if( (yPan -= PanFactor) < MinPan )
			yPan = MinPan;
@


1.9
log
@Updated #includes for new conventions
@
text
@d8 4
a11 2
 * Original Version -
 *	Bob Suckling, BRL
d13 8
a20 3
 * Enhancements -
 *	Ported to VAX, simplified internals somewhat.
 *	Mike Muuss, BRL.  03/22/84.
d23 1
a23 1
static char RCSid[] = "@@(#)$Header: fbzoom.c,v 1.8 86/08/13 03:15:23 mike Exp $ (BRL)";
a24 4
/*
	Conversion to generic frame buffer routine using 'libfb'.
	In the process, the name was changed to fbzoom from ikzoom.
	Gary S. Moss, BRL. 03/13/85.
a25 10
	SCCS id:	@@(#) fbzoom.c	1.8
	Last edit: 	9/10/85 at 09:58:34
	Retrieved: 	8/13/86 at 03:15:21
	SCCS archive:	/m/cad/fb_utils/RCS/s.fbzoom.c
*/
#if ! defined( lint )
static
char	sccsTag[] = "@@(#) fbzoom.c	1.8	last edit 9/10/85 at 09:58:34";
#endif

d34 1
a34 1
#define MaxPan		_fbsize
d41 3
d52 1
a52 1
	if( fbopen( NULL, APPEND ) == -1 )
d55 2
a56 2
	xPan = _fbsize/2;
	yPan = _fbsize/2 - 1;
d66 2
a67 2
		(void) fbzoom( zoom, zoom );
		fbwindow( xPan, yPan );
d78 3
a80 2
	(void) fbzoom( zoom, zoom );
	(void) fbwindow( xPan, yPan );
d130 2
a131 2
		xPan = _fbsize/2;
		yPan = _fbsize/2 - 1;
d198 1
a198 1
				fbsetsize( 1024 );
@


1.8
log
@Fixed message "Upper Left" to "Center" pixel.
@
text
@a13 10
 *
 * $Revision: 1.2 $
 *
 * $Log:	ikzoom.c,v $
 * Revision 1.2  84/05/02  02:04:13  mike
 * Converted to use library zoom and window functions.
 * 
 * Revision 1.1  84/03/22  23:59:43  mike
 * Initial revision
 * 
d16 1
a16 1
static char RCSid[] = "@@(#)$Header: ikzoom.c,v 1.2 84/05/02 02:04:13 mike Exp $ (BRL)";
d32 1
d34 1
a34 1
#include <fb.h>
d201 1
a201 1
				setfbsize( 1024 );
@


1.7
log
@Added explicit return on normal exit.
@
text
@d33 3
a35 3
	SCCS id:	@@(#) fbzoom.c	1.7
	Last edit: 	6/6/85 at 16:51:04
	Retrieved: 	8/13/86 at 03:15:14
d40 1
a40 1
char	sccsTag[] = "@@(#) fbzoom.c	1.7	last edit 6/6/85 at 16:51:04";
d82 1
a82 1
			 "zoom=%d, Upper Left Pixel is %d,%d            \r",
@


1.6
log
@Fixed to accomodate changes to libfb.
@
text
@d33 3
a35 3
	SCCS id:	@@(#) fbzoom.c	1.6
	Last edit: 	5/29/85 at 16:32:49
	Retrieved: 	8/13/86 at 03:15:08
d40 1
a40 1
char	sccsTag[] = "@@(#) fbzoom.c	1.6	last edit 5/29/85 at 16:32:49";
d93 1
@


1.5
log
@All utilities seem to work with the Ikonas, will test with 
UNIX files next.
@
text
@d33 3
a35 3
	SCCS id:	@@(#) fbzoom.c	1.5
	Last edit: 	3/14/85 at 17:58:12
	Retrieved: 	8/13/86 at 03:15:02
d40 1
a40 1
char	sccsTag[] = "@@(#) fbzoom.c	1.5	last edit 3/14/85 at 17:58:12";
d46 1
a46 2
#define	Zfactor		(2)
#define MaxZoom		(15)
d59 1
a59 1
{
d67 3
a69 2
	zoom = 2;
	xPan = yPan = 0;
d76 12
a87 8
	do {
		PanFactor = 128 / zoom;
		(void) fbzoom( zoom-1, zoom-1 );
		fbwindow( (xPan-1) * 4, 4063+yPan );
		printf( "zoom=%d, Upper Left Pixel is %d,%d            \r",
			zoom, xPan, yPan );
		fflush( stdout );
	} while( doKeyPad() );
d90 4
a93 4
	printf( "\n");		/* Move off of the output line.	*/
	fbzoom( zoom-1, zoom-1 );
	fbwindow( (xPan-1) * 4, 4063+yPan );
}
d112 1
a112 1
{ 
d116 1
a116 1
		return(0);		/* done */
d118 9
a126 6
	switch( ch )  {

	default:
		printf("\r\n'%c' bad -- Type ? for help\r\n", ch);
	case '?':
		printf("\r\n%s", help);
d128 8
a135 5

	case '\r':    
	case '\n':				/* Done, return to normal */
	case 'q':
		zoom = 1;
a136 7
		return(0);
	case 'Q':				/* Done, leave "as is" */
		return(0);

	case 'c':	
	case 'C':				/* Center */
		xPan = yPan = 0;
d138 2
a139 3

	case 'r':	
	case 'R':				/* Reset */
d141 2
a142 1
		xPan = yPan = 0;
d144 3
a146 4

	case ctl(v):
	case 'b':				/* zoom BIG.	*/
		if(  ++zoom > MaxZoom )
d149 2
a150 3

	case 's':				/* zoom small.	*/
		if(  --zoom < MinZoom )
d153 2
a154 3

	case 'F':
	case 'l':				/* move LEFT.	*/
d158 2
a159 3

	case ctl(f):
	case 'L':
d163 2
a164 3

	case 'N':
	case 'k':				/* move DOWN.	*/
d168 2
a169 2
	case ctl(n):
	case 'K':
d173 2
a174 3

	case 'P':
	case 'j':				/* move UP.	*/
d178 2
a179 3

	case ctl(p):
	case 'J':
d183 2
a184 3

	case 'B':
	case 'h':				/* move RIGHT.	*/
d188 2
a189 3

	case ctl(b):
	case 'H':
d193 2
a195 2
	return(1);		/* keep going */
}
@


1.4
log
@fbclear, fbcmap, fbgrid, fbzoom, fb-rle, rle-fb look good.
@
text
@d33 3
a35 3
	SCCS id:	@@(#) fbzoom.c	1.4
	Last edit: 	3/13/85 at 22:13:44
	Retrieved: 	8/13/86 at 03:14:56
d40 1
a40 1
char	sccsTag[] = "@@(#) fbzoom.c	1.4	last edit 3/13/85 at 22:13:44";
@


1.3
log
@Change names to fb*
@
text
@d2 1
a2 1
 *			I K Z O O M . C
d30 1
d33 3
a35 3
	SCCS id:	@@(#) fbzoom.c	1.3
	Last edit: 	3/13/85 at 19:03:38
	Retrieved: 	8/13/86 at 03:14:50
d40 1
a40 1
char	sccsTag[] = "@@(#) fbzoom.c	1.3	last edit 3/13/85 at 19:03:38";
a43 1
#define	IKsize 512
d51 1
a51 1
#define MaxPan		( IKsize )
d61 5
d202 22
@


1.2
log
@Put a slowish implementation of setbackground into the Ikonas 
support.  This allows setbackground to influence fbclear.
@
text
@d28 3
d32 9
d42 1
a42 9
#ifdef vax
#include <sys/ioctl.h>
#else
#include <sgtty.h>
#endif
struct sgttyb ttyold, ttynew;

int ikfd;	/* Ikonas FD */
		
d54 3
a56 3
int PanFactor;			/* Speed with whitch to pan.	*/
int zoom;			/* Zoom Factor.			*/
int xPan, yPan;			/* Pan Location.		*/
d61 2
a62 2
	ikopen();

d67 3
a69 4
	gtty( 0, &ttyold);
	ttynew = ttyold;
	ttynew.sg_flags |= RAW;
	stty( 0, &ttynew);
d73 2
a74 2
		ikzoom( zoom-1, zoom-1 );
		ikwindow( (xPan-1) * 4, 4063+yPan );
d80 1
a80 1
	stty( 0, &ttyold);
d82 2
a83 2
	ikzoom( zoom-1, zoom-1 );
	ikwindow( (xPan-1) * 4, 4063+yPan );
@


1.1
log
@Initial revision
@
text
@@
