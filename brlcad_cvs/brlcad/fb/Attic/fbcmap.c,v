head	11.9;
access;
symbols
	ansi-20040405-merged:11.5.2.2
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.5.10.2
	premerge-autoconf:11.6
	ansi-20040316-freeze:11.5.2.1
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.5.4.1
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.2
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:5.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.24.04.13.25;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.07.49.23;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2004.02.02.17.39.01;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.07.24;	author jra;	state Exp;
branches
	11.5.2.1
	11.5.4.1
	11.5.10.1;
next	11.4;

11.4
date	2002.08.15.20.54.37;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	2001.04.12.17.44.07;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.24.03.58.28;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.09.13;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.11.14.22.26.14;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.23.18.49.03;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.46.19;	author mike;	state Rel4_0;
branches;
next	9.2;

9.2
date	91.07.22.21.44.59;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.08.39;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.41.22;	author mike;	state Rel3_0;
branches;
next	7.3;

7.3
date	88.09.17.00.14.21;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	88.05.16.00.06.31;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.07.02;	author mike;	state Rel;
branches;
next	6.2;

6.2
date	87.09.16.03.44.50;	author phil;	state Exp;
branches;
next	6.1;

6.1
date	87.07.11.08.10.12;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.38.13;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.13.00.40.45;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.12.45;	author mike;	state Rel1;
branches;
next	1.14;

1.14
date	86.11.20.20.20.10;	author phil;	state Exp;
branches;
next	1.13;

1.13
date	86.10.29.20.55.07;	author phil;	state Exp;
branches;
next	1.12;

1.12
date	86.10.03.06.18.57;	author phil;	state Exp;
branches;
next	1.11;

1.11
date	86.08.26.20.50.51;	author phil;	state BRL;
branches;
next	1.10;

1.10
date	86.08.13.05.21.38;	author mike;	state Exp;
branches;
next	1.9;

1.9
date	86.08.13.03.13.40;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	86.08.13.03.13.32;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	86.08.13.03.13.25;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	86.08.13.03.13.17;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	86.08.13.03.13.09;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	86.08.13.03.13.01;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.08.13.03.12.48;	author mike;	state Exp;
branches;
next	;

11.5.2.1
date	2002.09.19.18.00.40;	author morrison;	state Exp;
branches;
next	11.5.2.2;

11.5.2.2
date	2004.03.17.21.16.06;	author morrison;	state Exp;
branches;
next	;

11.5.4.1
date	2004.03.11.23.40.41;	author morrison;	state Exp;
branches;
next	;

11.5.10.1
date	2004.02.12.19.40.45;	author erikg;	state Exp;
branches;
next	11.5.10.2;

11.5.10.2
date	2004.03.15.13.28.06;	author erikg;	state Exp;
branches;
next	;


desc
@@


11.9
log
@moved to src/fb/
@
text
@/*
 *		F B C M A P . C
 *
 *	Write a built-in colormap to a framebuffer.
 *	When invoked with no arguments, or with a flavor of 0,
 *	the standard 1:1 ramp color-map is written.
 *	Other flavors provide interesting alternatives.
 *
 *  Author -
 *	Mike Muuss, 7/17/82
 *	VAX version 10/18/83
 *
 *	Conversion to generic frame buffer utility using libfb(3).
 *	In the process, the name has been changed to fbcmap from ikcmap.
 *	Gary S. Moss, BRL. 03/12/85
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/fb/fbcmap.c,v 11.8 2004/05/10 15:30:42 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "externs.h"
#include "fb.h"

void		usage(char **argv);
int		pars_Argv(int argc, register char **argv);

static char	*framebuffer = NULL;
static int	scr_width = 0;
static int	scr_height = 0;


static ColorMap cmap;
static int	flavor = 0;
extern unsigned char	utah8[], utah9[];	/* defined at end of file */
static unsigned char	utah_cmap[256] = {
	  0,  4,  9, 13, 17, 21, 25, 29, 32, 36, 39, 42, 45, 48, 51, 54,
	 57, 59, 62, 64, 67, 69, 72, 74, 76, 78, 81, 83, 85, 87, 89, 91,
	 92, 94, 96, 98,100,101,103,105,106,108,110,111,113,114,116,117,
	119,120,121,123,124,125,127,128,129,131,132,133,134,136,137,138,
	139,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,
	156,157,158,159,160,161,162,163,164,164,165,166,167,168,169,170,
	171,171,172,173,174,175,175,176,177,178,179,179,180,181,182,182,
	183,184,185,185,186,187,187,188,189,190,190,191,192,192,193,194,
	194,194,195,196,196,197,197,198,199,199,200,201,201,202,202,203,
	204,204,205,205,206,207,207,208,208,209,209,210,211,211,212,212,
	213,213,214,214,215,215,216,216,217,217,218,219,219,220,220,221,
	221,222,222,223,223,224,224,224,225,225,226,226,227,227,228,228,
	229,229,230,230,231,231,231,232,232,233,233,234,234,235,235,235,
	236,236,237,237,238,238,238,239,239,240,240,240,241,241,242,242,
	242,243,243,244,244,244,245,245,246,246,246,247,247,248,248,248,
	249,249,249,250,250,251,251,251,252,252,252,253,253,254,254,255
};

int
main(int argc, char **argv)
{
	register int		i;
	register int		fudge;
	register ColorMap	*cp = &cmap;
	FBIO *fbp;

	if( ! pars_Argv( argc, argv ) ) {
		usage( NULL );
		return	1;
	}

	if( (fbp = fb_open( framebuffer, scr_width, scr_height )) == NULL )
		return	1;

	switch( flavor )  {

	case 0 : /* Standard - Linear color map */
		(void) fprintf( stderr, "Color map #0, linear (standard).\n" );
		cp = (ColorMap *) NULL;
		break;

	case 1 : /* Reverse linear color map */
		(void) fprintf( stderr, "Color map #1, reverse-linear (negative).\n" );
		for( i = 0; i < 256; i++ ) {
			cp->cm_red[255-i] =
			cp->cm_green[255-i] =
			cp->cm_blue[255-i] = i << 8;
		}
		break;

	case 2 :
		/* Experimental correction, for POLAROID 8x10 print film */
		(void) fprintf( stderr,
			"Color map #2, corrected for POLAROID 809/891 film.\n" );
		/* First entry black */
#define BOOST(point, bias) \
	((int)((bias)+((float)(point)/256.*(255-(bias)))))
		for( i = 1; i < 256; i++ )  {
			fudge = BOOST(i, 70);
			cp->cm_red[i] = fudge << 8;		/* B */
		}
		for( i = 1; i < 256; i++ )  {
			fudge = i;
			cp->cm_green[i] = fudge << 8;	/* G */
		}
		for( i = 1; i < 256; i++ )  {
			fudge = BOOST( i, 30 );
			cp->cm_blue[i] = fudge << 8;	/* R */
		}
		break;

	case 3 : /* Standard, with low intensities set to black */
		(void) fprintf( stderr, "Color map #3, low 100 entries black.\n" );
		for( i = 100; i < 256; i++ )  {
			cp->cm_red[i] =
			cp->cm_green[i] =
			cp->cm_blue[i] = i << 8;
		}
		break;

	case 4 : /* Amplify middle of the range, for Moss's dim pictures */
#define UPSHIFT	64
		(void) fprintf( stderr,
			"Color map #4, amplify middle range to boost dim pictures.\n" );
		/* First entry black */
		for( i = 1; i< 256-UPSHIFT; i++ )  {
			register int j = i + UPSHIFT;
			cp->cm_red[i] =
			cp->cm_green[i] =
			cp->cm_blue[i] = j << 8;
		}
		for( i = 256-UPSHIFT; i < 256; i++ )  {
			cp->cm_red[i] =
			cp->cm_green[i] =
			cp->cm_blue[i] = 255 << 8;	/* Full Scale */
		}
		break;

	case 5 : /* University of Utah's color map */
		(void) fprintf( stderr,
			"Color map #5, University of Utah's gamma correcting map.\n" );
		for( i = 0; i < 256; i++ )
			cp->cm_red[i] =
			cp->cm_green[i] =
			cp->cm_blue[i] = utah_cmap[i] << 8;
		break;

	case 6 :	/* Delta's */
		(void) fprintf( stderr, "Color map #6, color deltas.\n" );
		/* white at zero */
		cp->cm_red[0] = 65535;
		cp->cm_green[0] = 65535;
		cp->cm_blue[0] = 65535;
		/* magenta at 32 */
		cp->cm_red[32] = 65535;
		cp->cm_blue[32] = 65535;
		/* Red at 64 */
		cp->cm_red[32*2] = 65535;
		/* Yellow ... */
		cp->cm_red[32*3] = 65535;
		cp->cm_green[32*3] = 65535;
		/* Green */
		cp->cm_green[32*4] = 65535;
		/* Cyan */
		cp->cm_green[32*5] = 65535;
		cp->cm_blue[32*5] = 65535;
		/* Blue */
		cp->cm_blue[32*6] = 65535;
		break;

	case 8:
		(void) fprintf( stderr, "Color map #8, Ikcmap 8.\n" );
		for( i = 0; i < 256; i++ ) {
			cp->cm_red[i] = utah8[3*i] << 8;
			cp->cm_green[i] = utah8[3*i+1] << 8;
			cp->cm_blue[i] = utah8[3*i+2] << 8;
		}
		break;

	case 9:
		(void) fprintf( stderr, "Color map #9, Ikcmap 9.\n" );
		for( i = 0; i < 256; i++ ) {
			cp->cm_red[i] = utah9[3*i] << 8;
			cp->cm_green[i] = utah9[3*i+1] << 8;
			cp->cm_blue[i] = utah9[3*i+2] << 8;
		}
		break;

	case 10:	/* Black */
		(void) fprintf( stderr, "Color map #10, solid black.\n" );
		break;

	case 11:	/* White */
		(void) fprintf( stderr, "Color map #11, solid white.\n" );
		for( i = 0; i < 256; i++ )  {
			cp->cm_red[i] =
			cp->cm_green[i] =
			cp->cm_blue[i] = 255 << 8;
		}
		break;

	case 12:	/* 18% Grey */
		(void) fprintf( stderr, "Color map #12, 18%% neutral grey.\n" );
		for( i = 0; i < 256; i++ )  {
			cp->cm_red[i] =
			cp->cm_green[i] =
			cp->cm_blue[i] = 46 << 8;
		}
		break;

	default:
		(void) fprintf(	stderr,
				"Color map #%d, flavor not implemented!\n",
				flavor );
		usage( NULL );
		return	1;
	}
	fb_wmap( fbp, cp );
	return fb_close( fbp );
}

/*	p a r s _ A r g v ( )
 */
int
pars_Argv(int argc, register char **argv)
{
	register int	c;
	extern int	optind;

	while( (c = getopt( argc, argv, "hF:s:S:w:W:n:N:" )) != EOF ) {
		switch( c ) {
		case 'h' :
			scr_width = scr_height = 1024;
			break;
		case 'F':
			framebuffer = optarg;
			break;
		case 'S':
		case 's':
			/* square file size */
			scr_height = scr_width = atoi(optarg);
			break;
		case 'w':
		case 'W':
			scr_width = atoi(optarg);
			break;
		case 'n':
		case 'N':
			scr_height = atoi(optarg);
			break;
		case '?' :
			return	0;
		}
	}
	if( argv[optind] != NULL )
		flavor = atoi( argv[optind] );
	return	1;
}

void
usage(char **argv)
{
	(void) fprintf(stderr,"Usage : fbcmap [-h] [-F framebuffer]\n");
	(void) fprintf(stderr,"	[-{sS} squarescrsize] [-{wW} scr_width] [-{nN} scr_height]\n");
	(void) fprintf(stderr,"	[map_number]\n" );
	(void) fprintf( stderr,
			"Color map #0, linear (standard).\n" );
	(void) fprintf( stderr,
			"Color map #1, reverse-linear (negative).\n" );
	(void) fprintf( stderr,
		"Color map #2, corrected for POLAROID 809/891 film.\n" );
	(void) fprintf( stderr,
			"Color map #3, low 100 entries black.\n" );
	(void) fprintf( stderr,
		"Color map #4, amplify middle range to boost dim pictures.\n" );
	(void) fprintf( stderr,
		"Color map #5, University of Utah's gamma correcting map.\n" );
	(void) fprintf( stderr, "Color map #6, color deltas.\n" );
	(void) fprintf( stderr, "Color map #8, ikcmap 8.\n" );
	(void) fprintf( stderr, "Color map #9, ikcmap 9.\n" );
	(void) fprintf( stderr, "Color map #10, solid black.\n" );
	(void) fprintf( stderr, "Color map #11, solid white.\n" );
	(void) fprintf( stderr, "Color map #12, 18%% neutral grey.\n" );
}

/* Ikcmap 8 & 9 colormaps */
unsigned char utah8[256*3] = {
	/* from 27.rle */
	249, 58, 8,
	250, 50, 7,
	250, 43, 6,
	250, 36, 5,
	250, 29, 4,
	251, 21, 3,
	251, 14, 2,
	251, 7, 1,
	252, 0, 0,
	244, 0, 7,
	236, 0, 15,
	228, 0, 23,
	220, 0, 31,
	212, 0, 39,
	204, 0, 47,
	196, 0, 55,
	189, 0, 63,
	181, 0, 71,
	173, 0, 79,
	165, 0, 87,
	157, 0, 95,
	149, 0, 103,
	141, 0, 111,
	133, 0, 119,
	126, 0, 127,
	118, 0, 134,
	110, 0, 142,
	102, 0, 150,
	94, 0, 158,
	86, 0, 166,
	78, 0, 174,
	70, 0, 182,
	63, 0, 190,
	55, 0, 198,
	47, 0, 206,
	39, 0, 214,
	31, 0, 222,
	23, 0, 230,
	15, 0, 238,
	7, 0, 246,
	0, 0, 254,
	7, 7, 253,
	14, 15, 252,
	21, 22, 252,
	28, 30, 251,
	35, 37, 251,
	42, 45, 250,
	49, 52, 250,
	56, 60, 249,
	63, 68, 249,
	70, 75, 248,
	77, 83, 248,
	84, 90, 247,
	91, 98, 247,
	98, 105, 246,
	105, 113, 246,
	112, 121, 245,
	119, 128, 244,
	126, 136, 244,
	133, 143, 243,
	140, 151, 243,
	147, 158, 242,
	154, 166, 242,
	161, 173, 241,
	168, 181, 241,
	175, 189, 240,
	182, 196, 240,
	189, 204, 239,
	196, 211, 239,
	203, 219, 238,
	210, 226, 238,
	217, 234, 237,
	225, 242, 237,
	224, 234, 235,
	223, 227, 233,
	222, 220, 232,
	221, 212, 230,
	220, 205, 229,
	219, 198, 227,
	219, 191, 225,
	218, 183, 224,
	217, 176, 222,
	216, 169, 221,
	215, 161, 219,
	214, 154, 217,
	214, 147, 216,
	213, 140, 214,
	212, 132, 213,
	211, 125, 211,
	210, 118, 209,
	209, 110, 208,
	208, 103, 206,
	208, 96, 205,
	207, 89, 203,
	206, 81, 201,
	205, 74, 200,
	204, 67, 198,
	203, 59, 197,
	203, 52, 195,
	202, 45, 193,
	201, 38, 192,
	200, 30, 190,
	199, 23, 189,
	198, 16, 187,
	198, 9, 186,
	191, 15, 185,
	185, 22, 184,
	179, 28, 183,
	173, 35, 183,
	167, 41, 182,
	160, 48, 181,
	154, 54, 180,
	148, 61, 180,
	142, 67, 179,
	136, 74, 178,
	129, 80, 177,
	123, 87, 177,
	117, 93, 176,
	111, 100, 175,
	105, 106, 174,
	99, 113, 174,
	92, 119, 173,
	86, 126, 172,
	80, 132, 171,
	74, 139, 171,
	68, 145, 170,
	61, 152, 169,
	55, 158, 168,
	49, 165, 168,
	43, 171, 167,
	37, 178, 166,
	30, 184, 165,
	24, 191, 165,
	18, 197, 164,
	12, 204, 163,
	6, 210, 162,
	0, 217, 162,
	0, 211, 159,
	0, 206, 156,
	0, 201, 153,
	0, 196, 151,
	0, 191, 148,
	0, 186, 145,
	0, 181, 142,
	0, 176, 140,
	0, 171, 137,
	0, 166, 134,
	0, 160, 131,
	0, 155, 129,
	0, 150, 126,
	0, 145, 123,
	0, 140, 120,
	0, 135, 118,
	0, 130, 115,
	0, 125, 112,
	0, 120, 109,
	0, 115, 107,
	0, 110, 104,
	0, 104, 101,
	0, 99, 98,
	0, 94, 96,
	0, 89, 93,
	0, 84, 90,
	0, 79, 87,
	0, 74, 85,
	0, 69, 82,
	0, 64, 79,
	0, 59, 76,
	0, 54, 74,
	0, 52, 71,
	0, 50, 69,
	0, 48, 67,
	0, 47, 64,
	0, 45, 62,
	0, 43, 60,
	0, 42, 57,
	0, 40, 55,
	0, 38, 53,
	0, 37, 50,
	0, 35, 48,
	0, 33, 46,
	0, 32, 43,
	0, 30, 41,
	0, 28, 39,
	0, 27, 37,
	0, 25, 34,
	0, 23, 32,
	0, 21, 30,
	0, 20, 27,
	0, 18, 25,
	0, 16, 23,
	0, 15, 20,
	0, 13, 18,
	0, 11, 16,
	0, 10, 13,
	0, 8, 11,
	0, 6, 9,
	7, 7, 1,
	15, 14, 2,
	22, 21, 3,
	30, 29, 4,
	37, 36, 5,
	45, 43, 6,
	53, 50, 7,
	60, 58, 8,
	68, 65, 9,
	75, 72, 10,
	83, 80, 11,
	91, 87, 12,
	98, 94, 13,
	106, 101, 14,
	113, 109, 15,
	121, 116, 16,
	129, 123, 17,
	136, 131, 18,
	144, 138, 19,
	151, 145, 20,
	159, 152, 21,
	167, 160, 22,
	174, 167, 23,
	182, 174, 24,
	189, 182, 25,
	197, 189, 26,
	205, 196, 27,
	212, 203, 28,
	220, 211, 29,
	227, 218, 30,
	235, 225, 31,
	243, 233, 32,
	243, 225, 31,
	243, 218, 30,
	243, 211, 29,
	244, 203, 28,
	244, 196, 27,
	244, 189, 26,
	244, 182, 25,
	245, 174, 24,
	245, 167, 23,
	245, 160, 22,
	246, 152, 21,
	246, 145, 20,
	246, 138, 19,
	246, 131, 18,
	247, 123, 17,
	247, 116, 16,
	247, 109, 15,
	248, 101, 14,
	248, 94, 13,
	248, 87, 12,
	248, 80, 11,
	249, 72, 10,
	249, 65, 9,
	0, 0, 0,
	0, 0, 0,
	0, 0, 0,
	255, 255, 255,
};
unsigned char utah9[256*3] = {
	/* from 31.rle */
	42, 89, 105,
	37, 85, 101,
	32, 80, 97,
	26, 76, 93,
	21, 71, 89,
	16, 67, 85,
	10, 62, 81,
	5, 58, 77,
	0, 54, 74,
	0, 52, 72,
	0, 51, 70,
	0, 50, 68,
	0, 48, 66,
	0, 47, 65,
	0, 46, 63,
	0, 44, 61,
	0, 43, 59,
	0, 42, 58,
	0, 41, 56,
	0, 39, 54,
	0, 38, 52,
	0, 37, 51,
	0, 35, 49,
	0, 34, 47,
	0, 33, 45,
	0, 32, 44,
	0, 30, 42,
	0, 29, 40,
	0, 28, 38,
	0, 27, 37,
	0, 25, 35,
	0, 24, 33,
	0, 23, 31,
	0, 21, 29,
	0, 20, 28,
	0, 19, 26,
	0, 17, 24,
	0, 16, 22,
	0, 15, 21,
	0, 14, 19,
	0, 12, 17,
	0, 11, 15,
	0, 10, 14,
	0, 9, 12,
	0, 7, 10,
	0, 6, 8,
	0, 5, 7,
	0, 3, 5,
	0, 2, 3,
	0, 1, 1,
	0, 0, 0,
	5, 5, 0,
	11, 11, 1,
	17, 16, 2,
	23, 22, 3,
	28, 27, 3,
	34, 33, 4,
	40, 38, 5,
	46, 44, 6,
	52, 49, 6,
	57, 55, 7,
	63, 61, 8,
	69, 66, 9,
	75, 72, 9,
	81, 77, 10,
	86, 83, 11,
	92, 88, 12,
	98, 94, 12,
	104, 99, 13,
	109, 105, 14,
	115, 110, 15,
	121, 116, 16,
	127, 122, 16,
	133, 127, 17,
	138, 133, 18,
	144, 138, 19,
	150, 144, 19,
	156, 149, 20,
	162, 155, 21,
	167, 160, 22,
	173, 166, 22,
	179, 171, 23,
	185, 177, 24,
	190, 183, 25,
	196, 188, 25,
	202, 194, 26,
	208, 199, 27,
	214, 205, 28,
	219, 210, 28,
	225, 216, 29,
	231, 221, 30,
	237, 227, 31,
	243, 233, 32,
	243, 227, 31,
	243, 221, 30,
	243, 216, 29,
	243, 210, 28,
	244, 205, 28,
	244, 199, 27,
	244, 194, 26,
	244, 188, 25,
	244, 183, 25,
	245, 177, 24,
	245, 171, 23,
	245, 166, 22,
	245, 160, 22,
	246, 155, 21,
	246, 149, 20,
	246, 144, 19,
	246, 138, 19,
	246, 133, 18,
	247, 127, 17,
	247, 122, 16,
	247, 116, 16,
	247, 110, 15,
	247, 105, 14,
	248, 99, 13,
	248, 94, 12,
	248, 88, 12,
	248, 83, 11,
	249, 77, 10,
	249, 72, 9,
	249, 66, 9,
	249, 61, 8,
	249, 55, 7,
	250, 49, 6,
	250, 44, 6,
	250, 38, 5,
	250, 33, 4,
	250, 27, 3,
	251, 22, 3,
	251, 16, 2,
	251, 11, 1,
	251, 5, 0,
	252, 0, 0,
	245, 0, 6,
	239, 0, 12,
	233, 0, 18,
	227, 0, 24,
	221, 0, 30,
	215, 0, 36,
	209, 0, 42,
	203, 0, 48,
	197, 0, 54,
	191, 0, 60,
	185, 0, 66,
	179, 0, 72,
	173, 0, 78,
	167, 0, 84,
	161, 0, 90,
	155, 0, 96,
	149, 0, 102,
	143, 0, 108,
	137, 0, 114,
	131, 0, 120,
	126, 0, 127,
	119, 0, 133,
	114, 0, 139,
	107, 0, 145,
	102, 0, 151,
	95, 0, 157,
	90, 0, 163,
	83, 0, 169,
	78, 0, 175,
	71, 0, 181,
	66, 0, 187,
	59, 0, 193,
	54, 0, 199,
	47, 0, 205,
	42, 0, 211,
	35, 0, 217,
	30, 0, 223,
	23, 0, 229,
	18, 0, 235,
	11, 0, 241,
	6, 0, 247,
	0, 0, 254,
	5, 5, 253,
	10, 11, 253,
	16, 17, 252,
	21, 23, 252,
	26, 28, 251,
	32, 34, 251,
	37, 40, 251,
	42, 46, 250,
	48, 51, 250,
	53, 57, 249,
	58, 63, 249,
	64, 69, 249,
	69, 74, 248,
	75, 80, 248,
	80, 86, 247,
	85, 92, 247,
	91, 97, 247,
	96, 103, 246,
	101, 109, 246,
	107, 115, 245,
	112, 121, 245,
	117, 126, 245,
	123, 132, 244,
	128, 138, 244,
	133, 144, 243,
	139, 149, 243,
	144, 155, 243,
	150, 161, 242,
	155, 167, 242,
	160, 172, 241,
	166, 178, 241,
	171, 184, 241,
	176, 190, 240,
	182, 195, 240,
	187, 201, 239,
	192, 207, 239,
	198, 213, 239,
	203, 218, 238,
	208, 224, 238,
	214, 230, 237,
	219, 236, 237,
	225, 242, 237,
	219, 237, 233,
	214, 233, 229,
	208, 228, 225,
	203, 224, 221,
	198, 219, 217,
	192, 215, 213,
	187, 210, 209,
	182, 206, 205,
	176, 201, 202,
	171, 197, 198,
	166, 192, 194,
	160, 188, 190,
	155, 183, 186,
	149, 179, 182,
	144, 174, 178,
	139, 170, 174,
	133, 165, 171,
	128, 161, 167,
	123, 156, 163,
	117, 152, 159,
	112, 148, 155,
	107, 143, 151,
	101, 139, 147,
	96, 134, 143,
	91, 130, 139,
	85, 125, 136,
	80, 121, 132,
	74, 116, 128,
	69, 112, 124,
	64, 107, 120,
	58, 103, 116,
	53, 98, 112,
	48, 94, 108,
	0, 0, 0,
	0, 0, 0,
	0, 0, 0,
	255, 255, 255,
};
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/fbcmap.c,v 11.7 2004/04/05 07:49:23 morrison Exp $ (BRL)";
@


11.7
log
@merge of ansi-6-0-branch into HEAD
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d30 5
a34 1
#include "conf.h"
@


11.6
log
@update copyright to include span through 2003
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcmap.c,v 11.5 2002/08/20 17:07:24 jra Exp $ (BRL)";
d37 2
a38 2
void		usage();
int		pars_Argv();
d68 1
a68 2
main(argc, argv)
char *argv[];
d76 1
a76 1
		usage();
d223 1
a223 1
		usage();
d233 1
a233 2
pars_Argv( argc, argv )
register char	**argv;
d269 1
a269 1
usage()
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d23 1
a23 1
 *	This software is Copyright (C) 1986 by the United States Army.
d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcmap.c,v 11.3 2001/04/12 17:44:07 bparker Exp $ (BRL)";
@


11.5.4.1
log
@sync to HEAD...
@
text
@d23 1
a23 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/fb/fbcmap.c,v 11.6 2004/02/02 17:39:01 morrison Exp $ (BRL)";
@


11.5.10.1
log
@merge from HEAD
@
text
@d23 1
a23 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcmap.c,v 11.6 2004/02/02 17:39:01 morrison Exp $ (BRL)";
@


11.5.10.2
log
@merge from head
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcmap.c,v 11.5.10.1 2004/02/12 19:40:45 erikg Exp $ (BRL)";
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcmap.c,v 11.5 2002/08/20 17:07:24 jra Exp $ (BRL)";
d37 2
a38 2
void		usage(char **argv);
int		pars_Argv(int argc, register char **argv);
d68 2
a69 1
main(int argc, char **argv)
d77 1
a77 1
		usage( NULL );
d224 1
a224 1
		usage( NULL );
d234 2
a235 1
pars_Argv(int argc, register char **argv)
d271 1
a271 1
usage(char **argv)
@


11.5.2.2
log
@sync branch with HEAD
@
text
@d23 1
a23 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d27 1
a27 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d37 2
a38 2
void		usage(char **argv);
int		pars_Argv(int argc, register char **argv);
d68 2
a69 1
main(int argc, char **argv)
d77 1
a77 1
		usage( NULL );
d224 1
a224 1
		usage( NULL );
d234 2
a235 1
pars_Argv(int argc, register char **argv)
d271 1
a271 1
usage(char **argv)
@


11.3
log
@*- get rid of warnings
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcmap.c,v 11.2 2000/08/24 03:58:28 mike Exp $ (BRL)";
d37 2
a38 2
void		usage();
int		pars_Argv();
d68 1
a68 2
main(argc, argv)
char *argv[];
d76 1
a76 1
		usage();
d223 1
a223 1
		usage();
d233 1
a233 2
pars_Argv( argc, argv )
register char	**argv;
d269 1
a269 1
usage()
@


11.2
log
@
const RCSid
@
text
@d27 1
a27 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcmap.c,v 11.1 1995/01/04 10:09:13 mike Rel4_4 $ (BRL)";
d38 1
d67 1
@


11.1
log
@Release_4.4
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcmap.c,v 10.3 94/11/14 22:26:14 mike Exp $ (BRL)";
@


10.3
log
@Irix 6
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcmap.c,v 10.2 94/08/23 18:49:03 gdurf Exp Locker: mike $ (BRL)";
@


10.2
log
@Added includes, factored ifdefs
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcmap.c,v 10.1 1991/10/12 06:46:19 mike Rel4_0 gdurf $ (BRL)";
a71 1
	int	size;
@


10.1
log
@Release_4.0
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcmap.c,v 9.2 91/07/22 21:44:59 mike Exp $ (BRL)";
d30 2
d33 2
a35 4

extern int	getopt();
extern char	*optarg;
extern int	optind;
@


9.2
log
@Eliminated u_char typedef, which conflicts on the IBM
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcmap.c,v 9.1 89/05/19 06:08:39 mike Rel3_5 $ (BRL)";
@


9.1
log
@Release_3.5
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 8.1 88/10/05 00:41:22 mike Rel3_0 $ (BRL)";
a37 1
typedef unsigned char	u_char;
d46 2
a47 2
extern u_char	utah8[], utah9[];	/* defined at end of file */
static u_char	utah_cmap[256] = {
d296 1
a296 1
u_char utah8[256*3] = {
d555 1
a555 1
u_char utah9[256*3] = {
@


8.1
log
@Release_3.0
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 7.3 88/09/17 00:14:21 mike Exp $ (BRL)";
@


7.3
log
@added getopt and all the size options
@
text
@d27 1
a27 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 7.2 88/05/16 00:06:31 mike Locked $ (BRL)";
@


7.2
log
@lint fixes
@
text
@d4 1
a4 3
 *	Usage:	fbcmap [-h] [flavor]
 *
 *	Write a colormap to a framebuffer.
d6 1
a6 1
 *	the standard ramp color-map is written.
d27 1
a27 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 7.1 87/11/03 00:07:02 mike Locked $ (BRL)";
d33 5
a37 1
void	usage();
d39 6
a44 1
int hires = 0;
a75 2
	size = 512;

d80 2
a81 2
	if( hires ) size = 1024;
	if( (fbp = fb_open( NULL, size, size )) == NULL )
d240 1
a240 1
	while( (c = getopt( argc, argv, "h" )) != EOF ) {
d242 21
a262 5
			case 'h' : /* High resolution frame buffer.	*/
				hires++;
				break;
			case '?' :
				return	0;
d273 3
a275 1
	(void) fprintf( stderr, "Usage : fbcmap	[-h] [map_number]\n" );
@


7.1
log
@Release 2.3
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 6.2 87/09/16 03:44:50 phil Exp $ (BRL)";
d35 1
d249 1
a249 1

@


6.2
log
@added ikcmap maps 8 & 9
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 6.1 87/07/11 08:10:12 phil Locked $ (BRL)";
@


6.1
log
@Release 2.0
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 5.1 87/06/24 22:38:13 mike Rel $ (BRL)";
d39 1
d174 18
d265 2
d271 520
@


5.1
log
@Release 1.24
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 4.2 87/02/13 00:40:45 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 4.1 86/12/29 03:12:45 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: fbcmap.c,v 1.14 86/11/20 20:20:10 phil Exp $ (BRL)";
@


1.14
log
@added delta colormap
format changes
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
@


1.13
log
@Fixed -h flag.
@
text
@d2 28
a29 9
	SCCS id:	@@(#) fbcmap.c	1.9
	Last edit: 	7/26/86 at 21:33:10	D A Gwyn
	Retrieved: 	8/13/86 at 03:13:36
	SCCS archive:	/m/cad/fb_utils/RCS/s.fbcmap.c

*/
#if ! defined( lint )
static
char	sccsTag[] = "@@(#) fbcmap.c	1.9	last edit 7/26/86 at 21:33:10";
a30 2
/*
	F B C M A P
a31 16
	Mike Muuss, 7/17/82
	VAX version 10/18/83

	Conversion to generic frame buffer utility using libfb(3).
	In the process, the name has been changed to fbcmap from ikcmap.
	Gary S. Moss, BRL. 03/12/85

	Compile:	make fbcmap

	Usage:	fbcmap [-h] [flavor]

	When invoked with no arguments, or with a flavor of 0,
	the standard ramp color-map is written.
	Other flavors provide interesting alternatives.
 */

d39 1
a39 2
static u_char	utah_cmap[256] =
	{
d56 1
a56 1
	};
d69 1
a69 2
	if( ! pars_Argv( argc, argv ) )
		{
d72 1
a72 1
		}
d79 2
a80 4
	case 0 : /* Standard - Linear color map.			*/
		(void) fprintf( stderr,
				"Color map #0, linear (standard).\n"
				);
d84 3
a86 6
	case 1 : /* Reverse linear color map.				*/
		(void) fprintf( stderr,
				"Color map #1, reverse-linear (negative).\n"
				);
		for( i = 0; i < 256; i++ )
			{
d90 1
a90 1
			}
d96 2
a97 3
			"Color map #2, corrected for POLAROID 809/891 film.\n"
				);
		/* First entry black.					*/
d114 2
a115 4
	case 3 : /* Standard, with low intensities set to black.	*/
		(void) fprintf( stderr,
				"Color map #3, low 100 entries black.\n"
				);
d126 2
a127 3
	"Color map #4, amplify middle range to boost dim pictures.\n"
				);
		/* First entry black.					*/
d141 1
a141 1
	case 5 : /* University of Utah's color map.			*/
d143 1
a143 2
			"Color map #5, University of Utah's color map.\n"
				);
d150 23
d175 1
a175 6
/*		for( i = 0; i < 256; i++ )  {
			cp->cm_red[i] =
			cp->cm_green[i] =
			cp->cm_blue[i] = 0;
		}
*/		break;
d198 1
a198 2
				flavor
				);
d211 1
a211 1
	{
d215 2
a216 4
	while( (c = getopt( argc, argv, "h" )) != EOF )
		{
		switch( c )
			{
a221 1
			}
d223 1
d227 1
a227 1
	}
d232 1
a232 1
	(void) fprintf( stderr, "Usage : fbcmap	[-h] [(1-5,10-12)]\n" );
d234 1
a234 2
			"Color map #0, linear (standard).\n"
			);
d236 1
a236 2
			"Color map #1, reverse-linear (negative).\n"
			);
d238 1
a238 2
		"Color map #2, corrected for POLAROID 809/891 film.\n"
			);
d240 1
a240 2
			"Color map #3, low 100 entries black.\n"
			);
d242 1
a242 2
	"Color map #4, amplify middle range to boost dim pictures.\n"
			);
d244 2
a245 2
		"Color map #5, University of Utah's color map.\n"
			);
@


1.12
log
@Converted to new libfb
@
text
@d64 1
d67 2
d74 2
a75 1
	if( (fbp = fb_open( 0, 512, 512 )) == NULL )
@


1.11
log
@Added usage message with map list.
@
text
@d35 1
d64 1
d71 1
a71 1
	if( fbopen( NULL, APPEND ) == -1 )
d91 1
a91 1
			cp->cm_blue[255-i] = i;
d105 1
a105 1
			cp->cm_red[i] = fudge;		/* B */
d109 1
a109 1
			cp->cm_green[i] = fudge;	/* G */
d113 1
a113 1
			cp->cm_blue[i] = fudge;	/* R */
d124 1
a124 1
			cp->cm_blue[i] = i;
d138 1
a138 1
			cp->cm_blue[i] = j;
d143 1
a143 1
			cp->cm_blue[i] = 255;	/* Full Scale */
d154 1
a154 1
			cp->cm_blue[i] = utah_cmap[i];
d171 1
a171 1
			cp->cm_blue[i] = 255;
d180 1
a180 1
			cp->cm_blue[i] = 46;
d192 2
a193 1
	return fb_wmap( cp ) == -1;
d210 1
a210 1
				fbsetsize( 1024 );
@


1.10
log
@Updated #includes for new conventions
@
text
@d66 1
a66 1
		(void) fprintf( stderr, "Usage : fbcmap	[-h] [(1-4)]\n" );
d187 1
d217 27
@


1.9
log
@oops, forgot to double % in printf format
@
text
@d30 1
d32 2
a33 1
#include <fb.h>
d206 1
a206 1
				setfbsize( 1024 );
@


1.8
log
@added black, white, grey
@
text
@d2 3
a4 3
	SCCS id:	@@(#) fbcmap.c	1.8
	Last edit: 	7/26/86 at 21:29:38	D A Gwyn
	Retrieved: 	8/13/86 at 03:13:29
d10 1
a10 1
char	sccsTag[] = "@@(#) fbcmap.c	1.8	last edit 7/26/86 at 21:29:38";
d172 1
a172 1
		(void) fprintf( stderr, "Color map #12, 18% neutral grey.\n" );
@


1.7
log
@Added Utah color map (#5).
@
text
@d2 3
a4 3
	SCCS id:	@@(#) fbcmap.c	1.7
	Last edit: 	5/10/85 at 12:52:06	G S M
	Retrieved: 	8/13/86 at 03:13:21
d10 1
a10 1
char	sccsTag[] = "@@(#) fbcmap.c	1.7	last edit 5/10/85 at 12:52:06";
d19 1
a19 1
	In the process, the name has been changed to fbclear from ikclear.
d71 1
d78 1
d81 1
a81 1
				"Color map #1, reverse-linear.\n"
d90 1
d112 1
d123 1
d142 1
d152 28
a213 1

@


1.6
log
@Fixed usage message.
@
text
@d2 3
a4 3
	SCCS id:	@@(#) fbcmap.c	1.6
	Last edit: 	3/28/85 at 15:44:52	G S M
	Retrieved: 	8/13/86 at 03:13:13
d10 1
a10 1
char	sccsTag[] = "@@(#) fbcmap.c	1.6	last edit 3/28/85 at 15:44:52";
d32 1
d35 19
d136 9
@


1.5
log
@All utilities seem to work with the Ikonas, will test with 
UNIX files next.
@
text
@d2 3
a4 3
	SCCS id:	@@(#) fbcmap.c	1.5
	Last edit: 	3/14/85 at 17:57:45	G S M
	Retrieved: 	8/13/86 at 03:13:05
d10 1
a10 1
char	sccsTag[] = "@@(#) fbcmap.c	1.5	last edit 3/14/85 at 17:57:45";
d24 1
a24 1
	Usage:	fbcmap [flavor]
d44 1
a44 1
		(void) fprintf( stderr, "Usage : fbcmap	[-h]\n" );
@


1.4
log
@fbclear, fbcmap, fbgrid, fbzoom, fb-rle, rle-fb look good.
@
text
@d2 3
a4 3
	SCCS id:	@@(#) fbcmap.c	1.4
	Last edit: 	3/13/85 at 22:13:07	G S M
	Retrieved: 	8/13/86 at 03:12:58
d10 1
a10 1
char	sccsTag[] = "@@(#) fbcmap.c	1.4	last edit 3/13/85 at 22:13:07";
@


1.1
log
@Initial revision
@
text
@d2 27
a28 12
 *			C M A P
 *
 * Mike Muuss, 7/17/82
 * VAX version 10/18/83
 *
 * Compile:	cc cmap.c iklib.o -o cmap
 *
 * Usage:	cmap [flavor]
 *
 * When invoked with no arguments, or with a flavor of 0,
 * the standard ramp color-map is written.
 * Other flavors provide interesting alternatives.
d30 4
a34 2
long cmap[1024];		/* Color map work area */

d38 3
a40 3
	register int i;
	register int flavor = 0;
	register int fudge;
d42 7
a48 2
	if( argc > 1 )
		flavor = atoi(argv[1] );
a49 2
	ikopen();

d51 5
a55 9

	case 0:
		/* Standard */
		for( i = 0; i < 256; i++ )  {
			cmap[i] =
				( i << (2+20) ) |		/* B */
				( i << (2+10) ) |		/* G */
				( i << (2+0 ) );		/* R */
		}
d57 10
a66 8
	case 1:
		for( i = 0; i < 256; i++ )  {
			cmap[i] =
				( i << (2+20) ) |		/* B */
				( i << (2+10) ) |		/* G */
				( i << (2+0 ) );		/* R */
			swap( &cmap[i] );
		}
d68 1
a68 19
	case 2:
		for( i = 0; i < 256; i++ )  {
			cmap[i] = (
				( i << (2+20) ) |		/* B */
				( i << (2+10) ) |		/* G */
				( i << (2+0 ) )			/* R */
			) & 0xFFFF;
		}
		break;
	case 3:
		/* Inverse Standard */
		for( i = 0; i < 256; i++ )  {
			cmap[255-i] =
				( i << (2+20) ) |		/* B */
				( i << (2+10) ) |		/* G */
				( i << (2+0 ) );		/* R */
		}
		break;
	case 4:
d70 4
a73 1
		cmap[0] = 0;		/* BLACK */
d78 1
a78 1
			cmap[i] |= ( fudge << (2+20) );		/* B */
d82 1
a82 1
			cmap[i] |= ( fudge << (2+10) );		/* G */
d86 1
a86 1
			cmap[i] |= ( fudge << (2+0 ) );		/* R */
d89 4
a92 2
	case 5:
		/* Standard, with low intensities set to black */
d94 3
a96 4
			cmap[i] =
				( i << (2+20) ) |		/* B */
				( i << (2+10) ) |		/* G */
				( i << (2+0 ) );		/* R */
d99 1
a99 2
	case 6:
		/* Amplify middle of the range, for Moss's dim pictures */
d101 5
a105 2
		cmap[0] = 0L;			/* Black */
		for( i=1; i< 256-UPSHIFT; i++ )  {
d107 3
a109 4
			cmap[i] =
				( j << (2+20) ) |		/* B */
				( j << (2+10) ) |		/* G */
				( j << (2+0 ) );		/* R */
d111 4
a114 2
		for( i=256-UPSHIFT; i < 256; i++ )  {
			cmap[i] = 0x3FFFFFFF;		/* Full Scale */
a116 1

d118 5
a122 2
		printf("Sorry, flavor %d not implemented\n", flavor);
		exit(1);
d124 1
a124 9

	/*
	 * Replicate first copy of color map onto second copy,
	 * and also do the "overlay" portion too.
	 */
	 for( i=0; i < 256; i++ )
		cmap[i+256] = cmap[i+512] = cmap[i+512+256] = cmap[i];

	ikwmap( cmap );
d127 8
a134 9
/* For goeffy results only, a short-in-long swapper */
swap(val)
long *val;
{
	union {
		long val32;
		short val16[2];
	} temp;
	short tmp;
d136 15
a150 1
	temp.val32 = *val;
a151 5
	tmp = temp.val16[0];
	temp.val16[0] = temp.val16[1];
	temp.val16[1] = tmp;
	*val = temp.val32;
}
@
