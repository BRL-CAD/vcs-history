head	11.8;
access;
symbols
	ansi-20040405-merged:11.5.2.1
	postmerge-20040405-ansi:11.6
	premerge-20040404-ansi:11.5
	postmerge-autoconf:11.5
	autoconf-freeze:11.5
	premerge-autoconf:11.5
	ansi-20040316-freeze:11.5.2.1
	postmerge-20040315-windows:11.5
	premerge-20040315-windows:11.5
	windows-20040315-freeze:11.5
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.2
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.1
	offsite-5-3-pre:11.2
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1;
locks; strict;
comment	@ * @;


11.8
date	2004.05.24.04.13.25;	author morrison;	state dead;
branches;
next	11.7;

11.7
date	2004.05.10.15.30.42;	author erikg;	state Exp;
branches;
next	11.6;

11.6
date	2004.04.05.07.49.23;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.07.24;	author jra;	state Exp;
branches
	11.5.2.1;
next	11.4;

11.4
date	2002.08.15.20.54.37;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	2001.04.12.17.44.07;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	2000.08.24.03.58.28;	author mike;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.09.10;	author mike;	state Rel4_4;
branches;
next	10.4;

10.4
date	94.11.14.22.25.57;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	94.08.23.18.49.01;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	94.08.11.15.06.02;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.46.16;	author mike;	state Rel4_0;
branches;
next	9.2;

9.2
date	90.11.04.01.03.31;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.08.34;	author mike;	state Rel3_5;
branches;
next	8.1;

8.1
date	88.10.05.00.41.16;	author mike;	state Rel3_0;
branches;
next	1.6;

1.6
date	88.05.06.04.34.59;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	88.02.11.04.29.49;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	88.01.30.00.57.22;	author phil;	state Exp;
branches;
next	1.3;

1.3
date	88.01.08.21.58.05;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	88.01.08.20.02.04;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	88.01.08.19.52.03;	author mike;	state Exp;
branches;
next	;

11.5.2.1
date	2002.09.19.18.00.40;	author morrison;	state Exp;
branches;
next	;


desc
@Program to draw standard color bars on a framebuffer
@


11.8
log
@moved to src/fb/
@
text
@/*
 *  			F B C B A R S . C
 *  
 *  Program to make vertical color scales arranged horizontally on screen.
 *  The wonderful thing about standards is that there are so many to
 *  choose from:
 *	FCC/EBU		Full screen is FCC pattern
 *	EIA		Uses lower and upper patterns
 *	SMPTE		Uses three patterns
 *
 *  The lower portion of the screen will contain:
 *	-I, 100% white, Q, black
 *
 *  In SMPTE mode, the middle portion of the screen will contain:
 *	blue, black, magenta, black, cyan, black, 75% grey
 *
 *  The upper portion of the screen will contain:
 *	75% gray, yellow, cyan, green, magenta, red, blue
 *
 *  In EBU/FCC mode, the whole screen will contain:
 *	100% white, yellow, cyan, green, magenta, red, blue, black
 *
 *
 *  The reason for this program running directly to the framebuffer, rather
 *  than generating a pix(5) format file (like pixbackgnd(1)) is twofold:
 *	1)  Some framebuffers may have irregular shapes (like the SGI
 *	    3030 is "hi-res" mode.
 *	2)  This program will most often be used to place an image on
 *	    a framebuffer;  other processing of this image is likely
 *	    to be a rare event.
 *  Thus, this bundled version is more efficient, easier to use,
 *  and more likely to have the desired effect.
 *  
 *  Author -
 *	Michael John Muuss
 *
 *  Original inspiration -
 *	"ikcolorbars" by Mike Pique, University of North Carolina.
 *
 *  Details on SMPTE and FCC patterns -
 *	"bars" by Doris Kochanek, National Film Board of Canada
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Distribution Status -
 *	Public Domain, Distribution Unlimitied.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/fb/fbcbars.c,v 11.7 2004/05/10 15:30:42 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>

#include "machine.h"
#include "externs.h"		/* For getopt() */
#include "fb.h"

#define MAX_LINE	(8*1024)	/* Max pixels/line */
static unsigned char scanline[3*MAX_LINE];	/* 1 scanline pixel buffer */

static char	*framebuffer = NULL;

static int	scr_width = 0;
static int	scr_height = 0;

/*
 * "Since the relationship between RGB and the amplitude of YIQ in
 * the encoded signal depends on the encoder's setup value,
 * this must be defined below.  SETUP is normally 7.5 for NTSC.
 * The full luminance range is encoded into the range between
 * the setup level and 100 IRE, so Y values are effectively scaled
 * by (1-setup) when being converted to voltages.  I and Q are
 * scaled by the same amount to retain their relationship with Y.
 * To get -I and Q signals that are 40 IRE after encoding, we must
 * scale them by 1/(1-setup) before encoding."
 *
 *  "The -I and Q signals are not quite standard, since there is
 *  necessarily some luminance present when RGB is positive.
 *  They are designed to be 40 IRE P-P after encoding."
 *
 *	-- Doris Kochanek, National Film Board of Canada
 */

#define	SETUP		7.5			/* black setup; 7.5 IRE */
#define	COMP(x)		\
	(unsigned char)(((x) * 255.) / (1.0 - SETUP/100.0))	/* setup compensation */

static  RGBpixel fcc_all[8] = {
	/* 100% white */{255, 255, 255},
	/* yellow */	{191, 191, 0},
	/* cyan */	{0, 191, 191},
	/* green */	{0, 191, 0},
	/* magenta */	{191, 0, 191},
	/* red */	{191, 0, 0},
	/* blue */	{0, 0, 191},
	/* black */	{0, 0, 0}
};

/*
 *  SMPTE bars can be useful for aligning color demodulators
 */
static	RGBpixel smpte_middle[7] = {
	/* All bars at 75%, no blue, reversed side-to-side from eia_top */
	/* blue */	{0, 0, 191},
	/* black(red)*/	{0, 0, 0},
	/* magenta */	{191, 0, 191},
	/* black(green)*/{0, 0, 0},
	/* cyan */	{0, 191, 191},
	/* black(yellow)*/{0, 0, 0},
	/* 75% grey */ 	{191, 191, 191},
};

static  RGBpixel eia_top[7] = {
	/* All bars at 75% */
	/* grey */ 	{191, 191, 191},
	/* yel */	{191, 191, 0},
	/* cyan */	{0, 191, 191},
	/* green */	{0, 191, 0},
	/* magenta */	{191, 0, 191},
	/* red */	{191, 0, 0},
	/* blue */	{0, 0, 191}
};

static RGBpixel botpart[5] = {
#ifndef Floating_Initializers
	/* Most systems can't handle floating-point formulas as initializers */
	{ 0,		68,		114 },		/* 40 IRE -I */
	{ 255,		255,		255 },		/* 100% white */
	{ 69,		0,		129 },		/* 40 IRE Q */
	{ 0,		0,		0 },		/* black */
	{ 0,		0,		0 }		/* black */
#else
	{ 0,		COMP(0.2472),	COMP(0.4123) },	/* 40 IRE -I */
	{ 255,		255,		255 },		/* 100% white */
	{ COMP(0.2508),	0,		COMP(0.4670) },	/* 40 IRE Q */
	{ 0,		0,		0 },		/* black */
	{ 0,		0,		0 }		/* black */
#endif
};

static char usage[] = "\
Usage: fbcbars [-fs] [-h] [-F framebuffer]\n\
	[-S squarescrsize] [-W scr_width] [-N scr_height]\n\
	-f	FCC/EBU bars\n\
	-e	EIA bars\n\
	-s	SMPTE bars\n";

#define	M_EIA	0
#define M_FCC	1
#define M_SMPTE	2
int	mode = M_SMPTE;

int
get_args(int argc, register char **argv)
{
	register int c;

	while ( (c = getopt( argc, argv, "efshF:S:W:N:" )) != EOF )  {
		switch( c )  {
		case 'e':
			mode = M_EIA;
			break;
		case 's':
			mode = M_SMPTE;
			break;
		case 'f':
			mode = M_FCC;
			break;
		case 'h':
			/* high-res */
			scr_height = scr_width = 1024;
			break;
		case 'F':
			framebuffer = optarg;
			break;
		case 'S':
			scr_height = scr_width = atoi(optarg);
			break;
		case 'W':
			scr_width = atoi(optarg);
			break;
		case 'N':
			scr_height = atoi(optarg);
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if ( argc > ++optind )
		(void)fprintf( stderr, "fbcbars: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

int
main(int argc, char **argv)
{
	register int x, y;
	register FBIO *fbp;

	if ( !get_args( argc, argv ) )  {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	if( (fbp = fb_open( framebuffer, scr_width, scr_height )) == NULL )
		exit(12);

	/* Get the screen size we were actually given */
	scr_width = fb_getwidth(fbp);
	scr_height = fb_getheight(fbp);

	/*
	 *  Operation is bottom-to-top.
	 */
	switch(mode)  {
	case M_FCC:
		for( x=0; x<scr_width; x++) {
			COPYRGB( &scanline[3*x], fcc_all[x*8/scr_width] );
		}
		for( y=0; y<scr_height; y++)
			fb_write( fbp, 0, y, scanline, scr_width );
		break;

	case M_EIA:
		/*
		 *  Build bottom line, and send it for 1/4th of the screen,
		 *  then build the top line, and fill the rest of the screen.
		 */
		for( x=0; x<scr_width; x++) {
			COPYRGB( &scanline[3*x], botpart[x*5/scr_width] );
		}
		for( y=0; y<(scr_height/4); y++)
			fb_write( fbp, 0, y, scanline, scr_width );

		for( x=0; x<scr_width; x++)  {
			COPYRGB( &scanline[3*x], eia_top[x*7/scr_width] );
		}
		for( ; y<scr_height; y++)
			fb_write( fbp, 0, y, scanline, scr_width );
		break;

	case M_SMPTE:
		/*
		 *  Build bottom line, and send it for 3/16th of the screen,
		 *  then send the SMPTE middle for 1/16th of the screen,
		 *  then build the top line, and fill the rest of the screen.
		 *  (Convert upper 1/4 of EIA -I white Q black to smpte)
		 */
		for( x=0; x<scr_width; x++) {
			COPYRGB( &scanline[3*x], botpart[x*5/scr_width] );
		}
		for( y=0; y<(scr_height*3/16); y++)
			fb_write( fbp, 0, y, scanline, scr_width );

		for( x=0; x<scr_width; x++) {
			COPYRGB( &scanline[3*x], smpte_middle[x*7/scr_width] );
		}
		for( ; y<(scr_height*4/16); y++)
			fb_write( fbp, 0, y, scanline, scr_width );

		for( x=0; x<scr_width; x++)  {
			COPYRGB( &scanline[3*x], eia_top[x*7/scr_width] );
		}
		for( ; y<scr_height; y++)
			fb_write( fbp, 0, y, scanline, scr_width );
		break;
	}
	fb_close(fbp);
	return(0);
}
@


11.7
log
@change conf.h to a wrapped config.h
@
text
@d52 1
a52 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/fb/fbcbars.c,v 11.6 2004/04/05 07:49:23 morrison Exp $ (BRL)";
@


11.6
log
@merge of ansi-6-0-branch into HEAD
@
text
@d52 1
a52 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d55 5
a59 1
#include "conf.h"
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d52 1
a52 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcbars.c,v 11.3 2001/04/12 17:44:07 bparker Exp $ (BRL)";
d159 1
a159 2
get_args( argc, argv )
register char **argv;
d203 1
a203 3
main(argc, argv)
int argc;
char **argv;
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d52 1
a52 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcbars.c,v 11.5 2002/08/20 17:07:24 jra Exp $ (BRL)";
d159 2
a160 1
get_args(int argc, register char **argv)
d204 3
a206 1
main(int argc, char **argv)
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d159 2
a160 1
get_args(int argc, register char **argv)
d204 3
a206 1
main(int argc, char **argv)
@


11.3
log
@*- get rid of warnings
@
text
@d52 1
a52 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcbars.c,v 11.2 2000/08/24 03:58:28 mike Exp $ (BRL)";
d159 1
a159 2
get_args( argc, argv )
register char **argv;
d203 1
a203 3
main(argc, argv)
int argc;
char **argv;
@


11.2
log
@
const RCSid
@
text
@d52 1
a52 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/fb/fbcbars.c,v 11.1 1995/01/04 10:09:10 mike Rel4_4 $ (BRL)";
d158 1
d203 1
d280 1
@


11.1
log
@Release_4.4
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcbars.c,v 10.4 94/11/14 22:25:57 mike Exp $ (BRL)";
@


10.4
log
@Irix 6
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcbars.c,v 10.3 94/08/23 18:49:01 gdurf Exp Locker: mike $ (BRL)";
@


10.3
log
@Added includes, factored ifdefs
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcbars.c,v 10.2 1994/08/11 15:06:02 mike Exp gdurf $ (BRL)";
a64 1
static int scanbytes;			/* # of bytes of scanline */
@


10.2
log
@Reduced use of RGBpixel
Now use (unsigned char *)
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcbars.c,v 10.1 91/10/12 06:46:16 mike Rel4_0 Locker: mike $ (BRL)";
d55 2
d58 3
a61 4

extern int	getopt();
extern char	*optarg;
extern int	optind;
@


10.1
log
@Release_4.0
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: /m/cad/fb/RCS/fbcbars.c,v 9.2 90/11/04 01:03:31 mike Exp $ (BRL)";
d63 1
a63 1
static RGBpixel scanline[MAX_LINE];	/* 1 scanline pixel buffer */
d227 1
a227 1
			COPYRGB( scanline[x], fcc_all[x*8/scr_width] );
d239 1
a239 1
			COPYRGB( scanline[x], botpart[x*5/scr_width] );
d245 1
a245 1
			COPYRGB( scanline[x], eia_top[x*7/scr_width] );
d259 1
a259 1
			COPYRGB( scanline[x], botpart[x*5/scr_width] );
d265 1
a265 1
			COPYRGB( scanline[x], smpte_middle[x*7/scr_width] );
d271 1
a271 1
			COPYRGB( scanline[x], eia_top[x*7/scr_width] );
@


9.2
log
@Added -e flag for EIA mode.
Changed default to SMPTE mode.
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: /m/cad/util/RCS/fbcbars.c,v 9.1 89/05/19 06:08:34 mike Rel3_5 $ (BRL)";
@


9.1
log
@Release_3.5
@
text
@d8 1
a8 1
 *	EIA		Uses lower and upper patterns (default)
d52 1
a52 1
static char RCSid[] = "@@(#)$Header: fbcbars.c,v 8.1 88/10/05 00:41:16 mike Rel3_0 $ (BRL)";
d62 1
a62 1
#define MAX_LINE	2048		/* Max pixels/line */
d150 1
d156 1
a156 1
int	mode = M_EIA;
d163 1
a163 1
	while ( (c = getopt( argc, argv, "fshF:S:W:N:" )) != EOF )  {
d165 3
@


8.1
log
@Release_3.0
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: fbcbars.c,v 1.6 88/05/06 04:34:59 mike Exp $ (BRL)";
@


1.6
log
@All systems now get non-floating point values.
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: fbcbars.c,v 1.5 88/02/11 04:29:49 mike Exp $ (BRL)";
@


1.5
log
@#ifdef'ed around problem that SYSV can't handle floating point formuals
for static initializers.
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: fbcbars.c,v 1.4 88/01/30 00:57:22 phil Exp $ (BRL)";
d130 2
a131 2
#ifdef SYSV
	/* SysV can't handle floating-point formulas as initializers */
@


1.4
log
@name change cbars-fb to fbcbars
@
text
@d52 1
a52 1
static char RCSid[] = "@@(#)$Header: cbars-fb.c,v 1.3 88/01/08 21:58:05 phil Locked $ (BRL)";
d130 8
d143 1
@


1.3
log
@Added FCC/EBU and SMPTE patterns
@
text
@d2 1
a2 1
 *  			C B A R S - F B . C
d52 1
a52 1
static char RCSid[] = "@@(#)$Header: cbars-fb.c,v 1.2 88/01/08 20:02:04 mike Locked $ (BRL)";
d138 1
a138 1
Usage: cbars-fb [-fs] [-h] [-F framebuffer]\n\
d184 1
a184 1
		(void)fprintf( stderr, "cbars-fb: excess argument(s) ignored\n" );
@


1.2
log
@Changed bottom part from 1/6th of the screen to 1/4th, to
match the behavior of the Lyon-Lamb ENC VI color bars
@
text
@d5 6
d12 5
a16 1
 *	black, white, dark gray (31%), black
d20 4
d37 6
a42 2
 *  Inspired by "ikcolorbars" by Mike Pique, University of North Carolina.
 *  
d48 2
a49 3
 *  Copyright Notice -
 *	This software is Copyright (C) 1987 by the United States Army.
 *	All rights reserved.
d52 1
a52 1
static char RCSid[] = "@@(#)$Header: cbars-fb.c,v 1.1 88/01/08 19:52:03 mike Locked $ (BRL)";
d71 31
a101 8
static  RGBpixel toppart[7] = {
	/* gray */ 	{190, 190, 190},
	/* yel */	{255, 255, 0},
	/* cyan */	{0, 255, 255},
	/* green */	{0, 255, 0},
	/* magenta */	{255, 0, 255},
	/* red */	{255, 0, 0},
	/* blue */	{0, 0, 255}
d104 25
d130 5
a134 5
	/* black */ {0, 0, 0},
	/* white */ {255, 255, 255},
	/* dark gray */ {80, 80, 80},
	/* black */ {0, 0, 0},
	/* black */ {0, 0, 0}
d138 4
a141 2
Usage: cbars-fb [-h] [-F framebuffer]\n\
	[-S squarescrsize] [-W scr_width] [-N scr_height]\n";
d143 5
d153 1
a153 1
	while ( (c = getopt( argc, argv, "hF:S:W:N:" )) != EOF )  {
d155 6
a209 2
	 *  Build bottom line, and send it for 1/4th of the screen,
	 *  then build the top line, and fill the rest of the screen.
d211 8
a218 6
	for( x=0; x<scr_width; x++) {
		/* build bottom part */
		COPYRGB( scanline[x], botpart[x*5/scr_width] );
	}
	for( y=0; y<(scr_height/4); y++)
		fb_write( fbp, 0, y, scanline, scr_width );
d220 43
a262 3
	for( x=0; x<scr_width; x++)  {
		/* build top line */
		COPYRGB( scanline[x], toppart[x*7/scr_width] );
a263 2
	for( ; y<scr_height; y++)
		fb_write( fbp, 0, y, scanline, scr_width );
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
static char RCSid[] = "@@(#)$Header: pix-fb.c,v 7.1 87/11/03 00:08:12 mike Rel $ (BRL)";
d132 1
a132 1
	 *  Build bottom line, and send it for 1/6th of the screen,
d139 1
a139 1
	for( y=0; y<(scr_height/6); y++)
@
