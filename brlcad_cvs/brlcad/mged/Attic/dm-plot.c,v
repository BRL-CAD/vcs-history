head	11.28;
access;
symbols
	ansi-20040405-merged:11.24.2.2
	postmerge-20040405-ansi:11.26
	premerge-20040404-ansi:11.25
	postmerge-autoconf:11.25
	autoconf-freeze:11.24.10.1
	premerge-autoconf:11.25
	postmerge-20040315-windows:11.25
	premerge-20040315-windows:11.24
	windows-20040315-freeze:11.24.4.1
	autoconf-20031203:11.24
	autoconf-20031202:11.24
	autoconf-branch:11.24.0.10
	phong-branch:11.24.0.8
	photonmap-branch:11.24.0.6
	rel-6-1-DP:11.24
	windows-branch:11.24.0.4
	rel-6-0-2:11.22
	ansi-branch:11.24.0.2
	rel-6-0-1-branch:11.22.0.2
	hartley-6-0-post:11.23
	hartley-6-0-pre:11.22
	rel-6-0-1:11.22
	rel-6-0:11.22
	rel-5-4:11.20.2.1
	offsite-5-3-pre:11.22
	rel-5-3:11.20.2.1
	rel-5-2:11.20.2.1
	rel-5-1-branch:11.20.0.2
	rel-5-1:11.20
	rel-5-0:11.19
	rel-5-0-beta:11.19
	rel-4-5:11.17
	ctj-4-5-post:11.14
	ctj-4-5-pre:11.14
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.28
date	2004.05.21.17.47.40;	author morrison;	state dead;
branches;
next	11.27;

11.27
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	11.26;

11.26
date	2004.04.05.09.09.11;	author morrison;	state Exp;
branches;
next	11.25;

11.25
date	2004.03.16.21.15.11;	author morrison;	state Exp;
branches;
next	11.24;

11.24
date	2002.08.20.17.08.22;	author jra;	state Exp;
branches
	11.24.2.1
	11.24.4.1
	11.24.10.1;
next	11.23;

11.23
date	2002.08.15.20.55.33;	author hartley;	state Exp;
branches;
next	11.22;

11.22
date	2000.08.31.18.13.02;	author bparker;	state Exp;
branches;
next	11.21;

11.21
date	2000.08.19.03.10.44;	author mike;	state Exp;
branches;
next	11.20;

11.20
date	99.12.01.14.06.36;	author bparker;	state Exp;
branches
	11.20.2.1;
next	11.19;

11.19
date	98.11.06.22.32.39;	author bparker;	state Exp;
branches;
next	11.18;

11.18
date	98.02.26.15.56.51;	author bparker;	state Exp;
branches;
next	11.17;

11.17
date	98.01.16.22.08.30;	author bparker;	state Exp;
branches;
next	11.16;

11.16
date	97.12.23.14.25.53;	author bparker;	state Exp;
branches;
next	11.15;

11.15
date	97.10.10.17.02.34;	author bparker;	state Exp;
branches;
next	11.14;

11.14
date	97.05.21.12.48.14;	author bparker;	state Exp;
branches;
next	11.13;

11.13
date	97.05.08.14.34.00;	author bparker;	state Exp;
branches;
next	11.12;

11.12
date	97.04.23.18.31.27;	author bparker;	state Exp;
branches;
next	11.11;

11.11
date	97.02.24.22.05.45;	author bparker;	state Exp;
branches;
next	11.10;

11.10
date	97.01.29.23.13.32;	author bparker;	state Exp;
branches;
next	11.9;

11.9
date	96.12.04.21.17.02;	author bparker;	state Exp;
branches;
next	11.8;

11.8
date	96.10.22.21.10.18;	author bparker;	state Exp;
branches;
next	11.7;

11.7
date	96.09.26.20.38.22;	author bparker;	state Exp;
branches;
next	11.6;

11.6
date	96.09.25.20.05.53;	author bparker;	state Exp;
branches;
next	11.5;

11.5
date	96.09.23.18.41.09;	author bparker;	state Exp;
branches;
next	11.4;

11.4
date	96.09.03.20.02.37;	author bparker;	state Exp;
branches;
next	11.3;

11.3
date	96.08.27.20.30.05;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	96.05.02.21.33.02;	author bparker;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.02.55;	author mike;	state Rel4_4;
branches;
next	10.9;

10.9
date	94.12.24.01.05.19;	author mike;	state Exp;
branches;
next	10.8;

10.8
date	94.12.23.22.55.54;	author mike;	state Exp;
branches;
next	10.7;

10.7
date	94.12.16.19.36.07;	author gdurf;	state Exp;
branches;
next	10.6;

10.6
date	94.10.14.17.06.59;	author mike;	state Exp;
branches;
next	10.5;

10.5
date	94.10.14.16.06.28;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.08.10.21.42.50;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	94.08.09.15.14.11;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	94.06.01.11.58.00;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.43.26;	author mike;	state Rel4_0;
branches;
next	9.4;

9.4
date	91.07.19.01.16.48;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	91.02.02.00.00.56;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	91.01.12.08.25.27;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.02.28;	author mike;	state Rel3_5;
branches;
next	8.5;

8.5
date	89.04.06.20.39.22;	author mike;	state Exp;
branches;
next	8.4;

8.4
date	89.01.18.01.55.48;	author mike;	state Exp;
branches;
next	8.3;

8.3
date	88.12.16.17.07.30;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.06.01.06.42;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.36.20;	author mike;	state Rel3_0;
branches;
next	7.4;

7.4
date	88.09.15.21.03.24;	author phil;	state Exp;
branches;
next	7.3;

7.3
date	88.02.25.06.06.12;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	87.11.05.05.04.52;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.02.23.59.41;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.02.57;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.19.24;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.13.00.06.40;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.20.28;	author mike;	state Rel1;
branches;
next	1.5;

1.5
date	86.11.04.00.56.54;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	86.09.24.04.45.33;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	86.08.14.22.21.26;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.08.12.06.48.24;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.04.09.01.10.20;	author mike;	state Exp;
branches;
next	;

11.20.2.1
date	2000.09.01.17.31.46;	author bparker;	state Exp;
branches;
next	;

11.24.2.1
date	2002.09.19.18.02.01;	author morrison;	state Exp;
branches;
next	11.24.2.2;

11.24.2.2
date	2004.03.17.21.21.57;	author morrison;	state Exp;
branches;
next	;

11.24.4.1
date	2002.09.26.23.04.10;	author morrison;	state Exp;
branches;
next	;

11.24.10.1
date	2004.03.18.18.10.30;	author erikg;	state Exp;
branches;
next	;


desc
@An MGED Display Manager to output the entire display,
including the faceplate, in UNIX-plot format.
@


11.28
log
@moved to src/mged/
@
text
@/*
 *			D M - P L O T . C
 *
 *  Routines specific to MGED's use of LIBDM's Plot display manager.
 *
 *  Author -
 *	Robert G. Parker
 *  
 *  Source -
 *	SLAD CAD Team
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 */

#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/mged/dm-plot.c,v 11.27 2004/05/10 15:30:48 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifndef WIN32
#include <sys/time.h>		/* for struct timeval */
#endif
#include "machine.h"
#include "externs.h"
#include "bu.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"
#include "./ged.h"
#include "./mged_dm.h"
#include "dm-plot.h"

extern void dm_var_init(struct dm_list *initial_dm_list);

int
Plot_dm_init(struct dm_list *o_dm_list, int argc, char **argv)
{
  dm_var_init(o_dm_list);

  if((dmp = dm_open(interp, DM_TYPE_PLOT, argc, argv)) == DM_NULL)
    return TCL_ERROR;

  return TCL_OK;
}
@


11.27
log
@change conf.h to a wrapped config.h
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/dm-plot.c,v 11.26 2004/04/05 09:09:11 morrison Exp $ (BRL)";
@


11.26
log
@merge of ansi-6-0-branch into HEAD
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d19 5
a23 1
#include "conf.h"
@


11.25
log
@merge of windows-6-0-branch into head
@
text
@d35 1
a35 1
extern void dm_var_init();
d38 1
a38 4
Plot_dm_init(o_dm_list, argc, argv)
struct dm_list *o_dm_list;
int argc;
char *argv[];
@


11.24
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-plot.c,v 11.22 2000/08/31 18:13:02 bparker Exp $ (BRL)";
d22 1
d24 1
@


11.24.10.1
log
@merge from head
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a21 1
#ifndef WIN32
a22 1
#endif
@


11.24.4.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-plot.c,v 11.24 2002/08/20 17:08:22 jra Exp $ (BRL)";
a21 1
#ifndef WIN32
a22 1
#endif
@


11.24.2.1
log
@Initial ANSIfication
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-plot.c,v 11.24 2002/08/20 17:08:22 jra Exp $ (BRL)";
d33 1
a33 1
extern void dm_var_init(struct dm_list *initial_dm_list);
d36 4
a39 1
Plot_dm_init(struct dm_list *o_dm_list, int argc, char **argv)
@


11.24.2.2
log
@sync branch with HEAD
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a21 1
#ifndef WIN32
a22 1
#endif
@


11.23
log
@Converted from K&R to ANSI C - RFH
@
text
@d33 1
a33 1
extern void dm_var_init(struct dm_list *initial_dm_list);
d36 4
a39 1
Plot_dm_init(struct dm_list *o_dm_list, int argc, char **argv)
@


11.22
log
@signature for dm_open() changed to include interp
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-plot.c,v 11.21 2000/08/19 03:10:44 mike Exp $ (BRL)";
d33 1
a33 1
extern void dm_var_init();
d36 1
a36 4
Plot_dm_init(o_dm_list, argc, argv)
struct dm_list *o_dm_list;
int argc;
char *argv[];
@


11.21
log
@
const RCSid
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-plot.c,v 11.20 1999/12/01 14:06:36 bparker Exp $ (BRL)";
d43 1
a43 1
  if((dmp = dm_open(DM_TYPE_PLOT, argc, argv)) == DM_NULL)
@


11.20
log
@*- mods to reflect changes in struct dm
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-plot.c,v 11.19 1998/11/06 22:32:39 bparker Exp $ (BRL)";
@


11.20.2.1
log
@dm_open has new signature (i.e. interp)
@
text
@d16 1
a16 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-plot.c,v 11.22 2000/08/31 18:13:02 bparker Exp $ (BRL)";
d43 1
a43 1
  if((dmp = dm_open(interp, DM_TYPE_PLOT, argc, argv)) == DM_NULL)
@


11.19
log
@*- use new structures
*- cleanup
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-plot.c,v 11.18 1998/02/26 15:56:51 bparker Exp $ (BRL)";
a45 1
  zclip_ptr = &((struct plot_vars *)dmp->dm_vars.priv_vars)->zclip;
@


11.18
log
@*- using new dm_vars structure
@
text
@d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.17 1998/01/16 22:08:30 bparker Exp bparker $ (BRL)";
a46 1
  curr_dm_list->s_info->opp = &pathName;
@


11.17
log
@*** empty log message ***
@
text
@d4 1
a4 7
 * An unsatisfying (but useful) hack to allow GED to generate
 * UNIX-plot files that not only contain the drawn objects, but
 * also contain the faceplate display as well.
 * Mostly, a useful hack for making viewgraphs and photographs
 * of an editing session.
 * We assume that the UNIX-plot filter used can at least discard
 * the non-standard extention to specify color (a Gwyn@@BRL addition).
d7 1
a7 1
 *	Michael John Muuss
d10 2
a11 2
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
a12 4
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985 by the United States Army.
 *	All rights reserved.
d16 1
a16 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.16 1997/12/23 14:25:53 bparker Exp bparker $ (BRL)";
d46 1
a46 1
  zclip_ptr = &((struct plot_vars *)dmp->dm_vars)->zclip;
@


11.16
log
@*** empty log message ***
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.15 1997/10/10 17:02:34 bparker Exp bparker $ (BRL)";
a40 1
#include "./mged_solid.h"
@


11.15
log
@ call dm_open without eventHandler
@
text
@d26 1
a26 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.14 1997/05/21 12:48:14 bparker Exp bparker $ (BRL)";
d57 1
@


11.14
log
@mods to Plot_dm_init
@
text
@d24 1
d26 1
a26 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.13 1997/05/08 14:34:00 bparker Exp bparker $ (BRL)";
d54 1
a54 1
  if((dmp = dm_open(DM_TYPE_PLOT, DM_EVENT_HANDLER_NULL, argc, argv)) == DM_NULL)
@


11.13
log
@call generic dm_open
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.12 1997/04/23 18:31:27 bparker Exp bparker $ (BRL)";
d56 1
a56 1
  curr_dm_list->s_info->opp = &tkName;
@


11.12
log
@*** empty log message ***
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.11 1997/02/24 22:05:45 bparker Exp bparker $ (BRL)";
d53 1
a53 1
  if((dmp = Plot_open(DM_EVENT_HANDLER_NULL, argc - 1, argv + 1)) == DM_NULL)
@


11.11
log
@*** empty log message ***
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.10 1997/01/29 23:13:32 bparker Exp bparker $ (BRL)";
a50 1
#if DO_NEW_LIBDM_OPEN
a57 3
#else
  return Plot_open((int (*)())NULL, argc, argv);
#endif
@


11.10
log
@experiment with libdm
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.9 1996/12/04 21:17:02 bparker Exp bparker $ (BRL)";
d43 1
a43 1
struct dm *Plot_dm_init();
d45 3
a47 2
struct dm *
Plot_dm_init(argc, argv)
d51 9
d61 1
@


11.9
log
@ no longer using dm_init
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.8 1996/10/22 21:10:18 bparker Exp bparker $ (BRL)";
a37 1
#include "dm-plot.h"
d41 1
d43 1
a43 1
int Plot_dm_init();
d45 4
a48 2
int
Plot_dm_init()
d50 1
a50 1
  return TCL_OK;
@


11.8
log
@hacks to use latest libdm
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.7 1996/09/26 20:38:22 bparker Exp $ (BRL)";
d46 1
a46 3
Plot_dm_init(argc, argv)
int argc;
char *argv[];
d48 1
a48 4
  if(dmp->dm_init(dmp, argc, argv) == TCL_ERROR)
    return TCL_ERROR;

  return dmp->dm_open(dmp);
@


11.7
log
@changed parameters to dmr_object
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.6 1996/09/25 20:05:53 bparker Exp bparker $ (BRL)";
d50 1
a50 1
  if(dmp->dmr_init(dmp, argc, argv) == TCL_ERROR)
d53 1
a53 1
  return dmp->dmr_open(dmp);
@


11.6
log
@include mged_solid.h
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.5 1996/09/23 18:41:09 bparker Exp bparker $ (BRL)";
a54 10

#if 0
static int
Plot_close(p)
genptr_t *p;
{
  bu_free(p, "mged_plot_vars");
  return TCL_OK;
}
#endif
@


11.5
log
@use LIBDM permanently
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.4 1996/09/03 20:02:37 bparker Exp bparker $ (BRL)";
d41 1
a41 1
#include "./solid.h"
a42 2
extern void color_soltab();

d50 1
a50 1
  if(dmp->dmr_init(dmp, color_soltab, argc, argv) == TCL_ERROR)
@


11.4
log
@rt_list ---> bu_list
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.3 1996/08/27 20:30:05 bparker Exp bparker $ (BRL)";
d38 1
d40 1
a40 1
#include "./dm.h"
d43 1
a43 1
/* Display Manager package interface */
d45 1
a45 12
#define PLOTBOUND	1000.0	/* Max magnification in Rot matrix */
int	Plot_open();
void	Plot_close();
MGED_EXTERN(void	Plot_input, (fd_set *input, int noblock) );
void	Plot_prolog(), Plot_epilog();
void	Plot_normal(), Plot_newrot();
void	Plot_update();
void	Plot_puts(), Plot_2d_line(), Plot_light();
int	Plot_object();
unsigned Plot_cvtvecs(), Plot_load();
void	Plot_statechange(), Plot_viewchange(), Plot_colorchange();
void	Plot_window(), Plot_debug();
d47 4
a50 42
struct dm dm_Plot = {
	Plot_open, Plot_close,
	Plot_input,
	Plot_prolog, Plot_epilog,
	Plot_normal, Plot_newrot,
	Plot_update,
	Plot_puts, Plot_2d_line,
	Plot_light,
	Plot_object,
	Plot_cvtvecs, Plot_load,
	Plot_statechange,
	Plot_viewchange,
	Plot_colorchange,
	Plot_window, Plot_debug,
	0,			/* no displaylist */
	1,			/* play it safe (could be frame buffer) */
	PLOTBOUND,
	"plot", "Screen to UNIX-Plot"
};

extern struct device_values dm_values;	/* values read from devices */

static int plot_count = 0;
static vect_t clipmin, clipmax;		/* for vector clipping */
static FILE	*up_fp;
static char	ttybuf[BUFSIZ];

/*
 * Display coordinate conversion:
 *  GED is using -2048..+2048,
 *  and we define the PLOT file to use the same space.  Easy!
 */
#define	GED_TO_PLOT(x)	(x)
#define PLOT_TO_GED(x)	(x)

/*
 *			P L O T _ O P E N
 *
 * Fire up the display manager, and the display processor.
 *
 */
Plot_open()
d52 1
a52 5
  char line[64];

  if(plot_count){
    ++plot_count;
    Tcl_AppendResult(interp, "Plot_open: plot is already open\n", (char *)NULL);
a53 9
  }

  if( (up_fp = popen( dname, "w" )) == NULL ) {
    if( (up_fp = popen("pl-fb", "w")) == NULL ) {
      Tcl_AppendResult(interp, "Plot_open: failed to open ", dname,
		       " and pl-fb\n", (char *)NULL);
      return TCL_ERROR;
    }
  }
d55 1
a55 5
  setbuf( up_fp, ttybuf );
  pl_space( up_fp, -2048, -2048, 2048, 2048 );
  plot_count = 1;
  bu_vls_printf(&pathName, ".dm_plot");
  return TCL_OK;
d58 4
a61 7
/*
 *  			P L O T _ C L O S E
 *  
 *  Gracefully release the display.
 */
void
Plot_close()
d63 2
a64 195
  if(plot_count > 1){
    --plot_count;
    return;
  }

  plot_count = 0;
  (void)fflush(up_fp);
  pclose(up_fp);			/* close pipe, eat dead children */
}

/*
 *			P L O T _ P R O L O G
 *
 * There are global variables which are parameters to this routine.
 */
void
Plot_prolog()
{
  /* We expect the screen to be blank so far, from last frame flush */

  /* Put the center point up */
  pl_move( up_fp,  0, 0 );
  pl_cont( up_fp,  0, 0 );
}

/*
 *			P L O T _ E P I L O G
 */
void
Plot_epilog()
{
  pl_flush( up_fp );			/* BRL-specific command */
  pl_erase( up_fp );			/* forces drawing */
  (void)fflush( up_fp );
  return;
}

/*
 *  			P L O T _ N E W R O T
 *  Stub.
 */
/* ARGSUSED */
void
Plot_newrot(mat)
mat_t mat;
{
	return;
}

/*
 *  			P L O T _ O B J E C T
 *  
 *  Set up for an object, transformed as indicated, and with an
 *  object center as specified.  The ratio of object to screen size
 *  is passed in as a convienience.
 *
 *  Returns 0 if object could be drawn, !0 if object was omitted.
 */
/* ARGSUSED */
int
Plot_object( sp, mat, ratio, white )
register struct solid *sp;
mat_t mat;
double ratio;
{
	static vect_t			last;
	register struct rt_vlist	*vp;
	int useful = 0;

	if( white )  {
		pl_linmod( up_fp, "longdashed" );
	} else {
		if( sp->s_soldash )
			pl_linmod( up_fp, "dotdashed");
		else
			pl_linmod( up_fp, "solid");
	}

	for( BU_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
		register int	i;
		register int	nused = vp->nused;
		register int	*cmd = vp->cmd;
		register point_t *pt = vp->pt;
		for( i = 0; i < nused; i++,cmd++,pt++ )  {
			static vect_t	start, fin;
			switch( *cmd )  {
			case RT_VLIST_POLY_START:
			case RT_VLIST_POLY_VERTNORM:
				continue;
			case RT_VLIST_POLY_MOVE:
			case RT_VLIST_LINE_MOVE:
				/* Move, not draw */
				MAT4X3PNT( last, model2view, *pt );
				continue;
			case RT_VLIST_POLY_DRAW:
			case RT_VLIST_POLY_END:
			case RT_VLIST_LINE_DRAW:
				/* draw */
				MAT4X3PNT( fin, model2view, *pt );
				VMOVE( start, last );
				VMOVE( last, fin );
				break;
			}
			if(
				vclip( start, fin, clipmin, clipmax ) == 0
			)  continue;

			pl_color( up_fp,
				sp->s_color[0],
				sp->s_color[1],
				sp->s_color[2] );
			pl_line( up_fp, 
				(int)( start[0] * 2047 ),
				(int)( start[1] * 2047 ),
				(int)( fin[0] * 2047 ),
				(int)( fin[1] * 2047 ) );
			useful = 1;
		}
	}
	return(useful);
}

/*
 *			P L O T _ N O R M A L
 *
 * Restore the display processor to a normal mode of operation
 * (ie, not scaled, rotated, displaced, etc).
 * Turns off windowing.
 */
void
Plot_normal()
{
	return;
}

/*
 *			P L O T _ U P D A T E
 *
 * Transmit accumulated displaylist to the display processor.
 */
void
Plot_update()
{
	(void)fflush(up_fp);
}

/*
 *			P L O T _ P U T S
 *
 * Output a string into the displaylist.
 * The starting position of the beam is as specified.
 */
/* ARGSUSED */
void
Plot_puts( str, x, y, size, color )
register char *str;
{
	switch( color )  {
	case DM_BLACK:
		pl_color( up_fp,  0, 0, 0 );
		break;
	case DM_RED:
		pl_color( up_fp,  255, 0, 0 );
		break;
	case DM_BLUE:
		pl_color( up_fp,  0, 255, 0 );
		break;
	case DM_YELLOW:
		pl_color( up_fp,  255, 255, 0 );
		break;
	case DM_WHITE:
		pl_color( up_fp,  255, 255, 255 );
		break;
	}
	pl_move( up_fp, x,y);
	pl_label( up_fp, str);
}

/*
 *			P L O T _ 2 D _ G O T O
 *
 */
void
Plot_2d_line( x1, y1, x2, y2, dashed )
int x1, y1;
int x2, y2;
int dashed;
{
	pl_color( up_fp,  255, 255, 0 );	/* Yellow */
	if( dashed )
		pl_linmod( up_fp, "dotdashed");
	else
		pl_linmod( up_fp, "solid");
	pl_move( up_fp, x1,y1);
	pl_cont( up_fp, x2,y2);
a65 23

/*
 *			P L O T _ I N P U T
 *
 * Execution must suspend in this routine until a significant event
 * has occured on either the command stream,
 * unless "noblock" is set.
 *
 * Implicit Return -
 *	If any files are ready for input, their bits will be set in 'input'.
 *	Otherwise, 'input' will be all zeros.
 */
void
Plot_input( input, noblock )
fd_set		*input;
int		noblock;
{
	struct timeval	tv;
	int		width;
	int		cnt;

#if defined(_SC_OPEN_MAX)
	if( (width = sysconf(_SC_OPEN_MAX)) <= 0 )
a66 98
		width = 32;

	/*
	 * Check for input on the keyboard
	 *
	 * Suspend execution until either
	 *  1)  User types a full line
	 *  2)  The timelimit on SELECT has expired
	 *
	 * If a RATE operation is in progress (zoom, rotate, slew)
	 * in which we still have to update the display,
	 * do not suspend execution.
	 */
	tv.tv_sec = 0;
	if( noblock )  {
		tv.tv_usec = 0;
	}  else  {
		/* 1/20th second */
		tv.tv_usec = 50000;
	}
	cnt = select( width, input, (fd_set *)0,  (fd_set *)0, &tv );
	if( cnt < 0 )  {
		perror("dm/select");
	}
}

/* 
 *			P L O T _ L I G H T
 */
/* ARGSUSED */
void
Plot_light( cmd, func )
int cmd;
int func;			/* BE_ or BV_ function */
{
	return;
}

/* ARGSUSED */
unsigned
Plot_cvtvecs( sp )
struct solid *sp;
{
	return( 0 );
}

/*
 * Loads displaylist
 */
unsigned
Plot_load( addr, count )
unsigned addr, count;
{
  struct bu_vls tmp_vls;

  bu_vls_init(&tmp_vls);
  bu_vls_printf(&tmp_vls, "Plot_load(x%x, %d.)\n", addr, count);
  Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);
  bu_vls_free(&tmp_vls);
  return( 0 );
}

void
Plot_statechange()
{
}

void
Plot_viewchange()
{
}

void
Plot_colorchange()
{
	color_soltab();		/* apply colors to the solid table */
}

/* ARGSUSED */
void
Plot_debug(lvl)
{
  (void)fflush(up_fp);
  Tcl_AppendResult(interp, "flushed\n", (char *)NULL);
}

void
Plot_window(w)
register int w[];
{
	/* Compute the clipping bounds */
	clipmin[0] = w[1] / 2048.;
	clipmin[1] = w[3] / 2048.;
	clipmin[2] = w[5] / 2048.;
	clipmax[0] = w[0] / 2047.;
	clipmax[1] = w[2] / 2047.;
	clipmax[2] = w[4] / 2047.;
}
@


11.3
log
@now using libbu
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.2 1996/05/02 21:33:02 bparker Exp bparker $ (BRL)";
d34 1
d209 1
a209 1
	for( RT_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
@


11.2
log
@Still Tcl'ing the code
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 11.1 1995/01/04 10:02:55 mike Rel4_4 bparker $ (BRL)";
d118 1
a118 1
  rt_vls_printf(&pathName, ".dm_plot");
d403 1
a403 1
  struct rt_vls tmp_vls;
d405 4
a408 4
  rt_vls_init(&tmp_vls);
  rt_vls_printf(&tmp_vls, "Plot_load(x%x, %d.)\n", addr, count);
  Tcl_AppendResult(interp, rt_vls_addr(&tmp_vls), (char *)NULL);
  rt_vls_free(&tmp_vls);
@


11.1
log
@Release_4.4
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.9 94/12/24 01:05:19 mike Exp $ (BRL)";
d78 1
d99 1
a99 1
	char line[64];
d101 19
a119 18
	rt_log("UNIX-Plot filter [pl-fb]? ");
	(void)fgets( line, sizeof(line), stdin ); /* \n, Null terminated */
	line[strlen(line)-1] = '\0';		/* remove newline */
	if( feof(stdin) )  quit();
	if( line[0] != '\0' )  {
		if( (up_fp = popen( line, "w" )) == NULL )  {
			perror(line);
			return(1);		/* BAD */
		}
	} else {
		if( (up_fp = popen("pl-fb", "w")) == NULL )  {
			perror("pl-fb");
			return(1);	/* BAD */
		}
	}
	setbuf( up_fp, ttybuf );
	pl_space( up_fp, -2048, -2048, 2048, 2048 );
	return(0);			/* OK */
d130 8
a137 2
	(void)fflush(up_fp);
	pclose(up_fp);			/* close pipe, eat dead children */
d148 1
a148 2
	if( !dmaflag )
		return;
d150 3
a152 5
	/* We expect the screen to be blank so far, from last frame flush */

	/* Put the center point up */
	pl_move( up_fp,  0, 0 );
	pl_cont( up_fp,  0, 0 );
d161 4
a164 4
	pl_flush( up_fp );			/* BRL-specific command */
	pl_erase( up_fp );			/* forces drawing */
	(void)fflush( up_fp );
	return;
d403 7
a409 2
	rt_log("Plot_load(x%x, %d.)\n", addr, count );
	return( 0 );
d432 2
a433 2
	(void)fflush(up_fp);
	rt_log("flushed\n");
@


10.9
log
@Eliminated old dm_values.dv_* style "polled" device interface.
Everything is done by string commands now.
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.8 94/12/23 22:55:54 mike Exp Locker: mike $ (BRL)";
@


10.8
log
@Added vert norm
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.7 94/12/16 19:36:07 gdurf Exp Locker: mike $ (BRL)";
a368 2

	dm_values.dv_penpress = 0;
@


10.7
log
@Converted printf(...) and fprintf(stdout, ...) to rt_log(...).
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.6 1994/10/14 17:06:59 mike Exp gdurf $ (BRL)";
d212 1
@


10.6
log
@#if defined(_SC_OPEN_MAX)
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.5 94/10/14 16:06:28 mike Exp Locker: mike $ (BRL)";
d100 1
a100 1
	(void)printf("UNIX-Plot filter [pl-fb]? ");
d399 1
a399 1
	(void)printf("Plot_load(x%x, %d.)\n", addr, count );
d424 1
a424 1
	printf("flushed\n");
@


10.5
log
@Changed from getdtablesize() to sysconf(_SC_OPEN_MAX)
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.4 94/08/10 21:42:50 mike Exp Locker: mike $ (BRL)";
d341 1
d343 1
@


10.4
log
@Changed calling sequence to dmr_input(), to pass an fd_set rather
than a single file descriptor.
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.3 94/08/09 15:14:11 gdurf Exp Locker: mike $ (BRL)";
d341 1
a341 1
	if( (width = getdtablesize()) <= 0 )
@


10.3
log
@Added include of conf.h
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.2 1994/06/01 11:58:00 gdurf Exp gdurf $ (BRL)";
d31 1
d33 1
a38 1
#include "externs.h"
d46 1
a46 1
int	Plot_input();
d328 3
a330 3
 * Returns:
 *	0 if no command waiting to be read,
 *	1 if command is waiting to be read.
d332 4
a335 1
Plot_input( cmd_fd, noblock )
d337 3
a339 1
	register long readfds;
d341 3
d345 1
a345 1
	 * Check for input on the keyboard or on the polled registers.
d355 11
a365 5
	readfds = (1<<cmd_fd);
	if( noblock )
		readfds = bsdselect( readfds, 0, 0 );
	else
		readfds = bsdselect( readfds, 30*60, 0 );	/* 30 mins */
a367 5

	if( readfds & (1<<cmd_fd) )
		return(1);		/* command awaits */
	else
		return(0);		/* just peripheral stuff */
@


10.2
log
@Replaced gets() with fgets()
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 10.1 91/10/12 06:43:26 mike Rel4_0 $ (BRL)";
d27 2
@


10.1
log
@Release_4.0
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 9.4 91/07/19 01:16:48 mike Exp $ (BRL)";
d98 2
a99 1
	(void)gets( line );		/* Null terminated */
@


9.4
log
@Don't use u_char on IBM.
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 9.3 91/02/02 00:00:56 mike Exp $ (BRL)";
@


9.3
log
@Modified for new rt_vlist structures
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 9.2 91/01/12 08:25:27 mike Exp $ (BRL)";
a37 2
typedef unsigned char u_char;

d275 1
a275 1
register u_char *str;
@


9.2
log
@externs.h
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-plot.c,v 9.1 89/05/19 06:02:28 mike Rel3_5 $ (BRL)";
d188 2
a189 2
	static vect_t last;
	register struct vlist *vp;
d201 24
a224 12
	for( vp = sp->s_vlist; vp != VL_NULL; vp = vp->vl_forw )  {
		/* Viewing region is from -1.0 to +1.0 */
		if( vp->vl_draw == 0 )  {
			/* Move, not draw */
			MAT4X3PNT( last, mat, vp->vl_pnt );
		}  else  {
			static vect_t fin;
			static vect_t start;
			/* draw */
			MAT4X3PNT( fin, mat, vp->vl_pnt );
			VMOVE( start, last );
			VMOVE( last, fin );
a225 4
#ifdef later
				/* sqrt(1+1) */
				(ratio >= 0.7071)  &&
#endif
@


9.1
log
@Release_3.5
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 8.5 89/04/06 20:39:22 mike Exp $ (BRL)";
a37 2
extern void	perror();

a75 1
extern FILE	*popen();	/* stdio pipe open routine */
@


8.5
log
@Extern function declarations that used to be local to this module
and in solid.h are now in "externs.h"
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 8.4 89/01/18 01:55:48 mike Locked $ (BRL)";
@


8.4
log
@Includes changes in how MGED colors the various solids.
Externally, the color selection now matches that used by RT.
Internally, this was accomplished by adding 3 more fields
to the solid table (s_basecolor[], s_color[], s_dmindex),
and eliminating the mt_dm_int value from the region-id-based
material table.
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 8.3 88/12/16 17:07:30 mike Locked $ (BRL)";
d35 1
@


8.3
log
@Illuminated objects come out as "longdashed".
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 8.2 88/12/06 01:06:42 mike Locked $ (BRL)";
d223 4
a226 8
			{
				register struct mater *mp;
				mp = (struct mater *)sp->s_materp;
				if( mp != MATER_NULL )
					pl_color( up_fp,  mp->mt_r,
						mp->mt_g,
						mp->mt_b );
			}
@


8.2
log
@Added #include <raytrace.h> for vector list stuff
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: /cad/d/mike/cad/mged/RCS/dm-plot.c,v 1.2 88/10/23 13:56:06 mike Exp $ (BRL)";
d194 8
a201 4
	if( sp->s_soldash )
		pl_linmod( up_fp, "dotdashed");
	else
		pl_linmod( up_fp, "solid");
@


8.1
log
@Release_3.0
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 7.4 88/09/15 21:03:24 phil Exp $ (BRL)";
d32 1
@


7.4
log
@added release display flag
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 7.3 88/02/25 06:06:12 phil Locked $ (BRL)";
@


7.3
log
@Modified for new vector lists
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 7.2 87/11/05 05:04:52 mike Locked $ (BRL)";
d69 2
a70 1
	0,				/* no displaylist */
@


7.2
log
@Eliminated local machine.h, converted to fastf_t, now link with librt.a
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 7.1 87/11/02 23:59:41 mike Rel $ (BRL)";
d99 1
a99 1
	(void)printf("UNIX-Plot filter [plot-fb]? ");
d108 2
a109 2
		if( (up_fp = popen("plot-fb", "w")) == NULL )  {
			perror("plot-fb");
d154 1
d189 1
a189 2
	register struct veclist *vp;
	int nvec;
d197 1
a197 2
	nvec = sp->s_vlen;
	for( vp = sp->s_vlist; nvec-- > 0; vp++ )  {
d199 1
a199 1
		if( vp->vl_pen == PEN_UP )  {
@


7.1
log
@Release 2.3
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 6.1 87/07/11 08:02:57 mike Rel $ (BRL)";
d29 1
a29 1
#include "./machine.h"	/* special copy */
@


6.1
log
@Release 2.0
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 5.1 87/06/24 22:19:24 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 4.2 87/02/13 00:06:40 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 4.1 86/12/29 03:20:28 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 1.5 86/11/04 00:56:54 mike Exp $ (BRL)";
@


1.5
log
@Changed from ikplot to plot-fb
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 1.4 86/09/24 04:45:33 mike Locked $ (BRL)";
@


1.4
log
@Converted to Phil's portable, Public Domain libplot3 interface.
@
text
@d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 1.3 86/08/14 22:21:26 mike Locked $ (BRL)";
d99 1
a99 1
	(void)printf("UNIX-Plot filter [ikplot]? ");
d108 2
a109 2
		if( (up_fp = popen("ikplot", "w")) == NULL )  {
			perror("ikplot");
@


1.3
log
@Changed attach() to bsdattach() to provide better insulation.
@
text
@a11 4
 *  Bug -
 *	If the GED "plot" command is used while this display manager
 *  is attached, up_fp will be smashed, with bad results.
 *
d25 1
a25 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 1.2 86/08/12 06:48:24 mike Exp $ (BRL)";
d75 1
d78 1
a78 10

#define BELL	007
#define	FF	014
#define SUB	032		/* Turn on graphics cursor */
#define GS	035		/* Enter Graphics Mode (1st vec dark) */
#define ESC	033
#define US	037		/* Enter Alpha Mode */

extern FILE	*popen();	/* stdio pipe open routine */
extern FILE	*up_fp;		/* from plot.c */
d114 1
a114 1
	up_space( -2048, -2048, 2048, 2048 );
d144 2
a145 2
	up_move( 0, 0 );
	up_cont( 0, 0 );
d154 1
a154 1
	up_erase();			/* forces drawing */
d193 1
a193 1
		up_linemod("dotdashed");
d195 1
a195 1
		up_linemod("solid");
d222 1
a222 1
					up_color( mp->mt_r,
d226 1
a226 1
			up_line(
d274 1
a274 1
		up_color( 0, 0, 0 );
d277 1
a277 1
		up_color( 255, 0, 0 );
d280 1
a280 1
		up_color( 0, 255, 0 );
d283 1
a283 1
		up_color( 255, 255, 0 );
d286 1
a286 1
		up_color( 255, 255, 255 );
d289 2
a290 2
	up_move(x,y);
	up_label(str);
d303 1
a303 1
	up_color( 255, 255, 0 );	/* Yellow */
d305 1
a305 1
		up_linemod("dotdashed");
d307 3
a309 3
		up_linemod("solid");
	up_move(x1,y1);
	up_cont(x2,y2);
@


1.2
log
@Changed #includes for CC -I../h
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: dm-plot.c,v 1.1 86/04/09 01:10:20 mike Exp $ (BRL)";
a77 6
struct timeval	{			/* needed for select() */
	long	tv_sec;			/* seconds */
	long	tv_usec;		/* microseconds */
};


d337 1
a337 2
	static long readfds;
	static struct timeval timeout;
d350 1
d352 1
a352 1
		timeout.tv_sec = 0;
d354 1
a354 5
		timeout.tv_sec = 30*60;		/* 30 MINUTES for Plot */
	timeout.tv_usec = 0;

	readfds = (1<<cmd_fd);
	(void)select( 32, &readfds, 0L, 0L, &timeout );
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
static char RCSid[] = "@@(#)$Header: dm-tek.c,v 2.6 85/09/14 05:35:54 mike Exp $ (BRL)";
d34 5
a38 5
#include "../h/vmath.h"
#include "ged.h"
#include "dm.h"
#include "solid.h"
#include "../h/mater.h"
@
