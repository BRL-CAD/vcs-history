head	1.5;
access;
symbols
	ansi-20040405-merged:1.3.6.1
	postmerge-20040405-ansi:1.4
	premerge-20040404-ansi:1.4
	postmerge-autoconf:1.4
	autoconf-freeze:1.3.14.1
	premerge-autoconf:1.4
	postmerge-20040315-windows:1.4
	premerge-20040315-windows:1.4
	windows-20040315-freeze:1.3.8.1
	autoconf-20031203:1.3
	autoconf-20031202:1.3
	autoconf-branch:1.3.0.14
	phong-branch:1.3.0.12
	photonmap-branch:1.3.0.10
	rel-6-1-DP:1.3
	windows-branch:1.3.0.8
	rel-6-0-2:1.3
	ansi-branch:1.3.0.6
	rel-6-0-1-branch:1.3.0.4
	hartley-6-0-post:1.3
	hartley-6-0-pre:1.3
	rel-6-0-1:1.3
	rel-6-0:1.3
	rel-5-4:1.3
	offsite-5-3-pre:1.3
	rel-5-3:1.3
	rel-5-2:1.3
	rel-5-1-branch:1.3.0.2
	rel-5-1:1.3
	rel-5-0:1.3
	rel-5-0-beta:1.3
	rel-4-5:1.3
	ctj-4-5-post:1.3
	ctj-4-5-pre:1.3;
locks; strict;
comment	@ * @;


1.5
date	2004.05.21.17.47.38;	author morrison;	state dead;
branches;
next	1.4;

1.4
date	2004.02.02.17.39.32;	author morrison;	state Exp;
branches;
next	1.3;

1.3
date	95.08.10.21.09.20;	author gdurf;	state Exp;
branches
	1.3.6.1
	1.3.8.1
	1.3.14.1;
next	1.2;

1.2
date	95.08.08.20.12.19;	author gdurf;	state Exp;
branches;
next	1.1;

1.1
date	95.06.23.19.53.02;	author pjt;	state Exp;
branches;
next	;

1.3.6.1
date	2004.03.17.21.21.56;	author morrison;	state Exp;
branches;
next	;

1.3.8.1
date	2004.03.11.23.46.33;	author morrison;	state Exp;
branches;
next	;

1.3.14.1
date	2004.02.12.18.34.13;	author erikg;	state Exp;
branches;
next	;


desc
@     Header for the Boolean-expression parser
     used by the 'c' command
@


1.5
log
@moved to src/mged/
@
text
@/*
 *			C O M B _ B O O L . H
 *
 *  Author -
 *	Paul Tanenbaum
 *
 *  Source -
 *	The U. S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5068  USA
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1995-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */

struct bool_tree_node
{
    long			    btn_magic;
    int				    btn_opn;
    union
    {
	char			*leaf_name;
	struct bool_tree_node	*operands[2];
    }				    btn_operands;
};
#define	BOOL_TREE_NODE_NULL	((struct bool_tree_node *) 0)

#define	OPN_NULL		0
#define	OPN_UNION		1
#define	OPN_INTERSECTION	2
#define	OPN_DIFFERENCE		3

#define	BT_LEFT			0
#define	BT_RIGHT		1

#define bt_opn(n)		((n) -> btn_opn)
#define bt_leaf_name(n)		((n) -> btn_operands.leaf_name)
#define bt_opd(n,d)		((n) -> btn_operands.operands[(d)])

#define bt_is_leaf(n)		(bt_opn((n)) == OPN_NULL)

struct tree_tail
{
    long		tt_magic;
    int			tt_opn;
    struct tree_tail	*tt_next;
};
#define	TREE_TAIL_NULL	((struct tree_tail *) 0)

#define ZAPMAG(p)		(*((long *)(p)) = 0)
#define	BOOL_TREE_NODE_MAGIC	0x62746e64
#define	TREE_TAIL_MAGIC		0x74727461

extern struct bool_tree_node	*comb_bool_tree;

/*                      T A L L O C ( )
 *
 *                  Simple interface to malloc()
 *
 *      This macro has three parameters:  a pointer, a C data type,
 *      and a number of data objects.  Talloc() allocates enough
 *      memory to store n objects of type t.  It has the side-effect
 *      of causing l to point to the allocated storage.
 */
#define         talloc(l, t, n)                                         \
        if (((l) = (t *) malloc(n * sizeof(t))) == (t *) 0)             \
        {                                                               \
            fprintf(stderr, "%s:%d: Ran out of memory\n",		\
                    __FILE__, __LINE__);                                \
            exit(1);                                                    \
        }

/*
 *	
 */

#ifdef USE_PROTOTYPES
extern struct bool_tree_node	*bt_create_internal (
				    int,
				    struct bool_tree_node *,
				    struct bool_tree_node *);
extern struct bool_tree_node	*bt_create_leaf (char*);
extern void			show_tree_infix (
				    struct bool_tree_node *,
				    int);
extern void			show_tree_lisp (struct bool_tree_node *);
extern int			cvt_to_gift_bool (struct bool_tree_node *);
extern void			show_gift_bool (struct bool_tree_node *, int);
#else
extern struct bool_tree_node *bt_create_internal(), *bt_create_leaf();
extern void show_tree_infix(), show_tree_lisp(), show_gift_bool();
extern int cvt_to_gift_bool();
#endif


#define show_tree(t,l)		if (l)				\
				{				\
				    show_tree_lisp((t));	\
				    printf("\n");		\
				}				\
				else				\
				    show_tree_infix((t), 0)
@


1.4
log
@update copyright to include span through 2003
@
text
@@


1.3
log
@Prototyping!
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1995 by the United States Army
@


1.3.6.1
log
@sync branch with HEAD
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
@


1.3.8.1
log
@sync to HEAD...
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
@


1.3.14.1
log
@merge from HEAD
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
@


1.2
log
@changes by PJT
@
text
@d81 2
d92 9
a107 2
extern int			cvt_to_gift_bool (struct bool_tree_node *);
extern void			show_gift_bool (struct bool_tree_node *, int);
@


1.1
log
@Initial revision
@
text
@a54 22
/*			C H K M A G ( )
 *
 *	    Check and validate a structure pointer
 *
 *	This macro has three parameters: a pointer, the magic number
 *	expected at that location, and a string describing the expected
 *	structure type.
 */
#define	CHKMAG(p, m, _s)					\
    if ((p) == 0)						\
    {								\
	fprintf(stderr, "Error: Null %s pointer, file %s, line %d\n",	\
	    (_s), __FILE__, __LINE__);				\
	exit (0);						\
    }								\
    else if (*((long *)(p)) != (m))				\
    {								\
	fprintf(stderr,						\
	    "Error: Bad %s pointer x%x s/b x%x was x%x, file %s, line %d\n", \
	    (_s), (p), (m), *((long *)(p)), __FILE__, __LINE__);\
	exit (0);						\
    }
@
