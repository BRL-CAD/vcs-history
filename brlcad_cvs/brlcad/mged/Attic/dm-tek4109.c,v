head	11.5;
access;
symbols
	rel-4-5:11.4
	ctj-4-5-post:11.4
	ctj-4-5-pre:11.4
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1;
locks; strict;
comment	@ * @;


11.5
date	98.10.23.15.12.08;	author bparker;	state dead;
branches;
next	11.4;

11.4
date	96.10.22.21.10.18;	author bparker;	state Exp;
branches;
next	11.3;

11.3
date	96.09.03.20.02.37;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	96.08.27.20.30.05;	author bparker;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.02.59;	author mike;	state Rel4_4;
branches;
next	10.11;

10.11
date	94.12.24.01.05.25;	author mike;	state Exp;
branches;
next	10.10;

10.10
date	94.12.23.22.59.53;	author mike;	state Exp;
branches;
next	10.9;

10.9
date	94.12.16.19.36.18;	author gdurf;	state Exp;
branches;
next	10.8;

10.8
date	94.11.05.03.54.21;	author mike;	state Exp;
branches;
next	10.7;

10.7
date	94.10.14.17.07.05;	author mike;	state Exp;
branches;
next	10.6;

10.6
date	94.10.14.16.06.32;	author mike;	state Exp;
branches;
next	10.5;

10.5
date	94.09.07.10.27.30;	author jra;	state Exp;
branches;
next	10.4;

10.4
date	94.08.10.21.42.58;	author mike;	state Exp;
branches;
next	10.3;

10.3
date	94.08.09.15.17.03;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	94.06.01.11.59.54;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.43.34;	author mike;	state Rel4_0;
branches;
next	9.5;

9.5
date	91.07.19.01.16.53;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	91.02.02.00.01.10;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	91.01.12.08.25.37;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	91.01.09.01.01.35;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.02.50;	author mike;	state Rel3_5;
branches;
next	8.5;

8.5
date	89.04.21.04.55.38;	author mike;	state Exp;
branches;
next	8.4;

8.4
date	89.04.06.20.39.46;	author mike;	state Exp;
branches;
next	8.3;

8.3
date	89.03.07.00.00.51;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.06.01.07.07;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.36.37;	author mike;	state Rel3_0;
branches;
next	7.5;

7.5
date	88.09.15.21.03.07;	author phil;	state Exp;
branches;
next	7.4;

7.4
date	88.05.15.23.05.03;	author mike;	state Exp;
branches;
next	7.3;

7.3
date	88.02.25.06.06.56;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	87.11.05.05.05.23;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.00.16;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.03.28;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.20.03;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.13.00.07.08;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.21.02;	author mike;	state Rel1;
branches;
next	1.4;

1.4
date	86.09.23.17.41.11;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	86.08.14.22.22.09;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	86.08.12.06.49.00;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	86.06.12.00.08.58;	author mike;	state Exp;
branches;
next	;


desc
@MGED Display Manager for Tektronix 4109
Courtesy of Steve Willson of Northrop NRTC.
@


11.5
log
@*- moved old display managers to dm_old
@
text
@/*
 *			D M - T E K 4 1 0 9 . C
 *
 * A modified version of the Tektronix 4014 display driver for
 * Tektronix 4109 compatible displays.
 *
 *  Authors -
 *	Michael John Muuss
 *      Glenn E. Martin (NRTC)
 *	Stephen Hunter Willson (NRTC) <willson@@nrtc-gremlin.ARPA>
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/dm-tek4109.c,v 11.4 1996/10/22 21:10:18 bparker Exp bparker $ (BRL)";
#endif

#include "conf.h"

/*  Notes:
    You almost certainly want to use this with two terminals.  Otherwise
you can't use the crosshairs to manipulate the image.
    The following keys can be pressed on the 4109 (while the cursor
is showing):
    b -- make objects bigger (zoom in)
    s -- make objects smaller (zoom out)
    Z -- print out current x and y coordinates of crosshair
    ' ' -- pick thing or coordinates pointed at
    . -- slew view

    The cursor speed is set to a moderate rate (5); pressing SHIFT
while moving the cursor increases the rate to fast (10).  This
is different from the factory default.


	Stephen Hunter Willson,
	NRTC
*/

#include <stdio.h>
#include <sys/time.h>		/* for struct timeval */
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "externs.h"
#include "./ged.h"
#include "./titles.h"
#include "./dm.h"
#include "./solid.h"

/* Display Manager package interface */
 
#define TEKBOUND	1000.0	/* Max magnification in Rot matrix */
int	T49_init();
int	T49_open();
void	T49_close();
MGED_EXTERN(void	T49_input, (fd_set *input, int noblock) );
void	T49_prolog(), T49_epilog();
void	T49_normal(), T49_newrot();
void	T49_update();
void	T49_puts(), T49_2d_line(), T49_light();
int	T49_object();
unsigned T49_cvtvecs(), T49_load();
void	T49_statechange(), T49_viewchange(), T49_colorchange();
void	T49_window(), T49_debug();
int     T49_dm();

struct dm dm_T49 = {
  T49_init,
  T49_open, T49_close,
  T49_input,
  T49_prolog, T49_epilog,
  T49_normal, T49_newrot,
  T49_update,
  T49_puts, T49_2d_line,
  T49_light,
  T49_object,
  T49_cvtvecs, T49_load,
  T49_statechange,
  T49_viewchange,
  T49_colorchange,
  T49_window, T49_debug, T49_dm, 0,
  0,				/* no displaylist */
  0,				/* can't rt to this */
  TEKBOUND,
  "tek4109", "Tektronix 4109",		/* NRTC */
  0,
  0,
  0,
  0
};

extern struct device_values dm_values;	/* values read from devices */

static vect_t clipmin, clipmax;		/* for vector clipping */
static int oloy = -1;
static int ohiy = -1;
static int ohix = -1;
static int oextra = -1;

#define BELL	007
#define	FF	014		/* Form Feed  */
#define SUB	032		/* Turn on graphics cursor */
#define GS	035		/* Enter Graphics Mode (1st vec dark) */
#define ESC	033		/* Escape */
#define US	037		/* Enter Alpha Mode */

static int second_fd;		/* fd of Tektronix if not /dev/tty */
static FILE *outfp;		/* Tektronix device to output on */
static char ttybuf[BUFSIZ];

static void	t49move(), t49cont();
static void	t49get_cursor(), t49cancel_cursor();
static void	t49label(), t49point(), t49linemod();

/*
 * Display coordinate conversion:
 *  Tektronix is using 0..4096
 *  GED is using -2048..+2048
 */
 

#define	GED_TO_TEK4109(x)	(((x)+2048) * 780 / 1024)
#define TEK4109_TO_GED(x)	(((x) * 1024 / 780) - 2048)

T49_init()
{
  return TCL_OK;
}

/*
 *			T E K _ O P E N
 *
 * Fire up the display manager, and the display processor.
 *
 */
T49_open()
{
	char line[64], line2[64];

	bu_log("Output tty [stdout]? ");
	(void)fgets( line, sizeof(line), stdin ); /* \n, null terminated */
	line[strlen(line)-1] = '\0';		/* remove newline */
	if( feof(stdin) )  
		quit();
	if( line[0] != '\0' )  {
#if VMS
		if( (outfp = fopen(line,"r+")) == NULL )  {
			if( (outfp = fopen(line,"r+w")) == NULL )  {
				perror(line);
				return(1);		/* BAD */
			}
		}
#else
		if( (outfp = fopen(line,"r+w")) == NULL )  {
			(void)sprintf( line2, "/dev/tty%s%c", line, '\0' );
			if( (outfp = fopen(line2,"r+w")) == NULL )  {
				perror(line);
				return(1);		/* BAD */
			}
		}
#endif
		second_fd = fileno(outfp);
	} 
	else 
	{
#if VMS
		if( (outfp = fopen("SYS$OUTPUT","r+")) == NULL )
#else
		if( (outfp = fopen("/dev/tty","r+w")) == NULL )
#endif
			return(1);	/* BAD */
		second_fd = 0;		/* no second filedes */
	}
	setbuf( outfp, ttybuf );
	fprintf(outfp,"%c%%!0",ESC);	/* Place in TEK mode */
	fprintf(outfp, "%cNF1", ESC);	/* Set dc1/dc3 flow ctrl */
	fprintf(outfp,"%cMCA>B8:",ESC);	/* Set Graphics Font Size */
	fprintf(outfp,"%cLLA>",ESC);	/* Set Dialog to 30 Lines */
	fprintf(outfp,"%cKI0",ESC);	/* Process Delete Characters */
	fprintf(outfp,"%cIJ5:",ESC);	/* Change GIN cursor speed to 5,10 */ 
	fprintf(outfp,"%cTCK4C2F4",ESC);/* Change GIN cursor to yellow */
	fprintf(outfp,"%cML2",ESC);	/* set graphics line index -> 2 (red) 
					   helps reduce alpha/graphics clutter 
					*/
	return(0);			/* OK */
}

/*
 *  			T E K _ C L O S E
 *  
 *  Gracefully release the display.
 */
void
T49_close()
{
	t49cancel_cursor();
	fprintf(outfp,"%cLZ", ESC);	/* clear screen */
	fprintf(outfp,"%cLLA8",ESC);	/* NRTC - Set Dialog to 24 Lines */
	fprintf(outfp,"%c%%!1",ESC);	/* NRTC - Place in ANSI mode */
	(void)putc(US,outfp);
	(void)fflush(outfp);
	fclose(outfp);
}

/*
 *			T E K _ R E S T A R T
 *
 * Used when the display processor wanders off.
 */
void
T49_restart()
{
	bu_log("%cTek_restart\n",US);		/* NRTC */
}

/*
 *			T E K _ P R O L O G
 *
 * There are global variables which are parameters to this routine.
 */
void
T49_prolog()
{
	if( !dmaflag )
		return;

	/* If something significant has happened, clear screen and redraw */

	(void)putc(ESC,outfp);	/* Miniature typeface */
	(void)putc(';',outfp);

	(void)fprintf(outfp, "%cLZ", ESC);	/* clear dialog area */
	(void)putc(ESC,outfp);			/* clear screen area */
	(void)putc(FF,outfp);
	(void)fflush(outfp);
	t49cancel_cursor();
	ohix = ohiy = oloy = oextra = -1;

	/* Put the center point up */
	t49point( 0, 0 );
}

/*
 *			T E K _ E P I L O G
 */
void
T49_epilog()
{
	if( !dmaflag )
		return;
        t49move( TITLE_XBASE, SOLID_YBASE );
	(void)putc(US,outfp);
}

/*
 *  			T E K _ N E W R O T
 *  Stub.
 */
/* ARGSUSED */
void
T49_newrot(mat)
mat_t mat;
{
	return;
}

/*
 *  			T E K _ O B J E C T
 *  
 *  Set up for an object, transformed as indicated, and with an
 *  object center as specified.  The ratio of object to screen size
 *  is passed in as a convienience.
 *
 *  Returns 0 if object could be drawn, !0 if object was omitted.
 */
/* ARGSUSED */
int
T49_object( sp, mat, ratio, white )
register struct solid *sp;
mat_t mat;
double ratio;
{
	static vect_t last;
	register struct rt_vlist	*vp;
	int useful = 0;

	if(  sp->s_soldash )
		fprintf(outfp,"%cMV2",ESC);		/* Dot Dash    NRTC */
	else	
		fprintf(outfp,"%cMV0",ESC);		/* Solid Line  NRTC */

	for( BU_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
		register int	i;
		register int	nused = vp->nused;
		register int	*cmd = vp->cmd;
		register point_t *pt = vp->pt;
		for( i = 0; i < nused; i++,cmd++,pt++ )  {
			static vect_t	start, fin;
			switch( *cmd )  {
			case RT_VLIST_POLY_START:
			case RT_VLIST_POLY_VERTNORM:
				continue;
			case RT_VLIST_POLY_MOVE:
			case RT_VLIST_LINE_MOVE:
				/* Move, not draw */
				MAT4X3PNT( last, model2view, *pt );
				continue;
			case RT_VLIST_POLY_DRAW:
			case RT_VLIST_POLY_END:
			case RT_VLIST_LINE_DRAW:
				/* draw */
				MAT4X3PNT( fin, model2view, *pt );
				VMOVE( start, last );
				VMOVE( last, fin );
				break;
			}
			if(
				vclip( start, fin, clipmin, clipmax ) == 0
			)  continue;

			t49move(	(int)( start[0] * 2047 ),
				(int)( start[1] * 2047 ) );
			t49cont(	(int)( fin[0] * 2047 ),
				(int)( fin[1] * 2047 ) );
			useful = 1;
		}
	}
	return(useful);
}

/*
 *			T E K _ N O R M A L
 *
 * Restore the display processor to a normal mode of operation
 * (ie, not scaled, rotated, displaced, etc).
 * Turns off windowing.
 */
void
T49_normal()
{
	return;
}

/*
 *			T E K _ U P D A T E
 *
 * Transmit accumulated displaylist to the display processor.
 */
void
T49_update()
{
	if( second_fd )  {
		/* put up graphics cursor */
		(void)putc(ESC,outfp);
		(void)putc(SUB,outfp);
	} else
		(void)putc(US,outfp);		/* Alpha mode */
	(void)fflush(outfp);
}

/*
 *			T E K _ P U T S
 *
 * Output a string into the displaylist.
 * The starting position of the beam is as specified.
 */
/* ARGSUSED */
void
T49_puts( str, x, y, size, color )
register char *str;
{
	t49move(x,y);
	t49label(str);
}

/*
 *			T E K _ 2 D _ G O T O
 *
 */
void
T49_2d_line( x1, y1, x2, y2, dashed )
int x1, y1;
int x2, y2;
int dashed;
{
	if( dashed )
		t49linemod("dotdashed");
	else
		t49linemod("solid");
	t49move(x1,y1);
	t49cont(x2,y2);
}

/*
 *			G E T _ C U R S O R
 *  
 *  Read the Tektronix cursor.  The Tektronix sends
 *  6 bytes:  The key the user struck, 4 bytes of
 *  encoded position, and a return (newline).
 *  Note this is is complicated if the user types
 *  a return or linefeed.
 *  (The terminal is assumed to be in cooked mode)
 */
static void
t49get_cursor()
{
	register char *cp;
	char ibuf[64];
	register int i;
	int hix, hiy, lox, loy;
	int xpen, ypen;

	/* ASSUMPTION:  Input is line buffered (tty cooked) */
	i = read( second_fd, ibuf, sizeof(ibuf) );
	/* The LAST 6 chars are the string from the tektronix */
	if( i < 6 )  {
		bu_log("short read of %d\n", i);
		return;		/* Fails if he hits RETURN */
	}
	cp = &ibuf[i-6];
	if( cp[5] != '\n' )  {
		bu_log("cursor synch?\n");
		bu_log("saw:%c%c%c%c%c%c\n",
			cp[0], cp[1], cp[2], cp[3], cp[4], cp[5] );
		return;
	}

	/* cp[0] is what user typed, followed by 4pos + NL */
	hix = ((int)cp[1]&037)<<7;
	lox = ((int)cp[2]&037)<<2;
	hiy = ((int)cp[3]&037)<<7;
	loy = ((int)cp[4]&037)<<2;

	/* Tek positioning is 0..4096,
	 * The desired range is -2048 <= x,y <= +2048.
	 */
	xpen = TEK4109_TO_GED(hix|lox);
	ypen = TEK4109_TO_GED(hiy|loy);
	if( xpen < -2048 || xpen > 2048 )
		xpen = 0;
	if( ypen < -2048 || ypen > 2048 )
		ypen = 0;

	switch(cp[0])  {
	case 'Z':
		bu_log("x=%d,y=%d\n", xpen, ypen);
		break;		/* NOP */
	case 'b':
		bu_vls_strcat( &dm_values.dv_string , "zoom 0.5\n" );
		break;
	case 's':
		bu_vls_strcat( &dm_values.dv_string , "zoom 2\n" );
		break;
	case '.':
		bu_vls_printf( &dm_values.dv_string , "M 1 %d %d\n", xpen, ypen );
		break;
	default:
		bu_log("s=smaller, b=bigger, .=slew, space=pick/slew\n");
		return;
	case ' ':
		bu_vls_printf( &dm_values.dv_string , "M 1 %d %d\n", xpen, ypen );
		break;
	}
}

/*
 *			T E K _ I N P U T
 *
 * Execution must suspend in this routine until a significant event
 * has occured on either the command stream, or a device event has
 * occured, unless "noblock" is set.
 *
 * Implicit Return -
 *	If any files are ready for input, their bits will be set in 'input'.
 *	Otherwise, 'input' will be all zeros.
 */
void
T49_input( input, noblock )
fd_set		*input;
int		noblock;
{
	struct timeval	tv;
	int		width;
	int		cnt;

#if defined(_SC_OPEN_MAX)
	if( (width = sysconf(_SC_OPEN_MAX)) <= 0 )
#endif
		width = 32;

	if( second_fd )  FD_SET( second_fd, input );

	/*
	 * Check for input on the keyboard
	 *
	 * Suspend execution until either
	 *  1)  User types a full line
	 *  2)  The timelimit on SELECT has expired
	 *
	 * If a RATE operation is in progress (zoom, rotate, slew)
	 * in which we still have to update the display,
	 * do not suspend execution.
	 */
	tv.tv_sec = 0;
	if( noblock )  {
		tv.tv_usec = 0;
	}  else  {
		/* 1/20th second */
		tv.tv_usec = 50000;
	}
	cnt = select( width, input, (fd_set *)0,  (fd_set *)0, &tv );
	if( cnt < 0 )  {
		perror("dm-tek/select");
	}

	if( second_fd && FD_ISSET(second_fd, input) )
		t49get_cursor();
}

/* 
 *			T E K _ L I G H T
 */
/* ARGSUSED */
void
T49_light( cmd, func )
int cmd;
int func;			/* BE_ or BV_ function */
{
	return;
}

/* ARGSUSED */
unsigned
T49_cvtvecs( sp )
struct solid *sp;
{
	return( 0 );
}

/*
 * Loads displaylist
 */
unsigned
T49_load( addr, count )
unsigned addr, count;
{
	bu_log("%cTek_load(x%x, %d.)\n",US, addr, count );
	return( 0 );
}

void
T49_statechange()
{
}

void
T49_viewchange()
{
}

void
T49_colorchange()
{
}

/*
 * Perform the interface functions
 * for the Tektronix 4014-1 or 4109 with Extended Graphics Option.
 * The Extended Graphics Option makes available a field of
 * 10 inches vertical, and 14 inches horizontal, with a resolution
 * of 287 points per inch.
 *
 * The Tektronix is Quadrant I, 4096x4096 (not all visible).
 */

/* The input we see is -2048..+2047 */
/* Continue motion from last position */
static void
t49cont(x,y)
register int x,y;
{
	int hix,hiy,lox,loy,extra;

	x = GED_TO_TEK4109(x);
	y = GED_TO_TEK4109(y);

	hix=(x>>7) & 037;
	hiy=(y>>7) & 037;
	lox = (x>>2)&037;
	loy=(y>>2)&037;
	extra=x&03+(y<<2)&014;
#if 0
	n = (abs(hix-ohix) + abs(hiy-ohiy) + 6) / 12;
#endif
	if(hiy != ohiy){
		(void)putc(hiy|040,outfp);
		ohiy=hiy;
	}
	if(hix != ohix) {
		if(extra != oextra) {
			(void)putc(extra|0140,outfp);
			oextra=extra;
		}
		(void)putc(loy|0140,outfp);
		(void)putc(hix|040,outfp);
		ohix=hix;
		oloy=loy;
	} else {
		if(extra != oextra) {
			(void)putc(extra|0140,outfp);
			(void)putc(loy|0140,outfp);
			oextra=extra;
			oloy=loy;
		} else if(loy != oloy) {
			(void)putc(loy|0140,outfp);
			oloy=loy;
		}
	}
	(void)putc(lox|0100,outfp);
#if 0
	while(n--)
		(void)putc(0,outfp);
#endif
}

static void
t49move(xi,yi)
{
/*	fprintf(outfp,"%cTekmove: x=%d, y=%d \n",US,xi+2048,yi+2048);   */
								/* NRTC */
	(void)putc(GS,outfp);			/* Next vector blank */
	t49cont(xi,yi);
}

static void
t49cancel_cursor()
{
	extern unsigned sleep();
	(void)fprintf(outfp, "%cKC", ESC);	/* Cancel crosshairs */
	(void)fflush(outfp);
	sleep(2);	/* Have to wait for terminal reset */
}

static void t49label(s)
register char *s;
{
int	length;				/* NRTC */
char	hi, low;				/* NRTC */
	length= strlen(s);			/* NRTC */
	if ( length <= 0 ) {			/* NRTC */
	   (void)putc(US,outfp);			/* NRTC */
	   ohix = ohiy = oloy = oextra = -1;		/* NRTC */
	   return;				/* NRTC */
	   }					/* NRTC */
	hi = (length>>4) + 64;			/* NRTC */
	low= (length & 15) + 48;		/* NRTC */
	(void)fprintf(outfp,"%cLT%c%c%s",ESC,hi,low,s); /* NRTC */
	(void)putc(US,outfp);			/* NRTC */
	ohix = ohiy = oloy = oextra = -1;
}

/* Line Mode Command - Select Tektronics Preset Line Display 4014 */

static void t49linemod(s)
register char *s;
{
	char  c;

	switch(s[0]){
	case 'l':	
		c = '7';                         /* Long Dashed Line   NRTC */
		break;
	case 'd':	
		if(s[3] != 'd')c='1';		/* Dot Line   NRTC */
		else c='2';			/* Dot-Dashed Line  NRTC  */
		break;
	case 's':
		if(s[5] != '\0')c='3';		/* Short Dash Line  NRTC  */
		else c='0';			/* Solid Line       NRTC  */
		break;
	default:			/* DAG -- added support for colors */
		c = '0';			/* Solid Line        NRTC */
		break;
	}
	fprintf(outfp,"%cMV%c",ESC,c);		/* Set Line Mode  NRTC */
 
}

static void
t49point(xi,yi){
        t49move(xi,yi);
	t49cont(xi,yi);
}

/* ARGSUSED */
void
T49_debug(lvl)
{
}

void
T49_window(w)
register int w[];
{
	/* Compute the clipping bounds */
	clipmin[0] = w[1] / 2048.;
	clipmin[1] = w[3] / 2048.;
	clipmin[2] = w[5] / 2048.;
	clipmax[0] = w[0] / 2047.;
	clipmax[1] = w[2] / 2047.;
	clipmax[2] = w[4] / 2047.;
}

int
T49_dm(argc, argv)
int argc;
char *argv[];
{
  return TCL_OK;
}
@


11.4
log
@hacks to use latest libdm
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 11.3 1996/09/03 20:02:37 bparker Exp bparker $ (BRL)";
@


11.3
log
@rt_list ---> bu_list
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 11.2 1996/08/27 20:30:05 bparker Exp bparker $ (BRL)";
a46 3



d62 1
d74 1
d77 22
a98 17
	T49_open, T49_close,
	T49_input,
	T49_prolog, T49_epilog,
	T49_normal, T49_newrot,
	T49_update,
	T49_puts, T49_2d_line,
	T49_light,
	T49_object,
	T49_cvtvecs, T49_load,
	T49_statechange,
	T49_viewchange,
	T49_colorchange,
	T49_window, T49_debug,
	0,				/* no displaylist */
	0,				/* can't rt to this */
	TEKBOUND,
	"tek4109", "Tektronix 4109"		/* NRTC */
d134 5
d721 8
@


11.2
log
@now using libbu
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 11.1 1995/01/04 10:02:59 mike Rel4_4 bparker $ (BRL)";
d53 1
d292 1
a292 1
	for( RT_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
@


11.1
log
@Release_4.4
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.11 94/12/24 01:05:25 mike Exp $ (BRL)";
d139 1
a139 1
	rt_log("Output tty [stdout]? ");
d212 1
a212 1
	rt_log("%cTek_restart\n",US);		/* NRTC */
d416 1
a416 1
		rt_log("short read of %d\n", i);
d421 2
a422 2
		rt_log("cursor synch?\n");
		rt_log("saw:%c%c%c%c%c%c\n",
d445 1
a445 1
		rt_log("x=%d,y=%d\n", xpen, ypen);
d448 1
a448 1
		rt_vls_strcat( &dm_values.dv_string , "zoom 0.5\n" );
d451 1
a451 1
		rt_vls_strcat( &dm_values.dv_string , "zoom 2\n" );
d454 1
a454 1
		rt_vls_printf( &dm_values.dv_string , "M 1 %d %d\n", xpen, ypen );
d457 1
a457 1
		rt_log("s=smaller, b=bigger, .=slew, space=pick/slew\n");
d460 1
a460 1
		rt_vls_printf( &dm_values.dv_string , "M 1 %d %d\n", xpen, ypen );
d546 1
a546 1
	rt_log("%cTek_load(x%x, %d.)\n",US, addr, count );
@


10.11
log
@Eliminated old dm_values.dv_* style "polled" device interface.
Everything is done by string commands now.
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.10 94/12/23 22:59:53 mike Exp Locker: mike $ (BRL)";
@


10.10
log
@Added code to skip per-vertex normals.
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.9 94/12/16 19:36:18 gdurf Exp Locker: mike $ (BRL)";
a513 2

	dm_values.dv_penpress = 0;
@


10.9
log
@Converted printf(...) and fprintf(stdout, ...) to rt_log(...).
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.8 1994/11/05 03:54:21 mike Exp gdurf $ (BRL)";
d300 1
@


10.8
log
@Irix 6
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.7 94/10/14 17:07:05 mike Exp Locker: mike $ (BRL)";
d139 1
a139 1
	(void)printf("Output tty [stdout]? ");
d212 1
a212 1
	(void)printf("%cTek_restart\n",US);		/* NRTC */
d415 1
a415 1
		(void)printf("short read of %d\n", i);
d420 2
a421 2
		(void)printf("cursor synch?\n");
		(void)printf("saw:%c%c%c%c%c%c\n",
d444 1
a444 1
		(void)printf("x=%d,y=%d\n", xpen, ypen);
d456 1
a456 1
		(void)printf("s=smaller, b=bigger, .=slew, space=pick/slew\n");
d547 1
a547 1
	(void)printf("%cTek_load(x%x, %d.)\n",US, addr, count );
@


10.7
log
@#if defined(_SC_OPEN_MAX)
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.6 94/10/14 16:06:32 mike Exp Locker: mike $ (BRL)";
a582 1
	int n;
d592 1
d594 1
d620 4
a623 2
/*	while(n--)
		(void)putc(0,outfp);  */
@


10.6
log
@Changed from getdtablesize() to sysconf(_SC_OPEN_MAX)
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.5 94/09/07 10:27:30 jra Exp Locker: mike $ (BRL)";
d484 1
d486 1
@


10.5
log
@Converted to use dm_values.dv_string instead of changing values directly.
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.4 94/08/10 21:42:58 mike Exp Locker: jra $ (BRL)";
d484 1
a484 1
	if( (width = getdtablesize()) <= 0 )
@


10.4
log
@Changed calling sequence to dmr_input(), to pass an fd_set rather
than a single file descriptor.
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.3 94/08/09 15:17:03 gdurf Exp Locker: mike $ (BRL)";
d409 1
d435 6
a440 6
	dm_values.dv_xpen = TEK4109_TO_GED(hix|lox);
	dm_values.dv_ypen = TEK4109_TO_GED(hiy|loy);
	if( dm_values.dv_xpen < -2048 || dm_values.dv_xpen > 2048 )
		dm_values.dv_xpen = 0;
	if( dm_values.dv_ypen < -2048 || dm_values.dv_ypen > 2048 )
		dm_values.dv_ypen = 0;
d444 1
a444 1
		(void)printf("x=%d,y=%d\n", dm_values.dv_xpen, dm_values.dv_ypen);
d447 1
a447 1
		dm_values.dv_penpress = DV_INZOOM;
d450 1
a450 1
		dm_values.dv_penpress = DV_OUTZOOM;
d453 1
a453 1
		dm_values.dv_penpress = DV_SLEW;
d459 1
a459 1
		dm_values.dv_penpress = DV_PICK;
@


10.3
log
@Added include of conf.h
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.2 1994/06/01 11:59:54 gdurf Exp gdurf $ (BRL)";
d51 1
d66 1
a66 1
int	T49_input();
d470 3
a472 5
 * The GED "generic input" structure is filled in.
 *
 * Returns:
 *	0 if no command waiting to be read,
 *	1 if command is waiting to be read.
d474 4
a477 1
T49_input( cmd_fd, noblock )
d479 3
a481 1
	static long readfds;
d483 5
d489 1
a489 1
	 * Check for input on the keyboard or on the polled registers.
d493 1
a493 2
	 *  2)  A change in peripheral status occurs
	 *  3)  The timelimit on SELECT has expired
d496 1
a496 2
	 * in which the peripherals (rate setting) may not be changed,
	 * but we still have to update the display,
d499 11
a509 3
	readfds = (1<<cmd_fd);
	if( second_fd )
		readfds |= (1<<second_fd);
d511 1
a511 4
	if( noblock )
		readfds = bsdselect( readfds, 0, 0 );
	else
		readfds = bsdselect( readfds, 30*60, 0 );
d513 1
a513 2
	dm_values.dv_penpress = 0;
	if( second_fd && readfds & (1<<second_fd) )
a514 5

	if( readfds & (1<<cmd_fd) )
		return(1);		/* command awaits */
	else
		return(0);		/* just peripheral stuff */
@


10.2
log
@Replaced gets() with fgets()
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 10.1 91/10/12 06:43:34 mike Rel4_0 $ (BRL)";
d24 2
@


10.1
log
@Release_4.0
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 9.5 91/07/19 01:16:53 mike Exp $ (BRL)";
d137 2
a138 1
	(void)gets( line );		/* Null terminated */
@


9.5
log
@Don't use u_char on IBM.
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 9.4 91/02/02 00:01:10 mike Exp $ (BRL)";
@


9.4
log
@Modified for new rt_vlist structures
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 9.3 91/01/12 08:25:37 mike Exp $ (BRL)";
a57 2
typedef unsigned char u_char;

d364 1
a364 1
register u_char *str;
@


9.3
log
@externs.h
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 9.2 91/01/09 01:01:35 mike Exp $ (BRL)";
d281 1
a281 1
	register struct vlist *vp;
d289 24
a312 12
	for( vp = sp->s_vlist; vp != VL_NULL; vp = vp->vl_forw )  {
		/* Viewing region is from -1.0 to +1.0 */
		if( vp->vl_draw == 0 )  {
			/* Move, not draw */
			MAT4X3PNT( last, mat, vp->vl_pnt );
		}  else  {
			static vect_t fin;
			static vect_t start;
			/* draw */
			MAT4X3PNT( fin, mat, vp->vl_pnt );
			VMOVE( start, last );
			VMOVE( last, fin );
a313 2
				/* sqrt(1+1) */
				(ratio >= 0.7071)  &&
@


9.2
log
@Added prefix to static names, and macros, for ctags.
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/dm-tek4109.c,v 9.1 89/05/19 06:02:50 mike Rel3_5 $ (BRL)";
a56 2

extern void	perror();
@


9.1
log
@Release_3.5
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 8.5 89/04/21 04:55:38 mike Exp $ (BRL)";
d117 1
a117 1
static void	get_cursor(), cancel_cursor();
d127 2
a128 2
#define	GED_TO_TEK(x)	(((x)+2048) * 780 / 1024)
#define TEK_TO_GED(x)	(((x) * 1024 / 780) - 2048)
d195 1
a195 1
	cancel_cursor();
d235 1
a235 1
	cancel_cursor();
d393 1
a393 1
get_cursor()
d424 2
a425 2
	dm_values.dv_xpen = TEK_TO_GED(hix|lox);
	dm_values.dv_ypen = TEK_TO_GED(hiy|loy);
d494 1
a494 1
		get_cursor();
d567 2
a568 2
	x = GED_TO_TEK(x);
	y = GED_TO_TEK(y);
d615 1
a615 1
cancel_cursor()
@


8.5
log
@Faceplate screen locations moved to titles.h
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 8.4 89/04/06 20:39:46 mike Locked $ (BRL)";
@


8.4
log
@Extern function declarations that used to be local to this module
and in solid.h are now in "externs.h"
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 8.3 89/03/07 00:00:51 mike Locked $ (BRL)";
d52 1
d54 1
a55 1
#include "externs.h"
@


8.3
log
@Eliminated unused static declaration
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 8.2 88/12/06 01:07:07 mike Locked $ (BRL)";
d54 1
@


8.2
log
@Added #include <raytrace.h> for vector list stuff
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: /cad/d/mike/cad/mged/RCS/dm-tek4109.c,v 1.2 88/10/23 13:56:20 mike Exp $ (BRL)";
d114 1
a114 1
static void	t49move(), t49cont(), t49debug();
@


8.1
log
@Release_3.0
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 7.5 88/09/15 21:03:07 phil Exp $ (BRL)";
d51 1
@


7.5
log
@added release display flag
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 7.4 88/05/15 23:05:03 phil Locked $ (BRL)";
@


7.4
log
@lint fixes
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 7.3 88/02/25 06:06:56 mike Locked $ (BRL)";
d89 1
@


7.3
log
@Modified for new vector lists
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 7.2 87/11/05 05:05:23 mike Locked $ (BRL)";
d112 3
a114 1
static void tekmove(), tekcont();
d235 1
a235 1
	point( 0, 0 );
d246 1
a246 1
        tekmove( TITLE_XBASE, SOLID_YBASE );
d305 1
a305 1
			tekmove(	(int)( start[0] * 2047 ),
d307 1
a307 1
			tekcont(	(int)( fin[0] * 2047 ),
d356 2
a357 2
	tekmove(x,y);
	label(str);
d371 1
a371 1
		linemod("dotdashed");
d373 3
a375 3
		linemod("solid");
	tekmove(x1,y1);
	tekcont(x2,y2);
d388 2
a389 1
static get_cursor()
d557 1
a557 1
tekcont(x,y)
d602 1
a602 1
tekmove(xi,yi)
d607 1
a607 1
	tekcont(xi,yi);
d610 2
a611 1
static cancel_cursor()
d619 1
a619 1
static label(s)
a620 1

d639 1
a639 1
static linemod(s)
d664 4
a667 3
static point(xi,yi){
        tekmove(xi,yi);
	tekcont(xi,yi);
@


7.2
log
@Eliminated local machine.h, converted to fastf_t, now link with librt.a
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 7.1 87/11/03 00:00:16 mike Rel $ (BRL)";
d277 1
a277 2
	register struct veclist *vp;
	int nvec;
d285 1
a285 2
	nvec = sp->s_vlen;
	for( vp = sp->s_vlist; nvec-- > 0; vp++ )  {
d287 1
a287 1
		if( vp->vl_pen == PEN_UP )  {
@


7.1
log
@Release 2.3
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 6.1 87/07/11 08:03:28 mike Rel $ (BRL)";
d49 1
a49 1
#include "./machine.h"	/* special copy */
@


6.1
log
@Release 2.0
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 5.1 87/06/24 22:20:03 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 4.2 87/02/13 00:07:08 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 4.1 86/12/29 03:21:02 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 1.4 86/09/23 17:41:11 mike Exp $ (BRL)";
@


1.4
log
@Minor cleanup for cray
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 1.3 86/08/14 22:22:09 mike Exp $ (BRL)";
@


1.3
log
@Changed attach() to bsdattach() to provide better insulation.
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 1.2 86/08/12 06:49:00 mike Exp $ (BRL)";
d62 11
a72 11
int	Tek4109_open();
void	Tek4109_close();
int	Tek4109_input();
void	Tek4109_prolog(), Tek4109_epilog();
void	Tek4109_normal(), Tek4109_newrot();
void	Tek4109_update();
void	Tek4109_puts(), Tek4109_2d_line(), Tek4109_light();
int	Tek4109_object();
unsigned Tek4109_cvtvecs(), Tek4109_load();
void	Tek4109_statechange(), Tek4109_viewchange(), Tek4109_colorchange();
void	Tek4109_window(), Tek4109_debug();
d74 14
a87 14
struct dm dm_Tek4109 = {
	Tek4109_open, Tek4109_close,
	Tek4109_input,
	Tek4109_prolog, Tek4109_epilog,
	Tek4109_normal, Tek4109_newrot,
	Tek4109_update,
	Tek4109_puts, Tek4109_2d_line,
	Tek4109_light,
	Tek4109_object,
	Tek4109_cvtvecs, Tek4109_load,
	Tek4109_statechange,
	Tek4109_viewchange,
	Tek4109_colorchange,
	Tek4109_window, Tek4109_debug,
d130 1
a130 1
Tek4109_open()
d187 1
a187 1
Tek4109_close()
d204 1
a204 1
Tek4109_restart()
d215 1
a215 1
Tek4109_prolog()
d240 1
a240 1
Tek4109_epilog()
d254 1
a254 1
Tek4109_newrot(mat)
d271 1
a271 1
Tek4109_object( sp, mat, ratio, white )
d323 1
a323 1
Tek4109_normal()
d334 1
a334 1
Tek4109_update()
d353 1
a353 1
Tek4109_puts( str, x, y, size, color )
d365 1
a365 1
Tek4109_2d_line( x1, y1, x2, y2, dashed )
d461 1
a461 1
Tek4109_input( cmd_fd, noblock )
d502 1
a502 1
Tek4109_light( cmd, func )
d511 1
a511 1
Tek4109_cvtvecs( sp )
d521 1
a521 1
Tek4109_load( addr, count )
d529 1
a529 1
Tek4109_statechange()
d534 1
a534 1
Tek4109_viewchange()
d539 1
a539 1
Tek4109_colorchange()
d670 1
a670 1
Tek4109_debug(lvl)
d675 1
a675 1
Tek4109_window(w)
@


1.2
log
@Changed #includes for CC -I../h
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-tek4109.c,v 1.1 86/06/12 00:08:58 mike Exp $ (BRL)";
a92 6
struct timeval	{			/* needed for select() */
	long	tv_sec;			/* seconds */
	long	tv_usec;		/* microseconds */
};


a463 1
	static struct timeval timeout;
a477 6
	if( noblock )
		timeout.tv_sec = 0;
	else
		timeout.tv_sec = 30*60;		/* 30 MINUTES for Tek */
	timeout.tv_usec = 0;

d481 5
a485 1
	(void)select( 32, &readfds, 0L, 0L, &timeout );
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
static char RCSid[] = "@@(#)$Header: dm-Tek4109.c,v 2.6 85/09/14 05:35:54 mike Exp $ (BRL)";
d50 4
a53 4
#include "../h/vmath.h"
#include "ged.h"
#include "dm.h"
#include "solid.h"
@
