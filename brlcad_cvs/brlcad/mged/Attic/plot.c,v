head	11.30;
access;
symbols
	ansi-20040405-merged:11.25.2.2
	postmerge-20040405-ansi:11.28
	premerge-20040404-ansi:11.27
	postmerge-autoconf:11.27
	autoconf-freeze:11.25.10.3
	premerge-autoconf:11.27
	postmerge-20040315-windows:11.27
	premerge-20040315-windows:11.26
	windows-20040315-freeze:11.25.4.2
	autoconf-20031203:11.25
	autoconf-20031202:11.25
	autoconf-branch:11.25.0.10
	phong-branch:11.25.0.8
	photonmap-branch:11.25.0.6
	rel-6-1-DP:11.25
	windows-branch:11.25.0.4
	rel-6-0-2:11.23
	ansi-branch:11.25.0.2
	rel-6-0-1-branch:11.23.0.2
	hartley-6-0-post:11.24
	hartley-6-0-pre:11.23
	rel-6-0-1:11.23
	rel-6-0:11.23
	rel-5-4:11.19
	offsite-5-3-pre:11.20
	rel-5-3:11.19
	rel-5-2:11.19
	rel-5-1-branch:11.19.0.2
	rel-5-1:11.19
	rel-5-0:11.17
	rel-5-0-beta:11.16
	rel-4-5:11.11
	ctj-4-5-post:11.9
	ctj-4-5-pre:11.9
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1
	rt-2:1.3;
locks; strict;
comment	@ * @;


11.30
date	2004.05.21.17.47.47;	author morrison;	state dead;
branches;
next	11.29;

11.29
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	11.28;

11.28
date	2004.04.05.09.09.12;	author morrison;	state Exp;
branches;
next	11.27;

11.27
date	2004.03.16.21.15.12;	author morrison;	state Exp;
branches;
next	11.26;

11.26
date	2004.02.02.17.39.34;	author morrison;	state Exp;
branches;
next	11.25;

11.25
date	2002.08.20.17.08.24;	author jra;	state Exp;
branches
	11.25.2.1
	11.25.4.1
	11.25.10.1;
next	11.24;

11.24
date	2002.08.15.20.55.36;	author hartley;	state Exp;
branches;
next	11.23;

11.23
date	2001.08.28.15.06.21;	author jra;	state Exp;
branches;
next	11.22;

11.22
date	2001.06.05.15.51.42;	author bparker;	state Exp;
branches;
next	11.21;

11.21
date	2001.06.01.19.23.25;	author bparker;	state Exp;
branches;
next	11.20;

11.20
date	2000.08.19.03.10.15;	author mike;	state Exp;
branches;
next	11.19;

11.19
date	2000.01.31.15.09.58;	author jra;	state Exp;
branches;
next	11.18;

11.18
date	2000.01.06.22.06.55;	author mike;	state Exp;
branches;
next	11.17;

11.17
date	99.09.01.18.55.11;	author bparker;	state Exp;
branches;
next	11.16;

11.16
date	99.01.12.21.54.16;	author jra;	state Exp;
branches;
next	11.15;

11.15
date	99.01.12.21.42.01;	author bparker;	state Exp;
branches;
next	11.14;

11.14
date	98.11.06.22.32.42;	author bparker;	state Exp;
branches;
next	11.13;

11.13
date	98.10.21.16.30.21;	author bparker;	state Exp;
branches;
next	11.12;

11.12
date	98.06.24.17.45.59;	author bparker;	state Exp;
branches;
next	11.11;

11.11
date	97.07.01.22.09.08;	author bparker;	state Exp;
branches;
next	11.10;

11.10
date	97.06.20.02.24.00;	author gdurf;	state Exp;
branches;
next	11.9;

11.9
date	97.04.24.18.03.58;	author bparker;	state Exp;
branches;
next	11.8;

11.8
date	97.04.16.20.23.49;	author bparker;	state Exp;
branches;
next	11.7;

11.7
date	96.09.25.20.16.42;	author bparker;	state Exp;
branches;
next	11.6;

11.6
date	96.09.23.18.22.47;	author bparker;	state Exp;
branches;
next	11.5;

11.5
date	96.09.03.20.02.37;	author bparker;	state Exp;
branches;
next	11.4;

11.4
date	96.08.27.20.27.25;	author bparker;	state Exp;
branches;
next	11.3;

11.3
date	96.08.27.16.02.23;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	96.04.18.20.28.43;	author bparker;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.03.25;	author mike;	state Rel4_4;
branches;
next	10.5;

10.5
date	94.12.23.23.03.30;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.12.16.19.37.04;	author gdurf;	state Exp;
branches;
next	10.3;

10.3
date	94.08.09.18.16.51;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	94.06.01.15.13.54;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.44.12;	author mike;	state Rel4_0;
branches;
next	9.8;

9.8
date	91.09.20.15.42.47;	author mike;	state Exp;
branches;
next	9.7;

9.7
date	91.07.08.22.49.41;	author mike;	state Exp;
branches;
next	9.6;

9.6
date	91.06.30.21.16.43;	author mike;	state Exp;
branches;
next	9.5;

9.5
date	91.02.02.00.01.47;	author mike;	state Exp;
branches;
next	9.4;

9.4
date	91.01.29.00.27.56;	author mike;	state Exp;
branches;
next	9.3;

9.3
date	91.01.28.18.28.58;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	91.01.12.08.13.53;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.03.37;	author mike;	state Rel3_5;
branches;
next	8.4;

8.4
date	89.04.06.20.40.17;	author mike;	state Exp;
branches;
next	8.3;

8.3
date	89.01.18.01.55.26;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	88.12.06.02.30.39;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.37.14;	author mike;	state Rel3_0;
branches;
next	7.4;

7.4
date	88.02.25.06.09.07;	author mike;	state Exp;
branches;
next	7.3;

7.3
date	88.02.25.00.22.37;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	87.11.05.05.06.37;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.01.39;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.04.55;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.21.50;	author mike;	state Rel;
branches;
next	4.2;

4.2
date	87.02.13.00.12.48;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.22.39;	author mike;	state Rel1;
branches;
next	1.9;

1.9
date	86.09.24.04.45.13;	author mike;	state Exp;
branches;
next	1.8;

1.8
date	86.09.23.17.41.50;	author mike;	state Exp;
branches;
next	1.7;

1.7
date	86.08.12.06.50.22;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	86.04.09.01.10.02;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	86.03.10.21.01.12;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	85.09.14.05.37.20;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	85.08.07.05.19.32;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	85.03.28.22.26.13;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	85.03.28.20.51.27;	author mike;	state Exp;
branches;
next	;

11.25.2.1
date	2002.09.19.18.02.03;	author morrison;	state Exp;
branches;
next	11.25.2.2;

11.25.2.2
date	2004.03.17.21.22.01;	author morrison;	state Exp;
branches;
next	;

11.25.4.1
date	2002.09.26.23.04.12;	author morrison;	state Exp;
branches;
next	11.25.4.2;

11.25.4.2
date	2004.03.11.23.46.36;	author morrison;	state Exp;
branches;
next	11.25.4.3;

11.25.4.3
date	2004.03.17.04.15.12;	author morrison;	state Exp;
branches;
next	;

11.25.10.1
date	2004.02.12.18.34.15;	author erikg;	state Exp;
branches;
next	11.25.10.2;

11.25.10.2
date	2004.03.15.14.07.39;	author erikg;	state Exp;
branches;
next	11.25.10.3;

11.25.10.3
date	2004.03.18.18.10.31;	author erikg;	state Exp;
branches;
next	;


desc
@f_plot:  generate UNIX-plot of current view, with serveral options.
f_area:  compute the presented area from this view, with help
	from several other utilities (boundp, parea).
@


11.30
log
@moved to src/mged/
@
text
@/*
 *  			P L O T . C
 *  
 *	Provide UNIX-plot output of the current view.
 *
 *  Authors -
 *  	Michael John Muuss	(This version)
 *	Douglas A. Gwyn		(3-D UNIX Plot routines)
 *  	Gary S. Moss		(Original gedplot program)
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/mged/plot.c,v 11.29 2004/05/10 15:30:48 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <math.h>
#include <stdio.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"
#include "./ged.h"
#include "externs.h"
#include "plot3.h"
#include "./mged_solid.h"
#include "./mged_dm.h"

/*
 *  			F _ P L O T
 *
 *  plot file [opts]
 *  potential options might include:
 *	grid, 3d w/color, |filter, infinite Z
 */
int
f_plot(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	register struct solid		*sp;
	register struct rt_vlist	*vp;
	register FILE *fp;
	static vect_t clipmin, clipmax;
	static vect_t last;		/* last drawn point */
	static vect_t fin;
	static vect_t start;
	int Three_D;			/* 0=2-D -vs- 1=3-D */
	int Z_clip;			/* Z clipping */
	int Dashing;			/* linetype is dashed */
	int floating;			/* 3-D floating point plot */
	int	is_pipe = 0;

	if(argc < 2){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help plot");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	if( not_state( ST_VIEW, "UNIX Plot of view" ) )
	  return TCL_ERROR;

	/* Process any options */
	Three_D = 1;				/* 3-D w/color, by default */
	Z_clip = 0;				/* NO Z clipping, by default*/
	floating = 0;
	while( argv[1] != (char *)0 && argv[1][0] == '-' )  {
		switch( argv[1][1] )  {
		case 'f':
			floating = 1;
			break;
		case '3':
			Three_D = 1;
			break;
		case '2':
			Three_D = 0;		/* 2-D, for portability */
			break;
		case 'g':
		  /* do grid */
		  Tcl_AppendResult(interp, "grid unimplemented\n", (char *)NULL);
		  break;
		case 'z':
		case 'Z':
		  /* Enable Z clipping */
		  Tcl_AppendResult(interp, "Clipped in Z to viewing cube\n", (char *)NULL);
		  Z_clip = 1;
		  break;
		default:
		  Tcl_AppendResult(interp, "bad PLOT option ", argv[1], "\n", (char *)NULL);
		  break;
		}
		argv++;
	}
	if( argv[1] == (char *)0 )  {
	  Tcl_AppendResult(interp, "no filename or filter specified\n", (char *)NULL);
	  return TCL_ERROR;
	}
	if( argv[1][0] == '|' )  {
		struct bu_vls	str;
		bu_vls_init( &str );
		bu_vls_strcpy( &str, &argv[1][1] );
		while( (++argv)[1] != (char *)0 )  {
			bu_vls_strcat( &str, " " );
			bu_vls_strcat( &str, argv[1] );
		}
		if( (fp = popen( bu_vls_addr( &str ), "w" ) ) == NULL )  {
			perror( bu_vls_addr( &str ) );
			return TCL_ERROR;
		}

		Tcl_AppendResult(interp, "piped to ", bu_vls_addr( &str ),
				 "\n", (char *)NULL);
		bu_vls_free( &str );
		is_pipe = 1;
	}  else  {
		if( (fp = fopen( argv[1], "w" )) == NULL )  {
		  perror( argv[1] );
		  return TCL_ERROR;
		}

		Tcl_AppendResult(interp, "plot stored in ", argv[1], "\n", (char *)NULL);
		is_pipe = 0;
	}

	if( floating )  {
		pd_3space( fp,
			-view_state->vs_vop->vo_center[MDX] - view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDY] - view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDZ] - view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDX] + view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDY] + view_state->vs_vop->vo_scale,
			-view_state->vs_vop->vo_center[MDZ] + view_state->vs_vop->vo_scale );
		Dashing = 0;
		pl_linmod( fp, "solid" );
		FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
			/* Could check for differences from last color */
			pl_color( fp,
				sp->s_color[0],
				sp->s_color[1],
				sp->s_color[2] );
			if( Dashing != sp->s_soldash )  {
				if( sp->s_soldash )
					pl_linmod( fp, "dotdashed");
				else
					pl_linmod( fp, "solid");
				Dashing = sp->s_soldash;
			}
			rt_vlist_to_uplot( fp, &(sp->s_vlist) );
		}
		goto out;
	}

	/*
	 *  Integer output version, either 2-D or 3-D.
	 *  Viewing region is from -1.0 to +1.0
	 *  which is mapped to integer space -2048 to +2048 for plotting.
	 *  Compute the clipping bounds of the screen in view space.
	 */
	clipmin[X] = -1.0;
	clipmax[X] =  1.0;
	clipmin[Y] = -1.0;
	clipmax[Y] =  1.0;
	if( Z_clip )  {
		clipmin[Z] = -1.0;
		clipmax[Z] =  1.0;
	} else {
		clipmin[Z] = -1.0e20;
		clipmax[Z] =  1.0e20;
	}

	if( Three_D )
		pl_3space( fp, (int)GED_MIN, (int)GED_MIN, (int)GED_MIN, (int)GED_MAX, (int)GED_MAX, (int)GED_MAX );
	else
		pl_space( fp, (int)GED_MIN, (int)GED_MIN, (int)GED_MAX, (int)GED_MAX );
	pl_erase( fp );
	Dashing = 0;
	pl_linmod( fp, "solid");
	FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
		if( Dashing != sp->s_soldash )  {
			if( sp->s_soldash )
				pl_linmod( fp, "dotdashed");
			else
				pl_linmod( fp, "solid");
			Dashing = sp->s_soldash;
		}
		for( BU_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
			register int	i;
			register int	nused = vp->nused;
			register int	*cmd = vp->cmd;
			register point_t *pt = vp->pt;
			for( i = 0; i < nused; i++,cmd++,pt++ )  {
				switch( *cmd )  {
				case RT_VLIST_POLY_START:
				case RT_VLIST_POLY_VERTNORM:
					continue;
				case RT_VLIST_POLY_MOVE:
				case RT_VLIST_LINE_MOVE:
					/* Move, not draw */
					MAT4X3PNT( last, view_state->vs_vop->vo_model2view, *pt );
					continue;
				case RT_VLIST_POLY_DRAW:
				case RT_VLIST_POLY_END:
				case RT_VLIST_LINE_DRAW:
					/* draw */
					MAT4X3PNT(fin, view_state->vs_vop->vo_model2view, *pt);
					VMOVE( start, last );
					VMOVE( last, fin );
					break;
				}
				if(
					vclip( start, fin, clipmin, clipmax ) == 0
				)  continue;

				if( Three_D )  {
					/* Could check for differences from last color */
					pl_color( fp,
						sp->s_color[0],
						sp->s_color[1],
						sp->s_color[2] );
					pl_3line( fp,
						(int)( start[X] * GED_MAX ),
						(int)( start[Y] * GED_MAX ),
						(int)( start[Z] * GED_MAX ),
						(int)( fin[X] * GED_MAX ),
						(int)( fin[Y] * GED_MAX ),
						(int)( fin[Z] * GED_MAX ) );
				}  else  {
					pl_line( fp,
						(int)( start[0] * GED_MAX ),
						(int)( start[1] * GED_MAX ),
						(int)( fin[0] * GED_MAX ),
						(int)( fin[1] * GED_MAX ) );
				}
			}
		}
	}
out:
	if( is_pipe )
		(void)pclose( fp );
	else
		(void)fclose( fp );

	return TCL_ERROR;
}

int
f_area(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	register struct solid		*sp;
	register struct rt_vlist	*vp;
	static vect_t last;
	static vect_t fin;
	FILE *fp_r;
	FILE *fp_w;
	int fd1[2]; /* mged | cad_boundp */
	int fd2[2]; /* cad_boundp | cad_parea */
	int fd3[2]; /* cad_parea | mged */
	int pid1;
	int pid2;
	int rpid;
	int retcode;
	char result[MAXLINE];
	char tol_str[32];
	char *tol_ptr;

#ifndef WIN32
	/* XXX needs fixing */

	CHECK_DBI_NULL;

	if(argc < 1 || 2 < argc){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help area");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	if( not_state( ST_VIEW, "Presented Area Calculation" ) == TCL_ERROR )
		return TCL_ERROR;

	if( BU_LIST_IS_EMPTY( &dgop->dgo_headSolid ) ) {
		Tcl_AppendResult(interp, "No objects displayed!!!\n", (char *)NULL );
		return TCL_ERROR;
	}

	FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
	  if( !sp->s_Eflag && sp->s_soldash != 0 )  {
	    struct bu_vls vls;

	    bu_vls_init(&vls);
	    bu_vls_printf(&vls, "help area");
	    Tcl_Eval(interp, bu_vls_addr(&vls));
	    bu_vls_free(&vls);
	    return TCL_ERROR;
	  }
	}

	if(argc == 2){
	  Tcl_AppendResult(interp, "Tolerance is ", argv[1], "\n", (char *)NULL);
	  tol_ptr = argv[1];
	}else{
	  struct bu_vls tmp_vls;
	  double tol = 0.005;

	  bu_vls_init(&tmp_vls);
	  sprintf(tol_str, "%e", tol);
	  tol_ptr = tol_str;
	  bu_vls_printf(&tmp_vls, "Auto-tolerance is %s\n", tol_str);
	  Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);
	  bu_vls_free(&tmp_vls);
	}

	if(pipe(fd1) != 0){
	  perror("f_area");
	  return TCL_ERROR;
	}

	if(pipe(fd2) != 0){
	  perror("f_area");
	  return TCL_ERROR;
	}

	if(pipe(fd3) != 0){
	  perror("f_area");
	  return TCL_ERROR;
	}

	if ((pid1 = fork()) == 0){
	  dup2(fd1[0], fileno(stdin));
	  dup2(fd2[1], fileno(stdout));

	  close(fd1[0]);
	  close(fd1[1]);
	  close(fd2[0]);
	  close(fd2[1]);
	  close(fd3[0]);
	  close(fd3[1]);

	  execlp("cad_boundp", "cad_boundp", "-t", tol_ptr, (char *)NULL);
	}

	if ((pid2 = fork()) == 0){
	  dup2(fd2[0], fileno(stdin));
	  dup2(fd3[1], fileno(stdout));

	  close(fd1[0]);
	  close(fd1[1]);
	  close(fd2[0]);
	  close(fd2[1]);
	  close(fd3[0]);
	  close(fd3[1]);

	  execlp("cad_parea", "cad_parea", (char *)NULL);
	}

	close(fd1[0]);
	close(fd2[0]);
	close(fd2[1]);
	close(fd3[1]);

	fp_w = fdopen(fd1[1], "w");
	fp_r = fdopen(fd3[0], "r");

	/*
	 * Write out rotated but unclipped, untranslated,
	 * and unscaled vectors
	 */
	FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
	  for( BU_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
	    register int	i;
	    register int	nused = vp->nused;
	    register int	*cmd = vp->cmd;
	    register point_t *pt = vp->pt;
	    for( i = 0; i < nused; i++,cmd++,pt++ )  {
	      switch( *cmd )  {
	      case RT_VLIST_POLY_START:
	      case RT_VLIST_POLY_VERTNORM:
		continue;
	      case RT_VLIST_POLY_MOVE:
	      case RT_VLIST_LINE_MOVE:
		/* Move, not draw */
		MAT4X3VEC(last, view_state->vs_vop->vo_rotation, *pt);
		continue;
	      case RT_VLIST_POLY_DRAW:
	      case RT_VLIST_POLY_END:
	      case RT_VLIST_LINE_DRAW:
		/* draw.  */
		MAT4X3VEC(fin, view_state->vs_vop->vo_rotation, *pt);
		break;
	      }

	      fprintf(fp_w, "%.9e %.9e %.9e %.9e\n",
		      last[X] * base2local,
		      last[Y] * base2local,
		      fin[X] * base2local,
		      fin[Y] * base2local );

	      VMOVE( last, fin );
	    }
	  }
	}
	
	fclose(fp_w);

	Tcl_AppendResult(interp, "Presented area from this viewpoint, square ",
			 bu_units_string(dbip->dbi_local2base), ":\n", (char *)NULL);

	/* Read result */
	fgets(result, MAXLINE, fp_r);
	Tcl_AppendResult(interp, result, "\n", (char *)NULL);

	while ((rpid = wait(&retcode)) != pid1 && rpid != -1);
	while ((rpid = wait(&retcode)) != pid2 && rpid != -1);

	fclose(fp_r);
	close(fd1[1]);
	close(fd3[0]);
#endif

	return TCL_OK;
}
@


11.29
log
@change conf.h to a wrapped config.h
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/mged/plot.c,v 11.28 2004/04/05 09:09:12 morrison Exp $ (BRL)";
@


11.28
log
@merge of ansi-6-0-branch into HEAD
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d24 5
a28 1
#include "conf.h"
@


11.27
log
@merge of windows-6-0-branch into head
@
text
@d47 1
a47 5
f_plot(clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int	argc;
char	**argv;
d259 1
a259 5
f_area(clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int	argc;
char	**argv;
@


11.26
log
@update copyright to include span through 2003
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.25 2002/08/20 17:08:24 jra Exp $ (BRL)";
d286 3
d441 1
@


11.25
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1985 by the United States Army.
d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.23 2001/08/28 15:06:21 jra Exp $ (BRL)";
@


11.25.10.1
log
@merge from HEAD
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.26 2004/02/02 17:39:34 morrison Exp $ (BRL)";
@


11.25.10.2
log
@merge from head
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.25.10.1 2004/02/12 18:34:15 erikg Exp $ (BRL)";
@


11.25.10.3
log
@merge from head
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a285 3
#ifndef WIN32
	/* XXX needs fixing */

a437 1
#endif
@


11.25.4.1
log
@Modifications (on a 6.0 source distribution) for initial port to windows (merged with sources close to 6.0.2)
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.25 2002/08/20 17:08:24 jra Exp $ (BRL)";
a285 3
// XXXXXXXXXXXXXXXXXXXX FIX LATER XXXXXXXXXXXXXXXXXXXXXXXXXx
#ifndef WIN32

a437 1
#endif
@


11.25.4.2
log
@sync to HEAD...
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/mged/plot.c,v 11.25.4.1 2002/09/26 23:04:12 morrison Exp $ (BRL)";
@


11.25.4.3
log
@remerge head into branch just in case someone checks out this branch later
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d286 1
a287 1
	/* XXX needs fixing */
@


11.25.2.1
log
@Initial ANSIfication
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.25 2002/08/20 17:08:24 jra Exp $ (BRL)";
d47 5
a51 1
f_plot(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d263 5
a267 1
f_area(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


11.25.2.2
log
@sync branch with HEAD
@
text
@d17 1
a17 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d21 1
a21 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
a277 3
#ifndef WIN32
	/* XXX needs fixing */

a429 1
#endif
@


11.24
log
@Converted from K&R to ANSI C - RFH
@
text
@d47 5
a51 1
f_plot(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
d263 5
a267 1
f_area(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


11.23
log
@"area" command now checks for no objects displayed
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.22 2001/06/05 15:51:42 bparker Exp $ (BRL)";
d47 1
a47 5
f_plot(clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int	argc;
char	**argv;
d259 1
a259 5
f_area(clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int	argc;
char	**argv;
@


11.22
log
@*- got rid of "#ifdef MGED_USE_VIEW_OBJ"
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.21 2001/06/01 19:23:25 bparker Exp $ (BRL)";
d300 5
@


11.21
log
@*- mods that reflect MGED's use of drawable geometry
   objects, database objects and view objects
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.20 2000/08/19 03:10:15 mike Exp $ (BRL)";
a141 1
#ifdef MGED_USE_VIEW_OBJ
a148 9
#else
		pd_3space( fp,
			-view_state->vs_toViewcenter[MDX] - view_state->vs_Viewscale,
			-view_state->vs_toViewcenter[MDY] - view_state->vs_Viewscale,
			-view_state->vs_toViewcenter[MDZ] - view_state->vs_Viewscale,
			-view_state->vs_toViewcenter[MDX] + view_state->vs_Viewscale,
			-view_state->vs_toViewcenter[MDY] + view_state->vs_Viewscale,
			-view_state->vs_toViewcenter[MDZ] + view_state->vs_Viewscale );
#endif
a214 1
#ifdef MGED_USE_VIEW_OBJ
a215 3
#else
					MAT4X3PNT( last, view_state->vs_model2view, *pt );
#endif
a220 1
#ifdef MGED_USE_VIEW_OBJ
a221 3
#else
					MAT4X3PNT( fin, view_state->vs_model2view, *pt );
#endif
a396 1
#ifdef MGED_USE_VIEW_OBJ
a397 3
#else
		MAT4X3VEC( last, view_state->vs_Viewrot, *pt );
#endif
a402 1
#ifdef MGED_USE_VIEW_OBJ
a403 3
#else
		MAT4X3VEC( fin, view_state->vs_Viewrot, *pt );
#endif
@


11.20
log
@
Reduced use of MAXARGS
@
text
@d21 1
a21 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.19 2000/01/31 15:09:58 jra Exp $ (BRL)";
d142 9
d158 1
d161 1
a161 1
		FOR_ALL_SOLIDS(sp, &HeadSolid.l)  {
d204 1
a204 1
	FOR_ALL_SOLIDS(sp, &HeadSolid.l)  {
d225 3
d229 1
d235 3
d239 1
d319 1
a319 1
	FOR_ALL_SOLIDS(sp, &HeadSolid.l)  {
d401 1
a401 1
	FOR_ALL_SOLIDS(sp, &HeadSolid.l)  {
d415 3
d419 1
d425 3
d429 1
@


11.19
log
@Eliminated some unused variables
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.18 2000/01/06 22:06:55 mike Exp $ (BRL)";
d66 1
a66 1
	if(argc < 2 || MAXARGS < argc){
@


11.18
log
@
Changed uses of rt_units_* routines to bu_units_*
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.17 1999/09/01 18:55:11 bparker Exp $ (BRL)";
a272 1
	char buf[128];
@


11.17
log
@*- mods to squak when a database is not open and a user
   tries to perform an operation that needs a valid dbip.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.16 1999/01/12 21:54:16 jra Exp $ (BRL)";
d422 1
a422 1
			 rt_units_string(dbip->dbi_local2base), ":\n", (char *)NULL);
@


11.16
log
@Changed default tolerance for area command.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.15 1999/01/12 21:42:01 bparker Exp $ (BRL)";
d287 1
a287 2
	if(dbip == DBI_NULL)
	  return TCL_OK;
@


11.15
log
@*- calling help
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.14 1998/11/06 22:32:42 bparker Exp $ (BRL)";
d320 1
a320 1
	  double tol = VIEWSIZE * 0.001;
d325 1
a325 1
	  bu_vls_printf(&tmp_vls, "Auto-tolerance of 0.1%% is %s\n", tol_str);
@


11.14
log
@*- use new structures
*- cleanup
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.13 1998/10/21 16:30:21 bparker Exp $ (BRL)";
d305 6
a310 1
	    Tcl_AppendResult(interp, "everything in view must be 'E'ed\n", (char *)NULL);
@


11.13
log
@*- use macro instead of literal
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.12 1998/06/24 17:45:59 bparker Exp $ (BRL)";
d143 6
a148 6
			-toViewcenter[MDX] - Viewscale,
			-toViewcenter[MDY] - Viewscale,
			-toViewcenter[MDZ] - Viewscale,
			-toViewcenter[MDX] + Viewscale,
			-toViewcenter[MDY] + Viewscale,
			-toViewcenter[MDZ] + Viewscale );
d188 1
a188 1
		pl_3space( fp, -2048, -2048, -2048, 2048, 2048, 2048 );
d190 1
a190 1
		pl_space( fp, -2048, -2048, 2048, 2048 );
d215 1
a215 1
					MAT4X3PNT( last, model2view, *pt );
d221 1
a221 1
					MAT4X3PNT( fin, model2view, *pt );
d394 1
a394 1
		MAT4X3VEC( last, Viewrot, *pt );
d400 1
a400 1
		MAT4X3VEC( fin, Viewrot, *pt );
@


11.12
log
@*- remove use of color_soltab()
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/mged/plot.c,v 11.11 1997/07/01 22:09:08 bparker Exp $ (BRL)";
d237 6
a242 6
						(int)( start[X] * 2047 ),
						(int)( start[Y] * 2047 ),
						(int)( start[Z] * 2047 ),
						(int)( fin[X] * 2047 ),
						(int)( fin[Y] * 2047 ),
						(int)( fin[Z] * 2047 ) );
d245 4
a248 4
						(int)( start[0] * 2047 ),
						(int)( start[1] * 2047 ),
						(int)( fin[0] * 2047 ),
						(int)( fin[1] * 2047 ) );
@


11.11
log
@mods to run without a database
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.10 1997/06/20 02:24:00 gdurf Exp bparker $ (BRL)";
a139 2

	color_soltab();		/* apply colors to the solid table */
@


11.10
log
@Linux portability fix
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.9 1997/04/24 18:03:58 bparker Exp gdurf $ (BRL)";
d288 3
@


11.9
log
@modify calls to Tcl_Eval
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.8 1997/04/16 20:23:49 bparker Exp bparker $ (BRL)";
d340 2
a341 2
	  dup2(fd1[0], STDIN_FILENO);
	  dup2(fd2[1], STDOUT_FILENO);
d354 2
a355 2
	  dup2(fd2[0], STDIN_FILENO);
	  dup2(fd3[1], STDOUT_FILENO);
@


11.8
log
@mods so that commands check args internally
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.7 1996/09/25 20:16:42 bparker Exp bparker $ (BRL)";
d67 6
a72 1
	  Tcl_Eval(interp, "help plot");
d290 6
a295 1
	  Tcl_Eval(interp, "help area");
@


11.7
log
@now using more generalized solid macros
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.6 1996/09/23 18:22:47 bparker Exp bparker $ (BRL)";
d66 2
a67 1
	if(mged_cmd_arg_check(argc, argv, (struct funtab *)NULL))
d69 1
d284 2
a285 1
	if(mged_cmd_arg_check(argc, argv, (struct funtab *)NULL))
d287 1
@


11.6
log
@changed dm.h to mged_dm.h
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.5 1996/09/03 20:02:37 bparker Exp bparker $ (BRL)";
d36 1
a36 1
#include "./solid.h"
d146 1
a146 1
		FOR_ALL_SOLIDS( sp )  {
d189 1
a189 1
	FOR_ALL_SOLIDS( sp )  {
d288 1
a288 1
	FOR_ALL_SOLIDS( sp )  {
d365 1
a365 1
	FOR_ALL_SOLIDS( sp )  {
@


11.5
log
@rt_list ---> bu_list
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.4 1996/08/27 20:27:25 bparker Exp bparker $ (BRL)";
d37 1
a37 1
#include "./dm.h"
@


11.4
log
@modified f_area to capture the output from cad_parea
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.3 1996/08/27 16:02:23 bparker Exp bparker $ (BRL)";
d29 1
a31 1
#include "rtstring.h"
d197 1
a197 1
		for( RT_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
d366 1
a366 1
	  for( RT_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
@


11.3
log
@now using bu_vls_*
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.2 1996/04/18 20:28:43 bparker Exp bparker $ (BRL)";
d269 12
a280 1
	FILE *fp;
d295 1
a295 3
	/* Create pipes to cad_boundp | cad_parea */
	if( argc == 2 )  {
	  sprintf( buf, "cad_boundp -t %s | cad_parea", argv[1] );
d297 2
a298 1
	}  else  {
d303 3
a305 2
	  sprintf( buf, "cad_boundp -t %e | cad_parea", tol );
	  bu_vls_printf(&tmp_vls, "Auto-tolerance of 0.1%% is %e\n", tol);
d310 12
a321 2
	if( (fp = popen( buf, "w" )) == NULL )  {
	  perror( buf );
d325 36
d366 28
a393 22
		for( RT_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
			register int	i;
			register int	nused = vp->nused;
			register int	*cmd = vp->cmd;
			register point_t *pt = vp->pt;
			for( i = 0; i < nused; i++,cmd++,pt++ )  {
				switch( *cmd )  {
				case RT_VLIST_POLY_START:
				case RT_VLIST_POLY_VERTNORM:
					continue;
				case RT_VLIST_POLY_MOVE:
				case RT_VLIST_LINE_MOVE:
					/* Move, not draw */
					MAT4X3VEC( last, Viewrot, *pt );
					continue;
				case RT_VLIST_POLY_DRAW:
				case RT_VLIST_POLY_END:
				case RT_VLIST_LINE_DRAW:
					/* draw.  */
					MAT4X3VEC( fin, Viewrot, *pt );
					break;
				}
d395 6
a400 5
				fprintf(fp, "%.9e %.9e %.9e %.9e\n",
					last[X] * base2local,
					last[Y] * base2local,
					fin[X] * base2local,
					fin[Y] * base2local );
a401 4
				VMOVE( last, fin );
			}
		}
	}
d405 11
a415 1
	pclose( fp );
@


11.2
log
@convert commands to Tcl
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 11.1 1995/01/04 10:03:25 mike Rel4_4 bparker $ (BRL)";
d108 3
a110 3
		struct rt_vls	str;
		rt_vls_init( &str );
		rt_vls_strcpy( &str, &argv[1][1] );
d112 2
a113 2
			rt_vls_strcat( &str, " " );
			rt_vls_strcat( &str, argv[1] );
d115 2
a116 2
		if( (fp = popen( rt_vls_addr( &str ), "w" ) ) == NULL )  {
			perror( rt_vls_addr( &str ) );
d120 1
a120 1
		Tcl_AppendResult(interp, "piped to ", rt_vls_addr( &str ),
d122 1
a122 1
		rt_vls_free( &str );
d289 1
a289 1
	  struct rt_vls tmp_vls;
d292 1
a292 1
	  rt_vls_init(&tmp_vls);
d294 3
a296 3
	  rt_vls_printf(&tmp_vls, "Auto-tolerance of 0.1%% is %e\n", tol);
	  Tcl_AppendResult(interp, rt_vls_addr(&tmp_vls), (char *)NULL);
	  rt_vls_free(&tmp_vls);
a341 1

d344 1
a345 1

@


11.1
log
@Release_4.4
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 10.5 94/12/23 23:03:30 mike Exp $ (BRL)";
d47 3
a49 1
f_plot( argc, argv )
d66 3
d70 1
a70 1
		return CMD_BAD;
d88 3
a90 3
			/* do grid */
			rt_log("grid unimplemented\n");
			break;
d93 4
a96 4
			/* Enable Z clipping */
			rt_log("Clipped in Z to viewing cube\n");
			Z_clip = 1;
			break;
d98 2
a99 2
			rt_log("bad PLOT option %s\n", argv[1] );
			break;
d104 2
a105 2
		rt_log("no filename or filter specified\n");
		return CMD_BAD;
d117 1
a117 1
			return CMD_BAD;
d119 3
a121 1
		rt_log("piped to %s\n", rt_vls_addr( &str ) );
d126 2
a127 2
			perror( argv[1] );
			return CMD_BAD;
d129 2
a130 1
		rt_log("plot stored in %s\n", argv[1] );
d254 1
a254 1
	return CMD_OK;
d258 3
a260 1
f_area( argc, argv )
d271 5
a275 2
	if( not_state( ST_VIEW, "Presented Area Calculation" ) )
		return CMD_BAD;
d278 4
a281 4
		if( !sp->s_Eflag && sp->s_soldash != 0 )  {
			rt_log("everything in view must be 'E'ed\n");
			return CMD_BAD;
		}
d286 2
a287 2
		sprintf( buf, "cad_boundp -t %s | cad_parea", argv[1] );
		rt_log("Tolerance is %s\n", argv[1] );
d289 8
a296 3
		double tol = VIEWSIZE * 0.001;
		sprintf( buf, "cad_boundp -t %e | cad_parea", tol );
		rt_log("Auto-tolerance of 0.1%% is %e\n", tol );
d300 2
a301 2
		perror( buf );
		return CMD_BAD;
d342 3
a344 2
	rt_log("Presented area from this viewpoint, square %s:\n",
		rt_units_string(dbip->dbi_local2base) );
d347 1
a347 1
	return CMD_OK;
@


10.5
log
@Skip per vertex normal
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 10.4 94/12/16 19:37:04 gdurf Exp Locker: mike $ (BRL)";
@


10.4
log
@Converted printf(...) and fprintf(stdout, ...) to rt_log(...).
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 10.3 1994/08/09 18:16:51 gdurf Exp gdurf $ (BRL)";
d197 1
d299 1
@


10.3
log
@Added include of conf.h
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 10.2 1994/06/01 15:13:54 gdurf Exp gdurf $ (BRL)";
d84 1
a84 1
			(void)printf("grid unimplemented\n");
d89 1
a89 1
			(void)printf("Clipped in Z to viewing cube\n");
d93 1
a93 1
			(void)printf("bad PLOT option %s\n", argv[1] );
d99 1
a99 1
		printf("no filename or filter specified\n");
d114 1
a114 1
		(void)printf("piped to %s\n", rt_vls_addr( &str ) );
d122 1
a122 1
		(void)printf("plot stored in %s\n", argv[1] );
d265 1
a265 1
			printf("everything in view must be 'E'ed\n");
d273 1
a273 1
		(void)printf("Tolerance is %s\n", argv[1] );
d277 1
a277 1
		(void)printf("Auto-tolerance of 0.1%% is %e\n", tol );
d322 1
a322 1
	(void)printf("Presented area from this viewpoint, square %s:\n",
@


10.2
log
@Converted f_plot and f_area to use new command return codes.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 10.1 1991/10/12 06:44:12 mike Rel4_0 gdurf $ (BRL)";
d24 1
@


10.1
log
@Release_4.0
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 9.8 91/09/20 15:42:47 mike Exp $ (BRL)";
d45 1
a45 1
void
d64 1
a64 1
		return;
d99 1
a99 1
		return;
d111 1
a111 1
			return;
d119 1
a119 1
			return;
d243 2
d247 1
a247 1
void
d260 1
a260 1
		return;
d265 1
a265 1
			return;
d281 1
a281 1
		return;
d324 2
@


9.8
log
@Changed from using /vld/bin programs boundp and parea,
to local BRL-CAD copy called cad_boundp and cad_parea.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 9.7 91/07/08 22:49:41 mike Exp $ (BRL)";
@


9.7
log
@Changed to using librt routine to generate unix plot from vlist.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 9.6 91/06/30 21:16:43 mike Exp $ (BRL)";
d267 1
a267 1
	/* Create pipes to boundp | parea */
d269 1
a269 1
		sprintf( buf, "boundp -t %s | parea", argv[1] );
d273 1
a273 1
		sprintf( buf, "boundp -t %e | parea", tol );
@


9.6
log
@Replaced local_unit[] with call to rt_units_string()
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 9.5 91/02/02 00:01:47 mike Exp $ (BRL)";
d150 1
a150 24
			for( RT_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
				register int	i;
				register int	nused = vp->nused;
				register int	*cmd = vp->cmd;
				register point_t *pt = vp->pt;
				for( i = 0; i < nused; i++,cmd++,pt++ )  {
					switch( *cmd )  {
					case RT_VLIST_POLY_START:
						break;
					case RT_VLIST_POLY_MOVE:
					case RT_VLIST_LINE_MOVE:
						pdv_3move( fp, *pt );
						break;
					case RT_VLIST_POLY_DRAW:
					case RT_VLIST_POLY_END:
					case RT_VLIST_LINE_DRAW:
						pdv_3cont( fp, *pt );
						break;
					default:
						rt_log("unknown vlist cmd x%x\n",
							*cmd );
					}
				}
			}
@


9.5
log
@Converted to new rt_vlist structure
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 9.4 91/01/29 00:27:56 mike Exp $ (BRL)";
d343 1
a343 1
		local_unit[localunit] );
@


9.4
log
@Modified for new rt_vlist structure
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 9.3 91/01/28 18:28:58 mike Exp $ (BRL)";
d101 1
a101 1
	if( argv[2][0] == '|' )  {
d104 1
a104 1
		rt_vls_strcpy( &str, &argv[2][1] );
@


9.3
log
@Eliminated argv ambiguity
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 9.2 91/01/12 08:13:53 mike Exp $ (BRL)";
d50 2
a51 2
	register struct solid *sp;
	register struct vlist *vp;
d150 23
a172 5
			for( vp = sp->s_vlist; vp != VL_NULL; vp = vp->vl_forw )  {
				if( vp->vl_draw )
					pdv_3cont( fp, vp->vl_pnt );
				else
					pdv_3move( fp, vp->vl_pnt );
d211 47
a257 5
		for( vp = sp->s_vlist; vp != VL_NULL; vp = vp->vl_forw )  {
			if( vp->vl_draw == 0 )  {
				/* Move, not draw */
				MAT4X3PNT( last, model2view, vp->vl_pnt );
				continue;
a258 27
			/* draw */
			MAT4X3PNT( fin, model2view, vp->vl_pnt );
			VMOVE( start, last );
			VMOVE( last, fin );
			if(
				vclip( start, fin, clipmin, clipmax ) == 0
			)  continue;

			if( Three_D )  {
				/* Could check for differences from last color */
				pl_color( fp,
					sp->s_color[0],
					sp->s_color[1],
					sp->s_color[2] );
				pl_3line( fp,
					(int)( start[X] * 2047 ),
					(int)( start[Y] * 2047 ),
					(int)( start[Z] * 2047 ),
					(int)( fin[X] * 2047 ),
					(int)( fin[Y] * 2047 ),
					(int)( fin[Z] * 2047 ) );
			}  else
				pl_line( fp,
					(int)( start[0] * 2047 ),
					(int)( start[1] * 2047 ),
					(int)( fin[0] * 2047 ),
					(int)( fin[1] * 2047 ) );
d273 2
a274 2
	register struct solid *sp;
	register struct vlist *vp;
d310 21
a330 8
		for( vp = sp->s_vlist; vp != VL_NULL; vp = vp->vl_forw )  {
			if( vp->vl_draw == 0 )  {
				/* Move, not draw */
				MAT4X3VEC( last, Viewrot, vp->vl_pnt );
				continue;
			}
			/* draw.  */
			MAT4X3VEC( fin, Viewrot, vp->vl_pnt );
d332 5
a336 5
			fprintf(fp, "%.9e %.9e %.9e %.9e\n",
				last[X] * base2local,
				last[Y] * base2local,
				fin[X] * base2local,
				fin[Y] * base2local );
d338 2
a339 1
			VMOVE( last, fin );
@


9.2
log
@externs.h, plot3.h
Changed to use argc, argv
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /m/cad/mged/RCS/plot.c,v 9.1 89/05/19 06:03:37 mike Rel3_5 $ (BRL)";
d30 1
d61 1
a61 2
	char **argv;
	char buf[128];
d70 2
a71 3
	argv = &argv[1];
	while( argv[0] != (char *)0 && argv[0][0] == '-' )  {
		switch( argv[0][1] )  {
d92 1
a92 1
			(void)printf("bad PLOT option %s\n", argv[0] );
d97 1
a97 1
	if( argv[0] == (char *)0 )  {
d101 7
a107 5
	if( argv[0][0] == '|' )  {
		strncpy( buf, &argv[0][1], sizeof(buf) );
		while( (++argv)[0] != (char *)0 )  {
			strncat( buf, " ", sizeof(buf) );
			strncat( buf, argv[0], sizeof(buf) );
d109 2
a110 2
		if( (fp = popen( buf, "w" ) ) == NULL )  {
			perror( buf );
d113 3
a115 1
		(void)printf("piped to %s\n", buf );
d117 2
a118 2
		if( (fp = fopen( argv[0], "w" )) == NULL )  {
			perror( argv[0] );
d121 2
a122 1
		(void)printf("plot stored in %s\n", argv[0] );
d229 1
a229 1
	if( argv[1][0] == '|' )
@


9.1
log
@Release_3.5
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 8.4 89/04/06 20:40:17 mike Exp $ (BRL)";
d33 1
a36 12
extern FILE	*popen();	/* stdio pipe open routine */

extern int	numargs;	/* number of args */
extern char	*cmd_args[];	/* array of pointers to args */
extern char	*local_unit[];

/* BRL CAD package UNIX-Plot library routines */
extern int pl_color(), pl_cont(), pl_3cont(), pl_erase(), pl_label();
extern int pl_line(), pl_3line(), pl_linmod();
extern int pl_move(), pl_3move(), pl_space(), pl_3space();


d45 3
a47 1
f_plot()
d70 1
a70 1
	argv = &cmd_args[1];
d225 1
a225 1
	if( cmd_args[1][0] == '|' )
d232 3
a234 1
f_area()
d254 3
a256 3
	if( numargs == 2 )  {
		sprintf( buf, "boundp -t %s | parea", cmd_args[1] );
		(void)printf("Tolerance is %s\n", cmd_args[1] );
@


8.4
log
@Extern function declarations that used to be local to this module
and in solid.h are now in "externs.h"
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 8.3 89/01/18 01:55:26 mike Locked $ (BRL)";
@


8.3
log
@Includes changes in how MGED colors the various solids.
Externally, the color selection now matches that used by RT.
Internally, this was accomplished by adding 3 more fields
to the solid table (s_basecolor[], s_color[], s_dmindex),
and eliminating the mt_dm_int value from the region-id-based
material table.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 8.2 88/12/06 02:30:39 mike Locked $ (BRL)";
d32 1
@


8.2
log
@Changing to bounding RPP
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: /cad/d/mike/cad/mged/RCS/plot.c,v 1.3 88/10/29 22:51:36 mike Exp $ (BRL)";
d142 5
a146 7
			register struct mater *mp;
			mp = (struct mater *)sp->s_materp;
			if( mp != MATER_NULL )
				pl_color( fp,
					mp->mt_r,
					mp->mt_g,
					mp->mt_b );
d212 5
a216 7
				register struct mater *mp;
				mp = (struct mater *)sp->s_materp;
				if( mp != MATER_NULL )
					pl_color( fp,
						mp->mt_r,
						mp->mt_g,
						mp->mt_b );
@


8.1
log
@Release_3.0
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 7.4 88/02/25 06:09:07 mike Exp $ (BRL)";
d30 1
a31 1
#include "./objdir.h"
d268 1
a268 1
		double tol = maxview * 0.001;
@


7.4
log
@Modified for new vector lists
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 7.3 88/02/25 00:22:37 mike Locked $ (BRL)";
@


7.3
log
@Added ability to do 3-D floating point plots.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 7.2 87/11/05 05:06:37 mike Locked $ (BRL)";
d58 1
a58 1
	register struct veclist *vp;
a63 1
	int nvec;
d156 3
a158 7
			nvec = sp->s_vlen;
			for( vp = sp->s_vlist; nvec-- > 0; vp++ )  {
				if( vp->vl_pen == PEN_UP )
					pd_3move( fp,
						vp->vl_pnt[X],
						vp->vl_pnt[Y],
						vp->vl_pnt[Z] );
d160 1
a160 4
					pd_3cont( fp,
						vp->vl_pnt[X],
						vp->vl_pnt[Y],
						vp->vl_pnt[Z] );
d199 2
a200 3
		nvec = sp->s_vlen;
		for( vp = sp->s_vlist; nvec-- > 0; vp++ )  {
			if( vp->vl_pen == PEN_UP )  {
d247 1
a247 1
	register struct veclist *vp;
a251 1
	register int nvec;
d283 2
a284 3
		nvec = sp->s_vlen;
		for( vp = sp->s_vlist; nvec-- > 0; vp++ )  {
			if( vp->vl_pen == PEN_UP )  {
@


7.2
log
@Eliminated local machine.h, converted to fastf_t, now link with librt.a
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 7.1 87/11/03 00:01:39 mike Rel $ (BRL)";
d68 1
d78 1
d82 6
d132 48
a179 1
	/* Compute the clipping bounds of the screen in view space */
d188 2
a189 2
		clipmin[Z] = -1.0e17;
		clipmax[Z] =  1.0e17;
a191 4
	/*
	 * Viewing region is from -1.0 to +1.0
	 * which we map to integer space -2048 to +2048
	 */
d245 1
@


7.1
log
@Release 2.3
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 6.1 87/07/11 08:04:55 mike Rel $ (BRL)";
d27 1
a27 1
#include "./machine.h"	/* special copy */
@


6.1
log
@Release 2.0
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 5.1 87/06/24 22:21:50 mike Rel $ (BRL)";
@


5.1
log
@Release 1.24
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 4.2 87/02/13 00:12:48 mike Exp $ (BRL)";
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 4.1 86/12/29 03:22:39 mike Rel1 $ (BRL)";
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.9 86/09/24 04:45:13 mike Exp $ (BRL)";
@


1.9
log
@Converted to Phil's portable, Public Domain libplot3 interface.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.8 86/09/23 17:41:50 mike Locked $ (BRL)";
@


1.8
log
@Minor cleanup for cray
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.7 86/08/12 06:50:22 mike Exp $ (BRL)";
d41 4
a44 5
/* UNIX-Plot routines */
FILE *up_fp;		/* output file pointer */
int up_color(), up_cont(), up_cont3(), up_erase(), up_label();
int up_line(), up_line3(), up_linemod();
int up_move(), up_move3(), up_putsi(), up_space(), up_spc3();
d59 1
d109 1
a109 2
		(void)printf("piped to %s\n", buf );
		if( (up_fp = popen( buf, "w" ) ) == NULL )  {
d113 1
d115 1
a115 2
		(void)printf("plot stored in %s", argv[0] );
		if( (up_fp = fopen( argv[0], "w" )) == NULL )  {
d119 1
d142 1
a142 1
		up_spc3( -2048, -2048, -2048, 2048, 2048, 2048 );
d144 2
a145 2
		up_space( -2048, -2048, 2048, 2048 );
	up_erase();
d147 1
a147 1
	up_linemod("solid");
d151 1
a151 1
				up_linemod("dotdashed");
d153 1
a153 1
				up_linemod("solid");
d175 2
a176 1
					up_color( mp->mt_r,
d179 1
a179 1
				up_line3(
d187 1
a187 1
				up_line(
d195 1
a195 1
		(void)pclose( up_fp );
d197 1
a197 1
		(void)fclose( up_fp );
a262 109
}

/*
 *  Special version of PLOT library to allow us to write to a
 *  file descriptor other than stdout, and to provide the BRL-extensions
 *  for 3-D UNIX Plot.
 */
/*
	up_color -- deposit color selection in UNIX plot output file
		(BRL addition)

	last edit:	04-Jan-1984	D A Gwyn
*/
up_color( r, g, b )
	int	r, g, b;		/* color components, 0..255 */
	{
	putc( 'C', up_fp );
	putc( r, up_fp );
	putc( g, up_fp );
	putc( b, up_fp );
	}

up_cont(xi,yi){
	putc('n',up_fp);
	up_putsi(xi);
	up_putsi(yi);
}

up_cont3(xi,yi,zi){
	putc('N',up_fp);
	up_putsi(xi);
	up_putsi(yi);
	up_putsi(zi);
}

up_erase(){
	putc('e',up_fp);
}

up_label(s)
char *s;
{
	int i;
	putc('t',up_fp);
	for(i=0;s[i];)putc(s[i++],up_fp);
	putc('\n',up_fp);
}

up_line(xval0,yval0,xval1,yval1){
	putc('l',up_fp);
	up_putsi(xval0);
	up_putsi(yval0);
	up_putsi(xval1);
	up_putsi(yval1);
}

up_line3(xval0,yval0,zval0,xval1,yval1,zval1){
	putc('L',up_fp);
	up_putsi(xval0);
	up_putsi(yval0);
	up_putsi(zval0);
	up_putsi(xval1);
	up_putsi(yval1);
	up_putsi(zval1);
}

up_linemod(s)
char *s;
{
	int i;
	putc('f',up_fp);
	for(i=0;s[i];)putc(s[i++],up_fp);
	putc('\n',up_fp);
}

up_move(xvali,yvali){
	putc('m',up_fp);
	up_putsi(xvali);
	up_putsi(yvali);
}

up_move3(xvali,yvali,zvali){
	putc('M',up_fp);
	up_putsi(xvali);
	up_putsi(yvali);
	up_putsi(zvali);
}

up_putsi(a){
	putc(a&0377,up_fp);		/* DAG -- bug fix */
	putc((a>>8)&0377,up_fp);	/* DAG */
}

up_space(xval0,yval0,xval1,yval1){
	putc('s',up_fp);
	up_putsi(xval0);
	up_putsi(yval0);
	up_putsi(xval1);
	up_putsi(yval1);
}

up_spc3(xval0,yval0,zval0,xval1,yval1,zval1){
	putc('S',up_fp);
	up_putsi(xval0);
	up_putsi(yval0);
	up_putsi(zval0);
	up_putsi(xval1);
	up_putsi(yval1);
	up_putsi(zval1);
@


1.7
log
@Changed #includes for CC -I../h
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.6 86/04/09 01:10:02 mike Exp $ (BRL)";
d45 1
a45 1
int up_move(), up_move3(), up_putsi(), up_space(), up_space3();
d142 1
a142 1
		up_space3( -2048, -2048, -2048, 2048, 2048, 2048 );
d363 1
a363 1
up_space3(xval0,yval0,zval0,xval1,yval1,zval1){
@


1.6
log
@Added hooks for dm-plot.c
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.5 86/03/10 21:01:12 mike Exp $ (BRL)";
d25 2
a26 2
#include	<math.h>
#include	<stdio.h>
d28 6
a33 6
#include "../h/vmath.h"
#include "../h/mater.h"
#include "ged.h"
#include "objdir.h"
#include "solid.h"
#include "dm.h"
@


1.5
log
@MAT3XVEC changed to MAT4X3VEC to account for scaling operations.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.4 85/09/14 05:37:20 mike Exp $ (BRL)";
d42 1
a42 1
static FILE *up_fp;		/* output file pointer */
@


1.4
log
@Lint-inspired cleanup.
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.3 85/08/07 05:19:32 mike Exp $ (BRL)";
d244 1
a244 1
				MAT3XVEC( last, Viewrot, vp->vl_pnt );
d247 2
a248 2
			/* draw */
			MAT3XVEC( fin, Viewrot, vp->vl_pnt );
@


1.3
log
@Changed to use common ../h/vmath.h
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.2 85/03/28 22:26:13 mike Exp $ (BRL)";
d310 1
a310 1
up_line(x0,y0,x1,y1){
d312 4
a315 4
	up_putsi(x0);
	up_putsi(y0);
	up_putsi(x1);
	up_putsi(y1);
d318 1
a318 1
up_line3(x0,y0,z0,x1,y1,z1){
d320 6
a325 6
	up_putsi(x0);
	up_putsi(y0);
	up_putsi(z0);
	up_putsi(x1);
	up_putsi(y1);
	up_putsi(z1);
d337 1
a337 1
up_move(xi,yi){
d339 2
a340 2
	up_putsi(xi);
	up_putsi(yi);
d343 1
a343 1
up_move3(xi,yi,zi){
d345 3
a347 3
	up_putsi(xi);
	up_putsi(yi);
	up_putsi(zi);
d355 1
a355 1
up_space(x0,y0,x1,y1){
d357 4
a360 4
	up_putsi(x0);
	up_putsi(y0);
	up_putsi(x1);
	up_putsi(y1);
d363 1
a363 1
up_space3(x0,y0,z0,x1,y1,z1){
d365 6
a370 6
	up_putsi(x0);
	up_putsi(y0);
	up_putsi(z0);
	up_putsi(x1);
	up_putsi(y1);
	up_putsi(z1);
@


1.2
log
@Added calls to use dashed line types for subtracted solids
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header: plot.c,v 1.1 85/03/28 20:51:27 mike Exp $ (BRL)";
d27 1
a29 1
#include "ged_types.h"
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
static char RCSid[] = "@@(#)$Header$ (BRL)";
d67 1
d146 2
d149 7
d179 6
a184 6
					(int)( start[X] * 2048 ),
					(int)( start[Y] * 2048 ),
					(int)( start[Z] * 2048 ),
					(int)( fin[X] * 2048 ),
					(int)( fin[Y] * 2048 ),
					(int)( fin[Z] * 2048 ) );
d187 4
a190 4
					(int)( start[0] * 2048 ),
					(int)( start[1] * 2048 ),
					(int)( fin[0] * 2048 ),
					(int)( fin[1] * 2048 ) );
@
