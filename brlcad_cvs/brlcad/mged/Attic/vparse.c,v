head	1.11;
access;
symbols
	ansi-20040405-merged:1.7.2.3
	postmerge-20040405-ansi:1.9
	premerge-20040404-ansi:1.8
	postmerge-autoconf:1.8
	autoconf-freeze:1.7.10.1
	premerge-autoconf:1.8
	postmerge-20040315-windows:1.8
	premerge-20040315-windows:1.8
	windows-20040315-freeze:1.7.4.1
	autoconf-20031203:1.7
	autoconf-20031202:1.7
	autoconf-branch:1.7.0.10
	phong-branch:1.7.0.8
	photonmap-branch:1.7.0.6
	rel-6-1-DP:1.7
	windows-branch:1.7.0.4
	rel-6-0-2:1.5
	ansi-branch:1.7.0.2
	rel-6-0-1-branch:1.5.0.2
	hartley-6-0-post:1.6
	hartley-6-0-pre:1.5
	rel-6-0-1:1.5
	rel-6-0:1.5
	rel-5-4:1.2
	offsite-5-3-pre:1.3
	rel-5-3:1.2
	rel-5-2:1.2
	rel-5-1-branch:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.2
	rel-5-0-beta:1.2;
locks; strict;
comment	@ * @;


1.11
date	2004.05.21.17.47.52;	author morrison;	state dead;
branches;
next	1.10;

1.10
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.05.09.09.12;	author morrison;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.02.17.39.36;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.20.17.08.26;	author jra;	state Exp;
branches
	1.7.2.1
	1.7.4.1
	1.7.10.1;
next	1.6;

1.6
date	2002.08.15.20.55.39;	author hartley;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.14.15.10.30;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.01.19.23.26;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.24.19.05.10;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	98.11.13.22.28.20;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.11.06.22.28.10;	author bparker;	state Exp;
branches;
next	;

1.7.2.1
date	2002.09.19.18.02.07;	author morrison;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2004.03.17.21.22.05;	author morrison;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2004.04.02.16.11.56;	author morrison;	state Exp;
branches;
next	;

1.7.4.1
date	2004.03.11.23.46.37;	author morrison;	state Exp;
branches;
next	;

1.7.10.1
date	2004.02.12.18.34.16;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.11
log
@moved to src/mged/
@
text
@/*
 *				V P A R S E . C
 *
 * Description -
 *	Routines for interfacing with the LIBBU struct parsing
 *	utilities.
 *	
 * Source -
 *      SLAD CAD Team
 *      The U. S. Army Research Laboratory
 *      Aberdeen Proving Ground, Maryland  21005
 *
 * Authors -
 *      Robert G. Parker
 *	Lee A. Butler
 *      Glenn Durfee
 *
 * Copyright Notice -
 *      This software is Copyright (C) 1998-2004 by the United States Army.
 *      All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "./ged.h"
#include "./mged_dm.h"

void
mged_vls_struct_parse(struct bu_vls		*vls,
		      char			*title,
		      struct bu_structparse	*how_to_parse,
		      const char		*structp,
		      int			argc,
		      char			*argv[])
{
	if (argc < 2) {
		/* Bare set command, print out current settings */
		bu_vls_struct_print2(vls, title, how_to_parse, structp);
	} else if (argc == 2) {
		bu_vls_struct_item_named(vls, how_to_parse, argv[1], structp, ' ');
	} else {
		struct bu_vls tmp_vls;

		bu_vls_init(&tmp_vls);
		bu_vls_printf(&tmp_vls, "%s=\"", argv[1]);
		bu_vls_from_argv(&tmp_vls, argc-2, argv+2);
		bu_vls_putc(&tmp_vls, '\"');
		bu_struct_parse(&tmp_vls, how_to_parse, structp);
		bu_vls_free(&tmp_vls);
	}
}

void
mged_vls_struct_parse_old(
	struct bu_vls *vls,
	const char *title,
	struct bu_structparse *how_to_parse,
	char *structp,
	int argc,
	char *argv[])
{
	if (argc < 2) {
		/* Bare set command, print out current settings */
		bu_vls_struct_print2(vls, title, how_to_parse, structp);
	} else if (argc == 2) {
		struct bu_vls tmp_vls;

		bu_vls_init(&tmp_vls);
		bu_vls_strcpy(&tmp_vls, argv[1]);
		bu_struct_parse(&tmp_vls, how_to_parse, structp);
		bu_vls_free(&tmp_vls);
	}
}
@


1.10
log
@change conf.h to a wrapped config.h
@
text
@@


1.9
log
@merge of ansi-6-0-branch into HEAD
@
text
@d23 5
a27 1
#include "conf.h"
@


1.8
log
@update copyright to include span through 2003
@
text
@d37 1
a37 1
		      char			*structp,
@


1.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 1
 *      This software is Copyright (C) 1998 by the United States Army.
@


1.7.4.1
log
@sync to HEAD...
@
text
@d19 1
a19 1
 *      This software is Copyright (C) 1998-2004 by the United States Army.
@


1.7.10.1
log
@merge from HEAD
@
text
@d19 1
a19 1
 *      This software is Copyright (C) 1998-2004 by the United States Army.
@


1.7.2.1
log
@Initial ANSIfication
@
text
@d37 1
a37 1
		      const char			*structp,
@


1.7.2.2
log
@sync branch with HEAD
@
text
@d19 1
a19 1
 *      This software is Copyright (C) 1998-2004 by the United States Army.
@


1.7.2.3
log
@ws
@
text
@d37 1
a37 1
		      const char		*structp,
@


1.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d37 1
a37 1
		      const char			*structp,
@


1.5
log
@*- modified mged_vls_struct_parse and
   mged_vls_struct_parse_old to NOT use
   bu_log hooks
@
text
@d37 1
a37 1
		      char			*structp,
@


1.4
log
@*- mods that reflect MGED's use of drawable geometry
   objects, database objects and view objects
@
text
@d41 15
a55 27
	struct bu_vls tmp_vls;

#if 0
	/*XXX
	 *	We need a few routines in libbu that write
	 *	to a vls in human readable format.
	 */
#else
  bu_vls_init(&tmp_vls);
  start_catching_output(vls);

  if (argc < 2) {
    /* Bare set command, print out current settings */
    bu_struct_print(title, how_to_parse, structp);
  } else if (argc == 2) {
    bu_vls_struct_item_named(&tmp_vls, how_to_parse, argv[1], structp, ' ');
    bu_log("%s", bu_vls_addr(&tmp_vls));
  } else {
    bu_vls_printf(&tmp_vls, "%s=\"", argv[1]);
    bu_vls_from_argv(&tmp_vls, argc-2, argv+2);
    bu_vls_putc(&tmp_vls, '\"');
    bu_struct_parse(&tmp_vls, how_to_parse, structp);
  }

  stop_catching_output(vls);
  bu_vls_free(&tmp_vls);
#endif
d67 11
a77 15
  struct bu_vls tmp_vls;

  bu_vls_init(&tmp_vls);
  start_catching_output(vls);

  if (argc < 2) {
    /* Bare set command, print out current settings */
    bu_struct_print(title, how_to_parse, structp);
  } else if (argc == 2) {
    bu_vls_strcpy(&tmp_vls, argv[1]);
    bu_struct_parse(&tmp_vls, how_to_parse, structp);
  }

  stop_catching_output(vls);
  bu_vls_free(&tmp_vls);
@


1.3
log
@
Fixed compiler lint, function declarations.
@
text
@d34 6
a39 7
mged_vls_struct_parse(vls, title, how_to_parse, structp, argc, argv)
struct bu_vls *vls;
char *title;
struct bu_structparse *how_to_parse;
char *structp;
int argc;
char *argv[];
d41 1
a41 1
  struct bu_vls tmp_vls;
d43 6
d67 1
@


1.2
log
@*- remove use of CONST in a few places
@
text
@d65 7
a71 7
mged_vls_struct_parse_old(vls, title, how_to_parse, structp, argc, argv)
struct bu_vls *vls;
char *title;
struct bu_structparse *how_to_parse;
char *structp;
int argc;
char *argv[];
@


1.1
log
@*- Routines for interfacing with the LIBBU struct parsing utilities
@
text
@d38 1
a38 1
CONST char *structp;
d69 1
a69 1
CONST char *structp;
@
