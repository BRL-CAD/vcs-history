head	1.10;
access;
symbols
	ansi-20040405-merged:1.7.2.1
	postmerge-20040405-ansi:1.8
	premerge-20040404-ansi:1.7
	postmerge-autoconf:1.7
	autoconf-freeze:1.7
	premerge-autoconf:1.7
	postmerge-20040315-windows:1.7
	premerge-20040315-windows:1.7
	windows-20040315-freeze:1.7
	autoconf-20031203:1.7
	autoconf-20031202:1.7
	autoconf-branch:1.7.0.10
	phong-branch:1.7.0.8
	photonmap-branch:1.7.0.6
	rel-6-1-DP:1.7
	windows-branch:1.7.0.4
	rel-6-0-2:1.5
	ansi-branch:1.7.0.2
	rel-6-0-1-branch:1.5.0.2
	hartley-6-0-post:1.6
	hartley-6-0-pre:1.5
	rel-6-0-1:1.5
	rel-6-0:1.5
	rel-5-4:1.4
	offsite-5-3-pre:1.5
	rel-5-3:1.4
	rel-5-2:1.4
	rel-5-1-branch:1.4.0.2
	rel-5-1:1.4
	rel-5-0:1.4
	rel-5-0-beta:1.4;
locks; strict;
comment	@ * @;


1.10
date	2004.05.21.17.47.38;	author morrison;	state dead;
branches;
next	1.9;

1.9
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.05.09.09.11;	author morrison;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.20.17.08.22;	author jra;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2002.08.15.20.55.33;	author hartley;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.07.02.43.20;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	99.01.21.18.31.56;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.12.29.20.37.56;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.11.06.22.32.38;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.10.21.16.56.54;	author bparker;	state Exp;
branches;
next	;

1.7.2.1
date	2002.09.19.18.02.00;	author morrison;	state Exp;
branches;
next	;


desc
@@


1.10
log
@moved to src/mged/
@
text
@/*
 *			C O L O R _ S C H E M E . C
 *
 * Functions -
 *	cs_set_dirty_flag	mark any display managers using the current color_scheme as dirty
 *	cs_update		update all colors according to the mode
 *	cs_set_bg		tell the display manager what color to use for the background
 *
 * Author -
 *	Robert G. Parker
 *
 * Source -
 *	SLAD/BND/ACST
 *	The U.S. Army Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "raytrace.h"
#include "./ged.h"
#include "./mged_dm.h"

struct _color_scheme default_color_scheme = {
/* cs_rc */			1,
/* cs_mode */			0,
/* cs_bg */			{ 0, 0, 0 },
/* cs_bg_a */			{ 0, 0, 50 },
/* cs_bg_ia */			{ 0, 0, 0 },
/* cs_adc_line */		{ 255, 255, 0 },
/* cs_adc_line_a */		{ 255, 255, 0 },
/* cs_adc_line_ia */		{ 255, 255, 0 },
/* cs_adc_tick */		{ 255, 255, 255 },
/* cs_adc_tick_a */		{ 255, 255, 255 },
/* cs_adc_tick_ia */		{ 255, 255, 255 },
/* cs_geo_def */		{ 255, 0, 0 },
/* cs_geo_def_a */		{ 255, 0, 0 },
/* cs_geo_def_ia */		{ 255, 0, 0 },
/* cs_geo_hl */			{ 255, 255, 255 },
/* cs_geo_hl_a */		{ 255, 255, 255 },
/* cs_geo_hl_ia */		{ 255, 255, 255 },
/* cs_geo_label */		{ 255, 255, 0 },
/* cs_geo_label_a */		{ 255, 255, 0 },
/* cs_geo_label_ia */		{ 255, 255, 0 },
/* cs_model_axes */		{ 100, 255, 100 },
/* cs_model_axes_a */		{ 100, 255, 100 },
/* cs_model_axes_ia */		{ 100, 255, 100 },
/* cs_model_axes_label */	{ 255, 255, 0 },
/* cs_model_axes_label_a */	{ 255, 255, 0 },
/* cs_model_axes_label_ia */	{ 255, 255, 0 },
/* cs_view_axes */		{ 100, 100, 255 },
/* cs_view_axes_a */		{ 100, 100, 255 },
/* cs_view_axes_ia */		{ 100, 100, 255 },
/* cs_view_axes_label */	{ 255, 255, 0 },
/* cs_view_axes_label_a */	{ 255, 255, 0 },
/* cs_view_axes_label_ia */	{ 255, 255, 0 },
/* cs_edit_axes1 */		{ 255, 255, 255 },
/* cs_edit_axes1_a */		{ 255, 255, 255 },
/* cs_edit_axes1_ia */		{ 255, 255, 255 },
/* cs_edit_axes_label1 */	{ 255, 255, 0 },
/* cs_edit_axes_label1_a */	{ 255, 255, 0 },
/* cs_edit_axes_label1_ia */	{ 255, 255, 0 },
/* cs_edit_axes2 */		{ 255, 255, 255 },
/* cs_edit_axes2_a */		{ 255, 255, 255 },
/* cs_edit_axes2_ia */		{ 255, 255, 255 },
/* cs_edit_axes_label2 */	{ 255, 255, 0 },
/* cs_edit_axes_label2_a */	{ 255, 255, 0 },
/* cs_edit_axes_label2_ia */	{ 255, 255, 0 },
/* cs_rubber_band */		{ 255, 255, 255 },
/* cs_rubber_band_a */		{ 255, 255, 255 },
/* cs_rubber_band_ia */		{ 255, 255, 255 },
/* cs_grid */			{ 255, 255, 255 },
/* cs_grid_a */			{ 255, 255, 255 },
/* cs_grid_ia */		{ 255, 255, 255 },
/* cs_predictor */		{ 255, 255, 255 },
/* cs_predictor_a */		{ 255, 255, 255 },
/* cs_predictor_ia */		{ 255, 255, 255 },
/* cs_menu_line */		{ 255, 255, 0 },
/* cs_menu_line_a */		{ 255, 255, 0 },
/* cs_menu_line_ia */		{ 255, 255, 0 },
/* cs_slider_line */		{ 255, 255, 0 },
/* cs_slider_line_a */		{ 255, 255, 0 },
/* cs_slider_line_ia */		{ 255, 255, 0 },
/* cs_other_line */		{ 255, 255, 0 },
/* cs_other_line_a */		{ 255, 255, 0 },
/* cs_other_line_ia */		{ 255, 255, 0 },
/* cs_status_text1 */		{ 255, 255, 255 },
/* cs_status_text1_a */		{ 255, 255, 255 },
/* cs_status_text1_ia */	{ 255, 255, 255 },
/* cs_status_text2 */		{ 255, 255, 0 },
/* cs_status_text2_a */		{ 255, 255, 0 },
/* cs_status_text2_ia */	{ 255, 255, 0 },
/* cs_slider_text1 */		{ 255, 255, 255 },
/* cs_slider_text1_a */		{ 255, 255, 255 },
/* cs_slider_text1_ia */	{ 255, 255, 255 },
/* cs_slider_text2 */		{ 255, 0, 0 },
/* cs_slider_text2_a */		{ 255, 0, 0 },
/* cs_slider_text2_ia */	{ 255, 0, 0 },
/* cs_menu_text1 */		{ 255, 255, 255 },
/* cs_menu_text1_a */		{ 255, 255, 255 },
/* cs_menu_text1_ia */		{ 255, 255, 255 },
/* cs_menu_text2 */		{ 255, 255, 0 },
/* cs_menu_text2_a */		{ 255, 255, 0 },
/* cs_menu_text2_ia */		{ 255, 255, 0 },
/* cs_menu_title */		{ 255, 0, 0 },
/* cs_menu_title_a */		{ 255, 0, 0 },
/* cs_menu_title_ia */		{ 255, 0, 0 },
/* cs_menu_arrow */		{ 255, 255, 255 },
/* cs_menu_arrow_a */		{ 255, 255, 255 },
/* cs_menu_arrow_ia */		{ 255, 255, 255 },
/* cs_state_text1 */		{ 255, 255, 255 },
/* cs_state_text1_a */		{ 255, 255, 255 },
/* cs_state_text1_ia */		{ 255, 255, 255 },
/* cs_state_text2 */		{ 255, 255, 0 },
/* cs_state_text2_a */		{ 255, 255, 0 },
/* cs_state_text2_ia */		{ 255, 255, 0 },
/* cs_edit_info */		{ 255, 255, 0 },
/* cs_edit_info_a */		{ 255, 255, 0 },
/* cs_edit_info_ia */		{ 255, 255, 0 },
/* cs_center_dot */		{ 255, 255, 0 },
/* cs_center_dot_a */		{ 255, 255, 0 },
/* cs_center_dot_ia */		{ 255, 255, 0 }
};

#define CS_OFFSET 1	/* offset to start of colors in color_scheme_vparse */

#define CS_O(_m)        offsetof(struct _color_scheme, _m)
#define CS_OA(_m)	offsetofarray(struct _color_scheme, _m)
struct bu_structparse color_scheme_vparse[] = {
	{"%d",	1, "mode",	CS_O(cs_mode),	cs_update },
	{"%d",  3, "bg",	CS_OA(cs_bg),	cs_set_bg },
	{"%d",  3, "bg_a",	CS_OA(cs_bg_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "bg_ia",	CS_OA(cs_bg_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "adc_line",	CS_OA(cs_adc_line),	cs_set_dirty_flag },
	{"%d",  3, "adc_line_a",	CS_OA(cs_adc_line_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "adc_line_ia",	CS_OA(cs_adc_line_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "adc_tick",	CS_OA(cs_adc_tick),	cs_set_dirty_flag },
	{"%d",  3, "adc_tick_a",	CS_OA(cs_adc_tick_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "adc_tick_ia",	CS_OA(cs_adc_tick_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_def",	CS_OA(cs_geo_def),	cs_set_dirty_flag },
	{"%d",  3, "geo_def_a",	CS_OA(cs_geo_def_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_def_ia",	CS_OA(cs_geo_def_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_hl",	CS_OA(cs_geo_hl),	cs_set_dirty_flag },
	{"%d",  3, "geo_hl_a",	CS_OA(cs_geo_hl_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_hl_ia",	CS_OA(cs_geo_hl_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_label",	CS_OA(cs_geo_label),	cs_set_dirty_flag },
	{"%d",  3, "geo_label_a",	CS_OA(cs_geo_label_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_label_ia",	CS_OA(cs_geo_label_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "model_axes",	CS_OA(cs_model_axes),	cs_set_dirty_flag },
	{"%d",  3, "model_axes_a",	CS_OA(cs_model_axes_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "model_axes_ia",	CS_OA(cs_model_axes_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "model_axes_label",	CS_OA(cs_model_axes_label),	cs_set_dirty_flag },
	{"%d",  3, "model_axes_label_a",	CS_OA(cs_model_axes_label_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "model_axes_label_ia",	CS_OA(cs_model_axes_label_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "view_axes",	CS_OA(cs_view_axes),	cs_set_dirty_flag },
	{"%d",  3, "view_axes_a",	CS_OA(cs_view_axes_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "view_axes_ia",	CS_OA(cs_view_axes_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "view_axes_label",	CS_OA(cs_view_axes_label),	cs_set_dirty_flag },
	{"%d",  3, "view_axes_label_a",	CS_OA(cs_view_axes_label_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "view_axes_label_ia",	CS_OA(cs_view_axes_label_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes1",	CS_OA(cs_edit_axes1),	cs_set_dirty_flag },
	{"%d",  3, "edit_axes1_a",	CS_OA(cs_edit_axes1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes1_ia",	CS_OA(cs_edit_axes1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes2",	CS_OA(cs_edit_axes2),	cs_set_dirty_flag },
	{"%d",  3, "edit_axes2_a",	CS_OA(cs_edit_axes2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes2_ia",	CS_OA(cs_edit_axes2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes_label1",	CS_OA(cs_edit_axes_label1),	cs_set_dirty_flag },
	{"%d",  3, "edit_axes_label1_a",	CS_OA(cs_edit_axes_label1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes_label1_ia",	CS_OA(cs_edit_axes_label1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes_label2",	CS_OA(cs_edit_axes_label2),	cs_set_dirty_flag },
	{"%d",  3, "edit_axes_label2_a",	CS_OA(cs_edit_axes_label2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes_label2_ia",	CS_OA(cs_edit_axes_label2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "rubber_band",	CS_OA(cs_rubber_band),	cs_set_dirty_flag },
	{"%d",  3, "rubber_band_a",	CS_OA(cs_rubber_band_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "rubber_band_ia",	CS_OA(cs_rubber_band_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "grid",	CS_OA(cs_grid),	cs_set_dirty_flag },
	{"%d",  3, "grid_a",	CS_OA(cs_grid_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "grid_ia",	CS_OA(cs_grid_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "predictor",	CS_OA(cs_predictor),	cs_set_dirty_flag },
	{"%d",  3, "predictor_a",	CS_OA(cs_predictor_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "predictor_ia",	CS_OA(cs_predictor_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_line",	CS_OA(cs_menu_line),	cs_set_dirty_flag },
	{"%d",  3, "menu_line_a",	CS_OA(cs_menu_line_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_line_ia",	CS_OA(cs_menu_line_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "slider_line",	CS_OA(cs_slider_line),	cs_set_dirty_flag },
	{"%d",  3, "slider_line_a",	CS_OA(cs_slider_line_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "slider_line_ia",	CS_OA(cs_slider_line_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "other_line",	CS_OA(cs_other_line),	cs_set_dirty_flag },
	{"%d",  3, "other_line_a",	CS_OA(cs_other_line_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "other_line_ia",	CS_OA(cs_other_line_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "status_text1",	CS_OA(cs_status_text1),	cs_set_dirty_flag },
	{"%d",  3, "status_text1_a",	CS_OA(cs_status_text1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "status_text1_ia",	CS_OA(cs_status_text1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "status_text2",	CS_OA(cs_status_text2),	cs_set_dirty_flag },
	{"%d",  3, "status_text2_a",	CS_OA(cs_status_text2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "status_text2_ia",	CS_OA(cs_status_text2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "slider_text1",	CS_OA(cs_slider_text1),	cs_set_dirty_flag },
	{"%d",  3, "slider_text1_a",	CS_OA(cs_slider_text1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "slider_text1_ia",	CS_OA(cs_slider_text1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "slider_text2",	CS_OA(cs_slider_text2),	cs_set_dirty_flag },
	{"%d",  3, "slider_text2_a",	CS_OA(cs_slider_text2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "slider_text2_ia",	CS_OA(cs_slider_text2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_text1",	CS_OA(cs_menu_text1),	cs_set_dirty_flag },
	{"%d",  3, "menu_text1_a",	CS_OA(cs_menu_text1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_text1_ia",	CS_OA(cs_menu_text1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_text2",	CS_OA(cs_menu_text2),	cs_set_dirty_flag },
	{"%d",  3, "menu_text2_a",	CS_OA(cs_menu_text2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_text2_ia",	CS_OA(cs_menu_text2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_title",	CS_OA(cs_menu_title),	cs_set_dirty_flag },
	{"%d",  3, "menu_title_a",	CS_OA(cs_menu_title_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_title_ia",	CS_OA(cs_menu_title_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_arrow",	CS_OA(cs_menu_arrow),	cs_set_dirty_flag },
	{"%d",  3, "menu_arrow_a",	CS_OA(cs_menu_arrow_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "menu_arrow_ia",	CS_OA(cs_menu_arrow_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "state_text1",	CS_OA(cs_state_text1),	cs_set_dirty_flag },
	{"%d",  3, "state_text1_a",	CS_OA(cs_state_text1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "state_text1_ia",	CS_OA(cs_state_text1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "state_text2",	CS_OA(cs_state_text2),	cs_set_dirty_flag },
	{"%d",  3, "state_text2_a",	CS_OA(cs_state_text2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "state_text2_ia",	CS_OA(cs_state_text2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_info",	CS_OA(cs_edit_info),	cs_set_dirty_flag },
	{"%d",  3, "edit_info_a",	CS_OA(cs_edit_info_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_info_ia",	CS_OA(cs_edit_info_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "center_dot",	CS_OA(cs_center_dot),	cs_set_dirty_flag },
	{"%d",  3, "center_dot_a",	CS_OA(cs_center_dot_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "center_dot_ia",	CS_OA(cs_center_dot_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"",	0,  (char *)0,		0,			BU_STRUCTPARSE_FUNC_NULL }
};

void
cs_set_dirty_flag(void)
{
  struct dm_list *dmlp;

  FOR_ALL_DISPLAYS(dmlp, &head_dm_list.l)
    if(dmlp->dml_color_scheme == color_scheme)
      dmlp->dml_dirty = 1;
}

void
cs_update(void)
{
  register struct bu_structparse *sp;
  struct bu_vls vls;
  int offset;

  bu_vls_init(&vls);

  if (color_scheme->cs_mode)
    offset = 1;
  else
    offset = 2;

  for (sp = &color_scheme_vparse[CS_OFFSET]; sp->sp_name != NULL; sp += 3) {
    bu_vls_trunc(&vls, 0);
    bu_vls_printf(&vls, "rset cs %s [rset cs %s]", sp->sp_name, (sp+offset)->sp_name);
    Tcl_Eval(interp, bu_vls_addr(&vls));
  }

  cs_set_bg();
  bu_vls_free(&vls);
}

void
cs_set_bg(void)
{
  struct dm_list *dmlp;
  struct dm_list *save_curr_dmlp = curr_dm_list;
  struct bu_vls vls;

  bu_vls_init(&vls);
  bu_vls_printf(&vls, "dm bg %d %d %d",
		color_scheme->cs_bg[0],
		color_scheme->cs_bg[1],
		color_scheme->cs_bg[2]);

  FOR_ALL_DISPLAYS(dmlp, &head_dm_list.l)
    if (dmlp->dml_color_scheme == color_scheme) {
      dmlp->dml_dirty = 1;
      curr_dm_list = dmlp;
      Tcl_Eval(interp, bu_vls_addr(&vls));
    }

  bu_vls_free(&vls);
  curr_dm_list = save_curr_dmlp;
}
@


1.9
log
@change conf.h to a wrapped config.h
@
text
@@


1.8
log
@merge of ansi-6-0-branch into HEAD
@
text
@d19 5
a23 1
#include "conf.h"
@


1.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d236 1
a236 1
cs_set_dirty_flag()
d246 1
a246 1
cs_update()
d270 1
a270 1
cs_set_bg()
@


1.7.2.1
log
@Initial ANSIfication
@
text
@d236 1
a236 1
cs_set_dirty_flag(void)
d246 1
a246 1
cs_update(void)
d270 1
a270 1
cs_set_bg(void)
@


1.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d236 1
a236 1
cs_set_dirty_flag(void)
d246 1
a246 1
cs_update(void)
d270 1
a270 1
cs_set_bg(void)
@


1.5
log
@
More externs to ged.h to silence lint
@
text
@d236 1
a236 1
cs_set_dirty_flag()
d246 1
a246 1
cs_update()
d270 1
a270 1
cs_set_bg()
@


1.4
log
@*- cleanup
@
text
@a28 6
extern void mged_vls_struct_parse(); /* defined in vparse.c */

void cs_set_dirty_flag();
void cs_update();
void cs_set_bg();

@


1.3
log
@*- declare mged_vls_struct_parse()
@
text
@a4 2
 *	f_cs_set		set/get color scheme values
 *	f_cs_def		set/get default color scheme values
a297 56

#if 0
int
f_cs_set (clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int     argc;
char    **argv;
{
  struct bu_vls vls;

  bu_vls_init(&vls);

  if(argc < 1 || 5 < argc){
    bu_vls_printf(&vls, "help cs_set");
    Tcl_Eval(interp, bu_vls_addr(&vls));
    bu_vls_free(&vls);

    return TCL_ERROR;
  }

  mged_vls_struct_parse(&vls, "Color Schemes", color_scheme_vparse,
			(CONST char *)color_scheme, argc, argv);
  Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
  bu_vls_free(&vls);

  return TCL_OK;
}

int
f_cs_def (clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int     argc;
char    **argv;
{
  struct bu_vls vls;

  bu_vls_init(&vls);

  if(argc < 1 || 5 < argc){
    bu_vls_printf(&vls, "help cs_def");
    Tcl_Eval(interp, bu_vls_addr(&vls));
    bu_vls_free(&vls);

    return TCL_ERROR;
  }

  mged_vls_struct_parse(&vls, "Default Color Scheme", color_scheme_vparse,
			(CONST char *)&default_color_scheme, argc, argv);
  Tcl_AppendResult(interp, bu_vls_addr(&vls), (char *)NULL);
  bu_vls_free(&vls);

  return TCL_OK;
}
#endif
@


1.2
log
@*- use new structures
*- cleanup
@
text
@d31 2
@


1.1
log
@*- routines for manipulating the color scheme variables
@
text
@d8 1
a8 1
 *	cs_update		update all colors according to the state (i.e. active/inactive)
d36 98
a133 98
/* rc */			0,
/* active */			0,
/* bg */			{ 0, 0, 0 },
/* bg_a */			{ 0, 0, 50 },
/* bg_ia */			{ 0, 0, 0 },
/* adc_line */			{ 255, 255, 0 },
/* adc_line_a */		{ 255, 255, 0 },
/* adc_line_ia */		{ 255, 255, 0 },
/* adc_tick */			{ 255, 255, 255 },
/* adc_tick_a */		{ 255, 255, 255 },
/* adc_tick_ia */		{ 255, 255, 255 },
/* geo_def */			{ 255, 0, 0 },
/* geo_def_a */			{ 255, 0, 0 },
/* geo_def_ia */		{ 255, 0, 0 },
/* geo_hl */			{ 255, 255, 255 },
/* geo_hl_a */			{ 255, 255, 255 },
/* geo_hl_ia */			{ 255, 255, 255 },
/* geo_label */			{ 255, 255, 0 },
/* geo_label_a */		{ 255, 255, 0 },
/* geo_label_ia */		{ 255, 255, 0 },
/* model_axes */		{ 100, 255, 100 },
/* model_axes_a */		{ 100, 255, 100 },
/* model_axes_ia */		{ 100, 255, 100 },
/* model_axes_label */		{ 255, 255, 0 },
/* model_axes_label_a */	{ 255, 255, 0 },
/* model_axes_label_ia */	{ 255, 255, 0 },
/* view_axes */			{ 100, 100, 255 },
/* view_axes_a */		{ 100, 100, 255 },
/* view_axes_ia */		{ 100, 100, 255 },
/* view_axes_label */		{ 255, 255, 0 },
/* view_axes_label_a */		{ 255, 255, 0 },
/* view_axes_label_ia */	{ 255, 255, 0 },
/* edit_axes1 */		{ 255, 255, 255 },
/* edit_axes1_a */		{ 255, 255, 255 },
/* edit_axes1_ia */		{ 255, 255, 255 },
/* edit_axes_label1 */		{ 255, 255, 0 },
/* edit_axes_label1_a */	{ 255, 255, 0 },
/* edit_axes_label1_ia */	{ 255, 255, 0 },
/* edit_axes2 */		{ 255, 255, 255 },
/* edit_axes2_a */		{ 255, 255, 255 },
/* edit_axes2_ia */		{ 255, 255, 255 },
/* edit_axes_label2 */		{ 255, 255, 0 },
/* edit_axes_label2_a */	{ 255, 255, 0 },
/* edit_axes_label2_ia */	{ 255, 255, 0 },
/* rubber_band */		{ 255, 255, 255 },
/* rubber_band_a */		{ 255, 255, 255 },
/* rubber_band_ia */		{ 255, 255, 255 },
/* grid */			{ 255, 255, 255 },
/* grid_a */			{ 255, 255, 255 },
/* grid_ia */			{ 255, 255, 255 },
/* predictor */			{ 255, 255, 255 },
/* predictor_a */		{ 255, 255, 255 },
/* predictor_ia */		{ 255, 255, 255 },
/* fp_menu_line */		{ 255, 255, 0 },
/* fp_menu_line_a */		{ 255, 255, 0 },
/* fp_menu_line_ia */		{ 255, 255, 0 },
/* fp_slider_line */		{ 255, 255, 0 },
/* fp_slider_line_a */		{ 255, 255, 0 },
/* fp_slider_line_ia */		{ 255, 255, 0 },
/* fp_other_line */		{ 255, 255, 0 },
/* fp_other_line_a */		{ 255, 255, 0 },
/* fp_other_line_ia */		{ 255, 255, 0 },
/* fp_status_text1 */		{ 255, 255, 255 },
/* fp_status_text1_a */		{ 255, 255, 255 },
/* fp_status_text1_ia */	{ 255, 255, 255 },
/* fp_status_text2 */		{ 255, 255, 0 },
/* fp_status_text2_a */		{ 255, 255, 0 },
/* fp_status_text2_ia */	{ 255, 255, 0 },
/* fp_slider_text1 */		{ 255, 255, 255 },
/* fp_slider_text1_a */		{ 255, 255, 255 },
/* fp_slider_text1_ia */	{ 255, 255, 255 },
/* fp_slider_text2 */		{ 255, 0, 0 },
/* fp_slider_text2_a */		{ 255, 0, 0 },
/* fp_slider_text2_ia */	{ 255, 0, 0 },
/* fp_menu_text1 */		{ 255, 255, 255 },
/* fp_menu_text1_a */		{ 255, 255, 255 },
/* fp_menu_text1_ia */		{ 255, 255, 255 },
/* fp_menu_text2 */		{ 255, 255, 0 },
/* fp_menu_text2_a */		{ 255, 255, 0 },
/* fp_menu_text2_ia */		{ 255, 255, 0 },
/* fp_menu_title */		{ 255, 0, 0 },
/* fp_menu_title_a */		{ 255, 0, 0 },
/* fp_menu_title_ia */		{ 255, 0, 0 },
/* fp_menu_arrow */		{ 255, 255, 255 },
/* fp_menu_arrow_a */		{ 255, 255, 255 },
/* fp_menu_arrow_ia */		{ 255, 255, 255 },
/* fp_state_text1 */		{ 255, 255, 255 },
/* fp_state_text1_a */		{ 255, 255, 255 },
/* fp_state_text1_ia */		{ 255, 255, 255 },
/* fp_state_text2 */		{ 255, 255, 0 },
/* fp_state_text2_a */		{ 255, 255, 0 },
/* fp_state_text2_ia */		{ 255, 255, 0 },
/* fp_edit_info */		{ 255, 255, 0 },
/* fp_edit_info_a */		{ 255, 255, 0 },
/* fp_edit_info_ia */		{ 255, 255, 0 },
/* fp_center_dot */		{ 255, 255, 0 },
/* fp_center_dot_a */		{ 255, 255, 0 },
/* fp_center_dot_ia */		{ 255, 255, 0 }
d138 2
a139 2
#define MV_O(_m)        offsetof(struct _color_scheme, _m)
#define MV_OA(_m)	offsetofarray(struct _color_scheme, _m)
d141 97
a237 97
	{"%d",	1, "active",	MV_O(active),	cs_update },
	{"%d",  3, "bg",	MV_OA(bg),	cs_set_bg },
	{"%d",  3, "bg_a",	MV_OA(bg_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "bg_ia",	MV_OA(bg_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "adc_line",	MV_OA(adc_line),	cs_set_dirty_flag },
	{"%d",  3, "adc_line_a",	MV_OA(adc_line_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "adc_line_ia",	MV_OA(adc_line_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "adc_tick",	MV_OA(adc_tick),	cs_set_dirty_flag },
	{"%d",  3, "adc_tick_a",	MV_OA(adc_tick_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "adc_tick_ia",	MV_OA(adc_tick_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_def",	MV_OA(geo_def),	cs_set_dirty_flag },
	{"%d",  3, "geo_def_a",	MV_OA(geo_def_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_def_ia",	MV_OA(geo_def_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_hl",	MV_OA(geo_hl),	cs_set_dirty_flag },
	{"%d",  3, "geo_hl_a",	MV_OA(geo_hl_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_hl_ia",	MV_OA(geo_hl_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_label",	MV_OA(geo_label),	cs_set_dirty_flag },
	{"%d",  3, "geo_label_a",	MV_OA(geo_label_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "geo_label_ia",	MV_OA(geo_label_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "model_axes",	MV_OA(model_axes),	cs_set_dirty_flag },
	{"%d",  3, "model_axes_a",	MV_OA(model_axes_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "model_axes_ia",	MV_OA(model_axes_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "model_axes_label",	MV_OA(model_axes_label),	cs_set_dirty_flag },
	{"%d",  3, "model_axes_label_a",	MV_OA(model_axes_label_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "model_axes_label_ia",	MV_OA(model_axes_label_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "view_axes",	MV_OA(view_axes),	cs_set_dirty_flag },
	{"%d",  3, "view_axes_a",	MV_OA(view_axes_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "view_axes_ia",	MV_OA(view_axes_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "view_axes_label",	MV_OA(view_axes_label),	cs_set_dirty_flag },
	{"%d",  3, "view_axes_label_a",	MV_OA(view_axes_label_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "view_axes_label_ia",	MV_OA(view_axes_label_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes1",	MV_OA(edit_axes1),	cs_set_dirty_flag },
	{"%d",  3, "edit_axes1_a",	MV_OA(edit_axes1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes1_ia",	MV_OA(edit_axes1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes2",	MV_OA(edit_axes2),	cs_set_dirty_flag },
	{"%d",  3, "edit_axes2_a",	MV_OA(edit_axes2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes2_ia",	MV_OA(edit_axes2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes_label1",	MV_OA(edit_axes_label1),	cs_set_dirty_flag },
	{"%d",  3, "edit_axes_label1_a",	MV_OA(edit_axes_label1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes_label1_ia",	MV_OA(edit_axes_label1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes_label2",	MV_OA(edit_axes_label2),	cs_set_dirty_flag },
	{"%d",  3, "edit_axes_label2_a",	MV_OA(edit_axes_label2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "edit_axes_label2_ia",	MV_OA(edit_axes_label2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "rubber_band",	MV_OA(rubber_band),	cs_set_dirty_flag },
	{"%d",  3, "rubber_band_a",	MV_OA(rubber_band_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "rubber_band_ia",	MV_OA(rubber_band_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "grid",	MV_OA(grid),	cs_set_dirty_flag },
	{"%d",  3, "grid_a",	MV_OA(grid_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "grid_ia",	MV_OA(grid_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "predictor",	MV_OA(predictor),	cs_set_dirty_flag },
	{"%d",  3, "predictor_a",	MV_OA(predictor_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "predictor_ia",	MV_OA(predictor_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_line",	MV_OA(fp_menu_line),	cs_set_dirty_flag },
	{"%d",  3, "fp_menu_line_a",	MV_OA(fp_menu_line_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_line_ia",	MV_OA(fp_menu_line_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_slider_line",	MV_OA(fp_slider_line),	cs_set_dirty_flag },
	{"%d",  3, "fp_slider_line_a",	MV_OA(fp_slider_line_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_slider_line_ia",	MV_OA(fp_slider_line_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_other_line",	MV_OA(fp_other_line),	cs_set_dirty_flag },
	{"%d",  3, "fp_other_line_a",	MV_OA(fp_other_line_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_other_line_ia",	MV_OA(fp_other_line_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_status_text1",	MV_OA(fp_status_text1),	cs_set_dirty_flag },
	{"%d",  3, "fp_status_text1_a",	MV_OA(fp_status_text1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_status_text1_ia",	MV_OA(fp_status_text1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_status_text2",	MV_OA(fp_status_text2),	cs_set_dirty_flag },
	{"%d",  3, "fp_status_text2_a",	MV_OA(fp_status_text2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_status_text2_ia",	MV_OA(fp_status_text2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_slider_text1",	MV_OA(fp_slider_text1),	cs_set_dirty_flag },
	{"%d",  3, "fp_slider_text1_a",	MV_OA(fp_slider_text1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_slider_text1_ia",	MV_OA(fp_slider_text1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_slider_text2",	MV_OA(fp_slider_text2),	cs_set_dirty_flag },
	{"%d",  3, "fp_slider_text2_a",	MV_OA(fp_slider_text2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_slider_text2_ia",	MV_OA(fp_slider_text2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_text1",	MV_OA(fp_menu_text1),	cs_set_dirty_flag },
	{"%d",  3, "fp_menu_text1_a",	MV_OA(fp_menu_text1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_text1_ia",	MV_OA(fp_menu_text1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_text2",	MV_OA(fp_menu_text2),	cs_set_dirty_flag },
	{"%d",  3, "fp_menu_text2_a",	MV_OA(fp_menu_text2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_text2_ia",	MV_OA(fp_menu_text2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_title",	MV_OA(fp_menu_title),	cs_set_dirty_flag },
	{"%d",  3, "fp_menu_title_a",	MV_OA(fp_menu_title_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_title_ia",	MV_OA(fp_menu_title_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_arrow",	MV_OA(fp_menu_arrow),	cs_set_dirty_flag },
	{"%d",  3, "fp_menu_arrow_a",	MV_OA(fp_menu_arrow_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_menu_arrow_ia",	MV_OA(fp_menu_arrow_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_state_text1",	MV_OA(fp_state_text1),	cs_set_dirty_flag },
	{"%d",  3, "fp_state_text1_a",	MV_OA(fp_state_text1_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_state_text1_ia",	MV_OA(fp_state_text1_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_state_text2",	MV_OA(fp_state_text2),	cs_set_dirty_flag },
	{"%d",  3, "fp_state_text2_a",	MV_OA(fp_state_text2_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_state_text2_ia",	MV_OA(fp_state_text2_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_edit_info",	MV_OA(fp_edit_info),	cs_set_dirty_flag },
	{"%d",  3, "fp_edit_info_a",	MV_OA(fp_edit_info_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_edit_info_ia",	MV_OA(fp_edit_info_ia),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_center_dot",	MV_OA(fp_center_dot),	cs_set_dirty_flag },
	{"%d",  3, "fp_center_dot_a",	MV_OA(fp_center_dot_a),	BU_STRUCTPARSE_FUNC_NULL },
	{"%d",  3, "fp_center_dot_ia",	MV_OA(fp_center_dot_ia),	BU_STRUCTPARSE_FUNC_NULL },
d247 2
a248 2
    if(dmlp->_color_scheme == color_scheme)
      dmlp->_dirty = 1;
d260 1
a260 1
  if (color_scheme->active)
d267 1
a267 1
    bu_vls_printf(&vls, "cs_set %s [cs_set %s]", sp->sp_name, (sp+offset)->sp_name);
d284 3
a286 3
		color_scheme->bg[0],
		color_scheme->bg[1],
		color_scheme->bg[2]);
d289 2
a290 2
    if (dmlp->_color_scheme == color_scheme) {
      dmlp->_dirty = 1;
d299 1
a307 1
  struct bu_vls tmp_vls;
d319 3
a321 21
  bu_vls_init(&tmp_vls);
  start_catching_output(&tmp_vls);

  if (argc < 2) {
    /* Bare set command, print out current settings */
    bu_struct_print("Color Scheme", color_scheme_vparse,
		    (const char *)color_scheme);
  } else if (argc == 2) {
    bu_vls_struct_item_named(&vls, color_scheme_vparse, argv[1],
			     (const char *)color_scheme, ' ');
    bu_log("%s", bu_vls_addr(&vls));
  } else {
    bu_vls_printf(&vls, "%s=\"", argv[1]);
    bu_vls_from_argv(&vls, argc-2, argv+2);
    bu_vls_putc(&vls, '\"');
    bu_struct_parse(&vls, color_scheme_vparse, (char *)color_scheme);
  }

  stop_catching_output(&tmp_vls);
  Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);

a322 1
  bu_vls_free(&tmp_vls);
a334 1
  struct bu_vls tmp_vls;
d346 3
a348 21
  bu_vls_init(&tmp_vls);
  start_catching_output(&tmp_vls);

  if (argc < 2) {
    /* Bare set command, print out current settings */
    bu_struct_print("Default Color Scheme", color_scheme_vparse,
		    (const char *)&default_color_scheme);
  } else if (argc == 2) {
    bu_vls_struct_item_named(&vls, color_scheme_vparse, argv[1],
			     (const char *)&default_color_scheme, ' ');
    bu_log("%s", bu_vls_addr(&vls));
  } else {
    bu_vls_printf(&vls, "%s=\"", argv[1]);
    bu_vls_from_argv(&vls, argc-2, argv+2);
    bu_vls_putc(&vls, '\"');
    bu_struct_parse(&vls, color_scheme_vparse, (char *)&default_color_scheme);
  }

  stop_catching_output(&tmp_vls);
  Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);

a349 1
  bu_vls_free(&tmp_vls);
d353 1
@
