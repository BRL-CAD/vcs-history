head	11.21;
access;
symbols
	ansi-20040405-merged:11.17.2.2
	postmerge-20040405-ansi:11.19
	premerge-20040404-ansi:11.18
	postmerge-autoconf:11.18
	autoconf-freeze:11.17.10.2
	premerge-autoconf:11.18
	postmerge-20040315-windows:11.18
	premerge-20040315-windows:11.18
	windows-20040315-freeze:11.17.4.1
	autoconf-20031203:11.17
	autoconf-20031202:11.17
	autoconf-branch:11.17.0.10
	phong-branch:11.17.0.8
	photonmap-branch:11.17.0.6
	rel-6-1-DP:11.17
	windows-branch:11.17.0.4
	rel-6-0-2:11.15
	ansi-branch:11.17.0.2
	rel-6-0-1-branch:11.15.0.2
	hartley-6-0-post:11.16
	hartley-6-0-pre:11.15
	rel-6-0-1:11.15
	rel-6-0:11.15
	rel-5-4:11.12
	offsite-5-3-pre:11.14
	rel-5-3:11.12
	rel-5-2:11.12
	rel-5-1-branch:11.12.0.2
	rel-5-1:11.12
	rel-5-0:11.12
	rel-5-0-beta:11.12
	rel-4-5:11.12
	ctj-4-5-post:11.12
	ctj-4-5-pre:11.12
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.21
date	2004.05.21.17.47.48;	author morrison;	state dead;
branches;
next	11.20;

11.20
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	11.19;

11.19
date	2004.04.05.09.09.12;	author morrison;	state Exp;
branches;
next	11.18;

11.18
date	2004.02.02.17.39.34;	author morrison;	state Exp;
branches;
next	11.17;

11.17
date	2002.08.20.17.08.24;	author jra;	state Exp;
branches
	11.17.2.1
	11.17.4.1
	11.17.10.1;
next	11.16;

11.16
date	2002.08.15.20.55.36;	author hartley;	state Exp;
branches;
next	11.15;

11.15
date	2001.06.01.19.23.25;	author bparker;	state Exp;
branches;
next	11.14;

11.14
date	2000.10.24.19.05.07;	author mike;	state Exp;
branches;
next	11.13;

11.13
date	2000.08.19.03.10.47;	author mike;	state Exp;
branches;
next	11.12;

11.12
date	97.04.24.18.03.58;	author bparker;	state Exp;
branches;
next	11.11;

11.11
date	97.04.16.20.23.49;	author bparker;	state Exp;
branches;
next	11.10;

11.10
date	97.01.30.05.40.56;	author mike;	state Exp;
branches;
next	11.9;

11.9
date	97.01.29.05.19.13;	author mike;	state Exp;
branches;
next	11.8;

11.8
date	97.01.02.19.35.05;	author bparker;	state Exp;
branches;
next	11.7;

11.7
date	96.09.25.20.16.42;	author bparker;	state Exp;
branches;
next	11.6;

11.6
date	96.09.23.18.22.47;	author bparker;	state Exp;
branches;
next	11.5;

11.5
date	96.09.03.20.02.37;	author bparker;	state Exp;
branches;
next	11.4;

11.4
date	96.09.03.16.36.47;	author bparker;	state Exp;
branches;
next	11.3;

11.3
date	96.08.27.20.30.05;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	96.04.18.20.28.43;	author bparker;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.03.26;	author mike;	state Rel4_4;
branches;
next	10.5;

10.5
date	94.12.23.23.06.05;	author mike;	state Exp;
branches;
next	10.4;

10.4
date	94.12.16.19.37.05;	author gdurf;	state Exp;
branches;
next	10.3;

10.3
date	94.08.23.18.25.37;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	94.06.01.17.11.59;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.44.13;	author mike;	state Rel4_0;
branches;
next	1.7;

1.7
date	91.07.09.01.51.11;	author cjohnson;	state Exp;
branches;
next	1.6;

1.6
date	91.07.06.00.10.42;	author mike;	state Exp;
branches;
next	1.5;

1.5
date	91.07.01.21.32.58;	author mike;	state Exp;
branches;
next	1.4;

1.4
date	91.02.02.00.01.49;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	91.01.26.03.23.45;	author cjohnson;	state Exp;
branches;
next	1.2;

1.2
date	91.01.12.08.27.29;	author cjohnson;	state Exp;
branches;
next	1.1;

1.1
date	91.01.05.03.37.52;	author mike;	state Exp;
branches;
next	;

11.17.2.1
date	2002.09.19.18.02.03;	author morrison;	state Exp;
branches;
next	11.17.2.2;

11.17.2.2
date	2004.03.17.21.22.01;	author morrison;	state Exp;
branches;
next	;

11.17.4.1
date	2004.03.11.23.46.36;	author morrison;	state Exp;
branches;
next	;

11.17.10.1
date	2004.02.12.18.34.15;	author erikg;	state Exp;
branches;
next	11.17.10.2;

11.17.10.2
date	2004.03.15.14.07.39;	author erikg;	state Exp;
branches;
next	;


desc
@Polygon output interface
@


11.21
log
@moved to src/mged/
@
text
@/*
 *			P O L Y I F . C
 *
 *  Author -
 *	Michael John Muuss
 *	Christopher T. Johnson
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1990-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSpolyif[] = "@@(#)$Header: /n/xoff/cvs/brlcad/mged/polyif.c,v 11.20 2004/05/10 15:30:48 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <math.h>
#include <signal.h>
#include "machine.h"
#include "vmath.h"
#include "mater.h"
#include "raytrace.h"
#include "externs.h"
#include "./ged.h"
#include "./mged_solid.h"
#include "./mged_dm.h"

/* XXX When finalized, this stuff belongs in a header file of it's own */
struct polygon_header  {
	int	magic;			/* magic number */
	int	ident;			/* identification number */
	int	interior;		/* >0 => interior loop, gives ident # of exterior loop */
	vect_t	normal;			/* surface normal */
	unsigned char	color[3];	/* Color from containing region */
	int	npts;			/* number of points */
};
#define POLYGON_HEADER_MAGIC	0x8623bad2

struct bu_structparse polygon_desc[] = {
	{"%d", 1, "magic", offsetof(struct polygon_header, magic), BU_STRUCTPARSE_FUNC_NULL },
	{"%d", 1, "ident", offsetof(struct polygon_header, ident), BU_STRUCTPARSE_FUNC_NULL },
	{"%d", 1, "interior", offsetof(struct polygon_header, interior), BU_STRUCTPARSE_FUNC_NULL },
	{"%f", 3, "normal", bu_offsetofarray(struct polygon_header, normal), BU_STRUCTPARSE_FUNC_NULL },
	{"%c", 3, "color", bu_offsetofarray(struct polygon_header, color), BU_STRUCTPARSE_FUNC_NULL },
	{"%d", 1, "npts", offsetof(struct polygon_header, npts), BU_STRUCTPARSE_FUNC_NULL },
	{"",   0, (char *)0, 0, BU_STRUCTPARSE_FUNC_NULL }
};
struct bu_structparse vertex_desc[] = {
	{"%f", 3, "vertex", 0, BU_STRUCTPARSE_FUNC_NULL },
	{"",   0, (char *)0, 0, BU_STRUCTPARSE_FUNC_NULL }
};

#if 0
struct rt_imexport  polygon_desc[] = {
	{"%d",	offsetof(struct polygon_header, magic),		1 },
	{"%d",	offsetof(struct polygon_header, ident),		1 },
	{"%d",	offsetof(struct polygon_header, interior),	1 },
	{"%f",	bu_offsetofarray(struct polygon_header, normal),	3 },
	{"%c",	bu_offsetofarray(struct polygon_header, color),	3 },
	{"%d",	offsetof(struct polygon_header, npts),		1 },
	{"",	0,						0 }
};
struct rt_imexport vertex_desc[] = {
	{"%f",	0,	99 },	/* im_count will be filled in at runtime */
	{"",	0,	0 }
};
#endif
/*
 *			F _ P O L Y B I N O U T
 *
 *  Experimental interface for writing binary polygons
 *  that represent the current (evaluated) view.
 *
 *  Usage:  polybinout file
 */
int
f_polybinout(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
{
	register struct solid		*sp;
	register struct rt_vlist	*vp;
	FILE	*fp;
	int	pno = 1;
	struct polygon_header ph;
#define MAX_VERTS	1024
	vect_t	verts[MAX_VERTS];
	int	need_normal = 0;
	struct	bu_external	obuf;

	if(argc < 2 || 2 < argc){
	  struct bu_vls vls;

	  bu_vls_init(&vls);
	  bu_vls_printf(&vls, "help polybinout");
	  Tcl_Eval(interp, bu_vls_addr(&vls));
	  bu_vls_free(&vls);
	  return TCL_ERROR;
	}

	if( (fp = fopen( argv[1], "w" )) == NULL )  {
	  perror(argv[1]);
	  return TCL_ERROR;
	}

	FOR_ALL_SOLIDS(sp, &dgop->dgo_headSolid)  {
		for( BU_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
			register int	i;
			register int	nused = vp->nused;
			register int	*cmd = vp->cmd;
			register point_t *pt = vp->pt;
			for( i = 0; i < nused; i++,cmd++,pt++ )  {
				/* For each polygon, spit it out.  Ignore vectors */
				switch( *cmd )  {
				case RT_VLIST_LINE_MOVE:
					/* Move, start line */
					break;
				case RT_VLIST_LINE_DRAW:
					/* Draw line */
					break;
				case RT_VLIST_POLY_VERTNORM:
					/* Ignore per-vertex normal */
					break;
				case RT_VLIST_POLY_START:
					/* Start poly marker & normal, followed by POLY_MOVE */
					ph.magic = POLYGON_HEADER_MAGIC;
					ph.ident = pno++;
					ph.interior = 0;
					bcopy(sp->s_basecolor, ph.color, 3);
					ph.npts = 0;
					/* Set surface normal (vl_pnt points outward) */
					VMOVE( ph.normal, *pt );
					need_normal = 0;
					break;
				case RT_VLIST_POLY_MOVE:
					/* Start of polygon, has first point */
					/* fall through to... */
				case RT_VLIST_POLY_DRAW:
					/* Polygon Draw */
					if( ph.npts >= MAX_VERTS )  {
					  Tcl_AppendResult(interp, "excess vertex skipped\n",
							   (char *)NULL);
					  break;
					}
					VMOVE( verts[ph.npts], *pt );
					ph.npts++;
					break;
				case RT_VLIST_POLY_END:
				  /*
				   *  End Polygon.  Point given is repeat of
				   *  first one, ignore it.
				   * XXX note:  if poly_markers was not set,
				   * XXX poly will end with next POLY_MOVE.
				   */
				  if( ph.npts < 3 )  {
				    struct bu_vls tmp_vls;

				    bu_vls_init(&tmp_vls);
				    bu_vls_printf(&tmp_vls, "polygon with %d points discarded\n",
						  ph.npts);
				    Tcl_AppendResult(interp, bu_vls_addr(&tmp_vls), (char *)NULL);
				    bu_vls_free(&tmp_vls);
				    break;
				  }
					if( need_normal )  {
						vect_t	e1, e2;
						VSUB2( e1, verts[0], verts[1] );
						VSUB2( e2, verts[0], verts[2] );
						VCROSS( ph.normal, e1, e2 );
					}
					if( bu_struct_export( &obuf, (genptr_t)&ph, polygon_desc ) < 0 )  {
					  Tcl_AppendResult(interp, "header export error\n", (char *)NULL);
					  break;
					}
					if (bu_struct_put(fp, &obuf) != obuf.ext_nbytes) {
						perror("bu_struct_put");
						break;
					}
					db_free_external( &obuf );
					/* Now export the vertices */
					vertex_desc[0].sp_count = ph.npts * 3;
					if( bu_struct_export( &obuf, (genptr_t)verts, vertex_desc ) < 0 )  {
					  Tcl_AppendResult(interp, "vertex export error\n", (char *)NULL);
					  break;
					}
					if( bu_struct_put( fp, &obuf ) != obuf.ext_nbytes )  {
						perror("bu_struct_wrap_buf");
						break;
					}
					db_free_external( &obuf );
					ph.npts = 0;		/* sanity */
					break;
				}
			}
		}
	}
	fclose( fp );
	return TCL_OK;
}
@


11.20
log
@change conf.h to a wrapped config.h
@
text
@d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /cvs/brlcad/mged/polyif.c,v 11.19 2004/04/05 09:09:12 morrison Exp $ (BRL)";
@


11.19
log
@merge of ansi-6-0-branch into HEAD
@
text
@d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header$ (BRL)";
d21 5
a25 1
#include "conf.h"
@


11.18
log
@update copyright to include span through 2003
@
text
@d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /c/CVS/brlcad/mged/polyif.c,v 11.17 2002/08/20 17:08:24 jra Exp $ (BRL)";
d89 1
a89 5
f_polybinout(clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int	argc;
char	**argv;
@


11.17
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d14 1
a14 1
 *	This software is Copyright (C) 1990 by the United States Army.
d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /c/CVS/brlcad/mged/polyif.c,v 11.15 2001/06/01 19:23:25 bparker Exp $ (BRL)";
@


11.17.4.1
log
@sync to HEAD...
@
text
@d14 1
a14 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/mged/polyif.c,v 11.18 2004/02/02 17:39:34 morrison Exp $ (BRL)";
@


11.17.10.1
log
@merge from HEAD
@
text
@d14 1
a14 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /c/CVS/brlcad/mged/polyif.c,v 11.18 2004/02/02 17:39:34 morrison Exp $ (BRL)";
@


11.17.10.2
log
@merge from head
@
text
@d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /c/CVS/brlcad/mged/polyif.c,v 11.17.10.1 2004/02/12 18:34:15 erikg Exp $ (BRL)";
@


11.17.2.1
log
@Initial ANSIfication
@
text
@d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /c/CVS/brlcad/mged/polyif.c,v 11.17 2002/08/20 17:08:24 jra Exp $ (BRL)";
d89 5
a93 1
f_polybinout(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


11.17.2.2
log
@sync branch with HEAD
@
text
@d14 1
a14 1
 *	This software is Copyright (C) 1990-2004 by the United States Army.
d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header$ (BRL)";
@


11.16
log
@Converted from K&R to ANSI C - RFH
@
text
@d89 5
a93 1
f_polybinout(ClientData clientData, Tcl_Interp *interp, int argc, char **argv)
@


11.15
log
@*- mods that reflect MGED's use of drawable geometry
   objects, database objects and view objects
@
text
@d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /c/CVS/brlcad/mged/polyif.c,v 11.14 2000/10/24 19:05:07 mike Exp $ (BRL)";
d89 1
a89 5
f_polybinout(clientData, interp, argc, argv)
ClientData clientData;
Tcl_Interp *interp;
int	argc;
char	**argv;
@


11.14
log
@
Fixed compiler lint, function declarations.
@
text
@d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /c/CVS/brlcad/mged/polyif.c,v 11.13 2000/08/19 03:10:47 mike Exp $ (BRL)";
d120 1
a120 1
	FOR_ALL_SOLIDS(sp, &HeadSolid.l)  {
@


11.13
log
@
const RCSid
@
text
@d18 1
a18 1
static const char RCSpolyif[] = "@@(#)$Header: /c/CVS/brlcad/mged/polyif.c,v 11.12 1997/04/24 18:03:58 bparker Exp $ (BRL)";
d23 6
a30 1
#include <stdio.h>
@


11.12
log
@modify calls to Tcl_Eval
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.11 1997/04/16 20:23:49 bparker Exp bparker $ (BRL)";
@


11.11
log
@mods so that commands check args internally
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.10 1997/01/30 05:40:56 mike Exp bparker $ (BRL)";
d101 6
a106 1
	  Tcl_Eval(interp, "help polybinout");
@


11.10
log
@Don't need db.h
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.9 1997/01/29 05:19:13 mike Exp $ (BRL)";
d100 2
a101 1
	if(mged_cmd_arg_check(argc, argv, (struct funtab *)NULL))
d103 1
@


11.9
log
@Don't need db.h
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.8 1997/01/02 19:35:05 bparker Exp $ (BRL)";
a27 1
#include "db.h"
@


11.8
log
@mods to use libbn and libbu
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.7 1996/09/25 20:16:42 bparker Exp bparker $ (BRL)";
a26 1
#include "bu.h"
@


11.7
log
@now using more generalized solid macros
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.6 1996/09/23 18:22:47 bparker Exp bparker $ (BRL)";
d52 2
a53 2
	{"%f", 3, "normal", offsetofarray(struct polygon_header, normal), BU_STRUCTPARSE_FUNC_NULL },
	{"%c", 3, "color", offsetofarray(struct polygon_header, color), BU_STRUCTPARSE_FUNC_NULL },
d67 2
a68 2
	{"%f",	offsetofarray(struct polygon_header, normal),	3 },
	{"%c",	offsetofarray(struct polygon_header, color),	3 },
d100 1
a100 1
	struct	rt_external	obuf;
d175 1
a175 1
					if( rt_struct_export( &obuf, (genptr_t)&ph, polygon_desc ) < 0 )  {
d179 2
a180 2
					if (rt_struct_put(fp, &obuf) != obuf.ext_nbytes) {
						perror("rt_struct_put");
d186 1
a186 1
					if( rt_struct_export( &obuf, (genptr_t)verts, vertex_desc ) < 0 )  {
d190 2
a191 2
					if( rt_struct_put( fp, &obuf ) != obuf.ext_nbytes )  {
						perror("rt_struct_buf");
@


11.6
log
@changed dm.h to mged_dm.h
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.5 1996/09/03 20:02:37 bparker Exp bparker $ (BRL)";
d34 1
a34 1
#include "./solid.h"
d110 1
a110 1
	FOR_ALL_SOLIDS( sp )  {
@


11.5
log
@rt_list ---> bu_list
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.4 1996/09/03 16:36:47 bparker Exp bparker $ (BRL)";
d35 1
a35 1
#include "./dm.h"
@


11.4
log
@Check in Lee's changes
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.3 1996/08/27 20:30:05 bparker Exp butler $ (BRL)";
d27 1
d111 1
a111 1
		for( RT_LIST_FOR( vp, rt_vlist, &(sp->s_vlist) ) )  {
@


11.3
log
@now using libbu
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.2 1996/04/18 20:28:43 bparker Exp bparker $ (BRL)";
d46 16
d75 1
a75 1

d184 1
a184 1
					vertex_desc[0].im_count = ph.npts * 3;
@


11.2
log
@convert commands to Tcl
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 11.1 1995/01/04 10:03:26 mike Rel4_4 bparker $ (BRL)";
d143 1
a143 1
				    struct rt_vls tmp_vls;
d145 2
a146 2
				    rt_vls_init(&tmp_vls);
				    rt_vls_printf(&tmp_vls, "polygon with %d points discarded\n",
d148 2
a149 2
				    Tcl_AppendResult(interp, rt_vls_addr(&tmp_vls), (char *)NULL);
				    rt_vls_free(&tmp_vls);
@


11.1
log
@Release_4.4
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 10.5 94/12/23 23:06:05 mike Exp $ (BRL)";
d69 3
a71 1
f_polybinout( argc, argv )
d85 3
d89 2
a90 2
		perror(argv[1]);
		return CMD_BAD;
d128 3
a130 2
						rt_log("excess vertex skipped\n");
						break;
d136 16
a151 11
					/*
					 *  End Polygon.  Point given is repeat of
					 *  first one, ignore it.
					 * XXX note:  if poly_markers was not set,
					 * XXX poly will end with next POLY_MOVE.
					 */
					if( ph.npts < 3 )  {
						rt_log("polygon with %d points discarded\n",
							ph.npts);
						break;
					}
d159 2
a160 2
						rt_log("header export error\n");
						break;
d170 2
a171 2
						rt_log("vertex export error\n");
						break;
d185 1
a185 1
	return CMD_OK;
@


10.5
log
@Ignore per-vertex normal.
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 10.4 94/12/16 19:37:05 gdurf Exp Locker: mike $ (BRL)";
@


10.4
log
@Converted printf(...) and fprintf(stdout, ...) to rt_log(...).
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 10.3 1994/08/23 18:25:37 gdurf Exp gdurf $ (BRL)";
d102 3
@


10.3
log
@Added missing include
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 10.2 1994/06/01 17:11:59 gdurf Exp gdurf $ (BRL)";
d120 1
a120 1
						printf("excess vertex skipped\n");
d134 1
a134 1
						printf("polygon with %d points discarded\n",
d145 1
a145 1
						printf("header export error\n");
d156 1
a156 1
						printf("vertex export error\n");
@


10.2
log
@Converted f_polybinout to use new command return codes.
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 10.1 1991/10/12 06:44:13 mike Rel4_0 gdurf $ (BRL)";
d20 2
@


10.1
log
@Release_4.0
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 1.7 1991/07/09 01:51:11 cjohnson Exp $ (BRL)";
d66 1
a66 1
void
d83 1
a83 1
		return;
d169 1
@


1.7
log
@Change to use the new %c option (character arrays)
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 1.6 91/07/06 00:10:42 mike Exp $ (BRL)";
@


1.6
log
@ANSI initialization
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 1.5 91/07/01 21:32:58 mike Exp $ (BRL)";
d49 1
a49 1
	{"%s",	offsetofarray(struct polygon_header, color),	3 },
@


1.5
log
@This version has color.
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 1.4.1.2 91/07/02 01:10:39 cjohnson Exp $ (BRL)";
d45 7
a51 7
	"%d",	offsetof(struct polygon_header, magic),		1,
	"%d",	offsetof(struct polygon_header, ident),		1,
	"%d",	offsetof(struct polygon_header, interior),	1,
	"%f",	offsetofarray(struct polygon_header, normal),	3,
	"%s",	offsetofarray(struct polygon_header, color),	3,
	"%d",	offsetof(struct polygon_header, npts),		1,
	"",	0,						0
d54 2
a55 2
	"%f",	0,	99,	/* im_count will be filled in at runtime */
	"",	0,	0
@


1.4
log
@Converted to new rt_vlist structure
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 1.3 91/01/26 03:23:45 cjohnson Exp $ (BRL)";
d40 1
d49 1
d106 1
@


1.3
log
@Changed to use new calling sequences for struct export,
and to take advantage of struct_put routines
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 1.2 91/01/12 08:27:29 cjohnson Exp $ (BRL)";
d69 2
a70 2
	register struct solid *sp;
	register struct vlist *vp;
d85 10
a94 26
		for( vp = sp->s_vlist; vp != VL_NULL; vp = vp->vl_forw )  {
			/* For each polygon, spit it out.  Ignore vectors */
			switch( vp->vl_draw )  {
			case VL_CMD_LINE_MOVE:
				/* Move, start line */
				break;
			case VL_CMD_LINE_DRAW:
				/* Draw line */
				break;
			case VL_CMD_POLY_START:
				/* Start poly marker & normal, followed by POLY_MOVE */
				ph.magic = POLYGON_HEADER_MAGIC;
				ph.ident = pno++;
				ph.interior = 0;
				ph.npts = 0;
				/* Set surface normal (vl_pnt points outward) */
				VMOVE( ph.normal, vp->vl_pnt );
				need_normal = 0;
				break;
			case VL_CMD_POLY_MOVE:
				/* Start of polygon, has first point */
				/* fall through to... */
			case VL_CMD_POLY_DRAW:
				/* Polygon Draw */
				if( ph.npts >= MAX_VERTS )  {
					printf("excess vertex skipped\n");
d96 2
a97 14
				}
				VMOVE( verts[ph.npts], vp->vl_pnt );
				ph.npts++;
				break;
			case VL_CMD_POLY_END:
				/*
				 *  End Polygon.  Point given is repeat of
				 *  first one, ignore it.
				 * XXX note:  if poly_markers was not set,
				 * XXX poly will end with next POLY_MOVE.
				 */
				if( ph.npts < 3 )  {
					printf("polygon with %d points discarded\n",
						ph.npts);
d99 9
a107 9
				}
				if( need_normal )  {
					vect_t	e1, e2;
					VSUB2( e1, verts[0], verts[1] );
					VSUB2( e2, verts[0], verts[2] );
					VCROSS( ph.normal, e1, e2 );
				}
				if( rt_struct_export( &obuf, (genptr_t)&ph, polygon_desc ) < 0 )  {
					printf("header export error\n");
d109 11
a119 3
				}
				if (rt_struct_put(fp, &obuf) != obuf.ext_nbytes) {
					perror("rt_struct_put");
d121 39
a159 7
				}
				db_free_external( &obuf );

				/* Now export the vertices */
				vertex_desc[0].im_count = ph.npts * 3;
				if( rt_struct_export( &obuf, (genptr_t)verts, vertex_desc ) < 0 )  {
					printf("vertex export error\n");
a161 7
				if( rt_struct_put( fp, &obuf ) != obuf.ext_nbytes )  {
					perror("rt_struct_buf");
					break;
				}
				db_free_external( &obuf );
				ph.npts = 0;		/* sanity */
				break;
@


1.2
log
@Changed so that first point is numbered 1, not 0.
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header: /m/cad/mged/RCS/polyif.c,v 1.1 91/01/05 03:37:52 mike Exp $ (BRL)";
d77 1
a77 2
	int	olen;
	char	*obuf;
d134 1
a134 3
				obuf = rt_struct_export( &olen,
					(genptr_t)&ph, polygon_desc );
				if( obuf == (char *)0 )  {
d138 2
a139 2
				if( fwrite( obuf, 1, olen, fp ) != olen )  {
					perror("fwrite");
d142 1
a142 1
				rt_free( obuf, "polygon header" );
d146 1
a146 3
				obuf = rt_struct_export( &olen,
					(genptr_t)verts, vertex_desc );
				if( obuf == (char *)0 )  {
d150 2
a151 2
				if( fwrite( obuf, 1, olen, fp ) != olen )  {
					perror("fwrite");
d154 1
a154 1
				rt_free( obuf, "vertex buffer" );
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
static char RCSpolyif[] = "@@(#)$Header$ (BRL)";
d39 1
a40 1
	vect_t	normal;			/* surface normal */
d47 1
a48 1
	"%f",	offsetofarray(struct polygon_header, normal),	3,
d72 1
a72 1
	int	pno = 0;
a159 1
				printf("%d, ", ph.npts);
a164 1
	printf("\n");
@
