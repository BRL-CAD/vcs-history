head	11.7;
access;
symbols
	ansi-20040405-merged:11.5.6.1
	postmerge-20040405-ansi:11.6
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.5.14.2
	premerge-autoconf:11.6
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.5.8.1
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.14
	phong-branch:11.5.0.12
	photonmap-branch:11.5.0.10
	rel-6-1-DP:11.5
	windows-branch:11.5.0.8
	rel-6-0-2:11.5
	ansi-branch:11.5.0.6
	rel-6-0-1-branch:11.5.0.4
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.5
	offsite-5-3-pre:11.5
	rel-5-3:11.5
	rel-5-2:11.5
	rel-5-1-branch:11.5.0.2
	rel-5-1:11.5
	rel-5-0:11.5
	rel-5-0-beta:11.5
	rel-4-5:11.5
	ctj-4-5-post:11.5
	ctj-4-5-pre:11.5
	rel-4-4:11.1
	rel-4-0:10.1
	rel-3-5:9.1
	rel-3-0:8.1
	rel-2-3:7.1
	rel-2-0:6.1
	rel-1-24:5.1
	rel-1-20:4.2
	rel-1-10:4.1
	rt-2:2.3;
locks; strict;
comment	@ * @;


11.7
date	2004.05.21.17.47.46;	author morrison;	state dead;
branches;
next	11.6;

11.6
date	2004.02.02.17.39.34;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	97.01.17.22.56.57;	author bparker;	state Exp;
branches
	11.5.6.1
	11.5.8.1
	11.5.14.1;
next	11.4;

11.4
date	96.09.25.19.55.08;	author bparker;	state Exp;
branches;
next	11.3;

11.3
date	96.09.17.21.15.46;	author bparker;	state Exp;
branches;
next	11.2;

11.2
date	96.09.03.20.02.37;	author bparker;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.03.37;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.44.18;	author mike;	state Rel4_0;
branches;
next	9.3;

9.3
date	91.01.29.00.27.44;	author mike;	state Exp;
branches;
next	9.2;

9.2
date	90.04.21.06.04.04;	author mike;	state Exp;
branches;
next	9.1;

9.1
date	89.05.19.06.03.51;	author mike;	state Rel3_5;
branches;
next	8.3;

8.3
date	89.04.06.20.35.04;	author mike;	state Exp;
branches;
next	8.2;

8.2
date	89.01.18.01.50.07;	author mike;	state Exp;
branches;
next	8.1;

8.1
date	88.10.05.00.37.21;	author mike;	state Rel3_0;
branches;
next	7.3;

7.3
date	88.02.25.06.04.06;	author mike;	state Exp;
branches;
next	7.2;

7.2
date	87.11.05.05.02.56;	author mike;	state Exp;
branches;
next	7.1;

7.1
date	87.11.03.00.01.51;	author mike;	state Rel;
branches;
next	6.1;

6.1
date	87.07.11.08.05.15;	author mike;	state Rel;
branches;
next	5.1;

5.1
date	87.06.24.22.22.07;	author mike;	state Rel;
branches;
next	4.3;

4.3
date	87.06.23.21.42.14;	author mike;	state Exp;
branches;
next	4.2;

4.2
date	87.02.13.00.13.00;	author mike;	state Exp;
branches;
next	4.1;

4.1
date	86.12.29.03.22.59;	author mike;	state Rel1;
branches;
next	2.4;

2.4
date	86.06.19.23.49.07;	author mike;	state Exp;
branches;
next	2.3;

2.3
date	85.03.15.05.02.27;	author mike;	state Exp;
branches;
next	2.2;

2.2
date	85.03.14.16.50.04;	author mike;	state Exp;
branches;
next	2.1;

2.1
date	85.03.11.23.53.19;	author mike;	state Prod;
branches;
next	1.4;

1.4
date	85.02.04.22.06.50;	author mike;	state Exp;
branches;
next	1.3;

1.3
date	85.01.16.01.54.32;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	84.11.20.04.21.06;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	84.11.16.19.46.21;	author mike;	state Exp;
branches;
next	;

11.5.6.1
date	2004.03.17.21.22.01;	author morrison;	state Exp;
branches;
next	;

11.5.8.1
date	2004.03.11.23.46.35;	author morrison;	state Exp;
branches;
next	;

11.5.14.1
date	2004.02.12.18.34.15;	author erikg;	state Exp;
branches;
next	11.5.14.2;

11.5.14.2
date	2004.03.15.14.07.39;	author erikg;	state Exp;
branches;
next	;


desc
@GED solid control structure -- one for each solid being edited
@


11.7
log
@moved to src/mged/
@
text
@/*
 *  			S O L I D . H
 *
 *	Solids structure definition
 *
 *  Author -
 *	Michael John Muuss
 *  
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1985-2004 by the United States Army.
 *	All rights reserved.
 *
 *  $Header: /n/xoff/cvs/brlcad/mged/mged_solid.h,v 11.6 2004/02/02 17:39:34 morrison Exp $
 */

#include "solid.h"

extern struct solid	FreeSolid;	/* Head of freelist */
extern struct solid	HeadSolid;	/* Head of doubly linked solid tab */
@


11.6
log
@update copyright to include span through 2003
@
text
@d18 1
a18 1
 *  $Header: /c/CVS/brlcad/mged/mged_solid.h,v 11.5 1997/01/17 22:56:57 bparker Exp $
@


11.5
log
@checkin for weekend
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1985 by the United States Army.
d18 1
a18 1
 *  $Header: /m/cad/mged/RCS/mged_solid.h,v 11.4 1996/09/25 19:55:08 bparker Exp bparker $
@


11.5.6.1
log
@sync branch with HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d18 1
a18 1
 *  $Header$
@


11.5.8.1
log
@sync to HEAD...
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d18 1
a18 1
 *  $Header: /n/cad/c/CVS/brlcad/mged/mged_solid.h,v 11.6 2004/02/02 17:39:34 morrison Exp $
@


11.5.14.1
log
@merge from HEAD
@
text
@d15 1
a15 1
 *	This software is Copyright (C) 1985-2004 by the United States Army.
d18 1
a18 1
 *  $Header: /c/CVS/brlcad/mged/mged_solid.h,v 11.6 2004/02/02 17:39:34 morrison Exp $
@


11.5.14.2
log
@merge from head
@
text
@d18 1
a18 1
 *  $Header: /c/CVS/brlcad/mged/mged_solid.h,v 11.5.14.1 2004/02/12 18:34:15 erikg Exp $
@


11.4
log
@changed solid.h to mged_solid.h and
moved most contents to /m/cad/h/solid.h
@
text
@d18 1
a18 1
 *  $Header: /m/cad/mged/RCS/solid.h,v 11.3 1996/09/17 21:15:46 bparker Exp bparker $
a24 1
extern int		ndrawn;
@


11.3
log
@prepare to use libbu
@
text
@d18 1
a18 1
 *  $Header: /m/cad/mged/RCS/solid.h,v 11.2 1996/09/03 20:02:37 bparker Exp bparker $
d21 3
a23 24
#define MAX_PATH	16	/* Maximum depth of path */
struct solid  {
	fastf_t	s_size;		/* Distance across solid, in model space */
	fastf_t	s_csize;	/* Dist across clipped solid (model space) */
	vect_t	s_center;	/* Center point of solid, in model space */
	unsigned long s_addr;	/* Display processor's core address */
	unsigned s_bytes;	/* Display processor's core length */
	struct bu_list s_vlist;/* Pointer to unclipped vector list */
	int	s_vlen;		/* # of actual cmd[] entries in vlist */
	struct directory *s_path[MAX_PATH];	/* Full `path' name */
	char	s_last;		/* index of last path element */
	char	s_flag;		/* UP = object visible, DOWN = obj invis */
	char	s_iflag;	/* UP = illuminated, DOWN = regular */
	char	s_soldash;	/* solid/dashed line flag */
	char	s_Eflag;	/* flag - not a solid but an "E'd" region */
	unsigned char	s_basecolor[3];	/* color from containing region */
	unsigned char	s_color[3];	/* color to draw as */
	short	s_dmindex;	/* display manager private, for color index */
	short	s_regionid;	/* region ID */
	struct solid *s_forw;	/* forward link */
	struct solid *s_back;	/* backward link */
};
#define SOLID_NULL	((struct solid *)0)
extern struct solid	*FreeSolid;	/* Head of freelist */
a25 35

#define GET_SOLID(p)    {  \
	if( ((p)=FreeSolid) == SOLID_NULL )  { \
		p = (struct solid *)bu_calloc(1,sizeof(struct solid),"struct solid"); \
	} else { \
		FreeSolid = (p)->s_forw; \
	} \
	BU_LIST_INIT( &((p)->s_vlist) ); \
	}

#define FREE_SOLID(p) {(p)->s_forw = FreeSolid; FreeSolid = (p); \
	RT_FREE_VLIST( &((p)->s_vlist ) ); \
	(p)->s_addr = 0; }

#define FOR_ALL_SOLIDS(p)  \
	for( p=HeadSolid.s_forw; p != &HeadSolid; p = p->s_forw )

/* Insert "new" solid in front of "old" solid */
#define INSERT_SOLID(new,old)	{ \
	(new)->s_back = (old)->s_back; \
	(old)->s_back = (new); \
	(new)->s_forw = (old); \
	(new)->s_back->s_forw = (new);  }

/* Append "new" solid after "old" solid */
#define APPEND_SOLID(new,old)	{ \
	(new)->s_forw = (old)->s_forw; \
	(new)->s_back = (old); \
	(old)->s_forw = (new); \
	(new)->s_forw->s_back = (new);  }

/* Dequeue "cur" solid from doubly-linked list */
#define DEQUEUE_SOLID(cur)	{ \
	(cur)->s_forw->s_back = (cur)->s_back; \
	(cur)->s_back->s_forw = (cur)->s_forw;  }
@


11.2
log
@rt_list ---> bu_list
@
text
@d18 1
a18 1
 *  $Header: /m/cad/mged/RCS/solid.h,v 11.1 1995/01/04 10:03:37 mike Rel4_4 bparker $
d50 1
a50 1
		p = (struct solid *)rt_calloc(1,sizeof(struct solid),"struct solid"); \
@


11.1
log
@Release_4.4
@
text
@d18 1
a18 1
 *  $Header: /m/cad/mged/RCS/solid.h,v 10.1 91/10/12 06:44:18 mike Rel4_0 $
d28 1
a28 1
	struct rt_list s_vlist;/* Pointer to unclipped vector list */
d54 1
a54 1
	RT_LIST_INIT( &((p)->s_vlist) ); \
@


10.1
log
@Release_4.0
@
text
@d18 1
a18 1
 *  $Header: /m/cad/mged/RCS/solid.h,v 9.3 91/01/29 00:27:44 mike Exp $
@


9.3
log
@Modified for new rt_vlist structure
@
text
@d18 1
a18 1
 *  $Header: /m/cad/mged/RCS/solid.h,v 9.2 90/04/21 06:04:04 mike Exp $
@


9.2
log
@Better memory allocator
@
text
@d18 1
a18 1
 *  $Header: solid.h,v 9.1 89/05/19 06:03:51 mike Locked $
d28 2
a29 4
	struct vlist *s_vlist;/* Pointer to unclipped vector list */
	int	s_vlen;		/* Len of unclipped vector list (structs) */
	struct vlist *s_clipv;/* Pointer to clipped vector list */
	int	s_clen;		/* Len of clipped vector list (structs) */
d53 3
a55 1
	} }
d58 2
a59 2
	if((p)->s_vlist) FREE_VL((p)->s_vlist); \
	(p)->s_vlist = 0; (p)->s_addr = 0; }
@


9.1
log
@Release_3.5
@
text
@d18 1
a18 1
 *  $Header: solid.h,v 8.3 89/04/06 20:35:04 mike Exp $
d26 1
a26 1
	unsigned s_addr;	/* Display processor's core address */
d52 1
a52 6
		if( (p = (struct solid *)malloc(sizeof(struct solid))) == SOLID_NULL )  {\
			(void)printf("GET_SOLID( p ): malloc failed\n"); \
			no_memory = 2; \
		} else { \
			bzero( (char *)p, sizeof(struct solid) ); \
		} \
@


8.3
log
@extern function declarations moved to externs.h
@
text
@d18 1
a18 1
 *  $Header: solid.h,v 8.2 89/01/18 01:50:07 mike Locked $
@


8.2
log
@Removed s_materp, added s_basecolor[], s_color[], and s_dmindex
@
text
@d4 2
d18 1
a18 1
 *  $Header: solid.h,v 8.1 88/10/05 00:37:21 mike Locked $
a19 2
extern void	free();
extern char	*malloc();
a20 3
/*
 *	Solids structure definition
 */
@


8.1
log
@Release_3.0
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 7.3 88/02/25 06:04:06 mike Exp $
d41 3
a44 1
	char	*s_materp;	/* (struct mater *), for display manager */
@


7.3
log
@Modified for new vector lists
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 7.2 87/11/05 05:02:56 mike Locked $
@


7.2
log
@Eliminated local machine.h, converted to fastf_t, now link with librt.a
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 7.1 87/11/03 00:01:51 mike Rel $
d31 1
a31 1
	struct veclist *s_vlist;/* Pointer to unclipped vector list */
d33 1
a33 1
	struct veclist *s_clipv;/* Pointer to clipped vector list */
d64 1
a64 1
	if((p)->s_vlist) (void)free((char *)(p)->s_vlist); \
@


7.1
log
@Release 2.3
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 6.1 87/07/11 08:05:15 mike Rel $
d26 2
a27 2
	float	s_size;		/* Distance across solid, in model space */
	float	s_csize;	/* Dist across clipped solid (model space) */
@


6.1
log
@Release 2.0
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 5.1 87/06/24 22:22:07 mike Rel $
@


5.1
log
@Release 1.24
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 4.3 87/06/23 21:42:14 mike Exp $
@


4.3
log
@Modified GET_SOLID to bzero memory after malloc'ing it.
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 4.3 87/06/23 20:13:53 mike Exp $
@


4.2
log
@Release 1.20 -- First Formal Release
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 4.1 86/12/29 03:22:59 mike Rel1 $
d51 12
a62 9
#define GET_SOLID(p)    { if( ((p)=FreeSolid) == SOLID_NULL )  { \
			p = (struct solid *)malloc(sizeof(struct solid)); \
			  if( p == SOLID_NULL )  {\
				(void)printf("GETSOLID: malloc failed\n"); \
				no_memory = 2; \
			  } \
			} else { \
				FreeSolid = (p)->s_forw; \
			} }
@


4.1
log
@BRL CAD Distribution Release 1.10
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 2.4 86/06/19 23:49:07 mike Exp $
@


2.4
log
@Changed MAX_PATH to 16
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 2.3 85/03/15 05:02:27 mike Exp $
@


2.3
log
@Added mapping between region ID and color + database handle.
Reorganized to support regular expressions on the command line.
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 2.2 85/03/14 16:50:04 mike Exp $
d24 1
a24 1
#define MAX_PATH	8	/* Maximum depth of path */
@


2.2
log
@Added material pointer
@
text
@d16 1
a16 1
 *  $Header: solid.h,v 2.1 85/03/11 23:53:19 mike Prod $
d41 1
@


2.1
log
@First production release.
Includes lint cleanups from Gwyn.
@
text
@d16 1
a16 1
 *  $Header$
d41 1
@


1.4
log
@Added clipped vector list and clipped size.
@
text
@d2 20
d52 1
a52 1
				printf("GETSOLID: malloc failed\n"); \
@


1.3
log
@pre-Keith version
@
text
@d7 1
d11 4
a14 2
	struct veclist *s_vlist;/* Pointer to vector list */
	int	s_vlen;		/* Length of vector list (structs) */
@


1.2
log
@Vector lists saved, multiple display managers supported.
@
text
@d37 1
a37 1
	(p)->s_vlist = 0; }
@


1.1
log
@Initial revision
@
text
@a0 1

d4 1
d10 3
a12 1
	struct directory *s_path[8];	/* Full `path' name */
d35 3
a37 1
#define FREE_SOLID(p) {(p)->s_forw = FreeSolid; FreeSolid = (p);}
@
