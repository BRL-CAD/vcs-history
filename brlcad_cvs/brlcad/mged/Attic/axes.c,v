head	1.18;
access;
symbols
	ansi-20040405-merged:1.13.2.2
	postmerge-20040405-ansi:1.15
	premerge-20040404-ansi:1.14
	postmerge-autoconf:1.14
	autoconf-freeze:1.13.10.1
	premerge-autoconf:1.14
	postmerge-20040315-windows:1.14
	premerge-20040315-windows:1.14
	windows-20040315-freeze:1.13.4.1
	autoconf-20031203:1.13
	autoconf-20031202:1.13
	autoconf-branch:1.13.0.10
	phong-branch:1.13.0.8
	photonmap-branch:1.13.0.6
	rel-6-1-DP:1.13
	windows-branch:1.13.0.4
	rel-6-0-2:1.11
	ansi-branch:1.13.0.2
	rel-6-0-1-branch:1.11.0.2
	hartley-6-0-post:1.12
	hartley-6-0-pre:1.11
	rel-6-0-1:1.11
	rel-6-0:1.11
	rel-5-4:1.9
	offsite-5-3-pre:1.9
	rel-5-3:1.9
	rel-5-2:1.9
	rel-5-1-branch:1.9.0.2
	rel-5-1:1.9
	rel-5-0:1.9
	rel-5-0-beta:1.9
	rel-4-5:1.1;
locks; strict;
comment	@ * @;


1.18
date	2004.05.21.17.47.35;	author morrison;	state dead;
branches;
next	1.17;

1.17
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.10.15.25.28;	author morrison;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.05.09.09.11;	author morrison;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.02.17.39.31;	author morrison;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.20.17.08.21;	author jra;	state Exp;
branches
	1.13.2.1
	1.13.4.1
	1.13.10.1;
next	1.12;

1.12
date	2002.08.15.20.55.31;	author hartley;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.05.15.51.40;	author bparker;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.01.19.23.22;	author bparker;	state Exp;
branches;
next	1.9;

1.9
date	98.11.06.22.02.11;	author bparker;	state Exp;
branches;
next	1.8;

1.8
date	98.10.21.17.27.10;	author bparker;	state Exp;
branches;
next	1.7;

1.7
date	98.06.25.07.37.24;	author mike;	state Exp;
branches;
next	1.6;

1.6
date	98.06.12.19.46.18;	author bparker;	state Exp;
branches;
next	1.5;

1.5
date	98.06.11.19.33.44;	author bparker;	state Exp;
branches;
next	1.4;

1.4
date	98.06.11.14.28.08;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	98.05.18.19.35.07;	author bparker;	state Exp;
branches;
next	1.2;

1.2
date	98.03.06.22.37.57;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	98.02.05.22.50.46;	author bparker;	state Exp;
branches;
next	;

1.13.2.1
date	2002.09.19.18.01.59;	author morrison;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2004.03.17.21.21.54;	author morrison;	state Exp;
branches;
next	;

1.13.4.1
date	2004.03.11.23.46.32;	author morrison;	state Exp;
branches;
next	;

1.13.10.1
date	2004.02.12.18.34.12;	author erikg;	state Exp;
branches;
next	;


desc
@routines to draw world, model and edit axes
@


1.18
log
@moved to src/mged/
@
text
@/*
 *			A X E S . C
 *
 * Functions -
 *	draw_axes	Common axes drawing routine that draws axes at the
 *				specifed point and orientation.
 *	draw_e_axes	Draw the edit axes.
 *	draw_m_axes	Draw the model axes.
 *	draw_v_axes	Draw the view axes.
 *
 * Author -
 *	Robert G. Parker
 *
 * Source -
 *	SLAD CAD Team
 *	The U. S. Army Research Laboratory
 *	berdeen Proving Ground, Maryland  21005
 *
 * Copyright Notice -
 *      This software is Copyright (C) 1998 by the United States Army.
 *      All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "bu.h"
#include "vmath.h"
#include "bn.h"
#include "raytrace.h"
#include "externs.h"
#include "./ged.h"
#include "./mged_dm.h"

extern point_t es_keypoint;
extern point_t e_axes_pos;
extern point_t curr_e_axes_pos;

static void ax_set_dirty_flag();

struct _axes_state default_axes_state = {
/* ax_rc */			1,
/* ax_model_draw */    	        0,
/* ax_model_size */		500,
/* ax_model_linewidth */	1,
/* ax_model_pos */		{ 0.0, 0.0, 0.0 },
/* ax_view_draw */    	        0,
/* ax_view_size */		500,
/* ax_view_linewidth */		1,
/* ax_view_pos */		{ 0, 0 },
/* ax_edit_draw */		0,
/* ax_edit_size1 */		500,
/* ax_edit_size2 */		500,
/* ax_edit_linewidth1 */	1,
/* ax_edit_linewidth2 */	1
};

#define AX_O(_m)	offsetof(struct _axes_state, _m)
#define AX_OA(_m)	offsetofarray(struct _axes_state, _m)
struct bu_structparse axes_vparse[] = {
	{"%d",  1, "model_draw",	AX_O(ax_model_draw),		ax_set_dirty_flag },
	{"%d",  1, "model_size",	AX_O(ax_model_size),		ax_set_dirty_flag },
	{"%d",  1, "model_linewidth",	AX_O(ax_model_linewidth),	ax_set_dirty_flag },
	{"%f",	3, "model_pos",		AX_OA(ax_model_pos),		ax_set_dirty_flag },
	{"%d",  1, "view_draw",		AX_O(ax_view_draw),		ax_set_dirty_flag },
	{"%d",  1, "view_size",		AX_O(ax_view_size),		ax_set_dirty_flag },
	{"%d",  1, "view_linewidth",	AX_O(ax_view_linewidth),	ax_set_dirty_flag },
	{"%d",  2, "view_pos",		AX_OA(ax_view_pos),		ax_set_dirty_flag },
	{"%d",  1, "edit_draw",		AX_O(ax_edit_draw),		ax_set_dirty_flag },
	{"%d",  1, "edit_size1",	AX_O(ax_edit_size1),		ax_set_dirty_flag },
	{"%d",  1, "edit_size2",	AX_O(ax_edit_size2),		ax_set_dirty_flag },
	{"%d",  1, "edit_linewidth1",	AX_O(ax_edit_linewidth1),	ax_set_dirty_flag },
	{"%d",  1, "edit_linewidth2",	AX_O(ax_edit_linewidth2),	ax_set_dirty_flag },
	{"",	0, (char *)0,		0,				BU_STRUCTPARSE_FUNC_NULL }
};

static void
ax_set_dirty_flag()
{
  struct dm_list *dmlp;

  FOR_ALL_DISPLAYS(dmlp, &head_dm_list.l)
    if(dmlp->dml_axes_state == axes_state)
      dmlp->dml_dirty = 1;
}

void
draw_e_axes()
{
	point_t v_ap1;                 /* axes position in view coordinates */
	point_t v_ap2;                 /* axes position in view coordinates */
	mat_t rot_mat;

	if (state == ST_S_EDIT) {
		MAT4X3PNT(v_ap1, view_state->vs_vop->vo_model2view, e_axes_pos);
		MAT4X3PNT(v_ap2, view_state->vs_vop->vo_model2view, curr_e_axes_pos);
	} else if(state == ST_O_EDIT) {
		point_t m_ap2;

		MAT4X3PNT(v_ap1, view_state->vs_vop->vo_model2view, es_keypoint);
		MAT4X3PNT(m_ap2, modelchanges, es_keypoint);
		MAT4X3PNT(v_ap2, view_state->vs_vop->vo_model2view, m_ap2);
	} else
		return;

	dmo_drawAxes_cmd(dmp,
			 view_state->vs_vop->vo_size,
			 view_state->vs_vop->vo_rotation,
			 v_ap1,
			 axes_state->ax_edit_size1 * INV_GED,
			 color_scheme->cs_edit_axes1,
			 color_scheme->cs_edit_axes_label1,
			 axes_state->ax_edit_linewidth1,
			 0, /* positive direction only */
			 0, /* three colors (i.e. X-red, Y-green, Z-blue) */
			 0, /* no ticks */
			 0, /* tick len */
			 0, /* major tick len */
			 0, /* tick interval */
			 0, /* ticks per major */
			 NULL, /* tick color */
			 NULL, /* major tick color */
			 0 /* tick threshold */);

	bn_mat_mul(rot_mat, view_state->vs_vop->vo_rotation, acc_rot_sol);
	dmo_drawAxes_cmd(dmp,
			 view_state->vs_vop->vo_size,
			 rot_mat,
			 v_ap2,
			 axes_state->ax_edit_size2 * INV_GED,
			 color_scheme->cs_edit_axes2,
			 color_scheme->cs_edit_axes_label2,
			 axes_state->ax_edit_linewidth2,
			 0, /* positive direction only */
			 0, /* three colors (i.e. X-red, Y-green, Z-blue) */
			 0, /* no ticks */
			 0, /* tick len */
			 0, /* major tick len */
			 0, /* tick interval */
			 0, /* ticks per major */
			 NULL, /* tick color */
			 NULL, /* major tick color */
			 0 /* tick threshold */);
}

void
draw_m_axes()
{
	point_t m_ap;			/* axes position in model coordinates, mm */
	point_t v_ap;			/* axes position in view coordinates */

	VSCALE(m_ap, axes_state->ax_model_pos, local2base);
	MAT4X3PNT(v_ap, view_state->vs_vop->vo_model2view, m_ap);
	dmo_drawAxes_cmd(dmp,
			 view_state->vs_vop->vo_size,
			 view_state->vs_vop->vo_rotation,
			 v_ap,
			 axes_state->ax_model_size * INV_GED,
			 color_scheme->cs_model_axes,
			 color_scheme->cs_model_axes_label,
			 axes_state->ax_model_linewidth,
			 0, /* positive direction only */
			 0, /* three colors (i.e. X-red, Y-green, Z-blue) */
			 0, /* no ticks */
			 0, /* tick len */
			 0, /* major tick len */
			 0, /* tick interval */
			 0, /* ticks per major */
			 NULL, /* tick color */
			 NULL, /* major tick color */
			 0 /* tick threshold */);
}

void
draw_v_axes()
{
  point_t v_ap;			/* axes position in view coordinates */

  VSET(v_ap,
       axes_state->ax_view_pos[X] * INV_GED,
       axes_state->ax_view_pos[Y] * INV_GED / dmp->dm_aspect,
       0.0);

  dmo_drawAxes_cmd(dmp,
		   view_state->vs_vop->vo_size,
		   view_state->vs_vop->vo_rotation,
		   v_ap,
		   axes_state->ax_view_size * INV_GED,
		   color_scheme->cs_view_axes,
		   color_scheme->cs_view_axes_label,
		   axes_state->ax_view_linewidth,
		   0, /* positive direction only */
		   0, /* three colors (i.e. X-red, Y-green, Z-blue) */
		   0, /* no ticks */
		   0, /* tick len */
		   0, /* major tick len */
		   0, /* tick interval */
		   0, /* ticks per major */
		   NULL, /* tick color */
		   NULL, /* major tick color */
		   0 /* tick threshold */);
}
@


1.17
log
@change conf.h to a wrapped config.h
@
text
@@


1.16
log
@Bob Parker's view modifications, png framebuffer support, shaded drawing mode
@
text
@d24 5
a28 1
#include "conf.h"
@


1.15
log
@merge of ansi-6-0-branch into HEAD
@
text
@d20 1
a20 1
 *      This software is Copyright (C) 1998-2004 by the United States Army.
d41 1
a41 2
static void ax_set_dirty_flag(void);
static void draw_axes(fastf_t *vpos, fastf_t *rot_mat, fastf_t size, int *axes_color, int *label_color, int linewidth);
d80 1
a80 1
ax_set_dirty_flag(void)
a88 83
static void
draw_axes(fastf_t *vpos, fastf_t *rot_mat, fastf_t size, int *axes_color, int *label_color, int linewidth)
{
  register fastf_t half_size;			/* half the length of an axis */
  register fastf_t xlx, xly;			/* X axis label position */
  register fastf_t ylx, yly;			/* Y axis label position */
  register fastf_t zlx, zly;			/* Z axis label position */
  register fastf_t l_offset = 0.0078125;	/* axis label offset from axis endpoints */
  point_t v1, v2;
  point_t rv1, rv2;
  point_t o_rv2;

  half_size = size * 0.5;

  /* set axes color */
  DM_SET_FGCOLOR(dmp, axes_color[0], axes_color[1], axes_color[2], 1);

  /* set axes line width */
  DM_SET_LINE_ATTR(dmp, linewidth, 0);  /* solid lines */

  /* build X axis about view center */
  VSET(v1, -half_size, 0.0, 0.0);
  VSET(v2, half_size, 0.0, 0.0);

  /* rotate X axis into position */
  MAT4X3PNT(rv1, rot_mat, v1)
  MAT4X3PNT(rv2, rot_mat, v2);

  /* find the X axis label position about view center */
  VSET(v2, v2[X] + l_offset, v2[Y] + l_offset, v2[Z] + l_offset);
  MAT4X3PNT(o_rv2, rot_mat, v2);
  xlx = o_rv2[X];
  xly = o_rv2[Y];

  /* draw X axis with x/y offsets */
  DM_DRAW_LINE_2D(dmp, rv1[X] + vpos[X], (rv1[Y] + vpos[Y]) * dmp->dm_aspect,
		  rv2[X] + vpos[X], (rv2[Y] + vpos[Y]) * dmp->dm_aspect);

  /* build Y axis about view center */
  VSET(v1, 0.0, -half_size, 0.0);
  VSET(v2, 0.0, half_size, 0.0);

  /* rotate Y axis into position */
  MAT4X3PNT(rv1, rot_mat, v1)
  MAT4X3PNT(rv2, rot_mat, v2);

  /* find the Y axis label position about view center */
  VSET(v2, v2[X] + l_offset, v2[Y] + l_offset, v2[Z] + l_offset);
  MAT4X3PNT(o_rv2, rot_mat, v2);
  ylx = o_rv2[X];
  yly = o_rv2[Y];

  /* draw Y axis with x/y offsets */
  DM_DRAW_LINE_2D(dmp, rv1[X] + vpos[X], (rv1[Y] + vpos[Y]) * dmp->dm_aspect,
		  rv2[X] + vpos[X], (rv2[Y] + vpos[Y]) * dmp->dm_aspect);

  /* build Z axis about view center */
  VSET(v1, 0.0, 0.0, -half_size);
  VSET(v2, 0.0, 0.0, half_size);

  /* rotate Z axis into position */
  MAT4X3PNT(rv1, rot_mat, v1)
  MAT4X3PNT(rv2, rot_mat, v2);

  /* find the Z axis label position about view center */
  VSET(v2, v2[X] + l_offset, v2[Y] + l_offset, v2[Z] + l_offset);
  MAT4X3PNT(o_rv2, rot_mat, v2);
  zlx = o_rv2[X];
  zly = o_rv2[Y];

  /* draw Z axis with x/y offsets */
  DM_DRAW_LINE_2D(dmp, rv1[X] + vpos[X], (rv1[Y] + vpos[Y]) * dmp->dm_aspect,
		  rv2[X] + vpos[X], (rv2[Y] + vpos[Y]) * dmp->dm_aspect);

  /* set axes string color */
  DM_SET_FGCOLOR(dmp, label_color[0], label_color[1], label_color[2], 1);

  /* draw axes strings/labels with x/y offsets */
  DM_DRAW_STRING_2D(dmp, "X", xlx + vpos[X], xly + vpos[Y], 1, 1);
  DM_DRAW_STRING_2D(dmp, "Y", ylx + vpos[X], yly + vpos[Y], 1, 1);
  DM_DRAW_STRING_2D(dmp, "Z", zlx + vpos[X], zly + vpos[Y], 1, 1);
}

d90 1
a90 1
draw_e_axes(void)
d108 18
a125 6
	draw_axes(v_ap1,
		  view_state->vs_vop->vo_rotation,
		  axes_state->ax_edit_size1 * INV_GED,
		  color_scheme->cs_edit_axes1,
		  color_scheme->cs_edit_axes_label1,
		  axes_state->ax_edit_linewidth1);
d128 18
a145 6
	draw_axes(v_ap2,
		  rot_mat,
		  axes_state->ax_edit_size2 * INV_GED,
		  color_scheme->cs_edit_axes2,
		  color_scheme->cs_edit_axes_label2,
		  axes_state->ax_edit_linewidth2);
d149 1
a149 1
draw_m_axes(void)
d156 18
a173 6
	draw_axes(v_ap,
		  view_state->vs_vop->vo_rotation,
		  axes_state->ax_model_size * INV_GED,
		  color_scheme->cs_model_axes,
		  color_scheme->cs_model_axes_label,
		  axes_state->ax_model_linewidth);
d177 1
a177 1
draw_v_axes(void)
d186 18
a203 6
  draw_axes(v_ap,
	    view_state->vs_vop->vo_rotation,
	    axes_state->ax_view_size * INV_GED,
	    color_scheme->cs_view_axes,
	    color_scheme->cs_view_axes_label,
	    axes_state->ax_view_linewidth);
@


1.14
log
@update copyright to include span through 2003
@
text
@d41 2
a42 2
static void ax_set_dirty_flag();
static void draw_axes();
d81 1
a81 1
ax_set_dirty_flag()
d91 1
a91 7
draw_axes(vpos, rot_mat, size, axes_color, label_color, linewidth)
point_t vpos;
mat_t rot_mat;
fastf_t size;
int *axes_color;
int *label_color;
int linewidth;
d174 1
a174 1
draw_e_axes()
d209 1
a209 1
draw_m_axes()
d225 1
a225 1
draw_v_axes()
@


1.13
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d20 1
a20 1
 *      This software is Copyright (C) 1998 by the United States Army.
@


1.13.4.1
log
@sync to HEAD...
@
text
@d20 1
a20 1
 *      This software is Copyright (C) 1998-2004 by the United States Army.
@


1.13.10.1
log
@merge from HEAD
@
text
@d20 1
a20 1
 *      This software is Copyright (C) 1998-2004 by the United States Army.
@


1.13.2.1
log
@Initial ANSIfication
@
text
@d41 2
a42 2
static void ax_set_dirty_flag(void);
static void draw_axes(fastf_t *vpos, fastf_t *rot_mat, fastf_t size, int *axes_color, int *label_color, int linewidth);
d81 1
a81 1
ax_set_dirty_flag(void)
d91 7
a97 1
draw_axes(fastf_t *vpos, fastf_t *rot_mat, fastf_t size, int *axes_color, int *label_color, int linewidth)
d180 1
a180 1
draw_e_axes(void)
d215 1
a215 1
draw_m_axes(void)
d231 1
a231 1
draw_v_axes(void)
@


1.13.2.2
log
@sync branch with HEAD
@
text
@d20 1
a20 1
 *      This software is Copyright (C) 1998-2004 by the United States Army.
@


1.12
log
@Converted from K&R to ANSI C - RFH
@
text
@d41 2
a42 2
static void ax_set_dirty_flag(void);
static void draw_axes(fastf_t *vpos, fastf_t *rot_mat, fastf_t size, int *axes_color, int *label_color, int linewidth);
d81 1
a81 1
ax_set_dirty_flag(void)
d91 7
a97 1
draw_axes(fastf_t *vpos, fastf_t *rot_mat, fastf_t size, int *axes_color, int *label_color, int linewidth)
d180 1
a180 1
draw_e_axes(void)
d215 1
a215 1
draw_m_axes(void)
d231 1
a231 1
draw_v_axes(void)
@


1.11
log
@*- got rid of "#ifdef MGED_USE_VIEW_OBJ"
@
text
@d41 2
a42 2
static void ax_set_dirty_flag();
static void draw_axes();
d81 1
a81 1
ax_set_dirty_flag()
d91 1
a91 7
draw_axes(vpos, rot_mat, size, axes_color, label_color, linewidth)
point_t vpos;
mat_t rot_mat;
fastf_t size;
int *axes_color;
int *label_color;
int linewidth;
d174 1
a174 1
draw_e_axes()
d209 1
a209 1
draw_m_axes()
d225 1
a225 1
draw_v_axes()
@


1.10
log
@*- mods that reflect MGED's use of drawable geometry
   objects, database objects and view objects
@
text
@a185 1
#ifdef MGED_USE_VIEW_OBJ
a211 28
#else
  if(state == ST_S_EDIT){
    MAT4X3PNT(v_ap1, view_state->vs_model2view, e_axes_pos);
    MAT4X3PNT(v_ap2, view_state->vs_model2view, curr_e_axes_pos);
  }else if(state == ST_O_EDIT){
    point_t m_ap2;

    MAT4X3PNT(v_ap1, view_state->vs_model2view, es_keypoint);
    MAT4X3PNT(m_ap2, modelchanges, es_keypoint);
    MAT4X3PNT(v_ap2, view_state->vs_model2view, m_ap2);
  }else
    return;

  draw_axes(v_ap1,
	    view_state->vs_Viewrot,
	    axes_state->ax_edit_size1 * INV_GED,
	    color_scheme->cs_edit_axes1,
	    color_scheme->cs_edit_axes_label1,
	    axes_state->ax_edit_linewidth1);

  bn_mat_mul(rot_mat, view_state->vs_Viewrot, acc_rot_sol);
  draw_axes(v_ap2,
	    rot_mat,
	    axes_state->ax_edit_size2 * INV_GED,
	    color_scheme->cs_edit_axes2,
	    color_scheme->cs_edit_axes_label2,
	    axes_state->ax_edit_linewidth2);
#endif
a220 1
#ifdef MGED_USE_VIEW_OBJ
a227 9
#else
  MAT4X3PNT(v_ap, view_state->vs_model2view, m_ap);
  draw_axes(v_ap,
	    view_state->vs_Viewrot,
	    axes_state->ax_model_size * INV_GED,
	    color_scheme->cs_model_axes,
	    color_scheme->cs_model_axes_label,
	    axes_state->ax_model_linewidth);
#endif
a240 1
#ifdef MGED_USE_VIEW_OBJ
a241 3
#else
	    view_state->vs_Viewrot,
#endif
@


1.9
log
@*- use new structures
*- remove f_ax_set
*- set up to use rset
@
text
@d182 32
a213 4
  point_t v_ap1;                 /* axes position in view coordinates */
  point_t v_ap2;                 /* axes position in view coordinates */
  mat_t rot_mat;

d240 1
d246 2
a247 2
  point_t m_ap;			/* axes position in model coordinates, mm */
  point_t v_ap;			/* axes position in view coordinates */
d249 10
a258 1
  VSCALE(m_ap, axes_state->ax_model_pos, local2base);
d266 1
d280 3
d284 1
@


1.8
log
@*- use color scheme variables
@
text
@d40 2
d44 46
d187 2
a188 2
    MAT4X3PNT(v_ap1, model2view, e_axes_pos);
    MAT4X3PNT(v_ap2, model2view, curr_e_axes_pos);
d192 1
a192 1
    MAT4X3PNT(v_ap1, model2view, es_keypoint);
d194 1
a194 1
    MAT4X3PNT(v_ap2, model2view, m_ap2);
d199 5
a203 5
	    Viewrot,
	    mged_variables->e_axes_size1 * INV_GED,
	    color_scheme->edit_axes1,
	    color_scheme->edit_axes_label1,
	    mged_variables->e_axes_linewidth1);
d205 1
a205 1
  bn_mat_mul(rot_mat, Viewrot, acc_rot_sol);
d208 4
a211 4
	    mged_variables->e_axes_size2 * INV_GED,
	    color_scheme->edit_axes2,
	    color_scheme->edit_axes_label2,
	    mged_variables->e_axes_linewidth2);
d220 2
a221 2
  VSCALE(m_ap, mged_variables->m_axes_pos, local2base);
  MAT4X3PNT(v_ap, model2view, m_ap);
d223 5
a227 5
	    Viewrot,
	    mged_variables->m_axes_size * INV_GED,
	    color_scheme->model_axes,
	    color_scheme->model_axes_label,
	    mged_variables->m_axes_linewidth);
d236 2
a237 2
       mged_variables->v_axes_pos[X] * INV_GED,
       mged_variables->v_axes_pos[Y] * INV_GED / dmp->dm_aspect,
d241 5
a245 5
	    Viewrot,
	    mged_variables->v_axes_size * INV_GED,
	    color_scheme->view_axes,
	    color_scheme->view_axes_label,
	    mged_variables->v_axes_linewidth);
@


1.7
log
@Port to sun4.
@
text
@d153 2
a154 2
	    mged_variables->e_axes_color1,
	    mged_variables->e_axes_label_color1,
d161 2
a162 2
	    mged_variables->e_axes_color2,
	    mged_variables->e_axes_label_color2,
d177 2
a178 2
	    mged_variables->m_axes_color,
	    mged_variables->m_axes_label_color,
d195 2
a196 2
	    mged_variables->v_axes_color,
	    mged_variables->v_axes_label_color,
@


1.6
log
@*- change DM_SET_COLOR to DM_SET_FGCOLOR
@
text
@d42 1
a42 1
void
@


1.5
log
@*- mods to draw_v_axes()
@
text
@d63 1
a63 1
  DM_SET_COLOR(dmp, axes_color[0], axes_color[1], axes_color[2], 1);
d123 1
a123 1
  DM_SET_COLOR(dmp, label_color[0], label_color[1], label_color[2], 1);
@


1.4
log
@*- remove the following ifdefs:
	USE_FRAMEBUFFER, DO_SNAP_TO_GRID, DO_RUBBER_BAND, USE_RT_ASPECT
@
text
@d69 2
a70 2
  VSET(v1, -half_size, 0, 0);
  VSET(v2, half_size, 0, 0);
d87 2
a88 2
  VSET(v1, 0, -half_size, 0);
  VSET(v2, 0, half_size, 0);
d105 2
a106 2
  VSET(v1, 0, 0, -half_size);
  VSET(v2, 0, 0, half_size);
d189 1
a189 5
#if 0
       mged_variables->v_axes_pos[Y] * INV_GED * dmp->dm_aspect,
#else
       mged_variables->v_axes_pos[Y] * INV_GED,
#endif
d191 1
@


1.3
log
@*- mods for pjt demo
@
text
@a82 1
#ifdef USE_RT_ASPECT
a84 4
#else
  DM_DRAW_LINE_2D(dmp, rv1[X] + vpos[X], rv1[Y] + vpos[Y],
		  rv2[X] + vpos[X], rv2[Y] + vpos[Y]);
#endif
a100 1
#ifdef USE_RT_ASPECT
a102 4
#else
  DM_DRAW_LINE_2D(dmp, rv1[X] + vpos[X], rv1[Y] + vpos[Y],
		  rv2[X] + vpos[X], rv2[Y] + vpos[Y]);
#endif
a118 1
#ifdef USE_RT_ASPECT
a120 4
#else
  DM_DRAW_LINE_2D(dmp, rv1[X] + vpos[X], rv1[Y] + vpos[Y],
		  rv2[X] + vpos[X], rv2[Y] + vpos[Y]);
#endif
d189 1
d191 3
@


1.2
log
@*- mods to reflect MGED's notion of aspect ratio (.i.e now width/height)
@
text
@d204 1
a204 1
       mged_variables->v_axes_pos[Y] * INV_GED,
@


1.1
log
@Initial revision
@
text
@d83 4
d89 1
d106 4
d112 1
d129 4
d135 1
d167 1
a167 1
	    mged_variables->e_axes_size1 * INV_GED_FACTOR,
d175 1
a175 1
	    mged_variables->e_axes_size2 * INV_GED_FACTOR,
d191 1
a191 1
	    mged_variables->m_axes_size * INV_GED_FACTOR,
d203 2
a204 2
       mged_variables->v_axes_pos[X] * INV_GED_FACTOR,
       mged_variables->v_axes_pos[Y] * INV_GED_FACTOR,
d208 1
a208 1
	    mged_variables->v_axes_size * INV_GED_FACTOR,
@
