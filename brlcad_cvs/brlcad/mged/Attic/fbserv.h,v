head	1.6;
access;
symbols
	ansi-20040405-merged:1.4.2.1
	postmerge-20040405-ansi:1.5
	premerge-20040404-ansi:1.4
	postmerge-autoconf:1.4
	autoconf-freeze:1.4
	premerge-autoconf:1.4
	postmerge-20040315-windows:1.4
	premerge-20040315-windows:1.4
	windows-20040315-freeze:1.4
	autoconf-20031203:1.4
	autoconf-20031202:1.4
	autoconf-branch:1.4.0.10
	phong-branch:1.4.0.8
	photonmap-branch:1.4.0.6
	rel-6-1-DP:1.4
	windows-branch:1.4.0.4
	rel-6-0-2:1.2
	ansi-branch:1.4.0.2
	rel-6-0-1-branch:1.2.0.4
	hartley-6-0-post:1.3
	hartley-6-0-pre:1.2
	rel-6-0-1:1.2
	rel-6-0:1.2
	rel-5-4:1.2
	offsite-5-3-pre:1.2
	rel-5-3:1.2
	rel-5-2:1.2
	rel-5-1-branch:1.2.0.2
	rel-5-1:1.2
	rel-5-0:1.2
	rel-5-0-beta:1.2;
locks; strict;
comment	@ * @;


1.6
date	2004.05.21.17.47.43;	author morrison;	state dead;
branches;
next	1.5;

1.5
date	2004.04.05.09.09.11;	author morrison;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.20.17.08.23;	author jra;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2002.08.15.20.55.35;	author hartley;	state Exp;
branches;
next	1.2;

1.2
date	98.06.27.04.29.19;	author mike;	state Exp;
branches;
next	1.1;

1.1
date	98.03.06.22.45.18;	author bparker;	state Exp;
branches;
next	;

1.4.2.1
date	2002.09.19.18.02.02;	author morrison;	state Exp;
branches;
next	;


desc
@Header file for fbserv.c
@


1.6
log
@moved to src/mged/
@
text
@/*
 * Package Handlers.
 */
void	pkgfoo(struct pkg_conn *pcp, char *buf);	/* foobar message handler */
void	rfbopen(struct pkg_conn *pcp, char *buf), rfbclose(struct pkg_conn *pcp, char *buf), rfbclear(struct pkg_conn *pcp, char *buf), rfbread(struct pkg_conn *pcp, char *buf), rfbwrite(struct pkg_conn *pcp, char *buf);
void	rfbcursor(struct pkg_conn *pcp, char *buf), rfbgetcursor(struct pkg_conn *pcp, char *buf);
void	rfbrmap(struct pkg_conn *pcp, char *buf), rfbwmap(struct pkg_conn *pcp, char *buf);
void	rfbhelp(struct pkg_conn *pcp, char *buf);
void	rfbreadrect(struct pkg_conn *pcp, char *buf), rfbwriterect(struct pkg_conn *pcp, char *buf);
void	rfbbwreadrect(struct pkg_conn *pcp, char *buf), rfbbwwriterect(struct pkg_conn *pcp, char *buf);
void	rfbpoll(struct pkg_conn *pcp, char *buf), rfbflush(struct pkg_conn *pcp, char *buf), rfbfree(struct pkg_conn *pcp, char *buf);
void	rfbview(struct pkg_conn *pcp, char *buf), rfbgetview(struct pkg_conn *pcp, char *buf);
void	rfbsetcursor(struct pkg_conn *pcp, char *buf);
/* Old Routines */
void	rfbscursor(struct pkg_conn *pcp, char *buf), rfbwindow(struct pkg_conn *pcp, char *buf), rfbzoom(struct pkg_conn *pcp, char *buf);

static struct pkg_switch pkg_switch[] = {
	{ MSG_FBOPEN,		rfbopen,	"Open Framebuffer" },
	{ MSG_FBCLOSE,		rfbclose,	"Close Framebuffer" },
	{ MSG_FBCLEAR,		rfbclear,	"Clear Framebuffer" },
	{ MSG_FBREAD,		rfbread,	"Read Pixels" },
	{ MSG_FBWRITE,		rfbwrite,	"Write Pixels" },
	{ MSG_FBWRITE + MSG_NORETURN,	rfbwrite,	"Asynch write" },
	{ MSG_FBCURSOR,		rfbcursor,	"Cursor" },
	{ MSG_FBGETCURSOR,	rfbgetcursor,	"Get Cursor" },	   /*NEW*/
	{ MSG_FBSCURSOR,	rfbscursor,	"Screen Cursor" }, /*OLD*/
	{ MSG_FBWINDOW,		rfbwindow,	"Window" },	   /*OLD*/
	{ MSG_FBZOOM,		rfbzoom,	"Zoom" },	   /*OLD*/
	{ MSG_FBVIEW,		rfbview,	"View" },	   /*NEW*/
	{ MSG_FBGETVIEW,	rfbgetview,	"Get View" },	   /*NEW*/
	{ MSG_FBRMAP,		rfbrmap,	"R Map" },
	{ MSG_FBWMAP,		rfbwmap,	"W Map" },
	{ MSG_FBHELP,		rfbhelp,	"Help Request" },
	{ MSG_ERROR,		pkgfoo,		"Error Message" },
	{ MSG_CLOSE,		pkgfoo,		"Close Connection" },
	{ MSG_FBREADRECT, 	rfbreadrect,	"Read Rectangle" },
	{ MSG_FBWRITERECT,	rfbwriterect,	"Write Rectangle" },
	{ MSG_FBWRITERECT + MSG_NORETURN, rfbwriterect,"Write Rectangle" },
	{ MSG_FBBWREADRECT, 	rfbbwreadrect,"Read BW Rectangle" },
	{ MSG_FBBWWRITERECT,	rfbbwwriterect,"Write BW Rectangle" },
	{ MSG_FBBWWRITERECT+MSG_NORETURN, rfbbwwriterect,"Write BW Rectangle" },
	{ MSG_FBFLUSH,		rfbflush,	"Flush Output" },
	{ MSG_FBFLUSH + MSG_NORETURN, rfbflush, "Flush Output" },
	{ MSG_FBFREE,		rfbfree,	"Free Resources" },
	{ MSG_FBPOLL,		rfbpoll,	"Handle Events" },
	{ MSG_FBSETCURSOR,	rfbsetcursor,	"Set Cursor Shape" },
	{ MSG_FBSETCURSOR + MSG_NORETURN, rfbsetcursor, "Set Cursor Shape" },
	{ 0,			NULL,		NULL }
};
@


1.5
log
@merge of ansi-6-0-branch into HEAD
@
text
@@


1.4
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d4 10
a13 10
void	pkgfoo();	/* foobar message handler */
void	rfbopen(), rfbclose(), rfbclear(), rfbread(), rfbwrite();
void	rfbcursor(), rfbgetcursor();
void	rfbrmap(), rfbwmap();
void	rfbhelp();
void	rfbreadrect(), rfbwriterect();
void	rfbbwreadrect(), rfbbwwriterect();
void	rfbpoll(), rfbflush(), rfbfree();
void	rfbview(), rfbgetview();
void	rfbsetcursor();
d15 1
a15 1
void	rfbscursor(), rfbwindow(), rfbzoom();
@


1.4.2.1
log
@Initial ANSIfication
@
text
@d4 10
a13 10
void	pkgfoo(struct pkg_conn *pcp, char *buf);	/* foobar message handler */
void	rfbopen(struct pkg_conn *pcp, char *buf), rfbclose(struct pkg_conn *pcp, char *buf), rfbclear(struct pkg_conn *pcp, char *buf), rfbread(struct pkg_conn *pcp, char *buf), rfbwrite(struct pkg_conn *pcp, char *buf);
void	rfbcursor(struct pkg_conn *pcp, char *buf), rfbgetcursor(struct pkg_conn *pcp, char *buf);
void	rfbrmap(struct pkg_conn *pcp, char *buf), rfbwmap(struct pkg_conn *pcp, char *buf);
void	rfbhelp(struct pkg_conn *pcp, char *buf);
void	rfbreadrect(struct pkg_conn *pcp, char *buf), rfbwriterect(struct pkg_conn *pcp, char *buf);
void	rfbbwreadrect(struct pkg_conn *pcp, char *buf), rfbbwwriterect(struct pkg_conn *pcp, char *buf);
void	rfbpoll(struct pkg_conn *pcp, char *buf), rfbflush(struct pkg_conn *pcp, char *buf), rfbfree(struct pkg_conn *pcp, char *buf);
void	rfbview(struct pkg_conn *pcp, char *buf), rfbgetview(struct pkg_conn *pcp, char *buf);
void	rfbsetcursor(struct pkg_conn *pcp, char *buf);
d15 1
a15 1
void	rfbscursor(struct pkg_conn *pcp, char *buf), rfbwindow(struct pkg_conn *pcp, char *buf), rfbzoom(struct pkg_conn *pcp, char *buf);
@


1.3
log
@Converted from K&R to ANSI C - RFH
@
text
@d4 10
a13 10
void	pkgfoo(struct pkg_conn *pcp, char *buf);	/* foobar message handler */
void	rfbopen(struct pkg_conn *pcp, char *buf), rfbclose(struct pkg_conn *pcp, char *buf), rfbclear(struct pkg_conn *pcp, char *buf), rfbread(struct pkg_conn *pcp, char *buf), rfbwrite(struct pkg_conn *pcp, char *buf);
void	rfbcursor(struct pkg_conn *pcp, char *buf), rfbgetcursor(struct pkg_conn *pcp, char *buf);
void	rfbrmap(struct pkg_conn *pcp, char *buf), rfbwmap(struct pkg_conn *pcp, char *buf);
void	rfbhelp(struct pkg_conn *pcp, char *buf);
void	rfbreadrect(struct pkg_conn *pcp, char *buf), rfbwriterect(struct pkg_conn *pcp, char *buf);
void	rfbbwreadrect(struct pkg_conn *pcp, char *buf), rfbbwwriterect(struct pkg_conn *pcp, char *buf);
void	rfbpoll(struct pkg_conn *pcp, char *buf), rfbflush(struct pkg_conn *pcp, char *buf), rfbfree(struct pkg_conn *pcp, char *buf);
void	rfbview(struct pkg_conn *pcp, char *buf), rfbgetview(struct pkg_conn *pcp, char *buf);
void	rfbsetcursor(struct pkg_conn *pcp, char *buf);
d15 1
a15 1
void	rfbscursor(struct pkg_conn *pcp, char *buf), rfbwindow(struct pkg_conn *pcp, char *buf), rfbzoom(struct pkg_conn *pcp, char *buf);
@


1.2
log
@Additions to LIBFB interface and remote framebuffer protocol to
read and write monochrome rectangles.
Particularly important for sending thermal images at high speed.
@
text
@d4 10
a13 10
void	pkgfoo();	/* foobar message handler */
void	rfbopen(), rfbclose(), rfbclear(), rfbread(), rfbwrite();
void	rfbcursor(), rfbgetcursor();
void	rfbrmap(), rfbwmap();
void	rfbhelp();
void	rfbreadrect(), rfbwriterect();
void	rfbbwreadrect(), rfbbwwriterect();
void	rfbpoll(), rfbflush(), rfbfree();
void	rfbview(), rfbgetview();
void	rfbsetcursor();
d15 1
a15 1
void	rfbscursor(), rfbwindow(), rfbzoom();
@


1.1
log
@Initial revision
@
text
@d10 1
d39 3
@
