head	1.9;
access;
symbols
	ansi-20040405-merged:1.5.4.1
	postmerge-20040405-ansi:1.7
	premerge-20040404-ansi:1.7
	postmerge-autoconf:1.7
	autoconf-freeze:1.6.6.1
	premerge-autoconf:1.7
	postmerge-20040315-windows:1.7
	premerge-20040315-windows:1.7
	windows-20040315-freeze:1.5.6.1
	autoconf-20031203:1.6
	autoconf-20031202:1.6
	autoconf-branch:1.6.0.6
	phong-branch:1.6.0.4
	photonmap-branch:1.6.0.2
	rel-6-1-DP:1.5
	windows-branch:1.5.0.6
	rel-6-0-2:1.5
	ansi-branch:1.5.0.4
	rel-6-0-1-branch:1.5.0.2
	hartley-6-0-post:1.5
	hartley-6-0-pre:1.5
	rel-6-0-1:1.5
	rel-6-0:1.5
	rel-5-4:1.1.2.2
	offsite-5-3-pre:1.2
	rel-5-3:1.1.2.2
	rel-5-1-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.9
date	2004.05.21.17.47.51;	author morrison;	state dead;
branches;
next	1.8;

1.8
date	2004.05.10.15.30.48;	author erikg;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.02.17.39.35;	author morrison;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.02.15.29.25;	author jra;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2001.10.17.07.40.05;	author morrison;	state Exp;
branches
	1.5.4.1
	1.5.6.1;
next	1.4;

1.4
date	2001.04.03.19.02.23;	author bparker;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.02.18.10.11;	author jra;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.22.00.31.02;	author bparker;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.21.23.41.50;	author bparker;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.12.21.23.41.50;	author bparker;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2000.12.22.00.28.45;	author bparker;	state Exp;
branches;
next	;

1.5.4.1
date	2004.03.17.21.22.05;	author morrison;	state Exp;
branches;
next	;

1.5.6.1
date	2004.03.11.23.46.37;	author morrison;	state Exp;
branches;
next	;

1.6.6.1
date	2004.02.12.18.34.16;	author erikg;	state Exp;
branches;
next	;


desc
@@


1.9
log
@moved to src/mged/
@
text
@/*
 *                           U P D A T E . C
 *
 *  Author -
 *	Bob Parker
 *
 *  Functions -
 *      mged_update	- turns the Tcl crank via event_check, then calls refresh
 *	f_update	- Tcl wrapper for mged_update
 *	f_wait		- modified version of tkwait
 *
 *  Source -
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1995-2004 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif


#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#ifdef DM_X
#  include "tk.h"
#else
#  include "tcl.h"
#endif

#include "machine.h"
#include "bu.h"

/* defined in ged.c */
extern void refresh();
extern int event_check();

extern Tk_Window tkwin;

void
mged_update(int	non_blocking)
{
	if (non_blocking >= 0)
		event_check(non_blocking);
	refresh();
}

int
f_update(ClientData	clientData,
	 Tcl_Interp	*interp,
	 int		argc,
	 char		**argv)
{
	int non_blocking;

	if (argc != 2 || sscanf(argv[1], "%d", &non_blocking) != 1) {
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helpdevel mged_update");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	mged_update(non_blocking);

	return TCL_OK;
}


/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static char *
WaitVariableProc(ClientData	clientData,	/* Pointer to integer to set to 1. */
		 Tcl_Interp	*interp,	/* Interpreter containing variable. */
		 char		*name1,		/* Name of variable. */
		 char		*name2,		/* Second part of variable name. */
		 int		flags)		/* Information about what happened. */
{
	int *donePtr = (int *) clientData;

	*donePtr = 1;
	return (char *) NULL;
}


/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static void
WaitVisibilityProc(ClientData	clientData,	/* Pointer to integer to set to 1. */
		   XEvent	*eventPtr)	/* Information about event (not used). */
{
	int *donePtr = (int *) clientData;

	if (eventPtr->type == VisibilityNotify) {
		*donePtr = 1;
	}
	if (eventPtr->type == DestroyNotify) {
		*donePtr = 2;
	}
}

/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static void
WaitWindowProc(ClientData	clientData,	/* Pointer to integer to set to 1. */
	       XEvent		*eventPtr)	/* Information about event. */
{
	int *donePtr = (int *) clientData;

	if (eventPtr->type == DestroyNotify) {
		*donePtr = 1;
	}
}

/*
 * This procedure is a slightly modified version of the Tk_TkwaitCmd.
 * It was modified to use mged_update so that the geometry windows
 * would get refreshed.
 */
int
f_wait(ClientData	clientData,	/* Main window associated with interpreter. */
       Tcl_Interp	*interp,	/* Current interpreter. */
       int		argc,		/* Number of arguments. */
       char		**argv)		/* Argument strings. */
{
#if 0
	Tk_Window tkwin = (Tk_Window) clientData;
#endif
	int c, done;
	size_t length;

	if (argc != 3) {
		Tcl_AppendResult(interp, "wrong # args: should be \"",
				 argv[0], " variable|visibility|window name\"", (char *) NULL);
		return TCL_ERROR;
	}
	c = argv[1][0];
	length = strlen(argv[1]);
	if ((c == 'v') && (strncmp(argv[1], "variable", length) == 0)
	    && (length >= 2)) {
		if (Tcl_TraceVar(interp, argv[2],
				 TCL_GLOBAL_ONLY|TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
				 (Tcl_VarTraceProc *)WaitVariableProc,
				 (ClientData) &done) != TCL_OK) {
			return TCL_ERROR;
		}
		done = 0;
		while (!done) {
			mged_update(0);
		}
		Tcl_UntraceVar(interp, argv[2],
			       TCL_GLOBAL_ONLY|TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
			       (Tcl_VarTraceProc *)WaitVariableProc,
			       (ClientData) &done);
	} else if ((c == 'v') && (strncmp(argv[1], "visibility", length) == 0)
		   && (length >= 2)) {
		Tk_Window window;

		window = Tk_NameToWindow(interp, argv[2], tkwin);
		if (window == NULL) {
			return TCL_ERROR;
		}
		Tk_CreateEventHandler(window, VisibilityChangeMask|StructureNotifyMask,
				      WaitVisibilityProc, (ClientData) &done);
		done = 0;
		while (!done) {
			mged_update(0);
		}
		if (done != 1) {
			/*
			 * Note that we do not delete the event handler because it
			 * was deleted automatically when the window was destroyed.
			 */

			Tcl_ResetResult(interp);
			Tcl_AppendResult(interp, "window \"", argv[2],
					 "\" was deleted before its visibility changed",
					 (char *) NULL);
			return TCL_ERROR;
		}
		Tk_DeleteEventHandler(window, VisibilityChangeMask|StructureNotifyMask,
				      WaitVisibilityProc, (ClientData) &done);
	} else if ((c == 'w') && (strncmp(argv[1], "window", length) == 0)) {
		Tk_Window window;

		window = Tk_NameToWindow(interp, argv[2], tkwin);
		if (window == NULL) {
			return TCL_ERROR;
		}
		Tk_CreateEventHandler(window, StructureNotifyMask,
				      WaitWindowProc, (ClientData) &done);
		done = 0;
		while (!done) {
			mged_update(0);
		}
		/*
		 * Note:  there's no need to delete the event handler.  It was
		 * deleted automatically when the window was destroyed.
		 */
	} else {
		Tcl_AppendResult(interp, "bad option \"", argv[1],
				 "\": must be variable, visibility, or window", (char *) NULL);
		return TCL_ERROR;
	}

	/*
	 * Clear out the interpreter's result, since it may have been set
	 * by event handlers.
	 */

	Tcl_ResetResult(interp);
	return TCL_OK;
}
@


1.8
log
@change conf.h to a wrapped config.h
@
text
@@


1.7
log
@update copyright to include span through 2003
@
text
@d26 5
a30 1
#include "conf.h"
@


1.6
log
@Added some casts to quiet the compiler
@
text
@d22 1
a22 1
 *	This software is Copyright (C) 1995 by the United States Army
@


1.6.6.1
log
@merge from HEAD
@
text
@d22 1
a22 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
@


1.5
log
@Mac OS X warning and error fixes for non-production build
@
text
@d159 2
a160 1
				 WaitVariableProc, (ClientData) &done) != TCL_OK) {
d169 2
a170 1
			       WaitVariableProc, (ClientData) &done);
@


1.5.4.1
log
@sync branch with HEAD
@
text
@d22 1
a22 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
d159 1
a159 2
				 (Tcl_VarTraceProc *)WaitVariableProc,
				 (ClientData) &done) != TCL_OK) {
d168 1
a168 2
			       (Tcl_VarTraceProc *)WaitVariableProc,
			       (ClientData) &done);
@


1.5.6.1
log
@sync to HEAD...
@
text
@d22 1
a22 1
 *	This software is Copyright (C) 1995-2004 by the United States Army
d159 1
a159 2
				 (Tcl_VarTraceProc *)WaitVariableProc,
				 (ClientData) &done) != TCL_OK) {
d168 1
a168 2
			       (Tcl_VarTraceProc *)WaitVariableProc,
			       (ClientData) &done);
@


1.4
log
@*- get rid of warnings
@
text
@d33 5
a37 1
#include "tk.h"
@


1.3
log
@Lint
@
text
@d38 4
d45 1
a45 2
mged_update(non_blocking)
int non_blocking;
d47 3
a49 3
  if(non_blocking >= 0)
    event_check(non_blocking);
  refresh();
d53 4
a56 5
f_update(clientData, interp, argc, argv)
	ClientData clientData;
	Tcl_Interp *interp;
	int     argc;
	char    **argv;
d60 1
a60 1
	if(argc != 2 || sscanf(argv[1], "%d", &non_blocking) != 1){
d81 5
a85 6
WaitVariableProc(clientData, interp, name1, name2, flags)
     ClientData clientData;	/* Pointer to integer to set to 1. */
     Tcl_Interp *interp;		/* Interpreter containing variable. */
     char *name1;		/* Name of variable. */
     char *name2;		/* Second part of variable name. */
     int flags;			/* Information about what happened. */
d99 2
a100 3
WaitVisibilityProc(clientData, eventPtr)
     ClientData clientData;	/* Pointer to integer to set to 1. */
     XEvent *eventPtr;		/* Information about event (not used). */
d117 2
a118 3
WaitWindowProc(clientData, eventPtr)
     ClientData clientData;	/* Pointer to integer to set to 1. */
     XEvent *eventPtr;		/* Information about event. */
d133 4
a136 6
f_wait(clientData, interp, argc, argv)
     ClientData clientData;	/* Main window associated with
				 * interpreter. */
     Tcl_Interp *interp;	/* Current interpreter. */
     int argc;			/* Number of arguments. */
     char **argv;		/* Argument strings. */
@


1.2
log
@Utilities for updating the geometry
windows from within a script.
@
text
@d26 7
@


1.1
log
@file update.c was initially added on branch rel-5-1-patches.
@
text
@d1 219
@


1.1.2.1
log
@Contains utilities for updating the geometry
windows while inside a script (i.e. mged_update, mged_wait).
@
text
@a0 219
/*
 *                           U P D A T E . C
 *
 *  Author -
 *	Bob Parker
 *
 *  Functions -
 *      mged_update	- turns the Tcl crank via event_check, then calls refresh
 *	f_update	- Tcl wrapper for mged_update
 *	f_wait		- modified version of tkwait
 *
 *  Source -
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005
 *  
 *  Distribution Notice -
 *	Re-distribution of this software is restricted, as described in
 *	your "Statement of Terms and Conditions for the Release of
 *	The BRL-CAD Package" agreement.
 *
 *  Copyright Notice -
 *	This software is Copyright (C) 1995 by the United States Army
 *	in all countries except the USA.  All rights reserved.
 */

#include "tk.h"

#include "machine.h"
#include "bu.h"

extern Tk_Window tkwin;

void
mged_update(non_blocking)
int non_blocking;
{
  if(non_blocking >= 0)
    event_check(non_blocking);
  refresh();
}

int
f_update(clientData, interp, argc, argv)
	ClientData clientData;
	Tcl_Interp *interp;
	int     argc;
	char    **argv;
{
	int non_blocking;

	if(argc != 2 || sscanf(argv[1], "%d", &non_blocking) != 1){
		struct bu_vls vls;

		bu_vls_init(&vls);
		bu_vls_printf(&vls, "helpdevel mged_update");
		Tcl_Eval(interp, bu_vls_addr(&vls));
		bu_vls_free(&vls);
		return TCL_ERROR;
	}

	mged_update(non_blocking);

	return TCL_OK;
}


/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static char *
WaitVariableProc(clientData, interp, name1, name2, flags)
     ClientData clientData;	/* Pointer to integer to set to 1. */
     Tcl_Interp *interp;		/* Interpreter containing variable. */
     char *name1;		/* Name of variable. */
     char *name2;		/* Second part of variable name. */
     int flags;			/* Information about what happened. */
{
	int *donePtr = (int *) clientData;

	*donePtr = 1;
	return (char *) NULL;
}


/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static void
WaitVisibilityProc(clientData, eventPtr)
     ClientData clientData;	/* Pointer to integer to set to 1. */
     XEvent *eventPtr;		/* Information about event (not used). */
{
	int *donePtr = (int *) clientData;

	if (eventPtr->type == VisibilityNotify) {
		*donePtr = 1;
	}
	if (eventPtr->type == DestroyNotify) {
		*donePtr = 2;
	}
}

/*
 * Copied from libtk/generic/tkCmds.c. Used by
 * the f_wait() procedure.
 */
static void
WaitWindowProc(clientData, eventPtr)
     ClientData clientData;	/* Pointer to integer to set to 1. */
     XEvent *eventPtr;		/* Information about event. */
{
	int *donePtr = (int *) clientData;

	if (eventPtr->type == DestroyNotify) {
		*donePtr = 1;
	}
}

/*
 * This procedure is a slightly modified version of the Tk_TkwaitCmd.
 * It was modified to use mged_update so that the geometry windows
 * would get refreshed.
 */
int
f_wait(clientData, interp, argc, argv)
     ClientData clientData;	/* Main window associated with
				 * interpreter. */
     Tcl_Interp *interp;	/* Current interpreter. */
     int argc;			/* Number of arguments. */
     char **argv;		/* Argument strings. */
{
#if 0
	Tk_Window tkwin = (Tk_Window) clientData;
#endif
	int c, done;
	size_t length;

	if (argc != 3) {
		Tcl_AppendResult(interp, "wrong # args: should be \"",
				 argv[0], " variable|visibility|window name\"", (char *) NULL);
		return TCL_ERROR;
	}
	c = argv[1][0];
	length = strlen(argv[1]);
	if ((c == 'v') && (strncmp(argv[1], "variable", length) == 0)
	    && (length >= 2)) {
		if (Tcl_TraceVar(interp, argv[2],
				 TCL_GLOBAL_ONLY|TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
				 WaitVariableProc, (ClientData) &done) != TCL_OK) {
			return TCL_ERROR;
		}
		done = 0;
		while (!done) {
			mged_update(1);
		}
		Tcl_UntraceVar(interp, argv[2],
			       TCL_GLOBAL_ONLY|TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
			       WaitVariableProc, (ClientData) &done);
	} else if ((c == 'v') && (strncmp(argv[1], "visibility", length) == 0)
		   && (length >= 2)) {
		Tk_Window window;

		window = Tk_NameToWindow(interp, argv[2], tkwin);
		if (window == NULL) {
			return TCL_ERROR;
		}
		Tk_CreateEventHandler(window, VisibilityChangeMask|StructureNotifyMask,
				      WaitVisibilityProc, (ClientData) &done);
		done = 0;
		while (!done) {
			mged_update(1);
		}
		if (done != 1) {
			/*
			 * Note that we do not delete the event handler because it
			 * was deleted automatically when the window was destroyed.
			 */

			Tcl_ResetResult(interp);
			Tcl_AppendResult(interp, "window \"", argv[2],
					 "\" was deleted before its visibility changed",
					 (char *) NULL);
			return TCL_ERROR;
		}
		Tk_DeleteEventHandler(window, VisibilityChangeMask|StructureNotifyMask,
				      WaitVisibilityProc, (ClientData) &done);
	} else if ((c == 'w') && (strncmp(argv[1], "window", length) == 0)) {
		Tk_Window window;

		window = Tk_NameToWindow(interp, argv[2], tkwin);
		if (window == NULL) {
			return TCL_ERROR;
		}
		Tk_CreateEventHandler(window, StructureNotifyMask,
				      WaitWindowProc, (ClientData) &done);
		done = 0;
		while (!done) {
			mged_update(1);
		}
		/*
		 * Note:  there's no need to delete the event handler.  It was
		 * deleted automatically when the window was destroyed.
		 */
	} else {
		Tcl_AppendResult(interp, "bad option \"", argv[1],
				 "\": must be variable, visibility, or window", (char *) NULL);
		return TCL_ERROR;
	}

	/*
	 * Clear out the interpreter's result, since it may have been set
	 * by event handlers.
	 */

	Tcl_ResetResult(interp);
	return TCL_OK;
}
@


1.1.2.2
log
@OOPS, call mged_update(0) so that it blocks
@
text
@d156 1
a156 1
			mged_update(0);
d173 1
a173 1
			mged_update(0);
d200 1
a200 1
			mged_update(0);
@


