head	11.6;
access;
symbols
	ansi-20040405-merged:11.4.2.1
	postmerge-20040405-ansi:11.5
	premerge-20040404-ansi:11.4
	postmerge-autoconf:11.4
	autoconf-freeze:11.4
	premerge-autoconf:11.4
	postmerge-20040315-windows:11.4
	premerge-20040315-windows:11.4
	windows-20040315-freeze:11.4
	autoconf-20031203:11.4
	autoconf-20031202:11.4
	autoconf-branch:11.4.0.10
	phong-branch:11.4.0.8
	photonmap-branch:11.4.0.6
	rel-6-1-DP:11.4
	windows-branch:11.4.0.4
	rel-6-0-2:11.2
	ansi-branch:11.4.0.2
	rel-6-0-1-branch:11.2.0.2
	hartley-6-0-post:11.3
	hartley-6-0-pre:11.2
	rel-6-0-1:11.2
	rel-6-0:11.2
	rel-5-4:11.1
	offsite-5-3-pre:11.1
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.6
date	2004.05.21.16.45.05;	author morrison;	state dead;
branches;
next	11.5;

11.5
date	2004.04.05.05.46.00;	author morrison;	state Exp;
branches;
next	11.4;

11.4
date	2002.08.20.17.08.43;	author jra;	state Exp;
branches
	11.4.2.1;
next	11.3;

11.3
date	2002.08.15.20.55.54;	author hartley;	state Exp;
branches;
next	11.2;

11.2
date	2001.08.21.18.20.40;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.19.15;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	93.10.26.03.14.23;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.51.10;	author mike;	state Rel4_0;
branches;
next	1.2;

1.2
date	91.07.02.02.15.57;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	90.10.25.20.13.50;	author butler;	state Exp;
branches;
next	;

11.4.2.1
date	2002.09.19.18.02.24;	author morrison;	state Exp;
branches;
next	;


desc
@safety check in
@


11.6
log
@moved to src/sig/
@
text
@/*
 *			H A M W I N
 *
 *  Apply a Hamming Window to the given samples.
 *  Precomputes the window function.
 */
#include <stdlib.h>
#include <stdio.h>	/* for stderr */
#include <math.h>	/* for double sin(), cos() */
#include "./complex.h"

int init_hamwintab( int size );

static int	_init_length = 0;	/* Internal: last initialized size */
static int	maxinitlen = 0;
static double	*hamwintab = NULL;

void
hamwin(double *data, int length)
{
	int	i;

	/* Check for window table initialization */
	if( length != _init_length ) {
		if( init_hamwintab( length ) == 0 ) {
			/* Can't do requested size */
			return;
		}
	}

	/* Do window - could use pointers here... */
	for( i = 0; i < length; i++ ) {
		data[i] *= hamwintab[i];
	}
}

/*
 * Complex Data Version.
 */
void
chamwin(COMPLEX *data, int length)
{
	int	i;

	/* Check for window table initialization */
	if( length != _init_length ) {
		if( init_hamwintab( length ) == 0 ) {
			/* Can't do requested size */
			return;
		}
	}

	/* Do window - could use pointers here... */
	for( i = 0; i < length; i++ ) {
		data[i].re *= hamwintab[i];
	}
}

/*
 *		I N I T _ H A M W I N T A B
 *
 *  Internal routine to initialize the hamming window table
 *  of a given length.
 *  Returns zero on failure.
 */
int
init_hamwintab(int size)
{
	int	i;
	double	theta;

	if( size > maxinitlen ) {
		if( hamwintab != NULL ) {
			free( hamwintab );
			maxinitlen = 0;
		}
		if( (hamwintab = (double *)malloc(size*sizeof(double))) == NULL ) {
			fprintf( stderr, "coswin: couldn't malloc space for %d elements\n", size );
			return( 0 );
		}
		maxinitlen = size;
	}

	/* Check for odd lengths? XXX */

	/*
	 * Size is okay.  Set up tables.
	 */
	for( i = 0; i < size; i++ ) {
		theta = TWOPI * i / (double)(size);
		hamwintab[ i ] = 0.54 - 0.46 * cos( theta );
	}

	/*
	 * Mark size and return success.
	 */
	_init_length = size;
	return( 1 );
}
@


11.5
log
@merge of ansi-6-0-branch into head
@
text
@@


11.4
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d19 1
a19 3
hamwin( data, length )
double	*data;
int	length;
d41 1
a41 3
chamwin( data, length )
COMPLEX	*data;
int	length;
d67 1
a67 2
init_hamwintab( size )
int size;
@


11.4.2.1
log
@Initial ANSIfication
@
text
@d19 3
a21 1
hamwin(double *data, int length)
d43 3
a45 1
chamwin(COMPLEX *data, int length)
d71 2
a72 1
init_hamwintab(int size)
@


11.3
log
@Converted from K&R to ANSI C - RFH
@
text
@d19 3
a21 1
hamwin(double *data, int length)
d43 3
a45 1
chamwin(COMPLEX *data, int length)
d71 2
a72 1
init_hamwintab(int size)
@


11.2
log
@Added include of stdlib.h and declaration of init_hamwintab()
@
text
@d19 1
a19 3
hamwin( data, length )
double	*data;
int	length;
d41 1
a41 3
chamwin( data, length )
COMPLEX	*data;
int	length;
d67 1
a67 2
init_hamwintab( size )
int size;
@


11.1
log
@Release_4.4
@
text
@d7 1
d11 2
@


10.2
log
@ANSI C
@
text
@@


10.1
log
@Release_4.0
@
text
@d15 1
d39 1
d67 1
@


1.2
log
@Minor nits
@
text
@@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#include "complex.h"
@
