head	11.9;
access;
symbols
	ansi-20040405-merged:11.6.2.1
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.6
	premerge-autoconf:11.6
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.6
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.2
	offsite-5-3-pre:11.2
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.21.16.45.04;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.05.45.59;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.08.43;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	2002.08.15.20.55.54;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.21.18.29.10;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	2001.08.10.21.22.45;	author morrison;	state Exp;
branches;
next	11.2;

11.2
date	96.07.17.14.15.11;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.19.07;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.12.30.03.31.58;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.23.18.13.21;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.51.02;	author mike;	state Rel4_0;
branches;
next	1.2;

1.2
date	91.07.02.02.15.46;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	90.10.25.20.13.33;	author butler;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.02.20;	author morrison;	state Exp;
branches;
next	;


desc
@safety check in
@


11.9
log
@moved to src/sig/
@
text
@/*
 *			D C O N V . C
 *
 *  Fast FFT based convolution
 *
 *  This uses the overlap-save method to achieve a linear convolution
 *  (straight FFT's give you a circular convolution).
 *  An M-point kernel is convolved with N-point sequences (in xform space).
 *  The first M-1 points are incorrect, while the remaining points yield
 *  a true linear convolution.  Thus the first M-1 points of each xform
 *  are thrown away, while the last M-1 points of each input section
 *  are saved for the next xform.
 */
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "machine.h"

#define	MAXM	4096

void	rfft256();
void	rfft();
void	irfft256();
void	irfft();

double	savebuffer[MAXM-1];
double	xbuf[2*MAXM];
double	ibuf[2*MAXM];		/* impulse response */

void	mult(double *o, double *b, int n);

static char usage[] = "\
Usage: dconv filter < doubles > doubles\n\
 XXX Warning: kernal size must be 2^i - 1\n";

int main(int argc, char **argv)
{
	int	i;
	int	N, M, L;
	FILE	*fp;

	M = 128;	/* kernel size */
	N = 2*M;	/* input sub-section length (fft size) */
	L = N - M + 1;	/* number of "good" points per section */

	if( argc != 2 || isatty(fileno(stdin)) || isatty(fileno(stdout)) ) {
		fprintf( stderr, usage );
		exit( 1 );
	}

#ifdef never
	/* prepare the kernel(!) */
	/* this is either the direct complex response,
	 *  or the FT(impulse resp)
	 */
	for( i = 0; i < N; i++ ) {
		if( i <= N/2 )
			ibuf[i] = 1.0;	/* Real part */
		else
			ibuf[i] = 0.0;	/* Imag part */
	}
#endif /* never */

	if( (fp = fopen( argv[1], "r" )) == NULL ) {
		fprintf( stderr, "dconv: can't open \"%s\"\n", argv[1] );
		exit( 2 );
	}
	if( (M = fread( ibuf, sizeof(*ibuf), 2*MAXM, fp )) == 0 ) {
		fprintf( stderr, "dconv: problem reading filter file\n" );
		exit( 3 );
	}
	fclose( fp );
	if( M > MAXM ) {
		fprintf( stderr, "dconv: only compiled for up to %d sized filter kernels\n", MAXM );
		exit( 4 );
	}
/*XXX HACK HACK HACK HACK XXX*/
/* Assume M = 2^i - 1 */
M += 1;
	N = 2*M;	/* input sub-section length (fft size) */
	L = N - M + 1;	/* number of "good" points per section */

	if( N == 256 )
		rfft256( ibuf );
	else
		rfft( ibuf, N );

	while( (i = fread(&xbuf[M-1], sizeof(*xbuf), L, stdin)) > 0 ) {
		if( i < L ) {
			/* pad the end with zero's */
			bzero( (char *)&xbuf[M-1+i], (L-i)*sizeof(*savebuffer) );
		}
		bcopy( savebuffer, xbuf, (M-1)*sizeof(*savebuffer) );
		bcopy( &xbuf[L], savebuffer, (M-1)*sizeof(*savebuffer) );

		/*xform( xbuf, N );*/
		if( N == 256 )
			rfft256( xbuf );
		else
			rfft( xbuf, N );

		/* Mult */
		mult( xbuf, ibuf, N );

		/*invxform( xbuf, N );*/
		if( N == 256 )
			irfft256( xbuf );
		else
			irfft( xbuf, N );

		fwrite( &xbuf[M-1], sizeof(*xbuf), L, stdout );
	}

	return 0;
}

/*
 *  Multiply two "real valued" spectra of length n
 *  and put the result in the first.
 *  The order is: [Re(0),Re(1)...Re(N/2),Im(N/2-1),...,Im(1)]
 *    so for: 0 < i < n/2, (x[i],x[n-i]) is a complex pair.
 */
void
mult(double *o, double *b, int n)
{
	int	i;
	double	r;

	/* do DC and Nyquist components */
	o[0] *= b[0];
	o[n/2] *= b[n/2];

	for( i = 1; i < n/2; i++ ) {
		r = o[i] * b[i] - o[n-i] * b[n-i];
		o[n-i] = o[i] * b[n-i] + o[n-i] * b[i];
		o[i] = r;
	}
}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@@


11.7
log
@merge of ansi-6-0-branch into head
@
text
@d14 5
a18 1
#include "conf.h"
@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d39 1
a39 1
void	mult();
d45 1
a45 3
int main( argc, argv )
int	argc;
char	**argv;
d133 1
a133 3
mult( o, b, n )
double	o[], b[];
int	n;
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d39 1
a39 1
void	mult(double *o, double *b, int n);
d45 3
a47 1
int main(int argc, char **argv)
d135 3
a137 1
mult(double *o, double *b, int n)
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d39 1
a39 1
void	mult(double *o, double *b, int n);
d45 3
a47 1
int main(int argc, char **argv)
d135 3
a137 1
mult(double *o, double *b, int n)
@


11.4
log
@Added some includes and declarations
@
text
@d39 1
a39 1
void	mult();
d45 1
a45 3
int main( argc, argv )
int	argc;
char	**argv;
d133 1
a133 3
mult( o, b, n )
double	o[], b[];
int	n;
@


11.3
log
@added proper checking for string.h/strings.h
added int return type to main
added return 0 to main
@
text
@d22 2
d29 5
@


11.2
log
@Minor Mods for Irix 6.2
@
text
@d16 6
d38 1
a38 1
main( argc, argv )
d117 2
@


11.1
log
@Release_4.4
@
text
@d26 2
d119 1
@


10.3
log
@DEC Alpha
@
text
@@


10.2
log
@Added include of conf.h
@
text
@d87 1
a87 1
			bzero( &xbuf[M-1+i], (L-i)*sizeof(*savebuffer) );
@


10.1
log
@Release_4.0
@
text
@d14 2
@


1.2
log
@Minor nits
@
text
@@


1.1
log
@Initial revision
@
text
@d16 1
d56 1
a56 1
#endif never
@
