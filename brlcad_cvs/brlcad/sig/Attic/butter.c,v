head	11.8;
access;
symbols
	ansi-20040405-merged:11.6.2.1
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.6
	premerge-autoconf:11.6
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.6
	autoconf-20031203:11.6
	autoconf-20031202:11.6
	autoconf-branch:11.6.0.10
	phong-branch:11.6.0.8
	photonmap-branch:11.6.0.6
	rel-6-1-DP:11.6
	windows-branch:11.6.0.4
	rel-6-0-2:11.4
	ansi-branch:11.6.0.2
	rel-6-0-1-branch:11.4.0.2
	hartley-6-0-post:11.5
	hartley-6-0-pre:11.4
	rel-6-0-1:11.4
	rel-6-0:11.4
	rel-5-4:11.2
	offsite-5-3-pre:11.2
	rel-5-3:11.2
	rel-5-2:11.2
	rel-5-1-branch:11.2.0.2
	rel-5-1:11.2
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.8
date	2004.05.21.16.45.03;	author morrison;	state dead;
branches;
next	11.7;

11.7
date	2004.04.05.05.45.59;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2002.08.20.17.08.42;	author jra;	state Exp;
branches
	11.6.2.1;
next	11.5;

11.5
date	2002.08.15.20.55.53;	author hartley;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.21.18.26.48;	author jra;	state Exp;
branches;
next	11.3;

11.3
date	2001.08.10.21.22.45;	author morrison;	state Exp;
branches;
next	11.2;

11.2
date	96.07.17.14.15.11;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.19.00;	author mike;	state Rel4_4;
branches;
next	10.1;

10.1
date	91.10.12.06.50.46;	author mike;	state Rel4_0;
branches;
next	1.3;

1.3
date	91.01.28.18.35.04;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	91.01.28.18.33.54;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	90.10.25.20.13.23;	author butler;	state Exp;
branches;
next	;

11.6.2.1
date	2002.09.19.18.02.19;	author morrison;	state Exp;
branches;
next	;


desc
@safety check in
@


11.8
log
@moved to src/sig/
@
text
@/*
 * Butterworth filter.
 *
 * 6-pole Butterworth Bandpass Filter (y = gamma, s = jw = relative freq)
 *
 * Hs(s) = y^3s^3 / [1 + 2ys + (3 + 2y^2)s^2 + (4 + y^2)ys^3
 *		     + (3 + 2y^2)s^4 + 2ys^5 + s^6]
 *
 * For 1/3 octave filters y = 2^(1/6) - 2^(-1/6).
 */
#include <math.h>
#include "./complex.h"

void cdiv();

/*
 *  Returns the magnitude of the transfer function Hs(s) for a
 *  1/3 octave 6-pole Butterworth bandpass filter of the given
 *  frequency.
 */
double
butter(double w)
      	  	/* relative frequency (1.0 = center freq) */
{
	COMPLEX	denom, num, H;
	double	gamma, k1, k2, k3, k4;

	/* 1/3 octave gamma */
	gamma = pow( 2.0, 1.0/6.0 ) - pow( 2.0, -1.0/6.0 );

	/* coefficients */
	k1 = pow( gamma, 3.0 );
	k2 = 2.0 * gamma;
	k3 = 3.0 + 2.0 * pow( gamma, 2.0 );
	k4 = gamma * (4.0 + pow( gamma, 2.0 ));

	num.re = 0.0;
	num.im = -k1 * pow( w, 3.0 );

	denom.re = 1.0 - k3 * pow( w, 2.0 )
		 + k3 * pow( w, 4.0 ) - pow( w, 6.0 );
	denom.im = k2 * w - k4 * pow( w, 3.0 )
		 + k2 * pow( w, 5.0 );

	cdiv( &H, &num, &denom );
/*	printf( "(%f, %f)\n", H.re, H.im );*/
	return( CMAG( H ) );
}

/*
 * Compute weights for a log point spaces critical band filter.
 */
void
cbweights(double *filter, int window, int points)
      	         
   	       		/* Length of FFT to compute relative freq for */
   	       		/* Length of filter kernel wanted */
{
	int	i, center;
	double	step, w;

	center = points/2;
	step = pow( (double)window, 1.0/(window-1.0) );

	filter[center] = butter( 1.0 );
	w = 1;
	for( i = 1; i <= points/2; i++ ) {
		w *= step;
		/* w = pow( step, (double)i ); */
		filter[center+i] = filter[center-i] = butter( w );
	}
}

#ifdef TEST
#define	N	512.0
int main()
{
	int	offset;
	double	wr, mag, step;

	step = pow( N, 1.0/(N-1) );

	for( offset = -15; offset <= 15; offset++ ) {
		wr = pow( step, (double)offset );
		mag = butter( wr );
		printf( "%4d: %f, %f, %f\n", offset, wr, mag, 20.0*log10( mag ) );
	}

	return 0;
}
#endif /* TEST */
@


11.7
log
@merge of ansi-6-0-branch into head
@
text
@@


11.6
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d22 2
a23 2
butter( w )
double	w;	/* relative frequency (1.0 = center freq) */
d54 4
a57 4
cbweights( filter, window, points )
double	filter[];
int	window;		/* Length of FFT to compute relative freq for */
int	points;		/* Length of filter kernel wanted */
@


11.6.2.1
log
@Initial ANSIfication
@
text
@d22 2
a23 2
butter(double w)
      	  	/* relative frequency (1.0 = center freq) */
d54 4
a57 4
cbweights(double *filter, int window, int points)
      	         
   	       		/* Length of FFT to compute relative freq for */
   	       		/* Length of filter kernel wanted */
@


11.5
log
@Converted from K&R to ANSI C - RFH
@
text
@d22 2
a23 2
butter(double w)
      	  	/* relative frequency (1.0 = center freq) */
d54 4
a57 4
cbweights(double *filter, int window, int points)
      	         
   	       		/* Length of FFT to compute relative freq for */
   	       		/* Length of filter kernel wanted */
@


11.4
log
@Added declaration of cdiv();
@
text
@d22 2
a23 2
butter( w )
double	w;	/* relative frequency (1.0 = center freq) */
d54 4
a57 4
cbweights( filter, window, points )
double	filter[];
int	window;		/* Length of FFT to compute relative freq for */
int	points;		/* Length of filter kernel wanted */
@


11.3
log
@added proper checking for string.h/strings.h
added int return type to main
added return 0 to main
@
text
@d14 2
@


11.2
log
@Minor Mods for Irix 6.2
@
text
@d74 1
a74 1
main()
d86 2
@


11.1
log
@Release_4.4
@
text
@d51 1
@


10.1
log
@Release_4.0
@
text
@@


1.3
log
@An optimization suggested by the XMP
@
text
@@


1.2
log
@Minor cpp nits
@
text
@d63 1
d65 2
a66 1
		w = pow( step, (double)i );
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
#include "complex.h"
d84 1
a84 1
#endif TEST
@
