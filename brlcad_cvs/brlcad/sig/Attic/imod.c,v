head	11.9;
access;
symbols
	ansi-20040405-merged:11.5.2.2
	postmerge-20040405-ansi:11.7
	premerge-20040404-ansi:11.6
	postmerge-autoconf:11.6
	autoconf-freeze:11.5.10.2
	premerge-autoconf:11.6
	postmerge-20040315-windows:11.6
	premerge-20040315-windows:11.6
	windows-20040315-freeze:11.5.4.1
	autoconf-20031203:11.5
	autoconf-20031202:11.5
	autoconf-branch:11.5.0.10
	phong-branch:11.5.0.8
	photonmap-branch:11.5.0.6
	rel-6-1-DP:11.5
	windows-branch:11.5.0.4
	rel-6-0-2:11.3
	ansi-branch:11.5.0.2
	rel-6-0-1-branch:11.3.0.2
	hartley-6-0-post:11.4
	hartley-6-0-pre:11.3
	rel-6-0-1:11.3
	rel-6-0:11.3
	rel-5-4:11.1
	offsite-5-3-pre:11.1
	rel-5-3:11.1
	rel-5-2:11.1
	rel-5-1-branch:11.1.0.2
	rel-5-1:11.1
	rel-5-0:11.1
	rel-5-0-beta:11.1
	rel-4-5:11.1
	ctj-4-5-post:11.1
	ctj-4-5-pre:11.1
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.9
date	2004.05.21.16.45.05;	author morrison;	state dead;
branches;
next	11.8;

11.8
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.7;

11.7
date	2004.04.05.05.46.00;	author morrison;	state Exp;
branches;
next	11.6;

11.6
date	2004.02.02.17.39.42;	author morrison;	state Exp;
branches;
next	11.5;

11.5
date	2002.08.20.17.08.44;	author jra;	state Exp;
branches
	11.5.2.1
	11.5.4.1
	11.5.10.1;
next	11.4;

11.4
date	2002.08.15.20.55.56;	author hartley;	state Exp;
branches;
next	11.3;

11.3
date	2001.08.21.18.30.08;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	2001.08.10.21.22.45;	author morrison;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.19.18;	author mike;	state Rel4_4;
branches;
next	10.2;

10.2
date	94.08.23.19.04.27;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.51.13;	author mike;	state Rel4_0;
branches;
next	1.3;

1.3
date	91.07.11.22.48.37;	author butler;	state Exp;
branches;
next	1.2;

1.2
date	90.10.31.19.08.37;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	90.10.25.20.13.53;	author butler;	state Exp;
branches;
next	;

11.5.2.1
date	2002.09.19.18.02.24;	author morrison;	state Exp;
branches;
next	11.5.2.2;

11.5.2.2
date	2004.03.17.21.23.03;	author morrison;	state Exp;
branches;
next	;

11.5.4.1
date	2004.03.11.23.48.30;	author morrison;	state Exp;
branches;
next	;

11.5.10.1
date	2004.02.12.19.43.01;	author erikg;	state Exp;
branches;
next	11.5.10.2;

11.5.10.2
date	2004.03.15.14.08.09;	author erikg;	state Exp;
branches;
next	;


desc
@safety check in
@


11.9
log
@moved to src/sig/
@
text
@/*
 *		I M O D . C
 *
 *  Modify intensities in a stream of short (16 bit) unsigned integers.
 *
 *  Allows any number of add, subtract, multiply, divide, or
 *  exponentiation operations to be performed on a picture.
 *  Keeps track of and reports clipping.
 *
 *  Author -
 *  	Lee A. Butler
 *	25 October 1990
 *
 *  Source -
 *	SECAD/VLD Computing Consortium, Bldg 394
 *	The U. S. Army Ballistic Research Laboratory
 *	Aberdeen Proving Ground, Maryland  21005-5066
 *  
 *  Copyright Notice -
 *	This software is Copyright (C) 1986-2004 by the United States Army.
 *	All rights reserved.
 */
#ifndef lint
static const char RCSid[] = "@@(#)$Header: /n/xoff/cvs/brlcad/sig/imod.c,v 11.8 2004/05/10 15:30:50 erikg Exp $ (BRL)";
#endif

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#include <stdio.h>
#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif
#include <math.h>

#include "machine.h"
#include "externs.h"

char *progname = "(noname)";

char	*file_name;

char usage[] = "\
Usage: smod {-a add -s sub -m mult -d div -A(abs) -e exp -r root} [file.s]\n";

#define	ADD	1
#define MULT	2
#define	ABS	3
#define	POW	4
#define	BUFLEN	(8192*2)	/* usually 2 pages of memory, 16KB */

int	numop = 0;		/* number of operations */
int	op[256];		/* operations */
double	val[256];		/* arguments to operations */
short iobuf[BUFLEN];		/* input buffer */
int mapbuf[65536];		/* translation buffer/lookup table */

int
get_args(int argc, register char **argv)
{
	register int c;
	double	d;

	while ( (c = getopt( argc, argv, "a:s:m:d:Ae:r:" )) != EOF )  {
		switch( c )  {
		case 'a':
			op[ numop ] = ADD;
			val[ numop++ ] = atof(optarg);
			break;
		case 's':
			op[ numop ] = ADD;
			val[ numop++ ] = - atof(optarg);
			break;
		case 'm':
			op[ numop ] = MULT;
			val[ numop++ ] = atof(optarg);
			break;
		case 'd':
			op[ numop ] = MULT;
			d = atof(optarg);
			if( d == 0.0 ) {
				(void)fprintf( stderr, "bwmod: divide by zero!\n" );
				exit( 2 );
			}
			val[ numop++ ] = 1.0 / d;
			break;
		case 'A':
			op[ numop ] = ABS;
			val[ numop++ ] = 0;
			break;
		case 'e':
			op[ numop ] = POW;
			val[ numop++ ] = atof(optarg);
			break;
		case 'r':
			op[ numop ] = POW;
			d = atof(optarg);
			if( d == 0.0 ) {
				(void)fprintf( stderr, "bwmod: zero root!\n" );
				exit( 2 );
			}
			val[ numop++ ] = 1.0 / d;
			break;

		default:		/* '?' */
			return(0);
		}
	}

	if( optind >= argc )  {
		if( isatty((int)fileno(stdin)) )
			return(0);
		file_name = "-";
	} else {
		file_name = argv[optind];
		if( freopen(file_name, "r", stdin) == NULL )  {
			(void)fprintf( stderr,
				"bwmod: cannot open \"%s\" for reading\n",
				file_name );
			return(0);
		}
	}

	if ( argc > ++optind )
		(void)fprintf( stderr, "bwmod: excess argument(s) ignored\n" );

	return(1);		/* OK */
}

void mk_trans_tbl(void)
{
	register int i, j;
	register double d;

	/* create translation map */
	for (j = -32768; j < 32768 ; ++j) {
		d = j;
		for (i=0 ; i < numop ; i++) {
			switch (op[i]) {
			case ADD : d += val[i]; break;
			case MULT: d *= val[i]; break;
			case POW : d = pow( d, val[i]); break;
			case ABS : if (d < 0.0) d = - d; break;
			default  : (void)fprintf(stderr, "%s: error in op\n",
					progname); break;
			}
		}

		if (d > 32767.0)
			mapbuf[j+32768] = 65537;
		else if (d < -32768.0)
			mapbuf[j+32768] = -65536;
		else if (d < 0.0)
			mapbuf[j+32768] = d - 0.5;
		else	
			mapbuf[j+32768] = d + 0.5;
	}
}

int main(int argc, char **argv)
{
	register short *p, *q;
	register int i;
	register unsigned int	n;
	unsigned long clip_high, clip_low;
	
	if (!(progname=strrchr(*argv, '/')))
		progname = *argv;

	if( !get_args( argc, argv ) || isatty(fileno(stdin))
	    || isatty(fileno(stdout)) ) {
		(void)fputs(usage, stderr);
		exit( 1 );
	}

	mk_trans_tbl();

	clip_high = clip_low = 0;

	while ( (n=fread(iobuf, sizeof(*iobuf), BUFLEN, stdin)) > 0) {
		/* translate */
		for (p=iobuf, q= &iobuf[n] ; p < q ; ++p) {
			i = *p + 32768;
			if (mapbuf[i] > 32767) { ++clip_high; *p = 32767; }
			else if (mapbuf[i] < -32768) { ++clip_low; *p = -32768; }
			else *p = (short)mapbuf[i];
		}
		/* output */
		if (fwrite(iobuf, sizeof(*iobuf), n, stdout) != n) {
			(void)fprintf(stderr, "%s: Error writing stdout\n",
				progname);
			exit(-1);
		}
	}

	if( clip_high != 0L || clip_low != 0L ) {
		(void)fprintf( stderr, "%s: clipped %lu high, %lu low\n",
			progname,
			clip_high, clip_low );
	}

	return 0;
}
@


11.8
log
@change conf.h to a wrapped config.h
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /cvs/brlcad/sig/imod.c,v 11.7 2004/04/05 05:46:00 morrison Exp $ (BRL)";
@


11.7
log
@merge of ansi-6-0-branch into head
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
d27 5
a31 1
#include "conf.h"
@


11.6
log
@update copyright to include span through 2003
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/sig/imod.c,v 11.5 2002/08/20 17:08:44 jra Exp $ (BRL)";
d60 1
a60 2
get_args( argc, argv )
register char **argv;
d131 1
a131 1
void mk_trans_tbl()
d161 1
a161 3
int main( argc, argv )
int argc;
char **argv;
@


11.5
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1986 by the United States Army.
d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/sig/imod.c,v 11.3 2001/08/21 18:30:08 jra Exp $ (BRL)";
@


11.5.4.1
log
@sync to HEAD...
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /n/cad/c/CVS/brlcad/sig/imod.c,v 11.6 2004/02/02 17:39:42 morrison Exp $ (BRL)";
@


11.5.10.1
log
@merge from HEAD
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/sig/imod.c,v 11.6 2004/02/02 17:39:42 morrison Exp $ (BRL)";
@


11.5.10.2
log
@merge from head
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/sig/imod.c,v 11.5.10.1 2004/02/12 19:43:01 erikg Exp $ (BRL)";
@


11.5.2.1
log
@Initial ANSIfication
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/sig/imod.c,v 11.5 2002/08/20 17:08:44 jra Exp $ (BRL)";
d60 2
a61 1
get_args(int argc, register char **argv)
d132 1
a132 1
void mk_trans_tbl(void)
d162 3
a164 1
int main(int argc, char **argv)
@


11.5.2.2
log
@sync branch with HEAD
@
text
@d20 1
a20 1
 *	This software is Copyright (C) 1986-2004 by the United States Army.
d24 1
a24 1
static const char RCSid[] = "@@(#)$Header$ (BRL)";
@


11.4
log
@Converted from K&R to ANSI C - RFH
@
text
@d60 2
a61 1
get_args(int argc, register char **argv)
d132 1
a132 1
void mk_trans_tbl(void)
d162 3
a164 1
int main(int argc, char **argv)
@


11.3
log
@lint
@
text
@d24 1
a24 1
static const char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/sig/imod.c,v 11.2 2001/08/10 21:22:45 morrison Exp $ (BRL)";
d60 1
a60 2
get_args( argc, argv )
register char **argv;
d131 1
a131 1
void mk_trans_tbl()
d161 1
a161 3
int main( argc, argv )
int argc;
char **argv;
@


11.2
log
@added proper checking for string.h/strings.h
added int return type to main
added return 0 to main
@
text
@d24 1
a24 1
static char RCSid[] = "@@(#)$Header: /c/CVS/brlcad/sig/imod.c,v 11.1 1995/01/04 10:19:18 mike Rel4_4 $ (BRL)";
d59 1
@


11.1
log
@Release_4.4
@
text
@d24 1
a24 1
static char RCSid[] = "@@(#)$Header: /m/cad/sig/RCS/imod.c,v 10.2 94/08/23 19:04:27 gdurf Exp $ (BRL)";
d204 2
a205 1
	return(0);
@


10.2
log
@Cleaned up includes, ifdefs
@
text
@d24 1
a24 1
static char RCSid[] = "@@(#)$Header: /m/cad/sig/RCS/imod.c,v 10.1 1991/10/12 06:51:13 mike Rel4_0 gdurf $ (BRL)";
@


10.1
log
@Release_4.0
@
text
@d24 1
a24 1
static char RCSid[] = "@@(#)$Header: /m/cad/sig/RCS/imod.c,v 1.3 91/07/11 22:48:37 butler Exp $ (BRL)";
d27 2
d30 5
a35 1
/* #include "externs.h" */
d37 2
a38 3
#if !defined(SYSV) && defined(BSD) && BSD < 43
#define	strrchr rindex
#endif
a39 3
extern int	getopt();
extern char	*optarg;
extern int	optind;
a168 1
	char *strrchr();
@


1.3
log
@added macro definition for strrchr for BSD < 43
@
text
@d24 1
a24 1
static char RCSid[] = "@@(#)$Header: /m/cad/sig/RCS/imod.c,v 1.2 90/10/31 19:08:37 butler Exp $ (BRL)";
@


1.2
log
@fixed table computation error
@
text
@d24 1
a24 1
static char RCSid[] = "@@(#)$Header: /d/butler/src/sig/RCS/smod.c,v 1.1 90/10/25 20:13:58 butler Exp $ (BRL)";
d30 4
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	I M O D . C --- program to manipulate files of short ints
d4 1
a4 1
 *	Author	Lee Butler	Dec. 19 1988
d6 3
d10 12
a21 6
 *	Options:
 *	h	help
 *	a	add int
 *	s	subtract int
 *	m	multiply int
 *	d	divide int
d23 4
d28 2
d31 3
a33 6
/* declarations to support use of getopt() system call */
char *options = "ha:s:m:d:";
char optflags[sizeof(options)];
extern char *optarg;
extern int optind, opterr, getopt();

d36 1
a36 6
#define STKSIZE 16	/* Number of operations we can have */
#define EOP	0	/* end of operations */
#define	ADD	1
#define SUB	2
#define MUL	3
#define DIV	4
d38 2
a39 4
struct op {
	int n, func;
} stack[STKSIZE];
int stklen=0;
d41 5
a45 2
#define BUFSIZ 1024
short sb[BUFSIZ];
d47 5
d53 2
a54 5
/*
 *	D O I T --- Main function of program
 */
void doit(fd)
FILE *fd;
d56 2
a57 6
	short s;
	int i, n, j;
	
	while ((n=fread(sb, sizeof(*sb), BUFSIZ, stdin)) > 0) {
		for (j=0 ; j < n ; j++) {
			register int tmp = (int)sb[j];
d59 43
a101 9
			for (i=0 ; i < stklen ; ++i)
				switch (stack[i].func) {
				case ADD	: tmp += stack[i].n; break;
				case SUB	: tmp -= stack[i].n; break;
				case MUL	: tmp *= stack[i].n; break;
				case DIV	: tmp /= stack[i].n; break;
				default		: fprintf(stderr, "Unknow operation\n"); exit(1); break;
				}
			sb[j] = (short)tmp;
d103 13
a115 3
		if (fwrite(sb, sizeof(*sb), n, stdout) != n) {
			fprintf(stderr, "Error writing stdout\n");
			exit(1);
a117 1
}
d119 2
a120 11
/*	O F F S E T
 *
 *	return offset of character c in string s, or strlen(s) if c not in s
 */
int offset(s, c)
char s[], c;
{
	register unsigned int i=0;
	while (s[i] != '\0' && s[i] != c) i++;
	return(i);
}
d122 1
a122 4
void usage()
{
	fprintf(stderr, "Usage: %s [-a n -s n -m n -d n ] < file \n", progname);
	exit(1);
d125 1
a125 7
/*
 *	P U S H
 *
 *	push an operation and an argument onto a stack
 */
void push(f, n)
int f, n;
d127 2
a128 1
	if (stklen >= STKSIZE) usage();
d130 23
a152 2
	stack[stklen].n = n;
	stack[stklen++].func = f;
d155 3
a157 3
main(ac,av)
int ac;
char *av[];
d159 5
a163 5
	int  c, optlen;
	FILE *fd, *fopen();

	progname = *av;
	if (ac < 3 || isatty(fileno(stdin))) usage();
d165 2
a166 3
	/* Get # of options & turn all the option flags off */
	optlen = strlen(options);
	for (c=0 ; c < optlen ; optflags[c++] = '\0');
d168 4
a171 5

	/* clear the operation stack */
	for (stklen = 0 ; stklen < STKSIZE ; stklen ++) {
		stack[stklen].n = 0;
		stack[stklen].func = 0;
a172 1
	stklen = 0;
d174 1
a174 2
	/* Turn off getopt's error messages */
	opterr = 0;
d176 9
a184 10
	/* get all the option flags from the command line */
	while ((c=getopt(ac,av,options)) != EOF) {
		switch (c) {
		case '?'	: usage(); break;
		case 'a'	: push(ADD, atoi(optarg)); break;
		case 's'	: push(SUB, atoi(optarg)); break;
		case 'm'	: push(MUL, atoi(optarg)); break;
		case 'd'	: push(DIV, atoi(optarg)); break;
		case 'h'	: 
		default		: usage(); break;
d186 6
d194 6
a199 2
	if (optind >= ac) doit(stdin);
	else usage();
@
