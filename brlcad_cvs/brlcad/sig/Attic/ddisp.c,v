head	11.10;
access;
symbols
	ansi-20040405-merged:11.7.2.1
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.7
	postmerge-autoconf:11.7
	autoconf-freeze:11.7
	premerge-autoconf:11.7
	postmerge-20040315-windows:11.7
	premerge-20040315-windows:11.7
	windows-20040315-freeze:11.7
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.3
	offsite-5-3-pre:11.3
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.10
date	2004.05.21.16.45.04;	author morrison;	state dead;
branches;
next	11.9;

11.9
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.8;

11.8
date	2004.04.05.05.45.59;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.43;	author jra;	state Exp;
branches
	11.7.2.1;
next	11.6;

11.6
date	2002.08.15.20.55.54;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2001.08.21.18.31.39;	author jra;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.10.21.22.45;	author morrison;	state Exp;
branches;
next	11.3;

11.3
date	2000.01.31.16.11.22;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	96.07.17.14.15.11;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.19.08;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.08.23.18.13.54;	author gdurf;	state Exp;
branches;
next	10.2;

10.2
date	93.10.26.03.15.03;	author mike;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.51.03;	author mike;	state Rel4_0;
branches;
next	1.3;

1.3
date	91.07.02.04.26.02;	author mike;	state Exp;
branches;
next	1.2;

1.2
date	91.07.02.02.15.47;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	90.10.25.20.13.34;	author butler;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.20;	author morrison;	state Exp;
branches;
next	;


desc
@safety check in
@


11.10
log
@moved to src/sig/
@
text
@/*
 *			D D I S P . C
 *
 *  Data Display - shows doubles on a framebuffer in various ways.
 */
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include "machine.h"
#include "fb.h"

#define	MAXPTS 4096

double	buf[MAXPTS];

int	Clear = 0;
int	pause_time = 0;
int	mode = 0;
#define	VERT	1
#define	BARS	2

FBIO	*fbp;
int	fbsize = 512;

void	lineout(double *dat, int n);
void	disp_inten(double *buf, int size);
void	disp_bars(double *buf, int size);

static char usage[] = "\
Usage: ddisp [-v -b -p -c -h] [width (512)]\n";

int main(int argc, char **argv)
{
	int	n, L;

	while( argc > 1 ) {
		if( strcmp(argv[1], "-v") == 0 ) {
			mode = VERT;
			pause_time = 0;
			Clear = 0;
		} else if( strcmp(argv[1], "-b") == 0 ) {
			mode = BARS;
		} else if( strcmp(argv[1], "-p") == 0 ) {
			pause_time = 3;
		} else if( strcmp(argv[1], "-c") == 0 ) {
			Clear++;
		} else if( strcmp(argv[1], "-h") == 0 ) {
			fbsize = 1024;
		} else
			break;
		argc--;
		argv++;
	}

	if( isatty(fileno(stdin)) ) {
		fprintf( stderr, usage );
		exit( 1 );
	}
	if( (fbp = fb_open( NULL, fbsize, fbsize )) == FBIO_NULL ) {
		exit( 2 );
	}

	L = (argc > 1) ? atoi(argv[1]) : 512;

	while( (n = fread(buf, sizeof(*buf), L, stdin)) > 0 ) {
		/* XXX - width hack */
		if( n > fb_getwidth(fbp) )
			n = fb_getwidth(fbp);

		if( Clear )
			fb_clear( fbp, PIXEL_NULL );
		if( mode == VERT )
			disp_inten( buf, n );
		else if( mode == BARS )
			disp_bars( buf, n );
		else
			lineout( buf, n );
		if( pause_time )
			sleep( pause_time );
	}
	fb_close(fbp);

	return 0;
}

void
lineout(double *dat, int n)
{
	static	int	y = 0;
	int	i, value;
	RGBpixel lbuf[1024*4];

	if( n > fb_getwidth(fbp) ) n = fb_getwidth(fbp);

	for( i = 0; i < n; i++ ) {
		/* Magnitude version */
		value = dat[i] * 255.9;
		if( value < 0 ) value = 0;
		else if( value > 255 ) value = 255;
		lbuf[i][RED] = lbuf[i][GRN] = lbuf[i][BLU] = value;
	}
	fb_write( fbp, 0, y, (unsigned char *)lbuf, n );

	/* Next screen position */
	y = (y + 1) % fb_getheight(fbp);
}

/*
 *  Display doubles.
 *  +/- 1.0 in, becomes +/- 128 from center Y.
 */
void
disp_inten(double *buf, int size)
{
	int	x, y;
	RGBpixel color;

/*	color.red = color.green = color.blue = 255;*/

	if( size > fb_getwidth(fbp) ) size = fb_getwidth(fbp);

	for( x = 0; x < size; x++ ) {
		y = buf[x] * 128;
#ifdef OVERLAY
		fb_read( fbp, x, y+255, color, 1 );
#else
		color[RED] = color[BLU] = 0;
#endif
		color[GRN] = 255;
		fb_write( fbp, x, y+255, color, 1 );
	}
}

/*
 *  Display doubles.
 *  +/- 1.0 in, becomes +/- 128 from center Y.
 */
void
disp_bars(double *buf, int size)
{
	int	x, y;
	RGBpixel color;

/*	color.red = color.green = color.blue = 255;*/

	if( size > fb_getwidth(fbp) ) size = fb_getwidth(fbp);

	for( x = 0; x < size; x++ ) {
		if( buf[x] > 1.0 ) {
			y = 128;
		} else if( buf[x] < -1.0 ) {
			y = -128;
		} else {
			y = buf[x] * 128;
		}
#ifdef OVERLAY
		fb_read( fbp, x, y+255, color, 1 );
#else
		color[RED] = color[BLU] = 0;
#endif
		color[GRN] = 255;
		if( y > 0 ) {
			while( y >= 0 ) {
				fb_write( fbp, x, y+255, color, 1 );
				y--;
			}
		} else {
			while( y <= 0 ) {
				fb_write( fbp, x, y+255, color, 1 );
				y++;
			}
		}
	}
}

#ifdef OLDANDCRUFTY
	/* Calculate Critical Band filter weights */
	if( cflag ) {
		cbweights( &cbfilter[0], window_size, 19 );
		cbsum = 0.0;
		for( i = 0; i < 19; i++ )
			cbsum += cbfilter[i];
	}

/*
 * Scale 0 -> 65536 to 0 -> 100 then double it.
 *  (so 32767 is 100)
 */
disp_mag( buf, size )
#ifdef FHT
double	buf[];
#else
COMPLEX	buf[];
#endif
int size;
{
	int	i, j, x;
	int	mag;
	double	value, sum;
	double	lin[513], logout[513];
	RGBpixel mcolor;

	if( size > 1024 ) size = 1024;
	
	/* Put magnitudes in linear buffer */
/*	lin[0] = buf[0]/256.0;  NO DC ON LOG SCALE! */
	for (i = 1; i < size/2; i++) {
#ifdef FHT
		value = 2.0*sqrt((buf[i]*buf[i]
			+buf[512-i]*buf[512-i])/2.0) / 256.0;
#else
		value = hypot( buf[i].re, buf[i].im );
#endif
/*printf("mag = %f, ", value );*/
		if( value < 0.6 )
			value = 0.0;
		else
			value = 20.0 * log10( value / 65535.0 ) + 100.0;
/*printf("value = %f\n", value );*/
		lin[i-1] = value;
	}
#ifdef FHT
	lin[size/2-1] = buf[size/2]/256.0;
#else
	lin[size/2-1] = buf[size/2].re/256.0;
#endif
	/* Interp to Log scale */
	if( lflag ) {
		LintoLog( lin, logout, size/2 );
	} else {
		for( i = 0; i < size/2; i++ )
			logout[i] = lin[i];	/* yeah, this does suck. */
	}

	/* Critical Band Filter */
	if( cflag ) {
		for( i = 0; i < size/2; i++ )
			lin[i] = logout[i];	/* Borrow lin */
		for( i = 0+9; i < size/2-9; i++ ) {
			sum = 0.0;
			for( j = -9; j <= 9; j++ )
				sum += lin[i+j] * cbfilter[j+9];
			logout[i] = sum / cbsum;
		}
	}

	/* Plot log values */
	for( i = 0; i < size/2 + 1; i++ ) {
		mag = 2.0*logout[i] + 0.5;	/* 200 point range */
		if( size > 512 ) x = i;
		else x = 2*i;
#ifdef OVERLAY
		fb_read( fbp, x, mag+255, mcolor, 1 );
#else
		mcolor[RED] = mcolor[GRN] = 0;
#endif
		mcolor[BLU] = 255;
		fb_write( fbp, x, mag+255, mcolor, 1 );
		if( size <= 512 ) {
#ifdef OVERLAY
			fb_read( fbp, x+1, mag+255, mcolor, 1 );
#else
			mcolor[RED] = mcolor[GRN] = 0;
#endif
			mcolor[BLU] = 255;
			fb_write( fbp, x+1, mag+255, mcolor, 1 );
		}
	}
}

/*
 * -PI -> PI becomes -128 -> 128
 */
disp_phase( buf, size )
#ifdef FHT
double	buf[];
#else
COMPLEX	buf[];
#endif
int size;
{
	int	i, x;
	int	mag;
	double	angle;
	RGBpixel mcolor;

	if( size > 1024 ) size = 1024;

#ifdef OVERLAY
	fb_read( fbp, 0, 255, mcolor, 1 );
#else
	mcolor[GRN] = mcolor[BLU] = 0;
#endif
	mcolor[RED] = 255;
	fb_write( fbp, 0, 255, mcolor, 1 );
	for (i = 1; i < size/2; i++) {
#ifdef FHT
		if( fabs(buf[i]+buf[size-i]) < 0.0001 )
			angle = PI / 2.0;
		else
			angle = atan( (buf[i]-buf[size-i])/
				      (buf[i]+buf[size-i]) );
#else
		/* four quadrant arctan.  THIS NEEDS WORK - XXX */
/*fprintf( stderr, "%3d: (%10f,%10f) -> ", i, buf[i].re, buf[i].im );*/
		if( fabs( buf[i].re ) < 1.0e-10 ) {
			/* XXX - check for im equally small */
			if( fabs( buf[i].im ) < 1.0e-10 )
				angle = 0.0;
			else
				angle = (buf[i].im > 0.0) ? PI/2.0 : -PI/2.0;
		} else {
			angle = atan( buf[i].im / buf[i].re );
			if( buf[i].re < 0.0 )
				angle += (buf[i].im > 0.0) ? PI : -PI;
		}
/*fprintf( stderr, "%10f Deg\n", RtoD(angle) );*/
#endif
		mag = (128.0/PI)*angle + 0.5;
#ifdef DEBUG
printf("(%6.3f,%6.3f): angle = %7.3f (%6.2f), mag = %d\n",
	buf[i].re, buf[i].im, angle, RtoD( angle ), mag );
#endif /* DEBUG */
		if( size > 512 ) x = i;
		else x = 2*i;
#ifdef OVERLAY
		fb_read( fbp, x, mag+255, mcolor, 1 );
#else
		mcolor[GRN] = mcolor[BLU] = 0;
#endif
		mcolor[RED] = 255;
		fb_write( fbp, x, mag+255, mcolor, 1 );
		if( size <= 512 ) {
#ifdef OVERLAY
			fb_read( fbp, x+1, mag+255, mcolor, 1 );
#else
			mcolor[GRN] = mcolor[BLU] = 0;
#endif
			mcolor[RED] = 255;
			fb_write( fbp, x+1, mag+255, mcolor, 1 );
		}
	}
#ifdef OVERLAY
	fb_read( fbp, size/2, 255, mcolor, 1 );
#else
	mcolor[GRN] = mcolor[BLU] = 0;
#endif
	mcolor[RED] = 255;
	fb_write( fbp, size/2, 255, mcolor, 1 );
}
#endif /* OLDANDCRUFTY */
@


11.9
log
@change conf.h to a wrapped config.h
@
text
@@


11.8
log
@merge of ansi-6-0-branch into head
@
text
@d6 5
a10 1
#include "conf.h"
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d33 3
a35 3
void	lineout();
void	disp_inten();
void	disp_bars();
d40 1
a40 3
int main( argc, argv )
int	argc;
char	**argv;
d95 1
a95 3
lineout( dat, n )
double dat[];
int n;
d121 1
a121 3
disp_inten( buf, size )
double	buf[];
int size;
d147 1
a147 3
disp_bars( buf, size )
double	buf[];
int size;
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d33 3
a35 3
void	lineout(double *dat, int n);
void	disp_inten(double *buf, int size);
void	disp_bars(double *buf, int size);
d40 3
a42 1
int main(int argc, char **argv)
d97 3
a99 1
lineout(double *dat, int n)
d125 3
a127 1
disp_inten(double *buf, int size)
d153 3
a155 1
disp_bars(double *buf, int size)
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d33 3
a35 3
void	lineout(double *dat, int n);
void	disp_inten(double *buf, int size);
void	disp_bars(double *buf, int size);
d40 3
a42 1
int main(int argc, char **argv)
d97 3
a99 1
lineout(double *dat, int n)
d125 3
a127 1
disp_inten(double *buf, int size)
d153 3
a155 1
disp_bars(double *buf, int size)
@


11.5
log
@lint
@
text
@d33 3
a35 3
void	lineout();
void	disp_inten();
void	disp_bars();
d40 1
a40 3
int main( argc, argv )
int	argc;
char	**argv;
d95 1
a95 3
lineout( dat, n )
double dat[];
int n;
d121 1
a121 3
disp_inten( buf, size )
double	buf[];
int size;
d147 1
a147 3
disp_bars( buf, size )
double	buf[];
int size;
@


11.4
log
@added proper checking for string.h/strings.h
added int return type to main
added return 0 to main
@
text
@d14 2
@


11.3
log
@Eliminated some unused variables
@
text
@d8 6
d38 1
a38 1
main( argc, argv )
d90 2
@


11.2
log
@Minor Mods for Irix 6.2
@
text
@d147 1
a147 1
	int	i, x, y;
@


11.1
log
@Release_4.4
@
text
@d25 4
d86 1
d114 1
d142 1
@


10.3
log
@Added include of conf.h
@
text
@@


10.2
log
@New fb.h
@
text
@d6 2
@


10.1
log
@Release_4.0
@
text
@d86 1
a86 1
	RGBpixel lbuf[1024];
d97 1
a97 1
	fb_write( fbp, 0, y, lbuf, n );
@


1.3
log
@Fixed bad header file.
@
text
@@


1.2
log
@Minor nits
@
text
@d7 2
a8 1
#include <brlcad/fb.h>
@


1.1
log
@Initial revision
@
text
@d13 2
a14 2
int	clear = 0;
int	pause = 0;
d34 2
a35 2
			pause = 0;
			clear = 0;
d39 1
a39 1
			pause = 3;
d41 1
a41 1
			clear++;
d65 1
a65 1
		if( clear )
d73 2
a74 2
		if( pause )
			sleep( pause );
d319 1
a319 1
#endif DEBUG
d347 1
a347 1
#endif OLDANDCRUFTY
@
