head	11.10;
access;
symbols
	ansi-20040405-merged:11.7.2.1
	postmerge-20040405-ansi:11.8
	premerge-20040404-ansi:11.7
	postmerge-autoconf:11.7
	autoconf-freeze:11.7
	premerge-autoconf:11.7
	postmerge-20040315-windows:11.7
	premerge-20040315-windows:11.7
	windows-20040315-freeze:11.7
	autoconf-20031203:11.7
	autoconf-20031202:11.7
	autoconf-branch:11.7.0.10
	phong-branch:11.7.0.8
	photonmap-branch:11.7.0.6
	rel-6-1-DP:11.7
	windows-branch:11.7.0.4
	rel-6-0-2:11.5
	ansi-branch:11.7.0.2
	rel-6-0-1-branch:11.5.0.2
	hartley-6-0-post:11.6
	hartley-6-0-pre:11.5
	rel-6-0-1:11.5
	rel-6-0:11.5
	rel-5-4:11.3
	offsite-5-3-pre:11.3
	rel-5-3:11.3
	rel-5-2:11.3
	rel-5-1-branch:11.3.0.2
	rel-5-1:11.3
	rel-5-0:11.2
	rel-5-0-beta:11.2
	rel-4-5:11.2
	ctj-4-5-post:11.2
	ctj-4-5-pre:11.2
	rel-4-4:11.1
	rel-4-0:10.1;
locks; strict;
comment	@ * @;


11.10
date	2004.05.21.16.45.04;	author morrison;	state dead;
branches;
next	11.9;

11.9
date	2004.05.10.15.30.50;	author erikg;	state Exp;
branches;
next	11.8;

11.8
date	2004.04.05.05.45.59;	author morrison;	state Exp;
branches;
next	11.7;

11.7
date	2002.08.20.17.08.43;	author jra;	state Exp;
branches
	11.7.2.1;
next	11.6;

11.6
date	2002.08.15.20.55.54;	author hartley;	state Exp;
branches;
next	11.5;

11.5
date	2001.08.21.18.25.34;	author jra;	state Exp;
branches;
next	11.4;

11.4
date	2001.08.10.21.22.45;	author morrison;	state Exp;
branches;
next	11.3;

11.3
date	2000.01.31.16.11.22;	author jra;	state Exp;
branches;
next	11.2;

11.2
date	96.07.17.14.15.11;	author jra;	state Exp;
branches;
next	11.1;

11.1
date	95.01.04.10.19.09;	author mike;	state Rel4_4;
branches;
next	10.3;

10.3
date	94.12.30.03.31.39;	author mike;	state Exp;
branches;
next	10.2;

10.2
date	94.08.23.18.14.15;	author gdurf;	state Exp;
branches;
next	10.1;

10.1
date	91.10.12.06.51.04;	author mike;	state Rel4_0;
branches;
next	1.2;

1.2
date	91.07.02.02.15.48;	author butler;	state Exp;
branches;
next	1.1;

1.1
date	90.10.25.20.13.35;	author butler;	state Exp;
branches;
next	;

11.7.2.1
date	2002.09.19.18.02.20;	author morrison;	state Exp;
branches;
next	;


desc
@safety check in
@


11.10
log
@moved to src/sig/
@
text
@/*
 *		D F F T
 *
 *  Compute FFT's of a stream of doubles (Real data).
 *
 *  Presently 512 point spectrum only.
 *  Which means we need a 1K data segment to get spectrum at midpoint.
 */
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif



#ifdef USE_STRING_H
#include <string.h>
#else
#include <strings.h>
#endif

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "machine.h"
#include "./complex.h"

#define	MAXFFT	4096
#define	MAXOUT	2048		/* MAXFFT/2 XXX (Actually + 1) */

double	data[MAXFFT];		/* Data buffer: 2*Points in spectrum */

double	mindB = -120.0;
int	lflag = 0;
int	cflag = 0;
int	phase = 0;
int	linear_output = 0;
int	ascii_output = 0;
int	normalize_output = 0;

double	cbfilter[27];
void	cbweights(double *filter, int window, int points);
double	cbsum;
void	fftdisp(double *dat, int N);
void	fftmag2(double *mags, double *dat, int N);
void	fftphase(double *dat, int N);
void	rfft();
void	LintoLog(double *in, double *out, int num);

char usage[] = "\
Usage: dfft [options] [width (1024)] < doubles > 512logmags\n\
  -d dB  minimum dB (default 120)\n\
  -l     log frequency scale\n\
  -c     critical band filter (3rd octave)\n\
  -N	 normalized PSD to max magnitude\n\
  -L	 linear output (no dB mag)\n\
  -A     ascii output\n\
";

int main(int argc, char **argv)
{
	int	i, n;
	int	L;

	if( isatty(fileno(stdin)) || isatty(fileno(stdout)) ) {
		fprintf( stderr, usage );
		exit( 1 );
	}

	while( argc > 1 ) {
		if( strcmp(argv[1], "-d") == 0 ) {
			mindB = -atof( argv[2] );
			argc--;
			argv++;
		} else if( strcmp(argv[1], "-c") == 0 ) {
			cflag++;
		} else if( strcmp(argv[1], "-l") == 0 ) {
			lflag++;
		} else if( strcmp(argv[1], "-p") == 0 ) {
			phase++;
		} else if( strcmp(argv[1], "-L") == 0 ) {
			linear_output++;
		} else if( strcmp(argv[1], "-A") == 0 ) {
			ascii_output++;
		} else if( strcmp(argv[1], "-N") == 0 ) {
			normalize_output++;
		} else
			break;
		argc--;
		argv++;
	}

	L = (argc > 1) ? atoi(argv[1]) : 1024;
	if( L > MAXFFT ) {
		fprintf( stderr, "dfft: can't go over %d\n", MAXFFT );
		exit( 2 );
	}

	/* Calculate Critical Band filter weights */
	if (cflag) {
		cbweights(&cbfilter[0], L, 19);
		cbsum = 0.0;
		for (i = 0; i < 19; i++)
			cbsum += cbfilter[i];
	}

	while ((n = fread(data, sizeof(*data), L, stdin)) > 0) {
		if (n != L) {
			fprintf( stderr, "dfft: warning - partial record, adding %d zeros\n", L-n );
			bzero( (char *)&data[n], L-n);
		}

		/* Do a spectrum */
		/* if (L == 256) rfft256(data); etc. XXX */
		rfft(data, L);

		/* Put it on screen */
		if (phase)
			fftphase(data, L);
		else
			fftdisp(data, L);
	}

	return 0;
}

void
fftdisp(double *dat, int N)
{
	int	i, j;
	double	mags[MAXOUT];

	/* Periodogram scaling */
	for( i = 0; i < N; i++ )
		dat[i] /= (double)N;

	fftmag2( mags, dat, N );

	/* Interp to Log freq scale */
	if( lflag ) {
		double	logout[MAXOUT+1];

		LintoLog( mags, logout, N/2 );
		/* put result back in mags */
		for( i = 0; i < N/2; i++ )
			mags[i] = logout[i];
	}

	/* Critical Band Filter */
	if( cflag ) {
		double	sum;
		double	tmp[MAXOUT];

		/* save working copy */
		for( i = 0; i < N/2; i++ )
			tmp[i] = mags[i];

		/* filter it */
		for( i = 0+9; i < N/2-9; i++ ) {
			sum = 0.0;
			for( j = -9; j <= 9; j++ )
				sum += tmp[i+j] * cbfilter[j+9];
			mags[i] = sum / cbsum;
		}
	}

	if (normalize_output) {
		double max = mags[1];		/* XXX or [0] ? */
		for (i = 1; i < N/2; i++) {
			if (mags[i] > max)
				max = mags[i];
		}
		if (linear_output) {
			for (i = 0; i < N/2; i++) {
				mags[i] /= max;
			}
		} else {
			for (i = 0; i < N/2; i++) {
				mags[i] -= max;
				if (mags[i] < mindB)
					mags[i] = mindB;
			}
		}
	}

	if (ascii_output) {
		for (i = 0; i < N/2; i++) {
			printf("%g %g\n", i/(double)N, mags[i]);
		}
	} else {
#if 0
		/* normalize dB range from 0 to 1 */
		value = (dB/mindB) + 1.0;
		if( value < 0 ) value = 0;
		else if( value > 1.0 ) value = 1.0;
#endif
		fwrite( mags, sizeof(*mags), N/2, stdout );
	}
}

void
fftmag2(double *mags, double *dat, int N)
{
	int	i;
	double	value, dB;

	/* DC */
	mags[0] = dat[0]*dat[0];

	/* Normal */
	for( i = 1; i < N/2; i++ ) {
		mags[i] = dat[i]*dat[i] + dat[N-i]*dat[N-i];
	}

	/* Nyquist */
	mags[N/2] = dat[N/2]*dat[N/2];


	if (linear_output) {
#if 0
		for (i = 0; i <= N/2; i++) {
			mags[i] = sqrt(mags[i]);	/*XXX?*/
		}
#endif
		;
	} else {
		/* Log output */
		for (i = 0; i <= N/2; i++) {
			value = mags[i];
			if( value > 1.0e-18 )
				dB = 10*log10(value);
			else
				dB = -180.0;
			mags[i] = dB;
		}
	}
}

void
fftphase(double *dat, int N)
{
	int	i;
	double	value, out[MAXFFT];

	for( i = 0; i < N; i++ )
		dat[i] /= (double)N;

	for( i = 1; i < N/2; i++ ) {
		value = atan2( dat[N-i], dat[i] );
		out[i] = value / PI;
	}
	/* DC */
	out[i] = 0;

	fwrite( out, sizeof(*out), N/2, stdout );
}
@


11.9
log
@change conf.h to a wrapped config.h
@
text
@@


11.8
log
@merge of ansi-6-0-branch into head
@
text
@d9 5
a13 1
#include "conf.h"
@


11.7
log
@Restoration of entire source tree to Pre-Hartley state
@
text
@d38 1
a38 1
void	cbweights();
d40 3
a42 3
void	fftdisp();
void	fftmag2();
void	fftphase();
d44 1
a44 1
void	LintoLog();
d56 1
a56 3
int main( argc, argv )
int argc;
char **argv;
d124 1
a124 3
fftdisp( dat, N )
double	dat[];
int	N;
d198 1
a198 3
fftmag2( mags, dat, N )
double	*mags, *dat;
int	N;
d236 1
a236 3
fftphase( dat, N )
double	dat[];
int	N;
@


11.7.2.1
log
@Initial ANSIfication
@
text
@d38 1
a38 1
void	cbweights(double *filter, int window, int points);
d40 3
a42 3
void	fftdisp(double *dat, int N);
void	fftmag2(double *mags, double *dat, int N);
void	fftphase(double *dat, int N);
d44 1
a44 1
void	LintoLog(double *in, double *out, int num);
d56 3
a58 1
int main(int argc, char **argv)
d126 3
a128 1
fftdisp(double *dat, int N)
d202 3
a204 1
fftmag2(double *mags, double *dat, int N)
d242 3
a244 1
fftphase(double *dat, int N)
@


11.6
log
@Converted from K&R to ANSI C - RFH
@
text
@d38 1
a38 1
void	cbweights(double *filter, int window, int points);
d40 3
a42 3
void	fftdisp(double *dat, int N);
void	fftmag2(double *mags, double *dat, int N);
void	fftphase(double *dat, int N);
d44 1
a44 1
void	LintoLog(double *in, double *out, int num);
d56 3
a58 1
int main(int argc, char **argv)
d126 3
a128 1
fftdisp(double *dat, int N)
d202 3
a204 1
fftmag2(double *mags, double *dat, int N)
d242 3
a244 1
fftphase(double *dat, int N)
@


11.5
log
@Added includes and declarations
@
text
@d38 1
a38 1
void	cbweights();
d40 3
a42 3
void	fftdisp();
void	fftmag2();
void	fftphase();
d44 1
a44 1
void	LintoLog();
d56 1
a56 3
int main( argc, argv )
int argc;
char **argv;
d124 1
a124 3
fftdisp( dat, N )
double	dat[];
int	N;
d198 1
a198 3
fftmag2( mags, dat, N )
double	*mags, *dat;
int	N;
d236 1
a236 3
fftphase( dat, N )
double	dat[];
int	N;
@


11.4
log
@added proper checking for string.h/strings.h
added int return type to main
added return 0 to main
@
text
@d17 2
d38 1
d43 2
@


11.3
log
@Eliminated some unused variables
@
text
@d11 6
d51 1
a51 1
main( argc, argv )
d116 2
@


11.2
log
@Minor Mods for Irix 6.2
@
text
@d49 1
a49 1
	int	i, n, step;
@


11.1
log
@Release_4.4
@
text
@d31 3
d112 1
d188 1
d228 1
@


10.3
log
@DEC Alpha
@
text
@@


10.2
log
@Added include of conf.h
@
text
@d94 1
a94 1
			bzero(&data[n], L-n);
@


10.1
log
@Release_4.0
@
text
@d9 2
@


1.2
log
@Minor nits
@
text
@@


1.1
log
@Initial revision
@
text
@d11 2
a12 1
#include "complex.h"
d206 2
a207 1
#endif;
@
